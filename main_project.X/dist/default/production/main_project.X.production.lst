

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Mon Feb 27 17:18:33 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    38                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    52                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    53                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    54  0000                     
    55                           ; Version 1.40
    56                           ; Generated 01/12/2016 GMT
    57                           ; 
    58                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    59                           ; All rights reserved.
    60                           ; 
    61                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    62                           ; 
    63                           ; Redistribution and use in source and binary forms, with or without modification, are
    64                           ; permitted provided that the following conditions are met:
    65                           ; 
    66                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    67                           ;        conditions and the following disclaimer.
    68                           ; 
    69                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    70                           ;        of conditions and the following disclaimer in the documentation and/or other
    71                           ;        materials provided with the distribution.
    72                           ; 
    73                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    74                           ;        software without specific prior written permission.
    75                           ; 
    76                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    77                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    78                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    79                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    80                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    81                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    82                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    83                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    84                           ; 
    85                           ; 
    86                           ; Code-generator required, PIC18F4620 Definitions
    87                           ; 
    88                           ; SFR Addresses
    89  0000                     
    90                           	psect	idataCOMRAM
    91  001BE0                     __pidataCOMRAM:
    92                           	opt stack 0
    93                           
    94                           ;initializer for _solOnTimer
    95  001BE0  04                 	db	4
    96                           
    97                           	psect	idataBANK0
    98  001BE1                     __pidataBANK0:
    99                           	opt stack 0
   100                           
   101                           ;initializer for _screenMode
   102  001BE1  02                 	db	2
   103                           
   104                           	psect	mediumconst
   105  00FE44                     __pmediumconst:
   106                           	opt stack 0
   107  00FE44  00                 	db	0
   108  00FE45                     _keys:
   109                           	opt stack 0
   110  00FE45  31                 	db	49
   111  00FE46  32                 	db	50
   112  00FE47  33                 	db	51
   113  00FE48  41                 	db	65
   114  00FE49  34                 	db	52
   115  00FE4A  35                 	db	53
   116  00FE4B  36                 	db	54
   117  00FE4C  42                 	db	66
   118  00FE4D  37                 	db	55
   119  00FE4E  38                 	db	56
   120  00FE4F  39                 	db	57
   121  00FE50  43                 	db	67
   122  00FE51  2A                 	db	42
   123  00FE52  30                 	db	48
   124  00FE53  23                 	db	35
   125  00FE54  44                 	db	68
   126  00FE55  00                 	db	0
   127  00FE56                     __end_of_keys:
   128                           	opt stack 0
   129  00FE56                     _dpowers:
   130                           	opt stack 0
   131  00FE56  0001               	dw	1
   132  00FE58  000A               	dw	10
   133  00FE5A  0064               	dw	100
   134  00FE5C  03E8               	dw	1000
   135  00FE5E  2710               	dw	10000
   136  00FE60                     __end_of_dpowers:
   137                           	opt stack 0
   138  00FE60                     _hexpowers:
   139                           	opt stack 0
   140  00FE60  0001               	dw	1
   141  00FE62  0010               	dw	16
   142  00FE64  0100               	dw	256
   143  00FE66  1000               	dw	4096
   144  00FE68                     __end_of_hexpowers:
   145                           	opt stack 0
   146  0000                     _TMR0	set	4054
   147  0000                     _TMR1	set	4046
   148  0000                     _ADCON0	set	4034
   149  0000                     _ADCON0bits	set	4034
   150  0000                     _ADCON1	set	4033
   151  0000                     _ADCON2	set	4032
   152  0000                     _ADRESH	set	4036
   153  0000                     _ADRESL	set	4035
   154  0000                     _INTCONbits	set	4082
   155  0000                     _LATA	set	3977
   156  0000                     _LATAbits	set	3977
   157  0000                     _LATB	set	3978
   158  0000                     _LATBbits	set	3978
   159  0000                     _LATC	set	3979
   160  0000                     _LATCbits	set	3979
   161  0000                     _LATD	set	3980
   162  0000                     _LATDbits	set	3980
   163  0000                     _LATE	set	3981
   164  0000                     _LATEbits	set	3981
   165  0000                     _PORTB	set	3969
   166  0000                     _SSPADD	set	4040
   167  0000                     _SSPBUF	set	4041
   168  0000                     _SSPCON1	set	4038
   169  0000                     _SSPCON2	set	4037
   170  0000                     _SSPSTAT	set	4039
   171  0000                     _T0CON	set	4053
   172  0000                     _T0CONbits	set	4053
   173  0000                     _T1CON	set	4045
   174  0000                     _T1CONbits	set	4045
   175  0000                     _TRISA	set	3986
   176  0000                     _TRISB	set	3987
   177  0000                     _TRISC	set	3988
   178  0000                     _TRISD	set	3989
   179  0000                     _TRISE	set	3990
   180  0000                     _ACKDT	set	32301
   181  0000                     _ACKEN	set	32300
   182  0000                     _GIE	set	32663
   183  0000                     _INT1IE	set	32643
   184  0000                     _INT1IF	set	32640
   185  0000                     _PEIE	set	32662
   186  0000                     _PEN	set	32298
   187  0000                     _RCEN	set	32299
   188  0000                     _SEN	set	32296
   189  0000                     _TMR0IE	set	32661
   190  0000                     _TMR0IF	set	32658
   191  0000                     _TMR1IE	set	31976
   192  0000                     _TMR1IF	set	31984
   193  0000                     _TRISC3	set	31907
   194  0000                     _TRISC4	set	31908
   195  00FE68                     STR_8:
   196  00FE68  25                 	db	37
   197  00FE69  30                 	db	48	;'0'
   198  00FE6A  32                 	db	50	;'2'
   199  00FE6B  64                 	db	100	;'d'
   200  00FE6C  3A                 	db	58	;':'
   201  00FE6D  25                 	db	37
   202  00FE6E  30                 	db	48	;'0'
   203  00FE6F  32                 	db	50	;'2'
   204  00FE70  64                 	db	100	;'d'
   205  00FE71  20                 	db	32
   206  00FE72  20                 	db	32
   207  00FE73  20                 	db	32
   208  00FE74  20                 	db	32
   209  00FE75  20                 	db	32
   210  00FE76  20                 	db	32
   211  00FE77  20                 	db	32
   212  00FE78  20                 	db	32
   213  00FE79  20                 	db	32
   214  00FE7A  20                 	db	32
   215  00FE7B  20                 	db	32
   216  00FE7C  20                 	db	32
   217  00FE7D  20                 	db	32
   218  00FE7E  20                 	db	32
   219  00FE7F  20                 	db	32
   220  00FE80  00                 	db	0
   221  00FE81                     STR_19:
   222  00FE81  44                 	db	68	;'D'
   223  00FE82  41                 	db	65	;'A'
   224  00FE83  54                 	db	84	;'T'
   225  00FE84  45                 	db	69	;'E'
   226  00FE85  3A                 	db	58	;':'
   227  00FE86  20                 	db	32
   228  00FE87  25                 	db	37
   229  00FE88  30                 	db	48	;'0'
   230  00FE89  32                 	db	50	;'2'
   231  00FE8A  78                 	db	120	;'x'
   232  00FE8B  2F                 	db	47
   233  00FE8C  25                 	db	37
   234  00FE8D  30                 	db	48	;'0'
   235  00FE8E  32                 	db	50	;'2'
   236  00FE8F  78                 	db	120	;'x'
   237  00FE90  2F                 	db	47
   238  00FE91  25                 	db	37
   239  00FE92  30                 	db	48	;'0'
   240  00FE93  32                 	db	50	;'2'
   241  00FE94  78                 	db	120	;'x'
   242  00FE95  20                 	db	32
   243  00FE96  20                 	db	32
   244  00FE97  00                 	db	0
   245  00FE98                     STR_20:
   246  00FE98  54                 	db	84	;'T'
   247  00FE99  49                 	db	73	;'I'
   248  00FE9A  4D                 	db	77	;'M'
   249  00FE9B  45                 	db	69	;'E'
   250  00FE9C  3A                 	db	58	;':'
   251  00FE9D  20                 	db	32
   252  00FE9E  25                 	db	37
   253  00FE9F  30                 	db	48	;'0'
   254  00FEA0  32                 	db	50	;'2'
   255  00FEA1  78                 	db	120	;'x'
   256  00FEA2  3A                 	db	58	;':'
   257  00FEA3  25                 	db	37
   258  00FEA4  30                 	db	48	;'0'
   259  00FEA5  32                 	db	50	;'2'
   260  00FEA6  78                 	db	120	;'x'
   261  00FEA7  3A                 	db	58	;':'
   262  00FEA8  25                 	db	37
   263  00FEA9  30                 	db	48	;'0'
   264  00FEAA  32                 	db	50	;'2'
   265  00FEAB  78                 	db	120	;'x'
   266  00FEAC  20                 	db	32
   267  00FEAD  20                 	db	32
   268  00FEAE  00                 	db	0
   269  00FEAF                     STR_24:
   270  00FEAF  52                 	db	82	;'R'
   271  00FEB0  55                 	db	85	;'U'
   272  00FEB1  4E                 	db	78	;'N'
   273  00FEB2  4E                 	db	78	;'N'
   274  00FEB3  49                 	db	73	;'I'
   275  00FEB4  4E                 	db	78	;'N'
   276  00FEB5  47                 	db	71	;'G'
   277  00FEB6  3A                 	db	58	;':'
   278  00FEB7  20                 	db	32
   279  00FEB8  25                 	db	37
   280  00FEB9  30                 	db	48	;'0'
   281  00FEBA  32                 	db	50	;'2'
   282  00FEBB  64                 	db	100	;'d'
   283  00FEBC  3A                 	db	58	;':'
   284  00FEBD  25                 	db	37
   285  00FEBE  30                 	db	48	;'0'
   286  00FEBF  32                 	db	50	;'2'
   287  00FEC0  64                 	db	100	;'d'
   288  00FEC1  20                 	db	32
   289  00FEC2  20                 	db	32
   290  00FEC3  20                 	db	32
   291  00FEC4  00                 	db	0
   292  00FEC5                     STR_14:
   293  00FEC5  42                 	db	66	;'B'
   294  00FEC6  41                 	db	65	;'A'
   295  00FEC7  54                 	db	84	;'T'
   296  00FEC8  54                 	db	84	;'T'
   297  00FEC9  45                 	db	69	;'E'
   298  00FECA  52                 	db	82	;'R'
   299  00FECB  49                 	db	73	;'I'
   300  00FECC  45                 	db	69	;'E'
   301  00FECD  53                 	db	83	;'S'
   302  00FECE  3A                 	db	58	;':'
   303  00FECF  20                 	db	32
   304  00FED0  25                 	db	37
   305  00FED1  30                 	db	48	;'0'
   306  00FED2  32                 	db	50	;'2'
   307  00FED3  64                 	db	100	;'d'
   308  00FED4  20                 	db	32
   309  00FED5  20                 	db	32
   310  00FED6  20                 	db	32
   311  00FED7  20                 	db	32
   312  00FED8  20                 	db	32
   313  00FED9  00                 	db	0
   314  00FEDA                     STR_10:
   315  00FEDA  42                 	db	66	;'B'
   316  00FEDB  41                 	db	65	;'A'
   317  00FEDC  54                 	db	84	;'T'
   318  00FEDD  54                 	db	84	;'T'
   319  00FEDE  45                 	db	69	;'E'
   320  00FEDF  52                 	db	82	;'R'
   321  00FEE0  49                 	db	73	;'I'
   322  00FEE1  45                 	db	69	;'E'
   323  00FEE2  53                 	db	83	;'S'
   324  00FEE3  3A                 	db	58	;':'
   325  00FEE4  20                 	db	32
   326  00FEE5  25                 	db	37
   327  00FEE6  30                 	db	48	;'0'
   328  00FEE7  32                 	db	50	;'2'
   329  00FEE8  64                 	db	100	;'d'
   330  00FEE9  20                 	db	32
   331  00FEEA  20                 	db	32
   332  00FEEB  20                 	db	32
   333  00FEEC  00                 	db	0
   334  00FEED                     STR_4:
   335  00FEED  25                 	db	37
   336  00FEEE  30                 	db	48	;'0'
   337  00FEEF  34                 	db	52	;'4'
   338  00FEF0  64                 	db	100	;'d'
   339  00FEF1  20                 	db	32
   340  00FEF2  25                 	db	37
   341  00FEF3  32                 	db	50	;'2'
   342  00FEF4  64                 	db	100	;'d'
   343  00FEF5  20                 	db	32
   344  00FEF6  20                 	db	32
   345  00FEF7  20                 	db	32
   346  00FEF8  20                 	db	32
   347  00FEF9  20                 	db	32
   348  00FEFA  20                 	db	32
   349  00FEFB  20                 	db	32
   350  00FEFC  20                 	db	32
   351  00FEFD  20                 	db	32
   352  00FEFE  00                 	db	0
   353  00FEFF                     STR_25:
   354  00FEFF  30                 	db	48	;'0'
   355  00FF00  31                 	db	49	;'1'
   356  00FF01  32                 	db	50	;'2'
   357  00FF02  33                 	db	51	;'3'
   358  00FF03  34                 	db	52	;'4'
   359  00FF04  35                 	db	53	;'5'
   360  00FF05  36                 	db	54	;'6'
   361  00FF06  37                 	db	55	;'7'
   362  00FF07  38                 	db	56	;'8'
   363  00FF08  39                 	db	57	;'9'
   364  00FF09  61                 	db	97	;'a'
   365  00FF0A  62                 	db	98	;'b'
   366  00FF0B  63                 	db	99	;'c'
   367  00FF0C  64                 	db	100	;'d'
   368  00FF0D  65                 	db	101	;'e'
   369  00FF0E  66                 	db	102	;'f'
   370  00FF0F  00                 	db	0
   371  00FF10                     STR_22:
   372  00FF10  20                 	db	32
   373  00FF11  20                 	db	32
   374  00FF12  20                 	db	32
   375  00FF13  20                 	db	32
   376  00FF14  20                 	db	32
   377  00FF15  20                 	db	32
   378  00FF16  20                 	db	32
   379  00FF17  20                 	db	32
   380  00FF18  20                 	db	32
   381  00FF19  20                 	db	32
   382  00FF1A  20                 	db	32
   383  00FF1B  20                 	db	32
   384  00FF1C  20                 	db	32
   385  00FF1D  20                 	db	32
   386  00FF1E  20                 	db	32
   387  00FF1F  20                 	db	32
   388  00FF20  00                 	db	0
   389  00FF21                     STR_11:
   390  00FF21  23                 	db	35
   391  00FF22  20                 	db	32
   392  00FF23  4F                 	db	79	;'O'
   393  00FF24  46                 	db	70	;'F'
   394  00FF25  20                 	db	32
   395  00FF26  43                 	db	67	;'C'
   396  00FF27  20                 	db	32
   397  00FF28  20                 	db	32
   398  00FF29  20                 	db	32
   399  00FF2A  20                 	db	32
   400  00FF2B  20                 	db	32
   401  00FF2C  20                 	db	32
   402  00FF2D  20                 	db	32
   403  00FF2E  20                 	db	32
   404  00FF2F  20                 	db	32
   405  00FF30  20                 	db	32
   406  00FF31  00                 	db	0
   407  00FF32                     STR_15:
   408  00FF32  23                 	db	35
   409  00FF33  20                 	db	32
   410  00FF34  4F                 	db	79	;'O'
   411  00FF35  46                 	db	70	;'F'
   412  00FF36  20                 	db	32
   413  00FF37  41                 	db	65	;'A'
   414  00FF38  41                 	db	65	;'A'
   415  00FF39  20                 	db	32
   416  00FF3A  20                 	db	32
   417  00FF3B  20                 	db	32
   418  00FF3C  20                 	db	32
   419  00FF3D  20                 	db	32
   420  00FF3E  20                 	db	32
   421  00FF3F  20                 	db	32
   422  00FF40  20                 	db	32
   423  00FF41  20                 	db	32
   424  00FF42  00                 	db	0
   425  00FF43                     STR_13:
   426  00FF43  23                 	db	35
   427  00FF44  20                 	db	32
   428  00FF45  4F                 	db	79	;'O'
   429  00FF46  46                 	db	70	;'F'
   430  00FF47  20                 	db	32
   431  00FF48  39                 	db	57	;'9'
   432  00FF49  56                 	db	86	;'V'
   433  00FF4A  20                 	db	32
   434  00FF4B  20                 	db	32
   435  00FF4C  20                 	db	32
   436  00FF4D  20                 	db	32
   437  00FF4E  20                 	db	32
   438  00FF4F  20                 	db	32
   439  00FF50  20                 	db	32
   440  00FF51  20                 	db	32
   441  00FF52  20                 	db	32
   442  00FF53  00                 	db	0
   443  00FF54                     STR_9:
   444  00FF54  54                 	db	84	;'T'
   445  00FF55  4F                 	db	79	;'O'
   446  00FF56  54                 	db	84	;'T'
   447  00FF57  41                 	db	65	;'A'
   448  00FF58  4C                 	db	76	;'L'
   449  00FF59  20                 	db	32
   450  00FF5A  23                 	db	35
   451  00FF5B  20                 	db	32
   452  00FF5C  4F                 	db	79	;'O'
   453  00FF5D  46                 	db	70	;'F'
   454  00FF5E  20                 	db	32
   455  00FF5F  20                 	db	32
   456  00FF60  20                 	db	32
   457  00FF61  20                 	db	32
   458  00FF62  20                 	db	32
   459  00FF63  20                 	db	32
   460  00FF64  00                 	db	0
   461  00FF65                     STR_6:
   462  00FF65  54                 	db	84	;'T'
   463  00FF66  4F                 	db	79	;'O'
   464  00FF67  20                 	db	32
   465  00FF68  43                 	db	67	;'C'
   466  00FF69  4F                 	db	79	;'O'
   467  00FF6A  4E                 	db	78	;'N'
   468  00FF6B  54                 	db	84	;'T'
   469  00FF6C  49                 	db	73	;'I'
   470  00FF6D  4E                 	db	78	;'N'
   471  00FF6E  55                 	db	85	;'U'
   472  00FF6F  45                 	db	69	;'E'
   473  00FF70  20                 	db	32
   474  00FF71  20                 	db	32
   475  00FF72  20                 	db	32
   476  00FF73  20                 	db	32
   477  00FF74  20                 	db	32
   478  00FF75  00                 	db	0
   479  00FF76                     STR_17:
   480  00FF76  23                 	db	35
   481  00FF77  20                 	db	32
   482  00FF78  4F                 	db	79	;'O'
   483  00FF79  46                 	db	70	;'F'
   484  00FF7A  20                 	db	32
   485  00FF7B  44                 	db	68	;'D'
   486  00FF7C  52                 	db	82	;'R'
   487  00FF7D  41                 	db	65	;'A'
   488  00FF7E  49                 	db	73	;'I'
   489  00FF7F  4E                 	db	78	;'N'
   490  00FF80  45                 	db	69	;'E'
   491  00FF81  44                 	db	68	;'D'
   492  00FF82  20                 	db	32
   493  00FF83  20                 	db	32
   494  00FF84  20                 	db	32
   495  00FF85  20                 	db	32
   496  00FF86  00                 	db	0
   497  00FF87                     STR_5:
   498  00FF87  44                 	db	68	;'D'
   499  00FF88  4F                 	db	79	;'O'
   500  00FF89  4E                 	db	78	;'N'
   501  00FF8A  45                 	db	69	;'E'
   502  00FF8B  21                 	db	33
   503  00FF8C  20                 	db	32
   504  00FF8D  50                 	db	80	;'P'
   505  00FF8E  52                 	db	82	;'R'
   506  00FF8F  45                 	db	69	;'E'
   507  00FF90  53                 	db	83	;'S'
   508  00FF91  53                 	db	83	;'S'
   509  00FF92  20                 	db	32
   510  00FF93  2A                 	db	42
   511  00FF94  20                 	db	32
   512  00FF95  20                 	db	32
   513  00FF96  20                 	db	32
   514  00FF97  00                 	db	0
   515  00FF98                     STR_23:
   516  00FF98  52                 	db	82	;'R'
   517  00FF99  55                 	db	85	;'U'
   518  00FF9A  4E                 	db	78	;'N'
   519  00FF9B  4E                 	db	78	;'N'
   520  00FF9C  49                 	db	73	;'I'
   521  00FF9D  4E                 	db	78	;'N'
   522  00FF9E  47                 	db	71	;'G'
   523  00FF9F  3A                 	db	58	;':'
   524  00FFA0  20                 	db	32
   525  00FFA1  30                 	db	48	;'0'
   526  00FFA2  30                 	db	48	;'0'
   527  00FFA3  3A                 	db	58	;':'
   528  00FFA4  30                 	db	48	;'0'
   529  00FFA5  30                 	db	48	;'0'
   530  00FFA6  20                 	db	32
   531  00FFA7  20                 	db	32
   532  00FFA8  00                 	db	0
   533  00FFA9                     STR_21:
   534  00FFA9  45                 	db	69	;'E'
   535  00FFAA  4D                 	db	77	;'M'
   536  00FFAB  45                 	db	69	;'E'
   537  00FFAC  52                 	db	82	;'R'
   538  00FFAD  47                 	db	71	;'G'
   539  00FFAE  45                 	db	69	;'E'
   540  00FFAF  4E                 	db	78	;'N'
   541  00FFB0  43                 	db	67	;'C'
   542  00FFB1  59                 	db	89	;'Y'
   543  00FFB2  20                 	db	32
   544  00FFB3  53                 	db	83	;'S'
   545  00FFB4  54                 	db	84	;'T'
   546  00FFB5  4F                 	db	79	;'O'
   547  00FFB6  50                 	db	80	;'P'
   548  00FFB7  20                 	db	32
   549  00FFB8  20                 	db	32
   550  00FFB9  00                 	db	0
   551  00FFBA                     STR_7:
   552  00FFBA  54                 	db	84	;'T'
   553  00FFBB  4F                 	db	79	;'O'
   554  00FFBC  54                 	db	84	;'T'
   555  00FFBD  41                 	db	65	;'A'
   556  00FFBE  4C                 	db	76	;'L'
   557  00FFBF  20                 	db	32
   558  00FFC0  52                 	db	82	;'R'
   559  00FFC1  55                 	db	85	;'U'
   560  00FFC2  4E                 	db	78	;'N'
   561  00FFC3  20                 	db	32
   562  00FFC4  54                 	db	84	;'T'
   563  00FFC5  49                 	db	73	;'I'
   564  00FFC6  4D                 	db	77	;'M'
   565  00FFC7  45                 	db	69	;'E'
   566  00FFC8  3A                 	db	58	;':'
   567  00FFC9  20                 	db	32
   568  00FFCA  00                 	db	0
   569  00FFCB                     STR_3:
   570  00FFCB  20                 	db	32
   571  00FFCC  3C                 	db	60	;'<'
   572  00FFCD  34                 	db	52	;'4'
   573  00FFCE  20                 	db	32
   574  00FFCF  20                 	db	32
   575  00FFD0  20                 	db	32
   576  00FFD1  44                 	db	68	;'D'
   577  00FFD2  41                 	db	65	;'A'
   578  00FFD3  54                 	db	84	;'T'
   579  00FFD4  41                 	db	65	;'A'
   580  00FFD5  20                 	db	32
   581  00FFD6  20                 	db	32
   582  00FFD7  20                 	db	32
   583  00FFD8  36                 	db	54	;'6'
   584  00FFD9  3E                 	db	62	;'>'
   585  00FFDA  20                 	db	32
   586  00FFDB  00                 	db	0
   587  00FFDC                     STR_1:
   588  00FFDC  53                 	db	83	;'S'
   589  00FFDD  54                 	db	84	;'T'
   590  00FFDE  41                 	db	65	;'A'
   591  00FFDF  52                 	db	82	;'R'
   592  00FFE0  54                 	db	84	;'T'
   593  00FFE1  3A                 	db	58	;':'
   594  00FFE2  20                 	db	32
   595  00FFE3  20                 	db	32
   596  00FFE4  20                 	db	32
   597  00FFE5  50                 	db	80	;'P'
   598  00FFE6  52                 	db	82	;'R'
   599  00FFE7  45                 	db	69	;'E'
   600  00FFE8  53                 	db	83	;'S'
   601  00FFE9  53                 	db	83	;'S'
   602  00FFEA  20                 	db	32
   603  00FFEB  2A                 	db	42
   604  00FFEC  00                 	db	0
   605  00FFED                     STR_2:
   606  00FFED  3C                 	db	60	;'<'
   607  00FFEE  20                 	db	32
   608  00FFEF  34                 	db	52	;'4'
   609  00FFF0  20                 	db	32
   610  00FFF1  20                 	db	32
   611  00FFF2  20                 	db	32
   612  00FFF3  44                 	db	68	;'D'
   613  00FFF4  41                 	db	65	;'A'
   614  00FFF5  54                 	db	84	;'T'
   615  00FFF6  41                 	db	65	;'A'
   616  00FFF7  20                 	db	32
   617  00FFF8  20                 	db	32
   618  00FFF9  20                 	db	32
   619  00FFFA  36                 	db	54	;'6'
   620  00FFFB  20                 	db	32
   621  00FFFC  3E                 	db	62	;'>'
   622  00FFFD  00                 	db	0
   623  0000                     
   624                           ; #config settings
   625  00FFFE  00                 	db	0	; dummy byte at the end
   626  0000                     
   627                           	psect	cinit
   628  0019B2                     __pcinit:
   629                           	opt stack 0
   630  0019B2                     start_initialization:
   631                           	opt stack 0
   632  0019B2                     __initialization:
   633                           	opt stack 0
   634                           
   635                           ; Initialize objects allocated to BANK0 (1 bytes)
   636                           ; load TBLPTR registers with __pidataBANK0
   637  0019B2  0EE1               	movlw	low __pidataBANK0
   638  0019B4  6EF6               	movwf	tblptrl,c
   639  0019B6  0E1B               	movlw	high __pidataBANK0
   640  0019B8  6EF7               	movwf	tblptrh,c
   641  0019BA  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   642  0019BC  6EF8               	movwf	tblptru,c
   643  0019BE  0009               	tblrd		*+	;fetch initializer
   644  0019C0  CFF5 F0BB          	movff	tablat,__pdataBANK0
   645                           
   646                           ; Initialize objects allocated to COMRAM (1 bytes)
   647                           ; load TBLPTR registers with __pidataCOMRAM
   648  0019C4  0EE0               	movlw	low __pidataCOMRAM
   649  0019C6  6EF6               	movwf	tblptrl,c
   650  0019C8  0E1B               	movlw	high __pidataCOMRAM
   651  0019CA  6EF7               	movwf	tblptrh,c
   652  0019CC  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   653  0019CE  6EF8               	movwf	tblptru,c
   654  0019D0  0009               	tblrd		*+	;fetch initializer
   655  0019D2  CFF5 F049          	movff	tablat,__pdataCOMRAM
   656                           
   657                           ; Clear objects allocated to BANK0 (34 bytes)
   658  0019D6  EE00  F080         	lfsr	0,__pbssBANK0
   659  0019DA  0E22               	movlw	34
   660  0019DC                     clear_0:
   661  0019DC  6AEE               	clrf	postinc0,c
   662  0019DE  06E8               	decf	wreg,f,c
   663  0019E0  E1FD               	bnz	clear_0
   664                           
   665                           ; Clear objects allocated to COMRAM (4 bytes)
   666  0019E2  6A48               	clrf	(__pbssCOMRAM+3)& (0+255),c
   667  0019E4  6A47               	clrf	(__pbssCOMRAM+2)& (0+255),c
   668  0019E6  6A46               	clrf	(__pbssCOMRAM+1)& (0+255),c
   669  0019E8  6A45               	clrf	__pbssCOMRAM& (0+255),c
   670  0019EA                     end_of_initialization:
   671                           	opt stack 0
   672  0019EA                     __end_of__initialization:
   673                           	opt stack 0
   674  0019EA  904A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   675  0019EC  924A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   676  0019EE  0E00               	movlw	low (__Lmediumconst shr (0+16))
   677  0019F0  6EF8               	movwf	tblptru,c
   678  0019F2  0100               	movlb	0
   679  0019F4  EF09  F000         	goto	_main	;jump to C main() function
   680                           tblptru	equ	0xFF8
   681                           tblptrh	equ	0xFF7
   682                           tblptrl	equ	0xFF6
   683                           tablat	equ	0xFF5
   684                           postinc0	equ	0xFEE
   685                           wreg	equ	0xFE8
   686                           
   687                           	psect	bssCOMRAM
   688  000045                     __pbssCOMRAM:
   689                           	opt stack 0
   690  000045                     _doneTimer:
   691                           	opt stack 0
   692  000045                     	ds	1
   693  000046                     _opTimer:
   694                           	opt stack 0
   695  000046                     	ds	1
   696  000047                     _step1:
   697                           	opt stack 0
   698  000047                     	ds	1
   699  000048                     _step2:
   700                           	opt stack 0
   701  000048                     	ds	1
   702                           tblptru	equ	0xFF8
   703                           tblptrh	equ	0xFF7
   704                           tblptrl	equ	0xFF6
   705                           tablat	equ	0xFF5
   706                           postinc0	equ	0xFEE
   707                           wreg	equ	0xFE8
   708                           
   709                           	psect	dataCOMRAM
   710  000049                     __pdataCOMRAM:
   711                           	opt stack 0
   712  000049                     _solOnTimer:
   713                           	opt stack 0
   714  000049                     	ds	1
   715                           tblptru	equ	0xFF8
   716                           tblptrh	equ	0xFF7
   717                           tblptrl	equ	0xFF6
   718                           tablat	equ	0xFF5
   719                           postinc0	equ	0xFEE
   720                           wreg	equ	0xFE8
   721                           
   722                           	psect	bssBANK0
   723  000080                     __pbssBANK0:
   724                           	opt stack 0
   725  000080                     _time:
   726                           	opt stack 0
   727  000080                     	ds	7
   728  000087                     _plat1Left:
   729                           	opt stack 0
   730  000087                     	ds	2
   731  000089                     _plat1Right:
   732                           	opt stack 0
   733  000089                     	ds	2
   734  00008B                     _plat2Left:
   735                           	opt stack 0
   736  00008B                     	ds	2
   737  00008D                     _plat2Right:
   738                           	opt stack 0
   739  00008D                     	ds	2
   740  00008F                     _stepGear:
   741                           	opt stack 0
   742  00008F                     	ds	2
   743  000091                     _count9V:
   744                           	opt stack 0
   745  000091                     	ds	1
   746  000092                     _countAA:
   747                           	opt stack 0
   748  000092                     	ds	1
   749  000093                     _countC:
   750                           	opt stack 0
   751  000093                     	ds	1
   752  000094                     _countDrain:
   753                           	opt stack 0
   754  000094                     	ds	1
   755  000095                     _doneSorting:
   756                           	opt stack 0
   757  000095                     	ds	1
   758  000096                     _min:
   759                           	opt stack 0
   760  000096                     	ds	1
   761  000097                     _num9V:
   762                           	opt stack 0
   763  000097                     	ds	1
   764  000098                     _numAA:
   765                           	opt stack 0
   766  000098                     	ds	1
   767  000099                     _numBats:
   768                           	opt stack 0
   769  000099                     	ds	1
   770  00009A                     _numC:
   771                           	opt stack 0
   772  00009A                     	ds	1
   773  00009B                     _numDrain:
   774                           	opt stack 0
   775  00009B                     	ds	1
   776  00009C                     _sec:
   777                           	opt stack 0
   778  00009C                     	ds	1
   779  00009D                     _turn1BackLeft:
   780                           	opt stack 0
   781  00009D                     	ds	1
   782  00009E                     _turn1BackRight:
   783                           	opt stack 0
   784  00009E                     	ds	1
   785  00009F                     _turn2BackLeft:
   786                           	opt stack 0
   787  00009F                     	ds	1
   788  0000A0                     _turn2BackRight:
   789                           	opt stack 0
   790  0000A0                     	ds	1
   791  0000A1                     _waitMotor:
   792                           	opt stack 0
   793  0000A1                     	ds	1
   794                           tblptru	equ	0xFF8
   795                           tblptrh	equ	0xFF7
   796                           tblptrl	equ	0xFF6
   797                           tablat	equ	0xFF5
   798                           postinc0	equ	0xFEE
   799                           wreg	equ	0xFE8
   800                           
   801                           	psect	dataBANK0
   802  0000BB                     __pdataBANK0:
   803                           	opt stack 0
   804  0000BB                     _screenMode:
   805                           	opt stack 0
   806  0000BB                     	ds	1
   807                           tblptru	equ	0xFF8
   808                           tblptrh	equ	0xFF7
   809                           tblptrl	equ	0xFF6
   810                           tablat	equ	0xFF5
   811                           postinc0	equ	0xFEE
   812                           wreg	equ	0xFE8
   813                           
   814                           	psect	cstackBANK0
   815  0000A2                     __pcstackBANK0:
   816                           	opt stack 0
   817  0000A2                     ??_I2C_Master_Init:
   818  0000A2                     ?_printf:
   819                           	opt stack 0
   820  0000A2                     printf@f:
   821                           	opt stack 0
   822                           
   823                           ; 2 bytes @ 0x0
   824  0000A2                     	ds	8
   825  0000AA                     printf@idx:
   826                           	opt stack 0
   827                           
   828                           ; 1 bytes @ 0x8
   829  0000AA                     	ds	1
   830  0000AB                     printf@ap:
   831                           	opt stack 0
   832                           
   833                           ; 2 bytes @ 0x9
   834  0000AB                     	ds	2
   835  0000AD                     printf@prec:
   836                           	opt stack 0
   837                           
   838                           ; 1 bytes @ 0xB
   839  0000AD                     	ds	1
   840  0000AE                     printf@val:
   841                           	opt stack 0
   842                           
   843                           ; 2 bytes @ 0xC
   844  0000AE                     	ds	2
   845  0000B0                     printf@flag:
   846                           	opt stack 0
   847                           
   848                           ; 1 bytes @ 0xE
   849  0000B0                     	ds	1
   850  0000B1                     printf@width:
   851                           	opt stack 0
   852                           
   853                           ; 2 bytes @ 0xF
   854  0000B1                     	ds	2
   855  0000B3                     printf@c:
   856                           	opt stack 0
   857                           
   858                           ; 1 bytes @ 0x11
   859  0000B3                     	ds	1
   860  0000B4                     ??_main:
   861                           
   862                           ; 1 bytes @ 0x12
   863  0000B4                     	ds	4
   864  0000B8                     main@i:
   865                           	opt stack 0
   866                           
   867                           ; 1 bytes @ 0x16
   868  0000B8                     	ds	1
   869  0000B9                     main@i_579:
   870                           	opt stack 0
   871                           
   872                           ; 1 bytes @ 0x17
   873  0000B9                     	ds	1
   874  0000BA                     main@i_632:
   875                           	opt stack 0
   876                           
   877                           ; 1 bytes @ 0x18
   878  0000BA                     	ds	1
   879                           tblptru	equ	0xFF8
   880                           tblptrh	equ	0xFF7
   881                           tblptrl	equ	0xFF6
   882                           tablat	equ	0xFF5
   883                           postinc0	equ	0xFEE
   884                           wreg	equ	0xFE8
   885                           
   886                           	psect	cstackCOMRAM
   887  000001                     __pcstackCOMRAM:
   888                           	opt stack 0
   889  000001                     ??i2_isdigit:
   890  000001                     ?i2___wmul:
   891                           	opt stack 0
   892  000001                     ?i2___awdiv:
   893                           	opt stack 0
   894  000001                     ?i2___awmod:
   895                           	opt stack 0
   896  000001                     ?i2___lwdiv:
   897                           	opt stack 0
   898  000001                     i2lcdNibble@temp:
   899                           	opt stack 0
   900  000001                     i2___wmul@multiplier:
   901                           	opt stack 0
   902  000001                     i2___awdiv@dividend:
   903                           	opt stack 0
   904  000001                     i2___awmod@dividend:
   905                           	opt stack 0
   906  000001                     i2___lwdiv@dividend:
   907                           	opt stack 0
   908                           
   909                           ; 2 bytes @ 0x0
   910  000001                     	ds	1
   911  000002                     i2lcdNibble@data:
   912                           	opt stack 0
   913  000002                     i2_isdigit$931:
   914                           	opt stack 0
   915                           
   916                           ; 1 bytes @ 0x1
   917  000002                     	ds	1
   918  000003                     i2lcdInst@data:
   919                           	opt stack 0
   920  000003                     i2putch@data:
   921                           	opt stack 0
   922  000003                     i2isdigit@c:
   923                           	opt stack 0
   924  000003                     i2___wmul@multiplicand:
   925                           	opt stack 0
   926  000003                     i2___awdiv@divisor:
   927                           	opt stack 0
   928  000003                     i2___awmod@divisor:
   929                           	opt stack 0
   930  000003                     i2___lwdiv@divisor:
   931                           	opt stack 0
   932                           
   933                           ; 2 bytes @ 0x2
   934  000003                     	ds	2
   935  000005                     i2___awdiv@counter:
   936                           	opt stack 0
   937  000005                     i2___awmod@counter:
   938                           	opt stack 0
   939  000005                     i2___wmul@product:
   940                           	opt stack 0
   941  000005                     i2___lwdiv@quotient:
   942                           	opt stack 0
   943                           
   944                           ; 2 bytes @ 0x4
   945  000005                     	ds	1
   946  000006                     i2___awdiv@sign:
   947                           	opt stack 0
   948  000006                     i2___awmod@sign:
   949                           	opt stack 0
   950                           
   951                           ; 1 bytes @ 0x5
   952  000006                     	ds	1
   953  000007                     i2___lwdiv@counter:
   954                           	opt stack 0
   955  000007                     i2___awdiv@quotient:
   956                           	opt stack 0
   957                           
   958                           ; 2 bytes @ 0x6
   959  000007                     	ds	1
   960  000008                     ?i2___lwmod:
   961                           	opt stack 0
   962  000008                     i2___lwmod@dividend:
   963                           	opt stack 0
   964                           
   965                           ; 2 bytes @ 0x7
   966  000008                     	ds	1
   967  000009                     
   968                           ; 1 bytes @ 0x8
   969  000009                     	ds	1
   970  00000A                     i2___lwmod@divisor:
   971                           	opt stack 0
   972                           
   973                           ; 2 bytes @ 0x9
   974  00000A                     	ds	2
   975  00000C                     i2___lwmod@counter:
   976                           	opt stack 0
   977                           
   978                           ; 1 bytes @ 0xB
   979  00000C                     	ds	1
   980  00000D                     ?i2_printf:
   981                           	opt stack 0
   982  00000D                     i2printf@f:
   983                           	opt stack 0
   984                           
   985                           ; 2 bytes @ 0xC
   986  00000D                     	ds	6
   987  000013                     ??i2_printf:
   988                           
   989                           ; 1 bytes @ 0x12
   990  000013                     	ds	4
   991  000017                     i2printf@idx:
   992                           	opt stack 0
   993                           
   994                           ; 1 bytes @ 0x16
   995  000017                     	ds	1
   996  000018                     i2printf@ap:
   997                           	opt stack 0
   998                           
   999                           ; 2 bytes @ 0x17
  1000  000018                     	ds	2
  1001  00001A                     i2printf@prec:
  1002                           	opt stack 0
  1003                           
  1004                           ; 1 bytes @ 0x19
  1005  00001A                     	ds	1
  1006  00001B                     i2printf@val:
  1007                           	opt stack 0
  1008                           
  1009                           ; 2 bytes @ 0x1A
  1010  00001B                     	ds	2
  1011  00001D                     i2printf@flag:
  1012                           	opt stack 0
  1013                           
  1014                           ; 1 bytes @ 0x1C
  1015  00001D                     	ds	1
  1016  00001E                     i2printf@width:
  1017                           	opt stack 0
  1018                           
  1019                           ; 2 bytes @ 0x1D
  1020  00001E                     	ds	2
  1021  000020                     i2printf@c:
  1022                           	opt stack 0
  1023                           
  1024                           ; 1 bytes @ 0x1F
  1025  000020                     	ds	1
  1026  000021                     switchMenu@right:
  1027                           	opt stack 0
  1028                           
  1029                           ; 1 bytes @ 0x20
  1030  000021                     	ds	1
  1031  000022                     switchMenu@key:
  1032                           	opt stack 0
  1033                           
  1034                           ; 1 bytes @ 0x21
  1035  000022                     	ds	1
  1036  000023                     switchMenu@left:
  1037                           	opt stack 0
  1038                           
  1039                           ; 1 bytes @ 0x22
  1040  000023                     	ds	1
  1041  000024                     ??_ISR:
  1042                           
  1043                           ; 1 bytes @ 0x23
  1044  000024                     	ds	15
  1045  000033                     ISR@keypress:
  1046                           	opt stack 0
  1047                           
  1048                           ; 1 bytes @ 0x32
  1049  000033                     	ds	1
  1050  000034                     ??_testBatteries:
  1051  000034                     ??_isdigit:
  1052  000034                     ??_I2C_Master_Wait:
  1053  000034                     ?___wmul:
  1054                           	opt stack 0
  1055  000034                     ?___awdiv:
  1056                           	opt stack 0
  1057  000034                     ?___awmod:
  1058                           	opt stack 0
  1059  000034                     ?___lwdiv:
  1060                           	opt stack 0
  1061  000034                     ?___lldiv:
  1062                           	opt stack 0
  1063  000034                     lcdNibble@temp:
  1064                           	opt stack 0
  1065  000034                     readADC@channel:
  1066                           	opt stack 0
  1067  000034                     ___wmul@multiplier:
  1068                           	opt stack 0
  1069  000034                     ___awdiv@dividend:
  1070                           	opt stack 0
  1071  000034                     ___awmod@dividend:
  1072                           	opt stack 0
  1073  000034                     ___lwdiv@dividend:
  1074                           	opt stack 0
  1075  000034                     ___lldiv@dividend:
  1076                           	opt stack 0
  1077                           
  1078                           ; 4 bytes @ 0x33
  1079  000034                     	ds	1
  1080  000035                     I2C_Master_Read@a:
  1081                           	opt stack 0
  1082  000035                     lcdNibble@data:
  1083                           	opt stack 0
  1084  000035                     _isdigit$931:
  1085                           	opt stack 0
  1086  000035                     I2C_Master_Write@d:
  1087                           	opt stack 0
  1088                           
  1089                           ; 2 bytes @ 0x34
  1090  000035                     	ds	1
  1091  000036                     I2C_Master_Read@temp:
  1092                           	opt stack 0
  1093  000036                     lcdInst@data:
  1094                           	opt stack 0
  1095  000036                     putch@data:
  1096                           	opt stack 0
  1097  000036                     isdigit@c:
  1098                           	opt stack 0
  1099  000036                     ___wmul@multiplicand:
  1100                           	opt stack 0
  1101  000036                     ___awdiv@divisor:
  1102                           	opt stack 0
  1103  000036                     ___awmod@divisor:
  1104                           	opt stack 0
  1105  000036                     ___lwdiv@divisor:
  1106                           	opt stack 0
  1107                           
  1108                           ; 2 bytes @ 0x35
  1109  000036                     	ds	1
  1110  000037                     ??_initLCD:
  1111                           
  1112                           ; 1 bytes @ 0x36
  1113  000037                     	ds	1
  1114  000038                     ___awdiv@counter:
  1115                           	opt stack 0
  1116  000038                     ___awmod@counter:
  1117                           	opt stack 0
  1118  000038                     ___wmul@product:
  1119                           	opt stack 0
  1120  000038                     ___lwdiv@quotient:
  1121                           	opt stack 0
  1122  000038                     ___lldiv@divisor:
  1123                           	opt stack 0
  1124                           
  1125                           ; 4 bytes @ 0x37
  1126  000038                     	ds	1
  1127  000039                     ___awdiv@sign:
  1128                           	opt stack 0
  1129  000039                     ___awmod@sign:
  1130                           	opt stack 0
  1131                           
  1132                           ; 1 bytes @ 0x38
  1133  000039                     	ds	1
  1134  00003A                     ___lwdiv@counter:
  1135                           	opt stack 0
  1136  00003A                     ___awdiv@quotient:
  1137                           	opt stack 0
  1138                           
  1139                           ; 2 bytes @ 0x39
  1140  00003A                     	ds	1
  1141  00003B                     ?___lwmod:
  1142                           	opt stack 0
  1143  00003B                     ___lwmod@dividend:
  1144                           	opt stack 0
  1145                           
  1146                           ; 2 bytes @ 0x3A
  1147  00003B                     	ds	1
  1148  00003C                     ___lldiv@quotient:
  1149                           	opt stack 0
  1150                           
  1151                           ; 4 bytes @ 0x3B
  1152  00003C                     	ds	1
  1153  00003D                     ___lwmod@divisor:
  1154                           	opt stack 0
  1155                           
  1156                           ; 2 bytes @ 0x3C
  1157  00003D                     	ds	2
  1158  00003F                     ___lwmod@counter:
  1159                           	opt stack 0
  1160                           
  1161                           ; 1 bytes @ 0x3E
  1162  00003F                     	ds	1
  1163  000040                     ??_printf:
  1164  000040                     ___lldiv@counter:
  1165                           	opt stack 0
  1166                           
  1167                           ; 1 bytes @ 0x3F
  1168  000040                     	ds	1
  1169  000041                     I2C_Master_Init@c:
  1170                           	opt stack 0
  1171                           
  1172                           ; 4 bytes @ 0x40
  1173  000041                     	ds	4
  1174                           tblptru	equ	0xFF8
  1175                           tblptrh	equ	0xFF7
  1176                           tblptrl	equ	0xFF6
  1177                           tablat	equ	0xFF5
  1178                           postinc0	equ	0xFEE
  1179                           wreg	equ	0xFE8
  1180                           
  1181 ;;
  1182 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  1183 ;;
  1184 ;; *************** function _main *****************
  1185 ;; Defined at:
  1186 ;;		line 48 in file "../main.c"
  1187 ;; Parameters:    Size  Location     Type
  1188 ;;		None
  1189 ;; Auto vars:     Size  Location     Type
  1190 ;;  i               1   24[BANK0 ] unsigned char 
  1191 ;;  i               1   23[BANK0 ] unsigned char 
  1192 ;;  i               1   22[BANK0 ] unsigned char 
  1193 ;; Return value:  Size  Location     Type
  1194 ;;                  1    wreg      void 
  1195 ;; Registers used:
  1196 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1197 ;; Tracked objects:
  1198 ;;		On entry : 0/0
  1199 ;;		On exit  : 0/0
  1200 ;;		Unchanged: 0/0
  1201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1202 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1203 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1204 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1205 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1206 ;;Total ram usage:        7 bytes
  1207 ;; Hardware stack levels required when called:    8
  1208 ;; This function calls:
  1209 ;;		_I2C_Master_Init
  1210 ;;		_I2C_Master_Read
  1211 ;;		_I2C_Master_Start
  1212 ;;		_I2C_Master_Stop
  1213 ;;		_I2C_Master_Write
  1214 ;;		_initLCD
  1215 ;;		_lcdInst
  1216 ;;		_printf
  1217 ;;		_readADC
  1218 ;;		_stopOperation
  1219 ;;		_testBatteries
  1220 ;; This function is called by:
  1221 ;;		Startup code after reset
  1222 ;; This function uses a non-reentrant model
  1223 ;;
  1224                           
  1225                           	psect	text0
  1226  000012                     __ptext0:
  1227                           	opt stack 0
  1228  000012                     _main:
  1229                           	opt stack 23
  1230                           
  1231                           ;main.c: 50: TRISA = 0b00000111;
  1232                           
  1233                           ;incstack = 0
  1234  000012  0E07               	movlw	7
  1235  000014  6E92               	movwf	3986,c	;volatile
  1236                           
  1237                           ;main.c: 51: TRISB = 0b11110010;
  1238  000016  0EF2               	movlw	242
  1239  000018  6E93               	movwf	3987,c	;volatile
  1240                           
  1241                           ;main.c: 52: TRISC = 0x00;
  1242  00001A  0E00               	movlw	0
  1243  00001C  6E94               	movwf	3988,c	;volatile
  1244                           
  1245                           ;main.c: 53: TRISD = 0x00;
  1246  00001E  0E00               	movlw	0
  1247  000020  6E95               	movwf	3989,c	;volatile
  1248                           
  1249                           ;main.c: 54: TRISE = 0x00;
  1250  000022  0E00               	movlw	0
  1251  000024  6E96               	movwf	3990,c	;volatile
  1252                           
  1253                           ;main.c: 56: LATA = 0x00;
  1254  000026  0E00               	movlw	0
  1255  000028  6E89               	movwf	3977,c	;volatile
  1256                           
  1257                           ;main.c: 57: LATB = 0x00;
  1258  00002A  0E00               	movlw	0
  1259  00002C  6E8A               	movwf	3978,c	;volatile
  1260                           
  1261                           ;main.c: 58: LATC = 0x00;
  1262  00002E  0E00               	movlw	0
  1263  000030  6E8B               	movwf	3979,c	;volatile
  1264                           
  1265                           ;main.c: 59: LATD = 0x00;
  1266  000032  0E00               	movlw	0
  1267  000034  6E8C               	movwf	3980,c	;volatile
  1268                           
  1269                           ;main.c: 60: LATE = 0x00;
  1270  000036  0E00               	movlw	0
  1271  000038  6E8D               	movwf	3981,c	;volatile
  1272                           
  1273                           ;main.c: 62: ADCON0 = 0x00;
  1274  00003A  0E00               	movlw	0
  1275  00003C  6EC2               	movwf	4034,c	;volatile
  1276                           
  1277                           ;main.c: 63: ADCON1 = 0x0D;
  1278  00003E  0E0D               	movlw	13
  1279  000040  6EC1               	movwf	4033,c	;volatile
  1280                           
  1281                           ;main.c: 64: ADCON2 = 0b10110001;
  1282  000042  0EB1               	movlw	177
  1283  000044  6EC0               	movwf	4032,c	;volatile
  1284                           
  1285                           ;main.c: 69: GIE = 1;
  1286  000046  8EF2               	bsf	intcon,7,c	;volatile
  1287                           
  1288                           ;main.c: 70: PEIE = 1;
  1289  000048  8CF2               	bsf	intcon,6,c	;volatile
  1290                           
  1291                           ;main.c: 71: INT1IE = 1;
  1292  00004A  86F0               	bsf	intcon3,3,c	;volatile
  1293                           
  1294                           ;main.c: 72: INT1IF = 0;
  1295  00004C  90F0               	bcf	intcon3,0,c	;volatile
  1296                           
  1297                           ;main.c: 73: TMR0IE = 1;
  1298  00004E  8AF2               	bsf	intcon,5,c	;volatile
  1299                           
  1300                           ;main.c: 74: TMR0IF = 0;
  1301  000050  94F2               	bcf	intcon,2,c	;volatile
  1302                           
  1303                           ;main.c: 75: TMR1IE = 1;
  1304  000052  809D               	bsf	3997,0,c	;volatile
  1305                           
  1306                           ;main.c: 76: TMR1IF = 0;
  1307  000054  909E               	bcf	3998,0,c	;volatile
  1308                           
  1309                           ;main.c: 80: T0CON = 0b00000111;
  1310  000056  0E07               	movlw	7
  1311  000058  6ED5               	movwf	4053,c	;volatile
  1312                           
  1313                           ;main.c: 88: TMR0 = 55770;
  1314  00005A  0ED9               	movlw	217
  1315  00005C  6ED7               	movwf	4055,c	;volatile
  1316  00005E  0EDA               	movlw	218
  1317  000060  6ED6               	movwf	4054,c	;volatile
  1318                           
  1319                           ;main.c: 97: T1CON = 0b10000000;
  1320  000062  0E80               	movlw	128
  1321  000064  6ECD               	movwf	4045,c	;volatile
  1322                           
  1323                           ;main.c: 106: TMR1 = 58035;
  1324  000066  0EE2               	movlw	226
  1325  000068  6ECF               	movwf	4047,c	;volatile
  1326  00006A  0EB3               	movlw	179
  1327  00006C  6ECE               	movwf	4046,c	;volatile
  1328                           
  1329                           ;main.c: 115: initLCD();
  1330  00006E  ECFC  F00C         	call	_initLCD	;wreg free
  1331                           
  1332                           ;main.c: 117: I2C_Master_Init(10000);
  1333  000072  0E10               	movlw	16
  1334  000074  6E41               	movwf	I2C_Master_Init@c,c
  1335  000076  0E27               	movlw	39
  1336  000078  6E42               	movwf	I2C_Master_Init@c+1,c
  1337  00007A  0E00               	movlw	0
  1338  00007C  6E43               	movwf	I2C_Master_Init@c+2,c
  1339  00007E  0E00               	movlw	0
  1340  000080  6E44               	movwf	I2C_Master_Init@c+3,c
  1341  000082  EC0B  F00C         	call	_I2C_Master_Init	;wreg free
  1342                           
  1343                           ;main.c: 118: (INTCONbits.GIE = 1);
  1344  000086  8EF2               	bsf	intcon,7,c	;volatile
  1345                           
  1346                           ;main.c: 122: while (screenMode == 2){
  1347                           
  1348                           ;main.c: 121: while (1) {
  1349  000088  D056               	goto	l4033
  1350  00008A                     l3995:
  1351                           
  1352                           ;main.c: 123: lcdInst(0b10000000);;
  1353  00008A  0E80               	movlw	128
  1354  00008C  ECD1  F00D         	call	_lcdInst
  1355                           
  1356                           ;main.c: 124: printf("START:   PRESS *");
  1357  000090  0EDC               	movlw	low STR_1
  1358  000092  0100               	movlb	0	; () banked
  1359  000094  6FA2               	movwf	printf@f& (0+255),b
  1360  000096  0EFF               	movlw	high STR_1
  1361  000098  0100               	movlb	0	; () banked
  1362  00009A  6FA3               	movwf	(printf@f+1)& (0+255),b
  1363  00009C  EC7F  F003         	call	_printf	;wreg free
  1364                           
  1365                           ;main.c: 125: lcdInst(0b11000000);;
  1366  0000A0  0EC0               	movlw	192
  1367  0000A2  ECD1  F00D         	call	_lcdInst
  1368                           
  1369                           ;main.c: 126: printf("< 4   DATA   6 >");
  1370  0000A6  0EED               	movlw	low STR_2
  1371  0000A8  0100               	movlb	0	; () banked
  1372  0000AA  6FA2               	movwf	printf@f& (0+255),b
  1373  0000AC  0EFF               	movlw	high STR_2
  1374  0000AE  0100               	movlb	0	; () banked
  1375  0000B0  6FA3               	movwf	(printf@f+1)& (0+255),b
  1376  0000B2  EC7F  F003         	call	_printf	;wreg free
  1377                           
  1378                           ;main.c: 127: for(unsigned char i=0;i<50;i++){
  1379  0000B6  0E00               	movlw	0
  1380  0000B8  0100               	movlb	0	; () banked
  1381  0000BA  6FB8               	movwf	main@i& (0+255),b
  1382  0000BC                     l4003:
  1383                           
  1384                           ; BSR set to: 0
  1385  0000BC  0E31               	movlw	49
  1386  0000BE  0100               	movlb	0	; () banked
  1387  0000C0  65B8               	cpfsgt	main@i& (0+255),b
  1388  0000C2  D001               	goto	l4007
  1389  0000C4  D011               	goto	l4015
  1390  0000C6                     l4007:
  1391                           
  1392                           ; BSR set to: 0
  1393                           ;main.c: 128: if (screenMode != 2)
  1394  0000C6  0E02               	movlw	2
  1395  0000C8  0100               	movlb	0	; () banked
  1396  0000CA  19BB               	xorwf	_screenMode& (0+255),w,b
  1397  0000CC  A4D8               	btfss	status,2,c
  1398  0000CE  D00C               	goto	l4015
  1399                           
  1400                           ; BSR set to: 0
  1401                           ;main.c: 130: _delay((unsigned long)((10)*(10000000/4000.0)));
  1402                           
  1403                           ; BSR set to: 0
  1404                           
  1405                           ; BSR set to: 0
  1406                           ;main.c: 129: break;
  1407  0000D0  0E21               	movlw	33
  1408  0000D2  0100               	movlb	0	; () banked
  1409  0000D4  6FB4               	movwf	??_main& (0+255),b
  1410  0000D6  0E76               	movlw	118
  1411  0000D8                     u4467:
  1412  0000D8  2EE8               	decfsz	wreg,f,c
  1413  0000DA  D7FE               	bra	u4467
  1414  0000DC  2FB4               	decfsz	??_main& (0+255),f,b
  1415  0000DE  D7FC               	bra	u4467
  1416  0000E0  F000               	nop	
  1417  0000E2  0100               	movlb	0	; () banked
  1418  0000E4  2BB8               	incf	main@i& (0+255),f,b
  1419  0000E6  D7EA               	goto	l4003
  1420  0000E8                     l4015:
  1421                           
  1422                           ; BSR set to: 0
  1423                           ;main.c: 131: }
  1424                           ;main.c: 132: lcdInst(0b10000000);;
  1425  0000E8  0E80               	movlw	128
  1426  0000EA  ECD1  F00D         	call	_lcdInst
  1427                           
  1428                           ;main.c: 133: lcdInst(0b11000000);;
  1429  0000EE  0EC0               	movlw	192
  1430  0000F0  ECD1  F00D         	call	_lcdInst
  1431                           
  1432                           ;main.c: 134: printf(" <4   DATA   6> ");
  1433  0000F4  0ECB               	movlw	low STR_3
  1434  0000F6  0100               	movlb	0	; () banked
  1435  0000F8  6FA2               	movwf	printf@f& (0+255),b
  1436  0000FA  0EFF               	movlw	high STR_3
  1437  0000FC  0100               	movlb	0	; () banked
  1438  0000FE  6FA3               	movwf	(printf@f+1)& (0+255),b
  1439  000100  EC7F  F003         	call	_printf	;wreg free
  1440                           
  1441                           ;main.c: 135: for(unsigned char i=0;i<50;i++){
  1442  000104  0E00               	movlw	0
  1443  000106  0100               	movlb	0	; () banked
  1444  000108  6FB9               	movwf	main@i_579& (0+255),b
  1445  00010A                     l4021:
  1446                           
  1447                           ; BSR set to: 0
  1448  00010A  0E31               	movlw	49
  1449  00010C  0100               	movlb	0	; () banked
  1450  00010E  65B9               	cpfsgt	main@i_579& (0+255),b
  1451  000110  D001               	goto	l4025
  1452  000112  D011               	goto	l4033
  1453  000114                     l4025:
  1454                           
  1455                           ; BSR set to: 0
  1456                           ;main.c: 136: if (screenMode != 2)
  1457  000114  0E02               	movlw	2
  1458  000116  0100               	movlb	0	; () banked
  1459  000118  19BB               	xorwf	_screenMode& (0+255),w,b
  1460  00011A  A4D8               	btfss	status,2,c
  1461  00011C  D00C               	goto	l4033
  1462                           
  1463                           ; BSR set to: 0
  1464                           ;main.c: 138: _delay((unsigned long)((10)*(10000000/4000.0)));
  1465                           
  1466                           ; BSR set to: 0
  1467                           
  1468                           ; BSR set to: 0
  1469                           ;main.c: 137: break;
  1470  00011E  0E21               	movlw	33
  1471  000120  0100               	movlb	0	; () banked
  1472  000122  6FB4               	movwf	??_main& (0+255),b
  1473  000124  0E76               	movlw	118
  1474  000126                     u4477:
  1475  000126  2EE8               	decfsz	wreg,f,c
  1476  000128  D7FE               	bra	u4477
  1477  00012A  2FB4               	decfsz	??_main& (0+255),f,b
  1478  00012C  D7FC               	bra	u4477
  1479  00012E  F000               	nop	
  1480  000130  0100               	movlb	0	; () banked
  1481  000132  2BB9               	incf	main@i_579& (0+255),f,b
  1482  000134  D7EA               	goto	l4021
  1483  000136                     l4033:
  1484  000136  0E02               	movlw	2
  1485  000138  0100               	movlb	0	; () banked
  1486  00013A  19BB               	xorwf	_screenMode& (0+255),w,b
  1487  00013C  A4D8               	btfss	status,2,c
  1488  00013E  D163               	goto	l4105
  1489  000140  D7A4               	goto	l3995
  1490  000142                     l4035:
  1491                           
  1492                           ; BSR set to: 0
  1493                           ;main.c: 148: readADC(0);
  1494  000142  0E00               	movlw	0
  1495  000144  ECB8  F00D         	call	_readADC
  1496                           
  1497                           ;main.c: 149: lcdInst(0b10000000);;
  1498  000148  0E80               	movlw	128
  1499  00014A  ECD1  F00D         	call	_lcdInst
  1500                           
  1501                           ;main.c: 150: lcdInst(0b11000000);;
  1502  00014E  0EC0               	movlw	192
  1503  000150  ECD1  F00D         	call	_lcdInst
  1504                           
  1505                           ;main.c: 151: printf("%04d %2d         ", (ADRESH<<8)+ADRESL, countDrain+countAA+count9V
      +                          +countC);
  1506  000154  0EED               	movlw	low STR_4
  1507  000156  0100               	movlb	0	; () banked
  1508  000158  6FA2               	movwf	printf@f& (0+255),b
  1509  00015A  0EFE               	movlw	high STR_4
  1510  00015C  0100               	movlb	0	; () banked
  1511  00015E  6FA3               	movwf	(printf@f+1)& (0+255),b
  1512  000160  50C4               	movf	4036,w,c	;volatile
  1513  000162  0100               	movlb	0	; () banked
  1514  000164  6FB5               	movwf	(??_main+1)& (0+255),b
  1515  000166  6BB4               	clrf	??_main& (0+255),b
  1516  000168  50C3               	movf	4035,w,c	;volatile
  1517  00016A  0100               	movlb	0	; () banked
  1518  00016C  25B4               	addwf	??_main& (0+255),w,b
  1519  00016E  0100               	movlb	0	; () banked
  1520  000170  6FA4               	movwf	(?_printf+2)& (0+255),b
  1521  000172  0E00               	movlw	0
  1522  000174  0100               	movlb	0	; () banked
  1523  000176  21B5               	addwfc	(??_main+1)& (0+255),w,b
  1524  000178  0100               	movlb	0	; () banked
  1525  00017A  6FA5               	movwf	(?_printf+3)& (0+255),b
  1526  00017C  0100               	movlb	0	; () banked
  1527  00017E  5192               	movf	_countAA& (0+255),w,b
  1528  000180  C094  F0B6         	movff	_countDrain,??_main+2
  1529  000184  0100               	movlb	0	; () banked
  1530  000186  6BB7               	clrf	(??_main+3)& (0+255),b
  1531  000188  0100               	movlb	0	; () banked
  1532  00018A  27B6               	addwf	(??_main+2)& (0+255),f,b
  1533  00018C  0E00               	movlw	0
  1534  00018E  23B7               	addwfc	(??_main+3)& (0+255),f,b
  1535  000190  0100               	movlb	0	; () banked
  1536  000192  5191               	movf	_count9V& (0+255),w,b
  1537  000194  0100               	movlb	0	; () banked
  1538  000196  27B6               	addwf	(??_main+2)& (0+255),f,b
  1539  000198  0E00               	movlw	0
  1540  00019A  23B7               	addwfc	(??_main+3)& (0+255),f,b
  1541  00019C  0100               	movlb	0	; () banked
  1542  00019E  5193               	movf	_countC& (0+255),w,b
  1543  0001A0  0100               	movlb	0	; () banked
  1544  0001A2  25B6               	addwf	(??_main+2)& (0+255),w,b
  1545  0001A4  0100               	movlb	0	; () banked
  1546  0001A6  6FA6               	movwf	(?_printf+4)& (0+255),b
  1547  0001A8  0100               	movlb	0	; () banked
  1548  0001AA  0E00               	movlw	0
  1549  0001AC  0100               	movlb	0	; () banked
  1550  0001AE  21B7               	addwfc	(??_main+3)& (0+255),w,b
  1551  0001B0  0100               	movlb	0	; () banked
  1552  0001B2  6FA7               	movwf	(?_printf+5)& (0+255),b
  1553  0001B4  EC7F  F003         	call	_printf	;wreg free
  1554                           
  1555                           ;main.c: 154: if (((ADRESH<<8)+ADRESL)<50){
  1556  0001B8  50C3               	movf	4035,w,c	;volatile
  1557  0001BA  CFC4 F0B4          	movff	4036,??_main	;volatile
  1558  0001BE  0100               	movlb	0	; () banked
  1559  0001C0  6BB5               	clrf	(??_main+1)& (0+255),b
  1560  0001C2  C0B4  F0B5         	movff	??_main,??_main+1
  1561  0001C6  0100               	movlb	0	; () banked
  1562  0001C8  6BB4               	clrf	??_main& (0+255),b
  1563  0001CA  0100               	movlb	0	; () banked
  1564  0001CC  27B4               	addwf	??_main& (0+255),f,b
  1565  0001CE  0E00               	movlw	0
  1566  0001D0  23B5               	addwfc	(??_main+1)& (0+255),f,b
  1567  0001D2  0100               	movlb	0	; () banked
  1568  0001D4  BFB5               	btfsc	(??_main+1)& (0+255),7,b
  1569  0001D6  D008               	goto	l4041
  1570  0001D8  0100               	movlb	0	; () banked
  1571  0001DA  51B5               	movf	(??_main+1)& (0+255),w,b
  1572  0001DC  E104               	bnz	u4191
  1573  0001DE  0E32               	movlw	50
  1574  0001E0  0100               	movlb	0	; () banked
  1575  0001E2  5DB4               	subwf	??_main& (0+255),w,b
  1576  0001E4  B0D8               	btfsc	status,0,c
  1577  0001E6                     u4191:
  1578  0001E6  D101               	goto	l4103
  1579  0001E8                     l4041:
  1580                           
  1581                           ; BSR set to: 0
  1582                           ;main.c: 155: LATAbits.LA7 = 1;;
  1583  0001E8  8E89               	bsf	3977,7,c	;volatile
  1584                           
  1585                           ; BSR set to: 0
  1586                           ;main.c: 156: testBatteries();
  1587  0001EA  EC68  F008         	call	_testBatteries	;wreg free
  1588                           
  1589                           ;main.c: 157: LATAbits.LA7 = 0;;
  1590  0001EE  9E89               	bcf	3977,7,c	;volatile
  1591                           
  1592                           ;main.c: 158: if (stepGear){
  1593  0001F0  0100               	movlb	0	; () banked
  1594  0001F2  518F               	movf	_stepGear& (0+255),w,b
  1595  0001F4  0100               	movlb	0	; () banked
  1596  0001F6  1190               	iorwf	(_stepGear+1)& (0+255),w,b
  1597  0001F8  B4D8               	btfsc	status,2,c
  1598  0001FA  D002               	goto	l4051
  1599                           
  1600                           ; BSR set to: 0
  1601                           ;main.c: 159: LATCbits.LC1= 1;;
  1602  0001FC  828B               	bsf	3979,1,c	;volatile
  1603                           
  1604                           ;main.c: 160: T1CONbits.TMR1ON = 1;
  1605  0001FE  80CD               	bsf	4045,0,c	;volatile
  1606  000200                     l4051:
  1607                           
  1608                           ; BSR set to: 0
  1609                           ;main.c: 161: }
  1610                           ;main.c: 162: if (plat1Left){
  1611  000200  0100               	movlb	0	; () banked
  1612  000202  5187               	movf	_plat1Left& (0+255),w,b
  1613  000204  0100               	movlb	0	; () banked
  1614  000206  1188               	iorwf	(_plat1Left+1)& (0+255),w,b
  1615  000208  B4D8               	btfsc	status,2,c
  1616  00020A  D008               	goto	l4059
  1617                           
  1618                           ; BSR set to: 0
  1619                           ;main.c: 163: LATEbits.LE2 = 1;;
  1620  00020C  848D               	bsf	3981,2,c	;volatile
  1621                           
  1622                           ;main.c: 164: LATAbits.LA3 = 0;;
  1623  00020E  9689               	bcf	3977,3,c	;volatile
  1624                           
  1625                           ; BSR set to: 0
  1626                           ;main.c: 165: step1 = 1;
  1627  000210  0E01               	movlw	1
  1628  000212  6E47               	movwf	_step1,c
  1629                           
  1630                           ;main.c: 166: turn1BackRight = 1;
  1631  000214  0E01               	movlw	1
  1632  000216  0100               	movlb	0	; () banked
  1633  000218  6F9E               	movwf	_turn1BackRight& (0+255),b
  1634                           
  1635                           ; BSR set to: 0
  1636                           ;main.c: 167: T1CONbits.TMR1ON = 1;
  1637  00021A  80CD               	bsf	4045,0,c	;volatile
  1638  00021C                     l4059:
  1639                           
  1640                           ; BSR set to: 0
  1641                           ;main.c: 168: }
  1642                           ;main.c: 169: if (plat1Right){
  1643  00021C  0100               	movlb	0	; () banked
  1644  00021E  5189               	movf	_plat1Right& (0+255),w,b
  1645  000220  0100               	movlb	0	; () banked
  1646  000222  118A               	iorwf	(_plat1Right+1)& (0+255),w,b
  1647  000224  B4D8               	btfsc	status,2,c
  1648  000226  D008               	goto	l4067
  1649                           
  1650                           ; BSR set to: 0
  1651                           ;main.c: 170: LATEbits.LE2 = 1;;
  1652  000228  848D               	bsf	3981,2,c	;volatile
  1653                           
  1654                           ;main.c: 171: LATAbits.LA3 = 0;;
  1655  00022A  9689               	bcf	3977,3,c	;volatile
  1656                           
  1657                           ; BSR set to: 0
  1658                           ;main.c: 172: step1 = 4;
  1659  00022C  0E04               	movlw	4
  1660  00022E  6E47               	movwf	_step1,c
  1661                           
  1662                           ;main.c: 173: turn1BackLeft = 1;
  1663  000230  0E01               	movlw	1
  1664  000232  0100               	movlb	0	; () banked
  1665  000234  6F9D               	movwf	_turn1BackLeft& (0+255),b
  1666                           
  1667                           ; BSR set to: 0
  1668                           ;main.c: 174: T1CONbits.TMR1ON = 1;
  1669  000236  80CD               	bsf	4045,0,c	;volatile
  1670  000238                     l4067:
  1671                           
  1672                           ; BSR set to: 0
  1673                           ;main.c: 175: }
  1674                           ;main.c: 176: if (plat2Left){
  1675  000238  0100               	movlb	0	; () banked
  1676  00023A  518B               	movf	_plat2Left& (0+255),w,b
  1677  00023C  0100               	movlb	0	; () banked
  1678  00023E  118C               	iorwf	(_plat2Left+1)& (0+255),w,b
  1679  000240  B4D8               	btfsc	status,2,c
  1680  000242  D008               	goto	l4075
  1681                           
  1682                           ; BSR set to: 0
  1683                           ;main.c: 177: LATBbits.LB0 = 1;;
  1684  000244  808A               	bsf	3978,0,c	;volatile
  1685                           
  1686                           ;main.c: 178: LATBbits.LB2 = 0;;
  1687  000246  948A               	bcf	3978,2,c	;volatile
  1688                           
  1689                           ; BSR set to: 0
  1690                           ;main.c: 179: step2 = 1;
  1691  000248  0E01               	movlw	1
  1692  00024A  6E48               	movwf	_step2,c
  1693                           
  1694                           ;main.c: 180: turn2BackRight = 1;
  1695  00024C  0E01               	movlw	1
  1696  00024E  0100               	movlb	0	; () banked
  1697  000250  6FA0               	movwf	_turn2BackRight& (0+255),b
  1698                           
  1699                           ; BSR set to: 0
  1700                           ;main.c: 181: T1CONbits.TMR1ON = 1;
  1701  000252  80CD               	bsf	4045,0,c	;volatile
  1702  000254                     l4075:
  1703                           
  1704                           ; BSR set to: 0
  1705                           ;main.c: 182: }
  1706                           ;main.c: 183: if (plat2Right){
  1707  000254  0100               	movlb	0	; () banked
  1708  000256  518D               	movf	_plat2Right& (0+255),w,b
  1709  000258  0100               	movlb	0	; () banked
  1710  00025A  118E               	iorwf	(_plat2Right+1)& (0+255),w,b
  1711  00025C  B4D8               	btfsc	status,2,c
  1712  00025E  D008               	goto	l4083
  1713                           
  1714                           ; BSR set to: 0
  1715                           ;main.c: 184: LATBbits.LB0 = 1;;
  1716  000260  808A               	bsf	3978,0,c	;volatile
  1717                           
  1718                           ;main.c: 185: LATBbits.LB2 = 0;;
  1719  000262  948A               	bcf	3978,2,c	;volatile
  1720                           
  1721                           ; BSR set to: 0
  1722                           ;main.c: 186: step2 = 4;
  1723  000264  0E04               	movlw	4
  1724  000266  6E48               	movwf	_step2,c
  1725                           
  1726                           ;main.c: 187: turn2BackLeft = 1;
  1727  000268  0E01               	movlw	1
  1728  00026A  0100               	movlb	0	; () banked
  1729  00026C  6F9F               	movwf	_turn2BackLeft& (0+255),b
  1730                           
  1731                           ; BSR set to: 0
  1732                           ;main.c: 188: T1CONbits.TMR1ON = 1;
  1733  00026E  80CD               	bsf	4045,0,c	;volatile
  1734  000270                     l4083:
  1735                           
  1736                           ; BSR set to: 0
  1737  000270  0100               	movlb	0	; () banked
  1738  000272  5187               	movf	_plat1Left& (0+255),w,b
  1739  000274  0100               	movlb	0	; () banked
  1740  000276  118F               	iorwf	_stepGear& (0+255),w,b
  1741  000278  0100               	movlb	0	; () banked
  1742  00027A  6FB4               	movwf	??_main& (0+255),b
  1743  00027C  0100               	movlb	0	; () banked
  1744  00027E  5188               	movf	(_plat1Left+1)& (0+255),w,b
  1745  000280  0100               	movlb	0	; () banked
  1746  000282  1190               	iorwf	(_stepGear+1)& (0+255),w,b
  1747  000284  0100               	movlb	0	; () banked
  1748  000286  6FB5               	movwf	(??_main+1)& (0+255),b
  1749  000288  0100               	movlb	0	; () banked
  1750  00028A  518B               	movf	_plat2Left& (0+255),w,b
  1751  00028C  0100               	movlb	0	; () banked
  1752  00028E  13B4               	iorwf	??_main& (0+255),f,b
  1753  000290  0100               	movlb	0	; () banked
  1754  000292  518C               	movf	(_plat2Left+1)& (0+255),w,b
  1755  000294  0100               	movlb	0	; () banked
  1756  000296  13B5               	iorwf	(??_main+1)& (0+255),f,b
  1757  000298  0100               	movlb	0	; () banked
  1758  00029A  5189               	movf	_plat1Right& (0+255),w,b
  1759  00029C  0100               	movlb	0	; () banked
  1760  00029E  13B4               	iorwf	??_main& (0+255),f,b
  1761  0002A0  0100               	movlb	0	; () banked
  1762  0002A2  518A               	movf	(_plat1Right+1)& (0+255),w,b
  1763  0002A4  0100               	movlb	0	; () banked
  1764  0002A6  13B5               	iorwf	(??_main+1)& (0+255),f,b
  1765  0002A8  0100               	movlb	0	; () banked
  1766  0002AA  518D               	movf	_plat2Right& (0+255),w,b
  1767  0002AC  0100               	movlb	0	; () banked
  1768  0002AE  13B4               	iorwf	??_main& (0+255),f,b
  1769  0002B0  0100               	movlb	0	; () banked
  1770  0002B2  518E               	movf	(_plat2Right+1)& (0+255),w,b
  1771  0002B4  0100               	movlb	0	; () banked
  1772  0002B6  13B5               	iorwf	(??_main+1)& (0+255),f,b
  1773  0002B8  0100               	movlb	0	; () banked
  1774  0002BA  51B4               	movf	??_main& (0+255),w,b
  1775  0002BC  0100               	movlb	0	; () banked
  1776  0002BE  11B5               	iorwf	(??_main+1)& (0+255),w,b
  1777  0002C0  B4D8               	btfsc	status,2,c
  1778  0002C2  D004               	goto	l4087
  1779                           
  1780                           ; BSR set to: 0
  1781  0002C4  0100               	movlb	0	; () banked
  1782  0002C6  05BB               	decf	_screenMode& (0+255),w,b
  1783  0002C8  B4D8               	btfsc	status,2,c
  1784  0002CA  D7D2               	goto	l4083
  1785  0002CC                     l4087:
  1786                           
  1787                           ; BSR set to: 0
  1788                           ;main.c: 191: waitMotor = 1;
  1789  0002CC  0E01               	movlw	1
  1790  0002CE  0100               	movlb	0	; () banked
  1791  0002D0  6FA1               	movwf	_waitMotor& (0+255),b
  1792  0002D2                     l4089:
  1793                           
  1794                           ; BSR set to: 0
  1795  0002D2  0100               	movlb	0	; () banked
  1796  0002D4  51A1               	movf	_waitMotor& (0+255),w,b
  1797  0002D6  B4D8               	btfsc	status,2,c
  1798  0002D8  D004               	goto	l261
  1799                           
  1800                           ; BSR set to: 0
  1801  0002DA  0100               	movlb	0	; () banked
  1802  0002DC  05BB               	decf	_screenMode& (0+255),w,b
  1803  0002DE  B4D8               	btfsc	status,2,c
  1804  0002E0  D7F8               	goto	l4089
  1805  0002E2                     l261:
  1806                           
  1807                           ; BSR set to: 0
  1808                           ;main.c: 195: LATEbits.LE2 = 1;;
  1809  0002E2  848D               	bsf	3981,2,c	;volatile
  1810                           
  1811                           ;main.c: 196: LATAbits.LA3 = 0;;
  1812  0002E4  9689               	bcf	3977,3,c	;volatile
  1813                           
  1814                           ;main.c: 197: LATBbits.LB0 = 1;;
  1815  0002E6  808A               	bsf	3978,0,c	;volatile
  1816                           
  1817                           ;main.c: 198: LATBbits.LB2 = 0;;
  1818  0002E8  948A               	bcf	3978,2,c	;volatile
  1819                           
  1820                           ;main.c: 199: plat1Left = turn1BackLeft;
  1821  0002EA  C09D  F087         	movff	_turn1BackLeft,_plat1Left
  1822  0002EE  0100               	movlb	0	; () banked
  1823  0002F0  6B88               	clrf	(_plat1Left+1)& (0+255),b
  1824                           
  1825                           ;main.c: 200: plat1Right = turn1BackRight;
  1826  0002F2  C09E  F089         	movff	_turn1BackRight,_plat1Right
  1827  0002F6  0100               	movlb	0	; () banked
  1828  0002F8  6B8A               	clrf	(_plat1Right+1)& (0+255),b
  1829                           
  1830                           ;main.c: 201: plat2Left = turn2BackLeft;
  1831  0002FA  C09F  F08B         	movff	_turn2BackLeft,_plat2Left
  1832  0002FE  0100               	movlb	0	; () banked
  1833  000300  6B8C               	clrf	(_plat2Left+1)& (0+255),b
  1834                           
  1835                           ;main.c: 202: plat2Right = turn2BackRight;
  1836  000302  C0A0  F08D         	movff	_turn2BackRight,_plat2Right
  1837  000306  0100               	movlb	0	; () banked
  1838  000308  6B8E               	clrf	(_plat2Right+1)& (0+255),b
  1839  00030A                     l4093:
  1840                           
  1841                           ; BSR set to: 0
  1842  00030A  0100               	movlb	0	; () banked
  1843  00030C  5187               	movf	_plat1Left& (0+255),w,b
  1844  00030E  0100               	movlb	0	; () banked
  1845  000310  118F               	iorwf	_stepGear& (0+255),w,b
  1846  000312  0100               	movlb	0	; () banked
  1847  000314  6FB4               	movwf	??_main& (0+255),b
  1848  000316  0100               	movlb	0	; () banked
  1849  000318  5188               	movf	(_plat1Left+1)& (0+255),w,b
  1850  00031A  0100               	movlb	0	; () banked
  1851  00031C  1190               	iorwf	(_stepGear+1)& (0+255),w,b
  1852  00031E  0100               	movlb	0	; () banked
  1853  000320  6FB5               	movwf	(??_main+1)& (0+255),b
  1854  000322  0100               	movlb	0	; () banked
  1855  000324  518B               	movf	_plat2Left& (0+255),w,b
  1856  000326  0100               	movlb	0	; () banked
  1857  000328  13B4               	iorwf	??_main& (0+255),f,b
  1858  00032A  0100               	movlb	0	; () banked
  1859  00032C  518C               	movf	(_plat2Left+1)& (0+255),w,b
  1860  00032E  0100               	movlb	0	; () banked
  1861  000330  13B5               	iorwf	(??_main+1)& (0+255),f,b
  1862  000332  0100               	movlb	0	; () banked
  1863  000334  5189               	movf	_plat1Right& (0+255),w,b
  1864  000336  0100               	movlb	0	; () banked
  1865  000338  13B4               	iorwf	??_main& (0+255),f,b
  1866  00033A  0100               	movlb	0	; () banked
  1867  00033C  518A               	movf	(_plat1Right+1)& (0+255),w,b
  1868  00033E  0100               	movlb	0	; () banked
  1869  000340  13B5               	iorwf	(??_main+1)& (0+255),f,b
  1870  000342  0100               	movlb	0	; () banked
  1871  000344  518D               	movf	_plat2Right& (0+255),w,b
  1872  000346  0100               	movlb	0	; () banked
  1873  000348  13B4               	iorwf	??_main& (0+255),f,b
  1874  00034A  0100               	movlb	0	; () banked
  1875  00034C  518E               	movf	(_plat2Right+1)& (0+255),w,b
  1876  00034E  0100               	movlb	0	; () banked
  1877  000350  13B5               	iorwf	(??_main+1)& (0+255),f,b
  1878  000352  0100               	movlb	0	; () banked
  1879  000354  51B4               	movf	??_main& (0+255),w,b
  1880  000356  0100               	movlb	0	; () banked
  1881  000358  11B5               	iorwf	(??_main+1)& (0+255),w,b
  1882  00035A  B4D8               	btfsc	status,2,c
  1883  00035C  D004               	goto	l266
  1884                           
  1885                           ; BSR set to: 0
  1886  00035E  0100               	movlb	0	; () banked
  1887  000360  05BB               	decf	_screenMode& (0+255),w,b
  1888  000362  B4D8               	btfsc	status,2,c
  1889  000364  D7D2               	goto	l4093
  1890  000366                     l266:
  1891                           
  1892                           ; BSR set to: 0
  1893                           ;main.c: 205: T1CONbits.TMR1ON = 0;
  1894  000366  90CD               	bcf	4045,0,c	;volatile
  1895                           
  1896                           ;main.c: 206: LATCbits.LC2 = 0;;
  1897  000368  948B               	bcf	3979,2,c	;volatile
  1898                           
  1899                           ;main.c: 207: LATEbits.LE2 = 0;;
  1900  00036A  948D               	bcf	3981,2,c	;volatile
  1901                           
  1902                           ;main.c: 208: LATAbits.LA3 = 0;;
  1903  00036C  9689               	bcf	3977,3,c	;volatile
  1904                           
  1905                           ;main.c: 209: LATAbits.LA4 = 0;;
  1906  00036E  9889               	bcf	3977,4,c	;volatile
  1907                           
  1908                           ;main.c: 210: LATAbits.LA5 = 0;;
  1909  000370  9A89               	bcf	3977,5,c	;volatile
  1910                           
  1911                           ;main.c: 211: LATBbits.LB0 = 0;;
  1912  000372  908A               	bcf	3978,0,c	;volatile
  1913                           
  1914                           ;main.c: 212: LATBbits.LB2 = 0;;
  1915  000374  948A               	bcf	3978,2,c	;volatile
  1916                           
  1917                           ;main.c: 213: LATCbits.LC6 = 0;;
  1918  000376  9C8B               	bcf	3979,6,c	;volatile
  1919                           
  1920                           ;main.c: 214: LATAbits.LA6 = 0;;
  1921  000378  9C89               	bcf	3977,6,c	;volatile
  1922                           
  1923                           ; BSR set to: 0
  1924                           ;main.c: 215: if (((countC + countAA + count9V + countDrain) >= 15)|doneSorting){
  1925  00037A  0100               	movlb	0	; () banked
  1926  00037C  5192               	movf	_countAA& (0+255),w,b
  1927  00037E  C093  F0B4         	movff	_countC,??_main
  1928  000382  0100               	movlb	0	; () banked
  1929  000384  6BB5               	clrf	(??_main+1)& (0+255),b
  1930  000386  0100               	movlb	0	; () banked
  1931  000388  27B4               	addwf	??_main& (0+255),f,b
  1932  00038A  0E00               	movlw	0
  1933  00038C  23B5               	addwfc	(??_main+1)& (0+255),f,b
  1934  00038E  0100               	movlb	0	; () banked
  1935  000390  5191               	movf	_count9V& (0+255),w,b
  1936  000392  0100               	movlb	0	; () banked
  1937  000394  27B4               	addwf	??_main& (0+255),f,b
  1938  000396  0E00               	movlw	0
  1939  000398  23B5               	addwfc	(??_main+1)& (0+255),f,b
  1940  00039A  0100               	movlb	0	; () banked
  1941  00039C  5194               	movf	_countDrain& (0+255),w,b
  1942  00039E  0100               	movlb	0	; () banked
  1943  0003A0  27B4               	addwf	??_main& (0+255),f,b
  1944  0003A2  0E00               	movlw	0
  1945  0003A4  23B5               	addwfc	(??_main+1)& (0+255),f,b
  1946  0003A6  0100               	movlb	0	; () banked
  1947  0003A8  BFB5               	btfsc	(??_main+1)& (0+255),7,b
  1948  0003AA  D00A               	goto	u4310
  1949  0003AC  0100               	movlb	0	; () banked
  1950  0003AE  51B5               	movf	(??_main+1)& (0+255),w,b
  1951  0003B0  E105               	bnz	u4311
  1952  0003B2  0E0F               	movlw	15
  1953  0003B4  0100               	movlb	0	; () banked
  1954  0003B6  5DB4               	subwf	??_main& (0+255),w,b
  1955  0003B8  A0D8               	btfss	status,0,c
  1956  0003BA  D002               	goto	u4310
  1957  0003BC                     u4311:
  1958  0003BC  0E01               	movlw	1
  1959  0003BE  D001               	goto	u4320
  1960  0003C0                     u4310:
  1961  0003C0  0E00               	movlw	0
  1962  0003C2                     u4320:
  1963  0003C2  0100               	movlb	0	; () banked
  1964  0003C4  6FB6               	movwf	(??_main+2)& (0+255),b
  1965  0003C6  6BB7               	clrf	(??_main+3)& (0+255),b
  1966  0003C8  0100               	movlb	0	; () banked
  1967  0003CA  5195               	movf	_doneSorting& (0+255),w,b
  1968  0003CC  0100               	movlb	0	; () banked
  1969  0003CE  13B6               	iorwf	(??_main+2)& (0+255),f,b
  1970  0003D0  0E00               	movlw	0
  1971  0003D2  13B7               	iorwf	(??_main+3)& (0+255),f,b
  1972  0003D4  0100               	movlb	0	; () banked
  1973  0003D6  51B6               	movf	(??_main+2)& (0+255),w,b
  1974  0003D8  0100               	movlb	0	; () banked
  1975  0003DA  11B7               	iorwf	(??_main+3)& (0+255),w,b
  1976  0003DC  B4D8               	btfsc	status,2,c
  1977  0003DE  D005               	goto	l4103
  1978                           
  1979                           ; BSR set to: 0
  1980                           ;main.c: 216: screenMode = 0;
  1981  0003E0  0E00               	movlw	0
  1982  0003E2  0100               	movlb	0	; () banked
  1983  0003E4  6FBB               	movwf	_screenMode& (0+255),b
  1984                           
  1985                           ; BSR set to: 0
  1986                           ;main.c: 217: stopOperation();
  1987  0003E6  EC90  F009         	call	_stopOperation	;wreg free
  1988  0003EA                     l4103:
  1989                           
  1990                           ;main.c: 218: }
  1991                           ;main.c: 219: }
  1992                           ;main.c: 220: _delay((unsigned long)((500)*(10000000/4000.0)));
  1993  0003EA  0E07               	movlw	7
  1994  0003EC  0100               	movlb	0	; () banked
  1995  0003EE  6FB5               	movwf	(??_main+1)& (0+255),b
  1996  0003F0  0E58               	movlw	88
  1997  0003F2  0100               	movlb	0	; () banked
  1998  0003F4  6FB4               	movwf	??_main& (0+255),b
  1999  0003F6  0E59               	movlw	89
  2000  0003F8                     u4487:
  2001  0003F8  2EE8               	decfsz	wreg,f,c
  2002  0003FA  D7FE               	bra	u4487
  2003  0003FC  2FB4               	decfsz	??_main& (0+255),f,b
  2004  0003FE  D7FC               	bra	u4487
  2005  000400  2FB5               	decfsz	(??_main+1)& (0+255),f,b
  2006  000402  D7FA               	bra	u4487
  2007  000404  D000               	nop2	
  2008  000406                     l4105:
  2009  000406  0100               	movlb	0	; () banked
  2010  000408  05BB               	decf	_screenMode& (0+255),w,b
  2011  00040A  A4D8               	btfss	status,2,c
  2012  00040C  D017               	goto	l4113
  2013  00040E  D699               	goto	l4035
  2014  000410                     l4107:
  2015                           
  2016                           ; BSR set to: 0
  2017                           ;main.c: 224: lcdInst(0b10000000);;
  2018  000410  0E80               	movlw	128
  2019  000412  ECD1  F00D         	call	_lcdInst
  2020                           
  2021                           ;main.c: 225: printf("DONE! PRESS *   ");
  2022  000416  0E87               	movlw	low STR_5
  2023  000418  0100               	movlb	0	; () banked
  2024  00041A  6FA2               	movwf	printf@f& (0+255),b
  2025  00041C  0EFF               	movlw	high STR_5
  2026  00041E  0100               	movlb	0	; () banked
  2027  000420  6FA3               	movwf	(printf@f+1)& (0+255),b
  2028  000422  EC7F  F003         	call	_printf	;wreg free
  2029                           
  2030                           ;main.c: 226: lcdInst(0b11000000);;
  2031  000426  0EC0               	movlw	192
  2032  000428  ECD1  F00D         	call	_lcdInst
  2033                           
  2034                           ;main.c: 227: printf("TO CONTINUE     ");
  2035  00042C  0E65               	movlw	low STR_6
  2036  00042E  0100               	movlb	0	; () banked
  2037  000430  6FA2               	movwf	printf@f& (0+255),b
  2038  000432  0EFF               	movlw	high STR_6
  2039  000434  0100               	movlb	0	; () banked
  2040  000436  6FA3               	movwf	(printf@f+1)& (0+255),b
  2041  000438  EC7F  F003         	call	_printf	;wreg free
  2042  00043C                     l4113:
  2043  00043C  0100               	movlb	0	; () banked
  2044  00043E  51BB               	movf	_screenMode& (0+255),w,b
  2045  000440  A4D8               	btfss	status,2,c
  2046  000442  D01F               	goto	l4121
  2047  000444  D7E5               	goto	l4107
  2048  000446                     l4115:
  2049                           
  2050                           ; BSR set to: 0
  2051                           ;main.c: 230: lcdInst(0b10000000);;
  2052  000446  0E80               	movlw	128
  2053  000448  ECD1  F00D         	call	_lcdInst
  2054                           
  2055                           ;main.c: 231: printf("TOTAL RUN TIME: ");
  2056  00044C  0EBA               	movlw	low STR_7
  2057  00044E  0100               	movlb	0	; () banked
  2058  000450  6FA2               	movwf	printf@f& (0+255),b
  2059  000452  0EFF               	movlw	high STR_7
  2060  000454  0100               	movlb	0	; () banked
  2061  000456  6FA3               	movwf	(printf@f+1)& (0+255),b
  2062  000458  EC7F  F003         	call	_printf	;wreg free
  2063                           
  2064                           ;main.c: 232: lcdInst(0b11000000);;
  2065  00045C  0EC0               	movlw	192
  2066  00045E  ECD1  F00D         	call	_lcdInst
  2067                           
  2068                           ;main.c: 233: printf("%02d:%02d               ", min, sec);
  2069  000462  0E68               	movlw	low STR_8
  2070  000464  0100               	movlb	0	; () banked
  2071  000466  6FA2               	movwf	printf@f& (0+255),b
  2072  000468  0EFE               	movlw	high STR_8
  2073  00046A  0100               	movlb	0	; () banked
  2074  00046C  6FA3               	movwf	(printf@f+1)& (0+255),b
  2075  00046E  C096  F0A4         	movff	_min,?_printf+2
  2076  000472  0100               	movlb	0	; () banked
  2077  000474  6BA5               	clrf	(?_printf+3)& (0+255),b
  2078  000476  C09C  F0A6         	movff	_sec,?_printf+4
  2079  00047A  0100               	movlb	0	; () banked
  2080  00047C  6BA7               	clrf	(?_printf+5)& (0+255),b
  2081  00047E  EC7F  F003         	call	_printf	;wreg free
  2082  000482                     l4121:
  2083  000482  0E03               	movlw	3
  2084  000484  0100               	movlb	0	; () banked
  2085  000486  19BB               	xorwf	_screenMode& (0+255),w,b
  2086  000488  A4D8               	btfss	status,2,c
  2087  00048A  D01B               	goto	l4129
  2088  00048C  D7DC               	goto	l4115
  2089  00048E                     l4123:
  2090                           
  2091                           ; BSR set to: 0
  2092                           ;main.c: 236: lcdInst(0b10000000);;
  2093  00048E  0E80               	movlw	128
  2094  000490  ECD1  F00D         	call	_lcdInst
  2095                           
  2096                           ;main.c: 237: printf("TOTAL # OF      ");
  2097  000494  0E54               	movlw	low STR_9
  2098  000496  0100               	movlb	0	; () banked
  2099  000498  6FA2               	movwf	printf@f& (0+255),b
  2100  00049A  0EFF               	movlw	high STR_9
  2101  00049C  0100               	movlb	0	; () banked
  2102  00049E  6FA3               	movwf	(printf@f+1)& (0+255),b
  2103  0004A0  EC7F  F003         	call	_printf	;wreg free
  2104                           
  2105                           ;main.c: 238: lcdInst(0b11000000);;
  2106  0004A4  0EC0               	movlw	192
  2107  0004A6  ECD1  F00D         	call	_lcdInst
  2108                           
  2109                           ;main.c: 239: printf("BATTERIES: %02d   ", numBats);
  2110  0004AA  0EDA               	movlw	low STR_10
  2111  0004AC  0100               	movlb	0	; () banked
  2112  0004AE  6FA2               	movwf	printf@f& (0+255),b
  2113  0004B0  0EFE               	movlw	high STR_10
  2114  0004B2  0100               	movlb	0	; () banked
  2115  0004B4  6FA3               	movwf	(printf@f+1)& (0+255),b
  2116  0004B6  C099  F0A4         	movff	_numBats,?_printf+2
  2117  0004BA  0100               	movlb	0	; () banked
  2118  0004BC  6BA5               	clrf	(?_printf+3)& (0+255),b
  2119  0004BE  EC7F  F003         	call	_printf	;wreg free
  2120  0004C2                     l4129:
  2121  0004C2  0E04               	movlw	4
  2122  0004C4  0100               	movlb	0	; () banked
  2123  0004C6  19BB               	xorwf	_screenMode& (0+255),w,b
  2124  0004C8  A4D8               	btfss	status,2,c
  2125  0004CA  D01B               	goto	l4137
  2126  0004CC  D7E0               	goto	l4123
  2127  0004CE                     l4131:
  2128                           
  2129                           ; BSR set to: 0
  2130                           ;main.c: 242: lcdInst(0b10000000);;
  2131  0004CE  0E80               	movlw	128
  2132  0004D0  ECD1  F00D         	call	_lcdInst
  2133                           
  2134                           ;main.c: 243: printf("# OF C          ");
  2135  0004D4  0E21               	movlw	low STR_11
  2136  0004D6  0100               	movlb	0	; () banked
  2137  0004D8  6FA2               	movwf	printf@f& (0+255),b
  2138  0004DA  0EFF               	movlw	high STR_11
  2139  0004DC  0100               	movlb	0	; () banked
  2140  0004DE  6FA3               	movwf	(printf@f+1)& (0+255),b
  2141  0004E0  EC7F  F003         	call	_printf	;wreg free
  2142                           
  2143                           ;main.c: 244: lcdInst(0b11000000);;
  2144  0004E4  0EC0               	movlw	192
  2145  0004E6  ECD1  F00D         	call	_lcdInst
  2146                           
  2147                           ;main.c: 245: printf("BATTERIES: %02d   ", numC);
  2148  0004EA  0EDA               	movlw	low STR_10
  2149  0004EC  0100               	movlb	0	; () banked
  2150  0004EE  6FA2               	movwf	printf@f& (0+255),b
  2151  0004F0  0EFE               	movlw	high STR_10
  2152  0004F2  0100               	movlb	0	; () banked
  2153  0004F4  6FA3               	movwf	(printf@f+1)& (0+255),b
  2154  0004F6  C09A  F0A4         	movff	_numC,?_printf+2
  2155  0004FA  0100               	movlb	0	; () banked
  2156  0004FC  6BA5               	clrf	(?_printf+3)& (0+255),b
  2157  0004FE  EC7F  F003         	call	_printf	;wreg free
  2158  000502                     l4137:
  2159  000502  0E05               	movlw	5
  2160  000504  0100               	movlb	0	; () banked
  2161  000506  19BB               	xorwf	_screenMode& (0+255),w,b
  2162  000508  A4D8               	btfss	status,2,c
  2163  00050A  D01B               	goto	l4145
  2164  00050C  D7E0               	goto	l4131
  2165  00050E                     l4139:
  2166                           
  2167                           ; BSR set to: 0
  2168                           ;main.c: 248: lcdInst(0b10000000);;
  2169  00050E  0E80               	movlw	128
  2170  000510  ECD1  F00D         	call	_lcdInst
  2171                           
  2172                           ;main.c: 249: printf("# OF 9V         ");
  2173  000514  0E43               	movlw	low STR_13
  2174  000516  0100               	movlb	0	; () banked
  2175  000518  6FA2               	movwf	printf@f& (0+255),b
  2176  00051A  0EFF               	movlw	high STR_13
  2177  00051C  0100               	movlb	0	; () banked
  2178  00051E  6FA3               	movwf	(printf@f+1)& (0+255),b
  2179  000520  EC7F  F003         	call	_printf	;wreg free
  2180                           
  2181                           ;main.c: 250: lcdInst(0b11000000);;
  2182  000524  0EC0               	movlw	192
  2183  000526  ECD1  F00D         	call	_lcdInst
  2184                           
  2185                           ;main.c: 251: printf("BATTERIES: %02d     ", num9V);
  2186  00052A  0EC5               	movlw	low STR_14
  2187  00052C  0100               	movlb	0	; () banked
  2188  00052E  6FA2               	movwf	printf@f& (0+255),b
  2189  000530  0EFE               	movlw	high STR_14
  2190  000532  0100               	movlb	0	; () banked
  2191  000534  6FA3               	movwf	(printf@f+1)& (0+255),b
  2192  000536  C097  F0A4         	movff	_num9V,?_printf+2
  2193  00053A  0100               	movlb	0	; () banked
  2194  00053C  6BA5               	clrf	(?_printf+3)& (0+255),b
  2195  00053E  EC7F  F003         	call	_printf	;wreg free
  2196  000542                     l4145:
  2197  000542  0E06               	movlw	6
  2198  000544  0100               	movlb	0	; () banked
  2199  000546  19BB               	xorwf	_screenMode& (0+255),w,b
  2200  000548  A4D8               	btfss	status,2,c
  2201  00054A  D01B               	goto	l4153
  2202  00054C  D7E0               	goto	l4139
  2203  00054E                     l4147:
  2204                           
  2205                           ; BSR set to: 0
  2206                           ;main.c: 254: lcdInst(0b10000000);;
  2207  00054E  0E80               	movlw	128
  2208  000550  ECD1  F00D         	call	_lcdInst
  2209                           
  2210                           ;main.c: 255: printf("# OF AA         ");
  2211  000554  0E32               	movlw	low STR_15
  2212  000556  0100               	movlb	0	; () banked
  2213  000558  6FA2               	movwf	printf@f& (0+255),b
  2214  00055A  0EFF               	movlw	high STR_15
  2215  00055C  0100               	movlb	0	; () banked
  2216  00055E  6FA3               	movwf	(printf@f+1)& (0+255),b
  2217  000560  EC7F  F003         	call	_printf	;wreg free
  2218                           
  2219                           ;main.c: 256: lcdInst(0b11000000);;
  2220  000564  0EC0               	movlw	192
  2221  000566  ECD1  F00D         	call	_lcdInst
  2222                           
  2223                           ;main.c: 257: printf("BATTERIES: %02d     ", numAA);
  2224  00056A  0EC5               	movlw	low STR_14
  2225  00056C  0100               	movlb	0	; () banked
  2226  00056E  6FA2               	movwf	printf@f& (0+255),b
  2227  000570  0EFE               	movlw	high STR_14
  2228  000572  0100               	movlb	0	; () banked
  2229  000574  6FA3               	movwf	(printf@f+1)& (0+255),b
  2230  000576  C098  F0A4         	movff	_numAA,?_printf+2
  2231  00057A  0100               	movlb	0	; () banked
  2232  00057C  6BA5               	clrf	(?_printf+3)& (0+255),b
  2233  00057E  EC7F  F003         	call	_printf	;wreg free
  2234  000582                     l4153:
  2235  000582  0E07               	movlw	7
  2236  000584  0100               	movlb	0	; () banked
  2237  000586  19BB               	xorwf	_screenMode& (0+255),w,b
  2238  000588  A4D8               	btfss	status,2,c
  2239  00058A  D01B               	goto	l4161
  2240  00058C  D7E0               	goto	l4147
  2241  00058E                     l4155:
  2242                           
  2243                           ; BSR set to: 0
  2244                           ;main.c: 260: lcdInst(0b10000000);;
  2245  00058E  0E80               	movlw	128
  2246  000590  ECD1  F00D         	call	_lcdInst
  2247                           
  2248                           ;main.c: 261: printf("# OF DRAINED    ");
  2249  000594  0E76               	movlw	low STR_17
  2250  000596  0100               	movlb	0	; () banked
  2251  000598  6FA2               	movwf	printf@f& (0+255),b
  2252  00059A  0EFF               	movlw	high STR_17
  2253  00059C  0100               	movlb	0	; () banked
  2254  00059E  6FA3               	movwf	(printf@f+1)& (0+255),b
  2255  0005A0  EC7F  F003         	call	_printf	;wreg free
  2256                           
  2257                           ;main.c: 262: lcdInst(0b11000000);;
  2258  0005A4  0EC0               	movlw	192
  2259  0005A6  ECD1  F00D         	call	_lcdInst
  2260                           
  2261                           ;main.c: 263: printf("BATTERIES: %02d     ", numDrain);
  2262  0005AA  0EC5               	movlw	low STR_14
  2263  0005AC  0100               	movlb	0	; () banked
  2264  0005AE  6FA2               	movwf	printf@f& (0+255),b
  2265  0005B0  0EFE               	movlw	high STR_14
  2266  0005B2  0100               	movlb	0	; () banked
  2267  0005B4  6FA3               	movwf	(printf@f+1)& (0+255),b
  2268  0005B6  C09B  F0A4         	movff	_numDrain,?_printf+2
  2269  0005BA  0100               	movlb	0	; () banked
  2270  0005BC  6BA5               	clrf	(?_printf+3)& (0+255),b
  2271  0005BE  EC7F  F003         	call	_printf	;wreg free
  2272  0005C2                     l4161:
  2273  0005C2  0E08               	movlw	8
  2274  0005C4  0100               	movlb	0	; () banked
  2275  0005C6  19BB               	xorwf	_screenMode& (0+255),w,b
  2276  0005C8  A4D8               	btfss	status,2,c
  2277  0005CA  D066               	goto	l4183
  2278  0005CC  D7E0               	goto	l4155
  2279  0005CE                     l4163:
  2280                           
  2281                           ; BSR set to: 0
  2282                           ;main.c: 267: I2C_Master_Start();
  2283  0005CE  ECEC  F00D         	call	_I2C_Master_Start	;wreg free
  2284                           
  2285                           ;main.c: 268: I2C_Master_Write(0b11010000);
  2286  0005D2  0E00               	movlw	0
  2287  0005D4  6E36               	movwf	I2C_Master_Write@d+1,c
  2288  0005D6  0ED0               	movlw	208
  2289  0005D8  6E35               	movwf	I2C_Master_Write@d,c
  2290  0005DA  ECE3  F00D         	call	_I2C_Master_Write	;wreg free
  2291                           
  2292                           ;main.c: 269: I2C_Master_Write(0x00);
  2293  0005DE  0E00               	movlw	0
  2294  0005E0  6E36               	movwf	I2C_Master_Write@d+1,c
  2295  0005E2  0E00               	movlw	0
  2296  0005E4  6E35               	movwf	I2C_Master_Write@d,c
  2297  0005E6  ECE3  F00D         	call	_I2C_Master_Write	;wreg free
  2298                           
  2299                           ;main.c: 270: I2C_Master_Stop();
  2300  0005EA  ECE8  F00D         	call	_I2C_Master_Stop	;wreg free
  2301                           
  2302                           ;main.c: 272: I2C_Master_Start();
  2303  0005EE  ECEC  F00D         	call	_I2C_Master_Start	;wreg free
  2304                           
  2305                           ;main.c: 273: I2C_Master_Write(0b11010001);
  2306  0005F2  0E00               	movlw	0
  2307  0005F4  6E36               	movwf	I2C_Master_Write@d+1,c
  2308  0005F6  0ED1               	movlw	209
  2309  0005F8  6E35               	movwf	I2C_Master_Write@d,c
  2310  0005FA  ECE3  F00D         	call	_I2C_Master_Write	;wreg free
  2311                           
  2312                           ;main.c: 274: for(unsigned char i=0;i<0x06;i++){
  2313  0005FE  0E00               	movlw	0
  2314  000600  0100               	movlb	0	; () banked
  2315  000602  6FBA               	movwf	main@i_632& (0+255),b
  2316  000604                     l4167:
  2317                           
  2318                           ; BSR set to: 0
  2319  000604  0E05               	movlw	5
  2320  000606  0100               	movlb	0	; () banked
  2321  000608  65BA               	cpfsgt	main@i_632& (0+255),b
  2322  00060A  D001               	goto	l4171
  2323  00060C  D010               	goto	l4177
  2324  00060E                     l4171:
  2325                           
  2326                           ; BSR set to: 0
  2327                           ;main.c: 275: time[i] = I2C_Master_Read(1);
  2328  00060E  0100               	movlb	0	; () banked
  2329  000610  51BA               	movf	main@i_632& (0+255),w,b
  2330  000612  0D01               	mullw	1
  2331  000614  0E80               	movlw	low _time
  2332  000616  24F3               	addwf	prodl,w,c
  2333  000618  6ED9               	movwf	fsr2l,c
  2334  00061A  0E00               	movlw	high _time
  2335  00061C  20F4               	addwfc	prodh,w,c
  2336  00061E  6EDA               	movwf	fsr2h,c
  2337  000620  0E01               	movlw	1
  2338  000622  EC74  F00D         	call	_I2C_Master_Read
  2339  000626  6EDF               	movwf	indf2,c
  2340  000628  0100               	movlb	0	; () banked
  2341  00062A  2BBA               	incf	main@i_632& (0+255),f,b
  2342  00062C  D7EB               	goto	l4167
  2343  00062E                     l4177:
  2344                           
  2345                           ; BSR set to: 0
  2346                           ;main.c: 276: }
  2347                           ;main.c: 277: time[6] = I2C_Master_Read(0);
  2348  00062E  0E00               	movlw	0
  2349  000630  EC74  F00D         	call	_I2C_Master_Read
  2350  000634  0100               	movlb	0	; () banked
  2351  000636  6F86               	movwf	(_time+6)& (0+255),b
  2352                           
  2353                           ;main.c: 278: I2C_Master_Stop();
  2354  000638  ECE8  F00D         	call	_I2C_Master_Stop	;wreg free
  2355                           
  2356                           ;main.c: 279: lcdInst(0b10000000);;
  2357  00063C  0E80               	movlw	128
  2358  00063E  ECD1  F00D         	call	_lcdInst
  2359                           
  2360                           ;main.c: 280: printf("DATE: %02x/%02x/%02x  ", time[6],time[5],time[4]);
  2361  000642  0E81               	movlw	low STR_19
  2362  000644  0100               	movlb	0	; () banked
  2363  000646  6FA2               	movwf	printf@f& (0+255),b
  2364  000648  0EFE               	movlw	high STR_19
  2365  00064A  0100               	movlb	0	; () banked
  2366  00064C  6FA3               	movwf	(printf@f+1)& (0+255),b
  2367  00064E  C086  F0A4         	movff	_time+6,?_printf+2
  2368  000652  0100               	movlb	0	; () banked
  2369  000654  6BA5               	clrf	(?_printf+3)& (0+255),b
  2370  000656  C085  F0A6         	movff	_time+5,?_printf+4
  2371  00065A  0100               	movlb	0	; () banked
  2372  00065C  6BA7               	clrf	(?_printf+5)& (0+255),b
  2373  00065E  C084  F0A8         	movff	_time+4,?_printf+6
  2374  000662  0100               	movlb	0	; () banked
  2375  000664  6BA9               	clrf	(?_printf+7)& (0+255),b
  2376  000666  EC7F  F003         	call	_printf	;wreg free
  2377                           
  2378                           ;main.c: 281: lcdInst(0b11000000);;
  2379  00066A  0EC0               	movlw	192
  2380  00066C  ECD1  F00D         	call	_lcdInst
  2381                           
  2382                           ;main.c: 282: printf("TIME: %02x:%02x:%02x  ", time[2],time[1],time[0]);
  2383  000670  0E98               	movlw	low STR_20
  2384  000672  0100               	movlb	0	; () banked
  2385  000674  6FA2               	movwf	printf@f& (0+255),b
  2386  000676  0EFE               	movlw	high STR_20
  2387  000678  0100               	movlb	0	; () banked
  2388  00067A  6FA3               	movwf	(printf@f+1)& (0+255),b
  2389  00067C  C082  F0A4         	movff	_time+2,?_printf+2
  2390  000680  0100               	movlb	0	; () banked
  2391  000682  6BA5               	clrf	(?_printf+3)& (0+255),b
  2392  000684  C081  F0A6         	movff	_time+1,?_printf+4
  2393  000688  0100               	movlb	0	; () banked
  2394  00068A  6BA7               	clrf	(?_printf+5)& (0+255),b
  2395  00068C  C080  F0A8         	movff	_time,?_printf+6
  2396  000690  0100               	movlb	0	; () banked
  2397  000692  6BA9               	clrf	(?_printf+7)& (0+255),b
  2398  000694  EC7F  F003         	call	_printf	;wreg free
  2399  000698                     l4183:
  2400  000698  0E09               	movlw	9
  2401  00069A  0100               	movlb	0	; () banked
  2402  00069C  19BB               	xorwf	_screenMode& (0+255),w,b
  2403  00069E  A4D8               	btfss	status,2,c
  2404  0006A0  D028               	goto	l4195
  2405  0006A2  D795               	goto	l4163
  2406  0006A4                     l4185:
  2407                           
  2408                           ; BSR set to: 0
  2409                           ;main.c: 285: lcdInst(0b10000000);;
  2410  0006A4  0E80               	movlw	128
  2411  0006A6  ECD1  F00D         	call	_lcdInst
  2412                           
  2413                           ;main.c: 286: printf("EMERGENCY STOP  ");
  2414  0006AA  0EA9               	movlw	low STR_21
  2415  0006AC  0100               	movlb	0	; () banked
  2416  0006AE  6FA2               	movwf	printf@f& (0+255),b
  2417  0006B0  0EFF               	movlw	high STR_21
  2418  0006B2  0100               	movlb	0	; () banked
  2419  0006B4  6FA3               	movwf	(printf@f+1)& (0+255),b
  2420  0006B6  EC7F  F003         	call	_printf	;wreg free
  2421                           
  2422                           ;main.c: 287: lcdInst(0b11000000);;
  2423  0006BA  0EC0               	movlw	192
  2424  0006BC  ECD1  F00D         	call	_lcdInst
  2425                           
  2426                           ;main.c: 288: printf("                ");
  2427  0006C0  0E10               	movlw	low STR_22
  2428  0006C2  0100               	movlb	0	; () banked
  2429  0006C4  6FA2               	movwf	printf@f& (0+255),b
  2430  0006C6  0EFF               	movlw	high STR_22
  2431  0006C8  0100               	movlb	0	; () banked
  2432  0006CA  6FA3               	movwf	(printf@f+1)& (0+255),b
  2433  0006CC  EC7F  F003         	call	_printf	;wreg free
  2434                           
  2435                           ;main.c: 289: _delay((unsigned long)((2000)*(10000000/4000.0)));
  2436  0006D0  0E1A               	movlw	26
  2437  0006D2  0100               	movlb	0	; () banked
  2438  0006D4  6FB5               	movwf	(??_main+1)& (0+255),b
  2439  0006D6  0E5E               	movlw	94
  2440  0006D8  0100               	movlb	0	; () banked
  2441  0006DA  6FB4               	movwf	??_main& (0+255),b
  2442  0006DC  0E6E               	movlw	110
  2443  0006DE                     u4497:
  2444  0006DE  2EE8               	decfsz	wreg,f,c
  2445  0006E0  D7FE               	bra	u4497
  2446  0006E2  2FB4               	decfsz	??_main& (0+255),f,b
  2447  0006E4  D7FC               	bra	u4497
  2448  0006E6  2FB5               	decfsz	(??_main+1)& (0+255),f,b
  2449  0006E8  D7FA               	bra	u4497
  2450  0006EA  F000               	nop	
  2451                           
  2452                           ;main.c: 290: screenMode = 2;
  2453  0006EC  0E02               	movlw	2
  2454  0006EE  0100               	movlb	0	; () banked
  2455  0006F0  6FBB               	movwf	_screenMode& (0+255),b
  2456  0006F2                     l4195:
  2457                           
  2458                           ; BSR set to: 0
  2459  0006F2  0E0A               	movlw	10
  2460  0006F4  0100               	movlb	0	; () banked
  2461  0006F6  19BB               	xorwf	_screenMode& (0+255),w,b
  2462  0006F8  A4D8               	btfss	status,2,c
  2463  0006FA  D51D               	goto	l4033
  2464  0006FC  D7D3               	goto	l4185
  2465  0006FE                     __end_of_main:
  2466                           	opt stack 0
  2467                           tblptru	equ	0xFF8
  2468                           tblptrh	equ	0xFF7
  2469                           tblptrl	equ	0xFF6
  2470                           tablat	equ	0xFF5
  2471                           prodh	equ	0xFF4
  2472                           prodl	equ	0xFF3
  2473                           intcon	equ	0xFF2
  2474                           intcon3	equ	0xFF0
  2475                           postinc0	equ	0xFEE
  2476                           wreg	equ	0xFE8
  2477                           indf2	equ	0xFDF
  2478                           fsr2h	equ	0xFDA
  2479                           fsr2l	equ	0xFD9
  2480                           status	equ	0xFD8
  2481                           
  2482 ;; *************** function _testBatteries *****************
  2483 ;; Defined at:
  2484 ;;		line 389 in file "../main.c"
  2485 ;; Parameters:    Size  Location     Type
  2486 ;;		None
  2487 ;; Auto vars:     Size  Location     Type
  2488 ;;		None
  2489 ;; Return value:  Size  Location     Type
  2490 ;;                  1    wreg      void 
  2491 ;; Registers used:
  2492 ;;		wreg, status,2, status,0
  2493 ;; Tracked objects:
  2494 ;;		On entry : 0/0
  2495 ;;		On exit  : 0/0
  2496 ;;		Unchanged: 0/0
  2497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2498 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2499 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2500 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2501 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2502 ;;Total ram usage:        2 bytes
  2503 ;; Hardware stack levels used:    1
  2504 ;; Hardware stack levels required when called:    5
  2505 ;; This function calls:
  2506 ;;		Nothing
  2507 ;; This function is called by:
  2508 ;;		_main
  2509 ;; This function uses a non-reentrant model
  2510 ;;
  2511                           
  2512                           	psect	text1
  2513  0010D0                     __ptext1:
  2514                           	opt stack 0
  2515  0010D0                     _testBatteries:
  2516                           	opt stack 25
  2517                           
  2518                           ;main.c: 390: stepGear = 1;
  2519                           
  2520                           ; BSR set to: 0
  2521                           ;incstack = 0
  2522  0010D0  0E00               	movlw	0
  2523  0010D2  0100               	movlb	0	; () banked
  2524  0010D4  6F90               	movwf	(_stepGear+1)& (0+255),b
  2525  0010D6  0E01               	movlw	1
  2526  0010D8  6F8F               	movwf	_stepGear& (0+255),b
  2527                           
  2528                           ; BSR set to: 0
  2529                           ;main.c: 391: LATEbits.LE0 = 1;;
  2530  0010DA  808D               	bsf	3981,0,c	;volatile
  2531                           
  2532                           ; BSR set to: 0
  2533                           ;main.c: 393: if (((ADRESH<<8)+ADRESL)>=706){
  2534  0010DC  50C3               	movf	4035,w,c	;volatile
  2535  0010DE  CFC4 F034          	movff	4036,??_testBatteries	;volatile
  2536  0010E2  6A35               	clrf	(??_testBatteries+1)& (0+255),c
  2537  0010E4  C034  F035         	movff	??_testBatteries,??_testBatteries+1
  2538  0010E8  6A34               	clrf	??_testBatteries,c
  2539  0010EA  2634               	addwf	??_testBatteries,f,c
  2540  0010EC  0E00               	movlw	0
  2541  0010EE  2235               	addwfc	??_testBatteries+1,f,c
  2542  0010F0  BE35               	btfsc	??_testBatteries+1,7,c
  2543  0010F2  D014               	goto	l3195
  2544  0010F4  0EC2               	movlw	194
  2545  0010F6  5C34               	subwf	??_testBatteries,w,c
  2546  0010F8  0E02               	movlw	2
  2547  0010FA  5835               	subwfb	??_testBatteries+1,w,c
  2548  0010FC  A0D8               	btfss	status,0,c
  2549  0010FE  D00E               	goto	l3195
  2550                           
  2551                           ; BSR set to: 0
  2552                           ;main.c: 394: LATEbits.LE0 = 0;;
  2553  001100  908D               	bcf	3981,0,c	;volatile
  2554                           
  2555                           ; BSR set to: 0
  2556                           ;main.c: 395: count9V++;
  2557  001102  0100               	movlb	0	; () banked
  2558  001104  2B91               	incf	_count9V& (0+255),f,b
  2559                           
  2560                           ; BSR set to: 0
  2561                           ;main.c: 396: plat1Right = 1;
  2562  001106  0E00               	movlw	0
  2563  001108  0100               	movlb	0	; () banked
  2564  00110A  6F8A               	movwf	(_plat1Right+1)& (0+255),b
  2565  00110C  0E01               	movlw	1
  2566  00110E  6F89               	movwf	_plat1Right& (0+255),b
  2567                           
  2568                           ; BSR set to: 0
  2569                           ;main.c: 397: plat2Left = 1;
  2570  001110  0E00               	movlw	0
  2571  001112  0100               	movlb	0	; () banked
  2572  001114  6F8C               	movwf	(_plat2Left+1)& (0+255),b
  2573  001116  0E01               	movlw	1
  2574  001118  6F8B               	movwf	_plat2Left& (0+255),b
  2575                           
  2576                           ; BSR set to: 0
  2577                           ;main.c: 398: return;
  2578  00111A  0012               	return	
  2579  00111C                     l3195:
  2580                           
  2581                           ; BSR set to: 0
  2582                           ;main.c: 400: else if (((ADRESH<<8)+ADRESL)>=5){
  2583  00111C  50C3               	movf	4035,w,c	;volatile
  2584  00111E  CFC4 F034          	movff	4036,??_testBatteries	;volatile
  2585  001122  6A35               	clrf	(??_testBatteries+1)& (0+255),c
  2586  001124  C034  F035         	movff	??_testBatteries,??_testBatteries+1
  2587  001128  6A34               	clrf	??_testBatteries,c
  2588  00112A  2634               	addwf	??_testBatteries,f,c
  2589  00112C  0E00               	movlw	0
  2590  00112E  2235               	addwfc	??_testBatteries+1,f,c
  2591  001130  BE35               	btfsc	??_testBatteries+1,7,c
  2592  001132  D014               	goto	l333
  2593  001134  5035               	movf	??_testBatteries+1,w,c
  2594  001136  E104               	bnz	u2910
  2595  001138  0E05               	movlw	5
  2596  00113A  5C34               	subwf	??_testBatteries,w,c
  2597  00113C  A0D8               	btfss	status,0,c
  2598  00113E  D00E               	goto	l333
  2599  001140                     u2910:
  2600                           
  2601                           ; BSR set to: 0
  2602                           ;main.c: 401: LATEbits.LE0 = 0;;
  2603  001140  908D               	bcf	3981,0,c	;volatile
  2604                           
  2605                           ; BSR set to: 0
  2606                           ;main.c: 402: countDrain++;
  2607  001142  0100               	movlb	0	; () banked
  2608  001144  2B94               	incf	_countDrain& (0+255),f,b
  2609                           
  2610                           ; BSR set to: 0
  2611                           ;main.c: 403: plat1Left = 1;
  2612  001146  0E00               	movlw	0
  2613  001148  0100               	movlb	0	; () banked
  2614  00114A  6F88               	movwf	(_plat1Left+1)& (0+255),b
  2615  00114C  0E01               	movlw	1
  2616  00114E  6F87               	movwf	_plat1Left& (0+255),b
  2617                           
  2618                           ; BSR set to: 0
  2619                           ;main.c: 404: plat2Right = 1;
  2620  001150  0E00               	movlw	0
  2621  001152  0100               	movlb	0	; () banked
  2622  001154  6F8E               	movwf	(_plat2Right+1)& (0+255),b
  2623  001156  0E01               	movlw	1
  2624  001158  6F8D               	movwf	_plat2Right& (0+255),b
  2625                           
  2626                           ; BSR set to: 0
  2627                           ;main.c: 405: return;
  2628  00115A  0012               	return	
  2629  00115C                     l333:
  2630                           
  2631                           ; BSR set to: 0
  2632                           ;main.c: 406: }
  2633                           ;main.c: 409: LATEbits.LE0 = 0;;
  2634  00115C  908D               	bcf	3981,0,c	;volatile
  2635                           
  2636                           ;main.c: 410: LATEbits.LE1 = 1;;
  2637  00115E  828D               	bsf	3981,1,c	;volatile
  2638                           
  2639                           ; BSR set to: 0
  2640                           ;main.c: 412: if (((ADRESH<<8)+ADRESL)>=706){
  2641  001160  50C3               	movf	4035,w,c	;volatile
  2642  001162  CFC4 F034          	movff	4036,??_testBatteries	;volatile
  2643  001166  6A35               	clrf	(??_testBatteries+1)& (0+255),c
  2644  001168  C034  F035         	movff	??_testBatteries,??_testBatteries+1
  2645  00116C  6A34               	clrf	??_testBatteries,c
  2646  00116E  2634               	addwf	??_testBatteries,f,c
  2647  001170  0E00               	movlw	0
  2648  001172  2235               	addwfc	??_testBatteries+1,f,c
  2649  001174  BE35               	btfsc	??_testBatteries+1,7,c
  2650  001176  D014               	goto	l3221
  2651  001178  0EC2               	movlw	194
  2652  00117A  5C34               	subwf	??_testBatteries,w,c
  2653  00117C  0E02               	movlw	2
  2654  00117E  5835               	subwfb	??_testBatteries+1,w,c
  2655  001180  A0D8               	btfss	status,0,c
  2656  001182  D00E               	goto	l3221
  2657                           
  2658                           ; BSR set to: 0
  2659                           ;main.c: 413: LATEbits.LE1 = 0;;
  2660  001184  928D               	bcf	3981,1,c	;volatile
  2661                           
  2662                           ; BSR set to: 0
  2663                           ;main.c: 414: count9V++;
  2664  001186  0100               	movlb	0	; () banked
  2665  001188  2B91               	incf	_count9V& (0+255),f,b
  2666                           
  2667                           ; BSR set to: 0
  2668                           ;main.c: 415: plat1Right = 1;
  2669  00118A  0E00               	movlw	0
  2670  00118C  0100               	movlb	0	; () banked
  2671  00118E  6F8A               	movwf	(_plat1Right+1)& (0+255),b
  2672  001190  0E01               	movlw	1
  2673  001192  6F89               	movwf	_plat1Right& (0+255),b
  2674                           
  2675                           ; BSR set to: 0
  2676                           ;main.c: 416: plat2Left = 1;
  2677  001194  0E00               	movlw	0
  2678  001196  0100               	movlb	0	; () banked
  2679  001198  6F8C               	movwf	(_plat2Left+1)& (0+255),b
  2680  00119A  0E01               	movlw	1
  2681  00119C  6F8B               	movwf	_plat2Left& (0+255),b
  2682                           
  2683                           ; BSR set to: 0
  2684                           ;main.c: 417: return;
  2685  00119E  0012               	return	
  2686  0011A0                     l3221:
  2687                           
  2688                           ; BSR set to: 0
  2689                           ;main.c: 419: else if (((ADRESH<<8)+ADRESL)>=5){
  2690  0011A0  50C3               	movf	4035,w,c	;volatile
  2691  0011A2  CFC4 F034          	movff	4036,??_testBatteries	;volatile
  2692  0011A6  6A35               	clrf	(??_testBatteries+1)& (0+255),c
  2693  0011A8  C034  F035         	movff	??_testBatteries,??_testBatteries+1
  2694  0011AC  6A34               	clrf	??_testBatteries,c
  2695  0011AE  2634               	addwf	??_testBatteries,f,c
  2696  0011B0  0E00               	movlw	0
  2697  0011B2  2235               	addwfc	??_testBatteries+1,f,c
  2698  0011B4  BE35               	btfsc	??_testBatteries+1,7,c
  2699  0011B6  D014               	goto	l336
  2700  0011B8  5035               	movf	??_testBatteries+1,w,c
  2701  0011BA  E104               	bnz	u2930
  2702  0011BC  0E05               	movlw	5
  2703  0011BE  5C34               	subwf	??_testBatteries,w,c
  2704  0011C0  A0D8               	btfss	status,0,c
  2705  0011C2  D00E               	goto	l336
  2706  0011C4                     u2930:
  2707                           
  2708                           ; BSR set to: 0
  2709                           ;main.c: 420: LATEbits.LE1 = 0;;
  2710  0011C4  928D               	bcf	3981,1,c	;volatile
  2711                           
  2712                           ; BSR set to: 0
  2713                           ;main.c: 421: countDrain++;
  2714  0011C6  0100               	movlb	0	; () banked
  2715  0011C8  2B94               	incf	_countDrain& (0+255),f,b
  2716                           
  2717                           ; BSR set to: 0
  2718                           ;main.c: 422: plat1Left = 1;
  2719  0011CA  0E00               	movlw	0
  2720  0011CC  0100               	movlb	0	; () banked
  2721  0011CE  6F88               	movwf	(_plat1Left+1)& (0+255),b
  2722  0011D0  0E01               	movlw	1
  2723  0011D2  6F87               	movwf	_plat1Left& (0+255),b
  2724                           
  2725                           ; BSR set to: 0
  2726                           ;main.c: 423: plat2Right = 1;
  2727  0011D4  0E00               	movlw	0
  2728  0011D6  0100               	movlb	0	; () banked
  2729  0011D8  6F8E               	movwf	(_plat2Right+1)& (0+255),b
  2730  0011DA  0E01               	movlw	1
  2731  0011DC  6F8D               	movwf	_plat2Right& (0+255),b
  2732                           
  2733                           ; BSR set to: 0
  2734                           ;main.c: 424: return;
  2735  0011DE  0012               	return	
  2736  0011E0                     l336:
  2737                           
  2738                           ; BSR set to: 0
  2739                           ;main.c: 425: }
  2740                           ;main.c: 428: LATEbits.LE1 = 0;;
  2741  0011E0  928D               	bcf	3981,1,c	;volatile
  2742                           
  2743                           ;main.c: 429: LATCbits.LC5 = 1;;
  2744  0011E2  8A8B               	bsf	3979,5,c	;volatile
  2745                           
  2746                           ; BSR set to: 0
  2747                           ;main.c: 431: if (((ADRESH<<8)+ADRESL)>=54){
  2748  0011E4  50C3               	movf	4035,w,c	;volatile
  2749  0011E6  CFC4 F034          	movff	4036,??_testBatteries	;volatile
  2750  0011EA  6A35               	clrf	(??_testBatteries+1)& (0+255),c
  2751  0011EC  C034  F035         	movff	??_testBatteries,??_testBatteries+1
  2752  0011F0  6A34               	clrf	??_testBatteries,c
  2753  0011F2  2634               	addwf	??_testBatteries,f,c
  2754  0011F4  0E00               	movlw	0
  2755  0011F6  2235               	addwfc	??_testBatteries+1,f,c
  2756  0011F8  BE35               	btfsc	??_testBatteries+1,7,c
  2757  0011FA  D014               	goto	l3247
  2758  0011FC  5035               	movf	??_testBatteries+1,w,c
  2759  0011FE  E104               	bnz	u2940
  2760  001200  0E36               	movlw	54
  2761  001202  5C34               	subwf	??_testBatteries,w,c
  2762  001204  A0D8               	btfss	status,0,c
  2763  001206  D00E               	goto	l3247
  2764  001208                     u2940:
  2765                           
  2766                           ; BSR set to: 0
  2767                           ;main.c: 432: LATCbits.LC5 = 0;;
  2768  001208  9A8B               	bcf	3979,5,c	;volatile
  2769                           
  2770                           ; BSR set to: 0
  2771                           ;main.c: 433: countC++;
  2772  00120A  0100               	movlb	0	; () banked
  2773  00120C  2B93               	incf	_countC& (0+255),f,b
  2774                           
  2775                           ; BSR set to: 0
  2776                           ;main.c: 434: plat1Right = 1;
  2777  00120E  0E00               	movlw	0
  2778  001210  0100               	movlb	0	; () banked
  2779  001212  6F8A               	movwf	(_plat1Right+1)& (0+255),b
  2780  001214  0E01               	movlw	1
  2781  001216  6F89               	movwf	_plat1Right& (0+255),b
  2782                           
  2783                           ; BSR set to: 0
  2784                           ;main.c: 435: plat2Left = 1;
  2785  001218  0E00               	movlw	0
  2786  00121A  0100               	movlb	0	; () banked
  2787  00121C  6F8C               	movwf	(_plat2Left+1)& (0+255),b
  2788  00121E  0E01               	movlw	1
  2789  001220  6F8B               	movwf	_plat2Left& (0+255),b
  2790                           
  2791                           ; BSR set to: 0
  2792                           ;main.c: 436: return;
  2793  001222  0012               	return	
  2794  001224                     l3247:
  2795                           
  2796                           ; BSR set to: 0
  2797                           ;main.c: 438: else if (((ADRESH<<8)+ADRESL)>=5){
  2798  001224  50C3               	movf	4035,w,c	;volatile
  2799  001226  CFC4 F034          	movff	4036,??_testBatteries	;volatile
  2800  00122A  6A35               	clrf	(??_testBatteries+1)& (0+255),c
  2801  00122C  C034  F035         	movff	??_testBatteries,??_testBatteries+1
  2802  001230  6A34               	clrf	??_testBatteries,c
  2803  001232  2634               	addwf	??_testBatteries,f,c
  2804  001234  0E00               	movlw	0
  2805  001236  2235               	addwfc	??_testBatteries+1,f,c
  2806  001238  BE35               	btfsc	??_testBatteries+1,7,c
  2807  00123A  D014               	goto	l339
  2808  00123C  5035               	movf	??_testBatteries+1,w,c
  2809  00123E  E104               	bnz	u2950
  2810  001240  0E05               	movlw	5
  2811  001242  5C34               	subwf	??_testBatteries,w,c
  2812  001244  A0D8               	btfss	status,0,c
  2813  001246  D00E               	goto	l339
  2814  001248                     u2950:
  2815                           
  2816                           ; BSR set to: 0
  2817                           ;main.c: 439: LATCbits.LC5 = 0;;
  2818  001248  9A8B               	bcf	3979,5,c	;volatile
  2819                           
  2820                           ; BSR set to: 0
  2821                           ;main.c: 440: countDrain++;
  2822  00124A  0100               	movlb	0	; () banked
  2823  00124C  2B94               	incf	_countDrain& (0+255),f,b
  2824                           
  2825                           ; BSR set to: 0
  2826                           ;main.c: 441: plat1Left = 1;
  2827  00124E  0E00               	movlw	0
  2828  001250  0100               	movlb	0	; () banked
  2829  001252  6F88               	movwf	(_plat1Left+1)& (0+255),b
  2830  001254  0E01               	movlw	1
  2831  001256  6F87               	movwf	_plat1Left& (0+255),b
  2832                           
  2833                           ; BSR set to: 0
  2834                           ;main.c: 442: plat2Right = 1;
  2835  001258  0E00               	movlw	0
  2836  00125A  0100               	movlb	0	; () banked
  2837  00125C  6F8E               	movwf	(_plat2Right+1)& (0+255),b
  2838  00125E  0E01               	movlw	1
  2839  001260  6F8D               	movwf	_plat2Right& (0+255),b
  2840                           
  2841                           ; BSR set to: 0
  2842                           ;main.c: 443: return;
  2843  001262  0012               	return	
  2844  001264                     l339:
  2845                           
  2846                           ; BSR set to: 0
  2847                           ;main.c: 444: }
  2848                           ;main.c: 447: LATCbits.LC5 = 0;;
  2849  001264  9A8B               	bcf	3979,5,c	;volatile
  2850                           
  2851                           ;main.c: 448: LATDbits.LD0 = 1;;
  2852  001266  808C               	bsf	3980,0,c	;volatile
  2853                           
  2854                           ; BSR set to: 0
  2855                           ;main.c: 450: if (((ADRESH<<8)+ADRESL)>=54){
  2856  001268  50C3               	movf	4035,w,c	;volatile
  2857  00126A  CFC4 F034          	movff	4036,??_testBatteries	;volatile
  2858  00126E  6A35               	clrf	(??_testBatteries+1)& (0+255),c
  2859  001270  C034  F035         	movff	??_testBatteries,??_testBatteries+1
  2860  001274  6A34               	clrf	??_testBatteries,c
  2861  001276  2634               	addwf	??_testBatteries,f,c
  2862  001278  0E00               	movlw	0
  2863  00127A  2235               	addwfc	??_testBatteries+1,f,c
  2864  00127C  BE35               	btfsc	??_testBatteries+1,7,c
  2865  00127E  D00F               	goto	l3267
  2866  001280  5035               	movf	??_testBatteries+1,w,c
  2867  001282  E104               	bnz	u2960
  2868  001284  0E36               	movlw	54
  2869  001286  5C34               	subwf	??_testBatteries,w,c
  2870  001288  A0D8               	btfss	status,0,c
  2871  00128A  D009               	goto	l3267
  2872  00128C                     u2960:
  2873                           
  2874                           ; BSR set to: 0
  2875                           ;main.c: 451: LATDbits.LD0 = 0;;
  2876  00128C  908C               	bcf	3980,0,c	;volatile
  2877                           
  2878                           ; BSR set to: 0
  2879                           ;main.c: 452: countAA++;
  2880  00128E  0100               	movlb	0	; () banked
  2881  001290  2B92               	incf	_countAA& (0+255),f,b
  2882                           
  2883                           ; BSR set to: 0
  2884                           ;main.c: 453: plat1Right = 1;
  2885  001292  0E00               	movlw	0
  2886  001294  0100               	movlb	0	; () banked
  2887  001296  6F8A               	movwf	(_plat1Right+1)& (0+255),b
  2888  001298  0E01               	movlw	1
  2889  00129A  6F89               	movwf	_plat1Right& (0+255),b
  2890                           
  2891                           ;main.c: 454: }
  2892  00129C  D01A               	goto	l3275
  2893  00129E                     l3267:
  2894                           
  2895                           ; BSR set to: 0
  2896                           ;main.c: 455: else if (((ADRESH<<8)+ADRESL)>=5){
  2897  00129E  50C3               	movf	4035,w,c	;volatile
  2898  0012A0  CFC4 F034          	movff	4036,??_testBatteries	;volatile
  2899  0012A4  6A35               	clrf	(??_testBatteries+1)& (0+255),c
  2900  0012A6  C034  F035         	movff	??_testBatteries,??_testBatteries+1
  2901  0012AA  6A34               	clrf	??_testBatteries,c
  2902  0012AC  2634               	addwf	??_testBatteries,f,c
  2903  0012AE  0E00               	movlw	0
  2904  0012B0  2235               	addwfc	??_testBatteries+1,f,c
  2905  0012B2  BE35               	btfsc	??_testBatteries+1,7,c
  2906  0012B4  D00E               	goto	l3275
  2907  0012B6  5035               	movf	??_testBatteries+1,w,c
  2908  0012B8  E104               	bnz	u2970
  2909  0012BA  0E05               	movlw	5
  2910  0012BC  5C34               	subwf	??_testBatteries,w,c
  2911  0012BE  A0D8               	btfss	status,0,c
  2912  0012C0  D008               	goto	l3275
  2913  0012C2                     u2970:
  2914                           
  2915                           ; BSR set to: 0
  2916                           ;main.c: 456: LATDbits.LD0 = 0;;
  2917  0012C2  908C               	bcf	3980,0,c	;volatile
  2918                           
  2919                           ; BSR set to: 0
  2920                           ;main.c: 457: countDrain++;
  2921  0012C4  0100               	movlb	0	; () banked
  2922  0012C6  2B94               	incf	_countDrain& (0+255),f,b
  2923                           
  2924                           ; BSR set to: 0
  2925                           ;main.c: 458: plat1Left = 1;
  2926  0012C8  0E00               	movlw	0
  2927  0012CA  0100               	movlb	0	; () banked
  2928  0012CC  6F88               	movwf	(_plat1Left+1)& (0+255),b
  2929  0012CE  0E01               	movlw	1
  2930  0012D0  6F87               	movwf	_plat1Left& (0+255),b
  2931  0012D2                     l3275:
  2932                           
  2933                           ; BSR set to: 0
  2934                           ;main.c: 459: }
  2935                           ;main.c: 461: LATDbits.LD0 = 0;;
  2936  0012D2  908C               	bcf	3980,0,c	;volatile
  2937                           
  2938                           ; BSR set to: 0
  2939                           ;main.c: 462: LATDbits.LD1 = 1;;
  2940  0012D4  828C               	bsf	3980,1,c	;volatile
  2941                           
  2942                           ; BSR set to: 0
  2943                           ;main.c: 464: if (((ADRESH<<8)+ADRESL)>=54){
  2944  0012D6  50C3               	movf	4035,w,c	;volatile
  2945  0012D8  CFC4 F034          	movff	4036,??_testBatteries	;volatile
  2946  0012DC  6A35               	clrf	(??_testBatteries+1)& (0+255),c
  2947  0012DE  C034  F035         	movff	??_testBatteries,??_testBatteries+1
  2948  0012E2  6A34               	clrf	??_testBatteries,c
  2949  0012E4  2634               	addwf	??_testBatteries,f,c
  2950  0012E6  0E00               	movlw	0
  2951  0012E8  2235               	addwfc	??_testBatteries+1,f,c
  2952  0012EA  BE35               	btfsc	??_testBatteries+1,7,c
  2953  0012EC  D00F               	goto	l344
  2954  0012EE  5035               	movf	??_testBatteries+1,w,c
  2955  0012F0  E104               	bnz	u2980
  2956  0012F2  0E36               	movlw	54
  2957  0012F4  5C34               	subwf	??_testBatteries,w,c
  2958  0012F6  A0D8               	btfss	status,0,c
  2959  0012F8  D009               	goto	l344
  2960  0012FA                     u2980:
  2961                           
  2962                           ; BSR set to: 0
  2963                           ;main.c: 465: LATDbits.LD1 = 0;;
  2964  0012FA  928C               	bcf	3980,1,c	;volatile
  2965                           
  2966                           ; BSR set to: 0
  2967                           ;main.c: 466: countAA++;
  2968  0012FC  0100               	movlb	0	; () banked
  2969  0012FE  2B92               	incf	_countAA& (0+255),f,b
  2970                           
  2971                           ; BSR set to: 0
  2972                           ;main.c: 467: plat2Left = 1;
  2973  001300  0E00               	movlw	0
  2974  001302  0100               	movlb	0	; () banked
  2975  001304  6F8C               	movwf	(_plat2Left+1)& (0+255),b
  2976  001306  0E01               	movlw	1
  2977  001308  6F8B               	movwf	_plat2Left& (0+255),b
  2978                           
  2979                           ;main.c: 468: }
  2980  00130A  D008               	goto	l3291
  2981  00130C                     l344:
  2982                           
  2983                           ; BSR set to: 0
  2984                           ;main.c: 470: else{
  2985                           ;main.c: 471: LATDbits.LD1 = 0;;
  2986  00130C  928C               	bcf	3980,1,c	;volatile
  2987                           
  2988                           ; BSR set to: 0
  2989                           ;main.c: 472: countDrain++;
  2990  00130E  0100               	movlb	0	; () banked
  2991  001310  2B94               	incf	_countDrain& (0+255),f,b
  2992                           
  2993                           ; BSR set to: 0
  2994                           ;main.c: 473: plat2Right = 1;
  2995  001312  0E00               	movlw	0
  2996  001314  0100               	movlb	0	; () banked
  2997  001316  6F8E               	movwf	(_plat2Right+1)& (0+255),b
  2998  001318  0E01               	movlw	1
  2999  00131A  6F8D               	movwf	_plat2Right& (0+255),b
  3000  00131C                     l3291:
  3001                           
  3002                           ; BSR set to: 0
  3003                           ;main.c: 474: }
  3004                           ;main.c: 476: LATDbits.LD1 = 0;;
  3005  00131C  928C               	bcf	3980,1,c	;volatile
  3006  00131E  0012               	return	
  3007  001320                     __end_of_testBatteries:
  3008                           	opt stack 0
  3009                           tblptru	equ	0xFF8
  3010                           tblptrh	equ	0xFF7
  3011                           tblptrl	equ	0xFF6
  3012                           tablat	equ	0xFF5
  3013                           prodh	equ	0xFF4
  3014                           prodl	equ	0xFF3
  3015                           intcon	equ	0xFF2
  3016                           intcon3	equ	0xFF0
  3017                           postinc0	equ	0xFEE
  3018                           wreg	equ	0xFE8
  3019                           indf2	equ	0xFDF
  3020                           fsr2h	equ	0xFDA
  3021                           fsr2l	equ	0xFD9
  3022                           status	equ	0xFD8
  3023                           
  3024 ;; *************** function _stopOperation *****************
  3025 ;; Defined at:
  3026 ;;		line 341 in file "../main.c"
  3027 ;; Parameters:    Size  Location     Type
  3028 ;;		None
  3029 ;; Auto vars:     Size  Location     Type
  3030 ;;		None
  3031 ;; Return value:  Size  Location     Type
  3032 ;;                  1    wreg      void 
  3033 ;; Registers used:
  3034 ;;		wreg, status,2, status,0, cstack
  3035 ;; Tracked objects:
  3036 ;;		On entry : 0/0
  3037 ;;		On exit  : 0/0
  3038 ;;		Unchanged: 0/0
  3039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3040 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3041 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3042 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3043 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3044 ;;Total ram usage:        0 bytes
  3045 ;; Hardware stack levels used:    1
  3046 ;; Hardware stack levels required when called:    6
  3047 ;; This function calls:
  3048 ;;		___awdiv
  3049 ;;		___awmod
  3050 ;; This function is called by:
  3051 ;;		_main
  3052 ;; This function uses a non-reentrant model
  3053 ;;
  3054                           
  3055                           	psect	text2
  3056  001320                     __ptext2:
  3057                           	opt stack 0
  3058  001320                     _stopOperation:
  3059                           	opt stack 24
  3060                           
  3061                           ;main.c: 342: T0CONbits.TMR0ON = 0;
  3062                           
  3063                           ; BSR set to: 0
  3064                           ;incstack = 0
  3065  001320  9ED5               	bcf	4053,7,c	;volatile
  3066                           
  3067                           ;main.c: 343: T1CONbits.TMR1ON = 0;
  3068  001322  90CD               	bcf	4045,0,c	;volatile
  3069                           
  3070                           ;main.c: 344: TMR0 = 55770;
  3071  001324  0ED9               	movlw	217
  3072  001326  6ED7               	movwf	4055,c	;volatile
  3073  001328  0EDA               	movlw	218
  3074  00132A  6ED6               	movwf	4054,c	;volatile
  3075                           
  3076                           ;main.c: 345: TMR1 = 58035;
  3077  00132C  0EE2               	movlw	226
  3078  00132E  6ECF               	movwf	4047,c	;volatile
  3079  001330  0EB3               	movlw	179
  3080  001332  6ECE               	movwf	4046,c	;volatile
  3081                           
  3082                           ;main.c: 346: num9V = count9V;
  3083  001334  C091  F097         	movff	_count9V,_num9V
  3084                           
  3085                           ;main.c: 347: numC = countC;
  3086  001338  C093  F09A         	movff	_countC,_numC
  3087                           
  3088                           ;main.c: 348: numAA = countAA;
  3089  00133C  C092  F098         	movff	_countAA,_numAA
  3090                           
  3091                           ;main.c: 349: numDrain = countDrain;
  3092  001340  C094  F09B         	movff	_countDrain,_numDrain
  3093                           
  3094                           ;main.c: 350: count9V = 0;
  3095  001344  0E00               	movlw	0
  3096  001346  0100               	movlb	0	; () banked
  3097  001348  6F91               	movwf	_count9V& (0+255),b
  3098                           
  3099                           ;main.c: 351: countC = 0;
  3100  00134A  0E00               	movlw	0
  3101  00134C  0100               	movlb	0	; () banked
  3102  00134E  6F93               	movwf	_countC& (0+255),b
  3103                           
  3104                           ;main.c: 352: countAA = 0;
  3105  001350  0E00               	movlw	0
  3106  001352  0100               	movlb	0	; () banked
  3107  001354  6F92               	movwf	_countAA& (0+255),b
  3108                           
  3109                           ;main.c: 353: countDrain = 0;
  3110  001356  0E00               	movlw	0
  3111  001358  0100               	movlb	0	; () banked
  3112  00135A  6F94               	movwf	_countDrain& (0+255),b
  3113                           
  3114                           ; BSR set to: 0
  3115                           ;main.c: 354: min = opTimer / 60;
  3116  00135C  C046  F034         	movff	_opTimer,___awdiv@dividend
  3117  001360  6A35               	clrf	___awdiv@dividend+1,c
  3118  001362  0E00               	movlw	0
  3119  001364  6E37               	movwf	___awdiv@divisor+1,c
  3120  001366  0E3C               	movlw	60
  3121  001368  6E36               	movwf	___awdiv@divisor,c
  3122  00136A  ECD6  F00A         	call	___awdiv	;wreg free
  3123  00136E  5034               	movf	?___awdiv,w,c
  3124  001370  0100               	movlb	0	; () banked
  3125  001372  6F96               	movwf	_min& (0+255),b
  3126                           
  3127                           ; BSR set to: 0
  3128                           ;main.c: 355: sec = opTimer % 60;
  3129  001374  C046  F034         	movff	_opTimer,___awmod@dividend
  3130  001378  6A35               	clrf	___awmod@dividend+1,c
  3131  00137A  0E00               	movlw	0
  3132  00137C  6E37               	movwf	___awmod@divisor+1,c
  3133  00137E  0E3C               	movlw	60
  3134  001380  6E36               	movwf	___awmod@divisor,c
  3135  001382  EC9B  F00B         	call	___awmod	;wreg free
  3136  001386  5034               	movf	?___awmod,w,c
  3137  001388  0100               	movlb	0	; () banked
  3138  00138A  6F9C               	movwf	_sec& (0+255),b
  3139                           
  3140                           ;main.c: 356: opTimer = 0;
  3141  00138C  0E00               	movlw	0
  3142  00138E  6E46               	movwf	_opTimer,c
  3143                           
  3144                           ;main.c: 357: solOnTimer = 0;
  3145  001390  0E00               	movlw	0
  3146  001392  6E49               	movwf	_solOnTimer,c
  3147                           
  3148                           ;main.c: 358: doneTimer = 0;
  3149  001394  0E00               	movlw	0
  3150  001396  6E45               	movwf	_doneTimer,c
  3151                           
  3152                           ;main.c: 359: doneSorting = 0;
  3153  001398  0E00               	movlw	0
  3154  00139A  0100               	movlb	0	; () banked
  3155  00139C  6F95               	movwf	_doneSorting& (0+255),b
  3156                           
  3157                           ;main.c: 360: waitMotor = 0;
  3158  00139E  0E00               	movlw	0
  3159  0013A0  0100               	movlb	0	; () banked
  3160  0013A2  6FA1               	movwf	_waitMotor& (0+255),b
  3161                           
  3162                           ;main.c: 361: stepGear = 0;
  3163  0013A4  0E00               	movlw	0
  3164  0013A6  0100               	movlb	0	; () banked
  3165  0013A8  6F90               	movwf	(_stepGear+1)& (0+255),b
  3166  0013AA  0E00               	movlw	0
  3167  0013AC  6F8F               	movwf	_stepGear& (0+255),b
  3168                           
  3169                           ;main.c: 362: plat1Left = 0;
  3170  0013AE  0E00               	movlw	0
  3171  0013B0  0100               	movlb	0	; () banked
  3172  0013B2  6F88               	movwf	(_plat1Left+1)& (0+255),b
  3173  0013B4  0E00               	movlw	0
  3174  0013B6  6F87               	movwf	_plat1Left& (0+255),b
  3175                           
  3176                           ;main.c: 363: plat1Right = 0;
  3177  0013B8  0E00               	movlw	0
  3178  0013BA  0100               	movlb	0	; () banked
  3179  0013BC  6F8A               	movwf	(_plat1Right+1)& (0+255),b
  3180  0013BE  0E00               	movlw	0
  3181  0013C0  6F89               	movwf	_plat1Right& (0+255),b
  3182                           
  3183                           ;main.c: 364: plat2Left = 0;
  3184  0013C2  0E00               	movlw	0
  3185  0013C4  0100               	movlb	0	; () banked
  3186  0013C6  6F8C               	movwf	(_plat2Left+1)& (0+255),b
  3187  0013C8  0E00               	movlw	0
  3188  0013CA  6F8B               	movwf	_plat2Left& (0+255),b
  3189                           
  3190                           ;main.c: 365: plat2Right = 0;
  3191  0013CC  0E00               	movlw	0
  3192  0013CE  0100               	movlb	0	; () banked
  3193  0013D0  6F8E               	movwf	(_plat2Right+1)& (0+255),b
  3194  0013D2  0E00               	movlw	0
  3195  0013D4  6F8D               	movwf	_plat2Right& (0+255),b
  3196                           
  3197                           ;main.c: 366: turn2BackLeft = 0;
  3198  0013D6  0E00               	movlw	0
  3199  0013D8  0100               	movlb	0	; () banked
  3200  0013DA  6F9F               	movwf	_turn2BackLeft& (0+255),b
  3201                           
  3202                           ;main.c: 367: turn1BackLeft = 0;
  3203  0013DC  0E00               	movlw	0
  3204  0013DE  0100               	movlb	0	; () banked
  3205  0013E0  6F9D               	movwf	_turn1BackLeft& (0+255),b
  3206                           
  3207                           ;main.c: 368: turn2BackRight = 0;
  3208  0013E2  0E00               	movlw	0
  3209  0013E4  0100               	movlb	0	; () banked
  3210  0013E6  6FA0               	movwf	_turn2BackRight& (0+255),b
  3211                           
  3212                           ;main.c: 369: turn1BackRight = 0;
  3213  0013E8  0E00               	movlw	0
  3214  0013EA  0100               	movlb	0	; () banked
  3215  0013EC  6F9E               	movwf	_turn1BackRight& (0+255),b
  3216                           
  3217                           ; BSR set to: 0
  3218                           ;main.c: 370: LATEbits.LE0 = 0;;
  3219  0013EE  908D               	bcf	3981,0,c	;volatile
  3220                           
  3221                           ; BSR set to: 0
  3222                           ;main.c: 371: LATEbits.LE1 = 0;;
  3223  0013F0  928D               	bcf	3981,1,c	;volatile
  3224                           
  3225                           ; BSR set to: 0
  3226                           ;main.c: 372: LATCbits.LC5 = 0;;
  3227  0013F2  9A8B               	bcf	3979,5,c	;volatile
  3228                           
  3229                           ; BSR set to: 0
  3230                           ;main.c: 373: LATDbits.LD0 = 0;;
  3231  0013F4  908C               	bcf	3980,0,c	;volatile
  3232                           
  3233                           ; BSR set to: 0
  3234                           ;main.c: 374: LATDbits.LD1 = 0;;
  3235  0013F6  928C               	bcf	3980,1,c	;volatile
  3236                           
  3237                           ; BSR set to: 0
  3238                           ;main.c: 375: LATEbits.LE2 = 0;;
  3239  0013F8  948D               	bcf	3981,2,c	;volatile
  3240                           
  3241                           ; BSR set to: 0
  3242                           ;main.c: 376: LATAbits.LA3 = 0;;
  3243  0013FA  9689               	bcf	3977,3,c	;volatile
  3244                           
  3245                           ; BSR set to: 0
  3246                           ;main.c: 377: LATAbits.LA4 = 0;;
  3247  0013FC  9889               	bcf	3977,4,c	;volatile
  3248                           
  3249                           ; BSR set to: 0
  3250                           ;main.c: 378: LATAbits.LA5 = 0;;
  3251  0013FE  9A89               	bcf	3977,5,c	;volatile
  3252                           
  3253                           ; BSR set to: 0
  3254                           ;main.c: 379: LATBbits.LB0 = 0;;
  3255  001400  908A               	bcf	3978,0,c	;volatile
  3256                           
  3257                           ; BSR set to: 0
  3258                           ;main.c: 380: LATBbits.LB2 = 0;;
  3259  001402  948A               	bcf	3978,2,c	;volatile
  3260                           
  3261                           ; BSR set to: 0
  3262                           ;main.c: 381: LATCbits.LC6 = 0;;
  3263  001404  9C8B               	bcf	3979,6,c	;volatile
  3264                           
  3265                           ; BSR set to: 0
  3266                           ;main.c: 382: LATAbits.LA6 = 0;;
  3267  001406  9C89               	bcf	3977,6,c	;volatile
  3268                           
  3269                           ; BSR set to: 0
  3270                           ;main.c: 383: LATCbits.LC1= 0;;
  3271  001408  928B               	bcf	3979,1,c	;volatile
  3272                           
  3273                           ; BSR set to: 0
  3274                           ;main.c: 384: LATAbits.LA7 = 0;;
  3275  00140A  9E89               	bcf	3977,7,c	;volatile
  3276                           
  3277                           ; BSR set to: 0
  3278                           ;main.c: 385: LATCbits.LC2 = 0;;
  3279  00140C  948B               	bcf	3979,2,c	;volatile
  3280                           
  3281                           ; BSR set to: 0
  3282                           ;main.c: 386: LATCbits.LC0 = 0;;
  3283  00140E  908B               	bcf	3979,0,c	;volatile
  3284                           
  3285                           ; BSR set to: 0
  3286  001410  0012               	return		;funcret
  3287  001412                     __end_of_stopOperation:
  3288                           	opt stack 0
  3289                           tblptru	equ	0xFF8
  3290                           tblptrh	equ	0xFF7
  3291                           tblptrl	equ	0xFF6
  3292                           tablat	equ	0xFF5
  3293                           prodh	equ	0xFF4
  3294                           prodl	equ	0xFF3
  3295                           intcon	equ	0xFF2
  3296                           intcon3	equ	0xFF0
  3297                           postinc0	equ	0xFEE
  3298                           wreg	equ	0xFE8
  3299                           indf2	equ	0xFDF
  3300                           fsr2h	equ	0xFDA
  3301                           fsr2l	equ	0xFD9
  3302                           status	equ	0xFD8
  3303                           
  3304 ;; *************** function ___awmod *****************
  3305 ;; Defined at:
  3306 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  3307 ;; Parameters:    Size  Location     Type
  3308 ;;  dividend        2   51[COMRAM] int 
  3309 ;;  divisor         2   53[COMRAM] int 
  3310 ;; Auto vars:     Size  Location     Type
  3311 ;;  sign            1   56[COMRAM] unsigned char 
  3312 ;;  counter         1   55[COMRAM] unsigned char 
  3313 ;; Return value:  Size  Location     Type
  3314 ;;                  2   51[COMRAM] int 
  3315 ;; Registers used:
  3316 ;;		wreg, status,2, status,0
  3317 ;; Tracked objects:
  3318 ;;		On entry : 0/0
  3319 ;;		On exit  : 0/0
  3320 ;;		Unchanged: 0/0
  3321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3322 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3323 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3325 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3326 ;;Total ram usage:        6 bytes
  3327 ;; Hardware stack levels used:    1
  3328 ;; Hardware stack levels required when called:    5
  3329 ;; This function calls:
  3330 ;;		Nothing
  3331 ;; This function is called by:
  3332 ;;		_stopOperation
  3333 ;; This function uses a non-reentrant model
  3334 ;;
  3335                           
  3336                           	psect	text3
  3337  001736                     __ptext3:
  3338                           	opt stack 0
  3339  001736                     ___awmod:
  3340                           	opt stack 24
  3341                           
  3342                           ; BSR set to: 0
  3343                           ;incstack = 0
  3344  001736  0E00               	movlw	0
  3345  001738  6E39               	movwf	___awmod@sign,c
  3346  00173A  AE35               	btfss	___awmod@dividend+1,7,c
  3347  00173C  D006               	goto	l2721
  3348  00173E  6C34               	negf	___awmod@dividend,c
  3349  001740  1E35               	comf	___awmod@dividend+1,f,c
  3350  001742  B0D8               	btfsc	status,0,c
  3351  001744  2A35               	incf	___awmod@dividend+1,f,c
  3352  001746  0E01               	movlw	1
  3353  001748  6E39               	movwf	___awmod@sign,c
  3354  00174A                     l2721:
  3355  00174A  AE37               	btfss	___awmod@divisor+1,7,c
  3356  00174C  D004               	goto	l2725
  3357  00174E  6C36               	negf	___awmod@divisor,c
  3358  001750  1E37               	comf	___awmod@divisor+1,f,c
  3359  001752  B0D8               	btfsc	status,0,c
  3360  001754  2A37               	incf	___awmod@divisor+1,f,c
  3361  001756                     l2725:
  3362  001756  5036               	movf	___awmod@divisor,w,c
  3363  001758  1037               	iorwf	___awmod@divisor+1,w,c
  3364  00175A  B4D8               	btfsc	status,2,c
  3365  00175C  D018               	goto	l2741
  3366  00175E  0E01               	movlw	1
  3367  001760  6E38               	movwf	___awmod@counter,c
  3368  001762  D004               	goto	l2731
  3369  001764                     l2729:
  3370  001764  90D8               	bcf	status,0,c
  3371  001766  3636               	rlcf	___awmod@divisor,f,c
  3372  001768  3637               	rlcf	___awmod@divisor+1,f,c
  3373  00176A  2A38               	incf	___awmod@counter,f,c
  3374  00176C                     l2731:
  3375  00176C  AE37               	btfss	___awmod@divisor+1,7,c
  3376  00176E  D7FA               	goto	l2729
  3377  001770                     l2733:
  3378  001770  5036               	movf	___awmod@divisor,w,c
  3379  001772  5C34               	subwf	___awmod@dividend,w,c
  3380  001774  5037               	movf	___awmod@divisor+1,w,c
  3381  001776  5835               	subwfb	___awmod@dividend+1,w,c
  3382  001778  A0D8               	btfss	status,0,c
  3383  00177A  D004               	goto	l2737
  3384  00177C  5036               	movf	___awmod@divisor,w,c
  3385  00177E  5E34               	subwf	___awmod@dividend,f,c
  3386  001780  5037               	movf	___awmod@divisor+1,w,c
  3387  001782  5A35               	subwfb	___awmod@dividend+1,f,c
  3388  001784                     l2737:
  3389  001784  90D8               	bcf	status,0,c
  3390  001786  3237               	rrcf	___awmod@divisor+1,f,c
  3391  001788  3236               	rrcf	___awmod@divisor,f,c
  3392  00178A  2E38               	decfsz	___awmod@counter,f,c
  3393  00178C  D7F1               	goto	l2733
  3394  00178E                     l2741:
  3395  00178E  5039               	movf	___awmod@sign,w,c
  3396  001790  B4D8               	btfsc	status,2,c
  3397  001792  D004               	goto	l2745
  3398  001794  6C34               	negf	___awmod@dividend,c
  3399  001796  1E35               	comf	___awmod@dividend+1,f,c
  3400  001798  B0D8               	btfsc	status,0,c
  3401  00179A  2A35               	incf	___awmod@dividend+1,f,c
  3402  00179C                     l2745:
  3403  00179C  C034  F034         	movff	___awmod@dividend,?___awmod
  3404  0017A0  C035  F035         	movff	___awmod@dividend+1,?___awmod+1
  3405  0017A4  0012               	return	
  3406  0017A6                     __end_of___awmod:
  3407                           	opt stack 0
  3408                           tblptru	equ	0xFF8
  3409                           tblptrh	equ	0xFF7
  3410                           tblptrl	equ	0xFF6
  3411                           tablat	equ	0xFF5
  3412                           prodh	equ	0xFF4
  3413                           prodl	equ	0xFF3
  3414                           intcon	equ	0xFF2
  3415                           intcon3	equ	0xFF0
  3416                           postinc0	equ	0xFEE
  3417                           wreg	equ	0xFE8
  3418                           indf2	equ	0xFDF
  3419                           fsr2h	equ	0xFDA
  3420                           fsr2l	equ	0xFD9
  3421                           status	equ	0xFD8
  3422                           
  3423 ;; *************** function ___awdiv *****************
  3424 ;; Defined at:
  3425 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  3426 ;; Parameters:    Size  Location     Type
  3427 ;;  dividend        2   51[COMRAM] int 
  3428 ;;  divisor         2   53[COMRAM] int 
  3429 ;; Auto vars:     Size  Location     Type
  3430 ;;  quotient        2   57[COMRAM] int 
  3431 ;;  sign            1   56[COMRAM] unsigned char 
  3432 ;;  counter         1   55[COMRAM] unsigned char 
  3433 ;; Return value:  Size  Location     Type
  3434 ;;                  2   51[COMRAM] int 
  3435 ;; Registers used:
  3436 ;;		wreg, status,2, status,0
  3437 ;; Tracked objects:
  3438 ;;		On entry : 0/0
  3439 ;;		On exit  : 0/0
  3440 ;;		Unchanged: 0/0
  3441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3442 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3443 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3444 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3445 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3446 ;;Total ram usage:        8 bytes
  3447 ;; Hardware stack levels used:    1
  3448 ;; Hardware stack levels required when called:    5
  3449 ;; This function calls:
  3450 ;;		Nothing
  3451 ;; This function is called by:
  3452 ;;		_stopOperation
  3453 ;; This function uses a non-reentrant model
  3454 ;;
  3455                           
  3456                           	psect	text4
  3457  0015AC                     __ptext4:
  3458                           	opt stack 0
  3459  0015AC                     ___awdiv:
  3460                           	opt stack 24
  3461                           
  3462                           ;incstack = 0
  3463  0015AC  0E00               	movlw	0
  3464  0015AE  6E39               	movwf	___awdiv@sign,c
  3465  0015B0  AE37               	btfss	___awdiv@divisor+1,7,c
  3466  0015B2  D006               	goto	l2677
  3467  0015B4  6C36               	negf	___awdiv@divisor,c
  3468  0015B6  1E37               	comf	___awdiv@divisor+1,f,c
  3469  0015B8  B0D8               	btfsc	status,0,c
  3470  0015BA  2A37               	incf	___awdiv@divisor+1,f,c
  3471  0015BC  0E01               	movlw	1
  3472  0015BE  6E39               	movwf	___awdiv@sign,c
  3473  0015C0                     l2677:
  3474  0015C0  AE35               	btfss	___awdiv@dividend+1,7,c
  3475  0015C2  D006               	goto	l2683
  3476  0015C4  6C34               	negf	___awdiv@dividend,c
  3477  0015C6  1E35               	comf	___awdiv@dividend+1,f,c
  3478  0015C8  B0D8               	btfsc	status,0,c
  3479  0015CA  2A35               	incf	___awdiv@dividend+1,f,c
  3480  0015CC  0E01               	movlw	1
  3481  0015CE  1A39               	xorwf	___awdiv@sign,f,c
  3482  0015D0                     l2683:
  3483  0015D0  0E00               	movlw	0
  3484  0015D2  6E3B               	movwf	___awdiv@quotient+1,c
  3485  0015D4  0E00               	movlw	0
  3486  0015D6  6E3A               	movwf	___awdiv@quotient,c
  3487  0015D8  5036               	movf	___awdiv@divisor,w,c
  3488  0015DA  1037               	iorwf	___awdiv@divisor+1,w,c
  3489  0015DC  B4D8               	btfsc	status,2,c
  3490  0015DE  D01C               	goto	l2705
  3491  0015E0  0E01               	movlw	1
  3492  0015E2  6E38               	movwf	___awdiv@counter,c
  3493  0015E4  D004               	goto	l2691
  3494  0015E6                     l2689:
  3495  0015E6  90D8               	bcf	status,0,c
  3496  0015E8  3636               	rlcf	___awdiv@divisor,f,c
  3497  0015EA  3637               	rlcf	___awdiv@divisor+1,f,c
  3498  0015EC  2A38               	incf	___awdiv@counter,f,c
  3499  0015EE                     l2691:
  3500  0015EE  AE37               	btfss	___awdiv@divisor+1,7,c
  3501  0015F0  D7FA               	goto	l2689
  3502  0015F2                     l2693:
  3503  0015F2  90D8               	bcf	status,0,c
  3504  0015F4  363A               	rlcf	___awdiv@quotient,f,c
  3505  0015F6  363B               	rlcf	___awdiv@quotient+1,f,c
  3506  0015F8  5036               	movf	___awdiv@divisor,w,c
  3507  0015FA  5C34               	subwf	___awdiv@dividend,w,c
  3508  0015FC  5037               	movf	___awdiv@divisor+1,w,c
  3509  0015FE  5835               	subwfb	___awdiv@dividend+1,w,c
  3510  001600  A0D8               	btfss	status,0,c
  3511  001602  D005               	goto	l2701
  3512  001604  5036               	movf	___awdiv@divisor,w,c
  3513  001606  5E34               	subwf	___awdiv@dividend,f,c
  3514  001608  5037               	movf	___awdiv@divisor+1,w,c
  3515  00160A  5A35               	subwfb	___awdiv@dividend+1,f,c
  3516  00160C  803A               	bsf	___awdiv@quotient,0,c
  3517  00160E                     l2701:
  3518  00160E  90D8               	bcf	status,0,c
  3519  001610  3237               	rrcf	___awdiv@divisor+1,f,c
  3520  001612  3236               	rrcf	___awdiv@divisor,f,c
  3521  001614  2E38               	decfsz	___awdiv@counter,f,c
  3522  001616  D7ED               	goto	l2693
  3523  001618                     l2705:
  3524  001618  5039               	movf	___awdiv@sign,w,c
  3525  00161A  B4D8               	btfsc	status,2,c
  3526  00161C  D004               	goto	l2709
  3527  00161E  6C3A               	negf	___awdiv@quotient,c
  3528  001620  1E3B               	comf	___awdiv@quotient+1,f,c
  3529  001622  B0D8               	btfsc	status,0,c
  3530  001624  2A3B               	incf	___awdiv@quotient+1,f,c
  3531  001626                     l2709:
  3532  001626  C03A  F034         	movff	___awdiv@quotient,?___awdiv
  3533  00162A  C03B  F035         	movff	___awdiv@quotient+1,?___awdiv+1
  3534  00162E  0012               	return	
  3535  001630                     __end_of___awdiv:
  3536                           	opt stack 0
  3537                           tblptru	equ	0xFF8
  3538                           tblptrh	equ	0xFF7
  3539                           tblptrl	equ	0xFF6
  3540                           tablat	equ	0xFF5
  3541                           prodh	equ	0xFF4
  3542                           prodl	equ	0xFF3
  3543                           intcon	equ	0xFF2
  3544                           intcon3	equ	0xFF0
  3545                           postinc0	equ	0xFEE
  3546                           wreg	equ	0xFE8
  3547                           indf2	equ	0xFDF
  3548                           fsr2h	equ	0xFDA
  3549                           fsr2l	equ	0xFD9
  3550                           status	equ	0xFD8
  3551                           
  3552 ;; *************** function _readADC *****************
  3553 ;; Defined at:
  3554 ;;		line 333 in file "../main.c"
  3555 ;; Parameters:    Size  Location     Type
  3556 ;;  channel         1    wreg     unsigned char 
  3557 ;; Auto vars:     Size  Location     Type
  3558 ;;  channel         1   51[COMRAM] unsigned char 
  3559 ;; Return value:  Size  Location     Type
  3560 ;;                  1    wreg      void 
  3561 ;; Registers used:
  3562 ;;		wreg, status,2, status,0
  3563 ;; Tracked objects:
  3564 ;;		On entry : 0/0
  3565 ;;		On exit  : 0/0
  3566 ;;		Unchanged: 0/0
  3567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3568 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3569 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3570 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3571 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3572 ;;Total ram usage:        1 bytes
  3573 ;; Hardware stack levels used:    1
  3574 ;; Hardware stack levels required when called:    5
  3575 ;; This function calls:
  3576 ;;		Nothing
  3577 ;; This function is called by:
  3578 ;;		_main
  3579 ;;		_isFluctuate
  3580 ;; This function uses a non-reentrant model
  3581 ;;
  3582                           
  3583                           	psect	text5
  3584  001B70                     __ptext5:
  3585                           	opt stack 0
  3586  001B70                     _readADC:
  3587                           	opt stack 25
  3588                           
  3589                           ;incstack = 0
  3590                           ;readADC@channel stored from wreg
  3591  001B70  6E34               	movwf	readADC@channel,c
  3592                           
  3593                           ;main.c: 335: ADCON0 = channel <<2;
  3594  001B72  4434               	rlncf	readADC@channel,w,c
  3595  001B74  46E8               	rlncf	wreg,f,c
  3596  001B76  0BFC               	andlw	252
  3597  001B78  6EC2               	movwf	4034,c	;volatile
  3598                           
  3599                           ;main.c: 336: ADCON0bits.ADON = 1;
  3600  001B7A  80C2               	bsf	4034,0,c	;volatile
  3601                           
  3602                           ;main.c: 337: ADCON0bits.GO = 1;
  3603  001B7C  82C2               	bsf	4034,1,c	;volatile
  3604  001B7E                     l322:
  3605  001B7E  A2C2               	btfss	4034,1,c	;volatile
  3606  001B80  0012               	return	
  3607  001B82  D7FD               	goto	l322
  3608  001B84                     __end_of_readADC:
  3609                           	opt stack 0
  3610                           tblptru	equ	0xFF8
  3611                           tblptrh	equ	0xFF7
  3612                           tblptrl	equ	0xFF6
  3613                           tablat	equ	0xFF5
  3614                           prodh	equ	0xFF4
  3615                           prodl	equ	0xFF3
  3616                           intcon	equ	0xFF2
  3617                           intcon3	equ	0xFF0
  3618                           postinc0	equ	0xFEE
  3619                           wreg	equ	0xFE8
  3620                           indf2	equ	0xFDF
  3621                           fsr2h	equ	0xFDA
  3622                           fsr2l	equ	0xFD9
  3623                           status	equ	0xFD8
  3624                           
  3625 ;; *************** function _printf *****************
  3626 ;; Defined at:
  3627 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  3628 ;; Parameters:    Size  Location     Type
  3629 ;;  f               2    0[BANK0 ] PTR const unsigned char 
  3630 ;;		 -> STR_24(22), STR_23(17), STR_22(17), STR_21(17), 
  3631 ;;		 -> STR_20(23), STR_19(23), STR_18(21), STR_17(17), 
  3632 ;;		 -> STR_16(21), STR_15(17), STR_14(21), STR_13(17), 
  3633 ;;		 -> STR_12(19), STR_11(17), STR_10(19), STR_9(17), 
  3634 ;;		 -> STR_8(25), STR_7(17), STR_6(17), STR_5(17), 
  3635 ;;		 -> STR_4(18), STR_3(17), STR_2(17), STR_1(17), 
  3636 ;; Auto vars:     Size  Location     Type
  3637 ;;  idx             1    8[BANK0 ] unsigned char 
  3638 ;;  tmpval          4    0        struct .
  3639 ;;  cp              3    0        PTR const unsigned char 
  3640 ;;  width           2   15[BANK0 ] int 
  3641 ;;  val             2   12[BANK0 ] unsigned int 
  3642 ;;  ap              2    9[BANK0 ] PTR void [1]
  3643 ;;		 -> ?i2_printf(2), ?_printf(2), 
  3644 ;;  len             2    0        unsigned int 
  3645 ;;  c               1   17[BANK0 ] char 
  3646 ;;  flag            1   14[BANK0 ] unsigned char 
  3647 ;;  prec            1   11[BANK0 ] char 
  3648 ;; Return value:  Size  Location     Type
  3649 ;;                  2    0[BANK0 ] int 
  3650 ;; Registers used:
  3651 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3652 ;; Tracked objects:
  3653 ;;		On entry : 0/0
  3654 ;;		On exit  : 0/0
  3655 ;;		Unchanged: 0/0
  3656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3657 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3658 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3659 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3660 ;;      Totals:         4      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3661 ;;Total ram usage:       22 bytes
  3662 ;; Hardware stack levels used:    1
  3663 ;; Hardware stack levels required when called:    7
  3664 ;; This function calls:
  3665 ;;		___lwdiv
  3666 ;;		___lwmod
  3667 ;;		___wmul
  3668 ;;		_isdigit
  3669 ;;		_putch
  3670 ;; This function is called by:
  3671 ;;		_main
  3672 ;; This function uses a non-reentrant model
  3673 ;;
  3674                           
  3675                           	psect	text6
  3676  0006FE                     __ptext6:
  3677                           	opt stack 0
  3678  0006FE                     _printf:
  3679                           	opt stack 23
  3680                           
  3681                           ;doprnt.c: 466: va_list ap;
  3682                           ;doprnt.c: 499: signed char c;
  3683                           ;doprnt.c: 501: int width;
  3684                           ;doprnt.c: 506: signed char prec;
  3685                           ;doprnt.c: 508: unsigned char flag;
  3686                           ;doprnt.c: 523: union {
  3687                           ;doprnt.c: 524: unsigned long vd;
  3688                           ;doprnt.c: 525: double integ;
  3689                           ;doprnt.c: 526: } tmpval;
  3690                           ;doprnt.c: 528: unsigned int val;
  3691                           ;doprnt.c: 529: unsigned len;
  3692                           ;doprnt.c: 530: const char * cp;
  3693                           ;doprnt.c: 533: *ap = __va_start();
  3694                           
  3695                           ;incstack = 0
  3696  0006FE  0EA4               	movlw	low (?_printf+2)
  3697  000700  0100               	movlb	0	; () banked
  3698  000702  6FAB               	movwf	printf@ap& (0+255),b
  3699  000704  0E00               	movlw	high (?_printf+2)
  3700  000706  0100               	movlb	0	; () banked
  3701  000708  6FAC               	movwf	(printf@ap+1)& (0+255),b
  3702                           
  3703                           ;doprnt.c: 536: while(c = *f++) {
  3704  00070A  D1B2               	goto	l3969
  3705  00070C                     l3843:
  3706                           
  3707                           ; BSR set to: 0
  3708                           ;doprnt.c: 538: if(c != '%')
  3709  00070C  0E25               	movlw	37
  3710  00070E  0100               	movlb	0	; () banked
  3711  000710  19B3               	xorwf	printf@c& (0+255),w,b
  3712  000712  B4D8               	btfsc	status,2,c
  3713  000714  D005               	goto	l3847
  3714                           
  3715                           ; BSR set to: 0
  3716                           ;doprnt.c: 540: {
  3717                           ;doprnt.c: 541: (putch(c) );
  3718  000716  0100               	movlb	0	; () banked
  3719  000718  51B3               	movf	printf@c& (0+255),w,b
  3720  00071A  ECCB  F00D         	call	_putch
  3721                           
  3722                           ;doprnt.c: 542: continue;
  3723  00071E  D1A8               	goto	l3969
  3724  000720                     l3847:
  3725                           
  3726                           ;doprnt.c: 543: }
  3727                           ;doprnt.c: 546: width = 0;
  3728  000720  0E00               	movlw	0
  3729  000722  0100               	movlb	0	; () banked
  3730  000724  6FB2               	movwf	(printf@width+1)& (0+255),b
  3731  000726  0E00               	movlw	0
  3732  000728  6FB1               	movwf	printf@width& (0+255),b
  3733                           
  3734                           ;doprnt.c: 548: flag = 0;
  3735  00072A  0E00               	movlw	0
  3736  00072C  0100               	movlb	0	; () banked
  3737  00072E  6FB0               	movwf	printf@flag& (0+255),b
  3738                           
  3739                           ; BSR set to: 0
  3740                           ;doprnt.c: 551: switch(*f) {
  3741                           
  3742                           ;doprnt.c: 550: for(;;) {
  3743  000730  D005               	goto	l3853
  3744  000732                     l3849:
  3745                           
  3746                           ;doprnt.c: 580: flag |= 0x04;
  3747  000732  0100               	movlb	0	; () banked
  3748  000734  85B0               	bsf	printf@flag& (0+255),2,b
  3749                           
  3750                           ;doprnt.c: 581: f++;
  3751  000736  0100               	movlb	0	; () banked
  3752  000738  4BA2               	infsnz	printf@f& (0+255),f,b
  3753  00073A  2BA3               	incf	(printf@f+1)& (0+255),f,b
  3754  00073C                     l3853:
  3755  00073C  C0A2  FFF6         	movff	printf@f,tblptrl
  3756  000740  C0A3  FFF7         	movff	printf@f+1,tblptrh
  3757  000744                     	if	0	;tblptru may be non-zero
  3758  000744                     	endif
  3759  000744                     	if	0	;tblptru may be non-zero
  3760  000744                     	endif
  3761  000744  0008               	tblrd		*
  3762  000746  50F5               	movf	tablat,w,c
  3763                           
  3764                           ; Switch size 1, requested type "space"
  3765                           ; Number of cases is 1, Range of values is 48 to 48
  3766                           ; switch strategies available:
  3767                           ; Name         Instructions Cycles
  3768                           ; simple_byte            4     3 (average)
  3769                           ;	Chosen strategy is simple_byte
  3770  000748  0A30               	xorlw	48	; case 48
  3771  00074A  B4D8               	btfsc	status,2,c
  3772  00074C  D7F2               	goto	l3849
  3773                           
  3774                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  3775                           
  3776                           ;doprnt.c: 586: }
  3777                           
  3778                           ;doprnt.c: 585: break;
  3779  00074E  C0A2  FFF6         	movff	printf@f,tblptrl
  3780  000752  C0A3  FFF7         	movff	printf@f+1,tblptrh
  3781  000756                     	if	0	;tblptru may be non-zero
  3782  000756                     	endif
  3783  000756                     	if	0	;tblptru may be non-zero
  3784  000756                     	endif
  3785  000756  0008               	tblrd		*
  3786  000758  50F5               	movf	tablat,w,c
  3787  00075A  EC9A  F00D         	call	_isdigit
  3788  00075E  A0D8               	btfss	status,0,c
  3789  000760  D03A               	goto	l3871
  3790                           
  3791                           ;doprnt.c: 598: width = 0;
  3792  000762  0E00               	movlw	0
  3793  000764  0100               	movlb	0	; () banked
  3794  000766  6FB2               	movwf	(printf@width+1)& (0+255),b
  3795  000768  0E00               	movlw	0
  3796  00076A  6FB1               	movwf	printf@width& (0+255),b
  3797  00076C                     l3859:
  3798                           
  3799                           ;doprnt.c: 600: width *= 10;
  3800  00076C  C0B1  F034         	movff	printf@width,___wmul@multiplier
  3801  000770  C0B2  F035         	movff	printf@width+1,___wmul@multiplier+1
  3802  000774  0E00               	movlw	0
  3803  000776  6E37               	movwf	___wmul@multiplicand+1,c
  3804  000778  0E0A               	movlw	10
  3805  00077A  6E36               	movwf	___wmul@multiplicand,c
  3806  00077C  EC61  F00D         	call	___wmul	;wreg free
  3807  000780  C034  F0B1         	movff	?___wmul,printf@width
  3808  000784  C035  F0B2         	movff	?___wmul+1,printf@width+1
  3809                           
  3810                           ;doprnt.c: 601: width += *f++ - '0';
  3811  000788  0ED0               	movlw	208
  3812  00078A  6E40               	movwf	??_printf& (0+255),c
  3813  00078C  0EFF               	movlw	255
  3814  00078E  6E41               	movwf	(??_printf+1)& (0+255),c
  3815  000790  C0A2  FFF6         	movff	printf@f,tblptrl
  3816  000794  C0A3  FFF7         	movff	printf@f+1,tblptrh
  3817  000798                     	if	0	;tblptru may be non-zero
  3818  000798                     	endif
  3819  000798                     	if	0	;tblptru may be non-zero
  3820  000798                     	endif
  3821  000798  0008               	tblrd		*
  3822  00079A  50F5               	movf	tablat,w,c
  3823  00079C  6E42               	movwf	(??_printf+2)& (0+255),c
  3824  00079E  6A43               	clrf	(??_printf+3)& (0+255),c
  3825  0007A0  5040               	movf	??_printf,w,c
  3826  0007A2  2642               	addwf	??_printf+2,f,c
  3827  0007A4  5041               	movf	??_printf+1,w,c
  3828  0007A6  2243               	addwfc	??_printf+3,f,c
  3829  0007A8  5042               	movf	??_printf+2,w,c
  3830  0007AA  0100               	movlb	0	; () banked
  3831  0007AC  27B1               	addwf	printf@width& (0+255),f,b
  3832  0007AE  5043               	movf	??_printf+3,w,c
  3833  0007B0  0100               	movlb	0	; () banked
  3834  0007B2  23B2               	addwfc	(printf@width+1)& (0+255),f,b
  3835                           
  3836                           ; BSR set to: 0
  3837  0007B4  0100               	movlb	0	; () banked
  3838  0007B6  4BA2               	infsnz	printf@f& (0+255),f,b
  3839  0007B8  2BA3               	incf	(printf@f+1)& (0+255),f,b
  3840                           
  3841                           ; BSR set to: 0
  3842                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  3843  0007BA  C0A2  FFF6         	movff	printf@f,tblptrl
  3844  0007BE  C0A3  FFF7         	movff	printf@f+1,tblptrh
  3845  0007C2                     	if	0	;tblptru may be non-zero
  3846  0007C2                     	endif
  3847  0007C2                     	if	0	;tblptru may be non-zero
  3848  0007C2                     	endif
  3849  0007C2  0008               	tblrd		*
  3850  0007C4  50F5               	movf	tablat,w,c
  3851  0007C6  EC9A  F00D         	call	_isdigit
  3852  0007CA  A0D8               	btfss	status,0,c
  3853  0007CC  D004               	goto	l3871
  3854  0007CE  D7CE               	goto	l3859
  3855  0007D0                     l3867:
  3856                           
  3857                           ;doprnt.c: 721: flag |= 0x80;
  3858  0007D0  0100               	movlb	0	; () banked
  3859  0007D2  8FB0               	bsf	printf@flag& (0+255),7,b
  3860                           
  3861                           ;doprnt.c: 723: break;
  3862  0007D4  D019               	goto	l433
  3863  0007D6                     l3871:
  3864  0007D6  C0A2  FFF6         	movff	printf@f,tblptrl
  3865  0007DA  C0A3  FFF7         	movff	printf@f+1,tblptrh
  3866  0007DE  0100               	movlb	0	; () banked
  3867  0007E0  4BA2               	infsnz	printf@f& (0+255),f,b
  3868  0007E2  2BA3               	incf	(printf@f+1)& (0+255),f,b
  3869  0007E4                     	if	0	;tblptru may be non-zero
  3870  0007E4                     	endif
  3871  0007E4                     	if	0	;tblptru may be non-zero
  3872  0007E4                     	endif
  3873  0007E4  0008               	tblrd		*
  3874  0007E6  CFF5 F0B3          	movff	tablat,printf@c
  3875  0007EA  0100               	movlb	0	; () banked
  3876  0007EC  51B3               	movf	printf@c& (0+255),w,b
  3877                           
  3878                           ; Switch size 1, requested type "space"
  3879                           ; Number of cases is 4, Range of values is 0 to 120
  3880                           ; switch strategies available:
  3881                           ; Name         Instructions Cycles
  3882                           ; simple_byte           13     7 (average)
  3883                           ;	Chosen strategy is simple_byte
  3884  0007EE  0A00               	xorlw	0	; case 0
  3885  0007F0  B4D8               	btfsc	status,2,c
  3886  0007F2  0012               	return	
  3887  0007F4  0A64               	xorlw	100	; case 100
  3888  0007F6  B4D8               	btfsc	status,2,c
  3889  0007F8  D007               	goto	l433
  3890  0007FA  0A0D               	xorlw	13	; case 105
  3891  0007FC  B4D8               	btfsc	status,2,c
  3892  0007FE  D004               	goto	l433
  3893  000800  0A11               	xorlw	17	; case 120
  3894  000802  B4D8               	btfsc	status,2,c
  3895  000804  D7E5               	goto	l3867
  3896  000806  D134               	goto	l3969
  3897  000808                     l433:
  3898                           
  3899                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  3900  000808  0100               	movlb	0	; () banked
  3901  00080A  BFB0               	btfsc	printf@flag& (0+255),7,b
  3902  00080C  D019               	goto	l3883
  3903                           
  3904                           ; BSR set to: 0
  3905                           ;doprnt.c: 1253: {
  3906                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3907  00080E  C0AB  FFD9         	movff	printf@ap,fsr2l
  3908  000812  C0AC  FFDA         	movff	printf@ap+1,fsr2h
  3909  000816  CFDE F0AE          	movff	postinc2,printf@val
  3910  00081A  CFDD F0AF          	movff	postdec2,printf@val+1
  3911                           
  3912                           ; BSR set to: 0
  3913  00081E  0E02               	movlw	2
  3914  000820  0100               	movlb	0	; () banked
  3915  000822  27AB               	addwf	printf@ap& (0+255),f,b
  3916  000824  0E00               	movlw	0
  3917  000826  23AC               	addwfc	(printf@ap+1)& (0+255),f,b
  3918                           
  3919                           ; BSR set to: 0
  3920                           ;doprnt.c: 1261: if((int)val < 0) {
  3921  000828  0100               	movlb	0	; () banked
  3922  00082A  AFAF               	btfss	(printf@val+1)& (0+255),7,b
  3923  00082C  D053               	goto	l3917
  3924                           
  3925                           ; BSR set to: 0
  3926                           ;doprnt.c: 1262: flag |= 0x03;
  3927  00082E  0E03               	movlw	3
  3928  000830  0100               	movlb	0	; () banked
  3929  000832  13B0               	iorwf	printf@flag& (0+255),f,b
  3930                           
  3931                           ; BSR set to: 0
  3932                           ;doprnt.c: 1263: val = -val;
  3933  000834  0100               	movlb	0	; () banked
  3934  000836  6DAE               	negf	printf@val& (0+255),b
  3935  000838  1FAF               	comf	(printf@val+1)& (0+255),f,b
  3936  00083A  B0D8               	btfsc	status,0,c
  3937  00083C  2BAF               	incf	(printf@val+1)& (0+255),f,b
  3938                           
  3939                           ; BSR set to: 0
  3940                           ;doprnt.c: 1264: }
  3941                           ;doprnt.c: 1266: }
  3942  00083E  D04A               	goto	l3917
  3943  000840                     l3883:
  3944                           
  3945                           ; BSR set to: 0
  3946                           ;doprnt.c: 1268: else
  3947                           ;doprnt.c: 1273: {
  3948                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3949  000840  C0AB  FFD9         	movff	printf@ap,fsr2l
  3950  000844  C0AC  FFDA         	movff	printf@ap+1,fsr2h
  3951  000848  CFDE F0AE          	movff	postinc2,printf@val
  3952  00084C  CFDD F0AF          	movff	postdec2,printf@val+1
  3953                           
  3954                           ; BSR set to: 0
  3955  000850  0E02               	movlw	2
  3956  000852  0100               	movlb	0	; () banked
  3957  000854  27AB               	addwf	printf@ap& (0+255),f,b
  3958  000856  0E00               	movlw	0
  3959  000858  23AC               	addwfc	(printf@ap+1)& (0+255),f,b
  3960                           
  3961                           ; BSR set to: 0
  3962                           ;doprnt.c: 1287: }
  3963                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  3964  00085A  D03C               	goto	l3917
  3965  00085C                     l3887:
  3966                           
  3967                           ; BSR set to: 0
  3968                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3969  00085C  0E01               	movlw	1
  3970  00085E  0100               	movlb	0	; () banked
  3971  000860  6FB3               	movwf	printf@c& (0+255),b
  3972  000862                     l3889:
  3973                           
  3974                           ; BSR set to: 0
  3975  000862  0E05               	movlw	5
  3976  000864  0100               	movlb	0	; () banked
  3977  000866  19B3               	xorwf	printf@c& (0+255),w,b
  3978  000868  B4D8               	btfsc	status,2,c
  3979  00086A  D03D               	goto	l3919
  3980                           
  3981                           ; BSR set to: 0
  3982                           ;doprnt.c: 1306: if(val < dpowers[c])
  3983                           
  3984                           ; BSR set to: 0
  3985                           
  3986                           ; BSR set to: 0
  3987  00086C  0100               	movlb	0	; () banked
  3988  00086E  51B3               	movf	printf@c& (0+255),w,b
  3989  000870  0D02               	mullw	2
  3990  000872  0E56               	movlw	low _dpowers
  3991  000874  24F3               	addwf	prodl,w,c
  3992  000876  6EF6               	movwf	tblptrl,c
  3993  000878  0EFE               	movlw	high _dpowers
  3994  00087A  20F4               	addwfc	prodh,w,c
  3995  00087C  6EF7               	movwf	tblptrh,c
  3996  00087E                     	if	0	;There are less than 3 active tblptr bytes
  3997  00087E                     	endif
  3998  00087E  0009               	tblrd		*+
  3999  000880  50F5               	movf	tablat,w,c
  4000  000882  0100               	movlb	0	; () banked
  4001  000884  5DAE               	subwf	printf@val& (0+255),w,b
  4002  000886  0009               	tblrd		*+
  4003  000888  50F5               	movf	tablat,w,c
  4004  00088A  0100               	movlb	0	; () banked
  4005  00088C  59AF               	subwfb	(printf@val+1)& (0+255),w,b
  4006  00088E  A0D8               	btfss	status,0,c
  4007  000890  D02A               	goto	l3919
  4008                           
  4009                           ; BSR set to: 0
  4010                           
  4011                           ; BSR set to: 0
  4012                           
  4013                           ; BSR set to: 0
  4014                           ;doprnt.c: 1307: break;
  4015  000892  0100               	movlb	0	; () banked
  4016  000894  2BB3               	incf	printf@c& (0+255),f,b
  4017  000896  D7E5               	goto	l3889
  4018  000898                     l3901:
  4019                           
  4020                           ; BSR set to: 0
  4021                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  4022  000898  0E01               	movlw	1
  4023  00089A  0100               	movlb	0	; () banked
  4024  00089C  6FB3               	movwf	printf@c& (0+255),b
  4025  00089E                     l3903:
  4026                           
  4027                           ; BSR set to: 0
  4028  00089E  0E04               	movlw	4
  4029  0008A0  0100               	movlb	0	; () banked
  4030  0008A2  19B3               	xorwf	printf@c& (0+255),w,b
  4031  0008A4  B4D8               	btfsc	status,2,c
  4032  0008A6  D01F               	goto	l3919
  4033                           
  4034                           ; BSR set to: 0
  4035                           ;doprnt.c: 1317: if(val < hexpowers[c])
  4036                           
  4037                           ; BSR set to: 0
  4038                           
  4039                           ; BSR set to: 0
  4040  0008A8  0100               	movlb	0	; () banked
  4041  0008AA  51B3               	movf	printf@c& (0+255),w,b
  4042  0008AC  0D02               	mullw	2
  4043  0008AE  0E60               	movlw	low _hexpowers
  4044  0008B0  24F3               	addwf	prodl,w,c
  4045  0008B2  6EF6               	movwf	tblptrl,c
  4046  0008B4  0EFE               	movlw	high _hexpowers
  4047  0008B6  20F4               	addwfc	prodh,w,c
  4048  0008B8  6EF7               	movwf	tblptrh,c
  4049  0008BA                     	if	0	;There are less than 3 active tblptr bytes
  4050  0008BA                     	endif
  4051  0008BA  0009               	tblrd		*+
  4052  0008BC  50F5               	movf	tablat,w,c
  4053  0008BE  0100               	movlb	0	; () banked
  4054  0008C0  5DAE               	subwf	printf@val& (0+255),w,b
  4055  0008C2  0009               	tblrd		*+
  4056  0008C4  50F5               	movf	tablat,w,c
  4057  0008C6  0100               	movlb	0	; () banked
  4058  0008C8  59AF               	subwfb	(printf@val+1)& (0+255),w,b
  4059  0008CA  A0D8               	btfss	status,0,c
  4060  0008CC  D00C               	goto	l3919
  4061                           
  4062                           ; BSR set to: 0
  4063                           
  4064                           ; BSR set to: 0
  4065                           
  4066                           ; BSR set to: 0
  4067                           ;doprnt.c: 1318: break;
  4068  0008CE  0100               	movlb	0	; () banked
  4069  0008D0  2BB3               	incf	printf@c& (0+255),f,b
  4070  0008D2  D7E5               	goto	l3903
  4071  0008D4                     l3917:
  4072                           
  4073                           ; BSR set to: 0
  4074  0008D4  0100               	movlb	0	; () banked
  4075  0008D6  51B0               	movf	printf@flag& (0+255),w,b
  4076  0008D8  0B80               	andlw	128
  4077                           
  4078                           ; Switch size 1, requested type "space"
  4079                           ; Number of cases is 2, Range of values is 0 to 128
  4080                           ; switch strategies available:
  4081                           ; Name         Instructions Cycles
  4082                           ; simple_byte            7     4 (average)
  4083                           ;	Chosen strategy is simple_byte
  4084  0008DA  0A00               	xorlw	0	; case 0
  4085  0008DC  B4D8               	btfsc	status,2,c
  4086  0008DE  D7BE               	goto	l3887
  4087  0008E0  0A80               	xorlw	128	; case 128
  4088  0008E2  B4D8               	btfsc	status,2,c
  4089  0008E4  D7D9               	goto	l3901
  4090  0008E6                     l3919:
  4091                           
  4092                           ; BSR set to: 0
  4093                           ;doprnt.c: 1345: if(width && flag & 0x03)
  4094  0008E6  0100               	movlb	0	; () banked
  4095  0008E8  51B1               	movf	printf@width& (0+255),w,b
  4096  0008EA  0100               	movlb	0	; () banked
  4097  0008EC  11B2               	iorwf	(printf@width+1)& (0+255),w,b
  4098  0008EE  B4D8               	btfsc	status,2,c
  4099  0008F0  D00A               	goto	l3925
  4100                           
  4101                           ; BSR set to: 0
  4102  0008F2  C0B0  F040         	movff	printf@flag,??_printf
  4103  0008F6  0E03               	movlw	3
  4104  0008F8  1640               	andwf	??_printf,f,c
  4105  0008FA  B4D8               	btfsc	status,2,c
  4106  0008FC  D004               	goto	l3925
  4107                           
  4108                           ; BSR set to: 0
  4109                           ;doprnt.c: 1346: width--;
  4110  0008FE  0100               	movlb	0	; () banked
  4111  000900  07B1               	decf	printf@width& (0+255),f,b
  4112  000902  A0D8               	btfss	status,0,c
  4113  000904  07B2               	decf	(printf@width+1)& (0+255),f,b
  4114  000906                     l3925:
  4115                           
  4116                           ; BSR set to: 0
  4117                           ;doprnt.c: 1381: if(width > c)
  4118  000906  0E80               	movlw	128
  4119  000908  0100               	movlb	0	; () banked
  4120  00090A  BFB3               	btfsc	printf@c& (0+255),7,b
  4121  00090C  0E7F               	movlw	127
  4122  00090E  6E40               	movwf	??_printf& (0+255),c
  4123  000910  0100               	movlb	0	; () banked
  4124  000912  51B1               	movf	printf@width& (0+255),w,b
  4125  000914  0100               	movlb	0	; () banked
  4126  000916  5DB3               	subwf	printf@c& (0+255),w,b
  4127  000918  0100               	movlb	0	; () banked
  4128  00091A  51B2               	movf	(printf@width+1)& (0+255),w,b
  4129  00091C  0A80               	xorlw	128
  4130  00091E  5840               	subwfb	??_printf& (0+255),w,c
  4131  000920  B0D8               	btfsc	status,0,c
  4132  000922  D00B               	goto	l3929
  4133                           
  4134                           ; BSR set to: 0
  4135                           ;doprnt.c: 1382: width -= c;
  4136  000924  0100               	movlb	0	; () banked
  4137  000926  51B3               	movf	printf@c& (0+255),w,b
  4138  000928  0100               	movlb	0	; () banked
  4139  00092A  5FB1               	subwf	printf@width& (0+255),f,b
  4140  00092C  0E00               	movlw	0
  4141  00092E  0100               	movlb	0	; () banked
  4142  000930  BFB3               	btfsc	printf@c& (0+255),7,b
  4143  000932  0EFF               	movlw	255
  4144  000934  0100               	movlb	0	; () banked
  4145  000936  5BB2               	subwfb	(printf@width+1)& (0+255),f,b
  4146  000938  D005               	goto	l3931
  4147  00093A                     l3929:
  4148                           
  4149                           ; BSR set to: 0
  4150                           ;doprnt.c: 1383: else
  4151                           ;doprnt.c: 1384: width = 0;
  4152  00093A  0E00               	movlw	0
  4153  00093C  0100               	movlb	0	; () banked
  4154  00093E  6FB2               	movwf	(printf@width+1)& (0+255),b
  4155  000940  0E00               	movlw	0
  4156  000942  6FB1               	movwf	printf@width& (0+255),b
  4157  000944                     l3931:
  4158                           
  4159                           ; BSR set to: 0
  4160                           ;doprnt.c: 1387: if(flag & 0x04) {
  4161  000944  0100               	movlb	0	; () banked
  4162  000946  A5B0               	btfss	printf@flag& (0+255),2,b
  4163  000948  D017               	goto	l3943
  4164                           
  4165                           ; BSR set to: 0
  4166                           ;doprnt.c: 1392: if(flag & 0x03)
  4167  00094A  C0B0  F040         	movff	printf@flag,??_printf
  4168  00094E  0E03               	movlw	3
  4169  000950  1640               	andwf	??_printf,f,c
  4170  000952  B4D8               	btfsc	status,2,c
  4171  000954  D003               	goto	l3937
  4172                           
  4173                           ; BSR set to: 0
  4174                           ;doprnt.c: 1393: (putch('-') );
  4175  000956  0E2D               	movlw	45
  4176  000958  ECCB  F00D         	call	_putch
  4177  00095C                     l3937:
  4178                           
  4179                           ;doprnt.c: 1415: if(width)
  4180  00095C  0100               	movlb	0	; () banked
  4181  00095E  51B1               	movf	printf@width& (0+255),w,b
  4182  000960  0100               	movlb	0	; () banked
  4183  000962  11B2               	iorwf	(printf@width+1)& (0+255),w,b
  4184  000964  B4D8               	btfsc	status,2,c
  4185  000966  D024               	goto	l3953
  4186                           
  4187                           ; BSR set to: 0
  4188                           ;doprnt.c: 1417: (putch('0') );
  4189                           
  4190                           ; BSR set to: 0
  4191                           
  4192                           ;doprnt.c: 1416: do
  4193  000968  0E30               	movlw	48
  4194  00096A  ECCB  F00D         	call	_putch
  4195                           
  4196                           ;doprnt.c: 1418: while(--width);
  4197  00096E  0100               	movlb	0	; () banked
  4198  000970  07B1               	decf	printf@width& (0+255),f,b
  4199  000972  A0D8               	btfss	status,0,c
  4200  000974  07B2               	decf	(printf@width+1)& (0+255),f,b
  4201  000976  D7F2               	goto	l3937
  4202  000978                     l3943:
  4203                           
  4204                           ; BSR set to: 0
  4205                           ;doprnt.c: 1422: {
  4206                           ;doprnt.c: 1424: if(width
  4207                           ;doprnt.c: 1428: )
  4208  000978  0100               	movlb	0	; () banked
  4209  00097A  51B1               	movf	printf@width& (0+255),w,b
  4210  00097C  0100               	movlb	0	; () banked
  4211  00097E  11B2               	iorwf	(printf@width+1)& (0+255),w,b
  4212  000980  B4D8               	btfsc	status,2,c
  4213  000982  D00D               	goto	l3949
  4214  000984                     l3945:
  4215                           
  4216                           ; BSR set to: 0
  4217                           ;doprnt.c: 1430: (putch(' ') );
  4218  000984  0E20               	movlw	32
  4219  000986  ECCB  F00D         	call	_putch
  4220                           
  4221                           ;doprnt.c: 1431: while(--width);
  4222  00098A  0100               	movlb	0	; () banked
  4223  00098C  07B1               	decf	printf@width& (0+255),f,b
  4224  00098E  A0D8               	btfss	status,0,c
  4225  000990  07B2               	decf	(printf@width+1)& (0+255),f,b
  4226  000992  0100               	movlb	0	; () banked
  4227  000994  51B1               	movf	printf@width& (0+255),w,b
  4228  000996  0100               	movlb	0	; () banked
  4229  000998  11B2               	iorwf	(printf@width+1)& (0+255),w,b
  4230  00099A  A4D8               	btfss	status,2,c
  4231  00099C  D7F3               	goto	l3945
  4232  00099E                     l3949:
  4233                           
  4234                           ; BSR set to: 0
  4235                           ;doprnt.c: 1438: if(flag & 0x03)
  4236  00099E  C0B0  F040         	movff	printf@flag,??_printf
  4237  0009A2  0E03               	movlw	3
  4238  0009A4  1640               	andwf	??_printf,f,c
  4239  0009A6  B4D8               	btfsc	status,2,c
  4240  0009A8  D003               	goto	l3953
  4241                           
  4242                           ; BSR set to: 0
  4243                           ;doprnt.c: 1439: (putch('-') );
  4244  0009AA  0E2D               	movlw	45
  4245  0009AC  ECCB  F00D         	call	_putch
  4246  0009B0                     l3953:
  4247                           
  4248                           ;doprnt.c: 1469: }
  4249                           ;doprnt.c: 1472: prec = c;
  4250  0009B0  C0B3  F0AD         	movff	printf@c,printf@prec
  4251                           
  4252                           ;doprnt.c: 1474: while(prec--) {
  4253  0009B4  D057               	goto	l3967
  4254  0009B6                     l3955:
  4255                           
  4256                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4257  0009B6  0100               	movlb	0	; () banked
  4258  0009B8  51AD               	movf	printf@prec& (0+255),w,b
  4259  0009BA  0D02               	mullw	2
  4260  0009BC  0E56               	movlw	low _dpowers
  4261  0009BE  24F3               	addwf	prodl,w,c
  4262  0009C0  6EF6               	movwf	tblptrl,c
  4263  0009C2  0EFE               	movlw	high _dpowers
  4264  0009C4  20F4               	addwfc	prodh,w,c
  4265  0009C6  6EF7               	movwf	tblptrh,c
  4266  0009C8                     	if	0	;There are less than 3 active tblptr bytes
  4267  0009C8                     	endif
  4268  0009C8  0009               	tblrd		*+
  4269  0009CA  CFF5 F036          	movff	tablat,___lwdiv@divisor
  4270  0009CE  000A               	tblrd		*-
  4271  0009D0  CFF5 F037          	movff	tablat,___lwdiv@divisor+1
  4272  0009D4  C0AE  F034         	movff	printf@val,___lwdiv@dividend
  4273  0009D8  C0AF  F035         	movff	printf@val+1,___lwdiv@dividend+1
  4274  0009DC  EC39  F00C         	call	___lwdiv	;wreg free
  4275  0009E0  C034  F03B         	movff	?___lwdiv,___lwmod@dividend
  4276  0009E4  C035  F03C         	movff	?___lwdiv+1,___lwmod@dividend+1
  4277  0009E8  0E00               	movlw	0
  4278  0009EA  6E3E               	movwf	___lwmod@divisor+1,c
  4279  0009EC  0E0A               	movlw	10
  4280  0009EE  6E3D               	movwf	___lwmod@divisor,c
  4281  0009F0  EC1F  F00D         	call	___lwmod	;wreg free
  4282  0009F4  503B               	movf	?___lwmod,w,c
  4283  0009F6  0F30               	addlw	48
  4284  0009F8  0100               	movlb	0	; () banked
  4285  0009FA  6FB3               	movwf	printf@c& (0+255),b
  4286                           
  4287                           ;doprnt.c: 1491: break;
  4288  0009FC  D02F               	goto	l3965
  4289  0009FE                     l3957:
  4290                           
  4291                           ; BSR set to: 0
  4292                           ;doprnt.c: 1499: {
  4293                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  4294  0009FE  C0AE  F034         	movff	printf@val,___lwdiv@dividend
  4295  000A02  C0AF  F035         	movff	printf@val+1,___lwdiv@dividend+1
  4296  000A06  0100               	movlb	0	; () banked
  4297  000A08  51AD               	movf	printf@prec& (0+255),w,b
  4298  000A0A  0D02               	mullw	2
  4299  000A0C  0E60               	movlw	low _hexpowers
  4300  000A0E  24F3               	addwf	prodl,w,c
  4301  000A10  6EF6               	movwf	tblptrl,c
  4302  000A12  0EFE               	movlw	high _hexpowers
  4303  000A14  20F4               	addwfc	prodh,w,c
  4304  000A16  6EF7               	movwf	tblptrh,c
  4305  000A18                     	if	0	;There are less than 3 active tblptr bytes
  4306  000A18                     	endif
  4307  000A18  0009               	tblrd		*+
  4308  000A1A  CFF5 F036          	movff	tablat,___lwdiv@divisor
  4309  000A1E  000A               	tblrd		*-
  4310  000A20  CFF5 F037          	movff	tablat,___lwdiv@divisor+1
  4311  000A24  EC39  F00C         	call	___lwdiv	;wreg free
  4312  000A28  5034               	movf	?___lwdiv,w,c
  4313  000A2A  0B0F               	andlw	15
  4314  000A2C  0100               	movlb	0	; () banked
  4315  000A2E  6FAA               	movwf	printf@idx& (0+255),b
  4316                           
  4317                           ; BSR set to: 0
  4318                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  4319  000A30  0100               	movlb	0	; () banked
  4320  000A32  51AA               	movf	printf@idx& (0+255),w,b
  4321  000A34  0D01               	mullw	1
  4322  000A36  0EFF               	movlw	low STR_25
  4323  000A38  24F3               	addwf	prodl,w,c
  4324  000A3A  6EF6               	movwf	tblptrl,c
  4325  000A3C  0EFE               	movlw	high STR_25
  4326  000A3E  20F4               	addwfc	prodh,w,c
  4327  000A40  6EF7               	movwf	tblptrh,c
  4328  000A42                     	if	0	;There are less than 3 active tblptr bytes
  4329  000A42                     	endif
  4330  000A42  0008               	tblrd		*
  4331  000A44  CFF5 F0B3          	movff	tablat,printf@c
  4332                           
  4333                           ; BSR set to: 0
  4334                           ;doprnt.c: 1523: }
  4335                           
  4336                           ;doprnt.c: 1508: }
  4337                           ;doprnt.c: 1510: break;
  4338  000A48  D009               	goto	l3965
  4339  000A4A                     l3963:
  4340  000A4A  0100               	movlb	0	; () banked
  4341  000A4C  51B0               	movf	printf@flag& (0+255),w,b
  4342  000A4E  0B80               	andlw	128
  4343                           
  4344                           ; Switch size 1, requested type "space"
  4345                           ; Number of cases is 2, Range of values is 0 to 128
  4346                           ; switch strategies available:
  4347                           ; Name         Instructions Cycles
  4348                           ; simple_byte            7     4 (average)
  4349                           ;	Chosen strategy is simple_byte
  4350  000A50  0A00               	xorlw	0	; case 0
  4351  000A52  B4D8               	btfsc	status,2,c
  4352  000A54  D7B0               	goto	l3955
  4353  000A56  0A80               	xorlw	128	; case 128
  4354  000A58  B4D8               	btfsc	status,2,c
  4355  000A5A  D7D1               	goto	l3957
  4356  000A5C                     l3965:
  4357                           
  4358                           ; BSR set to: 0
  4359                           ;doprnt.c: 1524: (putch(c) );
  4360  000A5C  0100               	movlb	0	; () banked
  4361  000A5E  51B3               	movf	printf@c& (0+255),w,b
  4362  000A60  ECCB  F00D         	call	_putch
  4363  000A64                     l3967:
  4364  000A64  0100               	movlb	0	; () banked
  4365  000A66  07AD               	decf	printf@prec& (0+255),f,b
  4366  000A68  0100               	movlb	0	; () banked
  4367  000A6A  29AD               	incf	printf@prec& (0+255),w,b
  4368  000A6C  A4D8               	btfss	status,2,c
  4369  000A6E  D7ED               	goto	l3963
  4370  000A70                     l3969:
  4371  000A70  C0A2  FFF6         	movff	printf@f,tblptrl
  4372  000A74  C0A3  FFF7         	movff	printf@f+1,tblptrh
  4373  000A78  0100               	movlb	0	; () banked
  4374  000A7A  4BA2               	infsnz	printf@f& (0+255),f,b
  4375  000A7C  2BA3               	incf	(printf@f+1)& (0+255),f,b
  4376  000A7E                     	if	0	;tblptru may be non-zero
  4377  000A7E                     	endif
  4378  000A7E                     	if	0	;tblptru may be non-zero
  4379  000A7E                     	endif
  4380  000A7E  0008               	tblrd		*
  4381  000A80  CFF5 F0B3          	movff	tablat,printf@c
  4382  000A84  0100               	movlb	0	; () banked
  4383  000A86  51B3               	movf	printf@c& (0+255),w,b
  4384  000A88  B4D8               	btfsc	status,2,c
  4385  000A8A  0012               	return	
  4386  000A8C  D63F               	goto	l3843
  4387  000A8E                     __end_of_printf:
  4388                           	opt stack 0
  4389                           tblptru	equ	0xFF8
  4390                           tblptrh	equ	0xFF7
  4391                           tblptrl	equ	0xFF6
  4392                           tablat	equ	0xFF5
  4393                           prodh	equ	0xFF4
  4394                           prodl	equ	0xFF3
  4395                           intcon	equ	0xFF2
  4396                           intcon3	equ	0xFF0
  4397                           postinc0	equ	0xFEE
  4398                           wreg	equ	0xFE8
  4399                           indf2	equ	0xFDF
  4400                           postinc2	equ	0xFDE
  4401                           postdec2	equ	0xFDD
  4402                           fsr2h	equ	0xFDA
  4403                           fsr2l	equ	0xFD9
  4404                           status	equ	0xFD8
  4405                           
  4406 ;; *************** function _putch *****************
  4407 ;; Defined at:
  4408 ;;		line 23 in file "../lcd.c"
  4409 ;; Parameters:    Size  Location     Type
  4410 ;;  data            1    wreg     unsigned char 
  4411 ;; Auto vars:     Size  Location     Type
  4412 ;;  data            1   53[COMRAM] unsigned char 
  4413 ;; Return value:  Size  Location     Type
  4414 ;;                  1    wreg      void 
  4415 ;; Registers used:
  4416 ;;		wreg, status,2, status,0, cstack
  4417 ;; Tracked objects:
  4418 ;;		On entry : 0/0
  4419 ;;		On exit  : 0/0
  4420 ;;		Unchanged: 0/0
  4421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4423 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4424 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4425 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4426 ;;Total ram usage:        1 bytes
  4427 ;; Hardware stack levels used:    1
  4428 ;; Hardware stack levels required when called:    6
  4429 ;; This function calls:
  4430 ;;		_lcdNibble
  4431 ;; This function is called by:
  4432 ;;		_printf
  4433 ;; This function uses a non-reentrant model
  4434 ;;
  4435                           
  4436                           	psect	text7
  4437  001B96                     __ptext7:
  4438                           	opt stack 0
  4439  001B96                     _putch:
  4440                           	opt stack 23
  4441                           
  4442                           ;incstack = 0
  4443                           ;putch@data stored from wreg
  4444  001B96  6E36               	movwf	putch@data,c
  4445                           
  4446                           ;lcd.c: 24: LATDbits.LATD2 = 1;
  4447  001B98  848C               	bsf	3980,2,c	;volatile
  4448                           
  4449                           ;lcd.c: 25: lcdNibble(data);
  4450  001B9A  5036               	movf	putch@data,w,c
  4451  001B9C  EC8B  F00C         	call	_lcdNibble
  4452  001BA0  0012               	return		;funcret
  4453  001BA2                     __end_of_putch:
  4454                           	opt stack 0
  4455                           tblptru	equ	0xFF8
  4456                           tblptrh	equ	0xFF7
  4457                           tblptrl	equ	0xFF6
  4458                           tablat	equ	0xFF5
  4459                           prodh	equ	0xFF4
  4460                           prodl	equ	0xFF3
  4461                           intcon	equ	0xFF2
  4462                           intcon3	equ	0xFF0
  4463                           postinc0	equ	0xFEE
  4464                           wreg	equ	0xFE8
  4465                           indf2	equ	0xFDF
  4466                           postinc2	equ	0xFDE
  4467                           postdec2	equ	0xFDD
  4468                           fsr2h	equ	0xFDA
  4469                           fsr2l	equ	0xFD9
  4470                           status	equ	0xFD8
  4471                           
  4472 ;; *************** function _isdigit *****************
  4473 ;; Defined at:
  4474 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  4475 ;; Parameters:    Size  Location     Type
  4476 ;;  c               1    wreg     unsigned char 
  4477 ;; Auto vars:     Size  Location     Type
  4478 ;;  c               1   53[COMRAM] unsigned char 
  4479 ;; Return value:  Size  Location     Type
  4480 ;;		None               void
  4481 ;; Registers used:
  4482 ;;		wreg, status,2, status,0
  4483 ;; Tracked objects:
  4484 ;;		On entry : 0/0
  4485 ;;		On exit  : 0/0
  4486 ;;		Unchanged: 0/0
  4487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4489 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4490 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4491 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4492 ;;Total ram usage:        3 bytes
  4493 ;; Hardware stack levels used:    1
  4494 ;; Hardware stack levels required when called:    5
  4495 ;; This function calls:
  4496 ;;		Nothing
  4497 ;; This function is called by:
  4498 ;;		_printf
  4499 ;; This function uses a non-reentrant model
  4500 ;;
  4501                           
  4502                           	psect	text8
  4503  001B34                     __ptext8:
  4504                           	opt stack 0
  4505  001B34                     _isdigit:
  4506                           	opt stack 24
  4507                           
  4508                           ;incstack = 0
  4509                           ;isdigit@c stored from wreg
  4510  001B34  6E36               	movwf	isdigit@c,c
  4511  001B36  0E00               	movlw	0
  4512  001B38  6E35               	movwf	_isdigit$931,c
  4513  001B3A  0E3A               	movlw	58
  4514  001B3C  6036               	cpfslt	isdigit@c,c
  4515  001B3E  D005               	goto	l2659
  4516  001B40  0E2F               	movlw	47
  4517  001B42  6436               	cpfsgt	isdigit@c,c
  4518  001B44  D002               	goto	l2659
  4519  001B46  0E01               	movlw	1
  4520  001B48  6E35               	movwf	_isdigit$931,c
  4521  001B4A                     l2659:
  4522  001B4A  C035  F034         	movff	_isdigit$931,??_isdigit
  4523  001B4E  3034               	rrcf	??_isdigit,w,c
  4524  001B50  0012               	return	
  4525  001B52                     __end_of_isdigit:
  4526                           	opt stack 0
  4527                           tblptru	equ	0xFF8
  4528                           tblptrh	equ	0xFF7
  4529                           tblptrl	equ	0xFF6
  4530                           tablat	equ	0xFF5
  4531                           prodh	equ	0xFF4
  4532                           prodl	equ	0xFF3
  4533                           intcon	equ	0xFF2
  4534                           intcon3	equ	0xFF0
  4535                           postinc0	equ	0xFEE
  4536                           wreg	equ	0xFE8
  4537                           indf2	equ	0xFDF
  4538                           postinc2	equ	0xFDE
  4539                           postdec2	equ	0xFDD
  4540                           fsr2h	equ	0xFDA
  4541                           fsr2l	equ	0xFD9
  4542                           status	equ	0xFD8
  4543                           
  4544 ;; *************** function ___wmul *****************
  4545 ;; Defined at:
  4546 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  4547 ;; Parameters:    Size  Location     Type
  4548 ;;  multiplier      2   51[COMRAM] unsigned int 
  4549 ;;  multiplicand    2   53[COMRAM] unsigned int 
  4550 ;; Auto vars:     Size  Location     Type
  4551 ;;  product         2   55[COMRAM] unsigned int 
  4552 ;; Return value:  Size  Location     Type
  4553 ;;                  2   51[COMRAM] unsigned int 
  4554 ;; Registers used:
  4555 ;;		wreg, status,2, status,0, prodl, prodh
  4556 ;; Tracked objects:
  4557 ;;		On entry : 0/0
  4558 ;;		On exit  : 0/0
  4559 ;;		Unchanged: 0/0
  4560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4561 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4562 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4563 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4564 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4565 ;;Total ram usage:        6 bytes
  4566 ;; Hardware stack levels used:    1
  4567 ;; Hardware stack levels required when called:    5
  4568 ;; This function calls:
  4569 ;;		Nothing
  4570 ;; This function is called by:
  4571 ;;		_printf
  4572 ;; This function uses a non-reentrant model
  4573 ;;
  4574                           
  4575                           	psect	text9
  4576  001AC2                     __ptext9:
  4577                           	opt stack 0
  4578  001AC2                     ___wmul:
  4579                           	opt stack 24
  4580                           
  4581                           ;incstack = 0
  4582  001AC2  5034               	movf	___wmul@multiplier,w,c
  4583  001AC4  0236               	mulwf	___wmul@multiplicand,c
  4584  001AC6  CFF3 F038          	movff	prodl,___wmul@product
  4585  001ACA  CFF4 F039          	movff	prodh,___wmul@product+1
  4586  001ACE  5034               	movf	___wmul@multiplier,w,c
  4587  001AD0  0237               	mulwf	___wmul@multiplicand+1,c
  4588  001AD2  50F3               	movf	prodl,w,c
  4589  001AD4  2639               	addwf	___wmul@product+1,f,c
  4590  001AD6  5035               	movf	___wmul@multiplier+1,w,c
  4591  001AD8  0236               	mulwf	___wmul@multiplicand,c
  4592  001ADA  50F3               	movf	prodl,w,c
  4593  001ADC  2639               	addwf	___wmul@product+1,f,c
  4594  001ADE  C038  F034         	movff	___wmul@product,?___wmul
  4595  001AE2  C039  F035         	movff	___wmul@product+1,?___wmul+1
  4596  001AE6  0012               	return	
  4597  001AE8                     __end_of___wmul:
  4598                           	opt stack 0
  4599                           tblptru	equ	0xFF8
  4600                           tblptrh	equ	0xFF7
  4601                           tblptrl	equ	0xFF6
  4602                           tablat	equ	0xFF5
  4603                           prodh	equ	0xFF4
  4604                           prodl	equ	0xFF3
  4605                           intcon	equ	0xFF2
  4606                           intcon3	equ	0xFF0
  4607                           postinc0	equ	0xFEE
  4608                           wreg	equ	0xFE8
  4609                           indf2	equ	0xFDF
  4610                           postinc2	equ	0xFDE
  4611                           postdec2	equ	0xFDD
  4612                           fsr2h	equ	0xFDA
  4613                           fsr2l	equ	0xFD9
  4614                           status	equ	0xFD8
  4615                           
  4616 ;; *************** function ___lwmod *****************
  4617 ;; Defined at:
  4618 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  4619 ;; Parameters:    Size  Location     Type
  4620 ;;  dividend        2   58[COMRAM] unsigned int 
  4621 ;;  divisor         2   60[COMRAM] unsigned int 
  4622 ;; Auto vars:     Size  Location     Type
  4623 ;;  counter         1   62[COMRAM] unsigned char 
  4624 ;; Return value:  Size  Location     Type
  4625 ;;                  2   58[COMRAM] unsigned int 
  4626 ;; Registers used:
  4627 ;;		wreg, status,2, status,0
  4628 ;; Tracked objects:
  4629 ;;		On entry : 0/0
  4630 ;;		On exit  : 0/0
  4631 ;;		Unchanged: 0/0
  4632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4633 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4634 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4635 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4636 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4637 ;;Total ram usage:        5 bytes
  4638 ;; Hardware stack levels used:    1
  4639 ;; Hardware stack levels required when called:    5
  4640 ;; This function calls:
  4641 ;;		Nothing
  4642 ;; This function is called by:
  4643 ;;		_printf
  4644 ;; This function uses a non-reentrant model
  4645 ;;
  4646                           
  4647                           	psect	text10
  4648  001A3E                     __ptext10:
  4649                           	opt stack 0
  4650  001A3E                     ___lwmod:
  4651                           	opt stack 24
  4652                           
  4653                           ;incstack = 0
  4654  001A3E  503D               	movf	___lwmod@divisor,w,c
  4655  001A40  103E               	iorwf	___lwmod@divisor+1,w,c
  4656  001A42  B4D8               	btfsc	status,2,c
  4657  001A44  D018               	goto	l888
  4658  001A46  0E01               	movlw	1
  4659  001A48  6E3F               	movwf	___lwmod@counter,c
  4660  001A4A  D004               	goto	l2799
  4661  001A4C                     l2797:
  4662  001A4C  90D8               	bcf	status,0,c
  4663  001A4E  363D               	rlcf	___lwmod@divisor,f,c
  4664  001A50  363E               	rlcf	___lwmod@divisor+1,f,c
  4665  001A52  2A3F               	incf	___lwmod@counter,f,c
  4666  001A54                     l2799:
  4667  001A54  AE3E               	btfss	___lwmod@divisor+1,7,c
  4668  001A56  D7FA               	goto	l2797
  4669  001A58                     l2801:
  4670  001A58  503D               	movf	___lwmod@divisor,w,c
  4671  001A5A  5C3B               	subwf	___lwmod@dividend,w,c
  4672  001A5C  503E               	movf	___lwmod@divisor+1,w,c
  4673  001A5E  583C               	subwfb	___lwmod@dividend+1,w,c
  4674  001A60  A0D8               	btfss	status,0,c
  4675  001A62  D004               	goto	l2805
  4676  001A64  503D               	movf	___lwmod@divisor,w,c
  4677  001A66  5E3B               	subwf	___lwmod@dividend,f,c
  4678  001A68  503E               	movf	___lwmod@divisor+1,w,c
  4679  001A6A  5A3C               	subwfb	___lwmod@dividend+1,f,c
  4680  001A6C                     l2805:
  4681  001A6C  90D8               	bcf	status,0,c
  4682  001A6E  323E               	rrcf	___lwmod@divisor+1,f,c
  4683  001A70  323D               	rrcf	___lwmod@divisor,f,c
  4684  001A72  2E3F               	decfsz	___lwmod@counter,f,c
  4685  001A74  D7F1               	goto	l2801
  4686  001A76                     l888:
  4687  001A76  C03B  F03B         	movff	___lwmod@dividend,?___lwmod
  4688  001A7A  C03C  F03C         	movff	___lwmod@dividend+1,?___lwmod+1
  4689  001A7E  0012               	return		;funcret
  4690  001A80                     __end_of___lwmod:
  4691                           	opt stack 0
  4692                           tblptru	equ	0xFF8
  4693                           tblptrh	equ	0xFF7
  4694                           tblptrl	equ	0xFF6
  4695                           tablat	equ	0xFF5
  4696                           prodh	equ	0xFF4
  4697                           prodl	equ	0xFF3
  4698                           intcon	equ	0xFF2
  4699                           intcon3	equ	0xFF0
  4700                           postinc0	equ	0xFEE
  4701                           wreg	equ	0xFE8
  4702                           indf2	equ	0xFDF
  4703                           postinc2	equ	0xFDE
  4704                           postdec2	equ	0xFDD
  4705                           fsr2h	equ	0xFDA
  4706                           fsr2l	equ	0xFD9
  4707                           status	equ	0xFD8
  4708                           
  4709 ;; *************** function ___lwdiv *****************
  4710 ;; Defined at:
  4711 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  4712 ;; Parameters:    Size  Location     Type
  4713 ;;  dividend        2   51[COMRAM] unsigned int 
  4714 ;;  divisor         2   53[COMRAM] unsigned int 
  4715 ;; Auto vars:     Size  Location     Type
  4716 ;;  quotient        2   55[COMRAM] unsigned int 
  4717 ;;  counter         1   57[COMRAM] unsigned char 
  4718 ;; Return value:  Size  Location     Type
  4719 ;;                  2   51[COMRAM] unsigned int 
  4720 ;; Registers used:
  4721 ;;		wreg, status,2, status,0
  4722 ;; Tracked objects:
  4723 ;;		On entry : 0/0
  4724 ;;		On exit  : 0/0
  4725 ;;		Unchanged: 0/0
  4726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4727 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4728 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4729 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4730 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4731 ;;Total ram usage:        7 bytes
  4732 ;; Hardware stack levels used:    1
  4733 ;; Hardware stack levels required when called:    5
  4734 ;; This function calls:
  4735 ;;		Nothing
  4736 ;; This function is called by:
  4737 ;;		_printf
  4738 ;; This function uses a non-reentrant model
  4739 ;;
  4740                           
  4741                           	psect	text11
  4742  001872                     __ptext11:
  4743                           	opt stack 0
  4744  001872                     ___lwdiv:
  4745                           	opt stack 24
  4746                           
  4747                           ;incstack = 0
  4748  001872  0E00               	movlw	0
  4749  001874  6E39               	movwf	___lwdiv@quotient+1,c
  4750  001876  0E00               	movlw	0
  4751  001878  6E38               	movwf	___lwdiv@quotient,c
  4752  00187A  5036               	movf	___lwdiv@divisor,w,c
  4753  00187C  1037               	iorwf	___lwdiv@divisor+1,w,c
  4754  00187E  B4D8               	btfsc	status,2,c
  4755  001880  D01C               	goto	l878
  4756  001882  0E01               	movlw	1
  4757  001884  6E3A               	movwf	___lwdiv@counter,c
  4758  001886  D004               	goto	l2779
  4759  001888                     l2777:
  4760  001888  90D8               	bcf	status,0,c
  4761  00188A  3636               	rlcf	___lwdiv@divisor,f,c
  4762  00188C  3637               	rlcf	___lwdiv@divisor+1,f,c
  4763  00188E  2A3A               	incf	___lwdiv@counter,f,c
  4764  001890                     l2779:
  4765  001890  AE37               	btfss	___lwdiv@divisor+1,7,c
  4766  001892  D7FA               	goto	l2777
  4767  001894                     l2781:
  4768  001894  90D8               	bcf	status,0,c
  4769  001896  3638               	rlcf	___lwdiv@quotient,f,c
  4770  001898  3639               	rlcf	___lwdiv@quotient+1,f,c
  4771  00189A  5036               	movf	___lwdiv@divisor,w,c
  4772  00189C  5C34               	subwf	___lwdiv@dividend,w,c
  4773  00189E  5037               	movf	___lwdiv@divisor+1,w,c
  4774  0018A0  5835               	subwfb	___lwdiv@dividend+1,w,c
  4775  0018A2  A0D8               	btfss	status,0,c
  4776  0018A4  D005               	goto	l2789
  4777  0018A6  5036               	movf	___lwdiv@divisor,w,c
  4778  0018A8  5E34               	subwf	___lwdiv@dividend,f,c
  4779  0018AA  5037               	movf	___lwdiv@divisor+1,w,c
  4780  0018AC  5A35               	subwfb	___lwdiv@dividend+1,f,c
  4781  0018AE  8038               	bsf	___lwdiv@quotient,0,c
  4782  0018B0                     l2789:
  4783  0018B0  90D8               	bcf	status,0,c
  4784  0018B2  3237               	rrcf	___lwdiv@divisor+1,f,c
  4785  0018B4  3236               	rrcf	___lwdiv@divisor,f,c
  4786  0018B6  2E3A               	decfsz	___lwdiv@counter,f,c
  4787  0018B8  D7ED               	goto	l2781
  4788  0018BA                     l878:
  4789  0018BA  C038  F034         	movff	___lwdiv@quotient,?___lwdiv
  4790  0018BE  C039  F035         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4791  0018C2  0012               	return		;funcret
  4792  0018C4                     __end_of___lwdiv:
  4793                           	opt stack 0
  4794                           tblptru	equ	0xFF8
  4795                           tblptrh	equ	0xFF7
  4796                           tblptrl	equ	0xFF6
  4797                           tablat	equ	0xFF5
  4798                           prodh	equ	0xFF4
  4799                           prodl	equ	0xFF3
  4800                           intcon	equ	0xFF2
  4801                           intcon3	equ	0xFF0
  4802                           postinc0	equ	0xFEE
  4803                           wreg	equ	0xFE8
  4804                           indf2	equ	0xFDF
  4805                           postinc2	equ	0xFDE
  4806                           postdec2	equ	0xFDD
  4807                           fsr2h	equ	0xFDA
  4808                           fsr2l	equ	0xFD9
  4809                           status	equ	0xFD8
  4810                           
  4811 ;; *************** function _initLCD *****************
  4812 ;; Defined at:
  4813 ;;		line 7 in file "../lcd.c"
  4814 ;; Parameters:    Size  Location     Type
  4815 ;;		None
  4816 ;; Auto vars:     Size  Location     Type
  4817 ;;		None
  4818 ;; Return value:  Size  Location     Type
  4819 ;;                  1    wreg      void 
  4820 ;; Registers used:
  4821 ;;		wreg, status,2, status,0, cstack
  4822 ;; Tracked objects:
  4823 ;;		On entry : 0/0
  4824 ;;		On exit  : 0/0
  4825 ;;		Unchanged: 0/0
  4826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4827 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4828 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4829 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4830 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4831 ;;Total ram usage:        1 bytes
  4832 ;; Hardware stack levels used:    1
  4833 ;; Hardware stack levels required when called:    7
  4834 ;; This function calls:
  4835 ;;		_lcdInst
  4836 ;; This function is called by:
  4837 ;;		_main
  4838 ;; This function uses a non-reentrant model
  4839 ;;
  4840                           
  4841                           	psect	text12
  4842  0019F8                     __ptext12:
  4843                           	opt stack 0
  4844  0019F8                     _initLCD:
  4845                           	opt stack 23
  4846                           
  4847                           ;lcd.c: 8: _delay((unsigned long)((15)*(10000000/4000.0)));
  4848                           
  4849                           ;incstack = 0
  4850  0019F8  0E31               	movlw	49
  4851  0019FA  6E37               	movwf	??_initLCD& (0+255),c
  4852  0019FC  0EB2               	movlw	178
  4853  0019FE                     u4507:
  4854  0019FE  2EE8               	decfsz	wreg,f,c
  4855  001A00  D7FE               	bra	u4507
  4856  001A02  2E37               	decfsz	??_initLCD& (0+255),f,c
  4857  001A04  D7FC               	bra	u4507
  4858  001A06  D000               	nop2	
  4859                           
  4860                           ;lcd.c: 9: lcdInst(0b00110011);
  4861  001A08  0E33               	movlw	51
  4862  001A0A  ECD1  F00D         	call	_lcdInst
  4863                           
  4864                           ;lcd.c: 10: lcdInst(0b00110010);
  4865  001A0E  0E32               	movlw	50
  4866  001A10  ECD1  F00D         	call	_lcdInst
  4867                           
  4868                           ;lcd.c: 11: lcdInst(0b00101000);
  4869  001A14  0E28               	movlw	40
  4870  001A16  ECD1  F00D         	call	_lcdInst
  4871                           
  4872                           ;lcd.c: 12: lcdInst(0b00001111);
  4873  001A1A  0E0F               	movlw	15
  4874  001A1C  ECD1  F00D         	call	_lcdInst
  4875                           
  4876                           ;lcd.c: 13: lcdInst(0b00000110);
  4877  001A20  0E06               	movlw	6
  4878  001A22  ECD1  F00D         	call	_lcdInst
  4879                           
  4880                           ;lcd.c: 14: lcdInst(0b00000001);
  4881  001A26  0E01               	movlw	1
  4882  001A28  ECD1  F00D         	call	_lcdInst
  4883                           
  4884                           ;lcd.c: 15: _delay((unsigned long)((15)*(10000000/4000.0)));
  4885  001A2C  0E31               	movlw	49
  4886  001A2E  6E37               	movwf	??_initLCD& (0+255),c
  4887  001A30  0EB2               	movlw	178
  4888  001A32                     u4517:
  4889  001A32  2EE8               	decfsz	wreg,f,c
  4890  001A34  D7FE               	bra	u4517
  4891  001A36  2E37               	decfsz	??_initLCD& (0+255),f,c
  4892  001A38  D7FC               	bra	u4517
  4893  001A3A  D000               	nop2	
  4894  001A3C  0012               	return		;funcret
  4895  001A3E                     __end_of_initLCD:
  4896                           	opt stack 0
  4897                           tblptru	equ	0xFF8
  4898                           tblptrh	equ	0xFF7
  4899                           tblptrl	equ	0xFF6
  4900                           tablat	equ	0xFF5
  4901                           prodh	equ	0xFF4
  4902                           prodl	equ	0xFF3
  4903                           intcon	equ	0xFF2
  4904                           intcon3	equ	0xFF0
  4905                           postinc0	equ	0xFEE
  4906                           wreg	equ	0xFE8
  4907                           indf2	equ	0xFDF
  4908                           postinc2	equ	0xFDE
  4909                           postdec2	equ	0xFDD
  4910                           fsr2h	equ	0xFDA
  4911                           fsr2l	equ	0xFD9
  4912                           status	equ	0xFD8
  4913                           
  4914 ;; *************** function _lcdInst *****************
  4915 ;; Defined at:
  4916 ;;		line 18 in file "../lcd.c"
  4917 ;; Parameters:    Size  Location     Type
  4918 ;;  data            1    wreg     unsigned char 
  4919 ;; Auto vars:     Size  Location     Type
  4920 ;;  data            1   53[COMRAM] unsigned char 
  4921 ;; Return value:  Size  Location     Type
  4922 ;;                  1    wreg      void 
  4923 ;; Registers used:
  4924 ;;		wreg, status,2, status,0, cstack
  4925 ;; Tracked objects:
  4926 ;;		On entry : 0/0
  4927 ;;		On exit  : 0/0
  4928 ;;		Unchanged: 0/0
  4929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4931 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4932 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4933 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4934 ;;Total ram usage:        1 bytes
  4935 ;; Hardware stack levels used:    1
  4936 ;; Hardware stack levels required when called:    6
  4937 ;; This function calls:
  4938 ;;		_lcdNibble
  4939 ;; This function is called by:
  4940 ;;		_initLCD
  4941 ;;		_main
  4942 ;; This function uses a non-reentrant model
  4943 ;;
  4944                           
  4945                           	psect	text13
  4946  001BA2                     __ptext13:
  4947                           	opt stack 0
  4948  001BA2                     _lcdInst:
  4949                           	opt stack 24
  4950                           
  4951                           ;incstack = 0
  4952                           ;lcdInst@data stored from wreg
  4953  001BA2  6E36               	movwf	lcdInst@data,c
  4954                           
  4955                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  4956  001BA4  948C               	bcf	3980,2,c	;volatile
  4957                           
  4958                           ;lcd.c: 20: lcdNibble(data);
  4959  001BA6  5036               	movf	lcdInst@data,w,c
  4960  001BA8  EC8B  F00C         	call	_lcdNibble
  4961  001BAC  0012               	return		;funcret
  4962  001BAE                     __end_of_lcdInst:
  4963                           	opt stack 0
  4964                           tblptru	equ	0xFF8
  4965                           tblptrh	equ	0xFF7
  4966                           tblptrl	equ	0xFF6
  4967                           tablat	equ	0xFF5
  4968                           prodh	equ	0xFF4
  4969                           prodl	equ	0xFF3
  4970                           intcon	equ	0xFF2
  4971                           intcon3	equ	0xFF0
  4972                           postinc0	equ	0xFEE
  4973                           wreg	equ	0xFE8
  4974                           indf2	equ	0xFDF
  4975                           postinc2	equ	0xFDE
  4976                           postdec2	equ	0xFDD
  4977                           fsr2h	equ	0xFDA
  4978                           fsr2l	equ	0xFD9
  4979                           status	equ	0xFD8
  4980                           
  4981 ;; *************** function _lcdNibble *****************
  4982 ;; Defined at:
  4983 ;;		line 28 in file "../lcd.c"
  4984 ;; Parameters:    Size  Location     Type
  4985 ;;  data            1    wreg     unsigned char 
  4986 ;; Auto vars:     Size  Location     Type
  4987 ;;  data            1   52[COMRAM] unsigned char 
  4988 ;;  temp            1   51[COMRAM] unsigned char 
  4989 ;; Return value:  Size  Location     Type
  4990 ;;                  1    wreg      void 
  4991 ;; Registers used:
  4992 ;;		wreg, status,2, status,0
  4993 ;; Tracked objects:
  4994 ;;		On entry : 0/0
  4995 ;;		On exit  : 0/0
  4996 ;;		Unchanged: 0/0
  4997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4999 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5000 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5001 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5002 ;;Total ram usage:        2 bytes
  5003 ;; Hardware stack levels used:    1
  5004 ;; Hardware stack levels required when called:    5
  5005 ;; This function calls:
  5006 ;;		Nothing
  5007 ;; This function is called by:
  5008 ;;		_lcdInst
  5009 ;;		_putch
  5010 ;; This function uses a non-reentrant model
  5011 ;;
  5012                           
  5013                           	psect	text14
  5014  001916                     __ptext14:
  5015                           	opt stack 0
  5016  001916                     _lcdNibble:
  5017                           	opt stack 23
  5018                           
  5019                           ;incstack = 0
  5020                           ;lcdNibble@data stored from wreg
  5021  001916  6E35               	movwf	lcdNibble@data,c
  5022                           
  5023                           ;lcd.c: 30: char temp = data & 0xF0;
  5024  001918  5035               	movf	lcdNibble@data,w,c
  5025  00191A  0BF0               	andlw	240
  5026  00191C  6E34               	movwf	lcdNibble@temp,c
  5027                           
  5028                           ;lcd.c: 31: LATD = LATD & 0x0F;
  5029  00191E  508C               	movf	3980,w,c	;volatile
  5030  001920  0B0F               	andlw	15
  5031  001922  6E8C               	movwf	3980,c	;volatile
  5032                           
  5033                           ;lcd.c: 32: LATD = temp | LATD;
  5034  001924  5034               	movf	lcdNibble@temp,w,c
  5035  001926  108C               	iorwf	3980,w,c	;volatile
  5036  001928  6E8C               	movwf	3980,c	;volatile
  5037                           
  5038                           ;lcd.c: 34: LATDbits.LATD3 = 0;
  5039  00192A  968C               	bcf	3980,3,c	;volatile
  5040                           
  5041                           ;lcd.c: 35: _delay((unsigned long)((30)*(10000000/4000000.0)));
  5042  00192C  0E19               	movlw	25
  5043  00192E                     u4527:
  5044  00192E  2EE8               	decfsz	wreg,f,c
  5045  001930  D7FE               	bra	u4527
  5046                           
  5047                           ;lcd.c: 36: LATDbits.LATD3 = 1;
  5048  001932  868C               	bsf	3980,3,c	;volatile
  5049                           
  5050                           ;lcd.c: 37: _delay((unsigned long)((30)*(10000000/4000000.0)));
  5051  001934  0E19               	movlw	25
  5052  001936                     u4537:
  5053  001936  2EE8               	decfsz	wreg,f,c
  5054  001938  D7FE               	bra	u4537
  5055                           
  5056                           ;lcd.c: 39: data = data << 4;
  5057  00193A  3835               	swapf	lcdNibble@data,w,c
  5058  00193C  0BF0               	andlw	240
  5059  00193E  6E35               	movwf	lcdNibble@data,c
  5060                           
  5061                           ;lcd.c: 41: temp = data & 0xF0;
  5062  001940  5035               	movf	lcdNibble@data,w,c
  5063  001942  0BF0               	andlw	240
  5064  001944  6E34               	movwf	lcdNibble@temp,c
  5065                           
  5066                           ;lcd.c: 42: LATD = LATD & 0x0F;
  5067  001946  508C               	movf	3980,w,c	;volatile
  5068  001948  0B0F               	andlw	15
  5069  00194A  6E8C               	movwf	3980,c	;volatile
  5070                           
  5071                           ;lcd.c: 43: LATD = temp | LATD;
  5072  00194C  5034               	movf	lcdNibble@temp,w,c
  5073  00194E  108C               	iorwf	3980,w,c	;volatile
  5074  001950  6E8C               	movwf	3980,c	;volatile
  5075                           
  5076                           ;lcd.c: 45: LATDbits.LATD3 = 0;
  5077  001952  968C               	bcf	3980,3,c	;volatile
  5078                           
  5079                           ;lcd.c: 46: _delay((unsigned long)((30)*(10000000/4000000.0)));
  5080  001954  0E19               	movlw	25
  5081  001956                     u4547:
  5082  001956  2EE8               	decfsz	wreg,f,c
  5083  001958  D7FE               	bra	u4547
  5084                           
  5085                           ;lcd.c: 47: LATDbits.LATD3 = 1;
  5086  00195A  868C               	bsf	3980,3,c	;volatile
  5087                           
  5088                           ;lcd.c: 48: _delay((unsigned long)((30)*(10000000/4000000.0)));
  5089  00195C  0E19               	movlw	25
  5090  00195E                     u4557:
  5091  00195E  2EE8               	decfsz	wreg,f,c
  5092  001960  D7FE               	bra	u4557
  5093  001962  0012               	return		;funcret
  5094  001964                     __end_of_lcdNibble:
  5095                           	opt stack 0
  5096                           tblptru	equ	0xFF8
  5097                           tblptrh	equ	0xFF7
  5098                           tblptrl	equ	0xFF6
  5099                           tablat	equ	0xFF5
  5100                           prodh	equ	0xFF4
  5101                           prodl	equ	0xFF3
  5102                           intcon	equ	0xFF2
  5103                           intcon3	equ	0xFF0
  5104                           postinc0	equ	0xFEE
  5105                           wreg	equ	0xFE8
  5106                           indf2	equ	0xFDF
  5107                           postinc2	equ	0xFDE
  5108                           postdec2	equ	0xFDD
  5109                           fsr2h	equ	0xFDA
  5110                           fsr2l	equ	0xFD9
  5111                           status	equ	0xFD8
  5112                           
  5113 ;; *************** function _I2C_Master_Write *****************
  5114 ;; Defined at:
  5115 ;;		line 47 in file "../I2C.c"
  5116 ;; Parameters:    Size  Location     Type
  5117 ;;  d               2   52[COMRAM] unsigned int 
  5118 ;; Auto vars:     Size  Location     Type
  5119 ;;		None
  5120 ;; Return value:  Size  Location     Type
  5121 ;;                  1    wreg      void 
  5122 ;; Registers used:
  5123 ;;		wreg, status,2, status,0, cstack
  5124 ;; Tracked objects:
  5125 ;;		On entry : 0/0
  5126 ;;		On exit  : 0/0
  5127 ;;		Unchanged: 0/0
  5128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5129 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5130 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5131 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5132 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5133 ;;Total ram usage:        2 bytes
  5134 ;; Hardware stack levels used:    1
  5135 ;; Hardware stack levels required when called:    6
  5136 ;; This function calls:
  5137 ;;		_I2C_Master_Wait
  5138 ;; This function is called by:
  5139 ;;		_main
  5140 ;; This function uses a non-reentrant model
  5141 ;;
  5142                           
  5143                           	psect	text15
  5144  001BC6                     __ptext15:
  5145                           	opt stack 0
  5146  001BC6                     _I2C_Master_Write:
  5147                           	opt stack 24
  5148                           
  5149                           ;I2C.c: 49: I2C_Master_Wait();
  5150                           
  5151                           ;incstack = 0
  5152  001BC6  ECC2  F00D         	call	_I2C_Master_Wait	;wreg free
  5153                           
  5154                           ;I2C.c: 50: SSPBUF = d;
  5155  001BCA  C035  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  5156  001BCE  0012               	return		;funcret
  5157  001BD0                     __end_of_I2C_Master_Write:
  5158                           	opt stack 0
  5159                           tblptru	equ	0xFF8
  5160                           tblptrh	equ	0xFF7
  5161                           tblptrl	equ	0xFF6
  5162                           tablat	equ	0xFF5
  5163                           prodh	equ	0xFF4
  5164                           prodl	equ	0xFF3
  5165                           intcon	equ	0xFF2
  5166                           intcon3	equ	0xFF0
  5167                           postinc0	equ	0xFEE
  5168                           wreg	equ	0xFE8
  5169                           indf2	equ	0xFDF
  5170                           postinc2	equ	0xFDE
  5171                           postdec2	equ	0xFDD
  5172                           fsr2h	equ	0xFDA
  5173                           fsr2l	equ	0xFD9
  5174                           status	equ	0xFD8
  5175                           
  5176 ;; *************** function _I2C_Master_Stop *****************
  5177 ;; Defined at:
  5178 ;;		line 41 in file "../I2C.c"
  5179 ;; Parameters:    Size  Location     Type
  5180 ;;		None
  5181 ;; Auto vars:     Size  Location     Type
  5182 ;;		None
  5183 ;; Return value:  Size  Location     Type
  5184 ;;                  1    wreg      void 
  5185 ;; Registers used:
  5186 ;;		wreg, status,2, status,0, cstack
  5187 ;; Tracked objects:
  5188 ;;		On entry : 0/0
  5189 ;;		On exit  : 0/0
  5190 ;;		Unchanged: 0/0
  5191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5192 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5193 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5194 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5195 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5196 ;;Total ram usage:        0 bytes
  5197 ;; Hardware stack levels used:    1
  5198 ;; Hardware stack levels required when called:    6
  5199 ;; This function calls:
  5200 ;;		_I2C_Master_Wait
  5201 ;; This function is called by:
  5202 ;;		_main
  5203 ;; This function uses a non-reentrant model
  5204 ;;
  5205                           
  5206                           	psect	text16
  5207  001BD0                     __ptext16:
  5208                           	opt stack 0
  5209  001BD0                     _I2C_Master_Stop:
  5210                           	opt stack 24
  5211                           
  5212                           ;I2C.c: 43: I2C_Master_Wait();
  5213                           
  5214                           ;incstack = 0
  5215  001BD0  ECC2  F00D         	call	_I2C_Master_Wait	;wreg free
  5216                           
  5217                           ;I2C.c: 44: PEN = 1;
  5218  001BD4  84C5               	bsf	4037,2,c	;volatile
  5219  001BD6  0012               	return		;funcret
  5220  001BD8                     __end_of_I2C_Master_Stop:
  5221                           	opt stack 0
  5222                           tblptru	equ	0xFF8
  5223                           tblptrh	equ	0xFF7
  5224                           tblptrl	equ	0xFF6
  5225                           tablat	equ	0xFF5
  5226                           prodh	equ	0xFF4
  5227                           prodl	equ	0xFF3
  5228                           intcon	equ	0xFF2
  5229                           intcon3	equ	0xFF0
  5230                           postinc0	equ	0xFEE
  5231                           wreg	equ	0xFE8
  5232                           indf2	equ	0xFDF
  5233                           postinc2	equ	0xFDE
  5234                           postdec2	equ	0xFDD
  5235                           fsr2h	equ	0xFDA
  5236                           fsr2l	equ	0xFD9
  5237                           status	equ	0xFD8
  5238                           
  5239 ;; *************** function _I2C_Master_Start *****************
  5240 ;; Defined at:
  5241 ;;		line 29 in file "../I2C.c"
  5242 ;; Parameters:    Size  Location     Type
  5243 ;;		None
  5244 ;; Auto vars:     Size  Location     Type
  5245 ;;		None
  5246 ;; Return value:  Size  Location     Type
  5247 ;;                  1    wreg      void 
  5248 ;; Registers used:
  5249 ;;		wreg, status,2, status,0, cstack
  5250 ;; Tracked objects:
  5251 ;;		On entry : 0/0
  5252 ;;		On exit  : 0/0
  5253 ;;		Unchanged: 0/0
  5254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5255 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5256 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5257 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5258 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5259 ;;Total ram usage:        0 bytes
  5260 ;; Hardware stack levels used:    1
  5261 ;; Hardware stack levels required when called:    6
  5262 ;; This function calls:
  5263 ;;		_I2C_Master_Wait
  5264 ;; This function is called by:
  5265 ;;		_main
  5266 ;; This function uses a non-reentrant model
  5267 ;;
  5268                           
  5269                           	psect	text17
  5270  001BD8                     __ptext17:
  5271                           	opt stack 0
  5272  001BD8                     _I2C_Master_Start:
  5273                           	opt stack 24
  5274                           
  5275                           ;I2C.c: 31: I2C_Master_Wait();
  5276                           
  5277                           ;incstack = 0
  5278  001BD8  ECC2  F00D         	call	_I2C_Master_Wait	;wreg free
  5279                           
  5280                           ;I2C.c: 32: SEN = 1;
  5281  001BDC  80C5               	bsf	4037,0,c	;volatile
  5282  001BDE  0012               	return		;funcret
  5283  001BE0                     __end_of_I2C_Master_Start:
  5284                           	opt stack 0
  5285                           tblptru	equ	0xFF8
  5286                           tblptrh	equ	0xFF7
  5287                           tblptrl	equ	0xFF6
  5288                           tablat	equ	0xFF5
  5289                           prodh	equ	0xFF4
  5290                           prodl	equ	0xFF3
  5291                           intcon	equ	0xFF2
  5292                           intcon3	equ	0xFF0
  5293                           postinc0	equ	0xFEE
  5294                           wreg	equ	0xFE8
  5295                           indf2	equ	0xFDF
  5296                           postinc2	equ	0xFDE
  5297                           postdec2	equ	0xFDD
  5298                           fsr2h	equ	0xFDA
  5299                           fsr2l	equ	0xFD9
  5300                           status	equ	0xFD8
  5301                           
  5302 ;; *************** function _I2C_Master_Read *****************
  5303 ;; Defined at:
  5304 ;;		line 53 in file "../I2C.c"
  5305 ;; Parameters:    Size  Location     Type
  5306 ;;  a               1    wreg     unsigned char 
  5307 ;; Auto vars:     Size  Location     Type
  5308 ;;  a               1   52[COMRAM] unsigned char 
  5309 ;;  temp            1   53[COMRAM] unsigned char 
  5310 ;; Return value:  Size  Location     Type
  5311 ;;                  1    wreg      unsigned char 
  5312 ;; Registers used:
  5313 ;;		wreg, status,2, status,0, cstack
  5314 ;; Tracked objects:
  5315 ;;		On entry : 0/0
  5316 ;;		On exit  : 0/0
  5317 ;;		Unchanged: 0/0
  5318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5320 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5322 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5323 ;;Total ram usage:        2 bytes
  5324 ;; Hardware stack levels used:    1
  5325 ;; Hardware stack levels required when called:    6
  5326 ;; This function calls:
  5327 ;;		_I2C_Master_Wait
  5328 ;; This function is called by:
  5329 ;;		_main
  5330 ;; This function uses a non-reentrant model
  5331 ;;
  5332                           
  5333                           	psect	text18
  5334  001AE8                     __ptext18:
  5335                           	opt stack 0
  5336  001AE8                     _I2C_Master_Read:
  5337                           	opt stack 24
  5338                           
  5339                           ;incstack = 0
  5340                           ;I2C_Master_Read@a stored from wreg
  5341  001AE8  6E35               	movwf	I2C_Master_Read@a,c
  5342                           
  5343                           ;I2C.c: 55: unsigned char temp;
  5344                           ;I2C.c: 56: I2C_Master_Wait();
  5345  001AEA  ECC2  F00D         	call	_I2C_Master_Wait	;wreg free
  5346                           
  5347                           ;I2C.c: 57: RCEN = 1;
  5348  001AEE  86C5               	bsf	4037,3,c	;volatile
  5349                           
  5350                           ;I2C.c: 58: I2C_Master_Wait();
  5351  001AF0  ECC2  F00D         	call	_I2C_Master_Wait	;wreg free
  5352                           
  5353                           ;I2C.c: 59: temp = SSPBUF;
  5354  001AF4  CFC9 F036          	movff	4041,I2C_Master_Read@temp	;volatile
  5355                           
  5356                           ;I2C.c: 60: I2C_Master_Wait();
  5357  001AF8  ECC2  F00D         	call	_I2C_Master_Wait	;wreg free
  5358                           
  5359                           ;I2C.c: 61: ACKDT = (a)?0:1;
  5360  001AFC  5035               	movf	I2C_Master_Read@a,w,c
  5361  001AFE  A4D8               	btfss	status,2,c
  5362  001B00  D002               	goto	u2640
  5363  001B02  8AC5               	bsf	4037,5,c	;volatile
  5364  001B04  D001               	goto	l3021
  5365  001B06                     u2640:
  5366  001B06  9AC5               	bcf	4037,5,c	;volatile
  5367  001B08                     l3021:
  5368                           
  5369                           ;I2C.c: 62: ACKEN = 1;
  5370  001B08  88C5               	bsf	4037,4,c	;volatile
  5371                           
  5372                           ;I2C.c: 63: return temp;
  5373  001B0A  5036               	movf	I2C_Master_Read@temp,w,c
  5374  001B0C  0012               	return	
  5375  001B0E                     __end_of_I2C_Master_Read:
  5376                           	opt stack 0
  5377                           tblptru	equ	0xFF8
  5378                           tblptrh	equ	0xFF7
  5379                           tblptrl	equ	0xFF6
  5380                           tablat	equ	0xFF5
  5381                           prodh	equ	0xFF4
  5382                           prodl	equ	0xFF3
  5383                           intcon	equ	0xFF2
  5384                           intcon3	equ	0xFF0
  5385                           postinc0	equ	0xFEE
  5386                           wreg	equ	0xFE8
  5387                           indf2	equ	0xFDF
  5388                           postinc2	equ	0xFDE
  5389                           postdec2	equ	0xFDD
  5390                           fsr2h	equ	0xFDA
  5391                           fsr2l	equ	0xFD9
  5392                           status	equ	0xFD8
  5393                           
  5394 ;; *************** function _I2C_Master_Wait *****************
  5395 ;; Defined at:
  5396 ;;		line 24 in file "../I2C.c"
  5397 ;; Parameters:    Size  Location     Type
  5398 ;;		None
  5399 ;; Auto vars:     Size  Location     Type
  5400 ;;		None
  5401 ;; Return value:  Size  Location     Type
  5402 ;;                  1    wreg      void 
  5403 ;; Registers used:
  5404 ;;		wreg, status,2, status,0
  5405 ;; Tracked objects:
  5406 ;;		On entry : 0/0
  5407 ;;		On exit  : 0/0
  5408 ;;		Unchanged: 0/0
  5409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5410 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5411 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5412 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5413 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5414 ;;Total ram usage:        1 bytes
  5415 ;; Hardware stack levels used:    1
  5416 ;; Hardware stack levels required when called:    5
  5417 ;; This function calls:
  5418 ;;		Nothing
  5419 ;; This function is called by:
  5420 ;;		_I2C_Master_Start
  5421 ;;		_I2C_Master_Stop
  5422 ;;		_I2C_Master_Write
  5423 ;;		_I2C_Master_Read
  5424 ;; This function uses a non-reentrant model
  5425 ;;
  5426                           
  5427                           	psect	text19
  5428  001B84                     __ptext19:
  5429                           	opt stack 0
  5430  001B84                     _I2C_Master_Wait:
  5431                           	opt stack 24
  5432  001B84                     l30:
  5433  001B84  B4C7               	btfsc	4039,2,c	;volatile
  5434  001B86  D7FE               	goto	l30
  5435  001B88  CFC5 F034          	movff	4037,??_I2C_Master_Wait	;volatile
  5436  001B8C  0E1F               	movlw	31
  5437  001B8E  1634               	andwf	??_I2C_Master_Wait,f,c
  5438  001B90  B4D8               	btfsc	status,2,c
  5439  001B92  0012               	return	
  5440  001B94  D7F7               	goto	l30
  5441  001B96                     __end_of_I2C_Master_Wait:
  5442                           	opt stack 0
  5443                           tblptru	equ	0xFF8
  5444                           tblptrh	equ	0xFF7
  5445                           tblptrl	equ	0xFF6
  5446                           tablat	equ	0xFF5
  5447                           prodh	equ	0xFF4
  5448                           prodl	equ	0xFF3
  5449                           intcon	equ	0xFF2
  5450                           intcon3	equ	0xFF0
  5451                           postinc0	equ	0xFEE
  5452                           wreg	equ	0xFE8
  5453                           indf2	equ	0xFDF
  5454                           postinc2	equ	0xFDE
  5455                           postdec2	equ	0xFDD
  5456                           fsr2h	equ	0xFDA
  5457                           fsr2l	equ	0xFD9
  5458                           status	equ	0xFD8
  5459                           
  5460 ;; *************** function _I2C_Master_Init *****************
  5461 ;; Defined at:
  5462 ;;		line 13 in file "../I2C.c"
  5463 ;; Parameters:    Size  Location     Type
  5464 ;;  c               4   64[COMRAM] const unsigned long 
  5465 ;; Auto vars:     Size  Location     Type
  5466 ;;		None
  5467 ;; Return value:  Size  Location     Type
  5468 ;;                  1    wreg      void 
  5469 ;; Registers used:
  5470 ;;		wreg, status,2, status,0, cstack
  5471 ;; Tracked objects:
  5472 ;;		On entry : 0/0
  5473 ;;		On exit  : 0/0
  5474 ;;		Unchanged: 0/0
  5475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5476 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5477 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5478 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5479 ;;      Totals:         4       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5480 ;;Total ram usage:        8 bytes
  5481 ;; Hardware stack levels used:    1
  5482 ;; Hardware stack levels required when called:    6
  5483 ;; This function calls:
  5484 ;;		___lldiv
  5485 ;; This function is called by:
  5486 ;;		_main
  5487 ;; This function uses a non-reentrant model
  5488 ;;
  5489                           
  5490                           	psect	text20
  5491  001816                     __ptext20:
  5492                           	opt stack 0
  5493  001816                     _I2C_Master_Init:
  5494                           	opt stack 24
  5495                           
  5496                           ;I2C.c: 16: SSPSTAT = 0b00000000;
  5497                           
  5498                           ;incstack = 0
  5499  001816  0E00               	movlw	0
  5500  001818  6EC7               	movwf	4039,c	;volatile
  5501                           
  5502                           ;I2C.c: 17: SSPCON1 = 0b00101000;
  5503  00181A  0E28               	movlw	40
  5504  00181C  6EC6               	movwf	4038,c	;volatile
  5505                           
  5506                           ;I2C.c: 18: SSPCON2 = 0b00000000;
  5507  00181E  0E00               	movlw	0
  5508  001820  6EC5               	movwf	4037,c	;volatile
  5509                           
  5510                           ;I2C.c: 19: SSPADD = (10000000/(4*c))-1;
  5511  001822  0E80               	movlw	128
  5512  001824  6E34               	movwf	___lldiv@dividend,c
  5513  001826  0E96               	movlw	150
  5514  001828  6E35               	movwf	___lldiv@dividend+1,c
  5515  00182A  0E98               	movlw	152
  5516  00182C  6E36               	movwf	___lldiv@dividend+2,c
  5517  00182E  0E00               	movlw	0
  5518  001830  6E37               	movwf	___lldiv@dividend+3,c
  5519  001832  C041  F0A2         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  5520  001836  C042  F0A3         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  5521  00183A  C043  F0A4         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  5522  00183E  C044  F0A5         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  5523  001842  0E02               	movlw	2
  5524  001844                     u3885:
  5525  001844  90D8               	bcf	status,0,c
  5526  001846  0100               	movlb	0	; () banked
  5527  001848  37A2               	rlcf	??_I2C_Master_Init& (0+255),f,b
  5528  00184A  37A3               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  5529  00184C  37A4               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  5530  00184E  37A5               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  5531  001850  2EE8               	decfsz	wreg,f,c
  5532  001852  D7F8               	goto	u3885
  5533  001854  C0A2  F038         	movff	??_I2C_Master_Init,___lldiv@divisor
  5534  001858  C0A3  F039         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  5535  00185C  C0A4  F03A         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  5536  001860  C0A5  F03B         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  5537  001864  EC5A  F00B         	call	___lldiv	;wreg free
  5538  001868  0434               	decf	?___lldiv,w,c
  5539  00186A  6EC8               	movwf	4040,c	;volatile
  5540                           
  5541                           ;I2C.c: 20: TRISC3 = 1;
  5542  00186C  8694               	bsf	3988,3,c	;volatile
  5543                           
  5544                           ;I2C.c: 21: TRISC4 = 1;
  5545  00186E  8894               	bsf	3988,4,c	;volatile
  5546  001870  0012               	return		;funcret
  5547  001872                     __end_of_I2C_Master_Init:
  5548                           	opt stack 0
  5549                           tblptru	equ	0xFF8
  5550                           tblptrh	equ	0xFF7
  5551                           tblptrl	equ	0xFF6
  5552                           tablat	equ	0xFF5
  5553                           prodh	equ	0xFF4
  5554                           prodl	equ	0xFF3
  5555                           intcon	equ	0xFF2
  5556                           intcon3	equ	0xFF0
  5557                           postinc0	equ	0xFEE
  5558                           wreg	equ	0xFE8
  5559                           indf2	equ	0xFDF
  5560                           postinc2	equ	0xFDE
  5561                           postdec2	equ	0xFDD
  5562                           fsr2h	equ	0xFDA
  5563                           fsr2l	equ	0xFD9
  5564                           status	equ	0xFD8
  5565                           
  5566 ;; *************** function ___lldiv *****************
  5567 ;; Defined at:
  5568 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  5569 ;; Parameters:    Size  Location     Type
  5570 ;;  dividend        4   51[COMRAM] unsigned long 
  5571 ;;  divisor         4   55[COMRAM] unsigned long 
  5572 ;; Auto vars:     Size  Location     Type
  5573 ;;  quotient        4   59[COMRAM] unsigned long 
  5574 ;;  counter         1   63[COMRAM] unsigned char 
  5575 ;; Return value:  Size  Location     Type
  5576 ;;                  4   51[COMRAM] unsigned long 
  5577 ;; Registers used:
  5578 ;;		wreg, status,2, status,0
  5579 ;; Tracked objects:
  5580 ;;		On entry : 0/0
  5581 ;;		On exit  : 0/0
  5582 ;;		Unchanged: 0/0
  5583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5584 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5585 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5586 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5587 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5588 ;;Total ram usage:       13 bytes
  5589 ;; Hardware stack levels used:    1
  5590 ;; Hardware stack levels required when called:    5
  5591 ;; This function calls:
  5592 ;;		Nothing
  5593 ;; This function is called by:
  5594 ;;		_I2C_Master_Init
  5595 ;; This function uses a non-reentrant model
  5596 ;;
  5597                           
  5598                           	psect	text21
  5599  0016B4                     __ptext21:
  5600                           	opt stack 0
  5601  0016B4                     ___lldiv:
  5602                           	opt stack 24
  5603                           
  5604                           ;incstack = 0
  5605  0016B4  0E00               	movlw	0
  5606  0016B6  6E3C               	movwf	___lldiv@quotient,c
  5607  0016B8  0E00               	movlw	0
  5608  0016BA  6E3D               	movwf	___lldiv@quotient+1,c
  5609  0016BC  0E00               	movlw	0
  5610  0016BE  6E3E               	movwf	___lldiv@quotient+2,c
  5611  0016C0  0E00               	movlw	0
  5612  0016C2  6E3F               	movwf	___lldiv@quotient+3,c
  5613  0016C4  5038               	movf	___lldiv@divisor,w,c
  5614  0016C6  1039               	iorwf	___lldiv@divisor+1,w,c
  5615  0016C8  103A               	iorwf	___lldiv@divisor+2,w,c
  5616  0016CA  103B               	iorwf	___lldiv@divisor+3,w,c
  5617  0016CC  B4D8               	btfsc	status,2,c
  5618  0016CE  D02A               	goto	l825
  5619  0016D0  0E01               	movlw	1
  5620  0016D2  6E40               	movwf	___lldiv@counter,c
  5621  0016D4  D006               	goto	l2757
  5622  0016D6                     l2755:
  5623  0016D6  90D8               	bcf	status,0,c
  5624  0016D8  3638               	rlcf	___lldiv@divisor,f,c
  5625  0016DA  3639               	rlcf	___lldiv@divisor+1,f,c
  5626  0016DC  363A               	rlcf	___lldiv@divisor+2,f,c
  5627  0016DE  363B               	rlcf	___lldiv@divisor+3,f,c
  5628  0016E0  2A40               	incf	___lldiv@counter,f,c
  5629  0016E2                     l2757:
  5630  0016E2  AE3B               	btfss	___lldiv@divisor+3,7,c
  5631  0016E4  D7F8               	goto	l2755
  5632  0016E6                     l2759:
  5633  0016E6  90D8               	bcf	status,0,c
  5634  0016E8  363C               	rlcf	___lldiv@quotient,f,c
  5635  0016EA  363D               	rlcf	___lldiv@quotient+1,f,c
  5636  0016EC  363E               	rlcf	___lldiv@quotient+2,f,c
  5637  0016EE  363F               	rlcf	___lldiv@quotient+3,f,c
  5638  0016F0  5038               	movf	___lldiv@divisor,w,c
  5639  0016F2  5C34               	subwf	___lldiv@dividend,w,c
  5640  0016F4  5039               	movf	___lldiv@divisor+1,w,c
  5641  0016F6  5835               	subwfb	___lldiv@dividend+1,w,c
  5642  0016F8  503A               	movf	___lldiv@divisor+2,w,c
  5643  0016FA  5836               	subwfb	___lldiv@dividend+2,w,c
  5644  0016FC  503B               	movf	___lldiv@divisor+3,w,c
  5645  0016FE  5837               	subwfb	___lldiv@dividend+3,w,c
  5646  001700  A0D8               	btfss	status,0,c
  5647  001702  D009               	goto	l2767
  5648  001704  5038               	movf	___lldiv@divisor,w,c
  5649  001706  5E34               	subwf	___lldiv@dividend,f,c
  5650  001708  5039               	movf	___lldiv@divisor+1,w,c
  5651  00170A  5A35               	subwfb	___lldiv@dividend+1,f,c
  5652  00170C  503A               	movf	___lldiv@divisor+2,w,c
  5653  00170E  5A36               	subwfb	___lldiv@dividend+2,f,c
  5654  001710  503B               	movf	___lldiv@divisor+3,w,c
  5655  001712  5A37               	subwfb	___lldiv@dividend+3,f,c
  5656  001714  803C               	bsf	___lldiv@quotient,0,c
  5657  001716                     l2767:
  5658  001716  90D8               	bcf	status,0,c
  5659  001718  323B               	rrcf	___lldiv@divisor+3,f,c
  5660  00171A  323A               	rrcf	___lldiv@divisor+2,f,c
  5661  00171C  3239               	rrcf	___lldiv@divisor+1,f,c
  5662  00171E  3238               	rrcf	___lldiv@divisor,f,c
  5663  001720  2E40               	decfsz	___lldiv@counter,f,c
  5664  001722  D7E1               	goto	l2759
  5665  001724                     l825:
  5666  001724  C03C  F034         	movff	___lldiv@quotient,?___lldiv
  5667  001728  C03D  F035         	movff	___lldiv@quotient+1,?___lldiv+1
  5668  00172C  C03E  F036         	movff	___lldiv@quotient+2,?___lldiv+2
  5669  001730  C03F  F037         	movff	___lldiv@quotient+3,?___lldiv+3
  5670  001734  0012               	return		;funcret
  5671  001736                     __end_of___lldiv:
  5672                           	opt stack 0
  5673                           tblptru	equ	0xFF8
  5674                           tblptrh	equ	0xFF7
  5675                           tblptrl	equ	0xFF6
  5676                           tablat	equ	0xFF5
  5677                           prodh	equ	0xFF4
  5678                           prodl	equ	0xFF3
  5679                           intcon	equ	0xFF2
  5680                           intcon3	equ	0xFF0
  5681                           postinc0	equ	0xFEE
  5682                           wreg	equ	0xFE8
  5683                           indf2	equ	0xFDF
  5684                           postinc2	equ	0xFDE
  5685                           postdec2	equ	0xFDD
  5686                           fsr2h	equ	0xFDA
  5687                           fsr2l	equ	0xFD9
  5688                           status	equ	0xFD8
  5689                           
  5690 ;; *************** function _ISR *****************
  5691 ;; Defined at:
  5692 ;;		line 492 in file "../main.c"
  5693 ;; Parameters:    Size  Location     Type
  5694 ;;		None
  5695 ;; Auto vars:     Size  Location     Type
  5696 ;;  keypress        1   50[COMRAM] unsigned char 
  5697 ;; Return value:  Size  Location     Type
  5698 ;;                  1    wreg      void 
  5699 ;; Registers used:
  5700 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5701 ;; Tracked objects:
  5702 ;;		On entry : 0/0
  5703 ;;		On exit  : 0/0
  5704 ;;		Unchanged: 0/0
  5705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5707 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5708 ;;      Temps:         15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5709 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5710 ;;Total ram usage:       16 bytes
  5711 ;; Hardware stack levels used:    1
  5712 ;; Hardware stack levels required when called:    4
  5713 ;; This function calls:
  5714 ;;		_switchMenu
  5715 ;;		i2___awdiv
  5716 ;;		i2___awmod
  5717 ;;		i2_lcdInst
  5718 ;;		i2_printf
  5719 ;;		i2_stopOperation
  5720 ;; This function is called by:
  5721 ;;		Interrupt level 2
  5722 ;; This function uses a non-reentrant model
  5723 ;;
  5724                           
  5725                           	psect	intcode
  5726  000008                     __pintcode:
  5727                           	opt stack 0
  5728  000008                     _ISR:
  5729                           	opt stack 23
  5730                           
  5731                           ;incstack = 0
  5732  000008  824A               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5733  00000A  ED47  F005         	call	int_func,f	;refresh shadow registers
  5734                           tblptru	equ	0xFF8
  5735                           tblptrh	equ	0xFF7
  5736                           tblptrl	equ	0xFF6
  5737                           tablat	equ	0xFF5
  5738                           prodh	equ	0xFF4
  5739                           prodl	equ	0xFF3
  5740                           intcon	equ	0xFF2
  5741                           intcon3	equ	0xFF0
  5742                           postinc0	equ	0xFEE
  5743                           wreg	equ	0xFE8
  5744                           indf2	equ	0xFDF
  5745                           postinc2	equ	0xFDE
  5746                           postdec2	equ	0xFDD
  5747                           fsr2h	equ	0xFDA
  5748                           fsr2l	equ	0xFD9
  5749                           status	equ	0xFD8
  5750                           
  5751                           	psect	intcode_body
  5752  000A8E                     __pintcode_body:
  5753                           	opt stack 23
  5754  000A8E                     int_func:
  5755                           	opt stack 23
  5756  000A8E  0006               	pop		; remove dummy address from shadow register refresh
  5757  000A90  CFFA F025          	movff	pclath,??_ISR+1
  5758  000A94  CFFB F026          	movff	pclatu,??_ISR+2
  5759  000A98  CFE9 F027          	movff	fsr0l,??_ISR+3
  5760  000A9C  CFEA F028          	movff	fsr0h,??_ISR+4
  5761  000AA0  CFE1 F029          	movff	fsr1l,??_ISR+5
  5762  000AA4  CFE2 F02A          	movff	fsr1h,??_ISR+6
  5763  000AA8  CFD9 F02B          	movff	fsr2l,??_ISR+7
  5764  000AAC  CFDA F02C          	movff	fsr2h,??_ISR+8
  5765  000AB0  CFF3 F02D          	movff	prodl,??_ISR+9
  5766  000AB4  CFF4 F02E          	movff	prodh,??_ISR+10
  5767  000AB8  CFF6 F02F          	movff	tblptrl,??_ISR+11
  5768  000ABC  CFF7 F030          	movff	tblptrh,??_ISR+12
  5769  000AC0  CFF8 F031          	movff	tblptru,??_ISR+13
  5770  000AC4  CFF5 F032          	movff	tablat,??_ISR+14
  5771                           
  5772                           ;main.c: 493: if (INT1IF){
  5773  000AC8  A0F0               	btfss	intcon3,0,c	;volatile
  5774  000ACA  D015               	goto	i2l3647
  5775                           
  5776                           ;main.c: 494: unsigned char keypress = (PORTB & 0xF0) >> 4;
  5777  000ACC  3881               	swapf	3969,w,c	;volatile
  5778  000ACE  0B0F               	andlw	15
  5779  000AD0  0B0F               	andlw	15
  5780  000AD2  6E33               	movwf	ISR@keypress,c
  5781                           
  5782                           ;main.c: 495: switchMenu('4', '6', keys[keypress]);
  5783  000AD4  0E36               	movlw	54
  5784  000AD6  6E21               	movwf	switchMenu@right,c
  5785  000AD8  5033               	movf	ISR@keypress,w,c
  5786  000ADA  0D01               	mullw	1
  5787  000ADC  0E45               	movlw	low _keys
  5788  000ADE  24F3               	addwf	prodl,w,c
  5789  000AE0  6EF6               	movwf	tblptrl,c
  5790  000AE2  0EFE               	movlw	high _keys
  5791  000AE4  20F4               	addwfc	prodh,w,c
  5792  000AE6  6EF7               	movwf	tblptrh,c
  5793  000AE8                     	if	0	;There are less than 3 active tblptr bytes
  5794  000AE8                     	endif
  5795  000AE8  0008               	tblrd		*
  5796  000AEA  CFF5 F022          	movff	tablat,switchMenu@key
  5797  000AEE  0E34               	movlw	52
  5798  000AF0  EC82  F00A         	call	_switchMenu
  5799                           
  5800                           ;main.c: 496: INT1IF = 0;
  5801  000AF4  90F0               	bcf	intcon3,0,c	;volatile
  5802  000AF6                     i2l3647:
  5803                           
  5804                           ;main.c: 497: }
  5805                           ;main.c: 498: if (screenMode == 1 && TMR0IF){
  5806  000AF6  0100               	movlb	0	; () banked
  5807  000AF8  05BB               	decf	_screenMode& (0+255),w,b
  5808  000AFA  B4D8               	btfsc	status,2,c
  5809                           
  5810                           ; BSR set to: 0
  5811  000AFC  A4F2               	btfss	intcon,2,c	;volatile
  5812  000AFE  D04D               	goto	i2l3691
  5813                           
  5814                           ; BSR set to: 0
  5815                           ;main.c: 499: TMR0IF = 0;
  5816  000B00  94F2               	bcf	intcon,2,c	;volatile
  5817                           
  5818                           ; BSR set to: 0
  5819                           ;main.c: 500: TMR0 = 55770;
  5820  000B02  0ED9               	movlw	217
  5821  000B04  6ED7               	movwf	4055,c	;volatile
  5822  000B06  0EDA               	movlw	218
  5823  000B08  6ED6               	movwf	4054,c	;volatile
  5824                           
  5825                           ; BSR set to: 0
  5826                           ;main.c: 501: opTimer++;
  5827  000B0A  2A46               	incf	_opTimer,f,c
  5828                           
  5829                           ; BSR set to: 0
  5830                           ;main.c: 502: min = opTimer / 60;
  5831  000B0C  C046  F001         	movff	_opTimer,i2___awdiv@dividend
  5832  000B10  6A02               	clrf	i2___awdiv@dividend+1,c
  5833  000B12  0E00               	movlw	0
  5834  000B14  6E04               	movwf	i2___awdiv@divisor+1,c
  5835  000B16  0E3C               	movlw	60
  5836  000B18  6E03               	movwf	i2___awdiv@divisor,c
  5837  000B1A  EC18  F00B         	call	i2___awdiv	;wreg free
  5838  000B1E  5001               	movf	?i2___awdiv,w,c
  5839  000B20  0100               	movlb	0	; () banked
  5840  000B22  6F96               	movwf	_min& (0+255),b
  5841                           
  5842                           ; BSR set to: 0
  5843                           ;main.c: 503: sec = opTimer % 60;
  5844  000B24  C046  F001         	movff	_opTimer,i2___awmod@dividend
  5845  000B28  6A02               	clrf	i2___awmod@dividend+1,c
  5846  000B2A  0E00               	movlw	0
  5847  000B2C  6E04               	movwf	i2___awmod@divisor+1,c
  5848  000B2E  0E3C               	movlw	60
  5849  000B30  6E03               	movwf	i2___awmod@divisor,c
  5850  000B32  ECD3  F00B         	call	i2___awmod	;wreg free
  5851  000B36  5001               	movf	?i2___awmod,w,c
  5852  000B38  0100               	movlb	0	; () banked
  5853  000B3A  6F9C               	movwf	_sec& (0+255),b
  5854                           
  5855                           ; BSR set to: 0
  5856                           ;main.c: 504: lcdInst(0b10000000);;
  5857  000B3C  0E80               	movlw	128
  5858  000B3E  ECDD  F00D         	call	i2_lcdInst
  5859                           
  5860                           ;main.c: 505: printf("RUNNING: %02d:%02d   ", min, sec);
  5861  000B42  0EAF               	movlw	low STR_24
  5862  000B44  6E0D               	movwf	i2printf@f,c
  5863  000B46  0EFE               	movlw	high STR_24
  5864  000B48  6E0E               	movwf	i2printf@f+1,c
  5865  000B4A  C096  F00F         	movff	_min,?i2_printf+2
  5866  000B4E  6A10               	clrf	?i2_printf+3,c
  5867  000B50  C09C  F011         	movff	_sec,?i2_printf+4
  5868  000B54  6A12               	clrf	?i2_printf+5,c
  5869  000B56  ECE2  F006         	call	i2_printf	;wreg free
  5870                           
  5871                           ;main.c: 506: if (waitMotor){
  5872  000B5A  0100               	movlb	0	; () banked
  5873  000B5C  51A1               	movf	_waitMotor& (0+255),w,b
  5874  000B5E  B4D8               	btfsc	status,2,c
  5875  000B60  D009               	goto	i2l3673
  5876                           
  5877                           ; BSR set to: 0
  5878                           ;main.c: 507: waitMotor++;
  5879  000B62  0100               	movlb	0	; () banked
  5880  000B64  2BA1               	incf	_waitMotor& (0+255),f,b
  5881                           
  5882                           ; BSR set to: 0
  5883                           ;main.c: 508: if (waitMotor >= 3){
  5884  000B66  0E02               	movlw	2
  5885  000B68  0100               	movlb	0	; () banked
  5886  000B6A  65A1               	cpfsgt	_waitMotor& (0+255),b
  5887  000B6C  D003               	goto	i2l3673
  5888                           
  5889                           ; BSR set to: 0
  5890                           ;main.c: 509: waitMotor = 0;
  5891  000B6E  0E00               	movlw	0
  5892  000B70  0100               	movlb	0	; () banked
  5893  000B72  6FA1               	movwf	_waitMotor& (0+255),b
  5894  000B74                     i2l3673:
  5895                           
  5896                           ; BSR set to: 0
  5897                           ;main.c: 510: }
  5898                           ;main.c: 511: }
  5899                           ;main.c: 512: if (opTimer >= 180){
  5900  000B74  0EB3               	movlw	179
  5901  000B76  6446               	cpfsgt	_opTimer,c
  5902  000B78  D005               	goto	i2l3679
  5903                           
  5904                           ; BSR set to: 0
  5905                           ;main.c: 513: screenMode = 0;
  5906  000B7A  0E00               	movlw	0
  5907  000B7C  0100               	movlb	0	; () banked
  5908  000B7E  6FBB               	movwf	_screenMode& (0+255),b
  5909                           
  5910                           ; BSR set to: 0
  5911                           ;main.c: 514: stopOperation();
  5912  000B80  EC09  F00A         	call	i2_stopOperation	;wreg free
  5913  000B84                     i2l3679:
  5914                           
  5915                           ;main.c: 515: }
  5916                           ;main.c: 516: if (LATCbits.LC0){
  5917  000B84  A08B               	btfss	3979,0,c	;volatile
  5918  000B86  D002               	goto	i2l3683
  5919                           
  5920                           ;main.c: 517: LATCbits.LC0 = 0;;
  5921  000B88  908B               	bcf	3979,0,c	;volatile
  5922                           
  5923                           ;main.c: 518: }
  5924  000B8A  D007               	goto	i2l3691
  5925  000B8C                     i2l3683:
  5926                           
  5927                           ;main.c: 519: else {
  5928                           ;main.c: 520: solOnTimer++;
  5929  000B8C  2A49               	incf	_solOnTimer,f,c
  5930                           
  5931                           ;main.c: 521: if (solOnTimer >= 4){
  5932  000B8E  0E03               	movlw	3
  5933  000B90  6449               	cpfsgt	_solOnTimer,c
  5934  000B92  D003               	goto	i2l3691
  5935                           
  5936                           ;main.c: 522: solOnTimer = 0;
  5937  000B94  0E00               	movlw	0
  5938  000B96  6E49               	movwf	_solOnTimer,c
  5939                           
  5940                           ;main.c: 523: LATCbits.LC0 = 1;;
  5941  000B98  808B               	bsf	3979,0,c	;volatile
  5942  000B9A                     i2l3691:
  5943                           
  5944                           ;main.c: 524: }
  5945                           ;main.c: 525: }
  5946                           ;main.c: 535: }
  5947                           ;main.c: 536: if (screenMode == 1 && TMR1IF){
  5948  000B9A  0100               	movlb	0	; () banked
  5949  000B9C  05BB               	decf	_screenMode& (0+255),w,b
  5950  000B9E  B4D8               	btfsc	status,2,c
  5951                           
  5952                           ; BSR set to: 0
  5953  000BA0  A09E               	btfss	3998,0,c	;volatile
  5954  000BA2  D0F2               	goto	i2l401
  5955                           
  5956                           ; BSR set to: 0
  5957                           ;main.c: 537: TMR1IF = 0;
  5958  000BA4  909E               	bcf	3998,0,c	;volatile
  5959                           
  5960                           ; BSR set to: 0
  5961                           ;main.c: 538: TMR1 = 58035;
  5962  000BA6  0EE2               	movlw	226
  5963  000BA8  6ECF               	movwf	4047,c	;volatile
  5964  000BAA  0EB3               	movlw	179
  5965  000BAC  6ECE               	movwf	4046,c	;volatile
  5966                           
  5967                           ; BSR set to: 0
  5968                           ;main.c: 539: if (stepGear){
  5969  000BAE  0100               	movlb	0	; () banked
  5970  000BB0  518F               	movf	_stepGear& (0+255),w,b
  5971  000BB2  0100               	movlb	0	; () banked
  5972  000BB4  1190               	iorwf	(_stepGear+1)& (0+255),w,b
  5973  000BB6  B4D8               	btfsc	status,2,c
  5974  000BB8  D01F               	goto	i2l3713
  5975                           
  5976                           ; BSR set to: 0
  5977                           ;main.c: 540: stepGear++;
  5978  000BBA  0100               	movlb	0	; () banked
  5979  000BBC  4B8F               	infsnz	_stepGear& (0+255),f,b
  5980  000BBE  2B90               	incf	(_stepGear+1)& (0+255),f,b
  5981                           
  5982                           ; BSR set to: 0
  5983                           ;main.c: 541: if (stepGear >= 267){
  5984  000BC0  0E0B               	movlw	11
  5985  000BC2  0100               	movlb	0	; () banked
  5986  000BC4  5D8F               	subwf	_stepGear& (0+255),w,b
  5987  000BC6  0E01               	movlw	1
  5988  000BC8  0100               	movlb	0	; () banked
  5989  000BCA  5990               	subwfb	(_stepGear+1)& (0+255),w,b
  5990  000BCC  A0D8               	btfss	status,0,c
  5991  000BCE  D007               	goto	i2l3711
  5992                           
  5993                           ; BSR set to: 0
  5994                           ;main.c: 542: stepGear = 0;
  5995  000BD0  0E00               	movlw	0
  5996  000BD2  0100               	movlb	0	; () banked
  5997  000BD4  6F90               	movwf	(_stepGear+1)& (0+255),b
  5998  000BD6  0E00               	movlw	0
  5999  000BD8  6F8F               	movwf	_stepGear& (0+255),b
  6000                           
  6001                           ; BSR set to: 0
  6002                           ;main.c: 543: LATCbits.LC2 = 0;;
  6003  000BDA  948B               	bcf	3979,2,c	;volatile
  6004                           
  6005                           ; BSR set to: 0
  6006                           ;main.c: 544: LATCbits.LC1= 0;;
  6007  000BDC  928B               	bcf	3979,1,c	;volatile
  6008  000BDE                     i2l3711:
  6009                           
  6010                           ; BSR set to: 0
  6011                           ;main.c: 545: }
  6012                           ;main.c: 546: LATCbits.LC2 = !LATCbits.LC2;;
  6013  000BDE  B48B               	btfsc	3979,2,c	;volatile
  6014  000BE0  D003               	goto	i2u358_40
  6015  000BE2  6A24               	clrf	??_ISR& (0+255),c
  6016  000BE4  2A24               	incf	??_ISR& (0+255),f,c
  6017  000BE6  D001               	goto	i2u359_48
  6018  000BE8                     i2u358_40:
  6019  000BE8  6A24               	clrf	??_ISR& (0+255),c
  6020  000BEA                     i2u359_48:
  6021  000BEA  4624               	rlncf	??_ISR,f,c
  6022  000BEC  4624               	rlncf	??_ISR,f,c
  6023  000BEE  508B               	movf	3979,w,c	;volatile
  6024  000BF0  1824               	xorwf	??_ISR,w,c
  6025  000BF2  0BFB               	andlw	-5
  6026  000BF4  1824               	xorwf	??_ISR,w,c
  6027  000BF6  6E8B               	movwf	3979,c	;volatile
  6028  000BF8                     i2l3713:
  6029                           
  6030                           ;main.c: 547: }
  6031                           ;main.c: 548: if (plat1Left){
  6032  000BF8  0100               	movlb	0	; () banked
  6033  000BFA  5187               	movf	_plat1Left& (0+255),w,b
  6034  000BFC  0100               	movlb	0	; () banked
  6035  000BFE  1188               	iorwf	(_plat1Left+1)& (0+255),w,b
  6036  000C00  B4D8               	btfsc	status,2,c
  6037  000C02  D02C               	goto	i2l3743
  6038                           
  6039                           ; BSR set to: 0
  6040                           ;main.c: 549: if (step1 == 1){
  6041  000C04  0447               	decf	_step1,w,c
  6042  000C06  A4D8               	btfss	status,2,c
  6043  000C08  D002               	goto	i2l3719
  6044                           
  6045                           ; BSR set to: 0
  6046                           ;main.c: 550: LATAbits.LA5 = 1;;
  6047  000C0A  8A89               	bsf	3977,5,c	;volatile
  6048                           
  6049                           ;main.c: 551: LATAbits.LA4 = 0;;
  6050  000C0C  9889               	bcf	3977,4,c	;volatile
  6051  000C0E                     i2l3719:
  6052                           
  6053                           ; BSR set to: 0
  6054                           ;main.c: 552: }
  6055                           ;main.c: 553: if (step1 == 2){
  6056  000C0E  0E02               	movlw	2
  6057  000C10  1847               	xorwf	_step1,w,c
  6058  000C12  A4D8               	btfss	status,2,c
  6059  000C14  D002               	goto	i2l3723
  6060                           
  6061                           ; BSR set to: 0
  6062                           ;main.c: 554: LATEbits.LE2 = 0;;
  6063  000C16  948D               	bcf	3981,2,c	;volatile
  6064                           
  6065                           ;main.c: 555: LATAbits.LA3 = 1;;
  6066  000C18  8689               	bsf	3977,3,c	;volatile
  6067  000C1A                     i2l3723:
  6068                           
  6069                           ; BSR set to: 0
  6070                           ;main.c: 556: }
  6071                           ;main.c: 557: if (step1 == 3){
  6072  000C1A  0E03               	movlw	3
  6073  000C1C  1847               	xorwf	_step1,w,c
  6074  000C1E  A4D8               	btfss	status,2,c
  6075  000C20  D002               	goto	i2l3727
  6076                           
  6077                           ; BSR set to: 0
  6078                           ;main.c: 558: LATAbits.LA5 = 0;;
  6079  000C22  9A89               	bcf	3977,5,c	;volatile
  6080                           
  6081                           ;main.c: 559: LATAbits.LA4 = 1;;
  6082  000C24  8889               	bsf	3977,4,c	;volatile
  6083  000C26                     i2l3727:
  6084                           
  6085                           ; BSR set to: 0
  6086                           ;main.c: 560: }
  6087                           ;main.c: 561: if (step1 == 4){
  6088  000C26  0E04               	movlw	4
  6089  000C28  1847               	xorwf	_step1,w,c
  6090  000C2A  A4D8               	btfss	status,2,c
  6091  000C2C  D002               	goto	i2l3731
  6092                           
  6093                           ; BSR set to: 0
  6094                           ;main.c: 562: LATEbits.LE2 = 1;;
  6095  000C2E  848D               	bsf	3981,2,c	;volatile
  6096                           
  6097                           ;main.c: 563: LATAbits.LA3 = 0;;
  6098  000C30  9689               	bcf	3977,3,c	;volatile
  6099  000C32                     i2l3731:
  6100                           
  6101                           ; BSR set to: 0
  6102                           ;main.c: 564: }
  6103                           ;main.c: 565: plat1Left++;
  6104  000C32  0100               	movlb	0	; () banked
  6105  000C34  4B87               	infsnz	_plat1Left& (0+255),f,b
  6106  000C36  2B88               	incf	(_plat1Left+1)& (0+255),f,b
  6107                           
  6108                           ; BSR set to: 0
  6109                           ;main.c: 566: if (plat1Left>=512){
  6110  000C38  0E02               	movlw	2
  6111  000C3A  0100               	movlb	0	; () banked
  6112  000C3C  5D88               	subwf	(_plat1Left+1)& (0+255),w,b
  6113  000C3E  A0D8               	btfss	status,0,c
  6114  000C40  D006               	goto	i2l3737
  6115                           
  6116                           ; BSR set to: 0
  6117                           ;main.c: 567: plat1Left = 0;
  6118  000C42  0E00               	movlw	0
  6119  000C44  0100               	movlb	0	; () banked
  6120  000C46  6F88               	movwf	(_plat1Left+1)& (0+255),b
  6121  000C48  0E00               	movlw	0
  6122  000C4A  6F87               	movwf	_plat1Left& (0+255),b
  6123  000C4C  D003               	goto	i2l3739
  6124  000C4E                     i2l3737:
  6125                           
  6126                           ; BSR set to: 0
  6127                           ;main.c: 570: else if (step1>=4)
  6128  000C4E  0E03               	movlw	3
  6129  000C50  6447               	cpfsgt	_step1,c
  6130  000C52  D003               	goto	i2l3741
  6131  000C54                     i2l3739:
  6132                           
  6133                           ; BSR set to: 0
  6134                           ;main.c: 571: step1 = 1;
  6135  000C54  0E01               	movlw	1
  6136  000C56  6E47               	movwf	_step1,c
  6137  000C58  D001               	goto	i2l3743
  6138  000C5A                     i2l3741:
  6139                           
  6140                           ; BSR set to: 0
  6141                           ;main.c: 572: else
  6142                           ;main.c: 573: step1++;
  6143  000C5A  2A47               	incf	_step1,f,c
  6144  000C5C                     i2l3743:
  6145                           
  6146                           ; BSR set to: 0
  6147                           ;main.c: 574: }
  6148                           ;main.c: 575: if (plat1Right){
  6149  000C5C  0100               	movlb	0	; () banked
  6150  000C5E  5189               	movf	_plat1Right& (0+255),w,b
  6151  000C60  0100               	movlb	0	; () banked
  6152  000C62  118A               	iorwf	(_plat1Right+1)& (0+255),w,b
  6153  000C64  B4D8               	btfsc	status,2,c
  6154  000C66  D02C               	goto	i2l3773
  6155                           
  6156                           ; BSR set to: 0
  6157                           ;main.c: 576: if (step1 == 4){
  6158  000C68  0E04               	movlw	4
  6159  000C6A  1847               	xorwf	_step1,w,c
  6160  000C6C  A4D8               	btfss	status,2,c
  6161  000C6E  D002               	goto	i2l3749
  6162                           
  6163                           ; BSR set to: 0
  6164                           ;main.c: 577: LATAbits.LA5 = 0;;
  6165  000C70  9A89               	bcf	3977,5,c	;volatile
  6166                           
  6167                           ;main.c: 578: LATAbits.LA4 = 1;;
  6168  000C72  8889               	bsf	3977,4,c	;volatile
  6169  000C74                     i2l3749:
  6170                           
  6171                           ; BSR set to: 0
  6172                           ;main.c: 579: }
  6173                           ;main.c: 580: if (step1 == 3){
  6174  000C74  0E03               	movlw	3
  6175  000C76  1847               	xorwf	_step1,w,c
  6176  000C78  A4D8               	btfss	status,2,c
  6177  000C7A  D002               	goto	i2l3753
  6178                           
  6179                           ; BSR set to: 0
  6180                           ;main.c: 581: LATEbits.LE2 = 0;;
  6181  000C7C  948D               	bcf	3981,2,c	;volatile
  6182                           
  6183                           ;main.c: 582: LATAbits.LA3 = 1;;
  6184  000C7E  8689               	bsf	3977,3,c	;volatile
  6185  000C80                     i2l3753:
  6186                           
  6187                           ; BSR set to: 0
  6188                           ;main.c: 583: }
  6189                           ;main.c: 584: if (step1 == 2){
  6190  000C80  0E02               	movlw	2
  6191  000C82  1847               	xorwf	_step1,w,c
  6192  000C84  A4D8               	btfss	status,2,c
  6193  000C86  D002               	goto	i2l3757
  6194                           
  6195                           ; BSR set to: 0
  6196                           ;main.c: 585: LATAbits.LA5 = 1;;
  6197  000C88  8A89               	bsf	3977,5,c	;volatile
  6198                           
  6199                           ;main.c: 586: LATAbits.LA4 = 0;;
  6200  000C8A  9889               	bcf	3977,4,c	;volatile
  6201  000C8C                     i2l3757:
  6202                           
  6203                           ; BSR set to: 0
  6204                           ;main.c: 587: }
  6205                           ;main.c: 588: if (step1 == 1){
  6206  000C8C  0447               	decf	_step1,w,c
  6207  000C8E  A4D8               	btfss	status,2,c
  6208  000C90  D002               	goto	i2l3761
  6209                           
  6210                           ; BSR set to: 0
  6211                           ;main.c: 589: LATEbits.LE2 = 1;;
  6212  000C92  848D               	bsf	3981,2,c	;volatile
  6213                           
  6214                           ;main.c: 590: LATAbits.LA3 = 0;;
  6215  000C94  9689               	bcf	3977,3,c	;volatile
  6216  000C96                     i2l3761:
  6217                           
  6218                           ; BSR set to: 0
  6219                           ;main.c: 591: }
  6220                           ;main.c: 592: plat1Right++;
  6221  000C96  0100               	movlb	0	; () banked
  6222  000C98  4B89               	infsnz	_plat1Right& (0+255),f,b
  6223  000C9A  2B8A               	incf	(_plat1Right+1)& (0+255),f,b
  6224                           
  6225                           ; BSR set to: 0
  6226                           ;main.c: 593: if (plat1Right>=512){
  6227  000C9C  0E02               	movlw	2
  6228  000C9E  0100               	movlb	0	; () banked
  6229  000CA0  5D8A               	subwf	(_plat1Right+1)& (0+255),w,b
  6230  000CA2  A0D8               	btfss	status,0,c
  6231  000CA4  D006               	goto	i2l3767
  6232                           
  6233                           ; BSR set to: 0
  6234                           ;main.c: 594: plat1Right = 0;
  6235  000CA6  0E00               	movlw	0
  6236  000CA8  0100               	movlb	0	; () banked
  6237  000CAA  6F8A               	movwf	(_plat1Right+1)& (0+255),b
  6238  000CAC  0E00               	movlw	0
  6239  000CAE  6F89               	movwf	_plat1Right& (0+255),b
  6240  000CB0  D003               	goto	i2l3769
  6241  000CB2                     i2l3767:
  6242                           
  6243                           ; BSR set to: 0
  6244                           ;main.c: 597: else if (step1<=1)
  6245  000CB2  0E02               	movlw	2
  6246  000CB4  6047               	cpfslt	_step1,c
  6247  000CB6  D003               	goto	i2l3771
  6248  000CB8                     i2l3769:
  6249                           
  6250                           ; BSR set to: 0
  6251                           ;main.c: 598: step1 = 4;
  6252  000CB8  0E04               	movlw	4
  6253  000CBA  6E47               	movwf	_step1,c
  6254  000CBC  D001               	goto	i2l3773
  6255  000CBE                     i2l3771:
  6256                           
  6257                           ; BSR set to: 0
  6258                           ;main.c: 599: else
  6259                           ;main.c: 600: step1--;
  6260  000CBE  0647               	decf	_step1,f,c
  6261  000CC0                     i2l3773:
  6262                           
  6263                           ; BSR set to: 0
  6264                           ;main.c: 601: }
  6265                           ;main.c: 602: if (plat2Left){
  6266  000CC0  0100               	movlb	0	; () banked
  6267  000CC2  518B               	movf	_plat2Left& (0+255),w,b
  6268  000CC4  0100               	movlb	0	; () banked
  6269  000CC6  118C               	iorwf	(_plat2Left+1)& (0+255),w,b
  6270  000CC8  B4D8               	btfsc	status,2,c
  6271  000CCA  D02C               	goto	i2l3803
  6272                           
  6273                           ; BSR set to: 0
  6274                           ;main.c: 603: if (step2 == 1){
  6275  000CCC  0448               	decf	_step2,w,c
  6276  000CCE  A4D8               	btfss	status,2,c
  6277  000CD0  D002               	goto	i2l3779
  6278                           
  6279                           ; BSR set to: 0
  6280                           ;main.c: 604: LATAbits.LA6 = 1;;
  6281  000CD2  8C89               	bsf	3977,6,c	;volatile
  6282                           
  6283                           ;main.c: 605: LATCbits.LC6 = 0;;
  6284  000CD4  9C8B               	bcf	3979,6,c	;volatile
  6285  000CD6                     i2l3779:
  6286                           
  6287                           ; BSR set to: 0
  6288                           ;main.c: 606: }
  6289                           ;main.c: 607: if (step2 == 2){
  6290  000CD6  0E02               	movlw	2
  6291  000CD8  1848               	xorwf	_step2,w,c
  6292  000CDA  A4D8               	btfss	status,2,c
  6293  000CDC  D002               	goto	i2l3783
  6294                           
  6295                           ; BSR set to: 0
  6296                           ;main.c: 608: LATBbits.LB0 = 0;;
  6297  000CDE  908A               	bcf	3978,0,c	;volatile
  6298                           
  6299                           ;main.c: 609: LATBbits.LB2 = 1;;
  6300  000CE0  848A               	bsf	3978,2,c	;volatile
  6301  000CE2                     i2l3783:
  6302                           
  6303                           ; BSR set to: 0
  6304                           ;main.c: 610: }
  6305                           ;main.c: 611: if (step2 == 3){
  6306  000CE2  0E03               	movlw	3
  6307  000CE4  1848               	xorwf	_step2,w,c
  6308  000CE6  A4D8               	btfss	status,2,c
  6309  000CE8  D002               	goto	i2l3787
  6310                           
  6311                           ; BSR set to: 0
  6312                           ;main.c: 612: LATAbits.LA6 = 0;;
  6313  000CEA  9C89               	bcf	3977,6,c	;volatile
  6314                           
  6315                           ;main.c: 613: LATCbits.LC6 = 1;;
  6316  000CEC  8C8B               	bsf	3979,6,c	;volatile
  6317  000CEE                     i2l3787:
  6318                           
  6319                           ; BSR set to: 0
  6320                           ;main.c: 614: }
  6321                           ;main.c: 615: if (step2 == 4){
  6322  000CEE  0E04               	movlw	4
  6323  000CF0  1848               	xorwf	_step2,w,c
  6324  000CF2  A4D8               	btfss	status,2,c
  6325  000CF4  D002               	goto	i2l3791
  6326                           
  6327                           ; BSR set to: 0
  6328                           ;main.c: 616: LATBbits.LB0 = 1;;
  6329  000CF6  808A               	bsf	3978,0,c	;volatile
  6330                           
  6331                           ;main.c: 617: LATBbits.LB2 = 0;;
  6332  000CF8  948A               	bcf	3978,2,c	;volatile
  6333  000CFA                     i2l3791:
  6334                           
  6335                           ; BSR set to: 0
  6336                           ;main.c: 618: }
  6337                           ;main.c: 619: plat2Left++;
  6338  000CFA  0100               	movlb	0	; () banked
  6339  000CFC  4B8B               	infsnz	_plat2Left& (0+255),f,b
  6340  000CFE  2B8C               	incf	(_plat2Left+1)& (0+255),f,b
  6341                           
  6342                           ; BSR set to: 0
  6343                           ;main.c: 620: if (plat2Left>=512){
  6344  000D00  0E02               	movlw	2
  6345  000D02  0100               	movlb	0	; () banked
  6346  000D04  5D8C               	subwf	(_plat2Left+1)& (0+255),w,b
  6347  000D06  A0D8               	btfss	status,0,c
  6348  000D08  D006               	goto	i2l3797
  6349                           
  6350                           ; BSR set to: 0
  6351                           ;main.c: 621: plat2Left = 0;
  6352  000D0A  0E00               	movlw	0
  6353  000D0C  0100               	movlb	0	; () banked
  6354  000D0E  6F8C               	movwf	(_plat2Left+1)& (0+255),b
  6355  000D10  0E00               	movlw	0
  6356  000D12  6F8B               	movwf	_plat2Left& (0+255),b
  6357  000D14  D003               	goto	i2l3799
  6358  000D16                     i2l3797:
  6359                           
  6360                           ; BSR set to: 0
  6361                           ;main.c: 624: else if (step2>=4)
  6362  000D16  0E03               	movlw	3
  6363  000D18  6448               	cpfsgt	_step2,c
  6364  000D1A  D003               	goto	i2l3801
  6365  000D1C                     i2l3799:
  6366                           
  6367                           ; BSR set to: 0
  6368                           ;main.c: 625: step2 = 1;
  6369  000D1C  0E01               	movlw	1
  6370  000D1E  6E48               	movwf	_step2,c
  6371  000D20  D001               	goto	i2l3803
  6372  000D22                     i2l3801:
  6373                           
  6374                           ; BSR set to: 0
  6375                           ;main.c: 626: else
  6376                           ;main.c: 627: step2++;
  6377  000D22  2A48               	incf	_step2,f,c
  6378  000D24                     i2l3803:
  6379                           
  6380                           ; BSR set to: 0
  6381                           ;main.c: 628: }
  6382                           ;main.c: 629: if (plat2Right){
  6383  000D24  0100               	movlb	0	; () banked
  6384  000D26  518D               	movf	_plat2Right& (0+255),w,b
  6385  000D28  0100               	movlb	0	; () banked
  6386  000D2A  118E               	iorwf	(_plat2Right+1)& (0+255),w,b
  6387  000D2C  B4D8               	btfsc	status,2,c
  6388  000D2E  D02C               	goto	i2l401
  6389                           
  6390                           ; BSR set to: 0
  6391                           ;main.c: 630: if (step2 == 4){
  6392  000D30  0E04               	movlw	4
  6393  000D32  1848               	xorwf	_step2,w,c
  6394  000D34  A4D8               	btfss	status,2,c
  6395  000D36  D002               	goto	i2l3809
  6396                           
  6397                           ; BSR set to: 0
  6398                           ;main.c: 631: LATAbits.LA6 = 0;;
  6399  000D38  9C89               	bcf	3977,6,c	;volatile
  6400                           
  6401                           ;main.c: 632: LATCbits.LC6 = 1;;
  6402  000D3A  8C8B               	bsf	3979,6,c	;volatile
  6403  000D3C                     i2l3809:
  6404                           
  6405                           ; BSR set to: 0
  6406                           ;main.c: 633: }
  6407                           ;main.c: 634: if (step2 == 3){
  6408  000D3C  0E03               	movlw	3
  6409  000D3E  1848               	xorwf	_step2,w,c
  6410  000D40  A4D8               	btfss	status,2,c
  6411  000D42  D002               	goto	i2l3813
  6412                           
  6413                           ; BSR set to: 0
  6414                           ;main.c: 635: LATBbits.LB0 = 0;;
  6415  000D44  908A               	bcf	3978,0,c	;volatile
  6416                           
  6417                           ;main.c: 636: LATBbits.LB2 = 1;;
  6418  000D46  848A               	bsf	3978,2,c	;volatile
  6419  000D48                     i2l3813:
  6420                           
  6421                           ; BSR set to: 0
  6422                           ;main.c: 637: }
  6423                           ;main.c: 638: if (step2 == 2){
  6424  000D48  0E02               	movlw	2
  6425  000D4A  1848               	xorwf	_step2,w,c
  6426  000D4C  A4D8               	btfss	status,2,c
  6427  000D4E  D002               	goto	i2l3817
  6428                           
  6429                           ; BSR set to: 0
  6430                           ;main.c: 639: LATAbits.LA6 = 1;;
  6431  000D50  8C89               	bsf	3977,6,c	;volatile
  6432                           
  6433                           ;main.c: 640: LATCbits.LC6 = 0;;
  6434  000D52  9C8B               	bcf	3979,6,c	;volatile
  6435  000D54                     i2l3817:
  6436                           
  6437                           ; BSR set to: 0
  6438                           ;main.c: 641: }
  6439                           ;main.c: 642: if (step2 == 1){
  6440  000D54  0448               	decf	_step2,w,c
  6441  000D56  A4D8               	btfss	status,2,c
  6442  000D58  D002               	goto	i2l3821
  6443                           
  6444                           ; BSR set to: 0
  6445                           ;main.c: 643: LATBbits.LB0 = 1;;
  6446  000D5A  808A               	bsf	3978,0,c	;volatile
  6447                           
  6448                           ;main.c: 644: LATBbits.LB2 = 0;;
  6449  000D5C  948A               	bcf	3978,2,c	;volatile
  6450  000D5E                     i2l3821:
  6451                           
  6452                           ; BSR set to: 0
  6453                           ;main.c: 645: }
  6454                           ;main.c: 646: plat2Right++;
  6455  000D5E  0100               	movlb	0	; () banked
  6456  000D60  4B8D               	infsnz	_plat2Right& (0+255),f,b
  6457  000D62  2B8E               	incf	(_plat2Right+1)& (0+255),f,b
  6458                           
  6459                           ; BSR set to: 0
  6460                           ;main.c: 647: if (plat2Right>=512){
  6461  000D64  0E02               	movlw	2
  6462  000D66  0100               	movlb	0	; () banked
  6463  000D68  5D8E               	subwf	(_plat2Right+1)& (0+255),w,b
  6464  000D6A  A0D8               	btfss	status,0,c
  6465  000D6C  D006               	goto	i2l3827
  6466                           
  6467                           ; BSR set to: 0
  6468                           ;main.c: 648: plat2Right = 0;
  6469  000D6E  0E00               	movlw	0
  6470  000D70  0100               	movlb	0	; () banked
  6471  000D72  6F8E               	movwf	(_plat2Right+1)& (0+255),b
  6472  000D74  0E00               	movlw	0
  6473  000D76  6F8D               	movwf	_plat2Right& (0+255),b
  6474  000D78  D003               	goto	i2l3829
  6475  000D7A                     i2l3827:
  6476                           
  6477                           ; BSR set to: 0
  6478                           ;main.c: 651: else if (step2<=1)
  6479  000D7A  0E02               	movlw	2
  6480  000D7C  6048               	cpfslt	_step2,c
  6481  000D7E  D003               	goto	i2l3831
  6482  000D80                     i2l3829:
  6483                           
  6484                           ; BSR set to: 0
  6485                           ;main.c: 652: step2 = 4;
  6486  000D80  0E04               	movlw	4
  6487  000D82  6E48               	movwf	_step2,c
  6488  000D84  D001               	goto	i2l401
  6489  000D86                     i2l3831:
  6490                           
  6491                           ; BSR set to: 0
  6492                           ;main.c: 653: else
  6493                           ;main.c: 654: step2--;
  6494  000D86  0648               	decf	_step2,f,c
  6495  000D88                     i2l401:
  6496                           
  6497                           ; BSR set to: 0
  6498  000D88  C032  FFF5         	movff	??_ISR+14,tablat
  6499  000D8C  C031  FFF8         	movff	??_ISR+13,tblptru
  6500  000D90  C030  FFF7         	movff	??_ISR+12,tblptrh
  6501  000D94  C02F  FFF6         	movff	??_ISR+11,tblptrl
  6502  000D98  C02E  FFF4         	movff	??_ISR+10,prodh
  6503  000D9C  C02D  FFF3         	movff	??_ISR+9,prodl
  6504  000DA0  C02C  FFDA         	movff	??_ISR+8,fsr2h
  6505  000DA4  C02B  FFD9         	movff	??_ISR+7,fsr2l
  6506  000DA8  C02A  FFE2         	movff	??_ISR+6,fsr1h
  6507  000DAC  C029  FFE1         	movff	??_ISR+5,fsr1l
  6508  000DB0  C028  FFEA         	movff	??_ISR+4,fsr0h
  6509  000DB4  C027  FFE9         	movff	??_ISR+3,fsr0l
  6510  000DB8  C026  FFFB         	movff	??_ISR+2,pclatu
  6511  000DBC  C025  FFFA         	movff	??_ISR+1,pclath
  6512  000DC0  924A               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6513  000DC2  0011               	retfie		f
  6514  000DC4                     __end_of_ISR:
  6515                           	opt stack 0
  6516                           pclatu	equ	0xFFB
  6517                           pclath	equ	0xFFA
  6518                           tblptru	equ	0xFF8
  6519                           tblptrh	equ	0xFF7
  6520                           tblptrl	equ	0xFF6
  6521                           tablat	equ	0xFF5
  6522                           prodh	equ	0xFF4
  6523                           prodl	equ	0xFF3
  6524                           intcon	equ	0xFF2
  6525                           intcon3	equ	0xFF0
  6526                           postinc0	equ	0xFEE
  6527                           fsr0h	equ	0xFEA
  6528                           fsr0l	equ	0xFE9
  6529                           wreg	equ	0xFE8
  6530                           fsr1h	equ	0xFE2
  6531                           fsr1l	equ	0xFE1
  6532                           indf2	equ	0xFDF
  6533                           postinc2	equ	0xFDE
  6534                           postdec2	equ	0xFDD
  6535                           fsr2h	equ	0xFDA
  6536                           fsr2l	equ	0xFD9
  6537                           status	equ	0xFD8
  6538                           
  6539 ;; *************** function _switchMenu *****************
  6540 ;; Defined at:
  6541 ;;		line 296 in file "../main.c"
  6542 ;; Parameters:    Size  Location     Type
  6543 ;;  left            1    wreg     unsigned char 
  6544 ;;  right           1   32[COMRAM] unsigned char 
  6545 ;;  key             1   33[COMRAM] unsigned char 
  6546 ;; Auto vars:     Size  Location     Type
  6547 ;;  left            1   34[COMRAM] unsigned char 
  6548 ;; Return value:  Size  Location     Type
  6549 ;;                  1    wreg      void 
  6550 ;; Registers used:
  6551 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6552 ;; Tracked objects:
  6553 ;;		On entry : 0/0
  6554 ;;		On exit  : 0/0
  6555 ;;		Unchanged: 0/0
  6556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6557 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6558 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6559 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6560 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6561 ;;Total ram usage:        3 bytes
  6562 ;; Hardware stack levels used:    1
  6563 ;; Hardware stack levels required when called:    3
  6564 ;; This function calls:
  6565 ;;		i2_lcdInst
  6566 ;;		i2_printf
  6567 ;;		i2_stopOperation
  6568 ;; This function is called by:
  6569 ;;		_ISR
  6570 ;; This function uses a non-reentrant model
  6571 ;;
  6572                           
  6573                           	psect	text23
  6574  001504                     __ptext23:
  6575                           	opt stack 0
  6576  001504                     _switchMenu:
  6577                           	opt stack 23
  6578                           
  6579                           ; BSR set to: 0
  6580                           ;incstack = 0
  6581                           ;switchMenu@left stored from wreg
  6582  001504  6E23               	movwf	switchMenu@left,c
  6583                           
  6584                           ;main.c: 298: if (key == '*'){
  6585  001506  0E2A               	movlw	42
  6586  001508  1822               	xorwf	switchMenu@key,w,c
  6587  00150A  A4D8               	btfss	status,2,c
  6588  00150C  D01D               	goto	i2l3365
  6589                           
  6590                           ;main.c: 300: if(screenMode == 2){
  6591  00150E  0E02               	movlw	2
  6592  001510  0100               	movlb	0	; () banked
  6593  001512  19BB               	xorwf	_screenMode& (0+255),w,b
  6594  001514  A4D8               	btfss	status,2,c
  6595  001516  D010               	goto	i2l3361
  6596                           
  6597                           ; BSR set to: 0
  6598                           ;main.c: 301: screenMode = 1;
  6599  001518  0E01               	movlw	1
  6600  00151A  0100               	movlb	0	; () banked
  6601  00151C  6FBB               	movwf	_screenMode& (0+255),b
  6602                           
  6603                           ; BSR set to: 0
  6604                           ;main.c: 302: T0CONbits.TMR0ON = 1;
  6605  00151E  8ED5               	bsf	4053,7,c	;volatile
  6606                           
  6607                           ; BSR set to: 0
  6608                           ;main.c: 303: T1CONbits.TMR1ON = 0;
  6609  001520  90CD               	bcf	4045,0,c	;volatile
  6610                           
  6611                           ; BSR set to: 0
  6612                           ;main.c: 304: lcdInst(0b10000000);;
  6613  001522  0E80               	movlw	128
  6614  001524  ECDD  F00D         	call	i2_lcdInst
  6615                           
  6616                           ;main.c: 305: printf("RUNNING: 00:00  ");
  6617  001528  0E98               	movlw	low STR_23
  6618  00152A  6E0D               	movwf	i2printf@f,c
  6619  00152C  0EFF               	movlw	high STR_23
  6620  00152E  6E0E               	movwf	i2printf@f+1,c
  6621  001530  ECE2  F006         	call	i2_printf	;wreg free
  6622                           
  6623                           ;main.c: 306: LATCbits.LC0 = 1;;
  6624  001534  808B               	bsf	3979,0,c	;volatile
  6625                           
  6626                           ;main.c: 307: }
  6627  001536  0012               	return	
  6628  001538                     i2l3361:
  6629                           
  6630                           ;main.c: 308: else if (screenMode == 0)
  6631  001538  0100               	movlb	0	; () banked
  6632  00153A  51BB               	movf	_screenMode& (0+255),w,b
  6633  00153C  A4D8               	btfss	status,2,c
  6634  00153E  0012               	return	
  6635                           
  6636                           ; BSR set to: 0
  6637                           ;main.c: 309: screenMode = 2;
  6638  001540  0E02               	movlw	2
  6639  001542  0100               	movlb	0	; () banked
  6640  001544  6FBB               	movwf	_screenMode& (0+255),b
  6641                           
  6642                           ; BSR set to: 0
  6643                           ;main.c: 310: }
  6644                           
  6645                           ; BSR set to: 0
  6646  001546  0012               	return	
  6647  001548                     i2l3365:
  6648                           
  6649                           ;main.c: 311: else if (screenMode == 1){
  6650  001548  0100               	movlb	0	; () banked
  6651  00154A  05BB               	decf	_screenMode& (0+255),w,b
  6652  00154C  A4D8               	btfss	status,2,c
  6653  00154E  D00A               	goto	i2l3373
  6654                           
  6655                           ; BSR set to: 0
  6656                           ;main.c: 312: if (key == '#'){
  6657  001550  0E23               	movlw	35
  6658  001552  1822               	xorwf	switchMenu@key,w,c
  6659  001554  A4D8               	btfss	status,2,c
  6660  001556  0012               	return	
  6661                           
  6662                           ; BSR set to: 0
  6663                           ;main.c: 313: screenMode = 10;
  6664  001558  0E0A               	movlw	10
  6665  00155A  0100               	movlb	0	; () banked
  6666  00155C  6FBB               	movwf	_screenMode& (0+255),b
  6667                           
  6668                           ; BSR set to: 0
  6669                           ;main.c: 314: stopOperation();
  6670  00155E  EC09  F00A         	call	i2_stopOperation	;wreg free
  6671                           
  6672                           ;main.c: 315: }
  6673                           ;main.c: 316: }
  6674  001562  0012               	return	
  6675  001564                     i2l3373:
  6676                           
  6677                           ;main.c: 317: else if (screenMode != 0){
  6678  001564  0100               	movlb	0	; () banked
  6679  001566  51BB               	movf	_screenMode& (0+255),w,b
  6680  001568  B4D8               	btfsc	status,2,c
  6681  00156A  0012               	return	
  6682                           
  6683                           ; BSR set to: 0
  6684                           ;main.c: 318: if (key == right){
  6685  00156C  5021               	movf	switchMenu@right,w,c
  6686  00156E  1822               	xorwf	switchMenu@key,w,c
  6687  001570  A4D8               	btfss	status,2,c
  6688  001572  D00C               	goto	i2l3383
  6689                           
  6690                           ; BSR set to: 0
  6691                           ;main.c: 319: if (screenMode == 2)
  6692  001574  0E02               	movlw	2
  6693  001576  0100               	movlb	0	; () banked
  6694  001578  19BB               	xorwf	_screenMode& (0+255),w,b
  6695  00157A  A4D8               	btfss	status,2,c
  6696  00157C  D004               	goto	i2l3381
  6697                           
  6698                           ; BSR set to: 0
  6699                           ;main.c: 320: screenMode = 9;
  6700  00157E  0E09               	movlw	9
  6701  001580  0100               	movlb	0	; () banked
  6702  001582  6FBB               	movwf	_screenMode& (0+255),b
  6703  001584  0012               	return	
  6704  001586                     i2l3381:
  6705                           
  6706                           ; BSR set to: 0
  6707                           ;main.c: 321: else
  6708                           ;main.c: 322: screenMode--;
  6709  001586  0100               	movlb	0	; () banked
  6710  001588  07BB               	decf	_screenMode& (0+255),f,b
  6711                           
  6712                           ; BSR set to: 0
  6713                           ;main.c: 323: }
  6714  00158A  0012               	return	
  6715  00158C                     i2l3383:
  6716                           
  6717                           ; BSR set to: 0
  6718                           ;main.c: 324: else if (key == left){
  6719  00158C  5023               	movf	switchMenu@left,w,c
  6720  00158E  1822               	xorwf	switchMenu@key,w,c
  6721  001590  A4D8               	btfss	status,2,c
  6722  001592  0012               	return	
  6723                           
  6724                           ; BSR set to: 0
  6725                           ;main.c: 325: if (screenMode == 9)
  6726  001594  0E09               	movlw	9
  6727  001596  0100               	movlb	0	; () banked
  6728  001598  19BB               	xorwf	_screenMode& (0+255),w,b
  6729  00159A  A4D8               	btfss	status,2,c
  6730  00159C  D004               	goto	i2l3389
  6731                           
  6732                           ; BSR set to: 0
  6733                           ;main.c: 326: screenMode = 2;
  6734  00159E  0E02               	movlw	2
  6735  0015A0  0100               	movlb	0	; () banked
  6736  0015A2  6FBB               	movwf	_screenMode& (0+255),b
  6737  0015A4  0012               	return	
  6738  0015A6                     i2l3389:
  6739                           
  6740                           ; BSR set to: 0
  6741                           ;main.c: 327: else
  6742                           ;main.c: 328: screenMode++;
  6743  0015A6  0100               	movlb	0	; () banked
  6744  0015A8  2BBB               	incf	_screenMode& (0+255),f,b
  6745                           
  6746                           ; BSR set to: 0
  6747                           
  6748                           ; BSR set to: 0
  6749                           
  6750                           ; BSR set to: 0
  6751                           
  6752                           ; BSR set to: 0
  6753                           
  6754                           ; BSR set to: 0
  6755  0015AA  0012               	return	
  6756  0015AC                     __end_of_switchMenu:
  6757                           	opt stack 0
  6758                           pclatu	equ	0xFFB
  6759                           pclath	equ	0xFFA
  6760                           tblptru	equ	0xFF8
  6761                           tblptrh	equ	0xFF7
  6762                           tblptrl	equ	0xFF6
  6763                           tablat	equ	0xFF5
  6764                           prodh	equ	0xFF4
  6765                           prodl	equ	0xFF3
  6766                           intcon	equ	0xFF2
  6767                           intcon3	equ	0xFF0
  6768                           postinc0	equ	0xFEE
  6769                           fsr0h	equ	0xFEA
  6770                           fsr0l	equ	0xFE9
  6771                           wreg	equ	0xFE8
  6772                           fsr1h	equ	0xFE2
  6773                           fsr1l	equ	0xFE1
  6774                           indf2	equ	0xFDF
  6775                           postinc2	equ	0xFDE
  6776                           postdec2	equ	0xFDD
  6777                           fsr2h	equ	0xFDA
  6778                           fsr2l	equ	0xFD9
  6779                           status	equ	0xFD8
  6780                           
  6781 ;; *************** function i2_stopOperation *****************
  6782 ;; Defined at:
  6783 ;;		line 341 in file "../main.c"
  6784 ;; Parameters:    Size  Location     Type
  6785 ;;		None
  6786 ;; Auto vars:     Size  Location     Type
  6787 ;;		None
  6788 ;; Return value:  Size  Location     Type
  6789 ;;                  1    wreg      void 
  6790 ;; Registers used:
  6791 ;;		wreg, status,2, status,0, cstack
  6792 ;; Tracked objects:
  6793 ;;		On entry : 0/0
  6794 ;;		On exit  : 0/0
  6795 ;;		Unchanged: 0/0
  6796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6798 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6799 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6800 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6801 ;;Total ram usage:        0 bytes
  6802 ;; Hardware stack levels used:    1
  6803 ;; Hardware stack levels required when called:    1
  6804 ;; This function calls:
  6805 ;;		i2___awdiv
  6806 ;;		i2___awmod
  6807 ;; This function is called by:
  6808 ;;		_switchMenu
  6809 ;;		_ISR
  6810 ;; This function uses a non-reentrant model
  6811 ;;
  6812                           
  6813                           	psect	text24
  6814  001412                     __ptext24:
  6815                           	opt stack 0
  6816  001412                     i2_stopOperation:
  6817                           	opt stack 25
  6818                           
  6819                           ;main.c: 342: T0CONbits.TMR0ON = 0;
  6820                           
  6821                           ;incstack = 0
  6822  001412  9ED5               	bcf	4053,7,c	;volatile
  6823                           
  6824                           ;main.c: 343: T1CONbits.TMR1ON = 0;
  6825  001414  90CD               	bcf	4045,0,c	;volatile
  6826                           
  6827                           ;main.c: 344: TMR0 = 55770;
  6828  001416  0ED9               	movlw	217
  6829  001418  6ED7               	movwf	4055,c	;volatile
  6830  00141A  0EDA               	movlw	218
  6831  00141C  6ED6               	movwf	4054,c	;volatile
  6832                           
  6833                           ;main.c: 345: TMR1 = 58035;
  6834  00141E  0EE2               	movlw	226
  6835  001420  6ECF               	movwf	4047,c	;volatile
  6836  001422  0EB3               	movlw	179
  6837  001424  6ECE               	movwf	4046,c	;volatile
  6838                           
  6839                           ;main.c: 346: num9V = count9V;
  6840  001426  C091  F097         	movff	_count9V,_num9V
  6841                           
  6842                           ;main.c: 347: numC = countC;
  6843  00142A  C093  F09A         	movff	_countC,_numC
  6844                           
  6845                           ;main.c: 348: numAA = countAA;
  6846  00142E  C092  F098         	movff	_countAA,_numAA
  6847                           
  6848                           ;main.c: 349: numDrain = countDrain;
  6849  001432  C094  F09B         	movff	_countDrain,_numDrain
  6850                           
  6851                           ;main.c: 350: count9V = 0;
  6852  001436  0E00               	movlw	0
  6853  001438  0100               	movlb	0	; () banked
  6854  00143A  6F91               	movwf	_count9V& (0+255),b
  6855                           
  6856                           ;main.c: 351: countC = 0;
  6857  00143C  0E00               	movlw	0
  6858  00143E  0100               	movlb	0	; () banked
  6859  001440  6F93               	movwf	_countC& (0+255),b
  6860                           
  6861                           ;main.c: 352: countAA = 0;
  6862  001442  0E00               	movlw	0
  6863  001444  0100               	movlb	0	; () banked
  6864  001446  6F92               	movwf	_countAA& (0+255),b
  6865                           
  6866                           ;main.c: 353: countDrain = 0;
  6867  001448  0E00               	movlw	0
  6868  00144A  0100               	movlb	0	; () banked
  6869  00144C  6F94               	movwf	_countDrain& (0+255),b
  6870                           
  6871                           ; BSR set to: 0
  6872                           ;main.c: 354: min = opTimer / 60;
  6873  00144E  C046  F001         	movff	_opTimer,i2___awdiv@dividend
  6874  001452  6A02               	clrf	i2___awdiv@dividend+1,c
  6875  001454  0E00               	movlw	0
  6876  001456  6E04               	movwf	i2___awdiv@divisor+1,c
  6877  001458  0E3C               	movlw	60
  6878  00145A  6E03               	movwf	i2___awdiv@divisor,c
  6879  00145C  EC18  F00B         	call	i2___awdiv	;wreg free
  6880  001460  5001               	movf	?i2___awdiv,w,c
  6881  001462  0100               	movlb	0	; () banked
  6882  001464  6F96               	movwf	_min& (0+255),b
  6883                           
  6884                           ; BSR set to: 0
  6885                           ;main.c: 355: sec = opTimer % 60;
  6886  001466  C046  F001         	movff	_opTimer,i2___awmod@dividend
  6887  00146A  6A02               	clrf	i2___awmod@dividend+1,c
  6888  00146C  0E00               	movlw	0
  6889  00146E  6E04               	movwf	i2___awmod@divisor+1,c
  6890  001470  0E3C               	movlw	60
  6891  001472  6E03               	movwf	i2___awmod@divisor,c
  6892  001474  ECD3  F00B         	call	i2___awmod	;wreg free
  6893  001478  5001               	movf	?i2___awmod,w,c
  6894  00147A  0100               	movlb	0	; () banked
  6895  00147C  6F9C               	movwf	_sec& (0+255),b
  6896                           
  6897                           ;main.c: 356: opTimer = 0;
  6898  00147E  0E00               	movlw	0
  6899  001480  6E46               	movwf	_opTimer,c
  6900                           
  6901                           ;main.c: 357: solOnTimer = 0;
  6902  001482  0E00               	movlw	0
  6903  001484  6E49               	movwf	_solOnTimer,c
  6904                           
  6905                           ;main.c: 358: doneTimer = 0;
  6906  001486  0E00               	movlw	0
  6907  001488  6E45               	movwf	_doneTimer,c
  6908                           
  6909                           ;main.c: 359: doneSorting = 0;
  6910  00148A  0E00               	movlw	0
  6911  00148C  0100               	movlb	0	; () banked
  6912  00148E  6F95               	movwf	_doneSorting& (0+255),b
  6913                           
  6914                           ;main.c: 360: waitMotor = 0;
  6915  001490  0E00               	movlw	0
  6916  001492  0100               	movlb	0	; () banked
  6917  001494  6FA1               	movwf	_waitMotor& (0+255),b
  6918                           
  6919                           ;main.c: 361: stepGear = 0;
  6920  001496  0E00               	movlw	0
  6921  001498  0100               	movlb	0	; () banked
  6922  00149A  6F90               	movwf	(_stepGear+1)& (0+255),b
  6923  00149C  0E00               	movlw	0
  6924  00149E  6F8F               	movwf	_stepGear& (0+255),b
  6925                           
  6926                           ;main.c: 362: plat1Left = 0;
  6927  0014A0  0E00               	movlw	0
  6928  0014A2  0100               	movlb	0	; () banked
  6929  0014A4  6F88               	movwf	(_plat1Left+1)& (0+255),b
  6930  0014A6  0E00               	movlw	0
  6931  0014A8  6F87               	movwf	_plat1Left& (0+255),b
  6932                           
  6933                           ;main.c: 363: plat1Right = 0;
  6934  0014AA  0E00               	movlw	0
  6935  0014AC  0100               	movlb	0	; () banked
  6936  0014AE  6F8A               	movwf	(_plat1Right+1)& (0+255),b
  6937  0014B0  0E00               	movlw	0
  6938  0014B2  6F89               	movwf	_plat1Right& (0+255),b
  6939                           
  6940                           ;main.c: 364: plat2Left = 0;
  6941  0014B4  0E00               	movlw	0
  6942  0014B6  0100               	movlb	0	; () banked
  6943  0014B8  6F8C               	movwf	(_plat2Left+1)& (0+255),b
  6944  0014BA  0E00               	movlw	0
  6945  0014BC  6F8B               	movwf	_plat2Left& (0+255),b
  6946                           
  6947                           ;main.c: 365: plat2Right = 0;
  6948  0014BE  0E00               	movlw	0
  6949  0014C0  0100               	movlb	0	; () banked
  6950  0014C2  6F8E               	movwf	(_plat2Right+1)& (0+255),b
  6951  0014C4  0E00               	movlw	0
  6952  0014C6  6F8D               	movwf	_plat2Right& (0+255),b
  6953                           
  6954                           ;main.c: 366: turn2BackLeft = 0;
  6955  0014C8  0E00               	movlw	0
  6956  0014CA  0100               	movlb	0	; () banked
  6957  0014CC  6F9F               	movwf	_turn2BackLeft& (0+255),b
  6958                           
  6959                           ;main.c: 367: turn1BackLeft = 0;
  6960  0014CE  0E00               	movlw	0
  6961  0014D0  0100               	movlb	0	; () banked
  6962  0014D2  6F9D               	movwf	_turn1BackLeft& (0+255),b
  6963                           
  6964                           ;main.c: 368: turn2BackRight = 0;
  6965  0014D4  0E00               	movlw	0
  6966  0014D6  0100               	movlb	0	; () banked
  6967  0014D8  6FA0               	movwf	_turn2BackRight& (0+255),b
  6968                           
  6969                           ;main.c: 369: turn1BackRight = 0;
  6970  0014DA  0E00               	movlw	0
  6971  0014DC  0100               	movlb	0	; () banked
  6972  0014DE  6F9E               	movwf	_turn1BackRight& (0+255),b
  6973                           
  6974                           ; BSR set to: 0
  6975                           ;main.c: 370: LATEbits.LE0 = 0;;
  6976  0014E0  908D               	bcf	3981,0,c	;volatile
  6977                           
  6978                           ; BSR set to: 0
  6979                           ;main.c: 371: LATEbits.LE1 = 0;;
  6980  0014E2  928D               	bcf	3981,1,c	;volatile
  6981                           
  6982                           ; BSR set to: 0
  6983                           ;main.c: 372: LATCbits.LC5 = 0;;
  6984  0014E4  9A8B               	bcf	3979,5,c	;volatile
  6985                           
  6986                           ; BSR set to: 0
  6987                           ;main.c: 373: LATDbits.LD0 = 0;;
  6988  0014E6  908C               	bcf	3980,0,c	;volatile
  6989                           
  6990                           ; BSR set to: 0
  6991                           ;main.c: 374: LATDbits.LD1 = 0;;
  6992  0014E8  928C               	bcf	3980,1,c	;volatile
  6993                           
  6994                           ; BSR set to: 0
  6995                           ;main.c: 375: LATEbits.LE2 = 0;;
  6996  0014EA  948D               	bcf	3981,2,c	;volatile
  6997                           
  6998                           ; BSR set to: 0
  6999                           ;main.c: 376: LATAbits.LA3 = 0;;
  7000  0014EC  9689               	bcf	3977,3,c	;volatile
  7001                           
  7002                           ; BSR set to: 0
  7003                           ;main.c: 377: LATAbits.LA4 = 0;;
  7004  0014EE  9889               	bcf	3977,4,c	;volatile
  7005                           
  7006                           ; BSR set to: 0
  7007                           ;main.c: 378: LATAbits.LA5 = 0;;
  7008  0014F0  9A89               	bcf	3977,5,c	;volatile
  7009                           
  7010                           ; BSR set to: 0
  7011                           ;main.c: 379: LATBbits.LB0 = 0;;
  7012  0014F2  908A               	bcf	3978,0,c	;volatile
  7013                           
  7014                           ; BSR set to: 0
  7015                           ;main.c: 380: LATBbits.LB2 = 0;;
  7016  0014F4  948A               	bcf	3978,2,c	;volatile
  7017                           
  7018                           ; BSR set to: 0
  7019                           ;main.c: 381: LATCbits.LC6 = 0;;
  7020  0014F6  9C8B               	bcf	3979,6,c	;volatile
  7021                           
  7022                           ; BSR set to: 0
  7023                           ;main.c: 382: LATAbits.LA6 = 0;;
  7024  0014F8  9C89               	bcf	3977,6,c	;volatile
  7025                           
  7026                           ; BSR set to: 0
  7027                           ;main.c: 383: LATCbits.LC1= 0;;
  7028  0014FA  928B               	bcf	3979,1,c	;volatile
  7029                           
  7030                           ; BSR set to: 0
  7031                           ;main.c: 384: LATAbits.LA7 = 0;;
  7032  0014FC  9E89               	bcf	3977,7,c	;volatile
  7033                           
  7034                           ; BSR set to: 0
  7035                           ;main.c: 385: LATCbits.LC2 = 0;;
  7036  0014FE  948B               	bcf	3979,2,c	;volatile
  7037                           
  7038                           ; BSR set to: 0
  7039                           ;main.c: 386: LATCbits.LC0 = 0;;
  7040  001500  908B               	bcf	3979,0,c	;volatile
  7041                           
  7042                           ; BSR set to: 0
  7043  001502  0012               	return		;funcret
  7044  001504                     __end_ofi2_stopOperation:
  7045                           	opt stack 0
  7046                           pclatu	equ	0xFFB
  7047                           pclath	equ	0xFFA
  7048                           tblptru	equ	0xFF8
  7049                           tblptrh	equ	0xFF7
  7050                           tblptrl	equ	0xFF6
  7051                           tablat	equ	0xFF5
  7052                           prodh	equ	0xFF4
  7053                           prodl	equ	0xFF3
  7054                           intcon	equ	0xFF2
  7055                           intcon3	equ	0xFF0
  7056                           postinc0	equ	0xFEE
  7057                           fsr0h	equ	0xFEA
  7058                           fsr0l	equ	0xFE9
  7059                           wreg	equ	0xFE8
  7060                           fsr1h	equ	0xFE2
  7061                           fsr1l	equ	0xFE1
  7062                           indf2	equ	0xFDF
  7063                           postinc2	equ	0xFDE
  7064                           postdec2	equ	0xFDD
  7065                           fsr2h	equ	0xFDA
  7066                           fsr2l	equ	0xFD9
  7067                           status	equ	0xFD8
  7068                           
  7069 ;; *************** function i2___awmod *****************
  7070 ;; Defined at:
  7071 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  7072 ;; Parameters:    Size  Location     Type
  7073 ;;  dividend        2    0[COMRAM] int 
  7074 ;;  divisor         2    2[COMRAM] int 
  7075 ;; Auto vars:     Size  Location     Type
  7076 ;;  __awmod         1    5[COMRAM] unsigned char 
  7077 ;;  __awmod         1    4[COMRAM] unsigned char 
  7078 ;; Return value:  Size  Location     Type
  7079 ;;                  2    0[COMRAM] int 
  7080 ;; Registers used:
  7081 ;;		wreg, status,2, status,0
  7082 ;; Tracked objects:
  7083 ;;		On entry : 0/0
  7084 ;;		On exit  : 0/0
  7085 ;;		Unchanged: 0/0
  7086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7087 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7088 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7089 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7090 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7091 ;;Total ram usage:        6 bytes
  7092 ;; Hardware stack levels used:    1
  7093 ;; This function calls:
  7094 ;;		Nothing
  7095 ;; This function is called by:
  7096 ;;		_ISR
  7097 ;;		i2_stopOperation
  7098 ;; This function uses a non-reentrant model
  7099 ;;
  7100                           
  7101                           	psect	text25
  7102  0017A6                     __ptext25:
  7103                           	opt stack 0
  7104  0017A6                     i2___awmod:
  7105                           	opt stack 25
  7106                           
  7107                           ; BSR set to: 0
  7108                           ;incstack = 0
  7109  0017A6  0E00               	movlw	0
  7110  0017A8  6E06               	movwf	i2___awmod@sign,c
  7111  0017AA  AE02               	btfss	i2___awmod@dividend+1,7,c
  7112  0017AC  D006               	goto	i2l2561
  7113  0017AE  6C01               	negf	i2___awmod@dividend,c
  7114  0017B0  1E02               	comf	i2___awmod@dividend+1,f,c
  7115  0017B2  B0D8               	btfsc	status,0,c
  7116  0017B4  2A02               	incf	i2___awmod@dividend+1,f,c
  7117  0017B6  0E01               	movlw	1
  7118  0017B8  6E06               	movwf	i2___awmod@sign,c
  7119  0017BA                     i2l2561:
  7120  0017BA  AE04               	btfss	i2___awmod@divisor+1,7,c
  7121  0017BC  D004               	goto	i2l2565
  7122  0017BE  6C03               	negf	i2___awmod@divisor,c
  7123  0017C0  1E04               	comf	i2___awmod@divisor+1,f,c
  7124  0017C2  B0D8               	btfsc	status,0,c
  7125  0017C4  2A04               	incf	i2___awmod@divisor+1,f,c
  7126  0017C6                     i2l2565:
  7127  0017C6  5003               	movf	i2___awmod@divisor,w,c
  7128  0017C8  1004               	iorwf	i2___awmod@divisor+1,w,c
  7129  0017CA  B4D8               	btfsc	status,2,c
  7130  0017CC  D018               	goto	i2l2581
  7131  0017CE  0E01               	movlw	1
  7132  0017D0  6E05               	movwf	i2___awmod@counter,c
  7133  0017D2  D004               	goto	i2l2571
  7134  0017D4                     i2l2569:
  7135  0017D4  90D8               	bcf	status,0,c
  7136  0017D6  3603               	rlcf	i2___awmod@divisor,f,c
  7137  0017D8  3604               	rlcf	i2___awmod@divisor+1,f,c
  7138  0017DA  2A05               	incf	i2___awmod@counter,f,c
  7139  0017DC                     i2l2571:
  7140  0017DC  AE04               	btfss	i2___awmod@divisor+1,7,c
  7141  0017DE  D7FA               	goto	i2l2569
  7142  0017E0                     i2l2573:
  7143  0017E0  5003               	movf	i2___awmod@divisor,w,c
  7144  0017E2  5C01               	subwf	i2___awmod@dividend,w,c
  7145  0017E4  5004               	movf	i2___awmod@divisor+1,w,c
  7146  0017E6  5802               	subwfb	i2___awmod@dividend+1,w,c
  7147  0017E8  A0D8               	btfss	status,0,c
  7148  0017EA  D004               	goto	i2l2577
  7149  0017EC  5003               	movf	i2___awmod@divisor,w,c
  7150  0017EE  5E01               	subwf	i2___awmod@dividend,f,c
  7151  0017F0  5004               	movf	i2___awmod@divisor+1,w,c
  7152  0017F2  5A02               	subwfb	i2___awmod@dividend+1,f,c
  7153  0017F4                     i2l2577:
  7154  0017F4  90D8               	bcf	status,0,c
  7155  0017F6  3204               	rrcf	i2___awmod@divisor+1,f,c
  7156  0017F8  3203               	rrcf	i2___awmod@divisor,f,c
  7157  0017FA  2E05               	decfsz	i2___awmod@counter,f,c
  7158  0017FC  D7F1               	goto	i2l2573
  7159  0017FE                     i2l2581:
  7160  0017FE  5006               	movf	i2___awmod@sign,w,c
  7161  001800  B4D8               	btfsc	status,2,c
  7162  001802  D004               	goto	i2l2585
  7163  001804  6C01               	negf	i2___awmod@dividend,c
  7164  001806  1E02               	comf	i2___awmod@dividend+1,f,c
  7165  001808  B0D8               	btfsc	status,0,c
  7166  00180A  2A02               	incf	i2___awmod@dividend+1,f,c
  7167  00180C                     i2l2585:
  7168  00180C  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
  7169  001810  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
  7170  001814  0012               	return	
  7171  001816                     __end_ofi2___awmod:
  7172                           	opt stack 0
  7173                           pclatu	equ	0xFFB
  7174                           pclath	equ	0xFFA
  7175                           tblptru	equ	0xFF8
  7176                           tblptrh	equ	0xFF7
  7177                           tblptrl	equ	0xFF6
  7178                           tablat	equ	0xFF5
  7179                           prodh	equ	0xFF4
  7180                           prodl	equ	0xFF3
  7181                           intcon	equ	0xFF2
  7182                           intcon3	equ	0xFF0
  7183                           postinc0	equ	0xFEE
  7184                           fsr0h	equ	0xFEA
  7185                           fsr0l	equ	0xFE9
  7186                           wreg	equ	0xFE8
  7187                           fsr1h	equ	0xFE2
  7188                           fsr1l	equ	0xFE1
  7189                           indf2	equ	0xFDF
  7190                           postinc2	equ	0xFDE
  7191                           postdec2	equ	0xFDD
  7192                           fsr2h	equ	0xFDA
  7193                           fsr2l	equ	0xFD9
  7194                           status	equ	0xFD8
  7195                           
  7196 ;; *************** function i2___awdiv *****************
  7197 ;; Defined at:
  7198 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  7199 ;; Parameters:    Size  Location     Type
  7200 ;;  dividend        2    0[COMRAM] int 
  7201 ;;  divisor         2    2[COMRAM] int 
  7202 ;; Auto vars:     Size  Location     Type
  7203 ;;  __awdiv         2    6[COMRAM] int 
  7204 ;;  __awdiv         1    5[COMRAM] unsigned char 
  7205 ;;  __awdiv         1    4[COMRAM] unsigned char 
  7206 ;; Return value:  Size  Location     Type
  7207 ;;                  2    0[COMRAM] int 
  7208 ;; Registers used:
  7209 ;;		wreg, status,2, status,0
  7210 ;; Tracked objects:
  7211 ;;		On entry : 0/0
  7212 ;;		On exit  : 0/0
  7213 ;;		Unchanged: 0/0
  7214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7215 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7216 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7217 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7218 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7219 ;;Total ram usage:        8 bytes
  7220 ;; Hardware stack levels used:    1
  7221 ;; This function calls:
  7222 ;;		Nothing
  7223 ;; This function is called by:
  7224 ;;		_ISR
  7225 ;;		i2_stopOperation
  7226 ;; This function uses a non-reentrant model
  7227 ;;
  7228                           
  7229                           	psect	text26
  7230  001630                     __ptext26:
  7231                           	opt stack 0
  7232  001630                     i2___awdiv:
  7233                           	opt stack 25
  7234                           
  7235                           ;incstack = 0
  7236  001630  0E00               	movlw	0
  7237  001632  6E06               	movwf	i2___awdiv@sign,c
  7238  001634  AE04               	btfss	i2___awdiv@divisor+1,7,c
  7239  001636  D006               	goto	i2l2517
  7240  001638  6C03               	negf	i2___awdiv@divisor,c
  7241  00163A  1E04               	comf	i2___awdiv@divisor+1,f,c
  7242  00163C  B0D8               	btfsc	status,0,c
  7243  00163E  2A04               	incf	i2___awdiv@divisor+1,f,c
  7244  001640  0E01               	movlw	1
  7245  001642  6E06               	movwf	i2___awdiv@sign,c
  7246  001644                     i2l2517:
  7247  001644  AE02               	btfss	i2___awdiv@dividend+1,7,c
  7248  001646  D006               	goto	i2l2523
  7249  001648  6C01               	negf	i2___awdiv@dividend,c
  7250  00164A  1E02               	comf	i2___awdiv@dividend+1,f,c
  7251  00164C  B0D8               	btfsc	status,0,c
  7252  00164E  2A02               	incf	i2___awdiv@dividend+1,f,c
  7253  001650  0E01               	movlw	1
  7254  001652  1A06               	xorwf	i2___awdiv@sign,f,c
  7255  001654                     i2l2523:
  7256  001654  0E00               	movlw	0
  7257  001656  6E08               	movwf	i2___awdiv@quotient+1,c
  7258  001658  0E00               	movlw	0
  7259  00165A  6E07               	movwf	i2___awdiv@quotient,c
  7260  00165C  5003               	movf	i2___awdiv@divisor,w,c
  7261  00165E  1004               	iorwf	i2___awdiv@divisor+1,w,c
  7262  001660  B4D8               	btfsc	status,2,c
  7263  001662  D01C               	goto	i2l2545
  7264  001664  0E01               	movlw	1
  7265  001666  6E05               	movwf	i2___awdiv@counter,c
  7266  001668  D004               	goto	i2l2531
  7267  00166A                     i2l2529:
  7268  00166A  90D8               	bcf	status,0,c
  7269  00166C  3603               	rlcf	i2___awdiv@divisor,f,c
  7270  00166E  3604               	rlcf	i2___awdiv@divisor+1,f,c
  7271  001670  2A05               	incf	i2___awdiv@counter,f,c
  7272  001672                     i2l2531:
  7273  001672  AE04               	btfss	i2___awdiv@divisor+1,7,c
  7274  001674  D7FA               	goto	i2l2529
  7275  001676                     i2l2533:
  7276  001676  90D8               	bcf	status,0,c
  7277  001678  3607               	rlcf	i2___awdiv@quotient,f,c
  7278  00167A  3608               	rlcf	i2___awdiv@quotient+1,f,c
  7279  00167C  5003               	movf	i2___awdiv@divisor,w,c
  7280  00167E  5C01               	subwf	i2___awdiv@dividend,w,c
  7281  001680  5004               	movf	i2___awdiv@divisor+1,w,c
  7282  001682  5802               	subwfb	i2___awdiv@dividend+1,w,c
  7283  001684  A0D8               	btfss	status,0,c
  7284  001686  D005               	goto	i2l2541
  7285  001688  5003               	movf	i2___awdiv@divisor,w,c
  7286  00168A  5E01               	subwf	i2___awdiv@dividend,f,c
  7287  00168C  5004               	movf	i2___awdiv@divisor+1,w,c
  7288  00168E  5A02               	subwfb	i2___awdiv@dividend+1,f,c
  7289  001690  8007               	bsf	i2___awdiv@quotient,0,c
  7290  001692                     i2l2541:
  7291  001692  90D8               	bcf	status,0,c
  7292  001694  3204               	rrcf	i2___awdiv@divisor+1,f,c
  7293  001696  3203               	rrcf	i2___awdiv@divisor,f,c
  7294  001698  2E05               	decfsz	i2___awdiv@counter,f,c
  7295  00169A  D7ED               	goto	i2l2533
  7296  00169C                     i2l2545:
  7297  00169C  5006               	movf	i2___awdiv@sign,w,c
  7298  00169E  B4D8               	btfsc	status,2,c
  7299  0016A0  D004               	goto	i2l2549
  7300  0016A2  6C07               	negf	i2___awdiv@quotient,c
  7301  0016A4  1E08               	comf	i2___awdiv@quotient+1,f,c
  7302  0016A6  B0D8               	btfsc	status,0,c
  7303  0016A8  2A08               	incf	i2___awdiv@quotient+1,f,c
  7304  0016AA                     i2l2549:
  7305  0016AA  C007  F001         	movff	i2___awdiv@quotient,?i2___awdiv
  7306  0016AE  C008  F002         	movff	i2___awdiv@quotient+1,?i2___awdiv+1
  7307  0016B2  0012               	return	
  7308  0016B4                     __end_ofi2___awdiv:
  7309                           	opt stack 0
  7310                           pclatu	equ	0xFFB
  7311                           pclath	equ	0xFFA
  7312                           tblptru	equ	0xFF8
  7313                           tblptrh	equ	0xFF7
  7314                           tblptrl	equ	0xFF6
  7315                           tablat	equ	0xFF5
  7316                           prodh	equ	0xFF4
  7317                           prodl	equ	0xFF3
  7318                           intcon	equ	0xFF2
  7319                           intcon3	equ	0xFF0
  7320                           postinc0	equ	0xFEE
  7321                           fsr0h	equ	0xFEA
  7322                           fsr0l	equ	0xFE9
  7323                           wreg	equ	0xFE8
  7324                           fsr1h	equ	0xFE2
  7325                           fsr1l	equ	0xFE1
  7326                           indf2	equ	0xFDF
  7327                           postinc2	equ	0xFDE
  7328                           postdec2	equ	0xFDD
  7329                           fsr2h	equ	0xFDA
  7330                           fsr2l	equ	0xFD9
  7331                           status	equ	0xFD8
  7332                           
  7333 ;; *************** function i2_printf *****************
  7334 ;; Defined at:
  7335 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  7336 ;; Parameters:    Size  Location     Type
  7337 ;;  f               2   12[COMRAM] PTR const unsigned char 
  7338 ;;		 -> STR_24(22), STR_23(17), STR_22(17), STR_21(17), 
  7339 ;;		 -> STR_20(23), STR_19(23), STR_18(21), STR_17(17), 
  7340 ;;		 -> STR_16(21), STR_15(17), STR_14(21), STR_13(17), 
  7341 ;;		 -> STR_12(19), STR_11(17), STR_10(19), STR_9(17), 
  7342 ;;		 -> STR_8(25), STR_7(17), STR_6(17), STR_5(17), 
  7343 ;;		 -> STR_4(18), STR_3(17), STR_2(17), STR_1(17), 
  7344 ;; Auto vars:     Size  Location     Type
  7345 ;;  printf          4    0        struct .
  7346 ;;  printf          3    0        PTR const unsigned char 
  7347 ;;  printf          2   29[COMRAM] int 
  7348 ;;  printf          2   26[COMRAM] unsigned int 
  7349 ;;  printf          2   23[COMRAM] PTR void [1]
  7350 ;;		 -> ?i2_printf(2), ?_printf(2), 
  7351 ;;  printf          2    0        unsigned int 
  7352 ;;  printf          1   31[COMRAM] char 
  7353 ;;  printf          1   28[COMRAM] unsigned char 
  7354 ;;  printf          1   25[COMRAM] char 
  7355 ;;  printf          1   22[COMRAM] unsigned char 
  7356 ;; Return value:  Size  Location     Type
  7357 ;;                  2   12[COMRAM] int 
  7358 ;; Registers used:
  7359 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7360 ;; Tracked objects:
  7361 ;;		On entry : 0/0
  7362 ;;		On exit  : 0/0
  7363 ;;		Unchanged: 0/0
  7364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7365 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7366 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7367 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7368 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7369 ;;Total ram usage:       20 bytes
  7370 ;; Hardware stack levels used:    1
  7371 ;; Hardware stack levels required when called:    2
  7372 ;; This function calls:
  7373 ;;		i2___lwdiv
  7374 ;;		i2___lwmod
  7375 ;;		i2___wmul
  7376 ;;		i2_isdigit
  7377 ;;		i2_putch
  7378 ;; This function is called by:
  7379 ;;		_switchMenu
  7380 ;;		_ISR
  7381 ;; This function uses a non-reentrant model
  7382 ;;
  7383                           
  7384                           	psect	text27
  7385  000DC4                     __ptext27:
  7386                           	opt stack 0
  7387  000DC4                     i2_printf:
  7388                           	opt stack 24
  7389                           
  7390                           ;doprnt.c: 466: va_list ap;
  7391                           ;doprnt.c: 499: signed char c;
  7392                           ;doprnt.c: 501: int width;
  7393                           ;doprnt.c: 506: signed char prec;
  7394                           ;doprnt.c: 508: unsigned char flag;
  7395                           ;doprnt.c: 523: union {
  7396                           ;doprnt.c: 524: unsigned long vd;
  7397                           ;doprnt.c: 525: double integ;
  7398                           ;doprnt.c: 526: } tmpval;
  7399                           ;doprnt.c: 528: unsigned int val;
  7400                           ;doprnt.c: 529: unsigned len;
  7401                           ;doprnt.c: 530: const char * cp;
  7402                           ;doprnt.c: 533: *ap = __va_start();
  7403                           
  7404                           ;incstack = 0
  7405  000DC4  0E0F               	movlw	low (?i2_printf+2)
  7406  000DC6  6E18               	movwf	i2printf@ap,c
  7407  000DC8  0E00               	movlw	high (?i2_printf+2)
  7408  000DCA  6E19               	movwf	i2printf@ap+1,c
  7409                           
  7410                           ;doprnt.c: 536: while(c = *f++) {
  7411  000DCC  D174               	goto	i2l2991
  7412  000DCE                     i2l2865:
  7413                           
  7414                           ;doprnt.c: 538: if(c != '%')
  7415  000DCE  0E25               	movlw	37
  7416  000DD0  1820               	xorwf	i2printf@c,w,c
  7417  000DD2  B4D8               	btfsc	status,2,c
  7418  000DD4  D004               	goto	i2l2869
  7419                           
  7420                           ;doprnt.c: 540: {
  7421                           ;doprnt.c: 541: (putch(c) );
  7422  000DD6  5020               	movf	i2printf@c,w,c
  7423  000DD8  ECD7  F00D         	call	i2_putch
  7424                           
  7425                           ;doprnt.c: 542: continue;
  7426  000DDC  D16C               	goto	i2l2991
  7427  000DDE                     i2l2869:
  7428                           
  7429                           ;doprnt.c: 543: }
  7430                           ;doprnt.c: 546: width = 0;
  7431  000DDE  0E00               	movlw	0
  7432  000DE0  6E1F               	movwf	i2printf@width+1,c
  7433  000DE2  0E00               	movlw	0
  7434  000DE4  6E1E               	movwf	i2printf@width,c
  7435                           
  7436                           ;doprnt.c: 548: flag = 0;
  7437  000DE6  0E00               	movlw	0
  7438  000DE8  6E1D               	movwf	i2printf@flag,c
  7439                           
  7440                           ;doprnt.c: 551: switch(*f) {
  7441                           
  7442                           ;doprnt.c: 550: for(;;) {
  7443  000DEA  D003               	goto	i2l2875
  7444  000DEC                     i2l2871:
  7445                           
  7446                           ;doprnt.c: 580: flag |= 0x04;
  7447  000DEC  841D               	bsf	i2printf@flag,2,c
  7448                           
  7449                           ;doprnt.c: 581: f++;
  7450  000DEE  4A0D               	infsnz	i2printf@f,f,c
  7451  000DF0  2A0E               	incf	i2printf@f+1,f,c
  7452  000DF2                     i2l2875:
  7453  000DF2  C00D  FFF6         	movff	i2printf@f,tblptrl
  7454  000DF6  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7455  000DFA                     	if	0	;tblptru may be non-zero
  7456  000DFA                     	endif
  7457  000DFA                     	if	0	;tblptru may be non-zero
  7458  000DFA                     	endif
  7459  000DFA  0008               	tblrd		*
  7460  000DFC  50F5               	movf	tablat,w,c
  7461                           
  7462                           ; Switch size 1, requested type "space"
  7463                           ; Number of cases is 1, Range of values is 48 to 48
  7464                           ; switch strategies available:
  7465                           ; Name         Instructions Cycles
  7466                           ; simple_byte            4     3 (average)
  7467                           ;	Chosen strategy is simple_byte
  7468  000DFE  0A30               	xorlw	48	; case 48
  7469  000E00  B4D8               	btfsc	status,2,c
  7470  000E02  D7F4               	goto	i2l2871
  7471                           
  7472                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  7473                           
  7474                           ;doprnt.c: 586: }
  7475                           
  7476                           ;doprnt.c: 585: break;
  7477  000E04  C00D  FFF6         	movff	i2printf@f,tblptrl
  7478  000E08  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7479  000E0C                     	if	0	;tblptru may be non-zero
  7480  000E0C                     	endif
  7481  000E0C                     	if	0	;tblptru may be non-zero
  7482  000E0C                     	endif
  7483  000E0C  0008               	tblrd		*
  7484  000E0E  50F5               	movf	tablat,w,c
  7485  000E10  ECA9  F00D         	call	i2_isdigit
  7486  000E14  A0D8               	btfss	status,0,c
  7487  000E16  D035               	goto	i2l2893
  7488                           
  7489                           ;doprnt.c: 598: width = 0;
  7490  000E18  0E00               	movlw	0
  7491  000E1A  6E1F               	movwf	i2printf@width+1,c
  7492  000E1C  0E00               	movlw	0
  7493  000E1E  6E1E               	movwf	i2printf@width,c
  7494  000E20                     i2l2881:
  7495                           
  7496                           ;doprnt.c: 600: width *= 10;
  7497  000E20  C01E  F001         	movff	i2printf@width,i2___wmul@multiplier
  7498  000E24  C01F  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
  7499  000E28  0E00               	movlw	0
  7500  000E2A  6E04               	movwf	i2___wmul@multiplicand+1,c
  7501  000E2C  0E0A               	movlw	10
  7502  000E2E  6E03               	movwf	i2___wmul@multiplicand,c
  7503  000E30  EC87  F00D         	call	i2___wmul	;wreg free
  7504  000E34  C001  F01E         	movff	?i2___wmul,i2printf@width
  7505  000E38  C002  F01F         	movff	?i2___wmul+1,i2printf@width+1
  7506                           
  7507                           ;doprnt.c: 601: width += *f++ - '0';
  7508  000E3C  0ED0               	movlw	208
  7509  000E3E  6E13               	movwf	??i2_printf& (0+255),c
  7510  000E40  0EFF               	movlw	255
  7511  000E42  6E14               	movwf	(??i2_printf+1)& (0+255),c
  7512  000E44  C00D  FFF6         	movff	i2printf@f,tblptrl
  7513  000E48  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7514  000E4C                     	if	0	;tblptru may be non-zero
  7515  000E4C                     	endif
  7516  000E4C                     	if	0	;tblptru may be non-zero
  7517  000E4C                     	endif
  7518  000E4C  0008               	tblrd		*
  7519  000E4E  50F5               	movf	tablat,w,c
  7520  000E50  6E15               	movwf	(??i2_printf+2)& (0+255),c
  7521  000E52  6A16               	clrf	(??i2_printf+3)& (0+255),c
  7522  000E54  5013               	movf	??i2_printf,w,c
  7523  000E56  2615               	addwf	??i2_printf+2,f,c
  7524  000E58  5014               	movf	??i2_printf+1,w,c
  7525  000E5A  2216               	addwfc	??i2_printf+3,f,c
  7526  000E5C  5015               	movf	??i2_printf+2,w,c
  7527  000E5E  261E               	addwf	i2printf@width,f,c
  7528  000E60  5016               	movf	??i2_printf+3,w,c
  7529  000E62  221F               	addwfc	i2printf@width+1,f,c
  7530  000E64  4A0D               	infsnz	i2printf@f,f,c
  7531  000E66  2A0E               	incf	i2printf@f+1,f,c
  7532                           
  7533                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  7534  000E68  C00D  FFF6         	movff	i2printf@f,tblptrl
  7535  000E6C  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7536  000E70                     	if	0	;tblptru may be non-zero
  7537  000E70                     	endif
  7538  000E70                     	if	0	;tblptru may be non-zero
  7539  000E70                     	endif
  7540  000E70  0008               	tblrd		*
  7541  000E72  50F5               	movf	tablat,w,c
  7542  000E74  ECA9  F00D         	call	i2_isdigit
  7543  000E78  A0D8               	btfss	status,0,c
  7544  000E7A  D003               	goto	i2l2893
  7545  000E7C  D7D1               	goto	i2l2881
  7546  000E7E                     i2l2889:
  7547                           
  7548                           ;doprnt.c: 721: flag |= 0x80;
  7549  000E7E  8E1D               	bsf	i2printf@flag,7,c
  7550                           
  7551                           ;doprnt.c: 723: break;
  7552  000E80  D017               	goto	i2l433
  7553  000E82                     i2l2893:
  7554  000E82  C00D  FFF6         	movff	i2printf@f,tblptrl
  7555  000E86  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7556  000E8A  4A0D               	infsnz	i2printf@f,f,c
  7557  000E8C  2A0E               	incf	i2printf@f+1,f,c
  7558  000E8E                     	if	0	;tblptru may be non-zero
  7559  000E8E                     	endif
  7560  000E8E                     	if	0	;tblptru may be non-zero
  7561  000E8E                     	endif
  7562  000E8E  0008               	tblrd		*
  7563  000E90  CFF5 F020          	movff	tablat,i2printf@c
  7564  000E94  5020               	movf	i2printf@c,w,c
  7565                           
  7566                           ; Switch size 1, requested type "space"
  7567                           ; Number of cases is 4, Range of values is 0 to 120
  7568                           ; switch strategies available:
  7569                           ; Name         Instructions Cycles
  7570                           ; simple_byte           13     7 (average)
  7571                           ;	Chosen strategy is simple_byte
  7572  000E96  0A00               	xorlw	0	; case 0
  7573  000E98  B4D8               	btfsc	status,2,c
  7574  000E9A  0012               	return	
  7575  000E9C  0A64               	xorlw	100	; case 100
  7576  000E9E  B4D8               	btfsc	status,2,c
  7577  000EA0  D007               	goto	i2l433
  7578  000EA2  0A0D               	xorlw	13	; case 105
  7579  000EA4  B4D8               	btfsc	status,2,c
  7580  000EA6  D004               	goto	i2l433
  7581  000EA8  0A11               	xorlw	17	; case 120
  7582  000EAA  B4D8               	btfsc	status,2,c
  7583  000EAC  D7E8               	goto	i2l2889
  7584  000EAE  D103               	goto	i2l2991
  7585  000EB0                     i2l433:
  7586                           
  7587                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  7588  000EB0  BE1D               	btfsc	i2printf@flag,7,c
  7589  000EB2  D015               	goto	i2l2905
  7590                           
  7591                           ;doprnt.c: 1253: {
  7592                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  7593  000EB4  C018  FFD9         	movff	i2printf@ap,fsr2l
  7594  000EB8  C019  FFDA         	movff	i2printf@ap+1,fsr2h
  7595  000EBC  CFDE F01B          	movff	postinc2,i2printf@val
  7596  000EC0  CFDD F01C          	movff	postdec2,i2printf@val+1
  7597  000EC4  0E02               	movlw	2
  7598  000EC6  2618               	addwf	i2printf@ap,f,c
  7599  000EC8  0E00               	movlw	0
  7600  000ECA  2219               	addwfc	i2printf@ap+1,f,c
  7601                           
  7602                           ;doprnt.c: 1261: if((int)val < 0) {
  7603  000ECC  AE1C               	btfss	i2printf@val+1,7,c
  7604  000ECE  D044               	goto	i2l2939
  7605                           
  7606                           ;doprnt.c: 1262: flag |= 0x03;
  7607  000ED0  0E03               	movlw	3
  7608  000ED2  121D               	iorwf	i2printf@flag,f,c
  7609                           
  7610                           ;doprnt.c: 1263: val = -val;
  7611  000ED4  6C1B               	negf	i2printf@val,c
  7612  000ED6  1E1C               	comf	i2printf@val+1,f,c
  7613  000ED8  B0D8               	btfsc	status,0,c
  7614  000EDA  2A1C               	incf	i2printf@val+1,f,c
  7615                           
  7616                           ;doprnt.c: 1264: }
  7617                           ;doprnt.c: 1266: }
  7618  000EDC  D03D               	goto	i2l2939
  7619  000EDE                     i2l2905:
  7620                           
  7621                           ;doprnt.c: 1268: else
  7622                           ;doprnt.c: 1273: {
  7623                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  7624  000EDE  C018  FFD9         	movff	i2printf@ap,fsr2l
  7625  000EE2  C019  FFDA         	movff	i2printf@ap+1,fsr2h
  7626  000EE6  CFDE F01B          	movff	postinc2,i2printf@val
  7627  000EEA  CFDD F01C          	movff	postdec2,i2printf@val+1
  7628  000EEE  0E02               	movlw	2
  7629  000EF0  2618               	addwf	i2printf@ap,f,c
  7630  000EF2  0E00               	movlw	0
  7631  000EF4  2219               	addwfc	i2printf@ap+1,f,c
  7632                           
  7633                           ;doprnt.c: 1287: }
  7634                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  7635  000EF6  D030               	goto	i2l2939
  7636  000EF8                     i2l2909:
  7637                           
  7638                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7639  000EF8  0E01               	movlw	1
  7640  000EFA  6E20               	movwf	i2printf@c,c
  7641  000EFC                     i2l2911:
  7642  000EFC  0E05               	movlw	5
  7643  000EFE  1820               	xorwf	i2printf@c,w,c
  7644  000F00  B4D8               	btfsc	status,2,c
  7645  000F02  D032               	goto	i2l2941
  7646                           
  7647                           ;doprnt.c: 1306: if(val < dpowers[c])
  7648  000F04  5020               	movf	i2printf@c,w,c
  7649  000F06  0D02               	mullw	2
  7650  000F08  0E56               	movlw	low _dpowers
  7651  000F0A  24F3               	addwf	prodl,w,c
  7652  000F0C  6EF6               	movwf	tblptrl,c
  7653  000F0E  0EFE               	movlw	high _dpowers
  7654  000F10  20F4               	addwfc	prodh,w,c
  7655  000F12  6EF7               	movwf	tblptrh,c
  7656  000F14                     	if	0	;There are less than 3 active tblptr bytes
  7657  000F14                     	endif
  7658  000F14  0009               	tblrd		*+
  7659  000F16  50F5               	movf	tablat,w,c
  7660  000F18  5C1B               	subwf	i2printf@val,w,c
  7661  000F1A  0009               	tblrd		*+
  7662  000F1C  50F5               	movf	tablat,w,c
  7663  000F1E  581C               	subwfb	i2printf@val+1,w,c
  7664  000F20  A0D8               	btfss	status,0,c
  7665  000F22  D022               	goto	i2l2941
  7666                           
  7667                           ;doprnt.c: 1307: break;
  7668  000F24  2A20               	incf	i2printf@c,f,c
  7669  000F26  D7EA               	goto	i2l2911
  7670  000F28                     i2l2923:
  7671                           
  7672                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  7673  000F28  0E01               	movlw	1
  7674  000F2A  6E20               	movwf	i2printf@c,c
  7675  000F2C                     i2l2925:
  7676  000F2C  0E04               	movlw	4
  7677  000F2E  1820               	xorwf	i2printf@c,w,c
  7678  000F30  B4D8               	btfsc	status,2,c
  7679  000F32  D01A               	goto	i2l2941
  7680                           
  7681                           ;doprnt.c: 1317: if(val < hexpowers[c])
  7682  000F34  5020               	movf	i2printf@c,w,c
  7683  000F36  0D02               	mullw	2
  7684  000F38  0E60               	movlw	low _hexpowers
  7685  000F3A  24F3               	addwf	prodl,w,c
  7686  000F3C  6EF6               	movwf	tblptrl,c
  7687  000F3E  0EFE               	movlw	high _hexpowers
  7688  000F40  20F4               	addwfc	prodh,w,c
  7689  000F42  6EF7               	movwf	tblptrh,c
  7690  000F44                     	if	0	;There are less than 3 active tblptr bytes
  7691  000F44                     	endif
  7692  000F44  0009               	tblrd		*+
  7693  000F46  50F5               	movf	tablat,w,c
  7694  000F48  5C1B               	subwf	i2printf@val,w,c
  7695  000F4A  0009               	tblrd		*+
  7696  000F4C  50F5               	movf	tablat,w,c
  7697  000F4E  581C               	subwfb	i2printf@val+1,w,c
  7698  000F50  A0D8               	btfss	status,0,c
  7699  000F52  D00A               	goto	i2l2941
  7700                           
  7701                           ;doprnt.c: 1318: break;
  7702  000F54  2A20               	incf	i2printf@c,f,c
  7703  000F56  D7EA               	goto	i2l2925
  7704  000F58                     i2l2939:
  7705  000F58  501D               	movf	i2printf@flag,w,c
  7706  000F5A  0B80               	andlw	128
  7707                           
  7708                           ; Switch size 1, requested type "space"
  7709                           ; Number of cases is 2, Range of values is 0 to 128
  7710                           ; switch strategies available:
  7711                           ; Name         Instructions Cycles
  7712                           ; simple_byte            7     4 (average)
  7713                           ;	Chosen strategy is simple_byte
  7714  000F5C  0A00               	xorlw	0	; case 0
  7715  000F5E  B4D8               	btfsc	status,2,c
  7716  000F60  D7CB               	goto	i2l2909
  7717  000F62  0A80               	xorlw	128	; case 128
  7718  000F64  B4D8               	btfsc	status,2,c
  7719  000F66  D7E0               	goto	i2l2923
  7720  000F68                     i2l2941:
  7721                           
  7722                           ;doprnt.c: 1345: if(width && flag & 0x03)
  7723  000F68  501E               	movf	i2printf@width,w,c
  7724  000F6A  101F               	iorwf	i2printf@width+1,w,c
  7725  000F6C  B4D8               	btfsc	status,2,c
  7726  000F6E  D009               	goto	i2l2947
  7727  000F70  C01D  F013         	movff	i2printf@flag,??i2_printf
  7728  000F74  0E03               	movlw	3
  7729  000F76  1613               	andwf	??i2_printf,f,c
  7730  000F78  B4D8               	btfsc	status,2,c
  7731  000F7A  D003               	goto	i2l2947
  7732                           
  7733                           ;doprnt.c: 1346: width--;
  7734  000F7C  061E               	decf	i2printf@width,f,c
  7735  000F7E  A0D8               	btfss	status,0,c
  7736  000F80  061F               	decf	i2printf@width+1,f,c
  7737  000F82                     i2l2947:
  7738                           
  7739                           ;doprnt.c: 1381: if(width > c)
  7740  000F82  0E80               	movlw	128
  7741  000F84  BE20               	btfsc	i2printf@c,7,c
  7742  000F86  0E7F               	movlw	127
  7743  000F88  6E13               	movwf	??i2_printf& (0+255),c
  7744  000F8A  501E               	movf	i2printf@width,w,c
  7745  000F8C  5C20               	subwf	i2printf@c,w,c
  7746  000F8E  501F               	movf	i2printf@width+1,w,c
  7747  000F90  0A80               	xorlw	128
  7748  000F92  5813               	subwfb	??i2_printf& (0+255),w,c
  7749  000F94  B0D8               	btfsc	status,0,c
  7750  000F96  D007               	goto	i2l2951
  7751                           
  7752                           ;doprnt.c: 1382: width -= c;
  7753  000F98  5020               	movf	i2printf@c,w,c
  7754  000F9A  5E1E               	subwf	i2printf@width,f,c
  7755  000F9C  0E00               	movlw	0
  7756  000F9E  BE20               	btfsc	i2printf@c,7,c
  7757  000FA0  0EFF               	movlw	255
  7758  000FA2  5A1F               	subwfb	i2printf@width+1,f,c
  7759  000FA4  D004               	goto	i2l2953
  7760  000FA6                     i2l2951:
  7761                           
  7762                           ;doprnt.c: 1383: else
  7763                           ;doprnt.c: 1384: width = 0;
  7764  000FA6  0E00               	movlw	0
  7765  000FA8  6E1F               	movwf	i2printf@width+1,c
  7766  000FAA  0E00               	movlw	0
  7767  000FAC  6E1E               	movwf	i2printf@width,c
  7768  000FAE                     i2l2953:
  7769                           
  7770                           ;doprnt.c: 1387: if(flag & 0x04) {
  7771  000FAE  A41D               	btfss	i2printf@flag,2,c
  7772  000FB0  D014               	goto	i2l2965
  7773                           
  7774                           ;doprnt.c: 1392: if(flag & 0x03)
  7775  000FB2  C01D  F013         	movff	i2printf@flag,??i2_printf
  7776  000FB6  0E03               	movlw	3
  7777  000FB8  1613               	andwf	??i2_printf,f,c
  7778  000FBA  B4D8               	btfsc	status,2,c
  7779  000FBC  D003               	goto	i2l2959
  7780                           
  7781                           ;doprnt.c: 1393: (putch('-') );
  7782  000FBE  0E2D               	movlw	45
  7783  000FC0  ECD7  F00D         	call	i2_putch
  7784  000FC4                     i2l2959:
  7785                           
  7786                           ;doprnt.c: 1415: if(width)
  7787  000FC4  501E               	movf	i2printf@width,w,c
  7788  000FC6  101F               	iorwf	i2printf@width+1,w,c
  7789  000FC8  B4D8               	btfsc	status,2,c
  7790  000FCA  D01E               	goto	i2l2975
  7791                           
  7792                           ;doprnt.c: 1417: (putch('0') );
  7793                           
  7794                           ;doprnt.c: 1416: do
  7795  000FCC  0E30               	movlw	48
  7796  000FCE  ECD7  F00D         	call	i2_putch
  7797                           
  7798                           ;doprnt.c: 1418: while(--width);
  7799  000FD2  061E               	decf	i2printf@width,f,c
  7800  000FD4  A0D8               	btfss	status,0,c
  7801  000FD6  061F               	decf	i2printf@width+1,f,c
  7802  000FD8  D7F5               	goto	i2l2959
  7803  000FDA                     i2l2965:
  7804                           
  7805                           ;doprnt.c: 1422: {
  7806                           ;doprnt.c: 1424: if(width
  7807                           ;doprnt.c: 1428: )
  7808  000FDA  501E               	movf	i2printf@width,w,c
  7809  000FDC  101F               	iorwf	i2printf@width+1,w,c
  7810  000FDE  B4D8               	btfsc	status,2,c
  7811  000FE0  D00A               	goto	i2l2971
  7812  000FE2                     i2l2967:
  7813                           
  7814                           ;doprnt.c: 1430: (putch(' ') );
  7815  000FE2  0E20               	movlw	32
  7816  000FE4  ECD7  F00D         	call	i2_putch
  7817                           
  7818                           ;doprnt.c: 1431: while(--width);
  7819  000FE8  061E               	decf	i2printf@width,f,c
  7820  000FEA  A0D8               	btfss	status,0,c
  7821  000FEC  061F               	decf	i2printf@width+1,f,c
  7822  000FEE  501E               	movf	i2printf@width,w,c
  7823  000FF0  101F               	iorwf	i2printf@width+1,w,c
  7824  000FF2  A4D8               	btfss	status,2,c
  7825  000FF4  D7F6               	goto	i2l2967
  7826  000FF6                     i2l2971:
  7827                           
  7828                           ;doprnt.c: 1438: if(flag & 0x03)
  7829  000FF6  C01D  F013         	movff	i2printf@flag,??i2_printf
  7830  000FFA  0E03               	movlw	3
  7831  000FFC  1613               	andwf	??i2_printf,f,c
  7832  000FFE  B4D8               	btfsc	status,2,c
  7833  001000  D003               	goto	i2l2975
  7834                           
  7835                           ;doprnt.c: 1439: (putch('-') );
  7836  001002  0E2D               	movlw	45
  7837  001004  ECD7  F00D         	call	i2_putch
  7838  001008                     i2l2975:
  7839                           
  7840                           ;doprnt.c: 1469: }
  7841                           ;doprnt.c: 1472: prec = c;
  7842  001008  C020  F01A         	movff	i2printf@c,i2printf@prec
  7843                           
  7844                           ;doprnt.c: 1474: while(prec--) {
  7845  00100C  D050               	goto	i2l2989
  7846  00100E                     i2l2977:
  7847                           
  7848                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7849  00100E  501A               	movf	i2printf@prec,w,c
  7850  001010  0D02               	mullw	2
  7851  001012  0E56               	movlw	low _dpowers
  7852  001014  24F3               	addwf	prodl,w,c
  7853  001016  6EF6               	movwf	tblptrl,c
  7854  001018  0EFE               	movlw	high _dpowers
  7855  00101A  20F4               	addwfc	prodh,w,c
  7856  00101C  6EF7               	movwf	tblptrh,c
  7857  00101E                     	if	0	;There are less than 3 active tblptr bytes
  7858  00101E                     	endif
  7859  00101E  0009               	tblrd		*+
  7860  001020  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  7861  001024  000A               	tblrd		*-
  7862  001026  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  7863  00102A  C01B  F001         	movff	i2printf@val,i2___lwdiv@dividend
  7864  00102E  C01C  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  7865  001032  EC62  F00C         	call	i2___lwdiv	;wreg free
  7866  001036  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
  7867  00103A  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
  7868  00103E  0E00               	movlw	0
  7869  001040  6E0B               	movwf	i2___lwmod@divisor+1,c
  7870  001042  0E0A               	movlw	10
  7871  001044  6E0A               	movwf	i2___lwmod@divisor,c
  7872  001046  EC40  F00D         	call	i2___lwmod	;wreg free
  7873  00104A  5008               	movf	?i2___lwmod,w,c
  7874  00104C  0F30               	addlw	48
  7875  00104E  6E20               	movwf	i2printf@c,c
  7876                           
  7877                           ;doprnt.c: 1491: break;
  7878  001050  D02B               	goto	i2l2987
  7879  001052                     i2l2979:
  7880                           
  7881                           ;doprnt.c: 1499: {
  7882                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  7883  001052  C01B  F001         	movff	i2printf@val,i2___lwdiv@dividend
  7884  001056  C01C  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  7885  00105A  501A               	movf	i2printf@prec,w,c
  7886  00105C  0D02               	mullw	2
  7887  00105E  0E60               	movlw	low _hexpowers
  7888  001060  24F3               	addwf	prodl,w,c
  7889  001062  6EF6               	movwf	tblptrl,c
  7890  001064  0EFE               	movlw	high _hexpowers
  7891  001066  20F4               	addwfc	prodh,w,c
  7892  001068  6EF7               	movwf	tblptrh,c
  7893  00106A                     	if	0	;There are less than 3 active tblptr bytes
  7894  00106A                     	endif
  7895  00106A  0009               	tblrd		*+
  7896  00106C  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  7897  001070  000A               	tblrd		*-
  7898  001072  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  7899  001076  EC62  F00C         	call	i2___lwdiv	;wreg free
  7900  00107A  5001               	movf	?i2___lwdiv,w,c
  7901  00107C  0B0F               	andlw	15
  7902  00107E  6E17               	movwf	i2printf@idx,c
  7903                           
  7904                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  7905  001080  5017               	movf	i2printf@idx,w,c
  7906  001082  0D01               	mullw	1
  7907  001084  0EFF               	movlw	low STR_25
  7908  001086  24F3               	addwf	prodl,w,c
  7909  001088  6EF6               	movwf	tblptrl,c
  7910  00108A  0EFE               	movlw	high STR_25
  7911  00108C  20F4               	addwfc	prodh,w,c
  7912  00108E  6EF7               	movwf	tblptrh,c
  7913  001090                     	if	0	;There are less than 3 active tblptr bytes
  7914  001090                     	endif
  7915  001090  0008               	tblrd		*
  7916  001092  CFF5 F020          	movff	tablat,i2printf@c
  7917                           
  7918                           ;doprnt.c: 1523: }
  7919                           
  7920                           ;doprnt.c: 1508: }
  7921                           ;doprnt.c: 1510: break;
  7922  001096  D008               	goto	i2l2987
  7923  001098                     i2l2985:
  7924  001098  501D               	movf	i2printf@flag,w,c
  7925  00109A  0B80               	andlw	128
  7926                           
  7927                           ; Switch size 1, requested type "space"
  7928                           ; Number of cases is 2, Range of values is 0 to 128
  7929                           ; switch strategies available:
  7930                           ; Name         Instructions Cycles
  7931                           ; simple_byte            7     4 (average)
  7932                           ;	Chosen strategy is simple_byte
  7933  00109C  0A00               	xorlw	0	; case 0
  7934  00109E  B4D8               	btfsc	status,2,c
  7935  0010A0  D7B6               	goto	i2l2977
  7936  0010A2  0A80               	xorlw	128	; case 128
  7937  0010A4  B4D8               	btfsc	status,2,c
  7938  0010A6  D7D5               	goto	i2l2979
  7939  0010A8                     i2l2987:
  7940                           
  7941                           ;doprnt.c: 1524: (putch(c) );
  7942  0010A8  5020               	movf	i2printf@c,w,c
  7943  0010AA  ECD7  F00D         	call	i2_putch
  7944  0010AE                     i2l2989:
  7945  0010AE  061A               	decf	i2printf@prec,f,c
  7946  0010B0  281A               	incf	i2printf@prec,w,c
  7947  0010B2  A4D8               	btfss	status,2,c
  7948  0010B4  D7F1               	goto	i2l2985
  7949  0010B6                     i2l2991:
  7950  0010B6  C00D  FFF6         	movff	i2printf@f,tblptrl
  7951  0010BA  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7952  0010BE  4A0D               	infsnz	i2printf@f,f,c
  7953  0010C0  2A0E               	incf	i2printf@f+1,f,c
  7954  0010C2                     	if	0	;tblptru may be non-zero
  7955  0010C2                     	endif
  7956  0010C2                     	if	0	;tblptru may be non-zero
  7957  0010C2                     	endif
  7958  0010C2  0008               	tblrd		*
  7959  0010C4  CFF5 F020          	movff	tablat,i2printf@c
  7960  0010C8  5020               	movf	i2printf@c,w,c
  7961  0010CA  B4D8               	btfsc	status,2,c
  7962  0010CC  0012               	return	
  7963  0010CE  D67F               	goto	i2l2865
  7964  0010D0                     __end_ofi2_printf:
  7965                           	opt stack 0
  7966                           pclatu	equ	0xFFB
  7967                           pclath	equ	0xFFA
  7968                           tblptru	equ	0xFF8
  7969                           tblptrh	equ	0xFF7
  7970                           tblptrl	equ	0xFF6
  7971                           tablat	equ	0xFF5
  7972                           prodh	equ	0xFF4
  7973                           prodl	equ	0xFF3
  7974                           intcon	equ	0xFF2
  7975                           intcon3	equ	0xFF0
  7976                           postinc0	equ	0xFEE
  7977                           fsr0h	equ	0xFEA
  7978                           fsr0l	equ	0xFE9
  7979                           wreg	equ	0xFE8
  7980                           fsr1h	equ	0xFE2
  7981                           fsr1l	equ	0xFE1
  7982                           indf2	equ	0xFDF
  7983                           postinc2	equ	0xFDE
  7984                           postdec2	equ	0xFDD
  7985                           fsr2h	equ	0xFDA
  7986                           fsr2l	equ	0xFD9
  7987                           status	equ	0xFD8
  7988                           
  7989 ;; *************** function i2_putch *****************
  7990 ;; Defined at:
  7991 ;;		line 23 in file "../lcd.c"
  7992 ;; Parameters:    Size  Location     Type
  7993 ;;  data            1    wreg     unsigned char 
  7994 ;; Auto vars:     Size  Location     Type
  7995 ;;  data            1    2[COMRAM] unsigned char 
  7996 ;; Return value:  Size  Location     Type
  7997 ;;                  1    wreg      void 
  7998 ;; Registers used:
  7999 ;;		wreg, status,2, status,0, cstack
  8000 ;; Tracked objects:
  8001 ;;		On entry : 0/0
  8002 ;;		On exit  : 0/0
  8003 ;;		Unchanged: 0/0
  8004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8005 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8006 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8007 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8008 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8009 ;;Total ram usage:        1 bytes
  8010 ;; Hardware stack levels used:    1
  8011 ;; Hardware stack levels required when called:    1
  8012 ;; This function calls:
  8013 ;;		i2_lcdNibble
  8014 ;; This function is called by:
  8015 ;;		i2_printf
  8016 ;; This function uses a non-reentrant model
  8017 ;;
  8018                           
  8019                           	psect	text28
  8020  001BAE                     __ptext28:
  8021                           	opt stack 0
  8022  001BAE                     i2_putch:
  8023                           	opt stack 24
  8024                           
  8025                           ;incstack = 0
  8026                           ;i2putch@data stored from wreg
  8027  001BAE  6E03               	movwf	i2putch@data,c
  8028                           
  8029                           ;lcd.c: 24: LATDbits.LATD2 = 1;
  8030  001BB0  848C               	bsf	3980,2,c	;volatile
  8031                           
  8032                           ;lcd.c: 25: lcdNibble(data);
  8033  001BB2  5003               	movf	i2putch@data,w,c
  8034  001BB4  ECB2  F00C         	call	i2_lcdNibble
  8035  001BB8  0012               	return		;funcret
  8036  001BBA                     __end_ofi2_putch:
  8037                           	opt stack 0
  8038                           pclatu	equ	0xFFB
  8039                           pclath	equ	0xFFA
  8040                           tblptru	equ	0xFF8
  8041                           tblptrh	equ	0xFF7
  8042                           tblptrl	equ	0xFF6
  8043                           tablat	equ	0xFF5
  8044                           prodh	equ	0xFF4
  8045                           prodl	equ	0xFF3
  8046                           intcon	equ	0xFF2
  8047                           intcon3	equ	0xFF0
  8048                           postinc0	equ	0xFEE
  8049                           fsr0h	equ	0xFEA
  8050                           fsr0l	equ	0xFE9
  8051                           wreg	equ	0xFE8
  8052                           fsr1h	equ	0xFE2
  8053                           fsr1l	equ	0xFE1
  8054                           indf2	equ	0xFDF
  8055                           postinc2	equ	0xFDE
  8056                           postdec2	equ	0xFDD
  8057                           fsr2h	equ	0xFDA
  8058                           fsr2l	equ	0xFD9
  8059                           status	equ	0xFD8
  8060                           
  8061 ;; *************** function i2_isdigit *****************
  8062 ;; Defined at:
  8063 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  8064 ;; Parameters:    Size  Location     Type
  8065 ;;  c               1    wreg     unsigned char 
  8066 ;; Auto vars:     Size  Location     Type
  8067 ;;  c               1    2[COMRAM] unsigned char 
  8068 ;; Return value:  Size  Location     Type
  8069 ;;		None               void
  8070 ;; Registers used:
  8071 ;;		wreg, status,2, status,0
  8072 ;; Tracked objects:
  8073 ;;		On entry : 0/0
  8074 ;;		On exit  : 0/0
  8075 ;;		Unchanged: 0/0
  8076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8077 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8078 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8079 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8080 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8081 ;;Total ram usage:        3 bytes
  8082 ;; Hardware stack levels used:    1
  8083 ;; This function calls:
  8084 ;;		Nothing
  8085 ;; This function is called by:
  8086 ;;		i2_printf
  8087 ;; This function uses a non-reentrant model
  8088 ;;
  8089                           
  8090                           	psect	text29
  8091  001B52                     __ptext29:
  8092                           	opt stack 0
  8093  001B52                     i2_isdigit:
  8094                           	opt stack 25
  8095                           
  8096                           ;incstack = 0
  8097                           ;i2isdigit@c stored from wreg
  8098  001B52  6E03               	movwf	i2isdigit@c,c
  8099  001B54  0E00               	movlw	0
  8100  001B56  6E02               	movwf	i2_isdigit$931,c
  8101  001B58  0E3A               	movlw	58
  8102  001B5A  6003               	cpfslt	i2isdigit@c,c
  8103  001B5C  D005               	goto	i2l2597
  8104  001B5E  0E2F               	movlw	47
  8105  001B60  6403               	cpfsgt	i2isdigit@c,c
  8106  001B62  D002               	goto	i2l2597
  8107  001B64  0E01               	movlw	1
  8108  001B66  6E02               	movwf	i2_isdigit$931,c
  8109  001B68                     i2l2597:
  8110  001B68  C002  F001         	movff	i2_isdigit$931,??i2_isdigit
  8111  001B6C  3001               	rrcf	??i2_isdigit,w,c
  8112  001B6E  0012               	return	
  8113  001B70                     __end_ofi2_isdigit:
  8114                           	opt stack 0
  8115                           pclatu	equ	0xFFB
  8116                           pclath	equ	0xFFA
  8117                           tblptru	equ	0xFF8
  8118                           tblptrh	equ	0xFF7
  8119                           tblptrl	equ	0xFF6
  8120                           tablat	equ	0xFF5
  8121                           prodh	equ	0xFF4
  8122                           prodl	equ	0xFF3
  8123                           intcon	equ	0xFF2
  8124                           intcon3	equ	0xFF0
  8125                           postinc0	equ	0xFEE
  8126                           fsr0h	equ	0xFEA
  8127                           fsr0l	equ	0xFE9
  8128                           wreg	equ	0xFE8
  8129                           fsr1h	equ	0xFE2
  8130                           fsr1l	equ	0xFE1
  8131                           indf2	equ	0xFDF
  8132                           postinc2	equ	0xFDE
  8133                           postdec2	equ	0xFDD
  8134                           fsr2h	equ	0xFDA
  8135                           fsr2l	equ	0xFD9
  8136                           status	equ	0xFD8
  8137                           
  8138 ;; *************** function i2___wmul *****************
  8139 ;; Defined at:
  8140 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  8141 ;; Parameters:    Size  Location     Type
  8142 ;;  multiplier      2    0[COMRAM] unsigned int 
  8143 ;;  multiplicand    2    2[COMRAM] unsigned int 
  8144 ;; Auto vars:     Size  Location     Type
  8145 ;;  __wmul          2    4[COMRAM] unsigned int 
  8146 ;; Return value:  Size  Location     Type
  8147 ;;                  2    0[COMRAM] unsigned int 
  8148 ;; Registers used:
  8149 ;;		wreg, status,2, status,0, prodl, prodh
  8150 ;; Tracked objects:
  8151 ;;		On entry : 0/0
  8152 ;;		On exit  : 0/0
  8153 ;;		Unchanged: 0/0
  8154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8155 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8156 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8157 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8158 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8159 ;;Total ram usage:        6 bytes
  8160 ;; Hardware stack levels used:    1
  8161 ;; This function calls:
  8162 ;;		Nothing
  8163 ;; This function is called by:
  8164 ;;		i2_printf
  8165 ;; This function uses a non-reentrant model
  8166 ;;
  8167                           
  8168                           	psect	text30
  8169  001B0E                     __ptext30:
  8170                           	opt stack 0
  8171  001B0E                     i2___wmul:
  8172                           	opt stack 25
  8173                           
  8174                           ;incstack = 0
  8175  001B0E  5001               	movf	i2___wmul@multiplier,w,c
  8176  001B10  0203               	mulwf	i2___wmul@multiplicand,c
  8177  001B12  CFF3 F005          	movff	prodl,i2___wmul@product
  8178  001B16  CFF4 F006          	movff	prodh,i2___wmul@product+1
  8179  001B1A  5001               	movf	i2___wmul@multiplier,w,c
  8180  001B1C  0204               	mulwf	i2___wmul@multiplicand+1,c
  8181  001B1E  50F3               	movf	prodl,w,c
  8182  001B20  2606               	addwf	i2___wmul@product+1,f,c
  8183  001B22  5002               	movf	i2___wmul@multiplier+1,w,c
  8184  001B24  0203               	mulwf	i2___wmul@multiplicand,c
  8185  001B26  50F3               	movf	prodl,w,c
  8186  001B28  2606               	addwf	i2___wmul@product+1,f,c
  8187  001B2A  C005  F001         	movff	i2___wmul@product,?i2___wmul
  8188  001B2E  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
  8189  001B32  0012               	return	
  8190  001B34                     __end_ofi2___wmul:
  8191                           	opt stack 0
  8192                           pclatu	equ	0xFFB
  8193                           pclath	equ	0xFFA
  8194                           tblptru	equ	0xFF8
  8195                           tblptrh	equ	0xFF7
  8196                           tblptrl	equ	0xFF6
  8197                           tablat	equ	0xFF5
  8198                           prodh	equ	0xFF4
  8199                           prodl	equ	0xFF3
  8200                           intcon	equ	0xFF2
  8201                           intcon3	equ	0xFF0
  8202                           postinc0	equ	0xFEE
  8203                           fsr0h	equ	0xFEA
  8204                           fsr0l	equ	0xFE9
  8205                           wreg	equ	0xFE8
  8206                           fsr1h	equ	0xFE2
  8207                           fsr1l	equ	0xFE1
  8208                           indf2	equ	0xFDF
  8209                           postinc2	equ	0xFDE
  8210                           postdec2	equ	0xFDD
  8211                           fsr2h	equ	0xFDA
  8212                           fsr2l	equ	0xFD9
  8213                           status	equ	0xFD8
  8214                           
  8215 ;; *************** function i2___lwmod *****************
  8216 ;; Defined at:
  8217 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  8218 ;; Parameters:    Size  Location     Type
  8219 ;;  dividend        2    7[COMRAM] unsigned int 
  8220 ;;  divisor         2    9[COMRAM] unsigned int 
  8221 ;; Auto vars:     Size  Location     Type
  8222 ;;  __lwmod         1   11[COMRAM] unsigned char 
  8223 ;; Return value:  Size  Location     Type
  8224 ;;                  2    7[COMRAM] unsigned int 
  8225 ;; Registers used:
  8226 ;;		wreg, status,2, status,0
  8227 ;; Tracked objects:
  8228 ;;		On entry : 0/0
  8229 ;;		On exit  : 0/0
  8230 ;;		Unchanged: 0/0
  8231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8232 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8233 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8234 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8235 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8236 ;;Total ram usage:        5 bytes
  8237 ;; Hardware stack levels used:    1
  8238 ;; This function calls:
  8239 ;;		Nothing
  8240 ;; This function is called by:
  8241 ;;		i2_printf
  8242 ;; This function uses a non-reentrant model
  8243 ;;
  8244                           
  8245                           	psect	text31
  8246  001A80                     __ptext31:
  8247                           	opt stack 0
  8248  001A80                     i2___lwmod:
  8249                           	opt stack 25
  8250                           
  8251                           ;incstack = 0
  8252  001A80  500A               	movf	i2___lwmod@divisor,w,c
  8253  001A82  100B               	iorwf	i2___lwmod@divisor+1,w,c
  8254  001A84  B4D8               	btfsc	status,2,c
  8255  001A86  D018               	goto	i2l888
  8256  001A88  0E01               	movlw	1
  8257  001A8A  6E0C               	movwf	i2___lwmod@counter,c
  8258  001A8C  D004               	goto	i2l2629
  8259  001A8E                     i2l2627:
  8260  001A8E  90D8               	bcf	status,0,c
  8261  001A90  360A               	rlcf	i2___lwmod@divisor,f,c
  8262  001A92  360B               	rlcf	i2___lwmod@divisor+1,f,c
  8263  001A94  2A0C               	incf	i2___lwmod@counter,f,c
  8264  001A96                     i2l2629:
  8265  001A96  AE0B               	btfss	i2___lwmod@divisor+1,7,c
  8266  001A98  D7FA               	goto	i2l2627
  8267  001A9A                     i2l2631:
  8268  001A9A  500A               	movf	i2___lwmod@divisor,w,c
  8269  001A9C  5C08               	subwf	i2___lwmod@dividend,w,c
  8270  001A9E  500B               	movf	i2___lwmod@divisor+1,w,c
  8271  001AA0  5809               	subwfb	i2___lwmod@dividend+1,w,c
  8272  001AA2  A0D8               	btfss	status,0,c
  8273  001AA4  D004               	goto	i2l2635
  8274  001AA6  500A               	movf	i2___lwmod@divisor,w,c
  8275  001AA8  5E08               	subwf	i2___lwmod@dividend,f,c
  8276  001AAA  500B               	movf	i2___lwmod@divisor+1,w,c
  8277  001AAC  5A09               	subwfb	i2___lwmod@dividend+1,f,c
  8278  001AAE                     i2l2635:
  8279  001AAE  90D8               	bcf	status,0,c
  8280  001AB0  320B               	rrcf	i2___lwmod@divisor+1,f,c
  8281  001AB2  320A               	rrcf	i2___lwmod@divisor,f,c
  8282  001AB4  2E0C               	decfsz	i2___lwmod@counter,f,c
  8283  001AB6  D7F1               	goto	i2l2631
  8284  001AB8                     i2l888:
  8285  001AB8  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
  8286  001ABC  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
  8287  001AC0  0012               	return		;funcret
  8288  001AC2                     __end_ofi2___lwmod:
  8289                           	opt stack 0
  8290                           pclatu	equ	0xFFB
  8291                           pclath	equ	0xFFA
  8292                           tblptru	equ	0xFF8
  8293                           tblptrh	equ	0xFF7
  8294                           tblptrl	equ	0xFF6
  8295                           tablat	equ	0xFF5
  8296                           prodh	equ	0xFF4
  8297                           prodl	equ	0xFF3
  8298                           intcon	equ	0xFF2
  8299                           intcon3	equ	0xFF0
  8300                           postinc0	equ	0xFEE
  8301                           fsr0h	equ	0xFEA
  8302                           fsr0l	equ	0xFE9
  8303                           wreg	equ	0xFE8
  8304                           fsr1h	equ	0xFE2
  8305                           fsr1l	equ	0xFE1
  8306                           indf2	equ	0xFDF
  8307                           postinc2	equ	0xFDE
  8308                           postdec2	equ	0xFDD
  8309                           fsr2h	equ	0xFDA
  8310                           fsr2l	equ	0xFD9
  8311                           status	equ	0xFD8
  8312                           
  8313 ;; *************** function i2___lwdiv *****************
  8314 ;; Defined at:
  8315 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  8316 ;; Parameters:    Size  Location     Type
  8317 ;;  dividend        2    0[COMRAM] unsigned int 
  8318 ;;  divisor         2    2[COMRAM] unsigned int 
  8319 ;; Auto vars:     Size  Location     Type
  8320 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  8321 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  8322 ;; Return value:  Size  Location     Type
  8323 ;;                  2    0[COMRAM] unsigned int 
  8324 ;; Registers used:
  8325 ;;		wreg, status,2, status,0
  8326 ;; Tracked objects:
  8327 ;;		On entry : 0/0
  8328 ;;		On exit  : 0/0
  8329 ;;		Unchanged: 0/0
  8330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8331 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8332 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8333 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8334 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8335 ;;Total ram usage:        7 bytes
  8336 ;; Hardware stack levels used:    1
  8337 ;; This function calls:
  8338 ;;		Nothing
  8339 ;; This function is called by:
  8340 ;;		i2_printf
  8341 ;; This function uses a non-reentrant model
  8342 ;;
  8343                           
  8344                           	psect	text32
  8345  0018C4                     __ptext32:
  8346                           	opt stack 0
  8347  0018C4                     i2___lwdiv:
  8348                           	opt stack 25
  8349                           
  8350                           ;incstack = 0
  8351  0018C4  0E00               	movlw	0
  8352  0018C6  6E06               	movwf	i2___lwdiv@quotient+1,c
  8353  0018C8  0E00               	movlw	0
  8354  0018CA  6E05               	movwf	i2___lwdiv@quotient,c
  8355  0018CC  5003               	movf	i2___lwdiv@divisor,w,c
  8356  0018CE  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  8357  0018D0  B4D8               	btfsc	status,2,c
  8358  0018D2  D01C               	goto	i2l878
  8359  0018D4  0E01               	movlw	1
  8360  0018D6  6E07               	movwf	i2___lwdiv@counter,c
  8361  0018D8  D004               	goto	i2l2609
  8362  0018DA                     i2l2607:
  8363  0018DA  90D8               	bcf	status,0,c
  8364  0018DC  3603               	rlcf	i2___lwdiv@divisor,f,c
  8365  0018DE  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  8366  0018E0  2A07               	incf	i2___lwdiv@counter,f,c
  8367  0018E2                     i2l2609:
  8368  0018E2  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  8369  0018E4  D7FA               	goto	i2l2607
  8370  0018E6                     i2l2611:
  8371  0018E6  90D8               	bcf	status,0,c
  8372  0018E8  3605               	rlcf	i2___lwdiv@quotient,f,c
  8373  0018EA  3606               	rlcf	i2___lwdiv@quotient+1,f,c
  8374  0018EC  5003               	movf	i2___lwdiv@divisor,w,c
  8375  0018EE  5C01               	subwf	i2___lwdiv@dividend,w,c
  8376  0018F0  5004               	movf	i2___lwdiv@divisor+1,w,c
  8377  0018F2  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  8378  0018F4  A0D8               	btfss	status,0,c
  8379  0018F6  D005               	goto	i2l2619
  8380  0018F8  5003               	movf	i2___lwdiv@divisor,w,c
  8381  0018FA  5E01               	subwf	i2___lwdiv@dividend,f,c
  8382  0018FC  5004               	movf	i2___lwdiv@divisor+1,w,c
  8383  0018FE  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  8384  001900  8005               	bsf	i2___lwdiv@quotient,0,c
  8385  001902                     i2l2619:
  8386  001902  90D8               	bcf	status,0,c
  8387  001904  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  8388  001906  3203               	rrcf	i2___lwdiv@divisor,f,c
  8389  001908  2E07               	decfsz	i2___lwdiv@counter,f,c
  8390  00190A  D7ED               	goto	i2l2611
  8391  00190C                     i2l878:
  8392  00190C  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  8393  001910  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  8394  001914  0012               	return		;funcret
  8395  001916                     __end_ofi2___lwdiv:
  8396                           	opt stack 0
  8397                           pclatu	equ	0xFFB
  8398                           pclath	equ	0xFFA
  8399                           tblptru	equ	0xFF8
  8400                           tblptrh	equ	0xFF7
  8401                           tblptrl	equ	0xFF6
  8402                           tablat	equ	0xFF5
  8403                           prodh	equ	0xFF4
  8404                           prodl	equ	0xFF3
  8405                           intcon	equ	0xFF2
  8406                           intcon3	equ	0xFF0
  8407                           postinc0	equ	0xFEE
  8408                           fsr0h	equ	0xFEA
  8409                           fsr0l	equ	0xFE9
  8410                           wreg	equ	0xFE8
  8411                           fsr1h	equ	0xFE2
  8412                           fsr1l	equ	0xFE1
  8413                           indf2	equ	0xFDF
  8414                           postinc2	equ	0xFDE
  8415                           postdec2	equ	0xFDD
  8416                           fsr2h	equ	0xFDA
  8417                           fsr2l	equ	0xFD9
  8418                           status	equ	0xFD8
  8419                           
  8420 ;; *************** function i2_lcdInst *****************
  8421 ;; Defined at:
  8422 ;;		line 18 in file "../lcd.c"
  8423 ;; Parameters:    Size  Location     Type
  8424 ;;  data            1    wreg     unsigned char 
  8425 ;; Auto vars:     Size  Location     Type
  8426 ;;  data            1    2[COMRAM] unsigned char 
  8427 ;; Return value:  Size  Location     Type
  8428 ;;                  1    wreg      void 
  8429 ;; Registers used:
  8430 ;;		wreg, status,2, status,0, cstack
  8431 ;; Tracked objects:
  8432 ;;		On entry : 0/0
  8433 ;;		On exit  : 0/0
  8434 ;;		Unchanged: 0/0
  8435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8437 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8439 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8440 ;;Total ram usage:        1 bytes
  8441 ;; Hardware stack levels used:    1
  8442 ;; Hardware stack levels required when called:    1
  8443 ;; This function calls:
  8444 ;;		i2_lcdNibble
  8445 ;; This function is called by:
  8446 ;;		_switchMenu
  8447 ;;		_ISR
  8448 ;; This function uses a non-reentrant model
  8449 ;;
  8450                           
  8451                           	psect	text33
  8452  001BBA                     __ptext33:
  8453                           	opt stack 0
  8454  001BBA                     i2_lcdInst:
  8455                           	opt stack 25
  8456                           
  8457                           ;incstack = 0
  8458                           ;i2lcdInst@data stored from wreg
  8459  001BBA  6E03               	movwf	i2lcdInst@data,c
  8460                           
  8461                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  8462  001BBC  948C               	bcf	3980,2,c	;volatile
  8463                           
  8464                           ;lcd.c: 20: lcdNibble(data);
  8465  001BBE  5003               	movf	i2lcdInst@data,w,c
  8466  001BC0  ECB2  F00C         	call	i2_lcdNibble
  8467  001BC4  0012               	return		;funcret
  8468  001BC6                     __end_ofi2_lcdInst:
  8469                           	opt stack 0
  8470                           pclatu	equ	0xFFB
  8471                           pclath	equ	0xFFA
  8472                           tblptru	equ	0xFF8
  8473                           tblptrh	equ	0xFF7
  8474                           tblptrl	equ	0xFF6
  8475                           tablat	equ	0xFF5
  8476                           prodh	equ	0xFF4
  8477                           prodl	equ	0xFF3
  8478                           intcon	equ	0xFF2
  8479                           intcon3	equ	0xFF0
  8480                           postinc0	equ	0xFEE
  8481                           fsr0h	equ	0xFEA
  8482                           fsr0l	equ	0xFE9
  8483                           wreg	equ	0xFE8
  8484                           fsr1h	equ	0xFE2
  8485                           fsr1l	equ	0xFE1
  8486                           indf2	equ	0xFDF
  8487                           postinc2	equ	0xFDE
  8488                           postdec2	equ	0xFDD
  8489                           fsr2h	equ	0xFDA
  8490                           fsr2l	equ	0xFD9
  8491                           status	equ	0xFD8
  8492                           
  8493 ;; *************** function i2_lcdNibble *****************
  8494 ;; Defined at:
  8495 ;;		line 28 in file "../lcd.c"
  8496 ;; Parameters:    Size  Location     Type
  8497 ;;  data            1    wreg     unsigned char 
  8498 ;; Auto vars:     Size  Location     Type
  8499 ;;  data            1    1[COMRAM] unsigned char 
  8500 ;;  lcdNibble       1    0[COMRAM] unsigned char 
  8501 ;; Return value:  Size  Location     Type
  8502 ;;                  1    wreg      void 
  8503 ;; Registers used:
  8504 ;;		wreg, status,2, status,0
  8505 ;; Tracked objects:
  8506 ;;		On entry : 0/0
  8507 ;;		On exit  : 0/0
  8508 ;;		Unchanged: 0/0
  8509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8510 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8511 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8512 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8513 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8514 ;;Total ram usage:        2 bytes
  8515 ;; Hardware stack levels used:    1
  8516 ;; This function calls:
  8517 ;;		Nothing
  8518 ;; This function is called by:
  8519 ;;		i2_lcdInst
  8520 ;;		i2_putch
  8521 ;; This function uses a non-reentrant model
  8522 ;;
  8523                           
  8524                           	psect	text34
  8525  001964                     __ptext34:
  8526                           	opt stack 0
  8527  001964                     i2_lcdNibble:
  8528                           	opt stack 24
  8529                           
  8530                           ;incstack = 0
  8531                           ;i2lcdNibble@data stored from wreg
  8532  001964  6E02               	movwf	i2lcdNibble@data,c
  8533                           
  8534                           ;lcd.c: 30: char temp = data & 0xF0;
  8535  001966  5002               	movf	i2lcdNibble@data,w,c
  8536  001968  0BF0               	andlw	240
  8537  00196A  6E01               	movwf	i2lcdNibble@temp,c
  8538                           
  8539                           ;lcd.c: 31: LATD = LATD & 0x0F;
  8540  00196C  508C               	movf	3980,w,c	;volatile
  8541  00196E  0B0F               	andlw	15
  8542  001970  6E8C               	movwf	3980,c	;volatile
  8543                           
  8544                           ;lcd.c: 32: LATD = temp | LATD;
  8545  001972  5001               	movf	i2lcdNibble@temp,w,c
  8546  001974  108C               	iorwf	3980,w,c	;volatile
  8547  001976  6E8C               	movwf	3980,c	;volatile
  8548                           
  8549                           ;lcd.c: 34: LATDbits.LATD3 = 0;
  8550  001978  968C               	bcf	3980,3,c	;volatile
  8551                           
  8552                           ;lcd.c: 35: _delay((unsigned long)((30)*(10000000/4000000.0)));
  8553  00197A  0E19               	movlw	25
  8554  00197C                     i2u456_47:
  8555  00197C  2EE8               	decfsz	wreg,f,c
  8556  00197E  D7FE               	bra	i2u456_47
  8557                           
  8558                           ;lcd.c: 36: LATDbits.LATD3 = 1;
  8559  001980  868C               	bsf	3980,3,c	;volatile
  8560                           
  8561                           ;lcd.c: 37: _delay((unsigned long)((30)*(10000000/4000000.0)));
  8562  001982  0E19               	movlw	25
  8563  001984                     i2u457_47:
  8564  001984  2EE8               	decfsz	wreg,f,c
  8565  001986  D7FE               	bra	i2u457_47
  8566                           
  8567                           ;lcd.c: 39: data = data << 4;
  8568  001988  3802               	swapf	i2lcdNibble@data,w,c
  8569  00198A  0BF0               	andlw	240
  8570  00198C  6E02               	movwf	i2lcdNibble@data,c
  8571                           
  8572                           ;lcd.c: 41: temp = data & 0xF0;
  8573  00198E  5002               	movf	i2lcdNibble@data,w,c
  8574  001990  0BF0               	andlw	240
  8575  001992  6E01               	movwf	i2lcdNibble@temp,c
  8576                           
  8577                           ;lcd.c: 42: LATD = LATD & 0x0F;
  8578  001994  508C               	movf	3980,w,c	;volatile
  8579  001996  0B0F               	andlw	15
  8580  001998  6E8C               	movwf	3980,c	;volatile
  8581                           
  8582                           ;lcd.c: 43: LATD = temp | LATD;
  8583  00199A  5001               	movf	i2lcdNibble@temp,w,c
  8584  00199C  108C               	iorwf	3980,w,c	;volatile
  8585  00199E  6E8C               	movwf	3980,c	;volatile
  8586                           
  8587                           ;lcd.c: 45: LATDbits.LATD3 = 0;
  8588  0019A0  968C               	bcf	3980,3,c	;volatile
  8589                           
  8590                           ;lcd.c: 46: _delay((unsigned long)((30)*(10000000/4000000.0)));
  8591  0019A2  0E19               	movlw	25
  8592  0019A4                     i2u458_47:
  8593  0019A4  2EE8               	decfsz	wreg,f,c
  8594  0019A6  D7FE               	bra	i2u458_47
  8595                           
  8596                           ;lcd.c: 47: LATDbits.LATD3 = 1;
  8597  0019A8  868C               	bsf	3980,3,c	;volatile
  8598                           
  8599                           ;lcd.c: 48: _delay((unsigned long)((30)*(10000000/4000000.0)));
  8600  0019AA  0E19               	movlw	25
  8601  0019AC                     i2u459_47:
  8602  0019AC  2EE8               	decfsz	wreg,f,c
  8603  0019AE  D7FE               	bra	i2u459_47
  8604  0019B0  0012               	return		;funcret
  8605  0019B2                     __end_ofi2_lcdNibble:
  8606                           	opt stack 0
  8607                           pclatu	equ	0xFFB
  8608                           pclath	equ	0xFFA
  8609                           tblptru	equ	0xFF8
  8610                           tblptrh	equ	0xFF7
  8611                           tblptrl	equ	0xFF6
  8612                           tablat	equ	0xFF5
  8613                           prodh	equ	0xFF4
  8614                           prodl	equ	0xFF3
  8615                           intcon	equ	0xFF2
  8616                           intcon3	equ	0xFF0
  8617                           postinc0	equ	0xFEE
  8618                           fsr0h	equ	0xFEA
  8619                           fsr0l	equ	0xFE9
  8620                           wreg	equ	0xFE8
  8621                           fsr1h	equ	0xFE2
  8622                           fsr1l	equ	0xFE1
  8623                           indf2	equ	0xFDF
  8624                           postinc2	equ	0xFDE
  8625                           postdec2	equ	0xFDD
  8626                           fsr2h	equ	0xFDA
  8627                           fsr2l	equ	0xFD9
  8628                           status	equ	0xFD8
  8629                           pclatu	equ	0xFFB
  8630                           pclath	equ	0xFFA
  8631                           tblptru	equ	0xFF8
  8632                           tblptrh	equ	0xFF7
  8633                           tblptrl	equ	0xFF6
  8634                           tablat	equ	0xFF5
  8635                           prodh	equ	0xFF4
  8636                           prodl	equ	0xFF3
  8637                           intcon	equ	0xFF2
  8638                           intcon3	equ	0xFF0
  8639                           postinc0	equ	0xFEE
  8640                           fsr0h	equ	0xFEA
  8641                           fsr0l	equ	0xFE9
  8642                           wreg	equ	0xFE8
  8643                           fsr1h	equ	0xFE2
  8644                           fsr1l	equ	0xFE1
  8645                           indf2	equ	0xFDF
  8646                           postinc2	equ	0xFDE
  8647                           postdec2	equ	0xFDD
  8648                           fsr2h	equ	0xFDA
  8649                           fsr2l	equ	0xFD9
  8650                           status	equ	0xFD8
  8651                           
  8652                           	psect	rparam
  8653  0000                     pclatu	equ	0xFFB
  8654                           pclath	equ	0xFFA
  8655                           tblptru	equ	0xFF8
  8656                           tblptrh	equ	0xFF7
  8657                           tblptrl	equ	0xFF6
  8658                           tablat	equ	0xFF5
  8659                           prodh	equ	0xFF4
  8660                           prodl	equ	0xFF3
  8661                           intcon	equ	0xFF2
  8662                           intcon3	equ	0xFF0
  8663                           postinc0	equ	0xFEE
  8664                           fsr0h	equ	0xFEA
  8665                           fsr0l	equ	0xFE9
  8666                           wreg	equ	0xFE8
  8667                           fsr1h	equ	0xFE2
  8668                           fsr1l	equ	0xFE1
  8669                           indf2	equ	0xFDF
  8670                           postinc2	equ	0xFDE
  8671                           postdec2	equ	0xFDD
  8672                           fsr2h	equ	0xFDA
  8673                           fsr2l	equ	0xFD9
  8674                           status	equ	0xFD8
  8675                           
  8676                           	psect	temp
  8677  00004A                     btemp:
  8678                           	opt stack 0
  8679  00004A                     	ds	1
  8680  0000                     int$flags	set	btemp
  8681                           pclatu	equ	0xFFB
  8682                           pclath	equ	0xFFA
  8683                           tblptru	equ	0xFF8
  8684                           tblptrh	equ	0xFF7
  8685                           tblptrl	equ	0xFF6
  8686                           tablat	equ	0xFF5
  8687                           prodh	equ	0xFF4
  8688                           prodl	equ	0xFF3
  8689                           intcon	equ	0xFF2
  8690                           intcon3	equ	0xFF0
  8691                           postinc0	equ	0xFEE
  8692                           fsr0h	equ	0xFEA
  8693                           fsr0l	equ	0xFE9
  8694                           wreg	equ	0xFE8
  8695                           fsr1h	equ	0xFE2
  8696                           fsr1l	equ	0xFE1
  8697                           indf2	equ	0xFDF
  8698                           postinc2	equ	0xFDE
  8699                           postdec2	equ	0xFDD
  8700                           fsr2h	equ	0xFDA
  8701                           fsr2l	equ	0xFD9
  8702                           status	equ	0xFD8


Data Sizes:
    Strings     406
    Constant    35
    Data        2
    BSS         38
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     68      73
    BANK0           128     25      60
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 25
		 -> STR_24(CODE[22]), STR_23(CODE[17]), STR_22(CODE[17]), STR_21(CODE[17]), 
		 -> STR_20(CODE[23]), STR_19(CODE[23]), STR_18(CODE[21]), STR_17(CODE[17]), 
		 -> STR_16(CODE[21]), STR_15(CODE[17]), STR_14(CODE[21]), STR_13(CODE[17]), 
		 -> STR_12(CODE[19]), STR_11(CODE[17]), STR_10(CODE[19]), STR_9(CODE[17]), 
		 -> STR_8(CODE[25]), STR_7(CODE[17]), STR_6(CODE[17]), STR_5(CODE[17]), 
		 -> STR_4(CODE[18]), STR_3(CODE[17]), STR_2(CODE[17]), STR_1(CODE[17]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 


Critical Paths under _main in COMRAM

    _main->_I2C_Master_Init
    _stopOperation->___awdiv
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _I2C_Master_Init->___lldiv

Critical Paths under _ISR in COMRAM

    _ISR->_switchMenu
    _switchMenu->i2_printf
    i2_stopOperation->i2___awdiv
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_lcdInst->i2_lcdNibble

Critical Paths under _main in BANK0

    _main->_printf

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0    6614
                                             18 BANK0      7     7      0
                    _I2C_Master_Init
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _initLCD
                            _lcdInst
                             _printf
                            _readADC
                      _stopOperation
                      _testBatteries
 ---------------------------------------------------------------------------------
 (1) _testBatteries                                        2     2      0       0
                                             51 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _stopOperation                                        0     0      0    1004
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     500
                                             51 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     504
                                             51 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _readADC                                              1     1      0      22
                                             51 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _printf                                              31    23      8    4426
                                             63 COMRAM     4     4      0
                                              0 BANK0     18    10      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0     135
                                             53 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             51 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     289
                                             51 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     287
                                             58 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     418
                                             51 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                             54 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0     135
                                             53 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0     113
                                             51 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Write                                     2     0      2     214
                                             52 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Read                                      2     2      0      45
                                             52 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Wait                                      1     1      0       0
                                             51 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     398
                                             64 COMRAM     4     0      4
                                              0 BANK0      4     4      0
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     290
                                             51 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _ISR                                                 16    16      0    6841
                                             35 COMRAM    16    16      0
                         _switchMenu
                          i2___awdiv
                          i2___awmod
                          i2_lcdInst
                           i2_printf
                    i2_stopOperation
 ---------------------------------------------------------------------------------
 (5) _switchMenu                                           3     1      2    3137
                                             32 COMRAM     3     1      2
                          i2_lcdInst
                           i2_printf
                    i2_stopOperation
 ---------------------------------------------------------------------------------
 (5) i2_stopOperation                                      0     0      0     804
                          i2___awdiv
                          i2___awmod
 ---------------------------------------------------------------------------------
 (6) i2___awmod                                            6     2      4     400
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) i2___awdiv                                            8     4      4     404
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (5) i2_printf                                            29    23      6    1938
                                             12 COMRAM    20    14      6
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (6) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (6) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) i2___wmul                                             6     2      4     209
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (6) i2___lwdiv                                            7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (7) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _I2C_Master_Read
     _I2C_Master_Wait
   _I2C_Master_Start
     _I2C_Master_Wait
   _I2C_Master_Stop
     _I2C_Master_Wait
   _I2C_Master_Write
     _I2C_Master_Wait
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
       _lcdNibble
   _readADC
   _stopOperation
     ___awdiv
     ___awmod
   _testBatteries

 _ISR (ROOT)
   _switchMenu
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
       i2___lwmod
         i2___lwdiv (ARG)
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
     i2_stopOperation
       i2___awdiv
       i2___awmod
   i2___awdiv
   i2___awmod
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     i2___lwdiv
     i2___lwmod
       i2___lwdiv (ARG)
     i2___wmul
     i2_isdigit
     i2_putch
       i2_lcdNibble
   i2_stopOperation
     i2___awdiv
     i2___awmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     19      3C       5       46.9%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     44      49       1       57.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      85      34        0.0%
DATA                 0      0      85       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Mon Feb 27 17:18:33 2017

                       l30 1B84               ___awdiv@sign 0039        ___wmul@multiplicand 0036  
       i2___lwdiv@dividend 0001                __CFG_BORV$3 000000               __CFG_CP0$OFF 000000  
             __CFG_CP1$OFF 000000               __CFG_CP2$OFF 000000               __CFG_CP3$OFF 000000  
              __CFG_OSC$HS 000000                        l322 1B7E                        l333 115C  
                      l261 02E2                        l344 130C                        l336 11E0  
                      l433 0808                        l266 0366                        l339 1264  
                      l825 1724                        l878 18BA                        l888 1A76  
                      _GIE 007F97               __CFG_CPB$OFF 000000                        _PEN 007E2A  
             __CFG_CPD$OFF 000000                        _ISR 0008                        _SEN 007E28  
                      _min 0096                        _sec 009C               ___awmod@sign 0039  
                      prod 000FF3                        wreg 000FE8               __CFG_LVP$OFF 000000  
                     ?_ISR 0001               __CFG_WDT$OFF 000000                       l3021 1B08  
                     l4003 00BC                       l3221 11A0                       l4021 010A  
                     l4103 03EA                       l4015 00E8                       l4007 00C6  
                     l4121 0482                       l4113 043C                       l4041 01E8  
                     l4105 0406                       l4025 0114                       l4033 0136  
                     l4131 04CE                       l4123 048E                       l4115 0446  
                     l4107 0410                       l4051 0200                       l4035 0142  
                     l2701 160E                       l3247 1224                       l2801 1A58  
                     l2705 1618                       l2721 174A                       l4161 05C2  
                     l4153 0582                       l4145 0542                       l4137 0502  
                     l4129 04C2                       l2731 176C                       l3291 131C  
                     l3275 12D2                       l3267 129E                       l3195 111C  
                     l4171 060E                       l4163 05CE                       l4155 058E  
                     l4147 054E                       l4139 050E                       l4083 0270  
                     l4075 0254                       l4067 0238                       l4059 021C  
                     l2805 1A6C                       l2709 1626                       l2733 1770  
                     l2741 178E                       l2725 1756                       l4093 030A  
                     l4167 0604                       l4183 0698                       l4087 02CC  
                     l2745 179C                       l2737 1784                       l2729 1764  
                     l4185 06A4                       l4177 062E                       l4089 02D2  
                     l2755 16D6                       l2659 1B4A                       l2691 15EE  
                     l2683 15D0                       l4195 06F2                       l2757 16E2  
                     l2781 1894                       l3901 0898                       l2693 15F2  
                     l2677 15C0                       l2767 1716                       l2759 16E6  
                     l3903 089E                       l2777 1888                       l2689 15E6  
                     l2779 1890                       l3931 0944                       l3843 070C  
                     l2789 18B0                       l2797 1A4C                       l3925 0906  
                     l3917 08D4                       l3853 073C                       l2799 1A54  
                     l3943 0978                       l3919 08E6                       l3871 07D6  
                     l3847 0720                       l3945 0984                       l3953 09B0  
                     l3937 095C                       l3929 093A                       l3849 0732  
                     l3955 09B6                       l3963 0A4A                       l3883 0840  
                     l3867 07D0                       l3859 076C                       l3957 09FE  
                     l3965 0A5C                       l3949 099E                       l3967 0A64  
                     l3887 085C                       l3889 0862                       l3969 0A70  
                     l3995 008A                       STR_1 FFDC                       STR_2 FFED  
                     STR_3 FFCB                       STR_4 FEED                       STR_5 FF87  
                     STR_6 FF65                       STR_7 FFBA                       STR_8 FE68  
                     STR_9 FF54                       _LATA 000F89                       _LATB 000F8A  
                     _LATC 000F8B                       _LATD 000F8C                       _LATE 000F8D  
                     u4310 03C0                       u4311 03BC                       u2640 1B06  
                     u4320 03C2                       u2910 1140                       u4191 01E6  
                     u2930 11C4                       u4507 19FE                       _PEIE 007F96  
                     u2940 1208                       u4517 1A32                       u2950 1248  
                     u4527 192E                       u2960 128C                       u4537 1936  
                     u2970 12C2                       u4547 1956                       u4467 00D8  
                     u2980 12FA                       _RCEN 007E2B                       u4557 195E  
                     u4477 0126                       u4487 03F8                       u4497 06DE  
                     u3885 1844                       _TMR0 000FD6                       _TMR1 000FCE  
                     _main 0012                       _keys FE45                       _numC 009A  
                     _time 0080                       fsr0h 000FEA                       fsr1h 000FE2  
       i2___lwdiv@quotient 0005                       fsr2h 000FDA                       fsr0l 000FE9  
                     indf2 000FDF                       fsr1l 000FE1                       fsr2l 000FD9  
                     btemp 004A                       prodh 000FF4                       prodl 000FF3  
                     start 000E              __CFG_IESO$OFF 000000            __end_ofi2_putch 1BBA  
            __CFG_MCLRE$ON 000000               ___param_bank 000000                i2_lcdNibble 1964  
                    ??_ISR 0024           ?_I2C_Master_Init 0041           ?_I2C_Master_Read 0001  
         ?_I2C_Master_Wait 0001           ?_I2C_Master_Stop 0001                      ?_main 0001  
                    _ACKEN 007E2C                      _ACKDT 007E2D            __end_of___awdiv 1630  
                    STR_10 FEDA                      STR_11 FF21                      STR_12 FEDA  
                    STR_20 FE98                      STR_21 FFA9                      STR_13 FF43  
                    STR_22 FF10                      STR_14 FEC5                      STR_23 FF98  
                    STR_15 FF32                      STR_16 FEC5                      STR_24 FEAF  
                    STR_17 FF76                      STR_25 FEFF                      STR_18 FEC5  
                    STR_19 FE81            __end_of___awmod 17A6            __end_of___lldiv 1736  
                    _T0CON 000FD5            ___awdiv@divisor 0036                      _T1CON 000FCD  
          __end_of___lwdiv 18C4            __end_of___lwmod 1A80                      i2l401 0D88  
                    i2l433 0EB0            ___awdiv@counter 0038                      i2l878 190C  
                    i2l888 1AB8                      _PORTB 000F81                      _TRISA 000F92  
                    _TRISB 000F93                      _TRISC 000F94                      _TRISD 000F95  
                    _TRISE 000F96              _turn1BackLeft 009D              __CFG_PWRT$OFF 000000  
            __CFG_WRT0$OFF 000000              __CFG_WRT1$OFF 000000              __CFG_WRT2$OFF 000000  
            __CFG_WRT3$OFF 000000            __end_of_lcdInst 1BAE             __CFG_EBTR0$OFF 000000  
           __CFG_FCMEN$OFF 000000             __CFG_EBTR1$OFF 000000              _turn2BackLeft 009F  
           __CFG_EBTR2$OFF 000000             __CFG_EBTR3$OFF 000000     __size_of_stopOperation 00F2  
            __CFG_WRTB$OFF 000000              __CFG_WRTC$OFF 000000              __CFG_WRTD$OFF 000000  
          __end_of_readADC 1B84            __end_of_initLCD 1A3E             __CFG_EBTRB$OFF 000000  
               i2isdigit@c 0003            __end_of_dpowers FE60                      _numAA 0098  
                    _num9V 0097            __end_of_isdigit 1B52                      _step1 0047  
                    _step2 0048                      _putch 1B96                      main@i 00B8  
                    pclath 000FFA                      tablat 000FF5           __end_ofi2___wmul 1B34  
                    status 000FD8         __size_ofi2___awdiv 0084         __size_ofi2___awmod 0070  
           __CFG_PBADEN$ON 000000              i2printf@width 001E           __end_ofi2_printf 10D0  
       __size_ofi2___lwdiv 0052         __size_ofi2___lwmod 0042            __initialization 19B2  
       __size_ofi2_lcdInst 000C               __end_of_main 06FE               __end_of_keys FE56  
               i2printf@ap 0018         __size_ofi2_isdigit 001E                     ??_main 00B4  
            __activetblptr 000002          ?_I2C_Master_Start 0001          ?_I2C_Master_Write 0035  
       ??_I2C_Master_Start 0035                     _ADCON0 000FC2                     _ADCON1 000FC1  
       ??_I2C_Master_Write 0037                     _ADCON2 000FC0                     _ADRESH 000FC4  
                   _ADRESL 000FC3           ___awdiv@dividend 0034            i2lcdNibble@data 0002  
                   ?_putch 0001            i2lcdNibble@temp 0001                     _INT1IE 007F83  
                   _INT1IF 007F80                     i2l2611 18E6                     i2l2531 1672  
                   i2l2523 1654                     i2l2541 1692                     i2l2533 1676  
                   i2l2517 1644                     i2l2607 18DA                     i2l2631 1A9A  
                   i2l2609 18E2                     i2l2529 166A                     i2l2545 169C  
                   i2l2561 17BA                     i2l3361 1538                     i2l2619 1902  
                   i2l2635 1AAE                     i2l2627 1A8E                     i2l2571 17DC  
                   i2l2629 1A96                     i2l2549 16AA                     i2l2573 17E0  
                   i2l2581 17FE                     i2l2565 17C6                     i2l3381 1586  
                   i2l3373 1564                     i2l3365 1548                     i2l2911 0EFC  
                   i2l3383 158C                     i2l3711 0BDE                     i2l2905 0EDE  
                   i2l2585 180C                     i2l2577 17F4                     i2l2569 17D4  
                   i2l3801 0D22                     i2l3713 0BF8                     i2l2923 0F28  
                   i2l3803 0D24                     i2l3731 0C32                     i2l3723 0C1A  
                   i2l2597 1B68                     i2l2925 0F2C                     i2l2941 0F68  
                   i2l2909 0EF8                     i2l3389 15A6                     i2l3821 0D5E  
                   i2l3813 0D48                     i2l3741 0C5A                     i2l2951 0FA6  
                   i2l2871 0DEC                     i2l3831 0D86                     i2l3727 0C26  
                   i2l3719 0C0E                     i2l3743 0C5C                     i2l3647 0AF6  
                   i2l2953 0FAE                     i2l2881 0E20                     i2l2865 0DCE  
                   i2l3817 0D54                     i2l3809 0D3C                     i2l3761 0C96  
                   i2l3753 0C80                     i2l3737 0C4E                     i2l3673 0B74  
                   i2l2971 0FF6                     i2l2947 0F82                     i2l2939 0F58  
                   i2l2875 0DF2                     i2l3827 0D7A                     i2l3771 0CBE  
                   i2l3739 0C54                     i2l3683 0B8C                     i2l3691 0B9A  
                   i2l2965 0FDA                     i2l2893 0E82                     i2l2869 0DDE  
                   i2l3829 0D80                     i2l3757 0C8C                     i2l3749 0C74  
                   i2l3773 0CC0                     i2l2967 0FE2                     i2l2975 1008  
                   i2l2959 0FC4                     i2l2991 10B6                     i2l3791 0CFA  
                   i2l3783 0CE2                     i2l3767 0CB2                     i2l3679 0B84  
                   i2l2977 100E                     i2l2985 1098                     i2l2889 0E7E  
                   i2l3769 0CB8                     i2l2979 1052                     i2l2987 10A8  
                   i2l3787 0CEE                     i2l3779 0CD6                     i2l2989 10AE  
                   i2l3797 0D16                     i2l3799 0D1C                     _TMR0IE 007F95  
                   _TMR0IF 007F92                  ??i2_putch 0003                     _TMR1IE 007CE8  
                   _TMR1IF 007CF0                     _SSPADD 000FC8                     _TRISC3 007CA3  
                   _TRISC4 007CA4                     _SSPBUF 000FC9             _turn1BackRight 009E  
           __CFG_XINST$OFF 000000              _stopOperation 1320             _turn2BackRight 00A0  
                   ___wmul 1AC2                  ??___awdiv 0038             __CFG_STVREN$ON 000000  
                ??___awmod 0038                  ??___lldiv 003C                  ??___lwdiv 0038  
                ??___lwmod 003F                     _countC 0093                     clear_0 19DC  
         ___awdiv@quotient 003A            ___awmod@divisor 0036            ___awmod@counter 0038  
                ??_lcdInst 0036                     _printf 06FE             i2___awdiv@sign 0006  
                ??_readADC 0034                  ??_initLCD 0037   __size_ofi2_stopOperation 00F2  
             __pdataCOMRAM 0049                  ??_isdigit 0034          __end_ofi2___awdiv 16B4  
        __end_ofi2___awmod 1816          __end_ofi2___lwdiv 1916               __mediumconst FE44  
        __end_ofi2___lwmod 1AC2                     tblptrh 000FF7                     tblptrl 000FF6  
                   tblptru 000FF8            switchMenu@right 0021             i2___awmod@sign 0006  
        __end_ofi2_lcdInst 1BC6          __end_ofi2_isdigit 1B70                 __accesstop 0080  
  __end_of__initialization 19EA              ___rparam_used 000001             ?_stopOperation 0001  
       i2___lwmod@dividend 0008             __pcstackCOMRAM 0001               __pidataBANK0 1BE1  
            __end_of_putch 1BA2                i2printf@idx 0017                i2printf@val 001B  
                ?i2___wmul 0001         __size_of_lcdNibble 004E                i2putch@data 0003  
              ISR@keypress 0033                  ?i2_printf 000D                    ??_putch 0036  
               __pbssBANK0 0080      __end_of_testBatteries 1320               ?i2_lcdNibble 0001  
                  ?___wmul 0034                    ?_printf 00A2                 ??i2___wmul 0005  
               ??i2_printf 0013                    _SSPCON1 000FC6                    _SSPCON2 000FC5  
        ??i2_stopOperation 0009                    _SSPSTAT 000FC7                    i2_putch 1BAE  
               _countDrain 0094            ??_stopOperation 003C          __end_of_lcdNibble 1964  
                  __Hparam 0000                    __Lparam 0000                    ___awdiv 15AC  
                  ___awmod 1736                    ___lldiv 16B4            __size_of___wmul 0026  
                  ___lwdiv 1872                    ___lwmod 1A3E                    __pcinit 19B2  
               _plat1Right 0089                    __ramtop 1000                 _plat2Right 008D  
                  _lcdInst 1BA2                    __ptext0 0012                    __ptext1 10D0  
                  __ptext2 1320                    __ptext3 1736                    __ptext4 15AC  
                  __ptext5 1B70                    __ptext6 06FE                    __ptext7 1B96  
                  __ptext8 1B34                    __ptext9 1AC2            __size_of_printf 0390  
                _T0CONbits 000FD5                    _countAA 0092                    _count9V 0091  
                  _readADC 1B70                    _initLCD 19F8               __size_of_ISR 0DBC  
        __end_of_hexpowers FE68                  _T1CONbits 000FCD              i2_isdigit$931 0002  
                  _dpowers FE56                    _isdigit 1B34                    _opTimer 0046  
         ___awmod@dividend 0034                    _numBats 0099   __size_of_I2C_Master_Init 005C  
 __size_of_I2C_Master_Read 0026   __size_of_I2C_Master_Wait 0012   __size_of_I2C_Master_Stop 0008  
           __pintcode_body 0A8E       end_of_initialization 19EA              __Lmediumconst FE44  
                  int_func 0A8E        i2___wmul@multiplier 0001                 _screenMode 00BB  
__size_of_I2C_Master_Start 0008  __size_of_I2C_Master_Write 000A            ___lldiv@divisor 0038  
          ___lldiv@counter 0040                    printf@c 00B3                    printf@f 00A2  
         I2C_Master_Init@c 0041           I2C_Master_Read@a 0035                    postdec2 000FDD  
               _solOnTimer 0049                    postinc0 000FEE                    postinc2 000FDE  
                i2___awdiv 1630                  i2___awmod 17A6          i2___lwdiv@divisor 0003  
                i2___lwdiv 18C4                  i2___lwmod 1A80          i2___lwdiv@counter 0007  
                i2_lcdInst 1BBA                printf@width 00B1         i2___awdiv@dividend 0001  
                i2_isdigit 1B52                 _switchMenu 1504             __end_of___wmul 1AE8  
     __size_ofi2_lcdNibble 004E              __pidataCOMRAM 1BE0              i2lcdInst@data 0003  
         i2___wmul@product 0005             __end_of_printf 0A8E               i2printf@flag 001D  
             i2printf@prec 001A        start_initialization 19B2         i2___awdiv@quotient 0007  
              __end_of_ISR 0DC4          __size_ofi2___wmul 0026                  i2printf@c 0020  
                i2printf@f 000D                 ?i2___awdiv 0001                 ?i2___awmod 0001  
               ?i2___lwdiv 0001                 ?i2___lwmod 0008          __size_ofi2_printf 030C  
        ??_I2C_Master_Init 00A2          ??_I2C_Master_Read 0035          ??_I2C_Master_Wait 0034  
               ?i2_lcdInst 0001          ??_I2C_Master_Stop 0035                 ?i2_isdigit 0001  
                 ??___wmul 0038                __pdataBANK0 00BB           __CFG_LPT1OSC$OFF 000000  
           switchMenu@left 0023            i2_stopOperation 1412                   ??_printf 0040  
              __pbssCOMRAM 0045              __pcstackBANK0 00A2          i2___lwmod@divisor 000A  
        i2___lwmod@counter 000C                   ?i2_putch 0001           _I2C_Master_Start 1BD8  
         _I2C_Master_Write 1BC6           ___lwdiv@dividend 0034          __CFG_CCP2MX$PORTC 000000  
              ?_switchMenu 0021                  __pintcode 0008              __pmediumconst FE44  
                _lcdNibble 1916                   ?___awdiv 0034                   ?___awmod 0034  
                 ?___lldiv 0034                   ?___lwdiv 0034                   ?___lwmod 003B  
                _doneTimer 0045                   ?_lcdInst 0001                   ?_readADC 0001  
                 ?_initLCD 0001     __size_of_testBatteries 0250                   ?_isdigit 0001  
                _hexpowers FE60           ___lwdiv@quotient 0038                ??i2___awdiv 0005  
              ??i2___awmod 0005                  _plat1Left 0087                  _plat2Left 008B  
              ??i2___lwdiv 0005                ??i2___lwmod 000C             __size_of_putch 000C  
              ??i2_lcdInst 0003             ___wmul@product 0038                   _LATAbits 000F89  
                 _LATBbits 000F8A                   _LATCbits 000F8B                   _LATDbits 000F8C  
                 _LATEbits 000F8D                ??i2_isdigit 0001      __end_of_stopOperation 1412  
                 i2u358_40 0BE8                   i2u359_48 0BEA                   i2u456_47 197C  
                 i2u457_47 1984                   i2u458_47 19A4                   i2u459_47 19AC  
              _doneSorting 0095    __end_ofi2_stopOperation 1504                  _waitMotor 00A1  
         __CFG_WDTPS$32768 000000                 ?_lcdNibble 0001                 _ADCON0bits 000FC2  
                main@i_632 00BA                  main@i_579 00B9          ___wmul@multiplier 0034  
                 i2___wmul 1B0E              lcdNibble@data 0035                 printf@flag 00B0  
            lcdNibble@temp 0034                 printf@prec 00AD          i2___awdiv@divisor 0003  
        i2___awdiv@counter 0005                   i2_printf 0DC4        __size_of_switchMenu 00A8  
      I2C_Master_Read@temp 0036         i2___awmod@dividend 0001           __size_ofi2_putch 000C  
            _testBatteries 10D0                   __Hrparam 0000                   __Lrparam 0000  
       __CFG_BOREN$SBORDIS 000000              switchMenu@key 0022           __size_of___awdiv 0084  
         __size_of___awmod 0070      i2___wmul@multiplicand 0003           __size_of___lldiv 0082  
         __size_of___lwdiv 0052           __size_of___lwmod 0042             readADC@channel 0034  
              _isdigit$931 0035           __size_of_lcdInst 000C            _I2C_Master_Init 1816  
         __size_of_readADC 0014            _I2C_Master_Read 1AE8           __size_of_initLCD 0046  
          _I2C_Master_Wait 1B84            _I2C_Master_Stop 1BD0           __size_of_isdigit 001E  
          ___lwdiv@divisor 0036            ___lwdiv@counter 003A                   __ptext10 1A3E  
                 __ptext11 1872                   __ptext20 1816                   __ptext12 19F8  
                 __ptext21 16B4                   __ptext13 1BA2                   __ptext30 1B0E  
                 __ptext14 1916                   __ptext31 1A80                   __ptext23 1504  
                 __ptext15 1BC6                   __ptext32 18C4                   __ptext24 1412  
                 __ptext16 1BD0                   __ptext33 1BBA                   __ptext25 17A6  
                 __ptext17 1BD8                   __ptext34 1964                   __ptext26 1630  
                 __ptext18 1AE8                   __ptext27 0DC4                   __ptext19 1B84  
                 __ptext28 1BAE                   __ptext29 1B52              __size_of_main 06EC  
           ?_testBatteries 0001                   _numDrain 009B           ?i2_stopOperation 0001  
            ??i2_lcdNibble 0001                ??_lcdNibble 0034                   int$flags 004A  
                 _stepGear 008F                  printf@idx 00AA                  printf@val 00AE  
        i2___awmod@divisor 0003                  putch@data 0036          i2___awmod@counter 0005  
 __end_of_I2C_Master_Start 1BE0   __end_of_I2C_Master_Write 1BD0                 _INTCONbits 000FF2  
                 isdigit@c 0036                   intlevel2 0000           ___lwmod@dividend 003B  
         ___lldiv@dividend 0034               ??_switchMenu 0023                   printf@ap 00AB  
  __end_of_I2C_Master_Init 1872    __end_of_I2C_Master_Read 1B0E    __end_of_I2C_Master_Wait 1B96  
  __end_of_I2C_Master_Stop 1BD8                lcdInst@data 0036        __end_ofi2_lcdNibble 19B2  
         ___lldiv@quotient 003C          I2C_Master_Write@d 0035            ___lwmod@divisor 003D  
          ___lwmod@counter 003F         __end_of_switchMenu 15AC            ??_testBatteries 0034  
