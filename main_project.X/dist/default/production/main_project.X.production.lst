

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sat Feb 25 03:38:02 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    30                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    31                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    37                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    38                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    39  0000                     
    40                           ; Version 1.40
    41                           ; Generated 01/12/2016 GMT
    42                           ; 
    43                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    44                           ; All rights reserved.
    45                           ; 
    46                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    47                           ; 
    48                           ; Redistribution and use in source and binary forms, with or without modification, are
    49                           ; permitted provided that the following conditions are met:
    50                           ; 
    51                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    52                           ;        conditions and the following disclaimer.
    53                           ; 
    54                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    55                           ;        of conditions and the following disclaimer in the documentation and/or other
    56                           ;        materials provided with the distribution.
    57                           ; 
    58                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    59                           ;        software without specific prior written permission.
    60                           ; 
    61                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    62                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    63                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    64                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    65                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    66                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    67                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    68                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    69                           ; 
    70                           ; 
    71                           ; Code-generator required, PIC18F4620 Definitions
    72                           ; 
    73                           ; SFR Addresses
    74  0000                     
    75                           	psect	idataCOMRAM
    76  000ECA                     __pidataCOMRAM:
    77                           	opt stack 0
    78                           
    79                           ;initializer for _plat1Left
    80  000ECA  01                 	db	1
    81                           
    82                           ;initializer for _screenMode
    83  000ECB  02                 	db	2
    84                           
    85                           	psect	mediumconst
    86  00FE5C                     __pmediumconst:
    87                           	opt stack 0
    88  00FE5C  00                 	db	0
    89  00FE5D                     _keys:
    90                           	opt stack 0
    91  00FE5D  31                 	db	49
    92  00FE5E  32                 	db	50
    93  00FE5F  33                 	db	51
    94  00FE60  41                 	db	65
    95  00FE61  34                 	db	52
    96  00FE62  35                 	db	53
    97  00FE63  36                 	db	54
    98  00FE64  42                 	db	66
    99  00FE65  37                 	db	55
   100  00FE66  38                 	db	56
   101  00FE67  39                 	db	57
   102  00FE68  43                 	db	67
   103  00FE69  2A                 	db	42
   104  00FE6A  30                 	db	48
   105  00FE6B  23                 	db	35
   106  00FE6C  44                 	db	68
   107  00FE6D  00                 	db	0
   108  00FE6E                     __end_of_keys:
   109                           	opt stack 0
   110  00FE6E                     _dpowers:
   111                           	opt stack 0
   112  00FE6E  0001               	dw	1
   113  00FE70  000A               	dw	10
   114  00FE72  0064               	dw	100
   115  00FE74  03E8               	dw	1000
   116  00FE76  2710               	dw	10000
   117  00FE78                     __end_of_dpowers:
   118                           	opt stack 0
   119  00FE78                     _hexpowers:
   120                           	opt stack 0
   121  00FE78  0001               	dw	1
   122  00FE7A  0010               	dw	16
   123  00FE7C  0100               	dw	256
   124  00FE7E  1000               	dw	4096
   125  00FE80                     __end_of_hexpowers:
   126                           	opt stack 0
   127  0000                     _TMR0	set	4054
   128  0000                     _TMR1	set	4046
   129  0000                     _ADCON0	set	4034
   130  0000                     _ADCON0bits	set	4034
   131  0000                     _ADCON1	set	4033
   132  0000                     _INTCONbits	set	4082
   133  0000                     _LATA	set	3977
   134  0000                     _LATAbits	set	3977
   135  0000                     _LATB	set	3978
   136  0000                     _LATBbits	set	3978
   137  0000                     _LATC	set	3979
   138  0000                     _LATCbits	set	3979
   139  0000                     _LATD	set	3980
   140  0000                     _LATDbits	set	3980
   141  0000                     _LATE	set	3981
   142  0000                     _PORTB	set	3969
   143  0000                     _SSPADD	set	4040
   144  0000                     _SSPBUF	set	4041
   145  0000                     _SSPCON1	set	4038
   146  0000                     _SSPCON2	set	4037
   147  0000                     _SSPSTAT	set	4039
   148  0000                     _T0CON	set	4053
   149  0000                     _T0CONbits	set	4053
   150  0000                     _T1CON	set	4045
   151  0000                     _T1CONbits	set	4045
   152  0000                     _TRISA	set	3986
   153  0000                     _TRISB	set	3987
   154  0000                     _TRISC	set	3988
   155  0000                     _TRISD	set	3989
   156  0000                     _TRISE	set	3990
   157  0000                     _ACKDT	set	32301
   158  0000                     _ACKEN	set	32300
   159  0000                     _ADFM	set	32263
   160  0000                     _GIE	set	32663
   161  0000                     _INT1IE	set	32643
   162  0000                     _INT1IF	set	32640
   163  0000                     _PEIE	set	32662
   164  0000                     _PEN	set	32298
   165  0000                     _RCEN	set	32299
   166  0000                     _SEN	set	32296
   167  0000                     _TMR0IE	set	32661
   168  0000                     _TMR0IF	set	32658
   169  0000                     _TMR1IE	set	31976
   170  0000                     _TMR1IF	set	31984
   171  0000                     _TRISC3	set	31907
   172  0000                     _TRISC4	set	31908
   173  00FE80                     STR_9:
   174  00FE80  25                 	db	37
   175  00FE81  30                 	db	48	;'0'
   176  00FE82  32                 	db	50	;'2'
   177  00FE83  64                 	db	100	;'d'
   178  00FE84  3A                 	db	58	;':'
   179  00FE85  25                 	db	37
   180  00FE86  30                 	db	48	;'0'
   181  00FE87  32                 	db	50	;'2'
   182  00FE88  64                 	db	100	;'d'
   183  00FE89  20                 	db	32
   184  00FE8A  20                 	db	32
   185  00FE8B  20                 	db	32
   186  00FE8C  20                 	db	32
   187  00FE8D  20                 	db	32
   188  00FE8E  20                 	db	32
   189  00FE8F  20                 	db	32
   190  00FE90  20                 	db	32
   191  00FE91  20                 	db	32
   192  00FE92  20                 	db	32
   193  00FE93  20                 	db	32
   194  00FE94  20                 	db	32
   195  00FE95  20                 	db	32
   196  00FE96  20                 	db	32
   197  00FE97  20                 	db	32
   198  00FE98  00                 	db	0
   199  00FE99                     STR_20:
   200  00FE99  44                 	db	68	;'D'
   201  00FE9A  41                 	db	65	;'A'
   202  00FE9B  54                 	db	84	;'T'
   203  00FE9C  45                 	db	69	;'E'
   204  00FE9D  3A                 	db	58	;':'
   205  00FE9E  20                 	db	32
   206  00FE9F  25                 	db	37
   207  00FEA0  30                 	db	48	;'0'
   208  00FEA1  32                 	db	50	;'2'
   209  00FEA2  78                 	db	120	;'x'
   210  00FEA3  2F                 	db	47
   211  00FEA4  25                 	db	37
   212  00FEA5  30                 	db	48	;'0'
   213  00FEA6  32                 	db	50	;'2'
   214  00FEA7  78                 	db	120	;'x'
   215  00FEA8  2F                 	db	47
   216  00FEA9  25                 	db	37
   217  00FEAA  30                 	db	48	;'0'
   218  00FEAB  32                 	db	50	;'2'
   219  00FEAC  78                 	db	120	;'x'
   220  00FEAD  20                 	db	32
   221  00FEAE  20                 	db	32
   222  00FEAF  00                 	db	0
   223  00FEB0                     STR_21:
   224  00FEB0  54                 	db	84	;'T'
   225  00FEB1  49                 	db	73	;'I'
   226  00FEB2  4D                 	db	77	;'M'
   227  00FEB3  45                 	db	69	;'E'
   228  00FEB4  3A                 	db	58	;':'
   229  00FEB5  20                 	db	32
   230  00FEB6  25                 	db	37
   231  00FEB7  30                 	db	48	;'0'
   232  00FEB8  32                 	db	50	;'2'
   233  00FEB9  78                 	db	120	;'x'
   234  00FEBA  3A                 	db	58	;':'
   235  00FEBB  25                 	db	37
   236  00FEBC  30                 	db	48	;'0'
   237  00FEBD  32                 	db	50	;'2'
   238  00FEBE  78                 	db	120	;'x'
   239  00FEBF  3A                 	db	58	;':'
   240  00FEC0  25                 	db	37
   241  00FEC1  30                 	db	48	;'0'
   242  00FEC2  32                 	db	50	;'2'
   243  00FEC3  78                 	db	120	;'x'
   244  00FEC4  20                 	db	32
   245  00FEC5  20                 	db	32
   246  00FEC6  00                 	db	0
   247  00FEC7                     STR_15:
   248  00FEC7  42                 	db	66	;'B'
   249  00FEC8  41                 	db	65	;'A'
   250  00FEC9  54                 	db	84	;'T'
   251  00FECA  54                 	db	84	;'T'
   252  00FECB  45                 	db	69	;'E'
   253  00FECC  52                 	db	82	;'R'
   254  00FECD  49                 	db	73	;'I'
   255  00FECE  45                 	db	69	;'E'
   256  00FECF  53                 	db	83	;'S'
   257  00FED0  3A                 	db	58	;':'
   258  00FED1  20                 	db	32
   259  00FED2  25                 	db	37
   260  00FED3  30                 	db	48	;'0'
   261  00FED4  32                 	db	50	;'2'
   262  00FED5  64                 	db	100	;'d'
   263  00FED6  20                 	db	32
   264  00FED7  20                 	db	32
   265  00FED8  20                 	db	32
   266  00FED9  20                 	db	32
   267  00FEDA  20                 	db	32
   268  00FEDB  00                 	db	0
   269  00FEDC                     STR_11:
   270  00FEDC  42                 	db	66	;'B'
   271  00FEDD  41                 	db	65	;'A'
   272  00FEDE  54                 	db	84	;'T'
   273  00FEDF  54                 	db	84	;'T'
   274  00FEE0  45                 	db	69	;'E'
   275  00FEE1  52                 	db	82	;'R'
   276  00FEE2  49                 	db	73	;'I'
   277  00FEE3  45                 	db	69	;'E'
   278  00FEE4  53                 	db	83	;'S'
   279  00FEE5  3A                 	db	58	;':'
   280  00FEE6  20                 	db	32
   281  00FEE7  25                 	db	37
   282  00FEE8  30                 	db	48	;'0'
   283  00FEE9  32                 	db	50	;'2'
   284  00FEEA  64                 	db	100	;'d'
   285  00FEEB  20                 	db	32
   286  00FEEC  20                 	db	32
   287  00FEED  20                 	db	32
   288  00FEEE  00                 	db	0
   289  00FEEF                     STR_24:
   290  00FEEF  30                 	db	48	;'0'
   291  00FEF0  31                 	db	49	;'1'
   292  00FEF1  32                 	db	50	;'2'
   293  00FEF2  33                 	db	51	;'3'
   294  00FEF3  34                 	db	52	;'4'
   295  00FEF4  35                 	db	53	;'5'
   296  00FEF5  36                 	db	54	;'6'
   297  00FEF6  37                 	db	55	;'7'
   298  00FEF7  38                 	db	56	;'8'
   299  00FEF8  39                 	db	57	;'9'
   300  00FEF9  61                 	db	97	;'a'
   301  00FEFA  62                 	db	98	;'b'
   302  00FEFB  63                 	db	99	;'c'
   303  00FEFC  64                 	db	100	;'d'
   304  00FEFD  65                 	db	101	;'e'
   305  00FEFE  66                 	db	102	;'f'
   306  00FEFF  00                 	db	0
   307  00FF00                     STR_23:
   308  00FF00  20                 	db	32
   309  00FF01  20                 	db	32
   310  00FF02  20                 	db	32
   311  00FF03  20                 	db	32
   312  00FF04  20                 	db	32
   313  00FF05  20                 	db	32
   314  00FF06  20                 	db	32
   315  00FF07  20                 	db	32
   316  00FF08  20                 	db	32
   317  00FF09  20                 	db	32
   318  00FF0A  20                 	db	32
   319  00FF0B  20                 	db	32
   320  00FF0C  20                 	db	32
   321  00FF0D  20                 	db	32
   322  00FF0E  20                 	db	32
   323  00FF0F  20                 	db	32
   324  00FF10  00                 	db	0
   325  00FF11                     STR_12:
   326  00FF11  23                 	db	35
   327  00FF12  20                 	db	32
   328  00FF13  4F                 	db	79	;'O'
   329  00FF14  46                 	db	70	;'F'
   330  00FF15  20                 	db	32
   331  00FF16  43                 	db	67	;'C'
   332  00FF17  20                 	db	32
   333  00FF18  20                 	db	32
   334  00FF19  20                 	db	32
   335  00FF1A  20                 	db	32
   336  00FF1B  20                 	db	32
   337  00FF1C  20                 	db	32
   338  00FF1D  20                 	db	32
   339  00FF1E  20                 	db	32
   340  00FF1F  20                 	db	32
   341  00FF20  20                 	db	32
   342  00FF21  00                 	db	0
   343  00FF22                     STR_16:
   344  00FF22  23                 	db	35
   345  00FF23  20                 	db	32
   346  00FF24  4F                 	db	79	;'O'
   347  00FF25  46                 	db	70	;'F'
   348  00FF26  20                 	db	32
   349  00FF27  41                 	db	65	;'A'
   350  00FF28  41                 	db	65	;'A'
   351  00FF29  20                 	db	32
   352  00FF2A  20                 	db	32
   353  00FF2B  20                 	db	32
   354  00FF2C  20                 	db	32
   355  00FF2D  20                 	db	32
   356  00FF2E  20                 	db	32
   357  00FF2F  20                 	db	32
   358  00FF30  20                 	db	32
   359  00FF31  20                 	db	32
   360  00FF32  00                 	db	0
   361  00FF33                     STR_14:
   362  00FF33  23                 	db	35
   363  00FF34  20                 	db	32
   364  00FF35  4F                 	db	79	;'O'
   365  00FF36  46                 	db	70	;'F'
   366  00FF37  20                 	db	32
   367  00FF38  39                 	db	57	;'9'
   368  00FF39  56                 	db	86	;'V'
   369  00FF3A  20                 	db	32
   370  00FF3B  20                 	db	32
   371  00FF3C  20                 	db	32
   372  00FF3D  20                 	db	32
   373  00FF3E  20                 	db	32
   374  00FF3F  20                 	db	32
   375  00FF40  20                 	db	32
   376  00FF41  20                 	db	32
   377  00FF42  20                 	db	32
   378  00FF43  00                 	db	0
   379  00FF44                     STR_4:
   380  00FF44  52                 	db	82	;'R'
   381  00FF45  55                 	db	85	;'U'
   382  00FF46  4E                 	db	78	;'N'
   383  00FF47  4E                 	db	78	;'N'
   384  00FF48  49                 	db	73	;'I'
   385  00FF49  4E                 	db	78	;'N'
   386  00FF4A  47                 	db	71	;'G'
   387  00FF4B  2E                 	db	46
   388  00FF4C  2E                 	db	46
   389  00FF4D  2E                 	db	46
   390  00FF4E  20                 	db	32
   391  00FF4F  20                 	db	32
   392  00FF50  20                 	db	32
   393  00FF51  20                 	db	32
   394  00FF52  20                 	db	32
   395  00FF53  20                 	db	32
   396  00FF54  00                 	db	0
   397  00FF55                     STR_10:
   398  00FF55  54                 	db	84	;'T'
   399  00FF56  4F                 	db	79	;'O'
   400  00FF57  54                 	db	84	;'T'
   401  00FF58  41                 	db	65	;'A'
   402  00FF59  4C                 	db	76	;'L'
   403  00FF5A  20                 	db	32
   404  00FF5B  23                 	db	35
   405  00FF5C  20                 	db	32
   406  00FF5D  4F                 	db	79	;'O'
   407  00FF5E  46                 	db	70	;'F'
   408  00FF5F  20                 	db	32
   409  00FF60  20                 	db	32
   410  00FF61  20                 	db	32
   411  00FF62  20                 	db	32
   412  00FF63  20                 	db	32
   413  00FF64  20                 	db	32
   414  00FF65  00                 	db	0
   415  00FF66                     STR_7:
   416  00FF66  54                 	db	84	;'T'
   417  00FF67  4F                 	db	79	;'O'
   418  00FF68  20                 	db	32
   419  00FF69  43                 	db	67	;'C'
   420  00FF6A  4F                 	db	79	;'O'
   421  00FF6B  4E                 	db	78	;'N'
   422  00FF6C  54                 	db	84	;'T'
   423  00FF6D  49                 	db	73	;'I'
   424  00FF6E  4E                 	db	78	;'N'
   425  00FF6F  55                 	db	85	;'U'
   426  00FF70  45                 	db	69	;'E'
   427  00FF71  20                 	db	32
   428  00FF72  20                 	db	32
   429  00FF73  20                 	db	32
   430  00FF74  20                 	db	32
   431  00FF75  20                 	db	32
   432  00FF76  00                 	db	0
   433  00FF77                     STR_18:
   434  00FF77  23                 	db	35
   435  00FF78  20                 	db	32
   436  00FF79  4F                 	db	79	;'O'
   437  00FF7A  46                 	db	70	;'F'
   438  00FF7B  20                 	db	32
   439  00FF7C  44                 	db	68	;'D'
   440  00FF7D  52                 	db	82	;'R'
   441  00FF7E  41                 	db	65	;'A'
   442  00FF7F  49                 	db	73	;'I'
   443  00FF80  4E                 	db	78	;'N'
   444  00FF81  45                 	db	69	;'E'
   445  00FF82  44                 	db	68	;'D'
   446  00FF83  20                 	db	32
   447  00FF84  20                 	db	32
   448  00FF85  20                 	db	32
   449  00FF86  20                 	db	32
   450  00FF87  00                 	db	0
   451  00FF88                     STR_6:
   452  00FF88  44                 	db	68	;'D'
   453  00FF89  4F                 	db	79	;'O'
   454  00FF8A  4E                 	db	78	;'N'
   455  00FF8B  45                 	db	69	;'E'
   456  00FF8C  21                 	db	33
   457  00FF8D  20                 	db	32
   458  00FF8E  50                 	db	80	;'P'
   459  00FF8F  52                 	db	82	;'R'
   460  00FF90  45                 	db	69	;'E'
   461  00FF91  53                 	db	83	;'S'
   462  00FF92  53                 	db	83	;'S'
   463  00FF93  20                 	db	32
   464  00FF94  2A                 	db	42
   465  00FF95  20                 	db	32
   466  00FF96  20                 	db	32
   467  00FF97  20                 	db	32
   468  00FF98  00                 	db	0
   469  00FF99                     STR_22:
   470  00FF99  45                 	db	69	;'E'
   471  00FF9A  4D                 	db	77	;'M'
   472  00FF9B  45                 	db	69	;'E'
   473  00FF9C  52                 	db	82	;'R'
   474  00FF9D  47                 	db	71	;'G'
   475  00FF9E  45                 	db	69	;'E'
   476  00FF9F  4E                 	db	78	;'N'
   477  00FFA0  43                 	db	67	;'C'
   478  00FFA1  59                 	db	89	;'Y'
   479  00FFA2  20                 	db	32
   480  00FFA3  53                 	db	83	;'S'
   481  00FFA4  54                 	db	84	;'T'
   482  00FFA5  4F                 	db	79	;'O'
   483  00FFA6  50                 	db	80	;'P'
   484  00FFA7  20                 	db	32
   485  00FFA8  20                 	db	32
   486  00FFA9  00                 	db	0
   487  00FFAA                     STR_8:
   488  00FFAA  54                 	db	84	;'T'
   489  00FFAB  4F                 	db	79	;'O'
   490  00FFAC  54                 	db	84	;'T'
   491  00FFAD  41                 	db	65	;'A'
   492  00FFAE  4C                 	db	76	;'L'
   493  00FFAF  20                 	db	32
   494  00FFB0  52                 	db	82	;'R'
   495  00FFB1  55                 	db	85	;'U'
   496  00FFB2  4E                 	db	78	;'N'
   497  00FFB3  20                 	db	32
   498  00FFB4  54                 	db	84	;'T'
   499  00FFB5  49                 	db	73	;'I'
   500  00FFB6  4D                 	db	77	;'M'
   501  00FFB7  45                 	db	69	;'E'
   502  00FFB8  3A                 	db	58	;':'
   503  00FFB9  20                 	db	32
   504  00FFBA  00                 	db	0
   505  00FFBB                     STR_3:
   506  00FFBB  20                 	db	32
   507  00FFBC  3C                 	db	60	;'<'
   508  00FFBD  34                 	db	52	;'4'
   509  00FFBE  20                 	db	32
   510  00FFBF  20                 	db	32
   511  00FFC0  20                 	db	32
   512  00FFC1  44                 	db	68	;'D'
   513  00FFC2  41                 	db	65	;'A'
   514  00FFC3  54                 	db	84	;'T'
   515  00FFC4  41                 	db	65	;'A'
   516  00FFC5  20                 	db	32
   517  00FFC6  20                 	db	32
   518  00FFC7  20                 	db	32
   519  00FFC8  36                 	db	54	;'6'
   520  00FFC9  3E                 	db	62	;'>'
   521  00FFCA  20                 	db	32
   522  00FFCB  00                 	db	0
   523  00FFCC                     STR_5:
   524  00FFCC  50                 	db	80	;'P'
   525  00FFCD  52                 	db	82	;'R'
   526  00FFCE  45                 	db	69	;'E'
   527  00FFCF  53                 	db	83	;'S'
   528  00FFD0  53                 	db	83	;'S'
   529  00FFD1  20                 	db	32
   530  00FFD2  23                 	db	35
   531  00FFD3  20                 	db	32
   532  00FFD4  54                 	db	84	;'T'
   533  00FFD5  4F                 	db	79	;'O'
   534  00FFD6  20                 	db	32
   535  00FFD7  53                 	db	83	;'S'
   536  00FFD8  54                 	db	84	;'T'
   537  00FFD9  4F                 	db	79	;'O'
   538  00FFDA  50                 	db	80	;'P'
   539  00FFDB  20                 	db	32
   540  00FFDC  00                 	db	0
   541  00FFDD                     STR_1:
   542  00FFDD  53                 	db	83	;'S'
   543  00FFDE  54                 	db	84	;'T'
   544  00FFDF  41                 	db	65	;'A'
   545  00FFE0  52                 	db	82	;'R'
   546  00FFE1  54                 	db	84	;'T'
   547  00FFE2  3A                 	db	58	;':'
   548  00FFE3  20                 	db	32
   549  00FFE4  20                 	db	32
   550  00FFE5  20                 	db	32
   551  00FFE6  50                 	db	80	;'P'
   552  00FFE7  52                 	db	82	;'R'
   553  00FFE8  45                 	db	69	;'E'
   554  00FFE9  53                 	db	83	;'S'
   555  00FFEA  53                 	db	83	;'S'
   556  00FFEB  20                 	db	32
   557  00FFEC  2A                 	db	42
   558  00FFED  00                 	db	0
   559  00FFEE                     STR_2:
   560  00FFEE  3C                 	db	60	;'<'
   561  00FFEF  20                 	db	32
   562  00FFF0  34                 	db	52	;'4'
   563  00FFF1  20                 	db	32
   564  00FFF2  20                 	db	32
   565  00FFF3  20                 	db	32
   566  00FFF4  44                 	db	68	;'D'
   567  00FFF5  41                 	db	65	;'A'
   568  00FFF6  54                 	db	84	;'T'
   569  00FFF7  41                 	db	65	;'A'
   570  00FFF8  20                 	db	32
   571  00FFF9  20                 	db	32
   572  00FFFA  20                 	db	32
   573  00FFFB  36                 	db	54	;'6'
   574  00FFFC  20                 	db	32
   575  00FFFD  3E                 	db	62	;'>'
   576  00FFFE  00                 	db	0
   577  0000                     
   578                           ; #config settings
   579  00FFFF  00                 	db	0	; dummy byte at the end
   580  0000                     
   581                           	psect	cinit
   582  000DEA                     __pcinit:
   583                           	opt stack 0
   584  000DEA                     start_initialization:
   585                           	opt stack 0
   586  000DEA                     __initialization:
   587                           	opt stack 0
   588                           
   589                           ; Initialize objects allocated to COMRAM (2 bytes)
   590                           ; load TBLPTR registers with __pidataCOMRAM
   591  000DEA  0ECA               	movlw	low __pidataCOMRAM
   592  000DEC  6EF6               	movwf	tblptrl,c
   593  000DEE  0E0E               	movlw	high __pidataCOMRAM
   594  000DF0  6EF7               	movwf	tblptrh,c
   595  000DF2  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   596  000DF4  6EF8               	movwf	tblptru,c
   597  000DF6  0009               	tblrd		*+	;fetch initializer
   598  000DF8  CFF5 F055          	movff	tablat,__pdataCOMRAM
   599  000DFC  0009               	tblrd		*+	;fetch initializer
   600  000DFE  CFF5 F056          	movff	tablat,__pdataCOMRAM+1
   601                           
   602                           ; Clear objects allocated to COMRAM (28 bytes)
   603  000E02  EE00  F039         	lfsr	0,__pbssCOMRAM
   604  000E06  0E1C               	movlw	28
   605  000E08                     clear_0:
   606  000E08  6AEE               	clrf	postinc0,c
   607  000E0A  06E8               	decf	wreg,f,c
   608  000E0C  E1FD               	bnz	clear_0
   609  000E0E                     end_of_initialization:
   610                           	opt stack 0
   611  000E0E                     __end_of__initialization:
   612                           	opt stack 0
   613  000E0E  9057               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   614  000E10  9257               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   615  000E12  0E00               	movlw	low (__Lmediumconst shr (0+16))
   616  000E14  6EF8               	movwf	tblptru,c
   617  000E16  0100               	movlb	0
   618  000E18  EF55  F000         	goto	_main	;jump to C main() function
   619                           tblptru	equ	0xFF8
   620                           tblptrh	equ	0xFF7
   621                           tblptrl	equ	0xFF6
   622                           tablat	equ	0xFF5
   623                           postinc0	equ	0xFEE
   624                           wreg	equ	0xFE8
   625                           
   626                           	psect	bssCOMRAM
   627  000039                     __pbssCOMRAM:
   628                           	opt stack 0
   629  000039                     _time:
   630                           	opt stack 0
   631  000039                     	ds	7
   632  000040                     _doneTimer:
   633                           	opt stack 0
   634  000040                     	ds	2
   635  000042                     _count7:
   636                           	opt stack 0
   637  000042                     	ds	1
   638  000043                     _count9V:
   639                           	opt stack 0
   640  000043                     	ds	1
   641  000044                     _countAA:
   642                           	opt stack 0
   643  000044                     	ds	1
   644  000045                     _countC:
   645                           	opt stack 0
   646  000045                     	ds	1
   647  000046                     _countDrain:
   648                           	opt stack 0
   649  000046                     	ds	1
   650  000047                     _min:
   651                           	opt stack 0
   652  000047                     	ds	1
   653  000048                     _num9V:
   654                           	opt stack 0
   655  000048                     	ds	1
   656  000049                     _numAA:
   657                           	opt stack 0
   658  000049                     	ds	1
   659  00004A                     _numBats:
   660                           	opt stack 0
   661  00004A                     	ds	1
   662  00004B                     _numC:
   663                           	opt stack 0
   664  00004B                     	ds	1
   665  00004C                     _numDrain:
   666                           	opt stack 0
   667  00004C                     	ds	1
   668  00004D                     _opTimer:
   669                           	opt stack 0
   670  00004D                     	ds	1
   671  00004E                     _plat1Right:
   672                           	opt stack 0
   673  00004E                     	ds	1
   674  00004F                     _plat2Left:
   675                           	opt stack 0
   676  00004F                     	ds	1
   677  000050                     _plat2Right:
   678                           	opt stack 0
   679  000050                     	ds	1
   680  000051                     _sec:
   681                           	opt stack 0
   682  000051                     	ds	1
   683  000052                     _solOnTimer:
   684                           	opt stack 0
   685  000052                     	ds	1
   686  000053                     _step1:
   687                           	opt stack 0
   688  000053                     	ds	1
   689  000054                     _step2:
   690                           	opt stack 0
   691  000054                     	ds	1
   692                           tblptru	equ	0xFF8
   693                           tblptrh	equ	0xFF7
   694                           tblptrl	equ	0xFF6
   695                           tablat	equ	0xFF5
   696                           postinc0	equ	0xFEE
   697                           wreg	equ	0xFE8
   698                           
   699                           	psect	dataCOMRAM
   700  000055                     __pdataCOMRAM:
   701                           	opt stack 0
   702  000055                     _plat1Left:
   703                           	opt stack 0
   704  000055                     	ds	1
   705  000056                     _screenMode:
   706                           	opt stack 0
   707  000056                     	ds	1
   708                           tblptru	equ	0xFF8
   709                           tblptrh	equ	0xFF7
   710                           tblptrl	equ	0xFF6
   711                           tablat	equ	0xFF5
   712                           postinc0	equ	0xFEE
   713                           wreg	equ	0xFE8
   714                           
   715                           	psect	cstackBANK0
   716  000080                     __pcstackBANK0:
   717                           	opt stack 0
   718  000080                     ?_printf:
   719                           	opt stack 0
   720  000080                     printf@f:
   721                           	opt stack 0
   722  000080                     I2C_Master_Init@c:
   723                           	opt stack 0
   724                           
   725                           ; 4 bytes @ 0x0
   726  000080                     	ds	4
   727  000084                     ??_I2C_Master_Init:
   728                           
   729                           ; 1 bytes @ 0x4
   730  000084                     	ds	4
   731  000088                     printf@idx:
   732                           	opt stack 0
   733                           
   734                           ; 1 bytes @ 0x8
   735  000088                     	ds	1
   736  000089                     printf@ap:
   737                           	opt stack 0
   738                           
   739                           ; 2 bytes @ 0x9
   740  000089                     	ds	2
   741  00008B                     printf@prec:
   742                           	opt stack 0
   743                           
   744                           ; 1 bytes @ 0xB
   745  00008B                     	ds	1
   746  00008C                     printf@val:
   747                           	opt stack 0
   748                           
   749                           ; 2 bytes @ 0xC
   750  00008C                     	ds	2
   751  00008E                     printf@flag:
   752                           	opt stack 0
   753                           
   754                           ; 1 bytes @ 0xE
   755  00008E                     	ds	1
   756  00008F                     printf@width:
   757                           	opt stack 0
   758                           
   759                           ; 2 bytes @ 0xF
   760  00008F                     	ds	2
   761  000091                     printf@c:
   762                           	opt stack 0
   763                           
   764                           ; 1 bytes @ 0x11
   765  000091                     	ds	1
   766  000092                     ??_main:
   767                           
   768                           ; 1 bytes @ 0x12
   769  000092                     	ds	2
   770  000094                     main@i_548:
   771                           	opt stack 0
   772                           
   773                           ; 1 bytes @ 0x14
   774  000094                     	ds	1
   775  000095                     main@i:
   776                           	opt stack 0
   777                           
   778                           ; 1 bytes @ 0x15
   779  000095                     	ds	1
   780                           tblptru	equ	0xFF8
   781                           tblptrh	equ	0xFF7
   782                           tblptrl	equ	0xFF6
   783                           tablat	equ	0xFF5
   784                           postinc0	equ	0xFEE
   785                           wreg	equ	0xFE8
   786                           
   787                           	psect	cstackCOMRAM
   788  000001                     __pcstackCOMRAM:
   789                           	opt stack 0
   790  000001                     ?___awdiv:
   791                           	opt stack 0
   792  000001                     ?___awmod:
   793                           	opt stack 0
   794  000001                     switchMenu@right:
   795                           	opt stack 0
   796  000001                     ___awdiv@dividend:
   797                           	opt stack 0
   798  000001                     ___awmod@dividend:
   799                           	opt stack 0
   800                           
   801                           ; 2 bytes @ 0x0
   802  000001                     	ds	1
   803  000002                     switchMenu@key:
   804                           	opt stack 0
   805                           
   806                           ; 1 bytes @ 0x1
   807  000002                     	ds	1
   808  000003                     switchMenu@left:
   809                           	opt stack 0
   810  000003                     ___awdiv@divisor:
   811                           	opt stack 0
   812  000003                     ___awmod@divisor:
   813                           	opt stack 0
   814                           
   815                           ; 2 bytes @ 0x2
   816  000003                     	ds	2
   817  000005                     ___awdiv@counter:
   818                           	opt stack 0
   819  000005                     ___awmod@counter:
   820                           	opt stack 0
   821                           
   822                           ; 1 bytes @ 0x4
   823  000005                     	ds	1
   824  000006                     ___awdiv@sign:
   825                           	opt stack 0
   826  000006                     ___awmod@sign:
   827                           	opt stack 0
   828                           
   829                           ; 1 bytes @ 0x5
   830  000006                     	ds	1
   831  000007                     ___awdiv@quotient:
   832                           	opt stack 0
   833                           
   834                           ; 2 bytes @ 0x6
   835  000007                     	ds	2
   836  000009                     ??_highISR:
   837                           
   838                           ; 1 bytes @ 0x8
   839  000009                     	ds	14
   840  000017                     highISR@keypress:
   841                           	opt stack 0
   842                           
   843                           ; 1 bytes @ 0x16
   844  000017                     	ds	1
   845  000018                     ??_lowISR:
   846                           
   847                           ; 1 bytes @ 0x17
   848  000018                     	ds	17
   849  000029                     ??_isdigit:
   850  000029                     ??_I2C_Master_Wait:
   851  000029                     ?___wmul:
   852                           	opt stack 0
   853  000029                     ?___lwdiv:
   854                           	opt stack 0
   855  000029                     ?___lldiv:
   856                           	opt stack 0
   857  000029                     lcdNibble@temp:
   858                           	opt stack 0
   859  000029                     ___wmul@multiplier:
   860                           	opt stack 0
   861  000029                     ___lwdiv@dividend:
   862                           	opt stack 0
   863  000029                     ___lldiv@dividend:
   864                           	opt stack 0
   865                           
   866                           ; 4 bytes @ 0x28
   867  000029                     	ds	1
   868  00002A                     I2C_Master_Read@a:
   869                           	opt stack 0
   870  00002A                     lcdNibble@data:
   871                           	opt stack 0
   872  00002A                     _isdigit$915:
   873                           	opt stack 0
   874  00002A                     I2C_Master_Write@d:
   875                           	opt stack 0
   876                           
   877                           ; 2 bytes @ 0x29
   878  00002A                     	ds	1
   879  00002B                     I2C_Master_Read@temp:
   880                           	opt stack 0
   881  00002B                     lcdInst@data:
   882                           	opt stack 0
   883  00002B                     putch@data:
   884                           	opt stack 0
   885  00002B                     isdigit@c:
   886                           	opt stack 0
   887  00002B                     ___wmul@multiplicand:
   888                           	opt stack 0
   889  00002B                     ___lwdiv@divisor:
   890                           	opt stack 0
   891                           
   892                           ; 2 bytes @ 0x2A
   893  00002B                     	ds	1
   894  00002C                     ??_initLCD:
   895                           
   896                           ; 1 bytes @ 0x2B
   897  00002C                     	ds	1
   898  00002D                     ___lwdiv@counter:
   899                           	opt stack 0
   900  00002D                     ___wmul@product:
   901                           	opt stack 0
   902  00002D                     ___lldiv@divisor:
   903                           	opt stack 0
   904                           
   905                           ; 4 bytes @ 0x2C
   906  00002D                     	ds	1
   907  00002E                     ___lwdiv@quotient:
   908                           	opt stack 0
   909                           
   910                           ; 2 bytes @ 0x2D
   911  00002E                     	ds	2
   912  000030                     ?___lwmod:
   913                           	opt stack 0
   914  000030                     ___lwmod@dividend:
   915                           	opt stack 0
   916                           
   917                           ; 2 bytes @ 0x2F
   918  000030                     	ds	1
   919  000031                     ___lldiv@quotient:
   920                           	opt stack 0
   921                           
   922                           ; 4 bytes @ 0x30
   923  000031                     	ds	1
   924  000032                     ___lwmod@divisor:
   925                           	opt stack 0
   926                           
   927                           ; 2 bytes @ 0x31
   928  000032                     	ds	2
   929  000034                     ___lwmod@counter:
   930                           	opt stack 0
   931                           
   932                           ; 1 bytes @ 0x33
   933  000034                     	ds	1
   934  000035                     ??_printf:
   935  000035                     ___lldiv@counter:
   936                           	opt stack 0
   937                           
   938                           ; 1 bytes @ 0x34
   939  000035                     	ds	4
   940                           tblptru	equ	0xFF8
   941                           tblptrh	equ	0xFF7
   942                           tblptrl	equ	0xFF6
   943                           tablat	equ	0xFF5
   944                           postinc0	equ	0xFEE
   945                           wreg	equ	0xFE8
   946                           
   947 ;;
   948 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   949 ;;
   950 ;; *************** function _main *****************
   951 ;; Defined at:
   952 ;;		line 32 in file "../main.c"
   953 ;; Parameters:    Size  Location     Type
   954 ;;		None
   955 ;; Auto vars:     Size  Location     Type
   956 ;;  i               1   20[BANK0 ] unsigned char 
   957 ;;  i               1   21[BANK0 ] unsigned char 
   958 ;; Return value:  Size  Location     Type
   959 ;;                  1    wreg      void 
   960 ;; Registers used:
   961 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   962 ;; Tracked objects:
   963 ;;		On entry : 0/0
   964 ;;		On exit  : 0/0
   965 ;;		Unchanged: 0/0
   966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   967 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   968 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   969 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   970 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   971 ;;Total ram usage:        4 bytes
   972 ;; Hardware stack levels required when called:    7
   973 ;; This function calls:
   974 ;;		_I2C_Master_Init
   975 ;;		_I2C_Master_Read
   976 ;;		_I2C_Master_Start
   977 ;;		_I2C_Master_Stop
   978 ;;		_I2C_Master_Write
   979 ;;		_initLCD
   980 ;;		_lcdInst
   981 ;;		_printf
   982 ;; This function is called by:
   983 ;;		Startup code after reset
   984 ;; This function uses a non-reentrant model
   985 ;;
   986                           
   987                           	psect	text0
   988  0000AA                     __ptext0:
   989                           	opt stack 0
   990  0000AA                     _main:
   991                           	opt stack 24
   992                           
   993                           ;main.c: 45: TRISA = 0b11000011;
   994                           
   995                           ;incstack = 0
   996  0000AA  0EC3               	movlw	195
   997  0000AC  6E92               	movwf	3986,c	;volatile
   998                           
   999                           ;main.c: 46: TRISB = 0b11110010;
  1000  0000AE  0EF2               	movlw	242
  1001  0000B0  6E93               	movwf	3987,c	;volatile
  1002                           
  1003                           ;main.c: 47: TRISC = 0x00;
  1004  0000B2  0E00               	movlw	0
  1005  0000B4  6E94               	movwf	3988,c	;volatile
  1006                           
  1007                           ;main.c: 48: TRISD = 0x00;
  1008  0000B6  0E00               	movlw	0
  1009  0000B8  6E95               	movwf	3989,c	;volatile
  1010                           
  1011                           ;main.c: 49: TRISE = 0x00;
  1012  0000BA  0E00               	movlw	0
  1013  0000BC  6E96               	movwf	3990,c	;volatile
  1014                           
  1015                           ;main.c: 51: LATA = 0x00;
  1016  0000BE  0E00               	movlw	0
  1017  0000C0  6E89               	movwf	3977,c	;volatile
  1018                           
  1019                           ;main.c: 52: LATB = 0x00;
  1020  0000C2  0E00               	movlw	0
  1021  0000C4  6E8A               	movwf	3978,c	;volatile
  1022                           
  1023                           ;main.c: 53: LATC = 0x00;
  1024  0000C6  0E00               	movlw	0
  1025  0000C8  6E8B               	movwf	3979,c	;volatile
  1026                           
  1027                           ;main.c: 54: LATD = 0x00;
  1028  0000CA  0E00               	movlw	0
  1029  0000CC  6E8C               	movwf	3980,c	;volatile
  1030                           
  1031                           ;main.c: 55: LATE = 0x00;
  1032  0000CE  0E00               	movlw	0
  1033  0000D0  6E8D               	movwf	3981,c	;volatile
  1034                           
  1035                           ;main.c: 57: ADCON0 = 0x00;
  1036  0000D2  0E00               	movlw	0
  1037  0000D4  6EC2               	movwf	4034,c	;volatile
  1038                           
  1039                           ;main.c: 58: ADCON1 = 0x0E;
  1040  0000D6  0E0E               	movlw	14
  1041  0000D8  6EC1               	movwf	4033,c	;volatile
  1042                           
  1043                           ;main.c: 59: ADFM = 1;
  1044  0000DA  8EC0               	bsf	4032,7,c	;volatile
  1045                           
  1046                           ;main.c: 61: GIE = 1;
  1047  0000DC  8EF2               	bsf	intcon,7,c	;volatile
  1048                           
  1049                           ;main.c: 62: PEIE = 1;
  1050  0000DE  8CF2               	bsf	intcon,6,c	;volatile
  1051                           
  1052                           ;main.c: 63: INT1IE = 1;
  1053  0000E0  86F0               	bsf	intcon3,3,c	;volatile
  1054                           
  1055                           ;main.c: 64: INT1IF = 0;
  1056  0000E2  90F0               	bcf	intcon3,0,c	;volatile
  1057                           
  1058                           ;main.c: 66: TMR0IE = 1;
  1059  0000E4  8AF2               	bsf	intcon,5,c	;volatile
  1060                           
  1061                           ;main.c: 67: TMR0IF = 0;
  1062  0000E6  94F2               	bcf	intcon,2,c	;volatile
  1063                           
  1064                           ;main.c: 68: TMR1IE = 1;
  1065  0000E8  809D               	bsf	3997,0,c	;volatile
  1066                           
  1067                           ;main.c: 69: TMR1IF = 0;
  1068  0000EA  909E               	bcf	3998,0,c	;volatile
  1069                           
  1070                           ;main.c: 73: T0CON = 0b00000111;
  1071  0000EC  0E07               	movlw	7
  1072  0000EE  6ED5               	movwf	4053,c	;volatile
  1073                           
  1074                           ;main.c: 81: TMR0 = 55770;
  1075  0000F0  0ED9               	movlw	217
  1076  0000F2  6ED7               	movwf	4055,c	;volatile
  1077  0000F4  0EDA               	movlw	218
  1078  0000F6  6ED6               	movwf	4054,c	;volatile
  1079                           
  1080                           ;main.c: 90: T1CON = 0b10000000;
  1081  0000F8  0E80               	movlw	128
  1082  0000FA  6ECD               	movwf	4045,c	;volatile
  1083                           
  1084                           ;main.c: 99: TMR1 = 48035;
  1085  0000FC  0EBB               	movlw	187
  1086  0000FE  6ECF               	movwf	4047,c	;volatile
  1087  000100  0EA3               	movlw	163
  1088  000102  6ECE               	movwf	4046,c	;volatile
  1089                           
  1090                           ;main.c: 112: initLCD();
  1091  000104  EC96  F006         	call	_initLCD	;wreg free
  1092                           
  1093                           ;main.c: 114: I2C_Master_Init(10000);
  1094  000108  0E10               	movlw	16
  1095  00010A  0100               	movlb	0	; () banked
  1096  00010C  6F80               	movwf	I2C_Master_Init@c& (0+255),b
  1097  00010E  0E27               	movlw	39
  1098  000110  6F81               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  1099  000112  0E00               	movlw	0
  1100  000114  6F82               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  1101  000116  0E00               	movlw	0
  1102  000118  6F83               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  1103  00011A  EC18  F006         	call	_I2C_Master_Init	;wreg free
  1104                           
  1105                           ;main.c: 115: (INTCONbits.GIE = 1);
  1106  00011E  8EF2               	bsf	intcon,7,c	;volatile
  1107                           
  1108                           ;main.c: 118: while (screenMode == 2){
  1109                           
  1110                           ;main.c: 117: while (1) {
  1111  000120  D056               	goto	l2904
  1112  000122                     l206:
  1113                           
  1114                           ;main.c: 119: (INTCONbits.GIE = 0);
  1115  000122  9EF2               	bcf	intcon,7,c	;volatile
  1116                           
  1117                           ;main.c: 120: lcdInst(0b10000000);;
  1118  000124  0E80               	movlw	128
  1119  000126  EC52  F007         	call	_lcdInst
  1120                           
  1121                           ;main.c: 121: printf("START:   PRESS *");
  1122  00012A  0EDD               	movlw	low STR_1
  1123  00012C  0100               	movlb	0	; () banked
  1124  00012E  6F80               	movwf	printf@f& (0+255),b
  1125  000130  0EFF               	movlw	high STR_1
  1126  000132  0100               	movlb	0	; () banked
  1127  000134  6F81               	movwf	(printf@f+1)& (0+255),b
  1128  000136  EC8B  F002         	call	_printf	;wreg free
  1129                           
  1130                           ;main.c: 122: lcdInst(0b11000000);;
  1131  00013A  0EC0               	movlw	192
  1132  00013C  EC52  F007         	call	_lcdInst
  1133                           
  1134                           ;main.c: 123: printf("< 4   DATA   6 >");
  1135  000140  0EEE               	movlw	low STR_2
  1136  000142  0100               	movlb	0	; () banked
  1137  000144  6F80               	movwf	printf@f& (0+255),b
  1138  000146  0EFF               	movlw	high STR_2
  1139  000148  0100               	movlb	0	; () banked
  1140  00014A  6F81               	movwf	(printf@f+1)& (0+255),b
  1141  00014C  EC8B  F002         	call	_printf	;wreg free
  1142                           
  1143                           ;main.c: 124: (INTCONbits.GIE = 1);
  1144  000150  8EF2               	bsf	intcon,7,c	;volatile
  1145                           
  1146                           ;main.c: 125: unsigned char i;
  1147                           ;main.c: 126: for(i=0;i<50;i++){
  1148  000152  0E00               	movlw	0
  1149  000154  0100               	movlb	0	; () banked
  1150  000156  6F95               	movwf	main@i& (0+255),b
  1151  000158                     l2874:
  1152                           
  1153                           ; BSR set to: 0
  1154  000158  0E31               	movlw	49
  1155  00015A  0100               	movlb	0	; () banked
  1156  00015C  6595               	cpfsgt	main@i& (0+255),b
  1157  00015E  D001               	goto	l2878
  1158  000160  D010               	goto	l2886
  1159  000162                     l2878:
  1160                           
  1161                           ; BSR set to: 0
  1162                           ;main.c: 127: if (screenMode != 2)
  1163  000162  0E02               	movlw	2
  1164  000164  1856               	xorwf	_screenMode,w,c
  1165  000166  A4D8               	btfss	status,2,c
  1166  000168  D00C               	goto	l2886
  1167                           
  1168                           ; BSR set to: 0
  1169                           ;main.c: 129: _delay((unsigned long)((10)*(10000000/4000.0)));
  1170                           
  1171                           ; BSR set to: 0
  1172                           
  1173                           ; BSR set to: 0
  1174                           ;main.c: 128: break;
  1175  00016A  0E21               	movlw	33
  1176  00016C  0100               	movlb	0	; () banked
  1177  00016E  6F92               	movwf	??_main& (0+255),b
  1178  000170  0E76               	movlw	118
  1179  000172                     u2647:
  1180  000172  2EE8               	decfsz	wreg,f,c
  1181  000174  D7FE               	bra	u2647
  1182  000176  2F92               	decfsz	??_main& (0+255),f,b
  1183  000178  D7FC               	bra	u2647
  1184  00017A  F000               	nop	
  1185  00017C  0100               	movlb	0	; () banked
  1186  00017E  2B95               	incf	main@i& (0+255),f,b
  1187  000180  D7EB               	goto	l2874
  1188  000182                     l2886:
  1189                           
  1190                           ; BSR set to: 0
  1191                           ;main.c: 130: }
  1192                           ;main.c: 131: lcdInst(0b10000000);;
  1193  000182  0E80               	movlw	128
  1194  000184  EC52  F007         	call	_lcdInst
  1195                           
  1196                           ;main.c: 132: lcdInst(0b11000000);;
  1197  000188  0EC0               	movlw	192
  1198  00018A  EC52  F007         	call	_lcdInst
  1199                           
  1200                           ;main.c: 133: printf(" <4   DATA   6> ");
  1201  00018E  0EBB               	movlw	low STR_3
  1202  000190  0100               	movlb	0	; () banked
  1203  000192  6F80               	movwf	printf@f& (0+255),b
  1204  000194  0EFF               	movlw	high STR_3
  1205  000196  0100               	movlb	0	; () banked
  1206  000198  6F81               	movwf	(printf@f+1)& (0+255),b
  1207  00019A  EC8B  F002         	call	_printf	;wreg free
  1208                           
  1209                           ;main.c: 134: for(i=0;i<50;i++){
  1210  00019E  0E00               	movlw	0
  1211  0001A0  0100               	movlb	0	; () banked
  1212  0001A2  6F95               	movwf	main@i& (0+255),b
  1213  0001A4                     l2892:
  1214                           
  1215                           ; BSR set to: 0
  1216  0001A4  0E31               	movlw	49
  1217  0001A6  0100               	movlb	0	; () banked
  1218  0001A8  6595               	cpfsgt	main@i& (0+255),b
  1219  0001AA  D001               	goto	l2896
  1220  0001AC  D010               	goto	l2904
  1221  0001AE                     l2896:
  1222                           
  1223                           ; BSR set to: 0
  1224                           ;main.c: 135: if (screenMode != 2)
  1225  0001AE  0E02               	movlw	2
  1226  0001B0  1856               	xorwf	_screenMode,w,c
  1227  0001B2  A4D8               	btfss	status,2,c
  1228  0001B4  D00C               	goto	l2904
  1229                           
  1230                           ; BSR set to: 0
  1231                           ;main.c: 137: _delay((unsigned long)((10)*(10000000/4000.0)));
  1232                           
  1233                           ; BSR set to: 0
  1234                           
  1235                           ; BSR set to: 0
  1236                           ;main.c: 136: break;
  1237  0001B6  0E21               	movlw	33
  1238  0001B8  0100               	movlb	0	; () banked
  1239  0001BA  6F92               	movwf	??_main& (0+255),b
  1240  0001BC  0E76               	movlw	118
  1241  0001BE                     u2657:
  1242  0001BE  2EE8               	decfsz	wreg,f,c
  1243  0001C0  D7FE               	bra	u2657
  1244  0001C2  2F92               	decfsz	??_main& (0+255),f,b
  1245  0001C4  D7FC               	bra	u2657
  1246  0001C6  F000               	nop	
  1247  0001C8  0100               	movlb	0	; () banked
  1248  0001CA  2B95               	incf	main@i& (0+255),f,b
  1249  0001CC  D7EB               	goto	l2892
  1250  0001CE                     l2904:
  1251  0001CE  0E02               	movlw	2
  1252  0001D0  1856               	xorwf	_screenMode,w,c
  1253  0001D2  A4D8               	btfss	status,2,c
  1254  0001D4  D022               	goto	l2922
  1255  0001D6  D7A5               	goto	l206
  1256  0001D8                     l2906:
  1257                           
  1258                           ;main.c: 141: lcdInst(0b10000000);;
  1259  0001D8  0E80               	movlw	128
  1260  0001DA  EC52  F007         	call	_lcdInst
  1261                           
  1262                           ;main.c: 142: printf("RUNNING...      ");
  1263  0001DE  0E44               	movlw	low STR_4
  1264  0001E0  0100               	movlb	0	; () banked
  1265  0001E2  6F80               	movwf	printf@f& (0+255),b
  1266  0001E4  0EFF               	movlw	high STR_4
  1267  0001E6  0100               	movlb	0	; () banked
  1268  0001E8  6F81               	movwf	(printf@f+1)& (0+255),b
  1269  0001EA  EC8B  F002         	call	_printf	;wreg free
  1270                           
  1271                           ;main.c: 143: lcdInst(0b11000000);;
  1272  0001EE  0EC0               	movlw	192
  1273  0001F0  EC52  F007         	call	_lcdInst
  1274                           
  1275                           ;main.c: 144: printf("PRESS # TO STOP ");
  1276  0001F4  0ECC               	movlw	low STR_5
  1277  0001F6  0100               	movlb	0	; () banked
  1278  0001F8  6F80               	movwf	printf@f& (0+255),b
  1279  0001FA  0EFF               	movlw	high STR_5
  1280  0001FC  0100               	movlb	0	; () banked
  1281  0001FE  6F81               	movwf	(printf@f+1)& (0+255),b
  1282  000200  EC8B  F002         	call	_printf	;wreg free
  1283                           
  1284                           ;main.c: 156: if (plat1Left){
  1285  000204  5055               	movf	_plat1Left,w,c
  1286  000206  B4D8               	btfsc	status,2,c
  1287  000208  D008               	goto	l2922
  1288                           
  1289                           ;main.c: 157: LATAbits.LA2 = 1;;
  1290  00020A  8489               	bsf	3977,2,c	;volatile
  1291                           
  1292                           ;main.c: 158: LATAbits.LA3 = 0;;
  1293  00020C  9689               	bcf	3977,3,c	;volatile
  1294                           
  1295                           ;main.c: 159: step1 = 1;
  1296  00020E  0E01               	movlw	1
  1297  000210  6E53               	movwf	_step1,c
  1298                           
  1299                           ;main.c: 160: T1CONbits.TMR1ON = 1;
  1300  000212  80CD               	bsf	4045,0,c	;volatile
  1301  000214                     l2920:
  1302  000214  5055               	movf	_plat1Left,w,c
  1303  000216  A4D8               	btfss	status,2,c
  1304  000218  D7FD               	goto	l2920
  1305  00021A                     l2922:
  1306  00021A  0456               	decf	_screenMode,w,c
  1307  00021C  A4D8               	btfss	status,2,c
  1308  00021E  D017               	goto	l2930
  1309  000220  D7DB               	goto	l2906
  1310  000222                     l2924:
  1311                           
  1312                           ;main.c: 183: lcdInst(0b10000000);;
  1313  000222  0E80               	movlw	128
  1314  000224  EC52  F007         	call	_lcdInst
  1315                           
  1316                           ;main.c: 184: printf("DONE! PRESS *   ");
  1317  000228  0E88               	movlw	low STR_6
  1318  00022A  0100               	movlb	0	; () banked
  1319  00022C  6F80               	movwf	printf@f& (0+255),b
  1320  00022E  0EFF               	movlw	high STR_6
  1321  000230  0100               	movlb	0	; () banked
  1322  000232  6F81               	movwf	(printf@f+1)& (0+255),b
  1323  000234  EC8B  F002         	call	_printf	;wreg free
  1324                           
  1325                           ;main.c: 185: lcdInst(0b11000000);;
  1326  000238  0EC0               	movlw	192
  1327  00023A  EC52  F007         	call	_lcdInst
  1328                           
  1329                           ;main.c: 186: printf("TO CONTINUE     ");
  1330  00023E  0E66               	movlw	low STR_7
  1331  000240  0100               	movlb	0	; () banked
  1332  000242  6F80               	movwf	printf@f& (0+255),b
  1333  000244  0EFF               	movlw	high STR_7
  1334  000246  0100               	movlb	0	; () banked
  1335  000248  6F81               	movwf	(printf@f+1)& (0+255),b
  1336  00024A  EC8B  F002         	call	_printf	;wreg free
  1337  00024E                     l2930:
  1338  00024E  5056               	movf	_screenMode,w,c
  1339  000250  A4D8               	btfss	status,2,c
  1340  000252  D021               	goto	l2940
  1341  000254  D7E6               	goto	l2924
  1342  000256                     l225:
  1343                           
  1344                           ;main.c: 189: (INTCONbits.GIE = 0);
  1345  000256  9EF2               	bcf	intcon,7,c	;volatile
  1346                           
  1347                           ;main.c: 190: lcdInst(0b10000000);;
  1348  000258  0E80               	movlw	128
  1349  00025A  EC52  F007         	call	_lcdInst
  1350                           
  1351                           ;main.c: 191: printf("TOTAL RUN TIME: ");
  1352  00025E  0EAA               	movlw	low STR_8
  1353  000260  0100               	movlb	0	; () banked
  1354  000262  6F80               	movwf	printf@f& (0+255),b
  1355  000264  0EFF               	movlw	high STR_8
  1356  000266  0100               	movlb	0	; () banked
  1357  000268  6F81               	movwf	(printf@f+1)& (0+255),b
  1358  00026A  EC8B  F002         	call	_printf	;wreg free
  1359                           
  1360                           ;main.c: 192: lcdInst(0b11000000);;
  1361  00026E  0EC0               	movlw	192
  1362  000270  EC52  F007         	call	_lcdInst
  1363                           
  1364                           ;main.c: 193: printf("%02d:%02d               ", min, sec);
  1365  000274  0E80               	movlw	low STR_9
  1366  000276  0100               	movlb	0	; () banked
  1367  000278  6F80               	movwf	printf@f& (0+255),b
  1368  00027A  0EFE               	movlw	high STR_9
  1369  00027C  0100               	movlb	0	; () banked
  1370  00027E  6F81               	movwf	(printf@f+1)& (0+255),b
  1371  000280  C047  F082         	movff	_min,?_printf+2
  1372  000284  0100               	movlb	0	; () banked
  1373  000286  6B83               	clrf	(?_printf+3)& (0+255),b
  1374  000288  C051  F084         	movff	_sec,?_printf+4
  1375  00028C  0100               	movlb	0	; () banked
  1376  00028E  6B85               	clrf	(?_printf+5)& (0+255),b
  1377  000290  EC8B  F002         	call	_printf	;wreg free
  1378                           
  1379                           ;main.c: 194: (INTCONbits.GIE = 1);
  1380  000294  8EF2               	bsf	intcon,7,c	;volatile
  1381  000296                     l2940:
  1382  000296  0E03               	movlw	3
  1383  000298  1856               	xorwf	_screenMode,w,c
  1384  00029A  A4D8               	btfss	status,2,c
  1385  00029C  D01D               	goto	l2950
  1386  00029E  D7DB               	goto	l225
  1387  0002A0                     l228:
  1388                           
  1389                           ;main.c: 197: (INTCONbits.GIE = 0);
  1390  0002A0  9EF2               	bcf	intcon,7,c	;volatile
  1391                           
  1392                           ;main.c: 198: lcdInst(0b10000000);;
  1393  0002A2  0E80               	movlw	128
  1394  0002A4  EC52  F007         	call	_lcdInst
  1395                           
  1396                           ;main.c: 199: printf("TOTAL # OF      ");
  1397  0002A8  0E55               	movlw	low STR_10
  1398  0002AA  0100               	movlb	0	; () banked
  1399  0002AC  6F80               	movwf	printf@f& (0+255),b
  1400  0002AE  0EFF               	movlw	high STR_10
  1401  0002B0  0100               	movlb	0	; () banked
  1402  0002B2  6F81               	movwf	(printf@f+1)& (0+255),b
  1403  0002B4  EC8B  F002         	call	_printf	;wreg free
  1404                           
  1405                           ;main.c: 200: lcdInst(0b11000000);;
  1406  0002B8  0EC0               	movlw	192
  1407  0002BA  EC52  F007         	call	_lcdInst
  1408                           
  1409                           ;main.c: 201: printf("BATTERIES: %02d   ", numBats);
  1410  0002BE  0EDC               	movlw	low STR_11
  1411  0002C0  0100               	movlb	0	; () banked
  1412  0002C2  6F80               	movwf	printf@f& (0+255),b
  1413  0002C4  0EFE               	movlw	high STR_11
  1414  0002C6  0100               	movlb	0	; () banked
  1415  0002C8  6F81               	movwf	(printf@f+1)& (0+255),b
  1416  0002CA  C04A  F082         	movff	_numBats,?_printf+2
  1417  0002CE  0100               	movlb	0	; () banked
  1418  0002D0  6B83               	clrf	(?_printf+3)& (0+255),b
  1419  0002D2  EC8B  F002         	call	_printf	;wreg free
  1420                           
  1421                           ;main.c: 202: (INTCONbits.GIE = 1);
  1422  0002D6  8EF2               	bsf	intcon,7,c	;volatile
  1423  0002D8                     l2950:
  1424  0002D8  0E04               	movlw	4
  1425  0002DA  1856               	xorwf	_screenMode,w,c
  1426  0002DC  A4D8               	btfss	status,2,c
  1427  0002DE  D01D               	goto	l2960
  1428  0002E0  D7DF               	goto	l228
  1429  0002E2                     l231:
  1430                           
  1431                           ;main.c: 205: (INTCONbits.GIE = 0);
  1432  0002E2  9EF2               	bcf	intcon,7,c	;volatile
  1433                           
  1434                           ;main.c: 206: lcdInst(0b10000000);;
  1435  0002E4  0E80               	movlw	128
  1436  0002E6  EC52  F007         	call	_lcdInst
  1437                           
  1438                           ;main.c: 207: printf("# OF C          ");
  1439  0002EA  0E11               	movlw	low STR_12
  1440  0002EC  0100               	movlb	0	; () banked
  1441  0002EE  6F80               	movwf	printf@f& (0+255),b
  1442  0002F0  0EFF               	movlw	high STR_12
  1443  0002F2  0100               	movlb	0	; () banked
  1444  0002F4  6F81               	movwf	(printf@f+1)& (0+255),b
  1445  0002F6  EC8B  F002         	call	_printf	;wreg free
  1446                           
  1447                           ;main.c: 208: lcdInst(0b11000000);;
  1448  0002FA  0EC0               	movlw	192
  1449  0002FC  EC52  F007         	call	_lcdInst
  1450                           
  1451                           ;main.c: 209: printf("BATTERIES: %02d   ", numC);
  1452  000300  0EDC               	movlw	low STR_11
  1453  000302  0100               	movlb	0	; () banked
  1454  000304  6F80               	movwf	printf@f& (0+255),b
  1455  000306  0EFE               	movlw	high STR_11
  1456  000308  0100               	movlb	0	; () banked
  1457  00030A  6F81               	movwf	(printf@f+1)& (0+255),b
  1458  00030C  C04B  F082         	movff	_numC,?_printf+2
  1459  000310  0100               	movlb	0	; () banked
  1460  000312  6B83               	clrf	(?_printf+3)& (0+255),b
  1461  000314  EC8B  F002         	call	_printf	;wreg free
  1462                           
  1463                           ;main.c: 210: (INTCONbits.GIE = 1);
  1464  000318  8EF2               	bsf	intcon,7,c	;volatile
  1465  00031A                     l2960:
  1466  00031A  0E05               	movlw	5
  1467  00031C  1856               	xorwf	_screenMode,w,c
  1468  00031E  A4D8               	btfss	status,2,c
  1469  000320  D01D               	goto	l2970
  1470  000322  D7DF               	goto	l231
  1471  000324                     l234:
  1472                           
  1473                           ;main.c: 213: (INTCONbits.GIE = 0);
  1474  000324  9EF2               	bcf	intcon,7,c	;volatile
  1475                           
  1476                           ;main.c: 214: lcdInst(0b10000000);;
  1477  000326  0E80               	movlw	128
  1478  000328  EC52  F007         	call	_lcdInst
  1479                           
  1480                           ;main.c: 215: printf("# OF 9V         ");
  1481  00032C  0E33               	movlw	low STR_14
  1482  00032E  0100               	movlb	0	; () banked
  1483  000330  6F80               	movwf	printf@f& (0+255),b
  1484  000332  0EFF               	movlw	high STR_14
  1485  000334  0100               	movlb	0	; () banked
  1486  000336  6F81               	movwf	(printf@f+1)& (0+255),b
  1487  000338  EC8B  F002         	call	_printf	;wreg free
  1488                           
  1489                           ;main.c: 216: lcdInst(0b11000000);;
  1490  00033C  0EC0               	movlw	192
  1491  00033E  EC52  F007         	call	_lcdInst
  1492                           
  1493                           ;main.c: 217: printf("BATTERIES: %02d     ", num9V);
  1494  000342  0EC7               	movlw	low STR_15
  1495  000344  0100               	movlb	0	; () banked
  1496  000346  6F80               	movwf	printf@f& (0+255),b
  1497  000348  0EFE               	movlw	high STR_15
  1498  00034A  0100               	movlb	0	; () banked
  1499  00034C  6F81               	movwf	(printf@f+1)& (0+255),b
  1500  00034E  C048  F082         	movff	_num9V,?_printf+2
  1501  000352  0100               	movlb	0	; () banked
  1502  000354  6B83               	clrf	(?_printf+3)& (0+255),b
  1503  000356  EC8B  F002         	call	_printf	;wreg free
  1504                           
  1505                           ;main.c: 218: (INTCONbits.GIE = 1);
  1506  00035A  8EF2               	bsf	intcon,7,c	;volatile
  1507  00035C                     l2970:
  1508  00035C  0E06               	movlw	6
  1509  00035E  1856               	xorwf	_screenMode,w,c
  1510  000360  A4D8               	btfss	status,2,c
  1511  000362  D01D               	goto	l2980
  1512  000364  D7DF               	goto	l234
  1513  000366                     l237:
  1514                           
  1515                           ;main.c: 221: (INTCONbits.GIE = 0);
  1516  000366  9EF2               	bcf	intcon,7,c	;volatile
  1517                           
  1518                           ;main.c: 222: lcdInst(0b10000000);;
  1519  000368  0E80               	movlw	128
  1520  00036A  EC52  F007         	call	_lcdInst
  1521                           
  1522                           ;main.c: 223: printf("# OF AA         ");
  1523  00036E  0E22               	movlw	low STR_16
  1524  000370  0100               	movlb	0	; () banked
  1525  000372  6F80               	movwf	printf@f& (0+255),b
  1526  000374  0EFF               	movlw	high STR_16
  1527  000376  0100               	movlb	0	; () banked
  1528  000378  6F81               	movwf	(printf@f+1)& (0+255),b
  1529  00037A  EC8B  F002         	call	_printf	;wreg free
  1530                           
  1531                           ;main.c: 224: lcdInst(0b11000000);;
  1532  00037E  0EC0               	movlw	192
  1533  000380  EC52  F007         	call	_lcdInst
  1534                           
  1535                           ;main.c: 225: printf("BATTERIES: %02d     ", numAA);
  1536  000384  0EC7               	movlw	low STR_15
  1537  000386  0100               	movlb	0	; () banked
  1538  000388  6F80               	movwf	printf@f& (0+255),b
  1539  00038A  0EFE               	movlw	high STR_15
  1540  00038C  0100               	movlb	0	; () banked
  1541  00038E  6F81               	movwf	(printf@f+1)& (0+255),b
  1542  000390  C049  F082         	movff	_numAA,?_printf+2
  1543  000394  0100               	movlb	0	; () banked
  1544  000396  6B83               	clrf	(?_printf+3)& (0+255),b
  1545  000398  EC8B  F002         	call	_printf	;wreg free
  1546                           
  1547                           ;main.c: 226: (INTCONbits.GIE = 1);
  1548  00039C  8EF2               	bsf	intcon,7,c	;volatile
  1549  00039E                     l2980:
  1550  00039E  0E07               	movlw	7
  1551  0003A0  1856               	xorwf	_screenMode,w,c
  1552  0003A2  A4D8               	btfss	status,2,c
  1553  0003A4  D01D               	goto	l2990
  1554  0003A6  D7DF               	goto	l237
  1555  0003A8                     l240:
  1556                           
  1557                           ;main.c: 229: (INTCONbits.GIE = 0);
  1558  0003A8  9EF2               	bcf	intcon,7,c	;volatile
  1559                           
  1560                           ;main.c: 230: lcdInst(0b10000000);;
  1561  0003AA  0E80               	movlw	128
  1562  0003AC  EC52  F007         	call	_lcdInst
  1563                           
  1564                           ;main.c: 231: printf("# OF DRAINED    ");
  1565  0003B0  0E77               	movlw	low STR_18
  1566  0003B2  0100               	movlb	0	; () banked
  1567  0003B4  6F80               	movwf	printf@f& (0+255),b
  1568  0003B6  0EFF               	movlw	high STR_18
  1569  0003B8  0100               	movlb	0	; () banked
  1570  0003BA  6F81               	movwf	(printf@f+1)& (0+255),b
  1571  0003BC  EC8B  F002         	call	_printf	;wreg free
  1572                           
  1573                           ;main.c: 232: lcdInst(0b11000000);;
  1574  0003C0  0EC0               	movlw	192
  1575  0003C2  EC52  F007         	call	_lcdInst
  1576                           
  1577                           ;main.c: 233: printf("BATTERIES: %02d     ", numDrain);
  1578  0003C6  0EC7               	movlw	low STR_15
  1579  0003C8  0100               	movlb	0	; () banked
  1580  0003CA  6F80               	movwf	printf@f& (0+255),b
  1581  0003CC  0EFE               	movlw	high STR_15
  1582  0003CE  0100               	movlb	0	; () banked
  1583  0003D0  6F81               	movwf	(printf@f+1)& (0+255),b
  1584  0003D2  C04C  F082         	movff	_numDrain,?_printf+2
  1585  0003D6  0100               	movlb	0	; () banked
  1586  0003D8  6B83               	clrf	(?_printf+3)& (0+255),b
  1587  0003DA  EC8B  F002         	call	_printf	;wreg free
  1588                           
  1589                           ;main.c: 234: (INTCONbits.GIE = 1);
  1590  0003DE  8EF2               	bsf	intcon,7,c	;volatile
  1591  0003E0                     l2990:
  1592  0003E0  0E08               	movlw	8
  1593  0003E2  1856               	xorwf	_screenMode,w,c
  1594  0003E4  A4D8               	btfss	status,2,c
  1595  0003E6  D065               	goto	l3012
  1596  0003E8  D7DF               	goto	l240
  1597  0003EA                     l2992:
  1598                           
  1599                           ;main.c: 238: I2C_Master_Start();
  1600  0003EA  EC61  F007         	call	_I2C_Master_Start	;wreg free
  1601                           
  1602                           ;main.c: 239: I2C_Master_Write(0b11010000);
  1603  0003EE  0E00               	movlw	0
  1604  0003F0  6E2B               	movwf	I2C_Master_Write@d+1,c
  1605  0003F2  0ED0               	movlw	208
  1606  0003F4  6E2A               	movwf	I2C_Master_Write@d,c
  1607  0003F6  EC58  F007         	call	_I2C_Master_Write	;wreg free
  1608                           
  1609                           ;main.c: 240: I2C_Master_Write(0x00);
  1610  0003FA  0E00               	movlw	0
  1611  0003FC  6E2B               	movwf	I2C_Master_Write@d+1,c
  1612  0003FE  0E00               	movlw	0
  1613  000400  6E2A               	movwf	I2C_Master_Write@d,c
  1614  000402  EC58  F007         	call	_I2C_Master_Write	;wreg free
  1615                           
  1616                           ;main.c: 241: I2C_Master_Stop();
  1617  000406  EC5D  F007         	call	_I2C_Master_Stop	;wreg free
  1618                           
  1619                           ;main.c: 243: I2C_Master_Start();
  1620  00040A  EC61  F007         	call	_I2C_Master_Start	;wreg free
  1621                           
  1622                           ;main.c: 244: I2C_Master_Write(0b11010001);
  1623  00040E  0E00               	movlw	0
  1624  000410  6E2B               	movwf	I2C_Master_Write@d+1,c
  1625  000412  0ED1               	movlw	209
  1626  000414  6E2A               	movwf	I2C_Master_Write@d,c
  1627  000416  EC58  F007         	call	_I2C_Master_Write	;wreg free
  1628                           
  1629                           ;main.c: 245: for(unsigned char i=0;i<0x06;i++){
  1630  00041A  0E00               	movlw	0
  1631  00041C  0100               	movlb	0	; () banked
  1632  00041E  6F94               	movwf	main@i_548& (0+255),b
  1633  000420                     l2996:
  1634                           
  1635                           ; BSR set to: 0
  1636  000420  0E05               	movlw	5
  1637  000422  0100               	movlb	0	; () banked
  1638  000424  6594               	cpfsgt	main@i_548& (0+255),b
  1639  000426  D001               	goto	l3000
  1640  000428  D010               	goto	l3006
  1641  00042A                     l3000:
  1642                           
  1643                           ; BSR set to: 0
  1644                           ;main.c: 246: time[i] = I2C_Master_Read(1);
  1645  00042A  0100               	movlb	0	; () banked
  1646  00042C  5194               	movf	main@i_548& (0+255),w,b
  1647  00042E  0D01               	mullw	1
  1648  000430  0E39               	movlw	low _time
  1649  000432  24F3               	addwf	prodl,w,c
  1650  000434  6ED9               	movwf	fsr2l,c
  1651  000436  0E00               	movlw	high _time
  1652  000438  20F4               	addwfc	prodh,w,c
  1653  00043A  6EDA               	movwf	fsr2h,c
  1654  00043C  0E01               	movlw	1
  1655  00043E  EC21  F007         	call	_I2C_Master_Read
  1656  000442  6EDF               	movwf	indf2,c
  1657  000444  0100               	movlb	0	; () banked
  1658  000446  2B94               	incf	main@i_548& (0+255),f,b
  1659  000448  D7EB               	goto	l2996
  1660  00044A                     l3006:
  1661                           
  1662                           ; BSR set to: 0
  1663                           ;main.c: 247: }
  1664                           ;main.c: 248: time[6] = I2C_Master_Read(0);
  1665  00044A  0E00               	movlw	0
  1666  00044C  EC21  F007         	call	_I2C_Master_Read
  1667  000450  6E3F               	movwf	_time+6,c
  1668                           
  1669                           ;main.c: 249: I2C_Master_Stop();
  1670  000452  EC5D  F007         	call	_I2C_Master_Stop	;wreg free
  1671                           
  1672                           ;main.c: 250: lcdInst(0b10000000);;
  1673  000456  0E80               	movlw	128
  1674  000458  EC52  F007         	call	_lcdInst
  1675                           
  1676                           ;main.c: 251: printf("DATE: %02x/%02x/%02x  ", time[6],time[5],time[4]);
  1677  00045C  0E99               	movlw	low STR_20
  1678  00045E  0100               	movlb	0	; () banked
  1679  000460  6F80               	movwf	printf@f& (0+255),b
  1680  000462  0EFE               	movlw	high STR_20
  1681  000464  0100               	movlb	0	; () banked
  1682  000466  6F81               	movwf	(printf@f+1)& (0+255),b
  1683  000468  C03F  F082         	movff	_time+6,?_printf+2
  1684  00046C  0100               	movlb	0	; () banked
  1685  00046E  6B83               	clrf	(?_printf+3)& (0+255),b
  1686  000470  C03E  F084         	movff	_time+5,?_printf+4
  1687  000474  0100               	movlb	0	; () banked
  1688  000476  6B85               	clrf	(?_printf+5)& (0+255),b
  1689  000478  C03D  F086         	movff	_time+4,?_printf+6
  1690  00047C  0100               	movlb	0	; () banked
  1691  00047E  6B87               	clrf	(?_printf+7)& (0+255),b
  1692  000480  EC8B  F002         	call	_printf	;wreg free
  1693                           
  1694                           ;main.c: 252: lcdInst(0b11000000);;
  1695  000484  0EC0               	movlw	192
  1696  000486  EC52  F007         	call	_lcdInst
  1697                           
  1698                           ;main.c: 253: printf("TIME: %02x:%02x:%02x  ", time[2],time[1],time[0]);
  1699  00048A  0EB0               	movlw	low STR_21
  1700  00048C  0100               	movlb	0	; () banked
  1701  00048E  6F80               	movwf	printf@f& (0+255),b
  1702  000490  0EFE               	movlw	high STR_21
  1703  000492  0100               	movlb	0	; () banked
  1704  000494  6F81               	movwf	(printf@f+1)& (0+255),b
  1705  000496  C03B  F082         	movff	_time+2,?_printf+2
  1706  00049A  0100               	movlb	0	; () banked
  1707  00049C  6B83               	clrf	(?_printf+3)& (0+255),b
  1708  00049E  C03A  F084         	movff	_time+1,?_printf+4
  1709  0004A2  0100               	movlb	0	; () banked
  1710  0004A4  6B85               	clrf	(?_printf+5)& (0+255),b
  1711  0004A6  C039  F086         	movff	_time,?_printf+6
  1712  0004AA  0100               	movlb	0	; () banked
  1713  0004AC  6B87               	clrf	(?_printf+7)& (0+255),b
  1714  0004AE  EC8B  F002         	call	_printf	;wreg free
  1715  0004B2                     l3012:
  1716  0004B2  0E09               	movlw	9
  1717  0004B4  1856               	xorwf	_screenMode,w,c
  1718  0004B6  A4D8               	btfss	status,2,c
  1719  0004B8  D029               	goto	l3026
  1720  0004BA  D797               	goto	l2992
  1721  0004BC                     l248:
  1722                           
  1723                           ;main.c: 256: (INTCONbits.GIE = 0);
  1724  0004BC  9EF2               	bcf	intcon,7,c	;volatile
  1725                           
  1726                           ;main.c: 257: lcdInst(0b10000000);;
  1727  0004BE  0E80               	movlw	128
  1728  0004C0  EC52  F007         	call	_lcdInst
  1729                           
  1730                           ;main.c: 258: printf("EMERGENCY STOP  ");
  1731  0004C4  0E99               	movlw	low STR_22
  1732  0004C6  0100               	movlb	0	; () banked
  1733  0004C8  6F80               	movwf	printf@f& (0+255),b
  1734  0004CA  0EFF               	movlw	high STR_22
  1735  0004CC  0100               	movlb	0	; () banked
  1736  0004CE  6F81               	movwf	(printf@f+1)& (0+255),b
  1737  0004D0  EC8B  F002         	call	_printf	;wreg free
  1738                           
  1739                           ;main.c: 259: lcdInst(0b11000000);;
  1740  0004D4  0EC0               	movlw	192
  1741  0004D6  EC52  F007         	call	_lcdInst
  1742                           
  1743                           ;main.c: 260: printf("                ");
  1744  0004DA  0E00               	movlw	low STR_23
  1745  0004DC  0100               	movlb	0	; () banked
  1746  0004DE  6F80               	movwf	printf@f& (0+255),b
  1747  0004E0  0EFF               	movlw	high STR_23
  1748  0004E2  0100               	movlb	0	; () banked
  1749  0004E4  6F81               	movwf	(printf@f+1)& (0+255),b
  1750  0004E6  EC8B  F002         	call	_printf	;wreg free
  1751                           
  1752                           ;main.c: 261: _delay((unsigned long)((2000)*(10000000/4000.0)));
  1753  0004EA  0E1A               	movlw	26
  1754  0004EC  0100               	movlb	0	; () banked
  1755  0004EE  6F93               	movwf	(??_main+1)& (0+255),b
  1756  0004F0  0E5E               	movlw	94
  1757  0004F2  0100               	movlb	0	; () banked
  1758  0004F4  6F92               	movwf	??_main& (0+255),b
  1759  0004F6  0E6E               	movlw	110
  1760  0004F8                     u2667:
  1761  0004F8  2EE8               	decfsz	wreg,f,c
  1762  0004FA  D7FE               	bra	u2667
  1763  0004FC  2F92               	decfsz	??_main& (0+255),f,b
  1764  0004FE  D7FC               	bra	u2667
  1765  000500  2F93               	decfsz	(??_main+1)& (0+255),f,b
  1766  000502  D7FA               	bra	u2667
  1767  000504  F000               	nop	
  1768                           
  1769                           ;main.c: 262: screenMode = 2;
  1770  000506  0E02               	movlw	2
  1771  000508  6E56               	movwf	_screenMode,c
  1772                           
  1773                           ;main.c: 263: (INTCONbits.GIE = 1);
  1774  00050A  8EF2               	bsf	intcon,7,c	;volatile
  1775  00050C                     l3026:
  1776  00050C  0E0A               	movlw	10
  1777  00050E  1856               	xorwf	_screenMode,w,c
  1778  000510  A4D8               	btfss	status,2,c
  1779  000512  D65D               	goto	l2904
  1780  000514  D7D3               	goto	l248
  1781  000516                     __end_of_main:
  1782                           	opt stack 0
  1783                           tblptru	equ	0xFF8
  1784                           tblptrh	equ	0xFF7
  1785                           tblptrl	equ	0xFF6
  1786                           tablat	equ	0xFF5
  1787                           prodh	equ	0xFF4
  1788                           prodl	equ	0xFF3
  1789                           intcon	equ	0xFF2
  1790                           intcon3	equ	0xFF0
  1791                           postinc0	equ	0xFEE
  1792                           wreg	equ	0xFE8
  1793                           indf2	equ	0xFDF
  1794                           fsr2h	equ	0xFDA
  1795                           fsr2l	equ	0xFD9
  1796                           status	equ	0xFD8
  1797                           
  1798 ;; *************** function _printf *****************
  1799 ;; Defined at:
  1800 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  1801 ;; Parameters:    Size  Location     Type
  1802 ;;  f               2    0[BANK0 ] PTR const unsigned char 
  1803 ;;		 -> STR_23(17), STR_22(17), STR_21(23), STR_20(23), 
  1804 ;;		 -> STR_19(21), STR_18(17), STR_17(21), STR_16(17), 
  1805 ;;		 -> STR_15(21), STR_14(17), STR_13(19), STR_12(17), 
  1806 ;;		 -> STR_11(19), STR_10(17), STR_9(25), STR_8(17), 
  1807 ;;		 -> STR_7(17), STR_6(17), STR_5(17), STR_4(17), 
  1808 ;;		 -> STR_3(17), STR_2(17), STR_1(17), 
  1809 ;; Auto vars:     Size  Location     Type
  1810 ;;  idx             1    8[BANK0 ] unsigned char 
  1811 ;;  tmpval          4    0        struct .
  1812 ;;  cp              3    0        PTR const unsigned char 
  1813 ;;  width           2   15[BANK0 ] int 
  1814 ;;  val             2   12[BANK0 ] unsigned int 
  1815 ;;  ap              2    9[BANK0 ] PTR void [1]
  1816 ;;		 -> ?_printf(2), 
  1817 ;;  len             2    0        unsigned int 
  1818 ;;  c               1   17[BANK0 ] char 
  1819 ;;  flag            1   14[BANK0 ] unsigned char 
  1820 ;;  prec            1   11[BANK0 ] char 
  1821 ;; Return value:  Size  Location     Type
  1822 ;;                  2    0[BANK0 ] int 
  1823 ;; Registers used:
  1824 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1825 ;; Tracked objects:
  1826 ;;		On entry : 0/0
  1827 ;;		On exit  : 0/0
  1828 ;;		Unchanged: 0/0
  1829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1830 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1831 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1832 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1833 ;;      Totals:         4      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1834 ;;Total ram usage:       22 bytes
  1835 ;; Hardware stack levels used:    1
  1836 ;; Hardware stack levels required when called:    6
  1837 ;; This function calls:
  1838 ;;		___lwdiv
  1839 ;;		___lwmod
  1840 ;;		___wmul
  1841 ;;		_isdigit
  1842 ;;		_putch
  1843 ;; This function is called by:
  1844 ;;		_main
  1845 ;; This function uses a non-reentrant model
  1846 ;;
  1847                           
  1848                           	psect	text1
  1849  000516                     __ptext1:
  1850                           	opt stack 0
  1851  000516                     _printf:
  1852                           	opt stack 24
  1853                           
  1854                           ;doprnt.c: 466: va_list ap;
  1855                           ;doprnt.c: 499: signed char c;
  1856                           ;doprnt.c: 501: int width;
  1857                           ;doprnt.c: 506: signed char prec;
  1858                           ;doprnt.c: 508: unsigned char flag;
  1859                           ;doprnt.c: 523: union {
  1860                           ;doprnt.c: 524: unsigned long vd;
  1861                           ;doprnt.c: 525: double integ;
  1862                           ;doprnt.c: 526: } tmpval;
  1863                           ;doprnt.c: 528: unsigned int val;
  1864                           ;doprnt.c: 529: unsigned len;
  1865                           ;doprnt.c: 530: const char * cp;
  1866                           ;doprnt.c: 533: *ap = __va_start();
  1867                           
  1868                           ;incstack = 0
  1869  000516  0E82               	movlw	low (?_printf+2)
  1870  000518  0100               	movlb	0	; () banked
  1871  00051A  6F89               	movwf	printf@ap& (0+255),b
  1872  00051C  0E00               	movlw	high (?_printf+2)
  1873  00051E  0100               	movlb	0	; () banked
  1874  000520  6F8A               	movwf	(printf@ap+1)& (0+255),b
  1875                           
  1876                           ;doprnt.c: 536: while(c = *f++) {
  1877  000522  D1B2               	goto	l2836
  1878  000524                     l2710:
  1879                           
  1880                           ; BSR set to: 0
  1881                           ;doprnt.c: 538: if(c != '%')
  1882  000524  0E25               	movlw	37
  1883  000526  0100               	movlb	0	; () banked
  1884  000528  1991               	xorwf	printf@c& (0+255),w,b
  1885  00052A  B4D8               	btfsc	status,2,c
  1886  00052C  D005               	goto	l2714
  1887                           
  1888                           ; BSR set to: 0
  1889                           ;doprnt.c: 540: {
  1890                           ;doprnt.c: 541: (putch(c) );
  1891  00052E  0100               	movlb	0	; () banked
  1892  000530  5191               	movf	printf@c& (0+255),w,b
  1893  000532  EC4C  F007         	call	_putch
  1894                           
  1895                           ;doprnt.c: 542: continue;
  1896  000536  D1A8               	goto	l2836
  1897  000538                     l2714:
  1898                           
  1899                           ;doprnt.c: 543: }
  1900                           ;doprnt.c: 546: width = 0;
  1901  000538  0E00               	movlw	0
  1902  00053A  0100               	movlb	0	; () banked
  1903  00053C  6F90               	movwf	(printf@width+1)& (0+255),b
  1904  00053E  0E00               	movlw	0
  1905  000540  6F8F               	movwf	printf@width& (0+255),b
  1906                           
  1907                           ;doprnt.c: 548: flag = 0;
  1908  000542  0E00               	movlw	0
  1909  000544  0100               	movlb	0	; () banked
  1910  000546  6F8E               	movwf	printf@flag& (0+255),b
  1911                           
  1912                           ; BSR set to: 0
  1913                           ;doprnt.c: 551: switch(*f) {
  1914                           
  1915                           ;doprnt.c: 550: for(;;) {
  1916  000548  D005               	goto	l2720
  1917  00054A                     l2716:
  1918                           
  1919                           ;doprnt.c: 580: flag |= 0x04;
  1920  00054A  0100               	movlb	0	; () banked
  1921  00054C  858E               	bsf	printf@flag& (0+255),2,b
  1922                           
  1923                           ;doprnt.c: 581: f++;
  1924  00054E  0100               	movlb	0	; () banked
  1925  000550  4B80               	infsnz	printf@f& (0+255),f,b
  1926  000552  2B81               	incf	(printf@f+1)& (0+255),f,b
  1927  000554                     l2720:
  1928  000554  C080  FFF6         	movff	printf@f,tblptrl
  1929  000558  C081  FFF7         	movff	printf@f+1,tblptrh
  1930  00055C                     	if	0	;tblptru may be non-zero
  1931  00055C                     	endif
  1932  00055C                     	if	0	;tblptru may be non-zero
  1933  00055C                     	endif
  1934  00055C  0008               	tblrd		*
  1935  00055E  50F5               	movf	tablat,w,c
  1936                           
  1937                           ; Switch size 1, requested type "space"
  1938                           ; Number of cases is 1, Range of values is 48 to 48
  1939                           ; switch strategies available:
  1940                           ; Name         Instructions Cycles
  1941                           ; simple_byte            4     3 (average)
  1942                           ;	Chosen strategy is simple_byte
  1943  000560  0A30               	xorlw	48	; case 48
  1944  000562  B4D8               	btfsc	status,2,c
  1945  000564  D7F2               	goto	l2716
  1946                           
  1947                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1948                           
  1949                           ;doprnt.c: 586: }
  1950                           
  1951                           ;doprnt.c: 585: break;
  1952  000566  C080  FFF6         	movff	printf@f,tblptrl
  1953  00056A  C081  FFF7         	movff	printf@f+1,tblptrh
  1954  00056E                     	if	0	;tblptru may be non-zero
  1955  00056E                     	endif
  1956  00056E                     	if	0	;tblptru may be non-zero
  1957  00056E                     	endif
  1958  00056E  0008               	tblrd		*
  1959  000570  50F5               	movf	tablat,w,c
  1960  000572  EC34  F007         	call	_isdigit
  1961  000576  A0D8               	btfss	status,0,c
  1962  000578  D03A               	goto	l2738
  1963                           
  1964                           ;doprnt.c: 598: width = 0;
  1965  00057A  0E00               	movlw	0
  1966  00057C  0100               	movlb	0	; () banked
  1967  00057E  6F90               	movwf	(printf@width+1)& (0+255),b
  1968  000580  0E00               	movlw	0
  1969  000582  6F8F               	movwf	printf@width& (0+255),b
  1970  000584                     l2726:
  1971                           
  1972                           ;doprnt.c: 600: width *= 10;
  1973  000584  C08F  F029         	movff	printf@width,___wmul@multiplier
  1974  000588  C090  F02A         	movff	printf@width+1,___wmul@multiplier+1
  1975  00058C  0E00               	movlw	0
  1976  00058E  6E2C               	movwf	___wmul@multiplicand+1,c
  1977  000590  0E0A               	movlw	10
  1978  000592  6E2B               	movwf	___wmul@multiplicand,c
  1979  000594  EC0E  F007         	call	___wmul	;wreg free
  1980  000598  C029  F08F         	movff	?___wmul,printf@width
  1981  00059C  C02A  F090         	movff	?___wmul+1,printf@width+1
  1982                           
  1983                           ;doprnt.c: 601: width += *f++ - '0';
  1984  0005A0  0ED0               	movlw	208
  1985  0005A2  6E35               	movwf	??_printf& (0+255),c
  1986  0005A4  0EFF               	movlw	255
  1987  0005A6  6E36               	movwf	(??_printf+1)& (0+255),c
  1988  0005A8  C080  FFF6         	movff	printf@f,tblptrl
  1989  0005AC  C081  FFF7         	movff	printf@f+1,tblptrh
  1990  0005B0                     	if	0	;tblptru may be non-zero
  1991  0005B0                     	endif
  1992  0005B0                     	if	0	;tblptru may be non-zero
  1993  0005B0                     	endif
  1994  0005B0  0008               	tblrd		*
  1995  0005B2  50F5               	movf	tablat,w,c
  1996  0005B4  6E37               	movwf	(??_printf+2)& (0+255),c
  1997  0005B6  6A38               	clrf	(??_printf+3)& (0+255),c
  1998  0005B8  5035               	movf	??_printf,w,c
  1999  0005BA  2637               	addwf	??_printf+2,f,c
  2000  0005BC  5036               	movf	??_printf+1,w,c
  2001  0005BE  2238               	addwfc	??_printf+3,f,c
  2002  0005C0  5037               	movf	??_printf+2,w,c
  2003  0005C2  0100               	movlb	0	; () banked
  2004  0005C4  278F               	addwf	printf@width& (0+255),f,b
  2005  0005C6  5038               	movf	??_printf+3,w,c
  2006  0005C8  0100               	movlb	0	; () banked
  2007  0005CA  2390               	addwfc	(printf@width+1)& (0+255),f,b
  2008                           
  2009                           ; BSR set to: 0
  2010  0005CC  0100               	movlb	0	; () banked
  2011  0005CE  4B80               	infsnz	printf@f& (0+255),f,b
  2012  0005D0  2B81               	incf	(printf@f+1)& (0+255),f,b
  2013                           
  2014                           ; BSR set to: 0
  2015                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2016  0005D2  C080  FFF6         	movff	printf@f,tblptrl
  2017  0005D6  C081  FFF7         	movff	printf@f+1,tblptrh
  2018  0005DA                     	if	0	;tblptru may be non-zero
  2019  0005DA                     	endif
  2020  0005DA                     	if	0	;tblptru may be non-zero
  2021  0005DA                     	endif
  2022  0005DA  0008               	tblrd		*
  2023  0005DC  50F5               	movf	tablat,w,c
  2024  0005DE  EC34  F007         	call	_isdigit
  2025  0005E2  A0D8               	btfss	status,0,c
  2026  0005E4  D004               	goto	l2738
  2027  0005E6  D7CE               	goto	l2726
  2028  0005E8                     l2734:
  2029                           
  2030                           ;doprnt.c: 721: flag |= 0x80;
  2031  0005E8  0100               	movlb	0	; () banked
  2032  0005EA  8F8E               	bsf	printf@flag& (0+255),7,b
  2033                           
  2034                           ;doprnt.c: 723: break;
  2035  0005EC  D019               	goto	l384
  2036  0005EE                     l2738:
  2037  0005EE  C080  FFF6         	movff	printf@f,tblptrl
  2038  0005F2  C081  FFF7         	movff	printf@f+1,tblptrh
  2039  0005F6  0100               	movlb	0	; () banked
  2040  0005F8  4B80               	infsnz	printf@f& (0+255),f,b
  2041  0005FA  2B81               	incf	(printf@f+1)& (0+255),f,b
  2042  0005FC                     	if	0	;tblptru may be non-zero
  2043  0005FC                     	endif
  2044  0005FC                     	if	0	;tblptru may be non-zero
  2045  0005FC                     	endif
  2046  0005FC  0008               	tblrd		*
  2047  0005FE  CFF5 F091          	movff	tablat,printf@c
  2048  000602  0100               	movlb	0	; () banked
  2049  000604  5191               	movf	printf@c& (0+255),w,b
  2050                           
  2051                           ; Switch size 1, requested type "space"
  2052                           ; Number of cases is 4, Range of values is 0 to 120
  2053                           ; switch strategies available:
  2054                           ; Name         Instructions Cycles
  2055                           ; simple_byte           13     7 (average)
  2056                           ;	Chosen strategy is simple_byte
  2057  000606  0A00               	xorlw	0	; case 0
  2058  000608  B4D8               	btfsc	status,2,c
  2059  00060A  0012               	return	
  2060  00060C  0A64               	xorlw	100	; case 100
  2061  00060E  B4D8               	btfsc	status,2,c
  2062  000610  D007               	goto	l384
  2063  000612  0A0D               	xorlw	13	; case 105
  2064  000614  B4D8               	btfsc	status,2,c
  2065  000616  D004               	goto	l384
  2066  000618  0A11               	xorlw	17	; case 120
  2067  00061A  B4D8               	btfsc	status,2,c
  2068  00061C  D7E5               	goto	l2734
  2069  00061E  D134               	goto	l2836
  2070  000620                     l384:
  2071                           
  2072                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  2073  000620  0100               	movlb	0	; () banked
  2074  000622  BF8E               	btfsc	printf@flag& (0+255),7,b
  2075  000624  D019               	goto	l2750
  2076                           
  2077                           ; BSR set to: 0
  2078                           ;doprnt.c: 1253: {
  2079                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2080  000626  C089  FFD9         	movff	printf@ap,fsr2l
  2081  00062A  C08A  FFDA         	movff	printf@ap+1,fsr2h
  2082  00062E  CFDE F08C          	movff	postinc2,printf@val
  2083  000632  CFDD F08D          	movff	postdec2,printf@val+1
  2084                           
  2085                           ; BSR set to: 0
  2086  000636  0E02               	movlw	2
  2087  000638  0100               	movlb	0	; () banked
  2088  00063A  2789               	addwf	printf@ap& (0+255),f,b
  2089  00063C  0E00               	movlw	0
  2090  00063E  238A               	addwfc	(printf@ap+1)& (0+255),f,b
  2091                           
  2092                           ; BSR set to: 0
  2093                           ;doprnt.c: 1261: if((int)val < 0) {
  2094  000640  0100               	movlb	0	; () banked
  2095  000642  AF8D               	btfss	(printf@val+1)& (0+255),7,b
  2096  000644  D053               	goto	l2784
  2097                           
  2098                           ; BSR set to: 0
  2099                           ;doprnt.c: 1262: flag |= 0x03;
  2100  000646  0E03               	movlw	3
  2101  000648  0100               	movlb	0	; () banked
  2102  00064A  138E               	iorwf	printf@flag& (0+255),f,b
  2103                           
  2104                           ; BSR set to: 0
  2105                           ;doprnt.c: 1263: val = -val;
  2106  00064C  0100               	movlb	0	; () banked
  2107  00064E  6D8C               	negf	printf@val& (0+255),b
  2108  000650  1F8D               	comf	(printf@val+1)& (0+255),f,b
  2109  000652  B0D8               	btfsc	status,0,c
  2110  000654  2B8D               	incf	(printf@val+1)& (0+255),f,b
  2111                           
  2112                           ; BSR set to: 0
  2113                           ;doprnt.c: 1264: }
  2114                           ;doprnt.c: 1266: }
  2115  000656  D04A               	goto	l2784
  2116  000658                     l2750:
  2117                           
  2118                           ; BSR set to: 0
  2119                           ;doprnt.c: 1268: else
  2120                           ;doprnt.c: 1273: {
  2121                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2122  000658  C089  FFD9         	movff	printf@ap,fsr2l
  2123  00065C  C08A  FFDA         	movff	printf@ap+1,fsr2h
  2124  000660  CFDE F08C          	movff	postinc2,printf@val
  2125  000664  CFDD F08D          	movff	postdec2,printf@val+1
  2126                           
  2127                           ; BSR set to: 0
  2128  000668  0E02               	movlw	2
  2129  00066A  0100               	movlb	0	; () banked
  2130  00066C  2789               	addwf	printf@ap& (0+255),f,b
  2131  00066E  0E00               	movlw	0
  2132  000670  238A               	addwfc	(printf@ap+1)& (0+255),f,b
  2133                           
  2134                           ; BSR set to: 0
  2135                           ;doprnt.c: 1287: }
  2136                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  2137  000672  D03C               	goto	l2784
  2138  000674                     l2754:
  2139                           
  2140                           ; BSR set to: 0
  2141                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2142  000674  0E01               	movlw	1
  2143  000676  0100               	movlb	0	; () banked
  2144  000678  6F91               	movwf	printf@c& (0+255),b
  2145  00067A                     l2756:
  2146                           
  2147                           ; BSR set to: 0
  2148  00067A  0E05               	movlw	5
  2149  00067C  0100               	movlb	0	; () banked
  2150  00067E  1991               	xorwf	printf@c& (0+255),w,b
  2151  000680  B4D8               	btfsc	status,2,c
  2152  000682  D03D               	goto	l2786
  2153                           
  2154                           ; BSR set to: 0
  2155                           ;doprnt.c: 1306: if(val < dpowers[c])
  2156                           
  2157                           ; BSR set to: 0
  2158                           
  2159                           ; BSR set to: 0
  2160  000684  0100               	movlb	0	; () banked
  2161  000686  5191               	movf	printf@c& (0+255),w,b
  2162  000688  0D02               	mullw	2
  2163  00068A  0E6E               	movlw	low _dpowers
  2164  00068C  24F3               	addwf	prodl,w,c
  2165  00068E  6EF6               	movwf	tblptrl,c
  2166  000690  0EFE               	movlw	high _dpowers
  2167  000692  20F4               	addwfc	prodh,w,c
  2168  000694  6EF7               	movwf	tblptrh,c
  2169  000696                     	if	0	;There are less than 3 active tblptr bytes
  2170  000696                     	endif
  2171  000696  0009               	tblrd		*+
  2172  000698  50F5               	movf	tablat,w,c
  2173  00069A  0100               	movlb	0	; () banked
  2174  00069C  5D8C               	subwf	printf@val& (0+255),w,b
  2175  00069E  0009               	tblrd		*+
  2176  0006A0  50F5               	movf	tablat,w,c
  2177  0006A2  0100               	movlb	0	; () banked
  2178  0006A4  598D               	subwfb	(printf@val+1)& (0+255),w,b
  2179  0006A6  A0D8               	btfss	status,0,c
  2180  0006A8  D02A               	goto	l2786
  2181                           
  2182                           ; BSR set to: 0
  2183                           
  2184                           ; BSR set to: 0
  2185                           
  2186                           ; BSR set to: 0
  2187                           ;doprnt.c: 1307: break;
  2188  0006AA  0100               	movlb	0	; () banked
  2189  0006AC  2B91               	incf	printf@c& (0+255),f,b
  2190  0006AE  D7E5               	goto	l2756
  2191  0006B0                     l2768:
  2192                           
  2193                           ; BSR set to: 0
  2194                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2195  0006B0  0E01               	movlw	1
  2196  0006B2  0100               	movlb	0	; () banked
  2197  0006B4  6F91               	movwf	printf@c& (0+255),b
  2198  0006B6                     l2770:
  2199                           
  2200                           ; BSR set to: 0
  2201  0006B6  0E04               	movlw	4
  2202  0006B8  0100               	movlb	0	; () banked
  2203  0006BA  1991               	xorwf	printf@c& (0+255),w,b
  2204  0006BC  B4D8               	btfsc	status,2,c
  2205  0006BE  D01F               	goto	l2786
  2206                           
  2207                           ; BSR set to: 0
  2208                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2209                           
  2210                           ; BSR set to: 0
  2211                           
  2212                           ; BSR set to: 0
  2213  0006C0  0100               	movlb	0	; () banked
  2214  0006C2  5191               	movf	printf@c& (0+255),w,b
  2215  0006C4  0D02               	mullw	2
  2216  0006C6  0E78               	movlw	low _hexpowers
  2217  0006C8  24F3               	addwf	prodl,w,c
  2218  0006CA  6EF6               	movwf	tblptrl,c
  2219  0006CC  0EFE               	movlw	high _hexpowers
  2220  0006CE  20F4               	addwfc	prodh,w,c
  2221  0006D0  6EF7               	movwf	tblptrh,c
  2222  0006D2                     	if	0	;There are less than 3 active tblptr bytes
  2223  0006D2                     	endif
  2224  0006D2  0009               	tblrd		*+
  2225  0006D4  50F5               	movf	tablat,w,c
  2226  0006D6  0100               	movlb	0	; () banked
  2227  0006D8  5D8C               	subwf	printf@val& (0+255),w,b
  2228  0006DA  0009               	tblrd		*+
  2229  0006DC  50F5               	movf	tablat,w,c
  2230  0006DE  0100               	movlb	0	; () banked
  2231  0006E0  598D               	subwfb	(printf@val+1)& (0+255),w,b
  2232  0006E2  A0D8               	btfss	status,0,c
  2233  0006E4  D00C               	goto	l2786
  2234                           
  2235                           ; BSR set to: 0
  2236                           
  2237                           ; BSR set to: 0
  2238                           
  2239                           ; BSR set to: 0
  2240                           ;doprnt.c: 1318: break;
  2241  0006E6  0100               	movlb	0	; () banked
  2242  0006E8  2B91               	incf	printf@c& (0+255),f,b
  2243  0006EA  D7E5               	goto	l2770
  2244  0006EC                     l2784:
  2245                           
  2246                           ; BSR set to: 0
  2247  0006EC  0100               	movlb	0	; () banked
  2248  0006EE  518E               	movf	printf@flag& (0+255),w,b
  2249  0006F0  0B80               	andlw	128
  2250                           
  2251                           ; Switch size 1, requested type "space"
  2252                           ; Number of cases is 2, Range of values is 0 to 128
  2253                           ; switch strategies available:
  2254                           ; Name         Instructions Cycles
  2255                           ; simple_byte            7     4 (average)
  2256                           ;	Chosen strategy is simple_byte
  2257  0006F2  0A00               	xorlw	0	; case 0
  2258  0006F4  B4D8               	btfsc	status,2,c
  2259  0006F6  D7BE               	goto	l2754
  2260  0006F8  0A80               	xorlw	128	; case 128
  2261  0006FA  B4D8               	btfsc	status,2,c
  2262  0006FC  D7D9               	goto	l2768
  2263  0006FE                     l2786:
  2264                           
  2265                           ; BSR set to: 0
  2266                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2267  0006FE  0100               	movlb	0	; () banked
  2268  000700  518F               	movf	printf@width& (0+255),w,b
  2269  000702  0100               	movlb	0	; () banked
  2270  000704  1190               	iorwf	(printf@width+1)& (0+255),w,b
  2271  000706  B4D8               	btfsc	status,2,c
  2272  000708  D00A               	goto	l2792
  2273                           
  2274                           ; BSR set to: 0
  2275  00070A  C08E  F035         	movff	printf@flag,??_printf
  2276  00070E  0E03               	movlw	3
  2277  000710  1635               	andwf	??_printf,f,c
  2278  000712  B4D8               	btfsc	status,2,c
  2279  000714  D004               	goto	l2792
  2280                           
  2281                           ; BSR set to: 0
  2282                           ;doprnt.c: 1346: width--;
  2283  000716  0100               	movlb	0	; () banked
  2284  000718  078F               	decf	printf@width& (0+255),f,b
  2285  00071A  A0D8               	btfss	status,0,c
  2286  00071C  0790               	decf	(printf@width+1)& (0+255),f,b
  2287  00071E                     l2792:
  2288                           
  2289                           ; BSR set to: 0
  2290                           ;doprnt.c: 1381: if(width > c)
  2291  00071E  0E80               	movlw	128
  2292  000720  0100               	movlb	0	; () banked
  2293  000722  BF91               	btfsc	printf@c& (0+255),7,b
  2294  000724  0E7F               	movlw	127
  2295  000726  6E35               	movwf	??_printf& (0+255),c
  2296  000728  0100               	movlb	0	; () banked
  2297  00072A  518F               	movf	printf@width& (0+255),w,b
  2298  00072C  0100               	movlb	0	; () banked
  2299  00072E  5D91               	subwf	printf@c& (0+255),w,b
  2300  000730  0100               	movlb	0	; () banked
  2301  000732  5190               	movf	(printf@width+1)& (0+255),w,b
  2302  000734  0A80               	xorlw	128
  2303  000736  5835               	subwfb	??_printf& (0+255),w,c
  2304  000738  B0D8               	btfsc	status,0,c
  2305  00073A  D00B               	goto	l2796
  2306                           
  2307                           ; BSR set to: 0
  2308                           ;doprnt.c: 1382: width -= c;
  2309  00073C  0100               	movlb	0	; () banked
  2310  00073E  5191               	movf	printf@c& (0+255),w,b
  2311  000740  0100               	movlb	0	; () banked
  2312  000742  5F8F               	subwf	printf@width& (0+255),f,b
  2313  000744  0E00               	movlw	0
  2314  000746  0100               	movlb	0	; () banked
  2315  000748  BF91               	btfsc	printf@c& (0+255),7,b
  2316  00074A  0EFF               	movlw	255
  2317  00074C  0100               	movlb	0	; () banked
  2318  00074E  5B90               	subwfb	(printf@width+1)& (0+255),f,b
  2319  000750  D005               	goto	l2798
  2320  000752                     l2796:
  2321                           
  2322                           ; BSR set to: 0
  2323                           ;doprnt.c: 1383: else
  2324                           ;doprnt.c: 1384: width = 0;
  2325  000752  0E00               	movlw	0
  2326  000754  0100               	movlb	0	; () banked
  2327  000756  6F90               	movwf	(printf@width+1)& (0+255),b
  2328  000758  0E00               	movlw	0
  2329  00075A  6F8F               	movwf	printf@width& (0+255),b
  2330  00075C                     l2798:
  2331                           
  2332                           ; BSR set to: 0
  2333                           ;doprnt.c: 1387: if(flag & 0x04) {
  2334  00075C  0100               	movlb	0	; () banked
  2335  00075E  A58E               	btfss	printf@flag& (0+255),2,b
  2336  000760  D017               	goto	l2810
  2337                           
  2338                           ; BSR set to: 0
  2339                           ;doprnt.c: 1392: if(flag & 0x03)
  2340  000762  C08E  F035         	movff	printf@flag,??_printf
  2341  000766  0E03               	movlw	3
  2342  000768  1635               	andwf	??_printf,f,c
  2343  00076A  B4D8               	btfsc	status,2,c
  2344  00076C  D003               	goto	l2804
  2345                           
  2346                           ; BSR set to: 0
  2347                           ;doprnt.c: 1393: (putch('-') );
  2348  00076E  0E2D               	movlw	45
  2349  000770  EC4C  F007         	call	_putch
  2350  000774                     l2804:
  2351                           
  2352                           ;doprnt.c: 1415: if(width)
  2353  000774  0100               	movlb	0	; () banked
  2354  000776  518F               	movf	printf@width& (0+255),w,b
  2355  000778  0100               	movlb	0	; () banked
  2356  00077A  1190               	iorwf	(printf@width+1)& (0+255),w,b
  2357  00077C  B4D8               	btfsc	status,2,c
  2358  00077E  D024               	goto	l2820
  2359                           
  2360                           ; BSR set to: 0
  2361                           ;doprnt.c: 1417: (putch('0') );
  2362                           
  2363                           ; BSR set to: 0
  2364                           
  2365                           ;doprnt.c: 1416: do
  2366  000780  0E30               	movlw	48
  2367  000782  EC4C  F007         	call	_putch
  2368                           
  2369                           ;doprnt.c: 1418: while(--width);
  2370  000786  0100               	movlb	0	; () banked
  2371  000788  078F               	decf	printf@width& (0+255),f,b
  2372  00078A  A0D8               	btfss	status,0,c
  2373  00078C  0790               	decf	(printf@width+1)& (0+255),f,b
  2374  00078E  D7F2               	goto	l2804
  2375  000790                     l2810:
  2376                           
  2377                           ; BSR set to: 0
  2378                           ;doprnt.c: 1422: {
  2379                           ;doprnt.c: 1424: if(width
  2380                           ;doprnt.c: 1428: )
  2381  000790  0100               	movlb	0	; () banked
  2382  000792  518F               	movf	printf@width& (0+255),w,b
  2383  000794  0100               	movlb	0	; () banked
  2384  000796  1190               	iorwf	(printf@width+1)& (0+255),w,b
  2385  000798  B4D8               	btfsc	status,2,c
  2386  00079A  D00D               	goto	l2816
  2387  00079C                     l2812:
  2388                           
  2389                           ; BSR set to: 0
  2390                           ;doprnt.c: 1430: (putch(' ') );
  2391  00079C  0E20               	movlw	32
  2392  00079E  EC4C  F007         	call	_putch
  2393                           
  2394                           ;doprnt.c: 1431: while(--width);
  2395  0007A2  0100               	movlb	0	; () banked
  2396  0007A4  078F               	decf	printf@width& (0+255),f,b
  2397  0007A6  A0D8               	btfss	status,0,c
  2398  0007A8  0790               	decf	(printf@width+1)& (0+255),f,b
  2399  0007AA  0100               	movlb	0	; () banked
  2400  0007AC  518F               	movf	printf@width& (0+255),w,b
  2401  0007AE  0100               	movlb	0	; () banked
  2402  0007B0  1190               	iorwf	(printf@width+1)& (0+255),w,b
  2403  0007B2  A4D8               	btfss	status,2,c
  2404  0007B4  D7F3               	goto	l2812
  2405  0007B6                     l2816:
  2406                           
  2407                           ; BSR set to: 0
  2408                           ;doprnt.c: 1438: if(flag & 0x03)
  2409  0007B6  C08E  F035         	movff	printf@flag,??_printf
  2410  0007BA  0E03               	movlw	3
  2411  0007BC  1635               	andwf	??_printf,f,c
  2412  0007BE  B4D8               	btfsc	status,2,c
  2413  0007C0  D003               	goto	l2820
  2414                           
  2415                           ; BSR set to: 0
  2416                           ;doprnt.c: 1439: (putch('-') );
  2417  0007C2  0E2D               	movlw	45
  2418  0007C4  EC4C  F007         	call	_putch
  2419  0007C8                     l2820:
  2420                           
  2421                           ;doprnt.c: 1469: }
  2422                           ;doprnt.c: 1472: prec = c;
  2423  0007C8  C091  F08B         	movff	printf@c,printf@prec
  2424                           
  2425                           ;doprnt.c: 1474: while(prec--) {
  2426  0007CC  D057               	goto	l2834
  2427  0007CE                     l2822:
  2428                           
  2429                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2430  0007CE  0100               	movlb	0	; () banked
  2431  0007D0  518B               	movf	printf@prec& (0+255),w,b
  2432  0007D2  0D02               	mullw	2
  2433  0007D4  0E6E               	movlw	low _dpowers
  2434  0007D6  24F3               	addwf	prodl,w,c
  2435  0007D8  6EF6               	movwf	tblptrl,c
  2436  0007DA  0EFE               	movlw	high _dpowers
  2437  0007DC  20F4               	addwfc	prodh,w,c
  2438  0007DE  6EF7               	movwf	tblptrh,c
  2439  0007E0                     	if	0	;There are less than 3 active tblptr bytes
  2440  0007E0                     	endif
  2441  0007E0  0009               	tblrd		*+
  2442  0007E2  CFF5 F02B          	movff	tablat,___lwdiv@divisor
  2443  0007E6  000A               	tblrd		*-
  2444  0007E8  CFF5 F02C          	movff	tablat,___lwdiv@divisor+1
  2445  0007EC  C08C  F029         	movff	printf@val,___lwdiv@dividend
  2446  0007F0  C08D  F02A         	movff	printf@val+1,___lwdiv@dividend+1
  2447  0007F4  EC46  F006         	call	___lwdiv	;wreg free
  2448  0007F8  C029  F030         	movff	?___lwdiv,___lwmod@dividend
  2449  0007FC  C02A  F031         	movff	?___lwdiv+1,___lwmod@dividend+1
  2450  000800  0E00               	movlw	0
  2451  000802  6E33               	movwf	___lwmod@divisor+1,c
  2452  000804  0E0A               	movlw	10
  2453  000806  6E32               	movwf	___lwmod@divisor,c
  2454  000808  ECB9  F006         	call	___lwmod	;wreg free
  2455  00080C  5030               	movf	?___lwmod,w,c
  2456  00080E  0F30               	addlw	48
  2457  000810  0100               	movlb	0	; () banked
  2458  000812  6F91               	movwf	printf@c& (0+255),b
  2459                           
  2460                           ;doprnt.c: 1491: break;
  2461  000814  D02F               	goto	l2832
  2462  000816                     l2824:
  2463                           
  2464                           ; BSR set to: 0
  2465                           ;doprnt.c: 1499: {
  2466                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  2467  000816  C08C  F029         	movff	printf@val,___lwdiv@dividend
  2468  00081A  C08D  F02A         	movff	printf@val+1,___lwdiv@dividend+1
  2469  00081E  0100               	movlb	0	; () banked
  2470  000820  518B               	movf	printf@prec& (0+255),w,b
  2471  000822  0D02               	mullw	2
  2472  000824  0E78               	movlw	low _hexpowers
  2473  000826  24F3               	addwf	prodl,w,c
  2474  000828  6EF6               	movwf	tblptrl,c
  2475  00082A  0EFE               	movlw	high _hexpowers
  2476  00082C  20F4               	addwfc	prodh,w,c
  2477  00082E  6EF7               	movwf	tblptrh,c
  2478  000830                     	if	0	;There are less than 3 active tblptr bytes
  2479  000830                     	endif
  2480  000830  0009               	tblrd		*+
  2481  000832  CFF5 F02B          	movff	tablat,___lwdiv@divisor
  2482  000836  000A               	tblrd		*-
  2483  000838  CFF5 F02C          	movff	tablat,___lwdiv@divisor+1
  2484  00083C  EC46  F006         	call	___lwdiv	;wreg free
  2485  000840  5029               	movf	?___lwdiv,w,c
  2486  000842  0B0F               	andlw	15
  2487  000844  0100               	movlb	0	; () banked
  2488  000846  6F88               	movwf	printf@idx& (0+255),b
  2489                           
  2490                           ; BSR set to: 0
  2491                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  2492  000848  0100               	movlb	0	; () banked
  2493  00084A  5188               	movf	printf@idx& (0+255),w,b
  2494  00084C  0D01               	mullw	1
  2495  00084E  0EEF               	movlw	low STR_24
  2496  000850  24F3               	addwf	prodl,w,c
  2497  000852  6EF6               	movwf	tblptrl,c
  2498  000854  0EFE               	movlw	high STR_24
  2499  000856  20F4               	addwfc	prodh,w,c
  2500  000858  6EF7               	movwf	tblptrh,c
  2501  00085A                     	if	0	;There are less than 3 active tblptr bytes
  2502  00085A                     	endif
  2503  00085A  0008               	tblrd		*
  2504  00085C  CFF5 F091          	movff	tablat,printf@c
  2505                           
  2506                           ; BSR set to: 0
  2507                           ;doprnt.c: 1523: }
  2508                           
  2509                           ;doprnt.c: 1508: }
  2510                           ;doprnt.c: 1510: break;
  2511  000860  D009               	goto	l2832
  2512  000862                     l2830:
  2513  000862  0100               	movlb	0	; () banked
  2514  000864  518E               	movf	printf@flag& (0+255),w,b
  2515  000866  0B80               	andlw	128
  2516                           
  2517                           ; Switch size 1, requested type "space"
  2518                           ; Number of cases is 2, Range of values is 0 to 128
  2519                           ; switch strategies available:
  2520                           ; Name         Instructions Cycles
  2521                           ; simple_byte            7     4 (average)
  2522                           ;	Chosen strategy is simple_byte
  2523  000868  0A00               	xorlw	0	; case 0
  2524  00086A  B4D8               	btfsc	status,2,c
  2525  00086C  D7B0               	goto	l2822
  2526  00086E  0A80               	xorlw	128	; case 128
  2527  000870  B4D8               	btfsc	status,2,c
  2528  000872  D7D1               	goto	l2824
  2529  000874                     l2832:
  2530                           
  2531                           ; BSR set to: 0
  2532                           ;doprnt.c: 1524: (putch(c) );
  2533  000874  0100               	movlb	0	; () banked
  2534  000876  5191               	movf	printf@c& (0+255),w,b
  2535  000878  EC4C  F007         	call	_putch
  2536  00087C                     l2834:
  2537  00087C  0100               	movlb	0	; () banked
  2538  00087E  078B               	decf	printf@prec& (0+255),f,b
  2539  000880  0100               	movlb	0	; () banked
  2540  000882  298B               	incf	printf@prec& (0+255),w,b
  2541  000884  A4D8               	btfss	status,2,c
  2542  000886  D7ED               	goto	l2830
  2543  000888                     l2836:
  2544  000888  C080  FFF6         	movff	printf@f,tblptrl
  2545  00088C  C081  FFF7         	movff	printf@f+1,tblptrh
  2546  000890  0100               	movlb	0	; () banked
  2547  000892  4B80               	infsnz	printf@f& (0+255),f,b
  2548  000894  2B81               	incf	(printf@f+1)& (0+255),f,b
  2549  000896                     	if	0	;tblptru may be non-zero
  2550  000896                     	endif
  2551  000896                     	if	0	;tblptru may be non-zero
  2552  000896                     	endif
  2553  000896  0008               	tblrd		*
  2554  000898  CFF5 F091          	movff	tablat,printf@c
  2555  00089C  0100               	movlb	0	; () banked
  2556  00089E  5191               	movf	printf@c& (0+255),w,b
  2557  0008A0  B4D8               	btfsc	status,2,c
  2558  0008A2  0012               	return	
  2559  0008A4  D63F               	goto	l2710
  2560  0008A6                     __end_of_printf:
  2561                           	opt stack 0
  2562                           tblptru	equ	0xFF8
  2563                           tblptrh	equ	0xFF7
  2564                           tblptrl	equ	0xFF6
  2565                           tablat	equ	0xFF5
  2566                           prodh	equ	0xFF4
  2567                           prodl	equ	0xFF3
  2568                           intcon	equ	0xFF2
  2569                           intcon3	equ	0xFF0
  2570                           postinc0	equ	0xFEE
  2571                           wreg	equ	0xFE8
  2572                           indf2	equ	0xFDF
  2573                           postinc2	equ	0xFDE
  2574                           postdec2	equ	0xFDD
  2575                           fsr2h	equ	0xFDA
  2576                           fsr2l	equ	0xFD9
  2577                           status	equ	0xFD8
  2578                           
  2579 ;; *************** function _putch *****************
  2580 ;; Defined at:
  2581 ;;		line 30 in file "../lcd.c"
  2582 ;; Parameters:    Size  Location     Type
  2583 ;;  data            1    wreg     unsigned char 
  2584 ;; Auto vars:     Size  Location     Type
  2585 ;;  data            1   42[COMRAM] unsigned char 
  2586 ;; Return value:  Size  Location     Type
  2587 ;;                  1    wreg      void 
  2588 ;; Registers used:
  2589 ;;		wreg, status,2, status,0, cstack
  2590 ;; Tracked objects:
  2591 ;;		On entry : 0/0
  2592 ;;		On exit  : 0/0
  2593 ;;		Unchanged: 0/0
  2594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2595 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2596 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2597 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2598 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2599 ;;Total ram usage:        1 bytes
  2600 ;; Hardware stack levels used:    1
  2601 ;; Hardware stack levels required when called:    5
  2602 ;; This function calls:
  2603 ;;		_lcdNibble
  2604 ;; This function is called by:
  2605 ;;		_printf
  2606 ;; This function uses a non-reentrant model
  2607 ;;
  2608                           
  2609                           	psect	text2
  2610  000E98                     __ptext2:
  2611                           	opt stack 0
  2612  000E98                     _putch:
  2613                           	opt stack 24
  2614                           
  2615                           ;incstack = 0
  2616                           ;putch@data stored from wreg
  2617  000E98  6E2B               	movwf	putch@data,c
  2618                           
  2619                           ;lcd.c: 31: LATDbits.LATD2 = 1;
  2620  000E9A  848C               	bsf	3980,2,c	;volatile
  2621                           
  2622                           ;lcd.c: 32: lcdNibble(data);
  2623  000E9C  502B               	movf	putch@data,w,c
  2624  000E9E  EC6F  F006         	call	_lcdNibble
  2625  000EA2  0012               	return		;funcret
  2626  000EA4                     __end_of_putch:
  2627                           	opt stack 0
  2628                           tblptru	equ	0xFF8
  2629                           tblptrh	equ	0xFF7
  2630                           tblptrl	equ	0xFF6
  2631                           tablat	equ	0xFF5
  2632                           prodh	equ	0xFF4
  2633                           prodl	equ	0xFF3
  2634                           intcon	equ	0xFF2
  2635                           intcon3	equ	0xFF0
  2636                           postinc0	equ	0xFEE
  2637                           wreg	equ	0xFE8
  2638                           indf2	equ	0xFDF
  2639                           postinc2	equ	0xFDE
  2640                           postdec2	equ	0xFDD
  2641                           fsr2h	equ	0xFDA
  2642                           fsr2l	equ	0xFD9
  2643                           status	equ	0xFD8
  2644                           
  2645 ;; *************** function _isdigit *****************
  2646 ;; Defined at:
  2647 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  2648 ;; Parameters:    Size  Location     Type
  2649 ;;  c               1    wreg     unsigned char 
  2650 ;; Auto vars:     Size  Location     Type
  2651 ;;  c               1   42[COMRAM] unsigned char 
  2652 ;; Return value:  Size  Location     Type
  2653 ;;		None               void
  2654 ;; Registers used:
  2655 ;;		wreg, status,2, status,0
  2656 ;; Tracked objects:
  2657 ;;		On entry : 0/0
  2658 ;;		On exit  : 0/0
  2659 ;;		Unchanged: 0/0
  2660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2661 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2662 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2663 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2664 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2665 ;;Total ram usage:        3 bytes
  2666 ;; Hardware stack levels used:    1
  2667 ;; Hardware stack levels required when called:    4
  2668 ;; This function calls:
  2669 ;;		Nothing
  2670 ;; This function is called by:
  2671 ;;		_printf
  2672 ;; This function uses a non-reentrant model
  2673 ;;
  2674                           
  2675                           	psect	text3
  2676  000E68                     __ptext3:
  2677                           	opt stack 0
  2678  000E68                     _isdigit:
  2679                           	opt stack 25
  2680                           
  2681                           ;incstack = 0
  2682                           ;isdigit@c stored from wreg
  2683  000E68  6E2B               	movwf	isdigit@c,c
  2684  000E6A  0E00               	movlw	0
  2685  000E6C  6E2A               	movwf	_isdigit$915,c
  2686  000E6E  0E3A               	movlw	58
  2687  000E70  602B               	cpfslt	isdigit@c,c
  2688  000E72  D005               	goto	l2590
  2689  000E74  0E2F               	movlw	47
  2690  000E76  642B               	cpfsgt	isdigit@c,c
  2691  000E78  D002               	goto	l2590
  2692  000E7A  0E01               	movlw	1
  2693  000E7C  6E2A               	movwf	_isdigit$915,c
  2694  000E7E                     l2590:
  2695  000E7E  C02A  F029         	movff	_isdigit$915,??_isdigit
  2696  000E82  3029               	rrcf	??_isdigit,w,c
  2697  000E84  0012               	return	
  2698  000E86                     __end_of_isdigit:
  2699                           	opt stack 0
  2700                           tblptru	equ	0xFF8
  2701                           tblptrh	equ	0xFF7
  2702                           tblptrl	equ	0xFF6
  2703                           tablat	equ	0xFF5
  2704                           prodh	equ	0xFF4
  2705                           prodl	equ	0xFF3
  2706                           intcon	equ	0xFF2
  2707                           intcon3	equ	0xFF0
  2708                           postinc0	equ	0xFEE
  2709                           wreg	equ	0xFE8
  2710                           indf2	equ	0xFDF
  2711                           postinc2	equ	0xFDE
  2712                           postdec2	equ	0xFDD
  2713                           fsr2h	equ	0xFDA
  2714                           fsr2l	equ	0xFD9
  2715                           status	equ	0xFD8
  2716                           
  2717 ;; *************** function ___wmul *****************
  2718 ;; Defined at:
  2719 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  2720 ;; Parameters:    Size  Location     Type
  2721 ;;  multiplier      2   40[COMRAM] unsigned int 
  2722 ;;  multiplicand    2   42[COMRAM] unsigned int 
  2723 ;; Auto vars:     Size  Location     Type
  2724 ;;  product         2   44[COMRAM] unsigned int 
  2725 ;; Return value:  Size  Location     Type
  2726 ;;                  2   40[COMRAM] unsigned int 
  2727 ;; Registers used:
  2728 ;;		wreg, status,2, status,0, prodl, prodh
  2729 ;; Tracked objects:
  2730 ;;		On entry : 0/0
  2731 ;;		On exit  : 0/0
  2732 ;;		Unchanged: 0/0
  2733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2734 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2735 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2736 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2737 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2738 ;;Total ram usage:        6 bytes
  2739 ;; Hardware stack levels used:    1
  2740 ;; Hardware stack levels required when called:    4
  2741 ;; This function calls:
  2742 ;;		Nothing
  2743 ;; This function is called by:
  2744 ;;		_printf
  2745 ;; This function uses a non-reentrant model
  2746 ;;
  2747                           
  2748                           	psect	text4
  2749  000E1C                     __ptext4:
  2750                           	opt stack 0
  2751  000E1C                     ___wmul:
  2752                           	opt stack 25
  2753                           
  2754                           ;incstack = 0
  2755  000E1C  5029               	movf	___wmul@multiplier,w,c
  2756  000E1E  022B               	mulwf	___wmul@multiplicand,c
  2757  000E20  CFF3 F02D          	movff	prodl,___wmul@product
  2758  000E24  CFF4 F02E          	movff	prodh,___wmul@product+1
  2759  000E28  5029               	movf	___wmul@multiplier,w,c
  2760  000E2A  022C               	mulwf	___wmul@multiplicand+1,c
  2761  000E2C  50F3               	movf	prodl,w,c
  2762  000E2E  262E               	addwf	___wmul@product+1,f,c
  2763  000E30  502A               	movf	___wmul@multiplier+1,w,c
  2764  000E32  022B               	mulwf	___wmul@multiplicand,c
  2765  000E34  50F3               	movf	prodl,w,c
  2766  000E36  262E               	addwf	___wmul@product+1,f,c
  2767  000E38  C02D  F029         	movff	___wmul@product,?___wmul
  2768  000E3C  C02E  F02A         	movff	___wmul@product+1,?___wmul+1
  2769  000E40  0012               	return	
  2770  000E42                     __end_of___wmul:
  2771                           	opt stack 0
  2772                           tblptru	equ	0xFF8
  2773                           tblptrh	equ	0xFF7
  2774                           tblptrl	equ	0xFF6
  2775                           tablat	equ	0xFF5
  2776                           prodh	equ	0xFF4
  2777                           prodl	equ	0xFF3
  2778                           intcon	equ	0xFF2
  2779                           intcon3	equ	0xFF0
  2780                           postinc0	equ	0xFEE
  2781                           wreg	equ	0xFE8
  2782                           indf2	equ	0xFDF
  2783                           postinc2	equ	0xFDE
  2784                           postdec2	equ	0xFDD
  2785                           fsr2h	equ	0xFDA
  2786                           fsr2l	equ	0xFD9
  2787                           status	equ	0xFD8
  2788                           
  2789 ;; *************** function ___lwmod *****************
  2790 ;; Defined at:
  2791 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  2792 ;; Parameters:    Size  Location     Type
  2793 ;;  dividend        2   47[COMRAM] unsigned int 
  2794 ;;  divisor         2   49[COMRAM] unsigned int 
  2795 ;; Auto vars:     Size  Location     Type
  2796 ;;  counter         1   51[COMRAM] unsigned char 
  2797 ;; Return value:  Size  Location     Type
  2798 ;;                  2   47[COMRAM] unsigned int 
  2799 ;; Registers used:
  2800 ;;		wreg, status,2, status,0
  2801 ;; Tracked objects:
  2802 ;;		On entry : 0/0
  2803 ;;		On exit  : 0/0
  2804 ;;		Unchanged: 0/0
  2805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2806 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2807 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2808 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2809 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2810 ;;Total ram usage:        5 bytes
  2811 ;; Hardware stack levels used:    1
  2812 ;; Hardware stack levels required when called:    4
  2813 ;; This function calls:
  2814 ;;		Nothing
  2815 ;; This function is called by:
  2816 ;;		_printf
  2817 ;; This function uses a non-reentrant model
  2818 ;;
  2819                           
  2820                           	psect	text5
  2821  000D72                     __ptext5:
  2822                           	opt stack 0
  2823  000D72                     ___lwmod:
  2824                           	opt stack 25
  2825                           
  2826                           ;incstack = 0
  2827  000D72  5032               	movf	___lwmod@divisor,w,c
  2828  000D74  1033               	iorwf	___lwmod@divisor+1,w,c
  2829  000D76  B4D8               	btfsc	status,2,c
  2830  000D78  D018               	goto	l839
  2831  000D7A  0E01               	movlw	1
  2832  000D7C  6E34               	movwf	___lwmod@counter,c
  2833  000D7E  D004               	goto	l2650
  2834  000D80                     l2648:
  2835  000D80  90D8               	bcf	status,0,c
  2836  000D82  3632               	rlcf	___lwmod@divisor,f,c
  2837  000D84  3633               	rlcf	___lwmod@divisor+1,f,c
  2838  000D86  2A34               	incf	___lwmod@counter,f,c
  2839  000D88                     l2650:
  2840  000D88  AE33               	btfss	___lwmod@divisor+1,7,c
  2841  000D8A  D7FA               	goto	l2648
  2842  000D8C                     l2652:
  2843  000D8C  5032               	movf	___lwmod@divisor,w,c
  2844  000D8E  5C30               	subwf	___lwmod@dividend,w,c
  2845  000D90  5033               	movf	___lwmod@divisor+1,w,c
  2846  000D92  5831               	subwfb	___lwmod@dividend+1,w,c
  2847  000D94  A0D8               	btfss	status,0,c
  2848  000D96  D004               	goto	l2656
  2849  000D98  5032               	movf	___lwmod@divisor,w,c
  2850  000D9A  5E30               	subwf	___lwmod@dividend,f,c
  2851  000D9C  5033               	movf	___lwmod@divisor+1,w,c
  2852  000D9E  5A31               	subwfb	___lwmod@dividend+1,f,c
  2853  000DA0                     l2656:
  2854  000DA0  90D8               	bcf	status,0,c
  2855  000DA2  3233               	rrcf	___lwmod@divisor+1,f,c
  2856  000DA4  3232               	rrcf	___lwmod@divisor,f,c
  2857  000DA6  2E34               	decfsz	___lwmod@counter,f,c
  2858  000DA8  D7F1               	goto	l2652
  2859  000DAA                     l839:
  2860  000DAA  C030  F030         	movff	___lwmod@dividend,?___lwmod
  2861  000DAE  C031  F031         	movff	___lwmod@dividend+1,?___lwmod+1
  2862  000DB2  0012               	return		;funcret
  2863  000DB4                     __end_of___lwmod:
  2864                           	opt stack 0
  2865                           tblptru	equ	0xFF8
  2866                           tblptrh	equ	0xFF7
  2867                           tblptrl	equ	0xFF6
  2868                           tablat	equ	0xFF5
  2869                           prodh	equ	0xFF4
  2870                           prodl	equ	0xFF3
  2871                           intcon	equ	0xFF2
  2872                           intcon3	equ	0xFF0
  2873                           postinc0	equ	0xFEE
  2874                           wreg	equ	0xFE8
  2875                           indf2	equ	0xFDF
  2876                           postinc2	equ	0xFDE
  2877                           postdec2	equ	0xFDD
  2878                           fsr2h	equ	0xFDA
  2879                           fsr2l	equ	0xFD9
  2880                           status	equ	0xFD8
  2881                           
  2882 ;; *************** function ___lwdiv *****************
  2883 ;; Defined at:
  2884 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  2885 ;; Parameters:    Size  Location     Type
  2886 ;;  dividend        2   40[COMRAM] unsigned int 
  2887 ;;  divisor         2   42[COMRAM] unsigned int 
  2888 ;; Auto vars:     Size  Location     Type
  2889 ;;  quotient        2   45[COMRAM] unsigned int 
  2890 ;;  counter         1   44[COMRAM] unsigned char 
  2891 ;; Return value:  Size  Location     Type
  2892 ;;                  2   40[COMRAM] unsigned int 
  2893 ;; Registers used:
  2894 ;;		wreg, status,2, status,0
  2895 ;; Tracked objects:
  2896 ;;		On entry : 0/0
  2897 ;;		On exit  : 0/0
  2898 ;;		Unchanged: 0/0
  2899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2900 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2901 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2902 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2903 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2904 ;;Total ram usage:        7 bytes
  2905 ;; Hardware stack levels used:    1
  2906 ;; Hardware stack levels required when called:    4
  2907 ;; This function calls:
  2908 ;;		Nothing
  2909 ;; This function is called by:
  2910 ;;		_printf
  2911 ;; This function uses a non-reentrant model
  2912 ;;
  2913                           
  2914                           	psect	text6
  2915  000C8C                     __ptext6:
  2916                           	opt stack 0
  2917  000C8C                     ___lwdiv:
  2918                           	opt stack 25
  2919                           
  2920                           ;incstack = 0
  2921  000C8C  0E00               	movlw	0
  2922  000C8E  6E2F               	movwf	___lwdiv@quotient+1,c
  2923  000C90  0E00               	movlw	0
  2924  000C92  6E2E               	movwf	___lwdiv@quotient,c
  2925  000C94  502B               	movf	___lwdiv@divisor,w,c
  2926  000C96  102C               	iorwf	___lwdiv@divisor+1,w,c
  2927  000C98  B4D8               	btfsc	status,2,c
  2928  000C9A  D01C               	goto	l829
  2929  000C9C  0E01               	movlw	1
  2930  000C9E  6E2D               	movwf	___lwdiv@counter,c
  2931  000CA0  D004               	goto	l2630
  2932  000CA2                     l2628:
  2933  000CA2  90D8               	bcf	status,0,c
  2934  000CA4  362B               	rlcf	___lwdiv@divisor,f,c
  2935  000CA6  362C               	rlcf	___lwdiv@divisor+1,f,c
  2936  000CA8  2A2D               	incf	___lwdiv@counter,f,c
  2937  000CAA                     l2630:
  2938  000CAA  AE2C               	btfss	___lwdiv@divisor+1,7,c
  2939  000CAC  D7FA               	goto	l2628
  2940  000CAE                     l2632:
  2941  000CAE  90D8               	bcf	status,0,c
  2942  000CB0  362E               	rlcf	___lwdiv@quotient,f,c
  2943  000CB2  362F               	rlcf	___lwdiv@quotient+1,f,c
  2944  000CB4  502B               	movf	___lwdiv@divisor,w,c
  2945  000CB6  5C29               	subwf	___lwdiv@dividend,w,c
  2946  000CB8  502C               	movf	___lwdiv@divisor+1,w,c
  2947  000CBA  582A               	subwfb	___lwdiv@dividend+1,w,c
  2948  000CBC  A0D8               	btfss	status,0,c
  2949  000CBE  D005               	goto	l2640
  2950  000CC0  502B               	movf	___lwdiv@divisor,w,c
  2951  000CC2  5E29               	subwf	___lwdiv@dividend,f,c
  2952  000CC4  502C               	movf	___lwdiv@divisor+1,w,c
  2953  000CC6  5A2A               	subwfb	___lwdiv@dividend+1,f,c
  2954  000CC8  802E               	bsf	___lwdiv@quotient,0,c
  2955  000CCA                     l2640:
  2956  000CCA  90D8               	bcf	status,0,c
  2957  000CCC  322C               	rrcf	___lwdiv@divisor+1,f,c
  2958  000CCE  322B               	rrcf	___lwdiv@divisor,f,c
  2959  000CD0  2E2D               	decfsz	___lwdiv@counter,f,c
  2960  000CD2  D7ED               	goto	l2632
  2961  000CD4                     l829:
  2962  000CD4  C02E  F029         	movff	___lwdiv@quotient,?___lwdiv
  2963  000CD8  C02F  F02A         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2964  000CDC  0012               	return		;funcret
  2965  000CDE                     __end_of___lwdiv:
  2966                           	opt stack 0
  2967                           tblptru	equ	0xFF8
  2968                           tblptrh	equ	0xFF7
  2969                           tblptrl	equ	0xFF6
  2970                           tablat	equ	0xFF5
  2971                           prodh	equ	0xFF4
  2972                           prodl	equ	0xFF3
  2973                           intcon	equ	0xFF2
  2974                           intcon3	equ	0xFF0
  2975                           postinc0	equ	0xFEE
  2976                           wreg	equ	0xFE8
  2977                           indf2	equ	0xFDF
  2978                           postinc2	equ	0xFDE
  2979                           postdec2	equ	0xFDD
  2980                           fsr2h	equ	0xFDA
  2981                           fsr2l	equ	0xFD9
  2982                           status	equ	0xFD8
  2983                           
  2984 ;; *************** function _initLCD *****************
  2985 ;; Defined at:
  2986 ;;		line 14 in file "../lcd.c"
  2987 ;; Parameters:    Size  Location     Type
  2988 ;;		None
  2989 ;; Auto vars:     Size  Location     Type
  2990 ;;		None
  2991 ;; Return value:  Size  Location     Type
  2992 ;;                  1    wreg      void 
  2993 ;; Registers used:
  2994 ;;		wreg, status,2, status,0, cstack
  2995 ;; Tracked objects:
  2996 ;;		On entry : 0/0
  2997 ;;		On exit  : 0/0
  2998 ;;		Unchanged: 0/0
  2999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3001 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3002 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3003 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3004 ;;Total ram usage:        1 bytes
  3005 ;; Hardware stack levels used:    1
  3006 ;; Hardware stack levels required when called:    6
  3007 ;; This function calls:
  3008 ;;		_lcdInst
  3009 ;; This function is called by:
  3010 ;;		_main
  3011 ;; This function uses a non-reentrant model
  3012 ;;
  3013                           
  3014                           	psect	text7
  3015  000D2C                     __ptext7:
  3016                           	opt stack 0
  3017  000D2C                     _initLCD:
  3018                           	opt stack 24
  3019                           
  3020                           ;lcd.c: 15: _delay((unsigned long)((15)*(10000000/4000.0)));
  3021                           
  3022                           ;incstack = 0
  3023  000D2C  0E31               	movlw	49
  3024  000D2E  6E2C               	movwf	??_initLCD& (0+255),c
  3025  000D30  0EB2               	movlw	178
  3026  000D32                     u2677:
  3027  000D32  2EE8               	decfsz	wreg,f,c
  3028  000D34  D7FE               	bra	u2677
  3029  000D36  2E2C               	decfsz	??_initLCD& (0+255),f,c
  3030  000D38  D7FC               	bra	u2677
  3031  000D3A  D000               	nop2	
  3032                           
  3033                           ;lcd.c: 16: lcdInst(0b00110011);
  3034  000D3C  0E33               	movlw	51
  3035  000D3E  EC52  F007         	call	_lcdInst
  3036                           
  3037                           ;lcd.c: 17: lcdInst(0b00110010);
  3038  000D42  0E32               	movlw	50
  3039  000D44  EC52  F007         	call	_lcdInst
  3040                           
  3041                           ;lcd.c: 18: lcdInst(0b00101000);
  3042  000D48  0E28               	movlw	40
  3043  000D4A  EC52  F007         	call	_lcdInst
  3044                           
  3045                           ;lcd.c: 19: lcdInst(0b00001111);
  3046  000D4E  0E0F               	movlw	15
  3047  000D50  EC52  F007         	call	_lcdInst
  3048                           
  3049                           ;lcd.c: 20: lcdInst(0b00000110);
  3050  000D54  0E06               	movlw	6
  3051  000D56  EC52  F007         	call	_lcdInst
  3052                           
  3053                           ;lcd.c: 21: lcdInst(0b00000001);
  3054  000D5A  0E01               	movlw	1
  3055  000D5C  EC52  F007         	call	_lcdInst
  3056                           
  3057                           ;lcd.c: 22: _delay((unsigned long)((15)*(10000000/4000.0)));
  3058  000D60  0E31               	movlw	49
  3059  000D62  6E2C               	movwf	??_initLCD& (0+255),c
  3060  000D64  0EB2               	movlw	178
  3061  000D66                     u2687:
  3062  000D66  2EE8               	decfsz	wreg,f,c
  3063  000D68  D7FE               	bra	u2687
  3064  000D6A  2E2C               	decfsz	??_initLCD& (0+255),f,c
  3065  000D6C  D7FC               	bra	u2687
  3066  000D6E  D000               	nop2	
  3067  000D70  0012               	return		;funcret
  3068  000D72                     __end_of_initLCD:
  3069                           	opt stack 0
  3070                           tblptru	equ	0xFF8
  3071                           tblptrh	equ	0xFF7
  3072                           tblptrl	equ	0xFF6
  3073                           tablat	equ	0xFF5
  3074                           prodh	equ	0xFF4
  3075                           prodl	equ	0xFF3
  3076                           intcon	equ	0xFF2
  3077                           intcon3	equ	0xFF0
  3078                           postinc0	equ	0xFEE
  3079                           wreg	equ	0xFE8
  3080                           indf2	equ	0xFDF
  3081                           postinc2	equ	0xFDE
  3082                           postdec2	equ	0xFDD
  3083                           fsr2h	equ	0xFDA
  3084                           fsr2l	equ	0xFD9
  3085                           status	equ	0xFD8
  3086                           
  3087 ;; *************** function _lcdInst *****************
  3088 ;; Defined at:
  3089 ;;		line 25 in file "../lcd.c"
  3090 ;; Parameters:    Size  Location     Type
  3091 ;;  data            1    wreg     unsigned char 
  3092 ;; Auto vars:     Size  Location     Type
  3093 ;;  data            1   42[COMRAM] unsigned char 
  3094 ;; Return value:  Size  Location     Type
  3095 ;;                  1    wreg      void 
  3096 ;; Registers used:
  3097 ;;		wreg, status,2, status,0, cstack
  3098 ;; Tracked objects:
  3099 ;;		On entry : 0/0
  3100 ;;		On exit  : 0/0
  3101 ;;		Unchanged: 0/0
  3102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3103 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3104 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3105 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3106 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3107 ;;Total ram usage:        1 bytes
  3108 ;; Hardware stack levels used:    1
  3109 ;; Hardware stack levels required when called:    5
  3110 ;; This function calls:
  3111 ;;		_lcdNibble
  3112 ;; This function is called by:
  3113 ;;		_initLCD
  3114 ;;		_main
  3115 ;; This function uses a non-reentrant model
  3116 ;;
  3117                           
  3118                           	psect	text8
  3119  000EA4                     __ptext8:
  3120                           	opt stack 0
  3121  000EA4                     _lcdInst:
  3122                           	opt stack 25
  3123                           
  3124                           ;incstack = 0
  3125                           ;lcdInst@data stored from wreg
  3126  000EA4  6E2B               	movwf	lcdInst@data,c
  3127                           
  3128                           ;lcd.c: 26: LATDbits.LATD2 = 0;
  3129  000EA6  948C               	bcf	3980,2,c	;volatile
  3130                           
  3131                           ;lcd.c: 27: lcdNibble(data);
  3132  000EA8  502B               	movf	lcdInst@data,w,c
  3133  000EAA  EC6F  F006         	call	_lcdNibble
  3134  000EAE  0012               	return		;funcret
  3135  000EB0                     __end_of_lcdInst:
  3136                           	opt stack 0
  3137                           tblptru	equ	0xFF8
  3138                           tblptrh	equ	0xFF7
  3139                           tblptrl	equ	0xFF6
  3140                           tablat	equ	0xFF5
  3141                           prodh	equ	0xFF4
  3142                           prodl	equ	0xFF3
  3143                           intcon	equ	0xFF2
  3144                           intcon3	equ	0xFF0
  3145                           postinc0	equ	0xFEE
  3146                           wreg	equ	0xFE8
  3147                           indf2	equ	0xFDF
  3148                           postinc2	equ	0xFDE
  3149                           postdec2	equ	0xFDD
  3150                           fsr2h	equ	0xFDA
  3151                           fsr2l	equ	0xFD9
  3152                           status	equ	0xFD8
  3153                           
  3154 ;; *************** function _lcdNibble *****************
  3155 ;; Defined at:
  3156 ;;		line 35 in file "../lcd.c"
  3157 ;; Parameters:    Size  Location     Type
  3158 ;;  data            1    wreg     unsigned char 
  3159 ;; Auto vars:     Size  Location     Type
  3160 ;;  data            1   41[COMRAM] unsigned char 
  3161 ;;  temp            1   40[COMRAM] unsigned char 
  3162 ;; Return value:  Size  Location     Type
  3163 ;;                  1    wreg      void 
  3164 ;; Registers used:
  3165 ;;		wreg, status,2, status,0
  3166 ;; Tracked objects:
  3167 ;;		On entry : 0/0
  3168 ;;		On exit  : 0/0
  3169 ;;		Unchanged: 0/0
  3170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3171 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3172 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3174 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3175 ;;Total ram usage:        2 bytes
  3176 ;; Hardware stack levels used:    1
  3177 ;; Hardware stack levels required when called:    4
  3178 ;; This function calls:
  3179 ;;		Nothing
  3180 ;; This function is called by:
  3181 ;;		_lcdInst
  3182 ;;		_putch
  3183 ;; This function uses a non-reentrant model
  3184 ;;
  3185                           
  3186                           	psect	text9
  3187  000CDE                     __ptext9:
  3188                           	opt stack 0
  3189  000CDE                     _lcdNibble:
  3190                           	opt stack 24
  3191                           
  3192                           ;incstack = 0
  3193                           ;lcdNibble@data stored from wreg
  3194  000CDE  6E2A               	movwf	lcdNibble@data,c
  3195                           
  3196                           ;lcd.c: 37: char temp = data & 0xF0;
  3197  000CE0  502A               	movf	lcdNibble@data,w,c
  3198  000CE2  0BF0               	andlw	240
  3199  000CE4  6E29               	movwf	lcdNibble@temp,c
  3200                           
  3201                           ;lcd.c: 38: LATD = LATD & 0x0F;
  3202  000CE6  508C               	movf	3980,w,c	;volatile
  3203  000CE8  0B0F               	andlw	15
  3204  000CEA  6E8C               	movwf	3980,c	;volatile
  3205                           
  3206                           ;lcd.c: 39: LATD = temp | LATD;
  3207  000CEC  5029               	movf	lcdNibble@temp,w,c
  3208  000CEE  108C               	iorwf	3980,w,c	;volatile
  3209  000CF0  6E8C               	movwf	3980,c	;volatile
  3210                           
  3211                           ;lcd.c: 41: LATDbits.LATD3 = 0;
  3212  000CF2  968C               	bcf	3980,3,c	;volatile
  3213                           
  3214                           ;lcd.c: 42: _delay((unsigned long)((30)*(10000000/4000000.0)));
  3215  000CF4  0E19               	movlw	25
  3216  000CF6                     u2697:
  3217  000CF6  2EE8               	decfsz	wreg,f,c
  3218  000CF8  D7FE               	bra	u2697
  3219                           
  3220                           ;lcd.c: 43: LATDbits.LATD3 = 1;
  3221  000CFA  868C               	bsf	3980,3,c	;volatile
  3222                           
  3223                           ;lcd.c: 44: _delay((unsigned long)((30)*(10000000/4000000.0)));
  3224  000CFC  0E19               	movlw	25
  3225  000CFE                     u2707:
  3226  000CFE  2EE8               	decfsz	wreg,f,c
  3227  000D00  D7FE               	bra	u2707
  3228                           
  3229                           ;lcd.c: 46: data = data << 4;
  3230  000D02  382A               	swapf	lcdNibble@data,w,c
  3231  000D04  0BF0               	andlw	240
  3232  000D06  6E2A               	movwf	lcdNibble@data,c
  3233                           
  3234                           ;lcd.c: 48: temp = data & 0xF0;
  3235  000D08  502A               	movf	lcdNibble@data,w,c
  3236  000D0A  0BF0               	andlw	240
  3237  000D0C  6E29               	movwf	lcdNibble@temp,c
  3238                           
  3239                           ;lcd.c: 49: LATD = LATD & 0x0F;
  3240  000D0E  508C               	movf	3980,w,c	;volatile
  3241  000D10  0B0F               	andlw	15
  3242  000D12  6E8C               	movwf	3980,c	;volatile
  3243                           
  3244                           ;lcd.c: 50: LATD = temp | LATD;
  3245  000D14  5029               	movf	lcdNibble@temp,w,c
  3246  000D16  108C               	iorwf	3980,w,c	;volatile
  3247  000D18  6E8C               	movwf	3980,c	;volatile
  3248                           
  3249                           ;lcd.c: 52: LATDbits.LATD3 = 0;
  3250  000D1A  968C               	bcf	3980,3,c	;volatile
  3251                           
  3252                           ;lcd.c: 53: _delay((unsigned long)((30)*(10000000/4000000.0)));
  3253  000D1C  0E19               	movlw	25
  3254  000D1E                     u2717:
  3255  000D1E  2EE8               	decfsz	wreg,f,c
  3256  000D20  D7FE               	bra	u2717
  3257                           
  3258                           ;lcd.c: 54: LATDbits.LATD3 = 1;
  3259  000D22  868C               	bsf	3980,3,c	;volatile
  3260                           
  3261                           ;lcd.c: 55: _delay((unsigned long)((30)*(10000000/4000000.0)));
  3262  000D24  0E19               	movlw	25
  3263  000D26                     u2727:
  3264  000D26  2EE8               	decfsz	wreg,f,c
  3265  000D28  D7FE               	bra	u2727
  3266  000D2A  0012               	return		;funcret
  3267  000D2C                     __end_of_lcdNibble:
  3268                           	opt stack 0
  3269                           tblptru	equ	0xFF8
  3270                           tblptrh	equ	0xFF7
  3271                           tblptrl	equ	0xFF6
  3272                           tablat	equ	0xFF5
  3273                           prodh	equ	0xFF4
  3274                           prodl	equ	0xFF3
  3275                           intcon	equ	0xFF2
  3276                           intcon3	equ	0xFF0
  3277                           postinc0	equ	0xFEE
  3278                           wreg	equ	0xFE8
  3279                           indf2	equ	0xFDF
  3280                           postinc2	equ	0xFDE
  3281                           postdec2	equ	0xFDD
  3282                           fsr2h	equ	0xFDA
  3283                           fsr2l	equ	0xFD9
  3284                           status	equ	0xFD8
  3285                           
  3286 ;; *************** function _I2C_Master_Write *****************
  3287 ;; Defined at:
  3288 ;;		line 47 in file "../I2C.c"
  3289 ;; Parameters:    Size  Location     Type
  3290 ;;  d               2   41[COMRAM] unsigned int 
  3291 ;; Auto vars:     Size  Location     Type
  3292 ;;		None
  3293 ;; Return value:  Size  Location     Type
  3294 ;;                  1    wreg      void 
  3295 ;; Registers used:
  3296 ;;		wreg, status,2, status,0, cstack
  3297 ;; Tracked objects:
  3298 ;;		On entry : 0/0
  3299 ;;		On exit  : 0/0
  3300 ;;		Unchanged: 0/0
  3301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3302 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3303 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3304 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3305 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3306 ;;Total ram usage:        2 bytes
  3307 ;; Hardware stack levels used:    1
  3308 ;; Hardware stack levels required when called:    5
  3309 ;; This function calls:
  3310 ;;		_I2C_Master_Wait
  3311 ;; This function is called by:
  3312 ;;		_main
  3313 ;; This function uses a non-reentrant model
  3314 ;;
  3315                           
  3316                           	psect	text10
  3317  000EB0                     __ptext10:
  3318                           	opt stack 0
  3319  000EB0                     _I2C_Master_Write:
  3320                           	opt stack 25
  3321                           
  3322                           ;I2C.c: 49: I2C_Master_Wait();
  3323                           
  3324                           ;incstack = 0
  3325  000EB0  EC43  F007         	call	_I2C_Master_Wait	;wreg free
  3326                           
  3327                           ;I2C.c: 50: SSPBUF = d;
  3328  000EB4  C02A  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  3329  000EB8  0012               	return		;funcret
  3330  000EBA                     __end_of_I2C_Master_Write:
  3331                           	opt stack 0
  3332                           tblptru	equ	0xFF8
  3333                           tblptrh	equ	0xFF7
  3334                           tblptrl	equ	0xFF6
  3335                           tablat	equ	0xFF5
  3336                           prodh	equ	0xFF4
  3337                           prodl	equ	0xFF3
  3338                           intcon	equ	0xFF2
  3339                           intcon3	equ	0xFF0
  3340                           postinc0	equ	0xFEE
  3341                           wreg	equ	0xFE8
  3342                           indf2	equ	0xFDF
  3343                           postinc2	equ	0xFDE
  3344                           postdec2	equ	0xFDD
  3345                           fsr2h	equ	0xFDA
  3346                           fsr2l	equ	0xFD9
  3347                           status	equ	0xFD8
  3348                           
  3349 ;; *************** function _I2C_Master_Stop *****************
  3350 ;; Defined at:
  3351 ;;		line 41 in file "../I2C.c"
  3352 ;; Parameters:    Size  Location     Type
  3353 ;;		None
  3354 ;; Auto vars:     Size  Location     Type
  3355 ;;		None
  3356 ;; Return value:  Size  Location     Type
  3357 ;;                  1    wreg      void 
  3358 ;; Registers used:
  3359 ;;		wreg, status,2, status,0, cstack
  3360 ;; Tracked objects:
  3361 ;;		On entry : 0/0
  3362 ;;		On exit  : 0/0
  3363 ;;		Unchanged: 0/0
  3364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3365 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3366 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3367 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3368 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3369 ;;Total ram usage:        0 bytes
  3370 ;; Hardware stack levels used:    1
  3371 ;; Hardware stack levels required when called:    5
  3372 ;; This function calls:
  3373 ;;		_I2C_Master_Wait
  3374 ;; This function is called by:
  3375 ;;		_main
  3376 ;; This function uses a non-reentrant model
  3377 ;;
  3378                           
  3379                           	psect	text11
  3380  000EBA                     __ptext11:
  3381                           	opt stack 0
  3382  000EBA                     _I2C_Master_Stop:
  3383                           	opt stack 25
  3384                           
  3385                           ;I2C.c: 43: I2C_Master_Wait();
  3386                           
  3387                           ;incstack = 0
  3388  000EBA  EC43  F007         	call	_I2C_Master_Wait	;wreg free
  3389                           
  3390                           ;I2C.c: 44: PEN = 1;
  3391  000EBE  84C5               	bsf	4037,2,c	;volatile
  3392  000EC0  0012               	return		;funcret
  3393  000EC2                     __end_of_I2C_Master_Stop:
  3394                           	opt stack 0
  3395                           tblptru	equ	0xFF8
  3396                           tblptrh	equ	0xFF7
  3397                           tblptrl	equ	0xFF6
  3398                           tablat	equ	0xFF5
  3399                           prodh	equ	0xFF4
  3400                           prodl	equ	0xFF3
  3401                           intcon	equ	0xFF2
  3402                           intcon3	equ	0xFF0
  3403                           postinc0	equ	0xFEE
  3404                           wreg	equ	0xFE8
  3405                           indf2	equ	0xFDF
  3406                           postinc2	equ	0xFDE
  3407                           postdec2	equ	0xFDD
  3408                           fsr2h	equ	0xFDA
  3409                           fsr2l	equ	0xFD9
  3410                           status	equ	0xFD8
  3411                           
  3412 ;; *************** function _I2C_Master_Start *****************
  3413 ;; Defined at:
  3414 ;;		line 29 in file "../I2C.c"
  3415 ;; Parameters:    Size  Location     Type
  3416 ;;		None
  3417 ;; Auto vars:     Size  Location     Type
  3418 ;;		None
  3419 ;; Return value:  Size  Location     Type
  3420 ;;                  1    wreg      void 
  3421 ;; Registers used:
  3422 ;;		wreg, status,2, status,0, cstack
  3423 ;; Tracked objects:
  3424 ;;		On entry : 0/0
  3425 ;;		On exit  : 0/0
  3426 ;;		Unchanged: 0/0
  3427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3428 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3429 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3430 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3431 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3432 ;;Total ram usage:        0 bytes
  3433 ;; Hardware stack levels used:    1
  3434 ;; Hardware stack levels required when called:    5
  3435 ;; This function calls:
  3436 ;;		_I2C_Master_Wait
  3437 ;; This function is called by:
  3438 ;;		_main
  3439 ;; This function uses a non-reentrant model
  3440 ;;
  3441                           
  3442                           	psect	text12
  3443  000EC2                     __ptext12:
  3444                           	opt stack 0
  3445  000EC2                     _I2C_Master_Start:
  3446                           	opt stack 25
  3447                           
  3448                           ;I2C.c: 31: I2C_Master_Wait();
  3449                           
  3450                           ;incstack = 0
  3451  000EC2  EC43  F007         	call	_I2C_Master_Wait	;wreg free
  3452                           
  3453                           ;I2C.c: 32: SEN = 1;
  3454  000EC6  80C5               	bsf	4037,0,c	;volatile
  3455  000EC8  0012               	return		;funcret
  3456  000ECA                     __end_of_I2C_Master_Start:
  3457                           	opt stack 0
  3458                           tblptru	equ	0xFF8
  3459                           tblptrh	equ	0xFF7
  3460                           tblptrl	equ	0xFF6
  3461                           tablat	equ	0xFF5
  3462                           prodh	equ	0xFF4
  3463                           prodl	equ	0xFF3
  3464                           intcon	equ	0xFF2
  3465                           intcon3	equ	0xFF0
  3466                           postinc0	equ	0xFEE
  3467                           wreg	equ	0xFE8
  3468                           indf2	equ	0xFDF
  3469                           postinc2	equ	0xFDE
  3470                           postdec2	equ	0xFDD
  3471                           fsr2h	equ	0xFDA
  3472                           fsr2l	equ	0xFD9
  3473                           status	equ	0xFD8
  3474                           
  3475 ;; *************** function _I2C_Master_Read *****************
  3476 ;; Defined at:
  3477 ;;		line 53 in file "../I2C.c"
  3478 ;; Parameters:    Size  Location     Type
  3479 ;;  a               1    wreg     unsigned char 
  3480 ;; Auto vars:     Size  Location     Type
  3481 ;;  a               1   41[COMRAM] unsigned char 
  3482 ;;  temp            1   42[COMRAM] unsigned char 
  3483 ;; Return value:  Size  Location     Type
  3484 ;;                  1    wreg      unsigned char 
  3485 ;; Registers used:
  3486 ;;		wreg, status,2, status,0, cstack
  3487 ;; Tracked objects:
  3488 ;;		On entry : 0/0
  3489 ;;		On exit  : 0/0
  3490 ;;		Unchanged: 0/0
  3491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3492 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3493 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3494 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3495 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3496 ;;Total ram usage:        2 bytes
  3497 ;; Hardware stack levels used:    1
  3498 ;; Hardware stack levels required when called:    5
  3499 ;; This function calls:
  3500 ;;		_I2C_Master_Wait
  3501 ;; This function is called by:
  3502 ;;		_main
  3503 ;; This function uses a non-reentrant model
  3504 ;;
  3505                           
  3506                           	psect	text13
  3507  000E42                     __ptext13:
  3508                           	opt stack 0
  3509  000E42                     _I2C_Master_Read:
  3510                           	opt stack 25
  3511                           
  3512                           ;incstack = 0
  3513                           ;I2C_Master_Read@a stored from wreg
  3514  000E42  6E2A               	movwf	I2C_Master_Read@a,c
  3515                           
  3516                           ;I2C.c: 55: unsigned char temp;
  3517                           ;I2C.c: 56: I2C_Master_Wait();
  3518  000E44  EC43  F007         	call	_I2C_Master_Wait	;wreg free
  3519                           
  3520                           ;I2C.c: 57: RCEN = 1;
  3521  000E48  86C5               	bsf	4037,3,c	;volatile
  3522                           
  3523                           ;I2C.c: 58: I2C_Master_Wait();
  3524  000E4A  EC43  F007         	call	_I2C_Master_Wait	;wreg free
  3525                           
  3526                           ;I2C.c: 59: temp = SSPBUF;
  3527  000E4E  CFC9 F02B          	movff	4041,I2C_Master_Read@temp	;volatile
  3528                           
  3529                           ;I2C.c: 60: I2C_Master_Wait();
  3530  000E52  EC43  F007         	call	_I2C_Master_Wait	;wreg free
  3531                           
  3532                           ;I2C.c: 61: ACKDT = (a)?0:1;
  3533  000E56  502A               	movf	I2C_Master_Read@a,w,c
  3534  000E58  A4D8               	btfss	status,2,c
  3535  000E5A  D002               	goto	u2180
  3536  000E5C  8AC5               	bsf	4037,5,c	;volatile
  3537  000E5E  D001               	goto	l2688
  3538  000E60                     u2180:
  3539  000E60  9AC5               	bcf	4037,5,c	;volatile
  3540  000E62                     l2688:
  3541                           
  3542                           ;I2C.c: 62: ACKEN = 1;
  3543  000E62  88C5               	bsf	4037,4,c	;volatile
  3544                           
  3545                           ;I2C.c: 63: return temp;
  3546  000E64  502B               	movf	I2C_Master_Read@temp,w,c
  3547  000E66  0012               	return	
  3548  000E68                     __end_of_I2C_Master_Read:
  3549                           	opt stack 0
  3550                           tblptru	equ	0xFF8
  3551                           tblptrh	equ	0xFF7
  3552                           tblptrl	equ	0xFF6
  3553                           tablat	equ	0xFF5
  3554                           prodh	equ	0xFF4
  3555                           prodl	equ	0xFF3
  3556                           intcon	equ	0xFF2
  3557                           intcon3	equ	0xFF0
  3558                           postinc0	equ	0xFEE
  3559                           wreg	equ	0xFE8
  3560                           indf2	equ	0xFDF
  3561                           postinc2	equ	0xFDE
  3562                           postdec2	equ	0xFDD
  3563                           fsr2h	equ	0xFDA
  3564                           fsr2l	equ	0xFD9
  3565                           status	equ	0xFD8
  3566                           
  3567 ;; *************** function _I2C_Master_Wait *****************
  3568 ;; Defined at:
  3569 ;;		line 24 in file "../I2C.c"
  3570 ;; Parameters:    Size  Location     Type
  3571 ;;		None
  3572 ;; Auto vars:     Size  Location     Type
  3573 ;;		None
  3574 ;; Return value:  Size  Location     Type
  3575 ;;                  1    wreg      void 
  3576 ;; Registers used:
  3577 ;;		wreg, status,2, status,0
  3578 ;; Tracked objects:
  3579 ;;		On entry : 0/0
  3580 ;;		On exit  : 0/0
  3581 ;;		Unchanged: 0/0
  3582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3583 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3584 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3585 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3586 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3587 ;;Total ram usage:        1 bytes
  3588 ;; Hardware stack levels used:    1
  3589 ;; Hardware stack levels required when called:    4
  3590 ;; This function calls:
  3591 ;;		Nothing
  3592 ;; This function is called by:
  3593 ;;		_I2C_Master_Start
  3594 ;;		_I2C_Master_Stop
  3595 ;;		_I2C_Master_Write
  3596 ;;		_I2C_Master_Read
  3597 ;; This function uses a non-reentrant model
  3598 ;;
  3599                           
  3600                           	psect	text14
  3601  000E86                     __ptext14:
  3602                           	opt stack 0
  3603  000E86                     _I2C_Master_Wait:
  3604                           	opt stack 25
  3605  000E86                     l30:
  3606  000E86  B4C7               	btfsc	4039,2,c	;volatile
  3607  000E88  D7FE               	goto	l30
  3608  000E8A  CFC5 F029          	movff	4037,??_I2C_Master_Wait	;volatile
  3609  000E8E  0E1F               	movlw	31
  3610  000E90  1629               	andwf	??_I2C_Master_Wait,f,c
  3611  000E92  B4D8               	btfsc	status,2,c
  3612  000E94  0012               	return	
  3613  000E96  D7F7               	goto	l30
  3614  000E98                     __end_of_I2C_Master_Wait:
  3615                           	opt stack 0
  3616                           tblptru	equ	0xFF8
  3617                           tblptrh	equ	0xFF7
  3618                           tblptrl	equ	0xFF6
  3619                           tablat	equ	0xFF5
  3620                           prodh	equ	0xFF4
  3621                           prodl	equ	0xFF3
  3622                           intcon	equ	0xFF2
  3623                           intcon3	equ	0xFF0
  3624                           postinc0	equ	0xFEE
  3625                           wreg	equ	0xFE8
  3626                           indf2	equ	0xFDF
  3627                           postinc2	equ	0xFDE
  3628                           postdec2	equ	0xFDD
  3629                           fsr2h	equ	0xFDA
  3630                           fsr2l	equ	0xFD9
  3631                           status	equ	0xFD8
  3632                           
  3633 ;; *************** function _I2C_Master_Init *****************
  3634 ;; Defined at:
  3635 ;;		line 13 in file "../I2C.c"
  3636 ;; Parameters:    Size  Location     Type
  3637 ;;  c               4    0[BANK0 ] const unsigned long 
  3638 ;; Auto vars:     Size  Location     Type
  3639 ;;		None
  3640 ;; Return value:  Size  Location     Type
  3641 ;;                  1    wreg      void 
  3642 ;; Registers used:
  3643 ;;		wreg, status,2, status,0, cstack
  3644 ;; Tracked objects:
  3645 ;;		On entry : 0/0
  3646 ;;		On exit  : 0/0
  3647 ;;		Unchanged: 0/0
  3648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3649 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3650 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3651 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3652 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3653 ;;Total ram usage:        8 bytes
  3654 ;; Hardware stack levels used:    1
  3655 ;; Hardware stack levels required when called:    5
  3656 ;; This function calls:
  3657 ;;		___lldiv
  3658 ;; This function is called by:
  3659 ;;		_main
  3660 ;; This function uses a non-reentrant model
  3661 ;;
  3662                           
  3663                           	psect	text15
  3664  000C30                     __ptext15:
  3665                           	opt stack 0
  3666  000C30                     _I2C_Master_Init:
  3667                           	opt stack 25
  3668                           
  3669                           ;I2C.c: 16: SSPSTAT = 0b00000000;
  3670                           
  3671                           ;incstack = 0
  3672  000C30  0E00               	movlw	0
  3673  000C32  6EC7               	movwf	4039,c	;volatile
  3674                           
  3675                           ;I2C.c: 17: SSPCON1 = 0b00101000;
  3676  000C34  0E28               	movlw	40
  3677  000C36  6EC6               	movwf	4038,c	;volatile
  3678                           
  3679                           ;I2C.c: 18: SSPCON2 = 0b00000000;
  3680  000C38  0E00               	movlw	0
  3681  000C3A  6EC5               	movwf	4037,c	;volatile
  3682                           
  3683                           ;I2C.c: 19: SSPADD = (10000000/(4*c))-1;
  3684  000C3C  0E80               	movlw	128
  3685  000C3E  6E29               	movwf	___lldiv@dividend,c
  3686  000C40  0E96               	movlw	150
  3687  000C42  6E2A               	movwf	___lldiv@dividend+1,c
  3688  000C44  0E98               	movlw	152
  3689  000C46  6E2B               	movwf	___lldiv@dividend+2,c
  3690  000C48  0E00               	movlw	0
  3691  000C4A  6E2C               	movwf	___lldiv@dividend+3,c
  3692  000C4C  C080  F084         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  3693  000C50  C081  F085         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  3694  000C54  C082  F086         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  3695  000C58  C083  F087         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  3696  000C5C  0E02               	movlw	2
  3697  000C5E                     u2175:
  3698  000C5E  90D8               	bcf	status,0,c
  3699  000C60  0100               	movlb	0	; () banked
  3700  000C62  3784               	rlcf	??_I2C_Master_Init& (0+255),f,b
  3701  000C64  3785               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  3702  000C66  3786               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  3703  000C68  3787               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  3704  000C6A  2EE8               	decfsz	wreg,f,c
  3705  000C6C  D7F8               	goto	u2175
  3706  000C6E  C084  F02D         	movff	??_I2C_Master_Init,___lldiv@divisor
  3707  000C72  C085  F02E         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  3708  000C76  C086  F02F         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  3709  000C7A  C087  F030         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  3710  000C7E  EC6A  F005         	call	___lldiv	;wreg free
  3711  000C82  0429               	decf	?___lldiv,w,c
  3712  000C84  6EC8               	movwf	4040,c	;volatile
  3713                           
  3714                           ;I2C.c: 20: TRISC3 = 1;
  3715  000C86  8694               	bsf	3988,3,c	;volatile
  3716                           
  3717                           ;I2C.c: 21: TRISC4 = 1;
  3718  000C88  8894               	bsf	3988,4,c	;volatile
  3719  000C8A  0012               	return		;funcret
  3720  000C8C                     __end_of_I2C_Master_Init:
  3721                           	opt stack 0
  3722                           tblptru	equ	0xFF8
  3723                           tblptrh	equ	0xFF7
  3724                           tblptrl	equ	0xFF6
  3725                           tablat	equ	0xFF5
  3726                           prodh	equ	0xFF4
  3727                           prodl	equ	0xFF3
  3728                           intcon	equ	0xFF2
  3729                           intcon3	equ	0xFF0
  3730                           postinc0	equ	0xFEE
  3731                           wreg	equ	0xFE8
  3732                           indf2	equ	0xFDF
  3733                           postinc2	equ	0xFDE
  3734                           postdec2	equ	0xFDD
  3735                           fsr2h	equ	0xFDA
  3736                           fsr2l	equ	0xFD9
  3737                           status	equ	0xFD8
  3738                           
  3739 ;; *************** function ___lldiv *****************
  3740 ;; Defined at:
  3741 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  3742 ;; Parameters:    Size  Location     Type
  3743 ;;  dividend        4   40[COMRAM] unsigned long 
  3744 ;;  divisor         4   44[COMRAM] unsigned long 
  3745 ;; Auto vars:     Size  Location     Type
  3746 ;;  quotient        4   48[COMRAM] unsigned long 
  3747 ;;  counter         1   52[COMRAM] unsigned char 
  3748 ;; Return value:  Size  Location     Type
  3749 ;;                  4   40[COMRAM] unsigned long 
  3750 ;; Registers used:
  3751 ;;		wreg, status,2, status,0
  3752 ;; Tracked objects:
  3753 ;;		On entry : 0/0
  3754 ;;		On exit  : 0/0
  3755 ;;		Unchanged: 0/0
  3756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3757 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3758 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3759 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3760 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3761 ;;Total ram usage:       13 bytes
  3762 ;; Hardware stack levels used:    1
  3763 ;; Hardware stack levels required when called:    4
  3764 ;; This function calls:
  3765 ;;		Nothing
  3766 ;; This function is called by:
  3767 ;;		_I2C_Master_Init
  3768 ;; This function uses a non-reentrant model
  3769 ;;
  3770                           
  3771                           	psect	text16
  3772  000AD4                     __ptext16:
  3773                           	opt stack 0
  3774  000AD4                     ___lldiv:
  3775                           	opt stack 25
  3776                           
  3777                           ;incstack = 0
  3778  000AD4  0E00               	movlw	0
  3779  000AD6  6E31               	movwf	___lldiv@quotient,c
  3780  000AD8  0E00               	movlw	0
  3781  000ADA  6E32               	movwf	___lldiv@quotient+1,c
  3782  000ADC  0E00               	movlw	0
  3783  000ADE  6E33               	movwf	___lldiv@quotient+2,c
  3784  000AE0  0E00               	movlw	0
  3785  000AE2  6E34               	movwf	___lldiv@quotient+3,c
  3786  000AE4  502D               	movf	___lldiv@divisor,w,c
  3787  000AE6  102E               	iorwf	___lldiv@divisor+1,w,c
  3788  000AE8  102F               	iorwf	___lldiv@divisor+2,w,c
  3789  000AEA  1030               	iorwf	___lldiv@divisor+3,w,c
  3790  000AEC  B4D8               	btfsc	status,2,c
  3791  000AEE  D02A               	goto	l776
  3792  000AF0  0E01               	movlw	1
  3793  000AF2  6E35               	movwf	___lldiv@counter,c
  3794  000AF4  D006               	goto	l2608
  3795  000AF6                     l2606:
  3796  000AF6  90D8               	bcf	status,0,c
  3797  000AF8  362D               	rlcf	___lldiv@divisor,f,c
  3798  000AFA  362E               	rlcf	___lldiv@divisor+1,f,c
  3799  000AFC  362F               	rlcf	___lldiv@divisor+2,f,c
  3800  000AFE  3630               	rlcf	___lldiv@divisor+3,f,c
  3801  000B00  2A35               	incf	___lldiv@counter,f,c
  3802  000B02                     l2608:
  3803  000B02  AE30               	btfss	___lldiv@divisor+3,7,c
  3804  000B04  D7F8               	goto	l2606
  3805  000B06                     l2610:
  3806  000B06  90D8               	bcf	status,0,c
  3807  000B08  3631               	rlcf	___lldiv@quotient,f,c
  3808  000B0A  3632               	rlcf	___lldiv@quotient+1,f,c
  3809  000B0C  3633               	rlcf	___lldiv@quotient+2,f,c
  3810  000B0E  3634               	rlcf	___lldiv@quotient+3,f,c
  3811  000B10  502D               	movf	___lldiv@divisor,w,c
  3812  000B12  5C29               	subwf	___lldiv@dividend,w,c
  3813  000B14  502E               	movf	___lldiv@divisor+1,w,c
  3814  000B16  582A               	subwfb	___lldiv@dividend+1,w,c
  3815  000B18  502F               	movf	___lldiv@divisor+2,w,c
  3816  000B1A  582B               	subwfb	___lldiv@dividend+2,w,c
  3817  000B1C  5030               	movf	___lldiv@divisor+3,w,c
  3818  000B1E  582C               	subwfb	___lldiv@dividend+3,w,c
  3819  000B20  A0D8               	btfss	status,0,c
  3820  000B22  D009               	goto	l2618
  3821  000B24  502D               	movf	___lldiv@divisor,w,c
  3822  000B26  5E29               	subwf	___lldiv@dividend,f,c
  3823  000B28  502E               	movf	___lldiv@divisor+1,w,c
  3824  000B2A  5A2A               	subwfb	___lldiv@dividend+1,f,c
  3825  000B2C  502F               	movf	___lldiv@divisor+2,w,c
  3826  000B2E  5A2B               	subwfb	___lldiv@dividend+2,f,c
  3827  000B30  5030               	movf	___lldiv@divisor+3,w,c
  3828  000B32  5A2C               	subwfb	___lldiv@dividend+3,f,c
  3829  000B34  8031               	bsf	___lldiv@quotient,0,c
  3830  000B36                     l2618:
  3831  000B36  90D8               	bcf	status,0,c
  3832  000B38  3230               	rrcf	___lldiv@divisor+3,f,c
  3833  000B3A  322F               	rrcf	___lldiv@divisor+2,f,c
  3834  000B3C  322E               	rrcf	___lldiv@divisor+1,f,c
  3835  000B3E  322D               	rrcf	___lldiv@divisor,f,c
  3836  000B40  2E35               	decfsz	___lldiv@counter,f,c
  3837  000B42  D7E1               	goto	l2610
  3838  000B44                     l776:
  3839  000B44  C031  F029         	movff	___lldiv@quotient,?___lldiv
  3840  000B48  C032  F02A         	movff	___lldiv@quotient+1,?___lldiv+1
  3841  000B4C  C033  F02B         	movff	___lldiv@quotient+2,?___lldiv+2
  3842  000B50  C034  F02C         	movff	___lldiv@quotient+3,?___lldiv+3
  3843  000B54  0012               	return		;funcret
  3844  000B56                     __end_of___lldiv:
  3845                           	opt stack 0
  3846                           tblptru	equ	0xFF8
  3847                           tblptrh	equ	0xFF7
  3848                           tblptrl	equ	0xFF6
  3849                           tablat	equ	0xFF5
  3850                           prodh	equ	0xFF4
  3851                           prodl	equ	0xFF3
  3852                           intcon	equ	0xFF2
  3853                           intcon3	equ	0xFF0
  3854                           postinc0	equ	0xFEE
  3855                           wreg	equ	0xFE8
  3856                           indf2	equ	0xFDF
  3857                           postinc2	equ	0xFDE
  3858                           postdec2	equ	0xFDD
  3859                           fsr2h	equ	0xFDA
  3860                           fsr2l	equ	0xFD9
  3861                           status	equ	0xFD8
  3862                           
  3863 ;; *************** function _lowISR *****************
  3864 ;; Defined at:
  3865 ;;		line 446 in file "../main.c"
  3866 ;; Parameters:    Size  Location     Type
  3867 ;;		None
  3868 ;; Auto vars:     Size  Location     Type
  3869 ;;		None
  3870 ;; Return value:  Size  Location     Type
  3871 ;;                  1    wreg      void 
  3872 ;; Registers used:
  3873 ;;		None
  3874 ;; Tracked objects:
  3875 ;;		On entry : 0/0
  3876 ;;		On exit  : 0/0
  3877 ;;		Unchanged: 0/0
  3878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3879 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3880 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3881 ;;      Temps:         17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3882 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3883 ;;Total ram usage:       17 bytes
  3884 ;; Hardware stack levels used:    1
  3885 ;; Hardware stack levels required when called:    3
  3886 ;; This function calls:
  3887 ;;		Nothing
  3888 ;; This function is called by:
  3889 ;;		Interrupt level 1
  3890 ;; This function uses a non-reentrant model
  3891 ;;
  3892                           
  3893                           	psect	intcodelo
  3894  000018                     __pintcodelo:
  3895                           	opt stack 0
  3896  000018                     _lowISR:
  3897                           	opt stack 24
  3898                           
  3899                           ;incstack = 0
  3900  000018  8057               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  3901  00001A  CFD8 F018          	movff	status,??_lowISR
  3902  00001E  CFE8 F019          	movff	wreg,??_lowISR+1
  3903  000022  CFE0 F01A          	movff	bsr,??_lowISR+2
  3904  000026  CFFA F01B          	movff	pclath,??_lowISR+3
  3905  00002A  CFFB F01C          	movff	pclatu,??_lowISR+4
  3906  00002E  CFE9 F01D          	movff	fsr0l,??_lowISR+5
  3907  000032  CFEA F01E          	movff	fsr0h,??_lowISR+6
  3908  000036  CFE1 F01F          	movff	fsr1l,??_lowISR+7
  3909  00003A  CFE2 F020          	movff	fsr1h,??_lowISR+8
  3910  00003E  CFD9 F021          	movff	fsr2l,??_lowISR+9
  3911  000042  CFDA F022          	movff	fsr2h,??_lowISR+10
  3912  000046  CFF3 F023          	movff	prodl,??_lowISR+11
  3913  00004A  CFF4 F024          	movff	prodh,??_lowISR+12
  3914  00004E  CFF6 F025          	movff	tblptrl,??_lowISR+13
  3915  000052  CFF7 F026          	movff	tblptrh,??_lowISR+14
  3916  000056  CFF8 F027          	movff	tblptru,??_lowISR+15
  3917  00005A  CFF5 F028          	movff	tablat,??_lowISR+16
  3918  00005E  C028  FFF5         	movff	??_lowISR+16,tablat
  3919  000062  C027  FFF8         	movff	??_lowISR+15,tblptru
  3920  000066  C026  FFF7         	movff	??_lowISR+14,tblptrh
  3921  00006A  C025  FFF6         	movff	??_lowISR+13,tblptrl
  3922  00006E  C024  FFF4         	movff	??_lowISR+12,prodh
  3923  000072  C023  FFF3         	movff	??_lowISR+11,prodl
  3924  000076  C022  FFDA         	movff	??_lowISR+10,fsr2h
  3925  00007A  C021  FFD9         	movff	??_lowISR+9,fsr2l
  3926  00007E  C020  FFE2         	movff	??_lowISR+8,fsr1h
  3927  000082  C01F  FFE1         	movff	??_lowISR+7,fsr1l
  3928  000086  C01E  FFEA         	movff	??_lowISR+6,fsr0h
  3929  00008A  C01D  FFE9         	movff	??_lowISR+5,fsr0l
  3930  00008E  C01C  FFFB         	movff	??_lowISR+4,pclatu
  3931  000092  C01B  FFFA         	movff	??_lowISR+3,pclath
  3932  000096  C01A  FFE0         	movff	??_lowISR+2,bsr
  3933  00009A  C019  FFE8         	movff	??_lowISR+1,wreg
  3934  00009E  C018  FFD8         	movff	??_lowISR,status
  3935  0000A2  9057               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  3936  0000A4  0010               	retfie	
  3937  0000A6                     __end_of_lowISR:
  3938                           	opt stack 0
  3939                           pclatu	equ	0xFFB
  3940                           pclath	equ	0xFFA
  3941                           tblptru	equ	0xFF8
  3942                           tblptrh	equ	0xFF7
  3943                           tblptrl	equ	0xFF6
  3944                           tablat	equ	0xFF5
  3945                           prodh	equ	0xFF4
  3946                           prodl	equ	0xFF3
  3947                           intcon	equ	0xFF2
  3948                           intcon3	equ	0xFF0
  3949                           postinc0	equ	0xFEE
  3950                           fsr0h	equ	0xFEA
  3951                           fsr0l	equ	0xFE9
  3952                           wreg	equ	0xFE8
  3953                           fsr1h	equ	0xFE2
  3954                           fsr1l	equ	0xFE1
  3955                           bsr	equ	0xFE0
  3956                           indf2	equ	0xFDF
  3957                           postinc2	equ	0xFDE
  3958                           postdec2	equ	0xFDD
  3959                           fsr2h	equ	0xFDA
  3960                           fsr2l	equ	0xFD9
  3961                           status	equ	0xFD8
  3962                           
  3963 ;; *************** function _highISR *****************
  3964 ;; Defined at:
  3965 ;;		line 324 in file "../main.c"
  3966 ;; Parameters:    Size  Location     Type
  3967 ;;		None
  3968 ;; Auto vars:     Size  Location     Type
  3969 ;;  keypress        1   22[COMRAM] unsigned char 
  3970 ;; Return value:  Size  Location     Type
  3971 ;;                  1    wreg      void 
  3972 ;; Registers used:
  3973 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3974 ;; Tracked objects:
  3975 ;;		On entry : 0/0
  3976 ;;		On exit  : 0/0
  3977 ;;		Unchanged: 0/0
  3978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3979 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3980 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3981 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3982 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3983 ;;Total ram usage:       15 bytes
  3984 ;; Hardware stack levels used:    1
  3985 ;; Hardware stack levels required when called:    2
  3986 ;; This function calls:
  3987 ;;		_stopOperation
  3988 ;;		_switchMenu
  3989 ;; This function is called by:
  3990 ;;		Interrupt level 2
  3991 ;; This function uses a non-reentrant model
  3992 ;;
  3993                           
  3994                           	psect	intcode
  3995  000008                     __pintcode:
  3996                           	opt stack 0
  3997  000008                     _highISR:
  3998                           	opt stack 24
  3999                           
  4000                           ;incstack = 0
  4001  000008  8257               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4002  00000A  ED53  F004         	call	int_func,f	;refresh shadow registers
  4003                           pclatu	equ	0xFFB
  4004                           pclath	equ	0xFFA
  4005                           tblptru	equ	0xFF8
  4006                           tblptrh	equ	0xFF7
  4007                           tblptrl	equ	0xFF6
  4008                           tablat	equ	0xFF5
  4009                           prodh	equ	0xFF4
  4010                           prodl	equ	0xFF3
  4011                           intcon	equ	0xFF2
  4012                           intcon3	equ	0xFF0
  4013                           postinc0	equ	0xFEE
  4014                           fsr0h	equ	0xFEA
  4015                           fsr0l	equ	0xFE9
  4016                           wreg	equ	0xFE8
  4017                           fsr1h	equ	0xFE2
  4018                           fsr1l	equ	0xFE1
  4019                           bsr	equ	0xFE0
  4020                           indf2	equ	0xFDF
  4021                           postinc2	equ	0xFDE
  4022                           postdec2	equ	0xFDD
  4023                           fsr2h	equ	0xFDA
  4024                           fsr2l	equ	0xFD9
  4025                           status	equ	0xFD8
  4026                           
  4027                           	psect	intcode_body
  4028  0008A6                     __pintcode_body:
  4029                           	opt stack 24
  4030  0008A6                     int_func:
  4031                           	opt stack 24
  4032  0008A6  0006               	pop		; remove dummy address from shadow register refresh
  4033  0008A8  CFFA F009          	movff	pclath,??_highISR
  4034  0008AC  CFFB F00A          	movff	pclatu,??_highISR+1
  4035  0008B0  CFE9 F00B          	movff	fsr0l,??_highISR+2
  4036  0008B4  CFEA F00C          	movff	fsr0h,??_highISR+3
  4037  0008B8  CFE1 F00D          	movff	fsr1l,??_highISR+4
  4038  0008BC  CFE2 F00E          	movff	fsr1h,??_highISR+5
  4039  0008C0  CFD9 F00F          	movff	fsr2l,??_highISR+6
  4040  0008C4  CFDA F010          	movff	fsr2h,??_highISR+7
  4041  0008C8  CFF3 F011          	movff	prodl,??_highISR+8
  4042  0008CC  CFF4 F012          	movff	prodh,??_highISR+9
  4043  0008D0  CFF6 F013          	movff	tblptrl,??_highISR+10
  4044  0008D4  CFF7 F014          	movff	tblptrh,??_highISR+11
  4045  0008D8  CFF8 F015          	movff	tblptru,??_highISR+12
  4046  0008DC  CFF5 F016          	movff	tablat,??_highISR+13
  4047                           
  4048                           ;main.c: 325: if (INT1IF){
  4049  0008E0  A0F0               	btfss	intcon3,0,c	;volatile
  4050  0008E2  D049               	goto	i2l2486
  4051                           
  4052                           ;main.c: 326: unsigned char keypress = (PORTB & 0xF0) >> 4;
  4053  0008E4  3881               	swapf	3969,w,c	;volatile
  4054  0008E6  0B0F               	andlw	15
  4055  0008E8  0B0F               	andlw	15
  4056  0008EA  6E17               	movwf	highISR@keypress,c
  4057                           
  4058                           ;main.c: 327: if (keys[keypress] == '*'){
  4059  0008EC  5017               	movf	highISR@keypress,w,c
  4060  0008EE  0D01               	mullw	1
  4061  0008F0  0E5D               	movlw	low _keys
  4062  0008F2  24F3               	addwf	prodl,w,c
  4063  0008F4  6EF6               	movwf	tblptrl,c
  4064  0008F6  0EFE               	movlw	high _keys
  4065  0008F8  20F4               	addwfc	prodh,w,c
  4066  0008FA  6EF7               	movwf	tblptrh,c
  4067  0008FC                     	if	0	;There are less than 3 active tblptr bytes
  4068  0008FC                     	endif
  4069  0008FC  0008               	tblrd		*
  4070  0008FE  50F5               	movf	tablat,w,c
  4071  000900  0A2A               	xorlw	42
  4072  000902  A4D8               	btfss	status,2,c
  4073  000904  D00F               	goto	i2l2472
  4074                           
  4075                           ;main.c: 329: if(screenMode == 2){
  4076  000906  0E02               	movlw	2
  4077  000908  1856               	xorwf	_screenMode,w,c
  4078  00090A  A4D8               	btfss	status,2,c
  4079  00090C  D005               	goto	i2l2468
  4080                           
  4081                           ;main.c: 330: screenMode = 1;
  4082  00090E  0E01               	movlw	1
  4083  000910  6E56               	movwf	_screenMode,c
  4084                           
  4085                           ;main.c: 331: T0CONbits.TMR0ON = 1;
  4086  000912  8ED5               	bsf	4053,7,c	;volatile
  4087                           
  4088                           ;main.c: 332: T1CONbits.TMR1ON = 0;
  4089  000914  90CD               	bcf	4045,0,c	;volatile
  4090                           
  4091                           ;main.c: 333: }
  4092  000916  D02E               	goto	i2l2484
  4093  000918                     i2l2468:
  4094                           
  4095                           ;main.c: 334: else if (screenMode == 0)
  4096  000918  5056               	movf	_screenMode,w,c
  4097  00091A  A4D8               	btfss	status,2,c
  4098  00091C  D02B               	goto	i2l2484
  4099                           
  4100                           ;main.c: 335: screenMode = 2;
  4101  00091E  0E02               	movlw	2
  4102  000920  6E56               	movwf	_screenMode,c
  4103                           
  4104                           ;main.c: 336: }
  4105  000922  D028               	goto	i2l2484
  4106  000924                     i2l2472:
  4107                           
  4108                           ;main.c: 337: else if (screenMode == 1){
  4109  000924  0456               	decf	_screenMode,w,c
  4110  000926  A4D8               	btfss	status,2,c
  4111  000928  D012               	goto	i2l2480
  4112                           
  4113                           ;main.c: 338: if (keys[keypress] == '#'){
  4114  00092A  5017               	movf	highISR@keypress,w,c
  4115  00092C  0D01               	mullw	1
  4116  00092E  0E5D               	movlw	low _keys
  4117  000930  24F3               	addwf	prodl,w,c
  4118  000932  6EF6               	movwf	tblptrl,c
  4119  000934  0EFE               	movlw	high _keys
  4120  000936  20F4               	addwfc	prodh,w,c
  4121  000938  6EF7               	movwf	tblptrh,c
  4122  00093A                     	if	0	;There are less than 3 active tblptr bytes
  4123  00093A                     	endif
  4124  00093A  0008               	tblrd		*
  4125  00093C  50F5               	movf	tablat,w,c
  4126  00093E  0A23               	xorlw	35
  4127  000940  A4D8               	btfss	status,2,c
  4128  000942  D018               	goto	i2l2484
  4129                           
  4130                           ;main.c: 339: screenMode = 10;
  4131  000944  0E0A               	movlw	10
  4132  000946  6E56               	movwf	_screenMode,c
  4133                           
  4134                           ;main.c: 340: stopOperation();
  4135  000948  ECE3  F005         	call	_stopOperation	;wreg free
  4136                           
  4137                           ;main.c: 341: }
  4138                           ;main.c: 342: }
  4139  00094C  D013               	goto	i2l2484
  4140  00094E                     i2l2480:
  4141                           
  4142                           ;main.c: 343: else if (screenMode != 0)
  4143  00094E  5056               	movf	_screenMode,w,c
  4144  000950  B4D8               	btfsc	status,2,c
  4145  000952  D010               	goto	i2l2484
  4146                           
  4147                           ;main.c: 344: switchMenu('4', '6', keys[keypress]);
  4148  000954  0E36               	movlw	54
  4149  000956  6E01               	movwf	switchMenu@right,c
  4150  000958  5017               	movf	highISR@keypress,w,c
  4151  00095A  0D01               	mullw	1
  4152  00095C  0E5D               	movlw	low _keys
  4153  00095E  24F3               	addwf	prodl,w,c
  4154  000960  6EF6               	movwf	tblptrl,c
  4155  000962  0EFE               	movlw	high _keys
  4156  000964  20F4               	addwfc	prodh,w,c
  4157  000966  6EF7               	movwf	tblptrh,c
  4158  000968                     	if	0	;There are less than 3 active tblptr bytes
  4159  000968                     	endif
  4160  000968  0008               	tblrd		*
  4161  00096A  CFF5 F002          	movff	tablat,switchMenu@key
  4162  00096E  0E34               	movlw	52
  4163  000970  ECDA  F006         	call	_switchMenu
  4164  000974                     i2l2484:
  4165                           
  4166                           ;main.c: 346: INT1IF = 0;
  4167  000974  90F0               	bcf	intcon3,0,c	;volatile
  4168  000976                     i2l2486:
  4169                           
  4170                           ;main.c: 347: }
  4171                           ;main.c: 348: if (screenMode == 1 && TMR0IF){
  4172  000976  0456               	decf	_screenMode,w,c
  4173  000978  B4D8               	btfsc	status,2,c
  4174  00097A  A4F2               	btfss	intcon,2,c	;volatile
  4175  00097C  D018               	goto	i2l2514
  4176                           
  4177                           ;main.c: 349: TMR0IF = 0;
  4178  00097E  94F2               	bcf	intcon,2,c	;volatile
  4179                           
  4180                           ;main.c: 350: TMR0 = 55770;
  4181  000980  0ED9               	movlw	217
  4182  000982  6ED7               	movwf	4055,c	;volatile
  4183  000984  0EDA               	movlw	218
  4184  000986  6ED6               	movwf	4054,c	;volatile
  4185                           
  4186                           ;main.c: 351: opTimer++;
  4187  000988  2A4D               	incf	_opTimer,f,c
  4188                           
  4189                           ;main.c: 352: if (opTimer >= 180){
  4190  00098A  0EB3               	movlw	179
  4191  00098C  644D               	cpfsgt	_opTimer,c
  4192  00098E  D004               	goto	i2l2502
  4193                           
  4194                           ;main.c: 353: screenMode = 0;
  4195  000990  0E00               	movlw	0
  4196  000992  6E56               	movwf	_screenMode,c
  4197                           
  4198                           ;main.c: 354: stopOperation();
  4199  000994  ECE3  F005         	call	_stopOperation	;wreg free
  4200  000998                     i2l2502:
  4201                           
  4202                           ;main.c: 355: }
  4203                           ;main.c: 361: if (LATCbits.LC0){
  4204  000998  A08B               	btfss	3979,0,c	;volatile
  4205  00099A  D002               	goto	i2l2506
  4206                           
  4207                           ;main.c: 362: LATCbits.LC0 = 0;;
  4208  00099C  908B               	bcf	3979,0,c	;volatile
  4209                           
  4210                           ;main.c: 363: }
  4211  00099E  D007               	goto	i2l2514
  4212  0009A0                     i2l2506:
  4213                           
  4214                           ;main.c: 364: else {
  4215                           ;main.c: 365: solOnTimer++;
  4216  0009A0  2A52               	incf	_solOnTimer,f,c
  4217                           
  4218                           ;main.c: 366: if (solOnTimer >= 4){
  4219  0009A2  0E03               	movlw	3
  4220  0009A4  6452               	cpfsgt	_solOnTimer,c
  4221  0009A6  D003               	goto	i2l2514
  4222                           
  4223                           ;main.c: 367: solOnTimer = 0;
  4224  0009A8  0E00               	movlw	0
  4225  0009AA  6E52               	movwf	_solOnTimer,c
  4226                           
  4227                           ;main.c: 368: LATCbits.LC0 = 1;;
  4228  0009AC  808B               	bsf	3979,0,c	;volatile
  4229  0009AE                     i2l2514:
  4230                           
  4231                           ;main.c: 369: }
  4232                           ;main.c: 370: }
  4233                           ;main.c: 371: }
  4234                           ;main.c: 372: if (screenMode == 1 && TMR1IF){
  4235  0009AE  0456               	decf	_screenMode,w,c
  4236  0009B0  B4D8               	btfsc	status,2,c
  4237  0009B2  A09E               	btfss	3998,0,c	;volatile
  4238  0009B4  D02F               	goto	i2l299
  4239                           
  4240                           ;main.c: 373: TMR1IF = 0;
  4241  0009B6  909E               	bcf	3998,0,c	;volatile
  4242                           
  4243                           ;main.c: 374: TMR1 = 48035;
  4244  0009B8  0EBB               	movlw	187
  4245  0009BA  6ECF               	movwf	4047,c	;volatile
  4246  0009BC  0EA3               	movlw	163
  4247  0009BE  6ECE               	movwf	4046,c	;volatile
  4248                           
  4249                           ;main.c: 375: if (plat1Left){
  4250  0009C0  5055               	movf	_plat1Left,w,c
  4251  0009C2  B4D8               	btfsc	status,2,c
  4252  0009C4  D027               	goto	i2l299
  4253                           
  4254                           ;main.c: 376: if (step1 == 1){
  4255  0009C6  0453               	decf	_step1,w,c
  4256  0009C8  A4D8               	btfss	status,2,c
  4257  0009CA  D002               	goto	i2l2526
  4258                           
  4259                           ;main.c: 377: LATAbits.LA5 = 1;;
  4260  0009CC  8A89               	bsf	3977,5,c	;volatile
  4261                           
  4262                           ;main.c: 378: LATAbits.LA4 = 0;;
  4263  0009CE  9889               	bcf	3977,4,c	;volatile
  4264  0009D0                     i2l2526:
  4265                           
  4266                           ;main.c: 379: }
  4267                           ;main.c: 380: if (step1 == 2){
  4268  0009D0  0E02               	movlw	2
  4269  0009D2  1853               	xorwf	_step1,w,c
  4270  0009D4  A4D8               	btfss	status,2,c
  4271  0009D6  D002               	goto	i2l2530
  4272                           
  4273                           ;main.c: 381: LATAbits.LA2 = 0;;
  4274  0009D8  9489               	bcf	3977,2,c	;volatile
  4275                           
  4276                           ;main.c: 382: LATAbits.LA3 = 1;;
  4277  0009DA  8689               	bsf	3977,3,c	;volatile
  4278  0009DC                     i2l2530:
  4279                           
  4280                           ;main.c: 383: }
  4281                           ;main.c: 384: if (step1 == 3){
  4282  0009DC  0E03               	movlw	3
  4283  0009DE  1853               	xorwf	_step1,w,c
  4284  0009E0  A4D8               	btfss	status,2,c
  4285  0009E2  D002               	goto	i2l2534
  4286                           
  4287                           ;main.c: 385: LATAbits.LA5 = 0;;
  4288  0009E4  9A89               	bcf	3977,5,c	;volatile
  4289                           
  4290                           ;main.c: 386: LATAbits.LA4 = 1;;
  4291  0009E6  8889               	bsf	3977,4,c	;volatile
  4292  0009E8                     i2l2534:
  4293                           
  4294                           ;main.c: 387: }
  4295                           ;main.c: 388: if (step1 == 4){
  4296  0009E8  0E04               	movlw	4
  4297  0009EA  1853               	xorwf	_step1,w,c
  4298  0009EC  A4D8               	btfss	status,2,c
  4299  0009EE  D002               	goto	i2l2538
  4300                           
  4301                           ;main.c: 389: LATAbits.LA2 = 1;;
  4302  0009F0  8489               	bsf	3977,2,c	;volatile
  4303                           
  4304                           ;main.c: 390: LATAbits.LA3 = 0;;
  4305  0009F2  9689               	bcf	3977,3,c	;volatile
  4306  0009F4                     i2l2538:
  4307                           
  4308                           ;main.c: 391: }
  4309                           ;main.c: 392: plat1Left++;
  4310  0009F4  2A55               	incf	_plat1Left,f,c
  4311                           
  4312                           ;main.c: 393: if (plat1Left>=200){
  4313  0009F6  0EC7               	movlw	199
  4314  0009F8  6455               	cpfsgt	_plat1Left,c
  4315  0009FA  D005               	goto	i2l2546
  4316                           
  4317                           ;main.c: 394: plat1Left = 0;
  4318  0009FC  0E00               	movlw	0
  4319  0009FE  6E55               	movwf	_plat1Left,c
  4320                           
  4321                           ;main.c: 395: T1CONbits.TMR1ON = 0;
  4322  000A00  90CD               	bcf	4045,0,c	;volatile
  4323                           
  4324                           ;main.c: 396: step1 = 0;
  4325  000A02  0E00               	movlw	0
  4326  000A04  D004               	goto	L1
  4327  000A06                     i2l2546:
  4328                           
  4329                           ;main.c: 398: else if (step1>=4)
  4330  000A06  0E03               	movlw	3
  4331  000A08  6453               	cpfsgt	_step1,c
  4332  000A0A  D003               	goto	i2l2550
  4333                           
  4334                           ;main.c: 399: step1 = 1;
  4335  000A0C  0E01               	movlw	1
  4336  000A0E                     L1:
  4337  000A0E  6E53               	movwf	_step1,c
  4338  000A10  D001               	goto	i2l299
  4339  000A12                     i2l2550:
  4340                           
  4341                           ;main.c: 400: else
  4342                           ;main.c: 401: step1++;
  4343  000A12  2A53               	incf	_step1,f,c
  4344  000A14                     i2l299:
  4345  000A14  C016  FFF5         	movff	??_highISR+13,tablat
  4346  000A18  C015  FFF8         	movff	??_highISR+12,tblptru
  4347  000A1C  C014  FFF7         	movff	??_highISR+11,tblptrh
  4348  000A20  C013  FFF6         	movff	??_highISR+10,tblptrl
  4349  000A24  C012  FFF4         	movff	??_highISR+9,prodh
  4350  000A28  C011  FFF3         	movff	??_highISR+8,prodl
  4351  000A2C  C010  FFDA         	movff	??_highISR+7,fsr2h
  4352  000A30  C00F  FFD9         	movff	??_highISR+6,fsr2l
  4353  000A34  C00E  FFE2         	movff	??_highISR+5,fsr1h
  4354  000A38  C00D  FFE1         	movff	??_highISR+4,fsr1l
  4355  000A3C  C00C  FFEA         	movff	??_highISR+3,fsr0h
  4356  000A40  C00B  FFE9         	movff	??_highISR+2,fsr0l
  4357  000A44  C00A  FFFB         	movff	??_highISR+1,pclatu
  4358  000A48  C009  FFFA         	movff	??_highISR,pclath
  4359  000A4C  9257               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4360  000A4E  0011               	retfie		f
  4361  000A50                     __end_of_highISR:
  4362                           	opt stack 0
  4363                           pclatu	equ	0xFFB
  4364                           pclath	equ	0xFFA
  4365                           tblptru	equ	0xFF8
  4366                           tblptrh	equ	0xFF7
  4367                           tblptrl	equ	0xFF6
  4368                           tablat	equ	0xFF5
  4369                           prodh	equ	0xFF4
  4370                           prodl	equ	0xFF3
  4371                           intcon	equ	0xFF2
  4372                           intcon3	equ	0xFF0
  4373                           postinc0	equ	0xFEE
  4374                           fsr0h	equ	0xFEA
  4375                           fsr0l	equ	0xFE9
  4376                           wreg	equ	0xFE8
  4377                           fsr1h	equ	0xFE2
  4378                           fsr1l	equ	0xFE1
  4379                           bsr	equ	0xFE0
  4380                           indf2	equ	0xFDF
  4381                           postinc2	equ	0xFDE
  4382                           postdec2	equ	0xFDD
  4383                           fsr2h	equ	0xFDA
  4384                           fsr2l	equ	0xFD9
  4385                           status	equ	0xFD8
  4386                           
  4387 ;; *************** function _switchMenu *****************
  4388 ;; Defined at:
  4389 ;;		line 269 in file "../main.c"
  4390 ;; Parameters:    Size  Location     Type
  4391 ;;  left            1    wreg     unsigned char 
  4392 ;;  right           1    0[COMRAM] unsigned char 
  4393 ;;  key             1    1[COMRAM] unsigned char 
  4394 ;; Auto vars:     Size  Location     Type
  4395 ;;  left            1    2[COMRAM] unsigned char 
  4396 ;; Return value:  Size  Location     Type
  4397 ;;                  1    wreg      void 
  4398 ;; Registers used:
  4399 ;;		wreg, status,2, status,0
  4400 ;; Tracked objects:
  4401 ;;		On entry : 0/0
  4402 ;;		On exit  : 0/0
  4403 ;;		Unchanged: 0/0
  4404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4405 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4406 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4407 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4408 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4409 ;;Total ram usage:        3 bytes
  4410 ;; Hardware stack levels used:    1
  4411 ;; This function calls:
  4412 ;;		Nothing
  4413 ;; This function is called by:
  4414 ;;		_highISR
  4415 ;; This function uses a non-reentrant model
  4416 ;;
  4417                           
  4418                           	psect	text19
  4419  000DB4                     __ptext19:
  4420                           	opt stack 0
  4421  000DB4                     _switchMenu:
  4422                           	opt stack 25
  4423                           
  4424                           ;incstack = 0
  4425                           ;switchMenu@left stored from wreg
  4426  000DB4  6E03               	movwf	switchMenu@left,c
  4427                           
  4428                           ;main.c: 270: if (key == right){
  4429  000DB6  5001               	movf	switchMenu@right,w,c
  4430  000DB8  1802               	xorwf	switchMenu@key,w,c
  4431  000DBA  A4D8               	btfss	status,2,c
  4432  000DBC  D009               	goto	i2l2224
  4433                           
  4434                           ;main.c: 271: if (screenMode == 2)
  4435  000DBE  0E02               	movlw	2
  4436  000DC0  1856               	xorwf	_screenMode,w,c
  4437  000DC2  A4D8               	btfss	status,2,c
  4438  000DC4  D003               	goto	i2l2222
  4439                           
  4440                           ;main.c: 272: screenMode = 9;
  4441  000DC6  0E09               	movlw	9
  4442  000DC8  6E56               	movwf	_screenMode,c
  4443  000DCA  0012               	return	
  4444  000DCC                     i2l2222:
  4445                           
  4446                           ;main.c: 273: else
  4447                           ;main.c: 274: screenMode--;
  4448  000DCC  0656               	decf	_screenMode,f,c
  4449                           
  4450                           ;main.c: 275: }
  4451  000DCE  0012               	return	
  4452  000DD0                     i2l2224:
  4453                           
  4454                           ;main.c: 276: else if (key == left){
  4455  000DD0  5003               	movf	switchMenu@left,w,c
  4456  000DD2  1802               	xorwf	switchMenu@key,w,c
  4457  000DD4  A4D8               	btfss	status,2,c
  4458  000DD6  0012               	return	
  4459                           
  4460                           ;main.c: 277: if (screenMode == 9)
  4461  000DD8  0E09               	movlw	9
  4462  000DDA  1856               	xorwf	_screenMode,w,c
  4463  000DDC  A4D8               	btfss	status,2,c
  4464  000DDE  D003               	goto	i2l2230
  4465                           
  4466                           ;main.c: 278: screenMode = 2;
  4467  000DE0  0E02               	movlw	2
  4468  000DE2  6E56               	movwf	_screenMode,c
  4469  000DE4  0012               	return	
  4470  000DE6                     i2l2230:
  4471                           
  4472                           ;main.c: 279: else
  4473                           ;main.c: 280: screenMode++;
  4474  000DE6  2A56               	incf	_screenMode,f,c
  4475  000DE8  0012               	return	
  4476  000DEA                     __end_of_switchMenu:
  4477                           	opt stack 0
  4478                           pclatu	equ	0xFFB
  4479                           pclath	equ	0xFFA
  4480                           tblptru	equ	0xFF8
  4481                           tblptrh	equ	0xFF7
  4482                           tblptrl	equ	0xFF6
  4483                           tablat	equ	0xFF5
  4484                           prodh	equ	0xFF4
  4485                           prodl	equ	0xFF3
  4486                           intcon	equ	0xFF2
  4487                           intcon3	equ	0xFF0
  4488                           postinc0	equ	0xFEE
  4489                           fsr0h	equ	0xFEA
  4490                           fsr0l	equ	0xFE9
  4491                           wreg	equ	0xFE8
  4492                           fsr1h	equ	0xFE2
  4493                           fsr1l	equ	0xFE1
  4494                           bsr	equ	0xFE0
  4495                           indf2	equ	0xFDF
  4496                           postinc2	equ	0xFDE
  4497                           postdec2	equ	0xFDD
  4498                           fsr2h	equ	0xFDA
  4499                           fsr2l	equ	0xFD9
  4500                           status	equ	0xFD8
  4501                           
  4502 ;; *************** function _stopOperation *****************
  4503 ;; Defined at:
  4504 ;;		line 292 in file "../main.c"
  4505 ;; Parameters:    Size  Location     Type
  4506 ;;		None
  4507 ;; Auto vars:     Size  Location     Type
  4508 ;;		None
  4509 ;; Return value:  Size  Location     Type
  4510 ;;                  1    wreg      void 
  4511 ;; Registers used:
  4512 ;;		wreg, status,2, status,0, cstack
  4513 ;; Tracked objects:
  4514 ;;		On entry : 0/0
  4515 ;;		On exit  : 0/0
  4516 ;;		Unchanged: 0/0
  4517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4519 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4521 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4522 ;;Total ram usage:        0 bytes
  4523 ;; Hardware stack levels used:    1
  4524 ;; Hardware stack levels required when called:    1
  4525 ;; This function calls:
  4526 ;;		___awdiv
  4527 ;;		___awmod
  4528 ;; This function is called by:
  4529 ;;		_highISR
  4530 ;; This function uses a non-reentrant model
  4531 ;;
  4532                           
  4533                           	psect	text20
  4534  000BC6                     __ptext20:
  4535                           	opt stack 0
  4536  000BC6                     _stopOperation:
  4537                           	opt stack 24
  4538                           
  4539                           ;main.c: 293: T0CONbits.TMR0ON = 0;
  4540                           
  4541                           ;incstack = 0
  4542  000BC6  9ED5               	bcf	4053,7,c	;volatile
  4543                           
  4544                           ;main.c: 294: T1CONbits.TMR1ON = 0;
  4545  000BC8  90CD               	bcf	4045,0,c	;volatile
  4546                           
  4547                           ;main.c: 295: TMR0 = 55770;
  4548  000BCA  0ED9               	movlw	217
  4549  000BCC  6ED7               	movwf	4055,c	;volatile
  4550  000BCE  0EDA               	movlw	218
  4551  000BD0  6ED6               	movwf	4054,c	;volatile
  4552                           
  4553                           ;main.c: 296: TMR1 = 48035;
  4554  000BD2  0EBB               	movlw	187
  4555  000BD4  6ECF               	movwf	4047,c	;volatile
  4556  000BD6  0EA3               	movlw	163
  4557  000BD8  6ECE               	movwf	4046,c	;volatile
  4558                           
  4559                           ;main.c: 305: min = opTimer / 60;
  4560  000BDA  C04D  F001         	movff	_opTimer,___awdiv@dividend
  4561  000BDE  6A02               	clrf	___awdiv@dividend+1,c
  4562  000BE0  0E00               	movlw	0
  4563  000BE2  6E04               	movwf	___awdiv@divisor+1,c
  4564  000BE4  0E3C               	movlw	60
  4565  000BE6  6E03               	movwf	___awdiv@divisor,c
  4566  000BE8  EC28  F005         	call	___awdiv	;wreg free
  4567  000BEC  5001               	movf	?___awdiv,w,c
  4568  000BEE  6E47               	movwf	_min,c
  4569                           
  4570                           ;main.c: 306: sec = opTimer % 60;
  4571  000BF0  C04D  F001         	movff	_opTimer,___awmod@dividend
  4572  000BF4  6A02               	clrf	___awmod@dividend+1,c
  4573  000BF6  0E00               	movlw	0
  4574  000BF8  6E04               	movwf	___awmod@divisor+1,c
  4575  000BFA  0E3C               	movlw	60
  4576  000BFC  6E03               	movwf	___awmod@divisor,c
  4577  000BFE  ECAB  F005         	call	___awmod	;wreg free
  4578  000C02  5001               	movf	?___awmod,w,c
  4579  000C04  6E51               	movwf	_sec,c
  4580                           
  4581                           ;main.c: 307: opTimer = 0;
  4582  000C06  0E00               	movlw	0
  4583  000C08  6E4D               	movwf	_opTimer,c
  4584                           
  4585                           ;main.c: 308: solOnTimer = 0;
  4586  000C0A  0E00               	movlw	0
  4587  000C0C  6E52               	movwf	_solOnTimer,c
  4588                           
  4589                           ;main.c: 309: doneTimer = 0;
  4590  000C0E  0E00               	movlw	0
  4591  000C10  6E41               	movwf	_doneTimer+1,c
  4592  000C12  0E00               	movlw	0
  4593  000C14  6E40               	movwf	_doneTimer,c
  4594                           
  4595                           ;main.c: 310: LATAbits.LA2 = 0;;
  4596  000C16  9489               	bcf	3977,2,c	;volatile
  4597                           
  4598                           ;main.c: 311: LATAbits.LA3 = 0;;
  4599  000C18  9689               	bcf	3977,3,c	;volatile
  4600                           
  4601                           ;main.c: 312: LATAbits.LA4 = 0;;
  4602  000C1A  9889               	bcf	3977,4,c	;volatile
  4603                           
  4604                           ;main.c: 313: LATAbits.LA5 = 0;;
  4605  000C1C  9A89               	bcf	3977,5,c	;volatile
  4606                           
  4607                           ;main.c: 314: LATBbits.LB0 = 0;;
  4608  000C1E  908A               	bcf	3978,0,c	;volatile
  4609                           
  4610                           ;main.c: 315: LATBbits.LB2 = 0;;
  4611  000C20  948A               	bcf	3978,2,c	;volatile
  4612                           
  4613                           ;main.c: 316: LATBbits.LB3 = 0;;
  4614  000C22  968A               	bcf	3978,3,c	;volatile
  4615                           
  4616                           ;main.c: 317: LATAbits.LA6 = 0;;
  4617  000C24  9C89               	bcf	3977,6,c	;volatile
  4618                           
  4619                           ;main.c: 318: LATCbits.LC1= 0;;
  4620  000C26  928B               	bcf	3979,1,c	;volatile
  4621                           
  4622                           ;main.c: 319: LATAbits.LA7 = 0;;
  4623  000C28  9E89               	bcf	3977,7,c	;volatile
  4624                           
  4625                           ;main.c: 320: LATCbits.LC2 = 0;;
  4626  000C2A  948B               	bcf	3979,2,c	;volatile
  4627                           
  4628                           ;main.c: 321: LATCbits.LC0 = 0;;
  4629  000C2C  908B               	bcf	3979,0,c	;volatile
  4630  000C2E  0012               	return		;funcret
  4631  000C30                     __end_of_stopOperation:
  4632                           	opt stack 0
  4633                           pclatu	equ	0xFFB
  4634                           pclath	equ	0xFFA
  4635                           tblptru	equ	0xFF8
  4636                           tblptrh	equ	0xFF7
  4637                           tblptrl	equ	0xFF6
  4638                           tablat	equ	0xFF5
  4639                           prodh	equ	0xFF4
  4640                           prodl	equ	0xFF3
  4641                           intcon	equ	0xFF2
  4642                           intcon3	equ	0xFF0
  4643                           postinc0	equ	0xFEE
  4644                           fsr0h	equ	0xFEA
  4645                           fsr0l	equ	0xFE9
  4646                           wreg	equ	0xFE8
  4647                           fsr1h	equ	0xFE2
  4648                           fsr1l	equ	0xFE1
  4649                           bsr	equ	0xFE0
  4650                           indf2	equ	0xFDF
  4651                           postinc2	equ	0xFDE
  4652                           postdec2	equ	0xFDD
  4653                           fsr2h	equ	0xFDA
  4654                           fsr2l	equ	0xFD9
  4655                           status	equ	0xFD8
  4656                           
  4657 ;; *************** function ___awmod *****************
  4658 ;; Defined at:
  4659 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  4660 ;; Parameters:    Size  Location     Type
  4661 ;;  dividend        2    0[COMRAM] int 
  4662 ;;  divisor         2    2[COMRAM] int 
  4663 ;; Auto vars:     Size  Location     Type
  4664 ;;  sign            1    5[COMRAM] unsigned char 
  4665 ;;  counter         1    4[COMRAM] unsigned char 
  4666 ;; Return value:  Size  Location     Type
  4667 ;;                  2    0[COMRAM] int 
  4668 ;; Registers used:
  4669 ;;		wreg, status,2, status,0
  4670 ;; Tracked objects:
  4671 ;;		On entry : 0/0
  4672 ;;		On exit  : 0/0
  4673 ;;		Unchanged: 0/0
  4674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4675 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4676 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4677 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4678 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4679 ;;Total ram usage:        6 bytes
  4680 ;; Hardware stack levels used:    1
  4681 ;; This function calls:
  4682 ;;		Nothing
  4683 ;; This function is called by:
  4684 ;;		_stopOperation
  4685 ;; This function uses a non-reentrant model
  4686 ;;
  4687                           
  4688                           	psect	text21
  4689  000B56                     __ptext21:
  4690                           	opt stack 0
  4691  000B56                     ___awmod:
  4692                           	opt stack 24
  4693                           
  4694                           ;incstack = 0
  4695  000B56  0E00               	movlw	0
  4696  000B58  6E06               	movwf	___awmod@sign,c
  4697  000B5A  AE02               	btfss	___awmod@dividend+1,7,c
  4698  000B5C  D006               	goto	i2l1986
  4699  000B5E  6C01               	negf	___awmod@dividend,c
  4700  000B60  1E02               	comf	___awmod@dividend+1,f,c
  4701  000B62  B0D8               	btfsc	status,0,c
  4702  000B64  2A02               	incf	___awmod@dividend+1,f,c
  4703  000B66  0E01               	movlw	1
  4704  000B68  6E06               	movwf	___awmod@sign,c
  4705  000B6A                     i2l1986:
  4706  000B6A  AE04               	btfss	___awmod@divisor+1,7,c
  4707  000B6C  D004               	goto	i2l1990
  4708  000B6E  6C03               	negf	___awmod@divisor,c
  4709  000B70  1E04               	comf	___awmod@divisor+1,f,c
  4710  000B72  B0D8               	btfsc	status,0,c
  4711  000B74  2A04               	incf	___awmod@divisor+1,f,c
  4712  000B76                     i2l1990:
  4713  000B76  5003               	movf	___awmod@divisor,w,c
  4714  000B78  1004               	iorwf	___awmod@divisor+1,w,c
  4715  000B7A  B4D8               	btfsc	status,2,c
  4716  000B7C  D018               	goto	i2l2006
  4717  000B7E  0E01               	movlw	1
  4718  000B80  6E05               	movwf	___awmod@counter,c
  4719  000B82  D004               	goto	i2l1996
  4720  000B84                     i2l1994:
  4721  000B84  90D8               	bcf	status,0,c
  4722  000B86  3603               	rlcf	___awmod@divisor,f,c
  4723  000B88  3604               	rlcf	___awmod@divisor+1,f,c
  4724  000B8A  2A05               	incf	___awmod@counter,f,c
  4725  000B8C                     i2l1996:
  4726  000B8C  AE04               	btfss	___awmod@divisor+1,7,c
  4727  000B8E  D7FA               	goto	i2l1994
  4728  000B90                     i2l1998:
  4729  000B90  5003               	movf	___awmod@divisor,w,c
  4730  000B92  5C01               	subwf	___awmod@dividend,w,c
  4731  000B94  5004               	movf	___awmod@divisor+1,w,c
  4732  000B96  5802               	subwfb	___awmod@dividend+1,w,c
  4733  000B98  A0D8               	btfss	status,0,c
  4734  000B9A  D004               	goto	i2l2002
  4735  000B9C  5003               	movf	___awmod@divisor,w,c
  4736  000B9E  5E01               	subwf	___awmod@dividend,f,c
  4737  000BA0  5004               	movf	___awmod@divisor+1,w,c
  4738  000BA2  5A02               	subwfb	___awmod@dividend+1,f,c
  4739  000BA4                     i2l2002:
  4740  000BA4  90D8               	bcf	status,0,c
  4741  000BA6  3204               	rrcf	___awmod@divisor+1,f,c
  4742  000BA8  3203               	rrcf	___awmod@divisor,f,c
  4743  000BAA  2E05               	decfsz	___awmod@counter,f,c
  4744  000BAC  D7F1               	goto	i2l1998
  4745  000BAE                     i2l2006:
  4746  000BAE  5006               	movf	___awmod@sign,w,c
  4747  000BB0  B4D8               	btfsc	status,2,c
  4748  000BB2  D004               	goto	i2l2010
  4749  000BB4  6C01               	negf	___awmod@dividend,c
  4750  000BB6  1E02               	comf	___awmod@dividend+1,f,c
  4751  000BB8  B0D8               	btfsc	status,0,c
  4752  000BBA  2A02               	incf	___awmod@dividend+1,f,c
  4753  000BBC                     i2l2010:
  4754  000BBC  C001  F001         	movff	___awmod@dividend,?___awmod
  4755  000BC0  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  4756  000BC4  0012               	return	
  4757  000BC6                     __end_of___awmod:
  4758                           	opt stack 0
  4759                           pclatu	equ	0xFFB
  4760                           pclath	equ	0xFFA
  4761                           tblptru	equ	0xFF8
  4762                           tblptrh	equ	0xFF7
  4763                           tblptrl	equ	0xFF6
  4764                           tablat	equ	0xFF5
  4765                           prodh	equ	0xFF4
  4766                           prodl	equ	0xFF3
  4767                           intcon	equ	0xFF2
  4768                           intcon3	equ	0xFF0
  4769                           postinc0	equ	0xFEE
  4770                           fsr0h	equ	0xFEA
  4771                           fsr0l	equ	0xFE9
  4772                           wreg	equ	0xFE8
  4773                           fsr1h	equ	0xFE2
  4774                           fsr1l	equ	0xFE1
  4775                           bsr	equ	0xFE0
  4776                           indf2	equ	0xFDF
  4777                           postinc2	equ	0xFDE
  4778                           postdec2	equ	0xFDD
  4779                           fsr2h	equ	0xFDA
  4780                           fsr2l	equ	0xFD9
  4781                           status	equ	0xFD8
  4782                           
  4783 ;; *************** function ___awdiv *****************
  4784 ;; Defined at:
  4785 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  4786 ;; Parameters:    Size  Location     Type
  4787 ;;  dividend        2    0[COMRAM] int 
  4788 ;;  divisor         2    2[COMRAM] int 
  4789 ;; Auto vars:     Size  Location     Type
  4790 ;;  quotient        2    6[COMRAM] int 
  4791 ;;  sign            1    5[COMRAM] unsigned char 
  4792 ;;  counter         1    4[COMRAM] unsigned char 
  4793 ;; Return value:  Size  Location     Type
  4794 ;;                  2    0[COMRAM] int 
  4795 ;; Registers used:
  4796 ;;		wreg, status,2, status,0
  4797 ;; Tracked objects:
  4798 ;;		On entry : 0/0
  4799 ;;		On exit  : 0/0
  4800 ;;		Unchanged: 0/0
  4801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4802 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4803 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4804 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4805 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4806 ;;Total ram usage:        8 bytes
  4807 ;; Hardware stack levels used:    1
  4808 ;; This function calls:
  4809 ;;		Nothing
  4810 ;; This function is called by:
  4811 ;;		_stopOperation
  4812 ;; This function uses a non-reentrant model
  4813 ;;
  4814                           
  4815                           	psect	text22
  4816  000A50                     __ptext22:
  4817                           	opt stack 0
  4818  000A50                     ___awdiv:
  4819                           	opt stack 24
  4820                           
  4821                           ;incstack = 0
  4822  000A50  0E00               	movlw	0
  4823  000A52  6E06               	movwf	___awdiv@sign,c
  4824  000A54  AE04               	btfss	___awdiv@divisor+1,7,c
  4825  000A56  D006               	goto	i2l1942
  4826  000A58  6C03               	negf	___awdiv@divisor,c
  4827  000A5A  1E04               	comf	___awdiv@divisor+1,f,c
  4828  000A5C  B0D8               	btfsc	status,0,c
  4829  000A5E  2A04               	incf	___awdiv@divisor+1,f,c
  4830  000A60  0E01               	movlw	1
  4831  000A62  6E06               	movwf	___awdiv@sign,c
  4832  000A64                     i2l1942:
  4833  000A64  AE02               	btfss	___awdiv@dividend+1,7,c
  4834  000A66  D006               	goto	i2l1948
  4835  000A68  6C01               	negf	___awdiv@dividend,c
  4836  000A6A  1E02               	comf	___awdiv@dividend+1,f,c
  4837  000A6C  B0D8               	btfsc	status,0,c
  4838  000A6E  2A02               	incf	___awdiv@dividend+1,f,c
  4839  000A70  0E01               	movlw	1
  4840  000A72  1A06               	xorwf	___awdiv@sign,f,c
  4841  000A74                     i2l1948:
  4842  000A74  0E00               	movlw	0
  4843  000A76  6E08               	movwf	___awdiv@quotient+1,c
  4844  000A78  0E00               	movlw	0
  4845  000A7A  6E07               	movwf	___awdiv@quotient,c
  4846  000A7C  5003               	movf	___awdiv@divisor,w,c
  4847  000A7E  1004               	iorwf	___awdiv@divisor+1,w,c
  4848  000A80  B4D8               	btfsc	status,2,c
  4849  000A82  D01C               	goto	i2l1970
  4850  000A84  0E01               	movlw	1
  4851  000A86  6E05               	movwf	___awdiv@counter,c
  4852  000A88  D004               	goto	i2l1956
  4853  000A8A                     i2l1954:
  4854  000A8A  90D8               	bcf	status,0,c
  4855  000A8C  3603               	rlcf	___awdiv@divisor,f,c
  4856  000A8E  3604               	rlcf	___awdiv@divisor+1,f,c
  4857  000A90  2A05               	incf	___awdiv@counter,f,c
  4858  000A92                     i2l1956:
  4859  000A92  AE04               	btfss	___awdiv@divisor+1,7,c
  4860  000A94  D7FA               	goto	i2l1954
  4861  000A96                     i2l1958:
  4862  000A96  90D8               	bcf	status,0,c
  4863  000A98  3607               	rlcf	___awdiv@quotient,f,c
  4864  000A9A  3608               	rlcf	___awdiv@quotient+1,f,c
  4865  000A9C  5003               	movf	___awdiv@divisor,w,c
  4866  000A9E  5C01               	subwf	___awdiv@dividend,w,c
  4867  000AA0  5004               	movf	___awdiv@divisor+1,w,c
  4868  000AA2  5802               	subwfb	___awdiv@dividend+1,w,c
  4869  000AA4  A0D8               	btfss	status,0,c
  4870  000AA6  D005               	goto	i2l1966
  4871  000AA8  5003               	movf	___awdiv@divisor,w,c
  4872  000AAA  5E01               	subwf	___awdiv@dividend,f,c
  4873  000AAC  5004               	movf	___awdiv@divisor+1,w,c
  4874  000AAE  5A02               	subwfb	___awdiv@dividend+1,f,c
  4875  000AB0  8007               	bsf	___awdiv@quotient,0,c
  4876  000AB2                     i2l1966:
  4877  000AB2  90D8               	bcf	status,0,c
  4878  000AB4  3204               	rrcf	___awdiv@divisor+1,f,c
  4879  000AB6  3203               	rrcf	___awdiv@divisor,f,c
  4880  000AB8  2E05               	decfsz	___awdiv@counter,f,c
  4881  000ABA  D7ED               	goto	i2l1958
  4882  000ABC                     i2l1970:
  4883  000ABC  5006               	movf	___awdiv@sign,w,c
  4884  000ABE  B4D8               	btfsc	status,2,c
  4885  000AC0  D004               	goto	i2l1974
  4886  000AC2  6C07               	negf	___awdiv@quotient,c
  4887  000AC4  1E08               	comf	___awdiv@quotient+1,f,c
  4888  000AC6  B0D8               	btfsc	status,0,c
  4889  000AC8  2A08               	incf	___awdiv@quotient+1,f,c
  4890  000ACA                     i2l1974:
  4891  000ACA  C007  F001         	movff	___awdiv@quotient,?___awdiv
  4892  000ACE  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  4893  000AD2  0012               	return	
  4894  000AD4                     __end_of___awdiv:
  4895                           	opt stack 0
  4896                           pclatu	equ	0xFFB
  4897                           pclath	equ	0xFFA
  4898                           tblptru	equ	0xFF8
  4899                           tblptrh	equ	0xFF7
  4900                           tblptrl	equ	0xFF6
  4901                           tablat	equ	0xFF5
  4902                           prodh	equ	0xFF4
  4903                           prodl	equ	0xFF3
  4904                           intcon	equ	0xFF2
  4905                           intcon3	equ	0xFF0
  4906                           postinc0	equ	0xFEE
  4907                           fsr0h	equ	0xFEA
  4908                           fsr0l	equ	0xFE9
  4909                           wreg	equ	0xFE8
  4910                           fsr1h	equ	0xFE2
  4911                           fsr1l	equ	0xFE1
  4912                           bsr	equ	0xFE0
  4913                           indf2	equ	0xFDF
  4914                           postinc2	equ	0xFDE
  4915                           postdec2	equ	0xFDD
  4916                           fsr2h	equ	0xFDA
  4917                           fsr2l	equ	0xFD9
  4918                           status	equ	0xFD8
  4919                           pclatu	equ	0xFFB
  4920                           pclath	equ	0xFFA
  4921                           tblptru	equ	0xFF8
  4922                           tblptrh	equ	0xFF7
  4923                           tblptrl	equ	0xFF6
  4924                           tablat	equ	0xFF5
  4925                           prodh	equ	0xFF4
  4926                           prodl	equ	0xFF3
  4927                           intcon	equ	0xFF2
  4928                           intcon3	equ	0xFF0
  4929                           postinc0	equ	0xFEE
  4930                           fsr0h	equ	0xFEA
  4931                           fsr0l	equ	0xFE9
  4932                           wreg	equ	0xFE8
  4933                           fsr1h	equ	0xFE2
  4934                           fsr1l	equ	0xFE1
  4935                           bsr	equ	0xFE0
  4936                           indf2	equ	0xFDF
  4937                           postinc2	equ	0xFDE
  4938                           postdec2	equ	0xFDD
  4939                           fsr2h	equ	0xFDA
  4940                           fsr2l	equ	0xFD9
  4941                           status	equ	0xFD8
  4942                           
  4943                           	psect	rparam
  4944  0000                     pclatu	equ	0xFFB
  4945                           pclath	equ	0xFFA
  4946                           tblptru	equ	0xFF8
  4947                           tblptrh	equ	0xFF7
  4948                           tblptrl	equ	0xFF6
  4949                           tablat	equ	0xFF5
  4950                           prodh	equ	0xFF4
  4951                           prodl	equ	0xFF3
  4952                           intcon	equ	0xFF2
  4953                           intcon3	equ	0xFF0
  4954                           postinc0	equ	0xFEE
  4955                           fsr0h	equ	0xFEA
  4956                           fsr0l	equ	0xFE9
  4957                           wreg	equ	0xFE8
  4958                           fsr1h	equ	0xFE2
  4959                           fsr1l	equ	0xFE1
  4960                           bsr	equ	0xFE0
  4961                           indf2	equ	0xFDF
  4962                           postinc2	equ	0xFDE
  4963                           postdec2	equ	0xFDD
  4964                           fsr2h	equ	0xFDA
  4965                           fsr2l	equ	0xFD9
  4966                           status	equ	0xFD8
  4967                           
  4968                           	psect	temp
  4969  000057                     btemp:
  4970                           	opt stack 0
  4971  000057                     	ds	1
  4972  0000                     int$flags	set	btemp
  4973                           pclatu	equ	0xFFB
  4974                           pclath	equ	0xFFA
  4975                           tblptru	equ	0xFF8
  4976                           tblptrh	equ	0xFF7
  4977                           tblptrl	equ	0xFF6
  4978                           tablat	equ	0xFF5
  4979                           prodh	equ	0xFF4
  4980                           prodl	equ	0xFF3
  4981                           intcon	equ	0xFF2
  4982                           intcon3	equ	0xFF0
  4983                           postinc0	equ	0xFEE
  4984                           fsr0h	equ	0xFEA
  4985                           fsr0l	equ	0xFE9
  4986                           wreg	equ	0xFE8
  4987                           fsr1h	equ	0xFE2
  4988                           fsr1l	equ	0xFE1
  4989                           bsr	equ	0xFE0
  4990                           indf2	equ	0xFDF
  4991                           postinc2	equ	0xFDE
  4992                           postdec2	equ	0xFDD
  4993                           fsr2h	equ	0xFDA
  4994                           fsr2l	equ	0xFD9
  4995                           status	equ	0xFD8


Data Sizes:
    Strings     383
    Constant    35
    Data        2
    BSS         28
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     56      86
    BANK0           128     22      22
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 25
		 -> STR_23(CODE[17]), STR_22(CODE[17]), STR_21(CODE[23]), STR_20(CODE[23]), 
		 -> STR_19(CODE[21]), STR_18(CODE[17]), STR_17(CODE[21]), STR_16(CODE[17]), 
		 -> STR_15(CODE[21]), STR_14(CODE[17]), STR_13(CODE[19]), STR_12(CODE[17]), 
		 -> STR_11(CODE[19]), STR_10(CODE[17]), STR_9(CODE[25]), STR_8(CODE[17]), 
		 -> STR_7(CODE[17]), STR_6(CODE[17]), STR_5(CODE[17]), STR_4(CODE[17]), 
		 -> STR_3(CODE[17]), STR_2(CODE[17]), STR_1(CODE[17]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _I2C_Master_Init->___lldiv

Critical Paths under _lowISR in COMRAM

    None.

Critical Paths under _highISR in COMRAM

    _stopOperation->___awdiv

Critical Paths under _main in BANK0

    _main->_printf

Critical Paths under _lowISR in BANK0

    None.

Critical Paths under _highISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _lowISR in BANK1

    None.

Critical Paths under _highISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _lowISR in BANK2

    None.

Critical Paths under _highISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _lowISR in BANK3

    None.

Critical Paths under _highISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _lowISR in BANK4

    None.

Critical Paths under _highISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _lowISR in BANK5

    None.

Critical Paths under _highISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _lowISR in BANK6

    None.

Critical Paths under _highISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _lowISR in BANK7

    None.

Critical Paths under _highISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _lowISR in BANK8

    None.

Critical Paths under _highISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _lowISR in BANK9

    None.

Critical Paths under _highISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _lowISR in BANK10

    None.

Critical Paths under _highISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _lowISR in BANK11

    None.

Critical Paths under _highISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _lowISR in BANK12

    None.

Critical Paths under _highISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _lowISR in BANK13

    None.

Critical Paths under _highISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _lowISR in BANK14

    None.

Critical Paths under _highISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _lowISR in BANK15

    None.

Critical Paths under _highISR in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    6092
                                             18 BANK0      4     4      0
                    _I2C_Master_Init
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              31    23      8    4777
                                             52 COMRAM     4     4      0
                                              0 BANK0     18    10      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0     135
                                             42 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             40 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     386
                                             40 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     386
                                             47 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     549
                                             40 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                             43 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0     135
                                             42 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0     113
                                             40 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Write                                     2     0      2     262
                                             41 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Read                                      2     2      0      45
                                             41 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Wait                                      1     1      0       0
                                             40 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     503
                                              0 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     395
                                             40 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _lowISR                                              17    17      0       0
                                             23 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _highISR                                             15    15      0    1135
                                              8 COMRAM    15    15      0
                      _stopOperation
                         _switchMenu
 ---------------------------------------------------------------------------------
 (6) _switchMenu                                           3     1      2     216
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (6) _stopOperation                                        0     0      0     852
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (7) ___awmod                                              6     2      4     424
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (7) ___awdiv                                              8     4      4     428
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _I2C_Master_Read
     _I2C_Master_Wait
   _I2C_Master_Start
     _I2C_Master_Wait
   _I2C_Master_Stop
     _I2C_Master_Wait
   _I2C_Master_Write
     _I2C_Master_Wait
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
       _lcdNibble

 _lowISR (ROOT)

 _highISR (ROOT)
   _stopOperation
     ___awdiv
     ___awmod
   _switchMenu

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     16      16       5       17.2%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     38      56       1       68.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      6C      34        0.0%
DATA                 0      0      6C       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sat Feb 25 03:38:02 2017

                       l30 0E86               ___awdiv@sign 0006                         bsr 000FE0  
      ___wmul@multiplicand 002B                __CFG_BORV$3 000000               __CFG_CP0$OFF 000000  
             __CFG_CP1$OFF 000000               __CFG_CP2$OFF 000000               __CFG_CP3$OFF 000000  
              __CFG_OSC$HS 000000                        l206 0122                        l231 02E2  
                      l240 03A8                        l225 0256                        l234 0324  
                      l228 02A0                        l237 0366                        l248 04BC  
                      l384 0620                        l829 0CD4                        l839 0DAA  
                      l776 0B44                        _GIE 007F97               __CFG_CPB$OFF 000000  
                      _PEN 007E2A               __CFG_CPD$OFF 000000                        _SEN 007E28  
                      _min 0047                        _sec 0051               ___awmod@sign 0006  
                      prod 000FF3                        wreg 000FE8               __CFG_LVP$OFF 000000  
             __CFG_WDT$OFF 000000                       l3000 042A                       l3012 04B2  
                     l3006 044A                       l3026 050C                       l2610 0B06  
                     l2606 0AF6                       l2630 0CAA                       l2710 0524  
                     l2608 0B02                       l2640 0CCA                       l2632 0CAE  
                     l2720 0554                       l2618 0B36                       l2650 0D88  
                     l2810 0790                       l2714 0538                       l2628 0CA2  
                     l2652 0D8C                       l2812 079C                       l2820 07C8  
                     l2804 0774                       l2716 054A                       l2590 0E7E  
                     l2822 07CE                       l2830 0862                       l2750 0658  
                     l2734 05E8                       l2726 0584                       l2656 0DA0  
                     l2648 0D80                       l2824 0816                       l2832 0874  
                     l2816 07B6                       l2920 0214                       l2904 01CE  
                     l2834 087C                       l2770 06B6                       l2754 0674  
                     l2738 05EE                       l2930 024E                       l2906 01D8  
                     l2922 021A                       l2756 067A                       l2836 0888  
                     l2940 0296                       l2924 0222                       l2950 02D8  
                     l2688 0E62                       l2792 071E                       l2768 06B0  
                     l2784 06EC                       l2960 031A                       l2786 06FE  
                     l2970 035C                       l2874 0158                       l2796 0752  
                     l2980 039E                       l2892 01A4                       l2798 075C  
                     l2990 03E0                       l2886 0182                       l2878 0162  
                     l2992 03EA                       l2896 01AE                       l2996 0420  
                     _ADFM 007E07                       STR_1 FFDD                       STR_2 FFEE  
                     STR_3 FFBB                       STR_4 FF44                       STR_5 FFCC  
                     STR_6 FF88                       STR_7 FF66                       STR_8 FFAA  
                     STR_9 FE80                       _LATA 000F89                       _LATB 000F8A  
                     _LATC 000F8B                       _LATD 000F8C                       _LATE 000F8D  
                     u2180 0E60                       u2175 0C5E                       u2707 0CFE  
                     u2717 0D1E                       u2727 0D26                       u2647 0172  
                     u2657 01BE                       u2667 04F8                       _PEIE 007F96  
                     u2677 0D32                       u2687 0D66                       u2697 0CF6  
                     _RCEN 007E2B                       _TMR0 000FD6                       _TMR1 000FCE  
                     _main 00AA                       _keys FE5D                       _numC 004B  
                     _time 0039                       fsr0h 000FEA                       fsr1h 000FE2  
                     fsr2h 000FDA                       fsr0l 000FE9                       indf2 000FDF  
                     fsr1l 000FE1                       fsr2l 000FD9                       btemp 0057  
                     prodh 000FF4                       prodl 000FF3                       start 00A6  
          highISR@keypress 0017              __CFG_IESO$OFF 000000              __CFG_MCLRE$ON 000000  
             ___param_bank 000000           ?_I2C_Master_Init 0080           ?_I2C_Master_Read 0001  
         ?_I2C_Master_Wait 0001           ?_I2C_Master_Stop 0001                      ?_main 0001  
                    _ACKEN 007E2C                      _ACKDT 007E2D            __end_of___awdiv 0AD4  
                    STR_10 FF55                      STR_11 FEDC                      STR_12 FF11  
                    STR_20 FE99                      STR_13 FEDC                      STR_21 FEB0  
                    STR_22 FF99                      STR_14 FF33                      STR_23 FF00  
                    STR_15 FEC7                      STR_16 FF22                      STR_24 FEEF  
                    STR_17 FEC7                      STR_18 FF77                      STR_19 FEC7  
          __end_of___awmod 0BC6            __end_of___lldiv 0B56                      _T0CON 000FD5  
          ___awdiv@divisor 0003                      _T1CON 000FCD            __end_of___lwdiv 0CDE  
          __end_of___lwmod 0DB4                      i2l299 0A14            ___awdiv@counter 0005  
                    _PORTB 000F81                      _TRISA 000F92                      _TRISB 000F93  
                    _TRISC 000F94                      _TRISD 000F95                      _TRISE 000F96  
            __CFG_PWRT$OFF 000000              __CFG_WRT0$OFF 000000              __CFG_WRT1$OFF 000000  
            __CFG_WRT2$OFF 000000              __CFG_WRT3$OFF 000000            __end_of_highISR 0A50  
          __end_of_lcdInst 0EB0             __CFG_EBTR0$OFF 000000             __CFG_FCMEN$OFF 000000  
           __CFG_EBTR1$OFF 000000             __CFG_EBTR2$OFF 000000             __CFG_EBTR3$OFF 000000  
   __size_of_stopOperation 006A              __CFG_WRTB$OFF 000000              __CFG_WRTC$OFF 000000  
            __CFG_WRTD$OFF 000000            __end_of_initLCD 0D72             __CFG_EBTRB$OFF 000000  
          __end_of_dpowers FE78                      _numAA 0049                      _num9V 0048  
          __end_of_isdigit 0E86                      _step1 0053                      _step2 0054  
                    _putch 0E98                      main@i 0095                      pclath 000FFA  
                    tablat 000FF5                      status 000FD8             __CFG_PBADEN$ON 000000  
          __initialization 0DEA               __end_of_main 0516               __end_of_keys FE6E  
                   ??_main 0092              __activetblptr 000002          ?_I2C_Master_Start 0001  
        ?_I2C_Master_Write 002A         ??_I2C_Master_Start 002A                     _ADCON0 000FC2  
                   _ADCON1 000FC1         ??_I2C_Master_Write 002C           ___awdiv@dividend 0001  
                   ?_putch 0001                     _INT1IE 007F83                     _INT1IF 007F80  
                   i2l2010 0BBC                     i2l2002 0BA4                     i2l2006 0BAE  
                   i2l2230 0DE6                     i2l2222 0DCC                     i2l2224 0DD0  
                   i2l2502 0998                     i2l2530 09DC                     i2l2506 09A0  
                   i2l2514 09AE                     i2l2550 0A12                     i2l2534 09E8  
                   i2l2526 09D0                     i2l2480 094E                     i2l2472 0924  
                   i2l2546 0A06                     i2l2538 09F4                     i2l2484 0974  
                   i2l2468 0918                     i2l1942 0A64                     i2l2486 0976  
                   i2l1954 0A8A                     i2l1970 0ABC                     i2l1956 0A92  
                   i2l1948 0A74                     i2l1974 0ACA                     i2l1966 0AB2  
                   i2l1958 0A96                     i2l1990 0B76                     i2l1994 0B84  
                   i2l1986 0B6A                     i2l1996 0B8C                     i2l1998 0B90  
                   _TMR0IE 007F95                     _TMR0IF 007F92                     _TMR1IE 007CE8  
                   _TMR1IF 007CF0                     _SSPADD 000FC8                     _TRISC3 007CA3  
                   _TRISC4 007CA4                     _SSPBUF 000FC9             __CFG_XINST$OFF 000000  
            _stopOperation 0BC6                     ___wmul 0E1C                  ??___awdiv 0005  
           __CFG_STVREN$ON 000000                  ??___awmod 0005                  ??___lldiv 0031  
                ??___lwdiv 002D                  ??___lwmod 0034                     _count7 0042  
                   _countC 0045                     _lowISR 0018                     clear_0 0E08  
         ___awdiv@quotient 0007            ___awmod@divisor 0003                  ??_highISR 0009  
          ___awmod@counter 0005                  ??_lcdInst 002B                     _printf 0516  
                ??_initLCD 002C               __pdataCOMRAM 0055                  ??_isdigit 0029  
             __mediumconst FE5C                     tblptrh 000FF7                     tblptrl 000FF6  
                   tblptru 000FF8            switchMenu@right 0001                 __accesstop 0080  
  __end_of__initialization 0E0E              ___rparam_used 000001             ?_stopOperation 0001  
           __pcstackCOMRAM 0001              __end_of_putch 0EA4         __size_of_lcdNibble 004E  
                  ??_putch 002B                    ?___wmul 0029                    ?_lowISR 0001  
                  ?_printf 0080                    _SSPCON1 000FC6                    _SSPCON2 000FC5  
                  _SSPSTAT 000FC7                 _countDrain 0046            ??_stopOperation 0009  
        __end_of_lcdNibble 0D2C                    __Hparam 0000                    __Lparam 0000  
                  ___awdiv 0A50                    ___awmod 0B56                    ___lldiv 0AD4  
          __size_of___wmul 0026                    ___lwdiv 0C8C                    ___lwmod 0D72  
                  __pcinit 0DEA            __size_of_lowISR 008E                 _plat1Right 004E  
                  __ramtop 1000                 _plat2Right 0050                    _highISR 0008  
                  _lcdInst 0EA4                    __ptext0 00AA                    __ptext1 0516  
                  __ptext2 0E98                    __ptext3 0E68                    __ptext4 0E1C  
                  __ptext5 0D72                    __ptext6 0C8C                    __ptext7 0D2C  
                  __ptext8 0EA4                    __ptext9 0CDE            __size_of_printf 0390  
                _T0CONbits 000FD5                    _countAA 0044                    _count9V 0043  
                  _initLCD 0D2C          __end_of_hexpowers FE80                  _T1CONbits 000FCD  
                  _dpowers FE6E                    _isdigit 0E68                    _opTimer 004D  
         ___awmod@dividend 0001                    _numBats 004A   __size_of_I2C_Master_Init 005C  
 __size_of_I2C_Master_Read 0026   __size_of_I2C_Master_Wait 0012   __size_of_I2C_Master_Stop 0008  
           __pintcode_body 08A6       end_of_initialization 0E0E              __Lmediumconst FE5C  
                  int_func 08A6                 _screenMode 0056  __size_of_I2C_Master_Start 0008  
__size_of_I2C_Master_Write 000A            ___lldiv@divisor 002D            ___lldiv@counter 0035  
                  printf@c 0091                    printf@f 0080           I2C_Master_Init@c 0080  
         I2C_Master_Read@a 002A                    postdec2 000FDD                 _solOnTimer 0052  
                  postinc0 000FEE                    postinc2 000FDE                printf@width 008F  
               _switchMenu 0DB4             __end_of___wmul 0E42              __pidataCOMRAM 0ECA  
           __end_of_lowISR 00A6             __end_of_printf 08A6        start_initialization 0DEA  
        ??_I2C_Master_Init 0084          ??_I2C_Master_Read 002A          ??_I2C_Master_Wait 0029  
        ??_I2C_Master_Stop 002A                   ??___wmul 002D           __CFG_LPT1OSC$OFF 000000  
                 ??_lowISR 0018             switchMenu@left 0003                   ??_printf 0035  
              __pbssCOMRAM 0039              __pcstackBANK0 0080           _I2C_Master_Start 0EC2  
         _I2C_Master_Write 0EB0           ___lwdiv@dividend 0029          __CFG_CCP2MX$PORTC 000000  
              ?_switchMenu 0001                  __pintcode 0008              __pmediumconst FE5C  
                _lcdNibble 0CDE                   ?___awdiv 0001                   ?___awmod 0001  
                 ?___lldiv 0029                   ?___lwdiv 0029                   ?___lwmod 0030  
              __pintcodelo 0018                  _doneTimer 0040                   ?_highISR 0001  
                 ?_lcdInst 0001                   ?_initLCD 0001                   ?_isdigit 0001  
                _hexpowers FE78           ___lwdiv@quotient 002E                  _plat1Left 0055  
                _plat2Left 004F             __size_of_putch 000C             ___wmul@product 002D  
                 _LATAbits 000F89                   _LATBbits 000F8A                   _LATCbits 000F8B  
                 _LATDbits 000F8C      __end_of_stopOperation 0C30           __CFG_WDTPS$32768 000000  
               ?_lcdNibble 0001                 _ADCON0bits 000FC2                  main@i_548 0094  
        ___wmul@multiplier 0029              lcdNibble@data 002A                 printf@flag 008E  
            lcdNibble@temp 0029                 printf@prec 008B        __size_of_switchMenu 0036  
      I2C_Master_Read@temp 002B                   __Hrparam 0000                   __Lrparam 0000  
       __CFG_BOREN$SBORDIS 000000              switchMenu@key 0002           __size_of___awdiv 0084  
         __size_of___awmod 0070           __size_of___lldiv 0082           __size_of___lwdiv 0052  
         __size_of___lwmod 0042                _isdigit$915 002A           __size_of_highISR 0A48  
         __size_of_lcdInst 000C            _I2C_Master_Init 0C30            _I2C_Master_Read 0E42  
         __size_of_initLCD 0046            _I2C_Master_Wait 0E86            _I2C_Master_Stop 0EBA  
         __size_of_isdigit 001E            ___lwdiv@divisor 002B            ___lwdiv@counter 002D  
                 __ptext10 0EB0                   __ptext11 0EBA                   __ptext20 0BC6  
                 __ptext12 0EC2                   __ptext21 0B56                   __ptext13 0E42  
                 __ptext22 0A50                   __ptext14 0E86                   __ptext15 0C30  
                 __ptext16 0AD4                   __ptext19 0DB4              __size_of_main 046C  
                 _numDrain 004C                ??_lcdNibble 0029                   int$flags 0057  
                printf@idx 0088                  printf@val 008C                  putch@data 002B  
 __end_of_I2C_Master_Start 0ECA   __end_of_I2C_Master_Write 0EBA                 _INTCONbits 000FF2  
                 isdigit@c 002B                   intlevel1 0000                   intlevel2 0000  
         ___lwmod@dividend 0030           ___lldiv@dividend 0029               ??_switchMenu 0003  
                 printf@ap 0089    __end_of_I2C_Master_Init 0C8C    __end_of_I2C_Master_Read 0E68  
  __end_of_I2C_Master_Wait 0E98    __end_of_I2C_Master_Stop 0EC2                lcdInst@data 002B  
         ___lldiv@quotient 0031          I2C_Master_Write@d 002A            ___lwmod@divisor 0032  
          ___lwmod@counter 0034         __end_of_switchMenu 0DEA  
