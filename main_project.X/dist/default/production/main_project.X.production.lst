

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Mon Feb 27 00:11:15 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    40                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    55                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    56                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    57  0000                     
    58                           ; Version 1.40
    59                           ; Generated 01/12/2016 GMT
    60                           ; 
    61                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    62                           ; All rights reserved.
    63                           ; 
    64                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    65                           ; 
    66                           ; Redistribution and use in source and binary forms, with or without modification, are
    67                           ; permitted provided that the following conditions are met:
    68                           ; 
    69                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    70                           ;        conditions and the following disclaimer.
    71                           ; 
    72                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    73                           ;        of conditions and the following disclaimer in the documentation and/or other
    74                           ;        materials provided with the distribution.
    75                           ; 
    76                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    77                           ;        software without specific prior written permission.
    78                           ; 
    79                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    80                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    81                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    82                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    83                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    84                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    85                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    86                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    87                           ; 
    88                           ; 
    89                           ; Code-generator required, PIC18F4620 Definitions
    90                           ; 
    91                           ; SFR Addresses
    92  0000                     
    93                           	psect	idataCOMRAM
    94  001BC6                     __pidataCOMRAM:
    95                           	opt stack 0
    96                           
    97                           ;initializer for _solOnTimer
    98  001BC6  04                 	db	4
    99                           
   100                           	psect	idataBANK0
   101  001BC7                     __pidataBANK0:
   102                           	opt stack 0
   103                           
   104                           ;initializer for _screenMode
   105  001BC7  02                 	db	2
   106                           
   107                           	psect	mediumconst
   108  00FE46                     __pmediumconst:
   109                           	opt stack 0
   110  00FE46  00                 	db	0
   111  00FE47                     _keys:
   112                           	opt stack 0
   113  00FE47  31                 	db	49
   114  00FE48  32                 	db	50
   115  00FE49  33                 	db	51
   116  00FE4A  41                 	db	65
   117  00FE4B  34                 	db	52
   118  00FE4C  35                 	db	53
   119  00FE4D  36                 	db	54
   120  00FE4E  42                 	db	66
   121  00FE4F  37                 	db	55
   122  00FE50  38                 	db	56
   123  00FE51  39                 	db	57
   124  00FE52  43                 	db	67
   125  00FE53  2A                 	db	42
   126  00FE54  30                 	db	48
   127  00FE55  23                 	db	35
   128  00FE56  44                 	db	68
   129  00FE57  00                 	db	0
   130  00FE58                     __end_of_keys:
   131                           	opt stack 0
   132  00FE58                     _dpowers:
   133                           	opt stack 0
   134  00FE58  0001               	dw	1
   135  00FE5A  000A               	dw	10
   136  00FE5C  0064               	dw	100
   137  00FE5E  03E8               	dw	1000
   138  00FE60  2710               	dw	10000
   139  00FE62                     __end_of_dpowers:
   140                           	opt stack 0
   141  00FE62                     _hexpowers:
   142                           	opt stack 0
   143  00FE62  0001               	dw	1
   144  00FE64  0010               	dw	16
   145  00FE66  0100               	dw	256
   146  00FE68  1000               	dw	4096
   147  00FE6A                     __end_of_hexpowers:
   148                           	opt stack 0
   149  0000                     _TMR0	set	4054
   150  0000                     _TMR1	set	4046
   151  0000                     _ADCON0	set	4034
   152  0000                     _ADCON0bits	set	4034
   153  0000                     _ADCON1	set	4033
   154  0000                     _ADCON2	set	4032
   155  0000                     _ADRESH	set	4036
   156  0000                     _ADRESL	set	4035
   157  0000                     _INTCONbits	set	4082
   158  0000                     _LATA	set	3977
   159  0000                     _LATAbits	set	3977
   160  0000                     _LATB	set	3978
   161  0000                     _LATBbits	set	3978
   162  0000                     _LATC	set	3979
   163  0000                     _LATCbits	set	3979
   164  0000                     _LATD	set	3980
   165  0000                     _LATDbits	set	3980
   166  0000                     _LATE	set	3981
   167  0000                     _LATEbits	set	3981
   168  0000                     _PORTB	set	3969
   169  0000                     _SSPADD	set	4040
   170  0000                     _SSPBUF	set	4041
   171  0000                     _SSPCON1	set	4038
   172  0000                     _SSPCON2	set	4037
   173  0000                     _SSPSTAT	set	4039
   174  0000                     _T0CON	set	4053
   175  0000                     _T0CONbits	set	4053
   176  0000                     _T1CON	set	4045
   177  0000                     _T1CONbits	set	4045
   178  0000                     _TRISA	set	3986
   179  0000                     _TRISB	set	3987
   180  0000                     _TRISC	set	3988
   181  0000                     _TRISD	set	3989
   182  0000                     _TRISE	set	3990
   183  0000                     _ACKDT	set	32301
   184  0000                     _ACKEN	set	32300
   185  0000                     _GIE	set	32663
   186  0000                     _INT1IE	set	32643
   187  0000                     _INT1IF	set	32640
   188  0000                     _PEIE	set	32662
   189  0000                     _PEN	set	32298
   190  0000                     _RCEN	set	32299
   191  0000                     _SEN	set	32296
   192  0000                     _TMR0IE	set	32661
   193  0000                     _TMR0IF	set	32658
   194  0000                     _TMR1IE	set	31976
   195  0000                     _TMR1IF	set	31984
   196  0000                     _TRISC3	set	31907
   197  0000                     _TRISC4	set	31908
   198  00FE6A                     STR_8:
   199  00FE6A  25                 	db	37
   200  00FE6B  30                 	db	48	;'0'
   201  00FE6C  32                 	db	50	;'2'
   202  00FE6D  64                 	db	100	;'d'
   203  00FE6E  3A                 	db	58	;':'
   204  00FE6F  25                 	db	37
   205  00FE70  30                 	db	48	;'0'
   206  00FE71  32                 	db	50	;'2'
   207  00FE72  64                 	db	100	;'d'
   208  00FE73  20                 	db	32
   209  00FE74  20                 	db	32
   210  00FE75  20                 	db	32
   211  00FE76  20                 	db	32
   212  00FE77  20                 	db	32
   213  00FE78  20                 	db	32
   214  00FE79  20                 	db	32
   215  00FE7A  20                 	db	32
   216  00FE7B  20                 	db	32
   217  00FE7C  20                 	db	32
   218  00FE7D  20                 	db	32
   219  00FE7E  20                 	db	32
   220  00FE7F  20                 	db	32
   221  00FE80  20                 	db	32
   222  00FE81  20                 	db	32
   223  00FE82  00                 	db	0
   224  00FE83                     STR_19:
   225  00FE83  44                 	db	68	;'D'
   226  00FE84  41                 	db	65	;'A'
   227  00FE85  54                 	db	84	;'T'
   228  00FE86  45                 	db	69	;'E'
   229  00FE87  3A                 	db	58	;':'
   230  00FE88  20                 	db	32
   231  00FE89  25                 	db	37
   232  00FE8A  30                 	db	48	;'0'
   233  00FE8B  32                 	db	50	;'2'
   234  00FE8C  78                 	db	120	;'x'
   235  00FE8D  2F                 	db	47
   236  00FE8E  25                 	db	37
   237  00FE8F  30                 	db	48	;'0'
   238  00FE90  32                 	db	50	;'2'
   239  00FE91  78                 	db	120	;'x'
   240  00FE92  2F                 	db	47
   241  00FE93  25                 	db	37
   242  00FE94  30                 	db	48	;'0'
   243  00FE95  32                 	db	50	;'2'
   244  00FE96  78                 	db	120	;'x'
   245  00FE97  20                 	db	32
   246  00FE98  20                 	db	32
   247  00FE99  00                 	db	0
   248  00FE9A                     STR_20:
   249  00FE9A  54                 	db	84	;'T'
   250  00FE9B  49                 	db	73	;'I'
   251  00FE9C  4D                 	db	77	;'M'
   252  00FE9D  45                 	db	69	;'E'
   253  00FE9E  3A                 	db	58	;':'
   254  00FE9F  20                 	db	32
   255  00FEA0  25                 	db	37
   256  00FEA1  30                 	db	48	;'0'
   257  00FEA2  32                 	db	50	;'2'
   258  00FEA3  78                 	db	120	;'x'
   259  00FEA4  3A                 	db	58	;':'
   260  00FEA5  25                 	db	37
   261  00FEA6  30                 	db	48	;'0'
   262  00FEA7  32                 	db	50	;'2'
   263  00FEA8  78                 	db	120	;'x'
   264  00FEA9  3A                 	db	58	;':'
   265  00FEAA  25                 	db	37
   266  00FEAB  30                 	db	48	;'0'
   267  00FEAC  32                 	db	50	;'2'
   268  00FEAD  78                 	db	120	;'x'
   269  00FEAE  20                 	db	32
   270  00FEAF  20                 	db	32
   271  00FEB0  00                 	db	0
   272  00FEB1                     STR_14:
   273  00FEB1  42                 	db	66	;'B'
   274  00FEB2  41                 	db	65	;'A'
   275  00FEB3  54                 	db	84	;'T'
   276  00FEB4  54                 	db	84	;'T'
   277  00FEB5  45                 	db	69	;'E'
   278  00FEB6  52                 	db	82	;'R'
   279  00FEB7  49                 	db	73	;'I'
   280  00FEB8  45                 	db	69	;'E'
   281  00FEB9  53                 	db	83	;'S'
   282  00FEBA  3A                 	db	58	;':'
   283  00FEBB  20                 	db	32
   284  00FEBC  25                 	db	37
   285  00FEBD  30                 	db	48	;'0'
   286  00FEBE  32                 	db	50	;'2'
   287  00FEBF  64                 	db	100	;'d'
   288  00FEC0  20                 	db	32
   289  00FEC1  20                 	db	32
   290  00FEC2  20                 	db	32
   291  00FEC3  20                 	db	32
   292  00FEC4  20                 	db	32
   293  00FEC5  00                 	db	0
   294  00FEC6                     STR_24:
   295  00FEC6  52                 	db	82	;'R'
   296  00FEC7  55                 	db	85	;'U'
   297  00FEC8  4E                 	db	78	;'N'
   298  00FEC9  4E                 	db	78	;'N'
   299  00FECA  49                 	db	73	;'I'
   300  00FECB  4E                 	db	78	;'N'
   301  00FECC  47                 	db	71	;'G'
   302  00FECD  2E                 	db	46
   303  00FECE  2E                 	db	46
   304  00FECF  2E                 	db	46
   305  00FED0  20                 	db	32
   306  00FED1  25                 	db	37
   307  00FED2  30                 	db	48	;'0'
   308  00FED3  32                 	db	50	;'2'
   309  00FED4  64                 	db	100	;'d'
   310  00FED5  3A                 	db	58	;':'
   311  00FED6  25                 	db	37
   312  00FED7  30                 	db	48	;'0'
   313  00FED8  32                 	db	50	;'2'
   314  00FED9  64                 	db	100	;'d'
   315  00FEDA  00                 	db	0
   316  00FEDB                     STR_10:
   317  00FEDB  42                 	db	66	;'B'
   318  00FEDC  41                 	db	65	;'A'
   319  00FEDD  54                 	db	84	;'T'
   320  00FEDE  54                 	db	84	;'T'
   321  00FEDF  45                 	db	69	;'E'
   322  00FEE0  52                 	db	82	;'R'
   323  00FEE1  49                 	db	73	;'I'
   324  00FEE2  45                 	db	69	;'E'
   325  00FEE3  53                 	db	83	;'S'
   326  00FEE4  3A                 	db	58	;':'
   327  00FEE5  20                 	db	32
   328  00FEE6  25                 	db	37
   329  00FEE7  30                 	db	48	;'0'
   330  00FEE8  32                 	db	50	;'2'
   331  00FEE9  64                 	db	100	;'d'
   332  00FEEA  20                 	db	32
   333  00FEEB  20                 	db	32
   334  00FEEC  20                 	db	32
   335  00FEED  00                 	db	0
   336  00FEEE                     STR_25:
   337  00FEEE  30                 	db	48	;'0'
   338  00FEEF  31                 	db	49	;'1'
   339  00FEF0  32                 	db	50	;'2'
   340  00FEF1  33                 	db	51	;'3'
   341  00FEF2  34                 	db	52	;'4'
   342  00FEF3  35                 	db	53	;'5'
   343  00FEF4  36                 	db	54	;'6'
   344  00FEF5  37                 	db	55	;'7'
   345  00FEF6  38                 	db	56	;'8'
   346  00FEF7  39                 	db	57	;'9'
   347  00FEF8  61                 	db	97	;'a'
   348  00FEF9  62                 	db	98	;'b'
   349  00FEFA  63                 	db	99	;'c'
   350  00FEFB  64                 	db	100	;'d'
   351  00FEFC  65                 	db	101	;'e'
   352  00FEFD  66                 	db	102	;'f'
   353  00FEFE  00                 	db	0
   354  00FEFF                     STR_22:
   355  00FEFF  20                 	db	32
   356  00FF00  20                 	db	32
   357  00FF01  20                 	db	32
   358  00FF02  20                 	db	32
   359  00FF03  20                 	db	32
   360  00FF04  20                 	db	32
   361  00FF05  20                 	db	32
   362  00FF06  20                 	db	32
   363  00FF07  20                 	db	32
   364  00FF08  20                 	db	32
   365  00FF09  20                 	db	32
   366  00FF0A  20                 	db	32
   367  00FF0B  20                 	db	32
   368  00FF0C  20                 	db	32
   369  00FF0D  20                 	db	32
   370  00FF0E  20                 	db	32
   371  00FF0F  00                 	db	0
   372  00FF10                     STR_11:
   373  00FF10  23                 	db	35
   374  00FF11  20                 	db	32
   375  00FF12  4F                 	db	79	;'O'
   376  00FF13  46                 	db	70	;'F'
   377  00FF14  20                 	db	32
   378  00FF15  43                 	db	67	;'C'
   379  00FF16  20                 	db	32
   380  00FF17  20                 	db	32
   381  00FF18  20                 	db	32
   382  00FF19  20                 	db	32
   383  00FF1A  20                 	db	32
   384  00FF1B  20                 	db	32
   385  00FF1C  20                 	db	32
   386  00FF1D  20                 	db	32
   387  00FF1E  20                 	db	32
   388  00FF1F  20                 	db	32
   389  00FF20  00                 	db	0
   390  00FF21                     STR_15:
   391  00FF21  23                 	db	35
   392  00FF22  20                 	db	32
   393  00FF23  4F                 	db	79	;'O'
   394  00FF24  46                 	db	70	;'F'
   395  00FF25  20                 	db	32
   396  00FF26  41                 	db	65	;'A'
   397  00FF27  41                 	db	65	;'A'
   398  00FF28  20                 	db	32
   399  00FF29  20                 	db	32
   400  00FF2A  20                 	db	32
   401  00FF2B  20                 	db	32
   402  00FF2C  20                 	db	32
   403  00FF2D  20                 	db	32
   404  00FF2E  20                 	db	32
   405  00FF2F  20                 	db	32
   406  00FF30  20                 	db	32
   407  00FF31  00                 	db	0
   408  00FF32                     STR_13:
   409  00FF32  23                 	db	35
   410  00FF33  20                 	db	32
   411  00FF34  4F                 	db	79	;'O'
   412  00FF35  46                 	db	70	;'F'
   413  00FF36  20                 	db	32
   414  00FF37  39                 	db	57	;'9'
   415  00FF38  56                 	db	86	;'V'
   416  00FF39  20                 	db	32
   417  00FF3A  20                 	db	32
   418  00FF3B  20                 	db	32
   419  00FF3C  20                 	db	32
   420  00FF3D  20                 	db	32
   421  00FF3E  20                 	db	32
   422  00FF3F  20                 	db	32
   423  00FF40  20                 	db	32
   424  00FF41  20                 	db	32
   425  00FF42  00                 	db	0
   426  00FF43                     STR_9:
   427  00FF43  54                 	db	84	;'T'
   428  00FF44  4F                 	db	79	;'O'
   429  00FF45  54                 	db	84	;'T'
   430  00FF46  41                 	db	65	;'A'
   431  00FF47  4C                 	db	76	;'L'
   432  00FF48  20                 	db	32
   433  00FF49  23                 	db	35
   434  00FF4A  20                 	db	32
   435  00FF4B  4F                 	db	79	;'O'
   436  00FF4C  46                 	db	70	;'F'
   437  00FF4D  20                 	db	32
   438  00FF4E  20                 	db	32
   439  00FF4F  20                 	db	32
   440  00FF50  20                 	db	32
   441  00FF51  20                 	db	32
   442  00FF52  20                 	db	32
   443  00FF53  00                 	db	0
   444  00FF54                     STR_6:
   445  00FF54  54                 	db	84	;'T'
   446  00FF55  4F                 	db	79	;'O'
   447  00FF56  20                 	db	32
   448  00FF57  43                 	db	67	;'C'
   449  00FF58  4F                 	db	79	;'O'
   450  00FF59  4E                 	db	78	;'N'
   451  00FF5A  54                 	db	84	;'T'
   452  00FF5B  49                 	db	73	;'I'
   453  00FF5C  4E                 	db	78	;'N'
   454  00FF5D  55                 	db	85	;'U'
   455  00FF5E  45                 	db	69	;'E'
   456  00FF5F  20                 	db	32
   457  00FF60  20                 	db	32
   458  00FF61  20                 	db	32
   459  00FF62  20                 	db	32
   460  00FF63  20                 	db	32
   461  00FF64  00                 	db	0
   462  00FF65                     STR_17:
   463  00FF65  23                 	db	35
   464  00FF66  20                 	db	32
   465  00FF67  4F                 	db	79	;'O'
   466  00FF68  46                 	db	70	;'F'
   467  00FF69  20                 	db	32
   468  00FF6A  44                 	db	68	;'D'
   469  00FF6B  52                 	db	82	;'R'
   470  00FF6C  41                 	db	65	;'A'
   471  00FF6D  49                 	db	73	;'I'
   472  00FF6E  4E                 	db	78	;'N'
   473  00FF6F  45                 	db	69	;'E'
   474  00FF70  44                 	db	68	;'D'
   475  00FF71  20                 	db	32
   476  00FF72  20                 	db	32
   477  00FF73  20                 	db	32
   478  00FF74  20                 	db	32
   479  00FF75  00                 	db	0
   480  00FF76                     STR_5:
   481  00FF76  44                 	db	68	;'D'
   482  00FF77  4F                 	db	79	;'O'
   483  00FF78  4E                 	db	78	;'N'
   484  00FF79  45                 	db	69	;'E'
   485  00FF7A  21                 	db	33
   486  00FF7B  20                 	db	32
   487  00FF7C  50                 	db	80	;'P'
   488  00FF7D  52                 	db	82	;'R'
   489  00FF7E  45                 	db	69	;'E'
   490  00FF7F  53                 	db	83	;'S'
   491  00FF80  53                 	db	83	;'S'
   492  00FF81  20                 	db	32
   493  00FF82  2A                 	db	42
   494  00FF83  20                 	db	32
   495  00FF84  20                 	db	32
   496  00FF85  20                 	db	32
   497  00FF86  00                 	db	0
   498  00FF87                     STR_21:
   499  00FF87  45                 	db	69	;'E'
   500  00FF88  4D                 	db	77	;'M'
   501  00FF89  45                 	db	69	;'E'
   502  00FF8A  52                 	db	82	;'R'
   503  00FF8B  47                 	db	71	;'G'
   504  00FF8C  45                 	db	69	;'E'
   505  00FF8D  4E                 	db	78	;'N'
   506  00FF8E  43                 	db	67	;'C'
   507  00FF8F  59                 	db	89	;'Y'
   508  00FF90  20                 	db	32
   509  00FF91  53                 	db	83	;'S'
   510  00FF92  54                 	db	84	;'T'
   511  00FF93  4F                 	db	79	;'O'
   512  00FF94  50                 	db	80	;'P'
   513  00FF95  20                 	db	32
   514  00FF96  20                 	db	32
   515  00FF97  00                 	db	0
   516  00FF98                     STR_7:
   517  00FF98  54                 	db	84	;'T'
   518  00FF99  4F                 	db	79	;'O'
   519  00FF9A  54                 	db	84	;'T'
   520  00FF9B  41                 	db	65	;'A'
   521  00FF9C  4C                 	db	76	;'L'
   522  00FF9D  20                 	db	32
   523  00FF9E  52                 	db	82	;'R'
   524  00FF9F  55                 	db	85	;'U'
   525  00FFA0  4E                 	db	78	;'N'
   526  00FFA1  20                 	db	32
   527  00FFA2  54                 	db	84	;'T'
   528  00FFA3  49                 	db	73	;'I'
   529  00FFA4  4D                 	db	77	;'M'
   530  00FFA5  45                 	db	69	;'E'
   531  00FFA6  3A                 	db	58	;':'
   532  00FFA7  20                 	db	32
   533  00FFA8  00                 	db	0
   534  00FFA9                     STR_3:
   535  00FFA9  20                 	db	32
   536  00FFAA  3C                 	db	60	;'<'
   537  00FFAB  34                 	db	52	;'4'
   538  00FFAC  20                 	db	32
   539  00FFAD  20                 	db	32
   540  00FFAE  20                 	db	32
   541  00FFAF  44                 	db	68	;'D'
   542  00FFB0  41                 	db	65	;'A'
   543  00FFB1  54                 	db	84	;'T'
   544  00FFB2  41                 	db	65	;'A'
   545  00FFB3  20                 	db	32
   546  00FFB4  20                 	db	32
   547  00FFB5  20                 	db	32
   548  00FFB6  36                 	db	54	;'6'
   549  00FFB7  3E                 	db	62	;'>'
   550  00FFB8  20                 	db	32
   551  00FFB9  00                 	db	0
   552  00FFBA                     STR_4:
   553  00FFBA  50                 	db	80	;'P'
   554  00FFBB  52                 	db	82	;'R'
   555  00FFBC  45                 	db	69	;'E'
   556  00FFBD  53                 	db	83	;'S'
   557  00FFBE  53                 	db	83	;'S'
   558  00FFBF  20                 	db	32
   559  00FFC0  23                 	db	35
   560  00FFC1  20                 	db	32
   561  00FFC2  54                 	db	84	;'T'
   562  00FFC3  4F                 	db	79	;'O'
   563  00FFC4  20                 	db	32
   564  00FFC5  53                 	db	83	;'S'
   565  00FFC6  54                 	db	84	;'T'
   566  00FFC7  4F                 	db	79	;'O'
   567  00FFC8  50                 	db	80	;'P'
   568  00FFC9  20                 	db	32
   569  00FFCA  00                 	db	0
   570  00FFCB                     STR_1:
   571  00FFCB  53                 	db	83	;'S'
   572  00FFCC  54                 	db	84	;'T'
   573  00FFCD  41                 	db	65	;'A'
   574  00FFCE  52                 	db	82	;'R'
   575  00FFCF  54                 	db	84	;'T'
   576  00FFD0  3A                 	db	58	;':'
   577  00FFD1  20                 	db	32
   578  00FFD2  20                 	db	32
   579  00FFD3  20                 	db	32
   580  00FFD4  50                 	db	80	;'P'
   581  00FFD5  52                 	db	82	;'R'
   582  00FFD6  45                 	db	69	;'E'
   583  00FFD7  53                 	db	83	;'S'
   584  00FFD8  53                 	db	83	;'S'
   585  00FFD9  20                 	db	32
   586  00FFDA  2A                 	db	42
   587  00FFDB  00                 	db	0
   588  00FFDC                     STR_23:
   589  00FFDC  52                 	db	82	;'R'
   590  00FFDD  55                 	db	85	;'U'
   591  00FFDE  4E                 	db	78	;'N'
   592  00FFDF  4E                 	db	78	;'N'
   593  00FFE0  49                 	db	73	;'I'
   594  00FFE1  4E                 	db	78	;'N'
   595  00FFE2  47                 	db	71	;'G'
   596  00FFE3  2E                 	db	46
   597  00FFE4  2E                 	db	46
   598  00FFE5  2E                 	db	46
   599  00FFE6  20                 	db	32
   600  00FFE7  30                 	db	48	;'0'
   601  00FFE8  30                 	db	48	;'0'
   602  00FFE9  3A                 	db	58	;':'
   603  00FFEA  30                 	db	48	;'0'
   604  00FFEB  30                 	db	48	;'0'
   605  00FFEC  00                 	db	0
   606  00FFED                     STR_2:
   607  00FFED  3C                 	db	60	;'<'
   608  00FFEE  20                 	db	32
   609  00FFEF  34                 	db	52	;'4'
   610  00FFF0  20                 	db	32
   611  00FFF1  20                 	db	32
   612  00FFF2  20                 	db	32
   613  00FFF3  44                 	db	68	;'D'
   614  00FFF4  41                 	db	65	;'A'
   615  00FFF5  54                 	db	84	;'T'
   616  00FFF6  41                 	db	65	;'A'
   617  00FFF7  20                 	db	32
   618  00FFF8  20                 	db	32
   619  00FFF9  20                 	db	32
   620  00FFFA  36                 	db	54	;'6'
   621  00FFFB  20                 	db	32
   622  00FFFC  3E                 	db	62	;'>'
   623  00FFFD  00                 	db	0
   624  0000                     
   625                           ; #config settings
   626  00FFFE  00                 	db	0	; dummy byte at the end
   627  0000                     
   628                           	psect	cinit
   629  00195C                     __pcinit:
   630                           	opt stack 0
   631  00195C                     start_initialization:
   632                           	opt stack 0
   633  00195C                     __initialization:
   634                           	opt stack 0
   635                           
   636                           ; Initialize objects allocated to BANK0 (1 bytes)
   637                           ; load TBLPTR registers with __pidataBANK0
   638  00195C  0EC7               	movlw	low __pidataBANK0
   639  00195E  6EF6               	movwf	tblptrl,c
   640  001960  0E1B               	movlw	high __pidataBANK0
   641  001962  6EF7               	movwf	tblptrh,c
   642  001964  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   643  001966  6EF8               	movwf	tblptru,c
   644  001968  0009               	tblrd		*+	;fetch initializer
   645  00196A  CFF5 F0B7          	movff	tablat,__pdataBANK0
   646                           
   647                           ; Initialize objects allocated to COMRAM (1 bytes)
   648                           ; load TBLPTR registers with __pidataCOMRAM
   649  00196E  0EC6               	movlw	low __pidataCOMRAM
   650  001970  6EF6               	movwf	tblptrl,c
   651  001972  0E1B               	movlw	high __pidataCOMRAM
   652  001974  6EF7               	movwf	tblptrh,c
   653  001976  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   654  001978  6EF8               	movwf	tblptru,c
   655  00197A  0009               	tblrd		*+	;fetch initializer
   656  00197C  CFF5 F04A          	movff	tablat,__pdataCOMRAM
   657                           
   658                           ; Clear objects allocated to BANK0 (30 bytes)
   659  001980  EE00  F080         	lfsr	0,__pbssBANK0
   660  001984  0E1E               	movlw	30
   661  001986                     clear_0:
   662  001986  6AEE               	clrf	postinc0,c
   663  001988  06E8               	decf	wreg,f,c
   664  00198A  E1FD               	bnz	clear_0
   665                           
   666                           ; Clear objects allocated to COMRAM (4 bytes)
   667  00198C  6A49               	clrf	(__pbssCOMRAM+3)& (0+255),c
   668  00198E  6A48               	clrf	(__pbssCOMRAM+2)& (0+255),c
   669  001990  6A47               	clrf	(__pbssCOMRAM+1)& (0+255),c
   670  001992  6A46               	clrf	__pbssCOMRAM& (0+255),c
   671  001994                     end_of_initialization:
   672                           	opt stack 0
   673  001994                     __end_of__initialization:
   674                           	opt stack 0
   675  001994  904B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   676  001996  924B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   677  001998  0E00               	movlw	low (__Lmediumconst shr (0+16))
   678  00199A  6EF8               	movwf	tblptru,c
   679  00199C  0100               	movlb	0
   680  00199E  EF09  F000         	goto	_main	;jump to C main() function
   681                           tblptru	equ	0xFF8
   682                           tblptrh	equ	0xFF7
   683                           tblptrl	equ	0xFF6
   684                           tablat	equ	0xFF5
   685                           postinc0	equ	0xFEE
   686                           wreg	equ	0xFE8
   687                           
   688                           	psect	bssCOMRAM
   689  000046                     __pbssCOMRAM:
   690                           	opt stack 0
   691  000046                     _doneTimer:
   692                           	opt stack 0
   693  000046                     	ds	1
   694  000047                     _opTimer:
   695                           	opt stack 0
   696  000047                     	ds	1
   697  000048                     _step1:
   698                           	opt stack 0
   699  000048                     	ds	1
   700  000049                     _step2:
   701                           	opt stack 0
   702  000049                     	ds	1
   703                           tblptru	equ	0xFF8
   704                           tblptrh	equ	0xFF7
   705                           tblptrl	equ	0xFF6
   706                           tablat	equ	0xFF5
   707                           postinc0	equ	0xFEE
   708                           wreg	equ	0xFE8
   709                           
   710                           	psect	dataCOMRAM
   711  00004A                     __pdataCOMRAM:
   712                           	opt stack 0
   713  00004A                     _solOnTimer:
   714                           	opt stack 0
   715  00004A                     	ds	1
   716                           tblptru	equ	0xFF8
   717                           tblptrh	equ	0xFF7
   718                           tblptrl	equ	0xFF6
   719                           tablat	equ	0xFF5
   720                           postinc0	equ	0xFEE
   721                           wreg	equ	0xFE8
   722                           
   723                           	psect	bssBANK0
   724  000080                     __pbssBANK0:
   725                           	opt stack 0
   726  000080                     _time:
   727                           	opt stack 0
   728  000080                     	ds	7
   729  000087                     _stepGear:
   730                           	opt stack 0
   731  000087                     	ds	2
   732  000089                     _count9V:
   733                           	opt stack 0
   734  000089                     	ds	1
   735  00008A                     _countAA:
   736                           	opt stack 0
   737  00008A                     	ds	1
   738  00008B                     _countC:
   739                           	opt stack 0
   740  00008B                     	ds	1
   741  00008C                     _countDrain:
   742                           	opt stack 0
   743  00008C                     	ds	1
   744  00008D                     _doneSorting:
   745                           	opt stack 0
   746  00008D                     	ds	1
   747  00008E                     _min:
   748                           	opt stack 0
   749  00008E                     	ds	1
   750  00008F                     _num9V:
   751                           	opt stack 0
   752  00008F                     	ds	1
   753  000090                     _numAA:
   754                           	opt stack 0
   755  000090                     	ds	1
   756  000091                     _numBats:
   757                           	opt stack 0
   758  000091                     	ds	1
   759  000092                     _numC:
   760                           	opt stack 0
   761  000092                     	ds	1
   762  000093                     _numDrain:
   763                           	opt stack 0
   764  000093                     	ds	1
   765  000094                     _plat1Left:
   766                           	opt stack 0
   767  000094                     	ds	1
   768  000095                     _plat1Right:
   769                           	opt stack 0
   770  000095                     	ds	1
   771  000096                     _plat2Left:
   772                           	opt stack 0
   773  000096                     	ds	1
   774  000097                     _plat2Right:
   775                           	opt stack 0
   776  000097                     	ds	1
   777  000098                     _sec:
   778                           	opt stack 0
   779  000098                     	ds	1
   780  000099                     _turn1BackLeft:
   781                           	opt stack 0
   782  000099                     	ds	1
   783  00009A                     _turn1BackRight:
   784                           	opt stack 0
   785  00009A                     	ds	1
   786  00009B                     _turn2BackLeft:
   787                           	opt stack 0
   788  00009B                     	ds	1
   789  00009C                     _turn2BackRight:
   790                           	opt stack 0
   791  00009C                     	ds	1
   792  00009D                     _waitMotor:
   793                           	opt stack 0
   794  00009D                     	ds	1
   795                           tblptru	equ	0xFF8
   796                           tblptrh	equ	0xFF7
   797                           tblptrl	equ	0xFF6
   798                           tablat	equ	0xFF5
   799                           postinc0	equ	0xFEE
   800                           wreg	equ	0xFE8
   801                           
   802                           	psect	dataBANK0
   803  0000B7                     __pdataBANK0:
   804                           	opt stack 0
   805  0000B7                     _screenMode:
   806                           	opt stack 0
   807  0000B7                     	ds	1
   808                           tblptru	equ	0xFF8
   809                           tblptrh	equ	0xFF7
   810                           tblptrl	equ	0xFF6
   811                           tablat	equ	0xFF5
   812                           postinc0	equ	0xFEE
   813                           wreg	equ	0xFE8
   814                           
   815                           	psect	cstackBANK0
   816  00009E                     __pcstackBANK0:
   817                           	opt stack 0
   818  00009E                     ??_I2C_Master_Init:
   819  00009E                     ?_printf:
   820                           	opt stack 0
   821  00009E                     printf@f:
   822                           	opt stack 0
   823                           
   824                           ; 2 bytes @ 0x0
   825  00009E                     	ds	8
   826  0000A6                     printf@idx:
   827                           	opt stack 0
   828                           
   829                           ; 1 bytes @ 0x8
   830  0000A6                     	ds	1
   831  0000A7                     printf@ap:
   832                           	opt stack 0
   833                           
   834                           ; 2 bytes @ 0x9
   835  0000A7                     	ds	2
   836  0000A9                     printf@prec:
   837                           	opt stack 0
   838                           
   839                           ; 1 bytes @ 0xB
   840  0000A9                     	ds	1
   841  0000AA                     printf@val:
   842                           	opt stack 0
   843                           
   844                           ; 2 bytes @ 0xC
   845  0000AA                     	ds	2
   846  0000AC                     printf@flag:
   847                           	opt stack 0
   848                           
   849                           ; 1 bytes @ 0xE
   850  0000AC                     	ds	1
   851  0000AD                     printf@width:
   852                           	opt stack 0
   853                           
   854                           ; 2 bytes @ 0xF
   855  0000AD                     	ds	2
   856  0000AF                     printf@c:
   857                           	opt stack 0
   858                           
   859                           ; 1 bytes @ 0x11
   860  0000AF                     	ds	1
   861  0000B0                     ??_main:
   862                           
   863                           ; 1 bytes @ 0x12
   864  0000B0                     	ds	4
   865  0000B4                     main@i:
   866                           	opt stack 0
   867                           
   868                           ; 1 bytes @ 0x16
   869  0000B4                     	ds	1
   870  0000B5                     main@i_579:
   871                           	opt stack 0
   872                           
   873                           ; 1 bytes @ 0x17
   874  0000B5                     	ds	1
   875  0000B6                     main@i_632:
   876                           	opt stack 0
   877                           
   878                           ; 1 bytes @ 0x18
   879  0000B6                     	ds	1
   880                           tblptru	equ	0xFF8
   881                           tblptrh	equ	0xFF7
   882                           tblptrl	equ	0xFF6
   883                           tablat	equ	0xFF5
   884                           postinc0	equ	0xFEE
   885                           wreg	equ	0xFE8
   886                           
   887                           	psect	cstackCOMRAM
   888  000001                     __pcstackCOMRAM:
   889                           	opt stack 0
   890  000001                     ??i2_isdigit:
   891  000001                     ?i2___wmul:
   892                           	opt stack 0
   893  000001                     ?i2___awdiv:
   894                           	opt stack 0
   895  000001                     ?i2___awmod:
   896                           	opt stack 0
   897  000001                     ?i2___lwdiv:
   898                           	opt stack 0
   899  000001                     i2lcdNibble@temp:
   900                           	opt stack 0
   901  000001                     i2readADC@channel:
   902                           	opt stack 0
   903  000001                     i2___wmul@multiplier:
   904                           	opt stack 0
   905  000001                     i2___awdiv@dividend:
   906                           	opt stack 0
   907  000001                     i2___awmod@dividend:
   908                           	opt stack 0
   909  000001                     i2___lwdiv@dividend:
   910                           	opt stack 0
   911                           
   912                           ; 2 bytes @ 0x0
   913  000001                     	ds	1
   914  000002                     i2lcdNibble@data:
   915                           	opt stack 0
   916  000002                     i2_isdigit$932:
   917                           	opt stack 0
   918                           
   919                           ; 1 bytes @ 0x1
   920  000002                     	ds	1
   921  000003                     i2lcdInst@data:
   922                           	opt stack 0
   923  000003                     i2putch@data:
   924                           	opt stack 0
   925  000003                     i2isdigit@c:
   926                           	opt stack 0
   927  000003                     i2___wmul@multiplicand:
   928                           	opt stack 0
   929  000003                     i2___awdiv@divisor:
   930                           	opt stack 0
   931  000003                     i2___awmod@divisor:
   932                           	opt stack 0
   933  000003                     i2___lwdiv@divisor:
   934                           	opt stack 0
   935                           
   936                           ; 2 bytes @ 0x2
   937  000003                     	ds	2
   938  000005                     i2___awdiv@counter:
   939                           	opt stack 0
   940  000005                     i2___awmod@counter:
   941                           	opt stack 0
   942  000005                     i2___wmul@product:
   943                           	opt stack 0
   944  000005                     i2___lwdiv@quotient:
   945                           	opt stack 0
   946                           
   947                           ; 2 bytes @ 0x4
   948  000005                     	ds	1
   949  000006                     i2___awdiv@sign:
   950                           	opt stack 0
   951  000006                     i2___awmod@sign:
   952                           	opt stack 0
   953                           
   954                           ; 1 bytes @ 0x5
   955  000006                     	ds	1
   956  000007                     i2___lwdiv@counter:
   957                           	opt stack 0
   958  000007                     i2___awdiv@quotient:
   959                           	opt stack 0
   960                           
   961                           ; 2 bytes @ 0x6
   962  000007                     	ds	1
   963  000008                     ?i2___lwmod:
   964                           	opt stack 0
   965  000008                     i2___lwmod@dividend:
   966                           	opt stack 0
   967                           
   968                           ; 2 bytes @ 0x7
   969  000008                     	ds	1
   970  000009                     
   971                           ; 1 bytes @ 0x8
   972  000009                     	ds	1
   973  00000A                     i2___lwmod@divisor:
   974                           	opt stack 0
   975                           
   976                           ; 2 bytes @ 0x9
   977  00000A                     	ds	2
   978  00000C                     i2___lwmod@counter:
   979                           	opt stack 0
   980                           
   981                           ; 1 bytes @ 0xB
   982  00000C                     	ds	1
   983  00000D                     ?i2_printf:
   984                           	opt stack 0
   985  00000D                     i2printf@f:
   986                           	opt stack 0
   987                           
   988                           ; 2 bytes @ 0xC
   989  00000D                     	ds	6
   990  000013                     ??i2_printf:
   991                           
   992                           ; 1 bytes @ 0x12
   993  000013                     	ds	4
   994  000017                     i2printf@idx:
   995                           	opt stack 0
   996                           
   997                           ; 1 bytes @ 0x16
   998  000017                     	ds	1
   999  000018                     i2printf@ap:
  1000                           	opt stack 0
  1001                           
  1002                           ; 2 bytes @ 0x17
  1003  000018                     	ds	2
  1004  00001A                     i2printf@prec:
  1005                           	opt stack 0
  1006                           
  1007                           ; 1 bytes @ 0x19
  1008  00001A                     	ds	1
  1009  00001B                     i2printf@val:
  1010                           	opt stack 0
  1011                           
  1012                           ; 2 bytes @ 0x1A
  1013  00001B                     	ds	2
  1014  00001D                     i2printf@flag:
  1015                           	opt stack 0
  1016                           
  1017                           ; 1 bytes @ 0x1C
  1018  00001D                     	ds	1
  1019  00001E                     i2printf@width:
  1020                           	opt stack 0
  1021                           
  1022                           ; 2 bytes @ 0x1D
  1023  00001E                     	ds	2
  1024  000020                     i2printf@c:
  1025                           	opt stack 0
  1026                           
  1027                           ; 1 bytes @ 0x1F
  1028  000020                     	ds	1
  1029  000021                     switchMenu@right:
  1030                           	opt stack 0
  1031                           
  1032                           ; 1 bytes @ 0x20
  1033  000021                     	ds	1
  1034  000022                     switchMenu@key:
  1035                           	opt stack 0
  1036                           
  1037                           ; 1 bytes @ 0x21
  1038  000022                     	ds	1
  1039  000023                     switchMenu@left:
  1040                           	opt stack 0
  1041                           
  1042                           ; 1 bytes @ 0x22
  1043  000023                     	ds	1
  1044  000024                     ??_ISR:
  1045                           
  1046                           ; 1 bytes @ 0x23
  1047  000024                     	ds	16
  1048  000034                     ISR@keypress:
  1049                           	opt stack 0
  1050                           
  1051                           ; 1 bytes @ 0x33
  1052  000034                     	ds	1
  1053  000035                     ??_testBatteries:
  1054  000035                     ??_isdigit:
  1055  000035                     ??_I2C_Master_Wait:
  1056  000035                     ?_abs:
  1057                           	opt stack 0
  1058  000035                     ?___wmul:
  1059                           	opt stack 0
  1060  000035                     ?___awdiv:
  1061                           	opt stack 0
  1062  000035                     ?___awmod:
  1063                           	opt stack 0
  1064  000035                     ?___lwdiv:
  1065                           	opt stack 0
  1066  000035                     ?___lldiv:
  1067                           	opt stack 0
  1068  000035                     lcdNibble@temp:
  1069                           	opt stack 0
  1070  000035                     readADC@channel:
  1071                           	opt stack 0
  1072  000035                     abs@x:
  1073                           	opt stack 0
  1074  000035                     ___wmul@multiplier:
  1075                           	opt stack 0
  1076  000035                     ___awdiv@dividend:
  1077                           	opt stack 0
  1078  000035                     ___awmod@dividend:
  1079                           	opt stack 0
  1080  000035                     ___lwdiv@dividend:
  1081                           	opt stack 0
  1082  000035                     ___lldiv@dividend:
  1083                           	opt stack 0
  1084                           
  1085                           ; 4 bytes @ 0x34
  1086  000035                     	ds	1
  1087  000036                     I2C_Master_Read@a:
  1088                           	opt stack 0
  1089  000036                     lcdNibble@data:
  1090                           	opt stack 0
  1091  000036                     _isdigit$932:
  1092                           	opt stack 0
  1093  000036                     I2C_Master_Write@d:
  1094                           	opt stack 0
  1095                           
  1096                           ; 2 bytes @ 0x35
  1097  000036                     	ds	1
  1098  000037                     ??_abs:
  1099  000037                     I2C_Master_Read@temp:
  1100                           	opt stack 0
  1101  000037                     lcdInst@data:
  1102                           	opt stack 0
  1103  000037                     putch@data:
  1104                           	opt stack 0
  1105  000037                     isdigit@c:
  1106                           	opt stack 0
  1107  000037                     ___wmul@multiplicand:
  1108                           	opt stack 0
  1109  000037                     ___awdiv@divisor:
  1110                           	opt stack 0
  1111  000037                     ___awmod@divisor:
  1112                           	opt stack 0
  1113  000037                     ___lwdiv@divisor:
  1114                           	opt stack 0
  1115                           
  1116                           ; 2 bytes @ 0x36
  1117  000037                     	ds	1
  1118  000038                     ??_initLCD:
  1119                           
  1120                           ; 1 bytes @ 0x37
  1121  000038                     	ds	1
  1122  000039                     ?_isFluctuate:
  1123                           	opt stack 0
  1124  000039                     ___awdiv@counter:
  1125                           	opt stack 0
  1126  000039                     ___awmod@counter:
  1127                           	opt stack 0
  1128  000039                     ___wmul@product:
  1129                           	opt stack 0
  1130  000039                     ___lwdiv@quotient:
  1131                           	opt stack 0
  1132  000039                     ___lldiv@divisor:
  1133                           	opt stack 0
  1134                           
  1135                           ; 4 bytes @ 0x38
  1136  000039                     	ds	1
  1137  00003A                     ___awdiv@sign:
  1138                           	opt stack 0
  1139  00003A                     ___awmod@sign:
  1140                           	opt stack 0
  1141                           
  1142                           ; 1 bytes @ 0x39
  1143  00003A                     	ds	1
  1144  00003B                     ??_isFluctuate:
  1145  00003B                     ___lwdiv@counter:
  1146                           	opt stack 0
  1147  00003B                     ___awdiv@quotient:
  1148                           	opt stack 0
  1149                           
  1150                           ; 2 bytes @ 0x3A
  1151  00003B                     	ds	1
  1152  00003C                     ?___lwmod:
  1153                           	opt stack 0
  1154  00003C                     ___lwmod@dividend:
  1155                           	opt stack 0
  1156                           
  1157                           ; 2 bytes @ 0x3B
  1158  00003C                     	ds	1
  1159  00003D                     ___lldiv@quotient:
  1160                           	opt stack 0
  1161                           
  1162                           ; 4 bytes @ 0x3C
  1163  00003D                     	ds	1
  1164  00003E                     ___lwmod@divisor:
  1165                           	opt stack 0
  1166                           
  1167                           ; 2 bytes @ 0x3D
  1168  00003E                     	ds	1
  1169  00003F                     isFluctuate@tempVoltage:
  1170                           	opt stack 0
  1171                           
  1172                           ; 2 bytes @ 0x3E
  1173  00003F                     	ds	1
  1174  000040                     ___lwmod@counter:
  1175                           	opt stack 0
  1176                           
  1177                           ; 1 bytes @ 0x3F
  1178  000040                     	ds	1
  1179  000041                     ??_printf:
  1180  000041                     isFluctuate@channel:
  1181                           	opt stack 0
  1182  000041                     ___lldiv@counter:
  1183                           	opt stack 0
  1184                           
  1185                           ; 1 bytes @ 0x40
  1186  000041                     	ds	1
  1187  000042                     isFluctuate@i:
  1188                           	opt stack 0
  1189  000042                     I2C_Master_Init@c:
  1190                           	opt stack 0
  1191                           
  1192                           ; 4 bytes @ 0x41
  1193  000042                     	ds	4
  1194                           tblptru	equ	0xFF8
  1195                           tblptrh	equ	0xFF7
  1196                           tblptrl	equ	0xFF6
  1197                           tablat	equ	0xFF5
  1198                           postinc0	equ	0xFEE
  1199                           wreg	equ	0xFE8
  1200                           
  1201 ;;
  1202 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  1203 ;;
  1204 ;; *************** function _main *****************
  1205 ;; Defined at:
  1206 ;;		line 48 in file "../main.c"
  1207 ;; Parameters:    Size  Location     Type
  1208 ;;		None
  1209 ;; Auto vars:     Size  Location     Type
  1210 ;;  i               1   24[BANK0 ] unsigned char 
  1211 ;;  i               1   23[BANK0 ] unsigned char 
  1212 ;;  i               1   22[BANK0 ] unsigned char 
  1213 ;; Return value:  Size  Location     Type
  1214 ;;                  1    wreg      void 
  1215 ;; Registers used:
  1216 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1217 ;; Tracked objects:
  1218 ;;		On entry : 0/0
  1219 ;;		On exit  : 0/0
  1220 ;;		Unchanged: 0/0
  1221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1222 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1223 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1224 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1225 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1226 ;;Total ram usage:        7 bytes
  1227 ;; Hardware stack levels required when called:    8
  1228 ;; This function calls:
  1229 ;;		_I2C_Master_Init
  1230 ;;		_I2C_Master_Read
  1231 ;;		_I2C_Master_Start
  1232 ;;		_I2C_Master_Stop
  1233 ;;		_I2C_Master_Write
  1234 ;;		_initLCD
  1235 ;;		_isFluctuate
  1236 ;;		_lcdInst
  1237 ;;		_printf
  1238 ;;		_stopOperation
  1239 ;;		_testBatteries
  1240 ;; This function is called by:
  1241 ;;		Startup code after reset
  1242 ;; This function uses a non-reentrant model
  1243 ;;
  1244                           
  1245                           	psect	text0
  1246  000012                     __ptext0:
  1247                           	opt stack 0
  1248  000012                     _main:
  1249                           	opt stack 23
  1250                           
  1251                           ;main.c: 50: TRISA = 0b00000111;
  1252                           
  1253                           ;incstack = 0
  1254  000012  0E07               	movlw	7
  1255  000014  6E92               	movwf	3986,c	;volatile
  1256                           
  1257                           ;main.c: 51: TRISB = 0b11110010;
  1258  000016  0EF2               	movlw	242
  1259  000018  6E93               	movwf	3987,c	;volatile
  1260                           
  1261                           ;main.c: 52: TRISC = 0x00;
  1262  00001A  0E00               	movlw	0
  1263  00001C  6E94               	movwf	3988,c	;volatile
  1264                           
  1265                           ;main.c: 53: TRISD = 0x00;
  1266  00001E  0E00               	movlw	0
  1267  000020  6E95               	movwf	3989,c	;volatile
  1268                           
  1269                           ;main.c: 54: TRISE = 0x00;
  1270  000022  0E00               	movlw	0
  1271  000024  6E96               	movwf	3990,c	;volatile
  1272                           
  1273                           ;main.c: 56: LATA = 0x00;
  1274  000026  0E00               	movlw	0
  1275  000028  6E89               	movwf	3977,c	;volatile
  1276                           
  1277                           ;main.c: 57: LATB = 0x00;
  1278  00002A  0E00               	movlw	0
  1279  00002C  6E8A               	movwf	3978,c	;volatile
  1280                           
  1281                           ;main.c: 58: LATC = 0x00;
  1282  00002E  0E00               	movlw	0
  1283  000030  6E8B               	movwf	3979,c	;volatile
  1284                           
  1285                           ;main.c: 59: LATD = 0x00;
  1286  000032  0E00               	movlw	0
  1287  000034  6E8C               	movwf	3980,c	;volatile
  1288                           
  1289                           ;main.c: 60: LATE = 0x00;
  1290  000036  0E00               	movlw	0
  1291  000038  6E8D               	movwf	3981,c	;volatile
  1292                           
  1293                           ;main.c: 62: ADCON0 = 0x00;
  1294  00003A  0E00               	movlw	0
  1295  00003C  6EC2               	movwf	4034,c	;volatile
  1296                           
  1297                           ;main.c: 63: ADCON1 = 0x0D;
  1298  00003E  0E0D               	movlw	13
  1299  000040  6EC1               	movwf	4033,c	;volatile
  1300                           
  1301                           ;main.c: 64: ADCON2 = 0b10110001;
  1302  000042  0EB1               	movlw	177
  1303  000044  6EC0               	movwf	4032,c	;volatile
  1304                           
  1305                           ;main.c: 69: GIE = 1;
  1306  000046  8EF2               	bsf	intcon,7,c	;volatile
  1307                           
  1308                           ;main.c: 70: PEIE = 1;
  1309  000048  8CF2               	bsf	intcon,6,c	;volatile
  1310                           
  1311                           ;main.c: 71: INT1IE = 1;
  1312  00004A  86F0               	bsf	intcon3,3,c	;volatile
  1313                           
  1314                           ;main.c: 72: INT1IF = 0;
  1315  00004C  90F0               	bcf	intcon3,0,c	;volatile
  1316                           
  1317                           ;main.c: 73: TMR0IE = 1;
  1318  00004E  8AF2               	bsf	intcon,5,c	;volatile
  1319                           
  1320                           ;main.c: 74: TMR0IF = 0;
  1321  000050  94F2               	bcf	intcon,2,c	;volatile
  1322                           
  1323                           ;main.c: 75: TMR1IE = 1;
  1324  000052  809D               	bsf	3997,0,c	;volatile
  1325                           
  1326                           ;main.c: 76: TMR1IF = 0;
  1327  000054  909E               	bcf	3998,0,c	;volatile
  1328                           
  1329                           ;main.c: 80: T0CON = 0b00000111;
  1330  000056  0E07               	movlw	7
  1331  000058  6ED5               	movwf	4053,c	;volatile
  1332                           
  1333                           ;main.c: 88: TMR0 = 55770;
  1334  00005A  0ED9               	movlw	217
  1335  00005C  6ED7               	movwf	4055,c	;volatile
  1336  00005E  0EDA               	movlw	218
  1337  000060  6ED6               	movwf	4054,c	;volatile
  1338                           
  1339                           ;main.c: 97: T1CON = 0b10000000;
  1340  000062  0E80               	movlw	128
  1341  000064  6ECD               	movwf	4045,c	;volatile
  1342                           
  1343                           ;main.c: 106: TMR1 = 58035;
  1344  000066  0EE2               	movlw	226
  1345  000068  6ECF               	movwf	4047,c	;volatile
  1346  00006A  0EB3               	movlw	179
  1347  00006C  6ECE               	movwf	4046,c	;volatile
  1348                           
  1349                           ;main.c: 115: initLCD();
  1350  00006E  ECD1  F00C         	call	_initLCD	;wreg free
  1351                           
  1352                           ;main.c: 117: I2C_Master_Init(10000);
  1353  000072  0E10               	movlw	16
  1354  000074  6E42               	movwf	I2C_Master_Init@c,c
  1355  000076  0E27               	movlw	39
  1356  000078  6E43               	movwf	I2C_Master_Init@c+1,c
  1357  00007A  0E00               	movlw	0
  1358  00007C  6E44               	movwf	I2C_Master_Init@c+2,c
  1359  00007E  0E00               	movlw	0
  1360  000080  6E45               	movwf	I2C_Master_Init@c+3,c
  1361  000082  ECE0  F00B         	call	_I2C_Master_Init	;wreg free
  1362                           
  1363                           ;main.c: 118: (INTCONbits.GIE = 1);
  1364  000086  8EF2               	bsf	intcon,7,c	;volatile
  1365                           
  1366                           ;main.c: 121: while (screenMode == 2){
  1367                           
  1368                           ;main.c: 120: while (1) {
  1369  000088  D056               	goto	l4082
  1370  00008A                     l4044:
  1371                           
  1372                           ;main.c: 122: lcdInst(0b10000000);;
  1373  00008A  0E80               	movlw	128
  1374  00008C  ECC4  F00D         	call	_lcdInst
  1375                           
  1376                           ;main.c: 123: printf("START:   PRESS *");
  1377  000090  0ECB               	movlw	low STR_1
  1378  000092  0100               	movlb	0	; () banked
  1379  000094  6F9E               	movwf	printf@f& (0+255),b
  1380  000096  0EFF               	movlw	high STR_1
  1381  000098  0100               	movlb	0	; () banked
  1382  00009A  6F9F               	movwf	(printf@f+1)& (0+255),b
  1383  00009C  EC1D  F003         	call	_printf	;wreg free
  1384                           
  1385                           ;main.c: 124: lcdInst(0b11000000);;
  1386  0000A0  0EC0               	movlw	192
  1387  0000A2  ECC4  F00D         	call	_lcdInst
  1388                           
  1389                           ;main.c: 125: printf("< 4   DATA   6 >");
  1390  0000A6  0EED               	movlw	low STR_2
  1391  0000A8  0100               	movlb	0	; () banked
  1392  0000AA  6F9E               	movwf	printf@f& (0+255),b
  1393  0000AC  0EFF               	movlw	high STR_2
  1394  0000AE  0100               	movlb	0	; () banked
  1395  0000B0  6F9F               	movwf	(printf@f+1)& (0+255),b
  1396  0000B2  EC1D  F003         	call	_printf	;wreg free
  1397                           
  1398                           ;main.c: 126: for(unsigned char i=0;i<50;i++){
  1399  0000B6  0E00               	movlw	0
  1400  0000B8  0100               	movlb	0	; () banked
  1401  0000BA  6FB4               	movwf	main@i& (0+255),b
  1402  0000BC                     l4052:
  1403                           
  1404                           ; BSR set to: 0
  1405  0000BC  0E31               	movlw	49
  1406  0000BE  0100               	movlb	0	; () banked
  1407  0000C0  65B4               	cpfsgt	main@i& (0+255),b
  1408  0000C2  D001               	goto	l4056
  1409  0000C4  D011               	goto	l4064
  1410  0000C6                     l4056:
  1411                           
  1412                           ; BSR set to: 0
  1413                           ;main.c: 127: if (screenMode != 2)
  1414  0000C6  0E02               	movlw	2
  1415  0000C8  0100               	movlb	0	; () banked
  1416  0000CA  19B7               	xorwf	_screenMode& (0+255),w,b
  1417  0000CC  A4D8               	btfss	status,2,c
  1418  0000CE  D00C               	goto	l4064
  1419                           
  1420                           ; BSR set to: 0
  1421                           ;main.c: 129: _delay((unsigned long)((10)*(10000000/4000.0)));
  1422                           
  1423                           ; BSR set to: 0
  1424                           
  1425                           ; BSR set to: 0
  1426                           ;main.c: 128: break;
  1427  0000D0  0E21               	movlw	33
  1428  0000D2  0100               	movlb	0	; () banked
  1429  0000D4  6FB0               	movwf	??_main& (0+255),b
  1430  0000D6  0E76               	movlw	118
  1431  0000D8                     u4587:
  1432  0000D8  2EE8               	decfsz	wreg,f,c
  1433  0000DA  D7FE               	bra	u4587
  1434  0000DC  2FB0               	decfsz	??_main& (0+255),f,b
  1435  0000DE  D7FC               	bra	u4587
  1436  0000E0  F000               	nop	
  1437  0000E2  0100               	movlb	0	; () banked
  1438  0000E4  2BB4               	incf	main@i& (0+255),f,b
  1439  0000E6  D7EA               	goto	l4052
  1440  0000E8                     l4064:
  1441                           
  1442                           ; BSR set to: 0
  1443                           ;main.c: 130: }
  1444                           ;main.c: 131: lcdInst(0b10000000);;
  1445  0000E8  0E80               	movlw	128
  1446  0000EA  ECC4  F00D         	call	_lcdInst
  1447                           
  1448                           ;main.c: 132: lcdInst(0b11000000);;
  1449  0000EE  0EC0               	movlw	192
  1450  0000F0  ECC4  F00D         	call	_lcdInst
  1451                           
  1452                           ;main.c: 133: printf(" <4   DATA   6> ");
  1453  0000F4  0EA9               	movlw	low STR_3
  1454  0000F6  0100               	movlb	0	; () banked
  1455  0000F8  6F9E               	movwf	printf@f& (0+255),b
  1456  0000FA  0EFF               	movlw	high STR_3
  1457  0000FC  0100               	movlb	0	; () banked
  1458  0000FE  6F9F               	movwf	(printf@f+1)& (0+255),b
  1459  000100  EC1D  F003         	call	_printf	;wreg free
  1460                           
  1461                           ;main.c: 134: for(unsigned char i=0;i<50;i++){
  1462  000104  0E00               	movlw	0
  1463  000106  0100               	movlb	0	; () banked
  1464  000108  6FB5               	movwf	main@i_579& (0+255),b
  1465  00010A                     l4070:
  1466                           
  1467                           ; BSR set to: 0
  1468  00010A  0E31               	movlw	49
  1469  00010C  0100               	movlb	0	; () banked
  1470  00010E  65B5               	cpfsgt	main@i_579& (0+255),b
  1471  000110  D001               	goto	l4074
  1472  000112  D011               	goto	l4082
  1473  000114                     l4074:
  1474                           
  1475                           ; BSR set to: 0
  1476                           ;main.c: 135: if (screenMode != 2)
  1477  000114  0E02               	movlw	2
  1478  000116  0100               	movlb	0	; () banked
  1479  000118  19B7               	xorwf	_screenMode& (0+255),w,b
  1480  00011A  A4D8               	btfss	status,2,c
  1481  00011C  D00C               	goto	l4082
  1482                           
  1483                           ; BSR set to: 0
  1484                           ;main.c: 137: _delay((unsigned long)((10)*(10000000/4000.0)));
  1485                           
  1486                           ; BSR set to: 0
  1487                           
  1488                           ; BSR set to: 0
  1489                           ;main.c: 136: break;
  1490  00011E  0E21               	movlw	33
  1491  000120  0100               	movlb	0	; () banked
  1492  000122  6FB0               	movwf	??_main& (0+255),b
  1493  000124  0E76               	movlw	118
  1494  000126                     u4597:
  1495  000126  2EE8               	decfsz	wreg,f,c
  1496  000128  D7FE               	bra	u4597
  1497  00012A  2FB0               	decfsz	??_main& (0+255),f,b
  1498  00012C  D7FC               	bra	u4597
  1499  00012E  F000               	nop	
  1500  000130  0100               	movlb	0	; () banked
  1501  000132  2BB5               	incf	main@i_579& (0+255),f,b
  1502  000134  D7EA               	goto	l4070
  1503  000136                     l4082:
  1504  000136  0E02               	movlw	2
  1505  000138  0100               	movlb	0	; () banked
  1506  00013A  19B7               	xorwf	_screenMode& (0+255),w,b
  1507  00013C  A4D8               	btfss	status,2,c
  1508  00013E  D101               	goto	l4148
  1509  000140  D7A4               	goto	l4044
  1510  000142                     l4084:
  1511                           
  1512                           ; BSR set to: 0
  1513                           ;main.c: 147: lcdInst(0b10000000);;
  1514  000142  0E80               	movlw	128
  1515  000144  ECC4  F00D         	call	_lcdInst
  1516                           
  1517                           ;main.c: 148: lcdInst(0b11000000);;
  1518  000148  0EC0               	movlw	192
  1519  00014A  ECC4  F00D         	call	_lcdInst
  1520                           
  1521                           ;main.c: 149: printf("PRESS # TO STOP ");
  1522  00014E  0EBA               	movlw	low STR_4
  1523  000150  0100               	movlb	0	; () banked
  1524  000152  6F9E               	movwf	printf@f& (0+255),b
  1525  000154  0EFF               	movlw	high STR_4
  1526  000156  0100               	movlb	0	; () banked
  1527  000158  6F9F               	movwf	(printf@f+1)& (0+255),b
  1528  00015A  EC1D  F003         	call	_printf	;wreg free
  1529                           
  1530                           ;main.c: 151: if (!isFluctuate(0)){
  1531  00015E  0E00               	movlw	0
  1532  000160  EC60  F00A         	call	_isFluctuate
  1533  000164  5039               	movf	?_isFluctuate,w,c
  1534  000166  103A               	iorwf	?_isFluctuate+1,w,c
  1535  000168  A4D8               	btfss	status,2,c
  1536  00016A  D0EB               	goto	l4148
  1537                           
  1538                           ;main.c: 152: if (((ADRESH<<8)+ADRESL)<50){
  1539  00016C  50C3               	movf	4035,w,c	;volatile
  1540  00016E  CFC4 F0B0          	movff	4036,??_main	;volatile
  1541  000172  0100               	movlb	0	; () banked
  1542  000174  6BB1               	clrf	(??_main+1)& (0+255),b
  1543  000176  C0B0  F0B1         	movff	??_main,??_main+1
  1544  00017A  0100               	movlb	0	; () banked
  1545  00017C  6BB0               	clrf	??_main& (0+255),b
  1546  00017E  0100               	movlb	0	; () banked
  1547  000180  27B0               	addwf	??_main& (0+255),f,b
  1548  000182  0E00               	movlw	0
  1549  000184  23B1               	addwfc	(??_main+1)& (0+255),f,b
  1550  000186  0100               	movlb	0	; () banked
  1551  000188  BFB1               	btfsc	(??_main+1)& (0+255),7,b
  1552  00018A  D008               	goto	l4092
  1553  00018C  0100               	movlb	0	; () banked
  1554  00018E  51B1               	movf	(??_main+1)& (0+255),w,b
  1555  000190  E104               	bnz	u4311
  1556  000192  0E32               	movlw	50
  1557  000194  0100               	movlb	0	; () banked
  1558  000196  5DB0               	subwf	??_main& (0+255),w,b
  1559  000198  B0D8               	btfsc	status,0,c
  1560  00019A                     u4311:
  1561  00019A  D0D3               	goto	l4148
  1562  00019C                     l4092:
  1563                           
  1564                           ; BSR set to: 0
  1565                           ;main.c: 153: LATAbits.LA7 = 1;;
  1566  00019C  8E89               	bsf	3977,7,c	;volatile
  1567                           
  1568                           ; BSR set to: 0
  1569                           ;main.c: 154: testBatteries();
  1570  00019E  EC11  F008         	call	_testBatteries	;wreg free
  1571                           
  1572                           ;main.c: 155: LATAbits.LA7 = 0;;
  1573  0001A2  9E89               	bcf	3977,7,c	;volatile
  1574                           
  1575                           ;main.c: 156: if (stepGear){
  1576  0001A4  0100               	movlb	0	; () banked
  1577  0001A6  5187               	movf	_stepGear& (0+255),w,b
  1578  0001A8  0100               	movlb	0	; () banked
  1579  0001AA  1188               	iorwf	(_stepGear+1)& (0+255),w,b
  1580  0001AC  B4D8               	btfsc	status,2,c
  1581  0001AE  D002               	goto	l4102
  1582                           
  1583                           ; BSR set to: 0
  1584                           ;main.c: 157: LATCbits.LC1= 1;;
  1585  0001B0  828B               	bsf	3979,1,c	;volatile
  1586                           
  1587                           ;main.c: 158: T1CONbits.TMR1ON = 1;
  1588  0001B2  80CD               	bsf	4045,0,c	;volatile
  1589  0001B4                     l4102:
  1590                           
  1591                           ; BSR set to: 0
  1592                           ;main.c: 159: }
  1593                           ;main.c: 160: if (plat1Left){
  1594  0001B4  0100               	movlb	0	; () banked
  1595  0001B6  5194               	movf	_plat1Left& (0+255),w,b
  1596  0001B8  B4D8               	btfsc	status,2,c
  1597  0001BA  D008               	goto	l249
  1598                           
  1599                           ; BSR set to: 0
  1600                           ;main.c: 161: LATEbits.LE2 = 1;;
  1601  0001BC  848D               	bsf	3981,2,c	;volatile
  1602                           
  1603                           ;main.c: 162: LATAbits.LA3 = 0;;
  1604  0001BE  9689               	bcf	3977,3,c	;volatile
  1605                           
  1606                           ; BSR set to: 0
  1607                           ;main.c: 163: step1 = 1;
  1608  0001C0  0E01               	movlw	1
  1609  0001C2  6E48               	movwf	_step1,c
  1610                           
  1611                           ;main.c: 164: turn1BackRight = 1;
  1612  0001C4  0E01               	movlw	1
  1613  0001C6  0100               	movlb	0	; () banked
  1614  0001C8  6F9A               	movwf	_turn1BackRight& (0+255),b
  1615                           
  1616                           ; BSR set to: 0
  1617                           ;main.c: 165: T1CONbits.TMR1ON = 1;
  1618  0001CA  80CD               	bsf	4045,0,c	;volatile
  1619  0001CC                     l249:
  1620                           
  1621                           ; BSR set to: 0
  1622                           ;main.c: 166: }
  1623                           ;main.c: 167: if (plat1Right){
  1624  0001CC  0100               	movlb	0	; () banked
  1625  0001CE  5195               	movf	_plat1Right& (0+255),w,b
  1626  0001D0  B4D8               	btfsc	status,2,c
  1627  0001D2  D008               	goto	l250
  1628                           
  1629                           ; BSR set to: 0
  1630                           ;main.c: 168: LATEbits.LE2 = 1;;
  1631  0001D4  848D               	bsf	3981,2,c	;volatile
  1632                           
  1633                           ;main.c: 169: LATAbits.LA3 = 0;;
  1634  0001D6  9689               	bcf	3977,3,c	;volatile
  1635                           
  1636                           ; BSR set to: 0
  1637                           ;main.c: 170: step1 = 4;
  1638  0001D8  0E04               	movlw	4
  1639  0001DA  6E48               	movwf	_step1,c
  1640                           
  1641                           ;main.c: 171: turn1BackLeft = 1;
  1642  0001DC  0E01               	movlw	1
  1643  0001DE  0100               	movlb	0	; () banked
  1644  0001E0  6F99               	movwf	_turn1BackLeft& (0+255),b
  1645                           
  1646                           ; BSR set to: 0
  1647                           ;main.c: 172: T1CONbits.TMR1ON = 1;
  1648  0001E2  80CD               	bsf	4045,0,c	;volatile
  1649  0001E4                     l250:
  1650                           
  1651                           ; BSR set to: 0
  1652                           ;main.c: 173: }
  1653                           ;main.c: 174: if (plat2Left){
  1654  0001E4  0100               	movlb	0	; () banked
  1655  0001E6  5196               	movf	_plat2Left& (0+255),w,b
  1656  0001E8  B4D8               	btfsc	status,2,c
  1657  0001EA  D008               	goto	l251
  1658                           
  1659                           ; BSR set to: 0
  1660                           ;main.c: 175: LATBbits.LB0 = 1;;
  1661  0001EC  808A               	bsf	3978,0,c	;volatile
  1662                           
  1663                           ;main.c: 176: LATBbits.LB2 = 0;;
  1664  0001EE  948A               	bcf	3978,2,c	;volatile
  1665                           
  1666                           ; BSR set to: 0
  1667                           ;main.c: 177: step2 = 1;
  1668  0001F0  0E01               	movlw	1
  1669  0001F2  6E49               	movwf	_step2,c
  1670                           
  1671                           ;main.c: 178: turn2BackRight = 1;
  1672  0001F4  0E01               	movlw	1
  1673  0001F6  0100               	movlb	0	; () banked
  1674  0001F8  6F9C               	movwf	_turn2BackRight& (0+255),b
  1675                           
  1676                           ; BSR set to: 0
  1677                           ;main.c: 179: T1CONbits.TMR1ON = 1;
  1678  0001FA  80CD               	bsf	4045,0,c	;volatile
  1679  0001FC                     l251:
  1680                           
  1681                           ; BSR set to: 0
  1682                           ;main.c: 180: }
  1683                           ;main.c: 181: if (plat2Right){
  1684  0001FC  0100               	movlb	0	; () banked
  1685  0001FE  5197               	movf	_plat2Right& (0+255),w,b
  1686  000200  B4D8               	btfsc	status,2,c
  1687  000202  D008               	goto	l4128
  1688                           
  1689                           ; BSR set to: 0
  1690                           ;main.c: 182: LATBbits.LB0 = 1;;
  1691  000204  808A               	bsf	3978,0,c	;volatile
  1692                           
  1693                           ;main.c: 183: LATBbits.LB2 = 0;;
  1694  000206  948A               	bcf	3978,2,c	;volatile
  1695                           
  1696                           ; BSR set to: 0
  1697                           ;main.c: 184: step2 = 4;
  1698  000208  0E04               	movlw	4
  1699  00020A  6E49               	movwf	_step2,c
  1700                           
  1701                           ;main.c: 185: turn2BackLeft = 1;
  1702  00020C  0E01               	movlw	1
  1703  00020E  0100               	movlb	0	; () banked
  1704  000210  6F9B               	movwf	_turn2BackLeft& (0+255),b
  1705                           
  1706                           ; BSR set to: 0
  1707                           ;main.c: 186: T1CONbits.TMR1ON = 1;
  1708  000212  80CD               	bsf	4045,0,c	;volatile
  1709  000214                     l4128:
  1710                           
  1711                           ; BSR set to: 0
  1712  000214  0100               	movlb	0	; () banked
  1713  000216  5194               	movf	_plat1Left& (0+255),w,b
  1714  000218  0100               	movlb	0	; () banked
  1715  00021A  1196               	iorwf	_plat2Left& (0+255),w,b
  1716  00021C  0100               	movlb	0	; () banked
  1717  00021E  1195               	iorwf	_plat1Right& (0+255),w,b
  1718  000220  0100               	movlb	0	; () banked
  1719  000222  1197               	iorwf	_plat2Right& (0+255),w,b
  1720  000224  0100               	movlb	0	; () banked
  1721  000226  6FB0               	movwf	??_main& (0+255),b
  1722  000228  0100               	movlb	0	; () banked
  1723  00022A  51B0               	movf	??_main& (0+255),w,b
  1724  00022C  0100               	movlb	0	; () banked
  1725  00022E  1187               	iorwf	_stepGear& (0+255),w,b
  1726  000230  0100               	movlb	0	; () banked
  1727  000232  6FB1               	movwf	(??_main+1)& (0+255),b
  1728  000234  0E00               	movlw	0
  1729  000236  0100               	movlb	0	; () banked
  1730  000238  1188               	iorwf	(_stepGear+1)& (0+255),w,b
  1731  00023A  0100               	movlb	0	; () banked
  1732  00023C  6FB2               	movwf	(??_main+2)& (0+255),b
  1733  00023E  0100               	movlb	0	; () banked
  1734  000240  51B1               	movf	(??_main+1)& (0+255),w,b
  1735  000242  0100               	movlb	0	; () banked
  1736  000244  11B2               	iorwf	(??_main+2)& (0+255),w,b
  1737  000246  B4D8               	btfsc	status,2,c
  1738  000248  D004               	goto	l4132
  1739                           
  1740                           ; BSR set to: 0
  1741  00024A  0100               	movlb	0	; () banked
  1742  00024C  05B7               	decf	_screenMode& (0+255),w,b
  1743  00024E  B4D8               	btfsc	status,2,c
  1744  000250  D7E1               	goto	l4128
  1745  000252                     l4132:
  1746                           
  1747                           ; BSR set to: 0
  1748                           ;main.c: 189: waitMotor = 1;
  1749  000252  0E01               	movlw	1
  1750  000254  0100               	movlb	0	; () banked
  1751  000256  6F9D               	movwf	_waitMotor& (0+255),b
  1752  000258                     l4134:
  1753                           
  1754                           ; BSR set to: 0
  1755  000258  0100               	movlb	0	; () banked
  1756  00025A  519D               	movf	_waitMotor& (0+255),w,b
  1757  00025C  B4D8               	btfsc	status,2,c
  1758  00025E  D004               	goto	l262
  1759                           
  1760                           ; BSR set to: 0
  1761  000260  0100               	movlb	0	; () banked
  1762  000262  05B7               	decf	_screenMode& (0+255),w,b
  1763  000264  B4D8               	btfsc	status,2,c
  1764  000266  D7F8               	goto	l4134
  1765  000268                     l262:
  1766                           
  1767                           ; BSR set to: 0
  1768                           ;main.c: 193: LATEbits.LE2 = 1;;
  1769  000268  848D               	bsf	3981,2,c	;volatile
  1770                           
  1771                           ;main.c: 194: LATAbits.LA3 = 0;;
  1772  00026A  9689               	bcf	3977,3,c	;volatile
  1773                           
  1774                           ;main.c: 195: LATBbits.LB0 = 1;;
  1775  00026C  808A               	bsf	3978,0,c	;volatile
  1776                           
  1777                           ;main.c: 196: LATBbits.LB2 = 0;;
  1778  00026E  948A               	bcf	3978,2,c	;volatile
  1779                           
  1780                           ;main.c: 197: plat1Left = turn1BackLeft;
  1781  000270  C099  F094         	movff	_turn1BackLeft,_plat1Left
  1782                           
  1783                           ;main.c: 198: plat1Right = turn1BackRight;
  1784  000274  C09A  F095         	movff	_turn1BackRight,_plat1Right
  1785                           
  1786                           ;main.c: 199: plat2Left = turn2BackLeft;
  1787  000278  C09B  F096         	movff	_turn2BackLeft,_plat2Left
  1788                           
  1789                           ;main.c: 200: plat2Right = turn2BackRight;
  1790  00027C  C09C  F097         	movff	_turn2BackRight,_plat2Right
  1791  000280                     l4138:
  1792                           
  1793                           ; BSR set to: 0
  1794  000280  0100               	movlb	0	; () banked
  1795  000282  5194               	movf	_plat1Left& (0+255),w,b
  1796  000284  0100               	movlb	0	; () banked
  1797  000286  1196               	iorwf	_plat2Left& (0+255),w,b
  1798  000288  0100               	movlb	0	; () banked
  1799  00028A  1195               	iorwf	_plat1Right& (0+255),w,b
  1800  00028C  0100               	movlb	0	; () banked
  1801  00028E  1197               	iorwf	_plat2Right& (0+255),w,b
  1802  000290  0100               	movlb	0	; () banked
  1803  000292  6FB0               	movwf	??_main& (0+255),b
  1804  000294  0100               	movlb	0	; () banked
  1805  000296  51B0               	movf	??_main& (0+255),w,b
  1806  000298  0100               	movlb	0	; () banked
  1807  00029A  1187               	iorwf	_stepGear& (0+255),w,b
  1808  00029C  0100               	movlb	0	; () banked
  1809  00029E  6FB1               	movwf	(??_main+1)& (0+255),b
  1810  0002A0  0E00               	movlw	0
  1811  0002A2  0100               	movlb	0	; () banked
  1812  0002A4  1188               	iorwf	(_stepGear+1)& (0+255),w,b
  1813  0002A6  0100               	movlb	0	; () banked
  1814  0002A8  6FB2               	movwf	(??_main+2)& (0+255),b
  1815  0002AA  0100               	movlb	0	; () banked
  1816  0002AC  51B1               	movf	(??_main+1)& (0+255),w,b
  1817  0002AE  0100               	movlb	0	; () banked
  1818  0002B0  11B2               	iorwf	(??_main+2)& (0+255),w,b
  1819  0002B2  B4D8               	btfsc	status,2,c
  1820  0002B4  D004               	goto	l267
  1821                           
  1822                           ; BSR set to: 0
  1823  0002B6  0100               	movlb	0	; () banked
  1824  0002B8  05B7               	decf	_screenMode& (0+255),w,b
  1825  0002BA  B4D8               	btfsc	status,2,c
  1826  0002BC  D7E1               	goto	l4138
  1827  0002BE                     l267:
  1828                           
  1829                           ; BSR set to: 0
  1830                           ;main.c: 203: T1CONbits.TMR1ON = 0;
  1831  0002BE  90CD               	bcf	4045,0,c	;volatile
  1832                           
  1833                           ;main.c: 204: LATCbits.LC2 = 0;;
  1834  0002C0  948B               	bcf	3979,2,c	;volatile
  1835                           
  1836                           ;main.c: 205: LATEbits.LE2 = 0;;
  1837  0002C2  948D               	bcf	3981,2,c	;volatile
  1838                           
  1839                           ;main.c: 206: LATAbits.LA3 = 0;;
  1840  0002C4  9689               	bcf	3977,3,c	;volatile
  1841                           
  1842                           ;main.c: 207: LATAbits.LA4 = 0;;
  1843  0002C6  9889               	bcf	3977,4,c	;volatile
  1844                           
  1845                           ;main.c: 208: LATAbits.LA5 = 0;;
  1846  0002C8  9A89               	bcf	3977,5,c	;volatile
  1847                           
  1848                           ;main.c: 209: LATBbits.LB0 = 0;;
  1849  0002CA  908A               	bcf	3978,0,c	;volatile
  1850                           
  1851                           ;main.c: 210: LATBbits.LB2 = 0;;
  1852  0002CC  948A               	bcf	3978,2,c	;volatile
  1853                           
  1854                           ;main.c: 211: LATBbits.LB3 = 0;;
  1855  0002CE  968A               	bcf	3978,3,c	;volatile
  1856                           
  1857                           ;main.c: 212: LATAbits.LA6 = 0;;
  1858  0002D0  9C89               	bcf	3977,6,c	;volatile
  1859                           
  1860                           ; BSR set to: 0
  1861                           ;main.c: 213: if (((countC + countAA + count9V + countDrain) >= 15)|doneSorting){
  1862  0002D2  0100               	movlb	0	; () banked
  1863  0002D4  518A               	movf	_countAA& (0+255),w,b
  1864  0002D6  C08B  F0B0         	movff	_countC,??_main
  1865  0002DA  0100               	movlb	0	; () banked
  1866  0002DC  6BB1               	clrf	(??_main+1)& (0+255),b
  1867  0002DE  0100               	movlb	0	; () banked
  1868  0002E0  27B0               	addwf	??_main& (0+255),f,b
  1869  0002E2  0E00               	movlw	0
  1870  0002E4  23B1               	addwfc	(??_main+1)& (0+255),f,b
  1871  0002E6  0100               	movlb	0	; () banked
  1872  0002E8  5189               	movf	_count9V& (0+255),w,b
  1873  0002EA  0100               	movlb	0	; () banked
  1874  0002EC  27B0               	addwf	??_main& (0+255),f,b
  1875  0002EE  0E00               	movlw	0
  1876  0002F0  23B1               	addwfc	(??_main+1)& (0+255),f,b
  1877  0002F2  0100               	movlb	0	; () banked
  1878  0002F4  518C               	movf	_countDrain& (0+255),w,b
  1879  0002F6  0100               	movlb	0	; () banked
  1880  0002F8  27B0               	addwf	??_main& (0+255),f,b
  1881  0002FA  0E00               	movlw	0
  1882  0002FC  23B1               	addwfc	(??_main+1)& (0+255),f,b
  1883  0002FE  0100               	movlb	0	; () banked
  1884  000300  BFB1               	btfsc	(??_main+1)& (0+255),7,b
  1885  000302  D00A               	goto	u4430
  1886  000304  0100               	movlb	0	; () banked
  1887  000306  51B1               	movf	(??_main+1)& (0+255),w,b
  1888  000308  E105               	bnz	u4431
  1889  00030A  0E0F               	movlw	15
  1890  00030C  0100               	movlb	0	; () banked
  1891  00030E  5DB0               	subwf	??_main& (0+255),w,b
  1892  000310  A0D8               	btfss	status,0,c
  1893  000312  D002               	goto	u4430
  1894  000314                     u4431:
  1895  000314  0E01               	movlw	1
  1896  000316  D001               	goto	u4440
  1897  000318                     u4430:
  1898  000318  0E00               	movlw	0
  1899  00031A                     u4440:
  1900  00031A  0100               	movlb	0	; () banked
  1901  00031C  6FB2               	movwf	(??_main+2)& (0+255),b
  1902  00031E  6BB3               	clrf	(??_main+3)& (0+255),b
  1903  000320  0100               	movlb	0	; () banked
  1904  000322  518D               	movf	_doneSorting& (0+255),w,b
  1905  000324  0100               	movlb	0	; () banked
  1906  000326  13B2               	iorwf	(??_main+2)& (0+255),f,b
  1907  000328  0E00               	movlw	0
  1908  00032A  13B3               	iorwf	(??_main+3)& (0+255),f,b
  1909  00032C  0100               	movlb	0	; () banked
  1910  00032E  51B2               	movf	(??_main+2)& (0+255),w,b
  1911  000330  0100               	movlb	0	; () banked
  1912  000332  11B3               	iorwf	(??_main+3)& (0+255),w,b
  1913  000334  B4D8               	btfsc	status,2,c
  1914  000336  D005               	goto	l4148
  1915                           
  1916                           ; BSR set to: 0
  1917                           ;main.c: 214: screenMode = 0;
  1918  000338  0E00               	movlw	0
  1919  00033A  0100               	movlb	0	; () banked
  1920  00033C  6FB7               	movwf	_screenMode& (0+255),b
  1921                           
  1922                           ; BSR set to: 0
  1923                           ;main.c: 215: stopOperation();
  1924  00033E  EC2B  F009         	call	_stopOperation	;wreg free
  1925  000342                     l4148:
  1926  000342  0100               	movlb	0	; () banked
  1927  000344  05B7               	decf	_screenMode& (0+255),w,b
  1928  000346  A4D8               	btfss	status,2,c
  1929  000348  D017               	goto	l4156
  1930  00034A  D6FB               	goto	l4084
  1931  00034C                     l4150:
  1932                           
  1933                           ; BSR set to: 0
  1934                           ;main.c: 221: lcdInst(0b10000000);;
  1935  00034C  0E80               	movlw	128
  1936  00034E  ECC4  F00D         	call	_lcdInst
  1937                           
  1938                           ;main.c: 222: printf("DONE! PRESS *   ");
  1939  000352  0E76               	movlw	low STR_5
  1940  000354  0100               	movlb	0	; () banked
  1941  000356  6F9E               	movwf	printf@f& (0+255),b
  1942  000358  0EFF               	movlw	high STR_5
  1943  00035A  0100               	movlb	0	; () banked
  1944  00035C  6F9F               	movwf	(printf@f+1)& (0+255),b
  1945  00035E  EC1D  F003         	call	_printf	;wreg free
  1946                           
  1947                           ;main.c: 223: lcdInst(0b11000000);;
  1948  000362  0EC0               	movlw	192
  1949  000364  ECC4  F00D         	call	_lcdInst
  1950                           
  1951                           ;main.c: 224: printf("TO CONTINUE     ");
  1952  000368  0E54               	movlw	low STR_6
  1953  00036A  0100               	movlb	0	; () banked
  1954  00036C  6F9E               	movwf	printf@f& (0+255),b
  1955  00036E  0EFF               	movlw	high STR_6
  1956  000370  0100               	movlb	0	; () banked
  1957  000372  6F9F               	movwf	(printf@f+1)& (0+255),b
  1958  000374  EC1D  F003         	call	_printf	;wreg free
  1959  000378                     l4156:
  1960  000378  0100               	movlb	0	; () banked
  1961  00037A  51B7               	movf	_screenMode& (0+255),w,b
  1962  00037C  A4D8               	btfss	status,2,c
  1963  00037E  D01F               	goto	l4164
  1964  000380  D7E5               	goto	l4150
  1965  000382                     l4158:
  1966                           
  1967                           ; BSR set to: 0
  1968                           ;main.c: 227: lcdInst(0b10000000);;
  1969  000382  0E80               	movlw	128
  1970  000384  ECC4  F00D         	call	_lcdInst
  1971                           
  1972                           ;main.c: 228: printf("TOTAL RUN TIME: ");
  1973  000388  0E98               	movlw	low STR_7
  1974  00038A  0100               	movlb	0	; () banked
  1975  00038C  6F9E               	movwf	printf@f& (0+255),b
  1976  00038E  0EFF               	movlw	high STR_7
  1977  000390  0100               	movlb	0	; () banked
  1978  000392  6F9F               	movwf	(printf@f+1)& (0+255),b
  1979  000394  EC1D  F003         	call	_printf	;wreg free
  1980                           
  1981                           ;main.c: 229: lcdInst(0b11000000);;
  1982  000398  0EC0               	movlw	192
  1983  00039A  ECC4  F00D         	call	_lcdInst
  1984                           
  1985                           ;main.c: 230: printf("%02d:%02d               ", min, sec);
  1986  00039E  0E6A               	movlw	low STR_8
  1987  0003A0  0100               	movlb	0	; () banked
  1988  0003A2  6F9E               	movwf	printf@f& (0+255),b
  1989  0003A4  0EFE               	movlw	high STR_8
  1990  0003A6  0100               	movlb	0	; () banked
  1991  0003A8  6F9F               	movwf	(printf@f+1)& (0+255),b
  1992  0003AA  C08E  F0A0         	movff	_min,?_printf+2
  1993  0003AE  0100               	movlb	0	; () banked
  1994  0003B0  6BA1               	clrf	(?_printf+3)& (0+255),b
  1995  0003B2  C098  F0A2         	movff	_sec,?_printf+4
  1996  0003B6  0100               	movlb	0	; () banked
  1997  0003B8  6BA3               	clrf	(?_printf+5)& (0+255),b
  1998  0003BA  EC1D  F003         	call	_printf	;wreg free
  1999  0003BE                     l4164:
  2000  0003BE  0E03               	movlw	3
  2001  0003C0  0100               	movlb	0	; () banked
  2002  0003C2  19B7               	xorwf	_screenMode& (0+255),w,b
  2003  0003C4  A4D8               	btfss	status,2,c
  2004  0003C6  D01B               	goto	l4172
  2005  0003C8  D7DC               	goto	l4158
  2006  0003CA                     l4166:
  2007                           
  2008                           ; BSR set to: 0
  2009                           ;main.c: 233: lcdInst(0b10000000);;
  2010  0003CA  0E80               	movlw	128
  2011  0003CC  ECC4  F00D         	call	_lcdInst
  2012                           
  2013                           ;main.c: 234: printf("TOTAL # OF      ");
  2014  0003D0  0E43               	movlw	low STR_9
  2015  0003D2  0100               	movlb	0	; () banked
  2016  0003D4  6F9E               	movwf	printf@f& (0+255),b
  2017  0003D6  0EFF               	movlw	high STR_9
  2018  0003D8  0100               	movlb	0	; () banked
  2019  0003DA  6F9F               	movwf	(printf@f+1)& (0+255),b
  2020  0003DC  EC1D  F003         	call	_printf	;wreg free
  2021                           
  2022                           ;main.c: 235: lcdInst(0b11000000);;
  2023  0003E0  0EC0               	movlw	192
  2024  0003E2  ECC4  F00D         	call	_lcdInst
  2025                           
  2026                           ;main.c: 236: printf("BATTERIES: %02d   ", numBats);
  2027  0003E6  0EDB               	movlw	low STR_10
  2028  0003E8  0100               	movlb	0	; () banked
  2029  0003EA  6F9E               	movwf	printf@f& (0+255),b
  2030  0003EC  0EFE               	movlw	high STR_10
  2031  0003EE  0100               	movlb	0	; () banked
  2032  0003F0  6F9F               	movwf	(printf@f+1)& (0+255),b
  2033  0003F2  C091  F0A0         	movff	_numBats,?_printf+2
  2034  0003F6  0100               	movlb	0	; () banked
  2035  0003F8  6BA1               	clrf	(?_printf+3)& (0+255),b
  2036  0003FA  EC1D  F003         	call	_printf	;wreg free
  2037  0003FE                     l4172:
  2038  0003FE  0E04               	movlw	4
  2039  000400  0100               	movlb	0	; () banked
  2040  000402  19B7               	xorwf	_screenMode& (0+255),w,b
  2041  000404  A4D8               	btfss	status,2,c
  2042  000406  D01B               	goto	l4180
  2043  000408  D7E0               	goto	l4166
  2044  00040A                     l4174:
  2045                           
  2046                           ; BSR set to: 0
  2047                           ;main.c: 239: lcdInst(0b10000000);;
  2048  00040A  0E80               	movlw	128
  2049  00040C  ECC4  F00D         	call	_lcdInst
  2050                           
  2051                           ;main.c: 240: printf("# OF C          ");
  2052  000410  0E10               	movlw	low STR_11
  2053  000412  0100               	movlb	0	; () banked
  2054  000414  6F9E               	movwf	printf@f& (0+255),b
  2055  000416  0EFF               	movlw	high STR_11
  2056  000418  0100               	movlb	0	; () banked
  2057  00041A  6F9F               	movwf	(printf@f+1)& (0+255),b
  2058  00041C  EC1D  F003         	call	_printf	;wreg free
  2059                           
  2060                           ;main.c: 241: lcdInst(0b11000000);;
  2061  000420  0EC0               	movlw	192
  2062  000422  ECC4  F00D         	call	_lcdInst
  2063                           
  2064                           ;main.c: 242: printf("BATTERIES: %02d   ", numC);
  2065  000426  0EDB               	movlw	low STR_10
  2066  000428  0100               	movlb	0	; () banked
  2067  00042A  6F9E               	movwf	printf@f& (0+255),b
  2068  00042C  0EFE               	movlw	high STR_10
  2069  00042E  0100               	movlb	0	; () banked
  2070  000430  6F9F               	movwf	(printf@f+1)& (0+255),b
  2071  000432  C092  F0A0         	movff	_numC,?_printf+2
  2072  000436  0100               	movlb	0	; () banked
  2073  000438  6BA1               	clrf	(?_printf+3)& (0+255),b
  2074  00043A  EC1D  F003         	call	_printf	;wreg free
  2075  00043E                     l4180:
  2076  00043E  0E05               	movlw	5
  2077  000440  0100               	movlb	0	; () banked
  2078  000442  19B7               	xorwf	_screenMode& (0+255),w,b
  2079  000444  A4D8               	btfss	status,2,c
  2080  000446  D01B               	goto	l4188
  2081  000448  D7E0               	goto	l4174
  2082  00044A                     l4182:
  2083                           
  2084                           ; BSR set to: 0
  2085                           ;main.c: 245: lcdInst(0b10000000);;
  2086  00044A  0E80               	movlw	128
  2087  00044C  ECC4  F00D         	call	_lcdInst
  2088                           
  2089                           ;main.c: 246: printf("# OF 9V         ");
  2090  000450  0E32               	movlw	low STR_13
  2091  000452  0100               	movlb	0	; () banked
  2092  000454  6F9E               	movwf	printf@f& (0+255),b
  2093  000456  0EFF               	movlw	high STR_13
  2094  000458  0100               	movlb	0	; () banked
  2095  00045A  6F9F               	movwf	(printf@f+1)& (0+255),b
  2096  00045C  EC1D  F003         	call	_printf	;wreg free
  2097                           
  2098                           ;main.c: 247: lcdInst(0b11000000);;
  2099  000460  0EC0               	movlw	192
  2100  000462  ECC4  F00D         	call	_lcdInst
  2101                           
  2102                           ;main.c: 248: printf("BATTERIES: %02d     ", num9V);
  2103  000466  0EB1               	movlw	low STR_14
  2104  000468  0100               	movlb	0	; () banked
  2105  00046A  6F9E               	movwf	printf@f& (0+255),b
  2106  00046C  0EFE               	movlw	high STR_14
  2107  00046E  0100               	movlb	0	; () banked
  2108  000470  6F9F               	movwf	(printf@f+1)& (0+255),b
  2109  000472  C08F  F0A0         	movff	_num9V,?_printf+2
  2110  000476  0100               	movlb	0	; () banked
  2111  000478  6BA1               	clrf	(?_printf+3)& (0+255),b
  2112  00047A  EC1D  F003         	call	_printf	;wreg free
  2113  00047E                     l4188:
  2114  00047E  0E06               	movlw	6
  2115  000480  0100               	movlb	0	; () banked
  2116  000482  19B7               	xorwf	_screenMode& (0+255),w,b
  2117  000484  A4D8               	btfss	status,2,c
  2118  000486  D01B               	goto	l4196
  2119  000488  D7E0               	goto	l4182
  2120  00048A                     l4190:
  2121                           
  2122                           ; BSR set to: 0
  2123                           ;main.c: 251: lcdInst(0b10000000);;
  2124  00048A  0E80               	movlw	128
  2125  00048C  ECC4  F00D         	call	_lcdInst
  2126                           
  2127                           ;main.c: 252: printf("# OF AA         ");
  2128  000490  0E21               	movlw	low STR_15
  2129  000492  0100               	movlb	0	; () banked
  2130  000494  6F9E               	movwf	printf@f& (0+255),b
  2131  000496  0EFF               	movlw	high STR_15
  2132  000498  0100               	movlb	0	; () banked
  2133  00049A  6F9F               	movwf	(printf@f+1)& (0+255),b
  2134  00049C  EC1D  F003         	call	_printf	;wreg free
  2135                           
  2136                           ;main.c: 253: lcdInst(0b11000000);;
  2137  0004A0  0EC0               	movlw	192
  2138  0004A2  ECC4  F00D         	call	_lcdInst
  2139                           
  2140                           ;main.c: 254: printf("BATTERIES: %02d     ", numAA);
  2141  0004A6  0EB1               	movlw	low STR_14
  2142  0004A8  0100               	movlb	0	; () banked
  2143  0004AA  6F9E               	movwf	printf@f& (0+255),b
  2144  0004AC  0EFE               	movlw	high STR_14
  2145  0004AE  0100               	movlb	0	; () banked
  2146  0004B0  6F9F               	movwf	(printf@f+1)& (0+255),b
  2147  0004B2  C090  F0A0         	movff	_numAA,?_printf+2
  2148  0004B6  0100               	movlb	0	; () banked
  2149  0004B8  6BA1               	clrf	(?_printf+3)& (0+255),b
  2150  0004BA  EC1D  F003         	call	_printf	;wreg free
  2151  0004BE                     l4196:
  2152  0004BE  0E07               	movlw	7
  2153  0004C0  0100               	movlb	0	; () banked
  2154  0004C2  19B7               	xorwf	_screenMode& (0+255),w,b
  2155  0004C4  A4D8               	btfss	status,2,c
  2156  0004C6  D01B               	goto	l4204
  2157  0004C8  D7E0               	goto	l4190
  2158  0004CA                     l4198:
  2159                           
  2160                           ; BSR set to: 0
  2161                           ;main.c: 257: lcdInst(0b10000000);;
  2162  0004CA  0E80               	movlw	128
  2163  0004CC  ECC4  F00D         	call	_lcdInst
  2164                           
  2165                           ;main.c: 258: printf("# OF DRAINED    ");
  2166  0004D0  0E65               	movlw	low STR_17
  2167  0004D2  0100               	movlb	0	; () banked
  2168  0004D4  6F9E               	movwf	printf@f& (0+255),b
  2169  0004D6  0EFF               	movlw	high STR_17
  2170  0004D8  0100               	movlb	0	; () banked
  2171  0004DA  6F9F               	movwf	(printf@f+1)& (0+255),b
  2172  0004DC  EC1D  F003         	call	_printf	;wreg free
  2173                           
  2174                           ;main.c: 259: lcdInst(0b11000000);;
  2175  0004E0  0EC0               	movlw	192
  2176  0004E2  ECC4  F00D         	call	_lcdInst
  2177                           
  2178                           ;main.c: 260: printf("BATTERIES: %02d     ", numDrain);
  2179  0004E6  0EB1               	movlw	low STR_14
  2180  0004E8  0100               	movlb	0	; () banked
  2181  0004EA  6F9E               	movwf	printf@f& (0+255),b
  2182  0004EC  0EFE               	movlw	high STR_14
  2183  0004EE  0100               	movlb	0	; () banked
  2184  0004F0  6F9F               	movwf	(printf@f+1)& (0+255),b
  2185  0004F2  C093  F0A0         	movff	_numDrain,?_printf+2
  2186  0004F6  0100               	movlb	0	; () banked
  2187  0004F8  6BA1               	clrf	(?_printf+3)& (0+255),b
  2188  0004FA  EC1D  F003         	call	_printf	;wreg free
  2189  0004FE                     l4204:
  2190  0004FE  0E08               	movlw	8
  2191  000500  0100               	movlb	0	; () banked
  2192  000502  19B7               	xorwf	_screenMode& (0+255),w,b
  2193  000504  A4D8               	btfss	status,2,c
  2194  000506  D066               	goto	l4226
  2195  000508  D7E0               	goto	l4198
  2196  00050A                     l4206:
  2197                           
  2198                           ; BSR set to: 0
  2199                           ;main.c: 264: I2C_Master_Start();
  2200  00050A  ECDF  F00D         	call	_I2C_Master_Start	;wreg free
  2201                           
  2202                           ;main.c: 265: I2C_Master_Write(0b11010000);
  2203  00050E  0E00               	movlw	0
  2204  000510  6E37               	movwf	I2C_Master_Write@d+1,c
  2205  000512  0ED0               	movlw	208
  2206  000514  6E36               	movwf	I2C_Master_Write@d,c
  2207  000516  ECD6  F00D         	call	_I2C_Master_Write	;wreg free
  2208                           
  2209                           ;main.c: 266: I2C_Master_Write(0x00);
  2210  00051A  0E00               	movlw	0
  2211  00051C  6E37               	movwf	I2C_Master_Write@d+1,c
  2212  00051E  0E00               	movlw	0
  2213  000520  6E36               	movwf	I2C_Master_Write@d,c
  2214  000522  ECD6  F00D         	call	_I2C_Master_Write	;wreg free
  2215                           
  2216                           ;main.c: 267: I2C_Master_Stop();
  2217  000526  ECDB  F00D         	call	_I2C_Master_Stop	;wreg free
  2218                           
  2219                           ;main.c: 269: I2C_Master_Start();
  2220  00052A  ECDF  F00D         	call	_I2C_Master_Start	;wreg free
  2221                           
  2222                           ;main.c: 270: I2C_Master_Write(0b11010001);
  2223  00052E  0E00               	movlw	0
  2224  000530  6E37               	movwf	I2C_Master_Write@d+1,c
  2225  000532  0ED1               	movlw	209
  2226  000534  6E36               	movwf	I2C_Master_Write@d,c
  2227  000536  ECD6  F00D         	call	_I2C_Master_Write	;wreg free
  2228                           
  2229                           ;main.c: 271: for(unsigned char i=0;i<0x06;i++){
  2230  00053A  0E00               	movlw	0
  2231  00053C  0100               	movlb	0	; () banked
  2232  00053E  6FB6               	movwf	main@i_632& (0+255),b
  2233  000540                     l4210:
  2234                           
  2235                           ; BSR set to: 0
  2236  000540  0E05               	movlw	5
  2237  000542  0100               	movlb	0	; () banked
  2238  000544  65B6               	cpfsgt	main@i_632& (0+255),b
  2239  000546  D001               	goto	l4214
  2240  000548  D010               	goto	l4220
  2241  00054A                     l4214:
  2242                           
  2243                           ; BSR set to: 0
  2244                           ;main.c: 272: time[i] = I2C_Master_Read(1);
  2245  00054A  0100               	movlb	0	; () banked
  2246  00054C  51B6               	movf	main@i_632& (0+255),w,b
  2247  00054E  0D01               	mullw	1
  2248  000550  0E80               	movlw	low _time
  2249  000552  24F3               	addwf	prodl,w,c
  2250  000554  6ED9               	movwf	fsr2l,c
  2251  000556  0E00               	movlw	high _time
  2252  000558  20F4               	addwfc	prodh,w,c
  2253  00055A  6EDA               	movwf	fsr2h,c
  2254  00055C  0E01               	movlw	1
  2255  00055E  EC5D  F00D         	call	_I2C_Master_Read
  2256  000562  6EDF               	movwf	indf2,c
  2257  000564  0100               	movlb	0	; () banked
  2258  000566  2BB6               	incf	main@i_632& (0+255),f,b
  2259  000568  D7EB               	goto	l4210
  2260  00056A                     l4220:
  2261                           
  2262                           ; BSR set to: 0
  2263                           ;main.c: 273: }
  2264                           ;main.c: 274: time[6] = I2C_Master_Read(0);
  2265  00056A  0E00               	movlw	0
  2266  00056C  EC5D  F00D         	call	_I2C_Master_Read
  2267  000570  0100               	movlb	0	; () banked
  2268  000572  6F86               	movwf	(_time+6)& (0+255),b
  2269                           
  2270                           ;main.c: 275: I2C_Master_Stop();
  2271  000574  ECDB  F00D         	call	_I2C_Master_Stop	;wreg free
  2272                           
  2273                           ;main.c: 276: lcdInst(0b10000000);;
  2274  000578  0E80               	movlw	128
  2275  00057A  ECC4  F00D         	call	_lcdInst
  2276                           
  2277                           ;main.c: 277: printf("DATE: %02x/%02x/%02x  ", time[6],time[5],time[4]);
  2278  00057E  0E83               	movlw	low STR_19
  2279  000580  0100               	movlb	0	; () banked
  2280  000582  6F9E               	movwf	printf@f& (0+255),b
  2281  000584  0EFE               	movlw	high STR_19
  2282  000586  0100               	movlb	0	; () banked
  2283  000588  6F9F               	movwf	(printf@f+1)& (0+255),b
  2284  00058A  C086  F0A0         	movff	_time+6,?_printf+2
  2285  00058E  0100               	movlb	0	; () banked
  2286  000590  6BA1               	clrf	(?_printf+3)& (0+255),b
  2287  000592  C085  F0A2         	movff	_time+5,?_printf+4
  2288  000596  0100               	movlb	0	; () banked
  2289  000598  6BA3               	clrf	(?_printf+5)& (0+255),b
  2290  00059A  C084  F0A4         	movff	_time+4,?_printf+6
  2291  00059E  0100               	movlb	0	; () banked
  2292  0005A0  6BA5               	clrf	(?_printf+7)& (0+255),b
  2293  0005A2  EC1D  F003         	call	_printf	;wreg free
  2294                           
  2295                           ;main.c: 278: lcdInst(0b11000000);;
  2296  0005A6  0EC0               	movlw	192
  2297  0005A8  ECC4  F00D         	call	_lcdInst
  2298                           
  2299                           ;main.c: 279: printf("TIME: %02x:%02x:%02x  ", time[2],time[1],time[0]);
  2300  0005AC  0E9A               	movlw	low STR_20
  2301  0005AE  0100               	movlb	0	; () banked
  2302  0005B0  6F9E               	movwf	printf@f& (0+255),b
  2303  0005B2  0EFE               	movlw	high STR_20
  2304  0005B4  0100               	movlb	0	; () banked
  2305  0005B6  6F9F               	movwf	(printf@f+1)& (0+255),b
  2306  0005B8  C082  F0A0         	movff	_time+2,?_printf+2
  2307  0005BC  0100               	movlb	0	; () banked
  2308  0005BE  6BA1               	clrf	(?_printf+3)& (0+255),b
  2309  0005C0  C081  F0A2         	movff	_time+1,?_printf+4
  2310  0005C4  0100               	movlb	0	; () banked
  2311  0005C6  6BA3               	clrf	(?_printf+5)& (0+255),b
  2312  0005C8  C080  F0A4         	movff	_time,?_printf+6
  2313  0005CC  0100               	movlb	0	; () banked
  2314  0005CE  6BA5               	clrf	(?_printf+7)& (0+255),b
  2315  0005D0  EC1D  F003         	call	_printf	;wreg free
  2316  0005D4                     l4226:
  2317  0005D4  0E09               	movlw	9
  2318  0005D6  0100               	movlb	0	; () banked
  2319  0005D8  19B7               	xorwf	_screenMode& (0+255),w,b
  2320  0005DA  A4D8               	btfss	status,2,c
  2321  0005DC  D028               	goto	l4238
  2322  0005DE  D795               	goto	l4206
  2323  0005E0                     l4228:
  2324                           
  2325                           ; BSR set to: 0
  2326                           ;main.c: 282: lcdInst(0b10000000);;
  2327  0005E0  0E80               	movlw	128
  2328  0005E2  ECC4  F00D         	call	_lcdInst
  2329                           
  2330                           ;main.c: 283: printf("EMERGENCY STOP  ");
  2331  0005E6  0E87               	movlw	low STR_21
  2332  0005E8  0100               	movlb	0	; () banked
  2333  0005EA  6F9E               	movwf	printf@f& (0+255),b
  2334  0005EC  0EFF               	movlw	high STR_21
  2335  0005EE  0100               	movlb	0	; () banked
  2336  0005F0  6F9F               	movwf	(printf@f+1)& (0+255),b
  2337  0005F2  EC1D  F003         	call	_printf	;wreg free
  2338                           
  2339                           ;main.c: 284: lcdInst(0b11000000);;
  2340  0005F6  0EC0               	movlw	192
  2341  0005F8  ECC4  F00D         	call	_lcdInst
  2342                           
  2343                           ;main.c: 285: printf("                ");
  2344  0005FC  0EFF               	movlw	low STR_22
  2345  0005FE  0100               	movlb	0	; () banked
  2346  000600  6F9E               	movwf	printf@f& (0+255),b
  2347  000602  0EFE               	movlw	high STR_22
  2348  000604  0100               	movlb	0	; () banked
  2349  000606  6F9F               	movwf	(printf@f+1)& (0+255),b
  2350  000608  EC1D  F003         	call	_printf	;wreg free
  2351                           
  2352                           ;main.c: 286: _delay((unsigned long)((2000)*(10000000/4000.0)));
  2353  00060C  0E1A               	movlw	26
  2354  00060E  0100               	movlb	0	; () banked
  2355  000610  6FB1               	movwf	(??_main+1)& (0+255),b
  2356  000612  0E5E               	movlw	94
  2357  000614  0100               	movlb	0	; () banked
  2358  000616  6FB0               	movwf	??_main& (0+255),b
  2359  000618  0E6E               	movlw	110
  2360  00061A                     u4607:
  2361  00061A  2EE8               	decfsz	wreg,f,c
  2362  00061C  D7FE               	bra	u4607
  2363  00061E  2FB0               	decfsz	??_main& (0+255),f,b
  2364  000620  D7FC               	bra	u4607
  2365  000622  2FB1               	decfsz	(??_main+1)& (0+255),f,b
  2366  000624  D7FA               	bra	u4607
  2367  000626  F000               	nop	
  2368                           
  2369                           ;main.c: 287: screenMode = 2;
  2370  000628  0E02               	movlw	2
  2371  00062A  0100               	movlb	0	; () banked
  2372  00062C  6FB7               	movwf	_screenMode& (0+255),b
  2373  00062E                     l4238:
  2374                           
  2375                           ; BSR set to: 0
  2376  00062E  0E0A               	movlw	10
  2377  000630  0100               	movlb	0	; () banked
  2378  000632  19B7               	xorwf	_screenMode& (0+255),w,b
  2379  000634  A4D8               	btfss	status,2,c
  2380  000636  D57F               	goto	l4082
  2381  000638  D7D3               	goto	l4228
  2382  00063A                     __end_of_main:
  2383                           	opt stack 0
  2384                           tblptru	equ	0xFF8
  2385                           tblptrh	equ	0xFF7
  2386                           tblptrl	equ	0xFF6
  2387                           tablat	equ	0xFF5
  2388                           prodh	equ	0xFF4
  2389                           prodl	equ	0xFF3
  2390                           intcon	equ	0xFF2
  2391                           intcon3	equ	0xFF0
  2392                           postinc0	equ	0xFEE
  2393                           wreg	equ	0xFE8
  2394                           indf2	equ	0xFDF
  2395                           fsr2h	equ	0xFDA
  2396                           fsr2l	equ	0xFD9
  2397                           status	equ	0xFD8
  2398                           
  2399 ;; *************** function _testBatteries *****************
  2400 ;; Defined at:
  2401 ;;		line 385 in file "../main.c"
  2402 ;; Parameters:    Size  Location     Type
  2403 ;;		None
  2404 ;; Auto vars:     Size  Location     Type
  2405 ;;		None
  2406 ;; Return value:  Size  Location     Type
  2407 ;;                  1    wreg      void 
  2408 ;; Registers used:
  2409 ;;		wreg, status,2, status,0
  2410 ;; Tracked objects:
  2411 ;;		On entry : 0/0
  2412 ;;		On exit  : 0/0
  2413 ;;		Unchanged: 0/0
  2414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2415 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2416 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2417 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2418 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2419 ;;Total ram usage:        2 bytes
  2420 ;; Hardware stack levels used:    1
  2421 ;; Hardware stack levels required when called:    5
  2422 ;; This function calls:
  2423 ;;		Nothing
  2424 ;; This function is called by:
  2425 ;;		_main
  2426 ;; This function uses a non-reentrant model
  2427 ;;
  2428                           
  2429                           	psect	text1
  2430  001022                     __ptext1:
  2431                           	opt stack 0
  2432  001022                     _testBatteries:
  2433                           	opt stack 25
  2434                           
  2435                           ;main.c: 386: stepGear = 1;
  2436                           
  2437                           ; BSR set to: 0
  2438                           ;incstack = 0
  2439  001022  0E00               	movlw	0
  2440  001024  0100               	movlb	0	; () banked
  2441  001026  6F88               	movwf	(_stepGear+1)& (0+255),b
  2442  001028  0E01               	movlw	1
  2443  00102A  6F87               	movwf	_stepGear& (0+255),b
  2444                           
  2445                           ; BSR set to: 0
  2446                           ;main.c: 387: LATEbits.LE0 = 1;;
  2447  00102C  808D               	bsf	3981,0,c	;volatile
  2448                           
  2449                           ; BSR set to: 0
  2450                           ;main.c: 389: if (((ADRESH<<8)+ADRESL)>=706){
  2451  00102E  50C3               	movf	4035,w,c	;volatile
  2452  001030  CFC4 F035          	movff	4036,??_testBatteries	;volatile
  2453  001034  6A36               	clrf	(??_testBatteries+1)& (0+255),c
  2454  001036  C035  F036         	movff	??_testBatteries,??_testBatteries+1
  2455  00103A  6A35               	clrf	??_testBatteries,c
  2456  00103C  2635               	addwf	??_testBatteries,f,c
  2457  00103E  0E00               	movlw	0
  2458  001040  2236               	addwfc	??_testBatteries+1,f,c
  2459  001042  BE36               	btfsc	??_testBatteries+1,7,c
  2460  001044  D010               	goto	l3252
  2461  001046  0EC2               	movlw	194
  2462  001048  5C35               	subwf	??_testBatteries,w,c
  2463  00104A  0E02               	movlw	2
  2464  00104C  5836               	subwfb	??_testBatteries+1,w,c
  2465  00104E  A0D8               	btfss	status,0,c
  2466  001050  D00A               	goto	l3252
  2467                           
  2468                           ; BSR set to: 0
  2469                           ;main.c: 390: LATEbits.LE0 = 0;;
  2470  001052  908D               	bcf	3981,0,c	;volatile
  2471                           
  2472                           ; BSR set to: 0
  2473                           ;main.c: 391: count9V++;
  2474  001054  0100               	movlb	0	; () banked
  2475  001056  2B89               	incf	_count9V& (0+255),f,b
  2476                           
  2477                           ; BSR set to: 0
  2478                           ;main.c: 392: plat1Right = 1;
  2479  001058  0E01               	movlw	1
  2480  00105A  0100               	movlb	0	; () banked
  2481  00105C  6F95               	movwf	_plat1Right& (0+255),b
  2482                           
  2483                           ; BSR set to: 0
  2484                           ;main.c: 393: plat2Left = 1;
  2485  00105E  0E01               	movlw	1
  2486  001060  0100               	movlb	0	; () banked
  2487  001062  6F96               	movwf	_plat2Left& (0+255),b
  2488                           
  2489                           ; BSR set to: 0
  2490                           ;main.c: 394: return;
  2491  001064  0012               	return	
  2492  001066                     l3252:
  2493                           
  2494                           ; BSR set to: 0
  2495                           ;main.c: 396: else if (((ADRESH<<8)+ADRESL)>=5){
  2496  001066  50C3               	movf	4035,w,c	;volatile
  2497  001068  CFC4 F035          	movff	4036,??_testBatteries	;volatile
  2498  00106C  6A36               	clrf	(??_testBatteries+1)& (0+255),c
  2499  00106E  C035  F036         	movff	??_testBatteries,??_testBatteries+1
  2500  001072  6A35               	clrf	??_testBatteries,c
  2501  001074  2635               	addwf	??_testBatteries,f,c
  2502  001076  0E00               	movlw	0
  2503  001078  2236               	addwfc	??_testBatteries+1,f,c
  2504  00107A  BE36               	btfsc	??_testBatteries+1,7,c
  2505  00107C  D010               	goto	l334
  2506  00107E  5036               	movf	??_testBatteries+1,w,c
  2507  001080  E104               	bnz	u3000
  2508  001082  0E05               	movlw	5
  2509  001084  5C35               	subwf	??_testBatteries,w,c
  2510  001086  A0D8               	btfss	status,0,c
  2511  001088  D00A               	goto	l334
  2512  00108A                     u3000:
  2513                           
  2514                           ; BSR set to: 0
  2515                           ;main.c: 397: LATEbits.LE0 = 0;;
  2516  00108A  908D               	bcf	3981,0,c	;volatile
  2517                           
  2518                           ; BSR set to: 0
  2519                           ;main.c: 398: countDrain++;
  2520  00108C  0100               	movlb	0	; () banked
  2521  00108E  2B8C               	incf	_countDrain& (0+255),f,b
  2522                           
  2523                           ; BSR set to: 0
  2524                           ;main.c: 399: plat1Left = 1;
  2525  001090  0E01               	movlw	1
  2526  001092  0100               	movlb	0	; () banked
  2527  001094  6F94               	movwf	_plat1Left& (0+255),b
  2528                           
  2529                           ; BSR set to: 0
  2530                           ;main.c: 400: plat2Right = 1;
  2531  001096  0E01               	movlw	1
  2532  001098  0100               	movlb	0	; () banked
  2533  00109A  6F97               	movwf	_plat2Right& (0+255),b
  2534                           
  2535                           ; BSR set to: 0
  2536                           ;main.c: 401: return;
  2537  00109C  0012               	return	
  2538  00109E                     l334:
  2539                           
  2540                           ; BSR set to: 0
  2541                           ;main.c: 402: }
  2542                           ;main.c: 405: LATEbits.LE0 = 0;;
  2543  00109E  908D               	bcf	3981,0,c	;volatile
  2544                           
  2545                           ;main.c: 406: LATEbits.LE1 = 1;;
  2546  0010A0  828D               	bsf	3981,1,c	;volatile
  2547                           
  2548                           ; BSR set to: 0
  2549                           ;main.c: 408: if (((ADRESH<<8)+ADRESL)>=5){
  2550  0010A2  50C3               	movf	4035,w,c	;volatile
  2551  0010A4  CFC4 F035          	movff	4036,??_testBatteries	;volatile
  2552  0010A8  6A36               	clrf	(??_testBatteries+1)& (0+255),c
  2553  0010AA  C035  F036         	movff	??_testBatteries,??_testBatteries+1
  2554  0010AE  6A35               	clrf	??_testBatteries,c
  2555  0010B0  2635               	addwf	??_testBatteries,f,c
  2556  0010B2  0E00               	movlw	0
  2557  0010B4  2236               	addwfc	??_testBatteries+1,f,c
  2558  0010B6  BE36               	btfsc	??_testBatteries+1,7,c
  2559  0010B8  D010               	goto	l3278
  2560  0010BA  5036               	movf	??_testBatteries+1,w,c
  2561  0010BC  E104               	bnz	u3010
  2562  0010BE  0E05               	movlw	5
  2563  0010C0  5C35               	subwf	??_testBatteries,w,c
  2564  0010C2  A0D8               	btfss	status,0,c
  2565  0010C4  D00A               	goto	l3278
  2566  0010C6                     u3010:
  2567                           
  2568                           ; BSR set to: 0
  2569                           ;main.c: 409: LATEbits.LE1 = 0;;
  2570  0010C6  928D               	bcf	3981,1,c	;volatile
  2571                           
  2572                           ; BSR set to: 0
  2573                           ;main.c: 410: count9V++;
  2574  0010C8  0100               	movlb	0	; () banked
  2575  0010CA  2B89               	incf	_count9V& (0+255),f,b
  2576                           
  2577                           ; BSR set to: 0
  2578                           ;main.c: 411: plat1Right = 1;
  2579  0010CC  0E01               	movlw	1
  2580  0010CE  0100               	movlb	0	; () banked
  2581  0010D0  6F95               	movwf	_plat1Right& (0+255),b
  2582                           
  2583                           ; BSR set to: 0
  2584                           ;main.c: 412: plat2Left = 1;
  2585  0010D2  0E01               	movlw	1
  2586  0010D4  0100               	movlb	0	; () banked
  2587  0010D6  6F96               	movwf	_plat2Left& (0+255),b
  2588                           
  2589                           ; BSR set to: 0
  2590                           ;main.c: 413: return;
  2591  0010D8  0012               	return	
  2592  0010DA                     l3278:
  2593                           
  2594                           ; BSR set to: 0
  2595                           ;main.c: 415: else if (((ADRESH<<8)+ADRESL)>=5){
  2596  0010DA  50C3               	movf	4035,w,c	;volatile
  2597  0010DC  CFC4 F035          	movff	4036,??_testBatteries	;volatile
  2598  0010E0  6A36               	clrf	(??_testBatteries+1)& (0+255),c
  2599  0010E2  C035  F036         	movff	??_testBatteries,??_testBatteries+1
  2600  0010E6  6A35               	clrf	??_testBatteries,c
  2601  0010E8  2635               	addwf	??_testBatteries,f,c
  2602  0010EA  0E00               	movlw	0
  2603  0010EC  2236               	addwfc	??_testBatteries+1,f,c
  2604  0010EE  BE36               	btfsc	??_testBatteries+1,7,c
  2605  0010F0  D010               	goto	l337
  2606  0010F2  5036               	movf	??_testBatteries+1,w,c
  2607  0010F4  E104               	bnz	u3020
  2608  0010F6  0E05               	movlw	5
  2609  0010F8  5C35               	subwf	??_testBatteries,w,c
  2610  0010FA  A0D8               	btfss	status,0,c
  2611  0010FC  D00A               	goto	l337
  2612  0010FE                     u3020:
  2613                           
  2614                           ; BSR set to: 0
  2615                           ;main.c: 416: LATEbits.LE1 = 0;;
  2616  0010FE  928D               	bcf	3981,1,c	;volatile
  2617                           
  2618                           ; BSR set to: 0
  2619                           ;main.c: 417: countDrain++;
  2620  001100  0100               	movlb	0	; () banked
  2621  001102  2B8C               	incf	_countDrain& (0+255),f,b
  2622                           
  2623                           ; BSR set to: 0
  2624                           ;main.c: 418: plat1Left = 1;
  2625  001104  0E01               	movlw	1
  2626  001106  0100               	movlb	0	; () banked
  2627  001108  6F94               	movwf	_plat1Left& (0+255),b
  2628                           
  2629                           ; BSR set to: 0
  2630                           ;main.c: 419: plat2Right = 1;
  2631  00110A  0E01               	movlw	1
  2632  00110C  0100               	movlb	0	; () banked
  2633  00110E  6F97               	movwf	_plat2Right& (0+255),b
  2634                           
  2635                           ; BSR set to: 0
  2636                           ;main.c: 420: return;
  2637  001110  0012               	return	
  2638  001112                     l337:
  2639                           
  2640                           ; BSR set to: 0
  2641                           ;main.c: 421: }
  2642                           ;main.c: 424: LATEbits.LE1 = 0;;
  2643  001112  928D               	bcf	3981,1,c	;volatile
  2644                           
  2645                           ;main.c: 425: LATCbits.LC5 = 1;;
  2646  001114  8A8B               	bsf	3979,5,c	;volatile
  2647                           
  2648                           ; BSR set to: 0
  2649                           ;main.c: 427: if (((ADRESH<<8)+ADRESL)>=54){
  2650  001116  50C3               	movf	4035,w,c	;volatile
  2651  001118  CFC4 F035          	movff	4036,??_testBatteries	;volatile
  2652  00111C  6A36               	clrf	(??_testBatteries+1)& (0+255),c
  2653  00111E  C035  F036         	movff	??_testBatteries,??_testBatteries+1
  2654  001122  6A35               	clrf	??_testBatteries,c
  2655  001124  2635               	addwf	??_testBatteries,f,c
  2656  001126  0E00               	movlw	0
  2657  001128  2236               	addwfc	??_testBatteries+1,f,c
  2658  00112A  BE36               	btfsc	??_testBatteries+1,7,c
  2659  00112C  D010               	goto	l3304
  2660  00112E  5036               	movf	??_testBatteries+1,w,c
  2661  001130  E104               	bnz	u3030
  2662  001132  0E36               	movlw	54
  2663  001134  5C35               	subwf	??_testBatteries,w,c
  2664  001136  A0D8               	btfss	status,0,c
  2665  001138  D00A               	goto	l3304
  2666  00113A                     u3030:
  2667                           
  2668                           ; BSR set to: 0
  2669                           ;main.c: 428: LATCbits.LC5 = 0;;
  2670  00113A  9A8B               	bcf	3979,5,c	;volatile
  2671                           
  2672                           ; BSR set to: 0
  2673                           ;main.c: 429: countC++;
  2674  00113C  0100               	movlb	0	; () banked
  2675  00113E  2B8B               	incf	_countC& (0+255),f,b
  2676                           
  2677                           ; BSR set to: 0
  2678                           ;main.c: 430: plat1Right = 1;
  2679  001140  0E01               	movlw	1
  2680  001142  0100               	movlb	0	; () banked
  2681  001144  6F95               	movwf	_plat1Right& (0+255),b
  2682                           
  2683                           ; BSR set to: 0
  2684                           ;main.c: 431: plat2Left = 1;
  2685  001146  0E01               	movlw	1
  2686  001148  0100               	movlb	0	; () banked
  2687  00114A  6F96               	movwf	_plat2Left& (0+255),b
  2688                           
  2689                           ; BSR set to: 0
  2690                           ;main.c: 432: return;
  2691  00114C  0012               	return	
  2692  00114E                     l3304:
  2693                           
  2694                           ; BSR set to: 0
  2695                           ;main.c: 434: else if (((ADRESH<<8)+ADRESL)>=5){
  2696  00114E  50C3               	movf	4035,w,c	;volatile
  2697  001150  CFC4 F035          	movff	4036,??_testBatteries	;volatile
  2698  001154  6A36               	clrf	(??_testBatteries+1)& (0+255),c
  2699  001156  C035  F036         	movff	??_testBatteries,??_testBatteries+1
  2700  00115A  6A35               	clrf	??_testBatteries,c
  2701  00115C  2635               	addwf	??_testBatteries,f,c
  2702  00115E  0E00               	movlw	0
  2703  001160  2236               	addwfc	??_testBatteries+1,f,c
  2704  001162  BE36               	btfsc	??_testBatteries+1,7,c
  2705  001164  D010               	goto	l340
  2706  001166  5036               	movf	??_testBatteries+1,w,c
  2707  001168  E104               	bnz	u3040
  2708  00116A  0E05               	movlw	5
  2709  00116C  5C35               	subwf	??_testBatteries,w,c
  2710  00116E  A0D8               	btfss	status,0,c
  2711  001170  D00A               	goto	l340
  2712  001172                     u3040:
  2713                           
  2714                           ; BSR set to: 0
  2715                           ;main.c: 435: LATCbits.LC5 = 0;;
  2716  001172  9A8B               	bcf	3979,5,c	;volatile
  2717                           
  2718                           ; BSR set to: 0
  2719                           ;main.c: 436: countDrain++;
  2720  001174  0100               	movlb	0	; () banked
  2721  001176  2B8C               	incf	_countDrain& (0+255),f,b
  2722                           
  2723                           ; BSR set to: 0
  2724                           ;main.c: 437: plat1Left = 1;
  2725  001178  0E01               	movlw	1
  2726  00117A  0100               	movlb	0	; () banked
  2727  00117C  6F94               	movwf	_plat1Left& (0+255),b
  2728                           
  2729                           ; BSR set to: 0
  2730                           ;main.c: 438: plat2Right = 1;
  2731  00117E  0E01               	movlw	1
  2732  001180  0100               	movlb	0	; () banked
  2733  001182  6F97               	movwf	_plat2Right& (0+255),b
  2734                           
  2735                           ; BSR set to: 0
  2736                           ;main.c: 439: return;
  2737  001184  0012               	return	
  2738  001186                     l340:
  2739                           
  2740                           ; BSR set to: 0
  2741                           ;main.c: 440: }
  2742                           ;main.c: 443: LATCbits.LC5 = 0;;
  2743  001186  9A8B               	bcf	3979,5,c	;volatile
  2744                           
  2745                           ;main.c: 444: LATDbits.LD0 = 1;;
  2746  001188  808C               	bsf	3980,0,c	;volatile
  2747                           
  2748                           ; BSR set to: 0
  2749                           ;main.c: 446: if (((ADRESH<<8)+ADRESL)>=54){
  2750  00118A  50C3               	movf	4035,w,c	;volatile
  2751  00118C  CFC4 F035          	movff	4036,??_testBatteries	;volatile
  2752  001190  6A36               	clrf	(??_testBatteries+1)& (0+255),c
  2753  001192  C035  F036         	movff	??_testBatteries,??_testBatteries+1
  2754  001196  6A35               	clrf	??_testBatteries,c
  2755  001198  2635               	addwf	??_testBatteries,f,c
  2756  00119A  0E00               	movlw	0
  2757  00119C  2236               	addwfc	??_testBatteries+1,f,c
  2758  00119E  BE36               	btfsc	??_testBatteries+1,7,c
  2759  0011A0  D00D               	goto	l3324
  2760  0011A2  5036               	movf	??_testBatteries+1,w,c
  2761  0011A4  E104               	bnz	u3050
  2762  0011A6  0E36               	movlw	54
  2763  0011A8  5C35               	subwf	??_testBatteries,w,c
  2764  0011AA  A0D8               	btfss	status,0,c
  2765  0011AC  D007               	goto	l3324
  2766  0011AE                     u3050:
  2767                           
  2768                           ; BSR set to: 0
  2769                           ;main.c: 447: LATDbits.LD0 = 0;;
  2770  0011AE  908C               	bcf	3980,0,c	;volatile
  2771                           
  2772                           ; BSR set to: 0
  2773                           ;main.c: 448: countAA++;
  2774  0011B0  0100               	movlb	0	; () banked
  2775  0011B2  2B8A               	incf	_countAA& (0+255),f,b
  2776                           
  2777                           ; BSR set to: 0
  2778                           ;main.c: 449: plat1Right = 1;
  2779  0011B4  0E01               	movlw	1
  2780  0011B6  0100               	movlb	0	; () banked
  2781  0011B8  6F95               	movwf	_plat1Right& (0+255),b
  2782                           
  2783                           ;main.c: 450: }
  2784  0011BA  D018               	goto	l3332
  2785  0011BC                     l3324:
  2786                           
  2787                           ; BSR set to: 0
  2788                           ;main.c: 451: else if (((ADRESH<<8)+ADRESL)>=5){
  2789  0011BC  50C3               	movf	4035,w,c	;volatile
  2790  0011BE  CFC4 F035          	movff	4036,??_testBatteries	;volatile
  2791  0011C2  6A36               	clrf	(??_testBatteries+1)& (0+255),c
  2792  0011C4  C035  F036         	movff	??_testBatteries,??_testBatteries+1
  2793  0011C8  6A35               	clrf	??_testBatteries,c
  2794  0011CA  2635               	addwf	??_testBatteries,f,c
  2795  0011CC  0E00               	movlw	0
  2796  0011CE  2236               	addwfc	??_testBatteries+1,f,c
  2797  0011D0  BE36               	btfsc	??_testBatteries+1,7,c
  2798  0011D2  D00C               	goto	l3332
  2799  0011D4  5036               	movf	??_testBatteries+1,w,c
  2800  0011D6  E104               	bnz	u3060
  2801  0011D8  0E05               	movlw	5
  2802  0011DA  5C35               	subwf	??_testBatteries,w,c
  2803  0011DC  A0D8               	btfss	status,0,c
  2804  0011DE  D006               	goto	l3332
  2805  0011E0                     u3060:
  2806                           
  2807                           ; BSR set to: 0
  2808                           ;main.c: 452: LATDbits.LD0 = 0;;
  2809  0011E0  908C               	bcf	3980,0,c	;volatile
  2810                           
  2811                           ; BSR set to: 0
  2812                           ;main.c: 453: countDrain++;
  2813  0011E2  0100               	movlb	0	; () banked
  2814  0011E4  2B8C               	incf	_countDrain& (0+255),f,b
  2815                           
  2816                           ; BSR set to: 0
  2817                           ;main.c: 454: plat1Left = 1;
  2818  0011E6  0E01               	movlw	1
  2819  0011E8  0100               	movlb	0	; () banked
  2820  0011EA  6F94               	movwf	_plat1Left& (0+255),b
  2821  0011EC                     l3332:
  2822                           
  2823                           ; BSR set to: 0
  2824                           ;main.c: 455: }
  2825                           ;main.c: 457: LATDbits.LD0 = 0;;
  2826  0011EC  908C               	bcf	3980,0,c	;volatile
  2827                           
  2828                           ; BSR set to: 0
  2829                           ;main.c: 458: LATDbits.LD1 = 1;;
  2830  0011EE  828C               	bsf	3980,1,c	;volatile
  2831                           
  2832                           ; BSR set to: 0
  2833                           ;main.c: 460: if (((ADRESH<<8)+ADRESL)>=54){
  2834  0011F0  50C3               	movf	4035,w,c	;volatile
  2835  0011F2  CFC4 F035          	movff	4036,??_testBatteries	;volatile
  2836  0011F6  6A36               	clrf	(??_testBatteries+1)& (0+255),c
  2837  0011F8  C035  F036         	movff	??_testBatteries,??_testBatteries+1
  2838  0011FC  6A35               	clrf	??_testBatteries,c
  2839  0011FE  2635               	addwf	??_testBatteries,f,c
  2840  001200  0E00               	movlw	0
  2841  001202  2236               	addwfc	??_testBatteries+1,f,c
  2842  001204  BE36               	btfsc	??_testBatteries+1,7,c
  2843  001206  D00D               	goto	l3344
  2844  001208  5036               	movf	??_testBatteries+1,w,c
  2845  00120A  E104               	bnz	u3070
  2846  00120C  0E36               	movlw	54
  2847  00120E  5C35               	subwf	??_testBatteries,w,c
  2848  001210  A0D8               	btfss	status,0,c
  2849  001212  D007               	goto	l3344
  2850  001214                     u3070:
  2851                           
  2852                           ; BSR set to: 0
  2853                           ;main.c: 461: LATDbits.LD1 = 0;;
  2854  001214  928C               	bcf	3980,1,c	;volatile
  2855                           
  2856                           ; BSR set to: 0
  2857                           ;main.c: 462: countAA++;
  2858  001216  0100               	movlb	0	; () banked
  2859  001218  2B8A               	incf	_countAA& (0+255),f,b
  2860                           
  2861                           ; BSR set to: 0
  2862                           ;main.c: 463: plat2Left = 1;
  2863  00121A  0E01               	movlw	1
  2864  00121C  0100               	movlb	0	; () banked
  2865  00121E  6F96               	movwf	_plat2Left& (0+255),b
  2866                           
  2867                           ;main.c: 464: }
  2868  001220  D018               	goto	l3352
  2869  001222                     l3344:
  2870                           
  2871                           ; BSR set to: 0
  2872                           ;main.c: 465: else if (((ADRESH<<8)+ADRESL)>=5){
  2873  001222  50C3               	movf	4035,w,c	;volatile
  2874  001224  CFC4 F035          	movff	4036,??_testBatteries	;volatile
  2875  001228  6A36               	clrf	(??_testBatteries+1)& (0+255),c
  2876  00122A  C035  F036         	movff	??_testBatteries,??_testBatteries+1
  2877  00122E  6A35               	clrf	??_testBatteries,c
  2878  001230  2635               	addwf	??_testBatteries,f,c
  2879  001232  0E00               	movlw	0
  2880  001234  2236               	addwfc	??_testBatteries+1,f,c
  2881  001236  BE36               	btfsc	??_testBatteries+1,7,c
  2882  001238  D00C               	goto	l3352
  2883  00123A  5036               	movf	??_testBatteries+1,w,c
  2884  00123C  E104               	bnz	u3080
  2885  00123E  0E05               	movlw	5
  2886  001240  5C35               	subwf	??_testBatteries,w,c
  2887  001242  A0D8               	btfss	status,0,c
  2888  001244  D006               	goto	l3352
  2889  001246                     u3080:
  2890                           
  2891                           ; BSR set to: 0
  2892                           ;main.c: 466: LATDbits.LD1 = 0;;
  2893  001246  928C               	bcf	3980,1,c	;volatile
  2894                           
  2895                           ; BSR set to: 0
  2896                           ;main.c: 467: countDrain++;
  2897  001248  0100               	movlb	0	; () banked
  2898  00124A  2B8C               	incf	_countDrain& (0+255),f,b
  2899                           
  2900                           ; BSR set to: 0
  2901                           ;main.c: 468: plat2Right = 1;
  2902  00124C  0E01               	movlw	1
  2903  00124E  0100               	movlb	0	; () banked
  2904  001250  6F97               	movwf	_plat2Right& (0+255),b
  2905  001252                     l3352:
  2906                           
  2907                           ; BSR set to: 0
  2908                           ;main.c: 469: }
  2909                           ;main.c: 471: LATDbits.LD1 = 0;;
  2910  001252  928C               	bcf	3980,1,c	;volatile
  2911  001254  0012               	return	
  2912  001256                     __end_of_testBatteries:
  2913                           	opt stack 0
  2914                           tblptru	equ	0xFF8
  2915                           tblptrh	equ	0xFF7
  2916                           tblptrl	equ	0xFF6
  2917                           tablat	equ	0xFF5
  2918                           prodh	equ	0xFF4
  2919                           prodl	equ	0xFF3
  2920                           intcon	equ	0xFF2
  2921                           intcon3	equ	0xFF0
  2922                           postinc0	equ	0xFEE
  2923                           wreg	equ	0xFE8
  2924                           indf2	equ	0xFDF
  2925                           fsr2h	equ	0xFDA
  2926                           fsr2l	equ	0xFD9
  2927                           status	equ	0xFD8
  2928                           
  2929 ;; *************** function _stopOperation *****************
  2930 ;; Defined at:
  2931 ;;		line 337 in file "../main.c"
  2932 ;; Parameters:    Size  Location     Type
  2933 ;;		None
  2934 ;; Auto vars:     Size  Location     Type
  2935 ;;		None
  2936 ;; Return value:  Size  Location     Type
  2937 ;;                  1    wreg      void 
  2938 ;; Registers used:
  2939 ;;		wreg, status,2, status,0, cstack
  2940 ;; Tracked objects:
  2941 ;;		On entry : 0/0
  2942 ;;		On exit  : 0/0
  2943 ;;		Unchanged: 0/0
  2944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2946 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2948 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2949 ;;Total ram usage:        0 bytes
  2950 ;; Hardware stack levels used:    1
  2951 ;; Hardware stack levels required when called:    6
  2952 ;; This function calls:
  2953 ;;		___awdiv
  2954 ;;		___awmod
  2955 ;; This function is called by:
  2956 ;;		_main
  2957 ;; This function uses a non-reentrant model
  2958 ;;
  2959                           
  2960                           	psect	text2
  2961  001256                     __ptext2:
  2962                           	opt stack 0
  2963  001256                     _stopOperation:
  2964                           	opt stack 24
  2965                           
  2966                           ;main.c: 338: T0CONbits.TMR0ON = 0;
  2967                           
  2968                           ; BSR set to: 0
  2969                           ;incstack = 0
  2970  001256  9ED5               	bcf	4053,7,c	;volatile
  2971                           
  2972                           ;main.c: 339: T1CONbits.TMR1ON = 0;
  2973  001258  90CD               	bcf	4045,0,c	;volatile
  2974                           
  2975                           ;main.c: 340: TMR0 = 55770;
  2976  00125A  0ED9               	movlw	217
  2977  00125C  6ED7               	movwf	4055,c	;volatile
  2978  00125E  0EDA               	movlw	218
  2979  001260  6ED6               	movwf	4054,c	;volatile
  2980                           
  2981                           ;main.c: 341: TMR1 = 58035;
  2982  001262  0EE2               	movlw	226
  2983  001264  6ECF               	movwf	4047,c	;volatile
  2984  001266  0EB3               	movlw	179
  2985  001268  6ECE               	movwf	4046,c	;volatile
  2986                           
  2987                           ;main.c: 342: num9V = count9V;
  2988  00126A  C089  F08F         	movff	_count9V,_num9V
  2989                           
  2990                           ;main.c: 343: numC = countC;
  2991  00126E  C08B  F092         	movff	_countC,_numC
  2992                           
  2993                           ;main.c: 344: numAA = countAA;
  2994  001272  C08A  F090         	movff	_countAA,_numAA
  2995                           
  2996                           ;main.c: 345: numDrain = countDrain;
  2997  001276  C08C  F093         	movff	_countDrain,_numDrain
  2998                           
  2999                           ;main.c: 346: count9V = 0;
  3000  00127A  0E00               	movlw	0
  3001  00127C  0100               	movlb	0	; () banked
  3002  00127E  6F89               	movwf	_count9V& (0+255),b
  3003                           
  3004                           ;main.c: 347: countC = 0;
  3005  001280  0E00               	movlw	0
  3006  001282  0100               	movlb	0	; () banked
  3007  001284  6F8B               	movwf	_countC& (0+255),b
  3008                           
  3009                           ;main.c: 348: countAA = 0;
  3010  001286  0E00               	movlw	0
  3011  001288  0100               	movlb	0	; () banked
  3012  00128A  6F8A               	movwf	_countAA& (0+255),b
  3013                           
  3014                           ;main.c: 349: countDrain = 0;
  3015  00128C  0E00               	movlw	0
  3016  00128E  0100               	movlb	0	; () banked
  3017  001290  6F8C               	movwf	_countDrain& (0+255),b
  3018                           
  3019                           ; BSR set to: 0
  3020                           ;main.c: 350: min = opTimer / 60;
  3021  001292  C047  F035         	movff	_opTimer,___awdiv@dividend
  3022  001296  6A36               	clrf	___awdiv@dividend+1,c
  3023  001298  0E00               	movlw	0
  3024  00129A  6E38               	movwf	___awdiv@divisor+1,c
  3025  00129C  0E3C               	movlw	60
  3026  00129E  6E37               	movwf	___awdiv@divisor,c
  3027  0012A0  ECAB  F00A         	call	___awdiv	;wreg free
  3028  0012A4  5035               	movf	?___awdiv,w,c
  3029  0012A6  0100               	movlb	0	; () banked
  3030  0012A8  6F8E               	movwf	_min& (0+255),b
  3031                           
  3032                           ; BSR set to: 0
  3033                           ;main.c: 351: sec = opTimer % 60;
  3034  0012AA  C047  F035         	movff	_opTimer,___awmod@dividend
  3035  0012AE  6A36               	clrf	___awmod@dividend+1,c
  3036  0012B0  0E00               	movlw	0
  3037  0012B2  6E38               	movwf	___awmod@divisor+1,c
  3038  0012B4  0E3C               	movlw	60
  3039  0012B6  6E37               	movwf	___awmod@divisor,c
  3040  0012B8  EC70  F00B         	call	___awmod	;wreg free
  3041  0012BC  5035               	movf	?___awmod,w,c
  3042  0012BE  0100               	movlb	0	; () banked
  3043  0012C0  6F98               	movwf	_sec& (0+255),b
  3044                           
  3045                           ;main.c: 352: opTimer = 0;
  3046  0012C2  0E00               	movlw	0
  3047  0012C4  6E47               	movwf	_opTimer,c
  3048                           
  3049                           ;main.c: 353: solOnTimer = 0;
  3050  0012C6  0E00               	movlw	0
  3051  0012C8  6E4A               	movwf	_solOnTimer,c
  3052                           
  3053                           ;main.c: 354: doneTimer = 0;
  3054  0012CA  0E00               	movlw	0
  3055  0012CC  6E46               	movwf	_doneTimer,c
  3056                           
  3057                           ;main.c: 355: doneSorting = 0;
  3058  0012CE  0E00               	movlw	0
  3059  0012D0  0100               	movlb	0	; () banked
  3060  0012D2  6F8D               	movwf	_doneSorting& (0+255),b
  3061                           
  3062                           ;main.c: 356: waitMotor = 0;
  3063  0012D4  0E00               	movlw	0
  3064  0012D6  0100               	movlb	0	; () banked
  3065  0012D8  6F9D               	movwf	_waitMotor& (0+255),b
  3066                           
  3067                           ;main.c: 357: stepGear = 0;
  3068  0012DA  0E00               	movlw	0
  3069  0012DC  0100               	movlb	0	; () banked
  3070  0012DE  6F88               	movwf	(_stepGear+1)& (0+255),b
  3071  0012E0  0E00               	movlw	0
  3072  0012E2  6F87               	movwf	_stepGear& (0+255),b
  3073                           
  3074                           ;main.c: 358: plat1Left = 0;
  3075  0012E4  0E00               	movlw	0
  3076  0012E6  0100               	movlb	0	; () banked
  3077  0012E8  6F94               	movwf	_plat1Left& (0+255),b
  3078                           
  3079                           ;main.c: 359: plat1Right = 0;
  3080  0012EA  0E00               	movlw	0
  3081  0012EC  0100               	movlb	0	; () banked
  3082  0012EE  6F95               	movwf	_plat1Right& (0+255),b
  3083                           
  3084                           ;main.c: 360: plat2Left = 0;
  3085  0012F0  0E00               	movlw	0
  3086  0012F2  0100               	movlb	0	; () banked
  3087  0012F4  6F96               	movwf	_plat2Left& (0+255),b
  3088                           
  3089                           ;main.c: 361: plat2Right = 0;
  3090  0012F6  0E00               	movlw	0
  3091  0012F8  0100               	movlb	0	; () banked
  3092  0012FA  6F97               	movwf	_plat2Right& (0+255),b
  3093                           
  3094                           ;main.c: 362: turn2BackLeft = 0;
  3095  0012FC  0E00               	movlw	0
  3096  0012FE  0100               	movlb	0	; () banked
  3097  001300  6F9B               	movwf	_turn2BackLeft& (0+255),b
  3098                           
  3099                           ;main.c: 363: turn1BackLeft = 0;
  3100  001302  0E00               	movlw	0
  3101  001304  0100               	movlb	0	; () banked
  3102  001306  6F99               	movwf	_turn1BackLeft& (0+255),b
  3103                           
  3104                           ;main.c: 364: turn2BackRight = 0;
  3105  001308  0E00               	movlw	0
  3106  00130A  0100               	movlb	0	; () banked
  3107  00130C  6F9C               	movwf	_turn2BackRight& (0+255),b
  3108                           
  3109                           ;main.c: 365: turn1BackRight = 0;
  3110  00130E  0E00               	movlw	0
  3111  001310  0100               	movlb	0	; () banked
  3112  001312  6F9A               	movwf	_turn1BackRight& (0+255),b
  3113                           
  3114                           ; BSR set to: 0
  3115                           ;main.c: 366: LATEbits.LE0 = 0;;
  3116  001314  908D               	bcf	3981,0,c	;volatile
  3117                           
  3118                           ; BSR set to: 0
  3119                           ;main.c: 367: LATEbits.LE1 = 0;;
  3120  001316  928D               	bcf	3981,1,c	;volatile
  3121                           
  3122                           ; BSR set to: 0
  3123                           ;main.c: 368: LATCbits.LC5 = 0;;
  3124  001318  9A8B               	bcf	3979,5,c	;volatile
  3125                           
  3126                           ; BSR set to: 0
  3127                           ;main.c: 369: LATDbits.LD0 = 0;;
  3128  00131A  908C               	bcf	3980,0,c	;volatile
  3129                           
  3130                           ; BSR set to: 0
  3131                           ;main.c: 370: LATDbits.LD1 = 0;;
  3132  00131C  928C               	bcf	3980,1,c	;volatile
  3133                           
  3134                           ; BSR set to: 0
  3135                           ;main.c: 371: LATEbits.LE2 = 0;;
  3136  00131E  948D               	bcf	3981,2,c	;volatile
  3137                           
  3138                           ; BSR set to: 0
  3139                           ;main.c: 372: LATAbits.LA3 = 0;;
  3140  001320  9689               	bcf	3977,3,c	;volatile
  3141                           
  3142                           ; BSR set to: 0
  3143                           ;main.c: 373: LATAbits.LA4 = 0;;
  3144  001322  9889               	bcf	3977,4,c	;volatile
  3145                           
  3146                           ; BSR set to: 0
  3147                           ;main.c: 374: LATAbits.LA5 = 0;;
  3148  001324  9A89               	bcf	3977,5,c	;volatile
  3149                           
  3150                           ; BSR set to: 0
  3151                           ;main.c: 375: LATBbits.LB0 = 0;;
  3152  001326  908A               	bcf	3978,0,c	;volatile
  3153                           
  3154                           ; BSR set to: 0
  3155                           ;main.c: 376: LATBbits.LB2 = 0;;
  3156  001328  948A               	bcf	3978,2,c	;volatile
  3157                           
  3158                           ; BSR set to: 0
  3159                           ;main.c: 377: LATBbits.LB3 = 0;;
  3160  00132A  968A               	bcf	3978,3,c	;volatile
  3161                           
  3162                           ; BSR set to: 0
  3163                           ;main.c: 378: LATAbits.LA6 = 0;;
  3164  00132C  9C89               	bcf	3977,6,c	;volatile
  3165                           
  3166                           ; BSR set to: 0
  3167                           ;main.c: 379: LATCbits.LC1= 0;;
  3168  00132E  928B               	bcf	3979,1,c	;volatile
  3169                           
  3170                           ; BSR set to: 0
  3171                           ;main.c: 380: LATAbits.LA7 = 0;;
  3172  001330  9E89               	bcf	3977,7,c	;volatile
  3173                           
  3174                           ; BSR set to: 0
  3175                           ;main.c: 381: LATCbits.LC2 = 0;;
  3176  001332  948B               	bcf	3979,2,c	;volatile
  3177                           
  3178                           ; BSR set to: 0
  3179                           ;main.c: 382: LATCbits.LC0 = 0;;
  3180  001334  908B               	bcf	3979,0,c	;volatile
  3181                           
  3182                           ; BSR set to: 0
  3183  001336  0012               	return		;funcret
  3184  001338                     __end_of_stopOperation:
  3185                           	opt stack 0
  3186                           tblptru	equ	0xFF8
  3187                           tblptrh	equ	0xFF7
  3188                           tblptrl	equ	0xFF6
  3189                           tablat	equ	0xFF5
  3190                           prodh	equ	0xFF4
  3191                           prodl	equ	0xFF3
  3192                           intcon	equ	0xFF2
  3193                           intcon3	equ	0xFF0
  3194                           postinc0	equ	0xFEE
  3195                           wreg	equ	0xFE8
  3196                           indf2	equ	0xFDF
  3197                           fsr2h	equ	0xFDA
  3198                           fsr2l	equ	0xFD9
  3199                           status	equ	0xFD8
  3200                           
  3201 ;; *************** function ___awmod *****************
  3202 ;; Defined at:
  3203 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  3204 ;; Parameters:    Size  Location     Type
  3205 ;;  dividend        2   52[COMRAM] int 
  3206 ;;  divisor         2   54[COMRAM] int 
  3207 ;; Auto vars:     Size  Location     Type
  3208 ;;  sign            1   57[COMRAM] unsigned char 
  3209 ;;  counter         1   56[COMRAM] unsigned char 
  3210 ;; Return value:  Size  Location     Type
  3211 ;;                  2   52[COMRAM] int 
  3212 ;; Registers used:
  3213 ;;		wreg, status,2, status,0
  3214 ;; Tracked objects:
  3215 ;;		On entry : 0/0
  3216 ;;		On exit  : 0/0
  3217 ;;		Unchanged: 0/0
  3218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3219 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3220 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3221 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3222 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3223 ;;Total ram usage:        6 bytes
  3224 ;; Hardware stack levels used:    1
  3225 ;; Hardware stack levels required when called:    5
  3226 ;; This function calls:
  3227 ;;		Nothing
  3228 ;; This function is called by:
  3229 ;;		_stopOperation
  3230 ;; This function uses a non-reentrant model
  3231 ;;
  3232                           
  3233                           	psect	text3
  3234  0016E0                     __ptext3:
  3235                           	opt stack 0
  3236  0016E0                     ___awmod:
  3237                           	opt stack 24
  3238                           
  3239                           ; BSR set to: 0
  3240                           ;incstack = 0
  3241  0016E0  0E00               	movlw	0
  3242  0016E2  6E3A               	movwf	___awmod@sign,c
  3243  0016E4  AE36               	btfss	___awmod@dividend+1,7,c
  3244  0016E6  D006               	goto	l2756
  3245  0016E8  6C35               	negf	___awmod@dividend,c
  3246  0016EA  1E36               	comf	___awmod@dividend+1,f,c
  3247  0016EC  B0D8               	btfsc	status,0,c
  3248  0016EE  2A36               	incf	___awmod@dividend+1,f,c
  3249  0016F0  0E01               	movlw	1
  3250  0016F2  6E3A               	movwf	___awmod@sign,c
  3251  0016F4                     l2756:
  3252  0016F4  AE38               	btfss	___awmod@divisor+1,7,c
  3253  0016F6  D004               	goto	l2760
  3254  0016F8  6C37               	negf	___awmod@divisor,c
  3255  0016FA  1E38               	comf	___awmod@divisor+1,f,c
  3256  0016FC  B0D8               	btfsc	status,0,c
  3257  0016FE  2A38               	incf	___awmod@divisor+1,f,c
  3258  001700                     l2760:
  3259  001700  5037               	movf	___awmod@divisor,w,c
  3260  001702  1038               	iorwf	___awmod@divisor+1,w,c
  3261  001704  B4D8               	btfsc	status,2,c
  3262  001706  D018               	goto	l2776
  3263  001708  0E01               	movlw	1
  3264  00170A  6E39               	movwf	___awmod@counter,c
  3265  00170C  D004               	goto	l2766
  3266  00170E                     l2764:
  3267  00170E  90D8               	bcf	status,0,c
  3268  001710  3637               	rlcf	___awmod@divisor,f,c
  3269  001712  3638               	rlcf	___awmod@divisor+1,f,c
  3270  001714  2A39               	incf	___awmod@counter,f,c
  3271  001716                     l2766:
  3272  001716  AE38               	btfss	___awmod@divisor+1,7,c
  3273  001718  D7FA               	goto	l2764
  3274  00171A                     l2768:
  3275  00171A  5037               	movf	___awmod@divisor,w,c
  3276  00171C  5C35               	subwf	___awmod@dividend,w,c
  3277  00171E  5038               	movf	___awmod@divisor+1,w,c
  3278  001720  5836               	subwfb	___awmod@dividend+1,w,c
  3279  001722  A0D8               	btfss	status,0,c
  3280  001724  D004               	goto	l2772
  3281  001726  5037               	movf	___awmod@divisor,w,c
  3282  001728  5E35               	subwf	___awmod@dividend,f,c
  3283  00172A  5038               	movf	___awmod@divisor+1,w,c
  3284  00172C  5A36               	subwfb	___awmod@dividend+1,f,c
  3285  00172E                     l2772:
  3286  00172E  90D8               	bcf	status,0,c
  3287  001730  3238               	rrcf	___awmod@divisor+1,f,c
  3288  001732  3237               	rrcf	___awmod@divisor,f,c
  3289  001734  2E39               	decfsz	___awmod@counter,f,c
  3290  001736  D7F1               	goto	l2768
  3291  001738                     l2776:
  3292  001738  503A               	movf	___awmod@sign,w,c
  3293  00173A  B4D8               	btfsc	status,2,c
  3294  00173C  D004               	goto	l2780
  3295  00173E  6C35               	negf	___awmod@dividend,c
  3296  001740  1E36               	comf	___awmod@dividend+1,f,c
  3297  001742  B0D8               	btfsc	status,0,c
  3298  001744  2A36               	incf	___awmod@dividend+1,f,c
  3299  001746                     l2780:
  3300  001746  C035  F035         	movff	___awmod@dividend,?___awmod
  3301  00174A  C036  F036         	movff	___awmod@dividend+1,?___awmod+1
  3302  00174E  0012               	return	
  3303  001750                     __end_of___awmod:
  3304                           	opt stack 0
  3305                           tblptru	equ	0xFF8
  3306                           tblptrh	equ	0xFF7
  3307                           tblptrl	equ	0xFF6
  3308                           tablat	equ	0xFF5
  3309                           prodh	equ	0xFF4
  3310                           prodl	equ	0xFF3
  3311                           intcon	equ	0xFF2
  3312                           intcon3	equ	0xFF0
  3313                           postinc0	equ	0xFEE
  3314                           wreg	equ	0xFE8
  3315                           indf2	equ	0xFDF
  3316                           fsr2h	equ	0xFDA
  3317                           fsr2l	equ	0xFD9
  3318                           status	equ	0xFD8
  3319                           
  3320 ;; *************** function ___awdiv *****************
  3321 ;; Defined at:
  3322 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  3323 ;; Parameters:    Size  Location     Type
  3324 ;;  dividend        2   52[COMRAM] int 
  3325 ;;  divisor         2   54[COMRAM] int 
  3326 ;; Auto vars:     Size  Location     Type
  3327 ;;  quotient        2   58[COMRAM] int 
  3328 ;;  sign            1   57[COMRAM] unsigned char 
  3329 ;;  counter         1   56[COMRAM] unsigned char 
  3330 ;; Return value:  Size  Location     Type
  3331 ;;                  2   52[COMRAM] int 
  3332 ;; Registers used:
  3333 ;;		wreg, status,2, status,0
  3334 ;; Tracked objects:
  3335 ;;		On entry : 0/0
  3336 ;;		On exit  : 0/0
  3337 ;;		Unchanged: 0/0
  3338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3339 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3340 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3341 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3342 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3343 ;;Total ram usage:        8 bytes
  3344 ;; Hardware stack levels used:    1
  3345 ;; Hardware stack levels required when called:    5
  3346 ;; This function calls:
  3347 ;;		Nothing
  3348 ;; This function is called by:
  3349 ;;		_stopOperation
  3350 ;; This function uses a non-reentrant model
  3351 ;;
  3352                           
  3353                           	psect	text4
  3354  001556                     __ptext4:
  3355                           	opt stack 0
  3356  001556                     ___awdiv:
  3357                           	opt stack 24
  3358                           
  3359                           ;incstack = 0
  3360  001556  0E00               	movlw	0
  3361  001558  6E3A               	movwf	___awdiv@sign,c
  3362  00155A  AE38               	btfss	___awdiv@divisor+1,7,c
  3363  00155C  D006               	goto	l2712
  3364  00155E  6C37               	negf	___awdiv@divisor,c
  3365  001560  1E38               	comf	___awdiv@divisor+1,f,c
  3366  001562  B0D8               	btfsc	status,0,c
  3367  001564  2A38               	incf	___awdiv@divisor+1,f,c
  3368  001566  0E01               	movlw	1
  3369  001568  6E3A               	movwf	___awdiv@sign,c
  3370  00156A                     l2712:
  3371  00156A  AE36               	btfss	___awdiv@dividend+1,7,c
  3372  00156C  D006               	goto	l2718
  3373  00156E  6C35               	negf	___awdiv@dividend,c
  3374  001570  1E36               	comf	___awdiv@dividend+1,f,c
  3375  001572  B0D8               	btfsc	status,0,c
  3376  001574  2A36               	incf	___awdiv@dividend+1,f,c
  3377  001576  0E01               	movlw	1
  3378  001578  1A3A               	xorwf	___awdiv@sign,f,c
  3379  00157A                     l2718:
  3380  00157A  0E00               	movlw	0
  3381  00157C  6E3C               	movwf	___awdiv@quotient+1,c
  3382  00157E  0E00               	movlw	0
  3383  001580  6E3B               	movwf	___awdiv@quotient,c
  3384  001582  5037               	movf	___awdiv@divisor,w,c
  3385  001584  1038               	iorwf	___awdiv@divisor+1,w,c
  3386  001586  B4D8               	btfsc	status,2,c
  3387  001588  D01C               	goto	l2740
  3388  00158A  0E01               	movlw	1
  3389  00158C  6E39               	movwf	___awdiv@counter,c
  3390  00158E  D004               	goto	l2726
  3391  001590                     l2724:
  3392  001590  90D8               	bcf	status,0,c
  3393  001592  3637               	rlcf	___awdiv@divisor,f,c
  3394  001594  3638               	rlcf	___awdiv@divisor+1,f,c
  3395  001596  2A39               	incf	___awdiv@counter,f,c
  3396  001598                     l2726:
  3397  001598  AE38               	btfss	___awdiv@divisor+1,7,c
  3398  00159A  D7FA               	goto	l2724
  3399  00159C                     l2728:
  3400  00159C  90D8               	bcf	status,0,c
  3401  00159E  363B               	rlcf	___awdiv@quotient,f,c
  3402  0015A0  363C               	rlcf	___awdiv@quotient+1,f,c
  3403  0015A2  5037               	movf	___awdiv@divisor,w,c
  3404  0015A4  5C35               	subwf	___awdiv@dividend,w,c
  3405  0015A6  5038               	movf	___awdiv@divisor+1,w,c
  3406  0015A8  5836               	subwfb	___awdiv@dividend+1,w,c
  3407  0015AA  A0D8               	btfss	status,0,c
  3408  0015AC  D005               	goto	l2736
  3409  0015AE  5037               	movf	___awdiv@divisor,w,c
  3410  0015B0  5E35               	subwf	___awdiv@dividend,f,c
  3411  0015B2  5038               	movf	___awdiv@divisor+1,w,c
  3412  0015B4  5A36               	subwfb	___awdiv@dividend+1,f,c
  3413  0015B6  803B               	bsf	___awdiv@quotient,0,c
  3414  0015B8                     l2736:
  3415  0015B8  90D8               	bcf	status,0,c
  3416  0015BA  3238               	rrcf	___awdiv@divisor+1,f,c
  3417  0015BC  3237               	rrcf	___awdiv@divisor,f,c
  3418  0015BE  2E39               	decfsz	___awdiv@counter,f,c
  3419  0015C0  D7ED               	goto	l2728
  3420  0015C2                     l2740:
  3421  0015C2  503A               	movf	___awdiv@sign,w,c
  3422  0015C4  B4D8               	btfsc	status,2,c
  3423  0015C6  D004               	goto	l2744
  3424  0015C8  6C3B               	negf	___awdiv@quotient,c
  3425  0015CA  1E3C               	comf	___awdiv@quotient+1,f,c
  3426  0015CC  B0D8               	btfsc	status,0,c
  3427  0015CE  2A3C               	incf	___awdiv@quotient+1,f,c
  3428  0015D0                     l2744:
  3429  0015D0  C03B  F035         	movff	___awdiv@quotient,?___awdiv
  3430  0015D4  C03C  F036         	movff	___awdiv@quotient+1,?___awdiv+1
  3431  0015D8  0012               	return	
  3432  0015DA                     __end_of___awdiv:
  3433                           	opt stack 0
  3434                           tblptru	equ	0xFF8
  3435                           tblptrh	equ	0xFF7
  3436                           tblptrl	equ	0xFF6
  3437                           tablat	equ	0xFF5
  3438                           prodh	equ	0xFF4
  3439                           prodl	equ	0xFF3
  3440                           intcon	equ	0xFF2
  3441                           intcon3	equ	0xFF0
  3442                           postinc0	equ	0xFEE
  3443                           wreg	equ	0xFE8
  3444                           indf2	equ	0xFDF
  3445                           fsr2h	equ	0xFDA
  3446                           fsr2l	equ	0xFD9
  3447                           status	equ	0xFD8
  3448                           
  3449 ;; *************** function _printf *****************
  3450 ;; Defined at:
  3451 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  3452 ;; Parameters:    Size  Location     Type
  3453 ;;  f               2    0[BANK0 ] PTR const unsigned char 
  3454 ;;		 -> STR_24(21), STR_23(17), STR_22(17), STR_21(17), 
  3455 ;;		 -> STR_20(23), STR_19(23), STR_18(21), STR_17(17), 
  3456 ;;		 -> STR_16(21), STR_15(17), STR_14(21), STR_13(17), 
  3457 ;;		 -> STR_12(19), STR_11(17), STR_10(19), STR_9(17), 
  3458 ;;		 -> STR_8(25), STR_7(17), STR_6(17), STR_5(17), 
  3459 ;;		 -> STR_4(17), STR_3(17), STR_2(17), STR_1(17), 
  3460 ;; Auto vars:     Size  Location     Type
  3461 ;;  idx             1    8[BANK0 ] unsigned char 
  3462 ;;  tmpval          4    0        struct .
  3463 ;;  cp              3    0        PTR const unsigned char 
  3464 ;;  width           2   15[BANK0 ] int 
  3465 ;;  val             2   12[BANK0 ] unsigned int 
  3466 ;;  ap              2    9[BANK0 ] PTR void [1]
  3467 ;;		 -> ?i2_printf(2), ?_printf(2), 
  3468 ;;  len             2    0        unsigned int 
  3469 ;;  c               1   17[BANK0 ] char 
  3470 ;;  flag            1   14[BANK0 ] unsigned char 
  3471 ;;  prec            1   11[BANK0 ] char 
  3472 ;; Return value:  Size  Location     Type
  3473 ;;                  2    0[BANK0 ] int 
  3474 ;; Registers used:
  3475 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3476 ;; Tracked objects:
  3477 ;;		On entry : 0/0
  3478 ;;		On exit  : 0/0
  3479 ;;		Unchanged: 0/0
  3480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3481 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3482 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3483 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3484 ;;      Totals:         4      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3485 ;;Total ram usage:       22 bytes
  3486 ;; Hardware stack levels used:    1
  3487 ;; Hardware stack levels required when called:    7
  3488 ;; This function calls:
  3489 ;;		___lwdiv
  3490 ;;		___lwmod
  3491 ;;		___wmul
  3492 ;;		_isdigit
  3493 ;;		_putch
  3494 ;; This function is called by:
  3495 ;;		_main
  3496 ;; This function uses a non-reentrant model
  3497 ;;
  3498                           
  3499                           	psect	text5
  3500  00063A                     __ptext5:
  3501                           	opt stack 0
  3502  00063A                     _printf:
  3503                           	opt stack 23
  3504                           
  3505                           ;doprnt.c: 466: va_list ap;
  3506                           ;doprnt.c: 499: signed char c;
  3507                           ;doprnt.c: 501: int width;
  3508                           ;doprnt.c: 506: signed char prec;
  3509                           ;doprnt.c: 508: unsigned char flag;
  3510                           ;doprnt.c: 523: union {
  3511                           ;doprnt.c: 524: unsigned long vd;
  3512                           ;doprnt.c: 525: double integ;
  3513                           ;doprnt.c: 526: } tmpval;
  3514                           ;doprnt.c: 528: unsigned int val;
  3515                           ;doprnt.c: 529: unsigned len;
  3516                           ;doprnt.c: 530: const char * cp;
  3517                           ;doprnt.c: 533: *ap = __va_start();
  3518                           
  3519                           ;incstack = 0
  3520  00063A  0EA0               	movlw	low (?_printf+2)
  3521  00063C  0100               	movlb	0	; () banked
  3522  00063E  6FA7               	movwf	printf@ap& (0+255),b
  3523  000640  0E00               	movlw	high (?_printf+2)
  3524  000642  0100               	movlb	0	; () banked
  3525  000644  6FA8               	movwf	(printf@ap+1)& (0+255),b
  3526                           
  3527                           ;doprnt.c: 536: while(c = *f++) {
  3528  000646  D1B2               	goto	l4018
  3529  000648                     l3892:
  3530                           
  3531                           ; BSR set to: 0
  3532                           ;doprnt.c: 538: if(c != '%')
  3533  000648  0E25               	movlw	37
  3534  00064A  0100               	movlb	0	; () banked
  3535  00064C  19AF               	xorwf	printf@c& (0+255),w,b
  3536  00064E  B4D8               	btfsc	status,2,c
  3537  000650  D005               	goto	l3896
  3538                           
  3539                           ; BSR set to: 0
  3540                           ;doprnt.c: 540: {
  3541                           ;doprnt.c: 541: (putch(c) );
  3542  000652  0100               	movlb	0	; () banked
  3543  000654  51AF               	movf	printf@c& (0+255),w,b
  3544  000656  ECBE  F00D         	call	_putch
  3545                           
  3546                           ;doprnt.c: 542: continue;
  3547  00065A  D1A8               	goto	l4018
  3548  00065C                     l3896:
  3549                           
  3550                           ;doprnt.c: 543: }
  3551                           ;doprnt.c: 546: width = 0;
  3552  00065C  0E00               	movlw	0
  3553  00065E  0100               	movlb	0	; () banked
  3554  000660  6FAE               	movwf	(printf@width+1)& (0+255),b
  3555  000662  0E00               	movlw	0
  3556  000664  6FAD               	movwf	printf@width& (0+255),b
  3557                           
  3558                           ;doprnt.c: 548: flag = 0;
  3559  000666  0E00               	movlw	0
  3560  000668  0100               	movlb	0	; () banked
  3561  00066A  6FAC               	movwf	printf@flag& (0+255),b
  3562                           
  3563                           ; BSR set to: 0
  3564                           ;doprnt.c: 551: switch(*f) {
  3565                           
  3566                           ;doprnt.c: 550: for(;;) {
  3567  00066C  D005               	goto	l3902
  3568  00066E                     l3898:
  3569                           
  3570                           ;doprnt.c: 580: flag |= 0x04;
  3571  00066E  0100               	movlb	0	; () banked
  3572  000670  85AC               	bsf	printf@flag& (0+255),2,b
  3573                           
  3574                           ;doprnt.c: 581: f++;
  3575  000672  0100               	movlb	0	; () banked
  3576  000674  4B9E               	infsnz	printf@f& (0+255),f,b
  3577  000676  2B9F               	incf	(printf@f+1)& (0+255),f,b
  3578  000678                     l3902:
  3579  000678  C09E  FFF6         	movff	printf@f,tblptrl
  3580  00067C  C09F  FFF7         	movff	printf@f+1,tblptrh
  3581  000680                     	if	0	;tblptru may be non-zero
  3582  000680                     	endif
  3583  000680                     	if	0	;tblptru may be non-zero
  3584  000680                     	endif
  3585  000680  0008               	tblrd		*
  3586  000682  50F5               	movf	tablat,w,c
  3587                           
  3588                           ; Switch size 1, requested type "space"
  3589                           ; Number of cases is 1, Range of values is 48 to 48
  3590                           ; switch strategies available:
  3591                           ; Name         Instructions Cycles
  3592                           ; simple_byte            4     3 (average)
  3593                           ;	Chosen strategy is simple_byte
  3594  000684  0A30               	xorlw	48	; case 48
  3595  000686  B4D8               	btfsc	status,2,c
  3596  000688  D7F2               	goto	l3898
  3597                           
  3598                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  3599                           
  3600                           ;doprnt.c: 586: }
  3601                           
  3602                           ;doprnt.c: 585: break;
  3603  00068A  C09E  FFF6         	movff	printf@f,tblptrl
  3604  00068E  C09F  FFF7         	movff	printf@f+1,tblptrh
  3605  000692                     	if	0	;tblptru may be non-zero
  3606  000692                     	endif
  3607  000692                     	if	0	;tblptru may be non-zero
  3608  000692                     	endif
  3609  000692  0008               	tblrd		*
  3610  000694  50F5               	movf	tablat,w,c
  3611  000696  EC83  F00D         	call	_isdigit
  3612  00069A  A0D8               	btfss	status,0,c
  3613  00069C  D03A               	goto	l3920
  3614                           
  3615                           ;doprnt.c: 598: width = 0;
  3616  00069E  0E00               	movlw	0
  3617  0006A0  0100               	movlb	0	; () banked
  3618  0006A2  6FAE               	movwf	(printf@width+1)& (0+255),b
  3619  0006A4  0E00               	movlw	0
  3620  0006A6  6FAD               	movwf	printf@width& (0+255),b
  3621  0006A8                     l3908:
  3622                           
  3623                           ;doprnt.c: 600: width *= 10;
  3624  0006A8  C0AD  F035         	movff	printf@width,___wmul@multiplier
  3625  0006AC  C0AE  F036         	movff	printf@width+1,___wmul@multiplier+1
  3626  0006B0  0E00               	movlw	0
  3627  0006B2  6E38               	movwf	___wmul@multiplicand+1,c
  3628  0006B4  0E0A               	movlw	10
  3629  0006B6  6E37               	movwf	___wmul@multiplicand,c
  3630  0006B8  EC4A  F00D         	call	___wmul	;wreg free
  3631  0006BC  C035  F0AD         	movff	?___wmul,printf@width
  3632  0006C0  C036  F0AE         	movff	?___wmul+1,printf@width+1
  3633                           
  3634                           ;doprnt.c: 601: width += *f++ - '0';
  3635  0006C4  0ED0               	movlw	208
  3636  0006C6  6E41               	movwf	??_printf& (0+255),c
  3637  0006C8  0EFF               	movlw	255
  3638  0006CA  6E42               	movwf	(??_printf+1)& (0+255),c
  3639  0006CC  C09E  FFF6         	movff	printf@f,tblptrl
  3640  0006D0  C09F  FFF7         	movff	printf@f+1,tblptrh
  3641  0006D4                     	if	0	;tblptru may be non-zero
  3642  0006D4                     	endif
  3643  0006D4                     	if	0	;tblptru may be non-zero
  3644  0006D4                     	endif
  3645  0006D4  0008               	tblrd		*
  3646  0006D6  50F5               	movf	tablat,w,c
  3647  0006D8  6E43               	movwf	(??_printf+2)& (0+255),c
  3648  0006DA  6A44               	clrf	(??_printf+3)& (0+255),c
  3649  0006DC  5041               	movf	??_printf,w,c
  3650  0006DE  2643               	addwf	??_printf+2,f,c
  3651  0006E0  5042               	movf	??_printf+1,w,c
  3652  0006E2  2244               	addwfc	??_printf+3,f,c
  3653  0006E4  5043               	movf	??_printf+2,w,c
  3654  0006E6  0100               	movlb	0	; () banked
  3655  0006E8  27AD               	addwf	printf@width& (0+255),f,b
  3656  0006EA  5044               	movf	??_printf+3,w,c
  3657  0006EC  0100               	movlb	0	; () banked
  3658  0006EE  23AE               	addwfc	(printf@width+1)& (0+255),f,b
  3659                           
  3660                           ; BSR set to: 0
  3661  0006F0  0100               	movlb	0	; () banked
  3662  0006F2  4B9E               	infsnz	printf@f& (0+255),f,b
  3663  0006F4  2B9F               	incf	(printf@f+1)& (0+255),f,b
  3664                           
  3665                           ; BSR set to: 0
  3666                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  3667  0006F6  C09E  FFF6         	movff	printf@f,tblptrl
  3668  0006FA  C09F  FFF7         	movff	printf@f+1,tblptrh
  3669  0006FE                     	if	0	;tblptru may be non-zero
  3670  0006FE                     	endif
  3671  0006FE                     	if	0	;tblptru may be non-zero
  3672  0006FE                     	endif
  3673  0006FE  0008               	tblrd		*
  3674  000700  50F5               	movf	tablat,w,c
  3675  000702  EC83  F00D         	call	_isdigit
  3676  000706  A0D8               	btfss	status,0,c
  3677  000708  D004               	goto	l3920
  3678  00070A  D7CE               	goto	l3908
  3679  00070C                     l3916:
  3680                           
  3681                           ;doprnt.c: 721: flag |= 0x80;
  3682  00070C  0100               	movlb	0	; () banked
  3683  00070E  8FAC               	bsf	printf@flag& (0+255),7,b
  3684                           
  3685                           ;doprnt.c: 723: break;
  3686  000710  D019               	goto	l438
  3687  000712                     l3920:
  3688  000712  C09E  FFF6         	movff	printf@f,tblptrl
  3689  000716  C09F  FFF7         	movff	printf@f+1,tblptrh
  3690  00071A  0100               	movlb	0	; () banked
  3691  00071C  4B9E               	infsnz	printf@f& (0+255),f,b
  3692  00071E  2B9F               	incf	(printf@f+1)& (0+255),f,b
  3693  000720                     	if	0	;tblptru may be non-zero
  3694  000720                     	endif
  3695  000720                     	if	0	;tblptru may be non-zero
  3696  000720                     	endif
  3697  000720  0008               	tblrd		*
  3698  000722  CFF5 F0AF          	movff	tablat,printf@c
  3699  000726  0100               	movlb	0	; () banked
  3700  000728  51AF               	movf	printf@c& (0+255),w,b
  3701                           
  3702                           ; Switch size 1, requested type "space"
  3703                           ; Number of cases is 4, Range of values is 0 to 120
  3704                           ; switch strategies available:
  3705                           ; Name         Instructions Cycles
  3706                           ; simple_byte           13     7 (average)
  3707                           ;	Chosen strategy is simple_byte
  3708  00072A  0A00               	xorlw	0	; case 0
  3709  00072C  B4D8               	btfsc	status,2,c
  3710  00072E  0012               	return	
  3711  000730  0A64               	xorlw	100	; case 100
  3712  000732  B4D8               	btfsc	status,2,c
  3713  000734  D007               	goto	l438
  3714  000736  0A0D               	xorlw	13	; case 105
  3715  000738  B4D8               	btfsc	status,2,c
  3716  00073A  D004               	goto	l438
  3717  00073C  0A11               	xorlw	17	; case 120
  3718  00073E  B4D8               	btfsc	status,2,c
  3719  000740  D7E5               	goto	l3916
  3720  000742  D134               	goto	l4018
  3721  000744                     l438:
  3722                           
  3723                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  3724  000744  0100               	movlb	0	; () banked
  3725  000746  BFAC               	btfsc	printf@flag& (0+255),7,b
  3726  000748  D019               	goto	l3932
  3727                           
  3728                           ; BSR set to: 0
  3729                           ;doprnt.c: 1253: {
  3730                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3731  00074A  C0A7  FFD9         	movff	printf@ap,fsr2l
  3732  00074E  C0A8  FFDA         	movff	printf@ap+1,fsr2h
  3733  000752  CFDE F0AA          	movff	postinc2,printf@val
  3734  000756  CFDD F0AB          	movff	postdec2,printf@val+1
  3735                           
  3736                           ; BSR set to: 0
  3737  00075A  0E02               	movlw	2
  3738  00075C  0100               	movlb	0	; () banked
  3739  00075E  27A7               	addwf	printf@ap& (0+255),f,b
  3740  000760  0E00               	movlw	0
  3741  000762  23A8               	addwfc	(printf@ap+1)& (0+255),f,b
  3742                           
  3743                           ; BSR set to: 0
  3744                           ;doprnt.c: 1261: if((int)val < 0) {
  3745  000764  0100               	movlb	0	; () banked
  3746  000766  AFAB               	btfss	(printf@val+1)& (0+255),7,b
  3747  000768  D053               	goto	l3966
  3748                           
  3749                           ; BSR set to: 0
  3750                           ;doprnt.c: 1262: flag |= 0x03;
  3751  00076A  0E03               	movlw	3
  3752  00076C  0100               	movlb	0	; () banked
  3753  00076E  13AC               	iorwf	printf@flag& (0+255),f,b
  3754                           
  3755                           ; BSR set to: 0
  3756                           ;doprnt.c: 1263: val = -val;
  3757  000770  0100               	movlb	0	; () banked
  3758  000772  6DAA               	negf	printf@val& (0+255),b
  3759  000774  1FAB               	comf	(printf@val+1)& (0+255),f,b
  3760  000776  B0D8               	btfsc	status,0,c
  3761  000778  2BAB               	incf	(printf@val+1)& (0+255),f,b
  3762                           
  3763                           ; BSR set to: 0
  3764                           ;doprnt.c: 1264: }
  3765                           ;doprnt.c: 1266: }
  3766  00077A  D04A               	goto	l3966
  3767  00077C                     l3932:
  3768                           
  3769                           ; BSR set to: 0
  3770                           ;doprnt.c: 1268: else
  3771                           ;doprnt.c: 1273: {
  3772                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3773  00077C  C0A7  FFD9         	movff	printf@ap,fsr2l
  3774  000780  C0A8  FFDA         	movff	printf@ap+1,fsr2h
  3775  000784  CFDE F0AA          	movff	postinc2,printf@val
  3776  000788  CFDD F0AB          	movff	postdec2,printf@val+1
  3777                           
  3778                           ; BSR set to: 0
  3779  00078C  0E02               	movlw	2
  3780  00078E  0100               	movlb	0	; () banked
  3781  000790  27A7               	addwf	printf@ap& (0+255),f,b
  3782  000792  0E00               	movlw	0
  3783  000794  23A8               	addwfc	(printf@ap+1)& (0+255),f,b
  3784                           
  3785                           ; BSR set to: 0
  3786                           ;doprnt.c: 1287: }
  3787                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  3788  000796  D03C               	goto	l3966
  3789  000798                     l3936:
  3790                           
  3791                           ; BSR set to: 0
  3792                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3793  000798  0E01               	movlw	1
  3794  00079A  0100               	movlb	0	; () banked
  3795  00079C  6FAF               	movwf	printf@c& (0+255),b
  3796  00079E                     l3938:
  3797                           
  3798                           ; BSR set to: 0
  3799  00079E  0E05               	movlw	5
  3800  0007A0  0100               	movlb	0	; () banked
  3801  0007A2  19AF               	xorwf	printf@c& (0+255),w,b
  3802  0007A4  B4D8               	btfsc	status,2,c
  3803  0007A6  D03D               	goto	l3968
  3804                           
  3805                           ; BSR set to: 0
  3806                           ;doprnt.c: 1306: if(val < dpowers[c])
  3807                           
  3808                           ; BSR set to: 0
  3809                           
  3810                           ; BSR set to: 0
  3811  0007A8  0100               	movlb	0	; () banked
  3812  0007AA  51AF               	movf	printf@c& (0+255),w,b
  3813  0007AC  0D02               	mullw	2
  3814  0007AE  0E58               	movlw	low _dpowers
  3815  0007B0  24F3               	addwf	prodl,w,c
  3816  0007B2  6EF6               	movwf	tblptrl,c
  3817  0007B4  0EFE               	movlw	high _dpowers
  3818  0007B6  20F4               	addwfc	prodh,w,c
  3819  0007B8  6EF7               	movwf	tblptrh,c
  3820  0007BA                     	if	0	;There are less than 3 active tblptr bytes
  3821  0007BA                     	endif
  3822  0007BA  0009               	tblrd		*+
  3823  0007BC  50F5               	movf	tablat,w,c
  3824  0007BE  0100               	movlb	0	; () banked
  3825  0007C0  5DAA               	subwf	printf@val& (0+255),w,b
  3826  0007C2  0009               	tblrd		*+
  3827  0007C4  50F5               	movf	tablat,w,c
  3828  0007C6  0100               	movlb	0	; () banked
  3829  0007C8  59AB               	subwfb	(printf@val+1)& (0+255),w,b
  3830  0007CA  A0D8               	btfss	status,0,c
  3831  0007CC  D02A               	goto	l3968
  3832                           
  3833                           ; BSR set to: 0
  3834                           
  3835                           ; BSR set to: 0
  3836                           
  3837                           ; BSR set to: 0
  3838                           ;doprnt.c: 1307: break;
  3839  0007CE  0100               	movlb	0	; () banked
  3840  0007D0  2BAF               	incf	printf@c& (0+255),f,b
  3841  0007D2  D7E5               	goto	l3938
  3842  0007D4                     l3950:
  3843                           
  3844                           ; BSR set to: 0
  3845                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  3846  0007D4  0E01               	movlw	1
  3847  0007D6  0100               	movlb	0	; () banked
  3848  0007D8  6FAF               	movwf	printf@c& (0+255),b
  3849  0007DA                     l3952:
  3850                           
  3851                           ; BSR set to: 0
  3852  0007DA  0E04               	movlw	4
  3853  0007DC  0100               	movlb	0	; () banked
  3854  0007DE  19AF               	xorwf	printf@c& (0+255),w,b
  3855  0007E0  B4D8               	btfsc	status,2,c
  3856  0007E2  D01F               	goto	l3968
  3857                           
  3858                           ; BSR set to: 0
  3859                           ;doprnt.c: 1317: if(val < hexpowers[c])
  3860                           
  3861                           ; BSR set to: 0
  3862                           
  3863                           ; BSR set to: 0
  3864  0007E4  0100               	movlb	0	; () banked
  3865  0007E6  51AF               	movf	printf@c& (0+255),w,b
  3866  0007E8  0D02               	mullw	2
  3867  0007EA  0E62               	movlw	low _hexpowers
  3868  0007EC  24F3               	addwf	prodl,w,c
  3869  0007EE  6EF6               	movwf	tblptrl,c
  3870  0007F0  0EFE               	movlw	high _hexpowers
  3871  0007F2  20F4               	addwfc	prodh,w,c
  3872  0007F4  6EF7               	movwf	tblptrh,c
  3873  0007F6                     	if	0	;There are less than 3 active tblptr bytes
  3874  0007F6                     	endif
  3875  0007F6  0009               	tblrd		*+
  3876  0007F8  50F5               	movf	tablat,w,c
  3877  0007FA  0100               	movlb	0	; () banked
  3878  0007FC  5DAA               	subwf	printf@val& (0+255),w,b
  3879  0007FE  0009               	tblrd		*+
  3880  000800  50F5               	movf	tablat,w,c
  3881  000802  0100               	movlb	0	; () banked
  3882  000804  59AB               	subwfb	(printf@val+1)& (0+255),w,b
  3883  000806  A0D8               	btfss	status,0,c
  3884  000808  D00C               	goto	l3968
  3885                           
  3886                           ; BSR set to: 0
  3887                           
  3888                           ; BSR set to: 0
  3889                           
  3890                           ; BSR set to: 0
  3891                           ;doprnt.c: 1318: break;
  3892  00080A  0100               	movlb	0	; () banked
  3893  00080C  2BAF               	incf	printf@c& (0+255),f,b
  3894  00080E  D7E5               	goto	l3952
  3895  000810                     l3966:
  3896                           
  3897                           ; BSR set to: 0
  3898  000810  0100               	movlb	0	; () banked
  3899  000812  51AC               	movf	printf@flag& (0+255),w,b
  3900  000814  0B80               	andlw	128
  3901                           
  3902                           ; Switch size 1, requested type "space"
  3903                           ; Number of cases is 2, Range of values is 0 to 128
  3904                           ; switch strategies available:
  3905                           ; Name         Instructions Cycles
  3906                           ; simple_byte            7     4 (average)
  3907                           ;	Chosen strategy is simple_byte
  3908  000816  0A00               	xorlw	0	; case 0
  3909  000818  B4D8               	btfsc	status,2,c
  3910  00081A  D7BE               	goto	l3936
  3911  00081C  0A80               	xorlw	128	; case 128
  3912  00081E  B4D8               	btfsc	status,2,c
  3913  000820  D7D9               	goto	l3950
  3914  000822                     l3968:
  3915                           
  3916                           ; BSR set to: 0
  3917                           ;doprnt.c: 1345: if(width && flag & 0x03)
  3918  000822  0100               	movlb	0	; () banked
  3919  000824  51AD               	movf	printf@width& (0+255),w,b
  3920  000826  0100               	movlb	0	; () banked
  3921  000828  11AE               	iorwf	(printf@width+1)& (0+255),w,b
  3922  00082A  B4D8               	btfsc	status,2,c
  3923  00082C  D00A               	goto	l3974
  3924                           
  3925                           ; BSR set to: 0
  3926  00082E  C0AC  F041         	movff	printf@flag,??_printf
  3927  000832  0E03               	movlw	3
  3928  000834  1641               	andwf	??_printf,f,c
  3929  000836  B4D8               	btfsc	status,2,c
  3930  000838  D004               	goto	l3974
  3931                           
  3932                           ; BSR set to: 0
  3933                           ;doprnt.c: 1346: width--;
  3934  00083A  0100               	movlb	0	; () banked
  3935  00083C  07AD               	decf	printf@width& (0+255),f,b
  3936  00083E  A0D8               	btfss	status,0,c
  3937  000840  07AE               	decf	(printf@width+1)& (0+255),f,b
  3938  000842                     l3974:
  3939                           
  3940                           ; BSR set to: 0
  3941                           ;doprnt.c: 1381: if(width > c)
  3942  000842  0E80               	movlw	128
  3943  000844  0100               	movlb	0	; () banked
  3944  000846  BFAF               	btfsc	printf@c& (0+255),7,b
  3945  000848  0E7F               	movlw	127
  3946  00084A  6E41               	movwf	??_printf& (0+255),c
  3947  00084C  0100               	movlb	0	; () banked
  3948  00084E  51AD               	movf	printf@width& (0+255),w,b
  3949  000850  0100               	movlb	0	; () banked
  3950  000852  5DAF               	subwf	printf@c& (0+255),w,b
  3951  000854  0100               	movlb	0	; () banked
  3952  000856  51AE               	movf	(printf@width+1)& (0+255),w,b
  3953  000858  0A80               	xorlw	128
  3954  00085A  5841               	subwfb	??_printf& (0+255),w,c
  3955  00085C  B0D8               	btfsc	status,0,c
  3956  00085E  D00B               	goto	l3978
  3957                           
  3958                           ; BSR set to: 0
  3959                           ;doprnt.c: 1382: width -= c;
  3960  000860  0100               	movlb	0	; () banked
  3961  000862  51AF               	movf	printf@c& (0+255),w,b
  3962  000864  0100               	movlb	0	; () banked
  3963  000866  5FAD               	subwf	printf@width& (0+255),f,b
  3964  000868  0E00               	movlw	0
  3965  00086A  0100               	movlb	0	; () banked
  3966  00086C  BFAF               	btfsc	printf@c& (0+255),7,b
  3967  00086E  0EFF               	movlw	255
  3968  000870  0100               	movlb	0	; () banked
  3969  000872  5BAE               	subwfb	(printf@width+1)& (0+255),f,b
  3970  000874  D005               	goto	l3980
  3971  000876                     l3978:
  3972                           
  3973                           ; BSR set to: 0
  3974                           ;doprnt.c: 1383: else
  3975                           ;doprnt.c: 1384: width = 0;
  3976  000876  0E00               	movlw	0
  3977  000878  0100               	movlb	0	; () banked
  3978  00087A  6FAE               	movwf	(printf@width+1)& (0+255),b
  3979  00087C  0E00               	movlw	0
  3980  00087E  6FAD               	movwf	printf@width& (0+255),b
  3981  000880                     l3980:
  3982                           
  3983                           ; BSR set to: 0
  3984                           ;doprnt.c: 1387: if(flag & 0x04) {
  3985  000880  0100               	movlb	0	; () banked
  3986  000882  A5AC               	btfss	printf@flag& (0+255),2,b
  3987  000884  D017               	goto	l3992
  3988                           
  3989                           ; BSR set to: 0
  3990                           ;doprnt.c: 1392: if(flag & 0x03)
  3991  000886  C0AC  F041         	movff	printf@flag,??_printf
  3992  00088A  0E03               	movlw	3
  3993  00088C  1641               	andwf	??_printf,f,c
  3994  00088E  B4D8               	btfsc	status,2,c
  3995  000890  D003               	goto	l3986
  3996                           
  3997                           ; BSR set to: 0
  3998                           ;doprnt.c: 1393: (putch('-') );
  3999  000892  0E2D               	movlw	45
  4000  000894  ECBE  F00D         	call	_putch
  4001  000898                     l3986:
  4002                           
  4003                           ;doprnt.c: 1415: if(width)
  4004  000898  0100               	movlb	0	; () banked
  4005  00089A  51AD               	movf	printf@width& (0+255),w,b
  4006  00089C  0100               	movlb	0	; () banked
  4007  00089E  11AE               	iorwf	(printf@width+1)& (0+255),w,b
  4008  0008A0  B4D8               	btfsc	status,2,c
  4009  0008A2  D024               	goto	l4002
  4010                           
  4011                           ; BSR set to: 0
  4012                           ;doprnt.c: 1417: (putch('0') );
  4013                           
  4014                           ; BSR set to: 0
  4015                           
  4016                           ;doprnt.c: 1416: do
  4017  0008A4  0E30               	movlw	48
  4018  0008A6  ECBE  F00D         	call	_putch
  4019                           
  4020                           ;doprnt.c: 1418: while(--width);
  4021  0008AA  0100               	movlb	0	; () banked
  4022  0008AC  07AD               	decf	printf@width& (0+255),f,b
  4023  0008AE  A0D8               	btfss	status,0,c
  4024  0008B0  07AE               	decf	(printf@width+1)& (0+255),f,b
  4025  0008B2  D7F2               	goto	l3986
  4026  0008B4                     l3992:
  4027                           
  4028                           ; BSR set to: 0
  4029                           ;doprnt.c: 1422: {
  4030                           ;doprnt.c: 1424: if(width
  4031                           ;doprnt.c: 1428: )
  4032  0008B4  0100               	movlb	0	; () banked
  4033  0008B6  51AD               	movf	printf@width& (0+255),w,b
  4034  0008B8  0100               	movlb	0	; () banked
  4035  0008BA  11AE               	iorwf	(printf@width+1)& (0+255),w,b
  4036  0008BC  B4D8               	btfsc	status,2,c
  4037  0008BE  D00D               	goto	l3998
  4038  0008C0                     l3994:
  4039                           
  4040                           ; BSR set to: 0
  4041                           ;doprnt.c: 1430: (putch(' ') );
  4042  0008C0  0E20               	movlw	32
  4043  0008C2  ECBE  F00D         	call	_putch
  4044                           
  4045                           ;doprnt.c: 1431: while(--width);
  4046  0008C6  0100               	movlb	0	; () banked
  4047  0008C8  07AD               	decf	printf@width& (0+255),f,b
  4048  0008CA  A0D8               	btfss	status,0,c
  4049  0008CC  07AE               	decf	(printf@width+1)& (0+255),f,b
  4050  0008CE  0100               	movlb	0	; () banked
  4051  0008D0  51AD               	movf	printf@width& (0+255),w,b
  4052  0008D2  0100               	movlb	0	; () banked
  4053  0008D4  11AE               	iorwf	(printf@width+1)& (0+255),w,b
  4054  0008D6  A4D8               	btfss	status,2,c
  4055  0008D8  D7F3               	goto	l3994
  4056  0008DA                     l3998:
  4057                           
  4058                           ; BSR set to: 0
  4059                           ;doprnt.c: 1438: if(flag & 0x03)
  4060  0008DA  C0AC  F041         	movff	printf@flag,??_printf
  4061  0008DE  0E03               	movlw	3
  4062  0008E0  1641               	andwf	??_printf,f,c
  4063  0008E2  B4D8               	btfsc	status,2,c
  4064  0008E4  D003               	goto	l4002
  4065                           
  4066                           ; BSR set to: 0
  4067                           ;doprnt.c: 1439: (putch('-') );
  4068  0008E6  0E2D               	movlw	45
  4069  0008E8  ECBE  F00D         	call	_putch
  4070  0008EC                     l4002:
  4071                           
  4072                           ;doprnt.c: 1469: }
  4073                           ;doprnt.c: 1472: prec = c;
  4074  0008EC  C0AF  F0A9         	movff	printf@c,printf@prec
  4075                           
  4076                           ;doprnt.c: 1474: while(prec--) {
  4077  0008F0  D057               	goto	l4016
  4078  0008F2                     l4004:
  4079                           
  4080                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4081  0008F2  0100               	movlb	0	; () banked
  4082  0008F4  51A9               	movf	printf@prec& (0+255),w,b
  4083  0008F6  0D02               	mullw	2
  4084  0008F8  0E58               	movlw	low _dpowers
  4085  0008FA  24F3               	addwf	prodl,w,c
  4086  0008FC  6EF6               	movwf	tblptrl,c
  4087  0008FE  0EFE               	movlw	high _dpowers
  4088  000900  20F4               	addwfc	prodh,w,c
  4089  000902  6EF7               	movwf	tblptrh,c
  4090  000904                     	if	0	;There are less than 3 active tblptr bytes
  4091  000904                     	endif
  4092  000904  0009               	tblrd		*+
  4093  000906  CFF5 F037          	movff	tablat,___lwdiv@divisor
  4094  00090A  000A               	tblrd		*-
  4095  00090C  CFF5 F038          	movff	tablat,___lwdiv@divisor+1
  4096  000910  C0AA  F035         	movff	printf@val,___lwdiv@dividend
  4097  000914  C0AB  F036         	movff	printf@val+1,___lwdiv@dividend+1
  4098  000918  EC0E  F00C         	call	___lwdiv	;wreg free
  4099  00091C  C035  F03C         	movff	?___lwdiv,___lwmod@dividend
  4100  000920  C036  F03D         	movff	?___lwdiv+1,___lwmod@dividend+1
  4101  000924  0E00               	movlw	0
  4102  000926  6E3F               	movwf	___lwmod@divisor+1,c
  4103  000928  0E0A               	movlw	10
  4104  00092A  6E3E               	movwf	___lwmod@divisor,c
  4105  00092C  ECF4  F00C         	call	___lwmod	;wreg free
  4106  000930  503C               	movf	?___lwmod,w,c
  4107  000932  0F30               	addlw	48
  4108  000934  0100               	movlb	0	; () banked
  4109  000936  6FAF               	movwf	printf@c& (0+255),b
  4110                           
  4111                           ;doprnt.c: 1491: break;
  4112  000938  D02F               	goto	l4014
  4113  00093A                     l4006:
  4114                           
  4115                           ; BSR set to: 0
  4116                           ;doprnt.c: 1499: {
  4117                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  4118  00093A  C0AA  F035         	movff	printf@val,___lwdiv@dividend
  4119  00093E  C0AB  F036         	movff	printf@val+1,___lwdiv@dividend+1
  4120  000942  0100               	movlb	0	; () banked
  4121  000944  51A9               	movf	printf@prec& (0+255),w,b
  4122  000946  0D02               	mullw	2
  4123  000948  0E62               	movlw	low _hexpowers
  4124  00094A  24F3               	addwf	prodl,w,c
  4125  00094C  6EF6               	movwf	tblptrl,c
  4126  00094E  0EFE               	movlw	high _hexpowers
  4127  000950  20F4               	addwfc	prodh,w,c
  4128  000952  6EF7               	movwf	tblptrh,c
  4129  000954                     	if	0	;There are less than 3 active tblptr bytes
  4130  000954                     	endif
  4131  000954  0009               	tblrd		*+
  4132  000956  CFF5 F037          	movff	tablat,___lwdiv@divisor
  4133  00095A  000A               	tblrd		*-
  4134  00095C  CFF5 F038          	movff	tablat,___lwdiv@divisor+1
  4135  000960  EC0E  F00C         	call	___lwdiv	;wreg free
  4136  000964  5035               	movf	?___lwdiv,w,c
  4137  000966  0B0F               	andlw	15
  4138  000968  0100               	movlb	0	; () banked
  4139  00096A  6FA6               	movwf	printf@idx& (0+255),b
  4140                           
  4141                           ; BSR set to: 0
  4142                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  4143  00096C  0100               	movlb	0	; () banked
  4144  00096E  51A6               	movf	printf@idx& (0+255),w,b
  4145  000970  0D01               	mullw	1
  4146  000972  0EEE               	movlw	low STR_25
  4147  000974  24F3               	addwf	prodl,w,c
  4148  000976  6EF6               	movwf	tblptrl,c
  4149  000978  0EFE               	movlw	high STR_25
  4150  00097A  20F4               	addwfc	prodh,w,c
  4151  00097C  6EF7               	movwf	tblptrh,c
  4152  00097E                     	if	0	;There are less than 3 active tblptr bytes
  4153  00097E                     	endif
  4154  00097E  0008               	tblrd		*
  4155  000980  CFF5 F0AF          	movff	tablat,printf@c
  4156                           
  4157                           ; BSR set to: 0
  4158                           ;doprnt.c: 1523: }
  4159                           
  4160                           ;doprnt.c: 1508: }
  4161                           ;doprnt.c: 1510: break;
  4162  000984  D009               	goto	l4014
  4163  000986                     l4012:
  4164  000986  0100               	movlb	0	; () banked
  4165  000988  51AC               	movf	printf@flag& (0+255),w,b
  4166  00098A  0B80               	andlw	128
  4167                           
  4168                           ; Switch size 1, requested type "space"
  4169                           ; Number of cases is 2, Range of values is 0 to 128
  4170                           ; switch strategies available:
  4171                           ; Name         Instructions Cycles
  4172                           ; simple_byte            7     4 (average)
  4173                           ;	Chosen strategy is simple_byte
  4174  00098C  0A00               	xorlw	0	; case 0
  4175  00098E  B4D8               	btfsc	status,2,c
  4176  000990  D7B0               	goto	l4004
  4177  000992  0A80               	xorlw	128	; case 128
  4178  000994  B4D8               	btfsc	status,2,c
  4179  000996  D7D1               	goto	l4006
  4180  000998                     l4014:
  4181                           
  4182                           ; BSR set to: 0
  4183                           ;doprnt.c: 1524: (putch(c) );
  4184  000998  0100               	movlb	0	; () banked
  4185  00099A  51AF               	movf	printf@c& (0+255),w,b
  4186  00099C  ECBE  F00D         	call	_putch
  4187  0009A0                     l4016:
  4188  0009A0  0100               	movlb	0	; () banked
  4189  0009A2  07A9               	decf	printf@prec& (0+255),f,b
  4190  0009A4  0100               	movlb	0	; () banked
  4191  0009A6  29A9               	incf	printf@prec& (0+255),w,b
  4192  0009A8  A4D8               	btfss	status,2,c
  4193  0009AA  D7ED               	goto	l4012
  4194  0009AC                     l4018:
  4195  0009AC  C09E  FFF6         	movff	printf@f,tblptrl
  4196  0009B0  C09F  FFF7         	movff	printf@f+1,tblptrh
  4197  0009B4  0100               	movlb	0	; () banked
  4198  0009B6  4B9E               	infsnz	printf@f& (0+255),f,b
  4199  0009B8  2B9F               	incf	(printf@f+1)& (0+255),f,b
  4200  0009BA                     	if	0	;tblptru may be non-zero
  4201  0009BA                     	endif
  4202  0009BA                     	if	0	;tblptru may be non-zero
  4203  0009BA                     	endif
  4204  0009BA  0008               	tblrd		*
  4205  0009BC  CFF5 F0AF          	movff	tablat,printf@c
  4206  0009C0  0100               	movlb	0	; () banked
  4207  0009C2  51AF               	movf	printf@c& (0+255),w,b
  4208  0009C4  B4D8               	btfsc	status,2,c
  4209  0009C6  0012               	return	
  4210  0009C8  D63F               	goto	l3892
  4211  0009CA                     __end_of_printf:
  4212                           	opt stack 0
  4213                           tblptru	equ	0xFF8
  4214                           tblptrh	equ	0xFF7
  4215                           tblptrl	equ	0xFF6
  4216                           tablat	equ	0xFF5
  4217                           prodh	equ	0xFF4
  4218                           prodl	equ	0xFF3
  4219                           intcon	equ	0xFF2
  4220                           intcon3	equ	0xFF0
  4221                           postinc0	equ	0xFEE
  4222                           wreg	equ	0xFE8
  4223                           indf2	equ	0xFDF
  4224                           postinc2	equ	0xFDE
  4225                           postdec2	equ	0xFDD
  4226                           fsr2h	equ	0xFDA
  4227                           fsr2l	equ	0xFD9
  4228                           status	equ	0xFD8
  4229                           
  4230 ;; *************** function _putch *****************
  4231 ;; Defined at:
  4232 ;;		line 30 in file "../lcd.c"
  4233 ;; Parameters:    Size  Location     Type
  4234 ;;  data            1    wreg     unsigned char 
  4235 ;; Auto vars:     Size  Location     Type
  4236 ;;  data            1   54[COMRAM] unsigned char 
  4237 ;; Return value:  Size  Location     Type
  4238 ;;                  1    wreg      void 
  4239 ;; Registers used:
  4240 ;;		wreg, status,2, status,0, cstack
  4241 ;; Tracked objects:
  4242 ;;		On entry : 0/0
  4243 ;;		On exit  : 0/0
  4244 ;;		Unchanged: 0/0
  4245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4246 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4247 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4248 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4249 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4250 ;;Total ram usage:        1 bytes
  4251 ;; Hardware stack levels used:    1
  4252 ;; Hardware stack levels required when called:    6
  4253 ;; This function calls:
  4254 ;;		_lcdNibble
  4255 ;; This function is called by:
  4256 ;;		_printf
  4257 ;; This function uses a non-reentrant model
  4258 ;;
  4259                           
  4260                           	psect	text6
  4261  001B7C                     __ptext6:
  4262                           	opt stack 0
  4263  001B7C                     _putch:
  4264                           	opt stack 23
  4265                           
  4266                           ;incstack = 0
  4267                           ;putch@data stored from wreg
  4268  001B7C  6E37               	movwf	putch@data,c
  4269                           
  4270                           ;lcd.c: 31: LATDbits.LATD2 = 1;
  4271  001B7E  848C               	bsf	3980,2,c	;volatile
  4272                           
  4273                           ;lcd.c: 32: lcdNibble(data);
  4274  001B80  5037               	movf	putch@data,w,c
  4275  001B82  EC60  F00C         	call	_lcdNibble
  4276  001B86  0012               	return		;funcret
  4277  001B88                     __end_of_putch:
  4278                           	opt stack 0
  4279                           tblptru	equ	0xFF8
  4280                           tblptrh	equ	0xFF7
  4281                           tblptrl	equ	0xFF6
  4282                           tablat	equ	0xFF5
  4283                           prodh	equ	0xFF4
  4284                           prodl	equ	0xFF3
  4285                           intcon	equ	0xFF2
  4286                           intcon3	equ	0xFF0
  4287                           postinc0	equ	0xFEE
  4288                           wreg	equ	0xFE8
  4289                           indf2	equ	0xFDF
  4290                           postinc2	equ	0xFDE
  4291                           postdec2	equ	0xFDD
  4292                           fsr2h	equ	0xFDA
  4293                           fsr2l	equ	0xFD9
  4294                           status	equ	0xFD8
  4295                           
  4296 ;; *************** function _isdigit *****************
  4297 ;; Defined at:
  4298 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  4299 ;; Parameters:    Size  Location     Type
  4300 ;;  c               1    wreg     unsigned char 
  4301 ;; Auto vars:     Size  Location     Type
  4302 ;;  c               1   54[COMRAM] unsigned char 
  4303 ;; Return value:  Size  Location     Type
  4304 ;;		None               void
  4305 ;; Registers used:
  4306 ;;		wreg, status,2, status,0
  4307 ;; Tracked objects:
  4308 ;;		On entry : 0/0
  4309 ;;		On exit  : 0/0
  4310 ;;		Unchanged: 0/0
  4311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4312 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4313 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4314 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4315 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4316 ;;Total ram usage:        3 bytes
  4317 ;; Hardware stack levels used:    1
  4318 ;; Hardware stack levels required when called:    5
  4319 ;; This function calls:
  4320 ;;		Nothing
  4321 ;; This function is called by:
  4322 ;;		_printf
  4323 ;; This function uses a non-reentrant model
  4324 ;;
  4325                           
  4326                           	psect	text7
  4327  001B06                     __ptext7:
  4328                           	opt stack 0
  4329  001B06                     _isdigit:
  4330                           	opt stack 24
  4331                           
  4332                           ;incstack = 0
  4333                           ;isdigit@c stored from wreg
  4334  001B06  6E37               	movwf	isdigit@c,c
  4335  001B08  0E00               	movlw	0
  4336  001B0A  6E36               	movwf	_isdigit$932,c
  4337  001B0C  0E3A               	movlw	58
  4338  001B0E  6037               	cpfslt	isdigit@c,c
  4339  001B10  D005               	goto	l2694
  4340  001B12  0E2F               	movlw	47
  4341  001B14  6437               	cpfsgt	isdigit@c,c
  4342  001B16  D002               	goto	l2694
  4343  001B18  0E01               	movlw	1
  4344  001B1A  6E36               	movwf	_isdigit$932,c
  4345  001B1C                     l2694:
  4346  001B1C  C036  F035         	movff	_isdigit$932,??_isdigit
  4347  001B20  3035               	rrcf	??_isdigit,w,c
  4348  001B22  0012               	return	
  4349  001B24                     __end_of_isdigit:
  4350                           	opt stack 0
  4351                           tblptru	equ	0xFF8
  4352                           tblptrh	equ	0xFF7
  4353                           tblptrl	equ	0xFF6
  4354                           tablat	equ	0xFF5
  4355                           prodh	equ	0xFF4
  4356                           prodl	equ	0xFF3
  4357                           intcon	equ	0xFF2
  4358                           intcon3	equ	0xFF0
  4359                           postinc0	equ	0xFEE
  4360                           wreg	equ	0xFE8
  4361                           indf2	equ	0xFDF
  4362                           postinc2	equ	0xFDE
  4363                           postdec2	equ	0xFDD
  4364                           fsr2h	equ	0xFDA
  4365                           fsr2l	equ	0xFD9
  4366                           status	equ	0xFD8
  4367                           
  4368 ;; *************** function ___wmul *****************
  4369 ;; Defined at:
  4370 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  4371 ;; Parameters:    Size  Location     Type
  4372 ;;  multiplier      2   52[COMRAM] unsigned int 
  4373 ;;  multiplicand    2   54[COMRAM] unsigned int 
  4374 ;; Auto vars:     Size  Location     Type
  4375 ;;  product         2   56[COMRAM] unsigned int 
  4376 ;; Return value:  Size  Location     Type
  4377 ;;                  2   52[COMRAM] unsigned int 
  4378 ;; Registers used:
  4379 ;;		wreg, status,2, status,0, prodl, prodh
  4380 ;; Tracked objects:
  4381 ;;		On entry : 0/0
  4382 ;;		On exit  : 0/0
  4383 ;;		Unchanged: 0/0
  4384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4385 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4386 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4387 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4388 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4389 ;;Total ram usage:        6 bytes
  4390 ;; Hardware stack levels used:    1
  4391 ;; Hardware stack levels required when called:    5
  4392 ;; This function calls:
  4393 ;;		Nothing
  4394 ;; This function is called by:
  4395 ;;		_printf
  4396 ;; This function uses a non-reentrant model
  4397 ;;
  4398                           
  4399                           	psect	text8
  4400  001A94                     __ptext8:
  4401                           	opt stack 0
  4402  001A94                     ___wmul:
  4403                           	opt stack 24
  4404                           
  4405                           ;incstack = 0
  4406  001A94  5035               	movf	___wmul@multiplier,w,c
  4407  001A96  0237               	mulwf	___wmul@multiplicand,c
  4408  001A98  CFF3 F039          	movff	prodl,___wmul@product
  4409  001A9C  CFF4 F03A          	movff	prodh,___wmul@product+1
  4410  001AA0  5035               	movf	___wmul@multiplier,w,c
  4411  001AA2  0238               	mulwf	___wmul@multiplicand+1,c
  4412  001AA4  50F3               	movf	prodl,w,c
  4413  001AA6  263A               	addwf	___wmul@product+1,f,c
  4414  001AA8  5036               	movf	___wmul@multiplier+1,w,c
  4415  001AAA  0237               	mulwf	___wmul@multiplicand,c
  4416  001AAC  50F3               	movf	prodl,w,c
  4417  001AAE  263A               	addwf	___wmul@product+1,f,c
  4418  001AB0  C039  F035         	movff	___wmul@product,?___wmul
  4419  001AB4  C03A  F036         	movff	___wmul@product+1,?___wmul+1
  4420  001AB8  0012               	return	
  4421  001ABA                     __end_of___wmul:
  4422                           	opt stack 0
  4423                           tblptru	equ	0xFF8
  4424                           tblptrh	equ	0xFF7
  4425                           tblptrl	equ	0xFF6
  4426                           tablat	equ	0xFF5
  4427                           prodh	equ	0xFF4
  4428                           prodl	equ	0xFF3
  4429                           intcon	equ	0xFF2
  4430                           intcon3	equ	0xFF0
  4431                           postinc0	equ	0xFEE
  4432                           wreg	equ	0xFE8
  4433                           indf2	equ	0xFDF
  4434                           postinc2	equ	0xFDE
  4435                           postdec2	equ	0xFDD
  4436                           fsr2h	equ	0xFDA
  4437                           fsr2l	equ	0xFD9
  4438                           status	equ	0xFD8
  4439                           
  4440 ;; *************** function ___lwmod *****************
  4441 ;; Defined at:
  4442 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  4443 ;; Parameters:    Size  Location     Type
  4444 ;;  dividend        2   59[COMRAM] unsigned int 
  4445 ;;  divisor         2   61[COMRAM] unsigned int 
  4446 ;; Auto vars:     Size  Location     Type
  4447 ;;  counter         1   63[COMRAM] unsigned char 
  4448 ;; Return value:  Size  Location     Type
  4449 ;;                  2   59[COMRAM] unsigned int 
  4450 ;; Registers used:
  4451 ;;		wreg, status,2, status,0
  4452 ;; Tracked objects:
  4453 ;;		On entry : 0/0
  4454 ;;		On exit  : 0/0
  4455 ;;		Unchanged: 0/0
  4456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4457 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4458 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4459 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4460 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4461 ;;Total ram usage:        5 bytes
  4462 ;; Hardware stack levels used:    1
  4463 ;; Hardware stack levels required when called:    5
  4464 ;; This function calls:
  4465 ;;		Nothing
  4466 ;; This function is called by:
  4467 ;;		_printf
  4468 ;; This function uses a non-reentrant model
  4469 ;;
  4470                           
  4471                           	psect	text9
  4472  0019E8                     __ptext9:
  4473                           	opt stack 0
  4474  0019E8                     ___lwmod:
  4475                           	opt stack 24
  4476                           
  4477                           ;incstack = 0
  4478  0019E8  503E               	movf	___lwmod@divisor,w,c
  4479  0019EA  103F               	iorwf	___lwmod@divisor+1,w,c
  4480  0019EC  B4D8               	btfsc	status,2,c
  4481  0019EE  D018               	goto	l893
  4482  0019F0  0E01               	movlw	1
  4483  0019F2  6E40               	movwf	___lwmod@counter,c
  4484  0019F4  D004               	goto	l2834
  4485  0019F6                     l2832:
  4486  0019F6  90D8               	bcf	status,0,c
  4487  0019F8  363E               	rlcf	___lwmod@divisor,f,c
  4488  0019FA  363F               	rlcf	___lwmod@divisor+1,f,c
  4489  0019FC  2A40               	incf	___lwmod@counter,f,c
  4490  0019FE                     l2834:
  4491  0019FE  AE3F               	btfss	___lwmod@divisor+1,7,c
  4492  001A00  D7FA               	goto	l2832
  4493  001A02                     l2836:
  4494  001A02  503E               	movf	___lwmod@divisor,w,c
  4495  001A04  5C3C               	subwf	___lwmod@dividend,w,c
  4496  001A06  503F               	movf	___lwmod@divisor+1,w,c
  4497  001A08  583D               	subwfb	___lwmod@dividend+1,w,c
  4498  001A0A  A0D8               	btfss	status,0,c
  4499  001A0C  D004               	goto	l2840
  4500  001A0E  503E               	movf	___lwmod@divisor,w,c
  4501  001A10  5E3C               	subwf	___lwmod@dividend,f,c
  4502  001A12  503F               	movf	___lwmod@divisor+1,w,c
  4503  001A14  5A3D               	subwfb	___lwmod@dividend+1,f,c
  4504  001A16                     l2840:
  4505  001A16  90D8               	bcf	status,0,c
  4506  001A18  323F               	rrcf	___lwmod@divisor+1,f,c
  4507  001A1A  323E               	rrcf	___lwmod@divisor,f,c
  4508  001A1C  2E40               	decfsz	___lwmod@counter,f,c
  4509  001A1E  D7F1               	goto	l2836
  4510  001A20                     l893:
  4511  001A20  C03C  F03C         	movff	___lwmod@dividend,?___lwmod
  4512  001A24  C03D  F03D         	movff	___lwmod@dividend+1,?___lwmod+1
  4513  001A28  0012               	return		;funcret
  4514  001A2A                     __end_of___lwmod:
  4515                           	opt stack 0
  4516                           tblptru	equ	0xFF8
  4517                           tblptrh	equ	0xFF7
  4518                           tblptrl	equ	0xFF6
  4519                           tablat	equ	0xFF5
  4520                           prodh	equ	0xFF4
  4521                           prodl	equ	0xFF3
  4522                           intcon	equ	0xFF2
  4523                           intcon3	equ	0xFF0
  4524                           postinc0	equ	0xFEE
  4525                           wreg	equ	0xFE8
  4526                           indf2	equ	0xFDF
  4527                           postinc2	equ	0xFDE
  4528                           postdec2	equ	0xFDD
  4529                           fsr2h	equ	0xFDA
  4530                           fsr2l	equ	0xFD9
  4531                           status	equ	0xFD8
  4532                           
  4533 ;; *************** function ___lwdiv *****************
  4534 ;; Defined at:
  4535 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  4536 ;; Parameters:    Size  Location     Type
  4537 ;;  dividend        2   52[COMRAM] unsigned int 
  4538 ;;  divisor         2   54[COMRAM] unsigned int 
  4539 ;; Auto vars:     Size  Location     Type
  4540 ;;  quotient        2   56[COMRAM] unsigned int 
  4541 ;;  counter         1   58[COMRAM] unsigned char 
  4542 ;; Return value:  Size  Location     Type
  4543 ;;                  2   52[COMRAM] unsigned int 
  4544 ;; Registers used:
  4545 ;;		wreg, status,2, status,0
  4546 ;; Tracked objects:
  4547 ;;		On entry : 0/0
  4548 ;;		On exit  : 0/0
  4549 ;;		Unchanged: 0/0
  4550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4551 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4552 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4553 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4554 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4555 ;;Total ram usage:        7 bytes
  4556 ;; Hardware stack levels used:    1
  4557 ;; Hardware stack levels required when called:    5
  4558 ;; This function calls:
  4559 ;;		Nothing
  4560 ;; This function is called by:
  4561 ;;		_printf
  4562 ;; This function uses a non-reentrant model
  4563 ;;
  4564                           
  4565                           	psect	text10
  4566  00181C                     __ptext10:
  4567                           	opt stack 0
  4568  00181C                     ___lwdiv:
  4569                           	opt stack 24
  4570                           
  4571                           ;incstack = 0
  4572  00181C  0E00               	movlw	0
  4573  00181E  6E3A               	movwf	___lwdiv@quotient+1,c
  4574  001820  0E00               	movlw	0
  4575  001822  6E39               	movwf	___lwdiv@quotient,c
  4576  001824  5037               	movf	___lwdiv@divisor,w,c
  4577  001826  1038               	iorwf	___lwdiv@divisor+1,w,c
  4578  001828  B4D8               	btfsc	status,2,c
  4579  00182A  D01C               	goto	l883
  4580  00182C  0E01               	movlw	1
  4581  00182E  6E3B               	movwf	___lwdiv@counter,c
  4582  001830  D004               	goto	l2814
  4583  001832                     l2812:
  4584  001832  90D8               	bcf	status,0,c
  4585  001834  3637               	rlcf	___lwdiv@divisor,f,c
  4586  001836  3638               	rlcf	___lwdiv@divisor+1,f,c
  4587  001838  2A3B               	incf	___lwdiv@counter,f,c
  4588  00183A                     l2814:
  4589  00183A  AE38               	btfss	___lwdiv@divisor+1,7,c
  4590  00183C  D7FA               	goto	l2812
  4591  00183E                     l2816:
  4592  00183E  90D8               	bcf	status,0,c
  4593  001840  3639               	rlcf	___lwdiv@quotient,f,c
  4594  001842  363A               	rlcf	___lwdiv@quotient+1,f,c
  4595  001844  5037               	movf	___lwdiv@divisor,w,c
  4596  001846  5C35               	subwf	___lwdiv@dividend,w,c
  4597  001848  5038               	movf	___lwdiv@divisor+1,w,c
  4598  00184A  5836               	subwfb	___lwdiv@dividend+1,w,c
  4599  00184C  A0D8               	btfss	status,0,c
  4600  00184E  D005               	goto	l2824
  4601  001850  5037               	movf	___lwdiv@divisor,w,c
  4602  001852  5E35               	subwf	___lwdiv@dividend,f,c
  4603  001854  5038               	movf	___lwdiv@divisor+1,w,c
  4604  001856  5A36               	subwfb	___lwdiv@dividend+1,f,c
  4605  001858  8039               	bsf	___lwdiv@quotient,0,c
  4606  00185A                     l2824:
  4607  00185A  90D8               	bcf	status,0,c
  4608  00185C  3238               	rrcf	___lwdiv@divisor+1,f,c
  4609  00185E  3237               	rrcf	___lwdiv@divisor,f,c
  4610  001860  2E3B               	decfsz	___lwdiv@counter,f,c
  4611  001862  D7ED               	goto	l2816
  4612  001864                     l883:
  4613  001864  C039  F035         	movff	___lwdiv@quotient,?___lwdiv
  4614  001868  C03A  F036         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4615  00186C  0012               	return		;funcret
  4616  00186E                     __end_of___lwdiv:
  4617                           	opt stack 0
  4618                           tblptru	equ	0xFF8
  4619                           tblptrh	equ	0xFF7
  4620                           tblptrl	equ	0xFF6
  4621                           tablat	equ	0xFF5
  4622                           prodh	equ	0xFF4
  4623                           prodl	equ	0xFF3
  4624                           intcon	equ	0xFF2
  4625                           intcon3	equ	0xFF0
  4626                           postinc0	equ	0xFEE
  4627                           wreg	equ	0xFE8
  4628                           indf2	equ	0xFDF
  4629                           postinc2	equ	0xFDE
  4630                           postdec2	equ	0xFDD
  4631                           fsr2h	equ	0xFDA
  4632                           fsr2l	equ	0xFD9
  4633                           status	equ	0xFD8
  4634                           
  4635 ;; *************** function _isFluctuate *****************
  4636 ;; Defined at:
  4637 ;;		line 475 in file "../main.c"
  4638 ;; Parameters:    Size  Location     Type
  4639 ;;  channel         1    wreg     unsigned char 
  4640 ;; Auto vars:     Size  Location     Type
  4641 ;;  channel         1   64[COMRAM] unsigned char 
  4642 ;;  i               1   65[COMRAM] unsigned char 
  4643 ;;  tempVoltage     2   62[COMRAM] int 
  4644 ;; Return value:  Size  Location     Type
  4645 ;;                  2   56[COMRAM] int 
  4646 ;; Registers used:
  4647 ;;		wreg, status,2, status,0, cstack
  4648 ;; Tracked objects:
  4649 ;;		On entry : 0/0
  4650 ;;		On exit  : 0/0
  4651 ;;		Unchanged: 0/0
  4652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4653 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4654 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4655 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4656 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4657 ;;Total ram usage:       10 bytes
  4658 ;; Hardware stack levels used:    1
  4659 ;; Hardware stack levels required when called:    6
  4660 ;; This function calls:
  4661 ;;		_abs
  4662 ;;		_readADC
  4663 ;; This function is called by:
  4664 ;;		_main
  4665 ;; This function uses a non-reentrant model
  4666 ;;
  4667                           
  4668                           	psect	text11
  4669  0014C0                     __ptext11:
  4670                           	opt stack 0
  4671  0014C0                     _isFluctuate:
  4672                           	opt stack 24
  4673                           
  4674                           ;incstack = 0
  4675                           ;isFluctuate@channel stored from wreg
  4676  0014C0  6E41               	movwf	isFluctuate@channel,c
  4677                           
  4678                           ;main.c: 476: readADC(channel);
  4679  0014C2  5041               	movf	isFluctuate@channel,w,c
  4680  0014C4  ECA1  F00D         	call	_readADC
  4681                           
  4682                           ;main.c: 477: int tempVoltage = (ADRESH<<8)+ADRESL;
  4683  0014C8  50C4               	movf	4036,w,c	;volatile
  4684  0014CA  6E3C               	movwf	(??_isFluctuate+1)& (0+255),c
  4685  0014CC  6A3B               	clrf	??_isFluctuate& (0+255),c
  4686  0014CE  50C3               	movf	4035,w,c	;volatile
  4687  0014D0  243B               	addwf	??_isFluctuate,w,c
  4688  0014D2  6E3F               	movwf	isFluctuate@tempVoltage,c
  4689  0014D4  0E00               	movlw	0
  4690  0014D6  203C               	addwfc	??_isFluctuate+1,w,c
  4691  0014D8  6E40               	movwf	isFluctuate@tempVoltage+1,c
  4692                           
  4693                           ;main.c: 478: for(unsigned char i = 0; i < 10; i++){
  4694  0014DA  0E00               	movlw	0
  4695  0014DC  6E42               	movwf	isFluctuate@i,c
  4696  0014DE                     l3212:
  4697  0014DE  0E09               	movlw	9
  4698  0014E0  6442               	cpfsgt	isFluctuate@i,c
  4699  0014E2  D001               	goto	l3216
  4700  0014E4  D033               	goto	l3230
  4701  0014E6                     l3216:
  4702                           
  4703                           ;main.c: 479: _delay((unsigned long)((1)*(10000000/4000.0)));
  4704  0014E6  0E04               	movlw	4
  4705  0014E8  6E3B               	movwf	??_isFluctuate& (0+255),c
  4706  0014EA  0E3E               	movlw	62
  4707  0014EC                     u4617:
  4708  0014EC  2EE8               	decfsz	wreg,f,c
  4709  0014EE  D7FE               	bra	u4617
  4710  0014F0  2E3B               	decfsz	??_isFluctuate& (0+255),f,c
  4711  0014F2  D7FC               	bra	u4617
  4712                           
  4713                           ;main.c: 480: readADC(channel);
  4714  0014F4  5041               	movf	isFluctuate@channel,w,c
  4715  0014F6  ECA1  F00D         	call	_readADC
  4716                           
  4717                           ;main.c: 481: if (abs((ADRESH<<8)+ADRESL-tempVoltage)>20)
  4718  0014FA  C03F  F03B         	movff	isFluctuate@tempVoltage,??_isFluctuate
  4719  0014FE  C040  F03C         	movff	isFluctuate@tempVoltage+1,??_isFluctuate+1
  4720  001502  1E3B               	comf	??_isFluctuate,f,c
  4721  001504  1E3C               	comf	??_isFluctuate+1,f,c
  4722  001506  4A3B               	infsnz	??_isFluctuate,f,c
  4723  001508  2A3C               	incf	??_isFluctuate+1,f,c
  4724  00150A  50C3               	movf	4035,w,c	;volatile
  4725  00150C  CFC4 F03D          	movff	4036,??_isFluctuate+2	;volatile
  4726  001510  6A3E               	clrf	(??_isFluctuate+3)& (0+255),c
  4727  001512  C03D  F03E         	movff	??_isFluctuate+2,??_isFluctuate+3
  4728  001516  6A3D               	clrf	??_isFluctuate+2,c
  4729  001518  263D               	addwf	??_isFluctuate+2,f,c
  4730  00151A  0E00               	movlw	0
  4731  00151C  223E               	addwfc	??_isFluctuate+3,f,c
  4732  00151E  503B               	movf	??_isFluctuate,w,c
  4733  001520  243D               	addwf	??_isFluctuate+2,w,c
  4734  001522  6E35               	movwf	abs@x,c
  4735  001524  503C               	movf	??_isFluctuate+1,w,c
  4736  001526  203E               	addwfc	??_isFluctuate+3,w,c
  4737  001528  6E36               	movwf	abs@x+1,c
  4738  00152A  EC36  F00D         	call	_abs	;wreg free
  4739  00152E  BE36               	btfsc	?_abs+1,7,c
  4740  001530  D00B               	goto	l3226
  4741  001532  5036               	movf	?_abs+1,w,c
  4742  001534  E104               	bnz	u2970
  4743  001536  0E15               	movlw	21
  4744  001538  5C35               	subwf	?_abs,w,c
  4745  00153A  A0D8               	btfss	status,0,c
  4746  00153C  D005               	goto	l3226
  4747  00153E                     u2970:
  4748                           
  4749                           ;main.c: 482: return 1;
  4750  00153E  0E00               	movlw	0
  4751  001540  6E3A               	movwf	?_isFluctuate+1,c
  4752  001542  0E01               	movlw	1
  4753  001544  6E39               	movwf	?_isFluctuate,c
  4754  001546  0012               	return	
  4755  001548                     l3226:
  4756  001548  2A42               	incf	isFluctuate@i,f,c
  4757  00154A  D7C9               	goto	l3212
  4758  00154C                     l3230:
  4759                           
  4760                           ;main.c: 483: }
  4761                           ;main.c: 484: return 0;
  4762  00154C  0E00               	movlw	0
  4763  00154E  6E3A               	movwf	?_isFluctuate+1,c
  4764  001550  0E00               	movlw	0
  4765  001552  6E39               	movwf	?_isFluctuate,c
  4766  001554  0012               	return	
  4767  001556                     __end_of_isFluctuate:
  4768                           	opt stack 0
  4769                           tblptru	equ	0xFF8
  4770                           tblptrh	equ	0xFF7
  4771                           tblptrl	equ	0xFF6
  4772                           tablat	equ	0xFF5
  4773                           prodh	equ	0xFF4
  4774                           prodl	equ	0xFF3
  4775                           intcon	equ	0xFF2
  4776                           intcon3	equ	0xFF0
  4777                           postinc0	equ	0xFEE
  4778                           wreg	equ	0xFE8
  4779                           indf2	equ	0xFDF
  4780                           postinc2	equ	0xFDE
  4781                           postdec2	equ	0xFDD
  4782                           fsr2h	equ	0xFDA
  4783                           fsr2l	equ	0xFD9
  4784                           status	equ	0xFD8
  4785                           
  4786 ;; *************** function _readADC *****************
  4787 ;; Defined at:
  4788 ;;		line 329 in file "../main.c"
  4789 ;; Parameters:    Size  Location     Type
  4790 ;;  channel         1    wreg     unsigned char 
  4791 ;; Auto vars:     Size  Location     Type
  4792 ;;  channel         1   52[COMRAM] unsigned char 
  4793 ;; Return value:  Size  Location     Type
  4794 ;;                  1    wreg      void 
  4795 ;; Registers used:
  4796 ;;		wreg, status,2, status,0
  4797 ;; Tracked objects:
  4798 ;;		On entry : 0/0
  4799 ;;		On exit  : 0/0
  4800 ;;		Unchanged: 0/0
  4801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4802 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4803 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4804 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4805 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4806 ;;Total ram usage:        1 bytes
  4807 ;; Hardware stack levels used:    1
  4808 ;; Hardware stack levels required when called:    5
  4809 ;; This function calls:
  4810 ;;		Nothing
  4811 ;; This function is called by:
  4812 ;;		_isFluctuate
  4813 ;; This function uses a non-reentrant model
  4814 ;;
  4815                           
  4816                           	psect	text12
  4817  001B42                     __ptext12:
  4818                           	opt stack 0
  4819  001B42                     _readADC:
  4820                           	opt stack 24
  4821                           
  4822                           ;incstack = 0
  4823                           ;readADC@channel stored from wreg
  4824  001B42  6E35               	movwf	readADC@channel,c
  4825                           
  4826                           ;main.c: 331: ADCON0 = channel <<2;
  4827  001B44  4435               	rlncf	readADC@channel,w,c
  4828  001B46  46E8               	rlncf	wreg,f,c
  4829  001B48  0BFC               	andlw	252
  4830  001B4A  6EC2               	movwf	4034,c	;volatile
  4831                           
  4832                           ;main.c: 332: ADCON0bits.ADON = 1;
  4833  001B4C  80C2               	bsf	4034,0,c	;volatile
  4834                           
  4835                           ;main.c: 333: ADCON0bits.GO = 1;
  4836  001B4E  82C2               	bsf	4034,1,c	;volatile
  4837  001B50                     l323:
  4838  001B50  A2C2               	btfss	4034,1,c	;volatile
  4839  001B52  0012               	return	
  4840  001B54  D7FD               	goto	l323
  4841  001B56                     __end_of_readADC:
  4842                           	opt stack 0
  4843                           tblptru	equ	0xFF8
  4844                           tblptrh	equ	0xFF7
  4845                           tblptrl	equ	0xFF6
  4846                           tablat	equ	0xFF5
  4847                           prodh	equ	0xFF4
  4848                           prodl	equ	0xFF3
  4849                           intcon	equ	0xFF2
  4850                           intcon3	equ	0xFF0
  4851                           postinc0	equ	0xFEE
  4852                           wreg	equ	0xFE8
  4853                           indf2	equ	0xFDF
  4854                           postinc2	equ	0xFDE
  4855                           postdec2	equ	0xFDD
  4856                           fsr2h	equ	0xFDA
  4857                           fsr2l	equ	0xFD9
  4858                           status	equ	0xFD8
  4859                           
  4860 ;; *************** function _abs *****************
  4861 ;; Defined at:
  4862 ;;		line 26 in file "../main.c"
  4863 ;; Parameters:    Size  Location     Type
  4864 ;;  x               2   52[COMRAM] int 
  4865 ;; Auto vars:     Size  Location     Type
  4866 ;;		None
  4867 ;; Return value:  Size  Location     Type
  4868 ;;                  2   52[COMRAM] int 
  4869 ;; Registers used:
  4870 ;;		wreg, status,2, status,0
  4871 ;; Tracked objects:
  4872 ;;		On entry : 0/0
  4873 ;;		On exit  : 0/0
  4874 ;;		Unchanged: 0/0
  4875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4876 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4877 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4878 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4879 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4880 ;;Total ram usage:        4 bytes
  4881 ;; Hardware stack levels used:    1
  4882 ;; Hardware stack levels required when called:    5
  4883 ;; This function calls:
  4884 ;;		Nothing
  4885 ;; This function is called by:
  4886 ;;		_isFluctuate
  4887 ;; This function uses a non-reentrant model
  4888 ;;
  4889                           
  4890                           	psect	text13
  4891  001A6C                     __ptext13:
  4892                           	opt stack 0
  4893  001A6C                     _abs:
  4894                           	opt stack 24
  4895                           
  4896                           ;main.c: 27: if (x<0)
  4897                           
  4898                           ;incstack = 0
  4899  001A6C  AE36               	btfss	abs@x+1,7,c
  4900  001A6E  D00D               	goto	l174
  4901                           
  4902                           ;main.c: 28: return -x;
  4903  001A70  C035  F037         	movff	abs@x,??_abs
  4904  001A74  C036  F038         	movff	abs@x+1,??_abs+1
  4905  001A78  1E37               	comf	??_abs,f,c
  4906  001A7A  1E38               	comf	??_abs+1,f,c
  4907  001A7C  4A37               	infsnz	??_abs,f,c
  4908  001A7E  2A38               	incf	??_abs+1,f,c
  4909  001A80  C037  F035         	movff	??_abs,?_abs
  4910  001A84  C038  F036         	movff	??_abs+1,?_abs+1
  4911  001A88  0012               	return	
  4912  001A8A                     l174:
  4913                           
  4914                           ;main.c: 29: return x;
  4915  001A8A  C035  F035         	movff	abs@x,?_abs
  4916  001A8E  C036  F036         	movff	abs@x+1,?_abs+1
  4917  001A92  0012               	return		;funcret
  4918  001A94                     __end_of_abs:
  4919                           	opt stack 0
  4920                           tblptru	equ	0xFF8
  4921                           tblptrh	equ	0xFF7
  4922                           tblptrl	equ	0xFF6
  4923                           tablat	equ	0xFF5
  4924                           prodh	equ	0xFF4
  4925                           prodl	equ	0xFF3
  4926                           intcon	equ	0xFF2
  4927                           intcon3	equ	0xFF0
  4928                           postinc0	equ	0xFEE
  4929                           wreg	equ	0xFE8
  4930                           indf2	equ	0xFDF
  4931                           postinc2	equ	0xFDE
  4932                           postdec2	equ	0xFDD
  4933                           fsr2h	equ	0xFDA
  4934                           fsr2l	equ	0xFD9
  4935                           status	equ	0xFD8
  4936                           
  4937 ;; *************** function _initLCD *****************
  4938 ;; Defined at:
  4939 ;;		line 14 in file "../lcd.c"
  4940 ;; Parameters:    Size  Location     Type
  4941 ;;		None
  4942 ;; Auto vars:     Size  Location     Type
  4943 ;;		None
  4944 ;; Return value:  Size  Location     Type
  4945 ;;                  1    wreg      void 
  4946 ;; Registers used:
  4947 ;;		wreg, status,2, status,0, cstack
  4948 ;; Tracked objects:
  4949 ;;		On entry : 0/0
  4950 ;;		On exit  : 0/0
  4951 ;;		Unchanged: 0/0
  4952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4953 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4954 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4955 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4956 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4957 ;;Total ram usage:        1 bytes
  4958 ;; Hardware stack levels used:    1
  4959 ;; Hardware stack levels required when called:    7
  4960 ;; This function calls:
  4961 ;;		_lcdInst
  4962 ;; This function is called by:
  4963 ;;		_main
  4964 ;; This function uses a non-reentrant model
  4965 ;;
  4966                           
  4967                           	psect	text14
  4968  0019A2                     __ptext14:
  4969                           	opt stack 0
  4970  0019A2                     _initLCD:
  4971                           	opt stack 23
  4972                           
  4973                           ;lcd.c: 15: _delay((unsigned long)((15)*(10000000/4000.0)));
  4974                           
  4975                           ;incstack = 0
  4976  0019A2  0E31               	movlw	49
  4977  0019A4  6E38               	movwf	??_initLCD& (0+255),c
  4978  0019A6  0EB2               	movlw	178
  4979  0019A8                     u4627:
  4980  0019A8  2EE8               	decfsz	wreg,f,c
  4981  0019AA  D7FE               	bra	u4627
  4982  0019AC  2E38               	decfsz	??_initLCD& (0+255),f,c
  4983  0019AE  D7FC               	bra	u4627
  4984  0019B0  D000               	nop2	
  4985                           
  4986                           ;lcd.c: 16: lcdInst(0b00110011);
  4987  0019B2  0E33               	movlw	51
  4988  0019B4  ECC4  F00D         	call	_lcdInst
  4989                           
  4990                           ;lcd.c: 17: lcdInst(0b00110010);
  4991  0019B8  0E32               	movlw	50
  4992  0019BA  ECC4  F00D         	call	_lcdInst
  4993                           
  4994                           ;lcd.c: 18: lcdInst(0b00101000);
  4995  0019BE  0E28               	movlw	40
  4996  0019C0  ECC4  F00D         	call	_lcdInst
  4997                           
  4998                           ;lcd.c: 19: lcdInst(0b00001111);
  4999  0019C4  0E0F               	movlw	15
  5000  0019C6  ECC4  F00D         	call	_lcdInst
  5001                           
  5002                           ;lcd.c: 20: lcdInst(0b00000110);
  5003  0019CA  0E06               	movlw	6
  5004  0019CC  ECC4  F00D         	call	_lcdInst
  5005                           
  5006                           ;lcd.c: 21: lcdInst(0b00000001);
  5007  0019D0  0E01               	movlw	1
  5008  0019D2  ECC4  F00D         	call	_lcdInst
  5009                           
  5010                           ;lcd.c: 22: _delay((unsigned long)((15)*(10000000/4000.0)));
  5011  0019D6  0E31               	movlw	49
  5012  0019D8  6E38               	movwf	??_initLCD& (0+255),c
  5013  0019DA  0EB2               	movlw	178
  5014  0019DC                     u4637:
  5015  0019DC  2EE8               	decfsz	wreg,f,c
  5016  0019DE  D7FE               	bra	u4637
  5017  0019E0  2E38               	decfsz	??_initLCD& (0+255),f,c
  5018  0019E2  D7FC               	bra	u4637
  5019  0019E4  D000               	nop2	
  5020  0019E6  0012               	return		;funcret
  5021  0019E8                     __end_of_initLCD:
  5022                           	opt stack 0
  5023                           tblptru	equ	0xFF8
  5024                           tblptrh	equ	0xFF7
  5025                           tblptrl	equ	0xFF6
  5026                           tablat	equ	0xFF5
  5027                           prodh	equ	0xFF4
  5028                           prodl	equ	0xFF3
  5029                           intcon	equ	0xFF2
  5030                           intcon3	equ	0xFF0
  5031                           postinc0	equ	0xFEE
  5032                           wreg	equ	0xFE8
  5033                           indf2	equ	0xFDF
  5034                           postinc2	equ	0xFDE
  5035                           postdec2	equ	0xFDD
  5036                           fsr2h	equ	0xFDA
  5037                           fsr2l	equ	0xFD9
  5038                           status	equ	0xFD8
  5039                           
  5040 ;; *************** function _lcdInst *****************
  5041 ;; Defined at:
  5042 ;;		line 25 in file "../lcd.c"
  5043 ;; Parameters:    Size  Location     Type
  5044 ;;  data            1    wreg     unsigned char 
  5045 ;; Auto vars:     Size  Location     Type
  5046 ;;  data            1   54[COMRAM] unsigned char 
  5047 ;; Return value:  Size  Location     Type
  5048 ;;                  1    wreg      void 
  5049 ;; Registers used:
  5050 ;;		wreg, status,2, status,0, cstack
  5051 ;; Tracked objects:
  5052 ;;		On entry : 0/0
  5053 ;;		On exit  : 0/0
  5054 ;;		Unchanged: 0/0
  5055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5056 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5057 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5058 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5059 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5060 ;;Total ram usage:        1 bytes
  5061 ;; Hardware stack levels used:    1
  5062 ;; Hardware stack levels required when called:    6
  5063 ;; This function calls:
  5064 ;;		_lcdNibble
  5065 ;; This function is called by:
  5066 ;;		_initLCD
  5067 ;;		_main
  5068 ;; This function uses a non-reentrant model
  5069 ;;
  5070                           
  5071                           	psect	text15
  5072  001B88                     __ptext15:
  5073                           	opt stack 0
  5074  001B88                     _lcdInst:
  5075                           	opt stack 24
  5076                           
  5077                           ;incstack = 0
  5078                           ;lcdInst@data stored from wreg
  5079  001B88  6E37               	movwf	lcdInst@data,c
  5080                           
  5081                           ;lcd.c: 26: LATDbits.LATD2 = 0;
  5082  001B8A  948C               	bcf	3980,2,c	;volatile
  5083                           
  5084                           ;lcd.c: 27: lcdNibble(data);
  5085  001B8C  5037               	movf	lcdInst@data,w,c
  5086  001B8E  EC60  F00C         	call	_lcdNibble
  5087  001B92  0012               	return		;funcret
  5088  001B94                     __end_of_lcdInst:
  5089                           	opt stack 0
  5090                           tblptru	equ	0xFF8
  5091                           tblptrh	equ	0xFF7
  5092                           tblptrl	equ	0xFF6
  5093                           tablat	equ	0xFF5
  5094                           prodh	equ	0xFF4
  5095                           prodl	equ	0xFF3
  5096                           intcon	equ	0xFF2
  5097                           intcon3	equ	0xFF0
  5098                           postinc0	equ	0xFEE
  5099                           wreg	equ	0xFE8
  5100                           indf2	equ	0xFDF
  5101                           postinc2	equ	0xFDE
  5102                           postdec2	equ	0xFDD
  5103                           fsr2h	equ	0xFDA
  5104                           fsr2l	equ	0xFD9
  5105                           status	equ	0xFD8
  5106                           
  5107 ;; *************** function _lcdNibble *****************
  5108 ;; Defined at:
  5109 ;;		line 35 in file "../lcd.c"
  5110 ;; Parameters:    Size  Location     Type
  5111 ;;  data            1    wreg     unsigned char 
  5112 ;; Auto vars:     Size  Location     Type
  5113 ;;  data            1   53[COMRAM] unsigned char 
  5114 ;;  temp            1   52[COMRAM] unsigned char 
  5115 ;; Return value:  Size  Location     Type
  5116 ;;                  1    wreg      void 
  5117 ;; Registers used:
  5118 ;;		wreg, status,2, status,0
  5119 ;; Tracked objects:
  5120 ;;		On entry : 0/0
  5121 ;;		On exit  : 0/0
  5122 ;;		Unchanged: 0/0
  5123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5124 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5125 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5126 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5127 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5128 ;;Total ram usage:        2 bytes
  5129 ;; Hardware stack levels used:    1
  5130 ;; Hardware stack levels required when called:    5
  5131 ;; This function calls:
  5132 ;;		Nothing
  5133 ;; This function is called by:
  5134 ;;		_lcdInst
  5135 ;;		_putch
  5136 ;; This function uses a non-reentrant model
  5137 ;;
  5138                           
  5139                           	psect	text16
  5140  0018C0                     __ptext16:
  5141                           	opt stack 0
  5142  0018C0                     _lcdNibble:
  5143                           	opt stack 23
  5144                           
  5145                           ;incstack = 0
  5146                           ;lcdNibble@data stored from wreg
  5147  0018C0  6E36               	movwf	lcdNibble@data,c
  5148                           
  5149                           ;lcd.c: 37: char temp = data & 0xF0;
  5150  0018C2  5036               	movf	lcdNibble@data,w,c
  5151  0018C4  0BF0               	andlw	240
  5152  0018C6  6E35               	movwf	lcdNibble@temp,c
  5153                           
  5154                           ;lcd.c: 38: LATD = LATD & 0x0F;
  5155  0018C8  508C               	movf	3980,w,c	;volatile
  5156  0018CA  0B0F               	andlw	15
  5157  0018CC  6E8C               	movwf	3980,c	;volatile
  5158                           
  5159                           ;lcd.c: 39: LATD = temp | LATD;
  5160  0018CE  5035               	movf	lcdNibble@temp,w,c
  5161  0018D0  108C               	iorwf	3980,w,c	;volatile
  5162  0018D2  6E8C               	movwf	3980,c	;volatile
  5163                           
  5164                           ;lcd.c: 41: LATDbits.LATD3 = 0;
  5165  0018D4  968C               	bcf	3980,3,c	;volatile
  5166                           
  5167                           ;lcd.c: 42: _delay((unsigned long)((30)*(10000000/4000000.0)));
  5168  0018D6  0E19               	movlw	25
  5169  0018D8                     u4647:
  5170  0018D8  2EE8               	decfsz	wreg,f,c
  5171  0018DA  D7FE               	bra	u4647
  5172                           
  5173                           ;lcd.c: 43: LATDbits.LATD3 = 1;
  5174  0018DC  868C               	bsf	3980,3,c	;volatile
  5175                           
  5176                           ;lcd.c: 44: _delay((unsigned long)((30)*(10000000/4000000.0)));
  5177  0018DE  0E19               	movlw	25
  5178  0018E0                     u4657:
  5179  0018E0  2EE8               	decfsz	wreg,f,c
  5180  0018E2  D7FE               	bra	u4657
  5181                           
  5182                           ;lcd.c: 46: data = data << 4;
  5183  0018E4  3836               	swapf	lcdNibble@data,w,c
  5184  0018E6  0BF0               	andlw	240
  5185  0018E8  6E36               	movwf	lcdNibble@data,c
  5186                           
  5187                           ;lcd.c: 48: temp = data & 0xF0;
  5188  0018EA  5036               	movf	lcdNibble@data,w,c
  5189  0018EC  0BF0               	andlw	240
  5190  0018EE  6E35               	movwf	lcdNibble@temp,c
  5191                           
  5192                           ;lcd.c: 49: LATD = LATD & 0x0F;
  5193  0018F0  508C               	movf	3980,w,c	;volatile
  5194  0018F2  0B0F               	andlw	15
  5195  0018F4  6E8C               	movwf	3980,c	;volatile
  5196                           
  5197                           ;lcd.c: 50: LATD = temp | LATD;
  5198  0018F6  5035               	movf	lcdNibble@temp,w,c
  5199  0018F8  108C               	iorwf	3980,w,c	;volatile
  5200  0018FA  6E8C               	movwf	3980,c	;volatile
  5201                           
  5202                           ;lcd.c: 52: LATDbits.LATD3 = 0;
  5203  0018FC  968C               	bcf	3980,3,c	;volatile
  5204                           
  5205                           ;lcd.c: 53: _delay((unsigned long)((30)*(10000000/4000000.0)));
  5206  0018FE  0E19               	movlw	25
  5207  001900                     u4667:
  5208  001900  2EE8               	decfsz	wreg,f,c
  5209  001902  D7FE               	bra	u4667
  5210                           
  5211                           ;lcd.c: 54: LATDbits.LATD3 = 1;
  5212  001904  868C               	bsf	3980,3,c	;volatile
  5213                           
  5214                           ;lcd.c: 55: _delay((unsigned long)((30)*(10000000/4000000.0)));
  5215  001906  0E19               	movlw	25
  5216  001908                     u4677:
  5217  001908  2EE8               	decfsz	wreg,f,c
  5218  00190A  D7FE               	bra	u4677
  5219  00190C  0012               	return		;funcret
  5220  00190E                     __end_of_lcdNibble:
  5221                           	opt stack 0
  5222                           tblptru	equ	0xFF8
  5223                           tblptrh	equ	0xFF7
  5224                           tblptrl	equ	0xFF6
  5225                           tablat	equ	0xFF5
  5226                           prodh	equ	0xFF4
  5227                           prodl	equ	0xFF3
  5228                           intcon	equ	0xFF2
  5229                           intcon3	equ	0xFF0
  5230                           postinc0	equ	0xFEE
  5231                           wreg	equ	0xFE8
  5232                           indf2	equ	0xFDF
  5233                           postinc2	equ	0xFDE
  5234                           postdec2	equ	0xFDD
  5235                           fsr2h	equ	0xFDA
  5236                           fsr2l	equ	0xFD9
  5237                           status	equ	0xFD8
  5238                           
  5239 ;; *************** function _I2C_Master_Write *****************
  5240 ;; Defined at:
  5241 ;;		line 47 in file "../I2C.c"
  5242 ;; Parameters:    Size  Location     Type
  5243 ;;  d               2   53[COMRAM] unsigned int 
  5244 ;; Auto vars:     Size  Location     Type
  5245 ;;		None
  5246 ;; Return value:  Size  Location     Type
  5247 ;;                  1    wreg      void 
  5248 ;; Registers used:
  5249 ;;		wreg, status,2, status,0, cstack
  5250 ;; Tracked objects:
  5251 ;;		On entry : 0/0
  5252 ;;		On exit  : 0/0
  5253 ;;		Unchanged: 0/0
  5254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5255 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5256 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5257 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5258 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5259 ;;Total ram usage:        2 bytes
  5260 ;; Hardware stack levels used:    1
  5261 ;; Hardware stack levels required when called:    6
  5262 ;; This function calls:
  5263 ;;		_I2C_Master_Wait
  5264 ;; This function is called by:
  5265 ;;		_main
  5266 ;; This function uses a non-reentrant model
  5267 ;;
  5268                           
  5269                           	psect	text17
  5270  001BAC                     __ptext17:
  5271                           	opt stack 0
  5272  001BAC                     _I2C_Master_Write:
  5273                           	opt stack 24
  5274                           
  5275                           ;I2C.c: 49: I2C_Master_Wait();
  5276                           
  5277                           ;incstack = 0
  5278  001BAC  ECB5  F00D         	call	_I2C_Master_Wait	;wreg free
  5279                           
  5280                           ;I2C.c: 50: SSPBUF = d;
  5281  001BB0  C036  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  5282  001BB4  0012               	return		;funcret
  5283  001BB6                     __end_of_I2C_Master_Write:
  5284                           	opt stack 0
  5285                           tblptru	equ	0xFF8
  5286                           tblptrh	equ	0xFF7
  5287                           tblptrl	equ	0xFF6
  5288                           tablat	equ	0xFF5
  5289                           prodh	equ	0xFF4
  5290                           prodl	equ	0xFF3
  5291                           intcon	equ	0xFF2
  5292                           intcon3	equ	0xFF0
  5293                           postinc0	equ	0xFEE
  5294                           wreg	equ	0xFE8
  5295                           indf2	equ	0xFDF
  5296                           postinc2	equ	0xFDE
  5297                           postdec2	equ	0xFDD
  5298                           fsr2h	equ	0xFDA
  5299                           fsr2l	equ	0xFD9
  5300                           status	equ	0xFD8
  5301                           
  5302 ;; *************** function _I2C_Master_Stop *****************
  5303 ;; Defined at:
  5304 ;;		line 41 in file "../I2C.c"
  5305 ;; Parameters:    Size  Location     Type
  5306 ;;		None
  5307 ;; Auto vars:     Size  Location     Type
  5308 ;;		None
  5309 ;; Return value:  Size  Location     Type
  5310 ;;                  1    wreg      void 
  5311 ;; Registers used:
  5312 ;;		wreg, status,2, status,0, cstack
  5313 ;; Tracked objects:
  5314 ;;		On entry : 0/0
  5315 ;;		On exit  : 0/0
  5316 ;;		Unchanged: 0/0
  5317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5318 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5319 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5320 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5321 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5322 ;;Total ram usage:        0 bytes
  5323 ;; Hardware stack levels used:    1
  5324 ;; Hardware stack levels required when called:    6
  5325 ;; This function calls:
  5326 ;;		_I2C_Master_Wait
  5327 ;; This function is called by:
  5328 ;;		_main
  5329 ;; This function uses a non-reentrant model
  5330 ;;
  5331                           
  5332                           	psect	text18
  5333  001BB6                     __ptext18:
  5334                           	opt stack 0
  5335  001BB6                     _I2C_Master_Stop:
  5336                           	opt stack 24
  5337                           
  5338                           ;I2C.c: 43: I2C_Master_Wait();
  5339                           
  5340                           ;incstack = 0
  5341  001BB6  ECB5  F00D         	call	_I2C_Master_Wait	;wreg free
  5342                           
  5343                           ;I2C.c: 44: PEN = 1;
  5344  001BBA  84C5               	bsf	4037,2,c	;volatile
  5345  001BBC  0012               	return		;funcret
  5346  001BBE                     __end_of_I2C_Master_Stop:
  5347                           	opt stack 0
  5348                           tblptru	equ	0xFF8
  5349                           tblptrh	equ	0xFF7
  5350                           tblptrl	equ	0xFF6
  5351                           tablat	equ	0xFF5
  5352                           prodh	equ	0xFF4
  5353                           prodl	equ	0xFF3
  5354                           intcon	equ	0xFF2
  5355                           intcon3	equ	0xFF0
  5356                           postinc0	equ	0xFEE
  5357                           wreg	equ	0xFE8
  5358                           indf2	equ	0xFDF
  5359                           postinc2	equ	0xFDE
  5360                           postdec2	equ	0xFDD
  5361                           fsr2h	equ	0xFDA
  5362                           fsr2l	equ	0xFD9
  5363                           status	equ	0xFD8
  5364                           
  5365 ;; *************** function _I2C_Master_Start *****************
  5366 ;; Defined at:
  5367 ;;		line 29 in file "../I2C.c"
  5368 ;; Parameters:    Size  Location     Type
  5369 ;;		None
  5370 ;; Auto vars:     Size  Location     Type
  5371 ;;		None
  5372 ;; Return value:  Size  Location     Type
  5373 ;;                  1    wreg      void 
  5374 ;; Registers used:
  5375 ;;		wreg, status,2, status,0, cstack
  5376 ;; Tracked objects:
  5377 ;;		On entry : 0/0
  5378 ;;		On exit  : 0/0
  5379 ;;		Unchanged: 0/0
  5380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5381 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5382 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5383 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5384 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5385 ;;Total ram usage:        0 bytes
  5386 ;; Hardware stack levels used:    1
  5387 ;; Hardware stack levels required when called:    6
  5388 ;; This function calls:
  5389 ;;		_I2C_Master_Wait
  5390 ;; This function is called by:
  5391 ;;		_main
  5392 ;; This function uses a non-reentrant model
  5393 ;;
  5394                           
  5395                           	psect	text19
  5396  001BBE                     __ptext19:
  5397                           	opt stack 0
  5398  001BBE                     _I2C_Master_Start:
  5399                           	opt stack 24
  5400                           
  5401                           ;I2C.c: 31: I2C_Master_Wait();
  5402                           
  5403                           ;incstack = 0
  5404  001BBE  ECB5  F00D         	call	_I2C_Master_Wait	;wreg free
  5405                           
  5406                           ;I2C.c: 32: SEN = 1;
  5407  001BC2  80C5               	bsf	4037,0,c	;volatile
  5408  001BC4  0012               	return		;funcret
  5409  001BC6                     __end_of_I2C_Master_Start:
  5410                           	opt stack 0
  5411                           tblptru	equ	0xFF8
  5412                           tblptrh	equ	0xFF7
  5413                           tblptrl	equ	0xFF6
  5414                           tablat	equ	0xFF5
  5415                           prodh	equ	0xFF4
  5416                           prodl	equ	0xFF3
  5417                           intcon	equ	0xFF2
  5418                           intcon3	equ	0xFF0
  5419                           postinc0	equ	0xFEE
  5420                           wreg	equ	0xFE8
  5421                           indf2	equ	0xFDF
  5422                           postinc2	equ	0xFDE
  5423                           postdec2	equ	0xFDD
  5424                           fsr2h	equ	0xFDA
  5425                           fsr2l	equ	0xFD9
  5426                           status	equ	0xFD8
  5427                           
  5428 ;; *************** function _I2C_Master_Read *****************
  5429 ;; Defined at:
  5430 ;;		line 53 in file "../I2C.c"
  5431 ;; Parameters:    Size  Location     Type
  5432 ;;  a               1    wreg     unsigned char 
  5433 ;; Auto vars:     Size  Location     Type
  5434 ;;  a               1   53[COMRAM] unsigned char 
  5435 ;;  temp            1   54[COMRAM] unsigned char 
  5436 ;; Return value:  Size  Location     Type
  5437 ;;                  1    wreg      unsigned char 
  5438 ;; Registers used:
  5439 ;;		wreg, status,2, status,0, cstack
  5440 ;; Tracked objects:
  5441 ;;		On entry : 0/0
  5442 ;;		On exit  : 0/0
  5443 ;;		Unchanged: 0/0
  5444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5445 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5446 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5447 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5448 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5449 ;;Total ram usage:        2 bytes
  5450 ;; Hardware stack levels used:    1
  5451 ;; Hardware stack levels required when called:    6
  5452 ;; This function calls:
  5453 ;;		_I2C_Master_Wait
  5454 ;; This function is called by:
  5455 ;;		_main
  5456 ;; This function uses a non-reentrant model
  5457 ;;
  5458                           
  5459                           	psect	text20
  5460  001ABA                     __ptext20:
  5461                           	opt stack 0
  5462  001ABA                     _I2C_Master_Read:
  5463                           	opt stack 24
  5464                           
  5465                           ;incstack = 0
  5466                           ;I2C_Master_Read@a stored from wreg
  5467  001ABA  6E36               	movwf	I2C_Master_Read@a,c
  5468                           
  5469                           ;I2C.c: 55: unsigned char temp;
  5470                           ;I2C.c: 56: I2C_Master_Wait();
  5471  001ABC  ECB5  F00D         	call	_I2C_Master_Wait	;wreg free
  5472                           
  5473                           ;I2C.c: 57: RCEN = 1;
  5474  001AC0  86C5               	bsf	4037,3,c	;volatile
  5475                           
  5476                           ;I2C.c: 58: I2C_Master_Wait();
  5477  001AC2  ECB5  F00D         	call	_I2C_Master_Wait	;wreg free
  5478                           
  5479                           ;I2C.c: 59: temp = SSPBUF;
  5480  001AC6  CFC9 F037          	movff	4041,I2C_Master_Read@temp	;volatile
  5481                           
  5482                           ;I2C.c: 60: I2C_Master_Wait();
  5483  001ACA  ECB5  F00D         	call	_I2C_Master_Wait	;wreg free
  5484                           
  5485                           ;I2C.c: 61: ACKDT = (a)?0:1;
  5486  001ACE  5036               	movf	I2C_Master_Read@a,w,c
  5487  001AD0  A4D8               	btfss	status,2,c
  5488  001AD2  D002               	goto	u2710
  5489  001AD4  8AC5               	bsf	4037,5,c	;volatile
  5490  001AD6  D001               	goto	l3056
  5491  001AD8                     u2710:
  5492  001AD8  9AC5               	bcf	4037,5,c	;volatile
  5493  001ADA                     l3056:
  5494                           
  5495                           ;I2C.c: 62: ACKEN = 1;
  5496  001ADA  88C5               	bsf	4037,4,c	;volatile
  5497                           
  5498                           ;I2C.c: 63: return temp;
  5499  001ADC  5037               	movf	I2C_Master_Read@temp,w,c
  5500  001ADE  0012               	return	
  5501  001AE0                     __end_of_I2C_Master_Read:
  5502                           	opt stack 0
  5503                           tblptru	equ	0xFF8
  5504                           tblptrh	equ	0xFF7
  5505                           tblptrl	equ	0xFF6
  5506                           tablat	equ	0xFF5
  5507                           prodh	equ	0xFF4
  5508                           prodl	equ	0xFF3
  5509                           intcon	equ	0xFF2
  5510                           intcon3	equ	0xFF0
  5511                           postinc0	equ	0xFEE
  5512                           wreg	equ	0xFE8
  5513                           indf2	equ	0xFDF
  5514                           postinc2	equ	0xFDE
  5515                           postdec2	equ	0xFDD
  5516                           fsr2h	equ	0xFDA
  5517                           fsr2l	equ	0xFD9
  5518                           status	equ	0xFD8
  5519                           
  5520 ;; *************** function _I2C_Master_Wait *****************
  5521 ;; Defined at:
  5522 ;;		line 24 in file "../I2C.c"
  5523 ;; Parameters:    Size  Location     Type
  5524 ;;		None
  5525 ;; Auto vars:     Size  Location     Type
  5526 ;;		None
  5527 ;; Return value:  Size  Location     Type
  5528 ;;                  1    wreg      void 
  5529 ;; Registers used:
  5530 ;;		wreg, status,2, status,0
  5531 ;; Tracked objects:
  5532 ;;		On entry : 0/0
  5533 ;;		On exit  : 0/0
  5534 ;;		Unchanged: 0/0
  5535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5536 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5537 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5538 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5539 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5540 ;;Total ram usage:        1 bytes
  5541 ;; Hardware stack levels used:    1
  5542 ;; Hardware stack levels required when called:    5
  5543 ;; This function calls:
  5544 ;;		Nothing
  5545 ;; This function is called by:
  5546 ;;		_I2C_Master_Start
  5547 ;;		_I2C_Master_Stop
  5548 ;;		_I2C_Master_Write
  5549 ;;		_I2C_Master_Read
  5550 ;; This function uses a non-reentrant model
  5551 ;;
  5552                           
  5553                           	psect	text21
  5554  001B6A                     __ptext21:
  5555                           	opt stack 0
  5556  001B6A                     _I2C_Master_Wait:
  5557                           	opt stack 24
  5558  001B6A                     l30:
  5559  001B6A  B4C7               	btfsc	4039,2,c	;volatile
  5560  001B6C  D7FE               	goto	l30
  5561  001B6E  CFC5 F035          	movff	4037,??_I2C_Master_Wait	;volatile
  5562  001B72  0E1F               	movlw	31
  5563  001B74  1635               	andwf	??_I2C_Master_Wait,f,c
  5564  001B76  B4D8               	btfsc	status,2,c
  5565  001B78  0012               	return	
  5566  001B7A  D7F7               	goto	l30
  5567  001B7C                     __end_of_I2C_Master_Wait:
  5568                           	opt stack 0
  5569                           tblptru	equ	0xFF8
  5570                           tblptrh	equ	0xFF7
  5571                           tblptrl	equ	0xFF6
  5572                           tablat	equ	0xFF5
  5573                           prodh	equ	0xFF4
  5574                           prodl	equ	0xFF3
  5575                           intcon	equ	0xFF2
  5576                           intcon3	equ	0xFF0
  5577                           postinc0	equ	0xFEE
  5578                           wreg	equ	0xFE8
  5579                           indf2	equ	0xFDF
  5580                           postinc2	equ	0xFDE
  5581                           postdec2	equ	0xFDD
  5582                           fsr2h	equ	0xFDA
  5583                           fsr2l	equ	0xFD9
  5584                           status	equ	0xFD8
  5585                           
  5586 ;; *************** function _I2C_Master_Init *****************
  5587 ;; Defined at:
  5588 ;;		line 13 in file "../I2C.c"
  5589 ;; Parameters:    Size  Location     Type
  5590 ;;  c               4   65[COMRAM] const unsigned long 
  5591 ;; Auto vars:     Size  Location     Type
  5592 ;;		None
  5593 ;; Return value:  Size  Location     Type
  5594 ;;                  1    wreg      void 
  5595 ;; Registers used:
  5596 ;;		wreg, status,2, status,0, cstack
  5597 ;; Tracked objects:
  5598 ;;		On entry : 0/0
  5599 ;;		On exit  : 0/0
  5600 ;;		Unchanged: 0/0
  5601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5602 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5603 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5604 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5605 ;;      Totals:         4       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5606 ;;Total ram usage:        8 bytes
  5607 ;; Hardware stack levels used:    1
  5608 ;; Hardware stack levels required when called:    6
  5609 ;; This function calls:
  5610 ;;		___lldiv
  5611 ;; This function is called by:
  5612 ;;		_main
  5613 ;; This function uses a non-reentrant model
  5614 ;;
  5615                           
  5616                           	psect	text22
  5617  0017C0                     __ptext22:
  5618                           	opt stack 0
  5619  0017C0                     _I2C_Master_Init:
  5620                           	opt stack 24
  5621                           
  5622                           ;I2C.c: 16: SSPSTAT = 0b00000000;
  5623                           
  5624                           ;incstack = 0
  5625  0017C0  0E00               	movlw	0
  5626  0017C2  6EC7               	movwf	4039,c	;volatile
  5627                           
  5628                           ;I2C.c: 17: SSPCON1 = 0b00101000;
  5629  0017C4  0E28               	movlw	40
  5630  0017C6  6EC6               	movwf	4038,c	;volatile
  5631                           
  5632                           ;I2C.c: 18: SSPCON2 = 0b00000000;
  5633  0017C8  0E00               	movlw	0
  5634  0017CA  6EC5               	movwf	4037,c	;volatile
  5635                           
  5636                           ;I2C.c: 19: SSPADD = (10000000/(4*c))-1;
  5637  0017CC  0E80               	movlw	128
  5638  0017CE  6E35               	movwf	___lldiv@dividend,c
  5639  0017D0  0E96               	movlw	150
  5640  0017D2  6E36               	movwf	___lldiv@dividend+1,c
  5641  0017D4  0E98               	movlw	152
  5642  0017D6  6E37               	movwf	___lldiv@dividend+2,c
  5643  0017D8  0E00               	movlw	0
  5644  0017DA  6E38               	movwf	___lldiv@dividend+3,c
  5645  0017DC  C042  F09E         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  5646  0017E0  C043  F09F         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  5647  0017E4  C044  F0A0         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  5648  0017E8  C045  F0A1         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  5649  0017EC  0E02               	movlw	2
  5650  0017EE                     u3995:
  5651  0017EE  90D8               	bcf	status,0,c
  5652  0017F0  0100               	movlb	0	; () banked
  5653  0017F2  379E               	rlcf	??_I2C_Master_Init& (0+255),f,b
  5654  0017F4  379F               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  5655  0017F6  37A0               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  5656  0017F8  37A1               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  5657  0017FA  2EE8               	decfsz	wreg,f,c
  5658  0017FC  D7F8               	goto	u3995
  5659  0017FE  C09E  F039         	movff	??_I2C_Master_Init,___lldiv@divisor
  5660  001802  C09F  F03A         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  5661  001806  C0A0  F03B         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  5662  00180A  C0A1  F03C         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  5663  00180E  EC2F  F00B         	call	___lldiv	;wreg free
  5664  001812  0435               	decf	?___lldiv,w,c
  5665  001814  6EC8               	movwf	4040,c	;volatile
  5666                           
  5667                           ;I2C.c: 20: TRISC3 = 1;
  5668  001816  8694               	bsf	3988,3,c	;volatile
  5669                           
  5670                           ;I2C.c: 21: TRISC4 = 1;
  5671  001818  8894               	bsf	3988,4,c	;volatile
  5672  00181A  0012               	return		;funcret
  5673  00181C                     __end_of_I2C_Master_Init:
  5674                           	opt stack 0
  5675                           tblptru	equ	0xFF8
  5676                           tblptrh	equ	0xFF7
  5677                           tblptrl	equ	0xFF6
  5678                           tablat	equ	0xFF5
  5679                           prodh	equ	0xFF4
  5680                           prodl	equ	0xFF3
  5681                           intcon	equ	0xFF2
  5682                           intcon3	equ	0xFF0
  5683                           postinc0	equ	0xFEE
  5684                           wreg	equ	0xFE8
  5685                           indf2	equ	0xFDF
  5686                           postinc2	equ	0xFDE
  5687                           postdec2	equ	0xFDD
  5688                           fsr2h	equ	0xFDA
  5689                           fsr2l	equ	0xFD9
  5690                           status	equ	0xFD8
  5691                           
  5692 ;; *************** function ___lldiv *****************
  5693 ;; Defined at:
  5694 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  5695 ;; Parameters:    Size  Location     Type
  5696 ;;  dividend        4   52[COMRAM] unsigned long 
  5697 ;;  divisor         4   56[COMRAM] unsigned long 
  5698 ;; Auto vars:     Size  Location     Type
  5699 ;;  quotient        4   60[COMRAM] unsigned long 
  5700 ;;  counter         1   64[COMRAM] unsigned char 
  5701 ;; Return value:  Size  Location     Type
  5702 ;;                  4   52[COMRAM] unsigned long 
  5703 ;; Registers used:
  5704 ;;		wreg, status,2, status,0
  5705 ;; Tracked objects:
  5706 ;;		On entry : 0/0
  5707 ;;		On exit  : 0/0
  5708 ;;		Unchanged: 0/0
  5709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5710 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5711 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5712 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5713 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5714 ;;Total ram usage:       13 bytes
  5715 ;; Hardware stack levels used:    1
  5716 ;; Hardware stack levels required when called:    5
  5717 ;; This function calls:
  5718 ;;		Nothing
  5719 ;; This function is called by:
  5720 ;;		_I2C_Master_Init
  5721 ;; This function uses a non-reentrant model
  5722 ;;
  5723                           
  5724                           	psect	text23
  5725  00165E                     __ptext23:
  5726                           	opt stack 0
  5727  00165E                     ___lldiv:
  5728                           	opt stack 24
  5729                           
  5730                           ;incstack = 0
  5731  00165E  0E00               	movlw	0
  5732  001660  6E3D               	movwf	___lldiv@quotient,c
  5733  001662  0E00               	movlw	0
  5734  001664  6E3E               	movwf	___lldiv@quotient+1,c
  5735  001666  0E00               	movlw	0
  5736  001668  6E3F               	movwf	___lldiv@quotient+2,c
  5737  00166A  0E00               	movlw	0
  5738  00166C  6E40               	movwf	___lldiv@quotient+3,c
  5739  00166E  5039               	movf	___lldiv@divisor,w,c
  5740  001670  103A               	iorwf	___lldiv@divisor+1,w,c
  5741  001672  103B               	iorwf	___lldiv@divisor+2,w,c
  5742  001674  103C               	iorwf	___lldiv@divisor+3,w,c
  5743  001676  B4D8               	btfsc	status,2,c
  5744  001678  D02A               	goto	l830
  5745  00167A  0E01               	movlw	1
  5746  00167C  6E41               	movwf	___lldiv@counter,c
  5747  00167E  D006               	goto	l2792
  5748  001680                     l2790:
  5749  001680  90D8               	bcf	status,0,c
  5750  001682  3639               	rlcf	___lldiv@divisor,f,c
  5751  001684  363A               	rlcf	___lldiv@divisor+1,f,c
  5752  001686  363B               	rlcf	___lldiv@divisor+2,f,c
  5753  001688  363C               	rlcf	___lldiv@divisor+3,f,c
  5754  00168A  2A41               	incf	___lldiv@counter,f,c
  5755  00168C                     l2792:
  5756  00168C  AE3C               	btfss	___lldiv@divisor+3,7,c
  5757  00168E  D7F8               	goto	l2790
  5758  001690                     l2794:
  5759  001690  90D8               	bcf	status,0,c
  5760  001692  363D               	rlcf	___lldiv@quotient,f,c
  5761  001694  363E               	rlcf	___lldiv@quotient+1,f,c
  5762  001696  363F               	rlcf	___lldiv@quotient+2,f,c
  5763  001698  3640               	rlcf	___lldiv@quotient+3,f,c
  5764  00169A  5039               	movf	___lldiv@divisor,w,c
  5765  00169C  5C35               	subwf	___lldiv@dividend,w,c
  5766  00169E  503A               	movf	___lldiv@divisor+1,w,c
  5767  0016A0  5836               	subwfb	___lldiv@dividend+1,w,c
  5768  0016A2  503B               	movf	___lldiv@divisor+2,w,c
  5769  0016A4  5837               	subwfb	___lldiv@dividend+2,w,c
  5770  0016A6  503C               	movf	___lldiv@divisor+3,w,c
  5771  0016A8  5838               	subwfb	___lldiv@dividend+3,w,c
  5772  0016AA  A0D8               	btfss	status,0,c
  5773  0016AC  D009               	goto	l2802
  5774  0016AE  5039               	movf	___lldiv@divisor,w,c
  5775  0016B0  5E35               	subwf	___lldiv@dividend,f,c
  5776  0016B2  503A               	movf	___lldiv@divisor+1,w,c
  5777  0016B4  5A36               	subwfb	___lldiv@dividend+1,f,c
  5778  0016B6  503B               	movf	___lldiv@divisor+2,w,c
  5779  0016B8  5A37               	subwfb	___lldiv@dividend+2,f,c
  5780  0016BA  503C               	movf	___lldiv@divisor+3,w,c
  5781  0016BC  5A38               	subwfb	___lldiv@dividend+3,f,c
  5782  0016BE  803D               	bsf	___lldiv@quotient,0,c
  5783  0016C0                     l2802:
  5784  0016C0  90D8               	bcf	status,0,c
  5785  0016C2  323C               	rrcf	___lldiv@divisor+3,f,c
  5786  0016C4  323B               	rrcf	___lldiv@divisor+2,f,c
  5787  0016C6  323A               	rrcf	___lldiv@divisor+1,f,c
  5788  0016C8  3239               	rrcf	___lldiv@divisor,f,c
  5789  0016CA  2E41               	decfsz	___lldiv@counter,f,c
  5790  0016CC  D7E1               	goto	l2794
  5791  0016CE                     l830:
  5792  0016CE  C03D  F035         	movff	___lldiv@quotient,?___lldiv
  5793  0016D2  C03E  F036         	movff	___lldiv@quotient+1,?___lldiv+1
  5794  0016D6  C03F  F037         	movff	___lldiv@quotient+2,?___lldiv+2
  5795  0016DA  C040  F038         	movff	___lldiv@quotient+3,?___lldiv+3
  5796  0016DE  0012               	return		;funcret
  5797  0016E0                     __end_of___lldiv:
  5798                           	opt stack 0
  5799                           tblptru	equ	0xFF8
  5800                           tblptrh	equ	0xFF7
  5801                           tblptrl	equ	0xFF6
  5802                           tablat	equ	0xFF5
  5803                           prodh	equ	0xFF4
  5804                           prodl	equ	0xFF3
  5805                           intcon	equ	0xFF2
  5806                           intcon3	equ	0xFF0
  5807                           postinc0	equ	0xFEE
  5808                           wreg	equ	0xFE8
  5809                           indf2	equ	0xFDF
  5810                           postinc2	equ	0xFDE
  5811                           postdec2	equ	0xFDD
  5812                           fsr2h	equ	0xFDA
  5813                           fsr2l	equ	0xFD9
  5814                           status	equ	0xFD8
  5815                           
  5816 ;; *************** function _ISR *****************
  5817 ;; Defined at:
  5818 ;;		line 487 in file "../main.c"
  5819 ;; Parameters:    Size  Location     Type
  5820 ;;		None
  5821 ;; Auto vars:     Size  Location     Type
  5822 ;;  keypress        1   51[COMRAM] unsigned char 
  5823 ;; Return value:  Size  Location     Type
  5824 ;;                  1    wreg      void 
  5825 ;; Registers used:
  5826 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5827 ;; Tracked objects:
  5828 ;;		On entry : 0/0
  5829 ;;		On exit  : 0/0
  5830 ;;		Unchanged: 0/0
  5831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5832 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5833 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5834 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5835 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5836 ;;Total ram usage:       17 bytes
  5837 ;; Hardware stack levels used:    1
  5838 ;; Hardware stack levels required when called:    4
  5839 ;; This function calls:
  5840 ;;		_switchMenu
  5841 ;;		i2___awdiv
  5842 ;;		i2___awmod
  5843 ;;		i2_lcdInst
  5844 ;;		i2_printf
  5845 ;;		i2_readADC
  5846 ;;		i2_stopOperation
  5847 ;; This function is called by:
  5848 ;;		Interrupt level 2
  5849 ;; This function uses a non-reentrant model
  5850 ;;
  5851                           
  5852                           	psect	intcode
  5853  000008                     __pintcode:
  5854                           	opt stack 0
  5855  000008                     _ISR:
  5856                           	opt stack 23
  5857                           
  5858                           ;incstack = 0
  5859  000008  824B               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5860  00000A  EDE5  F004         	call	int_func,f	;refresh shadow registers
  5861                           tblptru	equ	0xFF8
  5862                           tblptrh	equ	0xFF7
  5863                           tblptrl	equ	0xFF6
  5864                           tablat	equ	0xFF5
  5865                           prodh	equ	0xFF4
  5866                           prodl	equ	0xFF3
  5867                           intcon	equ	0xFF2
  5868                           intcon3	equ	0xFF0
  5869                           postinc0	equ	0xFEE
  5870                           wreg	equ	0xFE8
  5871                           indf2	equ	0xFDF
  5872                           postinc2	equ	0xFDE
  5873                           postdec2	equ	0xFDD
  5874                           fsr2h	equ	0xFDA
  5875                           fsr2l	equ	0xFD9
  5876                           status	equ	0xFD8
  5877                           
  5878                           	psect	intcode_body
  5879  0009CA                     __pintcode_body:
  5880                           	opt stack 23
  5881  0009CA                     int_func:
  5882                           	opt stack 23
  5883  0009CA  0006               	pop		; remove dummy address from shadow register refresh
  5884  0009CC  CFFA F026          	movff	pclath,??_ISR+2
  5885  0009D0  CFFB F027          	movff	pclatu,??_ISR+3
  5886  0009D4  CFE9 F028          	movff	fsr0l,??_ISR+4
  5887  0009D8  CFEA F029          	movff	fsr0h,??_ISR+5
  5888  0009DC  CFE1 F02A          	movff	fsr1l,??_ISR+6
  5889  0009E0  CFE2 F02B          	movff	fsr1h,??_ISR+7
  5890  0009E4  CFD9 F02C          	movff	fsr2l,??_ISR+8
  5891  0009E8  CFDA F02D          	movff	fsr2h,??_ISR+9
  5892  0009EC  CFF3 F02E          	movff	prodl,??_ISR+10
  5893  0009F0  CFF4 F02F          	movff	prodh,??_ISR+11
  5894  0009F4  CFF6 F030          	movff	tblptrl,??_ISR+12
  5895  0009F8  CFF7 F031          	movff	tblptrh,??_ISR+13
  5896  0009FC  CFF8 F032          	movff	tblptru,??_ISR+14
  5897  000A00  CFF5 F033          	movff	tablat,??_ISR+15
  5898                           
  5899                           ;main.c: 488: if (INT1IF){
  5900  000A04  A0F0               	btfss	intcon3,0,c	;volatile
  5901  000A06  D015               	goto	i2l3684
  5902                           
  5903                           ;main.c: 489: unsigned char keypress = (PORTB & 0xF0) >> 4;
  5904  000A08  3881               	swapf	3969,w,c	;volatile
  5905  000A0A  0B0F               	andlw	15
  5906  000A0C  0B0F               	andlw	15
  5907  000A0E  6E34               	movwf	ISR@keypress,c
  5908                           
  5909                           ;main.c: 490: switchMenu('4', '6', keys[keypress]);
  5910  000A10  0E36               	movlw	54
  5911  000A12  6E21               	movwf	switchMenu@right,c
  5912  000A14  5034               	movf	ISR@keypress,w,c
  5913  000A16  0D01               	mullw	1
  5914  000A18  0E47               	movlw	low _keys
  5915  000A1A  24F3               	addwf	prodl,w,c
  5916  000A1C  6EF6               	movwf	tblptrl,c
  5917  000A1E  0EFE               	movlw	high _keys
  5918  000A20  20F4               	addwfc	prodh,w,c
  5919  000A22  6EF7               	movwf	tblptrh,c
  5920  000A24                     	if	0	;There are less than 3 active tblptr bytes
  5921  000A24                     	endif
  5922  000A24  0008               	tblrd		*
  5923  000A26  CFF5 F022          	movff	tablat,switchMenu@key
  5924  000A2A  0E34               	movlw	52
  5925  000A2C  EC0D  F00A         	call	_switchMenu
  5926                           
  5927                           ;main.c: 491: INT1IF = 0;
  5928  000A30  90F0               	bcf	intcon3,0,c	;volatile
  5929  000A32                     i2l3684:
  5930                           
  5931                           ;main.c: 492: }
  5932                           ;main.c: 493: if (screenMode == 1 && TMR0IF){
  5933  000A32  0100               	movlb	0	; () banked
  5934  000A34  05B7               	decf	_screenMode& (0+255),w,b
  5935  000A36  B4D8               	btfsc	status,2,c
  5936                           
  5937                           ; BSR set to: 0
  5938  000A38  A4F2               	btfss	intcon,2,c	;volatile
  5939  000A3A  D06C               	goto	i2l3740
  5940                           
  5941                           ; BSR set to: 0
  5942                           ;main.c: 494: TMR0IF = 0;
  5943  000A3C  94F2               	bcf	intcon,2,c	;volatile
  5944                           
  5945                           ; BSR set to: 0
  5946                           ;main.c: 495: TMR0 = 55770;
  5947  000A3E  0ED9               	movlw	217
  5948  000A40  6ED7               	movwf	4055,c	;volatile
  5949  000A42  0EDA               	movlw	218
  5950  000A44  6ED6               	movwf	4054,c	;volatile
  5951                           
  5952                           ; BSR set to: 0
  5953                           ;main.c: 496: opTimer++;
  5954  000A46  2A47               	incf	_opTimer,f,c
  5955                           
  5956                           ; BSR set to: 0
  5957                           ;main.c: 497: min = opTimer / 60;
  5958  000A48  C047  F001         	movff	_opTimer,i2___awdiv@dividend
  5959  000A4C  6A02               	clrf	i2___awdiv@dividend+1,c
  5960  000A4E  0E00               	movlw	0
  5961  000A50  6E04               	movwf	i2___awdiv@divisor+1,c
  5962  000A52  0E3C               	movlw	60
  5963  000A54  6E03               	movwf	i2___awdiv@divisor,c
  5964  000A56  ECED  F00A         	call	i2___awdiv	;wreg free
  5965  000A5A  5001               	movf	?i2___awdiv,w,c
  5966  000A5C  0100               	movlb	0	; () banked
  5967  000A5E  6F8E               	movwf	_min& (0+255),b
  5968                           
  5969                           ; BSR set to: 0
  5970                           ;main.c: 498: sec = opTimer % 60;
  5971  000A60  C047  F001         	movff	_opTimer,i2___awmod@dividend
  5972  000A64  6A02               	clrf	i2___awmod@dividend+1,c
  5973  000A66  0E00               	movlw	0
  5974  000A68  6E04               	movwf	i2___awmod@divisor+1,c
  5975  000A6A  0E3C               	movlw	60
  5976  000A6C  6E03               	movwf	i2___awmod@divisor,c
  5977  000A6E  ECA8  F00B         	call	i2___awmod	;wreg free
  5978  000A72  5001               	movf	?i2___awmod,w,c
  5979  000A74  0100               	movlb	0	; () banked
  5980  000A76  6F98               	movwf	_sec& (0+255),b
  5981                           
  5982                           ; BSR set to: 0
  5983                           ;main.c: 499: lcdInst(0b10000000);;
  5984  000A78  0E80               	movlw	128
  5985  000A7A  ECD0  F00D         	call	i2_lcdInst
  5986                           
  5987                           ;main.c: 500: printf("RUNNING... %02d:%02d", min, sec);
  5988  000A7E  0EC6               	movlw	low STR_24
  5989  000A80  6E0D               	movwf	i2printf@f,c
  5990  000A82  0EFE               	movlw	high STR_24
  5991  000A84  6E0E               	movwf	i2printf@f+1,c
  5992  000A86  C08E  F00F         	movff	_min,?i2_printf+2
  5993  000A8A  6A10               	clrf	?i2_printf+3,c
  5994  000A8C  C098  F011         	movff	_sec,?i2_printf+4
  5995  000A90  6A12               	clrf	?i2_printf+5,c
  5996  000A92  EC8B  F006         	call	i2_printf	;wreg free
  5997                           
  5998                           ;main.c: 501: if (waitMotor){
  5999  000A96  0100               	movlb	0	; () banked
  6000  000A98  519D               	movf	_waitMotor& (0+255),w,b
  6001  000A9A  B4D8               	btfsc	status,2,c
  6002  000A9C  D009               	goto	i2l3710
  6003                           
  6004                           ; BSR set to: 0
  6005                           ;main.c: 502: waitMotor++;
  6006  000A9E  0100               	movlb	0	; () banked
  6007  000AA0  2B9D               	incf	_waitMotor& (0+255),f,b
  6008                           
  6009                           ; BSR set to: 0
  6010                           ;main.c: 503: if (waitMotor >= 2){
  6011  000AA2  0E01               	movlw	1
  6012  000AA4  0100               	movlb	0	; () banked
  6013  000AA6  659D               	cpfsgt	_waitMotor& (0+255),b
  6014  000AA8  D003               	goto	i2l3710
  6015                           
  6016                           ; BSR set to: 0
  6017                           ;main.c: 504: waitMotor = 0;
  6018  000AAA  0E00               	movlw	0
  6019  000AAC  0100               	movlb	0	; () banked
  6020  000AAE  6F9D               	movwf	_waitMotor& (0+255),b
  6021  000AB0                     i2l3710:
  6022                           
  6023                           ; BSR set to: 0
  6024                           ;main.c: 505: }
  6025                           ;main.c: 506: }
  6026                           ;main.c: 507: if (opTimer >= 180){
  6027  000AB0  0EB3               	movlw	179
  6028  000AB2  6447               	cpfsgt	_opTimer,c
  6029  000AB4  D005               	goto	i2l3716
  6030                           
  6031                           ; BSR set to: 0
  6032                           ;main.c: 508: screenMode = 0;
  6033  000AB6  0E00               	movlw	0
  6034  000AB8  0100               	movlb	0	; () banked
  6035  000ABA  6FB7               	movwf	_screenMode& (0+255),b
  6036                           
  6037                           ; BSR set to: 0
  6038                           ;main.c: 509: stopOperation();
  6039  000ABC  EC9C  F009         	call	i2_stopOperation	;wreg free
  6040  000AC0                     i2l3716:
  6041                           
  6042                           ;main.c: 510: }
  6043                           ;main.c: 511: if (LATCbits.LC0){
  6044  000AC0  A08B               	btfss	3979,0,c	;volatile
  6045  000AC2  D002               	goto	i2l3720
  6046                           
  6047                           ;main.c: 512: LATCbits.LC0 = 0;;
  6048  000AC4  908B               	bcf	3979,0,c	;volatile
  6049                           
  6050                           ;main.c: 513: }
  6051  000AC6  D007               	goto	i2l3728
  6052  000AC8                     i2l3720:
  6053                           
  6054                           ;main.c: 514: else {
  6055                           ;main.c: 515: solOnTimer++;
  6056  000AC8  2A4A               	incf	_solOnTimer,f,c
  6057                           
  6058                           ;main.c: 516: if (solOnTimer >= 4){
  6059  000ACA  0E03               	movlw	3
  6060  000ACC  644A               	cpfsgt	_solOnTimer,c
  6061  000ACE  D003               	goto	i2l3728
  6062                           
  6063                           ;main.c: 517: solOnTimer = 0;
  6064  000AD0  0E00               	movlw	0
  6065  000AD2  6E4A               	movwf	_solOnTimer,c
  6066                           
  6067                           ;main.c: 518: LATCbits.LC0 = 1;;
  6068  000AD4  808B               	bsf	3979,0,c	;volatile
  6069  000AD6                     i2l3728:
  6070                           
  6071                           ;main.c: 519: }
  6072                           ;main.c: 520: }
  6073                           ;main.c: 521: readADC(2);
  6074  000AD6  0E02               	movlw	2
  6075  000AD8  ECAB  F00D         	call	i2_readADC
  6076                           
  6077                           ;main.c: 522: if (((ADRESH<<8)+ADRESL)>50){
  6078  000ADC  50C3               	movf	4035,w,c	;volatile
  6079  000ADE  CFC4 F024          	movff	4036,??_ISR	;volatile
  6080  000AE2  6A25               	clrf	(??_ISR+1)& (0+255),c
  6081  000AE4  C024  F025         	movff	??_ISR,??_ISR+1
  6082  000AE8  6A24               	clrf	??_ISR,c
  6083  000AEA  2624               	addwf	??_ISR,f,c
  6084  000AEC  0E00               	movlw	0
  6085  000AEE  2225               	addwfc	??_ISR+1,f,c
  6086  000AF0  BE25               	btfsc	??_ISR+1,7,c
  6087  000AF2  D00E               	goto	i2l3738
  6088  000AF4  5025               	movf	??_ISR+1,w,c
  6089  000AF6  E104               	bnz	i2u363_40
  6090  000AF8  0E33               	movlw	51
  6091  000AFA  5C24               	subwf	??_ISR,w,c
  6092  000AFC  A0D8               	btfss	status,0,c
  6093  000AFE  D008               	goto	i2l3738
  6094  000B00                     i2u363_40:
  6095                           
  6096                           ;main.c: 523: doneTimer++;
  6097  000B00  2A46               	incf	_doneTimer,f,c
  6098                           
  6099                           ;main.c: 524: if (doneTimer >= 10){
  6100  000B02  0E09               	movlw	9
  6101  000B04  6446               	cpfsgt	_doneTimer,c
  6102  000B06  D006               	goto	i2l3740
  6103                           
  6104                           ;main.c: 525: doneSorting = 1;
  6105  000B08  0E01               	movlw	1
  6106  000B0A  0100               	movlb	0	; () banked
  6107  000B0C  6F8D               	movwf	_doneSorting& (0+255),b
  6108                           
  6109                           ; BSR set to: 0
  6110                           ;main.c: 526: }
  6111                           ;main.c: 527: }
  6112  000B0E  D002               	goto	i2l3740
  6113  000B10                     i2l3738:
  6114                           
  6115                           ;main.c: 528: else
  6116                           ;main.c: 529: doneTimer = 0;
  6117  000B10  0E00               	movlw	0
  6118  000B12  6E46               	movwf	_doneTimer,c
  6119  000B14                     i2l3740:
  6120                           
  6121                           ;main.c: 530: }
  6122                           ;main.c: 531: if (screenMode == 1 && TMR1IF){
  6123  000B14  0100               	movlb	0	; () banked
  6124  000B16  05B7               	decf	_screenMode& (0+255),w,b
  6125  000B18  B4D8               	btfsc	status,2,c
  6126                           
  6127                           ; BSR set to: 0
  6128  000B1A  A09E               	btfss	3998,0,c	;volatile
  6129  000B1C  D0DE               	goto	i2l406
  6130                           
  6131                           ; BSR set to: 0
  6132                           ;main.c: 532: TMR1IF = 0;
  6133  000B1E  909E               	bcf	3998,0,c	;volatile
  6134                           
  6135                           ; BSR set to: 0
  6136                           ;main.c: 533: TMR1 = 58035;
  6137  000B20  0EE2               	movlw	226
  6138  000B22  6ECF               	movwf	4047,c	;volatile
  6139  000B24  0EB3               	movlw	179
  6140  000B26  6ECE               	movwf	4046,c	;volatile
  6141                           
  6142                           ; BSR set to: 0
  6143                           ;main.c: 534: if (stepGear){
  6144  000B28  0100               	movlb	0	; () banked
  6145  000B2A  5187               	movf	_stepGear& (0+255),w,b
  6146  000B2C  0100               	movlb	0	; () banked
  6147  000B2E  1188               	iorwf	(_stepGear+1)& (0+255),w,b
  6148  000B30  B4D8               	btfsc	status,2,c
  6149  000B32  D01F               	goto	i2l3762
  6150                           
  6151                           ; BSR set to: 0
  6152                           ;main.c: 535: stepGear++;
  6153  000B34  0100               	movlb	0	; () banked
  6154  000B36  4B87               	infsnz	_stepGear& (0+255),f,b
  6155  000B38  2B88               	incf	(_stepGear+1)& (0+255),f,b
  6156                           
  6157                           ; BSR set to: 0
  6158                           ;main.c: 536: if (stepGear >= 267){
  6159  000B3A  0E0B               	movlw	11
  6160  000B3C  0100               	movlb	0	; () banked
  6161  000B3E  5D87               	subwf	_stepGear& (0+255),w,b
  6162  000B40  0E01               	movlw	1
  6163  000B42  0100               	movlb	0	; () banked
  6164  000B44  5988               	subwfb	(_stepGear+1)& (0+255),w,b
  6165  000B46  A0D8               	btfss	status,0,c
  6166  000B48  D007               	goto	i2l3760
  6167                           
  6168                           ; BSR set to: 0
  6169                           ;main.c: 537: stepGear = 0;
  6170  000B4A  0E00               	movlw	0
  6171  000B4C  0100               	movlb	0	; () banked
  6172  000B4E  6F88               	movwf	(_stepGear+1)& (0+255),b
  6173  000B50  0E00               	movlw	0
  6174  000B52  6F87               	movwf	_stepGear& (0+255),b
  6175                           
  6176                           ; BSR set to: 0
  6177                           ;main.c: 538: LATCbits.LC2 = 0;;
  6178  000B54  948B               	bcf	3979,2,c	;volatile
  6179                           
  6180                           ; BSR set to: 0
  6181                           ;main.c: 539: LATCbits.LC1= 0;;
  6182  000B56  928B               	bcf	3979,1,c	;volatile
  6183  000B58                     i2l3760:
  6184                           
  6185                           ; BSR set to: 0
  6186                           ;main.c: 540: }
  6187                           ;main.c: 541: LATCbits.LC2 = !LATCbits.LC2;;
  6188  000B58  B48B               	btfsc	3979,2,c	;volatile
  6189  000B5A  D003               	goto	i2u369_40
  6190  000B5C  6A24               	clrf	??_ISR& (0+255),c
  6191  000B5E  2A24               	incf	??_ISR& (0+255),f,c
  6192  000B60  D001               	goto	i2u370_48
  6193  000B62                     i2u369_40:
  6194  000B62  6A24               	clrf	??_ISR& (0+255),c
  6195  000B64                     i2u370_48:
  6196  000B64  4624               	rlncf	??_ISR,f,c
  6197  000B66  4624               	rlncf	??_ISR,f,c
  6198  000B68  508B               	movf	3979,w,c	;volatile
  6199  000B6A  1824               	xorwf	??_ISR,w,c
  6200  000B6C  0BFB               	andlw	-5
  6201  000B6E  1824               	xorwf	??_ISR,w,c
  6202  000B70  6E8B               	movwf	3979,c	;volatile
  6203  000B72                     i2l3762:
  6204                           
  6205                           ;main.c: 542: }
  6206                           ;main.c: 543: if (plat1Left){
  6207  000B72  0100               	movlb	0	; () banked
  6208  000B74  5194               	movf	_plat1Left& (0+255),w,b
  6209  000B76  B4D8               	btfsc	status,2,c
  6210  000B78  D029               	goto	i2l3792
  6211                           
  6212                           ; BSR set to: 0
  6213                           ;main.c: 544: if (step1 == 1){
  6214  000B7A  0448               	decf	_step1,w,c
  6215  000B7C  A4D8               	btfss	status,2,c
  6216  000B7E  D002               	goto	i2l3768
  6217                           
  6218                           ; BSR set to: 0
  6219                           ;main.c: 545: LATAbits.LA5 = 1;;
  6220  000B80  8A89               	bsf	3977,5,c	;volatile
  6221                           
  6222                           ;main.c: 546: LATAbits.LA4 = 0;;
  6223  000B82  9889               	bcf	3977,4,c	;volatile
  6224  000B84                     i2l3768:
  6225                           
  6226                           ; BSR set to: 0
  6227                           ;main.c: 547: }
  6228                           ;main.c: 548: if (step1 == 2){
  6229  000B84  0E02               	movlw	2
  6230  000B86  1848               	xorwf	_step1,w,c
  6231  000B88  A4D8               	btfss	status,2,c
  6232  000B8A  D002               	goto	i2l3772
  6233                           
  6234                           ; BSR set to: 0
  6235                           ;main.c: 549: LATEbits.LE2 = 0;;
  6236  000B8C  948D               	bcf	3981,2,c	;volatile
  6237                           
  6238                           ;main.c: 550: LATAbits.LA3 = 1;;
  6239  000B8E  8689               	bsf	3977,3,c	;volatile
  6240  000B90                     i2l3772:
  6241                           
  6242                           ; BSR set to: 0
  6243                           ;main.c: 551: }
  6244                           ;main.c: 552: if (step1 == 3){
  6245  000B90  0E03               	movlw	3
  6246  000B92  1848               	xorwf	_step1,w,c
  6247  000B94  A4D8               	btfss	status,2,c
  6248  000B96  D002               	goto	i2l3776
  6249                           
  6250                           ; BSR set to: 0
  6251                           ;main.c: 553: LATAbits.LA5 = 0;;
  6252  000B98  9A89               	bcf	3977,5,c	;volatile
  6253                           
  6254                           ;main.c: 554: LATAbits.LA4 = 1;;
  6255  000B9A  8889               	bsf	3977,4,c	;volatile
  6256  000B9C                     i2l3776:
  6257                           
  6258                           ; BSR set to: 0
  6259                           ;main.c: 555: }
  6260                           ;main.c: 556: if (step1 == 4){
  6261  000B9C  0E04               	movlw	4
  6262  000B9E  1848               	xorwf	_step1,w,c
  6263  000BA0  A4D8               	btfss	status,2,c
  6264  000BA2  D002               	goto	i2l3780
  6265                           
  6266                           ; BSR set to: 0
  6267                           ;main.c: 557: LATEbits.LE2 = 1;;
  6268  000BA4  848D               	bsf	3981,2,c	;volatile
  6269                           
  6270                           ;main.c: 558: LATAbits.LA3 = 0;;
  6271  000BA6  9689               	bcf	3977,3,c	;volatile
  6272  000BA8                     i2l3780:
  6273                           
  6274                           ; BSR set to: 0
  6275                           ;main.c: 559: }
  6276                           ;main.c: 560: plat1Left++;
  6277  000BA8  0100               	movlb	0	; () banked
  6278  000BAA  2B94               	incf	_plat1Left& (0+255),f,b
  6279                           
  6280                           ; BSR set to: 0
  6281                           ;main.c: 561: if (plat1Left>=200){
  6282  000BAC  0EC7               	movlw	199
  6283  000BAE  0100               	movlb	0	; () banked
  6284  000BB0  6594               	cpfsgt	_plat1Left& (0+255),b
  6285  000BB2  D005               	goto	i2l3786
  6286                           
  6287                           ; BSR set to: 0
  6288                           ;main.c: 562: plat1Left = 0;
  6289  000BB4  0E00               	movlw	0
  6290  000BB6  0100               	movlb	0	; () banked
  6291  000BB8  6F94               	movwf	_plat1Left& (0+255),b
  6292                           
  6293                           ;main.c: 563: step1 = 0;
  6294  000BBA  0E00               	movlw	0
  6295  000BBC  D004               	goto	L1
  6296  000BBE                     i2l3786:
  6297                           
  6298                           ; BSR set to: 0
  6299                           ;main.c: 565: else if (step1>=4)
  6300  000BBE  0E03               	movlw	3
  6301  000BC0  6448               	cpfsgt	_step1,c
  6302  000BC2  D003               	goto	i2l3790
  6303                           
  6304                           ; BSR set to: 0
  6305                           ;main.c: 566: step1 = 1;
  6306  000BC4  0E01               	movlw	1
  6307  000BC6                     L1:
  6308  000BC6  6E48               	movwf	_step1,c
  6309  000BC8  D001               	goto	i2l3792
  6310  000BCA                     i2l3790:
  6311                           
  6312                           ; BSR set to: 0
  6313                           ;main.c: 567: else
  6314                           ;main.c: 568: step1++;
  6315  000BCA  2A48               	incf	_step1,f,c
  6316  000BCC                     i2l3792:
  6317                           
  6318                           ; BSR set to: 0
  6319                           ;main.c: 569: }
  6320                           ;main.c: 570: if (plat1Right){
  6321  000BCC  0100               	movlb	0	; () banked
  6322  000BCE  5195               	movf	_plat1Right& (0+255),w,b
  6323  000BD0  B4D8               	btfsc	status,2,c
  6324  000BD2  D029               	goto	i2l3822
  6325                           
  6326                           ; BSR set to: 0
  6327                           ;main.c: 571: if (step1 == 4){
  6328  000BD4  0E04               	movlw	4
  6329  000BD6  1848               	xorwf	_step1,w,c
  6330  000BD8  A4D8               	btfss	status,2,c
  6331  000BDA  D002               	goto	i2l3798
  6332                           
  6333                           ; BSR set to: 0
  6334                           ;main.c: 572: LATAbits.LA5 = 0;;
  6335  000BDC  9A89               	bcf	3977,5,c	;volatile
  6336                           
  6337                           ;main.c: 573: LATAbits.LA4 = 1;;
  6338  000BDE  8889               	bsf	3977,4,c	;volatile
  6339  000BE0                     i2l3798:
  6340                           
  6341                           ; BSR set to: 0
  6342                           ;main.c: 574: }
  6343                           ;main.c: 575: if (step1 == 3){
  6344  000BE0  0E03               	movlw	3
  6345  000BE2  1848               	xorwf	_step1,w,c
  6346  000BE4  A4D8               	btfss	status,2,c
  6347  000BE6  D002               	goto	i2l3802
  6348                           
  6349                           ; BSR set to: 0
  6350                           ;main.c: 576: LATEbits.LE2 = 0;;
  6351  000BE8  948D               	bcf	3981,2,c	;volatile
  6352                           
  6353                           ;main.c: 577: LATAbits.LA3 = 1;;
  6354  000BEA  8689               	bsf	3977,3,c	;volatile
  6355  000BEC                     i2l3802:
  6356                           
  6357                           ; BSR set to: 0
  6358                           ;main.c: 578: }
  6359                           ;main.c: 579: if (step1 == 2){
  6360  000BEC  0E02               	movlw	2
  6361  000BEE  1848               	xorwf	_step1,w,c
  6362  000BF0  A4D8               	btfss	status,2,c
  6363  000BF2  D002               	goto	i2l3806
  6364                           
  6365                           ; BSR set to: 0
  6366                           ;main.c: 580: LATAbits.LA5 = 1;;
  6367  000BF4  8A89               	bsf	3977,5,c	;volatile
  6368                           
  6369                           ;main.c: 581: LATAbits.LA4 = 0;;
  6370  000BF6  9889               	bcf	3977,4,c	;volatile
  6371  000BF8                     i2l3806:
  6372                           
  6373                           ; BSR set to: 0
  6374                           ;main.c: 582: }
  6375                           ;main.c: 583: if (step1 == 1){
  6376  000BF8  0448               	decf	_step1,w,c
  6377  000BFA  A4D8               	btfss	status,2,c
  6378  000BFC  D002               	goto	i2l3810
  6379                           
  6380                           ; BSR set to: 0
  6381                           ;main.c: 584: LATEbits.LE2 = 1;;
  6382  000BFE  848D               	bsf	3981,2,c	;volatile
  6383                           
  6384                           ;main.c: 585: LATAbits.LA3 = 0;;
  6385  000C00  9689               	bcf	3977,3,c	;volatile
  6386  000C02                     i2l3810:
  6387                           
  6388                           ; BSR set to: 0
  6389                           ;main.c: 586: }
  6390                           ;main.c: 587: plat1Right++;
  6391  000C02  0100               	movlb	0	; () banked
  6392  000C04  2B95               	incf	_plat1Right& (0+255),f,b
  6393                           
  6394                           ; BSR set to: 0
  6395                           ;main.c: 588: if (plat1Right>=200){
  6396  000C06  0EC7               	movlw	199
  6397  000C08  0100               	movlb	0	; () banked
  6398  000C0A  6595               	cpfsgt	_plat1Right& (0+255),b
  6399  000C0C  D005               	goto	i2l3816
  6400                           
  6401                           ; BSR set to: 0
  6402                           ;main.c: 589: plat1Right = 0;
  6403  000C0E  0E00               	movlw	0
  6404  000C10  0100               	movlb	0	; () banked
  6405  000C12  6F95               	movwf	_plat1Right& (0+255),b
  6406                           
  6407                           ;main.c: 590: step1 = 0;
  6408  000C14  0E00               	movlw	0
  6409  000C16  D004               	goto	L2
  6410  000C18                     i2l3816:
  6411                           
  6412                           ; BSR set to: 0
  6413                           ;main.c: 592: else if (step1<=1)
  6414  000C18  0E02               	movlw	2
  6415  000C1A  6048               	cpfslt	_step1,c
  6416  000C1C  D003               	goto	i2l3820
  6417                           
  6418                           ; BSR set to: 0
  6419                           ;main.c: 593: step1 = 4;
  6420  000C1E  0E04               	movlw	4
  6421  000C20                     L2:
  6422  000C20  6E48               	movwf	_step1,c
  6423  000C22  D001               	goto	i2l3822
  6424  000C24                     i2l3820:
  6425                           
  6426                           ; BSR set to: 0
  6427                           ;main.c: 594: else
  6428                           ;main.c: 595: step1--;
  6429  000C24  0648               	decf	_step1,f,c
  6430  000C26                     i2l3822:
  6431                           
  6432                           ; BSR set to: 0
  6433                           ;main.c: 596: }
  6434                           ;main.c: 597: if (plat2Left){
  6435  000C26  0100               	movlb	0	; () banked
  6436  000C28  5196               	movf	_plat2Left& (0+255),w,b
  6437  000C2A  B4D8               	btfsc	status,2,c
  6438  000C2C  D029               	goto	i2l3852
  6439                           
  6440                           ; BSR set to: 0
  6441                           ;main.c: 598: if (step2 == 1){
  6442  000C2E  0449               	decf	_step2,w,c
  6443  000C30  A4D8               	btfss	status,2,c
  6444  000C32  D002               	goto	i2l3828
  6445                           
  6446                           ; BSR set to: 0
  6447                           ;main.c: 599: LATAbits.LA6 = 1;;
  6448  000C34  8C89               	bsf	3977,6,c	;volatile
  6449                           
  6450                           ;main.c: 600: LATBbits.LB3 = 0;;
  6451  000C36  968A               	bcf	3978,3,c	;volatile
  6452  000C38                     i2l3828:
  6453                           
  6454                           ; BSR set to: 0
  6455                           ;main.c: 601: }
  6456                           ;main.c: 602: if (step2 == 2){
  6457  000C38  0E02               	movlw	2
  6458  000C3A  1849               	xorwf	_step2,w,c
  6459  000C3C  A4D8               	btfss	status,2,c
  6460  000C3E  D002               	goto	i2l3832
  6461                           
  6462                           ; BSR set to: 0
  6463                           ;main.c: 603: LATBbits.LB0 = 0;;
  6464  000C40  908A               	bcf	3978,0,c	;volatile
  6465                           
  6466                           ;main.c: 604: LATBbits.LB2 = 1;;
  6467  000C42  848A               	bsf	3978,2,c	;volatile
  6468  000C44                     i2l3832:
  6469                           
  6470                           ; BSR set to: 0
  6471                           ;main.c: 605: }
  6472                           ;main.c: 606: if (step2 == 3){
  6473  000C44  0E03               	movlw	3
  6474  000C46  1849               	xorwf	_step2,w,c
  6475  000C48  A4D8               	btfss	status,2,c
  6476  000C4A  D002               	goto	i2l3836
  6477                           
  6478                           ; BSR set to: 0
  6479                           ;main.c: 607: LATAbits.LA6 = 0;;
  6480  000C4C  9C89               	bcf	3977,6,c	;volatile
  6481                           
  6482                           ;main.c: 608: LATBbits.LB3 = 1;;
  6483  000C4E  868A               	bsf	3978,3,c	;volatile
  6484  000C50                     i2l3836:
  6485                           
  6486                           ; BSR set to: 0
  6487                           ;main.c: 609: }
  6488                           ;main.c: 610: if (step2 == 4){
  6489  000C50  0E04               	movlw	4
  6490  000C52  1849               	xorwf	_step2,w,c
  6491  000C54  A4D8               	btfss	status,2,c
  6492  000C56  D002               	goto	i2l3840
  6493                           
  6494                           ; BSR set to: 0
  6495                           ;main.c: 611: LATBbits.LB0 = 1;;
  6496  000C58  808A               	bsf	3978,0,c	;volatile
  6497                           
  6498                           ;main.c: 612: LATBbits.LB2 = 0;;
  6499  000C5A  948A               	bcf	3978,2,c	;volatile
  6500  000C5C                     i2l3840:
  6501                           
  6502                           ; BSR set to: 0
  6503                           ;main.c: 613: }
  6504                           ;main.c: 614: plat2Left++;
  6505  000C5C  0100               	movlb	0	; () banked
  6506  000C5E  2B96               	incf	_plat2Left& (0+255),f,b
  6507                           
  6508                           ; BSR set to: 0
  6509                           ;main.c: 615: if (plat2Left>=200){
  6510  000C60  0EC7               	movlw	199
  6511  000C62  0100               	movlb	0	; () banked
  6512  000C64  6596               	cpfsgt	_plat2Left& (0+255),b
  6513  000C66  D005               	goto	i2l3846
  6514                           
  6515                           ; BSR set to: 0
  6516                           ;main.c: 616: plat2Left = 0;
  6517  000C68  0E00               	movlw	0
  6518  000C6A  0100               	movlb	0	; () banked
  6519  000C6C  6F96               	movwf	_plat2Left& (0+255),b
  6520                           
  6521                           ;main.c: 617: step2 = 0;
  6522  000C6E  0E00               	movlw	0
  6523  000C70  D004               	goto	L3
  6524  000C72                     i2l3846:
  6525                           
  6526                           ; BSR set to: 0
  6527                           ;main.c: 619: else if (step2>=4)
  6528  000C72  0E03               	movlw	3
  6529  000C74  6449               	cpfsgt	_step2,c
  6530  000C76  D003               	goto	i2l3850
  6531                           
  6532                           ; BSR set to: 0
  6533                           ;main.c: 620: step2 = 1;
  6534  000C78  0E01               	movlw	1
  6535  000C7A                     L3:
  6536  000C7A  6E49               	movwf	_step2,c
  6537  000C7C  D001               	goto	i2l3852
  6538  000C7E                     i2l3850:
  6539                           
  6540                           ; BSR set to: 0
  6541                           ;main.c: 621: else
  6542                           ;main.c: 622: step2++;
  6543  000C7E  2A49               	incf	_step2,f,c
  6544  000C80                     i2l3852:
  6545                           
  6546                           ; BSR set to: 0
  6547                           ;main.c: 623: }
  6548                           ;main.c: 624: if (plat2Right){
  6549  000C80  0100               	movlb	0	; () banked
  6550  000C82  5197               	movf	_plat2Right& (0+255),w,b
  6551  000C84  B4D8               	btfsc	status,2,c
  6552  000C86  D029               	goto	i2l406
  6553                           
  6554                           ; BSR set to: 0
  6555                           ;main.c: 625: if (step2 == 4){
  6556  000C88  0E04               	movlw	4
  6557  000C8A  1849               	xorwf	_step2,w,c
  6558  000C8C  A4D8               	btfss	status,2,c
  6559  000C8E  D002               	goto	i2l3858
  6560                           
  6561                           ; BSR set to: 0
  6562                           ;main.c: 626: LATAbits.LA6 = 0;;
  6563  000C90  9C89               	bcf	3977,6,c	;volatile
  6564                           
  6565                           ;main.c: 627: LATBbits.LB3 = 1;;
  6566  000C92  868A               	bsf	3978,3,c	;volatile
  6567  000C94                     i2l3858:
  6568                           
  6569                           ; BSR set to: 0
  6570                           ;main.c: 628: }
  6571                           ;main.c: 629: if (step2 == 3){
  6572  000C94  0E03               	movlw	3
  6573  000C96  1849               	xorwf	_step2,w,c
  6574  000C98  A4D8               	btfss	status,2,c
  6575  000C9A  D002               	goto	i2l3862
  6576                           
  6577                           ; BSR set to: 0
  6578                           ;main.c: 630: LATBbits.LB0 = 0;;
  6579  000C9C  908A               	bcf	3978,0,c	;volatile
  6580                           
  6581                           ;main.c: 631: LATBbits.LB2 = 1;;
  6582  000C9E  848A               	bsf	3978,2,c	;volatile
  6583  000CA0                     i2l3862:
  6584                           
  6585                           ; BSR set to: 0
  6586                           ;main.c: 632: }
  6587                           ;main.c: 633: if (step2 == 2){
  6588  000CA0  0E02               	movlw	2
  6589  000CA2  1849               	xorwf	_step2,w,c
  6590  000CA4  A4D8               	btfss	status,2,c
  6591  000CA6  D002               	goto	i2l3866
  6592                           
  6593                           ; BSR set to: 0
  6594                           ;main.c: 634: LATAbits.LA6 = 1;;
  6595  000CA8  8C89               	bsf	3977,6,c	;volatile
  6596                           
  6597                           ;main.c: 635: LATBbits.LB3 = 0;;
  6598  000CAA  968A               	bcf	3978,3,c	;volatile
  6599  000CAC                     i2l3866:
  6600                           
  6601                           ; BSR set to: 0
  6602                           ;main.c: 636: }
  6603                           ;main.c: 637: if (step2 == 1){
  6604  000CAC  0449               	decf	_step2,w,c
  6605  000CAE  A4D8               	btfss	status,2,c
  6606  000CB0  D002               	goto	i2l3870
  6607                           
  6608                           ; BSR set to: 0
  6609                           ;main.c: 638: LATBbits.LB0 = 1;;
  6610  000CB2  808A               	bsf	3978,0,c	;volatile
  6611                           
  6612                           ;main.c: 639: LATBbits.LB2 = 0;;
  6613  000CB4  948A               	bcf	3978,2,c	;volatile
  6614  000CB6                     i2l3870:
  6615                           
  6616                           ; BSR set to: 0
  6617                           ;main.c: 640: }
  6618                           ;main.c: 641: plat2Right++;
  6619  000CB6  0100               	movlb	0	; () banked
  6620  000CB8  2B97               	incf	_plat2Right& (0+255),f,b
  6621                           
  6622                           ; BSR set to: 0
  6623                           ;main.c: 642: if (plat2Right>=200){
  6624  000CBA  0EC7               	movlw	199
  6625  000CBC  0100               	movlb	0	; () banked
  6626  000CBE  6597               	cpfsgt	_plat2Right& (0+255),b
  6627  000CC0  D005               	goto	i2l3876
  6628                           
  6629                           ; BSR set to: 0
  6630                           ;main.c: 643: plat2Right = 0;
  6631  000CC2  0E00               	movlw	0
  6632  000CC4  0100               	movlb	0	; () banked
  6633  000CC6  6F97               	movwf	_plat2Right& (0+255),b
  6634                           
  6635                           ;main.c: 644: step2 = 0;
  6636  000CC8  0E00               	movlw	0
  6637  000CCA  D004               	goto	L4
  6638  000CCC                     i2l3876:
  6639                           
  6640                           ; BSR set to: 0
  6641                           ;main.c: 646: else if (step2<=1)
  6642  000CCC  0E02               	movlw	2
  6643  000CCE  6049               	cpfslt	_step2,c
  6644  000CD0  D003               	goto	i2l3880
  6645                           
  6646                           ; BSR set to: 0
  6647                           ;main.c: 647: step2 = 4;
  6648  000CD2  0E04               	movlw	4
  6649  000CD4                     L4:
  6650  000CD4  6E49               	movwf	_step2,c
  6651  000CD6  D001               	goto	i2l406
  6652  000CD8                     i2l3880:
  6653                           
  6654                           ; BSR set to: 0
  6655                           ;main.c: 648: else
  6656                           ;main.c: 649: step2--;
  6657  000CD8  0649               	decf	_step2,f,c
  6658  000CDA                     i2l406:
  6659                           
  6660                           ; BSR set to: 0
  6661  000CDA  C033  FFF5         	movff	??_ISR+15,tablat
  6662  000CDE  C032  FFF8         	movff	??_ISR+14,tblptru
  6663  000CE2  C031  FFF7         	movff	??_ISR+13,tblptrh
  6664  000CE6  C030  FFF6         	movff	??_ISR+12,tblptrl
  6665  000CEA  C02F  FFF4         	movff	??_ISR+11,prodh
  6666  000CEE  C02E  FFF3         	movff	??_ISR+10,prodl
  6667  000CF2  C02D  FFDA         	movff	??_ISR+9,fsr2h
  6668  000CF6  C02C  FFD9         	movff	??_ISR+8,fsr2l
  6669  000CFA  C02B  FFE2         	movff	??_ISR+7,fsr1h
  6670  000CFE  C02A  FFE1         	movff	??_ISR+6,fsr1l
  6671  000D02  C029  FFEA         	movff	??_ISR+5,fsr0h
  6672  000D06  C028  FFE9         	movff	??_ISR+4,fsr0l
  6673  000D0A  C027  FFFB         	movff	??_ISR+3,pclatu
  6674  000D0E  C026  FFFA         	movff	??_ISR+2,pclath
  6675  000D12  924B               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6676  000D14  0011               	retfie		f
  6677  000D16                     __end_of_ISR:
  6678                           	opt stack 0
  6679                           pclatu	equ	0xFFB
  6680                           pclath	equ	0xFFA
  6681                           tblptru	equ	0xFF8
  6682                           tblptrh	equ	0xFF7
  6683                           tblptrl	equ	0xFF6
  6684                           tablat	equ	0xFF5
  6685                           prodh	equ	0xFF4
  6686                           prodl	equ	0xFF3
  6687                           intcon	equ	0xFF2
  6688                           intcon3	equ	0xFF0
  6689                           postinc0	equ	0xFEE
  6690                           fsr0h	equ	0xFEA
  6691                           fsr0l	equ	0xFE9
  6692                           wreg	equ	0xFE8
  6693                           fsr1h	equ	0xFE2
  6694                           fsr1l	equ	0xFE1
  6695                           indf2	equ	0xFDF
  6696                           postinc2	equ	0xFDE
  6697                           postdec2	equ	0xFDD
  6698                           fsr2h	equ	0xFDA
  6699                           fsr2l	equ	0xFD9
  6700                           status	equ	0xFD8
  6701                           
  6702 ;; *************** function i2_readADC *****************
  6703 ;; Defined at:
  6704 ;;		line 329 in file "../main.c"
  6705 ;; Parameters:    Size  Location     Type
  6706 ;;  channel         1    wreg     unsigned char 
  6707 ;; Auto vars:     Size  Location     Type
  6708 ;;  channel         1    0[COMRAM] unsigned char 
  6709 ;; Return value:  Size  Location     Type
  6710 ;;                  1    wreg      void 
  6711 ;; Registers used:
  6712 ;;		wreg, status,2, status,0
  6713 ;; Tracked objects:
  6714 ;;		On entry : 0/0
  6715 ;;		On exit  : 0/0
  6716 ;;		Unchanged: 0/0
  6717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6718 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6719 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6720 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6721 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6722 ;;Total ram usage:        1 bytes
  6723 ;; Hardware stack levels used:    1
  6724 ;; This function calls:
  6725 ;;		Nothing
  6726 ;; This function is called by:
  6727 ;;		_ISR
  6728 ;; This function uses a non-reentrant model
  6729 ;;
  6730                           
  6731                           	psect	text25
  6732  001B56                     __ptext25:
  6733                           	opt stack 0
  6734  001B56                     i2_readADC:
  6735                           	opt stack 26
  6736                           
  6737                           ; BSR set to: 0
  6738                           ;incstack = 0
  6739                           ;i2readADC@channel stored from wreg
  6740  001B56  6E01               	movwf	i2readADC@channel,c
  6741                           
  6742                           ;main.c: 331: ADCON0 = channel <<2;
  6743  001B58  4401               	rlncf	i2readADC@channel,w,c
  6744  001B5A  46E8               	rlncf	wreg,f,c
  6745  001B5C  0BFC               	andlw	252
  6746  001B5E  6EC2               	movwf	4034,c	;volatile
  6747                           
  6748                           ;main.c: 332: ADCON0bits.ADON = 1;
  6749  001B60  80C2               	bsf	4034,0,c	;volatile
  6750                           
  6751                           ;main.c: 333: ADCON0bits.GO = 1;
  6752  001B62  82C2               	bsf	4034,1,c	;volatile
  6753  001B64                     i2l323:
  6754  001B64  A2C2               	btfss	4034,1,c	;volatile
  6755  001B66  0012               	return	
  6756  001B68  D7FD               	goto	i2l323
  6757  001B6A                     __end_ofi2_readADC:
  6758                           	opt stack 0
  6759                           pclatu	equ	0xFFB
  6760                           pclath	equ	0xFFA
  6761                           tblptru	equ	0xFF8
  6762                           tblptrh	equ	0xFF7
  6763                           tblptrl	equ	0xFF6
  6764                           tablat	equ	0xFF5
  6765                           prodh	equ	0xFF4
  6766                           prodl	equ	0xFF3
  6767                           intcon	equ	0xFF2
  6768                           intcon3	equ	0xFF0
  6769                           postinc0	equ	0xFEE
  6770                           fsr0h	equ	0xFEA
  6771                           fsr0l	equ	0xFE9
  6772                           wreg	equ	0xFE8
  6773                           fsr1h	equ	0xFE2
  6774                           fsr1l	equ	0xFE1
  6775                           indf2	equ	0xFDF
  6776                           postinc2	equ	0xFDE
  6777                           postdec2	equ	0xFDD
  6778                           fsr2h	equ	0xFDA
  6779                           fsr2l	equ	0xFD9
  6780                           status	equ	0xFD8
  6781                           
  6782 ;; *************** function _switchMenu *****************
  6783 ;; Defined at:
  6784 ;;		line 293 in file "../main.c"
  6785 ;; Parameters:    Size  Location     Type
  6786 ;;  left            1    wreg     unsigned char 
  6787 ;;  right           1   32[COMRAM] unsigned char 
  6788 ;;  key             1   33[COMRAM] unsigned char 
  6789 ;; Auto vars:     Size  Location     Type
  6790 ;;  left            1   34[COMRAM] unsigned char 
  6791 ;; Return value:  Size  Location     Type
  6792 ;;                  1    wreg      void 
  6793 ;; Registers used:
  6794 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6795 ;; Tracked objects:
  6796 ;;		On entry : 0/0
  6797 ;;		On exit  : 0/0
  6798 ;;		Unchanged: 0/0
  6799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6800 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6801 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6802 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6803 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6804 ;;Total ram usage:        3 bytes
  6805 ;; Hardware stack levels used:    1
  6806 ;; Hardware stack levels required when called:    3
  6807 ;; This function calls:
  6808 ;;		i2_lcdInst
  6809 ;;		i2_printf
  6810 ;;		i2_stopOperation
  6811 ;; This function is called by:
  6812 ;;		_ISR
  6813 ;; This function uses a non-reentrant model
  6814 ;;
  6815                           
  6816                           	psect	text26
  6817  00141A                     __ptext26:
  6818                           	opt stack 0
  6819  00141A                     _switchMenu:
  6820                           	opt stack 23
  6821                           
  6822                           ;incstack = 0
  6823                           ;switchMenu@left stored from wreg
  6824  00141A  6E23               	movwf	switchMenu@left,c
  6825                           
  6826                           ;main.c: 295: if (key == '*'){
  6827  00141C  0E2A               	movlw	42
  6828  00141E  1822               	xorwf	switchMenu@key,w,c
  6829  001420  A4D8               	btfss	status,2,c
  6830  001422  D01C               	goto	i2l3424
  6831                           
  6832                           ;main.c: 297: if(screenMode == 2){
  6833  001424  0E02               	movlw	2
  6834  001426  0100               	movlb	0	; () banked
  6835  001428  19B7               	xorwf	_screenMode& (0+255),w,b
  6836  00142A  A4D8               	btfss	status,2,c
  6837  00142C  D00F               	goto	i2l3420
  6838                           
  6839                           ; BSR set to: 0
  6840                           ;main.c: 298: screenMode = 1;
  6841  00142E  0E01               	movlw	1
  6842  001430  0100               	movlb	0	; () banked
  6843  001432  6FB7               	movwf	_screenMode& (0+255),b
  6844                           
  6845                           ; BSR set to: 0
  6846                           ;main.c: 299: T0CONbits.TMR0ON = 1;
  6847  001434  8ED5               	bsf	4053,7,c	;volatile
  6848                           
  6849                           ; BSR set to: 0
  6850                           ;main.c: 300: T1CONbits.TMR1ON = 0;
  6851  001436  90CD               	bcf	4045,0,c	;volatile
  6852                           
  6853                           ; BSR set to: 0
  6854                           ;main.c: 301: lcdInst(0b10000000);;
  6855  001438  0E80               	movlw	128
  6856  00143A  ECD0  F00D         	call	i2_lcdInst
  6857                           
  6858                           ;main.c: 302: printf("RUNNING... 00:00");
  6859  00143E  0EDC               	movlw	low STR_23
  6860  001440  6E0D               	movwf	i2printf@f,c
  6861  001442  0EFF               	movlw	high STR_23
  6862  001444  6E0E               	movwf	i2printf@f+1,c
  6863  001446  EC8B  F006         	call	i2_printf	;wreg free
  6864                           
  6865                           ;main.c: 303: }
  6866  00144A  0012               	return	
  6867  00144C                     i2l3420:
  6868                           
  6869                           ;main.c: 304: else if (screenMode == 0)
  6870  00144C  0100               	movlb	0	; () banked
  6871  00144E  51B7               	movf	_screenMode& (0+255),w,b
  6872  001450  A4D8               	btfss	status,2,c
  6873  001452  0012               	return	
  6874                           
  6875                           ; BSR set to: 0
  6876                           ;main.c: 305: screenMode = 2;
  6877  001454  0E02               	movlw	2
  6878  001456  0100               	movlb	0	; () banked
  6879  001458  6FB7               	movwf	_screenMode& (0+255),b
  6880                           
  6881                           ; BSR set to: 0
  6882                           ;main.c: 306: }
  6883                           
  6884                           ; BSR set to: 0
  6885  00145A  0012               	return	
  6886  00145C                     i2l3424:
  6887                           
  6888                           ;main.c: 307: else if (screenMode == 1){
  6889  00145C  0100               	movlb	0	; () banked
  6890  00145E  05B7               	decf	_screenMode& (0+255),w,b
  6891  001460  A4D8               	btfss	status,2,c
  6892  001462  D00A               	goto	i2l3432
  6893                           
  6894                           ; BSR set to: 0
  6895                           ;main.c: 308: if (key == '#'){
  6896  001464  0E23               	movlw	35
  6897  001466  1822               	xorwf	switchMenu@key,w,c
  6898  001468  A4D8               	btfss	status,2,c
  6899  00146A  0012               	return	
  6900                           
  6901                           ; BSR set to: 0
  6902                           ;main.c: 309: screenMode = 10;
  6903  00146C  0E0A               	movlw	10
  6904  00146E  0100               	movlb	0	; () banked
  6905  001470  6FB7               	movwf	_screenMode& (0+255),b
  6906                           
  6907                           ; BSR set to: 0
  6908                           ;main.c: 310: stopOperation();
  6909  001472  EC9C  F009         	call	i2_stopOperation	;wreg free
  6910                           
  6911                           ;main.c: 311: }
  6912                           ;main.c: 312: }
  6913  001476  0012               	return	
  6914  001478                     i2l3432:
  6915                           
  6916                           ;main.c: 313: else if (screenMode != 0){
  6917  001478  0100               	movlb	0	; () banked
  6918  00147A  51B7               	movf	_screenMode& (0+255),w,b
  6919  00147C  B4D8               	btfsc	status,2,c
  6920  00147E  0012               	return	
  6921                           
  6922                           ; BSR set to: 0
  6923                           ;main.c: 314: if (key == right){
  6924  001480  5021               	movf	switchMenu@right,w,c
  6925  001482  1822               	xorwf	switchMenu@key,w,c
  6926  001484  A4D8               	btfss	status,2,c
  6927  001486  D00C               	goto	i2l3442
  6928                           
  6929                           ; BSR set to: 0
  6930                           ;main.c: 315: if (screenMode == 2)
  6931  001488  0E02               	movlw	2
  6932  00148A  0100               	movlb	0	; () banked
  6933  00148C  19B7               	xorwf	_screenMode& (0+255),w,b
  6934  00148E  A4D8               	btfss	status,2,c
  6935  001490  D004               	goto	i2l3440
  6936                           
  6937                           ; BSR set to: 0
  6938                           ;main.c: 316: screenMode = 9;
  6939  001492  0E09               	movlw	9
  6940  001494  0100               	movlb	0	; () banked
  6941  001496  6FB7               	movwf	_screenMode& (0+255),b
  6942  001498  0012               	return	
  6943  00149A                     i2l3440:
  6944                           
  6945                           ; BSR set to: 0
  6946                           ;main.c: 317: else
  6947                           ;main.c: 318: screenMode--;
  6948  00149A  0100               	movlb	0	; () banked
  6949  00149C  07B7               	decf	_screenMode& (0+255),f,b
  6950                           
  6951                           ; BSR set to: 0
  6952                           ;main.c: 319: }
  6953  00149E  0012               	return	
  6954  0014A0                     i2l3442:
  6955                           
  6956                           ; BSR set to: 0
  6957                           ;main.c: 320: else if (key == left){
  6958  0014A0  5023               	movf	switchMenu@left,w,c
  6959  0014A2  1822               	xorwf	switchMenu@key,w,c
  6960  0014A4  A4D8               	btfss	status,2,c
  6961  0014A6  0012               	return	
  6962                           
  6963                           ; BSR set to: 0
  6964                           ;main.c: 321: if (screenMode == 9)
  6965  0014A8  0E09               	movlw	9
  6966  0014AA  0100               	movlb	0	; () banked
  6967  0014AC  19B7               	xorwf	_screenMode& (0+255),w,b
  6968  0014AE  A4D8               	btfss	status,2,c
  6969  0014B0  D004               	goto	i2l3448
  6970                           
  6971                           ; BSR set to: 0
  6972                           ;main.c: 322: screenMode = 2;
  6973  0014B2  0E02               	movlw	2
  6974  0014B4  0100               	movlb	0	; () banked
  6975  0014B6  6FB7               	movwf	_screenMode& (0+255),b
  6976  0014B8  0012               	return	
  6977  0014BA                     i2l3448:
  6978                           
  6979                           ; BSR set to: 0
  6980                           ;main.c: 323: else
  6981                           ;main.c: 324: screenMode++;
  6982  0014BA  0100               	movlb	0	; () banked
  6983  0014BC  2BB7               	incf	_screenMode& (0+255),f,b
  6984                           
  6985                           ; BSR set to: 0
  6986                           
  6987                           ; BSR set to: 0
  6988                           
  6989                           ; BSR set to: 0
  6990                           
  6991                           ; BSR set to: 0
  6992                           
  6993                           ; BSR set to: 0
  6994  0014BE  0012               	return	
  6995  0014C0                     __end_of_switchMenu:
  6996                           	opt stack 0
  6997                           pclatu	equ	0xFFB
  6998                           pclath	equ	0xFFA
  6999                           tblptru	equ	0xFF8
  7000                           tblptrh	equ	0xFF7
  7001                           tblptrl	equ	0xFF6
  7002                           tablat	equ	0xFF5
  7003                           prodh	equ	0xFF4
  7004                           prodl	equ	0xFF3
  7005                           intcon	equ	0xFF2
  7006                           intcon3	equ	0xFF0
  7007                           postinc0	equ	0xFEE
  7008                           fsr0h	equ	0xFEA
  7009                           fsr0l	equ	0xFE9
  7010                           wreg	equ	0xFE8
  7011                           fsr1h	equ	0xFE2
  7012                           fsr1l	equ	0xFE1
  7013                           indf2	equ	0xFDF
  7014                           postinc2	equ	0xFDE
  7015                           postdec2	equ	0xFDD
  7016                           fsr2h	equ	0xFDA
  7017                           fsr2l	equ	0xFD9
  7018                           status	equ	0xFD8
  7019                           
  7020 ;; *************** function i2_stopOperation *****************
  7021 ;; Defined at:
  7022 ;;		line 337 in file "../main.c"
  7023 ;; Parameters:    Size  Location     Type
  7024 ;;		None
  7025 ;; Auto vars:     Size  Location     Type
  7026 ;;		None
  7027 ;; Return value:  Size  Location     Type
  7028 ;;                  1    wreg      void 
  7029 ;; Registers used:
  7030 ;;		wreg, status,2, status,0, cstack
  7031 ;; Tracked objects:
  7032 ;;		On entry : 0/0
  7033 ;;		On exit  : 0/0
  7034 ;;		Unchanged: 0/0
  7035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7036 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7037 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7038 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7039 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7040 ;;Total ram usage:        0 bytes
  7041 ;; Hardware stack levels used:    1
  7042 ;; Hardware stack levels required when called:    1
  7043 ;; This function calls:
  7044 ;;		i2___awdiv
  7045 ;;		i2___awmod
  7046 ;; This function is called by:
  7047 ;;		_switchMenu
  7048 ;;		_ISR
  7049 ;; This function uses a non-reentrant model
  7050 ;;
  7051                           
  7052                           	psect	text27
  7053  001338                     __ptext27:
  7054                           	opt stack 0
  7055  001338                     i2_stopOperation:
  7056                           	opt stack 25
  7057                           
  7058                           ;main.c: 338: T0CONbits.TMR0ON = 0;
  7059                           
  7060                           ;incstack = 0
  7061  001338  9ED5               	bcf	4053,7,c	;volatile
  7062                           
  7063                           ;main.c: 339: T1CONbits.TMR1ON = 0;
  7064  00133A  90CD               	bcf	4045,0,c	;volatile
  7065                           
  7066                           ;main.c: 340: TMR0 = 55770;
  7067  00133C  0ED9               	movlw	217
  7068  00133E  6ED7               	movwf	4055,c	;volatile
  7069  001340  0EDA               	movlw	218
  7070  001342  6ED6               	movwf	4054,c	;volatile
  7071                           
  7072                           ;main.c: 341: TMR1 = 58035;
  7073  001344  0EE2               	movlw	226
  7074  001346  6ECF               	movwf	4047,c	;volatile
  7075  001348  0EB3               	movlw	179
  7076  00134A  6ECE               	movwf	4046,c	;volatile
  7077                           
  7078                           ;main.c: 342: num9V = count9V;
  7079  00134C  C089  F08F         	movff	_count9V,_num9V
  7080                           
  7081                           ;main.c: 343: numC = countC;
  7082  001350  C08B  F092         	movff	_countC,_numC
  7083                           
  7084                           ;main.c: 344: numAA = countAA;
  7085  001354  C08A  F090         	movff	_countAA,_numAA
  7086                           
  7087                           ;main.c: 345: numDrain = countDrain;
  7088  001358  C08C  F093         	movff	_countDrain,_numDrain
  7089                           
  7090                           ;main.c: 346: count9V = 0;
  7091  00135C  0E00               	movlw	0
  7092  00135E  0100               	movlb	0	; () banked
  7093  001360  6F89               	movwf	_count9V& (0+255),b
  7094                           
  7095                           ;main.c: 347: countC = 0;
  7096  001362  0E00               	movlw	0
  7097  001364  0100               	movlb	0	; () banked
  7098  001366  6F8B               	movwf	_countC& (0+255),b
  7099                           
  7100                           ;main.c: 348: countAA = 0;
  7101  001368  0E00               	movlw	0
  7102  00136A  0100               	movlb	0	; () banked
  7103  00136C  6F8A               	movwf	_countAA& (0+255),b
  7104                           
  7105                           ;main.c: 349: countDrain = 0;
  7106  00136E  0E00               	movlw	0
  7107  001370  0100               	movlb	0	; () banked
  7108  001372  6F8C               	movwf	_countDrain& (0+255),b
  7109                           
  7110                           ; BSR set to: 0
  7111                           ;main.c: 350: min = opTimer / 60;
  7112  001374  C047  F001         	movff	_opTimer,i2___awdiv@dividend
  7113  001378  6A02               	clrf	i2___awdiv@dividend+1,c
  7114  00137A  0E00               	movlw	0
  7115  00137C  6E04               	movwf	i2___awdiv@divisor+1,c
  7116  00137E  0E3C               	movlw	60
  7117  001380  6E03               	movwf	i2___awdiv@divisor,c
  7118  001382  ECED  F00A         	call	i2___awdiv	;wreg free
  7119  001386  5001               	movf	?i2___awdiv,w,c
  7120  001388  0100               	movlb	0	; () banked
  7121  00138A  6F8E               	movwf	_min& (0+255),b
  7122                           
  7123                           ; BSR set to: 0
  7124                           ;main.c: 351: sec = opTimer % 60;
  7125  00138C  C047  F001         	movff	_opTimer,i2___awmod@dividend
  7126  001390  6A02               	clrf	i2___awmod@dividend+1,c
  7127  001392  0E00               	movlw	0
  7128  001394  6E04               	movwf	i2___awmod@divisor+1,c
  7129  001396  0E3C               	movlw	60
  7130  001398  6E03               	movwf	i2___awmod@divisor,c
  7131  00139A  ECA8  F00B         	call	i2___awmod	;wreg free
  7132  00139E  5001               	movf	?i2___awmod,w,c
  7133  0013A0  0100               	movlb	0	; () banked
  7134  0013A2  6F98               	movwf	_sec& (0+255),b
  7135                           
  7136                           ;main.c: 352: opTimer = 0;
  7137  0013A4  0E00               	movlw	0
  7138  0013A6  6E47               	movwf	_opTimer,c
  7139                           
  7140                           ;main.c: 353: solOnTimer = 0;
  7141  0013A8  0E00               	movlw	0
  7142  0013AA  6E4A               	movwf	_solOnTimer,c
  7143                           
  7144                           ;main.c: 354: doneTimer = 0;
  7145  0013AC  0E00               	movlw	0
  7146  0013AE  6E46               	movwf	_doneTimer,c
  7147                           
  7148                           ;main.c: 355: doneSorting = 0;
  7149  0013B0  0E00               	movlw	0
  7150  0013B2  0100               	movlb	0	; () banked
  7151  0013B4  6F8D               	movwf	_doneSorting& (0+255),b
  7152                           
  7153                           ;main.c: 356: waitMotor = 0;
  7154  0013B6  0E00               	movlw	0
  7155  0013B8  0100               	movlb	0	; () banked
  7156  0013BA  6F9D               	movwf	_waitMotor& (0+255),b
  7157                           
  7158                           ;main.c: 357: stepGear = 0;
  7159  0013BC  0E00               	movlw	0
  7160  0013BE  0100               	movlb	0	; () banked
  7161  0013C0  6F88               	movwf	(_stepGear+1)& (0+255),b
  7162  0013C2  0E00               	movlw	0
  7163  0013C4  6F87               	movwf	_stepGear& (0+255),b
  7164                           
  7165                           ;main.c: 358: plat1Left = 0;
  7166  0013C6  0E00               	movlw	0
  7167  0013C8  0100               	movlb	0	; () banked
  7168  0013CA  6F94               	movwf	_plat1Left& (0+255),b
  7169                           
  7170                           ;main.c: 359: plat1Right = 0;
  7171  0013CC  0E00               	movlw	0
  7172  0013CE  0100               	movlb	0	; () banked
  7173  0013D0  6F95               	movwf	_plat1Right& (0+255),b
  7174                           
  7175                           ;main.c: 360: plat2Left = 0;
  7176  0013D2  0E00               	movlw	0
  7177  0013D4  0100               	movlb	0	; () banked
  7178  0013D6  6F96               	movwf	_plat2Left& (0+255),b
  7179                           
  7180                           ;main.c: 361: plat2Right = 0;
  7181  0013D8  0E00               	movlw	0
  7182  0013DA  0100               	movlb	0	; () banked
  7183  0013DC  6F97               	movwf	_plat2Right& (0+255),b
  7184                           
  7185                           ;main.c: 362: turn2BackLeft = 0;
  7186  0013DE  0E00               	movlw	0
  7187  0013E0  0100               	movlb	0	; () banked
  7188  0013E2  6F9B               	movwf	_turn2BackLeft& (0+255),b
  7189                           
  7190                           ;main.c: 363: turn1BackLeft = 0;
  7191  0013E4  0E00               	movlw	0
  7192  0013E6  0100               	movlb	0	; () banked
  7193  0013E8  6F99               	movwf	_turn1BackLeft& (0+255),b
  7194                           
  7195                           ;main.c: 364: turn2BackRight = 0;
  7196  0013EA  0E00               	movlw	0
  7197  0013EC  0100               	movlb	0	; () banked
  7198  0013EE  6F9C               	movwf	_turn2BackRight& (0+255),b
  7199                           
  7200                           ;main.c: 365: turn1BackRight = 0;
  7201  0013F0  0E00               	movlw	0
  7202  0013F2  0100               	movlb	0	; () banked
  7203  0013F4  6F9A               	movwf	_turn1BackRight& (0+255),b
  7204                           
  7205                           ; BSR set to: 0
  7206                           ;main.c: 366: LATEbits.LE0 = 0;;
  7207  0013F6  908D               	bcf	3981,0,c	;volatile
  7208                           
  7209                           ; BSR set to: 0
  7210                           ;main.c: 367: LATEbits.LE1 = 0;;
  7211  0013F8  928D               	bcf	3981,1,c	;volatile
  7212                           
  7213                           ; BSR set to: 0
  7214                           ;main.c: 368: LATCbits.LC5 = 0;;
  7215  0013FA  9A8B               	bcf	3979,5,c	;volatile
  7216                           
  7217                           ; BSR set to: 0
  7218                           ;main.c: 369: LATDbits.LD0 = 0;;
  7219  0013FC  908C               	bcf	3980,0,c	;volatile
  7220                           
  7221                           ; BSR set to: 0
  7222                           ;main.c: 370: LATDbits.LD1 = 0;;
  7223  0013FE  928C               	bcf	3980,1,c	;volatile
  7224                           
  7225                           ; BSR set to: 0
  7226                           ;main.c: 371: LATEbits.LE2 = 0;;
  7227  001400  948D               	bcf	3981,2,c	;volatile
  7228                           
  7229                           ; BSR set to: 0
  7230                           ;main.c: 372: LATAbits.LA3 = 0;;
  7231  001402  9689               	bcf	3977,3,c	;volatile
  7232                           
  7233                           ; BSR set to: 0
  7234                           ;main.c: 373: LATAbits.LA4 = 0;;
  7235  001404  9889               	bcf	3977,4,c	;volatile
  7236                           
  7237                           ; BSR set to: 0
  7238                           ;main.c: 374: LATAbits.LA5 = 0;;
  7239  001406  9A89               	bcf	3977,5,c	;volatile
  7240                           
  7241                           ; BSR set to: 0
  7242                           ;main.c: 375: LATBbits.LB0 = 0;;
  7243  001408  908A               	bcf	3978,0,c	;volatile
  7244                           
  7245                           ; BSR set to: 0
  7246                           ;main.c: 376: LATBbits.LB2 = 0;;
  7247  00140A  948A               	bcf	3978,2,c	;volatile
  7248                           
  7249                           ; BSR set to: 0
  7250                           ;main.c: 377: LATBbits.LB3 = 0;;
  7251  00140C  968A               	bcf	3978,3,c	;volatile
  7252                           
  7253                           ; BSR set to: 0
  7254                           ;main.c: 378: LATAbits.LA6 = 0;;
  7255  00140E  9C89               	bcf	3977,6,c	;volatile
  7256                           
  7257                           ; BSR set to: 0
  7258                           ;main.c: 379: LATCbits.LC1= 0;;
  7259  001410  928B               	bcf	3979,1,c	;volatile
  7260                           
  7261                           ; BSR set to: 0
  7262                           ;main.c: 380: LATAbits.LA7 = 0;;
  7263  001412  9E89               	bcf	3977,7,c	;volatile
  7264                           
  7265                           ; BSR set to: 0
  7266                           ;main.c: 381: LATCbits.LC2 = 0;;
  7267  001414  948B               	bcf	3979,2,c	;volatile
  7268                           
  7269                           ; BSR set to: 0
  7270                           ;main.c: 382: LATCbits.LC0 = 0;;
  7271  001416  908B               	bcf	3979,0,c	;volatile
  7272                           
  7273                           ; BSR set to: 0
  7274  001418  0012               	return		;funcret
  7275  00141A                     __end_ofi2_stopOperation:
  7276                           	opt stack 0
  7277                           pclatu	equ	0xFFB
  7278                           pclath	equ	0xFFA
  7279                           tblptru	equ	0xFF8
  7280                           tblptrh	equ	0xFF7
  7281                           tblptrl	equ	0xFF6
  7282                           tablat	equ	0xFF5
  7283                           prodh	equ	0xFF4
  7284                           prodl	equ	0xFF3
  7285                           intcon	equ	0xFF2
  7286                           intcon3	equ	0xFF0
  7287                           postinc0	equ	0xFEE
  7288                           fsr0h	equ	0xFEA
  7289                           fsr0l	equ	0xFE9
  7290                           wreg	equ	0xFE8
  7291                           fsr1h	equ	0xFE2
  7292                           fsr1l	equ	0xFE1
  7293                           indf2	equ	0xFDF
  7294                           postinc2	equ	0xFDE
  7295                           postdec2	equ	0xFDD
  7296                           fsr2h	equ	0xFDA
  7297                           fsr2l	equ	0xFD9
  7298                           status	equ	0xFD8
  7299                           
  7300 ;; *************** function i2___awmod *****************
  7301 ;; Defined at:
  7302 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  7303 ;; Parameters:    Size  Location     Type
  7304 ;;  dividend        2    0[COMRAM] int 
  7305 ;;  divisor         2    2[COMRAM] int 
  7306 ;; Auto vars:     Size  Location     Type
  7307 ;;  __awmod         1    5[COMRAM] unsigned char 
  7308 ;;  __awmod         1    4[COMRAM] unsigned char 
  7309 ;; Return value:  Size  Location     Type
  7310 ;;                  2    0[COMRAM] int 
  7311 ;; Registers used:
  7312 ;;		wreg, status,2, status,0
  7313 ;; Tracked objects:
  7314 ;;		On entry : 0/0
  7315 ;;		On exit  : 0/0
  7316 ;;		Unchanged: 0/0
  7317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7318 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7319 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7320 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7321 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7322 ;;Total ram usage:        6 bytes
  7323 ;; Hardware stack levels used:    1
  7324 ;; This function calls:
  7325 ;;		Nothing
  7326 ;; This function is called by:
  7327 ;;		_ISR
  7328 ;;		i2_stopOperation
  7329 ;; This function uses a non-reentrant model
  7330 ;;
  7331                           
  7332                           	psect	text28
  7333  001750                     __ptext28:
  7334                           	opt stack 0
  7335  001750                     i2___awmod:
  7336                           	opt stack 25
  7337                           
  7338                           ; BSR set to: 0
  7339                           ;incstack = 0
  7340  001750  0E00               	movlw	0
  7341  001752  6E06               	movwf	i2___awmod@sign,c
  7342  001754  AE02               	btfss	i2___awmod@dividend+1,7,c
  7343  001756  D006               	goto	i2l2586
  7344  001758  6C01               	negf	i2___awmod@dividend,c
  7345  00175A  1E02               	comf	i2___awmod@dividend+1,f,c
  7346  00175C  B0D8               	btfsc	status,0,c
  7347  00175E  2A02               	incf	i2___awmod@dividend+1,f,c
  7348  001760  0E01               	movlw	1
  7349  001762  6E06               	movwf	i2___awmod@sign,c
  7350  001764                     i2l2586:
  7351  001764  AE04               	btfss	i2___awmod@divisor+1,7,c
  7352  001766  D004               	goto	i2l2590
  7353  001768  6C03               	negf	i2___awmod@divisor,c
  7354  00176A  1E04               	comf	i2___awmod@divisor+1,f,c
  7355  00176C  B0D8               	btfsc	status,0,c
  7356  00176E  2A04               	incf	i2___awmod@divisor+1,f,c
  7357  001770                     i2l2590:
  7358  001770  5003               	movf	i2___awmod@divisor,w,c
  7359  001772  1004               	iorwf	i2___awmod@divisor+1,w,c
  7360  001774  B4D8               	btfsc	status,2,c
  7361  001776  D018               	goto	i2l2606
  7362  001778  0E01               	movlw	1
  7363  00177A  6E05               	movwf	i2___awmod@counter,c
  7364  00177C  D004               	goto	i2l2596
  7365  00177E                     i2l2594:
  7366  00177E  90D8               	bcf	status,0,c
  7367  001780  3603               	rlcf	i2___awmod@divisor,f,c
  7368  001782  3604               	rlcf	i2___awmod@divisor+1,f,c
  7369  001784  2A05               	incf	i2___awmod@counter,f,c
  7370  001786                     i2l2596:
  7371  001786  AE04               	btfss	i2___awmod@divisor+1,7,c
  7372  001788  D7FA               	goto	i2l2594
  7373  00178A                     i2l2598:
  7374  00178A  5003               	movf	i2___awmod@divisor,w,c
  7375  00178C  5C01               	subwf	i2___awmod@dividend,w,c
  7376  00178E  5004               	movf	i2___awmod@divisor+1,w,c
  7377  001790  5802               	subwfb	i2___awmod@dividend+1,w,c
  7378  001792  A0D8               	btfss	status,0,c
  7379  001794  D004               	goto	i2l2602
  7380  001796  5003               	movf	i2___awmod@divisor,w,c
  7381  001798  5E01               	subwf	i2___awmod@dividend,f,c
  7382  00179A  5004               	movf	i2___awmod@divisor+1,w,c
  7383  00179C  5A02               	subwfb	i2___awmod@dividend+1,f,c
  7384  00179E                     i2l2602:
  7385  00179E  90D8               	bcf	status,0,c
  7386  0017A0  3204               	rrcf	i2___awmod@divisor+1,f,c
  7387  0017A2  3203               	rrcf	i2___awmod@divisor,f,c
  7388  0017A4  2E05               	decfsz	i2___awmod@counter,f,c
  7389  0017A6  D7F1               	goto	i2l2598
  7390  0017A8                     i2l2606:
  7391  0017A8  5006               	movf	i2___awmod@sign,w,c
  7392  0017AA  B4D8               	btfsc	status,2,c
  7393  0017AC  D004               	goto	i2l2610
  7394  0017AE  6C01               	negf	i2___awmod@dividend,c
  7395  0017B0  1E02               	comf	i2___awmod@dividend+1,f,c
  7396  0017B2  B0D8               	btfsc	status,0,c
  7397  0017B4  2A02               	incf	i2___awmod@dividend+1,f,c
  7398  0017B6                     i2l2610:
  7399  0017B6  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
  7400  0017BA  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
  7401  0017BE  0012               	return	
  7402  0017C0                     __end_ofi2___awmod:
  7403                           	opt stack 0
  7404                           pclatu	equ	0xFFB
  7405                           pclath	equ	0xFFA
  7406                           tblptru	equ	0xFF8
  7407                           tblptrh	equ	0xFF7
  7408                           tblptrl	equ	0xFF6
  7409                           tablat	equ	0xFF5
  7410                           prodh	equ	0xFF4
  7411                           prodl	equ	0xFF3
  7412                           intcon	equ	0xFF2
  7413                           intcon3	equ	0xFF0
  7414                           postinc0	equ	0xFEE
  7415                           fsr0h	equ	0xFEA
  7416                           fsr0l	equ	0xFE9
  7417                           wreg	equ	0xFE8
  7418                           fsr1h	equ	0xFE2
  7419                           fsr1l	equ	0xFE1
  7420                           indf2	equ	0xFDF
  7421                           postinc2	equ	0xFDE
  7422                           postdec2	equ	0xFDD
  7423                           fsr2h	equ	0xFDA
  7424                           fsr2l	equ	0xFD9
  7425                           status	equ	0xFD8
  7426                           
  7427 ;; *************** function i2___awdiv *****************
  7428 ;; Defined at:
  7429 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  7430 ;; Parameters:    Size  Location     Type
  7431 ;;  dividend        2    0[COMRAM] int 
  7432 ;;  divisor         2    2[COMRAM] int 
  7433 ;; Auto vars:     Size  Location     Type
  7434 ;;  __awdiv         2    6[COMRAM] int 
  7435 ;;  __awdiv         1    5[COMRAM] unsigned char 
  7436 ;;  __awdiv         1    4[COMRAM] unsigned char 
  7437 ;; Return value:  Size  Location     Type
  7438 ;;                  2    0[COMRAM] int 
  7439 ;; Registers used:
  7440 ;;		wreg, status,2, status,0
  7441 ;; Tracked objects:
  7442 ;;		On entry : 0/0
  7443 ;;		On exit  : 0/0
  7444 ;;		Unchanged: 0/0
  7445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7446 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7447 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7448 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7449 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7450 ;;Total ram usage:        8 bytes
  7451 ;; Hardware stack levels used:    1
  7452 ;; This function calls:
  7453 ;;		Nothing
  7454 ;; This function is called by:
  7455 ;;		_ISR
  7456 ;;		i2_stopOperation
  7457 ;; This function uses a non-reentrant model
  7458 ;;
  7459                           
  7460                           	psect	text29
  7461  0015DA                     __ptext29:
  7462                           	opt stack 0
  7463  0015DA                     i2___awdiv:
  7464                           	opt stack 25
  7465                           
  7466                           ;incstack = 0
  7467  0015DA  0E00               	movlw	0
  7468  0015DC  6E06               	movwf	i2___awdiv@sign,c
  7469  0015DE  AE04               	btfss	i2___awdiv@divisor+1,7,c
  7470  0015E0  D006               	goto	i2l2542
  7471  0015E2  6C03               	negf	i2___awdiv@divisor,c
  7472  0015E4  1E04               	comf	i2___awdiv@divisor+1,f,c
  7473  0015E6  B0D8               	btfsc	status,0,c
  7474  0015E8  2A04               	incf	i2___awdiv@divisor+1,f,c
  7475  0015EA  0E01               	movlw	1
  7476  0015EC  6E06               	movwf	i2___awdiv@sign,c
  7477  0015EE                     i2l2542:
  7478  0015EE  AE02               	btfss	i2___awdiv@dividend+1,7,c
  7479  0015F0  D006               	goto	i2l2548
  7480  0015F2  6C01               	negf	i2___awdiv@dividend,c
  7481  0015F4  1E02               	comf	i2___awdiv@dividend+1,f,c
  7482  0015F6  B0D8               	btfsc	status,0,c
  7483  0015F8  2A02               	incf	i2___awdiv@dividend+1,f,c
  7484  0015FA  0E01               	movlw	1
  7485  0015FC  1A06               	xorwf	i2___awdiv@sign,f,c
  7486  0015FE                     i2l2548:
  7487  0015FE  0E00               	movlw	0
  7488  001600  6E08               	movwf	i2___awdiv@quotient+1,c
  7489  001602  0E00               	movlw	0
  7490  001604  6E07               	movwf	i2___awdiv@quotient,c
  7491  001606  5003               	movf	i2___awdiv@divisor,w,c
  7492  001608  1004               	iorwf	i2___awdiv@divisor+1,w,c
  7493  00160A  B4D8               	btfsc	status,2,c
  7494  00160C  D01C               	goto	i2l2570
  7495  00160E  0E01               	movlw	1
  7496  001610  6E05               	movwf	i2___awdiv@counter,c
  7497  001612  D004               	goto	i2l2556
  7498  001614                     i2l2554:
  7499  001614  90D8               	bcf	status,0,c
  7500  001616  3603               	rlcf	i2___awdiv@divisor,f,c
  7501  001618  3604               	rlcf	i2___awdiv@divisor+1,f,c
  7502  00161A  2A05               	incf	i2___awdiv@counter,f,c
  7503  00161C                     i2l2556:
  7504  00161C  AE04               	btfss	i2___awdiv@divisor+1,7,c
  7505  00161E  D7FA               	goto	i2l2554
  7506  001620                     i2l2558:
  7507  001620  90D8               	bcf	status,0,c
  7508  001622  3607               	rlcf	i2___awdiv@quotient,f,c
  7509  001624  3608               	rlcf	i2___awdiv@quotient+1,f,c
  7510  001626  5003               	movf	i2___awdiv@divisor,w,c
  7511  001628  5C01               	subwf	i2___awdiv@dividend,w,c
  7512  00162A  5004               	movf	i2___awdiv@divisor+1,w,c
  7513  00162C  5802               	subwfb	i2___awdiv@dividend+1,w,c
  7514  00162E  A0D8               	btfss	status,0,c
  7515  001630  D005               	goto	i2l2566
  7516  001632  5003               	movf	i2___awdiv@divisor,w,c
  7517  001634  5E01               	subwf	i2___awdiv@dividend,f,c
  7518  001636  5004               	movf	i2___awdiv@divisor+1,w,c
  7519  001638  5A02               	subwfb	i2___awdiv@dividend+1,f,c
  7520  00163A  8007               	bsf	i2___awdiv@quotient,0,c
  7521  00163C                     i2l2566:
  7522  00163C  90D8               	bcf	status,0,c
  7523  00163E  3204               	rrcf	i2___awdiv@divisor+1,f,c
  7524  001640  3203               	rrcf	i2___awdiv@divisor,f,c
  7525  001642  2E05               	decfsz	i2___awdiv@counter,f,c
  7526  001644  D7ED               	goto	i2l2558
  7527  001646                     i2l2570:
  7528  001646  5006               	movf	i2___awdiv@sign,w,c
  7529  001648  B4D8               	btfsc	status,2,c
  7530  00164A  D004               	goto	i2l2574
  7531  00164C  6C07               	negf	i2___awdiv@quotient,c
  7532  00164E  1E08               	comf	i2___awdiv@quotient+1,f,c
  7533  001650  B0D8               	btfsc	status,0,c
  7534  001652  2A08               	incf	i2___awdiv@quotient+1,f,c
  7535  001654                     i2l2574:
  7536  001654  C007  F001         	movff	i2___awdiv@quotient,?i2___awdiv
  7537  001658  C008  F002         	movff	i2___awdiv@quotient+1,?i2___awdiv+1
  7538  00165C  0012               	return	
  7539  00165E                     __end_ofi2___awdiv:
  7540                           	opt stack 0
  7541                           pclatu	equ	0xFFB
  7542                           pclath	equ	0xFFA
  7543                           tblptru	equ	0xFF8
  7544                           tblptrh	equ	0xFF7
  7545                           tblptrl	equ	0xFF6
  7546                           tablat	equ	0xFF5
  7547                           prodh	equ	0xFF4
  7548                           prodl	equ	0xFF3
  7549                           intcon	equ	0xFF2
  7550                           intcon3	equ	0xFF0
  7551                           postinc0	equ	0xFEE
  7552                           fsr0h	equ	0xFEA
  7553                           fsr0l	equ	0xFE9
  7554                           wreg	equ	0xFE8
  7555                           fsr1h	equ	0xFE2
  7556                           fsr1l	equ	0xFE1
  7557                           indf2	equ	0xFDF
  7558                           postinc2	equ	0xFDE
  7559                           postdec2	equ	0xFDD
  7560                           fsr2h	equ	0xFDA
  7561                           fsr2l	equ	0xFD9
  7562                           status	equ	0xFD8
  7563                           
  7564 ;; *************** function i2_printf *****************
  7565 ;; Defined at:
  7566 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  7567 ;; Parameters:    Size  Location     Type
  7568 ;;  f               2   12[COMRAM] PTR const unsigned char 
  7569 ;;		 -> STR_24(21), STR_23(17), STR_22(17), STR_21(17), 
  7570 ;;		 -> STR_20(23), STR_19(23), STR_18(21), STR_17(17), 
  7571 ;;		 -> STR_16(21), STR_15(17), STR_14(21), STR_13(17), 
  7572 ;;		 -> STR_12(19), STR_11(17), STR_10(19), STR_9(17), 
  7573 ;;		 -> STR_8(25), STR_7(17), STR_6(17), STR_5(17), 
  7574 ;;		 -> STR_4(17), STR_3(17), STR_2(17), STR_1(17), 
  7575 ;; Auto vars:     Size  Location     Type
  7576 ;;  printf          4    0        struct .
  7577 ;;  printf          3    0        PTR const unsigned char 
  7578 ;;  printf          2   29[COMRAM] int 
  7579 ;;  printf          2   26[COMRAM] unsigned int 
  7580 ;;  printf          2   23[COMRAM] PTR void [1]
  7581 ;;		 -> ?i2_printf(2), ?_printf(2), 
  7582 ;;  printf          2    0        unsigned int 
  7583 ;;  printf          1   31[COMRAM] char 
  7584 ;;  printf          1   28[COMRAM] unsigned char 
  7585 ;;  printf          1   25[COMRAM] char 
  7586 ;;  printf          1   22[COMRAM] unsigned char 
  7587 ;; Return value:  Size  Location     Type
  7588 ;;                  2   12[COMRAM] int 
  7589 ;; Registers used:
  7590 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7591 ;; Tracked objects:
  7592 ;;		On entry : 0/0
  7593 ;;		On exit  : 0/0
  7594 ;;		Unchanged: 0/0
  7595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7596 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7597 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7598 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7599 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7600 ;;Total ram usage:       20 bytes
  7601 ;; Hardware stack levels used:    1
  7602 ;; Hardware stack levels required when called:    2
  7603 ;; This function calls:
  7604 ;;		i2___lwdiv
  7605 ;;		i2___lwmod
  7606 ;;		i2___wmul
  7607 ;;		i2_isdigit
  7608 ;;		i2_putch
  7609 ;; This function is called by:
  7610 ;;		_switchMenu
  7611 ;;		_ISR
  7612 ;; This function uses a non-reentrant model
  7613 ;;
  7614                           
  7615                           	psect	text30
  7616  000D16                     __ptext30:
  7617                           	opt stack 0
  7618  000D16                     i2_printf:
  7619                           	opt stack 24
  7620                           
  7621                           ;doprnt.c: 466: va_list ap;
  7622                           ;doprnt.c: 499: signed char c;
  7623                           ;doprnt.c: 501: int width;
  7624                           ;doprnt.c: 506: signed char prec;
  7625                           ;doprnt.c: 508: unsigned char flag;
  7626                           ;doprnt.c: 523: union {
  7627                           ;doprnt.c: 524: unsigned long vd;
  7628                           ;doprnt.c: 525: double integ;
  7629                           ;doprnt.c: 526: } tmpval;
  7630                           ;doprnt.c: 528: unsigned int val;
  7631                           ;doprnt.c: 529: unsigned len;
  7632                           ;doprnt.c: 530: const char * cp;
  7633                           ;doprnt.c: 533: *ap = __va_start();
  7634                           
  7635                           ;incstack = 0
  7636  000D16  0E0F               	movlw	low (?i2_printf+2)
  7637  000D18  6E18               	movwf	i2printf@ap,c
  7638  000D1A  0E00               	movlw	high (?i2_printf+2)
  7639  000D1C  6E19               	movwf	i2printf@ap+1,c
  7640                           
  7641                           ;doprnt.c: 536: while(c = *f++) {
  7642  000D1E  D174               	goto	i2l3026
  7643  000D20                     i2l2900:
  7644                           
  7645                           ;doprnt.c: 538: if(c != '%')
  7646  000D20  0E25               	movlw	37
  7647  000D22  1820               	xorwf	i2printf@c,w,c
  7648  000D24  B4D8               	btfsc	status,2,c
  7649  000D26  D004               	goto	i2l2904
  7650                           
  7651                           ;doprnt.c: 540: {
  7652                           ;doprnt.c: 541: (putch(c) );
  7653  000D28  5020               	movf	i2printf@c,w,c
  7654  000D2A  ECCA  F00D         	call	i2_putch
  7655                           
  7656                           ;doprnt.c: 542: continue;
  7657  000D2E  D16C               	goto	i2l3026
  7658  000D30                     i2l2904:
  7659                           
  7660                           ;doprnt.c: 543: }
  7661                           ;doprnt.c: 546: width = 0;
  7662  000D30  0E00               	movlw	0
  7663  000D32  6E1F               	movwf	i2printf@width+1,c
  7664  000D34  0E00               	movlw	0
  7665  000D36  6E1E               	movwf	i2printf@width,c
  7666                           
  7667                           ;doprnt.c: 548: flag = 0;
  7668  000D38  0E00               	movlw	0
  7669  000D3A  6E1D               	movwf	i2printf@flag,c
  7670                           
  7671                           ;doprnt.c: 551: switch(*f) {
  7672                           
  7673                           ;doprnt.c: 550: for(;;) {
  7674  000D3C  D003               	goto	i2l2910
  7675  000D3E                     i2l2906:
  7676                           
  7677                           ;doprnt.c: 580: flag |= 0x04;
  7678  000D3E  841D               	bsf	i2printf@flag,2,c
  7679                           
  7680                           ;doprnt.c: 581: f++;
  7681  000D40  4A0D               	infsnz	i2printf@f,f,c
  7682  000D42  2A0E               	incf	i2printf@f+1,f,c
  7683  000D44                     i2l2910:
  7684  000D44  C00D  FFF6         	movff	i2printf@f,tblptrl
  7685  000D48  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7686  000D4C                     	if	0	;tblptru may be non-zero
  7687  000D4C                     	endif
  7688  000D4C                     	if	0	;tblptru may be non-zero
  7689  000D4C                     	endif
  7690  000D4C  0008               	tblrd		*
  7691  000D4E  50F5               	movf	tablat,w,c
  7692                           
  7693                           ; Switch size 1, requested type "space"
  7694                           ; Number of cases is 1, Range of values is 48 to 48
  7695                           ; switch strategies available:
  7696                           ; Name         Instructions Cycles
  7697                           ; simple_byte            4     3 (average)
  7698                           ;	Chosen strategy is simple_byte
  7699  000D50  0A30               	xorlw	48	; case 48
  7700  000D52  B4D8               	btfsc	status,2,c
  7701  000D54  D7F4               	goto	i2l2906
  7702                           
  7703                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  7704                           
  7705                           ;doprnt.c: 586: }
  7706                           
  7707                           ;doprnt.c: 585: break;
  7708  000D56  C00D  FFF6         	movff	i2printf@f,tblptrl
  7709  000D5A  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7710  000D5E                     	if	0	;tblptru may be non-zero
  7711  000D5E                     	endif
  7712  000D5E                     	if	0	;tblptru may be non-zero
  7713  000D5E                     	endif
  7714  000D5E  0008               	tblrd		*
  7715  000D60  50F5               	movf	tablat,w,c
  7716  000D62  EC92  F00D         	call	i2_isdigit
  7717  000D66  A0D8               	btfss	status,0,c
  7718  000D68  D035               	goto	i2l2928
  7719                           
  7720                           ;doprnt.c: 598: width = 0;
  7721  000D6A  0E00               	movlw	0
  7722  000D6C  6E1F               	movwf	i2printf@width+1,c
  7723  000D6E  0E00               	movlw	0
  7724  000D70  6E1E               	movwf	i2printf@width,c
  7725  000D72                     i2l2916:
  7726                           
  7727                           ;doprnt.c: 600: width *= 10;
  7728  000D72  C01E  F001         	movff	i2printf@width,i2___wmul@multiplier
  7729  000D76  C01F  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
  7730  000D7A  0E00               	movlw	0
  7731  000D7C  6E04               	movwf	i2___wmul@multiplicand+1,c
  7732  000D7E  0E0A               	movlw	10
  7733  000D80  6E03               	movwf	i2___wmul@multiplicand,c
  7734  000D82  EC70  F00D         	call	i2___wmul	;wreg free
  7735  000D86  C001  F01E         	movff	?i2___wmul,i2printf@width
  7736  000D8A  C002  F01F         	movff	?i2___wmul+1,i2printf@width+1
  7737                           
  7738                           ;doprnt.c: 601: width += *f++ - '0';
  7739  000D8E  0ED0               	movlw	208
  7740  000D90  6E13               	movwf	??i2_printf& (0+255),c
  7741  000D92  0EFF               	movlw	255
  7742  000D94  6E14               	movwf	(??i2_printf+1)& (0+255),c
  7743  000D96  C00D  FFF6         	movff	i2printf@f,tblptrl
  7744  000D9A  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7745  000D9E                     	if	0	;tblptru may be non-zero
  7746  000D9E                     	endif
  7747  000D9E                     	if	0	;tblptru may be non-zero
  7748  000D9E                     	endif
  7749  000D9E  0008               	tblrd		*
  7750  000DA0  50F5               	movf	tablat,w,c
  7751  000DA2  6E15               	movwf	(??i2_printf+2)& (0+255),c
  7752  000DA4  6A16               	clrf	(??i2_printf+3)& (0+255),c
  7753  000DA6  5013               	movf	??i2_printf,w,c
  7754  000DA8  2615               	addwf	??i2_printf+2,f,c
  7755  000DAA  5014               	movf	??i2_printf+1,w,c
  7756  000DAC  2216               	addwfc	??i2_printf+3,f,c
  7757  000DAE  5015               	movf	??i2_printf+2,w,c
  7758  000DB0  261E               	addwf	i2printf@width,f,c
  7759  000DB2  5016               	movf	??i2_printf+3,w,c
  7760  000DB4  221F               	addwfc	i2printf@width+1,f,c
  7761  000DB6  4A0D               	infsnz	i2printf@f,f,c
  7762  000DB8  2A0E               	incf	i2printf@f+1,f,c
  7763                           
  7764                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  7765  000DBA  C00D  FFF6         	movff	i2printf@f,tblptrl
  7766  000DBE  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7767  000DC2                     	if	0	;tblptru may be non-zero
  7768  000DC2                     	endif
  7769  000DC2                     	if	0	;tblptru may be non-zero
  7770  000DC2                     	endif
  7771  000DC2  0008               	tblrd		*
  7772  000DC4  50F5               	movf	tablat,w,c
  7773  000DC6  EC92  F00D         	call	i2_isdigit
  7774  000DCA  A0D8               	btfss	status,0,c
  7775  000DCC  D003               	goto	i2l2928
  7776  000DCE  D7D1               	goto	i2l2916
  7777  000DD0                     i2l2924:
  7778                           
  7779                           ;doprnt.c: 721: flag |= 0x80;
  7780  000DD0  8E1D               	bsf	i2printf@flag,7,c
  7781                           
  7782                           ;doprnt.c: 723: break;
  7783  000DD2  D017               	goto	i2l438
  7784  000DD4                     i2l2928:
  7785  000DD4  C00D  FFF6         	movff	i2printf@f,tblptrl
  7786  000DD8  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7787  000DDC  4A0D               	infsnz	i2printf@f,f,c
  7788  000DDE  2A0E               	incf	i2printf@f+1,f,c
  7789  000DE0                     	if	0	;tblptru may be non-zero
  7790  000DE0                     	endif
  7791  000DE0                     	if	0	;tblptru may be non-zero
  7792  000DE0                     	endif
  7793  000DE0  0008               	tblrd		*
  7794  000DE2  CFF5 F020          	movff	tablat,i2printf@c
  7795  000DE6  5020               	movf	i2printf@c,w,c
  7796                           
  7797                           ; Switch size 1, requested type "space"
  7798                           ; Number of cases is 4, Range of values is 0 to 120
  7799                           ; switch strategies available:
  7800                           ; Name         Instructions Cycles
  7801                           ; simple_byte           13     7 (average)
  7802                           ;	Chosen strategy is simple_byte
  7803  000DE8  0A00               	xorlw	0	; case 0
  7804  000DEA  B4D8               	btfsc	status,2,c
  7805  000DEC  0012               	return	
  7806  000DEE  0A64               	xorlw	100	; case 100
  7807  000DF0  B4D8               	btfsc	status,2,c
  7808  000DF2  D007               	goto	i2l438
  7809  000DF4  0A0D               	xorlw	13	; case 105
  7810  000DF6  B4D8               	btfsc	status,2,c
  7811  000DF8  D004               	goto	i2l438
  7812  000DFA  0A11               	xorlw	17	; case 120
  7813  000DFC  B4D8               	btfsc	status,2,c
  7814  000DFE  D7E8               	goto	i2l2924
  7815  000E00  D103               	goto	i2l3026
  7816  000E02                     i2l438:
  7817                           
  7818                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  7819  000E02  BE1D               	btfsc	i2printf@flag,7,c
  7820  000E04  D015               	goto	i2l2940
  7821                           
  7822                           ;doprnt.c: 1253: {
  7823                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  7824  000E06  C018  FFD9         	movff	i2printf@ap,fsr2l
  7825  000E0A  C019  FFDA         	movff	i2printf@ap+1,fsr2h
  7826  000E0E  CFDE F01B          	movff	postinc2,i2printf@val
  7827  000E12  CFDD F01C          	movff	postdec2,i2printf@val+1
  7828  000E16  0E02               	movlw	2
  7829  000E18  2618               	addwf	i2printf@ap,f,c
  7830  000E1A  0E00               	movlw	0
  7831  000E1C  2219               	addwfc	i2printf@ap+1,f,c
  7832                           
  7833                           ;doprnt.c: 1261: if((int)val < 0) {
  7834  000E1E  AE1C               	btfss	i2printf@val+1,7,c
  7835  000E20  D044               	goto	i2l2974
  7836                           
  7837                           ;doprnt.c: 1262: flag |= 0x03;
  7838  000E22  0E03               	movlw	3
  7839  000E24  121D               	iorwf	i2printf@flag,f,c
  7840                           
  7841                           ;doprnt.c: 1263: val = -val;
  7842  000E26  6C1B               	negf	i2printf@val,c
  7843  000E28  1E1C               	comf	i2printf@val+1,f,c
  7844  000E2A  B0D8               	btfsc	status,0,c
  7845  000E2C  2A1C               	incf	i2printf@val+1,f,c
  7846                           
  7847                           ;doprnt.c: 1264: }
  7848                           ;doprnt.c: 1266: }
  7849  000E2E  D03D               	goto	i2l2974
  7850  000E30                     i2l2940:
  7851                           
  7852                           ;doprnt.c: 1268: else
  7853                           ;doprnt.c: 1273: {
  7854                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  7855  000E30  C018  FFD9         	movff	i2printf@ap,fsr2l
  7856  000E34  C019  FFDA         	movff	i2printf@ap+1,fsr2h
  7857  000E38  CFDE F01B          	movff	postinc2,i2printf@val
  7858  000E3C  CFDD F01C          	movff	postdec2,i2printf@val+1
  7859  000E40  0E02               	movlw	2
  7860  000E42  2618               	addwf	i2printf@ap,f,c
  7861  000E44  0E00               	movlw	0
  7862  000E46  2219               	addwfc	i2printf@ap+1,f,c
  7863                           
  7864                           ;doprnt.c: 1287: }
  7865                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  7866  000E48  D030               	goto	i2l2974
  7867  000E4A                     i2l2944:
  7868                           
  7869                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7870  000E4A  0E01               	movlw	1
  7871  000E4C  6E20               	movwf	i2printf@c,c
  7872  000E4E                     i2l2946:
  7873  000E4E  0E05               	movlw	5
  7874  000E50  1820               	xorwf	i2printf@c,w,c
  7875  000E52  B4D8               	btfsc	status,2,c
  7876  000E54  D032               	goto	i2l2976
  7877                           
  7878                           ;doprnt.c: 1306: if(val < dpowers[c])
  7879  000E56  5020               	movf	i2printf@c,w,c
  7880  000E58  0D02               	mullw	2
  7881  000E5A  0E58               	movlw	low _dpowers
  7882  000E5C  24F3               	addwf	prodl,w,c
  7883  000E5E  6EF6               	movwf	tblptrl,c
  7884  000E60  0EFE               	movlw	high _dpowers
  7885  000E62  20F4               	addwfc	prodh,w,c
  7886  000E64  6EF7               	movwf	tblptrh,c
  7887  000E66                     	if	0	;There are less than 3 active tblptr bytes
  7888  000E66                     	endif
  7889  000E66  0009               	tblrd		*+
  7890  000E68  50F5               	movf	tablat,w,c
  7891  000E6A  5C1B               	subwf	i2printf@val,w,c
  7892  000E6C  0009               	tblrd		*+
  7893  000E6E  50F5               	movf	tablat,w,c
  7894  000E70  581C               	subwfb	i2printf@val+1,w,c
  7895  000E72  A0D8               	btfss	status,0,c
  7896  000E74  D022               	goto	i2l2976
  7897                           
  7898                           ;doprnt.c: 1307: break;
  7899  000E76  2A20               	incf	i2printf@c,f,c
  7900  000E78  D7EA               	goto	i2l2946
  7901  000E7A                     i2l2958:
  7902                           
  7903                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  7904  000E7A  0E01               	movlw	1
  7905  000E7C  6E20               	movwf	i2printf@c,c
  7906  000E7E                     i2l2960:
  7907  000E7E  0E04               	movlw	4
  7908  000E80  1820               	xorwf	i2printf@c,w,c
  7909  000E82  B4D8               	btfsc	status,2,c
  7910  000E84  D01A               	goto	i2l2976
  7911                           
  7912                           ;doprnt.c: 1317: if(val < hexpowers[c])
  7913  000E86  5020               	movf	i2printf@c,w,c
  7914  000E88  0D02               	mullw	2
  7915  000E8A  0E62               	movlw	low _hexpowers
  7916  000E8C  24F3               	addwf	prodl,w,c
  7917  000E8E  6EF6               	movwf	tblptrl,c
  7918  000E90  0EFE               	movlw	high _hexpowers
  7919  000E92  20F4               	addwfc	prodh,w,c
  7920  000E94  6EF7               	movwf	tblptrh,c
  7921  000E96                     	if	0	;There are less than 3 active tblptr bytes
  7922  000E96                     	endif
  7923  000E96  0009               	tblrd		*+
  7924  000E98  50F5               	movf	tablat,w,c
  7925  000E9A  5C1B               	subwf	i2printf@val,w,c
  7926  000E9C  0009               	tblrd		*+
  7927  000E9E  50F5               	movf	tablat,w,c
  7928  000EA0  581C               	subwfb	i2printf@val+1,w,c
  7929  000EA2  A0D8               	btfss	status,0,c
  7930  000EA4  D00A               	goto	i2l2976
  7931                           
  7932                           ;doprnt.c: 1318: break;
  7933  000EA6  2A20               	incf	i2printf@c,f,c
  7934  000EA8  D7EA               	goto	i2l2960
  7935  000EAA                     i2l2974:
  7936  000EAA  501D               	movf	i2printf@flag,w,c
  7937  000EAC  0B80               	andlw	128
  7938                           
  7939                           ; Switch size 1, requested type "space"
  7940                           ; Number of cases is 2, Range of values is 0 to 128
  7941                           ; switch strategies available:
  7942                           ; Name         Instructions Cycles
  7943                           ; simple_byte            7     4 (average)
  7944                           ;	Chosen strategy is simple_byte
  7945  000EAE  0A00               	xorlw	0	; case 0
  7946  000EB0  B4D8               	btfsc	status,2,c
  7947  000EB2  D7CB               	goto	i2l2944
  7948  000EB4  0A80               	xorlw	128	; case 128
  7949  000EB6  B4D8               	btfsc	status,2,c
  7950  000EB8  D7E0               	goto	i2l2958
  7951  000EBA                     i2l2976:
  7952                           
  7953                           ;doprnt.c: 1345: if(width && flag & 0x03)
  7954  000EBA  501E               	movf	i2printf@width,w,c
  7955  000EBC  101F               	iorwf	i2printf@width+1,w,c
  7956  000EBE  B4D8               	btfsc	status,2,c
  7957  000EC0  D009               	goto	i2l2982
  7958  000EC2  C01D  F013         	movff	i2printf@flag,??i2_printf
  7959  000EC6  0E03               	movlw	3
  7960  000EC8  1613               	andwf	??i2_printf,f,c
  7961  000ECA  B4D8               	btfsc	status,2,c
  7962  000ECC  D003               	goto	i2l2982
  7963                           
  7964                           ;doprnt.c: 1346: width--;
  7965  000ECE  061E               	decf	i2printf@width,f,c
  7966  000ED0  A0D8               	btfss	status,0,c
  7967  000ED2  061F               	decf	i2printf@width+1,f,c
  7968  000ED4                     i2l2982:
  7969                           
  7970                           ;doprnt.c: 1381: if(width > c)
  7971  000ED4  0E80               	movlw	128
  7972  000ED6  BE20               	btfsc	i2printf@c,7,c
  7973  000ED8  0E7F               	movlw	127
  7974  000EDA  6E13               	movwf	??i2_printf& (0+255),c
  7975  000EDC  501E               	movf	i2printf@width,w,c
  7976  000EDE  5C20               	subwf	i2printf@c,w,c
  7977  000EE0  501F               	movf	i2printf@width+1,w,c
  7978  000EE2  0A80               	xorlw	128
  7979  000EE4  5813               	subwfb	??i2_printf& (0+255),w,c
  7980  000EE6  B0D8               	btfsc	status,0,c
  7981  000EE8  D007               	goto	i2l2986
  7982                           
  7983                           ;doprnt.c: 1382: width -= c;
  7984  000EEA  5020               	movf	i2printf@c,w,c
  7985  000EEC  5E1E               	subwf	i2printf@width,f,c
  7986  000EEE  0E00               	movlw	0
  7987  000EF0  BE20               	btfsc	i2printf@c,7,c
  7988  000EF2  0EFF               	movlw	255
  7989  000EF4  5A1F               	subwfb	i2printf@width+1,f,c
  7990  000EF6  D004               	goto	i2l2988
  7991  000EF8                     i2l2986:
  7992                           
  7993                           ;doprnt.c: 1383: else
  7994                           ;doprnt.c: 1384: width = 0;
  7995  000EF8  0E00               	movlw	0
  7996  000EFA  6E1F               	movwf	i2printf@width+1,c
  7997  000EFC  0E00               	movlw	0
  7998  000EFE  6E1E               	movwf	i2printf@width,c
  7999  000F00                     i2l2988:
  8000                           
  8001                           ;doprnt.c: 1387: if(flag & 0x04) {
  8002  000F00  A41D               	btfss	i2printf@flag,2,c
  8003  000F02  D014               	goto	i2l3000
  8004                           
  8005                           ;doprnt.c: 1392: if(flag & 0x03)
  8006  000F04  C01D  F013         	movff	i2printf@flag,??i2_printf
  8007  000F08  0E03               	movlw	3
  8008  000F0A  1613               	andwf	??i2_printf,f,c
  8009  000F0C  B4D8               	btfsc	status,2,c
  8010  000F0E  D003               	goto	i2l2994
  8011                           
  8012                           ;doprnt.c: 1393: (putch('-') );
  8013  000F10  0E2D               	movlw	45
  8014  000F12  ECCA  F00D         	call	i2_putch
  8015  000F16                     i2l2994:
  8016                           
  8017                           ;doprnt.c: 1415: if(width)
  8018  000F16  501E               	movf	i2printf@width,w,c
  8019  000F18  101F               	iorwf	i2printf@width+1,w,c
  8020  000F1A  B4D8               	btfsc	status,2,c
  8021  000F1C  D01E               	goto	i2l3010
  8022                           
  8023                           ;doprnt.c: 1417: (putch('0') );
  8024                           
  8025                           ;doprnt.c: 1416: do
  8026  000F1E  0E30               	movlw	48
  8027  000F20  ECCA  F00D         	call	i2_putch
  8028                           
  8029                           ;doprnt.c: 1418: while(--width);
  8030  000F24  061E               	decf	i2printf@width,f,c
  8031  000F26  A0D8               	btfss	status,0,c
  8032  000F28  061F               	decf	i2printf@width+1,f,c
  8033  000F2A  D7F5               	goto	i2l2994
  8034  000F2C                     i2l3000:
  8035                           
  8036                           ;doprnt.c: 1422: {
  8037                           ;doprnt.c: 1424: if(width
  8038                           ;doprnt.c: 1428: )
  8039  000F2C  501E               	movf	i2printf@width,w,c
  8040  000F2E  101F               	iorwf	i2printf@width+1,w,c
  8041  000F30  B4D8               	btfsc	status,2,c
  8042  000F32  D00A               	goto	i2l3006
  8043  000F34                     i2l3002:
  8044                           
  8045                           ;doprnt.c: 1430: (putch(' ') );
  8046  000F34  0E20               	movlw	32
  8047  000F36  ECCA  F00D         	call	i2_putch
  8048                           
  8049                           ;doprnt.c: 1431: while(--width);
  8050  000F3A  061E               	decf	i2printf@width,f,c
  8051  000F3C  A0D8               	btfss	status,0,c
  8052  000F3E  061F               	decf	i2printf@width+1,f,c
  8053  000F40  501E               	movf	i2printf@width,w,c
  8054  000F42  101F               	iorwf	i2printf@width+1,w,c
  8055  000F44  A4D8               	btfss	status,2,c
  8056  000F46  D7F6               	goto	i2l3002
  8057  000F48                     i2l3006:
  8058                           
  8059                           ;doprnt.c: 1438: if(flag & 0x03)
  8060  000F48  C01D  F013         	movff	i2printf@flag,??i2_printf
  8061  000F4C  0E03               	movlw	3
  8062  000F4E  1613               	andwf	??i2_printf,f,c
  8063  000F50  B4D8               	btfsc	status,2,c
  8064  000F52  D003               	goto	i2l3010
  8065                           
  8066                           ;doprnt.c: 1439: (putch('-') );
  8067  000F54  0E2D               	movlw	45
  8068  000F56  ECCA  F00D         	call	i2_putch
  8069  000F5A                     i2l3010:
  8070                           
  8071                           ;doprnt.c: 1469: }
  8072                           ;doprnt.c: 1472: prec = c;
  8073  000F5A  C020  F01A         	movff	i2printf@c,i2printf@prec
  8074                           
  8075                           ;doprnt.c: 1474: while(prec--) {
  8076  000F5E  D050               	goto	i2l3024
  8077  000F60                     i2l3012:
  8078                           
  8079                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  8080  000F60  501A               	movf	i2printf@prec,w,c
  8081  000F62  0D02               	mullw	2
  8082  000F64  0E58               	movlw	low _dpowers
  8083  000F66  24F3               	addwf	prodl,w,c
  8084  000F68  6EF6               	movwf	tblptrl,c
  8085  000F6A  0EFE               	movlw	high _dpowers
  8086  000F6C  20F4               	addwfc	prodh,w,c
  8087  000F6E  6EF7               	movwf	tblptrh,c
  8088  000F70                     	if	0	;There are less than 3 active tblptr bytes
  8089  000F70                     	endif
  8090  000F70  0009               	tblrd		*+
  8091  000F72  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  8092  000F76  000A               	tblrd		*-
  8093  000F78  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  8094  000F7C  C01B  F001         	movff	i2printf@val,i2___lwdiv@dividend
  8095  000F80  C01C  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  8096  000F84  EC37  F00C         	call	i2___lwdiv	;wreg free
  8097  000F88  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
  8098  000F8C  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
  8099  000F90  0E00               	movlw	0
  8100  000F92  6E0B               	movwf	i2___lwmod@divisor+1,c
  8101  000F94  0E0A               	movlw	10
  8102  000F96  6E0A               	movwf	i2___lwmod@divisor,c
  8103  000F98  EC15  F00D         	call	i2___lwmod	;wreg free
  8104  000F9C  5008               	movf	?i2___lwmod,w,c
  8105  000F9E  0F30               	addlw	48
  8106  000FA0  6E20               	movwf	i2printf@c,c
  8107                           
  8108                           ;doprnt.c: 1491: break;
  8109  000FA2  D02B               	goto	i2l3022
  8110  000FA4                     i2l3014:
  8111                           
  8112                           ;doprnt.c: 1499: {
  8113                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  8114  000FA4  C01B  F001         	movff	i2printf@val,i2___lwdiv@dividend
  8115  000FA8  C01C  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  8116  000FAC  501A               	movf	i2printf@prec,w,c
  8117  000FAE  0D02               	mullw	2
  8118  000FB0  0E62               	movlw	low _hexpowers
  8119  000FB2  24F3               	addwf	prodl,w,c
  8120  000FB4  6EF6               	movwf	tblptrl,c
  8121  000FB6  0EFE               	movlw	high _hexpowers
  8122  000FB8  20F4               	addwfc	prodh,w,c
  8123  000FBA  6EF7               	movwf	tblptrh,c
  8124  000FBC                     	if	0	;There are less than 3 active tblptr bytes
  8125  000FBC                     	endif
  8126  000FBC  0009               	tblrd		*+
  8127  000FBE  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  8128  000FC2  000A               	tblrd		*-
  8129  000FC4  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  8130  000FC8  EC37  F00C         	call	i2___lwdiv	;wreg free
  8131  000FCC  5001               	movf	?i2___lwdiv,w,c
  8132  000FCE  0B0F               	andlw	15
  8133  000FD0  6E17               	movwf	i2printf@idx,c
  8134                           
  8135                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  8136  000FD2  5017               	movf	i2printf@idx,w,c
  8137  000FD4  0D01               	mullw	1
  8138  000FD6  0EEE               	movlw	low STR_25
  8139  000FD8  24F3               	addwf	prodl,w,c
  8140  000FDA  6EF6               	movwf	tblptrl,c
  8141  000FDC  0EFE               	movlw	high STR_25
  8142  000FDE  20F4               	addwfc	prodh,w,c
  8143  000FE0  6EF7               	movwf	tblptrh,c
  8144  000FE2                     	if	0	;There are less than 3 active tblptr bytes
  8145  000FE2                     	endif
  8146  000FE2  0008               	tblrd		*
  8147  000FE4  CFF5 F020          	movff	tablat,i2printf@c
  8148                           
  8149                           ;doprnt.c: 1523: }
  8150                           
  8151                           ;doprnt.c: 1508: }
  8152                           ;doprnt.c: 1510: break;
  8153  000FE8  D008               	goto	i2l3022
  8154  000FEA                     i2l3020:
  8155  000FEA  501D               	movf	i2printf@flag,w,c
  8156  000FEC  0B80               	andlw	128
  8157                           
  8158                           ; Switch size 1, requested type "space"
  8159                           ; Number of cases is 2, Range of values is 0 to 128
  8160                           ; switch strategies available:
  8161                           ; Name         Instructions Cycles
  8162                           ; simple_byte            7     4 (average)
  8163                           ;	Chosen strategy is simple_byte
  8164  000FEE  0A00               	xorlw	0	; case 0
  8165  000FF0  B4D8               	btfsc	status,2,c
  8166  000FF2  D7B6               	goto	i2l3012
  8167  000FF4  0A80               	xorlw	128	; case 128
  8168  000FF6  B4D8               	btfsc	status,2,c
  8169  000FF8  D7D5               	goto	i2l3014
  8170  000FFA                     i2l3022:
  8171                           
  8172                           ;doprnt.c: 1524: (putch(c) );
  8173  000FFA  5020               	movf	i2printf@c,w,c
  8174  000FFC  ECCA  F00D         	call	i2_putch
  8175  001000                     i2l3024:
  8176  001000  061A               	decf	i2printf@prec,f,c
  8177  001002  281A               	incf	i2printf@prec,w,c
  8178  001004  A4D8               	btfss	status,2,c
  8179  001006  D7F1               	goto	i2l3020
  8180  001008                     i2l3026:
  8181  001008  C00D  FFF6         	movff	i2printf@f,tblptrl
  8182  00100C  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  8183  001010  4A0D               	infsnz	i2printf@f,f,c
  8184  001012  2A0E               	incf	i2printf@f+1,f,c
  8185  001014                     	if	0	;tblptru may be non-zero
  8186  001014                     	endif
  8187  001014                     	if	0	;tblptru may be non-zero
  8188  001014                     	endif
  8189  001014  0008               	tblrd		*
  8190  001016  CFF5 F020          	movff	tablat,i2printf@c
  8191  00101A  5020               	movf	i2printf@c,w,c
  8192  00101C  B4D8               	btfsc	status,2,c
  8193  00101E  0012               	return	
  8194  001020  D67F               	goto	i2l2900
  8195  001022                     __end_ofi2_printf:
  8196                           	opt stack 0
  8197                           pclatu	equ	0xFFB
  8198                           pclath	equ	0xFFA
  8199                           tblptru	equ	0xFF8
  8200                           tblptrh	equ	0xFF7
  8201                           tblptrl	equ	0xFF6
  8202                           tablat	equ	0xFF5
  8203                           prodh	equ	0xFF4
  8204                           prodl	equ	0xFF3
  8205                           intcon	equ	0xFF2
  8206                           intcon3	equ	0xFF0
  8207                           postinc0	equ	0xFEE
  8208                           fsr0h	equ	0xFEA
  8209                           fsr0l	equ	0xFE9
  8210                           wreg	equ	0xFE8
  8211                           fsr1h	equ	0xFE2
  8212                           fsr1l	equ	0xFE1
  8213                           indf2	equ	0xFDF
  8214                           postinc2	equ	0xFDE
  8215                           postdec2	equ	0xFDD
  8216                           fsr2h	equ	0xFDA
  8217                           fsr2l	equ	0xFD9
  8218                           status	equ	0xFD8
  8219                           
  8220 ;; *************** function i2_putch *****************
  8221 ;; Defined at:
  8222 ;;		line 30 in file "../lcd.c"
  8223 ;; Parameters:    Size  Location     Type
  8224 ;;  data            1    wreg     unsigned char 
  8225 ;; Auto vars:     Size  Location     Type
  8226 ;;  data            1    2[COMRAM] unsigned char 
  8227 ;; Return value:  Size  Location     Type
  8228 ;;                  1    wreg      void 
  8229 ;; Registers used:
  8230 ;;		wreg, status,2, status,0, cstack
  8231 ;; Tracked objects:
  8232 ;;		On entry : 0/0
  8233 ;;		On exit  : 0/0
  8234 ;;		Unchanged: 0/0
  8235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8236 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8237 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8238 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8239 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8240 ;;Total ram usage:        1 bytes
  8241 ;; Hardware stack levels used:    1
  8242 ;; Hardware stack levels required when called:    1
  8243 ;; This function calls:
  8244 ;;		i2_lcdNibble
  8245 ;; This function is called by:
  8246 ;;		i2_printf
  8247 ;; This function uses a non-reentrant model
  8248 ;;
  8249                           
  8250                           	psect	text31
  8251  001B94                     __ptext31:
  8252                           	opt stack 0
  8253  001B94                     i2_putch:
  8254                           	opt stack 24
  8255                           
  8256                           ;incstack = 0
  8257                           ;i2putch@data stored from wreg
  8258  001B94  6E03               	movwf	i2putch@data,c
  8259                           
  8260                           ;lcd.c: 31: LATDbits.LATD2 = 1;
  8261  001B96  848C               	bsf	3980,2,c	;volatile
  8262                           
  8263                           ;lcd.c: 32: lcdNibble(data);
  8264  001B98  5003               	movf	i2putch@data,w,c
  8265  001B9A  EC87  F00C         	call	i2_lcdNibble
  8266  001B9E  0012               	return		;funcret
  8267  001BA0                     __end_ofi2_putch:
  8268                           	opt stack 0
  8269                           pclatu	equ	0xFFB
  8270                           pclath	equ	0xFFA
  8271                           tblptru	equ	0xFF8
  8272                           tblptrh	equ	0xFF7
  8273                           tblptrl	equ	0xFF6
  8274                           tablat	equ	0xFF5
  8275                           prodh	equ	0xFF4
  8276                           prodl	equ	0xFF3
  8277                           intcon	equ	0xFF2
  8278                           intcon3	equ	0xFF0
  8279                           postinc0	equ	0xFEE
  8280                           fsr0h	equ	0xFEA
  8281                           fsr0l	equ	0xFE9
  8282                           wreg	equ	0xFE8
  8283                           fsr1h	equ	0xFE2
  8284                           fsr1l	equ	0xFE1
  8285                           indf2	equ	0xFDF
  8286                           postinc2	equ	0xFDE
  8287                           postdec2	equ	0xFDD
  8288                           fsr2h	equ	0xFDA
  8289                           fsr2l	equ	0xFD9
  8290                           status	equ	0xFD8
  8291                           
  8292 ;; *************** function i2_isdigit *****************
  8293 ;; Defined at:
  8294 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  8295 ;; Parameters:    Size  Location     Type
  8296 ;;  c               1    wreg     unsigned char 
  8297 ;; Auto vars:     Size  Location     Type
  8298 ;;  c               1    2[COMRAM] unsigned char 
  8299 ;; Return value:  Size  Location     Type
  8300 ;;		None               void
  8301 ;; Registers used:
  8302 ;;		wreg, status,2, status,0
  8303 ;; Tracked objects:
  8304 ;;		On entry : 0/0
  8305 ;;		On exit  : 0/0
  8306 ;;		Unchanged: 0/0
  8307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8308 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8309 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8310 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8311 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8312 ;;Total ram usage:        3 bytes
  8313 ;; Hardware stack levels used:    1
  8314 ;; This function calls:
  8315 ;;		Nothing
  8316 ;; This function is called by:
  8317 ;;		i2_printf
  8318 ;; This function uses a non-reentrant model
  8319 ;;
  8320                           
  8321                           	psect	text32
  8322  001B24                     __ptext32:
  8323                           	opt stack 0
  8324  001B24                     i2_isdigit:
  8325                           	opt stack 25
  8326                           
  8327                           ;incstack = 0
  8328                           ;i2isdigit@c stored from wreg
  8329  001B24  6E03               	movwf	i2isdigit@c,c
  8330  001B26  0E00               	movlw	0
  8331  001B28  6E02               	movwf	i2_isdigit$932,c
  8332  001B2A  0E3A               	movlw	58
  8333  001B2C  6003               	cpfslt	i2isdigit@c,c
  8334  001B2E  D005               	goto	i2l2622
  8335  001B30  0E2F               	movlw	47
  8336  001B32  6403               	cpfsgt	i2isdigit@c,c
  8337  001B34  D002               	goto	i2l2622
  8338  001B36  0E01               	movlw	1
  8339  001B38  6E02               	movwf	i2_isdigit$932,c
  8340  001B3A                     i2l2622:
  8341  001B3A  C002  F001         	movff	i2_isdigit$932,??i2_isdigit
  8342  001B3E  3001               	rrcf	??i2_isdigit,w,c
  8343  001B40  0012               	return	
  8344  001B42                     __end_ofi2_isdigit:
  8345                           	opt stack 0
  8346                           pclatu	equ	0xFFB
  8347                           pclath	equ	0xFFA
  8348                           tblptru	equ	0xFF8
  8349                           tblptrh	equ	0xFF7
  8350                           tblptrl	equ	0xFF6
  8351                           tablat	equ	0xFF5
  8352                           prodh	equ	0xFF4
  8353                           prodl	equ	0xFF3
  8354                           intcon	equ	0xFF2
  8355                           intcon3	equ	0xFF0
  8356                           postinc0	equ	0xFEE
  8357                           fsr0h	equ	0xFEA
  8358                           fsr0l	equ	0xFE9
  8359                           wreg	equ	0xFE8
  8360                           fsr1h	equ	0xFE2
  8361                           fsr1l	equ	0xFE1
  8362                           indf2	equ	0xFDF
  8363                           postinc2	equ	0xFDE
  8364                           postdec2	equ	0xFDD
  8365                           fsr2h	equ	0xFDA
  8366                           fsr2l	equ	0xFD9
  8367                           status	equ	0xFD8
  8368                           
  8369 ;; *************** function i2___wmul *****************
  8370 ;; Defined at:
  8371 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  8372 ;; Parameters:    Size  Location     Type
  8373 ;;  multiplier      2    0[COMRAM] unsigned int 
  8374 ;;  multiplicand    2    2[COMRAM] unsigned int 
  8375 ;; Auto vars:     Size  Location     Type
  8376 ;;  __wmul          2    4[COMRAM] unsigned int 
  8377 ;; Return value:  Size  Location     Type
  8378 ;;                  2    0[COMRAM] unsigned int 
  8379 ;; Registers used:
  8380 ;;		wreg, status,2, status,0, prodl, prodh
  8381 ;; Tracked objects:
  8382 ;;		On entry : 0/0
  8383 ;;		On exit  : 0/0
  8384 ;;		Unchanged: 0/0
  8385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8386 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8387 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8389 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8390 ;;Total ram usage:        6 bytes
  8391 ;; Hardware stack levels used:    1
  8392 ;; This function calls:
  8393 ;;		Nothing
  8394 ;; This function is called by:
  8395 ;;		i2_printf
  8396 ;; This function uses a non-reentrant model
  8397 ;;
  8398                           
  8399                           	psect	text33
  8400  001AE0                     __ptext33:
  8401                           	opt stack 0
  8402  001AE0                     i2___wmul:
  8403                           	opt stack 25
  8404                           
  8405                           ;incstack = 0
  8406  001AE0  5001               	movf	i2___wmul@multiplier,w,c
  8407  001AE2  0203               	mulwf	i2___wmul@multiplicand,c
  8408  001AE4  CFF3 F005          	movff	prodl,i2___wmul@product
  8409  001AE8  CFF4 F006          	movff	prodh,i2___wmul@product+1
  8410  001AEC  5001               	movf	i2___wmul@multiplier,w,c
  8411  001AEE  0204               	mulwf	i2___wmul@multiplicand+1,c
  8412  001AF0  50F3               	movf	prodl,w,c
  8413  001AF2  2606               	addwf	i2___wmul@product+1,f,c
  8414  001AF4  5002               	movf	i2___wmul@multiplier+1,w,c
  8415  001AF6  0203               	mulwf	i2___wmul@multiplicand,c
  8416  001AF8  50F3               	movf	prodl,w,c
  8417  001AFA  2606               	addwf	i2___wmul@product+1,f,c
  8418  001AFC  C005  F001         	movff	i2___wmul@product,?i2___wmul
  8419  001B00  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
  8420  001B04  0012               	return	
  8421  001B06                     __end_ofi2___wmul:
  8422                           	opt stack 0
  8423                           pclatu	equ	0xFFB
  8424                           pclath	equ	0xFFA
  8425                           tblptru	equ	0xFF8
  8426                           tblptrh	equ	0xFF7
  8427                           tblptrl	equ	0xFF6
  8428                           tablat	equ	0xFF5
  8429                           prodh	equ	0xFF4
  8430                           prodl	equ	0xFF3
  8431                           intcon	equ	0xFF2
  8432                           intcon3	equ	0xFF0
  8433                           postinc0	equ	0xFEE
  8434                           fsr0h	equ	0xFEA
  8435                           fsr0l	equ	0xFE9
  8436                           wreg	equ	0xFE8
  8437                           fsr1h	equ	0xFE2
  8438                           fsr1l	equ	0xFE1
  8439                           indf2	equ	0xFDF
  8440                           postinc2	equ	0xFDE
  8441                           postdec2	equ	0xFDD
  8442                           fsr2h	equ	0xFDA
  8443                           fsr2l	equ	0xFD9
  8444                           status	equ	0xFD8
  8445                           
  8446 ;; *************** function i2___lwmod *****************
  8447 ;; Defined at:
  8448 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  8449 ;; Parameters:    Size  Location     Type
  8450 ;;  dividend        2    7[COMRAM] unsigned int 
  8451 ;;  divisor         2    9[COMRAM] unsigned int 
  8452 ;; Auto vars:     Size  Location     Type
  8453 ;;  __lwmod         1   11[COMRAM] unsigned char 
  8454 ;; Return value:  Size  Location     Type
  8455 ;;                  2    7[COMRAM] unsigned int 
  8456 ;; Registers used:
  8457 ;;		wreg, status,2, status,0
  8458 ;; Tracked objects:
  8459 ;;		On entry : 0/0
  8460 ;;		On exit  : 0/0
  8461 ;;		Unchanged: 0/0
  8462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8463 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8464 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8466 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8467 ;;Total ram usage:        5 bytes
  8468 ;; Hardware stack levels used:    1
  8469 ;; This function calls:
  8470 ;;		Nothing
  8471 ;; This function is called by:
  8472 ;;		i2_printf
  8473 ;; This function uses a non-reentrant model
  8474 ;;
  8475                           
  8476                           	psect	text34
  8477  001A2A                     __ptext34:
  8478                           	opt stack 0
  8479  001A2A                     i2___lwmod:
  8480                           	opt stack 25
  8481                           
  8482                           ;incstack = 0
  8483  001A2A  500A               	movf	i2___lwmod@divisor,w,c
  8484  001A2C  100B               	iorwf	i2___lwmod@divisor+1,w,c
  8485  001A2E  B4D8               	btfsc	status,2,c
  8486  001A30  D018               	goto	i2l893
  8487  001A32  0E01               	movlw	1
  8488  001A34  6E0C               	movwf	i2___lwmod@counter,c
  8489  001A36  D004               	goto	i2l2654
  8490  001A38                     i2l2652:
  8491  001A38  90D8               	bcf	status,0,c
  8492  001A3A  360A               	rlcf	i2___lwmod@divisor,f,c
  8493  001A3C  360B               	rlcf	i2___lwmod@divisor+1,f,c
  8494  001A3E  2A0C               	incf	i2___lwmod@counter,f,c
  8495  001A40                     i2l2654:
  8496  001A40  AE0B               	btfss	i2___lwmod@divisor+1,7,c
  8497  001A42  D7FA               	goto	i2l2652
  8498  001A44                     i2l2656:
  8499  001A44  500A               	movf	i2___lwmod@divisor,w,c
  8500  001A46  5C08               	subwf	i2___lwmod@dividend,w,c
  8501  001A48  500B               	movf	i2___lwmod@divisor+1,w,c
  8502  001A4A  5809               	subwfb	i2___lwmod@dividend+1,w,c
  8503  001A4C  A0D8               	btfss	status,0,c
  8504  001A4E  D004               	goto	i2l2660
  8505  001A50  500A               	movf	i2___lwmod@divisor,w,c
  8506  001A52  5E08               	subwf	i2___lwmod@dividend,f,c
  8507  001A54  500B               	movf	i2___lwmod@divisor+1,w,c
  8508  001A56  5A09               	subwfb	i2___lwmod@dividend+1,f,c
  8509  001A58                     i2l2660:
  8510  001A58  90D8               	bcf	status,0,c
  8511  001A5A  320B               	rrcf	i2___lwmod@divisor+1,f,c
  8512  001A5C  320A               	rrcf	i2___lwmod@divisor,f,c
  8513  001A5E  2E0C               	decfsz	i2___lwmod@counter,f,c
  8514  001A60  D7F1               	goto	i2l2656
  8515  001A62                     i2l893:
  8516  001A62  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
  8517  001A66  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
  8518  001A6A  0012               	return		;funcret
  8519  001A6C                     __end_ofi2___lwmod:
  8520                           	opt stack 0
  8521                           pclatu	equ	0xFFB
  8522                           pclath	equ	0xFFA
  8523                           tblptru	equ	0xFF8
  8524                           tblptrh	equ	0xFF7
  8525                           tblptrl	equ	0xFF6
  8526                           tablat	equ	0xFF5
  8527                           prodh	equ	0xFF4
  8528                           prodl	equ	0xFF3
  8529                           intcon	equ	0xFF2
  8530                           intcon3	equ	0xFF0
  8531                           postinc0	equ	0xFEE
  8532                           fsr0h	equ	0xFEA
  8533                           fsr0l	equ	0xFE9
  8534                           wreg	equ	0xFE8
  8535                           fsr1h	equ	0xFE2
  8536                           fsr1l	equ	0xFE1
  8537                           indf2	equ	0xFDF
  8538                           postinc2	equ	0xFDE
  8539                           postdec2	equ	0xFDD
  8540                           fsr2h	equ	0xFDA
  8541                           fsr2l	equ	0xFD9
  8542                           status	equ	0xFD8
  8543                           
  8544 ;; *************** function i2___lwdiv *****************
  8545 ;; Defined at:
  8546 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  8547 ;; Parameters:    Size  Location     Type
  8548 ;;  dividend        2    0[COMRAM] unsigned int 
  8549 ;;  divisor         2    2[COMRAM] unsigned int 
  8550 ;; Auto vars:     Size  Location     Type
  8551 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  8552 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  8553 ;; Return value:  Size  Location     Type
  8554 ;;                  2    0[COMRAM] unsigned int 
  8555 ;; Registers used:
  8556 ;;		wreg, status,2, status,0
  8557 ;; Tracked objects:
  8558 ;;		On entry : 0/0
  8559 ;;		On exit  : 0/0
  8560 ;;		Unchanged: 0/0
  8561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8562 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8563 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8564 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8565 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8566 ;;Total ram usage:        7 bytes
  8567 ;; Hardware stack levels used:    1
  8568 ;; This function calls:
  8569 ;;		Nothing
  8570 ;; This function is called by:
  8571 ;;		i2_printf
  8572 ;; This function uses a non-reentrant model
  8573 ;;
  8574                           
  8575                           	psect	text35
  8576  00186E                     __ptext35:
  8577                           	opt stack 0
  8578  00186E                     i2___lwdiv:
  8579                           	opt stack 25
  8580                           
  8581                           ;incstack = 0
  8582  00186E  0E00               	movlw	0
  8583  001870  6E06               	movwf	i2___lwdiv@quotient+1,c
  8584  001872  0E00               	movlw	0
  8585  001874  6E05               	movwf	i2___lwdiv@quotient,c
  8586  001876  5003               	movf	i2___lwdiv@divisor,w,c
  8587  001878  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  8588  00187A  B4D8               	btfsc	status,2,c
  8589  00187C  D01C               	goto	i2l883
  8590  00187E  0E01               	movlw	1
  8591  001880  6E07               	movwf	i2___lwdiv@counter,c
  8592  001882  D004               	goto	i2l2634
  8593  001884                     i2l2632:
  8594  001884  90D8               	bcf	status,0,c
  8595  001886  3603               	rlcf	i2___lwdiv@divisor,f,c
  8596  001888  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  8597  00188A  2A07               	incf	i2___lwdiv@counter,f,c
  8598  00188C                     i2l2634:
  8599  00188C  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  8600  00188E  D7FA               	goto	i2l2632
  8601  001890                     i2l2636:
  8602  001890  90D8               	bcf	status,0,c
  8603  001892  3605               	rlcf	i2___lwdiv@quotient,f,c
  8604  001894  3606               	rlcf	i2___lwdiv@quotient+1,f,c
  8605  001896  5003               	movf	i2___lwdiv@divisor,w,c
  8606  001898  5C01               	subwf	i2___lwdiv@dividend,w,c
  8607  00189A  5004               	movf	i2___lwdiv@divisor+1,w,c
  8608  00189C  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  8609  00189E  A0D8               	btfss	status,0,c
  8610  0018A0  D005               	goto	i2l2644
  8611  0018A2  5003               	movf	i2___lwdiv@divisor,w,c
  8612  0018A4  5E01               	subwf	i2___lwdiv@dividend,f,c
  8613  0018A6  5004               	movf	i2___lwdiv@divisor+1,w,c
  8614  0018A8  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  8615  0018AA  8005               	bsf	i2___lwdiv@quotient,0,c
  8616  0018AC                     i2l2644:
  8617  0018AC  90D8               	bcf	status,0,c
  8618  0018AE  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  8619  0018B0  3203               	rrcf	i2___lwdiv@divisor,f,c
  8620  0018B2  2E07               	decfsz	i2___lwdiv@counter,f,c
  8621  0018B4  D7ED               	goto	i2l2636
  8622  0018B6                     i2l883:
  8623  0018B6  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  8624  0018BA  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  8625  0018BE  0012               	return		;funcret
  8626  0018C0                     __end_ofi2___lwdiv:
  8627                           	opt stack 0
  8628                           pclatu	equ	0xFFB
  8629                           pclath	equ	0xFFA
  8630                           tblptru	equ	0xFF8
  8631                           tblptrh	equ	0xFF7
  8632                           tblptrl	equ	0xFF6
  8633                           tablat	equ	0xFF5
  8634                           prodh	equ	0xFF4
  8635                           prodl	equ	0xFF3
  8636                           intcon	equ	0xFF2
  8637                           intcon3	equ	0xFF0
  8638                           postinc0	equ	0xFEE
  8639                           fsr0h	equ	0xFEA
  8640                           fsr0l	equ	0xFE9
  8641                           wreg	equ	0xFE8
  8642                           fsr1h	equ	0xFE2
  8643                           fsr1l	equ	0xFE1
  8644                           indf2	equ	0xFDF
  8645                           postinc2	equ	0xFDE
  8646                           postdec2	equ	0xFDD
  8647                           fsr2h	equ	0xFDA
  8648                           fsr2l	equ	0xFD9
  8649                           status	equ	0xFD8
  8650                           
  8651 ;; *************** function i2_lcdInst *****************
  8652 ;; Defined at:
  8653 ;;		line 25 in file "../lcd.c"
  8654 ;; Parameters:    Size  Location     Type
  8655 ;;  data            1    wreg     unsigned char 
  8656 ;; Auto vars:     Size  Location     Type
  8657 ;;  data            1    2[COMRAM] unsigned char 
  8658 ;; Return value:  Size  Location     Type
  8659 ;;                  1    wreg      void 
  8660 ;; Registers used:
  8661 ;;		wreg, status,2, status,0, cstack
  8662 ;; Tracked objects:
  8663 ;;		On entry : 0/0
  8664 ;;		On exit  : 0/0
  8665 ;;		Unchanged: 0/0
  8666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8667 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8668 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8669 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8670 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8671 ;;Total ram usage:        1 bytes
  8672 ;; Hardware stack levels used:    1
  8673 ;; Hardware stack levels required when called:    1
  8674 ;; This function calls:
  8675 ;;		i2_lcdNibble
  8676 ;; This function is called by:
  8677 ;;		_switchMenu
  8678 ;;		_ISR
  8679 ;; This function uses a non-reentrant model
  8680 ;;
  8681                           
  8682                           	psect	text36
  8683  001BA0                     __ptext36:
  8684                           	opt stack 0
  8685  001BA0                     i2_lcdInst:
  8686                           	opt stack 25
  8687                           
  8688                           ;incstack = 0
  8689                           ;i2lcdInst@data stored from wreg
  8690  001BA0  6E03               	movwf	i2lcdInst@data,c
  8691                           
  8692                           ;lcd.c: 26: LATDbits.LATD2 = 0;
  8693  001BA2  948C               	bcf	3980,2,c	;volatile
  8694                           
  8695                           ;lcd.c: 27: lcdNibble(data);
  8696  001BA4  5003               	movf	i2lcdInst@data,w,c
  8697  001BA6  EC87  F00C         	call	i2_lcdNibble
  8698  001BAA  0012               	return		;funcret
  8699  001BAC                     __end_ofi2_lcdInst:
  8700                           	opt stack 0
  8701                           pclatu	equ	0xFFB
  8702                           pclath	equ	0xFFA
  8703                           tblptru	equ	0xFF8
  8704                           tblptrh	equ	0xFF7
  8705                           tblptrl	equ	0xFF6
  8706                           tablat	equ	0xFF5
  8707                           prodh	equ	0xFF4
  8708                           prodl	equ	0xFF3
  8709                           intcon	equ	0xFF2
  8710                           intcon3	equ	0xFF0
  8711                           postinc0	equ	0xFEE
  8712                           fsr0h	equ	0xFEA
  8713                           fsr0l	equ	0xFE9
  8714                           wreg	equ	0xFE8
  8715                           fsr1h	equ	0xFE2
  8716                           fsr1l	equ	0xFE1
  8717                           indf2	equ	0xFDF
  8718                           postinc2	equ	0xFDE
  8719                           postdec2	equ	0xFDD
  8720                           fsr2h	equ	0xFDA
  8721                           fsr2l	equ	0xFD9
  8722                           status	equ	0xFD8
  8723                           
  8724 ;; *************** function i2_lcdNibble *****************
  8725 ;; Defined at:
  8726 ;;		line 35 in file "../lcd.c"
  8727 ;; Parameters:    Size  Location     Type
  8728 ;;  data            1    wreg     unsigned char 
  8729 ;; Auto vars:     Size  Location     Type
  8730 ;;  data            1    1[COMRAM] unsigned char 
  8731 ;;  lcdNibble       1    0[COMRAM] unsigned char 
  8732 ;; Return value:  Size  Location     Type
  8733 ;;                  1    wreg      void 
  8734 ;; Registers used:
  8735 ;;		wreg, status,2, status,0
  8736 ;; Tracked objects:
  8737 ;;		On entry : 0/0
  8738 ;;		On exit  : 0/0
  8739 ;;		Unchanged: 0/0
  8740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8741 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8742 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8743 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8744 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8745 ;;Total ram usage:        2 bytes
  8746 ;; Hardware stack levels used:    1
  8747 ;; This function calls:
  8748 ;;		Nothing
  8749 ;; This function is called by:
  8750 ;;		i2_lcdInst
  8751 ;;		i2_putch
  8752 ;; This function uses a non-reentrant model
  8753 ;;
  8754                           
  8755                           	psect	text37
  8756  00190E                     __ptext37:
  8757                           	opt stack 0
  8758  00190E                     i2_lcdNibble:
  8759                           	opt stack 24
  8760                           
  8761                           ;incstack = 0
  8762                           ;i2lcdNibble@data stored from wreg
  8763  00190E  6E02               	movwf	i2lcdNibble@data,c
  8764                           
  8765                           ;lcd.c: 37: char temp = data & 0xF0;
  8766  001910  5002               	movf	i2lcdNibble@data,w,c
  8767  001912  0BF0               	andlw	240
  8768  001914  6E01               	movwf	i2lcdNibble@temp,c
  8769                           
  8770                           ;lcd.c: 38: LATD = LATD & 0x0F;
  8771  001916  508C               	movf	3980,w,c	;volatile
  8772  001918  0B0F               	andlw	15
  8773  00191A  6E8C               	movwf	3980,c	;volatile
  8774                           
  8775                           ;lcd.c: 39: LATD = temp | LATD;
  8776  00191C  5001               	movf	i2lcdNibble@temp,w,c
  8777  00191E  108C               	iorwf	3980,w,c	;volatile
  8778  001920  6E8C               	movwf	3980,c	;volatile
  8779                           
  8780                           ;lcd.c: 41: LATDbits.LATD3 = 0;
  8781  001922  968C               	bcf	3980,3,c	;volatile
  8782                           
  8783                           ;lcd.c: 42: _delay((unsigned long)((30)*(10000000/4000000.0)));
  8784  001924  0E19               	movlw	25
  8785  001926                     i2u468_47:
  8786  001926  2EE8               	decfsz	wreg,f,c
  8787  001928  D7FE               	bra	i2u468_47
  8788                           
  8789                           ;lcd.c: 43: LATDbits.LATD3 = 1;
  8790  00192A  868C               	bsf	3980,3,c	;volatile
  8791                           
  8792                           ;lcd.c: 44: _delay((unsigned long)((30)*(10000000/4000000.0)));
  8793  00192C  0E19               	movlw	25
  8794  00192E                     i2u469_47:
  8795  00192E  2EE8               	decfsz	wreg,f,c
  8796  001930  D7FE               	bra	i2u469_47
  8797                           
  8798                           ;lcd.c: 46: data = data << 4;
  8799  001932  3802               	swapf	i2lcdNibble@data,w,c
  8800  001934  0BF0               	andlw	240
  8801  001936  6E02               	movwf	i2lcdNibble@data,c
  8802                           
  8803                           ;lcd.c: 48: temp = data & 0xF0;
  8804  001938  5002               	movf	i2lcdNibble@data,w,c
  8805  00193A  0BF0               	andlw	240
  8806  00193C  6E01               	movwf	i2lcdNibble@temp,c
  8807                           
  8808                           ;lcd.c: 49: LATD = LATD & 0x0F;
  8809  00193E  508C               	movf	3980,w,c	;volatile
  8810  001940  0B0F               	andlw	15
  8811  001942  6E8C               	movwf	3980,c	;volatile
  8812                           
  8813                           ;lcd.c: 50: LATD = temp | LATD;
  8814  001944  5001               	movf	i2lcdNibble@temp,w,c
  8815  001946  108C               	iorwf	3980,w,c	;volatile
  8816  001948  6E8C               	movwf	3980,c	;volatile
  8817                           
  8818                           ;lcd.c: 52: LATDbits.LATD3 = 0;
  8819  00194A  968C               	bcf	3980,3,c	;volatile
  8820                           
  8821                           ;lcd.c: 53: _delay((unsigned long)((30)*(10000000/4000000.0)));
  8822  00194C  0E19               	movlw	25
  8823  00194E                     i2u470_47:
  8824  00194E  2EE8               	decfsz	wreg,f,c
  8825  001950  D7FE               	bra	i2u470_47
  8826                           
  8827                           ;lcd.c: 54: LATDbits.LATD3 = 1;
  8828  001952  868C               	bsf	3980,3,c	;volatile
  8829                           
  8830                           ;lcd.c: 55: _delay((unsigned long)((30)*(10000000/4000000.0)));
  8831  001954  0E19               	movlw	25
  8832  001956                     i2u471_47:
  8833  001956  2EE8               	decfsz	wreg,f,c
  8834  001958  D7FE               	bra	i2u471_47
  8835  00195A  0012               	return		;funcret
  8836  00195C                     __end_ofi2_lcdNibble:
  8837                           	opt stack 0
  8838                           pclatu	equ	0xFFB
  8839                           pclath	equ	0xFFA
  8840                           tblptru	equ	0xFF8
  8841                           tblptrh	equ	0xFF7
  8842                           tblptrl	equ	0xFF6
  8843                           tablat	equ	0xFF5
  8844                           prodh	equ	0xFF4
  8845                           prodl	equ	0xFF3
  8846                           intcon	equ	0xFF2
  8847                           intcon3	equ	0xFF0
  8848                           postinc0	equ	0xFEE
  8849                           fsr0h	equ	0xFEA
  8850                           fsr0l	equ	0xFE9
  8851                           wreg	equ	0xFE8
  8852                           fsr1h	equ	0xFE2
  8853                           fsr1l	equ	0xFE1
  8854                           indf2	equ	0xFDF
  8855                           postinc2	equ	0xFDE
  8856                           postdec2	equ	0xFDD
  8857                           fsr2h	equ	0xFDA
  8858                           fsr2l	equ	0xFD9
  8859                           status	equ	0xFD8
  8860                           pclatu	equ	0xFFB
  8861                           pclath	equ	0xFFA
  8862                           tblptru	equ	0xFF8
  8863                           tblptrh	equ	0xFF7
  8864                           tblptrl	equ	0xFF6
  8865                           tablat	equ	0xFF5
  8866                           prodh	equ	0xFF4
  8867                           prodl	equ	0xFF3
  8868                           intcon	equ	0xFF2
  8869                           intcon3	equ	0xFF0
  8870                           postinc0	equ	0xFEE
  8871                           fsr0h	equ	0xFEA
  8872                           fsr0l	equ	0xFE9
  8873                           wreg	equ	0xFE8
  8874                           fsr1h	equ	0xFE2
  8875                           fsr1l	equ	0xFE1
  8876                           indf2	equ	0xFDF
  8877                           postinc2	equ	0xFDE
  8878                           postdec2	equ	0xFDD
  8879                           fsr2h	equ	0xFDA
  8880                           fsr2l	equ	0xFD9
  8881                           status	equ	0xFD8
  8882                           
  8883                           	psect	rparam
  8884  0000                     pclatu	equ	0xFFB
  8885                           pclath	equ	0xFFA
  8886                           tblptru	equ	0xFF8
  8887                           tblptrh	equ	0xFF7
  8888                           tblptrl	equ	0xFF6
  8889                           tablat	equ	0xFF5
  8890                           prodh	equ	0xFF4
  8891                           prodl	equ	0xFF3
  8892                           intcon	equ	0xFF2
  8893                           intcon3	equ	0xFF0
  8894                           postinc0	equ	0xFEE
  8895                           fsr0h	equ	0xFEA
  8896                           fsr0l	equ	0xFE9
  8897                           wreg	equ	0xFE8
  8898                           fsr1h	equ	0xFE2
  8899                           fsr1l	equ	0xFE1
  8900                           indf2	equ	0xFDF
  8901                           postinc2	equ	0xFDE
  8902                           postdec2	equ	0xFDD
  8903                           fsr2h	equ	0xFDA
  8904                           fsr2l	equ	0xFD9
  8905                           status	equ	0xFD8
  8906                           
  8907                           	psect	temp
  8908  00004B                     btemp:
  8909                           	opt stack 0
  8910  00004B                     	ds	1
  8911  0000                     int$flags	set	btemp
  8912                           pclatu	equ	0xFFB
  8913                           pclath	equ	0xFFA
  8914                           tblptru	equ	0xFF8
  8915                           tblptrh	equ	0xFF7
  8916                           tblptrl	equ	0xFF6
  8917                           tablat	equ	0xFF5
  8918                           prodh	equ	0xFF4
  8919                           prodl	equ	0xFF3
  8920                           intcon	equ	0xFF2
  8921                           intcon3	equ	0xFF0
  8922                           postinc0	equ	0xFEE
  8923                           fsr0h	equ	0xFEA
  8924                           fsr0l	equ	0xFE9
  8925                           wreg	equ	0xFE8
  8926                           fsr1h	equ	0xFE2
  8927                           fsr1l	equ	0xFE1
  8928                           indf2	equ	0xFDF
  8929                           postinc2	equ	0xFDE
  8930                           postdec2	equ	0xFDD
  8931                           fsr2h	equ	0xFDA
  8932                           fsr2l	equ	0xFD9
  8933                           status	equ	0xFD8


Data Sizes:
    Strings     404
    Constant    35
    Data        2
    BSS         34
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     69      74
    BANK0           128     25      56
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 25
		 -> STR_24(CODE[21]), STR_23(CODE[17]), STR_22(CODE[17]), STR_21(CODE[17]), 
		 -> STR_20(CODE[23]), STR_19(CODE[23]), STR_18(CODE[21]), STR_17(CODE[17]), 
		 -> STR_16(CODE[21]), STR_15(CODE[17]), STR_14(CODE[21]), STR_13(CODE[17]), 
		 -> STR_12(CODE[19]), STR_11(CODE[17]), STR_10(CODE[19]), STR_9(CODE[17]), 
		 -> STR_8(CODE[25]), STR_7(CODE[17]), STR_6(CODE[17]), STR_5(CODE[17]), 
		 -> STR_4(CODE[17]), STR_3(CODE[17]), STR_2(CODE[17]), STR_1(CODE[17]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 


Critical Paths under _main in COMRAM

    _main->_I2C_Master_Init
    _stopOperation->___awdiv
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _isFluctuate->_abs
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _I2C_Master_Init->___lldiv

Critical Paths under _ISR in COMRAM

    _ISR->_switchMenu
    _switchMenu->i2_printf
    i2_stopOperation->i2___awdiv
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_lcdInst->i2_lcdNibble

Critical Paths under _main in BANK0

    _main->_printf

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0    6857
                                             18 BANK0      7     7      0
                    _I2C_Master_Init
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _initLCD
                        _isFluctuate
                            _lcdInst
                             _printf
                      _stopOperation
                      _testBatteries
 ---------------------------------------------------------------------------------
 (1) _testBatteries                                        2     2      0       0
                                             52 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _stopOperation                                        0     0      0    1004
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     500
                                             52 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     504
                                             52 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _printf                                              31    23      8    4426
                                             64 COMRAM     4     4      0
                                              0 BANK0     18    10      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0     135
                                             54 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             52 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     289
                                             52 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     287
                                             59 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     418
                                             52 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _isFluctuate                                         10     8      2     265
                                             56 COMRAM    10     8      2
                                _abs
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _readADC                                              1     1      0      22
                                             52 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _abs                                                  4     2      2     130
                                             52 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                             55 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0     135
                                             54 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0     113
                                             52 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Write                                     2     0      2     214
                                             53 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Read                                      2     2      0      45
                                             53 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Wait                                      1     1      0       0
                                             52 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     398
                                             65 COMRAM     4     0      4
                                              0 BANK0      4     4      0
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     290
                                             52 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _ISR                                                 17    17      0    6863
                                             35 COMRAM    17    17      0
                         _switchMenu
                          i2___awdiv
                          i2___awmod
                          i2_lcdInst
                           i2_printf
                          i2_readADC
                    i2_stopOperation
 ---------------------------------------------------------------------------------
 (5) i2_readADC                                            1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _switchMenu                                           3     1      2    3137
                                             32 COMRAM     3     1      2
                          i2_lcdInst
                           i2_printf
                    i2_stopOperation
 ---------------------------------------------------------------------------------
 (5) i2_stopOperation                                      0     0      0     804
                          i2___awdiv
                          i2___awmod
 ---------------------------------------------------------------------------------
 (6) i2___awmod                                            6     2      4     400
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) i2___awdiv                                            8     4      4     404
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (5) i2_printf                                            29    23      6    1938
                                             12 COMRAM    20    14      6
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (6) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (6) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) i2___wmul                                             6     2      4     209
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (6) i2___lwdiv                                            7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (7) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _I2C_Master_Read
     _I2C_Master_Wait
   _I2C_Master_Start
     _I2C_Master_Wait
   _I2C_Master_Stop
     _I2C_Master_Wait
   _I2C_Master_Write
     _I2C_Master_Wait
   _initLCD
     _lcdInst
       _lcdNibble
   _isFluctuate
     _abs
     _readADC
   _lcdInst
     _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
       _lcdNibble
   _stopOperation
     ___awdiv
     ___awmod
   _testBatteries

 _ISR (ROOT)
   _switchMenu
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
       i2___lwmod
         i2___lwdiv (ARG)
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
     i2_stopOperation
       i2___awdiv
       i2___awmod
   i2___awdiv
   i2___awmod
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     i2___lwdiv
     i2___lwmod
       i2___lwdiv (ARG)
     i2___wmul
     i2_isdigit
     i2_putch
       i2_lcdNibble
   i2_readADC
   i2_stopOperation
     i2___awdiv
     i2___awmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     19      38       5       43.8%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     45      4A       1       58.7%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      82      34        0.0%
DATA                 0      0      82       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Mon Feb 27 00:11:15 2017

                       l30 1B6A               ___awdiv@sign 003A        ___wmul@multiplicand 0037  
       i2___lwdiv@dividend 0001                __CFG_BORV$3 000000               __CFG_CP0$OFF 000000  
             __CFG_CP1$OFF 000000               __CFG_CP2$OFF 000000               __CFG_CP3$OFF 000000  
              __CFG_OSC$HS 000000                        l250 01E4                        l323 1B50  
                      l251 01FC                        l340 1186                        l174 1A8A  
                      l334 109E                        l262 0268                        l337 1112  
                      l249 01CC                        l267 02BE                        l438 0744  
                      l830 16CE                        l883 1864                        l893 1A20  
                      _GIE 007F97               __CFG_CPB$OFF 000000                        _PEN 007E2A  
             __CFG_CPD$OFF 000000                        _ISR 0008                        _SEN 007E28  
                      _abs 1A6C                        _min 008E                        _sec 0098  
             ___awmod@sign 003A                        prod 000FF3                        wreg 000FE8  
             __CFG_LVP$OFF 000000                       ?_ISR 0001               __CFG_WDT$OFF 000000  
                     ?_abs 0035                       l4002 08EC                       l3212 14DE  
                     l4004 08F2                       l4012 0986                       l3230 154C  
                     l4006 093A                       l4014 0998                       l4102 01B4  
                     l3056 1ADA                       l3216 14E6                       l4016 09A0  
                     l3304 114E                       l3226 1548                       l4018 09AC  
                     l4210 0540                       l3332 11EC                       l3324 11BC  
                     l3252 1066                       l4220 056A                       l4204 04FE  
                     l4132 0252                       l4052 00BC                       l4044 008A  
                     l4214 054A                       l4206 050A                       l4150 034C  
                     l4134 0258                       l4070 010A                       l2712 156A  
                     l3352 1252                       l3344 1222                       l4128 0214  
                     l4064 00E8                       l4056 00C6                       l2802 16C0  
                     l4226 05D4                       l4138 0280                       l4074 0114  
                     l4082 0136                       l2812 1832                       l2724 1590  
                     l2740 15C2                       l4228 05E0                       l4180 043E  
                     l4172 03FE                       l4164 03BE                       l4156 0378  
                     l4092 019C                       l4084 0142                       l4148 0342  
                     l2814 183A                       l2726 1598                       l2718 157A  
                     l3278 10DA                       l4238 062E                       l4190 048A  
                     l4182 044A                       l4174 040A                       l4166 03CA  
                     l4158 0382                       l2824 185A                       l2816 183E  
                     l2840 1A16                       l2832 19F6                       l2744 15D0  
                     l2736 15B8                       l2728 159C                       l2760 1700  
                     l2834 19FE                       l2836 1A02                       l2780 1746  
                     l2772 172E                       l2764 170E                       l2756 16F4  
                     l4196 04BE                       l4188 047E                       l2790 1680  
                     l2694 1B1C                       l3902 0678                       l2766 1716  
                     l4198 04CA                       l2792 168C                       l3920 0712  
                     l2768 171A                       l2776 1738                       l2794 1690  
                     l3932 077C                       l3916 070C                       l3908 06A8  
                     l3950 07D4                       l3952 07DA                       l3936 0798  
                     l3938 079E                       l3980 0880                       l3892 0648  
                     l3974 0842                       l3966 0810                       l3992 08B4  
                     l3968 0822                       l3896 065C                       l3994 08C0  
                     l3986 0898                       l3978 0876                       l3898 066E  
                     l3998 08DA                       STR_1 FFCB                       STR_2 FFED  
                     STR_3 FFA9                       STR_4 FFBA                       STR_5 FF76  
                     STR_6 FF54                       STR_7 FF98                       STR_8 FE6A  
                     STR_9 FF43               isFluctuate@i 0042                       u3000 108A  
                     u3010 10C6                       u3020 10FE                       _LATA 000F89  
                     u3030 113A                       _LATB 000F8A                       _LATC 000F8B  
                     u3040 1172                       _LATD 000F8C                       _LATE 000F8D  
                     u3050 11AE                       u3060 11E0                       u3070 1214  
                     u3080 1246                       u2710 1AD8                       u4311 019A  
                     u4430 0318                       u4431 0314                       u4440 031A  
                     _PEIE 007F96                       u4607 061A                       u4617 14EC  
                     u2970 153E                       u4627 19A8                       _RCEN 007E2B  
                     u4637 19DC                       u4647 18D8                       u4657 18E0  
                     u4667 1900                       u4587 00D8                       u4677 1908  
                     u4597 0126                       u3995 17EE                       _TMR0 000FD6  
                     _TMR1 000FCE                       abs@x 0035                       _main 0012  
                     _keys FE47                       _numC 0092                       _time 0080  
                     fsr0h 000FEA                       fsr1h 000FE2         i2___lwdiv@quotient 0005  
                     fsr2h 000FDA                       fsr0l 000FE9                       indf2 000FDF  
                     fsr1l 000FE1                       fsr2l 000FD9                       btemp 004B  
                     prodh 000FF4                       prodl 000FF3                       start 000E  
            __CFG_IESO$OFF 000000            __end_ofi2_putch 1BA0              __CFG_MCLRE$ON 000000  
             ___param_bank 000000                i2_lcdNibble 190E                      ??_ISR 0024  
                    ??_abs 0037           ?_I2C_Master_Init 0042           ?_I2C_Master_Read 0001  
         ?_I2C_Master_Wait 0001           ?_I2C_Master_Stop 0001                      ?_main 0001  
                    _ACKEN 007E2C                      _ACKDT 007E2D            __end_of___awdiv 15DA  
                    STR_10 FEDB                      STR_11 FF10                      STR_12 FEDB  
                    STR_20 FE9A                      STR_21 FF87                      STR_13 FF32  
                    STR_22 FEFF                      STR_14 FEB1                      STR_23 FFDC  
                    STR_15 FF21                      STR_16 FEB1                      STR_24 FEC6  
                    STR_17 FF65                      STR_25 FEEE                      STR_18 FEB1  
                    STR_19 FE83            __end_of___awmod 1750            __end_of___lldiv 16E0  
                    _T0CON 000FD5            ___awdiv@divisor 0037                      _T1CON 000FCD  
          __end_of___lwdiv 186E            __end_of___lwmod 1A2A                      i2l323 1B64  
                    i2l406 0CDA                      i2l438 0E02                      i2l883 18B6  
          ___awdiv@counter 0039                      i2l893 1A62                      _PORTB 000F81  
                    _TRISA 000F92                      _TRISB 000F93                      _TRISC 000F94  
                    _TRISD 000F95                      _TRISE 000F96              _turn1BackLeft 0099  
            __CFG_PWRT$OFF 000000              __CFG_WRT0$OFF 000000              __CFG_WRT1$OFF 000000  
            __CFG_WRT2$OFF 000000              __CFG_WRT3$OFF 000000            __end_of_lcdInst 1B94  
           __CFG_EBTR0$OFF 000000             __CFG_FCMEN$OFF 000000             __CFG_EBTR1$OFF 000000  
            _turn2BackLeft 009B             __CFG_EBTR2$OFF 000000             __CFG_EBTR3$OFF 000000  
   __size_of_stopOperation 00E2              __CFG_WRTB$OFF 000000              __CFG_WRTC$OFF 000000  
            __CFG_WRTD$OFF 000000            __end_of_readADC 1B56            __end_of_initLCD 19E8  
           __CFG_EBTRB$OFF 000000                 i2isdigit@c 0003            __end_of_dpowers FE62  
                    _numAA 0090                      _num9V 008F            __end_of_isdigit 1B24  
                    _step1 0048                      _step2 0049                      _putch 1B7C  
                    main@i 00B4                      pclath 000FFA                      tablat 000FF5  
         __end_ofi2___wmul 1B06                      status 000FD8         __size_ofi2___awdiv 0084  
       __size_ofi2___awmod 0070             __CFG_PBADEN$ON 000000              i2printf@width 001E  
         __end_ofi2_printf 1022         __size_ofi2___lwdiv 0052         __size_ofi2___lwmod 0042  
          __initialization 195C         __size_ofi2_lcdInst 000C               __end_of_main 063A  
             __end_of_keys FE58                 i2printf@ap 0018         __size_ofi2_readADC 0014  
       __size_ofi2_isdigit 001E                     ??_main 00B0              __activetblptr 000002  
        ?_I2C_Master_Start 0001          ?_I2C_Master_Write 0036         ??_I2C_Master_Start 0036  
                   _ADCON0 000FC2                     _ADCON1 000FC1         ??_I2C_Master_Write 0038  
                   _ADCON2 000FC0                     _ADRESH 000FC4                     _ADRESL 000FC3  
         ___awdiv@dividend 0035            i2lcdNibble@data 0002                     ?_putch 0001  
          i2lcdNibble@temp 0001                     _INT1IE 007F83                     _INT1IF 007F80  
                   i2l3000 0F2C                     i2l3002 0F34                     i2l3010 0F5A  
                   i2l3012 0F60                     i2l3020 0FEA                     i2l3014 0FA4  
                   i2l3022 0FFA                     i2l3006 0F48                     i2l3024 1000  
                   i2l3026 1008                     i2l2610 17B6                     i2l2602 179E  
                   i2l3420 144C                     i2l2622 1B3A                     i2l2542 15EE  
                   i2l2606 17A8                     i2l2632 1884                     i2l3440 149A  
                   i2l3432 1478                     i2l3424 145C                     i2l2634 188C  
                   i2l2554 1614                     i2l2570 1646                     i2l3442 14A0  
                   i2l2644 18AC                     i2l2636 1890                     i2l2660 1A58  
                   i2l2652 1A38                     i2l2900 0D20                     i2l2556 161C  
                   i2l2548 15FE                     i2l2654 1A40                     i2l2910 0D44  
                   i2l2574 1654                     i2l2566 163C                     i2l2558 1620  
                   i2l2590 1770                     i2l3710 0AB0                     i2l2656 1A44  
                   i2l2904 0D30                     i2l3448 14BA                     i2l3720 0AC8  
                   i2l2906 0D3E                     i2l2594 177E                     i2l2586 1764  
                   i2l3810 0C02                     i2l3802 0BEC                     i2l2940 0E30  
                   i2l2924 0DD0                     i2l2916 0D72                     i2l2596 1786  
                   i2l3820 0C24                     i2l3716 0AC0                     i2l3740 0B14  
                   i2l2598 178A                     i2l3806 0BF8                     i2l3822 0C26  
                   i2l2960 0E7E                     i2l2944 0E4A                     i2l2928 0DD4  
                   i2l3840 0C5C                     i2l3832 0C44                     i2l3816 0C18  
                   i2l3760 0B58                     i2l3728 0AD6                     i2l2946 0E4E  
                   i2l3850 0C7E                     i2l3762 0B72                     i2l3738 0B10  
                   i2l3836 0C50                     i2l3828 0C38                     i2l3852 0C80  
                   i2l3780 0BA8                     i2l3772 0B90                     i2l3684 0A32  
                   i2l2982 0ED4                     i2l2958 0E7A                     i2l2974 0EAA  
                   i2l3870 0CB6                     i2l3862 0CA0                     i2l3846 0C72  
                   i2l3790 0BCA                     i2l2976 0EBA                     i2l3880 0CD8  
                   i2l3776 0B9C                     i2l3768 0B84                     i2l3792 0BCC  
                   i2l2994 0F16                     i2l2986 0EF8                     i2l3866 0CAC  
                   i2l3858 0C94                     i2l3786 0BBE                     i2l2988 0F00  
                   i2l3876 0CCC                     i2l3798 0BE0                     _TMR0IE 007F95  
                   _TMR0IF 007F92                  ??i2_putch 0003                     _TMR1IE 007CE8  
                   _TMR1IF 007CF0                     _SSPADD 000FC8                     _TRISC3 007CA3  
                   _TRISC4 007CA4                     _SSPBUF 000FC9             _turn1BackRight 009A  
           __CFG_XINST$OFF 000000              _stopOperation 1256             _turn2BackRight 009C  
     __size_of_isFluctuate 0096                     ___wmul 1A94                  ??___awdiv 0039  
           __CFG_STVREN$ON 000000                  ??___awmod 0039                  ??___lldiv 003D  
                ??___lwdiv 0039                  ??___lwmod 0040                     _countC 008B  
                   clear_0 1986           ___awdiv@quotient 003B            ___awmod@divisor 0037  
          ___awmod@counter 0039                  ??_lcdInst 0037                     _printf 063A  
           i2___awdiv@sign 0006                  ??_readADC 0035                  ??_initLCD 0038  
 __size_ofi2_stopOperation 00E2               __pdataCOMRAM 004A                  ??_isdigit 0035  
        __end_ofi2___awdiv 165E          __end_ofi2___awmod 17C0          __end_ofi2___lwdiv 18C0  
             __mediumconst FE46          __end_ofi2___lwmod 1A6C                     tblptrh 000FF7  
                   tblptrl 000FF6                     tblptru 000FF8            switchMenu@right 0021  
           i2___awmod@sign 0006          __end_ofi2_lcdInst 1BAC          __end_ofi2_readADC 1B6A  
        __end_ofi2_isdigit 1B42                 __accesstop 0080    __end_of__initialization 1994  
            ___rparam_used 000001             ?_stopOperation 0001         i2___lwmod@dividend 0008  
           __pcstackCOMRAM 0001               __pidataBANK0 1BC7              __end_of_putch 1B88  
              i2printf@idx 0017                i2printf@val 001B                  ?i2___wmul 0001  
       __size_of_lcdNibble 004E                i2putch@data 0003                ISR@keypress 0034  
                ?i2_printf 000D                    ??_putch 0037                 __pbssBANK0 0080  
    __end_of_testBatteries 1256               ?i2_lcdNibble 0001                    ?___wmul 0035  
                  ?_printf 009E                 ??i2___wmul 0005                 ??i2_printf 0013  
                  _SSPCON1 000FC6                    _SSPCON2 000FC5          ??i2_stopOperation 0009  
                  _SSPSTAT 000FC7                    i2_putch 1B94                 _countDrain 008C  
          ??_stopOperation 003D          __end_of_lcdNibble 190E                    __Hparam 0000  
                  __Lparam 0000                    ___awdiv 1556                    ___awmod 16E0  
                  ___lldiv 165E            __size_of___wmul 0026                    ___lwdiv 181C  
                  ___lwmod 19E8                    __pcinit 195C                 _plat1Right 0095  
                  __ramtop 1000                 _plat2Right 0097                    _lcdInst 1B88  
                  __ptext0 0012                    __ptext1 1022                    __ptext2 1256  
                  __ptext3 16E0                    __ptext4 1556                    __ptext5 063A  
                  __ptext6 1B7C                    __ptext7 1B06                    __ptext8 1A94  
                  __ptext9 19E8            __size_of_printf 0390                  _T0CONbits 000FD5  
                  _countAA 008A                    _count9V 0089                    _readADC 1B42  
                  _initLCD 19A2               __size_of_ISR 0D0E          __end_of_hexpowers FE6A  
                _T1CONbits 000FCD              i2_isdigit$932 0002                    _dpowers FE58  
             __size_of_abs 0028                    _isdigit 1B06                    _opTimer 0047  
         ___awmod@dividend 0035                    _numBats 0091   __size_of_I2C_Master_Init 005C  
 __size_of_I2C_Master_Read 0026   __size_of_I2C_Master_Wait 0012   __size_of_I2C_Master_Stop 0008  
           __pintcode_body 09CA       end_of_initialization 1994              __Lmediumconst FE46  
                  int_func 09CA        i2___wmul@multiplier 0001                 _screenMode 00B7  
__size_of_I2C_Master_Start 0008  __size_of_I2C_Master_Write 000A            ___lldiv@divisor 0039  
          ___lldiv@counter 0041                    printf@c 00AF                    printf@f 009E  
         I2C_Master_Init@c 0042           I2C_Master_Read@a 0036                    postdec2 000FDD  
               _solOnTimer 004A                    postinc0 000FEE                    postinc2 000FDE  
                i2___awdiv 15DA                  i2___awmod 1750          i2___lwdiv@divisor 0003  
                i2___lwdiv 186E                  i2___lwmod 1A2A          i2___lwdiv@counter 0007  
                i2_lcdInst 1BA0                printf@width 00AD                  i2_readADC 1B56  
       i2___awdiv@dividend 0001              ??_isFluctuate 003B                  i2_isdigit 1B24  
               _switchMenu 141A             __end_of___wmul 1ABA       __size_ofi2_lcdNibble 004E  
            __pidataCOMRAM 1BC6              i2lcdInst@data 0003           i2___wmul@product 0005  
           __end_of_printf 09CA               i2printf@flag 001D               i2printf@prec 001A  
      start_initialization 195C         i2___awdiv@quotient 0007                __end_of_ISR 0D16  
        __size_ofi2___wmul 0026                __end_of_abs 1A94                  i2printf@c 0020  
                i2printf@f 000D                 ?i2___awdiv 0001                 ?i2___awmod 0001  
               ?i2___lwdiv 0001                 ?i2___lwmod 0008          __size_ofi2_printf 030C  
        ??_I2C_Master_Init 009E          ??_I2C_Master_Read 0036          ??_I2C_Master_Wait 0035  
               ?i2_lcdInst 0001          ??_I2C_Master_Stop 0036                 ?i2_readADC 0001  
               ?i2_isdigit 0001                   ??___wmul 0039        __end_of_isFluctuate 1556  
              __pdataBANK0 00B7           __CFG_LPT1OSC$OFF 000000             switchMenu@left 0023  
          i2_stopOperation 1338                   ??_printf 0041                __pbssCOMRAM 0046  
            __pcstackBANK0 009E          i2___lwmod@divisor 000A          i2___lwmod@counter 000C  
                 ?i2_putch 0001           i2readADC@channel 0001           _I2C_Master_Start 1BBE  
         _I2C_Master_Write 1BAC           ___lwdiv@dividend 0035          __CFG_CCP2MX$PORTC 000000  
              ?_switchMenu 0021     isFluctuate@tempVoltage 003F                  __pintcode 0008  
            __pmediumconst FE46                  _lcdNibble 18C0                   ?___awdiv 0035  
                 ?___awmod 0035                   ?___lldiv 0035                   ?___lwdiv 0035  
                 ?___lwmod 003C                  _doneTimer 0046                   ?_lcdInst 0001  
                 ?_readADC 0001                   ?_initLCD 0001     __size_of_testBatteries 0234  
                 ?_isdigit 0001                  _hexpowers FE62           ___lwdiv@quotient 0039  
              ??i2___awdiv 0005                ??i2___awmod 0005                  _plat1Left 0094  
                _plat2Left 0096                ??i2___lwdiv 0005                ??i2___lwmod 000C  
           __size_of_putch 000C                ??i2_lcdInst 0003             ___wmul@product 0039  
                 _LATAbits 000F89                   _LATBbits 000F8A                   _LATCbits 000F8B  
                 _LATDbits 000F8C                   _LATEbits 000F8D                ??i2_readADC 0001  
              ??i2_isdigit 0001                _isFluctuate 14C0      __end_of_stopOperation 1338  
                 i2u370_48 0B64                   i2u363_40 0B00                   i2u470_47 194E  
                 i2u471_47 1956                   i2u369_40 0B62                _doneSorting 008D  
                 i2u468_47 1926                   i2u469_47 192E    __end_ofi2_stopOperation 141A  
                _waitMotor 009D           __CFG_WDTPS$32768 000000                 ?_lcdNibble 0001  
               _ADCON0bits 000FC2                  main@i_632 00B6                  main@i_579 00B5  
        ___wmul@multiplier 0035                   i2___wmul 1AE0              lcdNibble@data 0036  
               printf@flag 00AC              lcdNibble@temp 0035                 printf@prec 00A9  
        i2___awdiv@divisor 0003          i2___awdiv@counter 0005                   i2_printf 0D16  
      __size_of_switchMenu 00A6        I2C_Master_Read@temp 0037         i2___awmod@dividend 0001  
         __size_ofi2_putch 000C              _testBatteries 1022                   __Hrparam 0000  
                 __Lrparam 0000         __CFG_BOREN$SBORDIS 000000              switchMenu@key 0022  
         __size_of___awdiv 0084           __size_of___awmod 0070      i2___wmul@multiplicand 0003  
         __size_of___lldiv 0082           __size_of___lwdiv 0052           __size_of___lwmod 0042  
           readADC@channel 0035                _isdigit$932 0036           __size_of_lcdInst 000C  
          _I2C_Master_Init 17C0           __size_of_readADC 0014            _I2C_Master_Read 1ABA  
         __size_of_initLCD 0046            _I2C_Master_Wait 1B6A            _I2C_Master_Stop 1BB6  
         __size_of_isdigit 001E            ___lwdiv@divisor 0037         isFluctuate@channel 0041  
          ___lwdiv@counter 003B                   __ptext10 181C                   __ptext11 14C0  
                 __ptext20 1ABA                   __ptext12 1B42                   __ptext21 1B6A  
                 __ptext13 1A6C                   __ptext30 0D16                   __ptext22 17C0  
                 __ptext14 19A2                   __ptext31 1B94                   __ptext23 165E  
                 __ptext15 1B88                   __ptext32 1B24                   __ptext16 18C0  
                 __ptext33 1AE0                   __ptext25 1B56                   __ptext17 1BAC  
                 __ptext34 1A2A                   __ptext26 141A                   __ptext18 1BB6  
                 __ptext35 186E                   __ptext27 1338                   __ptext19 1BBE  
                 __ptext36 1BA0                   __ptext28 1750                   __ptext37 190E  
                 __ptext29 15DA              __size_of_main 0628             ?_testBatteries 0001  
                 _numDrain 0093           ?i2_stopOperation 0001              ??i2_lcdNibble 0001  
              ??_lcdNibble 0035                   int$flags 004B                   _stepGear 0087  
                printf@idx 00A6                  printf@val 00AA          i2___awmod@divisor 0003  
                putch@data 0037          i2___awmod@counter 0005   __end_of_I2C_Master_Start 1BC6  
 __end_of_I2C_Master_Write 1BB6                 _INTCONbits 000FF2                   isdigit@c 0037  
                 intlevel2 0000           ___lwmod@dividend 003C           ___lldiv@dividend 0035  
             ??_switchMenu 0023                   printf@ap 00A7    __end_of_I2C_Master_Init 181C  
  __end_of_I2C_Master_Read 1AE0    __end_of_I2C_Master_Wait 1B7C    __end_of_I2C_Master_Stop 1BBE  
              lcdInst@data 0037        __end_ofi2_lcdNibble 195C           ___lldiv@quotient 003D  
        I2C_Master_Write@d 0036            ___lwmod@divisor 003E            ___lwmod@counter 0040  
       __end_of_switchMenu 14C0            ??_testBatteries 0035               ?_isFluctuate 0039  
