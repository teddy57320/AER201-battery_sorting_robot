

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Tue Apr 11 20:38:22 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    49                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    71                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    72                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    73  0000                     
    74                           ; Version 1.40
    75                           ; Generated 01/12/2016 GMT
    76                           ; 
    77                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    78                           ; All rights reserved.
    79                           ; 
    80                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    81                           ; 
    82                           ; Redistribution and use in source and binary forms, with or without modification, are
    83                           ; permitted provided that the following conditions are met:
    84                           ; 
    85                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    86                           ;        conditions and the following disclaimer.
    87                           ; 
    88                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    89                           ;        of conditions and the following disclaimer in the documentation and/or other
    90                           ;        materials provided with the distribution.
    91                           ; 
    92                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    93                           ;        software without specific prior written permission.
    94                           ; 
    95                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    96                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    97                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    98                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    99                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   100                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   101                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   102                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   103                           ; 
   104                           ; 
   105                           ; Code-generator required, PIC18F4620 Definitions
   106                           ; 
   107                           ; SFR Addresses
   108  0000                     
   109                           	psect	idataCOMRAM
   110  003788                     __pidataCOMRAM:
   111                           	opt stack 0
   112                           
   113                           ;initializer for logPC@F3226
   114  003788  20                 	db	32
   115  003789  20                 	db	32
   116  00378A  2F                 	db	47
   117  00378B  20                 	db	32
   118  00378C  20                 	db	32
   119  00378D  2F                 	db	47
   120  00378E  20                 	db	32
   121  00378F  20                 	db	32
   122  003790  20                 	db	32
   123  003791  20                 	db	32
   124  003792  20                 	db	32
   125  003793  3A                 	db	58
   126  003794  20                 	db	32
   127  003795  20                 	db	32
   128  003796  3A                 	db	58
   129  003797  20                 	db	32
   130  003798  20                 	db	32
   131  003799  00                 	db	0
   132  00379A  00                 	db	0
   133                           
   134                           	psect	idataBANK0
   135  0037CE                     __pidataBANK0:
   136                           	opt stack 0
   137                           
   138                           ;initializer for logPC@F3250
   139  0037CE  20                 	db	32
   140  0037CF  20                 	db	32
   141  0037D0  20                 	db	32
   142                           
   143                           ;initializer for logPC@F3230
   144  0037D1  20                 	db	32
   145  0037D2  20                 	db	32
   146                           
   147                           ;initializer for logPC@F3234
   148  0037D3  20                 	db	32
   149  0037D4  20                 	db	32
   150                           
   151                           ;initializer for logPC@F3238
   152  0037D5  20                 	db	32
   153  0037D6  20                 	db	32
   154                           
   155                           ;initializer for logPC@F3242
   156  0037D7  20                 	db	32
   157  0037D8  20                 	db	32
   158                           
   159                           ;initializer for logPC@F3246
   160  0037D9  20                 	db	32
   161  0037DA  20                 	db	32
   162                           
   163                           ;initializer for _screenMode
   164  0037DB  02                 	db	2
   165                           
   166                           	psect	mediumconst
   167  00FC9E                     __pmediumconst:
   168                           	opt stack 0
   169  00FC9E  00                 	db	0
   170  00FC9F                     _drainHeader:
   171                           	opt stack 0
   172  00FC9F  4E                 	db	78
   173  00FCA0  75                 	db	117
   174  00FCA1  6D                 	db	109
   175  00FCA2  62                 	db	98
   176  00FCA3  65                 	db	101
   177  00FCA4  72                 	db	114
   178  00FCA5  20                 	db	32
   179  00FCA6  6F                 	db	111
   180  00FCA7  66                 	db	102
   181  00FCA8  20                 	db	32
   182  00FCA9  64                 	db	100
   183  00FCAA  72                 	db	114
   184  00FCAB  61                 	db	97
   185  00FCAC  69                 	db	105
   186  00FCAD  6E                 	db	110
   187  00FCAE  65                 	db	101
   188  00FCAF  64                 	db	100
   189  00FCB0  20                 	db	32
   190  00FCB1  62                 	db	98
   191  00FCB2  61                 	db	97
   192  00FCB3  74                 	db	116
   193  00FCB4  74                 	db	116
   194  00FCB5  65                 	db	101
   195  00FCB6  72                 	db	114
   196  00FCB7  69                 	db	105
   197  00FCB8  65                 	db	101
   198  00FCB9  73                 	db	115
   199  00FCBA  20                 	db	32
   200  00FCBB  73                 	db	115
   201  00FCBC  6F                 	db	111
   202  00FCBD  72                 	db	114
   203  00FCBE  74                 	db	116
   204  00FCBF  65                 	db	101
   205  00FCC0  64                 	db	100
   206  00FCC1  3A                 	db	58
   207  00FCC2  20                 	db	32
   208  00FCC3  00                 	db	0
   209  00FCC4                     __end_of_drainHeader:
   210                           	opt stack 0
   211  00FCC4                     _totalHeader:
   212                           	opt stack 0
   213  00FCC4  54                 	db	84
   214  00FCC5  6F                 	db	111
   215  00FCC6  74                 	db	116
   216  00FCC7  61                 	db	97
   217  00FCC8  6C                 	db	108
   218  00FCC9  20                 	db	32
   219  00FCCA  6E                 	db	110
   220  00FCCB  75                 	db	117
   221  00FCCC  6D                 	db	109
   222  00FCCD  62                 	db	98
   223  00FCCE  65                 	db	101
   224  00FCCF  72                 	db	114
   225  00FCD0  20                 	db	32
   226  00FCD1  6F                 	db	111
   227  00FCD2  66                 	db	102
   228  00FCD3  20                 	db	32
   229  00FCD4  62                 	db	98
   230  00FCD5  61                 	db	97
   231  00FCD6  74                 	db	116
   232  00FCD7  74                 	db	116
   233  00FCD8  65                 	db	101
   234  00FCD9  72                 	db	114
   235  00FCDA  69                 	db	105
   236  00FCDB  65                 	db	101
   237  00FCDC  73                 	db	115
   238  00FCDD  20                 	db	32
   239  00FCDE  73                 	db	115
   240  00FCDF  6F                 	db	111
   241  00FCE0  72                 	db	114
   242  00FCE1  74                 	db	116
   243  00FCE2  65                 	db	101
   244  00FCE3  64                 	db	100
   245  00FCE4  3A                 	db	58
   246  00FCE5  20                 	db	32
   247  00FCE6  00                 	db	0
   248  00FCE7                     __end_of_totalHeader:
   249                           	opt stack 0
   250  00FCE7                     _runTimeHeader:
   251                           	opt stack 0
   252  00FCE7  53                 	db	83
   253  00FCE8  65                 	db	101
   254  00FCE9  63                 	db	99
   255  00FCEA  6F                 	db	111
   256  00FCEB  6E                 	db	110
   257  00FCEC  64                 	db	100
   258  00FCED  73                 	db	115
   259  00FCEE  20                 	db	32
   260  00FCEF  74                 	db	116
   261  00FCF0  68                 	db	104
   262  00FCF1  65                 	db	101
   263  00FCF2  20                 	db	32
   264  00FCF3  73                 	db	115
   265  00FCF4  6F                 	db	111
   266  00FCF5  72                 	db	114
   267  00FCF6  74                 	db	116
   268  00FCF7  69                 	db	105
   269  00FCF8  6E                 	db	110
   270  00FCF9  67                 	db	103
   271  00FCFA  20                 	db	32
   272  00FCFB  6C                 	db	108
   273  00FCFC  61                 	db	97
   274  00FCFD  73                 	db	115
   275  00FCFE  74                 	db	116
   276  00FCFF  65                 	db	101
   277  00FD00  64                 	db	100
   278  00FD01  20                 	db	32
   279  00FD02  66                 	db	102
   280  00FD03  6F                 	db	111
   281  00FD04  72                 	db	114
   282  00FD05  3A                 	db	58
   283  00FD06  20                 	db	32
   284  00FD07  00                 	db	0
   285  00FD08                     __end_of_runTimeHeader:
   286                           	opt stack 0
   287  00FD08                     _AAHeader:
   288                           	opt stack 0
   289  00FD08  4E                 	db	78
   290  00FD09  75                 	db	117
   291  00FD0A  6D                 	db	109
   292  00FD0B  62                 	db	98
   293  00FD0C  65                 	db	101
   294  00FD0D  72                 	db	114
   295  00FD0E  20                 	db	32
   296  00FD0F  6F                 	db	111
   297  00FD10  66                 	db	102
   298  00FD11  20                 	db	32
   299  00FD12  41                 	db	65
   300  00FD13  41                 	db	65
   301  00FD14  20                 	db	32
   302  00FD15  62                 	db	98
   303  00FD16  61                 	db	97
   304  00FD17  74                 	db	116
   305  00FD18  74                 	db	116
   306  00FD19  65                 	db	101
   307  00FD1A  72                 	db	114
   308  00FD1B  69                 	db	105
   309  00FD1C  65                 	db	101
   310  00FD1D  73                 	db	115
   311  00FD1E  20                 	db	32
   312  00FD1F  73                 	db	115
   313  00FD20  6F                 	db	111
   314  00FD21  72                 	db	114
   315  00FD22  74                 	db	116
   316  00FD23  65                 	db	101
   317  00FD24  64                 	db	100
   318  00FD25  3A                 	db	58
   319  00FD26  20                 	db	32
   320  00FD27  00                 	db	0
   321  00FD28                     __end_of_AAHeader:
   322                           	opt stack 0
   323  00FD28                     _nineVHeader:
   324                           	opt stack 0
   325  00FD28  4E                 	db	78
   326  00FD29  75                 	db	117
   327  00FD2A  6D                 	db	109
   328  00FD2B  62                 	db	98
   329  00FD2C  65                 	db	101
   330  00FD2D  72                 	db	114
   331  00FD2E  20                 	db	32
   332  00FD2F  6F                 	db	111
   333  00FD30  66                 	db	102
   334  00FD31  20                 	db	32
   335  00FD32  39                 	db	57
   336  00FD33  56                 	db	86
   337  00FD34  20                 	db	32
   338  00FD35  62                 	db	98
   339  00FD36  61                 	db	97
   340  00FD37  74                 	db	116
   341  00FD38  74                 	db	116
   342  00FD39  65                 	db	101
   343  00FD3A  72                 	db	114
   344  00FD3B  69                 	db	105
   345  00FD3C  65                 	db	101
   346  00FD3D  73                 	db	115
   347  00FD3E  20                 	db	32
   348  00FD3F  73                 	db	115
   349  00FD40  6F                 	db	111
   350  00FD41  72                 	db	114
   351  00FD42  74                 	db	116
   352  00FD43  65                 	db	101
   353  00FD44  64                 	db	100
   354  00FD45  3A                 	db	58
   355  00FD46  20                 	db	32
   356  00FD47  00                 	db	0
   357  00FD48                     __end_of_nineVHeader:
   358                           	opt stack 0
   359  00FD48                     _timeHeader:
   360                           	opt stack 0
   361  00FD48  54                 	db	84
   362  00FD49  69                 	db	105
   363  00FD4A  6D                 	db	109
   364  00FD4B  65                 	db	101
   365  00FD4C  20                 	db	32
   366  00FD4D  61                 	db	97
   367  00FD4E  6E                 	db	110
   368  00FD4F  64                 	db	100
   369  00FD50  20                 	db	32
   370  00FD51  64                 	db	100
   371  00FD52  61                 	db	97
   372  00FD53  74                 	db	116
   373  00FD54  65                 	db	101
   374  00FD55  20                 	db	32
   375  00FD56  6F                 	db	111
   376  00FD57  66                 	db	102
   377  00FD58  20                 	db	32
   378  00FD59  6C                 	db	108
   379  00FD5A  61                 	db	97
   380  00FD5B  73                 	db	115
   381  00FD5C  74                 	db	116
   382  00FD5D  20                 	db	32
   383  00FD5E  73                 	db	115
   384  00FD5F  6F                 	db	111
   385  00FD60  72                 	db	114
   386  00FD61  74                 	db	116
   387  00FD62  69                 	db	105
   388  00FD63  6E                 	db	110
   389  00FD64  67                 	db	103
   390  00FD65  3A                 	db	58
   391  00FD66  20                 	db	32
   392  00FD67  00                 	db	0
   393  00FD68                     __end_of_timeHeader:
   394                           	opt stack 0
   395  00FD68                     _CHeader:
   396                           	opt stack 0
   397  00FD68  4E                 	db	78
   398  00FD69  75                 	db	117
   399  00FD6A  6D                 	db	109
   400  00FD6B  62                 	db	98
   401  00FD6C  65                 	db	101
   402  00FD6D  72                 	db	114
   403  00FD6E  20                 	db	32
   404  00FD6F  6F                 	db	111
   405  00FD70  66                 	db	102
   406  00FD71  20                 	db	32
   407  00FD72  43                 	db	67
   408  00FD73  20                 	db	32
   409  00FD74  62                 	db	98
   410  00FD75  61                 	db	97
   411  00FD76  74                 	db	116
   412  00FD77  74                 	db	116
   413  00FD78  65                 	db	101
   414  00FD79  72                 	db	114
   415  00FD7A  69                 	db	105
   416  00FD7B  65                 	db	101
   417  00FD7C  73                 	db	115
   418  00FD7D  20                 	db	32
   419  00FD7E  73                 	db	115
   420  00FD7F  6F                 	db	111
   421  00FD80  72                 	db	114
   422  00FD81  74                 	db	116
   423  00FD82  65                 	db	101
   424  00FD83  64                 	db	100
   425  00FD84  3A                 	db	58
   426  00FD85  20                 	db	32
   427  00FD86  00                 	db	0
   428  00FD87                     __end_of_CHeader:
   429                           	opt stack 0
   430  00FD87                     _keys:
   431                           	opt stack 0
   432  00FD87  31                 	db	49
   433  00FD88  32                 	db	50
   434  00FD89  33                 	db	51
   435  00FD8A  41                 	db	65
   436  00FD8B  34                 	db	52
   437  00FD8C  35                 	db	53
   438  00FD8D  36                 	db	54
   439  00FD8E  42                 	db	66
   440  00FD8F  37                 	db	55
   441  00FD90  38                 	db	56
   442  00FD91  39                 	db	57
   443  00FD92  43                 	db	67
   444  00FD93  2A                 	db	42
   445  00FD94  30                 	db	48
   446  00FD95  23                 	db	35
   447  00FD96  44                 	db	68
   448  00FD97  00                 	db	0
   449  00FD98                     __end_of_keys:
   450                           	opt stack 0
   451  00FD98                     _dpowers:
   452                           	opt stack 0
   453  00FD98  0001               	dw	1
   454  00FD9A  000A               	dw	10
   455  00FD9C  0064               	dw	100
   456  00FD9E  03E8               	dw	1000
   457  00FDA0  2710               	dw	10000
   458  00FDA2                     __end_of_dpowers:
   459                           	opt stack 0
   460  00FDA2                     _hexpowers:
   461                           	opt stack 0
   462  00FDA2  0001               	dw	1
   463  00FDA4  0010               	dw	16
   464  00FDA6  0100               	dw	256
   465  00FDA8  1000               	dw	4096
   466  00FDAA                     __end_of_hexpowers:
   467                           	opt stack 0
   468  0000                     _ADRES	set	4035
   469  0000                     _TMR0	set	4054
   470  0000                     _TMR1	set	4046
   471  0000                     _ADCON0	set	4034
   472  0000                     _ADCON0bits	set	4034
   473  0000                     _ADCON1	set	4033
   474  0000                     _ADCON2	set	4032
   475  0000                     _CMCONbits	set	4020
   476  0000                     _CVRCON	set	4021
   477  0000                     _EEADR	set	4009
   478  0000                     _EEADRH	set	4010
   479  0000                     _EECON1bits	set	4006
   480  0000                     _EECON2	set	4007
   481  0000                     _EEDATA	set	4008
   482  0000                     _INTCONbits	set	4082
   483  0000                     _LATA	set	3977
   484  0000                     _LATAbits	set	3977
   485  0000                     _LATB	set	3978
   486  0000                     _LATBbits	set	3978
   487  0000                     _LATC	set	3979
   488  0000                     _LATCbits	set	3979
   489  0000                     _LATD	set	3980
   490  0000                     _LATDbits	set	3980
   491  0000                     _LATE	set	3981
   492  0000                     _LATEbits	set	3981
   493  0000                     _PIR2bits	set	4001
   494  0000                     _PORTB	set	3969
   495  0000                     _SSPADD	set	4040
   496  0000                     _SSPBUF	set	4041
   497  0000                     _SSPCON1	set	4038
   498  0000                     _SSPCON2	set	4037
   499  0000                     _SSPSTAT	set	4039
   500  0000                     _T0CON	set	4053
   501  0000                     _T0CONbits	set	4053
   502  0000                     _T1CON	set	4045
   503  0000                     _T1CONbits	set	4045
   504  0000                     _T2CON	set	4042
   505  0000                     _T2CONbits	set	4042
   506  0000                     _TMR2	set	4044
   507  0000                     _TRISA	set	3986
   508  0000                     _TRISB	set	3987
   509  0000                     _TRISC	set	3988
   510  0000                     _TRISD	set	3989
   511  0000                     _TRISE	set	3990
   512  0000                     _ACKDT	set	32301
   513  0000                     _ACKEN	set	32300
   514  0000                     _GIE	set	32663
   515  0000                     _INT1IE	set	32643
   516  0000                     _INT1IF	set	32640
   517  0000                     _PEIE	set	32662
   518  0000                     _PEN	set	32298
   519  0000                     _RCEN	set	32299
   520  0000                     _SEN	set	32296
   521  0000                     _TMR0IE	set	32661
   522  0000                     _TMR0IF	set	32658
   523  0000                     _TMR1IE	set	31976
   524  0000                     _TMR1IF	set	31984
   525  0000                     _TMR2IE	set	31977
   526  0000                     _TMR2IF	set	31985
   527  0000                     _TMR2ON	set	32338
   528  0000                     _TRISC3	set	31907
   529  0000                     _TRISC4	set	31908
   530  0000                     _nRBPU	set	32655
   531  00FDAA                     STR_8:
   532  00FDAA  25                 	db	37
   533  00FDAB  30                 	db	48	;'0'
   534  00FDAC  32                 	db	50	;'2'
   535  00FDAD  64                 	db	100	;'d'
   536  00FDAE  3A                 	db	58	;':'
   537  00FDAF  25                 	db	37
   538  00FDB0  30                 	db	48	;'0'
   539  00FDB1  32                 	db	50	;'2'
   540  00FDB2  64                 	db	100	;'d'
   541  00FDB3  20                 	db	32
   542  00FDB4  20                 	db	32
   543  00FDB5  20                 	db	32
   544  00FDB6  20                 	db	32
   545  00FDB7  20                 	db	32
   546  00FDB8  20                 	db	32
   547  00FDB9  20                 	db	32
   548  00FDBA  20                 	db	32
   549  00FDBB  20                 	db	32
   550  00FDBC  20                 	db	32
   551  00FDBD  20                 	db	32
   552  00FDBE  20                 	db	32
   553  00FDBF  20                 	db	32
   554  00FDC0  20                 	db	32
   555  00FDC1  20                 	db	32
   556  00FDC2  00                 	db	0
   557  00FDC3                     STR_20:
   558  00FDC3  25                 	db	37
   559  00FDC4  30                 	db	48	;'0'
   560  00FDC5  32                 	db	50	;'2'
   561  00FDC6  78                 	db	120	;'x'
   562  00FDC7  2F                 	db	47
   563  00FDC8  25                 	db	37
   564  00FDC9  30                 	db	48	;'0'
   565  00FDCA  32                 	db	50	;'2'
   566  00FDCB  78                 	db	120	;'x'
   567  00FDCC  2F                 	db	47
   568  00FDCD  25                 	db	37
   569  00FDCE  30                 	db	48	;'0'
   570  00FDCF  32                 	db	50	;'2'
   571  00FDD0  78                 	db	120	;'x'
   572  00FDD1  20                 	db	32
   573  00FDD2  20                 	db	32
   574  00FDD3  20                 	db	32
   575  00FDD4  20                 	db	32
   576  00FDD5  20                 	db	32
   577  00FDD6  20                 	db	32
   578  00FDD7  20                 	db	32
   579  00FDD8  20                 	db	32
   580  00FDD9  00                 	db	0
   581  00FDDA                     STR_21:
   582  00FDDA  25                 	db	37
   583  00FDDB  30                 	db	48	;'0'
   584  00FDDC  32                 	db	50	;'2'
   585  00FDDD  78                 	db	120	;'x'
   586  00FDDE  3A                 	db	58	;':'
   587  00FDDF  25                 	db	37
   588  00FDE0  30                 	db	48	;'0'
   589  00FDE1  32                 	db	50	;'2'
   590  00FDE2  78                 	db	120	;'x'
   591  00FDE3  3A                 	db	58	;':'
   592  00FDE4  25                 	db	37
   593  00FDE5  30                 	db	48	;'0'
   594  00FDE6  32                 	db	50	;'2'
   595  00FDE7  78                 	db	120	;'x'
   596  00FDE8  20                 	db	32
   597  00FDE9  20                 	db	32
   598  00FDEA  20                 	db	32
   599  00FDEB  20                 	db	32
   600  00FDEC  20                 	db	32
   601  00FDED  20                 	db	32
   602  00FDEE  20                 	db	32
   603  00FDEF  20                 	db	32
   604  00FDF0  00                 	db	0
   605  00FDF1                     STR_32:
   606  00FDF1  44                 	db	68	;'D'
   607  00FDF2  41                 	db	65	;'A'
   608  00FDF3  54                 	db	84	;'T'
   609  00FDF4  45                 	db	69	;'E'
   610  00FDF5  3A                 	db	58	;':'
   611  00FDF6  20                 	db	32
   612  00FDF7  25                 	db	37
   613  00FDF8  30                 	db	48	;'0'
   614  00FDF9  32                 	db	50	;'2'
   615  00FDFA  78                 	db	120	;'x'
   616  00FDFB  2F                 	db	47
   617  00FDFC  25                 	db	37
   618  00FDFD  30                 	db	48	;'0'
   619  00FDFE  32                 	db	50	;'2'
   620  00FDFF  78                 	db	120	;'x'
   621  00FE00  2F                 	db	47
   622  00FE01  25                 	db	37
   623  00FE02  30                 	db	48	;'0'
   624  00FE03  32                 	db	50	;'2'
   625  00FE04  78                 	db	120	;'x'
   626  00FE05  20                 	db	32
   627  00FE06  20                 	db	32
   628  00FE07  00                 	db	0
   629  00FE08                     STR_33:
   630  00FE08  54                 	db	84	;'T'
   631  00FE09  49                 	db	73	;'I'
   632  00FE0A  4D                 	db	77	;'M'
   633  00FE0B  45                 	db	69	;'E'
   634  00FE0C  3A                 	db	58	;':'
   635  00FE0D  20                 	db	32
   636  00FE0E  25                 	db	37
   637  00FE0F  30                 	db	48	;'0'
   638  00FE10  32                 	db	50	;'2'
   639  00FE11  78                 	db	120	;'x'
   640  00FE12  3A                 	db	58	;':'
   641  00FE13  25                 	db	37
   642  00FE14  30                 	db	48	;'0'
   643  00FE15  32                 	db	50	;'2'
   644  00FE16  78                 	db	120	;'x'
   645  00FE17  3A                 	db	58	;':'
   646  00FE18  25                 	db	37
   647  00FE19  30                 	db	48	;'0'
   648  00FE1A  32                 	db	50	;'2'
   649  00FE1B  78                 	db	120	;'x'
   650  00FE1C  20                 	db	32
   651  00FE1D  20                 	db	32
   652  00FE1E  00                 	db	0
   653  00FE1F                     STR_37:
   654  00FE1F  41                 	db	65	;'A'
   655  00FE20  41                 	db	65	;'A'
   656  00FE21  3A                 	db	58	;':'
   657  00FE22  25                 	db	37
   658  00FE23  30                 	db	48	;'0'
   659  00FE24  32                 	db	50	;'2'
   660  00FE25  64                 	db	100	;'d'
   661  00FE26  20                 	db	32
   662  00FE27  43                 	db	67	;'C'
   663  00FE28  3A                 	db	58	;':'
   664  00FE29  25                 	db	37
   665  00FE2A  30                 	db	48	;'0'
   666  00FE2B  32                 	db	50	;'2'
   667  00FE2C  64                 	db	100	;'d'
   668  00FE2D  20                 	db	32
   669  00FE2E  39                 	db	57	;'9'
   670  00FE2F  56                 	db	86	;'V'
   671  00FE30  3A                 	db	58	;':'
   672  00FE31  25                 	db	37
   673  00FE32  30                 	db	48	;'0'
   674  00FE33  32                 	db	50	;'2'
   675  00FE34  64                 	db	100	;'d'
   676  00FE35  00                 	db	0
   677  00FE36                     STR_39:
   678  00FE36  52                 	db	82	;'R'
   679  00FE37  55                 	db	85	;'U'
   680  00FE38  4E                 	db	78	;'N'
   681  00FE39  4E                 	db	78	;'N'
   682  00FE3A  49                 	db	73	;'I'
   683  00FE3B  4E                 	db	78	;'N'
   684  00FE3C  47                 	db	71	;'G'
   685  00FE3D  3A                 	db	58	;':'
   686  00FE3E  20                 	db	32
   687  00FE3F  25                 	db	37
   688  00FE40  30                 	db	48	;'0'
   689  00FE41  32                 	db	50	;'2'
   690  00FE42  64                 	db	100	;'d'
   691  00FE43  3A                 	db	58	;':'
   692  00FE44  25                 	db	37
   693  00FE45  30                 	db	48	;'0'
   694  00FE46  32                 	db	50	;'2'
   695  00FE47  64                 	db	100	;'d'
   696  00FE48  20                 	db	32
   697  00FE49  20                 	db	32
   698  00FE4A  20                 	db	32
   699  00FE4B  00                 	db	0
   700  00FE4C                     STR_14:
   701  00FE4C  42                 	db	66	;'B'
   702  00FE4D  41                 	db	65	;'A'
   703  00FE4E  54                 	db	84	;'T'
   704  00FE4F  54                 	db	84	;'T'
   705  00FE50  45                 	db	69	;'E'
   706  00FE51  52                 	db	82	;'R'
   707  00FE52  49                 	db	73	;'I'
   708  00FE53  45                 	db	69	;'E'
   709  00FE54  53                 	db	83	;'S'
   710  00FE55  3A                 	db	58	;':'
   711  00FE56  20                 	db	32
   712  00FE57  25                 	db	37
   713  00FE58  30                 	db	48	;'0'
   714  00FE59  32                 	db	50	;'2'
   715  00FE5A  64                 	db	100	;'d'
   716  00FE5B  20                 	db	32
   717  00FE5C  20                 	db	32
   718  00FE5D  20                 	db	32
   719  00FE5E  20                 	db	32
   720  00FE5F  20                 	db	32
   721  00FE60  00                 	db	0
   722  00FE61                     STR_38:
   723  00FE61  58                 	db	88	;'X'
   724  00FE62  3A                 	db	58	;':'
   725  00FE63  25                 	db	37
   726  00FE64  30                 	db	48	;'0'
   727  00FE65  32                 	db	50	;'2'
   728  00FE66  64                 	db	100	;'d'
   729  00FE67  20                 	db	32
   730  00FE68  54                 	db	84	;'T'
   731  00FE69  49                 	db	73	;'I'
   732  00FE6A  4D                 	db	77	;'M'
   733  00FE6B  45                 	db	69	;'E'
   734  00FE6C  3A                 	db	58	;':'
   735  00FE6D  25                 	db	37
   736  00FE6E  64                 	db	100	;'d'
   737  00FE6F  73                 	db	115	;'s'
   738  00FE70  20                 	db	32
   739  00FE71  20                 	db	32
   740  00FE72  20                 	db	32
   741  00FE73  20                 	db	32
   742  00FE74  00                 	db	0
   743  00FE75                     STR_10:
   744  00FE75  42                 	db	66	;'B'
   745  00FE76  41                 	db	65	;'A'
   746  00FE77  54                 	db	84	;'T'
   747  00FE78  54                 	db	84	;'T'
   748  00FE79  45                 	db	69	;'E'
   749  00FE7A  52                 	db	82	;'R'
   750  00FE7B  49                 	db	73	;'I'
   751  00FE7C  45                 	db	69	;'E'
   752  00FE7D  53                 	db	83	;'S'
   753  00FE7E  3A                 	db	58	;':'
   754  00FE7F  20                 	db	32
   755  00FE80  25                 	db	37
   756  00FE81  30                 	db	48	;'0'
   757  00FE82  32                 	db	50	;'2'
   758  00FE83  64                 	db	100	;'d'
   759  00FE84  20                 	db	32
   760  00FE85  20                 	db	32
   761  00FE86  20                 	db	32
   762  00FE87  00                 	db	0
   763  00FE88                     STR_40:
   764  00FE88  30                 	db	48	;'0'
   765  00FE89  31                 	db	49	;'1'
   766  00FE8A  32                 	db	50	;'2'
   767  00FE8B  33                 	db	51	;'3'
   768  00FE8C  34                 	db	52	;'4'
   769  00FE8D  35                 	db	53	;'5'
   770  00FE8E  36                 	db	54	;'6'
   771  00FE8F  37                 	db	55	;'7'
   772  00FE90  38                 	db	56	;'8'
   773  00FE91  39                 	db	57	;'9'
   774  00FE92  61                 	db	97	;'a'
   775  00FE93  62                 	db	98	;'b'
   776  00FE94  63                 	db	99	;'c'
   777  00FE95  64                 	db	100	;'d'
   778  00FE96  65                 	db	101	;'e'
   779  00FE97  66                 	db	102	;'f'
   780  00FE98  00                 	db	0
   781  00FE99                     STR_23:
   782  00FE99  20                 	db	32
   783  00FE9A  20                 	db	32
   784  00FE9B  20                 	db	32
   785  00FE9C  20                 	db	32
   786  00FE9D  20                 	db	32
   787  00FE9E  20                 	db	32
   788  00FE9F  20                 	db	32
   789  00FEA0  20                 	db	32
   790  00FEA1  20                 	db	32
   791  00FEA2  20                 	db	32
   792  00FEA3  20                 	db	32
   793  00FEA4  20                 	db	32
   794  00FEA5  20                 	db	32
   795  00FEA6  20                 	db	32
   796  00FEA7  20                 	db	32
   797  00FEA8  20                 	db	32
   798  00FEA9  00                 	db	0
   799  00FEAA                     STR_11:
   800  00FEAA  23                 	db	35
   801  00FEAB  20                 	db	32
   802  00FEAC  4F                 	db	79	;'O'
   803  00FEAD  46                 	db	70	;'F'
   804  00FEAE  20                 	db	32
   805  00FEAF  43                 	db	67	;'C'
   806  00FEB0  20                 	db	32
   807  00FEB1  20                 	db	32
   808  00FEB2  20                 	db	32
   809  00FEB3  20                 	db	32
   810  00FEB4  20                 	db	32
   811  00FEB5  20                 	db	32
   812  00FEB6  20                 	db	32
   813  00FEB7  20                 	db	32
   814  00FEB8  20                 	db	32
   815  00FEB9  20                 	db	32
   816  00FEBA  00                 	db	0
   817  00FEBB                     STR_15:
   818  00FEBB  23                 	db	35
   819  00FEBC  20                 	db	32
   820  00FEBD  4F                 	db	79	;'O'
   821  00FEBE  46                 	db	70	;'F'
   822  00FEBF  20                 	db	32
   823  00FEC0  41                 	db	65	;'A'
   824  00FEC1  41                 	db	65	;'A'
   825  00FEC2  20                 	db	32
   826  00FEC3  20                 	db	32
   827  00FEC4  20                 	db	32
   828  00FEC5  20                 	db	32
   829  00FEC6  20                 	db	32
   830  00FEC7  20                 	db	32
   831  00FEC8  20                 	db	32
   832  00FEC9  20                 	db	32
   833  00FECA  20                 	db	32
   834  00FECB  00                 	db	0
   835  00FECC                     STR_13:
   836  00FECC  23                 	db	35
   837  00FECD  20                 	db	32
   838  00FECE  4F                 	db	79	;'O'
   839  00FECF  46                 	db	70	;'F'
   840  00FED0  20                 	db	32
   841  00FED1  39                 	db	57	;'9'
   842  00FED2  56                 	db	86	;'V'
   843  00FED3  20                 	db	32
   844  00FED4  20                 	db	32
   845  00FED5  20                 	db	32
   846  00FED6  20                 	db	32
   847  00FED7  20                 	db	32
   848  00FED8  20                 	db	32
   849  00FED9  20                 	db	32
   850  00FEDA  20                 	db	32
   851  00FEDB  20                 	db	32
   852  00FEDC  00                 	db	0
   853  00FEDD                     STR_19:
   854  00FEDD  4C                 	db	76	;'L'
   855  00FEDE  41                 	db	65	;'A'
   856  00FEDF  53                 	db	83	;'S'
   857  00FEE0  54                 	db	84	;'T'
   858  00FEE1  20                 	db	32
   859  00FEE2  52                 	db	82	;'R'
   860  00FEE3  55                 	db	85	;'U'
   861  00FEE4  4E                 	db	78	;'N'
   862  00FEE5  3A                 	db	58	;':'
   863  00FEE6  20                 	db	32
   864  00FEE7  20                 	db	32
   865  00FEE8  20                 	db	32
   866  00FEE9  20                 	db	32
   867  00FEEA  20                 	db	32
   868  00FEEB  20                 	db	32
   869  00FEEC  20                 	db	32
   870  00FEED  00                 	db	0
   871  00FEEE                     STR_9:
   872  00FEEE  54                 	db	84	;'T'
   873  00FEEF  4F                 	db	79	;'O'
   874  00FEF0  54                 	db	84	;'T'
   875  00FEF1  41                 	db	65	;'A'
   876  00FEF2  4C                 	db	76	;'L'
   877  00FEF3  20                 	db	32
   878  00FEF4  23                 	db	35
   879  00FEF5  20                 	db	32
   880  00FEF6  4F                 	db	79	;'O'
   881  00FEF7  46                 	db	70	;'F'
   882  00FEF8  20                 	db	32
   883  00FEF9  20                 	db	32
   884  00FEFA  20                 	db	32
   885  00FEFB  20                 	db	32
   886  00FEFC  20                 	db	32
   887  00FEFD  20                 	db	32
   888  00FEFE  00                 	db	0
   889  00FEFF                     STR_30:
   890  00FEFF  50                 	db	80	;'P'
   891  00FF00  52                 	db	82	;'R'
   892  00FF01  45                 	db	69	;'E'
   893  00FF02  53                 	db	83	;'S'
   894  00FF03  53                 	db	83	;'S'
   895  00FF04  20                 	db	32
   896  00FF05  2A                 	db	42
   897  00FF06  20                 	db	32
   898  00FF07  54                 	db	84	;'T'
   899  00FF08  4F                 	db	79	;'O'
   900  00FF09  20                 	db	32
   901  00FF0A  20                 	db	32
   902  00FF0B  20                 	db	32
   903  00FF0C  20                 	db	32
   904  00FF0D  20                 	db	32
   905  00FF0E  20                 	db	32
   906  00FF0F  00                 	db	0
   907  00FF10                     STR_6:
   908  00FF10  54                 	db	84	;'T'
   909  00FF11  4F                 	db	79	;'O'
   910  00FF12  20                 	db	32
   911  00FF13  43                 	db	67	;'C'
   912  00FF14  4F                 	db	79	;'O'
   913  00FF15  4E                 	db	78	;'N'
   914  00FF16  54                 	db	84	;'T'
   915  00FF17  49                 	db	73	;'I'
   916  00FF18  4E                 	db	78	;'N'
   917  00FF19  55                 	db	85	;'U'
   918  00FF1A  45                 	db	69	;'E'
   919  00FF1B  20                 	db	32
   920  00FF1C  20                 	db	32
   921  00FF1D  20                 	db	32
   922  00FF1E  20                 	db	32
   923  00FF1F  20                 	db	32
   924  00FF20  00                 	db	0
   925  00FF21                     STR_17:
   926  00FF21  23                 	db	35
   927  00FF22  20                 	db	32
   928  00FF23  4F                 	db	79	;'O'
   929  00FF24  46                 	db	70	;'F'
   930  00FF25  20                 	db	32
   931  00FF26  44                 	db	68	;'D'
   932  00FF27  52                 	db	82	;'R'
   933  00FF28  41                 	db	65	;'A'
   934  00FF29  49                 	db	73	;'I'
   935  00FF2A  4E                 	db	78	;'N'
   936  00FF2B  45                 	db	69	;'E'
   937  00FF2C  44                 	db	68	;'D'
   938  00FF2D  20                 	db	32
   939  00FF2E  20                 	db	32
   940  00FF2F  20                 	db	32
   941  00FF30  20                 	db	32
   942  00FF31  00                 	db	0
   943  00FF32                     STR_5:
   944  00FF32  44                 	db	68	;'D'
   945  00FF33  4F                 	db	79	;'O'
   946  00FF34  4E                 	db	78	;'N'
   947  00FF35  45                 	db	69	;'E'
   948  00FF36  21                 	db	33
   949  00FF37  20                 	db	32
   950  00FF38  50                 	db	80	;'P'
   951  00FF39  52                 	db	82	;'R'
   952  00FF3A  45                 	db	69	;'E'
   953  00FF3B  53                 	db	83	;'S'
   954  00FF3C  53                 	db	83	;'S'
   955  00FF3D  20                 	db	32
   956  00FF3E  2A                 	db	42
   957  00FF3F  20                 	db	32
   958  00FF40  20                 	db	32
   959  00FF41  20                 	db	32
   960  00FF42  00                 	db	0
   961  00FF43                     STR_34:
   962  00FF43  52                 	db	82	;'R'
   963  00FF44  55                 	db	85	;'U'
   964  00FF45  4E                 	db	78	;'N'
   965  00FF46  4E                 	db	78	;'N'
   966  00FF47  49                 	db	73	;'I'
   967  00FF48  4E                 	db	78	;'N'
   968  00FF49  47                 	db	71	;'G'
   969  00FF4A  3A                 	db	58	;':'
   970  00FF4B  20                 	db	32
   971  00FF4C  30                 	db	48	;'0'
   972  00FF4D  30                 	db	48	;'0'
   973  00FF4E  3A                 	db	58	;':'
   974  00FF4F  30                 	db	48	;'0'
   975  00FF50  30                 	db	48	;'0'
   976  00FF51  20                 	db	32
   977  00FF52  20                 	db	32
   978  00FF53  00                 	db	0
   979  00FF54                     STR_7:
   980  00FF54  54                 	db	84	;'T'
   981  00FF55  4F                 	db	79	;'O'
   982  00FF56  54                 	db	84	;'T'
   983  00FF57  41                 	db	65	;'A'
   984  00FF58  4C                 	db	76	;'L'
   985  00FF59  20                 	db	32
   986  00FF5A  52                 	db	82	;'R'
   987  00FF5B  55                 	db	85	;'U'
   988  00FF5C  4E                 	db	78	;'N'
   989  00FF5D  20                 	db	32
   990  00FF5E  54                 	db	84	;'T'
   991  00FF5F  49                 	db	73	;'I'
   992  00FF60  4D                 	db	77	;'M'
   993  00FF61  45                 	db	69	;'E'
   994  00FF62  3A                 	db	58	;':'
   995  00FF63  20                 	db	32
   996  00FF64  00                 	db	0
   997  00FF65                     STR_3:
   998  00FF65  20                 	db	32
   999  00FF66  3C                 	db	60	;'<'
  1000  00FF67  54                 	db	84	;'T'
  1001  00FF68  4F                 	db	79	;'O'
  1002  00FF69  47                 	db	71	;'G'
  1003  00FF6A  47                 	db	71	;'G'
  1004  00FF6B  4C                 	db	76	;'L'
  1005  00FF6C  45                 	db	69	;'E'
  1006  00FF6D  20                 	db	32
  1007  00FF6E  20                 	db	32
  1008  00FF6F  4C                 	db	76	;'L'
  1009  00FF70  4F                 	db	79	;'O'
  1010  00FF71  47                 	db	71	;'G'
  1011  00FF72  53                 	db	83	;'S'
  1012  00FF73  3E                 	db	62	;'>'
  1013  00FF74  20                 	db	32
  1014  00FF75  00                 	db	0
  1015  00FF76                     STR_31:
  1016  00FF76  53                 	db	83	;'S'
  1017  00FF77  45                 	db	69	;'E'
  1018  00FF78  4E                 	db	78	;'N'
  1019  00FF79  44                 	db	68	;'D'
  1020  00FF7A  20                 	db	32
  1021  00FF7B  44                 	db	68	;'D'
  1022  00FF7C  41                 	db	65	;'A'
  1023  00FF7D  54                 	db	84	;'T'
  1024  00FF7E  41                 	db	65	;'A'
  1025  00FF7F  20                 	db	32
  1026  00FF80  54                 	db	84	;'T'
  1027  00FF81  4F                 	db	79	;'O'
  1028  00FF82  20                 	db	32
  1029  00FF83  50                 	db	80	;'P'
  1030  00FF84  43                 	db	67	;'C'
  1031  00FF85  20                 	db	32
  1032  00FF86  00                 	db	0
  1033  00FF87                     STR_4:
  1034  00FF87  50                 	db	80	;'P'
  1035  00FF88  52                 	db	82	;'R'
  1036  00FF89  45                 	db	69	;'E'
  1037  00FF8A  53                 	db	83	;'S'
  1038  00FF8B  53                 	db	83	;'S'
  1039  00FF8C  20                 	db	32
  1040  00FF8D  23                 	db	35
  1041  00FF8E  20                 	db	32
  1042  00FF8F  54                 	db	84	;'T'
  1043  00FF90  4F                 	db	79	;'O'
  1044  00FF91  20                 	db	32
  1045  00FF92  53                 	db	83	;'S'
  1046  00FF93  54                 	db	84	;'T'
  1047  00FF94  4F                 	db	79	;'O'
  1048  00FF95  50                 	db	80	;'P'
  1049  00FF96  20                 	db	32
  1050  00FF97  00                 	db	0
  1051  00FF98                     STR_22:
  1052  00FF98  50                 	db	80	;'P'
  1053  00FF99  45                 	db	69	;'E'
  1054  00FF9A  52                 	db	82	;'R'
  1055  00FF9B  4D                 	db	77	;'M'
  1056  00FF9C  41                 	db	65	;'A'
  1057  00FF9D  4E                 	db	78	;'N'
  1058  00FF9E  45                 	db	69	;'E'
  1059  00FF9F  4E                 	db	78	;'N'
  1060  00FFA0  54                 	db	84	;'T'
  1061  00FFA1  20                 	db	32
  1062  00FFA2  4C                 	db	76	;'L'
  1063  00FFA3  4F                 	db	79	;'O'
  1064  00FFA4  47                 	db	71	;'G'
  1065  00FFA5  20                 	db	32
  1066  00FFA6  41                 	db	65	;'A'
  1067  00FFA7  3A                 	db	58	;':'
  1068  00FFA8  00                 	db	0
  1069  00FFA9                     STR_24:
  1070  00FFA9  50                 	db	80	;'P'
  1071  00FFAA  45                 	db	69	;'E'
  1072  00FFAB  52                 	db	82	;'R'
  1073  00FFAC  4D                 	db	77	;'M'
  1074  00FFAD  41                 	db	65	;'A'
  1075  00FFAE  4E                 	db	78	;'N'
  1076  00FFAF  45                 	db	69	;'E'
  1077  00FFB0  4E                 	db	78	;'N'
  1078  00FFB1  54                 	db	84	;'T'
  1079  00FFB2  20                 	db	32
  1080  00FFB3  4C                 	db	76	;'L'
  1081  00FFB4  4F                 	db	79	;'O'
  1082  00FFB5  47                 	db	71	;'G'
  1083  00FFB6  20                 	db	32
  1084  00FFB7  42                 	db	66	;'B'
  1085  00FFB8  3A                 	db	58	;':'
  1086  00FFB9  00                 	db	0
  1087  00FFBA                     STR_26:
  1088  00FFBA  50                 	db	80	;'P'
  1089  00FFBB  45                 	db	69	;'E'
  1090  00FFBC  52                 	db	82	;'R'
  1091  00FFBD  4D                 	db	77	;'M'
  1092  00FFBE  41                 	db	65	;'A'
  1093  00FFBF  4E                 	db	78	;'N'
  1094  00FFC0  45                 	db	69	;'E'
  1095  00FFC1  4E                 	db	78	;'N'
  1096  00FFC2  54                 	db	84	;'T'
  1097  00FFC3  20                 	db	32
  1098  00FFC4  4C                 	db	76	;'L'
  1099  00FFC5  4F                 	db	79	;'O'
  1100  00FFC6  47                 	db	71	;'G'
  1101  00FFC7  20                 	db	32
  1102  00FFC8  43                 	db	67	;'C'
  1103  00FFC9  3A                 	db	58	;':'
  1104  00FFCA  00                 	db	0
  1105  00FFCB                     STR_28:
  1106  00FFCB  50                 	db	80	;'P'
  1107  00FFCC  45                 	db	69	;'E'
  1108  00FFCD  52                 	db	82	;'R'
  1109  00FFCE  4D                 	db	77	;'M'
  1110  00FFCF  41                 	db	65	;'A'
  1111  00FFD0  4E                 	db	78	;'N'
  1112  00FFD1  45                 	db	69	;'E'
  1113  00FFD2  4E                 	db	78	;'N'
  1114  00FFD3  54                 	db	84	;'T'
  1115  00FFD4  20                 	db	32
  1116  00FFD5  4C                 	db	76	;'L'
  1117  00FFD6  4F                 	db	79	;'O'
  1118  00FFD7  47                 	db	71	;'G'
  1119  00FFD8  20                 	db	32
  1120  00FFD9  44                 	db	68	;'D'
  1121  00FFDA  3A                 	db	58	;':'
  1122  00FFDB  00                 	db	0
  1123  00FFDC                     STR_2:
  1124  00FFDC  3C                 	db	60	;'<'
  1125  00FFDD  20                 	db	32
  1126  00FFDE  54                 	db	84	;'T'
  1127  00FFDF  4F                 	db	79	;'O'
  1128  00FFE0  47                 	db	71	;'G'
  1129  00FFE1  47                 	db	71	;'G'
  1130  00FFE2  4C                 	db	76	;'L'
  1131  00FFE3  45                 	db	69	;'E'
  1132  00FFE4  20                 	db	32
  1133  00FFE5  20                 	db	32
  1134  00FFE6  4C                 	db	76	;'L'
  1135  00FFE7  4F                 	db	79	;'O'
  1136  00FFE8  47                 	db	71	;'G'
  1137  00FFE9  53                 	db	83	;'S'
  1138  00FFEA  20                 	db	32
  1139  00FFEB  3E                 	db	62	;'>'
  1140  00FFEC  00                 	db	0
  1141  00FFED                     STR_1:
  1142  00FFED  50                 	db	80	;'P'
  1143  00FFEE  52                 	db	82	;'R'
  1144  00FFEF  45                 	db	69	;'E'
  1145  00FFF0  53                 	db	83	;'S'
  1146  00FFF1  53                 	db	83	;'S'
  1147  00FFF2  20                 	db	32
  1148  00FFF3  2A                 	db	42
  1149  00FFF4  20                 	db	32
  1150  00FFF5  54                 	db	84	;'T'
  1151  00FFF6  4F                 	db	79	;'O'
  1152  00FFF7  20                 	db	32
  1153  00FFF8  53                 	db	83	;'S'
  1154  00FFF9  54                 	db	84	;'T'
  1155  00FFFA  41                 	db	65	;'A'
  1156  00FFFB  52                 	db	82	;'R'
  1157  00FFFC  54                 	db	84	;'T'
  1158  00FFFD  00                 	db	0
  1159  0000                     
  1160                           ; #config settings
  1161  00FFFE  00                 	db	0	; dummy byte at the end
  1162  0000                     
  1163                           	psect	cinit
  1164  00326C                     __pcinit:
  1165                           	opt stack 0
  1166  00326C                     start_initialization:
  1167                           	opt stack 0
  1168  00326C                     __initialization:
  1169                           	opt stack 0
  1170                           
  1171                           ; Initialize objects allocated to BANK0 (14 bytes)
  1172                           ; load TBLPTR registers with __pidataBANK0
  1173  00326C  0ECE               	movlw	low __pidataBANK0
  1174  00326E  6EF6               	movwf	tblptrl,c
  1175  003270  0E37               	movlw	high __pidataBANK0
  1176  003272  6EF7               	movwf	tblptrh,c
  1177  003274  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1178  003276  6EF8               	movwf	tblptru,c
  1179  003278  EE00  F0ED         	lfsr	0,__pdataBANK0
  1180  00327C  EE10 F00E          	lfsr	1,14
  1181  003280                     copy_data0:
  1182  003280  0009               	tblrd		*+
  1183  003282  CFF5 FFEE          	movff	tablat,postinc0
  1184  003286  50E5               	movf	postdec1,w,c
  1185  003288  50E1               	movf	fsr1l,w,c
  1186  00328A  E1FA               	bnz	copy_data0
  1187                           
  1188                           ; Initialize objects allocated to COMRAM (19 bytes)
  1189                           ; load TBLPTR registers with __pidataCOMRAM
  1190  00328C  0E88               	movlw	low __pidataCOMRAM
  1191  00328E  6EF6               	movwf	tblptrl,c
  1192  003290  0E37               	movlw	high __pidataCOMRAM
  1193  003292  6EF7               	movwf	tblptrh,c
  1194  003294  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1195  003296  6EF8               	movwf	tblptru,c
  1196  003298  EE00  F035         	lfsr	0,__pdataCOMRAM
  1197  00329C  EE10 F013          	lfsr	1,19
  1198  0032A0                     copy_data1:
  1199  0032A0  0009               	tblrd		*+
  1200  0032A2  CFF5 FFEE          	movff	tablat,postinc0
  1201  0032A6  50E5               	movf	postdec1,w,c
  1202  0032A8  50E1               	movf	fsr1l,w,c
  1203  0032AA  E1FA               	bnz	copy_data1
  1204                           
  1205                           ; Clear objects allocated to BANK0 (37 bytes)
  1206  0032AC  EE00  F0C8         	lfsr	0,__pbssBANK0
  1207  0032B0  0E25               	movlw	37
  1208  0032B2                     clear_0:
  1209  0032B2  6AEE               	clrf	postinc0,c
  1210  0032B4  06E8               	decf	wreg,f,c
  1211  0032B6  E1FD               	bnz	clear_0
  1212                           
  1213                           ; Clear objects allocated to COMRAM (14 bytes)
  1214  0032B8  EE00  F048         	lfsr	0,__pbssCOMRAM
  1215  0032BC  0E0E               	movlw	14
  1216  0032BE                     clear_1:
  1217  0032BE  6AEE               	clrf	postinc0,c
  1218  0032C0  06E8               	decf	wreg,f,c
  1219  0032C2  E1FD               	bnz	clear_1
  1220  0032C4                     end_of_initialization:
  1221                           	opt stack 0
  1222  0032C4                     __end_of__initialization:
  1223                           	opt stack 0
  1224  0032C4  9056               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1225  0032C6  9256               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1226  0032C8  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1227  0032CA  6EF8               	movwf	tblptru,c
  1228  0032CC  0100               	movlb	0
  1229  0032CE  EF09  F000         	goto	_main	;jump to C main() function
  1230                           tblptru	equ	0xFF8
  1231                           tblptrh	equ	0xFF7
  1232                           tblptrl	equ	0xFF6
  1233                           tablat	equ	0xFF5
  1234                           postinc0	equ	0xFEE
  1235                           wreg	equ	0xFE8
  1236                           postdec1	equ	0xFE5
  1237                           fsr1l	equ	0xFE1
  1238                           
  1239                           	psect	bssCOMRAM
  1240  000048                     __pbssCOMRAM:
  1241                           	opt stack 0
  1242  000048                     _realTime:
  1243                           	opt stack 0
  1244  000048                     	ds	7
  1245  00004F                     _count_2ms:
  1246                           	opt stack 0
  1247  00004F                     	ds	2
  1248  000051                     _opTimer:
  1249                           	opt stack 0
  1250  000051                     	ds	1
  1251  000052                     _solOnTimer:
  1252                           	opt stack 0
  1253  000052                     	ds	1
  1254  000053                     _sorting:
  1255                           	opt stack 0
  1256  000053                     	ds	1
  1257  000054                     _step1:
  1258                           	opt stack 0
  1259  000054                     	ds	1
  1260  000055                     _step2:
  1261                           	opt stack 0
  1262  000055                     	ds	1
  1263                           tblptru	equ	0xFF8
  1264                           tblptrh	equ	0xFF7
  1265                           tblptrl	equ	0xFF6
  1266                           tablat	equ	0xFF5
  1267                           postinc0	equ	0xFEE
  1268                           wreg	equ	0xFE8
  1269                           postdec1	equ	0xFE5
  1270                           fsr1l	equ	0xFE1
  1271                           
  1272                           	psect	dataCOMRAM
  1273  000035                     __pdataCOMRAM:
  1274                           	opt stack 0
  1275  000035                     logPC@F3226:
  1276                           	opt stack 0
  1277  000035                     	ds	19
  1278                           tblptru	equ	0xFF8
  1279                           tblptrh	equ	0xFF7
  1280                           tblptrl	equ	0xFF6
  1281                           tablat	equ	0xFF5
  1282                           postinc0	equ	0xFEE
  1283                           wreg	equ	0xFE8
  1284                           postdec1	equ	0xFE5
  1285                           fsr1l	equ	0xFE1
  1286                           
  1287                           	psect	bssBANK0
  1288  0000C8                     __pbssBANK0:
  1289                           	opt stack 0
  1290  0000C8                     _lastRunRTC:
  1291                           	opt stack 0
  1292  0000C8                     	ds	7
  1293  0000CF                     _plat1Left:
  1294                           	opt stack 0
  1295  0000CF                     	ds	2
  1296  0000D1                     _plat1Right:
  1297                           	opt stack 0
  1298  0000D1                     	ds	2
  1299  0000D3                     _plat2Left:
  1300                           	opt stack 0
  1301  0000D3                     	ds	2
  1302  0000D5                     _plat2Right:
  1303                           	opt stack 0
  1304  0000D5                     	ds	2
  1305  0000D7                     _turn1BackLeft:
  1306                           	opt stack 0
  1307  0000D7                     	ds	2
  1308  0000D9                     _turn1BackRight:
  1309                           	opt stack 0
  1310  0000D9                     	ds	2
  1311  0000DB                     _turn2BackLeft:
  1312                           	opt stack 0
  1313  0000DB                     	ds	2
  1314  0000DD                     _turn2BackRight:
  1315                           	opt stack 0
  1316  0000DD                     	ds	2
  1317  0000DF                     _count9V:
  1318                           	opt stack 0
  1319  0000DF                     	ds	1
  1320  0000E0                     _countAA:
  1321                           	opt stack 0
  1322  0000E0                     	ds	1
  1323  0000E1                     _countC:
  1324                           	opt stack 0
  1325  0000E1                     	ds	1
  1326  0000E2                     _countDrain:
  1327                           	opt stack 0
  1328  0000E2                     	ds	1
  1329  0000E3                     _doneTimer:
  1330                           	opt stack 0
  1331  0000E3                     	ds	1
  1332  0000E4                     _doubleAA:
  1333                           	opt stack 0
  1334  0000E4                     	ds	1
  1335  0000E5                     _min:
  1336                           	opt stack 0
  1337  0000E5                     	ds	1
  1338  0000E6                     _num9V:
  1339                           	opt stack 0
  1340  0000E6                     	ds	1
  1341  0000E7                     _numAA:
  1342                           	opt stack 0
  1343  0000E7                     	ds	1
  1344  0000E8                     _numBats:
  1345                           	opt stack 0
  1346  0000E8                     	ds	1
  1347  0000E9                     _numC:
  1348                           	opt stack 0
  1349  0000E9                     	ds	1
  1350  0000EA                     _numDrain:
  1351                           	opt stack 0
  1352  0000EA                     	ds	1
  1353  0000EB                     _sec:
  1354                           	opt stack 0
  1355  0000EB                     	ds	1
  1356  0000EC                     _startGear:
  1357                           	opt stack 0
  1358  0000EC                     	ds	1
  1359                           tblptru	equ	0xFF8
  1360                           tblptrh	equ	0xFF7
  1361                           tblptrl	equ	0xFF6
  1362                           tablat	equ	0xFF5
  1363                           postinc0	equ	0xFEE
  1364                           wreg	equ	0xFE8
  1365                           postdec1	equ	0xFE5
  1366                           fsr1l	equ	0xFE1
  1367                           
  1368                           	psect	dataBANK0
  1369  0000ED                     __pdataBANK0:
  1370                           	opt stack 0
  1371  0000ED                     logPC@F3250:
  1372                           	opt stack 0
  1373  0000ED                     	ds	3
  1374  0000F0                     logPC@F3230:
  1375                           	opt stack 0
  1376  0000F0                     	ds	2
  1377  0000F2                     logPC@F3234:
  1378                           	opt stack 0
  1379  0000F2                     	ds	2
  1380  0000F4                     logPC@F3238:
  1381                           	opt stack 0
  1382  0000F4                     	ds	2
  1383  0000F6                     logPC@F3242:
  1384                           	opt stack 0
  1385  0000F6                     	ds	2
  1386  0000F8                     logPC@F3246:
  1387                           	opt stack 0
  1388  0000F8                     	ds	2
  1389  0000FA                     _screenMode:
  1390                           	opt stack 0
  1391  0000FA                     	ds	1
  1392                           tblptru	equ	0xFF8
  1393                           tblptrh	equ	0xFF7
  1394                           tblptrl	equ	0xFF6
  1395                           tablat	equ	0xFF5
  1396                           postinc0	equ	0xFEE
  1397                           wreg	equ	0xFE8
  1398                           postdec1	equ	0xFE5
  1399                           fsr1l	equ	0xFE1
  1400                           
  1401                           	psect	cstackBANK1
  1402  000100                     __pcstackBANK1:
  1403                           	opt stack 0
  1404  000100                     logPC@started_time:
  1405                           	opt stack 0
  1406                           
  1407                           ; 19 bytes @ 0x0
  1408  000100                     	ds	19
  1409  000113                     logPC@runTime:
  1410                           	opt stack 0
  1411                           
  1412                           ; 3 bytes @ 0x13
  1413  000113                     	ds	3
  1414  000116                     logPC@numberAA:
  1415                           	opt stack 0
  1416                           
  1417                           ; 2 bytes @ 0x16
  1418  000116                     	ds	2
  1419  000118                     logPC@numberC:
  1420                           	opt stack 0
  1421                           
  1422                           ; 2 bytes @ 0x18
  1423  000118                     	ds	2
  1424  00011A                     logPC@number9V:
  1425                           	opt stack 0
  1426                           
  1427                           ; 2 bytes @ 0x1A
  1428  00011A                     	ds	2
  1429  00011C                     logPC@numberDrain:
  1430                           	opt stack 0
  1431                           
  1432                           ; 2 bytes @ 0x1C
  1433  00011C                     	ds	2
  1434  00011E                     logPC@numberTotal:
  1435                           	opt stack 0
  1436                           
  1437                           ; 2 bytes @ 0x1E
  1438  00011E                     	ds	2
  1439  000120                     logPC@i:
  1440                           	opt stack 0
  1441                           
  1442                           ; 2 bytes @ 0x20
  1443  000120                     	ds	2
  1444  000122                     logPC@i_944:
  1445                           	opt stack 0
  1446                           
  1447                           ; 2 bytes @ 0x22
  1448  000122                     	ds	2
  1449  000124                     logPC@i_945:
  1450                           	opt stack 0
  1451                           
  1452                           ; 2 bytes @ 0x24
  1453  000124                     	ds	2
  1454  000126                     logPC@i_948:
  1455                           	opt stack 0
  1456                           
  1457                           ; 2 bytes @ 0x26
  1458  000126                     	ds	2
  1459  000128                     logPC@i_949:
  1460                           	opt stack 0
  1461                           
  1462                           ; 2 bytes @ 0x28
  1463  000128                     	ds	2
  1464  00012A                     logPC@i_952:
  1465                           	opt stack 0
  1466                           
  1467                           ; 2 bytes @ 0x2A
  1468  00012A                     	ds	2
  1469  00012C                     logPC@i_953:
  1470                           	opt stack 0
  1471                           
  1472                           ; 2 bytes @ 0x2C
  1473  00012C                     	ds	2
  1474  00012E                     logPC@i_956:
  1475                           	opt stack 0
  1476                           
  1477                           ; 2 bytes @ 0x2E
  1478  00012E                     	ds	2
  1479  000130                     logPC@i_957:
  1480                           	opt stack 0
  1481                           
  1482                           ; 2 bytes @ 0x30
  1483  000130                     	ds	2
  1484  000132                     logPC@i_960:
  1485                           	opt stack 0
  1486                           
  1487                           ; 2 bytes @ 0x32
  1488  000132                     	ds	2
  1489  000134                     logPC@i_961:
  1490                           	opt stack 0
  1491                           
  1492                           ; 2 bytes @ 0x34
  1493  000134                     	ds	2
  1494  000136                     logPC@i_964:
  1495                           	opt stack 0
  1496                           
  1497                           ; 2 bytes @ 0x36
  1498  000136                     	ds	2
  1499  000138                     logPC@i_965:
  1500                           	opt stack 0
  1501                           
  1502                           ; 2 bytes @ 0x38
  1503  000138                     	ds	2
  1504  00013A                     logPC@i_968:
  1505                           	opt stack 0
  1506                           
  1507                           ; 2 bytes @ 0x3A
  1508  00013A                     	ds	2
  1509                           tblptru	equ	0xFF8
  1510                           tblptrh	equ	0xFF7
  1511                           tblptrl	equ	0xFF6
  1512                           tablat	equ	0xFF5
  1513                           postinc0	equ	0xFEE
  1514                           wreg	equ	0xFE8
  1515                           postdec1	equ	0xFE5
  1516                           fsr1l	equ	0xFE1
  1517                           
  1518                           	psect	cstackBANK0
  1519  000080                     __pcstackBANK0:
  1520                           	opt stack 0
  1521  000080                     ??_isdigit:
  1522  000080                     ??_I2C_Master_Wait:
  1523  000080                     ?_next_address:
  1524                           	opt stack 0
  1525  000080                     ?___wmul:
  1526                           	opt stack 0
  1527  000080                     ?___awdiv:
  1528                           	opt stack 0
  1529  000080                     ?___awmod:
  1530                           	opt stack 0
  1531  000080                     ?___lwdiv:
  1532                           	opt stack 0
  1533  000080                     ?___lldiv:
  1534                           	opt stack 0
  1535  000080                     lcdNibble@temp:
  1536                           	opt stack 0
  1537  000080                     readADC@channel:
  1538                           	opt stack 0
  1539  000080                     wait_2ms@x:
  1540                           	opt stack 0
  1541  000080                     Eeprom_ReadByte@address:
  1542                           	opt stack 0
  1543  000080                     Eeprom_WriteByte@address:
  1544                           	opt stack 0
  1545  000080                     next_address@address:
  1546                           	opt stack 0
  1547  000080                     ___wmul@multiplier:
  1548                           	opt stack 0
  1549  000080                     ___awdiv@dividend:
  1550                           	opt stack 0
  1551  000080                     ___awmod@dividend:
  1552                           	opt stack 0
  1553  000080                     ___lwdiv@dividend:
  1554                           	opt stack 0
  1555  000080                     ___lldiv@dividend:
  1556                           	opt stack 0
  1557                           
  1558                           ; 4 bytes @ 0x0
  1559  000080                     	ds	1
  1560  000081                     ??_testBatteries:
  1561  000081                     I2C_Master_Read@a:
  1562                           	opt stack 0
  1563  000081                     lcdNibble@data:
  1564                           	opt stack 0
  1565  000081                     _isdigit$1231:
  1566                           	opt stack 0
  1567  000081                     I2C_Master_Write@d:
  1568                           	opt stack 0
  1569                           
  1570                           ; 2 bytes @ 0x1
  1571  000081                     	ds	1
  1572  000082                     I2C_Master_Read@temp:
  1573                           	opt stack 0
  1574  000082                     lcdInst@data:
  1575                           	opt stack 0
  1576  000082                     putch@data:
  1577                           	opt stack 0
  1578  000082                     Eeprom_WriteByte@data:
  1579                           	opt stack 0
  1580  000082                     isdigit@c:
  1581                           	opt stack 0
  1582  000082                     ___wmul@multiplicand:
  1583                           	opt stack 0
  1584  000082                     ___awdiv@divisor:
  1585                           	opt stack 0
  1586  000082                     ___awmod@divisor:
  1587                           	opt stack 0
  1588  000082                     ___lwdiv@divisor:
  1589                           	opt stack 0
  1590                           
  1591                           ; 2 bytes @ 0x2
  1592  000082                     	ds	1
  1593  000083                     ??_initLCD:
  1594  000083                     testBatteries@volt1:
  1595                           	opt stack 0
  1596                           
  1597                           ; 2 bytes @ 0x3
  1598  000083                     	ds	1
  1599  000084                     ___awdiv@counter:
  1600                           	opt stack 0
  1601  000084                     ___awmod@counter:
  1602                           	opt stack 0
  1603  000084                     ___lwdiv@counter:
  1604                           	opt stack 0
  1605  000084                     ___wmul@product:
  1606                           	opt stack 0
  1607  000084                     ___lldiv@divisor:
  1608                           	opt stack 0
  1609                           
  1610                           ; 4 bytes @ 0x4
  1611  000084                     	ds	1
  1612  000085                     ___awdiv@sign:
  1613                           	opt stack 0
  1614  000085                     ___awmod@sign:
  1615                           	opt stack 0
  1616  000085                     testBatteries@volt3:
  1617                           	opt stack 0
  1618  000085                     ___lwdiv@quotient:
  1619                           	opt stack 0
  1620                           
  1621                           ; 2 bytes @ 0x5
  1622  000085                     	ds	1
  1623  000086                     ___awdiv@quotient:
  1624                           	opt stack 0
  1625                           
  1626                           ; 2 bytes @ 0x6
  1627  000086                     	ds	1
  1628  000087                     ?_getTens:
  1629                           	opt stack 0
  1630  000087                     ?_getHundreds:
  1631                           	opt stack 0
  1632  000087                     ?___lwmod:
  1633                           	opt stack 0
  1634  000087                     testBatteries@volt2:
  1635                           	opt stack 0
  1636  000087                     getHundreds@num:
  1637                           	opt stack 0
  1638  000087                     getTens@num:
  1639                           	opt stack 0
  1640  000087                     ___lwmod@dividend:
  1641                           	opt stack 0
  1642                           
  1643                           ; 2 bytes @ 0x7
  1644  000087                     	ds	1
  1645  000088                     stopOperation@address_code:
  1646                           	opt stack 0
  1647  000088                     ___lldiv@quotient:
  1648                           	opt stack 0
  1649                           
  1650                           ; 4 bytes @ 0x8
  1651  000088                     	ds	1
  1652  000089                     stopOperation@address:
  1653                           	opt stack 0
  1654  000089                     testBatteries@volt4:
  1655                           	opt stack 0
  1656  000089                     ___lwmod@divisor:
  1657                           	opt stack 0
  1658                           
  1659                           ; 2 bytes @ 0x9
  1660  000089                     	ds	2
  1661  00008B                     ___lwmod@counter:
  1662                           	opt stack 0
  1663  00008B                     testBatteries@volt5:
  1664                           	opt stack 0
  1665                           
  1666                           ; 2 bytes @ 0xB
  1667  00008B                     	ds	1
  1668  00008C                     ?_printf:
  1669                           	opt stack 0
  1670  00008C                     ?_getOnes:
  1671                           	opt stack 0
  1672  00008C                     ___lldiv@counter:
  1673                           	opt stack 0
  1674  00008C                     getOnes@num:
  1675                           	opt stack 0
  1676  00008C                     printf@f:
  1677                           	opt stack 0
  1678                           
  1679                           ; 2 bytes @ 0xC
  1680  00008C                     	ds	1
  1681  00008D                     I2C_Master_Init@c:
  1682                           	opt stack 0
  1683                           
  1684                           ; 4 bytes @ 0xD
  1685  00008D                     	ds	1
  1686  00008E                     getChar@num:
  1687                           	opt stack 0
  1688                           
  1689                           ; 2 bytes @ 0xE
  1690  00008E                     	ds	2
  1691  000090                     ??_logPC:
  1692  000090                     
  1693                           ; 1 bytes @ 0x10
  1694  000090                     	ds	1
  1695  000091                     ??_I2C_Master_Init:
  1696                           
  1697                           ; 1 bytes @ 0x11
  1698  000091                     	ds	3
  1699  000094                     ??_printf:
  1700                           
  1701                           ; 1 bytes @ 0x14
  1702  000094                     	ds	4
  1703  000098                     printf@idx:
  1704                           	opt stack 0
  1705                           
  1706                           ; 1 bytes @ 0x18
  1707  000098                     	ds	1
  1708  000099                     printf@ap:
  1709                           	opt stack 0
  1710                           
  1711                           ; 2 bytes @ 0x19
  1712  000099                     	ds	2
  1713  00009B                     printf@prec:
  1714                           	opt stack 0
  1715                           
  1716                           ; 1 bytes @ 0x1B
  1717  00009B                     	ds	1
  1718  00009C                     printf@val:
  1719                           	opt stack 0
  1720                           
  1721                           ; 2 bytes @ 0x1C
  1722  00009C                     	ds	2
  1723  00009E                     printf@flag:
  1724                           	opt stack 0
  1725                           
  1726                           ; 1 bytes @ 0x1E
  1727  00009E                     	ds	1
  1728  00009F                     printf@width:
  1729                           	opt stack 0
  1730                           
  1731                           ; 2 bytes @ 0x1F
  1732  00009F                     	ds	2
  1733  0000A1                     printf@c:
  1734                           	opt stack 0
  1735                           
  1736                           ; 1 bytes @ 0x21
  1737  0000A1                     	ds	1
  1738  0000A2                     show_log@log_address:
  1739                           	opt stack 0
  1740                           
  1741                           ; 2 bytes @ 0x22
  1742  0000A2                     	ds	2
  1743  0000A4                     show_log@currScreen:
  1744                           	opt stack 0
  1745                           
  1746                           ; 1 bytes @ 0x24
  1747  0000A4                     	ds	1
  1748  0000A5                     ??_show_log:
  1749                           
  1750                           ; 1 bytes @ 0x25
  1751  0000A5                     	ds	1
  1752  0000A6                     show_log@total_num:
  1753                           	opt stack 0
  1754                           
  1755                           ; 2 bytes @ 0x26
  1756  0000A6                     	ds	2
  1757  0000A8                     show_log@AA_num:
  1758                           	opt stack 0
  1759                           
  1760                           ; 2 bytes @ 0x28
  1761  0000A8                     	ds	2
  1762  0000AA                     show_log@C_num:
  1763                           	opt stack 0
  1764                           
  1765                           ; 2 bytes @ 0x2A
  1766  0000AA                     	ds	2
  1767  0000AC                     show_log@Nine_num:
  1768                           	opt stack 0
  1769                           
  1770                           ; 2 bytes @ 0x2C
  1771  0000AC                     	ds	2
  1772  0000AE                     show_log@Drain_num:
  1773                           	opt stack 0
  1774                           
  1775                           ; 2 bytes @ 0x2E
  1776  0000AE                     	ds	2
  1777  0000B0                     show_log@elapsed_time:
  1778                           	opt stack 0
  1779                           
  1780                           ; 2 bytes @ 0x30
  1781  0000B0                     	ds	2
  1782  0000B2                     show_log@year:
  1783                           	opt stack 0
  1784                           
  1785                           ; 1 bytes @ 0x32
  1786  0000B2                     	ds	1
  1787  0000B3                     show_log@month:
  1788                           	opt stack 0
  1789                           
  1790                           ; 1 bytes @ 0x33
  1791  0000B3                     	ds	1
  1792  0000B4                     show_log@day:
  1793                           	opt stack 0
  1794                           
  1795                           ; 1 bytes @ 0x34
  1796  0000B4                     	ds	1
  1797  0000B5                     show_log@hour:
  1798                           	opt stack 0
  1799                           
  1800                           ; 1 bytes @ 0x35
  1801  0000B5                     	ds	1
  1802  0000B6                     show_log@minute:
  1803                           	opt stack 0
  1804                           
  1805                           ; 1 bytes @ 0x36
  1806  0000B6                     	ds	1
  1807  0000B7                     show_log@second:
  1808                           	opt stack 0
  1809                           
  1810                           ; 1 bytes @ 0x37
  1811  0000B7                     	ds	1
  1812  0000B8                     show_log@i:
  1813                           	opt stack 0
  1814                           
  1815                           ; 1 bytes @ 0x38
  1816  0000B8                     	ds	1
  1817  0000B9                     show_log@i_936:
  1818                           	opt stack 0
  1819                           
  1820                           ; 1 bytes @ 0x39
  1821  0000B9                     	ds	1
  1822  0000BA                     show_log@i_939:
  1823                           	opt stack 0
  1824                           
  1825                           ; 1 bytes @ 0x3A
  1826  0000BA                     	ds	1
  1827  0000BB                     show_log@address:
  1828                           	opt stack 0
  1829                           
  1830                           ; 2 bytes @ 0x3B
  1831  0000BB                     	ds	2
  1832  0000BD                     ??_main:
  1833                           
  1834                           ; 1 bytes @ 0x3D
  1835  0000BD                     	ds	2
  1836  0000BF                     main@keypress:
  1837                           	opt stack 0
  1838                           
  1839                           ; 1 bytes @ 0x3F
  1840  0000BF                     	ds	1
  1841  0000C0                     main@i:
  1842                           	opt stack 0
  1843                           
  1844                           ; 1 bytes @ 0x40
  1845  0000C0                     	ds	1
  1846  0000C1                     main@i_771:
  1847                           	opt stack 0
  1848                           
  1849                           ; 1 bytes @ 0x41
  1850  0000C1                     	ds	1
  1851  0000C2                     main@i_819:
  1852                           	opt stack 0
  1853                           
  1854                           ; 1 bytes @ 0x42
  1855  0000C2                     	ds	1
  1856  0000C3                     main@i_821:
  1857                           	opt stack 0
  1858                           
  1859                           ; 1 bytes @ 0x43
  1860  0000C3                     	ds	1
  1861  0000C4                     main@i_836:
  1862                           	opt stack 0
  1863                           
  1864                           ; 1 bytes @ 0x44
  1865  0000C4                     	ds	1
  1866  0000C5                     main@steps_793:
  1867                           	opt stack 0
  1868                           
  1869                           ; 1 bytes @ 0x45
  1870  0000C5                     	ds	1
  1871  0000C6                     main@steps_802:
  1872                           	opt stack 0
  1873                           
  1874                           ; 1 bytes @ 0x46
  1875  0000C6                     	ds	1
  1876  0000C7                     main@steps:
  1877                           	opt stack 0
  1878                           
  1879                           ; 1 bytes @ 0x47
  1880  0000C7                     	ds	1
  1881                           tblptru	equ	0xFF8
  1882                           tblptrh	equ	0xFF7
  1883                           tblptrl	equ	0xFF6
  1884                           tablat	equ	0xFF5
  1885                           postinc0	equ	0xFEE
  1886                           wreg	equ	0xFE8
  1887                           postdec1	equ	0xFE5
  1888                           fsr1l	equ	0xFE1
  1889                           
  1890                           	psect	cstackCOMRAM
  1891  000001                     __pcstackCOMRAM:
  1892                           	opt stack 0
  1893  000001                     ??i2_I2C_Master_Wait:
  1894  000001                     ??i2_isdigit:
  1895  000001                     ?i2_next_address:
  1896                           	opt stack 0
  1897  000001                     ?i2___wmul:
  1898                           	opt stack 0
  1899  000001                     ?i2___awdiv:
  1900                           	opt stack 0
  1901  000001                     ?i2___awmod:
  1902                           	opt stack 0
  1903  000001                     ?i2___lwdiv:
  1904                           	opt stack 0
  1905  000001                     i2lcdNibble@temp:
  1906                           	opt stack 0
  1907  000001                     i2Eeprom_ReadByte@address:
  1908                           	opt stack 0
  1909  000001                     i2Eeprom_WriteByte@address:
  1910                           	opt stack 0
  1911  000001                     i2next_address@address:
  1912                           	opt stack 0
  1913  000001                     i2___wmul@multiplier:
  1914                           	opt stack 0
  1915  000001                     i2___awdiv@dividend:
  1916                           	opt stack 0
  1917  000001                     i2___awmod@dividend:
  1918                           	opt stack 0
  1919  000001                     i2___lwdiv@dividend:
  1920                           	opt stack 0
  1921                           
  1922                           ; 2 bytes @ 0x0
  1923  000001                     	ds	1
  1924  000002                     i2I2C_Master_Read@a:
  1925                           	opt stack 0
  1926  000002                     i2lcdNibble@data:
  1927                           	opt stack 0
  1928  000002                     i2_isdigit$1231:
  1929                           	opt stack 0
  1930  000002                     i2I2C_Master_Write@d:
  1931                           	opt stack 0
  1932                           
  1933                           ; 2 bytes @ 0x1
  1934  000002                     	ds	1
  1935  000003                     i2I2C_Master_Read@temp:
  1936                           	opt stack 0
  1937  000003                     i2lcdInst@data:
  1938                           	opt stack 0
  1939  000003                     i2putch@data:
  1940                           	opt stack 0
  1941  000003                     i2Eeprom_WriteByte@data:
  1942                           	opt stack 0
  1943  000003                     i2isdigit@c:
  1944                           	opt stack 0
  1945  000003                     i2___wmul@multiplicand:
  1946                           	opt stack 0
  1947  000003                     i2___awdiv@divisor:
  1948                           	opt stack 0
  1949  000003                     i2___awmod@divisor:
  1950                           	opt stack 0
  1951  000003                     i2___lwdiv@divisor:
  1952                           	opt stack 0
  1953                           
  1954                           ; 2 bytes @ 0x2
  1955  000003                     	ds	1
  1956  000004                     
  1957                           ; 1 bytes @ 0x3
  1958  000004                     	ds	1
  1959  000005                     i2___awdiv@counter:
  1960                           	opt stack 0
  1961  000005                     i2___awmod@counter:
  1962                           	opt stack 0
  1963  000005                     i2___wmul@product:
  1964                           	opt stack 0
  1965  000005                     i2___lwdiv@quotient:
  1966                           	opt stack 0
  1967                           
  1968                           ; 2 bytes @ 0x4
  1969  000005                     	ds	1
  1970  000006                     i2___awdiv@sign:
  1971                           	opt stack 0
  1972  000006                     i2___awmod@sign:
  1973                           	opt stack 0
  1974                           
  1975                           ; 1 bytes @ 0x5
  1976  000006                     	ds	1
  1977  000007                     i2___lwdiv@counter:
  1978                           	opt stack 0
  1979  000007                     i2___awdiv@quotient:
  1980                           	opt stack 0
  1981                           
  1982                           ; 2 bytes @ 0x6
  1983  000007                     	ds	1
  1984  000008                     ?i2___lwmod:
  1985                           	opt stack 0
  1986  000008                     i2___lwmod@dividend:
  1987                           	opt stack 0
  1988                           
  1989                           ; 2 bytes @ 0x7
  1990  000008                     	ds	1
  1991  000009                     i2stopOperation@address_code:
  1992                           	opt stack 0
  1993                           
  1994                           ; 1 bytes @ 0x8
  1995  000009                     	ds	1
  1996  00000A                     i2stopOperation@address:
  1997                           	opt stack 0
  1998  00000A                     i2___lwmod@divisor:
  1999                           	opt stack 0
  2000                           
  2001                           ; 2 bytes @ 0x9
  2002  00000A                     	ds	2
  2003  00000C                     i2___lwmod@counter:
  2004                           	opt stack 0
  2005                           
  2006                           ; 1 bytes @ 0xB
  2007  00000C                     	ds	1
  2008  00000D                     ?i2_printf:
  2009                           	opt stack 0
  2010  00000D                     i2printf@f:
  2011                           	opt stack 0
  2012                           
  2013                           ; 2 bytes @ 0xC
  2014  00000D                     	ds	6
  2015  000013                     ??i2_printf:
  2016                           
  2017                           ; 1 bytes @ 0x12
  2018  000013                     	ds	4
  2019  000017                     i2printf@idx:
  2020                           	opt stack 0
  2021                           
  2022                           ; 1 bytes @ 0x16
  2023  000017                     	ds	1
  2024  000018                     i2printf@ap:
  2025                           	opt stack 0
  2026                           
  2027                           ; 2 bytes @ 0x17
  2028  000018                     	ds	2
  2029  00001A                     i2printf@prec:
  2030                           	opt stack 0
  2031                           
  2032                           ; 1 bytes @ 0x19
  2033  00001A                     	ds	1
  2034  00001B                     i2printf@val:
  2035                           	opt stack 0
  2036                           
  2037                           ; 2 bytes @ 0x1A
  2038  00001B                     	ds	2
  2039  00001D                     i2printf@flag:
  2040                           	opt stack 0
  2041                           
  2042                           ; 1 bytes @ 0x1C
  2043  00001D                     	ds	1
  2044  00001E                     i2printf@width:
  2045                           	opt stack 0
  2046                           
  2047                           ; 2 bytes @ 0x1D
  2048  00001E                     	ds	2
  2049  000020                     i2printf@c:
  2050                           	opt stack 0
  2051                           
  2052                           ; 1 bytes @ 0x1F
  2053  000020                     	ds	1
  2054  000021                     keypressed@right:
  2055                           	opt stack 0
  2056                           
  2057                           ; 1 bytes @ 0x20
  2058  000021                     	ds	1
  2059  000022                     keypressed@key:
  2060                           	opt stack 0
  2061                           
  2062                           ; 1 bytes @ 0x21
  2063  000022                     	ds	1
  2064  000023                     keypressed@left:
  2065                           	opt stack 0
  2066                           
  2067                           ; 1 bytes @ 0x22
  2068  000023                     	ds	1
  2069  000024                     keypressed@i:
  2070                           	opt stack 0
  2071                           
  2072                           ; 1 bytes @ 0x23
  2073  000024                     	ds	1
  2074  000025                     ??_ISR:
  2075                           
  2076                           ; 1 bytes @ 0x24
  2077  000025                     	ds	15
  2078  000034                     ISR@keypress:
  2079                           	opt stack 0
  2080                           
  2081                           ; 1 bytes @ 0x33
  2082  000034                     	ds	1
  2083                           tblptru	equ	0xFF8
  2084                           tblptrh	equ	0xFF7
  2085                           tblptrl	equ	0xFF6
  2086                           tablat	equ	0xFF5
  2087                           postinc0	equ	0xFEE
  2088                           wreg	equ	0xFE8
  2089                           postdec1	equ	0xFE5
  2090                           fsr1l	equ	0xFE1
  2091                           
  2092 ;;
  2093 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2094 ;;
  2095 ;; *************** function _main *****************
  2096 ;; Defined at:
  2097 ;;		line 63 in file "../main.c"
  2098 ;; Parameters:    Size  Location     Type
  2099 ;;		None
  2100 ;; Auto vars:     Size  Location     Type
  2101 ;;  i               1   68[BANK0 ] unsigned char 
  2102 ;;  i               1   67[BANK0 ] unsigned char 
  2103 ;;  i               1   66[BANK0 ] unsigned char 
  2104 ;;  steps           1   70[BANK0 ] unsigned char 
  2105 ;;  steps           1   69[BANK0 ] unsigned char 
  2106 ;;  steps           1   71[BANK0 ] unsigned char 
  2107 ;;  i               1   65[BANK0 ] unsigned char 
  2108 ;;  i               1   64[BANK0 ] unsigned char 
  2109 ;;  keypress        1   63[BANK0 ] unsigned char 
  2110 ;; Return value:  Size  Location     Type
  2111 ;;                  1    wreg      void 
  2112 ;; Registers used:
  2113 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2114 ;; Tracked objects:
  2115 ;;		On entry : 0/0
  2116 ;;		On exit  : 0/0
  2117 ;;		Unchanged: 0/0
  2118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2119 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2120 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2121 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2122 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2123 ;;Total ram usage:       11 bytes
  2124 ;; Hardware stack levels required when called:    9
  2125 ;; This function calls:
  2126 ;;		_I2C_Master_Init
  2127 ;;		_I2C_Master_Read
  2128 ;;		_I2C_Master_Start
  2129 ;;		_I2C_Master_Stop
  2130 ;;		_I2C_Master_Write
  2131 ;;		_initLCD
  2132 ;;		_lcdInst
  2133 ;;		_logPC
  2134 ;;		_printf
  2135 ;;		_readADC
  2136 ;;		_show_log
  2137 ;;		_stopOperation
  2138 ;;		_testBatteries
  2139 ;;		_wait_2ms
  2140 ;; This function is called by:
  2141 ;;		Startup code after reset
  2142 ;; This function uses a non-reentrant model
  2143 ;;
  2144                           
  2145                           	psect	text0
  2146  000012                     __ptext0:
  2147                           	opt stack 0
  2148  000012                     _main:
  2149                           	opt stack 22
  2150                           
  2151                           ;main.c: 65: TRISA = 0b00101111;
  2152                           
  2153                           ;incstack = 0
  2154  000012  0E2F               	movlw	47
  2155  000014  6E92               	movwf	3986,c	;volatile
  2156                           
  2157                           ;main.c: 66: TRISB = 0b11110010;
  2158  000016  0EF2               	movlw	242
  2159  000018  6E93               	movwf	3987,c	;volatile
  2160                           
  2161                           ;main.c: 67: TRISC = 0x00;
  2162  00001A  0E00               	movlw	0
  2163  00001C  6E94               	movwf	3988,c	;volatile
  2164                           
  2165                           ;main.c: 68: TRISD = 0x00;
  2166  00001E  0E00               	movlw	0
  2167  000020  6E95               	movwf	3989,c	;volatile
  2168                           
  2169                           ;main.c: 69: TRISE = 0b00000001;
  2170  000022  0E01               	movlw	1
  2171  000024  6E96               	movwf	3990,c	;volatile
  2172                           
  2173                           ;main.c: 71: LATA = 0x00;
  2174  000026  0E00               	movlw	0
  2175  000028  6E89               	movwf	3977,c	;volatile
  2176                           
  2177                           ;main.c: 72: LATB = 0x00;
  2178  00002A  0E00               	movlw	0
  2179  00002C  6E8A               	movwf	3978,c	;volatile
  2180                           
  2181                           ;main.c: 73: LATC = 0x00;
  2182  00002E  0E00               	movlw	0
  2183  000030  6E8B               	movwf	3979,c	;volatile
  2184                           
  2185                           ;main.c: 74: LATD = 0x00;
  2186  000032  0E00               	movlw	0
  2187  000034  6E8C               	movwf	3980,c	;volatile
  2188                           
  2189                           ;main.c: 75: LATE = 0x00;
  2190  000036  0E00               	movlw	0
  2191  000038  6E8D               	movwf	3981,c	;volatile
  2192                           
  2193                           ;main.c: 77: ADCON0 = 0x00;
  2194  00003A  0E00               	movlw	0
  2195  00003C  6EC2               	movwf	4034,c	;volatile
  2196                           
  2197                           ;main.c: 78: ADCON1 = 0b00001001;
  2198  00003E  0E09               	movlw	9
  2199  000040  6EC1               	movwf	4033,c	;volatile
  2200                           
  2201                           ;main.c: 79: ADCON2 = 0b10110001;
  2202  000042  0EB1               	movlw	177
  2203  000044  6EC0               	movwf	4032,c	;volatile
  2204                           
  2205                           ;main.c: 83: CVRCON = 0x00;
  2206  000046  0E00               	movlw	0
  2207  000048  6EB5               	movwf	4021,c	;volatile
  2208                           
  2209                           ;main.c: 84: CMCONbits.CIS = 0;
  2210  00004A  96B4               	bcf	4020,3,c	;volatile
  2211                           
  2212                           ;main.c: 86: GIE = 1;
  2213  00004C  8EF2               	bsf	intcon,7,c	;volatile
  2214                           
  2215                           ;main.c: 87: PEIE = 1;
  2216  00004E  8CF2               	bsf	intcon,6,c	;volatile
  2217                           
  2218                           ;main.c: 88: INT1IE = 1;
  2219  000050  86F0               	bsf	intcon3,3,c	;volatile
  2220                           
  2221                           ;main.c: 89: INT1IF = 0;
  2222  000052  90F0               	bcf	intcon3,0,c	;volatile
  2223                           
  2224                           ;main.c: 90: TMR0IE = 1;
  2225  000054  8AF2               	bsf	intcon,5,c	;volatile
  2226                           
  2227                           ;main.c: 91: TMR0IF = 0;
  2228  000056  94F2               	bcf	intcon,2,c	;volatile
  2229                           
  2230                           ;main.c: 92: TMR1IE = 1;
  2231  000058  809D               	bsf	3997,0,c	;volatile
  2232                           
  2233                           ;main.c: 93: TMR1IF = 0;
  2234  00005A  909E               	bcf	3998,0,c	;volatile
  2235                           
  2236                           ;main.c: 94: TMR2IE = 1;
  2237  00005C  829D               	bsf	3997,1,c	;volatile
  2238                           
  2239                           ;main.c: 95: TMR2IF = 0;
  2240  00005E  929E               	bcf	3998,1,c	;volatile
  2241                           
  2242                           ;main.c: 99: T0CON = 0b00000111;
  2243  000060  0E07               	movlw	7
  2244  000062  6ED5               	movwf	4053,c	;volatile
  2245                           
  2246                           ;main.c: 107: TMR0 = 55770;
  2247  000064  0ED9               	movlw	217
  2248  000066  6ED7               	movwf	4055,c	;volatile
  2249  000068  0EDA               	movlw	218
  2250  00006A  6ED6               	movwf	4054,c	;volatile
  2251                           
  2252                           ;main.c: 116: T1CON = 0b10000000;
  2253  00006C  0E80               	movlw	128
  2254  00006E  6ECD               	movwf	4045,c	;volatile
  2255                           
  2256                           ;main.c: 125: TMR1 = 60535;
  2257  000070  0EEC               	movlw	236
  2258  000072  6ECF               	movwf	4047,c	;volatile
  2259  000074  0E77               	movlw	119
  2260  000076  6ECE               	movwf	4046,c	;volatile
  2261                           
  2262                           ;main.c: 131: T2CON = 0b00000010;
  2263  000078  0E02               	movlw	2
  2264  00007A  6ECA               	movwf	4042,c	;volatile
  2265                           
  2266                           ;main.c: 140: TMR2 = 155;
  2267  00007C  0E9B               	movlw	155
  2268  00007E  6ECC               	movwf	4044,c	;volatile
  2269                           
  2270                           ;main.c: 150: initLCD();
  2271  000080  EC4A  F01A         	call	_initLCD	;wreg free
  2272                           
  2273                           ;main.c: 151: nRBPU = 0;
  2274  000084  9EF1               	bcf	intcon2,7,c	;volatile
  2275                           
  2276                           ;main.c: 152: I2C_Master_Init(10000);
  2277  000086  0E10               	movlw	16
  2278  000088  0100               	movlb	0	; () banked
  2279  00008A  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  2280  00008C  0E27               	movlw	39
  2281  00008E  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  2282  000090  0E00               	movlw	0
  2283  000092  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  2284  000094  0E00               	movlw	0
  2285  000096  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  2286  000098  ECCA  F019         	call	_I2C_Master_Init	;wreg free
  2287                           
  2288                           ;main.c: 153: (INTCONbits.GIE = 1);
  2289  00009C  8EF2               	bsf	intcon,7,c	;volatile
  2290                           
  2291                           ;main.c: 156: while (screenMode == 2){
  2292                           
  2293                           ;main.c: 155: while (1) {
  2294  00009E  D056               	goto	l7131
  2295  0000A0                     l7093:
  2296                           
  2297                           ;main.c: 157: lcdInst(0b10000000);;
  2298  0000A0  0E80               	movlw	128
  2299  0000A2  ECDF  F01B         	call	_lcdInst
  2300                           
  2301                           ;main.c: 158: printf("PRESS * TO START");
  2302  0000A6  0EED               	movlw	low STR_1
  2303  0000A8  0100               	movlb	0	; () banked
  2304  0000AA  6F8C               	movwf	printf@f& (0+255),b
  2305  0000AC  0EFF               	movlw	high STR_1
  2306  0000AE  0100               	movlb	0	; () banked
  2307  0000B0  6F8D               	movwf	(printf@f+1)& (0+255),b
  2308  0000B2  EC59  F00C         	call	_printf	;wreg free
  2309                           
  2310                           ;main.c: 159: lcdInst(0b11000000);;
  2311  0000B6  0EC0               	movlw	192
  2312  0000B8  ECDF  F01B         	call	_lcdInst
  2313                           
  2314                           ;main.c: 160: printf("< TOGGLE  LOGS >");
  2315  0000BC  0EDC               	movlw	low STR_2
  2316  0000BE  0100               	movlb	0	; () banked
  2317  0000C0  6F8C               	movwf	printf@f& (0+255),b
  2318  0000C2  0EFF               	movlw	high STR_2
  2319  0000C4  0100               	movlb	0	; () banked
  2320  0000C6  6F8D               	movwf	(printf@f+1)& (0+255),b
  2321  0000C8  EC59  F00C         	call	_printf	;wreg free
  2322                           
  2323                           ;main.c: 161: for(unsigned char i=0;i<50;i++){
  2324  0000CC  0E00               	movlw	0
  2325  0000CE  0100               	movlb	0	; () banked
  2326  0000D0  6FC0               	movwf	main@i& (0+255),b
  2327  0000D2                     l7101:
  2328                           
  2329                           ; BSR set to: 0
  2330  0000D2  0E31               	movlw	49
  2331  0000D4  0100               	movlb	0	; () banked
  2332  0000D6  65C0               	cpfsgt	main@i& (0+255),b
  2333  0000D8  D001               	goto	l7105
  2334  0000DA  D011               	goto	l7113
  2335  0000DC                     l7105:
  2336                           
  2337                           ; BSR set to: 0
  2338                           ;main.c: 162: if (screenMode != 2)
  2339  0000DC  0E02               	movlw	2
  2340  0000DE  0100               	movlb	0	; () banked
  2341  0000E0  19FA               	xorwf	_screenMode& (0+255),w,b
  2342  0000E2  A4D8               	btfss	status,2,c
  2343  0000E4  D00C               	goto	l7113
  2344                           
  2345                           ; BSR set to: 0
  2346                           ;main.c: 164: _delay((unsigned long)((10)*(10000000/4000.0)));
  2347                           
  2348                           ; BSR set to: 0
  2349                           
  2350                           ; BSR set to: 0
  2351                           ;main.c: 163: break;
  2352  0000E6  0E21               	movlw	33
  2353  0000E8  0100               	movlb	0	; () banked
  2354  0000EA  6FBD               	movwf	??_main& (0+255),b
  2355  0000EC  0E76               	movlw	118
  2356  0000EE                     u7687:
  2357  0000EE  2EE8               	decfsz	wreg,f,c
  2358  0000F0  D7FE               	bra	u7687
  2359  0000F2  2FBD               	decfsz	??_main& (0+255),f,b
  2360  0000F4  D7FC               	bra	u7687
  2361  0000F6  F000               	nop	
  2362  0000F8  0100               	movlb	0	; () banked
  2363  0000FA  2BC0               	incf	main@i& (0+255),f,b
  2364  0000FC  D7EA               	goto	l7101
  2365  0000FE                     l7113:
  2366                           
  2367                           ; BSR set to: 0
  2368                           ;main.c: 165: }
  2369                           ;main.c: 166: lcdInst(0b10000000);;
  2370  0000FE  0E80               	movlw	128
  2371  000100  ECDF  F01B         	call	_lcdInst
  2372                           
  2373                           ;main.c: 167: lcdInst(0b11000000);;
  2374  000104  0EC0               	movlw	192
  2375  000106  ECDF  F01B         	call	_lcdInst
  2376                           
  2377                           ;main.c: 168: printf(" <TOGGLE  LOGS> ");
  2378  00010A  0E65               	movlw	low STR_3
  2379  00010C  0100               	movlb	0	; () banked
  2380  00010E  6F8C               	movwf	printf@f& (0+255),b
  2381  000110  0EFF               	movlw	high STR_3
  2382  000112  0100               	movlb	0	; () banked
  2383  000114  6F8D               	movwf	(printf@f+1)& (0+255),b
  2384  000116  EC59  F00C         	call	_printf	;wreg free
  2385                           
  2386                           ;main.c: 169: for(unsigned char i=0;i<50;i++){
  2387  00011A  0E00               	movlw	0
  2388  00011C  0100               	movlb	0	; () banked
  2389  00011E  6FC1               	movwf	main@i_771& (0+255),b
  2390  000120                     l7119:
  2391                           
  2392                           ; BSR set to: 0
  2393  000120  0E31               	movlw	49
  2394  000122  0100               	movlb	0	; () banked
  2395  000124  65C1               	cpfsgt	main@i_771& (0+255),b
  2396  000126  D001               	goto	l7123
  2397  000128  D011               	goto	l7131
  2398  00012A                     l7123:
  2399                           
  2400                           ; BSR set to: 0
  2401                           ;main.c: 170: if (screenMode != 2)
  2402  00012A  0E02               	movlw	2
  2403  00012C  0100               	movlb	0	; () banked
  2404  00012E  19FA               	xorwf	_screenMode& (0+255),w,b
  2405  000130  A4D8               	btfss	status,2,c
  2406  000132  D00C               	goto	l7131
  2407                           
  2408                           ; BSR set to: 0
  2409                           ;main.c: 172: _delay((unsigned long)((10)*(10000000/4000.0)));
  2410                           
  2411                           ; BSR set to: 0
  2412                           
  2413                           ; BSR set to: 0
  2414                           ;main.c: 171: break;
  2415  000134  0E21               	movlw	33
  2416  000136  0100               	movlb	0	; () banked
  2417  000138  6FBD               	movwf	??_main& (0+255),b
  2418  00013A  0E76               	movlw	118
  2419  00013C                     u7697:
  2420  00013C  2EE8               	decfsz	wreg,f,c
  2421  00013E  D7FE               	bra	u7697
  2422  000140  2FBD               	decfsz	??_main& (0+255),f,b
  2423  000142  D7FC               	bra	u7697
  2424  000144  F000               	nop	
  2425  000146  0100               	movlb	0	; () banked
  2426  000148  2BC1               	incf	main@i_771& (0+255),f,b
  2427  00014A  D7EA               	goto	l7119
  2428  00014C                     l7131:
  2429  00014C  0E02               	movlw	2
  2430  00014E  0100               	movlb	0	; () banked
  2431  000150  19FA               	xorwf	_screenMode& (0+255),w,b
  2432  000152  A4D8               	btfss	status,2,c
  2433  000154  D371               	goto	l7467
  2434  000156  D7A4               	goto	l7093
  2435  000158                     l7133:
  2436                           
  2437                           ; BSR set to: 0
  2438                           ;main.c: 180: lcdInst(0b10000000);;
  2439  000158  0E80               	movlw	128
  2440  00015A  ECDF  F01B         	call	_lcdInst
  2441                           
  2442                           ;main.c: 181: lcdInst(0b11000000);;
  2443  00015E  0EC0               	movlw	192
  2444  000160  ECDF  F01B         	call	_lcdInst
  2445                           
  2446                           ;main.c: 182: printf("PRESS # TO STOP ");
  2447  000164  0E87               	movlw	low STR_4
  2448  000166  0100               	movlb	0	; () banked
  2449  000168  6F8C               	movwf	printf@f& (0+255),b
  2450  00016A  0EFF               	movlw	high STR_4
  2451  00016C  0100               	movlb	0	; () banked
  2452  00016E  6F8D               	movwf	(printf@f+1)& (0+255),b
  2453  000170  EC59  F00C         	call	_printf	;wreg free
  2454                           
  2455                           ;main.c: 187: if (startGear){
  2456  000174  0100               	movlb	0	; () banked
  2457  000176  51EC               	movf	_startGear& (0+255),w,b
  2458  000178  B4D8               	btfsc	status,2,c
  2459  00017A  D0E9               	goto	l7233
  2460                           
  2461                           ; BSR set to: 0
  2462                           ;main.c: 188: wait_2ms(2000);
  2463  00017C  0E07               	movlw	7
  2464  00017E  0100               	movlb	0	; () banked
  2465  000180  6F81               	movwf	(wait_2ms@x+1)& (0+255),b
  2466  000182  0ED0               	movlw	208
  2467  000184  6F80               	movwf	wait_2ms@x& (0+255),b
  2468  000186  EC7F  F01B         	call	_wait_2ms	;wreg free
  2469                           
  2470                           ;main.c: 189: startGear = 0;
  2471  00018A  0E00               	movlw	0
  2472  00018C  0100               	movlb	0	; () banked
  2473  00018E  6FEC               	movwf	_startGear& (0+255),b
  2474                           
  2475                           ; BSR set to: 0
  2476                           ;main.c: 190: LATDbits.LD0= 0;;
  2477  000190  908C               	bcf	3980,0,c	;volatile
  2478                           
  2479                           ; BSR set to: 0
  2480                           ;main.c: 191: doneTimer = 0;
  2481  000192  0E00               	movlw	0
  2482  000194  0100               	movlb	0	; () banked
  2483  000196  6FE3               	movwf	_doneTimer& (0+255),b
  2484                           
  2485                           ; BSR set to: 0
  2486                           ;main.c: 193: unsigned char steps = 0;
  2487  000198  0E00               	movlw	0
  2488  00019A  0100               	movlb	0	; () banked
  2489  00019C  6FC7               	movwf	main@steps& (0+255),b
  2490                           
  2491                           ;main.c: 194: while(steps<20 && screenMode==1){
  2492  00019E  D016               	goto	l7159
  2493  0001A0                     l7149:
  2494                           
  2495                           ; BSR set to: 0
  2496                           ;main.c: 195: steps++;
  2497  0001A0  0100               	movlb	0	; () banked
  2498  0001A2  2BC7               	incf	main@steps& (0+255),f,b
  2499                           
  2500                           ; BSR set to: 0
  2501                           ;main.c: 196: LATDbits.LD1 = 1;;
  2502  0001A4  828C               	bsf	3980,1,c	;volatile
  2503                           
  2504                           ; BSR set to: 0
  2505                           ;main.c: 197: _delay((unsigned long)((5)*(10000000/4000.0)));
  2506  0001A6  0E11               	movlw	17
  2507  0001A8  0100               	movlb	0	; () banked
  2508  0001AA  6FBD               	movwf	??_main& (0+255),b
  2509  0001AC  0E3A               	movlw	58
  2510  0001AE                     u7707:
  2511  0001AE  2EE8               	decfsz	wreg,f,c
  2512  0001B0  D7FE               	bra	u7707
  2513  0001B2  2FBD               	decfsz	??_main& (0+255),f,b
  2514  0001B4  D7FC               	bra	u7707
  2515  0001B6  F000               	nop	
  2516                           
  2517                           ;main.c: 198: LATDbits.LD1 = 0;;
  2518  0001B8  928C               	bcf	3980,1,c	;volatile
  2519                           
  2520                           ;main.c: 199: _delay((unsigned long)((5)*(10000000/4000.0)));
  2521  0001BA  0E11               	movlw	17
  2522  0001BC  0100               	movlb	0	; () banked
  2523  0001BE  6FBD               	movwf	??_main& (0+255),b
  2524  0001C0  0E3A               	movlw	58
  2525  0001C2                     u7717:
  2526  0001C2  2EE8               	decfsz	wreg,f,c
  2527  0001C4  D7FE               	bra	u7717
  2528  0001C6  2FBD               	decfsz	??_main& (0+255),f,b
  2529  0001C8  D7FC               	bra	u7717
  2530  0001CA  F000               	nop	
  2531  0001CC                     l7159:
  2532  0001CC  0E14               	movlw	20
  2533  0001CE  0100               	movlb	0	; () banked
  2534  0001D0  61C7               	cpfslt	main@steps& (0+255),b
  2535  0001D2  D004               	goto	l7163
  2536                           
  2537                           ; BSR set to: 0
  2538  0001D4  0100               	movlb	0	; () banked
  2539  0001D6  05FA               	decf	_screenMode& (0+255),w,b
  2540  0001D8  B4D8               	btfsc	status,2,c
  2541  0001DA  D7E2               	goto	l7149
  2542  0001DC                     l7163:
  2543                           
  2544                           ; BSR set to: 0
  2545                           ;main.c: 200: }
  2546                           ;main.c: 201: steps = 0;
  2547  0001DC  0E00               	movlw	0
  2548  0001DE  0100               	movlb	0	; () banked
  2549  0001E0  6FC7               	movwf	main@steps& (0+255),b
  2550                           
  2551                           ;main.c: 202: while(steps < 178 && screenMode==1){
  2552  0001E2  D014               	goto	l7175
  2553  0001E4                     l7165:
  2554                           
  2555                           ; BSR set to: 0
  2556                           ;main.c: 203: steps++;
  2557  0001E4  0100               	movlb	0	; () banked
  2558  0001E6  2BC7               	incf	main@steps& (0+255),f,b
  2559                           
  2560                           ; BSR set to: 0
  2561                           ;main.c: 204: LATDbits.LD1 = 1;;
  2562  0001E8  828C               	bsf	3980,1,c	;volatile
  2563                           
  2564                           ; BSR set to: 0
  2565                           ;main.c: 205: _delay((unsigned long)((2)*(10000000/4000.0)));
  2566  0001EA  0E07               	movlw	7
  2567  0001EC  0100               	movlb	0	; () banked
  2568  0001EE  6FBD               	movwf	??_main& (0+255),b
  2569  0001F0  0E7D               	movlw	125
  2570  0001F2                     u7727:
  2571  0001F2  2EE8               	decfsz	wreg,f,c
  2572  0001F4  D7FE               	bra	u7727
  2573  0001F6  2FBD               	decfsz	??_main& (0+255),f,b
  2574  0001F8  D7FC               	bra	u7727
  2575                           
  2576                           ;main.c: 206: LATDbits.LD1 = 0;;
  2577  0001FA  928C               	bcf	3980,1,c	;volatile
  2578                           
  2579                           ;main.c: 207: _delay((unsigned long)((2)*(10000000/4000.0)));
  2580  0001FC  0E07               	movlw	7
  2581  0001FE  0100               	movlb	0	; () banked
  2582  000200  6FBD               	movwf	??_main& (0+255),b
  2583  000202  0E7D               	movlw	125
  2584  000204                     u7737:
  2585  000204  2EE8               	decfsz	wreg,f,c
  2586  000206  D7FE               	bra	u7737
  2587  000208  2FBD               	decfsz	??_main& (0+255),f,b
  2588  00020A  D7FC               	bra	u7737
  2589  00020C                     l7175:
  2590  00020C  0EB2               	movlw	178
  2591  00020E  0100               	movlb	0	; () banked
  2592  000210  61C7               	cpfslt	main@steps& (0+255),b
  2593  000212  D004               	goto	l7179
  2594                           
  2595                           ; BSR set to: 0
  2596  000214  0100               	movlb	0	; () banked
  2597  000216  05FA               	decf	_screenMode& (0+255),w,b
  2598  000218  B4D8               	btfsc	status,2,c
  2599  00021A  D7E4               	goto	l7165
  2600  00021C                     l7179:
  2601                           
  2602                           ; BSR set to: 0
  2603                           ;main.c: 208: }
  2604                           ;main.c: 209: steps = 0;
  2605  00021C  0E00               	movlw	0
  2606  00021E  0100               	movlb	0	; () banked
  2607  000220  6FC7               	movwf	main@steps& (0+255),b
  2608                           
  2609                           ;main.c: 210: while(steps <5 && screenMode==1){
  2610  000222  D016               	goto	l7191
  2611  000224                     l7181:
  2612                           
  2613                           ; BSR set to: 0
  2614                           ;main.c: 211: steps++;
  2615  000224  0100               	movlb	0	; () banked
  2616  000226  2BC7               	incf	main@steps& (0+255),f,b
  2617                           
  2618                           ; BSR set to: 0
  2619                           ;main.c: 212: LATDbits.LD1 = 1;;
  2620  000228  828C               	bsf	3980,1,c	;volatile
  2621                           
  2622                           ; BSR set to: 0
  2623                           ;main.c: 213: _delay((unsigned long)((5)*(10000000/4000.0)));
  2624  00022A  0E11               	movlw	17
  2625  00022C  0100               	movlb	0	; () banked
  2626  00022E  6FBD               	movwf	??_main& (0+255),b
  2627  000230  0E3A               	movlw	58
  2628  000232                     u7747:
  2629  000232  2EE8               	decfsz	wreg,f,c
  2630  000234  D7FE               	bra	u7747
  2631  000236  2FBD               	decfsz	??_main& (0+255),f,b
  2632  000238  D7FC               	bra	u7747
  2633  00023A  F000               	nop	
  2634                           
  2635                           ;main.c: 214: LATDbits.LD1 = 0;;
  2636  00023C  928C               	bcf	3980,1,c	;volatile
  2637                           
  2638                           ;main.c: 215: _delay((unsigned long)((5)*(10000000/4000.0)));
  2639  00023E  0E11               	movlw	17
  2640  000240  0100               	movlb	0	; () banked
  2641  000242  6FBD               	movwf	??_main& (0+255),b
  2642  000244  0E3A               	movlw	58
  2643  000246                     u7757:
  2644  000246  2EE8               	decfsz	wreg,f,c
  2645  000248  D7FE               	bra	u7757
  2646  00024A  2FBD               	decfsz	??_main& (0+255),f,b
  2647  00024C  D7FC               	bra	u7757
  2648  00024E  F000               	nop	
  2649  000250                     l7191:
  2650  000250  0E05               	movlw	5
  2651  000252  0100               	movlb	0	; () banked
  2652  000254  61C7               	cpfslt	main@steps& (0+255),b
  2653  000256  D004               	goto	l7195
  2654                           
  2655                           ; BSR set to: 0
  2656  000258  0100               	movlb	0	; () banked
  2657  00025A  05FA               	decf	_screenMode& (0+255),w,b
  2658  00025C  B4D8               	btfsc	status,2,c
  2659  00025E  D7E2               	goto	l7181
  2660  000260                     l7195:
  2661                           
  2662                           ; BSR set to: 0
  2663                           ;main.c: 216: }
  2664                           ;main.c: 217: steps = 0;
  2665  000260  0E00               	movlw	0
  2666  000262  0100               	movlb	0	; () banked
  2667  000264  6FC7               	movwf	main@steps& (0+255),b
  2668                           
  2669                           ; BSR set to: 0
  2670                           ;main.c: 218: LATDbits.LD0= 1;;
  2671  000266  808C               	bsf	3980,0,c	;volatile
  2672                           
  2673                           ;main.c: 219: while(steps <3 && screenMode==1){
  2674  000268  D016               	goto	l7209
  2675  00026A                     l7199:
  2676                           
  2677                           ; BSR set to: 0
  2678                           ;main.c: 220: steps++;
  2679  00026A  0100               	movlb	0	; () banked
  2680  00026C  2BC7               	incf	main@steps& (0+255),f,b
  2681                           
  2682                           ; BSR set to: 0
  2683                           ;main.c: 221: LATDbits.LD1 = 1;;
  2684  00026E  828C               	bsf	3980,1,c	;volatile
  2685                           
  2686                           ; BSR set to: 0
  2687                           ;main.c: 222: _delay((unsigned long)((5)*(10000000/4000.0)));
  2688  000270  0E11               	movlw	17
  2689  000272  0100               	movlb	0	; () banked
  2690  000274  6FBD               	movwf	??_main& (0+255),b
  2691  000276  0E3A               	movlw	58
  2692  000278                     u7767:
  2693  000278  2EE8               	decfsz	wreg,f,c
  2694  00027A  D7FE               	bra	u7767
  2695  00027C  2FBD               	decfsz	??_main& (0+255),f,b
  2696  00027E  D7FC               	bra	u7767
  2697  000280  F000               	nop	
  2698                           
  2699                           ;main.c: 223: LATDbits.LD1 = 0;;
  2700  000282  928C               	bcf	3980,1,c	;volatile
  2701                           
  2702                           ;main.c: 224: _delay((unsigned long)((5)*(10000000/4000.0)));
  2703  000284  0E11               	movlw	17
  2704  000286  0100               	movlb	0	; () banked
  2705  000288  6FBD               	movwf	??_main& (0+255),b
  2706  00028A  0E3A               	movlw	58
  2707  00028C                     u7777:
  2708  00028C  2EE8               	decfsz	wreg,f,c
  2709  00028E  D7FE               	bra	u7777
  2710  000290  2FBD               	decfsz	??_main& (0+255),f,b
  2711  000292  D7FC               	bra	u7777
  2712  000294  F000               	nop	
  2713  000296                     l7209:
  2714  000296  0E03               	movlw	3
  2715  000298  0100               	movlb	0	; () banked
  2716  00029A  61C7               	cpfslt	main@steps& (0+255),b
  2717  00029C  D004               	goto	l326
  2718                           
  2719                           ; BSR set to: 0
  2720  00029E  0100               	movlb	0	; () banked
  2721  0002A0  05FA               	decf	_screenMode& (0+255),w,b
  2722  0002A2  B4D8               	btfsc	status,2,c
  2723  0002A4  D7E2               	goto	l7199
  2724  0002A6                     l326:
  2725                           
  2726                           ; BSR set to: 0
  2727                           ;main.c: 225: }
  2728                           ;main.c: 226: LATDbits.LD0= 0;;
  2729  0002A6  908C               	bcf	3980,0,c	;volatile
  2730                           
  2731                           ; BSR set to: 0
  2732                           ;main.c: 227: steps = 0;
  2733  0002A8  0E00               	movlw	0
  2734  0002AA  0100               	movlb	0	; () banked
  2735  0002AC  6FC7               	movwf	main@steps& (0+255),b
  2736                           
  2737                           ; BSR set to: 0
  2738                           ;main.c: 228: wait_2ms(150);
  2739  0002AE  0E00               	movlw	0
  2740  0002B0  0100               	movlb	0	; () banked
  2741  0002B2  6F81               	movwf	(wait_2ms@x+1)& (0+255),b
  2742  0002B4  0E96               	movlw	150
  2743  0002B6  6F80               	movwf	wait_2ms@x& (0+255),b
  2744  0002B8  EC7F  F01B         	call	_wait_2ms	;wreg free
  2745                           
  2746                           ;main.c: 230: LATCbits.LC7 = 1;;
  2747  0002BC  8E8B               	bsf	3979,7,c	;volatile
  2748                           
  2749                           ;main.c: 231: wait_2ms(100);
  2750  0002BE  0E00               	movlw	0
  2751  0002C0  0100               	movlb	0	; () banked
  2752  0002C2  6F81               	movwf	(wait_2ms@x+1)& (0+255),b
  2753  0002C4  0E64               	movlw	100
  2754  0002C6  6F80               	movwf	wait_2ms@x& (0+255),b
  2755  0002C8  EC7F  F01B         	call	_wait_2ms	;wreg free
  2756                           
  2757                           ;main.c: 232: LATCbits.LC7 = 0;;
  2758  0002CC  9E8B               	bcf	3979,7,c	;volatile
  2759                           
  2760                           ;main.c: 233: plat1Right = 120;
  2761  0002CE  0E00               	movlw	0
  2762  0002D0  0100               	movlb	0	; () banked
  2763  0002D2  6FD2               	movwf	(_plat1Right+1)& (0+255),b
  2764  0002D4  0E78               	movlw	120
  2765  0002D6  6FD1               	movwf	_plat1Right& (0+255),b
  2766                           
  2767                           ;main.c: 234: plat2Left = 120;
  2768  0002D8  0E00               	movlw	0
  2769  0002DA  0100               	movlb	0	; () banked
  2770  0002DC  6FD4               	movwf	(_plat2Left+1)& (0+255),b
  2771  0002DE  0E78               	movlw	120
  2772  0002E0  6FD3               	movwf	_plat2Left& (0+255),b
  2773  0002E2                     l7223:
  2774                           
  2775                           ; BSR set to: 0
  2776  0002E2  0100               	movlb	0	; () banked
  2777  0002E4  05FA               	decf	_screenMode& (0+255),w,b
  2778  0002E6  A4D8               	btfss	status,2,c
  2779  0002E8  D012               	goto	l7227
  2780                           
  2781                           ; BSR set to: 0
  2782  0002EA  0100               	movlb	0	; () banked
  2783  0002EC  51D3               	movf	_plat2Left& (0+255),w,b
  2784  0002EE  0100               	movlb	0	; () banked
  2785  0002F0  11D1               	iorwf	_plat1Right& (0+255),w,b
  2786  0002F2  0100               	movlb	0	; () banked
  2787  0002F4  6FBD               	movwf	??_main& (0+255),b
  2788  0002F6  0100               	movlb	0	; () banked
  2789  0002F8  51D4               	movf	(_plat2Left+1)& (0+255),w,b
  2790  0002FA  0100               	movlb	0	; () banked
  2791  0002FC  11D2               	iorwf	(_plat1Right+1)& (0+255),w,b
  2792  0002FE  0100               	movlb	0	; () banked
  2793  000300  6FBE               	movwf	(??_main+1)& (0+255),b
  2794  000302  0100               	movlb	0	; () banked
  2795  000304  51BD               	movf	??_main& (0+255),w,b
  2796  000306  0100               	movlb	0	; () banked
  2797  000308  11BE               	iorwf	(??_main+1)& (0+255),w,b
  2798  00030A  A4D8               	btfss	status,2,c
  2799  00030C  D7EA               	goto	l7223
  2800  00030E                     l7227:
  2801                           
  2802                           ; BSR set to: 0
  2803                           ;main.c: 236: plat1Left = 120;
  2804  00030E  0E00               	movlw	0
  2805  000310  0100               	movlb	0	; () banked
  2806  000312  6FD0               	movwf	(_plat1Left+1)& (0+255),b
  2807  000314  0E78               	movlw	120
  2808  000316  6FCF               	movwf	_plat1Left& (0+255),b
  2809                           
  2810                           ;main.c: 237: plat2Right = 120;
  2811  000318  0E00               	movlw	0
  2812  00031A  0100               	movlb	0	; () banked
  2813  00031C  6FD6               	movwf	(_plat2Right+1)& (0+255),b
  2814  00031E  0E78               	movlw	120
  2815  000320  6FD5               	movwf	_plat2Right& (0+255),b
  2816  000322                     l7229:
  2817                           
  2818                           ; BSR set to: 0
  2819  000322  0100               	movlb	0	; () banked
  2820  000324  05FA               	decf	_screenMode& (0+255),w,b
  2821  000326  A4D8               	btfss	status,2,c
  2822  000328  D012               	goto	l7233
  2823                           
  2824                           ; BSR set to: 0
  2825  00032A  0100               	movlb	0	; () banked
  2826  00032C  51D5               	movf	_plat2Right& (0+255),w,b
  2827  00032E  0100               	movlb	0	; () banked
  2828  000330  11CF               	iorwf	_plat1Left& (0+255),w,b
  2829  000332  0100               	movlb	0	; () banked
  2830  000334  6FBD               	movwf	??_main& (0+255),b
  2831  000336  0100               	movlb	0	; () banked
  2832  000338  51D6               	movf	(_plat2Right+1)& (0+255),w,b
  2833  00033A  0100               	movlb	0	; () banked
  2834  00033C  11D0               	iorwf	(_plat1Left+1)& (0+255),w,b
  2835  00033E  0100               	movlb	0	; () banked
  2836  000340  6FBE               	movwf	(??_main+1)& (0+255),b
  2837  000342  0100               	movlb	0	; () banked
  2838  000344  51BD               	movf	??_main& (0+255),w,b
  2839  000346  0100               	movlb	0	; () banked
  2840  000348  11BE               	iorwf	(??_main+1)& (0+255),w,b
  2841  00034A  A4D8               	btfss	status,2,c
  2842  00034C  D7EA               	goto	l7229
  2843  00034E                     l7233:
  2844                           
  2845                           ; BSR set to: 0
  2846                           ;main.c: 239: }
  2847                           ;main.c: 241: readADC(0);
  2848  00034E  0E00               	movlw	0
  2849  000350  EC8C  F01B         	call	_readADC
  2850                           
  2851                           ;main.c: 246: if (ADRES < 22 | ADRES > 55){
  2852  000354  50C4               	movf	4036,w,c	;volatile
  2853  000356  E104               	bnz	u7111
  2854  000358  0E38               	movlw	56
  2855  00035A  5CC3               	subwf	4035,w,c	;volatile
  2856  00035C  A0D8               	btfss	status,0,c
  2857  00035E  D002               	goto	u7110
  2858  000360                     u7111:
  2859  000360  0E01               	movlw	1
  2860  000362  D001               	goto	u7112
  2861  000364                     u7110:
  2862  000364  0E00               	movlw	0
  2863  000366                     u7112:
  2864  000366  0100               	movlb	0	; () banked
  2865  000368  6FBD               	movwf	??_main& (0+255),b
  2866  00036A  50C4               	movf	4036,w,c	;volatile
  2867  00036C  E106               	bnz	u7120
  2868  00036E  0E16               	movlw	22
  2869  000370  5CC3               	subwf	4035,w,c	;volatile
  2870  000372  B0D8               	btfsc	status,0,c
  2871  000374  D002               	goto	u7120
  2872  000376  0E01               	movlw	1
  2873  000378  D001               	goto	u7122
  2874  00037A                     u7120:
  2875  00037A  0E00               	movlw	0
  2876  00037C                     u7122:
  2877  00037C  0100               	movlb	0	; () banked
  2878  00037E  11BD               	iorwf	??_main& (0+255),w,b
  2879  000380  A0E8               	btfss	wreg,0,c
  2880  000382  D1E8               	goto	l7413
  2881                           
  2882                           ; BSR set to: 0
  2883                           ;main.c: 247: wait_2ms(250);
  2884  000384  0E00               	movlw	0
  2885  000386  0100               	movlb	0	; () banked
  2886  000388  6F81               	movwf	(wait_2ms@x+1)& (0+255),b
  2887  00038A  0EFA               	movlw	250
  2888  00038C  6F80               	movwf	wait_2ms@x& (0+255),b
  2889  00038E  EC7F  F01B         	call	_wait_2ms	;wreg free
  2890                           
  2891                           ;main.c: 248: sorting = 1;
  2892  000392  0E01               	movlw	1
  2893  000394  6E53               	movwf	_sorting,c
  2894                           
  2895                           ;main.c: 249: LATCbits.LC7 = 1;;
  2896  000396  8E8B               	bsf	3979,7,c	;volatile
  2897                           
  2898                           ;main.c: 250: wait_2ms(500);
  2899  000398  0E01               	movlw	1
  2900  00039A  0100               	movlb	0	; () banked
  2901  00039C  6F81               	movwf	(wait_2ms@x+1)& (0+255),b
  2902  00039E  0EF4               	movlw	244
  2903  0003A0  6F80               	movwf	wait_2ms@x& (0+255),b
  2904  0003A2  EC7F  F01B         	call	_wait_2ms	;wreg free
  2905                           
  2906                           ;main.c: 251: testBatteries();
  2907  0003A6  ECDA  F015         	call	_testBatteries	;wreg free
  2908                           
  2909                           ;main.c: 252: turn1BackRight = plat1Left;
  2910  0003AA  C0CF  F0D9         	movff	_plat1Left,_turn1BackRight
  2911  0003AE  C0D0  F0DA         	movff	_plat1Left+1,_turn1BackRight+1
  2912                           
  2913                           ;main.c: 253: turn1BackLeft = plat1Right;
  2914  0003B2  C0D1  F0D7         	movff	_plat1Right,_turn1BackLeft
  2915  0003B6  C0D2  F0D8         	movff	_plat1Right+1,_turn1BackLeft+1
  2916                           
  2917                           ;main.c: 254: turn2BackRight = plat2Left;
  2918  0003BA  C0D3  F0DD         	movff	_plat2Left,_turn2BackRight
  2919  0003BE  C0D4  F0DE         	movff	_plat2Left+1,_turn2BackRight+1
  2920                           
  2921                           ;main.c: 255: turn2BackLeft = plat2Right;
  2922  0003C2  C0D5  F0DB         	movff	_plat2Right,_turn2BackLeft
  2923  0003C6  C0D6  F0DC         	movff	_plat2Right+1,_turn2BackLeft+1
  2924                           
  2925                           ;main.c: 256: LATCbits.LC7 = 0;;
  2926  0003CA  9E8B               	bcf	3979,7,c	;volatile
  2927                           
  2928                           ;main.c: 257: wait_2ms(100);
  2929  0003CC  0E00               	movlw	0
  2930  0003CE  0100               	movlb	0	; () banked
  2931  0003D0  6F81               	movwf	(wait_2ms@x+1)& (0+255),b
  2932  0003D2  0E64               	movlw	100
  2933  0003D4  6F80               	movwf	wait_2ms@x& (0+255),b
  2934  0003D6  EC7F  F01B         	call	_wait_2ms	;wreg free
  2935                           
  2936                           ;main.c: 259: if (doubleAA)
  2937  0003DA  0100               	movlb	0	; () banked
  2938  0003DC  51E4               	movf	_doubleAA& (0+255),w,b
  2939  0003DE  B4D8               	btfsc	status,2,c
  2940  0003E0  D005               	goto	l7261
  2941                           
  2942                           ; BSR set to: 0
  2943                           ;main.c: 260: plat1Right = 512;
  2944  0003E2  0E02               	movlw	2
  2945  0003E4  0100               	movlb	0	; () banked
  2946  0003E6  6FD2               	movwf	(_plat1Right+1)& (0+255),b
  2947  0003E8  0E00               	movlw	0
  2948  0003EA  6FD1               	movwf	_plat1Right& (0+255),b
  2949  0003EC                     l7261:
  2950                           
  2951                           ; BSR set to: 0
  2952                           ;main.c: 261: if (plat1Left)
  2953  0003EC  0100               	movlb	0	; () banked
  2954  0003EE  51CF               	movf	_plat1Left& (0+255),w,b
  2955  0003F0  0100               	movlb	0	; () banked
  2956  0003F2  11D0               	iorwf	(_plat1Left+1)& (0+255),w,b
  2957  0003F4  B4D8               	btfsc	status,2,c
  2958  0003F6  D002               	goto	l7265
  2959                           
  2960                           ; BSR set to: 0
  2961                           ;main.c: 262: step1 = 1;
  2962  0003F8  0E01               	movlw	1
  2963  0003FA  6E54               	movwf	_step1,c
  2964  0003FC                     l7265:
  2965                           
  2966                           ; BSR set to: 0
  2967                           ;main.c: 263: if (plat1Right)
  2968  0003FC  0100               	movlb	0	; () banked
  2969  0003FE  51D1               	movf	_plat1Right& (0+255),w,b
  2970  000400  0100               	movlb	0	; () banked
  2971  000402  11D2               	iorwf	(_plat1Right+1)& (0+255),w,b
  2972  000404  B4D8               	btfsc	status,2,c
  2973  000406  D002               	goto	l7269
  2974                           
  2975                           ; BSR set to: 0
  2976                           ;main.c: 264: step1 = 4;
  2977  000408  0E04               	movlw	4
  2978  00040A  6E54               	movwf	_step1,c
  2979  00040C                     l7269:
  2980                           
  2981                           ; BSR set to: 0
  2982                           ;main.c: 265: if (plat2Left)
  2983  00040C  0100               	movlb	0	; () banked
  2984  00040E  51D3               	movf	_plat2Left& (0+255),w,b
  2985  000410  0100               	movlb	0	; () banked
  2986  000412  11D4               	iorwf	(_plat2Left+1)& (0+255),w,b
  2987  000414  B4D8               	btfsc	status,2,c
  2988  000416  D002               	goto	l7273
  2989                           
  2990                           ; BSR set to: 0
  2991                           ;main.c: 266: step2 = 1;
  2992  000418  0E01               	movlw	1
  2993  00041A  6E55               	movwf	_step2,c
  2994  00041C                     l7273:
  2995                           
  2996                           ; BSR set to: 0
  2997                           ;main.c: 267: if (plat2Right)
  2998  00041C  0100               	movlb	0	; () banked
  2999  00041E  51D5               	movf	_plat2Right& (0+255),w,b
  3000  000420  0100               	movlb	0	; () banked
  3001  000422  11D6               	iorwf	(_plat2Right+1)& (0+255),w,b
  3002  000424  B4D8               	btfsc	status,2,c
  3003  000426  D002               	goto	l7277
  3004                           
  3005                           ; BSR set to: 0
  3006                           ;main.c: 268: step2 = 4;
  3007  000428  0E04               	movlw	4
  3008  00042A  6E55               	movwf	_step2,c
  3009  00042C                     l7277:
  3010                           
  3011                           ; BSR set to: 0
  3012                           ;main.c: 270: LATCbits.LC1 = 1;;
  3013  00042C  828B               	bsf	3979,1,c	;volatile
  3014                           
  3015                           ; BSR set to: 0
  3016                           ;main.c: 271: LATCbits.LC2 = 0;;
  3017  00042E  948B               	bcf	3979,2,c	;volatile
  3018                           
  3019                           ; BSR set to: 0
  3020                           ;main.c: 272: LATCbits.LC0 = 1;;
  3021  000430  808B               	bsf	3979,0,c	;volatile
  3022                           
  3023                           ; BSR set to: 0
  3024                           ;main.c: 273: LATEbits.LE2 = 0;;
  3025  000432  948D               	bcf	3981,2,c	;volatile
  3026  000434                     l7285:
  3027                           
  3028                           ; BSR set to: 0
  3029  000434  0100               	movlb	0	; () banked
  3030  000436  51D3               	movf	_plat2Left& (0+255),w,b
  3031  000438  0100               	movlb	0	; () banked
  3032  00043A  11CF               	iorwf	_plat1Left& (0+255),w,b
  3033  00043C  0100               	movlb	0	; () banked
  3034  00043E  6FBD               	movwf	??_main& (0+255),b
  3035  000440  0100               	movlb	0	; () banked
  3036  000442  51D4               	movf	(_plat2Left+1)& (0+255),w,b
  3037  000444  0100               	movlb	0	; () banked
  3038  000446  11D0               	iorwf	(_plat1Left+1)& (0+255),w,b
  3039  000448  0100               	movlb	0	; () banked
  3040  00044A  6FBE               	movwf	(??_main+1)& (0+255),b
  3041  00044C  0100               	movlb	0	; () banked
  3042  00044E  51D1               	movf	_plat1Right& (0+255),w,b
  3043  000450  0100               	movlb	0	; () banked
  3044  000452  13BD               	iorwf	??_main& (0+255),f,b
  3045  000454  0100               	movlb	0	; () banked
  3046  000456  51D2               	movf	(_plat1Right+1)& (0+255),w,b
  3047  000458  0100               	movlb	0	; () banked
  3048  00045A  13BE               	iorwf	(??_main+1)& (0+255),f,b
  3049  00045C  0100               	movlb	0	; () banked
  3050  00045E  51D5               	movf	_plat2Right& (0+255),w,b
  3051  000460  0100               	movlb	0	; () banked
  3052  000462  13BD               	iorwf	??_main& (0+255),f,b
  3053  000464  0100               	movlb	0	; () banked
  3054  000466  51D6               	movf	(_plat2Right+1)& (0+255),w,b
  3055  000468  0100               	movlb	0	; () banked
  3056  00046A  13BE               	iorwf	(??_main+1)& (0+255),f,b
  3057  00046C  0100               	movlb	0	; () banked
  3058  00046E  51BD               	movf	??_main& (0+255),w,b
  3059  000470  0100               	movlb	0	; () banked
  3060  000472  11BE               	iorwf	(??_main+1)& (0+255),w,b
  3061  000474  B4D8               	btfsc	status,2,c
  3062  000476  D004               	goto	l7289
  3063                           
  3064                           ; BSR set to: 0
  3065  000478  0100               	movlb	0	; () banked
  3066  00047A  05FA               	decf	_screenMode& (0+255),w,b
  3067  00047C  B4D8               	btfsc	status,2,c
  3068  00047E  D7DA               	goto	l7285
  3069  000480                     l7289:
  3070                           
  3071                           ; BSR set to: 0
  3072                           ;main.c: 277: if (doubleAA){
  3073  000480  0100               	movlb	0	; () banked
  3074  000482  51E4               	movf	_doubleAA& (0+255),w,b
  3075  000484  B4D8               	btfsc	status,2,c
  3076  000486  D00B               	goto	l7295
  3077                           
  3078                           ; BSR set to: 0
  3079                           ;main.c: 278: plat2Left = 512;
  3080  000488  0E02               	movlw	2
  3081  00048A  0100               	movlb	0	; () banked
  3082  00048C  6FD4               	movwf	(_plat2Left+1)& (0+255),b
  3083  00048E  0E00               	movlw	0
  3084  000490  6FD3               	movwf	_plat2Left& (0+255),b
  3085                           
  3086                           ;main.c: 279: step2 = 1;
  3087  000492  0E01               	movlw	1
  3088  000494  6E55               	movwf	_step2,c
  3089                           
  3090                           ; BSR set to: 0
  3091                           ;main.c: 280: turn2BackRight = plat2Left;
  3092  000496  C0D3  F0DD         	movff	_plat2Left,_turn2BackRight
  3093  00049A  C0D4  F0DE         	movff	_plat2Left+1,_turn2BackRight+1
  3094  00049E                     l7295:
  3095                           
  3096                           ; BSR set to: 0
  3097  00049E  0100               	movlb	0	; () banked
  3098  0004A0  51D3               	movf	_plat2Left& (0+255),w,b
  3099  0004A2  0100               	movlb	0	; () banked
  3100  0004A4  11D4               	iorwf	(_plat2Left+1)& (0+255),w,b
  3101  0004A6  B4D8               	btfsc	status,2,c
  3102  0004A8  D004               	goto	l7299
  3103                           
  3104                           ; BSR set to: 0
  3105  0004AA  0100               	movlb	0	; () banked
  3106  0004AC  05FA               	decf	_screenMode& (0+255),w,b
  3107  0004AE  B4D8               	btfsc	status,2,c
  3108  0004B0  D7F6               	goto	l7295
  3109  0004B2                     l7299:
  3110                           
  3111                           ; BSR set to: 0
  3112                           ;main.c: 284: wait_2ms(500);
  3113  0004B2  0E01               	movlw	1
  3114  0004B4  0100               	movlb	0	; () banked
  3115  0004B6  6F81               	movwf	(wait_2ms@x+1)& (0+255),b
  3116  0004B8  0EF4               	movlw	244
  3117  0004BA  6F80               	movwf	wait_2ms@x& (0+255),b
  3118  0004BC  EC7F  F01B         	call	_wait_2ms	;wreg free
  3119                           
  3120                           ;main.c: 286: if (((countC + countAA + count9V + countDrain) >= 15))
  3121  0004C0  0100               	movlb	0	; () banked
  3122  0004C2  51E0               	movf	_countAA& (0+255),w,b
  3123  0004C4  C0E1  F0BD         	movff	_countC,??_main
  3124  0004C8  0100               	movlb	0	; () banked
  3125  0004CA  6BBE               	clrf	(??_main+1)& (0+255),b
  3126  0004CC  0100               	movlb	0	; () banked
  3127  0004CE  27BD               	addwf	??_main& (0+255),f,b
  3128  0004D0  0E00               	movlw	0
  3129  0004D2  23BE               	addwfc	(??_main+1)& (0+255),f,b
  3130  0004D4  0100               	movlb	0	; () banked
  3131  0004D6  51DF               	movf	_count9V& (0+255),w,b
  3132  0004D8  0100               	movlb	0	; () banked
  3133  0004DA  27BD               	addwf	??_main& (0+255),f,b
  3134  0004DC  0E00               	movlw	0
  3135  0004DE  23BE               	addwfc	(??_main+1)& (0+255),f,b
  3136  0004E0  0100               	movlb	0	; () banked
  3137  0004E2  51E2               	movf	_countDrain& (0+255),w,b
  3138  0004E4  0100               	movlb	0	; () banked
  3139  0004E6  27BD               	addwf	??_main& (0+255),f,b
  3140  0004E8  0E00               	movlw	0
  3141  0004EA  23BE               	addwfc	(??_main+1)& (0+255),f,b
  3142  0004EC  0100               	movlb	0	; () banked
  3143  0004EE  BFBE               	btfsc	(??_main+1)& (0+255),7,b
  3144  0004F0  D009               	goto	l7305
  3145  0004F2  0100               	movlb	0	; () banked
  3146  0004F4  51BE               	movf	(??_main+1)& (0+255),w,b
  3147  0004F6  E104               	bnz	u7240
  3148  0004F8  0E0F               	movlw	15
  3149  0004FA  0100               	movlb	0	; () banked
  3150  0004FC  5DBD               	subwf	??_main& (0+255),w,b
  3151  0004FE  B0D8               	btfsc	status,0,c
  3152  000500                     u7240:
  3153                           
  3154                           ; BSR set to: 0
  3155                           ;main.c: 287: stopOperation();
  3156  000500  ECD1  F00F         	call	_stopOperation	;wreg free
  3157  000504                     l7305:
  3158                           
  3159                           ;main.c: 289: LATCbits.LC1 = 1;;
  3160  000504  828B               	bsf	3979,1,c	;volatile
  3161                           
  3162                           ;main.c: 290: LATCbits.LC2 = 0;;
  3163  000506  948B               	bcf	3979,2,c	;volatile
  3164                           
  3165                           ;main.c: 291: LATCbits.LC0 = 1;;
  3166  000508  808B               	bsf	3979,0,c	;volatile
  3167                           
  3168                           ;main.c: 292: LATEbits.LE2 = 0;;
  3169  00050A  948D               	bcf	3981,2,c	;volatile
  3170                           
  3171                           ;main.c: 293: plat1Left = turn1BackLeft;
  3172  00050C  C0D7  F0CF         	movff	_turn1BackLeft,_plat1Left
  3173  000510  C0D8  F0D0         	movff	_turn1BackLeft+1,_plat1Left+1
  3174                           
  3175                           ;main.c: 294: plat1Right = turn1BackRight;
  3176  000514  C0D9  F0D1         	movff	_turn1BackRight,_plat1Right
  3177  000518  C0DA  F0D2         	movff	_turn1BackRight+1,_plat1Right+1
  3178                           
  3179                           ;main.c: 295: plat2Left = turn2BackLeft;
  3180  00051C  C0DB  F0D3         	movff	_turn2BackLeft,_plat2Left
  3181  000520  C0DC  F0D4         	movff	_turn2BackLeft+1,_plat2Left+1
  3182                           
  3183                           ;main.c: 296: plat2Right = turn2BackRight;
  3184  000524  C0DD  F0D5         	movff	_turn2BackRight,_plat2Right
  3185  000528  C0DE  F0D6         	movff	_turn2BackRight+1,_plat2Right+1
  3186                           
  3187                           ;main.c: 298: unsigned char steps = 0;
  3188  00052C  0E00               	movlw	0
  3189  00052E  0100               	movlb	0	; () banked
  3190  000530  6FC5               	movwf	main@steps_793& (0+255),b
  3191                           
  3192                           ;main.c: 299: while(steps<20 && screenMode==1){
  3193  000532  D016               	goto	l7333
  3194  000534                     l7323:
  3195                           
  3196                           ; BSR set to: 0
  3197                           ;main.c: 300: steps++;
  3198  000534  0100               	movlb	0	; () banked
  3199  000536  2BC5               	incf	main@steps_793& (0+255),f,b
  3200                           
  3201                           ; BSR set to: 0
  3202                           ;main.c: 301: LATDbits.LD1 = 1;;
  3203  000538  828C               	bsf	3980,1,c	;volatile
  3204                           
  3205                           ; BSR set to: 0
  3206                           ;main.c: 302: _delay((unsigned long)((5)*(10000000/4000.0)));
  3207  00053A  0E11               	movlw	17
  3208  00053C  0100               	movlb	0	; () banked
  3209  00053E  6FBD               	movwf	??_main& (0+255),b
  3210  000540  0E3A               	movlw	58
  3211  000542                     u7787:
  3212  000542  2EE8               	decfsz	wreg,f,c
  3213  000544  D7FE               	bra	u7787
  3214  000546  2FBD               	decfsz	??_main& (0+255),f,b
  3215  000548  D7FC               	bra	u7787
  3216  00054A  F000               	nop	
  3217                           
  3218                           ;main.c: 303: LATDbits.LD1 = 0;;
  3219  00054C  928C               	bcf	3980,1,c	;volatile
  3220                           
  3221                           ;main.c: 304: _delay((unsigned long)((5)*(10000000/4000.0)));
  3222  00054E  0E11               	movlw	17
  3223  000550  0100               	movlb	0	; () banked
  3224  000552  6FBD               	movwf	??_main& (0+255),b
  3225  000554  0E3A               	movlw	58
  3226  000556                     u7797:
  3227  000556  2EE8               	decfsz	wreg,f,c
  3228  000558  D7FE               	bra	u7797
  3229  00055A  2FBD               	decfsz	??_main& (0+255),f,b
  3230  00055C  D7FC               	bra	u7797
  3231  00055E  F000               	nop	
  3232  000560                     l7333:
  3233  000560  0E14               	movlw	20
  3234  000562  0100               	movlb	0	; () banked
  3235  000564  61C5               	cpfslt	main@steps_793& (0+255),b
  3236  000566  D004               	goto	l7337
  3237                           
  3238                           ; BSR set to: 0
  3239  000568  0100               	movlb	0	; () banked
  3240  00056A  05FA               	decf	_screenMode& (0+255),w,b
  3241  00056C  B4D8               	btfsc	status,2,c
  3242  00056E  D7E2               	goto	l7323
  3243  000570                     l7337:
  3244                           
  3245                           ; BSR set to: 0
  3246                           ;main.c: 305: }
  3247                           ;main.c: 306: steps = 0;
  3248  000570  0E00               	movlw	0
  3249  000572  0100               	movlb	0	; () banked
  3250  000574  6FC5               	movwf	main@steps_793& (0+255),b
  3251                           
  3252                           ;main.c: 307: while(steps < 178 && screenMode==1){
  3253  000576  D014               	goto	l7349
  3254  000578                     l7339:
  3255                           
  3256                           ; BSR set to: 0
  3257                           ;main.c: 308: steps++;
  3258  000578  0100               	movlb	0	; () banked
  3259  00057A  2BC5               	incf	main@steps_793& (0+255),f,b
  3260                           
  3261                           ; BSR set to: 0
  3262                           ;main.c: 309: LATDbits.LD1 = 1;;
  3263  00057C  828C               	bsf	3980,1,c	;volatile
  3264                           
  3265                           ; BSR set to: 0
  3266                           ;main.c: 310: _delay((unsigned long)((2)*(10000000/4000.0)));
  3267  00057E  0E07               	movlw	7
  3268  000580  0100               	movlb	0	; () banked
  3269  000582  6FBD               	movwf	??_main& (0+255),b
  3270  000584  0E7D               	movlw	125
  3271  000586                     u7807:
  3272  000586  2EE8               	decfsz	wreg,f,c
  3273  000588  D7FE               	bra	u7807
  3274  00058A  2FBD               	decfsz	??_main& (0+255),f,b
  3275  00058C  D7FC               	bra	u7807
  3276                           
  3277                           ;main.c: 311: LATDbits.LD1 = 0;;
  3278  00058E  928C               	bcf	3980,1,c	;volatile
  3279                           
  3280                           ;main.c: 312: _delay((unsigned long)((2)*(10000000/4000.0)));
  3281  000590  0E07               	movlw	7
  3282  000592  0100               	movlb	0	; () banked
  3283  000594  6FBD               	movwf	??_main& (0+255),b
  3284  000596  0E7D               	movlw	125
  3285  000598                     u7817:
  3286  000598  2EE8               	decfsz	wreg,f,c
  3287  00059A  D7FE               	bra	u7817
  3288  00059C  2FBD               	decfsz	??_main& (0+255),f,b
  3289  00059E  D7FC               	bra	u7817
  3290  0005A0                     l7349:
  3291  0005A0  0EB2               	movlw	178
  3292  0005A2  0100               	movlb	0	; () banked
  3293  0005A4  61C5               	cpfslt	main@steps_793& (0+255),b
  3294  0005A6  D004               	goto	l7353
  3295                           
  3296                           ; BSR set to: 0
  3297  0005A8  0100               	movlb	0	; () banked
  3298  0005AA  05FA               	decf	_screenMode& (0+255),w,b
  3299  0005AC  B4D8               	btfsc	status,2,c
  3300  0005AE  D7E4               	goto	l7339
  3301  0005B0                     l7353:
  3302                           
  3303                           ; BSR set to: 0
  3304                           ;main.c: 313: }
  3305                           ;main.c: 314: steps = 0;
  3306  0005B0  0E00               	movlw	0
  3307  0005B2  0100               	movlb	0	; () banked
  3308  0005B4  6FC5               	movwf	main@steps_793& (0+255),b
  3309                           
  3310                           ;main.c: 315: while(steps<2 && screenMode==1){
  3311  0005B6  D016               	goto	l7365
  3312  0005B8                     l7355:
  3313                           
  3314                           ; BSR set to: 0
  3315                           ;main.c: 316: steps++;
  3316  0005B8  0100               	movlb	0	; () banked
  3317  0005BA  2BC5               	incf	main@steps_793& (0+255),f,b
  3318                           
  3319                           ; BSR set to: 0
  3320                           ;main.c: 317: LATDbits.LD1 = 1;;
  3321  0005BC  828C               	bsf	3980,1,c	;volatile
  3322                           
  3323                           ; BSR set to: 0
  3324                           ;main.c: 318: _delay((unsigned long)((5)*(10000000/4000.0)));
  3325  0005BE  0E11               	movlw	17
  3326  0005C0  0100               	movlb	0	; () banked
  3327  0005C2  6FBD               	movwf	??_main& (0+255),b
  3328  0005C4  0E3A               	movlw	58
  3329  0005C6                     u7827:
  3330  0005C6  2EE8               	decfsz	wreg,f,c
  3331  0005C8  D7FE               	bra	u7827
  3332  0005CA  2FBD               	decfsz	??_main& (0+255),f,b
  3333  0005CC  D7FC               	bra	u7827
  3334  0005CE  F000               	nop	
  3335                           
  3336                           ;main.c: 319: LATDbits.LD1 = 0;;
  3337  0005D0  928C               	bcf	3980,1,c	;volatile
  3338                           
  3339                           ;main.c: 320: _delay((unsigned long)((5)*(10000000/4000.0)));
  3340  0005D2  0E11               	movlw	17
  3341  0005D4  0100               	movlb	0	; () banked
  3342  0005D6  6FBD               	movwf	??_main& (0+255),b
  3343  0005D8  0E3A               	movlw	58
  3344  0005DA                     u7837:
  3345  0005DA  2EE8               	decfsz	wreg,f,c
  3346  0005DC  D7FE               	bra	u7837
  3347  0005DE  2FBD               	decfsz	??_main& (0+255),f,b
  3348  0005E0  D7FC               	bra	u7837
  3349  0005E2  F000               	nop	
  3350  0005E4                     l7365:
  3351  0005E4  0E02               	movlw	2
  3352  0005E6  0100               	movlb	0	; () banked
  3353  0005E8  61C5               	cpfslt	main@steps_793& (0+255),b
  3354  0005EA  D004               	goto	l7369
  3355                           
  3356                           ; BSR set to: 0
  3357  0005EC  0100               	movlb	0	; () banked
  3358  0005EE  05FA               	decf	_screenMode& (0+255),w,b
  3359  0005F0  B4D8               	btfsc	status,2,c
  3360  0005F2  D7E2               	goto	l7355
  3361  0005F4                     l7369:
  3362                           
  3363                           ; BSR set to: 0
  3364                           ;main.c: 321: }
  3365                           ;main.c: 322: steps = 0;
  3366  0005F4  0E00               	movlw	0
  3367  0005F6  0100               	movlb	0	; () banked
  3368  0005F8  6FC5               	movwf	main@steps_793& (0+255),b
  3369  0005FA                     l7371:
  3370                           
  3371                           ; BSR set to: 0
  3372  0005FA  0100               	movlb	0	; () banked
  3373  0005FC  51D3               	movf	_plat2Left& (0+255),w,b
  3374  0005FE  0100               	movlb	0	; () banked
  3375  000600  11CF               	iorwf	_plat1Left& (0+255),w,b
  3376  000602  0100               	movlb	0	; () banked
  3377  000604  6FBD               	movwf	??_main& (0+255),b
  3378  000606  0100               	movlb	0	; () banked
  3379  000608  51D4               	movf	(_plat2Left+1)& (0+255),w,b
  3380  00060A  0100               	movlb	0	; () banked
  3381  00060C  11D0               	iorwf	(_plat1Left+1)& (0+255),w,b
  3382  00060E  0100               	movlb	0	; () banked
  3383  000610  6FBE               	movwf	(??_main+1)& (0+255),b
  3384  000612  0100               	movlb	0	; () banked
  3385  000614  51D1               	movf	_plat1Right& (0+255),w,b
  3386  000616  0100               	movlb	0	; () banked
  3387  000618  13BD               	iorwf	??_main& (0+255),f,b
  3388  00061A  0100               	movlb	0	; () banked
  3389  00061C  51D2               	movf	(_plat1Right+1)& (0+255),w,b
  3390  00061E  0100               	movlb	0	; () banked
  3391  000620  13BE               	iorwf	(??_main+1)& (0+255),f,b
  3392  000622  0100               	movlb	0	; () banked
  3393  000624  51D5               	movf	_plat2Right& (0+255),w,b
  3394  000626  0100               	movlb	0	; () banked
  3395  000628  13BD               	iorwf	??_main& (0+255),f,b
  3396  00062A  0100               	movlb	0	; () banked
  3397  00062C  51D6               	movf	(_plat2Right+1)& (0+255),w,b
  3398  00062E  0100               	movlb	0	; () banked
  3399  000630  13BE               	iorwf	(??_main+1)& (0+255),f,b
  3400  000632  0100               	movlb	0	; () banked
  3401  000634  51BD               	movf	??_main& (0+255),w,b
  3402  000636  0100               	movlb	0	; () banked
  3403  000638  11BE               	iorwf	(??_main+1)& (0+255),w,b
  3404  00063A  B4D8               	btfsc	status,2,c
  3405  00063C  D004               	goto	l7375
  3406                           
  3407                           ; BSR set to: 0
  3408  00063E  0100               	movlb	0	; () banked
  3409  000640  05FA               	decf	_screenMode& (0+255),w,b
  3410  000642  B4D8               	btfsc	status,2,c
  3411  000644  D7DA               	goto	l7371
  3412  000646                     l7375:
  3413                           
  3414                           ; BSR set to: 0
  3415                           ;main.c: 326: wait_2ms(150);
  3416  000646  0E00               	movlw	0
  3417  000648  0100               	movlb	0	; () banked
  3418  00064A  6F81               	movwf	(wait_2ms@x+1)& (0+255),b
  3419  00064C  0E96               	movlw	150
  3420  00064E  6F80               	movwf	wait_2ms@x& (0+255),b
  3421  000650  EC7F  F01B         	call	_wait_2ms	;wreg free
  3422                           
  3423                           ;main.c: 328: LATCbits.LC7 = 1;;
  3424  000654  8E8B               	bsf	3979,7,c	;volatile
  3425                           
  3426                           ;main.c: 329: wait_2ms(100);
  3427  000656  0E00               	movlw	0
  3428  000658  0100               	movlb	0	; () banked
  3429  00065A  6F81               	movwf	(wait_2ms@x+1)& (0+255),b
  3430  00065C  0E64               	movlw	100
  3431  00065E  6F80               	movwf	wait_2ms@x& (0+255),b
  3432  000660  EC7F  F01B         	call	_wait_2ms	;wreg free
  3433                           
  3434                           ;main.c: 330: LATCbits.LC7 = 0;;
  3435  000664  9E8B               	bcf	3979,7,c	;volatile
  3436                           
  3437                           ;main.c: 331: plat1Right = 120;
  3438  000666  0E00               	movlw	0
  3439  000668  0100               	movlb	0	; () banked
  3440  00066A  6FD2               	movwf	(_plat1Right+1)& (0+255),b
  3441  00066C  0E78               	movlw	120
  3442  00066E  6FD1               	movwf	_plat1Right& (0+255),b
  3443                           
  3444                           ; BSR set to: 0
  3445                           ;main.c: 332: plat2Left = 120;
  3446  000670  0E00               	movlw	0
  3447  000672  0100               	movlb	0	; () banked
  3448  000674  6FD4               	movwf	(_plat2Left+1)& (0+255),b
  3449  000676  0E78               	movlw	120
  3450  000678  6FD3               	movwf	_plat2Left& (0+255),b
  3451  00067A                     l7385:
  3452                           
  3453                           ; BSR set to: 0
  3454  00067A  0100               	movlb	0	; () banked
  3455  00067C  05FA               	decf	_screenMode& (0+255),w,b
  3456  00067E  A4D8               	btfss	status,2,c
  3457  000680  D012               	goto	l7389
  3458                           
  3459                           ; BSR set to: 0
  3460  000682  0100               	movlb	0	; () banked
  3461  000684  51D3               	movf	_plat2Left& (0+255),w,b
  3462  000686  0100               	movlb	0	; () banked
  3463  000688  11D1               	iorwf	_plat1Right& (0+255),w,b
  3464  00068A  0100               	movlb	0	; () banked
  3465  00068C  6FBD               	movwf	??_main& (0+255),b
  3466  00068E  0100               	movlb	0	; () banked
  3467  000690  51D4               	movf	(_plat2Left+1)& (0+255),w,b
  3468  000692  0100               	movlb	0	; () banked
  3469  000694  11D2               	iorwf	(_plat1Right+1)& (0+255),w,b
  3470  000696  0100               	movlb	0	; () banked
  3471  000698  6FBE               	movwf	(??_main+1)& (0+255),b
  3472  00069A  0100               	movlb	0	; () banked
  3473  00069C  51BD               	movf	??_main& (0+255),w,b
  3474  00069E  0100               	movlb	0	; () banked
  3475  0006A0  11BE               	iorwf	(??_main+1)& (0+255),w,b
  3476  0006A2  A4D8               	btfss	status,2,c
  3477  0006A4  D7EA               	goto	l7385
  3478  0006A6                     l7389:
  3479                           
  3480                           ; BSR set to: 0
  3481                           ;main.c: 334: plat1Left = 120;
  3482  0006A6  0E00               	movlw	0
  3483  0006A8  0100               	movlb	0	; () banked
  3484  0006AA  6FD0               	movwf	(_plat1Left+1)& (0+255),b
  3485  0006AC  0E78               	movlw	120
  3486  0006AE  6FCF               	movwf	_plat1Left& (0+255),b
  3487                           
  3488                           ;main.c: 335: plat2Right = 120;
  3489  0006B0  0E00               	movlw	0
  3490  0006B2  0100               	movlb	0	; () banked
  3491  0006B4  6FD6               	movwf	(_plat2Right+1)& (0+255),b
  3492  0006B6  0E78               	movlw	120
  3493  0006B8  6FD5               	movwf	_plat2Right& (0+255),b
  3494  0006BA                     l7391:
  3495                           
  3496                           ; BSR set to: 0
  3497  0006BA  0100               	movlb	0	; () banked
  3498  0006BC  05FA               	decf	_screenMode& (0+255),w,b
  3499  0006BE  A4D8               	btfss	status,2,c
  3500  0006C0  D012               	goto	l384
  3501                           
  3502                           ; BSR set to: 0
  3503  0006C2  0100               	movlb	0	; () banked
  3504  0006C4  51D5               	movf	_plat2Right& (0+255),w,b
  3505  0006C6  0100               	movlb	0	; () banked
  3506  0006C8  11CF               	iorwf	_plat1Left& (0+255),w,b
  3507  0006CA  0100               	movlb	0	; () banked
  3508  0006CC  6FBD               	movwf	??_main& (0+255),b
  3509  0006CE  0100               	movlb	0	; () banked
  3510  0006D0  51D6               	movf	(_plat2Right+1)& (0+255),w,b
  3511  0006D2  0100               	movlb	0	; () banked
  3512  0006D4  11D0               	iorwf	(_plat1Left+1)& (0+255),w,b
  3513  0006D6  0100               	movlb	0	; () banked
  3514  0006D8  6FBE               	movwf	(??_main+1)& (0+255),b
  3515  0006DA  0100               	movlb	0	; () banked
  3516  0006DC  51BD               	movf	??_main& (0+255),w,b
  3517  0006DE  0100               	movlb	0	; () banked
  3518  0006E0  11BE               	iorwf	(??_main+1)& (0+255),w,b
  3519  0006E2  A4D8               	btfss	status,2,c
  3520  0006E4  D7EA               	goto	l7391
  3521  0006E6                     l384:
  3522                           
  3523                           ; BSR set to: 0
  3524                           ;main.c: 338: LATDbits.LD1 = 0;;
  3525  0006E6  928C               	bcf	3980,1,c	;volatile
  3526                           
  3527                           ;main.c: 339: LATDbits.LD0= 0;;
  3528  0006E8  908C               	bcf	3980,0,c	;volatile
  3529                           
  3530                           ; BSR set to: 0
  3531                           ;main.c: 340: plat1Right = 0;
  3532  0006EA  0E00               	movlw	0
  3533  0006EC  0100               	movlb	0	; () banked
  3534  0006EE  6FD2               	movwf	(_plat1Right+1)& (0+255),b
  3535  0006F0  0E00               	movlw	0
  3536  0006F2  6FD1               	movwf	_plat1Right& (0+255),b
  3537                           
  3538                           ;main.c: 341: plat2Right = 0;
  3539  0006F4  0E00               	movlw	0
  3540  0006F6  0100               	movlb	0	; () banked
  3541  0006F8  6FD6               	movwf	(_plat2Right+1)& (0+255),b
  3542  0006FA  0E00               	movlw	0
  3543  0006FC  6FD5               	movwf	_plat2Right& (0+255),b
  3544                           
  3545                           ;main.c: 342: plat1Left = 0;
  3546  0006FE  0E00               	movlw	0
  3547  000700  0100               	movlb	0	; () banked
  3548  000702  6FD0               	movwf	(_plat1Left+1)& (0+255),b
  3549  000704  0E00               	movlw	0
  3550  000706  6FCF               	movwf	_plat1Left& (0+255),b
  3551                           
  3552                           ;main.c: 343: plat2Left = 0;
  3553  000708  0E00               	movlw	0
  3554  00070A  0100               	movlb	0	; () banked
  3555  00070C  6FD4               	movwf	(_plat2Left+1)& (0+255),b
  3556  00070E  0E00               	movlw	0
  3557  000710  6FD3               	movwf	_plat2Left& (0+255),b
  3558                           
  3559                           ;main.c: 344: turn1BackRight = 0;
  3560  000712  0E00               	movlw	0
  3561  000714  0100               	movlb	0	; () banked
  3562  000716  6FDA               	movwf	(_turn1BackRight+1)& (0+255),b
  3563  000718  0E00               	movlw	0
  3564  00071A  6FD9               	movwf	_turn1BackRight& (0+255),b
  3565                           
  3566                           ;main.c: 345: turn1BackLeft = 0;
  3567  00071C  0E00               	movlw	0
  3568  00071E  0100               	movlb	0	; () banked
  3569  000720  6FD8               	movwf	(_turn1BackLeft+1)& (0+255),b
  3570  000722  0E00               	movlw	0
  3571  000724  6FD7               	movwf	_turn1BackLeft& (0+255),b
  3572                           
  3573                           ;main.c: 346: turn2BackRight = 0;
  3574  000726  0E00               	movlw	0
  3575  000728  0100               	movlb	0	; () banked
  3576  00072A  6FDE               	movwf	(_turn2BackRight+1)& (0+255),b
  3577  00072C  0E00               	movlw	0
  3578  00072E  6FDD               	movwf	_turn2BackRight& (0+255),b
  3579                           
  3580                           ;main.c: 347: turn2BackLeft = 0;
  3581  000730  0E00               	movlw	0
  3582  000732  0100               	movlb	0	; () banked
  3583  000734  6FDC               	movwf	(_turn2BackLeft+1)& (0+255),b
  3584  000736  0E00               	movlw	0
  3585  000738  6FDB               	movwf	_turn2BackLeft& (0+255),b
  3586                           
  3587                           ; BSR set to: 0
  3588                           ;main.c: 348: LATCbits.LC1 = 0;;
  3589  00073A  928B               	bcf	3979,1,c	;volatile
  3590                           
  3591                           ; BSR set to: 0
  3592                           ;main.c: 349: LATCbits.LC2 = 0;;
  3593  00073C  948B               	bcf	3979,2,c	;volatile
  3594                           
  3595                           ; BSR set to: 0
  3596                           ;main.c: 350: LATCbits.LC6 = 0;;
  3597  00073E  9C8B               	bcf	3979,6,c	;volatile
  3598                           
  3599                           ; BSR set to: 0
  3600                           ;main.c: 351: LATCbits.LC5 = 0;;
  3601  000740  9A8B               	bcf	3979,5,c	;volatile
  3602                           
  3603                           ; BSR set to: 0
  3604                           ;main.c: 352: LATCbits.LC0 = 0;;
  3605  000742  908B               	bcf	3979,0,c	;volatile
  3606                           
  3607                           ; BSR set to: 0
  3608                           ;main.c: 353: LATEbits.LE2 = 0;;
  3609  000744  948D               	bcf	3981,2,c	;volatile
  3610                           
  3611                           ; BSR set to: 0
  3612                           ;main.c: 354: LATEbits.LE1 = 0;;
  3613  000746  928D               	bcf	3981,1,c	;volatile
  3614                           
  3615                           ; BSR set to: 0
  3616                           ;main.c: 355: LATAbits.LA4 = 0;;
  3617  000748  9889               	bcf	3977,4,c	;volatile
  3618                           
  3619                           ;main.c: 356: doubleAA = 0;
  3620  00074A  0E00               	movlw	0
  3621  00074C  0100               	movlb	0	; () banked
  3622  00074E  6FE4               	movwf	_doubleAA& (0+255),b
  3623                           
  3624                           ;main.c: 357: sorting = 0;
  3625  000750  0E00               	movlw	0
  3626  000752  6E53               	movwf	_sorting,c
  3627  000754                     l7413:
  3628                           
  3629                           ; BSR set to: 0
  3630                           ;main.c: 358: }
  3631                           ;main.c: 359: wait_2ms(250);
  3632  000754  0E00               	movlw	0
  3633  000756  0100               	movlb	0	; () banked
  3634  000758  6F81               	movwf	(wait_2ms@x+1)& (0+255),b
  3635  00075A  0EFA               	movlw	250
  3636  00075C  6F80               	movwf	wait_2ms@x& (0+255),b
  3637  00075E  EC7F  F01B         	call	_wait_2ms	;wreg free
  3638                           
  3639                           ;main.c: 360: if (doneTimer >= 5){
  3640  000762  0E04               	movlw	4
  3641  000764  0100               	movlb	0	; () banked
  3642  000766  65E3               	cpfsgt	_doneTimer& (0+255),b
  3643  000768  D067               	goto	l7467
  3644                           
  3645                           ; BSR set to: 0
  3646                           ;main.c: 361: unsigned char steps = 0;
  3647  00076A  0E00               	movlw	0
  3648  00076C  0100               	movlb	0	; () banked
  3649  00076E  6FC6               	movwf	main@steps_802& (0+255),b
  3650                           
  3651                           ;main.c: 362: while(steps<20 && screenMode==1){
  3652  000770  D016               	goto	l7429
  3653  000772                     l7419:
  3654                           
  3655                           ; BSR set to: 0
  3656                           ;main.c: 363: steps++;
  3657  000772  0100               	movlb	0	; () banked
  3658  000774  2BC6               	incf	main@steps_802& (0+255),f,b
  3659                           
  3660                           ; BSR set to: 0
  3661                           ;main.c: 364: LATDbits.LD1 = 1;;
  3662  000776  828C               	bsf	3980,1,c	;volatile
  3663                           
  3664                           ; BSR set to: 0
  3665                           ;main.c: 365: _delay((unsigned long)((5)*(10000000/4000.0)));
  3666  000778  0E11               	movlw	17
  3667  00077A  0100               	movlb	0	; () banked
  3668  00077C  6FBD               	movwf	??_main& (0+255),b
  3669  00077E  0E3A               	movlw	58
  3670  000780                     u7847:
  3671  000780  2EE8               	decfsz	wreg,f,c
  3672  000782  D7FE               	bra	u7847
  3673  000784  2FBD               	decfsz	??_main& (0+255),f,b
  3674  000786  D7FC               	bra	u7847
  3675  000788  F000               	nop	
  3676                           
  3677                           ;main.c: 366: LATDbits.LD1 = 0;;
  3678  00078A  928C               	bcf	3980,1,c	;volatile
  3679                           
  3680                           ;main.c: 367: _delay((unsigned long)((5)*(10000000/4000.0)));
  3681  00078C  0E11               	movlw	17
  3682  00078E  0100               	movlb	0	; () banked
  3683  000790  6FBD               	movwf	??_main& (0+255),b
  3684  000792  0E3A               	movlw	58
  3685  000794                     u7857:
  3686  000794  2EE8               	decfsz	wreg,f,c
  3687  000796  D7FE               	bra	u7857
  3688  000798  2FBD               	decfsz	??_main& (0+255),f,b
  3689  00079A  D7FC               	bra	u7857
  3690  00079C  F000               	nop	
  3691  00079E                     l7429:
  3692  00079E  0E14               	movlw	20
  3693  0007A0  0100               	movlb	0	; () banked
  3694  0007A2  61C6               	cpfslt	main@steps_802& (0+255),b
  3695  0007A4  D004               	goto	l7433
  3696                           
  3697                           ; BSR set to: 0
  3698  0007A6  0100               	movlb	0	; () banked
  3699  0007A8  05FA               	decf	_screenMode& (0+255),w,b
  3700  0007AA  B4D8               	btfsc	status,2,c
  3701  0007AC  D7E2               	goto	l7419
  3702  0007AE                     l7433:
  3703                           
  3704                           ; BSR set to: 0
  3705                           ;main.c: 368: }
  3706                           ;main.c: 369: steps = 0;
  3707  0007AE  0E00               	movlw	0
  3708  0007B0  0100               	movlb	0	; () banked
  3709  0007B2  6FC6               	movwf	main@steps_802& (0+255),b
  3710                           
  3711                           ;main.c: 370: while(steps < 178 && screenMode==1){
  3712  0007B4  D014               	goto	l7445
  3713  0007B6                     l7435:
  3714                           
  3715                           ; BSR set to: 0
  3716                           ;main.c: 371: steps++;
  3717  0007B6  0100               	movlb	0	; () banked
  3718  0007B8  2BC6               	incf	main@steps_802& (0+255),f,b
  3719                           
  3720                           ; BSR set to: 0
  3721                           ;main.c: 372: LATDbits.LD1 = 1;;
  3722  0007BA  828C               	bsf	3980,1,c	;volatile
  3723                           
  3724                           ; BSR set to: 0
  3725                           ;main.c: 373: _delay((unsigned long)((2)*(10000000/4000.0)));
  3726  0007BC  0E07               	movlw	7
  3727  0007BE  0100               	movlb	0	; () banked
  3728  0007C0  6FBD               	movwf	??_main& (0+255),b
  3729  0007C2  0E7D               	movlw	125
  3730  0007C4                     u7867:
  3731  0007C4  2EE8               	decfsz	wreg,f,c
  3732  0007C6  D7FE               	bra	u7867
  3733  0007C8  2FBD               	decfsz	??_main& (0+255),f,b
  3734  0007CA  D7FC               	bra	u7867
  3735                           
  3736                           ;main.c: 374: LATDbits.LD1 = 0;;
  3737  0007CC  928C               	bcf	3980,1,c	;volatile
  3738                           
  3739                           ;main.c: 375: _delay((unsigned long)((2)*(10000000/4000.0)));
  3740  0007CE  0E07               	movlw	7
  3741  0007D0  0100               	movlb	0	; () banked
  3742  0007D2  6FBD               	movwf	??_main& (0+255),b
  3743  0007D4  0E7D               	movlw	125
  3744  0007D6                     u7877:
  3745  0007D6  2EE8               	decfsz	wreg,f,c
  3746  0007D8  D7FE               	bra	u7877
  3747  0007DA  2FBD               	decfsz	??_main& (0+255),f,b
  3748  0007DC  D7FC               	bra	u7877
  3749  0007DE                     l7445:
  3750  0007DE  0EB2               	movlw	178
  3751  0007E0  0100               	movlb	0	; () banked
  3752  0007E2  61C6               	cpfslt	main@steps_802& (0+255),b
  3753  0007E4  D004               	goto	l7449
  3754                           
  3755                           ; BSR set to: 0
  3756  0007E6  0100               	movlb	0	; () banked
  3757  0007E8  05FA               	decf	_screenMode& (0+255),w,b
  3758  0007EA  B4D8               	btfsc	status,2,c
  3759  0007EC  D7E4               	goto	l7435
  3760  0007EE                     l7449:
  3761                           
  3762                           ; BSR set to: 0
  3763                           ;main.c: 376: }
  3764                           ;main.c: 377: steps = 0;
  3765  0007EE  0E00               	movlw	0
  3766  0007F0  0100               	movlb	0	; () banked
  3767  0007F2  6FC6               	movwf	main@steps_802& (0+255),b
  3768                           
  3769                           ;main.c: 378: while(steps<2 && screenMode==1){
  3770  0007F4  D016               	goto	l7461
  3771  0007F6                     l7451:
  3772                           
  3773                           ; BSR set to: 0
  3774                           ;main.c: 379: steps++;
  3775  0007F6  0100               	movlb	0	; () banked
  3776  0007F8  2BC6               	incf	main@steps_802& (0+255),f,b
  3777                           
  3778                           ; BSR set to: 0
  3779                           ;main.c: 380: LATDbits.LD1 = 1;;
  3780  0007FA  828C               	bsf	3980,1,c	;volatile
  3781                           
  3782                           ; BSR set to: 0
  3783                           ;main.c: 381: _delay((unsigned long)((5)*(10000000/4000.0)));
  3784  0007FC  0E11               	movlw	17
  3785  0007FE  0100               	movlb	0	; () banked
  3786  000800  6FBD               	movwf	??_main& (0+255),b
  3787  000802  0E3A               	movlw	58
  3788  000804                     u7887:
  3789  000804  2EE8               	decfsz	wreg,f,c
  3790  000806  D7FE               	bra	u7887
  3791  000808  2FBD               	decfsz	??_main& (0+255),f,b
  3792  00080A  D7FC               	bra	u7887
  3793  00080C  F000               	nop	
  3794                           
  3795                           ;main.c: 382: LATDbits.LD1 = 0;;
  3796  00080E  928C               	bcf	3980,1,c	;volatile
  3797                           
  3798                           ;main.c: 383: _delay((unsigned long)((5)*(10000000/4000.0)));
  3799  000810  0E11               	movlw	17
  3800  000812  0100               	movlb	0	; () banked
  3801  000814  6FBD               	movwf	??_main& (0+255),b
  3802  000816  0E3A               	movlw	58
  3803  000818                     u7897:
  3804  000818  2EE8               	decfsz	wreg,f,c
  3805  00081A  D7FE               	bra	u7897
  3806  00081C  2FBD               	decfsz	??_main& (0+255),f,b
  3807  00081E  D7FC               	bra	u7897
  3808  000820  F000               	nop	
  3809  000822                     l7461:
  3810  000822  0E02               	movlw	2
  3811  000824  0100               	movlb	0	; () banked
  3812  000826  61C6               	cpfslt	main@steps_802& (0+255),b
  3813  000828  D004               	goto	l7465
  3814                           
  3815                           ; BSR set to: 0
  3816  00082A  0100               	movlb	0	; () banked
  3817  00082C  05FA               	decf	_screenMode& (0+255),w,b
  3818  00082E  B4D8               	btfsc	status,2,c
  3819  000830  D7E2               	goto	l7451
  3820  000832                     l7465:
  3821                           
  3822                           ; BSR set to: 0
  3823                           ;main.c: 384: }
  3824                           ;main.c: 385: steps = 0;
  3825  000832  0E00               	movlw	0
  3826  000834  0100               	movlb	0	; () banked
  3827  000836  6FC6               	movwf	main@steps_802& (0+255),b
  3828  000838                     l7467:
  3829                           
  3830                           ; BSR set to: 0
  3831  000838  0100               	movlb	0	; () banked
  3832  00083A  05FA               	decf	_screenMode& (0+255),w,b
  3833  00083C  A4D8               	btfss	status,2,c
  3834  00083E  D017               	goto	l7475
  3835  000840  D48B               	goto	l7133
  3836  000842                     l7469:
  3837                           
  3838                           ; BSR set to: 0
  3839                           ;main.c: 389: lcdInst(0b10000000);;
  3840  000842  0E80               	movlw	128
  3841  000844  ECDF  F01B         	call	_lcdInst
  3842                           
  3843                           ;main.c: 390: printf("DONE! PRESS *   ");
  3844  000848  0E32               	movlw	low STR_5
  3845  00084A  0100               	movlb	0	; () banked
  3846  00084C  6F8C               	movwf	printf@f& (0+255),b
  3847  00084E  0EFF               	movlw	high STR_5
  3848  000850  0100               	movlb	0	; () banked
  3849  000852  6F8D               	movwf	(printf@f+1)& (0+255),b
  3850  000854  EC59  F00C         	call	_printf	;wreg free
  3851                           
  3852                           ;main.c: 391: lcdInst(0b11000000);;
  3853  000858  0EC0               	movlw	192
  3854  00085A  ECDF  F01B         	call	_lcdInst
  3855                           
  3856                           ;main.c: 392: printf("TO CONTINUE     ");
  3857  00085E  0E10               	movlw	low STR_6
  3858  000860  0100               	movlb	0	; () banked
  3859  000862  6F8C               	movwf	printf@f& (0+255),b
  3860  000864  0EFF               	movlw	high STR_6
  3861  000866  0100               	movlb	0	; () banked
  3862  000868  6F8D               	movwf	(printf@f+1)& (0+255),b
  3863  00086A  EC59  F00C         	call	_printf	;wreg free
  3864  00086E                     l7475:
  3865  00086E  0100               	movlb	0	; () banked
  3866  000870  51FA               	movf	_screenMode& (0+255),w,b
  3867  000872  A4D8               	btfss	status,2,c
  3868  000874  D01F               	goto	l7483
  3869  000876  D7E5               	goto	l7469
  3870  000878                     l7477:
  3871                           
  3872                           ; BSR set to: 0
  3873                           ;main.c: 395: lcdInst(0b10000000);;
  3874  000878  0E80               	movlw	128
  3875  00087A  ECDF  F01B         	call	_lcdInst
  3876                           
  3877                           ;main.c: 396: printf("TOTAL RUN TIME: ");
  3878  00087E  0E54               	movlw	low STR_7
  3879  000880  0100               	movlb	0	; () banked
  3880  000882  6F8C               	movwf	printf@f& (0+255),b
  3881  000884  0EFF               	movlw	high STR_7
  3882  000886  0100               	movlb	0	; () banked
  3883  000888  6F8D               	movwf	(printf@f+1)& (0+255),b
  3884  00088A  EC59  F00C         	call	_printf	;wreg free
  3885                           
  3886                           ;main.c: 397: lcdInst(0b11000000);;
  3887  00088E  0EC0               	movlw	192
  3888  000890  ECDF  F01B         	call	_lcdInst
  3889                           
  3890                           ;main.c: 398: printf("%02d:%02d               ", min, sec);
  3891  000894  0EAA               	movlw	low STR_8
  3892  000896  0100               	movlb	0	; () banked
  3893  000898  6F8C               	movwf	printf@f& (0+255),b
  3894  00089A  0EFD               	movlw	high STR_8
  3895  00089C  0100               	movlb	0	; () banked
  3896  00089E  6F8D               	movwf	(printf@f+1)& (0+255),b
  3897  0008A0  C0E5  F08E         	movff	_min,?_printf+2
  3898  0008A4  0100               	movlb	0	; () banked
  3899  0008A6  6B8F               	clrf	(?_printf+3)& (0+255),b
  3900  0008A8  C0EB  F090         	movff	_sec,?_printf+4
  3901  0008AC  0100               	movlb	0	; () banked
  3902  0008AE  6B91               	clrf	(?_printf+5)& (0+255),b
  3903  0008B0  EC59  F00C         	call	_printf	;wreg free
  3904  0008B4                     l7483:
  3905  0008B4  0E03               	movlw	3
  3906  0008B6  0100               	movlb	0	; () banked
  3907  0008B8  19FA               	xorwf	_screenMode& (0+255),w,b
  3908  0008BA  A4D8               	btfss	status,2,c
  3909  0008BC  D01B               	goto	l7491
  3910  0008BE  D7DC               	goto	l7477
  3911  0008C0                     l7485:
  3912                           
  3913                           ; BSR set to: 0
  3914                           ;main.c: 401: lcdInst(0b10000000);;
  3915  0008C0  0E80               	movlw	128
  3916  0008C2  ECDF  F01B         	call	_lcdInst
  3917                           
  3918                           ;main.c: 402: printf("TOTAL # OF      ");
  3919  0008C6  0EEE               	movlw	low STR_9
  3920  0008C8  0100               	movlb	0	; () banked
  3921  0008CA  6F8C               	movwf	printf@f& (0+255),b
  3922  0008CC  0EFE               	movlw	high STR_9
  3923  0008CE  0100               	movlb	0	; () banked
  3924  0008D0  6F8D               	movwf	(printf@f+1)& (0+255),b
  3925  0008D2  EC59  F00C         	call	_printf	;wreg free
  3926                           
  3927                           ;main.c: 403: lcdInst(0b11000000);;
  3928  0008D6  0EC0               	movlw	192
  3929  0008D8  ECDF  F01B         	call	_lcdInst
  3930                           
  3931                           ;main.c: 404: printf("BATTERIES: %02d   ", numBats);
  3932  0008DC  0E75               	movlw	low STR_10
  3933  0008DE  0100               	movlb	0	; () banked
  3934  0008E0  6F8C               	movwf	printf@f& (0+255),b
  3935  0008E2  0EFE               	movlw	high STR_10
  3936  0008E4  0100               	movlb	0	; () banked
  3937  0008E6  6F8D               	movwf	(printf@f+1)& (0+255),b
  3938  0008E8  C0E8  F08E         	movff	_numBats,?_printf+2
  3939  0008EC  0100               	movlb	0	; () banked
  3940  0008EE  6B8F               	clrf	(?_printf+3)& (0+255),b
  3941  0008F0  EC59  F00C         	call	_printf	;wreg free
  3942  0008F4                     l7491:
  3943  0008F4  0E04               	movlw	4
  3944  0008F6  0100               	movlb	0	; () banked
  3945  0008F8  19FA               	xorwf	_screenMode& (0+255),w,b
  3946  0008FA  A4D8               	btfss	status,2,c
  3947  0008FC  D01B               	goto	l7499
  3948  0008FE  D7E0               	goto	l7485
  3949  000900                     l7493:
  3950                           
  3951                           ; BSR set to: 0
  3952                           ;main.c: 407: lcdInst(0b10000000);;
  3953  000900  0E80               	movlw	128
  3954  000902  ECDF  F01B         	call	_lcdInst
  3955                           
  3956                           ;main.c: 408: printf("# OF C          ");
  3957  000906  0EAA               	movlw	low STR_11
  3958  000908  0100               	movlb	0	; () banked
  3959  00090A  6F8C               	movwf	printf@f& (0+255),b
  3960  00090C  0EFE               	movlw	high STR_11
  3961  00090E  0100               	movlb	0	; () banked
  3962  000910  6F8D               	movwf	(printf@f+1)& (0+255),b
  3963  000912  EC59  F00C         	call	_printf	;wreg free
  3964                           
  3965                           ;main.c: 409: lcdInst(0b11000000);;
  3966  000916  0EC0               	movlw	192
  3967  000918  ECDF  F01B         	call	_lcdInst
  3968                           
  3969                           ;main.c: 410: printf("BATTERIES: %02d   ", numC);
  3970  00091C  0E75               	movlw	low STR_10
  3971  00091E  0100               	movlb	0	; () banked
  3972  000920  6F8C               	movwf	printf@f& (0+255),b
  3973  000922  0EFE               	movlw	high STR_10
  3974  000924  0100               	movlb	0	; () banked
  3975  000926  6F8D               	movwf	(printf@f+1)& (0+255),b
  3976  000928  C0E9  F08E         	movff	_numC,?_printf+2
  3977  00092C  0100               	movlb	0	; () banked
  3978  00092E  6B8F               	clrf	(?_printf+3)& (0+255),b
  3979  000930  EC59  F00C         	call	_printf	;wreg free
  3980  000934                     l7499:
  3981  000934  0E05               	movlw	5
  3982  000936  0100               	movlb	0	; () banked
  3983  000938  19FA               	xorwf	_screenMode& (0+255),w,b
  3984  00093A  A4D8               	btfss	status,2,c
  3985  00093C  D01B               	goto	l7507
  3986  00093E  D7E0               	goto	l7493
  3987  000940                     l7501:
  3988                           
  3989                           ; BSR set to: 0
  3990                           ;main.c: 413: lcdInst(0b10000000);;
  3991  000940  0E80               	movlw	128
  3992  000942  ECDF  F01B         	call	_lcdInst
  3993                           
  3994                           ;main.c: 414: printf("# OF 9V         ");
  3995  000946  0ECC               	movlw	low STR_13
  3996  000948  0100               	movlb	0	; () banked
  3997  00094A  6F8C               	movwf	printf@f& (0+255),b
  3998  00094C  0EFE               	movlw	high STR_13
  3999  00094E  0100               	movlb	0	; () banked
  4000  000950  6F8D               	movwf	(printf@f+1)& (0+255),b
  4001  000952  EC59  F00C         	call	_printf	;wreg free
  4002                           
  4003                           ;main.c: 415: lcdInst(0b11000000);;
  4004  000956  0EC0               	movlw	192
  4005  000958  ECDF  F01B         	call	_lcdInst
  4006                           
  4007                           ;main.c: 416: printf("BATTERIES: %02d     ", num9V);
  4008  00095C  0E4C               	movlw	low STR_14
  4009  00095E  0100               	movlb	0	; () banked
  4010  000960  6F8C               	movwf	printf@f& (0+255),b
  4011  000962  0EFE               	movlw	high STR_14
  4012  000964  0100               	movlb	0	; () banked
  4013  000966  6F8D               	movwf	(printf@f+1)& (0+255),b
  4014  000968  C0E6  F08E         	movff	_num9V,?_printf+2
  4015  00096C  0100               	movlb	0	; () banked
  4016  00096E  6B8F               	clrf	(?_printf+3)& (0+255),b
  4017  000970  EC59  F00C         	call	_printf	;wreg free
  4018  000974                     l7507:
  4019  000974  0E06               	movlw	6
  4020  000976  0100               	movlb	0	; () banked
  4021  000978  19FA               	xorwf	_screenMode& (0+255),w,b
  4022  00097A  A4D8               	btfss	status,2,c
  4023  00097C  D01B               	goto	l7515
  4024  00097E  D7E0               	goto	l7501
  4025  000980                     l7509:
  4026                           
  4027                           ; BSR set to: 0
  4028                           ;main.c: 419: lcdInst(0b10000000);;
  4029  000980  0E80               	movlw	128
  4030  000982  ECDF  F01B         	call	_lcdInst
  4031                           
  4032                           ;main.c: 420: printf("# OF AA         ");
  4033  000986  0EBB               	movlw	low STR_15
  4034  000988  0100               	movlb	0	; () banked
  4035  00098A  6F8C               	movwf	printf@f& (0+255),b
  4036  00098C  0EFE               	movlw	high STR_15
  4037  00098E  0100               	movlb	0	; () banked
  4038  000990  6F8D               	movwf	(printf@f+1)& (0+255),b
  4039  000992  EC59  F00C         	call	_printf	;wreg free
  4040                           
  4041                           ;main.c: 421: lcdInst(0b11000000);;
  4042  000996  0EC0               	movlw	192
  4043  000998  ECDF  F01B         	call	_lcdInst
  4044                           
  4045                           ;main.c: 422: printf("BATTERIES: %02d     ", numAA);
  4046  00099C  0E4C               	movlw	low STR_14
  4047  00099E  0100               	movlb	0	; () banked
  4048  0009A0  6F8C               	movwf	printf@f& (0+255),b
  4049  0009A2  0EFE               	movlw	high STR_14
  4050  0009A4  0100               	movlb	0	; () banked
  4051  0009A6  6F8D               	movwf	(printf@f+1)& (0+255),b
  4052  0009A8  C0E7  F08E         	movff	_numAA,?_printf+2
  4053  0009AC  0100               	movlb	0	; () banked
  4054  0009AE  6B8F               	clrf	(?_printf+3)& (0+255),b
  4055  0009B0  EC59  F00C         	call	_printf	;wreg free
  4056  0009B4                     l7515:
  4057  0009B4  0E07               	movlw	7
  4058  0009B6  0100               	movlb	0	; () banked
  4059  0009B8  19FA               	xorwf	_screenMode& (0+255),w,b
  4060  0009BA  A4D8               	btfss	status,2,c
  4061  0009BC  D01B               	goto	l7523
  4062  0009BE  D7E0               	goto	l7509
  4063  0009C0                     l7517:
  4064                           
  4065                           ; BSR set to: 0
  4066                           ;main.c: 425: lcdInst(0b10000000);;
  4067  0009C0  0E80               	movlw	128
  4068  0009C2  ECDF  F01B         	call	_lcdInst
  4069                           
  4070                           ;main.c: 426: printf("# OF DRAINED    ");
  4071  0009C6  0E21               	movlw	low STR_17
  4072  0009C8  0100               	movlb	0	; () banked
  4073  0009CA  6F8C               	movwf	printf@f& (0+255),b
  4074  0009CC  0EFF               	movlw	high STR_17
  4075  0009CE  0100               	movlb	0	; () banked
  4076  0009D0  6F8D               	movwf	(printf@f+1)& (0+255),b
  4077  0009D2  EC59  F00C         	call	_printf	;wreg free
  4078                           
  4079                           ;main.c: 427: lcdInst(0b11000000);;
  4080  0009D6  0EC0               	movlw	192
  4081  0009D8  ECDF  F01B         	call	_lcdInst
  4082                           
  4083                           ;main.c: 428: printf("BATTERIES: %02d     ", numDrain);
  4084  0009DC  0E4C               	movlw	low STR_14
  4085  0009DE  0100               	movlb	0	; () banked
  4086  0009E0  6F8C               	movwf	printf@f& (0+255),b
  4087  0009E2  0EFE               	movlw	high STR_14
  4088  0009E4  0100               	movlb	0	; () banked
  4089  0009E6  6F8D               	movwf	(printf@f+1)& (0+255),b
  4090  0009E8  C0EA  F08E         	movff	_numDrain,?_printf+2
  4091  0009EC  0100               	movlb	0	; () banked
  4092  0009EE  6B8F               	clrf	(?_printf+3)& (0+255),b
  4093  0009F0  EC59  F00C         	call	_printf	;wreg free
  4094  0009F4                     l7523:
  4095  0009F4  0E08               	movlw	8
  4096  0009F6  0100               	movlb	0	; () banked
  4097  0009F8  19FA               	xorwf	_screenMode& (0+255),w,b
  4098  0009FA  A4D8               	btfss	status,2,c
  4099  0009FC  D06F               	goto	l7563
  4100  0009FE  D7E0               	goto	l7517
  4101  000A00                     l7525:
  4102                           
  4103                           ; BSR set to: 0
  4104                           ;main.c: 431: lcdInst(0b10000000);;
  4105  000A00  0E80               	movlw	128
  4106  000A02  ECDF  F01B         	call	_lcdInst
  4107                           
  4108                           ;main.c: 432: printf("LAST RUN:       ");
  4109  000A06  0EDD               	movlw	low STR_19
  4110  000A08  0100               	movlb	0	; () banked
  4111  000A0A  6F8C               	movwf	printf@f& (0+255),b
  4112  000A0C  0EFE               	movlw	high STR_19
  4113  000A0E  0100               	movlb	0	; () banked
  4114  000A10  6F8D               	movwf	(printf@f+1)& (0+255),b
  4115  000A12  EC59  F00C         	call	_printf	;wreg free
  4116                           
  4117                           ;main.c: 433: lcdInst(0b11000000);;
  4118  000A16  0EC0               	movlw	192
  4119  000A18  ECDF  F01B         	call	_lcdInst
  4120                           
  4121                           ;main.c: 434: printf("%02x/%02x/%02x        ", lastRunRTC[6],lastRunRTC[5],lastRunRTC[4]
      +                          );
  4122  000A1C  0EC3               	movlw	low STR_20
  4123  000A1E  0100               	movlb	0	; () banked
  4124  000A20  6F8C               	movwf	printf@f& (0+255),b
  4125  000A22  0EFD               	movlw	high STR_20
  4126  000A24  0100               	movlb	0	; () banked
  4127  000A26  6F8D               	movwf	(printf@f+1)& (0+255),b
  4128  000A28  C0CE  F08E         	movff	_lastRunRTC+6,?_printf+2
  4129  000A2C  0100               	movlb	0	; () banked
  4130  000A2E  6B8F               	clrf	(?_printf+3)& (0+255),b
  4131  000A30  C0CD  F090         	movff	_lastRunRTC+5,?_printf+4
  4132  000A34  0100               	movlb	0	; () banked
  4133  000A36  6B91               	clrf	(?_printf+5)& (0+255),b
  4134  000A38  C0CC  F092         	movff	_lastRunRTC+4,?_printf+6
  4135  000A3C  0100               	movlb	0	; () banked
  4136  000A3E  6B93               	clrf	(?_printf+7)& (0+255),b
  4137  000A40  EC59  F00C         	call	_printf	;wreg free
  4138                           
  4139                           ;main.c: 435: for(unsigned char i=0;i<200;i++){
  4140  000A44  0E00               	movlw	0
  4141  000A46  0100               	movlb	0	; () banked
  4142  000A48  6FC2               	movwf	main@i_819& (0+255),b
  4143  000A4A                     l7533:
  4144                           
  4145                           ; BSR set to: 0
  4146  000A4A  0EC7               	movlw	199
  4147  000A4C  0100               	movlb	0	; () banked
  4148  000A4E  65C2               	cpfsgt	main@i_819& (0+255),b
  4149  000A50  D001               	goto	l7537
  4150  000A52  D011               	goto	l7545
  4151  000A54                     l7537:
  4152                           
  4153                           ; BSR set to: 0
  4154                           ;main.c: 436: if (screenMode != 9)
  4155  000A54  0E09               	movlw	9
  4156  000A56  0100               	movlb	0	; () banked
  4157  000A58  19FA               	xorwf	_screenMode& (0+255),w,b
  4158  000A5A  A4D8               	btfss	status,2,c
  4159  000A5C  D00C               	goto	l7545
  4160                           
  4161                           ; BSR set to: 0
  4162                           ;main.c: 438: _delay((unsigned long)((10)*(10000000/4000.0)));
  4163                           
  4164                           ; BSR set to: 0
  4165                           
  4166                           ; BSR set to: 0
  4167                           ;main.c: 437: break;
  4168  000A5E  0E21               	movlw	33
  4169  000A60  0100               	movlb	0	; () banked
  4170  000A62  6FBD               	movwf	??_main& (0+255),b
  4171  000A64  0E76               	movlw	118
  4172  000A66                     u7907:
  4173  000A66  2EE8               	decfsz	wreg,f,c
  4174  000A68  D7FE               	bra	u7907
  4175  000A6A  2FBD               	decfsz	??_main& (0+255),f,b
  4176  000A6C  D7FC               	bra	u7907
  4177  000A6E  F000               	nop	
  4178  000A70  0100               	movlb	0	; () banked
  4179  000A72  2BC2               	incf	main@i_819& (0+255),f,b
  4180  000A74  D7EA               	goto	l7533
  4181  000A76                     l7545:
  4182                           
  4183                           ; BSR set to: 0
  4184                           ;main.c: 439: }
  4185                           ;main.c: 440: lcdInst(0b10000000);;
  4186  000A76  0E80               	movlw	128
  4187  000A78  ECDF  F01B         	call	_lcdInst
  4188                           
  4189                           ;main.c: 441: lcdInst(0b11000000);;
  4190  000A7C  0EC0               	movlw	192
  4191  000A7E  ECDF  F01B         	call	_lcdInst
  4192                           
  4193                           ;main.c: 442: printf("%02x:%02x:%02x        ", lastRunRTC[2],lastRunRTC[1],lastRunRTC[0]
      +                          );
  4194  000A82  0EDA               	movlw	low STR_21
  4195  000A84  0100               	movlb	0	; () banked
  4196  000A86  6F8C               	movwf	printf@f& (0+255),b
  4197  000A88  0EFD               	movlw	high STR_21
  4198  000A8A  0100               	movlb	0	; () banked
  4199  000A8C  6F8D               	movwf	(printf@f+1)& (0+255),b
  4200  000A8E  C0CA  F08E         	movff	_lastRunRTC+2,?_printf+2
  4201  000A92  0100               	movlb	0	; () banked
  4202  000A94  6B8F               	clrf	(?_printf+3)& (0+255),b
  4203  000A96  C0C9  F090         	movff	_lastRunRTC+1,?_printf+4
  4204  000A9A  0100               	movlb	0	; () banked
  4205  000A9C  6B91               	clrf	(?_printf+5)& (0+255),b
  4206  000A9E  C0C8  F092         	movff	_lastRunRTC,?_printf+6
  4207  000AA2  0100               	movlb	0	; () banked
  4208  000AA4  6B93               	clrf	(?_printf+7)& (0+255),b
  4209  000AA6  EC59  F00C         	call	_printf	;wreg free
  4210                           
  4211                           ;main.c: 443: for(unsigned char i=0;i<200;i++){
  4212  000AAA  0E00               	movlw	0
  4213  000AAC  0100               	movlb	0	; () banked
  4214  000AAE  6FC3               	movwf	main@i_821& (0+255),b
  4215  000AB0                     l7551:
  4216                           
  4217                           ; BSR set to: 0
  4218  000AB0  0EC7               	movlw	199
  4219  000AB2  0100               	movlb	0	; () banked
  4220  000AB4  65C3               	cpfsgt	main@i_821& (0+255),b
  4221  000AB6  D001               	goto	l7555
  4222  000AB8  D011               	goto	l7563
  4223  000ABA                     l7555:
  4224                           
  4225                           ; BSR set to: 0
  4226                           ;main.c: 444: if (screenMode != 9)
  4227  000ABA  0E09               	movlw	9
  4228  000ABC  0100               	movlb	0	; () banked
  4229  000ABE  19FA               	xorwf	_screenMode& (0+255),w,b
  4230  000AC0  A4D8               	btfss	status,2,c
  4231  000AC2  D00C               	goto	l7563
  4232                           
  4233                           ; BSR set to: 0
  4234                           ;main.c: 446: _delay((unsigned long)((10)*(10000000/4000.0)));
  4235                           
  4236                           ; BSR set to: 0
  4237                           
  4238                           ; BSR set to: 0
  4239                           ;main.c: 445: break;
  4240  000AC4  0E21               	movlw	33
  4241  000AC6  0100               	movlb	0	; () banked
  4242  000AC8  6FBD               	movwf	??_main& (0+255),b
  4243  000ACA  0E76               	movlw	118
  4244  000ACC                     u7917:
  4245  000ACC  2EE8               	decfsz	wreg,f,c
  4246  000ACE  D7FE               	bra	u7917
  4247  000AD0  2FBD               	decfsz	??_main& (0+255),f,b
  4248  000AD2  D7FC               	bra	u7917
  4249  000AD4  F000               	nop	
  4250  000AD6  0100               	movlb	0	; () banked
  4251  000AD8  2BC3               	incf	main@i_821& (0+255),f,b
  4252  000ADA  D7EA               	goto	l7551
  4253  000ADC                     l7563:
  4254                           
  4255                           ; BSR set to: 0
  4256  000ADC  0E09               	movlw	9
  4257  000ADE  0100               	movlb	0	; () banked
  4258  000AE0  19FA               	xorwf	_screenMode& (0+255),w,b
  4259  000AE2  A4D8               	btfss	status,2,c
  4260  000AE4  D021               	goto	l7571
  4261  000AE6  D78C               	goto	l7525
  4262  000AE8                     l7565:
  4263                           
  4264                           ; BSR set to: 0
  4265                           ;main.c: 450: lcdInst(0b10000000);;
  4266  000AE8  0E80               	movlw	128
  4267  000AEA  ECDF  F01B         	call	_lcdInst
  4268                           
  4269                           ;main.c: 451: printf("PERMANENT LOG A:");
  4270  000AEE  0E98               	movlw	low STR_22
  4271  000AF0  0100               	movlb	0	; () banked
  4272  000AF2  6F8C               	movwf	printf@f& (0+255),b
  4273  000AF4  0EFF               	movlw	high STR_22
  4274  000AF6  0100               	movlb	0	; () banked
  4275  000AF8  6F8D               	movwf	(printf@f+1)& (0+255),b
  4276  000AFA  EC59  F00C         	call	_printf	;wreg free
  4277                           
  4278                           ;main.c: 452: lcdInst(0b11000000);;
  4279  000AFE  0EC0               	movlw	192
  4280  000B00  ECDF  F01B         	call	_lcdInst
  4281                           
  4282                           ;main.c: 453: printf("                ");
  4283  000B04  0E99               	movlw	low STR_23
  4284  000B06  0100               	movlb	0	; () banked
  4285  000B08  6F8C               	movwf	printf@f& (0+255),b
  4286  000B0A  0EFE               	movlw	high STR_23
  4287  000B0C  0100               	movlb	0	; () banked
  4288  000B0E  6F8D               	movwf	(printf@f+1)& (0+255),b
  4289  000B10  EC59  F00C         	call	_printf	;wreg free
  4290                           
  4291                           ;main.c: 454: show_log(1, 10);
  4292  000B14  0E00               	movlw	0
  4293  000B16  0100               	movlb	0	; () banked
  4294  000B18  6FA3               	movwf	(show_log@log_address+1)& (0+255),b
  4295  000B1A  0E01               	movlw	1
  4296  000B1C  6FA2               	movwf	show_log@log_address& (0+255),b
  4297  000B1E  0E0A               	movlw	10
  4298  000B20  0100               	movlb	0	; () banked
  4299  000B22  6FA4               	movwf	show_log@currScreen& (0+255),b
  4300  000B24  EC33  F00E         	call	_show_log	;wreg free
  4301  000B28                     l7571:
  4302  000B28  0E0A               	movlw	10
  4303  000B2A  0100               	movlb	0	; () banked
  4304  000B2C  19FA               	xorwf	_screenMode& (0+255),w,b
  4305  000B2E  A4D8               	btfss	status,2,c
  4306  000B30  D021               	goto	l7579
  4307  000B32  D7DA               	goto	l7565
  4308  000B34                     l7573:
  4309                           
  4310                           ; BSR set to: 0
  4311                           ;main.c: 457: lcdInst(0b10000000);;
  4312  000B34  0E80               	movlw	128
  4313  000B36  ECDF  F01B         	call	_lcdInst
  4314                           
  4315                           ;main.c: 458: printf("PERMANENT LOG B:");
  4316  000B3A  0EA9               	movlw	low STR_24
  4317  000B3C  0100               	movlb	0	; () banked
  4318  000B3E  6F8C               	movwf	printf@f& (0+255),b
  4319  000B40  0EFF               	movlw	high STR_24
  4320  000B42  0100               	movlb	0	; () banked
  4321  000B44  6F8D               	movwf	(printf@f+1)& (0+255),b
  4322  000B46  EC59  F00C         	call	_printf	;wreg free
  4323                           
  4324                           ;main.c: 459: lcdInst(0b11000000);;
  4325  000B4A  0EC0               	movlw	192
  4326  000B4C  ECDF  F01B         	call	_lcdInst
  4327                           
  4328                           ;main.c: 460: printf("                ");
  4329  000B50  0E99               	movlw	low STR_23
  4330  000B52  0100               	movlb	0	; () banked
  4331  000B54  6F8C               	movwf	printf@f& (0+255),b
  4332  000B56  0EFE               	movlw	high STR_23
  4333  000B58  0100               	movlb	0	; () banked
  4334  000B5A  6F8D               	movwf	(printf@f+1)& (0+255),b
  4335  000B5C  EC59  F00C         	call	_printf	;wreg free
  4336                           
  4337                           ;main.c: 461: show_log(97, 11);
  4338  000B60  0E00               	movlw	0
  4339  000B62  0100               	movlb	0	; () banked
  4340  000B64  6FA3               	movwf	(show_log@log_address+1)& (0+255),b
  4341  000B66  0E61               	movlw	97
  4342  000B68  6FA2               	movwf	show_log@log_address& (0+255),b
  4343  000B6A  0E0B               	movlw	11
  4344  000B6C  0100               	movlb	0	; () banked
  4345  000B6E  6FA4               	movwf	show_log@currScreen& (0+255),b
  4346  000B70  EC33  F00E         	call	_show_log	;wreg free
  4347  000B74                     l7579:
  4348  000B74  0E0B               	movlw	11
  4349  000B76  0100               	movlb	0	; () banked
  4350  000B78  19FA               	xorwf	_screenMode& (0+255),w,b
  4351  000B7A  A4D8               	btfss	status,2,c
  4352  000B7C  D021               	goto	l7587
  4353  000B7E  D7DA               	goto	l7573
  4354  000B80                     l7581:
  4355                           
  4356                           ; BSR set to: 0
  4357                           ;main.c: 464: lcdInst(0b10000000);;
  4358  000B80  0E80               	movlw	128
  4359  000B82  ECDF  F01B         	call	_lcdInst
  4360                           
  4361                           ;main.c: 465: printf("PERMANENT LOG C:");
  4362  000B86  0EBA               	movlw	low STR_26
  4363  000B88  0100               	movlb	0	; () banked
  4364  000B8A  6F8C               	movwf	printf@f& (0+255),b
  4365  000B8C  0EFF               	movlw	high STR_26
  4366  000B8E  0100               	movlb	0	; () banked
  4367  000B90  6F8D               	movwf	(printf@f+1)& (0+255),b
  4368  000B92  EC59  F00C         	call	_printf	;wreg free
  4369                           
  4370                           ;main.c: 466: lcdInst(0b11000000);;
  4371  000B96  0EC0               	movlw	192
  4372  000B98  ECDF  F01B         	call	_lcdInst
  4373                           
  4374                           ;main.c: 467: printf("                ");
  4375  000B9C  0E99               	movlw	low STR_23
  4376  000B9E  0100               	movlb	0	; () banked
  4377  000BA0  6F8C               	movwf	printf@f& (0+255),b
  4378  000BA2  0EFE               	movlw	high STR_23
  4379  000BA4  0100               	movlb	0	; () banked
  4380  000BA6  6F8D               	movwf	(printf@f+1)& (0+255),b
  4381  000BA8  EC59  F00C         	call	_printf	;wreg free
  4382                           
  4383                           ;main.c: 468: show_log(193, 12);
  4384  000BAC  0E00               	movlw	0
  4385  000BAE  0100               	movlb	0	; () banked
  4386  000BB0  6FA3               	movwf	(show_log@log_address+1)& (0+255),b
  4387  000BB2  0EC1               	movlw	193
  4388  000BB4  6FA2               	movwf	show_log@log_address& (0+255),b
  4389  000BB6  0E0C               	movlw	12
  4390  000BB8  0100               	movlb	0	; () banked
  4391  000BBA  6FA4               	movwf	show_log@currScreen& (0+255),b
  4392  000BBC  EC33  F00E         	call	_show_log	;wreg free
  4393  000BC0                     l7587:
  4394  000BC0  0E0C               	movlw	12
  4395  000BC2  0100               	movlb	0	; () banked
  4396  000BC4  19FA               	xorwf	_screenMode& (0+255),w,b
  4397  000BC6  A4D8               	btfss	status,2,c
  4398  000BC8  D021               	goto	l7595
  4399  000BCA  D7DA               	goto	l7581
  4400  000BCC                     l7589:
  4401                           
  4402                           ; BSR set to: 0
  4403                           ;main.c: 471: lcdInst(0b10000000);;
  4404  000BCC  0E80               	movlw	128
  4405  000BCE  ECDF  F01B         	call	_lcdInst
  4406                           
  4407                           ;main.c: 472: printf("PERMANENT LOG D:");
  4408  000BD2  0ECB               	movlw	low STR_28
  4409  000BD4  0100               	movlb	0	; () banked
  4410  000BD6  6F8C               	movwf	printf@f& (0+255),b
  4411  000BD8  0EFF               	movlw	high STR_28
  4412  000BDA  0100               	movlb	0	; () banked
  4413  000BDC  6F8D               	movwf	(printf@f+1)& (0+255),b
  4414  000BDE  EC59  F00C         	call	_printf	;wreg free
  4415                           
  4416                           ;main.c: 473: lcdInst(0b11000000);;
  4417  000BE2  0EC0               	movlw	192
  4418  000BE4  ECDF  F01B         	call	_lcdInst
  4419                           
  4420                           ;main.c: 474: printf("                ");
  4421  000BE8  0E99               	movlw	low STR_23
  4422  000BEA  0100               	movlb	0	; () banked
  4423  000BEC  6F8C               	movwf	printf@f& (0+255),b
  4424  000BEE  0EFE               	movlw	high STR_23
  4425  000BF0  0100               	movlb	0	; () banked
  4426  000BF2  6F8D               	movwf	(printf@f+1)& (0+255),b
  4427  000BF4  EC59  F00C         	call	_printf	;wreg free
  4428                           
  4429                           ;main.c: 475: show_log(289, 13);
  4430  000BF8  0E01               	movlw	1
  4431  000BFA  0100               	movlb	0	; () banked
  4432  000BFC  6FA3               	movwf	(show_log@log_address+1)& (0+255),b
  4433  000BFE  0E21               	movlw	33
  4434  000C00  6FA2               	movwf	show_log@log_address& (0+255),b
  4435  000C02  0E0D               	movlw	13
  4436  000C04  0100               	movlb	0	; () banked
  4437  000C06  6FA4               	movwf	show_log@currScreen& (0+255),b
  4438  000C08  EC33  F00E         	call	_show_log	;wreg free
  4439  000C0C                     l7595:
  4440  000C0C  0E0D               	movlw	13
  4441  000C0E  0100               	movlb	0	; () banked
  4442  000C10  19FA               	xorwf	_screenMode& (0+255),w,b
  4443  000C12  A4D8               	btfss	status,2,c
  4444  000C14  D02B               	goto	l7609
  4445  000C16  D7DA               	goto	l7589
  4446  000C18                     l7597:
  4447                           
  4448                           ; BSR set to: 0
  4449                           ;main.c: 478: lcdInst(0b10000000);;
  4450  000C18  0E80               	movlw	128
  4451  000C1A  ECDF  F01B         	call	_lcdInst
  4452                           
  4453                           ;main.c: 479: printf("PRESS * TO      ");
  4454  000C1E  0EFF               	movlw	low STR_30
  4455  000C20  0100               	movlb	0	; () banked
  4456  000C22  6F8C               	movwf	printf@f& (0+255),b
  4457  000C24  0EFE               	movlw	high STR_30
  4458  000C26  0100               	movlb	0	; () banked
  4459  000C28  6F8D               	movwf	(printf@f+1)& (0+255),b
  4460  000C2A  EC59  F00C         	call	_printf	;wreg free
  4461                           
  4462                           ;main.c: 480: lcdInst(0b11000000);;
  4463  000C2E  0EC0               	movlw	192
  4464  000C30  ECDF  F01B         	call	_lcdInst
  4465                           
  4466                           ;main.c: 481: printf("SEND DATA TO PC ");
  4467  000C34  0E76               	movlw	low STR_31
  4468  000C36  0100               	movlb	0	; () banked
  4469  000C38  6F8C               	movwf	printf@f& (0+255),b
  4470  000C3A  0EFF               	movlw	high STR_31
  4471  000C3C  0100               	movlb	0	; () banked
  4472  000C3E  6F8D               	movwf	(printf@f+1)& (0+255),b
  4473  000C40  EC59  F00C         	call	_printf	;wreg free
  4474                           
  4475                           ;main.c: 482: unsigned char keypress = (PORTB & 0xF0) >> 4;
  4476  000C44  3881               	swapf	3969,w,c	;volatile
  4477  000C46  0B0F               	andlw	15
  4478  000C48  0B0F               	andlw	15
  4479  000C4A  0100               	movlb	0	; () banked
  4480  000C4C  6FBF               	movwf	main@keypress& (0+255),b
  4481                           
  4482                           ; BSR set to: 0
  4483                           ;main.c: 483: if (keys[keypress] == '*')
  4484  000C4E  0100               	movlb	0	; () banked
  4485  000C50  51BF               	movf	main@keypress& (0+255),w,b
  4486  000C52  0D01               	mullw	1
  4487  000C54  0E87               	movlw	low _keys
  4488  000C56  24F3               	addwf	prodl,w,c
  4489  000C58  6EF6               	movwf	tblptrl,c
  4490  000C5A  0EFD               	movlw	high _keys
  4491  000C5C  20F4               	addwfc	prodh,w,c
  4492  000C5E  6EF7               	movwf	tblptrh,c
  4493  000C60                     	if	0	;There are less than 3 active tblptr bytes
  4494  000C60                     	endif
  4495  000C60  0008               	tblrd		*
  4496  000C62  50F5               	movf	tablat,w,c
  4497  000C64  0A2A               	xorlw	42
  4498  000C66  B4D8               	btfsc	status,2,c
  4499                           
  4500                           ; BSR set to: 0
  4501                           ;main.c: 484: logPC();
  4502  000C68  ECAA  F006         	call	_logPC	;wreg free
  4503  000C6C                     l7609:
  4504  000C6C  0E0E               	movlw	14
  4505  000C6E  0100               	movlb	0	; () banked
  4506  000C70  19FA               	xorwf	_screenMode& (0+255),w,b
  4507  000C72  A4D8               	btfss	status,2,c
  4508  000C74  D068               	goto	l7631
  4509  000C76  D7D0               	goto	l7597
  4510  000C78                     l7611:
  4511                           
  4512                           ; BSR set to: 0
  4513                           ;main.c: 488: I2C_Master_Start();
  4514  000C78  EC13  F01C         	call	_I2C_Master_Start	;wreg free
  4515                           
  4516                           ;main.c: 489: I2C_Master_Write(0b11010000);
  4517  000C7C  0E00               	movlw	0
  4518  000C7E  0100               	movlb	0	; () banked
  4519  000C80  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  4520  000C82  0ED0               	movlw	208
  4521  000C84  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  4522  000C86  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  4523                           
  4524                           ;main.c: 490: I2C_Master_Write(0x00);
  4525  000C8A  0E00               	movlw	0
  4526  000C8C  0100               	movlb	0	; () banked
  4527  000C8E  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  4528  000C90  0E00               	movlw	0
  4529  000C92  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  4530  000C94  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  4531                           
  4532                           ;main.c: 491: I2C_Master_Stop();
  4533  000C98  EC0F  F01C         	call	_I2C_Master_Stop	;wreg free
  4534                           
  4535                           ;main.c: 493: I2C_Master_Start();
  4536  000C9C  EC13  F01C         	call	_I2C_Master_Start	;wreg free
  4537                           
  4538                           ;main.c: 494: I2C_Master_Write(0b11010001);
  4539  000CA0  0E00               	movlw	0
  4540  000CA2  0100               	movlb	0	; () banked
  4541  000CA4  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  4542  000CA6  0ED1               	movlw	209
  4543  000CA8  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  4544  000CAA  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  4545                           
  4546                           ;main.c: 495: for(unsigned char i=0;i<0x06;i++){
  4547  000CAE  0E00               	movlw	0
  4548  000CB0  0100               	movlb	0	; () banked
  4549  000CB2  6FC4               	movwf	main@i_836& (0+255),b
  4550  000CB4                     l7615:
  4551                           
  4552                           ; BSR set to: 0
  4553  000CB4  0E05               	movlw	5
  4554  000CB6  0100               	movlb	0	; () banked
  4555  000CB8  65C4               	cpfsgt	main@i_836& (0+255),b
  4556  000CBA  D001               	goto	l7619
  4557  000CBC  D010               	goto	l7625
  4558  000CBE                     l7619:
  4559                           
  4560                           ; BSR set to: 0
  4561                           ;main.c: 496: realTime[i] = I2C_Master_Read(1);
  4562  000CBE  0100               	movlb	0	; () banked
  4563  000CC0  51C4               	movf	main@i_836& (0+255),w,b
  4564  000CC2  0D01               	mullw	1
  4565  000CC4  0E48               	movlw	low _realTime
  4566  000CC6  24F3               	addwf	prodl,w,c
  4567  000CC8  6ED9               	movwf	fsr2l,c
  4568  000CCA  0E00               	movlw	high _realTime
  4569  000CCC  20F4               	addwfc	prodh,w,c
  4570  000CCE  6EDA               	movwf	fsr2h,c
  4571  000CD0  0E01               	movlw	1
  4572  000CD2  ECE7  F01A         	call	_I2C_Master_Read
  4573  000CD6  6EDF               	movwf	indf2,c
  4574  000CD8  0100               	movlb	0	; () banked
  4575  000CDA  2BC4               	incf	main@i_836& (0+255),f,b
  4576  000CDC  D7EB               	goto	l7615
  4577  000CDE                     l7625:
  4578                           
  4579                           ; BSR set to: 0
  4580                           ;main.c: 497: }
  4581                           ;main.c: 498: realTime[6] = I2C_Master_Read(0);
  4582  000CDE  0E00               	movlw	0
  4583  000CE0  ECE7  F01A         	call	_I2C_Master_Read
  4584  000CE4  6E4E               	movwf	_realTime+6,c
  4585                           
  4586                           ;main.c: 499: I2C_Master_Stop();
  4587  000CE6  EC0F  F01C         	call	_I2C_Master_Stop	;wreg free
  4588                           
  4589                           ;main.c: 500: lcdInst(0b10000000);;
  4590  000CEA  0E80               	movlw	128
  4591  000CEC  ECDF  F01B         	call	_lcdInst
  4592                           
  4593                           ;main.c: 501: printf("DATE: %02x/%02x/%02x  ", realTime[6],realTime[5],realTime[4]);
  4594  000CF0  0EF1               	movlw	low STR_32
  4595  000CF2  0100               	movlb	0	; () banked
  4596  000CF4  6F8C               	movwf	printf@f& (0+255),b
  4597  000CF6  0EFD               	movlw	high STR_32
  4598  000CF8  0100               	movlb	0	; () banked
  4599  000CFA  6F8D               	movwf	(printf@f+1)& (0+255),b
  4600  000CFC  C04E  F08E         	movff	_realTime+6,?_printf+2
  4601  000D00  0100               	movlb	0	; () banked
  4602  000D02  6B8F               	clrf	(?_printf+3)& (0+255),b
  4603  000D04  C04D  F090         	movff	_realTime+5,?_printf+4
  4604  000D08  0100               	movlb	0	; () banked
  4605  000D0A  6B91               	clrf	(?_printf+5)& (0+255),b
  4606  000D0C  C04C  F092         	movff	_realTime+4,?_printf+6
  4607  000D10  0100               	movlb	0	; () banked
  4608  000D12  6B93               	clrf	(?_printf+7)& (0+255),b
  4609  000D14  EC59  F00C         	call	_printf	;wreg free
  4610                           
  4611                           ;main.c: 502: lcdInst(0b11000000);;
  4612  000D18  0EC0               	movlw	192
  4613  000D1A  ECDF  F01B         	call	_lcdInst
  4614                           
  4615                           ;main.c: 503: printf("TIME: %02x:%02x:%02x  ", realTime[2],realTime[1],realTime[0]);
  4616  000D1E  0E08               	movlw	low STR_33
  4617  000D20  0100               	movlb	0	; () banked
  4618  000D22  6F8C               	movwf	printf@f& (0+255),b
  4619  000D24  0EFE               	movlw	high STR_33
  4620  000D26  0100               	movlb	0	; () banked
  4621  000D28  6F8D               	movwf	(printf@f+1)& (0+255),b
  4622  000D2A  C04A  F08E         	movff	_realTime+2,?_printf+2
  4623  000D2E  0100               	movlb	0	; () banked
  4624  000D30  6B8F               	clrf	(?_printf+3)& (0+255),b
  4625  000D32  C049  F090         	movff	_realTime+1,?_printf+4
  4626  000D36  0100               	movlb	0	; () banked
  4627  000D38  6B91               	clrf	(?_printf+5)& (0+255),b
  4628  000D3A  C048  F092         	movff	_realTime,?_printf+6
  4629  000D3E  0100               	movlb	0	; () banked
  4630  000D40  6B93               	clrf	(?_printf+7)& (0+255),b
  4631  000D42  EC59  F00C         	call	_printf	;wreg free
  4632  000D46                     l7631:
  4633  000D46  0E0F               	movlw	15
  4634  000D48  0100               	movlb	0	; () banked
  4635  000D4A  19FA               	xorwf	_screenMode& (0+255),w,b
  4636  000D4C  A4D8               	btfss	status,2,c
  4637  000D4E  EFA6  F000         	goto	l7131
  4638  000D52  D792               	goto	l7611
  4639  000D54                     __end_of_main:
  4640                           	opt stack 0
  4641                           tblptru	equ	0xFF8
  4642                           tblptrh	equ	0xFF7
  4643                           tblptrl	equ	0xFF6
  4644                           tablat	equ	0xFF5
  4645                           prodh	equ	0xFF4
  4646                           prodl	equ	0xFF3
  4647                           intcon	equ	0xFF2
  4648                           intcon2	equ	0xFF1
  4649                           intcon3	equ	0xFF0
  4650                           postinc0	equ	0xFEE
  4651                           wreg	equ	0xFE8
  4652                           postdec1	equ	0xFE5
  4653                           fsr1l	equ	0xFE1
  4654                           indf2	equ	0xFDF
  4655                           fsr2h	equ	0xFDA
  4656                           fsr2l	equ	0xFD9
  4657                           status	equ	0xFD8
  4658                           
  4659 ;; *************** function _wait_2ms *****************
  4660 ;; Defined at:
  4661 ;;		line 742 in file "../main.c"
  4662 ;; Parameters:    Size  Location     Type
  4663 ;;  x               2    0[BANK0 ] unsigned int 
  4664 ;; Auto vars:     Size  Location     Type
  4665 ;;		None
  4666 ;; Return value:  Size  Location     Type
  4667 ;;                  1    wreg      void 
  4668 ;; Registers used:
  4669 ;;		wreg, status,2, status,0
  4670 ;; Tracked objects:
  4671 ;;		On entry : 0/0
  4672 ;;		On exit  : 0/0
  4673 ;;		Unchanged: 0/0
  4674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4675 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4676 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4677 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4678 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4679 ;;Total ram usage:        2 bytes
  4680 ;; Hardware stack levels used:    1
  4681 ;; Hardware stack levels required when called:    5
  4682 ;; This function calls:
  4683 ;;		Nothing
  4684 ;; This function is called by:
  4685 ;;		_main
  4686 ;; This function uses a non-reentrant model
  4687 ;;
  4688                           
  4689                           	psect	text1
  4690  0036FE                     __ptext1:
  4691                           	opt stack 0
  4692  0036FE                     _wait_2ms:
  4693                           	opt stack 25
  4694                           
  4695                           ;main.c: 743: count_2ms = x;
  4696                           
  4697                           ; BSR set to: 0
  4698                           ;incstack = 0
  4699  0036FE  C080  F04F         	movff	wait_2ms@x,_count_2ms
  4700  003702  C081  F050         	movff	wait_2ms@x+1,_count_2ms+1
  4701  003706                     l6457:
  4702  003706  504F               	movf	_count_2ms,w,c
  4703  003708  1050               	iorwf	_count_2ms+1,w,c
  4704  00370A  B4D8               	btfsc	status,2,c
  4705  00370C  0012               	return	
  4706  00370E  0100               	movlb	0	; () banked
  4707  003710  05FA               	decf	_screenMode& (0+255),w,b
  4708  003712  A4D8               	btfss	status,2,c
  4709  003714  0012               	return	
  4710  003716  D7F7               	goto	l6457
  4711  003718                     __end_of_wait_2ms:
  4712                           	opt stack 0
  4713                           tblptru	equ	0xFF8
  4714                           tblptrh	equ	0xFF7
  4715                           tblptrl	equ	0xFF6
  4716                           tablat	equ	0xFF5
  4717                           prodh	equ	0xFF4
  4718                           prodl	equ	0xFF3
  4719                           intcon	equ	0xFF2
  4720                           intcon2	equ	0xFF1
  4721                           intcon3	equ	0xFF0
  4722                           postinc0	equ	0xFEE
  4723                           wreg	equ	0xFE8
  4724                           postdec1	equ	0xFE5
  4725                           fsr1l	equ	0xFE1
  4726                           indf2	equ	0xFDF
  4727                           fsr2h	equ	0xFDA
  4728                           fsr2l	equ	0xFD9
  4729                           status	equ	0xFD8
  4730                           
  4731 ;; *************** function _testBatteries *****************
  4732 ;; Defined at:
  4733 ;;		line 652 in file "../main.c"
  4734 ;; Parameters:    Size  Location     Type
  4735 ;;		None
  4736 ;; Auto vars:     Size  Location     Type
  4737 ;;  volt5           2   11[BANK0 ] unsigned int 
  4738 ;;  volt4           2    9[BANK0 ] unsigned int 
  4739 ;;  volt2           2    7[BANK0 ] unsigned int 
  4740 ;;  volt3           2    5[BANK0 ] unsigned int 
  4741 ;;  volt1           2    3[BANK0 ] unsigned int 
  4742 ;; Return value:  Size  Location     Type
  4743 ;;                  1    wreg      void 
  4744 ;; Registers used:
  4745 ;;		wreg, status,2, status,0, cstack
  4746 ;; Tracked objects:
  4747 ;;		On entry : 0/0
  4748 ;;		On exit  : 0/0
  4749 ;;		Unchanged: 0/0
  4750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4751 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4752 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4753 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4754 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4755 ;;Total ram usage:       12 bytes
  4756 ;; Hardware stack levels used:    1
  4757 ;; Hardware stack levels required when called:    6
  4758 ;; This function calls:
  4759 ;;		_readADC
  4760 ;; This function is called by:
  4761 ;;		_main
  4762 ;; This function uses a non-reentrant model
  4763 ;;
  4764                           
  4765                           	psect	text2
  4766  002BB4                     __ptext2:
  4767                           	opt stack 0
  4768  002BB4                     _testBatteries:
  4769                           	opt stack 24
  4770                           
  4771                           ;main.c: 672: readADC(1);
  4772                           
  4773                           ;incstack = 0
  4774  002BB4  0E01               	movlw	1
  4775  002BB6  EC8C  F01B         	call	_readADC
  4776                           
  4777                           ;main.c: 673: unsigned int volt1 = ADRES;
  4778  002BBA  CFC3 F083          	movff	4035,testBatteries@volt1	;volatile
  4779  002BBE  CFC4 F084          	movff	4036,testBatteries@volt1+1	;volatile
  4780                           
  4781                           ;main.c: 674: readADC(2);
  4782  002BC2  0E02               	movlw	2
  4783  002BC4  EC8C  F01B         	call	_readADC
  4784                           
  4785                           ;main.c: 675: unsigned int volt2 = ADRES;
  4786  002BC8  CFC3 F087          	movff	4035,testBatteries@volt2	;volatile
  4787  002BCC  CFC4 F088          	movff	4036,testBatteries@volt2+1	;volatile
  4788                           
  4789                           ;main.c: 676: readADC(3);
  4790  002BD0  0E03               	movlw	3
  4791  002BD2  EC8C  F01B         	call	_readADC
  4792                           
  4793                           ;main.c: 677: unsigned int volt3 = ADRES;
  4794  002BD6  CFC3 F085          	movff	4035,testBatteries@volt3	;volatile
  4795  002BDA  CFC4 F086          	movff	4036,testBatteries@volt3+1	;volatile
  4796                           
  4797                           ;main.c: 678: readADC(4);
  4798  002BDE  0E04               	movlw	4
  4799  002BE0  EC8C  F01B         	call	_readADC
  4800                           
  4801                           ;main.c: 679: unsigned int volt4 = ADRES;
  4802  002BE4  CFC3 F089          	movff	4035,testBatteries@volt4	;volatile
  4803  002BE8  CFC4 F08A          	movff	4036,testBatteries@volt4+1	;volatile
  4804                           
  4805                           ;main.c: 680: readADC(5);
  4806  002BEC  0E05               	movlw	5
  4807  002BEE  EC8C  F01B         	call	_readADC
  4808                           
  4809                           ;main.c: 681: unsigned int volt5 = ADRES;
  4810  002BF2  CFC3 F08B          	movff	4035,testBatteries@volt5	;volatile
  4811  002BF6  CFC4 F08C          	movff	4036,testBatteries@volt5+1	;volatile
  4812                           
  4813                           ;main.c: 688: if (volt1){
  4814  002BFA  0100               	movlb	0	; () banked
  4815  002BFC  5183               	movf	testBatteries@volt1& (0+255),w,b
  4816  002BFE  0100               	movlb	0	; () banked
  4817  002C00  1184               	iorwf	(testBatteries@volt1+1)& (0+255),w,b
  4818  002C02  B4D8               	btfsc	status,2,c
  4819  002C04  D00D               	goto	l6483
  4820                           
  4821                           ; BSR set to: 0
  4822                           ;main.c: 689: countC++;
  4823  002C06  0100               	movlb	0	; () banked
  4824  002C08  2BE1               	incf	_countC& (0+255),f,b
  4825                           
  4826                           ; BSR set to: 0
  4827                           ;main.c: 690: plat1Right = 512;
  4828  002C0A  0E02               	movlw	2
  4829  002C0C  0100               	movlb	0	; () banked
  4830  002C0E  6FD2               	movwf	(_plat1Right+1)& (0+255),b
  4831  002C10  0E00               	movlw	0
  4832  002C12  6FD1               	movwf	_plat1Right& (0+255),b
  4833                           
  4834                           ; BSR set to: 0
  4835                           ;main.c: 691: plat2Left = 512;
  4836  002C14  0E02               	movlw	2
  4837  002C16  0100               	movlb	0	; () banked
  4838  002C18  6FD4               	movwf	(_plat2Left+1)& (0+255),b
  4839  002C1A  0E00               	movlw	0
  4840  002C1C  6FD3               	movwf	_plat2Left& (0+255),b
  4841                           
  4842                           ; BSR set to: 0
  4843                           ;main.c: 692: return;
  4844  002C1E  0012               	return	
  4845  002C20                     l6483:
  4846                           
  4847                           ; BSR set to: 0
  4848                           ;main.c: 693: }
  4849                           ;main.c: 694: if (!(volt1 | volt2 | volt3 | volt4 | volt5)){
  4850  002C20  0100               	movlb	0	; () banked
  4851  002C22  5187               	movf	testBatteries@volt2& (0+255),w,b
  4852  002C24  0100               	movlb	0	; () banked
  4853  002C26  1183               	iorwf	testBatteries@volt1& (0+255),w,b
  4854  002C28  0100               	movlb	0	; () banked
  4855  002C2A  6F81               	movwf	??_testBatteries& (0+255),b
  4856  002C2C  0100               	movlb	0	; () banked
  4857  002C2E  5188               	movf	(testBatteries@volt2+1)& (0+255),w,b
  4858  002C30  0100               	movlb	0	; () banked
  4859  002C32  1184               	iorwf	(testBatteries@volt1+1)& (0+255),w,b
  4860  002C34  0100               	movlb	0	; () banked
  4861  002C36  6F82               	movwf	(??_testBatteries+1)& (0+255),b
  4862  002C38  0100               	movlb	0	; () banked
  4863  002C3A  5185               	movf	testBatteries@volt3& (0+255),w,b
  4864  002C3C  0100               	movlb	0	; () banked
  4865  002C3E  1381               	iorwf	??_testBatteries& (0+255),f,b
  4866  002C40  0100               	movlb	0	; () banked
  4867  002C42  5186               	movf	(testBatteries@volt3+1)& (0+255),w,b
  4868  002C44  0100               	movlb	0	; () banked
  4869  002C46  1382               	iorwf	(??_testBatteries+1)& (0+255),f,b
  4870  002C48  0100               	movlb	0	; () banked
  4871  002C4A  5189               	movf	testBatteries@volt4& (0+255),w,b
  4872  002C4C  0100               	movlb	0	; () banked
  4873  002C4E  1381               	iorwf	??_testBatteries& (0+255),f,b
  4874  002C50  0100               	movlb	0	; () banked
  4875  002C52  518A               	movf	(testBatteries@volt4+1)& (0+255),w,b
  4876  002C54  0100               	movlb	0	; () banked
  4877  002C56  1382               	iorwf	(??_testBatteries+1)& (0+255),f,b
  4878  002C58  0100               	movlb	0	; () banked
  4879  002C5A  518B               	movf	testBatteries@volt5& (0+255),w,b
  4880  002C5C  0100               	movlb	0	; () banked
  4881  002C5E  1381               	iorwf	??_testBatteries& (0+255),f,b
  4882  002C60  0100               	movlb	0	; () banked
  4883  002C62  518C               	movf	(testBatteries@volt5+1)& (0+255),w,b
  4884  002C64  0100               	movlb	0	; () banked
  4885  002C66  1382               	iorwf	(??_testBatteries+1)& (0+255),f,b
  4886  002C68  0100               	movlb	0	; () banked
  4887  002C6A  5181               	movf	??_testBatteries& (0+255),w,b
  4888  002C6C  0100               	movlb	0	; () banked
  4889  002C6E  1182               	iorwf	(??_testBatteries+1)& (0+255),w,b
  4890  002C70  A4D8               	btfss	status,2,c
  4891  002C72  D00D               	goto	l6493
  4892                           
  4893                           ; BSR set to: 0
  4894                           ;main.c: 695: countDrain++;
  4895  002C74  0100               	movlb	0	; () banked
  4896  002C76  2BE2               	incf	_countDrain& (0+255),f,b
  4897                           
  4898                           ; BSR set to: 0
  4899                           ;main.c: 696: plat1Left = 512;
  4900  002C78  0E02               	movlw	2
  4901  002C7A  0100               	movlb	0	; () banked
  4902  002C7C  6FD0               	movwf	(_plat1Left+1)& (0+255),b
  4903  002C7E  0E00               	movlw	0
  4904  002C80  6FCF               	movwf	_plat1Left& (0+255),b
  4905                           
  4906                           ; BSR set to: 0
  4907                           ;main.c: 697: plat2Right = 512;
  4908  002C82  0E02               	movlw	2
  4909  002C84  0100               	movlb	0	; () banked
  4910  002C86  6FD6               	movwf	(_plat2Right+1)& (0+255),b
  4911  002C88  0E00               	movlw	0
  4912  002C8A  6FD5               	movwf	_plat2Right& (0+255),b
  4913                           
  4914                           ; BSR set to: 0
  4915                           ;main.c: 698: return;
  4916  002C8C  0012               	return	
  4917  002C8E                     l6493:
  4918                           
  4919                           ; BSR set to: 0
  4920                           ;main.c: 699: }
  4921                           ;main.c: 700: if (volt2 && volt3){
  4922  002C8E  0100               	movlb	0	; () banked
  4923  002C90  5187               	movf	testBatteries@volt2& (0+255),w,b
  4924  002C92  0100               	movlb	0	; () banked
  4925  002C94  1188               	iorwf	(testBatteries@volt2+1)& (0+255),w,b
  4926  002C96  B4D8               	btfsc	status,2,c
  4927  002C98  D00F               	goto	l6503
  4928                           
  4929                           ; BSR set to: 0
  4930  002C9A  0100               	movlb	0	; () banked
  4931  002C9C  5185               	movf	testBatteries@volt3& (0+255),w,b
  4932  002C9E  0100               	movlb	0	; () banked
  4933  002CA0  1186               	iorwf	(testBatteries@volt3+1)& (0+255),w,b
  4934  002CA2  B4D8               	btfsc	status,2,c
  4935  002CA4  D009               	goto	l6503
  4936                           
  4937                           ; BSR set to: 0
  4938                           ;main.c: 701: countAA = countAA + 2;
  4939  002CA6  0100               	movlb	0	; () banked
  4940  002CA8  51E0               	movf	_countAA& (0+255),w,b
  4941  002CAA  0F02               	addlw	2
  4942  002CAC  0100               	movlb	0	; () banked
  4943  002CAE  6FE0               	movwf	_countAA& (0+255),b
  4944                           
  4945                           ; BSR set to: 0
  4946                           ;main.c: 702: doubleAA = 1;
  4947  002CB0  0E01               	movlw	1
  4948  002CB2  0100               	movlb	0	; () banked
  4949  002CB4  6FE4               	movwf	_doubleAA& (0+255),b
  4950                           
  4951                           ; BSR set to: 0
  4952                           ;main.c: 703: return;
  4953  002CB6  0012               	return	
  4954  002CB8                     l6503:
  4955                           
  4956                           ; BSR set to: 0
  4957                           ;main.c: 704: }
  4958                           ;main.c: 705: if (volt4 >200 | volt5 > 200){
  4959  002CB8  0100               	movlb	0	; () banked
  4960  002CBA  518A               	movf	(testBatteries@volt4+1)& (0+255),w,b
  4961  002CBC  E10D               	bnz	l6507
  4962  002CBE  0EC9               	movlw	201
  4963  002CC0  0100               	movlb	0	; () banked
  4964  002CC2  5D89               	subwf	testBatteries@volt4& (0+255),w,b
  4965  002CC4  B0D8               	btfsc	status,0,c
  4966  002CC6  D008               	goto	l6507
  4967                           
  4968                           ; BSR set to: 0
  4969  002CC8  0100               	movlb	0	; () banked
  4970  002CCA  518C               	movf	(testBatteries@volt5+1)& (0+255),w,b
  4971  002CCC  E105               	bnz	l6507
  4972  002CCE  0EC9               	movlw	201
  4973  002CD0  0100               	movlb	0	; () banked
  4974  002CD2  5D8B               	subwf	testBatteries@volt5& (0+255),w,b
  4975  002CD4  A0D8               	btfss	status,0,c
  4976  002CD6  D00D               	goto	l6513
  4977  002CD8                     l6507:
  4978                           
  4979                           ; BSR set to: 0
  4980                           ;main.c: 706: plat1Right = 512;
  4981  002CD8  0E02               	movlw	2
  4982  002CDA  0100               	movlb	0	; () banked
  4983  002CDC  6FD2               	movwf	(_plat1Right+1)& (0+255),b
  4984  002CDE  0E00               	movlw	0
  4985  002CE0  6FD1               	movwf	_plat1Right& (0+255),b
  4986                           
  4987                           ;main.c: 707: plat2Left = 512;
  4988  002CE2  0E02               	movlw	2
  4989  002CE4  0100               	movlb	0	; () banked
  4990  002CE6  6FD4               	movwf	(_plat2Left+1)& (0+255),b
  4991  002CE8  0E00               	movlw	0
  4992  002CEA  6FD3               	movwf	_plat2Left& (0+255),b
  4993                           
  4994                           ; BSR set to: 0
  4995                           ;main.c: 708: count9V++;
  4996  002CEC  0100               	movlb	0	; () banked
  4997  002CEE  2BDF               	incf	_count9V& (0+255),f,b
  4998                           
  4999                           ; BSR set to: 0
  5000                           ;main.c: 709: return;
  5001  002CF0  0012               	return	
  5002  002CF2                     l6513:
  5003                           
  5004                           ; BSR set to: 0
  5005                           ;main.c: 710: }
  5006                           ;main.c: 711: if (volt4 > 80 | volt5 > 80){
  5007  002CF2  0100               	movlb	0	; () banked
  5008  002CF4  518A               	movf	(testBatteries@volt4+1)& (0+255),w,b
  5009  002CF6  E10D               	bnz	l6517
  5010  002CF8  0E51               	movlw	81
  5011  002CFA  0100               	movlb	0	; () banked
  5012  002CFC  5D89               	subwf	testBatteries@volt4& (0+255),w,b
  5013  002CFE  B0D8               	btfsc	status,0,c
  5014  002D00  D008               	goto	l6517
  5015                           
  5016                           ; BSR set to: 0
  5017  002D02  0100               	movlb	0	; () banked
  5018  002D04  518C               	movf	(testBatteries@volt5+1)& (0+255),w,b
  5019  002D06  E105               	bnz	l6517
  5020  002D08  0E51               	movlw	81
  5021  002D0A  0100               	movlb	0	; () banked
  5022  002D0C  5D8B               	subwf	testBatteries@volt5& (0+255),w,b
  5023  002D0E  A0D8               	btfss	status,0,c
  5024  002D10  D00D               	goto	l6525
  5025  002D12                     l6517:
  5026                           
  5027                           ; BSR set to: 0
  5028                           ;main.c: 712: countDrain++;
  5029  002D12  0100               	movlb	0	; () banked
  5030  002D14  2BE2               	incf	_countDrain& (0+255),f,b
  5031                           
  5032                           ; BSR set to: 0
  5033                           ;main.c: 713: plat1Left = 512;
  5034  002D16  0E02               	movlw	2
  5035  002D18  0100               	movlb	0	; () banked
  5036  002D1A  6FD0               	movwf	(_plat1Left+1)& (0+255),b
  5037  002D1C  0E00               	movlw	0
  5038  002D1E  6FCF               	movwf	_plat1Left& (0+255),b
  5039                           
  5040                           ; BSR set to: 0
  5041                           ;main.c: 714: plat2Right = 512;
  5042  002D20  0E02               	movlw	2
  5043  002D22  0100               	movlb	0	; () banked
  5044  002D24  6FD6               	movwf	(_plat2Right+1)& (0+255),b
  5045  002D26  0E00               	movlw	0
  5046  002D28  6FD5               	movwf	_plat2Right& (0+255),b
  5047                           
  5048                           ; BSR set to: 0
  5049                           ;main.c: 715: return;
  5050  002D2A  0012               	return	
  5051  002D2C                     l6525:
  5052                           
  5053                           ; BSR set to: 0
  5054                           ;main.c: 716: }
  5055                           ;main.c: 717: if (volt2 | volt3){
  5056  002D2C  0100               	movlb	0	; () banked
  5057  002D2E  5185               	movf	testBatteries@volt3& (0+255),w,b
  5058  002D30  0100               	movlb	0	; () banked
  5059  002D32  1187               	iorwf	testBatteries@volt2& (0+255),w,b
  5060  002D34  0100               	movlb	0	; () banked
  5061  002D36  6F81               	movwf	??_testBatteries& (0+255),b
  5062  002D38  0100               	movlb	0	; () banked
  5063  002D3A  5186               	movf	(testBatteries@volt3+1)& (0+255),w,b
  5064  002D3C  0100               	movlb	0	; () banked
  5065  002D3E  1188               	iorwf	(testBatteries@volt2+1)& (0+255),w,b
  5066  002D40  0100               	movlb	0	; () banked
  5067  002D42  6F82               	movwf	(??_testBatteries+1)& (0+255),b
  5068  002D44  0100               	movlb	0	; () banked
  5069  002D46  5181               	movf	??_testBatteries& (0+255),w,b
  5070  002D48  0100               	movlb	0	; () banked
  5071  002D4A  1182               	iorwf	(??_testBatteries+1)& (0+255),w,b
  5072  002D4C  B4D8               	btfsc	status,2,c
  5073  002D4E  D035               	goto	l6545
  5074                           
  5075                           ; BSR set to: 0
  5076                           ;main.c: 718: countAA++;
  5077  002D50  0100               	movlb	0	; () banked
  5078  002D52  2BE0               	incf	_countAA& (0+255),f,b
  5079                           
  5080                           ; BSR set to: 0
  5081                           ;main.c: 719: if (volt4 && volt5){
  5082  002D54  0100               	movlb	0	; () banked
  5083  002D56  5189               	movf	testBatteries@volt4& (0+255),w,b
  5084  002D58  0100               	movlb	0	; () banked
  5085  002D5A  118A               	iorwf	(testBatteries@volt4+1)& (0+255),w,b
  5086  002D5C  B4D8               	btfsc	status,2,c
  5087  002D5E  D011               	goto	l6537
  5088                           
  5089                           ; BSR set to: 0
  5090  002D60  0100               	movlb	0	; () banked
  5091  002D62  518B               	movf	testBatteries@volt5& (0+255),w,b
  5092  002D64  0100               	movlb	0	; () banked
  5093  002D66  118C               	iorwf	(testBatteries@volt5+1)& (0+255),w,b
  5094  002D68  B4D8               	btfsc	status,2,c
  5095  002D6A  D00B               	goto	l6537
  5096                           
  5097                           ; BSR set to: 0
  5098                           ;main.c: 720: plat1Right = 512;
  5099  002D6C  0E02               	movlw	2
  5100  002D6E  0100               	movlb	0	; () banked
  5101  002D70  6FD2               	movwf	(_plat1Right+1)& (0+255),b
  5102  002D72  0E00               	movlw	0
  5103  002D74  6FD1               	movwf	_plat1Right& (0+255),b
  5104                           
  5105                           ;main.c: 721: plat2Left = 512;
  5106  002D76  0E02               	movlw	2
  5107  002D78  0100               	movlb	0	; () banked
  5108  002D7A  6FD4               	movwf	(_plat2Left+1)& (0+255),b
  5109  002D7C  0E00               	movlw	0
  5110  002D7E  6FD3               	movwf	_plat2Left& (0+255),b
  5111                           
  5112                           ; BSR set to: 0
  5113                           ;main.c: 722: return;
  5114  002D80  0012               	return	
  5115  002D82                     l6537:
  5116                           
  5117                           ; BSR set to: 0
  5118                           ;main.c: 723: }
  5119                           ;main.c: 724: if (volt2){
  5120  002D82  0100               	movlb	0	; () banked
  5121  002D84  5187               	movf	testBatteries@volt2& (0+255),w,b
  5122  002D86  0100               	movlb	0	; () banked
  5123  002D88  1188               	iorwf	(testBatteries@volt2+1)& (0+255),w,b
  5124  002D8A  B4D8               	btfsc	status,2,c
  5125  002D8C  D00B               	goto	l6541
  5126                           
  5127                           ; BSR set to: 0
  5128                           ;main.c: 725: plat1Right = 512;
  5129  002D8E  0E02               	movlw	2
  5130  002D90  0100               	movlb	0	; () banked
  5131  002D92  6FD2               	movwf	(_plat1Right+1)& (0+255),b
  5132  002D94  0E00               	movlw	0
  5133  002D96  6FD1               	movwf	_plat1Right& (0+255),b
  5134                           
  5135                           ;main.c: 726: plat2Left = 512;
  5136  002D98  0E02               	movlw	2
  5137  002D9A  0100               	movlb	0	; () banked
  5138  002D9C  6FD4               	movwf	(_plat2Left+1)& (0+255),b
  5139  002D9E  0E00               	movlw	0
  5140  002DA0  6FD3               	movwf	_plat2Left& (0+255),b
  5141                           
  5142                           ;main.c: 727: }
  5143  002DA2  0012               	return	
  5144  002DA4                     l6541:
  5145                           
  5146                           ; BSR set to: 0
  5147                           ;main.c: 728: else{
  5148                           ;main.c: 729: plat2Right = 512;
  5149  002DA4  0E02               	movlw	2
  5150  002DA6  0100               	movlb	0	; () banked
  5151  002DA8  6FD6               	movwf	(_plat2Right+1)& (0+255),b
  5152  002DAA  0E00               	movlw	0
  5153  002DAC  6FD5               	movwf	_plat2Right& (0+255),b
  5154                           
  5155                           ;main.c: 730: plat1Left = 512;
  5156  002DAE  0E02               	movlw	2
  5157  002DB0  0100               	movlb	0	; () banked
  5158  002DB2  6FD0               	movwf	(_plat1Left+1)& (0+255),b
  5159  002DB4  0E00               	movlw	0
  5160  002DB6  6FCF               	movwf	_plat1Left& (0+255),b
  5161                           
  5162                           ; BSR set to: 0
  5163                           ;main.c: 731: }
  5164                           ;main.c: 732: return;
  5165                           
  5166                           ; BSR set to: 0
  5167  002DB8  0012               	return	
  5168  002DBA                     l6545:
  5169                           
  5170                           ; BSR set to: 0
  5171                           ;main.c: 733: }
  5172                           ;main.c: 736: plat1Left = 512;
  5173  002DBA  0E02               	movlw	2
  5174  002DBC  0100               	movlb	0	; () banked
  5175  002DBE  6FD0               	movwf	(_plat1Left+1)& (0+255),b
  5176  002DC0  0E00               	movlw	0
  5177  002DC2  6FCF               	movwf	_plat1Left& (0+255),b
  5178                           
  5179                           ;main.c: 737: plat2Right = 512;
  5180  002DC4  0E02               	movlw	2
  5181  002DC6  0100               	movlb	0	; () banked
  5182  002DC8  6FD6               	movwf	(_plat2Right+1)& (0+255),b
  5183  002DCA  0E00               	movlw	0
  5184  002DCC  6FD5               	movwf	_plat2Right& (0+255),b
  5185                           
  5186                           ; BSR set to: 0
  5187                           ;main.c: 738: countDrain++;
  5188  002DCE  0100               	movlb	0	; () banked
  5189  002DD0  2BE2               	incf	_countDrain& (0+255),f,b
  5190  002DD2  0012               	return	
  5191  002DD4                     __end_of_testBatteries:
  5192                           	opt stack 0
  5193                           tblptru	equ	0xFF8
  5194                           tblptrh	equ	0xFF7
  5195                           tblptrl	equ	0xFF6
  5196                           tablat	equ	0xFF5
  5197                           prodh	equ	0xFF4
  5198                           prodl	equ	0xFF3
  5199                           intcon	equ	0xFF2
  5200                           intcon2	equ	0xFF1
  5201                           intcon3	equ	0xFF0
  5202                           postinc0	equ	0xFEE
  5203                           wreg	equ	0xFE8
  5204                           postdec1	equ	0xFE5
  5205                           fsr1l	equ	0xFE1
  5206                           indf2	equ	0xFDF
  5207                           fsr2h	equ	0xFDA
  5208                           fsr2l	equ	0xFD9
  5209                           status	equ	0xFD8
  5210                           
  5211 ;; *************** function _readADC *****************
  5212 ;; Defined at:
  5213 ;;		line 561 in file "../main.c"
  5214 ;; Parameters:    Size  Location     Type
  5215 ;;  channel         1    wreg     unsigned char 
  5216 ;; Auto vars:     Size  Location     Type
  5217 ;;  channel         1    0[BANK0 ] unsigned char 
  5218 ;; Return value:  Size  Location     Type
  5219 ;;                  1    wreg      void 
  5220 ;; Registers used:
  5221 ;;		wreg, status,2, status,0
  5222 ;; Tracked objects:
  5223 ;;		On entry : 0/0
  5224 ;;		On exit  : 0/0
  5225 ;;		Unchanged: 0/0
  5226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5227 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5228 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5229 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5230 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5231 ;;Total ram usage:        1 bytes
  5232 ;; Hardware stack levels used:    1
  5233 ;; Hardware stack levels required when called:    5
  5234 ;; This function calls:
  5235 ;;		Nothing
  5236 ;; This function is called by:
  5237 ;;		_main
  5238 ;;		_testBatteries
  5239 ;; This function uses a non-reentrant model
  5240 ;;
  5241                           
  5242                           	psect	text3
  5243  003718                     __ptext3:
  5244                           	opt stack 0
  5245  003718                     _readADC:
  5246                           	opt stack 24
  5247                           
  5248                           ; BSR set to: 0
  5249                           ;incstack = 0
  5250                           ;readADC@channel stored from wreg
  5251  003718  0100               	movlb	0	; () banked
  5252  00371A  6F80               	movwf	readADC@channel& (0+255),b
  5253                           
  5254                           ;main.c: 563: ADCON0 = channel << 2;
  5255  00371C  0100               	movlb	0	; () banked
  5256  00371E  4580               	rlncf	readADC@channel& (0+255),w,b
  5257  003720  46E8               	rlncf	wreg,f,c
  5258  003722  0BFC               	andlw	252
  5259  003724  6EC2               	movwf	4034,c	;volatile
  5260                           
  5261                           ; BSR set to: 0
  5262                           ;main.c: 564: ADCON0bits.ADON = 1;
  5263  003726  80C2               	bsf	4034,0,c	;volatile
  5264                           
  5265                           ; BSR set to: 0
  5266                           ;main.c: 565: ADCON0bits.GO = 1;
  5267  003728  82C2               	bsf	4034,1,c	;volatile
  5268  00372A                     l479:
  5269  00372A  A2C2               	btfss	4034,1,c	;volatile
  5270  00372C  0012               	return	
  5271  00372E  D7FD               	goto	l479
  5272  003730                     __end_of_readADC:
  5273                           	opt stack 0
  5274                           tblptru	equ	0xFF8
  5275                           tblptrh	equ	0xFF7
  5276                           tblptrl	equ	0xFF6
  5277                           tablat	equ	0xFF5
  5278                           prodh	equ	0xFF4
  5279                           prodl	equ	0xFF3
  5280                           intcon	equ	0xFF2
  5281                           intcon2	equ	0xFF1
  5282                           intcon3	equ	0xFF0
  5283                           postinc0	equ	0xFEE
  5284                           wreg	equ	0xFE8
  5285                           postdec1	equ	0xFE5
  5286                           fsr1l	equ	0xFE1
  5287                           indf2	equ	0xFDF
  5288                           fsr2h	equ	0xFDA
  5289                           fsr2l	equ	0xFD9
  5290                           status	equ	0xFD8
  5291                           
  5292 ;; *************** function _stopOperation *****************
  5293 ;; Defined at:
  5294 ;;		line 569 in file "../main.c"
  5295 ;; Parameters:    Size  Location     Type
  5296 ;;		None
  5297 ;; Auto vars:     Size  Location     Type
  5298 ;;  address         2    9[BANK0 ] unsigned int 
  5299 ;;  address_code    1    8[BANK0 ] unsigned char 
  5300 ;; Return value:  Size  Location     Type
  5301 ;;                  1    wreg      void 
  5302 ;; Registers used:
  5303 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5304 ;; Tracked objects:
  5305 ;;		On entry : 0/0
  5306 ;;		On exit  : 0/0
  5307 ;;		Unchanged: 0/0
  5308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5310 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5311 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5312 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5313 ;;Total ram usage:        3 bytes
  5314 ;; Hardware stack levels used:    1
  5315 ;; Hardware stack levels required when called:    6
  5316 ;; This function calls:
  5317 ;;		_Eeprom_ReadByte
  5318 ;;		_Eeprom_WriteByte
  5319 ;;		___awdiv
  5320 ;;		___awmod
  5321 ;;		_next_address
  5322 ;; This function is called by:
  5323 ;;		_main
  5324 ;; This function uses a non-reentrant model
  5325 ;;
  5326                           
  5327                           	psect	text4
  5328  001FA2                     __ptext4:
  5329                           	opt stack 0
  5330  001FA2                     _stopOperation:
  5331                           	opt stack 24
  5332                           
  5333                           ;main.c: 570: T0CONbits.TMR0ON = 0;
  5334                           
  5335                           ;incstack = 0
  5336  001FA2  9ED5               	bcf	4053,7,c	;volatile
  5337                           
  5338                           ;main.c: 571: T1CONbits.TMR1ON = 0;
  5339  001FA4  90CD               	bcf	4045,0,c	;volatile
  5340                           
  5341                           ;main.c: 572: TMR2ON = 0;
  5342  001FA6  94CA               	bcf	4042,2,c	;volatile
  5343                           
  5344                           ;main.c: 573: TMR0 = 55770;
  5345  001FA8  0ED9               	movlw	217
  5346  001FAA  6ED7               	movwf	4055,c	;volatile
  5347  001FAC  0EDA               	movlw	218
  5348  001FAE  6ED6               	movwf	4054,c	;volatile
  5349                           
  5350                           ;main.c: 574: TMR1 = 60535;
  5351  001FB0  0EEC               	movlw	236
  5352  001FB2  6ECF               	movwf	4047,c	;volatile
  5353  001FB4  0E77               	movlw	119
  5354  001FB6  6ECE               	movwf	4046,c	;volatile
  5355                           
  5356                           ;main.c: 575: TMR2 = 155;
  5357  001FB8  0E9B               	movlw	155
  5358  001FBA  6ECC               	movwf	4044,c	;volatile
  5359                           
  5360                           ;main.c: 577: num9V = count9V;
  5361  001FBC  C0DF  F0E6         	movff	_count9V,_num9V
  5362                           
  5363                           ;main.c: 578: numC = countC;
  5364  001FC0  C0E1  F0E9         	movff	_countC,_numC
  5365                           
  5366                           ;main.c: 579: numAA = countAA;
  5367  001FC4  C0E0  F0E7         	movff	_countAA,_numAA
  5368                           
  5369                           ;main.c: 580: numDrain = countDrain;
  5370  001FC8  C0E2  F0EA         	movff	_countDrain,_numDrain
  5371                           
  5372                           ;main.c: 581: numBats = count9V + countC + countAA + countDrain;
  5373  001FCC  0100               	movlb	0	; () banked
  5374  001FCE  51DF               	movf	_count9V& (0+255),w,b
  5375  001FD0  0100               	movlb	0	; () banked
  5376  001FD2  25E1               	addwf	_countC& (0+255),w,b
  5377  001FD4  0100               	movlb	0	; () banked
  5378  001FD6  25E0               	addwf	_countAA& (0+255),w,b
  5379  001FD8  0100               	movlb	0	; () banked
  5380  001FDA  25E2               	addwf	_countDrain& (0+255),w,b
  5381  001FDC  0100               	movlb	0	; () banked
  5382  001FDE  6FE8               	movwf	_numBats& (0+255),b
  5383                           
  5384                           ; BSR set to: 0
  5385                           ;main.c: 583: unsigned char address_code = Eeprom_ReadByte(0);
  5386  001FE0  0E00               	movlw	0
  5387  001FE2  0100               	movlb	0	; () banked
  5388  001FE4  6F81               	movwf	(Eeprom_ReadByte@address+1)& (0+255),b
  5389  001FE6  0E00               	movlw	0
  5390  001FE8  6F80               	movwf	Eeprom_ReadByte@address& (0+255),b
  5391  001FEA  EC98  F01B         	call	_Eeprom_ReadByte	;wreg free
  5392  001FEE  0100               	movlb	0	; () banked
  5393  001FF0  6F88               	movwf	stopOperation@address_code& (0+255),b
  5394                           
  5395                           ; BSR set to: 0
  5396                           ;main.c: 584: uint16_t address = address_code * 96 + 1;
  5397  001FF2  0100               	movlb	0	; () banked
  5398  001FF4  5188               	movf	stopOperation@address_code& (0+255),w,b
  5399  001FF6  0D60               	mullw	96
  5400  001FF8  0E01               	movlw	1
  5401  001FFA  24F3               	addwf	prodl,w,c
  5402  001FFC  0100               	movlb	0	; () banked
  5403  001FFE  6F89               	movwf	stopOperation@address& (0+255),b
  5404  002000  0E00               	movlw	0
  5405  002002  20F4               	addwfc	prodh,w,c
  5406  002004  0100               	movlb	0	; () banked
  5407  002006  6F8A               	movwf	(stopOperation@address+1)& (0+255),b
  5408                           
  5409                           ; BSR set to: 0
  5410                           ;main.c: 585: Eeprom_WriteByte(address, lastRunRTC[6]);
  5411  002008  C089  F080         	movff	stopOperation@address,Eeprom_WriteByte@address
  5412  00200C  C08A  F081         	movff	stopOperation@address+1,Eeprom_WriteByte@address+1
  5413  002010  C0CE  F082         	movff	_lastRunRTC+6,Eeprom_WriteByte@data
  5414  002014  EC13  F01B         	call	_Eeprom_WriteByte	;wreg free
  5415                           
  5416                           ;main.c: 586: address = next_address(address);
  5417  002018  C089  F080         	movff	stopOperation@address,next_address@address
  5418  00201C  C08A  F081         	movff	stopOperation@address+1,next_address@address+1
  5419  002020  ECA4  F01B         	call	_next_address	;wreg free
  5420  002024  C080  F089         	movff	?_next_address,stopOperation@address
  5421  002028  C081  F08A         	movff	?_next_address+1,stopOperation@address+1
  5422                           
  5423                           ;main.c: 587: Eeprom_WriteByte(address, lastRunRTC[5]);
  5424  00202C  C089  F080         	movff	stopOperation@address,Eeprom_WriteByte@address
  5425  002030  C08A  F081         	movff	stopOperation@address+1,Eeprom_WriteByte@address+1
  5426  002034  C0CD  F082         	movff	_lastRunRTC+5,Eeprom_WriteByte@data
  5427  002038  EC13  F01B         	call	_Eeprom_WriteByte	;wreg free
  5428                           
  5429                           ;main.c: 588: address = next_address(address);
  5430  00203C  C089  F080         	movff	stopOperation@address,next_address@address
  5431  002040  C08A  F081         	movff	stopOperation@address+1,next_address@address+1
  5432  002044  ECA4  F01B         	call	_next_address	;wreg free
  5433  002048  C080  F089         	movff	?_next_address,stopOperation@address
  5434  00204C  C081  F08A         	movff	?_next_address+1,stopOperation@address+1
  5435                           
  5436                           ;main.c: 589: Eeprom_WriteByte(address, lastRunRTC[4]);
  5437  002050  C089  F080         	movff	stopOperation@address,Eeprom_WriteByte@address
  5438  002054  C08A  F081         	movff	stopOperation@address+1,Eeprom_WriteByte@address+1
  5439  002058  C0CC  F082         	movff	_lastRunRTC+4,Eeprom_WriteByte@data
  5440  00205C  EC13  F01B         	call	_Eeprom_WriteByte	;wreg free
  5441                           
  5442                           ;main.c: 590: address = next_address(address);
  5443  002060  C089  F080         	movff	stopOperation@address,next_address@address
  5444  002064  C08A  F081         	movff	stopOperation@address+1,next_address@address+1
  5445  002068  ECA4  F01B         	call	_next_address	;wreg free
  5446  00206C  C080  F089         	movff	?_next_address,stopOperation@address
  5447  002070  C081  F08A         	movff	?_next_address+1,stopOperation@address+1
  5448                           
  5449                           ;main.c: 591: Eeprom_WriteByte(address, lastRunRTC[2]);
  5450  002074  C089  F080         	movff	stopOperation@address,Eeprom_WriteByte@address
  5451  002078  C08A  F081         	movff	stopOperation@address+1,Eeprom_WriteByte@address+1
  5452  00207C  C0CA  F082         	movff	_lastRunRTC+2,Eeprom_WriteByte@data
  5453  002080  EC13  F01B         	call	_Eeprom_WriteByte	;wreg free
  5454                           
  5455                           ;main.c: 592: address = next_address(address);
  5456  002084  C089  F080         	movff	stopOperation@address,next_address@address
  5457  002088  C08A  F081         	movff	stopOperation@address+1,next_address@address+1
  5458  00208C  ECA4  F01B         	call	_next_address	;wreg free
  5459  002090  C080  F089         	movff	?_next_address,stopOperation@address
  5460  002094  C081  F08A         	movff	?_next_address+1,stopOperation@address+1
  5461                           
  5462                           ;main.c: 593: Eeprom_WriteByte(address, lastRunRTC[1]);
  5463  002098  C089  F080         	movff	stopOperation@address,Eeprom_WriteByte@address
  5464  00209C  C08A  F081         	movff	stopOperation@address+1,Eeprom_WriteByte@address+1
  5465  0020A0  C0C9  F082         	movff	_lastRunRTC+1,Eeprom_WriteByte@data
  5466  0020A4  EC13  F01B         	call	_Eeprom_WriteByte	;wreg free
  5467                           
  5468                           ;main.c: 594: address = next_address(address);
  5469  0020A8  C089  F080         	movff	stopOperation@address,next_address@address
  5470  0020AC  C08A  F081         	movff	stopOperation@address+1,next_address@address+1
  5471  0020B0  ECA4  F01B         	call	_next_address	;wreg free
  5472  0020B4  C080  F089         	movff	?_next_address,stopOperation@address
  5473  0020B8  C081  F08A         	movff	?_next_address+1,stopOperation@address+1
  5474                           
  5475                           ;main.c: 595: Eeprom_WriteByte(address, lastRunRTC[0]);
  5476  0020BC  C089  F080         	movff	stopOperation@address,Eeprom_WriteByte@address
  5477  0020C0  C08A  F081         	movff	stopOperation@address+1,Eeprom_WriteByte@address+1
  5478  0020C4  C0C8  F082         	movff	_lastRunRTC,Eeprom_WriteByte@data
  5479  0020C8  EC13  F01B         	call	_Eeprom_WriteByte	;wreg free
  5480                           
  5481                           ;main.c: 596: address = next_address(address);
  5482  0020CC  C089  F080         	movff	stopOperation@address,next_address@address
  5483  0020D0  C08A  F081         	movff	stopOperation@address+1,next_address@address+1
  5484  0020D4  ECA4  F01B         	call	_next_address	;wreg free
  5485  0020D8  C080  F089         	movff	?_next_address,stopOperation@address
  5486  0020DC  C081  F08A         	movff	?_next_address+1,stopOperation@address+1
  5487                           
  5488                           ;main.c: 598: Eeprom_WriteByte(address, countAA);
  5489  0020E0  C089  F080         	movff	stopOperation@address,Eeprom_WriteByte@address
  5490  0020E4  C08A  F081         	movff	stopOperation@address+1,Eeprom_WriteByte@address+1
  5491  0020E8  C0E0  F082         	movff	_countAA,Eeprom_WriteByte@data
  5492  0020EC  EC13  F01B         	call	_Eeprom_WriteByte	;wreg free
  5493                           
  5494                           ;main.c: 599: address = next_address(address);
  5495  0020F0  C089  F080         	movff	stopOperation@address,next_address@address
  5496  0020F4  C08A  F081         	movff	stopOperation@address+1,next_address@address+1
  5497  0020F8  ECA4  F01B         	call	_next_address	;wreg free
  5498  0020FC  C080  F089         	movff	?_next_address,stopOperation@address
  5499  002100  C081  F08A         	movff	?_next_address+1,stopOperation@address+1
  5500                           
  5501                           ;main.c: 600: Eeprom_WriteByte(address, countC);
  5502  002104  C089  F080         	movff	stopOperation@address,Eeprom_WriteByte@address
  5503  002108  C08A  F081         	movff	stopOperation@address+1,Eeprom_WriteByte@address+1
  5504  00210C  C0E1  F082         	movff	_countC,Eeprom_WriteByte@data
  5505  002110  EC13  F01B         	call	_Eeprom_WriteByte	;wreg free
  5506                           
  5507                           ;main.c: 601: address = next_address(address);
  5508  002114  C089  F080         	movff	stopOperation@address,next_address@address
  5509  002118  C08A  F081         	movff	stopOperation@address+1,next_address@address+1
  5510  00211C  ECA4  F01B         	call	_next_address	;wreg free
  5511  002120  C080  F089         	movff	?_next_address,stopOperation@address
  5512  002124  C081  F08A         	movff	?_next_address+1,stopOperation@address+1
  5513                           
  5514                           ;main.c: 602: Eeprom_WriteByte(address, count9V);
  5515  002128  C089  F080         	movff	stopOperation@address,Eeprom_WriteByte@address
  5516  00212C  C08A  F081         	movff	stopOperation@address+1,Eeprom_WriteByte@address+1
  5517  002130  C0DF  F082         	movff	_count9V,Eeprom_WriteByte@data
  5518  002134  EC13  F01B         	call	_Eeprom_WriteByte	;wreg free
  5519                           
  5520                           ;main.c: 603: address = next_address(address);
  5521  002138  C089  F080         	movff	stopOperation@address,next_address@address
  5522  00213C  C08A  F081         	movff	stopOperation@address+1,next_address@address+1
  5523  002140  ECA4  F01B         	call	_next_address	;wreg free
  5524  002144  C080  F089         	movff	?_next_address,stopOperation@address
  5525  002148  C081  F08A         	movff	?_next_address+1,stopOperation@address+1
  5526                           
  5527                           ;main.c: 604: Eeprom_WriteByte(address, countDrain);
  5528  00214C  C089  F080         	movff	stopOperation@address,Eeprom_WriteByte@address
  5529  002150  C08A  F081         	movff	stopOperation@address+1,Eeprom_WriteByte@address+1
  5530  002154  C0E2  F082         	movff	_countDrain,Eeprom_WriteByte@data
  5531  002158  EC13  F01B         	call	_Eeprom_WriteByte	;wreg free
  5532                           
  5533                           ;main.c: 605: address = next_address(address);
  5534  00215C  C089  F080         	movff	stopOperation@address,next_address@address
  5535  002160  C08A  F081         	movff	stopOperation@address+1,next_address@address+1
  5536  002164  ECA4  F01B         	call	_next_address	;wreg free
  5537  002168  C080  F089         	movff	?_next_address,stopOperation@address
  5538  00216C  C081  F08A         	movff	?_next_address+1,stopOperation@address+1
  5539                           
  5540                           ;main.c: 606: Eeprom_WriteByte(address, numBats);
  5541  002170  C089  F080         	movff	stopOperation@address,Eeprom_WriteByte@address
  5542  002174  C08A  F081         	movff	stopOperation@address+1,Eeprom_WriteByte@address+1
  5543  002178  C0E8  F082         	movff	_numBats,Eeprom_WriteByte@data
  5544  00217C  EC13  F01B         	call	_Eeprom_WriteByte	;wreg free
  5545                           
  5546                           ;main.c: 607: address = next_address(address);
  5547  002180  C089  F080         	movff	stopOperation@address,next_address@address
  5548  002184  C08A  F081         	movff	stopOperation@address+1,next_address@address+1
  5549  002188  ECA4  F01B         	call	_next_address	;wreg free
  5550  00218C  C080  F089         	movff	?_next_address,stopOperation@address
  5551  002190  C081  F08A         	movff	?_next_address+1,stopOperation@address+1
  5552                           
  5553                           ;main.c: 608: Eeprom_WriteByte(address, opTimer);
  5554  002194  C089  F080         	movff	stopOperation@address,Eeprom_WriteByte@address
  5555  002198  C08A  F081         	movff	stopOperation@address+1,Eeprom_WriteByte@address+1
  5556  00219C  C051  F082         	movff	_opTimer,Eeprom_WriteByte@data
  5557  0021A0  EC13  F01B         	call	_Eeprom_WriteByte	;wreg free
  5558                           
  5559                           ;main.c: 610: address_code++;
  5560  0021A4  0100               	movlb	0	; () banked
  5561  0021A6  2B88               	incf	stopOperation@address_code& (0+255),f,b
  5562                           
  5563                           ; BSR set to: 0
  5564                           ;main.c: 611: if (address_code > 3)
  5565  0021A8  0E03               	movlw	3
  5566  0021AA  0100               	movlb	0	; () banked
  5567  0021AC  6588               	cpfsgt	stopOperation@address_code& (0+255),b
  5568  0021AE  D00B               	goto	l6621
  5569                           
  5570                           ; BSR set to: 0
  5571                           ;main.c: 612: Eeprom_WriteByte(0, 0);
  5572  0021B0  0E00               	movlw	0
  5573  0021B2  0100               	movlb	0	; () banked
  5574  0021B4  6F81               	movwf	(Eeprom_WriteByte@address+1)& (0+255),b
  5575  0021B6  0E00               	movlw	0
  5576  0021B8  6F80               	movwf	Eeprom_WriteByte@address& (0+255),b
  5577  0021BA  0E00               	movlw	0
  5578  0021BC  0100               	movlb	0	; () banked
  5579  0021BE  6F82               	movwf	Eeprom_WriteByte@data& (0+255),b
  5580  0021C0  EC13  F01B         	call	_Eeprom_WriteByte	;wreg free
  5581  0021C4  D009               	goto	l6623
  5582  0021C6                     l6621:
  5583                           
  5584                           ;main.c: 613: else
  5585                           ;main.c: 614: Eeprom_WriteByte(0, address_code);
  5586  0021C6  0E00               	movlw	0
  5587  0021C8  0100               	movlb	0	; () banked
  5588  0021CA  6F81               	movwf	(Eeprom_WriteByte@address+1)& (0+255),b
  5589  0021CC  0E00               	movlw	0
  5590  0021CE  6F80               	movwf	Eeprom_WriteByte@address& (0+255),b
  5591  0021D0  C088  F082         	movff	stopOperation@address_code,Eeprom_WriteByte@data
  5592  0021D4  EC13  F01B         	call	_Eeprom_WriteByte	;wreg free
  5593  0021D8                     l6623:
  5594                           
  5595                           ;main.c: 616: count9V = 0;
  5596  0021D8  0E00               	movlw	0
  5597  0021DA  0100               	movlb	0	; () banked
  5598  0021DC  6FDF               	movwf	_count9V& (0+255),b
  5599                           
  5600                           ; BSR set to: 0
  5601                           ;main.c: 617: countC = 0;
  5602  0021DE  0E00               	movlw	0
  5603  0021E0  0100               	movlb	0	; () banked
  5604  0021E2  6FE1               	movwf	_countC& (0+255),b
  5605                           
  5606                           ; BSR set to: 0
  5607                           ;main.c: 618: countAA = 0;
  5608  0021E4  0E00               	movlw	0
  5609  0021E6  0100               	movlb	0	; () banked
  5610  0021E8  6FE0               	movwf	_countAA& (0+255),b
  5611                           
  5612                           ; BSR set to: 0
  5613                           ;main.c: 619: countDrain = 0;
  5614  0021EA  0E00               	movlw	0
  5615  0021EC  0100               	movlb	0	; () banked
  5616  0021EE  6FE2               	movwf	_countDrain& (0+255),b
  5617                           
  5618                           ; BSR set to: 0
  5619                           ;main.c: 620: min = opTimer / 60;
  5620  0021F0  C051  F080         	movff	_opTimer,___awdiv@dividend
  5621  0021F4  0100               	movlb	0	; () banked
  5622  0021F6  6B81               	clrf	(___awdiv@dividend+1)& (0+255),b
  5623  0021F8  0E00               	movlw	0
  5624  0021FA  0100               	movlb	0	; () banked
  5625  0021FC  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  5626  0021FE  0E3C               	movlw	60
  5627  002200  6F82               	movwf	___awdiv@divisor& (0+255),b
  5628  002202  EC72  F017         	call	___awdiv	;wreg free
  5629  002206  0100               	movlb	0	; () banked
  5630  002208  5180               	movf	?___awdiv& (0+255),w,b
  5631  00220A  0100               	movlb	0	; () banked
  5632  00220C  6FE5               	movwf	_min& (0+255),b
  5633                           
  5634                           ; BSR set to: 0
  5635                           ;main.c: 621: sec = opTimer % 60;
  5636  00220E  C051  F080         	movff	_opTimer,___awmod@dividend
  5637  002212  0100               	movlb	0	; () banked
  5638  002214  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  5639  002216  0E00               	movlw	0
  5640  002218  0100               	movlb	0	; () banked
  5641  00221A  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5642  00221C  0E3C               	movlw	60
  5643  00221E  6F82               	movwf	___awmod@divisor& (0+255),b
  5644  002220  EC2F  F018         	call	___awmod	;wreg free
  5645  002224  0100               	movlb	0	; () banked
  5646  002226  5180               	movf	?___awmod& (0+255),w,b
  5647  002228  0100               	movlb	0	; () banked
  5648  00222A  6FEB               	movwf	_sec& (0+255),b
  5649                           
  5650                           ; BSR set to: 0
  5651                           ;main.c: 622: opTimer = 0;
  5652  00222C  0E00               	movlw	0
  5653  00222E  6E51               	movwf	_opTimer,c
  5654                           
  5655                           ; BSR set to: 0
  5656                           ;main.c: 623: doneTimer = 0;
  5657  002230  0E00               	movlw	0
  5658  002232  0100               	movlb	0	; () banked
  5659  002234  6FE3               	movwf	_doneTimer& (0+255),b
  5660                           
  5661                           ; BSR set to: 0
  5662                           ;main.c: 624: sorting = 0;
  5663  002236  0E00               	movlw	0
  5664  002238  6E53               	movwf	_sorting,c
  5665                           
  5666                           ; BSR set to: 0
  5667                           ;main.c: 625: plat1Left = 0;
  5668  00223A  0E00               	movlw	0
  5669  00223C  0100               	movlb	0	; () banked
  5670  00223E  6FD0               	movwf	(_plat1Left+1)& (0+255),b
  5671  002240  0E00               	movlw	0
  5672  002242  6FCF               	movwf	_plat1Left& (0+255),b
  5673                           
  5674                           ; BSR set to: 0
  5675                           ;main.c: 626: plat1Right = 0;
  5676  002244  0E00               	movlw	0
  5677  002246  0100               	movlb	0	; () banked
  5678  002248  6FD2               	movwf	(_plat1Right+1)& (0+255),b
  5679  00224A  0E00               	movlw	0
  5680  00224C  6FD1               	movwf	_plat1Right& (0+255),b
  5681                           
  5682                           ; BSR set to: 0
  5683                           ;main.c: 627: plat2Left = 0;
  5684  00224E  0E00               	movlw	0
  5685  002250  0100               	movlb	0	; () banked
  5686  002252  6FD4               	movwf	(_plat2Left+1)& (0+255),b
  5687  002254  0E00               	movlw	0
  5688  002256  6FD3               	movwf	_plat2Left& (0+255),b
  5689                           
  5690                           ; BSR set to: 0
  5691                           ;main.c: 628: plat2Right = 0;
  5692  002258  0E00               	movlw	0
  5693  00225A  0100               	movlb	0	; () banked
  5694  00225C  6FD6               	movwf	(_plat2Right+1)& (0+255),b
  5695  00225E  0E00               	movlw	0
  5696  002260  6FD5               	movwf	_plat2Right& (0+255),b
  5697                           
  5698                           ; BSR set to: 0
  5699                           ;main.c: 629: turn2BackLeft = 0;
  5700  002262  0E00               	movlw	0
  5701  002264  0100               	movlb	0	; () banked
  5702  002266  6FDC               	movwf	(_turn2BackLeft+1)& (0+255),b
  5703  002268  0E00               	movlw	0
  5704  00226A  6FDB               	movwf	_turn2BackLeft& (0+255),b
  5705                           
  5706                           ; BSR set to: 0
  5707                           ;main.c: 630: turn1BackLeft = 0;
  5708  00226C  0E00               	movlw	0
  5709  00226E  0100               	movlb	0	; () banked
  5710  002270  6FD8               	movwf	(_turn1BackLeft+1)& (0+255),b
  5711  002272  0E00               	movlw	0
  5712  002274  6FD7               	movwf	_turn1BackLeft& (0+255),b
  5713                           
  5714                           ; BSR set to: 0
  5715                           ;main.c: 631: turn2BackRight = 0;
  5716  002276  0E00               	movlw	0
  5717  002278  0100               	movlb	0	; () banked
  5718  00227A  6FDE               	movwf	(_turn2BackRight+1)& (0+255),b
  5719  00227C  0E00               	movlw	0
  5720  00227E  6FDD               	movwf	_turn2BackRight& (0+255),b
  5721                           
  5722                           ; BSR set to: 0
  5723                           ;main.c: 632: turn1BackRight = 0;
  5724  002280  0E00               	movlw	0
  5725  002282  0100               	movlb	0	; () banked
  5726  002284  6FDA               	movwf	(_turn1BackRight+1)& (0+255),b
  5727  002286  0E00               	movlw	0
  5728  002288  6FD9               	movwf	_turn1BackRight& (0+255),b
  5729                           
  5730                           ; BSR set to: 0
  5731                           ;main.c: 633: count_2ms = 0;
  5732  00228A  0E00               	movlw	0
  5733  00228C  6E50               	movwf	_count_2ms+1,c
  5734  00228E  0E00               	movlw	0
  5735  002290  6E4F               	movwf	_count_2ms,c
  5736                           
  5737                           ; BSR set to: 0
  5738                           ;main.c: 634: doubleAA = 0;
  5739  002292  0E00               	movlw	0
  5740  002294  0100               	movlb	0	; () banked
  5741  002296  6FE4               	movwf	_doubleAA& (0+255),b
  5742                           
  5743                           ; BSR set to: 0
  5744                           ;main.c: 635: solOnTimer = 0;
  5745  002298  0E00               	movlw	0
  5746  00229A  6E52               	movwf	_solOnTimer,c
  5747                           
  5748                           ; BSR set to: 0
  5749                           ;main.c: 637: LATCbits.LC1 = 0;;
  5750  00229C  928B               	bcf	3979,1,c	;volatile
  5751                           
  5752                           ; BSR set to: 0
  5753                           ;main.c: 638: LATCbits.LC2 = 0;;
  5754  00229E  948B               	bcf	3979,2,c	;volatile
  5755                           
  5756                           ; BSR set to: 0
  5757                           ;main.c: 639: LATCbits.LC6 = 0;;
  5758  0022A0  9C8B               	bcf	3979,6,c	;volatile
  5759                           
  5760                           ; BSR set to: 0
  5761                           ;main.c: 640: LATCbits.LC5 = 0;;
  5762  0022A2  9A8B               	bcf	3979,5,c	;volatile
  5763                           
  5764                           ; BSR set to: 0
  5765                           ;main.c: 641: LATCbits.LC0 = 0;;
  5766  0022A4  908B               	bcf	3979,0,c	;volatile
  5767                           
  5768                           ; BSR set to: 0
  5769                           ;main.c: 642: LATEbits.LE2 = 0;;
  5770  0022A6  948D               	bcf	3981,2,c	;volatile
  5771                           
  5772                           ; BSR set to: 0
  5773                           ;main.c: 643: LATEbits.LE1 = 0;;
  5774  0022A8  928D               	bcf	3981,1,c	;volatile
  5775                           
  5776                           ; BSR set to: 0
  5777                           ;main.c: 644: LATAbits.LA4 = 0;;
  5778  0022AA  9889               	bcf	3977,4,c	;volatile
  5779                           
  5780                           ; BSR set to: 0
  5781                           ;main.c: 645: LATDbits.LD0= 0;;
  5782  0022AC  908C               	bcf	3980,0,c	;volatile
  5783                           
  5784                           ; BSR set to: 0
  5785                           ;main.c: 646: LATCbits.LC7 = 0;;
  5786  0022AE  9E8B               	bcf	3979,7,c	;volatile
  5787                           
  5788                           ; BSR set to: 0
  5789                           ;main.c: 647: LATDbits.LD1 = 0;;
  5790  0022B0  928C               	bcf	3980,1,c	;volatile
  5791                           
  5792                           ; BSR set to: 0
  5793                           ;main.c: 648: LATBbits.LB0 = 0;;
  5794  0022B2  908A               	bcf	3978,0,c	;volatile
  5795                           
  5796                           ; BSR set to: 0
  5797                           ;main.c: 649: screenMode = 0;
  5798  0022B4  0E00               	movlw	0
  5799  0022B6  0100               	movlb	0	; () banked
  5800  0022B8  6FFA               	movwf	_screenMode& (0+255),b
  5801                           
  5802                           ; BSR set to: 0
  5803  0022BA  0012               	return		;funcret
  5804  0022BC                     __end_of_stopOperation:
  5805                           	opt stack 0
  5806                           tblptru	equ	0xFF8
  5807                           tblptrh	equ	0xFF7
  5808                           tblptrl	equ	0xFF6
  5809                           tablat	equ	0xFF5
  5810                           prodh	equ	0xFF4
  5811                           prodl	equ	0xFF3
  5812                           intcon	equ	0xFF2
  5813                           intcon2	equ	0xFF1
  5814                           intcon3	equ	0xFF0
  5815                           postinc0	equ	0xFEE
  5816                           wreg	equ	0xFE8
  5817                           postdec1	equ	0xFE5
  5818                           fsr1l	equ	0xFE1
  5819                           indf2	equ	0xFDF
  5820                           fsr2h	equ	0xFDA
  5821                           fsr2l	equ	0xFD9
  5822                           status	equ	0xFD8
  5823                           
  5824 ;; *************** function ___awmod *****************
  5825 ;; Defined at:
  5826 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  5827 ;; Parameters:    Size  Location     Type
  5828 ;;  dividend        2    0[BANK0 ] int 
  5829 ;;  divisor         2    2[BANK0 ] int 
  5830 ;; Auto vars:     Size  Location     Type
  5831 ;;  sign            1    5[BANK0 ] unsigned char 
  5832 ;;  counter         1    4[BANK0 ] unsigned char 
  5833 ;; Return value:  Size  Location     Type
  5834 ;;                  2    0[BANK0 ] int 
  5835 ;; Registers used:
  5836 ;;		wreg, status,2, status,0
  5837 ;; Tracked objects:
  5838 ;;		On entry : 0/0
  5839 ;;		On exit  : 0/0
  5840 ;;		Unchanged: 0/0
  5841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5842 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5843 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5844 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5845 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5846 ;;Total ram usage:        6 bytes
  5847 ;; Hardware stack levels used:    1
  5848 ;; Hardware stack levels required when called:    5
  5849 ;; This function calls:
  5850 ;;		Nothing
  5851 ;; This function is called by:
  5852 ;;		_stopOperation
  5853 ;; This function uses a non-reentrant model
  5854 ;;
  5855                           
  5856                           	psect	text5
  5857  00305E                     __ptext5:
  5858                           	opt stack 0
  5859  00305E                     ___awmod:
  5860                           	opt stack 24
  5861                           
  5862                           ; BSR set to: 0
  5863                           ;incstack = 0
  5864  00305E  0E00               	movlw	0
  5865  003060  0100               	movlb	0	; () banked
  5866  003062  6F85               	movwf	___awmod@sign& (0+255),b
  5867                           
  5868                           ; BSR set to: 0
  5869  003064  0100               	movlb	0	; () banked
  5870  003066  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
  5871  003068  D008               	goto	l6369
  5872                           
  5873                           ; BSR set to: 0
  5874  00306A  0100               	movlb	0	; () banked
  5875  00306C  6D80               	negf	___awmod@dividend& (0+255),b
  5876  00306E  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  5877  003070  B0D8               	btfsc	status,0,c
  5878  003072  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  5879                           
  5880                           ; BSR set to: 0
  5881  003074  0E01               	movlw	1
  5882  003076  0100               	movlb	0	; () banked
  5883  003078  6F85               	movwf	___awmod@sign& (0+255),b
  5884  00307A                     l6369:
  5885                           
  5886                           ; BSR set to: 0
  5887  00307A  0100               	movlb	0	; () banked
  5888  00307C  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  5889  00307E  D005               	goto	l6373
  5890                           
  5891                           ; BSR set to: 0
  5892  003080  0100               	movlb	0	; () banked
  5893  003082  6D82               	negf	___awmod@divisor& (0+255),b
  5894  003084  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
  5895  003086  B0D8               	btfsc	status,0,c
  5896  003088  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
  5897  00308A                     l6373:
  5898                           
  5899                           ; BSR set to: 0
  5900  00308A  0100               	movlb	0	; () banked
  5901  00308C  5182               	movf	___awmod@divisor& (0+255),w,b
  5902  00308E  0100               	movlb	0	; () banked
  5903  003090  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  5904  003092  B4D8               	btfsc	status,2,c
  5905  003094  D026               	goto	l6389
  5906                           
  5907                           ; BSR set to: 0
  5908  003096  0E01               	movlw	1
  5909  003098  0100               	movlb	0	; () banked
  5910  00309A  6F84               	movwf	___awmod@counter& (0+255),b
  5911  00309C  D006               	goto	l6379
  5912  00309E                     l6377:
  5913                           
  5914                           ; BSR set to: 0
  5915  00309E  0100               	movlb	0	; () banked
  5916  0030A0  90D8               	bcf	status,0,c
  5917  0030A2  3782               	rlcf	___awmod@divisor& (0+255),f,b
  5918  0030A4  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  5919  0030A6  0100               	movlb	0	; () banked
  5920  0030A8  2B84               	incf	___awmod@counter& (0+255),f,b
  5921  0030AA                     l6379:
  5922                           
  5923                           ; BSR set to: 0
  5924  0030AA  0100               	movlb	0	; () banked
  5925  0030AC  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  5926  0030AE  D7F7               	goto	l6377
  5927  0030B0                     l6381:
  5928                           
  5929                           ; BSR set to: 0
  5930  0030B0  0100               	movlb	0	; () banked
  5931  0030B2  5182               	movf	___awmod@divisor& (0+255),w,b
  5932  0030B4  0100               	movlb	0	; () banked
  5933  0030B6  5D80               	subwf	___awmod@dividend& (0+255),w,b
  5934  0030B8  0100               	movlb	0	; () banked
  5935  0030BA  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  5936  0030BC  0100               	movlb	0	; () banked
  5937  0030BE  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  5938  0030C0  A0D8               	btfss	status,0,c
  5939  0030C2  D008               	goto	l6385
  5940                           
  5941                           ; BSR set to: 0
  5942  0030C4  0100               	movlb	0	; () banked
  5943  0030C6  5182               	movf	___awmod@divisor& (0+255),w,b
  5944  0030C8  0100               	movlb	0	; () banked
  5945  0030CA  5F80               	subwf	___awmod@dividend& (0+255),f,b
  5946  0030CC  0100               	movlb	0	; () banked
  5947  0030CE  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  5948  0030D0  0100               	movlb	0	; () banked
  5949  0030D2  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  5950  0030D4                     l6385:
  5951                           
  5952                           ; BSR set to: 0
  5953  0030D4  0100               	movlb	0	; () banked
  5954  0030D6  90D8               	bcf	status,0,c
  5955  0030D8  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  5956  0030DA  3382               	rrcf	___awmod@divisor& (0+255),f,b
  5957                           
  5958                           ; BSR set to: 0
  5959  0030DC  0100               	movlb	0	; () banked
  5960  0030DE  2F84               	decfsz	___awmod@counter& (0+255),f,b
  5961  0030E0  D7E7               	goto	l6381
  5962  0030E2                     l6389:
  5963                           
  5964                           ; BSR set to: 0
  5965  0030E2  0100               	movlb	0	; () banked
  5966  0030E4  5185               	movf	___awmod@sign& (0+255),w,b
  5967  0030E6  0100               	movlb	0	; () banked
  5968  0030E8  B4D8               	btfsc	status,2,c
  5969  0030EA  D005               	goto	l6393
  5970                           
  5971                           ; BSR set to: 0
  5972  0030EC  0100               	movlb	0	; () banked
  5973  0030EE  6D80               	negf	___awmod@dividend& (0+255),b
  5974  0030F0  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  5975  0030F2  B0D8               	btfsc	status,0,c
  5976  0030F4  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  5977  0030F6                     l6393:
  5978                           
  5979                           ; BSR set to: 0
  5980  0030F6  C080  F080         	movff	___awmod@dividend,?___awmod
  5981  0030FA  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
  5982  0030FE  0012               	return	
  5983  003100                     __end_of___awmod:
  5984                           	opt stack 0
  5985                           tblptru	equ	0xFF8
  5986                           tblptrh	equ	0xFF7
  5987                           tblptrl	equ	0xFF6
  5988                           tablat	equ	0xFF5
  5989                           prodh	equ	0xFF4
  5990                           prodl	equ	0xFF3
  5991                           intcon	equ	0xFF2
  5992                           intcon2	equ	0xFF1
  5993                           intcon3	equ	0xFF0
  5994                           postinc0	equ	0xFEE
  5995                           wreg	equ	0xFE8
  5996                           postdec1	equ	0xFE5
  5997                           fsr1l	equ	0xFE1
  5998                           indf2	equ	0xFDF
  5999                           fsr2h	equ	0xFDA
  6000                           fsr2l	equ	0xFD9
  6001                           status	equ	0xFD8
  6002                           
  6003 ;; *************** function ___awdiv *****************
  6004 ;; Defined at:
  6005 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  6006 ;; Parameters:    Size  Location     Type
  6007 ;;  dividend        2    0[BANK0 ] int 
  6008 ;;  divisor         2    2[BANK0 ] int 
  6009 ;; Auto vars:     Size  Location     Type
  6010 ;;  quotient        2    6[BANK0 ] int 
  6011 ;;  sign            1    5[BANK0 ] unsigned char 
  6012 ;;  counter         1    4[BANK0 ] unsigned char 
  6013 ;; Return value:  Size  Location     Type
  6014 ;;                  2    0[BANK0 ] int 
  6015 ;; Registers used:
  6016 ;;		wreg, status,2, status,0
  6017 ;; Tracked objects:
  6018 ;;		On entry : 0/0
  6019 ;;		On exit  : 0/0
  6020 ;;		Unchanged: 0/0
  6021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6022 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6023 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6024 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6025 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6026 ;;Total ram usage:        8 bytes
  6027 ;; Hardware stack levels used:    1
  6028 ;; Hardware stack levels required when called:    5
  6029 ;; This function calls:
  6030 ;;		Nothing
  6031 ;; This function is called by:
  6032 ;;		_stopOperation
  6033 ;; This function uses a non-reentrant model
  6034 ;;
  6035                           
  6036                           	psect	text6
  6037  002EE4                     __ptext6:
  6038                           	opt stack 0
  6039  002EE4                     ___awdiv:
  6040                           	opt stack 24
  6041                           
  6042                           ; BSR set to: 0
  6043                           ;incstack = 0
  6044  002EE4  0E00               	movlw	0
  6045  002EE6  0100               	movlb	0	; () banked
  6046  002EE8  6F85               	movwf	___awdiv@sign& (0+255),b
  6047                           
  6048                           ; BSR set to: 0
  6049  002EEA  0100               	movlb	0	; () banked
  6050  002EEC  AF83               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  6051  002EEE  D008               	goto	l6325
  6052                           
  6053                           ; BSR set to: 0
  6054  002EF0  0100               	movlb	0	; () banked
  6055  002EF2  6D82               	negf	___awdiv@divisor& (0+255),b
  6056  002EF4  1F83               	comf	(___awdiv@divisor+1)& (0+255),f,b
  6057  002EF6  B0D8               	btfsc	status,0,c
  6058  002EF8  2B83               	incf	(___awdiv@divisor+1)& (0+255),f,b
  6059                           
  6060                           ; BSR set to: 0
  6061  002EFA  0E01               	movlw	1
  6062  002EFC  0100               	movlb	0	; () banked
  6063  002EFE  6F85               	movwf	___awdiv@sign& (0+255),b
  6064  002F00                     l6325:
  6065                           
  6066                           ; BSR set to: 0
  6067  002F00  0100               	movlb	0	; () banked
  6068  002F02  AF81               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  6069  002F04  D008               	goto	l6331
  6070                           
  6071                           ; BSR set to: 0
  6072  002F06  0100               	movlb	0	; () banked
  6073  002F08  6D80               	negf	___awdiv@dividend& (0+255),b
  6074  002F0A  1F81               	comf	(___awdiv@dividend+1)& (0+255),f,b
  6075  002F0C  B0D8               	btfsc	status,0,c
  6076  002F0E  2B81               	incf	(___awdiv@dividend+1)& (0+255),f,b
  6077                           
  6078                           ; BSR set to: 0
  6079  002F10  0E01               	movlw	1
  6080  002F12  0100               	movlb	0	; () banked
  6081  002F14  1B85               	xorwf	___awdiv@sign& (0+255),f,b
  6082  002F16                     l6331:
  6083                           
  6084                           ; BSR set to: 0
  6085  002F16  0E00               	movlw	0
  6086  002F18  0100               	movlb	0	; () banked
  6087  002F1A  6F87               	movwf	(___awdiv@quotient+1)& (0+255),b
  6088  002F1C  0E00               	movlw	0
  6089  002F1E  6F86               	movwf	___awdiv@quotient& (0+255),b
  6090                           
  6091                           ; BSR set to: 0
  6092  002F20  0100               	movlb	0	; () banked
  6093  002F22  5182               	movf	___awdiv@divisor& (0+255),w,b
  6094  002F24  0100               	movlb	0	; () banked
  6095  002F26  1183               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  6096  002F28  B4D8               	btfsc	status,2,c
  6097  002F2A  D02C               	goto	l6353
  6098                           
  6099                           ; BSR set to: 0
  6100  002F2C  0E01               	movlw	1
  6101  002F2E  0100               	movlb	0	; () banked
  6102  002F30  6F84               	movwf	___awdiv@counter& (0+255),b
  6103  002F32  D006               	goto	l6339
  6104  002F34                     l6337:
  6105                           
  6106                           ; BSR set to: 0
  6107  002F34  0100               	movlb	0	; () banked
  6108  002F36  90D8               	bcf	status,0,c
  6109  002F38  3782               	rlcf	___awdiv@divisor& (0+255),f,b
  6110  002F3A  3783               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  6111  002F3C  0100               	movlb	0	; () banked
  6112  002F3E  2B84               	incf	___awdiv@counter& (0+255),f,b
  6113  002F40                     l6339:
  6114                           
  6115                           ; BSR set to: 0
  6116  002F40  0100               	movlb	0	; () banked
  6117  002F42  AF83               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  6118  002F44  D7F7               	goto	l6337
  6119  002F46                     l6341:
  6120                           
  6121                           ; BSR set to: 0
  6122  002F46  0100               	movlb	0	; () banked
  6123  002F48  90D8               	bcf	status,0,c
  6124  002F4A  3786               	rlcf	___awdiv@quotient& (0+255),f,b
  6125  002F4C  3787               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  6126                           
  6127                           ; BSR set to: 0
  6128  002F4E  0100               	movlb	0	; () banked
  6129  002F50  5182               	movf	___awdiv@divisor& (0+255),w,b
  6130  002F52  0100               	movlb	0	; () banked
  6131  002F54  5D80               	subwf	___awdiv@dividend& (0+255),w,b
  6132  002F56  0100               	movlb	0	; () banked
  6133  002F58  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
  6134  002F5A  0100               	movlb	0	; () banked
  6135  002F5C  5981               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  6136  002F5E  A0D8               	btfss	status,0,c
  6137  002F60  D00A               	goto	l6349
  6138                           
  6139                           ; BSR set to: 0
  6140  002F62  0100               	movlb	0	; () banked
  6141  002F64  5182               	movf	___awdiv@divisor& (0+255),w,b
  6142  002F66  0100               	movlb	0	; () banked
  6143  002F68  5F80               	subwf	___awdiv@dividend& (0+255),f,b
  6144  002F6A  0100               	movlb	0	; () banked
  6145  002F6C  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
  6146  002F6E  0100               	movlb	0	; () banked
  6147  002F70  5B81               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  6148                           
  6149                           ; BSR set to: 0
  6150  002F72  0100               	movlb	0	; () banked
  6151  002F74  8186               	bsf	___awdiv@quotient& (0+255),0,b
  6152  002F76                     l6349:
  6153                           
  6154                           ; BSR set to: 0
  6155  002F76  0100               	movlb	0	; () banked
  6156  002F78  90D8               	bcf	status,0,c
  6157  002F7A  3383               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  6158  002F7C  3382               	rrcf	___awdiv@divisor& (0+255),f,b
  6159                           
  6160                           ; BSR set to: 0
  6161  002F7E  0100               	movlb	0	; () banked
  6162  002F80  2F84               	decfsz	___awdiv@counter& (0+255),f,b
  6163  002F82  D7E1               	goto	l6341
  6164  002F84                     l6353:
  6165                           
  6166                           ; BSR set to: 0
  6167  002F84  0100               	movlb	0	; () banked
  6168  002F86  5185               	movf	___awdiv@sign& (0+255),w,b
  6169  002F88  0100               	movlb	0	; () banked
  6170  002F8A  B4D8               	btfsc	status,2,c
  6171  002F8C  D005               	goto	l6357
  6172                           
  6173                           ; BSR set to: 0
  6174  002F8E  0100               	movlb	0	; () banked
  6175  002F90  6D86               	negf	___awdiv@quotient& (0+255),b
  6176  002F92  1F87               	comf	(___awdiv@quotient+1)& (0+255),f,b
  6177  002F94  B0D8               	btfsc	status,0,c
  6178  002F96  2B87               	incf	(___awdiv@quotient+1)& (0+255),f,b
  6179  002F98                     l6357:
  6180                           
  6181                           ; BSR set to: 0
  6182  002F98  C086  F080         	movff	___awdiv@quotient,?___awdiv
  6183  002F9C  C087  F081         	movff	___awdiv@quotient+1,?___awdiv+1
  6184  002FA0  0012               	return	
  6185  002FA2                     __end_of___awdiv:
  6186                           	opt stack 0
  6187                           tblptru	equ	0xFF8
  6188                           tblptrh	equ	0xFF7
  6189                           tblptrl	equ	0xFF6
  6190                           tablat	equ	0xFF5
  6191                           prodh	equ	0xFF4
  6192                           prodl	equ	0xFF3
  6193                           intcon	equ	0xFF2
  6194                           intcon2	equ	0xFF1
  6195                           intcon3	equ	0xFF0
  6196                           postinc0	equ	0xFEE
  6197                           wreg	equ	0xFE8
  6198                           postdec1	equ	0xFE5
  6199                           fsr1l	equ	0xFE1
  6200                           indf2	equ	0xFDF
  6201                           fsr2h	equ	0xFDA
  6202                           fsr2l	equ	0xFD9
  6203                           status	equ	0xFD8
  6204                           
  6205 ;; *************** function _Eeprom_WriteByte *****************
  6206 ;; Defined at:
  6207 ;;		line 767 in file "../main.c"
  6208 ;; Parameters:    Size  Location     Type
  6209 ;;  address         2    0[BANK0 ] unsigned int 
  6210 ;;  data            1    2[BANK0 ] unsigned char 
  6211 ;; Auto vars:     Size  Location     Type
  6212 ;;		None
  6213 ;; Return value:  Size  Location     Type
  6214 ;;                  1    wreg      void 
  6215 ;; Registers used:
  6216 ;;		wreg, status,2
  6217 ;; Tracked objects:
  6218 ;;		On entry : 0/0
  6219 ;;		On exit  : 0/0
  6220 ;;		Unchanged: 0/0
  6221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6222 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6223 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6224 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6225 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6226 ;;Total ram usage:        3 bytes
  6227 ;; Hardware stack levels used:    1
  6228 ;; Hardware stack levels required when called:    5
  6229 ;; This function calls:
  6230 ;;		Nothing
  6231 ;; This function is called by:
  6232 ;;		_stopOperation
  6233 ;; This function uses a non-reentrant model
  6234 ;;
  6235                           
  6236                           	psect	text7
  6237  003626                     __ptext7:
  6238                           	opt stack 0
  6239  003626                     _Eeprom_WriteByte:
  6240                           	opt stack 24
  6241                           
  6242                           ;main.c: 769: EEADRH = (uint8_t)(address >> 8);
  6243                           
  6244                           ; BSR set to: 0
  6245                           ;incstack = 0
  6246  003626  0100               	movlb	0	; () banked
  6247  003628  5181               	movf	(Eeprom_WriteByte@address+1)& (0+255),w,b
  6248  00362A  6EAA               	movwf	4010,c	;volatile
  6249                           
  6250                           ; BSR set to: 0
  6251                           ;main.c: 770: EEADR = (uint8_t)address;
  6252  00362C  C080  FFA9         	movff	Eeprom_WriteByte@address,4009	;volatile
  6253                           
  6254                           ; BSR set to: 0
  6255                           ;main.c: 772: EEDATA = data;
  6256  003630  C082  FFA8         	movff	Eeprom_WriteByte@data,4008	;volatile
  6257                           
  6258                           ; BSR set to: 0
  6259                           ;main.c: 773: EECON1bits.EEPGD = 0;
  6260  003634  9EA6               	bcf	4006,7,c	;volatile
  6261                           
  6262                           ; BSR set to: 0
  6263                           ;main.c: 774: EECON1bits.CFGS = 0;
  6264  003636  9CA6               	bcf	4006,6,c	;volatile
  6265                           
  6266                           ; BSR set to: 0
  6267                           ;main.c: 775: EECON1bits.WREN = 1;
  6268  003638  84A6               	bsf	4006,2,c	;volatile
  6269                           
  6270                           ;main.c: 779: EECON2 = 0x55;
  6271  00363A  0E55               	movlw	85
  6272  00363C  6EA7               	movwf	4007,c	;volatile
  6273                           
  6274                           ;main.c: 780: EECON2 = 0xAA;
  6275  00363E  0EAA               	movlw	170
  6276  003640  6EA7               	movwf	4007,c	;volatile
  6277                           
  6278                           ; BSR set to: 0
  6279                           ;main.c: 781: EECON1bits.WR = 1;
  6280  003642  82A6               	bsf	4006,1,c	;volatile
  6281  003644                     l520:
  6282  003644  A8A1               	btfss	4001,4,c	;volatile
  6283  003646  D7FE               	goto	l520
  6284                           
  6285                           ;main.c: 787: }
  6286                           ;main.c: 789: PIR2bits.EEIF = 0;
  6287  003648  98A1               	bcf	4001,4,c	;volatile
  6288                           
  6289                           ;main.c: 790: EECON1bits.WREN = 0;
  6290  00364A  94A6               	bcf	4006,2,c	;volatile
  6291  00364C  0012               	return		;funcret
  6292  00364E                     __end_of_Eeprom_WriteByte:
  6293                           	opt stack 0
  6294                           tblptru	equ	0xFF8
  6295                           tblptrh	equ	0xFF7
  6296                           tblptrl	equ	0xFF6
  6297                           tablat	equ	0xFF5
  6298                           prodh	equ	0xFF4
  6299                           prodl	equ	0xFF3
  6300                           intcon	equ	0xFF2
  6301                           intcon2	equ	0xFF1
  6302                           intcon3	equ	0xFF0
  6303                           postinc0	equ	0xFEE
  6304                           wreg	equ	0xFE8
  6305                           postdec1	equ	0xFE5
  6306                           fsr1l	equ	0xFE1
  6307                           indf2	equ	0xFDF
  6308                           fsr2h	equ	0xFDA
  6309                           fsr2l	equ	0xFD9
  6310                           status	equ	0xFD8
  6311                           
  6312 ;; *************** function _show_log *****************
  6313 ;; Defined at:
  6314 ;;		line 798 in file "../main.c"
  6315 ;; Parameters:    Size  Location     Type
  6316 ;;  log_address     2   34[BANK0 ] unsigned int 
  6317 ;;  currScreen      1   36[BANK0 ] unsigned char 
  6318 ;; Auto vars:     Size  Location     Type
  6319 ;;  i               1   58[BANK0 ] unsigned char 
  6320 ;;  i               1   57[BANK0 ] unsigned char 
  6321 ;;  i               1   56[BANK0 ] unsigned char 
  6322 ;;  address         2   59[BANK0 ] unsigned int 
  6323 ;;  elapsed_time    2   48[BANK0 ] unsigned int 
  6324 ;;  Drain_num       2   46[BANK0 ] unsigned int 
  6325 ;;  Nine_num        2   44[BANK0 ] unsigned int 
  6326 ;;  C_num           2   42[BANK0 ] unsigned int 
  6327 ;;  AA_num          2   40[BANK0 ] unsigned int 
  6328 ;;  total_num       2   38[BANK0 ] unsigned int 
  6329 ;;  second          1   55[BANK0 ] unsigned char 
  6330 ;;  minute          1   54[BANK0 ] unsigned char 
  6331 ;;  hour            1   53[BANK0 ] unsigned char 
  6332 ;;  day             1   52[BANK0 ] unsigned char 
  6333 ;;  month           1   51[BANK0 ] unsigned char 
  6334 ;;  year            1   50[BANK0 ] unsigned char 
  6335 ;; Return value:  Size  Location     Type
  6336 ;;                  1    wreg      void 
  6337 ;; Registers used:
  6338 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6339 ;; Tracked objects:
  6340 ;;		On entry : 0/0
  6341 ;;		On exit  : 0/0
  6342 ;;		Unchanged: 0/0
  6343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6344 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6345 ;;      Locals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6346 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6347 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6348 ;;Total ram usage:       27 bytes
  6349 ;; Hardware stack levels used:    1
  6350 ;; Hardware stack levels required when called:    8
  6351 ;; This function calls:
  6352 ;;		_Eeprom_ReadByte
  6353 ;;		_lcdInst
  6354 ;;		_next_address
  6355 ;;		_printf
  6356 ;; This function is called by:
  6357 ;;		_main
  6358 ;; This function uses a non-reentrant model
  6359 ;;
  6360                           
  6361                           	psect	text8
  6362  001C66                     __ptext8:
  6363                           	opt stack 0
  6364  001C66                     _show_log:
  6365                           	opt stack 22
  6366                           
  6367                           ;main.c: 801: for(unsigned char i=0;i<200;i++){
  6368                           
  6369                           ;incstack = 0
  6370  001C66  0E00               	movlw	0
  6371  001C68  0100               	movlb	0	; () banked
  6372  001C6A  6FB8               	movwf	show_log@i& (0+255),b
  6373  001C6C                     l6691:
  6374                           
  6375                           ; BSR set to: 0
  6376  001C6C  0EC7               	movlw	199
  6377  001C6E  0100               	movlb	0	; () banked
  6378  001C70  65B8               	cpfsgt	show_log@i& (0+255),b
  6379  001C72  D001               	goto	l6695
  6380  001C74  D012               	goto	l530
  6381  001C76                     l6695:
  6382                           
  6383                           ; BSR set to: 0
  6384                           ;main.c: 802: if (screenMode != currScreen)
  6385  001C76  0100               	movlb	0	; () banked
  6386  001C78  51A4               	movf	show_log@currScreen& (0+255),w,b
  6387  001C7A  0100               	movlb	0	; () banked
  6388  001C7C  19FA               	xorwf	_screenMode& (0+255),w,b
  6389  001C7E  A4D8               	btfss	status,2,c
  6390  001C80  D00C               	goto	l530
  6391                           
  6392                           ; BSR set to: 0
  6393                           ;main.c: 804: _delay((unsigned long)((10)*(10000000/4000.0)));
  6394                           
  6395                           ; BSR set to: 0
  6396                           
  6397                           ; BSR set to: 0
  6398                           ;main.c: 803: break;
  6399  001C82  0E21               	movlw	33
  6400  001C84  0100               	movlb	0	; () banked
  6401  001C86  6FA5               	movwf	??_show_log& (0+255),b
  6402  001C88  0E76               	movlw	118
  6403  001C8A                     u7927:
  6404  001C8A  2EE8               	decfsz	wreg,f,c
  6405  001C8C  D7FE               	bra	u7927
  6406  001C8E  2FA5               	decfsz	??_show_log& (0+255),f,b
  6407  001C90  D7FC               	bra	u7927
  6408  001C92  F000               	nop	
  6409  001C94  0100               	movlb	0	; () banked
  6410  001C96  2BB8               	incf	show_log@i& (0+255),f,b
  6411  001C98  D7E9               	goto	l6691
  6412  001C9A                     l530:
  6413                           
  6414                           ; BSR set to: 0
  6415                           ;main.c: 805: }
  6416                           ;main.c: 806: uint16_t address = log_address;
  6417  001C9A  C0A2  F0BB         	movff	show_log@log_address,show_log@address
  6418  001C9E  C0A3  F0BC         	movff	show_log@log_address+1,show_log@address+1
  6419                           
  6420                           ; BSR set to: 0
  6421                           ;main.c: 807: unsigned char year = Eeprom_ReadByte(address);
  6422  001CA2  C0BB  F080         	movff	show_log@address,Eeprom_ReadByte@address
  6423  001CA6  C0BC  F081         	movff	show_log@address+1,Eeprom_ReadByte@address+1
  6424  001CAA  EC98  F01B         	call	_Eeprom_ReadByte	;wreg free
  6425  001CAE  0100               	movlb	0	; () banked
  6426  001CB0  6FB2               	movwf	show_log@year& (0+255),b
  6427                           
  6428                           ; BSR set to: 0
  6429                           ;main.c: 808: address = next_address(address);
  6430  001CB2  C0BB  F080         	movff	show_log@address,next_address@address
  6431  001CB6  C0BC  F081         	movff	show_log@address+1,next_address@address+1
  6432  001CBA  ECA4  F01B         	call	_next_address	;wreg free
  6433  001CBE  C080  F0BB         	movff	?_next_address,show_log@address
  6434  001CC2  C081  F0BC         	movff	?_next_address+1,show_log@address+1
  6435                           
  6436                           ;main.c: 809: unsigned char month = Eeprom_ReadByte(address);
  6437  001CC6  C0BB  F080         	movff	show_log@address,Eeprom_ReadByte@address
  6438  001CCA  C0BC  F081         	movff	show_log@address+1,Eeprom_ReadByte@address+1
  6439  001CCE  EC98  F01B         	call	_Eeprom_ReadByte	;wreg free
  6440  001CD2  0100               	movlb	0	; () banked
  6441  001CD4  6FB3               	movwf	show_log@month& (0+255),b
  6442                           
  6443                           ;main.c: 810: address = next_address(address);
  6444  001CD6  C0BB  F080         	movff	show_log@address,next_address@address
  6445  001CDA  C0BC  F081         	movff	show_log@address+1,next_address@address+1
  6446  001CDE  ECA4  F01B         	call	_next_address	;wreg free
  6447  001CE2  C080  F0BB         	movff	?_next_address,show_log@address
  6448  001CE6  C081  F0BC         	movff	?_next_address+1,show_log@address+1
  6449                           
  6450                           ;main.c: 811: unsigned char day = Eeprom_ReadByte(address);
  6451  001CEA  C0BB  F080         	movff	show_log@address,Eeprom_ReadByte@address
  6452  001CEE  C0BC  F081         	movff	show_log@address+1,Eeprom_ReadByte@address+1
  6453  001CF2  EC98  F01B         	call	_Eeprom_ReadByte	;wreg free
  6454  001CF6  0100               	movlb	0	; () banked
  6455  001CF8  6FB4               	movwf	show_log@day& (0+255),b
  6456                           
  6457                           ; BSR set to: 0
  6458                           ;main.c: 812: address = next_address(address);
  6459  001CFA  C0BB  F080         	movff	show_log@address,next_address@address
  6460  001CFE  C0BC  F081         	movff	show_log@address+1,next_address@address+1
  6461  001D02  ECA4  F01B         	call	_next_address	;wreg free
  6462  001D06  C080  F0BB         	movff	?_next_address,show_log@address
  6463  001D0A  C081  F0BC         	movff	?_next_address+1,show_log@address+1
  6464                           
  6465                           ;main.c: 813: unsigned char hour = Eeprom_ReadByte(address);
  6466  001D0E  C0BB  F080         	movff	show_log@address,Eeprom_ReadByte@address
  6467  001D12  C0BC  F081         	movff	show_log@address+1,Eeprom_ReadByte@address+1
  6468  001D16  EC98  F01B         	call	_Eeprom_ReadByte	;wreg free
  6469  001D1A  0100               	movlb	0	; () banked
  6470  001D1C  6FB5               	movwf	show_log@hour& (0+255),b
  6471                           
  6472                           ; BSR set to: 0
  6473                           ;main.c: 814: address = next_address(address);
  6474  001D1E  C0BB  F080         	movff	show_log@address,next_address@address
  6475  001D22  C0BC  F081         	movff	show_log@address+1,next_address@address+1
  6476  001D26  ECA4  F01B         	call	_next_address	;wreg free
  6477  001D2A  C080  F0BB         	movff	?_next_address,show_log@address
  6478  001D2E  C081  F0BC         	movff	?_next_address+1,show_log@address+1
  6479                           
  6480                           ;main.c: 815: unsigned char minute = Eeprom_ReadByte(address);
  6481  001D32  C0BB  F080         	movff	show_log@address,Eeprom_ReadByte@address
  6482  001D36  C0BC  F081         	movff	show_log@address+1,Eeprom_ReadByte@address+1
  6483  001D3A  EC98  F01B         	call	_Eeprom_ReadByte	;wreg free
  6484  001D3E  0100               	movlb	0	; () banked
  6485  001D40  6FB6               	movwf	show_log@minute& (0+255),b
  6486                           
  6487                           ;main.c: 816: address = next_address(address);
  6488  001D42  C0BB  F080         	movff	show_log@address,next_address@address
  6489  001D46  C0BC  F081         	movff	show_log@address+1,next_address@address+1
  6490  001D4A  ECA4  F01B         	call	_next_address	;wreg free
  6491  001D4E  C080  F0BB         	movff	?_next_address,show_log@address
  6492  001D52  C081  F0BC         	movff	?_next_address+1,show_log@address+1
  6493                           
  6494                           ;main.c: 817: unsigned char second = Eeprom_ReadByte(address);
  6495  001D56  C0BB  F080         	movff	show_log@address,Eeprom_ReadByte@address
  6496  001D5A  C0BC  F081         	movff	show_log@address+1,Eeprom_ReadByte@address+1
  6497  001D5E  EC98  F01B         	call	_Eeprom_ReadByte	;wreg free
  6498  001D62  0100               	movlb	0	; () banked
  6499  001D64  6FB7               	movwf	show_log@second& (0+255),b
  6500                           
  6501                           ; BSR set to: 0
  6502                           ;main.c: 818: address = next_address(address);
  6503  001D66  C0BB  F080         	movff	show_log@address,next_address@address
  6504  001D6A  C0BC  F081         	movff	show_log@address+1,next_address@address+1
  6505  001D6E  ECA4  F01B         	call	_next_address	;wreg free
  6506  001D72  C080  F0BB         	movff	?_next_address,show_log@address
  6507  001D76  C081  F0BC         	movff	?_next_address+1,show_log@address+1
  6508                           
  6509                           ;main.c: 820: unsigned int AA_num = Eeprom_ReadByte(address);
  6510  001D7A  C0BB  F080         	movff	show_log@address,Eeprom_ReadByte@address
  6511  001D7E  C0BC  F081         	movff	show_log@address+1,Eeprom_ReadByte@address+1
  6512  001D82  EC98  F01B         	call	_Eeprom_ReadByte	;wreg free
  6513  001D86  0100               	movlb	0	; () banked
  6514  001D88  6FA5               	movwf	??_show_log& (0+255),b
  6515  001D8A  0100               	movlb	0	; () banked
  6516  001D8C  51A5               	movf	??_show_log& (0+255),w,b
  6517  001D8E  0100               	movlb	0	; () banked
  6518  001D90  6FA8               	movwf	show_log@AA_num& (0+255),b
  6519  001D92  6BA9               	clrf	(show_log@AA_num+1)& (0+255),b
  6520                           
  6521                           ; BSR set to: 0
  6522                           ;main.c: 821: address = next_address(address);
  6523  001D94  C0BB  F080         	movff	show_log@address,next_address@address
  6524  001D98  C0BC  F081         	movff	show_log@address+1,next_address@address+1
  6525  001D9C  ECA4  F01B         	call	_next_address	;wreg free
  6526  001DA0  C080  F0BB         	movff	?_next_address,show_log@address
  6527  001DA4  C081  F0BC         	movff	?_next_address+1,show_log@address+1
  6528                           
  6529                           ;main.c: 822: unsigned int C_num = Eeprom_ReadByte(address);
  6530  001DA8  C0BB  F080         	movff	show_log@address,Eeprom_ReadByte@address
  6531  001DAC  C0BC  F081         	movff	show_log@address+1,Eeprom_ReadByte@address+1
  6532  001DB0  EC98  F01B         	call	_Eeprom_ReadByte	;wreg free
  6533  001DB4  0100               	movlb	0	; () banked
  6534  001DB6  6FA5               	movwf	??_show_log& (0+255),b
  6535  001DB8  0100               	movlb	0	; () banked
  6536  001DBA  51A5               	movf	??_show_log& (0+255),w,b
  6537  001DBC  0100               	movlb	0	; () banked
  6538  001DBE  6FAA               	movwf	show_log@C_num& (0+255),b
  6539  001DC0  6BAB               	clrf	(show_log@C_num+1)& (0+255),b
  6540                           
  6541                           ; BSR set to: 0
  6542                           ;main.c: 823: address = next_address(address);
  6543  001DC2  C0BB  F080         	movff	show_log@address,next_address@address
  6544  001DC6  C0BC  F081         	movff	show_log@address+1,next_address@address+1
  6545  001DCA  ECA4  F01B         	call	_next_address	;wreg free
  6546  001DCE  C080  F0BB         	movff	?_next_address,show_log@address
  6547  001DD2  C081  F0BC         	movff	?_next_address+1,show_log@address+1
  6548                           
  6549                           ;main.c: 824: unsigned int Nine_num = Eeprom_ReadByte(address);
  6550  001DD6  C0BB  F080         	movff	show_log@address,Eeprom_ReadByte@address
  6551  001DDA  C0BC  F081         	movff	show_log@address+1,Eeprom_ReadByte@address+1
  6552  001DDE  EC98  F01B         	call	_Eeprom_ReadByte	;wreg free
  6553  001DE2  0100               	movlb	0	; () banked
  6554  001DE4  6FA5               	movwf	??_show_log& (0+255),b
  6555  001DE6  0100               	movlb	0	; () banked
  6556  001DE8  51A5               	movf	??_show_log& (0+255),w,b
  6557  001DEA  0100               	movlb	0	; () banked
  6558  001DEC  6FAC               	movwf	show_log@Nine_num& (0+255),b
  6559  001DEE  6BAD               	clrf	(show_log@Nine_num+1)& (0+255),b
  6560                           
  6561                           ; BSR set to: 0
  6562                           ;main.c: 825: address = next_address(address);
  6563  001DF0  C0BB  F080         	movff	show_log@address,next_address@address
  6564  001DF4  C0BC  F081         	movff	show_log@address+1,next_address@address+1
  6565  001DF8  ECA4  F01B         	call	_next_address	;wreg free
  6566  001DFC  C080  F0BB         	movff	?_next_address,show_log@address
  6567  001E00  C081  F0BC         	movff	?_next_address+1,show_log@address+1
  6568                           
  6569                           ;main.c: 826: unsigned int Drain_num = Eeprom_ReadByte(address);
  6570  001E04  C0BB  F080         	movff	show_log@address,Eeprom_ReadByte@address
  6571  001E08  C0BC  F081         	movff	show_log@address+1,Eeprom_ReadByte@address+1
  6572  001E0C  EC98  F01B         	call	_Eeprom_ReadByte	;wreg free
  6573  001E10  0100               	movlb	0	; () banked
  6574  001E12  6FA5               	movwf	??_show_log& (0+255),b
  6575  001E14  0100               	movlb	0	; () banked
  6576  001E16  51A5               	movf	??_show_log& (0+255),w,b
  6577  001E18  0100               	movlb	0	; () banked
  6578  001E1A  6FAE               	movwf	show_log@Drain_num& (0+255),b
  6579  001E1C  6BAF               	clrf	(show_log@Drain_num+1)& (0+255),b
  6580                           
  6581                           ; BSR set to: 0
  6582                           ;main.c: 827: address = next_address(address);
  6583  001E1E  C0BB  F080         	movff	show_log@address,next_address@address
  6584  001E22  C0BC  F081         	movff	show_log@address+1,next_address@address+1
  6585  001E26  ECA4  F01B         	call	_next_address	;wreg free
  6586  001E2A  C080  F0BB         	movff	?_next_address,show_log@address
  6587  001E2E  C081  F0BC         	movff	?_next_address+1,show_log@address+1
  6588                           
  6589                           ;main.c: 828: unsigned int total_num = Eeprom_ReadByte(address);
  6590  001E32  C0BB  F080         	movff	show_log@address,Eeprom_ReadByte@address
  6591  001E36  C0BC  F081         	movff	show_log@address+1,Eeprom_ReadByte@address+1
  6592  001E3A  EC98  F01B         	call	_Eeprom_ReadByte	;wreg free
  6593  001E3E  0100               	movlb	0	; () banked
  6594  001E40  6FA5               	movwf	??_show_log& (0+255),b
  6595  001E42  0100               	movlb	0	; () banked
  6596  001E44  51A5               	movf	??_show_log& (0+255),w,b
  6597  001E46  0100               	movlb	0	; () banked
  6598  001E48  6FA6               	movwf	show_log@total_num& (0+255),b
  6599  001E4A  6BA7               	clrf	(show_log@total_num+1)& (0+255),b
  6600                           
  6601                           ; BSR set to: 0
  6602                           ;main.c: 829: address = next_address(address);
  6603  001E4C  C0BB  F080         	movff	show_log@address,next_address@address
  6604  001E50  C0BC  F081         	movff	show_log@address+1,next_address@address+1
  6605  001E54  ECA4  F01B         	call	_next_address	;wreg free
  6606  001E58  C080  F0BB         	movff	?_next_address,show_log@address
  6607  001E5C  C081  F0BC         	movff	?_next_address+1,show_log@address+1
  6608                           
  6609                           ;main.c: 830: unsigned int elapsed_time = Eeprom_ReadByte(address);
  6610  001E60  C0BB  F080         	movff	show_log@address,Eeprom_ReadByte@address
  6611  001E64  C0BC  F081         	movff	show_log@address+1,Eeprom_ReadByte@address+1
  6612  001E68  EC98  F01B         	call	_Eeprom_ReadByte	;wreg free
  6613  001E6C  0100               	movlb	0	; () banked
  6614  001E6E  6FA5               	movwf	??_show_log& (0+255),b
  6615  001E70  0100               	movlb	0	; () banked
  6616  001E72  51A5               	movf	??_show_log& (0+255),w,b
  6617  001E74  0100               	movlb	0	; () banked
  6618  001E76  6FB0               	movwf	show_log@elapsed_time& (0+255),b
  6619  001E78  6BB1               	clrf	(show_log@elapsed_time+1)& (0+255),b
  6620                           
  6621                           ;main.c: 832: while (screenMode == currScreen){
  6622  001E7A  D08C               	goto	l6783
  6623  001E7C                     l6743:
  6624                           
  6625                           ; BSR set to: 0
  6626                           ;main.c: 833: lcdInst(0b10000000);;
  6627  001E7C  0E80               	movlw	128
  6628  001E7E  ECDF  F01B         	call	_lcdInst
  6629                           
  6630                           ;main.c: 834: printf("%02x/%02x/%02x        ", year,month,day);
  6631  001E82  0EC3               	movlw	low STR_20
  6632  001E84  0100               	movlb	0	; () banked
  6633  001E86  6F8C               	movwf	printf@f& (0+255),b
  6634  001E88  0EFD               	movlw	high STR_20
  6635  001E8A  0100               	movlb	0	; () banked
  6636  001E8C  6F8D               	movwf	(printf@f+1)& (0+255),b
  6637  001E8E  C0B2  F08E         	movff	show_log@year,?_printf+2
  6638  001E92  0100               	movlb	0	; () banked
  6639  001E94  6B8F               	clrf	(?_printf+3)& (0+255),b
  6640  001E96  C0B3  F090         	movff	show_log@month,?_printf+4
  6641  001E9A  0100               	movlb	0	; () banked
  6642  001E9C  6B91               	clrf	(?_printf+5)& (0+255),b
  6643  001E9E  C0B4  F092         	movff	show_log@day,?_printf+6
  6644  001EA2  0100               	movlb	0	; () banked
  6645  001EA4  6B93               	clrf	(?_printf+7)& (0+255),b
  6646  001EA6  EC59  F00C         	call	_printf	;wreg free
  6647                           
  6648                           ;main.c: 835: lcdInst(0b11000000);;
  6649  001EAA  0EC0               	movlw	192
  6650  001EAC  ECDF  F01B         	call	_lcdInst
  6651                           
  6652                           ;main.c: 836: printf("%02x:%02x:%02x        ", hour,minute, second);
  6653  001EB0  0EDA               	movlw	low STR_21
  6654  001EB2  0100               	movlb	0	; () banked
  6655  001EB4  6F8C               	movwf	printf@f& (0+255),b
  6656  001EB6  0EFD               	movlw	high STR_21
  6657  001EB8  0100               	movlb	0	; () banked
  6658  001EBA  6F8D               	movwf	(printf@f+1)& (0+255),b
  6659  001EBC  C0B5  F08E         	movff	show_log@hour,?_printf+2
  6660  001EC0  0100               	movlb	0	; () banked
  6661  001EC2  6B8F               	clrf	(?_printf+3)& (0+255),b
  6662  001EC4  C0B6  F090         	movff	show_log@minute,?_printf+4
  6663  001EC8  0100               	movlb	0	; () banked
  6664  001ECA  6B91               	clrf	(?_printf+5)& (0+255),b
  6665  001ECC  C0B7  F092         	movff	show_log@second,?_printf+6
  6666  001ED0  0100               	movlb	0	; () banked
  6667  001ED2  6B93               	clrf	(?_printf+7)& (0+255),b
  6668  001ED4  EC59  F00C         	call	_printf	;wreg free
  6669                           
  6670                           ;main.c: 837: for(unsigned char i=0;i<200;i++){
  6671  001ED8  0E00               	movlw	0
  6672  001EDA  0100               	movlb	0	; () banked
  6673  001EDC  6FB9               	movwf	show_log@i_936& (0+255),b
  6674  001EDE                     l6751:
  6675                           
  6676                           ; BSR set to: 0
  6677  001EDE  0EC7               	movlw	199
  6678  001EE0  0100               	movlb	0	; () banked
  6679  001EE2  65B9               	cpfsgt	show_log@i_936& (0+255),b
  6680  001EE4  D001               	goto	l6755
  6681  001EE6  D012               	goto	l6763
  6682  001EE8                     l6755:
  6683                           
  6684                           ; BSR set to: 0
  6685                           ;main.c: 838: if (screenMode != currScreen)
  6686  001EE8  0100               	movlb	0	; () banked
  6687  001EEA  51A4               	movf	show_log@currScreen& (0+255),w,b
  6688  001EEC  0100               	movlb	0	; () banked
  6689  001EEE  19FA               	xorwf	_screenMode& (0+255),w,b
  6690  001EF0  A4D8               	btfss	status,2,c
  6691  001EF2  D00C               	goto	l6763
  6692                           
  6693                           ; BSR set to: 0
  6694                           ;main.c: 840: _delay((unsigned long)((10)*(10000000/4000.0)));
  6695                           
  6696                           ; BSR set to: 0
  6697                           
  6698                           ; BSR set to: 0
  6699                           ;main.c: 839: break;
  6700  001EF4  0E21               	movlw	33
  6701  001EF6  0100               	movlb	0	; () banked
  6702  001EF8  6FA5               	movwf	??_show_log& (0+255),b
  6703  001EFA  0E76               	movlw	118
  6704  001EFC                     u7937:
  6705  001EFC  2EE8               	decfsz	wreg,f,c
  6706  001EFE  D7FE               	bra	u7937
  6707  001F00  2FA5               	decfsz	??_show_log& (0+255),f,b
  6708  001F02  D7FC               	bra	u7937
  6709  001F04  F000               	nop	
  6710  001F06  0100               	movlb	0	; () banked
  6711  001F08  2BB9               	incf	show_log@i_936& (0+255),f,b
  6712  001F0A  D7E9               	goto	l6751
  6713  001F0C                     l6763:
  6714                           
  6715                           ; BSR set to: 0
  6716                           ;main.c: 841: }
  6717                           ;main.c: 842: lcdInst(0b10000000);;
  6718  001F0C  0E80               	movlw	128
  6719  001F0E  ECDF  F01B         	call	_lcdInst
  6720                           
  6721                           ;main.c: 843: printf("AA:%02d C:%02d 9V:%02d", AA_num, C_num, Nine_num);
  6722  001F12  0E1F               	movlw	low STR_37
  6723  001F14  0100               	movlb	0	; () banked
  6724  001F16  6F8C               	movwf	printf@f& (0+255),b
  6725  001F18  0EFE               	movlw	high STR_37
  6726  001F1A  0100               	movlb	0	; () banked
  6727  001F1C  6F8D               	movwf	(printf@f+1)& (0+255),b
  6728  001F1E  C0A8  F08E         	movff	show_log@AA_num,?_printf+2
  6729  001F22  C0A9  F08F         	movff	show_log@AA_num+1,?_printf+3
  6730  001F26  C0AA  F090         	movff	show_log@C_num,?_printf+4
  6731  001F2A  C0AB  F091         	movff	show_log@C_num+1,?_printf+5
  6732  001F2E  C0AC  F092         	movff	show_log@Nine_num,?_printf+6
  6733  001F32  C0AD  F093         	movff	show_log@Nine_num+1,?_printf+7
  6734  001F36  EC59  F00C         	call	_printf	;wreg free
  6735                           
  6736                           ;main.c: 844: lcdInst(0b11000000);;
  6737  001F3A  0EC0               	movlw	192
  6738  001F3C  ECDF  F01B         	call	_lcdInst
  6739                           
  6740                           ;main.c: 845: printf("X:%02d TIME:%ds    ", Drain_num, elapsed_time);
  6741  001F40  0E61               	movlw	low STR_38
  6742  001F42  0100               	movlb	0	; () banked
  6743  001F44  6F8C               	movwf	printf@f& (0+255),b
  6744  001F46  0EFE               	movlw	high STR_38
  6745  001F48  0100               	movlb	0	; () banked
  6746  001F4A  6F8D               	movwf	(printf@f+1)& (0+255),b
  6747  001F4C  C0AE  F08E         	movff	show_log@Drain_num,?_printf+2
  6748  001F50  C0AF  F08F         	movff	show_log@Drain_num+1,?_printf+3
  6749  001F54  C0B0  F090         	movff	show_log@elapsed_time,?_printf+4
  6750  001F58  C0B1  F091         	movff	show_log@elapsed_time+1,?_printf+5
  6751  001F5C  EC59  F00C         	call	_printf	;wreg free
  6752                           
  6753                           ;main.c: 848: for(unsigned char i=0;i<200;i++){
  6754  001F60  0E00               	movlw	0
  6755  001F62  0100               	movlb	0	; () banked
  6756  001F64  6FBA               	movwf	show_log@i_939& (0+255),b
  6757  001F66                     l6771:
  6758                           
  6759                           ; BSR set to: 0
  6760  001F66  0EC7               	movlw	199
  6761  001F68  0100               	movlb	0	; () banked
  6762  001F6A  65BA               	cpfsgt	show_log@i_939& (0+255),b
  6763  001F6C  D001               	goto	l6775
  6764  001F6E  D012               	goto	l6783
  6765  001F70                     l6775:
  6766                           
  6767                           ; BSR set to: 0
  6768                           ;main.c: 849: if (screenMode != currScreen)
  6769  001F70  0100               	movlb	0	; () banked
  6770  001F72  51A4               	movf	show_log@currScreen& (0+255),w,b
  6771  001F74  0100               	movlb	0	; () banked
  6772  001F76  19FA               	xorwf	_screenMode& (0+255),w,b
  6773  001F78  A4D8               	btfss	status,2,c
  6774  001F7A  D00C               	goto	l6783
  6775                           
  6776                           ; BSR set to: 0
  6777                           ;main.c: 851: _delay((unsigned long)((10)*(10000000/4000.0)));
  6778                           
  6779                           ; BSR set to: 0
  6780                           
  6781                           ; BSR set to: 0
  6782                           ;main.c: 850: break;
  6783  001F7C  0E21               	movlw	33
  6784  001F7E  0100               	movlb	0	; () banked
  6785  001F80  6FA5               	movwf	??_show_log& (0+255),b
  6786  001F82  0E76               	movlw	118
  6787  001F84                     u7947:
  6788  001F84  2EE8               	decfsz	wreg,f,c
  6789  001F86  D7FE               	bra	u7947
  6790  001F88  2FA5               	decfsz	??_show_log& (0+255),f,b
  6791  001F8A  D7FC               	bra	u7947
  6792  001F8C  F000               	nop	
  6793  001F8E  0100               	movlb	0	; () banked
  6794  001F90  2BBA               	incf	show_log@i_939& (0+255),f,b
  6795  001F92  D7E9               	goto	l6771
  6796  001F94                     l6783:
  6797                           
  6798                           ; BSR set to: 0
  6799  001F94  0100               	movlb	0	; () banked
  6800  001F96  51A4               	movf	show_log@currScreen& (0+255),w,b
  6801  001F98  0100               	movlb	0	; () banked
  6802  001F9A  19FA               	xorwf	_screenMode& (0+255),w,b
  6803  001F9C  A4D8               	btfss	status,2,c
  6804  001F9E  0012               	return	
  6805  001FA0  D76D               	goto	l6743
  6806  001FA2                     __end_of_show_log:
  6807                           	opt stack 0
  6808                           tblptru	equ	0xFF8
  6809                           tblptrh	equ	0xFF7
  6810                           tblptrl	equ	0xFF6
  6811                           tablat	equ	0xFF5
  6812                           prodh	equ	0xFF4
  6813                           prodl	equ	0xFF3
  6814                           intcon	equ	0xFF2
  6815                           intcon2	equ	0xFF1
  6816                           intcon3	equ	0xFF0
  6817                           postinc0	equ	0xFEE
  6818                           wreg	equ	0xFE8
  6819                           postdec1	equ	0xFE5
  6820                           fsr1l	equ	0xFE1
  6821                           indf2	equ	0xFDF
  6822                           fsr2h	equ	0xFDA
  6823                           fsr2l	equ	0xFD9
  6824                           status	equ	0xFD8
  6825                           
  6826 ;; *************** function _printf *****************
  6827 ;; Defined at:
  6828 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  6829 ;; Parameters:    Size  Location     Type
  6830 ;;  f               2   12[BANK0 ] PTR const unsigned char 
  6831 ;;		 -> STR_39(22), STR_38(20), STR_37(23), STR_36(23), 
  6832 ;;		 -> STR_35(23), STR_34(17), STR_33(23), STR_32(23), 
  6833 ;;		 -> STR_31(17), STR_30(17), STR_29(17), STR_28(17), 
  6834 ;;		 -> STR_27(17), STR_26(17), STR_25(17), STR_24(17), 
  6835 ;;		 -> STR_23(17), STR_22(17), STR_21(23), STR_20(23), 
  6836 ;;		 -> STR_19(17), STR_18(21), STR_17(17), STR_16(21), 
  6837 ;;		 -> STR_15(17), STR_14(21), STR_13(17), STR_12(19), 
  6838 ;;		 -> STR_11(17), STR_10(19), STR_9(17), STR_8(25), 
  6839 ;;		 -> STR_7(17), STR_6(17), STR_5(17), STR_4(17), 
  6840 ;;		 -> STR_3(17), STR_2(17), STR_1(17), 
  6841 ;; Auto vars:     Size  Location     Type
  6842 ;;  idx             1   24[BANK0 ] unsigned char 
  6843 ;;  tmpval          4    0        struct .
  6844 ;;  cp              3    0        PTR const unsigned char 
  6845 ;;  width           2   31[BANK0 ] int 
  6846 ;;  val             2   28[BANK0 ] unsigned int 
  6847 ;;  ap              2   25[BANK0 ] PTR void [1]
  6848 ;;		 -> ?i2_printf(2), ?_printf(2), 
  6849 ;;  len             2    0        unsigned int 
  6850 ;;  c               1   33[BANK0 ] char 
  6851 ;;  flag            1   30[BANK0 ] unsigned char 
  6852 ;;  prec            1   27[BANK0 ] char 
  6853 ;; Return value:  Size  Location     Type
  6854 ;;                  2   12[BANK0 ] int 
  6855 ;; Registers used:
  6856 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6857 ;; Tracked objects:
  6858 ;;		On entry : 0/0
  6859 ;;		On exit  : 0/0
  6860 ;;		Unchanged: 0/0
  6861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6862 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6863 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6864 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6865 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6866 ;;Total ram usage:       22 bytes
  6867 ;; Hardware stack levels used:    1
  6868 ;; Hardware stack levels required when called:    7
  6869 ;; This function calls:
  6870 ;;		___lwdiv
  6871 ;;		___lwmod
  6872 ;;		___wmul
  6873 ;;		_isdigit
  6874 ;;		_putch
  6875 ;; This function is called by:
  6876 ;;		_main
  6877 ;;		_show_log
  6878 ;; This function uses a non-reentrant model
  6879 ;;
  6880                           
  6881                           	psect	text9
  6882  0018B2                     __ptext9:
  6883                           	opt stack 0
  6884  0018B2                     _printf:
  6885                           	opt stack 22
  6886                           
  6887                           ;doprnt.c: 466: va_list ap;
  6888                           ;doprnt.c: 499: signed char c;
  6889                           ;doprnt.c: 501: int width;
  6890                           ;doprnt.c: 506: signed char prec;
  6891                           ;doprnt.c: 508: unsigned char flag;
  6892                           ;doprnt.c: 523: union {
  6893                           ;doprnt.c: 524: unsigned long vd;
  6894                           ;doprnt.c: 525: double integ;
  6895                           ;doprnt.c: 526: } tmpval;
  6896                           ;doprnt.c: 528: unsigned int val;
  6897                           ;doprnt.c: 529: unsigned len;
  6898                           ;doprnt.c: 530: const char * cp;
  6899                           ;doprnt.c: 533: *ap = __va_start();
  6900                           
  6901                           ; BSR set to: 0
  6902                           ;incstack = 0
  6903  0018B2  0E8E               	movlw	low (?_printf+2)
  6904  0018B4  0100               	movlb	0	; () banked
  6905  0018B6  6F99               	movwf	printf@ap& (0+255),b
  6906  0018B8  0E00               	movlw	high (?_printf+2)
  6907  0018BA  0100               	movlb	0	; () banked
  6908  0018BC  6F9A               	movwf	(printf@ap+1)& (0+255),b
  6909                           
  6910                           ;doprnt.c: 536: while(c = *f++) {
  6911  0018BE  D1C4               	goto	l6249
  6912  0018C0                     l6123:
  6913                           
  6914                           ; BSR set to: 0
  6915                           ;doprnt.c: 538: if(c != '%')
  6916  0018C0  0E25               	movlw	37
  6917  0018C2  0100               	movlb	0	; () banked
  6918  0018C4  19A1               	xorwf	printf@c& (0+255),w,b
  6919  0018C6  B4D8               	btfsc	status,2,c
  6920  0018C8  D005               	goto	l6127
  6921                           
  6922                           ; BSR set to: 0
  6923                           ;doprnt.c: 540: {
  6924                           ;doprnt.c: 541: (putch(c) );
  6925  0018CA  0100               	movlb	0	; () banked
  6926  0018CC  51A1               	movf	printf@c& (0+255),w,b
  6927  0018CE  ECD7  F01B         	call	_putch
  6928                           
  6929                           ;doprnt.c: 542: continue;
  6930  0018D2  D1BA               	goto	l6249
  6931  0018D4                     l6127:
  6932                           
  6933                           ;doprnt.c: 543: }
  6934                           ;doprnt.c: 546: width = 0;
  6935  0018D4  0E00               	movlw	0
  6936  0018D6  0100               	movlb	0	; () banked
  6937  0018D8  6FA0               	movwf	(printf@width+1)& (0+255),b
  6938  0018DA  0E00               	movlw	0
  6939  0018DC  6F9F               	movwf	printf@width& (0+255),b
  6940                           
  6941                           ;doprnt.c: 548: flag = 0;
  6942  0018DE  0E00               	movlw	0
  6943  0018E0  0100               	movlb	0	; () banked
  6944  0018E2  6F9E               	movwf	printf@flag& (0+255),b
  6945                           
  6946                           ; BSR set to: 0
  6947                           ;doprnt.c: 551: switch(*f) {
  6948                           
  6949                           ;doprnt.c: 550: for(;;) {
  6950  0018E4  D005               	goto	l6133
  6951  0018E6                     l6129:
  6952                           
  6953                           ;doprnt.c: 580: flag |= 0x04;
  6954  0018E6  0100               	movlb	0	; () banked
  6955  0018E8  859E               	bsf	printf@flag& (0+255),2,b
  6956                           
  6957                           ;doprnt.c: 581: f++;
  6958  0018EA  0100               	movlb	0	; () banked
  6959  0018EC  4B8C               	infsnz	printf@f& (0+255),f,b
  6960  0018EE  2B8D               	incf	(printf@f+1)& (0+255),f,b
  6961  0018F0                     l6133:
  6962  0018F0  C08C  FFF6         	movff	printf@f,tblptrl
  6963  0018F4  C08D  FFF7         	movff	printf@f+1,tblptrh
  6964  0018F8                     	if	0	;tblptru may be non-zero
  6965  0018F8                     	endif
  6966  0018F8                     	if	0	;tblptru may be non-zero
  6967  0018F8                     	endif
  6968  0018F8  0008               	tblrd		*
  6969  0018FA  50F5               	movf	tablat,w,c
  6970                           
  6971                           ; Switch size 1, requested type "space"
  6972                           ; Number of cases is 1, Range of values is 48 to 48
  6973                           ; switch strategies available:
  6974                           ; Name         Instructions Cycles
  6975                           ; simple_byte            4     3 (average)
  6976                           ;	Chosen strategy is simple_byte
  6977  0018FC  0A30               	xorlw	48	; case 48
  6978  0018FE  B4D8               	btfsc	status,2,c
  6979  001900  D7F2               	goto	l6129
  6980                           
  6981                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  6982                           
  6983                           ;doprnt.c: 586: }
  6984                           
  6985                           ;doprnt.c: 585: break;
  6986  001902  C08C  FFF6         	movff	printf@f,tblptrl
  6987  001906  C08D  FFF7         	movff	printf@f+1,tblptrh
  6988  00190A                     	if	0	;tblptru may be non-zero
  6989  00190A                     	endif
  6990  00190A                     	if	0	;tblptru may be non-zero
  6991  00190A                     	endif
  6992  00190A  0008               	tblrd		*
  6993  00190C  50F5               	movf	tablat,w,c
  6994  00190E  ECFE  F01A         	call	_isdigit
  6995  001912  A0D8               	btfss	status,0,c
  6996  001914  D044               	goto	l6151
  6997                           
  6998                           ;doprnt.c: 598: width = 0;
  6999  001916  0E00               	movlw	0
  7000  001918  0100               	movlb	0	; () banked
  7001  00191A  6FA0               	movwf	(printf@width+1)& (0+255),b
  7002  00191C  0E00               	movlw	0
  7003  00191E  6F9F               	movwf	printf@width& (0+255),b
  7004  001920                     l6139:
  7005                           
  7006                           ;doprnt.c: 600: width *= 10;
  7007  001920  C09F  F080         	movff	printf@width,___wmul@multiplier
  7008  001924  C0A0  F081         	movff	printf@width+1,___wmul@multiplier+1
  7009  001928  0E00               	movlw	0
  7010  00192A  0100               	movlb	0	; () banked
  7011  00192C  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7012  00192E  0E0A               	movlw	10
  7013  001930  6F82               	movwf	___wmul@multiplicand& (0+255),b
  7014  001932  ECCC  F01A         	call	___wmul	;wreg free
  7015  001936  C080  F09F         	movff	?___wmul,printf@width
  7016  00193A  C081  F0A0         	movff	?___wmul+1,printf@width+1
  7017                           
  7018                           ;doprnt.c: 601: width += *f++ - '0';
  7019  00193E  0ED0               	movlw	208
  7020  001940  0100               	movlb	0	; () banked
  7021  001942  6F94               	movwf	??_printf& (0+255),b
  7022  001944  0EFF               	movlw	255
  7023  001946  0100               	movlb	0	; () banked
  7024  001948  6F95               	movwf	(??_printf+1)& (0+255),b
  7025  00194A  C08C  FFF6         	movff	printf@f,tblptrl
  7026  00194E  C08D  FFF7         	movff	printf@f+1,tblptrh
  7027  001952                     	if	0	;tblptru may be non-zero
  7028  001952                     	endif
  7029  001952                     	if	0	;tblptru may be non-zero
  7030  001952                     	endif
  7031  001952  0008               	tblrd		*
  7032  001954  50F5               	movf	tablat,w,c
  7033  001956  0100               	movlb	0	; () banked
  7034  001958  6F96               	movwf	(??_printf+2)& (0+255),b
  7035  00195A  6B97               	clrf	(??_printf+3)& (0+255),b
  7036  00195C  0100               	movlb	0	; () banked
  7037  00195E  5194               	movf	??_printf& (0+255),w,b
  7038  001960  0100               	movlb	0	; () banked
  7039  001962  2796               	addwf	(??_printf+2)& (0+255),f,b
  7040  001964  0100               	movlb	0	; () banked
  7041  001966  5195               	movf	(??_printf+1)& (0+255),w,b
  7042  001968  0100               	movlb	0	; () banked
  7043  00196A  2397               	addwfc	(??_printf+3)& (0+255),f,b
  7044  00196C  0100               	movlb	0	; () banked
  7045  00196E  5196               	movf	(??_printf+2)& (0+255),w,b
  7046  001970  0100               	movlb	0	; () banked
  7047  001972  279F               	addwf	printf@width& (0+255),f,b
  7048  001974  0100               	movlb	0	; () banked
  7049  001976  5197               	movf	(??_printf+3)& (0+255),w,b
  7050  001978  0100               	movlb	0	; () banked
  7051  00197A  23A0               	addwfc	(printf@width+1)& (0+255),f,b
  7052                           
  7053                           ; BSR set to: 0
  7054  00197C  0100               	movlb	0	; () banked
  7055  00197E  4B8C               	infsnz	printf@f& (0+255),f,b
  7056  001980  2B8D               	incf	(printf@f+1)& (0+255),f,b
  7057                           
  7058                           ; BSR set to: 0
  7059                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  7060  001982  C08C  FFF6         	movff	printf@f,tblptrl
  7061  001986  C08D  FFF7         	movff	printf@f+1,tblptrh
  7062  00198A                     	if	0	;tblptru may be non-zero
  7063  00198A                     	endif
  7064  00198A                     	if	0	;tblptru may be non-zero
  7065  00198A                     	endif
  7066  00198A  0008               	tblrd		*
  7067  00198C  50F5               	movf	tablat,w,c
  7068  00198E  ECFE  F01A         	call	_isdigit
  7069  001992  A0D8               	btfss	status,0,c
  7070  001994  D004               	goto	l6151
  7071  001996  D7C4               	goto	l6139
  7072  001998                     l6147:
  7073                           
  7074                           ;doprnt.c: 721: flag |= 0x80;
  7075  001998  0100               	movlb	0	; () banked
  7076  00199A  8F9E               	bsf	printf@flag& (0+255),7,b
  7077                           
  7078                           ;doprnt.c: 723: break;
  7079  00199C  D019               	goto	l675
  7080  00199E                     l6151:
  7081  00199E  C08C  FFF6         	movff	printf@f,tblptrl
  7082  0019A2  C08D  FFF7         	movff	printf@f+1,tblptrh
  7083  0019A6  0100               	movlb	0	; () banked
  7084  0019A8  4B8C               	infsnz	printf@f& (0+255),f,b
  7085  0019AA  2B8D               	incf	(printf@f+1)& (0+255),f,b
  7086  0019AC                     	if	0	;tblptru may be non-zero
  7087  0019AC                     	endif
  7088  0019AC                     	if	0	;tblptru may be non-zero
  7089  0019AC                     	endif
  7090  0019AC  0008               	tblrd		*
  7091  0019AE  CFF5 F0A1          	movff	tablat,printf@c
  7092  0019B2  0100               	movlb	0	; () banked
  7093  0019B4  51A1               	movf	printf@c& (0+255),w,b
  7094                           
  7095                           ; Switch size 1, requested type "space"
  7096                           ; Number of cases is 4, Range of values is 0 to 120
  7097                           ; switch strategies available:
  7098                           ; Name         Instructions Cycles
  7099                           ; simple_byte           13     7 (average)
  7100                           ;	Chosen strategy is simple_byte
  7101  0019B6  0A00               	xorlw	0	; case 0
  7102  0019B8  B4D8               	btfsc	status,2,c
  7103  0019BA  0012               	return	
  7104  0019BC  0A64               	xorlw	100	; case 100
  7105  0019BE  B4D8               	btfsc	status,2,c
  7106  0019C0  D007               	goto	l675
  7107  0019C2  0A0D               	xorlw	13	; case 105
  7108  0019C4  B4D8               	btfsc	status,2,c
  7109  0019C6  D004               	goto	l675
  7110  0019C8  0A11               	xorlw	17	; case 120
  7111  0019CA  B4D8               	btfsc	status,2,c
  7112  0019CC  D7E5               	goto	l6147
  7113  0019CE  D13C               	goto	l6249
  7114  0019D0                     l675:
  7115                           
  7116                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  7117  0019D0  0100               	movlb	0	; () banked
  7118  0019D2  BF9E               	btfsc	printf@flag& (0+255),7,b
  7119  0019D4  D019               	goto	l6163
  7120                           
  7121                           ; BSR set to: 0
  7122                           ;doprnt.c: 1253: {
  7123                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  7124  0019D6  C099  FFD9         	movff	printf@ap,fsr2l
  7125  0019DA  C09A  FFDA         	movff	printf@ap+1,fsr2h
  7126  0019DE  CFDE F09C          	movff	postinc2,printf@val
  7127  0019E2  CFDD F09D          	movff	postdec2,printf@val+1
  7128                           
  7129                           ; BSR set to: 0
  7130  0019E6  0E02               	movlw	2
  7131  0019E8  0100               	movlb	0	; () banked
  7132  0019EA  2799               	addwf	printf@ap& (0+255),f,b
  7133  0019EC  0E00               	movlw	0
  7134  0019EE  239A               	addwfc	(printf@ap+1)& (0+255),f,b
  7135                           
  7136                           ; BSR set to: 0
  7137                           ;doprnt.c: 1261: if((int)val < 0) {
  7138  0019F0  0100               	movlb	0	; () banked
  7139  0019F2  AF9D               	btfss	(printf@val+1)& (0+255),7,b
  7140  0019F4  D053               	goto	l6197
  7141                           
  7142                           ; BSR set to: 0
  7143                           ;doprnt.c: 1262: flag |= 0x03;
  7144  0019F6  0E03               	movlw	3
  7145  0019F8  0100               	movlb	0	; () banked
  7146  0019FA  139E               	iorwf	printf@flag& (0+255),f,b
  7147                           
  7148                           ; BSR set to: 0
  7149                           ;doprnt.c: 1263: val = -val;
  7150  0019FC  0100               	movlb	0	; () banked
  7151  0019FE  6D9C               	negf	printf@val& (0+255),b
  7152  001A00  1F9D               	comf	(printf@val+1)& (0+255),f,b
  7153  001A02  B0D8               	btfsc	status,0,c
  7154  001A04  2B9D               	incf	(printf@val+1)& (0+255),f,b
  7155                           
  7156                           ; BSR set to: 0
  7157                           ;doprnt.c: 1264: }
  7158                           ;doprnt.c: 1266: }
  7159  001A06  D04A               	goto	l6197
  7160  001A08                     l6163:
  7161                           
  7162                           ; BSR set to: 0
  7163                           ;doprnt.c: 1268: else
  7164                           ;doprnt.c: 1273: {
  7165                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  7166  001A08  C099  FFD9         	movff	printf@ap,fsr2l
  7167  001A0C  C09A  FFDA         	movff	printf@ap+1,fsr2h
  7168  001A10  CFDE F09C          	movff	postinc2,printf@val
  7169  001A14  CFDD F09D          	movff	postdec2,printf@val+1
  7170                           
  7171                           ; BSR set to: 0
  7172  001A18  0E02               	movlw	2
  7173  001A1A  0100               	movlb	0	; () banked
  7174  001A1C  2799               	addwf	printf@ap& (0+255),f,b
  7175  001A1E  0E00               	movlw	0
  7176  001A20  239A               	addwfc	(printf@ap+1)& (0+255),f,b
  7177                           
  7178                           ; BSR set to: 0
  7179                           ;doprnt.c: 1287: }
  7180                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  7181  001A22  D03C               	goto	l6197
  7182  001A24                     l6167:
  7183                           
  7184                           ; BSR set to: 0
  7185                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7186  001A24  0E01               	movlw	1
  7187  001A26  0100               	movlb	0	; () banked
  7188  001A28  6FA1               	movwf	printf@c& (0+255),b
  7189  001A2A                     l6169:
  7190                           
  7191                           ; BSR set to: 0
  7192  001A2A  0E05               	movlw	5
  7193  001A2C  0100               	movlb	0	; () banked
  7194  001A2E  19A1               	xorwf	printf@c& (0+255),w,b
  7195  001A30  B4D8               	btfsc	status,2,c
  7196  001A32  D03D               	goto	l6199
  7197                           
  7198                           ; BSR set to: 0
  7199                           ;doprnt.c: 1306: if(val < dpowers[c])
  7200                           
  7201                           ; BSR set to: 0
  7202                           
  7203                           ; BSR set to: 0
  7204  001A34  0100               	movlb	0	; () banked
  7205  001A36  51A1               	movf	printf@c& (0+255),w,b
  7206  001A38  0D02               	mullw	2
  7207  001A3A  0E98               	movlw	low _dpowers
  7208  001A3C  24F3               	addwf	prodl,w,c
  7209  001A3E  6EF6               	movwf	tblptrl,c
  7210  001A40  0EFD               	movlw	high _dpowers
  7211  001A42  20F4               	addwfc	prodh,w,c
  7212  001A44  6EF7               	movwf	tblptrh,c
  7213  001A46                     	if	0	;There are less than 3 active tblptr bytes
  7214  001A46                     	endif
  7215  001A46  0009               	tblrd		*+
  7216  001A48  50F5               	movf	tablat,w,c
  7217  001A4A  0100               	movlb	0	; () banked
  7218  001A4C  5D9C               	subwf	printf@val& (0+255),w,b
  7219  001A4E  0009               	tblrd		*+
  7220  001A50  50F5               	movf	tablat,w,c
  7221  001A52  0100               	movlb	0	; () banked
  7222  001A54  599D               	subwfb	(printf@val+1)& (0+255),w,b
  7223  001A56  A0D8               	btfss	status,0,c
  7224  001A58  D02A               	goto	l6199
  7225                           
  7226                           ; BSR set to: 0
  7227                           
  7228                           ; BSR set to: 0
  7229                           
  7230                           ; BSR set to: 0
  7231                           ;doprnt.c: 1307: break;
  7232  001A5A  0100               	movlb	0	; () banked
  7233  001A5C  2BA1               	incf	printf@c& (0+255),f,b
  7234  001A5E  D7E5               	goto	l6169
  7235  001A60                     l6181:
  7236                           
  7237                           ; BSR set to: 0
  7238                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  7239  001A60  0E01               	movlw	1
  7240  001A62  0100               	movlb	0	; () banked
  7241  001A64  6FA1               	movwf	printf@c& (0+255),b
  7242  001A66                     l6183:
  7243                           
  7244                           ; BSR set to: 0
  7245  001A66  0E04               	movlw	4
  7246  001A68  0100               	movlb	0	; () banked
  7247  001A6A  19A1               	xorwf	printf@c& (0+255),w,b
  7248  001A6C  B4D8               	btfsc	status,2,c
  7249  001A6E  D01F               	goto	l6199
  7250                           
  7251                           ; BSR set to: 0
  7252                           ;doprnt.c: 1317: if(val < hexpowers[c])
  7253                           
  7254                           ; BSR set to: 0
  7255                           
  7256                           ; BSR set to: 0
  7257  001A70  0100               	movlb	0	; () banked
  7258  001A72  51A1               	movf	printf@c& (0+255),w,b
  7259  001A74  0D02               	mullw	2
  7260  001A76  0EA2               	movlw	low _hexpowers
  7261  001A78  24F3               	addwf	prodl,w,c
  7262  001A7A  6EF6               	movwf	tblptrl,c
  7263  001A7C  0EFD               	movlw	high _hexpowers
  7264  001A7E  20F4               	addwfc	prodh,w,c
  7265  001A80  6EF7               	movwf	tblptrh,c
  7266  001A82                     	if	0	;There are less than 3 active tblptr bytes
  7267  001A82                     	endif
  7268  001A82  0009               	tblrd		*+
  7269  001A84  50F5               	movf	tablat,w,c
  7270  001A86  0100               	movlb	0	; () banked
  7271  001A88  5D9C               	subwf	printf@val& (0+255),w,b
  7272  001A8A  0009               	tblrd		*+
  7273  001A8C  50F5               	movf	tablat,w,c
  7274  001A8E  0100               	movlb	0	; () banked
  7275  001A90  599D               	subwfb	(printf@val+1)& (0+255),w,b
  7276  001A92  A0D8               	btfss	status,0,c
  7277  001A94  D00C               	goto	l6199
  7278                           
  7279                           ; BSR set to: 0
  7280                           
  7281                           ; BSR set to: 0
  7282                           
  7283                           ; BSR set to: 0
  7284                           ;doprnt.c: 1318: break;
  7285  001A96  0100               	movlb	0	; () banked
  7286  001A98  2BA1               	incf	printf@c& (0+255),f,b
  7287  001A9A  D7E5               	goto	l6183
  7288  001A9C                     l6197:
  7289                           
  7290                           ; BSR set to: 0
  7291  001A9C  0100               	movlb	0	; () banked
  7292  001A9E  519E               	movf	printf@flag& (0+255),w,b
  7293  001AA0  0B80               	andlw	128
  7294                           
  7295                           ; Switch size 1, requested type "space"
  7296                           ; Number of cases is 2, Range of values is 0 to 128
  7297                           ; switch strategies available:
  7298                           ; Name         Instructions Cycles
  7299                           ; simple_byte            7     4 (average)
  7300                           ;	Chosen strategy is simple_byte
  7301  001AA2  0A00               	xorlw	0	; case 0
  7302  001AA4  B4D8               	btfsc	status,2,c
  7303  001AA6  D7BE               	goto	l6167
  7304  001AA8  0A80               	xorlw	128	; case 128
  7305  001AAA  B4D8               	btfsc	status,2,c
  7306  001AAC  D7D9               	goto	l6181
  7307  001AAE                     l6199:
  7308                           
  7309                           ; BSR set to: 0
  7310                           ;doprnt.c: 1345: if(width && flag & 0x03)
  7311  001AAE  0100               	movlb	0	; () banked
  7312  001AB0  519F               	movf	printf@width& (0+255),w,b
  7313  001AB2  0100               	movlb	0	; () banked
  7314  001AB4  11A0               	iorwf	(printf@width+1)& (0+255),w,b
  7315  001AB6  B4D8               	btfsc	status,2,c
  7316  001AB8  D00B               	goto	l6205
  7317                           
  7318                           ; BSR set to: 0
  7319  001ABA  C09E  F094         	movff	printf@flag,??_printf
  7320  001ABE  0E03               	movlw	3
  7321  001AC0  0100               	movlb	0	; () banked
  7322  001AC2  1794               	andwf	??_printf& (0+255),f,b
  7323  001AC4  B4D8               	btfsc	status,2,c
  7324  001AC6  D004               	goto	l6205
  7325                           
  7326                           ; BSR set to: 0
  7327                           ;doprnt.c: 1346: width--;
  7328  001AC8  0100               	movlb	0	; () banked
  7329  001ACA  079F               	decf	printf@width& (0+255),f,b
  7330  001ACC  A0D8               	btfss	status,0,c
  7331  001ACE  07A0               	decf	(printf@width+1)& (0+255),f,b
  7332  001AD0                     l6205:
  7333                           
  7334                           ; BSR set to: 0
  7335                           ;doprnt.c: 1381: if(width > c)
  7336  001AD0  0E80               	movlw	128
  7337  001AD2  0100               	movlb	0	; () banked
  7338  001AD4  BFA1               	btfsc	printf@c& (0+255),7,b
  7339  001AD6  0E7F               	movlw	127
  7340  001AD8  0100               	movlb	0	; () banked
  7341  001ADA  6F94               	movwf	??_printf& (0+255),b
  7342  001ADC  0100               	movlb	0	; () banked
  7343  001ADE  519F               	movf	printf@width& (0+255),w,b
  7344  001AE0  0100               	movlb	0	; () banked
  7345  001AE2  5DA1               	subwf	printf@c& (0+255),w,b
  7346  001AE4  0100               	movlb	0	; () banked
  7347  001AE6  51A0               	movf	(printf@width+1)& (0+255),w,b
  7348  001AE8  0A80               	xorlw	128
  7349  001AEA  0100               	movlb	0	; () banked
  7350  001AEC  5994               	subwfb	??_printf& (0+255),w,b
  7351  001AEE  B0D8               	btfsc	status,0,c
  7352  001AF0  D00B               	goto	l6209
  7353                           
  7354                           ; BSR set to: 0
  7355                           ;doprnt.c: 1382: width -= c;
  7356  001AF2  0100               	movlb	0	; () banked
  7357  001AF4  51A1               	movf	printf@c& (0+255),w,b
  7358  001AF6  0100               	movlb	0	; () banked
  7359  001AF8  5F9F               	subwf	printf@width& (0+255),f,b
  7360  001AFA  0E00               	movlw	0
  7361  001AFC  0100               	movlb	0	; () banked
  7362  001AFE  BFA1               	btfsc	printf@c& (0+255),7,b
  7363  001B00  0EFF               	movlw	255
  7364  001B02  0100               	movlb	0	; () banked
  7365  001B04  5BA0               	subwfb	(printf@width+1)& (0+255),f,b
  7366  001B06  D005               	goto	l6211
  7367  001B08                     l6209:
  7368                           
  7369                           ; BSR set to: 0
  7370                           ;doprnt.c: 1383: else
  7371                           ;doprnt.c: 1384: width = 0;
  7372  001B08  0E00               	movlw	0
  7373  001B0A  0100               	movlb	0	; () banked
  7374  001B0C  6FA0               	movwf	(printf@width+1)& (0+255),b
  7375  001B0E  0E00               	movlw	0
  7376  001B10  6F9F               	movwf	printf@width& (0+255),b
  7377  001B12                     l6211:
  7378                           
  7379                           ; BSR set to: 0
  7380                           ;doprnt.c: 1387: if(flag & 0x04) {
  7381  001B12  0100               	movlb	0	; () banked
  7382  001B14  A59E               	btfss	printf@flag& (0+255),2,b
  7383  001B16  D018               	goto	l6223
  7384                           
  7385                           ; BSR set to: 0
  7386                           ;doprnt.c: 1392: if(flag & 0x03)
  7387  001B18  C09E  F094         	movff	printf@flag,??_printf
  7388  001B1C  0E03               	movlw	3
  7389  001B1E  0100               	movlb	0	; () banked
  7390  001B20  1794               	andwf	??_printf& (0+255),f,b
  7391  001B22  B4D8               	btfsc	status,2,c
  7392  001B24  D003               	goto	l6217
  7393                           
  7394                           ; BSR set to: 0
  7395                           ;doprnt.c: 1393: (putch('-') );
  7396  001B26  0E2D               	movlw	45
  7397  001B28  ECD7  F01B         	call	_putch
  7398  001B2C                     l6217:
  7399                           
  7400                           ;doprnt.c: 1415: if(width)
  7401  001B2C  0100               	movlb	0	; () banked
  7402  001B2E  519F               	movf	printf@width& (0+255),w,b
  7403  001B30  0100               	movlb	0	; () banked
  7404  001B32  11A0               	iorwf	(printf@width+1)& (0+255),w,b
  7405  001B34  B4D8               	btfsc	status,2,c
  7406  001B36  D025               	goto	l6233
  7407                           
  7408                           ; BSR set to: 0
  7409                           ;doprnt.c: 1417: (putch('0') );
  7410                           
  7411                           ; BSR set to: 0
  7412                           
  7413                           ;doprnt.c: 1416: do
  7414  001B38  0E30               	movlw	48
  7415  001B3A  ECD7  F01B         	call	_putch
  7416                           
  7417                           ;doprnt.c: 1418: while(--width);
  7418  001B3E  0100               	movlb	0	; () banked
  7419  001B40  079F               	decf	printf@width& (0+255),f,b
  7420  001B42  A0D8               	btfss	status,0,c
  7421  001B44  07A0               	decf	(printf@width+1)& (0+255),f,b
  7422  001B46  D7F2               	goto	l6217
  7423  001B48                     l6223:
  7424                           
  7425                           ; BSR set to: 0
  7426                           ;doprnt.c: 1422: {
  7427                           ;doprnt.c: 1424: if(width
  7428                           ;doprnt.c: 1428: )
  7429  001B48  0100               	movlb	0	; () banked
  7430  001B4A  519F               	movf	printf@width& (0+255),w,b
  7431  001B4C  0100               	movlb	0	; () banked
  7432  001B4E  11A0               	iorwf	(printf@width+1)& (0+255),w,b
  7433  001B50  B4D8               	btfsc	status,2,c
  7434  001B52  D00D               	goto	l6229
  7435  001B54                     l6225:
  7436                           
  7437                           ; BSR set to: 0
  7438                           ;doprnt.c: 1430: (putch(' ') );
  7439  001B54  0E20               	movlw	32
  7440  001B56  ECD7  F01B         	call	_putch
  7441                           
  7442                           ;doprnt.c: 1431: while(--width);
  7443  001B5A  0100               	movlb	0	; () banked
  7444  001B5C  079F               	decf	printf@width& (0+255),f,b
  7445  001B5E  A0D8               	btfss	status,0,c
  7446  001B60  07A0               	decf	(printf@width+1)& (0+255),f,b
  7447  001B62  0100               	movlb	0	; () banked
  7448  001B64  519F               	movf	printf@width& (0+255),w,b
  7449  001B66  0100               	movlb	0	; () banked
  7450  001B68  11A0               	iorwf	(printf@width+1)& (0+255),w,b
  7451  001B6A  A4D8               	btfss	status,2,c
  7452  001B6C  D7F3               	goto	l6225
  7453  001B6E                     l6229:
  7454                           
  7455                           ; BSR set to: 0
  7456                           ;doprnt.c: 1438: if(flag & 0x03)
  7457  001B6E  C09E  F094         	movff	printf@flag,??_printf
  7458  001B72  0E03               	movlw	3
  7459  001B74  0100               	movlb	0	; () banked
  7460  001B76  1794               	andwf	??_printf& (0+255),f,b
  7461  001B78  B4D8               	btfsc	status,2,c
  7462  001B7A  D003               	goto	l6233
  7463                           
  7464                           ; BSR set to: 0
  7465                           ;doprnt.c: 1439: (putch('-') );
  7466  001B7C  0E2D               	movlw	45
  7467  001B7E  ECD7  F01B         	call	_putch
  7468  001B82                     l6233:
  7469                           
  7470                           ;doprnt.c: 1469: }
  7471                           ;doprnt.c: 1472: prec = c;
  7472  001B82  C0A1  F09B         	movff	printf@c,printf@prec
  7473                           
  7474                           ;doprnt.c: 1474: while(prec--) {
  7475  001B86  D05A               	goto	l6247
  7476  001B88                     l6235:
  7477                           
  7478                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7479  001B88  0100               	movlb	0	; () banked
  7480  001B8A  519B               	movf	printf@prec& (0+255),w,b
  7481  001B8C  0D02               	mullw	2
  7482  001B8E  0E98               	movlw	low _dpowers
  7483  001B90  24F3               	addwf	prodl,w,c
  7484  001B92  6EF6               	movwf	tblptrl,c
  7485  001B94  0EFD               	movlw	high _dpowers
  7486  001B96  20F4               	addwfc	prodh,w,c
  7487  001B98  6EF7               	movwf	tblptrh,c
  7488  001B9A                     	if	0	;There are less than 3 active tblptr bytes
  7489  001B9A                     	endif
  7490  001B9A  0009               	tblrd		*+
  7491  001B9C  CFF5 F082          	movff	tablat,___lwdiv@divisor
  7492  001BA0  000A               	tblrd		*-
  7493  001BA2  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
  7494  001BA6  C09C  F080         	movff	printf@val,___lwdiv@dividend
  7495  001BAA  C09D  F081         	movff	printf@val+1,___lwdiv@dividend+1
  7496  001BAE  ECC2  F018         	call	___lwdiv	;wreg free
  7497  001BB2  C080  F087         	movff	?___lwdiv,___lwmod@dividend
  7498  001BB6  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
  7499  001BBA  0E00               	movlw	0
  7500  001BBC  0100               	movlb	0	; () banked
  7501  001BBE  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
  7502  001BC0  0E0A               	movlw	10
  7503  001BC2  6F89               	movwf	___lwmod@divisor& (0+255),b
  7504  001BC4  EC69  F019         	call	___lwmod	;wreg free
  7505  001BC8  0100               	movlb	0	; () banked
  7506  001BCA  5187               	movf	?___lwmod& (0+255),w,b
  7507  001BCC  0F30               	addlw	48
  7508  001BCE  0100               	movlb	0	; () banked
  7509  001BD0  6FA1               	movwf	printf@c& (0+255),b
  7510                           
  7511                           ;doprnt.c: 1491: break;
  7512  001BD2  D030               	goto	l6245
  7513  001BD4                     l6237:
  7514                           
  7515                           ; BSR set to: 0
  7516                           ;doprnt.c: 1499: {
  7517                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  7518  001BD4  C09C  F080         	movff	printf@val,___lwdiv@dividend
  7519  001BD8  C09D  F081         	movff	printf@val+1,___lwdiv@dividend+1
  7520  001BDC  0100               	movlb	0	; () banked
  7521  001BDE  519B               	movf	printf@prec& (0+255),w,b
  7522  001BE0  0D02               	mullw	2
  7523  001BE2  0EA2               	movlw	low _hexpowers
  7524  001BE4  24F3               	addwf	prodl,w,c
  7525  001BE6  6EF6               	movwf	tblptrl,c
  7526  001BE8  0EFD               	movlw	high _hexpowers
  7527  001BEA  20F4               	addwfc	prodh,w,c
  7528  001BEC  6EF7               	movwf	tblptrh,c
  7529  001BEE                     	if	0	;There are less than 3 active tblptr bytes
  7530  001BEE                     	endif
  7531  001BEE  0009               	tblrd		*+
  7532  001BF0  CFF5 F082          	movff	tablat,___lwdiv@divisor
  7533  001BF4  000A               	tblrd		*-
  7534  001BF6  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
  7535  001BFA  ECC2  F018         	call	___lwdiv	;wreg free
  7536  001BFE  0100               	movlb	0	; () banked
  7537  001C00  5180               	movf	?___lwdiv& (0+255),w,b
  7538  001C02  0B0F               	andlw	15
  7539  001C04  0100               	movlb	0	; () banked
  7540  001C06  6F98               	movwf	printf@idx& (0+255),b
  7541                           
  7542                           ; BSR set to: 0
  7543                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  7544  001C08  0100               	movlb	0	; () banked
  7545  001C0A  5198               	movf	printf@idx& (0+255),w,b
  7546  001C0C  0D01               	mullw	1
  7547  001C0E  0E88               	movlw	low STR_40
  7548  001C10  24F3               	addwf	prodl,w,c
  7549  001C12  6EF6               	movwf	tblptrl,c
  7550  001C14  0EFE               	movlw	high STR_40
  7551  001C16  20F4               	addwfc	prodh,w,c
  7552  001C18  6EF7               	movwf	tblptrh,c
  7553  001C1A                     	if	0	;There are less than 3 active tblptr bytes
  7554  001C1A                     	endif
  7555  001C1A  0008               	tblrd		*
  7556  001C1C  CFF5 F0A1          	movff	tablat,printf@c
  7557                           
  7558                           ; BSR set to: 0
  7559                           ;doprnt.c: 1523: }
  7560                           
  7561                           ;doprnt.c: 1508: }
  7562                           ;doprnt.c: 1510: break;
  7563  001C20  D009               	goto	l6245
  7564  001C22                     l6243:
  7565  001C22  0100               	movlb	0	; () banked
  7566  001C24  519E               	movf	printf@flag& (0+255),w,b
  7567  001C26  0B80               	andlw	128
  7568                           
  7569                           ; Switch size 1, requested type "space"
  7570                           ; Number of cases is 2, Range of values is 0 to 128
  7571                           ; switch strategies available:
  7572                           ; Name         Instructions Cycles
  7573                           ; simple_byte            7     4 (average)
  7574                           ;	Chosen strategy is simple_byte
  7575  001C28  0A00               	xorlw	0	; case 0
  7576  001C2A  B4D8               	btfsc	status,2,c
  7577  001C2C  D7AD               	goto	l6235
  7578  001C2E  0A80               	xorlw	128	; case 128
  7579  001C30  B4D8               	btfsc	status,2,c
  7580  001C32  D7D0               	goto	l6237
  7581  001C34                     l6245:
  7582                           
  7583                           ; BSR set to: 0
  7584                           ;doprnt.c: 1524: (putch(c) );
  7585  001C34  0100               	movlb	0	; () banked
  7586  001C36  51A1               	movf	printf@c& (0+255),w,b
  7587  001C38  ECD7  F01B         	call	_putch
  7588  001C3C                     l6247:
  7589  001C3C  0100               	movlb	0	; () banked
  7590  001C3E  079B               	decf	printf@prec& (0+255),f,b
  7591  001C40  0100               	movlb	0	; () banked
  7592  001C42  299B               	incf	printf@prec& (0+255),w,b
  7593  001C44  A4D8               	btfss	status,2,c
  7594  001C46  D7ED               	goto	l6243
  7595  001C48                     l6249:
  7596  001C48  C08C  FFF6         	movff	printf@f,tblptrl
  7597  001C4C  C08D  FFF7         	movff	printf@f+1,tblptrh
  7598  001C50  0100               	movlb	0	; () banked
  7599  001C52  4B8C               	infsnz	printf@f& (0+255),f,b
  7600  001C54  2B8D               	incf	(printf@f+1)& (0+255),f,b
  7601  001C56                     	if	0	;tblptru may be non-zero
  7602  001C56                     	endif
  7603  001C56                     	if	0	;tblptru may be non-zero
  7604  001C56                     	endif
  7605  001C56  0008               	tblrd		*
  7606  001C58  CFF5 F0A1          	movff	tablat,printf@c
  7607  001C5C  0100               	movlb	0	; () banked
  7608  001C5E  51A1               	movf	printf@c& (0+255),w,b
  7609  001C60  B4D8               	btfsc	status,2,c
  7610  001C62  0012               	return	
  7611  001C64  D62D               	goto	l6123
  7612  001C66                     __end_of_printf:
  7613                           	opt stack 0
  7614                           tblptru	equ	0xFF8
  7615                           tblptrh	equ	0xFF7
  7616                           tblptrl	equ	0xFF6
  7617                           tablat	equ	0xFF5
  7618                           prodh	equ	0xFF4
  7619                           prodl	equ	0xFF3
  7620                           intcon	equ	0xFF2
  7621                           intcon2	equ	0xFF1
  7622                           intcon3	equ	0xFF0
  7623                           postinc0	equ	0xFEE
  7624                           wreg	equ	0xFE8
  7625                           postdec1	equ	0xFE5
  7626                           fsr1l	equ	0xFE1
  7627                           indf2	equ	0xFDF
  7628                           postinc2	equ	0xFDE
  7629                           postdec2	equ	0xFDD
  7630                           fsr2h	equ	0xFDA
  7631                           fsr2l	equ	0xFD9
  7632                           status	equ	0xFD8
  7633                           
  7634 ;; *************** function _putch *****************
  7635 ;; Defined at:
  7636 ;;		line 23 in file "../lcd.c"
  7637 ;; Parameters:    Size  Location     Type
  7638 ;;  data            1    wreg     unsigned char 
  7639 ;; Auto vars:     Size  Location     Type
  7640 ;;  data            1    2[BANK0 ] unsigned char 
  7641 ;; Return value:  Size  Location     Type
  7642 ;;                  1    wreg      void 
  7643 ;; Registers used:
  7644 ;;		wreg, status,2, status,0, cstack
  7645 ;; Tracked objects:
  7646 ;;		On entry : 0/0
  7647 ;;		On exit  : 0/0
  7648 ;;		Unchanged: 0/0
  7649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7650 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7651 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7652 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7653 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7654 ;;Total ram usage:        1 bytes
  7655 ;; Hardware stack levels used:    1
  7656 ;; Hardware stack levels required when called:    6
  7657 ;; This function calls:
  7658 ;;		_lcdNibble
  7659 ;; This function is called by:
  7660 ;;		_printf
  7661 ;; This function uses a non-reentrant model
  7662 ;;
  7663                           
  7664                           	psect	text10
  7665  0037AE                     __ptext10:
  7666                           	opt stack 0
  7667  0037AE                     _putch:
  7668                           	opt stack 22
  7669                           
  7670                           ;incstack = 0
  7671                           ;putch@data stored from wreg
  7672  0037AE  0100               	movlb	0	; () banked
  7673  0037B0  6F82               	movwf	putch@data& (0+255),b
  7674                           
  7675                           ;lcd.c: 24: LATDbits.LATD2 = 1;
  7676  0037B2  848C               	bsf	3980,2,c	;volatile
  7677                           
  7678                           ;lcd.c: 25: lcdNibble(data);
  7679  0037B4  0100               	movlb	0	; () banked
  7680  0037B6  5182               	movf	putch@data& (0+255),w,b
  7681  0037B8  EC9A  F019         	call	_lcdNibble
  7682  0037BC  0012               	return		;funcret
  7683  0037BE                     __end_of_putch:
  7684                           	opt stack 0
  7685                           tblptru	equ	0xFF8
  7686                           tblptrh	equ	0xFF7
  7687                           tblptrl	equ	0xFF6
  7688                           tablat	equ	0xFF5
  7689                           prodh	equ	0xFF4
  7690                           prodl	equ	0xFF3
  7691                           intcon	equ	0xFF2
  7692                           intcon2	equ	0xFF1
  7693                           intcon3	equ	0xFF0
  7694                           postinc0	equ	0xFEE
  7695                           wreg	equ	0xFE8
  7696                           postdec1	equ	0xFE5
  7697                           fsr1l	equ	0xFE1
  7698                           indf2	equ	0xFDF
  7699                           postinc2	equ	0xFDE
  7700                           postdec2	equ	0xFDD
  7701                           fsr2h	equ	0xFDA
  7702                           fsr2l	equ	0xFD9
  7703                           status	equ	0xFD8
  7704                           
  7705 ;; *************** function _isdigit *****************
  7706 ;; Defined at:
  7707 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  7708 ;; Parameters:    Size  Location     Type
  7709 ;;  c               1    wreg     unsigned char 
  7710 ;; Auto vars:     Size  Location     Type
  7711 ;;  c               1    2[BANK0 ] unsigned char 
  7712 ;; Return value:  Size  Location     Type
  7713 ;;		None               void
  7714 ;; Registers used:
  7715 ;;		wreg, status,2, status,0
  7716 ;; Tracked objects:
  7717 ;;		On entry : 0/0
  7718 ;;		On exit  : 0/0
  7719 ;;		Unchanged: 0/0
  7720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7722 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7723 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7724 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7725 ;;Total ram usage:        3 bytes
  7726 ;; Hardware stack levels used:    1
  7727 ;; Hardware stack levels required when called:    5
  7728 ;; This function calls:
  7729 ;;		Nothing
  7730 ;; This function is called by:
  7731 ;;		_printf
  7732 ;; This function uses a non-reentrant model
  7733 ;;
  7734                           
  7735                           	psect	text11
  7736  0035FC                     __ptext11:
  7737                           	opt stack 0
  7738  0035FC                     _isdigit:
  7739                           	opt stack 23
  7740                           
  7741                           ;incstack = 0
  7742                           ;isdigit@c stored from wreg
  7743  0035FC  0100               	movlb	0	; () banked
  7744  0035FE  6F82               	movwf	isdigit@c& (0+255),b
  7745  003600  0E00               	movlw	0
  7746  003602  0100               	movlb	0	; () banked
  7747  003604  6F81               	movwf	_isdigit$1231& (0+255),b
  7748                           
  7749                           ; BSR set to: 0
  7750  003606  0E3A               	movlw	58
  7751  003608  0100               	movlb	0	; () banked
  7752  00360A  6182               	cpfslt	isdigit@c& (0+255),b
  7753  00360C  D007               	goto	l6057
  7754                           
  7755                           ; BSR set to: 0
  7756  00360E  0E2F               	movlw	47
  7757  003610  0100               	movlb	0	; () banked
  7758  003612  6582               	cpfsgt	isdigit@c& (0+255),b
  7759  003614  D003               	goto	l6057
  7760                           
  7761                           ; BSR set to: 0
  7762  003616  0E01               	movlw	1
  7763  003618  0100               	movlb	0	; () banked
  7764  00361A  6F81               	movwf	_isdigit$1231& (0+255),b
  7765  00361C                     l6057:
  7766                           
  7767                           ; BSR set to: 0
  7768  00361C  C081  F080         	movff	_isdigit$1231,??_isdigit
  7769  003620  0100               	movlb	0	; () banked
  7770  003622  3180               	rrcf	??_isdigit& (0+255),w,b
  7771  003624  0012               	return	
  7772  003626                     __end_of_isdigit:
  7773                           	opt stack 0
  7774                           tblptru	equ	0xFF8
  7775                           tblptrh	equ	0xFF7
  7776                           tblptrl	equ	0xFF6
  7777                           tablat	equ	0xFF5
  7778                           prodh	equ	0xFF4
  7779                           prodl	equ	0xFF3
  7780                           intcon	equ	0xFF2
  7781                           intcon2	equ	0xFF1
  7782                           intcon3	equ	0xFF0
  7783                           postinc0	equ	0xFEE
  7784                           wreg	equ	0xFE8
  7785                           postdec1	equ	0xFE5
  7786                           fsr1l	equ	0xFE1
  7787                           indf2	equ	0xFDF
  7788                           postinc2	equ	0xFDE
  7789                           postdec2	equ	0xFDD
  7790                           fsr2h	equ	0xFDA
  7791                           fsr2l	equ	0xFD9
  7792                           status	equ	0xFD8
  7793                           
  7794 ;; *************** function ___wmul *****************
  7795 ;; Defined at:
  7796 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  7797 ;; Parameters:    Size  Location     Type
  7798 ;;  multiplier      2    0[BANK0 ] unsigned int 
  7799 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  7800 ;; Auto vars:     Size  Location     Type
  7801 ;;  product         2    4[BANK0 ] unsigned int 
  7802 ;; Return value:  Size  Location     Type
  7803 ;;                  2    0[BANK0 ] unsigned int 
  7804 ;; Registers used:
  7805 ;;		wreg, status,2, status,0, prodl, prodh
  7806 ;; Tracked objects:
  7807 ;;		On entry : 0/0
  7808 ;;		On exit  : 0/0
  7809 ;;		Unchanged: 0/0
  7810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7811 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7812 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7813 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7814 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7815 ;;Total ram usage:        6 bytes
  7816 ;; Hardware stack levels used:    1
  7817 ;; Hardware stack levels required when called:    5
  7818 ;; This function calls:
  7819 ;;		Nothing
  7820 ;; This function is called by:
  7821 ;;		_printf
  7822 ;; This function uses a non-reentrant model
  7823 ;;
  7824                           
  7825                           	psect	text12
  7826  003598                     __ptext12:
  7827                           	opt stack 0
  7828  003598                     ___wmul:
  7829                           	opt stack 23
  7830                           
  7831                           ; BSR set to: 0
  7832                           ;incstack = 0
  7833  003598  0100               	movlb	0	; () banked
  7834  00359A  5180               	movf	___wmul@multiplier& (0+255),w,b
  7835  00359C  0100               	movlb	0	; () banked
  7836  00359E  0382               	mulwf	___wmul@multiplicand& (0+255),b
  7837  0035A0  CFF3 F084          	movff	prodl,___wmul@product
  7838  0035A4  CFF4 F085          	movff	prodh,___wmul@product+1
  7839  0035A8  0100               	movlb	0	; () banked
  7840  0035AA  5180               	movf	___wmul@multiplier& (0+255),w,b
  7841  0035AC  0100               	movlb	0	; () banked
  7842  0035AE  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  7843  0035B0  50F3               	movf	prodl,w,c
  7844  0035B2  0100               	movlb	0	; () banked
  7845  0035B4  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  7846  0035B6  0100               	movlb	0	; () banked
  7847  0035B8  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
  7848  0035BA  0100               	movlb	0	; () banked
  7849  0035BC  0382               	mulwf	___wmul@multiplicand& (0+255),b
  7850  0035BE  50F3               	movf	prodl,w,c
  7851  0035C0  0100               	movlb	0	; () banked
  7852  0035C2  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  7853                           
  7854                           ; BSR set to: 0
  7855  0035C4  C084  F080         	movff	___wmul@product,?___wmul
  7856  0035C8  C085  F081         	movff	___wmul@product+1,?___wmul+1
  7857  0035CC  0012               	return	
  7858  0035CE                     __end_of___wmul:
  7859                           	opt stack 0
  7860                           tblptru	equ	0xFF8
  7861                           tblptrh	equ	0xFF7
  7862                           tblptrl	equ	0xFF6
  7863                           tablat	equ	0xFF5
  7864                           prodh	equ	0xFF4
  7865                           prodl	equ	0xFF3
  7866                           intcon	equ	0xFF2
  7867                           intcon2	equ	0xFF1
  7868                           intcon3	equ	0xFF0
  7869                           postinc0	equ	0xFEE
  7870                           wreg	equ	0xFE8
  7871                           postdec1	equ	0xFE5
  7872                           fsr1l	equ	0xFE1
  7873                           indf2	equ	0xFDF
  7874                           postinc2	equ	0xFDE
  7875                           postdec2	equ	0xFDD
  7876                           fsr2h	equ	0xFDA
  7877                           fsr2l	equ	0xFD9
  7878                           status	equ	0xFD8
  7879                           
  7880 ;; *************** function _next_address *****************
  7881 ;; Defined at:
  7882 ;;		line 794 in file "../main.c"
  7883 ;; Parameters:    Size  Location     Type
  7884 ;;  address         2    0[BANK0 ] unsigned int 
  7885 ;; Auto vars:     Size  Location     Type
  7886 ;;		None
  7887 ;; Return value:  Size  Location     Type
  7888 ;;                  2    0[BANK0 ] unsigned int 
  7889 ;; Registers used:
  7890 ;;		wreg, status,2, status,0
  7891 ;; Tracked objects:
  7892 ;;		On entry : 0/0
  7893 ;;		On exit  : 0/0
  7894 ;;		Unchanged: 0/0
  7895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7896 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7897 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7898 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7899 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7900 ;;Total ram usage:        2 bytes
  7901 ;; Hardware stack levels used:    1
  7902 ;; Hardware stack levels required when called:    5
  7903 ;; This function calls:
  7904 ;;		Nothing
  7905 ;; This function is called by:
  7906 ;;		_stopOperation
  7907 ;;		_show_log
  7908 ;; This function uses a non-reentrant model
  7909 ;;
  7910                           
  7911                           	psect	text13
  7912  003748                     __ptext13:
  7913                           	opt stack 0
  7914  003748                     _next_address:
  7915                           	opt stack 24
  7916                           
  7917                           ;main.c: 795: return address + 8;
  7918                           
  7919                           ; BSR set to: 0
  7920                           ;incstack = 0
  7921  003748  0E08               	movlw	8
  7922  00374A  0100               	movlb	0	; () banked
  7923  00374C  2580               	addwf	next_address@address& (0+255),w,b
  7924  00374E  0100               	movlb	0	; () banked
  7925  003750  6F80               	movwf	?_next_address& (0+255),b
  7926  003752  0E00               	movlw	0
  7927  003754  0100               	movlb	0	; () banked
  7928  003756  2181               	addwfc	(next_address@address+1)& (0+255),w,b
  7929  003758  0100               	movlb	0	; () banked
  7930  00375A  6F81               	movwf	(?_next_address+1)& (0+255),b
  7931  00375C  0012               	return	
  7932  00375E                     __end_of_next_address:
  7933                           	opt stack 0
  7934                           tblptru	equ	0xFF8
  7935                           tblptrh	equ	0xFF7
  7936                           tblptrl	equ	0xFF6
  7937                           tablat	equ	0xFF5
  7938                           prodh	equ	0xFF4
  7939                           prodl	equ	0xFF3
  7940                           intcon	equ	0xFF2
  7941                           intcon2	equ	0xFF1
  7942                           intcon3	equ	0xFF0
  7943                           postinc0	equ	0xFEE
  7944                           wreg	equ	0xFE8
  7945                           postdec1	equ	0xFE5
  7946                           fsr1l	equ	0xFE1
  7947                           indf2	equ	0xFDF
  7948                           postinc2	equ	0xFDE
  7949                           postdec2	equ	0xFDD
  7950                           fsr2h	equ	0xFDA
  7951                           fsr2l	equ	0xFD9
  7952                           status	equ	0xFD8
  7953                           
  7954 ;; *************** function _Eeprom_ReadByte *****************
  7955 ;; Defined at:
  7956 ;;		line 750 in file "../main.c"
  7957 ;; Parameters:    Size  Location     Type
  7958 ;;  address         2    0[BANK0 ] unsigned int 
  7959 ;; Auto vars:     Size  Location     Type
  7960 ;;		None
  7961 ;; Return value:  Size  Location     Type
  7962 ;;                  1    wreg      unsigned char 
  7963 ;; Registers used:
  7964 ;;		wreg, status,2
  7965 ;; Tracked objects:
  7966 ;;		On entry : 0/0
  7967 ;;		On exit  : 0/0
  7968 ;;		Unchanged: 0/0
  7969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7970 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7971 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7972 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7973 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7974 ;;Total ram usage:        2 bytes
  7975 ;; Hardware stack levels used:    1
  7976 ;; Hardware stack levels required when called:    5
  7977 ;; This function calls:
  7978 ;;		Nothing
  7979 ;; This function is called by:
  7980 ;;		_stopOperation
  7981 ;;		_show_log
  7982 ;; This function uses a non-reentrant model
  7983 ;;
  7984                           
  7985                           	psect	text14
  7986  003730                     __ptext14:
  7987                           	opt stack 0
  7988  003730                     _Eeprom_ReadByte:
  7989                           	opt stack 24
  7990                           
  7991                           ;main.c: 752: EEADRH = (uint8_t)(address >> 8);
  7992                           
  7993                           ; BSR set to: 0
  7994                           ;incstack = 0
  7995  003730  0100               	movlb	0	; () banked
  7996  003732  5181               	movf	(Eeprom_ReadByte@address+1)& (0+255),w,b
  7997  003734  6EAA               	movwf	4010,c	;volatile
  7998                           
  7999                           ; BSR set to: 0
  8000                           ;main.c: 753: EEADR = (uint8_t)address;
  8001  003736  C080  FFA9         	movff	Eeprom_ReadByte@address,4009	;volatile
  8002                           
  8003                           ; BSR set to: 0
  8004                           ;main.c: 755: EECON1bits.EEPGD = 0;
  8005  00373A  9EA6               	bcf	4006,7,c	;volatile
  8006                           
  8007                           ; BSR set to: 0
  8008                           ;main.c: 756: EECON1bits.CFGS = 0;
  8009  00373C  9CA6               	bcf	4006,6,c	;volatile
  8010                           
  8011                           ; BSR set to: 0
  8012                           ;main.c: 757: EECON1bits.RD = 1;
  8013  00373E  80A6               	bsf	4006,0,c	;volatile
  8014  003740                     l514:
  8015  003740  B0A6               	btfsc	4006,0,c	;volatile
  8016  003742  D7FE               	goto	l514
  8017                           
  8018                           ;main.c: 763: return EEDATA;
  8019  003744  50A8               	movf	4008,w,c	;volatile
  8020  003746  0012               	return	
  8021  003748                     __end_of_Eeprom_ReadByte:
  8022                           	opt stack 0
  8023                           tblptru	equ	0xFF8
  8024                           tblptrh	equ	0xFF7
  8025                           tblptrl	equ	0xFF6
  8026                           tablat	equ	0xFF5
  8027                           prodh	equ	0xFF4
  8028                           prodl	equ	0xFF3
  8029                           intcon	equ	0xFF2
  8030                           intcon2	equ	0xFF1
  8031                           intcon3	equ	0xFF0
  8032                           postinc0	equ	0xFEE
  8033                           wreg	equ	0xFE8
  8034                           postdec1	equ	0xFE5
  8035                           fsr1l	equ	0xFE1
  8036                           indf2	equ	0xFDF
  8037                           postinc2	equ	0xFDE
  8038                           postdec2	equ	0xFDD
  8039                           fsr2h	equ	0xFDA
  8040                           fsr2l	equ	0xFD9
  8041                           status	equ	0xFD8
  8042                           
  8043 ;; *************** function _logPC *****************
  8044 ;; Defined at:
  8045 ;;		line 858 in file "../main.c"
  8046 ;; Parameters:    Size  Location     Type
  8047 ;;		None
  8048 ;; Auto vars:     Size  Location     Type
  8049 ;;  i               2   58[BANK1 ] unsigned int 
  8050 ;;  i               2   56[BANK1 ] unsigned int 
  8051 ;;  i               2   54[BANK1 ] unsigned int 
  8052 ;;  i               2   52[BANK1 ] unsigned int 
  8053 ;;  i               2   50[BANK1 ] unsigned int 
  8054 ;;  i               2   48[BANK1 ] unsigned int 
  8055 ;;  i               2   46[BANK1 ] unsigned int 
  8056 ;;  i               2   44[BANK1 ] unsigned int 
  8057 ;;  i               2   42[BANK1 ] unsigned int 
  8058 ;;  i               2   40[BANK1 ] unsigned int 
  8059 ;;  i               2   38[BANK1 ] unsigned int 
  8060 ;;  i               2   36[BANK1 ] unsigned int 
  8061 ;;  i               2   34[BANK1 ] unsigned int 
  8062 ;;  i               2   32[BANK1 ] unsigned int 
  8063 ;;  started_time   19    0[BANK1 ] unsigned char [19]
  8064 ;;  runTime         3   19[BANK1 ] unsigned char [3]
  8065 ;;  numberTotal     2   30[BANK1 ] unsigned char [2]
  8066 ;;  numberDrain     2   28[BANK1 ] unsigned char [2]
  8067 ;;  number9V        2   26[BANK1 ] unsigned char [2]
  8068 ;;  numberC         2   24[BANK1 ] unsigned char [2]
  8069 ;;  numberAA        2   22[BANK1 ] unsigned char [2]
  8070 ;; Return value:  Size  Location     Type
  8071 ;;                  1    wreg      void 
  8072 ;; Registers used:
  8073 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8074 ;; Tracked objects:
  8075 ;;		On entry : 0/0
  8076 ;;		On exit  : 0/0
  8077 ;;		Unchanged: 0/0
  8078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8080 ;;      Locals:         0       0      60       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8081 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8082 ;;      Totals:         0       2      60       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8083 ;;Total ram usage:       62 bytes
  8084 ;; Hardware stack levels used:    1
  8085 ;; Hardware stack levels required when called:    7
  8086 ;; This function calls:
  8087 ;;		_I2C_Master_Start
  8088 ;;		_I2C_Master_Stop
  8089 ;;		_I2C_Master_Write
  8090 ;;		_getChar
  8091 ;;		_getHundreds
  8092 ;;		_getOnes
  8093 ;;		_getTens
  8094 ;; This function is called by:
  8095 ;;		_main
  8096 ;; This function uses a non-reentrant model
  8097 ;;
  8098                           
  8099                           	psect	text15
  8100  000D54                     __ptext15:
  8101                           	opt stack 0
  8102  000D54                     _logPC:
  8103                           	opt stack 23
  8104                           
  8105                           ;main.c: 860: for(unsigned int i = 0; i < 31; i++) {
  8106                           
  8107                           ;incstack = 0
  8108  000D54  0E00               	movlw	0
  8109  000D56  0101               	movlb	1	; () banked
  8110  000D58  6F21               	movwf	(logPC@i+1)& (0+255),b
  8111  000D5A  0E00               	movlw	0
  8112  000D5C  6F20               	movwf	logPC@i& (0+255),b
  8113  000D5E                     l6787:
  8114                           
  8115                           ; BSR set to: 1
  8116  000D5E  0101               	movlb	1	; () banked
  8117  000D60  5121               	movf	(logPC@i+1)& (0+255),w,b
  8118  000D62  E122               	bnz	l6801
  8119  000D64  0E1F               	movlw	31
  8120  000D66  0101               	movlb	1	; () banked
  8121  000D68  5D20               	subwf	logPC@i& (0+255),w,b
  8122  000D6A  B0D8               	btfsc	status,0,c
  8123  000D6C  D01D               	goto	l6801
  8124                           
  8125                           ; BSR set to: 1
  8126                           ;main.c: 861: I2C_Master_Start();
  8127                           
  8128                           ; BSR set to: 1
  8129                           
  8130                           ; BSR set to: 1
  8131  000D6E  EC13  F01C         	call	_I2C_Master_Start	;wreg free
  8132                           
  8133                           ;main.c: 862: I2C_Master_Write(0b00010000);
  8134  000D72  0E00               	movlw	0
  8135  000D74  0100               	movlb	0	; () banked
  8136  000D76  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8137  000D78  0E10               	movlw	16
  8138  000D7A  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8139  000D7C  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  8140                           
  8141                           ;main.c: 863: I2C_Master_Write(timeHeader[i]);
  8142  000D80  0E48               	movlw	low _timeHeader
  8143  000D82  0101               	movlb	1	; () banked
  8144  000D84  2520               	addwf	logPC@i& (0+255),w,b
  8145  000D86  6EF6               	movwf	tblptrl,c
  8146  000D88  0EFD               	movlw	high _timeHeader
  8147  000D8A  2121               	addwfc	(logPC@i+1)& (0+255),w,b
  8148  000D8C  6EF7               	movwf	tblptrh,c
  8149  000D8E                     	if	0	;There are less than 3 active tblptr bytes
  8150  000D8E                     	endif
  8151  000D8E  0008               	tblrd		*
  8152  000D90  50F5               	movf	tablat,w,c
  8153  000D92  0100               	movlb	0	; () banked
  8154  000D94  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8155  000D96  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  8156  000D98  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  8157                           
  8158                           ;main.c: 864: I2C_Master_Stop();
  8159  000D9C  EC0F  F01C         	call	_I2C_Master_Stop	;wreg free
  8160  000DA0  0101               	movlb	1	; () banked
  8161  000DA2  4B20               	infsnz	logPC@i& (0+255),f,b
  8162  000DA4  2B21               	incf	(logPC@i+1)& (0+255),f,b
  8163  000DA6  D7DB               	goto	l6787
  8164  000DA8                     l6801:
  8165                           
  8166                           ; BSR set to: 1
  8167                           ;main.c: 865: }
  8168                           ;main.c: 866: char started_time[19] = "  /  /     :  :  ";
  8169  000DA8  EE20  F035         	lfsr	2,logPC@F3226
  8170  000DAC  EE11  F000         	lfsr	1,logPC@started_time
  8171  000DB0  0E12               	movlw	18
  8172  000DB2                     u6641:
  8173  000DB2  CFDB FFE3          	movff	plusw2,plusw1
  8174  000DB6  06E8               	decf	wreg,f,c
  8175  000DB8  E2FC               	bc	u6641
  8176                           
  8177                           ; BSR set to: 1
  8178                           ;main.c: 867: started_time[0] = getChar(getTens( (lastRunRTC[6] & 0x0F) + ((lastRunRTC[6
      +                          ] & 0xF0)>>4)*10 ));
  8179  000DBA  C0CE  F090         	movff	_lastRunRTC+6,??_logPC
  8180  000DBE  0100               	movlb	0	; () banked
  8181  000DC0  3B90               	swapf	??_logPC& (0+255),f,b
  8182  000DC2  0E0F               	movlw	15
  8183  000DC4  1790               	andwf	??_logPC& (0+255),f,b
  8184  000DC6  0E0F               	movlw	15
  8185  000DC8  0100               	movlb	0	; () banked
  8186  000DCA  1790               	andwf	??_logPC& (0+255),f,b
  8187  000DCC  0100               	movlb	0	; () banked
  8188  000DCE  5190               	movf	??_logPC& (0+255),w,b
  8189  000DD0  0D0A               	mullw	10
  8190  000DD2  C0CE  F091         	movff	_lastRunRTC+6,??_logPC+1
  8191  000DD6  0E0F               	movlw	15
  8192  000DD8  0100               	movlb	0	; () banked
  8193  000DDA  1791               	andwf	(??_logPC+1)& (0+255),f,b
  8194  000DDC  0100               	movlb	0	; () banked
  8195  000DDE  5191               	movf	(??_logPC+1)& (0+255),w,b
  8196  000DE0  24F3               	addwf	prodl,w,c
  8197  000DE2  0100               	movlb	0	; () banked
  8198  000DE4  6F87               	movwf	getTens@num& (0+255),b
  8199  000DE6  0E00               	movlw	0
  8200  000DE8  20F4               	addwfc	prodh,w,c
  8201  000DEA  0100               	movlb	0	; () banked
  8202  000DEC  6F88               	movwf	(getTens@num+1)& (0+255),b
  8203  000DEE  EC90  F01A         	call	_getTens	;wreg free
  8204  000DF2  C087  F08E         	movff	?_getTens,getChar@num
  8205  000DF6  C088  F08F         	movff	?_getTens+1,getChar@num+1
  8206  000DFA  EC0B  F01C         	call	_getChar	;wreg free
  8207  000DFE  0101               	movlb	1	; () banked
  8208  000E00  6F00               	movwf	logPC@started_time& (0+255),b
  8209                           
  8210                           ; BSR set to: 1
  8211                           ;main.c: 868: started_time[1] = getChar(getOnes( (lastRunRTC[6] & 0x0F) + ((lastRunRTC[6
      +                          ] & 0xF0)>>4)*10 ));
  8212  000E02  C0CE  F090         	movff	_lastRunRTC+6,??_logPC
  8213  000E06  0100               	movlb	0	; () banked
  8214  000E08  3B90               	swapf	??_logPC& (0+255),f,b
  8215  000E0A  0E0F               	movlw	15
  8216  000E0C  1790               	andwf	??_logPC& (0+255),f,b
  8217  000E0E  0E0F               	movlw	15
  8218  000E10  0100               	movlb	0	; () banked
  8219  000E12  1790               	andwf	??_logPC& (0+255),f,b
  8220  000E14  0100               	movlb	0	; () banked
  8221  000E16  5190               	movf	??_logPC& (0+255),w,b
  8222  000E18  0D0A               	mullw	10
  8223  000E1A  C0CE  F091         	movff	_lastRunRTC+6,??_logPC+1
  8224  000E1E  0E0F               	movlw	15
  8225  000E20  0100               	movlb	0	; () banked
  8226  000E22  1791               	andwf	(??_logPC+1)& (0+255),f,b
  8227  000E24  0100               	movlb	0	; () banked
  8228  000E26  5191               	movf	(??_logPC+1)& (0+255),w,b
  8229  000E28  24F3               	addwf	prodl,w,c
  8230  000E2A  0100               	movlb	0	; () banked
  8231  000E2C  6F8C               	movwf	getOnes@num& (0+255),b
  8232  000E2E  0E00               	movlw	0
  8233  000E30  20F4               	addwfc	prodh,w,c
  8234  000E32  0100               	movlb	0	; () banked
  8235  000E34  6F8D               	movwf	(getOnes@num+1)& (0+255),b
  8236  000E36  EC60  F01B         	call	_getOnes	;wreg free
  8237  000E3A  C08C  F08E         	movff	?_getOnes,getChar@num
  8238  000E3E  C08D  F08F         	movff	?_getOnes+1,getChar@num+1
  8239  000E42  EC0B  F01C         	call	_getChar	;wreg free
  8240  000E46  0101               	movlb	1	; () banked
  8241  000E48  6F01               	movwf	(logPC@started_time+1)& (0+255),b
  8242                           
  8243                           ; BSR set to: 1
  8244                           ;main.c: 869: started_time[3] = getChar(getTens( (lastRunRTC[5] & 0x0F) + ((lastRunRTC[5
      +                          ] & 0xF0)>>4)*10 ));
  8245  000E4A  C0CD  F090         	movff	_lastRunRTC+5,??_logPC
  8246  000E4E  0100               	movlb	0	; () banked
  8247  000E50  3B90               	swapf	??_logPC& (0+255),f,b
  8248  000E52  0E0F               	movlw	15
  8249  000E54  1790               	andwf	??_logPC& (0+255),f,b
  8250  000E56  0E0F               	movlw	15
  8251  000E58  0100               	movlb	0	; () banked
  8252  000E5A  1790               	andwf	??_logPC& (0+255),f,b
  8253  000E5C  0100               	movlb	0	; () banked
  8254  000E5E  5190               	movf	??_logPC& (0+255),w,b
  8255  000E60  0D0A               	mullw	10
  8256  000E62  C0CD  F091         	movff	_lastRunRTC+5,??_logPC+1
  8257  000E66  0E0F               	movlw	15
  8258  000E68  0100               	movlb	0	; () banked
  8259  000E6A  1791               	andwf	(??_logPC+1)& (0+255),f,b
  8260  000E6C  0100               	movlb	0	; () banked
  8261  000E6E  5191               	movf	(??_logPC+1)& (0+255),w,b
  8262  000E70  24F3               	addwf	prodl,w,c
  8263  000E72  0100               	movlb	0	; () banked
  8264  000E74  6F87               	movwf	getTens@num& (0+255),b
  8265  000E76  0E00               	movlw	0
  8266  000E78  20F4               	addwfc	prodh,w,c
  8267  000E7A  0100               	movlb	0	; () banked
  8268  000E7C  6F88               	movwf	(getTens@num+1)& (0+255),b
  8269  000E7E  EC90  F01A         	call	_getTens	;wreg free
  8270  000E82  C087  F08E         	movff	?_getTens,getChar@num
  8271  000E86  C088  F08F         	movff	?_getTens+1,getChar@num+1
  8272  000E8A  EC0B  F01C         	call	_getChar	;wreg free
  8273  000E8E  0101               	movlb	1	; () banked
  8274  000E90  6F03               	movwf	(logPC@started_time+3)& (0+255),b
  8275                           
  8276                           ; BSR set to: 1
  8277                           ;main.c: 870: started_time[4] = getChar(getOnes( (lastRunRTC[5] & 0x0F) + ((lastRunRTC[5
      +                          ] & 0xF0)>>4)*10 ));
  8278  000E92  C0CD  F090         	movff	_lastRunRTC+5,??_logPC
  8279  000E96  0100               	movlb	0	; () banked
  8280  000E98  3B90               	swapf	??_logPC& (0+255),f,b
  8281  000E9A  0E0F               	movlw	15
  8282  000E9C  1790               	andwf	??_logPC& (0+255),f,b
  8283  000E9E  0E0F               	movlw	15
  8284  000EA0  0100               	movlb	0	; () banked
  8285  000EA2  1790               	andwf	??_logPC& (0+255),f,b
  8286  000EA4  0100               	movlb	0	; () banked
  8287  000EA6  5190               	movf	??_logPC& (0+255),w,b
  8288  000EA8  0D0A               	mullw	10
  8289  000EAA  C0CD  F091         	movff	_lastRunRTC+5,??_logPC+1
  8290  000EAE  0E0F               	movlw	15
  8291  000EB0  0100               	movlb	0	; () banked
  8292  000EB2  1791               	andwf	(??_logPC+1)& (0+255),f,b
  8293  000EB4  0100               	movlb	0	; () banked
  8294  000EB6  5191               	movf	(??_logPC+1)& (0+255),w,b
  8295  000EB8  24F3               	addwf	prodl,w,c
  8296  000EBA  0100               	movlb	0	; () banked
  8297  000EBC  6F8C               	movwf	getOnes@num& (0+255),b
  8298  000EBE  0E00               	movlw	0
  8299  000EC0  20F4               	addwfc	prodh,w,c
  8300  000EC2  0100               	movlb	0	; () banked
  8301  000EC4  6F8D               	movwf	(getOnes@num+1)& (0+255),b
  8302  000EC6  EC60  F01B         	call	_getOnes	;wreg free
  8303  000ECA  C08C  F08E         	movff	?_getOnes,getChar@num
  8304  000ECE  C08D  F08F         	movff	?_getOnes+1,getChar@num+1
  8305  000ED2  EC0B  F01C         	call	_getChar	;wreg free
  8306  000ED6  0101               	movlb	1	; () banked
  8307  000ED8  6F04               	movwf	(logPC@started_time+4)& (0+255),b
  8308                           
  8309                           ; BSR set to: 1
  8310                           ;main.c: 871: started_time[6] = getChar(getTens( (lastRunRTC[4] & 0x0F) + ((lastRunRTC[4
      +                          ] & 0xF0)>>4)*10 ));
  8311  000EDA  C0CC  F090         	movff	_lastRunRTC+4,??_logPC
  8312  000EDE  0100               	movlb	0	; () banked
  8313  000EE0  3B90               	swapf	??_logPC& (0+255),f,b
  8314  000EE2  0E0F               	movlw	15
  8315  000EE4  1790               	andwf	??_logPC& (0+255),f,b
  8316  000EE6  0E0F               	movlw	15
  8317  000EE8  0100               	movlb	0	; () banked
  8318  000EEA  1790               	andwf	??_logPC& (0+255),f,b
  8319  000EEC  0100               	movlb	0	; () banked
  8320  000EEE  5190               	movf	??_logPC& (0+255),w,b
  8321  000EF0  0D0A               	mullw	10
  8322  000EF2  C0CC  F091         	movff	_lastRunRTC+4,??_logPC+1
  8323  000EF6  0E0F               	movlw	15
  8324  000EF8  0100               	movlb	0	; () banked
  8325  000EFA  1791               	andwf	(??_logPC+1)& (0+255),f,b
  8326  000EFC  0100               	movlb	0	; () banked
  8327  000EFE  5191               	movf	(??_logPC+1)& (0+255),w,b
  8328  000F00  24F3               	addwf	prodl,w,c
  8329  000F02  0100               	movlb	0	; () banked
  8330  000F04  6F87               	movwf	getTens@num& (0+255),b
  8331  000F06  0E00               	movlw	0
  8332  000F08  20F4               	addwfc	prodh,w,c
  8333  000F0A  0100               	movlb	0	; () banked
  8334  000F0C  6F88               	movwf	(getTens@num+1)& (0+255),b
  8335  000F0E  EC90  F01A         	call	_getTens	;wreg free
  8336  000F12  C087  F08E         	movff	?_getTens,getChar@num
  8337  000F16  C088  F08F         	movff	?_getTens+1,getChar@num+1
  8338  000F1A  EC0B  F01C         	call	_getChar	;wreg free
  8339  000F1E  0101               	movlb	1	; () banked
  8340  000F20  6F06               	movwf	(logPC@started_time+6)& (0+255),b
  8341                           
  8342                           ; BSR set to: 1
  8343                           ;main.c: 872: started_time[7] = getChar(getOnes( (lastRunRTC[4] & 0x0F) + ((lastRunRTC[4
      +                          ] & 0xF0)>>4)*10 ));
  8344  000F22  C0CC  F090         	movff	_lastRunRTC+4,??_logPC
  8345  000F26  0100               	movlb	0	; () banked
  8346  000F28  3B90               	swapf	??_logPC& (0+255),f,b
  8347  000F2A  0E0F               	movlw	15
  8348  000F2C  1790               	andwf	??_logPC& (0+255),f,b
  8349  000F2E  0E0F               	movlw	15
  8350  000F30  0100               	movlb	0	; () banked
  8351  000F32  1790               	andwf	??_logPC& (0+255),f,b
  8352  000F34  0100               	movlb	0	; () banked
  8353  000F36  5190               	movf	??_logPC& (0+255),w,b
  8354  000F38  0D0A               	mullw	10
  8355  000F3A  C0CC  F091         	movff	_lastRunRTC+4,??_logPC+1
  8356  000F3E  0E0F               	movlw	15
  8357  000F40  0100               	movlb	0	; () banked
  8358  000F42  1791               	andwf	(??_logPC+1)& (0+255),f,b
  8359  000F44  0100               	movlb	0	; () banked
  8360  000F46  5191               	movf	(??_logPC+1)& (0+255),w,b
  8361  000F48  24F3               	addwf	prodl,w,c
  8362  000F4A  0100               	movlb	0	; () banked
  8363  000F4C  6F8C               	movwf	getOnes@num& (0+255),b
  8364  000F4E  0E00               	movlw	0
  8365  000F50  20F4               	addwfc	prodh,w,c
  8366  000F52  0100               	movlb	0	; () banked
  8367  000F54  6F8D               	movwf	(getOnes@num+1)& (0+255),b
  8368  000F56  EC60  F01B         	call	_getOnes	;wreg free
  8369  000F5A  C08C  F08E         	movff	?_getOnes,getChar@num
  8370  000F5E  C08D  F08F         	movff	?_getOnes+1,getChar@num+1
  8371  000F62  EC0B  F01C         	call	_getChar	;wreg free
  8372  000F66  0101               	movlb	1	; () banked
  8373  000F68  6F07               	movwf	(logPC@started_time+7)& (0+255),b
  8374                           
  8375                           ; BSR set to: 1
  8376                           ;main.c: 873: started_time[9] = getChar(getTens( (lastRunRTC[2] & 0x0F) + ((lastRunRTC[2
      +                          ] & 0xF0)>>4)*10 ));
  8377  000F6A  C0CA  F090         	movff	_lastRunRTC+2,??_logPC
  8378  000F6E  0100               	movlb	0	; () banked
  8379  000F70  3B90               	swapf	??_logPC& (0+255),f,b
  8380  000F72  0E0F               	movlw	15
  8381  000F74  1790               	andwf	??_logPC& (0+255),f,b
  8382  000F76  0E0F               	movlw	15
  8383  000F78  0100               	movlb	0	; () banked
  8384  000F7A  1790               	andwf	??_logPC& (0+255),f,b
  8385  000F7C  0100               	movlb	0	; () banked
  8386  000F7E  5190               	movf	??_logPC& (0+255),w,b
  8387  000F80  0D0A               	mullw	10
  8388  000F82  C0CA  F091         	movff	_lastRunRTC+2,??_logPC+1
  8389  000F86  0E0F               	movlw	15
  8390  000F88  0100               	movlb	0	; () banked
  8391  000F8A  1791               	andwf	(??_logPC+1)& (0+255),f,b
  8392  000F8C  0100               	movlb	0	; () banked
  8393  000F8E  5191               	movf	(??_logPC+1)& (0+255),w,b
  8394  000F90  24F3               	addwf	prodl,w,c
  8395  000F92  0100               	movlb	0	; () banked
  8396  000F94  6F87               	movwf	getTens@num& (0+255),b
  8397  000F96  0E00               	movlw	0
  8398  000F98  20F4               	addwfc	prodh,w,c
  8399  000F9A  0100               	movlb	0	; () banked
  8400  000F9C  6F88               	movwf	(getTens@num+1)& (0+255),b
  8401  000F9E  EC90  F01A         	call	_getTens	;wreg free
  8402  000FA2  C087  F08E         	movff	?_getTens,getChar@num
  8403  000FA6  C088  F08F         	movff	?_getTens+1,getChar@num+1
  8404  000FAA  EC0B  F01C         	call	_getChar	;wreg free
  8405  000FAE  0101               	movlb	1	; () banked
  8406  000FB0  6F09               	movwf	(logPC@started_time+9)& (0+255),b
  8407                           
  8408                           ; BSR set to: 1
  8409                           ;main.c: 874: started_time[10] = getChar(getOnes( (lastRunRTC[2] & 0x0F) + ((lastRunRTC[
      +                          2] & 0xF0)>>4)*10 ));
  8410  000FB2  C0CA  F090         	movff	_lastRunRTC+2,??_logPC
  8411  000FB6  0100               	movlb	0	; () banked
  8412  000FB8  3B90               	swapf	??_logPC& (0+255),f,b
  8413  000FBA  0E0F               	movlw	15
  8414  000FBC  1790               	andwf	??_logPC& (0+255),f,b
  8415  000FBE  0E0F               	movlw	15
  8416  000FC0  0100               	movlb	0	; () banked
  8417  000FC2  1790               	andwf	??_logPC& (0+255),f,b
  8418  000FC4  0100               	movlb	0	; () banked
  8419  000FC6  5190               	movf	??_logPC& (0+255),w,b
  8420  000FC8  0D0A               	mullw	10
  8421  000FCA  C0CA  F091         	movff	_lastRunRTC+2,??_logPC+1
  8422  000FCE  0E0F               	movlw	15
  8423  000FD0  0100               	movlb	0	; () banked
  8424  000FD2  1791               	andwf	(??_logPC+1)& (0+255),f,b
  8425  000FD4  0100               	movlb	0	; () banked
  8426  000FD6  5191               	movf	(??_logPC+1)& (0+255),w,b
  8427  000FD8  24F3               	addwf	prodl,w,c
  8428  000FDA  0100               	movlb	0	; () banked
  8429  000FDC  6F8C               	movwf	getOnes@num& (0+255),b
  8430  000FDE  0E00               	movlw	0
  8431  000FE0  20F4               	addwfc	prodh,w,c
  8432  000FE2  0100               	movlb	0	; () banked
  8433  000FE4  6F8D               	movwf	(getOnes@num+1)& (0+255),b
  8434  000FE6  EC60  F01B         	call	_getOnes	;wreg free
  8435  000FEA  C08C  F08E         	movff	?_getOnes,getChar@num
  8436  000FEE  C08D  F08F         	movff	?_getOnes+1,getChar@num+1
  8437  000FF2  EC0B  F01C         	call	_getChar	;wreg free
  8438  000FF6  0101               	movlb	1	; () banked
  8439  000FF8  6F0A               	movwf	(logPC@started_time+10)& (0+255),b
  8440                           
  8441                           ; BSR set to: 1
  8442                           ;main.c: 875: started_time[12] = getChar(getTens( (lastRunRTC[1] & 0x0F) + ((lastRunRTC[
      +                          1] & 0xF0)>>4)*10 ));
  8443  000FFA  C0C9  F090         	movff	_lastRunRTC+1,??_logPC
  8444  000FFE  0100               	movlb	0	; () banked
  8445  001000  3B90               	swapf	??_logPC& (0+255),f,b
  8446  001002  0E0F               	movlw	15
  8447  001004  1790               	andwf	??_logPC& (0+255),f,b
  8448  001006  0E0F               	movlw	15
  8449  001008  0100               	movlb	0	; () banked
  8450  00100A  1790               	andwf	??_logPC& (0+255),f,b
  8451  00100C  0100               	movlb	0	; () banked
  8452  00100E  5190               	movf	??_logPC& (0+255),w,b
  8453  001010  0D0A               	mullw	10
  8454  001012  C0C9  F091         	movff	_lastRunRTC+1,??_logPC+1
  8455  001016  0E0F               	movlw	15
  8456  001018  0100               	movlb	0	; () banked
  8457  00101A  1791               	andwf	(??_logPC+1)& (0+255),f,b
  8458  00101C  0100               	movlb	0	; () banked
  8459  00101E  5191               	movf	(??_logPC+1)& (0+255),w,b
  8460  001020  24F3               	addwf	prodl,w,c
  8461  001022  0100               	movlb	0	; () banked
  8462  001024  6F87               	movwf	getTens@num& (0+255),b
  8463  001026  0E00               	movlw	0
  8464  001028  20F4               	addwfc	prodh,w,c
  8465  00102A  0100               	movlb	0	; () banked
  8466  00102C  6F88               	movwf	(getTens@num+1)& (0+255),b
  8467  00102E  EC90  F01A         	call	_getTens	;wreg free
  8468  001032  C087  F08E         	movff	?_getTens,getChar@num
  8469  001036  C088  F08F         	movff	?_getTens+1,getChar@num+1
  8470  00103A  EC0B  F01C         	call	_getChar	;wreg free
  8471  00103E  0101               	movlb	1	; () banked
  8472  001040  6F0C               	movwf	(logPC@started_time+12)& (0+255),b
  8473                           
  8474                           ; BSR set to: 1
  8475                           ;main.c: 876: started_time[13] = getChar(getOnes( (lastRunRTC[1] & 0x0F) + ((lastRunRTC[
      +                          1] & 0xF0)>>4)*10 ));
  8476  001042  C0C9  F090         	movff	_lastRunRTC+1,??_logPC
  8477  001046  0100               	movlb	0	; () banked
  8478  001048  3B90               	swapf	??_logPC& (0+255),f,b
  8479  00104A  0E0F               	movlw	15
  8480  00104C  1790               	andwf	??_logPC& (0+255),f,b
  8481  00104E  0E0F               	movlw	15
  8482  001050  0100               	movlb	0	; () banked
  8483  001052  1790               	andwf	??_logPC& (0+255),f,b
  8484  001054  0100               	movlb	0	; () banked
  8485  001056  5190               	movf	??_logPC& (0+255),w,b
  8486  001058  0D0A               	mullw	10
  8487  00105A  C0C9  F091         	movff	_lastRunRTC+1,??_logPC+1
  8488  00105E  0E0F               	movlw	15
  8489  001060  0100               	movlb	0	; () banked
  8490  001062  1791               	andwf	(??_logPC+1)& (0+255),f,b
  8491  001064  0100               	movlb	0	; () banked
  8492  001066  5191               	movf	(??_logPC+1)& (0+255),w,b
  8493  001068  24F3               	addwf	prodl,w,c
  8494  00106A  0100               	movlb	0	; () banked
  8495  00106C  6F8C               	movwf	getOnes@num& (0+255),b
  8496  00106E  0E00               	movlw	0
  8497  001070  20F4               	addwfc	prodh,w,c
  8498  001072  0100               	movlb	0	; () banked
  8499  001074  6F8D               	movwf	(getOnes@num+1)& (0+255),b
  8500  001076  EC60  F01B         	call	_getOnes	;wreg free
  8501  00107A  C08C  F08E         	movff	?_getOnes,getChar@num
  8502  00107E  C08D  F08F         	movff	?_getOnes+1,getChar@num+1
  8503  001082  EC0B  F01C         	call	_getChar	;wreg free
  8504  001086  0101               	movlb	1	; () banked
  8505  001088  6F0D               	movwf	(logPC@started_time+13)& (0+255),b
  8506                           
  8507                           ; BSR set to: 1
  8508                           ;main.c: 877: started_time[15] = getChar(getTens( (lastRunRTC[0] & 0x0F) + ((lastRunRTC[
      +                          0] & 0xF0)>>4)*10 ));
  8509  00108A  C0C8  F090         	movff	_lastRunRTC,??_logPC
  8510  00108E  0100               	movlb	0	; () banked
  8511  001090  3B90               	swapf	??_logPC& (0+255),f,b
  8512  001092  0E0F               	movlw	15
  8513  001094  1790               	andwf	??_logPC& (0+255),f,b
  8514  001096  0E0F               	movlw	15
  8515  001098  0100               	movlb	0	; () banked
  8516  00109A  1790               	andwf	??_logPC& (0+255),f,b
  8517  00109C  0100               	movlb	0	; () banked
  8518  00109E  5190               	movf	??_logPC& (0+255),w,b
  8519  0010A0  0D0A               	mullw	10
  8520  0010A2  C0C8  F091         	movff	_lastRunRTC,??_logPC+1
  8521  0010A6  0E0F               	movlw	15
  8522  0010A8  0100               	movlb	0	; () banked
  8523  0010AA  1791               	andwf	(??_logPC+1)& (0+255),f,b
  8524  0010AC  0100               	movlb	0	; () banked
  8525  0010AE  5191               	movf	(??_logPC+1)& (0+255),w,b
  8526  0010B0  24F3               	addwf	prodl,w,c
  8527  0010B2  0100               	movlb	0	; () banked
  8528  0010B4  6F87               	movwf	getTens@num& (0+255),b
  8529  0010B6  0E00               	movlw	0
  8530  0010B8  20F4               	addwfc	prodh,w,c
  8531  0010BA  0100               	movlb	0	; () banked
  8532  0010BC  6F88               	movwf	(getTens@num+1)& (0+255),b
  8533  0010BE  EC90  F01A         	call	_getTens	;wreg free
  8534  0010C2  C087  F08E         	movff	?_getTens,getChar@num
  8535  0010C6  C088  F08F         	movff	?_getTens+1,getChar@num+1
  8536  0010CA  EC0B  F01C         	call	_getChar	;wreg free
  8537  0010CE  0101               	movlb	1	; () banked
  8538  0010D0  6F0F               	movwf	(logPC@started_time+15)& (0+255),b
  8539                           
  8540                           ; BSR set to: 1
  8541                           ;main.c: 878: started_time[16] = getChar(getOnes( (lastRunRTC[0] & 0x0F) + ((lastRunRTC[
      +                          0] & 0xF0)>>4)*10 ));
  8542  0010D2  C0C8  F090         	movff	_lastRunRTC,??_logPC
  8543  0010D6  0100               	movlb	0	; () banked
  8544  0010D8  3B90               	swapf	??_logPC& (0+255),f,b
  8545  0010DA  0E0F               	movlw	15
  8546  0010DC  1790               	andwf	??_logPC& (0+255),f,b
  8547  0010DE  0E0F               	movlw	15
  8548  0010E0  0100               	movlb	0	; () banked
  8549  0010E2  1790               	andwf	??_logPC& (0+255),f,b
  8550  0010E4  0100               	movlb	0	; () banked
  8551  0010E6  5190               	movf	??_logPC& (0+255),w,b
  8552  0010E8  0D0A               	mullw	10
  8553  0010EA  C0C8  F091         	movff	_lastRunRTC,??_logPC+1
  8554  0010EE  0E0F               	movlw	15
  8555  0010F0  0100               	movlb	0	; () banked
  8556  0010F2  1791               	andwf	(??_logPC+1)& (0+255),f,b
  8557  0010F4  0100               	movlb	0	; () banked
  8558  0010F6  5191               	movf	(??_logPC+1)& (0+255),w,b
  8559  0010F8  24F3               	addwf	prodl,w,c
  8560  0010FA  0100               	movlb	0	; () banked
  8561  0010FC  6F8C               	movwf	getOnes@num& (0+255),b
  8562  0010FE  0E00               	movlw	0
  8563  001100  20F4               	addwfc	prodh,w,c
  8564  001102  0100               	movlb	0	; () banked
  8565  001104  6F8D               	movwf	(getOnes@num+1)& (0+255),b
  8566  001106  EC60  F01B         	call	_getOnes	;wreg free
  8567  00110A  C08C  F08E         	movff	?_getOnes,getChar@num
  8568  00110E  C08D  F08F         	movff	?_getOnes+1,getChar@num+1
  8569  001112  EC0B  F01C         	call	_getChar	;wreg free
  8570  001116  0101               	movlb	1	; () banked
  8571  001118  6F10               	movwf	(logPC@started_time+16)& (0+255),b
  8572                           
  8573                           ; BSR set to: 1
  8574                           ;main.c: 879: for(unsigned int i = 0; i < 19; i++) {
  8575  00111A  0E00               	movlw	0
  8576  00111C  0101               	movlb	1	; () banked
  8577  00111E  6F23               	movwf	(logPC@i_944+1)& (0+255),b
  8578  001120  0E00               	movlw	0
  8579  001122  6F22               	movwf	logPC@i_944& (0+255),b
  8580  001124                     l6829:
  8581                           
  8582                           ; BSR set to: 1
  8583  001124  0101               	movlb	1	; () banked
  8584  001126  5123               	movf	(logPC@i_944+1)& (0+255),w,b
  8585  001128  E126               	bnz	l6843
  8586  00112A  0E13               	movlw	19
  8587  00112C  0101               	movlb	1	; () banked
  8588  00112E  5D22               	subwf	logPC@i_944& (0+255),w,b
  8589  001130  B0D8               	btfsc	status,0,c
  8590  001132  D021               	goto	l6843
  8591                           
  8592                           ; BSR set to: 1
  8593                           ;main.c: 880: I2C_Master_Start();
  8594                           
  8595                           ; BSR set to: 1
  8596                           
  8597                           ; BSR set to: 1
  8598  001134  EC13  F01C         	call	_I2C_Master_Start	;wreg free
  8599                           
  8600                           ;main.c: 881: I2C_Master_Write(0b00010000);
  8601  001138  0E00               	movlw	0
  8602  00113A  0100               	movlb	0	; () banked
  8603  00113C  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8604  00113E  0E10               	movlw	16
  8605  001140  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8606  001142  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  8607                           
  8608                           ;main.c: 882: I2C_Master_Write(started_time[i]);
  8609  001146  0E00               	movlw	low logPC@started_time
  8610  001148  0101               	movlb	1	; () banked
  8611  00114A  2522               	addwf	logPC@i_944& (0+255),w,b
  8612  00114C  6ED9               	movwf	fsr2l,c
  8613  00114E  0E01               	movlw	high logPC@started_time
  8614  001150  0101               	movlb	1	; () banked
  8615  001152  2123               	addwfc	(logPC@i_944+1)& (0+255),w,b
  8616  001154  6EDA               	movwf	fsr2h,c
  8617  001156  50DF               	movf	indf2,w,c
  8618  001158  0100               	movlb	0	; () banked
  8619  00115A  6F90               	movwf	??_logPC& (0+255),b
  8620  00115C  0100               	movlb	0	; () banked
  8621  00115E  5190               	movf	??_logPC& (0+255),w,b
  8622  001160  0100               	movlb	0	; () banked
  8623  001162  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8624  001164  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  8625  001166  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  8626                           
  8627                           ;main.c: 883: I2C_Master_Stop();
  8628  00116A  EC0F  F01C         	call	_I2C_Master_Stop	;wreg free
  8629  00116E  0101               	movlb	1	; () banked
  8630  001170  4B22               	infsnz	logPC@i_944& (0+255),f,b
  8631  001172  2B23               	incf	(logPC@i_944+1)& (0+255),f,b
  8632  001174  D7D7               	goto	l6829
  8633  001176                     l6843:
  8634                           
  8635                           ; BSR set to: 1
  8636                           ;main.c: 884: }
  8637                           ;main.c: 886: I2C_Master_Start();
  8638  001176  EC13  F01C         	call	_I2C_Master_Start	;wreg free
  8639                           
  8640                           ;main.c: 887: I2C_Master_Write(0b00010000);
  8641  00117A  0E00               	movlw	0
  8642  00117C  0100               	movlb	0	; () banked
  8643  00117E  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8644  001180  0E10               	movlw	16
  8645  001182  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8646  001184  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  8647                           
  8648                           ;main.c: 888: I2C_Master_Write('\n');
  8649  001188  0E00               	movlw	0
  8650  00118A  0100               	movlb	0	; () banked
  8651  00118C  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8652  00118E  0E0A               	movlw	10
  8653  001190  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8654  001192  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  8655                           
  8656                           ;main.c: 889: I2C_Master_Stop();
  8657  001196  EC0F  F01C         	call	_I2C_Master_Stop	;wreg free
  8658                           
  8659                           ;main.c: 890: for(unsigned int i = 0; i < 31; i++) {
  8660  00119A  0E00               	movlw	0
  8661  00119C  0101               	movlb	1	; () banked
  8662  00119E  6F25               	movwf	(logPC@i_945+1)& (0+255),b
  8663  0011A0  0E00               	movlw	0
  8664  0011A2  6F24               	movwf	logPC@i_945& (0+255),b
  8665                           
  8666                           ; BSR set to: 1
  8667  0011A4  0101               	movlb	1	; () banked
  8668  0011A6  5125               	movf	(logPC@i_945+1)& (0+255),w,b
  8669  0011A8  E125               	bnz	l551
  8670  0011AA  0E1F               	movlw	31
  8671  0011AC  0101               	movlb	1	; () banked
  8672  0011AE  5D24               	subwf	logPC@i_945& (0+255),w,b
  8673  0011B0  B0D8               	btfsc	status,0,c
  8674  0011B2  D020               	goto	l551
  8675                           
  8676                           ; BSR set to: 1
  8677                           ;main.c: 891: I2C_Master_Start();
  8678                           
  8679                           ; BSR set to: 1
  8680                           
  8681                           ; BSR set to: 1
  8682  0011B4  EC13  F01C         	call	_I2C_Master_Start	;wreg free
  8683                           
  8684                           ;main.c: 892: I2C_Master_Write(0b00010000);
  8685  0011B8  0E00               	movlw	0
  8686  0011BA  0100               	movlb	0	; () banked
  8687  0011BC  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8688  0011BE  0E10               	movlw	16
  8689  0011C0  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8690  0011C2  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  8691                           
  8692                           ;main.c: 893: I2C_Master_Write(AAHeader[i]);
  8693  0011C6  0E08               	movlw	low _AAHeader
  8694  0011C8  0101               	movlb	1	; () banked
  8695  0011CA  2524               	addwf	logPC@i_945& (0+255),w,b
  8696  0011CC  6EF6               	movwf	tblptrl,c
  8697  0011CE  0EFD               	movlw	high _AAHeader
  8698  0011D0  2125               	addwfc	(logPC@i_945+1)& (0+255),w,b
  8699  0011D2  6EF7               	movwf	tblptrh,c
  8700  0011D4                     	if	0	;There are less than 3 active tblptr bytes
  8701  0011D4                     	endif
  8702  0011D4  0008               	tblrd		*
  8703  0011D6  50F5               	movf	tablat,w,c
  8704  0011D8  0100               	movlb	0	; () banked
  8705  0011DA  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8706  0011DC  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  8707  0011DE  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  8708                           
  8709                           ;main.c: 894: I2C_Master_Stop();
  8710  0011E2  EC0F  F01C         	call	_I2C_Master_Stop	;wreg free
  8711  0011E6  0101               	movlb	1	; () banked
  8712  0011E8  4B24               	infsnz	logPC@i_945& (0+255),f,b
  8713  0011EA  2B25               	incf	(logPC@i_945+1)& (0+255),f,b
  8714                           
  8715                           ; BSR set to: 1
  8716  0011EC  0101               	movlb	1	; () banked
  8717  0011EE  5125               	movf	(logPC@i_945+1)& (0+255),w,b
  8718  0011F0  E101               	bnz	u6680
  8719  0011F2  D7DB               	goto	L1
  8720  0011F4                     u6680:
  8721  0011F4                     l551:
  8722                           
  8723                           ; BSR set to: 1
  8724                           ;main.c: 895: }
  8725                           ;main.c: 896: char numberAA[2] = "  ";
  8726  0011F4  C0F0  F116         	movff	logPC@F3230,logPC@numberAA
  8727  0011F8  C0F1  F117         	movff	logPC@F3230+1,logPC@numberAA+1
  8728                           
  8729                           ; BSR set to: 1
  8730                           ;main.c: 897: numberAA[0] = getChar(getTens(numAA));
  8731  0011FC  C0E7  F087         	movff	_numAA,getTens@num
  8732  001200  0100               	movlb	0	; () banked
  8733  001202  6B88               	clrf	(getTens@num+1)& (0+255),b
  8734  001204  EC90  F01A         	call	_getTens	;wreg free
  8735  001208  C087  F08E         	movff	?_getTens,getChar@num
  8736  00120C  C088  F08F         	movff	?_getTens+1,getChar@num+1
  8737  001210  EC0B  F01C         	call	_getChar	;wreg free
  8738  001214  0101               	movlb	1	; () banked
  8739  001216  6F16               	movwf	logPC@numberAA& (0+255),b
  8740                           
  8741                           ;main.c: 898: numberAA[1] = getChar(getOnes(numAA));
  8742  001218  C0E7  F08C         	movff	_numAA,getOnes@num
  8743  00121C  0100               	movlb	0	; () banked
  8744  00121E  6B8D               	clrf	(getOnes@num+1)& (0+255),b
  8745  001220  EC60  F01B         	call	_getOnes	;wreg free
  8746  001224  C08C  F08E         	movff	?_getOnes,getChar@num
  8747  001228  C08D  F08F         	movff	?_getOnes+1,getChar@num+1
  8748  00122C  EC0B  F01C         	call	_getChar	;wreg free
  8749  001230  0101               	movlb	1	; () banked
  8750  001232  6F17               	movwf	(logPC@numberAA+1)& (0+255),b
  8751                           
  8752                           ; BSR set to: 1
  8753                           ;main.c: 899: for(unsigned int i = 0; i < 2; i++) {
  8754  001234  0E00               	movlw	0
  8755  001236  0101               	movlb	1	; () banked
  8756  001238  6F27               	movwf	(logPC@i_948+1)& (0+255),b
  8757  00123A  0E00               	movlw	0
  8758  00123C  6F26               	movwf	logPC@i_948& (0+255),b
  8759  00123E                     l6865:
  8760                           
  8761                           ; BSR set to: 1
  8762  00123E  0101               	movlb	1	; () banked
  8763  001240  5127               	movf	(logPC@i_948+1)& (0+255),w,b
  8764  001242  E126               	bnz	l6879
  8765  001244  0E02               	movlw	2
  8766  001246  0101               	movlb	1	; () banked
  8767  001248  5D26               	subwf	logPC@i_948& (0+255),w,b
  8768  00124A  B0D8               	btfsc	status,0,c
  8769  00124C  D021               	goto	l6879
  8770                           
  8771                           ; BSR set to: 1
  8772                           ;main.c: 900: I2C_Master_Start();
  8773                           
  8774                           ; BSR set to: 1
  8775                           
  8776                           ; BSR set to: 1
  8777  00124E  EC13  F01C         	call	_I2C_Master_Start	;wreg free
  8778                           
  8779                           ;main.c: 901: I2C_Master_Write(0b00010000);
  8780  001252  0E00               	movlw	0
  8781  001254  0100               	movlb	0	; () banked
  8782  001256  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8783  001258  0E10               	movlw	16
  8784  00125A  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8785  00125C  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  8786                           
  8787                           ;main.c: 902: I2C_Master_Write(numberAA[i]);
  8788  001260  0E16               	movlw	low logPC@numberAA
  8789  001262  0101               	movlb	1	; () banked
  8790  001264  2526               	addwf	logPC@i_948& (0+255),w,b
  8791  001266  6ED9               	movwf	fsr2l,c
  8792  001268  0E01               	movlw	high logPC@numberAA
  8793  00126A  0101               	movlb	1	; () banked
  8794  00126C  2127               	addwfc	(logPC@i_948+1)& (0+255),w,b
  8795  00126E  6EDA               	movwf	fsr2h,c
  8796  001270  50DF               	movf	indf2,w,c
  8797  001272  0100               	movlb	0	; () banked
  8798  001274  6F90               	movwf	??_logPC& (0+255),b
  8799  001276  0100               	movlb	0	; () banked
  8800  001278  5190               	movf	??_logPC& (0+255),w,b
  8801  00127A  0100               	movlb	0	; () banked
  8802  00127C  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8803  00127E  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  8804  001280  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  8805                           
  8806                           ;main.c: 903: I2C_Master_Stop();
  8807  001284  EC0F  F01C         	call	_I2C_Master_Stop	;wreg free
  8808  001288  0101               	movlb	1	; () banked
  8809  00128A  4B26               	infsnz	logPC@i_948& (0+255),f,b
  8810  00128C  2B27               	incf	(logPC@i_948+1)& (0+255),f,b
  8811  00128E  D7D7               	goto	l6865
  8812  001290                     l6879:
  8813                           
  8814                           ; BSR set to: 1
  8815                           ;main.c: 904: }
  8816                           ;main.c: 906: I2C_Master_Start();
  8817  001290  EC13  F01C         	call	_I2C_Master_Start	;wreg free
  8818                           
  8819                           ;main.c: 907: I2C_Master_Write(0b00010000);
  8820  001294  0E00               	movlw	0
  8821  001296  0100               	movlb	0	; () banked
  8822  001298  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8823  00129A  0E10               	movlw	16
  8824  00129C  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8825  00129E  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  8826                           
  8827                           ;main.c: 908: I2C_Master_Write('\n');
  8828  0012A2  0E00               	movlw	0
  8829  0012A4  0100               	movlb	0	; () banked
  8830  0012A6  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8831  0012A8  0E0A               	movlw	10
  8832  0012AA  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8833  0012AC  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  8834                           
  8835                           ;main.c: 909: I2C_Master_Stop();
  8836  0012B0  EC0F  F01C         	call	_I2C_Master_Stop	;wreg free
  8837                           
  8838                           ;main.c: 910: for(unsigned int i = 0; i < 30; i++) {
  8839  0012B4  0E00               	movlw	0
  8840  0012B6  0101               	movlb	1	; () banked
  8841  0012B8  6F29               	movwf	(logPC@i_949+1)& (0+255),b
  8842  0012BA  0E00               	movlw	0
  8843  0012BC  6F28               	movwf	logPC@i_949& (0+255),b
  8844                           
  8845                           ; BSR set to: 1
  8846  0012BE  0101               	movlb	1	; () banked
  8847  0012C0  5129               	movf	(logPC@i_949+1)& (0+255),w,b
  8848  0012C2  E125               	bnz	l557
  8849  0012C4  0E1E               	movlw	30
  8850  0012C6  0101               	movlb	1	; () banked
  8851  0012C8  5D28               	subwf	logPC@i_949& (0+255),w,b
  8852  0012CA  B0D8               	btfsc	status,0,c
  8853  0012CC  D020               	goto	l557
  8854                           
  8855                           ; BSR set to: 1
  8856                           ;main.c: 911: I2C_Master_Start();
  8857                           
  8858                           ; BSR set to: 1
  8859                           
  8860                           ; BSR set to: 1
  8861  0012CE  EC13  F01C         	call	_I2C_Master_Start	;wreg free
  8862                           
  8863                           ;main.c: 912: I2C_Master_Write(0b00010000);
  8864  0012D2  0E00               	movlw	0
  8865  0012D4  0100               	movlb	0	; () banked
  8866  0012D6  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8867  0012D8  0E10               	movlw	16
  8868  0012DA  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8869  0012DC  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  8870                           
  8871                           ;main.c: 913: I2C_Master_Write(CHeader[i]);
  8872  0012E0  0E68               	movlw	low _CHeader
  8873  0012E2  0101               	movlb	1	; () banked
  8874  0012E4  2528               	addwf	logPC@i_949& (0+255),w,b
  8875  0012E6  6EF6               	movwf	tblptrl,c
  8876  0012E8  0EFD               	movlw	high _CHeader
  8877  0012EA  2129               	addwfc	(logPC@i_949+1)& (0+255),w,b
  8878  0012EC  6EF7               	movwf	tblptrh,c
  8879  0012EE                     	if	0	;There are less than 3 active tblptr bytes
  8880  0012EE                     	endif
  8881  0012EE  0008               	tblrd		*
  8882  0012F0  50F5               	movf	tablat,w,c
  8883  0012F2  0100               	movlb	0	; () banked
  8884  0012F4  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8885  0012F6  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  8886  0012F8  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  8887                           
  8888                           ;main.c: 914: I2C_Master_Stop();
  8889  0012FC  EC0F  F01C         	call	_I2C_Master_Stop	;wreg free
  8890  001300  0101               	movlb	1	; () banked
  8891  001302  4B28               	infsnz	logPC@i_949& (0+255),f,b
  8892  001304  2B29               	incf	(logPC@i_949+1)& (0+255),f,b
  8893                           
  8894                           ; BSR set to: 1
  8895  001306  0101               	movlb	1	; () banked
  8896  001308  5129               	movf	(logPC@i_949+1)& (0+255),w,b
  8897  00130A  E101               	bnz	u6720
  8898  00130C  D7DB               	goto	L2
  8899  00130E                     u6720:
  8900  00130E                     l557:
  8901                           
  8902                           ; BSR set to: 1
  8903                           ;main.c: 915: }
  8904                           ;main.c: 916: char numberC[2] = "  ";
  8905  00130E  C0F2  F118         	movff	logPC@F3234,logPC@numberC
  8906  001312  C0F3  F119         	movff	logPC@F3234+1,logPC@numberC+1
  8907                           
  8908                           ; BSR set to: 1
  8909                           ;main.c: 917: numberC[0] = getChar(getTens(numC));
  8910  001316  C0E9  F087         	movff	_numC,getTens@num
  8911  00131A  0100               	movlb	0	; () banked
  8912  00131C  6B88               	clrf	(getTens@num+1)& (0+255),b
  8913  00131E  EC90  F01A         	call	_getTens	;wreg free
  8914  001322  C087  F08E         	movff	?_getTens,getChar@num
  8915  001326  C088  F08F         	movff	?_getTens+1,getChar@num+1
  8916  00132A  EC0B  F01C         	call	_getChar	;wreg free
  8917  00132E  0101               	movlb	1	; () banked
  8918  001330  6F18               	movwf	logPC@numberC& (0+255),b
  8919                           
  8920                           ;main.c: 918: numberC[1] = getChar(getOnes(numC));
  8921  001332  C0E9  F08C         	movff	_numC,getOnes@num
  8922  001336  0100               	movlb	0	; () banked
  8923  001338  6B8D               	clrf	(getOnes@num+1)& (0+255),b
  8924  00133A  EC60  F01B         	call	_getOnes	;wreg free
  8925  00133E  C08C  F08E         	movff	?_getOnes,getChar@num
  8926  001342  C08D  F08F         	movff	?_getOnes+1,getChar@num+1
  8927  001346  EC0B  F01C         	call	_getChar	;wreg free
  8928  00134A  0101               	movlb	1	; () banked
  8929  00134C  6F19               	movwf	(logPC@numberC+1)& (0+255),b
  8930                           
  8931                           ; BSR set to: 1
  8932                           ;main.c: 919: for(unsigned int i = 0; i < 2; i++) {
  8933  00134E  0E00               	movlw	0
  8934  001350  0101               	movlb	1	; () banked
  8935  001352  6F2B               	movwf	(logPC@i_952+1)& (0+255),b
  8936  001354  0E00               	movlw	0
  8937  001356  6F2A               	movwf	logPC@i_952& (0+255),b
  8938  001358                     l6901:
  8939                           
  8940                           ; BSR set to: 1
  8941  001358  0101               	movlb	1	; () banked
  8942  00135A  512B               	movf	(logPC@i_952+1)& (0+255),w,b
  8943  00135C  E126               	bnz	l6915
  8944  00135E  0E02               	movlw	2
  8945  001360  0101               	movlb	1	; () banked
  8946  001362  5D2A               	subwf	logPC@i_952& (0+255),w,b
  8947  001364  B0D8               	btfsc	status,0,c
  8948  001366  D021               	goto	l6915
  8949                           
  8950                           ; BSR set to: 1
  8951                           ;main.c: 920: I2C_Master_Start();
  8952                           
  8953                           ; BSR set to: 1
  8954                           
  8955                           ; BSR set to: 1
  8956  001368  EC13  F01C         	call	_I2C_Master_Start	;wreg free
  8957                           
  8958                           ;main.c: 921: I2C_Master_Write(0b00010000);
  8959  00136C  0E00               	movlw	0
  8960  00136E  0100               	movlb	0	; () banked
  8961  001370  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8962  001372  0E10               	movlw	16
  8963  001374  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8964  001376  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  8965                           
  8966                           ;main.c: 922: I2C_Master_Write(numberC[i]);
  8967  00137A  0E18               	movlw	low logPC@numberC
  8968  00137C  0101               	movlb	1	; () banked
  8969  00137E  252A               	addwf	logPC@i_952& (0+255),w,b
  8970  001380  6ED9               	movwf	fsr2l,c
  8971  001382  0E01               	movlw	high logPC@numberC
  8972  001384  0101               	movlb	1	; () banked
  8973  001386  212B               	addwfc	(logPC@i_952+1)& (0+255),w,b
  8974  001388  6EDA               	movwf	fsr2h,c
  8975  00138A  50DF               	movf	indf2,w,c
  8976  00138C  0100               	movlb	0	; () banked
  8977  00138E  6F90               	movwf	??_logPC& (0+255),b
  8978  001390  0100               	movlb	0	; () banked
  8979  001392  5190               	movf	??_logPC& (0+255),w,b
  8980  001394  0100               	movlb	0	; () banked
  8981  001396  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8982  001398  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  8983  00139A  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  8984                           
  8985                           ;main.c: 923: I2C_Master_Stop();
  8986  00139E  EC0F  F01C         	call	_I2C_Master_Stop	;wreg free
  8987  0013A2  0101               	movlb	1	; () banked
  8988  0013A4  4B2A               	infsnz	logPC@i_952& (0+255),f,b
  8989  0013A6  2B2B               	incf	(logPC@i_952+1)& (0+255),f,b
  8990  0013A8  D7D7               	goto	l6901
  8991  0013AA                     l6915:
  8992                           
  8993                           ; BSR set to: 1
  8994                           ;main.c: 924: }
  8995                           ;main.c: 926: I2C_Master_Start();
  8996  0013AA  EC13  F01C         	call	_I2C_Master_Start	;wreg free
  8997                           
  8998                           ;main.c: 927: I2C_Master_Write(0b00010000);
  8999  0013AE  0E00               	movlw	0
  9000  0013B0  0100               	movlb	0	; () banked
  9001  0013B2  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9002  0013B4  0E10               	movlw	16
  9003  0013B6  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9004  0013B8  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  9005                           
  9006                           ;main.c: 928: I2C_Master_Write('\n');
  9007  0013BC  0E00               	movlw	0
  9008  0013BE  0100               	movlb	0	; () banked
  9009  0013C0  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9010  0013C2  0E0A               	movlw	10
  9011  0013C4  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9012  0013C6  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  9013                           
  9014                           ;main.c: 929: I2C_Master_Stop();
  9015  0013CA  EC0F  F01C         	call	_I2C_Master_Stop	;wreg free
  9016                           
  9017                           ;main.c: 930: for(unsigned int i = 0; i < 31; i++) {
  9018  0013CE  0E00               	movlw	0
  9019  0013D0  0101               	movlb	1	; () banked
  9020  0013D2  6F2D               	movwf	(logPC@i_953+1)& (0+255),b
  9021  0013D4  0E00               	movlw	0
  9022  0013D6  6F2C               	movwf	logPC@i_953& (0+255),b
  9023                           
  9024                           ; BSR set to: 1
  9025  0013D8  0101               	movlb	1	; () banked
  9026  0013DA  512D               	movf	(logPC@i_953+1)& (0+255),w,b
  9027  0013DC  E125               	bnz	l563
  9028  0013DE  0E1F               	movlw	31
  9029  0013E0  0101               	movlb	1	; () banked
  9030  0013E2  5D2C               	subwf	logPC@i_953& (0+255),w,b
  9031  0013E4  B0D8               	btfsc	status,0,c
  9032  0013E6  D020               	goto	l563
  9033                           
  9034                           ; BSR set to: 1
  9035                           ;main.c: 931: I2C_Master_Start();
  9036                           
  9037                           ; BSR set to: 1
  9038                           
  9039                           ; BSR set to: 1
  9040  0013E8  EC13  F01C         	call	_I2C_Master_Start	;wreg free
  9041                           
  9042                           ;main.c: 932: I2C_Master_Write(0b00010000);
  9043  0013EC  0E00               	movlw	0
  9044  0013EE  0100               	movlb	0	; () banked
  9045  0013F0  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9046  0013F2  0E10               	movlw	16
  9047  0013F4  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9048  0013F6  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  9049                           
  9050                           ;main.c: 933: I2C_Master_Write(nineVHeader[i]);
  9051  0013FA  0E28               	movlw	low _nineVHeader
  9052  0013FC  0101               	movlb	1	; () banked
  9053  0013FE  252C               	addwf	logPC@i_953& (0+255),w,b
  9054  001400  6EF6               	movwf	tblptrl,c
  9055  001402  0EFD               	movlw	high _nineVHeader
  9056  001404  212D               	addwfc	(logPC@i_953+1)& (0+255),w,b
  9057  001406  6EF7               	movwf	tblptrh,c
  9058  001408                     	if	0	;There are less than 3 active tblptr bytes
  9059  001408                     	endif
  9060  001408  0008               	tblrd		*
  9061  00140A  50F5               	movf	tablat,w,c
  9062  00140C  0100               	movlb	0	; () banked
  9063  00140E  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9064  001410  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  9065  001412  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  9066                           
  9067                           ;main.c: 934: I2C_Master_Stop();
  9068  001416  EC0F  F01C         	call	_I2C_Master_Stop	;wreg free
  9069  00141A  0101               	movlb	1	; () banked
  9070  00141C  4B2C               	infsnz	logPC@i_953& (0+255),f,b
  9071  00141E  2B2D               	incf	(logPC@i_953+1)& (0+255),f,b
  9072                           
  9073                           ; BSR set to: 1
  9074  001420  0101               	movlb	1	; () banked
  9075  001422  512D               	movf	(logPC@i_953+1)& (0+255),w,b
  9076  001424  E101               	bnz	u6760
  9077  001426  D7DB               	goto	L3
  9078  001428                     u6760:
  9079  001428                     l563:
  9080                           
  9081                           ; BSR set to: 1
  9082                           ;main.c: 935: }
  9083                           ;main.c: 936: char number9V[2] = "  ";
  9084  001428  C0F4  F11A         	movff	logPC@F3238,logPC@number9V
  9085  00142C  C0F5  F11B         	movff	logPC@F3238+1,logPC@number9V+1
  9086                           
  9087                           ; BSR set to: 1
  9088                           ;main.c: 937: number9V[0] = getChar(getTens(num9V));
  9089  001430  C0E6  F087         	movff	_num9V,getTens@num
  9090  001434  0100               	movlb	0	; () banked
  9091  001436  6B88               	clrf	(getTens@num+1)& (0+255),b
  9092  001438  EC90  F01A         	call	_getTens	;wreg free
  9093  00143C  C087  F08E         	movff	?_getTens,getChar@num
  9094  001440  C088  F08F         	movff	?_getTens+1,getChar@num+1
  9095  001444  EC0B  F01C         	call	_getChar	;wreg free
  9096  001448  0101               	movlb	1	; () banked
  9097  00144A  6F1A               	movwf	logPC@number9V& (0+255),b
  9098                           
  9099                           ;main.c: 938: number9V[1] = getChar(getOnes(num9V));
  9100  00144C  C0E6  F08C         	movff	_num9V,getOnes@num
  9101  001450  0100               	movlb	0	; () banked
  9102  001452  6B8D               	clrf	(getOnes@num+1)& (0+255),b
  9103  001454  EC60  F01B         	call	_getOnes	;wreg free
  9104  001458  C08C  F08E         	movff	?_getOnes,getChar@num
  9105  00145C  C08D  F08F         	movff	?_getOnes+1,getChar@num+1
  9106  001460  EC0B  F01C         	call	_getChar	;wreg free
  9107  001464  0101               	movlb	1	; () banked
  9108  001466  6F1B               	movwf	(logPC@number9V+1)& (0+255),b
  9109                           
  9110                           ; BSR set to: 1
  9111                           ;main.c: 939: for(unsigned int i = 0; i < 2; i++) {
  9112  001468  0E00               	movlw	0
  9113  00146A  0101               	movlb	1	; () banked
  9114  00146C  6F2F               	movwf	(logPC@i_956+1)& (0+255),b
  9115  00146E  0E00               	movlw	0
  9116  001470  6F2E               	movwf	logPC@i_956& (0+255),b
  9117  001472                     l6937:
  9118                           
  9119                           ; BSR set to: 1
  9120  001472  0101               	movlb	1	; () banked
  9121  001474  512F               	movf	(logPC@i_956+1)& (0+255),w,b
  9122  001476  E126               	bnz	l6951
  9123  001478  0E02               	movlw	2
  9124  00147A  0101               	movlb	1	; () banked
  9125  00147C  5D2E               	subwf	logPC@i_956& (0+255),w,b
  9126  00147E  B0D8               	btfsc	status,0,c
  9127  001480  D021               	goto	l6951
  9128                           
  9129                           ; BSR set to: 1
  9130                           ;main.c: 940: I2C_Master_Start();
  9131                           
  9132                           ; BSR set to: 1
  9133                           
  9134                           ; BSR set to: 1
  9135  001482  EC13  F01C         	call	_I2C_Master_Start	;wreg free
  9136                           
  9137                           ;main.c: 941: I2C_Master_Write(0b00010000);
  9138  001486  0E00               	movlw	0
  9139  001488  0100               	movlb	0	; () banked
  9140  00148A  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9141  00148C  0E10               	movlw	16
  9142  00148E  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9143  001490  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  9144                           
  9145                           ;main.c: 942: I2C_Master_Write(number9V[i]);
  9146  001494  0E1A               	movlw	low logPC@number9V
  9147  001496  0101               	movlb	1	; () banked
  9148  001498  252E               	addwf	logPC@i_956& (0+255),w,b
  9149  00149A  6ED9               	movwf	fsr2l,c
  9150  00149C  0E01               	movlw	high logPC@number9V
  9151  00149E  0101               	movlb	1	; () banked
  9152  0014A0  212F               	addwfc	(logPC@i_956+1)& (0+255),w,b
  9153  0014A2  6EDA               	movwf	fsr2h,c
  9154  0014A4  50DF               	movf	indf2,w,c
  9155  0014A6  0100               	movlb	0	; () banked
  9156  0014A8  6F90               	movwf	??_logPC& (0+255),b
  9157  0014AA  0100               	movlb	0	; () banked
  9158  0014AC  5190               	movf	??_logPC& (0+255),w,b
  9159  0014AE  0100               	movlb	0	; () banked
  9160  0014B0  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9161  0014B2  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  9162  0014B4  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  9163                           
  9164                           ;main.c: 943: I2C_Master_Stop();
  9165  0014B8  EC0F  F01C         	call	_I2C_Master_Stop	;wreg free
  9166  0014BC  0101               	movlb	1	; () banked
  9167  0014BE  4B2E               	infsnz	logPC@i_956& (0+255),f,b
  9168  0014C0  2B2F               	incf	(logPC@i_956+1)& (0+255),f,b
  9169  0014C2  D7D7               	goto	l6937
  9170  0014C4                     l6951:
  9171                           
  9172                           ; BSR set to: 1
  9173                           ;main.c: 944: }
  9174                           ;main.c: 946: I2C_Master_Start();
  9175  0014C4  EC13  F01C         	call	_I2C_Master_Start	;wreg free
  9176                           
  9177                           ;main.c: 947: I2C_Master_Write(0b00010000);
  9178  0014C8  0E00               	movlw	0
  9179  0014CA  0100               	movlb	0	; () banked
  9180  0014CC  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9181  0014CE  0E10               	movlw	16
  9182  0014D0  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9183  0014D2  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  9184                           
  9185                           ;main.c: 948: I2C_Master_Write('\n');
  9186  0014D6  0E00               	movlw	0
  9187  0014D8  0100               	movlb	0	; () banked
  9188  0014DA  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9189  0014DC  0E0A               	movlw	10
  9190  0014DE  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9191  0014E0  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  9192                           
  9193                           ;main.c: 949: I2C_Master_Stop();
  9194  0014E4  EC0F  F01C         	call	_I2C_Master_Stop	;wreg free
  9195                           
  9196                           ;main.c: 950: for(unsigned int i = 0; i < 36; i++) {
  9197  0014E8  0E00               	movlw	0
  9198  0014EA  0101               	movlb	1	; () banked
  9199  0014EC  6F31               	movwf	(logPC@i_957+1)& (0+255),b
  9200  0014EE  0E00               	movlw	0
  9201  0014F0  6F30               	movwf	logPC@i_957& (0+255),b
  9202                           
  9203                           ; BSR set to: 1
  9204  0014F2  0101               	movlb	1	; () banked
  9205  0014F4  5131               	movf	(logPC@i_957+1)& (0+255),w,b
  9206  0014F6  E125               	bnz	l569
  9207  0014F8  0E24               	movlw	36
  9208  0014FA  0101               	movlb	1	; () banked
  9209  0014FC  5D30               	subwf	logPC@i_957& (0+255),w,b
  9210  0014FE  B0D8               	btfsc	status,0,c
  9211  001500  D020               	goto	l569
  9212                           
  9213                           ; BSR set to: 1
  9214                           ;main.c: 951: I2C_Master_Start();
  9215                           
  9216                           ; BSR set to: 1
  9217                           
  9218                           ; BSR set to: 1
  9219  001502  EC13  F01C         	call	_I2C_Master_Start	;wreg free
  9220                           
  9221                           ;main.c: 952: I2C_Master_Write(0b00010000);
  9222  001506  0E00               	movlw	0
  9223  001508  0100               	movlb	0	; () banked
  9224  00150A  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9225  00150C  0E10               	movlw	16
  9226  00150E  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9227  001510  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  9228                           
  9229                           ;main.c: 953: I2C_Master_Write(drainHeader[i]);
  9230  001514  0E9F               	movlw	low _drainHeader
  9231  001516  0101               	movlb	1	; () banked
  9232  001518  2530               	addwf	logPC@i_957& (0+255),w,b
  9233  00151A  6EF6               	movwf	tblptrl,c
  9234  00151C  0EFC               	movlw	high _drainHeader
  9235  00151E  2131               	addwfc	(logPC@i_957+1)& (0+255),w,b
  9236  001520  6EF7               	movwf	tblptrh,c
  9237  001522                     	if	0	;There are less than 3 active tblptr bytes
  9238  001522                     	endif
  9239  001522  0008               	tblrd		*
  9240  001524  50F5               	movf	tablat,w,c
  9241  001526  0100               	movlb	0	; () banked
  9242  001528  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9243  00152A  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  9244  00152C  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  9245                           
  9246                           ;main.c: 954: I2C_Master_Stop();
  9247  001530  EC0F  F01C         	call	_I2C_Master_Stop	;wreg free
  9248  001534  0101               	movlb	1	; () banked
  9249  001536  4B30               	infsnz	logPC@i_957& (0+255),f,b
  9250  001538  2B31               	incf	(logPC@i_957+1)& (0+255),f,b
  9251                           
  9252                           ; BSR set to: 1
  9253  00153A  0101               	movlb	1	; () banked
  9254  00153C  5131               	movf	(logPC@i_957+1)& (0+255),w,b
  9255  00153E  E101               	bnz	u6800
  9256  001540  D7DB               	goto	L4
  9257  001542                     u6800:
  9258  001542                     l569:
  9259                           
  9260                           ; BSR set to: 1
  9261                           ;main.c: 955: }
  9262                           ;main.c: 956: char numberDrain[2] = "  ";
  9263  001542  C0F6  F11C         	movff	logPC@F3242,logPC@numberDrain
  9264  001546  C0F7  F11D         	movff	logPC@F3242+1,logPC@numberDrain+1
  9265                           
  9266                           ; BSR set to: 1
  9267                           ;main.c: 957: numberDrain[0] = getChar(getTens(numDrain));
  9268  00154A  C0EA  F087         	movff	_numDrain,getTens@num
  9269  00154E  0100               	movlb	0	; () banked
  9270  001550  6B88               	clrf	(getTens@num+1)& (0+255),b
  9271  001552  EC90  F01A         	call	_getTens	;wreg free
  9272  001556  C087  F08E         	movff	?_getTens,getChar@num
  9273  00155A  C088  F08F         	movff	?_getTens+1,getChar@num+1
  9274  00155E  EC0B  F01C         	call	_getChar	;wreg free
  9275  001562  0101               	movlb	1	; () banked
  9276  001564  6F1C               	movwf	logPC@numberDrain& (0+255),b
  9277                           
  9278                           ;main.c: 958: numberDrain[1] = getChar(getOnes(numDrain));
  9279  001566  C0EA  F08C         	movff	_numDrain,getOnes@num
  9280  00156A  0100               	movlb	0	; () banked
  9281  00156C  6B8D               	clrf	(getOnes@num+1)& (0+255),b
  9282  00156E  EC60  F01B         	call	_getOnes	;wreg free
  9283  001572  C08C  F08E         	movff	?_getOnes,getChar@num
  9284  001576  C08D  F08F         	movff	?_getOnes+1,getChar@num+1
  9285  00157A  EC0B  F01C         	call	_getChar	;wreg free
  9286  00157E  0101               	movlb	1	; () banked
  9287  001580  6F1D               	movwf	(logPC@numberDrain+1)& (0+255),b
  9288                           
  9289                           ; BSR set to: 1
  9290                           ;main.c: 959: for(unsigned int i = 0; i < 2; i++) {
  9291  001582  0E00               	movlw	0
  9292  001584  0101               	movlb	1	; () banked
  9293  001586  6F33               	movwf	(logPC@i_960+1)& (0+255),b
  9294  001588  0E00               	movlw	0
  9295  00158A  6F32               	movwf	logPC@i_960& (0+255),b
  9296  00158C                     l6973:
  9297                           
  9298                           ; BSR set to: 1
  9299  00158C  0101               	movlb	1	; () banked
  9300  00158E  5133               	movf	(logPC@i_960+1)& (0+255),w,b
  9301  001590  E126               	bnz	l6987
  9302  001592  0E02               	movlw	2
  9303  001594  0101               	movlb	1	; () banked
  9304  001596  5D32               	subwf	logPC@i_960& (0+255),w,b
  9305  001598  B0D8               	btfsc	status,0,c
  9306  00159A  D021               	goto	l6987
  9307                           
  9308                           ; BSR set to: 1
  9309                           ;main.c: 960: I2C_Master_Start();
  9310                           
  9311                           ; BSR set to: 1
  9312                           
  9313                           ; BSR set to: 1
  9314  00159C  EC13  F01C         	call	_I2C_Master_Start	;wreg free
  9315                           
  9316                           ;main.c: 961: I2C_Master_Write(0b00010000);
  9317  0015A0  0E00               	movlw	0
  9318  0015A2  0100               	movlb	0	; () banked
  9319  0015A4  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9320  0015A6  0E10               	movlw	16
  9321  0015A8  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9322  0015AA  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  9323                           
  9324                           ;main.c: 962: I2C_Master_Write(numberDrain[i]);
  9325  0015AE  0E1C               	movlw	low logPC@numberDrain
  9326  0015B0  0101               	movlb	1	; () banked
  9327  0015B2  2532               	addwf	logPC@i_960& (0+255),w,b
  9328  0015B4  6ED9               	movwf	fsr2l,c
  9329  0015B6  0E01               	movlw	high logPC@numberDrain
  9330  0015B8  0101               	movlb	1	; () banked
  9331  0015BA  2133               	addwfc	(logPC@i_960+1)& (0+255),w,b
  9332  0015BC  6EDA               	movwf	fsr2h,c
  9333  0015BE  50DF               	movf	indf2,w,c
  9334  0015C0  0100               	movlb	0	; () banked
  9335  0015C2  6F90               	movwf	??_logPC& (0+255),b
  9336  0015C4  0100               	movlb	0	; () banked
  9337  0015C6  5190               	movf	??_logPC& (0+255),w,b
  9338  0015C8  0100               	movlb	0	; () banked
  9339  0015CA  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9340  0015CC  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  9341  0015CE  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  9342                           
  9343                           ;main.c: 963: I2C_Master_Stop();
  9344  0015D2  EC0F  F01C         	call	_I2C_Master_Stop	;wreg free
  9345  0015D6  0101               	movlb	1	; () banked
  9346  0015D8  4B32               	infsnz	logPC@i_960& (0+255),f,b
  9347  0015DA  2B33               	incf	(logPC@i_960+1)& (0+255),f,b
  9348  0015DC  D7D7               	goto	l6973
  9349  0015DE                     l6987:
  9350                           
  9351                           ; BSR set to: 1
  9352                           ;main.c: 964: }
  9353                           ;main.c: 966: I2C_Master_Start();
  9354  0015DE  EC13  F01C         	call	_I2C_Master_Start	;wreg free
  9355                           
  9356                           ;main.c: 967: I2C_Master_Write(0b00010000);
  9357  0015E2  0E00               	movlw	0
  9358  0015E4  0100               	movlb	0	; () banked
  9359  0015E6  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9360  0015E8  0E10               	movlw	16
  9361  0015EA  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9362  0015EC  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  9363                           
  9364                           ;main.c: 968: I2C_Master_Write('\n');
  9365  0015F0  0E00               	movlw	0
  9366  0015F2  0100               	movlb	0	; () banked
  9367  0015F4  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9368  0015F6  0E0A               	movlw	10
  9369  0015F8  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9370  0015FA  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  9371                           
  9372                           ;main.c: 969: I2C_Master_Stop();
  9373  0015FE  EC0F  F01C         	call	_I2C_Master_Stop	;wreg free
  9374                           
  9375                           ;main.c: 970: for(unsigned int i = 0; i < 34; i++) {
  9376  001602  0E00               	movlw	0
  9377  001604  0101               	movlb	1	; () banked
  9378  001606  6F35               	movwf	(logPC@i_961+1)& (0+255),b
  9379  001608  0E00               	movlw	0
  9380  00160A  6F34               	movwf	logPC@i_961& (0+255),b
  9381                           
  9382                           ; BSR set to: 1
  9383  00160C  0101               	movlb	1	; () banked
  9384  00160E  5135               	movf	(logPC@i_961+1)& (0+255),w,b
  9385  001610  E125               	bnz	l575
  9386  001612  0E22               	movlw	34
  9387  001614  0101               	movlb	1	; () banked
  9388  001616  5D34               	subwf	logPC@i_961& (0+255),w,b
  9389  001618  B0D8               	btfsc	status,0,c
  9390  00161A  D020               	goto	l575
  9391                           
  9392                           ; BSR set to: 1
  9393                           ;main.c: 971: I2C_Master_Start();
  9394                           
  9395                           ; BSR set to: 1
  9396                           
  9397                           ; BSR set to: 1
  9398  00161C  EC13  F01C         	call	_I2C_Master_Start	;wreg free
  9399                           
  9400                           ;main.c: 972: I2C_Master_Write(0b00010000);
  9401  001620  0E00               	movlw	0
  9402  001622  0100               	movlb	0	; () banked
  9403  001624  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9404  001626  0E10               	movlw	16
  9405  001628  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9406  00162A  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  9407                           
  9408                           ;main.c: 973: I2C_Master_Write(totalHeader[i]);
  9409  00162E  0EC4               	movlw	low _totalHeader
  9410  001630  0101               	movlb	1	; () banked
  9411  001632  2534               	addwf	logPC@i_961& (0+255),w,b
  9412  001634  6EF6               	movwf	tblptrl,c
  9413  001636  0EFC               	movlw	high _totalHeader
  9414  001638  2135               	addwfc	(logPC@i_961+1)& (0+255),w,b
  9415  00163A  6EF7               	movwf	tblptrh,c
  9416  00163C                     	if	0	;There are less than 3 active tblptr bytes
  9417  00163C                     	endif
  9418  00163C  0008               	tblrd		*
  9419  00163E  50F5               	movf	tablat,w,c
  9420  001640  0100               	movlb	0	; () banked
  9421  001642  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9422  001644  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  9423  001646  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  9424                           
  9425                           ;main.c: 974: I2C_Master_Stop();
  9426  00164A  EC0F  F01C         	call	_I2C_Master_Stop	;wreg free
  9427  00164E  0101               	movlb	1	; () banked
  9428  001650  4B34               	infsnz	logPC@i_961& (0+255),f,b
  9429  001652  2B35               	incf	(logPC@i_961+1)& (0+255),f,b
  9430                           
  9431                           ; BSR set to: 1
  9432  001654  0101               	movlb	1	; () banked
  9433  001656  5135               	movf	(logPC@i_961+1)& (0+255),w,b
  9434  001658  E101               	bnz	u6840
  9435  00165A  D7DB               	goto	L5
  9436  00165C                     u6840:
  9437  00165C                     l575:
  9438                           
  9439                           ; BSR set to: 1
  9440                           ;main.c: 975: }
  9441                           ;main.c: 976: char numberTotal[2] = "  ";
  9442  00165C  C0F8  F11E         	movff	logPC@F3246,logPC@numberTotal
  9443  001660  C0F9  F11F         	movff	logPC@F3246+1,logPC@numberTotal+1
  9444                           
  9445                           ; BSR set to: 1
  9446                           ;main.c: 977: numberTotal[0] = getChar(getTens(numBats));
  9447  001664  C0E8  F087         	movff	_numBats,getTens@num
  9448  001668  0100               	movlb	0	; () banked
  9449  00166A  6B88               	clrf	(getTens@num+1)& (0+255),b
  9450  00166C  EC90  F01A         	call	_getTens	;wreg free
  9451  001670  C087  F08E         	movff	?_getTens,getChar@num
  9452  001674  C088  F08F         	movff	?_getTens+1,getChar@num+1
  9453  001678  EC0B  F01C         	call	_getChar	;wreg free
  9454  00167C  0101               	movlb	1	; () banked
  9455  00167E  6F1E               	movwf	logPC@numberTotal& (0+255),b
  9456                           
  9457                           ;main.c: 978: numberTotal[1] = getChar(getOnes(numBats));
  9458  001680  C0E8  F08C         	movff	_numBats,getOnes@num
  9459  001684  0100               	movlb	0	; () banked
  9460  001686  6B8D               	clrf	(getOnes@num+1)& (0+255),b
  9461  001688  EC60  F01B         	call	_getOnes	;wreg free
  9462  00168C  C08C  F08E         	movff	?_getOnes,getChar@num
  9463  001690  C08D  F08F         	movff	?_getOnes+1,getChar@num+1
  9464  001694  EC0B  F01C         	call	_getChar	;wreg free
  9465  001698  0101               	movlb	1	; () banked
  9466  00169A  6F1F               	movwf	(logPC@numberTotal+1)& (0+255),b
  9467                           
  9468                           ; BSR set to: 1
  9469                           ;main.c: 979: for(unsigned int i = 0; i < 2; i++) {
  9470  00169C  0E00               	movlw	0
  9471  00169E  0101               	movlb	1	; () banked
  9472  0016A0  6F37               	movwf	(logPC@i_964+1)& (0+255),b
  9473  0016A2  0E00               	movlw	0
  9474  0016A4  6F36               	movwf	logPC@i_964& (0+255),b
  9475  0016A6                     l7009:
  9476                           
  9477                           ; BSR set to: 1
  9478  0016A6  0101               	movlb	1	; () banked
  9479  0016A8  5137               	movf	(logPC@i_964+1)& (0+255),w,b
  9480  0016AA  E126               	bnz	l7023
  9481  0016AC  0E02               	movlw	2
  9482  0016AE  0101               	movlb	1	; () banked
  9483  0016B0  5D36               	subwf	logPC@i_964& (0+255),w,b
  9484  0016B2  B0D8               	btfsc	status,0,c
  9485  0016B4  D021               	goto	l7023
  9486                           
  9487                           ; BSR set to: 1
  9488                           ;main.c: 980: I2C_Master_Start();
  9489                           
  9490                           ; BSR set to: 1
  9491                           
  9492                           ; BSR set to: 1
  9493  0016B6  EC13  F01C         	call	_I2C_Master_Start	;wreg free
  9494                           
  9495                           ;main.c: 981: I2C_Master_Write(0b00010000);
  9496  0016BA  0E00               	movlw	0
  9497  0016BC  0100               	movlb	0	; () banked
  9498  0016BE  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9499  0016C0  0E10               	movlw	16
  9500  0016C2  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9501  0016C4  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  9502                           
  9503                           ;main.c: 982: I2C_Master_Write(numberTotal[i]);
  9504  0016C8  0E1E               	movlw	low logPC@numberTotal
  9505  0016CA  0101               	movlb	1	; () banked
  9506  0016CC  2536               	addwf	logPC@i_964& (0+255),w,b
  9507  0016CE  6ED9               	movwf	fsr2l,c
  9508  0016D0  0E01               	movlw	high logPC@numberTotal
  9509  0016D2  0101               	movlb	1	; () banked
  9510  0016D4  2137               	addwfc	(logPC@i_964+1)& (0+255),w,b
  9511  0016D6  6EDA               	movwf	fsr2h,c
  9512  0016D8  50DF               	movf	indf2,w,c
  9513  0016DA  0100               	movlb	0	; () banked
  9514  0016DC  6F90               	movwf	??_logPC& (0+255),b
  9515  0016DE  0100               	movlb	0	; () banked
  9516  0016E0  5190               	movf	??_logPC& (0+255),w,b
  9517  0016E2  0100               	movlb	0	; () banked
  9518  0016E4  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9519  0016E6  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  9520  0016E8  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  9521                           
  9522                           ;main.c: 983: I2C_Master_Stop();
  9523  0016EC  EC0F  F01C         	call	_I2C_Master_Stop	;wreg free
  9524  0016F0  0101               	movlb	1	; () banked
  9525  0016F2  4B36               	infsnz	logPC@i_964& (0+255),f,b
  9526  0016F4  2B37               	incf	(logPC@i_964+1)& (0+255),f,b
  9527  0016F6  D7D7               	goto	l7009
  9528  0016F8                     l7023:
  9529                           
  9530                           ; BSR set to: 1
  9531                           ;main.c: 984: }
  9532                           ;main.c: 986: I2C_Master_Start();
  9533  0016F8  EC13  F01C         	call	_I2C_Master_Start	;wreg free
  9534                           
  9535                           ;main.c: 987: I2C_Master_Write(0b00010000);
  9536  0016FC  0E00               	movlw	0
  9537  0016FE  0100               	movlb	0	; () banked
  9538  001700  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9539  001702  0E10               	movlw	16
  9540  001704  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9541  001706  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  9542                           
  9543                           ;main.c: 988: I2C_Master_Write('\n');
  9544  00170A  0E00               	movlw	0
  9545  00170C  0100               	movlb	0	; () banked
  9546  00170E  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9547  001710  0E0A               	movlw	10
  9548  001712  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9549  001714  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  9550                           
  9551                           ;main.c: 989: I2C_Master_Stop();
  9552  001718  EC0F  F01C         	call	_I2C_Master_Stop	;wreg free
  9553                           
  9554                           ;main.c: 990: for(unsigned int i = 0; i < 32; i++) {
  9555  00171C  0E00               	movlw	0
  9556  00171E  0101               	movlb	1	; () banked
  9557  001720  6F39               	movwf	(logPC@i_965+1)& (0+255),b
  9558  001722  0E00               	movlw	0
  9559  001724  6F38               	movwf	logPC@i_965& (0+255),b
  9560                           
  9561                           ; BSR set to: 1
  9562  001726  0101               	movlb	1	; () banked
  9563  001728  5139               	movf	(logPC@i_965+1)& (0+255),w,b
  9564  00172A  E125               	bnz	l581
  9565  00172C  0E20               	movlw	32
  9566  00172E  0101               	movlb	1	; () banked
  9567  001730  5D38               	subwf	logPC@i_965& (0+255),w,b
  9568  001732  B0D8               	btfsc	status,0,c
  9569  001734  D020               	goto	l581
  9570                           
  9571                           ; BSR set to: 1
  9572                           ;main.c: 991: I2C_Master_Start();
  9573                           
  9574                           ; BSR set to: 1
  9575                           
  9576                           ; BSR set to: 1
  9577  001736  EC13  F01C         	call	_I2C_Master_Start	;wreg free
  9578                           
  9579                           ;main.c: 992: I2C_Master_Write(0b00010000);
  9580  00173A  0E00               	movlw	0
  9581  00173C  0100               	movlb	0	; () banked
  9582  00173E  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9583  001740  0E10               	movlw	16
  9584  001742  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9585  001744  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  9586                           
  9587                           ;main.c: 993: I2C_Master_Write(runTimeHeader[i]);
  9588  001748  0EE7               	movlw	low _runTimeHeader
  9589  00174A  0101               	movlb	1	; () banked
  9590  00174C  2538               	addwf	logPC@i_965& (0+255),w,b
  9591  00174E  6EF6               	movwf	tblptrl,c
  9592  001750  0EFC               	movlw	high _runTimeHeader
  9593  001752  2139               	addwfc	(logPC@i_965+1)& (0+255),w,b
  9594  001754  6EF7               	movwf	tblptrh,c
  9595  001756                     	if	0	;There are less than 3 active tblptr bytes
  9596  001756                     	endif
  9597  001756  0008               	tblrd		*
  9598  001758  50F5               	movf	tablat,w,c
  9599  00175A  0100               	movlb	0	; () banked
  9600  00175C  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9601  00175E  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  9602  001760  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  9603                           
  9604                           ;main.c: 994: I2C_Master_Stop();
  9605  001764  EC0F  F01C         	call	_I2C_Master_Stop	;wreg free
  9606  001768  0101               	movlb	1	; () banked
  9607  00176A  4B38               	infsnz	logPC@i_965& (0+255),f,b
  9608  00176C  2B39               	incf	(logPC@i_965+1)& (0+255),f,b
  9609                           
  9610                           ; BSR set to: 1
  9611  00176E  0101               	movlb	1	; () banked
  9612  001770  5139               	movf	(logPC@i_965+1)& (0+255),w,b
  9613  001772  E101               	bnz	u6880
  9614  001774  D7DB               	goto	L6
  9615  001776                     u6880:
  9616  001776                     l581:
  9617                           
  9618                           ; BSR set to: 1
  9619                           ;main.c: 995: }
  9620                           ;main.c: 996: char runTime[3] = "   ";
  9621  001776  C0ED  F113         	movff	logPC@F3250,logPC@runTime
  9622  00177A  C0EE  F114         	movff	logPC@F3250+1,logPC@runTime+1
  9623  00177E  C0EF  F115         	movff	logPC@F3250+2,logPC@runTime+2
  9624                           
  9625                           ; BSR set to: 1
  9626                           ;main.c: 997: runTime[0] = getChar(getHundreds(min*60+sec));
  9627  001782  0100               	movlb	0	; () banked
  9628  001784  51E5               	movf	_min& (0+255),w,b
  9629  001786  0D3C               	mullw	60
  9630  001788  0100               	movlb	0	; () banked
  9631  00178A  51EB               	movf	_sec& (0+255),w,b
  9632  00178C  24F3               	addwf	prodl,w,c
  9633  00178E  0100               	movlb	0	; () banked
  9634  001790  6F87               	movwf	getHundreds@num& (0+255),b
  9635  001792  0100               	movlb	0	; () banked
  9636  001794  0E00               	movlw	0
  9637  001796  20F4               	addwfc	prodh,w,c
  9638  001798  0100               	movlb	0	; () banked
  9639  00179A  6F88               	movwf	(getHundreds@num+1)& (0+255),b
  9640  00179C  ECAE  F01A         	call	_getHundreds	;wreg free
  9641  0017A0  C087  F08E         	movff	?_getHundreds,getChar@num
  9642  0017A4  C088  F08F         	movff	?_getHundreds+1,getChar@num+1
  9643  0017A8  EC0B  F01C         	call	_getChar	;wreg free
  9644  0017AC  0101               	movlb	1	; () banked
  9645  0017AE  6F13               	movwf	logPC@runTime& (0+255),b
  9646                           
  9647                           ;main.c: 998: runTime[1] = getChar(getTens(min*60+sec));
  9648  0017B0  0100               	movlb	0	; () banked
  9649  0017B2  51E5               	movf	_min& (0+255),w,b
  9650  0017B4  0D3C               	mullw	60
  9651  0017B6  0100               	movlb	0	; () banked
  9652  0017B8  51EB               	movf	_sec& (0+255),w,b
  9653  0017BA  24F3               	addwf	prodl,w,c
  9654  0017BC  0100               	movlb	0	; () banked
  9655  0017BE  6F87               	movwf	getTens@num& (0+255),b
  9656  0017C0  0100               	movlb	0	; () banked
  9657  0017C2  0E00               	movlw	0
  9658  0017C4  20F4               	addwfc	prodh,w,c
  9659  0017C6  0100               	movlb	0	; () banked
  9660  0017C8  6F88               	movwf	(getTens@num+1)& (0+255),b
  9661  0017CA  EC90  F01A         	call	_getTens	;wreg free
  9662  0017CE  C087  F08E         	movff	?_getTens,getChar@num
  9663  0017D2  C088  F08F         	movff	?_getTens+1,getChar@num+1
  9664  0017D6  EC0B  F01C         	call	_getChar	;wreg free
  9665  0017DA  0101               	movlb	1	; () banked
  9666  0017DC  6F14               	movwf	(logPC@runTime+1)& (0+255),b
  9667                           
  9668                           ;main.c: 999: runTime[2] = getChar(getOnes(min*60+sec));
  9669  0017DE  0100               	movlb	0	; () banked
  9670  0017E0  51E5               	movf	_min& (0+255),w,b
  9671  0017E2  0D3C               	mullw	60
  9672  0017E4  0100               	movlb	0	; () banked
  9673  0017E6  51EB               	movf	_sec& (0+255),w,b
  9674  0017E8  24F3               	addwf	prodl,w,c
  9675  0017EA  0100               	movlb	0	; () banked
  9676  0017EC  6F8C               	movwf	getOnes@num& (0+255),b
  9677  0017EE  0100               	movlb	0	; () banked
  9678  0017F0  0E00               	movlw	0
  9679  0017F2  20F4               	addwfc	prodh,w,c
  9680  0017F4  0100               	movlb	0	; () banked
  9681  0017F6  6F8D               	movwf	(getOnes@num+1)& (0+255),b
  9682  0017F8  EC60  F01B         	call	_getOnes	;wreg free
  9683  0017FC  C08C  F08E         	movff	?_getOnes,getChar@num
  9684  001800  C08D  F08F         	movff	?_getOnes+1,getChar@num+1
  9685  001804  EC0B  F01C         	call	_getChar	;wreg free
  9686  001808  0101               	movlb	1	; () banked
  9687  00180A  6F15               	movwf	(logPC@runTime+2)& (0+255),b
  9688                           
  9689                           ; BSR set to: 1
  9690                           ;main.c: 1000: for(unsigned int i = 0; i < 3; i++) {
  9691  00180C  0E00               	movlw	0
  9692  00180E  0101               	movlb	1	; () banked
  9693  001810  6F3B               	movwf	(logPC@i_968+1)& (0+255),b
  9694  001812  0E00               	movlw	0
  9695  001814  6F3A               	movwf	logPC@i_968& (0+255),b
  9696  001816                     l7045:
  9697                           
  9698                           ; BSR set to: 1
  9699  001816  0101               	movlb	1	; () banked
  9700  001818  513B               	movf	(logPC@i_968+1)& (0+255),w,b
  9701  00181A  E126               	bnz	l7059
  9702  00181C  0E03               	movlw	3
  9703  00181E  0101               	movlb	1	; () banked
  9704  001820  5D3A               	subwf	logPC@i_968& (0+255),w,b
  9705  001822  B0D8               	btfsc	status,0,c
  9706  001824  D021               	goto	l7059
  9707                           
  9708                           ; BSR set to: 1
  9709                           ;main.c: 1001: I2C_Master_Start();
  9710                           
  9711                           ; BSR set to: 1
  9712                           
  9713                           ; BSR set to: 1
  9714  001826  EC13  F01C         	call	_I2C_Master_Start	;wreg free
  9715                           
  9716                           ;main.c: 1002: I2C_Master_Write(0b00010000);
  9717  00182A  0E00               	movlw	0
  9718  00182C  0100               	movlb	0	; () banked
  9719  00182E  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9720  001830  0E10               	movlw	16
  9721  001832  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9722  001834  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  9723                           
  9724                           ;main.c: 1003: I2C_Master_Write(runTime[i]);
  9725  001838  0E13               	movlw	low logPC@runTime
  9726  00183A  0101               	movlb	1	; () banked
  9727  00183C  253A               	addwf	logPC@i_968& (0+255),w,b
  9728  00183E  6ED9               	movwf	fsr2l,c
  9729  001840  0E01               	movlw	high logPC@runTime
  9730  001842  0101               	movlb	1	; () banked
  9731  001844  213B               	addwfc	(logPC@i_968+1)& (0+255),w,b
  9732  001846  6EDA               	movwf	fsr2h,c
  9733  001848  50DF               	movf	indf2,w,c
  9734  00184A  0100               	movlb	0	; () banked
  9735  00184C  6F90               	movwf	??_logPC& (0+255),b
  9736  00184E  0100               	movlb	0	; () banked
  9737  001850  5190               	movf	??_logPC& (0+255),w,b
  9738  001852  0100               	movlb	0	; () banked
  9739  001854  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9740  001856  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  9741  001858  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  9742                           
  9743                           ;main.c: 1004: I2C_Master_Stop();
  9744  00185C  EC0F  F01C         	call	_I2C_Master_Stop	;wreg free
  9745  001860  0101               	movlb	1	; () banked
  9746  001862  4B3A               	infsnz	logPC@i_968& (0+255),f,b
  9747  001864  2B3B               	incf	(logPC@i_968+1)& (0+255),f,b
  9748  001866  D7D7               	goto	l7045
  9749  001868                     l7059:
  9750                           
  9751                           ; BSR set to: 1
  9752                           ;main.c: 1005: }
  9753                           ;main.c: 1006: I2C_Master_Start();
  9754  001868  EC13  F01C         	call	_I2C_Master_Start	;wreg free
  9755                           
  9756                           ;main.c: 1007: I2C_Master_Write(0b00010000);
  9757  00186C  0E00               	movlw	0
  9758  00186E  0100               	movlb	0	; () banked
  9759  001870  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9760  001872  0E10               	movlw	16
  9761  001874  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9762  001876  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  9763                           
  9764                           ;main.c: 1008: I2C_Master_Write('\n');
  9765  00187A  0E00               	movlw	0
  9766  00187C  0100               	movlb	0	; () banked
  9767  00187E  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9768  001880  0E0A               	movlw	10
  9769  001882  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9770  001884  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  9771                           
  9772                           ;main.c: 1009: I2C_Master_Stop();
  9773  001888  EC0F  F01C         	call	_I2C_Master_Stop	;wreg free
  9774                           
  9775                           ;main.c: 1010: I2C_Master_Start();
  9776  00188C  EC13  F01C         	call	_I2C_Master_Start	;wreg free
  9777                           
  9778                           ;main.c: 1011: I2C_Master_Write(0b00010000);
  9779  001890  0E00               	movlw	0
  9780  001892  0100               	movlb	0	; () banked
  9781  001894  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9782  001896  0E10               	movlw	16
  9783  001898  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9784  00189A  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  9785                           
  9786                           ;main.c: 1012: I2C_Master_Write('\n');
  9787  00189E  0E00               	movlw	0
  9788  0018A0  0100               	movlb	0	; () banked
  9789  0018A2  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9790  0018A4  0E0A               	movlw	10
  9791  0018A6  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9792  0018A8  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  9793                           
  9794                           ;main.c: 1013: I2C_Master_Stop();
  9795  0018AC  EC0F  F01C         	call	_I2C_Master_Stop	;wreg free
  9796  0018B0  0012               	return		;funcret
  9797  0018B2                     __end_of_logPC:
  9798                           	opt stack 0
  9799                           tblptru	equ	0xFF8
  9800                           tblptrh	equ	0xFF7
  9801                           tblptrl	equ	0xFF6
  9802                           tablat	equ	0xFF5
  9803                           prodh	equ	0xFF4
  9804                           prodl	equ	0xFF3
  9805                           intcon	equ	0xFF2
  9806                           intcon2	equ	0xFF1
  9807                           intcon3	equ	0xFF0
  9808                           postinc0	equ	0xFEE
  9809                           wreg	equ	0xFE8
  9810                           postdec1	equ	0xFE5
  9811                           plusw1	equ	0xFE3
  9812                           fsr1l	equ	0xFE1
  9813                           indf2	equ	0xFDF
  9814                           postinc2	equ	0xFDE
  9815                           postdec2	equ	0xFDD
  9816                           plusw2	equ	0xFDB
  9817                           fsr2h	equ	0xFDA
  9818                           fsr2l	equ	0xFD9
  9819                           status	equ	0xFD8
  9820                           
  9821 ;; *************** function _getTens *****************
  9822 ;; Defined at:
  9823 ;;		line 1021 in file "../main.c"
  9824 ;; Parameters:    Size  Location     Type
  9825 ;;  num             2    7[BANK0 ] unsigned int 
  9826 ;; Auto vars:     Size  Location     Type
  9827 ;;		None
  9828 ;; Return value:  Size  Location     Type
  9829 ;;                  2    7[BANK0 ] int 
  9830 ;; Registers used:
  9831 ;;		wreg, status,2, status,0, cstack
  9832 ;; Tracked objects:
  9833 ;;		On entry : 0/0
  9834 ;;		On exit  : 0/0
  9835 ;;		Unchanged: 0/0
  9836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9837 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9838 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9839 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9840 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9841 ;;Total ram usage:        2 bytes
  9842 ;; Hardware stack levels used:    1
  9843 ;; Hardware stack levels required when called:    6
  9844 ;; This function calls:
  9845 ;;		___lwdiv
  9846 ;; This function is called by:
  9847 ;;		_logPC
  9848 ;; This function uses a non-reentrant model
  9849 ;;
  9850                           
  9851                           	psect	text16
  9852  003520                     __ptext16:
  9853                           	opt stack 0
  9854  003520                     _getTens:
  9855                           	opt stack 23
  9856                           
  9857                           ;main.c: 1022: if(num > 9) { return (int)(num / 10); }
  9858                           
  9859                           ;incstack = 0
  9860  003520  0100               	movlb	0	; () banked
  9861  003522  5188               	movf	(getTens@num+1)& (0+255),w,b
  9862  003524  E105               	bnz	u6170
  9863  003526  0E0A               	movlw	10
  9864  003528  0100               	movlb	0	; () banked
  9865  00352A  5D87               	subwf	getTens@num& (0+255),w,b
  9866  00352C  A0D8               	btfss	status,0,c
  9867  00352E  D010               	goto	l6295
  9868  003530                     u6170:
  9869                           
  9870                           ; BSR set to: 0
  9871  003530  C087  F080         	movff	getTens@num,___lwdiv@dividend
  9872  003534  C088  F081         	movff	getTens@num+1,___lwdiv@dividend+1
  9873  003538  0E00               	movlw	0
  9874  00353A  0100               	movlb	0	; () banked
  9875  00353C  6F83               	movwf	(___lwdiv@divisor+1)& (0+255),b
  9876  00353E  0E0A               	movlw	10
  9877  003540  6F82               	movwf	___lwdiv@divisor& (0+255),b
  9878  003542  ECC2  F018         	call	___lwdiv	;wreg free
  9879  003546  C080  F087         	movff	?___lwdiv,?_getTens
  9880  00354A  C081  F088         	movff	?___lwdiv+1,?_getTens+1
  9881  00354E  0012               	return	
  9882  003550                     l6295:
  9883                           
  9884                           ;main.c: 1023: return 0;
  9885  003550  0E00               	movlw	0
  9886  003552  0100               	movlb	0	; () banked
  9887  003554  6F88               	movwf	(?_getTens+1)& (0+255),b
  9888  003556  0E00               	movlw	0
  9889  003558  6F87               	movwf	?_getTens& (0+255),b
  9890  00355A  0012               	return	
  9891  00355C                     __end_of_getTens:
  9892                           	opt stack 0
  9893                           tblptru	equ	0xFF8
  9894                           tblptrh	equ	0xFF7
  9895                           tblptrl	equ	0xFF6
  9896                           tablat	equ	0xFF5
  9897                           prodh	equ	0xFF4
  9898                           prodl	equ	0xFF3
  9899                           intcon	equ	0xFF2
  9900                           intcon2	equ	0xFF1
  9901                           intcon3	equ	0xFF0
  9902                           postinc0	equ	0xFEE
  9903                           wreg	equ	0xFE8
  9904                           postdec1	equ	0xFE5
  9905                           plusw1	equ	0xFE3
  9906                           fsr1l	equ	0xFE1
  9907                           indf2	equ	0xFDF
  9908                           postinc2	equ	0xFDE
  9909                           postdec2	equ	0xFDD
  9910                           plusw2	equ	0xFDB
  9911                           fsr2h	equ	0xFDA
  9912                           fsr2l	equ	0xFD9
  9913                           status	equ	0xFD8
  9914                           
  9915 ;; *************** function _getOnes *****************
  9916 ;; Defined at:
  9917 ;;		line 1026 in file "../main.c"
  9918 ;; Parameters:    Size  Location     Type
  9919 ;;  num             2   12[BANK0 ] unsigned int 
  9920 ;; Auto vars:     Size  Location     Type
  9921 ;;		None
  9922 ;; Return value:  Size  Location     Type
  9923 ;;                  2   12[BANK0 ] int 
  9924 ;; Registers used:
  9925 ;;		wreg, status,2, status,0, cstack
  9926 ;; Tracked objects:
  9927 ;;		On entry : 0/0
  9928 ;;		On exit  : 0/0
  9929 ;;		Unchanged: 0/0
  9930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9931 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9932 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9933 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9934 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9935 ;;Total ram usage:        2 bytes
  9936 ;; Hardware stack levels used:    1
  9937 ;; Hardware stack levels required when called:    6
  9938 ;; This function calls:
  9939 ;;		___lwmod
  9940 ;; This function is called by:
  9941 ;;		_logPC
  9942 ;; This function uses a non-reentrant model
  9943 ;;
  9944                           
  9945                           	psect	text17
  9946  0036C0                     __ptext17:
  9947                           	opt stack 0
  9948  0036C0                     _getOnes:
  9949                           	opt stack 23
  9950                           
  9951                           ;main.c: 1027: return num % 10;
  9952                           
  9953                           ;incstack = 0
  9954  0036C0  C08C  F087         	movff	getOnes@num,___lwmod@dividend
  9955  0036C4  C08D  F088         	movff	getOnes@num+1,___lwmod@dividend+1
  9956  0036C8  0E00               	movlw	0
  9957  0036CA  0100               	movlb	0	; () banked
  9958  0036CC  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
  9959  0036CE  0E0A               	movlw	10
  9960  0036D0  6F89               	movwf	___lwmod@divisor& (0+255),b
  9961  0036D2  EC69  F019         	call	___lwmod	;wreg free
  9962  0036D6  C087  F08C         	movff	?___lwmod,?_getOnes
  9963  0036DA  C088  F08D         	movff	?___lwmod+1,?_getOnes+1
  9964  0036DE  0012               	return	
  9965  0036E0                     __end_of_getOnes:
  9966                           	opt stack 0
  9967                           tblptru	equ	0xFF8
  9968                           tblptrh	equ	0xFF7
  9969                           tblptrl	equ	0xFF6
  9970                           tablat	equ	0xFF5
  9971                           prodh	equ	0xFF4
  9972                           prodl	equ	0xFF3
  9973                           intcon	equ	0xFF2
  9974                           intcon2	equ	0xFF1
  9975                           intcon3	equ	0xFF0
  9976                           postinc0	equ	0xFEE
  9977                           wreg	equ	0xFE8
  9978                           postdec1	equ	0xFE5
  9979                           plusw1	equ	0xFE3
  9980                           fsr1l	equ	0xFE1
  9981                           indf2	equ	0xFDF
  9982                           postinc2	equ	0xFDE
  9983                           postdec2	equ	0xFDD
  9984                           plusw2	equ	0xFDB
  9985                           fsr2h	equ	0xFDA
  9986                           fsr2l	equ	0xFD9
  9987                           status	equ	0xFD8
  9988                           
  9989 ;; *************** function ___lwmod *****************
  9990 ;; Defined at:
  9991 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  9992 ;; Parameters:    Size  Location     Type
  9993 ;;  dividend        2    7[BANK0 ] unsigned int 
  9994 ;;  divisor         2    9[BANK0 ] unsigned int 
  9995 ;; Auto vars:     Size  Location     Type
  9996 ;;  counter         1   11[BANK0 ] unsigned char 
  9997 ;; Return value:  Size  Location     Type
  9998 ;;                  2    7[BANK0 ] unsigned int 
  9999 ;; Registers used:
 10000 ;;		wreg, status,2, status,0
 10001 ;; Tracked objects:
 10002 ;;		On entry : 0/0
 10003 ;;		On exit  : 0/0
 10004 ;;		Unchanged: 0/0
 10005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10006 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10007 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10008 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10009 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10010 ;;Total ram usage:        5 bytes
 10011 ;; Hardware stack levels used:    1
 10012 ;; Hardware stack levels required when called:    5
 10013 ;; This function calls:
 10014 ;;		Nothing
 10015 ;; This function is called by:
 10016 ;;		_getOnes
 10017 ;;		_printf
 10018 ;; This function uses a non-reentrant model
 10019 ;;
 10020                           
 10021                           	psect	text18
 10022  0032D2                     __ptext18:
 10023                           	opt stack 0
 10024  0032D2                     ___lwmod:
 10025                           	opt stack 23
 10026                           
 10027                           ;incstack = 0
 10028  0032D2  0100               	movlb	0	; () banked
 10029  0032D4  5189               	movf	___lwmod@divisor& (0+255),w,b
 10030  0032D6  0100               	movlb	0	; () banked
 10031  0032D8  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 10032  0032DA  B4D8               	btfsc	status,2,c
 10033  0032DC  D026               	goto	l1130
 10034                           
 10035                           ; BSR set to: 0
 10036  0032DE  0E01               	movlw	1
 10037  0032E0  0100               	movlb	0	; () banked
 10038  0032E2  6F8B               	movwf	___lwmod@counter& (0+255),b
 10039  0032E4  D006               	goto	l6095
 10040  0032E6                     l6093:
 10041                           
 10042                           ; BSR set to: 0
 10043  0032E6  0100               	movlb	0	; () banked
 10044  0032E8  90D8               	bcf	status,0,c
 10045  0032EA  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 10046  0032EC  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 10047  0032EE  0100               	movlb	0	; () banked
 10048  0032F0  2B8B               	incf	___lwmod@counter& (0+255),f,b
 10049  0032F2                     l6095:
 10050                           
 10051                           ; BSR set to: 0
 10052  0032F2  0100               	movlb	0	; () banked
 10053  0032F4  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 10054  0032F6  D7F7               	goto	l6093
 10055  0032F8                     l6097:
 10056                           
 10057                           ; BSR set to: 0
 10058  0032F8  0100               	movlb	0	; () banked
 10059  0032FA  5189               	movf	___lwmod@divisor& (0+255),w,b
 10060  0032FC  0100               	movlb	0	; () banked
 10061  0032FE  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 10062  003300  0100               	movlb	0	; () banked
 10063  003302  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 10064  003304  0100               	movlb	0	; () banked
 10065  003306  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 10066  003308  A0D8               	btfss	status,0,c
 10067  00330A  D008               	goto	l6101
 10068                           
 10069                           ; BSR set to: 0
 10070  00330C  0100               	movlb	0	; () banked
 10071  00330E  5189               	movf	___lwmod@divisor& (0+255),w,b
 10072  003310  0100               	movlb	0	; () banked
 10073  003312  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 10074  003314  0100               	movlb	0	; () banked
 10075  003316  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 10076  003318  0100               	movlb	0	; () banked
 10077  00331A  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 10078  00331C                     l6101:
 10079                           
 10080                           ; BSR set to: 0
 10081  00331C  0100               	movlb	0	; () banked
 10082  00331E  90D8               	bcf	status,0,c
 10083  003320  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 10084  003322  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 10085                           
 10086                           ; BSR set to: 0
 10087  003324  0100               	movlb	0	; () banked
 10088  003326  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 10089  003328  D7E7               	goto	l6097
 10090  00332A                     l1130:
 10091                           
 10092                           ; BSR set to: 0
 10093  00332A  C087  F087         	movff	___lwmod@dividend,?___lwmod
 10094  00332E  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 10095                           
 10096                           ; BSR set to: 0
 10097  003332  0012               	return		;funcret
 10098  003334                     __end_of___lwmod:
 10099                           	opt stack 0
 10100                           tblptru	equ	0xFF8
 10101                           tblptrh	equ	0xFF7
 10102                           tblptrl	equ	0xFF6
 10103                           tablat	equ	0xFF5
 10104                           prodh	equ	0xFF4
 10105                           prodl	equ	0xFF3
 10106                           intcon	equ	0xFF2
 10107                           intcon2	equ	0xFF1
 10108                           intcon3	equ	0xFF0
 10109                           postinc0	equ	0xFEE
 10110                           wreg	equ	0xFE8
 10111                           postdec1	equ	0xFE5
 10112                           plusw1	equ	0xFE3
 10113                           fsr1l	equ	0xFE1
 10114                           indf2	equ	0xFDF
 10115                           postinc2	equ	0xFDE
 10116                           postdec2	equ	0xFDD
 10117                           plusw2	equ	0xFDB
 10118                           fsr2h	equ	0xFDA
 10119                           fsr2l	equ	0xFD9
 10120                           status	equ	0xFD8
 10121                           
 10122 ;; *************** function _getHundreds *****************
 10123 ;; Defined at:
 10124 ;;		line 1016 in file "../main.c"
 10125 ;; Parameters:    Size  Location     Type
 10126 ;;  num             2    7[BANK0 ] unsigned int 
 10127 ;; Auto vars:     Size  Location     Type
 10128 ;;		None
 10129 ;; Return value:  Size  Location     Type
 10130 ;;                  2    7[BANK0 ] int 
 10131 ;; Registers used:
 10132 ;;		wreg, status,2, status,0, cstack
 10133 ;; Tracked objects:
 10134 ;;		On entry : 0/0
 10135 ;;		On exit  : 0/0
 10136 ;;		Unchanged: 0/0
 10137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10138 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10139 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10140 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10141 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10142 ;;Total ram usage:        2 bytes
 10143 ;; Hardware stack levels used:    1
 10144 ;; Hardware stack levels required when called:    6
 10145 ;; This function calls:
 10146 ;;		___lwdiv
 10147 ;; This function is called by:
 10148 ;;		_logPC
 10149 ;; This function uses a non-reentrant model
 10150 ;;
 10151                           
 10152                           	psect	text19
 10153  00355C                     __ptext19:
 10154                           	opt stack 0
 10155  00355C                     _getHundreds:
 10156                           	opt stack 23
 10157                           
 10158                           ;main.c: 1017: if(num > 99) { return (int)(num / 100); }
 10159                           
 10160                           ; BSR set to: 0
 10161                           ;incstack = 0
 10162  00355C  0100               	movlb	0	; () banked
 10163  00355E  5188               	movf	(getHundreds@num+1)& (0+255),w,b
 10164  003560  E105               	bnz	u6180
 10165  003562  0E64               	movlw	100
 10166  003564  0100               	movlb	0	; () banked
 10167  003566  5D87               	subwf	getHundreds@num& (0+255),w,b
 10168  003568  A0D8               	btfss	status,0,c
 10169  00356A  D010               	goto	l6313
 10170  00356C                     u6180:
 10171                           
 10172                           ; BSR set to: 0
 10173  00356C  C087  F080         	movff	getHundreds@num,___lwdiv@dividend
 10174  003570  C088  F081         	movff	getHundreds@num+1,___lwdiv@dividend+1
 10175  003574  0E00               	movlw	0
 10176  003576  0100               	movlb	0	; () banked
 10177  003578  6F83               	movwf	(___lwdiv@divisor+1)& (0+255),b
 10178  00357A  0E64               	movlw	100
 10179  00357C  6F82               	movwf	___lwdiv@divisor& (0+255),b
 10180  00357E  ECC2  F018         	call	___lwdiv	;wreg free
 10181  003582  C080  F087         	movff	?___lwdiv,?_getHundreds
 10182  003586  C081  F088         	movff	?___lwdiv+1,?_getHundreds+1
 10183  00358A  0012               	return	
 10184  00358C                     l6313:
 10185                           
 10186                           ;main.c: 1018: return 0;
 10187  00358C  0E00               	movlw	0
 10188  00358E  0100               	movlb	0	; () banked
 10189  003590  6F88               	movwf	(?_getHundreds+1)& (0+255),b
 10190  003592  0E00               	movlw	0
 10191  003594  6F87               	movwf	?_getHundreds& (0+255),b
 10192  003596  0012               	return	
 10193  003598                     __end_of_getHundreds:
 10194                           	opt stack 0
 10195                           tblptru	equ	0xFF8
 10196                           tblptrh	equ	0xFF7
 10197                           tblptrl	equ	0xFF6
 10198                           tablat	equ	0xFF5
 10199                           prodh	equ	0xFF4
 10200                           prodl	equ	0xFF3
 10201                           intcon	equ	0xFF2
 10202                           intcon2	equ	0xFF1
 10203                           intcon3	equ	0xFF0
 10204                           postinc0	equ	0xFEE
 10205                           wreg	equ	0xFE8
 10206                           postdec1	equ	0xFE5
 10207                           plusw1	equ	0xFE3
 10208                           fsr1l	equ	0xFE1
 10209                           indf2	equ	0xFDF
 10210                           postinc2	equ	0xFDE
 10211                           postdec2	equ	0xFDD
 10212                           plusw2	equ	0xFDB
 10213                           fsr2h	equ	0xFDA
 10214                           fsr2l	equ	0xFD9
 10215                           status	equ	0xFD8
 10216                           
 10217 ;; *************** function ___lwdiv *****************
 10218 ;; Defined at:
 10219 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 10220 ;; Parameters:    Size  Location     Type
 10221 ;;  dividend        2    0[BANK0 ] unsigned int 
 10222 ;;  divisor         2    2[BANK0 ] unsigned int 
 10223 ;; Auto vars:     Size  Location     Type
 10224 ;;  quotient        2    5[BANK0 ] unsigned int 
 10225 ;;  counter         1    4[BANK0 ] unsigned char 
 10226 ;; Return value:  Size  Location     Type
 10227 ;;                  2    0[BANK0 ] unsigned int 
 10228 ;; Registers used:
 10229 ;;		wreg, status,2, status,0
 10230 ;; Tracked objects:
 10231 ;;		On entry : 0/0
 10232 ;;		On exit  : 0/0
 10233 ;;		Unchanged: 0/0
 10234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10235 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10236 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10237 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10238 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10239 ;;Total ram usage:        7 bytes
 10240 ;; Hardware stack levels used:    1
 10241 ;; Hardware stack levels required when called:    5
 10242 ;; This function calls:
 10243 ;;		Nothing
 10244 ;; This function is called by:
 10245 ;;		_getHundreds
 10246 ;;		_getTens
 10247 ;;		_printf
 10248 ;; This function uses a non-reentrant model
 10249 ;;
 10250                           
 10251                           	psect	text20
 10252  003184                     __ptext20:
 10253                           	opt stack 0
 10254  003184                     ___lwdiv:
 10255                           	opt stack 23
 10256                           
 10257                           ;incstack = 0
 10258  003184  0E00               	movlw	0
 10259  003186  0100               	movlb	0	; () banked
 10260  003188  6F86               	movwf	(___lwdiv@quotient+1)& (0+255),b
 10261  00318A  0E00               	movlw	0
 10262  00318C  6F85               	movwf	___lwdiv@quotient& (0+255),b
 10263                           
 10264                           ; BSR set to: 0
 10265  00318E  0100               	movlb	0	; () banked
 10266  003190  5182               	movf	___lwdiv@divisor& (0+255),w,b
 10267  003192  0100               	movlb	0	; () banked
 10268  003194  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 10269  003196  B4D8               	btfsc	status,2,c
 10270  003198  D02C               	goto	l1120
 10271                           
 10272                           ; BSR set to: 0
 10273  00319A  0E01               	movlw	1
 10274  00319C  0100               	movlb	0	; () banked
 10275  00319E  6F84               	movwf	___lwdiv@counter& (0+255),b
 10276  0031A0  D006               	goto	l6075
 10277  0031A2                     l6073:
 10278                           
 10279                           ; BSR set to: 0
 10280  0031A2  0100               	movlb	0	; () banked
 10281  0031A4  90D8               	bcf	status,0,c
 10282  0031A6  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 10283  0031A8  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 10284  0031AA  0100               	movlb	0	; () banked
 10285  0031AC  2B84               	incf	___lwdiv@counter& (0+255),f,b
 10286  0031AE                     l6075:
 10287                           
 10288                           ; BSR set to: 0
 10289  0031AE  0100               	movlb	0	; () banked
 10290  0031B0  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 10291  0031B2  D7F7               	goto	l6073
 10292  0031B4                     l6077:
 10293                           
 10294                           ; BSR set to: 0
 10295  0031B4  0100               	movlb	0	; () banked
 10296  0031B6  90D8               	bcf	status,0,c
 10297  0031B8  3785               	rlcf	___lwdiv@quotient& (0+255),f,b
 10298  0031BA  3786               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 10299                           
 10300                           ; BSR set to: 0
 10301  0031BC  0100               	movlb	0	; () banked
 10302  0031BE  5182               	movf	___lwdiv@divisor& (0+255),w,b
 10303  0031C0  0100               	movlb	0	; () banked
 10304  0031C2  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 10305  0031C4  0100               	movlb	0	; () banked
 10306  0031C6  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 10307  0031C8  0100               	movlb	0	; () banked
 10308  0031CA  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 10309  0031CC  A0D8               	btfss	status,0,c
 10310  0031CE  D00A               	goto	l6085
 10311                           
 10312                           ; BSR set to: 0
 10313  0031D0  0100               	movlb	0	; () banked
 10314  0031D2  5182               	movf	___lwdiv@divisor& (0+255),w,b
 10315  0031D4  0100               	movlb	0	; () banked
 10316  0031D6  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 10317  0031D8  0100               	movlb	0	; () banked
 10318  0031DA  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 10319  0031DC  0100               	movlb	0	; () banked
 10320  0031DE  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 10321                           
 10322                           ; BSR set to: 0
 10323  0031E0  0100               	movlb	0	; () banked
 10324  0031E2  8185               	bsf	___lwdiv@quotient& (0+255),0,b
 10325  0031E4                     l6085:
 10326                           
 10327                           ; BSR set to: 0
 10328  0031E4  0100               	movlb	0	; () banked
 10329  0031E6  90D8               	bcf	status,0,c
 10330  0031E8  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 10331  0031EA  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 10332                           
 10333                           ; BSR set to: 0
 10334  0031EC  0100               	movlb	0	; () banked
 10335  0031EE  2F84               	decfsz	___lwdiv@counter& (0+255),f,b
 10336  0031F0  D7E1               	goto	l6077
 10337  0031F2                     l1120:
 10338                           
 10339                           ; BSR set to: 0
 10340  0031F2  C085  F080         	movff	___lwdiv@quotient,?___lwdiv
 10341  0031F6  C086  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 10342                           
 10343                           ; BSR set to: 0
 10344  0031FA  0012               	return		;funcret
 10345  0031FC                     __end_of___lwdiv:
 10346                           	opt stack 0
 10347                           tblptru	equ	0xFF8
 10348                           tblptrh	equ	0xFF7
 10349                           tblptrl	equ	0xFF6
 10350                           tablat	equ	0xFF5
 10351                           prodh	equ	0xFF4
 10352                           prodl	equ	0xFF3
 10353                           intcon	equ	0xFF2
 10354                           intcon2	equ	0xFF1
 10355                           intcon3	equ	0xFF0
 10356                           postinc0	equ	0xFEE
 10357                           wreg	equ	0xFE8
 10358                           postdec1	equ	0xFE5
 10359                           plusw1	equ	0xFE3
 10360                           fsr1l	equ	0xFE1
 10361                           indf2	equ	0xFDF
 10362                           postinc2	equ	0xFDE
 10363                           postdec2	equ	0xFDD
 10364                           plusw2	equ	0xFDB
 10365                           fsr2h	equ	0xFDA
 10366                           fsr2l	equ	0xFD9
 10367                           status	equ	0xFD8
 10368                           
 10369 ;; *************** function _getChar *****************
 10370 ;; Defined at:
 10371 ;;		line 1030 in file "../main.c"
 10372 ;; Parameters:    Size  Location     Type
 10373 ;;  num             2   14[BANK0 ] unsigned int 
 10374 ;; Auto vars:     Size  Location     Type
 10375 ;;		None
 10376 ;; Return value:  Size  Location     Type
 10377 ;;                  1    wreg      unsigned char 
 10378 ;; Registers used:
 10379 ;;		wreg, status,2, status,0
 10380 ;; Tracked objects:
 10381 ;;		On entry : 0/0
 10382 ;;		On exit  : 0/0
 10383 ;;		Unchanged: 0/0
 10384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10385 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10386 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10387 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10388 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10389 ;;Total ram usage:        2 bytes
 10390 ;; Hardware stack levels used:    1
 10391 ;; Hardware stack levels required when called:    5
 10392 ;; This function calls:
 10393 ;;		Nothing
 10394 ;; This function is called by:
 10395 ;;		_logPC
 10396 ;; This function uses a non-reentrant model
 10397 ;;
 10398                           
 10399                           	psect	text21
 10400  003816                     __ptext21:
 10401                           	opt stack 0
 10402  003816                     _getChar:
 10403                           	opt stack 24
 10404                           
 10405                           ;main.c: 1031: return num + '0';
 10406                           
 10407                           ; BSR set to: 0
 10408                           ;incstack = 0
 10409  003816  0100               	movlb	0	; () banked
 10410  003818  518E               	movf	getChar@num& (0+255),w,b
 10411  00381A  0F30               	addlw	48
 10412  00381C  0012               	return	
 10413  00381E                     __end_of_getChar:
 10414                           	opt stack 0
 10415                           tblptru	equ	0xFF8
 10416                           tblptrh	equ	0xFF7
 10417                           tblptrl	equ	0xFF6
 10418                           tablat	equ	0xFF5
 10419                           prodh	equ	0xFF4
 10420                           prodl	equ	0xFF3
 10421                           intcon	equ	0xFF2
 10422                           intcon2	equ	0xFF1
 10423                           intcon3	equ	0xFF0
 10424                           postinc0	equ	0xFEE
 10425                           wreg	equ	0xFE8
 10426                           postdec1	equ	0xFE5
 10427                           plusw1	equ	0xFE3
 10428                           fsr1l	equ	0xFE1
 10429                           indf2	equ	0xFDF
 10430                           postinc2	equ	0xFDE
 10431                           postdec2	equ	0xFDD
 10432                           plusw2	equ	0xFDB
 10433                           fsr2h	equ	0xFDA
 10434                           fsr2l	equ	0xFD9
 10435                           status	equ	0xFD8
 10436                           
 10437 ;; *************** function _I2C_Master_Write *****************
 10438 ;; Defined at:
 10439 ;;		line 39 in file "../I2C.c"
 10440 ;; Parameters:    Size  Location     Type
 10441 ;;  d               2    1[BANK0 ] unsigned int 
 10442 ;; Auto vars:     Size  Location     Type
 10443 ;;		None
 10444 ;; Return value:  Size  Location     Type
 10445 ;;                  1    wreg      void 
 10446 ;; Registers used:
 10447 ;;		wreg, status,2, status,0, cstack
 10448 ;; Tracked objects:
 10449 ;;		On entry : 0/0
 10450 ;;		On exit  : 0/0
 10451 ;;		Unchanged: 0/0
 10452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10453 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10454 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10455 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10456 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10457 ;;Total ram usage:        2 bytes
 10458 ;; Hardware stack levels used:    1
 10459 ;; Hardware stack levels required when called:    6
 10460 ;; This function calls:
 10461 ;;		_I2C_Master_Wait
 10462 ;; This function is called by:
 10463 ;;		_main
 10464 ;;		_logPC
 10465 ;; This function uses a non-reentrant model
 10466 ;;
 10467                           
 10468                           	psect	text22
 10469  003802                     __ptext22:
 10470                           	opt stack 0
 10471  003802                     _I2C_Master_Write:
 10472                           	opt stack 23
 10473                           
 10474                           ;I2C.c: 41: I2C_Master_Wait();
 10475                           
 10476                           ; BSR set to: 0
 10477                           ;incstack = 0
 10478  003802  ECBA  F01B         	call	_I2C_Master_Wait	;wreg free
 10479                           
 10480                           ;I2C.c: 42: SSPBUF = d;
 10481  003806  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
 10482  00380A  0012               	return		;funcret
 10483  00380C                     __end_of_I2C_Master_Write:
 10484                           	opt stack 0
 10485                           tblptru	equ	0xFF8
 10486                           tblptrh	equ	0xFF7
 10487                           tblptrl	equ	0xFF6
 10488                           tablat	equ	0xFF5
 10489                           prodh	equ	0xFF4
 10490                           prodl	equ	0xFF3
 10491                           intcon	equ	0xFF2
 10492                           intcon2	equ	0xFF1
 10493                           intcon3	equ	0xFF0
 10494                           postinc0	equ	0xFEE
 10495                           wreg	equ	0xFE8
 10496                           postdec1	equ	0xFE5
 10497                           plusw1	equ	0xFE3
 10498                           fsr1l	equ	0xFE1
 10499                           indf2	equ	0xFDF
 10500                           postinc2	equ	0xFDE
 10501                           postdec2	equ	0xFDD
 10502                           plusw2	equ	0xFDB
 10503                           fsr2h	equ	0xFDA
 10504                           fsr2l	equ	0xFD9
 10505                           status	equ	0xFD8
 10506                           
 10507 ;; *************** function _I2C_Master_Stop *****************
 10508 ;; Defined at:
 10509 ;;		line 33 in file "../I2C.c"
 10510 ;; Parameters:    Size  Location     Type
 10511 ;;		None
 10512 ;; Auto vars:     Size  Location     Type
 10513 ;;		None
 10514 ;; Return value:  Size  Location     Type
 10515 ;;                  1    wreg      void 
 10516 ;; Registers used:
 10517 ;;		wreg, status,2, status,0, cstack
 10518 ;; Tracked objects:
 10519 ;;		On entry : 0/0
 10520 ;;		On exit  : 0/0
 10521 ;;		Unchanged: 0/0
 10522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10523 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10524 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10525 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10526 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10527 ;;Total ram usage:        0 bytes
 10528 ;; Hardware stack levels used:    1
 10529 ;; Hardware stack levels required when called:    6
 10530 ;; This function calls:
 10531 ;;		_I2C_Master_Wait
 10532 ;; This function is called by:
 10533 ;;		_main
 10534 ;;		_logPC
 10535 ;; This function uses a non-reentrant model
 10536 ;;
 10537                           
 10538                           	psect	text23
 10539  00381E                     __ptext23:
 10540                           	opt stack 0
 10541  00381E                     _I2C_Master_Stop:
 10542                           	opt stack 23
 10543                           
 10544                           ;I2C.c: 35: I2C_Master_Wait();
 10545                           
 10546                           ;incstack = 0
 10547  00381E  ECBA  F01B         	call	_I2C_Master_Wait	;wreg free
 10548                           
 10549                           ;I2C.c: 36: PEN = 1;
 10550  003822  84C5               	bsf	4037,2,c	;volatile
 10551  003824  0012               	return		;funcret
 10552  003826                     __end_of_I2C_Master_Stop:
 10553                           	opt stack 0
 10554                           tblptru	equ	0xFF8
 10555                           tblptrh	equ	0xFF7
 10556                           tblptrl	equ	0xFF6
 10557                           tablat	equ	0xFF5
 10558                           prodh	equ	0xFF4
 10559                           prodl	equ	0xFF3
 10560                           intcon	equ	0xFF2
 10561                           intcon2	equ	0xFF1
 10562                           intcon3	equ	0xFF0
 10563                           postinc0	equ	0xFEE
 10564                           wreg	equ	0xFE8
 10565                           postdec1	equ	0xFE5
 10566                           plusw1	equ	0xFE3
 10567                           fsr1l	equ	0xFE1
 10568                           indf2	equ	0xFDF
 10569                           postinc2	equ	0xFDE
 10570                           postdec2	equ	0xFDD
 10571                           plusw2	equ	0xFDB
 10572                           fsr2h	equ	0xFDA
 10573                           fsr2l	equ	0xFD9
 10574                           status	equ	0xFD8
 10575                           
 10576 ;; *************** function _I2C_Master_Start *****************
 10577 ;; Defined at:
 10578 ;;		line 21 in file "../I2C.c"
 10579 ;; Parameters:    Size  Location     Type
 10580 ;;		None
 10581 ;; Auto vars:     Size  Location     Type
 10582 ;;		None
 10583 ;; Return value:  Size  Location     Type
 10584 ;;                  1    wreg      void 
 10585 ;; Registers used:
 10586 ;;		wreg, status,2, status,0, cstack
 10587 ;; Tracked objects:
 10588 ;;		On entry : 0/0
 10589 ;;		On exit  : 0/0
 10590 ;;		Unchanged: 0/0
 10591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10592 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10593 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10594 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10595 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10596 ;;Total ram usage:        0 bytes
 10597 ;; Hardware stack levels used:    1
 10598 ;; Hardware stack levels required when called:    6
 10599 ;; This function calls:
 10600 ;;		_I2C_Master_Wait
 10601 ;; This function is called by:
 10602 ;;		_main
 10603 ;;		_logPC
 10604 ;; This function uses a non-reentrant model
 10605 ;;
 10606                           
 10607                           	psect	text24
 10608  003826                     __ptext24:
 10609                           	opt stack 0
 10610  003826                     _I2C_Master_Start:
 10611                           	opt stack 23
 10612                           
 10613                           ;I2C.c: 23: I2C_Master_Wait();
 10614                           
 10615                           ;incstack = 0
 10616  003826  ECBA  F01B         	call	_I2C_Master_Wait	;wreg free
 10617                           
 10618                           ;I2C.c: 24: SEN = 1;
 10619  00382A  80C5               	bsf	4037,0,c	;volatile
 10620  00382C  0012               	return		;funcret
 10621  00382E                     __end_of_I2C_Master_Start:
 10622                           	opt stack 0
 10623                           tblptru	equ	0xFF8
 10624                           tblptrh	equ	0xFF7
 10625                           tblptrl	equ	0xFF6
 10626                           tablat	equ	0xFF5
 10627                           prodh	equ	0xFF4
 10628                           prodl	equ	0xFF3
 10629                           intcon	equ	0xFF2
 10630                           intcon2	equ	0xFF1
 10631                           intcon3	equ	0xFF0
 10632                           postinc0	equ	0xFEE
 10633                           wreg	equ	0xFE8
 10634                           postdec1	equ	0xFE5
 10635                           plusw1	equ	0xFE3
 10636                           fsr1l	equ	0xFE1
 10637                           indf2	equ	0xFDF
 10638                           postinc2	equ	0xFDE
 10639                           postdec2	equ	0xFDD
 10640                           plusw2	equ	0xFDB
 10641                           fsr2h	equ	0xFDA
 10642                           fsr2l	equ	0xFD9
 10643                           status	equ	0xFD8
 10644                           
 10645 ;; *************** function _initLCD *****************
 10646 ;; Defined at:
 10647 ;;		line 7 in file "../lcd.c"
 10648 ;; Parameters:    Size  Location     Type
 10649 ;;		None
 10650 ;; Auto vars:     Size  Location     Type
 10651 ;;		None
 10652 ;; Return value:  Size  Location     Type
 10653 ;;                  1    wreg      void 
 10654 ;; Registers used:
 10655 ;;		wreg, status,2, status,0, cstack
 10656 ;; Tracked objects:
 10657 ;;		On entry : 0/0
 10658 ;;		On exit  : 0/0
 10659 ;;		Unchanged: 0/0
 10660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10661 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10662 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10663 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10664 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10665 ;;Total ram usage:        1 bytes
 10666 ;; Hardware stack levels used:    1
 10667 ;; Hardware stack levels required when called:    7
 10668 ;; This function calls:
 10669 ;;		_lcdInst
 10670 ;; This function is called by:
 10671 ;;		_main
 10672 ;; This function uses a non-reentrant model
 10673 ;;
 10674                           
 10675                           	psect	text25
 10676  003494                     __ptext25:
 10677                           	opt stack 0
 10678  003494                     _initLCD:
 10679                           	opt stack 23
 10680                           
 10681                           ;lcd.c: 8: _delay((unsigned long)((15)*(10000000/4000.0)));
 10682                           
 10683                           ;incstack = 0
 10684  003494  0E31               	movlw	49
 10685  003496  0100               	movlb	0	; () banked
 10686  003498  6F83               	movwf	??_initLCD& (0+255),b
 10687  00349A  0EB2               	movlw	178
 10688  00349C                     u7957:
 10689  00349C  2EE8               	decfsz	wreg,f,c
 10690  00349E  D7FE               	bra	u7957
 10691  0034A0  2F83               	decfsz	??_initLCD& (0+255),f,b
 10692  0034A2  D7FC               	bra	u7957
 10693  0034A4  F000               	nop	
 10694                           
 10695                           ;lcd.c: 9: lcdInst(0b00110011);
 10696  0034A6  0E33               	movlw	51
 10697  0034A8  ECDF  F01B         	call	_lcdInst
 10698                           
 10699                           ;lcd.c: 10: lcdInst(0b00110010);
 10700  0034AC  0E32               	movlw	50
 10701  0034AE  ECDF  F01B         	call	_lcdInst
 10702                           
 10703                           ;lcd.c: 11: lcdInst(0b00101000);
 10704  0034B2  0E28               	movlw	40
 10705  0034B4  ECDF  F01B         	call	_lcdInst
 10706                           
 10707                           ;lcd.c: 12: lcdInst(0b00001111);
 10708  0034B8  0E0F               	movlw	15
 10709  0034BA  ECDF  F01B         	call	_lcdInst
 10710                           
 10711                           ;lcd.c: 13: lcdInst(0b00000110);
 10712  0034BE  0E06               	movlw	6
 10713  0034C0  ECDF  F01B         	call	_lcdInst
 10714                           
 10715                           ;lcd.c: 14: lcdInst(0b00000001);
 10716  0034C4  0E01               	movlw	1
 10717  0034C6  ECDF  F01B         	call	_lcdInst
 10718                           
 10719                           ;lcd.c: 15: _delay((unsigned long)((15)*(10000000/4000.0)));
 10720  0034CA  0E31               	movlw	49
 10721  0034CC  0100               	movlb	0	; () banked
 10722  0034CE  6F83               	movwf	??_initLCD& (0+255),b
 10723  0034D0  0EB2               	movlw	178
 10724  0034D2                     u7967:
 10725  0034D2  2EE8               	decfsz	wreg,f,c
 10726  0034D4  D7FE               	bra	u7967
 10727  0034D6  2F83               	decfsz	??_initLCD& (0+255),f,b
 10728  0034D8  D7FC               	bra	u7967
 10729  0034DA  F000               	nop	
 10730  0034DC  0012               	return		;funcret
 10731  0034DE                     __end_of_initLCD:
 10732                           	opt stack 0
 10733                           tblptru	equ	0xFF8
 10734                           tblptrh	equ	0xFF7
 10735                           tblptrl	equ	0xFF6
 10736                           tablat	equ	0xFF5
 10737                           prodh	equ	0xFF4
 10738                           prodl	equ	0xFF3
 10739                           intcon	equ	0xFF2
 10740                           intcon2	equ	0xFF1
 10741                           intcon3	equ	0xFF0
 10742                           postinc0	equ	0xFEE
 10743                           wreg	equ	0xFE8
 10744                           postdec1	equ	0xFE5
 10745                           plusw1	equ	0xFE3
 10746                           fsr1l	equ	0xFE1
 10747                           indf2	equ	0xFDF
 10748                           postinc2	equ	0xFDE
 10749                           postdec2	equ	0xFDD
 10750                           plusw2	equ	0xFDB
 10751                           fsr2h	equ	0xFDA
 10752                           fsr2l	equ	0xFD9
 10753                           status	equ	0xFD8
 10754                           
 10755 ;; *************** function _lcdInst *****************
 10756 ;; Defined at:
 10757 ;;		line 18 in file "../lcd.c"
 10758 ;; Parameters:    Size  Location     Type
 10759 ;;  data            1    wreg     unsigned char 
 10760 ;; Auto vars:     Size  Location     Type
 10761 ;;  data            1    2[BANK0 ] unsigned char 
 10762 ;; Return value:  Size  Location     Type
 10763 ;;                  1    wreg      void 
 10764 ;; Registers used:
 10765 ;;		wreg, status,2, status,0, cstack
 10766 ;; Tracked objects:
 10767 ;;		On entry : 0/0
 10768 ;;		On exit  : 0/0
 10769 ;;		Unchanged: 0/0
 10770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10771 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10772 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10773 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10774 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10775 ;;Total ram usage:        1 bytes
 10776 ;; Hardware stack levels used:    1
 10777 ;; Hardware stack levels required when called:    6
 10778 ;; This function calls:
 10779 ;;		_lcdNibble
 10780 ;; This function is called by:
 10781 ;;		_initLCD
 10782 ;;		_main
 10783 ;;		_show_log
 10784 ;; This function uses a non-reentrant model
 10785 ;;
 10786                           
 10787                           	psect	text26
 10788  0037BE                     __ptext26:
 10789                           	opt stack 0
 10790  0037BE                     _lcdInst:
 10791                           	opt stack 23
 10792                           
 10793                           ;incstack = 0
 10794                           ;lcdInst@data stored from wreg
 10795  0037BE  0100               	movlb	0	; () banked
 10796  0037C0  6F82               	movwf	lcdInst@data& (0+255),b
 10797                           
 10798                           ;lcd.c: 19: LATDbits.LATD2 = 0;
 10799  0037C2  948C               	bcf	3980,2,c	;volatile
 10800                           
 10801                           ;lcd.c: 20: lcdNibble(data);
 10802  0037C4  0100               	movlb	0	; () banked
 10803  0037C6  5182               	movf	lcdInst@data& (0+255),w,b
 10804  0037C8  EC9A  F019         	call	_lcdNibble
 10805  0037CC  0012               	return		;funcret
 10806  0037CE                     __end_of_lcdInst:
 10807                           	opt stack 0
 10808                           tblptru	equ	0xFF8
 10809                           tblptrh	equ	0xFF7
 10810                           tblptrl	equ	0xFF6
 10811                           tablat	equ	0xFF5
 10812                           prodh	equ	0xFF4
 10813                           prodl	equ	0xFF3
 10814                           intcon	equ	0xFF2
 10815                           intcon2	equ	0xFF1
 10816                           intcon3	equ	0xFF0
 10817                           postinc0	equ	0xFEE
 10818                           wreg	equ	0xFE8
 10819                           postdec1	equ	0xFE5
 10820                           plusw1	equ	0xFE3
 10821                           fsr1l	equ	0xFE1
 10822                           indf2	equ	0xFDF
 10823                           postinc2	equ	0xFDE
 10824                           postdec2	equ	0xFDD
 10825                           plusw2	equ	0xFDB
 10826                           fsr2h	equ	0xFDA
 10827                           fsr2l	equ	0xFD9
 10828                           status	equ	0xFD8
 10829                           
 10830 ;; *************** function _lcdNibble *****************
 10831 ;; Defined at:
 10832 ;;		line 28 in file "../lcd.c"
 10833 ;; Parameters:    Size  Location     Type
 10834 ;;  data            1    wreg     unsigned char 
 10835 ;; Auto vars:     Size  Location     Type
 10836 ;;  data            1    1[BANK0 ] unsigned char 
 10837 ;;  temp            1    0[BANK0 ] unsigned char 
 10838 ;; Return value:  Size  Location     Type
 10839 ;;                  1    wreg      void 
 10840 ;; Registers used:
 10841 ;;		wreg, status,2, status,0
 10842 ;; Tracked objects:
 10843 ;;		On entry : 0/0
 10844 ;;		On exit  : 0/0
 10845 ;;		Unchanged: 0/0
 10846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10847 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10848 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10849 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10850 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10851 ;;Total ram usage:        2 bytes
 10852 ;; Hardware stack levels used:    1
 10853 ;; Hardware stack levels required when called:    5
 10854 ;; This function calls:
 10855 ;;		Nothing
 10856 ;; This function is called by:
 10857 ;;		_lcdInst
 10858 ;;		_putch
 10859 ;; This function uses a non-reentrant model
 10860 ;;
 10861                           
 10862                           	psect	text27
 10863  003334                     __ptext27:
 10864                           	opt stack 0
 10865  003334                     _lcdNibble:
 10866                           	opt stack 22
 10867                           
 10868                           ;incstack = 0
 10869                           ;lcdNibble@data stored from wreg
 10870  003334  0100               	movlb	0	; () banked
 10871  003336  6F81               	movwf	lcdNibble@data& (0+255),b
 10872                           
 10873                           ;lcd.c: 30: char temp = data & 0xF0;
 10874  003338  0100               	movlb	0	; () banked
 10875  00333A  5181               	movf	lcdNibble@data& (0+255),w,b
 10876  00333C  0BF0               	andlw	240
 10877  00333E  0100               	movlb	0	; () banked
 10878  003340  6F80               	movwf	lcdNibble@temp& (0+255),b
 10879                           
 10880                           ;lcd.c: 31: LATD = LATD & 0x0F;
 10881  003342  508C               	movf	3980,w,c	;volatile
 10882  003344  0B0F               	andlw	15
 10883  003346  6E8C               	movwf	3980,c	;volatile
 10884                           
 10885                           ;lcd.c: 32: LATD = temp | LATD;
 10886  003348  0100               	movlb	0	; () banked
 10887  00334A  5180               	movf	lcdNibble@temp& (0+255),w,b
 10888  00334C  108C               	iorwf	3980,w,c	;volatile
 10889  00334E  6E8C               	movwf	3980,c	;volatile
 10890                           
 10891                           ; BSR set to: 0
 10892                           ;lcd.c: 34: LATDbits.LATD3 = 0;
 10893  003350  968C               	bcf	3980,3,c	;volatile
 10894                           
 10895                           ; BSR set to: 0
 10896                           ;lcd.c: 35: _delay((unsigned long)((30)*(10000000/4000000.0)));
 10897  003352  0E19               	movlw	25
 10898  003354                     u7977:
 10899  003354  2EE8               	decfsz	wreg,f,c
 10900  003356  D7FE               	bra	u7977
 10901                           
 10902                           ;lcd.c: 36: LATDbits.LATD3 = 1;
 10903  003358  868C               	bsf	3980,3,c	;volatile
 10904                           
 10905                           ;lcd.c: 37: _delay((unsigned long)((30)*(10000000/4000000.0)));
 10906  00335A  0E19               	movlw	25
 10907  00335C                     u7987:
 10908  00335C  2EE8               	decfsz	wreg,f,c
 10909  00335E  D7FE               	bra	u7987
 10910                           
 10911                           ;lcd.c: 39: data = data << 4;
 10912  003360  0100               	movlb	0	; () banked
 10913  003362  3981               	swapf	lcdNibble@data& (0+255),w,b
 10914  003364  0BF0               	andlw	240
 10915  003366  0100               	movlb	0	; () banked
 10916  003368  6F81               	movwf	lcdNibble@data& (0+255),b
 10917                           
 10918                           ;lcd.c: 41: temp = data & 0xF0;
 10919  00336A  0100               	movlb	0	; () banked
 10920  00336C  5181               	movf	lcdNibble@data& (0+255),w,b
 10921  00336E  0BF0               	andlw	240
 10922  003370  0100               	movlb	0	; () banked
 10923  003372  6F80               	movwf	lcdNibble@temp& (0+255),b
 10924                           
 10925                           ;lcd.c: 42: LATD = LATD & 0x0F;
 10926  003374  508C               	movf	3980,w,c	;volatile
 10927  003376  0B0F               	andlw	15
 10928  003378  6E8C               	movwf	3980,c	;volatile
 10929                           
 10930                           ;lcd.c: 43: LATD = temp | LATD;
 10931  00337A  0100               	movlb	0	; () banked
 10932  00337C  5180               	movf	lcdNibble@temp& (0+255),w,b
 10933  00337E  108C               	iorwf	3980,w,c	;volatile
 10934  003380  6E8C               	movwf	3980,c	;volatile
 10935                           
 10936                           ; BSR set to: 0
 10937                           ;lcd.c: 45: LATDbits.LATD3 = 0;
 10938  003382  968C               	bcf	3980,3,c	;volatile
 10939                           
 10940                           ; BSR set to: 0
 10941                           ;lcd.c: 46: _delay((unsigned long)((30)*(10000000/4000000.0)));
 10942  003384  0E19               	movlw	25
 10943  003386                     u7997:
 10944  003386  2EE8               	decfsz	wreg,f,c
 10945  003388  D7FE               	bra	u7997
 10946                           
 10947                           ;lcd.c: 47: LATDbits.LATD3 = 1;
 10948  00338A  868C               	bsf	3980,3,c	;volatile
 10949                           
 10950                           ;lcd.c: 48: _delay((unsigned long)((30)*(10000000/4000000.0)));
 10951  00338C  0E19               	movlw	25
 10952  00338E                     u8007:
 10953  00338E  2EE8               	decfsz	wreg,f,c
 10954  003390  D7FE               	bra	u8007
 10955  003392  0012               	return		;funcret
 10956  003394                     __end_of_lcdNibble:
 10957                           	opt stack 0
 10958                           tblptru	equ	0xFF8
 10959                           tblptrh	equ	0xFF7
 10960                           tblptrl	equ	0xFF6
 10961                           tablat	equ	0xFF5
 10962                           prodh	equ	0xFF4
 10963                           prodl	equ	0xFF3
 10964                           intcon	equ	0xFF2
 10965                           intcon2	equ	0xFF1
 10966                           intcon3	equ	0xFF0
 10967                           postinc0	equ	0xFEE
 10968                           wreg	equ	0xFE8
 10969                           postdec1	equ	0xFE5
 10970                           plusw1	equ	0xFE3
 10971                           fsr1l	equ	0xFE1
 10972                           indf2	equ	0xFDF
 10973                           postinc2	equ	0xFDE
 10974                           postdec2	equ	0xFDD
 10975                           plusw2	equ	0xFDB
 10976                           fsr2h	equ	0xFDA
 10977                           fsr2l	equ	0xFD9
 10978                           status	equ	0xFD8
 10979                           
 10980 ;; *************** function _I2C_Master_Read *****************
 10981 ;; Defined at:
 10982 ;;		line 45 in file "../I2C.c"
 10983 ;; Parameters:    Size  Location     Type
 10984 ;;  a               1    wreg     unsigned char 
 10985 ;; Auto vars:     Size  Location     Type
 10986 ;;  a               1    1[BANK0 ] unsigned char 
 10987 ;;  temp            1    2[BANK0 ] unsigned char 
 10988 ;; Return value:  Size  Location     Type
 10989 ;;                  1    wreg      unsigned char 
 10990 ;; Registers used:
 10991 ;;		wreg, status,2, status,0, cstack
 10992 ;; Tracked objects:
 10993 ;;		On entry : 0/0
 10994 ;;		On exit  : 0/0
 10995 ;;		Unchanged: 0/0
 10996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10997 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10998 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10999 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11000 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11001 ;;Total ram usage:        2 bytes
 11002 ;; Hardware stack levels used:    1
 11003 ;; Hardware stack levels required when called:    6
 11004 ;; This function calls:
 11005 ;;		_I2C_Master_Wait
 11006 ;; This function is called by:
 11007 ;;		_main
 11008 ;; This function uses a non-reentrant model
 11009 ;;
 11010                           
 11011                           	psect	text28
 11012  0035CE                     __ptext28:
 11013                           	opt stack 0
 11014  0035CE                     _I2C_Master_Read:
 11015                           	opt stack 24
 11016                           
 11017                           ;incstack = 0
 11018                           ;I2C_Master_Read@a stored from wreg
 11019  0035CE  0100               	movlb	0	; () banked
 11020  0035D0  6F81               	movwf	I2C_Master_Read@a& (0+255),b
 11021                           
 11022                           ;I2C.c: 47: unsigned char temp;
 11023                           ;I2C.c: 48: I2C_Master_Wait();
 11024  0035D2  ECBA  F01B         	call	_I2C_Master_Wait	;wreg free
 11025                           
 11026                           ;I2C.c: 49: RCEN = 1;
 11027  0035D6  86C5               	bsf	4037,3,c	;volatile
 11028                           
 11029                           ;I2C.c: 50: I2C_Master_Wait();
 11030  0035D8  ECBA  F01B         	call	_I2C_Master_Wait	;wreg free
 11031                           
 11032                           ;I2C.c: 51: temp = SSPBUF;
 11033  0035DC  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
 11034                           
 11035                           ;I2C.c: 52: I2C_Master_Wait();
 11036  0035E0  ECBA  F01B         	call	_I2C_Master_Wait	;wreg free
 11037                           
 11038                           ;I2C.c: 53: ACKDT = (a)?0:1;
 11039  0035E4  0100               	movlb	0	; () banked
 11040  0035E6  5181               	movf	I2C_Master_Read@a& (0+255),w,b
 11041  0035E8  0100               	movlb	0	; () banked
 11042  0035EA  A4D8               	btfss	status,2,c
 11043  0035EC  D002               	goto	u6350
 11044  0035EE  8AC5               	bsf	4037,5,c	;volatile
 11045  0035F0  D001               	goto	l6435
 11046  0035F2                     u6350:
 11047  0035F2  9AC5               	bcf	4037,5,c	;volatile
 11048  0035F4                     l6435:
 11049                           
 11050                           ;I2C.c: 54: ACKEN = 1;
 11051  0035F4  88C5               	bsf	4037,4,c	;volatile
 11052                           
 11053                           ;I2C.c: 55: return temp;
 11054  0035F6  0100               	movlb	0	; () banked
 11055  0035F8  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
 11056  0035FA  0012               	return	
 11057  0035FC                     __end_of_I2C_Master_Read:
 11058                           	opt stack 0
 11059                           tblptru	equ	0xFF8
 11060                           tblptrh	equ	0xFF7
 11061                           tblptrl	equ	0xFF6
 11062                           tablat	equ	0xFF5
 11063                           prodh	equ	0xFF4
 11064                           prodl	equ	0xFF3
 11065                           intcon	equ	0xFF2
 11066                           intcon2	equ	0xFF1
 11067                           intcon3	equ	0xFF0
 11068                           postinc0	equ	0xFEE
 11069                           wreg	equ	0xFE8
 11070                           postdec1	equ	0xFE5
 11071                           plusw1	equ	0xFE3
 11072                           fsr1l	equ	0xFE1
 11073                           indf2	equ	0xFDF
 11074                           postinc2	equ	0xFDE
 11075                           postdec2	equ	0xFDD
 11076                           plusw2	equ	0xFDB
 11077                           fsr2h	equ	0xFDA
 11078                           fsr2l	equ	0xFD9
 11079                           status	equ	0xFD8
 11080                           
 11081 ;; *************** function _I2C_Master_Wait *****************
 11082 ;; Defined at:
 11083 ;;		line 16 in file "../I2C.c"
 11084 ;; Parameters:    Size  Location     Type
 11085 ;;		None
 11086 ;; Auto vars:     Size  Location     Type
 11087 ;;		None
 11088 ;; Return value:  Size  Location     Type
 11089 ;;                  1    wreg      void 
 11090 ;; Registers used:
 11091 ;;		wreg, status,2, status,0
 11092 ;; Tracked objects:
 11093 ;;		On entry : 0/0
 11094 ;;		On exit  : 0/0
 11095 ;;		Unchanged: 0/0
 11096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11097 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11098 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11099 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11100 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11101 ;;Total ram usage:        1 bytes
 11102 ;; Hardware stack levels used:    1
 11103 ;; Hardware stack levels required when called:    5
 11104 ;; This function calls:
 11105 ;;		Nothing
 11106 ;; This function is called by:
 11107 ;;		_I2C_Master_Start
 11108 ;;		_I2C_Master_Stop
 11109 ;;		_I2C_Master_Write
 11110 ;;		_I2C_Master_Read
 11111 ;; This function uses a non-reentrant model
 11112 ;;
 11113                           
 11114                           	psect	text29
 11115  003774                     __ptext29:
 11116                           	opt stack 0
 11117  003774                     _I2C_Master_Wait:
 11118                           	opt stack 23
 11119  003774                     l30:
 11120  003774  B4C7               	btfsc	4039,2,c	;volatile
 11121  003776  D7FE               	goto	l30
 11122  003778  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
 11123  00377C  0E1F               	movlw	31
 11124  00377E  0100               	movlb	0	; () banked
 11125  003780  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
 11126  003782  B4D8               	btfsc	status,2,c
 11127  003784  0012               	return	
 11128  003786  D7F6               	goto	l30
 11129  003788                     __end_of_I2C_Master_Wait:
 11130                           	opt stack 0
 11131                           tblptru	equ	0xFF8
 11132                           tblptrh	equ	0xFF7
 11133                           tblptrl	equ	0xFF6
 11134                           tablat	equ	0xFF5
 11135                           prodh	equ	0xFF4
 11136                           prodl	equ	0xFF3
 11137                           intcon	equ	0xFF2
 11138                           intcon2	equ	0xFF1
 11139                           intcon3	equ	0xFF0
 11140                           postinc0	equ	0xFEE
 11141                           wreg	equ	0xFE8
 11142                           postdec1	equ	0xFE5
 11143                           plusw1	equ	0xFE3
 11144                           fsr1l	equ	0xFE1
 11145                           indf2	equ	0xFDF
 11146                           postinc2	equ	0xFDE
 11147                           postdec2	equ	0xFDD
 11148                           plusw2	equ	0xFDB
 11149                           fsr2h	equ	0xFDA
 11150                           fsr2l	equ	0xFD9
 11151                           status	equ	0xFD8
 11152                           
 11153 ;; *************** function _I2C_Master_Init *****************
 11154 ;; Defined at:
 11155 ;;		line 5 in file "../I2C.c"
 11156 ;; Parameters:    Size  Location     Type
 11157 ;;  c               4   13[BANK0 ] const unsigned long 
 11158 ;; Auto vars:     Size  Location     Type
 11159 ;;		None
 11160 ;; Return value:  Size  Location     Type
 11161 ;;                  1    wreg      void 
 11162 ;; Registers used:
 11163 ;;		wreg, status,2, status,0, cstack
 11164 ;; Tracked objects:
 11165 ;;		On entry : 0/0
 11166 ;;		On exit  : 0/0
 11167 ;;		Unchanged: 0/0
 11168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11169 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11170 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11171 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11172 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11173 ;;Total ram usage:        8 bytes
 11174 ;; Hardware stack levels used:    1
 11175 ;; Hardware stack levels required when called:    6
 11176 ;; This function calls:
 11177 ;;		___lldiv
 11178 ;; This function is called by:
 11179 ;;		_main
 11180 ;; This function uses a non-reentrant model
 11181 ;;
 11182                           
 11183                           	psect	text30
 11184  003394                     __ptext30:
 11185                           	opt stack 0
 11186  003394                     _I2C_Master_Init:
 11187                           	opt stack 24
 11188                           
 11189                           ;I2C.c: 8: SSPSTAT = 0b00000000;
 11190                           
 11191                           ; BSR set to: 0
 11192                           ;incstack = 0
 11193  003394  0E00               	movlw	0
 11194  003396  6EC7               	movwf	4039,c	;volatile
 11195                           
 11196                           ;I2C.c: 9: SSPCON1 = 0b00101000;
 11197  003398  0E28               	movlw	40
 11198  00339A  6EC6               	movwf	4038,c	;volatile
 11199                           
 11200                           ;I2C.c: 10: SSPCON2 = 0b00000000;
 11201  00339C  0E00               	movlw	0
 11202  00339E  6EC5               	movwf	4037,c	;volatile
 11203                           
 11204                           ;I2C.c: 11: SSPADD = (10000000/(4*c))-1;
 11205  0033A0  0E80               	movlw	128
 11206  0033A2  0100               	movlb	0	; () banked
 11207  0033A4  6F80               	movwf	___lldiv@dividend& (0+255),b
 11208  0033A6  0E96               	movlw	150
 11209  0033A8  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
 11210  0033AA  0E98               	movlw	152
 11211  0033AC  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
 11212  0033AE  0E00               	movlw	0
 11213  0033B0  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
 11214  0033B2  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
 11215  0033B6  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
 11216  0033BA  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
 11217  0033BE  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
 11218  0033C2  0E02               	movlw	2
 11219  0033C4                     u6345:
 11220  0033C4  90D8               	bcf	status,0,c
 11221  0033C6  0100               	movlb	0	; () banked
 11222  0033C8  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
 11223  0033CA  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
 11224  0033CC  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
 11225  0033CE  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
 11226  0033D0  2EE8               	decfsz	wreg,f,c
 11227  0033D2  D7F8               	goto	u6345
 11228  0033D4  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
 11229  0033D8  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
 11230  0033DC  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
 11231  0033E0  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
 11232  0033E4  ECD1  F017         	call	___lldiv	;wreg free
 11233  0033E8  0100               	movlb	0	; () banked
 11234  0033EA  0580               	decf	?___lldiv& (0+255),w,b
 11235  0033EC  6EC8               	movwf	4040,c	;volatile
 11236                           
 11237                           ; BSR set to: 0
 11238                           ;I2C.c: 12: TRISC3 = 1;
 11239  0033EE  8694               	bsf	3988,3,c	;volatile
 11240                           
 11241                           ; BSR set to: 0
 11242                           ;I2C.c: 13: TRISC4 = 1;
 11243  0033F0  8894               	bsf	3988,4,c	;volatile
 11244                           
 11245                           ; BSR set to: 0
 11246  0033F2  0012               	return		;funcret
 11247  0033F4                     __end_of_I2C_Master_Init:
 11248                           	opt stack 0
 11249                           tblptru	equ	0xFF8
 11250                           tblptrh	equ	0xFF7
 11251                           tblptrl	equ	0xFF6
 11252                           tablat	equ	0xFF5
 11253                           prodh	equ	0xFF4
 11254                           prodl	equ	0xFF3
 11255                           intcon	equ	0xFF2
 11256                           intcon2	equ	0xFF1
 11257                           intcon3	equ	0xFF0
 11258                           postinc0	equ	0xFEE
 11259                           wreg	equ	0xFE8
 11260                           postdec1	equ	0xFE5
 11261                           plusw1	equ	0xFE3
 11262                           fsr1l	equ	0xFE1
 11263                           indf2	equ	0xFDF
 11264                           postinc2	equ	0xFDE
 11265                           postdec2	equ	0xFDD
 11266                           plusw2	equ	0xFDB
 11267                           fsr2h	equ	0xFDA
 11268                           fsr2l	equ	0xFD9
 11269                           status	equ	0xFD8
 11270                           
 11271 ;; *************** function ___lldiv *****************
 11272 ;; Defined at:
 11273 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
 11274 ;; Parameters:    Size  Location     Type
 11275 ;;  dividend        4    0[BANK0 ] unsigned long 
 11276 ;;  divisor         4    4[BANK0 ] unsigned long 
 11277 ;; Auto vars:     Size  Location     Type
 11278 ;;  quotient        4    8[BANK0 ] unsigned long 
 11279 ;;  counter         1   12[BANK0 ] unsigned char 
 11280 ;; Return value:  Size  Location     Type
 11281 ;;                  4    0[BANK0 ] unsigned long 
 11282 ;; Registers used:
 11283 ;;		wreg, status,2, status,0
 11284 ;; Tracked objects:
 11285 ;;		On entry : 0/0
 11286 ;;		On exit  : 0/0
 11287 ;;		Unchanged: 0/0
 11288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11289 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11290 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11291 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11292 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11293 ;;Total ram usage:       13 bytes
 11294 ;; Hardware stack levels used:    1
 11295 ;; Hardware stack levels required when called:    5
 11296 ;; This function calls:
 11297 ;;		Nothing
 11298 ;; This function is called by:
 11299 ;;		_I2C_Master_Init
 11300 ;; This function uses a non-reentrant model
 11301 ;;
 11302                           
 11303                           	psect	text31
 11304  002FA2                     __ptext31:
 11305                           	opt stack 0
 11306  002FA2                     ___lldiv:
 11307                           	opt stack 24
 11308                           
 11309                           ; BSR set to: 0
 11310                           ;incstack = 0
 11311  002FA2  0E00               	movlw	0
 11312  002FA4  0100               	movlb	0	; () banked
 11313  002FA6  6F88               	movwf	___lldiv@quotient& (0+255),b
 11314  002FA8  0E00               	movlw	0
 11315  002FAA  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
 11316  002FAC  0E00               	movlw	0
 11317  002FAE  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
 11318  002FB0  0E00               	movlw	0
 11319  002FB2  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
 11320                           
 11321                           ; BSR set to: 0
 11322  002FB4  0100               	movlb	0	; () banked
 11323  002FB6  5184               	movf	___lldiv@divisor& (0+255),w,b
 11324  002FB8  0100               	movlb	0	; () banked
 11325  002FBA  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 11326  002FBC  0100               	movlb	0	; () banked
 11327  002FBE  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 11328  002FC0  0100               	movlb	0	; () banked
 11329  002FC2  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 11330  002FC4  B4D8               	btfsc	status,2,c
 11331  002FC6  D042               	goto	l1067
 11332                           
 11333                           ; BSR set to: 0
 11334  002FC8  0E01               	movlw	1
 11335  002FCA  0100               	movlb	0	; () banked
 11336  002FCC  6F8C               	movwf	___lldiv@counter& (0+255),b
 11337  002FCE  D008               	goto	l6405
 11338  002FD0                     l6403:
 11339                           
 11340                           ; BSR set to: 0
 11341  002FD0  0100               	movlb	0	; () banked
 11342  002FD2  90D8               	bcf	status,0,c
 11343  002FD4  3784               	rlcf	___lldiv@divisor& (0+255),f,b
 11344  002FD6  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 11345  002FD8  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 11346  002FDA  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 11347  002FDC  0100               	movlb	0	; () banked
 11348  002FDE  2B8C               	incf	___lldiv@counter& (0+255),f,b
 11349  002FE0                     l6405:
 11350                           
 11351                           ; BSR set to: 0
 11352  002FE0  0100               	movlb	0	; () banked
 11353  002FE2  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 11354  002FE4  D7F5               	goto	l6403
 11355  002FE6                     l6407:
 11356                           
 11357                           ; BSR set to: 0
 11358  002FE6  0100               	movlb	0	; () banked
 11359  002FE8  90D8               	bcf	status,0,c
 11360  002FEA  3788               	rlcf	___lldiv@quotient& (0+255),f,b
 11361  002FEC  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 11362  002FEE  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 11363  002FF0  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 11364                           
 11365                           ; BSR set to: 0
 11366  002FF2  0100               	movlb	0	; () banked
 11367  002FF4  5184               	movf	___lldiv@divisor& (0+255),w,b
 11368  002FF6  0100               	movlb	0	; () banked
 11369  002FF8  5D80               	subwf	___lldiv@dividend& (0+255),w,b
 11370  002FFA  0100               	movlb	0	; () banked
 11371  002FFC  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
 11372  002FFE  0100               	movlb	0	; () banked
 11373  003000  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 11374  003002  0100               	movlb	0	; () banked
 11375  003004  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
 11376  003006  0100               	movlb	0	; () banked
 11377  003008  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 11378  00300A  0100               	movlb	0	; () banked
 11379  00300C  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
 11380  00300E  0100               	movlb	0	; () banked
 11381  003010  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 11382  003012  A0D8               	btfss	status,0,c
 11383  003014  D012               	goto	l6415
 11384                           
 11385                           ; BSR set to: 0
 11386  003016  0100               	movlb	0	; () banked
 11387  003018  5184               	movf	___lldiv@divisor& (0+255),w,b
 11388  00301A  0100               	movlb	0	; () banked
 11389  00301C  5F80               	subwf	___lldiv@dividend& (0+255),f,b
 11390  00301E  0100               	movlb	0	; () banked
 11391  003020  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
 11392  003022  0100               	movlb	0	; () banked
 11393  003024  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 11394  003026  0100               	movlb	0	; () banked
 11395  003028  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
 11396  00302A  0100               	movlb	0	; () banked
 11397  00302C  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 11398  00302E  0100               	movlb	0	; () banked
 11399  003030  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
 11400  003032  0100               	movlb	0	; () banked
 11401  003034  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 11402                           
 11403                           ; BSR set to: 0
 11404  003036  0100               	movlb	0	; () banked
 11405  003038  8188               	bsf	___lldiv@quotient& (0+255),0,b
 11406  00303A                     l6415:
 11407                           
 11408                           ; BSR set to: 0
 11409  00303A  0100               	movlb	0	; () banked
 11410  00303C  90D8               	bcf	status,0,c
 11411  00303E  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 11412  003040  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 11413  003042  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 11414  003044  3384               	rrcf	___lldiv@divisor& (0+255),f,b
 11415                           
 11416                           ; BSR set to: 0
 11417  003046  0100               	movlb	0	; () banked
 11418  003048  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
 11419  00304A  D7CD               	goto	l6407
 11420  00304C                     l1067:
 11421                           
 11422                           ; BSR set to: 0
 11423  00304C  C088  F080         	movff	___lldiv@quotient,?___lldiv
 11424  003050  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
 11425  003054  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
 11426  003058  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
 11427                           
 11428                           ; BSR set to: 0
 11429  00305C  0012               	return		;funcret
 11430  00305E                     __end_of___lldiv:
 11431                           	opt stack 0
 11432                           tblptru	equ	0xFF8
 11433                           tblptrh	equ	0xFF7
 11434                           tblptrl	equ	0xFF6
 11435                           tablat	equ	0xFF5
 11436                           prodh	equ	0xFF4
 11437                           prodl	equ	0xFF3
 11438                           intcon	equ	0xFF2
 11439                           intcon2	equ	0xFF1
 11440                           intcon3	equ	0xFF0
 11441                           postinc0	equ	0xFEE
 11442                           wreg	equ	0xFE8
 11443                           postdec1	equ	0xFE5
 11444                           plusw1	equ	0xFE3
 11445                           fsr1l	equ	0xFE1
 11446                           indf2	equ	0xFDF
 11447                           postinc2	equ	0xFDE
 11448                           postdec2	equ	0xFDD
 11449                           plusw2	equ	0xFDB
 11450                           fsr2h	equ	0xFDA
 11451                           fsr2l	equ	0xFD9
 11452                           status	equ	0xFD8
 11453                           
 11454 ;; *************** function _ISR *****************
 11455 ;; Defined at:
 11456 ;;		line 1034 in file "../main.c"
 11457 ;; Parameters:    Size  Location     Type
 11458 ;;		None
 11459 ;; Auto vars:     Size  Location     Type
 11460 ;;  keypress        1   51[COMRAM] unsigned char 
 11461 ;; Return value:  Size  Location     Type
 11462 ;;                  1    wreg      void 
 11463 ;; Registers used:
 11464 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11465 ;; Tracked objects:
 11466 ;;		On entry : 0/0
 11467 ;;		On exit  : 0/0
 11468 ;;		Unchanged: 0/0
 11469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11470 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11471 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11472 ;;      Temps:         15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11473 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11474 ;;Total ram usage:       16 bytes
 11475 ;; Hardware stack levels used:    1
 11476 ;; Hardware stack levels required when called:    4
 11477 ;; This function calls:
 11478 ;;		_keypressed
 11479 ;;		i2___awdiv
 11480 ;;		i2___awmod
 11481 ;;		i2_lcdInst
 11482 ;;		i2_printf
 11483 ;;		i2_stopOperation
 11484 ;; This function is called by:
 11485 ;;		Interrupt level 2
 11486 ;; This function uses a non-reentrant model
 11487 ;;
 11488                           
 11489                           	psect	intcode
 11490  000008                     __pintcode:
 11491                           	opt stack 0
 11492  000008                     _ISR:
 11493                           	opt stack 22
 11494                           
 11495                           ; BSR set to: 0
 11496                           ;incstack = 0
 11497  000008  8256               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 11498  00000A  ED61  F014         	call	int_func,f	;refresh shadow registers
 11499                           tblptru	equ	0xFF8
 11500                           tblptrh	equ	0xFF7
 11501                           tblptrl	equ	0xFF6
 11502                           tablat	equ	0xFF5
 11503                           prodh	equ	0xFF4
 11504                           prodl	equ	0xFF3
 11505                           intcon	equ	0xFF2
 11506                           intcon2	equ	0xFF1
 11507                           intcon3	equ	0xFF0
 11508                           postinc0	equ	0xFEE
 11509                           wreg	equ	0xFE8
 11510                           postdec1	equ	0xFE5
 11511                           plusw1	equ	0xFE3
 11512                           fsr1l	equ	0xFE1
 11513                           indf2	equ	0xFDF
 11514                           postinc2	equ	0xFDE
 11515                           postdec2	equ	0xFDD
 11516                           plusw2	equ	0xFDB
 11517                           fsr2h	equ	0xFDA
 11518                           fsr2l	equ	0xFD9
 11519                           status	equ	0xFD8
 11520                           
 11521                           	psect	intcode_body
 11522  0028C2                     __pintcode_body:
 11523                           	opt stack 22
 11524  0028C2                     int_func:
 11525                           	opt stack 22
 11526  0028C2  0006               	pop		; remove dummy address from shadow register refresh
 11527  0028C4  CFFA F026          	movff	pclath,??_ISR+1
 11528  0028C8  CFFB F027          	movff	pclatu,??_ISR+2
 11529  0028CC  CFE9 F028          	movff	fsr0l,??_ISR+3
 11530  0028D0  CFEA F029          	movff	fsr0h,??_ISR+4
 11531  0028D4  CFE1 F02A          	movff	fsr1l,??_ISR+5
 11532  0028D8  CFE2 F02B          	movff	fsr1h,??_ISR+6
 11533  0028DC  CFD9 F02C          	movff	fsr2l,??_ISR+7
 11534  0028E0  CFDA F02D          	movff	fsr2h,??_ISR+8
 11535  0028E4  CFF3 F02E          	movff	prodl,??_ISR+9
 11536  0028E8  CFF4 F02F          	movff	prodh,??_ISR+10
 11537  0028EC  CFF6 F030          	movff	tblptrl,??_ISR+11
 11538  0028F0  CFF7 F031          	movff	tblptrh,??_ISR+12
 11539  0028F4  CFF8 F032          	movff	tblptru,??_ISR+13
 11540  0028F8  CFF5 F033          	movff	tablat,??_ISR+14
 11541                           
 11542                           ;main.c: 1035: if (INT1IF){
 11543  0028FC  A0F0               	btfss	intcon3,0,c	;volatile
 11544  0028FE  D015               	goto	i2l5855
 11545                           
 11546                           ;main.c: 1036: unsigned char keypress = (PORTB & 0xF0) >> 4;
 11547  002900  3881               	swapf	3969,w,c	;volatile
 11548  002902  0B0F               	andlw	15
 11549  002904  0B0F               	andlw	15
 11550  002906  6E34               	movwf	ISR@keypress,c
 11551                           
 11552                           ;main.c: 1037: keypressed('4', '6', keys[keypress]);
 11553  002908  0E36               	movlw	54
 11554  00290A  6E21               	movwf	keypressed@right,c
 11555  00290C  5034               	movf	ISR@keypress,w,c
 11556  00290E  0D01               	mullw	1
 11557  002910  0E87               	movlw	low _keys
 11558  002912  24F3               	addwf	prodl,w,c
 11559  002914  6EF6               	movwf	tblptrl,c
 11560  002916  0EFD               	movlw	high _keys
 11561  002918  20F4               	addwfc	prodh,w,c
 11562  00291A  6EF7               	movwf	tblptrh,c
 11563  00291C                     	if	0	;There are less than 3 active tblptr bytes
 11564  00291C                     	endif
 11565  00291C  0008               	tblrd		*
 11566  00291E  CFF5 F022          	movff	tablat,keypressed@key
 11567  002922  0E34               	movlw	52
 11568  002924  ECEA  F016         	call	_keypressed
 11569                           
 11570                           ;main.c: 1038: INT1IF = 0;
 11571  002928  90F0               	bcf	intcon3,0,c	;volatile
 11572  00292A                     i2l5855:
 11573                           
 11574                           ;main.c: 1039: }
 11575                           ;main.c: 1040: if (screenMode == 1 && TMR0IF){
 11576  00292A  0100               	movlb	0	; () banked
 11577  00292C  05FA               	decf	_screenMode& (0+255),w,b
 11578  00292E  B4D8               	btfsc	status,2,c
 11579                           
 11580                           ; BSR set to: 0
 11581  002930  A4F2               	btfss	intcon,2,c	;volatile
 11582  002932  D04B               	goto	i2l5891
 11583                           
 11584                           ; BSR set to: 0
 11585                           ;main.c: 1041: TMR0IF = 0;
 11586  002934  94F2               	bcf	intcon,2,c	;volatile
 11587                           
 11588                           ; BSR set to: 0
 11589                           ;main.c: 1042: TMR0 = 55770;
 11590  002936  0ED9               	movlw	217
 11591  002938  6ED7               	movwf	4055,c	;volatile
 11592  00293A  0EDA               	movlw	218
 11593  00293C  6ED6               	movwf	4054,c	;volatile
 11594                           
 11595                           ; BSR set to: 0
 11596                           ;main.c: 1043: opTimer++;
 11597  00293E  2A51               	incf	_opTimer,f,c
 11598                           
 11599                           ; BSR set to: 0
 11600                           ;main.c: 1044: min = opTimer / 60;
 11601  002940  C051  F001         	movff	_opTimer,i2___awdiv@dividend
 11602  002944  6A02               	clrf	i2___awdiv@dividend+1,c
 11603  002946  0E00               	movlw	0
 11604  002948  6E04               	movwf	i2___awdiv@divisor+1,c
 11605  00294A  0E3C               	movlw	60
 11606  00294C  6E03               	movwf	i2___awdiv@divisor,c
 11607  00294E  EC80  F018         	call	i2___awdiv	;wreg free
 11608  002952  5001               	movf	?i2___awdiv,w,c
 11609  002954  0100               	movlb	0	; () banked
 11610  002956  6FE5               	movwf	_min& (0+255),b
 11611                           
 11612                           ; BSR set to: 0
 11613                           ;main.c: 1045: sec = opTimer % 60;
 11614  002958  C051  F001         	movff	_opTimer,i2___awmod@dividend
 11615  00295C  6A02               	clrf	i2___awmod@dividend+1,c
 11616  00295E  0E00               	movlw	0
 11617  002960  6E04               	movwf	i2___awmod@divisor+1,c
 11618  002962  0E3C               	movlw	60
 11619  002964  6E03               	movwf	i2___awmod@divisor,c
 11620  002966  ECFE  F018         	call	i2___awmod	;wreg free
 11621  00296A  5001               	movf	?i2___awmod,w,c
 11622  00296C  0100               	movlb	0	; () banked
 11623  00296E  6FEB               	movwf	_sec& (0+255),b
 11624                           
 11625                           ; BSR set to: 0
 11626                           ;main.c: 1046: lcdInst(0b10000000);;
 11627  002970  0E80               	movlw	128
 11628  002972  ECFB  F01B         	call	i2_lcdInst
 11629                           
 11630                           ;main.c: 1047: printf("RUNNING: %02d:%02d   ", min, sec);
 11631  002976  0E36               	movlw	low STR_39
 11632  002978  6E0D               	movwf	i2printf@f,c
 11633  00297A  0EFE               	movlw	high STR_39
 11634  00297C  6E0E               	movwf	i2printf@f+1,c
 11635  00297E  C0E5  F00F         	movff	_min,?i2_printf+2
 11636  002982  6A10               	clrf	?i2_printf+3,c
 11637  002984  C0EB  F011         	movff	_sec,?i2_printf+4
 11638  002988  6A12               	clrf	?i2_printf+5,c
 11639  00298A  EC5E  F011         	call	i2_printf	;wreg free
 11640                           
 11641                           ;main.c: 1049: if (opTimer >= 180)
 11642  00298E  0EB3               	movlw	179
 11643  002990  6451               	cpfsgt	_opTimer,c
 11644  002992  D002               	goto	i2l5877
 11645                           
 11646                           ;main.c: 1050: stopOperation();
 11647  002994  ECE4  F012         	call	i2_stopOperation	;wreg free
 11648  002998                     i2l5877:
 11649                           
 11650                           ;main.c: 1052: if (!sorting){
 11651  002998  5053               	movf	_sorting,w,c
 11652  00299A  A4D8               	btfss	status,2,c
 11653  00299C  D013               	goto	i2l5889
 11654                           
 11655                           ;main.c: 1053: if (ADRES > 50)
 11656  00299E  50C4               	movf	4036,w,c	;volatile
 11657  0029A0  E104               	bnz	i2u545_40
 11658  0029A2  0E33               	movlw	51
 11659  0029A4  5CC3               	subwf	4035,w,c	;volatile
 11660  0029A6  A0D8               	btfss	status,0,c
 11661  0029A8  D003               	goto	i2l5883
 11662  0029AA                     i2u545_40:
 11663                           
 11664                           ;main.c: 1054: doneTimer++;
 11665  0029AA  0100               	movlb	0	; () banked
 11666  0029AC  2BE3               	incf	_doneTimer& (0+255),f,b
 11667  0029AE  D003               	goto	i2l5885
 11668  0029B0                     i2l5883:
 11669                           
 11670                           ;main.c: 1055: else
 11671                           ;main.c: 1056: doneTimer = 0;
 11672  0029B0  0E00               	movlw	0
 11673  0029B2  0100               	movlb	0	; () banked
 11674  0029B4  6FE3               	movwf	_doneTimer& (0+255),b
 11675  0029B6                     i2l5885:
 11676                           
 11677                           ; BSR set to: 0
 11678                           ;main.c: 1057: if (doneTimer >= 10)
 11679  0029B6  0E09               	movlw	9
 11680  0029B8  0100               	movlb	0	; () banked
 11681  0029BA  65E3               	cpfsgt	_doneTimer& (0+255),b
 11682  0029BC  D006               	goto	i2l5891
 11683                           
 11684                           ; BSR set to: 0
 11685                           ;main.c: 1058: stopOperation();
 11686  0029BE  ECE4  F012         	call	i2_stopOperation	;wreg free
 11687                           
 11688                           ;main.c: 1060: }
 11689  0029C2  D003               	goto	i2l5891
 11690  0029C4                     i2l5889:
 11691                           
 11692                           ;main.c: 1061: else
 11693                           ;main.c: 1062: doneTimer = 0;
 11694  0029C4  0E00               	movlw	0
 11695  0029C6  0100               	movlb	0	; () banked
 11696  0029C8  6FE3               	movwf	_doneTimer& (0+255),b
 11697  0029CA                     i2l5891:
 11698                           
 11699                           ;main.c: 1063: }
 11700                           ;main.c: 1064: if (screenMode == 1 && TMR1IF){
 11701  0029CA  0100               	movlb	0	; () banked
 11702  0029CC  05FA               	decf	_screenMode& (0+255),w,b
 11703  0029CE  B4D8               	btfsc	status,2,c
 11704                           
 11705                           ; BSR set to: 0
 11706  0029D0  A09E               	btfss	3998,0,c	;volatile
 11707  0029D2  D0BD               	goto	i2l6013
 11708                           
 11709                           ; BSR set to: 0
 11710                           ;main.c: 1065: TMR1IF = 0;
 11711  0029D4  909E               	bcf	3998,0,c	;volatile
 11712                           
 11713                           ; BSR set to: 0
 11714                           ;main.c: 1066: TMR1 = 60535;
 11715  0029D6  0EEC               	movlw	236
 11716  0029D8  6ECF               	movwf	4047,c	;volatile
 11717  0029DA  0E77               	movlw	119
 11718  0029DC  6ECE               	movwf	4046,c	;volatile
 11719                           
 11720                           ; BSR set to: 0
 11721                           ;main.c: 1067: if (count_2ms)
 11722  0029DE  504F               	movf	_count_2ms,w,c
 11723  0029E0  1050               	iorwf	_count_2ms+1,w,c
 11724  0029E2  B4D8               	btfsc	status,2,c
 11725  0029E4  D003               	goto	i2l612
 11726                           
 11727                           ; BSR set to: 0
 11728                           ;main.c: 1068: count_2ms--;
 11729  0029E6  064F               	decf	_count_2ms,f,c
 11730  0029E8  A0D8               	btfss	status,0,c
 11731  0029EA  0650               	decf	_count_2ms+1,f,c
 11732  0029EC                     i2l612:
 11733                           
 11734                           ; BSR set to: 0
 11735                           ;main.c: 1069: solOnTimer++;
 11736  0029EC  2A52               	incf	_solOnTimer,f,c
 11737                           
 11738                           ; BSR set to: 0
 11739                           ;main.c: 1070: if (solOnTimer >= 150){
 11740  0029EE  0E95               	movlw	149
 11741  0029F0  6452               	cpfsgt	_solOnTimer,c
 11742  0029F2  D00D               	goto	i2l5909
 11743                           
 11744                           ; BSR set to: 0
 11745                           ;main.c: 1071: solOnTimer = 0;
 11746  0029F4  0E00               	movlw	0
 11747  0029F6  6E52               	movwf	_solOnTimer,c
 11748                           
 11749                           ; BSR set to: 0
 11750                           ;main.c: 1072: LATBbits.LB0 = !LATBbits.LB0;;
 11751  0029F8  B08A               	btfsc	3978,0,c	;volatile
 11752  0029FA  D003               	goto	i2u551_40
 11753  0029FC  6A25               	clrf	??_ISR& (0+255),c
 11754  0029FE  2A25               	incf	??_ISR& (0+255),f,c
 11755  002A00  D001               	goto	i2u552_48
 11756  002A02                     i2u551_40:
 11757  002A02  6A25               	clrf	??_ISR& (0+255),c
 11758  002A04                     i2u552_48:
 11759  002A04  508A               	movf	3978,w,c	;volatile
 11760  002A06  1825               	xorwf	??_ISR,w,c
 11761  002A08  0BFE               	andlw	-2
 11762  002A0A  1825               	xorwf	??_ISR,w,c
 11763  002A0C  6E8A               	movwf	3978,c	;volatile
 11764  002A0E                     i2l5909:
 11765                           
 11766                           ;main.c: 1073: }
 11767                           ;main.c: 1074: if (plat1Left){
 11768  002A0E  0100               	movlb	0	; () banked
 11769  002A10  51CF               	movf	_plat1Left& (0+255),w,b
 11770  002A12  0100               	movlb	0	; () banked
 11771  002A14  11D0               	iorwf	(_plat1Left+1)& (0+255),w,b
 11772  002A16  B4D8               	btfsc	status,2,c
 11773  002A18  D022               	goto	i2l5935
 11774                           
 11775                           ; BSR set to: 0
 11776                           ;main.c: 1075: if (step1 == 1){
 11777  002A1A  0454               	decf	_step1,w,c
 11778  002A1C  A4D8               	btfss	status,2,c
 11779  002A1E  D002               	goto	i2l5915
 11780                           
 11781                           ; BSR set to: 0
 11782                           ;main.c: 1076: LATCbits.LC5 = 1;;
 11783  002A20  8A8B               	bsf	3979,5,c	;volatile
 11784                           
 11785                           ;main.c: 1077: LATCbits.LC6 = 0;;
 11786  002A22  9C8B               	bcf	3979,6,c	;volatile
 11787  002A24                     i2l5915:
 11788                           
 11789                           ; BSR set to: 0
 11790                           ;main.c: 1078: }
 11791                           ;main.c: 1079: if (step1 == 2){
 11792  002A24  0E02               	movlw	2
 11793  002A26  1854               	xorwf	_step1,w,c
 11794  002A28  A4D8               	btfss	status,2,c
 11795  002A2A  D002               	goto	i2l5919
 11796                           
 11797                           ; BSR set to: 0
 11798                           ;main.c: 1080: LATCbits.LC1 = 0;;
 11799  002A2C  928B               	bcf	3979,1,c	;volatile
 11800                           
 11801                           ;main.c: 1081: LATCbits.LC2 = 1;;
 11802  002A2E  848B               	bsf	3979,2,c	;volatile
 11803  002A30                     i2l5919:
 11804                           
 11805                           ; BSR set to: 0
 11806                           ;main.c: 1082: }
 11807                           ;main.c: 1083: if (step1 == 3){
 11808  002A30  0E03               	movlw	3
 11809  002A32  1854               	xorwf	_step1,w,c
 11810  002A34  A4D8               	btfss	status,2,c
 11811  002A36  D002               	goto	i2l5923
 11812                           
 11813                           ; BSR set to: 0
 11814                           ;main.c: 1084: LATCbits.LC5 = 0;;
 11815  002A38  9A8B               	bcf	3979,5,c	;volatile
 11816                           
 11817                           ;main.c: 1085: LATCbits.LC6 = 1;;
 11818  002A3A  8C8B               	bsf	3979,6,c	;volatile
 11819  002A3C                     i2l5923:
 11820                           
 11821                           ; BSR set to: 0
 11822                           ;main.c: 1086: }
 11823                           ;main.c: 1087: if (step1 == 4){
 11824  002A3C  0E04               	movlw	4
 11825  002A3E  1854               	xorwf	_step1,w,c
 11826  002A40  A4D8               	btfss	status,2,c
 11827  002A42  D002               	goto	i2l5927
 11828                           
 11829                           ; BSR set to: 0
 11830                           ;main.c: 1088: LATCbits.LC1 = 1;;
 11831  002A44  828B               	bsf	3979,1,c	;volatile
 11832                           
 11833                           ;main.c: 1089: LATCbits.LC2 = 0;;
 11834  002A46  948B               	bcf	3979,2,c	;volatile
 11835  002A48                     i2l5927:
 11836                           
 11837                           ; BSR set to: 0
 11838                           ;main.c: 1090: }
 11839                           ;main.c: 1091: plat1Left--;
 11840  002A48  0100               	movlb	0	; () banked
 11841  002A4A  07CF               	decf	_plat1Left& (0+255),f,b
 11842  002A4C  A0D8               	btfss	status,0,c
 11843  002A4E  07D0               	decf	(_plat1Left+1)& (0+255),f,b
 11844                           
 11845                           ; BSR set to: 0
 11846                           ;main.c: 1092: if (step1>=4)
 11847  002A50  0E03               	movlw	3
 11848  002A52  6454               	cpfsgt	_step1,c
 11849  002A54  D003               	goto	i2l5933
 11850                           
 11851                           ; BSR set to: 0
 11852                           ;main.c: 1093: step1 = 1;
 11853  002A56  0E01               	movlw	1
 11854  002A58  6E54               	movwf	_step1,c
 11855  002A5A  D001               	goto	i2l5935
 11856  002A5C                     i2l5933:
 11857                           
 11858                           ; BSR set to: 0
 11859                           ;main.c: 1094: else
 11860                           ;main.c: 1095: step1++;
 11861  002A5C  2A54               	incf	_step1,f,c
 11862  002A5E                     i2l5935:
 11863                           
 11864                           ; BSR set to: 0
 11865                           ;main.c: 1096: }
 11866                           ;main.c: 1097: if (plat1Right){
 11867  002A5E  0100               	movlb	0	; () banked
 11868  002A60  51D1               	movf	_plat1Right& (0+255),w,b
 11869  002A62  0100               	movlb	0	; () banked
 11870  002A64  11D2               	iorwf	(_plat1Right+1)& (0+255),w,b
 11871  002A66  B4D8               	btfsc	status,2,c
 11872  002A68  D022               	goto	i2l5961
 11873                           
 11874                           ; BSR set to: 0
 11875                           ;main.c: 1098: if (step1 == 4){
 11876  002A6A  0E04               	movlw	4
 11877  002A6C  1854               	xorwf	_step1,w,c
 11878  002A6E  A4D8               	btfss	status,2,c
 11879  002A70  D002               	goto	i2l5941
 11880                           
 11881                           ; BSR set to: 0
 11882                           ;main.c: 1099: LATCbits.LC5 = 0;;
 11883  002A72  9A8B               	bcf	3979,5,c	;volatile
 11884                           
 11885                           ;main.c: 1100: LATCbits.LC6 = 1;;
 11886  002A74  8C8B               	bsf	3979,6,c	;volatile
 11887  002A76                     i2l5941:
 11888                           
 11889                           ; BSR set to: 0
 11890                           ;main.c: 1101: }
 11891                           ;main.c: 1102: if (step1 == 3){
 11892  002A76  0E03               	movlw	3
 11893  002A78  1854               	xorwf	_step1,w,c
 11894  002A7A  A4D8               	btfss	status,2,c
 11895  002A7C  D002               	goto	i2l5945
 11896                           
 11897                           ; BSR set to: 0
 11898                           ;main.c: 1103: LATCbits.LC1 = 0;;
 11899  002A7E  928B               	bcf	3979,1,c	;volatile
 11900                           
 11901                           ;main.c: 1104: LATCbits.LC2 = 1;;
 11902  002A80  848B               	bsf	3979,2,c	;volatile
 11903  002A82                     i2l5945:
 11904                           
 11905                           ; BSR set to: 0
 11906                           ;main.c: 1105: }
 11907                           ;main.c: 1106: if (step1 == 2){
 11908  002A82  0E02               	movlw	2
 11909  002A84  1854               	xorwf	_step1,w,c
 11910  002A86  A4D8               	btfss	status,2,c
 11911  002A88  D002               	goto	i2l5949
 11912                           
 11913                           ; BSR set to: 0
 11914                           ;main.c: 1107: LATCbits.LC5 = 1;;
 11915  002A8A  8A8B               	bsf	3979,5,c	;volatile
 11916                           
 11917                           ;main.c: 1108: LATCbits.LC6 = 0;;
 11918  002A8C  9C8B               	bcf	3979,6,c	;volatile
 11919  002A8E                     i2l5949:
 11920                           
 11921                           ; BSR set to: 0
 11922                           ;main.c: 1109: }
 11923                           ;main.c: 1110: if (step1 == 1){
 11924  002A8E  0454               	decf	_step1,w,c
 11925  002A90  A4D8               	btfss	status,2,c
 11926  002A92  D002               	goto	i2l5953
 11927                           
 11928                           ; BSR set to: 0
 11929                           ;main.c: 1111: LATCbits.LC1 = 1;;
 11930  002A94  828B               	bsf	3979,1,c	;volatile
 11931                           
 11932                           ;main.c: 1112: LATCbits.LC2 = 0;;
 11933  002A96  948B               	bcf	3979,2,c	;volatile
 11934  002A98                     i2l5953:
 11935                           
 11936                           ; BSR set to: 0
 11937                           ;main.c: 1113: }
 11938                           ;main.c: 1114: plat1Right--;
 11939  002A98  0100               	movlb	0	; () banked
 11940  002A9A  07D1               	decf	_plat1Right& (0+255),f,b
 11941  002A9C  A0D8               	btfss	status,0,c
 11942  002A9E  07D2               	decf	(_plat1Right+1)& (0+255),f,b
 11943                           
 11944                           ; BSR set to: 0
 11945                           ;main.c: 1115: if (step1<=1)
 11946  002AA0  0E02               	movlw	2
 11947  002AA2  6054               	cpfslt	_step1,c
 11948  002AA4  D003               	goto	i2l5959
 11949                           
 11950                           ; BSR set to: 0
 11951                           ;main.c: 1116: step1 = 4;
 11952  002AA6  0E04               	movlw	4
 11953  002AA8  6E54               	movwf	_step1,c
 11954  002AAA  D001               	goto	i2l5961
 11955  002AAC                     i2l5959:
 11956                           
 11957                           ; BSR set to: 0
 11958                           ;main.c: 1117: else
 11959                           ;main.c: 1118: step1--;
 11960  002AAC  0654               	decf	_step1,f,c
 11961  002AAE                     i2l5961:
 11962                           
 11963                           ; BSR set to: 0
 11964                           ;main.c: 1119: }
 11965                           ;main.c: 1120: if (plat2Left){
 11966  002AAE  0100               	movlb	0	; () banked
 11967  002AB0  51D3               	movf	_plat2Left& (0+255),w,b
 11968  002AB2  0100               	movlb	0	; () banked
 11969  002AB4  11D4               	iorwf	(_plat2Left+1)& (0+255),w,b
 11970  002AB6  B4D8               	btfsc	status,2,c
 11971  002AB8  D022               	goto	i2l5987
 11972                           
 11973                           ; BSR set to: 0
 11974                           ;main.c: 1121: if (step2 == 1){
 11975  002ABA  0455               	decf	_step2,w,c
 11976  002ABC  A4D8               	btfss	status,2,c
 11977  002ABE  D002               	goto	i2l5967
 11978                           
 11979                           ; BSR set to: 0
 11980                           ;main.c: 1122: LATAbits.LA4 = 1;;
 11981  002AC0  8889               	bsf	3977,4,c	;volatile
 11982                           
 11983                           ;main.c: 1123: LATEbits.LE1 = 0;;
 11984  002AC2  928D               	bcf	3981,1,c	;volatile
 11985  002AC4                     i2l5967:
 11986                           
 11987                           ; BSR set to: 0
 11988                           ;main.c: 1124: }
 11989                           ;main.c: 1125: if (step2 == 2){
 11990  002AC4  0E02               	movlw	2
 11991  002AC6  1855               	xorwf	_step2,w,c
 11992  002AC8  A4D8               	btfss	status,2,c
 11993  002ACA  D002               	goto	i2l5971
 11994                           
 11995                           ; BSR set to: 0
 11996                           ;main.c: 1126: LATCbits.LC0 = 0;;
 11997  002ACC  908B               	bcf	3979,0,c	;volatile
 11998                           
 11999                           ;main.c: 1127: LATEbits.LE2 = 1;;
 12000  002ACE  848D               	bsf	3981,2,c	;volatile
 12001  002AD0                     i2l5971:
 12002                           
 12003                           ; BSR set to: 0
 12004                           ;main.c: 1128: }
 12005                           ;main.c: 1129: if (step2 == 3){
 12006  002AD0  0E03               	movlw	3
 12007  002AD2  1855               	xorwf	_step2,w,c
 12008  002AD4  A4D8               	btfss	status,2,c
 12009  002AD6  D002               	goto	i2l5975
 12010                           
 12011                           ; BSR set to: 0
 12012                           ;main.c: 1130: LATAbits.LA4 = 0;;
 12013  002AD8  9889               	bcf	3977,4,c	;volatile
 12014                           
 12015                           ;main.c: 1131: LATEbits.LE1 = 1;;
 12016  002ADA  828D               	bsf	3981,1,c	;volatile
 12017  002ADC                     i2l5975:
 12018                           
 12019                           ; BSR set to: 0
 12020                           ;main.c: 1132: }
 12021                           ;main.c: 1133: if (step2 == 4){
 12022  002ADC  0E04               	movlw	4
 12023  002ADE  1855               	xorwf	_step2,w,c
 12024  002AE0  A4D8               	btfss	status,2,c
 12025  002AE2  D002               	goto	i2l5979
 12026                           
 12027                           ; BSR set to: 0
 12028                           ;main.c: 1134: LATCbits.LC0 = 1;;
 12029  002AE4  808B               	bsf	3979,0,c	;volatile
 12030                           
 12031                           ;main.c: 1135: LATEbits.LE2 = 0;;
 12032  002AE6  948D               	bcf	3981,2,c	;volatile
 12033  002AE8                     i2l5979:
 12034                           
 12035                           ; BSR set to: 0
 12036                           ;main.c: 1136: }
 12037                           ;main.c: 1137: plat2Left--;
 12038  002AE8  0100               	movlb	0	; () banked
 12039  002AEA  07D3               	decf	_plat2Left& (0+255),f,b
 12040  002AEC  A0D8               	btfss	status,0,c
 12041  002AEE  07D4               	decf	(_plat2Left+1)& (0+255),f,b
 12042                           
 12043                           ; BSR set to: 0
 12044                           ;main.c: 1138: if (step2>=4)
 12045  002AF0  0E03               	movlw	3
 12046  002AF2  6455               	cpfsgt	_step2,c
 12047  002AF4  D003               	goto	i2l5985
 12048                           
 12049                           ; BSR set to: 0
 12050                           ;main.c: 1139: step2 = 1;
 12051  002AF6  0E01               	movlw	1
 12052  002AF8  6E55               	movwf	_step2,c
 12053  002AFA  D001               	goto	i2l5987
 12054  002AFC                     i2l5985:
 12055                           
 12056                           ; BSR set to: 0
 12057                           ;main.c: 1140: else
 12058                           ;main.c: 1141: step2++;
 12059  002AFC  2A55               	incf	_step2,f,c
 12060  002AFE                     i2l5987:
 12061                           
 12062                           ; BSR set to: 0
 12063                           ;main.c: 1142: }
 12064                           ;main.c: 1143: if (plat2Right){
 12065  002AFE  0100               	movlb	0	; () banked
 12066  002B00  51D5               	movf	_plat2Right& (0+255),w,b
 12067  002B02  0100               	movlb	0	; () banked
 12068  002B04  11D6               	iorwf	(_plat2Right+1)& (0+255),w,b
 12069  002B06  B4D8               	btfsc	status,2,c
 12070  002B08  D022               	goto	i2l6013
 12071                           
 12072                           ; BSR set to: 0
 12073                           ;main.c: 1144: if (step2 == 4){
 12074  002B0A  0E04               	movlw	4
 12075  002B0C  1855               	xorwf	_step2,w,c
 12076  002B0E  A4D8               	btfss	status,2,c
 12077  002B10  D002               	goto	i2l5993
 12078                           
 12079                           ; BSR set to: 0
 12080                           ;main.c: 1145: LATAbits.LA4 = 0;;
 12081  002B12  9889               	bcf	3977,4,c	;volatile
 12082                           
 12083                           ;main.c: 1146: LATEbits.LE1 = 1;;
 12084  002B14  828D               	bsf	3981,1,c	;volatile
 12085  002B16                     i2l5993:
 12086                           
 12087                           ; BSR set to: 0
 12088                           ;main.c: 1147: }
 12089                           ;main.c: 1148: if (step2 == 3){
 12090  002B16  0E03               	movlw	3
 12091  002B18  1855               	xorwf	_step2,w,c
 12092  002B1A  A4D8               	btfss	status,2,c
 12093  002B1C  D002               	goto	i2l5997
 12094                           
 12095                           ; BSR set to: 0
 12096                           ;main.c: 1149: LATCbits.LC0 = 0;;
 12097  002B1E  908B               	bcf	3979,0,c	;volatile
 12098                           
 12099                           ;main.c: 1150: LATEbits.LE2 = 1;;
 12100  002B20  848D               	bsf	3981,2,c	;volatile
 12101  002B22                     i2l5997:
 12102                           
 12103                           ; BSR set to: 0
 12104                           ;main.c: 1151: }
 12105                           ;main.c: 1152: if (step2 == 2){
 12106  002B22  0E02               	movlw	2
 12107  002B24  1855               	xorwf	_step2,w,c
 12108  002B26  A4D8               	btfss	status,2,c
 12109  002B28  D002               	goto	i2l6001
 12110                           
 12111                           ; BSR set to: 0
 12112                           ;main.c: 1153: LATAbits.LA4 = 1;;
 12113  002B2A  8889               	bsf	3977,4,c	;volatile
 12114                           
 12115                           ;main.c: 1154: LATEbits.LE1 = 0;;
 12116  002B2C  928D               	bcf	3981,1,c	;volatile
 12117  002B2E                     i2l6001:
 12118                           
 12119                           ; BSR set to: 0
 12120                           ;main.c: 1155: }
 12121                           ;main.c: 1156: if (step2 == 1){
 12122  002B2E  0455               	decf	_step2,w,c
 12123  002B30  A4D8               	btfss	status,2,c
 12124  002B32  D002               	goto	i2l6005
 12125                           
 12126                           ; BSR set to: 0
 12127                           ;main.c: 1157: LATCbits.LC0 = 1;;
 12128  002B34  808B               	bsf	3979,0,c	;volatile
 12129                           
 12130                           ;main.c: 1158: LATEbits.LE2 = 0;;
 12131  002B36  948D               	bcf	3981,2,c	;volatile
 12132  002B38                     i2l6005:
 12133                           
 12134                           ; BSR set to: 0
 12135                           ;main.c: 1159: }
 12136                           ;main.c: 1160: plat2Right--;
 12137  002B38  0100               	movlb	0	; () banked
 12138  002B3A  07D5               	decf	_plat2Right& (0+255),f,b
 12139  002B3C  A0D8               	btfss	status,0,c
 12140  002B3E  07D6               	decf	(_plat2Right+1)& (0+255),f,b
 12141                           
 12142                           ; BSR set to: 0
 12143                           ;main.c: 1161: if (step2<=1)
 12144  002B40  0E02               	movlw	2
 12145  002B42  6055               	cpfslt	_step2,c
 12146  002B44  D003               	goto	i2l6011
 12147                           
 12148                           ; BSR set to: 0
 12149                           ;main.c: 1162: step2 = 4;
 12150  002B46  0E04               	movlw	4
 12151  002B48  6E55               	movwf	_step2,c
 12152  002B4A  D001               	goto	i2l6013
 12153  002B4C                     i2l6011:
 12154                           
 12155                           ; BSR set to: 0
 12156                           ;main.c: 1163: else
 12157                           ;main.c: 1164: step2--;
 12158  002B4C  0655               	decf	_step2,f,c
 12159  002B4E                     i2l6013:
 12160                           
 12161                           ; BSR set to: 0
 12162                           ;main.c: 1165: }
 12163                           ;main.c: 1166: }
 12164                           ;main.c: 1167: if (screenMode == 1 && TMR2IF){
 12165  002B4E  0100               	movlb	0	; () banked
 12166  002B50  05FA               	decf	_screenMode& (0+255),w,b
 12167  002B52  B4D8               	btfsc	status,2,c
 12168                           
 12169                           ; BSR set to: 0
 12170  002B54  A29E               	btfss	3998,1,c	;volatile
 12171  002B56  D010               	goto	i2l643
 12172                           
 12173                           ; BSR set to: 0
 12174                           ;main.c: 1168: TMR2IF = 0;
 12175  002B58  929E               	bcf	3998,1,c	;volatile
 12176                           
 12177                           ; BSR set to: 0
 12178                           ;main.c: 1169: TMR2 = 155;
 12179  002B5A  0E9B               	movlw	155
 12180  002B5C  6ECC               	movwf	4044,c	;volatile
 12181                           
 12182                           ; BSR set to: 0
 12183                           ;main.c: 1170: LATBbits.LB2 = !LATBbits.LB2;;
 12184  002B5E  B48A               	btfsc	3978,2,c	;volatile
 12185  002B60  D003               	goto	i2u579_40
 12186  002B62  6A25               	clrf	??_ISR& (0+255),c
 12187  002B64  2A25               	incf	??_ISR& (0+255),f,c
 12188  002B66  D001               	goto	i2u580_48
 12189  002B68                     i2u579_40:
 12190  002B68  6A25               	clrf	??_ISR& (0+255),c
 12191  002B6A                     i2u580_48:
 12192  002B6A  4625               	rlncf	??_ISR,f,c
 12193  002B6C  4625               	rlncf	??_ISR,f,c
 12194  002B6E  508A               	movf	3978,w,c	;volatile
 12195  002B70  1825               	xorwf	??_ISR,w,c
 12196  002B72  0BFB               	andlw	-5
 12197  002B74  1825               	xorwf	??_ISR,w,c
 12198  002B76  6E8A               	movwf	3978,c	;volatile
 12199  002B78                     i2l643:
 12200  002B78  C033  FFF5         	movff	??_ISR+14,tablat
 12201  002B7C  C032  FFF8         	movff	??_ISR+13,tblptru
 12202  002B80  C031  FFF7         	movff	??_ISR+12,tblptrh
 12203  002B84  C030  FFF6         	movff	??_ISR+11,tblptrl
 12204  002B88  C02F  FFF4         	movff	??_ISR+10,prodh
 12205  002B8C  C02E  FFF3         	movff	??_ISR+9,prodl
 12206  002B90  C02D  FFDA         	movff	??_ISR+8,fsr2h
 12207  002B94  C02C  FFD9         	movff	??_ISR+7,fsr2l
 12208  002B98  C02B  FFE2         	movff	??_ISR+6,fsr1h
 12209  002B9C  C02A  FFE1         	movff	??_ISR+5,fsr1l
 12210  002BA0  C029  FFEA         	movff	??_ISR+4,fsr0h
 12211  002BA4  C028  FFE9         	movff	??_ISR+3,fsr0l
 12212  002BA8  C027  FFFB         	movff	??_ISR+2,pclatu
 12213  002BAC  C026  FFFA         	movff	??_ISR+1,pclath
 12214  002BB0  9256               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 12215  002BB2  0011               	retfie		f
 12216  002BB4                     __end_of_ISR:
 12217                           	opt stack 0
 12218                           pclatu	equ	0xFFB
 12219                           pclath	equ	0xFFA
 12220                           tblptru	equ	0xFF8
 12221                           tblptrh	equ	0xFF7
 12222                           tblptrl	equ	0xFF6
 12223                           tablat	equ	0xFF5
 12224                           prodh	equ	0xFF4
 12225                           prodl	equ	0xFF3
 12226                           intcon	equ	0xFF2
 12227                           intcon2	equ	0xFF1
 12228                           intcon3	equ	0xFF0
 12229                           postinc0	equ	0xFEE
 12230                           fsr0h	equ	0xFEA
 12231                           fsr0l	equ	0xFE9
 12232                           wreg	equ	0xFE8
 12233                           postdec1	equ	0xFE5
 12234                           plusw1	equ	0xFE3
 12235                           fsr1h	equ	0xFE2
 12236                           fsr1l	equ	0xFE1
 12237                           indf2	equ	0xFDF
 12238                           postinc2	equ	0xFDE
 12239                           postdec2	equ	0xFDD
 12240                           plusw2	equ	0xFDB
 12241                           fsr2h	equ	0xFDA
 12242                           fsr2l	equ	0xFD9
 12243                           status	equ	0xFD8
 12244                           
 12245 ;; *************** function _keypressed *****************
 12246 ;; Defined at:
 12247 ;;		line 509 in file "../main.c"
 12248 ;; Parameters:    Size  Location     Type
 12249 ;;  left            1    wreg     unsigned char 
 12250 ;;  right           1   32[COMRAM] unsigned char 
 12251 ;;  key             1   33[COMRAM] unsigned char 
 12252 ;; Auto vars:     Size  Location     Type
 12253 ;;  left            1   34[COMRAM] unsigned char 
 12254 ;;  i               1   35[COMRAM] unsigned char 
 12255 ;; Return value:  Size  Location     Type
 12256 ;;                  1    wreg      void 
 12257 ;; Registers used:
 12258 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12259 ;; Tracked objects:
 12260 ;;		On entry : 0/0
 12261 ;;		On exit  : 0/0
 12262 ;;		Unchanged: 0/0
 12263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12264 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12265 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12267 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12268 ;;Total ram usage:        4 bytes
 12269 ;; Hardware stack levels used:    1
 12270 ;; Hardware stack levels required when called:    3
 12271 ;; This function calls:
 12272 ;;		i2_I2C_Master_Read
 12273 ;;		i2_I2C_Master_Start
 12274 ;;		i2_I2C_Master_Stop
 12275 ;;		i2_I2C_Master_Write
 12276 ;;		i2_lcdInst
 12277 ;;		i2_printf
 12278 ;;		i2_stopOperation
 12279 ;; This function is called by:
 12280 ;;		_ISR
 12281 ;; This function uses a non-reentrant model
 12282 ;;
 12283                           
 12284                           	psect	text33
 12285  002DD4                     __ptext33:
 12286                           	opt stack 0
 12287  002DD4                     _keypressed:
 12288                           	opt stack 22
 12289                           
 12290                           ;incstack = 0
 12291                           ;keypressed@left stored from wreg
 12292  002DD4  6E23               	movwf	keypressed@left,c
 12293                           
 12294                           ;main.c: 510: if (key == '7'){
 12295  002DD6  0E37               	movlw	55
 12296  002DD8  1822               	xorwf	keypressed@key,w,c
 12297  002DDA  A4D8               	btfss	status,2,c
 12298  002DDC  D054               	goto	i2l5251
 12299                           
 12300                           ;main.c: 512: if(screenMode == 2){
 12301  002DDE  0E02               	movlw	2
 12302  002DE0  0100               	movlb	0	; () banked
 12303  002DE2  19FA               	xorwf	_screenMode& (0+255),w,b
 12304  002DE4  A4D8               	btfss	status,2,c
 12305  002DE6  D047               	goto	i2l5247
 12306                           
 12307                           ; BSR set to: 0
 12308                           ;main.c: 513: screenMode = 1;
 12309  002DE8  0E01               	movlw	1
 12310  002DEA  0100               	movlb	0	; () banked
 12311  002DEC  6FFA               	movwf	_screenMode& (0+255),b
 12312                           
 12313                           ; BSR set to: 0
 12314                           ;main.c: 514: T0CONbits.TMR0ON = 1;
 12315  002DEE  8ED5               	bsf	4053,7,c	;volatile
 12316                           
 12317                           ; BSR set to: 0
 12318                           ;main.c: 515: T1CONbits.TMR1ON = 1;
 12319  002DF0  80CD               	bsf	4045,0,c	;volatile
 12320                           
 12321                           ; BSR set to: 0
 12322                           ;main.c: 516: T2CONbits.TMR2ON = 1;
 12323  002DF2  84CA               	bsf	4042,2,c	;volatile
 12324                           
 12325                           ;main.c: 517: startGear = 1;
 12326  002DF4  0E01               	movlw	1
 12327  002DF6  0100               	movlb	0	; () banked
 12328  002DF8  6FEC               	movwf	_startGear& (0+255),b
 12329                           
 12330                           ; BSR set to: 0
 12331                           ;main.c: 520: I2C_Master_Start();
 12332  002DFA  EC1B  F01C         	call	i2_I2C_Master_Start	;wreg free
 12333                           
 12334                           ;main.c: 521: I2C_Master_Write(0b11010000);
 12335  002DFE  0E00               	movlw	0
 12336  002E00  6E03               	movwf	i2I2C_Master_Write@d+1,c
 12337  002E02  0ED0               	movlw	208
 12338  002E04  6E02               	movwf	i2I2C_Master_Write@d,c
 12339  002E06  EC06  F01C         	call	i2_I2C_Master_Write	;wreg free
 12340                           
 12341                           ;main.c: 522: I2C_Master_Write(0x00);
 12342  002E0A  0E00               	movlw	0
 12343  002E0C  6E03               	movwf	i2I2C_Master_Write@d+1,c
 12344  002E0E  0E00               	movlw	0
 12345  002E10  6E02               	movwf	i2I2C_Master_Write@d,c
 12346  002E12  EC06  F01C         	call	i2_I2C_Master_Write	;wreg free
 12347                           
 12348                           ;main.c: 523: I2C_Master_Stop();
 12349  002E16  EC17  F01C         	call	i2_I2C_Master_Stop	;wreg free
 12350                           
 12351                           ;main.c: 525: I2C_Master_Start();
 12352  002E1A  EC1B  F01C         	call	i2_I2C_Master_Start	;wreg free
 12353                           
 12354                           ;main.c: 526: I2C_Master_Write(0b11010001);
 12355  002E1E  0E00               	movlw	0
 12356  002E20  6E03               	movwf	i2I2C_Master_Write@d+1,c
 12357  002E22  0ED1               	movlw	209
 12358  002E24  6E02               	movwf	i2I2C_Master_Write@d,c
 12359  002E26  EC06  F01C         	call	i2_I2C_Master_Write	;wreg free
 12360                           
 12361                           ;main.c: 527: for(unsigned char i=0;i<0x06;i++){
 12362  002E2A  0E00               	movlw	0
 12363  002E2C  6E24               	movwf	keypressed@i,c
 12364  002E2E                     i2l5231:
 12365  002E2E  0E05               	movlw	5
 12366  002E30  6424               	cpfsgt	keypressed@i,c
 12367  002E32  D001               	goto	i2l5235
 12368  002E34  D00E               	goto	i2l5241
 12369  002E36                     i2l5235:
 12370                           
 12371                           ;main.c: 528: lastRunRTC[i] = I2C_Master_Read(1);
 12372  002E36  5024               	movf	keypressed@i,w,c
 12373  002E38  0D01               	mullw	1
 12374  002E3A  0EC8               	movlw	low _lastRunRTC
 12375  002E3C  24F3               	addwf	prodl,w,c
 12376  002E3E  6ED9               	movwf	fsr2l,c
 12377  002E40  0E00               	movlw	high _lastRunRTC
 12378  002E42  20F4               	addwfc	prodh,w,c
 12379  002E44  6EDA               	movwf	fsr2h,c
 12380  002E46  0E01               	movlw	1
 12381  002E48  EC4D  F01B         	call	i2_I2C_Master_Read
 12382  002E4C  6EDF               	movwf	indf2,c
 12383  002E4E  2A24               	incf	keypressed@i,f,c
 12384  002E50  D7EE               	goto	i2l5231
 12385  002E52                     i2l5241:
 12386                           
 12387                           ;main.c: 529: }
 12388                           ;main.c: 530: lastRunRTC[6] = I2C_Master_Read(0);
 12389  002E52  0E00               	movlw	0
 12390  002E54  EC4D  F01B         	call	i2_I2C_Master_Read
 12391  002E58  0100               	movlb	0	; () banked
 12392  002E5A  6FCE               	movwf	(_lastRunRTC+6)& (0+255),b
 12393                           
 12394                           ;main.c: 531: I2C_Master_Stop();
 12395  002E5C  EC17  F01C         	call	i2_I2C_Master_Stop	;wreg free
 12396                           
 12397                           ;main.c: 533: lcdInst(0b10000000);;
 12398  002E60  0E80               	movlw	128
 12399  002E62  ECFB  F01B         	call	i2_lcdInst
 12400                           
 12401                           ;main.c: 534: printf("RUNNING: 00:00  ");
 12402  002E66  0E43               	movlw	low STR_34
 12403  002E68  6E0D               	movwf	i2printf@f,c
 12404  002E6A  0EFF               	movlw	high STR_34
 12405  002E6C  6E0E               	movwf	i2printf@f+1,c
 12406  002E6E  EC5E  F011         	call	i2_printf	;wreg free
 12407                           
 12408                           ;main.c: 535: LATBbits.LB0 = 1;;
 12409  002E72  808A               	bsf	3978,0,c	;volatile
 12410                           
 12411                           ;main.c: 536: }
 12412  002E74  0012               	return	
 12413  002E76                     i2l5247:
 12414                           
 12415                           ;main.c: 537: else if (screenMode == 0)
 12416  002E76  0100               	movlb	0	; () banked
 12417  002E78  51FA               	movf	_screenMode& (0+255),w,b
 12418  002E7A  A4D8               	btfss	status,2,c
 12419  002E7C  0012               	return	
 12420                           
 12421                           ; BSR set to: 0
 12422                           ;main.c: 538: screenMode = 2;
 12423  002E7E  0E02               	movlw	2
 12424  002E80  0100               	movlb	0	; () banked
 12425  002E82  6FFA               	movwf	_screenMode& (0+255),b
 12426                           
 12427                           ; BSR set to: 0
 12428                           ;main.c: 539: }
 12429                           
 12430                           ; BSR set to: 0
 12431  002E84  0012               	return	
 12432  002E86                     i2l5251:
 12433                           
 12434                           ;main.c: 540: else if (screenMode == 1){
 12435  002E86  0100               	movlb	0	; () banked
 12436  002E88  05FA               	decf	_screenMode& (0+255),w,b
 12437  002E8A  A4D8               	btfss	status,2,c
 12438  002E8C  D007               	goto	i2l5257
 12439                           
 12440                           ; BSR set to: 0
 12441                           ;main.c: 541: if (key == 'C')
 12442  002E8E  0E43               	movlw	67
 12443  002E90  1822               	xorwf	keypressed@key,w,c
 12444  002E92  A4D8               	btfss	status,2,c
 12445  002E94  0012               	return	
 12446                           
 12447                           ; BSR set to: 0
 12448                           ;main.c: 543: stopOperation();
 12449  002E96  ECE4  F012         	call	i2_stopOperation	;wreg free
 12450                           
 12451                           ;main.c: 544: }
 12452  002E9A  0012               	return	
 12453  002E9C                     i2l5257:
 12454                           
 12455                           ;main.c: 545: else if (screenMode != 0){
 12456  002E9C  0100               	movlb	0	; () banked
 12457  002E9E  51FA               	movf	_screenMode& (0+255),w,b
 12458  002EA0  B4D8               	btfsc	status,2,c
 12459  002EA2  0012               	return	
 12460                           
 12461                           ; BSR set to: 0
 12462                           ;main.c: 546: if (key == right){
 12463  002EA4  5021               	movf	keypressed@right,w,c
 12464  002EA6  1822               	xorwf	keypressed@key,w,c
 12465  002EA8  A4D8               	btfss	status,2,c
 12466  002EAA  D00C               	goto	i2l5267
 12467                           
 12468                           ; BSR set to: 0
 12469                           ;main.c: 547: if (screenMode == 2)
 12470  002EAC  0E02               	movlw	2
 12471  002EAE  0100               	movlb	0	; () banked
 12472  002EB0  19FA               	xorwf	_screenMode& (0+255),w,b
 12473  002EB2  A4D8               	btfss	status,2,c
 12474  002EB4  D004               	goto	i2l5265
 12475                           
 12476                           ; BSR set to: 0
 12477                           ;main.c: 548: screenMode = 15;
 12478  002EB6  0E0F               	movlw	15
 12479  002EB8  0100               	movlb	0	; () banked
 12480  002EBA  6FFA               	movwf	_screenMode& (0+255),b
 12481  002EBC  0012               	return	
 12482  002EBE                     i2l5265:
 12483                           
 12484                           ; BSR set to: 0
 12485                           ;main.c: 549: else
 12486                           ;main.c: 550: screenMode--;
 12487  002EBE  0100               	movlb	0	; () banked
 12488  002EC0  07FA               	decf	_screenMode& (0+255),f,b
 12489                           
 12490                           ; BSR set to: 0
 12491                           ;main.c: 551: }
 12492  002EC2  0012               	return	
 12493  002EC4                     i2l5267:
 12494                           
 12495                           ; BSR set to: 0
 12496                           ;main.c: 552: else if (key == left){
 12497  002EC4  5023               	movf	keypressed@left,w,c
 12498  002EC6  1822               	xorwf	keypressed@key,w,c
 12499  002EC8  A4D8               	btfss	status,2,c
 12500  002ECA  0012               	return	
 12501                           
 12502                           ; BSR set to: 0
 12503                           ;main.c: 553: if (screenMode == 15)
 12504  002ECC  0E0F               	movlw	15
 12505  002ECE  0100               	movlb	0	; () banked
 12506  002ED0  19FA               	xorwf	_screenMode& (0+255),w,b
 12507  002ED2  A4D8               	btfss	status,2,c
 12508  002ED4  D004               	goto	i2l5273
 12509                           
 12510                           ; BSR set to: 0
 12511                           ;main.c: 554: screenMode = 2;
 12512  002ED6  0E02               	movlw	2
 12513  002ED8  0100               	movlb	0	; () banked
 12514  002EDA  6FFA               	movwf	_screenMode& (0+255),b
 12515  002EDC  0012               	return	
 12516  002EDE                     i2l5273:
 12517                           
 12518                           ; BSR set to: 0
 12519                           ;main.c: 555: else
 12520                           ;main.c: 556: screenMode++;
 12521  002EDE  0100               	movlb	0	; () banked
 12522  002EE0  2BFA               	incf	_screenMode& (0+255),f,b
 12523                           
 12524                           ; BSR set to: 0
 12525                           
 12526                           ; BSR set to: 0
 12527                           
 12528                           ; BSR set to: 0
 12529                           
 12530                           ; BSR set to: 0
 12531                           
 12532                           ; BSR set to: 0
 12533  002EE2  0012               	return	
 12534  002EE4                     __end_of_keypressed:
 12535                           	opt stack 0
 12536                           pclatu	equ	0xFFB
 12537                           pclath	equ	0xFFA
 12538                           tblptru	equ	0xFF8
 12539                           tblptrh	equ	0xFF7
 12540                           tblptrl	equ	0xFF6
 12541                           tablat	equ	0xFF5
 12542                           prodh	equ	0xFF4
 12543                           prodl	equ	0xFF3
 12544                           intcon	equ	0xFF2
 12545                           intcon2	equ	0xFF1
 12546                           intcon3	equ	0xFF0
 12547                           postinc0	equ	0xFEE
 12548                           fsr0h	equ	0xFEA
 12549                           fsr0l	equ	0xFE9
 12550                           wreg	equ	0xFE8
 12551                           postdec1	equ	0xFE5
 12552                           plusw1	equ	0xFE3
 12553                           fsr1h	equ	0xFE2
 12554                           fsr1l	equ	0xFE1
 12555                           indf2	equ	0xFDF
 12556                           postinc2	equ	0xFDE
 12557                           postdec2	equ	0xFDD
 12558                           plusw2	equ	0xFDB
 12559                           fsr2h	equ	0xFDA
 12560                           fsr2l	equ	0xFD9
 12561                           status	equ	0xFD8
 12562                           
 12563 ;; *************** function i2_stopOperation *****************
 12564 ;; Defined at:
 12565 ;;		line 569 in file "../main.c"
 12566 ;; Parameters:    Size  Location     Type
 12567 ;;		None
 12568 ;; Auto vars:     Size  Location     Type
 12569 ;;  stopOperatio    2    9[COMRAM] unsigned int 
 12570 ;;  stopOperatio    1    8[COMRAM] unsigned char 
 12571 ;; Return value:  Size  Location     Type
 12572 ;;                  1    wreg      void 
 12573 ;; Registers used:
 12574 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 12575 ;; Tracked objects:
 12576 ;;		On entry : 0/0
 12577 ;;		On exit  : 0/0
 12578 ;;		Unchanged: 0/0
 12579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12580 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12581 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12582 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12583 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12584 ;;Total ram usage:        3 bytes
 12585 ;; Hardware stack levels used:    1
 12586 ;; Hardware stack levels required when called:    1
 12587 ;; This function calls:
 12588 ;;		i2_Eeprom_ReadByte
 12589 ;;		i2_Eeprom_WriteByte
 12590 ;;		i2___awdiv
 12591 ;;		i2___awmod
 12592 ;;		i2_next_address
 12593 ;; This function is called by:
 12594 ;;		_keypressed
 12595 ;;		_ISR
 12596 ;; This function uses a non-reentrant model
 12597 ;;
 12598                           
 12599                           	psect	text34
 12600  0025C8                     __ptext34:
 12601                           	opt stack 0
 12602  0025C8                     i2_stopOperation:
 12603                           	opt stack 24
 12604                           
 12605                           ;main.c: 570: T0CONbits.TMR0ON = 0;
 12606                           
 12607                           ;incstack = 0
 12608  0025C8  9ED5               	bcf	4053,7,c	;volatile
 12609                           
 12610                           ;main.c: 571: T1CONbits.TMR1ON = 0;
 12611  0025CA  90CD               	bcf	4045,0,c	;volatile
 12612                           
 12613                           ;main.c: 572: TMR2ON = 0;
 12614  0025CC  94CA               	bcf	4042,2,c	;volatile
 12615                           
 12616                           ;main.c: 573: TMR0 = 55770;
 12617  0025CE  0ED9               	movlw	217
 12618  0025D0  6ED7               	movwf	4055,c	;volatile
 12619  0025D2  0EDA               	movlw	218
 12620  0025D4  6ED6               	movwf	4054,c	;volatile
 12621                           
 12622                           ;main.c: 574: TMR1 = 60535;
 12623  0025D6  0EEC               	movlw	236
 12624  0025D8  6ECF               	movwf	4047,c	;volatile
 12625  0025DA  0E77               	movlw	119
 12626  0025DC  6ECE               	movwf	4046,c	;volatile
 12627                           
 12628                           ;main.c: 575: TMR2 = 155;
 12629  0025DE  0E9B               	movlw	155
 12630  0025E0  6ECC               	movwf	4044,c	;volatile
 12631                           
 12632                           ;main.c: 577: num9V = count9V;
 12633  0025E2  C0DF  F0E6         	movff	_count9V,_num9V
 12634                           
 12635                           ;main.c: 578: numC = countC;
 12636  0025E6  C0E1  F0E9         	movff	_countC,_numC
 12637                           
 12638                           ;main.c: 579: numAA = countAA;
 12639  0025EA  C0E0  F0E7         	movff	_countAA,_numAA
 12640                           
 12641                           ;main.c: 580: numDrain = countDrain;
 12642  0025EE  C0E2  F0EA         	movff	_countDrain,_numDrain
 12643                           
 12644                           ;main.c: 581: numBats = count9V + countC + countAA + countDrain;
 12645  0025F2  0100               	movlb	0	; () banked
 12646  0025F4  51DF               	movf	_count9V& (0+255),w,b
 12647  0025F6  0100               	movlb	0	; () banked
 12648  0025F8  25E1               	addwf	_countC& (0+255),w,b
 12649  0025FA  0100               	movlb	0	; () banked
 12650  0025FC  25E0               	addwf	_countAA& (0+255),w,b
 12651  0025FE  0100               	movlb	0	; () banked
 12652  002600  25E2               	addwf	_countDrain& (0+255),w,b
 12653  002602  0100               	movlb	0	; () banked
 12654  002604  6FE8               	movwf	_numBats& (0+255),b
 12655                           
 12656                           ; BSR set to: 0
 12657                           ;main.c: 583: unsigned char address_code = Eeprom_ReadByte(0);
 12658  002606  0E00               	movlw	0
 12659  002608  6E02               	movwf	i2Eeprom_ReadByte@address+1,c
 12660  00260A  0E00               	movlw	0
 12661  00260C  6E01               	movwf	i2Eeprom_ReadByte@address,c
 12662  00260E  ECAF  F01B         	call	i2_Eeprom_ReadByte	;wreg free
 12663  002612  6E09               	movwf	i2stopOperation@address_code,c
 12664                           
 12665                           ;main.c: 584: uint16_t address = address_code * 96 + 1;
 12666  002614  5009               	movf	i2stopOperation@address_code,w,c
 12667  002616  0D60               	mullw	96
 12668  002618  0E01               	movlw	1
 12669  00261A  24F3               	addwf	prodl,w,c
 12670  00261C  6E0A               	movwf	i2stopOperation@address,c
 12671  00261E  0E00               	movlw	0
 12672  002620  20F4               	addwfc	prodh,w,c
 12673  002622  6E0B               	movwf	i2stopOperation@address+1,c
 12674                           
 12675                           ;main.c: 585: Eeprom_WriteByte(address, lastRunRTC[6]);
 12676  002624  C00A  F001         	movff	i2stopOperation@address,i2Eeprom_WriteByte@address
 12677  002628  C00B  F002         	movff	i2stopOperation@address+1,i2Eeprom_WriteByte@address+1
 12678  00262C  C0CE  F003         	movff	_lastRunRTC+6,i2Eeprom_WriteByte@data
 12679  002630  EC27  F01B         	call	i2_Eeprom_WriteByte	;wreg free
 12680                           
 12681                           ;main.c: 586: address = next_address(address);
 12682  002634  C00A  F001         	movff	i2stopOperation@address,i2next_address@address
 12683  002638  C00B  F002         	movff	i2stopOperation@address+1,i2next_address@address+1
 12684  00263C  ECEE  F01B         	call	i2_next_address	;wreg free
 12685  002640  C001  F00A         	movff	?i2_next_address,i2stopOperation@address
 12686  002644  C002  F00B         	movff	?i2_next_address+1,i2stopOperation@address+1
 12687                           
 12688                           ;main.c: 587: Eeprom_WriteByte(address, lastRunRTC[5]);
 12689  002648  C00A  F001         	movff	i2stopOperation@address,i2Eeprom_WriteByte@address
 12690  00264C  C00B  F002         	movff	i2stopOperation@address+1,i2Eeprom_WriteByte@address+1
 12691  002650  C0CD  F003         	movff	_lastRunRTC+5,i2Eeprom_WriteByte@data
 12692  002654  EC27  F01B         	call	i2_Eeprom_WriteByte	;wreg free
 12693                           
 12694                           ;main.c: 588: address = next_address(address);
 12695  002658  C00A  F001         	movff	i2stopOperation@address,i2next_address@address
 12696  00265C  C00B  F002         	movff	i2stopOperation@address+1,i2next_address@address+1
 12697  002660  ECEE  F01B         	call	i2_next_address	;wreg free
 12698  002664  C001  F00A         	movff	?i2_next_address,i2stopOperation@address
 12699  002668  C002  F00B         	movff	?i2_next_address+1,i2stopOperation@address+1
 12700                           
 12701                           ;main.c: 589: Eeprom_WriteByte(address, lastRunRTC[4]);
 12702  00266C  C00A  F001         	movff	i2stopOperation@address,i2Eeprom_WriteByte@address
 12703  002670  C00B  F002         	movff	i2stopOperation@address+1,i2Eeprom_WriteByte@address+1
 12704  002674  C0CC  F003         	movff	_lastRunRTC+4,i2Eeprom_WriteByte@data
 12705  002678  EC27  F01B         	call	i2_Eeprom_WriteByte	;wreg free
 12706                           
 12707                           ;main.c: 590: address = next_address(address);
 12708  00267C  C00A  F001         	movff	i2stopOperation@address,i2next_address@address
 12709  002680  C00B  F002         	movff	i2stopOperation@address+1,i2next_address@address+1
 12710  002684  ECEE  F01B         	call	i2_next_address	;wreg free
 12711  002688  C001  F00A         	movff	?i2_next_address,i2stopOperation@address
 12712  00268C  C002  F00B         	movff	?i2_next_address+1,i2stopOperation@address+1
 12713                           
 12714                           ;main.c: 591: Eeprom_WriteByte(address, lastRunRTC[2]);
 12715  002690  C00A  F001         	movff	i2stopOperation@address,i2Eeprom_WriteByte@address
 12716  002694  C00B  F002         	movff	i2stopOperation@address+1,i2Eeprom_WriteByte@address+1
 12717  002698  C0CA  F003         	movff	_lastRunRTC+2,i2Eeprom_WriteByte@data
 12718  00269C  EC27  F01B         	call	i2_Eeprom_WriteByte	;wreg free
 12719                           
 12720                           ;main.c: 592: address = next_address(address);
 12721  0026A0  C00A  F001         	movff	i2stopOperation@address,i2next_address@address
 12722  0026A4  C00B  F002         	movff	i2stopOperation@address+1,i2next_address@address+1
 12723  0026A8  ECEE  F01B         	call	i2_next_address	;wreg free
 12724  0026AC  C001  F00A         	movff	?i2_next_address,i2stopOperation@address
 12725  0026B0  C002  F00B         	movff	?i2_next_address+1,i2stopOperation@address+1
 12726                           
 12727                           ;main.c: 593: Eeprom_WriteByte(address, lastRunRTC[1]);
 12728  0026B4  C00A  F001         	movff	i2stopOperation@address,i2Eeprom_WriteByte@address
 12729  0026B8  C00B  F002         	movff	i2stopOperation@address+1,i2Eeprom_WriteByte@address+1
 12730  0026BC  C0C9  F003         	movff	_lastRunRTC+1,i2Eeprom_WriteByte@data
 12731  0026C0  EC27  F01B         	call	i2_Eeprom_WriteByte	;wreg free
 12732                           
 12733                           ;main.c: 594: address = next_address(address);
 12734  0026C4  C00A  F001         	movff	i2stopOperation@address,i2next_address@address
 12735  0026C8  C00B  F002         	movff	i2stopOperation@address+1,i2next_address@address+1
 12736  0026CC  ECEE  F01B         	call	i2_next_address	;wreg free
 12737  0026D0  C001  F00A         	movff	?i2_next_address,i2stopOperation@address
 12738  0026D4  C002  F00B         	movff	?i2_next_address+1,i2stopOperation@address+1
 12739                           
 12740                           ;main.c: 595: Eeprom_WriteByte(address, lastRunRTC[0]);
 12741  0026D8  C00A  F001         	movff	i2stopOperation@address,i2Eeprom_WriteByte@address
 12742  0026DC  C00B  F002         	movff	i2stopOperation@address+1,i2Eeprom_WriteByte@address+1
 12743  0026E0  C0C8  F003         	movff	_lastRunRTC,i2Eeprom_WriteByte@data
 12744  0026E4  EC27  F01B         	call	i2_Eeprom_WriteByte	;wreg free
 12745                           
 12746                           ;main.c: 596: address = next_address(address);
 12747  0026E8  C00A  F001         	movff	i2stopOperation@address,i2next_address@address
 12748  0026EC  C00B  F002         	movff	i2stopOperation@address+1,i2next_address@address+1
 12749  0026F0  ECEE  F01B         	call	i2_next_address	;wreg free
 12750  0026F4  C001  F00A         	movff	?i2_next_address,i2stopOperation@address
 12751  0026F8  C002  F00B         	movff	?i2_next_address+1,i2stopOperation@address+1
 12752                           
 12753                           ;main.c: 598: Eeprom_WriteByte(address, countAA);
 12754  0026FC  C00A  F001         	movff	i2stopOperation@address,i2Eeprom_WriteByte@address
 12755  002700  C00B  F002         	movff	i2stopOperation@address+1,i2Eeprom_WriteByte@address+1
 12756  002704  C0E0  F003         	movff	_countAA,i2Eeprom_WriteByte@data
 12757  002708  EC27  F01B         	call	i2_Eeprom_WriteByte	;wreg free
 12758                           
 12759                           ;main.c: 599: address = next_address(address);
 12760  00270C  C00A  F001         	movff	i2stopOperation@address,i2next_address@address
 12761  002710  C00B  F002         	movff	i2stopOperation@address+1,i2next_address@address+1
 12762  002714  ECEE  F01B         	call	i2_next_address	;wreg free
 12763  002718  C001  F00A         	movff	?i2_next_address,i2stopOperation@address
 12764  00271C  C002  F00B         	movff	?i2_next_address+1,i2stopOperation@address+1
 12765                           
 12766                           ;main.c: 600: Eeprom_WriteByte(address, countC);
 12767  002720  C00A  F001         	movff	i2stopOperation@address,i2Eeprom_WriteByte@address
 12768  002724  C00B  F002         	movff	i2stopOperation@address+1,i2Eeprom_WriteByte@address+1
 12769  002728  C0E1  F003         	movff	_countC,i2Eeprom_WriteByte@data
 12770  00272C  EC27  F01B         	call	i2_Eeprom_WriteByte	;wreg free
 12771                           
 12772                           ;main.c: 601: address = next_address(address);
 12773  002730  C00A  F001         	movff	i2stopOperation@address,i2next_address@address
 12774  002734  C00B  F002         	movff	i2stopOperation@address+1,i2next_address@address+1
 12775  002738  ECEE  F01B         	call	i2_next_address	;wreg free
 12776  00273C  C001  F00A         	movff	?i2_next_address,i2stopOperation@address
 12777  002740  C002  F00B         	movff	?i2_next_address+1,i2stopOperation@address+1
 12778                           
 12779                           ;main.c: 602: Eeprom_WriteByte(address, count9V);
 12780  002744  C00A  F001         	movff	i2stopOperation@address,i2Eeprom_WriteByte@address
 12781  002748  C00B  F002         	movff	i2stopOperation@address+1,i2Eeprom_WriteByte@address+1
 12782  00274C  C0DF  F003         	movff	_count9V,i2Eeprom_WriteByte@data
 12783  002750  EC27  F01B         	call	i2_Eeprom_WriteByte	;wreg free
 12784                           
 12785                           ;main.c: 603: address = next_address(address);
 12786  002754  C00A  F001         	movff	i2stopOperation@address,i2next_address@address
 12787  002758  C00B  F002         	movff	i2stopOperation@address+1,i2next_address@address+1
 12788  00275C  ECEE  F01B         	call	i2_next_address	;wreg free
 12789  002760  C001  F00A         	movff	?i2_next_address,i2stopOperation@address
 12790  002764  C002  F00B         	movff	?i2_next_address+1,i2stopOperation@address+1
 12791                           
 12792                           ;main.c: 604: Eeprom_WriteByte(address, countDrain);
 12793  002768  C00A  F001         	movff	i2stopOperation@address,i2Eeprom_WriteByte@address
 12794  00276C  C00B  F002         	movff	i2stopOperation@address+1,i2Eeprom_WriteByte@address+1
 12795  002770  C0E2  F003         	movff	_countDrain,i2Eeprom_WriteByte@data
 12796  002774  EC27  F01B         	call	i2_Eeprom_WriteByte	;wreg free
 12797                           
 12798                           ;main.c: 605: address = next_address(address);
 12799  002778  C00A  F001         	movff	i2stopOperation@address,i2next_address@address
 12800  00277C  C00B  F002         	movff	i2stopOperation@address+1,i2next_address@address+1
 12801  002780  ECEE  F01B         	call	i2_next_address	;wreg free
 12802  002784  C001  F00A         	movff	?i2_next_address,i2stopOperation@address
 12803  002788  C002  F00B         	movff	?i2_next_address+1,i2stopOperation@address+1
 12804                           
 12805                           ;main.c: 606: Eeprom_WriteByte(address, numBats);
 12806  00278C  C00A  F001         	movff	i2stopOperation@address,i2Eeprom_WriteByte@address
 12807  002790  C00B  F002         	movff	i2stopOperation@address+1,i2Eeprom_WriteByte@address+1
 12808  002794  C0E8  F003         	movff	_numBats,i2Eeprom_WriteByte@data
 12809  002798  EC27  F01B         	call	i2_Eeprom_WriteByte	;wreg free
 12810                           
 12811                           ;main.c: 607: address = next_address(address);
 12812  00279C  C00A  F001         	movff	i2stopOperation@address,i2next_address@address
 12813  0027A0  C00B  F002         	movff	i2stopOperation@address+1,i2next_address@address+1
 12814  0027A4  ECEE  F01B         	call	i2_next_address	;wreg free
 12815  0027A8  C001  F00A         	movff	?i2_next_address,i2stopOperation@address
 12816  0027AC  C002  F00B         	movff	?i2_next_address+1,i2stopOperation@address+1
 12817                           
 12818                           ;main.c: 608: Eeprom_WriteByte(address, opTimer);
 12819  0027B0  C00A  F001         	movff	i2stopOperation@address,i2Eeprom_WriteByte@address
 12820  0027B4  C00B  F002         	movff	i2stopOperation@address+1,i2Eeprom_WriteByte@address+1
 12821  0027B8  C051  F003         	movff	_opTimer,i2Eeprom_WriteByte@data
 12822  0027BC  EC27  F01B         	call	i2_Eeprom_WriteByte	;wreg free
 12823                           
 12824                           ;main.c: 610: address_code++;
 12825  0027C0  2A09               	incf	i2stopOperation@address_code,f,c
 12826                           
 12827                           ;main.c: 611: if (address_code > 3)
 12828  0027C2  0E03               	movlw	3
 12829  0027C4  6409               	cpfsgt	i2stopOperation@address_code,c
 12830  0027C6  D009               	goto	i2l4367
 12831                           
 12832                           ;main.c: 612: Eeprom_WriteByte(0, 0);
 12833  0027C8  0E00               	movlw	0
 12834  0027CA  6E02               	movwf	i2Eeprom_WriteByte@address+1,c
 12835  0027CC  0E00               	movlw	0
 12836  0027CE  6E01               	movwf	i2Eeprom_WriteByte@address,c
 12837  0027D0  0E00               	movlw	0
 12838  0027D2  6E03               	movwf	i2Eeprom_WriteByte@data,c
 12839  0027D4  EC27  F01B         	call	i2_Eeprom_WriteByte	;wreg free
 12840  0027D8  D008               	goto	i2l4369
 12841  0027DA                     i2l4367:
 12842                           
 12843                           ;main.c: 613: else
 12844                           ;main.c: 614: Eeprom_WriteByte(0, address_code);
 12845  0027DA  0E00               	movlw	0
 12846  0027DC  6E02               	movwf	i2Eeprom_WriteByte@address+1,c
 12847  0027DE  0E00               	movlw	0
 12848  0027E0  6E01               	movwf	i2Eeprom_WriteByte@address,c
 12849  0027E2  C009  F003         	movff	i2stopOperation@address_code,i2Eeprom_WriteByte@data
 12850  0027E6  EC27  F01B         	call	i2_Eeprom_WriteByte	;wreg free
 12851  0027EA                     i2l4369:
 12852                           
 12853                           ;main.c: 616: count9V = 0;
 12854  0027EA  0E00               	movlw	0
 12855  0027EC  0100               	movlb	0	; () banked
 12856  0027EE  6FDF               	movwf	_count9V& (0+255),b
 12857                           
 12858                           ; BSR set to: 0
 12859                           ;main.c: 617: countC = 0;
 12860  0027F0  0E00               	movlw	0
 12861  0027F2  0100               	movlb	0	; () banked
 12862  0027F4  6FE1               	movwf	_countC& (0+255),b
 12863                           
 12864                           ; BSR set to: 0
 12865                           ;main.c: 618: countAA = 0;
 12866  0027F6  0E00               	movlw	0
 12867  0027F8  0100               	movlb	0	; () banked
 12868  0027FA  6FE0               	movwf	_countAA& (0+255),b
 12869                           
 12870                           ; BSR set to: 0
 12871                           ;main.c: 619: countDrain = 0;
 12872  0027FC  0E00               	movlw	0
 12873  0027FE  0100               	movlb	0	; () banked
 12874  002800  6FE2               	movwf	_countDrain& (0+255),b
 12875                           
 12876                           ; BSR set to: 0
 12877                           ;main.c: 620: min = opTimer / 60;
 12878  002802  C051  F001         	movff	_opTimer,i2___awdiv@dividend
 12879  002806  6A02               	clrf	i2___awdiv@dividend+1,c
 12880  002808  0E00               	movlw	0
 12881  00280A  6E04               	movwf	i2___awdiv@divisor+1,c
 12882  00280C  0E3C               	movlw	60
 12883  00280E  6E03               	movwf	i2___awdiv@divisor,c
 12884  002810  EC80  F018         	call	i2___awdiv	;wreg free
 12885  002814  5001               	movf	?i2___awdiv,w,c
 12886  002816  0100               	movlb	0	; () banked
 12887  002818  6FE5               	movwf	_min& (0+255),b
 12888                           
 12889                           ; BSR set to: 0
 12890                           ;main.c: 621: sec = opTimer % 60;
 12891  00281A  C051  F001         	movff	_opTimer,i2___awmod@dividend
 12892  00281E  6A02               	clrf	i2___awmod@dividend+1,c
 12893  002820  0E00               	movlw	0
 12894  002822  6E04               	movwf	i2___awmod@divisor+1,c
 12895  002824  0E3C               	movlw	60
 12896  002826  6E03               	movwf	i2___awmod@divisor,c
 12897  002828  ECFE  F018         	call	i2___awmod	;wreg free
 12898  00282C  5001               	movf	?i2___awmod,w,c
 12899  00282E  0100               	movlb	0	; () banked
 12900  002830  6FEB               	movwf	_sec& (0+255),b
 12901                           
 12902                           ; BSR set to: 0
 12903                           ;main.c: 622: opTimer = 0;
 12904  002832  0E00               	movlw	0
 12905  002834  6E51               	movwf	_opTimer,c
 12906                           
 12907                           ; BSR set to: 0
 12908                           ;main.c: 623: doneTimer = 0;
 12909  002836  0E00               	movlw	0
 12910  002838  0100               	movlb	0	; () banked
 12911  00283A  6FE3               	movwf	_doneTimer& (0+255),b
 12912                           
 12913                           ; BSR set to: 0
 12914                           ;main.c: 624: sorting = 0;
 12915  00283C  0E00               	movlw	0
 12916  00283E  6E53               	movwf	_sorting,c
 12917                           
 12918                           ; BSR set to: 0
 12919                           ;main.c: 625: plat1Left = 0;
 12920  002840  0E00               	movlw	0
 12921  002842  0100               	movlb	0	; () banked
 12922  002844  6FD0               	movwf	(_plat1Left+1)& (0+255),b
 12923  002846  0E00               	movlw	0
 12924  002848  6FCF               	movwf	_plat1Left& (0+255),b
 12925                           
 12926                           ; BSR set to: 0
 12927                           ;main.c: 626: plat1Right = 0;
 12928  00284A  0E00               	movlw	0
 12929  00284C  0100               	movlb	0	; () banked
 12930  00284E  6FD2               	movwf	(_plat1Right+1)& (0+255),b
 12931  002850  0E00               	movlw	0
 12932  002852  6FD1               	movwf	_plat1Right& (0+255),b
 12933                           
 12934                           ; BSR set to: 0
 12935                           ;main.c: 627: plat2Left = 0;
 12936  002854  0E00               	movlw	0
 12937  002856  0100               	movlb	0	; () banked
 12938  002858  6FD4               	movwf	(_plat2Left+1)& (0+255),b
 12939  00285A  0E00               	movlw	0
 12940  00285C  6FD3               	movwf	_plat2Left& (0+255),b
 12941                           
 12942                           ; BSR set to: 0
 12943                           ;main.c: 628: plat2Right = 0;
 12944  00285E  0E00               	movlw	0
 12945  002860  0100               	movlb	0	; () banked
 12946  002862  6FD6               	movwf	(_plat2Right+1)& (0+255),b
 12947  002864  0E00               	movlw	0
 12948  002866  6FD5               	movwf	_plat2Right& (0+255),b
 12949                           
 12950                           ; BSR set to: 0
 12951                           ;main.c: 629: turn2BackLeft = 0;
 12952  002868  0E00               	movlw	0
 12953  00286A  0100               	movlb	0	; () banked
 12954  00286C  6FDC               	movwf	(_turn2BackLeft+1)& (0+255),b
 12955  00286E  0E00               	movlw	0
 12956  002870  6FDB               	movwf	_turn2BackLeft& (0+255),b
 12957                           
 12958                           ; BSR set to: 0
 12959                           ;main.c: 630: turn1BackLeft = 0;
 12960  002872  0E00               	movlw	0
 12961  002874  0100               	movlb	0	; () banked
 12962  002876  6FD8               	movwf	(_turn1BackLeft+1)& (0+255),b
 12963  002878  0E00               	movlw	0
 12964  00287A  6FD7               	movwf	_turn1BackLeft& (0+255),b
 12965                           
 12966                           ; BSR set to: 0
 12967                           ;main.c: 631: turn2BackRight = 0;
 12968  00287C  0E00               	movlw	0
 12969  00287E  0100               	movlb	0	; () banked
 12970  002880  6FDE               	movwf	(_turn2BackRight+1)& (0+255),b
 12971  002882  0E00               	movlw	0
 12972  002884  6FDD               	movwf	_turn2BackRight& (0+255),b
 12973                           
 12974                           ; BSR set to: 0
 12975                           ;main.c: 632: turn1BackRight = 0;
 12976  002886  0E00               	movlw	0
 12977  002888  0100               	movlb	0	; () banked
 12978  00288A  6FDA               	movwf	(_turn1BackRight+1)& (0+255),b
 12979  00288C  0E00               	movlw	0
 12980  00288E  6FD9               	movwf	_turn1BackRight& (0+255),b
 12981                           
 12982                           ; BSR set to: 0
 12983                           ;main.c: 633: count_2ms = 0;
 12984  002890  0E00               	movlw	0
 12985  002892  6E50               	movwf	_count_2ms+1,c
 12986  002894  0E00               	movlw	0
 12987  002896  6E4F               	movwf	_count_2ms,c
 12988                           
 12989                           ; BSR set to: 0
 12990                           ;main.c: 634: doubleAA = 0;
 12991  002898  0E00               	movlw	0
 12992  00289A  0100               	movlb	0	; () banked
 12993  00289C  6FE4               	movwf	_doubleAA& (0+255),b
 12994                           
 12995                           ; BSR set to: 0
 12996                           ;main.c: 635: solOnTimer = 0;
 12997  00289E  0E00               	movlw	0
 12998  0028A0  6E52               	movwf	_solOnTimer,c
 12999                           
 13000                           ; BSR set to: 0
 13001                           ;main.c: 637: LATCbits.LC1 = 0;;
 13002  0028A2  928B               	bcf	3979,1,c	;volatile
 13003                           
 13004                           ; BSR set to: 0
 13005                           ;main.c: 638: LATCbits.LC2 = 0;;
 13006  0028A4  948B               	bcf	3979,2,c	;volatile
 13007                           
 13008                           ; BSR set to: 0
 13009                           ;main.c: 639: LATCbits.LC6 = 0;;
 13010  0028A6  9C8B               	bcf	3979,6,c	;volatile
 13011                           
 13012                           ; BSR set to: 0
 13013                           ;main.c: 640: LATCbits.LC5 = 0;;
 13014  0028A8  9A8B               	bcf	3979,5,c	;volatile
 13015                           
 13016                           ; BSR set to: 0
 13017                           ;main.c: 641: LATCbits.LC0 = 0;;
 13018  0028AA  908B               	bcf	3979,0,c	;volatile
 13019                           
 13020                           ; BSR set to: 0
 13021                           ;main.c: 642: LATEbits.LE2 = 0;;
 13022  0028AC  948D               	bcf	3981,2,c	;volatile
 13023                           
 13024                           ; BSR set to: 0
 13025                           ;main.c: 643: LATEbits.LE1 = 0;;
 13026  0028AE  928D               	bcf	3981,1,c	;volatile
 13027                           
 13028                           ; BSR set to: 0
 13029                           ;main.c: 644: LATAbits.LA4 = 0;;
 13030  0028B0  9889               	bcf	3977,4,c	;volatile
 13031                           
 13032                           ; BSR set to: 0
 13033                           ;main.c: 645: LATDbits.LD0= 0;;
 13034  0028B2  908C               	bcf	3980,0,c	;volatile
 13035                           
 13036                           ; BSR set to: 0
 13037                           ;main.c: 646: LATCbits.LC7 = 0;;
 13038  0028B4  9E8B               	bcf	3979,7,c	;volatile
 13039                           
 13040                           ; BSR set to: 0
 13041                           ;main.c: 647: LATDbits.LD1 = 0;;
 13042  0028B6  928C               	bcf	3980,1,c	;volatile
 13043                           
 13044                           ; BSR set to: 0
 13045                           ;main.c: 648: LATBbits.LB0 = 0;;
 13046  0028B8  908A               	bcf	3978,0,c	;volatile
 13047                           
 13048                           ; BSR set to: 0
 13049                           ;main.c: 649: screenMode = 0;
 13050  0028BA  0E00               	movlw	0
 13051  0028BC  0100               	movlb	0	; () banked
 13052  0028BE  6FFA               	movwf	_screenMode& (0+255),b
 13053                           
 13054                           ; BSR set to: 0
 13055  0028C0  0012               	return		;funcret
 13056  0028C2                     __end_ofi2_stopOperation:
 13057                           	opt stack 0
 13058                           pclatu	equ	0xFFB
 13059                           pclath	equ	0xFFA
 13060                           tblptru	equ	0xFF8
 13061                           tblptrh	equ	0xFF7
 13062                           tblptrl	equ	0xFF6
 13063                           tablat	equ	0xFF5
 13064                           prodh	equ	0xFF4
 13065                           prodl	equ	0xFF3
 13066                           intcon	equ	0xFF2
 13067                           intcon2	equ	0xFF1
 13068                           intcon3	equ	0xFF0
 13069                           postinc0	equ	0xFEE
 13070                           fsr0h	equ	0xFEA
 13071                           fsr0l	equ	0xFE9
 13072                           wreg	equ	0xFE8
 13073                           postdec1	equ	0xFE5
 13074                           plusw1	equ	0xFE3
 13075                           fsr1h	equ	0xFE2
 13076                           fsr1l	equ	0xFE1
 13077                           indf2	equ	0xFDF
 13078                           postinc2	equ	0xFDE
 13079                           postdec2	equ	0xFDD
 13080                           plusw2	equ	0xFDB
 13081                           fsr2h	equ	0xFDA
 13082                           fsr2l	equ	0xFD9
 13083                           status	equ	0xFD8
 13084                           
 13085 ;; *************** function i2_next_address *****************
 13086 ;; Defined at:
 13087 ;;		line 794 in file "../main.c"
 13088 ;; Parameters:    Size  Location     Type
 13089 ;;  address         2    0[COMRAM] unsigned int 
 13090 ;; Auto vars:     Size  Location     Type
 13091 ;;		None
 13092 ;; Return value:  Size  Location     Type
 13093 ;;                  2    0[COMRAM] unsigned int 
 13094 ;; Registers used:
 13095 ;;		wreg, status,2, status,0
 13096 ;; Tracked objects:
 13097 ;;		On entry : 0/0
 13098 ;;		On exit  : 0/0
 13099 ;;		Unchanged: 0/0
 13100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13101 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13102 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13104 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13105 ;;Total ram usage:        2 bytes
 13106 ;; Hardware stack levels used:    1
 13107 ;; This function calls:
 13108 ;;		Nothing
 13109 ;; This function is called by:
 13110 ;;		i2_stopOperation
 13111 ;; This function uses a non-reentrant model
 13112 ;;
 13113                           
 13114                           	psect	text35
 13115  0037DC                     __ptext35:
 13116                           	opt stack 0
 13117  0037DC                     i2_next_address:
 13118                           	opt stack 24
 13119                           
 13120                           ;main.c: 795: return address + 8;
 13121                           
 13122                           ; BSR set to: 0
 13123                           ;incstack = 0
 13124  0037DC  0E08               	movlw	8
 13125  0037DE  2401               	addwf	i2next_address@address,w,c
 13126  0037E0  6E01               	movwf	?i2_next_address,c
 13127  0037E2  0E00               	movlw	0
 13128  0037E4  2002               	addwfc	i2next_address@address+1,w,c
 13129  0037E6  6E02               	movwf	?i2_next_address+1,c
 13130  0037E8  0012               	return	
 13131  0037EA                     __end_ofi2_next_address:
 13132                           	opt stack 0
 13133                           pclatu	equ	0xFFB
 13134                           pclath	equ	0xFFA
 13135                           tblptru	equ	0xFF8
 13136                           tblptrh	equ	0xFF7
 13137                           tblptrl	equ	0xFF6
 13138                           tablat	equ	0xFF5
 13139                           prodh	equ	0xFF4
 13140                           prodl	equ	0xFF3
 13141                           intcon	equ	0xFF2
 13142                           intcon2	equ	0xFF1
 13143                           intcon3	equ	0xFF0
 13144                           postinc0	equ	0xFEE
 13145                           fsr0h	equ	0xFEA
 13146                           fsr0l	equ	0xFE9
 13147                           wreg	equ	0xFE8
 13148                           postdec1	equ	0xFE5
 13149                           plusw1	equ	0xFE3
 13150                           fsr1h	equ	0xFE2
 13151                           fsr1l	equ	0xFE1
 13152                           indf2	equ	0xFDF
 13153                           postinc2	equ	0xFDE
 13154                           postdec2	equ	0xFDD
 13155                           plusw2	equ	0xFDB
 13156                           fsr2h	equ	0xFDA
 13157                           fsr2l	equ	0xFD9
 13158                           status	equ	0xFD8
 13159                           
 13160 ;; *************** function i2___awmod *****************
 13161 ;; Defined at:
 13162 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 13163 ;; Parameters:    Size  Location     Type
 13164 ;;  dividend        2    0[COMRAM] int 
 13165 ;;  divisor         2    2[COMRAM] int 
 13166 ;; Auto vars:     Size  Location     Type
 13167 ;;  __awmod         1    5[COMRAM] unsigned char 
 13168 ;;  __awmod         1    4[COMRAM] unsigned char 
 13169 ;; Return value:  Size  Location     Type
 13170 ;;                  2    0[COMRAM] int 
 13171 ;; Registers used:
 13172 ;;		wreg, status,2, status,0
 13173 ;; Tracked objects:
 13174 ;;		On entry : 0/0
 13175 ;;		On exit  : 0/0
 13176 ;;		Unchanged: 0/0
 13177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13178 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13179 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13180 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13181 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13182 ;;Total ram usage:        6 bytes
 13183 ;; Hardware stack levels used:    1
 13184 ;; This function calls:
 13185 ;;		Nothing
 13186 ;; This function is called by:
 13187 ;;		_ISR
 13188 ;;		i2_stopOperation
 13189 ;; This function uses a non-reentrant model
 13190 ;;
 13191                           
 13192                           	psect	text36
 13193  0031FC                     __ptext36:
 13194                           	opt stack 0
 13195  0031FC                     i2___awmod:
 13196                           	opt stack 24
 13197                           
 13198                           ;incstack = 0
 13199  0031FC  0E00               	movlw	0
 13200  0031FE  6E06               	movwf	i2___awmod@sign,c
 13201  003200  AE02               	btfss	i2___awmod@dividend+1,7,c
 13202  003202  D006               	goto	i2l3875
 13203  003204  6C01               	negf	i2___awmod@dividend,c
 13204  003206  1E02               	comf	i2___awmod@dividend+1,f,c
 13205  003208  B0D8               	btfsc	status,0,c
 13206  00320A  2A02               	incf	i2___awmod@dividend+1,f,c
 13207  00320C  0E01               	movlw	1
 13208  00320E  6E06               	movwf	i2___awmod@sign,c
 13209  003210                     i2l3875:
 13210  003210  AE04               	btfss	i2___awmod@divisor+1,7,c
 13211  003212  D004               	goto	i2l3879
 13212  003214  6C03               	negf	i2___awmod@divisor,c
 13213  003216  1E04               	comf	i2___awmod@divisor+1,f,c
 13214  003218  B0D8               	btfsc	status,0,c
 13215  00321A  2A04               	incf	i2___awmod@divisor+1,f,c
 13216  00321C                     i2l3879:
 13217  00321C  5003               	movf	i2___awmod@divisor,w,c
 13218  00321E  1004               	iorwf	i2___awmod@divisor+1,w,c
 13219  003220  B4D8               	btfsc	status,2,c
 13220  003222  D018               	goto	i2l3895
 13221  003224  0E01               	movlw	1
 13222  003226  6E05               	movwf	i2___awmod@counter,c
 13223  003228  D004               	goto	i2l3885
 13224  00322A                     i2l3883:
 13225  00322A  90D8               	bcf	status,0,c
 13226  00322C  3603               	rlcf	i2___awmod@divisor,f,c
 13227  00322E  3604               	rlcf	i2___awmod@divisor+1,f,c
 13228  003230  2A05               	incf	i2___awmod@counter,f,c
 13229  003232                     i2l3885:
 13230  003232  AE04               	btfss	i2___awmod@divisor+1,7,c
 13231  003234  D7FA               	goto	i2l3883
 13232  003236                     i2l3887:
 13233  003236  5003               	movf	i2___awmod@divisor,w,c
 13234  003238  5C01               	subwf	i2___awmod@dividend,w,c
 13235  00323A  5004               	movf	i2___awmod@divisor+1,w,c
 13236  00323C  5802               	subwfb	i2___awmod@dividend+1,w,c
 13237  00323E  A0D8               	btfss	status,0,c
 13238  003240  D004               	goto	i2l3891
 13239  003242  5003               	movf	i2___awmod@divisor,w,c
 13240  003244  5E01               	subwf	i2___awmod@dividend,f,c
 13241  003246  5004               	movf	i2___awmod@divisor+1,w,c
 13242  003248  5A02               	subwfb	i2___awmod@dividend+1,f,c
 13243  00324A                     i2l3891:
 13244  00324A  90D8               	bcf	status,0,c
 13245  00324C  3204               	rrcf	i2___awmod@divisor+1,f,c
 13246  00324E  3203               	rrcf	i2___awmod@divisor,f,c
 13247  003250  2E05               	decfsz	i2___awmod@counter,f,c
 13248  003252  D7F1               	goto	i2l3887
 13249  003254                     i2l3895:
 13250  003254  5006               	movf	i2___awmod@sign,w,c
 13251  003256  B4D8               	btfsc	status,2,c
 13252  003258  D004               	goto	i2l3899
 13253  00325A  6C01               	negf	i2___awmod@dividend,c
 13254  00325C  1E02               	comf	i2___awmod@dividend+1,f,c
 13255  00325E  B0D8               	btfsc	status,0,c
 13256  003260  2A02               	incf	i2___awmod@dividend+1,f,c
 13257  003262                     i2l3899:
 13258  003262  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
 13259  003266  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
 13260  00326A  0012               	return	
 13261  00326C                     __end_ofi2___awmod:
 13262                           	opt stack 0
 13263                           pclatu	equ	0xFFB
 13264                           pclath	equ	0xFFA
 13265                           tblptru	equ	0xFF8
 13266                           tblptrh	equ	0xFF7
 13267                           tblptrl	equ	0xFF6
 13268                           tablat	equ	0xFF5
 13269                           prodh	equ	0xFF4
 13270                           prodl	equ	0xFF3
 13271                           intcon	equ	0xFF2
 13272                           intcon2	equ	0xFF1
 13273                           intcon3	equ	0xFF0
 13274                           postinc0	equ	0xFEE
 13275                           fsr0h	equ	0xFEA
 13276                           fsr0l	equ	0xFE9
 13277                           wreg	equ	0xFE8
 13278                           postdec1	equ	0xFE5
 13279                           plusw1	equ	0xFE3
 13280                           fsr1h	equ	0xFE2
 13281                           fsr1l	equ	0xFE1
 13282                           indf2	equ	0xFDF
 13283                           postinc2	equ	0xFDE
 13284                           postdec2	equ	0xFDD
 13285                           plusw2	equ	0xFDB
 13286                           fsr2h	equ	0xFDA
 13287                           fsr2l	equ	0xFD9
 13288                           status	equ	0xFD8
 13289                           
 13290 ;; *************** function i2___awdiv *****************
 13291 ;; Defined at:
 13292 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
 13293 ;; Parameters:    Size  Location     Type
 13294 ;;  dividend        2    0[COMRAM] int 
 13295 ;;  divisor         2    2[COMRAM] int 
 13296 ;; Auto vars:     Size  Location     Type
 13297 ;;  __awdiv         2    6[COMRAM] int 
 13298 ;;  __awdiv         1    5[COMRAM] unsigned char 
 13299 ;;  __awdiv         1    4[COMRAM] unsigned char 
 13300 ;; Return value:  Size  Location     Type
 13301 ;;                  2    0[COMRAM] int 
 13302 ;; Registers used:
 13303 ;;		wreg, status,2, status,0
 13304 ;; Tracked objects:
 13305 ;;		On entry : 0/0
 13306 ;;		On exit  : 0/0
 13307 ;;		Unchanged: 0/0
 13308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13309 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13310 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13311 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13312 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13313 ;;Total ram usage:        8 bytes
 13314 ;; Hardware stack levels used:    1
 13315 ;; This function calls:
 13316 ;;		Nothing
 13317 ;; This function is called by:
 13318 ;;		_ISR
 13319 ;;		i2_stopOperation
 13320 ;; This function uses a non-reentrant model
 13321 ;;
 13322                           
 13323                           	psect	text37
 13324  003100                     __ptext37:
 13325                           	opt stack 0
 13326  003100                     i2___awdiv:
 13327                           	opt stack 24
 13328                           
 13329                           ;incstack = 0
 13330  003100  0E00               	movlw	0
 13331  003102  6E06               	movwf	i2___awdiv@sign,c
 13332  003104  AE04               	btfss	i2___awdiv@divisor+1,7,c
 13333  003106  D006               	goto	i2l3831
 13334  003108  6C03               	negf	i2___awdiv@divisor,c
 13335  00310A  1E04               	comf	i2___awdiv@divisor+1,f,c
 13336  00310C  B0D8               	btfsc	status,0,c
 13337  00310E  2A04               	incf	i2___awdiv@divisor+1,f,c
 13338  003110  0E01               	movlw	1
 13339  003112  6E06               	movwf	i2___awdiv@sign,c
 13340  003114                     i2l3831:
 13341  003114  AE02               	btfss	i2___awdiv@dividend+1,7,c
 13342  003116  D006               	goto	i2l3837
 13343  003118  6C01               	negf	i2___awdiv@dividend,c
 13344  00311A  1E02               	comf	i2___awdiv@dividend+1,f,c
 13345  00311C  B0D8               	btfsc	status,0,c
 13346  00311E  2A02               	incf	i2___awdiv@dividend+1,f,c
 13347  003120  0E01               	movlw	1
 13348  003122  1A06               	xorwf	i2___awdiv@sign,f,c
 13349  003124                     i2l3837:
 13350  003124  0E00               	movlw	0
 13351  003126  6E08               	movwf	i2___awdiv@quotient+1,c
 13352  003128  0E00               	movlw	0
 13353  00312A  6E07               	movwf	i2___awdiv@quotient,c
 13354  00312C  5003               	movf	i2___awdiv@divisor,w,c
 13355  00312E  1004               	iorwf	i2___awdiv@divisor+1,w,c
 13356  003130  B4D8               	btfsc	status,2,c
 13357  003132  D01C               	goto	i2l3859
 13358  003134  0E01               	movlw	1
 13359  003136  6E05               	movwf	i2___awdiv@counter,c
 13360  003138  D004               	goto	i2l3845
 13361  00313A                     i2l3843:
 13362  00313A  90D8               	bcf	status,0,c
 13363  00313C  3603               	rlcf	i2___awdiv@divisor,f,c
 13364  00313E  3604               	rlcf	i2___awdiv@divisor+1,f,c
 13365  003140  2A05               	incf	i2___awdiv@counter,f,c
 13366  003142                     i2l3845:
 13367  003142  AE04               	btfss	i2___awdiv@divisor+1,7,c
 13368  003144  D7FA               	goto	i2l3843
 13369  003146                     i2l3847:
 13370  003146  90D8               	bcf	status,0,c
 13371  003148  3607               	rlcf	i2___awdiv@quotient,f,c
 13372  00314A  3608               	rlcf	i2___awdiv@quotient+1,f,c
 13373  00314C  5003               	movf	i2___awdiv@divisor,w,c
 13374  00314E  5C01               	subwf	i2___awdiv@dividend,w,c
 13375  003150  5004               	movf	i2___awdiv@divisor+1,w,c
 13376  003152  5802               	subwfb	i2___awdiv@dividend+1,w,c
 13377  003154  A0D8               	btfss	status,0,c
 13378  003156  D005               	goto	i2l3855
 13379  003158  5003               	movf	i2___awdiv@divisor,w,c
 13380  00315A  5E01               	subwf	i2___awdiv@dividend,f,c
 13381  00315C  5004               	movf	i2___awdiv@divisor+1,w,c
 13382  00315E  5A02               	subwfb	i2___awdiv@dividend+1,f,c
 13383  003160  8007               	bsf	i2___awdiv@quotient,0,c
 13384  003162                     i2l3855:
 13385  003162  90D8               	bcf	status,0,c
 13386  003164  3204               	rrcf	i2___awdiv@divisor+1,f,c
 13387  003166  3203               	rrcf	i2___awdiv@divisor,f,c
 13388  003168  2E05               	decfsz	i2___awdiv@counter,f,c
 13389  00316A  D7ED               	goto	i2l3847
 13390  00316C                     i2l3859:
 13391  00316C  5006               	movf	i2___awdiv@sign,w,c
 13392  00316E  B4D8               	btfsc	status,2,c
 13393  003170  D004               	goto	i2l3863
 13394  003172  6C07               	negf	i2___awdiv@quotient,c
 13395  003174  1E08               	comf	i2___awdiv@quotient+1,f,c
 13396  003176  B0D8               	btfsc	status,0,c
 13397  003178  2A08               	incf	i2___awdiv@quotient+1,f,c
 13398  00317A                     i2l3863:
 13399  00317A  C007  F001         	movff	i2___awdiv@quotient,?i2___awdiv
 13400  00317E  C008  F002         	movff	i2___awdiv@quotient+1,?i2___awdiv+1
 13401  003182  0012               	return	
 13402  003184                     __end_ofi2___awdiv:
 13403                           	opt stack 0
 13404                           pclatu	equ	0xFFB
 13405                           pclath	equ	0xFFA
 13406                           tblptru	equ	0xFF8
 13407                           tblptrh	equ	0xFF7
 13408                           tblptrl	equ	0xFF6
 13409                           tablat	equ	0xFF5
 13410                           prodh	equ	0xFF4
 13411                           prodl	equ	0xFF3
 13412                           intcon	equ	0xFF2
 13413                           intcon2	equ	0xFF1
 13414                           intcon3	equ	0xFF0
 13415                           postinc0	equ	0xFEE
 13416                           fsr0h	equ	0xFEA
 13417                           fsr0l	equ	0xFE9
 13418                           wreg	equ	0xFE8
 13419                           postdec1	equ	0xFE5
 13420                           plusw1	equ	0xFE3
 13421                           fsr1h	equ	0xFE2
 13422                           fsr1l	equ	0xFE1
 13423                           indf2	equ	0xFDF
 13424                           postinc2	equ	0xFDE
 13425                           postdec2	equ	0xFDD
 13426                           plusw2	equ	0xFDB
 13427                           fsr2h	equ	0xFDA
 13428                           fsr2l	equ	0xFD9
 13429                           status	equ	0xFD8
 13430                           
 13431 ;; *************** function i2_Eeprom_WriteByte *****************
 13432 ;; Defined at:
 13433 ;;		line 767 in file "../main.c"
 13434 ;; Parameters:    Size  Location     Type
 13435 ;;  address         2    0[COMRAM] unsigned int 
 13436 ;;  data            1    2[COMRAM] unsigned char 
 13437 ;; Auto vars:     Size  Location     Type
 13438 ;;		None
 13439 ;; Return value:  Size  Location     Type
 13440 ;;                  1    wreg      void 
 13441 ;; Registers used:
 13442 ;;		wreg, status,2
 13443 ;; Tracked objects:
 13444 ;;		On entry : 0/0
 13445 ;;		On exit  : 0/0
 13446 ;;		Unchanged: 0/0
 13447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13448 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13449 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13450 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13451 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13452 ;;Total ram usage:        3 bytes
 13453 ;; Hardware stack levels used:    1
 13454 ;; This function calls:
 13455 ;;		Nothing
 13456 ;; This function is called by:
 13457 ;;		i2_stopOperation
 13458 ;; This function uses a non-reentrant model
 13459 ;;
 13460                           
 13461                           	psect	text38
 13462  00364E                     __ptext38:
 13463                           	opt stack 0
 13464  00364E                     i2_Eeprom_WriteByte:
 13465                           	opt stack 24
 13466                           
 13467                           ;main.c: 769: EEADRH = (uint8_t)(address >> 8);
 13468                           
 13469                           ;incstack = 0
 13470  00364E  5002               	movf	i2Eeprom_WriteByte@address+1,w,c
 13471  003650  6EAA               	movwf	4010,c	;volatile
 13472                           
 13473                           ;main.c: 770: EEADR = (uint8_t)address;
 13474  003652  C001  FFA9         	movff	i2Eeprom_WriteByte@address,4009	;volatile
 13475                           
 13476                           ;main.c: 772: EEDATA = data;
 13477  003656  C003  FFA8         	movff	i2Eeprom_WriteByte@data,4008	;volatile
 13478                           
 13479                           ;main.c: 773: EECON1bits.EEPGD = 0;
 13480  00365A  9EA6               	bcf	4006,7,c	;volatile
 13481                           
 13482                           ;main.c: 774: EECON1bits.CFGS = 0;
 13483  00365C  9CA6               	bcf	4006,6,c	;volatile
 13484                           
 13485                           ;main.c: 775: EECON1bits.WREN = 1;
 13486  00365E  84A6               	bsf	4006,2,c	;volatile
 13487                           
 13488                           ;main.c: 779: EECON2 = 0x55;
 13489  003660  0E55               	movlw	85
 13490  003662  6EA7               	movwf	4007,c	;volatile
 13491                           
 13492                           ;main.c: 780: EECON2 = 0xAA;
 13493  003664  0EAA               	movlw	170
 13494  003666  6EA7               	movwf	4007,c	;volatile
 13495                           
 13496                           ;main.c: 781: EECON1bits.WR = 1;
 13497  003668  82A6               	bsf	4006,1,c	;volatile
 13498  00366A                     i2l520:
 13499  00366A  A8A1               	btfss	4001,4,c	;volatile
 13500  00366C  D7FE               	goto	i2l520
 13501                           
 13502                           ;main.c: 787: }
 13503                           ;main.c: 789: PIR2bits.EEIF = 0;
 13504  00366E  98A1               	bcf	4001,4,c	;volatile
 13505                           
 13506                           ;main.c: 790: EECON1bits.WREN = 0;
 13507  003670  94A6               	bcf	4006,2,c	;volatile
 13508  003672  0012               	return		;funcret
 13509  003674                     __end_ofi2_Eeprom_WriteByte:
 13510                           	opt stack 0
 13511                           pclatu	equ	0xFFB
 13512                           pclath	equ	0xFFA
 13513                           tblptru	equ	0xFF8
 13514                           tblptrh	equ	0xFF7
 13515                           tblptrl	equ	0xFF6
 13516                           tablat	equ	0xFF5
 13517                           prodh	equ	0xFF4
 13518                           prodl	equ	0xFF3
 13519                           intcon	equ	0xFF2
 13520                           intcon2	equ	0xFF1
 13521                           intcon3	equ	0xFF0
 13522                           postinc0	equ	0xFEE
 13523                           fsr0h	equ	0xFEA
 13524                           fsr0l	equ	0xFE9
 13525                           wreg	equ	0xFE8
 13526                           postdec1	equ	0xFE5
 13527                           plusw1	equ	0xFE3
 13528                           fsr1h	equ	0xFE2
 13529                           fsr1l	equ	0xFE1
 13530                           indf2	equ	0xFDF
 13531                           postinc2	equ	0xFDE
 13532                           postdec2	equ	0xFDD
 13533                           plusw2	equ	0xFDB
 13534                           fsr2h	equ	0xFDA
 13535                           fsr2l	equ	0xFD9
 13536                           status	equ	0xFD8
 13537                           
 13538 ;; *************** function i2_Eeprom_ReadByte *****************
 13539 ;; Defined at:
 13540 ;;		line 750 in file "../main.c"
 13541 ;; Parameters:    Size  Location     Type
 13542 ;;  address         2    0[COMRAM] unsigned int 
 13543 ;; Auto vars:     Size  Location     Type
 13544 ;;		None
 13545 ;; Return value:  Size  Location     Type
 13546 ;;                  1    wreg      unsigned char 
 13547 ;; Registers used:
 13548 ;;		wreg, status,2
 13549 ;; Tracked objects:
 13550 ;;		On entry : 0/0
 13551 ;;		On exit  : 0/0
 13552 ;;		Unchanged: 0/0
 13553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13554 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13555 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13556 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13557 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13558 ;;Total ram usage:        2 bytes
 13559 ;; Hardware stack levels used:    1
 13560 ;; This function calls:
 13561 ;;		Nothing
 13562 ;; This function is called by:
 13563 ;;		i2_stopOperation
 13564 ;; This function uses a non-reentrant model
 13565 ;;
 13566                           
 13567                           	psect	text39
 13568  00375E                     __ptext39:
 13569                           	opt stack 0
 13570  00375E                     i2_Eeprom_ReadByte:
 13571                           	opt stack 24
 13572                           
 13573                           ;main.c: 752: EEADRH = (uint8_t)(address >> 8);
 13574                           
 13575                           ;incstack = 0
 13576  00375E  5002               	movf	i2Eeprom_ReadByte@address+1,w,c
 13577  003760  6EAA               	movwf	4010,c	;volatile
 13578                           
 13579                           ;main.c: 753: EEADR = (uint8_t)address;
 13580  003762  C001  FFA9         	movff	i2Eeprom_ReadByte@address,4009	;volatile
 13581                           
 13582                           ;main.c: 755: EECON1bits.EEPGD = 0;
 13583  003766  9EA6               	bcf	4006,7,c	;volatile
 13584                           
 13585                           ;main.c: 756: EECON1bits.CFGS = 0;
 13586  003768  9CA6               	bcf	4006,6,c	;volatile
 13587                           
 13588                           ;main.c: 757: EECON1bits.RD = 1;
 13589  00376A  80A6               	bsf	4006,0,c	;volatile
 13590  00376C                     i2l514:
 13591  00376C  B0A6               	btfsc	4006,0,c	;volatile
 13592  00376E  D7FE               	goto	i2l514
 13593                           
 13594                           ;main.c: 763: return EEDATA;
 13595  003770  50A8               	movf	4008,w,c	;volatile
 13596  003772  0012               	return	
 13597  003774                     __end_ofi2_Eeprom_ReadByte:
 13598                           	opt stack 0
 13599                           pclatu	equ	0xFFB
 13600                           pclath	equ	0xFFA
 13601                           tblptru	equ	0xFF8
 13602                           tblptrh	equ	0xFF7
 13603                           tblptrl	equ	0xFF6
 13604                           tablat	equ	0xFF5
 13605                           prodh	equ	0xFF4
 13606                           prodl	equ	0xFF3
 13607                           intcon	equ	0xFF2
 13608                           intcon2	equ	0xFF1
 13609                           intcon3	equ	0xFF0
 13610                           postinc0	equ	0xFEE
 13611                           fsr0h	equ	0xFEA
 13612                           fsr0l	equ	0xFE9
 13613                           wreg	equ	0xFE8
 13614                           postdec1	equ	0xFE5
 13615                           plusw1	equ	0xFE3
 13616                           fsr1h	equ	0xFE2
 13617                           fsr1l	equ	0xFE1
 13618                           indf2	equ	0xFDF
 13619                           postinc2	equ	0xFDE
 13620                           postdec2	equ	0xFDD
 13621                           plusw2	equ	0xFDB
 13622                           fsr2h	equ	0xFDA
 13623                           fsr2l	equ	0xFD9
 13624                           status	equ	0xFD8
 13625                           
 13626 ;; *************** function i2_printf *****************
 13627 ;; Defined at:
 13628 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 13629 ;; Parameters:    Size  Location     Type
 13630 ;;  f               2   12[COMRAM] PTR const unsigned char 
 13631 ;;		 -> STR_39(22), STR_38(20), STR_37(23), STR_36(23), 
 13632 ;;		 -> STR_35(23), STR_34(17), STR_33(23), STR_32(23), 
 13633 ;;		 -> STR_31(17), STR_30(17), STR_29(17), STR_28(17), 
 13634 ;;		 -> STR_27(17), STR_26(17), STR_25(17), STR_24(17), 
 13635 ;;		 -> STR_23(17), STR_22(17), STR_21(23), STR_20(23), 
 13636 ;;		 -> STR_19(17), STR_18(21), STR_17(17), STR_16(21), 
 13637 ;;		 -> STR_15(17), STR_14(21), STR_13(17), STR_12(19), 
 13638 ;;		 -> STR_11(17), STR_10(19), STR_9(17), STR_8(25), 
 13639 ;;		 -> STR_7(17), STR_6(17), STR_5(17), STR_4(17), 
 13640 ;;		 -> STR_3(17), STR_2(17), STR_1(17), 
 13641 ;; Auto vars:     Size  Location     Type
 13642 ;;  printf          4    0        struct .
 13643 ;;  printf          3    0        PTR const unsigned char 
 13644 ;;  printf          2   29[COMRAM] int 
 13645 ;;  printf          2   26[COMRAM] unsigned int 
 13646 ;;  printf          2   23[COMRAM] PTR void [1]
 13647 ;;		 -> ?i2_printf(2), ?_printf(2), 
 13648 ;;  printf          2    0        unsigned int 
 13649 ;;  printf          1   31[COMRAM] char 
 13650 ;;  printf          1   28[COMRAM] unsigned char 
 13651 ;;  printf          1   25[COMRAM] char 
 13652 ;;  printf          1   22[COMRAM] unsigned char 
 13653 ;; Return value:  Size  Location     Type
 13654 ;;                  2   12[COMRAM] int 
 13655 ;; Registers used:
 13656 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13657 ;; Tracked objects:
 13658 ;;		On entry : 0/0
 13659 ;;		On exit  : 0/0
 13660 ;;		Unchanged: 0/0
 13661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13662 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13663 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13664 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13665 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13666 ;;Total ram usage:       20 bytes
 13667 ;; Hardware stack levels used:    1
 13668 ;; Hardware stack levels required when called:    2
 13669 ;; This function calls:
 13670 ;;		i2___lwdiv
 13671 ;;		i2___lwmod
 13672 ;;		i2___wmul
 13673 ;;		i2_isdigit
 13674 ;;		i2_putch
 13675 ;; This function is called by:
 13676 ;;		_keypressed
 13677 ;;		_ISR
 13678 ;; This function uses a non-reentrant model
 13679 ;;
 13680                           
 13681                           	psect	text40
 13682  0022BC                     __ptext40:
 13683                           	opt stack 0
 13684  0022BC                     i2_printf:
 13685                           	opt stack 23
 13686                           
 13687                           ;doprnt.c: 466: va_list ap;
 13688                           ;doprnt.c: 499: signed char c;
 13689                           ;doprnt.c: 501: int width;
 13690                           ;doprnt.c: 506: signed char prec;
 13691                           ;doprnt.c: 508: unsigned char flag;
 13692                           ;doprnt.c: 523: union {
 13693                           ;doprnt.c: 524: unsigned long vd;
 13694                           ;doprnt.c: 525: double integ;
 13695                           ;doprnt.c: 526: } tmpval;
 13696                           ;doprnt.c: 528: unsigned int val;
 13697                           ;doprnt.c: 529: unsigned len;
 13698                           ;doprnt.c: 530: const char * cp;
 13699                           ;doprnt.c: 533: *ap = __va_start();
 13700                           
 13701                           ;incstack = 0
 13702  0022BC  0E0F               	movlw	low (?i2_printf+2)
 13703  0022BE  6E18               	movwf	i2printf@ap,c
 13704  0022C0  0E00               	movlw	high (?i2_printf+2)
 13705  0022C2  6E19               	movwf	i2printf@ap+1,c
 13706                           
 13707                           ;doprnt.c: 536: while(c = *f++) {
 13708  0022C4  D174               	goto	i2l4563
 13709  0022C6                     i2l4437:
 13710                           
 13711                           ;doprnt.c: 538: if(c != '%')
 13712  0022C6  0E25               	movlw	37
 13713  0022C8  1820               	xorwf	i2printf@c,w,c
 13714  0022CA  B4D8               	btfsc	status,2,c
 13715  0022CC  D004               	goto	i2l4441
 13716                           
 13717                           ;doprnt.c: 540: {
 13718                           ;doprnt.c: 541: (putch(c) );
 13719  0022CE  5020               	movf	i2printf@c,w,c
 13720  0022D0  ECF5  F01B         	call	i2_putch
 13721                           
 13722                           ;doprnt.c: 542: continue;
 13723  0022D4  D16C               	goto	i2l4563
 13724  0022D6                     i2l4441:
 13725                           
 13726                           ;doprnt.c: 543: }
 13727                           ;doprnt.c: 546: width = 0;
 13728  0022D6  0E00               	movlw	0
 13729  0022D8  6E1F               	movwf	i2printf@width+1,c
 13730  0022DA  0E00               	movlw	0
 13731  0022DC  6E1E               	movwf	i2printf@width,c
 13732                           
 13733                           ;doprnt.c: 548: flag = 0;
 13734  0022DE  0E00               	movlw	0
 13735  0022E0  6E1D               	movwf	i2printf@flag,c
 13736                           
 13737                           ;doprnt.c: 551: switch(*f) {
 13738                           
 13739                           ;doprnt.c: 550: for(;;) {
 13740  0022E2  D003               	goto	i2l4447
 13741  0022E4                     i2l4443:
 13742                           
 13743                           ;doprnt.c: 580: flag |= 0x04;
 13744  0022E4  841D               	bsf	i2printf@flag,2,c
 13745                           
 13746                           ;doprnt.c: 581: f++;
 13747  0022E6  4A0D               	infsnz	i2printf@f,f,c
 13748  0022E8  2A0E               	incf	i2printf@f+1,f,c
 13749  0022EA                     i2l4447:
 13750  0022EA  C00D  FFF6         	movff	i2printf@f,tblptrl
 13751  0022EE  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 13752  0022F2                     	if	0	;tblptru may be non-zero
 13753  0022F2                     	endif
 13754  0022F2                     	if	0	;tblptru may be non-zero
 13755  0022F2                     	endif
 13756  0022F2  0008               	tblrd		*
 13757  0022F4  50F5               	movf	tablat,w,c
 13758                           
 13759                           ; Switch size 1, requested type "space"
 13760                           ; Number of cases is 1, Range of values is 48 to 48
 13761                           ; switch strategies available:
 13762                           ; Name         Instructions Cycles
 13763                           ; simple_byte            4     3 (average)
 13764                           ;	Chosen strategy is simple_byte
 13765  0022F6  0A30               	xorlw	48	; case 48
 13766  0022F8  B4D8               	btfsc	status,2,c
 13767  0022FA  D7F4               	goto	i2l4443
 13768                           
 13769                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 13770                           
 13771                           ;doprnt.c: 586: }
 13772                           
 13773                           ;doprnt.c: 585: break;
 13774  0022FC  C00D  FFF6         	movff	i2printf@f,tblptrl
 13775  002300  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 13776  002304                     	if	0	;tblptru may be non-zero
 13777  002304                     	endif
 13778  002304                     	if	0	;tblptru may be non-zero
 13779  002304                     	endif
 13780  002304  0008               	tblrd		*
 13781  002306  50F5               	movf	tablat,w,c
 13782  002308  EC70  F01B         	call	i2_isdigit
 13783  00230C  A0D8               	btfss	status,0,c
 13784  00230E  D035               	goto	i2l4465
 13785                           
 13786                           ;doprnt.c: 598: width = 0;
 13787  002310  0E00               	movlw	0
 13788  002312  6E1F               	movwf	i2printf@width+1,c
 13789  002314  0E00               	movlw	0
 13790  002316  6E1E               	movwf	i2printf@width,c
 13791  002318                     i2l4453:
 13792                           
 13793                           ;doprnt.c: 600: width *= 10;
 13794  002318  C01E  F001         	movff	i2printf@width,i2___wmul@multiplier
 13795  00231C  C01F  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 13796  002320  0E00               	movlw	0
 13797  002322  6E04               	movwf	i2___wmul@multiplicand+1,c
 13798  002324  0E0A               	movlw	10
 13799  002326  6E03               	movwf	i2___wmul@multiplicand,c
 13800  002328  EC3A  F01B         	call	i2___wmul	;wreg free
 13801  00232C  C001  F01E         	movff	?i2___wmul,i2printf@width
 13802  002330  C002  F01F         	movff	?i2___wmul+1,i2printf@width+1
 13803                           
 13804                           ;doprnt.c: 601: width += *f++ - '0';
 13805  002334  0ED0               	movlw	208
 13806  002336  6E13               	movwf	??i2_printf& (0+255),c
 13807  002338  0EFF               	movlw	255
 13808  00233A  6E14               	movwf	(??i2_printf+1)& (0+255),c
 13809  00233C  C00D  FFF6         	movff	i2printf@f,tblptrl
 13810  002340  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 13811  002344                     	if	0	;tblptru may be non-zero
 13812  002344                     	endif
 13813  002344                     	if	0	;tblptru may be non-zero
 13814  002344                     	endif
 13815  002344  0008               	tblrd		*
 13816  002346  50F5               	movf	tablat,w,c
 13817  002348  6E15               	movwf	(??i2_printf+2)& (0+255),c
 13818  00234A  6A16               	clrf	(??i2_printf+3)& (0+255),c
 13819  00234C  5013               	movf	??i2_printf,w,c
 13820  00234E  2615               	addwf	??i2_printf+2,f,c
 13821  002350  5014               	movf	??i2_printf+1,w,c
 13822  002352  2216               	addwfc	??i2_printf+3,f,c
 13823  002354  5015               	movf	??i2_printf+2,w,c
 13824  002356  261E               	addwf	i2printf@width,f,c
 13825  002358  5016               	movf	??i2_printf+3,w,c
 13826  00235A  221F               	addwfc	i2printf@width+1,f,c
 13827  00235C  4A0D               	infsnz	i2printf@f,f,c
 13828  00235E  2A0E               	incf	i2printf@f+1,f,c
 13829                           
 13830                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 13831  002360  C00D  FFF6         	movff	i2printf@f,tblptrl
 13832  002364  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 13833  002368                     	if	0	;tblptru may be non-zero
 13834  002368                     	endif
 13835  002368                     	if	0	;tblptru may be non-zero
 13836  002368                     	endif
 13837  002368  0008               	tblrd		*
 13838  00236A  50F5               	movf	tablat,w,c
 13839  00236C  EC70  F01B         	call	i2_isdigit
 13840  002370  A0D8               	btfss	status,0,c
 13841  002372  D003               	goto	i2l4465
 13842  002374  D7D1               	goto	i2l4453
 13843  002376                     i2l4461:
 13844                           
 13845                           ;doprnt.c: 721: flag |= 0x80;
 13846  002376  8E1D               	bsf	i2printf@flag,7,c
 13847                           
 13848                           ;doprnt.c: 723: break;
 13849  002378  D017               	goto	i2l675
 13850  00237A                     i2l4465:
 13851  00237A  C00D  FFF6         	movff	i2printf@f,tblptrl
 13852  00237E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 13853  002382  4A0D               	infsnz	i2printf@f,f,c
 13854  002384  2A0E               	incf	i2printf@f+1,f,c
 13855  002386                     	if	0	;tblptru may be non-zero
 13856  002386                     	endif
 13857  002386                     	if	0	;tblptru may be non-zero
 13858  002386                     	endif
 13859  002386  0008               	tblrd		*
 13860  002388  CFF5 F020          	movff	tablat,i2printf@c
 13861  00238C  5020               	movf	i2printf@c,w,c
 13862                           
 13863                           ; Switch size 1, requested type "space"
 13864                           ; Number of cases is 4, Range of values is 0 to 120
 13865                           ; switch strategies available:
 13866                           ; Name         Instructions Cycles
 13867                           ; simple_byte           13     7 (average)
 13868                           ;	Chosen strategy is simple_byte
 13869  00238E  0A00               	xorlw	0	; case 0
 13870  002390  B4D8               	btfsc	status,2,c
 13871  002392  0012               	return	
 13872  002394  0A64               	xorlw	100	; case 100
 13873  002396  B4D8               	btfsc	status,2,c
 13874  002398  D007               	goto	i2l675
 13875  00239A  0A0D               	xorlw	13	; case 105
 13876  00239C  B4D8               	btfsc	status,2,c
 13877  00239E  D004               	goto	i2l675
 13878  0023A0  0A11               	xorlw	17	; case 120
 13879  0023A2  B4D8               	btfsc	status,2,c
 13880  0023A4  D7E8               	goto	i2l4461
 13881  0023A6  D103               	goto	i2l4563
 13882  0023A8                     i2l675:
 13883                           
 13884                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
 13885  0023A8  BE1D               	btfsc	i2printf@flag,7,c
 13886  0023AA  D015               	goto	i2l4477
 13887                           
 13888                           ;doprnt.c: 1253: {
 13889                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 13890  0023AC  C018  FFD9         	movff	i2printf@ap,fsr2l
 13891  0023B0  C019  FFDA         	movff	i2printf@ap+1,fsr2h
 13892  0023B4  CFDE F01B          	movff	postinc2,i2printf@val
 13893  0023B8  CFDD F01C          	movff	postdec2,i2printf@val+1
 13894  0023BC  0E02               	movlw	2
 13895  0023BE  2618               	addwf	i2printf@ap,f,c
 13896  0023C0  0E00               	movlw	0
 13897  0023C2  2219               	addwfc	i2printf@ap+1,f,c
 13898                           
 13899                           ;doprnt.c: 1261: if((int)val < 0) {
 13900  0023C4  AE1C               	btfss	i2printf@val+1,7,c
 13901  0023C6  D044               	goto	i2l4511
 13902                           
 13903                           ;doprnt.c: 1262: flag |= 0x03;
 13904  0023C8  0E03               	movlw	3
 13905  0023CA  121D               	iorwf	i2printf@flag,f,c
 13906                           
 13907                           ;doprnt.c: 1263: val = -val;
 13908  0023CC  6C1B               	negf	i2printf@val,c
 13909  0023CE  1E1C               	comf	i2printf@val+1,f,c
 13910  0023D0  B0D8               	btfsc	status,0,c
 13911  0023D2  2A1C               	incf	i2printf@val+1,f,c
 13912                           
 13913                           ;doprnt.c: 1264: }
 13914                           ;doprnt.c: 1266: }
 13915  0023D4  D03D               	goto	i2l4511
 13916  0023D6                     i2l4477:
 13917                           
 13918                           ;doprnt.c: 1268: else
 13919                           ;doprnt.c: 1273: {
 13920                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 13921  0023D6  C018  FFD9         	movff	i2printf@ap,fsr2l
 13922  0023DA  C019  FFDA         	movff	i2printf@ap+1,fsr2h
 13923  0023DE  CFDE F01B          	movff	postinc2,i2printf@val
 13924  0023E2  CFDD F01C          	movff	postdec2,i2printf@val+1
 13925  0023E6  0E02               	movlw	2
 13926  0023E8  2618               	addwf	i2printf@ap,f,c
 13927  0023EA  0E00               	movlw	0
 13928  0023EC  2219               	addwfc	i2printf@ap+1,f,c
 13929                           
 13930                           ;doprnt.c: 1287: }
 13931                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
 13932  0023EE  D030               	goto	i2l4511
 13933  0023F0                     i2l4481:
 13934                           
 13935                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 13936  0023F0  0E01               	movlw	1
 13937  0023F2  6E20               	movwf	i2printf@c,c
 13938  0023F4                     i2l4483:
 13939  0023F4  0E05               	movlw	5
 13940  0023F6  1820               	xorwf	i2printf@c,w,c
 13941  0023F8  B4D8               	btfsc	status,2,c
 13942  0023FA  D032               	goto	i2l4513
 13943                           
 13944                           ;doprnt.c: 1306: if(val < dpowers[c])
 13945  0023FC  5020               	movf	i2printf@c,w,c
 13946  0023FE  0D02               	mullw	2
 13947  002400  0E98               	movlw	low _dpowers
 13948  002402  24F3               	addwf	prodl,w,c
 13949  002404  6EF6               	movwf	tblptrl,c
 13950  002406  0EFD               	movlw	high _dpowers
 13951  002408  20F4               	addwfc	prodh,w,c
 13952  00240A  6EF7               	movwf	tblptrh,c
 13953  00240C                     	if	0	;There are less than 3 active tblptr bytes
 13954  00240C                     	endif
 13955  00240C  0009               	tblrd		*+
 13956  00240E  50F5               	movf	tablat,w,c
 13957  002410  5C1B               	subwf	i2printf@val,w,c
 13958  002412  0009               	tblrd		*+
 13959  002414  50F5               	movf	tablat,w,c
 13960  002416  581C               	subwfb	i2printf@val+1,w,c
 13961  002418  A0D8               	btfss	status,0,c
 13962  00241A  D022               	goto	i2l4513
 13963                           
 13964                           ;doprnt.c: 1307: break;
 13965  00241C  2A20               	incf	i2printf@c,f,c
 13966  00241E  D7EA               	goto	i2l4483
 13967  002420                     i2l4495:
 13968                           
 13969                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 13970  002420  0E01               	movlw	1
 13971  002422  6E20               	movwf	i2printf@c,c
 13972  002424                     i2l4497:
 13973  002424  0E04               	movlw	4
 13974  002426  1820               	xorwf	i2printf@c,w,c
 13975  002428  B4D8               	btfsc	status,2,c
 13976  00242A  D01A               	goto	i2l4513
 13977                           
 13978                           ;doprnt.c: 1317: if(val < hexpowers[c])
 13979  00242C  5020               	movf	i2printf@c,w,c
 13980  00242E  0D02               	mullw	2
 13981  002430  0EA2               	movlw	low _hexpowers
 13982  002432  24F3               	addwf	prodl,w,c
 13983  002434  6EF6               	movwf	tblptrl,c
 13984  002436  0EFD               	movlw	high _hexpowers
 13985  002438  20F4               	addwfc	prodh,w,c
 13986  00243A  6EF7               	movwf	tblptrh,c
 13987  00243C                     	if	0	;There are less than 3 active tblptr bytes
 13988  00243C                     	endif
 13989  00243C  0009               	tblrd		*+
 13990  00243E  50F5               	movf	tablat,w,c
 13991  002440  5C1B               	subwf	i2printf@val,w,c
 13992  002442  0009               	tblrd		*+
 13993  002444  50F5               	movf	tablat,w,c
 13994  002446  581C               	subwfb	i2printf@val+1,w,c
 13995  002448  A0D8               	btfss	status,0,c
 13996  00244A  D00A               	goto	i2l4513
 13997                           
 13998                           ;doprnt.c: 1318: break;
 13999  00244C  2A20               	incf	i2printf@c,f,c
 14000  00244E  D7EA               	goto	i2l4497
 14001  002450                     i2l4511:
 14002  002450  501D               	movf	i2printf@flag,w,c
 14003  002452  0B80               	andlw	128
 14004                           
 14005                           ; Switch size 1, requested type "space"
 14006                           ; Number of cases is 2, Range of values is 0 to 128
 14007                           ; switch strategies available:
 14008                           ; Name         Instructions Cycles
 14009                           ; simple_byte            7     4 (average)
 14010                           ;	Chosen strategy is simple_byte
 14011  002454  0A00               	xorlw	0	; case 0
 14012  002456  B4D8               	btfsc	status,2,c
 14013  002458  D7CB               	goto	i2l4481
 14014  00245A  0A80               	xorlw	128	; case 128
 14015  00245C  B4D8               	btfsc	status,2,c
 14016  00245E  D7E0               	goto	i2l4495
 14017  002460                     i2l4513:
 14018                           
 14019                           ;doprnt.c: 1345: if(width && flag & 0x03)
 14020  002460  501E               	movf	i2printf@width,w,c
 14021  002462  101F               	iorwf	i2printf@width+1,w,c
 14022  002464  B4D8               	btfsc	status,2,c
 14023  002466  D009               	goto	i2l4519
 14024  002468  C01D  F013         	movff	i2printf@flag,??i2_printf
 14025  00246C  0E03               	movlw	3
 14026  00246E  1613               	andwf	??i2_printf,f,c
 14027  002470  B4D8               	btfsc	status,2,c
 14028  002472  D003               	goto	i2l4519
 14029                           
 14030                           ;doprnt.c: 1346: width--;
 14031  002474  061E               	decf	i2printf@width,f,c
 14032  002476  A0D8               	btfss	status,0,c
 14033  002478  061F               	decf	i2printf@width+1,f,c
 14034  00247A                     i2l4519:
 14035                           
 14036                           ;doprnt.c: 1381: if(width > c)
 14037  00247A  0E80               	movlw	128
 14038  00247C  BE20               	btfsc	i2printf@c,7,c
 14039  00247E  0E7F               	movlw	127
 14040  002480  6E13               	movwf	??i2_printf& (0+255),c
 14041  002482  501E               	movf	i2printf@width,w,c
 14042  002484  5C20               	subwf	i2printf@c,w,c
 14043  002486  501F               	movf	i2printf@width+1,w,c
 14044  002488  0A80               	xorlw	128
 14045  00248A  5813               	subwfb	??i2_printf& (0+255),w,c
 14046  00248C  B0D8               	btfsc	status,0,c
 14047  00248E  D007               	goto	i2l4523
 14048                           
 14049                           ;doprnt.c: 1382: width -= c;
 14050  002490  5020               	movf	i2printf@c,w,c
 14051  002492  5E1E               	subwf	i2printf@width,f,c
 14052  002494  0E00               	movlw	0
 14053  002496  BE20               	btfsc	i2printf@c,7,c
 14054  002498  0EFF               	movlw	255
 14055  00249A  5A1F               	subwfb	i2printf@width+1,f,c
 14056  00249C  D004               	goto	i2l4525
 14057  00249E                     i2l4523:
 14058                           
 14059                           ;doprnt.c: 1383: else
 14060                           ;doprnt.c: 1384: width = 0;
 14061  00249E  0E00               	movlw	0
 14062  0024A0  6E1F               	movwf	i2printf@width+1,c
 14063  0024A2  0E00               	movlw	0
 14064  0024A4  6E1E               	movwf	i2printf@width,c
 14065  0024A6                     i2l4525:
 14066                           
 14067                           ;doprnt.c: 1387: if(flag & 0x04) {
 14068  0024A6  A41D               	btfss	i2printf@flag,2,c
 14069  0024A8  D014               	goto	i2l4537
 14070                           
 14071                           ;doprnt.c: 1392: if(flag & 0x03)
 14072  0024AA  C01D  F013         	movff	i2printf@flag,??i2_printf
 14073  0024AE  0E03               	movlw	3
 14074  0024B0  1613               	andwf	??i2_printf,f,c
 14075  0024B2  B4D8               	btfsc	status,2,c
 14076  0024B4  D003               	goto	i2l4531
 14077                           
 14078                           ;doprnt.c: 1393: (putch('-') );
 14079  0024B6  0E2D               	movlw	45
 14080  0024B8  ECF5  F01B         	call	i2_putch
 14081  0024BC                     i2l4531:
 14082                           
 14083                           ;doprnt.c: 1415: if(width)
 14084  0024BC  501E               	movf	i2printf@width,w,c
 14085  0024BE  101F               	iorwf	i2printf@width+1,w,c
 14086  0024C0  B4D8               	btfsc	status,2,c
 14087  0024C2  D01E               	goto	i2l4547
 14088                           
 14089                           ;doprnt.c: 1417: (putch('0') );
 14090                           
 14091                           ;doprnt.c: 1416: do
 14092  0024C4  0E30               	movlw	48
 14093  0024C6  ECF5  F01B         	call	i2_putch
 14094                           
 14095                           ;doprnt.c: 1418: while(--width);
 14096  0024CA  061E               	decf	i2printf@width,f,c
 14097  0024CC  A0D8               	btfss	status,0,c
 14098  0024CE  061F               	decf	i2printf@width+1,f,c
 14099  0024D0  D7F5               	goto	i2l4531
 14100  0024D2                     i2l4537:
 14101                           
 14102                           ;doprnt.c: 1422: {
 14103                           ;doprnt.c: 1424: if(width
 14104                           ;doprnt.c: 1428: )
 14105  0024D2  501E               	movf	i2printf@width,w,c
 14106  0024D4  101F               	iorwf	i2printf@width+1,w,c
 14107  0024D6  B4D8               	btfsc	status,2,c
 14108  0024D8  D00A               	goto	i2l4543
 14109  0024DA                     i2l4539:
 14110                           
 14111                           ;doprnt.c: 1430: (putch(' ') );
 14112  0024DA  0E20               	movlw	32
 14113  0024DC  ECF5  F01B         	call	i2_putch
 14114                           
 14115                           ;doprnt.c: 1431: while(--width);
 14116  0024E0  061E               	decf	i2printf@width,f,c
 14117  0024E2  A0D8               	btfss	status,0,c
 14118  0024E4  061F               	decf	i2printf@width+1,f,c
 14119  0024E6  501E               	movf	i2printf@width,w,c
 14120  0024E8  101F               	iorwf	i2printf@width+1,w,c
 14121  0024EA  A4D8               	btfss	status,2,c
 14122  0024EC  D7F6               	goto	i2l4539
 14123  0024EE                     i2l4543:
 14124                           
 14125                           ;doprnt.c: 1438: if(flag & 0x03)
 14126  0024EE  C01D  F013         	movff	i2printf@flag,??i2_printf
 14127  0024F2  0E03               	movlw	3
 14128  0024F4  1613               	andwf	??i2_printf,f,c
 14129  0024F6  B4D8               	btfsc	status,2,c
 14130  0024F8  D003               	goto	i2l4547
 14131                           
 14132                           ;doprnt.c: 1439: (putch('-') );
 14133  0024FA  0E2D               	movlw	45
 14134  0024FC  ECF5  F01B         	call	i2_putch
 14135  002500                     i2l4547:
 14136                           
 14137                           ;doprnt.c: 1469: }
 14138                           ;doprnt.c: 1472: prec = c;
 14139  002500  C020  F01A         	movff	i2printf@c,i2printf@prec
 14140                           
 14141                           ;doprnt.c: 1474: while(prec--) {
 14142  002504  D050               	goto	i2l4561
 14143  002506                     i2l4549:
 14144                           
 14145                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 14146  002506  501A               	movf	i2printf@prec,w,c
 14147  002508  0D02               	mullw	2
 14148  00250A  0E98               	movlw	low _dpowers
 14149  00250C  24F3               	addwf	prodl,w,c
 14150  00250E  6EF6               	movwf	tblptrl,c
 14151  002510  0EFD               	movlw	high _dpowers
 14152  002512  20F4               	addwfc	prodh,w,c
 14153  002514  6EF7               	movwf	tblptrh,c
 14154  002516                     	if	0	;There are less than 3 active tblptr bytes
 14155  002516                     	endif
 14156  002516  0009               	tblrd		*+
 14157  002518  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
 14158  00251C  000A               	tblrd		*-
 14159  00251E  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 14160  002522  C01B  F001         	movff	i2printf@val,i2___lwdiv@dividend
 14161  002526  C01C  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 14162  00252A  ECFA  F019         	call	i2___lwdiv	;wreg free
 14163  00252E  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
 14164  002532  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 14165  002536  0E00               	movlw	0
 14166  002538  6E0B               	movwf	i2___lwmod@divisor+1,c
 14167  00253A  0E0A               	movlw	10
 14168  00253C  6E0A               	movwf	i2___lwmod@divisor,c
 14169  00253E  EC6F  F01A         	call	i2___lwmod	;wreg free
 14170  002542  5008               	movf	?i2___lwmod,w,c
 14171  002544  0F30               	addlw	48
 14172  002546  6E20               	movwf	i2printf@c,c
 14173                           
 14174                           ;doprnt.c: 1491: break;
 14175  002548  D02B               	goto	i2l4559
 14176  00254A                     i2l4551:
 14177                           
 14178                           ;doprnt.c: 1499: {
 14179                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 14180  00254A  C01B  F001         	movff	i2printf@val,i2___lwdiv@dividend
 14181  00254E  C01C  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 14182  002552  501A               	movf	i2printf@prec,w,c
 14183  002554  0D02               	mullw	2
 14184  002556  0EA2               	movlw	low _hexpowers
 14185  002558  24F3               	addwf	prodl,w,c
 14186  00255A  6EF6               	movwf	tblptrl,c
 14187  00255C  0EFD               	movlw	high _hexpowers
 14188  00255E  20F4               	addwfc	prodh,w,c
 14189  002560  6EF7               	movwf	tblptrh,c
 14190  002562                     	if	0	;There are less than 3 active tblptr bytes
 14191  002562                     	endif
 14192  002562  0009               	tblrd		*+
 14193  002564  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
 14194  002568  000A               	tblrd		*-
 14195  00256A  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 14196  00256E  ECFA  F019         	call	i2___lwdiv	;wreg free
 14197  002572  5001               	movf	?i2___lwdiv,w,c
 14198  002574  0B0F               	andlw	15
 14199  002576  6E17               	movwf	i2printf@idx,c
 14200                           
 14201                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 14202  002578  5017               	movf	i2printf@idx,w,c
 14203  00257A  0D01               	mullw	1
 14204  00257C  0E88               	movlw	low STR_40
 14205  00257E  24F3               	addwf	prodl,w,c
 14206  002580  6EF6               	movwf	tblptrl,c
 14207  002582  0EFE               	movlw	high STR_40
 14208  002584  20F4               	addwfc	prodh,w,c
 14209  002586  6EF7               	movwf	tblptrh,c
 14210  002588                     	if	0	;There are less than 3 active tblptr bytes
 14211  002588                     	endif
 14212  002588  0008               	tblrd		*
 14213  00258A  CFF5 F020          	movff	tablat,i2printf@c
 14214                           
 14215                           ;doprnt.c: 1523: }
 14216                           
 14217                           ;doprnt.c: 1508: }
 14218                           ;doprnt.c: 1510: break;
 14219  00258E  D008               	goto	i2l4559
 14220  002590                     i2l4557:
 14221  002590  501D               	movf	i2printf@flag,w,c
 14222  002592  0B80               	andlw	128
 14223                           
 14224                           ; Switch size 1, requested type "space"
 14225                           ; Number of cases is 2, Range of values is 0 to 128
 14226                           ; switch strategies available:
 14227                           ; Name         Instructions Cycles
 14228                           ; simple_byte            7     4 (average)
 14229                           ;	Chosen strategy is simple_byte
 14230  002594  0A00               	xorlw	0	; case 0
 14231  002596  B4D8               	btfsc	status,2,c
 14232  002598  D7B6               	goto	i2l4549
 14233  00259A  0A80               	xorlw	128	; case 128
 14234  00259C  B4D8               	btfsc	status,2,c
 14235  00259E  D7D5               	goto	i2l4551
 14236  0025A0                     i2l4559:
 14237                           
 14238                           ;doprnt.c: 1524: (putch(c) );
 14239  0025A0  5020               	movf	i2printf@c,w,c
 14240  0025A2  ECF5  F01B         	call	i2_putch
 14241  0025A6                     i2l4561:
 14242  0025A6  061A               	decf	i2printf@prec,f,c
 14243  0025A8  281A               	incf	i2printf@prec,w,c
 14244  0025AA  A4D8               	btfss	status,2,c
 14245  0025AC  D7F1               	goto	i2l4557
 14246  0025AE                     i2l4563:
 14247  0025AE  C00D  FFF6         	movff	i2printf@f,tblptrl
 14248  0025B2  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 14249  0025B6  4A0D               	infsnz	i2printf@f,f,c
 14250  0025B8  2A0E               	incf	i2printf@f+1,f,c
 14251  0025BA                     	if	0	;tblptru may be non-zero
 14252  0025BA                     	endif
 14253  0025BA                     	if	0	;tblptru may be non-zero
 14254  0025BA                     	endif
 14255  0025BA  0008               	tblrd		*
 14256  0025BC  CFF5 F020          	movff	tablat,i2printf@c
 14257  0025C0  5020               	movf	i2printf@c,w,c
 14258  0025C2  B4D8               	btfsc	status,2,c
 14259  0025C4  0012               	return	
 14260  0025C6  D67F               	goto	i2l4437
 14261  0025C8                     __end_ofi2_printf:
 14262                           	opt stack 0
 14263                           pclatu	equ	0xFFB
 14264                           pclath	equ	0xFFA
 14265                           tblptru	equ	0xFF8
 14266                           tblptrh	equ	0xFF7
 14267                           tblptrl	equ	0xFF6
 14268                           tablat	equ	0xFF5
 14269                           prodh	equ	0xFF4
 14270                           prodl	equ	0xFF3
 14271                           intcon	equ	0xFF2
 14272                           intcon2	equ	0xFF1
 14273                           intcon3	equ	0xFF0
 14274                           postinc0	equ	0xFEE
 14275                           fsr0h	equ	0xFEA
 14276                           fsr0l	equ	0xFE9
 14277                           wreg	equ	0xFE8
 14278                           postdec1	equ	0xFE5
 14279                           plusw1	equ	0xFE3
 14280                           fsr1h	equ	0xFE2
 14281                           fsr1l	equ	0xFE1
 14282                           indf2	equ	0xFDF
 14283                           postinc2	equ	0xFDE
 14284                           postdec2	equ	0xFDD
 14285                           plusw2	equ	0xFDB
 14286                           fsr2h	equ	0xFDA
 14287                           fsr2l	equ	0xFD9
 14288                           status	equ	0xFD8
 14289                           
 14290 ;; *************** function i2_putch *****************
 14291 ;; Defined at:
 14292 ;;		line 23 in file "../lcd.c"
 14293 ;; Parameters:    Size  Location     Type
 14294 ;;  data            1    wreg     unsigned char 
 14295 ;; Auto vars:     Size  Location     Type
 14296 ;;  data            1    2[COMRAM] unsigned char 
 14297 ;; Return value:  Size  Location     Type
 14298 ;;                  1    wreg      void 
 14299 ;; Registers used:
 14300 ;;		wreg, status,2, status,0, cstack
 14301 ;; Tracked objects:
 14302 ;;		On entry : 0/0
 14303 ;;		On exit  : 0/0
 14304 ;;		Unchanged: 0/0
 14305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14307 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14308 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14309 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14310 ;;Total ram usage:        1 bytes
 14311 ;; Hardware stack levels used:    1
 14312 ;; Hardware stack levels required when called:    1
 14313 ;; This function calls:
 14314 ;;		i2_lcdNibble
 14315 ;; This function is called by:
 14316 ;;		i2_printf
 14317 ;; This function uses a non-reentrant model
 14318 ;;
 14319                           
 14320                           	psect	text41
 14321  0037EA                     __ptext41:
 14322                           	opt stack 0
 14323  0037EA                     i2_putch:
 14324                           	opt stack 23
 14325                           
 14326                           ;incstack = 0
 14327                           ;i2putch@data stored from wreg
 14328  0037EA  6E03               	movwf	i2putch@data,c
 14329                           
 14330                           ;lcd.c: 24: LATDbits.LATD2 = 1;
 14331  0037EC  848C               	bsf	3980,2,c	;volatile
 14332                           
 14333                           ;lcd.c: 25: lcdNibble(data);
 14334  0037EE  5003               	movf	i2putch@data,w,c
 14335  0037F0  EC23  F01A         	call	i2_lcdNibble
 14336  0037F4  0012               	return		;funcret
 14337  0037F6                     __end_ofi2_putch:
 14338                           	opt stack 0
 14339                           pclatu	equ	0xFFB
 14340                           pclath	equ	0xFFA
 14341                           tblptru	equ	0xFF8
 14342                           tblptrh	equ	0xFF7
 14343                           tblptrl	equ	0xFF6
 14344                           tablat	equ	0xFF5
 14345                           prodh	equ	0xFF4
 14346                           prodl	equ	0xFF3
 14347                           intcon	equ	0xFF2
 14348                           intcon2	equ	0xFF1
 14349                           intcon3	equ	0xFF0
 14350                           postinc0	equ	0xFEE
 14351                           fsr0h	equ	0xFEA
 14352                           fsr0l	equ	0xFE9
 14353                           wreg	equ	0xFE8
 14354                           postdec1	equ	0xFE5
 14355                           plusw1	equ	0xFE3
 14356                           fsr1h	equ	0xFE2
 14357                           fsr1l	equ	0xFE1
 14358                           indf2	equ	0xFDF
 14359                           postinc2	equ	0xFDE
 14360                           postdec2	equ	0xFDD
 14361                           plusw2	equ	0xFDB
 14362                           fsr2h	equ	0xFDA
 14363                           fsr2l	equ	0xFD9
 14364                           status	equ	0xFD8
 14365                           
 14366 ;; *************** function i2_isdigit *****************
 14367 ;; Defined at:
 14368 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 14369 ;; Parameters:    Size  Location     Type
 14370 ;;  c               1    wreg     unsigned char 
 14371 ;; Auto vars:     Size  Location     Type
 14372 ;;  c               1    2[COMRAM] unsigned char 
 14373 ;; Return value:  Size  Location     Type
 14374 ;;		None               void
 14375 ;; Registers used:
 14376 ;;		wreg, status,2, status,0
 14377 ;; Tracked objects:
 14378 ;;		On entry : 0/0
 14379 ;;		On exit  : 0/0
 14380 ;;		Unchanged: 0/0
 14381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14382 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14383 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14384 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14385 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14386 ;;Total ram usage:        3 bytes
 14387 ;; Hardware stack levels used:    1
 14388 ;; This function calls:
 14389 ;;		Nothing
 14390 ;; This function is called by:
 14391 ;;		i2_printf
 14392 ;; This function uses a non-reentrant model
 14393 ;;
 14394                           
 14395                           	psect	text42
 14396  0036E0                     __ptext42:
 14397                           	opt stack 0
 14398  0036E0                     i2_isdigit:
 14399                           	opt stack 24
 14400                           
 14401                           ;incstack = 0
 14402                           ;i2isdigit@c stored from wreg
 14403  0036E0  6E03               	movwf	i2isdigit@c,c
 14404  0036E2  0E00               	movlw	0
 14405  0036E4  6E02               	movwf	i2_isdigit$1231,c
 14406  0036E6  0E3A               	movlw	58
 14407  0036E8  6003               	cpfslt	i2isdigit@c,c
 14408  0036EA  D005               	goto	i2l3911
 14409  0036EC  0E2F               	movlw	47
 14410  0036EE  6403               	cpfsgt	i2isdigit@c,c
 14411  0036F0  D002               	goto	i2l3911
 14412  0036F2  0E01               	movlw	1
 14413  0036F4  6E02               	movwf	i2_isdigit$1231,c
 14414  0036F6                     i2l3911:
 14415  0036F6  C002  F001         	movff	i2_isdigit$1231,??i2_isdigit
 14416  0036FA  3001               	rrcf	??i2_isdigit,w,c
 14417  0036FC  0012               	return	
 14418  0036FE                     __end_ofi2_isdigit:
 14419                           	opt stack 0
 14420                           pclatu	equ	0xFFB
 14421                           pclath	equ	0xFFA
 14422                           tblptru	equ	0xFF8
 14423                           tblptrh	equ	0xFF7
 14424                           tblptrl	equ	0xFF6
 14425                           tablat	equ	0xFF5
 14426                           prodh	equ	0xFF4
 14427                           prodl	equ	0xFF3
 14428                           intcon	equ	0xFF2
 14429                           intcon2	equ	0xFF1
 14430                           intcon3	equ	0xFF0
 14431                           postinc0	equ	0xFEE
 14432                           fsr0h	equ	0xFEA
 14433                           fsr0l	equ	0xFE9
 14434                           wreg	equ	0xFE8
 14435                           postdec1	equ	0xFE5
 14436                           plusw1	equ	0xFE3
 14437                           fsr1h	equ	0xFE2
 14438                           fsr1l	equ	0xFE1
 14439                           indf2	equ	0xFDF
 14440                           postinc2	equ	0xFDE
 14441                           postdec2	equ	0xFDD
 14442                           plusw2	equ	0xFDB
 14443                           fsr2h	equ	0xFDA
 14444                           fsr2l	equ	0xFD9
 14445                           status	equ	0xFD8
 14446                           
 14447 ;; *************** function i2___wmul *****************
 14448 ;; Defined at:
 14449 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 14450 ;; Parameters:    Size  Location     Type
 14451 ;;  multiplier      2    0[COMRAM] unsigned int 
 14452 ;;  multiplicand    2    2[COMRAM] unsigned int 
 14453 ;; Auto vars:     Size  Location     Type
 14454 ;;  __wmul          2    4[COMRAM] unsigned int 
 14455 ;; Return value:  Size  Location     Type
 14456 ;;                  2    0[COMRAM] unsigned int 
 14457 ;; Registers used:
 14458 ;;		wreg, status,2, status,0, prodl, prodh
 14459 ;; Tracked objects:
 14460 ;;		On entry : 0/0
 14461 ;;		On exit  : 0/0
 14462 ;;		Unchanged: 0/0
 14463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14464 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14465 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14466 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14467 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14468 ;;Total ram usage:        6 bytes
 14469 ;; Hardware stack levels used:    1
 14470 ;; This function calls:
 14471 ;;		Nothing
 14472 ;; This function is called by:
 14473 ;;		i2_printf
 14474 ;; This function uses a non-reentrant model
 14475 ;;
 14476                           
 14477                           	psect	text43
 14478  003674                     __ptext43:
 14479                           	opt stack 0
 14480  003674                     i2___wmul:
 14481                           	opt stack 24
 14482                           
 14483                           ;incstack = 0
 14484  003674  5001               	movf	i2___wmul@multiplier,w,c
 14485  003676  0203               	mulwf	i2___wmul@multiplicand,c
 14486  003678  CFF3 F005          	movff	prodl,i2___wmul@product
 14487  00367C  CFF4 F006          	movff	prodh,i2___wmul@product+1
 14488  003680  5001               	movf	i2___wmul@multiplier,w,c
 14489  003682  0204               	mulwf	i2___wmul@multiplicand+1,c
 14490  003684  50F3               	movf	prodl,w,c
 14491  003686  2606               	addwf	i2___wmul@product+1,f,c
 14492  003688  5002               	movf	i2___wmul@multiplier+1,w,c
 14493  00368A  0203               	mulwf	i2___wmul@multiplicand,c
 14494  00368C  50F3               	movf	prodl,w,c
 14495  00368E  2606               	addwf	i2___wmul@product+1,f,c
 14496  003690  C005  F001         	movff	i2___wmul@product,?i2___wmul
 14497  003694  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 14498  003698  0012               	return	
 14499  00369A                     __end_ofi2___wmul:
 14500                           	opt stack 0
 14501                           pclatu	equ	0xFFB
 14502                           pclath	equ	0xFFA
 14503                           tblptru	equ	0xFF8
 14504                           tblptrh	equ	0xFF7
 14505                           tblptrl	equ	0xFF6
 14506                           tablat	equ	0xFF5
 14507                           prodh	equ	0xFF4
 14508                           prodl	equ	0xFF3
 14509                           intcon	equ	0xFF2
 14510                           intcon2	equ	0xFF1
 14511                           intcon3	equ	0xFF0
 14512                           postinc0	equ	0xFEE
 14513                           fsr0h	equ	0xFEA
 14514                           fsr0l	equ	0xFE9
 14515                           wreg	equ	0xFE8
 14516                           postdec1	equ	0xFE5
 14517                           plusw1	equ	0xFE3
 14518                           fsr1h	equ	0xFE2
 14519                           fsr1l	equ	0xFE1
 14520                           indf2	equ	0xFDF
 14521                           postinc2	equ	0xFDE
 14522                           postdec2	equ	0xFDD
 14523                           plusw2	equ	0xFDB
 14524                           fsr2h	equ	0xFDA
 14525                           fsr2l	equ	0xFD9
 14526                           status	equ	0xFD8
 14527                           
 14528 ;; *************** function i2___lwmod *****************
 14529 ;; Defined at:
 14530 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 14531 ;; Parameters:    Size  Location     Type
 14532 ;;  dividend        2    7[COMRAM] unsigned int 
 14533 ;;  divisor         2    9[COMRAM] unsigned int 
 14534 ;; Auto vars:     Size  Location     Type
 14535 ;;  __lwmod         1   11[COMRAM] unsigned char 
 14536 ;; Return value:  Size  Location     Type
 14537 ;;                  2    7[COMRAM] unsigned int 
 14538 ;; Registers used:
 14539 ;;		wreg, status,2, status,0
 14540 ;; Tracked objects:
 14541 ;;		On entry : 0/0
 14542 ;;		On exit  : 0/0
 14543 ;;		Unchanged: 0/0
 14544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14545 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14546 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14548 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14549 ;;Total ram usage:        5 bytes
 14550 ;; Hardware stack levels used:    1
 14551 ;; This function calls:
 14552 ;;		Nothing
 14553 ;; This function is called by:
 14554 ;;		i2_printf
 14555 ;; This function uses a non-reentrant model
 14556 ;;
 14557                           
 14558                           	psect	text44
 14559  0034DE                     __ptext44:
 14560                           	opt stack 0
 14561  0034DE                     i2___lwmod:
 14562                           	opt stack 24
 14563                           
 14564                           ;incstack = 0
 14565  0034DE  500A               	movf	i2___lwmod@divisor,w,c
 14566  0034E0  100B               	iorwf	i2___lwmod@divisor+1,w,c
 14567  0034E2  B4D8               	btfsc	status,2,c
 14568  0034E4  D018               	goto	i2l1130
 14569  0034E6  0E01               	movlw	1
 14570  0034E8  6E0C               	movwf	i2___lwmod@counter,c
 14571  0034EA  D004               	goto	i2l3943
 14572  0034EC                     i2l3941:
 14573  0034EC  90D8               	bcf	status,0,c
 14574  0034EE  360A               	rlcf	i2___lwmod@divisor,f,c
 14575  0034F0  360B               	rlcf	i2___lwmod@divisor+1,f,c
 14576  0034F2  2A0C               	incf	i2___lwmod@counter,f,c
 14577  0034F4                     i2l3943:
 14578  0034F4  AE0B               	btfss	i2___lwmod@divisor+1,7,c
 14579  0034F6  D7FA               	goto	i2l3941
 14580  0034F8                     i2l3945:
 14581  0034F8  500A               	movf	i2___lwmod@divisor,w,c
 14582  0034FA  5C08               	subwf	i2___lwmod@dividend,w,c
 14583  0034FC  500B               	movf	i2___lwmod@divisor+1,w,c
 14584  0034FE  5809               	subwfb	i2___lwmod@dividend+1,w,c
 14585  003500  A0D8               	btfss	status,0,c
 14586  003502  D004               	goto	i2l3949
 14587  003504  500A               	movf	i2___lwmod@divisor,w,c
 14588  003506  5E08               	subwf	i2___lwmod@dividend,f,c
 14589  003508  500B               	movf	i2___lwmod@divisor+1,w,c
 14590  00350A  5A09               	subwfb	i2___lwmod@dividend+1,f,c
 14591  00350C                     i2l3949:
 14592  00350C  90D8               	bcf	status,0,c
 14593  00350E  320B               	rrcf	i2___lwmod@divisor+1,f,c
 14594  003510  320A               	rrcf	i2___lwmod@divisor,f,c
 14595  003512  2E0C               	decfsz	i2___lwmod@counter,f,c
 14596  003514  D7F1               	goto	i2l3945
 14597  003516                     i2l1130:
 14598  003516  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
 14599  00351A  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 14600  00351E  0012               	return		;funcret
 14601  003520                     __end_ofi2___lwmod:
 14602                           	opt stack 0
 14603                           pclatu	equ	0xFFB
 14604                           pclath	equ	0xFFA
 14605                           tblptru	equ	0xFF8
 14606                           tblptrh	equ	0xFF7
 14607                           tblptrl	equ	0xFF6
 14608                           tablat	equ	0xFF5
 14609                           prodh	equ	0xFF4
 14610                           prodl	equ	0xFF3
 14611                           intcon	equ	0xFF2
 14612                           intcon2	equ	0xFF1
 14613                           intcon3	equ	0xFF0
 14614                           postinc0	equ	0xFEE
 14615                           fsr0h	equ	0xFEA
 14616                           fsr0l	equ	0xFE9
 14617                           wreg	equ	0xFE8
 14618                           postdec1	equ	0xFE5
 14619                           plusw1	equ	0xFE3
 14620                           fsr1h	equ	0xFE2
 14621                           fsr1l	equ	0xFE1
 14622                           indf2	equ	0xFDF
 14623                           postinc2	equ	0xFDE
 14624                           postdec2	equ	0xFDD
 14625                           plusw2	equ	0xFDB
 14626                           fsr2h	equ	0xFDA
 14627                           fsr2l	equ	0xFD9
 14628                           status	equ	0xFD8
 14629                           
 14630 ;; *************** function i2___lwdiv *****************
 14631 ;; Defined at:
 14632 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 14633 ;; Parameters:    Size  Location     Type
 14634 ;;  dividend        2    0[COMRAM] unsigned int 
 14635 ;;  divisor         2    2[COMRAM] unsigned int 
 14636 ;; Auto vars:     Size  Location     Type
 14637 ;;  __lwdiv         2    4[COMRAM] unsigned int 
 14638 ;;  __lwdiv         1    6[COMRAM] unsigned char 
 14639 ;; Return value:  Size  Location     Type
 14640 ;;                  2    0[COMRAM] unsigned int 
 14641 ;; Registers used:
 14642 ;;		wreg, status,2, status,0
 14643 ;; Tracked objects:
 14644 ;;		On entry : 0/0
 14645 ;;		On exit  : 0/0
 14646 ;;		Unchanged: 0/0
 14647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14648 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14649 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14650 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14651 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14652 ;;Total ram usage:        7 bytes
 14653 ;; Hardware stack levels used:    1
 14654 ;; This function calls:
 14655 ;;		Nothing
 14656 ;; This function is called by:
 14657 ;;		i2_printf
 14658 ;; This function uses a non-reentrant model
 14659 ;;
 14660                           
 14661                           	psect	text45
 14662  0033F4                     __ptext45:
 14663                           	opt stack 0
 14664  0033F4                     i2___lwdiv:
 14665                           	opt stack 24
 14666                           
 14667                           ;incstack = 0
 14668  0033F4  0E00               	movlw	0
 14669  0033F6  6E06               	movwf	i2___lwdiv@quotient+1,c
 14670  0033F8  0E00               	movlw	0
 14671  0033FA  6E05               	movwf	i2___lwdiv@quotient,c
 14672  0033FC  5003               	movf	i2___lwdiv@divisor,w,c
 14673  0033FE  1004               	iorwf	i2___lwdiv@divisor+1,w,c
 14674  003400  B4D8               	btfsc	status,2,c
 14675  003402  D01C               	goto	i2l1120
 14676  003404  0E01               	movlw	1
 14677  003406  6E07               	movwf	i2___lwdiv@counter,c
 14678  003408  D004               	goto	i2l3923
 14679  00340A                     i2l3921:
 14680  00340A  90D8               	bcf	status,0,c
 14681  00340C  3603               	rlcf	i2___lwdiv@divisor,f,c
 14682  00340E  3604               	rlcf	i2___lwdiv@divisor+1,f,c
 14683  003410  2A07               	incf	i2___lwdiv@counter,f,c
 14684  003412                     i2l3923:
 14685  003412  AE04               	btfss	i2___lwdiv@divisor+1,7,c
 14686  003414  D7FA               	goto	i2l3921
 14687  003416                     i2l3925:
 14688  003416  90D8               	bcf	status,0,c
 14689  003418  3605               	rlcf	i2___lwdiv@quotient,f,c
 14690  00341A  3606               	rlcf	i2___lwdiv@quotient+1,f,c
 14691  00341C  5003               	movf	i2___lwdiv@divisor,w,c
 14692  00341E  5C01               	subwf	i2___lwdiv@dividend,w,c
 14693  003420  5004               	movf	i2___lwdiv@divisor+1,w,c
 14694  003422  5802               	subwfb	i2___lwdiv@dividend+1,w,c
 14695  003424  A0D8               	btfss	status,0,c
 14696  003426  D005               	goto	i2l3933
 14697  003428  5003               	movf	i2___lwdiv@divisor,w,c
 14698  00342A  5E01               	subwf	i2___lwdiv@dividend,f,c
 14699  00342C  5004               	movf	i2___lwdiv@divisor+1,w,c
 14700  00342E  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
 14701  003430  8005               	bsf	i2___lwdiv@quotient,0,c
 14702  003432                     i2l3933:
 14703  003432  90D8               	bcf	status,0,c
 14704  003434  3204               	rrcf	i2___lwdiv@divisor+1,f,c
 14705  003436  3203               	rrcf	i2___lwdiv@divisor,f,c
 14706  003438  2E07               	decfsz	i2___lwdiv@counter,f,c
 14707  00343A  D7ED               	goto	i2l3925
 14708  00343C                     i2l1120:
 14709  00343C  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
 14710  003440  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 14711  003444  0012               	return		;funcret
 14712  003446                     __end_ofi2___lwdiv:
 14713                           	opt stack 0
 14714                           pclatu	equ	0xFFB
 14715                           pclath	equ	0xFFA
 14716                           tblptru	equ	0xFF8
 14717                           tblptrh	equ	0xFF7
 14718                           tblptrl	equ	0xFF6
 14719                           tablat	equ	0xFF5
 14720                           prodh	equ	0xFF4
 14721                           prodl	equ	0xFF3
 14722                           intcon	equ	0xFF2
 14723                           intcon2	equ	0xFF1
 14724                           intcon3	equ	0xFF0
 14725                           postinc0	equ	0xFEE
 14726                           fsr0h	equ	0xFEA
 14727                           fsr0l	equ	0xFE9
 14728                           wreg	equ	0xFE8
 14729                           postdec1	equ	0xFE5
 14730                           plusw1	equ	0xFE3
 14731                           fsr1h	equ	0xFE2
 14732                           fsr1l	equ	0xFE1
 14733                           indf2	equ	0xFDF
 14734                           postinc2	equ	0xFDE
 14735                           postdec2	equ	0xFDD
 14736                           plusw2	equ	0xFDB
 14737                           fsr2h	equ	0xFDA
 14738                           fsr2l	equ	0xFD9
 14739                           status	equ	0xFD8
 14740                           
 14741 ;; *************** function i2_lcdInst *****************
 14742 ;; Defined at:
 14743 ;;		line 18 in file "../lcd.c"
 14744 ;; Parameters:    Size  Location     Type
 14745 ;;  data            1    wreg     unsigned char 
 14746 ;; Auto vars:     Size  Location     Type
 14747 ;;  data            1    2[COMRAM] unsigned char 
 14748 ;; Return value:  Size  Location     Type
 14749 ;;                  1    wreg      void 
 14750 ;; Registers used:
 14751 ;;		wreg, status,2, status,0, cstack
 14752 ;; Tracked objects:
 14753 ;;		On entry : 0/0
 14754 ;;		On exit  : 0/0
 14755 ;;		Unchanged: 0/0
 14756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14757 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14758 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14759 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14760 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14761 ;;Total ram usage:        1 bytes
 14762 ;; Hardware stack levels used:    1
 14763 ;; Hardware stack levels required when called:    1
 14764 ;; This function calls:
 14765 ;;		i2_lcdNibble
 14766 ;; This function is called by:
 14767 ;;		_keypressed
 14768 ;;		_ISR
 14769 ;; This function uses a non-reentrant model
 14770 ;;
 14771                           
 14772                           	psect	text46
 14773  0037F6                     __ptext46:
 14774                           	opt stack 0
 14775  0037F6                     i2_lcdInst:
 14776                           	opt stack 24
 14777                           
 14778                           ;incstack = 0
 14779                           ;i2lcdInst@data stored from wreg
 14780  0037F6  6E03               	movwf	i2lcdInst@data,c
 14781                           
 14782                           ;lcd.c: 19: LATDbits.LATD2 = 0;
 14783  0037F8  948C               	bcf	3980,2,c	;volatile
 14784                           
 14785                           ;lcd.c: 20: lcdNibble(data);
 14786  0037FA  5003               	movf	i2lcdInst@data,w,c
 14787  0037FC  EC23  F01A         	call	i2_lcdNibble
 14788  003800  0012               	return		;funcret
 14789  003802                     __end_ofi2_lcdInst:
 14790                           	opt stack 0
 14791                           pclatu	equ	0xFFB
 14792                           pclath	equ	0xFFA
 14793                           tblptru	equ	0xFF8
 14794                           tblptrh	equ	0xFF7
 14795                           tblptrl	equ	0xFF6
 14796                           tablat	equ	0xFF5
 14797                           prodh	equ	0xFF4
 14798                           prodl	equ	0xFF3
 14799                           intcon	equ	0xFF2
 14800                           intcon2	equ	0xFF1
 14801                           intcon3	equ	0xFF0
 14802                           postinc0	equ	0xFEE
 14803                           fsr0h	equ	0xFEA
 14804                           fsr0l	equ	0xFE9
 14805                           wreg	equ	0xFE8
 14806                           postdec1	equ	0xFE5
 14807                           plusw1	equ	0xFE3
 14808                           fsr1h	equ	0xFE2
 14809                           fsr1l	equ	0xFE1
 14810                           indf2	equ	0xFDF
 14811                           postinc2	equ	0xFDE
 14812                           postdec2	equ	0xFDD
 14813                           plusw2	equ	0xFDB
 14814                           fsr2h	equ	0xFDA
 14815                           fsr2l	equ	0xFD9
 14816                           status	equ	0xFD8
 14817                           
 14818 ;; *************** function i2_lcdNibble *****************
 14819 ;; Defined at:
 14820 ;;		line 28 in file "../lcd.c"
 14821 ;; Parameters:    Size  Location     Type
 14822 ;;  data            1    wreg     unsigned char 
 14823 ;; Auto vars:     Size  Location     Type
 14824 ;;  data            1    1[COMRAM] unsigned char 
 14825 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 14826 ;; Return value:  Size  Location     Type
 14827 ;;                  1    wreg      void 
 14828 ;; Registers used:
 14829 ;;		wreg, status,2, status,0
 14830 ;; Tracked objects:
 14831 ;;		On entry : 0/0
 14832 ;;		On exit  : 0/0
 14833 ;;		Unchanged: 0/0
 14834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14835 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14836 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14837 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14838 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14839 ;;Total ram usage:        2 bytes
 14840 ;; Hardware stack levels used:    1
 14841 ;; This function calls:
 14842 ;;		Nothing
 14843 ;; This function is called by:
 14844 ;;		i2_lcdInst
 14845 ;;		i2_putch
 14846 ;; This function uses a non-reentrant model
 14847 ;;
 14848                           
 14849                           	psect	text47
 14850  003446                     __ptext47:
 14851                           	opt stack 0
 14852  003446                     i2_lcdNibble:
 14853                           	opt stack 23
 14854                           
 14855                           ;incstack = 0
 14856                           ;i2lcdNibble@data stored from wreg
 14857  003446  6E02               	movwf	i2lcdNibble@data,c
 14858                           
 14859                           ;lcd.c: 30: char temp = data & 0xF0;
 14860  003448  5002               	movf	i2lcdNibble@data,w,c
 14861  00344A  0BF0               	andlw	240
 14862  00344C  6E01               	movwf	i2lcdNibble@temp,c
 14863                           
 14864                           ;lcd.c: 31: LATD = LATD & 0x0F;
 14865  00344E  508C               	movf	3980,w,c	;volatile
 14866  003450  0B0F               	andlw	15
 14867  003452  6E8C               	movwf	3980,c	;volatile
 14868                           
 14869                           ;lcd.c: 32: LATD = temp | LATD;
 14870  003454  5001               	movf	i2lcdNibble@temp,w,c
 14871  003456  108C               	iorwf	3980,w,c	;volatile
 14872  003458  6E8C               	movwf	3980,c	;volatile
 14873                           
 14874                           ;lcd.c: 34: LATDbits.LATD3 = 0;
 14875  00345A  968C               	bcf	3980,3,c	;volatile
 14876                           
 14877                           ;lcd.c: 35: _delay((unsigned long)((30)*(10000000/4000000.0)));
 14878  00345C  0E19               	movlw	25
 14879  00345E                     i2u801_47:
 14880  00345E  2EE8               	decfsz	wreg,f,c
 14881  003460  D7FE               	bra	i2u801_47
 14882                           
 14883                           ;lcd.c: 36: LATDbits.LATD3 = 1;
 14884  003462  868C               	bsf	3980,3,c	;volatile
 14885                           
 14886                           ;lcd.c: 37: _delay((unsigned long)((30)*(10000000/4000000.0)));
 14887  003464  0E19               	movlw	25
 14888  003466                     i2u802_47:
 14889  003466  2EE8               	decfsz	wreg,f,c
 14890  003468  D7FE               	bra	i2u802_47
 14891                           
 14892                           ;lcd.c: 39: data = data << 4;
 14893  00346A  3802               	swapf	i2lcdNibble@data,w,c
 14894  00346C  0BF0               	andlw	240
 14895  00346E  6E02               	movwf	i2lcdNibble@data,c
 14896                           
 14897                           ;lcd.c: 41: temp = data & 0xF0;
 14898  003470  5002               	movf	i2lcdNibble@data,w,c
 14899  003472  0BF0               	andlw	240
 14900  003474  6E01               	movwf	i2lcdNibble@temp,c
 14901                           
 14902                           ;lcd.c: 42: LATD = LATD & 0x0F;
 14903  003476  508C               	movf	3980,w,c	;volatile
 14904  003478  0B0F               	andlw	15
 14905  00347A  6E8C               	movwf	3980,c	;volatile
 14906                           
 14907                           ;lcd.c: 43: LATD = temp | LATD;
 14908  00347C  5001               	movf	i2lcdNibble@temp,w,c
 14909  00347E  108C               	iorwf	3980,w,c	;volatile
 14910  003480  6E8C               	movwf	3980,c	;volatile
 14911                           
 14912                           ;lcd.c: 45: LATDbits.LATD3 = 0;
 14913  003482  968C               	bcf	3980,3,c	;volatile
 14914                           
 14915                           ;lcd.c: 46: _delay((unsigned long)((30)*(10000000/4000000.0)));
 14916  003484  0E19               	movlw	25
 14917  003486                     i2u803_47:
 14918  003486  2EE8               	decfsz	wreg,f,c
 14919  003488  D7FE               	bra	i2u803_47
 14920                           
 14921                           ;lcd.c: 47: LATDbits.LATD3 = 1;
 14922  00348A  868C               	bsf	3980,3,c	;volatile
 14923                           
 14924                           ;lcd.c: 48: _delay((unsigned long)((30)*(10000000/4000000.0)));
 14925  00348C  0E19               	movlw	25
 14926  00348E                     i2u804_47:
 14927  00348E  2EE8               	decfsz	wreg,f,c
 14928  003490  D7FE               	bra	i2u804_47
 14929  003492  0012               	return		;funcret
 14930  003494                     __end_ofi2_lcdNibble:
 14931                           	opt stack 0
 14932                           pclatu	equ	0xFFB
 14933                           pclath	equ	0xFFA
 14934                           tblptru	equ	0xFF8
 14935                           tblptrh	equ	0xFF7
 14936                           tblptrl	equ	0xFF6
 14937                           tablat	equ	0xFF5
 14938                           prodh	equ	0xFF4
 14939                           prodl	equ	0xFF3
 14940                           intcon	equ	0xFF2
 14941                           intcon2	equ	0xFF1
 14942                           intcon3	equ	0xFF0
 14943                           postinc0	equ	0xFEE
 14944                           fsr0h	equ	0xFEA
 14945                           fsr0l	equ	0xFE9
 14946                           wreg	equ	0xFE8
 14947                           postdec1	equ	0xFE5
 14948                           plusw1	equ	0xFE3
 14949                           fsr1h	equ	0xFE2
 14950                           fsr1l	equ	0xFE1
 14951                           indf2	equ	0xFDF
 14952                           postinc2	equ	0xFDE
 14953                           postdec2	equ	0xFDD
 14954                           plusw2	equ	0xFDB
 14955                           fsr2h	equ	0xFDA
 14956                           fsr2l	equ	0xFD9
 14957                           status	equ	0xFD8
 14958                           
 14959 ;; *************** function i2_I2C_Master_Write *****************
 14960 ;; Defined at:
 14961 ;;		line 39 in file "../I2C.c"
 14962 ;; Parameters:    Size  Location     Type
 14963 ;;  d               2    1[COMRAM] unsigned int 
 14964 ;; Auto vars:     Size  Location     Type
 14965 ;;		None
 14966 ;; Return value:  Size  Location     Type
 14967 ;;                  1    wreg      void 
 14968 ;; Registers used:
 14969 ;;		wreg, status,2, status,0, cstack
 14970 ;; Tracked objects:
 14971 ;;		On entry : 0/0
 14972 ;;		On exit  : 0/0
 14973 ;;		Unchanged: 0/0
 14974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14975 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14976 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14977 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14978 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14979 ;;Total ram usage:        2 bytes
 14980 ;; Hardware stack levels used:    1
 14981 ;; Hardware stack levels required when called:    1
 14982 ;; This function calls:
 14983 ;;		i2_I2C_Master_Wait
 14984 ;; This function is called by:
 14985 ;;		_keypressed
 14986 ;; This function uses a non-reentrant model
 14987 ;;
 14988                           
 14989                           	psect	text48
 14990  00380C                     __ptext48:
 14991                           	opt stack 0
 14992  00380C                     i2_I2C_Master_Write:
 14993                           	opt stack 23
 14994                           
 14995                           ;I2C.c: 41: I2C_Master_Wait();
 14996                           
 14997                           ;incstack = 0
 14998  00380C  ECCE  F01B         	call	i2_I2C_Master_Wait	;wreg free
 14999                           
 15000                           ;I2C.c: 42: SSPBUF = d;
 15001  003810  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 15002  003814  0012               	return		;funcret
 15003  003816                     __end_ofi2_I2C_Master_Write:
 15004                           	opt stack 0
 15005                           pclatu	equ	0xFFB
 15006                           pclath	equ	0xFFA
 15007                           tblptru	equ	0xFF8
 15008                           tblptrh	equ	0xFF7
 15009                           tblptrl	equ	0xFF6
 15010                           tablat	equ	0xFF5
 15011                           prodh	equ	0xFF4
 15012                           prodl	equ	0xFF3
 15013                           intcon	equ	0xFF2
 15014                           intcon2	equ	0xFF1
 15015                           intcon3	equ	0xFF0
 15016                           postinc0	equ	0xFEE
 15017                           fsr0h	equ	0xFEA
 15018                           fsr0l	equ	0xFE9
 15019                           wreg	equ	0xFE8
 15020                           postdec1	equ	0xFE5
 15021                           plusw1	equ	0xFE3
 15022                           fsr1h	equ	0xFE2
 15023                           fsr1l	equ	0xFE1
 15024                           indf2	equ	0xFDF
 15025                           postinc2	equ	0xFDE
 15026                           postdec2	equ	0xFDD
 15027                           plusw2	equ	0xFDB
 15028                           fsr2h	equ	0xFDA
 15029                           fsr2l	equ	0xFD9
 15030                           status	equ	0xFD8
 15031                           
 15032 ;; *************** function i2_I2C_Master_Stop *****************
 15033 ;; Defined at:
 15034 ;;		line 33 in file "../I2C.c"
 15035 ;; Parameters:    Size  Location     Type
 15036 ;;		None
 15037 ;; Auto vars:     Size  Location     Type
 15038 ;;		None
 15039 ;; Return value:  Size  Location     Type
 15040 ;;                  1    wreg      void 
 15041 ;; Registers used:
 15042 ;;		wreg, status,2, status,0, cstack
 15043 ;; Tracked objects:
 15044 ;;		On entry : 0/0
 15045 ;;		On exit  : 0/0
 15046 ;;		Unchanged: 0/0
 15047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15048 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15049 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15050 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15051 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15052 ;;Total ram usage:        0 bytes
 15053 ;; Hardware stack levels used:    1
 15054 ;; Hardware stack levels required when called:    1
 15055 ;; This function calls:
 15056 ;;		i2_I2C_Master_Wait
 15057 ;; This function is called by:
 15058 ;;		_keypressed
 15059 ;; This function uses a non-reentrant model
 15060 ;;
 15061                           
 15062                           	psect	text49
 15063  00382E                     __ptext49:
 15064                           	opt stack 0
 15065  00382E                     i2_I2C_Master_Stop:
 15066                           	opt stack 23
 15067                           
 15068                           ;I2C.c: 35: I2C_Master_Wait();
 15069                           
 15070                           ;incstack = 0
 15071  00382E  ECCE  F01B         	call	i2_I2C_Master_Wait	;wreg free
 15072                           
 15073                           ;I2C.c: 36: PEN = 1;
 15074  003832  84C5               	bsf	4037,2,c	;volatile
 15075  003834  0012               	return		;funcret
 15076  003836                     __end_ofi2_I2C_Master_Stop:
 15077                           	opt stack 0
 15078                           pclatu	equ	0xFFB
 15079                           pclath	equ	0xFFA
 15080                           tblptru	equ	0xFF8
 15081                           tblptrh	equ	0xFF7
 15082                           tblptrl	equ	0xFF6
 15083                           tablat	equ	0xFF5
 15084                           prodh	equ	0xFF4
 15085                           prodl	equ	0xFF3
 15086                           intcon	equ	0xFF2
 15087                           intcon2	equ	0xFF1
 15088                           intcon3	equ	0xFF0
 15089                           postinc0	equ	0xFEE
 15090                           fsr0h	equ	0xFEA
 15091                           fsr0l	equ	0xFE9
 15092                           wreg	equ	0xFE8
 15093                           postdec1	equ	0xFE5
 15094                           plusw1	equ	0xFE3
 15095                           fsr1h	equ	0xFE2
 15096                           fsr1l	equ	0xFE1
 15097                           indf2	equ	0xFDF
 15098                           postinc2	equ	0xFDE
 15099                           postdec2	equ	0xFDD
 15100                           plusw2	equ	0xFDB
 15101                           fsr2h	equ	0xFDA
 15102                           fsr2l	equ	0xFD9
 15103                           status	equ	0xFD8
 15104                           
 15105 ;; *************** function i2_I2C_Master_Start *****************
 15106 ;; Defined at:
 15107 ;;		line 21 in file "../I2C.c"
 15108 ;; Parameters:    Size  Location     Type
 15109 ;;		None
 15110 ;; Auto vars:     Size  Location     Type
 15111 ;;		None
 15112 ;; Return value:  Size  Location     Type
 15113 ;;                  1    wreg      void 
 15114 ;; Registers used:
 15115 ;;		wreg, status,2, status,0, cstack
 15116 ;; Tracked objects:
 15117 ;;		On entry : 0/0
 15118 ;;		On exit  : 0/0
 15119 ;;		Unchanged: 0/0
 15120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15121 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15122 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15123 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15124 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15125 ;;Total ram usage:        0 bytes
 15126 ;; Hardware stack levels used:    1
 15127 ;; Hardware stack levels required when called:    1
 15128 ;; This function calls:
 15129 ;;		i2_I2C_Master_Wait
 15130 ;; This function is called by:
 15131 ;;		_keypressed
 15132 ;; This function uses a non-reentrant model
 15133 ;;
 15134                           
 15135                           	psect	text50
 15136  003836                     __ptext50:
 15137                           	opt stack 0
 15138  003836                     i2_I2C_Master_Start:
 15139                           	opt stack 23
 15140                           
 15141                           ;I2C.c: 23: I2C_Master_Wait();
 15142                           
 15143                           ;incstack = 0
 15144  003836  ECCE  F01B         	call	i2_I2C_Master_Wait	;wreg free
 15145                           
 15146                           ;I2C.c: 24: SEN = 1;
 15147  00383A  80C5               	bsf	4037,0,c	;volatile
 15148  00383C  0012               	return		;funcret
 15149  00383E                     __end_ofi2_I2C_Master_Start:
 15150                           	opt stack 0
 15151                           pclatu	equ	0xFFB
 15152                           pclath	equ	0xFFA
 15153                           tblptru	equ	0xFF8
 15154                           tblptrh	equ	0xFF7
 15155                           tblptrl	equ	0xFF6
 15156                           tablat	equ	0xFF5
 15157                           prodh	equ	0xFF4
 15158                           prodl	equ	0xFF3
 15159                           intcon	equ	0xFF2
 15160                           intcon2	equ	0xFF1
 15161                           intcon3	equ	0xFF0
 15162                           postinc0	equ	0xFEE
 15163                           fsr0h	equ	0xFEA
 15164                           fsr0l	equ	0xFE9
 15165                           wreg	equ	0xFE8
 15166                           postdec1	equ	0xFE5
 15167                           plusw1	equ	0xFE3
 15168                           fsr1h	equ	0xFE2
 15169                           fsr1l	equ	0xFE1
 15170                           indf2	equ	0xFDF
 15171                           postinc2	equ	0xFDE
 15172                           postdec2	equ	0xFDD
 15173                           plusw2	equ	0xFDB
 15174                           fsr2h	equ	0xFDA
 15175                           fsr2l	equ	0xFD9
 15176                           status	equ	0xFD8
 15177                           
 15178 ;; *************** function i2_I2C_Master_Read *****************
 15179 ;; Defined at:
 15180 ;;		line 45 in file "../I2C.c"
 15181 ;; Parameters:    Size  Location     Type
 15182 ;;  a               1    wreg     unsigned char 
 15183 ;; Auto vars:     Size  Location     Type
 15184 ;;  a               1    1[COMRAM] unsigned char 
 15185 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 15186 ;; Return value:  Size  Location     Type
 15187 ;;                  1    wreg      unsigned char 
 15188 ;; Registers used:
 15189 ;;		wreg, status,2, status,0, cstack
 15190 ;; Tracked objects:
 15191 ;;		On entry : 0/0
 15192 ;;		On exit  : 0/0
 15193 ;;		Unchanged: 0/0
 15194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15195 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15196 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15197 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15198 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15199 ;;Total ram usage:        2 bytes
 15200 ;; Hardware stack levels used:    1
 15201 ;; Hardware stack levels required when called:    1
 15202 ;; This function calls:
 15203 ;;		i2_I2C_Master_Wait
 15204 ;; This function is called by:
 15205 ;;		_keypressed
 15206 ;; This function uses a non-reentrant model
 15207 ;;
 15208                           
 15209                           	psect	text51
 15210  00369A                     __ptext51:
 15211                           	opt stack 0
 15212  00369A                     i2_I2C_Master_Read:
 15213                           	opt stack 23
 15214                           
 15215                           ;incstack = 0
 15216                           ;i2I2C_Master_Read@a stored from wreg
 15217  00369A  6E02               	movwf	i2I2C_Master_Read@a,c
 15218                           
 15219                           ;I2C.c: 47: unsigned char temp;
 15220                           ;I2C.c: 48: I2C_Master_Wait();
 15221  00369C  ECCE  F01B         	call	i2_I2C_Master_Wait	;wreg free
 15222                           
 15223                           ;I2C.c: 49: RCEN = 1;
 15224  0036A0  86C5               	bsf	4037,3,c	;volatile
 15225                           
 15226                           ;I2C.c: 50: I2C_Master_Wait();
 15227  0036A2  ECCE  F01B         	call	i2_I2C_Master_Wait	;wreg free
 15228                           
 15229                           ;I2C.c: 51: temp = SSPBUF;
 15230  0036A6  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 15231                           
 15232                           ;I2C.c: 52: I2C_Master_Wait();
 15233  0036AA  ECCE  F01B         	call	i2_I2C_Master_Wait	;wreg free
 15234                           
 15235                           ;I2C.c: 53: ACKDT = (a)?0:1;
 15236  0036AE  5002               	movf	i2I2C_Master_Read@a,w,c
 15237  0036B0  A4D8               	btfss	status,2,c
 15238  0036B2  D002               	goto	i2u368_40
 15239  0036B4  8AC5               	bsf	4037,5,c	;volatile
 15240  0036B6  D001               	goto	i2l4287
 15241  0036B8                     i2u368_40:
 15242  0036B8  9AC5               	bcf	4037,5,c	;volatile
 15243  0036BA                     i2l4287:
 15244                           
 15245                           ;I2C.c: 54: ACKEN = 1;
 15246  0036BA  88C5               	bsf	4037,4,c	;volatile
 15247                           
 15248                           ;I2C.c: 55: return temp;
 15249  0036BC  5003               	movf	i2I2C_Master_Read@temp,w,c
 15250  0036BE  0012               	return	
 15251  0036C0                     __end_ofi2_I2C_Master_Read:
 15252                           	opt stack 0
 15253                           pclatu	equ	0xFFB
 15254                           pclath	equ	0xFFA
 15255                           tblptru	equ	0xFF8
 15256                           tblptrh	equ	0xFF7
 15257                           tblptrl	equ	0xFF6
 15258                           tablat	equ	0xFF5
 15259                           prodh	equ	0xFF4
 15260                           prodl	equ	0xFF3
 15261                           intcon	equ	0xFF2
 15262                           intcon2	equ	0xFF1
 15263                           intcon3	equ	0xFF0
 15264                           postinc0	equ	0xFEE
 15265                           fsr0h	equ	0xFEA
 15266                           fsr0l	equ	0xFE9
 15267                           wreg	equ	0xFE8
 15268                           postdec1	equ	0xFE5
 15269                           plusw1	equ	0xFE3
 15270                           fsr1h	equ	0xFE2
 15271                           fsr1l	equ	0xFE1
 15272                           indf2	equ	0xFDF
 15273                           postinc2	equ	0xFDE
 15274                           postdec2	equ	0xFDD
 15275                           plusw2	equ	0xFDB
 15276                           fsr2h	equ	0xFDA
 15277                           fsr2l	equ	0xFD9
 15278                           status	equ	0xFD8
 15279                           
 15280 ;; *************** function i2_I2C_Master_Wait *****************
 15281 ;; Defined at:
 15282 ;;		line 16 in file "../I2C.c"
 15283 ;; Parameters:    Size  Location     Type
 15284 ;;		None
 15285 ;; Auto vars:     Size  Location     Type
 15286 ;;		None
 15287 ;; Return value:  Size  Location     Type
 15288 ;;                  1    wreg      void 
 15289 ;; Registers used:
 15290 ;;		wreg, status,2, status,0
 15291 ;; Tracked objects:
 15292 ;;		On entry : 0/0
 15293 ;;		On exit  : 0/0
 15294 ;;		Unchanged: 0/0
 15295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15297 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15298 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15299 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15300 ;;Total ram usage:        1 bytes
 15301 ;; Hardware stack levels used:    1
 15302 ;; This function calls:
 15303 ;;		Nothing
 15304 ;; This function is called by:
 15305 ;;		i2_I2C_Master_Start
 15306 ;;		i2_I2C_Master_Stop
 15307 ;;		i2_I2C_Master_Write
 15308 ;;		i2_I2C_Master_Read
 15309 ;; This function uses a non-reentrant model
 15310 ;;
 15311                           
 15312                           	psect	text52
 15313  00379C                     __ptext52:
 15314                           	opt stack 0
 15315  00379C                     i2_I2C_Master_Wait:
 15316                           	opt stack 23
 15317  00379C                     i2l30:
 15318  00379C  B4C7               	btfsc	4039,2,c	;volatile
 15319  00379E  D7FE               	goto	i2l30
 15320  0037A0  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 15321  0037A4  0E1F               	movlw	31
 15322  0037A6  1601               	andwf	??i2_I2C_Master_Wait,f,c
 15323  0037A8  B4D8               	btfsc	status,2,c
 15324  0037AA  0012               	return	
 15325  0037AC  D7F7               	goto	i2l30
 15326  0037AE                     __end_ofi2_I2C_Master_Wait:
 15327                           	opt stack 0
 15328                           pclatu	equ	0xFFB
 15329                           pclath	equ	0xFFA
 15330                           tblptru	equ	0xFF8
 15331                           tblptrh	equ	0xFF7
 15332                           tblptrl	equ	0xFF6
 15333                           tablat	equ	0xFF5
 15334                           prodh	equ	0xFF4
 15335                           prodl	equ	0xFF3
 15336                           intcon	equ	0xFF2
 15337                           intcon2	equ	0xFF1
 15338                           intcon3	equ	0xFF0
 15339                           postinc0	equ	0xFEE
 15340                           fsr0h	equ	0xFEA
 15341                           fsr0l	equ	0xFE9
 15342                           wreg	equ	0xFE8
 15343                           postdec1	equ	0xFE5
 15344                           plusw1	equ	0xFE3
 15345                           fsr1h	equ	0xFE2
 15346                           fsr1l	equ	0xFE1
 15347                           indf2	equ	0xFDF
 15348                           postinc2	equ	0xFDE
 15349                           postdec2	equ	0xFDD
 15350                           plusw2	equ	0xFDB
 15351                           fsr2h	equ	0xFDA
 15352                           fsr2l	equ	0xFD9
 15353                           status	equ	0xFD8
 15354                           pclatu	equ	0xFFB
 15355                           pclath	equ	0xFFA
 15356                           tblptru	equ	0xFF8
 15357                           tblptrh	equ	0xFF7
 15358                           tblptrl	equ	0xFF6
 15359                           tablat	equ	0xFF5
 15360                           prodh	equ	0xFF4
 15361                           prodl	equ	0xFF3
 15362                           intcon	equ	0xFF2
 15363                           intcon2	equ	0xFF1
 15364                           intcon3	equ	0xFF0
 15365                           postinc0	equ	0xFEE
 15366                           fsr0h	equ	0xFEA
 15367                           fsr0l	equ	0xFE9
 15368                           wreg	equ	0xFE8
 15369                           postdec1	equ	0xFE5
 15370                           plusw1	equ	0xFE3
 15371                           fsr1h	equ	0xFE2
 15372                           fsr1l	equ	0xFE1
 15373                           indf2	equ	0xFDF
 15374                           postinc2	equ	0xFDE
 15375                           postdec2	equ	0xFDD
 15376                           plusw2	equ	0xFDB
 15377                           fsr2h	equ	0xFDA
 15378                           fsr2l	equ	0xFD9
 15379                           status	equ	0xFD8
 15380                           
 15381                           	psect	rparam
 15382  0000                     pclatu	equ	0xFFB
 15383                           pclath	equ	0xFFA
 15384                           tblptru	equ	0xFF8
 15385                           tblptrh	equ	0xFF7
 15386                           tblptrl	equ	0xFF6
 15387                           tablat	equ	0xFF5
 15388                           prodh	equ	0xFF4
 15389                           prodl	equ	0xFF3
 15390                           intcon	equ	0xFF2
 15391                           intcon2	equ	0xFF1
 15392                           intcon3	equ	0xFF0
 15393                           postinc0	equ	0xFEE
 15394                           fsr0h	equ	0xFEA
 15395                           fsr0l	equ	0xFE9
 15396                           wreg	equ	0xFE8
 15397                           postdec1	equ	0xFE5
 15398                           plusw1	equ	0xFE3
 15399                           fsr1h	equ	0xFE2
 15400                           fsr1l	equ	0xFE1
 15401                           indf2	equ	0xFDF
 15402                           postinc2	equ	0xFDE
 15403                           postdec2	equ	0xFDD
 15404                           plusw2	equ	0xFDB
 15405                           fsr2h	equ	0xFDA
 15406                           fsr2l	equ	0xFD9
 15407                           status	equ	0xFD8
 15408                           
 15409                           	psect	temp
 15410  000056                     btemp:
 15411                           	opt stack 0
 15412  000056                     	ds	1
 15413  0000                     int$flags	set	btemp
 15414                           pclatu	equ	0xFFB
 15415                           pclath	equ	0xFFA
 15416                           tblptru	equ	0xFF8
 15417                           tblptrh	equ	0xFF7
 15418                           tblptrl	equ	0xFF6
 15419                           tablat	equ	0xFF5
 15420                           prodh	equ	0xFF4
 15421                           prodl	equ	0xFF3
 15422                           intcon	equ	0xFF2
 15423                           intcon2	equ	0xFF1
 15424                           intcon3	equ	0xFF0
 15425                           postinc0	equ	0xFEE
 15426                           fsr0h	equ	0xFEA
 15427                           fsr0l	equ	0xFE9
 15428                           wreg	equ	0xFE8
 15429                           postdec1	equ	0xFE5
 15430                           plusw1	equ	0xFE3
 15431                           fsr1h	equ	0xFE2
 15432                           fsr1l	equ	0xFE1
 15433                           indf2	equ	0xFDF
 15434                           postinc2	equ	0xFDE
 15435                           postdec2	equ	0xFDD
 15436                           plusw2	equ	0xFDB
 15437                           fsr2h	equ	0xFDA
 15438                           fsr2l	equ	0xFD9
 15439                           status	equ	0xFD8


Data Sizes:
    Strings     596
    Constant    267
    Data        33
    BSS         51
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     52      85
    BANK0           128     72     123
    BANK1           256     60      60
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 25
		 -> STR_39(CODE[22]), STR_38(CODE[20]), STR_37(CODE[23]), STR_36(CODE[23]), 
		 -> STR_35(CODE[23]), STR_34(CODE[17]), STR_33(CODE[23]), STR_32(CODE[23]), 
		 -> STR_31(CODE[17]), STR_30(CODE[17]), STR_29(CODE[17]), STR_28(CODE[17]), 
		 -> STR_27(CODE[17]), STR_26(CODE[17]), STR_25(CODE[17]), STR_24(CODE[17]), 
		 -> STR_23(CODE[17]), STR_22(CODE[17]), STR_21(CODE[23]), STR_20(CODE[23]), 
		 -> STR_19(CODE[17]), STR_18(CODE[21]), STR_17(CODE[17]), STR_16(CODE[21]), 
		 -> STR_15(CODE[17]), STR_14(CODE[21]), STR_13(CODE[17]), STR_12(CODE[19]), 
		 -> STR_11(CODE[17]), STR_10(CODE[19]), STR_9(CODE[17]), STR_8(CODE[25]), 
		 -> STR_7(CODE[17]), STR_6(CODE[17]), STR_5(CODE[17]), STR_4(CODE[17]), 
		 -> STR_3(CODE[17]), STR_2(CODE[17]), STR_1(CODE[17]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR in COMRAM

    _ISR->_keypressed
    _keypressed->i2_printf
    i2_stopOperation->i2___awdiv
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_lcdInst->i2_lcdNibble
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_show_log
    _testBatteries->_readADC
    _stopOperation->___awdiv
    _show_log->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    _logPC->_getChar
    _getTens->___lwdiv
    _getOnes->___lwmod
    ___lwmod->___lwdiv
    _getHundreds->___lwdiv
    _getChar->_getOnes
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _I2C_Master_Read->_I2C_Master_Wait
    _I2C_Master_Init->___lldiv

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_logPC

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                11    11      0   44578
                                             61 BANK0     11    11      0
                    _I2C_Master_Init
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _initLCD
                            _lcdInst
                              _logPC
                             _printf
                            _readADC
                           _show_log
                      _stopOperation
                      _testBatteries
                           _wait_2ms
 ---------------------------------------------------------------------------------
 (1) _wait_2ms                                             2     0      2     801
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _testBatteries                                       12    12      0     573
                                              1 BANK0     12    12      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _readADC                                              1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _stopOperation                                        3     3      0    7239
                                              8 BANK0      3     3      0
                    _Eeprom_ReadByte
                   _Eeprom_WriteByte
                            ___awdiv
                            ___awmod
                       _next_address
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     671
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     683
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _Eeprom_WriteByte                                     3     0      3    2249
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (1) _show_log                                            27    24      3   11551
                                             34 BANK0     27    24      3
                    _Eeprom_ReadByte
                            _lcdInst
                       _next_address
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              31    23      8    6467
                                             12 BANK0     22    14      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     195
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     392
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _next_address                                         2     0      2    1725
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _Eeprom_ReadByte                                      2     0      2    1063
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _logPC                                               62    62      0   12398
                                             16 BANK0      2     2      0
                                              0 BANK1     60    60      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _getChar
                        _getHundreds
                            _getOnes
                            _getTens
 ---------------------------------------------------------------------------------
 (2) _getTens                                              2     0      2    1843
                                              7 BANK0      2     0      2
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (2) _getOnes                                              2     0      2    1495
                                             12 BANK0      2     0      2
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     540
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) _getHundreds                                          2     0      2     996
                                              7 BANK0      2     0      2
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     857
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _getChar                                              2     0      2    1956
                                             14 BANK0      2     0      2
                        _getHundreds (ARG)
                            _getOnes (ARG)
                            _getTens (ARG)
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2    3776
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     195
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     195
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     164
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Read                                      2     2      0      65
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     503
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     395
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                 16    16      0   10570
                                             36 COMRAM    16    16      0
                         _keypressed
                          i2___awdiv
                          i2___awmod
                          i2_lcdInst
                           i2_printf
                    i2_stopOperation
 ---------------------------------------------------------------------------------
 (6) _keypressed                                           4     2      2    5108
                                             32 COMRAM     4     2      2
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
                          i2_lcdInst
                           i2_printf
                    i2_stopOperation
 ---------------------------------------------------------------------------------
 (6) i2_stopOperation                                      3     3      0    2562
                                              8 COMRAM     3     3      0
                  i2_Eeprom_ReadByte
                 i2_Eeprom_WriteByte
                          i2___awdiv
                          i2___awmod
                     i2_next_address
 ---------------------------------------------------------------------------------
 (7) i2_next_address                                       2     0      2     308
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (7) i2___awmod                                            6     2      4     400
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (7) i2___awdiv                                            8     4      4     404
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (7) i2_Eeprom_WriteByte                                   3     0      3     794
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (7) i2_Eeprom_ReadByte                                    2     0      2      70
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (6) i2_printf                                            29    23      6    1938
                                             12 COMRAM    20    14      6
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (7) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (7) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (7) i2___wmul                                             6     2      4     209
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (7) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (7) i2___lwdiv                                            7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (6) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (8) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Write                                   2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Stop                                    0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Start                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Read                                    2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Wait                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _I2C_Master_Read
     _I2C_Master_Wait
   _I2C_Master_Start
     _I2C_Master_Wait
   _I2C_Master_Stop
     _I2C_Master_Wait
   _I2C_Master_Write
     _I2C_Master_Wait
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _logPC
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     _getChar
       _getHundreds (ARG)
         ___lwdiv
       _getOnes (ARG)
         ___lwmod
           ___lwdiv (ARG)
       _getTens (ARG)
         ___lwdiv
     _getHundreds
       ___lwdiv
     _getOnes
       ___lwmod
         ___lwdiv (ARG)
     _getTens
       ___lwdiv
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
       _lcdNibble
   _readADC
   _show_log
     _Eeprom_ReadByte
     _lcdInst
       _lcdNibble
     _next_address
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _stopOperation
     _Eeprom_ReadByte
     _Eeprom_WriteByte
     ___awdiv
     ___awmod
     _next_address
   _testBatteries
     _readADC
   _wait_2ms

 _ISR (ROOT)
   _keypressed
     i2_I2C_Master_Read
       i2_I2C_Master_Wait
     i2_I2C_Master_Start
       i2_I2C_Master_Wait
     i2_I2C_Master_Stop
       i2_I2C_Master_Wait
     i2_I2C_Master_Write
       i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
       i2___lwmod
         i2___lwdiv (ARG)
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
     i2_stopOperation
       i2_Eeprom_ReadByte
       i2_Eeprom_WriteByte
       i2___awdiv
       i2___awmod
       i2_next_address
   i2___awdiv
   i2___awmod
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     i2___lwdiv
     i2___lwmod
       i2___lwdiv (ARG)
     i2___wmul
     i2_isdigit
     i2_putch
       i2_lcdNibble
   i2_stopOperation
     i2_Eeprom_ReadByte
     i2_Eeprom_WriteByte
     i2___awdiv
     i2___awmod
     i2_next_address

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     3C      3C       7       23.4%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     48      7B       5       96.1%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     34      55       1       67.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     10C      34        0.0%
DATA                 0      0     10C       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Tue Apr 11 20:38:22 2017

         i2_I2C_Master_Start 3836           i2_I2C_Master_Write 380C     __end_of_Eeprom_WriteByte 364E  
                         l30 3774                 ___awdiv@sign 0085          ___wmul@multiplicand 0082  
         i2___lwdiv@dividend 0001                  __CFG_BORV$3 000000    stopOperation@address_code 0088  
               __CFG_CP0$OFF 000000                 __CFG_CP1$OFF 000000                 __CFG_CP2$OFF 000000  
               __CFG_CP3$OFF 000000                  __CFG_OSC$HS 000000                  _totalHeader FCC4  
                        l326 02A6                          l520 3644                          l514 3740  
                        l530 1C9A                          l551 11F4                          l384 06E6  
                        l563 1428                          l581 1776                          l557 130E  
                        l575 165C                          l479 372A                          l569 1542  
                        l675 19D0                          _GIE 007F97                 __CFG_CPB$OFF 000000  
                        _PEN 007E2A                 __CFG_CPD$OFF 000000                          _ISR 0008  
                        _SEN 007E28          ?i2_I2C_Master_Start 0001          ?i2_I2C_Master_Write 0002  
                        _min 00E5                          _sec 00EB                 ___awmod@sign 0085  
                        prod 000FF3                          wreg 000FE8                 __CFG_LVP$OFF 000000  
                       ?_ISR 0001                 show_log@hour 00B5                 __CFG_WDT$OFF 000000  
                       l1120 31F2                         l1130 332A                         l1067 304C  
               show_log@year 00B2                         l6101 331C                         l6211 1B12  
                       l6123 18C0                         l6205 1AD0                         l6133 18F0  
                       l7101 00D2                         l7023 16F8                         l6223 1B48  
                       l6151 199E                         l6127 18D4              __end_of_CHeader FD87  
                       l6073 31A2                         l6313 358C                         l7009 16A6  
                       l6057 361C                         l6225 1B54                         l6233 1B82  
                       l6217 1B2C                         l6209 1B08                         l6129 18E6  
                       l7113 00FE                         l7105 00DC                         l6403 2FD0  
                       l6075 31AE                         l6235 1B88                         l6243 1C22  
                       l6163 1A08                         l6147 1998                         l6139 1920  
                       l6331 2F16                         l7123 012A                         l7131 014C  
                       l6405 2FE0                         l6085 31E4                         l6077 31B4  
                       l6093 32E6                         l7045 1816                         l6237 1BD4  
                       l6245 1C34                         l6229 1B6E                         l6181 1A60  
                       l6341 2F46                         l6325 2F00                         l7133 0158  
                       l6415 303A                         l6407 2FE6                         l6095 32F2  
                       l6247 1C3C                         l6183 1A66                         l6167 1A24  
                       l6503 2CB8                         l7223 02E2                         l7119 0120  
                       l6097 32F8                         l6169 1A2A                         l6249 1C48  
                       l6337 2F34                         l6353 2F84                         l6513 2CF2  
                       l7305 0504                         l7209 0296                         l7233 034E  
                       l6435 35F4                         l7059 1868                         l6339 2F40  
                       l6507 2CD8                         l7323 0534                         l7227 030E  
                       l7163 01DC                         l6197 1A9C                         l6357 2F98  
                       l6349 2F76                         l6381 30B0                         l6373 308A  
                       l6621 21C6                         l6541 2DA4                         l6525 2D2C  
                       l6517 2D12                         l7501 0940                         l7333 0560  
                       l7261 03EC                         l7413 0754                         l7229 0322  
                       l7181 0224                         l7165 01E4                         l7149 01A0  
                       l7093 00A0                         l6295 3550                         l6199 1AAE  
                       l6623 21D8                         l7191 0250                         l7175 020C  
                       l7159 01CC                         l6801 0DA8                         l6393 30F6  
                       l6385 30D4                         l6377 309E                         l6369 307A  
                       l6537 2D82                         l6545 2DBA                         l6457 3706  
                       l7433 07AE                         l7353 05B0                         l7337 0570  
                       l7273 041C                         l7265 03FC                         l6379 30AA  
                       l6483 2C20                         l7611 0C78                         l7523 09F4  
                       l7515 09B4                         l7507 0974                         l7451 07F6  
                       l7435 07B6                         l7419 0772                         l7371 05FA  
                       l7355 05B8                         l7339 0578                         l7195 0260  
                       l7179 021C                         l6901 1358                         l6389 30E2  
                       l6493 2C8E                         l7533 0A4A                         l7525 0A00  
                       l7517 09C0                         l7509 0980                         l7461 0822  
                       l7445 07DE                         l7429 079E                         l7365 05E4  
                       l7349 05A0                         l7285 0434                         l7277 042C  
                       l7269 040C                         l6751 1EDE                         l6743 1E7C  
                       l7615 0CB4                         l7631 0D46                         l7551 0AB0  
                       l7391 06BA                         l7375 0646                         l7295 049E  
                       l7199 026A                         l7625 0CDE                         l7609 0C6C  
                       l7545 0A76                         l7537 0A54                         l7465 0832  
                       l7449 07EE                         l7385 067A                         l7369 05F4  
                       l7289 0480                         l6915 13AA                         l6843 1176  
                       l6771 1F66                         l6763 1F0C                         l6755 1EE8  
                       l6691 1C6C                         l7619 0CBE                         l7571 0B28  
                       l7555 0ABA                         l7563 0ADC                         l7491 08F4  
                       l7483 08B4                         l7475 086E                         l7299 04B2  
                       l7467 0838                         l6829 1124                         l7581 0B80  
                       l7573 0B34                         l7565 0AE8                         l7493 0900  
                       l7485 08C0                         l7477 0878                         l7469 0842  
                       l7389 06A6                         l6951 14C4                         l6775 1F70  
                       l6783 1F94                         l6695 1C76                         l6937 1472  
                       l6865 123E                         l6787 0D5E                         l7595 0C0C  
                       l7587 0BC0                         l7579 0B74                         l7499 0934  
                       l6973 158C                         l7597 0C18                         l7589 0BCC  
                       l6879 1290                         l6987 15DE                         STR_1 FFED  
                       STR_2 FFDC                         STR_3 FF65                         STR_4 FF87  
                       STR_5 FF32                         STR_6 FF10                         STR_7 FF54  
                       STR_8 FDAA                         STR_9 FEEE                         _LATA 000F89  
                       _LATB 000F8A                         _LATC 000F8B                         _LATD 000F8C  
                       _LATE 000F8D                         _PEIE 007F96                         u7110 0364  
                       u7111 0360                         u7120 037A                         u7112 0366  
                       u6170 3530                         u7122 037C                         u6180 356C  
                       _RCEN 007E2B                         i2l30 379C                         u6350 35F2  
                       u8007 338E                         u7240 0500                         u6345 33C4  
                       u6800 1542                         u6720 130E                         u6641 0DB2  
                       u6840 165C                         u6760 1428                         u6680 11F4  
                       u7707 01AE                         u7717 01C2                         u7807 0586  
                       u7727 01F2                         u6880 1776                         u7817 0598  
                       u7737 0204                         u7907 0A66                         u7827 05C6  
                       u7747 0232                         u7917 0ACC                         u7837 05DA  
                       u7757 0246                         u7927 1C8A                         u7847 0780  
                       u7767 0278                         u7687 00EE                         u7937 1EFC  
                       u7857 0794                         u7777 028C                         u7697 013C  
                       u7947 1F84                         u7867 07C4                         u7787 0542  
                       u7957 349C                         u7877 07D6                         u7797 0556  
                       u7967 34D2                         u7887 0804                         u7977 3354  
                       u7897 0818                         u7987 335C                         u7997 3386  
                       _TMR0 000FD6                         _TMR1 000FCE                         _TMR2 000FCC  
     __end_ofi2_next_address 37EA                         _main 0012                         _keys FD87  
                       _numC 00E9                         fsr0h 000FEA                         fsr1h 000FE2  
         i2___lwdiv@quotient 0005                         fsr2h 000FDA                         fsr0l 000FE9  
                       indf2 000FDF                         fsr1l 000FE1                         fsr2l 000FD9  
                       btemp 0056         ??i2_I2C_Master_Start 0002         ??i2_I2C_Master_Write 0004  
                       prodh 000FF4                         prodl 000FF3                         start 000E  
           __end_of_AAHeader FD28                __CFG_IESO$OFF 000000              __end_ofi2_putch 37F6  
              __CFG_MCLRE$ON 000000                 ___param_bank 000000                show_log@C_num 00AA  
                i2_lcdNibble 3446                        ??_ISR 0025                show_log@i_936 00B9  
              show_log@i_939 00BA             ?_I2C_Master_Init 008D             ?_I2C_Master_Read 0001  
           ?_I2C_Master_Wait 0001             ?_I2C_Master_Stop 0001                show_log@month 00B3  
                      ?_main 0001                        _ACKEN 007E2C                        _ACKDT 007E2D  
            __end_of___awdiv 2FA2                        _ADRES 000FC3                        _EEADR 000FA9  
                      STR_10 FE75                        STR_11 FEAA                        STR_12 FE75  
                      STR_20 FDC3                        STR_13 FECC                        STR_21 FDDA  
                      STR_22 FF98                        STR_30 FEFF                        STR_14 FE4C  
                      STR_31 FF76                        STR_15 FEBB                        STR_23 FE99  
                      STR_16 FE4C                        STR_24 FFA9                        STR_40 FE88  
                      STR_32 FDF1                        STR_25 FE99                        STR_17 FF21  
                      STR_33 FE08                        STR_18 FE4C                        STR_26 FFBA  
                      STR_34 FF43                        STR_27 FE99                        STR_35 FDC3  
                      STR_19 FEDD                        STR_36 FDDA                        STR_28 FFCB  
            __end_of___awmod 3100                        STR_29 FE99                        STR_37 FE1F  
                      STR_38 FE61                        STR_39 FE36              __end_of___lldiv 305E  
                      _T0CON 000FD5              ___awdiv@divisor 0082                        _T1CON 000FCD  
                      _T2CON 000FCA              __end_of___lwdiv 31FC              __end_of___lwmod 3334  
                      i2l520 366A                        i2l514 376C                        i2l612 29EC  
                      i2l643 2B78                        i2l675 23A8              ___awdiv@counter 0084  
                      _PORTB 000F81                        _TRISA 000F92                        _TRISB 000F93  
                      _TRISC 000F94                        _TRISD 000F95                        _TRISE 000F96  
              _turn1BackLeft 00D7                __CFG_PWRT$OFF 000000                __CFG_WRT0$OFF 000000  
            __end_of_getChar 381E                __CFG_WRT1$OFF 000000                __CFG_WRT2$OFF 000000  
              __CFG_WRT3$OFF 000000              __end_of_lcdInst 37CE              __end_of_getOnes 36E0  
             __CFG_EBTR0$OFF 000000               __CFG_FCMEN$OFF 000000              __end_of_getTens 355C  
             __CFG_EBTR1$OFF 000000                _turn2BackLeft 00DB               __CFG_EBTR2$OFF 000000  
               main@keypress 00BF               __CFG_EBTR3$OFF 000000                        _nRBPU 007F8F  
     __size_of_stopOperation 031A                __CFG_WRTB$OFF 000000                __CFG_WRTC$OFF 000000  
              __CFG_WRTD$OFF 000000              __end_of_readADC 3730              __end_of_initLCD 34DE  
             __CFG_EBTRB$OFF 000000                   i2isdigit@c 0003              __end_of_dpowers FDA2  
                      _logPC 0D54             ?_Eeprom_ReadByte 0080                        _numAA 00E7  
                      _num9V 00E6              __end_of_isdigit 3626                        _step1 0054  
                      _step2 0055                        _putch 37AE                        main@i 00C0  
     i2stopOperation@address 000A                        pclath 000FFA                        tablat 000FF5  
           __end_ofi2___wmul 369A                        plusw1 000FE3                        plusw2 000FDB  
                      status 000FD8              ?i2_next_address 0001           __size_ofi2___awdiv 0084  
         i2_Eeprom_WriteByte 364E           __size_ofi2___awmod 0070               __CFG_PBADEN$ON 000000  
              i2printf@width 001E             __end_ofi2_printf 25C8           __size_ofi2___lwdiv 0052  
         __size_ofi2___lwmod 0042               show_log@AA_num 00A8              __initialization 326C  
         __size_ofi2_lcdInst 000C                 __end_of_main 0D54                 __end_of_keys FD98  
        next_address@address 0080                   i2printf@ap 0018          ?i2_Eeprom_WriteByte 0001  
               logPC@numberC 0118           __size_ofi2_isdigit 001E                 logPC@runTime 0113  
                     ??_main 00BD                __activetblptr 000002            ?_I2C_Master_Start 0001  
          ?_I2C_Master_Write 0081            show_log@Drain_num 00AE               show_log@minute 00B6  
             show_log@second 00B7         __size_of_getHundreds 003C           ??_I2C_Master_Start 0081  
                     _ADCON0 000FC2                       _ADCON1 000FC1           ??_I2C_Master_Write 0083  
                     _ADCON2 000FC0                       ?_logPC 0001                       _EEADRH 000FAA  
                     _EEDATA 000FA8         ??i2_Eeprom_WriteByte 0004                       _EECON2 000FA7  
           ___awdiv@dividend 0080              i2lcdNibble@data 0002                       ?_putch 0001  
            i2lcdNibble@temp 0001                       _INT1IE 007F83                       _INT1IF 007F80  
                     _CVRCON 000FB5                       i2l1120 343C                       i2l1130 3516  
                     i2l6001 2B2E                       i2l6011 2B4C                       i2l6005 2B38  
                     i2l6013 2B4E                       i2l4511 2450                       i2l5231 2E2E  
                     i2l4513 2460                       i2l4441 22D6                       i2l5241 2E52  
                     i2l4531 24BC                       i2l4523 249E                       i2l4443 22E4  
                     i2l5235 2E36                       i2l5251 2E86                       i2l4525 24A6  
                     i2l4461 2376                       i2l4453 2318                       i2l4437 22C6  
                     i2l4287 36BA                       i2l3911 36F6                       i2l4551 254A  
                     i2l4543 24EE                       i2l4519 247A                       i2l4447 22EA  
                     i2l3831 3114                       i2l4367 27DA                       i2l5247 2E76  
                     i2l3921 340A                       i2l4561 25A6                       i2l4537 24D2  
                     i2l4481 23F0                       i2l4465 237A                       i2l4369 27EA  
                     i2l5273 2EDE                       i2l5265 2EBE                       i2l5257 2E9C  
                     i2l3923 3412                       i2l4539 24DA                       i2l4547 2500  
                     i2l4483 23F4                       i2l4563 25AE                       i2l3843 313A  
                     i2l5267 2EC4                       i2l3933 3432                       i2l3925 3416  
                     i2l3941 34EC                       i2l4549 2506                       i2l4557 2590  
                     i2l4477 23D6                       i2l3845 3142                       i2l3837 3124  
              keypressed@key 0022                       i2l3943 34F4                       i2l4559 25A0  
                     i2l4495 2420                       i2l3863 317A                       i2l3855 3162  
                     i2l3847 3146                       i2l3945 34F8                       i2l4497 2424  
                     i2l3859 316C                       i2l3891 324A                       i2l3883 322A  
                     i2l3875 3210                       i2l3949 350C                       i2l3885 3232  
                     i2l3887 3236                       i2l3895 3254                       i2l3879 321C  
                     i2l3899 3262                       i2l5923 2A3C                       i2l5915 2A24  
                     i2l5941 2A76                       i2l5933 2A5C                       i2l5909 2A0E  
                     i2l5927 2A48                       i2l5919 2A30                       i2l5935 2A5E  
                     i2l5855 292A                       i2l5953 2A98                       i2l5945 2A82  
                     i2l5961 2AAE                       i2l5971 2AD0                       i2l5883 29B0  
                     i2l5891 29CA                       i2l5949 2A8E                       i2l5885 29B6  
                     i2l5877 2998                       i2l5975 2ADC                       i2l5967 2AC4  
                     i2l5959 2AAC                       i2l5993 2B16                       i2l5985 2AFC  
                     i2l5889 29C4                       i2l5979 2AE8                       i2l5987 2AFE  
                     i2l5997 2B22                       _TMR0IE 007F95                       _TMR0IF 007F92  
                  ??i2_putch 0003                       _TMR1IE 007CE8                       _TMR1IF 007CF0  
                     _TMR2IE 007CE9                       _TMR2IF 007CF1                       _TMR2ON 007E52  
                     _SSPADD 000FC8                       _TRISC3 007CA3                       _TRISC4 007CA4  
                     _SSPBUF 000FC9               _turn1BackRight 00D9               __CFG_XINST$OFF 000000  
              _stopOperation 1FA2               _turn2BackRight 00DD                       ___wmul 3598  
                  ??___awdiv 0084               __CFG_STVREN$ON 000000                    ??___awmod 0084  
   i2Eeprom_ReadByte@address 0001                    ??___lldiv 0088                    ??___lwdiv 0084  
                  ??___lwmod 008B                       _countC 00E1                       clear_0 32B2  
                     clear_1 32BE             ___awdiv@quotient 0086              ___awmod@divisor 0082  
                  ??_getChar 0090              ___awmod@counter 0084                    ??_lcdInst 0082  
                     _printf 18B2                    ??_getOnes 008E                    ??_getTens 0089  
                     logPC@i 0120               i2___awdiv@sign 0006                    ??_readADC 0080  
                  ??_initLCD 0083     __size_ofi2_stopOperation 02FA             __end_of_wait_2ms 3718  
               __pdataCOMRAM 0035                    ??_isdigit 0080            __end_ofi2___awdiv 3184  
          __end_ofi2___awmod 326C            __end_ofi2___lwdiv 3446                 __mediumconst FC9E  
          __end_ofi2___lwmod 3520             __end_of_show_log 1FA2                       tblptrh 000FF7  
    Eeprom_WriteByte@address 0080                       tblptrl 000FF6                       tblptru 000FF8  
              main@steps_802 00C6                main@steps_793 00C5               i2___awmod@sign 0006  
          __end_ofi2_lcdInst 3802            __end_ofi2_isdigit 36FE                   __accesstop 0080  
    __end_of__initialization 32C4                ___rparam_used 000001               ?_stopOperation 0001  
         i2___lwmod@dividend 0008               __pcstackCOMRAM 0001                 __pidataBANK0 37CE  
              __end_of_logPC 18B2                __end_of_putch 37BE            ?_Eeprom_WriteByte 0080  
                i2printf@idx 0017                  i2printf@val 001B           testBatteries@volt1 0083  
         testBatteries@volt2 0087           testBatteries@volt3 0085           testBatteries@volt4 0089  
         testBatteries@volt5 008B                logPC@numberAA 0116                logPC@number9V 011A  
         ??_Eeprom_WriteByte 0083                    ?i2___wmul 0001           __size_of_lcdNibble 0060  
                i2putch@data 0003                  keypressed@i 0024                  ISR@keypress 0034  
           logPC@numberDrain 011C                    ?i2_printf 000D          show_log@log_address 00A2  
           logPC@numberTotal 011E                      ??_logPC 0090                      ??_putch 0082  
                 __pbssBANK0 00C8                ?_next_address 0080              show_log@address 00BB  
      __end_of_testBatteries 2DD4                 ?i2_lcdNibble 0001                      ?___wmul 0080  
                    ?_printf 008C                   ??i2___wmul 0005               keypressed@left 0023  
                    _CHeader FD68                   ??i2_printf 0013             ??i2_next_address 0003  
       show_log@elapsed_time 00B0                      _SSPCON1 000FC6                      _SSPCON2 000FC5  
          ??i2_stopOperation 0009                      _SSPSTAT 000FC7            show_log@total_num 00A6  
             ??_next_address 0082                      i2_putch 37EA                   _countDrain 00E2  
            ??_stopOperation 0088  __size_ofi2_I2C_Master_Start 0008            __end_of_lcdNibble 3394  
__size_ofi2_I2C_Master_Write 000A                      __Hparam 0000                      __Lparam 0000  
                 _lastRunRTC 00C8                    ?_wait_2ms 0080         Eeprom_WriteByte@data 0082  
                  ?_show_log 00A2                      ___awdiv 2EE4                      ___awmod 305E  
                    ___lldiv 2FA2              __size_of___wmul 0036                      ___lwdiv 3184  
                    ___lwmod 32D2                    _CMCONbits 000FB4                      __pcinit 326C  
                 _plat1Right 00D1                      _getChar 3816                      __ramtop 1000  
                 _plat2Right 00D5                      _lcdInst 37BE                      _getOnes 36C0  
                    __ptext0 0012                      __ptext1 36FE                      __ptext2 2BB4  
                    __ptext3 3718                      _getTens 3520                      __ptext4 1FA2  
                    __ptext5 305E                      __ptext6 2EE4                      __ptext7 3626  
                    __ptext8 1C66                      __ptext9 18B2              __size_of_printf 03B4  
                  _T0CONbits 000FD5                      _countAA 00E0                      _count9V 00DF  
                    _readADC 3718                      _initLCD 3494                 __size_of_ISR 2BAC  
          __end_of_hexpowers FDAA                    _T1CONbits 000FCD                      _dpowers FD98  
                  _T2CONbits 000FCA                      _isdigit 35FC                      _opTimer 0051  
           ___awmod@dividend 0080                      _numBats 00E8                   _keypressed 2DD4  
   __size_of_I2C_Master_Init 0060     __size_of_I2C_Master_Read 002E     __size_of_I2C_Master_Wait 0014  
   __size_of_I2C_Master_Stop 0008                      _sorting 0053               __pintcode_body 28C2  
       end_of_initialization 32C4                   getChar@num 008E                __Lmediumconst FC9E  
                    int_func 28C2          i2___wmul@multiplier 0001                   _screenMode 00FA  
   __size_of_Eeprom_ReadByte 0018    __size_of_I2C_Master_Start 0008    __size_of_I2C_Master_Write 000A  
            ___lldiv@divisor 0084                   _timeHeader FD48              ___lldiv@counter 008C  
                 ??_wait_2ms 0082                      printf@c 00A1                      printf@f 008C  
           I2C_Master_Init@c 008D             I2C_Master_Read@a 0081                      postdec1 000FE5  
                    postdec2 000FDD                   _solOnTimer 0052                   ??_show_log 00A5  
                    postinc0 000FEE                      postinc2 000FDE                   getOnes@num 008C  
i2stopOperation@address_code 0009                   getTens@num 0087                ??_getHundreds 0089  
          i2_I2C_Master_Read 369A            i2_I2C_Master_Wait 379C            i2_I2C_Master_Stop 382E  
                  i2___awdiv 3100                    i2___awmod 31FC            i2___lwdiv@divisor 0003  
__size_ofi2_Eeprom_WriteByte 0026                    i2___lwdiv 33F4                   logPC@F3230 00F0  
                 logPC@F3242 00F6                   logPC@F3234 00F2                   logPC@F3250 00ED  
                 logPC@F3226 0035                   logPC@F3246 00F8                   logPC@F3238 00F4  
                  i2___lwmod 34DE            i2___lwdiv@counter 0007           ?i2_I2C_Master_Read 0001  
         ?i2_I2C_Master_Wait 0001           ?i2_I2C_Master_Stop 0001         stopOperation@address 0089  
                  i2_lcdInst 37F6                  show_log@day 00B4        __end_of_runTimeHeader FD08  
                printf@width 009F           i2___awdiv@dividend 0001                   logPC@i_960 0132  
                 logPC@i_952 012A                   logPC@i_944 0122                   logPC@i_961 0134  
                 logPC@i_953 012C                   logPC@i_945 0124                   logPC@i_964 0136  
                 logPC@i_956 012E                   logPC@i_948 0126                   logPC@i_965 0138  
                 logPC@i_957 0130                   logPC@i_949 0128                   logPC@i_968 013A  
        ??i2_I2C_Master_Read 0002                    i2_isdigit 36E0          ??i2_I2C_Master_Wait 0001  
        ??i2_I2C_Master_Stop 0002            i2_Eeprom_ReadByte 375E           ?i2_Eeprom_ReadByte 0001  
             __end_of___wmul 35CE         __size_ofi2_lcdNibble 004E                __pidataCOMRAM 3788  
       __end_of_next_address 375E                i2lcdInst@data 0003          ??i2_Eeprom_ReadByte 0003  
           i2___wmul@product 0005               __end_of_printf 1C66                 i2printf@flag 001D  
  __end_ofi2_I2C_Master_Read 36C0    __end_ofi2_I2C_Master_Wait 37AE                 i2printf@prec 001A  
        start_initialization 326C    __end_ofi2_I2C_Master_Stop 3836                  ?_keypressed 0021  
         i2___awdiv@quotient 0007                  __end_of_ISR 2BB4            __size_ofi2___wmul 0026  
                  i2printf@c 0020                    i2printf@f 000D        i2I2C_Master_Read@temp 0003  
                 ?i2___awdiv 0001                   ?i2___awmod 0001                   ?i2___lwdiv 0001  
                 ?i2___lwmod 0008    __size_of_Eeprom_WriteByte 0028          __end_of_getHundreds 3598  
          __size_ofi2_printf 030C            ??_I2C_Master_Init 0091            ??_I2C_Master_Read 0081  
          ??_I2C_Master_Wait 0080                   ?i2_lcdInst 0001            ??_I2C_Master_Stop 0081  
  __end_ofi2_Eeprom_ReadByte 3774                   ?i2_isdigit 0001          __end_of_drainHeader FCC4  
  i2Eeprom_WriteByte@address 0001             show_log@Nine_num 00AC                     ??___wmul 0084  
          ??_Eeprom_ReadByte 0082                  __pdataBANK0 00ED             __CFG_LPT1OSC$OFF 000000  
            i2_stopOperation 25C8                     ??_printf 0094                  __pbssCOMRAM 0048  
              __pcstackBANK0 0080                __pcstackBANK1 0100            i2___lwmod@divisor 000A  
         show_log@currScreen 00A4            i2___lwmod@counter 000C                 _isdigit$1231 0081  
                   ?i2_putch 0001               getHundreds@num 0087             _I2C_Master_Start 3826  
        i2I2C_Master_Write@d 0002             _I2C_Master_Write 3802             ___lwdiv@dividend 0080  
          __CFG_CCP2MX$PORTC 000000          __size_of_keypressed 0110                    __pintcode 0008  
              __pmediumconst FC9E                    _lcdNibble 3334                     ?___awdiv 0080  
                   ?___awmod 0080                     ?___lldiv 0080            __size_of_wait_2ms 001A  
                   ?___lwdiv 0080                     ?___lwmod 0087            __size_of_show_log 033C  
                  _doneTimer 00E3                     ?_getChar 008E                     ?_lcdInst 0001  
                   ?_getOnes 008C                     ?_getTens 0087                     ?_readADC 0001  
                   ?_initLCD 0001       __size_of_testBatteries 0220                    _count_2ms 004F  
                   ?_isdigit 0001   __size_ofi2_I2C_Master_Read 0026                  _getHundreds 355C  
 __size_ofi2_I2C_Master_Wait 0012   __size_ofi2_I2C_Master_Stop 0008                     _AAHeader FD08  
                  _hexpowers FDA2             ___lwdiv@quotient 0085                  ??i2___awdiv 0005  
             __size_of_logPC 0B5E                  ??i2___awmod 0005                    _plat1Left 00CF  
                  _plat2Left 00D3                  ??i2___lwdiv 0005                  ??i2___lwmod 000C  
        __end_of_nineVHeader FD48               __size_of_putch 0010                  _drainHeader FC9F  
 __end_ofi2_I2C_Master_Start 383E   __end_ofi2_I2C_Master_Write 3816                  ??i2_lcdInst 0003  
             ___wmul@product 0084   __size_ofi2_Eeprom_ReadByte 0016                     _LATAbits 000F89  
                   _LATBbits 000F8A                     _LATCbits 000F8B                     _LATDbits 000F8C  
                   _LATEbits 000F8D              keypressed@right 0021                  ??i2_isdigit 0001  
      __end_of_stopOperation 22BC                     _PIR2bits 000FA1                     i2u551_40 2A02  
                   i2u368_40 36B8                     i2u552_48 2A04                     i2u545_40 29AA  
                   i2u801_47 345E                     i2u802_47 3466                     i2u803_47 3486  
                   i2u804_47 348E                     i2u580_48 2B6A                     i2u579_40 2B68  
    __end_ofi2_stopOperation 28C2        __size_of_next_address 0016             __CFG_WDTPS$32768 000000  
                 ?_lcdNibble 0001            logPC@started_time 0100                    _startGear 00EC  
                 _ADCON0bits 000FC2                    main@i_821 00C3                    main@i_819 00C2  
                  main@i_771 00C1                    main@i_836 00C4            ___wmul@multiplier 0080  
                   i2___wmul 3674                lcdNibble@data 0081                   printf@flag 009E  
              lcdNibble@temp 0080                   printf@prec 009B            i2___awdiv@divisor 0003  
                  main@steps 00C7            i2___awdiv@counter 0005                     i2_printf 22BC  
        I2C_Master_Read@temp 0082                    copy_data0 3280                    copy_data1 32A0  
           _Eeprom_WriteByte 3626           i2___awmod@dividend 0001                 _next_address 3748  
           __size_ofi2_putch 000C                   _EECON1bits 000FA6                _testBatteries 2BB4  
                   __Hrparam 0000      __size_ofi2_next_address 000E                     __Lrparam 0000  
         __CFG_BOREN$SBORDIS 000000             __size_of___awdiv 00BE             __size_of___awmod 00A2  
      i2___wmul@multiplicand 0003             __size_of___lldiv 00BC             __size_of___lwdiv 0078  
           __size_of___lwmod 0062               readADC@channel 0080       Eeprom_ReadByte@address 0080  
         i2I2C_Master_Read@a 0002             __size_of_getChar 0008             __size_of_lcdInst 0010  
           __size_of_getOnes 0020             __size_of_getTens 003C              _I2C_Master_Init 3394  
           __size_of_readADC 0018              _I2C_Master_Read 35CE             __size_of_initLCD 004A  
                _nineVHeader FD28              _I2C_Master_Wait 3774              _I2C_Master_Stop 381E  
               ??_keypressed 0023             __size_of_isdigit 002A   __end_ofi2_Eeprom_WriteByte 3674  
            ___lwdiv@divisor 0082              ___lwdiv@counter 0084                     __ptext10 37AE  
                   __ptext11 35FC                     __ptext20 3184                     __ptext12 3598  
                   __ptext21 3816                     __ptext13 3748                     __ptext30 3394  
                   __ptext22 3802                     __ptext14 3730                     __ptext31 2FA2  
                   __ptext23 381E                     __ptext15 0D54                     __ptext40 22BC  
                   __ptext24 3826                     __ptext16 3520                     __ptext41 37EA  
                   __ptext33 2DD4                     __ptext25 3494                     __ptext17 36C0  
                   __ptext50 3836                     __ptext42 36E0                     __ptext34 25C8  
                   __ptext26 37BE                     __ptext18 32D2                     __ptext51 369A  
                   __ptext43 3674                     __ptext35 37DC                     __ptext27 3334  
                   __ptext19 355C                     __ptext52 379C                     __ptext44 34DE  
                   __ptext36 31FC                     __ptext28 35CE                     __ptext45 33F4  
                   __ptext37 3100                     __ptext29 3774                     __ptext46 37F6  
                   __ptext38 364E                     __ptext47 3446                     __ptext39 375E  
                   __ptext48 380C                     __ptext49 382E                     _doubleAA 00E4  
             i2_isdigit$1231 0002                __size_of_main 0D42                    wait_2ms@x 0080  
            _Eeprom_ReadByte 3730               ?_testBatteries 0001                     _realTime 0048  
                   _numDrain 00EA                     _wait_2ms 36FE             ?i2_stopOperation 0001  
              ??i2_lcdNibble 0001                  ??_lcdNibble 0080                     _show_log 1C66  
         __end_of_keypressed 2EE4                     int$flags 0056                    printf@idx 0098  
                  show_log@i 00B8                    printf@val 009C            i2___awmod@divisor 0003  
                  putch@data 0082            i2___awmod@counter 0005     __end_of_I2C_Master_Start 382E  
   __end_of_I2C_Master_Write 380C                   _INTCONbits 000FF2          __end_of_totalHeader FCE7  
                   isdigit@c 0082           __end_of_timeHeader FD68                     intlevel2 0000  
           ___lwmod@dividend 0087             ___lldiv@dividend 0080        i2next_address@address 0001  
                   printf@ap 0099      __end_of_I2C_Master_Init 33F4      __end_of_I2C_Master_Read 35FC  
    __end_of_I2C_Master_Wait 3788      __end_of_I2C_Master_Stop 3826                  lcdInst@data 0082  
        __end_ofi2_lcdNibble 3494             ___lldiv@quotient 0088            I2C_Master_Write@d 0081  
            ___lwmod@divisor 0089                 ?_getHundreds 0087              ___lwmod@counter 008B  
    __end_of_Eeprom_ReadByte 3748              ??_testBatteries 0081                _runTimeHeader FCE7  
             i2_next_address 37DC       i2Eeprom_WriteByte@data 0003  
