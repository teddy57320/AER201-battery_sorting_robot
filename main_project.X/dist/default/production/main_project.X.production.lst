

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Mon Feb 06 13:39:52 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    30                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    31                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    34                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    35                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    36  0000                     
    37                           ; Version 1.40
    38                           ; Generated 01/12/2016 GMT
    39                           ; 
    40                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    41                           ; All rights reserved.
    42                           ; 
    43                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    44                           ; 
    45                           ; Redistribution and use in source and binary forms, with or without modification, are
    46                           ; permitted provided that the following conditions are met:
    47                           ; 
    48                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    49                           ;        conditions and the following disclaimer.
    50                           ; 
    51                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    52                           ;        of conditions and the following disclaimer in the documentation and/or other
    53                           ;        materials provided with the distribution.
    54                           ; 
    55                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    56                           ;        software without specific prior written permission.
    57                           ; 
    58                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    59                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    60                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    61                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    62                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    63                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    64                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    65                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    66                           ; 
    67                           ; 
    68                           ; Code-generator required, PIC18F4620 Definitions
    69                           ; 
    70                           ; SFR Addresses
    71  0000                     
    72                           	psect	idataCOMRAM
    73  000B7E                     __pidataCOMRAM:
    74                           	opt stack 0
    75                           
    76                           ;initializer for _screenMode
    77  000B7E  02                 	db	2
    78                           
    79                           	psect	mediumconst
    80  00FE7A                     __pmediumconst:
    81                           	opt stack 0
    82  00FE7A  00                 	db	0
    83  00FE7B                     _keys:
    84                           	opt stack 0
    85  00FE7B  31                 	db	49
    86  00FE7C  32                 	db	50
    87  00FE7D  33                 	db	51
    88  00FE7E  41                 	db	65
    89  00FE7F  34                 	db	52
    90  00FE80  35                 	db	53
    91  00FE81  36                 	db	54
    92  00FE82  42                 	db	66
    93  00FE83  37                 	db	55
    94  00FE84  38                 	db	56
    95  00FE85  39                 	db	57
    96  00FE86  43                 	db	67
    97  00FE87  2A                 	db	42
    98  00FE88  30                 	db	48
    99  00FE89  23                 	db	35
   100  00FE8A  44                 	db	68
   101  00FE8B  00                 	db	0
   102  00FE8C                     __end_of_keys:
   103                           	opt stack 0
   104  00FE8C                     _dpowers:
   105                           	opt stack 0
   106  00FE8C  0001               	dw	1
   107  00FE8E  000A               	dw	10
   108  00FE90  0064               	dw	100
   109  00FE92  03E8               	dw	1000
   110  00FE94  2710               	dw	10000
   111  00FE96                     __end_of_dpowers:
   112                           	opt stack 0
   113  00FE96                     _hexpowers:
   114                           	opt stack 0
   115  00FE96  0001               	dw	1
   116  00FE98  0010               	dw	16
   117  00FE9A  0100               	dw	256
   118  00FE9C  1000               	dw	4096
   119  00FE9E                     __end_of_hexpowers:
   120                           	opt stack 0
   121  0000                     _TMR0	set	4054
   122  0000                     _ADCON0	set	4034
   123  0000                     _ADCON1	set	4033
   124  0000                     _INTCONbits	set	4082
   125  0000                     _LATB	set	3978
   126  0000                     _LATC	set	3979
   127  0000                     _LATD	set	3980
   128  0000                     _LATDbits	set	3980
   129  0000                     _PORTB	set	3969
   130  0000                     _SSPADD	set	4040
   131  0000                     _SSPBUF	set	4041
   132  0000                     _SSPCON1	set	4038
   133  0000                     _SSPCON2	set	4037
   134  0000                     _SSPSTAT	set	4039
   135  0000                     _T0CON	set	4053
   136  0000                     _T0CONbits	set	4053
   137  0000                     _TRISB	set	3987
   138  0000                     _TRISC	set	3988
   139  0000                     _TRISD	set	3989
   140  0000                     _ACKDT	set	32301
   141  0000                     _ACKEN	set	32300
   142  0000                     _GIE	set	32663
   143  0000                     _INT1IE	set	32643
   144  0000                     _INT1IF	set	32640
   145  0000                     _PEN	set	32298
   146  0000                     _RBIE	set	32659
   147  0000                     _RCEN	set	32299
   148  0000                     _SEN	set	32296
   149  0000                     _TMR0IE	set	32661
   150  0000                     _TMR0IF	set	32658
   151  0000                     _TRISC3	set	31907
   152  0000                     _TRISC4	set	31908
   153  00FE9E                     STR_9:
   154  00FE9E  25                 	db	37
   155  00FE9F  30                 	db	48	;'0'
   156  00FEA0  32                 	db	50	;'2'
   157  00FEA1  78                 	db	120	;'x'
   158  00FEA2  3A                 	db	58	;':'
   159  00FEA3  25                 	db	37
   160  00FEA4  30                 	db	48	;'0'
   161  00FEA5  32                 	db	50	;'2'
   162  00FEA6  78                 	db	120	;'x'
   163  00FEA7  20                 	db	32
   164  00FEA8  20                 	db	32
   165  00FEA9  20                 	db	32
   166  00FEAA  20                 	db	32
   167  00FEAB  20                 	db	32
   168  00FEAC  20                 	db	32
   169  00FEAD  20                 	db	32
   170  00FEAE  20                 	db	32
   171  00FEAF  20                 	db	32
   172  00FEB0  20                 	db	32
   173  00FEB1  20                 	db	32
   174  00FEB2  20                 	db	32
   175  00FEB3  20                 	db	32
   176  00FEB4  20                 	db	32
   177  00FEB5  20                 	db	32
   178  00FEB6  00                 	db	0
   179  00FEB7                     STR_18:
   180  00FEB7  44                 	db	68	;'D'
   181  00FEB8  41                 	db	65	;'A'
   182  00FEB9  54                 	db	84	;'T'
   183  00FEBA  45                 	db	69	;'E'
   184  00FEBB  3A                 	db	58	;':'
   185  00FEBC  20                 	db	32
   186  00FEBD  25                 	db	37
   187  00FEBE  30                 	db	48	;'0'
   188  00FEBF  32                 	db	50	;'2'
   189  00FEC0  78                 	db	120	;'x'
   190  00FEC1  2F                 	db	47
   191  00FEC2  25                 	db	37
   192  00FEC3  30                 	db	48	;'0'
   193  00FEC4  32                 	db	50	;'2'
   194  00FEC5  78                 	db	120	;'x'
   195  00FEC6  2F                 	db	47
   196  00FEC7  25                 	db	37
   197  00FEC8  30                 	db	48	;'0'
   198  00FEC9  32                 	db	50	;'2'
   199  00FECA  78                 	db	120	;'x'
   200  00FECB  20                 	db	32
   201  00FECC  20                 	db	32
   202  00FECD  00                 	db	0
   203  00FECE                     STR_19:
   204  00FECE  54                 	db	84	;'T'
   205  00FECF  49                 	db	73	;'I'
   206  00FED0  4D                 	db	77	;'M'
   207  00FED1  45                 	db	69	;'E'
   208  00FED2  3A                 	db	58	;':'
   209  00FED3  20                 	db	32
   210  00FED4  25                 	db	37
   211  00FED5  30                 	db	48	;'0'
   212  00FED6  32                 	db	50	;'2'
   213  00FED7  78                 	db	120	;'x'
   214  00FED8  3A                 	db	58	;':'
   215  00FED9  25                 	db	37
   216  00FEDA  30                 	db	48	;'0'
   217  00FEDB  32                 	db	50	;'2'
   218  00FEDC  78                 	db	120	;'x'
   219  00FEDD  3A                 	db	58	;':'
   220  00FEDE  25                 	db	37
   221  00FEDF  30                 	db	48	;'0'
   222  00FEE0  32                 	db	50	;'2'
   223  00FEE1  78                 	db	120	;'x'
   224  00FEE2  20                 	db	32
   225  00FEE3  20                 	db	32
   226  00FEE4  00                 	db	0
   227  00FEE5                     STR_15:
   228  00FEE5  42                 	db	66	;'B'
   229  00FEE6  41                 	db	65	;'A'
   230  00FEE7  54                 	db	84	;'T'
   231  00FEE8  54                 	db	84	;'T'
   232  00FEE9  45                 	db	69	;'E'
   233  00FEEA  52                 	db	82	;'R'
   234  00FEEB  49                 	db	73	;'I'
   235  00FEEC  45                 	db	69	;'E'
   236  00FEED  53                 	db	83	;'S'
   237  00FEEE  3A                 	db	58	;':'
   238  00FEEF  20                 	db	32
   239  00FEF0  25                 	db	37
   240  00FEF1  30                 	db	48	;'0'
   241  00FEF2  32                 	db	50	;'2'
   242  00FEF3  64                 	db	100	;'d'
   243  00FEF4  20                 	db	32
   244  00FEF5  20                 	db	32
   245  00FEF6  20                 	db	32
   246  00FEF7  20                 	db	32
   247  00FEF8  20                 	db	32
   248  00FEF9  00                 	db	0
   249  00FEFA                     STR_17:
   250  00FEFA  42                 	db	66	;'B'
   251  00FEFB  41                 	db	65	;'A'
   252  00FEFC  54                 	db	84	;'T'
   253  00FEFD  54                 	db	84	;'T'
   254  00FEFE  45                 	db	69	;'E'
   255  00FEFF  52                 	db	82	;'R'
   256  00FF00  49                 	db	73	;'I'
   257  00FF01  45                 	db	69	;'E'
   258  00FF02  53                 	db	83	;'S'
   259  00FF03  3A                 	db	58	;':'
   260  00FF04  20                 	db	32
   261  00FF05  25                 	db	37
   262  00FF06  30                 	db	48	;'0'
   263  00FF07  32                 	db	50	;'2'
   264  00FF08  78                 	db	120	;'x'
   265  00FF09  20                 	db	32
   266  00FF0A  20                 	db	32
   267  00FF0B  20                 	db	32
   268  00FF0C  20                 	db	32
   269  00FF0D  20                 	db	32
   270  00FF0E  00                 	db	0
   271  00FF0F                     STR_11:
   272  00FF0F  42                 	db	66	;'B'
   273  00FF10  41                 	db	65	;'A'
   274  00FF11  54                 	db	84	;'T'
   275  00FF12  54                 	db	84	;'T'
   276  00FF13  45                 	db	69	;'E'
   277  00FF14  52                 	db	82	;'R'
   278  00FF15  49                 	db	73	;'I'
   279  00FF16  45                 	db	69	;'E'
   280  00FF17  53                 	db	83	;'S'
   281  00FF18  3A                 	db	58	;':'
   282  00FF19  20                 	db	32
   283  00FF1A  25                 	db	37
   284  00FF1B  30                 	db	48	;'0'
   285  00FF1C  32                 	db	50	;'2'
   286  00FF1D  64                 	db	100	;'d'
   287  00FF1E  20                 	db	32
   288  00FF1F  20                 	db	32
   289  00FF20  20                 	db	32
   290  00FF21  00                 	db	0
   291  00FF22                     STR_20:
   292  00FF22  30                 	db	48	;'0'
   293  00FF23  31                 	db	49	;'1'
   294  00FF24  32                 	db	50	;'2'
   295  00FF25  33                 	db	51	;'3'
   296  00FF26  34                 	db	52	;'4'
   297  00FF27  35                 	db	53	;'5'
   298  00FF28  36                 	db	54	;'6'
   299  00FF29  37                 	db	55	;'7'
   300  00FF2A  38                 	db	56	;'8'
   301  00FF2B  39                 	db	57	;'9'
   302  00FF2C  61                 	db	97	;'a'
   303  00FF2D  62                 	db	98	;'b'
   304  00FF2E  63                 	db	99	;'c'
   305  00FF2F  64                 	db	100	;'d'
   306  00FF30  65                 	db	101	;'e'
   307  00FF31  66                 	db	102	;'f'
   308  00FF32  00                 	db	0
   309  00FF33                     STR_5:
   310  00FF33  20                 	db	32
   311  00FF34  20                 	db	32
   312  00FF35  20                 	db	32
   313  00FF36  20                 	db	32
   314  00FF37  20                 	db	32
   315  00FF38  20                 	db	32
   316  00FF39  20                 	db	32
   317  00FF3A  20                 	db	32
   318  00FF3B  20                 	db	32
   319  00FF3C  20                 	db	32
   320  00FF3D  20                 	db	32
   321  00FF3E  20                 	db	32
   322  00FF3F  20                 	db	32
   323  00FF40  20                 	db	32
   324  00FF41  20                 	db	32
   325  00FF42  20                 	db	32
   326  00FF43  00                 	db	0
   327  00FF44                     STR_4:
   328  00FF44  52                 	db	82	;'R'
   329  00FF45  55                 	db	85	;'U'
   330  00FF46  4E                 	db	78	;'N'
   331  00FF47  4E                 	db	78	;'N'
   332  00FF48  49                 	db	73	;'I'
   333  00FF49  4E                 	db	78	;'N'
   334  00FF4A  47                 	db	71	;'G'
   335  00FF4B  2E                 	db	46
   336  00FF4C  2E                 	db	46
   337  00FF4D  2E                 	db	46
   338  00FF4E  20                 	db	32
   339  00FF4F  20                 	db	32
   340  00FF50  20                 	db	32
   341  00FF51  20                 	db	32
   342  00FF52  20                 	db	32
   343  00FF53  20                 	db	32
   344  00FF54  00                 	db	0
   345  00FF55                     STR_12:
   346  00FF55  4E                 	db	78	;'N'
   347  00FF56  55                 	db	85	;'U'
   348  00FF57  4D                 	db	77	;'M'
   349  00FF58  42                 	db	66	;'B'
   350  00FF59  45                 	db	69	;'E'
   351  00FF5A  52                 	db	82	;'R'
   352  00FF5B  20                 	db	32
   353  00FF5C  4F                 	db	79	;'O'
   354  00FF5D  46                 	db	70	;'F'
   355  00FF5E  20                 	db	32
   356  00FF5F  43                 	db	67	;'C'
   357  00FF60  20                 	db	32
   358  00FF61  20                 	db	32
   359  00FF62  20                 	db	32
   360  00FF63  20                 	db	32
   361  00FF64  20                 	db	32
   362  00FF65  00                 	db	0
   363  00FF66                     STR_7:
   364  00FF66  54                 	db	84	;'T'
   365  00FF67  4F                 	db	79	;'O'
   366  00FF68  20                 	db	32
   367  00FF69  43                 	db	67	;'C'
   368  00FF6A  4F                 	db	79	;'O'
   369  00FF6B  4E                 	db	78	;'N'
   370  00FF6C  54                 	db	84	;'T'
   371  00FF6D  49                 	db	73	;'I'
   372  00FF6E  4E                 	db	78	;'N'
   373  00FF6F  55                 	db	85	;'U'
   374  00FF70  45                 	db	69	;'E'
   375  00FF71  20                 	db	32
   376  00FF72  20                 	db	32
   377  00FF73  20                 	db	32
   378  00FF74  20                 	db	32
   379  00FF75  20                 	db	32
   380  00FF76  00                 	db	0
   381  00FF77                     STR_16:
   382  00FF77  4E                 	db	78	;'N'
   383  00FF78  55                 	db	85	;'U'
   384  00FF79  4D                 	db	77	;'M'
   385  00FF7A  42                 	db	66	;'B'
   386  00FF7B  45                 	db	69	;'E'
   387  00FF7C  52                 	db	82	;'R'
   388  00FF7D  20                 	db	32
   389  00FF7E  4F                 	db	79	;'O'
   390  00FF7F  46                 	db	70	;'F'
   391  00FF80  20                 	db	32
   392  00FF81  41                 	db	65	;'A'
   393  00FF82  41                 	db	65	;'A'
   394  00FF83  20                 	db	32
   395  00FF84  20                 	db	32
   396  00FF85  20                 	db	32
   397  00FF86  20                 	db	32
   398  00FF87  00                 	db	0
   399  00FF88                     STR_14:
   400  00FF88  4E                 	db	78	;'N'
   401  00FF89  55                 	db	85	;'U'
   402  00FF8A  4D                 	db	77	;'M'
   403  00FF8B  42                 	db	66	;'B'
   404  00FF8C  45                 	db	69	;'E'
   405  00FF8D  52                 	db	82	;'R'
   406  00FF8E  20                 	db	32
   407  00FF8F  4F                 	db	79	;'O'
   408  00FF90  46                 	db	70	;'F'
   409  00FF91  20                 	db	32
   410  00FF92  39                 	db	57	;'9'
   411  00FF93  56                 	db	86	;'V'
   412  00FF94  20                 	db	32
   413  00FF95  20                 	db	32
   414  00FF96  20                 	db	32
   415  00FF97  20                 	db	32
   416  00FF98  00                 	db	0
   417  00FF99                     STR_6:
   418  00FF99  44                 	db	68	;'D'
   419  00FF9A  4F                 	db	79	;'O'
   420  00FF9B  4E                 	db	78	;'N'
   421  00FF9C  45                 	db	69	;'E'
   422  00FF9D  21                 	db	33
   423  00FF9E  20                 	db	32
   424  00FF9F  50                 	db	80	;'P'
   425  00FFA0  52                 	db	82	;'R'
   426  00FFA1  45                 	db	69	;'E'
   427  00FFA2  53                 	db	83	;'S'
   428  00FFA3  53                 	db	83	;'S'
   429  00FFA4  20                 	db	32
   430  00FFA5  2A                 	db	42
   431  00FFA6  20                 	db	32
   432  00FFA7  20                 	db	32
   433  00FFA8  20                 	db	32
   434  00FFA9  00                 	db	0
   435  00FFAA                     STR_8:
   436  00FFAA  54                 	db	84	;'T'
   437  00FFAB  4F                 	db	79	;'O'
   438  00FFAC  54                 	db	84	;'T'
   439  00FFAD  41                 	db	65	;'A'
   440  00FFAE  4C                 	db	76	;'L'
   441  00FFAF  20                 	db	32
   442  00FFB0  52                 	db	82	;'R'
   443  00FFB1  55                 	db	85	;'U'
   444  00FFB2  4E                 	db	78	;'N'
   445  00FFB3  20                 	db	32
   446  00FFB4  54                 	db	84	;'T'
   447  00FFB5  49                 	db	73	;'I'
   448  00FFB6  4D                 	db	77	;'M'
   449  00FFB7  45                 	db	69	;'E'
   450  00FFB8  3A                 	db	58	;':'
   451  00FFB9  20                 	db	32
   452  00FFBA  00                 	db	0
   453  00FFBB                     STR_3:
   454  00FFBB  20                 	db	32
   455  00FFBC  3C                 	db	60	;'<'
   456  00FFBD  34                 	db	52	;'4'
   457  00FFBE  20                 	db	32
   458  00FFBF  20                 	db	32
   459  00FFC0  20                 	db	32
   460  00FFC1  44                 	db	68	;'D'
   461  00FFC2  41                 	db	65	;'A'
   462  00FFC3  54                 	db	84	;'T'
   463  00FFC4  41                 	db	65	;'A'
   464  00FFC5  20                 	db	32
   465  00FFC6  20                 	db	32
   466  00FFC7  20                 	db	32
   467  00FFC8  36                 	db	54	;'6'
   468  00FFC9  3E                 	db	62	;'>'
   469  00FFCA  20                 	db	32
   470  00FFCB  00                 	db	0
   471  00FFCC                     STR_10:
   472  00FFCC  54                 	db	84	;'T'
   473  00FFCD  4F                 	db	79	;'O'
   474  00FFCE  54                 	db	84	;'T'
   475  00FFCF  41                 	db	65	;'A'
   476  00FFD0  4C                 	db	76	;'L'
   477  00FFD1  20                 	db	32
   478  00FFD2  4E                 	db	78	;'N'
   479  00FFD3  55                 	db	85	;'U'
   480  00FFD4  4D                 	db	77	;'M'
   481  00FFD5  42                 	db	66	;'B'
   482  00FFD6  45                 	db	69	;'E'
   483  00FFD7  52                 	db	82	;'R'
   484  00FFD8  20                 	db	32
   485  00FFD9  4F                 	db	79	;'O'
   486  00FFDA  46                 	db	70	;'F'
   487  00FFDB  20                 	db	32
   488  00FFDC  00                 	db	0
   489  00FFDD                     STR_1:
   490  00FFDD  53                 	db	83	;'S'
   491  00FFDE  54                 	db	84	;'T'
   492  00FFDF  41                 	db	65	;'A'
   493  00FFE0  52                 	db	82	;'R'
   494  00FFE1  54                 	db	84	;'T'
   495  00FFE2  3A                 	db	58	;':'
   496  00FFE3  20                 	db	32
   497  00FFE4  20                 	db	32
   498  00FFE5  20                 	db	32
   499  00FFE6  50                 	db	80	;'P'
   500  00FFE7  52                 	db	82	;'R'
   501  00FFE8  45                 	db	69	;'E'
   502  00FFE9  53                 	db	83	;'S'
   503  00FFEA  53                 	db	83	;'S'
   504  00FFEB  20                 	db	32
   505  00FFEC  2A                 	db	42
   506  00FFED  00                 	db	0
   507  00FFEE                     STR_2:
   508  00FFEE  3C                 	db	60	;'<'
   509  00FFEF  20                 	db	32
   510  00FFF0  34                 	db	52	;'4'
   511  00FFF1  20                 	db	32
   512  00FFF2  20                 	db	32
   513  00FFF3  20                 	db	32
   514  00FFF4  44                 	db	68	;'D'
   515  00FFF5  41                 	db	65	;'A'
   516  00FFF6  54                 	db	84	;'T'
   517  00FFF7  41                 	db	65	;'A'
   518  00FFF8  20                 	db	32
   519  00FFF9  20                 	db	32
   520  00FFFA  20                 	db	32
   521  00FFFB  36                 	db	54	;'6'
   522  00FFFC  20                 	db	32
   523  00FFFD  3E                 	db	62	;'>'
   524  00FFFE  00                 	db	0
   525  0000                     
   526                           ; #config settings
   527  00FFFF  00                 	db	0	; dummy byte at the end
   528  0000                     
   529                           	psect	cinit
   530  000AA4                     __pcinit:
   531                           	opt stack 0
   532  000AA4                     start_initialization:
   533                           	opt stack 0
   534  000AA4                     __initialization:
   535                           	opt stack 0
   536                           
   537                           ; Initialize objects allocated to COMRAM (1 bytes)
   538                           ; load TBLPTR registers with __pidataCOMRAM
   539  000AA4  0E7E               	movlw	low __pidataCOMRAM
   540  000AA6  6EF6               	movwf	tblptrl,c
   541  000AA8  0E0B               	movlw	high __pidataCOMRAM
   542  000AAA  6EF7               	movwf	tblptrh,c
   543  000AAC  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   544  000AAE  6EF8               	movwf	tblptru,c
   545  000AB0  0009               	tblrd		*+	;fetch initializer
   546  000AB2  CFF5 F058          	movff	tablat,__pdataCOMRAM
   547                           
   548                           ; Clear objects allocated to COMRAM (24 bytes)
   549  000AB6  EE00  F040         	lfsr	0,__pbssCOMRAM
   550  000ABA  0E18               	movlw	24
   551  000ABC                     clear_0:
   552  000ABC  6AEE               	clrf	postinc0,c
   553  000ABE  06E8               	decf	wreg,f,c
   554  000AC0  E1FD               	bnz	clear_0
   555  000AC2                     end_of_initialization:
   556                           	opt stack 0
   557  000AC2                     __end_of__initialization:
   558                           	opt stack 0
   559  000AC2  9059               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   560  000AC4  9259               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   561  000AC6  0E00               	movlw	low (__Lmediumconst shr (0+16))
   562  000AC8  6EF8               	movwf	tblptru,c
   563  000ACA  0100               	movlb	0
   564  000ACC  EF19  F002         	goto	_main	;jump to C main() function
   565                           tblptru	equ	0xFF8
   566                           tblptrh	equ	0xFF7
   567                           tblptrl	equ	0xFF6
   568                           tablat	equ	0xFF5
   569                           postinc0	equ	0xFEE
   570                           wreg	equ	0xFE8
   571                           
   572                           	psect	bssCOMRAM
   573  000040                     __pbssCOMRAM:
   574                           	opt stack 0
   575  000040                     _time:
   576                           	opt stack 0
   577  000040                     	ds	7
   578  000047                     _doneTimer:
   579                           	opt stack 0
   580  000047                     	ds	2
   581  000049                     _opTimer:
   582                           	opt stack 0
   583  000049                     	ds	2
   584  00004B                     _solOffTimer:
   585                           	opt stack 0
   586  00004B                     	ds	2
   587  00004D                     _solOnTimer:
   588                           	opt stack 0
   589  00004D                     	ds	2
   590  00004F                     _count9V:
   591                           	opt stack 0
   592  00004F                     	ds	1
   593  000050                     _countAA:
   594                           	opt stack 0
   595  000050                     	ds	1
   596  000051                     _countC:
   597                           	opt stack 0
   598  000051                     	ds	1
   599  000052                     _min:
   600                           	opt stack 0
   601  000052                     	ds	1
   602  000053                     _num9V:
   603                           	opt stack 0
   604  000053                     	ds	1
   605  000054                     _numAA:
   606                           	opt stack 0
   607  000054                     	ds	1
   608  000055                     _numBats:
   609                           	opt stack 0
   610  000055                     	ds	1
   611  000056                     _numC:
   612                           	opt stack 0
   613  000056                     	ds	1
   614  000057                     _sec:
   615                           	opt stack 0
   616  000057                     	ds	1
   617                           tblptru	equ	0xFF8
   618                           tblptrh	equ	0xFF7
   619                           tblptrl	equ	0xFF6
   620                           tablat	equ	0xFF5
   621                           postinc0	equ	0xFEE
   622                           wreg	equ	0xFE8
   623                           
   624                           	psect	dataCOMRAM
   625  000058                     __pdataCOMRAM:
   626                           	opt stack 0
   627  000058                     _screenMode:
   628                           	opt stack 0
   629  000058                     	ds	1
   630                           tblptru	equ	0xFF8
   631                           tblptrh	equ	0xFF7
   632                           tblptrl	equ	0xFF6
   633                           tablat	equ	0xFF5
   634                           postinc0	equ	0xFEE
   635                           wreg	equ	0xFE8
   636                           
   637                           	psect	cstackBANK0
   638  000080                     __pcstackBANK0:
   639                           	opt stack 0
   640  000080                     printf@idx:
   641                           	opt stack 0
   642                           
   643                           ; 1 bytes @ 0x0
   644  000080                     	ds	1
   645  000081                     printf@ap:
   646                           	opt stack 0
   647                           
   648                           ; 2 bytes @ 0x1
   649  000081                     	ds	2
   650  000083                     printf@prec:
   651                           	opt stack 0
   652                           
   653                           ; 1 bytes @ 0x3
   654  000083                     	ds	1
   655  000084                     printf@val:
   656                           	opt stack 0
   657                           
   658                           ; 2 bytes @ 0x4
   659  000084                     	ds	2
   660  000086                     printf@flag:
   661                           	opt stack 0
   662                           
   663                           ; 1 bytes @ 0x6
   664  000086                     	ds	1
   665  000087                     printf@width:
   666                           	opt stack 0
   667                           
   668                           ; 2 bytes @ 0x7
   669  000087                     	ds	2
   670  000089                     printf@c:
   671                           	opt stack 0
   672                           
   673                           ; 1 bytes @ 0x9
   674  000089                     	ds	1
   675                           tblptru	equ	0xFF8
   676                           tblptrh	equ	0xFF7
   677                           tblptrl	equ	0xFF6
   678                           tablat	equ	0xFF5
   679                           postinc0	equ	0xFEE
   680                           wreg	equ	0xFE8
   681                           
   682                           	psect	cstackCOMRAM
   683  000001                     __pcstackCOMRAM:
   684                           	opt stack 0
   685  000001                     switchMenu@right:
   686                           	opt stack 0
   687                           
   688                           ; 1 bytes @ 0x0
   689  000001                     	ds	1
   690  000002                     switchMenu@key:
   691                           	opt stack 0
   692                           
   693                           ; 1 bytes @ 0x1
   694  000002                     	ds	1
   695  000003                     switchMenu@left:
   696                           	opt stack 0
   697                           
   698                           ; 1 bytes @ 0x2
   699  000003                     	ds	1
   700  000004                     ??_highISR:
   701                           
   702                           ; 1 bytes @ 0x3
   703  000004                     	ds	14
   704  000012                     _highISR$292:
   705                           	opt stack 0
   706                           
   707                           ; 1 bytes @ 0x11
   708  000012                     	ds	1
   709  000013                     highISR@keypress:
   710                           	opt stack 0
   711                           
   712                           ; 1 bytes @ 0x12
   713  000013                     	ds	1
   714  000014                     ??_lowISR:
   715                           
   716                           ; 1 bytes @ 0x13
   717  000014                     	ds	17
   718  000025                     ??_isdigit:
   719  000025                     ??_I2C_Master_Wait:
   720  000025                     ?___wmul:
   721                           	opt stack 0
   722  000025                     ?___lwdiv:
   723                           	opt stack 0
   724  000025                     ?___lldiv:
   725                           	opt stack 0
   726  000025                     lcdNibble@temp:
   727                           	opt stack 0
   728  000025                     ___wmul@multiplier:
   729                           	opt stack 0
   730  000025                     ___lwdiv@dividend:
   731                           	opt stack 0
   732  000025                     ___lldiv@dividend:
   733                           	opt stack 0
   734                           
   735                           ; 4 bytes @ 0x24
   736  000025                     	ds	1
   737  000026                     I2C_Master_Read@a:
   738                           	opt stack 0
   739  000026                     lcdNibble@data:
   740                           	opt stack 0
   741  000026                     _isdigit$544:
   742                           	opt stack 0
   743  000026                     I2C_Master_Write@d:
   744                           	opt stack 0
   745                           
   746                           ; 2 bytes @ 0x25
   747  000026                     	ds	1
   748  000027                     I2C_Master_Read@temp:
   749                           	opt stack 0
   750  000027                     lcdInst@data:
   751                           	opt stack 0
   752  000027                     putch@data:
   753                           	opt stack 0
   754  000027                     isdigit@c:
   755                           	opt stack 0
   756  000027                     ___wmul@multiplicand:
   757                           	opt stack 0
   758  000027                     ___lwdiv@divisor:
   759                           	opt stack 0
   760                           
   761                           ; 2 bytes @ 0x26
   762  000027                     	ds	1
   763  000028                     ??_initLCD:
   764                           
   765                           ; 1 bytes @ 0x27
   766  000028                     	ds	1
   767  000029                     ___lwdiv@counter:
   768                           	opt stack 0
   769  000029                     ___wmul@product:
   770                           	opt stack 0
   771  000029                     ___lldiv@divisor:
   772                           	opt stack 0
   773                           
   774                           ; 4 bytes @ 0x28
   775  000029                     	ds	1
   776  00002A                     ___lwdiv@quotient:
   777                           	opt stack 0
   778                           
   779                           ; 2 bytes @ 0x29
   780  00002A                     	ds	2
   781  00002C                     ?___lwmod:
   782                           	opt stack 0
   783  00002C                     ___lwmod@dividend:
   784                           	opt stack 0
   785                           
   786                           ; 2 bytes @ 0x2B
   787  00002C                     	ds	1
   788  00002D                     ___lldiv@quotient:
   789                           	opt stack 0
   790                           
   791                           ; 4 bytes @ 0x2C
   792  00002D                     	ds	1
   793  00002E                     ___lwmod@divisor:
   794                           	opt stack 0
   795                           
   796                           ; 2 bytes @ 0x2D
   797  00002E                     	ds	2
   798  000030                     ___lwmod@counter:
   799                           	opt stack 0
   800                           
   801                           ; 1 bytes @ 0x2F
   802  000030                     	ds	1
   803  000031                     ?_printf:
   804                           	opt stack 0
   805  000031                     ___lldiv@counter:
   806                           	opt stack 0
   807  000031                     printf@f:
   808                           	opt stack 0
   809                           
   810                           ; 2 bytes @ 0x30
   811  000031                     	ds	1
   812  000032                     I2C_Master_Init@c:
   813                           	opt stack 0
   814                           
   815                           ; 4 bytes @ 0x31
   816  000032                     	ds	4
   817  000036                     ??_I2C_Master_Init:
   818                           
   819                           ; 1 bytes @ 0x35
   820  000036                     	ds	3
   821  000039                     ??_printf:
   822                           
   823                           ; 1 bytes @ 0x38
   824  000039                     	ds	4
   825  00003D                     ??_main:
   826                           
   827                           ; 1 bytes @ 0x3C
   828  00003D                     	ds	1
   829  00003E                     main@i_274:
   830                           	opt stack 0
   831                           
   832                           ; 1 bytes @ 0x3D
   833  00003E                     	ds	1
   834  00003F                     main@i:
   835                           	opt stack 0
   836                           
   837                           ; 1 bytes @ 0x3E
   838  00003F                     	ds	1
   839                           tblptru	equ	0xFF8
   840                           tblptrh	equ	0xFF7
   841                           tblptrl	equ	0xFF6
   842                           tablat	equ	0xFF5
   843                           postinc0	equ	0xFEE
   844                           wreg	equ	0xFE8
   845                           
   846 ;;
   847 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   848 ;;
   849 ;; *************** function _main *****************
   850 ;; Defined at:
   851 ;;		line 20 in file "../main.c"
   852 ;; Parameters:    Size  Location     Type
   853 ;;		None
   854 ;; Auto vars:     Size  Location     Type
   855 ;;  i               1   61[COMRAM] unsigned char 
   856 ;;  i               1   62[COMRAM] unsigned char 
   857 ;; Return value:  Size  Location     Type
   858 ;;                  1    wreg      void 
   859 ;; Registers used:
   860 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   861 ;; Tracked objects:
   862 ;;		On entry : 0/0
   863 ;;		On exit  : 0/0
   864 ;;		Unchanged: 0/0
   865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   867 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   868 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   869 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   870 ;;Total ram usage:        3 bytes
   871 ;; Hardware stack levels required when called:    6
   872 ;; This function calls:
   873 ;;		_I2C_Master_Init
   874 ;;		_I2C_Master_Read
   875 ;;		_I2C_Master_Start
   876 ;;		_I2C_Master_Stop
   877 ;;		_I2C_Master_Write
   878 ;;		_initLCD
   879 ;;		_lcdInst
   880 ;;		_printf
   881 ;; This function is called by:
   882 ;;		Startup code after reset
   883 ;; This function uses a non-reentrant model
   884 ;;
   885                           
   886                           	psect	text0
   887  000432                     __ptext0:
   888                           	opt stack 0
   889  000432                     _main:
   890                           	opt stack 25
   891                           
   892                           ;main.c: 22: TRISC = 0x00;
   893                           
   894                           ;incstack = 0
   895  000432  0E00               	movlw	0
   896  000434  6E94               	movwf	3988,c	;volatile
   897                           
   898                           ;main.c: 23: TRISD = 0x00;
   899  000436  0E00               	movlw	0
   900  000438  6E95               	movwf	3989,c	;volatile
   901                           
   902                           ;main.c: 24: TRISB = 0xFF;
   903  00043A  6893               	setf	3987,c	;volatile
   904                           
   905                           ;main.c: 25: LATB = 0x00;
   906  00043C  0E00               	movlw	0
   907  00043E  6E8A               	movwf	3978,c	;volatile
   908                           
   909                           ;main.c: 26: LATC = 0x00;
   910  000440  0E00               	movlw	0
   911  000442  6E8B               	movwf	3979,c	;volatile
   912                           
   913                           ;main.c: 27: ADCON0 = 0x00;
   914  000444  0E00               	movlw	0
   915  000446  6EC2               	movwf	4034,c	;volatile
   916                           
   917                           ;main.c: 28: ADCON1 = 0xFF;
   918  000448  68C1               	setf	4033,c	;volatile
   919                           
   920                           ;main.c: 42: GIE = 1;
   921  00044A  8EF2               	bsf	intcon,7,c	;volatile
   922                           
   923                           ;main.c: 43: INT1IE = 1;
   924  00044C  86F0               	bsf	intcon3,3,c	;volatile
   925                           
   926                           ;main.c: 44: INT1IF = 0;
   927  00044E  90F0               	bcf	intcon3,0,c	;volatile
   928                           
   929                           ;main.c: 45: RBIE = 0;
   930  000450  96F2               	bcf	intcon,3,c	;volatile
   931                           
   932                           ;main.c: 46: TMR0IE = 1;
   933  000452  8AF2               	bsf	intcon,5,c	;volatile
   934                           
   935                           ;main.c: 47: TMR0IF = 0;
   936  000454  94F2               	bcf	intcon,2,c	;volatile
   937                           
   938                           ;main.c: 51: T0CON = 0b01000111;
   939  000456  0E47               	movlw	71
   940  000458  6ED5               	movwf	4053,c	;volatile
   941                           
   942                           ;main.c: 66: initLCD();
   943  00045A  ECF3  F004         	call	_initLCD	;wreg free
   944                           
   945                           ;main.c: 68: I2C_Master_Init(10000);
   946  00045E  0E10               	movlw	16
   947  000460  6E32               	movwf	I2C_Master_Init@c,c
   948  000462  0E27               	movlw	39
   949  000464  6E33               	movwf	I2C_Master_Init@c+1,c
   950  000466  0E00               	movlw	0
   951  000468  6E34               	movwf	I2C_Master_Init@c+2,c
   952  00046A  0E00               	movlw	0
   953  00046C  6E35               	movwf	I2C_Master_Init@c+3,c
   954  00046E  EC76  F004         	call	_I2C_Master_Init	;wreg free
   955                           
   956                           ;main.c: 69: (INTCONbits.GIE = 1);
   957  000472  8EF2               	bsf	intcon,7,c	;volatile
   958                           
   959                           ;main.c: 72: while (screenMode == 2){
   960                           
   961                           ;main.c: 71: while (1) {
   962  000474  D048               	goto	l2137
   963  000476                     l158:
   964                           
   965                           ;main.c: 73: (INTCONbits.GIE = 0);
   966  000476  9EF2               	bcf	intcon,7,c	;volatile
   967                           
   968                           ;main.c: 74: lcdInst(0b10000000);;
   969  000478  0E80               	movlw	128
   970  00047A  ECAC  F005         	call	_lcdInst
   971                           
   972                           ;main.c: 75: printf("START:   PRESS *");
   973  00047E  0EDD               	movlw	low STR_1
   974  000480  6E31               	movwf	printf@f,c
   975  000482  0EFF               	movlw	high STR_1
   976  000484  6E32               	movwf	printf@f+1,c
   977  000486  EC55  F000         	call	_printf	;wreg free
   978                           
   979                           ;main.c: 76: lcdInst(0b11000000);;
   980  00048A  0EC0               	movlw	192
   981  00048C  ECAC  F005         	call	_lcdInst
   982                           
   983                           ;main.c: 77: printf("< 4   DATA   6 >");
   984  000490  0EEE               	movlw	low STR_2
   985  000492  6E31               	movwf	printf@f,c
   986  000494  0EFF               	movlw	high STR_2
   987  000496  6E32               	movwf	printf@f+1,c
   988  000498  EC55  F000         	call	_printf	;wreg free
   989                           
   990                           ;main.c: 78: (INTCONbits.GIE = 1);
   991  00049C  8EF2               	bsf	intcon,7,c	;volatile
   992                           
   993                           ;main.c: 79: unsigned char i;
   994                           ;main.c: 80: for(i=0;i<50;i++){
   995  00049E  0E00               	movlw	0
   996  0004A0  6E3F               	movwf	main@i,c
   997  0004A2                     l2107:
   998  0004A2  0E31               	movlw	49
   999  0004A4  643F               	cpfsgt	main@i,c
  1000  0004A6  D001               	goto	l2111
  1001  0004A8  D00E               	goto	l2119
  1002  0004AA                     l2111:
  1003                           
  1004                           ;main.c: 81: if (screenMode != 2)
  1005  0004AA  0E02               	movlw	2
  1006  0004AC  1858               	xorwf	_screenMode,w,c
  1007  0004AE  A4D8               	btfss	status,2,c
  1008  0004B0  D00A               	goto	l2119
  1009                           
  1010                           ;main.c: 83: _delay((unsigned long)((10)*(10000000/4000.0)));
  1011                           
  1012                           ;main.c: 82: break;
  1013  0004B2  0E21               	movlw	33
  1014  0004B4  6E3D               	movwf	??_main& (0+255),c
  1015  0004B6  0E76               	movlw	118
  1016  0004B8                     u1877:
  1017  0004B8  2EE8               	decfsz	wreg,f,c
  1018  0004BA  D7FE               	bra	u1877
  1019  0004BC  2E3D               	decfsz	??_main& (0+255),f,c
  1020  0004BE  D7FC               	bra	u1877
  1021  0004C0  D000               	nop2	
  1022  0004C2  2A3F               	incf	main@i,f,c
  1023  0004C4  D7EE               	goto	l2107
  1024  0004C6                     l2119:
  1025                           
  1026                           ;main.c: 84: }
  1027                           ;main.c: 85: lcdInst(0b10000000);;
  1028  0004C6  0E80               	movlw	128
  1029  0004C8  ECAC  F005         	call	_lcdInst
  1030                           
  1031                           ;main.c: 86: lcdInst(0b11000000);;
  1032  0004CC  0EC0               	movlw	192
  1033  0004CE  ECAC  F005         	call	_lcdInst
  1034                           
  1035                           ;main.c: 87: printf(" <4   DATA   6> ");
  1036  0004D2  0EBB               	movlw	low STR_3
  1037  0004D4  6E31               	movwf	printf@f,c
  1038  0004D6  0EFF               	movlw	high STR_3
  1039  0004D8  6E32               	movwf	printf@f+1,c
  1040  0004DA  EC55  F000         	call	_printf	;wreg free
  1041                           
  1042                           ;main.c: 88: for(i=0;i<50;i++){
  1043  0004DE  0E00               	movlw	0
  1044  0004E0  6E3F               	movwf	main@i,c
  1045  0004E2                     l2125:
  1046  0004E2  0E31               	movlw	49
  1047  0004E4  643F               	cpfsgt	main@i,c
  1048  0004E6  D001               	goto	l2129
  1049  0004E8  D00E               	goto	l2137
  1050  0004EA                     l2129:
  1051                           
  1052                           ;main.c: 89: if (screenMode != 2)
  1053  0004EA  0E02               	movlw	2
  1054  0004EC  1858               	xorwf	_screenMode,w,c
  1055  0004EE  A4D8               	btfss	status,2,c
  1056  0004F0  D00A               	goto	l2137
  1057                           
  1058                           ;main.c: 91: _delay((unsigned long)((10)*(10000000/4000.0)));
  1059                           
  1060                           ;main.c: 90: break;
  1061  0004F2  0E21               	movlw	33
  1062  0004F4  6E3D               	movwf	??_main& (0+255),c
  1063  0004F6  0E76               	movlw	118
  1064  0004F8                     u1887:
  1065  0004F8  2EE8               	decfsz	wreg,f,c
  1066  0004FA  D7FE               	bra	u1887
  1067  0004FC  2E3D               	decfsz	??_main& (0+255),f,c
  1068  0004FE  D7FC               	bra	u1887
  1069  000500  D000               	nop2	
  1070  000502  2A3F               	incf	main@i,f,c
  1071  000504  D7EE               	goto	l2125
  1072  000506                     l2137:
  1073  000506  0E02               	movlw	2
  1074  000508  1858               	xorwf	_screenMode,w,c
  1075  00050A  A4D8               	btfss	status,2,c
  1076  00050C  D013               	goto	l2145
  1077  00050E  D7B3               	goto	l158
  1078  000510                     l2139:
  1079                           
  1080                           ;main.c: 95: lcdInst(0b10000000);;
  1081  000510  0E80               	movlw	128
  1082  000512  ECAC  F005         	call	_lcdInst
  1083                           
  1084                           ;main.c: 96: printf("RUNNING...      ");
  1085  000516  0E44               	movlw	low STR_4
  1086  000518  6E31               	movwf	printf@f,c
  1087  00051A  0EFF               	movlw	high STR_4
  1088  00051C  6E32               	movwf	printf@f+1,c
  1089  00051E  EC55  F000         	call	_printf	;wreg free
  1090                           
  1091                           ;main.c: 97: lcdInst(0b11000000);;
  1092  000522  0EC0               	movlw	192
  1093  000524  ECAC  F005         	call	_lcdInst
  1094                           
  1095                           ;main.c: 98: printf("                ");
  1096  000528  0E33               	movlw	low STR_5
  1097  00052A  6E31               	movwf	printf@f,c
  1098  00052C  0EFF               	movlw	high STR_5
  1099  00052E  6E32               	movwf	printf@f+1,c
  1100  000530  EC55  F000         	call	_printf	;wreg free
  1101  000534                     l2145:
  1102  000534  0458               	decf	_screenMode,w,c
  1103  000536  A4D8               	btfss	status,2,c
  1104  000538  D013               	goto	l2153
  1105  00053A  D7EA               	goto	l2139
  1106  00053C                     l2147:
  1107                           
  1108                           ;main.c: 122: lcdInst(0b10000000);;
  1109  00053C  0E80               	movlw	128
  1110  00053E  ECAC  F005         	call	_lcdInst
  1111                           
  1112                           ;main.c: 123: printf("DONE! PRESS *   ");
  1113  000542  0E99               	movlw	low STR_6
  1114  000544  6E31               	movwf	printf@f,c
  1115  000546  0EFF               	movlw	high STR_6
  1116  000548  6E32               	movwf	printf@f+1,c
  1117  00054A  EC55  F000         	call	_printf	;wreg free
  1118                           
  1119                           ;main.c: 124: lcdInst(0b11000000);;
  1120  00054E  0EC0               	movlw	192
  1121  000550  ECAC  F005         	call	_lcdInst
  1122                           
  1123                           ;main.c: 125: printf("TO CONTINUE     ");
  1124  000554  0E66               	movlw	low STR_7
  1125  000556  6E31               	movwf	printf@f,c
  1126  000558  0EFF               	movlw	high STR_7
  1127  00055A  6E32               	movwf	printf@f+1,c
  1128  00055C  EC55  F000         	call	_printf	;wreg free
  1129  000560                     l2153:
  1130  000560  5058               	movf	_screenMode,w,c
  1131  000562  A4D8               	btfss	status,2,c
  1132  000564  D01B               	goto	l2163
  1133  000566  D7EA               	goto	l2147
  1134  000568                     l173:
  1135                           
  1136                           ;main.c: 129: (INTCONbits.GIE = 0);
  1137  000568  9EF2               	bcf	intcon,7,c	;volatile
  1138                           
  1139                           ;main.c: 131: lcdInst(0b10000000);;
  1140  00056A  0E80               	movlw	128
  1141  00056C  ECAC  F005         	call	_lcdInst
  1142                           
  1143                           ;main.c: 132: printf("TOTAL RUN TIME: ");
  1144  000570  0EAA               	movlw	low STR_8
  1145  000572  6E31               	movwf	printf@f,c
  1146  000574  0EFF               	movlw	high STR_8
  1147  000576  6E32               	movwf	printf@f+1,c
  1148  000578  EC55  F000         	call	_printf	;wreg free
  1149                           
  1150                           ;main.c: 133: lcdInst(0b11000000);;
  1151  00057C  0EC0               	movlw	192
  1152  00057E  ECAC  F005         	call	_lcdInst
  1153                           
  1154                           ;main.c: 134: printf("%02x:%02x               ", min, sec);
  1155  000582  0E9E               	movlw	low STR_9
  1156  000584  6E31               	movwf	printf@f,c
  1157  000586  0EFE               	movlw	high STR_9
  1158  000588  6E32               	movwf	printf@f+1,c
  1159  00058A  C052  F033         	movff	_min,?_printf+2
  1160  00058E  6A34               	clrf	?_printf+3,c
  1161  000590  C057  F035         	movff	_sec,?_printf+4
  1162  000594  6A36               	clrf	?_printf+5,c
  1163  000596  EC55  F000         	call	_printf	;wreg free
  1164                           
  1165                           ;main.c: 135: (INTCONbits.GIE = 1);
  1166  00059A  8EF2               	bsf	intcon,7,c	;volatile
  1167  00059C                     l2163:
  1168  00059C  0E03               	movlw	3
  1169  00059E  1858               	xorwf	_screenMode,w,c
  1170  0005A0  A4D8               	btfss	status,2,c
  1171  0005A2  D016               	goto	l2171
  1172  0005A4  D7E1               	goto	l173
  1173  0005A6                     l2165:
  1174                           
  1175                           ;main.c: 139: lcdInst(0b10000000);;
  1176  0005A6  0E80               	movlw	128
  1177  0005A8  ECAC  F005         	call	_lcdInst
  1178                           
  1179                           ;main.c: 140: printf("TOTAL NUMBER OF ");
  1180  0005AC  0ECC               	movlw	low STR_10
  1181  0005AE  6E31               	movwf	printf@f,c
  1182  0005B0  0EFF               	movlw	high STR_10
  1183  0005B2  6E32               	movwf	printf@f+1,c
  1184  0005B4  EC55  F000         	call	_printf	;wreg free
  1185                           
  1186                           ;main.c: 141: lcdInst(0b11000000);;
  1187  0005B8  0EC0               	movlw	192
  1188  0005BA  ECAC  F005         	call	_lcdInst
  1189                           
  1190                           ;main.c: 142: printf("BATTERIES: %02d   ", numBats);
  1191  0005BE  0E0F               	movlw	low STR_11
  1192  0005C0  6E31               	movwf	printf@f,c
  1193  0005C2  0EFF               	movlw	high STR_11
  1194  0005C4  6E32               	movwf	printf@f+1,c
  1195  0005C6  C055  F033         	movff	_numBats,?_printf+2
  1196  0005CA  6A34               	clrf	?_printf+3,c
  1197  0005CC  EC55  F000         	call	_printf	;wreg free
  1198  0005D0                     l2171:
  1199  0005D0  0E04               	movlw	4
  1200  0005D2  1858               	xorwf	_screenMode,w,c
  1201  0005D4  A4D8               	btfss	status,2,c
  1202  0005D6  D018               	goto	l2181
  1203  0005D8  D7E6               	goto	l2165
  1204  0005DA                     l179:
  1205                           
  1206                           ;main.c: 145: (INTCONbits.GIE = 0);
  1207  0005DA  9EF2               	bcf	intcon,7,c	;volatile
  1208                           
  1209                           ;main.c: 147: lcdInst(0b10000000);;
  1210  0005DC  0E80               	movlw	128
  1211  0005DE  ECAC  F005         	call	_lcdInst
  1212                           
  1213                           ;main.c: 148: printf("NUMBER OF C     ");
  1214  0005E2  0E55               	movlw	low STR_12
  1215  0005E4  6E31               	movwf	printf@f,c
  1216  0005E6  0EFF               	movlw	high STR_12
  1217  0005E8  6E32               	movwf	printf@f+1,c
  1218  0005EA  EC55  F000         	call	_printf	;wreg free
  1219                           
  1220                           ;main.c: 149: lcdInst(0b11000000);;
  1221  0005EE  0EC0               	movlw	192
  1222  0005F0  ECAC  F005         	call	_lcdInst
  1223                           
  1224                           ;main.c: 150: printf("BATTERIES: %02d   ", numC);
  1225  0005F4  0E0F               	movlw	low STR_11
  1226  0005F6  6E31               	movwf	printf@f,c
  1227  0005F8  0EFF               	movlw	high STR_11
  1228  0005FA  6E32               	movwf	printf@f+1,c
  1229  0005FC  C056  F033         	movff	_numC,?_printf+2
  1230  000600  6A34               	clrf	?_printf+3,c
  1231  000602  EC55  F000         	call	_printf	;wreg free
  1232                           
  1233                           ;main.c: 151: (INTCONbits.GIE = 1);
  1234  000606  8EF2               	bsf	intcon,7,c	;volatile
  1235  000608                     l2181:
  1236  000608  0E05               	movlw	5
  1237  00060A  1858               	xorwf	_screenMode,w,c
  1238  00060C  A4D8               	btfss	status,2,c
  1239  00060E  D018               	goto	l2191
  1240  000610  D7E4               	goto	l179
  1241  000612                     l182:
  1242                           
  1243                           ;main.c: 154: (INTCONbits.GIE = 0);
  1244  000612  9EF2               	bcf	intcon,7,c	;volatile
  1245                           
  1246                           ;main.c: 156: lcdInst(0b10000000);;
  1247  000614  0E80               	movlw	128
  1248  000616  ECAC  F005         	call	_lcdInst
  1249                           
  1250                           ;main.c: 157: printf("NUMBER OF 9V    ");
  1251  00061A  0E88               	movlw	low STR_14
  1252  00061C  6E31               	movwf	printf@f,c
  1253  00061E  0EFF               	movlw	high STR_14
  1254  000620  6E32               	movwf	printf@f+1,c
  1255  000622  EC55  F000         	call	_printf	;wreg free
  1256                           
  1257                           ;main.c: 158: lcdInst(0b11000000);;
  1258  000626  0EC0               	movlw	192
  1259  000628  ECAC  F005         	call	_lcdInst
  1260                           
  1261                           ;main.c: 159: printf("BATTERIES: %02d     ", num9V);
  1262  00062C  0EE5               	movlw	low STR_15
  1263  00062E  6E31               	movwf	printf@f,c
  1264  000630  0EFE               	movlw	high STR_15
  1265  000632  6E32               	movwf	printf@f+1,c
  1266  000634  C053  F033         	movff	_num9V,?_printf+2
  1267  000638  6A34               	clrf	?_printf+3,c
  1268  00063A  EC55  F000         	call	_printf	;wreg free
  1269                           
  1270                           ;main.c: 160: (INTCONbits.GIE = 1);
  1271  00063E  8EF2               	bsf	intcon,7,c	;volatile
  1272  000640                     l2191:
  1273  000640  0E06               	movlw	6
  1274  000642  1858               	xorwf	_screenMode,w,c
  1275  000644  A4D8               	btfss	status,2,c
  1276  000646  D018               	goto	l2201
  1277  000648  D7E4               	goto	l182
  1278  00064A                     l185:
  1279                           
  1280                           ;main.c: 163: (INTCONbits.GIE = 0);
  1281  00064A  9EF2               	bcf	intcon,7,c	;volatile
  1282                           
  1283                           ;main.c: 165: lcdInst(0b10000000);;
  1284  00064C  0E80               	movlw	128
  1285  00064E  ECAC  F005         	call	_lcdInst
  1286                           
  1287                           ;main.c: 166: printf("NUMBER OF AA    ");
  1288  000652  0E77               	movlw	low STR_16
  1289  000654  6E31               	movwf	printf@f,c
  1290  000656  0EFF               	movlw	high STR_16
  1291  000658  6E32               	movwf	printf@f+1,c
  1292  00065A  EC55  F000         	call	_printf	;wreg free
  1293                           
  1294                           ;main.c: 167: lcdInst(0b11000000);;
  1295  00065E  0EC0               	movlw	192
  1296  000660  ECAC  F005         	call	_lcdInst
  1297                           
  1298                           ;main.c: 168: printf("BATTERIES: %02x     ", numAA);
  1299  000664  0EFA               	movlw	low STR_17
  1300  000666  6E31               	movwf	printf@f,c
  1301  000668  0EFE               	movlw	high STR_17
  1302  00066A  6E32               	movwf	printf@f+1,c
  1303  00066C  C054  F033         	movff	_numAA,?_printf+2
  1304  000670  6A34               	clrf	?_printf+3,c
  1305  000672  EC55  F000         	call	_printf	;wreg free
  1306                           
  1307                           ;main.c: 169: (INTCONbits.GIE = 1);
  1308  000676  8EF2               	bsf	intcon,7,c	;volatile
  1309  000678                     l2201:
  1310  000678  0E07               	movlw	7
  1311  00067A  1858               	xorwf	_screenMode,w,c
  1312  00067C  A4D8               	btfss	status,2,c
  1313  00067E  D057               	goto	l2223
  1314  000680  D7E4               	goto	l185
  1315  000682                     l2203:
  1316                           
  1317                           ;main.c: 173: I2C_Master_Start();
  1318  000682  ECBB  F005         	call	_I2C_Master_Start	;wreg free
  1319                           
  1320                           ;main.c: 174: I2C_Master_Write(0b11010000);
  1321  000686  0E00               	movlw	0
  1322  000688  6E27               	movwf	I2C_Master_Write@d+1,c
  1323  00068A  0ED0               	movlw	208
  1324  00068C  6E26               	movwf	I2C_Master_Write@d,c
  1325  00068E  ECB2  F005         	call	_I2C_Master_Write	;wreg free
  1326                           
  1327                           ;main.c: 175: I2C_Master_Write(0x00);
  1328  000692  0E00               	movlw	0
  1329  000694  6E27               	movwf	I2C_Master_Write@d+1,c
  1330  000696  0E00               	movlw	0
  1331  000698  6E26               	movwf	I2C_Master_Write@d,c
  1332  00069A  ECB2  F005         	call	_I2C_Master_Write	;wreg free
  1333                           
  1334                           ;main.c: 176: I2C_Master_Stop();
  1335  00069E  ECB7  F005         	call	_I2C_Master_Stop	;wreg free
  1336                           
  1337                           ;main.c: 178: I2C_Master_Start();
  1338  0006A2  ECBB  F005         	call	_I2C_Master_Start	;wreg free
  1339                           
  1340                           ;main.c: 179: I2C_Master_Write(0b11010001);
  1341  0006A6  0E00               	movlw	0
  1342  0006A8  6E27               	movwf	I2C_Master_Write@d+1,c
  1343  0006AA  0ED1               	movlw	209
  1344  0006AC  6E26               	movwf	I2C_Master_Write@d,c
  1345  0006AE  ECB2  F005         	call	_I2C_Master_Write	;wreg free
  1346                           
  1347                           ;main.c: 180: for(unsigned char i=0;i<0x06;i++){
  1348  0006B2  0E00               	movlw	0
  1349  0006B4  6E3E               	movwf	main@i_274,c
  1350  0006B6                     l2207:
  1351  0006B6  0E05               	movlw	5
  1352  0006B8  643E               	cpfsgt	main@i_274,c
  1353  0006BA  D001               	goto	l2211
  1354  0006BC  D00E               	goto	l2217
  1355  0006BE                     l2211:
  1356                           
  1357                           ;main.c: 181: time[i] = I2C_Master_Read(1);
  1358  0006BE  503E               	movf	main@i_274,w,c
  1359  0006C0  0D01               	mullw	1
  1360  0006C2  0E40               	movlw	low _time
  1361  0006C4  24F3               	addwf	prodl,w,c
  1362  0006C6  6ED9               	movwf	fsr2l,c
  1363  0006C8  0E00               	movlw	high _time
  1364  0006CA  20F4               	addwfc	prodh,w,c
  1365  0006CC  6EDA               	movwf	fsr2h,c
  1366  0006CE  0E01               	movlw	1
  1367  0006D0  EC7B  F005         	call	_I2C_Master_Read
  1368  0006D4  6EDF               	movwf	indf2,c
  1369  0006D6  2A3E               	incf	main@i_274,f,c
  1370  0006D8  D7EE               	goto	l2207
  1371  0006DA                     l2217:
  1372                           
  1373                           ;main.c: 182: }
  1374                           ;main.c: 183: time[6] = I2C_Master_Read(0);
  1375  0006DA  0E00               	movlw	0
  1376  0006DC  EC7B  F005         	call	_I2C_Master_Read
  1377  0006E0  6E46               	movwf	_time+6,c
  1378                           
  1379                           ;main.c: 184: I2C_Master_Stop();
  1380  0006E2  ECB7  F005         	call	_I2C_Master_Stop	;wreg free
  1381                           
  1382                           ;main.c: 185: lcdInst(0b10000000);;
  1383  0006E6  0E80               	movlw	128
  1384  0006E8  ECAC  F005         	call	_lcdInst
  1385                           
  1386                           ;main.c: 186: printf("DATE: %02x/%02x/%02x  ", time[6],time[5],time[4]);
  1387  0006EC  0EB7               	movlw	low STR_18
  1388  0006EE  6E31               	movwf	printf@f,c
  1389  0006F0  0EFE               	movlw	high STR_18
  1390  0006F2  6E32               	movwf	printf@f+1,c
  1391  0006F4  C046  F033         	movff	_time+6,?_printf+2
  1392  0006F8  6A34               	clrf	?_printf+3,c
  1393  0006FA  C045  F035         	movff	_time+5,?_printf+4
  1394  0006FE  6A36               	clrf	?_printf+5,c
  1395  000700  C044  F037         	movff	_time+4,?_printf+6
  1396  000704  6A38               	clrf	?_printf+7,c
  1397  000706  EC55  F000         	call	_printf	;wreg free
  1398                           
  1399                           ;main.c: 187: lcdInst(0b11000000);;
  1400  00070A  0EC0               	movlw	192
  1401  00070C  ECAC  F005         	call	_lcdInst
  1402                           
  1403                           ;main.c: 188: printf("TIME: %02x:%02x:%02x  ", time[2],time[1],time[0]);
  1404  000710  0ECE               	movlw	low STR_19
  1405  000712  6E31               	movwf	printf@f,c
  1406  000714  0EFE               	movlw	high STR_19
  1407  000716  6E32               	movwf	printf@f+1,c
  1408  000718  C042  F033         	movff	_time+2,?_printf+2
  1409  00071C  6A34               	clrf	?_printf+3,c
  1410  00071E  C041  F035         	movff	_time+1,?_printf+4
  1411  000722  6A36               	clrf	?_printf+5,c
  1412  000724  C040  F037         	movff	_time,?_printf+6
  1413  000728  6A38               	clrf	?_printf+7,c
  1414  00072A  EC55  F000         	call	_printf	;wreg free
  1415  00072E                     l2223:
  1416  00072E  0E08               	movlw	8
  1417  000730  1858               	xorwf	_screenMode,w,c
  1418  000732  A4D8               	btfss	status,2,c
  1419  000734  D6E8               	goto	l2137
  1420  000736  D7A5               	goto	l2203
  1421  000738                     __end_of_main:
  1422                           	opt stack 0
  1423                           tblptru	equ	0xFF8
  1424                           tblptrh	equ	0xFF7
  1425                           tblptrl	equ	0xFF6
  1426                           tablat	equ	0xFF5
  1427                           prodh	equ	0xFF4
  1428                           prodl	equ	0xFF3
  1429                           intcon	equ	0xFF2
  1430                           intcon3	equ	0xFF0
  1431                           postinc0	equ	0xFEE
  1432                           wreg	equ	0xFE8
  1433                           indf2	equ	0xFDF
  1434                           fsr2h	equ	0xFDA
  1435                           fsr2l	equ	0xFD9
  1436                           status	equ	0xFD8
  1437                           
  1438 ;; *************** function _printf *****************
  1439 ;; Defined at:
  1440 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  1441 ;; Parameters:    Size  Location     Type
  1442 ;;  f               2   48[COMRAM] PTR const unsigned char 
  1443 ;;		 -> STR_19(23), STR_18(23), STR_17(21), STR_16(17), 
  1444 ;;		 -> STR_15(21), STR_14(17), STR_13(19), STR_12(17), 
  1445 ;;		 -> STR_11(19), STR_10(17), STR_9(25), STR_8(17), 
  1446 ;;		 -> STR_7(17), STR_6(17), STR_5(17), STR_4(17), 
  1447 ;;		 -> STR_3(17), STR_2(17), STR_1(17), 
  1448 ;; Auto vars:     Size  Location     Type
  1449 ;;  idx             1    0[BANK0 ] unsigned char 
  1450 ;;  tmpval          4    0        struct .
  1451 ;;  cp              3    0        PTR const unsigned char 
  1452 ;;  width           2    7[BANK0 ] int 
  1453 ;;  val             2    4[BANK0 ] unsigned int 
  1454 ;;  ap              2    1[BANK0 ] PTR void [1]
  1455 ;;		 -> ?_printf(2), 
  1456 ;;  len             2    0        unsigned int 
  1457 ;;  c               1    9[BANK0 ] char 
  1458 ;;  flag            1    6[BANK0 ] unsigned char 
  1459 ;;  prec            1    3[BANK0 ] char 
  1460 ;; Return value:  Size  Location     Type
  1461 ;;                  2   48[COMRAM] int 
  1462 ;; Registers used:
  1463 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1464 ;; Tracked objects:
  1465 ;;		On entry : 0/0
  1466 ;;		On exit  : 0/0
  1467 ;;		Unchanged: 0/0
  1468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1469 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1470 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1471 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1472 ;;      Totals:        12      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1473 ;;Total ram usage:       22 bytes
  1474 ;; Hardware stack levels used:    1
  1475 ;; Hardware stack levels required when called:    5
  1476 ;; This function calls:
  1477 ;;		___lwdiv
  1478 ;;		___lwmod
  1479 ;;		___wmul
  1480 ;;		_isdigit
  1481 ;;		_putch
  1482 ;; This function is called by:
  1483 ;;		_main
  1484 ;; This function uses a non-reentrant model
  1485 ;;
  1486                           
  1487                           	psect	text1
  1488  0000AA                     __ptext1:
  1489                           	opt stack 0
  1490  0000AA                     _printf:
  1491                           	opt stack 25
  1492                           
  1493                           ;doprnt.c: 466: va_list ap;
  1494                           ;doprnt.c: 499: signed char c;
  1495                           ;doprnt.c: 501: int width;
  1496                           ;doprnt.c: 506: signed char prec;
  1497                           ;doprnt.c: 508: unsigned char flag;
  1498                           ;doprnt.c: 523: union {
  1499                           ;doprnt.c: 524: unsigned long vd;
  1500                           ;doprnt.c: 525: double integ;
  1501                           ;doprnt.c: 526: } tmpval;
  1502                           ;doprnt.c: 528: unsigned int val;
  1503                           ;doprnt.c: 529: unsigned len;
  1504                           ;doprnt.c: 530: const char * cp;
  1505                           ;doprnt.c: 533: *ap = __va_start();
  1506                           
  1507                           ;incstack = 0
  1508  0000AA  0E33               	movlw	low (?_printf+2)
  1509  0000AC  0100               	movlb	0	; () banked
  1510  0000AE  6F81               	movwf	printf@ap& (0+255),b
  1511  0000B0  0E00               	movlw	high (?_printf+2)
  1512  0000B2  0100               	movlb	0	; () banked
  1513  0000B4  6F82               	movwf	(printf@ap+1)& (0+255),b
  1514                           
  1515                           ;doprnt.c: 536: while(c = *f++) {
  1516  0000B6  D1AF               	goto	l2071
  1517  0000B8                     l1945:
  1518                           
  1519                           ; BSR set to: 0
  1520                           ;doprnt.c: 538: if(c != '%')
  1521  0000B8  0E25               	movlw	37
  1522  0000BA  0100               	movlb	0	; () banked
  1523  0000BC  1989               	xorwf	printf@c& (0+255),w,b
  1524  0000BE  B4D8               	btfsc	status,2,c
  1525  0000C0  D005               	goto	l1949
  1526                           
  1527                           ; BSR set to: 0
  1528                           ;doprnt.c: 540: {
  1529                           ;doprnt.c: 541: (putch(c) );
  1530  0000C2  0100               	movlb	0	; () banked
  1531  0000C4  5189               	movf	printf@c& (0+255),w,b
  1532  0000C6  ECA6  F005         	call	_putch
  1533                           
  1534                           ;doprnt.c: 542: continue;
  1535  0000CA  D1A5               	goto	l2071
  1536  0000CC                     l1949:
  1537                           
  1538                           ;doprnt.c: 543: }
  1539                           ;doprnt.c: 546: width = 0;
  1540  0000CC  0E00               	movlw	0
  1541  0000CE  0100               	movlb	0	; () banked
  1542  0000D0  6F88               	movwf	(printf@width+1)& (0+255),b
  1543  0000D2  0E00               	movlw	0
  1544  0000D4  6F87               	movwf	printf@width& (0+255),b
  1545                           
  1546                           ;doprnt.c: 548: flag = 0;
  1547  0000D6  0E00               	movlw	0
  1548  0000D8  0100               	movlb	0	; () banked
  1549  0000DA  6F86               	movwf	printf@flag& (0+255),b
  1550                           
  1551                           ; BSR set to: 0
  1552                           ;doprnt.c: 551: switch(*f) {
  1553                           
  1554                           ;doprnt.c: 550: for(;;) {
  1555  0000DC  D004               	goto	l1955
  1556  0000DE                     l1951:
  1557                           
  1558                           ;doprnt.c: 580: flag |= 0x04;
  1559  0000DE  0100               	movlb	0	; () banked
  1560  0000E0  8586               	bsf	printf@flag& (0+255),2,b
  1561                           
  1562                           ;doprnt.c: 581: f++;
  1563  0000E2  4A31               	infsnz	printf@f,f,c
  1564  0000E4  2A32               	incf	printf@f+1,f,c
  1565  0000E6                     l1955:
  1566  0000E6  C031  FFF6         	movff	printf@f,tblptrl
  1567  0000EA  C032  FFF7         	movff	printf@f+1,tblptrh
  1568  0000EE                     	if	0	;tblptru may be non-zero
  1569  0000EE                     	endif
  1570  0000EE                     	if	0	;tblptru may be non-zero
  1571  0000EE                     	endif
  1572  0000EE  0008               	tblrd		*
  1573  0000F0  50F5               	movf	tablat,w,c
  1574                           
  1575                           ; Switch size 1, requested type "space"
  1576                           ; Number of cases is 1, Range of values is 48 to 48
  1577                           ; switch strategies available:
  1578                           ; Name         Instructions Cycles
  1579                           ; simple_byte            4     3 (average)
  1580                           ;	Chosen strategy is simple_byte
  1581  0000F2  0A30               	xorlw	48	; case 48
  1582  0000F4  B4D8               	btfsc	status,2,c
  1583  0000F6  D7F3               	goto	l1951
  1584                           
  1585                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1586                           
  1587                           ;doprnt.c: 586: }
  1588                           
  1589                           ;doprnt.c: 585: break;
  1590  0000F8  C031  FFF6         	movff	printf@f,tblptrl
  1591  0000FC  C032  FFF7         	movff	printf@f+1,tblptrh
  1592  000100                     	if	0	;tblptru may be non-zero
  1593  000100                     	endif
  1594  000100                     	if	0	;tblptru may be non-zero
  1595  000100                     	endif
  1596  000100  0008               	tblrd		*
  1597  000102  50F5               	movf	tablat,w,c
  1598  000104  EC8E  F005         	call	_isdigit
  1599  000108  A0D8               	btfss	status,0,c
  1600  00010A  D039               	goto	l1973
  1601                           
  1602                           ;doprnt.c: 598: width = 0;
  1603  00010C  0E00               	movlw	0
  1604  00010E  0100               	movlb	0	; () banked
  1605  000110  6F88               	movwf	(printf@width+1)& (0+255),b
  1606  000112  0E00               	movlw	0
  1607  000114  6F87               	movwf	printf@width& (0+255),b
  1608  000116                     l1961:
  1609                           
  1610                           ;doprnt.c: 600: width *= 10;
  1611  000116  C087  F025         	movff	printf@width,___wmul@multiplier
  1612  00011A  C088  F026         	movff	printf@width+1,___wmul@multiplier+1
  1613  00011E  0E00               	movlw	0
  1614  000120  6E28               	movwf	___wmul@multiplicand+1,c
  1615  000122  0E0A               	movlw	10
  1616  000124  6E27               	movwf	___wmul@multiplicand,c
  1617  000126  EC68  F005         	call	___wmul	;wreg free
  1618  00012A  C025  F087         	movff	?___wmul,printf@width
  1619  00012E  C026  F088         	movff	?___wmul+1,printf@width+1
  1620                           
  1621                           ;doprnt.c: 601: width += *f++ - '0';
  1622  000132  0ED0               	movlw	208
  1623  000134  6E39               	movwf	??_printf& (0+255),c
  1624  000136  0EFF               	movlw	255
  1625  000138  6E3A               	movwf	(??_printf+1)& (0+255),c
  1626  00013A  C031  FFF6         	movff	printf@f,tblptrl
  1627  00013E  C032  FFF7         	movff	printf@f+1,tblptrh
  1628  000142                     	if	0	;tblptru may be non-zero
  1629  000142                     	endif
  1630  000142                     	if	0	;tblptru may be non-zero
  1631  000142                     	endif
  1632  000142  0008               	tblrd		*
  1633  000144  50F5               	movf	tablat,w,c
  1634  000146  6E3B               	movwf	(??_printf+2)& (0+255),c
  1635  000148  6A3C               	clrf	(??_printf+3)& (0+255),c
  1636  00014A  5039               	movf	??_printf,w,c
  1637  00014C  263B               	addwf	??_printf+2,f,c
  1638  00014E  503A               	movf	??_printf+1,w,c
  1639  000150  223C               	addwfc	??_printf+3,f,c
  1640  000152  503B               	movf	??_printf+2,w,c
  1641  000154  0100               	movlb	0	; () banked
  1642  000156  2787               	addwf	printf@width& (0+255),f,b
  1643  000158  503C               	movf	??_printf+3,w,c
  1644  00015A  0100               	movlb	0	; () banked
  1645  00015C  2388               	addwfc	(printf@width+1)& (0+255),f,b
  1646                           
  1647                           ; BSR set to: 0
  1648  00015E  4A31               	infsnz	printf@f,f,c
  1649  000160  2A32               	incf	printf@f+1,f,c
  1650                           
  1651                           ; BSR set to: 0
  1652                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1653  000162  C031  FFF6         	movff	printf@f,tblptrl
  1654  000166  C032  FFF7         	movff	printf@f+1,tblptrh
  1655  00016A                     	if	0	;tblptru may be non-zero
  1656  00016A                     	endif
  1657  00016A                     	if	0	;tblptru may be non-zero
  1658  00016A                     	endif
  1659  00016A  0008               	tblrd		*
  1660  00016C  50F5               	movf	tablat,w,c
  1661  00016E  EC8E  F005         	call	_isdigit
  1662  000172  A0D8               	btfss	status,0,c
  1663  000174  D004               	goto	l1973
  1664  000176  D7CF               	goto	l1961
  1665  000178                     l1969:
  1666                           
  1667                           ;doprnt.c: 721: flag |= 0x80;
  1668  000178  0100               	movlb	0	; () banked
  1669  00017A  8F86               	bsf	printf@flag& (0+255),7,b
  1670                           
  1671                           ;doprnt.c: 723: break;
  1672  00017C  D018               	goto	l253
  1673  00017E                     l1973:
  1674  00017E  C031  FFF6         	movff	printf@f,tblptrl
  1675  000182  C032  FFF7         	movff	printf@f+1,tblptrh
  1676  000186  4A31               	infsnz	printf@f,f,c
  1677  000188  2A32               	incf	printf@f+1,f,c
  1678  00018A                     	if	0	;tblptru may be non-zero
  1679  00018A                     	endif
  1680  00018A                     	if	0	;tblptru may be non-zero
  1681  00018A                     	endif
  1682  00018A  0008               	tblrd		*
  1683  00018C  CFF5 F089          	movff	tablat,printf@c
  1684  000190  0100               	movlb	0	; () banked
  1685  000192  5189               	movf	printf@c& (0+255),w,b
  1686                           
  1687                           ; Switch size 1, requested type "space"
  1688                           ; Number of cases is 4, Range of values is 0 to 120
  1689                           ; switch strategies available:
  1690                           ; Name         Instructions Cycles
  1691                           ; simple_byte           13     7 (average)
  1692                           ;	Chosen strategy is simple_byte
  1693  000194  0A00               	xorlw	0	; case 0
  1694  000196  B4D8               	btfsc	status,2,c
  1695  000198  0012               	return	
  1696  00019A  0A64               	xorlw	100	; case 100
  1697  00019C  B4D8               	btfsc	status,2,c
  1698  00019E  D007               	goto	l253
  1699  0001A0  0A0D               	xorlw	13	; case 105
  1700  0001A2  B4D8               	btfsc	status,2,c
  1701  0001A4  D004               	goto	l253
  1702  0001A6  0A11               	xorlw	17	; case 120
  1703  0001A8  B4D8               	btfsc	status,2,c
  1704  0001AA  D7E6               	goto	l1969
  1705  0001AC  D134               	goto	l2071
  1706  0001AE                     l253:
  1707                           
  1708                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  1709  0001AE  0100               	movlb	0	; () banked
  1710  0001B0  BF86               	btfsc	printf@flag& (0+255),7,b
  1711  0001B2  D019               	goto	l1985
  1712                           
  1713                           ; BSR set to: 0
  1714                           ;doprnt.c: 1253: {
  1715                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1716  0001B4  C081  FFD9         	movff	printf@ap,fsr2l
  1717  0001B8  C082  FFDA         	movff	printf@ap+1,fsr2h
  1718  0001BC  CFDE F084          	movff	postinc2,printf@val
  1719  0001C0  CFDD F085          	movff	postdec2,printf@val+1
  1720                           
  1721                           ; BSR set to: 0
  1722  0001C4  0E02               	movlw	2
  1723  0001C6  0100               	movlb	0	; () banked
  1724  0001C8  2781               	addwf	printf@ap& (0+255),f,b
  1725  0001CA  0E00               	movlw	0
  1726  0001CC  2382               	addwfc	(printf@ap+1)& (0+255),f,b
  1727                           
  1728                           ; BSR set to: 0
  1729                           ;doprnt.c: 1261: if((int)val < 0) {
  1730  0001CE  0100               	movlb	0	; () banked
  1731  0001D0  AF85               	btfss	(printf@val+1)& (0+255),7,b
  1732  0001D2  D053               	goto	l2019
  1733                           
  1734                           ; BSR set to: 0
  1735                           ;doprnt.c: 1262: flag |= 0x03;
  1736  0001D4  0E03               	movlw	3
  1737  0001D6  0100               	movlb	0	; () banked
  1738  0001D8  1386               	iorwf	printf@flag& (0+255),f,b
  1739                           
  1740                           ; BSR set to: 0
  1741                           ;doprnt.c: 1263: val = -val;
  1742  0001DA  0100               	movlb	0	; () banked
  1743  0001DC  6D84               	negf	printf@val& (0+255),b
  1744  0001DE  1F85               	comf	(printf@val+1)& (0+255),f,b
  1745  0001E0  B0D8               	btfsc	status,0,c
  1746  0001E2  2B85               	incf	(printf@val+1)& (0+255),f,b
  1747                           
  1748                           ; BSR set to: 0
  1749                           ;doprnt.c: 1264: }
  1750                           ;doprnt.c: 1266: }
  1751  0001E4  D04A               	goto	l2019
  1752  0001E6                     l1985:
  1753                           
  1754                           ; BSR set to: 0
  1755                           ;doprnt.c: 1268: else
  1756                           ;doprnt.c: 1273: {
  1757                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  1758  0001E6  C081  FFD9         	movff	printf@ap,fsr2l
  1759  0001EA  C082  FFDA         	movff	printf@ap+1,fsr2h
  1760  0001EE  CFDE F084          	movff	postinc2,printf@val
  1761  0001F2  CFDD F085          	movff	postdec2,printf@val+1
  1762                           
  1763                           ; BSR set to: 0
  1764  0001F6  0E02               	movlw	2
  1765  0001F8  0100               	movlb	0	; () banked
  1766  0001FA  2781               	addwf	printf@ap& (0+255),f,b
  1767  0001FC  0E00               	movlw	0
  1768  0001FE  2382               	addwfc	(printf@ap+1)& (0+255),f,b
  1769                           
  1770                           ; BSR set to: 0
  1771                           ;doprnt.c: 1287: }
  1772                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  1773  000200  D03C               	goto	l2019
  1774  000202                     l1989:
  1775                           
  1776                           ; BSR set to: 0
  1777                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1778  000202  0E01               	movlw	1
  1779  000204  0100               	movlb	0	; () banked
  1780  000206  6F89               	movwf	printf@c& (0+255),b
  1781  000208                     l1991:
  1782                           
  1783                           ; BSR set to: 0
  1784  000208  0E05               	movlw	5
  1785  00020A  0100               	movlb	0	; () banked
  1786  00020C  1989               	xorwf	printf@c& (0+255),w,b
  1787  00020E  B4D8               	btfsc	status,2,c
  1788  000210  D03D               	goto	l2021
  1789                           
  1790                           ; BSR set to: 0
  1791                           ;doprnt.c: 1306: if(val < dpowers[c])
  1792                           
  1793                           ; BSR set to: 0
  1794                           
  1795                           ; BSR set to: 0
  1796  000212  0100               	movlb	0	; () banked
  1797  000214  5189               	movf	printf@c& (0+255),w,b
  1798  000216  0D02               	mullw	2
  1799  000218  0E8C               	movlw	low _dpowers
  1800  00021A  24F3               	addwf	prodl,w,c
  1801  00021C  6EF6               	movwf	tblptrl,c
  1802  00021E  0EFE               	movlw	high _dpowers
  1803  000220  20F4               	addwfc	prodh,w,c
  1804  000222  6EF7               	movwf	tblptrh,c
  1805  000224                     	if	0	;There are less than 3 active tblptr bytes
  1806  000224                     	endif
  1807  000224  0009               	tblrd		*+
  1808  000226  50F5               	movf	tablat,w,c
  1809  000228  0100               	movlb	0	; () banked
  1810  00022A  5D84               	subwf	printf@val& (0+255),w,b
  1811  00022C  0009               	tblrd		*+
  1812  00022E  50F5               	movf	tablat,w,c
  1813  000230  0100               	movlb	0	; () banked
  1814  000232  5985               	subwfb	(printf@val+1)& (0+255),w,b
  1815  000234  A0D8               	btfss	status,0,c
  1816  000236  D02A               	goto	l2021
  1817                           
  1818                           ; BSR set to: 0
  1819                           
  1820                           ; BSR set to: 0
  1821                           
  1822                           ; BSR set to: 0
  1823                           ;doprnt.c: 1307: break;
  1824  000238  0100               	movlb	0	; () banked
  1825  00023A  2B89               	incf	printf@c& (0+255),f,b
  1826  00023C  D7E5               	goto	l1991
  1827  00023E                     l2003:
  1828                           
  1829                           ; BSR set to: 0
  1830                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  1831  00023E  0E01               	movlw	1
  1832  000240  0100               	movlb	0	; () banked
  1833  000242  6F89               	movwf	printf@c& (0+255),b
  1834  000244                     l2005:
  1835                           
  1836                           ; BSR set to: 0
  1837  000244  0E04               	movlw	4
  1838  000246  0100               	movlb	0	; () banked
  1839  000248  1989               	xorwf	printf@c& (0+255),w,b
  1840  00024A  B4D8               	btfsc	status,2,c
  1841  00024C  D01F               	goto	l2021
  1842                           
  1843                           ; BSR set to: 0
  1844                           ;doprnt.c: 1317: if(val < hexpowers[c])
  1845                           
  1846                           ; BSR set to: 0
  1847                           
  1848                           ; BSR set to: 0
  1849  00024E  0100               	movlb	0	; () banked
  1850  000250  5189               	movf	printf@c& (0+255),w,b
  1851  000252  0D02               	mullw	2
  1852  000254  0E96               	movlw	low _hexpowers
  1853  000256  24F3               	addwf	prodl,w,c
  1854  000258  6EF6               	movwf	tblptrl,c
  1855  00025A  0EFE               	movlw	high _hexpowers
  1856  00025C  20F4               	addwfc	prodh,w,c
  1857  00025E  6EF7               	movwf	tblptrh,c
  1858  000260                     	if	0	;There are less than 3 active tblptr bytes
  1859  000260                     	endif
  1860  000260  0009               	tblrd		*+
  1861  000262  50F5               	movf	tablat,w,c
  1862  000264  0100               	movlb	0	; () banked
  1863  000266  5D84               	subwf	printf@val& (0+255),w,b
  1864  000268  0009               	tblrd		*+
  1865  00026A  50F5               	movf	tablat,w,c
  1866  00026C  0100               	movlb	0	; () banked
  1867  00026E  5985               	subwfb	(printf@val+1)& (0+255),w,b
  1868  000270  A0D8               	btfss	status,0,c
  1869  000272  D00C               	goto	l2021
  1870                           
  1871                           ; BSR set to: 0
  1872                           
  1873                           ; BSR set to: 0
  1874                           
  1875                           ; BSR set to: 0
  1876                           ;doprnt.c: 1318: break;
  1877  000274  0100               	movlb	0	; () banked
  1878  000276  2B89               	incf	printf@c& (0+255),f,b
  1879  000278  D7E5               	goto	l2005
  1880  00027A                     l2019:
  1881                           
  1882                           ; BSR set to: 0
  1883  00027A  0100               	movlb	0	; () banked
  1884  00027C  5186               	movf	printf@flag& (0+255),w,b
  1885  00027E  0B80               	andlw	128
  1886                           
  1887                           ; Switch size 1, requested type "space"
  1888                           ; Number of cases is 2, Range of values is 0 to 128
  1889                           ; switch strategies available:
  1890                           ; Name         Instructions Cycles
  1891                           ; simple_byte            7     4 (average)
  1892                           ;	Chosen strategy is simple_byte
  1893  000280  0A00               	xorlw	0	; case 0
  1894  000282  B4D8               	btfsc	status,2,c
  1895  000284  D7BE               	goto	l1989
  1896  000286  0A80               	xorlw	128	; case 128
  1897  000288  B4D8               	btfsc	status,2,c
  1898  00028A  D7D9               	goto	l2003
  1899  00028C                     l2021:
  1900                           
  1901                           ; BSR set to: 0
  1902                           ;doprnt.c: 1345: if(width && flag & 0x03)
  1903  00028C  0100               	movlb	0	; () banked
  1904  00028E  5187               	movf	printf@width& (0+255),w,b
  1905  000290  0100               	movlb	0	; () banked
  1906  000292  1188               	iorwf	(printf@width+1)& (0+255),w,b
  1907  000294  B4D8               	btfsc	status,2,c
  1908  000296  D00A               	goto	l2027
  1909                           
  1910                           ; BSR set to: 0
  1911  000298  C086  F039         	movff	printf@flag,??_printf
  1912  00029C  0E03               	movlw	3
  1913  00029E  1639               	andwf	??_printf,f,c
  1914  0002A0  B4D8               	btfsc	status,2,c
  1915  0002A2  D004               	goto	l2027
  1916                           
  1917                           ; BSR set to: 0
  1918                           ;doprnt.c: 1346: width--;
  1919  0002A4  0100               	movlb	0	; () banked
  1920  0002A6  0787               	decf	printf@width& (0+255),f,b
  1921  0002A8  A0D8               	btfss	status,0,c
  1922  0002AA  0788               	decf	(printf@width+1)& (0+255),f,b
  1923  0002AC                     l2027:
  1924                           
  1925                           ; BSR set to: 0
  1926                           ;doprnt.c: 1381: if(width > c)
  1927  0002AC  0E80               	movlw	128
  1928  0002AE  0100               	movlb	0	; () banked
  1929  0002B0  BF89               	btfsc	printf@c& (0+255),7,b
  1930  0002B2  0E7F               	movlw	127
  1931  0002B4  6E39               	movwf	??_printf& (0+255),c
  1932  0002B6  0100               	movlb	0	; () banked
  1933  0002B8  5187               	movf	printf@width& (0+255),w,b
  1934  0002BA  0100               	movlb	0	; () banked
  1935  0002BC  5D89               	subwf	printf@c& (0+255),w,b
  1936  0002BE  0100               	movlb	0	; () banked
  1937  0002C0  5188               	movf	(printf@width+1)& (0+255),w,b
  1938  0002C2  0A80               	xorlw	128
  1939  0002C4  5839               	subwfb	??_printf& (0+255),w,c
  1940  0002C6  B0D8               	btfsc	status,0,c
  1941  0002C8  D00B               	goto	l2031
  1942                           
  1943                           ; BSR set to: 0
  1944                           ;doprnt.c: 1382: width -= c;
  1945  0002CA  0100               	movlb	0	; () banked
  1946  0002CC  5189               	movf	printf@c& (0+255),w,b
  1947  0002CE  0100               	movlb	0	; () banked
  1948  0002D0  5F87               	subwf	printf@width& (0+255),f,b
  1949  0002D2  0E00               	movlw	0
  1950  0002D4  0100               	movlb	0	; () banked
  1951  0002D6  BF89               	btfsc	printf@c& (0+255),7,b
  1952  0002D8  0EFF               	movlw	255
  1953  0002DA  0100               	movlb	0	; () banked
  1954  0002DC  5B88               	subwfb	(printf@width+1)& (0+255),f,b
  1955  0002DE  D005               	goto	l2033
  1956  0002E0                     l2031:
  1957                           
  1958                           ; BSR set to: 0
  1959                           ;doprnt.c: 1383: else
  1960                           ;doprnt.c: 1384: width = 0;
  1961  0002E0  0E00               	movlw	0
  1962  0002E2  0100               	movlb	0	; () banked
  1963  0002E4  6F88               	movwf	(printf@width+1)& (0+255),b
  1964  0002E6  0E00               	movlw	0
  1965  0002E8  6F87               	movwf	printf@width& (0+255),b
  1966  0002EA                     l2033:
  1967                           
  1968                           ; BSR set to: 0
  1969                           ;doprnt.c: 1387: if(flag & 0x04) {
  1970  0002EA  0100               	movlb	0	; () banked
  1971  0002EC  A586               	btfss	printf@flag& (0+255),2,b
  1972  0002EE  D017               	goto	l2045
  1973                           
  1974                           ; BSR set to: 0
  1975                           ;doprnt.c: 1392: if(flag & 0x03)
  1976  0002F0  C086  F039         	movff	printf@flag,??_printf
  1977  0002F4  0E03               	movlw	3
  1978  0002F6  1639               	andwf	??_printf,f,c
  1979  0002F8  B4D8               	btfsc	status,2,c
  1980  0002FA  D003               	goto	l2039
  1981                           
  1982                           ; BSR set to: 0
  1983                           ;doprnt.c: 1393: (putch('-') );
  1984  0002FC  0E2D               	movlw	45
  1985  0002FE  ECA6  F005         	call	_putch
  1986  000302                     l2039:
  1987                           
  1988                           ;doprnt.c: 1415: if(width)
  1989  000302  0100               	movlb	0	; () banked
  1990  000304  5187               	movf	printf@width& (0+255),w,b
  1991  000306  0100               	movlb	0	; () banked
  1992  000308  1188               	iorwf	(printf@width+1)& (0+255),w,b
  1993  00030A  B4D8               	btfsc	status,2,c
  1994  00030C  D024               	goto	l2055
  1995                           
  1996                           ; BSR set to: 0
  1997                           ;doprnt.c: 1417: (putch('0') );
  1998                           
  1999                           ; BSR set to: 0
  2000                           
  2001                           ;doprnt.c: 1416: do
  2002  00030E  0E30               	movlw	48
  2003  000310  ECA6  F005         	call	_putch
  2004                           
  2005                           ;doprnt.c: 1418: while(--width);
  2006  000314  0100               	movlb	0	; () banked
  2007  000316  0787               	decf	printf@width& (0+255),f,b
  2008  000318  A0D8               	btfss	status,0,c
  2009  00031A  0788               	decf	(printf@width+1)& (0+255),f,b
  2010  00031C  D7F2               	goto	l2039
  2011  00031E                     l2045:
  2012                           
  2013                           ; BSR set to: 0
  2014                           ;doprnt.c: 1422: {
  2015                           ;doprnt.c: 1424: if(width
  2016                           ;doprnt.c: 1428: )
  2017  00031E  0100               	movlb	0	; () banked
  2018  000320  5187               	movf	printf@width& (0+255),w,b
  2019  000322  0100               	movlb	0	; () banked
  2020  000324  1188               	iorwf	(printf@width+1)& (0+255),w,b
  2021  000326  B4D8               	btfsc	status,2,c
  2022  000328  D00D               	goto	l2051
  2023  00032A                     l2047:
  2024                           
  2025                           ; BSR set to: 0
  2026                           ;doprnt.c: 1430: (putch(' ') );
  2027  00032A  0E20               	movlw	32
  2028  00032C  ECA6  F005         	call	_putch
  2029                           
  2030                           ;doprnt.c: 1431: while(--width);
  2031  000330  0100               	movlb	0	; () banked
  2032  000332  0787               	decf	printf@width& (0+255),f,b
  2033  000334  A0D8               	btfss	status,0,c
  2034  000336  0788               	decf	(printf@width+1)& (0+255),f,b
  2035  000338  0100               	movlb	0	; () banked
  2036  00033A  5187               	movf	printf@width& (0+255),w,b
  2037  00033C  0100               	movlb	0	; () banked
  2038  00033E  1188               	iorwf	(printf@width+1)& (0+255),w,b
  2039  000340  A4D8               	btfss	status,2,c
  2040  000342  D7F3               	goto	l2047
  2041  000344                     l2051:
  2042                           
  2043                           ; BSR set to: 0
  2044                           ;doprnt.c: 1438: if(flag & 0x03)
  2045  000344  C086  F039         	movff	printf@flag,??_printf
  2046  000348  0E03               	movlw	3
  2047  00034A  1639               	andwf	??_printf,f,c
  2048  00034C  B4D8               	btfsc	status,2,c
  2049  00034E  D003               	goto	l2055
  2050                           
  2051                           ; BSR set to: 0
  2052                           ;doprnt.c: 1439: (putch('-') );
  2053  000350  0E2D               	movlw	45
  2054  000352  ECA6  F005         	call	_putch
  2055  000356                     l2055:
  2056                           
  2057                           ;doprnt.c: 1469: }
  2058                           ;doprnt.c: 1472: prec = c;
  2059  000356  C089  F083         	movff	printf@c,printf@prec
  2060                           
  2061                           ;doprnt.c: 1474: while(prec--) {
  2062  00035A  D057               	goto	l2069
  2063  00035C                     l2057:
  2064                           
  2065                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2066  00035C  0100               	movlb	0	; () banked
  2067  00035E  5183               	movf	printf@prec& (0+255),w,b
  2068  000360  0D02               	mullw	2
  2069  000362  0E8C               	movlw	low _dpowers
  2070  000364  24F3               	addwf	prodl,w,c
  2071  000366  6EF6               	movwf	tblptrl,c
  2072  000368  0EFE               	movlw	high _dpowers
  2073  00036A  20F4               	addwfc	prodh,w,c
  2074  00036C  6EF7               	movwf	tblptrh,c
  2075  00036E                     	if	0	;There are less than 3 active tblptr bytes
  2076  00036E                     	endif
  2077  00036E  0009               	tblrd		*+
  2078  000370  CFF5 F027          	movff	tablat,___lwdiv@divisor
  2079  000374  000A               	tblrd		*-
  2080  000376  CFF5 F028          	movff	tablat,___lwdiv@divisor+1
  2081  00037A  C084  F025         	movff	printf@val,___lwdiv@dividend
  2082  00037E  C085  F026         	movff	printf@val+1,___lwdiv@dividend+1
  2083  000382  ECA3  F004         	call	___lwdiv	;wreg free
  2084  000386  C025  F02C         	movff	?___lwdiv,___lwmod@dividend
  2085  00038A  C026  F02D         	movff	?___lwdiv+1,___lwmod@dividend+1
  2086  00038E  0E00               	movlw	0
  2087  000390  6E2F               	movwf	___lwmod@divisor+1,c
  2088  000392  0E0A               	movlw	10
  2089  000394  6E2E               	movwf	___lwmod@divisor,c
  2090  000396  EC16  F005         	call	___lwmod	;wreg free
  2091  00039A  502C               	movf	?___lwmod,w,c
  2092  00039C  0F30               	addlw	48
  2093  00039E  0100               	movlb	0	; () banked
  2094  0003A0  6F89               	movwf	printf@c& (0+255),b
  2095                           
  2096                           ;doprnt.c: 1491: break;
  2097  0003A2  D02F               	goto	l2067
  2098  0003A4                     l2059:
  2099                           
  2100                           ; BSR set to: 0
  2101                           ;doprnt.c: 1499: {
  2102                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  2103  0003A4  C084  F025         	movff	printf@val,___lwdiv@dividend
  2104  0003A8  C085  F026         	movff	printf@val+1,___lwdiv@dividend+1
  2105  0003AC  0100               	movlb	0	; () banked
  2106  0003AE  5183               	movf	printf@prec& (0+255),w,b
  2107  0003B0  0D02               	mullw	2
  2108  0003B2  0E96               	movlw	low _hexpowers
  2109  0003B4  24F3               	addwf	prodl,w,c
  2110  0003B6  6EF6               	movwf	tblptrl,c
  2111  0003B8  0EFE               	movlw	high _hexpowers
  2112  0003BA  20F4               	addwfc	prodh,w,c
  2113  0003BC  6EF7               	movwf	tblptrh,c
  2114  0003BE                     	if	0	;There are less than 3 active tblptr bytes
  2115  0003BE                     	endif
  2116  0003BE  0009               	tblrd		*+
  2117  0003C0  CFF5 F027          	movff	tablat,___lwdiv@divisor
  2118  0003C4  000A               	tblrd		*-
  2119  0003C6  CFF5 F028          	movff	tablat,___lwdiv@divisor+1
  2120  0003CA  ECA3  F004         	call	___lwdiv	;wreg free
  2121  0003CE  5025               	movf	?___lwdiv,w,c
  2122  0003D0  0B0F               	andlw	15
  2123  0003D2  0100               	movlb	0	; () banked
  2124  0003D4  6F80               	movwf	printf@idx& (0+255),b
  2125                           
  2126                           ; BSR set to: 0
  2127                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  2128  0003D6  0100               	movlb	0	; () banked
  2129  0003D8  5180               	movf	printf@idx& (0+255),w,b
  2130  0003DA  0D01               	mullw	1
  2131  0003DC  0E22               	movlw	low STR_20
  2132  0003DE  24F3               	addwf	prodl,w,c
  2133  0003E0  6EF6               	movwf	tblptrl,c
  2134  0003E2  0EFF               	movlw	high STR_20
  2135  0003E4  20F4               	addwfc	prodh,w,c
  2136  0003E6  6EF7               	movwf	tblptrh,c
  2137  0003E8                     	if	0	;There are less than 3 active tblptr bytes
  2138  0003E8                     	endif
  2139  0003E8  0008               	tblrd		*
  2140  0003EA  CFF5 F089          	movff	tablat,printf@c
  2141                           
  2142                           ; BSR set to: 0
  2143                           ;doprnt.c: 1523: }
  2144                           
  2145                           ;doprnt.c: 1508: }
  2146                           ;doprnt.c: 1510: break;
  2147  0003EE  D009               	goto	l2067
  2148  0003F0                     l2065:
  2149  0003F0  0100               	movlb	0	; () banked
  2150  0003F2  5186               	movf	printf@flag& (0+255),w,b
  2151  0003F4  0B80               	andlw	128
  2152                           
  2153                           ; Switch size 1, requested type "space"
  2154                           ; Number of cases is 2, Range of values is 0 to 128
  2155                           ; switch strategies available:
  2156                           ; Name         Instructions Cycles
  2157                           ; simple_byte            7     4 (average)
  2158                           ;	Chosen strategy is simple_byte
  2159  0003F6  0A00               	xorlw	0	; case 0
  2160  0003F8  B4D8               	btfsc	status,2,c
  2161  0003FA  D7B0               	goto	l2057
  2162  0003FC  0A80               	xorlw	128	; case 128
  2163  0003FE  B4D8               	btfsc	status,2,c
  2164  000400  D7D1               	goto	l2059
  2165  000402                     l2067:
  2166                           
  2167                           ; BSR set to: 0
  2168                           ;doprnt.c: 1524: (putch(c) );
  2169  000402  0100               	movlb	0	; () banked
  2170  000404  5189               	movf	printf@c& (0+255),w,b
  2171  000406  ECA6  F005         	call	_putch
  2172  00040A                     l2069:
  2173  00040A  0100               	movlb	0	; () banked
  2174  00040C  0783               	decf	printf@prec& (0+255),f,b
  2175  00040E  0100               	movlb	0	; () banked
  2176  000410  2983               	incf	printf@prec& (0+255),w,b
  2177  000412  A4D8               	btfss	status,2,c
  2178  000414  D7ED               	goto	l2065
  2179  000416                     l2071:
  2180  000416  C031  FFF6         	movff	printf@f,tblptrl
  2181  00041A  C032  FFF7         	movff	printf@f+1,tblptrh
  2182  00041E  4A31               	infsnz	printf@f,f,c
  2183  000420  2A32               	incf	printf@f+1,f,c
  2184  000422                     	if	0	;tblptru may be non-zero
  2185  000422                     	endif
  2186  000422                     	if	0	;tblptru may be non-zero
  2187  000422                     	endif
  2188  000422  0008               	tblrd		*
  2189  000424  CFF5 F089          	movff	tablat,printf@c
  2190  000428  0100               	movlb	0	; () banked
  2191  00042A  5189               	movf	printf@c& (0+255),w,b
  2192  00042C  B4D8               	btfsc	status,2,c
  2193  00042E  0012               	return	
  2194  000430  D643               	goto	l1945
  2195  000432                     __end_of_printf:
  2196                           	opt stack 0
  2197                           tblptru	equ	0xFF8
  2198                           tblptrh	equ	0xFF7
  2199                           tblptrl	equ	0xFF6
  2200                           tablat	equ	0xFF5
  2201                           prodh	equ	0xFF4
  2202                           prodl	equ	0xFF3
  2203                           intcon	equ	0xFF2
  2204                           intcon3	equ	0xFF0
  2205                           postinc0	equ	0xFEE
  2206                           wreg	equ	0xFE8
  2207                           indf2	equ	0xFDF
  2208                           postinc2	equ	0xFDE
  2209                           postdec2	equ	0xFDD
  2210                           fsr2h	equ	0xFDA
  2211                           fsr2l	equ	0xFD9
  2212                           status	equ	0xFD8
  2213                           
  2214 ;; *************** function _putch *****************
  2215 ;; Defined at:
  2216 ;;		line 30 in file "../lcd.c"
  2217 ;; Parameters:    Size  Location     Type
  2218 ;;  data            1    wreg     unsigned char 
  2219 ;; Auto vars:     Size  Location     Type
  2220 ;;  data            1   38[COMRAM] unsigned char 
  2221 ;; Return value:  Size  Location     Type
  2222 ;;                  1    wreg      void 
  2223 ;; Registers used:
  2224 ;;		wreg, status,2, status,0, cstack
  2225 ;; Tracked objects:
  2226 ;;		On entry : 0/0
  2227 ;;		On exit  : 0/0
  2228 ;;		Unchanged: 0/0
  2229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2230 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2231 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2232 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2233 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2234 ;;Total ram usage:        1 bytes
  2235 ;; Hardware stack levels used:    1
  2236 ;; Hardware stack levels required when called:    4
  2237 ;; This function calls:
  2238 ;;		_lcdNibble
  2239 ;; This function is called by:
  2240 ;;		_printf
  2241 ;; This function uses a non-reentrant model
  2242 ;;
  2243                           
  2244                           	psect	text2
  2245  000B4C                     __ptext2:
  2246                           	opt stack 0
  2247  000B4C                     _putch:
  2248                           	opt stack 25
  2249                           
  2250                           ;incstack = 0
  2251                           ;putch@data stored from wreg
  2252  000B4C  6E27               	movwf	putch@data,c
  2253                           
  2254                           ;lcd.c: 31: LATDbits.LATD2 = 1;
  2255  000B4E  848C               	bsf	3980,2,c	;volatile
  2256                           
  2257                           ;lcd.c: 32: lcdNibble(data);
  2258  000B50  5027               	movf	putch@data,w,c
  2259  000B52  ECCC  F004         	call	_lcdNibble
  2260  000B56  0012               	return		;funcret
  2261  000B58                     __end_of_putch:
  2262                           	opt stack 0
  2263                           tblptru	equ	0xFF8
  2264                           tblptrh	equ	0xFF7
  2265                           tblptrl	equ	0xFF6
  2266                           tablat	equ	0xFF5
  2267                           prodh	equ	0xFF4
  2268                           prodl	equ	0xFF3
  2269                           intcon	equ	0xFF2
  2270                           intcon3	equ	0xFF0
  2271                           postinc0	equ	0xFEE
  2272                           wreg	equ	0xFE8
  2273                           indf2	equ	0xFDF
  2274                           postinc2	equ	0xFDE
  2275                           postdec2	equ	0xFDD
  2276                           fsr2h	equ	0xFDA
  2277                           fsr2l	equ	0xFD9
  2278                           status	equ	0xFD8
  2279                           
  2280 ;; *************** function _isdigit *****************
  2281 ;; Defined at:
  2282 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  2283 ;; Parameters:    Size  Location     Type
  2284 ;;  c               1    wreg     unsigned char 
  2285 ;; Auto vars:     Size  Location     Type
  2286 ;;  c               1   38[COMRAM] unsigned char 
  2287 ;; Return value:  Size  Location     Type
  2288 ;;		None               void
  2289 ;; Registers used:
  2290 ;;		wreg, status,2, status,0
  2291 ;; Tracked objects:
  2292 ;;		On entry : 0/0
  2293 ;;		On exit  : 0/0
  2294 ;;		Unchanged: 0/0
  2295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2297 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2298 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2299 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2300 ;;Total ram usage:        3 bytes
  2301 ;; Hardware stack levels used:    1
  2302 ;; Hardware stack levels required when called:    3
  2303 ;; This function calls:
  2304 ;;		Nothing
  2305 ;; This function is called by:
  2306 ;;		_printf
  2307 ;; This function uses a non-reentrant model
  2308 ;;
  2309                           
  2310                           	psect	text3
  2311  000B1C                     __ptext3:
  2312                           	opt stack 0
  2313  000B1C                     _isdigit:
  2314                           	opt stack 26
  2315                           
  2316                           ;incstack = 0
  2317                           ;isdigit@c stored from wreg
  2318  000B1C  6E27               	movwf	isdigit@c,c
  2319  000B1E  0E00               	movlw	0
  2320  000B20  6E26               	movwf	_isdigit$544,c
  2321  000B22  0E3A               	movlw	58
  2322  000B24  6027               	cpfslt	isdigit@c,c
  2323  000B26  D005               	goto	l1881
  2324  000B28  0E2F               	movlw	47
  2325  000B2A  6427               	cpfsgt	isdigit@c,c
  2326  000B2C  D002               	goto	l1881
  2327  000B2E  0E01               	movlw	1
  2328  000B30  6E26               	movwf	_isdigit$544,c
  2329  000B32                     l1881:
  2330  000B32  C026  F025         	movff	_isdigit$544,??_isdigit
  2331  000B36  3025               	rrcf	??_isdigit,w,c
  2332  000B38  0012               	return	
  2333  000B3A                     __end_of_isdigit:
  2334                           	opt stack 0
  2335                           tblptru	equ	0xFF8
  2336                           tblptrh	equ	0xFF7
  2337                           tblptrl	equ	0xFF6
  2338                           tablat	equ	0xFF5
  2339                           prodh	equ	0xFF4
  2340                           prodl	equ	0xFF3
  2341                           intcon	equ	0xFF2
  2342                           intcon3	equ	0xFF0
  2343                           postinc0	equ	0xFEE
  2344                           wreg	equ	0xFE8
  2345                           indf2	equ	0xFDF
  2346                           postinc2	equ	0xFDE
  2347                           postdec2	equ	0xFDD
  2348                           fsr2h	equ	0xFDA
  2349                           fsr2l	equ	0xFD9
  2350                           status	equ	0xFD8
  2351                           
  2352 ;; *************** function ___wmul *****************
  2353 ;; Defined at:
  2354 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  2355 ;; Parameters:    Size  Location     Type
  2356 ;;  multiplier      2   36[COMRAM] unsigned int 
  2357 ;;  multiplicand    2   38[COMRAM] unsigned int 
  2358 ;; Auto vars:     Size  Location     Type
  2359 ;;  product         2   40[COMRAM] unsigned int 
  2360 ;; Return value:  Size  Location     Type
  2361 ;;                  2   36[COMRAM] unsigned int 
  2362 ;; Registers used:
  2363 ;;		wreg, status,2, status,0, prodl, prodh
  2364 ;; Tracked objects:
  2365 ;;		On entry : 0/0
  2366 ;;		On exit  : 0/0
  2367 ;;		Unchanged: 0/0
  2368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2369 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2370 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2372 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2373 ;;Total ram usage:        6 bytes
  2374 ;; Hardware stack levels used:    1
  2375 ;; Hardware stack levels required when called:    3
  2376 ;; This function calls:
  2377 ;;		Nothing
  2378 ;; This function is called by:
  2379 ;;		_printf
  2380 ;; This function uses a non-reentrant model
  2381 ;;
  2382                           
  2383                           	psect	text4
  2384  000AD0                     __ptext4:
  2385                           	opt stack 0
  2386  000AD0                     ___wmul:
  2387                           	opt stack 26
  2388                           
  2389                           ;incstack = 0
  2390  000AD0  5025               	movf	___wmul@multiplier,w,c
  2391  000AD2  0227               	mulwf	___wmul@multiplicand,c
  2392  000AD4  CFF3 F029          	movff	prodl,___wmul@product
  2393  000AD8  CFF4 F02A          	movff	prodh,___wmul@product+1
  2394  000ADC  5025               	movf	___wmul@multiplier,w,c
  2395  000ADE  0228               	mulwf	___wmul@multiplicand+1,c
  2396  000AE0  50F3               	movf	prodl,w,c
  2397  000AE2  262A               	addwf	___wmul@product+1,f,c
  2398  000AE4  5026               	movf	___wmul@multiplier+1,w,c
  2399  000AE6  0227               	mulwf	___wmul@multiplicand,c
  2400  000AE8  50F3               	movf	prodl,w,c
  2401  000AEA  262A               	addwf	___wmul@product+1,f,c
  2402  000AEC  C029  F025         	movff	___wmul@product,?___wmul
  2403  000AF0  C02A  F026         	movff	___wmul@product+1,?___wmul+1
  2404  000AF4  0012               	return	
  2405  000AF6                     __end_of___wmul:
  2406                           	opt stack 0
  2407                           tblptru	equ	0xFF8
  2408                           tblptrh	equ	0xFF7
  2409                           tblptrl	equ	0xFF6
  2410                           tablat	equ	0xFF5
  2411                           prodh	equ	0xFF4
  2412                           prodl	equ	0xFF3
  2413                           intcon	equ	0xFF2
  2414                           intcon3	equ	0xFF0
  2415                           postinc0	equ	0xFEE
  2416                           wreg	equ	0xFE8
  2417                           indf2	equ	0xFDF
  2418                           postinc2	equ	0xFDE
  2419                           postdec2	equ	0xFDD
  2420                           fsr2h	equ	0xFDA
  2421                           fsr2l	equ	0xFD9
  2422                           status	equ	0xFD8
  2423                           
  2424 ;; *************** function ___lwmod *****************
  2425 ;; Defined at:
  2426 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  2427 ;; Parameters:    Size  Location     Type
  2428 ;;  dividend        2   43[COMRAM] unsigned int 
  2429 ;;  divisor         2   45[COMRAM] unsigned int 
  2430 ;; Auto vars:     Size  Location     Type
  2431 ;;  counter         1   47[COMRAM] unsigned char 
  2432 ;; Return value:  Size  Location     Type
  2433 ;;                  2   43[COMRAM] unsigned int 
  2434 ;; Registers used:
  2435 ;;		wreg, status,2, status,0
  2436 ;; Tracked objects:
  2437 ;;		On entry : 0/0
  2438 ;;		On exit  : 0/0
  2439 ;;		Unchanged: 0/0
  2440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2441 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2442 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2443 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2444 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2445 ;;Total ram usage:        5 bytes
  2446 ;; Hardware stack levels used:    1
  2447 ;; Hardware stack levels required when called:    3
  2448 ;; This function calls:
  2449 ;;		Nothing
  2450 ;; This function is called by:
  2451 ;;		_printf
  2452 ;; This function uses a non-reentrant model
  2453 ;;
  2454                           
  2455                           	psect	text5
  2456  000A2C                     __ptext5:
  2457                           	opt stack 0
  2458  000A2C                     ___lwmod:
  2459                           	opt stack 26
  2460                           
  2461                           ;incstack = 0
  2462  000A2C  502E               	movf	___lwmod@divisor,w,c
  2463  000A2E  102F               	iorwf	___lwmod@divisor+1,w,c
  2464  000A30  B4D8               	btfsc	status,2,c
  2465  000A32  D018               	goto	l708
  2466  000A34  0E01               	movlw	1
  2467  000A36  6E30               	movwf	___lwmod@counter,c
  2468  000A38  D004               	goto	l1919
  2469  000A3A                     l1917:
  2470  000A3A  90D8               	bcf	status,0,c
  2471  000A3C  362E               	rlcf	___lwmod@divisor,f,c
  2472  000A3E  362F               	rlcf	___lwmod@divisor+1,f,c
  2473  000A40  2A30               	incf	___lwmod@counter,f,c
  2474  000A42                     l1919:
  2475  000A42  AE2F               	btfss	___lwmod@divisor+1,7,c
  2476  000A44  D7FA               	goto	l1917
  2477  000A46                     l1921:
  2478  000A46  502E               	movf	___lwmod@divisor,w,c
  2479  000A48  5C2C               	subwf	___lwmod@dividend,w,c
  2480  000A4A  502F               	movf	___lwmod@divisor+1,w,c
  2481  000A4C  582D               	subwfb	___lwmod@dividend+1,w,c
  2482  000A4E  A0D8               	btfss	status,0,c
  2483  000A50  D004               	goto	l1925
  2484  000A52  502E               	movf	___lwmod@divisor,w,c
  2485  000A54  5E2C               	subwf	___lwmod@dividend,f,c
  2486  000A56  502F               	movf	___lwmod@divisor+1,w,c
  2487  000A58  5A2D               	subwfb	___lwmod@dividend+1,f,c
  2488  000A5A                     l1925:
  2489  000A5A  90D8               	bcf	status,0,c
  2490  000A5C  322F               	rrcf	___lwmod@divisor+1,f,c
  2491  000A5E  322E               	rrcf	___lwmod@divisor,f,c
  2492  000A60  2E30               	decfsz	___lwmod@counter,f,c
  2493  000A62  D7F1               	goto	l1921
  2494  000A64                     l708:
  2495  000A64  C02C  F02C         	movff	___lwmod@dividend,?___lwmod
  2496  000A68  C02D  F02D         	movff	___lwmod@dividend+1,?___lwmod+1
  2497  000A6C  0012               	return		;funcret
  2498  000A6E                     __end_of___lwmod:
  2499                           	opt stack 0
  2500                           tblptru	equ	0xFF8
  2501                           tblptrh	equ	0xFF7
  2502                           tblptrl	equ	0xFF6
  2503                           tablat	equ	0xFF5
  2504                           prodh	equ	0xFF4
  2505                           prodl	equ	0xFF3
  2506                           intcon	equ	0xFF2
  2507                           intcon3	equ	0xFF0
  2508                           postinc0	equ	0xFEE
  2509                           wreg	equ	0xFE8
  2510                           indf2	equ	0xFDF
  2511                           postinc2	equ	0xFDE
  2512                           postdec2	equ	0xFDD
  2513                           fsr2h	equ	0xFDA
  2514                           fsr2l	equ	0xFD9
  2515                           status	equ	0xFD8
  2516                           
  2517 ;; *************** function ___lwdiv *****************
  2518 ;; Defined at:
  2519 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  2520 ;; Parameters:    Size  Location     Type
  2521 ;;  dividend        2   36[COMRAM] unsigned int 
  2522 ;;  divisor         2   38[COMRAM] unsigned int 
  2523 ;; Auto vars:     Size  Location     Type
  2524 ;;  quotient        2   41[COMRAM] unsigned int 
  2525 ;;  counter         1   40[COMRAM] unsigned char 
  2526 ;; Return value:  Size  Location     Type
  2527 ;;                  2   36[COMRAM] unsigned int 
  2528 ;; Registers used:
  2529 ;;		wreg, status,2, status,0
  2530 ;; Tracked objects:
  2531 ;;		On entry : 0/0
  2532 ;;		On exit  : 0/0
  2533 ;;		Unchanged: 0/0
  2534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2535 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2536 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2537 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2538 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2539 ;;Total ram usage:        7 bytes
  2540 ;; Hardware stack levels used:    1
  2541 ;; Hardware stack levels required when called:    3
  2542 ;; This function calls:
  2543 ;;		Nothing
  2544 ;; This function is called by:
  2545 ;;		_printf
  2546 ;; This function uses a non-reentrant model
  2547 ;;
  2548                           
  2549                           	psect	text6
  2550  000946                     __ptext6:
  2551                           	opt stack 0
  2552  000946                     ___lwdiv:
  2553                           	opt stack 26
  2554                           
  2555                           ;incstack = 0
  2556  000946  0E00               	movlw	0
  2557  000948  6E2B               	movwf	___lwdiv@quotient+1,c
  2558  00094A  0E00               	movlw	0
  2559  00094C  6E2A               	movwf	___lwdiv@quotient,c
  2560  00094E  5027               	movf	___lwdiv@divisor,w,c
  2561  000950  1028               	iorwf	___lwdiv@divisor+1,w,c
  2562  000952  B4D8               	btfsc	status,2,c
  2563  000954  D01C               	goto	l698
  2564  000956  0E01               	movlw	1
  2565  000958  6E29               	movwf	___lwdiv@counter,c
  2566  00095A  D004               	goto	l1899
  2567  00095C                     l1897:
  2568  00095C  90D8               	bcf	status,0,c
  2569  00095E  3627               	rlcf	___lwdiv@divisor,f,c
  2570  000960  3628               	rlcf	___lwdiv@divisor+1,f,c
  2571  000962  2A29               	incf	___lwdiv@counter,f,c
  2572  000964                     l1899:
  2573  000964  AE28               	btfss	___lwdiv@divisor+1,7,c
  2574  000966  D7FA               	goto	l1897
  2575  000968                     l1901:
  2576  000968  90D8               	bcf	status,0,c
  2577  00096A  362A               	rlcf	___lwdiv@quotient,f,c
  2578  00096C  362B               	rlcf	___lwdiv@quotient+1,f,c
  2579  00096E  5027               	movf	___lwdiv@divisor,w,c
  2580  000970  5C25               	subwf	___lwdiv@dividend,w,c
  2581  000972  5028               	movf	___lwdiv@divisor+1,w,c
  2582  000974  5826               	subwfb	___lwdiv@dividend+1,w,c
  2583  000976  A0D8               	btfss	status,0,c
  2584  000978  D005               	goto	l1909
  2585  00097A  5027               	movf	___lwdiv@divisor,w,c
  2586  00097C  5E25               	subwf	___lwdiv@dividend,f,c
  2587  00097E  5028               	movf	___lwdiv@divisor+1,w,c
  2588  000980  5A26               	subwfb	___lwdiv@dividend+1,f,c
  2589  000982  802A               	bsf	___lwdiv@quotient,0,c
  2590  000984                     l1909:
  2591  000984  90D8               	bcf	status,0,c
  2592  000986  3228               	rrcf	___lwdiv@divisor+1,f,c
  2593  000988  3227               	rrcf	___lwdiv@divisor,f,c
  2594  00098A  2E29               	decfsz	___lwdiv@counter,f,c
  2595  00098C  D7ED               	goto	l1901
  2596  00098E                     l698:
  2597  00098E  C02A  F025         	movff	___lwdiv@quotient,?___lwdiv
  2598  000992  C02B  F026         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2599  000996  0012               	return		;funcret
  2600  000998                     __end_of___lwdiv:
  2601                           	opt stack 0
  2602                           tblptru	equ	0xFF8
  2603                           tblptrh	equ	0xFF7
  2604                           tblptrl	equ	0xFF6
  2605                           tablat	equ	0xFF5
  2606                           prodh	equ	0xFF4
  2607                           prodl	equ	0xFF3
  2608                           intcon	equ	0xFF2
  2609                           intcon3	equ	0xFF0
  2610                           postinc0	equ	0xFEE
  2611                           wreg	equ	0xFE8
  2612                           indf2	equ	0xFDF
  2613                           postinc2	equ	0xFDE
  2614                           postdec2	equ	0xFDD
  2615                           fsr2h	equ	0xFDA
  2616                           fsr2l	equ	0xFD9
  2617                           status	equ	0xFD8
  2618                           
  2619 ;; *************** function _initLCD *****************
  2620 ;; Defined at:
  2621 ;;		line 14 in file "../lcd.c"
  2622 ;; Parameters:    Size  Location     Type
  2623 ;;		None
  2624 ;; Auto vars:     Size  Location     Type
  2625 ;;		None
  2626 ;; Return value:  Size  Location     Type
  2627 ;;                  1    wreg      void 
  2628 ;; Registers used:
  2629 ;;		wreg, status,2, status,0, cstack
  2630 ;; Tracked objects:
  2631 ;;		On entry : 0/0
  2632 ;;		On exit  : 0/0
  2633 ;;		Unchanged: 0/0
  2634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2635 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2636 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2637 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2638 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2639 ;;Total ram usage:        1 bytes
  2640 ;; Hardware stack levels used:    1
  2641 ;; Hardware stack levels required when called:    5
  2642 ;; This function calls:
  2643 ;;		_lcdInst
  2644 ;; This function is called by:
  2645 ;;		_main
  2646 ;; This function uses a non-reentrant model
  2647 ;;
  2648                           
  2649                           	psect	text7
  2650  0009E6                     __ptext7:
  2651                           	opt stack 0
  2652  0009E6                     _initLCD:
  2653                           	opt stack 25
  2654                           
  2655                           ;lcd.c: 15: _delay((unsigned long)((15)*(10000000/4000.0)));
  2656                           
  2657                           ;incstack = 0
  2658  0009E6  0E31               	movlw	49
  2659  0009E8  6E28               	movwf	??_initLCD& (0+255),c
  2660  0009EA  0EB2               	movlw	178
  2661  0009EC                     u1897:
  2662  0009EC  2EE8               	decfsz	wreg,f,c
  2663  0009EE  D7FE               	bra	u1897
  2664  0009F0  2E28               	decfsz	??_initLCD& (0+255),f,c
  2665  0009F2  D7FC               	bra	u1897
  2666  0009F4  D000               	nop2	
  2667                           
  2668                           ;lcd.c: 16: lcdInst(0b00110011);
  2669  0009F6  0E33               	movlw	51
  2670  0009F8  ECAC  F005         	call	_lcdInst
  2671                           
  2672                           ;lcd.c: 17: lcdInst(0b00110010);
  2673  0009FC  0E32               	movlw	50
  2674  0009FE  ECAC  F005         	call	_lcdInst
  2675                           
  2676                           ;lcd.c: 18: lcdInst(0b00101000);
  2677  000A02  0E28               	movlw	40
  2678  000A04  ECAC  F005         	call	_lcdInst
  2679                           
  2680                           ;lcd.c: 19: lcdInst(0b00001111);
  2681  000A08  0E0F               	movlw	15
  2682  000A0A  ECAC  F005         	call	_lcdInst
  2683                           
  2684                           ;lcd.c: 20: lcdInst(0b00000110);
  2685  000A0E  0E06               	movlw	6
  2686  000A10  ECAC  F005         	call	_lcdInst
  2687                           
  2688                           ;lcd.c: 21: lcdInst(0b00000001);
  2689  000A14  0E01               	movlw	1
  2690  000A16  ECAC  F005         	call	_lcdInst
  2691                           
  2692                           ;lcd.c: 22: _delay((unsigned long)((15)*(10000000/4000.0)));
  2693  000A1A  0E31               	movlw	49
  2694  000A1C  6E28               	movwf	??_initLCD& (0+255),c
  2695  000A1E  0EB2               	movlw	178
  2696  000A20                     u1907:
  2697  000A20  2EE8               	decfsz	wreg,f,c
  2698  000A22  D7FE               	bra	u1907
  2699  000A24  2E28               	decfsz	??_initLCD& (0+255),f,c
  2700  000A26  D7FC               	bra	u1907
  2701  000A28  D000               	nop2	
  2702  000A2A  0012               	return		;funcret
  2703  000A2C                     __end_of_initLCD:
  2704                           	opt stack 0
  2705                           tblptru	equ	0xFF8
  2706                           tblptrh	equ	0xFF7
  2707                           tblptrl	equ	0xFF6
  2708                           tablat	equ	0xFF5
  2709                           prodh	equ	0xFF4
  2710                           prodl	equ	0xFF3
  2711                           intcon	equ	0xFF2
  2712                           intcon3	equ	0xFF0
  2713                           postinc0	equ	0xFEE
  2714                           wreg	equ	0xFE8
  2715                           indf2	equ	0xFDF
  2716                           postinc2	equ	0xFDE
  2717                           postdec2	equ	0xFDD
  2718                           fsr2h	equ	0xFDA
  2719                           fsr2l	equ	0xFD9
  2720                           status	equ	0xFD8
  2721                           
  2722 ;; *************** function _lcdInst *****************
  2723 ;; Defined at:
  2724 ;;		line 25 in file "../lcd.c"
  2725 ;; Parameters:    Size  Location     Type
  2726 ;;  data            1    wreg     unsigned char 
  2727 ;; Auto vars:     Size  Location     Type
  2728 ;;  data            1   38[COMRAM] unsigned char 
  2729 ;; Return value:  Size  Location     Type
  2730 ;;                  1    wreg      void 
  2731 ;; Registers used:
  2732 ;;		wreg, status,2, status,0, cstack
  2733 ;; Tracked objects:
  2734 ;;		On entry : 0/0
  2735 ;;		On exit  : 0/0
  2736 ;;		Unchanged: 0/0
  2737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2738 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2739 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2740 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2741 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2742 ;;Total ram usage:        1 bytes
  2743 ;; Hardware stack levels used:    1
  2744 ;; Hardware stack levels required when called:    4
  2745 ;; This function calls:
  2746 ;;		_lcdNibble
  2747 ;; This function is called by:
  2748 ;;		_initLCD
  2749 ;;		_main
  2750 ;; This function uses a non-reentrant model
  2751 ;;
  2752                           
  2753                           	psect	text8
  2754  000B58                     __ptext8:
  2755                           	opt stack 0
  2756  000B58                     _lcdInst:
  2757                           	opt stack 26
  2758                           
  2759                           ;incstack = 0
  2760                           ;lcdInst@data stored from wreg
  2761  000B58  6E27               	movwf	lcdInst@data,c
  2762                           
  2763                           ;lcd.c: 26: LATDbits.LATD2 = 0;
  2764  000B5A  948C               	bcf	3980,2,c	;volatile
  2765                           
  2766                           ;lcd.c: 27: lcdNibble(data);
  2767  000B5C  5027               	movf	lcdInst@data,w,c
  2768  000B5E  ECCC  F004         	call	_lcdNibble
  2769  000B62  0012               	return		;funcret
  2770  000B64                     __end_of_lcdInst:
  2771                           	opt stack 0
  2772                           tblptru	equ	0xFF8
  2773                           tblptrh	equ	0xFF7
  2774                           tblptrl	equ	0xFF6
  2775                           tablat	equ	0xFF5
  2776                           prodh	equ	0xFF4
  2777                           prodl	equ	0xFF3
  2778                           intcon	equ	0xFF2
  2779                           intcon3	equ	0xFF0
  2780                           postinc0	equ	0xFEE
  2781                           wreg	equ	0xFE8
  2782                           indf2	equ	0xFDF
  2783                           postinc2	equ	0xFDE
  2784                           postdec2	equ	0xFDD
  2785                           fsr2h	equ	0xFDA
  2786                           fsr2l	equ	0xFD9
  2787                           status	equ	0xFD8
  2788                           
  2789 ;; *************** function _lcdNibble *****************
  2790 ;; Defined at:
  2791 ;;		line 35 in file "../lcd.c"
  2792 ;; Parameters:    Size  Location     Type
  2793 ;;  data            1    wreg     unsigned char 
  2794 ;; Auto vars:     Size  Location     Type
  2795 ;;  data            1   37[COMRAM] unsigned char 
  2796 ;;  temp            1   36[COMRAM] unsigned char 
  2797 ;; Return value:  Size  Location     Type
  2798 ;;                  1    wreg      void 
  2799 ;; Registers used:
  2800 ;;		wreg, status,2, status,0
  2801 ;; Tracked objects:
  2802 ;;		On entry : 0/0
  2803 ;;		On exit  : 0/0
  2804 ;;		Unchanged: 0/0
  2805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2806 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2807 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2808 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2809 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2810 ;;Total ram usage:        2 bytes
  2811 ;; Hardware stack levels used:    1
  2812 ;; Hardware stack levels required when called:    3
  2813 ;; This function calls:
  2814 ;;		Nothing
  2815 ;; This function is called by:
  2816 ;;		_lcdInst
  2817 ;;		_putch
  2818 ;; This function uses a non-reentrant model
  2819 ;;
  2820                           
  2821                           	psect	text9
  2822  000998                     __ptext9:
  2823                           	opt stack 0
  2824  000998                     _lcdNibble:
  2825                           	opt stack 25
  2826                           
  2827                           ;incstack = 0
  2828                           ;lcdNibble@data stored from wreg
  2829  000998  6E26               	movwf	lcdNibble@data,c
  2830                           
  2831                           ;lcd.c: 37: char temp = data & 0xF0;
  2832  00099A  5026               	movf	lcdNibble@data,w,c
  2833  00099C  0BF0               	andlw	240
  2834  00099E  6E25               	movwf	lcdNibble@temp,c
  2835                           
  2836                           ;lcd.c: 38: LATD = LATD & 0x0F;
  2837  0009A0  508C               	movf	3980,w,c	;volatile
  2838  0009A2  0B0F               	andlw	15
  2839  0009A4  6E8C               	movwf	3980,c	;volatile
  2840                           
  2841                           ;lcd.c: 39: LATD = temp | LATD;
  2842  0009A6  5025               	movf	lcdNibble@temp,w,c
  2843  0009A8  108C               	iorwf	3980,w,c	;volatile
  2844  0009AA  6E8C               	movwf	3980,c	;volatile
  2845                           
  2846                           ;lcd.c: 41: LATDbits.LATD3 = 0;
  2847  0009AC  968C               	bcf	3980,3,c	;volatile
  2848                           
  2849                           ;lcd.c: 42: _delay((unsigned long)((30)*(10000000/4000000.0)));
  2850  0009AE  0E19               	movlw	25
  2851  0009B0                     u1917:
  2852  0009B0  2EE8               	decfsz	wreg,f,c
  2853  0009B2  D7FE               	bra	u1917
  2854                           
  2855                           ;lcd.c: 43: LATDbits.LATD3 = 1;
  2856  0009B4  868C               	bsf	3980,3,c	;volatile
  2857                           
  2858                           ;lcd.c: 44: _delay((unsigned long)((30)*(10000000/4000000.0)));
  2859  0009B6  0E19               	movlw	25
  2860  0009B8                     u1927:
  2861  0009B8  2EE8               	decfsz	wreg,f,c
  2862  0009BA  D7FE               	bra	u1927
  2863                           
  2864                           ;lcd.c: 46: data = data << 4;
  2865  0009BC  3826               	swapf	lcdNibble@data,w,c
  2866  0009BE  0BF0               	andlw	240
  2867  0009C0  6E26               	movwf	lcdNibble@data,c
  2868                           
  2869                           ;lcd.c: 48: temp = data & 0xF0;
  2870  0009C2  5026               	movf	lcdNibble@data,w,c
  2871  0009C4  0BF0               	andlw	240
  2872  0009C6  6E25               	movwf	lcdNibble@temp,c
  2873                           
  2874                           ;lcd.c: 49: LATD = LATD & 0x0F;
  2875  0009C8  508C               	movf	3980,w,c	;volatile
  2876  0009CA  0B0F               	andlw	15
  2877  0009CC  6E8C               	movwf	3980,c	;volatile
  2878                           
  2879                           ;lcd.c: 50: LATD = temp | LATD;
  2880  0009CE  5025               	movf	lcdNibble@temp,w,c
  2881  0009D0  108C               	iorwf	3980,w,c	;volatile
  2882  0009D2  6E8C               	movwf	3980,c	;volatile
  2883                           
  2884                           ;lcd.c: 52: LATDbits.LATD3 = 0;
  2885  0009D4  968C               	bcf	3980,3,c	;volatile
  2886                           
  2887                           ;lcd.c: 53: _delay((unsigned long)((30)*(10000000/4000000.0)));
  2888  0009D6  0E19               	movlw	25
  2889  0009D8                     u1937:
  2890  0009D8  2EE8               	decfsz	wreg,f,c
  2891  0009DA  D7FE               	bra	u1937
  2892                           
  2893                           ;lcd.c: 54: LATDbits.LATD3 = 1;
  2894  0009DC  868C               	bsf	3980,3,c	;volatile
  2895                           
  2896                           ;lcd.c: 55: _delay((unsigned long)((30)*(10000000/4000000.0)));
  2897  0009DE  0E19               	movlw	25
  2898  0009E0                     u1947:
  2899  0009E0  2EE8               	decfsz	wreg,f,c
  2900  0009E2  D7FE               	bra	u1947
  2901  0009E4  0012               	return		;funcret
  2902  0009E6                     __end_of_lcdNibble:
  2903                           	opt stack 0
  2904                           tblptru	equ	0xFF8
  2905                           tblptrh	equ	0xFF7
  2906                           tblptrl	equ	0xFF6
  2907                           tablat	equ	0xFF5
  2908                           prodh	equ	0xFF4
  2909                           prodl	equ	0xFF3
  2910                           intcon	equ	0xFF2
  2911                           intcon3	equ	0xFF0
  2912                           postinc0	equ	0xFEE
  2913                           wreg	equ	0xFE8
  2914                           indf2	equ	0xFDF
  2915                           postinc2	equ	0xFDE
  2916                           postdec2	equ	0xFDD
  2917                           fsr2h	equ	0xFDA
  2918                           fsr2l	equ	0xFD9
  2919                           status	equ	0xFD8
  2920                           
  2921 ;; *************** function _I2C_Master_Write *****************
  2922 ;; Defined at:
  2923 ;;		line 47 in file "../I2C.c"
  2924 ;; Parameters:    Size  Location     Type
  2925 ;;  d               2   37[COMRAM] unsigned int 
  2926 ;; Auto vars:     Size  Location     Type
  2927 ;;		None
  2928 ;; Return value:  Size  Location     Type
  2929 ;;                  1    wreg      void 
  2930 ;; Registers used:
  2931 ;;		wreg, status,2, status,0, cstack
  2932 ;; Tracked objects:
  2933 ;;		On entry : 0/0
  2934 ;;		On exit  : 0/0
  2935 ;;		Unchanged: 0/0
  2936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2937 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2938 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2939 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2940 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2941 ;;Total ram usage:        2 bytes
  2942 ;; Hardware stack levels used:    1
  2943 ;; Hardware stack levels required when called:    4
  2944 ;; This function calls:
  2945 ;;		_I2C_Master_Wait
  2946 ;; This function is called by:
  2947 ;;		_main
  2948 ;; This function uses a non-reentrant model
  2949 ;;
  2950                           
  2951                           	psect	text10
  2952  000B64                     __ptext10:
  2953                           	opt stack 0
  2954  000B64                     _I2C_Master_Write:
  2955                           	opt stack 26
  2956                           
  2957                           ;I2C.c: 49: I2C_Master_Wait();
  2958                           
  2959                           ;incstack = 0
  2960  000B64  EC9D  F005         	call	_I2C_Master_Wait	;wreg free
  2961                           
  2962                           ;I2C.c: 50: SSPBUF = d;
  2963  000B68  C026  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  2964  000B6C  0012               	return		;funcret
  2965  000B6E                     __end_of_I2C_Master_Write:
  2966                           	opt stack 0
  2967                           tblptru	equ	0xFF8
  2968                           tblptrh	equ	0xFF7
  2969                           tblptrl	equ	0xFF6
  2970                           tablat	equ	0xFF5
  2971                           prodh	equ	0xFF4
  2972                           prodl	equ	0xFF3
  2973                           intcon	equ	0xFF2
  2974                           intcon3	equ	0xFF0
  2975                           postinc0	equ	0xFEE
  2976                           wreg	equ	0xFE8
  2977                           indf2	equ	0xFDF
  2978                           postinc2	equ	0xFDE
  2979                           postdec2	equ	0xFDD
  2980                           fsr2h	equ	0xFDA
  2981                           fsr2l	equ	0xFD9
  2982                           status	equ	0xFD8
  2983                           
  2984 ;; *************** function _I2C_Master_Stop *****************
  2985 ;; Defined at:
  2986 ;;		line 41 in file "../I2C.c"
  2987 ;; Parameters:    Size  Location     Type
  2988 ;;		None
  2989 ;; Auto vars:     Size  Location     Type
  2990 ;;		None
  2991 ;; Return value:  Size  Location     Type
  2992 ;;                  1    wreg      void 
  2993 ;; Registers used:
  2994 ;;		wreg, status,2, status,0, cstack
  2995 ;; Tracked objects:
  2996 ;;		On entry : 0/0
  2997 ;;		On exit  : 0/0
  2998 ;;		Unchanged: 0/0
  2999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3001 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3003 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3004 ;;Total ram usage:        0 bytes
  3005 ;; Hardware stack levels used:    1
  3006 ;; Hardware stack levels required when called:    4
  3007 ;; This function calls:
  3008 ;;		_I2C_Master_Wait
  3009 ;; This function is called by:
  3010 ;;		_main
  3011 ;; This function uses a non-reentrant model
  3012 ;;
  3013                           
  3014                           	psect	text11
  3015  000B6E                     __ptext11:
  3016                           	opt stack 0
  3017  000B6E                     _I2C_Master_Stop:
  3018                           	opt stack 26
  3019                           
  3020                           ;I2C.c: 43: I2C_Master_Wait();
  3021                           
  3022                           ;incstack = 0
  3023  000B6E  EC9D  F005         	call	_I2C_Master_Wait	;wreg free
  3024                           
  3025                           ;I2C.c: 44: PEN = 1;
  3026  000B72  84C5               	bsf	4037,2,c	;volatile
  3027  000B74  0012               	return		;funcret
  3028  000B76                     __end_of_I2C_Master_Stop:
  3029                           	opt stack 0
  3030                           tblptru	equ	0xFF8
  3031                           tblptrh	equ	0xFF7
  3032                           tblptrl	equ	0xFF6
  3033                           tablat	equ	0xFF5
  3034                           prodh	equ	0xFF4
  3035                           prodl	equ	0xFF3
  3036                           intcon	equ	0xFF2
  3037                           intcon3	equ	0xFF0
  3038                           postinc0	equ	0xFEE
  3039                           wreg	equ	0xFE8
  3040                           indf2	equ	0xFDF
  3041                           postinc2	equ	0xFDE
  3042                           postdec2	equ	0xFDD
  3043                           fsr2h	equ	0xFDA
  3044                           fsr2l	equ	0xFD9
  3045                           status	equ	0xFD8
  3046                           
  3047 ;; *************** function _I2C_Master_Start *****************
  3048 ;; Defined at:
  3049 ;;		line 29 in file "../I2C.c"
  3050 ;; Parameters:    Size  Location     Type
  3051 ;;		None
  3052 ;; Auto vars:     Size  Location     Type
  3053 ;;		None
  3054 ;; Return value:  Size  Location     Type
  3055 ;;                  1    wreg      void 
  3056 ;; Registers used:
  3057 ;;		wreg, status,2, status,0, cstack
  3058 ;; Tracked objects:
  3059 ;;		On entry : 0/0
  3060 ;;		On exit  : 0/0
  3061 ;;		Unchanged: 0/0
  3062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3063 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3064 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3065 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3066 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3067 ;;Total ram usage:        0 bytes
  3068 ;; Hardware stack levels used:    1
  3069 ;; Hardware stack levels required when called:    4
  3070 ;; This function calls:
  3071 ;;		_I2C_Master_Wait
  3072 ;; This function is called by:
  3073 ;;		_main
  3074 ;; This function uses a non-reentrant model
  3075 ;;
  3076                           
  3077                           	psect	text12
  3078  000B76                     __ptext12:
  3079                           	opt stack 0
  3080  000B76                     _I2C_Master_Start:
  3081                           	opt stack 26
  3082                           
  3083                           ;I2C.c: 31: I2C_Master_Wait();
  3084                           
  3085                           ;incstack = 0
  3086  000B76  EC9D  F005         	call	_I2C_Master_Wait	;wreg free
  3087                           
  3088                           ;I2C.c: 32: SEN = 1;
  3089  000B7A  80C5               	bsf	4037,0,c	;volatile
  3090  000B7C  0012               	return		;funcret
  3091  000B7E                     __end_of_I2C_Master_Start:
  3092                           	opt stack 0
  3093                           tblptru	equ	0xFF8
  3094                           tblptrh	equ	0xFF7
  3095                           tblptrl	equ	0xFF6
  3096                           tablat	equ	0xFF5
  3097                           prodh	equ	0xFF4
  3098                           prodl	equ	0xFF3
  3099                           intcon	equ	0xFF2
  3100                           intcon3	equ	0xFF0
  3101                           postinc0	equ	0xFEE
  3102                           wreg	equ	0xFE8
  3103                           indf2	equ	0xFDF
  3104                           postinc2	equ	0xFDE
  3105                           postdec2	equ	0xFDD
  3106                           fsr2h	equ	0xFDA
  3107                           fsr2l	equ	0xFD9
  3108                           status	equ	0xFD8
  3109                           
  3110 ;; *************** function _I2C_Master_Read *****************
  3111 ;; Defined at:
  3112 ;;		line 53 in file "../I2C.c"
  3113 ;; Parameters:    Size  Location     Type
  3114 ;;  a               1    wreg     unsigned char 
  3115 ;; Auto vars:     Size  Location     Type
  3116 ;;  a               1   37[COMRAM] unsigned char 
  3117 ;;  temp            1   38[COMRAM] unsigned char 
  3118 ;; Return value:  Size  Location     Type
  3119 ;;                  1    wreg      unsigned char 
  3120 ;; Registers used:
  3121 ;;		wreg, status,2, status,0, cstack
  3122 ;; Tracked objects:
  3123 ;;		On entry : 0/0
  3124 ;;		On exit  : 0/0
  3125 ;;		Unchanged: 0/0
  3126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3128 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3129 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3130 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3131 ;;Total ram usage:        2 bytes
  3132 ;; Hardware stack levels used:    1
  3133 ;; Hardware stack levels required when called:    4
  3134 ;; This function calls:
  3135 ;;		_I2C_Master_Wait
  3136 ;; This function is called by:
  3137 ;;		_main
  3138 ;; This function uses a non-reentrant model
  3139 ;;
  3140                           
  3141                           	psect	text13
  3142  000AF6                     __ptext13:
  3143                           	opt stack 0
  3144  000AF6                     _I2C_Master_Read:
  3145                           	opt stack 26
  3146                           
  3147                           ;incstack = 0
  3148                           ;I2C_Master_Read@a stored from wreg
  3149  000AF6  6E26               	movwf	I2C_Master_Read@a,c
  3150                           
  3151                           ;I2C.c: 55: unsigned char temp;
  3152                           ;I2C.c: 56: I2C_Master_Wait();
  3153  000AF8  EC9D  F005         	call	_I2C_Master_Wait	;wreg free
  3154                           
  3155                           ;I2C.c: 57: RCEN = 1;
  3156  000AFC  86C5               	bsf	4037,3,c	;volatile
  3157                           
  3158                           ;I2C.c: 58: I2C_Master_Wait();
  3159  000AFE  EC9D  F005         	call	_I2C_Master_Wait	;wreg free
  3160                           
  3161                           ;I2C.c: 59: temp = SSPBUF;
  3162  000B02  CFC9 F027          	movff	4041,I2C_Master_Read@temp	;volatile
  3163                           
  3164                           ;I2C.c: 60: I2C_Master_Wait();
  3165  000B06  EC9D  F005         	call	_I2C_Master_Wait	;wreg free
  3166                           
  3167                           ;I2C.c: 61: ACKDT = (a)?0:1;
  3168  000B0A  5026               	movf	I2C_Master_Read@a,w,c
  3169  000B0C  A4D8               	btfss	status,2,c
  3170  000B0E  D002               	goto	u150
  3171  000B10  8AC5               	bsf	4037,5,c	;volatile
  3172  000B12  D001               	goto	l1045
  3173  000B14                     u150:
  3174  000B14  9AC5               	bcf	4037,5,c	;volatile
  3175  000B16                     l1045:
  3176                           
  3177                           ;I2C.c: 62: ACKEN = 1;
  3178  000B16  88C5               	bsf	4037,4,c	;volatile
  3179                           
  3180                           ;I2C.c: 63: return temp;
  3181  000B18  5027               	movf	I2C_Master_Read@temp,w,c
  3182  000B1A  0012               	return	
  3183  000B1C                     __end_of_I2C_Master_Read:
  3184                           	opt stack 0
  3185                           tblptru	equ	0xFF8
  3186                           tblptrh	equ	0xFF7
  3187                           tblptrl	equ	0xFF6
  3188                           tablat	equ	0xFF5
  3189                           prodh	equ	0xFF4
  3190                           prodl	equ	0xFF3
  3191                           intcon	equ	0xFF2
  3192                           intcon3	equ	0xFF0
  3193                           postinc0	equ	0xFEE
  3194                           wreg	equ	0xFE8
  3195                           indf2	equ	0xFDF
  3196                           postinc2	equ	0xFDE
  3197                           postdec2	equ	0xFDD
  3198                           fsr2h	equ	0xFDA
  3199                           fsr2l	equ	0xFD9
  3200                           status	equ	0xFD8
  3201                           
  3202 ;; *************** function _I2C_Master_Wait *****************
  3203 ;; Defined at:
  3204 ;;		line 24 in file "../I2C.c"
  3205 ;; Parameters:    Size  Location     Type
  3206 ;;		None
  3207 ;; Auto vars:     Size  Location     Type
  3208 ;;		None
  3209 ;; Return value:  Size  Location     Type
  3210 ;;                  1    wreg      void 
  3211 ;; Registers used:
  3212 ;;		wreg, status,2, status,0
  3213 ;; Tracked objects:
  3214 ;;		On entry : 0/0
  3215 ;;		On exit  : 0/0
  3216 ;;		Unchanged: 0/0
  3217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3219 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3220 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3221 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3222 ;;Total ram usage:        1 bytes
  3223 ;; Hardware stack levels used:    1
  3224 ;; Hardware stack levels required when called:    3
  3225 ;; This function calls:
  3226 ;;		Nothing
  3227 ;; This function is called by:
  3228 ;;		_I2C_Master_Start
  3229 ;;		_I2C_Master_Stop
  3230 ;;		_I2C_Master_Write
  3231 ;;		_I2C_Master_Read
  3232 ;; This function uses a non-reentrant model
  3233 ;;
  3234                           
  3235                           	psect	text14
  3236  000B3A                     __ptext14:
  3237                           	opt stack 0
  3238  000B3A                     _I2C_Master_Wait:
  3239                           	opt stack 26
  3240  000B3A                     l30:
  3241  000B3A  B4C7               	btfsc	4039,2,c	;volatile
  3242  000B3C  D7FE               	goto	l30
  3243  000B3E  CFC5 F025          	movff	4037,??_I2C_Master_Wait	;volatile
  3244  000B42  0E1F               	movlw	31
  3245  000B44  1625               	andwf	??_I2C_Master_Wait,f,c
  3246  000B46  B4D8               	btfsc	status,2,c
  3247  000B48  0012               	return	
  3248  000B4A  D7F7               	goto	l30
  3249  000B4C                     __end_of_I2C_Master_Wait:
  3250                           	opt stack 0
  3251                           tblptru	equ	0xFF8
  3252                           tblptrh	equ	0xFF7
  3253                           tblptrl	equ	0xFF6
  3254                           tablat	equ	0xFF5
  3255                           prodh	equ	0xFF4
  3256                           prodl	equ	0xFF3
  3257                           intcon	equ	0xFF2
  3258                           intcon3	equ	0xFF0
  3259                           postinc0	equ	0xFEE
  3260                           wreg	equ	0xFE8
  3261                           indf2	equ	0xFDF
  3262                           postinc2	equ	0xFDE
  3263                           postdec2	equ	0xFDD
  3264                           fsr2h	equ	0xFDA
  3265                           fsr2l	equ	0xFD9
  3266                           status	equ	0xFD8
  3267                           
  3268 ;; *************** function _I2C_Master_Init *****************
  3269 ;; Defined at:
  3270 ;;		line 13 in file "../I2C.c"
  3271 ;; Parameters:    Size  Location     Type
  3272 ;;  c               4   49[COMRAM] const unsigned long 
  3273 ;; Auto vars:     Size  Location     Type
  3274 ;;		None
  3275 ;; Return value:  Size  Location     Type
  3276 ;;                  1    wreg      void 
  3277 ;; Registers used:
  3278 ;;		wreg, status,2, status,0, cstack
  3279 ;; Tracked objects:
  3280 ;;		On entry : 0/0
  3281 ;;		On exit  : 0/0
  3282 ;;		Unchanged: 0/0
  3283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3284 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3285 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3286 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3287 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3288 ;;Total ram usage:        8 bytes
  3289 ;; Hardware stack levels used:    1
  3290 ;; Hardware stack levels required when called:    4
  3291 ;; This function calls:
  3292 ;;		___lldiv
  3293 ;; This function is called by:
  3294 ;;		_main
  3295 ;; This function uses a non-reentrant model
  3296 ;;
  3297                           
  3298                           	psect	text15
  3299  0008EC                     __ptext15:
  3300                           	opt stack 0
  3301  0008EC                     _I2C_Master_Init:
  3302                           	opt stack 26
  3303                           
  3304                           ;I2C.c: 16: SSPSTAT = 0b00000000;
  3305                           
  3306                           ;incstack = 0
  3307  0008EC  0E00               	movlw	0
  3308  0008EE  6EC7               	movwf	4039,c	;volatile
  3309                           
  3310                           ;I2C.c: 17: SSPCON1 = 0b00101000;
  3311  0008F0  0E28               	movlw	40
  3312  0008F2  6EC6               	movwf	4038,c	;volatile
  3313                           
  3314                           ;I2C.c: 18: SSPCON2 = 0b00000000;
  3315  0008F4  0E00               	movlw	0
  3316  0008F6  6EC5               	movwf	4037,c	;volatile
  3317                           
  3318                           ;I2C.c: 19: SSPADD = (10000000/(4*c))-1;
  3319  0008F8  0E80               	movlw	128
  3320  0008FA  6E25               	movwf	___lldiv@dividend,c
  3321  0008FC  0E96               	movlw	150
  3322  0008FE  6E26               	movwf	___lldiv@dividend+1,c
  3323  000900  0E98               	movlw	152
  3324  000902  6E27               	movwf	___lldiv@dividend+2,c
  3325  000904  0E00               	movlw	0
  3326  000906  6E28               	movwf	___lldiv@dividend+3,c
  3327  000908  C032  F036         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  3328  00090C  C033  F037         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  3329  000910  C034  F038         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  3330  000914  C035  F039         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  3331  000918  0E02               	movlw	2
  3332  00091A                     u835:
  3333  00091A  90D8               	bcf	status,0,c
  3334  00091C  3636               	rlcf	??_I2C_Master_Init,f,c
  3335  00091E  3637               	rlcf	??_I2C_Master_Init+1,f,c
  3336  000920  3638               	rlcf	??_I2C_Master_Init+2,f,c
  3337  000922  3639               	rlcf	??_I2C_Master_Init+3,f,c
  3338  000924  2EE8               	decfsz	wreg,f,c
  3339  000926  D7F9               	goto	u835
  3340  000928  C036  F029         	movff	??_I2C_Master_Init,___lldiv@divisor
  3341  00092C  C037  F02A         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  3342  000930  C038  F02B         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  3343  000934  C039  F02C         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  3344  000938  EC35  F004         	call	___lldiv	;wreg free
  3345  00093C  0425               	decf	?___lldiv,w,c
  3346  00093E  6EC8               	movwf	4040,c	;volatile
  3347                           
  3348                           ;I2C.c: 20: TRISC3 = 1;
  3349  000940  8694               	bsf	3988,3,c	;volatile
  3350                           
  3351                           ;I2C.c: 21: TRISC4 = 1;
  3352  000942  8894               	bsf	3988,4,c	;volatile
  3353  000944  0012               	return		;funcret
  3354  000946                     __end_of_I2C_Master_Init:
  3355                           	opt stack 0
  3356                           tblptru	equ	0xFF8
  3357                           tblptrh	equ	0xFF7
  3358                           tblptrl	equ	0xFF6
  3359                           tablat	equ	0xFF5
  3360                           prodh	equ	0xFF4
  3361                           prodl	equ	0xFF3
  3362                           intcon	equ	0xFF2
  3363                           intcon3	equ	0xFF0
  3364                           postinc0	equ	0xFEE
  3365                           wreg	equ	0xFE8
  3366                           indf2	equ	0xFDF
  3367                           postinc2	equ	0xFDE
  3368                           postdec2	equ	0xFDD
  3369                           fsr2h	equ	0xFDA
  3370                           fsr2l	equ	0xFD9
  3371                           status	equ	0xFD8
  3372                           
  3373 ;; *************** function ___lldiv *****************
  3374 ;; Defined at:
  3375 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  3376 ;; Parameters:    Size  Location     Type
  3377 ;;  dividend        4   36[COMRAM] unsigned long 
  3378 ;;  divisor         4   40[COMRAM] unsigned long 
  3379 ;; Auto vars:     Size  Location     Type
  3380 ;;  quotient        4   44[COMRAM] unsigned long 
  3381 ;;  counter         1   48[COMRAM] unsigned char 
  3382 ;; Return value:  Size  Location     Type
  3383 ;;                  4   36[COMRAM] unsigned long 
  3384 ;; Registers used:
  3385 ;;		wreg, status,2, status,0
  3386 ;; Tracked objects:
  3387 ;;		On entry : 0/0
  3388 ;;		On exit  : 0/0
  3389 ;;		Unchanged: 0/0
  3390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3391 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3392 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3394 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3395 ;;Total ram usage:       13 bytes
  3396 ;; Hardware stack levels used:    1
  3397 ;; Hardware stack levels required when called:    3
  3398 ;; This function calls:
  3399 ;;		Nothing
  3400 ;; This function is called by:
  3401 ;;		_I2C_Master_Init
  3402 ;; This function uses a non-reentrant model
  3403 ;;
  3404                           
  3405                           	psect	text16
  3406  00086A                     __ptext16:
  3407                           	opt stack 0
  3408  00086A                     ___lldiv:
  3409                           	opt stack 26
  3410                           
  3411                           ;incstack = 0
  3412  00086A  0E00               	movlw	0
  3413  00086C  6E2D               	movwf	___lldiv@quotient,c
  3414  00086E  0E00               	movlw	0
  3415  000870  6E2E               	movwf	___lldiv@quotient+1,c
  3416  000872  0E00               	movlw	0
  3417  000874  6E2F               	movwf	___lldiv@quotient+2,c
  3418  000876  0E00               	movlw	0
  3419  000878  6E30               	movwf	___lldiv@quotient+3,c
  3420  00087A  5029               	movf	___lldiv@divisor,w,c
  3421  00087C  102A               	iorwf	___lldiv@divisor+1,w,c
  3422  00087E  102B               	iorwf	___lldiv@divisor+2,w,c
  3423  000880  102C               	iorwf	___lldiv@divisor+3,w,c
  3424  000882  B4D8               	btfsc	status,2,c
  3425  000884  D02A               	goto	l645
  3426  000886  0E01               	movlw	1
  3427  000888  6E31               	movwf	___lldiv@counter,c
  3428  00088A  D006               	goto	l1437
  3429  00088C                     l1435:
  3430  00088C  90D8               	bcf	status,0,c
  3431  00088E  3629               	rlcf	___lldiv@divisor,f,c
  3432  000890  362A               	rlcf	___lldiv@divisor+1,f,c
  3433  000892  362B               	rlcf	___lldiv@divisor+2,f,c
  3434  000894  362C               	rlcf	___lldiv@divisor+3,f,c
  3435  000896  2A31               	incf	___lldiv@counter,f,c
  3436  000898                     l1437:
  3437  000898  AE2C               	btfss	___lldiv@divisor+3,7,c
  3438  00089A  D7F8               	goto	l1435
  3439  00089C                     l1439:
  3440  00089C  90D8               	bcf	status,0,c
  3441  00089E  362D               	rlcf	___lldiv@quotient,f,c
  3442  0008A0  362E               	rlcf	___lldiv@quotient+1,f,c
  3443  0008A2  362F               	rlcf	___lldiv@quotient+2,f,c
  3444  0008A4  3630               	rlcf	___lldiv@quotient+3,f,c
  3445  0008A6  5029               	movf	___lldiv@divisor,w,c
  3446  0008A8  5C25               	subwf	___lldiv@dividend,w,c
  3447  0008AA  502A               	movf	___lldiv@divisor+1,w,c
  3448  0008AC  5826               	subwfb	___lldiv@dividend+1,w,c
  3449  0008AE  502B               	movf	___lldiv@divisor+2,w,c
  3450  0008B0  5827               	subwfb	___lldiv@dividend+2,w,c
  3451  0008B2  502C               	movf	___lldiv@divisor+3,w,c
  3452  0008B4  5828               	subwfb	___lldiv@dividend+3,w,c
  3453  0008B6  A0D8               	btfss	status,0,c
  3454  0008B8  D009               	goto	l1447
  3455  0008BA  5029               	movf	___lldiv@divisor,w,c
  3456  0008BC  5E25               	subwf	___lldiv@dividend,f,c
  3457  0008BE  502A               	movf	___lldiv@divisor+1,w,c
  3458  0008C0  5A26               	subwfb	___lldiv@dividend+1,f,c
  3459  0008C2  502B               	movf	___lldiv@divisor+2,w,c
  3460  0008C4  5A27               	subwfb	___lldiv@dividend+2,f,c
  3461  0008C6  502C               	movf	___lldiv@divisor+3,w,c
  3462  0008C8  5A28               	subwfb	___lldiv@dividend+3,f,c
  3463  0008CA  802D               	bsf	___lldiv@quotient,0,c
  3464  0008CC                     l1447:
  3465  0008CC  90D8               	bcf	status,0,c
  3466  0008CE  322C               	rrcf	___lldiv@divisor+3,f,c
  3467  0008D0  322B               	rrcf	___lldiv@divisor+2,f,c
  3468  0008D2  322A               	rrcf	___lldiv@divisor+1,f,c
  3469  0008D4  3229               	rrcf	___lldiv@divisor,f,c
  3470  0008D6  2E31               	decfsz	___lldiv@counter,f,c
  3471  0008D8  D7E1               	goto	l1439
  3472  0008DA                     l645:
  3473  0008DA  C02D  F025         	movff	___lldiv@quotient,?___lldiv
  3474  0008DE  C02E  F026         	movff	___lldiv@quotient+1,?___lldiv+1
  3475  0008E2  C02F  F027         	movff	___lldiv@quotient+2,?___lldiv+2
  3476  0008E6  C030  F028         	movff	___lldiv@quotient+3,?___lldiv+3
  3477  0008EA  0012               	return		;funcret
  3478  0008EC                     __end_of___lldiv:
  3479                           	opt stack 0
  3480                           tblptru	equ	0xFF8
  3481                           tblptrh	equ	0xFF7
  3482                           tblptrl	equ	0xFF6
  3483                           tablat	equ	0xFF5
  3484                           prodh	equ	0xFF4
  3485                           prodl	equ	0xFF3
  3486                           intcon	equ	0xFF2
  3487                           intcon3	equ	0xFF0
  3488                           postinc0	equ	0xFEE
  3489                           wreg	equ	0xFE8
  3490                           indf2	equ	0xFDF
  3491                           postinc2	equ	0xFDE
  3492                           postdec2	equ	0xFDD
  3493                           fsr2h	equ	0xFDA
  3494                           fsr2l	equ	0xFD9
  3495                           status	equ	0xFD8
  3496                           
  3497 ;; *************** function _lowISR *****************
  3498 ;; Defined at:
  3499 ;;		line 289 in file "../main.c"
  3500 ;; Parameters:    Size  Location     Type
  3501 ;;		None
  3502 ;; Auto vars:     Size  Location     Type
  3503 ;;		None
  3504 ;; Return value:  Size  Location     Type
  3505 ;;                  1    wreg      void 
  3506 ;; Registers used:
  3507 ;;		None
  3508 ;; Tracked objects:
  3509 ;;		On entry : 0/0
  3510 ;;		On exit  : 0/0
  3511 ;;		Unchanged: 0/0
  3512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3513 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3514 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3515 ;;      Temps:         17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3516 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3517 ;;Total ram usage:       17 bytes
  3518 ;; Hardware stack levels used:    1
  3519 ;; Hardware stack levels required when called:    2
  3520 ;; This function calls:
  3521 ;;		Nothing
  3522 ;; This function is called by:
  3523 ;;		Interrupt level 1
  3524 ;; This function uses a non-reentrant model
  3525 ;;
  3526                           
  3527                           	psect	intcodelo
  3528  000018                     __pintcodelo:
  3529                           	opt stack 0
  3530  000018                     _lowISR:
  3531                           	opt stack 25
  3532                           
  3533                           ;incstack = 0
  3534  000018  8059               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  3535  00001A  CFD8 F014          	movff	status,??_lowISR
  3536  00001E  CFE8 F015          	movff	wreg,??_lowISR+1
  3537  000022  CFE0 F016          	movff	bsr,??_lowISR+2
  3538  000026  CFFA F017          	movff	pclath,??_lowISR+3
  3539  00002A  CFFB F018          	movff	pclatu,??_lowISR+4
  3540  00002E  CFE9 F019          	movff	fsr0l,??_lowISR+5
  3541  000032  CFEA F01A          	movff	fsr0h,??_lowISR+6
  3542  000036  CFE1 F01B          	movff	fsr1l,??_lowISR+7
  3543  00003A  CFE2 F01C          	movff	fsr1h,??_lowISR+8
  3544  00003E  CFD9 F01D          	movff	fsr2l,??_lowISR+9
  3545  000042  CFDA F01E          	movff	fsr2h,??_lowISR+10
  3546  000046  CFF3 F01F          	movff	prodl,??_lowISR+11
  3547  00004A  CFF4 F020          	movff	prodh,??_lowISR+12
  3548  00004E  CFF6 F021          	movff	tblptrl,??_lowISR+13
  3549  000052  CFF7 F022          	movff	tblptrh,??_lowISR+14
  3550  000056  CFF8 F023          	movff	tblptru,??_lowISR+15
  3551  00005A  CFF5 F024          	movff	tablat,??_lowISR+16
  3552  00005E  C024  FFF5         	movff	??_lowISR+16,tablat
  3553  000062  C023  FFF8         	movff	??_lowISR+15,tblptru
  3554  000066  C022  FFF7         	movff	??_lowISR+14,tblptrh
  3555  00006A  C021  FFF6         	movff	??_lowISR+13,tblptrl
  3556  00006E  C020  FFF4         	movff	??_lowISR+12,prodh
  3557  000072  C01F  FFF3         	movff	??_lowISR+11,prodl
  3558  000076  C01E  FFDA         	movff	??_lowISR+10,fsr2h
  3559  00007A  C01D  FFD9         	movff	??_lowISR+9,fsr2l
  3560  00007E  C01C  FFE2         	movff	??_lowISR+8,fsr1h
  3561  000082  C01B  FFE1         	movff	??_lowISR+7,fsr1l
  3562  000086  C01A  FFEA         	movff	??_lowISR+6,fsr0h
  3563  00008A  C019  FFE9         	movff	??_lowISR+5,fsr0l
  3564  00008E  C018  FFFB         	movff	??_lowISR+4,pclatu
  3565  000092  C017  FFFA         	movff	??_lowISR+3,pclath
  3566  000096  C016  FFE0         	movff	??_lowISR+2,bsr
  3567  00009A  C015  FFE8         	movff	??_lowISR+1,wreg
  3568  00009E  C014  FFD8         	movff	??_lowISR,status
  3569  0000A2  9059               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  3570  0000A4  0010               	retfie	
  3571  0000A6                     __end_of_lowISR:
  3572                           	opt stack 0
  3573                           pclatu	equ	0xFFB
  3574                           pclath	equ	0xFFA
  3575                           tblptru	equ	0xFF8
  3576                           tblptrh	equ	0xFF7
  3577                           tblptrl	equ	0xFF6
  3578                           tablat	equ	0xFF5
  3579                           prodh	equ	0xFF4
  3580                           prodl	equ	0xFF3
  3581                           intcon	equ	0xFF2
  3582                           intcon3	equ	0xFF0
  3583                           postinc0	equ	0xFEE
  3584                           fsr0h	equ	0xFEA
  3585                           fsr0l	equ	0xFE9
  3586                           wreg	equ	0xFE8
  3587                           fsr1h	equ	0xFE2
  3588                           fsr1l	equ	0xFE1
  3589                           bsr	equ	0xFE0
  3590                           indf2	equ	0xFDF
  3591                           postinc2	equ	0xFDE
  3592                           postdec2	equ	0xFDD
  3593                           fsr2h	equ	0xFDA
  3594                           fsr2l	equ	0xFD9
  3595                           status	equ	0xFD8
  3596                           
  3597 ;; *************** function _highISR *****************
  3598 ;; Defined at:
  3599 ;;		line 209 in file "../main.c"
  3600 ;; Parameters:    Size  Location     Type
  3601 ;;		None
  3602 ;; Auto vars:     Size  Location     Type
  3603 ;;  keypress        1   18[COMRAM] unsigned char 
  3604 ;; Return value:  Size  Location     Type
  3605 ;;                  1    wreg      void 
  3606 ;; Registers used:
  3607 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3608 ;; Tracked objects:
  3609 ;;		On entry : 0/0
  3610 ;;		On exit  : 0/0
  3611 ;;		Unchanged: 0/0
  3612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3613 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3614 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3615 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3616 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3617 ;;Total ram usage:       16 bytes
  3618 ;; Hardware stack levels used:    1
  3619 ;; Hardware stack levels required when called:    1
  3620 ;; This function calls:
  3621 ;;		_switchMenu
  3622 ;; This function is called by:
  3623 ;;		Interrupt level 2
  3624 ;; This function uses a non-reentrant model
  3625 ;;
  3626                           
  3627                           	psect	intcode
  3628  000008                     __pintcode:
  3629                           	opt stack 0
  3630  000008                     _highISR:
  3631                           	opt stack 25
  3632                           
  3633                           ;incstack = 0
  3634  000008  8259               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3635  00000A  ED9C  F003         	call	int_func,f	;refresh shadow registers
  3636                           pclatu	equ	0xFFB
  3637                           pclath	equ	0xFFA
  3638                           tblptru	equ	0xFF8
  3639                           tblptrh	equ	0xFF7
  3640                           tblptrl	equ	0xFF6
  3641                           tablat	equ	0xFF5
  3642                           prodh	equ	0xFF4
  3643                           prodl	equ	0xFF3
  3644                           intcon	equ	0xFF2
  3645                           intcon3	equ	0xFF0
  3646                           postinc0	equ	0xFEE
  3647                           fsr0h	equ	0xFEA
  3648                           fsr0l	equ	0xFE9
  3649                           wreg	equ	0xFE8
  3650                           fsr1h	equ	0xFE2
  3651                           fsr1l	equ	0xFE1
  3652                           bsr	equ	0xFE0
  3653                           indf2	equ	0xFDF
  3654                           postinc2	equ	0xFDE
  3655                           postdec2	equ	0xFDD
  3656                           fsr2h	equ	0xFDA
  3657                           fsr2l	equ	0xFD9
  3658                           status	equ	0xFD8
  3659                           
  3660                           	psect	intcode_body
  3661  000738                     __pintcode_body:
  3662                           	opt stack 25
  3663  000738                     int_func:
  3664                           	opt stack 25
  3665  000738  0006               	pop		; remove dummy address from shadow register refresh
  3666  00073A  CFFA F004          	movff	pclath,??_highISR
  3667  00073E  CFFB F005          	movff	pclatu,??_highISR+1
  3668  000742  CFE9 F006          	movff	fsr0l,??_highISR+2
  3669  000746  CFEA F007          	movff	fsr0h,??_highISR+3
  3670  00074A  CFE1 F008          	movff	fsr1l,??_highISR+4
  3671  00074E  CFE2 F009          	movff	fsr1h,??_highISR+5
  3672  000752  CFD9 F00A          	movff	fsr2l,??_highISR+6
  3673  000756  CFDA F00B          	movff	fsr2h,??_highISR+7
  3674  00075A  CFF3 F00C          	movff	prodl,??_highISR+8
  3675  00075E  CFF4 F00D          	movff	prodh,??_highISR+9
  3676  000762  CFF6 F00E          	movff	tblptrl,??_highISR+10
  3677  000766  CFF7 F00F          	movff	tblptrh,??_highISR+11
  3678  00076A  CFF8 F010          	movff	tblptru,??_highISR+12
  3679  00076E  CFF5 F011          	movff	tablat,??_highISR+13
  3680                           
  3681                           ;main.c: 210: if(INT1IF && (screenMode != 1)){
  3682  000772  A0F0               	btfss	intcon3,0,c	;volatile
  3683  000774  D039               	goto	i2l1825
  3684  000776  0458               	decf	_screenMode,w,c
  3685  000778  B4D8               	btfsc	status,2,c
  3686  00077A  D036               	goto	i2l1825
  3687                           
  3688                           ;main.c: 211: unsigned char keypress = (PORTB & 0xF0) >> 4;
  3689  00077C  3881               	swapf	3969,w,c	;volatile
  3690  00077E  0B0F               	andlw	15
  3691  000780  0B0F               	andlw	15
  3692  000782  6E13               	movwf	highISR@keypress,c
  3693                           
  3694                           ;main.c: 212: if (keys[keypress] == '*'){
  3695  000784  5013               	movf	highISR@keypress,w,c
  3696  000786  0D01               	mullw	1
  3697  000788  0E7B               	movlw	low _keys
  3698  00078A  24F3               	addwf	prodl,w,c
  3699  00078C  6EF6               	movwf	tblptrl,c
  3700  00078E  0EFE               	movlw	high _keys
  3701  000790  20F4               	addwfc	prodh,w,c
  3702  000792  6EF7               	movwf	tblptrh,c
  3703  000794                     	if	0	;There are less than 3 active tblptr bytes
  3704  000794                     	endif
  3705  000794  0008               	tblrd		*
  3706  000796  50F5               	movf	tablat,w,c
  3707  000798  0A2A               	xorlw	42
  3708  00079A  A4D8               	btfss	status,2,c
  3709  00079C  D011               	goto	i2l1819
  3710                           
  3711                           ;main.c: 214: if(screenMode == 2){
  3712  00079E  0E02               	movlw	2
  3713  0007A0  1858               	xorwf	_screenMode,w,c
  3714  0007A2  A4D8               	btfss	status,2,c
  3715  0007A4  D007               	goto	i2l1815
  3716                           
  3717                           ;main.c: 215: screenMode = 1;
  3718  0007A6  0E01               	movlw	1
  3719  0007A8  6E58               	movwf	_screenMode,c
  3720                           
  3721                           ;main.c: 216: T0CONbits.TMR0ON = 1;
  3722  0007AA  8ED5               	bsf	4053,7,c	;volatile
  3723                           
  3724                           ;main.c: 217: LATC = LATC | 0b00000010;
  3725  0007AC  508B               	movf	3979,w,c	;volatile
  3726  0007AE  0902               	iorlw	2
  3727  0007B0  6E8B               	movwf	3979,c	;volatile
  3728                           
  3729                           ;main.c: 218: }
  3730  0007B2  D019               	goto	i2l1823
  3731  0007B4                     i2l1815:
  3732                           
  3733                           ;main.c: 219: else if (screenMode == 0)
  3734  0007B4  5058               	movf	_screenMode,w,c
  3735  0007B6  A4D8               	btfss	status,2,c
  3736  0007B8  D016               	goto	i2l1823
  3737                           
  3738                           ;main.c: 220: screenMode = 2;
  3739  0007BA  0E02               	movlw	2
  3740  0007BC  6E58               	movwf	_screenMode,c
  3741                           
  3742                           ;main.c: 221: }
  3743  0007BE  D013               	goto	i2l1823
  3744  0007C0                     i2l1819:
  3745                           
  3746                           ;main.c: 222: else if (screenMode != 0)
  3747  0007C0  5058               	movf	_screenMode,w,c
  3748  0007C2  B4D8               	btfsc	status,2,c
  3749  0007C4  D010               	goto	i2l1823
  3750                           
  3751                           ;main.c: 223: switchMenu('4', '6', keys[keypress]);
  3752  0007C6  0E36               	movlw	54
  3753  0007C8  6E01               	movwf	switchMenu@right,c
  3754  0007CA  5013               	movf	highISR@keypress,w,c
  3755  0007CC  0D01               	mullw	1
  3756  0007CE  0E7B               	movlw	low _keys
  3757  0007D0  24F3               	addwf	prodl,w,c
  3758  0007D2  6EF6               	movwf	tblptrl,c
  3759  0007D4  0EFE               	movlw	high _keys
  3760  0007D6  20F4               	addwfc	prodh,w,c
  3761  0007D8  6EF7               	movwf	tblptrh,c
  3762  0007DA                     	if	0	;There are less than 3 active tblptr bytes
  3763  0007DA                     	endif
  3764  0007DA  0008               	tblrd		*
  3765  0007DC  CFF5 F002          	movff	tablat,switchMenu@key
  3766  0007E0  0E34               	movlw	52
  3767  0007E2  EC37  F005         	call	_switchMenu
  3768  0007E6                     i2l1823:
  3769                           
  3770                           ;main.c: 225: INT1IF = 0;
  3771  0007E6  90F0               	bcf	intcon3,0,c	;volatile
  3772  0007E8                     i2l1825:
  3773                           
  3774                           ;main.c: 226: }
  3775                           ;main.c: 227: if ((screenMode == 1) && TMR0IF && TMR0IE){
  3776  0007E8  0458               	decf	_screenMode,w,c
  3777  0007EA  B4D8               	btfsc	status,2,c
  3778  0007EC  A4F2               	btfss	intcon,2,c	;volatile
  3779  0007EE  D01F               	goto	i2l218
  3780  0007F0  AAF2               	btfss	intcon,5,c	;volatile
  3781  0007F2  D01D               	goto	i2l218
  3782                           
  3783                           ;main.c: 228: TMR0IF = 0;
  3784  0007F4  94F2               	bcf	intcon,2,c	;volatile
  3785                           
  3786                           ;main.c: 229: TMR0 = 0;
  3787  0007F6  0E00               	movlw	0
  3788  0007F8  6ED7               	movwf	4055,c	;volatile
  3789  0007FA  0E00               	movlw	0
  3790  0007FC  6ED6               	movwf	4054,c	;volatile
  3791                           
  3792                           ;main.c: 230: opTimer++;
  3793  0007FE  4A49               	infsnz	_opTimer,f,c
  3794  000800  2A4A               	incf	_opTimer+1,f,c
  3795                           
  3796                           ;main.c: 236: if (opTimer >= 6866){
  3797  000802  0ED2               	movlw	210
  3798  000804  5C49               	subwf	_opTimer,w,c
  3799  000806  0E1A               	movlw	26
  3800  000808  584A               	subwfb	_opTimer+1,w,c
  3801  00080A  A0D8               	btfss	status,0,c
  3802  00080C  D010               	goto	i2l218
  3803                           
  3804                           ;main.c: 243: opTimer = 0;
  3805  00080E  0E00               	movlw	0
  3806  000810  6E4A               	movwf	_opTimer+1,c
  3807  000812  0E00               	movlw	0
  3808  000814  6E49               	movwf	_opTimer,c
  3809                           
  3810                           ;main.c: 244: screenMode = 0;
  3811  000816  0E00               	movlw	0
  3812  000818  6E58               	movwf	_screenMode,c
  3813                           
  3814                           ;main.c: 249: T0CONbits.TMR0ON = 0;
  3815  00081A  9ED5               	bcf	4053,7,c	;volatile
  3816                           
  3817                           ;main.c: 256: LATC = LATC && 0b11111101;
  3818  00081C  0E00               	movlw	0
  3819  00081E  6E12               	movwf	_highISR$292,c
  3820  000820  508B               	movf	3979,w,c	;volatile
  3821  000822  B4D8               	btfsc	status,2,c
  3822  000824  D002               	goto	i2l1845
  3823  000826  0E01               	movlw	1
  3824  000828  6E12               	movwf	_highISR$292,c
  3825  00082A                     i2l1845:
  3826  00082A  C012  FF8B         	movff	_highISR$292,3979	;volatile
  3827  00082E                     i2l218:
  3828  00082E  C011  FFF5         	movff	??_highISR+13,tablat
  3829  000832  C010  FFF8         	movff	??_highISR+12,tblptru
  3830  000836  C00F  FFF7         	movff	??_highISR+11,tblptrh
  3831  00083A  C00E  FFF6         	movff	??_highISR+10,tblptrl
  3832  00083E  C00D  FFF4         	movff	??_highISR+9,prodh
  3833  000842  C00C  FFF3         	movff	??_highISR+8,prodl
  3834  000846  C00B  FFDA         	movff	??_highISR+7,fsr2h
  3835  00084A  C00A  FFD9         	movff	??_highISR+6,fsr2l
  3836  00084E  C009  FFE2         	movff	??_highISR+5,fsr1h
  3837  000852  C008  FFE1         	movff	??_highISR+4,fsr1l
  3838  000856  C007  FFEA         	movff	??_highISR+3,fsr0h
  3839  00085A  C006  FFE9         	movff	??_highISR+2,fsr0l
  3840  00085E  C005  FFFB         	movff	??_highISR+1,pclatu
  3841  000862  C004  FFFA         	movff	??_highISR,pclath
  3842  000866  9259               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3843  000868  0011               	retfie		f
  3844  00086A                     __end_of_highISR:
  3845                           	opt stack 0
  3846                           pclatu	equ	0xFFB
  3847                           pclath	equ	0xFFA
  3848                           tblptru	equ	0xFF8
  3849                           tblptrh	equ	0xFF7
  3850                           tblptrl	equ	0xFF6
  3851                           tablat	equ	0xFF5
  3852                           prodh	equ	0xFF4
  3853                           prodl	equ	0xFF3
  3854                           intcon	equ	0xFF2
  3855                           intcon3	equ	0xFF0
  3856                           postinc0	equ	0xFEE
  3857                           fsr0h	equ	0xFEA
  3858                           fsr0l	equ	0xFE9
  3859                           wreg	equ	0xFE8
  3860                           fsr1h	equ	0xFE2
  3861                           fsr1l	equ	0xFE1
  3862                           bsr	equ	0xFE0
  3863                           indf2	equ	0xFDF
  3864                           postinc2	equ	0xFDE
  3865                           postdec2	equ	0xFDD
  3866                           fsr2h	equ	0xFDA
  3867                           fsr2l	equ	0xFD9
  3868                           status	equ	0xFD8
  3869                           
  3870 ;; *************** function _switchMenu *****************
  3871 ;; Defined at:
  3872 ;;		line 194 in file "../main.c"
  3873 ;; Parameters:    Size  Location     Type
  3874 ;;  left            1    wreg     unsigned char 
  3875 ;;  right           1    0[COMRAM] unsigned char 
  3876 ;;  key             1    1[COMRAM] unsigned char 
  3877 ;; Auto vars:     Size  Location     Type
  3878 ;;  left            1    2[COMRAM] unsigned char 
  3879 ;; Return value:  Size  Location     Type
  3880 ;;                  1    wreg      void 
  3881 ;; Registers used:
  3882 ;;		wreg, status,2, status,0
  3883 ;; Tracked objects:
  3884 ;;		On entry : 0/0
  3885 ;;		On exit  : 0/0
  3886 ;;		Unchanged: 0/0
  3887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3888 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3889 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3890 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3891 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3892 ;;Total ram usage:        3 bytes
  3893 ;; Hardware stack levels used:    1
  3894 ;; This function calls:
  3895 ;;		Nothing
  3896 ;; This function is called by:
  3897 ;;		_highISR
  3898 ;; This function uses a non-reentrant model
  3899 ;;
  3900                           
  3901                           	psect	text19
  3902  000A6E                     __ptext19:
  3903                           	opt stack 0
  3904  000A6E                     _switchMenu:
  3905                           	opt stack 25
  3906                           
  3907                           ;incstack = 0
  3908                           ;switchMenu@left stored from wreg
  3909  000A6E  6E03               	movwf	switchMenu@left,c
  3910                           
  3911                           ;main.c: 195: if (key == right){
  3912  000A70  5001               	movf	switchMenu@right,w,c
  3913  000A72  1802               	xorwf	switchMenu@key,w,c
  3914  000A74  A4D8               	btfss	status,2,c
  3915  000A76  D009               	goto	i2l1639
  3916                           
  3917                           ;main.c: 196: if (screenMode == 2)
  3918  000A78  0E02               	movlw	2
  3919  000A7A  1858               	xorwf	_screenMode,w,c
  3920  000A7C  A4D8               	btfss	status,2,c
  3921  000A7E  D003               	goto	i2l1637
  3922                           
  3923                           ;main.c: 197: screenMode = 8;
  3924  000A80  0E08               	movlw	8
  3925  000A82  6E58               	movwf	_screenMode,c
  3926  000A84  0012               	return	
  3927  000A86                     i2l1637:
  3928                           
  3929                           ;main.c: 198: else
  3930                           ;main.c: 199: screenMode -= 1;
  3931  000A86  0658               	decf	_screenMode,f,c
  3932                           
  3933                           ;main.c: 200: }
  3934  000A88  0012               	return	
  3935  000A8A                     i2l1639:
  3936                           
  3937                           ;main.c: 201: else if (key == left){
  3938  000A8A  5003               	movf	switchMenu@left,w,c
  3939  000A8C  1802               	xorwf	switchMenu@key,w,c
  3940  000A8E  A4D8               	btfss	status,2,c
  3941  000A90  0012               	return	
  3942                           
  3943                           ;main.c: 202: if (screenMode == 8)
  3944  000A92  0E08               	movlw	8
  3945  000A94  1858               	xorwf	_screenMode,w,c
  3946  000A96  A4D8               	btfss	status,2,c
  3947  000A98  D003               	goto	i2l1645
  3948                           
  3949                           ;main.c: 203: screenMode = 2;
  3950  000A9A  0E02               	movlw	2
  3951  000A9C  6E58               	movwf	_screenMode,c
  3952  000A9E  0012               	return	
  3953  000AA0                     i2l1645:
  3954                           
  3955                           ;main.c: 204: else
  3956                           ;main.c: 205: screenMode += 1;
  3957  000AA0  2A58               	incf	_screenMode,f,c
  3958  000AA2  0012               	return	
  3959  000AA4                     __end_of_switchMenu:
  3960                           	opt stack 0
  3961                           pclatu	equ	0xFFB
  3962                           pclath	equ	0xFFA
  3963                           tblptru	equ	0xFF8
  3964                           tblptrh	equ	0xFF7
  3965                           tblptrl	equ	0xFF6
  3966                           tablat	equ	0xFF5
  3967                           prodh	equ	0xFF4
  3968                           prodl	equ	0xFF3
  3969                           intcon	equ	0xFF2
  3970                           intcon3	equ	0xFF0
  3971                           postinc0	equ	0xFEE
  3972                           fsr0h	equ	0xFEA
  3973                           fsr0l	equ	0xFE9
  3974                           wreg	equ	0xFE8
  3975                           fsr1h	equ	0xFE2
  3976                           fsr1l	equ	0xFE1
  3977                           bsr	equ	0xFE0
  3978                           indf2	equ	0xFDF
  3979                           postinc2	equ	0xFDE
  3980                           postdec2	equ	0xFDD
  3981                           fsr2h	equ	0xFDA
  3982                           fsr2l	equ	0xFD9
  3983                           status	equ	0xFD8
  3984                           pclatu	equ	0xFFB
  3985                           pclath	equ	0xFFA
  3986                           tblptru	equ	0xFF8
  3987                           tblptrh	equ	0xFF7
  3988                           tblptrl	equ	0xFF6
  3989                           tablat	equ	0xFF5
  3990                           prodh	equ	0xFF4
  3991                           prodl	equ	0xFF3
  3992                           intcon	equ	0xFF2
  3993                           intcon3	equ	0xFF0
  3994                           postinc0	equ	0xFEE
  3995                           fsr0h	equ	0xFEA
  3996                           fsr0l	equ	0xFE9
  3997                           wreg	equ	0xFE8
  3998                           fsr1h	equ	0xFE2
  3999                           fsr1l	equ	0xFE1
  4000                           bsr	equ	0xFE0
  4001                           indf2	equ	0xFDF
  4002                           postinc2	equ	0xFDE
  4003                           postdec2	equ	0xFDD
  4004                           fsr2h	equ	0xFDA
  4005                           fsr2l	equ	0xFD9
  4006                           status	equ	0xFD8
  4007                           
  4008                           	psect	rparam
  4009  0000                     pclatu	equ	0xFFB
  4010                           pclath	equ	0xFFA
  4011                           tblptru	equ	0xFF8
  4012                           tblptrh	equ	0xFF7
  4013                           tblptrl	equ	0xFF6
  4014                           tablat	equ	0xFF5
  4015                           prodh	equ	0xFF4
  4016                           prodl	equ	0xFF3
  4017                           intcon	equ	0xFF2
  4018                           intcon3	equ	0xFF0
  4019                           postinc0	equ	0xFEE
  4020                           fsr0h	equ	0xFEA
  4021                           fsr0l	equ	0xFE9
  4022                           wreg	equ	0xFE8
  4023                           fsr1h	equ	0xFE2
  4024                           fsr1l	equ	0xFE1
  4025                           bsr	equ	0xFE0
  4026                           indf2	equ	0xFDF
  4027                           postinc2	equ	0xFDE
  4028                           postdec2	equ	0xFDD
  4029                           fsr2h	equ	0xFDA
  4030                           fsr2l	equ	0xFD9
  4031                           status	equ	0xFD8
  4032                           
  4033                           	psect	temp
  4034  000059                     btemp:
  4035                           	opt stack 0
  4036  000059                     	ds	1
  4037  0000                     int$flags	set	btemp
  4038                           pclatu	equ	0xFFB
  4039                           pclath	equ	0xFFA
  4040                           tblptru	equ	0xFF8
  4041                           tblptrh	equ	0xFF7
  4042                           tblptrl	equ	0xFF6
  4043                           tablat	equ	0xFF5
  4044                           prodh	equ	0xFF4
  4045                           prodl	equ	0xFF3
  4046                           intcon	equ	0xFF2
  4047                           intcon3	equ	0xFF0
  4048                           postinc0	equ	0xFEE
  4049                           fsr0h	equ	0xFEA
  4050                           fsr0l	equ	0xFE9
  4051                           wreg	equ	0xFE8
  4052                           fsr1h	equ	0xFE2
  4053                           fsr1l	equ	0xFE1
  4054                           bsr	equ	0xFE0
  4055                           indf2	equ	0xFDF
  4056                           postinc2	equ	0xFDE
  4057                           postdec2	equ	0xFDD
  4058                           fsr2h	equ	0xFDA
  4059                           fsr2l	equ	0xFD9
  4060                           status	equ	0xFD8


Data Sizes:
    Strings     353
    Constant    35
    Data        1
    BSS         24
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     63      88
    BANK0           128     10      10
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 25
		 -> STR_19(CODE[23]), STR_18(CODE[23]), STR_17(CODE[21]), STR_16(CODE[17]), 
		 -> STR_15(CODE[21]), STR_14(CODE[17]), STR_13(CODE[19]), STR_12(CODE[17]), 
		 -> STR_11(CODE[19]), STR_10(CODE[17]), STR_9(CODE[25]), STR_8(CODE[17]), 
		 -> STR_7(CODE[17]), STR_6(CODE[17]), STR_5(CODE[17]), STR_4(CODE[17]), 
		 -> STR_3(CODE[17]), STR_2(CODE[17]), STR_1(CODE[17]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _I2C_Master_Init->___lldiv

Critical Paths under _lowISR in COMRAM

    None.

Critical Paths under _highISR in COMRAM

    _highISR->_switchMenu

Critical Paths under _main in BANK0

    _main->_printf

Critical Paths under _lowISR in BANK0

    None.

Critical Paths under _highISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _lowISR in BANK1

    None.

Critical Paths under _highISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _lowISR in BANK2

    None.

Critical Paths under _highISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _lowISR in BANK3

    None.

Critical Paths under _highISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _lowISR in BANK4

    None.

Critical Paths under _highISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _lowISR in BANK5

    None.

Critical Paths under _highISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _lowISR in BANK6

    None.

Critical Paths under _highISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _lowISR in BANK7

    None.

Critical Paths under _highISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _lowISR in BANK8

    None.

Critical Paths under _highISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _lowISR in BANK9

    None.

Critical Paths under _highISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _lowISR in BANK10

    None.

Critical Paths under _highISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _lowISR in BANK11

    None.

Critical Paths under _highISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _lowISR in BANK12

    None.

Critical Paths under _highISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _lowISR in BANK13

    None.

Critical Paths under _highISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _lowISR in BANK14

    None.

Critical Paths under _highISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _lowISR in BANK15

    None.

Critical Paths under _highISR in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    5594
                                             60 COMRAM     3     3      0
                    _I2C_Master_Init
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              31    23      8    4469
                                             48 COMRAM    12     4      8
                                              0 BANK0     10    10      0
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0     135
                                             38 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             36 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     386
                                             36 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     386
                                             43 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     549
                                             36 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                             39 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0     135
                                             38 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0     113
                                             36 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Write                                     2     0      2     214
                                             37 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Read                                      2     2      0      30
                                             37 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Wait                                      1     1      0       0
                                             36 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     376
                                             49 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     290
                                             36 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _lowISR                                              17    17      0       0
                                             19 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _highISR                                             16    16      0     285
                                              3 COMRAM    16    16      0
                         _switchMenu
 ---------------------------------------------------------------------------------
 (6) _switchMenu                                           3     1      2     216
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _I2C_Master_Read
     _I2C_Master_Wait
   _I2C_Master_Start
     _I2C_Master_Wait
   _I2C_Master_Stop
     _I2C_Master_Wait
   _I2C_Master_Write
     _I2C_Master_Wait
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
       _lcdNibble

 _lowISR (ROOT)

 _highISR (ROOT)
   _switchMenu

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      A       A       5        7.8%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     3F      58       1       69.8%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      62      34        0.0%
DATA                 0      0      62       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Mon Feb 06 13:39:52 2017

                       l30 0B3A                         bsr 000FE0        ___wmul@multiplicand 0027  
              __CFG_BORV$3 000000               __CFG_CP0$OFF 000000               __CFG_CP1$OFF 000000  
             __CFG_CP2$OFF 000000               __CFG_CP3$OFF 000000                __CFG_OSC$HS 000000  
                      l253 01AE                        l173 0568                        l182 0612  
                      l158 0476                        l185 064A                        l179 05DA  
                      l708 0A64                        l645 08DA                        l698 098E  
                      _GIE 007F97               __CFG_CPB$OFF 000000                        u150 0B14  
                      _PEN 007E2A               __CFG_CPD$OFF 000000                        _SEN 007E28  
                      u835 091A                        _min 0052                        _sec 0057  
                      prod 000FF3                        wreg 000FE8               __CFG_LVP$OFF 000000  
             __CFG_WDT$OFF 000000                       l2003 023E                       l1045 0B16  
                     l2005 0244                       l2021 028C                       l2031 02E0  
                     l2111 04AA                       l2033 02EA                       l2201 0678  
                     l2051 0344                       l2027 02AC                       l2019 027A  
                     l2211 06BE                       l2203 0682                       l2107 04A2  
                     l2045 031E                       l2125 04E2                       l2047 032A  
                     l2055 0356                       l2039 0302                       l2071 0416  
                     l2207 06B6                       l2223 072E                       l2119 04C6  
                     l2057 035C                       l2065 03F0                       l2217 06DA  
                     l2153 0560                       l2145 0534                       l2129 04EA  
                     l2137 0506                       l1435 088C                       l2059 03A4  
                     l2067 0402                       l2171 05D0                       l2163 059C  
                     l2147 053C                       l2139 0510                       l1437 0898  
                     l2069 040A                       l2181 0608                       l2165 05A6  
                     l1447 08CC                       l1439 089C                       l2191 0640  
                     l1901 0968                       l1921 0A46                       l1909 0984  
                     l1925 0A5A                       l1917 0A3A                       l1919 0A42  
                     l1951 00DE                       l1881 0B32                       l1961 0116  
                     l1945 00B8                       l1955 00E6                       l1973 017E  
                     l1949 00CC                       l1991 0208                       l1897 095C  
                     l1985 01E6                       l1969 0178                       l1899 0964  
                     l1989 0202                       STR_1 FFDD                       STR_2 FFEE  
                     STR_3 FFBB                       STR_4 FF44                       STR_5 FF33  
                     STR_6 FF99                       STR_7 FF66                       STR_8 FFAA  
                     STR_9 FE9E                       _LATB 000F8A                       _LATC 000F8B  
                     _LATD 000F8C                       u1907 0A20                       u1917 09B0  
                     u1927 09B8                       u1937 09D8                       u1947 09E0  
                     u1877 04B8                       u1887 04F8                       _RBIE 007F93  
                     u1897 09EC                       _RCEN 007E2B                       _TMR0 000FD6  
                     _main 0432                       _keys FE7B                       _numC 0056  
                     _time 0040                       fsr0h 000FEA                       fsr1h 000FE2  
                     fsr2h 000FDA                       fsr0l 000FE9                       indf2 000FDF  
                     fsr1l 000FE1                       fsr2l 000FD9                       btemp 0059  
                     prodh 000FF4                       prodl 000FF3                       start 00A6  
          highISR@keypress 0013              __CFG_IESO$OFF 000000              __CFG_MCLRE$ON 000000  
             ___param_bank 000000           ?_I2C_Master_Init 0032           ?_I2C_Master_Read 0001  
         ?_I2C_Master_Wait 0001           ?_I2C_Master_Stop 0001                      ?_main 0001  
                    _ACKEN 007E2C                      _ACKDT 007E2D                      STR_10 FFCC  
                    STR_11 FF0F                      STR_12 FF55                      STR_20 FF22  
                    STR_13 FF0F                      STR_14 FF88                      STR_15 FEE5  
                    STR_16 FF77                      STR_17 FEFA                      STR_18 FEB7  
                    STR_19 FECE            __end_of___lldiv 08EC                      _T0CON 000FD5  
          __end_of___lwdiv 0998            __end_of___lwmod 0A6E                      i2l218 082E  
                    _PORTB 000F81                      _TRISB 000F93                      _TRISC 000F94  
                    _TRISD 000F95              __CFG_PWRT$OFF 000000              __CFG_WRT0$OFF 000000  
            __CFG_WRT1$OFF 000000              __CFG_WRT2$OFF 000000              __CFG_WRT3$OFF 000000  
          __end_of_highISR 086A            __end_of_lcdInst 0B64             __CFG_EBTR0$OFF 000000  
           __CFG_FCMEN$OFF 000000             __CFG_EBTR1$OFF 000000             __CFG_EBTR2$OFF 000000  
           __CFG_EBTR3$OFF 000000              __CFG_WRTB$OFF 000000              __CFG_WRTC$OFF 000000  
            __CFG_WRTD$OFF 000000            __end_of_initLCD 0A2C             __CFG_EBTRB$OFF 000000  
          __end_of_dpowers FE96                      _numAA 0054                      _num9V 0053  
          __end_of_isdigit 0B3A                      _putch 0B4C                      main@i 003F  
                    pclath 000FFA                      tablat 000FF5                      status 000FD8  
           __CFG_PBADEN$ON 000000            __initialization 0AA4               __end_of_main 0738  
             __end_of_keys FE8C                     ??_main 003D              __activetblptr 000002  
        ?_I2C_Master_Start 0001          ?_I2C_Master_Write 0026         ??_I2C_Master_Start 0026  
                   _ADCON0 000FC2                     _ADCON1 000FC1         ??_I2C_Master_Write 0028  
                   ?_putch 0001                     _INT1IE 007F83                     _INT1IF 007F80  
                   i2l1645 0AA0                     i2l1637 0A86                     i2l1639 0A8A  
                   i2l1823 07E6                     i2l1815 07B4                     i2l1825 07E8  
                   i2l1819 07C0                     i2l1845 082A                     _TMR0IE 007F95  
                   _TMR0IF 007F92                     _SSPADD 000FC8                     _TRISC3 007CA3  
                   _TRISC4 007CA4                     _SSPBUF 000FC9             __CFG_XINST$OFF 000000  
                   ___wmul 0AD0             __CFG_STVREN$ON 000000                  ??___lldiv 002D  
                ??___lwdiv 0029                  ??___lwmod 0030                     _countC 0051  
                   _lowISR 0018                     clear_0 0ABC                  ??_highISR 0004  
                ??_lcdInst 0027                     _printf 00AA                  ??_initLCD 0028  
             __pdataCOMRAM 0058                  ??_isdigit 0025               __mediumconst FE7A  
                   tblptrh 000FF7                     tblptrl 000FF6                     tblptru 000FF8  
          switchMenu@right 0001                 __accesstop 0080    __end_of__initialization 0AC2  
            ___rparam_used 000001             __pcstackCOMRAM 0001              __end_of_putch 0B58  
       __size_of_lcdNibble 004E                    ??_putch 0027                    ?___wmul 0025  
                  ?_lowISR 0001                    ?_printf 0031                    _SSPCON1 000FC6  
                  _SSPCON2 000FC5                    _SSPSTAT 000FC7          __end_of_lcdNibble 09E6  
                  __Hparam 0000                    __Lparam 0000                    ___lldiv 086A  
          __size_of___wmul 0026                    ___lwdiv 0946                    ___lwmod 0A2C  
                  __pcinit 0AA4            __size_of_lowISR 008E                    __ramtop 1000  
                  _highISR 0008                    _lcdInst 0B58                    __ptext0 0432  
                  __ptext1 00AA                    __ptext2 0B4C                    __ptext3 0B1C  
                  __ptext4 0AD0                    __ptext5 0A2C                    __ptext6 0946  
                  __ptext7 09E6                    __ptext8 0B58                    __ptext9 0998  
          __size_of_printf 0388                  _T0CONbits 000FD5                    _countAA 0050  
                  _count9V 004F                    _initLCD 09E6          __end_of_hexpowers FE9E  
                  _dpowers FE8C                    _isdigit 0B1C                    _opTimer 0049  
                  _numBats 0055   __size_of_I2C_Master_Init 005A   __size_of_I2C_Master_Read 0026  
 __size_of_I2C_Master_Wait 0012   __size_of_I2C_Master_Stop 0008             __pintcode_body 0738  
     end_of_initialization 0AC2              __Lmediumconst FE7A                    int_func 0738  
               _screenMode 0058  __size_of_I2C_Master_Start 0008  __size_of_I2C_Master_Write 000A  
          ___lldiv@divisor 0029            ___lldiv@counter 0031                    printf@c 0089  
                  printf@f 0031           I2C_Master_Init@c 0032           I2C_Master_Read@a 0026  
                  postdec2 000FDD                 _solOnTimer 004D                    postinc0 000FEE  
                  postinc2 000FDE                printf@width 0087                 _switchMenu 0A6E  
           __end_of___wmul 0AF6              __pidataCOMRAM 0B7E             __end_of_lowISR 00A6  
           __end_of_printf 0432        start_initialization 0AA4          ??_I2C_Master_Init 0036  
        ??_I2C_Master_Read 0026          ??_I2C_Master_Wait 0025          ??_I2C_Master_Stop 0026  
                 ??___wmul 0029           __CFG_LPT1OSC$OFF 000000                   ??_lowISR 0014  
           switchMenu@left 0003                   ??_printf 0039                __pbssCOMRAM 0040  
            __pcstackBANK0 0080           _I2C_Master_Start 0B76           _I2C_Master_Write 0B64  
         ___lwdiv@dividend 0025          __CFG_CCP2MX$PORTC 000000                ?_switchMenu 0001  
                __pintcode 0008              __pmediumconst FE7A                  _lcdNibble 0998  
                 ?___lldiv 0025                   ?___lwdiv 0025                _highISR$292 0012  
                 ?___lwmod 002C                __pintcodelo 0018                  _doneTimer 0047  
                 ?_highISR 0001                   ?_lcdInst 0001                   ?_initLCD 0001  
                 ?_isdigit 0001                  _hexpowers FE96           ___lwdiv@quotient 002A  
           __size_of_putch 000C             ___wmul@product 0029                   _LATDbits 000F8C  
         __CFG_WDTPS$32768 000000                 ?_lcdNibble 0001                  main@i_274 003E  
        ___wmul@multiplier 0025              lcdNibble@data 0026                 printf@flag 0086  
            lcdNibble@temp 0025                 printf@prec 0083        __size_of_switchMenu 0036  
      I2C_Master_Read@temp 0027                   __Hrparam 0000                   __Lrparam 0000  
       __CFG_BOREN$SBORDIS 000000              switchMenu@key 0002           __size_of___lldiv 0082  
         __size_of___lwdiv 0052           __size_of___lwmod 0042                _isdigit$544 0026  
         __size_of_highISR 0862           __size_of_lcdInst 000C            _I2C_Master_Init 08EC  
          _I2C_Master_Read 0AF6           __size_of_initLCD 0046            _I2C_Master_Wait 0B3A  
          _I2C_Master_Stop 0B6E           __size_of_isdigit 001E            ___lwdiv@divisor 0027  
          ___lwdiv@counter 0029                   __ptext10 0B64                   __ptext11 0B6E  
                 __ptext12 0B76                   __ptext13 0AF6                   __ptext14 0B3A  
                 __ptext15 08EC                   __ptext16 086A                   __ptext19 0A6E  
            __size_of_main 0306                ??_lcdNibble 0025                   int$flags 0059  
                printf@idx 0080                  printf@val 0084                  putch@data 0027  
 __end_of_I2C_Master_Start 0B7E   __end_of_I2C_Master_Write 0B6E                 _INTCONbits 000FF2  
                 isdigit@c 0027                   intlevel1 0000                   intlevel2 0000  
         ___lwmod@dividend 002C           ___lldiv@dividend 0025               ??_switchMenu 0003  
              _solOffTimer 004B                   printf@ap 0081    __end_of_I2C_Master_Init 0946  
  __end_of_I2C_Master_Read 0B1C    __end_of_I2C_Master_Wait 0B4C    __end_of_I2C_Master_Stop 0B76  
              lcdInst@data 0027           ___lldiv@quotient 002D          I2C_Master_Write@d 0026  
          ___lwmod@divisor 002E            ___lwmod@counter 0030         __end_of_switchMenu 0AA4  
