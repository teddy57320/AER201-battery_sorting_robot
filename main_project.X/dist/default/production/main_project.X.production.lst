

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Mon Apr 10 19:06:07 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    49                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    71                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    72                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    73  0000                     
    74                           ; Version 1.40
    75                           ; Generated 01/12/2016 GMT
    76                           ; 
    77                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    78                           ; All rights reserved.
    79                           ; 
    80                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    81                           ; 
    82                           ; Redistribution and use in source and binary forms, with or without modification, are
    83                           ; permitted provided that the following conditions are met:
    84                           ; 
    85                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    86                           ;        conditions and the following disclaimer.
    87                           ; 
    88                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    89                           ;        of conditions and the following disclaimer in the documentation and/or other
    90                           ;        materials provided with the distribution.
    91                           ; 
    92                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    93                           ;        software without specific prior written permission.
    94                           ; 
    95                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    96                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    97                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    98                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    99                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   100                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   101                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   102                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   103                           ; 
   104                           ; 
   105                           ; Code-generator required, PIC18F4620 Definitions
   106                           ; 
   107                           ; SFR Addresses
   108  0000                     
   109                           	psect	idataCOMRAM
   110  003788                     __pidataCOMRAM:
   111                           	opt stack 0
   112                           
   113                           ;initializer for logPC@F3226
   114  003788  20                 	db	32
   115  003789  20                 	db	32
   116  00378A  2F                 	db	47
   117  00378B  20                 	db	32
   118  00378C  20                 	db	32
   119  00378D  2F                 	db	47
   120  00378E  20                 	db	32
   121  00378F  20                 	db	32
   122  003790  20                 	db	32
   123  003791  20                 	db	32
   124  003792  20                 	db	32
   125  003793  3A                 	db	58
   126  003794  20                 	db	32
   127  003795  20                 	db	32
   128  003796  3A                 	db	58
   129  003797  20                 	db	32
   130  003798  20                 	db	32
   131  003799  00                 	db	0
   132  00379A  00                 	db	0
   133                           
   134                           	psect	idataBANK0
   135  0037CE                     __pidataBANK0:
   136                           	opt stack 0
   137                           
   138                           ;initializer for logPC@F3250
   139  0037CE  20                 	db	32
   140  0037CF  20                 	db	32
   141  0037D0  20                 	db	32
   142                           
   143                           ;initializer for logPC@F3230
   144  0037D1  20                 	db	32
   145  0037D2  20                 	db	32
   146                           
   147                           ;initializer for logPC@F3234
   148  0037D3  20                 	db	32
   149  0037D4  20                 	db	32
   150                           
   151                           ;initializer for logPC@F3238
   152  0037D5  20                 	db	32
   153  0037D6  20                 	db	32
   154                           
   155                           ;initializer for logPC@F3242
   156  0037D7  20                 	db	32
   157  0037D8  20                 	db	32
   158                           
   159                           ;initializer for logPC@F3246
   160  0037D9  20                 	db	32
   161  0037DA  20                 	db	32
   162                           
   163                           ;initializer for _screenMode
   164  0037DB  02                 	db	2
   165                           
   166                           	psect	mediumconst
   167  00FC9E                     __pmediumconst:
   168                           	opt stack 0
   169  00FC9E  00                 	db	0
   170  00FC9F                     _drainHeader:
   171                           	opt stack 0
   172  00FC9F  4E                 	db	78
   173  00FCA0  75                 	db	117
   174  00FCA1  6D                 	db	109
   175  00FCA2  62                 	db	98
   176  00FCA3  65                 	db	101
   177  00FCA4  72                 	db	114
   178  00FCA5  20                 	db	32
   179  00FCA6  6F                 	db	111
   180  00FCA7  66                 	db	102
   181  00FCA8  20                 	db	32
   182  00FCA9  64                 	db	100
   183  00FCAA  72                 	db	114
   184  00FCAB  61                 	db	97
   185  00FCAC  69                 	db	105
   186  00FCAD  6E                 	db	110
   187  00FCAE  65                 	db	101
   188  00FCAF  64                 	db	100
   189  00FCB0  20                 	db	32
   190  00FCB1  62                 	db	98
   191  00FCB2  61                 	db	97
   192  00FCB3  74                 	db	116
   193  00FCB4  74                 	db	116
   194  00FCB5  65                 	db	101
   195  00FCB6  72                 	db	114
   196  00FCB7  69                 	db	105
   197  00FCB8  65                 	db	101
   198  00FCB9  73                 	db	115
   199  00FCBA  20                 	db	32
   200  00FCBB  73                 	db	115
   201  00FCBC  6F                 	db	111
   202  00FCBD  72                 	db	114
   203  00FCBE  74                 	db	116
   204  00FCBF  65                 	db	101
   205  00FCC0  64                 	db	100
   206  00FCC1  3A                 	db	58
   207  00FCC2  20                 	db	32
   208  00FCC3  00                 	db	0
   209  00FCC4                     __end_of_drainHeader:
   210                           	opt stack 0
   211  00FCC4                     _totalHeader:
   212                           	opt stack 0
   213  00FCC4  54                 	db	84
   214  00FCC5  6F                 	db	111
   215  00FCC6  74                 	db	116
   216  00FCC7  61                 	db	97
   217  00FCC8  6C                 	db	108
   218  00FCC9  20                 	db	32
   219  00FCCA  6E                 	db	110
   220  00FCCB  75                 	db	117
   221  00FCCC  6D                 	db	109
   222  00FCCD  62                 	db	98
   223  00FCCE  65                 	db	101
   224  00FCCF  72                 	db	114
   225  00FCD0  20                 	db	32
   226  00FCD1  6F                 	db	111
   227  00FCD2  66                 	db	102
   228  00FCD3  20                 	db	32
   229  00FCD4  62                 	db	98
   230  00FCD5  61                 	db	97
   231  00FCD6  74                 	db	116
   232  00FCD7  74                 	db	116
   233  00FCD8  65                 	db	101
   234  00FCD9  72                 	db	114
   235  00FCDA  69                 	db	105
   236  00FCDB  65                 	db	101
   237  00FCDC  73                 	db	115
   238  00FCDD  20                 	db	32
   239  00FCDE  73                 	db	115
   240  00FCDF  6F                 	db	111
   241  00FCE0  72                 	db	114
   242  00FCE1  74                 	db	116
   243  00FCE2  65                 	db	101
   244  00FCE3  64                 	db	100
   245  00FCE4  3A                 	db	58
   246  00FCE5  20                 	db	32
   247  00FCE6  00                 	db	0
   248  00FCE7                     __end_of_totalHeader:
   249                           	opt stack 0
   250  00FCE7                     _runTimeHeader:
   251                           	opt stack 0
   252  00FCE7  53                 	db	83
   253  00FCE8  65                 	db	101
   254  00FCE9  63                 	db	99
   255  00FCEA  6F                 	db	111
   256  00FCEB  6E                 	db	110
   257  00FCEC  64                 	db	100
   258  00FCED  73                 	db	115
   259  00FCEE  20                 	db	32
   260  00FCEF  74                 	db	116
   261  00FCF0  68                 	db	104
   262  00FCF1  65                 	db	101
   263  00FCF2  20                 	db	32
   264  00FCF3  73                 	db	115
   265  00FCF4  6F                 	db	111
   266  00FCF5  72                 	db	114
   267  00FCF6  74                 	db	116
   268  00FCF7  69                 	db	105
   269  00FCF8  6E                 	db	110
   270  00FCF9  67                 	db	103
   271  00FCFA  20                 	db	32
   272  00FCFB  6C                 	db	108
   273  00FCFC  61                 	db	97
   274  00FCFD  73                 	db	115
   275  00FCFE  74                 	db	116
   276  00FCFF  65                 	db	101
   277  00FD00  64                 	db	100
   278  00FD01  20                 	db	32
   279  00FD02  66                 	db	102
   280  00FD03  6F                 	db	111
   281  00FD04  72                 	db	114
   282  00FD05  3A                 	db	58
   283  00FD06  20                 	db	32
   284  00FD07  00                 	db	0
   285  00FD08                     __end_of_runTimeHeader:
   286                           	opt stack 0
   287  00FD08                     _AAHeader:
   288                           	opt stack 0
   289  00FD08  4E                 	db	78
   290  00FD09  75                 	db	117
   291  00FD0A  6D                 	db	109
   292  00FD0B  62                 	db	98
   293  00FD0C  65                 	db	101
   294  00FD0D  72                 	db	114
   295  00FD0E  20                 	db	32
   296  00FD0F  6F                 	db	111
   297  00FD10  66                 	db	102
   298  00FD11  20                 	db	32
   299  00FD12  41                 	db	65
   300  00FD13  41                 	db	65
   301  00FD14  20                 	db	32
   302  00FD15  62                 	db	98
   303  00FD16  61                 	db	97
   304  00FD17  74                 	db	116
   305  00FD18  74                 	db	116
   306  00FD19  65                 	db	101
   307  00FD1A  72                 	db	114
   308  00FD1B  69                 	db	105
   309  00FD1C  65                 	db	101
   310  00FD1D  73                 	db	115
   311  00FD1E  20                 	db	32
   312  00FD1F  73                 	db	115
   313  00FD20  6F                 	db	111
   314  00FD21  72                 	db	114
   315  00FD22  74                 	db	116
   316  00FD23  65                 	db	101
   317  00FD24  64                 	db	100
   318  00FD25  3A                 	db	58
   319  00FD26  20                 	db	32
   320  00FD27  00                 	db	0
   321  00FD28                     __end_of_AAHeader:
   322                           	opt stack 0
   323  00FD28                     _nineVHeader:
   324                           	opt stack 0
   325  00FD28  4E                 	db	78
   326  00FD29  75                 	db	117
   327  00FD2A  6D                 	db	109
   328  00FD2B  62                 	db	98
   329  00FD2C  65                 	db	101
   330  00FD2D  72                 	db	114
   331  00FD2E  20                 	db	32
   332  00FD2F  6F                 	db	111
   333  00FD30  66                 	db	102
   334  00FD31  20                 	db	32
   335  00FD32  39                 	db	57
   336  00FD33  56                 	db	86
   337  00FD34  20                 	db	32
   338  00FD35  62                 	db	98
   339  00FD36  61                 	db	97
   340  00FD37  74                 	db	116
   341  00FD38  74                 	db	116
   342  00FD39  65                 	db	101
   343  00FD3A  72                 	db	114
   344  00FD3B  69                 	db	105
   345  00FD3C  65                 	db	101
   346  00FD3D  73                 	db	115
   347  00FD3E  20                 	db	32
   348  00FD3F  73                 	db	115
   349  00FD40  6F                 	db	111
   350  00FD41  72                 	db	114
   351  00FD42  74                 	db	116
   352  00FD43  65                 	db	101
   353  00FD44  64                 	db	100
   354  00FD45  3A                 	db	58
   355  00FD46  20                 	db	32
   356  00FD47  00                 	db	0
   357  00FD48                     __end_of_nineVHeader:
   358                           	opt stack 0
   359  00FD48                     _timeHeader:
   360                           	opt stack 0
   361  00FD48  54                 	db	84
   362  00FD49  69                 	db	105
   363  00FD4A  6D                 	db	109
   364  00FD4B  65                 	db	101
   365  00FD4C  20                 	db	32
   366  00FD4D  61                 	db	97
   367  00FD4E  6E                 	db	110
   368  00FD4F  64                 	db	100
   369  00FD50  20                 	db	32
   370  00FD51  64                 	db	100
   371  00FD52  61                 	db	97
   372  00FD53  74                 	db	116
   373  00FD54  65                 	db	101
   374  00FD55  20                 	db	32
   375  00FD56  6F                 	db	111
   376  00FD57  66                 	db	102
   377  00FD58  20                 	db	32
   378  00FD59  6C                 	db	108
   379  00FD5A  61                 	db	97
   380  00FD5B  73                 	db	115
   381  00FD5C  74                 	db	116
   382  00FD5D  20                 	db	32
   383  00FD5E  73                 	db	115
   384  00FD5F  6F                 	db	111
   385  00FD60  72                 	db	114
   386  00FD61  74                 	db	116
   387  00FD62  69                 	db	105
   388  00FD63  6E                 	db	110
   389  00FD64  67                 	db	103
   390  00FD65  3A                 	db	58
   391  00FD66  20                 	db	32
   392  00FD67  00                 	db	0
   393  00FD68                     __end_of_timeHeader:
   394                           	opt stack 0
   395  00FD68                     _CHeader:
   396                           	opt stack 0
   397  00FD68  4E                 	db	78
   398  00FD69  75                 	db	117
   399  00FD6A  6D                 	db	109
   400  00FD6B  62                 	db	98
   401  00FD6C  65                 	db	101
   402  00FD6D  72                 	db	114
   403  00FD6E  20                 	db	32
   404  00FD6F  6F                 	db	111
   405  00FD70  66                 	db	102
   406  00FD71  20                 	db	32
   407  00FD72  43                 	db	67
   408  00FD73  20                 	db	32
   409  00FD74  62                 	db	98
   410  00FD75  61                 	db	97
   411  00FD76  74                 	db	116
   412  00FD77  74                 	db	116
   413  00FD78  65                 	db	101
   414  00FD79  72                 	db	114
   415  00FD7A  69                 	db	105
   416  00FD7B  65                 	db	101
   417  00FD7C  73                 	db	115
   418  00FD7D  20                 	db	32
   419  00FD7E  73                 	db	115
   420  00FD7F  6F                 	db	111
   421  00FD80  72                 	db	114
   422  00FD81  74                 	db	116
   423  00FD82  65                 	db	101
   424  00FD83  64                 	db	100
   425  00FD84  3A                 	db	58
   426  00FD85  20                 	db	32
   427  00FD86  00                 	db	0
   428  00FD87                     __end_of_CHeader:
   429                           	opt stack 0
   430  00FD87                     _keys:
   431                           	opt stack 0
   432  00FD87  31                 	db	49
   433  00FD88  32                 	db	50
   434  00FD89  33                 	db	51
   435  00FD8A  41                 	db	65
   436  00FD8B  34                 	db	52
   437  00FD8C  35                 	db	53
   438  00FD8D  36                 	db	54
   439  00FD8E  42                 	db	66
   440  00FD8F  37                 	db	55
   441  00FD90  38                 	db	56
   442  00FD91  39                 	db	57
   443  00FD92  43                 	db	67
   444  00FD93  2A                 	db	42
   445  00FD94  30                 	db	48
   446  00FD95  23                 	db	35
   447  00FD96  44                 	db	68
   448  00FD97  00                 	db	0
   449  00FD98                     __end_of_keys:
   450                           	opt stack 0
   451  00FD98                     _dpowers:
   452                           	opt stack 0
   453  00FD98  0001               	dw	1
   454  00FD9A  000A               	dw	10
   455  00FD9C  0064               	dw	100
   456  00FD9E  03E8               	dw	1000
   457  00FDA0  2710               	dw	10000
   458  00FDA2                     __end_of_dpowers:
   459                           	opt stack 0
   460  00FDA2                     _hexpowers:
   461                           	opt stack 0
   462  00FDA2  0001               	dw	1
   463  00FDA4  0010               	dw	16
   464  00FDA6  0100               	dw	256
   465  00FDA8  1000               	dw	4096
   466  00FDAA                     __end_of_hexpowers:
   467                           	opt stack 0
   468  0000                     _ADRES	set	4035
   469  0000                     _TMR0	set	4054
   470  0000                     _TMR1	set	4046
   471  0000                     _ADCON0	set	4034
   472  0000                     _ADCON0bits	set	4034
   473  0000                     _ADCON1	set	4033
   474  0000                     _ADCON2	set	4032
   475  0000                     _CMCONbits	set	4020
   476  0000                     _CVRCON	set	4021
   477  0000                     _EEADR	set	4009
   478  0000                     _EEADRH	set	4010
   479  0000                     _EECON1bits	set	4006
   480  0000                     _EECON2	set	4007
   481  0000                     _EEDATA	set	4008
   482  0000                     _INTCONbits	set	4082
   483  0000                     _LATA	set	3977
   484  0000                     _LATAbits	set	3977
   485  0000                     _LATB	set	3978
   486  0000                     _LATBbits	set	3978
   487  0000                     _LATC	set	3979
   488  0000                     _LATCbits	set	3979
   489  0000                     _LATD	set	3980
   490  0000                     _LATDbits	set	3980
   491  0000                     _LATE	set	3981
   492  0000                     _LATEbits	set	3981
   493  0000                     _PIR2bits	set	4001
   494  0000                     _PORTB	set	3969
   495  0000                     _SSPADD	set	4040
   496  0000                     _SSPBUF	set	4041
   497  0000                     _SSPCON1	set	4038
   498  0000                     _SSPCON2	set	4037
   499  0000                     _SSPSTAT	set	4039
   500  0000                     _T0CON	set	4053
   501  0000                     _T0CONbits	set	4053
   502  0000                     _T1CON	set	4045
   503  0000                     _T1CONbits	set	4045
   504  0000                     _T2CON	set	4042
   505  0000                     _TMR2	set	4044
   506  0000                     _TRISA	set	3986
   507  0000                     _TRISB	set	3987
   508  0000                     _TRISC	set	3988
   509  0000                     _TRISD	set	3989
   510  0000                     _TRISE	set	3990
   511  0000                     _ACKDT	set	32301
   512  0000                     _ACKEN	set	32300
   513  0000                     _GIE	set	32663
   514  0000                     _INT1IE	set	32643
   515  0000                     _INT1IF	set	32640
   516  0000                     _PEIE	set	32662
   517  0000                     _PEN	set	32298
   518  0000                     _RCEN	set	32299
   519  0000                     _SEN	set	32296
   520  0000                     _TMR0IE	set	32661
   521  0000                     _TMR0IF	set	32658
   522  0000                     _TMR1IE	set	31976
   523  0000                     _TMR1IF	set	31984
   524  0000                     _TMR2IE	set	31977
   525  0000                     _TMR2IF	set	31985
   526  0000                     _TMR2ON	set	32338
   527  0000                     _TRISC3	set	31907
   528  0000                     _TRISC4	set	31908
   529  0000                     _nRBPU	set	32655
   530  00FDAA                     STR_8:
   531  00FDAA  25                 	db	37
   532  00FDAB  30                 	db	48	;'0'
   533  00FDAC  32                 	db	50	;'2'
   534  00FDAD  64                 	db	100	;'d'
   535  00FDAE  3A                 	db	58	;':'
   536  00FDAF  25                 	db	37
   537  00FDB0  30                 	db	48	;'0'
   538  00FDB1  32                 	db	50	;'2'
   539  00FDB2  64                 	db	100	;'d'
   540  00FDB3  20                 	db	32
   541  00FDB4  20                 	db	32
   542  00FDB5  20                 	db	32
   543  00FDB6  20                 	db	32
   544  00FDB7  20                 	db	32
   545  00FDB8  20                 	db	32
   546  00FDB9  20                 	db	32
   547  00FDBA  20                 	db	32
   548  00FDBB  20                 	db	32
   549  00FDBC  20                 	db	32
   550  00FDBD  20                 	db	32
   551  00FDBE  20                 	db	32
   552  00FDBF  20                 	db	32
   553  00FDC0  20                 	db	32
   554  00FDC1  20                 	db	32
   555  00FDC2  00                 	db	0
   556  00FDC3                     STR_20:
   557  00FDC3  25                 	db	37
   558  00FDC4  30                 	db	48	;'0'
   559  00FDC5  32                 	db	50	;'2'
   560  00FDC6  78                 	db	120	;'x'
   561  00FDC7  2F                 	db	47
   562  00FDC8  25                 	db	37
   563  00FDC9  30                 	db	48	;'0'
   564  00FDCA  32                 	db	50	;'2'
   565  00FDCB  78                 	db	120	;'x'
   566  00FDCC  2F                 	db	47
   567  00FDCD  25                 	db	37
   568  00FDCE  30                 	db	48	;'0'
   569  00FDCF  32                 	db	50	;'2'
   570  00FDD0  78                 	db	120	;'x'
   571  00FDD1  20                 	db	32
   572  00FDD2  20                 	db	32
   573  00FDD3  20                 	db	32
   574  00FDD4  20                 	db	32
   575  00FDD5  20                 	db	32
   576  00FDD6  20                 	db	32
   577  00FDD7  20                 	db	32
   578  00FDD8  20                 	db	32
   579  00FDD9  00                 	db	0
   580  00FDDA                     STR_21:
   581  00FDDA  25                 	db	37
   582  00FDDB  30                 	db	48	;'0'
   583  00FDDC  32                 	db	50	;'2'
   584  00FDDD  78                 	db	120	;'x'
   585  00FDDE  3A                 	db	58	;':'
   586  00FDDF  25                 	db	37
   587  00FDE0  30                 	db	48	;'0'
   588  00FDE1  32                 	db	50	;'2'
   589  00FDE2  78                 	db	120	;'x'
   590  00FDE3  3A                 	db	58	;':'
   591  00FDE4  25                 	db	37
   592  00FDE5  30                 	db	48	;'0'
   593  00FDE6  32                 	db	50	;'2'
   594  00FDE7  78                 	db	120	;'x'
   595  00FDE8  20                 	db	32
   596  00FDE9  20                 	db	32
   597  00FDEA  20                 	db	32
   598  00FDEB  20                 	db	32
   599  00FDEC  20                 	db	32
   600  00FDED  20                 	db	32
   601  00FDEE  20                 	db	32
   602  00FDEF  20                 	db	32
   603  00FDF0  00                 	db	0
   604  00FDF1                     STR_32:
   605  00FDF1  44                 	db	68	;'D'
   606  00FDF2  41                 	db	65	;'A'
   607  00FDF3  54                 	db	84	;'T'
   608  00FDF4  45                 	db	69	;'E'
   609  00FDF5  3A                 	db	58	;':'
   610  00FDF6  20                 	db	32
   611  00FDF7  25                 	db	37
   612  00FDF8  30                 	db	48	;'0'
   613  00FDF9  32                 	db	50	;'2'
   614  00FDFA  78                 	db	120	;'x'
   615  00FDFB  2F                 	db	47
   616  00FDFC  25                 	db	37
   617  00FDFD  30                 	db	48	;'0'
   618  00FDFE  32                 	db	50	;'2'
   619  00FDFF  78                 	db	120	;'x'
   620  00FE00  2F                 	db	47
   621  00FE01  25                 	db	37
   622  00FE02  30                 	db	48	;'0'
   623  00FE03  32                 	db	50	;'2'
   624  00FE04  78                 	db	120	;'x'
   625  00FE05  20                 	db	32
   626  00FE06  20                 	db	32
   627  00FE07  00                 	db	0
   628  00FE08                     STR_33:
   629  00FE08  54                 	db	84	;'T'
   630  00FE09  49                 	db	73	;'I'
   631  00FE0A  4D                 	db	77	;'M'
   632  00FE0B  45                 	db	69	;'E'
   633  00FE0C  3A                 	db	58	;':'
   634  00FE0D  20                 	db	32
   635  00FE0E  25                 	db	37
   636  00FE0F  30                 	db	48	;'0'
   637  00FE10  32                 	db	50	;'2'
   638  00FE11  78                 	db	120	;'x'
   639  00FE12  3A                 	db	58	;':'
   640  00FE13  25                 	db	37
   641  00FE14  30                 	db	48	;'0'
   642  00FE15  32                 	db	50	;'2'
   643  00FE16  78                 	db	120	;'x'
   644  00FE17  3A                 	db	58	;':'
   645  00FE18  25                 	db	37
   646  00FE19  30                 	db	48	;'0'
   647  00FE1A  32                 	db	50	;'2'
   648  00FE1B  78                 	db	120	;'x'
   649  00FE1C  20                 	db	32
   650  00FE1D  20                 	db	32
   651  00FE1E  00                 	db	0
   652  00FE1F                     STR_37:
   653  00FE1F  41                 	db	65	;'A'
   654  00FE20  41                 	db	65	;'A'
   655  00FE21  3A                 	db	58	;':'
   656  00FE22  25                 	db	37
   657  00FE23  30                 	db	48	;'0'
   658  00FE24  32                 	db	50	;'2'
   659  00FE25  64                 	db	100	;'d'
   660  00FE26  20                 	db	32
   661  00FE27  43                 	db	67	;'C'
   662  00FE28  3A                 	db	58	;':'
   663  00FE29  25                 	db	37
   664  00FE2A  30                 	db	48	;'0'
   665  00FE2B  32                 	db	50	;'2'
   666  00FE2C  64                 	db	100	;'d'
   667  00FE2D  20                 	db	32
   668  00FE2E  39                 	db	57	;'9'
   669  00FE2F  56                 	db	86	;'V'
   670  00FE30  3A                 	db	58	;':'
   671  00FE31  25                 	db	37
   672  00FE32  30                 	db	48	;'0'
   673  00FE33  32                 	db	50	;'2'
   674  00FE34  64                 	db	100	;'d'
   675  00FE35  00                 	db	0
   676  00FE36                     STR_39:
   677  00FE36  52                 	db	82	;'R'
   678  00FE37  55                 	db	85	;'U'
   679  00FE38  4E                 	db	78	;'N'
   680  00FE39  4E                 	db	78	;'N'
   681  00FE3A  49                 	db	73	;'I'
   682  00FE3B  4E                 	db	78	;'N'
   683  00FE3C  47                 	db	71	;'G'
   684  00FE3D  3A                 	db	58	;':'
   685  00FE3E  20                 	db	32
   686  00FE3F  25                 	db	37
   687  00FE40  30                 	db	48	;'0'
   688  00FE41  32                 	db	50	;'2'
   689  00FE42  64                 	db	100	;'d'
   690  00FE43  3A                 	db	58	;':'
   691  00FE44  25                 	db	37
   692  00FE45  30                 	db	48	;'0'
   693  00FE46  32                 	db	50	;'2'
   694  00FE47  64                 	db	100	;'d'
   695  00FE48  20                 	db	32
   696  00FE49  20                 	db	32
   697  00FE4A  20                 	db	32
   698  00FE4B  00                 	db	0
   699  00FE4C                     STR_14:
   700  00FE4C  42                 	db	66	;'B'
   701  00FE4D  41                 	db	65	;'A'
   702  00FE4E  54                 	db	84	;'T'
   703  00FE4F  54                 	db	84	;'T'
   704  00FE50  45                 	db	69	;'E'
   705  00FE51  52                 	db	82	;'R'
   706  00FE52  49                 	db	73	;'I'
   707  00FE53  45                 	db	69	;'E'
   708  00FE54  53                 	db	83	;'S'
   709  00FE55  3A                 	db	58	;':'
   710  00FE56  20                 	db	32
   711  00FE57  25                 	db	37
   712  00FE58  30                 	db	48	;'0'
   713  00FE59  32                 	db	50	;'2'
   714  00FE5A  64                 	db	100	;'d'
   715  00FE5B  20                 	db	32
   716  00FE5C  20                 	db	32
   717  00FE5D  20                 	db	32
   718  00FE5E  20                 	db	32
   719  00FE5F  20                 	db	32
   720  00FE60  00                 	db	0
   721  00FE61                     STR_38:
   722  00FE61  58                 	db	88	;'X'
   723  00FE62  3A                 	db	58	;':'
   724  00FE63  25                 	db	37
   725  00FE64  30                 	db	48	;'0'
   726  00FE65  32                 	db	50	;'2'
   727  00FE66  64                 	db	100	;'d'
   728  00FE67  20                 	db	32
   729  00FE68  54                 	db	84	;'T'
   730  00FE69  49                 	db	73	;'I'
   731  00FE6A  4D                 	db	77	;'M'
   732  00FE6B  45                 	db	69	;'E'
   733  00FE6C  3A                 	db	58	;':'
   734  00FE6D  25                 	db	37
   735  00FE6E  64                 	db	100	;'d'
   736  00FE6F  73                 	db	115	;'s'
   737  00FE70  20                 	db	32
   738  00FE71  20                 	db	32
   739  00FE72  20                 	db	32
   740  00FE73  20                 	db	32
   741  00FE74  00                 	db	0
   742  00FE75                     STR_10:
   743  00FE75  42                 	db	66	;'B'
   744  00FE76  41                 	db	65	;'A'
   745  00FE77  54                 	db	84	;'T'
   746  00FE78  54                 	db	84	;'T'
   747  00FE79  45                 	db	69	;'E'
   748  00FE7A  52                 	db	82	;'R'
   749  00FE7B  49                 	db	73	;'I'
   750  00FE7C  45                 	db	69	;'E'
   751  00FE7D  53                 	db	83	;'S'
   752  00FE7E  3A                 	db	58	;':'
   753  00FE7F  20                 	db	32
   754  00FE80  25                 	db	37
   755  00FE81  30                 	db	48	;'0'
   756  00FE82  32                 	db	50	;'2'
   757  00FE83  64                 	db	100	;'d'
   758  00FE84  20                 	db	32
   759  00FE85  20                 	db	32
   760  00FE86  20                 	db	32
   761  00FE87  00                 	db	0
   762  00FE88                     STR_40:
   763  00FE88  30                 	db	48	;'0'
   764  00FE89  31                 	db	49	;'1'
   765  00FE8A  32                 	db	50	;'2'
   766  00FE8B  33                 	db	51	;'3'
   767  00FE8C  34                 	db	52	;'4'
   768  00FE8D  35                 	db	53	;'5'
   769  00FE8E  36                 	db	54	;'6'
   770  00FE8F  37                 	db	55	;'7'
   771  00FE90  38                 	db	56	;'8'
   772  00FE91  39                 	db	57	;'9'
   773  00FE92  61                 	db	97	;'a'
   774  00FE93  62                 	db	98	;'b'
   775  00FE94  63                 	db	99	;'c'
   776  00FE95  64                 	db	100	;'d'
   777  00FE96  65                 	db	101	;'e'
   778  00FE97  66                 	db	102	;'f'
   779  00FE98  00                 	db	0
   780  00FE99                     STR_23:
   781  00FE99  20                 	db	32
   782  00FE9A  20                 	db	32
   783  00FE9B  20                 	db	32
   784  00FE9C  20                 	db	32
   785  00FE9D  20                 	db	32
   786  00FE9E  20                 	db	32
   787  00FE9F  20                 	db	32
   788  00FEA0  20                 	db	32
   789  00FEA1  20                 	db	32
   790  00FEA2  20                 	db	32
   791  00FEA3  20                 	db	32
   792  00FEA4  20                 	db	32
   793  00FEA5  20                 	db	32
   794  00FEA6  20                 	db	32
   795  00FEA7  20                 	db	32
   796  00FEA8  20                 	db	32
   797  00FEA9  00                 	db	0
   798  00FEAA                     STR_11:
   799  00FEAA  23                 	db	35
   800  00FEAB  20                 	db	32
   801  00FEAC  4F                 	db	79	;'O'
   802  00FEAD  46                 	db	70	;'F'
   803  00FEAE  20                 	db	32
   804  00FEAF  43                 	db	67	;'C'
   805  00FEB0  20                 	db	32
   806  00FEB1  20                 	db	32
   807  00FEB2  20                 	db	32
   808  00FEB3  20                 	db	32
   809  00FEB4  20                 	db	32
   810  00FEB5  20                 	db	32
   811  00FEB6  20                 	db	32
   812  00FEB7  20                 	db	32
   813  00FEB8  20                 	db	32
   814  00FEB9  20                 	db	32
   815  00FEBA  00                 	db	0
   816  00FEBB                     STR_15:
   817  00FEBB  23                 	db	35
   818  00FEBC  20                 	db	32
   819  00FEBD  4F                 	db	79	;'O'
   820  00FEBE  46                 	db	70	;'F'
   821  00FEBF  20                 	db	32
   822  00FEC0  41                 	db	65	;'A'
   823  00FEC1  41                 	db	65	;'A'
   824  00FEC2  20                 	db	32
   825  00FEC3  20                 	db	32
   826  00FEC4  20                 	db	32
   827  00FEC5  20                 	db	32
   828  00FEC6  20                 	db	32
   829  00FEC7  20                 	db	32
   830  00FEC8  20                 	db	32
   831  00FEC9  20                 	db	32
   832  00FECA  20                 	db	32
   833  00FECB  00                 	db	0
   834  00FECC                     STR_13:
   835  00FECC  23                 	db	35
   836  00FECD  20                 	db	32
   837  00FECE  4F                 	db	79	;'O'
   838  00FECF  46                 	db	70	;'F'
   839  00FED0  20                 	db	32
   840  00FED1  39                 	db	57	;'9'
   841  00FED2  56                 	db	86	;'V'
   842  00FED3  20                 	db	32
   843  00FED4  20                 	db	32
   844  00FED5  20                 	db	32
   845  00FED6  20                 	db	32
   846  00FED7  20                 	db	32
   847  00FED8  20                 	db	32
   848  00FED9  20                 	db	32
   849  00FEDA  20                 	db	32
   850  00FEDB  20                 	db	32
   851  00FEDC  00                 	db	0
   852  00FEDD                     STR_19:
   853  00FEDD  4C                 	db	76	;'L'
   854  00FEDE  41                 	db	65	;'A'
   855  00FEDF  53                 	db	83	;'S'
   856  00FEE0  54                 	db	84	;'T'
   857  00FEE1  20                 	db	32
   858  00FEE2  52                 	db	82	;'R'
   859  00FEE3  55                 	db	85	;'U'
   860  00FEE4  4E                 	db	78	;'N'
   861  00FEE5  3A                 	db	58	;':'
   862  00FEE6  20                 	db	32
   863  00FEE7  20                 	db	32
   864  00FEE8  20                 	db	32
   865  00FEE9  20                 	db	32
   866  00FEEA  20                 	db	32
   867  00FEEB  20                 	db	32
   868  00FEEC  20                 	db	32
   869  00FEED  00                 	db	0
   870  00FEEE                     STR_9:
   871  00FEEE  54                 	db	84	;'T'
   872  00FEEF  4F                 	db	79	;'O'
   873  00FEF0  54                 	db	84	;'T'
   874  00FEF1  41                 	db	65	;'A'
   875  00FEF2  4C                 	db	76	;'L'
   876  00FEF3  20                 	db	32
   877  00FEF4  23                 	db	35
   878  00FEF5  20                 	db	32
   879  00FEF6  4F                 	db	79	;'O'
   880  00FEF7  46                 	db	70	;'F'
   881  00FEF8  20                 	db	32
   882  00FEF9  20                 	db	32
   883  00FEFA  20                 	db	32
   884  00FEFB  20                 	db	32
   885  00FEFC  20                 	db	32
   886  00FEFD  20                 	db	32
   887  00FEFE  00                 	db	0
   888  00FEFF                     STR_30:
   889  00FEFF  50                 	db	80	;'P'
   890  00FF00  52                 	db	82	;'R'
   891  00FF01  45                 	db	69	;'E'
   892  00FF02  53                 	db	83	;'S'
   893  00FF03  53                 	db	83	;'S'
   894  00FF04  20                 	db	32
   895  00FF05  2A                 	db	42
   896  00FF06  20                 	db	32
   897  00FF07  54                 	db	84	;'T'
   898  00FF08  4F                 	db	79	;'O'
   899  00FF09  20                 	db	32
   900  00FF0A  20                 	db	32
   901  00FF0B  20                 	db	32
   902  00FF0C  20                 	db	32
   903  00FF0D  20                 	db	32
   904  00FF0E  20                 	db	32
   905  00FF0F  00                 	db	0
   906  00FF10                     STR_6:
   907  00FF10  54                 	db	84	;'T'
   908  00FF11  4F                 	db	79	;'O'
   909  00FF12  20                 	db	32
   910  00FF13  43                 	db	67	;'C'
   911  00FF14  4F                 	db	79	;'O'
   912  00FF15  4E                 	db	78	;'N'
   913  00FF16  54                 	db	84	;'T'
   914  00FF17  49                 	db	73	;'I'
   915  00FF18  4E                 	db	78	;'N'
   916  00FF19  55                 	db	85	;'U'
   917  00FF1A  45                 	db	69	;'E'
   918  00FF1B  20                 	db	32
   919  00FF1C  20                 	db	32
   920  00FF1D  20                 	db	32
   921  00FF1E  20                 	db	32
   922  00FF1F  20                 	db	32
   923  00FF20  00                 	db	0
   924  00FF21                     STR_17:
   925  00FF21  23                 	db	35
   926  00FF22  20                 	db	32
   927  00FF23  4F                 	db	79	;'O'
   928  00FF24  46                 	db	70	;'F'
   929  00FF25  20                 	db	32
   930  00FF26  44                 	db	68	;'D'
   931  00FF27  52                 	db	82	;'R'
   932  00FF28  41                 	db	65	;'A'
   933  00FF29  49                 	db	73	;'I'
   934  00FF2A  4E                 	db	78	;'N'
   935  00FF2B  45                 	db	69	;'E'
   936  00FF2C  44                 	db	68	;'D'
   937  00FF2D  20                 	db	32
   938  00FF2E  20                 	db	32
   939  00FF2F  20                 	db	32
   940  00FF30  20                 	db	32
   941  00FF31  00                 	db	0
   942  00FF32                     STR_5:
   943  00FF32  44                 	db	68	;'D'
   944  00FF33  4F                 	db	79	;'O'
   945  00FF34  4E                 	db	78	;'N'
   946  00FF35  45                 	db	69	;'E'
   947  00FF36  21                 	db	33
   948  00FF37  20                 	db	32
   949  00FF38  50                 	db	80	;'P'
   950  00FF39  52                 	db	82	;'R'
   951  00FF3A  45                 	db	69	;'E'
   952  00FF3B  53                 	db	83	;'S'
   953  00FF3C  53                 	db	83	;'S'
   954  00FF3D  20                 	db	32
   955  00FF3E  2A                 	db	42
   956  00FF3F  20                 	db	32
   957  00FF40  20                 	db	32
   958  00FF41  20                 	db	32
   959  00FF42  00                 	db	0
   960  00FF43                     STR_34:
   961  00FF43  52                 	db	82	;'R'
   962  00FF44  55                 	db	85	;'U'
   963  00FF45  4E                 	db	78	;'N'
   964  00FF46  4E                 	db	78	;'N'
   965  00FF47  49                 	db	73	;'I'
   966  00FF48  4E                 	db	78	;'N'
   967  00FF49  47                 	db	71	;'G'
   968  00FF4A  3A                 	db	58	;':'
   969  00FF4B  20                 	db	32
   970  00FF4C  30                 	db	48	;'0'
   971  00FF4D  30                 	db	48	;'0'
   972  00FF4E  3A                 	db	58	;':'
   973  00FF4F  30                 	db	48	;'0'
   974  00FF50  30                 	db	48	;'0'
   975  00FF51  20                 	db	32
   976  00FF52  20                 	db	32
   977  00FF53  00                 	db	0
   978  00FF54                     STR_7:
   979  00FF54  54                 	db	84	;'T'
   980  00FF55  4F                 	db	79	;'O'
   981  00FF56  54                 	db	84	;'T'
   982  00FF57  41                 	db	65	;'A'
   983  00FF58  4C                 	db	76	;'L'
   984  00FF59  20                 	db	32
   985  00FF5A  52                 	db	82	;'R'
   986  00FF5B  55                 	db	85	;'U'
   987  00FF5C  4E                 	db	78	;'N'
   988  00FF5D  20                 	db	32
   989  00FF5E  54                 	db	84	;'T'
   990  00FF5F  49                 	db	73	;'I'
   991  00FF60  4D                 	db	77	;'M'
   992  00FF61  45                 	db	69	;'E'
   993  00FF62  3A                 	db	58	;':'
   994  00FF63  20                 	db	32
   995  00FF64  00                 	db	0
   996  00FF65                     STR_3:
   997  00FF65  20                 	db	32
   998  00FF66  3C                 	db	60	;'<'
   999  00FF67  54                 	db	84	;'T'
  1000  00FF68  4F                 	db	79	;'O'
  1001  00FF69  47                 	db	71	;'G'
  1002  00FF6A  47                 	db	71	;'G'
  1003  00FF6B  4C                 	db	76	;'L'
  1004  00FF6C  45                 	db	69	;'E'
  1005  00FF6D  20                 	db	32
  1006  00FF6E  20                 	db	32
  1007  00FF6F  4C                 	db	76	;'L'
  1008  00FF70  4F                 	db	79	;'O'
  1009  00FF71  47                 	db	71	;'G'
  1010  00FF72  53                 	db	83	;'S'
  1011  00FF73  3E                 	db	62	;'>'
  1012  00FF74  20                 	db	32
  1013  00FF75  00                 	db	0
  1014  00FF76                     STR_31:
  1015  00FF76  53                 	db	83	;'S'
  1016  00FF77  45                 	db	69	;'E'
  1017  00FF78  4E                 	db	78	;'N'
  1018  00FF79  44                 	db	68	;'D'
  1019  00FF7A  20                 	db	32
  1020  00FF7B  44                 	db	68	;'D'
  1021  00FF7C  41                 	db	65	;'A'
  1022  00FF7D  54                 	db	84	;'T'
  1023  00FF7E  41                 	db	65	;'A'
  1024  00FF7F  20                 	db	32
  1025  00FF80  54                 	db	84	;'T'
  1026  00FF81  4F                 	db	79	;'O'
  1027  00FF82  20                 	db	32
  1028  00FF83  50                 	db	80	;'P'
  1029  00FF84  43                 	db	67	;'C'
  1030  00FF85  20                 	db	32
  1031  00FF86  00                 	db	0
  1032  00FF87                     STR_4:
  1033  00FF87  50                 	db	80	;'P'
  1034  00FF88  52                 	db	82	;'R'
  1035  00FF89  45                 	db	69	;'E'
  1036  00FF8A  53                 	db	83	;'S'
  1037  00FF8B  53                 	db	83	;'S'
  1038  00FF8C  20                 	db	32
  1039  00FF8D  23                 	db	35
  1040  00FF8E  20                 	db	32
  1041  00FF8F  54                 	db	84	;'T'
  1042  00FF90  4F                 	db	79	;'O'
  1043  00FF91  20                 	db	32
  1044  00FF92  53                 	db	83	;'S'
  1045  00FF93  54                 	db	84	;'T'
  1046  00FF94  4F                 	db	79	;'O'
  1047  00FF95  50                 	db	80	;'P'
  1048  00FF96  20                 	db	32
  1049  00FF97  00                 	db	0
  1050  00FF98                     STR_22:
  1051  00FF98  50                 	db	80	;'P'
  1052  00FF99  45                 	db	69	;'E'
  1053  00FF9A  52                 	db	82	;'R'
  1054  00FF9B  4D                 	db	77	;'M'
  1055  00FF9C  41                 	db	65	;'A'
  1056  00FF9D  4E                 	db	78	;'N'
  1057  00FF9E  45                 	db	69	;'E'
  1058  00FF9F  4E                 	db	78	;'N'
  1059  00FFA0  54                 	db	84	;'T'
  1060  00FFA1  20                 	db	32
  1061  00FFA2  4C                 	db	76	;'L'
  1062  00FFA3  4F                 	db	79	;'O'
  1063  00FFA4  47                 	db	71	;'G'
  1064  00FFA5  20                 	db	32
  1065  00FFA6  41                 	db	65	;'A'
  1066  00FFA7  3A                 	db	58	;':'
  1067  00FFA8  00                 	db	0
  1068  00FFA9                     STR_24:
  1069  00FFA9  50                 	db	80	;'P'
  1070  00FFAA  45                 	db	69	;'E'
  1071  00FFAB  52                 	db	82	;'R'
  1072  00FFAC  4D                 	db	77	;'M'
  1073  00FFAD  41                 	db	65	;'A'
  1074  00FFAE  4E                 	db	78	;'N'
  1075  00FFAF  45                 	db	69	;'E'
  1076  00FFB0  4E                 	db	78	;'N'
  1077  00FFB1  54                 	db	84	;'T'
  1078  00FFB2  20                 	db	32
  1079  00FFB3  4C                 	db	76	;'L'
  1080  00FFB4  4F                 	db	79	;'O'
  1081  00FFB5  47                 	db	71	;'G'
  1082  00FFB6  20                 	db	32
  1083  00FFB7  42                 	db	66	;'B'
  1084  00FFB8  3A                 	db	58	;':'
  1085  00FFB9  00                 	db	0
  1086  00FFBA                     STR_26:
  1087  00FFBA  50                 	db	80	;'P'
  1088  00FFBB  45                 	db	69	;'E'
  1089  00FFBC  52                 	db	82	;'R'
  1090  00FFBD  4D                 	db	77	;'M'
  1091  00FFBE  41                 	db	65	;'A'
  1092  00FFBF  4E                 	db	78	;'N'
  1093  00FFC0  45                 	db	69	;'E'
  1094  00FFC1  4E                 	db	78	;'N'
  1095  00FFC2  54                 	db	84	;'T'
  1096  00FFC3  20                 	db	32
  1097  00FFC4  4C                 	db	76	;'L'
  1098  00FFC5  4F                 	db	79	;'O'
  1099  00FFC6  47                 	db	71	;'G'
  1100  00FFC7  20                 	db	32
  1101  00FFC8  43                 	db	67	;'C'
  1102  00FFC9  3A                 	db	58	;':'
  1103  00FFCA  00                 	db	0
  1104  00FFCB                     STR_28:
  1105  00FFCB  50                 	db	80	;'P'
  1106  00FFCC  45                 	db	69	;'E'
  1107  00FFCD  52                 	db	82	;'R'
  1108  00FFCE  4D                 	db	77	;'M'
  1109  00FFCF  41                 	db	65	;'A'
  1110  00FFD0  4E                 	db	78	;'N'
  1111  00FFD1  45                 	db	69	;'E'
  1112  00FFD2  4E                 	db	78	;'N'
  1113  00FFD3  54                 	db	84	;'T'
  1114  00FFD4  20                 	db	32
  1115  00FFD5  4C                 	db	76	;'L'
  1116  00FFD6  4F                 	db	79	;'O'
  1117  00FFD7  47                 	db	71	;'G'
  1118  00FFD8  20                 	db	32
  1119  00FFD9  44                 	db	68	;'D'
  1120  00FFDA  3A                 	db	58	;':'
  1121  00FFDB  00                 	db	0
  1122  00FFDC                     STR_2:
  1123  00FFDC  3C                 	db	60	;'<'
  1124  00FFDD  20                 	db	32
  1125  00FFDE  54                 	db	84	;'T'
  1126  00FFDF  4F                 	db	79	;'O'
  1127  00FFE0  47                 	db	71	;'G'
  1128  00FFE1  47                 	db	71	;'G'
  1129  00FFE2  4C                 	db	76	;'L'
  1130  00FFE3  45                 	db	69	;'E'
  1131  00FFE4  20                 	db	32
  1132  00FFE5  20                 	db	32
  1133  00FFE6  4C                 	db	76	;'L'
  1134  00FFE7  4F                 	db	79	;'O'
  1135  00FFE8  47                 	db	71	;'G'
  1136  00FFE9  53                 	db	83	;'S'
  1137  00FFEA  20                 	db	32
  1138  00FFEB  3E                 	db	62	;'>'
  1139  00FFEC  00                 	db	0
  1140  00FFED                     STR_1:
  1141  00FFED  50                 	db	80	;'P'
  1142  00FFEE  52                 	db	82	;'R'
  1143  00FFEF  45                 	db	69	;'E'
  1144  00FFF0  53                 	db	83	;'S'
  1145  00FFF1  53                 	db	83	;'S'
  1146  00FFF2  20                 	db	32
  1147  00FFF3  2A                 	db	42
  1148  00FFF4  20                 	db	32
  1149  00FFF5  54                 	db	84	;'T'
  1150  00FFF6  4F                 	db	79	;'O'
  1151  00FFF7  20                 	db	32
  1152  00FFF8  53                 	db	83	;'S'
  1153  00FFF9  54                 	db	84	;'T'
  1154  00FFFA  41                 	db	65	;'A'
  1155  00FFFB  52                 	db	82	;'R'
  1156  00FFFC  54                 	db	84	;'T'
  1157  00FFFD  00                 	db	0
  1158  0000                     
  1159                           ; #config settings
  1160  00FFFE  00                 	db	0	; dummy byte at the end
  1161  0000                     
  1162                           	psect	cinit
  1163  00326C                     __pcinit:
  1164                           	opt stack 0
  1165  00326C                     start_initialization:
  1166                           	opt stack 0
  1167  00326C                     __initialization:
  1168                           	opt stack 0
  1169                           
  1170                           ; Initialize objects allocated to BANK0 (14 bytes)
  1171                           ; load TBLPTR registers with __pidataBANK0
  1172  00326C  0ECE               	movlw	low __pidataBANK0
  1173  00326E  6EF6               	movwf	tblptrl,c
  1174  003270  0E37               	movlw	high __pidataBANK0
  1175  003272  6EF7               	movwf	tblptrh,c
  1176  003274  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1177  003276  6EF8               	movwf	tblptru,c
  1178  003278  EE00  F0ED         	lfsr	0,__pdataBANK0
  1179  00327C  EE10 F00E          	lfsr	1,14
  1180  003280                     copy_data0:
  1181  003280  0009               	tblrd		*+
  1182  003282  CFF5 FFEE          	movff	tablat,postinc0
  1183  003286  50E5               	movf	postdec1,w,c
  1184  003288  50E1               	movf	fsr1l,w,c
  1185  00328A  E1FA               	bnz	copy_data0
  1186                           
  1187                           ; Initialize objects allocated to COMRAM (19 bytes)
  1188                           ; load TBLPTR registers with __pidataCOMRAM
  1189  00328C  0E88               	movlw	low __pidataCOMRAM
  1190  00328E  6EF6               	movwf	tblptrl,c
  1191  003290  0E37               	movlw	high __pidataCOMRAM
  1192  003292  6EF7               	movwf	tblptrh,c
  1193  003294  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1194  003296  6EF8               	movwf	tblptru,c
  1195  003298  EE00  F035         	lfsr	0,__pdataCOMRAM
  1196  00329C  EE10 F013          	lfsr	1,19
  1197  0032A0                     copy_data1:
  1198  0032A0  0009               	tblrd		*+
  1199  0032A2  CFF5 FFEE          	movff	tablat,postinc0
  1200  0032A6  50E5               	movf	postdec1,w,c
  1201  0032A8  50E1               	movf	fsr1l,w,c
  1202  0032AA  E1FA               	bnz	copy_data1
  1203                           
  1204                           ; Clear objects allocated to BANK0 (37 bytes)
  1205  0032AC  EE00  F0C8         	lfsr	0,__pbssBANK0
  1206  0032B0  0E25               	movlw	37
  1207  0032B2                     clear_0:
  1208  0032B2  6AEE               	clrf	postinc0,c
  1209  0032B4  06E8               	decf	wreg,f,c
  1210  0032B6  E1FD               	bnz	clear_0
  1211                           
  1212                           ; Clear objects allocated to COMRAM (14 bytes)
  1213  0032B8  EE00  F048         	lfsr	0,__pbssCOMRAM
  1214  0032BC  0E0E               	movlw	14
  1215  0032BE                     clear_1:
  1216  0032BE  6AEE               	clrf	postinc0,c
  1217  0032C0  06E8               	decf	wreg,f,c
  1218  0032C2  E1FD               	bnz	clear_1
  1219  0032C4                     end_of_initialization:
  1220                           	opt stack 0
  1221  0032C4                     __end_of__initialization:
  1222                           	opt stack 0
  1223  0032C4  9056               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1224  0032C6  9256               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1225  0032C8  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1226  0032CA  6EF8               	movwf	tblptru,c
  1227  0032CC  0100               	movlb	0
  1228  0032CE  EF09  F000         	goto	_main	;jump to C main() function
  1229                           tblptru	equ	0xFF8
  1230                           tblptrh	equ	0xFF7
  1231                           tblptrl	equ	0xFF6
  1232                           tablat	equ	0xFF5
  1233                           postinc0	equ	0xFEE
  1234                           wreg	equ	0xFE8
  1235                           postdec1	equ	0xFE5
  1236                           fsr1l	equ	0xFE1
  1237                           
  1238                           	psect	bssCOMRAM
  1239  000048                     __pbssCOMRAM:
  1240                           	opt stack 0
  1241  000048                     _realTime:
  1242                           	opt stack 0
  1243  000048                     	ds	7
  1244  00004F                     _count_2ms:
  1245                           	opt stack 0
  1246  00004F                     	ds	2
  1247  000051                     _opTimer:
  1248                           	opt stack 0
  1249  000051                     	ds	1
  1250  000052                     _solOnTimer:
  1251                           	opt stack 0
  1252  000052                     	ds	1
  1253  000053                     _sorting:
  1254                           	opt stack 0
  1255  000053                     	ds	1
  1256  000054                     _step1:
  1257                           	opt stack 0
  1258  000054                     	ds	1
  1259  000055                     _step2:
  1260                           	opt stack 0
  1261  000055                     	ds	1
  1262                           tblptru	equ	0xFF8
  1263                           tblptrh	equ	0xFF7
  1264                           tblptrl	equ	0xFF6
  1265                           tablat	equ	0xFF5
  1266                           postinc0	equ	0xFEE
  1267                           wreg	equ	0xFE8
  1268                           postdec1	equ	0xFE5
  1269                           fsr1l	equ	0xFE1
  1270                           
  1271                           	psect	dataCOMRAM
  1272  000035                     __pdataCOMRAM:
  1273                           	opt stack 0
  1274  000035                     logPC@F3226:
  1275                           	opt stack 0
  1276  000035                     	ds	19
  1277                           tblptru	equ	0xFF8
  1278                           tblptrh	equ	0xFF7
  1279                           tblptrl	equ	0xFF6
  1280                           tablat	equ	0xFF5
  1281                           postinc0	equ	0xFEE
  1282                           wreg	equ	0xFE8
  1283                           postdec1	equ	0xFE5
  1284                           fsr1l	equ	0xFE1
  1285                           
  1286                           	psect	bssBANK0
  1287  0000C8                     __pbssBANK0:
  1288                           	opt stack 0
  1289  0000C8                     _lastRunRTC:
  1290                           	opt stack 0
  1291  0000C8                     	ds	7
  1292  0000CF                     _plat1Left:
  1293                           	opt stack 0
  1294  0000CF                     	ds	2
  1295  0000D1                     _plat1Right:
  1296                           	opt stack 0
  1297  0000D1                     	ds	2
  1298  0000D3                     _plat2Left:
  1299                           	opt stack 0
  1300  0000D3                     	ds	2
  1301  0000D5                     _plat2Right:
  1302                           	opt stack 0
  1303  0000D5                     	ds	2
  1304  0000D7                     _turn1BackLeft:
  1305                           	opt stack 0
  1306  0000D7                     	ds	2
  1307  0000D9                     _turn1BackRight:
  1308                           	opt stack 0
  1309  0000D9                     	ds	2
  1310  0000DB                     _turn2BackLeft:
  1311                           	opt stack 0
  1312  0000DB                     	ds	2
  1313  0000DD                     _turn2BackRight:
  1314                           	opt stack 0
  1315  0000DD                     	ds	2
  1316  0000DF                     _count9V:
  1317                           	opt stack 0
  1318  0000DF                     	ds	1
  1319  0000E0                     _countAA:
  1320                           	opt stack 0
  1321  0000E0                     	ds	1
  1322  0000E1                     _countC:
  1323                           	opt stack 0
  1324  0000E1                     	ds	1
  1325  0000E2                     _countDrain:
  1326                           	opt stack 0
  1327  0000E2                     	ds	1
  1328  0000E3                     _doneTimer:
  1329                           	opt stack 0
  1330  0000E3                     	ds	1
  1331  0000E4                     _doubleAA:
  1332                           	opt stack 0
  1333  0000E4                     	ds	1
  1334  0000E5                     _min:
  1335                           	opt stack 0
  1336  0000E5                     	ds	1
  1337  0000E6                     _num9V:
  1338                           	opt stack 0
  1339  0000E6                     	ds	1
  1340  0000E7                     _numAA:
  1341                           	opt stack 0
  1342  0000E7                     	ds	1
  1343  0000E8                     _numBats:
  1344                           	opt stack 0
  1345  0000E8                     	ds	1
  1346  0000E9                     _numC:
  1347                           	opt stack 0
  1348  0000E9                     	ds	1
  1349  0000EA                     _numDrain:
  1350                           	opt stack 0
  1351  0000EA                     	ds	1
  1352  0000EB                     _sec:
  1353                           	opt stack 0
  1354  0000EB                     	ds	1
  1355  0000EC                     _startGear:
  1356                           	opt stack 0
  1357  0000EC                     	ds	1
  1358                           tblptru	equ	0xFF8
  1359                           tblptrh	equ	0xFF7
  1360                           tblptrl	equ	0xFF6
  1361                           tablat	equ	0xFF5
  1362                           postinc0	equ	0xFEE
  1363                           wreg	equ	0xFE8
  1364                           postdec1	equ	0xFE5
  1365                           fsr1l	equ	0xFE1
  1366                           
  1367                           	psect	dataBANK0
  1368  0000ED                     __pdataBANK0:
  1369                           	opt stack 0
  1370  0000ED                     logPC@F3250:
  1371                           	opt stack 0
  1372  0000ED                     	ds	3
  1373  0000F0                     logPC@F3230:
  1374                           	opt stack 0
  1375  0000F0                     	ds	2
  1376  0000F2                     logPC@F3234:
  1377                           	opt stack 0
  1378  0000F2                     	ds	2
  1379  0000F4                     logPC@F3238:
  1380                           	opt stack 0
  1381  0000F4                     	ds	2
  1382  0000F6                     logPC@F3242:
  1383                           	opt stack 0
  1384  0000F6                     	ds	2
  1385  0000F8                     logPC@F3246:
  1386                           	opt stack 0
  1387  0000F8                     	ds	2
  1388  0000FA                     _screenMode:
  1389                           	opt stack 0
  1390  0000FA                     	ds	1
  1391                           tblptru	equ	0xFF8
  1392                           tblptrh	equ	0xFF7
  1393                           tblptrl	equ	0xFF6
  1394                           tablat	equ	0xFF5
  1395                           postinc0	equ	0xFEE
  1396                           wreg	equ	0xFE8
  1397                           postdec1	equ	0xFE5
  1398                           fsr1l	equ	0xFE1
  1399                           
  1400                           	psect	cstackBANK1
  1401  000100                     __pcstackBANK1:
  1402                           	opt stack 0
  1403  000100                     logPC@started_time:
  1404                           	opt stack 0
  1405                           
  1406                           ; 19 bytes @ 0x0
  1407  000100                     	ds	19
  1408  000113                     logPC@runTime:
  1409                           	opt stack 0
  1410                           
  1411                           ; 3 bytes @ 0x13
  1412  000113                     	ds	3
  1413  000116                     logPC@numberAA:
  1414                           	opt stack 0
  1415                           
  1416                           ; 2 bytes @ 0x16
  1417  000116                     	ds	2
  1418  000118                     logPC@numberC:
  1419                           	opt stack 0
  1420                           
  1421                           ; 2 bytes @ 0x18
  1422  000118                     	ds	2
  1423  00011A                     logPC@number9V:
  1424                           	opt stack 0
  1425                           
  1426                           ; 2 bytes @ 0x1A
  1427  00011A                     	ds	2
  1428  00011C                     logPC@numberDrain:
  1429                           	opt stack 0
  1430                           
  1431                           ; 2 bytes @ 0x1C
  1432  00011C                     	ds	2
  1433  00011E                     logPC@numberTotal:
  1434                           	opt stack 0
  1435                           
  1436                           ; 2 bytes @ 0x1E
  1437  00011E                     	ds	2
  1438  000120                     logPC@i:
  1439                           	opt stack 0
  1440                           
  1441                           ; 2 bytes @ 0x20
  1442  000120                     	ds	2
  1443  000122                     logPC@i_913:
  1444                           	opt stack 0
  1445                           
  1446                           ; 2 bytes @ 0x22
  1447  000122                     	ds	2
  1448  000124                     logPC@i_914:
  1449                           	opt stack 0
  1450                           
  1451                           ; 2 bytes @ 0x24
  1452  000124                     	ds	2
  1453  000126                     logPC@i_917:
  1454                           	opt stack 0
  1455                           
  1456                           ; 2 bytes @ 0x26
  1457  000126                     	ds	2
  1458  000128                     logPC@i_918:
  1459                           	opt stack 0
  1460                           
  1461                           ; 2 bytes @ 0x28
  1462  000128                     	ds	2
  1463  00012A                     logPC@i_921:
  1464                           	opt stack 0
  1465                           
  1466                           ; 2 bytes @ 0x2A
  1467  00012A                     	ds	2
  1468  00012C                     logPC@i_922:
  1469                           	opt stack 0
  1470                           
  1471                           ; 2 bytes @ 0x2C
  1472  00012C                     	ds	2
  1473  00012E                     logPC@i_925:
  1474                           	opt stack 0
  1475                           
  1476                           ; 2 bytes @ 0x2E
  1477  00012E                     	ds	2
  1478  000130                     logPC@i_926:
  1479                           	opt stack 0
  1480                           
  1481                           ; 2 bytes @ 0x30
  1482  000130                     	ds	2
  1483  000132                     logPC@i_929:
  1484                           	opt stack 0
  1485                           
  1486                           ; 2 bytes @ 0x32
  1487  000132                     	ds	2
  1488  000134                     logPC@i_930:
  1489                           	opt stack 0
  1490                           
  1491                           ; 2 bytes @ 0x34
  1492  000134                     	ds	2
  1493  000136                     logPC@i_933:
  1494                           	opt stack 0
  1495                           
  1496                           ; 2 bytes @ 0x36
  1497  000136                     	ds	2
  1498  000138                     logPC@i_934:
  1499                           	opt stack 0
  1500                           
  1501                           ; 2 bytes @ 0x38
  1502  000138                     	ds	2
  1503  00013A                     logPC@i_937:
  1504                           	opt stack 0
  1505                           
  1506                           ; 2 bytes @ 0x3A
  1507  00013A                     	ds	2
  1508                           tblptru	equ	0xFF8
  1509                           tblptrh	equ	0xFF7
  1510                           tblptrl	equ	0xFF6
  1511                           tablat	equ	0xFF5
  1512                           postinc0	equ	0xFEE
  1513                           wreg	equ	0xFE8
  1514                           postdec1	equ	0xFE5
  1515                           fsr1l	equ	0xFE1
  1516                           
  1517                           	psect	cstackBANK0
  1518  000080                     __pcstackBANK0:
  1519                           	opt stack 0
  1520  000080                     ??_isdigit:
  1521  000080                     ??_I2C_Master_Wait:
  1522  000080                     ?_next_address:
  1523                           	opt stack 0
  1524  000080                     ?___wmul:
  1525                           	opt stack 0
  1526  000080                     ?___awdiv:
  1527                           	opt stack 0
  1528  000080                     ?___awmod:
  1529                           	opt stack 0
  1530  000080                     ?___lwdiv:
  1531                           	opt stack 0
  1532  000080                     ?___lldiv:
  1533                           	opt stack 0
  1534  000080                     lcdNibble@temp:
  1535                           	opt stack 0
  1536  000080                     readADC@channel:
  1537                           	opt stack 0
  1538  000080                     wait_2ms@x:
  1539                           	opt stack 0
  1540  000080                     Eeprom_ReadByte@address:
  1541                           	opt stack 0
  1542  000080                     Eeprom_WriteByte@address:
  1543                           	opt stack 0
  1544  000080                     next_address@address:
  1545                           	opt stack 0
  1546  000080                     ___wmul@multiplier:
  1547                           	opt stack 0
  1548  000080                     ___awdiv@dividend:
  1549                           	opt stack 0
  1550  000080                     ___awmod@dividend:
  1551                           	opt stack 0
  1552  000080                     ___lwdiv@dividend:
  1553                           	opt stack 0
  1554  000080                     ___lldiv@dividend:
  1555                           	opt stack 0
  1556                           
  1557                           ; 4 bytes @ 0x0
  1558  000080                     	ds	1
  1559  000081                     ??_testBatteries:
  1560  000081                     I2C_Master_Read@a:
  1561                           	opt stack 0
  1562  000081                     lcdNibble@data:
  1563                           	opt stack 0
  1564  000081                     _isdigit$1200:
  1565                           	opt stack 0
  1566  000081                     I2C_Master_Write@d:
  1567                           	opt stack 0
  1568                           
  1569                           ; 2 bytes @ 0x1
  1570  000081                     	ds	1
  1571  000082                     I2C_Master_Read@temp:
  1572                           	opt stack 0
  1573  000082                     lcdInst@data:
  1574                           	opt stack 0
  1575  000082                     putch@data:
  1576                           	opt stack 0
  1577  000082                     Eeprom_WriteByte@data:
  1578                           	opt stack 0
  1579  000082                     isdigit@c:
  1580                           	opt stack 0
  1581  000082                     ___wmul@multiplicand:
  1582                           	opt stack 0
  1583  000082                     ___awdiv@divisor:
  1584                           	opt stack 0
  1585  000082                     ___awmod@divisor:
  1586                           	opt stack 0
  1587  000082                     ___lwdiv@divisor:
  1588                           	opt stack 0
  1589                           
  1590                           ; 2 bytes @ 0x2
  1591  000082                     	ds	1
  1592  000083                     ??_initLCD:
  1593  000083                     testBatteries@volt1:
  1594                           	opt stack 0
  1595                           
  1596                           ; 2 bytes @ 0x3
  1597  000083                     	ds	1
  1598  000084                     ___awdiv@counter:
  1599                           	opt stack 0
  1600  000084                     ___awmod@counter:
  1601                           	opt stack 0
  1602  000084                     ___lwdiv@counter:
  1603                           	opt stack 0
  1604  000084                     ___wmul@product:
  1605                           	opt stack 0
  1606  000084                     ___lldiv@divisor:
  1607                           	opt stack 0
  1608                           
  1609                           ; 4 bytes @ 0x4
  1610  000084                     	ds	1
  1611  000085                     ___awdiv@sign:
  1612                           	opt stack 0
  1613  000085                     ___awmod@sign:
  1614                           	opt stack 0
  1615  000085                     testBatteries@volt3:
  1616                           	opt stack 0
  1617  000085                     ___lwdiv@quotient:
  1618                           	opt stack 0
  1619                           
  1620                           ; 2 bytes @ 0x5
  1621  000085                     	ds	1
  1622  000086                     ___awdiv@quotient:
  1623                           	opt stack 0
  1624                           
  1625                           ; 2 bytes @ 0x6
  1626  000086                     	ds	1
  1627  000087                     ?_getTens:
  1628                           	opt stack 0
  1629  000087                     ?_getHundreds:
  1630                           	opt stack 0
  1631  000087                     ?___lwmod:
  1632                           	opt stack 0
  1633  000087                     testBatteries@volt2:
  1634                           	opt stack 0
  1635  000087                     getHundreds@num:
  1636                           	opt stack 0
  1637  000087                     getTens@num:
  1638                           	opt stack 0
  1639  000087                     ___lwmod@dividend:
  1640                           	opt stack 0
  1641                           
  1642                           ; 2 bytes @ 0x7
  1643  000087                     	ds	1
  1644  000088                     stopOperation@address_code:
  1645                           	opt stack 0
  1646  000088                     ___lldiv@quotient:
  1647                           	opt stack 0
  1648                           
  1649                           ; 4 bytes @ 0x8
  1650  000088                     	ds	1
  1651  000089                     stopOperation@address:
  1652                           	opt stack 0
  1653  000089                     testBatteries@volt4:
  1654                           	opt stack 0
  1655  000089                     ___lwmod@divisor:
  1656                           	opt stack 0
  1657                           
  1658                           ; 2 bytes @ 0x9
  1659  000089                     	ds	2
  1660  00008B                     ___lwmod@counter:
  1661                           	opt stack 0
  1662  00008B                     testBatteries@volt5:
  1663                           	opt stack 0
  1664                           
  1665                           ; 2 bytes @ 0xB
  1666  00008B                     	ds	1
  1667  00008C                     ?_printf:
  1668                           	opt stack 0
  1669  00008C                     ?_getOnes:
  1670                           	opt stack 0
  1671  00008C                     ___lldiv@counter:
  1672                           	opt stack 0
  1673  00008C                     getOnes@num:
  1674                           	opt stack 0
  1675  00008C                     printf@f:
  1676                           	opt stack 0
  1677                           
  1678                           ; 2 bytes @ 0xC
  1679  00008C                     	ds	1
  1680  00008D                     I2C_Master_Init@c:
  1681                           	opt stack 0
  1682                           
  1683                           ; 4 bytes @ 0xD
  1684  00008D                     	ds	1
  1685  00008E                     getChar@num:
  1686                           	opt stack 0
  1687                           
  1688                           ; 2 bytes @ 0xE
  1689  00008E                     	ds	2
  1690  000090                     ??_logPC:
  1691  000090                     
  1692                           ; 1 bytes @ 0x10
  1693  000090                     	ds	1
  1694  000091                     ??_I2C_Master_Init:
  1695                           
  1696                           ; 1 bytes @ 0x11
  1697  000091                     	ds	3
  1698  000094                     ??_printf:
  1699                           
  1700                           ; 1 bytes @ 0x14
  1701  000094                     	ds	4
  1702  000098                     printf@idx:
  1703                           	opt stack 0
  1704                           
  1705                           ; 1 bytes @ 0x18
  1706  000098                     	ds	1
  1707  000099                     printf@ap:
  1708                           	opt stack 0
  1709                           
  1710                           ; 2 bytes @ 0x19
  1711  000099                     	ds	2
  1712  00009B                     printf@prec:
  1713                           	opt stack 0
  1714                           
  1715                           ; 1 bytes @ 0x1B
  1716  00009B                     	ds	1
  1717  00009C                     printf@val:
  1718                           	opt stack 0
  1719                           
  1720                           ; 2 bytes @ 0x1C
  1721  00009C                     	ds	2
  1722  00009E                     printf@flag:
  1723                           	opt stack 0
  1724                           
  1725                           ; 1 bytes @ 0x1E
  1726  00009E                     	ds	1
  1727  00009F                     printf@width:
  1728                           	opt stack 0
  1729                           
  1730                           ; 2 bytes @ 0x1F
  1731  00009F                     	ds	2
  1732  0000A1                     printf@c:
  1733                           	opt stack 0
  1734                           
  1735                           ; 1 bytes @ 0x21
  1736  0000A1                     	ds	1
  1737  0000A2                     show_log@log_address:
  1738                           	opt stack 0
  1739                           
  1740                           ; 2 bytes @ 0x22
  1741  0000A2                     	ds	2
  1742  0000A4                     show_log@currScreen:
  1743                           	opt stack 0
  1744                           
  1745                           ; 1 bytes @ 0x24
  1746  0000A4                     	ds	1
  1747  0000A5                     ??_show_log:
  1748                           
  1749                           ; 1 bytes @ 0x25
  1750  0000A5                     	ds	1
  1751  0000A6                     show_log@total_num:
  1752                           	opt stack 0
  1753                           
  1754                           ; 2 bytes @ 0x26
  1755  0000A6                     	ds	2
  1756  0000A8                     show_log@AA_num:
  1757                           	opt stack 0
  1758                           
  1759                           ; 2 bytes @ 0x28
  1760  0000A8                     	ds	2
  1761  0000AA                     show_log@C_num:
  1762                           	opt stack 0
  1763                           
  1764                           ; 2 bytes @ 0x2A
  1765  0000AA                     	ds	2
  1766  0000AC                     show_log@Nine_num:
  1767                           	opt stack 0
  1768                           
  1769                           ; 2 bytes @ 0x2C
  1770  0000AC                     	ds	2
  1771  0000AE                     show_log@Drain_num:
  1772                           	opt stack 0
  1773                           
  1774                           ; 2 bytes @ 0x2E
  1775  0000AE                     	ds	2
  1776  0000B0                     show_log@elapsed_time:
  1777                           	opt stack 0
  1778                           
  1779                           ; 2 bytes @ 0x30
  1780  0000B0                     	ds	2
  1781  0000B2                     show_log@year:
  1782                           	opt stack 0
  1783                           
  1784                           ; 1 bytes @ 0x32
  1785  0000B2                     	ds	1
  1786  0000B3                     show_log@month:
  1787                           	opt stack 0
  1788                           
  1789                           ; 1 bytes @ 0x33
  1790  0000B3                     	ds	1
  1791  0000B4                     show_log@day:
  1792                           	opt stack 0
  1793                           
  1794                           ; 1 bytes @ 0x34
  1795  0000B4                     	ds	1
  1796  0000B5                     show_log@hour:
  1797                           	opt stack 0
  1798                           
  1799                           ; 1 bytes @ 0x35
  1800  0000B5                     	ds	1
  1801  0000B6                     show_log@minute:
  1802                           	opt stack 0
  1803                           
  1804                           ; 1 bytes @ 0x36
  1805  0000B6                     	ds	1
  1806  0000B7                     show_log@second:
  1807                           	opt stack 0
  1808                           
  1809                           ; 1 bytes @ 0x37
  1810  0000B7                     	ds	1
  1811  0000B8                     show_log@i:
  1812                           	opt stack 0
  1813                           
  1814                           ; 1 bytes @ 0x38
  1815  0000B8                     	ds	1
  1816  0000B9                     show_log@i_905:
  1817                           	opt stack 0
  1818                           
  1819                           ; 1 bytes @ 0x39
  1820  0000B9                     	ds	1
  1821  0000BA                     show_log@i_908:
  1822                           	opt stack 0
  1823                           
  1824                           ; 1 bytes @ 0x3A
  1825  0000BA                     	ds	1
  1826  0000BB                     show_log@address:
  1827                           	opt stack 0
  1828                           
  1829                           ; 2 bytes @ 0x3B
  1830  0000BB                     	ds	2
  1831  0000BD                     ??_main:
  1832                           
  1833                           ; 1 bytes @ 0x3D
  1834  0000BD                     	ds	2
  1835  0000BF                     main@keypress:
  1836                           	opt stack 0
  1837                           
  1838                           ; 1 bytes @ 0x3F
  1839  0000BF                     	ds	1
  1840  0000C0                     main@i:
  1841                           	opt stack 0
  1842                           
  1843                           ; 1 bytes @ 0x40
  1844  0000C0                     	ds	1
  1845  0000C1                     main@i_743:
  1846                           	opt stack 0
  1847                           
  1848                           ; 1 bytes @ 0x41
  1849  0000C1                     	ds	1
  1850  0000C2                     main@i_791:
  1851                           	opt stack 0
  1852                           
  1853                           ; 1 bytes @ 0x42
  1854  0000C2                     	ds	1
  1855  0000C3                     main@i_793:
  1856                           	opt stack 0
  1857                           
  1858                           ; 1 bytes @ 0x43
  1859  0000C3                     	ds	1
  1860  0000C4                     main@i_808:
  1861                           	opt stack 0
  1862                           
  1863                           ; 1 bytes @ 0x44
  1864  0000C4                     	ds	1
  1865  0000C5                     main@steps_765:
  1866                           	opt stack 0
  1867                           
  1868                           ; 1 bytes @ 0x45
  1869  0000C5                     	ds	1
  1870  0000C6                     main@steps_774:
  1871                           	opt stack 0
  1872                           
  1873                           ; 1 bytes @ 0x46
  1874  0000C6                     	ds	1
  1875  0000C7                     main@steps:
  1876                           	opt stack 0
  1877                           
  1878                           ; 1 bytes @ 0x47
  1879  0000C7                     	ds	1
  1880                           tblptru	equ	0xFF8
  1881                           tblptrh	equ	0xFF7
  1882                           tblptrl	equ	0xFF6
  1883                           tablat	equ	0xFF5
  1884                           postinc0	equ	0xFEE
  1885                           wreg	equ	0xFE8
  1886                           postdec1	equ	0xFE5
  1887                           fsr1l	equ	0xFE1
  1888                           
  1889                           	psect	cstackCOMRAM
  1890  000001                     __pcstackCOMRAM:
  1891                           	opt stack 0
  1892  000001                     ??i2_I2C_Master_Wait:
  1893  000001                     ??i2_isdigit:
  1894  000001                     ?i2_next_address:
  1895                           	opt stack 0
  1896  000001                     ?i2___wmul:
  1897                           	opt stack 0
  1898  000001                     ?i2___awdiv:
  1899                           	opt stack 0
  1900  000001                     ?i2___awmod:
  1901                           	opt stack 0
  1902  000001                     ?i2___lwdiv:
  1903                           	opt stack 0
  1904  000001                     i2lcdNibble@temp:
  1905                           	opt stack 0
  1906  000001                     i2Eeprom_ReadByte@address:
  1907                           	opt stack 0
  1908  000001                     i2Eeprom_WriteByte@address:
  1909                           	opt stack 0
  1910  000001                     i2next_address@address:
  1911                           	opt stack 0
  1912  000001                     i2___wmul@multiplier:
  1913                           	opt stack 0
  1914  000001                     i2___awdiv@dividend:
  1915                           	opt stack 0
  1916  000001                     i2___awmod@dividend:
  1917                           	opt stack 0
  1918  000001                     i2___lwdiv@dividend:
  1919                           	opt stack 0
  1920                           
  1921                           ; 2 bytes @ 0x0
  1922  000001                     	ds	1
  1923  000002                     i2I2C_Master_Read@a:
  1924                           	opt stack 0
  1925  000002                     i2lcdNibble@data:
  1926                           	opt stack 0
  1927  000002                     i2_isdigit$1200:
  1928                           	opt stack 0
  1929  000002                     i2I2C_Master_Write@d:
  1930                           	opt stack 0
  1931                           
  1932                           ; 2 bytes @ 0x1
  1933  000002                     	ds	1
  1934  000003                     i2I2C_Master_Read@temp:
  1935                           	opt stack 0
  1936  000003                     i2lcdInst@data:
  1937                           	opt stack 0
  1938  000003                     i2putch@data:
  1939                           	opt stack 0
  1940  000003                     i2Eeprom_WriteByte@data:
  1941                           	opt stack 0
  1942  000003                     i2isdigit@c:
  1943                           	opt stack 0
  1944  000003                     i2___wmul@multiplicand:
  1945                           	opt stack 0
  1946  000003                     i2___awdiv@divisor:
  1947                           	opt stack 0
  1948  000003                     i2___awmod@divisor:
  1949                           	opt stack 0
  1950  000003                     i2___lwdiv@divisor:
  1951                           	opt stack 0
  1952                           
  1953                           ; 2 bytes @ 0x2
  1954  000003                     	ds	1
  1955  000004                     
  1956                           ; 1 bytes @ 0x3
  1957  000004                     	ds	1
  1958  000005                     i2___awdiv@counter:
  1959                           	opt stack 0
  1960  000005                     i2___awmod@counter:
  1961                           	opt stack 0
  1962  000005                     i2___wmul@product:
  1963                           	opt stack 0
  1964  000005                     i2___lwdiv@quotient:
  1965                           	opt stack 0
  1966                           
  1967                           ; 2 bytes @ 0x4
  1968  000005                     	ds	1
  1969  000006                     i2___awdiv@sign:
  1970                           	opt stack 0
  1971  000006                     i2___awmod@sign:
  1972                           	opt stack 0
  1973                           
  1974                           ; 1 bytes @ 0x5
  1975  000006                     	ds	1
  1976  000007                     i2___lwdiv@counter:
  1977                           	opt stack 0
  1978  000007                     i2___awdiv@quotient:
  1979                           	opt stack 0
  1980                           
  1981                           ; 2 bytes @ 0x6
  1982  000007                     	ds	1
  1983  000008                     ?i2___lwmod:
  1984                           	opt stack 0
  1985  000008                     i2___lwmod@dividend:
  1986                           	opt stack 0
  1987                           
  1988                           ; 2 bytes @ 0x7
  1989  000008                     	ds	1
  1990  000009                     i2stopOperation@address_code:
  1991                           	opt stack 0
  1992                           
  1993                           ; 1 bytes @ 0x8
  1994  000009                     	ds	1
  1995  00000A                     i2stopOperation@address:
  1996                           	opt stack 0
  1997  00000A                     i2___lwmod@divisor:
  1998                           	opt stack 0
  1999                           
  2000                           ; 2 bytes @ 0x9
  2001  00000A                     	ds	2
  2002  00000C                     i2___lwmod@counter:
  2003                           	opt stack 0
  2004                           
  2005                           ; 1 bytes @ 0xB
  2006  00000C                     	ds	1
  2007  00000D                     ?i2_printf:
  2008                           	opt stack 0
  2009  00000D                     i2printf@f:
  2010                           	opt stack 0
  2011                           
  2012                           ; 2 bytes @ 0xC
  2013  00000D                     	ds	6
  2014  000013                     ??i2_printf:
  2015                           
  2016                           ; 1 bytes @ 0x12
  2017  000013                     	ds	4
  2018  000017                     i2printf@idx:
  2019                           	opt stack 0
  2020                           
  2021                           ; 1 bytes @ 0x16
  2022  000017                     	ds	1
  2023  000018                     i2printf@ap:
  2024                           	opt stack 0
  2025                           
  2026                           ; 2 bytes @ 0x17
  2027  000018                     	ds	2
  2028  00001A                     i2printf@prec:
  2029                           	opt stack 0
  2030                           
  2031                           ; 1 bytes @ 0x19
  2032  00001A                     	ds	1
  2033  00001B                     i2printf@val:
  2034                           	opt stack 0
  2035                           
  2036                           ; 2 bytes @ 0x1A
  2037  00001B                     	ds	2
  2038  00001D                     i2printf@flag:
  2039                           	opt stack 0
  2040                           
  2041                           ; 1 bytes @ 0x1C
  2042  00001D                     	ds	1
  2043  00001E                     i2printf@width:
  2044                           	opt stack 0
  2045                           
  2046                           ; 2 bytes @ 0x1D
  2047  00001E                     	ds	2
  2048  000020                     i2printf@c:
  2049                           	opt stack 0
  2050                           
  2051                           ; 1 bytes @ 0x1F
  2052  000020                     	ds	1
  2053  000021                     keypressed@right:
  2054                           	opt stack 0
  2055                           
  2056                           ; 1 bytes @ 0x20
  2057  000021                     	ds	1
  2058  000022                     keypressed@key:
  2059                           	opt stack 0
  2060                           
  2061                           ; 1 bytes @ 0x21
  2062  000022                     	ds	1
  2063  000023                     keypressed@left:
  2064                           	opt stack 0
  2065                           
  2066                           ; 1 bytes @ 0x22
  2067  000023                     	ds	1
  2068  000024                     keypressed@i:
  2069                           	opt stack 0
  2070                           
  2071                           ; 1 bytes @ 0x23
  2072  000024                     	ds	1
  2073  000025                     ??_ISR:
  2074                           
  2075                           ; 1 bytes @ 0x24
  2076  000025                     	ds	15
  2077  000034                     ISR@keypress:
  2078                           	opt stack 0
  2079                           
  2080                           ; 1 bytes @ 0x33
  2081  000034                     	ds	1
  2082                           tblptru	equ	0xFF8
  2083                           tblptrh	equ	0xFF7
  2084                           tblptrl	equ	0xFF6
  2085                           tablat	equ	0xFF5
  2086                           postinc0	equ	0xFEE
  2087                           wreg	equ	0xFE8
  2088                           postdec1	equ	0xFE5
  2089                           fsr1l	equ	0xFE1
  2090                           
  2091 ;;
  2092 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2093 ;;
  2094 ;; *************** function _main *****************
  2095 ;; Defined at:
  2096 ;;		line 63 in file "../main.c"
  2097 ;; Parameters:    Size  Location     Type
  2098 ;;		None
  2099 ;; Auto vars:     Size  Location     Type
  2100 ;;  i               1   68[BANK0 ] unsigned char 
  2101 ;;  i               1   67[BANK0 ] unsigned char 
  2102 ;;  i               1   66[BANK0 ] unsigned char 
  2103 ;;  steps           1   70[BANK0 ] unsigned char 
  2104 ;;  steps           1   69[BANK0 ] unsigned char 
  2105 ;;  steps           1   71[BANK0 ] unsigned char 
  2106 ;;  i               1   65[BANK0 ] unsigned char 
  2107 ;;  i               1   64[BANK0 ] unsigned char 
  2108 ;;  keypress        1   63[BANK0 ] unsigned char 
  2109 ;; Return value:  Size  Location     Type
  2110 ;;                  1    wreg      void 
  2111 ;; Registers used:
  2112 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2113 ;; Tracked objects:
  2114 ;;		On entry : 0/0
  2115 ;;		On exit  : 0/0
  2116 ;;		Unchanged: 0/0
  2117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2118 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2119 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2120 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2121 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2122 ;;Total ram usage:       11 bytes
  2123 ;; Hardware stack levels required when called:    9
  2124 ;; This function calls:
  2125 ;;		_I2C_Master_Init
  2126 ;;		_I2C_Master_Read
  2127 ;;		_I2C_Master_Start
  2128 ;;		_I2C_Master_Stop
  2129 ;;		_I2C_Master_Write
  2130 ;;		_initLCD
  2131 ;;		_lcdInst
  2132 ;;		_logPC
  2133 ;;		_printf
  2134 ;;		_readADC
  2135 ;;		_show_log
  2136 ;;		_stopOperation
  2137 ;;		_testBatteries
  2138 ;;		_wait_2ms
  2139 ;; This function is called by:
  2140 ;;		Startup code after reset
  2141 ;; This function uses a non-reentrant model
  2142 ;;
  2143                           
  2144                           	psect	text0
  2145  000012                     __ptext0:
  2146                           	opt stack 0
  2147  000012                     _main:
  2148                           	opt stack 22
  2149                           
  2150                           ;main.c: 65: TRISA = 0b00101111;
  2151                           
  2152                           ;incstack = 0
  2153  000012  0E2F               	movlw	47
  2154  000014  6E92               	movwf	3986,c	;volatile
  2155                           
  2156                           ;main.c: 66: TRISB = 0b11110010;
  2157  000016  0EF2               	movlw	242
  2158  000018  6E93               	movwf	3987,c	;volatile
  2159                           
  2160                           ;main.c: 67: TRISC = 0x00;
  2161  00001A  0E00               	movlw	0
  2162  00001C  6E94               	movwf	3988,c	;volatile
  2163                           
  2164                           ;main.c: 68: TRISD = 0x00;
  2165  00001E  0E00               	movlw	0
  2166  000020  6E95               	movwf	3989,c	;volatile
  2167                           
  2168                           ;main.c: 69: TRISE = 0b00000001;
  2169  000022  0E01               	movlw	1
  2170  000024  6E96               	movwf	3990,c	;volatile
  2171                           
  2172                           ;main.c: 71: LATA = 0x00;
  2173  000026  0E00               	movlw	0
  2174  000028  6E89               	movwf	3977,c	;volatile
  2175                           
  2176                           ;main.c: 72: LATB = 0x00;
  2177  00002A  0E00               	movlw	0
  2178  00002C  6E8A               	movwf	3978,c	;volatile
  2179                           
  2180                           ;main.c: 73: LATC = 0x00;
  2181  00002E  0E00               	movlw	0
  2182  000030  6E8B               	movwf	3979,c	;volatile
  2183                           
  2184                           ;main.c: 74: LATD = 0x00;
  2185  000032  0E00               	movlw	0
  2186  000034  6E8C               	movwf	3980,c	;volatile
  2187                           
  2188                           ;main.c: 75: LATE = 0x00;
  2189  000036  0E00               	movlw	0
  2190  000038  6E8D               	movwf	3981,c	;volatile
  2191                           
  2192                           ;main.c: 77: ADCON0 = 0x00;
  2193  00003A  0E00               	movlw	0
  2194  00003C  6EC2               	movwf	4034,c	;volatile
  2195                           
  2196                           ;main.c: 78: ADCON1 = 0b00001001;
  2197  00003E  0E09               	movlw	9
  2198  000040  6EC1               	movwf	4033,c	;volatile
  2199                           
  2200                           ;main.c: 79: ADCON2 = 0b10110001;
  2201  000042  0EB1               	movlw	177
  2202  000044  6EC0               	movwf	4032,c	;volatile
  2203                           
  2204                           ;main.c: 83: CVRCON = 0x00;
  2205  000046  0E00               	movlw	0
  2206  000048  6EB5               	movwf	4021,c	;volatile
  2207                           
  2208                           ;main.c: 84: CMCONbits.CIS = 0;
  2209  00004A  96B4               	bcf	4020,3,c	;volatile
  2210                           
  2211                           ;main.c: 86: GIE = 1;
  2212  00004C  8EF2               	bsf	intcon,7,c	;volatile
  2213                           
  2214                           ;main.c: 87: PEIE = 1;
  2215  00004E  8CF2               	bsf	intcon,6,c	;volatile
  2216                           
  2217                           ;main.c: 88: INT1IE = 1;
  2218  000050  86F0               	bsf	intcon3,3,c	;volatile
  2219                           
  2220                           ;main.c: 89: INT1IF = 0;
  2221  000052  90F0               	bcf	intcon3,0,c	;volatile
  2222                           
  2223                           ;main.c: 90: TMR0IE = 1;
  2224  000054  8AF2               	bsf	intcon,5,c	;volatile
  2225                           
  2226                           ;main.c: 91: TMR0IF = 0;
  2227  000056  94F2               	bcf	intcon,2,c	;volatile
  2228                           
  2229                           ;main.c: 92: TMR1IE = 1;
  2230  000058  809D               	bsf	3997,0,c	;volatile
  2231                           
  2232                           ;main.c: 93: TMR1IF = 0;
  2233  00005A  909E               	bcf	3998,0,c	;volatile
  2234                           
  2235                           ;main.c: 94: TMR2IE = 1;
  2236  00005C  829D               	bsf	3997,1,c	;volatile
  2237                           
  2238                           ;main.c: 95: TMR2IF = 0;
  2239  00005E  929E               	bcf	3998,1,c	;volatile
  2240                           
  2241                           ;main.c: 99: T0CON = 0b00000111;
  2242  000060  0E07               	movlw	7
  2243  000062  6ED5               	movwf	4053,c	;volatile
  2244                           
  2245                           ;main.c: 107: TMR0 = 55770;
  2246  000064  0ED9               	movlw	217
  2247  000066  6ED7               	movwf	4055,c	;volatile
  2248  000068  0EDA               	movlw	218
  2249  00006A  6ED6               	movwf	4054,c	;volatile
  2250                           
  2251                           ;main.c: 116: T1CON = 0b10000000;
  2252  00006C  0E80               	movlw	128
  2253  00006E  6ECD               	movwf	4045,c	;volatile
  2254                           
  2255                           ;main.c: 125: TMR1 = 60535;
  2256  000070  0EEC               	movlw	236
  2257  000072  6ECF               	movwf	4047,c	;volatile
  2258  000074  0E77               	movlw	119
  2259  000076  6ECE               	movwf	4046,c	;volatile
  2260                           
  2261                           ;main.c: 131: T2CON = 0b00000010;
  2262  000078  0E02               	movlw	2
  2263  00007A  6ECA               	movwf	4042,c	;volatile
  2264                           
  2265                           ;main.c: 140: TMR2 = 155;
  2266  00007C  0E9B               	movlw	155
  2267  00007E  6ECC               	movwf	4044,c	;volatile
  2268                           
  2269                           ;main.c: 150: initLCD();
  2270  000080  EC4A  F01A         	call	_initLCD	;wreg free
  2271                           
  2272                           ;main.c: 151: nRBPU = 0;
  2273  000084  9EF1               	bcf	intcon2,7,c	;volatile
  2274                           
  2275                           ;main.c: 152: I2C_Master_Init(10000);
  2276  000086  0E10               	movlw	16
  2277  000088  0100               	movlb	0	; () banked
  2278  00008A  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  2279  00008C  0E27               	movlw	39
  2280  00008E  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  2281  000090  0E00               	movlw	0
  2282  000092  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  2283  000094  0E00               	movlw	0
  2284  000096  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  2285  000098  ECCA  F019         	call	_I2C_Master_Init	;wreg free
  2286                           
  2287                           ;main.c: 153: (INTCONbits.GIE = 1);
  2288  00009C  8EF2               	bsf	intcon,7,c	;volatile
  2289                           
  2290                           ;main.c: 156: while (screenMode == 2){
  2291                           
  2292                           ;main.c: 155: while (1) {
  2293  00009E  D056               	goto	l7129
  2294  0000A0                     l7091:
  2295                           
  2296                           ;main.c: 157: lcdInst(0b10000000);;
  2297  0000A0  0E80               	movlw	128
  2298  0000A2  ECDF  F01B         	call	_lcdInst
  2299                           
  2300                           ;main.c: 158: printf("PRESS * TO START");
  2301  0000A6  0EED               	movlw	low STR_1
  2302  0000A8  0100               	movlb	0	; () banked
  2303  0000AA  6F8C               	movwf	printf@f& (0+255),b
  2304  0000AC  0EFF               	movlw	high STR_1
  2305  0000AE  0100               	movlb	0	; () banked
  2306  0000B0  6F8D               	movwf	(printf@f+1)& (0+255),b
  2307  0000B2  EC59  F00C         	call	_printf	;wreg free
  2308                           
  2309                           ;main.c: 159: lcdInst(0b11000000);;
  2310  0000B6  0EC0               	movlw	192
  2311  0000B8  ECDF  F01B         	call	_lcdInst
  2312                           
  2313                           ;main.c: 160: printf("< TOGGLE  LOGS >");
  2314  0000BC  0EDC               	movlw	low STR_2
  2315  0000BE  0100               	movlb	0	; () banked
  2316  0000C0  6F8C               	movwf	printf@f& (0+255),b
  2317  0000C2  0EFF               	movlw	high STR_2
  2318  0000C4  0100               	movlb	0	; () banked
  2319  0000C6  6F8D               	movwf	(printf@f+1)& (0+255),b
  2320  0000C8  EC59  F00C         	call	_printf	;wreg free
  2321                           
  2322                           ;main.c: 161: for(unsigned char i=0;i<50;i++){
  2323  0000CC  0E00               	movlw	0
  2324  0000CE  0100               	movlb	0	; () banked
  2325  0000D0  6FC0               	movwf	main@i& (0+255),b
  2326  0000D2                     l7099:
  2327                           
  2328                           ; BSR set to: 0
  2329  0000D2  0E31               	movlw	49
  2330  0000D4  0100               	movlb	0	; () banked
  2331  0000D6  65C0               	cpfsgt	main@i& (0+255),b
  2332  0000D8  D001               	goto	l7103
  2333  0000DA  D011               	goto	l7111
  2334  0000DC                     l7103:
  2335                           
  2336                           ; BSR set to: 0
  2337                           ;main.c: 162: if (screenMode != 2)
  2338  0000DC  0E02               	movlw	2
  2339  0000DE  0100               	movlb	0	; () banked
  2340  0000E0  19FA               	xorwf	_screenMode& (0+255),w,b
  2341  0000E2  A4D8               	btfss	status,2,c
  2342  0000E4  D00C               	goto	l7111
  2343                           
  2344                           ; BSR set to: 0
  2345                           ;main.c: 164: _delay((unsigned long)((10)*(10000000/4000.0)));
  2346                           
  2347                           ; BSR set to: 0
  2348                           
  2349                           ; BSR set to: 0
  2350                           ;main.c: 163: break;
  2351  0000E6  0E21               	movlw	33
  2352  0000E8  0100               	movlb	0	; () banked
  2353  0000EA  6FBD               	movwf	??_main& (0+255),b
  2354  0000EC  0E76               	movlw	118
  2355  0000EE                     u7687:
  2356  0000EE  2EE8               	decfsz	wreg,f,c
  2357  0000F0  D7FE               	bra	u7687
  2358  0000F2  2FBD               	decfsz	??_main& (0+255),f,b
  2359  0000F4  D7FC               	bra	u7687
  2360  0000F6  F000               	nop	
  2361  0000F8  0100               	movlb	0	; () banked
  2362  0000FA  2BC0               	incf	main@i& (0+255),f,b
  2363  0000FC  D7EA               	goto	l7099
  2364  0000FE                     l7111:
  2365                           
  2366                           ; BSR set to: 0
  2367                           ;main.c: 165: }
  2368                           ;main.c: 166: lcdInst(0b10000000);;
  2369  0000FE  0E80               	movlw	128
  2370  000100  ECDF  F01B         	call	_lcdInst
  2371                           
  2372                           ;main.c: 167: lcdInst(0b11000000);;
  2373  000104  0EC0               	movlw	192
  2374  000106  ECDF  F01B         	call	_lcdInst
  2375                           
  2376                           ;main.c: 168: printf(" <TOGGLE  LOGS> ");
  2377  00010A  0E65               	movlw	low STR_3
  2378  00010C  0100               	movlb	0	; () banked
  2379  00010E  6F8C               	movwf	printf@f& (0+255),b
  2380  000110  0EFF               	movlw	high STR_3
  2381  000112  0100               	movlb	0	; () banked
  2382  000114  6F8D               	movwf	(printf@f+1)& (0+255),b
  2383  000116  EC59  F00C         	call	_printf	;wreg free
  2384                           
  2385                           ;main.c: 169: for(unsigned char i=0;i<50;i++){
  2386  00011A  0E00               	movlw	0
  2387  00011C  0100               	movlb	0	; () banked
  2388  00011E  6FC1               	movwf	main@i_743& (0+255),b
  2389  000120                     l7117:
  2390                           
  2391                           ; BSR set to: 0
  2392  000120  0E31               	movlw	49
  2393  000122  0100               	movlb	0	; () banked
  2394  000124  65C1               	cpfsgt	main@i_743& (0+255),b
  2395  000126  D001               	goto	l7121
  2396  000128  D011               	goto	l7129
  2397  00012A                     l7121:
  2398                           
  2399                           ; BSR set to: 0
  2400                           ;main.c: 170: if (screenMode != 2)
  2401  00012A  0E02               	movlw	2
  2402  00012C  0100               	movlb	0	; () banked
  2403  00012E  19FA               	xorwf	_screenMode& (0+255),w,b
  2404  000130  A4D8               	btfss	status,2,c
  2405  000132  D00C               	goto	l7129
  2406                           
  2407                           ; BSR set to: 0
  2408                           ;main.c: 172: _delay((unsigned long)((10)*(10000000/4000.0)));
  2409                           
  2410                           ; BSR set to: 0
  2411                           
  2412                           ; BSR set to: 0
  2413                           ;main.c: 171: break;
  2414  000134  0E21               	movlw	33
  2415  000136  0100               	movlb	0	; () banked
  2416  000138  6FBD               	movwf	??_main& (0+255),b
  2417  00013A  0E76               	movlw	118
  2418  00013C                     u7697:
  2419  00013C  2EE8               	decfsz	wreg,f,c
  2420  00013E  D7FE               	bra	u7697
  2421  000140  2FBD               	decfsz	??_main& (0+255),f,b
  2422  000142  D7FC               	bra	u7697
  2423  000144  F000               	nop	
  2424  000146  0100               	movlb	0	; () banked
  2425  000148  2BC1               	incf	main@i_743& (0+255),f,b
  2426  00014A  D7EA               	goto	l7117
  2427  00014C                     l7129:
  2428  00014C  0E02               	movlw	2
  2429  00014E  0100               	movlb	0	; () banked
  2430  000150  19FA               	xorwf	_screenMode& (0+255),w,b
  2431  000152  A4D8               	btfss	status,2,c
  2432  000154  D371               	goto	l7465
  2433  000156  D7A4               	goto	l7091
  2434  000158                     l7131:
  2435                           
  2436                           ; BSR set to: 0
  2437                           ;main.c: 180: lcdInst(0b10000000);;
  2438  000158  0E80               	movlw	128
  2439  00015A  ECDF  F01B         	call	_lcdInst
  2440                           
  2441                           ;main.c: 181: lcdInst(0b11000000);;
  2442  00015E  0EC0               	movlw	192
  2443  000160  ECDF  F01B         	call	_lcdInst
  2444                           
  2445                           ;main.c: 182: printf("PRESS # TO STOP ");
  2446  000164  0E87               	movlw	low STR_4
  2447  000166  0100               	movlb	0	; () banked
  2448  000168  6F8C               	movwf	printf@f& (0+255),b
  2449  00016A  0EFF               	movlw	high STR_4
  2450  00016C  0100               	movlb	0	; () banked
  2451  00016E  6F8D               	movwf	(printf@f+1)& (0+255),b
  2452  000170  EC59  F00C         	call	_printf	;wreg free
  2453                           
  2454                           ;main.c: 187: if (startGear){
  2455  000174  0100               	movlb	0	; () banked
  2456  000176  51EC               	movf	_startGear& (0+255),w,b
  2457  000178  B4D8               	btfsc	status,2,c
  2458  00017A  D0E9               	goto	l7231
  2459                           
  2460                           ; BSR set to: 0
  2461                           ;main.c: 188: wait_2ms(2000);
  2462  00017C  0E07               	movlw	7
  2463  00017E  0100               	movlb	0	; () banked
  2464  000180  6F81               	movwf	(wait_2ms@x+1)& (0+255),b
  2465  000182  0ED0               	movlw	208
  2466  000184  6F80               	movwf	wait_2ms@x& (0+255),b
  2467  000186  EC7F  F01B         	call	_wait_2ms	;wreg free
  2468                           
  2469                           ;main.c: 189: startGear = 0;
  2470  00018A  0E00               	movlw	0
  2471  00018C  0100               	movlb	0	; () banked
  2472  00018E  6FEC               	movwf	_startGear& (0+255),b
  2473                           
  2474                           ; BSR set to: 0
  2475                           ;main.c: 190: LATDbits.LD0= 0;;
  2476  000190  908C               	bcf	3980,0,c	;volatile
  2477                           
  2478                           ; BSR set to: 0
  2479                           ;main.c: 191: doneTimer = 0;
  2480  000192  0E00               	movlw	0
  2481  000194  0100               	movlb	0	; () banked
  2482  000196  6FE3               	movwf	_doneTimer& (0+255),b
  2483                           
  2484                           ; BSR set to: 0
  2485                           ;main.c: 193: unsigned char steps = 0;
  2486  000198  0E00               	movlw	0
  2487  00019A  0100               	movlb	0	; () banked
  2488  00019C  6FC7               	movwf	main@steps& (0+255),b
  2489                           
  2490                           ;main.c: 194: while(steps<20 && screenMode==1){
  2491  00019E  D016               	goto	l7157
  2492  0001A0                     l7147:
  2493                           
  2494                           ; BSR set to: 0
  2495                           ;main.c: 195: steps++;
  2496  0001A0  0100               	movlb	0	; () banked
  2497  0001A2  2BC7               	incf	main@steps& (0+255),f,b
  2498                           
  2499                           ; BSR set to: 0
  2500                           ;main.c: 196: LATDbits.LD1 = 1;;
  2501  0001A4  828C               	bsf	3980,1,c	;volatile
  2502                           
  2503                           ; BSR set to: 0
  2504                           ;main.c: 197: _delay((unsigned long)((5)*(10000000/4000.0)));
  2505  0001A6  0E11               	movlw	17
  2506  0001A8  0100               	movlb	0	; () banked
  2507  0001AA  6FBD               	movwf	??_main& (0+255),b
  2508  0001AC  0E3A               	movlw	58
  2509  0001AE                     u7707:
  2510  0001AE  2EE8               	decfsz	wreg,f,c
  2511  0001B0  D7FE               	bra	u7707
  2512  0001B2  2FBD               	decfsz	??_main& (0+255),f,b
  2513  0001B4  D7FC               	bra	u7707
  2514  0001B6  F000               	nop	
  2515                           
  2516                           ;main.c: 198: LATDbits.LD1 = 0;;
  2517  0001B8  928C               	bcf	3980,1,c	;volatile
  2518                           
  2519                           ;main.c: 199: _delay((unsigned long)((5)*(10000000/4000.0)));
  2520  0001BA  0E11               	movlw	17
  2521  0001BC  0100               	movlb	0	; () banked
  2522  0001BE  6FBD               	movwf	??_main& (0+255),b
  2523  0001C0  0E3A               	movlw	58
  2524  0001C2                     u7717:
  2525  0001C2  2EE8               	decfsz	wreg,f,c
  2526  0001C4  D7FE               	bra	u7717
  2527  0001C6  2FBD               	decfsz	??_main& (0+255),f,b
  2528  0001C8  D7FC               	bra	u7717
  2529  0001CA  F000               	nop	
  2530  0001CC                     l7157:
  2531  0001CC  0E14               	movlw	20
  2532  0001CE  0100               	movlb	0	; () banked
  2533  0001D0  61C7               	cpfslt	main@steps& (0+255),b
  2534  0001D2  D004               	goto	l7161
  2535                           
  2536                           ; BSR set to: 0
  2537  0001D4  0100               	movlb	0	; () banked
  2538  0001D6  05FA               	decf	_screenMode& (0+255),w,b
  2539  0001D8  B4D8               	btfsc	status,2,c
  2540  0001DA  D7E2               	goto	l7147
  2541  0001DC                     l7161:
  2542                           
  2543                           ; BSR set to: 0
  2544                           ;main.c: 200: }
  2545                           ;main.c: 201: steps = 0;
  2546  0001DC  0E00               	movlw	0
  2547  0001DE  0100               	movlb	0	; () banked
  2548  0001E0  6FC7               	movwf	main@steps& (0+255),b
  2549                           
  2550                           ;main.c: 202: while(steps < 178 && screenMode==1){
  2551  0001E2  D014               	goto	l7173
  2552  0001E4                     l7163:
  2553                           
  2554                           ; BSR set to: 0
  2555                           ;main.c: 203: steps++;
  2556  0001E4  0100               	movlb	0	; () banked
  2557  0001E6  2BC7               	incf	main@steps& (0+255),f,b
  2558                           
  2559                           ; BSR set to: 0
  2560                           ;main.c: 204: LATDbits.LD1 = 1;;
  2561  0001E8  828C               	bsf	3980,1,c	;volatile
  2562                           
  2563                           ; BSR set to: 0
  2564                           ;main.c: 205: _delay((unsigned long)((2)*(10000000/4000.0)));
  2565  0001EA  0E07               	movlw	7
  2566  0001EC  0100               	movlb	0	; () banked
  2567  0001EE  6FBD               	movwf	??_main& (0+255),b
  2568  0001F0  0E7D               	movlw	125
  2569  0001F2                     u7727:
  2570  0001F2  2EE8               	decfsz	wreg,f,c
  2571  0001F4  D7FE               	bra	u7727
  2572  0001F6  2FBD               	decfsz	??_main& (0+255),f,b
  2573  0001F8  D7FC               	bra	u7727
  2574                           
  2575                           ;main.c: 206: LATDbits.LD1 = 0;;
  2576  0001FA  928C               	bcf	3980,1,c	;volatile
  2577                           
  2578                           ;main.c: 207: _delay((unsigned long)((2)*(10000000/4000.0)));
  2579  0001FC  0E07               	movlw	7
  2580  0001FE  0100               	movlb	0	; () banked
  2581  000200  6FBD               	movwf	??_main& (0+255),b
  2582  000202  0E7D               	movlw	125
  2583  000204                     u7737:
  2584  000204  2EE8               	decfsz	wreg,f,c
  2585  000206  D7FE               	bra	u7737
  2586  000208  2FBD               	decfsz	??_main& (0+255),f,b
  2587  00020A  D7FC               	bra	u7737
  2588  00020C                     l7173:
  2589  00020C  0EB2               	movlw	178
  2590  00020E  0100               	movlb	0	; () banked
  2591  000210  61C7               	cpfslt	main@steps& (0+255),b
  2592  000212  D004               	goto	l7177
  2593                           
  2594                           ; BSR set to: 0
  2595  000214  0100               	movlb	0	; () banked
  2596  000216  05FA               	decf	_screenMode& (0+255),w,b
  2597  000218  B4D8               	btfsc	status,2,c
  2598  00021A  D7E4               	goto	l7163
  2599  00021C                     l7177:
  2600                           
  2601                           ; BSR set to: 0
  2602                           ;main.c: 208: }
  2603                           ;main.c: 209: steps = 0;
  2604  00021C  0E00               	movlw	0
  2605  00021E  0100               	movlb	0	; () banked
  2606  000220  6FC7               	movwf	main@steps& (0+255),b
  2607                           
  2608                           ;main.c: 210: while(steps <5 && screenMode==1){
  2609  000222  D016               	goto	l7189
  2610  000224                     l7179:
  2611                           
  2612                           ; BSR set to: 0
  2613                           ;main.c: 211: steps++;
  2614  000224  0100               	movlb	0	; () banked
  2615  000226  2BC7               	incf	main@steps& (0+255),f,b
  2616                           
  2617                           ; BSR set to: 0
  2618                           ;main.c: 212: LATDbits.LD1 = 1;;
  2619  000228  828C               	bsf	3980,1,c	;volatile
  2620                           
  2621                           ; BSR set to: 0
  2622                           ;main.c: 213: _delay((unsigned long)((5)*(10000000/4000.0)));
  2623  00022A  0E11               	movlw	17
  2624  00022C  0100               	movlb	0	; () banked
  2625  00022E  6FBD               	movwf	??_main& (0+255),b
  2626  000230  0E3A               	movlw	58
  2627  000232                     u7747:
  2628  000232  2EE8               	decfsz	wreg,f,c
  2629  000234  D7FE               	bra	u7747
  2630  000236  2FBD               	decfsz	??_main& (0+255),f,b
  2631  000238  D7FC               	bra	u7747
  2632  00023A  F000               	nop	
  2633                           
  2634                           ;main.c: 214: LATDbits.LD1 = 0;;
  2635  00023C  928C               	bcf	3980,1,c	;volatile
  2636                           
  2637                           ;main.c: 215: _delay((unsigned long)((5)*(10000000/4000.0)));
  2638  00023E  0E11               	movlw	17
  2639  000240  0100               	movlb	0	; () banked
  2640  000242  6FBD               	movwf	??_main& (0+255),b
  2641  000244  0E3A               	movlw	58
  2642  000246                     u7757:
  2643  000246  2EE8               	decfsz	wreg,f,c
  2644  000248  D7FE               	bra	u7757
  2645  00024A  2FBD               	decfsz	??_main& (0+255),f,b
  2646  00024C  D7FC               	bra	u7757
  2647  00024E  F000               	nop	
  2648  000250                     l7189:
  2649  000250  0E05               	movlw	5
  2650  000252  0100               	movlb	0	; () banked
  2651  000254  61C7               	cpfslt	main@steps& (0+255),b
  2652  000256  D004               	goto	l7193
  2653                           
  2654                           ; BSR set to: 0
  2655  000258  0100               	movlb	0	; () banked
  2656  00025A  05FA               	decf	_screenMode& (0+255),w,b
  2657  00025C  B4D8               	btfsc	status,2,c
  2658  00025E  D7E2               	goto	l7179
  2659  000260                     l7193:
  2660                           
  2661                           ; BSR set to: 0
  2662                           ;main.c: 216: }
  2663                           ;main.c: 217: steps = 0;
  2664  000260  0E00               	movlw	0
  2665  000262  0100               	movlb	0	; () banked
  2666  000264  6FC7               	movwf	main@steps& (0+255),b
  2667                           
  2668                           ; BSR set to: 0
  2669                           ;main.c: 218: LATDbits.LD0= 1;;
  2670  000266  808C               	bsf	3980,0,c	;volatile
  2671                           
  2672                           ;main.c: 219: while(steps <3 && screenMode==1){
  2673  000268  D016               	goto	l7207
  2674  00026A                     l7197:
  2675                           
  2676                           ; BSR set to: 0
  2677                           ;main.c: 220: steps++;
  2678  00026A  0100               	movlb	0	; () banked
  2679  00026C  2BC7               	incf	main@steps& (0+255),f,b
  2680                           
  2681                           ; BSR set to: 0
  2682                           ;main.c: 221: LATDbits.LD1 = 1;;
  2683  00026E  828C               	bsf	3980,1,c	;volatile
  2684                           
  2685                           ; BSR set to: 0
  2686                           ;main.c: 222: _delay((unsigned long)((5)*(10000000/4000.0)));
  2687  000270  0E11               	movlw	17
  2688  000272  0100               	movlb	0	; () banked
  2689  000274  6FBD               	movwf	??_main& (0+255),b
  2690  000276  0E3A               	movlw	58
  2691  000278                     u7767:
  2692  000278  2EE8               	decfsz	wreg,f,c
  2693  00027A  D7FE               	bra	u7767
  2694  00027C  2FBD               	decfsz	??_main& (0+255),f,b
  2695  00027E  D7FC               	bra	u7767
  2696  000280  F000               	nop	
  2697                           
  2698                           ;main.c: 223: LATDbits.LD1 = 0;;
  2699  000282  928C               	bcf	3980,1,c	;volatile
  2700                           
  2701                           ;main.c: 224: _delay((unsigned long)((5)*(10000000/4000.0)));
  2702  000284  0E11               	movlw	17
  2703  000286  0100               	movlb	0	; () banked
  2704  000288  6FBD               	movwf	??_main& (0+255),b
  2705  00028A  0E3A               	movlw	58
  2706  00028C                     u7777:
  2707  00028C  2EE8               	decfsz	wreg,f,c
  2708  00028E  D7FE               	bra	u7777
  2709  000290  2FBD               	decfsz	??_main& (0+255),f,b
  2710  000292  D7FC               	bra	u7777
  2711  000294  F000               	nop	
  2712  000296                     l7207:
  2713  000296  0E03               	movlw	3
  2714  000298  0100               	movlb	0	; () banked
  2715  00029A  61C7               	cpfslt	main@steps& (0+255),b
  2716  00029C  D004               	goto	l324
  2717                           
  2718                           ; BSR set to: 0
  2719  00029E  0100               	movlb	0	; () banked
  2720  0002A0  05FA               	decf	_screenMode& (0+255),w,b
  2721  0002A2  B4D8               	btfsc	status,2,c
  2722  0002A4  D7E2               	goto	l7197
  2723  0002A6                     l324:
  2724                           
  2725                           ; BSR set to: 0
  2726                           ;main.c: 225: }
  2727                           ;main.c: 226: LATDbits.LD0= 0;;
  2728  0002A6  908C               	bcf	3980,0,c	;volatile
  2729                           
  2730                           ; BSR set to: 0
  2731                           ;main.c: 227: steps = 0;
  2732  0002A8  0E00               	movlw	0
  2733  0002AA  0100               	movlb	0	; () banked
  2734  0002AC  6FC7               	movwf	main@steps& (0+255),b
  2735                           
  2736                           ; BSR set to: 0
  2737                           ;main.c: 228: wait_2ms(150);
  2738  0002AE  0E00               	movlw	0
  2739  0002B0  0100               	movlb	0	; () banked
  2740  0002B2  6F81               	movwf	(wait_2ms@x+1)& (0+255),b
  2741  0002B4  0E96               	movlw	150
  2742  0002B6  6F80               	movwf	wait_2ms@x& (0+255),b
  2743  0002B8  EC7F  F01B         	call	_wait_2ms	;wreg free
  2744                           
  2745                           ;main.c: 230: LATCbits.LC7 = 1;;
  2746  0002BC  8E8B               	bsf	3979,7,c	;volatile
  2747                           
  2748                           ;main.c: 231: wait_2ms(100);
  2749  0002BE  0E00               	movlw	0
  2750  0002C0  0100               	movlb	0	; () banked
  2751  0002C2  6F81               	movwf	(wait_2ms@x+1)& (0+255),b
  2752  0002C4  0E64               	movlw	100
  2753  0002C6  6F80               	movwf	wait_2ms@x& (0+255),b
  2754  0002C8  EC7F  F01B         	call	_wait_2ms	;wreg free
  2755                           
  2756                           ;main.c: 232: LATCbits.LC7 = 0;;
  2757  0002CC  9E8B               	bcf	3979,7,c	;volatile
  2758                           
  2759                           ;main.c: 233: plat1Right = 120;
  2760  0002CE  0E00               	movlw	0
  2761  0002D0  0100               	movlb	0	; () banked
  2762  0002D2  6FD2               	movwf	(_plat1Right+1)& (0+255),b
  2763  0002D4  0E78               	movlw	120
  2764  0002D6  6FD1               	movwf	_plat1Right& (0+255),b
  2765                           
  2766                           ;main.c: 234: plat2Left = 120;
  2767  0002D8  0E00               	movlw	0
  2768  0002DA  0100               	movlb	0	; () banked
  2769  0002DC  6FD4               	movwf	(_plat2Left+1)& (0+255),b
  2770  0002DE  0E78               	movlw	120
  2771  0002E0  6FD3               	movwf	_plat2Left& (0+255),b
  2772  0002E2                     l7221:
  2773                           
  2774                           ; BSR set to: 0
  2775  0002E2  0100               	movlb	0	; () banked
  2776  0002E4  05FA               	decf	_screenMode& (0+255),w,b
  2777  0002E6  A4D8               	btfss	status,2,c
  2778  0002E8  D012               	goto	l7225
  2779                           
  2780                           ; BSR set to: 0
  2781  0002EA  0100               	movlb	0	; () banked
  2782  0002EC  51D3               	movf	_plat2Left& (0+255),w,b
  2783  0002EE  0100               	movlb	0	; () banked
  2784  0002F0  11D1               	iorwf	_plat1Right& (0+255),w,b
  2785  0002F2  0100               	movlb	0	; () banked
  2786  0002F4  6FBD               	movwf	??_main& (0+255),b
  2787  0002F6  0100               	movlb	0	; () banked
  2788  0002F8  51D4               	movf	(_plat2Left+1)& (0+255),w,b
  2789  0002FA  0100               	movlb	0	; () banked
  2790  0002FC  11D2               	iorwf	(_plat1Right+1)& (0+255),w,b
  2791  0002FE  0100               	movlb	0	; () banked
  2792  000300  6FBE               	movwf	(??_main+1)& (0+255),b
  2793  000302  0100               	movlb	0	; () banked
  2794  000304  51BD               	movf	??_main& (0+255),w,b
  2795  000306  0100               	movlb	0	; () banked
  2796  000308  11BE               	iorwf	(??_main+1)& (0+255),w,b
  2797  00030A  A4D8               	btfss	status,2,c
  2798  00030C  D7EA               	goto	l7221
  2799  00030E                     l7225:
  2800                           
  2801                           ; BSR set to: 0
  2802                           ;main.c: 236: plat1Left = 120;
  2803  00030E  0E00               	movlw	0
  2804  000310  0100               	movlb	0	; () banked
  2805  000312  6FD0               	movwf	(_plat1Left+1)& (0+255),b
  2806  000314  0E78               	movlw	120
  2807  000316  6FCF               	movwf	_plat1Left& (0+255),b
  2808                           
  2809                           ;main.c: 237: plat2Right = 120;
  2810  000318  0E00               	movlw	0
  2811  00031A  0100               	movlb	0	; () banked
  2812  00031C  6FD6               	movwf	(_plat2Right+1)& (0+255),b
  2813  00031E  0E78               	movlw	120
  2814  000320  6FD5               	movwf	_plat2Right& (0+255),b
  2815  000322                     l7227:
  2816                           
  2817                           ; BSR set to: 0
  2818  000322  0100               	movlb	0	; () banked
  2819  000324  05FA               	decf	_screenMode& (0+255),w,b
  2820  000326  A4D8               	btfss	status,2,c
  2821  000328  D012               	goto	l7231
  2822                           
  2823                           ; BSR set to: 0
  2824  00032A  0100               	movlb	0	; () banked
  2825  00032C  51D5               	movf	_plat2Right& (0+255),w,b
  2826  00032E  0100               	movlb	0	; () banked
  2827  000330  11CF               	iorwf	_plat1Left& (0+255),w,b
  2828  000332  0100               	movlb	0	; () banked
  2829  000334  6FBD               	movwf	??_main& (0+255),b
  2830  000336  0100               	movlb	0	; () banked
  2831  000338  51D6               	movf	(_plat2Right+1)& (0+255),w,b
  2832  00033A  0100               	movlb	0	; () banked
  2833  00033C  11D0               	iorwf	(_plat1Left+1)& (0+255),w,b
  2834  00033E  0100               	movlb	0	; () banked
  2835  000340  6FBE               	movwf	(??_main+1)& (0+255),b
  2836  000342  0100               	movlb	0	; () banked
  2837  000344  51BD               	movf	??_main& (0+255),w,b
  2838  000346  0100               	movlb	0	; () banked
  2839  000348  11BE               	iorwf	(??_main+1)& (0+255),w,b
  2840  00034A  A4D8               	btfss	status,2,c
  2841  00034C  D7EA               	goto	l7227
  2842  00034E                     l7231:
  2843                           
  2844                           ; BSR set to: 0
  2845                           ;main.c: 239: }
  2846                           ;main.c: 241: readADC(0);
  2847  00034E  0E00               	movlw	0
  2848  000350  EC8C  F01B         	call	_readADC
  2849                           
  2850                           ;main.c: 246: if (ADRES < 22 | ADRES > 55){
  2851  000354  50C4               	movf	4036,w,c	;volatile
  2852  000356  E104               	bnz	u7111
  2853  000358  0E38               	movlw	56
  2854  00035A  5CC3               	subwf	4035,w,c	;volatile
  2855  00035C  A0D8               	btfss	status,0,c
  2856  00035E  D002               	goto	u7110
  2857  000360                     u7111:
  2858  000360  0E01               	movlw	1
  2859  000362  D001               	goto	u7112
  2860  000364                     u7110:
  2861  000364  0E00               	movlw	0
  2862  000366                     u7112:
  2863  000366  0100               	movlb	0	; () banked
  2864  000368  6FBD               	movwf	??_main& (0+255),b
  2865  00036A  50C4               	movf	4036,w,c	;volatile
  2866  00036C  E106               	bnz	u7120
  2867  00036E  0E16               	movlw	22
  2868  000370  5CC3               	subwf	4035,w,c	;volatile
  2869  000372  B0D8               	btfsc	status,0,c
  2870  000374  D002               	goto	u7120
  2871  000376  0E01               	movlw	1
  2872  000378  D001               	goto	u7122
  2873  00037A                     u7120:
  2874  00037A  0E00               	movlw	0
  2875  00037C                     u7122:
  2876  00037C  0100               	movlb	0	; () banked
  2877  00037E  11BD               	iorwf	??_main& (0+255),w,b
  2878  000380  A0E8               	btfss	wreg,0,c
  2879  000382  D1E8               	goto	l7411
  2880                           
  2881                           ; BSR set to: 0
  2882                           ;main.c: 247: wait_2ms(250);
  2883  000384  0E00               	movlw	0
  2884  000386  0100               	movlb	0	; () banked
  2885  000388  6F81               	movwf	(wait_2ms@x+1)& (0+255),b
  2886  00038A  0EFA               	movlw	250
  2887  00038C  6F80               	movwf	wait_2ms@x& (0+255),b
  2888  00038E  EC7F  F01B         	call	_wait_2ms	;wreg free
  2889                           
  2890                           ;main.c: 248: sorting = 1;
  2891  000392  0E01               	movlw	1
  2892  000394  6E53               	movwf	_sorting,c
  2893                           
  2894                           ;main.c: 249: LATCbits.LC7 = 1;;
  2895  000396  8E8B               	bsf	3979,7,c	;volatile
  2896                           
  2897                           ;main.c: 250: wait_2ms(500);
  2898  000398  0E01               	movlw	1
  2899  00039A  0100               	movlb	0	; () banked
  2900  00039C  6F81               	movwf	(wait_2ms@x+1)& (0+255),b
  2901  00039E  0EF4               	movlw	244
  2902  0003A0  6F80               	movwf	wait_2ms@x& (0+255),b
  2903  0003A2  EC7F  F01B         	call	_wait_2ms	;wreg free
  2904                           
  2905                           ;main.c: 251: testBatteries();
  2906  0003A6  ECDA  F015         	call	_testBatteries	;wreg free
  2907                           
  2908                           ;main.c: 252: turn1BackRight = plat1Left;
  2909  0003AA  C0CF  F0D9         	movff	_plat1Left,_turn1BackRight
  2910  0003AE  C0D0  F0DA         	movff	_plat1Left+1,_turn1BackRight+1
  2911                           
  2912                           ;main.c: 253: turn1BackLeft = plat1Right;
  2913  0003B2  C0D1  F0D7         	movff	_plat1Right,_turn1BackLeft
  2914  0003B6  C0D2  F0D8         	movff	_plat1Right+1,_turn1BackLeft+1
  2915                           
  2916                           ;main.c: 254: turn2BackRight = plat2Left;
  2917  0003BA  C0D3  F0DD         	movff	_plat2Left,_turn2BackRight
  2918  0003BE  C0D4  F0DE         	movff	_plat2Left+1,_turn2BackRight+1
  2919                           
  2920                           ;main.c: 255: turn2BackLeft = plat2Right;
  2921  0003C2  C0D5  F0DB         	movff	_plat2Right,_turn2BackLeft
  2922  0003C6  C0D6  F0DC         	movff	_plat2Right+1,_turn2BackLeft+1
  2923                           
  2924                           ;main.c: 256: LATCbits.LC7 = 0;;
  2925  0003CA  9E8B               	bcf	3979,7,c	;volatile
  2926                           
  2927                           ;main.c: 257: wait_2ms(100);
  2928  0003CC  0E00               	movlw	0
  2929  0003CE  0100               	movlb	0	; () banked
  2930  0003D0  6F81               	movwf	(wait_2ms@x+1)& (0+255),b
  2931  0003D2  0E64               	movlw	100
  2932  0003D4  6F80               	movwf	wait_2ms@x& (0+255),b
  2933  0003D6  EC7F  F01B         	call	_wait_2ms	;wreg free
  2934                           
  2935                           ;main.c: 259: if (doubleAA)
  2936  0003DA  0100               	movlb	0	; () banked
  2937  0003DC  51E4               	movf	_doubleAA& (0+255),w,b
  2938  0003DE  B4D8               	btfsc	status,2,c
  2939  0003E0  D005               	goto	l7259
  2940                           
  2941                           ; BSR set to: 0
  2942                           ;main.c: 260: plat1Right = 512;
  2943  0003E2  0E02               	movlw	2
  2944  0003E4  0100               	movlb	0	; () banked
  2945  0003E6  6FD2               	movwf	(_plat1Right+1)& (0+255),b
  2946  0003E8  0E00               	movlw	0
  2947  0003EA  6FD1               	movwf	_plat1Right& (0+255),b
  2948  0003EC                     l7259:
  2949                           
  2950                           ; BSR set to: 0
  2951                           ;main.c: 261: if (plat1Left)
  2952  0003EC  0100               	movlb	0	; () banked
  2953  0003EE  51CF               	movf	_plat1Left& (0+255),w,b
  2954  0003F0  0100               	movlb	0	; () banked
  2955  0003F2  11D0               	iorwf	(_plat1Left+1)& (0+255),w,b
  2956  0003F4  B4D8               	btfsc	status,2,c
  2957  0003F6  D002               	goto	l7263
  2958                           
  2959                           ; BSR set to: 0
  2960                           ;main.c: 262: step1 = 1;
  2961  0003F8  0E01               	movlw	1
  2962  0003FA  6E54               	movwf	_step1,c
  2963  0003FC                     l7263:
  2964                           
  2965                           ; BSR set to: 0
  2966                           ;main.c: 263: if (plat1Right)
  2967  0003FC  0100               	movlb	0	; () banked
  2968  0003FE  51D1               	movf	_plat1Right& (0+255),w,b
  2969  000400  0100               	movlb	0	; () banked
  2970  000402  11D2               	iorwf	(_plat1Right+1)& (0+255),w,b
  2971  000404  B4D8               	btfsc	status,2,c
  2972  000406  D002               	goto	l7267
  2973                           
  2974                           ; BSR set to: 0
  2975                           ;main.c: 264: step1 = 4;
  2976  000408  0E04               	movlw	4
  2977  00040A  6E54               	movwf	_step1,c
  2978  00040C                     l7267:
  2979                           
  2980                           ; BSR set to: 0
  2981                           ;main.c: 265: if (plat2Left)
  2982  00040C  0100               	movlb	0	; () banked
  2983  00040E  51D3               	movf	_plat2Left& (0+255),w,b
  2984  000410  0100               	movlb	0	; () banked
  2985  000412  11D4               	iorwf	(_plat2Left+1)& (0+255),w,b
  2986  000414  B4D8               	btfsc	status,2,c
  2987  000416  D002               	goto	l7271
  2988                           
  2989                           ; BSR set to: 0
  2990                           ;main.c: 266: step2 = 1;
  2991  000418  0E01               	movlw	1
  2992  00041A  6E55               	movwf	_step2,c
  2993  00041C                     l7271:
  2994                           
  2995                           ; BSR set to: 0
  2996                           ;main.c: 267: if (plat2Right)
  2997  00041C  0100               	movlb	0	; () banked
  2998  00041E  51D5               	movf	_plat2Right& (0+255),w,b
  2999  000420  0100               	movlb	0	; () banked
  3000  000422  11D6               	iorwf	(_plat2Right+1)& (0+255),w,b
  3001  000424  B4D8               	btfsc	status,2,c
  3002  000426  D002               	goto	l7275
  3003                           
  3004                           ; BSR set to: 0
  3005                           ;main.c: 268: step2 = 4;
  3006  000428  0E04               	movlw	4
  3007  00042A  6E55               	movwf	_step2,c
  3008  00042C                     l7275:
  3009                           
  3010                           ; BSR set to: 0
  3011                           ;main.c: 270: LATCbits.LC1 = 1;;
  3012  00042C  828B               	bsf	3979,1,c	;volatile
  3013                           
  3014                           ; BSR set to: 0
  3015                           ;main.c: 271: LATCbits.LC2 = 0;;
  3016  00042E  948B               	bcf	3979,2,c	;volatile
  3017                           
  3018                           ; BSR set to: 0
  3019                           ;main.c: 272: LATCbits.LC0 = 1;;
  3020  000430  808B               	bsf	3979,0,c	;volatile
  3021                           
  3022                           ; BSR set to: 0
  3023                           ;main.c: 273: LATEbits.LE2 = 0;;
  3024  000432  948D               	bcf	3981,2,c	;volatile
  3025  000434                     l7283:
  3026                           
  3027                           ; BSR set to: 0
  3028  000434  0100               	movlb	0	; () banked
  3029  000436  51D3               	movf	_plat2Left& (0+255),w,b
  3030  000438  0100               	movlb	0	; () banked
  3031  00043A  11CF               	iorwf	_plat1Left& (0+255),w,b
  3032  00043C  0100               	movlb	0	; () banked
  3033  00043E  6FBD               	movwf	??_main& (0+255),b
  3034  000440  0100               	movlb	0	; () banked
  3035  000442  51D4               	movf	(_plat2Left+1)& (0+255),w,b
  3036  000444  0100               	movlb	0	; () banked
  3037  000446  11D0               	iorwf	(_plat1Left+1)& (0+255),w,b
  3038  000448  0100               	movlb	0	; () banked
  3039  00044A  6FBE               	movwf	(??_main+1)& (0+255),b
  3040  00044C  0100               	movlb	0	; () banked
  3041  00044E  51D1               	movf	_plat1Right& (0+255),w,b
  3042  000450  0100               	movlb	0	; () banked
  3043  000452  13BD               	iorwf	??_main& (0+255),f,b
  3044  000454  0100               	movlb	0	; () banked
  3045  000456  51D2               	movf	(_plat1Right+1)& (0+255),w,b
  3046  000458  0100               	movlb	0	; () banked
  3047  00045A  13BE               	iorwf	(??_main+1)& (0+255),f,b
  3048  00045C  0100               	movlb	0	; () banked
  3049  00045E  51D5               	movf	_plat2Right& (0+255),w,b
  3050  000460  0100               	movlb	0	; () banked
  3051  000462  13BD               	iorwf	??_main& (0+255),f,b
  3052  000464  0100               	movlb	0	; () banked
  3053  000466  51D6               	movf	(_plat2Right+1)& (0+255),w,b
  3054  000468  0100               	movlb	0	; () banked
  3055  00046A  13BE               	iorwf	(??_main+1)& (0+255),f,b
  3056  00046C  0100               	movlb	0	; () banked
  3057  00046E  51BD               	movf	??_main& (0+255),w,b
  3058  000470  0100               	movlb	0	; () banked
  3059  000472  11BE               	iorwf	(??_main+1)& (0+255),w,b
  3060  000474  B4D8               	btfsc	status,2,c
  3061  000476  D004               	goto	l7287
  3062                           
  3063                           ; BSR set to: 0
  3064  000478  0100               	movlb	0	; () banked
  3065  00047A  05FA               	decf	_screenMode& (0+255),w,b
  3066  00047C  B4D8               	btfsc	status,2,c
  3067  00047E  D7DA               	goto	l7283
  3068  000480                     l7287:
  3069                           
  3070                           ; BSR set to: 0
  3071                           ;main.c: 277: if (doubleAA){
  3072  000480  0100               	movlb	0	; () banked
  3073  000482  51E4               	movf	_doubleAA& (0+255),w,b
  3074  000484  B4D8               	btfsc	status,2,c
  3075  000486  D00B               	goto	l7293
  3076                           
  3077                           ; BSR set to: 0
  3078                           ;main.c: 278: plat2Left = 512;
  3079  000488  0E02               	movlw	2
  3080  00048A  0100               	movlb	0	; () banked
  3081  00048C  6FD4               	movwf	(_plat2Left+1)& (0+255),b
  3082  00048E  0E00               	movlw	0
  3083  000490  6FD3               	movwf	_plat2Left& (0+255),b
  3084                           
  3085                           ;main.c: 279: step2 = 1;
  3086  000492  0E01               	movlw	1
  3087  000494  6E55               	movwf	_step2,c
  3088                           
  3089                           ; BSR set to: 0
  3090                           ;main.c: 280: turn2BackRight = plat2Left;
  3091  000496  C0D3  F0DD         	movff	_plat2Left,_turn2BackRight
  3092  00049A  C0D4  F0DE         	movff	_plat2Left+1,_turn2BackRight+1
  3093  00049E                     l7293:
  3094                           
  3095                           ; BSR set to: 0
  3096  00049E  0100               	movlb	0	; () banked
  3097  0004A0  51D3               	movf	_plat2Left& (0+255),w,b
  3098  0004A2  0100               	movlb	0	; () banked
  3099  0004A4  11D4               	iorwf	(_plat2Left+1)& (0+255),w,b
  3100  0004A6  B4D8               	btfsc	status,2,c
  3101  0004A8  D004               	goto	l7297
  3102                           
  3103                           ; BSR set to: 0
  3104  0004AA  0100               	movlb	0	; () banked
  3105  0004AC  05FA               	decf	_screenMode& (0+255),w,b
  3106  0004AE  B4D8               	btfsc	status,2,c
  3107  0004B0  D7F6               	goto	l7293
  3108  0004B2                     l7297:
  3109                           
  3110                           ; BSR set to: 0
  3111                           ;main.c: 284: wait_2ms(500);
  3112  0004B2  0E01               	movlw	1
  3113  0004B4  0100               	movlb	0	; () banked
  3114  0004B6  6F81               	movwf	(wait_2ms@x+1)& (0+255),b
  3115  0004B8  0EF4               	movlw	244
  3116  0004BA  6F80               	movwf	wait_2ms@x& (0+255),b
  3117  0004BC  EC7F  F01B         	call	_wait_2ms	;wreg free
  3118                           
  3119                           ;main.c: 286: if (((countC + countAA + count9V + countDrain) >= 15))
  3120  0004C0  0100               	movlb	0	; () banked
  3121  0004C2  51E0               	movf	_countAA& (0+255),w,b
  3122  0004C4  C0E1  F0BD         	movff	_countC,??_main
  3123  0004C8  0100               	movlb	0	; () banked
  3124  0004CA  6BBE               	clrf	(??_main+1)& (0+255),b
  3125  0004CC  0100               	movlb	0	; () banked
  3126  0004CE  27BD               	addwf	??_main& (0+255),f,b
  3127  0004D0  0E00               	movlw	0
  3128  0004D2  23BE               	addwfc	(??_main+1)& (0+255),f,b
  3129  0004D4  0100               	movlb	0	; () banked
  3130  0004D6  51DF               	movf	_count9V& (0+255),w,b
  3131  0004D8  0100               	movlb	0	; () banked
  3132  0004DA  27BD               	addwf	??_main& (0+255),f,b
  3133  0004DC  0E00               	movlw	0
  3134  0004DE  23BE               	addwfc	(??_main+1)& (0+255),f,b
  3135  0004E0  0100               	movlb	0	; () banked
  3136  0004E2  51E2               	movf	_countDrain& (0+255),w,b
  3137  0004E4  0100               	movlb	0	; () banked
  3138  0004E6  27BD               	addwf	??_main& (0+255),f,b
  3139  0004E8  0E00               	movlw	0
  3140  0004EA  23BE               	addwfc	(??_main+1)& (0+255),f,b
  3141  0004EC  0100               	movlb	0	; () banked
  3142  0004EE  BFBE               	btfsc	(??_main+1)& (0+255),7,b
  3143  0004F0  D009               	goto	l7303
  3144  0004F2  0100               	movlb	0	; () banked
  3145  0004F4  51BE               	movf	(??_main+1)& (0+255),w,b
  3146  0004F6  E104               	bnz	u7240
  3147  0004F8  0E0F               	movlw	15
  3148  0004FA  0100               	movlb	0	; () banked
  3149  0004FC  5DBD               	subwf	??_main& (0+255),w,b
  3150  0004FE  B0D8               	btfsc	status,0,c
  3151  000500                     u7240:
  3152                           
  3153                           ; BSR set to: 0
  3154                           ;main.c: 287: stopOperation();
  3155  000500  ECD1  F00F         	call	_stopOperation	;wreg free
  3156  000504                     l7303:
  3157                           
  3158                           ;main.c: 289: LATCbits.LC1 = 1;;
  3159  000504  828B               	bsf	3979,1,c	;volatile
  3160                           
  3161                           ;main.c: 290: LATCbits.LC2 = 0;;
  3162  000506  948B               	bcf	3979,2,c	;volatile
  3163                           
  3164                           ;main.c: 291: LATCbits.LC0 = 1;;
  3165  000508  808B               	bsf	3979,0,c	;volatile
  3166                           
  3167                           ;main.c: 292: LATEbits.LE2 = 0;;
  3168  00050A  948D               	bcf	3981,2,c	;volatile
  3169                           
  3170                           ;main.c: 293: plat1Left = turn1BackLeft;
  3171  00050C  C0D7  F0CF         	movff	_turn1BackLeft,_plat1Left
  3172  000510  C0D8  F0D0         	movff	_turn1BackLeft+1,_plat1Left+1
  3173                           
  3174                           ;main.c: 294: plat1Right = turn1BackRight;
  3175  000514  C0D9  F0D1         	movff	_turn1BackRight,_plat1Right
  3176  000518  C0DA  F0D2         	movff	_turn1BackRight+1,_plat1Right+1
  3177                           
  3178                           ;main.c: 295: plat2Left = turn2BackLeft;
  3179  00051C  C0DB  F0D3         	movff	_turn2BackLeft,_plat2Left
  3180  000520  C0DC  F0D4         	movff	_turn2BackLeft+1,_plat2Left+1
  3181                           
  3182                           ;main.c: 296: plat2Right = turn2BackRight;
  3183  000524  C0DD  F0D5         	movff	_turn2BackRight,_plat2Right
  3184  000528  C0DE  F0D6         	movff	_turn2BackRight+1,_plat2Right+1
  3185                           
  3186                           ;main.c: 298: unsigned char steps = 0;
  3187  00052C  0E00               	movlw	0
  3188  00052E  0100               	movlb	0	; () banked
  3189  000530  6FC5               	movwf	main@steps_765& (0+255),b
  3190                           
  3191                           ;main.c: 299: while(steps<20 && screenMode==1){
  3192  000532  D016               	goto	l7331
  3193  000534                     l7321:
  3194                           
  3195                           ; BSR set to: 0
  3196                           ;main.c: 300: steps++;
  3197  000534  0100               	movlb	0	; () banked
  3198  000536  2BC5               	incf	main@steps_765& (0+255),f,b
  3199                           
  3200                           ; BSR set to: 0
  3201                           ;main.c: 301: LATDbits.LD1 = 1;;
  3202  000538  828C               	bsf	3980,1,c	;volatile
  3203                           
  3204                           ; BSR set to: 0
  3205                           ;main.c: 302: _delay((unsigned long)((5)*(10000000/4000.0)));
  3206  00053A  0E11               	movlw	17
  3207  00053C  0100               	movlb	0	; () banked
  3208  00053E  6FBD               	movwf	??_main& (0+255),b
  3209  000540  0E3A               	movlw	58
  3210  000542                     u7787:
  3211  000542  2EE8               	decfsz	wreg,f,c
  3212  000544  D7FE               	bra	u7787
  3213  000546  2FBD               	decfsz	??_main& (0+255),f,b
  3214  000548  D7FC               	bra	u7787
  3215  00054A  F000               	nop	
  3216                           
  3217                           ;main.c: 303: LATDbits.LD1 = 0;;
  3218  00054C  928C               	bcf	3980,1,c	;volatile
  3219                           
  3220                           ;main.c: 304: _delay((unsigned long)((5)*(10000000/4000.0)));
  3221  00054E  0E11               	movlw	17
  3222  000550  0100               	movlb	0	; () banked
  3223  000552  6FBD               	movwf	??_main& (0+255),b
  3224  000554  0E3A               	movlw	58
  3225  000556                     u7797:
  3226  000556  2EE8               	decfsz	wreg,f,c
  3227  000558  D7FE               	bra	u7797
  3228  00055A  2FBD               	decfsz	??_main& (0+255),f,b
  3229  00055C  D7FC               	bra	u7797
  3230  00055E  F000               	nop	
  3231  000560                     l7331:
  3232  000560  0E14               	movlw	20
  3233  000562  0100               	movlb	0	; () banked
  3234  000564  61C5               	cpfslt	main@steps_765& (0+255),b
  3235  000566  D004               	goto	l7335
  3236                           
  3237                           ; BSR set to: 0
  3238  000568  0100               	movlb	0	; () banked
  3239  00056A  05FA               	decf	_screenMode& (0+255),w,b
  3240  00056C  B4D8               	btfsc	status,2,c
  3241  00056E  D7E2               	goto	l7321
  3242  000570                     l7335:
  3243                           
  3244                           ; BSR set to: 0
  3245                           ;main.c: 305: }
  3246                           ;main.c: 306: steps = 0;
  3247  000570  0E00               	movlw	0
  3248  000572  0100               	movlb	0	; () banked
  3249  000574  6FC5               	movwf	main@steps_765& (0+255),b
  3250                           
  3251                           ;main.c: 307: while(steps < 178 && screenMode==1){
  3252  000576  D014               	goto	l7347
  3253  000578                     l7337:
  3254                           
  3255                           ; BSR set to: 0
  3256                           ;main.c: 308: steps++;
  3257  000578  0100               	movlb	0	; () banked
  3258  00057A  2BC5               	incf	main@steps_765& (0+255),f,b
  3259                           
  3260                           ; BSR set to: 0
  3261                           ;main.c: 309: LATDbits.LD1 = 1;;
  3262  00057C  828C               	bsf	3980,1,c	;volatile
  3263                           
  3264                           ; BSR set to: 0
  3265                           ;main.c: 310: _delay((unsigned long)((2)*(10000000/4000.0)));
  3266  00057E  0E07               	movlw	7
  3267  000580  0100               	movlb	0	; () banked
  3268  000582  6FBD               	movwf	??_main& (0+255),b
  3269  000584  0E7D               	movlw	125
  3270  000586                     u7807:
  3271  000586  2EE8               	decfsz	wreg,f,c
  3272  000588  D7FE               	bra	u7807
  3273  00058A  2FBD               	decfsz	??_main& (0+255),f,b
  3274  00058C  D7FC               	bra	u7807
  3275                           
  3276                           ;main.c: 311: LATDbits.LD1 = 0;;
  3277  00058E  928C               	bcf	3980,1,c	;volatile
  3278                           
  3279                           ;main.c: 312: _delay((unsigned long)((2)*(10000000/4000.0)));
  3280  000590  0E07               	movlw	7
  3281  000592  0100               	movlb	0	; () banked
  3282  000594  6FBD               	movwf	??_main& (0+255),b
  3283  000596  0E7D               	movlw	125
  3284  000598                     u7817:
  3285  000598  2EE8               	decfsz	wreg,f,c
  3286  00059A  D7FE               	bra	u7817
  3287  00059C  2FBD               	decfsz	??_main& (0+255),f,b
  3288  00059E  D7FC               	bra	u7817
  3289  0005A0                     l7347:
  3290  0005A0  0EB2               	movlw	178
  3291  0005A2  0100               	movlb	0	; () banked
  3292  0005A4  61C5               	cpfslt	main@steps_765& (0+255),b
  3293  0005A6  D004               	goto	l7351
  3294                           
  3295                           ; BSR set to: 0
  3296  0005A8  0100               	movlb	0	; () banked
  3297  0005AA  05FA               	decf	_screenMode& (0+255),w,b
  3298  0005AC  B4D8               	btfsc	status,2,c
  3299  0005AE  D7E4               	goto	l7337
  3300  0005B0                     l7351:
  3301                           
  3302                           ; BSR set to: 0
  3303                           ;main.c: 313: }
  3304                           ;main.c: 314: steps = 0;
  3305  0005B0  0E00               	movlw	0
  3306  0005B2  0100               	movlb	0	; () banked
  3307  0005B4  6FC5               	movwf	main@steps_765& (0+255),b
  3308                           
  3309                           ;main.c: 315: while(steps<2 && screenMode==1){
  3310  0005B6  D016               	goto	l7363
  3311  0005B8                     l7353:
  3312                           
  3313                           ; BSR set to: 0
  3314                           ;main.c: 316: steps++;
  3315  0005B8  0100               	movlb	0	; () banked
  3316  0005BA  2BC5               	incf	main@steps_765& (0+255),f,b
  3317                           
  3318                           ; BSR set to: 0
  3319                           ;main.c: 317: LATDbits.LD1 = 1;;
  3320  0005BC  828C               	bsf	3980,1,c	;volatile
  3321                           
  3322                           ; BSR set to: 0
  3323                           ;main.c: 318: _delay((unsigned long)((5)*(10000000/4000.0)));
  3324  0005BE  0E11               	movlw	17
  3325  0005C0  0100               	movlb	0	; () banked
  3326  0005C2  6FBD               	movwf	??_main& (0+255),b
  3327  0005C4  0E3A               	movlw	58
  3328  0005C6                     u7827:
  3329  0005C6  2EE8               	decfsz	wreg,f,c
  3330  0005C8  D7FE               	bra	u7827
  3331  0005CA  2FBD               	decfsz	??_main& (0+255),f,b
  3332  0005CC  D7FC               	bra	u7827
  3333  0005CE  F000               	nop	
  3334                           
  3335                           ;main.c: 319: LATDbits.LD1 = 0;;
  3336  0005D0  928C               	bcf	3980,1,c	;volatile
  3337                           
  3338                           ;main.c: 320: _delay((unsigned long)((5)*(10000000/4000.0)));
  3339  0005D2  0E11               	movlw	17
  3340  0005D4  0100               	movlb	0	; () banked
  3341  0005D6  6FBD               	movwf	??_main& (0+255),b
  3342  0005D8  0E3A               	movlw	58
  3343  0005DA                     u7837:
  3344  0005DA  2EE8               	decfsz	wreg,f,c
  3345  0005DC  D7FE               	bra	u7837
  3346  0005DE  2FBD               	decfsz	??_main& (0+255),f,b
  3347  0005E0  D7FC               	bra	u7837
  3348  0005E2  F000               	nop	
  3349  0005E4                     l7363:
  3350  0005E4  0E02               	movlw	2
  3351  0005E6  0100               	movlb	0	; () banked
  3352  0005E8  61C5               	cpfslt	main@steps_765& (0+255),b
  3353  0005EA  D004               	goto	l7367
  3354                           
  3355                           ; BSR set to: 0
  3356  0005EC  0100               	movlb	0	; () banked
  3357  0005EE  05FA               	decf	_screenMode& (0+255),w,b
  3358  0005F0  B4D8               	btfsc	status,2,c
  3359  0005F2  D7E2               	goto	l7353
  3360  0005F4                     l7367:
  3361                           
  3362                           ; BSR set to: 0
  3363                           ;main.c: 321: }
  3364                           ;main.c: 322: steps = 0;
  3365  0005F4  0E00               	movlw	0
  3366  0005F6  0100               	movlb	0	; () banked
  3367  0005F8  6FC5               	movwf	main@steps_765& (0+255),b
  3368  0005FA                     l7369:
  3369                           
  3370                           ; BSR set to: 0
  3371  0005FA  0100               	movlb	0	; () banked
  3372  0005FC  51D3               	movf	_plat2Left& (0+255),w,b
  3373  0005FE  0100               	movlb	0	; () banked
  3374  000600  11CF               	iorwf	_plat1Left& (0+255),w,b
  3375  000602  0100               	movlb	0	; () banked
  3376  000604  6FBD               	movwf	??_main& (0+255),b
  3377  000606  0100               	movlb	0	; () banked
  3378  000608  51D4               	movf	(_plat2Left+1)& (0+255),w,b
  3379  00060A  0100               	movlb	0	; () banked
  3380  00060C  11D0               	iorwf	(_plat1Left+1)& (0+255),w,b
  3381  00060E  0100               	movlb	0	; () banked
  3382  000610  6FBE               	movwf	(??_main+1)& (0+255),b
  3383  000612  0100               	movlb	0	; () banked
  3384  000614  51D1               	movf	_plat1Right& (0+255),w,b
  3385  000616  0100               	movlb	0	; () banked
  3386  000618  13BD               	iorwf	??_main& (0+255),f,b
  3387  00061A  0100               	movlb	0	; () banked
  3388  00061C  51D2               	movf	(_plat1Right+1)& (0+255),w,b
  3389  00061E  0100               	movlb	0	; () banked
  3390  000620  13BE               	iorwf	(??_main+1)& (0+255),f,b
  3391  000622  0100               	movlb	0	; () banked
  3392  000624  51D5               	movf	_plat2Right& (0+255),w,b
  3393  000626  0100               	movlb	0	; () banked
  3394  000628  13BD               	iorwf	??_main& (0+255),f,b
  3395  00062A  0100               	movlb	0	; () banked
  3396  00062C  51D6               	movf	(_plat2Right+1)& (0+255),w,b
  3397  00062E  0100               	movlb	0	; () banked
  3398  000630  13BE               	iorwf	(??_main+1)& (0+255),f,b
  3399  000632  0100               	movlb	0	; () banked
  3400  000634  51BD               	movf	??_main& (0+255),w,b
  3401  000636  0100               	movlb	0	; () banked
  3402  000638  11BE               	iorwf	(??_main+1)& (0+255),w,b
  3403  00063A  B4D8               	btfsc	status,2,c
  3404  00063C  D004               	goto	l7373
  3405                           
  3406                           ; BSR set to: 0
  3407  00063E  0100               	movlb	0	; () banked
  3408  000640  05FA               	decf	_screenMode& (0+255),w,b
  3409  000642  B4D8               	btfsc	status,2,c
  3410  000644  D7DA               	goto	l7369
  3411  000646                     l7373:
  3412                           
  3413                           ; BSR set to: 0
  3414                           ;main.c: 326: wait_2ms(150);
  3415  000646  0E00               	movlw	0
  3416  000648  0100               	movlb	0	; () banked
  3417  00064A  6F81               	movwf	(wait_2ms@x+1)& (0+255),b
  3418  00064C  0E96               	movlw	150
  3419  00064E  6F80               	movwf	wait_2ms@x& (0+255),b
  3420  000650  EC7F  F01B         	call	_wait_2ms	;wreg free
  3421                           
  3422                           ;main.c: 328: LATCbits.LC7 = 1;;
  3423  000654  8E8B               	bsf	3979,7,c	;volatile
  3424                           
  3425                           ;main.c: 329: wait_2ms(100);
  3426  000656  0E00               	movlw	0
  3427  000658  0100               	movlb	0	; () banked
  3428  00065A  6F81               	movwf	(wait_2ms@x+1)& (0+255),b
  3429  00065C  0E64               	movlw	100
  3430  00065E  6F80               	movwf	wait_2ms@x& (0+255),b
  3431  000660  EC7F  F01B         	call	_wait_2ms	;wreg free
  3432                           
  3433                           ;main.c: 330: LATCbits.LC7 = 0;;
  3434  000664  9E8B               	bcf	3979,7,c	;volatile
  3435                           
  3436                           ;main.c: 331: plat1Right = 120;
  3437  000666  0E00               	movlw	0
  3438  000668  0100               	movlb	0	; () banked
  3439  00066A  6FD2               	movwf	(_plat1Right+1)& (0+255),b
  3440  00066C  0E78               	movlw	120
  3441  00066E  6FD1               	movwf	_plat1Right& (0+255),b
  3442                           
  3443                           ; BSR set to: 0
  3444                           ;main.c: 332: plat2Left = 120;
  3445  000670  0E00               	movlw	0
  3446  000672  0100               	movlb	0	; () banked
  3447  000674  6FD4               	movwf	(_plat2Left+1)& (0+255),b
  3448  000676  0E78               	movlw	120
  3449  000678  6FD3               	movwf	_plat2Left& (0+255),b
  3450  00067A                     l7383:
  3451                           
  3452                           ; BSR set to: 0
  3453  00067A  0100               	movlb	0	; () banked
  3454  00067C  05FA               	decf	_screenMode& (0+255),w,b
  3455  00067E  A4D8               	btfss	status,2,c
  3456  000680  D012               	goto	l7387
  3457                           
  3458                           ; BSR set to: 0
  3459  000682  0100               	movlb	0	; () banked
  3460  000684  51D3               	movf	_plat2Left& (0+255),w,b
  3461  000686  0100               	movlb	0	; () banked
  3462  000688  11D1               	iorwf	_plat1Right& (0+255),w,b
  3463  00068A  0100               	movlb	0	; () banked
  3464  00068C  6FBD               	movwf	??_main& (0+255),b
  3465  00068E  0100               	movlb	0	; () banked
  3466  000690  51D4               	movf	(_plat2Left+1)& (0+255),w,b
  3467  000692  0100               	movlb	0	; () banked
  3468  000694  11D2               	iorwf	(_plat1Right+1)& (0+255),w,b
  3469  000696  0100               	movlb	0	; () banked
  3470  000698  6FBE               	movwf	(??_main+1)& (0+255),b
  3471  00069A  0100               	movlb	0	; () banked
  3472  00069C  51BD               	movf	??_main& (0+255),w,b
  3473  00069E  0100               	movlb	0	; () banked
  3474  0006A0  11BE               	iorwf	(??_main+1)& (0+255),w,b
  3475  0006A2  A4D8               	btfss	status,2,c
  3476  0006A4  D7EA               	goto	l7383
  3477  0006A6                     l7387:
  3478                           
  3479                           ; BSR set to: 0
  3480                           ;main.c: 334: plat1Left = 120;
  3481  0006A6  0E00               	movlw	0
  3482  0006A8  0100               	movlb	0	; () banked
  3483  0006AA  6FD0               	movwf	(_plat1Left+1)& (0+255),b
  3484  0006AC  0E78               	movlw	120
  3485  0006AE  6FCF               	movwf	_plat1Left& (0+255),b
  3486                           
  3487                           ;main.c: 335: plat2Right = 120;
  3488  0006B0  0E00               	movlw	0
  3489  0006B2  0100               	movlb	0	; () banked
  3490  0006B4  6FD6               	movwf	(_plat2Right+1)& (0+255),b
  3491  0006B6  0E78               	movlw	120
  3492  0006B8  6FD5               	movwf	_plat2Right& (0+255),b
  3493  0006BA                     l7389:
  3494                           
  3495                           ; BSR set to: 0
  3496  0006BA  0100               	movlb	0	; () banked
  3497  0006BC  05FA               	decf	_screenMode& (0+255),w,b
  3498  0006BE  A4D8               	btfss	status,2,c
  3499  0006C0  D012               	goto	l382
  3500                           
  3501                           ; BSR set to: 0
  3502  0006C2  0100               	movlb	0	; () banked
  3503  0006C4  51D5               	movf	_plat2Right& (0+255),w,b
  3504  0006C6  0100               	movlb	0	; () banked
  3505  0006C8  11CF               	iorwf	_plat1Left& (0+255),w,b
  3506  0006CA  0100               	movlb	0	; () banked
  3507  0006CC  6FBD               	movwf	??_main& (0+255),b
  3508  0006CE  0100               	movlb	0	; () banked
  3509  0006D0  51D6               	movf	(_plat2Right+1)& (0+255),w,b
  3510  0006D2  0100               	movlb	0	; () banked
  3511  0006D4  11D0               	iorwf	(_plat1Left+1)& (0+255),w,b
  3512  0006D6  0100               	movlb	0	; () banked
  3513  0006D8  6FBE               	movwf	(??_main+1)& (0+255),b
  3514  0006DA  0100               	movlb	0	; () banked
  3515  0006DC  51BD               	movf	??_main& (0+255),w,b
  3516  0006DE  0100               	movlb	0	; () banked
  3517  0006E0  11BE               	iorwf	(??_main+1)& (0+255),w,b
  3518  0006E2  A4D8               	btfss	status,2,c
  3519  0006E4  D7EA               	goto	l7389
  3520  0006E6                     l382:
  3521                           
  3522                           ; BSR set to: 0
  3523                           ;main.c: 338: LATDbits.LD1 = 0;;
  3524  0006E6  928C               	bcf	3980,1,c	;volatile
  3525                           
  3526                           ;main.c: 339: LATDbits.LD0= 0;;
  3527  0006E8  908C               	bcf	3980,0,c	;volatile
  3528                           
  3529                           ; BSR set to: 0
  3530                           ;main.c: 340: plat1Right = 0;
  3531  0006EA  0E00               	movlw	0
  3532  0006EC  0100               	movlb	0	; () banked
  3533  0006EE  6FD2               	movwf	(_plat1Right+1)& (0+255),b
  3534  0006F0  0E00               	movlw	0
  3535  0006F2  6FD1               	movwf	_plat1Right& (0+255),b
  3536                           
  3537                           ;main.c: 341: plat2Right = 0;
  3538  0006F4  0E00               	movlw	0
  3539  0006F6  0100               	movlb	0	; () banked
  3540  0006F8  6FD6               	movwf	(_plat2Right+1)& (0+255),b
  3541  0006FA  0E00               	movlw	0
  3542  0006FC  6FD5               	movwf	_plat2Right& (0+255),b
  3543                           
  3544                           ;main.c: 342: plat1Left = 0;
  3545  0006FE  0E00               	movlw	0
  3546  000700  0100               	movlb	0	; () banked
  3547  000702  6FD0               	movwf	(_plat1Left+1)& (0+255),b
  3548  000704  0E00               	movlw	0
  3549  000706  6FCF               	movwf	_plat1Left& (0+255),b
  3550                           
  3551                           ;main.c: 343: plat2Left = 0;
  3552  000708  0E00               	movlw	0
  3553  00070A  0100               	movlb	0	; () banked
  3554  00070C  6FD4               	movwf	(_plat2Left+1)& (0+255),b
  3555  00070E  0E00               	movlw	0
  3556  000710  6FD3               	movwf	_plat2Left& (0+255),b
  3557                           
  3558                           ;main.c: 344: turn1BackRight = 0;
  3559  000712  0E00               	movlw	0
  3560  000714  0100               	movlb	0	; () banked
  3561  000716  6FDA               	movwf	(_turn1BackRight+1)& (0+255),b
  3562  000718  0E00               	movlw	0
  3563  00071A  6FD9               	movwf	_turn1BackRight& (0+255),b
  3564                           
  3565                           ;main.c: 345: turn1BackLeft = 0;
  3566  00071C  0E00               	movlw	0
  3567  00071E  0100               	movlb	0	; () banked
  3568  000720  6FD8               	movwf	(_turn1BackLeft+1)& (0+255),b
  3569  000722  0E00               	movlw	0
  3570  000724  6FD7               	movwf	_turn1BackLeft& (0+255),b
  3571                           
  3572                           ;main.c: 346: turn2BackRight = 0;
  3573  000726  0E00               	movlw	0
  3574  000728  0100               	movlb	0	; () banked
  3575  00072A  6FDE               	movwf	(_turn2BackRight+1)& (0+255),b
  3576  00072C  0E00               	movlw	0
  3577  00072E  6FDD               	movwf	_turn2BackRight& (0+255),b
  3578                           
  3579                           ;main.c: 347: turn2BackLeft = 0;
  3580  000730  0E00               	movlw	0
  3581  000732  0100               	movlb	0	; () banked
  3582  000734  6FDC               	movwf	(_turn2BackLeft+1)& (0+255),b
  3583  000736  0E00               	movlw	0
  3584  000738  6FDB               	movwf	_turn2BackLeft& (0+255),b
  3585                           
  3586                           ; BSR set to: 0
  3587                           ;main.c: 348: LATCbits.LC1 = 0;;
  3588  00073A  928B               	bcf	3979,1,c	;volatile
  3589                           
  3590                           ; BSR set to: 0
  3591                           ;main.c: 349: LATCbits.LC2 = 0;;
  3592  00073C  948B               	bcf	3979,2,c	;volatile
  3593                           
  3594                           ; BSR set to: 0
  3595                           ;main.c: 350: LATCbits.LC6 = 0;;
  3596  00073E  9C8B               	bcf	3979,6,c	;volatile
  3597                           
  3598                           ; BSR set to: 0
  3599                           ;main.c: 351: LATCbits.LC5 = 0;;
  3600  000740  9A8B               	bcf	3979,5,c	;volatile
  3601                           
  3602                           ; BSR set to: 0
  3603                           ;main.c: 352: LATCbits.LC0 = 0;;
  3604  000742  908B               	bcf	3979,0,c	;volatile
  3605                           
  3606                           ; BSR set to: 0
  3607                           ;main.c: 353: LATEbits.LE2 = 0;;
  3608  000744  948D               	bcf	3981,2,c	;volatile
  3609                           
  3610                           ; BSR set to: 0
  3611                           ;main.c: 354: LATEbits.LE1 = 0;;
  3612  000746  928D               	bcf	3981,1,c	;volatile
  3613                           
  3614                           ; BSR set to: 0
  3615                           ;main.c: 355: LATAbits.LA4 = 0;;
  3616  000748  9889               	bcf	3977,4,c	;volatile
  3617                           
  3618                           ;main.c: 356: doubleAA = 0;
  3619  00074A  0E00               	movlw	0
  3620  00074C  0100               	movlb	0	; () banked
  3621  00074E  6FE4               	movwf	_doubleAA& (0+255),b
  3622                           
  3623                           ;main.c: 357: sorting = 0;
  3624  000750  0E00               	movlw	0
  3625  000752  6E53               	movwf	_sorting,c
  3626  000754                     l7411:
  3627                           
  3628                           ; BSR set to: 0
  3629                           ;main.c: 358: }
  3630                           ;main.c: 359: wait_2ms(250);
  3631  000754  0E00               	movlw	0
  3632  000756  0100               	movlb	0	; () banked
  3633  000758  6F81               	movwf	(wait_2ms@x+1)& (0+255),b
  3634  00075A  0EFA               	movlw	250
  3635  00075C  6F80               	movwf	wait_2ms@x& (0+255),b
  3636  00075E  EC7F  F01B         	call	_wait_2ms	;wreg free
  3637                           
  3638                           ;main.c: 360: if (doneTimer >= 5){
  3639  000762  0E04               	movlw	4
  3640  000764  0100               	movlb	0	; () banked
  3641  000766  65E3               	cpfsgt	_doneTimer& (0+255),b
  3642  000768  D067               	goto	l7465
  3643                           
  3644                           ; BSR set to: 0
  3645                           ;main.c: 361: unsigned char steps = 0;
  3646  00076A  0E00               	movlw	0
  3647  00076C  0100               	movlb	0	; () banked
  3648  00076E  6FC6               	movwf	main@steps_774& (0+255),b
  3649                           
  3650                           ;main.c: 362: while(steps<20 && screenMode==1){
  3651  000770  D016               	goto	l7427
  3652  000772                     l7417:
  3653                           
  3654                           ; BSR set to: 0
  3655                           ;main.c: 363: steps++;
  3656  000772  0100               	movlb	0	; () banked
  3657  000774  2BC6               	incf	main@steps_774& (0+255),f,b
  3658                           
  3659                           ; BSR set to: 0
  3660                           ;main.c: 364: LATDbits.LD1 = 1;;
  3661  000776  828C               	bsf	3980,1,c	;volatile
  3662                           
  3663                           ; BSR set to: 0
  3664                           ;main.c: 365: _delay((unsigned long)((5)*(10000000/4000.0)));
  3665  000778  0E11               	movlw	17
  3666  00077A  0100               	movlb	0	; () banked
  3667  00077C  6FBD               	movwf	??_main& (0+255),b
  3668  00077E  0E3A               	movlw	58
  3669  000780                     u7847:
  3670  000780  2EE8               	decfsz	wreg,f,c
  3671  000782  D7FE               	bra	u7847
  3672  000784  2FBD               	decfsz	??_main& (0+255),f,b
  3673  000786  D7FC               	bra	u7847
  3674  000788  F000               	nop	
  3675                           
  3676                           ;main.c: 366: LATDbits.LD1 = 0;;
  3677  00078A  928C               	bcf	3980,1,c	;volatile
  3678                           
  3679                           ;main.c: 367: _delay((unsigned long)((5)*(10000000/4000.0)));
  3680  00078C  0E11               	movlw	17
  3681  00078E  0100               	movlb	0	; () banked
  3682  000790  6FBD               	movwf	??_main& (0+255),b
  3683  000792  0E3A               	movlw	58
  3684  000794                     u7857:
  3685  000794  2EE8               	decfsz	wreg,f,c
  3686  000796  D7FE               	bra	u7857
  3687  000798  2FBD               	decfsz	??_main& (0+255),f,b
  3688  00079A  D7FC               	bra	u7857
  3689  00079C  F000               	nop	
  3690  00079E                     l7427:
  3691  00079E  0E14               	movlw	20
  3692  0007A0  0100               	movlb	0	; () banked
  3693  0007A2  61C6               	cpfslt	main@steps_774& (0+255),b
  3694  0007A4  D004               	goto	l7431
  3695                           
  3696                           ; BSR set to: 0
  3697  0007A6  0100               	movlb	0	; () banked
  3698  0007A8  05FA               	decf	_screenMode& (0+255),w,b
  3699  0007AA  B4D8               	btfsc	status,2,c
  3700  0007AC  D7E2               	goto	l7417
  3701  0007AE                     l7431:
  3702                           
  3703                           ; BSR set to: 0
  3704                           ;main.c: 368: }
  3705                           ;main.c: 369: steps = 0;
  3706  0007AE  0E00               	movlw	0
  3707  0007B0  0100               	movlb	0	; () banked
  3708  0007B2  6FC6               	movwf	main@steps_774& (0+255),b
  3709                           
  3710                           ;main.c: 370: while(steps < 178 && screenMode==1){
  3711  0007B4  D014               	goto	l7443
  3712  0007B6                     l7433:
  3713                           
  3714                           ; BSR set to: 0
  3715                           ;main.c: 371: steps++;
  3716  0007B6  0100               	movlb	0	; () banked
  3717  0007B8  2BC6               	incf	main@steps_774& (0+255),f,b
  3718                           
  3719                           ; BSR set to: 0
  3720                           ;main.c: 372: LATDbits.LD1 = 1;;
  3721  0007BA  828C               	bsf	3980,1,c	;volatile
  3722                           
  3723                           ; BSR set to: 0
  3724                           ;main.c: 373: _delay((unsigned long)((2)*(10000000/4000.0)));
  3725  0007BC  0E07               	movlw	7
  3726  0007BE  0100               	movlb	0	; () banked
  3727  0007C0  6FBD               	movwf	??_main& (0+255),b
  3728  0007C2  0E7D               	movlw	125
  3729  0007C4                     u7867:
  3730  0007C4  2EE8               	decfsz	wreg,f,c
  3731  0007C6  D7FE               	bra	u7867
  3732  0007C8  2FBD               	decfsz	??_main& (0+255),f,b
  3733  0007CA  D7FC               	bra	u7867
  3734                           
  3735                           ;main.c: 374: LATDbits.LD1 = 0;;
  3736  0007CC  928C               	bcf	3980,1,c	;volatile
  3737                           
  3738                           ;main.c: 375: _delay((unsigned long)((2)*(10000000/4000.0)));
  3739  0007CE  0E07               	movlw	7
  3740  0007D0  0100               	movlb	0	; () banked
  3741  0007D2  6FBD               	movwf	??_main& (0+255),b
  3742  0007D4  0E7D               	movlw	125
  3743  0007D6                     u7877:
  3744  0007D6  2EE8               	decfsz	wreg,f,c
  3745  0007D8  D7FE               	bra	u7877
  3746  0007DA  2FBD               	decfsz	??_main& (0+255),f,b
  3747  0007DC  D7FC               	bra	u7877
  3748  0007DE                     l7443:
  3749  0007DE  0EB2               	movlw	178
  3750  0007E0  0100               	movlb	0	; () banked
  3751  0007E2  61C6               	cpfslt	main@steps_774& (0+255),b
  3752  0007E4  D004               	goto	l7447
  3753                           
  3754                           ; BSR set to: 0
  3755  0007E6  0100               	movlb	0	; () banked
  3756  0007E8  05FA               	decf	_screenMode& (0+255),w,b
  3757  0007EA  B4D8               	btfsc	status,2,c
  3758  0007EC  D7E4               	goto	l7433
  3759  0007EE                     l7447:
  3760                           
  3761                           ; BSR set to: 0
  3762                           ;main.c: 376: }
  3763                           ;main.c: 377: steps = 0;
  3764  0007EE  0E00               	movlw	0
  3765  0007F0  0100               	movlb	0	; () banked
  3766  0007F2  6FC6               	movwf	main@steps_774& (0+255),b
  3767                           
  3768                           ;main.c: 378: while(steps<2 && screenMode==1){
  3769  0007F4  D016               	goto	l7459
  3770  0007F6                     l7449:
  3771                           
  3772                           ; BSR set to: 0
  3773                           ;main.c: 379: steps++;
  3774  0007F6  0100               	movlb	0	; () banked
  3775  0007F8  2BC6               	incf	main@steps_774& (0+255),f,b
  3776                           
  3777                           ; BSR set to: 0
  3778                           ;main.c: 380: LATDbits.LD1 = 1;;
  3779  0007FA  828C               	bsf	3980,1,c	;volatile
  3780                           
  3781                           ; BSR set to: 0
  3782                           ;main.c: 381: _delay((unsigned long)((5)*(10000000/4000.0)));
  3783  0007FC  0E11               	movlw	17
  3784  0007FE  0100               	movlb	0	; () banked
  3785  000800  6FBD               	movwf	??_main& (0+255),b
  3786  000802  0E3A               	movlw	58
  3787  000804                     u7887:
  3788  000804  2EE8               	decfsz	wreg,f,c
  3789  000806  D7FE               	bra	u7887
  3790  000808  2FBD               	decfsz	??_main& (0+255),f,b
  3791  00080A  D7FC               	bra	u7887
  3792  00080C  F000               	nop	
  3793                           
  3794                           ;main.c: 382: LATDbits.LD1 = 0;;
  3795  00080E  928C               	bcf	3980,1,c	;volatile
  3796                           
  3797                           ;main.c: 383: _delay((unsigned long)((5)*(10000000/4000.0)));
  3798  000810  0E11               	movlw	17
  3799  000812  0100               	movlb	0	; () banked
  3800  000814  6FBD               	movwf	??_main& (0+255),b
  3801  000816  0E3A               	movlw	58
  3802  000818                     u7897:
  3803  000818  2EE8               	decfsz	wreg,f,c
  3804  00081A  D7FE               	bra	u7897
  3805  00081C  2FBD               	decfsz	??_main& (0+255),f,b
  3806  00081E  D7FC               	bra	u7897
  3807  000820  F000               	nop	
  3808  000822                     l7459:
  3809  000822  0E02               	movlw	2
  3810  000824  0100               	movlb	0	; () banked
  3811  000826  61C6               	cpfslt	main@steps_774& (0+255),b
  3812  000828  D004               	goto	l7463
  3813                           
  3814                           ; BSR set to: 0
  3815  00082A  0100               	movlb	0	; () banked
  3816  00082C  05FA               	decf	_screenMode& (0+255),w,b
  3817  00082E  B4D8               	btfsc	status,2,c
  3818  000830  D7E2               	goto	l7449
  3819  000832                     l7463:
  3820                           
  3821                           ; BSR set to: 0
  3822                           ;main.c: 384: }
  3823                           ;main.c: 385: steps = 0;
  3824  000832  0E00               	movlw	0
  3825  000834  0100               	movlb	0	; () banked
  3826  000836  6FC6               	movwf	main@steps_774& (0+255),b
  3827  000838                     l7465:
  3828                           
  3829                           ; BSR set to: 0
  3830  000838  0100               	movlb	0	; () banked
  3831  00083A  05FA               	decf	_screenMode& (0+255),w,b
  3832  00083C  A4D8               	btfss	status,2,c
  3833  00083E  D017               	goto	l7473
  3834  000840  D48B               	goto	l7131
  3835  000842                     l7467:
  3836                           
  3837                           ; BSR set to: 0
  3838                           ;main.c: 389: lcdInst(0b10000000);;
  3839  000842  0E80               	movlw	128
  3840  000844  ECDF  F01B         	call	_lcdInst
  3841                           
  3842                           ;main.c: 390: printf("DONE! PRESS *   ");
  3843  000848  0E32               	movlw	low STR_5
  3844  00084A  0100               	movlb	0	; () banked
  3845  00084C  6F8C               	movwf	printf@f& (0+255),b
  3846  00084E  0EFF               	movlw	high STR_5
  3847  000850  0100               	movlb	0	; () banked
  3848  000852  6F8D               	movwf	(printf@f+1)& (0+255),b
  3849  000854  EC59  F00C         	call	_printf	;wreg free
  3850                           
  3851                           ;main.c: 391: lcdInst(0b11000000);;
  3852  000858  0EC0               	movlw	192
  3853  00085A  ECDF  F01B         	call	_lcdInst
  3854                           
  3855                           ;main.c: 392: printf("TO CONTINUE     ");
  3856  00085E  0E10               	movlw	low STR_6
  3857  000860  0100               	movlb	0	; () banked
  3858  000862  6F8C               	movwf	printf@f& (0+255),b
  3859  000864  0EFF               	movlw	high STR_6
  3860  000866  0100               	movlb	0	; () banked
  3861  000868  6F8D               	movwf	(printf@f+1)& (0+255),b
  3862  00086A  EC59  F00C         	call	_printf	;wreg free
  3863  00086E                     l7473:
  3864  00086E  0100               	movlb	0	; () banked
  3865  000870  51FA               	movf	_screenMode& (0+255),w,b
  3866  000872  A4D8               	btfss	status,2,c
  3867  000874  D01F               	goto	l7481
  3868  000876  D7E5               	goto	l7467
  3869  000878                     l7475:
  3870                           
  3871                           ; BSR set to: 0
  3872                           ;main.c: 395: lcdInst(0b10000000);;
  3873  000878  0E80               	movlw	128
  3874  00087A  ECDF  F01B         	call	_lcdInst
  3875                           
  3876                           ;main.c: 396: printf("TOTAL RUN TIME: ");
  3877  00087E  0E54               	movlw	low STR_7
  3878  000880  0100               	movlb	0	; () banked
  3879  000882  6F8C               	movwf	printf@f& (0+255),b
  3880  000884  0EFF               	movlw	high STR_7
  3881  000886  0100               	movlb	0	; () banked
  3882  000888  6F8D               	movwf	(printf@f+1)& (0+255),b
  3883  00088A  EC59  F00C         	call	_printf	;wreg free
  3884                           
  3885                           ;main.c: 397: lcdInst(0b11000000);;
  3886  00088E  0EC0               	movlw	192
  3887  000890  ECDF  F01B         	call	_lcdInst
  3888                           
  3889                           ;main.c: 398: printf("%02d:%02d               ", min, sec);
  3890  000894  0EAA               	movlw	low STR_8
  3891  000896  0100               	movlb	0	; () banked
  3892  000898  6F8C               	movwf	printf@f& (0+255),b
  3893  00089A  0EFD               	movlw	high STR_8
  3894  00089C  0100               	movlb	0	; () banked
  3895  00089E  6F8D               	movwf	(printf@f+1)& (0+255),b
  3896  0008A0  C0E5  F08E         	movff	_min,?_printf+2
  3897  0008A4  0100               	movlb	0	; () banked
  3898  0008A6  6B8F               	clrf	(?_printf+3)& (0+255),b
  3899  0008A8  C0EB  F090         	movff	_sec,?_printf+4
  3900  0008AC  0100               	movlb	0	; () banked
  3901  0008AE  6B91               	clrf	(?_printf+5)& (0+255),b
  3902  0008B0  EC59  F00C         	call	_printf	;wreg free
  3903  0008B4                     l7481:
  3904  0008B4  0E03               	movlw	3
  3905  0008B6  0100               	movlb	0	; () banked
  3906  0008B8  19FA               	xorwf	_screenMode& (0+255),w,b
  3907  0008BA  A4D8               	btfss	status,2,c
  3908  0008BC  D01B               	goto	l7489
  3909  0008BE  D7DC               	goto	l7475
  3910  0008C0                     l7483:
  3911                           
  3912                           ; BSR set to: 0
  3913                           ;main.c: 401: lcdInst(0b10000000);;
  3914  0008C0  0E80               	movlw	128
  3915  0008C2  ECDF  F01B         	call	_lcdInst
  3916                           
  3917                           ;main.c: 402: printf("TOTAL # OF      ");
  3918  0008C6  0EEE               	movlw	low STR_9
  3919  0008C8  0100               	movlb	0	; () banked
  3920  0008CA  6F8C               	movwf	printf@f& (0+255),b
  3921  0008CC  0EFE               	movlw	high STR_9
  3922  0008CE  0100               	movlb	0	; () banked
  3923  0008D0  6F8D               	movwf	(printf@f+1)& (0+255),b
  3924  0008D2  EC59  F00C         	call	_printf	;wreg free
  3925                           
  3926                           ;main.c: 403: lcdInst(0b11000000);;
  3927  0008D6  0EC0               	movlw	192
  3928  0008D8  ECDF  F01B         	call	_lcdInst
  3929                           
  3930                           ;main.c: 404: printf("BATTERIES: %02d   ", numBats);
  3931  0008DC  0E75               	movlw	low STR_10
  3932  0008DE  0100               	movlb	0	; () banked
  3933  0008E0  6F8C               	movwf	printf@f& (0+255),b
  3934  0008E2  0EFE               	movlw	high STR_10
  3935  0008E4  0100               	movlb	0	; () banked
  3936  0008E6  6F8D               	movwf	(printf@f+1)& (0+255),b
  3937  0008E8  C0E8  F08E         	movff	_numBats,?_printf+2
  3938  0008EC  0100               	movlb	0	; () banked
  3939  0008EE  6B8F               	clrf	(?_printf+3)& (0+255),b
  3940  0008F0  EC59  F00C         	call	_printf	;wreg free
  3941  0008F4                     l7489:
  3942  0008F4  0E04               	movlw	4
  3943  0008F6  0100               	movlb	0	; () banked
  3944  0008F8  19FA               	xorwf	_screenMode& (0+255),w,b
  3945  0008FA  A4D8               	btfss	status,2,c
  3946  0008FC  D01B               	goto	l7497
  3947  0008FE  D7E0               	goto	l7483
  3948  000900                     l7491:
  3949                           
  3950                           ; BSR set to: 0
  3951                           ;main.c: 407: lcdInst(0b10000000);;
  3952  000900  0E80               	movlw	128
  3953  000902  ECDF  F01B         	call	_lcdInst
  3954                           
  3955                           ;main.c: 408: printf("# OF C          ");
  3956  000906  0EAA               	movlw	low STR_11
  3957  000908  0100               	movlb	0	; () banked
  3958  00090A  6F8C               	movwf	printf@f& (0+255),b
  3959  00090C  0EFE               	movlw	high STR_11
  3960  00090E  0100               	movlb	0	; () banked
  3961  000910  6F8D               	movwf	(printf@f+1)& (0+255),b
  3962  000912  EC59  F00C         	call	_printf	;wreg free
  3963                           
  3964                           ;main.c: 409: lcdInst(0b11000000);;
  3965  000916  0EC0               	movlw	192
  3966  000918  ECDF  F01B         	call	_lcdInst
  3967                           
  3968                           ;main.c: 410: printf("BATTERIES: %02d   ", numC);
  3969  00091C  0E75               	movlw	low STR_10
  3970  00091E  0100               	movlb	0	; () banked
  3971  000920  6F8C               	movwf	printf@f& (0+255),b
  3972  000922  0EFE               	movlw	high STR_10
  3973  000924  0100               	movlb	0	; () banked
  3974  000926  6F8D               	movwf	(printf@f+1)& (0+255),b
  3975  000928  C0E9  F08E         	movff	_numC,?_printf+2
  3976  00092C  0100               	movlb	0	; () banked
  3977  00092E  6B8F               	clrf	(?_printf+3)& (0+255),b
  3978  000930  EC59  F00C         	call	_printf	;wreg free
  3979  000934                     l7497:
  3980  000934  0E05               	movlw	5
  3981  000936  0100               	movlb	0	; () banked
  3982  000938  19FA               	xorwf	_screenMode& (0+255),w,b
  3983  00093A  A4D8               	btfss	status,2,c
  3984  00093C  D01B               	goto	l7505
  3985  00093E  D7E0               	goto	l7491
  3986  000940                     l7499:
  3987                           
  3988                           ; BSR set to: 0
  3989                           ;main.c: 413: lcdInst(0b10000000);;
  3990  000940  0E80               	movlw	128
  3991  000942  ECDF  F01B         	call	_lcdInst
  3992                           
  3993                           ;main.c: 414: printf("# OF 9V         ");
  3994  000946  0ECC               	movlw	low STR_13
  3995  000948  0100               	movlb	0	; () banked
  3996  00094A  6F8C               	movwf	printf@f& (0+255),b
  3997  00094C  0EFE               	movlw	high STR_13
  3998  00094E  0100               	movlb	0	; () banked
  3999  000950  6F8D               	movwf	(printf@f+1)& (0+255),b
  4000  000952  EC59  F00C         	call	_printf	;wreg free
  4001                           
  4002                           ;main.c: 415: lcdInst(0b11000000);;
  4003  000956  0EC0               	movlw	192
  4004  000958  ECDF  F01B         	call	_lcdInst
  4005                           
  4006                           ;main.c: 416: printf("BATTERIES: %02d     ", num9V);
  4007  00095C  0E4C               	movlw	low STR_14
  4008  00095E  0100               	movlb	0	; () banked
  4009  000960  6F8C               	movwf	printf@f& (0+255),b
  4010  000962  0EFE               	movlw	high STR_14
  4011  000964  0100               	movlb	0	; () banked
  4012  000966  6F8D               	movwf	(printf@f+1)& (0+255),b
  4013  000968  C0E6  F08E         	movff	_num9V,?_printf+2
  4014  00096C  0100               	movlb	0	; () banked
  4015  00096E  6B8F               	clrf	(?_printf+3)& (0+255),b
  4016  000970  EC59  F00C         	call	_printf	;wreg free
  4017  000974                     l7505:
  4018  000974  0E06               	movlw	6
  4019  000976  0100               	movlb	0	; () banked
  4020  000978  19FA               	xorwf	_screenMode& (0+255),w,b
  4021  00097A  A4D8               	btfss	status,2,c
  4022  00097C  D01B               	goto	l7513
  4023  00097E  D7E0               	goto	l7499
  4024  000980                     l7507:
  4025                           
  4026                           ; BSR set to: 0
  4027                           ;main.c: 419: lcdInst(0b10000000);;
  4028  000980  0E80               	movlw	128
  4029  000982  ECDF  F01B         	call	_lcdInst
  4030                           
  4031                           ;main.c: 420: printf("# OF AA         ");
  4032  000986  0EBB               	movlw	low STR_15
  4033  000988  0100               	movlb	0	; () banked
  4034  00098A  6F8C               	movwf	printf@f& (0+255),b
  4035  00098C  0EFE               	movlw	high STR_15
  4036  00098E  0100               	movlb	0	; () banked
  4037  000990  6F8D               	movwf	(printf@f+1)& (0+255),b
  4038  000992  EC59  F00C         	call	_printf	;wreg free
  4039                           
  4040                           ;main.c: 421: lcdInst(0b11000000);;
  4041  000996  0EC0               	movlw	192
  4042  000998  ECDF  F01B         	call	_lcdInst
  4043                           
  4044                           ;main.c: 422: printf("BATTERIES: %02d     ", numAA);
  4045  00099C  0E4C               	movlw	low STR_14
  4046  00099E  0100               	movlb	0	; () banked
  4047  0009A0  6F8C               	movwf	printf@f& (0+255),b
  4048  0009A2  0EFE               	movlw	high STR_14
  4049  0009A4  0100               	movlb	0	; () banked
  4050  0009A6  6F8D               	movwf	(printf@f+1)& (0+255),b
  4051  0009A8  C0E7  F08E         	movff	_numAA,?_printf+2
  4052  0009AC  0100               	movlb	0	; () banked
  4053  0009AE  6B8F               	clrf	(?_printf+3)& (0+255),b
  4054  0009B0  EC59  F00C         	call	_printf	;wreg free
  4055  0009B4                     l7513:
  4056  0009B4  0E07               	movlw	7
  4057  0009B6  0100               	movlb	0	; () banked
  4058  0009B8  19FA               	xorwf	_screenMode& (0+255),w,b
  4059  0009BA  A4D8               	btfss	status,2,c
  4060  0009BC  D01B               	goto	l7521
  4061  0009BE  D7E0               	goto	l7507
  4062  0009C0                     l7515:
  4063                           
  4064                           ; BSR set to: 0
  4065                           ;main.c: 425: lcdInst(0b10000000);;
  4066  0009C0  0E80               	movlw	128
  4067  0009C2  ECDF  F01B         	call	_lcdInst
  4068                           
  4069                           ;main.c: 426: printf("# OF DRAINED    ");
  4070  0009C6  0E21               	movlw	low STR_17
  4071  0009C8  0100               	movlb	0	; () banked
  4072  0009CA  6F8C               	movwf	printf@f& (0+255),b
  4073  0009CC  0EFF               	movlw	high STR_17
  4074  0009CE  0100               	movlb	0	; () banked
  4075  0009D0  6F8D               	movwf	(printf@f+1)& (0+255),b
  4076  0009D2  EC59  F00C         	call	_printf	;wreg free
  4077                           
  4078                           ;main.c: 427: lcdInst(0b11000000);;
  4079  0009D6  0EC0               	movlw	192
  4080  0009D8  ECDF  F01B         	call	_lcdInst
  4081                           
  4082                           ;main.c: 428: printf("BATTERIES: %02d     ", numDrain);
  4083  0009DC  0E4C               	movlw	low STR_14
  4084  0009DE  0100               	movlb	0	; () banked
  4085  0009E0  6F8C               	movwf	printf@f& (0+255),b
  4086  0009E2  0EFE               	movlw	high STR_14
  4087  0009E4  0100               	movlb	0	; () banked
  4088  0009E6  6F8D               	movwf	(printf@f+1)& (0+255),b
  4089  0009E8  C0EA  F08E         	movff	_numDrain,?_printf+2
  4090  0009EC  0100               	movlb	0	; () banked
  4091  0009EE  6B8F               	clrf	(?_printf+3)& (0+255),b
  4092  0009F0  EC59  F00C         	call	_printf	;wreg free
  4093  0009F4                     l7521:
  4094  0009F4  0E08               	movlw	8
  4095  0009F6  0100               	movlb	0	; () banked
  4096  0009F8  19FA               	xorwf	_screenMode& (0+255),w,b
  4097  0009FA  A4D8               	btfss	status,2,c
  4098  0009FC  D06F               	goto	l7561
  4099  0009FE  D7E0               	goto	l7515
  4100  000A00                     l7523:
  4101                           
  4102                           ; BSR set to: 0
  4103                           ;main.c: 431: lcdInst(0b10000000);;
  4104  000A00  0E80               	movlw	128
  4105  000A02  ECDF  F01B         	call	_lcdInst
  4106                           
  4107                           ;main.c: 432: printf("LAST RUN:       ");
  4108  000A06  0EDD               	movlw	low STR_19
  4109  000A08  0100               	movlb	0	; () banked
  4110  000A0A  6F8C               	movwf	printf@f& (0+255),b
  4111  000A0C  0EFE               	movlw	high STR_19
  4112  000A0E  0100               	movlb	0	; () banked
  4113  000A10  6F8D               	movwf	(printf@f+1)& (0+255),b
  4114  000A12  EC59  F00C         	call	_printf	;wreg free
  4115                           
  4116                           ;main.c: 433: lcdInst(0b11000000);;
  4117  000A16  0EC0               	movlw	192
  4118  000A18  ECDF  F01B         	call	_lcdInst
  4119                           
  4120                           ;main.c: 434: printf("%02x/%02x/%02x        ", lastRunRTC[6],lastRunRTC[5],lastRunRTC[4]
      +                          );
  4121  000A1C  0EC3               	movlw	low STR_20
  4122  000A1E  0100               	movlb	0	; () banked
  4123  000A20  6F8C               	movwf	printf@f& (0+255),b
  4124  000A22  0EFD               	movlw	high STR_20
  4125  000A24  0100               	movlb	0	; () banked
  4126  000A26  6F8D               	movwf	(printf@f+1)& (0+255),b
  4127  000A28  C0CE  F08E         	movff	_lastRunRTC+6,?_printf+2
  4128  000A2C  0100               	movlb	0	; () banked
  4129  000A2E  6B8F               	clrf	(?_printf+3)& (0+255),b
  4130  000A30  C0CD  F090         	movff	_lastRunRTC+5,?_printf+4
  4131  000A34  0100               	movlb	0	; () banked
  4132  000A36  6B91               	clrf	(?_printf+5)& (0+255),b
  4133  000A38  C0CC  F092         	movff	_lastRunRTC+4,?_printf+6
  4134  000A3C  0100               	movlb	0	; () banked
  4135  000A3E  6B93               	clrf	(?_printf+7)& (0+255),b
  4136  000A40  EC59  F00C         	call	_printf	;wreg free
  4137                           
  4138                           ;main.c: 435: for(unsigned char i=0;i<200;i++){
  4139  000A44  0E00               	movlw	0
  4140  000A46  0100               	movlb	0	; () banked
  4141  000A48  6FC2               	movwf	main@i_791& (0+255),b
  4142  000A4A                     l7531:
  4143                           
  4144                           ; BSR set to: 0
  4145  000A4A  0EC7               	movlw	199
  4146  000A4C  0100               	movlb	0	; () banked
  4147  000A4E  65C2               	cpfsgt	main@i_791& (0+255),b
  4148  000A50  D001               	goto	l7535
  4149  000A52  D011               	goto	l7543
  4150  000A54                     l7535:
  4151                           
  4152                           ; BSR set to: 0
  4153                           ;main.c: 436: if (screenMode != 9)
  4154  000A54  0E09               	movlw	9
  4155  000A56  0100               	movlb	0	; () banked
  4156  000A58  19FA               	xorwf	_screenMode& (0+255),w,b
  4157  000A5A  A4D8               	btfss	status,2,c
  4158  000A5C  D00C               	goto	l7543
  4159                           
  4160                           ; BSR set to: 0
  4161                           ;main.c: 438: _delay((unsigned long)((10)*(10000000/4000.0)));
  4162                           
  4163                           ; BSR set to: 0
  4164                           
  4165                           ; BSR set to: 0
  4166                           ;main.c: 437: break;
  4167  000A5E  0E21               	movlw	33
  4168  000A60  0100               	movlb	0	; () banked
  4169  000A62  6FBD               	movwf	??_main& (0+255),b
  4170  000A64  0E76               	movlw	118
  4171  000A66                     u7907:
  4172  000A66  2EE8               	decfsz	wreg,f,c
  4173  000A68  D7FE               	bra	u7907
  4174  000A6A  2FBD               	decfsz	??_main& (0+255),f,b
  4175  000A6C  D7FC               	bra	u7907
  4176  000A6E  F000               	nop	
  4177  000A70  0100               	movlb	0	; () banked
  4178  000A72  2BC2               	incf	main@i_791& (0+255),f,b
  4179  000A74  D7EA               	goto	l7531
  4180  000A76                     l7543:
  4181                           
  4182                           ; BSR set to: 0
  4183                           ;main.c: 439: }
  4184                           ;main.c: 440: lcdInst(0b10000000);;
  4185  000A76  0E80               	movlw	128
  4186  000A78  ECDF  F01B         	call	_lcdInst
  4187                           
  4188                           ;main.c: 441: lcdInst(0b11000000);;
  4189  000A7C  0EC0               	movlw	192
  4190  000A7E  ECDF  F01B         	call	_lcdInst
  4191                           
  4192                           ;main.c: 442: printf("%02x:%02x:%02x        ", lastRunRTC[2],lastRunRTC[1],lastRunRTC[0]
      +                          );
  4193  000A82  0EDA               	movlw	low STR_21
  4194  000A84  0100               	movlb	0	; () banked
  4195  000A86  6F8C               	movwf	printf@f& (0+255),b
  4196  000A88  0EFD               	movlw	high STR_21
  4197  000A8A  0100               	movlb	0	; () banked
  4198  000A8C  6F8D               	movwf	(printf@f+1)& (0+255),b
  4199  000A8E  C0CA  F08E         	movff	_lastRunRTC+2,?_printf+2
  4200  000A92  0100               	movlb	0	; () banked
  4201  000A94  6B8F               	clrf	(?_printf+3)& (0+255),b
  4202  000A96  C0C9  F090         	movff	_lastRunRTC+1,?_printf+4
  4203  000A9A  0100               	movlb	0	; () banked
  4204  000A9C  6B91               	clrf	(?_printf+5)& (0+255),b
  4205  000A9E  C0C8  F092         	movff	_lastRunRTC,?_printf+6
  4206  000AA2  0100               	movlb	0	; () banked
  4207  000AA4  6B93               	clrf	(?_printf+7)& (0+255),b
  4208  000AA6  EC59  F00C         	call	_printf	;wreg free
  4209                           
  4210                           ;main.c: 443: for(unsigned char i=0;i<200;i++){
  4211  000AAA  0E00               	movlw	0
  4212  000AAC  0100               	movlb	0	; () banked
  4213  000AAE  6FC3               	movwf	main@i_793& (0+255),b
  4214  000AB0                     l7549:
  4215                           
  4216                           ; BSR set to: 0
  4217  000AB0  0EC7               	movlw	199
  4218  000AB2  0100               	movlb	0	; () banked
  4219  000AB4  65C3               	cpfsgt	main@i_793& (0+255),b
  4220  000AB6  D001               	goto	l7553
  4221  000AB8  D011               	goto	l7561
  4222  000ABA                     l7553:
  4223                           
  4224                           ; BSR set to: 0
  4225                           ;main.c: 444: if (screenMode != 9)
  4226  000ABA  0E09               	movlw	9
  4227  000ABC  0100               	movlb	0	; () banked
  4228  000ABE  19FA               	xorwf	_screenMode& (0+255),w,b
  4229  000AC0  A4D8               	btfss	status,2,c
  4230  000AC2  D00C               	goto	l7561
  4231                           
  4232                           ; BSR set to: 0
  4233                           ;main.c: 446: _delay((unsigned long)((10)*(10000000/4000.0)));
  4234                           
  4235                           ; BSR set to: 0
  4236                           
  4237                           ; BSR set to: 0
  4238                           ;main.c: 445: break;
  4239  000AC4  0E21               	movlw	33
  4240  000AC6  0100               	movlb	0	; () banked
  4241  000AC8  6FBD               	movwf	??_main& (0+255),b
  4242  000ACA  0E76               	movlw	118
  4243  000ACC                     u7917:
  4244  000ACC  2EE8               	decfsz	wreg,f,c
  4245  000ACE  D7FE               	bra	u7917
  4246  000AD0  2FBD               	decfsz	??_main& (0+255),f,b
  4247  000AD2  D7FC               	bra	u7917
  4248  000AD4  F000               	nop	
  4249  000AD6  0100               	movlb	0	; () banked
  4250  000AD8  2BC3               	incf	main@i_793& (0+255),f,b
  4251  000ADA  D7EA               	goto	l7549
  4252  000ADC                     l7561:
  4253                           
  4254                           ; BSR set to: 0
  4255  000ADC  0E09               	movlw	9
  4256  000ADE  0100               	movlb	0	; () banked
  4257  000AE0  19FA               	xorwf	_screenMode& (0+255),w,b
  4258  000AE2  A4D8               	btfss	status,2,c
  4259  000AE4  D021               	goto	l7569
  4260  000AE6  D78C               	goto	l7523
  4261  000AE8                     l7563:
  4262                           
  4263                           ; BSR set to: 0
  4264                           ;main.c: 450: lcdInst(0b10000000);;
  4265  000AE8  0E80               	movlw	128
  4266  000AEA  ECDF  F01B         	call	_lcdInst
  4267                           
  4268                           ;main.c: 451: printf("PERMANENT LOG A:");
  4269  000AEE  0E98               	movlw	low STR_22
  4270  000AF0  0100               	movlb	0	; () banked
  4271  000AF2  6F8C               	movwf	printf@f& (0+255),b
  4272  000AF4  0EFF               	movlw	high STR_22
  4273  000AF6  0100               	movlb	0	; () banked
  4274  000AF8  6F8D               	movwf	(printf@f+1)& (0+255),b
  4275  000AFA  EC59  F00C         	call	_printf	;wreg free
  4276                           
  4277                           ;main.c: 452: lcdInst(0b11000000);;
  4278  000AFE  0EC0               	movlw	192
  4279  000B00  ECDF  F01B         	call	_lcdInst
  4280                           
  4281                           ;main.c: 453: printf("                ");
  4282  000B04  0E99               	movlw	low STR_23
  4283  000B06  0100               	movlb	0	; () banked
  4284  000B08  6F8C               	movwf	printf@f& (0+255),b
  4285  000B0A  0EFE               	movlw	high STR_23
  4286  000B0C  0100               	movlb	0	; () banked
  4287  000B0E  6F8D               	movwf	(printf@f+1)& (0+255),b
  4288  000B10  EC59  F00C         	call	_printf	;wreg free
  4289                           
  4290                           ;main.c: 454: show_log(1, 10);
  4291  000B14  0E00               	movlw	0
  4292  000B16  0100               	movlb	0	; () banked
  4293  000B18  6FA3               	movwf	(show_log@log_address+1)& (0+255),b
  4294  000B1A  0E01               	movlw	1
  4295  000B1C  6FA2               	movwf	show_log@log_address& (0+255),b
  4296  000B1E  0E0A               	movlw	10
  4297  000B20  0100               	movlb	0	; () banked
  4298  000B22  6FA4               	movwf	show_log@currScreen& (0+255),b
  4299  000B24  EC33  F00E         	call	_show_log	;wreg free
  4300  000B28                     l7569:
  4301  000B28  0E0A               	movlw	10
  4302  000B2A  0100               	movlb	0	; () banked
  4303  000B2C  19FA               	xorwf	_screenMode& (0+255),w,b
  4304  000B2E  A4D8               	btfss	status,2,c
  4305  000B30  D021               	goto	l7577
  4306  000B32  D7DA               	goto	l7563
  4307  000B34                     l7571:
  4308                           
  4309                           ; BSR set to: 0
  4310                           ;main.c: 457: lcdInst(0b10000000);;
  4311  000B34  0E80               	movlw	128
  4312  000B36  ECDF  F01B         	call	_lcdInst
  4313                           
  4314                           ;main.c: 458: printf("PERMANENT LOG B:");
  4315  000B3A  0EA9               	movlw	low STR_24
  4316  000B3C  0100               	movlb	0	; () banked
  4317  000B3E  6F8C               	movwf	printf@f& (0+255),b
  4318  000B40  0EFF               	movlw	high STR_24
  4319  000B42  0100               	movlb	0	; () banked
  4320  000B44  6F8D               	movwf	(printf@f+1)& (0+255),b
  4321  000B46  EC59  F00C         	call	_printf	;wreg free
  4322                           
  4323                           ;main.c: 459: lcdInst(0b11000000);;
  4324  000B4A  0EC0               	movlw	192
  4325  000B4C  ECDF  F01B         	call	_lcdInst
  4326                           
  4327                           ;main.c: 460: printf("                ");
  4328  000B50  0E99               	movlw	low STR_23
  4329  000B52  0100               	movlb	0	; () banked
  4330  000B54  6F8C               	movwf	printf@f& (0+255),b
  4331  000B56  0EFE               	movlw	high STR_23
  4332  000B58  0100               	movlb	0	; () banked
  4333  000B5A  6F8D               	movwf	(printf@f+1)& (0+255),b
  4334  000B5C  EC59  F00C         	call	_printf	;wreg free
  4335                           
  4336                           ;main.c: 461: show_log(97, 11);
  4337  000B60  0E00               	movlw	0
  4338  000B62  0100               	movlb	0	; () banked
  4339  000B64  6FA3               	movwf	(show_log@log_address+1)& (0+255),b
  4340  000B66  0E61               	movlw	97
  4341  000B68  6FA2               	movwf	show_log@log_address& (0+255),b
  4342  000B6A  0E0B               	movlw	11
  4343  000B6C  0100               	movlb	0	; () banked
  4344  000B6E  6FA4               	movwf	show_log@currScreen& (0+255),b
  4345  000B70  EC33  F00E         	call	_show_log	;wreg free
  4346  000B74                     l7577:
  4347  000B74  0E0B               	movlw	11
  4348  000B76  0100               	movlb	0	; () banked
  4349  000B78  19FA               	xorwf	_screenMode& (0+255),w,b
  4350  000B7A  A4D8               	btfss	status,2,c
  4351  000B7C  D021               	goto	l7585
  4352  000B7E  D7DA               	goto	l7571
  4353  000B80                     l7579:
  4354                           
  4355                           ; BSR set to: 0
  4356                           ;main.c: 464: lcdInst(0b10000000);;
  4357  000B80  0E80               	movlw	128
  4358  000B82  ECDF  F01B         	call	_lcdInst
  4359                           
  4360                           ;main.c: 465: printf("PERMANENT LOG C:");
  4361  000B86  0EBA               	movlw	low STR_26
  4362  000B88  0100               	movlb	0	; () banked
  4363  000B8A  6F8C               	movwf	printf@f& (0+255),b
  4364  000B8C  0EFF               	movlw	high STR_26
  4365  000B8E  0100               	movlb	0	; () banked
  4366  000B90  6F8D               	movwf	(printf@f+1)& (0+255),b
  4367  000B92  EC59  F00C         	call	_printf	;wreg free
  4368                           
  4369                           ;main.c: 466: lcdInst(0b11000000);;
  4370  000B96  0EC0               	movlw	192
  4371  000B98  ECDF  F01B         	call	_lcdInst
  4372                           
  4373                           ;main.c: 467: printf("                ");
  4374  000B9C  0E99               	movlw	low STR_23
  4375  000B9E  0100               	movlb	0	; () banked
  4376  000BA0  6F8C               	movwf	printf@f& (0+255),b
  4377  000BA2  0EFE               	movlw	high STR_23
  4378  000BA4  0100               	movlb	0	; () banked
  4379  000BA6  6F8D               	movwf	(printf@f+1)& (0+255),b
  4380  000BA8  EC59  F00C         	call	_printf	;wreg free
  4381                           
  4382                           ;main.c: 468: show_log(193, 12);
  4383  000BAC  0E00               	movlw	0
  4384  000BAE  0100               	movlb	0	; () banked
  4385  000BB0  6FA3               	movwf	(show_log@log_address+1)& (0+255),b
  4386  000BB2  0EC1               	movlw	193
  4387  000BB4  6FA2               	movwf	show_log@log_address& (0+255),b
  4388  000BB6  0E0C               	movlw	12
  4389  000BB8  0100               	movlb	0	; () banked
  4390  000BBA  6FA4               	movwf	show_log@currScreen& (0+255),b
  4391  000BBC  EC33  F00E         	call	_show_log	;wreg free
  4392  000BC0                     l7585:
  4393  000BC0  0E0C               	movlw	12
  4394  000BC2  0100               	movlb	0	; () banked
  4395  000BC4  19FA               	xorwf	_screenMode& (0+255),w,b
  4396  000BC6  A4D8               	btfss	status,2,c
  4397  000BC8  D021               	goto	l7593
  4398  000BCA  D7DA               	goto	l7579
  4399  000BCC                     l7587:
  4400                           
  4401                           ; BSR set to: 0
  4402                           ;main.c: 471: lcdInst(0b10000000);;
  4403  000BCC  0E80               	movlw	128
  4404  000BCE  ECDF  F01B         	call	_lcdInst
  4405                           
  4406                           ;main.c: 472: printf("PERMANENT LOG D:");
  4407  000BD2  0ECB               	movlw	low STR_28
  4408  000BD4  0100               	movlb	0	; () banked
  4409  000BD6  6F8C               	movwf	printf@f& (0+255),b
  4410  000BD8  0EFF               	movlw	high STR_28
  4411  000BDA  0100               	movlb	0	; () banked
  4412  000BDC  6F8D               	movwf	(printf@f+1)& (0+255),b
  4413  000BDE  EC59  F00C         	call	_printf	;wreg free
  4414                           
  4415                           ;main.c: 473: lcdInst(0b11000000);;
  4416  000BE2  0EC0               	movlw	192
  4417  000BE4  ECDF  F01B         	call	_lcdInst
  4418                           
  4419                           ;main.c: 474: printf("                ");
  4420  000BE8  0E99               	movlw	low STR_23
  4421  000BEA  0100               	movlb	0	; () banked
  4422  000BEC  6F8C               	movwf	printf@f& (0+255),b
  4423  000BEE  0EFE               	movlw	high STR_23
  4424  000BF0  0100               	movlb	0	; () banked
  4425  000BF2  6F8D               	movwf	(printf@f+1)& (0+255),b
  4426  000BF4  EC59  F00C         	call	_printf	;wreg free
  4427                           
  4428                           ;main.c: 475: show_log(289, 13);
  4429  000BF8  0E01               	movlw	1
  4430  000BFA  0100               	movlb	0	; () banked
  4431  000BFC  6FA3               	movwf	(show_log@log_address+1)& (0+255),b
  4432  000BFE  0E21               	movlw	33
  4433  000C00  6FA2               	movwf	show_log@log_address& (0+255),b
  4434  000C02  0E0D               	movlw	13
  4435  000C04  0100               	movlb	0	; () banked
  4436  000C06  6FA4               	movwf	show_log@currScreen& (0+255),b
  4437  000C08  EC33  F00E         	call	_show_log	;wreg free
  4438  000C0C                     l7593:
  4439  000C0C  0E0D               	movlw	13
  4440  000C0E  0100               	movlb	0	; () banked
  4441  000C10  19FA               	xorwf	_screenMode& (0+255),w,b
  4442  000C12  A4D8               	btfss	status,2,c
  4443  000C14  D02B               	goto	l7607
  4444  000C16  D7DA               	goto	l7587
  4445  000C18                     l7595:
  4446                           
  4447                           ; BSR set to: 0
  4448                           ;main.c: 478: lcdInst(0b10000000);;
  4449  000C18  0E80               	movlw	128
  4450  000C1A  ECDF  F01B         	call	_lcdInst
  4451                           
  4452                           ;main.c: 479: printf("PRESS * TO      ");
  4453  000C1E  0EFF               	movlw	low STR_30
  4454  000C20  0100               	movlb	0	; () banked
  4455  000C22  6F8C               	movwf	printf@f& (0+255),b
  4456  000C24  0EFE               	movlw	high STR_30
  4457  000C26  0100               	movlb	0	; () banked
  4458  000C28  6F8D               	movwf	(printf@f+1)& (0+255),b
  4459  000C2A  EC59  F00C         	call	_printf	;wreg free
  4460                           
  4461                           ;main.c: 480: lcdInst(0b11000000);;
  4462  000C2E  0EC0               	movlw	192
  4463  000C30  ECDF  F01B         	call	_lcdInst
  4464                           
  4465                           ;main.c: 481: printf("SEND DATA TO PC ");
  4466  000C34  0E76               	movlw	low STR_31
  4467  000C36  0100               	movlb	0	; () banked
  4468  000C38  6F8C               	movwf	printf@f& (0+255),b
  4469  000C3A  0EFF               	movlw	high STR_31
  4470  000C3C  0100               	movlb	0	; () banked
  4471  000C3E  6F8D               	movwf	(printf@f+1)& (0+255),b
  4472  000C40  EC59  F00C         	call	_printf	;wreg free
  4473                           
  4474                           ;main.c: 482: unsigned char keypress = (PORTB & 0xF0) >> 4;
  4475  000C44  3881               	swapf	3969,w,c	;volatile
  4476  000C46  0B0F               	andlw	15
  4477  000C48  0B0F               	andlw	15
  4478  000C4A  0100               	movlb	0	; () banked
  4479  000C4C  6FBF               	movwf	main@keypress& (0+255),b
  4480                           
  4481                           ; BSR set to: 0
  4482                           ;main.c: 483: if (keys[keypress] == '*')
  4483  000C4E  0100               	movlb	0	; () banked
  4484  000C50  51BF               	movf	main@keypress& (0+255),w,b
  4485  000C52  0D01               	mullw	1
  4486  000C54  0E87               	movlw	low _keys
  4487  000C56  24F3               	addwf	prodl,w,c
  4488  000C58  6EF6               	movwf	tblptrl,c
  4489  000C5A  0EFD               	movlw	high _keys
  4490  000C5C  20F4               	addwfc	prodh,w,c
  4491  000C5E  6EF7               	movwf	tblptrh,c
  4492  000C60                     	if	0	;There are less than 3 active tblptr bytes
  4493  000C60                     	endif
  4494  000C60  0008               	tblrd		*
  4495  000C62  50F5               	movf	tablat,w,c
  4496  000C64  0A2A               	xorlw	42
  4497  000C66  B4D8               	btfsc	status,2,c
  4498                           
  4499                           ; BSR set to: 0
  4500                           ;main.c: 484: logPC();
  4501  000C68  ECAA  F006         	call	_logPC	;wreg free
  4502  000C6C                     l7607:
  4503  000C6C  0E0E               	movlw	14
  4504  000C6E  0100               	movlb	0	; () banked
  4505  000C70  19FA               	xorwf	_screenMode& (0+255),w,b
  4506  000C72  A4D8               	btfss	status,2,c
  4507  000C74  D068               	goto	l7629
  4508  000C76  D7D0               	goto	l7595
  4509  000C78                     l7609:
  4510                           
  4511                           ; BSR set to: 0
  4512                           ;main.c: 488: I2C_Master_Start();
  4513  000C78  EC13  F01C         	call	_I2C_Master_Start	;wreg free
  4514                           
  4515                           ;main.c: 489: I2C_Master_Write(0b11010000);
  4516  000C7C  0E00               	movlw	0
  4517  000C7E  0100               	movlb	0	; () banked
  4518  000C80  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  4519  000C82  0ED0               	movlw	208
  4520  000C84  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  4521  000C86  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  4522                           
  4523                           ;main.c: 490: I2C_Master_Write(0x00);
  4524  000C8A  0E00               	movlw	0
  4525  000C8C  0100               	movlb	0	; () banked
  4526  000C8E  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  4527  000C90  0E00               	movlw	0
  4528  000C92  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  4529  000C94  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  4530                           
  4531                           ;main.c: 491: I2C_Master_Stop();
  4532  000C98  EC0F  F01C         	call	_I2C_Master_Stop	;wreg free
  4533                           
  4534                           ;main.c: 493: I2C_Master_Start();
  4535  000C9C  EC13  F01C         	call	_I2C_Master_Start	;wreg free
  4536                           
  4537                           ;main.c: 494: I2C_Master_Write(0b11010001);
  4538  000CA0  0E00               	movlw	0
  4539  000CA2  0100               	movlb	0	; () banked
  4540  000CA4  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  4541  000CA6  0ED1               	movlw	209
  4542  000CA8  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  4543  000CAA  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  4544                           
  4545                           ;main.c: 495: for(unsigned char i=0;i<0x06;i++){
  4546  000CAE  0E00               	movlw	0
  4547  000CB0  0100               	movlb	0	; () banked
  4548  000CB2  6FC4               	movwf	main@i_808& (0+255),b
  4549  000CB4                     l7613:
  4550                           
  4551                           ; BSR set to: 0
  4552  000CB4  0E05               	movlw	5
  4553  000CB6  0100               	movlb	0	; () banked
  4554  000CB8  65C4               	cpfsgt	main@i_808& (0+255),b
  4555  000CBA  D001               	goto	l7617
  4556  000CBC  D010               	goto	l7623
  4557  000CBE                     l7617:
  4558                           
  4559                           ; BSR set to: 0
  4560                           ;main.c: 496: realTime[i] = I2C_Master_Read(1);
  4561  000CBE  0100               	movlb	0	; () banked
  4562  000CC0  51C4               	movf	main@i_808& (0+255),w,b
  4563  000CC2  0D01               	mullw	1
  4564  000CC4  0E48               	movlw	low _realTime
  4565  000CC6  24F3               	addwf	prodl,w,c
  4566  000CC8  6ED9               	movwf	fsr2l,c
  4567  000CCA  0E00               	movlw	high _realTime
  4568  000CCC  20F4               	addwfc	prodh,w,c
  4569  000CCE  6EDA               	movwf	fsr2h,c
  4570  000CD0  0E01               	movlw	1
  4571  000CD2  ECE7  F01A         	call	_I2C_Master_Read
  4572  000CD6  6EDF               	movwf	indf2,c
  4573  000CD8  0100               	movlb	0	; () banked
  4574  000CDA  2BC4               	incf	main@i_808& (0+255),f,b
  4575  000CDC  D7EB               	goto	l7613
  4576  000CDE                     l7623:
  4577                           
  4578                           ; BSR set to: 0
  4579                           ;main.c: 497: }
  4580                           ;main.c: 498: realTime[6] = I2C_Master_Read(0);
  4581  000CDE  0E00               	movlw	0
  4582  000CE0  ECE7  F01A         	call	_I2C_Master_Read
  4583  000CE4  6E4E               	movwf	_realTime+6,c
  4584                           
  4585                           ;main.c: 499: I2C_Master_Stop();
  4586  000CE6  EC0F  F01C         	call	_I2C_Master_Stop	;wreg free
  4587                           
  4588                           ;main.c: 500: lcdInst(0b10000000);;
  4589  000CEA  0E80               	movlw	128
  4590  000CEC  ECDF  F01B         	call	_lcdInst
  4591                           
  4592                           ;main.c: 501: printf("DATE: %02x/%02x/%02x  ", realTime[6],realTime[5],realTime[4]);
  4593  000CF0  0EF1               	movlw	low STR_32
  4594  000CF2  0100               	movlb	0	; () banked
  4595  000CF4  6F8C               	movwf	printf@f& (0+255),b
  4596  000CF6  0EFD               	movlw	high STR_32
  4597  000CF8  0100               	movlb	0	; () banked
  4598  000CFA  6F8D               	movwf	(printf@f+1)& (0+255),b
  4599  000CFC  C04E  F08E         	movff	_realTime+6,?_printf+2
  4600  000D00  0100               	movlb	0	; () banked
  4601  000D02  6B8F               	clrf	(?_printf+3)& (0+255),b
  4602  000D04  C04D  F090         	movff	_realTime+5,?_printf+4
  4603  000D08  0100               	movlb	0	; () banked
  4604  000D0A  6B91               	clrf	(?_printf+5)& (0+255),b
  4605  000D0C  C04C  F092         	movff	_realTime+4,?_printf+6
  4606  000D10  0100               	movlb	0	; () banked
  4607  000D12  6B93               	clrf	(?_printf+7)& (0+255),b
  4608  000D14  EC59  F00C         	call	_printf	;wreg free
  4609                           
  4610                           ;main.c: 502: lcdInst(0b11000000);;
  4611  000D18  0EC0               	movlw	192
  4612  000D1A  ECDF  F01B         	call	_lcdInst
  4613                           
  4614                           ;main.c: 503: printf("TIME: %02x:%02x:%02x  ", realTime[2],realTime[1],realTime[0]);
  4615  000D1E  0E08               	movlw	low STR_33
  4616  000D20  0100               	movlb	0	; () banked
  4617  000D22  6F8C               	movwf	printf@f& (0+255),b
  4618  000D24  0EFE               	movlw	high STR_33
  4619  000D26  0100               	movlb	0	; () banked
  4620  000D28  6F8D               	movwf	(printf@f+1)& (0+255),b
  4621  000D2A  C04A  F08E         	movff	_realTime+2,?_printf+2
  4622  000D2E  0100               	movlb	0	; () banked
  4623  000D30  6B8F               	clrf	(?_printf+3)& (0+255),b
  4624  000D32  C049  F090         	movff	_realTime+1,?_printf+4
  4625  000D36  0100               	movlb	0	; () banked
  4626  000D38  6B91               	clrf	(?_printf+5)& (0+255),b
  4627  000D3A  C048  F092         	movff	_realTime,?_printf+6
  4628  000D3E  0100               	movlb	0	; () banked
  4629  000D40  6B93               	clrf	(?_printf+7)& (0+255),b
  4630  000D42  EC59  F00C         	call	_printf	;wreg free
  4631  000D46                     l7629:
  4632  000D46  0E0F               	movlw	15
  4633  000D48  0100               	movlb	0	; () banked
  4634  000D4A  19FA               	xorwf	_screenMode& (0+255),w,b
  4635  000D4C  A4D8               	btfss	status,2,c
  4636  000D4E  EFA6  F000         	goto	l7129
  4637  000D52  D792               	goto	l7609
  4638  000D54                     __end_of_main:
  4639                           	opt stack 0
  4640                           tblptru	equ	0xFF8
  4641                           tblptrh	equ	0xFF7
  4642                           tblptrl	equ	0xFF6
  4643                           tablat	equ	0xFF5
  4644                           prodh	equ	0xFF4
  4645                           prodl	equ	0xFF3
  4646                           intcon	equ	0xFF2
  4647                           intcon2	equ	0xFF1
  4648                           intcon3	equ	0xFF0
  4649                           postinc0	equ	0xFEE
  4650                           wreg	equ	0xFE8
  4651                           postdec1	equ	0xFE5
  4652                           fsr1l	equ	0xFE1
  4653                           indf2	equ	0xFDF
  4654                           fsr2h	equ	0xFDA
  4655                           fsr2l	equ	0xFD9
  4656                           status	equ	0xFD8
  4657                           
  4658 ;; *************** function _wait_2ms *****************
  4659 ;; Defined at:
  4660 ;;		line 742 in file "../main.c"
  4661 ;; Parameters:    Size  Location     Type
  4662 ;;  x               2    0[BANK0 ] unsigned int 
  4663 ;; Auto vars:     Size  Location     Type
  4664 ;;		None
  4665 ;; Return value:  Size  Location     Type
  4666 ;;                  1    wreg      void 
  4667 ;; Registers used:
  4668 ;;		wreg, status,2, status,0
  4669 ;; Tracked objects:
  4670 ;;		On entry : 0/0
  4671 ;;		On exit  : 0/0
  4672 ;;		Unchanged: 0/0
  4673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4674 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4675 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4676 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4677 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4678 ;;Total ram usage:        2 bytes
  4679 ;; Hardware stack levels used:    1
  4680 ;; Hardware stack levels required when called:    5
  4681 ;; This function calls:
  4682 ;;		Nothing
  4683 ;; This function is called by:
  4684 ;;		_main
  4685 ;; This function uses a non-reentrant model
  4686 ;;
  4687                           
  4688                           	psect	text1
  4689  0036FE                     __ptext1:
  4690                           	opt stack 0
  4691  0036FE                     _wait_2ms:
  4692                           	opt stack 25
  4693                           
  4694                           ;main.c: 743: count_2ms = x;
  4695                           
  4696                           ; BSR set to: 0
  4697                           ;incstack = 0
  4698  0036FE  C080  F04F         	movff	wait_2ms@x,_count_2ms
  4699  003702  C081  F050         	movff	wait_2ms@x+1,_count_2ms+1
  4700  003706                     l6455:
  4701  003706  504F               	movf	_count_2ms,w,c
  4702  003708  1050               	iorwf	_count_2ms+1,w,c
  4703  00370A  B4D8               	btfsc	status,2,c
  4704  00370C  0012               	return	
  4705  00370E  0100               	movlb	0	; () banked
  4706  003710  05FA               	decf	_screenMode& (0+255),w,b
  4707  003712  A4D8               	btfss	status,2,c
  4708  003714  0012               	return	
  4709  003716  D7F7               	goto	l6455
  4710  003718                     __end_of_wait_2ms:
  4711                           	opt stack 0
  4712                           tblptru	equ	0xFF8
  4713                           tblptrh	equ	0xFF7
  4714                           tblptrl	equ	0xFF6
  4715                           tablat	equ	0xFF5
  4716                           prodh	equ	0xFF4
  4717                           prodl	equ	0xFF3
  4718                           intcon	equ	0xFF2
  4719                           intcon2	equ	0xFF1
  4720                           intcon3	equ	0xFF0
  4721                           postinc0	equ	0xFEE
  4722                           wreg	equ	0xFE8
  4723                           postdec1	equ	0xFE5
  4724                           fsr1l	equ	0xFE1
  4725                           indf2	equ	0xFDF
  4726                           fsr2h	equ	0xFDA
  4727                           fsr2l	equ	0xFD9
  4728                           status	equ	0xFD8
  4729                           
  4730 ;; *************** function _testBatteries *****************
  4731 ;; Defined at:
  4732 ;;		line 652 in file "../main.c"
  4733 ;; Parameters:    Size  Location     Type
  4734 ;;		None
  4735 ;; Auto vars:     Size  Location     Type
  4736 ;;  volt5           2   11[BANK0 ] unsigned int 
  4737 ;;  volt4           2    9[BANK0 ] unsigned int 
  4738 ;;  volt2           2    7[BANK0 ] unsigned int 
  4739 ;;  volt3           2    5[BANK0 ] unsigned int 
  4740 ;;  volt1           2    3[BANK0 ] unsigned int 
  4741 ;; Return value:  Size  Location     Type
  4742 ;;                  1    wreg      void 
  4743 ;; Registers used:
  4744 ;;		wreg, status,2, status,0, cstack
  4745 ;; Tracked objects:
  4746 ;;		On entry : 0/0
  4747 ;;		On exit  : 0/0
  4748 ;;		Unchanged: 0/0
  4749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4750 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4751 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4752 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4753 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4754 ;;Total ram usage:       12 bytes
  4755 ;; Hardware stack levels used:    1
  4756 ;; Hardware stack levels required when called:    6
  4757 ;; This function calls:
  4758 ;;		_readADC
  4759 ;; This function is called by:
  4760 ;;		_main
  4761 ;; This function uses a non-reentrant model
  4762 ;;
  4763                           
  4764                           	psect	text2
  4765  002BB4                     __ptext2:
  4766                           	opt stack 0
  4767  002BB4                     _testBatteries:
  4768                           	opt stack 24
  4769                           
  4770                           ;main.c: 672: readADC(1);
  4771                           
  4772                           ;incstack = 0
  4773  002BB4  0E01               	movlw	1
  4774  002BB6  EC8C  F01B         	call	_readADC
  4775                           
  4776                           ;main.c: 673: unsigned int volt1 = ADRES;
  4777  002BBA  CFC3 F083          	movff	4035,testBatteries@volt1	;volatile
  4778  002BBE  CFC4 F084          	movff	4036,testBatteries@volt1+1	;volatile
  4779                           
  4780                           ;main.c: 674: readADC(2);
  4781  002BC2  0E02               	movlw	2
  4782  002BC4  EC8C  F01B         	call	_readADC
  4783                           
  4784                           ;main.c: 675: unsigned int volt2 = ADRES;
  4785  002BC8  CFC3 F087          	movff	4035,testBatteries@volt2	;volatile
  4786  002BCC  CFC4 F088          	movff	4036,testBatteries@volt2+1	;volatile
  4787                           
  4788                           ;main.c: 676: readADC(3);
  4789  002BD0  0E03               	movlw	3
  4790  002BD2  EC8C  F01B         	call	_readADC
  4791                           
  4792                           ;main.c: 677: unsigned int volt3 = ADRES;
  4793  002BD6  CFC3 F085          	movff	4035,testBatteries@volt3	;volatile
  4794  002BDA  CFC4 F086          	movff	4036,testBatteries@volt3+1	;volatile
  4795                           
  4796                           ;main.c: 678: readADC(4);
  4797  002BDE  0E04               	movlw	4
  4798  002BE0  EC8C  F01B         	call	_readADC
  4799                           
  4800                           ;main.c: 679: unsigned int volt4 = ADRES;
  4801  002BE4  CFC3 F089          	movff	4035,testBatteries@volt4	;volatile
  4802  002BE8  CFC4 F08A          	movff	4036,testBatteries@volt4+1	;volatile
  4803                           
  4804                           ;main.c: 680: readADC(5);
  4805  002BEC  0E05               	movlw	5
  4806  002BEE  EC8C  F01B         	call	_readADC
  4807                           
  4808                           ;main.c: 681: unsigned int volt5 = ADRES;
  4809  002BF2  CFC3 F08B          	movff	4035,testBatteries@volt5	;volatile
  4810  002BF6  CFC4 F08C          	movff	4036,testBatteries@volt5+1	;volatile
  4811                           
  4812                           ;main.c: 688: if (volt1){
  4813  002BFA  0100               	movlb	0	; () banked
  4814  002BFC  5183               	movf	testBatteries@volt1& (0+255),w,b
  4815  002BFE  0100               	movlb	0	; () banked
  4816  002C00  1184               	iorwf	(testBatteries@volt1+1)& (0+255),w,b
  4817  002C02  B4D8               	btfsc	status,2,c
  4818  002C04  D00D               	goto	l6481
  4819                           
  4820                           ; BSR set to: 0
  4821                           ;main.c: 689: countC++;
  4822  002C06  0100               	movlb	0	; () banked
  4823  002C08  2BE1               	incf	_countC& (0+255),f,b
  4824                           
  4825                           ; BSR set to: 0
  4826                           ;main.c: 690: plat1Right = 512;
  4827  002C0A  0E02               	movlw	2
  4828  002C0C  0100               	movlb	0	; () banked
  4829  002C0E  6FD2               	movwf	(_plat1Right+1)& (0+255),b
  4830  002C10  0E00               	movlw	0
  4831  002C12  6FD1               	movwf	_plat1Right& (0+255),b
  4832                           
  4833                           ; BSR set to: 0
  4834                           ;main.c: 691: plat2Left = 512;
  4835  002C14  0E02               	movlw	2
  4836  002C16  0100               	movlb	0	; () banked
  4837  002C18  6FD4               	movwf	(_plat2Left+1)& (0+255),b
  4838  002C1A  0E00               	movlw	0
  4839  002C1C  6FD3               	movwf	_plat2Left& (0+255),b
  4840                           
  4841                           ; BSR set to: 0
  4842                           ;main.c: 692: return;
  4843  002C1E  0012               	return	
  4844  002C20                     l6481:
  4845                           
  4846                           ; BSR set to: 0
  4847                           ;main.c: 693: }
  4848                           ;main.c: 694: if (!(volt1 | volt2 | volt3 | volt4 | volt5)){
  4849  002C20  0100               	movlb	0	; () banked
  4850  002C22  5187               	movf	testBatteries@volt2& (0+255),w,b
  4851  002C24  0100               	movlb	0	; () banked
  4852  002C26  1183               	iorwf	testBatteries@volt1& (0+255),w,b
  4853  002C28  0100               	movlb	0	; () banked
  4854  002C2A  6F81               	movwf	??_testBatteries& (0+255),b
  4855  002C2C  0100               	movlb	0	; () banked
  4856  002C2E  5188               	movf	(testBatteries@volt2+1)& (0+255),w,b
  4857  002C30  0100               	movlb	0	; () banked
  4858  002C32  1184               	iorwf	(testBatteries@volt1+1)& (0+255),w,b
  4859  002C34  0100               	movlb	0	; () banked
  4860  002C36  6F82               	movwf	(??_testBatteries+1)& (0+255),b
  4861  002C38  0100               	movlb	0	; () banked
  4862  002C3A  5185               	movf	testBatteries@volt3& (0+255),w,b
  4863  002C3C  0100               	movlb	0	; () banked
  4864  002C3E  1381               	iorwf	??_testBatteries& (0+255),f,b
  4865  002C40  0100               	movlb	0	; () banked
  4866  002C42  5186               	movf	(testBatteries@volt3+1)& (0+255),w,b
  4867  002C44  0100               	movlb	0	; () banked
  4868  002C46  1382               	iorwf	(??_testBatteries+1)& (0+255),f,b
  4869  002C48  0100               	movlb	0	; () banked
  4870  002C4A  5189               	movf	testBatteries@volt4& (0+255),w,b
  4871  002C4C  0100               	movlb	0	; () banked
  4872  002C4E  1381               	iorwf	??_testBatteries& (0+255),f,b
  4873  002C50  0100               	movlb	0	; () banked
  4874  002C52  518A               	movf	(testBatteries@volt4+1)& (0+255),w,b
  4875  002C54  0100               	movlb	0	; () banked
  4876  002C56  1382               	iorwf	(??_testBatteries+1)& (0+255),f,b
  4877  002C58  0100               	movlb	0	; () banked
  4878  002C5A  518B               	movf	testBatteries@volt5& (0+255),w,b
  4879  002C5C  0100               	movlb	0	; () banked
  4880  002C5E  1381               	iorwf	??_testBatteries& (0+255),f,b
  4881  002C60  0100               	movlb	0	; () banked
  4882  002C62  518C               	movf	(testBatteries@volt5+1)& (0+255),w,b
  4883  002C64  0100               	movlb	0	; () banked
  4884  002C66  1382               	iorwf	(??_testBatteries+1)& (0+255),f,b
  4885  002C68  0100               	movlb	0	; () banked
  4886  002C6A  5181               	movf	??_testBatteries& (0+255),w,b
  4887  002C6C  0100               	movlb	0	; () banked
  4888  002C6E  1182               	iorwf	(??_testBatteries+1)& (0+255),w,b
  4889  002C70  A4D8               	btfss	status,2,c
  4890  002C72  D00D               	goto	l6491
  4891                           
  4892                           ; BSR set to: 0
  4893                           ;main.c: 695: countDrain++;
  4894  002C74  0100               	movlb	0	; () banked
  4895  002C76  2BE2               	incf	_countDrain& (0+255),f,b
  4896                           
  4897                           ; BSR set to: 0
  4898                           ;main.c: 696: plat1Left = 512;
  4899  002C78  0E02               	movlw	2
  4900  002C7A  0100               	movlb	0	; () banked
  4901  002C7C  6FD0               	movwf	(_plat1Left+1)& (0+255),b
  4902  002C7E  0E00               	movlw	0
  4903  002C80  6FCF               	movwf	_plat1Left& (0+255),b
  4904                           
  4905                           ; BSR set to: 0
  4906                           ;main.c: 697: plat2Right = 512;
  4907  002C82  0E02               	movlw	2
  4908  002C84  0100               	movlb	0	; () banked
  4909  002C86  6FD6               	movwf	(_plat2Right+1)& (0+255),b
  4910  002C88  0E00               	movlw	0
  4911  002C8A  6FD5               	movwf	_plat2Right& (0+255),b
  4912                           
  4913                           ; BSR set to: 0
  4914                           ;main.c: 698: return;
  4915  002C8C  0012               	return	
  4916  002C8E                     l6491:
  4917                           
  4918                           ; BSR set to: 0
  4919                           ;main.c: 699: }
  4920                           ;main.c: 700: if (volt2 && volt3){
  4921  002C8E  0100               	movlb	0	; () banked
  4922  002C90  5187               	movf	testBatteries@volt2& (0+255),w,b
  4923  002C92  0100               	movlb	0	; () banked
  4924  002C94  1188               	iorwf	(testBatteries@volt2+1)& (0+255),w,b
  4925  002C96  B4D8               	btfsc	status,2,c
  4926  002C98  D00F               	goto	l6501
  4927                           
  4928                           ; BSR set to: 0
  4929  002C9A  0100               	movlb	0	; () banked
  4930  002C9C  5185               	movf	testBatteries@volt3& (0+255),w,b
  4931  002C9E  0100               	movlb	0	; () banked
  4932  002CA0  1186               	iorwf	(testBatteries@volt3+1)& (0+255),w,b
  4933  002CA2  B4D8               	btfsc	status,2,c
  4934  002CA4  D009               	goto	l6501
  4935                           
  4936                           ; BSR set to: 0
  4937                           ;main.c: 701: countAA = countAA + 2;
  4938  002CA6  0100               	movlb	0	; () banked
  4939  002CA8  51E0               	movf	_countAA& (0+255),w,b
  4940  002CAA  0F02               	addlw	2
  4941  002CAC  0100               	movlb	0	; () banked
  4942  002CAE  6FE0               	movwf	_countAA& (0+255),b
  4943                           
  4944                           ; BSR set to: 0
  4945                           ;main.c: 702: doubleAA = 1;
  4946  002CB0  0E01               	movlw	1
  4947  002CB2  0100               	movlb	0	; () banked
  4948  002CB4  6FE4               	movwf	_doubleAA& (0+255),b
  4949                           
  4950                           ; BSR set to: 0
  4951                           ;main.c: 703: return;
  4952  002CB6  0012               	return	
  4953  002CB8                     l6501:
  4954                           
  4955                           ; BSR set to: 0
  4956                           ;main.c: 704: }
  4957                           ;main.c: 705: if (volt4 >200 | volt5 > 200){
  4958  002CB8  0100               	movlb	0	; () banked
  4959  002CBA  518A               	movf	(testBatteries@volt4+1)& (0+255),w,b
  4960  002CBC  E10D               	bnz	l6505
  4961  002CBE  0EC9               	movlw	201
  4962  002CC0  0100               	movlb	0	; () banked
  4963  002CC2  5D89               	subwf	testBatteries@volt4& (0+255),w,b
  4964  002CC4  B0D8               	btfsc	status,0,c
  4965  002CC6  D008               	goto	l6505
  4966                           
  4967                           ; BSR set to: 0
  4968  002CC8  0100               	movlb	0	; () banked
  4969  002CCA  518C               	movf	(testBatteries@volt5+1)& (0+255),w,b
  4970  002CCC  E105               	bnz	l6505
  4971  002CCE  0EC9               	movlw	201
  4972  002CD0  0100               	movlb	0	; () banked
  4973  002CD2  5D8B               	subwf	testBatteries@volt5& (0+255),w,b
  4974  002CD4  A0D8               	btfss	status,0,c
  4975  002CD6  D00D               	goto	l6511
  4976  002CD8                     l6505:
  4977                           
  4978                           ; BSR set to: 0
  4979                           ;main.c: 706: plat1Right = 512;
  4980  002CD8  0E02               	movlw	2
  4981  002CDA  0100               	movlb	0	; () banked
  4982  002CDC  6FD2               	movwf	(_plat1Right+1)& (0+255),b
  4983  002CDE  0E00               	movlw	0
  4984  002CE0  6FD1               	movwf	_plat1Right& (0+255),b
  4985                           
  4986                           ;main.c: 707: plat2Left = 512;
  4987  002CE2  0E02               	movlw	2
  4988  002CE4  0100               	movlb	0	; () banked
  4989  002CE6  6FD4               	movwf	(_plat2Left+1)& (0+255),b
  4990  002CE8  0E00               	movlw	0
  4991  002CEA  6FD3               	movwf	_plat2Left& (0+255),b
  4992                           
  4993                           ; BSR set to: 0
  4994                           ;main.c: 708: count9V++;
  4995  002CEC  0100               	movlb	0	; () banked
  4996  002CEE  2BDF               	incf	_count9V& (0+255),f,b
  4997                           
  4998                           ; BSR set to: 0
  4999                           ;main.c: 709: return;
  5000  002CF0  0012               	return	
  5001  002CF2                     l6511:
  5002                           
  5003                           ; BSR set to: 0
  5004                           ;main.c: 710: }
  5005                           ;main.c: 711: if (volt4 > 80 | volt5 > 80){
  5006  002CF2  0100               	movlb	0	; () banked
  5007  002CF4  518A               	movf	(testBatteries@volt4+1)& (0+255),w,b
  5008  002CF6  E10D               	bnz	l6515
  5009  002CF8  0E51               	movlw	81
  5010  002CFA  0100               	movlb	0	; () banked
  5011  002CFC  5D89               	subwf	testBatteries@volt4& (0+255),w,b
  5012  002CFE  B0D8               	btfsc	status,0,c
  5013  002D00  D008               	goto	l6515
  5014                           
  5015                           ; BSR set to: 0
  5016  002D02  0100               	movlb	0	; () banked
  5017  002D04  518C               	movf	(testBatteries@volt5+1)& (0+255),w,b
  5018  002D06  E105               	bnz	l6515
  5019  002D08  0E51               	movlw	81
  5020  002D0A  0100               	movlb	0	; () banked
  5021  002D0C  5D8B               	subwf	testBatteries@volt5& (0+255),w,b
  5022  002D0E  A0D8               	btfss	status,0,c
  5023  002D10  D00D               	goto	l6523
  5024  002D12                     l6515:
  5025                           
  5026                           ; BSR set to: 0
  5027                           ;main.c: 712: countDrain++;
  5028  002D12  0100               	movlb	0	; () banked
  5029  002D14  2BE2               	incf	_countDrain& (0+255),f,b
  5030                           
  5031                           ; BSR set to: 0
  5032                           ;main.c: 713: plat1Left = 512;
  5033  002D16  0E02               	movlw	2
  5034  002D18  0100               	movlb	0	; () banked
  5035  002D1A  6FD0               	movwf	(_plat1Left+1)& (0+255),b
  5036  002D1C  0E00               	movlw	0
  5037  002D1E  6FCF               	movwf	_plat1Left& (0+255),b
  5038                           
  5039                           ; BSR set to: 0
  5040                           ;main.c: 714: plat2Right = 512;
  5041  002D20  0E02               	movlw	2
  5042  002D22  0100               	movlb	0	; () banked
  5043  002D24  6FD6               	movwf	(_plat2Right+1)& (0+255),b
  5044  002D26  0E00               	movlw	0
  5045  002D28  6FD5               	movwf	_plat2Right& (0+255),b
  5046                           
  5047                           ; BSR set to: 0
  5048                           ;main.c: 715: return;
  5049  002D2A  0012               	return	
  5050  002D2C                     l6523:
  5051                           
  5052                           ; BSR set to: 0
  5053                           ;main.c: 716: }
  5054                           ;main.c: 717: if (volt2 | volt3){
  5055  002D2C  0100               	movlb	0	; () banked
  5056  002D2E  5185               	movf	testBatteries@volt3& (0+255),w,b
  5057  002D30  0100               	movlb	0	; () banked
  5058  002D32  1187               	iorwf	testBatteries@volt2& (0+255),w,b
  5059  002D34  0100               	movlb	0	; () banked
  5060  002D36  6F81               	movwf	??_testBatteries& (0+255),b
  5061  002D38  0100               	movlb	0	; () banked
  5062  002D3A  5186               	movf	(testBatteries@volt3+1)& (0+255),w,b
  5063  002D3C  0100               	movlb	0	; () banked
  5064  002D3E  1188               	iorwf	(testBatteries@volt2+1)& (0+255),w,b
  5065  002D40  0100               	movlb	0	; () banked
  5066  002D42  6F82               	movwf	(??_testBatteries+1)& (0+255),b
  5067  002D44  0100               	movlb	0	; () banked
  5068  002D46  5181               	movf	??_testBatteries& (0+255),w,b
  5069  002D48  0100               	movlb	0	; () banked
  5070  002D4A  1182               	iorwf	(??_testBatteries+1)& (0+255),w,b
  5071  002D4C  B4D8               	btfsc	status,2,c
  5072  002D4E  D035               	goto	l6543
  5073                           
  5074                           ; BSR set to: 0
  5075                           ;main.c: 718: countAA++;
  5076  002D50  0100               	movlb	0	; () banked
  5077  002D52  2BE0               	incf	_countAA& (0+255),f,b
  5078                           
  5079                           ; BSR set to: 0
  5080                           ;main.c: 719: if (volt4 && volt5){
  5081  002D54  0100               	movlb	0	; () banked
  5082  002D56  5189               	movf	testBatteries@volt4& (0+255),w,b
  5083  002D58  0100               	movlb	0	; () banked
  5084  002D5A  118A               	iorwf	(testBatteries@volt4+1)& (0+255),w,b
  5085  002D5C  B4D8               	btfsc	status,2,c
  5086  002D5E  D011               	goto	l6535
  5087                           
  5088                           ; BSR set to: 0
  5089  002D60  0100               	movlb	0	; () banked
  5090  002D62  518B               	movf	testBatteries@volt5& (0+255),w,b
  5091  002D64  0100               	movlb	0	; () banked
  5092  002D66  118C               	iorwf	(testBatteries@volt5+1)& (0+255),w,b
  5093  002D68  B4D8               	btfsc	status,2,c
  5094  002D6A  D00B               	goto	l6535
  5095                           
  5096                           ; BSR set to: 0
  5097                           ;main.c: 720: plat1Right = 512;
  5098  002D6C  0E02               	movlw	2
  5099  002D6E  0100               	movlb	0	; () banked
  5100  002D70  6FD2               	movwf	(_plat1Right+1)& (0+255),b
  5101  002D72  0E00               	movlw	0
  5102  002D74  6FD1               	movwf	_plat1Right& (0+255),b
  5103                           
  5104                           ;main.c: 721: plat2Left = 512;
  5105  002D76  0E02               	movlw	2
  5106  002D78  0100               	movlb	0	; () banked
  5107  002D7A  6FD4               	movwf	(_plat2Left+1)& (0+255),b
  5108  002D7C  0E00               	movlw	0
  5109  002D7E  6FD3               	movwf	_plat2Left& (0+255),b
  5110                           
  5111                           ; BSR set to: 0
  5112                           ;main.c: 722: return;
  5113  002D80  0012               	return	
  5114  002D82                     l6535:
  5115                           
  5116                           ; BSR set to: 0
  5117                           ;main.c: 723: }
  5118                           ;main.c: 724: if (volt2){
  5119  002D82  0100               	movlb	0	; () banked
  5120  002D84  5187               	movf	testBatteries@volt2& (0+255),w,b
  5121  002D86  0100               	movlb	0	; () banked
  5122  002D88  1188               	iorwf	(testBatteries@volt2+1)& (0+255),w,b
  5123  002D8A  B4D8               	btfsc	status,2,c
  5124  002D8C  D00B               	goto	l6539
  5125                           
  5126                           ; BSR set to: 0
  5127                           ;main.c: 725: plat1Right = 512;
  5128  002D8E  0E02               	movlw	2
  5129  002D90  0100               	movlb	0	; () banked
  5130  002D92  6FD2               	movwf	(_plat1Right+1)& (0+255),b
  5131  002D94  0E00               	movlw	0
  5132  002D96  6FD1               	movwf	_plat1Right& (0+255),b
  5133                           
  5134                           ;main.c: 726: plat2Left = 512;
  5135  002D98  0E02               	movlw	2
  5136  002D9A  0100               	movlb	0	; () banked
  5137  002D9C  6FD4               	movwf	(_plat2Left+1)& (0+255),b
  5138  002D9E  0E00               	movlw	0
  5139  002DA0  6FD3               	movwf	_plat2Left& (0+255),b
  5140                           
  5141                           ;main.c: 727: }
  5142  002DA2  0012               	return	
  5143  002DA4                     l6539:
  5144                           
  5145                           ; BSR set to: 0
  5146                           ;main.c: 728: else{
  5147                           ;main.c: 729: plat2Right = 512;
  5148  002DA4  0E02               	movlw	2
  5149  002DA6  0100               	movlb	0	; () banked
  5150  002DA8  6FD6               	movwf	(_plat2Right+1)& (0+255),b
  5151  002DAA  0E00               	movlw	0
  5152  002DAC  6FD5               	movwf	_plat2Right& (0+255),b
  5153                           
  5154                           ;main.c: 730: plat1Left = 512;
  5155  002DAE  0E02               	movlw	2
  5156  002DB0  0100               	movlb	0	; () banked
  5157  002DB2  6FD0               	movwf	(_plat1Left+1)& (0+255),b
  5158  002DB4  0E00               	movlw	0
  5159  002DB6  6FCF               	movwf	_plat1Left& (0+255),b
  5160                           
  5161                           ; BSR set to: 0
  5162                           ;main.c: 731: }
  5163                           ;main.c: 732: return;
  5164                           
  5165                           ; BSR set to: 0
  5166  002DB8  0012               	return	
  5167  002DBA                     l6543:
  5168                           
  5169                           ; BSR set to: 0
  5170                           ;main.c: 733: }
  5171                           ;main.c: 736: plat1Left = 512;
  5172  002DBA  0E02               	movlw	2
  5173  002DBC  0100               	movlb	0	; () banked
  5174  002DBE  6FD0               	movwf	(_plat1Left+1)& (0+255),b
  5175  002DC0  0E00               	movlw	0
  5176  002DC2  6FCF               	movwf	_plat1Left& (0+255),b
  5177                           
  5178                           ;main.c: 737: plat2Right = 512;
  5179  002DC4  0E02               	movlw	2
  5180  002DC6  0100               	movlb	0	; () banked
  5181  002DC8  6FD6               	movwf	(_plat2Right+1)& (0+255),b
  5182  002DCA  0E00               	movlw	0
  5183  002DCC  6FD5               	movwf	_plat2Right& (0+255),b
  5184                           
  5185                           ; BSR set to: 0
  5186                           ;main.c: 738: countDrain++;
  5187  002DCE  0100               	movlb	0	; () banked
  5188  002DD0  2BE2               	incf	_countDrain& (0+255),f,b
  5189  002DD2  0012               	return	
  5190  002DD4                     __end_of_testBatteries:
  5191                           	opt stack 0
  5192                           tblptru	equ	0xFF8
  5193                           tblptrh	equ	0xFF7
  5194                           tblptrl	equ	0xFF6
  5195                           tablat	equ	0xFF5
  5196                           prodh	equ	0xFF4
  5197                           prodl	equ	0xFF3
  5198                           intcon	equ	0xFF2
  5199                           intcon2	equ	0xFF1
  5200                           intcon3	equ	0xFF0
  5201                           postinc0	equ	0xFEE
  5202                           wreg	equ	0xFE8
  5203                           postdec1	equ	0xFE5
  5204                           fsr1l	equ	0xFE1
  5205                           indf2	equ	0xFDF
  5206                           fsr2h	equ	0xFDA
  5207                           fsr2l	equ	0xFD9
  5208                           status	equ	0xFD8
  5209                           
  5210 ;; *************** function _readADC *****************
  5211 ;; Defined at:
  5212 ;;		line 561 in file "../main.c"
  5213 ;; Parameters:    Size  Location     Type
  5214 ;;  channel         1    wreg     unsigned char 
  5215 ;; Auto vars:     Size  Location     Type
  5216 ;;  channel         1    0[BANK0 ] unsigned char 
  5217 ;; Return value:  Size  Location     Type
  5218 ;;                  1    wreg      void 
  5219 ;; Registers used:
  5220 ;;		wreg, status,2, status,0
  5221 ;; Tracked objects:
  5222 ;;		On entry : 0/0
  5223 ;;		On exit  : 0/0
  5224 ;;		Unchanged: 0/0
  5225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5226 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5227 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5228 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5229 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5230 ;;Total ram usage:        1 bytes
  5231 ;; Hardware stack levels used:    1
  5232 ;; Hardware stack levels required when called:    5
  5233 ;; This function calls:
  5234 ;;		Nothing
  5235 ;; This function is called by:
  5236 ;;		_main
  5237 ;;		_testBatteries
  5238 ;; This function uses a non-reentrant model
  5239 ;;
  5240                           
  5241                           	psect	text3
  5242  003718                     __ptext3:
  5243                           	opt stack 0
  5244  003718                     _readADC:
  5245                           	opt stack 24
  5246                           
  5247                           ; BSR set to: 0
  5248                           ;incstack = 0
  5249                           ;readADC@channel stored from wreg
  5250  003718  0100               	movlb	0	; () banked
  5251  00371A  6F80               	movwf	readADC@channel& (0+255),b
  5252                           
  5253                           ;main.c: 563: ADCON0 = channel << 2;
  5254  00371C  0100               	movlb	0	; () banked
  5255  00371E  4580               	rlncf	readADC@channel& (0+255),w,b
  5256  003720  46E8               	rlncf	wreg,f,c
  5257  003722  0BFC               	andlw	252
  5258  003724  6EC2               	movwf	4034,c	;volatile
  5259                           
  5260                           ; BSR set to: 0
  5261                           ;main.c: 564: ADCON0bits.ADON = 1;
  5262  003726  80C2               	bsf	4034,0,c	;volatile
  5263                           
  5264                           ; BSR set to: 0
  5265                           ;main.c: 565: ADCON0bits.GO = 1;
  5266  003728  82C2               	bsf	4034,1,c	;volatile
  5267  00372A                     l477:
  5268  00372A  A2C2               	btfss	4034,1,c	;volatile
  5269  00372C  0012               	return	
  5270  00372E  D7FD               	goto	l477
  5271  003730                     __end_of_readADC:
  5272                           	opt stack 0
  5273                           tblptru	equ	0xFF8
  5274                           tblptrh	equ	0xFF7
  5275                           tblptrl	equ	0xFF6
  5276                           tablat	equ	0xFF5
  5277                           prodh	equ	0xFF4
  5278                           prodl	equ	0xFF3
  5279                           intcon	equ	0xFF2
  5280                           intcon2	equ	0xFF1
  5281                           intcon3	equ	0xFF0
  5282                           postinc0	equ	0xFEE
  5283                           wreg	equ	0xFE8
  5284                           postdec1	equ	0xFE5
  5285                           fsr1l	equ	0xFE1
  5286                           indf2	equ	0xFDF
  5287                           fsr2h	equ	0xFDA
  5288                           fsr2l	equ	0xFD9
  5289                           status	equ	0xFD8
  5290                           
  5291 ;; *************** function _stopOperation *****************
  5292 ;; Defined at:
  5293 ;;		line 569 in file "../main.c"
  5294 ;; Parameters:    Size  Location     Type
  5295 ;;		None
  5296 ;; Auto vars:     Size  Location     Type
  5297 ;;  address         2    9[BANK0 ] unsigned int 
  5298 ;;  address_code    1    8[BANK0 ] unsigned char 
  5299 ;; Return value:  Size  Location     Type
  5300 ;;                  1    wreg      void 
  5301 ;; Registers used:
  5302 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5303 ;; Tracked objects:
  5304 ;;		On entry : 0/0
  5305 ;;		On exit  : 0/0
  5306 ;;		Unchanged: 0/0
  5307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5308 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5309 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5310 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5311 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5312 ;;Total ram usage:        3 bytes
  5313 ;; Hardware stack levels used:    1
  5314 ;; Hardware stack levels required when called:    6
  5315 ;; This function calls:
  5316 ;;		_Eeprom_ReadByte
  5317 ;;		_Eeprom_WriteByte
  5318 ;;		___awdiv
  5319 ;;		___awmod
  5320 ;;		_next_address
  5321 ;; This function is called by:
  5322 ;;		_main
  5323 ;; This function uses a non-reentrant model
  5324 ;;
  5325                           
  5326                           	psect	text4
  5327  001FA2                     __ptext4:
  5328                           	opt stack 0
  5329  001FA2                     _stopOperation:
  5330                           	opt stack 24
  5331                           
  5332                           ;main.c: 570: T0CONbits.TMR0ON = 0;
  5333                           
  5334                           ;incstack = 0
  5335  001FA2  9ED5               	bcf	4053,7,c	;volatile
  5336                           
  5337                           ;main.c: 571: T1CONbits.TMR1ON = 0;
  5338  001FA4  90CD               	bcf	4045,0,c	;volatile
  5339                           
  5340                           ;main.c: 572: TMR2ON = 0;
  5341  001FA6  94CA               	bcf	4042,2,c	;volatile
  5342                           
  5343                           ;main.c: 573: TMR0 = 55770;
  5344  001FA8  0ED9               	movlw	217
  5345  001FAA  6ED7               	movwf	4055,c	;volatile
  5346  001FAC  0EDA               	movlw	218
  5347  001FAE  6ED6               	movwf	4054,c	;volatile
  5348                           
  5349                           ;main.c: 574: TMR1 = 60535;
  5350  001FB0  0EEC               	movlw	236
  5351  001FB2  6ECF               	movwf	4047,c	;volatile
  5352  001FB4  0E77               	movlw	119
  5353  001FB6  6ECE               	movwf	4046,c	;volatile
  5354                           
  5355                           ;main.c: 575: TMR2 = 155;
  5356  001FB8  0E9B               	movlw	155
  5357  001FBA  6ECC               	movwf	4044,c	;volatile
  5358                           
  5359                           ;main.c: 577: num9V = count9V;
  5360  001FBC  C0DF  F0E6         	movff	_count9V,_num9V
  5361                           
  5362                           ;main.c: 578: numC = countC;
  5363  001FC0  C0E1  F0E9         	movff	_countC,_numC
  5364                           
  5365                           ;main.c: 579: numAA = countAA;
  5366  001FC4  C0E0  F0E7         	movff	_countAA,_numAA
  5367                           
  5368                           ;main.c: 580: numDrain = countDrain;
  5369  001FC8  C0E2  F0EA         	movff	_countDrain,_numDrain
  5370                           
  5371                           ;main.c: 581: numBats = count9V + countC + countAA + countDrain;
  5372  001FCC  0100               	movlb	0	; () banked
  5373  001FCE  51DF               	movf	_count9V& (0+255),w,b
  5374  001FD0  0100               	movlb	0	; () banked
  5375  001FD2  25E1               	addwf	_countC& (0+255),w,b
  5376  001FD4  0100               	movlb	0	; () banked
  5377  001FD6  25E0               	addwf	_countAA& (0+255),w,b
  5378  001FD8  0100               	movlb	0	; () banked
  5379  001FDA  25E2               	addwf	_countDrain& (0+255),w,b
  5380  001FDC  0100               	movlb	0	; () banked
  5381  001FDE  6FE8               	movwf	_numBats& (0+255),b
  5382                           
  5383                           ; BSR set to: 0
  5384                           ;main.c: 583: unsigned char address_code = Eeprom_ReadByte(0);
  5385  001FE0  0E00               	movlw	0
  5386  001FE2  0100               	movlb	0	; () banked
  5387  001FE4  6F81               	movwf	(Eeprom_ReadByte@address+1)& (0+255),b
  5388  001FE6  0E00               	movlw	0
  5389  001FE8  6F80               	movwf	Eeprom_ReadByte@address& (0+255),b
  5390  001FEA  EC98  F01B         	call	_Eeprom_ReadByte	;wreg free
  5391  001FEE  0100               	movlb	0	; () banked
  5392  001FF0  6F88               	movwf	stopOperation@address_code& (0+255),b
  5393                           
  5394                           ; BSR set to: 0
  5395                           ;main.c: 584: uint16_t address = address_code * 96 + 1;
  5396  001FF2  0100               	movlb	0	; () banked
  5397  001FF4  5188               	movf	stopOperation@address_code& (0+255),w,b
  5398  001FF6  0D60               	mullw	96
  5399  001FF8  0E01               	movlw	1
  5400  001FFA  24F3               	addwf	prodl,w,c
  5401  001FFC  0100               	movlb	0	; () banked
  5402  001FFE  6F89               	movwf	stopOperation@address& (0+255),b
  5403  002000  0E00               	movlw	0
  5404  002002  20F4               	addwfc	prodh,w,c
  5405  002004  0100               	movlb	0	; () banked
  5406  002006  6F8A               	movwf	(stopOperation@address+1)& (0+255),b
  5407                           
  5408                           ; BSR set to: 0
  5409                           ;main.c: 585: Eeprom_WriteByte(address, lastRunRTC[6]);
  5410  002008  C089  F080         	movff	stopOperation@address,Eeprom_WriteByte@address
  5411  00200C  C08A  F081         	movff	stopOperation@address+1,Eeprom_WriteByte@address+1
  5412  002010  C0CE  F082         	movff	_lastRunRTC+6,Eeprom_WriteByte@data
  5413  002014  EC13  F01B         	call	_Eeprom_WriteByte	;wreg free
  5414                           
  5415                           ;main.c: 586: address = next_address(address);
  5416  002018  C089  F080         	movff	stopOperation@address,next_address@address
  5417  00201C  C08A  F081         	movff	stopOperation@address+1,next_address@address+1
  5418  002020  ECA4  F01B         	call	_next_address	;wreg free
  5419  002024  C080  F089         	movff	?_next_address,stopOperation@address
  5420  002028  C081  F08A         	movff	?_next_address+1,stopOperation@address+1
  5421                           
  5422                           ;main.c: 587: Eeprom_WriteByte(address, lastRunRTC[5]);
  5423  00202C  C089  F080         	movff	stopOperation@address,Eeprom_WriteByte@address
  5424  002030  C08A  F081         	movff	stopOperation@address+1,Eeprom_WriteByte@address+1
  5425  002034  C0CD  F082         	movff	_lastRunRTC+5,Eeprom_WriteByte@data
  5426  002038  EC13  F01B         	call	_Eeprom_WriteByte	;wreg free
  5427                           
  5428                           ;main.c: 588: address = next_address(address);
  5429  00203C  C089  F080         	movff	stopOperation@address,next_address@address
  5430  002040  C08A  F081         	movff	stopOperation@address+1,next_address@address+1
  5431  002044  ECA4  F01B         	call	_next_address	;wreg free
  5432  002048  C080  F089         	movff	?_next_address,stopOperation@address
  5433  00204C  C081  F08A         	movff	?_next_address+1,stopOperation@address+1
  5434                           
  5435                           ;main.c: 589: Eeprom_WriteByte(address, lastRunRTC[4]);
  5436  002050  C089  F080         	movff	stopOperation@address,Eeprom_WriteByte@address
  5437  002054  C08A  F081         	movff	stopOperation@address+1,Eeprom_WriteByte@address+1
  5438  002058  C0CC  F082         	movff	_lastRunRTC+4,Eeprom_WriteByte@data
  5439  00205C  EC13  F01B         	call	_Eeprom_WriteByte	;wreg free
  5440                           
  5441                           ;main.c: 590: address = next_address(address);
  5442  002060  C089  F080         	movff	stopOperation@address,next_address@address
  5443  002064  C08A  F081         	movff	stopOperation@address+1,next_address@address+1
  5444  002068  ECA4  F01B         	call	_next_address	;wreg free
  5445  00206C  C080  F089         	movff	?_next_address,stopOperation@address
  5446  002070  C081  F08A         	movff	?_next_address+1,stopOperation@address+1
  5447                           
  5448                           ;main.c: 591: Eeprom_WriteByte(address, lastRunRTC[2]);
  5449  002074  C089  F080         	movff	stopOperation@address,Eeprom_WriteByte@address
  5450  002078  C08A  F081         	movff	stopOperation@address+1,Eeprom_WriteByte@address+1
  5451  00207C  C0CA  F082         	movff	_lastRunRTC+2,Eeprom_WriteByte@data
  5452  002080  EC13  F01B         	call	_Eeprom_WriteByte	;wreg free
  5453                           
  5454                           ;main.c: 592: address = next_address(address);
  5455  002084  C089  F080         	movff	stopOperation@address,next_address@address
  5456  002088  C08A  F081         	movff	stopOperation@address+1,next_address@address+1
  5457  00208C  ECA4  F01B         	call	_next_address	;wreg free
  5458  002090  C080  F089         	movff	?_next_address,stopOperation@address
  5459  002094  C081  F08A         	movff	?_next_address+1,stopOperation@address+1
  5460                           
  5461                           ;main.c: 593: Eeprom_WriteByte(address, lastRunRTC[1]);
  5462  002098  C089  F080         	movff	stopOperation@address,Eeprom_WriteByte@address
  5463  00209C  C08A  F081         	movff	stopOperation@address+1,Eeprom_WriteByte@address+1
  5464  0020A0  C0C9  F082         	movff	_lastRunRTC+1,Eeprom_WriteByte@data
  5465  0020A4  EC13  F01B         	call	_Eeprom_WriteByte	;wreg free
  5466                           
  5467                           ;main.c: 594: address = next_address(address);
  5468  0020A8  C089  F080         	movff	stopOperation@address,next_address@address
  5469  0020AC  C08A  F081         	movff	stopOperation@address+1,next_address@address+1
  5470  0020B0  ECA4  F01B         	call	_next_address	;wreg free
  5471  0020B4  C080  F089         	movff	?_next_address,stopOperation@address
  5472  0020B8  C081  F08A         	movff	?_next_address+1,stopOperation@address+1
  5473                           
  5474                           ;main.c: 595: Eeprom_WriteByte(address, lastRunRTC[0]);
  5475  0020BC  C089  F080         	movff	stopOperation@address,Eeprom_WriteByte@address
  5476  0020C0  C08A  F081         	movff	stopOperation@address+1,Eeprom_WriteByte@address+1
  5477  0020C4  C0C8  F082         	movff	_lastRunRTC,Eeprom_WriteByte@data
  5478  0020C8  EC13  F01B         	call	_Eeprom_WriteByte	;wreg free
  5479                           
  5480                           ;main.c: 596: address = next_address(address);
  5481  0020CC  C089  F080         	movff	stopOperation@address,next_address@address
  5482  0020D0  C08A  F081         	movff	stopOperation@address+1,next_address@address+1
  5483  0020D4  ECA4  F01B         	call	_next_address	;wreg free
  5484  0020D8  C080  F089         	movff	?_next_address,stopOperation@address
  5485  0020DC  C081  F08A         	movff	?_next_address+1,stopOperation@address+1
  5486                           
  5487                           ;main.c: 598: Eeprom_WriteByte(address, countAA);
  5488  0020E0  C089  F080         	movff	stopOperation@address,Eeprom_WriteByte@address
  5489  0020E4  C08A  F081         	movff	stopOperation@address+1,Eeprom_WriteByte@address+1
  5490  0020E8  C0E0  F082         	movff	_countAA,Eeprom_WriteByte@data
  5491  0020EC  EC13  F01B         	call	_Eeprom_WriteByte	;wreg free
  5492                           
  5493                           ;main.c: 599: address = next_address(address);
  5494  0020F0  C089  F080         	movff	stopOperation@address,next_address@address
  5495  0020F4  C08A  F081         	movff	stopOperation@address+1,next_address@address+1
  5496  0020F8  ECA4  F01B         	call	_next_address	;wreg free
  5497  0020FC  C080  F089         	movff	?_next_address,stopOperation@address
  5498  002100  C081  F08A         	movff	?_next_address+1,stopOperation@address+1
  5499                           
  5500                           ;main.c: 600: Eeprom_WriteByte(address, countC);
  5501  002104  C089  F080         	movff	stopOperation@address,Eeprom_WriteByte@address
  5502  002108  C08A  F081         	movff	stopOperation@address+1,Eeprom_WriteByte@address+1
  5503  00210C  C0E1  F082         	movff	_countC,Eeprom_WriteByte@data
  5504  002110  EC13  F01B         	call	_Eeprom_WriteByte	;wreg free
  5505                           
  5506                           ;main.c: 601: address = next_address(address);
  5507  002114  C089  F080         	movff	stopOperation@address,next_address@address
  5508  002118  C08A  F081         	movff	stopOperation@address+1,next_address@address+1
  5509  00211C  ECA4  F01B         	call	_next_address	;wreg free
  5510  002120  C080  F089         	movff	?_next_address,stopOperation@address
  5511  002124  C081  F08A         	movff	?_next_address+1,stopOperation@address+1
  5512                           
  5513                           ;main.c: 602: Eeprom_WriteByte(address, count9V);
  5514  002128  C089  F080         	movff	stopOperation@address,Eeprom_WriteByte@address
  5515  00212C  C08A  F081         	movff	stopOperation@address+1,Eeprom_WriteByte@address+1
  5516  002130  C0DF  F082         	movff	_count9V,Eeprom_WriteByte@data
  5517  002134  EC13  F01B         	call	_Eeprom_WriteByte	;wreg free
  5518                           
  5519                           ;main.c: 603: address = next_address(address);
  5520  002138  C089  F080         	movff	stopOperation@address,next_address@address
  5521  00213C  C08A  F081         	movff	stopOperation@address+1,next_address@address+1
  5522  002140  ECA4  F01B         	call	_next_address	;wreg free
  5523  002144  C080  F089         	movff	?_next_address,stopOperation@address
  5524  002148  C081  F08A         	movff	?_next_address+1,stopOperation@address+1
  5525                           
  5526                           ;main.c: 604: Eeprom_WriteByte(address, countDrain);
  5527  00214C  C089  F080         	movff	stopOperation@address,Eeprom_WriteByte@address
  5528  002150  C08A  F081         	movff	stopOperation@address+1,Eeprom_WriteByte@address+1
  5529  002154  C0E2  F082         	movff	_countDrain,Eeprom_WriteByte@data
  5530  002158  EC13  F01B         	call	_Eeprom_WriteByte	;wreg free
  5531                           
  5532                           ;main.c: 605: address = next_address(address);
  5533  00215C  C089  F080         	movff	stopOperation@address,next_address@address
  5534  002160  C08A  F081         	movff	stopOperation@address+1,next_address@address+1
  5535  002164  ECA4  F01B         	call	_next_address	;wreg free
  5536  002168  C080  F089         	movff	?_next_address,stopOperation@address
  5537  00216C  C081  F08A         	movff	?_next_address+1,stopOperation@address+1
  5538                           
  5539                           ;main.c: 606: Eeprom_WriteByte(address, numBats);
  5540  002170  C089  F080         	movff	stopOperation@address,Eeprom_WriteByte@address
  5541  002174  C08A  F081         	movff	stopOperation@address+1,Eeprom_WriteByte@address+1
  5542  002178  C0E8  F082         	movff	_numBats,Eeprom_WriteByte@data
  5543  00217C  EC13  F01B         	call	_Eeprom_WriteByte	;wreg free
  5544                           
  5545                           ;main.c: 607: address = next_address(address);
  5546  002180  C089  F080         	movff	stopOperation@address,next_address@address
  5547  002184  C08A  F081         	movff	stopOperation@address+1,next_address@address+1
  5548  002188  ECA4  F01B         	call	_next_address	;wreg free
  5549  00218C  C080  F089         	movff	?_next_address,stopOperation@address
  5550  002190  C081  F08A         	movff	?_next_address+1,stopOperation@address+1
  5551                           
  5552                           ;main.c: 608: Eeprom_WriteByte(address, opTimer);
  5553  002194  C089  F080         	movff	stopOperation@address,Eeprom_WriteByte@address
  5554  002198  C08A  F081         	movff	stopOperation@address+1,Eeprom_WriteByte@address+1
  5555  00219C  C051  F082         	movff	_opTimer,Eeprom_WriteByte@data
  5556  0021A0  EC13  F01B         	call	_Eeprom_WriteByte	;wreg free
  5557                           
  5558                           ;main.c: 610: address_code++;
  5559  0021A4  0100               	movlb	0	; () banked
  5560  0021A6  2B88               	incf	stopOperation@address_code& (0+255),f,b
  5561                           
  5562                           ; BSR set to: 0
  5563                           ;main.c: 611: if (address_code > 3)
  5564  0021A8  0E03               	movlw	3
  5565  0021AA  0100               	movlb	0	; () banked
  5566  0021AC  6588               	cpfsgt	stopOperation@address_code& (0+255),b
  5567  0021AE  D00B               	goto	l6619
  5568                           
  5569                           ; BSR set to: 0
  5570                           ;main.c: 612: Eeprom_WriteByte(0, 0);
  5571  0021B0  0E00               	movlw	0
  5572  0021B2  0100               	movlb	0	; () banked
  5573  0021B4  6F81               	movwf	(Eeprom_WriteByte@address+1)& (0+255),b
  5574  0021B6  0E00               	movlw	0
  5575  0021B8  6F80               	movwf	Eeprom_WriteByte@address& (0+255),b
  5576  0021BA  0E00               	movlw	0
  5577  0021BC  0100               	movlb	0	; () banked
  5578  0021BE  6F82               	movwf	Eeprom_WriteByte@data& (0+255),b
  5579  0021C0  EC13  F01B         	call	_Eeprom_WriteByte	;wreg free
  5580  0021C4  D009               	goto	l6621
  5581  0021C6                     l6619:
  5582                           
  5583                           ;main.c: 613: else
  5584                           ;main.c: 614: Eeprom_WriteByte(0, address_code);
  5585  0021C6  0E00               	movlw	0
  5586  0021C8  0100               	movlb	0	; () banked
  5587  0021CA  6F81               	movwf	(Eeprom_WriteByte@address+1)& (0+255),b
  5588  0021CC  0E00               	movlw	0
  5589  0021CE  6F80               	movwf	Eeprom_WriteByte@address& (0+255),b
  5590  0021D0  C088  F082         	movff	stopOperation@address_code,Eeprom_WriteByte@data
  5591  0021D4  EC13  F01B         	call	_Eeprom_WriteByte	;wreg free
  5592  0021D8                     l6621:
  5593                           
  5594                           ;main.c: 616: count9V = 0;
  5595  0021D8  0E00               	movlw	0
  5596  0021DA  0100               	movlb	0	; () banked
  5597  0021DC  6FDF               	movwf	_count9V& (0+255),b
  5598                           
  5599                           ; BSR set to: 0
  5600                           ;main.c: 617: countC = 0;
  5601  0021DE  0E00               	movlw	0
  5602  0021E0  0100               	movlb	0	; () banked
  5603  0021E2  6FE1               	movwf	_countC& (0+255),b
  5604                           
  5605                           ; BSR set to: 0
  5606                           ;main.c: 618: countAA = 0;
  5607  0021E4  0E00               	movlw	0
  5608  0021E6  0100               	movlb	0	; () banked
  5609  0021E8  6FE0               	movwf	_countAA& (0+255),b
  5610                           
  5611                           ; BSR set to: 0
  5612                           ;main.c: 619: countDrain = 0;
  5613  0021EA  0E00               	movlw	0
  5614  0021EC  0100               	movlb	0	; () banked
  5615  0021EE  6FE2               	movwf	_countDrain& (0+255),b
  5616                           
  5617                           ; BSR set to: 0
  5618                           ;main.c: 620: min = opTimer / 60;
  5619  0021F0  C051  F080         	movff	_opTimer,___awdiv@dividend
  5620  0021F4  0100               	movlb	0	; () banked
  5621  0021F6  6B81               	clrf	(___awdiv@dividend+1)& (0+255),b
  5622  0021F8  0E00               	movlw	0
  5623  0021FA  0100               	movlb	0	; () banked
  5624  0021FC  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  5625  0021FE  0E3C               	movlw	60
  5626  002200  6F82               	movwf	___awdiv@divisor& (0+255),b
  5627  002202  EC72  F017         	call	___awdiv	;wreg free
  5628  002206  0100               	movlb	0	; () banked
  5629  002208  5180               	movf	?___awdiv& (0+255),w,b
  5630  00220A  0100               	movlb	0	; () banked
  5631  00220C  6FE5               	movwf	_min& (0+255),b
  5632                           
  5633                           ; BSR set to: 0
  5634                           ;main.c: 621: sec = opTimer % 60;
  5635  00220E  C051  F080         	movff	_opTimer,___awmod@dividend
  5636  002212  0100               	movlb	0	; () banked
  5637  002214  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  5638  002216  0E00               	movlw	0
  5639  002218  0100               	movlb	0	; () banked
  5640  00221A  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5641  00221C  0E3C               	movlw	60
  5642  00221E  6F82               	movwf	___awmod@divisor& (0+255),b
  5643  002220  EC2F  F018         	call	___awmod	;wreg free
  5644  002224  0100               	movlb	0	; () banked
  5645  002226  5180               	movf	?___awmod& (0+255),w,b
  5646  002228  0100               	movlb	0	; () banked
  5647  00222A  6FEB               	movwf	_sec& (0+255),b
  5648                           
  5649                           ; BSR set to: 0
  5650                           ;main.c: 622: opTimer = 0;
  5651  00222C  0E00               	movlw	0
  5652  00222E  6E51               	movwf	_opTimer,c
  5653                           
  5654                           ; BSR set to: 0
  5655                           ;main.c: 623: doneTimer = 0;
  5656  002230  0E00               	movlw	0
  5657  002232  0100               	movlb	0	; () banked
  5658  002234  6FE3               	movwf	_doneTimer& (0+255),b
  5659                           
  5660                           ; BSR set to: 0
  5661                           ;main.c: 624: sorting = 0;
  5662  002236  0E00               	movlw	0
  5663  002238  6E53               	movwf	_sorting,c
  5664                           
  5665                           ; BSR set to: 0
  5666                           ;main.c: 625: plat1Left = 0;
  5667  00223A  0E00               	movlw	0
  5668  00223C  0100               	movlb	0	; () banked
  5669  00223E  6FD0               	movwf	(_plat1Left+1)& (0+255),b
  5670  002240  0E00               	movlw	0
  5671  002242  6FCF               	movwf	_plat1Left& (0+255),b
  5672                           
  5673                           ; BSR set to: 0
  5674                           ;main.c: 626: plat1Right = 0;
  5675  002244  0E00               	movlw	0
  5676  002246  0100               	movlb	0	; () banked
  5677  002248  6FD2               	movwf	(_plat1Right+1)& (0+255),b
  5678  00224A  0E00               	movlw	0
  5679  00224C  6FD1               	movwf	_plat1Right& (0+255),b
  5680                           
  5681                           ; BSR set to: 0
  5682                           ;main.c: 627: plat2Left = 0;
  5683  00224E  0E00               	movlw	0
  5684  002250  0100               	movlb	0	; () banked
  5685  002252  6FD4               	movwf	(_plat2Left+1)& (0+255),b
  5686  002254  0E00               	movlw	0
  5687  002256  6FD3               	movwf	_plat2Left& (0+255),b
  5688                           
  5689                           ; BSR set to: 0
  5690                           ;main.c: 628: plat2Right = 0;
  5691  002258  0E00               	movlw	0
  5692  00225A  0100               	movlb	0	; () banked
  5693  00225C  6FD6               	movwf	(_plat2Right+1)& (0+255),b
  5694  00225E  0E00               	movlw	0
  5695  002260  6FD5               	movwf	_plat2Right& (0+255),b
  5696                           
  5697                           ; BSR set to: 0
  5698                           ;main.c: 629: turn2BackLeft = 0;
  5699  002262  0E00               	movlw	0
  5700  002264  0100               	movlb	0	; () banked
  5701  002266  6FDC               	movwf	(_turn2BackLeft+1)& (0+255),b
  5702  002268  0E00               	movlw	0
  5703  00226A  6FDB               	movwf	_turn2BackLeft& (0+255),b
  5704                           
  5705                           ; BSR set to: 0
  5706                           ;main.c: 630: turn1BackLeft = 0;
  5707  00226C  0E00               	movlw	0
  5708  00226E  0100               	movlb	0	; () banked
  5709  002270  6FD8               	movwf	(_turn1BackLeft+1)& (0+255),b
  5710  002272  0E00               	movlw	0
  5711  002274  6FD7               	movwf	_turn1BackLeft& (0+255),b
  5712                           
  5713                           ; BSR set to: 0
  5714                           ;main.c: 631: turn2BackRight = 0;
  5715  002276  0E00               	movlw	0
  5716  002278  0100               	movlb	0	; () banked
  5717  00227A  6FDE               	movwf	(_turn2BackRight+1)& (0+255),b
  5718  00227C  0E00               	movlw	0
  5719  00227E  6FDD               	movwf	_turn2BackRight& (0+255),b
  5720                           
  5721                           ; BSR set to: 0
  5722                           ;main.c: 632: turn1BackRight = 0;
  5723  002280  0E00               	movlw	0
  5724  002282  0100               	movlb	0	; () banked
  5725  002284  6FDA               	movwf	(_turn1BackRight+1)& (0+255),b
  5726  002286  0E00               	movlw	0
  5727  002288  6FD9               	movwf	_turn1BackRight& (0+255),b
  5728                           
  5729                           ; BSR set to: 0
  5730                           ;main.c: 633: count_2ms = 0;
  5731  00228A  0E00               	movlw	0
  5732  00228C  6E50               	movwf	_count_2ms+1,c
  5733  00228E  0E00               	movlw	0
  5734  002290  6E4F               	movwf	_count_2ms,c
  5735                           
  5736                           ; BSR set to: 0
  5737                           ;main.c: 634: doubleAA = 0;
  5738  002292  0E00               	movlw	0
  5739  002294  0100               	movlb	0	; () banked
  5740  002296  6FE4               	movwf	_doubleAA& (0+255),b
  5741                           
  5742                           ; BSR set to: 0
  5743                           ;main.c: 635: solOnTimer = 0;
  5744  002298  0E00               	movlw	0
  5745  00229A  6E52               	movwf	_solOnTimer,c
  5746                           
  5747                           ; BSR set to: 0
  5748                           ;main.c: 637: LATCbits.LC1 = 0;;
  5749  00229C  928B               	bcf	3979,1,c	;volatile
  5750                           
  5751                           ; BSR set to: 0
  5752                           ;main.c: 638: LATCbits.LC2 = 0;;
  5753  00229E  948B               	bcf	3979,2,c	;volatile
  5754                           
  5755                           ; BSR set to: 0
  5756                           ;main.c: 639: LATCbits.LC6 = 0;;
  5757  0022A0  9C8B               	bcf	3979,6,c	;volatile
  5758                           
  5759                           ; BSR set to: 0
  5760                           ;main.c: 640: LATCbits.LC5 = 0;;
  5761  0022A2  9A8B               	bcf	3979,5,c	;volatile
  5762                           
  5763                           ; BSR set to: 0
  5764                           ;main.c: 641: LATCbits.LC0 = 0;;
  5765  0022A4  908B               	bcf	3979,0,c	;volatile
  5766                           
  5767                           ; BSR set to: 0
  5768                           ;main.c: 642: LATEbits.LE2 = 0;;
  5769  0022A6  948D               	bcf	3981,2,c	;volatile
  5770                           
  5771                           ; BSR set to: 0
  5772                           ;main.c: 643: LATEbits.LE1 = 0;;
  5773  0022A8  928D               	bcf	3981,1,c	;volatile
  5774                           
  5775                           ; BSR set to: 0
  5776                           ;main.c: 644: LATAbits.LA4 = 0;;
  5777  0022AA  9889               	bcf	3977,4,c	;volatile
  5778                           
  5779                           ; BSR set to: 0
  5780                           ;main.c: 645: LATDbits.LD0= 0;;
  5781  0022AC  908C               	bcf	3980,0,c	;volatile
  5782                           
  5783                           ; BSR set to: 0
  5784                           ;main.c: 646: LATCbits.LC7 = 0;;
  5785  0022AE  9E8B               	bcf	3979,7,c	;volatile
  5786                           
  5787                           ; BSR set to: 0
  5788                           ;main.c: 647: LATDbits.LD1 = 0;;
  5789  0022B0  928C               	bcf	3980,1,c	;volatile
  5790                           
  5791                           ; BSR set to: 0
  5792                           ;main.c: 648: LATBbits.LB0 = 0;;
  5793  0022B2  908A               	bcf	3978,0,c	;volatile
  5794                           
  5795                           ; BSR set to: 0
  5796                           ;main.c: 649: screenMode = 0;
  5797  0022B4  0E00               	movlw	0
  5798  0022B6  0100               	movlb	0	; () banked
  5799  0022B8  6FFA               	movwf	_screenMode& (0+255),b
  5800                           
  5801                           ; BSR set to: 0
  5802  0022BA  0012               	return		;funcret
  5803  0022BC                     __end_of_stopOperation:
  5804                           	opt stack 0
  5805                           tblptru	equ	0xFF8
  5806                           tblptrh	equ	0xFF7
  5807                           tblptrl	equ	0xFF6
  5808                           tablat	equ	0xFF5
  5809                           prodh	equ	0xFF4
  5810                           prodl	equ	0xFF3
  5811                           intcon	equ	0xFF2
  5812                           intcon2	equ	0xFF1
  5813                           intcon3	equ	0xFF0
  5814                           postinc0	equ	0xFEE
  5815                           wreg	equ	0xFE8
  5816                           postdec1	equ	0xFE5
  5817                           fsr1l	equ	0xFE1
  5818                           indf2	equ	0xFDF
  5819                           fsr2h	equ	0xFDA
  5820                           fsr2l	equ	0xFD9
  5821                           status	equ	0xFD8
  5822                           
  5823 ;; *************** function ___awmod *****************
  5824 ;; Defined at:
  5825 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  5826 ;; Parameters:    Size  Location     Type
  5827 ;;  dividend        2    0[BANK0 ] int 
  5828 ;;  divisor         2    2[BANK0 ] int 
  5829 ;; Auto vars:     Size  Location     Type
  5830 ;;  sign            1    5[BANK0 ] unsigned char 
  5831 ;;  counter         1    4[BANK0 ] unsigned char 
  5832 ;; Return value:  Size  Location     Type
  5833 ;;                  2    0[BANK0 ] int 
  5834 ;; Registers used:
  5835 ;;		wreg, status,2, status,0
  5836 ;; Tracked objects:
  5837 ;;		On entry : 0/0
  5838 ;;		On exit  : 0/0
  5839 ;;		Unchanged: 0/0
  5840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5841 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5842 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5843 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5844 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5845 ;;Total ram usage:        6 bytes
  5846 ;; Hardware stack levels used:    1
  5847 ;; Hardware stack levels required when called:    5
  5848 ;; This function calls:
  5849 ;;		Nothing
  5850 ;; This function is called by:
  5851 ;;		_stopOperation
  5852 ;; This function uses a non-reentrant model
  5853 ;;
  5854                           
  5855                           	psect	text5
  5856  00305E                     __ptext5:
  5857                           	opt stack 0
  5858  00305E                     ___awmod:
  5859                           	opt stack 24
  5860                           
  5861                           ; BSR set to: 0
  5862                           ;incstack = 0
  5863  00305E  0E00               	movlw	0
  5864  003060  0100               	movlb	0	; () banked
  5865  003062  6F85               	movwf	___awmod@sign& (0+255),b
  5866                           
  5867                           ; BSR set to: 0
  5868  003064  0100               	movlb	0	; () banked
  5869  003066  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
  5870  003068  D008               	goto	l6367
  5871                           
  5872                           ; BSR set to: 0
  5873  00306A  0100               	movlb	0	; () banked
  5874  00306C  6D80               	negf	___awmod@dividend& (0+255),b
  5875  00306E  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  5876  003070  B0D8               	btfsc	status,0,c
  5877  003072  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  5878                           
  5879                           ; BSR set to: 0
  5880  003074  0E01               	movlw	1
  5881  003076  0100               	movlb	0	; () banked
  5882  003078  6F85               	movwf	___awmod@sign& (0+255),b
  5883  00307A                     l6367:
  5884                           
  5885                           ; BSR set to: 0
  5886  00307A  0100               	movlb	0	; () banked
  5887  00307C  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  5888  00307E  D005               	goto	l6371
  5889                           
  5890                           ; BSR set to: 0
  5891  003080  0100               	movlb	0	; () banked
  5892  003082  6D82               	negf	___awmod@divisor& (0+255),b
  5893  003084  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
  5894  003086  B0D8               	btfsc	status,0,c
  5895  003088  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
  5896  00308A                     l6371:
  5897                           
  5898                           ; BSR set to: 0
  5899  00308A  0100               	movlb	0	; () banked
  5900  00308C  5182               	movf	___awmod@divisor& (0+255),w,b
  5901  00308E  0100               	movlb	0	; () banked
  5902  003090  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  5903  003092  B4D8               	btfsc	status,2,c
  5904  003094  D026               	goto	l6387
  5905                           
  5906                           ; BSR set to: 0
  5907  003096  0E01               	movlw	1
  5908  003098  0100               	movlb	0	; () banked
  5909  00309A  6F84               	movwf	___awmod@counter& (0+255),b
  5910  00309C  D006               	goto	l6377
  5911  00309E                     l6375:
  5912                           
  5913                           ; BSR set to: 0
  5914  00309E  0100               	movlb	0	; () banked
  5915  0030A0  90D8               	bcf	status,0,c
  5916  0030A2  3782               	rlcf	___awmod@divisor& (0+255),f,b
  5917  0030A4  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  5918  0030A6  0100               	movlb	0	; () banked
  5919  0030A8  2B84               	incf	___awmod@counter& (0+255),f,b
  5920  0030AA                     l6377:
  5921                           
  5922                           ; BSR set to: 0
  5923  0030AA  0100               	movlb	0	; () banked
  5924  0030AC  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  5925  0030AE  D7F7               	goto	l6375
  5926  0030B0                     l6379:
  5927                           
  5928                           ; BSR set to: 0
  5929  0030B0  0100               	movlb	0	; () banked
  5930  0030B2  5182               	movf	___awmod@divisor& (0+255),w,b
  5931  0030B4  0100               	movlb	0	; () banked
  5932  0030B6  5D80               	subwf	___awmod@dividend& (0+255),w,b
  5933  0030B8  0100               	movlb	0	; () banked
  5934  0030BA  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  5935  0030BC  0100               	movlb	0	; () banked
  5936  0030BE  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  5937  0030C0  A0D8               	btfss	status,0,c
  5938  0030C2  D008               	goto	l6383
  5939                           
  5940                           ; BSR set to: 0
  5941  0030C4  0100               	movlb	0	; () banked
  5942  0030C6  5182               	movf	___awmod@divisor& (0+255),w,b
  5943  0030C8  0100               	movlb	0	; () banked
  5944  0030CA  5F80               	subwf	___awmod@dividend& (0+255),f,b
  5945  0030CC  0100               	movlb	0	; () banked
  5946  0030CE  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  5947  0030D0  0100               	movlb	0	; () banked
  5948  0030D2  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  5949  0030D4                     l6383:
  5950                           
  5951                           ; BSR set to: 0
  5952  0030D4  0100               	movlb	0	; () banked
  5953  0030D6  90D8               	bcf	status,0,c
  5954  0030D8  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  5955  0030DA  3382               	rrcf	___awmod@divisor& (0+255),f,b
  5956                           
  5957                           ; BSR set to: 0
  5958  0030DC  0100               	movlb	0	; () banked
  5959  0030DE  2F84               	decfsz	___awmod@counter& (0+255),f,b
  5960  0030E0  D7E7               	goto	l6379
  5961  0030E2                     l6387:
  5962                           
  5963                           ; BSR set to: 0
  5964  0030E2  0100               	movlb	0	; () banked
  5965  0030E4  5185               	movf	___awmod@sign& (0+255),w,b
  5966  0030E6  0100               	movlb	0	; () banked
  5967  0030E8  B4D8               	btfsc	status,2,c
  5968  0030EA  D005               	goto	l6391
  5969                           
  5970                           ; BSR set to: 0
  5971  0030EC  0100               	movlb	0	; () banked
  5972  0030EE  6D80               	negf	___awmod@dividend& (0+255),b
  5973  0030F0  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  5974  0030F2  B0D8               	btfsc	status,0,c
  5975  0030F4  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  5976  0030F6                     l6391:
  5977                           
  5978                           ; BSR set to: 0
  5979  0030F6  C080  F080         	movff	___awmod@dividend,?___awmod
  5980  0030FA  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
  5981  0030FE  0012               	return	
  5982  003100                     __end_of___awmod:
  5983                           	opt stack 0
  5984                           tblptru	equ	0xFF8
  5985                           tblptrh	equ	0xFF7
  5986                           tblptrl	equ	0xFF6
  5987                           tablat	equ	0xFF5
  5988                           prodh	equ	0xFF4
  5989                           prodl	equ	0xFF3
  5990                           intcon	equ	0xFF2
  5991                           intcon2	equ	0xFF1
  5992                           intcon3	equ	0xFF0
  5993                           postinc0	equ	0xFEE
  5994                           wreg	equ	0xFE8
  5995                           postdec1	equ	0xFE5
  5996                           fsr1l	equ	0xFE1
  5997                           indf2	equ	0xFDF
  5998                           fsr2h	equ	0xFDA
  5999                           fsr2l	equ	0xFD9
  6000                           status	equ	0xFD8
  6001                           
  6002 ;; *************** function ___awdiv *****************
  6003 ;; Defined at:
  6004 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  6005 ;; Parameters:    Size  Location     Type
  6006 ;;  dividend        2    0[BANK0 ] int 
  6007 ;;  divisor         2    2[BANK0 ] int 
  6008 ;; Auto vars:     Size  Location     Type
  6009 ;;  quotient        2    6[BANK0 ] int 
  6010 ;;  sign            1    5[BANK0 ] unsigned char 
  6011 ;;  counter         1    4[BANK0 ] unsigned char 
  6012 ;; Return value:  Size  Location     Type
  6013 ;;                  2    0[BANK0 ] int 
  6014 ;; Registers used:
  6015 ;;		wreg, status,2, status,0
  6016 ;; Tracked objects:
  6017 ;;		On entry : 0/0
  6018 ;;		On exit  : 0/0
  6019 ;;		Unchanged: 0/0
  6020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6021 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6022 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6023 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6024 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6025 ;;Total ram usage:        8 bytes
  6026 ;; Hardware stack levels used:    1
  6027 ;; Hardware stack levels required when called:    5
  6028 ;; This function calls:
  6029 ;;		Nothing
  6030 ;; This function is called by:
  6031 ;;		_stopOperation
  6032 ;; This function uses a non-reentrant model
  6033 ;;
  6034                           
  6035                           	psect	text6
  6036  002EE4                     __ptext6:
  6037                           	opt stack 0
  6038  002EE4                     ___awdiv:
  6039                           	opt stack 24
  6040                           
  6041                           ; BSR set to: 0
  6042                           ;incstack = 0
  6043  002EE4  0E00               	movlw	0
  6044  002EE6  0100               	movlb	0	; () banked
  6045  002EE8  6F85               	movwf	___awdiv@sign& (0+255),b
  6046                           
  6047                           ; BSR set to: 0
  6048  002EEA  0100               	movlb	0	; () banked
  6049  002EEC  AF83               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  6050  002EEE  D008               	goto	l6323
  6051                           
  6052                           ; BSR set to: 0
  6053  002EF0  0100               	movlb	0	; () banked
  6054  002EF2  6D82               	negf	___awdiv@divisor& (0+255),b
  6055  002EF4  1F83               	comf	(___awdiv@divisor+1)& (0+255),f,b
  6056  002EF6  B0D8               	btfsc	status,0,c
  6057  002EF8  2B83               	incf	(___awdiv@divisor+1)& (0+255),f,b
  6058                           
  6059                           ; BSR set to: 0
  6060  002EFA  0E01               	movlw	1
  6061  002EFC  0100               	movlb	0	; () banked
  6062  002EFE  6F85               	movwf	___awdiv@sign& (0+255),b
  6063  002F00                     l6323:
  6064                           
  6065                           ; BSR set to: 0
  6066  002F00  0100               	movlb	0	; () banked
  6067  002F02  AF81               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  6068  002F04  D008               	goto	l6329
  6069                           
  6070                           ; BSR set to: 0
  6071  002F06  0100               	movlb	0	; () banked
  6072  002F08  6D80               	negf	___awdiv@dividend& (0+255),b
  6073  002F0A  1F81               	comf	(___awdiv@dividend+1)& (0+255),f,b
  6074  002F0C  B0D8               	btfsc	status,0,c
  6075  002F0E  2B81               	incf	(___awdiv@dividend+1)& (0+255),f,b
  6076                           
  6077                           ; BSR set to: 0
  6078  002F10  0E01               	movlw	1
  6079  002F12  0100               	movlb	0	; () banked
  6080  002F14  1B85               	xorwf	___awdiv@sign& (0+255),f,b
  6081  002F16                     l6329:
  6082                           
  6083                           ; BSR set to: 0
  6084  002F16  0E00               	movlw	0
  6085  002F18  0100               	movlb	0	; () banked
  6086  002F1A  6F87               	movwf	(___awdiv@quotient+1)& (0+255),b
  6087  002F1C  0E00               	movlw	0
  6088  002F1E  6F86               	movwf	___awdiv@quotient& (0+255),b
  6089                           
  6090                           ; BSR set to: 0
  6091  002F20  0100               	movlb	0	; () banked
  6092  002F22  5182               	movf	___awdiv@divisor& (0+255),w,b
  6093  002F24  0100               	movlb	0	; () banked
  6094  002F26  1183               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  6095  002F28  B4D8               	btfsc	status,2,c
  6096  002F2A  D02C               	goto	l6351
  6097                           
  6098                           ; BSR set to: 0
  6099  002F2C  0E01               	movlw	1
  6100  002F2E  0100               	movlb	0	; () banked
  6101  002F30  6F84               	movwf	___awdiv@counter& (0+255),b
  6102  002F32  D006               	goto	l6337
  6103  002F34                     l6335:
  6104                           
  6105                           ; BSR set to: 0
  6106  002F34  0100               	movlb	0	; () banked
  6107  002F36  90D8               	bcf	status,0,c
  6108  002F38  3782               	rlcf	___awdiv@divisor& (0+255),f,b
  6109  002F3A  3783               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  6110  002F3C  0100               	movlb	0	; () banked
  6111  002F3E  2B84               	incf	___awdiv@counter& (0+255),f,b
  6112  002F40                     l6337:
  6113                           
  6114                           ; BSR set to: 0
  6115  002F40  0100               	movlb	0	; () banked
  6116  002F42  AF83               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  6117  002F44  D7F7               	goto	l6335
  6118  002F46                     l6339:
  6119                           
  6120                           ; BSR set to: 0
  6121  002F46  0100               	movlb	0	; () banked
  6122  002F48  90D8               	bcf	status,0,c
  6123  002F4A  3786               	rlcf	___awdiv@quotient& (0+255),f,b
  6124  002F4C  3787               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  6125                           
  6126                           ; BSR set to: 0
  6127  002F4E  0100               	movlb	0	; () banked
  6128  002F50  5182               	movf	___awdiv@divisor& (0+255),w,b
  6129  002F52  0100               	movlb	0	; () banked
  6130  002F54  5D80               	subwf	___awdiv@dividend& (0+255),w,b
  6131  002F56  0100               	movlb	0	; () banked
  6132  002F58  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
  6133  002F5A  0100               	movlb	0	; () banked
  6134  002F5C  5981               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  6135  002F5E  A0D8               	btfss	status,0,c
  6136  002F60  D00A               	goto	l6347
  6137                           
  6138                           ; BSR set to: 0
  6139  002F62  0100               	movlb	0	; () banked
  6140  002F64  5182               	movf	___awdiv@divisor& (0+255),w,b
  6141  002F66  0100               	movlb	0	; () banked
  6142  002F68  5F80               	subwf	___awdiv@dividend& (0+255),f,b
  6143  002F6A  0100               	movlb	0	; () banked
  6144  002F6C  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
  6145  002F6E  0100               	movlb	0	; () banked
  6146  002F70  5B81               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  6147                           
  6148                           ; BSR set to: 0
  6149  002F72  0100               	movlb	0	; () banked
  6150  002F74  8186               	bsf	___awdiv@quotient& (0+255),0,b
  6151  002F76                     l6347:
  6152                           
  6153                           ; BSR set to: 0
  6154  002F76  0100               	movlb	0	; () banked
  6155  002F78  90D8               	bcf	status,0,c
  6156  002F7A  3383               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  6157  002F7C  3382               	rrcf	___awdiv@divisor& (0+255),f,b
  6158                           
  6159                           ; BSR set to: 0
  6160  002F7E  0100               	movlb	0	; () banked
  6161  002F80  2F84               	decfsz	___awdiv@counter& (0+255),f,b
  6162  002F82  D7E1               	goto	l6339
  6163  002F84                     l6351:
  6164                           
  6165                           ; BSR set to: 0
  6166  002F84  0100               	movlb	0	; () banked
  6167  002F86  5185               	movf	___awdiv@sign& (0+255),w,b
  6168  002F88  0100               	movlb	0	; () banked
  6169  002F8A  B4D8               	btfsc	status,2,c
  6170  002F8C  D005               	goto	l6355
  6171                           
  6172                           ; BSR set to: 0
  6173  002F8E  0100               	movlb	0	; () banked
  6174  002F90  6D86               	negf	___awdiv@quotient& (0+255),b
  6175  002F92  1F87               	comf	(___awdiv@quotient+1)& (0+255),f,b
  6176  002F94  B0D8               	btfsc	status,0,c
  6177  002F96  2B87               	incf	(___awdiv@quotient+1)& (0+255),f,b
  6178  002F98                     l6355:
  6179                           
  6180                           ; BSR set to: 0
  6181  002F98  C086  F080         	movff	___awdiv@quotient,?___awdiv
  6182  002F9C  C087  F081         	movff	___awdiv@quotient+1,?___awdiv+1
  6183  002FA0  0012               	return	
  6184  002FA2                     __end_of___awdiv:
  6185                           	opt stack 0
  6186                           tblptru	equ	0xFF8
  6187                           tblptrh	equ	0xFF7
  6188                           tblptrl	equ	0xFF6
  6189                           tablat	equ	0xFF5
  6190                           prodh	equ	0xFF4
  6191                           prodl	equ	0xFF3
  6192                           intcon	equ	0xFF2
  6193                           intcon2	equ	0xFF1
  6194                           intcon3	equ	0xFF0
  6195                           postinc0	equ	0xFEE
  6196                           wreg	equ	0xFE8
  6197                           postdec1	equ	0xFE5
  6198                           fsr1l	equ	0xFE1
  6199                           indf2	equ	0xFDF
  6200                           fsr2h	equ	0xFDA
  6201                           fsr2l	equ	0xFD9
  6202                           status	equ	0xFD8
  6203                           
  6204 ;; *************** function _Eeprom_WriteByte *****************
  6205 ;; Defined at:
  6206 ;;		line 767 in file "../main.c"
  6207 ;; Parameters:    Size  Location     Type
  6208 ;;  address         2    0[BANK0 ] unsigned int 
  6209 ;;  data            1    2[BANK0 ] unsigned char 
  6210 ;; Auto vars:     Size  Location     Type
  6211 ;;		None
  6212 ;; Return value:  Size  Location     Type
  6213 ;;                  1    wreg      void 
  6214 ;; Registers used:
  6215 ;;		wreg, status,2
  6216 ;; Tracked objects:
  6217 ;;		On entry : 0/0
  6218 ;;		On exit  : 0/0
  6219 ;;		Unchanged: 0/0
  6220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6221 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6222 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6223 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6224 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6225 ;;Total ram usage:        3 bytes
  6226 ;; Hardware stack levels used:    1
  6227 ;; Hardware stack levels required when called:    5
  6228 ;; This function calls:
  6229 ;;		Nothing
  6230 ;; This function is called by:
  6231 ;;		_stopOperation
  6232 ;; This function uses a non-reentrant model
  6233 ;;
  6234                           
  6235                           	psect	text7
  6236  003626                     __ptext7:
  6237                           	opt stack 0
  6238  003626                     _Eeprom_WriteByte:
  6239                           	opt stack 24
  6240                           
  6241                           ;main.c: 769: EEADRH = (uint8_t)(address >> 8);
  6242                           
  6243                           ; BSR set to: 0
  6244                           ;incstack = 0
  6245  003626  0100               	movlb	0	; () banked
  6246  003628  5181               	movf	(Eeprom_WriteByte@address+1)& (0+255),w,b
  6247  00362A  6EAA               	movwf	4010,c	;volatile
  6248                           
  6249                           ; BSR set to: 0
  6250                           ;main.c: 770: EEADR = (uint8_t)address;
  6251  00362C  C080  FFA9         	movff	Eeprom_WriteByte@address,4009	;volatile
  6252                           
  6253                           ; BSR set to: 0
  6254                           ;main.c: 772: EEDATA = data;
  6255  003630  C082  FFA8         	movff	Eeprom_WriteByte@data,4008	;volatile
  6256                           
  6257                           ; BSR set to: 0
  6258                           ;main.c: 773: EECON1bits.EEPGD = 0;
  6259  003634  9EA6               	bcf	4006,7,c	;volatile
  6260                           
  6261                           ; BSR set to: 0
  6262                           ;main.c: 774: EECON1bits.CFGS = 0;
  6263  003636  9CA6               	bcf	4006,6,c	;volatile
  6264                           
  6265                           ; BSR set to: 0
  6266                           ;main.c: 775: EECON1bits.WREN = 1;
  6267  003638  84A6               	bsf	4006,2,c	;volatile
  6268                           
  6269                           ;main.c: 779: EECON2 = 0x55;
  6270  00363A  0E55               	movlw	85
  6271  00363C  6EA7               	movwf	4007,c	;volatile
  6272                           
  6273                           ;main.c: 780: EECON2 = 0xAA;
  6274  00363E  0EAA               	movlw	170
  6275  003640  6EA7               	movwf	4007,c	;volatile
  6276                           
  6277                           ; BSR set to: 0
  6278                           ;main.c: 781: EECON1bits.WR = 1;
  6279  003642  82A6               	bsf	4006,1,c	;volatile
  6280  003644                     l518:
  6281  003644  A8A1               	btfss	4001,4,c	;volatile
  6282  003646  D7FE               	goto	l518
  6283                           
  6284                           ;main.c: 787: }
  6285                           ;main.c: 789: PIR2bits.EEIF = 0;
  6286  003648  98A1               	bcf	4001,4,c	;volatile
  6287                           
  6288                           ;main.c: 790: EECON1bits.WREN = 0;
  6289  00364A  94A6               	bcf	4006,2,c	;volatile
  6290  00364C  0012               	return		;funcret
  6291  00364E                     __end_of_Eeprom_WriteByte:
  6292                           	opt stack 0
  6293                           tblptru	equ	0xFF8
  6294                           tblptrh	equ	0xFF7
  6295                           tblptrl	equ	0xFF6
  6296                           tablat	equ	0xFF5
  6297                           prodh	equ	0xFF4
  6298                           prodl	equ	0xFF3
  6299                           intcon	equ	0xFF2
  6300                           intcon2	equ	0xFF1
  6301                           intcon3	equ	0xFF0
  6302                           postinc0	equ	0xFEE
  6303                           wreg	equ	0xFE8
  6304                           postdec1	equ	0xFE5
  6305                           fsr1l	equ	0xFE1
  6306                           indf2	equ	0xFDF
  6307                           fsr2h	equ	0xFDA
  6308                           fsr2l	equ	0xFD9
  6309                           status	equ	0xFD8
  6310                           
  6311 ;; *************** function _show_log *****************
  6312 ;; Defined at:
  6313 ;;		line 798 in file "../main.c"
  6314 ;; Parameters:    Size  Location     Type
  6315 ;;  log_address     2   34[BANK0 ] unsigned int 
  6316 ;;  currScreen      1   36[BANK0 ] unsigned char 
  6317 ;; Auto vars:     Size  Location     Type
  6318 ;;  i               1   58[BANK0 ] unsigned char 
  6319 ;;  i               1   57[BANK0 ] unsigned char 
  6320 ;;  i               1   56[BANK0 ] unsigned char 
  6321 ;;  address         2   59[BANK0 ] unsigned int 
  6322 ;;  elapsed_time    2   48[BANK0 ] unsigned int 
  6323 ;;  Drain_num       2   46[BANK0 ] unsigned int 
  6324 ;;  Nine_num        2   44[BANK0 ] unsigned int 
  6325 ;;  C_num           2   42[BANK0 ] unsigned int 
  6326 ;;  AA_num          2   40[BANK0 ] unsigned int 
  6327 ;;  total_num       2   38[BANK0 ] unsigned int 
  6328 ;;  second          1   55[BANK0 ] unsigned char 
  6329 ;;  minute          1   54[BANK0 ] unsigned char 
  6330 ;;  hour            1   53[BANK0 ] unsigned char 
  6331 ;;  day             1   52[BANK0 ] unsigned char 
  6332 ;;  month           1   51[BANK0 ] unsigned char 
  6333 ;;  year            1   50[BANK0 ] unsigned char 
  6334 ;; Return value:  Size  Location     Type
  6335 ;;                  1    wreg      void 
  6336 ;; Registers used:
  6337 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6338 ;; Tracked objects:
  6339 ;;		On entry : 0/0
  6340 ;;		On exit  : 0/0
  6341 ;;		Unchanged: 0/0
  6342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6343 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6344 ;;      Locals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6345 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6346 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6347 ;;Total ram usage:       27 bytes
  6348 ;; Hardware stack levels used:    1
  6349 ;; Hardware stack levels required when called:    8
  6350 ;; This function calls:
  6351 ;;		_Eeprom_ReadByte
  6352 ;;		_lcdInst
  6353 ;;		_next_address
  6354 ;;		_printf
  6355 ;; This function is called by:
  6356 ;;		_main
  6357 ;; This function uses a non-reentrant model
  6358 ;;
  6359                           
  6360                           	psect	text8
  6361  001C66                     __ptext8:
  6362                           	opt stack 0
  6363  001C66                     _show_log:
  6364                           	opt stack 22
  6365                           
  6366                           ;main.c: 801: for(unsigned char i=0;i<200;i++){
  6367                           
  6368                           ;incstack = 0
  6369  001C66  0E00               	movlw	0
  6370  001C68  0100               	movlb	0	; () banked
  6371  001C6A  6FB8               	movwf	show_log@i& (0+255),b
  6372  001C6C                     l6689:
  6373                           
  6374                           ; BSR set to: 0
  6375  001C6C  0EC7               	movlw	199
  6376  001C6E  0100               	movlb	0	; () banked
  6377  001C70  65B8               	cpfsgt	show_log@i& (0+255),b
  6378  001C72  D001               	goto	l6693
  6379  001C74  D012               	goto	l528
  6380  001C76                     l6693:
  6381                           
  6382                           ; BSR set to: 0
  6383                           ;main.c: 802: if (screenMode != currScreen)
  6384  001C76  0100               	movlb	0	; () banked
  6385  001C78  51A4               	movf	show_log@currScreen& (0+255),w,b
  6386  001C7A  0100               	movlb	0	; () banked
  6387  001C7C  19FA               	xorwf	_screenMode& (0+255),w,b
  6388  001C7E  A4D8               	btfss	status,2,c
  6389  001C80  D00C               	goto	l528
  6390                           
  6391                           ; BSR set to: 0
  6392                           ;main.c: 804: _delay((unsigned long)((10)*(10000000/4000.0)));
  6393                           
  6394                           ; BSR set to: 0
  6395                           
  6396                           ; BSR set to: 0
  6397                           ;main.c: 803: break;
  6398  001C82  0E21               	movlw	33
  6399  001C84  0100               	movlb	0	; () banked
  6400  001C86  6FA5               	movwf	??_show_log& (0+255),b
  6401  001C88  0E76               	movlw	118
  6402  001C8A                     u7927:
  6403  001C8A  2EE8               	decfsz	wreg,f,c
  6404  001C8C  D7FE               	bra	u7927
  6405  001C8E  2FA5               	decfsz	??_show_log& (0+255),f,b
  6406  001C90  D7FC               	bra	u7927
  6407  001C92  F000               	nop	
  6408  001C94  0100               	movlb	0	; () banked
  6409  001C96  2BB8               	incf	show_log@i& (0+255),f,b
  6410  001C98  D7E9               	goto	l6689
  6411  001C9A                     l528:
  6412                           
  6413                           ; BSR set to: 0
  6414                           ;main.c: 805: }
  6415                           ;main.c: 806: uint16_t address = log_address;
  6416  001C9A  C0A2  F0BB         	movff	show_log@log_address,show_log@address
  6417  001C9E  C0A3  F0BC         	movff	show_log@log_address+1,show_log@address+1
  6418                           
  6419                           ; BSR set to: 0
  6420                           ;main.c: 807: unsigned char year = Eeprom_ReadByte(address);
  6421  001CA2  C0BB  F080         	movff	show_log@address,Eeprom_ReadByte@address
  6422  001CA6  C0BC  F081         	movff	show_log@address+1,Eeprom_ReadByte@address+1
  6423  001CAA  EC98  F01B         	call	_Eeprom_ReadByte	;wreg free
  6424  001CAE  0100               	movlb	0	; () banked
  6425  001CB0  6FB2               	movwf	show_log@year& (0+255),b
  6426                           
  6427                           ; BSR set to: 0
  6428                           ;main.c: 808: address = next_address(address);
  6429  001CB2  C0BB  F080         	movff	show_log@address,next_address@address
  6430  001CB6  C0BC  F081         	movff	show_log@address+1,next_address@address+1
  6431  001CBA  ECA4  F01B         	call	_next_address	;wreg free
  6432  001CBE  C080  F0BB         	movff	?_next_address,show_log@address
  6433  001CC2  C081  F0BC         	movff	?_next_address+1,show_log@address+1
  6434                           
  6435                           ;main.c: 809: unsigned char month = Eeprom_ReadByte(address);
  6436  001CC6  C0BB  F080         	movff	show_log@address,Eeprom_ReadByte@address
  6437  001CCA  C0BC  F081         	movff	show_log@address+1,Eeprom_ReadByte@address+1
  6438  001CCE  EC98  F01B         	call	_Eeprom_ReadByte	;wreg free
  6439  001CD2  0100               	movlb	0	; () banked
  6440  001CD4  6FB3               	movwf	show_log@month& (0+255),b
  6441                           
  6442                           ;main.c: 810: address = next_address(address);
  6443  001CD6  C0BB  F080         	movff	show_log@address,next_address@address
  6444  001CDA  C0BC  F081         	movff	show_log@address+1,next_address@address+1
  6445  001CDE  ECA4  F01B         	call	_next_address	;wreg free
  6446  001CE2  C080  F0BB         	movff	?_next_address,show_log@address
  6447  001CE6  C081  F0BC         	movff	?_next_address+1,show_log@address+1
  6448                           
  6449                           ;main.c: 811: unsigned char day = Eeprom_ReadByte(address);
  6450  001CEA  C0BB  F080         	movff	show_log@address,Eeprom_ReadByte@address
  6451  001CEE  C0BC  F081         	movff	show_log@address+1,Eeprom_ReadByte@address+1
  6452  001CF2  EC98  F01B         	call	_Eeprom_ReadByte	;wreg free
  6453  001CF6  0100               	movlb	0	; () banked
  6454  001CF8  6FB4               	movwf	show_log@day& (0+255),b
  6455                           
  6456                           ; BSR set to: 0
  6457                           ;main.c: 812: address = next_address(address);
  6458  001CFA  C0BB  F080         	movff	show_log@address,next_address@address
  6459  001CFE  C0BC  F081         	movff	show_log@address+1,next_address@address+1
  6460  001D02  ECA4  F01B         	call	_next_address	;wreg free
  6461  001D06  C080  F0BB         	movff	?_next_address,show_log@address
  6462  001D0A  C081  F0BC         	movff	?_next_address+1,show_log@address+1
  6463                           
  6464                           ;main.c: 813: unsigned char hour = Eeprom_ReadByte(address);
  6465  001D0E  C0BB  F080         	movff	show_log@address,Eeprom_ReadByte@address
  6466  001D12  C0BC  F081         	movff	show_log@address+1,Eeprom_ReadByte@address+1
  6467  001D16  EC98  F01B         	call	_Eeprom_ReadByte	;wreg free
  6468  001D1A  0100               	movlb	0	; () banked
  6469  001D1C  6FB5               	movwf	show_log@hour& (0+255),b
  6470                           
  6471                           ; BSR set to: 0
  6472                           ;main.c: 814: address = next_address(address);
  6473  001D1E  C0BB  F080         	movff	show_log@address,next_address@address
  6474  001D22  C0BC  F081         	movff	show_log@address+1,next_address@address+1
  6475  001D26  ECA4  F01B         	call	_next_address	;wreg free
  6476  001D2A  C080  F0BB         	movff	?_next_address,show_log@address
  6477  001D2E  C081  F0BC         	movff	?_next_address+1,show_log@address+1
  6478                           
  6479                           ;main.c: 815: unsigned char minute = Eeprom_ReadByte(address);
  6480  001D32  C0BB  F080         	movff	show_log@address,Eeprom_ReadByte@address
  6481  001D36  C0BC  F081         	movff	show_log@address+1,Eeprom_ReadByte@address+1
  6482  001D3A  EC98  F01B         	call	_Eeprom_ReadByte	;wreg free
  6483  001D3E  0100               	movlb	0	; () banked
  6484  001D40  6FB6               	movwf	show_log@minute& (0+255),b
  6485                           
  6486                           ;main.c: 816: address = next_address(address);
  6487  001D42  C0BB  F080         	movff	show_log@address,next_address@address
  6488  001D46  C0BC  F081         	movff	show_log@address+1,next_address@address+1
  6489  001D4A  ECA4  F01B         	call	_next_address	;wreg free
  6490  001D4E  C080  F0BB         	movff	?_next_address,show_log@address
  6491  001D52  C081  F0BC         	movff	?_next_address+1,show_log@address+1
  6492                           
  6493                           ;main.c: 817: unsigned char second = Eeprom_ReadByte(address);
  6494  001D56  C0BB  F080         	movff	show_log@address,Eeprom_ReadByte@address
  6495  001D5A  C0BC  F081         	movff	show_log@address+1,Eeprom_ReadByte@address+1
  6496  001D5E  EC98  F01B         	call	_Eeprom_ReadByte	;wreg free
  6497  001D62  0100               	movlb	0	; () banked
  6498  001D64  6FB7               	movwf	show_log@second& (0+255),b
  6499                           
  6500                           ; BSR set to: 0
  6501                           ;main.c: 818: address = next_address(address);
  6502  001D66  C0BB  F080         	movff	show_log@address,next_address@address
  6503  001D6A  C0BC  F081         	movff	show_log@address+1,next_address@address+1
  6504  001D6E  ECA4  F01B         	call	_next_address	;wreg free
  6505  001D72  C080  F0BB         	movff	?_next_address,show_log@address
  6506  001D76  C081  F0BC         	movff	?_next_address+1,show_log@address+1
  6507                           
  6508                           ;main.c: 820: unsigned int AA_num = Eeprom_ReadByte(address);
  6509  001D7A  C0BB  F080         	movff	show_log@address,Eeprom_ReadByte@address
  6510  001D7E  C0BC  F081         	movff	show_log@address+1,Eeprom_ReadByte@address+1
  6511  001D82  EC98  F01B         	call	_Eeprom_ReadByte	;wreg free
  6512  001D86  0100               	movlb	0	; () banked
  6513  001D88  6FA5               	movwf	??_show_log& (0+255),b
  6514  001D8A  0100               	movlb	0	; () banked
  6515  001D8C  51A5               	movf	??_show_log& (0+255),w,b
  6516  001D8E  0100               	movlb	0	; () banked
  6517  001D90  6FA8               	movwf	show_log@AA_num& (0+255),b
  6518  001D92  6BA9               	clrf	(show_log@AA_num+1)& (0+255),b
  6519                           
  6520                           ; BSR set to: 0
  6521                           ;main.c: 821: address = next_address(address);
  6522  001D94  C0BB  F080         	movff	show_log@address,next_address@address
  6523  001D98  C0BC  F081         	movff	show_log@address+1,next_address@address+1
  6524  001D9C  ECA4  F01B         	call	_next_address	;wreg free
  6525  001DA0  C080  F0BB         	movff	?_next_address,show_log@address
  6526  001DA4  C081  F0BC         	movff	?_next_address+1,show_log@address+1
  6527                           
  6528                           ;main.c: 822: unsigned int C_num = Eeprom_ReadByte(address);
  6529  001DA8  C0BB  F080         	movff	show_log@address,Eeprom_ReadByte@address
  6530  001DAC  C0BC  F081         	movff	show_log@address+1,Eeprom_ReadByte@address+1
  6531  001DB0  EC98  F01B         	call	_Eeprom_ReadByte	;wreg free
  6532  001DB4  0100               	movlb	0	; () banked
  6533  001DB6  6FA5               	movwf	??_show_log& (0+255),b
  6534  001DB8  0100               	movlb	0	; () banked
  6535  001DBA  51A5               	movf	??_show_log& (0+255),w,b
  6536  001DBC  0100               	movlb	0	; () banked
  6537  001DBE  6FAA               	movwf	show_log@C_num& (0+255),b
  6538  001DC0  6BAB               	clrf	(show_log@C_num+1)& (0+255),b
  6539                           
  6540                           ; BSR set to: 0
  6541                           ;main.c: 823: address = next_address(address);
  6542  001DC2  C0BB  F080         	movff	show_log@address,next_address@address
  6543  001DC6  C0BC  F081         	movff	show_log@address+1,next_address@address+1
  6544  001DCA  ECA4  F01B         	call	_next_address	;wreg free
  6545  001DCE  C080  F0BB         	movff	?_next_address,show_log@address
  6546  001DD2  C081  F0BC         	movff	?_next_address+1,show_log@address+1
  6547                           
  6548                           ;main.c: 824: unsigned int Nine_num = Eeprom_ReadByte(address);
  6549  001DD6  C0BB  F080         	movff	show_log@address,Eeprom_ReadByte@address
  6550  001DDA  C0BC  F081         	movff	show_log@address+1,Eeprom_ReadByte@address+1
  6551  001DDE  EC98  F01B         	call	_Eeprom_ReadByte	;wreg free
  6552  001DE2  0100               	movlb	0	; () banked
  6553  001DE4  6FA5               	movwf	??_show_log& (0+255),b
  6554  001DE6  0100               	movlb	0	; () banked
  6555  001DE8  51A5               	movf	??_show_log& (0+255),w,b
  6556  001DEA  0100               	movlb	0	; () banked
  6557  001DEC  6FAC               	movwf	show_log@Nine_num& (0+255),b
  6558  001DEE  6BAD               	clrf	(show_log@Nine_num+1)& (0+255),b
  6559                           
  6560                           ; BSR set to: 0
  6561                           ;main.c: 825: address = next_address(address);
  6562  001DF0  C0BB  F080         	movff	show_log@address,next_address@address
  6563  001DF4  C0BC  F081         	movff	show_log@address+1,next_address@address+1
  6564  001DF8  ECA4  F01B         	call	_next_address	;wreg free
  6565  001DFC  C080  F0BB         	movff	?_next_address,show_log@address
  6566  001E00  C081  F0BC         	movff	?_next_address+1,show_log@address+1
  6567                           
  6568                           ;main.c: 826: unsigned int Drain_num = Eeprom_ReadByte(address);
  6569  001E04  C0BB  F080         	movff	show_log@address,Eeprom_ReadByte@address
  6570  001E08  C0BC  F081         	movff	show_log@address+1,Eeprom_ReadByte@address+1
  6571  001E0C  EC98  F01B         	call	_Eeprom_ReadByte	;wreg free
  6572  001E10  0100               	movlb	0	; () banked
  6573  001E12  6FA5               	movwf	??_show_log& (0+255),b
  6574  001E14  0100               	movlb	0	; () banked
  6575  001E16  51A5               	movf	??_show_log& (0+255),w,b
  6576  001E18  0100               	movlb	0	; () banked
  6577  001E1A  6FAE               	movwf	show_log@Drain_num& (0+255),b
  6578  001E1C  6BAF               	clrf	(show_log@Drain_num+1)& (0+255),b
  6579                           
  6580                           ; BSR set to: 0
  6581                           ;main.c: 827: address = next_address(address);
  6582  001E1E  C0BB  F080         	movff	show_log@address,next_address@address
  6583  001E22  C0BC  F081         	movff	show_log@address+1,next_address@address+1
  6584  001E26  ECA4  F01B         	call	_next_address	;wreg free
  6585  001E2A  C080  F0BB         	movff	?_next_address,show_log@address
  6586  001E2E  C081  F0BC         	movff	?_next_address+1,show_log@address+1
  6587                           
  6588                           ;main.c: 828: unsigned int total_num = Eeprom_ReadByte(address);
  6589  001E32  C0BB  F080         	movff	show_log@address,Eeprom_ReadByte@address
  6590  001E36  C0BC  F081         	movff	show_log@address+1,Eeprom_ReadByte@address+1
  6591  001E3A  EC98  F01B         	call	_Eeprom_ReadByte	;wreg free
  6592  001E3E  0100               	movlb	0	; () banked
  6593  001E40  6FA5               	movwf	??_show_log& (0+255),b
  6594  001E42  0100               	movlb	0	; () banked
  6595  001E44  51A5               	movf	??_show_log& (0+255),w,b
  6596  001E46  0100               	movlb	0	; () banked
  6597  001E48  6FA6               	movwf	show_log@total_num& (0+255),b
  6598  001E4A  6BA7               	clrf	(show_log@total_num+1)& (0+255),b
  6599                           
  6600                           ; BSR set to: 0
  6601                           ;main.c: 829: address = next_address(address);
  6602  001E4C  C0BB  F080         	movff	show_log@address,next_address@address
  6603  001E50  C0BC  F081         	movff	show_log@address+1,next_address@address+1
  6604  001E54  ECA4  F01B         	call	_next_address	;wreg free
  6605  001E58  C080  F0BB         	movff	?_next_address,show_log@address
  6606  001E5C  C081  F0BC         	movff	?_next_address+1,show_log@address+1
  6607                           
  6608                           ;main.c: 830: unsigned int elapsed_time = Eeprom_ReadByte(address);
  6609  001E60  C0BB  F080         	movff	show_log@address,Eeprom_ReadByte@address
  6610  001E64  C0BC  F081         	movff	show_log@address+1,Eeprom_ReadByte@address+1
  6611  001E68  EC98  F01B         	call	_Eeprom_ReadByte	;wreg free
  6612  001E6C  0100               	movlb	0	; () banked
  6613  001E6E  6FA5               	movwf	??_show_log& (0+255),b
  6614  001E70  0100               	movlb	0	; () banked
  6615  001E72  51A5               	movf	??_show_log& (0+255),w,b
  6616  001E74  0100               	movlb	0	; () banked
  6617  001E76  6FB0               	movwf	show_log@elapsed_time& (0+255),b
  6618  001E78  6BB1               	clrf	(show_log@elapsed_time+1)& (0+255),b
  6619                           
  6620                           ;main.c: 832: while (screenMode == currScreen){
  6621  001E7A  D08C               	goto	l6781
  6622  001E7C                     l6741:
  6623                           
  6624                           ; BSR set to: 0
  6625                           ;main.c: 833: lcdInst(0b10000000);;
  6626  001E7C  0E80               	movlw	128
  6627  001E7E  ECDF  F01B         	call	_lcdInst
  6628                           
  6629                           ;main.c: 834: printf("%02x/%02x/%02x        ", year,month,day);
  6630  001E82  0EC3               	movlw	low STR_20
  6631  001E84  0100               	movlb	0	; () banked
  6632  001E86  6F8C               	movwf	printf@f& (0+255),b
  6633  001E88  0EFD               	movlw	high STR_20
  6634  001E8A  0100               	movlb	0	; () banked
  6635  001E8C  6F8D               	movwf	(printf@f+1)& (0+255),b
  6636  001E8E  C0B2  F08E         	movff	show_log@year,?_printf+2
  6637  001E92  0100               	movlb	0	; () banked
  6638  001E94  6B8F               	clrf	(?_printf+3)& (0+255),b
  6639  001E96  C0B3  F090         	movff	show_log@month,?_printf+4
  6640  001E9A  0100               	movlb	0	; () banked
  6641  001E9C  6B91               	clrf	(?_printf+5)& (0+255),b
  6642  001E9E  C0B4  F092         	movff	show_log@day,?_printf+6
  6643  001EA2  0100               	movlb	0	; () banked
  6644  001EA4  6B93               	clrf	(?_printf+7)& (0+255),b
  6645  001EA6  EC59  F00C         	call	_printf	;wreg free
  6646                           
  6647                           ;main.c: 835: lcdInst(0b11000000);;
  6648  001EAA  0EC0               	movlw	192
  6649  001EAC  ECDF  F01B         	call	_lcdInst
  6650                           
  6651                           ;main.c: 836: printf("%02x:%02x:%02x        ", hour,minute, second);
  6652  001EB0  0EDA               	movlw	low STR_21
  6653  001EB2  0100               	movlb	0	; () banked
  6654  001EB4  6F8C               	movwf	printf@f& (0+255),b
  6655  001EB6  0EFD               	movlw	high STR_21
  6656  001EB8  0100               	movlb	0	; () banked
  6657  001EBA  6F8D               	movwf	(printf@f+1)& (0+255),b
  6658  001EBC  C0B5  F08E         	movff	show_log@hour,?_printf+2
  6659  001EC0  0100               	movlb	0	; () banked
  6660  001EC2  6B8F               	clrf	(?_printf+3)& (0+255),b
  6661  001EC4  C0B6  F090         	movff	show_log@minute,?_printf+4
  6662  001EC8  0100               	movlb	0	; () banked
  6663  001ECA  6B91               	clrf	(?_printf+5)& (0+255),b
  6664  001ECC  C0B7  F092         	movff	show_log@second,?_printf+6
  6665  001ED0  0100               	movlb	0	; () banked
  6666  001ED2  6B93               	clrf	(?_printf+7)& (0+255),b
  6667  001ED4  EC59  F00C         	call	_printf	;wreg free
  6668                           
  6669                           ;main.c: 837: for(unsigned char i=0;i<200;i++){
  6670  001ED8  0E00               	movlw	0
  6671  001EDA  0100               	movlb	0	; () banked
  6672  001EDC  6FB9               	movwf	show_log@i_905& (0+255),b
  6673  001EDE                     l6749:
  6674                           
  6675                           ; BSR set to: 0
  6676  001EDE  0EC7               	movlw	199
  6677  001EE0  0100               	movlb	0	; () banked
  6678  001EE2  65B9               	cpfsgt	show_log@i_905& (0+255),b
  6679  001EE4  D001               	goto	l6753
  6680  001EE6  D012               	goto	l6761
  6681  001EE8                     l6753:
  6682                           
  6683                           ; BSR set to: 0
  6684                           ;main.c: 838: if (screenMode != currScreen)
  6685  001EE8  0100               	movlb	0	; () banked
  6686  001EEA  51A4               	movf	show_log@currScreen& (0+255),w,b
  6687  001EEC  0100               	movlb	0	; () banked
  6688  001EEE  19FA               	xorwf	_screenMode& (0+255),w,b
  6689  001EF0  A4D8               	btfss	status,2,c
  6690  001EF2  D00C               	goto	l6761
  6691                           
  6692                           ; BSR set to: 0
  6693                           ;main.c: 840: _delay((unsigned long)((10)*(10000000/4000.0)));
  6694                           
  6695                           ; BSR set to: 0
  6696                           
  6697                           ; BSR set to: 0
  6698                           ;main.c: 839: break;
  6699  001EF4  0E21               	movlw	33
  6700  001EF6  0100               	movlb	0	; () banked
  6701  001EF8  6FA5               	movwf	??_show_log& (0+255),b
  6702  001EFA  0E76               	movlw	118
  6703  001EFC                     u7937:
  6704  001EFC  2EE8               	decfsz	wreg,f,c
  6705  001EFE  D7FE               	bra	u7937
  6706  001F00  2FA5               	decfsz	??_show_log& (0+255),f,b
  6707  001F02  D7FC               	bra	u7937
  6708  001F04  F000               	nop	
  6709  001F06  0100               	movlb	0	; () banked
  6710  001F08  2BB9               	incf	show_log@i_905& (0+255),f,b
  6711  001F0A  D7E9               	goto	l6749
  6712  001F0C                     l6761:
  6713                           
  6714                           ; BSR set to: 0
  6715                           ;main.c: 841: }
  6716                           ;main.c: 842: lcdInst(0b10000000);;
  6717  001F0C  0E80               	movlw	128
  6718  001F0E  ECDF  F01B         	call	_lcdInst
  6719                           
  6720                           ;main.c: 843: printf("AA:%02d C:%02d 9V:%02d", AA_num, C_num, Nine_num);
  6721  001F12  0E1F               	movlw	low STR_37
  6722  001F14  0100               	movlb	0	; () banked
  6723  001F16  6F8C               	movwf	printf@f& (0+255),b
  6724  001F18  0EFE               	movlw	high STR_37
  6725  001F1A  0100               	movlb	0	; () banked
  6726  001F1C  6F8D               	movwf	(printf@f+1)& (0+255),b
  6727  001F1E  C0A8  F08E         	movff	show_log@AA_num,?_printf+2
  6728  001F22  C0A9  F08F         	movff	show_log@AA_num+1,?_printf+3
  6729  001F26  C0AA  F090         	movff	show_log@C_num,?_printf+4
  6730  001F2A  C0AB  F091         	movff	show_log@C_num+1,?_printf+5
  6731  001F2E  C0AC  F092         	movff	show_log@Nine_num,?_printf+6
  6732  001F32  C0AD  F093         	movff	show_log@Nine_num+1,?_printf+7
  6733  001F36  EC59  F00C         	call	_printf	;wreg free
  6734                           
  6735                           ;main.c: 844: lcdInst(0b11000000);;
  6736  001F3A  0EC0               	movlw	192
  6737  001F3C  ECDF  F01B         	call	_lcdInst
  6738                           
  6739                           ;main.c: 845: printf("X:%02d TIME:%ds    ", Drain_num, elapsed_time);
  6740  001F40  0E61               	movlw	low STR_38
  6741  001F42  0100               	movlb	0	; () banked
  6742  001F44  6F8C               	movwf	printf@f& (0+255),b
  6743  001F46  0EFE               	movlw	high STR_38
  6744  001F48  0100               	movlb	0	; () banked
  6745  001F4A  6F8D               	movwf	(printf@f+1)& (0+255),b
  6746  001F4C  C0AE  F08E         	movff	show_log@Drain_num,?_printf+2
  6747  001F50  C0AF  F08F         	movff	show_log@Drain_num+1,?_printf+3
  6748  001F54  C0B0  F090         	movff	show_log@elapsed_time,?_printf+4
  6749  001F58  C0B1  F091         	movff	show_log@elapsed_time+1,?_printf+5
  6750  001F5C  EC59  F00C         	call	_printf	;wreg free
  6751                           
  6752                           ;main.c: 848: for(unsigned char i=0;i<200;i++){
  6753  001F60  0E00               	movlw	0
  6754  001F62  0100               	movlb	0	; () banked
  6755  001F64  6FBA               	movwf	show_log@i_908& (0+255),b
  6756  001F66                     l6769:
  6757                           
  6758                           ; BSR set to: 0
  6759  001F66  0EC7               	movlw	199
  6760  001F68  0100               	movlb	0	; () banked
  6761  001F6A  65BA               	cpfsgt	show_log@i_908& (0+255),b
  6762  001F6C  D001               	goto	l6773
  6763  001F6E  D012               	goto	l6781
  6764  001F70                     l6773:
  6765                           
  6766                           ; BSR set to: 0
  6767                           ;main.c: 849: if (screenMode != currScreen)
  6768  001F70  0100               	movlb	0	; () banked
  6769  001F72  51A4               	movf	show_log@currScreen& (0+255),w,b
  6770  001F74  0100               	movlb	0	; () banked
  6771  001F76  19FA               	xorwf	_screenMode& (0+255),w,b
  6772  001F78  A4D8               	btfss	status,2,c
  6773  001F7A  D00C               	goto	l6781
  6774                           
  6775                           ; BSR set to: 0
  6776                           ;main.c: 851: _delay((unsigned long)((10)*(10000000/4000.0)));
  6777                           
  6778                           ; BSR set to: 0
  6779                           
  6780                           ; BSR set to: 0
  6781                           ;main.c: 850: break;
  6782  001F7C  0E21               	movlw	33
  6783  001F7E  0100               	movlb	0	; () banked
  6784  001F80  6FA5               	movwf	??_show_log& (0+255),b
  6785  001F82  0E76               	movlw	118
  6786  001F84                     u7947:
  6787  001F84  2EE8               	decfsz	wreg,f,c
  6788  001F86  D7FE               	bra	u7947
  6789  001F88  2FA5               	decfsz	??_show_log& (0+255),f,b
  6790  001F8A  D7FC               	bra	u7947
  6791  001F8C  F000               	nop	
  6792  001F8E  0100               	movlb	0	; () banked
  6793  001F90  2BBA               	incf	show_log@i_908& (0+255),f,b
  6794  001F92  D7E9               	goto	l6769
  6795  001F94                     l6781:
  6796                           
  6797                           ; BSR set to: 0
  6798  001F94  0100               	movlb	0	; () banked
  6799  001F96  51A4               	movf	show_log@currScreen& (0+255),w,b
  6800  001F98  0100               	movlb	0	; () banked
  6801  001F9A  19FA               	xorwf	_screenMode& (0+255),w,b
  6802  001F9C  A4D8               	btfss	status,2,c
  6803  001F9E  0012               	return	
  6804  001FA0  D76D               	goto	l6741
  6805  001FA2                     __end_of_show_log:
  6806                           	opt stack 0
  6807                           tblptru	equ	0xFF8
  6808                           tblptrh	equ	0xFF7
  6809                           tblptrl	equ	0xFF6
  6810                           tablat	equ	0xFF5
  6811                           prodh	equ	0xFF4
  6812                           prodl	equ	0xFF3
  6813                           intcon	equ	0xFF2
  6814                           intcon2	equ	0xFF1
  6815                           intcon3	equ	0xFF0
  6816                           postinc0	equ	0xFEE
  6817                           wreg	equ	0xFE8
  6818                           postdec1	equ	0xFE5
  6819                           fsr1l	equ	0xFE1
  6820                           indf2	equ	0xFDF
  6821                           fsr2h	equ	0xFDA
  6822                           fsr2l	equ	0xFD9
  6823                           status	equ	0xFD8
  6824                           
  6825 ;; *************** function _printf *****************
  6826 ;; Defined at:
  6827 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  6828 ;; Parameters:    Size  Location     Type
  6829 ;;  f               2   12[BANK0 ] PTR const unsigned char 
  6830 ;;		 -> STR_39(22), STR_38(20), STR_37(23), STR_36(23), 
  6831 ;;		 -> STR_35(23), STR_34(17), STR_33(23), STR_32(23), 
  6832 ;;		 -> STR_31(17), STR_30(17), STR_29(17), STR_28(17), 
  6833 ;;		 -> STR_27(17), STR_26(17), STR_25(17), STR_24(17), 
  6834 ;;		 -> STR_23(17), STR_22(17), STR_21(23), STR_20(23), 
  6835 ;;		 -> STR_19(17), STR_18(21), STR_17(17), STR_16(21), 
  6836 ;;		 -> STR_15(17), STR_14(21), STR_13(17), STR_12(19), 
  6837 ;;		 -> STR_11(17), STR_10(19), STR_9(17), STR_8(25), 
  6838 ;;		 -> STR_7(17), STR_6(17), STR_5(17), STR_4(17), 
  6839 ;;		 -> STR_3(17), STR_2(17), STR_1(17), 
  6840 ;; Auto vars:     Size  Location     Type
  6841 ;;  idx             1   24[BANK0 ] unsigned char 
  6842 ;;  tmpval          4    0        struct .
  6843 ;;  cp              3    0        PTR const unsigned char 
  6844 ;;  width           2   31[BANK0 ] int 
  6845 ;;  val             2   28[BANK0 ] unsigned int 
  6846 ;;  ap              2   25[BANK0 ] PTR void [1]
  6847 ;;		 -> ?i2_printf(2), ?_printf(2), 
  6848 ;;  len             2    0        unsigned int 
  6849 ;;  c               1   33[BANK0 ] char 
  6850 ;;  flag            1   30[BANK0 ] unsigned char 
  6851 ;;  prec            1   27[BANK0 ] char 
  6852 ;; Return value:  Size  Location     Type
  6853 ;;                  2   12[BANK0 ] int 
  6854 ;; Registers used:
  6855 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6856 ;; Tracked objects:
  6857 ;;		On entry : 0/0
  6858 ;;		On exit  : 0/0
  6859 ;;		Unchanged: 0/0
  6860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6861 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6862 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6863 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6864 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6865 ;;Total ram usage:       22 bytes
  6866 ;; Hardware stack levels used:    1
  6867 ;; Hardware stack levels required when called:    7
  6868 ;; This function calls:
  6869 ;;		___lwdiv
  6870 ;;		___lwmod
  6871 ;;		___wmul
  6872 ;;		_isdigit
  6873 ;;		_putch
  6874 ;; This function is called by:
  6875 ;;		_main
  6876 ;;		_show_log
  6877 ;; This function uses a non-reentrant model
  6878 ;;
  6879                           
  6880                           	psect	text9
  6881  0018B2                     __ptext9:
  6882                           	opt stack 0
  6883  0018B2                     _printf:
  6884                           	opt stack 22
  6885                           
  6886                           ;doprnt.c: 466: va_list ap;
  6887                           ;doprnt.c: 499: signed char c;
  6888                           ;doprnt.c: 501: int width;
  6889                           ;doprnt.c: 506: signed char prec;
  6890                           ;doprnt.c: 508: unsigned char flag;
  6891                           ;doprnt.c: 523: union {
  6892                           ;doprnt.c: 524: unsigned long vd;
  6893                           ;doprnt.c: 525: double integ;
  6894                           ;doprnt.c: 526: } tmpval;
  6895                           ;doprnt.c: 528: unsigned int val;
  6896                           ;doprnt.c: 529: unsigned len;
  6897                           ;doprnt.c: 530: const char * cp;
  6898                           ;doprnt.c: 533: *ap = __va_start();
  6899                           
  6900                           ; BSR set to: 0
  6901                           ;incstack = 0
  6902  0018B2  0E8E               	movlw	low (?_printf+2)
  6903  0018B4  0100               	movlb	0	; () banked
  6904  0018B6  6F99               	movwf	printf@ap& (0+255),b
  6905  0018B8  0E00               	movlw	high (?_printf+2)
  6906  0018BA  0100               	movlb	0	; () banked
  6907  0018BC  6F9A               	movwf	(printf@ap+1)& (0+255),b
  6908                           
  6909                           ;doprnt.c: 536: while(c = *f++) {
  6910  0018BE  D1C4               	goto	l6247
  6911  0018C0                     l6121:
  6912                           
  6913                           ; BSR set to: 0
  6914                           ;doprnt.c: 538: if(c != '%')
  6915  0018C0  0E25               	movlw	37
  6916  0018C2  0100               	movlb	0	; () banked
  6917  0018C4  19A1               	xorwf	printf@c& (0+255),w,b
  6918  0018C6  B4D8               	btfsc	status,2,c
  6919  0018C8  D005               	goto	l6125
  6920                           
  6921                           ; BSR set to: 0
  6922                           ;doprnt.c: 540: {
  6923                           ;doprnt.c: 541: (putch(c) );
  6924  0018CA  0100               	movlb	0	; () banked
  6925  0018CC  51A1               	movf	printf@c& (0+255),w,b
  6926  0018CE  ECD7  F01B         	call	_putch
  6927                           
  6928                           ;doprnt.c: 542: continue;
  6929  0018D2  D1BA               	goto	l6247
  6930  0018D4                     l6125:
  6931                           
  6932                           ;doprnt.c: 543: }
  6933                           ;doprnt.c: 546: width = 0;
  6934  0018D4  0E00               	movlw	0
  6935  0018D6  0100               	movlb	0	; () banked
  6936  0018D8  6FA0               	movwf	(printf@width+1)& (0+255),b
  6937  0018DA  0E00               	movlw	0
  6938  0018DC  6F9F               	movwf	printf@width& (0+255),b
  6939                           
  6940                           ;doprnt.c: 548: flag = 0;
  6941  0018DE  0E00               	movlw	0
  6942  0018E0  0100               	movlb	0	; () banked
  6943  0018E2  6F9E               	movwf	printf@flag& (0+255),b
  6944                           
  6945                           ; BSR set to: 0
  6946                           ;doprnt.c: 551: switch(*f) {
  6947                           
  6948                           ;doprnt.c: 550: for(;;) {
  6949  0018E4  D005               	goto	l6131
  6950  0018E6                     l6127:
  6951                           
  6952                           ;doprnt.c: 580: flag |= 0x04;
  6953  0018E6  0100               	movlb	0	; () banked
  6954  0018E8  859E               	bsf	printf@flag& (0+255),2,b
  6955                           
  6956                           ;doprnt.c: 581: f++;
  6957  0018EA  0100               	movlb	0	; () banked
  6958  0018EC  4B8C               	infsnz	printf@f& (0+255),f,b
  6959  0018EE  2B8D               	incf	(printf@f+1)& (0+255),f,b
  6960  0018F0                     l6131:
  6961  0018F0  C08C  FFF6         	movff	printf@f,tblptrl
  6962  0018F4  C08D  FFF7         	movff	printf@f+1,tblptrh
  6963  0018F8                     	if	0	;tblptru may be non-zero
  6964  0018F8                     	endif
  6965  0018F8                     	if	0	;tblptru may be non-zero
  6966  0018F8                     	endif
  6967  0018F8  0008               	tblrd		*
  6968  0018FA  50F5               	movf	tablat,w,c
  6969                           
  6970                           ; Switch size 1, requested type "space"
  6971                           ; Number of cases is 1, Range of values is 48 to 48
  6972                           ; switch strategies available:
  6973                           ; Name         Instructions Cycles
  6974                           ; simple_byte            4     3 (average)
  6975                           ;	Chosen strategy is simple_byte
  6976  0018FC  0A30               	xorlw	48	; case 48
  6977  0018FE  B4D8               	btfsc	status,2,c
  6978  001900  D7F2               	goto	l6127
  6979                           
  6980                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  6981                           
  6982                           ;doprnt.c: 586: }
  6983                           
  6984                           ;doprnt.c: 585: break;
  6985  001902  C08C  FFF6         	movff	printf@f,tblptrl
  6986  001906  C08D  FFF7         	movff	printf@f+1,tblptrh
  6987  00190A                     	if	0	;tblptru may be non-zero
  6988  00190A                     	endif
  6989  00190A                     	if	0	;tblptru may be non-zero
  6990  00190A                     	endif
  6991  00190A  0008               	tblrd		*
  6992  00190C  50F5               	movf	tablat,w,c
  6993  00190E  ECFE  F01A         	call	_isdigit
  6994  001912  A0D8               	btfss	status,0,c
  6995  001914  D044               	goto	l6149
  6996                           
  6997                           ;doprnt.c: 598: width = 0;
  6998  001916  0E00               	movlw	0
  6999  001918  0100               	movlb	0	; () banked
  7000  00191A  6FA0               	movwf	(printf@width+1)& (0+255),b
  7001  00191C  0E00               	movlw	0
  7002  00191E  6F9F               	movwf	printf@width& (0+255),b
  7003  001920                     l6137:
  7004                           
  7005                           ;doprnt.c: 600: width *= 10;
  7006  001920  C09F  F080         	movff	printf@width,___wmul@multiplier
  7007  001924  C0A0  F081         	movff	printf@width+1,___wmul@multiplier+1
  7008  001928  0E00               	movlw	0
  7009  00192A  0100               	movlb	0	; () banked
  7010  00192C  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7011  00192E  0E0A               	movlw	10
  7012  001930  6F82               	movwf	___wmul@multiplicand& (0+255),b
  7013  001932  ECCC  F01A         	call	___wmul	;wreg free
  7014  001936  C080  F09F         	movff	?___wmul,printf@width
  7015  00193A  C081  F0A0         	movff	?___wmul+1,printf@width+1
  7016                           
  7017                           ;doprnt.c: 601: width += *f++ - '0';
  7018  00193E  0ED0               	movlw	208
  7019  001940  0100               	movlb	0	; () banked
  7020  001942  6F94               	movwf	??_printf& (0+255),b
  7021  001944  0EFF               	movlw	255
  7022  001946  0100               	movlb	0	; () banked
  7023  001948  6F95               	movwf	(??_printf+1)& (0+255),b
  7024  00194A  C08C  FFF6         	movff	printf@f,tblptrl
  7025  00194E  C08D  FFF7         	movff	printf@f+1,tblptrh
  7026  001952                     	if	0	;tblptru may be non-zero
  7027  001952                     	endif
  7028  001952                     	if	0	;tblptru may be non-zero
  7029  001952                     	endif
  7030  001952  0008               	tblrd		*
  7031  001954  50F5               	movf	tablat,w,c
  7032  001956  0100               	movlb	0	; () banked
  7033  001958  6F96               	movwf	(??_printf+2)& (0+255),b
  7034  00195A  6B97               	clrf	(??_printf+3)& (0+255),b
  7035  00195C  0100               	movlb	0	; () banked
  7036  00195E  5194               	movf	??_printf& (0+255),w,b
  7037  001960  0100               	movlb	0	; () banked
  7038  001962  2796               	addwf	(??_printf+2)& (0+255),f,b
  7039  001964  0100               	movlb	0	; () banked
  7040  001966  5195               	movf	(??_printf+1)& (0+255),w,b
  7041  001968  0100               	movlb	0	; () banked
  7042  00196A  2397               	addwfc	(??_printf+3)& (0+255),f,b
  7043  00196C  0100               	movlb	0	; () banked
  7044  00196E  5196               	movf	(??_printf+2)& (0+255),w,b
  7045  001970  0100               	movlb	0	; () banked
  7046  001972  279F               	addwf	printf@width& (0+255),f,b
  7047  001974  0100               	movlb	0	; () banked
  7048  001976  5197               	movf	(??_printf+3)& (0+255),w,b
  7049  001978  0100               	movlb	0	; () banked
  7050  00197A  23A0               	addwfc	(printf@width+1)& (0+255),f,b
  7051                           
  7052                           ; BSR set to: 0
  7053  00197C  0100               	movlb	0	; () banked
  7054  00197E  4B8C               	infsnz	printf@f& (0+255),f,b
  7055  001980  2B8D               	incf	(printf@f+1)& (0+255),f,b
  7056                           
  7057                           ; BSR set to: 0
  7058                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  7059  001982  C08C  FFF6         	movff	printf@f,tblptrl
  7060  001986  C08D  FFF7         	movff	printf@f+1,tblptrh
  7061  00198A                     	if	0	;tblptru may be non-zero
  7062  00198A                     	endif
  7063  00198A                     	if	0	;tblptru may be non-zero
  7064  00198A                     	endif
  7065  00198A  0008               	tblrd		*
  7066  00198C  50F5               	movf	tablat,w,c
  7067  00198E  ECFE  F01A         	call	_isdigit
  7068  001992  A0D8               	btfss	status,0,c
  7069  001994  D004               	goto	l6149
  7070  001996  D7C4               	goto	l6137
  7071  001998                     l6145:
  7072                           
  7073                           ;doprnt.c: 721: flag |= 0x80;
  7074  001998  0100               	movlb	0	; () banked
  7075  00199A  8F9E               	bsf	printf@flag& (0+255),7,b
  7076                           
  7077                           ;doprnt.c: 723: break;
  7078  00199C  D019               	goto	l673
  7079  00199E                     l6149:
  7080  00199E  C08C  FFF6         	movff	printf@f,tblptrl
  7081  0019A2  C08D  FFF7         	movff	printf@f+1,tblptrh
  7082  0019A6  0100               	movlb	0	; () banked
  7083  0019A8  4B8C               	infsnz	printf@f& (0+255),f,b
  7084  0019AA  2B8D               	incf	(printf@f+1)& (0+255),f,b
  7085  0019AC                     	if	0	;tblptru may be non-zero
  7086  0019AC                     	endif
  7087  0019AC                     	if	0	;tblptru may be non-zero
  7088  0019AC                     	endif
  7089  0019AC  0008               	tblrd		*
  7090  0019AE  CFF5 F0A1          	movff	tablat,printf@c
  7091  0019B2  0100               	movlb	0	; () banked
  7092  0019B4  51A1               	movf	printf@c& (0+255),w,b
  7093                           
  7094                           ; Switch size 1, requested type "space"
  7095                           ; Number of cases is 4, Range of values is 0 to 120
  7096                           ; switch strategies available:
  7097                           ; Name         Instructions Cycles
  7098                           ; simple_byte           13     7 (average)
  7099                           ;	Chosen strategy is simple_byte
  7100  0019B6  0A00               	xorlw	0	; case 0
  7101  0019B8  B4D8               	btfsc	status,2,c
  7102  0019BA  0012               	return	
  7103  0019BC  0A64               	xorlw	100	; case 100
  7104  0019BE  B4D8               	btfsc	status,2,c
  7105  0019C0  D007               	goto	l673
  7106  0019C2  0A0D               	xorlw	13	; case 105
  7107  0019C4  B4D8               	btfsc	status,2,c
  7108  0019C6  D004               	goto	l673
  7109  0019C8  0A11               	xorlw	17	; case 120
  7110  0019CA  B4D8               	btfsc	status,2,c
  7111  0019CC  D7E5               	goto	l6145
  7112  0019CE  D13C               	goto	l6247
  7113  0019D0                     l673:
  7114                           
  7115                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  7116  0019D0  0100               	movlb	0	; () banked
  7117  0019D2  BF9E               	btfsc	printf@flag& (0+255),7,b
  7118  0019D4  D019               	goto	l6161
  7119                           
  7120                           ; BSR set to: 0
  7121                           ;doprnt.c: 1253: {
  7122                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  7123  0019D6  C099  FFD9         	movff	printf@ap,fsr2l
  7124  0019DA  C09A  FFDA         	movff	printf@ap+1,fsr2h
  7125  0019DE  CFDE F09C          	movff	postinc2,printf@val
  7126  0019E2  CFDD F09D          	movff	postdec2,printf@val+1
  7127                           
  7128                           ; BSR set to: 0
  7129  0019E6  0E02               	movlw	2
  7130  0019E8  0100               	movlb	0	; () banked
  7131  0019EA  2799               	addwf	printf@ap& (0+255),f,b
  7132  0019EC  0E00               	movlw	0
  7133  0019EE  239A               	addwfc	(printf@ap+1)& (0+255),f,b
  7134                           
  7135                           ; BSR set to: 0
  7136                           ;doprnt.c: 1261: if((int)val < 0) {
  7137  0019F0  0100               	movlb	0	; () banked
  7138  0019F2  AF9D               	btfss	(printf@val+1)& (0+255),7,b
  7139  0019F4  D053               	goto	l6195
  7140                           
  7141                           ; BSR set to: 0
  7142                           ;doprnt.c: 1262: flag |= 0x03;
  7143  0019F6  0E03               	movlw	3
  7144  0019F8  0100               	movlb	0	; () banked
  7145  0019FA  139E               	iorwf	printf@flag& (0+255),f,b
  7146                           
  7147                           ; BSR set to: 0
  7148                           ;doprnt.c: 1263: val = -val;
  7149  0019FC  0100               	movlb	0	; () banked
  7150  0019FE  6D9C               	negf	printf@val& (0+255),b
  7151  001A00  1F9D               	comf	(printf@val+1)& (0+255),f,b
  7152  001A02  B0D8               	btfsc	status,0,c
  7153  001A04  2B9D               	incf	(printf@val+1)& (0+255),f,b
  7154                           
  7155                           ; BSR set to: 0
  7156                           ;doprnt.c: 1264: }
  7157                           ;doprnt.c: 1266: }
  7158  001A06  D04A               	goto	l6195
  7159  001A08                     l6161:
  7160                           
  7161                           ; BSR set to: 0
  7162                           ;doprnt.c: 1268: else
  7163                           ;doprnt.c: 1273: {
  7164                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  7165  001A08  C099  FFD9         	movff	printf@ap,fsr2l
  7166  001A0C  C09A  FFDA         	movff	printf@ap+1,fsr2h
  7167  001A10  CFDE F09C          	movff	postinc2,printf@val
  7168  001A14  CFDD F09D          	movff	postdec2,printf@val+1
  7169                           
  7170                           ; BSR set to: 0
  7171  001A18  0E02               	movlw	2
  7172  001A1A  0100               	movlb	0	; () banked
  7173  001A1C  2799               	addwf	printf@ap& (0+255),f,b
  7174  001A1E  0E00               	movlw	0
  7175  001A20  239A               	addwfc	(printf@ap+1)& (0+255),f,b
  7176                           
  7177                           ; BSR set to: 0
  7178                           ;doprnt.c: 1287: }
  7179                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  7180  001A22  D03C               	goto	l6195
  7181  001A24                     l6165:
  7182                           
  7183                           ; BSR set to: 0
  7184                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7185  001A24  0E01               	movlw	1
  7186  001A26  0100               	movlb	0	; () banked
  7187  001A28  6FA1               	movwf	printf@c& (0+255),b
  7188  001A2A                     l6167:
  7189                           
  7190                           ; BSR set to: 0
  7191  001A2A  0E05               	movlw	5
  7192  001A2C  0100               	movlb	0	; () banked
  7193  001A2E  19A1               	xorwf	printf@c& (0+255),w,b
  7194  001A30  B4D8               	btfsc	status,2,c
  7195  001A32  D03D               	goto	l6197
  7196                           
  7197                           ; BSR set to: 0
  7198                           ;doprnt.c: 1306: if(val < dpowers[c])
  7199                           
  7200                           ; BSR set to: 0
  7201                           
  7202                           ; BSR set to: 0
  7203  001A34  0100               	movlb	0	; () banked
  7204  001A36  51A1               	movf	printf@c& (0+255),w,b
  7205  001A38  0D02               	mullw	2
  7206  001A3A  0E98               	movlw	low _dpowers
  7207  001A3C  24F3               	addwf	prodl,w,c
  7208  001A3E  6EF6               	movwf	tblptrl,c
  7209  001A40  0EFD               	movlw	high _dpowers
  7210  001A42  20F4               	addwfc	prodh,w,c
  7211  001A44  6EF7               	movwf	tblptrh,c
  7212  001A46                     	if	0	;There are less than 3 active tblptr bytes
  7213  001A46                     	endif
  7214  001A46  0009               	tblrd		*+
  7215  001A48  50F5               	movf	tablat,w,c
  7216  001A4A  0100               	movlb	0	; () banked
  7217  001A4C  5D9C               	subwf	printf@val& (0+255),w,b
  7218  001A4E  0009               	tblrd		*+
  7219  001A50  50F5               	movf	tablat,w,c
  7220  001A52  0100               	movlb	0	; () banked
  7221  001A54  599D               	subwfb	(printf@val+1)& (0+255),w,b
  7222  001A56  A0D8               	btfss	status,0,c
  7223  001A58  D02A               	goto	l6197
  7224                           
  7225                           ; BSR set to: 0
  7226                           
  7227                           ; BSR set to: 0
  7228                           
  7229                           ; BSR set to: 0
  7230                           ;doprnt.c: 1307: break;
  7231  001A5A  0100               	movlb	0	; () banked
  7232  001A5C  2BA1               	incf	printf@c& (0+255),f,b
  7233  001A5E  D7E5               	goto	l6167
  7234  001A60                     l6179:
  7235                           
  7236                           ; BSR set to: 0
  7237                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  7238  001A60  0E01               	movlw	1
  7239  001A62  0100               	movlb	0	; () banked
  7240  001A64  6FA1               	movwf	printf@c& (0+255),b
  7241  001A66                     l6181:
  7242                           
  7243                           ; BSR set to: 0
  7244  001A66  0E04               	movlw	4
  7245  001A68  0100               	movlb	0	; () banked
  7246  001A6A  19A1               	xorwf	printf@c& (0+255),w,b
  7247  001A6C  B4D8               	btfsc	status,2,c
  7248  001A6E  D01F               	goto	l6197
  7249                           
  7250                           ; BSR set to: 0
  7251                           ;doprnt.c: 1317: if(val < hexpowers[c])
  7252                           
  7253                           ; BSR set to: 0
  7254                           
  7255                           ; BSR set to: 0
  7256  001A70  0100               	movlb	0	; () banked
  7257  001A72  51A1               	movf	printf@c& (0+255),w,b
  7258  001A74  0D02               	mullw	2
  7259  001A76  0EA2               	movlw	low _hexpowers
  7260  001A78  24F3               	addwf	prodl,w,c
  7261  001A7A  6EF6               	movwf	tblptrl,c
  7262  001A7C  0EFD               	movlw	high _hexpowers
  7263  001A7E  20F4               	addwfc	prodh,w,c
  7264  001A80  6EF7               	movwf	tblptrh,c
  7265  001A82                     	if	0	;There are less than 3 active tblptr bytes
  7266  001A82                     	endif
  7267  001A82  0009               	tblrd		*+
  7268  001A84  50F5               	movf	tablat,w,c
  7269  001A86  0100               	movlb	0	; () banked
  7270  001A88  5D9C               	subwf	printf@val& (0+255),w,b
  7271  001A8A  0009               	tblrd		*+
  7272  001A8C  50F5               	movf	tablat,w,c
  7273  001A8E  0100               	movlb	0	; () banked
  7274  001A90  599D               	subwfb	(printf@val+1)& (0+255),w,b
  7275  001A92  A0D8               	btfss	status,0,c
  7276  001A94  D00C               	goto	l6197
  7277                           
  7278                           ; BSR set to: 0
  7279                           
  7280                           ; BSR set to: 0
  7281                           
  7282                           ; BSR set to: 0
  7283                           ;doprnt.c: 1318: break;
  7284  001A96  0100               	movlb	0	; () banked
  7285  001A98  2BA1               	incf	printf@c& (0+255),f,b
  7286  001A9A  D7E5               	goto	l6181
  7287  001A9C                     l6195:
  7288                           
  7289                           ; BSR set to: 0
  7290  001A9C  0100               	movlb	0	; () banked
  7291  001A9E  519E               	movf	printf@flag& (0+255),w,b
  7292  001AA0  0B80               	andlw	128
  7293                           
  7294                           ; Switch size 1, requested type "space"
  7295                           ; Number of cases is 2, Range of values is 0 to 128
  7296                           ; switch strategies available:
  7297                           ; Name         Instructions Cycles
  7298                           ; simple_byte            7     4 (average)
  7299                           ;	Chosen strategy is simple_byte
  7300  001AA2  0A00               	xorlw	0	; case 0
  7301  001AA4  B4D8               	btfsc	status,2,c
  7302  001AA6  D7BE               	goto	l6165
  7303  001AA8  0A80               	xorlw	128	; case 128
  7304  001AAA  B4D8               	btfsc	status,2,c
  7305  001AAC  D7D9               	goto	l6179
  7306  001AAE                     l6197:
  7307                           
  7308                           ; BSR set to: 0
  7309                           ;doprnt.c: 1345: if(width && flag & 0x03)
  7310  001AAE  0100               	movlb	0	; () banked
  7311  001AB0  519F               	movf	printf@width& (0+255),w,b
  7312  001AB2  0100               	movlb	0	; () banked
  7313  001AB4  11A0               	iorwf	(printf@width+1)& (0+255),w,b
  7314  001AB6  B4D8               	btfsc	status,2,c
  7315  001AB8  D00B               	goto	l6203
  7316                           
  7317                           ; BSR set to: 0
  7318  001ABA  C09E  F094         	movff	printf@flag,??_printf
  7319  001ABE  0E03               	movlw	3
  7320  001AC0  0100               	movlb	0	; () banked
  7321  001AC2  1794               	andwf	??_printf& (0+255),f,b
  7322  001AC4  B4D8               	btfsc	status,2,c
  7323  001AC6  D004               	goto	l6203
  7324                           
  7325                           ; BSR set to: 0
  7326                           ;doprnt.c: 1346: width--;
  7327  001AC8  0100               	movlb	0	; () banked
  7328  001ACA  079F               	decf	printf@width& (0+255),f,b
  7329  001ACC  A0D8               	btfss	status,0,c
  7330  001ACE  07A0               	decf	(printf@width+1)& (0+255),f,b
  7331  001AD0                     l6203:
  7332                           
  7333                           ; BSR set to: 0
  7334                           ;doprnt.c: 1381: if(width > c)
  7335  001AD0  0E80               	movlw	128
  7336  001AD2  0100               	movlb	0	; () banked
  7337  001AD4  BFA1               	btfsc	printf@c& (0+255),7,b
  7338  001AD6  0E7F               	movlw	127
  7339  001AD8  0100               	movlb	0	; () banked
  7340  001ADA  6F94               	movwf	??_printf& (0+255),b
  7341  001ADC  0100               	movlb	0	; () banked
  7342  001ADE  519F               	movf	printf@width& (0+255),w,b
  7343  001AE0  0100               	movlb	0	; () banked
  7344  001AE2  5DA1               	subwf	printf@c& (0+255),w,b
  7345  001AE4  0100               	movlb	0	; () banked
  7346  001AE6  51A0               	movf	(printf@width+1)& (0+255),w,b
  7347  001AE8  0A80               	xorlw	128
  7348  001AEA  0100               	movlb	0	; () banked
  7349  001AEC  5994               	subwfb	??_printf& (0+255),w,b
  7350  001AEE  B0D8               	btfsc	status,0,c
  7351  001AF0  D00B               	goto	l6207
  7352                           
  7353                           ; BSR set to: 0
  7354                           ;doprnt.c: 1382: width -= c;
  7355  001AF2  0100               	movlb	0	; () banked
  7356  001AF4  51A1               	movf	printf@c& (0+255),w,b
  7357  001AF6  0100               	movlb	0	; () banked
  7358  001AF8  5F9F               	subwf	printf@width& (0+255),f,b
  7359  001AFA  0E00               	movlw	0
  7360  001AFC  0100               	movlb	0	; () banked
  7361  001AFE  BFA1               	btfsc	printf@c& (0+255),7,b
  7362  001B00  0EFF               	movlw	255
  7363  001B02  0100               	movlb	0	; () banked
  7364  001B04  5BA0               	subwfb	(printf@width+1)& (0+255),f,b
  7365  001B06  D005               	goto	l6209
  7366  001B08                     l6207:
  7367                           
  7368                           ; BSR set to: 0
  7369                           ;doprnt.c: 1383: else
  7370                           ;doprnt.c: 1384: width = 0;
  7371  001B08  0E00               	movlw	0
  7372  001B0A  0100               	movlb	0	; () banked
  7373  001B0C  6FA0               	movwf	(printf@width+1)& (0+255),b
  7374  001B0E  0E00               	movlw	0
  7375  001B10  6F9F               	movwf	printf@width& (0+255),b
  7376  001B12                     l6209:
  7377                           
  7378                           ; BSR set to: 0
  7379                           ;doprnt.c: 1387: if(flag & 0x04) {
  7380  001B12  0100               	movlb	0	; () banked
  7381  001B14  A59E               	btfss	printf@flag& (0+255),2,b
  7382  001B16  D018               	goto	l6221
  7383                           
  7384                           ; BSR set to: 0
  7385                           ;doprnt.c: 1392: if(flag & 0x03)
  7386  001B18  C09E  F094         	movff	printf@flag,??_printf
  7387  001B1C  0E03               	movlw	3
  7388  001B1E  0100               	movlb	0	; () banked
  7389  001B20  1794               	andwf	??_printf& (0+255),f,b
  7390  001B22  B4D8               	btfsc	status,2,c
  7391  001B24  D003               	goto	l6215
  7392                           
  7393                           ; BSR set to: 0
  7394                           ;doprnt.c: 1393: (putch('-') );
  7395  001B26  0E2D               	movlw	45
  7396  001B28  ECD7  F01B         	call	_putch
  7397  001B2C                     l6215:
  7398                           
  7399                           ;doprnt.c: 1415: if(width)
  7400  001B2C  0100               	movlb	0	; () banked
  7401  001B2E  519F               	movf	printf@width& (0+255),w,b
  7402  001B30  0100               	movlb	0	; () banked
  7403  001B32  11A0               	iorwf	(printf@width+1)& (0+255),w,b
  7404  001B34  B4D8               	btfsc	status,2,c
  7405  001B36  D025               	goto	l6231
  7406                           
  7407                           ; BSR set to: 0
  7408                           ;doprnt.c: 1417: (putch('0') );
  7409                           
  7410                           ; BSR set to: 0
  7411                           
  7412                           ;doprnt.c: 1416: do
  7413  001B38  0E30               	movlw	48
  7414  001B3A  ECD7  F01B         	call	_putch
  7415                           
  7416                           ;doprnt.c: 1418: while(--width);
  7417  001B3E  0100               	movlb	0	; () banked
  7418  001B40  079F               	decf	printf@width& (0+255),f,b
  7419  001B42  A0D8               	btfss	status,0,c
  7420  001B44  07A0               	decf	(printf@width+1)& (0+255),f,b
  7421  001B46  D7F2               	goto	l6215
  7422  001B48                     l6221:
  7423                           
  7424                           ; BSR set to: 0
  7425                           ;doprnt.c: 1422: {
  7426                           ;doprnt.c: 1424: if(width
  7427                           ;doprnt.c: 1428: )
  7428  001B48  0100               	movlb	0	; () banked
  7429  001B4A  519F               	movf	printf@width& (0+255),w,b
  7430  001B4C  0100               	movlb	0	; () banked
  7431  001B4E  11A0               	iorwf	(printf@width+1)& (0+255),w,b
  7432  001B50  B4D8               	btfsc	status,2,c
  7433  001B52  D00D               	goto	l6227
  7434  001B54                     l6223:
  7435                           
  7436                           ; BSR set to: 0
  7437                           ;doprnt.c: 1430: (putch(' ') );
  7438  001B54  0E20               	movlw	32
  7439  001B56  ECD7  F01B         	call	_putch
  7440                           
  7441                           ;doprnt.c: 1431: while(--width);
  7442  001B5A  0100               	movlb	0	; () banked
  7443  001B5C  079F               	decf	printf@width& (0+255),f,b
  7444  001B5E  A0D8               	btfss	status,0,c
  7445  001B60  07A0               	decf	(printf@width+1)& (0+255),f,b
  7446  001B62  0100               	movlb	0	; () banked
  7447  001B64  519F               	movf	printf@width& (0+255),w,b
  7448  001B66  0100               	movlb	0	; () banked
  7449  001B68  11A0               	iorwf	(printf@width+1)& (0+255),w,b
  7450  001B6A  A4D8               	btfss	status,2,c
  7451  001B6C  D7F3               	goto	l6223
  7452  001B6E                     l6227:
  7453                           
  7454                           ; BSR set to: 0
  7455                           ;doprnt.c: 1438: if(flag & 0x03)
  7456  001B6E  C09E  F094         	movff	printf@flag,??_printf
  7457  001B72  0E03               	movlw	3
  7458  001B74  0100               	movlb	0	; () banked
  7459  001B76  1794               	andwf	??_printf& (0+255),f,b
  7460  001B78  B4D8               	btfsc	status,2,c
  7461  001B7A  D003               	goto	l6231
  7462                           
  7463                           ; BSR set to: 0
  7464                           ;doprnt.c: 1439: (putch('-') );
  7465  001B7C  0E2D               	movlw	45
  7466  001B7E  ECD7  F01B         	call	_putch
  7467  001B82                     l6231:
  7468                           
  7469                           ;doprnt.c: 1469: }
  7470                           ;doprnt.c: 1472: prec = c;
  7471  001B82  C0A1  F09B         	movff	printf@c,printf@prec
  7472                           
  7473                           ;doprnt.c: 1474: while(prec--) {
  7474  001B86  D05A               	goto	l6245
  7475  001B88                     l6233:
  7476                           
  7477                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7478  001B88  0100               	movlb	0	; () banked
  7479  001B8A  519B               	movf	printf@prec& (0+255),w,b
  7480  001B8C  0D02               	mullw	2
  7481  001B8E  0E98               	movlw	low _dpowers
  7482  001B90  24F3               	addwf	prodl,w,c
  7483  001B92  6EF6               	movwf	tblptrl,c
  7484  001B94  0EFD               	movlw	high _dpowers
  7485  001B96  20F4               	addwfc	prodh,w,c
  7486  001B98  6EF7               	movwf	tblptrh,c
  7487  001B9A                     	if	0	;There are less than 3 active tblptr bytes
  7488  001B9A                     	endif
  7489  001B9A  0009               	tblrd		*+
  7490  001B9C  CFF5 F082          	movff	tablat,___lwdiv@divisor
  7491  001BA0  000A               	tblrd		*-
  7492  001BA2  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
  7493  001BA6  C09C  F080         	movff	printf@val,___lwdiv@dividend
  7494  001BAA  C09D  F081         	movff	printf@val+1,___lwdiv@dividend+1
  7495  001BAE  ECC2  F018         	call	___lwdiv	;wreg free
  7496  001BB2  C080  F087         	movff	?___lwdiv,___lwmod@dividend
  7497  001BB6  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
  7498  001BBA  0E00               	movlw	0
  7499  001BBC  0100               	movlb	0	; () banked
  7500  001BBE  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
  7501  001BC0  0E0A               	movlw	10
  7502  001BC2  6F89               	movwf	___lwmod@divisor& (0+255),b
  7503  001BC4  EC69  F019         	call	___lwmod	;wreg free
  7504  001BC8  0100               	movlb	0	; () banked
  7505  001BCA  5187               	movf	?___lwmod& (0+255),w,b
  7506  001BCC  0F30               	addlw	48
  7507  001BCE  0100               	movlb	0	; () banked
  7508  001BD0  6FA1               	movwf	printf@c& (0+255),b
  7509                           
  7510                           ;doprnt.c: 1491: break;
  7511  001BD2  D030               	goto	l6243
  7512  001BD4                     l6235:
  7513                           
  7514                           ; BSR set to: 0
  7515                           ;doprnt.c: 1499: {
  7516                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  7517  001BD4  C09C  F080         	movff	printf@val,___lwdiv@dividend
  7518  001BD8  C09D  F081         	movff	printf@val+1,___lwdiv@dividend+1
  7519  001BDC  0100               	movlb	0	; () banked
  7520  001BDE  519B               	movf	printf@prec& (0+255),w,b
  7521  001BE0  0D02               	mullw	2
  7522  001BE2  0EA2               	movlw	low _hexpowers
  7523  001BE4  24F3               	addwf	prodl,w,c
  7524  001BE6  6EF6               	movwf	tblptrl,c
  7525  001BE8  0EFD               	movlw	high _hexpowers
  7526  001BEA  20F4               	addwfc	prodh,w,c
  7527  001BEC  6EF7               	movwf	tblptrh,c
  7528  001BEE                     	if	0	;There are less than 3 active tblptr bytes
  7529  001BEE                     	endif
  7530  001BEE  0009               	tblrd		*+
  7531  001BF0  CFF5 F082          	movff	tablat,___lwdiv@divisor
  7532  001BF4  000A               	tblrd		*-
  7533  001BF6  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
  7534  001BFA  ECC2  F018         	call	___lwdiv	;wreg free
  7535  001BFE  0100               	movlb	0	; () banked
  7536  001C00  5180               	movf	?___lwdiv& (0+255),w,b
  7537  001C02  0B0F               	andlw	15
  7538  001C04  0100               	movlb	0	; () banked
  7539  001C06  6F98               	movwf	printf@idx& (0+255),b
  7540                           
  7541                           ; BSR set to: 0
  7542                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  7543  001C08  0100               	movlb	0	; () banked
  7544  001C0A  5198               	movf	printf@idx& (0+255),w,b
  7545  001C0C  0D01               	mullw	1
  7546  001C0E  0E88               	movlw	low STR_40
  7547  001C10  24F3               	addwf	prodl,w,c
  7548  001C12  6EF6               	movwf	tblptrl,c
  7549  001C14  0EFE               	movlw	high STR_40
  7550  001C16  20F4               	addwfc	prodh,w,c
  7551  001C18  6EF7               	movwf	tblptrh,c
  7552  001C1A                     	if	0	;There are less than 3 active tblptr bytes
  7553  001C1A                     	endif
  7554  001C1A  0008               	tblrd		*
  7555  001C1C  CFF5 F0A1          	movff	tablat,printf@c
  7556                           
  7557                           ; BSR set to: 0
  7558                           ;doprnt.c: 1523: }
  7559                           
  7560                           ;doprnt.c: 1508: }
  7561                           ;doprnt.c: 1510: break;
  7562  001C20  D009               	goto	l6243
  7563  001C22                     l6241:
  7564  001C22  0100               	movlb	0	; () banked
  7565  001C24  519E               	movf	printf@flag& (0+255),w,b
  7566  001C26  0B80               	andlw	128
  7567                           
  7568                           ; Switch size 1, requested type "space"
  7569                           ; Number of cases is 2, Range of values is 0 to 128
  7570                           ; switch strategies available:
  7571                           ; Name         Instructions Cycles
  7572                           ; simple_byte            7     4 (average)
  7573                           ;	Chosen strategy is simple_byte
  7574  001C28  0A00               	xorlw	0	; case 0
  7575  001C2A  B4D8               	btfsc	status,2,c
  7576  001C2C  D7AD               	goto	l6233
  7577  001C2E  0A80               	xorlw	128	; case 128
  7578  001C30  B4D8               	btfsc	status,2,c
  7579  001C32  D7D0               	goto	l6235
  7580  001C34                     l6243:
  7581                           
  7582                           ; BSR set to: 0
  7583                           ;doprnt.c: 1524: (putch(c) );
  7584  001C34  0100               	movlb	0	; () banked
  7585  001C36  51A1               	movf	printf@c& (0+255),w,b
  7586  001C38  ECD7  F01B         	call	_putch
  7587  001C3C                     l6245:
  7588  001C3C  0100               	movlb	0	; () banked
  7589  001C3E  079B               	decf	printf@prec& (0+255),f,b
  7590  001C40  0100               	movlb	0	; () banked
  7591  001C42  299B               	incf	printf@prec& (0+255),w,b
  7592  001C44  A4D8               	btfss	status,2,c
  7593  001C46  D7ED               	goto	l6241
  7594  001C48                     l6247:
  7595  001C48  C08C  FFF6         	movff	printf@f,tblptrl
  7596  001C4C  C08D  FFF7         	movff	printf@f+1,tblptrh
  7597  001C50  0100               	movlb	0	; () banked
  7598  001C52  4B8C               	infsnz	printf@f& (0+255),f,b
  7599  001C54  2B8D               	incf	(printf@f+1)& (0+255),f,b
  7600  001C56                     	if	0	;tblptru may be non-zero
  7601  001C56                     	endif
  7602  001C56                     	if	0	;tblptru may be non-zero
  7603  001C56                     	endif
  7604  001C56  0008               	tblrd		*
  7605  001C58  CFF5 F0A1          	movff	tablat,printf@c
  7606  001C5C  0100               	movlb	0	; () banked
  7607  001C5E  51A1               	movf	printf@c& (0+255),w,b
  7608  001C60  B4D8               	btfsc	status,2,c
  7609  001C62  0012               	return	
  7610  001C64  D62D               	goto	l6121
  7611  001C66                     __end_of_printf:
  7612                           	opt stack 0
  7613                           tblptru	equ	0xFF8
  7614                           tblptrh	equ	0xFF7
  7615                           tblptrl	equ	0xFF6
  7616                           tablat	equ	0xFF5
  7617                           prodh	equ	0xFF4
  7618                           prodl	equ	0xFF3
  7619                           intcon	equ	0xFF2
  7620                           intcon2	equ	0xFF1
  7621                           intcon3	equ	0xFF0
  7622                           postinc0	equ	0xFEE
  7623                           wreg	equ	0xFE8
  7624                           postdec1	equ	0xFE5
  7625                           fsr1l	equ	0xFE1
  7626                           indf2	equ	0xFDF
  7627                           postinc2	equ	0xFDE
  7628                           postdec2	equ	0xFDD
  7629                           fsr2h	equ	0xFDA
  7630                           fsr2l	equ	0xFD9
  7631                           status	equ	0xFD8
  7632                           
  7633 ;; *************** function _putch *****************
  7634 ;; Defined at:
  7635 ;;		line 23 in file "../lcd.c"
  7636 ;; Parameters:    Size  Location     Type
  7637 ;;  data            1    wreg     unsigned char 
  7638 ;; Auto vars:     Size  Location     Type
  7639 ;;  data            1    2[BANK0 ] unsigned char 
  7640 ;; Return value:  Size  Location     Type
  7641 ;;                  1    wreg      void 
  7642 ;; Registers used:
  7643 ;;		wreg, status,2, status,0, cstack
  7644 ;; Tracked objects:
  7645 ;;		On entry : 0/0
  7646 ;;		On exit  : 0/0
  7647 ;;		Unchanged: 0/0
  7648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7649 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7650 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7651 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7652 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7653 ;;Total ram usage:        1 bytes
  7654 ;; Hardware stack levels used:    1
  7655 ;; Hardware stack levels required when called:    6
  7656 ;; This function calls:
  7657 ;;		_lcdNibble
  7658 ;; This function is called by:
  7659 ;;		_printf
  7660 ;; This function uses a non-reentrant model
  7661 ;;
  7662                           
  7663                           	psect	text10
  7664  0037AE                     __ptext10:
  7665                           	opt stack 0
  7666  0037AE                     _putch:
  7667                           	opt stack 22
  7668                           
  7669                           ;incstack = 0
  7670                           ;putch@data stored from wreg
  7671  0037AE  0100               	movlb	0	; () banked
  7672  0037B0  6F82               	movwf	putch@data& (0+255),b
  7673                           
  7674                           ;lcd.c: 24: LATDbits.LATD2 = 1;
  7675  0037B2  848C               	bsf	3980,2,c	;volatile
  7676                           
  7677                           ;lcd.c: 25: lcdNibble(data);
  7678  0037B4  0100               	movlb	0	; () banked
  7679  0037B6  5182               	movf	putch@data& (0+255),w,b
  7680  0037B8  EC9A  F019         	call	_lcdNibble
  7681  0037BC  0012               	return		;funcret
  7682  0037BE                     __end_of_putch:
  7683                           	opt stack 0
  7684                           tblptru	equ	0xFF8
  7685                           tblptrh	equ	0xFF7
  7686                           tblptrl	equ	0xFF6
  7687                           tablat	equ	0xFF5
  7688                           prodh	equ	0xFF4
  7689                           prodl	equ	0xFF3
  7690                           intcon	equ	0xFF2
  7691                           intcon2	equ	0xFF1
  7692                           intcon3	equ	0xFF0
  7693                           postinc0	equ	0xFEE
  7694                           wreg	equ	0xFE8
  7695                           postdec1	equ	0xFE5
  7696                           fsr1l	equ	0xFE1
  7697                           indf2	equ	0xFDF
  7698                           postinc2	equ	0xFDE
  7699                           postdec2	equ	0xFDD
  7700                           fsr2h	equ	0xFDA
  7701                           fsr2l	equ	0xFD9
  7702                           status	equ	0xFD8
  7703                           
  7704 ;; *************** function _isdigit *****************
  7705 ;; Defined at:
  7706 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  7707 ;; Parameters:    Size  Location     Type
  7708 ;;  c               1    wreg     unsigned char 
  7709 ;; Auto vars:     Size  Location     Type
  7710 ;;  c               1    2[BANK0 ] unsigned char 
  7711 ;; Return value:  Size  Location     Type
  7712 ;;		None               void
  7713 ;; Registers used:
  7714 ;;		wreg, status,2, status,0
  7715 ;; Tracked objects:
  7716 ;;		On entry : 0/0
  7717 ;;		On exit  : 0/0
  7718 ;;		Unchanged: 0/0
  7719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7720 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7721 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7722 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7723 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7724 ;;Total ram usage:        3 bytes
  7725 ;; Hardware stack levels used:    1
  7726 ;; Hardware stack levels required when called:    5
  7727 ;; This function calls:
  7728 ;;		Nothing
  7729 ;; This function is called by:
  7730 ;;		_printf
  7731 ;; This function uses a non-reentrant model
  7732 ;;
  7733                           
  7734                           	psect	text11
  7735  0035FC                     __ptext11:
  7736                           	opt stack 0
  7737  0035FC                     _isdigit:
  7738                           	opt stack 23
  7739                           
  7740                           ;incstack = 0
  7741                           ;isdigit@c stored from wreg
  7742  0035FC  0100               	movlb	0	; () banked
  7743  0035FE  6F82               	movwf	isdigit@c& (0+255),b
  7744  003600  0E00               	movlw	0
  7745  003602  0100               	movlb	0	; () banked
  7746  003604  6F81               	movwf	_isdigit$1200& (0+255),b
  7747                           
  7748                           ; BSR set to: 0
  7749  003606  0E3A               	movlw	58
  7750  003608  0100               	movlb	0	; () banked
  7751  00360A  6182               	cpfslt	isdigit@c& (0+255),b
  7752  00360C  D007               	goto	l6055
  7753                           
  7754                           ; BSR set to: 0
  7755  00360E  0E2F               	movlw	47
  7756  003610  0100               	movlb	0	; () banked
  7757  003612  6582               	cpfsgt	isdigit@c& (0+255),b
  7758  003614  D003               	goto	l6055
  7759                           
  7760                           ; BSR set to: 0
  7761  003616  0E01               	movlw	1
  7762  003618  0100               	movlb	0	; () banked
  7763  00361A  6F81               	movwf	_isdigit$1200& (0+255),b
  7764  00361C                     l6055:
  7765                           
  7766                           ; BSR set to: 0
  7767  00361C  C081  F080         	movff	_isdigit$1200,??_isdigit
  7768  003620  0100               	movlb	0	; () banked
  7769  003622  3180               	rrcf	??_isdigit& (0+255),w,b
  7770  003624  0012               	return	
  7771  003626                     __end_of_isdigit:
  7772                           	opt stack 0
  7773                           tblptru	equ	0xFF8
  7774                           tblptrh	equ	0xFF7
  7775                           tblptrl	equ	0xFF6
  7776                           tablat	equ	0xFF5
  7777                           prodh	equ	0xFF4
  7778                           prodl	equ	0xFF3
  7779                           intcon	equ	0xFF2
  7780                           intcon2	equ	0xFF1
  7781                           intcon3	equ	0xFF0
  7782                           postinc0	equ	0xFEE
  7783                           wreg	equ	0xFE8
  7784                           postdec1	equ	0xFE5
  7785                           fsr1l	equ	0xFE1
  7786                           indf2	equ	0xFDF
  7787                           postinc2	equ	0xFDE
  7788                           postdec2	equ	0xFDD
  7789                           fsr2h	equ	0xFDA
  7790                           fsr2l	equ	0xFD9
  7791                           status	equ	0xFD8
  7792                           
  7793 ;; *************** function ___wmul *****************
  7794 ;; Defined at:
  7795 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  7796 ;; Parameters:    Size  Location     Type
  7797 ;;  multiplier      2    0[BANK0 ] unsigned int 
  7798 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  7799 ;; Auto vars:     Size  Location     Type
  7800 ;;  product         2    4[BANK0 ] unsigned int 
  7801 ;; Return value:  Size  Location     Type
  7802 ;;                  2    0[BANK0 ] unsigned int 
  7803 ;; Registers used:
  7804 ;;		wreg, status,2, status,0, prodl, prodh
  7805 ;; Tracked objects:
  7806 ;;		On entry : 0/0
  7807 ;;		On exit  : 0/0
  7808 ;;		Unchanged: 0/0
  7809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7810 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7811 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7813 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7814 ;;Total ram usage:        6 bytes
  7815 ;; Hardware stack levels used:    1
  7816 ;; Hardware stack levels required when called:    5
  7817 ;; This function calls:
  7818 ;;		Nothing
  7819 ;; This function is called by:
  7820 ;;		_printf
  7821 ;; This function uses a non-reentrant model
  7822 ;;
  7823                           
  7824                           	psect	text12
  7825  003598                     __ptext12:
  7826                           	opt stack 0
  7827  003598                     ___wmul:
  7828                           	opt stack 23
  7829                           
  7830                           ; BSR set to: 0
  7831                           ;incstack = 0
  7832  003598  0100               	movlb	0	; () banked
  7833  00359A  5180               	movf	___wmul@multiplier& (0+255),w,b
  7834  00359C  0100               	movlb	0	; () banked
  7835  00359E  0382               	mulwf	___wmul@multiplicand& (0+255),b
  7836  0035A0  CFF3 F084          	movff	prodl,___wmul@product
  7837  0035A4  CFF4 F085          	movff	prodh,___wmul@product+1
  7838  0035A8  0100               	movlb	0	; () banked
  7839  0035AA  5180               	movf	___wmul@multiplier& (0+255),w,b
  7840  0035AC  0100               	movlb	0	; () banked
  7841  0035AE  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  7842  0035B0  50F3               	movf	prodl,w,c
  7843  0035B2  0100               	movlb	0	; () banked
  7844  0035B4  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  7845  0035B6  0100               	movlb	0	; () banked
  7846  0035B8  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
  7847  0035BA  0100               	movlb	0	; () banked
  7848  0035BC  0382               	mulwf	___wmul@multiplicand& (0+255),b
  7849  0035BE  50F3               	movf	prodl,w,c
  7850  0035C0  0100               	movlb	0	; () banked
  7851  0035C2  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  7852                           
  7853                           ; BSR set to: 0
  7854  0035C4  C084  F080         	movff	___wmul@product,?___wmul
  7855  0035C8  C085  F081         	movff	___wmul@product+1,?___wmul+1
  7856  0035CC  0012               	return	
  7857  0035CE                     __end_of___wmul:
  7858                           	opt stack 0
  7859                           tblptru	equ	0xFF8
  7860                           tblptrh	equ	0xFF7
  7861                           tblptrl	equ	0xFF6
  7862                           tablat	equ	0xFF5
  7863                           prodh	equ	0xFF4
  7864                           prodl	equ	0xFF3
  7865                           intcon	equ	0xFF2
  7866                           intcon2	equ	0xFF1
  7867                           intcon3	equ	0xFF0
  7868                           postinc0	equ	0xFEE
  7869                           wreg	equ	0xFE8
  7870                           postdec1	equ	0xFE5
  7871                           fsr1l	equ	0xFE1
  7872                           indf2	equ	0xFDF
  7873                           postinc2	equ	0xFDE
  7874                           postdec2	equ	0xFDD
  7875                           fsr2h	equ	0xFDA
  7876                           fsr2l	equ	0xFD9
  7877                           status	equ	0xFD8
  7878                           
  7879 ;; *************** function _next_address *****************
  7880 ;; Defined at:
  7881 ;;		line 794 in file "../main.c"
  7882 ;; Parameters:    Size  Location     Type
  7883 ;;  address         2    0[BANK0 ] unsigned int 
  7884 ;; Auto vars:     Size  Location     Type
  7885 ;;		None
  7886 ;; Return value:  Size  Location     Type
  7887 ;;                  2    0[BANK0 ] unsigned int 
  7888 ;; Registers used:
  7889 ;;		wreg, status,2, status,0
  7890 ;; Tracked objects:
  7891 ;;		On entry : 0/0
  7892 ;;		On exit  : 0/0
  7893 ;;		Unchanged: 0/0
  7894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7895 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7896 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7897 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7898 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7899 ;;Total ram usage:        2 bytes
  7900 ;; Hardware stack levels used:    1
  7901 ;; Hardware stack levels required when called:    5
  7902 ;; This function calls:
  7903 ;;		Nothing
  7904 ;; This function is called by:
  7905 ;;		_stopOperation
  7906 ;;		_show_log
  7907 ;; This function uses a non-reentrant model
  7908 ;;
  7909                           
  7910                           	psect	text13
  7911  003748                     __ptext13:
  7912                           	opt stack 0
  7913  003748                     _next_address:
  7914                           	opt stack 24
  7915                           
  7916                           ;main.c: 795: return address + 8;
  7917                           
  7918                           ; BSR set to: 0
  7919                           ;incstack = 0
  7920  003748  0E08               	movlw	8
  7921  00374A  0100               	movlb	0	; () banked
  7922  00374C  2580               	addwf	next_address@address& (0+255),w,b
  7923  00374E  0100               	movlb	0	; () banked
  7924  003750  6F80               	movwf	?_next_address& (0+255),b
  7925  003752  0E00               	movlw	0
  7926  003754  0100               	movlb	0	; () banked
  7927  003756  2181               	addwfc	(next_address@address+1)& (0+255),w,b
  7928  003758  0100               	movlb	0	; () banked
  7929  00375A  6F81               	movwf	(?_next_address+1)& (0+255),b
  7930  00375C  0012               	return	
  7931  00375E                     __end_of_next_address:
  7932                           	opt stack 0
  7933                           tblptru	equ	0xFF8
  7934                           tblptrh	equ	0xFF7
  7935                           tblptrl	equ	0xFF6
  7936                           tablat	equ	0xFF5
  7937                           prodh	equ	0xFF4
  7938                           prodl	equ	0xFF3
  7939                           intcon	equ	0xFF2
  7940                           intcon2	equ	0xFF1
  7941                           intcon3	equ	0xFF0
  7942                           postinc0	equ	0xFEE
  7943                           wreg	equ	0xFE8
  7944                           postdec1	equ	0xFE5
  7945                           fsr1l	equ	0xFE1
  7946                           indf2	equ	0xFDF
  7947                           postinc2	equ	0xFDE
  7948                           postdec2	equ	0xFDD
  7949                           fsr2h	equ	0xFDA
  7950                           fsr2l	equ	0xFD9
  7951                           status	equ	0xFD8
  7952                           
  7953 ;; *************** function _Eeprom_ReadByte *****************
  7954 ;; Defined at:
  7955 ;;		line 750 in file "../main.c"
  7956 ;; Parameters:    Size  Location     Type
  7957 ;;  address         2    0[BANK0 ] unsigned int 
  7958 ;; Auto vars:     Size  Location     Type
  7959 ;;		None
  7960 ;; Return value:  Size  Location     Type
  7961 ;;                  1    wreg      unsigned char 
  7962 ;; Registers used:
  7963 ;;		wreg, status,2
  7964 ;; Tracked objects:
  7965 ;;		On entry : 0/0
  7966 ;;		On exit  : 0/0
  7967 ;;		Unchanged: 0/0
  7968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7969 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7970 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7971 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7972 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7973 ;;Total ram usage:        2 bytes
  7974 ;; Hardware stack levels used:    1
  7975 ;; Hardware stack levels required when called:    5
  7976 ;; This function calls:
  7977 ;;		Nothing
  7978 ;; This function is called by:
  7979 ;;		_stopOperation
  7980 ;;		_show_log
  7981 ;; This function uses a non-reentrant model
  7982 ;;
  7983                           
  7984                           	psect	text14
  7985  003730                     __ptext14:
  7986                           	opt stack 0
  7987  003730                     _Eeprom_ReadByte:
  7988                           	opt stack 24
  7989                           
  7990                           ;main.c: 752: EEADRH = (uint8_t)(address >> 8);
  7991                           
  7992                           ; BSR set to: 0
  7993                           ;incstack = 0
  7994  003730  0100               	movlb	0	; () banked
  7995  003732  5181               	movf	(Eeprom_ReadByte@address+1)& (0+255),w,b
  7996  003734  6EAA               	movwf	4010,c	;volatile
  7997                           
  7998                           ; BSR set to: 0
  7999                           ;main.c: 753: EEADR = (uint8_t)address;
  8000  003736  C080  FFA9         	movff	Eeprom_ReadByte@address,4009	;volatile
  8001                           
  8002                           ; BSR set to: 0
  8003                           ;main.c: 755: EECON1bits.EEPGD = 0;
  8004  00373A  9EA6               	bcf	4006,7,c	;volatile
  8005                           
  8006                           ; BSR set to: 0
  8007                           ;main.c: 756: EECON1bits.CFGS = 0;
  8008  00373C  9CA6               	bcf	4006,6,c	;volatile
  8009                           
  8010                           ; BSR set to: 0
  8011                           ;main.c: 757: EECON1bits.RD = 1;
  8012  00373E  80A6               	bsf	4006,0,c	;volatile
  8013  003740                     l512:
  8014  003740  B0A6               	btfsc	4006,0,c	;volatile
  8015  003742  D7FE               	goto	l512
  8016                           
  8017                           ;main.c: 763: return EEDATA;
  8018  003744  50A8               	movf	4008,w,c	;volatile
  8019  003746  0012               	return	
  8020  003748                     __end_of_Eeprom_ReadByte:
  8021                           	opt stack 0
  8022                           tblptru	equ	0xFF8
  8023                           tblptrh	equ	0xFF7
  8024                           tblptrl	equ	0xFF6
  8025                           tablat	equ	0xFF5
  8026                           prodh	equ	0xFF4
  8027                           prodl	equ	0xFF3
  8028                           intcon	equ	0xFF2
  8029                           intcon2	equ	0xFF1
  8030                           intcon3	equ	0xFF0
  8031                           postinc0	equ	0xFEE
  8032                           wreg	equ	0xFE8
  8033                           postdec1	equ	0xFE5
  8034                           fsr1l	equ	0xFE1
  8035                           indf2	equ	0xFDF
  8036                           postinc2	equ	0xFDE
  8037                           postdec2	equ	0xFDD
  8038                           fsr2h	equ	0xFDA
  8039                           fsr2l	equ	0xFD9
  8040                           status	equ	0xFD8
  8041                           
  8042 ;; *************** function _logPC *****************
  8043 ;; Defined at:
  8044 ;;		line 858 in file "../main.c"
  8045 ;; Parameters:    Size  Location     Type
  8046 ;;		None
  8047 ;; Auto vars:     Size  Location     Type
  8048 ;;  i               2   58[BANK1 ] unsigned int 
  8049 ;;  i               2   56[BANK1 ] unsigned int 
  8050 ;;  i               2   54[BANK1 ] unsigned int 
  8051 ;;  i               2   52[BANK1 ] unsigned int 
  8052 ;;  i               2   50[BANK1 ] unsigned int 
  8053 ;;  i               2   48[BANK1 ] unsigned int 
  8054 ;;  i               2   46[BANK1 ] unsigned int 
  8055 ;;  i               2   44[BANK1 ] unsigned int 
  8056 ;;  i               2   42[BANK1 ] unsigned int 
  8057 ;;  i               2   40[BANK1 ] unsigned int 
  8058 ;;  i               2   38[BANK1 ] unsigned int 
  8059 ;;  i               2   36[BANK1 ] unsigned int 
  8060 ;;  i               2   34[BANK1 ] unsigned int 
  8061 ;;  i               2   32[BANK1 ] unsigned int 
  8062 ;;  started_time   19    0[BANK1 ] unsigned char [19]
  8063 ;;  runTime         3   19[BANK1 ] unsigned char [3]
  8064 ;;  numberTotal     2   30[BANK1 ] unsigned char [2]
  8065 ;;  numberDrain     2   28[BANK1 ] unsigned char [2]
  8066 ;;  number9V        2   26[BANK1 ] unsigned char [2]
  8067 ;;  numberC         2   24[BANK1 ] unsigned char [2]
  8068 ;;  numberAA        2   22[BANK1 ] unsigned char [2]
  8069 ;; Return value:  Size  Location     Type
  8070 ;;                  1    wreg      void 
  8071 ;; Registers used:
  8072 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8073 ;; Tracked objects:
  8074 ;;		On entry : 0/0
  8075 ;;		On exit  : 0/0
  8076 ;;		Unchanged: 0/0
  8077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8079 ;;      Locals:         0       0      60       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8080 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8081 ;;      Totals:         0       2      60       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8082 ;;Total ram usage:       62 bytes
  8083 ;; Hardware stack levels used:    1
  8084 ;; Hardware stack levels required when called:    7
  8085 ;; This function calls:
  8086 ;;		_I2C_Master_Start
  8087 ;;		_I2C_Master_Stop
  8088 ;;		_I2C_Master_Write
  8089 ;;		_getChar
  8090 ;;		_getHundreds
  8091 ;;		_getOnes
  8092 ;;		_getTens
  8093 ;; This function is called by:
  8094 ;;		_main
  8095 ;; This function uses a non-reentrant model
  8096 ;;
  8097                           
  8098                           	psect	text15
  8099  000D54                     __ptext15:
  8100                           	opt stack 0
  8101  000D54                     _logPC:
  8102                           	opt stack 23
  8103                           
  8104                           ;main.c: 860: for(unsigned int i = 0; i < 31; i++) {
  8105                           
  8106                           ;incstack = 0
  8107  000D54  0E00               	movlw	0
  8108  000D56  0101               	movlb	1	; () banked
  8109  000D58  6F21               	movwf	(logPC@i+1)& (0+255),b
  8110  000D5A  0E00               	movlw	0
  8111  000D5C  6F20               	movwf	logPC@i& (0+255),b
  8112  000D5E                     l6785:
  8113                           
  8114                           ; BSR set to: 1
  8115  000D5E  0101               	movlb	1	; () banked
  8116  000D60  5121               	movf	(logPC@i+1)& (0+255),w,b
  8117  000D62  E122               	bnz	l6799
  8118  000D64  0E1F               	movlw	31
  8119  000D66  0101               	movlb	1	; () banked
  8120  000D68  5D20               	subwf	logPC@i& (0+255),w,b
  8121  000D6A  B0D8               	btfsc	status,0,c
  8122  000D6C  D01D               	goto	l6799
  8123                           
  8124                           ; BSR set to: 1
  8125                           ;main.c: 861: I2C_Master_Start();
  8126                           
  8127                           ; BSR set to: 1
  8128                           
  8129                           ; BSR set to: 1
  8130  000D6E  EC13  F01C         	call	_I2C_Master_Start	;wreg free
  8131                           
  8132                           ;main.c: 862: I2C_Master_Write(0b00010000);
  8133  000D72  0E00               	movlw	0
  8134  000D74  0100               	movlb	0	; () banked
  8135  000D76  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8136  000D78  0E10               	movlw	16
  8137  000D7A  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8138  000D7C  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  8139                           
  8140                           ;main.c: 863: I2C_Master_Write(timeHeader[i]);
  8141  000D80  0E48               	movlw	low _timeHeader
  8142  000D82  0101               	movlb	1	; () banked
  8143  000D84  2520               	addwf	logPC@i& (0+255),w,b
  8144  000D86  6EF6               	movwf	tblptrl,c
  8145  000D88  0EFD               	movlw	high _timeHeader
  8146  000D8A  2121               	addwfc	(logPC@i+1)& (0+255),w,b
  8147  000D8C  6EF7               	movwf	tblptrh,c
  8148  000D8E                     	if	0	;There are less than 3 active tblptr bytes
  8149  000D8E                     	endif
  8150  000D8E  0008               	tblrd		*
  8151  000D90  50F5               	movf	tablat,w,c
  8152  000D92  0100               	movlb	0	; () banked
  8153  000D94  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8154  000D96  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  8155  000D98  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  8156                           
  8157                           ;main.c: 864: I2C_Master_Stop();
  8158  000D9C  EC0F  F01C         	call	_I2C_Master_Stop	;wreg free
  8159  000DA0  0101               	movlb	1	; () banked
  8160  000DA2  4B20               	infsnz	logPC@i& (0+255),f,b
  8161  000DA4  2B21               	incf	(logPC@i+1)& (0+255),f,b
  8162  000DA6  D7DB               	goto	l6785
  8163  000DA8                     l6799:
  8164                           
  8165                           ; BSR set to: 1
  8166                           ;main.c: 865: }
  8167                           ;main.c: 866: char started_time[19] = "  /  /     :  :  ";
  8168  000DA8  EE20  F035         	lfsr	2,logPC@F3226
  8169  000DAC  EE11  F000         	lfsr	1,logPC@started_time
  8170  000DB0  0E12               	movlw	18
  8171  000DB2                     u6641:
  8172  000DB2  CFDB FFE3          	movff	plusw2,plusw1
  8173  000DB6  06E8               	decf	wreg,f,c
  8174  000DB8  E2FC               	bc	u6641
  8175                           
  8176                           ; BSR set to: 1
  8177                           ;main.c: 867: started_time[0] = getChar(getTens( (lastRunRTC[6] & 0x0F) + ((lastRunRTC[6
      +                          ] & 0xF0)>>4)*10 ));
  8178  000DBA  C0CE  F090         	movff	_lastRunRTC+6,??_logPC
  8179  000DBE  0100               	movlb	0	; () banked
  8180  000DC0  3B90               	swapf	??_logPC& (0+255),f,b
  8181  000DC2  0E0F               	movlw	15
  8182  000DC4  1790               	andwf	??_logPC& (0+255),f,b
  8183  000DC6  0E0F               	movlw	15
  8184  000DC8  0100               	movlb	0	; () banked
  8185  000DCA  1790               	andwf	??_logPC& (0+255),f,b
  8186  000DCC  0100               	movlb	0	; () banked
  8187  000DCE  5190               	movf	??_logPC& (0+255),w,b
  8188  000DD0  0D0A               	mullw	10
  8189  000DD2  C0CE  F091         	movff	_lastRunRTC+6,??_logPC+1
  8190  000DD6  0E0F               	movlw	15
  8191  000DD8  0100               	movlb	0	; () banked
  8192  000DDA  1791               	andwf	(??_logPC+1)& (0+255),f,b
  8193  000DDC  0100               	movlb	0	; () banked
  8194  000DDE  5191               	movf	(??_logPC+1)& (0+255),w,b
  8195  000DE0  24F3               	addwf	prodl,w,c
  8196  000DE2  0100               	movlb	0	; () banked
  8197  000DE4  6F87               	movwf	getTens@num& (0+255),b
  8198  000DE6  0E00               	movlw	0
  8199  000DE8  20F4               	addwfc	prodh,w,c
  8200  000DEA  0100               	movlb	0	; () banked
  8201  000DEC  6F88               	movwf	(getTens@num+1)& (0+255),b
  8202  000DEE  EC90  F01A         	call	_getTens	;wreg free
  8203  000DF2  C087  F08E         	movff	?_getTens,getChar@num
  8204  000DF6  C088  F08F         	movff	?_getTens+1,getChar@num+1
  8205  000DFA  EC0B  F01C         	call	_getChar	;wreg free
  8206  000DFE  0101               	movlb	1	; () banked
  8207  000E00  6F00               	movwf	logPC@started_time& (0+255),b
  8208                           
  8209                           ; BSR set to: 1
  8210                           ;main.c: 868: started_time[1] = getChar(getOnes( (lastRunRTC[6] & 0x0F) + ((lastRunRTC[6
      +                          ] & 0xF0)>>4)*10 ));
  8211  000E02  C0CE  F090         	movff	_lastRunRTC+6,??_logPC
  8212  000E06  0100               	movlb	0	; () banked
  8213  000E08  3B90               	swapf	??_logPC& (0+255),f,b
  8214  000E0A  0E0F               	movlw	15
  8215  000E0C  1790               	andwf	??_logPC& (0+255),f,b
  8216  000E0E  0E0F               	movlw	15
  8217  000E10  0100               	movlb	0	; () banked
  8218  000E12  1790               	andwf	??_logPC& (0+255),f,b
  8219  000E14  0100               	movlb	0	; () banked
  8220  000E16  5190               	movf	??_logPC& (0+255),w,b
  8221  000E18  0D0A               	mullw	10
  8222  000E1A  C0CE  F091         	movff	_lastRunRTC+6,??_logPC+1
  8223  000E1E  0E0F               	movlw	15
  8224  000E20  0100               	movlb	0	; () banked
  8225  000E22  1791               	andwf	(??_logPC+1)& (0+255),f,b
  8226  000E24  0100               	movlb	0	; () banked
  8227  000E26  5191               	movf	(??_logPC+1)& (0+255),w,b
  8228  000E28  24F3               	addwf	prodl,w,c
  8229  000E2A  0100               	movlb	0	; () banked
  8230  000E2C  6F8C               	movwf	getOnes@num& (0+255),b
  8231  000E2E  0E00               	movlw	0
  8232  000E30  20F4               	addwfc	prodh,w,c
  8233  000E32  0100               	movlb	0	; () banked
  8234  000E34  6F8D               	movwf	(getOnes@num+1)& (0+255),b
  8235  000E36  EC60  F01B         	call	_getOnes	;wreg free
  8236  000E3A  C08C  F08E         	movff	?_getOnes,getChar@num
  8237  000E3E  C08D  F08F         	movff	?_getOnes+1,getChar@num+1
  8238  000E42  EC0B  F01C         	call	_getChar	;wreg free
  8239  000E46  0101               	movlb	1	; () banked
  8240  000E48  6F01               	movwf	(logPC@started_time+1)& (0+255),b
  8241                           
  8242                           ; BSR set to: 1
  8243                           ;main.c: 869: started_time[3] = getChar(getTens( (lastRunRTC[5] & 0x0F) + ((lastRunRTC[5
      +                          ] & 0xF0)>>4)*10 ));
  8244  000E4A  C0CD  F090         	movff	_lastRunRTC+5,??_logPC
  8245  000E4E  0100               	movlb	0	; () banked
  8246  000E50  3B90               	swapf	??_logPC& (0+255),f,b
  8247  000E52  0E0F               	movlw	15
  8248  000E54  1790               	andwf	??_logPC& (0+255),f,b
  8249  000E56  0E0F               	movlw	15
  8250  000E58  0100               	movlb	0	; () banked
  8251  000E5A  1790               	andwf	??_logPC& (0+255),f,b
  8252  000E5C  0100               	movlb	0	; () banked
  8253  000E5E  5190               	movf	??_logPC& (0+255),w,b
  8254  000E60  0D0A               	mullw	10
  8255  000E62  C0CD  F091         	movff	_lastRunRTC+5,??_logPC+1
  8256  000E66  0E0F               	movlw	15
  8257  000E68  0100               	movlb	0	; () banked
  8258  000E6A  1791               	andwf	(??_logPC+1)& (0+255),f,b
  8259  000E6C  0100               	movlb	0	; () banked
  8260  000E6E  5191               	movf	(??_logPC+1)& (0+255),w,b
  8261  000E70  24F3               	addwf	prodl,w,c
  8262  000E72  0100               	movlb	0	; () banked
  8263  000E74  6F87               	movwf	getTens@num& (0+255),b
  8264  000E76  0E00               	movlw	0
  8265  000E78  20F4               	addwfc	prodh,w,c
  8266  000E7A  0100               	movlb	0	; () banked
  8267  000E7C  6F88               	movwf	(getTens@num+1)& (0+255),b
  8268  000E7E  EC90  F01A         	call	_getTens	;wreg free
  8269  000E82  C087  F08E         	movff	?_getTens,getChar@num
  8270  000E86  C088  F08F         	movff	?_getTens+1,getChar@num+1
  8271  000E8A  EC0B  F01C         	call	_getChar	;wreg free
  8272  000E8E  0101               	movlb	1	; () banked
  8273  000E90  6F03               	movwf	(logPC@started_time+3)& (0+255),b
  8274                           
  8275                           ; BSR set to: 1
  8276                           ;main.c: 870: started_time[4] = getChar(getOnes( (lastRunRTC[5] & 0x0F) + ((lastRunRTC[5
      +                          ] & 0xF0)>>4)*10 ));
  8277  000E92  C0CD  F090         	movff	_lastRunRTC+5,??_logPC
  8278  000E96  0100               	movlb	0	; () banked
  8279  000E98  3B90               	swapf	??_logPC& (0+255),f,b
  8280  000E9A  0E0F               	movlw	15
  8281  000E9C  1790               	andwf	??_logPC& (0+255),f,b
  8282  000E9E  0E0F               	movlw	15
  8283  000EA0  0100               	movlb	0	; () banked
  8284  000EA2  1790               	andwf	??_logPC& (0+255),f,b
  8285  000EA4  0100               	movlb	0	; () banked
  8286  000EA6  5190               	movf	??_logPC& (0+255),w,b
  8287  000EA8  0D0A               	mullw	10
  8288  000EAA  C0CD  F091         	movff	_lastRunRTC+5,??_logPC+1
  8289  000EAE  0E0F               	movlw	15
  8290  000EB0  0100               	movlb	0	; () banked
  8291  000EB2  1791               	andwf	(??_logPC+1)& (0+255),f,b
  8292  000EB4  0100               	movlb	0	; () banked
  8293  000EB6  5191               	movf	(??_logPC+1)& (0+255),w,b
  8294  000EB8  24F3               	addwf	prodl,w,c
  8295  000EBA  0100               	movlb	0	; () banked
  8296  000EBC  6F8C               	movwf	getOnes@num& (0+255),b
  8297  000EBE  0E00               	movlw	0
  8298  000EC0  20F4               	addwfc	prodh,w,c
  8299  000EC2  0100               	movlb	0	; () banked
  8300  000EC4  6F8D               	movwf	(getOnes@num+1)& (0+255),b
  8301  000EC6  EC60  F01B         	call	_getOnes	;wreg free
  8302  000ECA  C08C  F08E         	movff	?_getOnes,getChar@num
  8303  000ECE  C08D  F08F         	movff	?_getOnes+1,getChar@num+1
  8304  000ED2  EC0B  F01C         	call	_getChar	;wreg free
  8305  000ED6  0101               	movlb	1	; () banked
  8306  000ED8  6F04               	movwf	(logPC@started_time+4)& (0+255),b
  8307                           
  8308                           ; BSR set to: 1
  8309                           ;main.c: 871: started_time[6] = getChar(getTens( (lastRunRTC[4] & 0x0F) + ((lastRunRTC[4
      +                          ] & 0xF0)>>4)*10 ));
  8310  000EDA  C0CC  F090         	movff	_lastRunRTC+4,??_logPC
  8311  000EDE  0100               	movlb	0	; () banked
  8312  000EE0  3B90               	swapf	??_logPC& (0+255),f,b
  8313  000EE2  0E0F               	movlw	15
  8314  000EE4  1790               	andwf	??_logPC& (0+255),f,b
  8315  000EE6  0E0F               	movlw	15
  8316  000EE8  0100               	movlb	0	; () banked
  8317  000EEA  1790               	andwf	??_logPC& (0+255),f,b
  8318  000EEC  0100               	movlb	0	; () banked
  8319  000EEE  5190               	movf	??_logPC& (0+255),w,b
  8320  000EF0  0D0A               	mullw	10
  8321  000EF2  C0CC  F091         	movff	_lastRunRTC+4,??_logPC+1
  8322  000EF6  0E0F               	movlw	15
  8323  000EF8  0100               	movlb	0	; () banked
  8324  000EFA  1791               	andwf	(??_logPC+1)& (0+255),f,b
  8325  000EFC  0100               	movlb	0	; () banked
  8326  000EFE  5191               	movf	(??_logPC+1)& (0+255),w,b
  8327  000F00  24F3               	addwf	prodl,w,c
  8328  000F02  0100               	movlb	0	; () banked
  8329  000F04  6F87               	movwf	getTens@num& (0+255),b
  8330  000F06  0E00               	movlw	0
  8331  000F08  20F4               	addwfc	prodh,w,c
  8332  000F0A  0100               	movlb	0	; () banked
  8333  000F0C  6F88               	movwf	(getTens@num+1)& (0+255),b
  8334  000F0E  EC90  F01A         	call	_getTens	;wreg free
  8335  000F12  C087  F08E         	movff	?_getTens,getChar@num
  8336  000F16  C088  F08F         	movff	?_getTens+1,getChar@num+1
  8337  000F1A  EC0B  F01C         	call	_getChar	;wreg free
  8338  000F1E  0101               	movlb	1	; () banked
  8339  000F20  6F06               	movwf	(logPC@started_time+6)& (0+255),b
  8340                           
  8341                           ; BSR set to: 1
  8342                           ;main.c: 872: started_time[7] = getChar(getOnes( (lastRunRTC[4] & 0x0F) + ((lastRunRTC[4
      +                          ] & 0xF0)>>4)*10 ));
  8343  000F22  C0CC  F090         	movff	_lastRunRTC+4,??_logPC
  8344  000F26  0100               	movlb	0	; () banked
  8345  000F28  3B90               	swapf	??_logPC& (0+255),f,b
  8346  000F2A  0E0F               	movlw	15
  8347  000F2C  1790               	andwf	??_logPC& (0+255),f,b
  8348  000F2E  0E0F               	movlw	15
  8349  000F30  0100               	movlb	0	; () banked
  8350  000F32  1790               	andwf	??_logPC& (0+255),f,b
  8351  000F34  0100               	movlb	0	; () banked
  8352  000F36  5190               	movf	??_logPC& (0+255),w,b
  8353  000F38  0D0A               	mullw	10
  8354  000F3A  C0CC  F091         	movff	_lastRunRTC+4,??_logPC+1
  8355  000F3E  0E0F               	movlw	15
  8356  000F40  0100               	movlb	0	; () banked
  8357  000F42  1791               	andwf	(??_logPC+1)& (0+255),f,b
  8358  000F44  0100               	movlb	0	; () banked
  8359  000F46  5191               	movf	(??_logPC+1)& (0+255),w,b
  8360  000F48  24F3               	addwf	prodl,w,c
  8361  000F4A  0100               	movlb	0	; () banked
  8362  000F4C  6F8C               	movwf	getOnes@num& (0+255),b
  8363  000F4E  0E00               	movlw	0
  8364  000F50  20F4               	addwfc	prodh,w,c
  8365  000F52  0100               	movlb	0	; () banked
  8366  000F54  6F8D               	movwf	(getOnes@num+1)& (0+255),b
  8367  000F56  EC60  F01B         	call	_getOnes	;wreg free
  8368  000F5A  C08C  F08E         	movff	?_getOnes,getChar@num
  8369  000F5E  C08D  F08F         	movff	?_getOnes+1,getChar@num+1
  8370  000F62  EC0B  F01C         	call	_getChar	;wreg free
  8371  000F66  0101               	movlb	1	; () banked
  8372  000F68  6F07               	movwf	(logPC@started_time+7)& (0+255),b
  8373                           
  8374                           ; BSR set to: 1
  8375                           ;main.c: 873: started_time[9] = getChar(getTens( (lastRunRTC[2] & 0x0F) + ((lastRunRTC[2
      +                          ] & 0xF0)>>4)*10 ));
  8376  000F6A  C0CA  F090         	movff	_lastRunRTC+2,??_logPC
  8377  000F6E  0100               	movlb	0	; () banked
  8378  000F70  3B90               	swapf	??_logPC& (0+255),f,b
  8379  000F72  0E0F               	movlw	15
  8380  000F74  1790               	andwf	??_logPC& (0+255),f,b
  8381  000F76  0E0F               	movlw	15
  8382  000F78  0100               	movlb	0	; () banked
  8383  000F7A  1790               	andwf	??_logPC& (0+255),f,b
  8384  000F7C  0100               	movlb	0	; () banked
  8385  000F7E  5190               	movf	??_logPC& (0+255),w,b
  8386  000F80  0D0A               	mullw	10
  8387  000F82  C0CA  F091         	movff	_lastRunRTC+2,??_logPC+1
  8388  000F86  0E0F               	movlw	15
  8389  000F88  0100               	movlb	0	; () banked
  8390  000F8A  1791               	andwf	(??_logPC+1)& (0+255),f,b
  8391  000F8C  0100               	movlb	0	; () banked
  8392  000F8E  5191               	movf	(??_logPC+1)& (0+255),w,b
  8393  000F90  24F3               	addwf	prodl,w,c
  8394  000F92  0100               	movlb	0	; () banked
  8395  000F94  6F87               	movwf	getTens@num& (0+255),b
  8396  000F96  0E00               	movlw	0
  8397  000F98  20F4               	addwfc	prodh,w,c
  8398  000F9A  0100               	movlb	0	; () banked
  8399  000F9C  6F88               	movwf	(getTens@num+1)& (0+255),b
  8400  000F9E  EC90  F01A         	call	_getTens	;wreg free
  8401  000FA2  C087  F08E         	movff	?_getTens,getChar@num
  8402  000FA6  C088  F08F         	movff	?_getTens+1,getChar@num+1
  8403  000FAA  EC0B  F01C         	call	_getChar	;wreg free
  8404  000FAE  0101               	movlb	1	; () banked
  8405  000FB0  6F09               	movwf	(logPC@started_time+9)& (0+255),b
  8406                           
  8407                           ; BSR set to: 1
  8408                           ;main.c: 874: started_time[10] = getChar(getOnes( (lastRunRTC[2] & 0x0F) + ((lastRunRTC[
      +                          2] & 0xF0)>>4)*10 ));
  8409  000FB2  C0CA  F090         	movff	_lastRunRTC+2,??_logPC
  8410  000FB6  0100               	movlb	0	; () banked
  8411  000FB8  3B90               	swapf	??_logPC& (0+255),f,b
  8412  000FBA  0E0F               	movlw	15
  8413  000FBC  1790               	andwf	??_logPC& (0+255),f,b
  8414  000FBE  0E0F               	movlw	15
  8415  000FC0  0100               	movlb	0	; () banked
  8416  000FC2  1790               	andwf	??_logPC& (0+255),f,b
  8417  000FC4  0100               	movlb	0	; () banked
  8418  000FC6  5190               	movf	??_logPC& (0+255),w,b
  8419  000FC8  0D0A               	mullw	10
  8420  000FCA  C0CA  F091         	movff	_lastRunRTC+2,??_logPC+1
  8421  000FCE  0E0F               	movlw	15
  8422  000FD0  0100               	movlb	0	; () banked
  8423  000FD2  1791               	andwf	(??_logPC+1)& (0+255),f,b
  8424  000FD4  0100               	movlb	0	; () banked
  8425  000FD6  5191               	movf	(??_logPC+1)& (0+255),w,b
  8426  000FD8  24F3               	addwf	prodl,w,c
  8427  000FDA  0100               	movlb	0	; () banked
  8428  000FDC  6F8C               	movwf	getOnes@num& (0+255),b
  8429  000FDE  0E00               	movlw	0
  8430  000FE0  20F4               	addwfc	prodh,w,c
  8431  000FE2  0100               	movlb	0	; () banked
  8432  000FE4  6F8D               	movwf	(getOnes@num+1)& (0+255),b
  8433  000FE6  EC60  F01B         	call	_getOnes	;wreg free
  8434  000FEA  C08C  F08E         	movff	?_getOnes,getChar@num
  8435  000FEE  C08D  F08F         	movff	?_getOnes+1,getChar@num+1
  8436  000FF2  EC0B  F01C         	call	_getChar	;wreg free
  8437  000FF6  0101               	movlb	1	; () banked
  8438  000FF8  6F0A               	movwf	(logPC@started_time+10)& (0+255),b
  8439                           
  8440                           ; BSR set to: 1
  8441                           ;main.c: 875: started_time[12] = getChar(getTens( (lastRunRTC[1] & 0x0F) + ((lastRunRTC[
      +                          1] & 0xF0)>>4)*10 ));
  8442  000FFA  C0C9  F090         	movff	_lastRunRTC+1,??_logPC
  8443  000FFE  0100               	movlb	0	; () banked
  8444  001000  3B90               	swapf	??_logPC& (0+255),f,b
  8445  001002  0E0F               	movlw	15
  8446  001004  1790               	andwf	??_logPC& (0+255),f,b
  8447  001006  0E0F               	movlw	15
  8448  001008  0100               	movlb	0	; () banked
  8449  00100A  1790               	andwf	??_logPC& (0+255),f,b
  8450  00100C  0100               	movlb	0	; () banked
  8451  00100E  5190               	movf	??_logPC& (0+255),w,b
  8452  001010  0D0A               	mullw	10
  8453  001012  C0C9  F091         	movff	_lastRunRTC+1,??_logPC+1
  8454  001016  0E0F               	movlw	15
  8455  001018  0100               	movlb	0	; () banked
  8456  00101A  1791               	andwf	(??_logPC+1)& (0+255),f,b
  8457  00101C  0100               	movlb	0	; () banked
  8458  00101E  5191               	movf	(??_logPC+1)& (0+255),w,b
  8459  001020  24F3               	addwf	prodl,w,c
  8460  001022  0100               	movlb	0	; () banked
  8461  001024  6F87               	movwf	getTens@num& (0+255),b
  8462  001026  0E00               	movlw	0
  8463  001028  20F4               	addwfc	prodh,w,c
  8464  00102A  0100               	movlb	0	; () banked
  8465  00102C  6F88               	movwf	(getTens@num+1)& (0+255),b
  8466  00102E  EC90  F01A         	call	_getTens	;wreg free
  8467  001032  C087  F08E         	movff	?_getTens,getChar@num
  8468  001036  C088  F08F         	movff	?_getTens+1,getChar@num+1
  8469  00103A  EC0B  F01C         	call	_getChar	;wreg free
  8470  00103E  0101               	movlb	1	; () banked
  8471  001040  6F0C               	movwf	(logPC@started_time+12)& (0+255),b
  8472                           
  8473                           ; BSR set to: 1
  8474                           ;main.c: 876: started_time[13] = getChar(getOnes( (lastRunRTC[1] & 0x0F) + ((lastRunRTC[
      +                          1] & 0xF0)>>4)*10 ));
  8475  001042  C0C9  F090         	movff	_lastRunRTC+1,??_logPC
  8476  001046  0100               	movlb	0	; () banked
  8477  001048  3B90               	swapf	??_logPC& (0+255),f,b
  8478  00104A  0E0F               	movlw	15
  8479  00104C  1790               	andwf	??_logPC& (0+255),f,b
  8480  00104E  0E0F               	movlw	15
  8481  001050  0100               	movlb	0	; () banked
  8482  001052  1790               	andwf	??_logPC& (0+255),f,b
  8483  001054  0100               	movlb	0	; () banked
  8484  001056  5190               	movf	??_logPC& (0+255),w,b
  8485  001058  0D0A               	mullw	10
  8486  00105A  C0C9  F091         	movff	_lastRunRTC+1,??_logPC+1
  8487  00105E  0E0F               	movlw	15
  8488  001060  0100               	movlb	0	; () banked
  8489  001062  1791               	andwf	(??_logPC+1)& (0+255),f,b
  8490  001064  0100               	movlb	0	; () banked
  8491  001066  5191               	movf	(??_logPC+1)& (0+255),w,b
  8492  001068  24F3               	addwf	prodl,w,c
  8493  00106A  0100               	movlb	0	; () banked
  8494  00106C  6F8C               	movwf	getOnes@num& (0+255),b
  8495  00106E  0E00               	movlw	0
  8496  001070  20F4               	addwfc	prodh,w,c
  8497  001072  0100               	movlb	0	; () banked
  8498  001074  6F8D               	movwf	(getOnes@num+1)& (0+255),b
  8499  001076  EC60  F01B         	call	_getOnes	;wreg free
  8500  00107A  C08C  F08E         	movff	?_getOnes,getChar@num
  8501  00107E  C08D  F08F         	movff	?_getOnes+1,getChar@num+1
  8502  001082  EC0B  F01C         	call	_getChar	;wreg free
  8503  001086  0101               	movlb	1	; () banked
  8504  001088  6F0D               	movwf	(logPC@started_time+13)& (0+255),b
  8505                           
  8506                           ; BSR set to: 1
  8507                           ;main.c: 877: started_time[15] = getChar(getTens( (lastRunRTC[0] & 0x0F) + ((lastRunRTC[
      +                          0] & 0xF0)>>4)*10 ));
  8508  00108A  C0C8  F090         	movff	_lastRunRTC,??_logPC
  8509  00108E  0100               	movlb	0	; () banked
  8510  001090  3B90               	swapf	??_logPC& (0+255),f,b
  8511  001092  0E0F               	movlw	15
  8512  001094  1790               	andwf	??_logPC& (0+255),f,b
  8513  001096  0E0F               	movlw	15
  8514  001098  0100               	movlb	0	; () banked
  8515  00109A  1790               	andwf	??_logPC& (0+255),f,b
  8516  00109C  0100               	movlb	0	; () banked
  8517  00109E  5190               	movf	??_logPC& (0+255),w,b
  8518  0010A0  0D0A               	mullw	10
  8519  0010A2  C0C8  F091         	movff	_lastRunRTC,??_logPC+1
  8520  0010A6  0E0F               	movlw	15
  8521  0010A8  0100               	movlb	0	; () banked
  8522  0010AA  1791               	andwf	(??_logPC+1)& (0+255),f,b
  8523  0010AC  0100               	movlb	0	; () banked
  8524  0010AE  5191               	movf	(??_logPC+1)& (0+255),w,b
  8525  0010B0  24F3               	addwf	prodl,w,c
  8526  0010B2  0100               	movlb	0	; () banked
  8527  0010B4  6F87               	movwf	getTens@num& (0+255),b
  8528  0010B6  0E00               	movlw	0
  8529  0010B8  20F4               	addwfc	prodh,w,c
  8530  0010BA  0100               	movlb	0	; () banked
  8531  0010BC  6F88               	movwf	(getTens@num+1)& (0+255),b
  8532  0010BE  EC90  F01A         	call	_getTens	;wreg free
  8533  0010C2  C087  F08E         	movff	?_getTens,getChar@num
  8534  0010C6  C088  F08F         	movff	?_getTens+1,getChar@num+1
  8535  0010CA  EC0B  F01C         	call	_getChar	;wreg free
  8536  0010CE  0101               	movlb	1	; () banked
  8537  0010D0  6F0F               	movwf	(logPC@started_time+15)& (0+255),b
  8538                           
  8539                           ; BSR set to: 1
  8540                           ;main.c: 878: started_time[16] = getChar(getOnes( (lastRunRTC[0] & 0x0F) + ((lastRunRTC[
      +                          0] & 0xF0)>>4)*10 ));
  8541  0010D2  C0C8  F090         	movff	_lastRunRTC,??_logPC
  8542  0010D6  0100               	movlb	0	; () banked
  8543  0010D8  3B90               	swapf	??_logPC& (0+255),f,b
  8544  0010DA  0E0F               	movlw	15
  8545  0010DC  1790               	andwf	??_logPC& (0+255),f,b
  8546  0010DE  0E0F               	movlw	15
  8547  0010E0  0100               	movlb	0	; () banked
  8548  0010E2  1790               	andwf	??_logPC& (0+255),f,b
  8549  0010E4  0100               	movlb	0	; () banked
  8550  0010E6  5190               	movf	??_logPC& (0+255),w,b
  8551  0010E8  0D0A               	mullw	10
  8552  0010EA  C0C8  F091         	movff	_lastRunRTC,??_logPC+1
  8553  0010EE  0E0F               	movlw	15
  8554  0010F0  0100               	movlb	0	; () banked
  8555  0010F2  1791               	andwf	(??_logPC+1)& (0+255),f,b
  8556  0010F4  0100               	movlb	0	; () banked
  8557  0010F6  5191               	movf	(??_logPC+1)& (0+255),w,b
  8558  0010F8  24F3               	addwf	prodl,w,c
  8559  0010FA  0100               	movlb	0	; () banked
  8560  0010FC  6F8C               	movwf	getOnes@num& (0+255),b
  8561  0010FE  0E00               	movlw	0
  8562  001100  20F4               	addwfc	prodh,w,c
  8563  001102  0100               	movlb	0	; () banked
  8564  001104  6F8D               	movwf	(getOnes@num+1)& (0+255),b
  8565  001106  EC60  F01B         	call	_getOnes	;wreg free
  8566  00110A  C08C  F08E         	movff	?_getOnes,getChar@num
  8567  00110E  C08D  F08F         	movff	?_getOnes+1,getChar@num+1
  8568  001112  EC0B  F01C         	call	_getChar	;wreg free
  8569  001116  0101               	movlb	1	; () banked
  8570  001118  6F10               	movwf	(logPC@started_time+16)& (0+255),b
  8571                           
  8572                           ; BSR set to: 1
  8573                           ;main.c: 879: for(unsigned int i = 0; i < 19; i++) {
  8574  00111A  0E00               	movlw	0
  8575  00111C  0101               	movlb	1	; () banked
  8576  00111E  6F23               	movwf	(logPC@i_913+1)& (0+255),b
  8577  001120  0E00               	movlw	0
  8578  001122  6F22               	movwf	logPC@i_913& (0+255),b
  8579  001124                     l6827:
  8580                           
  8581                           ; BSR set to: 1
  8582  001124  0101               	movlb	1	; () banked
  8583  001126  5123               	movf	(logPC@i_913+1)& (0+255),w,b
  8584  001128  E126               	bnz	l6841
  8585  00112A  0E13               	movlw	19
  8586  00112C  0101               	movlb	1	; () banked
  8587  00112E  5D22               	subwf	logPC@i_913& (0+255),w,b
  8588  001130  B0D8               	btfsc	status,0,c
  8589  001132  D021               	goto	l6841
  8590                           
  8591                           ; BSR set to: 1
  8592                           ;main.c: 880: I2C_Master_Start();
  8593                           
  8594                           ; BSR set to: 1
  8595                           
  8596                           ; BSR set to: 1
  8597  001134  EC13  F01C         	call	_I2C_Master_Start	;wreg free
  8598                           
  8599                           ;main.c: 881: I2C_Master_Write(0b00010000);
  8600  001138  0E00               	movlw	0
  8601  00113A  0100               	movlb	0	; () banked
  8602  00113C  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8603  00113E  0E10               	movlw	16
  8604  001140  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8605  001142  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  8606                           
  8607                           ;main.c: 882: I2C_Master_Write(started_time[i]);
  8608  001146  0E00               	movlw	low logPC@started_time
  8609  001148  0101               	movlb	1	; () banked
  8610  00114A  2522               	addwf	logPC@i_913& (0+255),w,b
  8611  00114C  6ED9               	movwf	fsr2l,c
  8612  00114E  0E01               	movlw	high logPC@started_time
  8613  001150  0101               	movlb	1	; () banked
  8614  001152  2123               	addwfc	(logPC@i_913+1)& (0+255),w,b
  8615  001154  6EDA               	movwf	fsr2h,c
  8616  001156  50DF               	movf	indf2,w,c
  8617  001158  0100               	movlb	0	; () banked
  8618  00115A  6F90               	movwf	??_logPC& (0+255),b
  8619  00115C  0100               	movlb	0	; () banked
  8620  00115E  5190               	movf	??_logPC& (0+255),w,b
  8621  001160  0100               	movlb	0	; () banked
  8622  001162  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8623  001164  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  8624  001166  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  8625                           
  8626                           ;main.c: 883: I2C_Master_Stop();
  8627  00116A  EC0F  F01C         	call	_I2C_Master_Stop	;wreg free
  8628  00116E  0101               	movlb	1	; () banked
  8629  001170  4B22               	infsnz	logPC@i_913& (0+255),f,b
  8630  001172  2B23               	incf	(logPC@i_913+1)& (0+255),f,b
  8631  001174  D7D7               	goto	l6827
  8632  001176                     l6841:
  8633                           
  8634                           ; BSR set to: 1
  8635                           ;main.c: 884: }
  8636                           ;main.c: 886: I2C_Master_Start();
  8637  001176  EC13  F01C         	call	_I2C_Master_Start	;wreg free
  8638                           
  8639                           ;main.c: 887: I2C_Master_Write(0b00010000);
  8640  00117A  0E00               	movlw	0
  8641  00117C  0100               	movlb	0	; () banked
  8642  00117E  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8643  001180  0E10               	movlw	16
  8644  001182  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8645  001184  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  8646                           
  8647                           ;main.c: 888: I2C_Master_Write('\n');
  8648  001188  0E00               	movlw	0
  8649  00118A  0100               	movlb	0	; () banked
  8650  00118C  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8651  00118E  0E0A               	movlw	10
  8652  001190  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8653  001192  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  8654                           
  8655                           ;main.c: 889: I2C_Master_Stop();
  8656  001196  EC0F  F01C         	call	_I2C_Master_Stop	;wreg free
  8657                           
  8658                           ;main.c: 890: for(unsigned int i = 0; i < 31; i++) {
  8659  00119A  0E00               	movlw	0
  8660  00119C  0101               	movlb	1	; () banked
  8661  00119E  6F25               	movwf	(logPC@i_914+1)& (0+255),b
  8662  0011A0  0E00               	movlw	0
  8663  0011A2  6F24               	movwf	logPC@i_914& (0+255),b
  8664                           
  8665                           ; BSR set to: 1
  8666  0011A4  0101               	movlb	1	; () banked
  8667  0011A6  5125               	movf	(logPC@i_914+1)& (0+255),w,b
  8668  0011A8  E125               	bnz	l549
  8669  0011AA  0E1F               	movlw	31
  8670  0011AC  0101               	movlb	1	; () banked
  8671  0011AE  5D24               	subwf	logPC@i_914& (0+255),w,b
  8672  0011B0  B0D8               	btfsc	status,0,c
  8673  0011B2  D020               	goto	l549
  8674                           
  8675                           ; BSR set to: 1
  8676                           ;main.c: 891: I2C_Master_Start();
  8677                           
  8678                           ; BSR set to: 1
  8679                           
  8680                           ; BSR set to: 1
  8681  0011B4  EC13  F01C         	call	_I2C_Master_Start	;wreg free
  8682                           
  8683                           ;main.c: 892: I2C_Master_Write(0b00010000);
  8684  0011B8  0E00               	movlw	0
  8685  0011BA  0100               	movlb	0	; () banked
  8686  0011BC  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8687  0011BE  0E10               	movlw	16
  8688  0011C0  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8689  0011C2  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  8690                           
  8691                           ;main.c: 893: I2C_Master_Write(AAHeader[i]);
  8692  0011C6  0E08               	movlw	low _AAHeader
  8693  0011C8  0101               	movlb	1	; () banked
  8694  0011CA  2524               	addwf	logPC@i_914& (0+255),w,b
  8695  0011CC  6EF6               	movwf	tblptrl,c
  8696  0011CE  0EFD               	movlw	high _AAHeader
  8697  0011D0  2125               	addwfc	(logPC@i_914+1)& (0+255),w,b
  8698  0011D2  6EF7               	movwf	tblptrh,c
  8699  0011D4                     	if	0	;There are less than 3 active tblptr bytes
  8700  0011D4                     	endif
  8701  0011D4  0008               	tblrd		*
  8702  0011D6  50F5               	movf	tablat,w,c
  8703  0011D8  0100               	movlb	0	; () banked
  8704  0011DA  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8705  0011DC  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  8706  0011DE  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  8707                           
  8708                           ;main.c: 894: I2C_Master_Stop();
  8709  0011E2  EC0F  F01C         	call	_I2C_Master_Stop	;wreg free
  8710  0011E6  0101               	movlb	1	; () banked
  8711  0011E8  4B24               	infsnz	logPC@i_914& (0+255),f,b
  8712  0011EA  2B25               	incf	(logPC@i_914+1)& (0+255),f,b
  8713                           
  8714                           ; BSR set to: 1
  8715  0011EC  0101               	movlb	1	; () banked
  8716  0011EE  5125               	movf	(logPC@i_914+1)& (0+255),w,b
  8717  0011F0  E101               	bnz	u6680
  8718  0011F2  D7DB               	goto	L1
  8719  0011F4                     u6680:
  8720  0011F4                     l549:
  8721                           
  8722                           ; BSR set to: 1
  8723                           ;main.c: 895: }
  8724                           ;main.c: 896: char numberAA[2] = "  ";
  8725  0011F4  C0F0  F116         	movff	logPC@F3230,logPC@numberAA
  8726  0011F8  C0F1  F117         	movff	logPC@F3230+1,logPC@numberAA+1
  8727                           
  8728                           ; BSR set to: 1
  8729                           ;main.c: 897: numberAA[0] = getChar(getTens(numAA));
  8730  0011FC  C0E7  F087         	movff	_numAA,getTens@num
  8731  001200  0100               	movlb	0	; () banked
  8732  001202  6B88               	clrf	(getTens@num+1)& (0+255),b
  8733  001204  EC90  F01A         	call	_getTens	;wreg free
  8734  001208  C087  F08E         	movff	?_getTens,getChar@num
  8735  00120C  C088  F08F         	movff	?_getTens+1,getChar@num+1
  8736  001210  EC0B  F01C         	call	_getChar	;wreg free
  8737  001214  0101               	movlb	1	; () banked
  8738  001216  6F16               	movwf	logPC@numberAA& (0+255),b
  8739                           
  8740                           ;main.c: 898: numberAA[1] = getChar(getOnes(numAA));
  8741  001218  C0E7  F08C         	movff	_numAA,getOnes@num
  8742  00121C  0100               	movlb	0	; () banked
  8743  00121E  6B8D               	clrf	(getOnes@num+1)& (0+255),b
  8744  001220  EC60  F01B         	call	_getOnes	;wreg free
  8745  001224  C08C  F08E         	movff	?_getOnes,getChar@num
  8746  001228  C08D  F08F         	movff	?_getOnes+1,getChar@num+1
  8747  00122C  EC0B  F01C         	call	_getChar	;wreg free
  8748  001230  0101               	movlb	1	; () banked
  8749  001232  6F17               	movwf	(logPC@numberAA+1)& (0+255),b
  8750                           
  8751                           ; BSR set to: 1
  8752                           ;main.c: 899: for(unsigned int i = 0; i < 2; i++) {
  8753  001234  0E00               	movlw	0
  8754  001236  0101               	movlb	1	; () banked
  8755  001238  6F27               	movwf	(logPC@i_917+1)& (0+255),b
  8756  00123A  0E00               	movlw	0
  8757  00123C  6F26               	movwf	logPC@i_917& (0+255),b
  8758  00123E                     l6863:
  8759                           
  8760                           ; BSR set to: 1
  8761  00123E  0101               	movlb	1	; () banked
  8762  001240  5127               	movf	(logPC@i_917+1)& (0+255),w,b
  8763  001242  E126               	bnz	l6877
  8764  001244  0E02               	movlw	2
  8765  001246  0101               	movlb	1	; () banked
  8766  001248  5D26               	subwf	logPC@i_917& (0+255),w,b
  8767  00124A  B0D8               	btfsc	status,0,c
  8768  00124C  D021               	goto	l6877
  8769                           
  8770                           ; BSR set to: 1
  8771                           ;main.c: 900: I2C_Master_Start();
  8772                           
  8773                           ; BSR set to: 1
  8774                           
  8775                           ; BSR set to: 1
  8776  00124E  EC13  F01C         	call	_I2C_Master_Start	;wreg free
  8777                           
  8778                           ;main.c: 901: I2C_Master_Write(0b00010000);
  8779  001252  0E00               	movlw	0
  8780  001254  0100               	movlb	0	; () banked
  8781  001256  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8782  001258  0E10               	movlw	16
  8783  00125A  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8784  00125C  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  8785                           
  8786                           ;main.c: 902: I2C_Master_Write(numberAA[i]);
  8787  001260  0E16               	movlw	low logPC@numberAA
  8788  001262  0101               	movlb	1	; () banked
  8789  001264  2526               	addwf	logPC@i_917& (0+255),w,b
  8790  001266  6ED9               	movwf	fsr2l,c
  8791  001268  0E01               	movlw	high logPC@numberAA
  8792  00126A  0101               	movlb	1	; () banked
  8793  00126C  2127               	addwfc	(logPC@i_917+1)& (0+255),w,b
  8794  00126E  6EDA               	movwf	fsr2h,c
  8795  001270  50DF               	movf	indf2,w,c
  8796  001272  0100               	movlb	0	; () banked
  8797  001274  6F90               	movwf	??_logPC& (0+255),b
  8798  001276  0100               	movlb	0	; () banked
  8799  001278  5190               	movf	??_logPC& (0+255),w,b
  8800  00127A  0100               	movlb	0	; () banked
  8801  00127C  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8802  00127E  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  8803  001280  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  8804                           
  8805                           ;main.c: 903: I2C_Master_Stop();
  8806  001284  EC0F  F01C         	call	_I2C_Master_Stop	;wreg free
  8807  001288  0101               	movlb	1	; () banked
  8808  00128A  4B26               	infsnz	logPC@i_917& (0+255),f,b
  8809  00128C  2B27               	incf	(logPC@i_917+1)& (0+255),f,b
  8810  00128E  D7D7               	goto	l6863
  8811  001290                     l6877:
  8812                           
  8813                           ; BSR set to: 1
  8814                           ;main.c: 904: }
  8815                           ;main.c: 906: I2C_Master_Start();
  8816  001290  EC13  F01C         	call	_I2C_Master_Start	;wreg free
  8817                           
  8818                           ;main.c: 907: I2C_Master_Write(0b00010000);
  8819  001294  0E00               	movlw	0
  8820  001296  0100               	movlb	0	; () banked
  8821  001298  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8822  00129A  0E10               	movlw	16
  8823  00129C  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8824  00129E  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  8825                           
  8826                           ;main.c: 908: I2C_Master_Write('\n');
  8827  0012A2  0E00               	movlw	0
  8828  0012A4  0100               	movlb	0	; () banked
  8829  0012A6  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8830  0012A8  0E0A               	movlw	10
  8831  0012AA  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8832  0012AC  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  8833                           
  8834                           ;main.c: 909: I2C_Master_Stop();
  8835  0012B0  EC0F  F01C         	call	_I2C_Master_Stop	;wreg free
  8836                           
  8837                           ;main.c: 910: for(unsigned int i = 0; i < 30; i++) {
  8838  0012B4  0E00               	movlw	0
  8839  0012B6  0101               	movlb	1	; () banked
  8840  0012B8  6F29               	movwf	(logPC@i_918+1)& (0+255),b
  8841  0012BA  0E00               	movlw	0
  8842  0012BC  6F28               	movwf	logPC@i_918& (0+255),b
  8843                           
  8844                           ; BSR set to: 1
  8845  0012BE  0101               	movlb	1	; () banked
  8846  0012C0  5129               	movf	(logPC@i_918+1)& (0+255),w,b
  8847  0012C2  E125               	bnz	l555
  8848  0012C4  0E1E               	movlw	30
  8849  0012C6  0101               	movlb	1	; () banked
  8850  0012C8  5D28               	subwf	logPC@i_918& (0+255),w,b
  8851  0012CA  B0D8               	btfsc	status,0,c
  8852  0012CC  D020               	goto	l555
  8853                           
  8854                           ; BSR set to: 1
  8855                           ;main.c: 911: I2C_Master_Start();
  8856                           
  8857                           ; BSR set to: 1
  8858                           
  8859                           ; BSR set to: 1
  8860  0012CE  EC13  F01C         	call	_I2C_Master_Start	;wreg free
  8861                           
  8862                           ;main.c: 912: I2C_Master_Write(0b00010000);
  8863  0012D2  0E00               	movlw	0
  8864  0012D4  0100               	movlb	0	; () banked
  8865  0012D6  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8866  0012D8  0E10               	movlw	16
  8867  0012DA  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8868  0012DC  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  8869                           
  8870                           ;main.c: 913: I2C_Master_Write(CHeader[i]);
  8871  0012E0  0E68               	movlw	low _CHeader
  8872  0012E2  0101               	movlb	1	; () banked
  8873  0012E4  2528               	addwf	logPC@i_918& (0+255),w,b
  8874  0012E6  6EF6               	movwf	tblptrl,c
  8875  0012E8  0EFD               	movlw	high _CHeader
  8876  0012EA  2129               	addwfc	(logPC@i_918+1)& (0+255),w,b
  8877  0012EC  6EF7               	movwf	tblptrh,c
  8878  0012EE                     	if	0	;There are less than 3 active tblptr bytes
  8879  0012EE                     	endif
  8880  0012EE  0008               	tblrd		*
  8881  0012F0  50F5               	movf	tablat,w,c
  8882  0012F2  0100               	movlb	0	; () banked
  8883  0012F4  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8884  0012F6  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  8885  0012F8  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  8886                           
  8887                           ;main.c: 914: I2C_Master_Stop();
  8888  0012FC  EC0F  F01C         	call	_I2C_Master_Stop	;wreg free
  8889  001300  0101               	movlb	1	; () banked
  8890  001302  4B28               	infsnz	logPC@i_918& (0+255),f,b
  8891  001304  2B29               	incf	(logPC@i_918+1)& (0+255),f,b
  8892                           
  8893                           ; BSR set to: 1
  8894  001306  0101               	movlb	1	; () banked
  8895  001308  5129               	movf	(logPC@i_918+1)& (0+255),w,b
  8896  00130A  E101               	bnz	u6720
  8897  00130C  D7DB               	goto	L2
  8898  00130E                     u6720:
  8899  00130E                     l555:
  8900                           
  8901                           ; BSR set to: 1
  8902                           ;main.c: 915: }
  8903                           ;main.c: 916: char numberC[2] = "  ";
  8904  00130E  C0F2  F118         	movff	logPC@F3234,logPC@numberC
  8905  001312  C0F3  F119         	movff	logPC@F3234+1,logPC@numberC+1
  8906                           
  8907                           ; BSR set to: 1
  8908                           ;main.c: 917: numberC[0] = getChar(getTens(numC));
  8909  001316  C0E9  F087         	movff	_numC,getTens@num
  8910  00131A  0100               	movlb	0	; () banked
  8911  00131C  6B88               	clrf	(getTens@num+1)& (0+255),b
  8912  00131E  EC90  F01A         	call	_getTens	;wreg free
  8913  001322  C087  F08E         	movff	?_getTens,getChar@num
  8914  001326  C088  F08F         	movff	?_getTens+1,getChar@num+1
  8915  00132A  EC0B  F01C         	call	_getChar	;wreg free
  8916  00132E  0101               	movlb	1	; () banked
  8917  001330  6F18               	movwf	logPC@numberC& (0+255),b
  8918                           
  8919                           ;main.c: 918: numberC[1] = getChar(getOnes(numC));
  8920  001332  C0E9  F08C         	movff	_numC,getOnes@num
  8921  001336  0100               	movlb	0	; () banked
  8922  001338  6B8D               	clrf	(getOnes@num+1)& (0+255),b
  8923  00133A  EC60  F01B         	call	_getOnes	;wreg free
  8924  00133E  C08C  F08E         	movff	?_getOnes,getChar@num
  8925  001342  C08D  F08F         	movff	?_getOnes+1,getChar@num+1
  8926  001346  EC0B  F01C         	call	_getChar	;wreg free
  8927  00134A  0101               	movlb	1	; () banked
  8928  00134C  6F19               	movwf	(logPC@numberC+1)& (0+255),b
  8929                           
  8930                           ; BSR set to: 1
  8931                           ;main.c: 919: for(unsigned int i = 0; i < 2; i++) {
  8932  00134E  0E00               	movlw	0
  8933  001350  0101               	movlb	1	; () banked
  8934  001352  6F2B               	movwf	(logPC@i_921+1)& (0+255),b
  8935  001354  0E00               	movlw	0
  8936  001356  6F2A               	movwf	logPC@i_921& (0+255),b
  8937  001358                     l6899:
  8938                           
  8939                           ; BSR set to: 1
  8940  001358  0101               	movlb	1	; () banked
  8941  00135A  512B               	movf	(logPC@i_921+1)& (0+255),w,b
  8942  00135C  E126               	bnz	l6913
  8943  00135E  0E02               	movlw	2
  8944  001360  0101               	movlb	1	; () banked
  8945  001362  5D2A               	subwf	logPC@i_921& (0+255),w,b
  8946  001364  B0D8               	btfsc	status,0,c
  8947  001366  D021               	goto	l6913
  8948                           
  8949                           ; BSR set to: 1
  8950                           ;main.c: 920: I2C_Master_Start();
  8951                           
  8952                           ; BSR set to: 1
  8953                           
  8954                           ; BSR set to: 1
  8955  001368  EC13  F01C         	call	_I2C_Master_Start	;wreg free
  8956                           
  8957                           ;main.c: 921: I2C_Master_Write(0b00010000);
  8958  00136C  0E00               	movlw	0
  8959  00136E  0100               	movlb	0	; () banked
  8960  001370  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8961  001372  0E10               	movlw	16
  8962  001374  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8963  001376  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  8964                           
  8965                           ;main.c: 922: I2C_Master_Write(numberC[i]);
  8966  00137A  0E18               	movlw	low logPC@numberC
  8967  00137C  0101               	movlb	1	; () banked
  8968  00137E  252A               	addwf	logPC@i_921& (0+255),w,b
  8969  001380  6ED9               	movwf	fsr2l,c
  8970  001382  0E01               	movlw	high logPC@numberC
  8971  001384  0101               	movlb	1	; () banked
  8972  001386  212B               	addwfc	(logPC@i_921+1)& (0+255),w,b
  8973  001388  6EDA               	movwf	fsr2h,c
  8974  00138A  50DF               	movf	indf2,w,c
  8975  00138C  0100               	movlb	0	; () banked
  8976  00138E  6F90               	movwf	??_logPC& (0+255),b
  8977  001390  0100               	movlb	0	; () banked
  8978  001392  5190               	movf	??_logPC& (0+255),w,b
  8979  001394  0100               	movlb	0	; () banked
  8980  001396  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8981  001398  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  8982  00139A  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  8983                           
  8984                           ;main.c: 923: I2C_Master_Stop();
  8985  00139E  EC0F  F01C         	call	_I2C_Master_Stop	;wreg free
  8986  0013A2  0101               	movlb	1	; () banked
  8987  0013A4  4B2A               	infsnz	logPC@i_921& (0+255),f,b
  8988  0013A6  2B2B               	incf	(logPC@i_921+1)& (0+255),f,b
  8989  0013A8  D7D7               	goto	l6899
  8990  0013AA                     l6913:
  8991                           
  8992                           ; BSR set to: 1
  8993                           ;main.c: 924: }
  8994                           ;main.c: 926: I2C_Master_Start();
  8995  0013AA  EC13  F01C         	call	_I2C_Master_Start	;wreg free
  8996                           
  8997                           ;main.c: 927: I2C_Master_Write(0b00010000);
  8998  0013AE  0E00               	movlw	0
  8999  0013B0  0100               	movlb	0	; () banked
  9000  0013B2  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9001  0013B4  0E10               	movlw	16
  9002  0013B6  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9003  0013B8  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  9004                           
  9005                           ;main.c: 928: I2C_Master_Write('\n');
  9006  0013BC  0E00               	movlw	0
  9007  0013BE  0100               	movlb	0	; () banked
  9008  0013C0  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9009  0013C2  0E0A               	movlw	10
  9010  0013C4  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9011  0013C6  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  9012                           
  9013                           ;main.c: 929: I2C_Master_Stop();
  9014  0013CA  EC0F  F01C         	call	_I2C_Master_Stop	;wreg free
  9015                           
  9016                           ;main.c: 930: for(unsigned int i = 0; i < 31; i++) {
  9017  0013CE  0E00               	movlw	0
  9018  0013D0  0101               	movlb	1	; () banked
  9019  0013D2  6F2D               	movwf	(logPC@i_922+1)& (0+255),b
  9020  0013D4  0E00               	movlw	0
  9021  0013D6  6F2C               	movwf	logPC@i_922& (0+255),b
  9022                           
  9023                           ; BSR set to: 1
  9024  0013D8  0101               	movlb	1	; () banked
  9025  0013DA  512D               	movf	(logPC@i_922+1)& (0+255),w,b
  9026  0013DC  E125               	bnz	l561
  9027  0013DE  0E1F               	movlw	31
  9028  0013E0  0101               	movlb	1	; () banked
  9029  0013E2  5D2C               	subwf	logPC@i_922& (0+255),w,b
  9030  0013E4  B0D8               	btfsc	status,0,c
  9031  0013E6  D020               	goto	l561
  9032                           
  9033                           ; BSR set to: 1
  9034                           ;main.c: 931: I2C_Master_Start();
  9035                           
  9036                           ; BSR set to: 1
  9037                           
  9038                           ; BSR set to: 1
  9039  0013E8  EC13  F01C         	call	_I2C_Master_Start	;wreg free
  9040                           
  9041                           ;main.c: 932: I2C_Master_Write(0b00010000);
  9042  0013EC  0E00               	movlw	0
  9043  0013EE  0100               	movlb	0	; () banked
  9044  0013F0  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9045  0013F2  0E10               	movlw	16
  9046  0013F4  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9047  0013F6  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  9048                           
  9049                           ;main.c: 933: I2C_Master_Write(nineVHeader[i]);
  9050  0013FA  0E28               	movlw	low _nineVHeader
  9051  0013FC  0101               	movlb	1	; () banked
  9052  0013FE  252C               	addwf	logPC@i_922& (0+255),w,b
  9053  001400  6EF6               	movwf	tblptrl,c
  9054  001402  0EFD               	movlw	high _nineVHeader
  9055  001404  212D               	addwfc	(logPC@i_922+1)& (0+255),w,b
  9056  001406  6EF7               	movwf	tblptrh,c
  9057  001408                     	if	0	;There are less than 3 active tblptr bytes
  9058  001408                     	endif
  9059  001408  0008               	tblrd		*
  9060  00140A  50F5               	movf	tablat,w,c
  9061  00140C  0100               	movlb	0	; () banked
  9062  00140E  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9063  001410  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  9064  001412  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  9065                           
  9066                           ;main.c: 934: I2C_Master_Stop();
  9067  001416  EC0F  F01C         	call	_I2C_Master_Stop	;wreg free
  9068  00141A  0101               	movlb	1	; () banked
  9069  00141C  4B2C               	infsnz	logPC@i_922& (0+255),f,b
  9070  00141E  2B2D               	incf	(logPC@i_922+1)& (0+255),f,b
  9071                           
  9072                           ; BSR set to: 1
  9073  001420  0101               	movlb	1	; () banked
  9074  001422  512D               	movf	(logPC@i_922+1)& (0+255),w,b
  9075  001424  E101               	bnz	u6760
  9076  001426  D7DB               	goto	L3
  9077  001428                     u6760:
  9078  001428                     l561:
  9079                           
  9080                           ; BSR set to: 1
  9081                           ;main.c: 935: }
  9082                           ;main.c: 936: char number9V[2] = "  ";
  9083  001428  C0F4  F11A         	movff	logPC@F3238,logPC@number9V
  9084  00142C  C0F5  F11B         	movff	logPC@F3238+1,logPC@number9V+1
  9085                           
  9086                           ; BSR set to: 1
  9087                           ;main.c: 937: number9V[0] = getChar(getTens(num9V));
  9088  001430  C0E6  F087         	movff	_num9V,getTens@num
  9089  001434  0100               	movlb	0	; () banked
  9090  001436  6B88               	clrf	(getTens@num+1)& (0+255),b
  9091  001438  EC90  F01A         	call	_getTens	;wreg free
  9092  00143C  C087  F08E         	movff	?_getTens,getChar@num
  9093  001440  C088  F08F         	movff	?_getTens+1,getChar@num+1
  9094  001444  EC0B  F01C         	call	_getChar	;wreg free
  9095  001448  0101               	movlb	1	; () banked
  9096  00144A  6F1A               	movwf	logPC@number9V& (0+255),b
  9097                           
  9098                           ;main.c: 938: number9V[1] = getChar(getOnes(num9V));
  9099  00144C  C0E6  F08C         	movff	_num9V,getOnes@num
  9100  001450  0100               	movlb	0	; () banked
  9101  001452  6B8D               	clrf	(getOnes@num+1)& (0+255),b
  9102  001454  EC60  F01B         	call	_getOnes	;wreg free
  9103  001458  C08C  F08E         	movff	?_getOnes,getChar@num
  9104  00145C  C08D  F08F         	movff	?_getOnes+1,getChar@num+1
  9105  001460  EC0B  F01C         	call	_getChar	;wreg free
  9106  001464  0101               	movlb	1	; () banked
  9107  001466  6F1B               	movwf	(logPC@number9V+1)& (0+255),b
  9108                           
  9109                           ; BSR set to: 1
  9110                           ;main.c: 939: for(unsigned int i = 0; i < 2; i++) {
  9111  001468  0E00               	movlw	0
  9112  00146A  0101               	movlb	1	; () banked
  9113  00146C  6F2F               	movwf	(logPC@i_925+1)& (0+255),b
  9114  00146E  0E00               	movlw	0
  9115  001470  6F2E               	movwf	logPC@i_925& (0+255),b
  9116  001472                     l6935:
  9117                           
  9118                           ; BSR set to: 1
  9119  001472  0101               	movlb	1	; () banked
  9120  001474  512F               	movf	(logPC@i_925+1)& (0+255),w,b
  9121  001476  E126               	bnz	l6949
  9122  001478  0E02               	movlw	2
  9123  00147A  0101               	movlb	1	; () banked
  9124  00147C  5D2E               	subwf	logPC@i_925& (0+255),w,b
  9125  00147E  B0D8               	btfsc	status,0,c
  9126  001480  D021               	goto	l6949
  9127                           
  9128                           ; BSR set to: 1
  9129                           ;main.c: 940: I2C_Master_Start();
  9130                           
  9131                           ; BSR set to: 1
  9132                           
  9133                           ; BSR set to: 1
  9134  001482  EC13  F01C         	call	_I2C_Master_Start	;wreg free
  9135                           
  9136                           ;main.c: 941: I2C_Master_Write(0b00010000);
  9137  001486  0E00               	movlw	0
  9138  001488  0100               	movlb	0	; () banked
  9139  00148A  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9140  00148C  0E10               	movlw	16
  9141  00148E  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9142  001490  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  9143                           
  9144                           ;main.c: 942: I2C_Master_Write(number9V[i]);
  9145  001494  0E1A               	movlw	low logPC@number9V
  9146  001496  0101               	movlb	1	; () banked
  9147  001498  252E               	addwf	logPC@i_925& (0+255),w,b
  9148  00149A  6ED9               	movwf	fsr2l,c
  9149  00149C  0E01               	movlw	high logPC@number9V
  9150  00149E  0101               	movlb	1	; () banked
  9151  0014A0  212F               	addwfc	(logPC@i_925+1)& (0+255),w,b
  9152  0014A2  6EDA               	movwf	fsr2h,c
  9153  0014A4  50DF               	movf	indf2,w,c
  9154  0014A6  0100               	movlb	0	; () banked
  9155  0014A8  6F90               	movwf	??_logPC& (0+255),b
  9156  0014AA  0100               	movlb	0	; () banked
  9157  0014AC  5190               	movf	??_logPC& (0+255),w,b
  9158  0014AE  0100               	movlb	0	; () banked
  9159  0014B0  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9160  0014B2  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  9161  0014B4  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  9162                           
  9163                           ;main.c: 943: I2C_Master_Stop();
  9164  0014B8  EC0F  F01C         	call	_I2C_Master_Stop	;wreg free
  9165  0014BC  0101               	movlb	1	; () banked
  9166  0014BE  4B2E               	infsnz	logPC@i_925& (0+255),f,b
  9167  0014C0  2B2F               	incf	(logPC@i_925+1)& (0+255),f,b
  9168  0014C2  D7D7               	goto	l6935
  9169  0014C4                     l6949:
  9170                           
  9171                           ; BSR set to: 1
  9172                           ;main.c: 944: }
  9173                           ;main.c: 946: I2C_Master_Start();
  9174  0014C4  EC13  F01C         	call	_I2C_Master_Start	;wreg free
  9175                           
  9176                           ;main.c: 947: I2C_Master_Write(0b00010000);
  9177  0014C8  0E00               	movlw	0
  9178  0014CA  0100               	movlb	0	; () banked
  9179  0014CC  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9180  0014CE  0E10               	movlw	16
  9181  0014D0  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9182  0014D2  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  9183                           
  9184                           ;main.c: 948: I2C_Master_Write('\n');
  9185  0014D6  0E00               	movlw	0
  9186  0014D8  0100               	movlb	0	; () banked
  9187  0014DA  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9188  0014DC  0E0A               	movlw	10
  9189  0014DE  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9190  0014E0  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  9191                           
  9192                           ;main.c: 949: I2C_Master_Stop();
  9193  0014E4  EC0F  F01C         	call	_I2C_Master_Stop	;wreg free
  9194                           
  9195                           ;main.c: 950: for(unsigned int i = 0; i < 36; i++) {
  9196  0014E8  0E00               	movlw	0
  9197  0014EA  0101               	movlb	1	; () banked
  9198  0014EC  6F31               	movwf	(logPC@i_926+1)& (0+255),b
  9199  0014EE  0E00               	movlw	0
  9200  0014F0  6F30               	movwf	logPC@i_926& (0+255),b
  9201                           
  9202                           ; BSR set to: 1
  9203  0014F2  0101               	movlb	1	; () banked
  9204  0014F4  5131               	movf	(logPC@i_926+1)& (0+255),w,b
  9205  0014F6  E125               	bnz	l567
  9206  0014F8  0E24               	movlw	36
  9207  0014FA  0101               	movlb	1	; () banked
  9208  0014FC  5D30               	subwf	logPC@i_926& (0+255),w,b
  9209  0014FE  B0D8               	btfsc	status,0,c
  9210  001500  D020               	goto	l567
  9211                           
  9212                           ; BSR set to: 1
  9213                           ;main.c: 951: I2C_Master_Start();
  9214                           
  9215                           ; BSR set to: 1
  9216                           
  9217                           ; BSR set to: 1
  9218  001502  EC13  F01C         	call	_I2C_Master_Start	;wreg free
  9219                           
  9220                           ;main.c: 952: I2C_Master_Write(0b00010000);
  9221  001506  0E00               	movlw	0
  9222  001508  0100               	movlb	0	; () banked
  9223  00150A  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9224  00150C  0E10               	movlw	16
  9225  00150E  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9226  001510  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  9227                           
  9228                           ;main.c: 953: I2C_Master_Write(drainHeader[i]);
  9229  001514  0E9F               	movlw	low _drainHeader
  9230  001516  0101               	movlb	1	; () banked
  9231  001518  2530               	addwf	logPC@i_926& (0+255),w,b
  9232  00151A  6EF6               	movwf	tblptrl,c
  9233  00151C  0EFC               	movlw	high _drainHeader
  9234  00151E  2131               	addwfc	(logPC@i_926+1)& (0+255),w,b
  9235  001520  6EF7               	movwf	tblptrh,c
  9236  001522                     	if	0	;There are less than 3 active tblptr bytes
  9237  001522                     	endif
  9238  001522  0008               	tblrd		*
  9239  001524  50F5               	movf	tablat,w,c
  9240  001526  0100               	movlb	0	; () banked
  9241  001528  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9242  00152A  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  9243  00152C  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  9244                           
  9245                           ;main.c: 954: I2C_Master_Stop();
  9246  001530  EC0F  F01C         	call	_I2C_Master_Stop	;wreg free
  9247  001534  0101               	movlb	1	; () banked
  9248  001536  4B30               	infsnz	logPC@i_926& (0+255),f,b
  9249  001538  2B31               	incf	(logPC@i_926+1)& (0+255),f,b
  9250                           
  9251                           ; BSR set to: 1
  9252  00153A  0101               	movlb	1	; () banked
  9253  00153C  5131               	movf	(logPC@i_926+1)& (0+255),w,b
  9254  00153E  E101               	bnz	u6800
  9255  001540  D7DB               	goto	L4
  9256  001542                     u6800:
  9257  001542                     l567:
  9258                           
  9259                           ; BSR set to: 1
  9260                           ;main.c: 955: }
  9261                           ;main.c: 956: char numberDrain[2] = "  ";
  9262  001542  C0F6  F11C         	movff	logPC@F3242,logPC@numberDrain
  9263  001546  C0F7  F11D         	movff	logPC@F3242+1,logPC@numberDrain+1
  9264                           
  9265                           ; BSR set to: 1
  9266                           ;main.c: 957: numberDrain[0] = getChar(getTens(numDrain));
  9267  00154A  C0EA  F087         	movff	_numDrain,getTens@num
  9268  00154E  0100               	movlb	0	; () banked
  9269  001550  6B88               	clrf	(getTens@num+1)& (0+255),b
  9270  001552  EC90  F01A         	call	_getTens	;wreg free
  9271  001556  C087  F08E         	movff	?_getTens,getChar@num
  9272  00155A  C088  F08F         	movff	?_getTens+1,getChar@num+1
  9273  00155E  EC0B  F01C         	call	_getChar	;wreg free
  9274  001562  0101               	movlb	1	; () banked
  9275  001564  6F1C               	movwf	logPC@numberDrain& (0+255),b
  9276                           
  9277                           ;main.c: 958: numberDrain[1] = getChar(getOnes(numDrain));
  9278  001566  C0EA  F08C         	movff	_numDrain,getOnes@num
  9279  00156A  0100               	movlb	0	; () banked
  9280  00156C  6B8D               	clrf	(getOnes@num+1)& (0+255),b
  9281  00156E  EC60  F01B         	call	_getOnes	;wreg free
  9282  001572  C08C  F08E         	movff	?_getOnes,getChar@num
  9283  001576  C08D  F08F         	movff	?_getOnes+1,getChar@num+1
  9284  00157A  EC0B  F01C         	call	_getChar	;wreg free
  9285  00157E  0101               	movlb	1	; () banked
  9286  001580  6F1D               	movwf	(logPC@numberDrain+1)& (0+255),b
  9287                           
  9288                           ; BSR set to: 1
  9289                           ;main.c: 959: for(unsigned int i = 0; i < 2; i++) {
  9290  001582  0E00               	movlw	0
  9291  001584  0101               	movlb	1	; () banked
  9292  001586  6F33               	movwf	(logPC@i_929+1)& (0+255),b
  9293  001588  0E00               	movlw	0
  9294  00158A  6F32               	movwf	logPC@i_929& (0+255),b
  9295  00158C                     l6971:
  9296                           
  9297                           ; BSR set to: 1
  9298  00158C  0101               	movlb	1	; () banked
  9299  00158E  5133               	movf	(logPC@i_929+1)& (0+255),w,b
  9300  001590  E126               	bnz	l6985
  9301  001592  0E02               	movlw	2
  9302  001594  0101               	movlb	1	; () banked
  9303  001596  5D32               	subwf	logPC@i_929& (0+255),w,b
  9304  001598  B0D8               	btfsc	status,0,c
  9305  00159A  D021               	goto	l6985
  9306                           
  9307                           ; BSR set to: 1
  9308                           ;main.c: 960: I2C_Master_Start();
  9309                           
  9310                           ; BSR set to: 1
  9311                           
  9312                           ; BSR set to: 1
  9313  00159C  EC13  F01C         	call	_I2C_Master_Start	;wreg free
  9314                           
  9315                           ;main.c: 961: I2C_Master_Write(0b00010000);
  9316  0015A0  0E00               	movlw	0
  9317  0015A2  0100               	movlb	0	; () banked
  9318  0015A4  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9319  0015A6  0E10               	movlw	16
  9320  0015A8  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9321  0015AA  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  9322                           
  9323                           ;main.c: 962: I2C_Master_Write(numberDrain[i]);
  9324  0015AE  0E1C               	movlw	low logPC@numberDrain
  9325  0015B0  0101               	movlb	1	; () banked
  9326  0015B2  2532               	addwf	logPC@i_929& (0+255),w,b
  9327  0015B4  6ED9               	movwf	fsr2l,c
  9328  0015B6  0E01               	movlw	high logPC@numberDrain
  9329  0015B8  0101               	movlb	1	; () banked
  9330  0015BA  2133               	addwfc	(logPC@i_929+1)& (0+255),w,b
  9331  0015BC  6EDA               	movwf	fsr2h,c
  9332  0015BE  50DF               	movf	indf2,w,c
  9333  0015C0  0100               	movlb	0	; () banked
  9334  0015C2  6F90               	movwf	??_logPC& (0+255),b
  9335  0015C4  0100               	movlb	0	; () banked
  9336  0015C6  5190               	movf	??_logPC& (0+255),w,b
  9337  0015C8  0100               	movlb	0	; () banked
  9338  0015CA  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9339  0015CC  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  9340  0015CE  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  9341                           
  9342                           ;main.c: 963: I2C_Master_Stop();
  9343  0015D2  EC0F  F01C         	call	_I2C_Master_Stop	;wreg free
  9344  0015D6  0101               	movlb	1	; () banked
  9345  0015D8  4B32               	infsnz	logPC@i_929& (0+255),f,b
  9346  0015DA  2B33               	incf	(logPC@i_929+1)& (0+255),f,b
  9347  0015DC  D7D7               	goto	l6971
  9348  0015DE                     l6985:
  9349                           
  9350                           ; BSR set to: 1
  9351                           ;main.c: 964: }
  9352                           ;main.c: 966: I2C_Master_Start();
  9353  0015DE  EC13  F01C         	call	_I2C_Master_Start	;wreg free
  9354                           
  9355                           ;main.c: 967: I2C_Master_Write(0b00010000);
  9356  0015E2  0E00               	movlw	0
  9357  0015E4  0100               	movlb	0	; () banked
  9358  0015E6  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9359  0015E8  0E10               	movlw	16
  9360  0015EA  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9361  0015EC  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  9362                           
  9363                           ;main.c: 968: I2C_Master_Write('\n');
  9364  0015F0  0E00               	movlw	0
  9365  0015F2  0100               	movlb	0	; () banked
  9366  0015F4  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9367  0015F6  0E0A               	movlw	10
  9368  0015F8  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9369  0015FA  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  9370                           
  9371                           ;main.c: 969: I2C_Master_Stop();
  9372  0015FE  EC0F  F01C         	call	_I2C_Master_Stop	;wreg free
  9373                           
  9374                           ;main.c: 970: for(unsigned int i = 0; i < 34; i++) {
  9375  001602  0E00               	movlw	0
  9376  001604  0101               	movlb	1	; () banked
  9377  001606  6F35               	movwf	(logPC@i_930+1)& (0+255),b
  9378  001608  0E00               	movlw	0
  9379  00160A  6F34               	movwf	logPC@i_930& (0+255),b
  9380                           
  9381                           ; BSR set to: 1
  9382  00160C  0101               	movlb	1	; () banked
  9383  00160E  5135               	movf	(logPC@i_930+1)& (0+255),w,b
  9384  001610  E125               	bnz	l573
  9385  001612  0E22               	movlw	34
  9386  001614  0101               	movlb	1	; () banked
  9387  001616  5D34               	subwf	logPC@i_930& (0+255),w,b
  9388  001618  B0D8               	btfsc	status,0,c
  9389  00161A  D020               	goto	l573
  9390                           
  9391                           ; BSR set to: 1
  9392                           ;main.c: 971: I2C_Master_Start();
  9393                           
  9394                           ; BSR set to: 1
  9395                           
  9396                           ; BSR set to: 1
  9397  00161C  EC13  F01C         	call	_I2C_Master_Start	;wreg free
  9398                           
  9399                           ;main.c: 972: I2C_Master_Write(0b00010000);
  9400  001620  0E00               	movlw	0
  9401  001622  0100               	movlb	0	; () banked
  9402  001624  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9403  001626  0E10               	movlw	16
  9404  001628  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9405  00162A  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  9406                           
  9407                           ;main.c: 973: I2C_Master_Write(totalHeader[i]);
  9408  00162E  0EC4               	movlw	low _totalHeader
  9409  001630  0101               	movlb	1	; () banked
  9410  001632  2534               	addwf	logPC@i_930& (0+255),w,b
  9411  001634  6EF6               	movwf	tblptrl,c
  9412  001636  0EFC               	movlw	high _totalHeader
  9413  001638  2135               	addwfc	(logPC@i_930+1)& (0+255),w,b
  9414  00163A  6EF7               	movwf	tblptrh,c
  9415  00163C                     	if	0	;There are less than 3 active tblptr bytes
  9416  00163C                     	endif
  9417  00163C  0008               	tblrd		*
  9418  00163E  50F5               	movf	tablat,w,c
  9419  001640  0100               	movlb	0	; () banked
  9420  001642  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9421  001644  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  9422  001646  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  9423                           
  9424                           ;main.c: 974: I2C_Master_Stop();
  9425  00164A  EC0F  F01C         	call	_I2C_Master_Stop	;wreg free
  9426  00164E  0101               	movlb	1	; () banked
  9427  001650  4B34               	infsnz	logPC@i_930& (0+255),f,b
  9428  001652  2B35               	incf	(logPC@i_930+1)& (0+255),f,b
  9429                           
  9430                           ; BSR set to: 1
  9431  001654  0101               	movlb	1	; () banked
  9432  001656  5135               	movf	(logPC@i_930+1)& (0+255),w,b
  9433  001658  E101               	bnz	u6840
  9434  00165A  D7DB               	goto	L5
  9435  00165C                     u6840:
  9436  00165C                     l573:
  9437                           
  9438                           ; BSR set to: 1
  9439                           ;main.c: 975: }
  9440                           ;main.c: 976: char numberTotal[2] = "  ";
  9441  00165C  C0F8  F11E         	movff	logPC@F3246,logPC@numberTotal
  9442  001660  C0F9  F11F         	movff	logPC@F3246+1,logPC@numberTotal+1
  9443                           
  9444                           ; BSR set to: 1
  9445                           ;main.c: 977: numberTotal[0] = getChar(getTens(numBats));
  9446  001664  C0E8  F087         	movff	_numBats,getTens@num
  9447  001668  0100               	movlb	0	; () banked
  9448  00166A  6B88               	clrf	(getTens@num+1)& (0+255),b
  9449  00166C  EC90  F01A         	call	_getTens	;wreg free
  9450  001670  C087  F08E         	movff	?_getTens,getChar@num
  9451  001674  C088  F08F         	movff	?_getTens+1,getChar@num+1
  9452  001678  EC0B  F01C         	call	_getChar	;wreg free
  9453  00167C  0101               	movlb	1	; () banked
  9454  00167E  6F1E               	movwf	logPC@numberTotal& (0+255),b
  9455                           
  9456                           ;main.c: 978: numberTotal[1] = getChar(getOnes(numBats));
  9457  001680  C0E8  F08C         	movff	_numBats,getOnes@num
  9458  001684  0100               	movlb	0	; () banked
  9459  001686  6B8D               	clrf	(getOnes@num+1)& (0+255),b
  9460  001688  EC60  F01B         	call	_getOnes	;wreg free
  9461  00168C  C08C  F08E         	movff	?_getOnes,getChar@num
  9462  001690  C08D  F08F         	movff	?_getOnes+1,getChar@num+1
  9463  001694  EC0B  F01C         	call	_getChar	;wreg free
  9464  001698  0101               	movlb	1	; () banked
  9465  00169A  6F1F               	movwf	(logPC@numberTotal+1)& (0+255),b
  9466                           
  9467                           ; BSR set to: 1
  9468                           ;main.c: 979: for(unsigned int i = 0; i < 2; i++) {
  9469  00169C  0E00               	movlw	0
  9470  00169E  0101               	movlb	1	; () banked
  9471  0016A0  6F37               	movwf	(logPC@i_933+1)& (0+255),b
  9472  0016A2  0E00               	movlw	0
  9473  0016A4  6F36               	movwf	logPC@i_933& (0+255),b
  9474  0016A6                     l7007:
  9475                           
  9476                           ; BSR set to: 1
  9477  0016A6  0101               	movlb	1	; () banked
  9478  0016A8  5137               	movf	(logPC@i_933+1)& (0+255),w,b
  9479  0016AA  E126               	bnz	l7021
  9480  0016AC  0E02               	movlw	2
  9481  0016AE  0101               	movlb	1	; () banked
  9482  0016B0  5D36               	subwf	logPC@i_933& (0+255),w,b
  9483  0016B2  B0D8               	btfsc	status,0,c
  9484  0016B4  D021               	goto	l7021
  9485                           
  9486                           ; BSR set to: 1
  9487                           ;main.c: 980: I2C_Master_Start();
  9488                           
  9489                           ; BSR set to: 1
  9490                           
  9491                           ; BSR set to: 1
  9492  0016B6  EC13  F01C         	call	_I2C_Master_Start	;wreg free
  9493                           
  9494                           ;main.c: 981: I2C_Master_Write(0b00010000);
  9495  0016BA  0E00               	movlw	0
  9496  0016BC  0100               	movlb	0	; () banked
  9497  0016BE  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9498  0016C0  0E10               	movlw	16
  9499  0016C2  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9500  0016C4  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  9501                           
  9502                           ;main.c: 982: I2C_Master_Write(numberTotal[i]);
  9503  0016C8  0E1E               	movlw	low logPC@numberTotal
  9504  0016CA  0101               	movlb	1	; () banked
  9505  0016CC  2536               	addwf	logPC@i_933& (0+255),w,b
  9506  0016CE  6ED9               	movwf	fsr2l,c
  9507  0016D0  0E01               	movlw	high logPC@numberTotal
  9508  0016D2  0101               	movlb	1	; () banked
  9509  0016D4  2137               	addwfc	(logPC@i_933+1)& (0+255),w,b
  9510  0016D6  6EDA               	movwf	fsr2h,c
  9511  0016D8  50DF               	movf	indf2,w,c
  9512  0016DA  0100               	movlb	0	; () banked
  9513  0016DC  6F90               	movwf	??_logPC& (0+255),b
  9514  0016DE  0100               	movlb	0	; () banked
  9515  0016E0  5190               	movf	??_logPC& (0+255),w,b
  9516  0016E2  0100               	movlb	0	; () banked
  9517  0016E4  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9518  0016E6  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  9519  0016E8  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  9520                           
  9521                           ;main.c: 983: I2C_Master_Stop();
  9522  0016EC  EC0F  F01C         	call	_I2C_Master_Stop	;wreg free
  9523  0016F0  0101               	movlb	1	; () banked
  9524  0016F2  4B36               	infsnz	logPC@i_933& (0+255),f,b
  9525  0016F4  2B37               	incf	(logPC@i_933+1)& (0+255),f,b
  9526  0016F6  D7D7               	goto	l7007
  9527  0016F8                     l7021:
  9528                           
  9529                           ; BSR set to: 1
  9530                           ;main.c: 984: }
  9531                           ;main.c: 986: I2C_Master_Start();
  9532  0016F8  EC13  F01C         	call	_I2C_Master_Start	;wreg free
  9533                           
  9534                           ;main.c: 987: I2C_Master_Write(0b00010000);
  9535  0016FC  0E00               	movlw	0
  9536  0016FE  0100               	movlb	0	; () banked
  9537  001700  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9538  001702  0E10               	movlw	16
  9539  001704  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9540  001706  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  9541                           
  9542                           ;main.c: 988: I2C_Master_Write('\n');
  9543  00170A  0E00               	movlw	0
  9544  00170C  0100               	movlb	0	; () banked
  9545  00170E  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9546  001710  0E0A               	movlw	10
  9547  001712  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9548  001714  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  9549                           
  9550                           ;main.c: 989: I2C_Master_Stop();
  9551  001718  EC0F  F01C         	call	_I2C_Master_Stop	;wreg free
  9552                           
  9553                           ;main.c: 990: for(unsigned int i = 0; i < 32; i++) {
  9554  00171C  0E00               	movlw	0
  9555  00171E  0101               	movlb	1	; () banked
  9556  001720  6F39               	movwf	(logPC@i_934+1)& (0+255),b
  9557  001722  0E00               	movlw	0
  9558  001724  6F38               	movwf	logPC@i_934& (0+255),b
  9559                           
  9560                           ; BSR set to: 1
  9561  001726  0101               	movlb	1	; () banked
  9562  001728  5139               	movf	(logPC@i_934+1)& (0+255),w,b
  9563  00172A  E125               	bnz	l579
  9564  00172C  0E20               	movlw	32
  9565  00172E  0101               	movlb	1	; () banked
  9566  001730  5D38               	subwf	logPC@i_934& (0+255),w,b
  9567  001732  B0D8               	btfsc	status,0,c
  9568  001734  D020               	goto	l579
  9569                           
  9570                           ; BSR set to: 1
  9571                           ;main.c: 991: I2C_Master_Start();
  9572                           
  9573                           ; BSR set to: 1
  9574                           
  9575                           ; BSR set to: 1
  9576  001736  EC13  F01C         	call	_I2C_Master_Start	;wreg free
  9577                           
  9578                           ;main.c: 992: I2C_Master_Write(0b00010000);
  9579  00173A  0E00               	movlw	0
  9580  00173C  0100               	movlb	0	; () banked
  9581  00173E  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9582  001740  0E10               	movlw	16
  9583  001742  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9584  001744  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  9585                           
  9586                           ;main.c: 993: I2C_Master_Write(runTimeHeader[i]);
  9587  001748  0EE7               	movlw	low _runTimeHeader
  9588  00174A  0101               	movlb	1	; () banked
  9589  00174C  2538               	addwf	logPC@i_934& (0+255),w,b
  9590  00174E  6EF6               	movwf	tblptrl,c
  9591  001750  0EFC               	movlw	high _runTimeHeader
  9592  001752  2139               	addwfc	(logPC@i_934+1)& (0+255),w,b
  9593  001754  6EF7               	movwf	tblptrh,c
  9594  001756                     	if	0	;There are less than 3 active tblptr bytes
  9595  001756                     	endif
  9596  001756  0008               	tblrd		*
  9597  001758  50F5               	movf	tablat,w,c
  9598  00175A  0100               	movlb	0	; () banked
  9599  00175C  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9600  00175E  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  9601  001760  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  9602                           
  9603                           ;main.c: 994: I2C_Master_Stop();
  9604  001764  EC0F  F01C         	call	_I2C_Master_Stop	;wreg free
  9605  001768  0101               	movlb	1	; () banked
  9606  00176A  4B38               	infsnz	logPC@i_934& (0+255),f,b
  9607  00176C  2B39               	incf	(logPC@i_934+1)& (0+255),f,b
  9608                           
  9609                           ; BSR set to: 1
  9610  00176E  0101               	movlb	1	; () banked
  9611  001770  5139               	movf	(logPC@i_934+1)& (0+255),w,b
  9612  001772  E101               	bnz	u6880
  9613  001774  D7DB               	goto	L6
  9614  001776                     u6880:
  9615  001776                     l579:
  9616                           
  9617                           ; BSR set to: 1
  9618                           ;main.c: 995: }
  9619                           ;main.c: 996: char runTime[3] = "   ";
  9620  001776  C0ED  F113         	movff	logPC@F3250,logPC@runTime
  9621  00177A  C0EE  F114         	movff	logPC@F3250+1,logPC@runTime+1
  9622  00177E  C0EF  F115         	movff	logPC@F3250+2,logPC@runTime+2
  9623                           
  9624                           ; BSR set to: 1
  9625                           ;main.c: 997: runTime[0] = getChar(getHundreds(min*60+sec));
  9626  001782  0100               	movlb	0	; () banked
  9627  001784  51E5               	movf	_min& (0+255),w,b
  9628  001786  0D3C               	mullw	60
  9629  001788  0100               	movlb	0	; () banked
  9630  00178A  51EB               	movf	_sec& (0+255),w,b
  9631  00178C  24F3               	addwf	prodl,w,c
  9632  00178E  0100               	movlb	0	; () banked
  9633  001790  6F87               	movwf	getHundreds@num& (0+255),b
  9634  001792  0100               	movlb	0	; () banked
  9635  001794  0E00               	movlw	0
  9636  001796  20F4               	addwfc	prodh,w,c
  9637  001798  0100               	movlb	0	; () banked
  9638  00179A  6F88               	movwf	(getHundreds@num+1)& (0+255),b
  9639  00179C  ECAE  F01A         	call	_getHundreds	;wreg free
  9640  0017A0  C087  F08E         	movff	?_getHundreds,getChar@num
  9641  0017A4  C088  F08F         	movff	?_getHundreds+1,getChar@num+1
  9642  0017A8  EC0B  F01C         	call	_getChar	;wreg free
  9643  0017AC  0101               	movlb	1	; () banked
  9644  0017AE  6F13               	movwf	logPC@runTime& (0+255),b
  9645                           
  9646                           ;main.c: 998: runTime[1] = getChar(getTens(min*60+sec));
  9647  0017B0  0100               	movlb	0	; () banked
  9648  0017B2  51E5               	movf	_min& (0+255),w,b
  9649  0017B4  0D3C               	mullw	60
  9650  0017B6  0100               	movlb	0	; () banked
  9651  0017B8  51EB               	movf	_sec& (0+255),w,b
  9652  0017BA  24F3               	addwf	prodl,w,c
  9653  0017BC  0100               	movlb	0	; () banked
  9654  0017BE  6F87               	movwf	getTens@num& (0+255),b
  9655  0017C0  0100               	movlb	0	; () banked
  9656  0017C2  0E00               	movlw	0
  9657  0017C4  20F4               	addwfc	prodh,w,c
  9658  0017C6  0100               	movlb	0	; () banked
  9659  0017C8  6F88               	movwf	(getTens@num+1)& (0+255),b
  9660  0017CA  EC90  F01A         	call	_getTens	;wreg free
  9661  0017CE  C087  F08E         	movff	?_getTens,getChar@num
  9662  0017D2  C088  F08F         	movff	?_getTens+1,getChar@num+1
  9663  0017D6  EC0B  F01C         	call	_getChar	;wreg free
  9664  0017DA  0101               	movlb	1	; () banked
  9665  0017DC  6F14               	movwf	(logPC@runTime+1)& (0+255),b
  9666                           
  9667                           ;main.c: 999: runTime[2] = getChar(getOnes(min*60+sec));
  9668  0017DE  0100               	movlb	0	; () banked
  9669  0017E0  51E5               	movf	_min& (0+255),w,b
  9670  0017E2  0D3C               	mullw	60
  9671  0017E4  0100               	movlb	0	; () banked
  9672  0017E6  51EB               	movf	_sec& (0+255),w,b
  9673  0017E8  24F3               	addwf	prodl,w,c
  9674  0017EA  0100               	movlb	0	; () banked
  9675  0017EC  6F8C               	movwf	getOnes@num& (0+255),b
  9676  0017EE  0100               	movlb	0	; () banked
  9677  0017F0  0E00               	movlw	0
  9678  0017F2  20F4               	addwfc	prodh,w,c
  9679  0017F4  0100               	movlb	0	; () banked
  9680  0017F6  6F8D               	movwf	(getOnes@num+1)& (0+255),b
  9681  0017F8  EC60  F01B         	call	_getOnes	;wreg free
  9682  0017FC  C08C  F08E         	movff	?_getOnes,getChar@num
  9683  001800  C08D  F08F         	movff	?_getOnes+1,getChar@num+1
  9684  001804  EC0B  F01C         	call	_getChar	;wreg free
  9685  001808  0101               	movlb	1	; () banked
  9686  00180A  6F15               	movwf	(logPC@runTime+2)& (0+255),b
  9687                           
  9688                           ; BSR set to: 1
  9689                           ;main.c: 1000: for(unsigned int i = 0; i < 3; i++) {
  9690  00180C  0E00               	movlw	0
  9691  00180E  0101               	movlb	1	; () banked
  9692  001810  6F3B               	movwf	(logPC@i_937+1)& (0+255),b
  9693  001812  0E00               	movlw	0
  9694  001814  6F3A               	movwf	logPC@i_937& (0+255),b
  9695  001816                     l7043:
  9696                           
  9697                           ; BSR set to: 1
  9698  001816  0101               	movlb	1	; () banked
  9699  001818  513B               	movf	(logPC@i_937+1)& (0+255),w,b
  9700  00181A  E126               	bnz	l7057
  9701  00181C  0E03               	movlw	3
  9702  00181E  0101               	movlb	1	; () banked
  9703  001820  5D3A               	subwf	logPC@i_937& (0+255),w,b
  9704  001822  B0D8               	btfsc	status,0,c
  9705  001824  D021               	goto	l7057
  9706                           
  9707                           ; BSR set to: 1
  9708                           ;main.c: 1001: I2C_Master_Start();
  9709                           
  9710                           ; BSR set to: 1
  9711                           
  9712                           ; BSR set to: 1
  9713  001826  EC13  F01C         	call	_I2C_Master_Start	;wreg free
  9714                           
  9715                           ;main.c: 1002: I2C_Master_Write(0b00010000);
  9716  00182A  0E00               	movlw	0
  9717  00182C  0100               	movlb	0	; () banked
  9718  00182E  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9719  001830  0E10               	movlw	16
  9720  001832  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9721  001834  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  9722                           
  9723                           ;main.c: 1003: I2C_Master_Write(runTime[i]);
  9724  001838  0E13               	movlw	low logPC@runTime
  9725  00183A  0101               	movlb	1	; () banked
  9726  00183C  253A               	addwf	logPC@i_937& (0+255),w,b
  9727  00183E  6ED9               	movwf	fsr2l,c
  9728  001840  0E01               	movlw	high logPC@runTime
  9729  001842  0101               	movlb	1	; () banked
  9730  001844  213B               	addwfc	(logPC@i_937+1)& (0+255),w,b
  9731  001846  6EDA               	movwf	fsr2h,c
  9732  001848  50DF               	movf	indf2,w,c
  9733  00184A  0100               	movlb	0	; () banked
  9734  00184C  6F90               	movwf	??_logPC& (0+255),b
  9735  00184E  0100               	movlb	0	; () banked
  9736  001850  5190               	movf	??_logPC& (0+255),w,b
  9737  001852  0100               	movlb	0	; () banked
  9738  001854  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9739  001856  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  9740  001858  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  9741                           
  9742                           ;main.c: 1004: I2C_Master_Stop();
  9743  00185C  EC0F  F01C         	call	_I2C_Master_Stop	;wreg free
  9744  001860  0101               	movlb	1	; () banked
  9745  001862  4B3A               	infsnz	logPC@i_937& (0+255),f,b
  9746  001864  2B3B               	incf	(logPC@i_937+1)& (0+255),f,b
  9747  001866  D7D7               	goto	l7043
  9748  001868                     l7057:
  9749                           
  9750                           ; BSR set to: 1
  9751                           ;main.c: 1005: }
  9752                           ;main.c: 1006: I2C_Master_Start();
  9753  001868  EC13  F01C         	call	_I2C_Master_Start	;wreg free
  9754                           
  9755                           ;main.c: 1007: I2C_Master_Write(0b00010000);
  9756  00186C  0E00               	movlw	0
  9757  00186E  0100               	movlb	0	; () banked
  9758  001870  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9759  001872  0E10               	movlw	16
  9760  001874  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9761  001876  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  9762                           
  9763                           ;main.c: 1008: I2C_Master_Write('\n');
  9764  00187A  0E00               	movlw	0
  9765  00187C  0100               	movlb	0	; () banked
  9766  00187E  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9767  001880  0E0A               	movlw	10
  9768  001882  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9769  001884  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  9770                           
  9771                           ;main.c: 1009: I2C_Master_Stop();
  9772  001888  EC0F  F01C         	call	_I2C_Master_Stop	;wreg free
  9773                           
  9774                           ;main.c: 1010: I2C_Master_Start();
  9775  00188C  EC13  F01C         	call	_I2C_Master_Start	;wreg free
  9776                           
  9777                           ;main.c: 1011: I2C_Master_Write(0b00010000);
  9778  001890  0E00               	movlw	0
  9779  001892  0100               	movlb	0	; () banked
  9780  001894  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9781  001896  0E10               	movlw	16
  9782  001898  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9783  00189A  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  9784                           
  9785                           ;main.c: 1012: I2C_Master_Write('\n');
  9786  00189E  0E00               	movlw	0
  9787  0018A0  0100               	movlb	0	; () banked
  9788  0018A2  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9789  0018A4  0E0A               	movlw	10
  9790  0018A6  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9791  0018A8  EC01  F01C         	call	_I2C_Master_Write	;wreg free
  9792                           
  9793                           ;main.c: 1013: I2C_Master_Stop();
  9794  0018AC  EC0F  F01C         	call	_I2C_Master_Stop	;wreg free
  9795  0018B0  0012               	return		;funcret
  9796  0018B2                     __end_of_logPC:
  9797                           	opt stack 0
  9798                           tblptru	equ	0xFF8
  9799                           tblptrh	equ	0xFF7
  9800                           tblptrl	equ	0xFF6
  9801                           tablat	equ	0xFF5
  9802                           prodh	equ	0xFF4
  9803                           prodl	equ	0xFF3
  9804                           intcon	equ	0xFF2
  9805                           intcon2	equ	0xFF1
  9806                           intcon3	equ	0xFF0
  9807                           postinc0	equ	0xFEE
  9808                           wreg	equ	0xFE8
  9809                           postdec1	equ	0xFE5
  9810                           plusw1	equ	0xFE3
  9811                           fsr1l	equ	0xFE1
  9812                           indf2	equ	0xFDF
  9813                           postinc2	equ	0xFDE
  9814                           postdec2	equ	0xFDD
  9815                           plusw2	equ	0xFDB
  9816                           fsr2h	equ	0xFDA
  9817                           fsr2l	equ	0xFD9
  9818                           status	equ	0xFD8
  9819                           
  9820 ;; *************** function _getTens *****************
  9821 ;; Defined at:
  9822 ;;		line 1021 in file "../main.c"
  9823 ;; Parameters:    Size  Location     Type
  9824 ;;  num             2    7[BANK0 ] unsigned int 
  9825 ;; Auto vars:     Size  Location     Type
  9826 ;;		None
  9827 ;; Return value:  Size  Location     Type
  9828 ;;                  2    7[BANK0 ] int 
  9829 ;; Registers used:
  9830 ;;		wreg, status,2, status,0, cstack
  9831 ;; Tracked objects:
  9832 ;;		On entry : 0/0
  9833 ;;		On exit  : 0/0
  9834 ;;		Unchanged: 0/0
  9835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9836 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9837 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9838 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9839 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9840 ;;Total ram usage:        2 bytes
  9841 ;; Hardware stack levels used:    1
  9842 ;; Hardware stack levels required when called:    6
  9843 ;; This function calls:
  9844 ;;		___lwdiv
  9845 ;; This function is called by:
  9846 ;;		_logPC
  9847 ;; This function uses a non-reentrant model
  9848 ;;
  9849                           
  9850                           	psect	text16
  9851  003520                     __ptext16:
  9852                           	opt stack 0
  9853  003520                     _getTens:
  9854                           	opt stack 23
  9855                           
  9856                           ;main.c: 1022: if(num > 9) { return (int)(num / 10); }
  9857                           
  9858                           ;incstack = 0
  9859  003520  0100               	movlb	0	; () banked
  9860  003522  5188               	movf	(getTens@num+1)& (0+255),w,b
  9861  003524  E105               	bnz	u6170
  9862  003526  0E0A               	movlw	10
  9863  003528  0100               	movlb	0	; () banked
  9864  00352A  5D87               	subwf	getTens@num& (0+255),w,b
  9865  00352C  A0D8               	btfss	status,0,c
  9866  00352E  D010               	goto	l6293
  9867  003530                     u6170:
  9868                           
  9869                           ; BSR set to: 0
  9870  003530  C087  F080         	movff	getTens@num,___lwdiv@dividend
  9871  003534  C088  F081         	movff	getTens@num+1,___lwdiv@dividend+1
  9872  003538  0E00               	movlw	0
  9873  00353A  0100               	movlb	0	; () banked
  9874  00353C  6F83               	movwf	(___lwdiv@divisor+1)& (0+255),b
  9875  00353E  0E0A               	movlw	10
  9876  003540  6F82               	movwf	___lwdiv@divisor& (0+255),b
  9877  003542  ECC2  F018         	call	___lwdiv	;wreg free
  9878  003546  C080  F087         	movff	?___lwdiv,?_getTens
  9879  00354A  C081  F088         	movff	?___lwdiv+1,?_getTens+1
  9880  00354E  0012               	return	
  9881  003550                     l6293:
  9882                           
  9883                           ;main.c: 1023: return 0;
  9884  003550  0E00               	movlw	0
  9885  003552  0100               	movlb	0	; () banked
  9886  003554  6F88               	movwf	(?_getTens+1)& (0+255),b
  9887  003556  0E00               	movlw	0
  9888  003558  6F87               	movwf	?_getTens& (0+255),b
  9889  00355A  0012               	return	
  9890  00355C                     __end_of_getTens:
  9891                           	opt stack 0
  9892                           tblptru	equ	0xFF8
  9893                           tblptrh	equ	0xFF7
  9894                           tblptrl	equ	0xFF6
  9895                           tablat	equ	0xFF5
  9896                           prodh	equ	0xFF4
  9897                           prodl	equ	0xFF3
  9898                           intcon	equ	0xFF2
  9899                           intcon2	equ	0xFF1
  9900                           intcon3	equ	0xFF0
  9901                           postinc0	equ	0xFEE
  9902                           wreg	equ	0xFE8
  9903                           postdec1	equ	0xFE5
  9904                           plusw1	equ	0xFE3
  9905                           fsr1l	equ	0xFE1
  9906                           indf2	equ	0xFDF
  9907                           postinc2	equ	0xFDE
  9908                           postdec2	equ	0xFDD
  9909                           plusw2	equ	0xFDB
  9910                           fsr2h	equ	0xFDA
  9911                           fsr2l	equ	0xFD9
  9912                           status	equ	0xFD8
  9913                           
  9914 ;; *************** function _getOnes *****************
  9915 ;; Defined at:
  9916 ;;		line 1026 in file "../main.c"
  9917 ;; Parameters:    Size  Location     Type
  9918 ;;  num             2   12[BANK0 ] unsigned int 
  9919 ;; Auto vars:     Size  Location     Type
  9920 ;;		None
  9921 ;; Return value:  Size  Location     Type
  9922 ;;                  2   12[BANK0 ] int 
  9923 ;; Registers used:
  9924 ;;		wreg, status,2, status,0, cstack
  9925 ;; Tracked objects:
  9926 ;;		On entry : 0/0
  9927 ;;		On exit  : 0/0
  9928 ;;		Unchanged: 0/0
  9929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9930 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9931 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9932 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9933 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9934 ;;Total ram usage:        2 bytes
  9935 ;; Hardware stack levels used:    1
  9936 ;; Hardware stack levels required when called:    6
  9937 ;; This function calls:
  9938 ;;		___lwmod
  9939 ;; This function is called by:
  9940 ;;		_logPC
  9941 ;; This function uses a non-reentrant model
  9942 ;;
  9943                           
  9944                           	psect	text17
  9945  0036C0                     __ptext17:
  9946                           	opt stack 0
  9947  0036C0                     _getOnes:
  9948                           	opt stack 23
  9949                           
  9950                           ;main.c: 1027: return num % 10;
  9951                           
  9952                           ;incstack = 0
  9953  0036C0  C08C  F087         	movff	getOnes@num,___lwmod@dividend
  9954  0036C4  C08D  F088         	movff	getOnes@num+1,___lwmod@dividend+1
  9955  0036C8  0E00               	movlw	0
  9956  0036CA  0100               	movlb	0	; () banked
  9957  0036CC  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
  9958  0036CE  0E0A               	movlw	10
  9959  0036D0  6F89               	movwf	___lwmod@divisor& (0+255),b
  9960  0036D2  EC69  F019         	call	___lwmod	;wreg free
  9961  0036D6  C087  F08C         	movff	?___lwmod,?_getOnes
  9962  0036DA  C088  F08D         	movff	?___lwmod+1,?_getOnes+1
  9963  0036DE  0012               	return	
  9964  0036E0                     __end_of_getOnes:
  9965                           	opt stack 0
  9966                           tblptru	equ	0xFF8
  9967                           tblptrh	equ	0xFF7
  9968                           tblptrl	equ	0xFF6
  9969                           tablat	equ	0xFF5
  9970                           prodh	equ	0xFF4
  9971                           prodl	equ	0xFF3
  9972                           intcon	equ	0xFF2
  9973                           intcon2	equ	0xFF1
  9974                           intcon3	equ	0xFF0
  9975                           postinc0	equ	0xFEE
  9976                           wreg	equ	0xFE8
  9977                           postdec1	equ	0xFE5
  9978                           plusw1	equ	0xFE3
  9979                           fsr1l	equ	0xFE1
  9980                           indf2	equ	0xFDF
  9981                           postinc2	equ	0xFDE
  9982                           postdec2	equ	0xFDD
  9983                           plusw2	equ	0xFDB
  9984                           fsr2h	equ	0xFDA
  9985                           fsr2l	equ	0xFD9
  9986                           status	equ	0xFD8
  9987                           
  9988 ;; *************** function ___lwmod *****************
  9989 ;; Defined at:
  9990 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  9991 ;; Parameters:    Size  Location     Type
  9992 ;;  dividend        2    7[BANK0 ] unsigned int 
  9993 ;;  divisor         2    9[BANK0 ] unsigned int 
  9994 ;; Auto vars:     Size  Location     Type
  9995 ;;  counter         1   11[BANK0 ] unsigned char 
  9996 ;; Return value:  Size  Location     Type
  9997 ;;                  2    7[BANK0 ] unsigned int 
  9998 ;; Registers used:
  9999 ;;		wreg, status,2, status,0
 10000 ;; Tracked objects:
 10001 ;;		On entry : 0/0
 10002 ;;		On exit  : 0/0
 10003 ;;		Unchanged: 0/0
 10004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10005 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10006 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10007 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10008 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10009 ;;Total ram usage:        5 bytes
 10010 ;; Hardware stack levels used:    1
 10011 ;; Hardware stack levels required when called:    5
 10012 ;; This function calls:
 10013 ;;		Nothing
 10014 ;; This function is called by:
 10015 ;;		_getOnes
 10016 ;;		_printf
 10017 ;; This function uses a non-reentrant model
 10018 ;;
 10019                           
 10020                           	psect	text18
 10021  0032D2                     __ptext18:
 10022                           	opt stack 0
 10023  0032D2                     ___lwmod:
 10024                           	opt stack 23
 10025                           
 10026                           ;incstack = 0
 10027  0032D2  0100               	movlb	0	; () banked
 10028  0032D4  5189               	movf	___lwmod@divisor& (0+255),w,b
 10029  0032D6  0100               	movlb	0	; () banked
 10030  0032D8  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 10031  0032DA  B4D8               	btfsc	status,2,c
 10032  0032DC  D026               	goto	l1128
 10033                           
 10034                           ; BSR set to: 0
 10035  0032DE  0E01               	movlw	1
 10036  0032E0  0100               	movlb	0	; () banked
 10037  0032E2  6F8B               	movwf	___lwmod@counter& (0+255),b
 10038  0032E4  D006               	goto	l6093
 10039  0032E6                     l6091:
 10040                           
 10041                           ; BSR set to: 0
 10042  0032E6  0100               	movlb	0	; () banked
 10043  0032E8  90D8               	bcf	status,0,c
 10044  0032EA  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 10045  0032EC  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 10046  0032EE  0100               	movlb	0	; () banked
 10047  0032F0  2B8B               	incf	___lwmod@counter& (0+255),f,b
 10048  0032F2                     l6093:
 10049                           
 10050                           ; BSR set to: 0
 10051  0032F2  0100               	movlb	0	; () banked
 10052  0032F4  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 10053  0032F6  D7F7               	goto	l6091
 10054  0032F8                     l6095:
 10055                           
 10056                           ; BSR set to: 0
 10057  0032F8  0100               	movlb	0	; () banked
 10058  0032FA  5189               	movf	___lwmod@divisor& (0+255),w,b
 10059  0032FC  0100               	movlb	0	; () banked
 10060  0032FE  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 10061  003300  0100               	movlb	0	; () banked
 10062  003302  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 10063  003304  0100               	movlb	0	; () banked
 10064  003306  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 10065  003308  A0D8               	btfss	status,0,c
 10066  00330A  D008               	goto	l6099
 10067                           
 10068                           ; BSR set to: 0
 10069  00330C  0100               	movlb	0	; () banked
 10070  00330E  5189               	movf	___lwmod@divisor& (0+255),w,b
 10071  003310  0100               	movlb	0	; () banked
 10072  003312  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 10073  003314  0100               	movlb	0	; () banked
 10074  003316  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 10075  003318  0100               	movlb	0	; () banked
 10076  00331A  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 10077  00331C                     l6099:
 10078                           
 10079                           ; BSR set to: 0
 10080  00331C  0100               	movlb	0	; () banked
 10081  00331E  90D8               	bcf	status,0,c
 10082  003320  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 10083  003322  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 10084                           
 10085                           ; BSR set to: 0
 10086  003324  0100               	movlb	0	; () banked
 10087  003326  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 10088  003328  D7E7               	goto	l6095
 10089  00332A                     l1128:
 10090                           
 10091                           ; BSR set to: 0
 10092  00332A  C087  F087         	movff	___lwmod@dividend,?___lwmod
 10093  00332E  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 10094                           
 10095                           ; BSR set to: 0
 10096  003332  0012               	return		;funcret
 10097  003334                     __end_of___lwmod:
 10098                           	opt stack 0
 10099                           tblptru	equ	0xFF8
 10100                           tblptrh	equ	0xFF7
 10101                           tblptrl	equ	0xFF6
 10102                           tablat	equ	0xFF5
 10103                           prodh	equ	0xFF4
 10104                           prodl	equ	0xFF3
 10105                           intcon	equ	0xFF2
 10106                           intcon2	equ	0xFF1
 10107                           intcon3	equ	0xFF0
 10108                           postinc0	equ	0xFEE
 10109                           wreg	equ	0xFE8
 10110                           postdec1	equ	0xFE5
 10111                           plusw1	equ	0xFE3
 10112                           fsr1l	equ	0xFE1
 10113                           indf2	equ	0xFDF
 10114                           postinc2	equ	0xFDE
 10115                           postdec2	equ	0xFDD
 10116                           plusw2	equ	0xFDB
 10117                           fsr2h	equ	0xFDA
 10118                           fsr2l	equ	0xFD9
 10119                           status	equ	0xFD8
 10120                           
 10121 ;; *************** function _getHundreds *****************
 10122 ;; Defined at:
 10123 ;;		line 1016 in file "../main.c"
 10124 ;; Parameters:    Size  Location     Type
 10125 ;;  num             2    7[BANK0 ] unsigned int 
 10126 ;; Auto vars:     Size  Location     Type
 10127 ;;		None
 10128 ;; Return value:  Size  Location     Type
 10129 ;;                  2    7[BANK0 ] int 
 10130 ;; Registers used:
 10131 ;;		wreg, status,2, status,0, cstack
 10132 ;; Tracked objects:
 10133 ;;		On entry : 0/0
 10134 ;;		On exit  : 0/0
 10135 ;;		Unchanged: 0/0
 10136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10137 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10138 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10139 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10140 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10141 ;;Total ram usage:        2 bytes
 10142 ;; Hardware stack levels used:    1
 10143 ;; Hardware stack levels required when called:    6
 10144 ;; This function calls:
 10145 ;;		___lwdiv
 10146 ;; This function is called by:
 10147 ;;		_logPC
 10148 ;; This function uses a non-reentrant model
 10149 ;;
 10150                           
 10151                           	psect	text19
 10152  00355C                     __ptext19:
 10153                           	opt stack 0
 10154  00355C                     _getHundreds:
 10155                           	opt stack 23
 10156                           
 10157                           ;main.c: 1017: if(num > 99) { return (int)(num / 100); }
 10158                           
 10159                           ; BSR set to: 0
 10160                           ;incstack = 0
 10161  00355C  0100               	movlb	0	; () banked
 10162  00355E  5188               	movf	(getHundreds@num+1)& (0+255),w,b
 10163  003560  E105               	bnz	u6180
 10164  003562  0E64               	movlw	100
 10165  003564  0100               	movlb	0	; () banked
 10166  003566  5D87               	subwf	getHundreds@num& (0+255),w,b
 10167  003568  A0D8               	btfss	status,0,c
 10168  00356A  D010               	goto	l6311
 10169  00356C                     u6180:
 10170                           
 10171                           ; BSR set to: 0
 10172  00356C  C087  F080         	movff	getHundreds@num,___lwdiv@dividend
 10173  003570  C088  F081         	movff	getHundreds@num+1,___lwdiv@dividend+1
 10174  003574  0E00               	movlw	0
 10175  003576  0100               	movlb	0	; () banked
 10176  003578  6F83               	movwf	(___lwdiv@divisor+1)& (0+255),b
 10177  00357A  0E64               	movlw	100
 10178  00357C  6F82               	movwf	___lwdiv@divisor& (0+255),b
 10179  00357E  ECC2  F018         	call	___lwdiv	;wreg free
 10180  003582  C080  F087         	movff	?___lwdiv,?_getHundreds
 10181  003586  C081  F088         	movff	?___lwdiv+1,?_getHundreds+1
 10182  00358A  0012               	return	
 10183  00358C                     l6311:
 10184                           
 10185                           ;main.c: 1018: return 0;
 10186  00358C  0E00               	movlw	0
 10187  00358E  0100               	movlb	0	; () banked
 10188  003590  6F88               	movwf	(?_getHundreds+1)& (0+255),b
 10189  003592  0E00               	movlw	0
 10190  003594  6F87               	movwf	?_getHundreds& (0+255),b
 10191  003596  0012               	return	
 10192  003598                     __end_of_getHundreds:
 10193                           	opt stack 0
 10194                           tblptru	equ	0xFF8
 10195                           tblptrh	equ	0xFF7
 10196                           tblptrl	equ	0xFF6
 10197                           tablat	equ	0xFF5
 10198                           prodh	equ	0xFF4
 10199                           prodl	equ	0xFF3
 10200                           intcon	equ	0xFF2
 10201                           intcon2	equ	0xFF1
 10202                           intcon3	equ	0xFF0
 10203                           postinc0	equ	0xFEE
 10204                           wreg	equ	0xFE8
 10205                           postdec1	equ	0xFE5
 10206                           plusw1	equ	0xFE3
 10207                           fsr1l	equ	0xFE1
 10208                           indf2	equ	0xFDF
 10209                           postinc2	equ	0xFDE
 10210                           postdec2	equ	0xFDD
 10211                           plusw2	equ	0xFDB
 10212                           fsr2h	equ	0xFDA
 10213                           fsr2l	equ	0xFD9
 10214                           status	equ	0xFD8
 10215                           
 10216 ;; *************** function ___lwdiv *****************
 10217 ;; Defined at:
 10218 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 10219 ;; Parameters:    Size  Location     Type
 10220 ;;  dividend        2    0[BANK0 ] unsigned int 
 10221 ;;  divisor         2    2[BANK0 ] unsigned int 
 10222 ;; Auto vars:     Size  Location     Type
 10223 ;;  quotient        2    5[BANK0 ] unsigned int 
 10224 ;;  counter         1    4[BANK0 ] unsigned char 
 10225 ;; Return value:  Size  Location     Type
 10226 ;;                  2    0[BANK0 ] unsigned int 
 10227 ;; Registers used:
 10228 ;;		wreg, status,2, status,0
 10229 ;; Tracked objects:
 10230 ;;		On entry : 0/0
 10231 ;;		On exit  : 0/0
 10232 ;;		Unchanged: 0/0
 10233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10234 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10235 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10236 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10237 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10238 ;;Total ram usage:        7 bytes
 10239 ;; Hardware stack levels used:    1
 10240 ;; Hardware stack levels required when called:    5
 10241 ;; This function calls:
 10242 ;;		Nothing
 10243 ;; This function is called by:
 10244 ;;		_getHundreds
 10245 ;;		_getTens
 10246 ;;		_printf
 10247 ;; This function uses a non-reentrant model
 10248 ;;
 10249                           
 10250                           	psect	text20
 10251  003184                     __ptext20:
 10252                           	opt stack 0
 10253  003184                     ___lwdiv:
 10254                           	opt stack 23
 10255                           
 10256                           ;incstack = 0
 10257  003184  0E00               	movlw	0
 10258  003186  0100               	movlb	0	; () banked
 10259  003188  6F86               	movwf	(___lwdiv@quotient+1)& (0+255),b
 10260  00318A  0E00               	movlw	0
 10261  00318C  6F85               	movwf	___lwdiv@quotient& (0+255),b
 10262                           
 10263                           ; BSR set to: 0
 10264  00318E  0100               	movlb	0	; () banked
 10265  003190  5182               	movf	___lwdiv@divisor& (0+255),w,b
 10266  003192  0100               	movlb	0	; () banked
 10267  003194  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 10268  003196  B4D8               	btfsc	status,2,c
 10269  003198  D02C               	goto	l1118
 10270                           
 10271                           ; BSR set to: 0
 10272  00319A  0E01               	movlw	1
 10273  00319C  0100               	movlb	0	; () banked
 10274  00319E  6F84               	movwf	___lwdiv@counter& (0+255),b
 10275  0031A0  D006               	goto	l6073
 10276  0031A2                     l6071:
 10277                           
 10278                           ; BSR set to: 0
 10279  0031A2  0100               	movlb	0	; () banked
 10280  0031A4  90D8               	bcf	status,0,c
 10281  0031A6  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 10282  0031A8  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 10283  0031AA  0100               	movlb	0	; () banked
 10284  0031AC  2B84               	incf	___lwdiv@counter& (0+255),f,b
 10285  0031AE                     l6073:
 10286                           
 10287                           ; BSR set to: 0
 10288  0031AE  0100               	movlb	0	; () banked
 10289  0031B0  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 10290  0031B2  D7F7               	goto	l6071
 10291  0031B4                     l6075:
 10292                           
 10293                           ; BSR set to: 0
 10294  0031B4  0100               	movlb	0	; () banked
 10295  0031B6  90D8               	bcf	status,0,c
 10296  0031B8  3785               	rlcf	___lwdiv@quotient& (0+255),f,b
 10297  0031BA  3786               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 10298                           
 10299                           ; BSR set to: 0
 10300  0031BC  0100               	movlb	0	; () banked
 10301  0031BE  5182               	movf	___lwdiv@divisor& (0+255),w,b
 10302  0031C0  0100               	movlb	0	; () banked
 10303  0031C2  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 10304  0031C4  0100               	movlb	0	; () banked
 10305  0031C6  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 10306  0031C8  0100               	movlb	0	; () banked
 10307  0031CA  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 10308  0031CC  A0D8               	btfss	status,0,c
 10309  0031CE  D00A               	goto	l6083
 10310                           
 10311                           ; BSR set to: 0
 10312  0031D0  0100               	movlb	0	; () banked
 10313  0031D2  5182               	movf	___lwdiv@divisor& (0+255),w,b
 10314  0031D4  0100               	movlb	0	; () banked
 10315  0031D6  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 10316  0031D8  0100               	movlb	0	; () banked
 10317  0031DA  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 10318  0031DC  0100               	movlb	0	; () banked
 10319  0031DE  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 10320                           
 10321                           ; BSR set to: 0
 10322  0031E0  0100               	movlb	0	; () banked
 10323  0031E2  8185               	bsf	___lwdiv@quotient& (0+255),0,b
 10324  0031E4                     l6083:
 10325                           
 10326                           ; BSR set to: 0
 10327  0031E4  0100               	movlb	0	; () banked
 10328  0031E6  90D8               	bcf	status,0,c
 10329  0031E8  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 10330  0031EA  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 10331                           
 10332                           ; BSR set to: 0
 10333  0031EC  0100               	movlb	0	; () banked
 10334  0031EE  2F84               	decfsz	___lwdiv@counter& (0+255),f,b
 10335  0031F0  D7E1               	goto	l6075
 10336  0031F2                     l1118:
 10337                           
 10338                           ; BSR set to: 0
 10339  0031F2  C085  F080         	movff	___lwdiv@quotient,?___lwdiv
 10340  0031F6  C086  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 10341                           
 10342                           ; BSR set to: 0
 10343  0031FA  0012               	return		;funcret
 10344  0031FC                     __end_of___lwdiv:
 10345                           	opt stack 0
 10346                           tblptru	equ	0xFF8
 10347                           tblptrh	equ	0xFF7
 10348                           tblptrl	equ	0xFF6
 10349                           tablat	equ	0xFF5
 10350                           prodh	equ	0xFF4
 10351                           prodl	equ	0xFF3
 10352                           intcon	equ	0xFF2
 10353                           intcon2	equ	0xFF1
 10354                           intcon3	equ	0xFF0
 10355                           postinc0	equ	0xFEE
 10356                           wreg	equ	0xFE8
 10357                           postdec1	equ	0xFE5
 10358                           plusw1	equ	0xFE3
 10359                           fsr1l	equ	0xFE1
 10360                           indf2	equ	0xFDF
 10361                           postinc2	equ	0xFDE
 10362                           postdec2	equ	0xFDD
 10363                           plusw2	equ	0xFDB
 10364                           fsr2h	equ	0xFDA
 10365                           fsr2l	equ	0xFD9
 10366                           status	equ	0xFD8
 10367                           
 10368 ;; *************** function _getChar *****************
 10369 ;; Defined at:
 10370 ;;		line 1030 in file "../main.c"
 10371 ;; Parameters:    Size  Location     Type
 10372 ;;  num             2   14[BANK0 ] unsigned int 
 10373 ;; Auto vars:     Size  Location     Type
 10374 ;;		None
 10375 ;; Return value:  Size  Location     Type
 10376 ;;                  1    wreg      unsigned char 
 10377 ;; Registers used:
 10378 ;;		wreg, status,2, status,0
 10379 ;; Tracked objects:
 10380 ;;		On entry : 0/0
 10381 ;;		On exit  : 0/0
 10382 ;;		Unchanged: 0/0
 10383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10384 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10385 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10386 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10387 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10388 ;;Total ram usage:        2 bytes
 10389 ;; Hardware stack levels used:    1
 10390 ;; Hardware stack levels required when called:    5
 10391 ;; This function calls:
 10392 ;;		Nothing
 10393 ;; This function is called by:
 10394 ;;		_logPC
 10395 ;; This function uses a non-reentrant model
 10396 ;;
 10397                           
 10398                           	psect	text21
 10399  003816                     __ptext21:
 10400                           	opt stack 0
 10401  003816                     _getChar:
 10402                           	opt stack 24
 10403                           
 10404                           ;main.c: 1031: return num + '0';
 10405                           
 10406                           ; BSR set to: 0
 10407                           ;incstack = 0
 10408  003816  0100               	movlb	0	; () banked
 10409  003818  518E               	movf	getChar@num& (0+255),w,b
 10410  00381A  0F30               	addlw	48
 10411  00381C  0012               	return	
 10412  00381E                     __end_of_getChar:
 10413                           	opt stack 0
 10414                           tblptru	equ	0xFF8
 10415                           tblptrh	equ	0xFF7
 10416                           tblptrl	equ	0xFF6
 10417                           tablat	equ	0xFF5
 10418                           prodh	equ	0xFF4
 10419                           prodl	equ	0xFF3
 10420                           intcon	equ	0xFF2
 10421                           intcon2	equ	0xFF1
 10422                           intcon3	equ	0xFF0
 10423                           postinc0	equ	0xFEE
 10424                           wreg	equ	0xFE8
 10425                           postdec1	equ	0xFE5
 10426                           plusw1	equ	0xFE3
 10427                           fsr1l	equ	0xFE1
 10428                           indf2	equ	0xFDF
 10429                           postinc2	equ	0xFDE
 10430                           postdec2	equ	0xFDD
 10431                           plusw2	equ	0xFDB
 10432                           fsr2h	equ	0xFDA
 10433                           fsr2l	equ	0xFD9
 10434                           status	equ	0xFD8
 10435                           
 10436 ;; *************** function _I2C_Master_Write *****************
 10437 ;; Defined at:
 10438 ;;		line 39 in file "../I2C.c"
 10439 ;; Parameters:    Size  Location     Type
 10440 ;;  d               2    1[BANK0 ] unsigned int 
 10441 ;; Auto vars:     Size  Location     Type
 10442 ;;		None
 10443 ;; Return value:  Size  Location     Type
 10444 ;;                  1    wreg      void 
 10445 ;; Registers used:
 10446 ;;		wreg, status,2, status,0, cstack
 10447 ;; Tracked objects:
 10448 ;;		On entry : 0/0
 10449 ;;		On exit  : 0/0
 10450 ;;		Unchanged: 0/0
 10451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10452 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10453 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10454 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10455 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10456 ;;Total ram usage:        2 bytes
 10457 ;; Hardware stack levels used:    1
 10458 ;; Hardware stack levels required when called:    6
 10459 ;; This function calls:
 10460 ;;		_I2C_Master_Wait
 10461 ;; This function is called by:
 10462 ;;		_main
 10463 ;;		_logPC
 10464 ;; This function uses a non-reentrant model
 10465 ;;
 10466                           
 10467                           	psect	text22
 10468  003802                     __ptext22:
 10469                           	opt stack 0
 10470  003802                     _I2C_Master_Write:
 10471                           	opt stack 23
 10472                           
 10473                           ;I2C.c: 41: I2C_Master_Wait();
 10474                           
 10475                           ; BSR set to: 0
 10476                           ;incstack = 0
 10477  003802  ECBA  F01B         	call	_I2C_Master_Wait	;wreg free
 10478                           
 10479                           ;I2C.c: 42: SSPBUF = d;
 10480  003806  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
 10481  00380A  0012               	return		;funcret
 10482  00380C                     __end_of_I2C_Master_Write:
 10483                           	opt stack 0
 10484                           tblptru	equ	0xFF8
 10485                           tblptrh	equ	0xFF7
 10486                           tblptrl	equ	0xFF6
 10487                           tablat	equ	0xFF5
 10488                           prodh	equ	0xFF4
 10489                           prodl	equ	0xFF3
 10490                           intcon	equ	0xFF2
 10491                           intcon2	equ	0xFF1
 10492                           intcon3	equ	0xFF0
 10493                           postinc0	equ	0xFEE
 10494                           wreg	equ	0xFE8
 10495                           postdec1	equ	0xFE5
 10496                           plusw1	equ	0xFE3
 10497                           fsr1l	equ	0xFE1
 10498                           indf2	equ	0xFDF
 10499                           postinc2	equ	0xFDE
 10500                           postdec2	equ	0xFDD
 10501                           plusw2	equ	0xFDB
 10502                           fsr2h	equ	0xFDA
 10503                           fsr2l	equ	0xFD9
 10504                           status	equ	0xFD8
 10505                           
 10506 ;; *************** function _I2C_Master_Stop *****************
 10507 ;; Defined at:
 10508 ;;		line 33 in file "../I2C.c"
 10509 ;; Parameters:    Size  Location     Type
 10510 ;;		None
 10511 ;; Auto vars:     Size  Location     Type
 10512 ;;		None
 10513 ;; Return value:  Size  Location     Type
 10514 ;;                  1    wreg      void 
 10515 ;; Registers used:
 10516 ;;		wreg, status,2, status,0, cstack
 10517 ;; Tracked objects:
 10518 ;;		On entry : 0/0
 10519 ;;		On exit  : 0/0
 10520 ;;		Unchanged: 0/0
 10521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10522 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10523 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10524 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10525 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10526 ;;Total ram usage:        0 bytes
 10527 ;; Hardware stack levels used:    1
 10528 ;; Hardware stack levels required when called:    6
 10529 ;; This function calls:
 10530 ;;		_I2C_Master_Wait
 10531 ;; This function is called by:
 10532 ;;		_main
 10533 ;;		_logPC
 10534 ;; This function uses a non-reentrant model
 10535 ;;
 10536                           
 10537                           	psect	text23
 10538  00381E                     __ptext23:
 10539                           	opt stack 0
 10540  00381E                     _I2C_Master_Stop:
 10541                           	opt stack 23
 10542                           
 10543                           ;I2C.c: 35: I2C_Master_Wait();
 10544                           
 10545                           ;incstack = 0
 10546  00381E  ECBA  F01B         	call	_I2C_Master_Wait	;wreg free
 10547                           
 10548                           ;I2C.c: 36: PEN = 1;
 10549  003822  84C5               	bsf	4037,2,c	;volatile
 10550  003824  0012               	return		;funcret
 10551  003826                     __end_of_I2C_Master_Stop:
 10552                           	opt stack 0
 10553                           tblptru	equ	0xFF8
 10554                           tblptrh	equ	0xFF7
 10555                           tblptrl	equ	0xFF6
 10556                           tablat	equ	0xFF5
 10557                           prodh	equ	0xFF4
 10558                           prodl	equ	0xFF3
 10559                           intcon	equ	0xFF2
 10560                           intcon2	equ	0xFF1
 10561                           intcon3	equ	0xFF0
 10562                           postinc0	equ	0xFEE
 10563                           wreg	equ	0xFE8
 10564                           postdec1	equ	0xFE5
 10565                           plusw1	equ	0xFE3
 10566                           fsr1l	equ	0xFE1
 10567                           indf2	equ	0xFDF
 10568                           postinc2	equ	0xFDE
 10569                           postdec2	equ	0xFDD
 10570                           plusw2	equ	0xFDB
 10571                           fsr2h	equ	0xFDA
 10572                           fsr2l	equ	0xFD9
 10573                           status	equ	0xFD8
 10574                           
 10575 ;; *************** function _I2C_Master_Start *****************
 10576 ;; Defined at:
 10577 ;;		line 21 in file "../I2C.c"
 10578 ;; Parameters:    Size  Location     Type
 10579 ;;		None
 10580 ;; Auto vars:     Size  Location     Type
 10581 ;;		None
 10582 ;; Return value:  Size  Location     Type
 10583 ;;                  1    wreg      void 
 10584 ;; Registers used:
 10585 ;;		wreg, status,2, status,0, cstack
 10586 ;; Tracked objects:
 10587 ;;		On entry : 0/0
 10588 ;;		On exit  : 0/0
 10589 ;;		Unchanged: 0/0
 10590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10591 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10592 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10593 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10594 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10595 ;;Total ram usage:        0 bytes
 10596 ;; Hardware stack levels used:    1
 10597 ;; Hardware stack levels required when called:    6
 10598 ;; This function calls:
 10599 ;;		_I2C_Master_Wait
 10600 ;; This function is called by:
 10601 ;;		_main
 10602 ;;		_logPC
 10603 ;; This function uses a non-reentrant model
 10604 ;;
 10605                           
 10606                           	psect	text24
 10607  003826                     __ptext24:
 10608                           	opt stack 0
 10609  003826                     _I2C_Master_Start:
 10610                           	opt stack 23
 10611                           
 10612                           ;I2C.c: 23: I2C_Master_Wait();
 10613                           
 10614                           ;incstack = 0
 10615  003826  ECBA  F01B         	call	_I2C_Master_Wait	;wreg free
 10616                           
 10617                           ;I2C.c: 24: SEN = 1;
 10618  00382A  80C5               	bsf	4037,0,c	;volatile
 10619  00382C  0012               	return		;funcret
 10620  00382E                     __end_of_I2C_Master_Start:
 10621                           	opt stack 0
 10622                           tblptru	equ	0xFF8
 10623                           tblptrh	equ	0xFF7
 10624                           tblptrl	equ	0xFF6
 10625                           tablat	equ	0xFF5
 10626                           prodh	equ	0xFF4
 10627                           prodl	equ	0xFF3
 10628                           intcon	equ	0xFF2
 10629                           intcon2	equ	0xFF1
 10630                           intcon3	equ	0xFF0
 10631                           postinc0	equ	0xFEE
 10632                           wreg	equ	0xFE8
 10633                           postdec1	equ	0xFE5
 10634                           plusw1	equ	0xFE3
 10635                           fsr1l	equ	0xFE1
 10636                           indf2	equ	0xFDF
 10637                           postinc2	equ	0xFDE
 10638                           postdec2	equ	0xFDD
 10639                           plusw2	equ	0xFDB
 10640                           fsr2h	equ	0xFDA
 10641                           fsr2l	equ	0xFD9
 10642                           status	equ	0xFD8
 10643                           
 10644 ;; *************** function _initLCD *****************
 10645 ;; Defined at:
 10646 ;;		line 7 in file "../lcd.c"
 10647 ;; Parameters:    Size  Location     Type
 10648 ;;		None
 10649 ;; Auto vars:     Size  Location     Type
 10650 ;;		None
 10651 ;; Return value:  Size  Location     Type
 10652 ;;                  1    wreg      void 
 10653 ;; Registers used:
 10654 ;;		wreg, status,2, status,0, cstack
 10655 ;; Tracked objects:
 10656 ;;		On entry : 0/0
 10657 ;;		On exit  : 0/0
 10658 ;;		Unchanged: 0/0
 10659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10660 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10661 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10662 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10663 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10664 ;;Total ram usage:        1 bytes
 10665 ;; Hardware stack levels used:    1
 10666 ;; Hardware stack levels required when called:    7
 10667 ;; This function calls:
 10668 ;;		_lcdInst
 10669 ;; This function is called by:
 10670 ;;		_main
 10671 ;; This function uses a non-reentrant model
 10672 ;;
 10673                           
 10674                           	psect	text25
 10675  003494                     __ptext25:
 10676                           	opt stack 0
 10677  003494                     _initLCD:
 10678                           	opt stack 23
 10679                           
 10680                           ;lcd.c: 8: _delay((unsigned long)((15)*(10000000/4000.0)));
 10681                           
 10682                           ;incstack = 0
 10683  003494  0E31               	movlw	49
 10684  003496  0100               	movlb	0	; () banked
 10685  003498  6F83               	movwf	??_initLCD& (0+255),b
 10686  00349A  0EB2               	movlw	178
 10687  00349C                     u7957:
 10688  00349C  2EE8               	decfsz	wreg,f,c
 10689  00349E  D7FE               	bra	u7957
 10690  0034A0  2F83               	decfsz	??_initLCD& (0+255),f,b
 10691  0034A2  D7FC               	bra	u7957
 10692  0034A4  F000               	nop	
 10693                           
 10694                           ;lcd.c: 9: lcdInst(0b00110011);
 10695  0034A6  0E33               	movlw	51
 10696  0034A8  ECDF  F01B         	call	_lcdInst
 10697                           
 10698                           ;lcd.c: 10: lcdInst(0b00110010);
 10699  0034AC  0E32               	movlw	50
 10700  0034AE  ECDF  F01B         	call	_lcdInst
 10701                           
 10702                           ;lcd.c: 11: lcdInst(0b00101000);
 10703  0034B2  0E28               	movlw	40
 10704  0034B4  ECDF  F01B         	call	_lcdInst
 10705                           
 10706                           ;lcd.c: 12: lcdInst(0b00001111);
 10707  0034B8  0E0F               	movlw	15
 10708  0034BA  ECDF  F01B         	call	_lcdInst
 10709                           
 10710                           ;lcd.c: 13: lcdInst(0b00000110);
 10711  0034BE  0E06               	movlw	6
 10712  0034C0  ECDF  F01B         	call	_lcdInst
 10713                           
 10714                           ;lcd.c: 14: lcdInst(0b00000001);
 10715  0034C4  0E01               	movlw	1
 10716  0034C6  ECDF  F01B         	call	_lcdInst
 10717                           
 10718                           ;lcd.c: 15: _delay((unsigned long)((15)*(10000000/4000.0)));
 10719  0034CA  0E31               	movlw	49
 10720  0034CC  0100               	movlb	0	; () banked
 10721  0034CE  6F83               	movwf	??_initLCD& (0+255),b
 10722  0034D0  0EB2               	movlw	178
 10723  0034D2                     u7967:
 10724  0034D2  2EE8               	decfsz	wreg,f,c
 10725  0034D4  D7FE               	bra	u7967
 10726  0034D6  2F83               	decfsz	??_initLCD& (0+255),f,b
 10727  0034D8  D7FC               	bra	u7967
 10728  0034DA  F000               	nop	
 10729  0034DC  0012               	return		;funcret
 10730  0034DE                     __end_of_initLCD:
 10731                           	opt stack 0
 10732                           tblptru	equ	0xFF8
 10733                           tblptrh	equ	0xFF7
 10734                           tblptrl	equ	0xFF6
 10735                           tablat	equ	0xFF5
 10736                           prodh	equ	0xFF4
 10737                           prodl	equ	0xFF3
 10738                           intcon	equ	0xFF2
 10739                           intcon2	equ	0xFF1
 10740                           intcon3	equ	0xFF0
 10741                           postinc0	equ	0xFEE
 10742                           wreg	equ	0xFE8
 10743                           postdec1	equ	0xFE5
 10744                           plusw1	equ	0xFE3
 10745                           fsr1l	equ	0xFE1
 10746                           indf2	equ	0xFDF
 10747                           postinc2	equ	0xFDE
 10748                           postdec2	equ	0xFDD
 10749                           plusw2	equ	0xFDB
 10750                           fsr2h	equ	0xFDA
 10751                           fsr2l	equ	0xFD9
 10752                           status	equ	0xFD8
 10753                           
 10754 ;; *************** function _lcdInst *****************
 10755 ;; Defined at:
 10756 ;;		line 18 in file "../lcd.c"
 10757 ;; Parameters:    Size  Location     Type
 10758 ;;  data            1    wreg     unsigned char 
 10759 ;; Auto vars:     Size  Location     Type
 10760 ;;  data            1    2[BANK0 ] unsigned char 
 10761 ;; Return value:  Size  Location     Type
 10762 ;;                  1    wreg      void 
 10763 ;; Registers used:
 10764 ;;		wreg, status,2, status,0, cstack
 10765 ;; Tracked objects:
 10766 ;;		On entry : 0/0
 10767 ;;		On exit  : 0/0
 10768 ;;		Unchanged: 0/0
 10769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10770 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10771 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10772 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10773 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10774 ;;Total ram usage:        1 bytes
 10775 ;; Hardware stack levels used:    1
 10776 ;; Hardware stack levels required when called:    6
 10777 ;; This function calls:
 10778 ;;		_lcdNibble
 10779 ;; This function is called by:
 10780 ;;		_initLCD
 10781 ;;		_main
 10782 ;;		_show_log
 10783 ;; This function uses a non-reentrant model
 10784 ;;
 10785                           
 10786                           	psect	text26
 10787  0037BE                     __ptext26:
 10788                           	opt stack 0
 10789  0037BE                     _lcdInst:
 10790                           	opt stack 23
 10791                           
 10792                           ;incstack = 0
 10793                           ;lcdInst@data stored from wreg
 10794  0037BE  0100               	movlb	0	; () banked
 10795  0037C0  6F82               	movwf	lcdInst@data& (0+255),b
 10796                           
 10797                           ;lcd.c: 19: LATDbits.LATD2 = 0;
 10798  0037C2  948C               	bcf	3980,2,c	;volatile
 10799                           
 10800                           ;lcd.c: 20: lcdNibble(data);
 10801  0037C4  0100               	movlb	0	; () banked
 10802  0037C6  5182               	movf	lcdInst@data& (0+255),w,b
 10803  0037C8  EC9A  F019         	call	_lcdNibble
 10804  0037CC  0012               	return		;funcret
 10805  0037CE                     __end_of_lcdInst:
 10806                           	opt stack 0
 10807                           tblptru	equ	0xFF8
 10808                           tblptrh	equ	0xFF7
 10809                           tblptrl	equ	0xFF6
 10810                           tablat	equ	0xFF5
 10811                           prodh	equ	0xFF4
 10812                           prodl	equ	0xFF3
 10813                           intcon	equ	0xFF2
 10814                           intcon2	equ	0xFF1
 10815                           intcon3	equ	0xFF0
 10816                           postinc0	equ	0xFEE
 10817                           wreg	equ	0xFE8
 10818                           postdec1	equ	0xFE5
 10819                           plusw1	equ	0xFE3
 10820                           fsr1l	equ	0xFE1
 10821                           indf2	equ	0xFDF
 10822                           postinc2	equ	0xFDE
 10823                           postdec2	equ	0xFDD
 10824                           plusw2	equ	0xFDB
 10825                           fsr2h	equ	0xFDA
 10826                           fsr2l	equ	0xFD9
 10827                           status	equ	0xFD8
 10828                           
 10829 ;; *************** function _lcdNibble *****************
 10830 ;; Defined at:
 10831 ;;		line 28 in file "../lcd.c"
 10832 ;; Parameters:    Size  Location     Type
 10833 ;;  data            1    wreg     unsigned char 
 10834 ;; Auto vars:     Size  Location     Type
 10835 ;;  data            1    1[BANK0 ] unsigned char 
 10836 ;;  temp            1    0[BANK0 ] unsigned char 
 10837 ;; Return value:  Size  Location     Type
 10838 ;;                  1    wreg      void 
 10839 ;; Registers used:
 10840 ;;		wreg, status,2, status,0
 10841 ;; Tracked objects:
 10842 ;;		On entry : 0/0
 10843 ;;		On exit  : 0/0
 10844 ;;		Unchanged: 0/0
 10845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10846 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10847 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10848 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10849 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10850 ;;Total ram usage:        2 bytes
 10851 ;; Hardware stack levels used:    1
 10852 ;; Hardware stack levels required when called:    5
 10853 ;; This function calls:
 10854 ;;		Nothing
 10855 ;; This function is called by:
 10856 ;;		_lcdInst
 10857 ;;		_putch
 10858 ;; This function uses a non-reentrant model
 10859 ;;
 10860                           
 10861                           	psect	text27
 10862  003334                     __ptext27:
 10863                           	opt stack 0
 10864  003334                     _lcdNibble:
 10865                           	opt stack 22
 10866                           
 10867                           ;incstack = 0
 10868                           ;lcdNibble@data stored from wreg
 10869  003334  0100               	movlb	0	; () banked
 10870  003336  6F81               	movwf	lcdNibble@data& (0+255),b
 10871                           
 10872                           ;lcd.c: 30: char temp = data & 0xF0;
 10873  003338  0100               	movlb	0	; () banked
 10874  00333A  5181               	movf	lcdNibble@data& (0+255),w,b
 10875  00333C  0BF0               	andlw	240
 10876  00333E  0100               	movlb	0	; () banked
 10877  003340  6F80               	movwf	lcdNibble@temp& (0+255),b
 10878                           
 10879                           ;lcd.c: 31: LATD = LATD & 0x0F;
 10880  003342  508C               	movf	3980,w,c	;volatile
 10881  003344  0B0F               	andlw	15
 10882  003346  6E8C               	movwf	3980,c	;volatile
 10883                           
 10884                           ;lcd.c: 32: LATD = temp | LATD;
 10885  003348  0100               	movlb	0	; () banked
 10886  00334A  5180               	movf	lcdNibble@temp& (0+255),w,b
 10887  00334C  108C               	iorwf	3980,w,c	;volatile
 10888  00334E  6E8C               	movwf	3980,c	;volatile
 10889                           
 10890                           ; BSR set to: 0
 10891                           ;lcd.c: 34: LATDbits.LATD3 = 0;
 10892  003350  968C               	bcf	3980,3,c	;volatile
 10893                           
 10894                           ; BSR set to: 0
 10895                           ;lcd.c: 35: _delay((unsigned long)((30)*(10000000/4000000.0)));
 10896  003352  0E19               	movlw	25
 10897  003354                     u7977:
 10898  003354  2EE8               	decfsz	wreg,f,c
 10899  003356  D7FE               	bra	u7977
 10900                           
 10901                           ;lcd.c: 36: LATDbits.LATD3 = 1;
 10902  003358  868C               	bsf	3980,3,c	;volatile
 10903                           
 10904                           ;lcd.c: 37: _delay((unsigned long)((30)*(10000000/4000000.0)));
 10905  00335A  0E19               	movlw	25
 10906  00335C                     u7987:
 10907  00335C  2EE8               	decfsz	wreg,f,c
 10908  00335E  D7FE               	bra	u7987
 10909                           
 10910                           ;lcd.c: 39: data = data << 4;
 10911  003360  0100               	movlb	0	; () banked
 10912  003362  3981               	swapf	lcdNibble@data& (0+255),w,b
 10913  003364  0BF0               	andlw	240
 10914  003366  0100               	movlb	0	; () banked
 10915  003368  6F81               	movwf	lcdNibble@data& (0+255),b
 10916                           
 10917                           ;lcd.c: 41: temp = data & 0xF0;
 10918  00336A  0100               	movlb	0	; () banked
 10919  00336C  5181               	movf	lcdNibble@data& (0+255),w,b
 10920  00336E  0BF0               	andlw	240
 10921  003370  0100               	movlb	0	; () banked
 10922  003372  6F80               	movwf	lcdNibble@temp& (0+255),b
 10923                           
 10924                           ;lcd.c: 42: LATD = LATD & 0x0F;
 10925  003374  508C               	movf	3980,w,c	;volatile
 10926  003376  0B0F               	andlw	15
 10927  003378  6E8C               	movwf	3980,c	;volatile
 10928                           
 10929                           ;lcd.c: 43: LATD = temp | LATD;
 10930  00337A  0100               	movlb	0	; () banked
 10931  00337C  5180               	movf	lcdNibble@temp& (0+255),w,b
 10932  00337E  108C               	iorwf	3980,w,c	;volatile
 10933  003380  6E8C               	movwf	3980,c	;volatile
 10934                           
 10935                           ; BSR set to: 0
 10936                           ;lcd.c: 45: LATDbits.LATD3 = 0;
 10937  003382  968C               	bcf	3980,3,c	;volatile
 10938                           
 10939                           ; BSR set to: 0
 10940                           ;lcd.c: 46: _delay((unsigned long)((30)*(10000000/4000000.0)));
 10941  003384  0E19               	movlw	25
 10942  003386                     u7997:
 10943  003386  2EE8               	decfsz	wreg,f,c
 10944  003388  D7FE               	bra	u7997
 10945                           
 10946                           ;lcd.c: 47: LATDbits.LATD3 = 1;
 10947  00338A  868C               	bsf	3980,3,c	;volatile
 10948                           
 10949                           ;lcd.c: 48: _delay((unsigned long)((30)*(10000000/4000000.0)));
 10950  00338C  0E19               	movlw	25
 10951  00338E                     u8007:
 10952  00338E  2EE8               	decfsz	wreg,f,c
 10953  003390  D7FE               	bra	u8007
 10954  003392  0012               	return		;funcret
 10955  003394                     __end_of_lcdNibble:
 10956                           	opt stack 0
 10957                           tblptru	equ	0xFF8
 10958                           tblptrh	equ	0xFF7
 10959                           tblptrl	equ	0xFF6
 10960                           tablat	equ	0xFF5
 10961                           prodh	equ	0xFF4
 10962                           prodl	equ	0xFF3
 10963                           intcon	equ	0xFF2
 10964                           intcon2	equ	0xFF1
 10965                           intcon3	equ	0xFF0
 10966                           postinc0	equ	0xFEE
 10967                           wreg	equ	0xFE8
 10968                           postdec1	equ	0xFE5
 10969                           plusw1	equ	0xFE3
 10970                           fsr1l	equ	0xFE1
 10971                           indf2	equ	0xFDF
 10972                           postinc2	equ	0xFDE
 10973                           postdec2	equ	0xFDD
 10974                           plusw2	equ	0xFDB
 10975                           fsr2h	equ	0xFDA
 10976                           fsr2l	equ	0xFD9
 10977                           status	equ	0xFD8
 10978                           
 10979 ;; *************** function _I2C_Master_Read *****************
 10980 ;; Defined at:
 10981 ;;		line 45 in file "../I2C.c"
 10982 ;; Parameters:    Size  Location     Type
 10983 ;;  a               1    wreg     unsigned char 
 10984 ;; Auto vars:     Size  Location     Type
 10985 ;;  a               1    1[BANK0 ] unsigned char 
 10986 ;;  temp            1    2[BANK0 ] unsigned char 
 10987 ;; Return value:  Size  Location     Type
 10988 ;;                  1    wreg      unsigned char 
 10989 ;; Registers used:
 10990 ;;		wreg, status,2, status,0, cstack
 10991 ;; Tracked objects:
 10992 ;;		On entry : 0/0
 10993 ;;		On exit  : 0/0
 10994 ;;		Unchanged: 0/0
 10995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10996 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10997 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10998 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10999 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11000 ;;Total ram usage:        2 bytes
 11001 ;; Hardware stack levels used:    1
 11002 ;; Hardware stack levels required when called:    6
 11003 ;; This function calls:
 11004 ;;		_I2C_Master_Wait
 11005 ;; This function is called by:
 11006 ;;		_main
 11007 ;; This function uses a non-reentrant model
 11008 ;;
 11009                           
 11010                           	psect	text28
 11011  0035CE                     __ptext28:
 11012                           	opt stack 0
 11013  0035CE                     _I2C_Master_Read:
 11014                           	opt stack 24
 11015                           
 11016                           ;incstack = 0
 11017                           ;I2C_Master_Read@a stored from wreg
 11018  0035CE  0100               	movlb	0	; () banked
 11019  0035D0  6F81               	movwf	I2C_Master_Read@a& (0+255),b
 11020                           
 11021                           ;I2C.c: 47: unsigned char temp;
 11022                           ;I2C.c: 48: I2C_Master_Wait();
 11023  0035D2  ECBA  F01B         	call	_I2C_Master_Wait	;wreg free
 11024                           
 11025                           ;I2C.c: 49: RCEN = 1;
 11026  0035D6  86C5               	bsf	4037,3,c	;volatile
 11027                           
 11028                           ;I2C.c: 50: I2C_Master_Wait();
 11029  0035D8  ECBA  F01B         	call	_I2C_Master_Wait	;wreg free
 11030                           
 11031                           ;I2C.c: 51: temp = SSPBUF;
 11032  0035DC  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
 11033                           
 11034                           ;I2C.c: 52: I2C_Master_Wait();
 11035  0035E0  ECBA  F01B         	call	_I2C_Master_Wait	;wreg free
 11036                           
 11037                           ;I2C.c: 53: ACKDT = (a)?0:1;
 11038  0035E4  0100               	movlb	0	; () banked
 11039  0035E6  5181               	movf	I2C_Master_Read@a& (0+255),w,b
 11040  0035E8  0100               	movlb	0	; () banked
 11041  0035EA  A4D8               	btfss	status,2,c
 11042  0035EC  D002               	goto	u6350
 11043  0035EE  8AC5               	bsf	4037,5,c	;volatile
 11044  0035F0  D001               	goto	l6433
 11045  0035F2                     u6350:
 11046  0035F2  9AC5               	bcf	4037,5,c	;volatile
 11047  0035F4                     l6433:
 11048                           
 11049                           ;I2C.c: 54: ACKEN = 1;
 11050  0035F4  88C5               	bsf	4037,4,c	;volatile
 11051                           
 11052                           ;I2C.c: 55: return temp;
 11053  0035F6  0100               	movlb	0	; () banked
 11054  0035F8  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
 11055  0035FA  0012               	return	
 11056  0035FC                     __end_of_I2C_Master_Read:
 11057                           	opt stack 0
 11058                           tblptru	equ	0xFF8
 11059                           tblptrh	equ	0xFF7
 11060                           tblptrl	equ	0xFF6
 11061                           tablat	equ	0xFF5
 11062                           prodh	equ	0xFF4
 11063                           prodl	equ	0xFF3
 11064                           intcon	equ	0xFF2
 11065                           intcon2	equ	0xFF1
 11066                           intcon3	equ	0xFF0
 11067                           postinc0	equ	0xFEE
 11068                           wreg	equ	0xFE8
 11069                           postdec1	equ	0xFE5
 11070                           plusw1	equ	0xFE3
 11071                           fsr1l	equ	0xFE1
 11072                           indf2	equ	0xFDF
 11073                           postinc2	equ	0xFDE
 11074                           postdec2	equ	0xFDD
 11075                           plusw2	equ	0xFDB
 11076                           fsr2h	equ	0xFDA
 11077                           fsr2l	equ	0xFD9
 11078                           status	equ	0xFD8
 11079                           
 11080 ;; *************** function _I2C_Master_Wait *****************
 11081 ;; Defined at:
 11082 ;;		line 16 in file "../I2C.c"
 11083 ;; Parameters:    Size  Location     Type
 11084 ;;		None
 11085 ;; Auto vars:     Size  Location     Type
 11086 ;;		None
 11087 ;; Return value:  Size  Location     Type
 11088 ;;                  1    wreg      void 
 11089 ;; Registers used:
 11090 ;;		wreg, status,2, status,0
 11091 ;; Tracked objects:
 11092 ;;		On entry : 0/0
 11093 ;;		On exit  : 0/0
 11094 ;;		Unchanged: 0/0
 11095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11096 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11097 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11098 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11099 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11100 ;;Total ram usage:        1 bytes
 11101 ;; Hardware stack levels used:    1
 11102 ;; Hardware stack levels required when called:    5
 11103 ;; This function calls:
 11104 ;;		Nothing
 11105 ;; This function is called by:
 11106 ;;		_I2C_Master_Start
 11107 ;;		_I2C_Master_Stop
 11108 ;;		_I2C_Master_Write
 11109 ;;		_I2C_Master_Read
 11110 ;; This function uses a non-reentrant model
 11111 ;;
 11112                           
 11113                           	psect	text29
 11114  003774                     __ptext29:
 11115                           	opt stack 0
 11116  003774                     _I2C_Master_Wait:
 11117                           	opt stack 23
 11118  003774                     l30:
 11119  003774  B4C7               	btfsc	4039,2,c	;volatile
 11120  003776  D7FE               	goto	l30
 11121  003778  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
 11122  00377C  0E1F               	movlw	31
 11123  00377E  0100               	movlb	0	; () banked
 11124  003780  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
 11125  003782  B4D8               	btfsc	status,2,c
 11126  003784  0012               	return	
 11127  003786  D7F6               	goto	l30
 11128  003788                     __end_of_I2C_Master_Wait:
 11129                           	opt stack 0
 11130                           tblptru	equ	0xFF8
 11131                           tblptrh	equ	0xFF7
 11132                           tblptrl	equ	0xFF6
 11133                           tablat	equ	0xFF5
 11134                           prodh	equ	0xFF4
 11135                           prodl	equ	0xFF3
 11136                           intcon	equ	0xFF2
 11137                           intcon2	equ	0xFF1
 11138                           intcon3	equ	0xFF0
 11139                           postinc0	equ	0xFEE
 11140                           wreg	equ	0xFE8
 11141                           postdec1	equ	0xFE5
 11142                           plusw1	equ	0xFE3
 11143                           fsr1l	equ	0xFE1
 11144                           indf2	equ	0xFDF
 11145                           postinc2	equ	0xFDE
 11146                           postdec2	equ	0xFDD
 11147                           plusw2	equ	0xFDB
 11148                           fsr2h	equ	0xFDA
 11149                           fsr2l	equ	0xFD9
 11150                           status	equ	0xFD8
 11151                           
 11152 ;; *************** function _I2C_Master_Init *****************
 11153 ;; Defined at:
 11154 ;;		line 5 in file "../I2C.c"
 11155 ;; Parameters:    Size  Location     Type
 11156 ;;  c               4   13[BANK0 ] const unsigned long 
 11157 ;; Auto vars:     Size  Location     Type
 11158 ;;		None
 11159 ;; Return value:  Size  Location     Type
 11160 ;;                  1    wreg      void 
 11161 ;; Registers used:
 11162 ;;		wreg, status,2, status,0, cstack
 11163 ;; Tracked objects:
 11164 ;;		On entry : 0/0
 11165 ;;		On exit  : 0/0
 11166 ;;		Unchanged: 0/0
 11167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11168 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11169 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11170 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11171 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11172 ;;Total ram usage:        8 bytes
 11173 ;; Hardware stack levels used:    1
 11174 ;; Hardware stack levels required when called:    6
 11175 ;; This function calls:
 11176 ;;		___lldiv
 11177 ;; This function is called by:
 11178 ;;		_main
 11179 ;; This function uses a non-reentrant model
 11180 ;;
 11181                           
 11182                           	psect	text30
 11183  003394                     __ptext30:
 11184                           	opt stack 0
 11185  003394                     _I2C_Master_Init:
 11186                           	opt stack 24
 11187                           
 11188                           ;I2C.c: 8: SSPSTAT = 0b00000000;
 11189                           
 11190                           ; BSR set to: 0
 11191                           ;incstack = 0
 11192  003394  0E00               	movlw	0
 11193  003396  6EC7               	movwf	4039,c	;volatile
 11194                           
 11195                           ;I2C.c: 9: SSPCON1 = 0b00101000;
 11196  003398  0E28               	movlw	40
 11197  00339A  6EC6               	movwf	4038,c	;volatile
 11198                           
 11199                           ;I2C.c: 10: SSPCON2 = 0b00000000;
 11200  00339C  0E00               	movlw	0
 11201  00339E  6EC5               	movwf	4037,c	;volatile
 11202                           
 11203                           ;I2C.c: 11: SSPADD = (10000000/(4*c))-1;
 11204  0033A0  0E80               	movlw	128
 11205  0033A2  0100               	movlb	0	; () banked
 11206  0033A4  6F80               	movwf	___lldiv@dividend& (0+255),b
 11207  0033A6  0E96               	movlw	150
 11208  0033A8  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
 11209  0033AA  0E98               	movlw	152
 11210  0033AC  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
 11211  0033AE  0E00               	movlw	0
 11212  0033B0  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
 11213  0033B2  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
 11214  0033B6  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
 11215  0033BA  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
 11216  0033BE  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
 11217  0033C2  0E02               	movlw	2
 11218  0033C4                     u6345:
 11219  0033C4  90D8               	bcf	status,0,c
 11220  0033C6  0100               	movlb	0	; () banked
 11221  0033C8  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
 11222  0033CA  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
 11223  0033CC  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
 11224  0033CE  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
 11225  0033D0  2EE8               	decfsz	wreg,f,c
 11226  0033D2  D7F8               	goto	u6345
 11227  0033D4  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
 11228  0033D8  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
 11229  0033DC  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
 11230  0033E0  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
 11231  0033E4  ECD1  F017         	call	___lldiv	;wreg free
 11232  0033E8  0100               	movlb	0	; () banked
 11233  0033EA  0580               	decf	?___lldiv& (0+255),w,b
 11234  0033EC  6EC8               	movwf	4040,c	;volatile
 11235                           
 11236                           ; BSR set to: 0
 11237                           ;I2C.c: 12: TRISC3 = 1;
 11238  0033EE  8694               	bsf	3988,3,c	;volatile
 11239                           
 11240                           ; BSR set to: 0
 11241                           ;I2C.c: 13: TRISC4 = 1;
 11242  0033F0  8894               	bsf	3988,4,c	;volatile
 11243                           
 11244                           ; BSR set to: 0
 11245  0033F2  0012               	return		;funcret
 11246  0033F4                     __end_of_I2C_Master_Init:
 11247                           	opt stack 0
 11248                           tblptru	equ	0xFF8
 11249                           tblptrh	equ	0xFF7
 11250                           tblptrl	equ	0xFF6
 11251                           tablat	equ	0xFF5
 11252                           prodh	equ	0xFF4
 11253                           prodl	equ	0xFF3
 11254                           intcon	equ	0xFF2
 11255                           intcon2	equ	0xFF1
 11256                           intcon3	equ	0xFF0
 11257                           postinc0	equ	0xFEE
 11258                           wreg	equ	0xFE8
 11259                           postdec1	equ	0xFE5
 11260                           plusw1	equ	0xFE3
 11261                           fsr1l	equ	0xFE1
 11262                           indf2	equ	0xFDF
 11263                           postinc2	equ	0xFDE
 11264                           postdec2	equ	0xFDD
 11265                           plusw2	equ	0xFDB
 11266                           fsr2h	equ	0xFDA
 11267                           fsr2l	equ	0xFD9
 11268                           status	equ	0xFD8
 11269                           
 11270 ;; *************** function ___lldiv *****************
 11271 ;; Defined at:
 11272 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
 11273 ;; Parameters:    Size  Location     Type
 11274 ;;  dividend        4    0[BANK0 ] unsigned long 
 11275 ;;  divisor         4    4[BANK0 ] unsigned long 
 11276 ;; Auto vars:     Size  Location     Type
 11277 ;;  quotient        4    8[BANK0 ] unsigned long 
 11278 ;;  counter         1   12[BANK0 ] unsigned char 
 11279 ;; Return value:  Size  Location     Type
 11280 ;;                  4    0[BANK0 ] unsigned long 
 11281 ;; Registers used:
 11282 ;;		wreg, status,2, status,0
 11283 ;; Tracked objects:
 11284 ;;		On entry : 0/0
 11285 ;;		On exit  : 0/0
 11286 ;;		Unchanged: 0/0
 11287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11288 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11289 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11290 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11291 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11292 ;;Total ram usage:       13 bytes
 11293 ;; Hardware stack levels used:    1
 11294 ;; Hardware stack levels required when called:    5
 11295 ;; This function calls:
 11296 ;;		Nothing
 11297 ;; This function is called by:
 11298 ;;		_I2C_Master_Init
 11299 ;; This function uses a non-reentrant model
 11300 ;;
 11301                           
 11302                           	psect	text31
 11303  002FA2                     __ptext31:
 11304                           	opt stack 0
 11305  002FA2                     ___lldiv:
 11306                           	opt stack 24
 11307                           
 11308                           ; BSR set to: 0
 11309                           ;incstack = 0
 11310  002FA2  0E00               	movlw	0
 11311  002FA4  0100               	movlb	0	; () banked
 11312  002FA6  6F88               	movwf	___lldiv@quotient& (0+255),b
 11313  002FA8  0E00               	movlw	0
 11314  002FAA  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
 11315  002FAC  0E00               	movlw	0
 11316  002FAE  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
 11317  002FB0  0E00               	movlw	0
 11318  002FB2  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
 11319                           
 11320                           ; BSR set to: 0
 11321  002FB4  0100               	movlb	0	; () banked
 11322  002FB6  5184               	movf	___lldiv@divisor& (0+255),w,b
 11323  002FB8  0100               	movlb	0	; () banked
 11324  002FBA  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 11325  002FBC  0100               	movlb	0	; () banked
 11326  002FBE  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 11327  002FC0  0100               	movlb	0	; () banked
 11328  002FC2  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 11329  002FC4  B4D8               	btfsc	status,2,c
 11330  002FC6  D042               	goto	l1065
 11331                           
 11332                           ; BSR set to: 0
 11333  002FC8  0E01               	movlw	1
 11334  002FCA  0100               	movlb	0	; () banked
 11335  002FCC  6F8C               	movwf	___lldiv@counter& (0+255),b
 11336  002FCE  D008               	goto	l6403
 11337  002FD0                     l6401:
 11338                           
 11339                           ; BSR set to: 0
 11340  002FD0  0100               	movlb	0	; () banked
 11341  002FD2  90D8               	bcf	status,0,c
 11342  002FD4  3784               	rlcf	___lldiv@divisor& (0+255),f,b
 11343  002FD6  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 11344  002FD8  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 11345  002FDA  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 11346  002FDC  0100               	movlb	0	; () banked
 11347  002FDE  2B8C               	incf	___lldiv@counter& (0+255),f,b
 11348  002FE0                     l6403:
 11349                           
 11350                           ; BSR set to: 0
 11351  002FE0  0100               	movlb	0	; () banked
 11352  002FE2  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 11353  002FE4  D7F5               	goto	l6401
 11354  002FE6                     l6405:
 11355                           
 11356                           ; BSR set to: 0
 11357  002FE6  0100               	movlb	0	; () banked
 11358  002FE8  90D8               	bcf	status,0,c
 11359  002FEA  3788               	rlcf	___lldiv@quotient& (0+255),f,b
 11360  002FEC  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 11361  002FEE  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 11362  002FF0  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 11363                           
 11364                           ; BSR set to: 0
 11365  002FF2  0100               	movlb	0	; () banked
 11366  002FF4  5184               	movf	___lldiv@divisor& (0+255),w,b
 11367  002FF6  0100               	movlb	0	; () banked
 11368  002FF8  5D80               	subwf	___lldiv@dividend& (0+255),w,b
 11369  002FFA  0100               	movlb	0	; () banked
 11370  002FFC  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
 11371  002FFE  0100               	movlb	0	; () banked
 11372  003000  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 11373  003002  0100               	movlb	0	; () banked
 11374  003004  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
 11375  003006  0100               	movlb	0	; () banked
 11376  003008  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 11377  00300A  0100               	movlb	0	; () banked
 11378  00300C  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
 11379  00300E  0100               	movlb	0	; () banked
 11380  003010  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 11381  003012  A0D8               	btfss	status,0,c
 11382  003014  D012               	goto	l6413
 11383                           
 11384                           ; BSR set to: 0
 11385  003016  0100               	movlb	0	; () banked
 11386  003018  5184               	movf	___lldiv@divisor& (0+255),w,b
 11387  00301A  0100               	movlb	0	; () banked
 11388  00301C  5F80               	subwf	___lldiv@dividend& (0+255),f,b
 11389  00301E  0100               	movlb	0	; () banked
 11390  003020  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
 11391  003022  0100               	movlb	0	; () banked
 11392  003024  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 11393  003026  0100               	movlb	0	; () banked
 11394  003028  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
 11395  00302A  0100               	movlb	0	; () banked
 11396  00302C  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 11397  00302E  0100               	movlb	0	; () banked
 11398  003030  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
 11399  003032  0100               	movlb	0	; () banked
 11400  003034  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 11401                           
 11402                           ; BSR set to: 0
 11403  003036  0100               	movlb	0	; () banked
 11404  003038  8188               	bsf	___lldiv@quotient& (0+255),0,b
 11405  00303A                     l6413:
 11406                           
 11407                           ; BSR set to: 0
 11408  00303A  0100               	movlb	0	; () banked
 11409  00303C  90D8               	bcf	status,0,c
 11410  00303E  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 11411  003040  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 11412  003042  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 11413  003044  3384               	rrcf	___lldiv@divisor& (0+255),f,b
 11414                           
 11415                           ; BSR set to: 0
 11416  003046  0100               	movlb	0	; () banked
 11417  003048  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
 11418  00304A  D7CD               	goto	l6405
 11419  00304C                     l1065:
 11420                           
 11421                           ; BSR set to: 0
 11422  00304C  C088  F080         	movff	___lldiv@quotient,?___lldiv
 11423  003050  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
 11424  003054  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
 11425  003058  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
 11426                           
 11427                           ; BSR set to: 0
 11428  00305C  0012               	return		;funcret
 11429  00305E                     __end_of___lldiv:
 11430                           	opt stack 0
 11431                           tblptru	equ	0xFF8
 11432                           tblptrh	equ	0xFF7
 11433                           tblptrl	equ	0xFF6
 11434                           tablat	equ	0xFF5
 11435                           prodh	equ	0xFF4
 11436                           prodl	equ	0xFF3
 11437                           intcon	equ	0xFF2
 11438                           intcon2	equ	0xFF1
 11439                           intcon3	equ	0xFF0
 11440                           postinc0	equ	0xFEE
 11441                           wreg	equ	0xFE8
 11442                           postdec1	equ	0xFE5
 11443                           plusw1	equ	0xFE3
 11444                           fsr1l	equ	0xFE1
 11445                           indf2	equ	0xFDF
 11446                           postinc2	equ	0xFDE
 11447                           postdec2	equ	0xFDD
 11448                           plusw2	equ	0xFDB
 11449                           fsr2h	equ	0xFDA
 11450                           fsr2l	equ	0xFD9
 11451                           status	equ	0xFD8
 11452                           
 11453 ;; *************** function _ISR *****************
 11454 ;; Defined at:
 11455 ;;		line 1036 in file "../main.c"
 11456 ;; Parameters:    Size  Location     Type
 11457 ;;		None
 11458 ;; Auto vars:     Size  Location     Type
 11459 ;;  keypress        1   51[COMRAM] unsigned char 
 11460 ;; Return value:  Size  Location     Type
 11461 ;;                  1    wreg      void 
 11462 ;; Registers used:
 11463 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11464 ;; Tracked objects:
 11465 ;;		On entry : 0/0
 11466 ;;		On exit  : 0/0
 11467 ;;		Unchanged: 0/0
 11468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11470 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11471 ;;      Temps:         15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11472 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11473 ;;Total ram usage:       16 bytes
 11474 ;; Hardware stack levels used:    1
 11475 ;; Hardware stack levels required when called:    4
 11476 ;; This function calls:
 11477 ;;		_keypressed
 11478 ;;		i2___awdiv
 11479 ;;		i2___awmod
 11480 ;;		i2_lcdInst
 11481 ;;		i2_printf
 11482 ;;		i2_stopOperation
 11483 ;; This function is called by:
 11484 ;;		Interrupt level 2
 11485 ;; This function uses a non-reentrant model
 11486 ;;
 11487                           
 11488                           	psect	intcode
 11489  000008                     __pintcode:
 11490                           	opt stack 0
 11491  000008                     _ISR:
 11492                           	opt stack 22
 11493                           
 11494                           ; BSR set to: 0
 11495                           ;incstack = 0
 11496  000008  8256               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 11497  00000A  ED61  F014         	call	int_func,f	;refresh shadow registers
 11498                           tblptru	equ	0xFF8
 11499                           tblptrh	equ	0xFF7
 11500                           tblptrl	equ	0xFF6
 11501                           tablat	equ	0xFF5
 11502                           prodh	equ	0xFF4
 11503                           prodl	equ	0xFF3
 11504                           intcon	equ	0xFF2
 11505                           intcon2	equ	0xFF1
 11506                           intcon3	equ	0xFF0
 11507                           postinc0	equ	0xFEE
 11508                           wreg	equ	0xFE8
 11509                           postdec1	equ	0xFE5
 11510                           plusw1	equ	0xFE3
 11511                           fsr1l	equ	0xFE1
 11512                           indf2	equ	0xFDF
 11513                           postinc2	equ	0xFDE
 11514                           postdec2	equ	0xFDD
 11515                           plusw2	equ	0xFDB
 11516                           fsr2h	equ	0xFDA
 11517                           fsr2l	equ	0xFD9
 11518                           status	equ	0xFD8
 11519                           
 11520                           	psect	intcode_body
 11521  0028C2                     __pintcode_body:
 11522                           	opt stack 22
 11523  0028C2                     int_func:
 11524                           	opt stack 22
 11525  0028C2  0006               	pop		; remove dummy address from shadow register refresh
 11526  0028C4  CFFA F026          	movff	pclath,??_ISR+1
 11527  0028C8  CFFB F027          	movff	pclatu,??_ISR+2
 11528  0028CC  CFE9 F028          	movff	fsr0l,??_ISR+3
 11529  0028D0  CFEA F029          	movff	fsr0h,??_ISR+4
 11530  0028D4  CFE1 F02A          	movff	fsr1l,??_ISR+5
 11531  0028D8  CFE2 F02B          	movff	fsr1h,??_ISR+6
 11532  0028DC  CFD9 F02C          	movff	fsr2l,??_ISR+7
 11533  0028E0  CFDA F02D          	movff	fsr2h,??_ISR+8
 11534  0028E4  CFF3 F02E          	movff	prodl,??_ISR+9
 11535  0028E8  CFF4 F02F          	movff	prodh,??_ISR+10
 11536  0028EC  CFF6 F030          	movff	tblptrl,??_ISR+11
 11537  0028F0  CFF7 F031          	movff	tblptrh,??_ISR+12
 11538  0028F4  CFF8 F032          	movff	tblptru,??_ISR+13
 11539  0028F8  CFF5 F033          	movff	tablat,??_ISR+14
 11540                           
 11541                           ;main.c: 1037: if (INT1IF){
 11542  0028FC  A0F0               	btfss	intcon3,0,c	;volatile
 11543  0028FE  D015               	goto	i2l5853
 11544                           
 11545                           ;main.c: 1038: unsigned char keypress = (PORTB & 0xF0) >> 4;
 11546  002900  3881               	swapf	3969,w,c	;volatile
 11547  002902  0B0F               	andlw	15
 11548  002904  0B0F               	andlw	15
 11549  002906  6E34               	movwf	ISR@keypress,c
 11550                           
 11551                           ;main.c: 1039: keypressed('4', '6', keys[keypress]);
 11552  002908  0E36               	movlw	54
 11553  00290A  6E21               	movwf	keypressed@right,c
 11554  00290C  5034               	movf	ISR@keypress,w,c
 11555  00290E  0D01               	mullw	1
 11556  002910  0E87               	movlw	low _keys
 11557  002912  24F3               	addwf	prodl,w,c
 11558  002914  6EF6               	movwf	tblptrl,c
 11559  002916  0EFD               	movlw	high _keys
 11560  002918  20F4               	addwfc	prodh,w,c
 11561  00291A  6EF7               	movwf	tblptrh,c
 11562  00291C                     	if	0	;There are less than 3 active tblptr bytes
 11563  00291C                     	endif
 11564  00291C  0008               	tblrd		*
 11565  00291E  CFF5 F022          	movff	tablat,keypressed@key
 11566  002922  0E34               	movlw	52
 11567  002924  ECEA  F016         	call	_keypressed
 11568                           
 11569                           ;main.c: 1040: INT1IF = 0;
 11570  002928  90F0               	bcf	intcon3,0,c	;volatile
 11571  00292A                     i2l5853:
 11572                           
 11573                           ;main.c: 1041: }
 11574                           ;main.c: 1042: if (screenMode == 1 && TMR0IF){
 11575  00292A  0100               	movlb	0	; () banked
 11576  00292C  05FA               	decf	_screenMode& (0+255),w,b
 11577  00292E  B4D8               	btfsc	status,2,c
 11578                           
 11579                           ; BSR set to: 0
 11580  002930  A4F2               	btfss	intcon,2,c	;volatile
 11581  002932  D04B               	goto	i2l5889
 11582                           
 11583                           ; BSR set to: 0
 11584                           ;main.c: 1043: TMR0IF = 0;
 11585  002934  94F2               	bcf	intcon,2,c	;volatile
 11586                           
 11587                           ; BSR set to: 0
 11588                           ;main.c: 1044: TMR0 = 55770;
 11589  002936  0ED9               	movlw	217
 11590  002938  6ED7               	movwf	4055,c	;volatile
 11591  00293A  0EDA               	movlw	218
 11592  00293C  6ED6               	movwf	4054,c	;volatile
 11593                           
 11594                           ; BSR set to: 0
 11595                           ;main.c: 1045: opTimer++;
 11596  00293E  2A51               	incf	_opTimer,f,c
 11597                           
 11598                           ; BSR set to: 0
 11599                           ;main.c: 1046: min = opTimer / 60;
 11600  002940  C051  F001         	movff	_opTimer,i2___awdiv@dividend
 11601  002944  6A02               	clrf	i2___awdiv@dividend+1,c
 11602  002946  0E00               	movlw	0
 11603  002948  6E04               	movwf	i2___awdiv@divisor+1,c
 11604  00294A  0E3C               	movlw	60
 11605  00294C  6E03               	movwf	i2___awdiv@divisor,c
 11606  00294E  EC80  F018         	call	i2___awdiv	;wreg free
 11607  002952  5001               	movf	?i2___awdiv,w,c
 11608  002954  0100               	movlb	0	; () banked
 11609  002956  6FE5               	movwf	_min& (0+255),b
 11610                           
 11611                           ; BSR set to: 0
 11612                           ;main.c: 1047: sec = opTimer % 60;
 11613  002958  C051  F001         	movff	_opTimer,i2___awmod@dividend
 11614  00295C  6A02               	clrf	i2___awmod@dividend+1,c
 11615  00295E  0E00               	movlw	0
 11616  002960  6E04               	movwf	i2___awmod@divisor+1,c
 11617  002962  0E3C               	movlw	60
 11618  002964  6E03               	movwf	i2___awmod@divisor,c
 11619  002966  ECFE  F018         	call	i2___awmod	;wreg free
 11620  00296A  5001               	movf	?i2___awmod,w,c
 11621  00296C  0100               	movlb	0	; () banked
 11622  00296E  6FEB               	movwf	_sec& (0+255),b
 11623                           
 11624                           ; BSR set to: 0
 11625                           ;main.c: 1048: lcdInst(0b10000000);;
 11626  002970  0E80               	movlw	128
 11627  002972  ECFB  F01B         	call	i2_lcdInst
 11628                           
 11629                           ;main.c: 1049: printf("RUNNING: %02d:%02d   ", min, sec);
 11630  002976  0E36               	movlw	low STR_39
 11631  002978  6E0D               	movwf	i2printf@f,c
 11632  00297A  0EFE               	movlw	high STR_39
 11633  00297C  6E0E               	movwf	i2printf@f+1,c
 11634  00297E  C0E5  F00F         	movff	_min,?i2_printf+2
 11635  002982  6A10               	clrf	?i2_printf+3,c
 11636  002984  C0EB  F011         	movff	_sec,?i2_printf+4
 11637  002988  6A12               	clrf	?i2_printf+5,c
 11638  00298A  EC5E  F011         	call	i2_printf	;wreg free
 11639                           
 11640                           ;main.c: 1051: if (opTimer >= 180)
 11641  00298E  0EB3               	movlw	179
 11642  002990  6451               	cpfsgt	_opTimer,c
 11643  002992  D002               	goto	i2l5875
 11644                           
 11645                           ;main.c: 1052: stopOperation();
 11646  002994  ECE4  F012         	call	i2_stopOperation	;wreg free
 11647  002998                     i2l5875:
 11648                           
 11649                           ;main.c: 1054: if (!sorting){
 11650  002998  5053               	movf	_sorting,w,c
 11651  00299A  A4D8               	btfss	status,2,c
 11652  00299C  D013               	goto	i2l5887
 11653                           
 11654                           ;main.c: 1055: if (ADRES > 50)
 11655  00299E  50C4               	movf	4036,w,c	;volatile
 11656  0029A0  E104               	bnz	i2u545_40
 11657  0029A2  0E33               	movlw	51
 11658  0029A4  5CC3               	subwf	4035,w,c	;volatile
 11659  0029A6  A0D8               	btfss	status,0,c
 11660  0029A8  D003               	goto	i2l5881
 11661  0029AA                     i2u545_40:
 11662                           
 11663                           ;main.c: 1056: doneTimer++;
 11664  0029AA  0100               	movlb	0	; () banked
 11665  0029AC  2BE3               	incf	_doneTimer& (0+255),f,b
 11666  0029AE  D003               	goto	i2l5883
 11667  0029B0                     i2l5881:
 11668                           
 11669                           ;main.c: 1057: else
 11670                           ;main.c: 1058: doneTimer = 0;
 11671  0029B0  0E00               	movlw	0
 11672  0029B2  0100               	movlb	0	; () banked
 11673  0029B4  6FE3               	movwf	_doneTimer& (0+255),b
 11674  0029B6                     i2l5883:
 11675                           
 11676                           ; BSR set to: 0
 11677                           ;main.c: 1059: if (doneTimer >= 10)
 11678  0029B6  0E09               	movlw	9
 11679  0029B8  0100               	movlb	0	; () banked
 11680  0029BA  65E3               	cpfsgt	_doneTimer& (0+255),b
 11681  0029BC  D006               	goto	i2l5889
 11682                           
 11683                           ; BSR set to: 0
 11684                           ;main.c: 1060: stopOperation();
 11685  0029BE  ECE4  F012         	call	i2_stopOperation	;wreg free
 11686                           
 11687                           ;main.c: 1062: }
 11688  0029C2  D003               	goto	i2l5889
 11689  0029C4                     i2l5887:
 11690                           
 11691                           ;main.c: 1063: else
 11692                           ;main.c: 1064: doneTimer = 0;
 11693  0029C4  0E00               	movlw	0
 11694  0029C6  0100               	movlb	0	; () banked
 11695  0029C8  6FE3               	movwf	_doneTimer& (0+255),b
 11696  0029CA                     i2l5889:
 11697                           
 11698                           ;main.c: 1065: }
 11699                           ;main.c: 1066: if (screenMode == 1 && TMR1IF){
 11700  0029CA  0100               	movlb	0	; () banked
 11701  0029CC  05FA               	decf	_screenMode& (0+255),w,b
 11702  0029CE  B4D8               	btfsc	status,2,c
 11703                           
 11704                           ; BSR set to: 0
 11705  0029D0  A09E               	btfss	3998,0,c	;volatile
 11706  0029D2  D0BD               	goto	i2l6011
 11707                           
 11708                           ; BSR set to: 0
 11709                           ;main.c: 1067: TMR1IF = 0;
 11710  0029D4  909E               	bcf	3998,0,c	;volatile
 11711                           
 11712                           ; BSR set to: 0
 11713                           ;main.c: 1068: TMR1 = 60535;
 11714  0029D6  0EEC               	movlw	236
 11715  0029D8  6ECF               	movwf	4047,c	;volatile
 11716  0029DA  0E77               	movlw	119
 11717  0029DC  6ECE               	movwf	4046,c	;volatile
 11718                           
 11719                           ; BSR set to: 0
 11720                           ;main.c: 1070: if (count_2ms)
 11721  0029DE  504F               	movf	_count_2ms,w,c
 11722  0029E0  1050               	iorwf	_count_2ms+1,w,c
 11723  0029E2  B4D8               	btfsc	status,2,c
 11724  0029E4  D003               	goto	i2l610
 11725                           
 11726                           ; BSR set to: 0
 11727                           ;main.c: 1071: count_2ms--;
 11728  0029E6  064F               	decf	_count_2ms,f,c
 11729  0029E8  A0D8               	btfss	status,0,c
 11730  0029EA  0650               	decf	_count_2ms+1,f,c
 11731  0029EC                     i2l610:
 11732                           
 11733                           ; BSR set to: 0
 11734                           ;main.c: 1072: solOnTimer++;
 11735  0029EC  2A52               	incf	_solOnTimer,f,c
 11736                           
 11737                           ; BSR set to: 0
 11738                           ;main.c: 1073: if (solOnTimer >= 150){
 11739  0029EE  0E95               	movlw	149
 11740  0029F0  6452               	cpfsgt	_solOnTimer,c
 11741  0029F2  D00D               	goto	i2l5907
 11742                           
 11743                           ; BSR set to: 0
 11744                           ;main.c: 1074: solOnTimer = 0;
 11745  0029F4  0E00               	movlw	0
 11746  0029F6  6E52               	movwf	_solOnTimer,c
 11747                           
 11748                           ; BSR set to: 0
 11749                           ;main.c: 1075: LATBbits.LB0 = !LATBbits.LB0;;
 11750  0029F8  B08A               	btfsc	3978,0,c	;volatile
 11751  0029FA  D003               	goto	i2u551_40
 11752  0029FC  6A25               	clrf	??_ISR& (0+255),c
 11753  0029FE  2A25               	incf	??_ISR& (0+255),f,c
 11754  002A00  D001               	goto	i2u552_48
 11755  002A02                     i2u551_40:
 11756  002A02  6A25               	clrf	??_ISR& (0+255),c
 11757  002A04                     i2u552_48:
 11758  002A04  508A               	movf	3978,w,c	;volatile
 11759  002A06  1825               	xorwf	??_ISR,w,c
 11760  002A08  0BFE               	andlw	-2
 11761  002A0A  1825               	xorwf	??_ISR,w,c
 11762  002A0C  6E8A               	movwf	3978,c	;volatile
 11763  002A0E                     i2l5907:
 11764                           
 11765                           ;main.c: 1076: }
 11766                           ;main.c: 1077: if (plat1Left){
 11767  002A0E  0100               	movlb	0	; () banked
 11768  002A10  51CF               	movf	_plat1Left& (0+255),w,b
 11769  002A12  0100               	movlb	0	; () banked
 11770  002A14  11D0               	iorwf	(_plat1Left+1)& (0+255),w,b
 11771  002A16  B4D8               	btfsc	status,2,c
 11772  002A18  D022               	goto	i2l5933
 11773                           
 11774                           ; BSR set to: 0
 11775                           ;main.c: 1078: if (step1 == 1){
 11776  002A1A  0454               	decf	_step1,w,c
 11777  002A1C  A4D8               	btfss	status,2,c
 11778  002A1E  D002               	goto	i2l5913
 11779                           
 11780                           ; BSR set to: 0
 11781                           ;main.c: 1079: LATCbits.LC5 = 1;;
 11782  002A20  8A8B               	bsf	3979,5,c	;volatile
 11783                           
 11784                           ;main.c: 1080: LATCbits.LC6 = 0;;
 11785  002A22  9C8B               	bcf	3979,6,c	;volatile
 11786  002A24                     i2l5913:
 11787                           
 11788                           ; BSR set to: 0
 11789                           ;main.c: 1081: }
 11790                           ;main.c: 1082: if (step1 == 2){
 11791  002A24  0E02               	movlw	2
 11792  002A26  1854               	xorwf	_step1,w,c
 11793  002A28  A4D8               	btfss	status,2,c
 11794  002A2A  D002               	goto	i2l5917
 11795                           
 11796                           ; BSR set to: 0
 11797                           ;main.c: 1083: LATCbits.LC1 = 0;;
 11798  002A2C  928B               	bcf	3979,1,c	;volatile
 11799                           
 11800                           ;main.c: 1084: LATCbits.LC2 = 1;;
 11801  002A2E  848B               	bsf	3979,2,c	;volatile
 11802  002A30                     i2l5917:
 11803                           
 11804                           ; BSR set to: 0
 11805                           ;main.c: 1085: }
 11806                           ;main.c: 1086: if (step1 == 3){
 11807  002A30  0E03               	movlw	3
 11808  002A32  1854               	xorwf	_step1,w,c
 11809  002A34  A4D8               	btfss	status,2,c
 11810  002A36  D002               	goto	i2l5921
 11811                           
 11812                           ; BSR set to: 0
 11813                           ;main.c: 1087: LATCbits.LC5 = 0;;
 11814  002A38  9A8B               	bcf	3979,5,c	;volatile
 11815                           
 11816                           ;main.c: 1088: LATCbits.LC6 = 1;;
 11817  002A3A  8C8B               	bsf	3979,6,c	;volatile
 11818  002A3C                     i2l5921:
 11819                           
 11820                           ; BSR set to: 0
 11821                           ;main.c: 1089: }
 11822                           ;main.c: 1090: if (step1 == 4){
 11823  002A3C  0E04               	movlw	4
 11824  002A3E  1854               	xorwf	_step1,w,c
 11825  002A40  A4D8               	btfss	status,2,c
 11826  002A42  D002               	goto	i2l5925
 11827                           
 11828                           ; BSR set to: 0
 11829                           ;main.c: 1091: LATCbits.LC1 = 1;;
 11830  002A44  828B               	bsf	3979,1,c	;volatile
 11831                           
 11832                           ;main.c: 1092: LATCbits.LC2 = 0;;
 11833  002A46  948B               	bcf	3979,2,c	;volatile
 11834  002A48                     i2l5925:
 11835                           
 11836                           ; BSR set to: 0
 11837                           ;main.c: 1093: }
 11838                           ;main.c: 1094: plat1Left--;
 11839  002A48  0100               	movlb	0	; () banked
 11840  002A4A  07CF               	decf	_plat1Left& (0+255),f,b
 11841  002A4C  A0D8               	btfss	status,0,c
 11842  002A4E  07D0               	decf	(_plat1Left+1)& (0+255),f,b
 11843                           
 11844                           ; BSR set to: 0
 11845                           ;main.c: 1095: if (step1>=4)
 11846  002A50  0E03               	movlw	3
 11847  002A52  6454               	cpfsgt	_step1,c
 11848  002A54  D003               	goto	i2l5931
 11849                           
 11850                           ; BSR set to: 0
 11851                           ;main.c: 1096: step1 = 1;
 11852  002A56  0E01               	movlw	1
 11853  002A58  6E54               	movwf	_step1,c
 11854  002A5A  D001               	goto	i2l5933
 11855  002A5C                     i2l5931:
 11856                           
 11857                           ; BSR set to: 0
 11858                           ;main.c: 1097: else
 11859                           ;main.c: 1098: step1++;
 11860  002A5C  2A54               	incf	_step1,f,c
 11861  002A5E                     i2l5933:
 11862                           
 11863                           ; BSR set to: 0
 11864                           ;main.c: 1099: }
 11865                           ;main.c: 1100: if (plat1Right){
 11866  002A5E  0100               	movlb	0	; () banked
 11867  002A60  51D1               	movf	_plat1Right& (0+255),w,b
 11868  002A62  0100               	movlb	0	; () banked
 11869  002A64  11D2               	iorwf	(_plat1Right+1)& (0+255),w,b
 11870  002A66  B4D8               	btfsc	status,2,c
 11871  002A68  D022               	goto	i2l5959
 11872                           
 11873                           ; BSR set to: 0
 11874                           ;main.c: 1101: if (step1 == 4){
 11875  002A6A  0E04               	movlw	4
 11876  002A6C  1854               	xorwf	_step1,w,c
 11877  002A6E  A4D8               	btfss	status,2,c
 11878  002A70  D002               	goto	i2l5939
 11879                           
 11880                           ; BSR set to: 0
 11881                           ;main.c: 1102: LATCbits.LC5 = 0;;
 11882  002A72  9A8B               	bcf	3979,5,c	;volatile
 11883                           
 11884                           ;main.c: 1103: LATCbits.LC6 = 1;;
 11885  002A74  8C8B               	bsf	3979,6,c	;volatile
 11886  002A76                     i2l5939:
 11887                           
 11888                           ; BSR set to: 0
 11889                           ;main.c: 1104: }
 11890                           ;main.c: 1105: if (step1 == 3){
 11891  002A76  0E03               	movlw	3
 11892  002A78  1854               	xorwf	_step1,w,c
 11893  002A7A  A4D8               	btfss	status,2,c
 11894  002A7C  D002               	goto	i2l5943
 11895                           
 11896                           ; BSR set to: 0
 11897                           ;main.c: 1106: LATCbits.LC1 = 0;;
 11898  002A7E  928B               	bcf	3979,1,c	;volatile
 11899                           
 11900                           ;main.c: 1107: LATCbits.LC2 = 1;;
 11901  002A80  848B               	bsf	3979,2,c	;volatile
 11902  002A82                     i2l5943:
 11903                           
 11904                           ; BSR set to: 0
 11905                           ;main.c: 1108: }
 11906                           ;main.c: 1109: if (step1 == 2){
 11907  002A82  0E02               	movlw	2
 11908  002A84  1854               	xorwf	_step1,w,c
 11909  002A86  A4D8               	btfss	status,2,c
 11910  002A88  D002               	goto	i2l5947
 11911                           
 11912                           ; BSR set to: 0
 11913                           ;main.c: 1110: LATCbits.LC5 = 1;;
 11914  002A8A  8A8B               	bsf	3979,5,c	;volatile
 11915                           
 11916                           ;main.c: 1111: LATCbits.LC6 = 0;;
 11917  002A8C  9C8B               	bcf	3979,6,c	;volatile
 11918  002A8E                     i2l5947:
 11919                           
 11920                           ; BSR set to: 0
 11921                           ;main.c: 1112: }
 11922                           ;main.c: 1113: if (step1 == 1){
 11923  002A8E  0454               	decf	_step1,w,c
 11924  002A90  A4D8               	btfss	status,2,c
 11925  002A92  D002               	goto	i2l5951
 11926                           
 11927                           ; BSR set to: 0
 11928                           ;main.c: 1114: LATCbits.LC1 = 1;;
 11929  002A94  828B               	bsf	3979,1,c	;volatile
 11930                           
 11931                           ;main.c: 1115: LATCbits.LC2 = 0;;
 11932  002A96  948B               	bcf	3979,2,c	;volatile
 11933  002A98                     i2l5951:
 11934                           
 11935                           ; BSR set to: 0
 11936                           ;main.c: 1116: }
 11937                           ;main.c: 1117: plat1Right--;
 11938  002A98  0100               	movlb	0	; () banked
 11939  002A9A  07D1               	decf	_plat1Right& (0+255),f,b
 11940  002A9C  A0D8               	btfss	status,0,c
 11941  002A9E  07D2               	decf	(_plat1Right+1)& (0+255),f,b
 11942                           
 11943                           ; BSR set to: 0
 11944                           ;main.c: 1118: if (step1<=1)
 11945  002AA0  0E02               	movlw	2
 11946  002AA2  6054               	cpfslt	_step1,c
 11947  002AA4  D003               	goto	i2l5957
 11948                           
 11949                           ; BSR set to: 0
 11950                           ;main.c: 1119: step1 = 4;
 11951  002AA6  0E04               	movlw	4
 11952  002AA8  6E54               	movwf	_step1,c
 11953  002AAA  D001               	goto	i2l5959
 11954  002AAC                     i2l5957:
 11955                           
 11956                           ; BSR set to: 0
 11957                           ;main.c: 1120: else
 11958                           ;main.c: 1121: step1--;
 11959  002AAC  0654               	decf	_step1,f,c
 11960  002AAE                     i2l5959:
 11961                           
 11962                           ; BSR set to: 0
 11963                           ;main.c: 1122: }
 11964                           ;main.c: 1123: if (plat2Left){
 11965  002AAE  0100               	movlb	0	; () banked
 11966  002AB0  51D3               	movf	_plat2Left& (0+255),w,b
 11967  002AB2  0100               	movlb	0	; () banked
 11968  002AB4  11D4               	iorwf	(_plat2Left+1)& (0+255),w,b
 11969  002AB6  B4D8               	btfsc	status,2,c
 11970  002AB8  D022               	goto	i2l5985
 11971                           
 11972                           ; BSR set to: 0
 11973                           ;main.c: 1124: if (step2 == 1){
 11974  002ABA  0455               	decf	_step2,w,c
 11975  002ABC  A4D8               	btfss	status,2,c
 11976  002ABE  D002               	goto	i2l5965
 11977                           
 11978                           ; BSR set to: 0
 11979                           ;main.c: 1125: LATAbits.LA4 = 1;;
 11980  002AC0  8889               	bsf	3977,4,c	;volatile
 11981                           
 11982                           ;main.c: 1126: LATEbits.LE1 = 0;;
 11983  002AC2  928D               	bcf	3981,1,c	;volatile
 11984  002AC4                     i2l5965:
 11985                           
 11986                           ; BSR set to: 0
 11987                           ;main.c: 1127: }
 11988                           ;main.c: 1128: if (step2 == 2){
 11989  002AC4  0E02               	movlw	2
 11990  002AC6  1855               	xorwf	_step2,w,c
 11991  002AC8  A4D8               	btfss	status,2,c
 11992  002ACA  D002               	goto	i2l5969
 11993                           
 11994                           ; BSR set to: 0
 11995                           ;main.c: 1129: LATCbits.LC0 = 0;;
 11996  002ACC  908B               	bcf	3979,0,c	;volatile
 11997                           
 11998                           ;main.c: 1130: LATEbits.LE2 = 1;;
 11999  002ACE  848D               	bsf	3981,2,c	;volatile
 12000  002AD0                     i2l5969:
 12001                           
 12002                           ; BSR set to: 0
 12003                           ;main.c: 1131: }
 12004                           ;main.c: 1132: if (step2 == 3){
 12005  002AD0  0E03               	movlw	3
 12006  002AD2  1855               	xorwf	_step2,w,c
 12007  002AD4  A4D8               	btfss	status,2,c
 12008  002AD6  D002               	goto	i2l5973
 12009                           
 12010                           ; BSR set to: 0
 12011                           ;main.c: 1133: LATAbits.LA4 = 0;;
 12012  002AD8  9889               	bcf	3977,4,c	;volatile
 12013                           
 12014                           ;main.c: 1134: LATEbits.LE1 = 1;;
 12015  002ADA  828D               	bsf	3981,1,c	;volatile
 12016  002ADC                     i2l5973:
 12017                           
 12018                           ; BSR set to: 0
 12019                           ;main.c: 1135: }
 12020                           ;main.c: 1136: if (step2 == 4){
 12021  002ADC  0E04               	movlw	4
 12022  002ADE  1855               	xorwf	_step2,w,c
 12023  002AE0  A4D8               	btfss	status,2,c
 12024  002AE2  D002               	goto	i2l5977
 12025                           
 12026                           ; BSR set to: 0
 12027                           ;main.c: 1137: LATCbits.LC0 = 1;;
 12028  002AE4  808B               	bsf	3979,0,c	;volatile
 12029                           
 12030                           ;main.c: 1138: LATEbits.LE2 = 0;;
 12031  002AE6  948D               	bcf	3981,2,c	;volatile
 12032  002AE8                     i2l5977:
 12033                           
 12034                           ; BSR set to: 0
 12035                           ;main.c: 1139: }
 12036                           ;main.c: 1140: plat2Left--;
 12037  002AE8  0100               	movlb	0	; () banked
 12038  002AEA  07D3               	decf	_plat2Left& (0+255),f,b
 12039  002AEC  A0D8               	btfss	status,0,c
 12040  002AEE  07D4               	decf	(_plat2Left+1)& (0+255),f,b
 12041                           
 12042                           ; BSR set to: 0
 12043                           ;main.c: 1141: if (step2>=4)
 12044  002AF0  0E03               	movlw	3
 12045  002AF2  6455               	cpfsgt	_step2,c
 12046  002AF4  D003               	goto	i2l5983
 12047                           
 12048                           ; BSR set to: 0
 12049                           ;main.c: 1142: step2 = 1;
 12050  002AF6  0E01               	movlw	1
 12051  002AF8  6E55               	movwf	_step2,c
 12052  002AFA  D001               	goto	i2l5985
 12053  002AFC                     i2l5983:
 12054                           
 12055                           ; BSR set to: 0
 12056                           ;main.c: 1143: else
 12057                           ;main.c: 1144: step2++;
 12058  002AFC  2A55               	incf	_step2,f,c
 12059  002AFE                     i2l5985:
 12060                           
 12061                           ; BSR set to: 0
 12062                           ;main.c: 1145: }
 12063                           ;main.c: 1146: if (plat2Right){
 12064  002AFE  0100               	movlb	0	; () banked
 12065  002B00  51D5               	movf	_plat2Right& (0+255),w,b
 12066  002B02  0100               	movlb	0	; () banked
 12067  002B04  11D6               	iorwf	(_plat2Right+1)& (0+255),w,b
 12068  002B06  B4D8               	btfsc	status,2,c
 12069  002B08  D022               	goto	i2l6011
 12070                           
 12071                           ; BSR set to: 0
 12072                           ;main.c: 1147: if (step2 == 4){
 12073  002B0A  0E04               	movlw	4
 12074  002B0C  1855               	xorwf	_step2,w,c
 12075  002B0E  A4D8               	btfss	status,2,c
 12076  002B10  D002               	goto	i2l5991
 12077                           
 12078                           ; BSR set to: 0
 12079                           ;main.c: 1148: LATAbits.LA4 = 0;;
 12080  002B12  9889               	bcf	3977,4,c	;volatile
 12081                           
 12082                           ;main.c: 1149: LATEbits.LE1 = 1;;
 12083  002B14  828D               	bsf	3981,1,c	;volatile
 12084  002B16                     i2l5991:
 12085                           
 12086                           ; BSR set to: 0
 12087                           ;main.c: 1150: }
 12088                           ;main.c: 1151: if (step2 == 3){
 12089  002B16  0E03               	movlw	3
 12090  002B18  1855               	xorwf	_step2,w,c
 12091  002B1A  A4D8               	btfss	status,2,c
 12092  002B1C  D002               	goto	i2l5995
 12093                           
 12094                           ; BSR set to: 0
 12095                           ;main.c: 1152: LATCbits.LC0 = 0;;
 12096  002B1E  908B               	bcf	3979,0,c	;volatile
 12097                           
 12098                           ;main.c: 1153: LATEbits.LE2 = 1;;
 12099  002B20  848D               	bsf	3981,2,c	;volatile
 12100  002B22                     i2l5995:
 12101                           
 12102                           ; BSR set to: 0
 12103                           ;main.c: 1154: }
 12104                           ;main.c: 1155: if (step2 == 2){
 12105  002B22  0E02               	movlw	2
 12106  002B24  1855               	xorwf	_step2,w,c
 12107  002B26  A4D8               	btfss	status,2,c
 12108  002B28  D002               	goto	i2l5999
 12109                           
 12110                           ; BSR set to: 0
 12111                           ;main.c: 1156: LATAbits.LA4 = 1;;
 12112  002B2A  8889               	bsf	3977,4,c	;volatile
 12113                           
 12114                           ;main.c: 1157: LATEbits.LE1 = 0;;
 12115  002B2C  928D               	bcf	3981,1,c	;volatile
 12116  002B2E                     i2l5999:
 12117                           
 12118                           ; BSR set to: 0
 12119                           ;main.c: 1158: }
 12120                           ;main.c: 1159: if (step2 == 1){
 12121  002B2E  0455               	decf	_step2,w,c
 12122  002B30  A4D8               	btfss	status,2,c
 12123  002B32  D002               	goto	i2l6003
 12124                           
 12125                           ; BSR set to: 0
 12126                           ;main.c: 1160: LATCbits.LC0 = 1;;
 12127  002B34  808B               	bsf	3979,0,c	;volatile
 12128                           
 12129                           ;main.c: 1161: LATEbits.LE2 = 0;;
 12130  002B36  948D               	bcf	3981,2,c	;volatile
 12131  002B38                     i2l6003:
 12132                           
 12133                           ; BSR set to: 0
 12134                           ;main.c: 1162: }
 12135                           ;main.c: 1163: plat2Right--;
 12136  002B38  0100               	movlb	0	; () banked
 12137  002B3A  07D5               	decf	_plat2Right& (0+255),f,b
 12138  002B3C  A0D8               	btfss	status,0,c
 12139  002B3E  07D6               	decf	(_plat2Right+1)& (0+255),f,b
 12140                           
 12141                           ; BSR set to: 0
 12142                           ;main.c: 1164: if (step2<=1)
 12143  002B40  0E02               	movlw	2
 12144  002B42  6055               	cpfslt	_step2,c
 12145  002B44  D003               	goto	i2l6009
 12146                           
 12147                           ; BSR set to: 0
 12148                           ;main.c: 1165: step2 = 4;
 12149  002B46  0E04               	movlw	4
 12150  002B48  6E55               	movwf	_step2,c
 12151  002B4A  D001               	goto	i2l6011
 12152  002B4C                     i2l6009:
 12153                           
 12154                           ; BSR set to: 0
 12155                           ;main.c: 1166: else
 12156                           ;main.c: 1167: step2--;
 12157  002B4C  0655               	decf	_step2,f,c
 12158  002B4E                     i2l6011:
 12159                           
 12160                           ; BSR set to: 0
 12161                           ;main.c: 1168: }
 12162                           ;main.c: 1169: }
 12163                           ;main.c: 1170: if (screenMode == 1 && TMR2IF){
 12164  002B4E  0100               	movlb	0	; () banked
 12165  002B50  05FA               	decf	_screenMode& (0+255),w,b
 12166  002B52  B4D8               	btfsc	status,2,c
 12167                           
 12168                           ; BSR set to: 0
 12169  002B54  A29E               	btfss	3998,1,c	;volatile
 12170  002B56  D010               	goto	i2l641
 12171                           
 12172                           ; BSR set to: 0
 12173                           ;main.c: 1171: TMR2IF = 0;
 12174  002B58  929E               	bcf	3998,1,c	;volatile
 12175                           
 12176                           ; BSR set to: 0
 12177                           ;main.c: 1172: TMR2 = 155;
 12178  002B5A  0E9B               	movlw	155
 12179  002B5C  6ECC               	movwf	4044,c	;volatile
 12180                           
 12181                           ; BSR set to: 0
 12182                           ;main.c: 1173: LATBbits.LB2 = !LATBbits.LB2;;
 12183  002B5E  B48A               	btfsc	3978,2,c	;volatile
 12184  002B60  D003               	goto	i2u579_40
 12185  002B62  6A25               	clrf	??_ISR& (0+255),c
 12186  002B64  2A25               	incf	??_ISR& (0+255),f,c
 12187  002B66  D001               	goto	i2u580_48
 12188  002B68                     i2u579_40:
 12189  002B68  6A25               	clrf	??_ISR& (0+255),c
 12190  002B6A                     i2u580_48:
 12191  002B6A  4625               	rlncf	??_ISR,f,c
 12192  002B6C  4625               	rlncf	??_ISR,f,c
 12193  002B6E  508A               	movf	3978,w,c	;volatile
 12194  002B70  1825               	xorwf	??_ISR,w,c
 12195  002B72  0BFB               	andlw	-5
 12196  002B74  1825               	xorwf	??_ISR,w,c
 12197  002B76  6E8A               	movwf	3978,c	;volatile
 12198  002B78                     i2l641:
 12199  002B78  C033  FFF5         	movff	??_ISR+14,tablat
 12200  002B7C  C032  FFF8         	movff	??_ISR+13,tblptru
 12201  002B80  C031  FFF7         	movff	??_ISR+12,tblptrh
 12202  002B84  C030  FFF6         	movff	??_ISR+11,tblptrl
 12203  002B88  C02F  FFF4         	movff	??_ISR+10,prodh
 12204  002B8C  C02E  FFF3         	movff	??_ISR+9,prodl
 12205  002B90  C02D  FFDA         	movff	??_ISR+8,fsr2h
 12206  002B94  C02C  FFD9         	movff	??_ISR+7,fsr2l
 12207  002B98  C02B  FFE2         	movff	??_ISR+6,fsr1h
 12208  002B9C  C02A  FFE1         	movff	??_ISR+5,fsr1l
 12209  002BA0  C029  FFEA         	movff	??_ISR+4,fsr0h
 12210  002BA4  C028  FFE9         	movff	??_ISR+3,fsr0l
 12211  002BA8  C027  FFFB         	movff	??_ISR+2,pclatu
 12212  002BAC  C026  FFFA         	movff	??_ISR+1,pclath
 12213  002BB0  9256               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 12214  002BB2  0011               	retfie		f
 12215  002BB4                     __end_of_ISR:
 12216                           	opt stack 0
 12217                           pclatu	equ	0xFFB
 12218                           pclath	equ	0xFFA
 12219                           tblptru	equ	0xFF8
 12220                           tblptrh	equ	0xFF7
 12221                           tblptrl	equ	0xFF6
 12222                           tablat	equ	0xFF5
 12223                           prodh	equ	0xFF4
 12224                           prodl	equ	0xFF3
 12225                           intcon	equ	0xFF2
 12226                           intcon2	equ	0xFF1
 12227                           intcon3	equ	0xFF0
 12228                           postinc0	equ	0xFEE
 12229                           fsr0h	equ	0xFEA
 12230                           fsr0l	equ	0xFE9
 12231                           wreg	equ	0xFE8
 12232                           postdec1	equ	0xFE5
 12233                           plusw1	equ	0xFE3
 12234                           fsr1h	equ	0xFE2
 12235                           fsr1l	equ	0xFE1
 12236                           indf2	equ	0xFDF
 12237                           postinc2	equ	0xFDE
 12238                           postdec2	equ	0xFDD
 12239                           plusw2	equ	0xFDB
 12240                           fsr2h	equ	0xFDA
 12241                           fsr2l	equ	0xFD9
 12242                           status	equ	0xFD8
 12243                           
 12244 ;; *************** function _keypressed *****************
 12245 ;; Defined at:
 12246 ;;		line 509 in file "../main.c"
 12247 ;; Parameters:    Size  Location     Type
 12248 ;;  left            1    wreg     unsigned char 
 12249 ;;  right           1   32[COMRAM] unsigned char 
 12250 ;;  key             1   33[COMRAM] unsigned char 
 12251 ;; Auto vars:     Size  Location     Type
 12252 ;;  left            1   34[COMRAM] unsigned char 
 12253 ;;  i               1   35[COMRAM] unsigned char 
 12254 ;; Return value:  Size  Location     Type
 12255 ;;                  1    wreg      void 
 12256 ;; Registers used:
 12257 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12258 ;; Tracked objects:
 12259 ;;		On entry : 0/0
 12260 ;;		On exit  : 0/0
 12261 ;;		Unchanged: 0/0
 12262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12263 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12264 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12265 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12266 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12267 ;;Total ram usage:        4 bytes
 12268 ;; Hardware stack levels used:    1
 12269 ;; Hardware stack levels required when called:    3
 12270 ;; This function calls:
 12271 ;;		i2_I2C_Master_Read
 12272 ;;		i2_I2C_Master_Start
 12273 ;;		i2_I2C_Master_Stop
 12274 ;;		i2_I2C_Master_Write
 12275 ;;		i2_lcdInst
 12276 ;;		i2_printf
 12277 ;;		i2_stopOperation
 12278 ;; This function is called by:
 12279 ;;		_ISR
 12280 ;; This function uses a non-reentrant model
 12281 ;;
 12282                           
 12283                           	psect	text33
 12284  002DD4                     __ptext33:
 12285                           	opt stack 0
 12286  002DD4                     _keypressed:
 12287                           	opt stack 22
 12288                           
 12289                           ;incstack = 0
 12290                           ;keypressed@left stored from wreg
 12291  002DD4  6E23               	movwf	keypressed@left,c
 12292                           
 12293                           ;main.c: 510: if (key == '*'){
 12294  002DD6  0E2A               	movlw	42
 12295  002DD8  1822               	xorwf	keypressed@key,w,c
 12296  002DDA  A4D8               	btfss	status,2,c
 12297  002DDC  D054               	goto	i2l5249
 12298                           
 12299                           ;main.c: 512: if(screenMode == 2){
 12300  002DDE  0E02               	movlw	2
 12301  002DE0  0100               	movlb	0	; () banked
 12302  002DE2  19FA               	xorwf	_screenMode& (0+255),w,b
 12303  002DE4  A4D8               	btfss	status,2,c
 12304  002DE6  D047               	goto	i2l5245
 12305                           
 12306                           ; BSR set to: 0
 12307                           ;main.c: 513: screenMode = 1;
 12308  002DE8  0E01               	movlw	1
 12309  002DEA  0100               	movlb	0	; () banked
 12310  002DEC  6FFA               	movwf	_screenMode& (0+255),b
 12311                           
 12312                           ; BSR set to: 0
 12313                           ;main.c: 514: T0CONbits.TMR0ON = 1;
 12314  002DEE  8ED5               	bsf	4053,7,c	;volatile
 12315                           
 12316                           ; BSR set to: 0
 12317                           ;main.c: 515: T1CONbits.TMR1ON = 1;
 12318  002DF0  80CD               	bsf	4045,0,c	;volatile
 12319                           
 12320                           ; BSR set to: 0
 12321                           ;main.c: 516: TMR2ON = 1;
 12322  002DF2  84CA               	bsf	4042,2,c	;volatile
 12323                           
 12324                           ;main.c: 517: startGear = 1;
 12325  002DF4  0E01               	movlw	1
 12326  002DF6  0100               	movlb	0	; () banked
 12327  002DF8  6FEC               	movwf	_startGear& (0+255),b
 12328                           
 12329                           ; BSR set to: 0
 12330                           ;main.c: 520: I2C_Master_Start();
 12331  002DFA  EC1B  F01C         	call	i2_I2C_Master_Start	;wreg free
 12332                           
 12333                           ;main.c: 521: I2C_Master_Write(0b11010000);
 12334  002DFE  0E00               	movlw	0
 12335  002E00  6E03               	movwf	i2I2C_Master_Write@d+1,c
 12336  002E02  0ED0               	movlw	208
 12337  002E04  6E02               	movwf	i2I2C_Master_Write@d,c
 12338  002E06  EC06  F01C         	call	i2_I2C_Master_Write	;wreg free
 12339                           
 12340                           ;main.c: 522: I2C_Master_Write(0x00);
 12341  002E0A  0E00               	movlw	0
 12342  002E0C  6E03               	movwf	i2I2C_Master_Write@d+1,c
 12343  002E0E  0E00               	movlw	0
 12344  002E10  6E02               	movwf	i2I2C_Master_Write@d,c
 12345  002E12  EC06  F01C         	call	i2_I2C_Master_Write	;wreg free
 12346                           
 12347                           ;main.c: 523: I2C_Master_Stop();
 12348  002E16  EC17  F01C         	call	i2_I2C_Master_Stop	;wreg free
 12349                           
 12350                           ;main.c: 525: I2C_Master_Start();
 12351  002E1A  EC1B  F01C         	call	i2_I2C_Master_Start	;wreg free
 12352                           
 12353                           ;main.c: 526: I2C_Master_Write(0b11010001);
 12354  002E1E  0E00               	movlw	0
 12355  002E20  6E03               	movwf	i2I2C_Master_Write@d+1,c
 12356  002E22  0ED1               	movlw	209
 12357  002E24  6E02               	movwf	i2I2C_Master_Write@d,c
 12358  002E26  EC06  F01C         	call	i2_I2C_Master_Write	;wreg free
 12359                           
 12360                           ;main.c: 527: for(unsigned char i=0;i<0x06;i++){
 12361  002E2A  0E00               	movlw	0
 12362  002E2C  6E24               	movwf	keypressed@i,c
 12363  002E2E                     i2l5229:
 12364  002E2E  0E05               	movlw	5
 12365  002E30  6424               	cpfsgt	keypressed@i,c
 12366  002E32  D001               	goto	i2l5233
 12367  002E34  D00E               	goto	i2l5239
 12368  002E36                     i2l5233:
 12369                           
 12370                           ;main.c: 528: lastRunRTC[i] = I2C_Master_Read(1);
 12371  002E36  5024               	movf	keypressed@i,w,c
 12372  002E38  0D01               	mullw	1
 12373  002E3A  0EC8               	movlw	low _lastRunRTC
 12374  002E3C  24F3               	addwf	prodl,w,c
 12375  002E3E  6ED9               	movwf	fsr2l,c
 12376  002E40  0E00               	movlw	high _lastRunRTC
 12377  002E42  20F4               	addwfc	prodh,w,c
 12378  002E44  6EDA               	movwf	fsr2h,c
 12379  002E46  0E01               	movlw	1
 12380  002E48  EC4D  F01B         	call	i2_I2C_Master_Read
 12381  002E4C  6EDF               	movwf	indf2,c
 12382  002E4E  2A24               	incf	keypressed@i,f,c
 12383  002E50  D7EE               	goto	i2l5229
 12384  002E52                     i2l5239:
 12385                           
 12386                           ;main.c: 529: }
 12387                           ;main.c: 530: lastRunRTC[6] = I2C_Master_Read(0);
 12388  002E52  0E00               	movlw	0
 12389  002E54  EC4D  F01B         	call	i2_I2C_Master_Read
 12390  002E58  0100               	movlb	0	; () banked
 12391  002E5A  6FCE               	movwf	(_lastRunRTC+6)& (0+255),b
 12392                           
 12393                           ;main.c: 531: I2C_Master_Stop();
 12394  002E5C  EC17  F01C         	call	i2_I2C_Master_Stop	;wreg free
 12395                           
 12396                           ;main.c: 533: lcdInst(0b10000000);;
 12397  002E60  0E80               	movlw	128
 12398  002E62  ECFB  F01B         	call	i2_lcdInst
 12399                           
 12400                           ;main.c: 534: printf("RUNNING: 00:00  ");
 12401  002E66  0E43               	movlw	low STR_34
 12402  002E68  6E0D               	movwf	i2printf@f,c
 12403  002E6A  0EFF               	movlw	high STR_34
 12404  002E6C  6E0E               	movwf	i2printf@f+1,c
 12405  002E6E  EC5E  F011         	call	i2_printf	;wreg free
 12406                           
 12407                           ;main.c: 535: LATBbits.LB0 = 1;;
 12408  002E72  808A               	bsf	3978,0,c	;volatile
 12409                           
 12410                           ;main.c: 536: }
 12411  002E74  0012               	return	
 12412  002E76                     i2l5245:
 12413                           
 12414                           ;main.c: 537: else if (screenMode == 0)
 12415  002E76  0100               	movlb	0	; () banked
 12416  002E78  51FA               	movf	_screenMode& (0+255),w,b
 12417  002E7A  A4D8               	btfss	status,2,c
 12418  002E7C  0012               	return	
 12419                           
 12420                           ; BSR set to: 0
 12421                           ;main.c: 538: screenMode = 2;
 12422  002E7E  0E02               	movlw	2
 12423  002E80  0100               	movlb	0	; () banked
 12424  002E82  6FFA               	movwf	_screenMode& (0+255),b
 12425                           
 12426                           ; BSR set to: 0
 12427                           ;main.c: 539: }
 12428                           
 12429                           ; BSR set to: 0
 12430  002E84  0012               	return	
 12431  002E86                     i2l5249:
 12432                           
 12433                           ;main.c: 540: else if (screenMode == 1){
 12434  002E86  0100               	movlb	0	; () banked
 12435  002E88  05FA               	decf	_screenMode& (0+255),w,b
 12436  002E8A  A4D8               	btfss	status,2,c
 12437  002E8C  D007               	goto	i2l5255
 12438                           
 12439                           ; BSR set to: 0
 12440                           ;main.c: 541: if (key == '#')
 12441  002E8E  0E23               	movlw	35
 12442  002E90  1822               	xorwf	keypressed@key,w,c
 12443  002E92  A4D8               	btfss	status,2,c
 12444  002E94  0012               	return	
 12445                           
 12446                           ; BSR set to: 0
 12447                           ;main.c: 543: stopOperation();
 12448  002E96  ECE4  F012         	call	i2_stopOperation	;wreg free
 12449                           
 12450                           ;main.c: 544: }
 12451  002E9A  0012               	return	
 12452  002E9C                     i2l5255:
 12453                           
 12454                           ;main.c: 545: else if (screenMode != 0){
 12455  002E9C  0100               	movlb	0	; () banked
 12456  002E9E  51FA               	movf	_screenMode& (0+255),w,b
 12457  002EA0  B4D8               	btfsc	status,2,c
 12458  002EA2  0012               	return	
 12459                           
 12460                           ; BSR set to: 0
 12461                           ;main.c: 546: if (key == right){
 12462  002EA4  5021               	movf	keypressed@right,w,c
 12463  002EA6  1822               	xorwf	keypressed@key,w,c
 12464  002EA8  A4D8               	btfss	status,2,c
 12465  002EAA  D00C               	goto	i2l5265
 12466                           
 12467                           ; BSR set to: 0
 12468                           ;main.c: 547: if (screenMode == 2)
 12469  002EAC  0E02               	movlw	2
 12470  002EAE  0100               	movlb	0	; () banked
 12471  002EB0  19FA               	xorwf	_screenMode& (0+255),w,b
 12472  002EB2  A4D8               	btfss	status,2,c
 12473  002EB4  D004               	goto	i2l5263
 12474                           
 12475                           ; BSR set to: 0
 12476                           ;main.c: 548: screenMode = 15;
 12477  002EB6  0E0F               	movlw	15
 12478  002EB8  0100               	movlb	0	; () banked
 12479  002EBA  6FFA               	movwf	_screenMode& (0+255),b
 12480  002EBC  0012               	return	
 12481  002EBE                     i2l5263:
 12482                           
 12483                           ; BSR set to: 0
 12484                           ;main.c: 549: else
 12485                           ;main.c: 550: screenMode--;
 12486  002EBE  0100               	movlb	0	; () banked
 12487  002EC0  07FA               	decf	_screenMode& (0+255),f,b
 12488                           
 12489                           ; BSR set to: 0
 12490                           ;main.c: 551: }
 12491  002EC2  0012               	return	
 12492  002EC4                     i2l5265:
 12493                           
 12494                           ; BSR set to: 0
 12495                           ;main.c: 552: else if (key == left){
 12496  002EC4  5023               	movf	keypressed@left,w,c
 12497  002EC6  1822               	xorwf	keypressed@key,w,c
 12498  002EC8  A4D8               	btfss	status,2,c
 12499  002ECA  0012               	return	
 12500                           
 12501                           ; BSR set to: 0
 12502                           ;main.c: 553: if (screenMode == 15)
 12503  002ECC  0E0F               	movlw	15
 12504  002ECE  0100               	movlb	0	; () banked
 12505  002ED0  19FA               	xorwf	_screenMode& (0+255),w,b
 12506  002ED2  A4D8               	btfss	status,2,c
 12507  002ED4  D004               	goto	i2l5271
 12508                           
 12509                           ; BSR set to: 0
 12510                           ;main.c: 554: screenMode = 2;
 12511  002ED6  0E02               	movlw	2
 12512  002ED8  0100               	movlb	0	; () banked
 12513  002EDA  6FFA               	movwf	_screenMode& (0+255),b
 12514  002EDC  0012               	return	
 12515  002EDE                     i2l5271:
 12516                           
 12517                           ; BSR set to: 0
 12518                           ;main.c: 555: else
 12519                           ;main.c: 556: screenMode++;
 12520  002EDE  0100               	movlb	0	; () banked
 12521  002EE0  2BFA               	incf	_screenMode& (0+255),f,b
 12522                           
 12523                           ; BSR set to: 0
 12524                           
 12525                           ; BSR set to: 0
 12526                           
 12527                           ; BSR set to: 0
 12528                           
 12529                           ; BSR set to: 0
 12530                           
 12531                           ; BSR set to: 0
 12532  002EE2  0012               	return	
 12533  002EE4                     __end_of_keypressed:
 12534                           	opt stack 0
 12535                           pclatu	equ	0xFFB
 12536                           pclath	equ	0xFFA
 12537                           tblptru	equ	0xFF8
 12538                           tblptrh	equ	0xFF7
 12539                           tblptrl	equ	0xFF6
 12540                           tablat	equ	0xFF5
 12541                           prodh	equ	0xFF4
 12542                           prodl	equ	0xFF3
 12543                           intcon	equ	0xFF2
 12544                           intcon2	equ	0xFF1
 12545                           intcon3	equ	0xFF0
 12546                           postinc0	equ	0xFEE
 12547                           fsr0h	equ	0xFEA
 12548                           fsr0l	equ	0xFE9
 12549                           wreg	equ	0xFE8
 12550                           postdec1	equ	0xFE5
 12551                           plusw1	equ	0xFE3
 12552                           fsr1h	equ	0xFE2
 12553                           fsr1l	equ	0xFE1
 12554                           indf2	equ	0xFDF
 12555                           postinc2	equ	0xFDE
 12556                           postdec2	equ	0xFDD
 12557                           plusw2	equ	0xFDB
 12558                           fsr2h	equ	0xFDA
 12559                           fsr2l	equ	0xFD9
 12560                           status	equ	0xFD8
 12561                           
 12562 ;; *************** function i2_stopOperation *****************
 12563 ;; Defined at:
 12564 ;;		line 569 in file "../main.c"
 12565 ;; Parameters:    Size  Location     Type
 12566 ;;		None
 12567 ;; Auto vars:     Size  Location     Type
 12568 ;;  stopOperatio    2    9[COMRAM] unsigned int 
 12569 ;;  stopOperatio    1    8[COMRAM] unsigned char 
 12570 ;; Return value:  Size  Location     Type
 12571 ;;                  1    wreg      void 
 12572 ;; Registers used:
 12573 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 12574 ;; Tracked objects:
 12575 ;;		On entry : 0/0
 12576 ;;		On exit  : 0/0
 12577 ;;		Unchanged: 0/0
 12578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12579 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12580 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12581 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12582 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12583 ;;Total ram usage:        3 bytes
 12584 ;; Hardware stack levels used:    1
 12585 ;; Hardware stack levels required when called:    1
 12586 ;; This function calls:
 12587 ;;		i2_Eeprom_ReadByte
 12588 ;;		i2_Eeprom_WriteByte
 12589 ;;		i2___awdiv
 12590 ;;		i2___awmod
 12591 ;;		i2_next_address
 12592 ;; This function is called by:
 12593 ;;		_keypressed
 12594 ;;		_ISR
 12595 ;; This function uses a non-reentrant model
 12596 ;;
 12597                           
 12598                           	psect	text34
 12599  0025C8                     __ptext34:
 12600                           	opt stack 0
 12601  0025C8                     i2_stopOperation:
 12602                           	opt stack 24
 12603                           
 12604                           ;main.c: 570: T0CONbits.TMR0ON = 0;
 12605                           
 12606                           ;incstack = 0
 12607  0025C8  9ED5               	bcf	4053,7,c	;volatile
 12608                           
 12609                           ;main.c: 571: T1CONbits.TMR1ON = 0;
 12610  0025CA  90CD               	bcf	4045,0,c	;volatile
 12611                           
 12612                           ;main.c: 572: TMR2ON = 0;
 12613  0025CC  94CA               	bcf	4042,2,c	;volatile
 12614                           
 12615                           ;main.c: 573: TMR0 = 55770;
 12616  0025CE  0ED9               	movlw	217
 12617  0025D0  6ED7               	movwf	4055,c	;volatile
 12618  0025D2  0EDA               	movlw	218
 12619  0025D4  6ED6               	movwf	4054,c	;volatile
 12620                           
 12621                           ;main.c: 574: TMR1 = 60535;
 12622  0025D6  0EEC               	movlw	236
 12623  0025D8  6ECF               	movwf	4047,c	;volatile
 12624  0025DA  0E77               	movlw	119
 12625  0025DC  6ECE               	movwf	4046,c	;volatile
 12626                           
 12627                           ;main.c: 575: TMR2 = 155;
 12628  0025DE  0E9B               	movlw	155
 12629  0025E0  6ECC               	movwf	4044,c	;volatile
 12630                           
 12631                           ;main.c: 577: num9V = count9V;
 12632  0025E2  C0DF  F0E6         	movff	_count9V,_num9V
 12633                           
 12634                           ;main.c: 578: numC = countC;
 12635  0025E6  C0E1  F0E9         	movff	_countC,_numC
 12636                           
 12637                           ;main.c: 579: numAA = countAA;
 12638  0025EA  C0E0  F0E7         	movff	_countAA,_numAA
 12639                           
 12640                           ;main.c: 580: numDrain = countDrain;
 12641  0025EE  C0E2  F0EA         	movff	_countDrain,_numDrain
 12642                           
 12643                           ;main.c: 581: numBats = count9V + countC + countAA + countDrain;
 12644  0025F2  0100               	movlb	0	; () banked
 12645  0025F4  51DF               	movf	_count9V& (0+255),w,b
 12646  0025F6  0100               	movlb	0	; () banked
 12647  0025F8  25E1               	addwf	_countC& (0+255),w,b
 12648  0025FA  0100               	movlb	0	; () banked
 12649  0025FC  25E0               	addwf	_countAA& (0+255),w,b
 12650  0025FE  0100               	movlb	0	; () banked
 12651  002600  25E2               	addwf	_countDrain& (0+255),w,b
 12652  002602  0100               	movlb	0	; () banked
 12653  002604  6FE8               	movwf	_numBats& (0+255),b
 12654                           
 12655                           ; BSR set to: 0
 12656                           ;main.c: 583: unsigned char address_code = Eeprom_ReadByte(0);
 12657  002606  0E00               	movlw	0
 12658  002608  6E02               	movwf	i2Eeprom_ReadByte@address+1,c
 12659  00260A  0E00               	movlw	0
 12660  00260C  6E01               	movwf	i2Eeprom_ReadByte@address,c
 12661  00260E  ECAF  F01B         	call	i2_Eeprom_ReadByte	;wreg free
 12662  002612  6E09               	movwf	i2stopOperation@address_code,c
 12663                           
 12664                           ;main.c: 584: uint16_t address = address_code * 96 + 1;
 12665  002614  5009               	movf	i2stopOperation@address_code,w,c
 12666  002616  0D60               	mullw	96
 12667  002618  0E01               	movlw	1
 12668  00261A  24F3               	addwf	prodl,w,c
 12669  00261C  6E0A               	movwf	i2stopOperation@address,c
 12670  00261E  0E00               	movlw	0
 12671  002620  20F4               	addwfc	prodh,w,c
 12672  002622  6E0B               	movwf	i2stopOperation@address+1,c
 12673                           
 12674                           ;main.c: 585: Eeprom_WriteByte(address, lastRunRTC[6]);
 12675  002624  C00A  F001         	movff	i2stopOperation@address,i2Eeprom_WriteByte@address
 12676  002628  C00B  F002         	movff	i2stopOperation@address+1,i2Eeprom_WriteByte@address+1
 12677  00262C  C0CE  F003         	movff	_lastRunRTC+6,i2Eeprom_WriteByte@data
 12678  002630  EC27  F01B         	call	i2_Eeprom_WriteByte	;wreg free
 12679                           
 12680                           ;main.c: 586: address = next_address(address);
 12681  002634  C00A  F001         	movff	i2stopOperation@address,i2next_address@address
 12682  002638  C00B  F002         	movff	i2stopOperation@address+1,i2next_address@address+1
 12683  00263C  ECEE  F01B         	call	i2_next_address	;wreg free
 12684  002640  C001  F00A         	movff	?i2_next_address,i2stopOperation@address
 12685  002644  C002  F00B         	movff	?i2_next_address+1,i2stopOperation@address+1
 12686                           
 12687                           ;main.c: 587: Eeprom_WriteByte(address, lastRunRTC[5]);
 12688  002648  C00A  F001         	movff	i2stopOperation@address,i2Eeprom_WriteByte@address
 12689  00264C  C00B  F002         	movff	i2stopOperation@address+1,i2Eeprom_WriteByte@address+1
 12690  002650  C0CD  F003         	movff	_lastRunRTC+5,i2Eeprom_WriteByte@data
 12691  002654  EC27  F01B         	call	i2_Eeprom_WriteByte	;wreg free
 12692                           
 12693                           ;main.c: 588: address = next_address(address);
 12694  002658  C00A  F001         	movff	i2stopOperation@address,i2next_address@address
 12695  00265C  C00B  F002         	movff	i2stopOperation@address+1,i2next_address@address+1
 12696  002660  ECEE  F01B         	call	i2_next_address	;wreg free
 12697  002664  C001  F00A         	movff	?i2_next_address,i2stopOperation@address
 12698  002668  C002  F00B         	movff	?i2_next_address+1,i2stopOperation@address+1
 12699                           
 12700                           ;main.c: 589: Eeprom_WriteByte(address, lastRunRTC[4]);
 12701  00266C  C00A  F001         	movff	i2stopOperation@address,i2Eeprom_WriteByte@address
 12702  002670  C00B  F002         	movff	i2stopOperation@address+1,i2Eeprom_WriteByte@address+1
 12703  002674  C0CC  F003         	movff	_lastRunRTC+4,i2Eeprom_WriteByte@data
 12704  002678  EC27  F01B         	call	i2_Eeprom_WriteByte	;wreg free
 12705                           
 12706                           ;main.c: 590: address = next_address(address);
 12707  00267C  C00A  F001         	movff	i2stopOperation@address,i2next_address@address
 12708  002680  C00B  F002         	movff	i2stopOperation@address+1,i2next_address@address+1
 12709  002684  ECEE  F01B         	call	i2_next_address	;wreg free
 12710  002688  C001  F00A         	movff	?i2_next_address,i2stopOperation@address
 12711  00268C  C002  F00B         	movff	?i2_next_address+1,i2stopOperation@address+1
 12712                           
 12713                           ;main.c: 591: Eeprom_WriteByte(address, lastRunRTC[2]);
 12714  002690  C00A  F001         	movff	i2stopOperation@address,i2Eeprom_WriteByte@address
 12715  002694  C00B  F002         	movff	i2stopOperation@address+1,i2Eeprom_WriteByte@address+1
 12716  002698  C0CA  F003         	movff	_lastRunRTC+2,i2Eeprom_WriteByte@data
 12717  00269C  EC27  F01B         	call	i2_Eeprom_WriteByte	;wreg free
 12718                           
 12719                           ;main.c: 592: address = next_address(address);
 12720  0026A0  C00A  F001         	movff	i2stopOperation@address,i2next_address@address
 12721  0026A4  C00B  F002         	movff	i2stopOperation@address+1,i2next_address@address+1
 12722  0026A8  ECEE  F01B         	call	i2_next_address	;wreg free
 12723  0026AC  C001  F00A         	movff	?i2_next_address,i2stopOperation@address
 12724  0026B0  C002  F00B         	movff	?i2_next_address+1,i2stopOperation@address+1
 12725                           
 12726                           ;main.c: 593: Eeprom_WriteByte(address, lastRunRTC[1]);
 12727  0026B4  C00A  F001         	movff	i2stopOperation@address,i2Eeprom_WriteByte@address
 12728  0026B8  C00B  F002         	movff	i2stopOperation@address+1,i2Eeprom_WriteByte@address+1
 12729  0026BC  C0C9  F003         	movff	_lastRunRTC+1,i2Eeprom_WriteByte@data
 12730  0026C0  EC27  F01B         	call	i2_Eeprom_WriteByte	;wreg free
 12731                           
 12732                           ;main.c: 594: address = next_address(address);
 12733  0026C4  C00A  F001         	movff	i2stopOperation@address,i2next_address@address
 12734  0026C8  C00B  F002         	movff	i2stopOperation@address+1,i2next_address@address+1
 12735  0026CC  ECEE  F01B         	call	i2_next_address	;wreg free
 12736  0026D0  C001  F00A         	movff	?i2_next_address,i2stopOperation@address
 12737  0026D4  C002  F00B         	movff	?i2_next_address+1,i2stopOperation@address+1
 12738                           
 12739                           ;main.c: 595: Eeprom_WriteByte(address, lastRunRTC[0]);
 12740  0026D8  C00A  F001         	movff	i2stopOperation@address,i2Eeprom_WriteByte@address
 12741  0026DC  C00B  F002         	movff	i2stopOperation@address+1,i2Eeprom_WriteByte@address+1
 12742  0026E0  C0C8  F003         	movff	_lastRunRTC,i2Eeprom_WriteByte@data
 12743  0026E4  EC27  F01B         	call	i2_Eeprom_WriteByte	;wreg free
 12744                           
 12745                           ;main.c: 596: address = next_address(address);
 12746  0026E8  C00A  F001         	movff	i2stopOperation@address,i2next_address@address
 12747  0026EC  C00B  F002         	movff	i2stopOperation@address+1,i2next_address@address+1
 12748  0026F0  ECEE  F01B         	call	i2_next_address	;wreg free
 12749  0026F4  C001  F00A         	movff	?i2_next_address,i2stopOperation@address
 12750  0026F8  C002  F00B         	movff	?i2_next_address+1,i2stopOperation@address+1
 12751                           
 12752                           ;main.c: 598: Eeprom_WriteByte(address, countAA);
 12753  0026FC  C00A  F001         	movff	i2stopOperation@address,i2Eeprom_WriteByte@address
 12754  002700  C00B  F002         	movff	i2stopOperation@address+1,i2Eeprom_WriteByte@address+1
 12755  002704  C0E0  F003         	movff	_countAA,i2Eeprom_WriteByte@data
 12756  002708  EC27  F01B         	call	i2_Eeprom_WriteByte	;wreg free
 12757                           
 12758                           ;main.c: 599: address = next_address(address);
 12759  00270C  C00A  F001         	movff	i2stopOperation@address,i2next_address@address
 12760  002710  C00B  F002         	movff	i2stopOperation@address+1,i2next_address@address+1
 12761  002714  ECEE  F01B         	call	i2_next_address	;wreg free
 12762  002718  C001  F00A         	movff	?i2_next_address,i2stopOperation@address
 12763  00271C  C002  F00B         	movff	?i2_next_address+1,i2stopOperation@address+1
 12764                           
 12765                           ;main.c: 600: Eeprom_WriteByte(address, countC);
 12766  002720  C00A  F001         	movff	i2stopOperation@address,i2Eeprom_WriteByte@address
 12767  002724  C00B  F002         	movff	i2stopOperation@address+1,i2Eeprom_WriteByte@address+1
 12768  002728  C0E1  F003         	movff	_countC,i2Eeprom_WriteByte@data
 12769  00272C  EC27  F01B         	call	i2_Eeprom_WriteByte	;wreg free
 12770                           
 12771                           ;main.c: 601: address = next_address(address);
 12772  002730  C00A  F001         	movff	i2stopOperation@address,i2next_address@address
 12773  002734  C00B  F002         	movff	i2stopOperation@address+1,i2next_address@address+1
 12774  002738  ECEE  F01B         	call	i2_next_address	;wreg free
 12775  00273C  C001  F00A         	movff	?i2_next_address,i2stopOperation@address
 12776  002740  C002  F00B         	movff	?i2_next_address+1,i2stopOperation@address+1
 12777                           
 12778                           ;main.c: 602: Eeprom_WriteByte(address, count9V);
 12779  002744  C00A  F001         	movff	i2stopOperation@address,i2Eeprom_WriteByte@address
 12780  002748  C00B  F002         	movff	i2stopOperation@address+1,i2Eeprom_WriteByte@address+1
 12781  00274C  C0DF  F003         	movff	_count9V,i2Eeprom_WriteByte@data
 12782  002750  EC27  F01B         	call	i2_Eeprom_WriteByte	;wreg free
 12783                           
 12784                           ;main.c: 603: address = next_address(address);
 12785  002754  C00A  F001         	movff	i2stopOperation@address,i2next_address@address
 12786  002758  C00B  F002         	movff	i2stopOperation@address+1,i2next_address@address+1
 12787  00275C  ECEE  F01B         	call	i2_next_address	;wreg free
 12788  002760  C001  F00A         	movff	?i2_next_address,i2stopOperation@address
 12789  002764  C002  F00B         	movff	?i2_next_address+1,i2stopOperation@address+1
 12790                           
 12791                           ;main.c: 604: Eeprom_WriteByte(address, countDrain);
 12792  002768  C00A  F001         	movff	i2stopOperation@address,i2Eeprom_WriteByte@address
 12793  00276C  C00B  F002         	movff	i2stopOperation@address+1,i2Eeprom_WriteByte@address+1
 12794  002770  C0E2  F003         	movff	_countDrain,i2Eeprom_WriteByte@data
 12795  002774  EC27  F01B         	call	i2_Eeprom_WriteByte	;wreg free
 12796                           
 12797                           ;main.c: 605: address = next_address(address);
 12798  002778  C00A  F001         	movff	i2stopOperation@address,i2next_address@address
 12799  00277C  C00B  F002         	movff	i2stopOperation@address+1,i2next_address@address+1
 12800  002780  ECEE  F01B         	call	i2_next_address	;wreg free
 12801  002784  C001  F00A         	movff	?i2_next_address,i2stopOperation@address
 12802  002788  C002  F00B         	movff	?i2_next_address+1,i2stopOperation@address+1
 12803                           
 12804                           ;main.c: 606: Eeprom_WriteByte(address, numBats);
 12805  00278C  C00A  F001         	movff	i2stopOperation@address,i2Eeprom_WriteByte@address
 12806  002790  C00B  F002         	movff	i2stopOperation@address+1,i2Eeprom_WriteByte@address+1
 12807  002794  C0E8  F003         	movff	_numBats,i2Eeprom_WriteByte@data
 12808  002798  EC27  F01B         	call	i2_Eeprom_WriteByte	;wreg free
 12809                           
 12810                           ;main.c: 607: address = next_address(address);
 12811  00279C  C00A  F001         	movff	i2stopOperation@address,i2next_address@address
 12812  0027A0  C00B  F002         	movff	i2stopOperation@address+1,i2next_address@address+1
 12813  0027A4  ECEE  F01B         	call	i2_next_address	;wreg free
 12814  0027A8  C001  F00A         	movff	?i2_next_address,i2stopOperation@address
 12815  0027AC  C002  F00B         	movff	?i2_next_address+1,i2stopOperation@address+1
 12816                           
 12817                           ;main.c: 608: Eeprom_WriteByte(address, opTimer);
 12818  0027B0  C00A  F001         	movff	i2stopOperation@address,i2Eeprom_WriteByte@address
 12819  0027B4  C00B  F002         	movff	i2stopOperation@address+1,i2Eeprom_WriteByte@address+1
 12820  0027B8  C051  F003         	movff	_opTimer,i2Eeprom_WriteByte@data
 12821  0027BC  EC27  F01B         	call	i2_Eeprom_WriteByte	;wreg free
 12822                           
 12823                           ;main.c: 610: address_code++;
 12824  0027C0  2A09               	incf	i2stopOperation@address_code,f,c
 12825                           
 12826                           ;main.c: 611: if (address_code > 3)
 12827  0027C2  0E03               	movlw	3
 12828  0027C4  6409               	cpfsgt	i2stopOperation@address_code,c
 12829  0027C6  D009               	goto	i2l4365
 12830                           
 12831                           ;main.c: 612: Eeprom_WriteByte(0, 0);
 12832  0027C8  0E00               	movlw	0
 12833  0027CA  6E02               	movwf	i2Eeprom_WriteByte@address+1,c
 12834  0027CC  0E00               	movlw	0
 12835  0027CE  6E01               	movwf	i2Eeprom_WriteByte@address,c
 12836  0027D0  0E00               	movlw	0
 12837  0027D2  6E03               	movwf	i2Eeprom_WriteByte@data,c
 12838  0027D4  EC27  F01B         	call	i2_Eeprom_WriteByte	;wreg free
 12839  0027D8  D008               	goto	i2l4367
 12840  0027DA                     i2l4365:
 12841                           
 12842                           ;main.c: 613: else
 12843                           ;main.c: 614: Eeprom_WriteByte(0, address_code);
 12844  0027DA  0E00               	movlw	0
 12845  0027DC  6E02               	movwf	i2Eeprom_WriteByte@address+1,c
 12846  0027DE  0E00               	movlw	0
 12847  0027E0  6E01               	movwf	i2Eeprom_WriteByte@address,c
 12848  0027E2  C009  F003         	movff	i2stopOperation@address_code,i2Eeprom_WriteByte@data
 12849  0027E6  EC27  F01B         	call	i2_Eeprom_WriteByte	;wreg free
 12850  0027EA                     i2l4367:
 12851                           
 12852                           ;main.c: 616: count9V = 0;
 12853  0027EA  0E00               	movlw	0
 12854  0027EC  0100               	movlb	0	; () banked
 12855  0027EE  6FDF               	movwf	_count9V& (0+255),b
 12856                           
 12857                           ; BSR set to: 0
 12858                           ;main.c: 617: countC = 0;
 12859  0027F0  0E00               	movlw	0
 12860  0027F2  0100               	movlb	0	; () banked
 12861  0027F4  6FE1               	movwf	_countC& (0+255),b
 12862                           
 12863                           ; BSR set to: 0
 12864                           ;main.c: 618: countAA = 0;
 12865  0027F6  0E00               	movlw	0
 12866  0027F8  0100               	movlb	0	; () banked
 12867  0027FA  6FE0               	movwf	_countAA& (0+255),b
 12868                           
 12869                           ; BSR set to: 0
 12870                           ;main.c: 619: countDrain = 0;
 12871  0027FC  0E00               	movlw	0
 12872  0027FE  0100               	movlb	0	; () banked
 12873  002800  6FE2               	movwf	_countDrain& (0+255),b
 12874                           
 12875                           ; BSR set to: 0
 12876                           ;main.c: 620: min = opTimer / 60;
 12877  002802  C051  F001         	movff	_opTimer,i2___awdiv@dividend
 12878  002806  6A02               	clrf	i2___awdiv@dividend+1,c
 12879  002808  0E00               	movlw	0
 12880  00280A  6E04               	movwf	i2___awdiv@divisor+1,c
 12881  00280C  0E3C               	movlw	60
 12882  00280E  6E03               	movwf	i2___awdiv@divisor,c
 12883  002810  EC80  F018         	call	i2___awdiv	;wreg free
 12884  002814  5001               	movf	?i2___awdiv,w,c
 12885  002816  0100               	movlb	0	; () banked
 12886  002818  6FE5               	movwf	_min& (0+255),b
 12887                           
 12888                           ; BSR set to: 0
 12889                           ;main.c: 621: sec = opTimer % 60;
 12890  00281A  C051  F001         	movff	_opTimer,i2___awmod@dividend
 12891  00281E  6A02               	clrf	i2___awmod@dividend+1,c
 12892  002820  0E00               	movlw	0
 12893  002822  6E04               	movwf	i2___awmod@divisor+1,c
 12894  002824  0E3C               	movlw	60
 12895  002826  6E03               	movwf	i2___awmod@divisor,c
 12896  002828  ECFE  F018         	call	i2___awmod	;wreg free
 12897  00282C  5001               	movf	?i2___awmod,w,c
 12898  00282E  0100               	movlb	0	; () banked
 12899  002830  6FEB               	movwf	_sec& (0+255),b
 12900                           
 12901                           ; BSR set to: 0
 12902                           ;main.c: 622: opTimer = 0;
 12903  002832  0E00               	movlw	0
 12904  002834  6E51               	movwf	_opTimer,c
 12905                           
 12906                           ; BSR set to: 0
 12907                           ;main.c: 623: doneTimer = 0;
 12908  002836  0E00               	movlw	0
 12909  002838  0100               	movlb	0	; () banked
 12910  00283A  6FE3               	movwf	_doneTimer& (0+255),b
 12911                           
 12912                           ; BSR set to: 0
 12913                           ;main.c: 624: sorting = 0;
 12914  00283C  0E00               	movlw	0
 12915  00283E  6E53               	movwf	_sorting,c
 12916                           
 12917                           ; BSR set to: 0
 12918                           ;main.c: 625: plat1Left = 0;
 12919  002840  0E00               	movlw	0
 12920  002842  0100               	movlb	0	; () banked
 12921  002844  6FD0               	movwf	(_plat1Left+1)& (0+255),b
 12922  002846  0E00               	movlw	0
 12923  002848  6FCF               	movwf	_plat1Left& (0+255),b
 12924                           
 12925                           ; BSR set to: 0
 12926                           ;main.c: 626: plat1Right = 0;
 12927  00284A  0E00               	movlw	0
 12928  00284C  0100               	movlb	0	; () banked
 12929  00284E  6FD2               	movwf	(_plat1Right+1)& (0+255),b
 12930  002850  0E00               	movlw	0
 12931  002852  6FD1               	movwf	_plat1Right& (0+255),b
 12932                           
 12933                           ; BSR set to: 0
 12934                           ;main.c: 627: plat2Left = 0;
 12935  002854  0E00               	movlw	0
 12936  002856  0100               	movlb	0	; () banked
 12937  002858  6FD4               	movwf	(_plat2Left+1)& (0+255),b
 12938  00285A  0E00               	movlw	0
 12939  00285C  6FD3               	movwf	_plat2Left& (0+255),b
 12940                           
 12941                           ; BSR set to: 0
 12942                           ;main.c: 628: plat2Right = 0;
 12943  00285E  0E00               	movlw	0
 12944  002860  0100               	movlb	0	; () banked
 12945  002862  6FD6               	movwf	(_plat2Right+1)& (0+255),b
 12946  002864  0E00               	movlw	0
 12947  002866  6FD5               	movwf	_plat2Right& (0+255),b
 12948                           
 12949                           ; BSR set to: 0
 12950                           ;main.c: 629: turn2BackLeft = 0;
 12951  002868  0E00               	movlw	0
 12952  00286A  0100               	movlb	0	; () banked
 12953  00286C  6FDC               	movwf	(_turn2BackLeft+1)& (0+255),b
 12954  00286E  0E00               	movlw	0
 12955  002870  6FDB               	movwf	_turn2BackLeft& (0+255),b
 12956                           
 12957                           ; BSR set to: 0
 12958                           ;main.c: 630: turn1BackLeft = 0;
 12959  002872  0E00               	movlw	0
 12960  002874  0100               	movlb	0	; () banked
 12961  002876  6FD8               	movwf	(_turn1BackLeft+1)& (0+255),b
 12962  002878  0E00               	movlw	0
 12963  00287A  6FD7               	movwf	_turn1BackLeft& (0+255),b
 12964                           
 12965                           ; BSR set to: 0
 12966                           ;main.c: 631: turn2BackRight = 0;
 12967  00287C  0E00               	movlw	0
 12968  00287E  0100               	movlb	0	; () banked
 12969  002880  6FDE               	movwf	(_turn2BackRight+1)& (0+255),b
 12970  002882  0E00               	movlw	0
 12971  002884  6FDD               	movwf	_turn2BackRight& (0+255),b
 12972                           
 12973                           ; BSR set to: 0
 12974                           ;main.c: 632: turn1BackRight = 0;
 12975  002886  0E00               	movlw	0
 12976  002888  0100               	movlb	0	; () banked
 12977  00288A  6FDA               	movwf	(_turn1BackRight+1)& (0+255),b
 12978  00288C  0E00               	movlw	0
 12979  00288E  6FD9               	movwf	_turn1BackRight& (0+255),b
 12980                           
 12981                           ; BSR set to: 0
 12982                           ;main.c: 633: count_2ms = 0;
 12983  002890  0E00               	movlw	0
 12984  002892  6E50               	movwf	_count_2ms+1,c
 12985  002894  0E00               	movlw	0
 12986  002896  6E4F               	movwf	_count_2ms,c
 12987                           
 12988                           ; BSR set to: 0
 12989                           ;main.c: 634: doubleAA = 0;
 12990  002898  0E00               	movlw	0
 12991  00289A  0100               	movlb	0	; () banked
 12992  00289C  6FE4               	movwf	_doubleAA& (0+255),b
 12993                           
 12994                           ; BSR set to: 0
 12995                           ;main.c: 635: solOnTimer = 0;
 12996  00289E  0E00               	movlw	0
 12997  0028A0  6E52               	movwf	_solOnTimer,c
 12998                           
 12999                           ; BSR set to: 0
 13000                           ;main.c: 637: LATCbits.LC1 = 0;;
 13001  0028A2  928B               	bcf	3979,1,c	;volatile
 13002                           
 13003                           ; BSR set to: 0
 13004                           ;main.c: 638: LATCbits.LC2 = 0;;
 13005  0028A4  948B               	bcf	3979,2,c	;volatile
 13006                           
 13007                           ; BSR set to: 0
 13008                           ;main.c: 639: LATCbits.LC6 = 0;;
 13009  0028A6  9C8B               	bcf	3979,6,c	;volatile
 13010                           
 13011                           ; BSR set to: 0
 13012                           ;main.c: 640: LATCbits.LC5 = 0;;
 13013  0028A8  9A8B               	bcf	3979,5,c	;volatile
 13014                           
 13015                           ; BSR set to: 0
 13016                           ;main.c: 641: LATCbits.LC0 = 0;;
 13017  0028AA  908B               	bcf	3979,0,c	;volatile
 13018                           
 13019                           ; BSR set to: 0
 13020                           ;main.c: 642: LATEbits.LE2 = 0;;
 13021  0028AC  948D               	bcf	3981,2,c	;volatile
 13022                           
 13023                           ; BSR set to: 0
 13024                           ;main.c: 643: LATEbits.LE1 = 0;;
 13025  0028AE  928D               	bcf	3981,1,c	;volatile
 13026                           
 13027                           ; BSR set to: 0
 13028                           ;main.c: 644: LATAbits.LA4 = 0;;
 13029  0028B0  9889               	bcf	3977,4,c	;volatile
 13030                           
 13031                           ; BSR set to: 0
 13032                           ;main.c: 645: LATDbits.LD0= 0;;
 13033  0028B2  908C               	bcf	3980,0,c	;volatile
 13034                           
 13035                           ; BSR set to: 0
 13036                           ;main.c: 646: LATCbits.LC7 = 0;;
 13037  0028B4  9E8B               	bcf	3979,7,c	;volatile
 13038                           
 13039                           ; BSR set to: 0
 13040                           ;main.c: 647: LATDbits.LD1 = 0;;
 13041  0028B6  928C               	bcf	3980,1,c	;volatile
 13042                           
 13043                           ; BSR set to: 0
 13044                           ;main.c: 648: LATBbits.LB0 = 0;;
 13045  0028B8  908A               	bcf	3978,0,c	;volatile
 13046                           
 13047                           ; BSR set to: 0
 13048                           ;main.c: 649: screenMode = 0;
 13049  0028BA  0E00               	movlw	0
 13050  0028BC  0100               	movlb	0	; () banked
 13051  0028BE  6FFA               	movwf	_screenMode& (0+255),b
 13052                           
 13053                           ; BSR set to: 0
 13054  0028C0  0012               	return		;funcret
 13055  0028C2                     __end_ofi2_stopOperation:
 13056                           	opt stack 0
 13057                           pclatu	equ	0xFFB
 13058                           pclath	equ	0xFFA
 13059                           tblptru	equ	0xFF8
 13060                           tblptrh	equ	0xFF7
 13061                           tblptrl	equ	0xFF6
 13062                           tablat	equ	0xFF5
 13063                           prodh	equ	0xFF4
 13064                           prodl	equ	0xFF3
 13065                           intcon	equ	0xFF2
 13066                           intcon2	equ	0xFF1
 13067                           intcon3	equ	0xFF0
 13068                           postinc0	equ	0xFEE
 13069                           fsr0h	equ	0xFEA
 13070                           fsr0l	equ	0xFE9
 13071                           wreg	equ	0xFE8
 13072                           postdec1	equ	0xFE5
 13073                           plusw1	equ	0xFE3
 13074                           fsr1h	equ	0xFE2
 13075                           fsr1l	equ	0xFE1
 13076                           indf2	equ	0xFDF
 13077                           postinc2	equ	0xFDE
 13078                           postdec2	equ	0xFDD
 13079                           plusw2	equ	0xFDB
 13080                           fsr2h	equ	0xFDA
 13081                           fsr2l	equ	0xFD9
 13082                           status	equ	0xFD8
 13083                           
 13084 ;; *************** function i2_next_address *****************
 13085 ;; Defined at:
 13086 ;;		line 794 in file "../main.c"
 13087 ;; Parameters:    Size  Location     Type
 13088 ;;  address         2    0[COMRAM] unsigned int 
 13089 ;; Auto vars:     Size  Location     Type
 13090 ;;		None
 13091 ;; Return value:  Size  Location     Type
 13092 ;;                  2    0[COMRAM] unsigned int 
 13093 ;; Registers used:
 13094 ;;		wreg, status,2, status,0
 13095 ;; Tracked objects:
 13096 ;;		On entry : 0/0
 13097 ;;		On exit  : 0/0
 13098 ;;		Unchanged: 0/0
 13099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13100 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13101 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13102 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13103 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13104 ;;Total ram usage:        2 bytes
 13105 ;; Hardware stack levels used:    1
 13106 ;; This function calls:
 13107 ;;		Nothing
 13108 ;; This function is called by:
 13109 ;;		i2_stopOperation
 13110 ;; This function uses a non-reentrant model
 13111 ;;
 13112                           
 13113                           	psect	text35
 13114  0037DC                     __ptext35:
 13115                           	opt stack 0
 13116  0037DC                     i2_next_address:
 13117                           	opt stack 24
 13118                           
 13119                           ;main.c: 795: return address + 8;
 13120                           
 13121                           ; BSR set to: 0
 13122                           ;incstack = 0
 13123  0037DC  0E08               	movlw	8
 13124  0037DE  2401               	addwf	i2next_address@address,w,c
 13125  0037E0  6E01               	movwf	?i2_next_address,c
 13126  0037E2  0E00               	movlw	0
 13127  0037E4  2002               	addwfc	i2next_address@address+1,w,c
 13128  0037E6  6E02               	movwf	?i2_next_address+1,c
 13129  0037E8  0012               	return	
 13130  0037EA                     __end_ofi2_next_address:
 13131                           	opt stack 0
 13132                           pclatu	equ	0xFFB
 13133                           pclath	equ	0xFFA
 13134                           tblptru	equ	0xFF8
 13135                           tblptrh	equ	0xFF7
 13136                           tblptrl	equ	0xFF6
 13137                           tablat	equ	0xFF5
 13138                           prodh	equ	0xFF4
 13139                           prodl	equ	0xFF3
 13140                           intcon	equ	0xFF2
 13141                           intcon2	equ	0xFF1
 13142                           intcon3	equ	0xFF0
 13143                           postinc0	equ	0xFEE
 13144                           fsr0h	equ	0xFEA
 13145                           fsr0l	equ	0xFE9
 13146                           wreg	equ	0xFE8
 13147                           postdec1	equ	0xFE5
 13148                           plusw1	equ	0xFE3
 13149                           fsr1h	equ	0xFE2
 13150                           fsr1l	equ	0xFE1
 13151                           indf2	equ	0xFDF
 13152                           postinc2	equ	0xFDE
 13153                           postdec2	equ	0xFDD
 13154                           plusw2	equ	0xFDB
 13155                           fsr2h	equ	0xFDA
 13156                           fsr2l	equ	0xFD9
 13157                           status	equ	0xFD8
 13158                           
 13159 ;; *************** function i2___awmod *****************
 13160 ;; Defined at:
 13161 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 13162 ;; Parameters:    Size  Location     Type
 13163 ;;  dividend        2    0[COMRAM] int 
 13164 ;;  divisor         2    2[COMRAM] int 
 13165 ;; Auto vars:     Size  Location     Type
 13166 ;;  __awmod         1    5[COMRAM] unsigned char 
 13167 ;;  __awmod         1    4[COMRAM] unsigned char 
 13168 ;; Return value:  Size  Location     Type
 13169 ;;                  2    0[COMRAM] int 
 13170 ;; Registers used:
 13171 ;;		wreg, status,2, status,0
 13172 ;; Tracked objects:
 13173 ;;		On entry : 0/0
 13174 ;;		On exit  : 0/0
 13175 ;;		Unchanged: 0/0
 13176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13177 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13178 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13179 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13180 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13181 ;;Total ram usage:        6 bytes
 13182 ;; Hardware stack levels used:    1
 13183 ;; This function calls:
 13184 ;;		Nothing
 13185 ;; This function is called by:
 13186 ;;		_ISR
 13187 ;;		i2_stopOperation
 13188 ;; This function uses a non-reentrant model
 13189 ;;
 13190                           
 13191                           	psect	text36
 13192  0031FC                     __ptext36:
 13193                           	opt stack 0
 13194  0031FC                     i2___awmod:
 13195                           	opt stack 24
 13196                           
 13197                           ;incstack = 0
 13198  0031FC  0E00               	movlw	0
 13199  0031FE  6E06               	movwf	i2___awmod@sign,c
 13200  003200  AE02               	btfss	i2___awmod@dividend+1,7,c
 13201  003202  D006               	goto	i2l3873
 13202  003204  6C01               	negf	i2___awmod@dividend,c
 13203  003206  1E02               	comf	i2___awmod@dividend+1,f,c
 13204  003208  B0D8               	btfsc	status,0,c
 13205  00320A  2A02               	incf	i2___awmod@dividend+1,f,c
 13206  00320C  0E01               	movlw	1
 13207  00320E  6E06               	movwf	i2___awmod@sign,c
 13208  003210                     i2l3873:
 13209  003210  AE04               	btfss	i2___awmod@divisor+1,7,c
 13210  003212  D004               	goto	i2l3877
 13211  003214  6C03               	negf	i2___awmod@divisor,c
 13212  003216  1E04               	comf	i2___awmod@divisor+1,f,c
 13213  003218  B0D8               	btfsc	status,0,c
 13214  00321A  2A04               	incf	i2___awmod@divisor+1,f,c
 13215  00321C                     i2l3877:
 13216  00321C  5003               	movf	i2___awmod@divisor,w,c
 13217  00321E  1004               	iorwf	i2___awmod@divisor+1,w,c
 13218  003220  B4D8               	btfsc	status,2,c
 13219  003222  D018               	goto	i2l3893
 13220  003224  0E01               	movlw	1
 13221  003226  6E05               	movwf	i2___awmod@counter,c
 13222  003228  D004               	goto	i2l3883
 13223  00322A                     i2l3881:
 13224  00322A  90D8               	bcf	status,0,c
 13225  00322C  3603               	rlcf	i2___awmod@divisor,f,c
 13226  00322E  3604               	rlcf	i2___awmod@divisor+1,f,c
 13227  003230  2A05               	incf	i2___awmod@counter,f,c
 13228  003232                     i2l3883:
 13229  003232  AE04               	btfss	i2___awmod@divisor+1,7,c
 13230  003234  D7FA               	goto	i2l3881
 13231  003236                     i2l3885:
 13232  003236  5003               	movf	i2___awmod@divisor,w,c
 13233  003238  5C01               	subwf	i2___awmod@dividend,w,c
 13234  00323A  5004               	movf	i2___awmod@divisor+1,w,c
 13235  00323C  5802               	subwfb	i2___awmod@dividend+1,w,c
 13236  00323E  A0D8               	btfss	status,0,c
 13237  003240  D004               	goto	i2l3889
 13238  003242  5003               	movf	i2___awmod@divisor,w,c
 13239  003244  5E01               	subwf	i2___awmod@dividend,f,c
 13240  003246  5004               	movf	i2___awmod@divisor+1,w,c
 13241  003248  5A02               	subwfb	i2___awmod@dividend+1,f,c
 13242  00324A                     i2l3889:
 13243  00324A  90D8               	bcf	status,0,c
 13244  00324C  3204               	rrcf	i2___awmod@divisor+1,f,c
 13245  00324E  3203               	rrcf	i2___awmod@divisor,f,c
 13246  003250  2E05               	decfsz	i2___awmod@counter,f,c
 13247  003252  D7F1               	goto	i2l3885
 13248  003254                     i2l3893:
 13249  003254  5006               	movf	i2___awmod@sign,w,c
 13250  003256  B4D8               	btfsc	status,2,c
 13251  003258  D004               	goto	i2l3897
 13252  00325A  6C01               	negf	i2___awmod@dividend,c
 13253  00325C  1E02               	comf	i2___awmod@dividend+1,f,c
 13254  00325E  B0D8               	btfsc	status,0,c
 13255  003260  2A02               	incf	i2___awmod@dividend+1,f,c
 13256  003262                     i2l3897:
 13257  003262  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
 13258  003266  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
 13259  00326A  0012               	return	
 13260  00326C                     __end_ofi2___awmod:
 13261                           	opt stack 0
 13262                           pclatu	equ	0xFFB
 13263                           pclath	equ	0xFFA
 13264                           tblptru	equ	0xFF8
 13265                           tblptrh	equ	0xFF7
 13266                           tblptrl	equ	0xFF6
 13267                           tablat	equ	0xFF5
 13268                           prodh	equ	0xFF4
 13269                           prodl	equ	0xFF3
 13270                           intcon	equ	0xFF2
 13271                           intcon2	equ	0xFF1
 13272                           intcon3	equ	0xFF0
 13273                           postinc0	equ	0xFEE
 13274                           fsr0h	equ	0xFEA
 13275                           fsr0l	equ	0xFE9
 13276                           wreg	equ	0xFE8
 13277                           postdec1	equ	0xFE5
 13278                           plusw1	equ	0xFE3
 13279                           fsr1h	equ	0xFE2
 13280                           fsr1l	equ	0xFE1
 13281                           indf2	equ	0xFDF
 13282                           postinc2	equ	0xFDE
 13283                           postdec2	equ	0xFDD
 13284                           plusw2	equ	0xFDB
 13285                           fsr2h	equ	0xFDA
 13286                           fsr2l	equ	0xFD9
 13287                           status	equ	0xFD8
 13288                           
 13289 ;; *************** function i2___awdiv *****************
 13290 ;; Defined at:
 13291 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
 13292 ;; Parameters:    Size  Location     Type
 13293 ;;  dividend        2    0[COMRAM] int 
 13294 ;;  divisor         2    2[COMRAM] int 
 13295 ;; Auto vars:     Size  Location     Type
 13296 ;;  __awdiv         2    6[COMRAM] int 
 13297 ;;  __awdiv         1    5[COMRAM] unsigned char 
 13298 ;;  __awdiv         1    4[COMRAM] unsigned char 
 13299 ;; Return value:  Size  Location     Type
 13300 ;;                  2    0[COMRAM] int 
 13301 ;; Registers used:
 13302 ;;		wreg, status,2, status,0
 13303 ;; Tracked objects:
 13304 ;;		On entry : 0/0
 13305 ;;		On exit  : 0/0
 13306 ;;		Unchanged: 0/0
 13307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13308 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13309 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13310 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13311 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13312 ;;Total ram usage:        8 bytes
 13313 ;; Hardware stack levels used:    1
 13314 ;; This function calls:
 13315 ;;		Nothing
 13316 ;; This function is called by:
 13317 ;;		_ISR
 13318 ;;		i2_stopOperation
 13319 ;; This function uses a non-reentrant model
 13320 ;;
 13321                           
 13322                           	psect	text37
 13323  003100                     __ptext37:
 13324                           	opt stack 0
 13325  003100                     i2___awdiv:
 13326                           	opt stack 24
 13327                           
 13328                           ;incstack = 0
 13329  003100  0E00               	movlw	0
 13330  003102  6E06               	movwf	i2___awdiv@sign,c
 13331  003104  AE04               	btfss	i2___awdiv@divisor+1,7,c
 13332  003106  D006               	goto	i2l3829
 13333  003108  6C03               	negf	i2___awdiv@divisor,c
 13334  00310A  1E04               	comf	i2___awdiv@divisor+1,f,c
 13335  00310C  B0D8               	btfsc	status,0,c
 13336  00310E  2A04               	incf	i2___awdiv@divisor+1,f,c
 13337  003110  0E01               	movlw	1
 13338  003112  6E06               	movwf	i2___awdiv@sign,c
 13339  003114                     i2l3829:
 13340  003114  AE02               	btfss	i2___awdiv@dividend+1,7,c
 13341  003116  D006               	goto	i2l3835
 13342  003118  6C01               	negf	i2___awdiv@dividend,c
 13343  00311A  1E02               	comf	i2___awdiv@dividend+1,f,c
 13344  00311C  B0D8               	btfsc	status,0,c
 13345  00311E  2A02               	incf	i2___awdiv@dividend+1,f,c
 13346  003120  0E01               	movlw	1
 13347  003122  1A06               	xorwf	i2___awdiv@sign,f,c
 13348  003124                     i2l3835:
 13349  003124  0E00               	movlw	0
 13350  003126  6E08               	movwf	i2___awdiv@quotient+1,c
 13351  003128  0E00               	movlw	0
 13352  00312A  6E07               	movwf	i2___awdiv@quotient,c
 13353  00312C  5003               	movf	i2___awdiv@divisor,w,c
 13354  00312E  1004               	iorwf	i2___awdiv@divisor+1,w,c
 13355  003130  B4D8               	btfsc	status,2,c
 13356  003132  D01C               	goto	i2l3857
 13357  003134  0E01               	movlw	1
 13358  003136  6E05               	movwf	i2___awdiv@counter,c
 13359  003138  D004               	goto	i2l3843
 13360  00313A                     i2l3841:
 13361  00313A  90D8               	bcf	status,0,c
 13362  00313C  3603               	rlcf	i2___awdiv@divisor,f,c
 13363  00313E  3604               	rlcf	i2___awdiv@divisor+1,f,c
 13364  003140  2A05               	incf	i2___awdiv@counter,f,c
 13365  003142                     i2l3843:
 13366  003142  AE04               	btfss	i2___awdiv@divisor+1,7,c
 13367  003144  D7FA               	goto	i2l3841
 13368  003146                     i2l3845:
 13369  003146  90D8               	bcf	status,0,c
 13370  003148  3607               	rlcf	i2___awdiv@quotient,f,c
 13371  00314A  3608               	rlcf	i2___awdiv@quotient+1,f,c
 13372  00314C  5003               	movf	i2___awdiv@divisor,w,c
 13373  00314E  5C01               	subwf	i2___awdiv@dividend,w,c
 13374  003150  5004               	movf	i2___awdiv@divisor+1,w,c
 13375  003152  5802               	subwfb	i2___awdiv@dividend+1,w,c
 13376  003154  A0D8               	btfss	status,0,c
 13377  003156  D005               	goto	i2l3853
 13378  003158  5003               	movf	i2___awdiv@divisor,w,c
 13379  00315A  5E01               	subwf	i2___awdiv@dividend,f,c
 13380  00315C  5004               	movf	i2___awdiv@divisor+1,w,c
 13381  00315E  5A02               	subwfb	i2___awdiv@dividend+1,f,c
 13382  003160  8007               	bsf	i2___awdiv@quotient,0,c
 13383  003162                     i2l3853:
 13384  003162  90D8               	bcf	status,0,c
 13385  003164  3204               	rrcf	i2___awdiv@divisor+1,f,c
 13386  003166  3203               	rrcf	i2___awdiv@divisor,f,c
 13387  003168  2E05               	decfsz	i2___awdiv@counter,f,c
 13388  00316A  D7ED               	goto	i2l3845
 13389  00316C                     i2l3857:
 13390  00316C  5006               	movf	i2___awdiv@sign,w,c
 13391  00316E  B4D8               	btfsc	status,2,c
 13392  003170  D004               	goto	i2l3861
 13393  003172  6C07               	negf	i2___awdiv@quotient,c
 13394  003174  1E08               	comf	i2___awdiv@quotient+1,f,c
 13395  003176  B0D8               	btfsc	status,0,c
 13396  003178  2A08               	incf	i2___awdiv@quotient+1,f,c
 13397  00317A                     i2l3861:
 13398  00317A  C007  F001         	movff	i2___awdiv@quotient,?i2___awdiv
 13399  00317E  C008  F002         	movff	i2___awdiv@quotient+1,?i2___awdiv+1
 13400  003182  0012               	return	
 13401  003184                     __end_ofi2___awdiv:
 13402                           	opt stack 0
 13403                           pclatu	equ	0xFFB
 13404                           pclath	equ	0xFFA
 13405                           tblptru	equ	0xFF8
 13406                           tblptrh	equ	0xFF7
 13407                           tblptrl	equ	0xFF6
 13408                           tablat	equ	0xFF5
 13409                           prodh	equ	0xFF4
 13410                           prodl	equ	0xFF3
 13411                           intcon	equ	0xFF2
 13412                           intcon2	equ	0xFF1
 13413                           intcon3	equ	0xFF0
 13414                           postinc0	equ	0xFEE
 13415                           fsr0h	equ	0xFEA
 13416                           fsr0l	equ	0xFE9
 13417                           wreg	equ	0xFE8
 13418                           postdec1	equ	0xFE5
 13419                           plusw1	equ	0xFE3
 13420                           fsr1h	equ	0xFE2
 13421                           fsr1l	equ	0xFE1
 13422                           indf2	equ	0xFDF
 13423                           postinc2	equ	0xFDE
 13424                           postdec2	equ	0xFDD
 13425                           plusw2	equ	0xFDB
 13426                           fsr2h	equ	0xFDA
 13427                           fsr2l	equ	0xFD9
 13428                           status	equ	0xFD8
 13429                           
 13430 ;; *************** function i2_Eeprom_WriteByte *****************
 13431 ;; Defined at:
 13432 ;;		line 767 in file "../main.c"
 13433 ;; Parameters:    Size  Location     Type
 13434 ;;  address         2    0[COMRAM] unsigned int 
 13435 ;;  data            1    2[COMRAM] unsigned char 
 13436 ;; Auto vars:     Size  Location     Type
 13437 ;;		None
 13438 ;; Return value:  Size  Location     Type
 13439 ;;                  1    wreg      void 
 13440 ;; Registers used:
 13441 ;;		wreg, status,2
 13442 ;; Tracked objects:
 13443 ;;		On entry : 0/0
 13444 ;;		On exit  : 0/0
 13445 ;;		Unchanged: 0/0
 13446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13447 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13448 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13449 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13450 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13451 ;;Total ram usage:        3 bytes
 13452 ;; Hardware stack levels used:    1
 13453 ;; This function calls:
 13454 ;;		Nothing
 13455 ;; This function is called by:
 13456 ;;		i2_stopOperation
 13457 ;; This function uses a non-reentrant model
 13458 ;;
 13459                           
 13460                           	psect	text38
 13461  00364E                     __ptext38:
 13462                           	opt stack 0
 13463  00364E                     i2_Eeprom_WriteByte:
 13464                           	opt stack 24
 13465                           
 13466                           ;main.c: 769: EEADRH = (uint8_t)(address >> 8);
 13467                           
 13468                           ;incstack = 0
 13469  00364E  5002               	movf	i2Eeprom_WriteByte@address+1,w,c
 13470  003650  6EAA               	movwf	4010,c	;volatile
 13471                           
 13472                           ;main.c: 770: EEADR = (uint8_t)address;
 13473  003652  C001  FFA9         	movff	i2Eeprom_WriteByte@address,4009	;volatile
 13474                           
 13475                           ;main.c: 772: EEDATA = data;
 13476  003656  C003  FFA8         	movff	i2Eeprom_WriteByte@data,4008	;volatile
 13477                           
 13478                           ;main.c: 773: EECON1bits.EEPGD = 0;
 13479  00365A  9EA6               	bcf	4006,7,c	;volatile
 13480                           
 13481                           ;main.c: 774: EECON1bits.CFGS = 0;
 13482  00365C  9CA6               	bcf	4006,6,c	;volatile
 13483                           
 13484                           ;main.c: 775: EECON1bits.WREN = 1;
 13485  00365E  84A6               	bsf	4006,2,c	;volatile
 13486                           
 13487                           ;main.c: 779: EECON2 = 0x55;
 13488  003660  0E55               	movlw	85
 13489  003662  6EA7               	movwf	4007,c	;volatile
 13490                           
 13491                           ;main.c: 780: EECON2 = 0xAA;
 13492  003664  0EAA               	movlw	170
 13493  003666  6EA7               	movwf	4007,c	;volatile
 13494                           
 13495                           ;main.c: 781: EECON1bits.WR = 1;
 13496  003668  82A6               	bsf	4006,1,c	;volatile
 13497  00366A                     i2l518:
 13498  00366A  A8A1               	btfss	4001,4,c	;volatile
 13499  00366C  D7FE               	goto	i2l518
 13500                           
 13501                           ;main.c: 787: }
 13502                           ;main.c: 789: PIR2bits.EEIF = 0;
 13503  00366E  98A1               	bcf	4001,4,c	;volatile
 13504                           
 13505                           ;main.c: 790: EECON1bits.WREN = 0;
 13506  003670  94A6               	bcf	4006,2,c	;volatile
 13507  003672  0012               	return		;funcret
 13508  003674                     __end_ofi2_Eeprom_WriteByte:
 13509                           	opt stack 0
 13510                           pclatu	equ	0xFFB
 13511                           pclath	equ	0xFFA
 13512                           tblptru	equ	0xFF8
 13513                           tblptrh	equ	0xFF7
 13514                           tblptrl	equ	0xFF6
 13515                           tablat	equ	0xFF5
 13516                           prodh	equ	0xFF4
 13517                           prodl	equ	0xFF3
 13518                           intcon	equ	0xFF2
 13519                           intcon2	equ	0xFF1
 13520                           intcon3	equ	0xFF0
 13521                           postinc0	equ	0xFEE
 13522                           fsr0h	equ	0xFEA
 13523                           fsr0l	equ	0xFE9
 13524                           wreg	equ	0xFE8
 13525                           postdec1	equ	0xFE5
 13526                           plusw1	equ	0xFE3
 13527                           fsr1h	equ	0xFE2
 13528                           fsr1l	equ	0xFE1
 13529                           indf2	equ	0xFDF
 13530                           postinc2	equ	0xFDE
 13531                           postdec2	equ	0xFDD
 13532                           plusw2	equ	0xFDB
 13533                           fsr2h	equ	0xFDA
 13534                           fsr2l	equ	0xFD9
 13535                           status	equ	0xFD8
 13536                           
 13537 ;; *************** function i2_Eeprom_ReadByte *****************
 13538 ;; Defined at:
 13539 ;;		line 750 in file "../main.c"
 13540 ;; Parameters:    Size  Location     Type
 13541 ;;  address         2    0[COMRAM] unsigned int 
 13542 ;; Auto vars:     Size  Location     Type
 13543 ;;		None
 13544 ;; Return value:  Size  Location     Type
 13545 ;;                  1    wreg      unsigned char 
 13546 ;; Registers used:
 13547 ;;		wreg, status,2
 13548 ;; Tracked objects:
 13549 ;;		On entry : 0/0
 13550 ;;		On exit  : 0/0
 13551 ;;		Unchanged: 0/0
 13552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13553 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13554 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13555 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13556 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13557 ;;Total ram usage:        2 bytes
 13558 ;; Hardware stack levels used:    1
 13559 ;; This function calls:
 13560 ;;		Nothing
 13561 ;; This function is called by:
 13562 ;;		i2_stopOperation
 13563 ;; This function uses a non-reentrant model
 13564 ;;
 13565                           
 13566                           	psect	text39
 13567  00375E                     __ptext39:
 13568                           	opt stack 0
 13569  00375E                     i2_Eeprom_ReadByte:
 13570                           	opt stack 24
 13571                           
 13572                           ;main.c: 752: EEADRH = (uint8_t)(address >> 8);
 13573                           
 13574                           ;incstack = 0
 13575  00375E  5002               	movf	i2Eeprom_ReadByte@address+1,w,c
 13576  003760  6EAA               	movwf	4010,c	;volatile
 13577                           
 13578                           ;main.c: 753: EEADR = (uint8_t)address;
 13579  003762  C001  FFA9         	movff	i2Eeprom_ReadByte@address,4009	;volatile
 13580                           
 13581                           ;main.c: 755: EECON1bits.EEPGD = 0;
 13582  003766  9EA6               	bcf	4006,7,c	;volatile
 13583                           
 13584                           ;main.c: 756: EECON1bits.CFGS = 0;
 13585  003768  9CA6               	bcf	4006,6,c	;volatile
 13586                           
 13587                           ;main.c: 757: EECON1bits.RD = 1;
 13588  00376A  80A6               	bsf	4006,0,c	;volatile
 13589  00376C                     i2l512:
 13590  00376C  B0A6               	btfsc	4006,0,c	;volatile
 13591  00376E  D7FE               	goto	i2l512
 13592                           
 13593                           ;main.c: 763: return EEDATA;
 13594  003770  50A8               	movf	4008,w,c	;volatile
 13595  003772  0012               	return	
 13596  003774                     __end_ofi2_Eeprom_ReadByte:
 13597                           	opt stack 0
 13598                           pclatu	equ	0xFFB
 13599                           pclath	equ	0xFFA
 13600                           tblptru	equ	0xFF8
 13601                           tblptrh	equ	0xFF7
 13602                           tblptrl	equ	0xFF6
 13603                           tablat	equ	0xFF5
 13604                           prodh	equ	0xFF4
 13605                           prodl	equ	0xFF3
 13606                           intcon	equ	0xFF2
 13607                           intcon2	equ	0xFF1
 13608                           intcon3	equ	0xFF0
 13609                           postinc0	equ	0xFEE
 13610                           fsr0h	equ	0xFEA
 13611                           fsr0l	equ	0xFE9
 13612                           wreg	equ	0xFE8
 13613                           postdec1	equ	0xFE5
 13614                           plusw1	equ	0xFE3
 13615                           fsr1h	equ	0xFE2
 13616                           fsr1l	equ	0xFE1
 13617                           indf2	equ	0xFDF
 13618                           postinc2	equ	0xFDE
 13619                           postdec2	equ	0xFDD
 13620                           plusw2	equ	0xFDB
 13621                           fsr2h	equ	0xFDA
 13622                           fsr2l	equ	0xFD9
 13623                           status	equ	0xFD8
 13624                           
 13625 ;; *************** function i2_printf *****************
 13626 ;; Defined at:
 13627 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 13628 ;; Parameters:    Size  Location     Type
 13629 ;;  f               2   12[COMRAM] PTR const unsigned char 
 13630 ;;		 -> STR_39(22), STR_38(20), STR_37(23), STR_36(23), 
 13631 ;;		 -> STR_35(23), STR_34(17), STR_33(23), STR_32(23), 
 13632 ;;		 -> STR_31(17), STR_30(17), STR_29(17), STR_28(17), 
 13633 ;;		 -> STR_27(17), STR_26(17), STR_25(17), STR_24(17), 
 13634 ;;		 -> STR_23(17), STR_22(17), STR_21(23), STR_20(23), 
 13635 ;;		 -> STR_19(17), STR_18(21), STR_17(17), STR_16(21), 
 13636 ;;		 -> STR_15(17), STR_14(21), STR_13(17), STR_12(19), 
 13637 ;;		 -> STR_11(17), STR_10(19), STR_9(17), STR_8(25), 
 13638 ;;		 -> STR_7(17), STR_6(17), STR_5(17), STR_4(17), 
 13639 ;;		 -> STR_3(17), STR_2(17), STR_1(17), 
 13640 ;; Auto vars:     Size  Location     Type
 13641 ;;  printf          4    0        struct .
 13642 ;;  printf          3    0        PTR const unsigned char 
 13643 ;;  printf          2   29[COMRAM] int 
 13644 ;;  printf          2   26[COMRAM] unsigned int 
 13645 ;;  printf          2   23[COMRAM] PTR void [1]
 13646 ;;		 -> ?i2_printf(2), ?_printf(2), 
 13647 ;;  printf          2    0        unsigned int 
 13648 ;;  printf          1   31[COMRAM] char 
 13649 ;;  printf          1   28[COMRAM] unsigned char 
 13650 ;;  printf          1   25[COMRAM] char 
 13651 ;;  printf          1   22[COMRAM] unsigned char 
 13652 ;; Return value:  Size  Location     Type
 13653 ;;                  2   12[COMRAM] int 
 13654 ;; Registers used:
 13655 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13656 ;; Tracked objects:
 13657 ;;		On entry : 0/0
 13658 ;;		On exit  : 0/0
 13659 ;;		Unchanged: 0/0
 13660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13661 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13662 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13663 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13664 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13665 ;;Total ram usage:       20 bytes
 13666 ;; Hardware stack levels used:    1
 13667 ;; Hardware stack levels required when called:    2
 13668 ;; This function calls:
 13669 ;;		i2___lwdiv
 13670 ;;		i2___lwmod
 13671 ;;		i2___wmul
 13672 ;;		i2_isdigit
 13673 ;;		i2_putch
 13674 ;; This function is called by:
 13675 ;;		_keypressed
 13676 ;;		_ISR
 13677 ;; This function uses a non-reentrant model
 13678 ;;
 13679                           
 13680                           	psect	text40
 13681  0022BC                     __ptext40:
 13682                           	opt stack 0
 13683  0022BC                     i2_printf:
 13684                           	opt stack 23
 13685                           
 13686                           ;doprnt.c: 466: va_list ap;
 13687                           ;doprnt.c: 499: signed char c;
 13688                           ;doprnt.c: 501: int width;
 13689                           ;doprnt.c: 506: signed char prec;
 13690                           ;doprnt.c: 508: unsigned char flag;
 13691                           ;doprnt.c: 523: union {
 13692                           ;doprnt.c: 524: unsigned long vd;
 13693                           ;doprnt.c: 525: double integ;
 13694                           ;doprnt.c: 526: } tmpval;
 13695                           ;doprnt.c: 528: unsigned int val;
 13696                           ;doprnt.c: 529: unsigned len;
 13697                           ;doprnt.c: 530: const char * cp;
 13698                           ;doprnt.c: 533: *ap = __va_start();
 13699                           
 13700                           ;incstack = 0
 13701  0022BC  0E0F               	movlw	low (?i2_printf+2)
 13702  0022BE  6E18               	movwf	i2printf@ap,c
 13703  0022C0  0E00               	movlw	high (?i2_printf+2)
 13704  0022C2  6E19               	movwf	i2printf@ap+1,c
 13705                           
 13706                           ;doprnt.c: 536: while(c = *f++) {
 13707  0022C4  D174               	goto	i2l4561
 13708  0022C6                     i2l4435:
 13709                           
 13710                           ;doprnt.c: 538: if(c != '%')
 13711  0022C6  0E25               	movlw	37
 13712  0022C8  1820               	xorwf	i2printf@c,w,c
 13713  0022CA  B4D8               	btfsc	status,2,c
 13714  0022CC  D004               	goto	i2l4439
 13715                           
 13716                           ;doprnt.c: 540: {
 13717                           ;doprnt.c: 541: (putch(c) );
 13718  0022CE  5020               	movf	i2printf@c,w,c
 13719  0022D0  ECF5  F01B         	call	i2_putch
 13720                           
 13721                           ;doprnt.c: 542: continue;
 13722  0022D4  D16C               	goto	i2l4561
 13723  0022D6                     i2l4439:
 13724                           
 13725                           ;doprnt.c: 543: }
 13726                           ;doprnt.c: 546: width = 0;
 13727  0022D6  0E00               	movlw	0
 13728  0022D8  6E1F               	movwf	i2printf@width+1,c
 13729  0022DA  0E00               	movlw	0
 13730  0022DC  6E1E               	movwf	i2printf@width,c
 13731                           
 13732                           ;doprnt.c: 548: flag = 0;
 13733  0022DE  0E00               	movlw	0
 13734  0022E0  6E1D               	movwf	i2printf@flag,c
 13735                           
 13736                           ;doprnt.c: 551: switch(*f) {
 13737                           
 13738                           ;doprnt.c: 550: for(;;) {
 13739  0022E2  D003               	goto	i2l4445
 13740  0022E4                     i2l4441:
 13741                           
 13742                           ;doprnt.c: 580: flag |= 0x04;
 13743  0022E4  841D               	bsf	i2printf@flag,2,c
 13744                           
 13745                           ;doprnt.c: 581: f++;
 13746  0022E6  4A0D               	infsnz	i2printf@f,f,c
 13747  0022E8  2A0E               	incf	i2printf@f+1,f,c
 13748  0022EA                     i2l4445:
 13749  0022EA  C00D  FFF6         	movff	i2printf@f,tblptrl
 13750  0022EE  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 13751  0022F2                     	if	0	;tblptru may be non-zero
 13752  0022F2                     	endif
 13753  0022F2                     	if	0	;tblptru may be non-zero
 13754  0022F2                     	endif
 13755  0022F2  0008               	tblrd		*
 13756  0022F4  50F5               	movf	tablat,w,c
 13757                           
 13758                           ; Switch size 1, requested type "space"
 13759                           ; Number of cases is 1, Range of values is 48 to 48
 13760                           ; switch strategies available:
 13761                           ; Name         Instructions Cycles
 13762                           ; simple_byte            4     3 (average)
 13763                           ;	Chosen strategy is simple_byte
 13764  0022F6  0A30               	xorlw	48	; case 48
 13765  0022F8  B4D8               	btfsc	status,2,c
 13766  0022FA  D7F4               	goto	i2l4441
 13767                           
 13768                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 13769                           
 13770                           ;doprnt.c: 586: }
 13771                           
 13772                           ;doprnt.c: 585: break;
 13773  0022FC  C00D  FFF6         	movff	i2printf@f,tblptrl
 13774  002300  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 13775  002304                     	if	0	;tblptru may be non-zero
 13776  002304                     	endif
 13777  002304                     	if	0	;tblptru may be non-zero
 13778  002304                     	endif
 13779  002304  0008               	tblrd		*
 13780  002306  50F5               	movf	tablat,w,c
 13781  002308  EC70  F01B         	call	i2_isdigit
 13782  00230C  A0D8               	btfss	status,0,c
 13783  00230E  D035               	goto	i2l4463
 13784                           
 13785                           ;doprnt.c: 598: width = 0;
 13786  002310  0E00               	movlw	0
 13787  002312  6E1F               	movwf	i2printf@width+1,c
 13788  002314  0E00               	movlw	0
 13789  002316  6E1E               	movwf	i2printf@width,c
 13790  002318                     i2l4451:
 13791                           
 13792                           ;doprnt.c: 600: width *= 10;
 13793  002318  C01E  F001         	movff	i2printf@width,i2___wmul@multiplier
 13794  00231C  C01F  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 13795  002320  0E00               	movlw	0
 13796  002322  6E04               	movwf	i2___wmul@multiplicand+1,c
 13797  002324  0E0A               	movlw	10
 13798  002326  6E03               	movwf	i2___wmul@multiplicand,c
 13799  002328  EC3A  F01B         	call	i2___wmul	;wreg free
 13800  00232C  C001  F01E         	movff	?i2___wmul,i2printf@width
 13801  002330  C002  F01F         	movff	?i2___wmul+1,i2printf@width+1
 13802                           
 13803                           ;doprnt.c: 601: width += *f++ - '0';
 13804  002334  0ED0               	movlw	208
 13805  002336  6E13               	movwf	??i2_printf& (0+255),c
 13806  002338  0EFF               	movlw	255
 13807  00233A  6E14               	movwf	(??i2_printf+1)& (0+255),c
 13808  00233C  C00D  FFF6         	movff	i2printf@f,tblptrl
 13809  002340  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 13810  002344                     	if	0	;tblptru may be non-zero
 13811  002344                     	endif
 13812  002344                     	if	0	;tblptru may be non-zero
 13813  002344                     	endif
 13814  002344  0008               	tblrd		*
 13815  002346  50F5               	movf	tablat,w,c
 13816  002348  6E15               	movwf	(??i2_printf+2)& (0+255),c
 13817  00234A  6A16               	clrf	(??i2_printf+3)& (0+255),c
 13818  00234C  5013               	movf	??i2_printf,w,c
 13819  00234E  2615               	addwf	??i2_printf+2,f,c
 13820  002350  5014               	movf	??i2_printf+1,w,c
 13821  002352  2216               	addwfc	??i2_printf+3,f,c
 13822  002354  5015               	movf	??i2_printf+2,w,c
 13823  002356  261E               	addwf	i2printf@width,f,c
 13824  002358  5016               	movf	??i2_printf+3,w,c
 13825  00235A  221F               	addwfc	i2printf@width+1,f,c
 13826  00235C  4A0D               	infsnz	i2printf@f,f,c
 13827  00235E  2A0E               	incf	i2printf@f+1,f,c
 13828                           
 13829                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 13830  002360  C00D  FFF6         	movff	i2printf@f,tblptrl
 13831  002364  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 13832  002368                     	if	0	;tblptru may be non-zero
 13833  002368                     	endif
 13834  002368                     	if	0	;tblptru may be non-zero
 13835  002368                     	endif
 13836  002368  0008               	tblrd		*
 13837  00236A  50F5               	movf	tablat,w,c
 13838  00236C  EC70  F01B         	call	i2_isdigit
 13839  002370  A0D8               	btfss	status,0,c
 13840  002372  D003               	goto	i2l4463
 13841  002374  D7D1               	goto	i2l4451
 13842  002376                     i2l4459:
 13843                           
 13844                           ;doprnt.c: 721: flag |= 0x80;
 13845  002376  8E1D               	bsf	i2printf@flag,7,c
 13846                           
 13847                           ;doprnt.c: 723: break;
 13848  002378  D017               	goto	i2l673
 13849  00237A                     i2l4463:
 13850  00237A  C00D  FFF6         	movff	i2printf@f,tblptrl
 13851  00237E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 13852  002382  4A0D               	infsnz	i2printf@f,f,c
 13853  002384  2A0E               	incf	i2printf@f+1,f,c
 13854  002386                     	if	0	;tblptru may be non-zero
 13855  002386                     	endif
 13856  002386                     	if	0	;tblptru may be non-zero
 13857  002386                     	endif
 13858  002386  0008               	tblrd		*
 13859  002388  CFF5 F020          	movff	tablat,i2printf@c
 13860  00238C  5020               	movf	i2printf@c,w,c
 13861                           
 13862                           ; Switch size 1, requested type "space"
 13863                           ; Number of cases is 4, Range of values is 0 to 120
 13864                           ; switch strategies available:
 13865                           ; Name         Instructions Cycles
 13866                           ; simple_byte           13     7 (average)
 13867                           ;	Chosen strategy is simple_byte
 13868  00238E  0A00               	xorlw	0	; case 0
 13869  002390  B4D8               	btfsc	status,2,c
 13870  002392  0012               	return	
 13871  002394  0A64               	xorlw	100	; case 100
 13872  002396  B4D8               	btfsc	status,2,c
 13873  002398  D007               	goto	i2l673
 13874  00239A  0A0D               	xorlw	13	; case 105
 13875  00239C  B4D8               	btfsc	status,2,c
 13876  00239E  D004               	goto	i2l673
 13877  0023A0  0A11               	xorlw	17	; case 120
 13878  0023A2  B4D8               	btfsc	status,2,c
 13879  0023A4  D7E8               	goto	i2l4459
 13880  0023A6  D103               	goto	i2l4561
 13881  0023A8                     i2l673:
 13882                           
 13883                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
 13884  0023A8  BE1D               	btfsc	i2printf@flag,7,c
 13885  0023AA  D015               	goto	i2l4475
 13886                           
 13887                           ;doprnt.c: 1253: {
 13888                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 13889  0023AC  C018  FFD9         	movff	i2printf@ap,fsr2l
 13890  0023B0  C019  FFDA         	movff	i2printf@ap+1,fsr2h
 13891  0023B4  CFDE F01B          	movff	postinc2,i2printf@val
 13892  0023B8  CFDD F01C          	movff	postdec2,i2printf@val+1
 13893  0023BC  0E02               	movlw	2
 13894  0023BE  2618               	addwf	i2printf@ap,f,c
 13895  0023C0  0E00               	movlw	0
 13896  0023C2  2219               	addwfc	i2printf@ap+1,f,c
 13897                           
 13898                           ;doprnt.c: 1261: if((int)val < 0) {
 13899  0023C4  AE1C               	btfss	i2printf@val+1,7,c
 13900  0023C6  D044               	goto	i2l4509
 13901                           
 13902                           ;doprnt.c: 1262: flag |= 0x03;
 13903  0023C8  0E03               	movlw	3
 13904  0023CA  121D               	iorwf	i2printf@flag,f,c
 13905                           
 13906                           ;doprnt.c: 1263: val = -val;
 13907  0023CC  6C1B               	negf	i2printf@val,c
 13908  0023CE  1E1C               	comf	i2printf@val+1,f,c
 13909  0023D0  B0D8               	btfsc	status,0,c
 13910  0023D2  2A1C               	incf	i2printf@val+1,f,c
 13911                           
 13912                           ;doprnt.c: 1264: }
 13913                           ;doprnt.c: 1266: }
 13914  0023D4  D03D               	goto	i2l4509
 13915  0023D6                     i2l4475:
 13916                           
 13917                           ;doprnt.c: 1268: else
 13918                           ;doprnt.c: 1273: {
 13919                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 13920  0023D6  C018  FFD9         	movff	i2printf@ap,fsr2l
 13921  0023DA  C019  FFDA         	movff	i2printf@ap+1,fsr2h
 13922  0023DE  CFDE F01B          	movff	postinc2,i2printf@val
 13923  0023E2  CFDD F01C          	movff	postdec2,i2printf@val+1
 13924  0023E6  0E02               	movlw	2
 13925  0023E8  2618               	addwf	i2printf@ap,f,c
 13926  0023EA  0E00               	movlw	0
 13927  0023EC  2219               	addwfc	i2printf@ap+1,f,c
 13928                           
 13929                           ;doprnt.c: 1287: }
 13930                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
 13931  0023EE  D030               	goto	i2l4509
 13932  0023F0                     i2l4479:
 13933                           
 13934                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 13935  0023F0  0E01               	movlw	1
 13936  0023F2  6E20               	movwf	i2printf@c,c
 13937  0023F4                     i2l4481:
 13938  0023F4  0E05               	movlw	5
 13939  0023F6  1820               	xorwf	i2printf@c,w,c
 13940  0023F8  B4D8               	btfsc	status,2,c
 13941  0023FA  D032               	goto	i2l4511
 13942                           
 13943                           ;doprnt.c: 1306: if(val < dpowers[c])
 13944  0023FC  5020               	movf	i2printf@c,w,c
 13945  0023FE  0D02               	mullw	2
 13946  002400  0E98               	movlw	low _dpowers
 13947  002402  24F3               	addwf	prodl,w,c
 13948  002404  6EF6               	movwf	tblptrl,c
 13949  002406  0EFD               	movlw	high _dpowers
 13950  002408  20F4               	addwfc	prodh,w,c
 13951  00240A  6EF7               	movwf	tblptrh,c
 13952  00240C                     	if	0	;There are less than 3 active tblptr bytes
 13953  00240C                     	endif
 13954  00240C  0009               	tblrd		*+
 13955  00240E  50F5               	movf	tablat,w,c
 13956  002410  5C1B               	subwf	i2printf@val,w,c
 13957  002412  0009               	tblrd		*+
 13958  002414  50F5               	movf	tablat,w,c
 13959  002416  581C               	subwfb	i2printf@val+1,w,c
 13960  002418  A0D8               	btfss	status,0,c
 13961  00241A  D022               	goto	i2l4511
 13962                           
 13963                           ;doprnt.c: 1307: break;
 13964  00241C  2A20               	incf	i2printf@c,f,c
 13965  00241E  D7EA               	goto	i2l4481
 13966  002420                     i2l4493:
 13967                           
 13968                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 13969  002420  0E01               	movlw	1
 13970  002422  6E20               	movwf	i2printf@c,c
 13971  002424                     i2l4495:
 13972  002424  0E04               	movlw	4
 13973  002426  1820               	xorwf	i2printf@c,w,c
 13974  002428  B4D8               	btfsc	status,2,c
 13975  00242A  D01A               	goto	i2l4511
 13976                           
 13977                           ;doprnt.c: 1317: if(val < hexpowers[c])
 13978  00242C  5020               	movf	i2printf@c,w,c
 13979  00242E  0D02               	mullw	2
 13980  002430  0EA2               	movlw	low _hexpowers
 13981  002432  24F3               	addwf	prodl,w,c
 13982  002434  6EF6               	movwf	tblptrl,c
 13983  002436  0EFD               	movlw	high _hexpowers
 13984  002438  20F4               	addwfc	prodh,w,c
 13985  00243A  6EF7               	movwf	tblptrh,c
 13986  00243C                     	if	0	;There are less than 3 active tblptr bytes
 13987  00243C                     	endif
 13988  00243C  0009               	tblrd		*+
 13989  00243E  50F5               	movf	tablat,w,c
 13990  002440  5C1B               	subwf	i2printf@val,w,c
 13991  002442  0009               	tblrd		*+
 13992  002444  50F5               	movf	tablat,w,c
 13993  002446  581C               	subwfb	i2printf@val+1,w,c
 13994  002448  A0D8               	btfss	status,0,c
 13995  00244A  D00A               	goto	i2l4511
 13996                           
 13997                           ;doprnt.c: 1318: break;
 13998  00244C  2A20               	incf	i2printf@c,f,c
 13999  00244E  D7EA               	goto	i2l4495
 14000  002450                     i2l4509:
 14001  002450  501D               	movf	i2printf@flag,w,c
 14002  002452  0B80               	andlw	128
 14003                           
 14004                           ; Switch size 1, requested type "space"
 14005                           ; Number of cases is 2, Range of values is 0 to 128
 14006                           ; switch strategies available:
 14007                           ; Name         Instructions Cycles
 14008                           ; simple_byte            7     4 (average)
 14009                           ;	Chosen strategy is simple_byte
 14010  002454  0A00               	xorlw	0	; case 0
 14011  002456  B4D8               	btfsc	status,2,c
 14012  002458  D7CB               	goto	i2l4479
 14013  00245A  0A80               	xorlw	128	; case 128
 14014  00245C  B4D8               	btfsc	status,2,c
 14015  00245E  D7E0               	goto	i2l4493
 14016  002460                     i2l4511:
 14017                           
 14018                           ;doprnt.c: 1345: if(width && flag & 0x03)
 14019  002460  501E               	movf	i2printf@width,w,c
 14020  002462  101F               	iorwf	i2printf@width+1,w,c
 14021  002464  B4D8               	btfsc	status,2,c
 14022  002466  D009               	goto	i2l4517
 14023  002468  C01D  F013         	movff	i2printf@flag,??i2_printf
 14024  00246C  0E03               	movlw	3
 14025  00246E  1613               	andwf	??i2_printf,f,c
 14026  002470  B4D8               	btfsc	status,2,c
 14027  002472  D003               	goto	i2l4517
 14028                           
 14029                           ;doprnt.c: 1346: width--;
 14030  002474  061E               	decf	i2printf@width,f,c
 14031  002476  A0D8               	btfss	status,0,c
 14032  002478  061F               	decf	i2printf@width+1,f,c
 14033  00247A                     i2l4517:
 14034                           
 14035                           ;doprnt.c: 1381: if(width > c)
 14036  00247A  0E80               	movlw	128
 14037  00247C  BE20               	btfsc	i2printf@c,7,c
 14038  00247E  0E7F               	movlw	127
 14039  002480  6E13               	movwf	??i2_printf& (0+255),c
 14040  002482  501E               	movf	i2printf@width,w,c
 14041  002484  5C20               	subwf	i2printf@c,w,c
 14042  002486  501F               	movf	i2printf@width+1,w,c
 14043  002488  0A80               	xorlw	128
 14044  00248A  5813               	subwfb	??i2_printf& (0+255),w,c
 14045  00248C  B0D8               	btfsc	status,0,c
 14046  00248E  D007               	goto	i2l4521
 14047                           
 14048                           ;doprnt.c: 1382: width -= c;
 14049  002490  5020               	movf	i2printf@c,w,c
 14050  002492  5E1E               	subwf	i2printf@width,f,c
 14051  002494  0E00               	movlw	0
 14052  002496  BE20               	btfsc	i2printf@c,7,c
 14053  002498  0EFF               	movlw	255
 14054  00249A  5A1F               	subwfb	i2printf@width+1,f,c
 14055  00249C  D004               	goto	i2l4523
 14056  00249E                     i2l4521:
 14057                           
 14058                           ;doprnt.c: 1383: else
 14059                           ;doprnt.c: 1384: width = 0;
 14060  00249E  0E00               	movlw	0
 14061  0024A0  6E1F               	movwf	i2printf@width+1,c
 14062  0024A2  0E00               	movlw	0
 14063  0024A4  6E1E               	movwf	i2printf@width,c
 14064  0024A6                     i2l4523:
 14065                           
 14066                           ;doprnt.c: 1387: if(flag & 0x04) {
 14067  0024A6  A41D               	btfss	i2printf@flag,2,c
 14068  0024A8  D014               	goto	i2l4535
 14069                           
 14070                           ;doprnt.c: 1392: if(flag & 0x03)
 14071  0024AA  C01D  F013         	movff	i2printf@flag,??i2_printf
 14072  0024AE  0E03               	movlw	3
 14073  0024B0  1613               	andwf	??i2_printf,f,c
 14074  0024B2  B4D8               	btfsc	status,2,c
 14075  0024B4  D003               	goto	i2l4529
 14076                           
 14077                           ;doprnt.c: 1393: (putch('-') );
 14078  0024B6  0E2D               	movlw	45
 14079  0024B8  ECF5  F01B         	call	i2_putch
 14080  0024BC                     i2l4529:
 14081                           
 14082                           ;doprnt.c: 1415: if(width)
 14083  0024BC  501E               	movf	i2printf@width,w,c
 14084  0024BE  101F               	iorwf	i2printf@width+1,w,c
 14085  0024C0  B4D8               	btfsc	status,2,c
 14086  0024C2  D01E               	goto	i2l4545
 14087                           
 14088                           ;doprnt.c: 1417: (putch('0') );
 14089                           
 14090                           ;doprnt.c: 1416: do
 14091  0024C4  0E30               	movlw	48
 14092  0024C6  ECF5  F01B         	call	i2_putch
 14093                           
 14094                           ;doprnt.c: 1418: while(--width);
 14095  0024CA  061E               	decf	i2printf@width,f,c
 14096  0024CC  A0D8               	btfss	status,0,c
 14097  0024CE  061F               	decf	i2printf@width+1,f,c
 14098  0024D0  D7F5               	goto	i2l4529
 14099  0024D2                     i2l4535:
 14100                           
 14101                           ;doprnt.c: 1422: {
 14102                           ;doprnt.c: 1424: if(width
 14103                           ;doprnt.c: 1428: )
 14104  0024D2  501E               	movf	i2printf@width,w,c
 14105  0024D4  101F               	iorwf	i2printf@width+1,w,c
 14106  0024D6  B4D8               	btfsc	status,2,c
 14107  0024D8  D00A               	goto	i2l4541
 14108  0024DA                     i2l4537:
 14109                           
 14110                           ;doprnt.c: 1430: (putch(' ') );
 14111  0024DA  0E20               	movlw	32
 14112  0024DC  ECF5  F01B         	call	i2_putch
 14113                           
 14114                           ;doprnt.c: 1431: while(--width);
 14115  0024E0  061E               	decf	i2printf@width,f,c
 14116  0024E2  A0D8               	btfss	status,0,c
 14117  0024E4  061F               	decf	i2printf@width+1,f,c
 14118  0024E6  501E               	movf	i2printf@width,w,c
 14119  0024E8  101F               	iorwf	i2printf@width+1,w,c
 14120  0024EA  A4D8               	btfss	status,2,c
 14121  0024EC  D7F6               	goto	i2l4537
 14122  0024EE                     i2l4541:
 14123                           
 14124                           ;doprnt.c: 1438: if(flag & 0x03)
 14125  0024EE  C01D  F013         	movff	i2printf@flag,??i2_printf
 14126  0024F2  0E03               	movlw	3
 14127  0024F4  1613               	andwf	??i2_printf,f,c
 14128  0024F6  B4D8               	btfsc	status,2,c
 14129  0024F8  D003               	goto	i2l4545
 14130                           
 14131                           ;doprnt.c: 1439: (putch('-') );
 14132  0024FA  0E2D               	movlw	45
 14133  0024FC  ECF5  F01B         	call	i2_putch
 14134  002500                     i2l4545:
 14135                           
 14136                           ;doprnt.c: 1469: }
 14137                           ;doprnt.c: 1472: prec = c;
 14138  002500  C020  F01A         	movff	i2printf@c,i2printf@prec
 14139                           
 14140                           ;doprnt.c: 1474: while(prec--) {
 14141  002504  D050               	goto	i2l4559
 14142  002506                     i2l4547:
 14143                           
 14144                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 14145  002506  501A               	movf	i2printf@prec,w,c
 14146  002508  0D02               	mullw	2
 14147  00250A  0E98               	movlw	low _dpowers
 14148  00250C  24F3               	addwf	prodl,w,c
 14149  00250E  6EF6               	movwf	tblptrl,c
 14150  002510  0EFD               	movlw	high _dpowers
 14151  002512  20F4               	addwfc	prodh,w,c
 14152  002514  6EF7               	movwf	tblptrh,c
 14153  002516                     	if	0	;There are less than 3 active tblptr bytes
 14154  002516                     	endif
 14155  002516  0009               	tblrd		*+
 14156  002518  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
 14157  00251C  000A               	tblrd		*-
 14158  00251E  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 14159  002522  C01B  F001         	movff	i2printf@val,i2___lwdiv@dividend
 14160  002526  C01C  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 14161  00252A  ECFA  F019         	call	i2___lwdiv	;wreg free
 14162  00252E  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
 14163  002532  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 14164  002536  0E00               	movlw	0
 14165  002538  6E0B               	movwf	i2___lwmod@divisor+1,c
 14166  00253A  0E0A               	movlw	10
 14167  00253C  6E0A               	movwf	i2___lwmod@divisor,c
 14168  00253E  EC6F  F01A         	call	i2___lwmod	;wreg free
 14169  002542  5008               	movf	?i2___lwmod,w,c
 14170  002544  0F30               	addlw	48
 14171  002546  6E20               	movwf	i2printf@c,c
 14172                           
 14173                           ;doprnt.c: 1491: break;
 14174  002548  D02B               	goto	i2l4557
 14175  00254A                     i2l4549:
 14176                           
 14177                           ;doprnt.c: 1499: {
 14178                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 14179  00254A  C01B  F001         	movff	i2printf@val,i2___lwdiv@dividend
 14180  00254E  C01C  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 14181  002552  501A               	movf	i2printf@prec,w,c
 14182  002554  0D02               	mullw	2
 14183  002556  0EA2               	movlw	low _hexpowers
 14184  002558  24F3               	addwf	prodl,w,c
 14185  00255A  6EF6               	movwf	tblptrl,c
 14186  00255C  0EFD               	movlw	high _hexpowers
 14187  00255E  20F4               	addwfc	prodh,w,c
 14188  002560  6EF7               	movwf	tblptrh,c
 14189  002562                     	if	0	;There are less than 3 active tblptr bytes
 14190  002562                     	endif
 14191  002562  0009               	tblrd		*+
 14192  002564  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
 14193  002568  000A               	tblrd		*-
 14194  00256A  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 14195  00256E  ECFA  F019         	call	i2___lwdiv	;wreg free
 14196  002572  5001               	movf	?i2___lwdiv,w,c
 14197  002574  0B0F               	andlw	15
 14198  002576  6E17               	movwf	i2printf@idx,c
 14199                           
 14200                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 14201  002578  5017               	movf	i2printf@idx,w,c
 14202  00257A  0D01               	mullw	1
 14203  00257C  0E88               	movlw	low STR_40
 14204  00257E  24F3               	addwf	prodl,w,c
 14205  002580  6EF6               	movwf	tblptrl,c
 14206  002582  0EFE               	movlw	high STR_40
 14207  002584  20F4               	addwfc	prodh,w,c
 14208  002586  6EF7               	movwf	tblptrh,c
 14209  002588                     	if	0	;There are less than 3 active tblptr bytes
 14210  002588                     	endif
 14211  002588  0008               	tblrd		*
 14212  00258A  CFF5 F020          	movff	tablat,i2printf@c
 14213                           
 14214                           ;doprnt.c: 1523: }
 14215                           
 14216                           ;doprnt.c: 1508: }
 14217                           ;doprnt.c: 1510: break;
 14218  00258E  D008               	goto	i2l4557
 14219  002590                     i2l4555:
 14220  002590  501D               	movf	i2printf@flag,w,c
 14221  002592  0B80               	andlw	128
 14222                           
 14223                           ; Switch size 1, requested type "space"
 14224                           ; Number of cases is 2, Range of values is 0 to 128
 14225                           ; switch strategies available:
 14226                           ; Name         Instructions Cycles
 14227                           ; simple_byte            7     4 (average)
 14228                           ;	Chosen strategy is simple_byte
 14229  002594  0A00               	xorlw	0	; case 0
 14230  002596  B4D8               	btfsc	status,2,c
 14231  002598  D7B6               	goto	i2l4547
 14232  00259A  0A80               	xorlw	128	; case 128
 14233  00259C  B4D8               	btfsc	status,2,c
 14234  00259E  D7D5               	goto	i2l4549
 14235  0025A0                     i2l4557:
 14236                           
 14237                           ;doprnt.c: 1524: (putch(c) );
 14238  0025A0  5020               	movf	i2printf@c,w,c
 14239  0025A2  ECF5  F01B         	call	i2_putch
 14240  0025A6                     i2l4559:
 14241  0025A6  061A               	decf	i2printf@prec,f,c
 14242  0025A8  281A               	incf	i2printf@prec,w,c
 14243  0025AA  A4D8               	btfss	status,2,c
 14244  0025AC  D7F1               	goto	i2l4555
 14245  0025AE                     i2l4561:
 14246  0025AE  C00D  FFF6         	movff	i2printf@f,tblptrl
 14247  0025B2  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 14248  0025B6  4A0D               	infsnz	i2printf@f,f,c
 14249  0025B8  2A0E               	incf	i2printf@f+1,f,c
 14250  0025BA                     	if	0	;tblptru may be non-zero
 14251  0025BA                     	endif
 14252  0025BA                     	if	0	;tblptru may be non-zero
 14253  0025BA                     	endif
 14254  0025BA  0008               	tblrd		*
 14255  0025BC  CFF5 F020          	movff	tablat,i2printf@c
 14256  0025C0  5020               	movf	i2printf@c,w,c
 14257  0025C2  B4D8               	btfsc	status,2,c
 14258  0025C4  0012               	return	
 14259  0025C6  D67F               	goto	i2l4435
 14260  0025C8                     __end_ofi2_printf:
 14261                           	opt stack 0
 14262                           pclatu	equ	0xFFB
 14263                           pclath	equ	0xFFA
 14264                           tblptru	equ	0xFF8
 14265                           tblptrh	equ	0xFF7
 14266                           tblptrl	equ	0xFF6
 14267                           tablat	equ	0xFF5
 14268                           prodh	equ	0xFF4
 14269                           prodl	equ	0xFF3
 14270                           intcon	equ	0xFF2
 14271                           intcon2	equ	0xFF1
 14272                           intcon3	equ	0xFF0
 14273                           postinc0	equ	0xFEE
 14274                           fsr0h	equ	0xFEA
 14275                           fsr0l	equ	0xFE9
 14276                           wreg	equ	0xFE8
 14277                           postdec1	equ	0xFE5
 14278                           plusw1	equ	0xFE3
 14279                           fsr1h	equ	0xFE2
 14280                           fsr1l	equ	0xFE1
 14281                           indf2	equ	0xFDF
 14282                           postinc2	equ	0xFDE
 14283                           postdec2	equ	0xFDD
 14284                           plusw2	equ	0xFDB
 14285                           fsr2h	equ	0xFDA
 14286                           fsr2l	equ	0xFD9
 14287                           status	equ	0xFD8
 14288                           
 14289 ;; *************** function i2_putch *****************
 14290 ;; Defined at:
 14291 ;;		line 23 in file "../lcd.c"
 14292 ;; Parameters:    Size  Location     Type
 14293 ;;  data            1    wreg     unsigned char 
 14294 ;; Auto vars:     Size  Location     Type
 14295 ;;  data            1    2[COMRAM] unsigned char 
 14296 ;; Return value:  Size  Location     Type
 14297 ;;                  1    wreg      void 
 14298 ;; Registers used:
 14299 ;;		wreg, status,2, status,0, cstack
 14300 ;; Tracked objects:
 14301 ;;		On entry : 0/0
 14302 ;;		On exit  : 0/0
 14303 ;;		Unchanged: 0/0
 14304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14305 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14306 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14307 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14308 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14309 ;;Total ram usage:        1 bytes
 14310 ;; Hardware stack levels used:    1
 14311 ;; Hardware stack levels required when called:    1
 14312 ;; This function calls:
 14313 ;;		i2_lcdNibble
 14314 ;; This function is called by:
 14315 ;;		i2_printf
 14316 ;; This function uses a non-reentrant model
 14317 ;;
 14318                           
 14319                           	psect	text41
 14320  0037EA                     __ptext41:
 14321                           	opt stack 0
 14322  0037EA                     i2_putch:
 14323                           	opt stack 23
 14324                           
 14325                           ;incstack = 0
 14326                           ;i2putch@data stored from wreg
 14327  0037EA  6E03               	movwf	i2putch@data,c
 14328                           
 14329                           ;lcd.c: 24: LATDbits.LATD2 = 1;
 14330  0037EC  848C               	bsf	3980,2,c	;volatile
 14331                           
 14332                           ;lcd.c: 25: lcdNibble(data);
 14333  0037EE  5003               	movf	i2putch@data,w,c
 14334  0037F0  EC23  F01A         	call	i2_lcdNibble
 14335  0037F4  0012               	return		;funcret
 14336  0037F6                     __end_ofi2_putch:
 14337                           	opt stack 0
 14338                           pclatu	equ	0xFFB
 14339                           pclath	equ	0xFFA
 14340                           tblptru	equ	0xFF8
 14341                           tblptrh	equ	0xFF7
 14342                           tblptrl	equ	0xFF6
 14343                           tablat	equ	0xFF5
 14344                           prodh	equ	0xFF4
 14345                           prodl	equ	0xFF3
 14346                           intcon	equ	0xFF2
 14347                           intcon2	equ	0xFF1
 14348                           intcon3	equ	0xFF0
 14349                           postinc0	equ	0xFEE
 14350                           fsr0h	equ	0xFEA
 14351                           fsr0l	equ	0xFE9
 14352                           wreg	equ	0xFE8
 14353                           postdec1	equ	0xFE5
 14354                           plusw1	equ	0xFE3
 14355                           fsr1h	equ	0xFE2
 14356                           fsr1l	equ	0xFE1
 14357                           indf2	equ	0xFDF
 14358                           postinc2	equ	0xFDE
 14359                           postdec2	equ	0xFDD
 14360                           plusw2	equ	0xFDB
 14361                           fsr2h	equ	0xFDA
 14362                           fsr2l	equ	0xFD9
 14363                           status	equ	0xFD8
 14364                           
 14365 ;; *************** function i2_isdigit *****************
 14366 ;; Defined at:
 14367 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 14368 ;; Parameters:    Size  Location     Type
 14369 ;;  c               1    wreg     unsigned char 
 14370 ;; Auto vars:     Size  Location     Type
 14371 ;;  c               1    2[COMRAM] unsigned char 
 14372 ;; Return value:  Size  Location     Type
 14373 ;;		None               void
 14374 ;; Registers used:
 14375 ;;		wreg, status,2, status,0
 14376 ;; Tracked objects:
 14377 ;;		On entry : 0/0
 14378 ;;		On exit  : 0/0
 14379 ;;		Unchanged: 0/0
 14380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14381 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14382 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14383 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14384 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14385 ;;Total ram usage:        3 bytes
 14386 ;; Hardware stack levels used:    1
 14387 ;; This function calls:
 14388 ;;		Nothing
 14389 ;; This function is called by:
 14390 ;;		i2_printf
 14391 ;; This function uses a non-reentrant model
 14392 ;;
 14393                           
 14394                           	psect	text42
 14395  0036E0                     __ptext42:
 14396                           	opt stack 0
 14397  0036E0                     i2_isdigit:
 14398                           	opt stack 24
 14399                           
 14400                           ;incstack = 0
 14401                           ;i2isdigit@c stored from wreg
 14402  0036E0  6E03               	movwf	i2isdigit@c,c
 14403  0036E2  0E00               	movlw	0
 14404  0036E4  6E02               	movwf	i2_isdigit$1200,c
 14405  0036E6  0E3A               	movlw	58
 14406  0036E8  6003               	cpfslt	i2isdigit@c,c
 14407  0036EA  D005               	goto	i2l3909
 14408  0036EC  0E2F               	movlw	47
 14409  0036EE  6403               	cpfsgt	i2isdigit@c,c
 14410  0036F0  D002               	goto	i2l3909
 14411  0036F2  0E01               	movlw	1
 14412  0036F4  6E02               	movwf	i2_isdigit$1200,c
 14413  0036F6                     i2l3909:
 14414  0036F6  C002  F001         	movff	i2_isdigit$1200,??i2_isdigit
 14415  0036FA  3001               	rrcf	??i2_isdigit,w,c
 14416  0036FC  0012               	return	
 14417  0036FE                     __end_ofi2_isdigit:
 14418                           	opt stack 0
 14419                           pclatu	equ	0xFFB
 14420                           pclath	equ	0xFFA
 14421                           tblptru	equ	0xFF8
 14422                           tblptrh	equ	0xFF7
 14423                           tblptrl	equ	0xFF6
 14424                           tablat	equ	0xFF5
 14425                           prodh	equ	0xFF4
 14426                           prodl	equ	0xFF3
 14427                           intcon	equ	0xFF2
 14428                           intcon2	equ	0xFF1
 14429                           intcon3	equ	0xFF0
 14430                           postinc0	equ	0xFEE
 14431                           fsr0h	equ	0xFEA
 14432                           fsr0l	equ	0xFE9
 14433                           wreg	equ	0xFE8
 14434                           postdec1	equ	0xFE5
 14435                           plusw1	equ	0xFE3
 14436                           fsr1h	equ	0xFE2
 14437                           fsr1l	equ	0xFE1
 14438                           indf2	equ	0xFDF
 14439                           postinc2	equ	0xFDE
 14440                           postdec2	equ	0xFDD
 14441                           plusw2	equ	0xFDB
 14442                           fsr2h	equ	0xFDA
 14443                           fsr2l	equ	0xFD9
 14444                           status	equ	0xFD8
 14445                           
 14446 ;; *************** function i2___wmul *****************
 14447 ;; Defined at:
 14448 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 14449 ;; Parameters:    Size  Location     Type
 14450 ;;  multiplier      2    0[COMRAM] unsigned int 
 14451 ;;  multiplicand    2    2[COMRAM] unsigned int 
 14452 ;; Auto vars:     Size  Location     Type
 14453 ;;  __wmul          2    4[COMRAM] unsigned int 
 14454 ;; Return value:  Size  Location     Type
 14455 ;;                  2    0[COMRAM] unsigned int 
 14456 ;; Registers used:
 14457 ;;		wreg, status,2, status,0, prodl, prodh
 14458 ;; Tracked objects:
 14459 ;;		On entry : 0/0
 14460 ;;		On exit  : 0/0
 14461 ;;		Unchanged: 0/0
 14462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14463 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14464 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14466 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14467 ;;Total ram usage:        6 bytes
 14468 ;; Hardware stack levels used:    1
 14469 ;; This function calls:
 14470 ;;		Nothing
 14471 ;; This function is called by:
 14472 ;;		i2_printf
 14473 ;; This function uses a non-reentrant model
 14474 ;;
 14475                           
 14476                           	psect	text43
 14477  003674                     __ptext43:
 14478                           	opt stack 0
 14479  003674                     i2___wmul:
 14480                           	opt stack 24
 14481                           
 14482                           ;incstack = 0
 14483  003674  5001               	movf	i2___wmul@multiplier,w,c
 14484  003676  0203               	mulwf	i2___wmul@multiplicand,c
 14485  003678  CFF3 F005          	movff	prodl,i2___wmul@product
 14486  00367C  CFF4 F006          	movff	prodh,i2___wmul@product+1
 14487  003680  5001               	movf	i2___wmul@multiplier,w,c
 14488  003682  0204               	mulwf	i2___wmul@multiplicand+1,c
 14489  003684  50F3               	movf	prodl,w,c
 14490  003686  2606               	addwf	i2___wmul@product+1,f,c
 14491  003688  5002               	movf	i2___wmul@multiplier+1,w,c
 14492  00368A  0203               	mulwf	i2___wmul@multiplicand,c
 14493  00368C  50F3               	movf	prodl,w,c
 14494  00368E  2606               	addwf	i2___wmul@product+1,f,c
 14495  003690  C005  F001         	movff	i2___wmul@product,?i2___wmul
 14496  003694  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 14497  003698  0012               	return	
 14498  00369A                     __end_ofi2___wmul:
 14499                           	opt stack 0
 14500                           pclatu	equ	0xFFB
 14501                           pclath	equ	0xFFA
 14502                           tblptru	equ	0xFF8
 14503                           tblptrh	equ	0xFF7
 14504                           tblptrl	equ	0xFF6
 14505                           tablat	equ	0xFF5
 14506                           prodh	equ	0xFF4
 14507                           prodl	equ	0xFF3
 14508                           intcon	equ	0xFF2
 14509                           intcon2	equ	0xFF1
 14510                           intcon3	equ	0xFF0
 14511                           postinc0	equ	0xFEE
 14512                           fsr0h	equ	0xFEA
 14513                           fsr0l	equ	0xFE9
 14514                           wreg	equ	0xFE8
 14515                           postdec1	equ	0xFE5
 14516                           plusw1	equ	0xFE3
 14517                           fsr1h	equ	0xFE2
 14518                           fsr1l	equ	0xFE1
 14519                           indf2	equ	0xFDF
 14520                           postinc2	equ	0xFDE
 14521                           postdec2	equ	0xFDD
 14522                           plusw2	equ	0xFDB
 14523                           fsr2h	equ	0xFDA
 14524                           fsr2l	equ	0xFD9
 14525                           status	equ	0xFD8
 14526                           
 14527 ;; *************** function i2___lwmod *****************
 14528 ;; Defined at:
 14529 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 14530 ;; Parameters:    Size  Location     Type
 14531 ;;  dividend        2    7[COMRAM] unsigned int 
 14532 ;;  divisor         2    9[COMRAM] unsigned int 
 14533 ;; Auto vars:     Size  Location     Type
 14534 ;;  __lwmod         1   11[COMRAM] unsigned char 
 14535 ;; Return value:  Size  Location     Type
 14536 ;;                  2    7[COMRAM] unsigned int 
 14537 ;; Registers used:
 14538 ;;		wreg, status,2, status,0
 14539 ;; Tracked objects:
 14540 ;;		On entry : 0/0
 14541 ;;		On exit  : 0/0
 14542 ;;		Unchanged: 0/0
 14543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14544 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14545 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14546 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14547 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14548 ;;Total ram usage:        5 bytes
 14549 ;; Hardware stack levels used:    1
 14550 ;; This function calls:
 14551 ;;		Nothing
 14552 ;; This function is called by:
 14553 ;;		i2_printf
 14554 ;; This function uses a non-reentrant model
 14555 ;;
 14556                           
 14557                           	psect	text44
 14558  0034DE                     __ptext44:
 14559                           	opt stack 0
 14560  0034DE                     i2___lwmod:
 14561                           	opt stack 24
 14562                           
 14563                           ;incstack = 0
 14564  0034DE  500A               	movf	i2___lwmod@divisor,w,c
 14565  0034E0  100B               	iorwf	i2___lwmod@divisor+1,w,c
 14566  0034E2  B4D8               	btfsc	status,2,c
 14567  0034E4  D018               	goto	i2l1128
 14568  0034E6  0E01               	movlw	1
 14569  0034E8  6E0C               	movwf	i2___lwmod@counter,c
 14570  0034EA  D004               	goto	i2l3941
 14571  0034EC                     i2l3939:
 14572  0034EC  90D8               	bcf	status,0,c
 14573  0034EE  360A               	rlcf	i2___lwmod@divisor,f,c
 14574  0034F0  360B               	rlcf	i2___lwmod@divisor+1,f,c
 14575  0034F2  2A0C               	incf	i2___lwmod@counter,f,c
 14576  0034F4                     i2l3941:
 14577  0034F4  AE0B               	btfss	i2___lwmod@divisor+1,7,c
 14578  0034F6  D7FA               	goto	i2l3939
 14579  0034F8                     i2l3943:
 14580  0034F8  500A               	movf	i2___lwmod@divisor,w,c
 14581  0034FA  5C08               	subwf	i2___lwmod@dividend,w,c
 14582  0034FC  500B               	movf	i2___lwmod@divisor+1,w,c
 14583  0034FE  5809               	subwfb	i2___lwmod@dividend+1,w,c
 14584  003500  A0D8               	btfss	status,0,c
 14585  003502  D004               	goto	i2l3947
 14586  003504  500A               	movf	i2___lwmod@divisor,w,c
 14587  003506  5E08               	subwf	i2___lwmod@dividend,f,c
 14588  003508  500B               	movf	i2___lwmod@divisor+1,w,c
 14589  00350A  5A09               	subwfb	i2___lwmod@dividend+1,f,c
 14590  00350C                     i2l3947:
 14591  00350C  90D8               	bcf	status,0,c
 14592  00350E  320B               	rrcf	i2___lwmod@divisor+1,f,c
 14593  003510  320A               	rrcf	i2___lwmod@divisor,f,c
 14594  003512  2E0C               	decfsz	i2___lwmod@counter,f,c
 14595  003514  D7F1               	goto	i2l3943
 14596  003516                     i2l1128:
 14597  003516  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
 14598  00351A  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 14599  00351E  0012               	return		;funcret
 14600  003520                     __end_ofi2___lwmod:
 14601                           	opt stack 0
 14602                           pclatu	equ	0xFFB
 14603                           pclath	equ	0xFFA
 14604                           tblptru	equ	0xFF8
 14605                           tblptrh	equ	0xFF7
 14606                           tblptrl	equ	0xFF6
 14607                           tablat	equ	0xFF5
 14608                           prodh	equ	0xFF4
 14609                           prodl	equ	0xFF3
 14610                           intcon	equ	0xFF2
 14611                           intcon2	equ	0xFF1
 14612                           intcon3	equ	0xFF0
 14613                           postinc0	equ	0xFEE
 14614                           fsr0h	equ	0xFEA
 14615                           fsr0l	equ	0xFE9
 14616                           wreg	equ	0xFE8
 14617                           postdec1	equ	0xFE5
 14618                           plusw1	equ	0xFE3
 14619                           fsr1h	equ	0xFE2
 14620                           fsr1l	equ	0xFE1
 14621                           indf2	equ	0xFDF
 14622                           postinc2	equ	0xFDE
 14623                           postdec2	equ	0xFDD
 14624                           plusw2	equ	0xFDB
 14625                           fsr2h	equ	0xFDA
 14626                           fsr2l	equ	0xFD9
 14627                           status	equ	0xFD8
 14628                           
 14629 ;; *************** function i2___lwdiv *****************
 14630 ;; Defined at:
 14631 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 14632 ;; Parameters:    Size  Location     Type
 14633 ;;  dividend        2    0[COMRAM] unsigned int 
 14634 ;;  divisor         2    2[COMRAM] unsigned int 
 14635 ;; Auto vars:     Size  Location     Type
 14636 ;;  __lwdiv         2    4[COMRAM] unsigned int 
 14637 ;;  __lwdiv         1    6[COMRAM] unsigned char 
 14638 ;; Return value:  Size  Location     Type
 14639 ;;                  2    0[COMRAM] unsigned int 
 14640 ;; Registers used:
 14641 ;;		wreg, status,2, status,0
 14642 ;; Tracked objects:
 14643 ;;		On entry : 0/0
 14644 ;;		On exit  : 0/0
 14645 ;;		Unchanged: 0/0
 14646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14647 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14648 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14649 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14650 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14651 ;;Total ram usage:        7 bytes
 14652 ;; Hardware stack levels used:    1
 14653 ;; This function calls:
 14654 ;;		Nothing
 14655 ;; This function is called by:
 14656 ;;		i2_printf
 14657 ;; This function uses a non-reentrant model
 14658 ;;
 14659                           
 14660                           	psect	text45
 14661  0033F4                     __ptext45:
 14662                           	opt stack 0
 14663  0033F4                     i2___lwdiv:
 14664                           	opt stack 24
 14665                           
 14666                           ;incstack = 0
 14667  0033F4  0E00               	movlw	0
 14668  0033F6  6E06               	movwf	i2___lwdiv@quotient+1,c
 14669  0033F8  0E00               	movlw	0
 14670  0033FA  6E05               	movwf	i2___lwdiv@quotient,c
 14671  0033FC  5003               	movf	i2___lwdiv@divisor,w,c
 14672  0033FE  1004               	iorwf	i2___lwdiv@divisor+1,w,c
 14673  003400  B4D8               	btfsc	status,2,c
 14674  003402  D01C               	goto	i2l1118
 14675  003404  0E01               	movlw	1
 14676  003406  6E07               	movwf	i2___lwdiv@counter,c
 14677  003408  D004               	goto	i2l3921
 14678  00340A                     i2l3919:
 14679  00340A  90D8               	bcf	status,0,c
 14680  00340C  3603               	rlcf	i2___lwdiv@divisor,f,c
 14681  00340E  3604               	rlcf	i2___lwdiv@divisor+1,f,c
 14682  003410  2A07               	incf	i2___lwdiv@counter,f,c
 14683  003412                     i2l3921:
 14684  003412  AE04               	btfss	i2___lwdiv@divisor+1,7,c
 14685  003414  D7FA               	goto	i2l3919
 14686  003416                     i2l3923:
 14687  003416  90D8               	bcf	status,0,c
 14688  003418  3605               	rlcf	i2___lwdiv@quotient,f,c
 14689  00341A  3606               	rlcf	i2___lwdiv@quotient+1,f,c
 14690  00341C  5003               	movf	i2___lwdiv@divisor,w,c
 14691  00341E  5C01               	subwf	i2___lwdiv@dividend,w,c
 14692  003420  5004               	movf	i2___lwdiv@divisor+1,w,c
 14693  003422  5802               	subwfb	i2___lwdiv@dividend+1,w,c
 14694  003424  A0D8               	btfss	status,0,c
 14695  003426  D005               	goto	i2l3931
 14696  003428  5003               	movf	i2___lwdiv@divisor,w,c
 14697  00342A  5E01               	subwf	i2___lwdiv@dividend,f,c
 14698  00342C  5004               	movf	i2___lwdiv@divisor+1,w,c
 14699  00342E  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
 14700  003430  8005               	bsf	i2___lwdiv@quotient,0,c
 14701  003432                     i2l3931:
 14702  003432  90D8               	bcf	status,0,c
 14703  003434  3204               	rrcf	i2___lwdiv@divisor+1,f,c
 14704  003436  3203               	rrcf	i2___lwdiv@divisor,f,c
 14705  003438  2E07               	decfsz	i2___lwdiv@counter,f,c
 14706  00343A  D7ED               	goto	i2l3923
 14707  00343C                     i2l1118:
 14708  00343C  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
 14709  003440  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 14710  003444  0012               	return		;funcret
 14711  003446                     __end_ofi2___lwdiv:
 14712                           	opt stack 0
 14713                           pclatu	equ	0xFFB
 14714                           pclath	equ	0xFFA
 14715                           tblptru	equ	0xFF8
 14716                           tblptrh	equ	0xFF7
 14717                           tblptrl	equ	0xFF6
 14718                           tablat	equ	0xFF5
 14719                           prodh	equ	0xFF4
 14720                           prodl	equ	0xFF3
 14721                           intcon	equ	0xFF2
 14722                           intcon2	equ	0xFF1
 14723                           intcon3	equ	0xFF0
 14724                           postinc0	equ	0xFEE
 14725                           fsr0h	equ	0xFEA
 14726                           fsr0l	equ	0xFE9
 14727                           wreg	equ	0xFE8
 14728                           postdec1	equ	0xFE5
 14729                           plusw1	equ	0xFE3
 14730                           fsr1h	equ	0xFE2
 14731                           fsr1l	equ	0xFE1
 14732                           indf2	equ	0xFDF
 14733                           postinc2	equ	0xFDE
 14734                           postdec2	equ	0xFDD
 14735                           plusw2	equ	0xFDB
 14736                           fsr2h	equ	0xFDA
 14737                           fsr2l	equ	0xFD9
 14738                           status	equ	0xFD8
 14739                           
 14740 ;; *************** function i2_lcdInst *****************
 14741 ;; Defined at:
 14742 ;;		line 18 in file "../lcd.c"
 14743 ;; Parameters:    Size  Location     Type
 14744 ;;  data            1    wreg     unsigned char 
 14745 ;; Auto vars:     Size  Location     Type
 14746 ;;  data            1    2[COMRAM] unsigned char 
 14747 ;; Return value:  Size  Location     Type
 14748 ;;                  1    wreg      void 
 14749 ;; Registers used:
 14750 ;;		wreg, status,2, status,0, cstack
 14751 ;; Tracked objects:
 14752 ;;		On entry : 0/0
 14753 ;;		On exit  : 0/0
 14754 ;;		Unchanged: 0/0
 14755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14756 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14757 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14758 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14759 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14760 ;;Total ram usage:        1 bytes
 14761 ;; Hardware stack levels used:    1
 14762 ;; Hardware stack levels required when called:    1
 14763 ;; This function calls:
 14764 ;;		i2_lcdNibble
 14765 ;; This function is called by:
 14766 ;;		_keypressed
 14767 ;;		_ISR
 14768 ;; This function uses a non-reentrant model
 14769 ;;
 14770                           
 14771                           	psect	text46
 14772  0037F6                     __ptext46:
 14773                           	opt stack 0
 14774  0037F6                     i2_lcdInst:
 14775                           	opt stack 24
 14776                           
 14777                           ;incstack = 0
 14778                           ;i2lcdInst@data stored from wreg
 14779  0037F6  6E03               	movwf	i2lcdInst@data,c
 14780                           
 14781                           ;lcd.c: 19: LATDbits.LATD2 = 0;
 14782  0037F8  948C               	bcf	3980,2,c	;volatile
 14783                           
 14784                           ;lcd.c: 20: lcdNibble(data);
 14785  0037FA  5003               	movf	i2lcdInst@data,w,c
 14786  0037FC  EC23  F01A         	call	i2_lcdNibble
 14787  003800  0012               	return		;funcret
 14788  003802                     __end_ofi2_lcdInst:
 14789                           	opt stack 0
 14790                           pclatu	equ	0xFFB
 14791                           pclath	equ	0xFFA
 14792                           tblptru	equ	0xFF8
 14793                           tblptrh	equ	0xFF7
 14794                           tblptrl	equ	0xFF6
 14795                           tablat	equ	0xFF5
 14796                           prodh	equ	0xFF4
 14797                           prodl	equ	0xFF3
 14798                           intcon	equ	0xFF2
 14799                           intcon2	equ	0xFF1
 14800                           intcon3	equ	0xFF0
 14801                           postinc0	equ	0xFEE
 14802                           fsr0h	equ	0xFEA
 14803                           fsr0l	equ	0xFE9
 14804                           wreg	equ	0xFE8
 14805                           postdec1	equ	0xFE5
 14806                           plusw1	equ	0xFE3
 14807                           fsr1h	equ	0xFE2
 14808                           fsr1l	equ	0xFE1
 14809                           indf2	equ	0xFDF
 14810                           postinc2	equ	0xFDE
 14811                           postdec2	equ	0xFDD
 14812                           plusw2	equ	0xFDB
 14813                           fsr2h	equ	0xFDA
 14814                           fsr2l	equ	0xFD9
 14815                           status	equ	0xFD8
 14816                           
 14817 ;; *************** function i2_lcdNibble *****************
 14818 ;; Defined at:
 14819 ;;		line 28 in file "../lcd.c"
 14820 ;; Parameters:    Size  Location     Type
 14821 ;;  data            1    wreg     unsigned char 
 14822 ;; Auto vars:     Size  Location     Type
 14823 ;;  data            1    1[COMRAM] unsigned char 
 14824 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 14825 ;; Return value:  Size  Location     Type
 14826 ;;                  1    wreg      void 
 14827 ;; Registers used:
 14828 ;;		wreg, status,2, status,0
 14829 ;; Tracked objects:
 14830 ;;		On entry : 0/0
 14831 ;;		On exit  : 0/0
 14832 ;;		Unchanged: 0/0
 14833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14834 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14835 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14836 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14837 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14838 ;;Total ram usage:        2 bytes
 14839 ;; Hardware stack levels used:    1
 14840 ;; This function calls:
 14841 ;;		Nothing
 14842 ;; This function is called by:
 14843 ;;		i2_lcdInst
 14844 ;;		i2_putch
 14845 ;; This function uses a non-reentrant model
 14846 ;;
 14847                           
 14848                           	psect	text47
 14849  003446                     __ptext47:
 14850                           	opt stack 0
 14851  003446                     i2_lcdNibble:
 14852                           	opt stack 23
 14853                           
 14854                           ;incstack = 0
 14855                           ;i2lcdNibble@data stored from wreg
 14856  003446  6E02               	movwf	i2lcdNibble@data,c
 14857                           
 14858                           ;lcd.c: 30: char temp = data & 0xF0;
 14859  003448  5002               	movf	i2lcdNibble@data,w,c
 14860  00344A  0BF0               	andlw	240
 14861  00344C  6E01               	movwf	i2lcdNibble@temp,c
 14862                           
 14863                           ;lcd.c: 31: LATD = LATD & 0x0F;
 14864  00344E  508C               	movf	3980,w,c	;volatile
 14865  003450  0B0F               	andlw	15
 14866  003452  6E8C               	movwf	3980,c	;volatile
 14867                           
 14868                           ;lcd.c: 32: LATD = temp | LATD;
 14869  003454  5001               	movf	i2lcdNibble@temp,w,c
 14870  003456  108C               	iorwf	3980,w,c	;volatile
 14871  003458  6E8C               	movwf	3980,c	;volatile
 14872                           
 14873                           ;lcd.c: 34: LATDbits.LATD3 = 0;
 14874  00345A  968C               	bcf	3980,3,c	;volatile
 14875                           
 14876                           ;lcd.c: 35: _delay((unsigned long)((30)*(10000000/4000000.0)));
 14877  00345C  0E19               	movlw	25
 14878  00345E                     i2u801_47:
 14879  00345E  2EE8               	decfsz	wreg,f,c
 14880  003460  D7FE               	bra	i2u801_47
 14881                           
 14882                           ;lcd.c: 36: LATDbits.LATD3 = 1;
 14883  003462  868C               	bsf	3980,3,c	;volatile
 14884                           
 14885                           ;lcd.c: 37: _delay((unsigned long)((30)*(10000000/4000000.0)));
 14886  003464  0E19               	movlw	25
 14887  003466                     i2u802_47:
 14888  003466  2EE8               	decfsz	wreg,f,c
 14889  003468  D7FE               	bra	i2u802_47
 14890                           
 14891                           ;lcd.c: 39: data = data << 4;
 14892  00346A  3802               	swapf	i2lcdNibble@data,w,c
 14893  00346C  0BF0               	andlw	240
 14894  00346E  6E02               	movwf	i2lcdNibble@data,c
 14895                           
 14896                           ;lcd.c: 41: temp = data & 0xF0;
 14897  003470  5002               	movf	i2lcdNibble@data,w,c
 14898  003472  0BF0               	andlw	240
 14899  003474  6E01               	movwf	i2lcdNibble@temp,c
 14900                           
 14901                           ;lcd.c: 42: LATD = LATD & 0x0F;
 14902  003476  508C               	movf	3980,w,c	;volatile
 14903  003478  0B0F               	andlw	15
 14904  00347A  6E8C               	movwf	3980,c	;volatile
 14905                           
 14906                           ;lcd.c: 43: LATD = temp | LATD;
 14907  00347C  5001               	movf	i2lcdNibble@temp,w,c
 14908  00347E  108C               	iorwf	3980,w,c	;volatile
 14909  003480  6E8C               	movwf	3980,c	;volatile
 14910                           
 14911                           ;lcd.c: 45: LATDbits.LATD3 = 0;
 14912  003482  968C               	bcf	3980,3,c	;volatile
 14913                           
 14914                           ;lcd.c: 46: _delay((unsigned long)((30)*(10000000/4000000.0)));
 14915  003484  0E19               	movlw	25
 14916  003486                     i2u803_47:
 14917  003486  2EE8               	decfsz	wreg,f,c
 14918  003488  D7FE               	bra	i2u803_47
 14919                           
 14920                           ;lcd.c: 47: LATDbits.LATD3 = 1;
 14921  00348A  868C               	bsf	3980,3,c	;volatile
 14922                           
 14923                           ;lcd.c: 48: _delay((unsigned long)((30)*(10000000/4000000.0)));
 14924  00348C  0E19               	movlw	25
 14925  00348E                     i2u804_47:
 14926  00348E  2EE8               	decfsz	wreg,f,c
 14927  003490  D7FE               	bra	i2u804_47
 14928  003492  0012               	return		;funcret
 14929  003494                     __end_ofi2_lcdNibble:
 14930                           	opt stack 0
 14931                           pclatu	equ	0xFFB
 14932                           pclath	equ	0xFFA
 14933                           tblptru	equ	0xFF8
 14934                           tblptrh	equ	0xFF7
 14935                           tblptrl	equ	0xFF6
 14936                           tablat	equ	0xFF5
 14937                           prodh	equ	0xFF4
 14938                           prodl	equ	0xFF3
 14939                           intcon	equ	0xFF2
 14940                           intcon2	equ	0xFF1
 14941                           intcon3	equ	0xFF0
 14942                           postinc0	equ	0xFEE
 14943                           fsr0h	equ	0xFEA
 14944                           fsr0l	equ	0xFE9
 14945                           wreg	equ	0xFE8
 14946                           postdec1	equ	0xFE5
 14947                           plusw1	equ	0xFE3
 14948                           fsr1h	equ	0xFE2
 14949                           fsr1l	equ	0xFE1
 14950                           indf2	equ	0xFDF
 14951                           postinc2	equ	0xFDE
 14952                           postdec2	equ	0xFDD
 14953                           plusw2	equ	0xFDB
 14954                           fsr2h	equ	0xFDA
 14955                           fsr2l	equ	0xFD9
 14956                           status	equ	0xFD8
 14957                           
 14958 ;; *************** function i2_I2C_Master_Write *****************
 14959 ;; Defined at:
 14960 ;;		line 39 in file "../I2C.c"
 14961 ;; Parameters:    Size  Location     Type
 14962 ;;  d               2    1[COMRAM] unsigned int 
 14963 ;; Auto vars:     Size  Location     Type
 14964 ;;		None
 14965 ;; Return value:  Size  Location     Type
 14966 ;;                  1    wreg      void 
 14967 ;; Registers used:
 14968 ;;		wreg, status,2, status,0, cstack
 14969 ;; Tracked objects:
 14970 ;;		On entry : 0/0
 14971 ;;		On exit  : 0/0
 14972 ;;		Unchanged: 0/0
 14973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14974 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14975 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14976 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14977 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14978 ;;Total ram usage:        2 bytes
 14979 ;; Hardware stack levels used:    1
 14980 ;; Hardware stack levels required when called:    1
 14981 ;; This function calls:
 14982 ;;		i2_I2C_Master_Wait
 14983 ;; This function is called by:
 14984 ;;		_keypressed
 14985 ;; This function uses a non-reentrant model
 14986 ;;
 14987                           
 14988                           	psect	text48
 14989  00380C                     __ptext48:
 14990                           	opt stack 0
 14991  00380C                     i2_I2C_Master_Write:
 14992                           	opt stack 23
 14993                           
 14994                           ;I2C.c: 41: I2C_Master_Wait();
 14995                           
 14996                           ;incstack = 0
 14997  00380C  ECCE  F01B         	call	i2_I2C_Master_Wait	;wreg free
 14998                           
 14999                           ;I2C.c: 42: SSPBUF = d;
 15000  003810  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 15001  003814  0012               	return		;funcret
 15002  003816                     __end_ofi2_I2C_Master_Write:
 15003                           	opt stack 0
 15004                           pclatu	equ	0xFFB
 15005                           pclath	equ	0xFFA
 15006                           tblptru	equ	0xFF8
 15007                           tblptrh	equ	0xFF7
 15008                           tblptrl	equ	0xFF6
 15009                           tablat	equ	0xFF5
 15010                           prodh	equ	0xFF4
 15011                           prodl	equ	0xFF3
 15012                           intcon	equ	0xFF2
 15013                           intcon2	equ	0xFF1
 15014                           intcon3	equ	0xFF0
 15015                           postinc0	equ	0xFEE
 15016                           fsr0h	equ	0xFEA
 15017                           fsr0l	equ	0xFE9
 15018                           wreg	equ	0xFE8
 15019                           postdec1	equ	0xFE5
 15020                           plusw1	equ	0xFE3
 15021                           fsr1h	equ	0xFE2
 15022                           fsr1l	equ	0xFE1
 15023                           indf2	equ	0xFDF
 15024                           postinc2	equ	0xFDE
 15025                           postdec2	equ	0xFDD
 15026                           plusw2	equ	0xFDB
 15027                           fsr2h	equ	0xFDA
 15028                           fsr2l	equ	0xFD9
 15029                           status	equ	0xFD8
 15030                           
 15031 ;; *************** function i2_I2C_Master_Stop *****************
 15032 ;; Defined at:
 15033 ;;		line 33 in file "../I2C.c"
 15034 ;; Parameters:    Size  Location     Type
 15035 ;;		None
 15036 ;; Auto vars:     Size  Location     Type
 15037 ;;		None
 15038 ;; Return value:  Size  Location     Type
 15039 ;;                  1    wreg      void 
 15040 ;; Registers used:
 15041 ;;		wreg, status,2, status,0, cstack
 15042 ;; Tracked objects:
 15043 ;;		On entry : 0/0
 15044 ;;		On exit  : 0/0
 15045 ;;		Unchanged: 0/0
 15046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15047 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15048 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15049 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15050 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15051 ;;Total ram usage:        0 bytes
 15052 ;; Hardware stack levels used:    1
 15053 ;; Hardware stack levels required when called:    1
 15054 ;; This function calls:
 15055 ;;		i2_I2C_Master_Wait
 15056 ;; This function is called by:
 15057 ;;		_keypressed
 15058 ;; This function uses a non-reentrant model
 15059 ;;
 15060                           
 15061                           	psect	text49
 15062  00382E                     __ptext49:
 15063                           	opt stack 0
 15064  00382E                     i2_I2C_Master_Stop:
 15065                           	opt stack 23
 15066                           
 15067                           ;I2C.c: 35: I2C_Master_Wait();
 15068                           
 15069                           ;incstack = 0
 15070  00382E  ECCE  F01B         	call	i2_I2C_Master_Wait	;wreg free
 15071                           
 15072                           ;I2C.c: 36: PEN = 1;
 15073  003832  84C5               	bsf	4037,2,c	;volatile
 15074  003834  0012               	return		;funcret
 15075  003836                     __end_ofi2_I2C_Master_Stop:
 15076                           	opt stack 0
 15077                           pclatu	equ	0xFFB
 15078                           pclath	equ	0xFFA
 15079                           tblptru	equ	0xFF8
 15080                           tblptrh	equ	0xFF7
 15081                           tblptrl	equ	0xFF6
 15082                           tablat	equ	0xFF5
 15083                           prodh	equ	0xFF4
 15084                           prodl	equ	0xFF3
 15085                           intcon	equ	0xFF2
 15086                           intcon2	equ	0xFF1
 15087                           intcon3	equ	0xFF0
 15088                           postinc0	equ	0xFEE
 15089                           fsr0h	equ	0xFEA
 15090                           fsr0l	equ	0xFE9
 15091                           wreg	equ	0xFE8
 15092                           postdec1	equ	0xFE5
 15093                           plusw1	equ	0xFE3
 15094                           fsr1h	equ	0xFE2
 15095                           fsr1l	equ	0xFE1
 15096                           indf2	equ	0xFDF
 15097                           postinc2	equ	0xFDE
 15098                           postdec2	equ	0xFDD
 15099                           plusw2	equ	0xFDB
 15100                           fsr2h	equ	0xFDA
 15101                           fsr2l	equ	0xFD9
 15102                           status	equ	0xFD8
 15103                           
 15104 ;; *************** function i2_I2C_Master_Start *****************
 15105 ;; Defined at:
 15106 ;;		line 21 in file "../I2C.c"
 15107 ;; Parameters:    Size  Location     Type
 15108 ;;		None
 15109 ;; Auto vars:     Size  Location     Type
 15110 ;;		None
 15111 ;; Return value:  Size  Location     Type
 15112 ;;                  1    wreg      void 
 15113 ;; Registers used:
 15114 ;;		wreg, status,2, status,0, cstack
 15115 ;; Tracked objects:
 15116 ;;		On entry : 0/0
 15117 ;;		On exit  : 0/0
 15118 ;;		Unchanged: 0/0
 15119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15120 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15121 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15122 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15123 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15124 ;;Total ram usage:        0 bytes
 15125 ;; Hardware stack levels used:    1
 15126 ;; Hardware stack levels required when called:    1
 15127 ;; This function calls:
 15128 ;;		i2_I2C_Master_Wait
 15129 ;; This function is called by:
 15130 ;;		_keypressed
 15131 ;; This function uses a non-reentrant model
 15132 ;;
 15133                           
 15134                           	psect	text50
 15135  003836                     __ptext50:
 15136                           	opt stack 0
 15137  003836                     i2_I2C_Master_Start:
 15138                           	opt stack 23
 15139                           
 15140                           ;I2C.c: 23: I2C_Master_Wait();
 15141                           
 15142                           ;incstack = 0
 15143  003836  ECCE  F01B         	call	i2_I2C_Master_Wait	;wreg free
 15144                           
 15145                           ;I2C.c: 24: SEN = 1;
 15146  00383A  80C5               	bsf	4037,0,c	;volatile
 15147  00383C  0012               	return		;funcret
 15148  00383E                     __end_ofi2_I2C_Master_Start:
 15149                           	opt stack 0
 15150                           pclatu	equ	0xFFB
 15151                           pclath	equ	0xFFA
 15152                           tblptru	equ	0xFF8
 15153                           tblptrh	equ	0xFF7
 15154                           tblptrl	equ	0xFF6
 15155                           tablat	equ	0xFF5
 15156                           prodh	equ	0xFF4
 15157                           prodl	equ	0xFF3
 15158                           intcon	equ	0xFF2
 15159                           intcon2	equ	0xFF1
 15160                           intcon3	equ	0xFF0
 15161                           postinc0	equ	0xFEE
 15162                           fsr0h	equ	0xFEA
 15163                           fsr0l	equ	0xFE9
 15164                           wreg	equ	0xFE8
 15165                           postdec1	equ	0xFE5
 15166                           plusw1	equ	0xFE3
 15167                           fsr1h	equ	0xFE2
 15168                           fsr1l	equ	0xFE1
 15169                           indf2	equ	0xFDF
 15170                           postinc2	equ	0xFDE
 15171                           postdec2	equ	0xFDD
 15172                           plusw2	equ	0xFDB
 15173                           fsr2h	equ	0xFDA
 15174                           fsr2l	equ	0xFD9
 15175                           status	equ	0xFD8
 15176                           
 15177 ;; *************** function i2_I2C_Master_Read *****************
 15178 ;; Defined at:
 15179 ;;		line 45 in file "../I2C.c"
 15180 ;; Parameters:    Size  Location     Type
 15181 ;;  a               1    wreg     unsigned char 
 15182 ;; Auto vars:     Size  Location     Type
 15183 ;;  a               1    1[COMRAM] unsigned char 
 15184 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 15185 ;; Return value:  Size  Location     Type
 15186 ;;                  1    wreg      unsigned char 
 15187 ;; Registers used:
 15188 ;;		wreg, status,2, status,0, cstack
 15189 ;; Tracked objects:
 15190 ;;		On entry : 0/0
 15191 ;;		On exit  : 0/0
 15192 ;;		Unchanged: 0/0
 15193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15194 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15195 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15196 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15197 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15198 ;;Total ram usage:        2 bytes
 15199 ;; Hardware stack levels used:    1
 15200 ;; Hardware stack levels required when called:    1
 15201 ;; This function calls:
 15202 ;;		i2_I2C_Master_Wait
 15203 ;; This function is called by:
 15204 ;;		_keypressed
 15205 ;; This function uses a non-reentrant model
 15206 ;;
 15207                           
 15208                           	psect	text51
 15209  00369A                     __ptext51:
 15210                           	opt stack 0
 15211  00369A                     i2_I2C_Master_Read:
 15212                           	opt stack 23
 15213                           
 15214                           ;incstack = 0
 15215                           ;i2I2C_Master_Read@a stored from wreg
 15216  00369A  6E02               	movwf	i2I2C_Master_Read@a,c
 15217                           
 15218                           ;I2C.c: 47: unsigned char temp;
 15219                           ;I2C.c: 48: I2C_Master_Wait();
 15220  00369C  ECCE  F01B         	call	i2_I2C_Master_Wait	;wreg free
 15221                           
 15222                           ;I2C.c: 49: RCEN = 1;
 15223  0036A0  86C5               	bsf	4037,3,c	;volatile
 15224                           
 15225                           ;I2C.c: 50: I2C_Master_Wait();
 15226  0036A2  ECCE  F01B         	call	i2_I2C_Master_Wait	;wreg free
 15227                           
 15228                           ;I2C.c: 51: temp = SSPBUF;
 15229  0036A6  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 15230                           
 15231                           ;I2C.c: 52: I2C_Master_Wait();
 15232  0036AA  ECCE  F01B         	call	i2_I2C_Master_Wait	;wreg free
 15233                           
 15234                           ;I2C.c: 53: ACKDT = (a)?0:1;
 15235  0036AE  5002               	movf	i2I2C_Master_Read@a,w,c
 15236  0036B0  A4D8               	btfss	status,2,c
 15237  0036B2  D002               	goto	i2u368_40
 15238  0036B4  8AC5               	bsf	4037,5,c	;volatile
 15239  0036B6  D001               	goto	i2l4285
 15240  0036B8                     i2u368_40:
 15241  0036B8  9AC5               	bcf	4037,5,c	;volatile
 15242  0036BA                     i2l4285:
 15243                           
 15244                           ;I2C.c: 54: ACKEN = 1;
 15245  0036BA  88C5               	bsf	4037,4,c	;volatile
 15246                           
 15247                           ;I2C.c: 55: return temp;
 15248  0036BC  5003               	movf	i2I2C_Master_Read@temp,w,c
 15249  0036BE  0012               	return	
 15250  0036C0                     __end_ofi2_I2C_Master_Read:
 15251                           	opt stack 0
 15252                           pclatu	equ	0xFFB
 15253                           pclath	equ	0xFFA
 15254                           tblptru	equ	0xFF8
 15255                           tblptrh	equ	0xFF7
 15256                           tblptrl	equ	0xFF6
 15257                           tablat	equ	0xFF5
 15258                           prodh	equ	0xFF4
 15259                           prodl	equ	0xFF3
 15260                           intcon	equ	0xFF2
 15261                           intcon2	equ	0xFF1
 15262                           intcon3	equ	0xFF0
 15263                           postinc0	equ	0xFEE
 15264                           fsr0h	equ	0xFEA
 15265                           fsr0l	equ	0xFE9
 15266                           wreg	equ	0xFE8
 15267                           postdec1	equ	0xFE5
 15268                           plusw1	equ	0xFE3
 15269                           fsr1h	equ	0xFE2
 15270                           fsr1l	equ	0xFE1
 15271                           indf2	equ	0xFDF
 15272                           postinc2	equ	0xFDE
 15273                           postdec2	equ	0xFDD
 15274                           plusw2	equ	0xFDB
 15275                           fsr2h	equ	0xFDA
 15276                           fsr2l	equ	0xFD9
 15277                           status	equ	0xFD8
 15278                           
 15279 ;; *************** function i2_I2C_Master_Wait *****************
 15280 ;; Defined at:
 15281 ;;		line 16 in file "../I2C.c"
 15282 ;; Parameters:    Size  Location     Type
 15283 ;;		None
 15284 ;; Auto vars:     Size  Location     Type
 15285 ;;		None
 15286 ;; Return value:  Size  Location     Type
 15287 ;;                  1    wreg      void 
 15288 ;; Registers used:
 15289 ;;		wreg, status,2, status,0
 15290 ;; Tracked objects:
 15291 ;;		On entry : 0/0
 15292 ;;		On exit  : 0/0
 15293 ;;		Unchanged: 0/0
 15294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15295 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15296 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15297 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15298 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15299 ;;Total ram usage:        1 bytes
 15300 ;; Hardware stack levels used:    1
 15301 ;; This function calls:
 15302 ;;		Nothing
 15303 ;; This function is called by:
 15304 ;;		i2_I2C_Master_Start
 15305 ;;		i2_I2C_Master_Stop
 15306 ;;		i2_I2C_Master_Write
 15307 ;;		i2_I2C_Master_Read
 15308 ;; This function uses a non-reentrant model
 15309 ;;
 15310                           
 15311                           	psect	text52
 15312  00379C                     __ptext52:
 15313                           	opt stack 0
 15314  00379C                     i2_I2C_Master_Wait:
 15315                           	opt stack 23
 15316  00379C                     i2l30:
 15317  00379C  B4C7               	btfsc	4039,2,c	;volatile
 15318  00379E  D7FE               	goto	i2l30
 15319  0037A0  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 15320  0037A4  0E1F               	movlw	31
 15321  0037A6  1601               	andwf	??i2_I2C_Master_Wait,f,c
 15322  0037A8  B4D8               	btfsc	status,2,c
 15323  0037AA  0012               	return	
 15324  0037AC  D7F7               	goto	i2l30
 15325  0037AE                     __end_ofi2_I2C_Master_Wait:
 15326                           	opt stack 0
 15327                           pclatu	equ	0xFFB
 15328                           pclath	equ	0xFFA
 15329                           tblptru	equ	0xFF8
 15330                           tblptrh	equ	0xFF7
 15331                           tblptrl	equ	0xFF6
 15332                           tablat	equ	0xFF5
 15333                           prodh	equ	0xFF4
 15334                           prodl	equ	0xFF3
 15335                           intcon	equ	0xFF2
 15336                           intcon2	equ	0xFF1
 15337                           intcon3	equ	0xFF0
 15338                           postinc0	equ	0xFEE
 15339                           fsr0h	equ	0xFEA
 15340                           fsr0l	equ	0xFE9
 15341                           wreg	equ	0xFE8
 15342                           postdec1	equ	0xFE5
 15343                           plusw1	equ	0xFE3
 15344                           fsr1h	equ	0xFE2
 15345                           fsr1l	equ	0xFE1
 15346                           indf2	equ	0xFDF
 15347                           postinc2	equ	0xFDE
 15348                           postdec2	equ	0xFDD
 15349                           plusw2	equ	0xFDB
 15350                           fsr2h	equ	0xFDA
 15351                           fsr2l	equ	0xFD9
 15352                           status	equ	0xFD8
 15353                           pclatu	equ	0xFFB
 15354                           pclath	equ	0xFFA
 15355                           tblptru	equ	0xFF8
 15356                           tblptrh	equ	0xFF7
 15357                           tblptrl	equ	0xFF6
 15358                           tablat	equ	0xFF5
 15359                           prodh	equ	0xFF4
 15360                           prodl	equ	0xFF3
 15361                           intcon	equ	0xFF2
 15362                           intcon2	equ	0xFF1
 15363                           intcon3	equ	0xFF0
 15364                           postinc0	equ	0xFEE
 15365                           fsr0h	equ	0xFEA
 15366                           fsr0l	equ	0xFE9
 15367                           wreg	equ	0xFE8
 15368                           postdec1	equ	0xFE5
 15369                           plusw1	equ	0xFE3
 15370                           fsr1h	equ	0xFE2
 15371                           fsr1l	equ	0xFE1
 15372                           indf2	equ	0xFDF
 15373                           postinc2	equ	0xFDE
 15374                           postdec2	equ	0xFDD
 15375                           plusw2	equ	0xFDB
 15376                           fsr2h	equ	0xFDA
 15377                           fsr2l	equ	0xFD9
 15378                           status	equ	0xFD8
 15379                           
 15380                           	psect	rparam
 15381  0000                     pclatu	equ	0xFFB
 15382                           pclath	equ	0xFFA
 15383                           tblptru	equ	0xFF8
 15384                           tblptrh	equ	0xFF7
 15385                           tblptrl	equ	0xFF6
 15386                           tablat	equ	0xFF5
 15387                           prodh	equ	0xFF4
 15388                           prodl	equ	0xFF3
 15389                           intcon	equ	0xFF2
 15390                           intcon2	equ	0xFF1
 15391                           intcon3	equ	0xFF0
 15392                           postinc0	equ	0xFEE
 15393                           fsr0h	equ	0xFEA
 15394                           fsr0l	equ	0xFE9
 15395                           wreg	equ	0xFE8
 15396                           postdec1	equ	0xFE5
 15397                           plusw1	equ	0xFE3
 15398                           fsr1h	equ	0xFE2
 15399                           fsr1l	equ	0xFE1
 15400                           indf2	equ	0xFDF
 15401                           postinc2	equ	0xFDE
 15402                           postdec2	equ	0xFDD
 15403                           plusw2	equ	0xFDB
 15404                           fsr2h	equ	0xFDA
 15405                           fsr2l	equ	0xFD9
 15406                           status	equ	0xFD8
 15407                           
 15408                           	psect	temp
 15409  000056                     btemp:
 15410                           	opt stack 0
 15411  000056                     	ds	1
 15412  0000                     int$flags	set	btemp
 15413                           pclatu	equ	0xFFB
 15414                           pclath	equ	0xFFA
 15415                           tblptru	equ	0xFF8
 15416                           tblptrh	equ	0xFF7
 15417                           tblptrl	equ	0xFF6
 15418                           tablat	equ	0xFF5
 15419                           prodh	equ	0xFF4
 15420                           prodl	equ	0xFF3
 15421                           intcon	equ	0xFF2
 15422                           intcon2	equ	0xFF1
 15423                           intcon3	equ	0xFF0
 15424                           postinc0	equ	0xFEE
 15425                           fsr0h	equ	0xFEA
 15426                           fsr0l	equ	0xFE9
 15427                           wreg	equ	0xFE8
 15428                           postdec1	equ	0xFE5
 15429                           plusw1	equ	0xFE3
 15430                           fsr1h	equ	0xFE2
 15431                           fsr1l	equ	0xFE1
 15432                           indf2	equ	0xFDF
 15433                           postinc2	equ	0xFDE
 15434                           postdec2	equ	0xFDD
 15435                           plusw2	equ	0xFDB
 15436                           fsr2h	equ	0xFDA
 15437                           fsr2l	equ	0xFD9
 15438                           status	equ	0xFD8


Data Sizes:
    Strings     596
    Constant    267
    Data        33
    BSS         51
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     52      85
    BANK0           128     72     123
    BANK1           256     60      60
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 25
		 -> STR_39(CODE[22]), STR_38(CODE[20]), STR_37(CODE[23]), STR_36(CODE[23]), 
		 -> STR_35(CODE[23]), STR_34(CODE[17]), STR_33(CODE[23]), STR_32(CODE[23]), 
		 -> STR_31(CODE[17]), STR_30(CODE[17]), STR_29(CODE[17]), STR_28(CODE[17]), 
		 -> STR_27(CODE[17]), STR_26(CODE[17]), STR_25(CODE[17]), STR_24(CODE[17]), 
		 -> STR_23(CODE[17]), STR_22(CODE[17]), STR_21(CODE[23]), STR_20(CODE[23]), 
		 -> STR_19(CODE[17]), STR_18(CODE[21]), STR_17(CODE[17]), STR_16(CODE[21]), 
		 -> STR_15(CODE[17]), STR_14(CODE[21]), STR_13(CODE[17]), STR_12(CODE[19]), 
		 -> STR_11(CODE[17]), STR_10(CODE[19]), STR_9(CODE[17]), STR_8(CODE[25]), 
		 -> STR_7(CODE[17]), STR_6(CODE[17]), STR_5(CODE[17]), STR_4(CODE[17]), 
		 -> STR_3(CODE[17]), STR_2(CODE[17]), STR_1(CODE[17]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR in COMRAM

    _ISR->_keypressed
    _keypressed->i2_printf
    i2_stopOperation->i2___awdiv
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_lcdInst->i2_lcdNibble
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_show_log
    _testBatteries->_readADC
    _stopOperation->___awdiv
    _show_log->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    _logPC->_getChar
    _getTens->___lwdiv
    _getOnes->___lwmod
    ___lwmod->___lwdiv
    _getHundreds->___lwdiv
    _getChar->_getOnes
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _I2C_Master_Read->_I2C_Master_Wait
    _I2C_Master_Init->___lldiv

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_logPC

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                11    11      0   44578
                                             61 BANK0     11    11      0
                    _I2C_Master_Init
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _initLCD
                            _lcdInst
                              _logPC
                             _printf
                            _readADC
                           _show_log
                      _stopOperation
                      _testBatteries
                           _wait_2ms
 ---------------------------------------------------------------------------------
 (1) _wait_2ms                                             2     0      2     801
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _testBatteries                                       12    12      0     573
                                              1 BANK0     12    12      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _readADC                                              1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _stopOperation                                        3     3      0    7239
                                              8 BANK0      3     3      0
                    _Eeprom_ReadByte
                   _Eeprom_WriteByte
                            ___awdiv
                            ___awmod
                       _next_address
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     671
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     683
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _Eeprom_WriteByte                                     3     0      3    2249
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (1) _show_log                                            27    24      3   11551
                                             34 BANK0     27    24      3
                    _Eeprom_ReadByte
                            _lcdInst
                       _next_address
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              31    23      8    6467
                                             12 BANK0     22    14      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     195
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     392
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _next_address                                         2     0      2    1725
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _Eeprom_ReadByte                                      2     0      2    1063
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _logPC                                               62    62      0   12398
                                             16 BANK0      2     2      0
                                              0 BANK1     60    60      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _getChar
                        _getHundreds
                            _getOnes
                            _getTens
 ---------------------------------------------------------------------------------
 (2) _getTens                                              2     0      2    1843
                                              7 BANK0      2     0      2
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (2) _getOnes                                              2     0      2    1495
                                             12 BANK0      2     0      2
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     540
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) _getHundreds                                          2     0      2     996
                                              7 BANK0      2     0      2
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     857
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _getChar                                              2     0      2    1956
                                             14 BANK0      2     0      2
                        _getHundreds (ARG)
                            _getOnes (ARG)
                            _getTens (ARG)
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2    3776
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     195
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     195
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     164
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Read                                      2     2      0      65
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     503
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     395
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                 16    16      0   10570
                                             36 COMRAM    16    16      0
                         _keypressed
                          i2___awdiv
                          i2___awmod
                          i2_lcdInst
                           i2_printf
                    i2_stopOperation
 ---------------------------------------------------------------------------------
 (6) _keypressed                                           4     2      2    5108
                                             32 COMRAM     4     2      2
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
                          i2_lcdInst
                           i2_printf
                    i2_stopOperation
 ---------------------------------------------------------------------------------
 (6) i2_stopOperation                                      3     3      0    2562
                                              8 COMRAM     3     3      0
                  i2_Eeprom_ReadByte
                 i2_Eeprom_WriteByte
                          i2___awdiv
                          i2___awmod
                     i2_next_address
 ---------------------------------------------------------------------------------
 (7) i2_next_address                                       2     0      2     308
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (7) i2___awmod                                            6     2      4     400
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (7) i2___awdiv                                            8     4      4     404
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (7) i2_Eeprom_WriteByte                                   3     0      3     794
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (7) i2_Eeprom_ReadByte                                    2     0      2      70
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (6) i2_printf                                            29    23      6    1938
                                             12 COMRAM    20    14      6
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (7) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (7) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (7) i2___wmul                                             6     2      4     209
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (7) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (7) i2___lwdiv                                            7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (6) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (8) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Write                                   2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Stop                                    0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Start                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Read                                    2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Wait                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _I2C_Master_Read
     _I2C_Master_Wait
   _I2C_Master_Start
     _I2C_Master_Wait
   _I2C_Master_Stop
     _I2C_Master_Wait
   _I2C_Master_Write
     _I2C_Master_Wait
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _logPC
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     _getChar
       _getHundreds (ARG)
         ___lwdiv
       _getOnes (ARG)
         ___lwmod
           ___lwdiv (ARG)
       _getTens (ARG)
         ___lwdiv
     _getHundreds
       ___lwdiv
     _getOnes
       ___lwmod
         ___lwdiv (ARG)
     _getTens
       ___lwdiv
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
       _lcdNibble
   _readADC
   _show_log
     _Eeprom_ReadByte
     _lcdInst
       _lcdNibble
     _next_address
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _stopOperation
     _Eeprom_ReadByte
     _Eeprom_WriteByte
     ___awdiv
     ___awmod
     _next_address
   _testBatteries
     _readADC
   _wait_2ms

 _ISR (ROOT)
   _keypressed
     i2_I2C_Master_Read
       i2_I2C_Master_Wait
     i2_I2C_Master_Start
       i2_I2C_Master_Wait
     i2_I2C_Master_Stop
       i2_I2C_Master_Wait
     i2_I2C_Master_Write
       i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
       i2___lwmod
         i2___lwdiv (ARG)
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
     i2_stopOperation
       i2_Eeprom_ReadByte
       i2_Eeprom_WriteByte
       i2___awdiv
       i2___awmod
       i2_next_address
   i2___awdiv
   i2___awmod
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     i2___lwdiv
     i2___lwmod
       i2___lwdiv (ARG)
     i2___wmul
     i2_isdigit
     i2_putch
       i2_lcdNibble
   i2_stopOperation
     i2_Eeprom_ReadByte
     i2_Eeprom_WriteByte
     i2___awdiv
     i2___awmod
     i2_next_address

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     3C      3C       7       23.4%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     48      7B       5       96.1%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     34      55       1       67.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     10C      34        0.0%
DATA                 0      0     10C       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Mon Apr 10 19:06:07 2017

         i2_I2C_Master_Start 3836           i2_I2C_Master_Write 380C     __end_of_Eeprom_WriteByte 364E  
                         l30 3774                 ___awdiv@sign 0085          ___wmul@multiplicand 0082  
         i2___lwdiv@dividend 0001                  __CFG_BORV$3 000000    stopOperation@address_code 0088  
               __CFG_CP0$OFF 000000                 __CFG_CP1$OFF 000000                 __CFG_CP2$OFF 000000  
               __CFG_CP3$OFF 000000                  __CFG_OSC$HS 000000                  _totalHeader FCC4  
                        l324 02A6                          l512 3740                          l518 3644  
                        l382 06E6                          l528 1C9A                          l561 1428  
                        l555 130E                          l573 165C                          l549 11F4  
                        l477 372A                          l567 1542                          l673 19D0  
                        l579 1776                          _GIE 007F97                 __CFG_CPB$OFF 000000  
                        _PEN 007E2A                 __CFG_CPD$OFF 000000                          _ISR 0008  
                        _SEN 007E28          ?i2_I2C_Master_Start 0001          ?i2_I2C_Master_Write 0002  
                        _min 00E5                          _sec 00EB                 ___awmod@sign 0085  
                        prod 000FF3                          wreg 000FE8                 __CFG_LVP$OFF 000000  
                       ?_ISR 0001                 show_log@hour 00B5                 __CFG_WDT$OFF 000000  
                       l1118 31F2                         l1128 332A                         l1065 304C  
               show_log@year 00B2                         l6121 18C0                         l6203 1AD0  
                       l6131 18F0                         l7021 16F8                         l6221 1B48  
                       l6125 18D4                         l6071 31A2                         l6311 358C  
                       l7007 16A6                         l6055 361C                         l6223 1B54  
                       l6231 1B82                         l6215 1B2C                         l6207 1B08  
                       l6127 18E6                         l7111 00FE                         l7103 00DC  
            __end_of_CHeader FD87                         l6401 2FD0                         l6073 31AE  
                       l6233 1B88                         l6241 1C22                         l6209 1B12  
                       l6161 1A08                         l6145 1998                         l6137 1920  
                       l7121 012A                         l6403 2FE0                         l6083 31E4  
                       l6075 31B4                         l6091 32E6                         l7043 1816  
                       l6235 1BD4                         l6243 1C34                         l6227 1B6E  
                       l6323 2F00                         l7131 0158                         l6413 303A  
                       l6405 2FE6                         l6093 32F2                         l6245 1C3C  
                       l6181 1A66                         l6165 1A24                         l6149 199E  
                       l6501 2CB8                         l7221 02E2                         l7117 0120  
                       l6095 32F8                         l6167 1A2A                         l6247 1C48  
                       l6335 2F34                         l6351 2F84                         l6511 2CF2  
                       l7303 0504                         l7207 0296                         l7231 034E  
                       l6433 35F4                         l7057 1868                         l6337 2F40  
                       l6329 2F16                         l6505 2CD8                         l7321 0534  
                       l7225 030E                         l7161 01DC                         l7129 014C  
                       l6099 331C                         l6179 1A60                         l6195 1A9C  
                       l6355 2F98                         l6347 2F76                         l6339 2F46  
                       l6371 308A                         l6523 2D2C                         l6515 2D12  
                       l7331 0560                         l7411 0754                         l7227 0322  
                       l7163 01E4                         l7147 01A0                         l7091 00A0  
                       l6293 3550                         l6197 1AAE                         l6621 21D8  
                       l7173 020C                         l7157 01CC                         l6391 30F6  
                       l6383 30D4                         l6375 309E                         l6367 307A  
                       l6535 2D82                         l6543 2DBA                         l6455 3706  
                       l7431 07AE                         l7351 05B0                         l7335 0570  
                       l7271 041C                         l7263 03FC                         l6377 30AA  
                       l6481 2C20                         l7521 09F4                         l7513 09B4  
                       l7505 0974                         l7433 07B6                         l7417 0772  
                       l7353 05B8                         l7337 0578                         l7193 0260  
                       l7177 021C                         l6379 30B0                         l6387 30E2  
                       l6619 21C6                         l6539 2DA4                         l6491 2C8E  
                       l7531 0A4A                         l7523 0A00                         l7515 09C0  
                       l7507 0980                         l7443 07DE                         l7427 079E  
                       l7363 05E4                         l7347 05A0                         l7283 0434  
                       l7275 042C                         l7267 040C                         l7259 03EC  
                       l7179 0224                         l7099 00D2                         l6741 1E7C  
                       l7613 0CB4                         l7373 0646                         l7293 049E  
                       l7197 026A                         l7189 0250                         l7623 0CDE  
                       l7607 0C6C                         l7543 0A76                         l7535 0A54  
                       l7463 0832                         l7447 07EE                         l7383 067A  
                       l7367 05F4                         l7287 0480                         l6913 13AA  
                       l6841 1176                         l6761 1F0C                         l6753 1EE8  
                       l7617 0CBE                         l7609 0C78                         l7553 0ABA  
                       l7561 0ADC                         l7481 08B4                         l7473 086E  
                       l7449 07F6                         l7369 05FA                         l7297 04B2  
                       l7465 0838                         l6827 1124                         l7571 0B34  
                       l7563 0AE8                         l7491 0900                         l7483 08C0  
                       l7475 0878                         l7467 0842                         l7459 0822  
                       l7387 06A6                         l6773 1F70                         l6749 1EDE  
                       l6781 1F94                         l6693 1C76                         l7629 0D46  
                       l7549 0AB0                         l7389 06BA                         l6935 1472  
                       l6863 123E                         l6785 0D5E                         l6769 1F66  
                       l6689 1C6C                         l7593 0C0C                         l7585 0BC0  
                       l7577 0B74                         l7569 0B28                         l7497 0934  
                       l7489 08F4                         l6971 158C                         l7595 0C18  
                       l7587 0BCC                         l7579 0B80                         l7499 0940  
                       l6949 14C4                         l6877 1290                         l6799 0DA8  
                       l6985 15DE                         l6899 1358                         STR_1 FFED  
                       STR_2 FFDC                         STR_3 FF65                         STR_4 FF87  
                       STR_5 FF32                         STR_6 FF10                         STR_7 FF54  
                       STR_8 FDAA                         STR_9 FEEE                         _LATA 000F89  
                       _LATB 000F8A                         _LATC 000F8B                         _LATD 000F8C  
                       _LATE 000F8D                         _PEIE 007F96                         u7110 0364  
                       u7111 0360                         u7120 037A                         u7112 0366  
                       u6170 3530                         u7122 037C                         u6180 356C  
                       _RCEN 007E2B                         i2l30 379C                         u6350 35F2  
                       u8007 338E                         u7240 0500                         u6345 33C4  
                       u6800 1542                         u6720 130E                         u6641 0DB2  
                       u6840 165C                         u6760 1428                         u6680 11F4  
                       u7707 01AE                         u7717 01C2                         u7807 0586  
                       u7727 01F2                         u6880 1776                         u7817 0598  
                       u7737 0204                         u7907 0A66                         u7827 05C6  
                       u7747 0232                         u7917 0ACC                         u7837 05DA  
                       u7757 0246                         u7927 1C8A                         u7847 0780  
                       u7767 0278                         u7687 00EE                         u7937 1EFC  
                       u7857 0794                         u7777 028C                         u7697 013C  
                       u7947 1F84                         u7867 07C4                         u7787 0542  
                       u7957 349C                         u7877 07D6                         u7797 0556  
                       u7967 34D2                         u7887 0804                         u7977 3354  
                       u7897 0818                         u7987 335C                         u7997 3386  
                       _TMR0 000FD6                         _TMR1 000FCE                         _TMR2 000FCC  
     __end_ofi2_next_address 37EA                         _main 0012                         _keys FD87  
                       _numC 00E9                         fsr0h 000FEA                         fsr1h 000FE2  
         i2___lwdiv@quotient 0005                         fsr2h 000FDA                         fsr0l 000FE9  
                       indf2 000FDF                         fsr1l 000FE1                         fsr2l 000FD9  
                       btemp 0056         ??i2_I2C_Master_Start 0002         ??i2_I2C_Master_Write 0004  
                       prodh 000FF4                         prodl 000FF3                         start 000E  
           __end_of_AAHeader FD28                __CFG_IESO$OFF 000000              __end_ofi2_putch 37F6  
              __CFG_MCLRE$ON 000000                 ___param_bank 000000                show_log@C_num 00AA  
                i2_lcdNibble 3446                        ??_ISR 0025                show_log@i_905 00B9  
              show_log@i_908 00BA             ?_I2C_Master_Init 008D             ?_I2C_Master_Read 0001  
           ?_I2C_Master_Wait 0001             ?_I2C_Master_Stop 0001                show_log@month 00B3  
                      ?_main 0001                        _ACKEN 007E2C                        _ACKDT 007E2D  
            __end_of___awdiv 2FA2                        _ADRES 000FC3                        _EEADR 000FA9  
                      STR_10 FE75                        STR_11 FEAA                        STR_12 FE75  
                      STR_20 FDC3                        STR_13 FECC                        STR_21 FDDA  
                      STR_22 FF98                        STR_30 FEFF                        STR_14 FE4C  
                      STR_31 FF76                        STR_15 FEBB                        STR_23 FE99  
                      STR_16 FE4C                        STR_24 FFA9                        STR_40 FE88  
                      STR_32 FDF1                        STR_25 FE99                        STR_17 FF21  
                      STR_33 FE08                        STR_18 FE4C                        STR_26 FFBA  
                      STR_34 FF43                        STR_27 FE99                        STR_35 FDC3  
                      STR_19 FEDD                        STR_36 FDDA                        STR_28 FFCB  
            __end_of___awmod 3100                        STR_29 FE99                        STR_37 FE1F  
                      STR_38 FE61                        STR_39 FE36              __end_of___lldiv 305E  
                      _T0CON 000FD5              ___awdiv@divisor 0082                        _T1CON 000FCD  
                      _T2CON 000FCA              __end_of___lwdiv 31FC              __end_of___lwmod 3334  
                      i2l512 376C                        i2l610 29EC                        i2l518 366A  
                      i2l641 2B78                        i2l673 23A8              ___awdiv@counter 0084  
                      _PORTB 000F81                        _TRISA 000F92                        _TRISB 000F93  
                      _TRISC 000F94                        _TRISD 000F95                        _TRISE 000F96  
              _turn1BackLeft 00D7                __CFG_PWRT$OFF 000000                __CFG_WRT0$OFF 000000  
            __end_of_getChar 381E                __CFG_WRT1$OFF 000000                __CFG_WRT2$OFF 000000  
              __CFG_WRT3$OFF 000000              __end_of_lcdInst 37CE              __end_of_getOnes 36E0  
             __CFG_EBTR0$OFF 000000               __CFG_FCMEN$OFF 000000              __end_of_getTens 355C  
             __CFG_EBTR1$OFF 000000                _turn2BackLeft 00DB               __CFG_EBTR2$OFF 000000  
               main@keypress 00BF               __CFG_EBTR3$OFF 000000                        _nRBPU 007F8F  
     __size_of_stopOperation 031A                __CFG_WRTB$OFF 000000                __CFG_WRTC$OFF 000000  
              __CFG_WRTD$OFF 000000              __end_of_readADC 3730              __end_of_initLCD 34DE  
             __CFG_EBTRB$OFF 000000                   i2isdigit@c 0003              __end_of_dpowers FDA2  
                      _logPC 0D54             ?_Eeprom_ReadByte 0080                        _numAA 00E7  
                      _num9V 00E6              __end_of_isdigit 3626                        _step1 0054  
                      _step2 0055                        _putch 37AE                        main@i 00C0  
     i2stopOperation@address 000A                        pclath 000FFA                        tablat 000FF5  
           __end_ofi2___wmul 369A                        plusw1 000FE3                        plusw2 000FDB  
                      status 000FD8              ?i2_next_address 0001           __size_ofi2___awdiv 0084  
         i2_Eeprom_WriteByte 364E           __size_ofi2___awmod 0070               __CFG_PBADEN$ON 000000  
              i2printf@width 001E             __end_ofi2_printf 25C8           __size_ofi2___lwdiv 0052  
         __size_ofi2___lwmod 0042               show_log@AA_num 00A8              __initialization 326C  
         __size_ofi2_lcdInst 000C                 __end_of_main 0D54                 __end_of_keys FD98  
        next_address@address 0080                   i2printf@ap 0018          ?i2_Eeprom_WriteByte 0001  
               logPC@numberC 0118           __size_ofi2_isdigit 001E                 logPC@runTime 0113  
                     ??_main 00BD                __activetblptr 000002            ?_I2C_Master_Start 0001  
          ?_I2C_Master_Write 0081            show_log@Drain_num 00AE               show_log@minute 00B6  
             show_log@second 00B7         __size_of_getHundreds 003C           ??_I2C_Master_Start 0081  
                     _ADCON0 000FC2                       _ADCON1 000FC1           ??_I2C_Master_Write 0083  
                     _ADCON2 000FC0                       ?_logPC 0001                       _EEADRH 000FAA  
                     _EEDATA 000FA8         ??i2_Eeprom_WriteByte 0004                       _EECON2 000FA7  
           ___awdiv@dividend 0080              i2lcdNibble@data 0002                       ?_putch 0001  
            i2lcdNibble@temp 0001                       _INT1IE 007F83                       _INT1IF 007F80  
                     _CVRCON 000FB5                       i2l1118 343C                       i2l1128 3516  
                     i2l6003 2B38                       i2l6011 2B4E                       i2l4511 2460  
                     i2l4521 249E                       i2l4441 22E4                       i2l5233 2E36  
                     i2l6009 2B4C                       i2l4523 24A6                       i2l4451 2318  
                     i2l4435 22C6                       i2l4285 36BA                       i2l4541 24EE  
                     i2l4517 247A                       i2l4509 2450                       i2l4445 22EA  
                     i2l4365 27DA                       i2l5229 2E2E                       i2l5245 2E76  
                     i2l4535 24D2                       i2l4463 237A                       i2l4439 22D6  
                     i2l4367 27EA                       i2l5271 2EDE                       i2l5263 2EBE  
                     i2l5255 2E9C                       i2l5239 2E52                       i2l3921 3412  
                     i2l4537 24DA                       i2l4545 2500                       i2l4529 24BC  
                     i2l4481 23F4                       i2l4561 25AE                       i2l3841 313A  
                     i2l5265 2EC4                       i2l5249 2E86                       i2l3931 3432  
                     i2l3923 3416                       i2l4547 2506                       i2l4555 2590  
                     i2l4475 23D6                       i2l4459 2376                       i2l3843 3142  
                     i2l3835 3124                       i2l3941 34F4                       i2l3909 36F6  
                     i2l4549 254A                       i2l4557 25A0                       i2l4493 2420  
                     i2l3861 317A                       i2l3853 3162                       i2l3845 3146  
                     i2l3829 3114                keypressed@key 0022                       i2l3919 340A  
                     i2l3943 34F8                       i2l4559 25A6                       i2l4495 2424  
                     i2l4479 23F0                       i2l3857 316C                       i2l3881 322A  
                     i2l3873 3210                       i2l3947 350C                       i2l3939 34EC  
                     i2l3883 3232                       i2l3885 3236                       i2l3893 3254  
                     i2l3877 321C                       i2l3897 3262                       i2l3889 324A  
                     i2l5921 2A3C                       i2l5913 2A24                       i2l5931 2A5C  
                     i2l5907 2A0E                       i2l5925 2A48                       i2l5917 2A30  
                     i2l5933 2A5E                       i2l5853 292A                       i2l5951 2A98  
                     i2l5943 2A82                       i2l5881 29B0                       i2l5947 2A8E  
                     i2l5939 2A76                       i2l5883 29B6                       i2l5875 2998  
                     i2l5973 2ADC                       i2l5965 2AC4                       i2l5957 2AAC  
                     i2l5991 2B16                       i2l5983 2AFC                       i2l5959 2AAE  
                     i2l5887 29C4                       i2l5977 2AE8                       i2l5969 2AD0  
                     i2l5985 2AFE                       i2l5889 29CA                       i2l5995 2B22  
                     i2l5999 2B2E                       _TMR0IE 007F95                       _TMR0IF 007F92  
                  ??i2_putch 0003                       _TMR1IE 007CE8                       _TMR1IF 007CF0  
                     _TMR2IE 007CE9                       _TMR2IF 007CF1                       _TMR2ON 007E52  
                     _SSPADD 000FC8                       _TRISC3 007CA3                       _TRISC4 007CA4  
                     _SSPBUF 000FC9               _turn1BackRight 00D9               __CFG_XINST$OFF 000000  
              _stopOperation 1FA2               _turn2BackRight 00DD                       ___wmul 3598  
                  ??___awdiv 0084               __CFG_STVREN$ON 000000                    ??___awmod 0084  
   i2Eeprom_ReadByte@address 0001                    ??___lldiv 0088                    ??___lwdiv 0084  
                  ??___lwmod 008B                       _countC 00E1                       clear_0 32B2  
                     clear_1 32BE             ___awdiv@quotient 0086              ___awmod@divisor 0082  
                  ??_getChar 0090              ___awmod@counter 0084                    ??_lcdInst 0082  
                     _printf 18B2                    ??_getOnes 008E                    ??_getTens 0089  
                     logPC@i 0120               i2___awdiv@sign 0006                    ??_readADC 0080  
                  ??_initLCD 0083     __size_ofi2_stopOperation 02FA             __end_of_wait_2ms 3718  
               __pdataCOMRAM 0035                    ??_isdigit 0080            __end_ofi2___awdiv 3184  
          __end_ofi2___awmod 326C            __end_ofi2___lwdiv 3446                 __mediumconst FC9E  
          __end_ofi2___lwmod 3520             __end_of_show_log 1FA2                       tblptrh 000FF7  
    Eeprom_WriteByte@address 0080                       tblptrl 000FF6                       tblptru 000FF8  
              main@steps_765 00C5                main@steps_774 00C6               i2___awmod@sign 0006  
          __end_ofi2_lcdInst 3802            __end_ofi2_isdigit 36FE                   __accesstop 0080  
    __end_of__initialization 32C4                ___rparam_used 000001               ?_stopOperation 0001  
         i2___lwmod@dividend 0008               __pcstackCOMRAM 0001                 __pidataBANK0 37CE  
              __end_of_logPC 18B2                __end_of_putch 37BE            ?_Eeprom_WriteByte 0080  
                i2printf@idx 0017                  i2printf@val 001B           testBatteries@volt1 0083  
         testBatteries@volt2 0087           testBatteries@volt3 0085           testBatteries@volt4 0089  
         testBatteries@volt5 008B                logPC@numberAA 0116                logPC@number9V 011A  
         ??_Eeprom_WriteByte 0083                    ?i2___wmul 0001           __size_of_lcdNibble 0060  
                i2putch@data 0003                  keypressed@i 0024                  ISR@keypress 0034  
           logPC@numberDrain 011C                    ?i2_printf 000D          show_log@log_address 00A2  
           logPC@numberTotal 011E                      ??_logPC 0090                      ??_putch 0082  
                 __pbssBANK0 00C8                ?_next_address 0080              show_log@address 00BB  
      __end_of_testBatteries 2DD4                 ?i2_lcdNibble 0001                      ?___wmul 0080  
                    ?_printf 008C                   ??i2___wmul 0005               keypressed@left 0023  
                    _CHeader FD68                   ??i2_printf 0013             ??i2_next_address 0003  
       show_log@elapsed_time 00B0                      _SSPCON1 000FC6                      _SSPCON2 000FC5  
          ??i2_stopOperation 0009                      _SSPSTAT 000FC7            show_log@total_num 00A6  
             ??_next_address 0082                      i2_putch 37EA                   _countDrain 00E2  
            ??_stopOperation 0088  __size_ofi2_I2C_Master_Start 0008            __end_of_lcdNibble 3394  
__size_ofi2_I2C_Master_Write 000A                      __Hparam 0000                      __Lparam 0000  
                 _lastRunRTC 00C8                    ?_wait_2ms 0080         Eeprom_WriteByte@data 0082  
                  ?_show_log 00A2                      ___awdiv 2EE4                      ___awmod 305E  
                    ___lldiv 2FA2              __size_of___wmul 0036                      ___lwdiv 3184  
                    ___lwmod 32D2                    _CMCONbits 000FB4                      __pcinit 326C  
                 _plat1Right 00D1                      _getChar 3816                      __ramtop 1000  
                 _plat2Right 00D5                      _lcdInst 37BE                      _getOnes 36C0  
                    __ptext0 0012                      __ptext1 36FE                      __ptext2 2BB4  
                    __ptext3 3718                      _getTens 3520                      __ptext4 1FA2  
                    __ptext5 305E                      __ptext6 2EE4                      __ptext7 3626  
                    __ptext8 1C66                      __ptext9 18B2              __size_of_printf 03B4  
                  _T0CONbits 000FD5                      _countAA 00E0                      _count9V 00DF  
                    _readADC 3718                      _initLCD 3494                 __size_of_ISR 2BAC  
          __end_of_hexpowers FDAA                    _T1CONbits 000FCD                      _dpowers FD98  
                    _isdigit 35FC                      _opTimer 0051             ___awmod@dividend 0080  
                    _numBats 00E8                   _keypressed 2DD4     __size_of_I2C_Master_Init 0060  
   __size_of_I2C_Master_Read 002E     __size_of_I2C_Master_Wait 0014     __size_of_I2C_Master_Stop 0008  
                    _sorting 0053               __pintcode_body 28C2         end_of_initialization 32C4  
                 getChar@num 008E                __Lmediumconst FC9E                      int_func 28C2  
        i2___wmul@multiplier 0001                   _screenMode 00FA     __size_of_Eeprom_ReadByte 0018  
  __size_of_I2C_Master_Start 0008    __size_of_I2C_Master_Write 000A              ___lldiv@divisor 0084  
                 _timeHeader FD48              ___lldiv@counter 008C                   ??_wait_2ms 0082  
                    printf@c 00A1                      printf@f 008C             I2C_Master_Init@c 008D  
           I2C_Master_Read@a 0081                      postdec1 000FE5                      postdec2 000FDD  
                 _solOnTimer 0052                   ??_show_log 00A5                      postinc0 000FEE  
                    postinc2 000FDE                   getOnes@num 008C  i2stopOperation@address_code 0009  
                 getTens@num 0087                ??_getHundreds 0089            i2_I2C_Master_Read 369A  
          i2_I2C_Master_Wait 379C            i2_I2C_Master_Stop 382E                    i2___awdiv 3100  
                  i2___awmod 31FC            i2___lwdiv@divisor 0003  __size_ofi2_Eeprom_WriteByte 0026  
                  i2___lwdiv 33F4                   logPC@F3230 00F0                   logPC@F3242 00F6  
                 logPC@F3234 00F2                   logPC@F3250 00ED                   logPC@F3226 0035  
                 logPC@F3246 00F8                   logPC@F3238 00F4                    i2___lwmod 34DE  
          i2___lwdiv@counter 0007           ?i2_I2C_Master_Read 0001           ?i2_I2C_Master_Wait 0001  
         ?i2_I2C_Master_Stop 0001         stopOperation@address 0089                    i2_lcdInst 37F6  
                show_log@day 00B4        __end_of_runTimeHeader FD08                  printf@width 009F  
         i2___awdiv@dividend 0001                   logPC@i_921 012A                   logPC@i_913 0122  
                 logPC@i_930 0134                   logPC@i_922 012C                   logPC@i_914 0124  
                 logPC@i_933 0136                   logPC@i_925 012E                   logPC@i_917 0126  
                 logPC@i_934 0138                   logPC@i_926 0130                   logPC@i_918 0128  
                 logPC@i_937 013A                   logPC@i_929 0132          ??i2_I2C_Master_Read 0002  
                  i2_isdigit 36E0          ??i2_I2C_Master_Wait 0001          ??i2_I2C_Master_Stop 0002  
          i2_Eeprom_ReadByte 375E           ?i2_Eeprom_ReadByte 0001               __end_of___wmul 35CE  
       __size_ofi2_lcdNibble 004E                __pidataCOMRAM 3788         __end_of_next_address 375E  
              i2lcdInst@data 0003          ??i2_Eeprom_ReadByte 0003             i2___wmul@product 0005  
             __end_of_printf 1C66                 i2printf@flag 001D    __end_ofi2_I2C_Master_Read 36C0  
  __end_ofi2_I2C_Master_Wait 37AE                 i2printf@prec 001A          start_initialization 326C  
  __end_ofi2_I2C_Master_Stop 3836                  ?_keypressed 0021           i2___awdiv@quotient 0007  
                __end_of_ISR 2BB4            __size_ofi2___wmul 0026                    i2printf@c 0020  
                  i2printf@f 000D        i2I2C_Master_Read@temp 0003                   ?i2___awdiv 0001  
                 ?i2___awmod 0001                   ?i2___lwdiv 0001                   ?i2___lwmod 0008  
  __size_of_Eeprom_WriteByte 0028          __end_of_getHundreds 3598            __size_ofi2_printf 030C  
          ??_I2C_Master_Init 0091            ??_I2C_Master_Read 0081            ??_I2C_Master_Wait 0080  
                 ?i2_lcdInst 0001            ??_I2C_Master_Stop 0081    __end_ofi2_Eeprom_ReadByte 3774  
                 ?i2_isdigit 0001          __end_of_drainHeader FCC4    i2Eeprom_WriteByte@address 0001  
           show_log@Nine_num 00AC                     ??___wmul 0084            ??_Eeprom_ReadByte 0082  
                __pdataBANK0 00ED             __CFG_LPT1OSC$OFF 000000              i2_stopOperation 25C8  
                   ??_printf 0094                  __pbssCOMRAM 0048                __pcstackBANK0 0080  
              __pcstackBANK1 0100            i2___lwmod@divisor 000A           show_log@currScreen 00A4  
          i2___lwmod@counter 000C                 _isdigit$1200 0081                     ?i2_putch 0001  
             getHundreds@num 0087             _I2C_Master_Start 3826          i2I2C_Master_Write@d 0002  
           _I2C_Master_Write 3802             ___lwdiv@dividend 0080            __CFG_CCP2MX$PORTC 000000  
        __size_of_keypressed 0110                    __pintcode 0008                __pmediumconst FC9E  
                  _lcdNibble 3334                     ?___awdiv 0080                     ?___awmod 0080  
                   ?___lldiv 0080            __size_of_wait_2ms 001A                     ?___lwdiv 0080  
                   ?___lwmod 0087            __size_of_show_log 033C                    _doneTimer 00E3  
                   ?_getChar 008E                     ?_lcdInst 0001                     ?_getOnes 008C  
                   ?_getTens 0087                     ?_readADC 0001                     ?_initLCD 0001  
     __size_of_testBatteries 0220                    _count_2ms 004F                     ?_isdigit 0001  
 __size_ofi2_I2C_Master_Read 0026                  _getHundreds 355C   __size_ofi2_I2C_Master_Wait 0012  
 __size_ofi2_I2C_Master_Stop 0008                     _AAHeader FD08                    _hexpowers FDA2  
           ___lwdiv@quotient 0085                  ??i2___awdiv 0005               __size_of_logPC 0B5E  
                ??i2___awmod 0005                    _plat1Left 00CF                    _plat2Left 00D3  
                ??i2___lwdiv 0005                  ??i2___lwmod 000C          __end_of_nineVHeader FD48  
             __size_of_putch 0010                  _drainHeader FC9F   __end_ofi2_I2C_Master_Start 383E  
 __end_ofi2_I2C_Master_Write 3816                  ??i2_lcdInst 0003               ___wmul@product 0084  
 __size_ofi2_Eeprom_ReadByte 0016                     _LATAbits 000F89                     _LATBbits 000F8A  
                   _LATCbits 000F8B                     _LATDbits 000F8C                     _LATEbits 000F8D  
            keypressed@right 0021                  ??i2_isdigit 0001        __end_of_stopOperation 22BC  
                   _PIR2bits 000FA1                     i2u551_40 2A02                     i2u368_40 36B8  
                   i2u552_48 2A04                     i2u545_40 29AA                     i2u801_47 345E  
                   i2u802_47 3466                     i2u803_47 3486                     i2u804_47 348E  
                   i2u580_48 2B6A                     i2u579_40 2B68      __end_ofi2_stopOperation 28C2  
      __size_of_next_address 0016             __CFG_WDTPS$32768 000000                   ?_lcdNibble 0001  
          logPC@started_time 0100                    _startGear 00EC                   _ADCON0bits 000FC2  
                  main@i_743 00C1                    main@i_808 00C4                    main@i_791 00C2  
                  main@i_793 00C3            ___wmul@multiplier 0080                     i2___wmul 3674  
              lcdNibble@data 0081                   printf@flag 009E                lcdNibble@temp 0080  
                 printf@prec 009B            i2___awdiv@divisor 0003                    main@steps 00C7  
          i2___awdiv@counter 0005                     i2_printf 22BC          I2C_Master_Read@temp 0082  
                  copy_data0 3280                    copy_data1 32A0             _Eeprom_WriteByte 3626  
         i2___awmod@dividend 0001                 _next_address 3748             __size_ofi2_putch 000C  
                 _EECON1bits 000FA6                _testBatteries 2BB4                     __Hrparam 0000  
    __size_ofi2_next_address 000E                     __Lrparam 0000           __CFG_BOREN$SBORDIS 000000  
           __size_of___awdiv 00BE             __size_of___awmod 00A2        i2___wmul@multiplicand 0003  
           __size_of___lldiv 00BC             __size_of___lwdiv 0078             __size_of___lwmod 0062  
             readADC@channel 0080       Eeprom_ReadByte@address 0080           i2I2C_Master_Read@a 0002  
           __size_of_getChar 0008             __size_of_lcdInst 0010             __size_of_getOnes 0020  
           __size_of_getTens 003C              _I2C_Master_Init 3394             __size_of_readADC 0018  
            _I2C_Master_Read 35CE             __size_of_initLCD 004A                  _nineVHeader FD28  
            _I2C_Master_Wait 3774              _I2C_Master_Stop 381E                 ??_keypressed 0023  
           __size_of_isdigit 002A   __end_ofi2_Eeprom_WriteByte 3674              ___lwdiv@divisor 0082  
            ___lwdiv@counter 0084                     __ptext10 37AE                     __ptext11 35FC  
                   __ptext20 3184                     __ptext12 3598                     __ptext21 3816  
                   __ptext13 3748                     __ptext30 3394                     __ptext22 3802  
                   __ptext14 3730                     __ptext31 2FA2                     __ptext23 381E  
                   __ptext15 0D54                     __ptext40 22BC                     __ptext24 3826  
                   __ptext16 3520                     __ptext41 37EA                     __ptext33 2DD4  
                   __ptext25 3494                     __ptext17 36C0                     __ptext50 3836  
                   __ptext42 36E0                     __ptext34 25C8                     __ptext26 37BE  
                   __ptext18 32D2                     __ptext51 369A                     __ptext43 3674  
                   __ptext35 37DC                     __ptext27 3334                     __ptext19 355C  
                   __ptext52 379C                     __ptext44 34DE                     __ptext36 31FC  
                   __ptext28 35CE                     __ptext45 33F4                     __ptext37 3100  
                   __ptext29 3774                     __ptext46 37F6                     __ptext38 364E  
                   __ptext47 3446                     __ptext39 375E                     __ptext48 380C  
                   __ptext49 382E                     _doubleAA 00E4               i2_isdigit$1200 0002  
              __size_of_main 0D42                    wait_2ms@x 0080              _Eeprom_ReadByte 3730  
             ?_testBatteries 0001                     _realTime 0048                     _numDrain 00EA  
                   _wait_2ms 36FE             ?i2_stopOperation 0001                ??i2_lcdNibble 0001  
                ??_lcdNibble 0080                     _show_log 1C66           __end_of_keypressed 2EE4  
                   int$flags 0056                    printf@idx 0098                    show_log@i 00B8  
                  printf@val 009C            i2___awmod@divisor 0003                    putch@data 0082  
          i2___awmod@counter 0005     __end_of_I2C_Master_Start 382E     __end_of_I2C_Master_Write 380C  
                 _INTCONbits 000FF2          __end_of_totalHeader FCE7                     isdigit@c 0082  
         __end_of_timeHeader FD68                     intlevel2 0000             ___lwmod@dividend 0087  
           ___lldiv@dividend 0080        i2next_address@address 0001                     printf@ap 0099  
    __end_of_I2C_Master_Init 33F4      __end_of_I2C_Master_Read 35FC      __end_of_I2C_Master_Wait 3788  
    __end_of_I2C_Master_Stop 3826                  lcdInst@data 0082          __end_ofi2_lcdNibble 3494  
           ___lldiv@quotient 0088            I2C_Master_Write@d 0081              ___lwmod@divisor 0089  
               ?_getHundreds 0087              ___lwmod@counter 008B      __end_of_Eeprom_ReadByte 3748  
            ??_testBatteries 0081                _runTimeHeader FCE7               i2_next_address 37DC  
     i2Eeprom_WriteByte@data 0003  
