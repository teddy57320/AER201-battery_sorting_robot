

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Mon Mar 27 12:00:02 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    37                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    51                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    52                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    53  0000                     
    54                           ; Version 1.40
    55                           ; Generated 01/12/2016 GMT
    56                           ; 
    57                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    58                           ; All rights reserved.
    59                           ; 
    60                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    61                           ; 
    62                           ; Redistribution and use in source and binary forms, with or without modification, are
    63                           ; permitted provided that the following conditions are met:
    64                           ; 
    65                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    66                           ;        conditions and the following disclaimer.
    67                           ; 
    68                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    69                           ;        of conditions and the following disclaimer in the documentation and/or other
    70                           ;        materials provided with the distribution.
    71                           ; 
    72                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    73                           ;        software without specific prior written permission.
    74                           ; 
    75                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    76                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    77                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    78                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    79                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    80                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    81                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    82                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    83                           ; 
    84                           ; 
    85                           ; Code-generator required, PIC18F4620 Definitions
    86                           ; 
    87                           ; SFR Addresses
    88  0000                     
    89                           	psect	idataBANK0
    90  001E66                     __pidataBANK0:
    91                           	opt stack 0
    92                           
    93                           ;initializer for _screenMode
    94  001E66  02                 	db	2
    95                           
    96                           	psect	mediumconst
    97  00FE56                     __pmediumconst:
    98                           	opt stack 0
    99  00FE56  00                 	db	0
   100  00FE57                     _keys:
   101                           	opt stack 0
   102  00FE57  31                 	db	49
   103  00FE58  32                 	db	50
   104  00FE59  33                 	db	51
   105  00FE5A  41                 	db	65
   106  00FE5B  34                 	db	52
   107  00FE5C  35                 	db	53
   108  00FE5D  36                 	db	54
   109  00FE5E  42                 	db	66
   110  00FE5F  37                 	db	55
   111  00FE60  38                 	db	56
   112  00FE61  39                 	db	57
   113  00FE62  43                 	db	67
   114  00FE63  2A                 	db	42
   115  00FE64  30                 	db	48
   116  00FE65  23                 	db	35
   117  00FE66  44                 	db	68
   118  00FE67  00                 	db	0
   119  00FE68                     __end_of_keys:
   120                           	opt stack 0
   121  00FE68                     _dpowers:
   122                           	opt stack 0
   123  00FE68  0001               	dw	1
   124  00FE6A  000A               	dw	10
   125  00FE6C  0064               	dw	100
   126  00FE6E  03E8               	dw	1000
   127  00FE70  2710               	dw	10000
   128  00FE72                     __end_of_dpowers:
   129                           	opt stack 0
   130  00FE72                     _hexpowers:
   131                           	opt stack 0
   132  00FE72  0001               	dw	1
   133  00FE74  0010               	dw	16
   134  00FE76  0100               	dw	256
   135  00FE78  1000               	dw	4096
   136  00FE7A                     __end_of_hexpowers:
   137                           	opt stack 0
   138  0000                     _ADRES	set	4035
   139  0000                     _TMR0	set	4054
   140  0000                     _TMR1	set	4046
   141  0000                     _ADCON0	set	4034
   142  0000                     _ADCON0bits	set	4034
   143  0000                     _ADCON1	set	4033
   144  0000                     _ADCON2	set	4032
   145  0000                     _INTCONbits	set	4082
   146  0000                     _LATA	set	3977
   147  0000                     _LATAbits	set	3977
   148  0000                     _LATB	set	3978
   149  0000                     _LATBbits	set	3978
   150  0000                     _LATC	set	3979
   151  0000                     _LATCbits	set	3979
   152  0000                     _LATD	set	3980
   153  0000                     _LATDbits	set	3980
   154  0000                     _LATE	set	3981
   155  0000                     _LATEbits	set	3981
   156  0000                     _PORTB	set	3969
   157  0000                     _SSPADD	set	4040
   158  0000                     _SSPBUF	set	4041
   159  0000                     _SSPCON1	set	4038
   160  0000                     _SSPCON2	set	4037
   161  0000                     _SSPSTAT	set	4039
   162  0000                     _T0CON	set	4053
   163  0000                     _T0CONbits	set	4053
   164  0000                     _T1CON	set	4045
   165  0000                     _T1CONbits	set	4045
   166  0000                     _TRISA	set	3986
   167  0000                     _TRISB	set	3987
   168  0000                     _TRISC	set	3988
   169  0000                     _TRISD	set	3989
   170  0000                     _TRISE	set	3990
   171  0000                     _ACKDT	set	32301
   172  0000                     _ACKEN	set	32300
   173  0000                     _GIE	set	32663
   174  0000                     _INT1IE	set	32643
   175  0000                     _INT1IF	set	32640
   176  0000                     _PEIE	set	32662
   177  0000                     _PEN	set	32298
   178  0000                     _RCEN	set	32299
   179  0000                     _SEN	set	32296
   180  0000                     _TMR0IE	set	32661
   181  0000                     _TMR0IF	set	32658
   182  0000                     _TMR1IE	set	31976
   183  0000                     _TMR1IF	set	31984
   184  0000                     _TRISC3	set	31907
   185  0000                     _TRISC4	set	31908
   186  00FE7A                     STR_7:
   187  00FE7A  25                 	db	37
   188  00FE7B  30                 	db	48	;'0'
   189  00FE7C  32                 	db	50	;'2'
   190  00FE7D  64                 	db	100	;'d'
   191  00FE7E  3A                 	db	58	;':'
   192  00FE7F  25                 	db	37
   193  00FE80  30                 	db	48	;'0'
   194  00FE81  32                 	db	50	;'2'
   195  00FE82  64                 	db	100	;'d'
   196  00FE83  20                 	db	32
   197  00FE84  20                 	db	32
   198  00FE85  20                 	db	32
   199  00FE86  20                 	db	32
   200  00FE87  20                 	db	32
   201  00FE88  20                 	db	32
   202  00FE89  20                 	db	32
   203  00FE8A  20                 	db	32
   204  00FE8B  20                 	db	32
   205  00FE8C  20                 	db	32
   206  00FE8D  20                 	db	32
   207  00FE8E  20                 	db	32
   208  00FE8F  20                 	db	32
   209  00FE90  20                 	db	32
   210  00FE91  20                 	db	32
   211  00FE92  00                 	db	0
   212  00FE93                     STR_18:
   213  00FE93  44                 	db	68	;'D'
   214  00FE94  41                 	db	65	;'A'
   215  00FE95  54                 	db	84	;'T'
   216  00FE96  45                 	db	69	;'E'
   217  00FE97  3A                 	db	58	;':'
   218  00FE98  20                 	db	32
   219  00FE99  25                 	db	37
   220  00FE9A  30                 	db	48	;'0'
   221  00FE9B  32                 	db	50	;'2'
   222  00FE9C  78                 	db	120	;'x'
   223  00FE9D  2F                 	db	47
   224  00FE9E  25                 	db	37
   225  00FE9F  30                 	db	48	;'0'
   226  00FEA0  32                 	db	50	;'2'
   227  00FEA1  78                 	db	120	;'x'
   228  00FEA2  2F                 	db	47
   229  00FEA3  25                 	db	37
   230  00FEA4  30                 	db	48	;'0'
   231  00FEA5  32                 	db	50	;'2'
   232  00FEA6  78                 	db	120	;'x'
   233  00FEA7  20                 	db	32
   234  00FEA8  20                 	db	32
   235  00FEA9  00                 	db	0
   236  00FEAA                     STR_19:
   237  00FEAA  54                 	db	84	;'T'
   238  00FEAB  49                 	db	73	;'I'
   239  00FEAC  4D                 	db	77	;'M'
   240  00FEAD  45                 	db	69	;'E'
   241  00FEAE  3A                 	db	58	;':'
   242  00FEAF  20                 	db	32
   243  00FEB0  25                 	db	37
   244  00FEB1  30                 	db	48	;'0'
   245  00FEB2  32                 	db	50	;'2'
   246  00FEB3  78                 	db	120	;'x'
   247  00FEB4  3A                 	db	58	;':'
   248  00FEB5  25                 	db	37
   249  00FEB6  30                 	db	48	;'0'
   250  00FEB7  32                 	db	50	;'2'
   251  00FEB8  78                 	db	120	;'x'
   252  00FEB9  3A                 	db	58	;':'
   253  00FEBA  25                 	db	37
   254  00FEBB  30                 	db	48	;'0'
   255  00FEBC  32                 	db	50	;'2'
   256  00FEBD  78                 	db	120	;'x'
   257  00FEBE  20                 	db	32
   258  00FEBF  20                 	db	32
   259  00FEC0  00                 	db	0
   260  00FEC1                     STR_23:
   261  00FEC1  52                 	db	82	;'R'
   262  00FEC2  55                 	db	85	;'U'
   263  00FEC3  4E                 	db	78	;'N'
   264  00FEC4  4E                 	db	78	;'N'
   265  00FEC5  49                 	db	73	;'I'
   266  00FEC6  4E                 	db	78	;'N'
   267  00FEC7  47                 	db	71	;'G'
   268  00FEC8  3A                 	db	58	;':'
   269  00FEC9  20                 	db	32
   270  00FECA  25                 	db	37
   271  00FECB  30                 	db	48	;'0'
   272  00FECC  32                 	db	50	;'2'
   273  00FECD  64                 	db	100	;'d'
   274  00FECE  3A                 	db	58	;':'
   275  00FECF  25                 	db	37
   276  00FED0  30                 	db	48	;'0'
   277  00FED1  32                 	db	50	;'2'
   278  00FED2  64                 	db	100	;'d'
   279  00FED3  20                 	db	32
   280  00FED4  20                 	db	32
   281  00FED5  20                 	db	32
   282  00FED6  00                 	db	0
   283  00FED7                     STR_13:
   284  00FED7  42                 	db	66	;'B'
   285  00FED8  41                 	db	65	;'A'
   286  00FED9  54                 	db	84	;'T'
   287  00FEDA  54                 	db	84	;'T'
   288  00FEDB  45                 	db	69	;'E'
   289  00FEDC  52                 	db	82	;'R'
   290  00FEDD  49                 	db	73	;'I'
   291  00FEDE  45                 	db	69	;'E'
   292  00FEDF  53                 	db	83	;'S'
   293  00FEE0  3A                 	db	58	;':'
   294  00FEE1  20                 	db	32
   295  00FEE2  25                 	db	37
   296  00FEE3  30                 	db	48	;'0'
   297  00FEE4  32                 	db	50	;'2'
   298  00FEE5  64                 	db	100	;'d'
   299  00FEE6  20                 	db	32
   300  00FEE7  20                 	db	32
   301  00FEE8  20                 	db	32
   302  00FEE9  20                 	db	32
   303  00FEEA  20                 	db	32
   304  00FEEB  00                 	db	0
   305  00FEEC                     STR_9:
   306  00FEEC  42                 	db	66	;'B'
   307  00FEED  41                 	db	65	;'A'
   308  00FEEE  54                 	db	84	;'T'
   309  00FEEF  54                 	db	84	;'T'
   310  00FEF0  45                 	db	69	;'E'
   311  00FEF1  52                 	db	82	;'R'
   312  00FEF2  49                 	db	73	;'I'
   313  00FEF3  45                 	db	69	;'E'
   314  00FEF4  53                 	db	83	;'S'
   315  00FEF5  3A                 	db	58	;':'
   316  00FEF6  20                 	db	32
   317  00FEF7  25                 	db	37
   318  00FEF8  30                 	db	48	;'0'
   319  00FEF9  32                 	db	50	;'2'
   320  00FEFA  64                 	db	100	;'d'
   321  00FEFB  20                 	db	32
   322  00FEFC  20                 	db	32
   323  00FEFD  20                 	db	32
   324  00FEFE  00                 	db	0
   325  00FEFF                     STR_24:
   326  00FEFF  30                 	db	48	;'0'
   327  00FF00  31                 	db	49	;'1'
   328  00FF01  32                 	db	50	;'2'
   329  00FF02  33                 	db	51	;'3'
   330  00FF03  34                 	db	52	;'4'
   331  00FF04  35                 	db	53	;'5'
   332  00FF05  36                 	db	54	;'6'
   333  00FF06  37                 	db	55	;'7'
   334  00FF07  38                 	db	56	;'8'
   335  00FF08  39                 	db	57	;'9'
   336  00FF09  61                 	db	97	;'a'
   337  00FF0A  62                 	db	98	;'b'
   338  00FF0B  63                 	db	99	;'c'
   339  00FF0C  64                 	db	100	;'d'
   340  00FF0D  65                 	db	101	;'e'
   341  00FF0E  66                 	db	102	;'f'
   342  00FF0F  00                 	db	0
   343  00FF10                     STR_21:
   344  00FF10  20                 	db	32
   345  00FF11  20                 	db	32
   346  00FF12  20                 	db	32
   347  00FF13  20                 	db	32
   348  00FF14  20                 	db	32
   349  00FF15  20                 	db	32
   350  00FF16  20                 	db	32
   351  00FF17  20                 	db	32
   352  00FF18  20                 	db	32
   353  00FF19  20                 	db	32
   354  00FF1A  20                 	db	32
   355  00FF1B  20                 	db	32
   356  00FF1C  20                 	db	32
   357  00FF1D  20                 	db	32
   358  00FF1E  20                 	db	32
   359  00FF1F  20                 	db	32
   360  00FF20  00                 	db	0
   361  00FF21                     STR_10:
   362  00FF21  23                 	db	35
   363  00FF22  20                 	db	32
   364  00FF23  4F                 	db	79	;'O'
   365  00FF24  46                 	db	70	;'F'
   366  00FF25  20                 	db	32
   367  00FF26  43                 	db	67	;'C'
   368  00FF27  20                 	db	32
   369  00FF28  20                 	db	32
   370  00FF29  20                 	db	32
   371  00FF2A  20                 	db	32
   372  00FF2B  20                 	db	32
   373  00FF2C  20                 	db	32
   374  00FF2D  20                 	db	32
   375  00FF2E  20                 	db	32
   376  00FF2F  20                 	db	32
   377  00FF30  20                 	db	32
   378  00FF31  00                 	db	0
   379  00FF32                     STR_14:
   380  00FF32  23                 	db	35
   381  00FF33  20                 	db	32
   382  00FF34  4F                 	db	79	;'O'
   383  00FF35  46                 	db	70	;'F'
   384  00FF36  20                 	db	32
   385  00FF37  41                 	db	65	;'A'
   386  00FF38  41                 	db	65	;'A'
   387  00FF39  20                 	db	32
   388  00FF3A  20                 	db	32
   389  00FF3B  20                 	db	32
   390  00FF3C  20                 	db	32
   391  00FF3D  20                 	db	32
   392  00FF3E  20                 	db	32
   393  00FF3F  20                 	db	32
   394  00FF40  20                 	db	32
   395  00FF41  20                 	db	32
   396  00FF42  00                 	db	0
   397  00FF43                     STR_12:
   398  00FF43  23                 	db	35
   399  00FF44  20                 	db	32
   400  00FF45  4F                 	db	79	;'O'
   401  00FF46  46                 	db	70	;'F'
   402  00FF47  20                 	db	32
   403  00FF48  39                 	db	57	;'9'
   404  00FF49  56                 	db	86	;'V'
   405  00FF4A  20                 	db	32
   406  00FF4B  20                 	db	32
   407  00FF4C  20                 	db	32
   408  00FF4D  20                 	db	32
   409  00FF4E  20                 	db	32
   410  00FF4F  20                 	db	32
   411  00FF50  20                 	db	32
   412  00FF51  20                 	db	32
   413  00FF52  20                 	db	32
   414  00FF53  00                 	db	0
   415  00FF54                     STR_8:
   416  00FF54  54                 	db	84	;'T'
   417  00FF55  4F                 	db	79	;'O'
   418  00FF56  54                 	db	84	;'T'
   419  00FF57  41                 	db	65	;'A'
   420  00FF58  4C                 	db	76	;'L'
   421  00FF59  20                 	db	32
   422  00FF5A  23                 	db	35
   423  00FF5B  20                 	db	32
   424  00FF5C  4F                 	db	79	;'O'
   425  00FF5D  46                 	db	70	;'F'
   426  00FF5E  20                 	db	32
   427  00FF5F  20                 	db	32
   428  00FF60  20                 	db	32
   429  00FF61  20                 	db	32
   430  00FF62  20                 	db	32
   431  00FF63  20                 	db	32
   432  00FF64  00                 	db	0
   433  00FF65                     STR_5:
   434  00FF65  54                 	db	84	;'T'
   435  00FF66  4F                 	db	79	;'O'
   436  00FF67  20                 	db	32
   437  00FF68  43                 	db	67	;'C'
   438  00FF69  4F                 	db	79	;'O'
   439  00FF6A  4E                 	db	78	;'N'
   440  00FF6B  54                 	db	84	;'T'
   441  00FF6C  49                 	db	73	;'I'
   442  00FF6D  4E                 	db	78	;'N'
   443  00FF6E  55                 	db	85	;'U'
   444  00FF6F  45                 	db	69	;'E'
   445  00FF70  20                 	db	32
   446  00FF71  20                 	db	32
   447  00FF72  20                 	db	32
   448  00FF73  20                 	db	32
   449  00FF74  20                 	db	32
   450  00FF75  00                 	db	0
   451  00FF76                     STR_16:
   452  00FF76  23                 	db	35
   453  00FF77  20                 	db	32
   454  00FF78  4F                 	db	79	;'O'
   455  00FF79  46                 	db	70	;'F'
   456  00FF7A  20                 	db	32
   457  00FF7B  44                 	db	68	;'D'
   458  00FF7C  52                 	db	82	;'R'
   459  00FF7D  41                 	db	65	;'A'
   460  00FF7E  49                 	db	73	;'I'
   461  00FF7F  4E                 	db	78	;'N'
   462  00FF80  45                 	db	69	;'E'
   463  00FF81  44                 	db	68	;'D'
   464  00FF82  20                 	db	32
   465  00FF83  20                 	db	32
   466  00FF84  20                 	db	32
   467  00FF85  20                 	db	32
   468  00FF86  00                 	db	0
   469  00FF87                     STR_4:
   470  00FF87  44                 	db	68	;'D'
   471  00FF88  4F                 	db	79	;'O'
   472  00FF89  4E                 	db	78	;'N'
   473  00FF8A  45                 	db	69	;'E'
   474  00FF8B  21                 	db	33
   475  00FF8C  20                 	db	32
   476  00FF8D  50                 	db	80	;'P'
   477  00FF8E  52                 	db	82	;'R'
   478  00FF8F  45                 	db	69	;'E'
   479  00FF90  53                 	db	83	;'S'
   480  00FF91  53                 	db	83	;'S'
   481  00FF92  20                 	db	32
   482  00FF93  2A                 	db	42
   483  00FF94  20                 	db	32
   484  00FF95  20                 	db	32
   485  00FF96  20                 	db	32
   486  00FF97  00                 	db	0
   487  00FF98                     STR_22:
   488  00FF98  52                 	db	82	;'R'
   489  00FF99  55                 	db	85	;'U'
   490  00FF9A  4E                 	db	78	;'N'
   491  00FF9B  4E                 	db	78	;'N'
   492  00FF9C  49                 	db	73	;'I'
   493  00FF9D  4E                 	db	78	;'N'
   494  00FF9E  47                 	db	71	;'G'
   495  00FF9F  3A                 	db	58	;':'
   496  00FFA0  20                 	db	32
   497  00FFA1  30                 	db	48	;'0'
   498  00FFA2  30                 	db	48	;'0'
   499  00FFA3  3A                 	db	58	;':'
   500  00FFA4  30                 	db	48	;'0'
   501  00FFA5  30                 	db	48	;'0'
   502  00FFA6  20                 	db	32
   503  00FFA7  20                 	db	32
   504  00FFA8  00                 	db	0
   505  00FFA9                     STR_20:
   506  00FFA9  45                 	db	69	;'E'
   507  00FFAA  4D                 	db	77	;'M'
   508  00FFAB  45                 	db	69	;'E'
   509  00FFAC  52                 	db	82	;'R'
   510  00FFAD  47                 	db	71	;'G'
   511  00FFAE  45                 	db	69	;'E'
   512  00FFAF  4E                 	db	78	;'N'
   513  00FFB0  43                 	db	67	;'C'
   514  00FFB1  59                 	db	89	;'Y'
   515  00FFB2  20                 	db	32
   516  00FFB3  53                 	db	83	;'S'
   517  00FFB4  54                 	db	84	;'T'
   518  00FFB5  4F                 	db	79	;'O'
   519  00FFB6  50                 	db	80	;'P'
   520  00FFB7  20                 	db	32
   521  00FFB8  20                 	db	32
   522  00FFB9  00                 	db	0
   523  00FFBA                     STR_6:
   524  00FFBA  54                 	db	84	;'T'
   525  00FFBB  4F                 	db	79	;'O'
   526  00FFBC  54                 	db	84	;'T'
   527  00FFBD  41                 	db	65	;'A'
   528  00FFBE  4C                 	db	76	;'L'
   529  00FFBF  20                 	db	32
   530  00FFC0  52                 	db	82	;'R'
   531  00FFC1  55                 	db	85	;'U'
   532  00FFC2  4E                 	db	78	;'N'
   533  00FFC3  20                 	db	32
   534  00FFC4  54                 	db	84	;'T'
   535  00FFC5  49                 	db	73	;'I'
   536  00FFC6  4D                 	db	77	;'M'
   537  00FFC7  45                 	db	69	;'E'
   538  00FFC8  3A                 	db	58	;':'
   539  00FFC9  20                 	db	32
   540  00FFCA  00                 	db	0
   541  00FFCB                     STR_3:
   542  00FFCB  20                 	db	32
   543  00FFCC  3C                 	db	60	;'<'
   544  00FFCD  20                 	db	32
   545  00FFCE  56                 	db	86	;'V'
   546  00FFCF  49                 	db	73	;'I'
   547  00FFD0  45                 	db	69	;'E'
   548  00FFD1  57                 	db	87	;'W'
   549  00FFD2  20                 	db	32
   550  00FFD3  20                 	db	32
   551  00FFD4  4C                 	db	76	;'L'
   552  00FFD5  4F                 	db	79	;'O'
   553  00FFD6  47                 	db	71	;'G'
   554  00FFD7  53                 	db	83	;'S'
   555  00FFD8  20                 	db	32
   556  00FFD9  3E                 	db	62	;'>'
   557  00FFDA  20                 	db	32
   558  00FFDB  00                 	db	0
   559  00FFDC                     STR_1:
   560  00FFDC  53                 	db	83	;'S'
   561  00FFDD  54                 	db	84	;'T'
   562  00FFDE  41                 	db	65	;'A'
   563  00FFDF  52                 	db	82	;'R'
   564  00FFE0  54                 	db	84	;'T'
   565  00FFE1  3A                 	db	58	;':'
   566  00FFE2  20                 	db	32
   567  00FFE3  20                 	db	32
   568  00FFE4  20                 	db	32
   569  00FFE5  50                 	db	80	;'P'
   570  00FFE6  52                 	db	82	;'R'
   571  00FFE7  45                 	db	69	;'E'
   572  00FFE8  53                 	db	83	;'S'
   573  00FFE9  53                 	db	83	;'S'
   574  00FFEA  20                 	db	32
   575  00FFEB  2A                 	db	42
   576  00FFEC  00                 	db	0
   577  00FFED                     STR_2:
   578  00FFED  3C                 	db	60	;'<'
   579  00FFEE  20                 	db	32
   580  00FFEF  20                 	db	32
   581  00FFF0  56                 	db	86	;'V'
   582  00FFF1  49                 	db	73	;'I'
   583  00FFF2  45                 	db	69	;'E'
   584  00FFF3  57                 	db	87	;'W'
   585  00FFF4  20                 	db	32
   586  00FFF5  20                 	db	32
   587  00FFF6  4C                 	db	76	;'L'
   588  00FFF7  4F                 	db	79	;'O'
   589  00FFF8  47                 	db	71	;'G'
   590  00FFF9  53                 	db	83	;'S'
   591  00FFFA  20                 	db	32
   592  00FFFB  20                 	db	32
   593  00FFFC  3E                 	db	62	;'>'
   594  00FFFD  00                 	db	0
   595  0000                     
   596                           ; #config settings
   597  00FFFE  00                 	db	0	; dummy byte at the end
   598  0000                     
   599                           	psect	cinit
   600  001CF6                     __pcinit:
   601                           	opt stack 0
   602  001CF6                     start_initialization:
   603                           	opt stack 0
   604  001CF6                     __initialization:
   605                           	opt stack 0
   606                           
   607                           ; Initialize objects allocated to BANK0 (1 bytes)
   608                           ; load TBLPTR registers with __pidataBANK0
   609  001CF6  0E66               	movlw	low __pidataBANK0
   610  001CF8  6EF6               	movwf	tblptrl,c
   611  001CFA  0E1E               	movlw	high __pidataBANK0
   612  001CFC  6EF7               	movwf	tblptrh,c
   613  001CFE  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   614  001D00  6EF8               	movwf	tblptru,c
   615  001D02  0009               	tblrd		*+	;fetch initializer
   616  001D04  CFF5 F0C7          	movff	tablat,__pdataBANK0
   617                           
   618                           ; Clear objects allocated to BANK0 (32 bytes)
   619  001D08  EE00  F0A7         	lfsr	0,__pbssBANK0
   620  001D0C  0E20               	movlw	32
   621  001D0E                     clear_0:
   622  001D0E  6AEE               	clrf	postinc0,c
   623  001D10  06E8               	decf	wreg,f,c
   624  001D12  E1FD               	bnz	clear_0
   625                           
   626                           ; Clear objects allocated to COMRAM (12 bytes)
   627  001D14  EE00  F040         	lfsr	0,__pbssCOMRAM
   628  001D18  0E0C               	movlw	12
   629  001D1A                     clear_1:
   630  001D1A  6AEE               	clrf	postinc0,c
   631  001D1C  06E8               	decf	wreg,f,c
   632  001D1E  E1FD               	bnz	clear_1
   633  001D20                     end_of_initialization:
   634                           	opt stack 0
   635  001D20                     __end_of__initialization:
   636                           	opt stack 0
   637  001D20  904C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   638  001D22  924C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   639  001D24  0E00               	movlw	low (__Lmediumconst shr (0+16))
   640  001D26  6EF8               	movwf	tblptru,c
   641  001D28  0100               	movlb	0
   642  001D2A  EF09  F000         	goto	_main	;jump to C main() function
   643                           tblptru	equ	0xFF8
   644                           tblptrh	equ	0xFF7
   645                           tblptrl	equ	0xFF6
   646                           tablat	equ	0xFF5
   647                           postinc0	equ	0xFEE
   648                           wreg	equ	0xFE8
   649                           
   650                           	psect	bssCOMRAM
   651  000040                     __pbssCOMRAM:
   652                           	opt stack 0
   653  000040                     _count_3ms:
   654                           	opt stack 0
   655  000040                     	ds	2
   656  000042                     _solOnTimer:
   657                           	opt stack 0
   658  000042                     	ds	2
   659  000044                     _stepAmount:
   660                           	opt stack 0
   661  000044                     	ds	2
   662  000046                     _doneTimer:
   663                           	opt stack 0
   664  000046                     	ds	1
   665  000047                     _opTimer:
   666                           	opt stack 0
   667  000047                     	ds	1
   668  000048                     _sorting:
   669                           	opt stack 0
   670  000048                     	ds	1
   671  000049                     _step1:
   672                           	opt stack 0
   673  000049                     	ds	1
   674  00004A                     _step2:
   675                           	opt stack 0
   676  00004A                     	ds	1
   677  00004B                     _waitPlats:
   678                           	opt stack 0
   679  00004B                     	ds	1
   680                           tblptru	equ	0xFF8
   681                           tblptrh	equ	0xFF7
   682                           tblptrl	equ	0xFF6
   683                           tablat	equ	0xFF5
   684                           postinc0	equ	0xFEE
   685                           wreg	equ	0xFE8
   686                           
   687                           	psect	bssBANK0
   688  0000A7                     __pbssBANK0:
   689                           	opt stack 0
   690  0000A7                     _time:
   691                           	opt stack 0
   692  0000A7                     	ds	7
   693  0000AE                     _plat1Left:
   694                           	opt stack 0
   695  0000AE                     	ds	2
   696  0000B0                     _plat1Right:
   697                           	opt stack 0
   698  0000B0                     	ds	2
   699  0000B2                     _plat2Left:
   700                           	opt stack 0
   701  0000B2                     	ds	2
   702  0000B4                     _plat2Right:
   703                           	opt stack 0
   704  0000B4                     	ds	2
   705  0000B6                     _count9V:
   706                           	opt stack 0
   707  0000B6                     	ds	1
   708  0000B7                     _countAA:
   709                           	opt stack 0
   710  0000B7                     	ds	1
   711  0000B8                     _countC:
   712                           	opt stack 0
   713  0000B8                     	ds	1
   714  0000B9                     _countDrain:
   715                           	opt stack 0
   716  0000B9                     	ds	1
   717  0000BA                     _min:
   718                           	opt stack 0
   719  0000BA                     	ds	1
   720  0000BB                     _num9V:
   721                           	opt stack 0
   722  0000BB                     	ds	1
   723  0000BC                     _numAA:
   724                           	opt stack 0
   725  0000BC                     	ds	1
   726  0000BD                     _numBats:
   727                           	opt stack 0
   728  0000BD                     	ds	1
   729  0000BE                     _numC:
   730                           	opt stack 0
   731  0000BE                     	ds	1
   732  0000BF                     _numDrain:
   733                           	opt stack 0
   734  0000BF                     	ds	1
   735  0000C0                     _sec:
   736                           	opt stack 0
   737  0000C0                     	ds	1
   738  0000C1                     _startGear:
   739                           	opt stack 0
   740  0000C1                     	ds	1
   741  0000C2                     _stepGear:
   742                           	opt stack 0
   743  0000C2                     	ds	1
   744  0000C3                     _turn1BackLeft:
   745                           	opt stack 0
   746  0000C3                     	ds	1
   747  0000C4                     _turn1BackRight:
   748                           	opt stack 0
   749  0000C4                     	ds	1
   750  0000C5                     _turn2BackLeft:
   751                           	opt stack 0
   752  0000C5                     	ds	1
   753  0000C6                     _turn2BackRight:
   754                           	opt stack 0
   755  0000C6                     	ds	1
   756                           tblptru	equ	0xFF8
   757                           tblptrh	equ	0xFF7
   758                           tblptrl	equ	0xFF6
   759                           tablat	equ	0xFF5
   760                           postinc0	equ	0xFEE
   761                           wreg	equ	0xFE8
   762                           
   763                           	psect	dataBANK0
   764  0000C7                     __pdataBANK0:
   765                           	opt stack 0
   766  0000C7                     _screenMode:
   767                           	opt stack 0
   768  0000C7                     	ds	1
   769                           tblptru	equ	0xFF8
   770                           tblptrh	equ	0xFF7
   771                           tblptrl	equ	0xFF6
   772                           tablat	equ	0xFF5
   773                           postinc0	equ	0xFEE
   774                           wreg	equ	0xFE8
   775                           
   776                           	psect	cstackBANK0
   777  000080                     __pcstackBANK0:
   778                           	opt stack 0
   779  000080                     ?_printf:
   780                           	opt stack 0
   781  000080                     printf@f:
   782                           	opt stack 0
   783  000080                     ___lldiv@quotient:
   784                           	opt stack 0
   785                           
   786                           ; 4 bytes @ 0x0
   787  000080                     	ds	4
   788  000084                     ___lldiv@counter:
   789                           	opt stack 0
   790                           
   791                           ; 1 bytes @ 0x4
   792  000084                     	ds	1
   793  000085                     ??_I2C_Master_Init:
   794                           
   795                           ; 1 bytes @ 0x5
   796  000085                     	ds	3
   797  000088                     ??_printf:
   798                           
   799                           ; 1 bytes @ 0x8
   800  000088                     	ds	4
   801  00008C                     printf@idx:
   802                           	opt stack 0
   803                           
   804                           ; 1 bytes @ 0xC
   805  00008C                     	ds	1
   806  00008D                     printf@ap:
   807                           	opt stack 0
   808                           
   809                           ; 2 bytes @ 0xD
   810  00008D                     	ds	2
   811  00008F                     printf@prec:
   812                           	opt stack 0
   813                           
   814                           ; 1 bytes @ 0xF
   815  00008F                     	ds	1
   816  000090                     printf@val:
   817                           	opt stack 0
   818                           
   819                           ; 2 bytes @ 0x10
   820  000090                     	ds	2
   821  000092                     printf@flag:
   822                           	opt stack 0
   823                           
   824                           ; 1 bytes @ 0x12
   825  000092                     	ds	1
   826  000093                     printf@width:
   827                           	opt stack 0
   828                           
   829                           ; 2 bytes @ 0x13
   830  000093                     	ds	2
   831  000095                     printf@c:
   832                           	opt stack 0
   833                           
   834                           ; 1 bytes @ 0x15
   835  000095                     	ds	1
   836  000096                     ??_main:
   837                           
   838                           ; 1 bytes @ 0x16
   839  000096                     	ds	4
   840  00009A                     main@i_592:
   841                           	opt stack 0
   842                           
   843                           ; 2 bytes @ 0x1A
   844  00009A                     	ds	2
   845  00009C                     main@i_593:
   846                           	opt stack 0
   847                           
   848                           ; 2 bytes @ 0x1C
   849  00009C                     	ds	2
   850  00009E                     main@i_594:
   851                           	opt stack 0
   852                           
   853                           ; 2 bytes @ 0x1E
   854  00009E                     	ds	2
   855  0000A0                     main@i_595:
   856                           	opt stack 0
   857                           
   858                           ; 2 bytes @ 0x20
   859  0000A0                     	ds	2
   860  0000A2                     main@i_596:
   861                           	opt stack 0
   862                           
   863                           ; 2 bytes @ 0x22
   864  0000A2                     	ds	2
   865  0000A4                     main@i:
   866                           	opt stack 0
   867                           
   868                           ; 1 bytes @ 0x24
   869  0000A4                     	ds	1
   870  0000A5                     main@i_583:
   871                           	opt stack 0
   872                           
   873                           ; 1 bytes @ 0x25
   874  0000A5                     	ds	1
   875  0000A6                     main@i_633:
   876                           	opt stack 0
   877                           
   878                           ; 1 bytes @ 0x26
   879  0000A6                     	ds	1
   880                           tblptru	equ	0xFF8
   881                           tblptrh	equ	0xFF7
   882                           tblptrl	equ	0xFF6
   883                           tablat	equ	0xFF5
   884                           postinc0	equ	0xFEE
   885                           wreg	equ	0xFE8
   886                           
   887                           	psect	cstackCOMRAM
   888  000001                     __pcstackCOMRAM:
   889                           	opt stack 0
   890  000001                     ??i2_isdigit:
   891  000001                     ?i2___wmul:
   892                           	opt stack 0
   893  000001                     ?i2___awdiv:
   894                           	opt stack 0
   895  000001                     ?i2___awmod:
   896                           	opt stack 0
   897  000001                     ?i2___lwdiv:
   898                           	opt stack 0
   899  000001                     i2lcdNibble@temp:
   900                           	opt stack 0
   901  000001                     i2___wmul@multiplier:
   902                           	opt stack 0
   903  000001                     i2___awdiv@dividend:
   904                           	opt stack 0
   905  000001                     i2___awmod@dividend:
   906                           	opt stack 0
   907  000001                     i2___lwdiv@dividend:
   908                           	opt stack 0
   909                           
   910                           ; 2 bytes @ 0x0
   911  000001                     	ds	1
   912  000002                     i2lcdNibble@data:
   913                           	opt stack 0
   914  000002                     i2_isdigit$936:
   915                           	opt stack 0
   916                           
   917                           ; 1 bytes @ 0x1
   918  000002                     	ds	1
   919  000003                     i2lcdInst@data:
   920                           	opt stack 0
   921  000003                     i2putch@data:
   922                           	opt stack 0
   923  000003                     i2isdigit@c:
   924                           	opt stack 0
   925  000003                     i2___wmul@multiplicand:
   926                           	opt stack 0
   927  000003                     i2___awdiv@divisor:
   928                           	opt stack 0
   929  000003                     i2___awmod@divisor:
   930                           	opt stack 0
   931  000003                     i2___lwdiv@divisor:
   932                           	opt stack 0
   933                           
   934                           ; 2 bytes @ 0x2
   935  000003                     	ds	2
   936  000005                     i2___awdiv@counter:
   937                           	opt stack 0
   938  000005                     i2___awmod@counter:
   939                           	opt stack 0
   940  000005                     i2___wmul@product:
   941                           	opt stack 0
   942  000005                     i2___lwdiv@quotient:
   943                           	opt stack 0
   944                           
   945                           ; 2 bytes @ 0x4
   946  000005                     	ds	1
   947  000006                     i2___awdiv@sign:
   948                           	opt stack 0
   949  000006                     i2___awmod@sign:
   950                           	opt stack 0
   951                           
   952                           ; 1 bytes @ 0x5
   953  000006                     	ds	1
   954  000007                     i2___lwdiv@counter:
   955                           	opt stack 0
   956  000007                     i2___awdiv@quotient:
   957                           	opt stack 0
   958                           
   959                           ; 2 bytes @ 0x6
   960  000007                     	ds	1
   961  000008                     ?i2___lwmod:
   962                           	opt stack 0
   963  000008                     i2___lwmod@dividend:
   964                           	opt stack 0
   965                           
   966                           ; 2 bytes @ 0x7
   967  000008                     	ds	1
   968  000009                     
   969                           ; 1 bytes @ 0x8
   970  000009                     	ds	1
   971  00000A                     i2___lwmod@divisor:
   972                           	opt stack 0
   973                           
   974                           ; 2 bytes @ 0x9
   975  00000A                     	ds	2
   976  00000C                     i2___lwmod@counter:
   977                           	opt stack 0
   978                           
   979                           ; 1 bytes @ 0xB
   980  00000C                     	ds	1
   981  00000D                     ?i2_printf:
   982                           	opt stack 0
   983  00000D                     i2printf@f:
   984                           	opt stack 0
   985                           
   986                           ; 2 bytes @ 0xC
   987  00000D                     	ds	6
   988  000013                     ??i2_printf:
   989                           
   990                           ; 1 bytes @ 0x12
   991  000013                     	ds	4
   992  000017                     i2printf@idx:
   993                           	opt stack 0
   994                           
   995                           ; 1 bytes @ 0x16
   996  000017                     	ds	1
   997  000018                     i2printf@ap:
   998                           	opt stack 0
   999                           
  1000                           ; 2 bytes @ 0x17
  1001  000018                     	ds	2
  1002  00001A                     i2printf@prec:
  1003                           	opt stack 0
  1004                           
  1005                           ; 1 bytes @ 0x19
  1006  00001A                     	ds	1
  1007  00001B                     i2printf@val:
  1008                           	opt stack 0
  1009                           
  1010                           ; 2 bytes @ 0x1A
  1011  00001B                     	ds	2
  1012  00001D                     i2printf@flag:
  1013                           	opt stack 0
  1014                           
  1015                           ; 1 bytes @ 0x1C
  1016  00001D                     	ds	1
  1017  00001E                     i2printf@width:
  1018                           	opt stack 0
  1019                           
  1020                           ; 2 bytes @ 0x1D
  1021  00001E                     	ds	2
  1022  000020                     i2printf@c:
  1023                           	opt stack 0
  1024                           
  1025                           ; 1 bytes @ 0x1F
  1026  000020                     	ds	1
  1027  000021                     switchMenu@right:
  1028                           	opt stack 0
  1029                           
  1030                           ; 1 bytes @ 0x20
  1031  000021                     	ds	1
  1032  000022                     switchMenu@key:
  1033                           	opt stack 0
  1034                           
  1035                           ; 1 bytes @ 0x21
  1036  000022                     	ds	1
  1037  000023                     switchMenu@left:
  1038                           	opt stack 0
  1039                           
  1040                           ; 1 bytes @ 0x22
  1041  000023                     	ds	1
  1042  000024                     ??_ISR:
  1043                           
  1044                           ; 1 bytes @ 0x23
  1045  000024                     	ds	15
  1046  000033                     ISR@keypress:
  1047                           	opt stack 0
  1048                           
  1049                           ; 1 bytes @ 0x32
  1050  000033                     	ds	1
  1051  000034                     ??_isdigit:
  1052  000034                     ??_I2C_Master_Wait:
  1053  000034                     ?___wmul:
  1054                           	opt stack 0
  1055  000034                     ?___awdiv:
  1056                           	opt stack 0
  1057  000034                     ?___awmod:
  1058                           	opt stack 0
  1059  000034                     ?___lwdiv:
  1060                           	opt stack 0
  1061  000034                     ?___lldiv:
  1062                           	opt stack 0
  1063  000034                     lcdNibble@temp:
  1064                           	opt stack 0
  1065  000034                     readADC@channel:
  1066                           	opt stack 0
  1067  000034                     wait_3ms@x:
  1068                           	opt stack 0
  1069  000034                     ___wmul@multiplier:
  1070                           	opt stack 0
  1071  000034                     ___awdiv@dividend:
  1072                           	opt stack 0
  1073  000034                     ___awmod@dividend:
  1074                           	opt stack 0
  1075  000034                     ___lwdiv@dividend:
  1076                           	opt stack 0
  1077  000034                     ___lldiv@dividend:
  1078                           	opt stack 0
  1079                           
  1080                           ; 4 bytes @ 0x33
  1081  000034                     	ds	1
  1082  000035                     I2C_Master_Read@a:
  1083                           	opt stack 0
  1084  000035                     lcdNibble@data:
  1085                           	opt stack 0
  1086  000035                     _isdigit$936:
  1087                           	opt stack 0
  1088  000035                     I2C_Master_Write@d:
  1089                           	opt stack 0
  1090                           
  1091                           ; 2 bytes @ 0x34
  1092  000035                     	ds	1
  1093  000036                     I2C_Master_Read@temp:
  1094                           	opt stack 0
  1095  000036                     lcdInst@data:
  1096                           	opt stack 0
  1097  000036                     putch@data:
  1098                           	opt stack 0
  1099  000036                     isdigit@c:
  1100                           	opt stack 0
  1101  000036                     ___wmul@multiplicand:
  1102                           	opt stack 0
  1103  000036                     ___awdiv@divisor:
  1104                           	opt stack 0
  1105  000036                     ___awmod@divisor:
  1106                           	opt stack 0
  1107  000036                     ___lwdiv@divisor:
  1108                           	opt stack 0
  1109                           
  1110                           ; 2 bytes @ 0x35
  1111  000036                     	ds	1
  1112  000037                     ??_initLCD:
  1113                           
  1114                           ; 1 bytes @ 0x36
  1115  000037                     	ds	1
  1116  000038                     ___awdiv@counter:
  1117                           	opt stack 0
  1118  000038                     ___awmod@counter:
  1119                           	opt stack 0
  1120  000038                     ___wmul@product:
  1121                           	opt stack 0
  1122  000038                     ___lwdiv@quotient:
  1123                           	opt stack 0
  1124  000038                     ___lldiv@divisor:
  1125                           	opt stack 0
  1126                           
  1127                           ; 4 bytes @ 0x37
  1128  000038                     	ds	1
  1129  000039                     ___awdiv@sign:
  1130                           	opt stack 0
  1131  000039                     ___awmod@sign:
  1132                           	opt stack 0
  1133                           
  1134                           ; 1 bytes @ 0x38
  1135  000039                     	ds	1
  1136  00003A                     ___lwdiv@counter:
  1137                           	opt stack 0
  1138  00003A                     ___awdiv@quotient:
  1139                           	opt stack 0
  1140                           
  1141                           ; 2 bytes @ 0x39
  1142  00003A                     	ds	1
  1143  00003B                     ?___lwmod:
  1144                           	opt stack 0
  1145  00003B                     ___lwmod@dividend:
  1146                           	opt stack 0
  1147                           
  1148                           ; 2 bytes @ 0x3A
  1149  00003B                     	ds	1
  1150  00003C                     I2C_Master_Init@c:
  1151                           	opt stack 0
  1152                           
  1153                           ; 4 bytes @ 0x3B
  1154  00003C                     	ds	1
  1155  00003D                     ___lwmod@divisor:
  1156                           	opt stack 0
  1157                           
  1158                           ; 2 bytes @ 0x3C
  1159  00003D                     	ds	2
  1160  00003F                     ___lwmod@counter:
  1161                           	opt stack 0
  1162                           
  1163                           ; 1 bytes @ 0x3E
  1164  00003F                     	ds	1
  1165                           tblptru	equ	0xFF8
  1166                           tblptrh	equ	0xFF7
  1167                           tblptrl	equ	0xFF6
  1168                           tablat	equ	0xFF5
  1169                           postinc0	equ	0xFEE
  1170                           wreg	equ	0xFE8
  1171                           
  1172 ;;
  1173 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  1174 ;;
  1175 ;; *************** function _main *****************
  1176 ;; Defined at:
  1177 ;;		line 53 in file "../main.c"
  1178 ;; Parameters:    Size  Location     Type
  1179 ;;		None
  1180 ;; Auto vars:     Size  Location     Type
  1181 ;;  i               2   34[BANK0 ] unsigned int 
  1182 ;;  i               2   32[BANK0 ] unsigned int 
  1183 ;;  i               2   30[BANK0 ] unsigned int 
  1184 ;;  i               2   28[BANK0 ] unsigned int 
  1185 ;;  i               2   26[BANK0 ] unsigned int 
  1186 ;;  i               1   38[BANK0 ] unsigned char 
  1187 ;;  i               1   37[BANK0 ] unsigned char 
  1188 ;;  i               1   36[BANK0 ] unsigned char 
  1189 ;; Return value:  Size  Location     Type
  1190 ;;                  1    wreg      void 
  1191 ;; Registers used:
  1192 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1193 ;; Tracked objects:
  1194 ;;		On entry : 0/0
  1195 ;;		On exit  : 0/0
  1196 ;;		Unchanged: 0/0
  1197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1198 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1199 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1200 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1201 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1202 ;;Total ram usage:       17 bytes
  1203 ;; Hardware stack levels required when called:    8
  1204 ;; This function calls:
  1205 ;;		_I2C_Master_Init
  1206 ;;		_I2C_Master_Read
  1207 ;;		_I2C_Master_Start
  1208 ;;		_I2C_Master_Stop
  1209 ;;		_I2C_Master_Write
  1210 ;;		_initLCD
  1211 ;;		_lcdInst
  1212 ;;		_printf
  1213 ;;		_readADC
  1214 ;;		_stopOperation
  1215 ;;		_testBatteries
  1216 ;;		_wait_3ms
  1217 ;; This function is called by:
  1218 ;;		Startup code after reset
  1219 ;; This function uses a non-reentrant model
  1220 ;;
  1221                           
  1222                           	psect	text0
  1223  000012                     __ptext0:
  1224                           	opt stack 0
  1225  000012                     _main:
  1226                           	opt stack 23
  1227                           
  1228                           ;main.c: 55: TRISA = 0b00000011;
  1229                           
  1230                           ;incstack = 0
  1231  000012  0E03               	movlw	3
  1232  000014  6E92               	movwf	3986,c	;volatile
  1233                           
  1234                           ;main.c: 56: TRISB = 0b11110010;
  1235  000016  0EF2               	movlw	242
  1236  000018  6E93               	movwf	3987,c	;volatile
  1237                           
  1238                           ;main.c: 57: TRISC = 0x00;
  1239  00001A  0E00               	movlw	0
  1240  00001C  6E94               	movwf	3988,c	;volatile
  1241                           
  1242                           ;main.c: 58: TRISD = 0x00;
  1243  00001E  0E00               	movlw	0
  1244  000020  6E95               	movwf	3989,c	;volatile
  1245                           
  1246                           ;main.c: 59: TRISE = 0x00;
  1247  000022  0E00               	movlw	0
  1248  000024  6E96               	movwf	3990,c	;volatile
  1249                           
  1250                           ;main.c: 61: LATA = 0x00;
  1251  000026  0E00               	movlw	0
  1252  000028  6E89               	movwf	3977,c	;volatile
  1253                           
  1254                           ;main.c: 62: LATB = 0x00;
  1255  00002A  0E00               	movlw	0
  1256  00002C  6E8A               	movwf	3978,c	;volatile
  1257                           
  1258                           ;main.c: 63: LATC = 0x00;
  1259  00002E  0E00               	movlw	0
  1260  000030  6E8B               	movwf	3979,c	;volatile
  1261                           
  1262                           ;main.c: 64: LATD = 0x00;
  1263  000032  0E00               	movlw	0
  1264  000034  6E8C               	movwf	3980,c	;volatile
  1265                           
  1266                           ;main.c: 65: LATE = 0x00;
  1267  000036  0E00               	movlw	0
  1268  000038  6E8D               	movwf	3981,c	;volatile
  1269                           
  1270                           ;main.c: 67: ADCON0 = 0x00;
  1271  00003A  0E00               	movlw	0
  1272  00003C  6EC2               	movwf	4034,c	;volatile
  1273                           
  1274                           ;main.c: 68: ADCON1 = 0x0E;
  1275  00003E  0E0E               	movlw	14
  1276  000040  6EC1               	movwf	4033,c	;volatile
  1277                           
  1278                           ;main.c: 69: ADCON2 = 0b10110001;
  1279  000042  0EB1               	movlw	177
  1280  000044  6EC0               	movwf	4032,c	;volatile
  1281                           
  1282                           ;main.c: 74: GIE = 1;
  1283  000046  8EF2               	bsf	intcon,7,c	;volatile
  1284                           
  1285                           ;main.c: 75: PEIE = 1;
  1286  000048  8CF2               	bsf	intcon,6,c	;volatile
  1287                           
  1288                           ;main.c: 76: INT1IE = 1;
  1289  00004A  86F0               	bsf	intcon3,3,c	;volatile
  1290                           
  1291                           ;main.c: 77: INT1IF = 0;
  1292  00004C  90F0               	bcf	intcon3,0,c	;volatile
  1293                           
  1294                           ;main.c: 78: TMR0IE = 1;
  1295  00004E  8AF2               	bsf	intcon,5,c	;volatile
  1296                           
  1297                           ;main.c: 79: TMR0IF = 0;
  1298  000050  94F2               	bcf	intcon,2,c	;volatile
  1299                           
  1300                           ;main.c: 80: TMR1IE = 1;
  1301  000052  809D               	bsf	3997,0,c	;volatile
  1302                           
  1303                           ;main.c: 81: TMR1IF = 0;
  1304  000054  909E               	bcf	3998,0,c	;volatile
  1305                           
  1306                           ;main.c: 85: T0CON = 0b00000111;
  1307  000056  0E07               	movlw	7
  1308  000058  6ED5               	movwf	4053,c	;volatile
  1309                           
  1310                           ;main.c: 93: TMR0 = 55770;
  1311  00005A  0ED9               	movlw	217
  1312  00005C  6ED7               	movwf	4055,c	;volatile
  1313  00005E  0EDA               	movlw	218
  1314  000060  6ED6               	movwf	4054,c	;volatile
  1315                           
  1316                           ;main.c: 102: T1CON = 0b10000000;
  1317  000062  0E80               	movlw	128
  1318  000064  6ECD               	movwf	4045,c	;volatile
  1319                           
  1320                           ;main.c: 111: TMR1 = 58035;
  1321  000066  0EE2               	movlw	226
  1322  000068  6ECF               	movwf	4047,c	;volatile
  1323  00006A  0EB3               	movlw	179
  1324  00006C  6ECE               	movwf	4046,c	;volatile
  1325                           
  1326                           ;main.c: 120: initLCD();
  1327  00006E  EC16  F00E         	call	_initLCD	;wreg free
  1328                           
  1329                           ;main.c: 122: I2C_Master_Init(10000);
  1330  000072  0E10               	movlw	16
  1331  000074  6E3C               	movwf	I2C_Master_Init@c,c
  1332  000076  0E27               	movlw	39
  1333  000078  6E3D               	movwf	I2C_Master_Init@c+1,c
  1334  00007A  0E00               	movlw	0
  1335  00007C  6E3E               	movwf	I2C_Master_Init@c+2,c
  1336  00007E  0E00               	movlw	0
  1337  000080  6E3F               	movwf	I2C_Master_Init@c+3,c
  1338  000082  EC48  F00D         	call	_I2C_Master_Init	;wreg free
  1339                           
  1340                           ;main.c: 123: (INTCONbits.GIE = 1);
  1341  000086  8EF2               	bsf	intcon,7,c	;volatile
  1342                           
  1343                           ;main.c: 127: while (screenMode == 2){
  1344                           
  1345                           ;main.c: 126: while (1) {
  1346  000088  D056               	goto	l4436
  1347  00008A                     l4398:
  1348                           
  1349                           ;main.c: 128: lcdInst(0b10000000);;
  1350  00008A  0E80               	movlw	128
  1351  00008C  EC14  F00F         	call	_lcdInst
  1352                           
  1353                           ;main.c: 129: printf("START:   PRESS *");
  1354  000090  0EDC               	movlw	low STR_1
  1355  000092  0100               	movlb	0	; () banked
  1356  000094  6F80               	movwf	printf@f& (0+255),b
  1357  000096  0EFF               	movlw	high STR_1
  1358  000098  0100               	movlb	0	; () banked
  1359  00009A  6F81               	movwf	(printf@f+1)& (0+255),b
  1360  00009C  EC85  F006         	call	_printf	;wreg free
  1361                           
  1362                           ;main.c: 130: lcdInst(0b11000000);;
  1363  0000A0  0EC0               	movlw	192
  1364  0000A2  EC14  F00F         	call	_lcdInst
  1365                           
  1366                           ;main.c: 131: printf("<  VIEW  LOGS  >");
  1367  0000A6  0EED               	movlw	low STR_2
  1368  0000A8  0100               	movlb	0	; () banked
  1369  0000AA  6F80               	movwf	printf@f& (0+255),b
  1370  0000AC  0EFF               	movlw	high STR_2
  1371  0000AE  0100               	movlb	0	; () banked
  1372  0000B0  6F81               	movwf	(printf@f+1)& (0+255),b
  1373  0000B2  EC85  F006         	call	_printf	;wreg free
  1374                           
  1375                           ;main.c: 132: for(unsigned char i=0;i<50;i++){
  1376  0000B6  0E00               	movlw	0
  1377  0000B8  0100               	movlb	0	; () banked
  1378  0000BA  6FA4               	movwf	main@i& (0+255),b
  1379  0000BC                     l4406:
  1380                           
  1381                           ; BSR set to: 0
  1382  0000BC  0E31               	movlw	49
  1383  0000BE  0100               	movlb	0	; () banked
  1384  0000C0  65A4               	cpfsgt	main@i& (0+255),b
  1385  0000C2  D001               	goto	l4410
  1386  0000C4  D011               	goto	l4418
  1387  0000C6                     l4410:
  1388                           
  1389                           ; BSR set to: 0
  1390                           ;main.c: 133: if (screenMode != 2)
  1391  0000C6  0E02               	movlw	2
  1392  0000C8  0100               	movlb	0	; () banked
  1393  0000CA  19C7               	xorwf	_screenMode& (0+255),w,b
  1394  0000CC  A4D8               	btfss	status,2,c
  1395  0000CE  D00C               	goto	l4418
  1396                           
  1397                           ; BSR set to: 0
  1398                           ;main.c: 135: _delay((unsigned long)((10)*(10000000/4000.0)));
  1399                           
  1400                           ; BSR set to: 0
  1401                           
  1402                           ; BSR set to: 0
  1403                           ;main.c: 134: break;
  1404  0000D0  0E21               	movlw	33
  1405  0000D2  0100               	movlb	0	; () banked
  1406  0000D4  6F96               	movwf	??_main& (0+255),b
  1407  0000D6  0E76               	movlw	118
  1408  0000D8                     u5547:
  1409  0000D8  2EE8               	decfsz	wreg,f,c
  1410  0000DA  D7FE               	bra	u5547
  1411  0000DC  2F96               	decfsz	??_main& (0+255),f,b
  1412  0000DE  D7FC               	bra	u5547
  1413  0000E0  F000               	nop	
  1414  0000E2  0100               	movlb	0	; () banked
  1415  0000E4  2BA4               	incf	main@i& (0+255),f,b
  1416  0000E6  D7EA               	goto	l4406
  1417  0000E8                     l4418:
  1418                           
  1419                           ; BSR set to: 0
  1420                           ;main.c: 136: }
  1421                           ;main.c: 137: lcdInst(0b10000000);;
  1422  0000E8  0E80               	movlw	128
  1423  0000EA  EC14  F00F         	call	_lcdInst
  1424                           
  1425                           ;main.c: 138: lcdInst(0b11000000);;
  1426  0000EE  0EC0               	movlw	192
  1427  0000F0  EC14  F00F         	call	_lcdInst
  1428                           
  1429                           ;main.c: 139: printf(" < VIEW  LOGS > ");
  1430  0000F4  0ECB               	movlw	low STR_3
  1431  0000F6  0100               	movlb	0	; () banked
  1432  0000F8  6F80               	movwf	printf@f& (0+255),b
  1433  0000FA  0EFF               	movlw	high STR_3
  1434  0000FC  0100               	movlb	0	; () banked
  1435  0000FE  6F81               	movwf	(printf@f+1)& (0+255),b
  1436  000100  EC85  F006         	call	_printf	;wreg free
  1437                           
  1438                           ;main.c: 140: for(unsigned char i=0;i<50;i++){
  1439  000104  0E00               	movlw	0
  1440  000106  0100               	movlb	0	; () banked
  1441  000108  6FA5               	movwf	main@i_583& (0+255),b
  1442  00010A                     l4424:
  1443                           
  1444                           ; BSR set to: 0
  1445  00010A  0E31               	movlw	49
  1446  00010C  0100               	movlb	0	; () banked
  1447  00010E  65A5               	cpfsgt	main@i_583& (0+255),b
  1448  000110  D001               	goto	l4428
  1449  000112  D011               	goto	l4436
  1450  000114                     l4428:
  1451                           
  1452                           ; BSR set to: 0
  1453                           ;main.c: 142: if (screenMode != 2)
  1454  000114  0E02               	movlw	2
  1455  000116  0100               	movlb	0	; () banked
  1456  000118  19C7               	xorwf	_screenMode& (0+255),w,b
  1457  00011A  A4D8               	btfss	status,2,c
  1458  00011C  D00C               	goto	l4436
  1459                           
  1460                           ; BSR set to: 0
  1461                           ;main.c: 144: _delay((unsigned long)((10)*(10000000/4000.0)));
  1462                           
  1463                           ; BSR set to: 0
  1464                           
  1465                           ; BSR set to: 0
  1466                           ;main.c: 143: break;
  1467  00011E  0E21               	movlw	33
  1468  000120  0100               	movlb	0	; () banked
  1469  000122  6F96               	movwf	??_main& (0+255),b
  1470  000124  0E76               	movlw	118
  1471  000126                     u5557:
  1472  000126  2EE8               	decfsz	wreg,f,c
  1473  000128  D7FE               	bra	u5557
  1474  00012A  2F96               	decfsz	??_main& (0+255),f,b
  1475  00012C  D7FC               	bra	u5557
  1476  00012E  F000               	nop	
  1477  000130  0100               	movlb	0	; () banked
  1478  000132  2BA5               	incf	main@i_583& (0+255),f,b
  1479  000134  D7EA               	goto	l4424
  1480  000136                     l4436:
  1481  000136  0E02               	movlw	2
  1482  000138  0100               	movlb	0	; () banked
  1483  00013A  19C7               	xorwf	_screenMode& (0+255),w,b
  1484  00013C  A4D8               	btfss	status,2,c
  1485  00013E  D1F3               	goto	l4614
  1486  000140  D7A4               	goto	l4398
  1487  000142                     l4438:
  1488                           
  1489                           ; BSR set to: 0
  1490                           ;main.c: 157: if (startGear){
  1491  000142  0100               	movlb	0	; () banked
  1492  000144  51C1               	movf	_startGear& (0+255),w,b
  1493  000146  B4D8               	btfsc	status,2,c
  1494  000148  D0E1               	goto	l4518
  1495                           
  1496                           ; BSR set to: 0
  1497                           ;main.c: 158: wait_3ms(1333);
  1498  00014A  0E05               	movlw	5
  1499  00014C  6E35               	movwf	wait_3ms@x+1,c
  1500  00014E  0E35               	movlw	53
  1501  000150  6E34               	movwf	wait_3ms@x,c
  1502  000152  ECEE  F00E         	call	_wait_3ms	;wreg free
  1503                           
  1504                           ;main.c: 159: startGear = 0;
  1505  000156  0E00               	movlw	0
  1506  000158  0100               	movlb	0	; () banked
  1507  00015A  6FC1               	movwf	_startGear& (0+255),b
  1508                           
  1509                           ; BSR set to: 0
  1510                           ;main.c: 160: LATCbits.LC1= 0;;
  1511  00015C  928B               	bcf	3979,1,c	;volatile
  1512                           
  1513                           ; BSR set to: 0
  1514                           ;main.c: 161: for (unsigned int i = 0; i < 420; i++){
  1515  00015E  0E00               	movlw	0
  1516  000160  0100               	movlb	0	; () banked
  1517  000162  6F9B               	movwf	(main@i_592+1)& (0+255),b
  1518  000164  0E00               	movlw	0
  1519  000166  6F9A               	movwf	main@i_592& (0+255),b
  1520  000168                     l4448:
  1521                           
  1522                           ; BSR set to: 0
  1523  000168  0EA4               	movlw	164
  1524  00016A  0100               	movlb	0	; () banked
  1525  00016C  5D9A               	subwf	main@i_592& (0+255),w,b
  1526  00016E  0E01               	movlw	1
  1527  000170  0100               	movlb	0	; () banked
  1528  000172  599B               	subwfb	(main@i_592+1)& (0+255),w,b
  1529  000174  B0D8               	btfsc	status,0,c
  1530  000176  D01B               	goto	l248
  1531                           
  1532                           ; BSR set to: 0
  1533                           ;main.c: 162: LATCbits.LC2 = !LATCbits.LC2;;
  1534                           
  1535                           ; BSR set to: 0
  1536                           
  1537                           ; BSR set to: 0
  1538  000178  B48B               	btfsc	3979,2,c	;volatile
  1539  00017A  D004               	goto	u5110
  1540  00017C  0100               	movlb	0	; () banked
  1541  00017E  6B96               	clrf	??_main& (0+255),b
  1542  000180  2B96               	incf	??_main& (0+255),f,b
  1543  000182  D002               	goto	u5128
  1544  000184                     u5110:
  1545  000184  0100               	movlb	0	; () banked
  1546  000186  6B96               	clrf	??_main& (0+255),b
  1547  000188                     u5128:
  1548  000188  0100               	movlb	0	; () banked
  1549  00018A  4796               	rlncf	??_main& (0+255),f,b
  1550  00018C  4796               	rlncf	??_main& (0+255),f,b
  1551  00018E  508B               	movf	3979,w,c	;volatile
  1552  000190  0100               	movlb	0	; () banked
  1553  000192  1996               	xorwf	??_main& (0+255),w,b
  1554  000194  0BFB               	andlw	-5
  1555  000196  1996               	xorwf	??_main& (0+255),w,b
  1556  000198  6E8B               	movwf	3979,c	;volatile
  1557                           
  1558                           ; BSR set to: 0
  1559                           ;main.c: 163: wait_3ms(2);
  1560  00019A  0E00               	movlw	0
  1561  00019C  6E35               	movwf	wait_3ms@x+1,c
  1562  00019E  0E02               	movlw	2
  1563  0001A0  6E34               	movwf	wait_3ms@x,c
  1564  0001A2  ECEE  F00E         	call	_wait_3ms	;wreg free
  1565  0001A6  0100               	movlb	0	; () banked
  1566  0001A8  4B9A               	infsnz	main@i_592& (0+255),f,b
  1567  0001AA  2B9B               	incf	(main@i_592+1)& (0+255),f,b
  1568  0001AC  D7DD               	goto	l4448
  1569  0001AE                     l248:
  1570                           
  1571                           ; BSR set to: 0
  1572                           ;main.c: 164: }
  1573                           ;main.c: 165: LATCbits.LC1= 1;;
  1574  0001AE  828B               	bsf	3979,1,c	;volatile
  1575                           
  1576                           ; BSR set to: 0
  1577                           ;main.c: 166: for (unsigned int i = 0; i < 40; i++){
  1578  0001B0  0E00               	movlw	0
  1579  0001B2  0100               	movlb	0	; () banked
  1580  0001B4  6F9D               	movwf	(main@i_593+1)& (0+255),b
  1581  0001B6  0E00               	movlw	0
  1582  0001B8  6F9C               	movwf	main@i_593& (0+255),b
  1583                           
  1584                           ; BSR set to: 0
  1585  0001BA  0100               	movlb	0	; () banked
  1586  0001BC  519D               	movf	(main@i_593+1)& (0+255),w,b
  1587  0001BE  E123               	bnz	l250
  1588  0001C0  0E28               	movlw	40
  1589  0001C2  0100               	movlb	0	; () banked
  1590  0001C4  5D9C               	subwf	main@i_593& (0+255),w,b
  1591  0001C6  B0D8               	btfsc	status,0,c
  1592  0001C8  D01E               	goto	l250
  1593                           
  1594                           ; BSR set to: 0
  1595                           ;main.c: 167: LATCbits.LC2 = !LATCbits.LC2;;
  1596                           
  1597                           ; BSR set to: 0
  1598                           
  1599                           ; BSR set to: 0
  1600  0001CA  B48B               	btfsc	3979,2,c	;volatile
  1601  0001CC  D004               	goto	u5150
  1602  0001CE  0100               	movlb	0	; () banked
  1603  0001D0  6B96               	clrf	??_main& (0+255),b
  1604  0001D2  2B96               	incf	??_main& (0+255),f,b
  1605  0001D4  D002               	goto	u5168
  1606  0001D6                     u5150:
  1607  0001D6  0100               	movlb	0	; () banked
  1608  0001D8  6B96               	clrf	??_main& (0+255),b
  1609  0001DA                     u5168:
  1610  0001DA  0100               	movlb	0	; () banked
  1611  0001DC  4796               	rlncf	??_main& (0+255),f,b
  1612  0001DE  4796               	rlncf	??_main& (0+255),f,b
  1613  0001E0  508B               	movf	3979,w,c	;volatile
  1614  0001E2  0100               	movlb	0	; () banked
  1615  0001E4  1996               	xorwf	??_main& (0+255),w,b
  1616  0001E6  0BFB               	andlw	-5
  1617  0001E8  1996               	xorwf	??_main& (0+255),w,b
  1618  0001EA  6E8B               	movwf	3979,c	;volatile
  1619                           
  1620                           ; BSR set to: 0
  1621                           ;main.c: 168: wait_3ms(2);
  1622  0001EC  0E00               	movlw	0
  1623  0001EE  6E35               	movwf	wait_3ms@x+1,c
  1624  0001F0  0E02               	movlw	2
  1625  0001F2  6E34               	movwf	wait_3ms@x,c
  1626  0001F4  ECEE  F00E         	call	_wait_3ms	;wreg free
  1627  0001F8  0100               	movlb	0	; () banked
  1628  0001FA  4B9C               	infsnz	main@i_593& (0+255),f,b
  1629  0001FC  2B9D               	incf	(main@i_593+1)& (0+255),f,b
  1630                           
  1631                           ; BSR set to: 0
  1632  0001FE  0100               	movlb	0	; () banked
  1633  000200  519D               	movf	(main@i_593+1)& (0+255),w,b
  1634  000202  E101               	bnz	u5170
  1635  000204  D7DD               	goto	L1
  1636  000206                     u5170:
  1637  000206                     l250:
  1638                           
  1639                           ; BSR set to: 0
  1640                           ;main.c: 169: }
  1641                           ;main.c: 170: LATCbits.LC1= 0;;
  1642  000206  928B               	bcf	3979,1,c	;volatile
  1643                           
  1644                           ; BSR set to: 0
  1645                           ;main.c: 171: for (unsigned int i = 0; i < 40; i++){
  1646  000208  0E00               	movlw	0
  1647  00020A  0100               	movlb	0	; () banked
  1648  00020C  6F9F               	movwf	(main@i_594+1)& (0+255),b
  1649  00020E  0E00               	movlw	0
  1650  000210  6F9E               	movwf	main@i_594& (0+255),b
  1651                           
  1652                           ; BSR set to: 0
  1653  000212  0100               	movlb	0	; () banked
  1654  000214  519F               	movf	(main@i_594+1)& (0+255),w,b
  1655  000216  E123               	bnz	l252
  1656  000218  0E28               	movlw	40
  1657  00021A  0100               	movlb	0	; () banked
  1658  00021C  5D9E               	subwf	main@i_594& (0+255),w,b
  1659  00021E  B0D8               	btfsc	status,0,c
  1660  000220  D01E               	goto	l252
  1661                           
  1662                           ; BSR set to: 0
  1663                           ;main.c: 172: LATCbits.LC2 = !LATCbits.LC2;;
  1664                           
  1665                           ; BSR set to: 0
  1666                           
  1667                           ; BSR set to: 0
  1668  000222  B48B               	btfsc	3979,2,c	;volatile
  1669  000224  D004               	goto	u5190
  1670  000226  0100               	movlb	0	; () banked
  1671  000228  6B96               	clrf	??_main& (0+255),b
  1672  00022A  2B96               	incf	??_main& (0+255),f,b
  1673  00022C  D002               	goto	u5208
  1674  00022E                     u5190:
  1675  00022E  0100               	movlb	0	; () banked
  1676  000230  6B96               	clrf	??_main& (0+255),b
  1677  000232                     u5208:
  1678  000232  0100               	movlb	0	; () banked
  1679  000234  4796               	rlncf	??_main& (0+255),f,b
  1680  000236  4796               	rlncf	??_main& (0+255),f,b
  1681  000238  508B               	movf	3979,w,c	;volatile
  1682  00023A  0100               	movlb	0	; () banked
  1683  00023C  1996               	xorwf	??_main& (0+255),w,b
  1684  00023E  0BFB               	andlw	-5
  1685  000240  1996               	xorwf	??_main& (0+255),w,b
  1686  000242  6E8B               	movwf	3979,c	;volatile
  1687                           
  1688                           ; BSR set to: 0
  1689                           ;main.c: 173: wait_3ms(2);
  1690  000244  0E00               	movlw	0
  1691  000246  6E35               	movwf	wait_3ms@x+1,c
  1692  000248  0E02               	movlw	2
  1693  00024A  6E34               	movwf	wait_3ms@x,c
  1694  00024C  ECEE  F00E         	call	_wait_3ms	;wreg free
  1695  000250  0100               	movlb	0	; () banked
  1696  000252  4B9E               	infsnz	main@i_594& (0+255),f,b
  1697  000254  2B9F               	incf	(main@i_594+1)& (0+255),f,b
  1698                           
  1699                           ; BSR set to: 0
  1700  000256  0100               	movlb	0	; () banked
  1701  000258  519F               	movf	(main@i_594+1)& (0+255),w,b
  1702  00025A  E101               	bnz	u5210
  1703  00025C  D7DD               	goto	L2
  1704  00025E                     u5210:
  1705  00025E                     l252:
  1706                           
  1707                           ; BSR set to: 0
  1708                           ;main.c: 174: }
  1709                           ;main.c: 175: LATCbits.LC1= 1;;
  1710  00025E  828B               	bsf	3979,1,c	;volatile
  1711                           
  1712                           ; BSR set to: 0
  1713                           ;main.c: 176: for (unsigned int i = 0; i < 40; i++){
  1714  000260  0E00               	movlw	0
  1715  000262  0100               	movlb	0	; () banked
  1716  000264  6FA1               	movwf	(main@i_595+1)& (0+255),b
  1717  000266  0E00               	movlw	0
  1718  000268  6FA0               	movwf	main@i_595& (0+255),b
  1719                           
  1720                           ; BSR set to: 0
  1721  00026A  0100               	movlb	0	; () banked
  1722  00026C  51A1               	movf	(main@i_595+1)& (0+255),w,b
  1723  00026E  E123               	bnz	l254
  1724  000270  0E28               	movlw	40
  1725  000272  0100               	movlb	0	; () banked
  1726  000274  5DA0               	subwf	main@i_595& (0+255),w,b
  1727  000276  B0D8               	btfsc	status,0,c
  1728  000278  D01E               	goto	l254
  1729                           
  1730                           ; BSR set to: 0
  1731                           ;main.c: 177: LATCbits.LC2 = !LATCbits.LC2;;
  1732                           
  1733                           ; BSR set to: 0
  1734                           
  1735                           ; BSR set to: 0
  1736  00027A  B48B               	btfsc	3979,2,c	;volatile
  1737  00027C  D004               	goto	u5230
  1738  00027E  0100               	movlb	0	; () banked
  1739  000280  6B96               	clrf	??_main& (0+255),b
  1740  000282  2B96               	incf	??_main& (0+255),f,b
  1741  000284  D002               	goto	u5248
  1742  000286                     u5230:
  1743  000286  0100               	movlb	0	; () banked
  1744  000288  6B96               	clrf	??_main& (0+255),b
  1745  00028A                     u5248:
  1746  00028A  0100               	movlb	0	; () banked
  1747  00028C  4796               	rlncf	??_main& (0+255),f,b
  1748  00028E  4796               	rlncf	??_main& (0+255),f,b
  1749  000290  508B               	movf	3979,w,c	;volatile
  1750  000292  0100               	movlb	0	; () banked
  1751  000294  1996               	xorwf	??_main& (0+255),w,b
  1752  000296  0BFB               	andlw	-5
  1753  000298  1996               	xorwf	??_main& (0+255),w,b
  1754  00029A  6E8B               	movwf	3979,c	;volatile
  1755                           
  1756                           ; BSR set to: 0
  1757                           ;main.c: 178: wait_3ms(2);
  1758  00029C  0E00               	movlw	0
  1759  00029E  6E35               	movwf	wait_3ms@x+1,c
  1760  0002A0  0E02               	movlw	2
  1761  0002A2  6E34               	movwf	wait_3ms@x,c
  1762  0002A4  ECEE  F00E         	call	_wait_3ms	;wreg free
  1763  0002A8  0100               	movlb	0	; () banked
  1764  0002AA  4BA0               	infsnz	main@i_595& (0+255),f,b
  1765  0002AC  2BA1               	incf	(main@i_595+1)& (0+255),f,b
  1766                           
  1767                           ; BSR set to: 0
  1768  0002AE  0100               	movlb	0	; () banked
  1769  0002B0  51A1               	movf	(main@i_595+1)& (0+255),w,b
  1770  0002B2  E101               	bnz	u5250
  1771  0002B4  D7DD               	goto	L3
  1772  0002B6                     u5250:
  1773  0002B6                     l254:
  1774                           
  1775                           ; BSR set to: 0
  1776                           ;main.c: 179: }
  1777                           ;main.c: 180: LATCbits.LC1= 0;;
  1778  0002B6  928B               	bcf	3979,1,c	;volatile
  1779                           
  1780                           ; BSR set to: 0
  1781                           ;main.c: 181: for (unsigned int i = 0; i < 20; i++){
  1782  0002B8  0E00               	movlw	0
  1783  0002BA  0100               	movlb	0	; () banked
  1784  0002BC  6FA3               	movwf	(main@i_596+1)& (0+255),b
  1785  0002BE  0E00               	movlw	0
  1786  0002C0  6FA2               	movwf	main@i_596& (0+255),b
  1787  0002C2                     l4504:
  1788                           
  1789                           ; BSR set to: 0
  1790  0002C2  0100               	movlb	0	; () banked
  1791  0002C4  51A3               	movf	(main@i_596+1)& (0+255),w,b
  1792  0002C6  E120               	bnz	l4516
  1793  0002C8  0E14               	movlw	20
  1794  0002CA  0100               	movlb	0	; () banked
  1795  0002CC  5DA2               	subwf	main@i_596& (0+255),w,b
  1796  0002CE  B0D8               	btfsc	status,0,c
  1797  0002D0  D01B               	goto	l4516
  1798                           
  1799                           ; BSR set to: 0
  1800                           ;main.c: 182: LATCbits.LC2 = !LATCbits.LC2;;
  1801                           
  1802                           ; BSR set to: 0
  1803                           
  1804                           ; BSR set to: 0
  1805  0002D2  B48B               	btfsc	3979,2,c	;volatile
  1806  0002D4  D004               	goto	u5270
  1807  0002D6  0100               	movlb	0	; () banked
  1808  0002D8  6B96               	clrf	??_main& (0+255),b
  1809  0002DA  2B96               	incf	??_main& (0+255),f,b
  1810  0002DC  D002               	goto	u5288
  1811  0002DE                     u5270:
  1812  0002DE  0100               	movlb	0	; () banked
  1813  0002E0  6B96               	clrf	??_main& (0+255),b
  1814  0002E2                     u5288:
  1815  0002E2  0100               	movlb	0	; () banked
  1816  0002E4  4796               	rlncf	??_main& (0+255),f,b
  1817  0002E6  4796               	rlncf	??_main& (0+255),f,b
  1818  0002E8  508B               	movf	3979,w,c	;volatile
  1819  0002EA  0100               	movlb	0	; () banked
  1820  0002EC  1996               	xorwf	??_main& (0+255),w,b
  1821  0002EE  0BFB               	andlw	-5
  1822  0002F0  1996               	xorwf	??_main& (0+255),w,b
  1823  0002F2  6E8B               	movwf	3979,c	;volatile
  1824                           
  1825                           ; BSR set to: 0
  1826                           ;main.c: 183: wait_3ms(2);
  1827  0002F4  0E00               	movlw	0
  1828  0002F6  6E35               	movwf	wait_3ms@x+1,c
  1829  0002F8  0E02               	movlw	2
  1830  0002FA  6E34               	movwf	wait_3ms@x,c
  1831  0002FC  ECEE  F00E         	call	_wait_3ms	;wreg free
  1832  000300  0100               	movlb	0	; () banked
  1833  000302  4BA2               	infsnz	main@i_596& (0+255),f,b
  1834  000304  2BA3               	incf	(main@i_596+1)& (0+255),f,b
  1835  000306  D7DD               	goto	l4504
  1836  000308                     l4516:
  1837                           
  1838                           ; BSR set to: 0
  1839                           ;main.c: 184: }
  1840                           ;main.c: 185: doneTimer = 0;
  1841  000308  0E00               	movlw	0
  1842  00030A  6E46               	movwf	_doneTimer,c
  1843  00030C                     l4518:
  1844                           
  1845                           ; BSR set to: 0
  1846                           ;main.c: 186: }
  1847                           ;main.c: 187: readADC(0);
  1848  00030C  0E00               	movlw	0
  1849  00030E  ECFB  F00E         	call	_readADC
  1850                           
  1851                           ;main.c: 190: if (ADRES<50){
  1852  000312  50C4               	movf	4036,w,c	;volatile
  1853  000314  E103               	bnz	u5301
  1854  000316  0E32               	movlw	50
  1855  000318  5CC3               	subwf	4035,w,c	;volatile
  1856  00031A  B0D8               	btfsc	status,0,c
  1857  00031C                     u5301:
  1858  00031C  D0F6               	goto	l4612
  1859                           
  1860                           ;main.c: 191: sorting = 1;
  1861  00031E  0E01               	movlw	1
  1862  000320  6E48               	movwf	_sorting,c
  1863                           
  1864                           ;main.c: 192: LATCbits.LC7 = 1;;
  1865  000322  8E8B               	bsf	3979,7,c	;volatile
  1866                           
  1867                           ;main.c: 193: wait_3ms(30);
  1868  000324  0E00               	movlw	0
  1869  000326  6E35               	movwf	wait_3ms@x+1,c
  1870  000328  0E1E               	movlw	30
  1871  00032A  6E34               	movwf	wait_3ms@x,c
  1872  00032C  ECEE  F00E         	call	_wait_3ms	;wreg free
  1873                           
  1874                           ;main.c: 194: testBatteries();
  1875  000330  ECE1  F009         	call	_testBatteries	;wreg free
  1876                           
  1877                           ;main.c: 195: LATCbits.LC7 = 0;;
  1878  000334  9E8B               	bcf	3979,7,c	;volatile
  1879                           
  1880                           ;main.c: 196: if (plat1Left){
  1881  000336  0100               	movlb	0	; () banked
  1882  000338  51AE               	movf	_plat1Left& (0+255),w,b
  1883  00033A  0100               	movlb	0	; () banked
  1884  00033C  11AF               	iorwf	(_plat1Left+1)& (0+255),w,b
  1885  00033E  B4D8               	btfsc	status,2,c
  1886  000340  D005               	goto	l4536
  1887                           
  1888                           ; BSR set to: 0
  1889                           ;main.c: 197: step1 = 1;
  1890  000342  0E01               	movlw	1
  1891  000344  6E49               	movwf	_step1,c
  1892                           
  1893                           ;main.c: 198: turn1BackRight = 1;
  1894  000346  0E01               	movlw	1
  1895  000348  0100               	movlb	0	; () banked
  1896  00034A  6FC4               	movwf	_turn1BackRight& (0+255),b
  1897  00034C                     l4536:
  1898                           
  1899                           ; BSR set to: 0
  1900                           ;main.c: 199: }
  1901                           ;main.c: 200: if (plat1Right){
  1902  00034C  0100               	movlb	0	; () banked
  1903  00034E  51B0               	movf	_plat1Right& (0+255),w,b
  1904  000350  0100               	movlb	0	; () banked
  1905  000352  11B1               	iorwf	(_plat1Right+1)& (0+255),w,b
  1906  000354  B4D8               	btfsc	status,2,c
  1907  000356  D005               	goto	l4540
  1908                           
  1909                           ; BSR set to: 0
  1910                           ;main.c: 201: step1 = 4;
  1911  000358  0E04               	movlw	4
  1912  00035A  6E49               	movwf	_step1,c
  1913                           
  1914                           ;main.c: 202: turn1BackLeft = 1;
  1915  00035C  0E01               	movlw	1
  1916  00035E  0100               	movlb	0	; () banked
  1917  000360  6FC3               	movwf	_turn1BackLeft& (0+255),b
  1918  000362                     l4540:
  1919                           
  1920                           ; BSR set to: 0
  1921                           ;main.c: 203: }
  1922                           ;main.c: 204: if (plat2Left){
  1923  000362  0100               	movlb	0	; () banked
  1924  000364  51B2               	movf	_plat2Left& (0+255),w,b
  1925  000366  0100               	movlb	0	; () banked
  1926  000368  11B3               	iorwf	(_plat2Left+1)& (0+255),w,b
  1927  00036A  B4D8               	btfsc	status,2,c
  1928  00036C  D005               	goto	l4544
  1929                           
  1930                           ; BSR set to: 0
  1931                           ;main.c: 205: step2 = 1;
  1932  00036E  0E01               	movlw	1
  1933  000370  6E4A               	movwf	_step2,c
  1934                           
  1935                           ;main.c: 206: turn2BackRight = 1;
  1936  000372  0E01               	movlw	1
  1937  000374  0100               	movlb	0	; () banked
  1938  000376  6FC6               	movwf	_turn2BackRight& (0+255),b
  1939  000378                     l4544:
  1940                           
  1941                           ; BSR set to: 0
  1942                           ;main.c: 207: }
  1943                           ;main.c: 208: if (plat2Right){
  1944  000378  0100               	movlb	0	; () banked
  1945  00037A  51B4               	movf	_plat2Right& (0+255),w,b
  1946  00037C  0100               	movlb	0	; () banked
  1947  00037E  11B5               	iorwf	(_plat2Right+1)& (0+255),w,b
  1948  000380  B4D8               	btfsc	status,2,c
  1949  000382  D005               	goto	l4548
  1950                           
  1951                           ; BSR set to: 0
  1952                           ;main.c: 209: step2 = 4;
  1953  000384  0E04               	movlw	4
  1954  000386  6E4A               	movwf	_step2,c
  1955                           
  1956                           ;main.c: 210: turn2BackLeft = 1;
  1957  000388  0E01               	movlw	1
  1958  00038A  0100               	movlb	0	; () banked
  1959  00038C  6FC5               	movwf	_turn2BackLeft& (0+255),b
  1960  00038E                     l4548:
  1961                           
  1962                           ; BSR set to: 0
  1963                           ;main.c: 211: }
  1964                           ;main.c: 212: LATAbits.LA2 = 1;;
  1965  00038E  8489               	bsf	3977,2,c	;volatile
  1966                           
  1967                           ; BSR set to: 0
  1968                           ;main.c: 213: LATAbits.LA3 = 0;;
  1969  000390  9689               	bcf	3977,3,c	;volatile
  1970                           
  1971                           ; BSR set to: 0
  1972                           ;main.c: 214: LATBbits.LB0 = 1;;
  1973  000392  808A               	bsf	3978,0,c	;volatile
  1974                           
  1975                           ; BSR set to: 0
  1976                           ;main.c: 215: LATBbits.LB2 = 0;;
  1977  000394  948A               	bcf	3978,2,c	;volatile
  1978  000396                     l4556:
  1979                           
  1980                           ; BSR set to: 0
  1981  000396  0100               	movlb	0	; () banked
  1982  000398  51B2               	movf	_plat2Left& (0+255),w,b
  1983  00039A  0100               	movlb	0	; () banked
  1984  00039C  11AE               	iorwf	_plat1Left& (0+255),w,b
  1985  00039E  0100               	movlb	0	; () banked
  1986  0003A0  6F96               	movwf	??_main& (0+255),b
  1987  0003A2  0100               	movlb	0	; () banked
  1988  0003A4  51B3               	movf	(_plat2Left+1)& (0+255),w,b
  1989  0003A6  0100               	movlb	0	; () banked
  1990  0003A8  11AF               	iorwf	(_plat1Left+1)& (0+255),w,b
  1991  0003AA  0100               	movlb	0	; () banked
  1992  0003AC  6F97               	movwf	(??_main+1)& (0+255),b
  1993  0003AE  0100               	movlb	0	; () banked
  1994  0003B0  51B0               	movf	_plat1Right& (0+255),w,b
  1995  0003B2  0100               	movlb	0	; () banked
  1996  0003B4  1396               	iorwf	??_main& (0+255),f,b
  1997  0003B6  0100               	movlb	0	; () banked
  1998  0003B8  51B1               	movf	(_plat1Right+1)& (0+255),w,b
  1999  0003BA  0100               	movlb	0	; () banked
  2000  0003BC  1397               	iorwf	(??_main+1)& (0+255),f,b
  2001  0003BE  0100               	movlb	0	; () banked
  2002  0003C0  51B4               	movf	_plat2Right& (0+255),w,b
  2003  0003C2  0100               	movlb	0	; () banked
  2004  0003C4  1396               	iorwf	??_main& (0+255),f,b
  2005  0003C6  0100               	movlb	0	; () banked
  2006  0003C8  51B5               	movf	(_plat2Right+1)& (0+255),w,b
  2007  0003CA  0100               	movlb	0	; () banked
  2008  0003CC  1397               	iorwf	(??_main+1)& (0+255),f,b
  2009  0003CE  0100               	movlb	0	; () banked
  2010  0003D0  5196               	movf	??_main& (0+255),w,b
  2011  0003D2  0100               	movlb	0	; () banked
  2012  0003D4  1197               	iorwf	(??_main+1)& (0+255),w,b
  2013  0003D6  B4D8               	btfsc	status,2,c
  2014  0003D8  D004               	goto	l4560
  2015                           
  2016                           ; BSR set to: 0
  2017  0003DA  0100               	movlb	0	; () banked
  2018  0003DC  05C7               	decf	_screenMode& (0+255),w,b
  2019  0003DE  B4D8               	btfsc	status,2,c
  2020  0003E0  D7DA               	goto	l4556
  2021  0003E2                     l4560:
  2022                           
  2023                           ; BSR set to: 0
  2024                           ;main.c: 219: wait_3ms(333);
  2025  0003E2  0E01               	movlw	1
  2026  0003E4  6E35               	movwf	wait_3ms@x+1,c
  2027  0003E6  0E4D               	movlw	77
  2028  0003E8  6E34               	movwf	wait_3ms@x,c
  2029  0003EA  ECEE  F00E         	call	_wait_3ms	;wreg free
  2030                           
  2031                           ;main.c: 221: LATAbits.LA2 = 1;;
  2032  0003EE  8489               	bsf	3977,2,c	;volatile
  2033                           
  2034                           ;main.c: 222: LATAbits.LA3 = 0;;
  2035  0003F0  9689               	bcf	3977,3,c	;volatile
  2036                           
  2037                           ;main.c: 223: LATBbits.LB0 = 1;;
  2038  0003F2  808A               	bsf	3978,0,c	;volatile
  2039                           
  2040                           ;main.c: 224: LATBbits.LB2 = 0;;
  2041  0003F4  948A               	bcf	3978,2,c	;volatile
  2042                           
  2043                           ;main.c: 225: plat1Left = turn1BackLeft;
  2044  0003F6  C0C3  F0AE         	movff	_turn1BackLeft,_plat1Left
  2045  0003FA  0100               	movlb	0	; () banked
  2046  0003FC  6BAF               	clrf	(_plat1Left+1)& (0+255),b
  2047                           
  2048                           ; BSR set to: 0
  2049                           ;main.c: 226: plat1Right = turn1BackRight;
  2050  0003FE  C0C4  F0B0         	movff	_turn1BackRight,_plat1Right
  2051  000402  0100               	movlb	0	; () banked
  2052  000404  6BB1               	clrf	(_plat1Right+1)& (0+255),b
  2053                           
  2054                           ; BSR set to: 0
  2055                           ;main.c: 227: plat2Left = turn2BackLeft;
  2056  000406  C0C5  F0B2         	movff	_turn2BackLeft,_plat2Left
  2057  00040A  0100               	movlb	0	; () banked
  2058  00040C  6BB3               	clrf	(_plat2Left+1)& (0+255),b
  2059                           
  2060                           ; BSR set to: 0
  2061                           ;main.c: 228: plat2Right = turn2BackRight;
  2062  00040E  C0C6  F0B4         	movff	_turn2BackRight,_plat2Right
  2063  000412  0100               	movlb	0	; () banked
  2064  000414  6BB5               	clrf	(_plat2Right+1)& (0+255),b
  2065                           
  2066                           ; BSR set to: 0
  2067                           ;main.c: 229: stepGear = 1;
  2068  000416  0E01               	movlw	1
  2069  000418  0100               	movlb	0	; () banked
  2070  00041A  6FC2               	movwf	_stepGear& (0+255),b
  2071                           
  2072                           ; BSR set to: 0
  2073                           ;main.c: 230: LATCbits.LC1= 0;;
  2074  00041C  928B               	bcf	3979,1,c	;volatile
  2075  00041E                     l4582:
  2076                           
  2077                           ; BSR set to: 0
  2078  00041E  0100               	movlb	0	; () banked
  2079  000420  51B2               	movf	_plat2Left& (0+255),w,b
  2080  000422  0100               	movlb	0	; () banked
  2081  000424  11AE               	iorwf	_plat1Left& (0+255),w,b
  2082  000426  0100               	movlb	0	; () banked
  2083  000428  6F96               	movwf	??_main& (0+255),b
  2084  00042A  0100               	movlb	0	; () banked
  2085  00042C  51B3               	movf	(_plat2Left+1)& (0+255),w,b
  2086  00042E  0100               	movlb	0	; () banked
  2087  000430  11AF               	iorwf	(_plat1Left+1)& (0+255),w,b
  2088  000432  0100               	movlb	0	; () banked
  2089  000434  6F97               	movwf	(??_main+1)& (0+255),b
  2090  000436  0100               	movlb	0	; () banked
  2091  000438  51B0               	movf	_plat1Right& (0+255),w,b
  2092  00043A  0100               	movlb	0	; () banked
  2093  00043C  1396               	iorwf	??_main& (0+255),f,b
  2094  00043E  0100               	movlb	0	; () banked
  2095  000440  51B1               	movf	(_plat1Right+1)& (0+255),w,b
  2096  000442  0100               	movlb	0	; () banked
  2097  000444  1397               	iorwf	(??_main+1)& (0+255),f,b
  2098  000446  0100               	movlb	0	; () banked
  2099  000448  51B4               	movf	_plat2Right& (0+255),w,b
  2100  00044A  0100               	movlb	0	; () banked
  2101  00044C  1396               	iorwf	??_main& (0+255),f,b
  2102  00044E  0100               	movlb	0	; () banked
  2103  000450  51B5               	movf	(_plat2Right+1)& (0+255),w,b
  2104  000452  0100               	movlb	0	; () banked
  2105  000454  1397               	iorwf	(??_main+1)& (0+255),f,b
  2106  000456  0100               	movlb	0	; () banked
  2107  000458  51C2               	movf	_stepGear& (0+255),w,b
  2108  00045A  B4D8               	btfsc	status,2,c
  2109  00045C  D002               	goto	u5370
  2110  00045E  0E01               	movlw	1
  2111  000460  D001               	goto	u5380
  2112  000462                     u5370:
  2113  000462  0E00               	movlw	0
  2114  000464                     u5380:
  2115  000464  0100               	movlb	0	; () banked
  2116  000466  6F98               	movwf	(??_main+2)& (0+255),b
  2117  000468  6B99               	clrf	(??_main+3)& (0+255),b
  2118  00046A  0100               	movlb	0	; () banked
  2119  00046C  5196               	movf	??_main& (0+255),w,b
  2120  00046E  0100               	movlb	0	; () banked
  2121  000470  1398               	iorwf	(??_main+2)& (0+255),f,b
  2122  000472  0100               	movlb	0	; () banked
  2123  000474  5197               	movf	(??_main+1)& (0+255),w,b
  2124  000476  0100               	movlb	0	; () banked
  2125  000478  1399               	iorwf	(??_main+3)& (0+255),f,b
  2126  00047A  0100               	movlb	0	; () banked
  2127  00047C  5198               	movf	(??_main+2)& (0+255),w,b
  2128  00047E  0100               	movlb	0	; () banked
  2129  000480  1199               	iorwf	(??_main+3)& (0+255),w,b
  2130  000482  B4D8               	btfsc	status,2,c
  2131  000484  D004               	goto	l271
  2132                           
  2133                           ; BSR set to: 0
  2134  000486  0100               	movlb	0	; () banked
  2135  000488  05C7               	decf	_screenMode& (0+255),w,b
  2136  00048A  B4D8               	btfsc	status,2,c
  2137  00048C  D7C8               	goto	l4582
  2138  00048E                     l271:
  2139                           
  2140                           ; BSR set to: 0
  2141                           ;main.c: 234: LATCbits.LC2 = 0;;
  2142  00048E  948B               	bcf	3979,2,c	;volatile
  2143                           
  2144                           ;main.c: 235: LATCbits.LC1= 0;;
  2145  000490  928B               	bcf	3979,1,c	;volatile
  2146                           
  2147                           ; BSR set to: 0
  2148                           ;main.c: 236: turn1BackRight = 0;
  2149  000492  0E00               	movlw	0
  2150  000494  0100               	movlb	0	; () banked
  2151  000496  6FC4               	movwf	_turn1BackRight& (0+255),b
  2152                           
  2153                           ;main.c: 237: turn1BackLeft = 0;
  2154  000498  0E00               	movlw	0
  2155  00049A  0100               	movlb	0	; () banked
  2156  00049C  6FC3               	movwf	_turn1BackLeft& (0+255),b
  2157                           
  2158                           ;main.c: 238: turn2BackRight = 0;
  2159  00049E  0E00               	movlw	0
  2160  0004A0  0100               	movlb	0	; () banked
  2161  0004A2  6FC6               	movwf	_turn2BackRight& (0+255),b
  2162                           
  2163                           ;main.c: 239: turn2BackLeft = 0;
  2164  0004A4  0E00               	movlw	0
  2165  0004A6  0100               	movlb	0	; () banked
  2166  0004A8  6FC5               	movwf	_turn2BackLeft& (0+255),b
  2167                           
  2168                           ; BSR set to: 0
  2169                           ;main.c: 240: LATAbits.LA2 = 0;;
  2170  0004AA  9489               	bcf	3977,2,c	;volatile
  2171                           
  2172                           ; BSR set to: 0
  2173                           ;main.c: 241: LATAbits.LA3 = 0;;
  2174  0004AC  9689               	bcf	3977,3,c	;volatile
  2175                           
  2176                           ; BSR set to: 0
  2177                           ;main.c: 242: LATAbits.LA4 = 0;;
  2178  0004AE  9889               	bcf	3977,4,c	;volatile
  2179                           
  2180                           ; BSR set to: 0
  2181                           ;main.c: 243: LATAbits.LA5 = 0;;
  2182  0004B0  9A89               	bcf	3977,5,c	;volatile
  2183                           
  2184                           ; BSR set to: 0
  2185                           ;main.c: 244: LATBbits.LB0 = 0;;
  2186  0004B2  908A               	bcf	3978,0,c	;volatile
  2187                           
  2188                           ; BSR set to: 0
  2189                           ;main.c: 245: LATBbits.LB2 = 0;;
  2190  0004B4  948A               	bcf	3978,2,c	;volatile
  2191                           
  2192                           ; BSR set to: 0
  2193                           ;main.c: 246: LATCbits.LC6 = 0;;
  2194  0004B6  9C8B               	bcf	3979,6,c	;volatile
  2195                           
  2196                           ; BSR set to: 0
  2197                           ;main.c: 247: LATEbits.LE2 = 0;;
  2198  0004B8  948D               	bcf	3981,2,c	;volatile
  2199                           
  2200                           ; BSR set to: 0
  2201                           ;main.c: 248: if (((countC + countAA + count9V + countDrain) >= 15)){
  2202  0004BA  0100               	movlb	0	; () banked
  2203  0004BC  51B7               	movf	_countAA& (0+255),w,b
  2204  0004BE  C0B8  F096         	movff	_countC,??_main
  2205  0004C2  0100               	movlb	0	; () banked
  2206  0004C4  6B97               	clrf	(??_main+1)& (0+255),b
  2207  0004C6  0100               	movlb	0	; () banked
  2208  0004C8  2796               	addwf	??_main& (0+255),f,b
  2209  0004CA  0E00               	movlw	0
  2210  0004CC  2397               	addwfc	(??_main+1)& (0+255),f,b
  2211  0004CE  0100               	movlb	0	; () banked
  2212  0004D0  51B6               	movf	_count9V& (0+255),w,b
  2213  0004D2  0100               	movlb	0	; () banked
  2214  0004D4  2796               	addwf	??_main& (0+255),f,b
  2215  0004D6  0E00               	movlw	0
  2216  0004D8  2397               	addwfc	(??_main+1)& (0+255),f,b
  2217  0004DA  0100               	movlb	0	; () banked
  2218  0004DC  51B9               	movf	_countDrain& (0+255),w,b
  2219  0004DE  0100               	movlb	0	; () banked
  2220  0004E0  2796               	addwf	??_main& (0+255),f,b
  2221  0004E2  0E00               	movlw	0
  2222  0004E4  2397               	addwfc	(??_main+1)& (0+255),f,b
  2223  0004E6  0100               	movlb	0	; () banked
  2224  0004E8  BF97               	btfsc	(??_main+1)& (0+255),7,b
  2225  0004EA  D00D               	goto	l4610
  2226  0004EC  0100               	movlb	0	; () banked
  2227  0004EE  5197               	movf	(??_main+1)& (0+255),w,b
  2228  0004F0  E105               	bnz	u5410
  2229  0004F2  0E0F               	movlw	15
  2230  0004F4  0100               	movlb	0	; () banked
  2231  0004F6  5D96               	subwf	??_main& (0+255),w,b
  2232  0004F8  A0D8               	btfss	status,0,c
  2233  0004FA  D005               	goto	l4610
  2234  0004FC                     u5410:
  2235                           
  2236                           ; BSR set to: 0
  2237                           ;main.c: 249: screenMode = 0;
  2238  0004FC  0E00               	movlw	0
  2239  0004FE  0100               	movlb	0	; () banked
  2240  000500  6FC7               	movwf	_screenMode& (0+255),b
  2241                           
  2242                           ; BSR set to: 0
  2243                           ;main.c: 250: stopOperation();
  2244  000502  ECB6  F00A         	call	_stopOperation	;wreg free
  2245  000506                     l4610:
  2246                           
  2247                           ;main.c: 251: }
  2248                           ;main.c: 252: sorting = 0;
  2249  000506  0E00               	movlw	0
  2250  000508  6E48               	movwf	_sorting,c
  2251  00050A                     l4612:
  2252                           
  2253                           ;main.c: 253: }
  2254                           ;main.c: 254: _delay((unsigned long)((500)*(10000000/4000.0)));
  2255  00050A  0E07               	movlw	7
  2256  00050C  0100               	movlb	0	; () banked
  2257  00050E  6F97               	movwf	(??_main+1)& (0+255),b
  2258  000510  0E58               	movlw	88
  2259  000512  0100               	movlb	0	; () banked
  2260  000514  6F96               	movwf	??_main& (0+255),b
  2261  000516  0E59               	movlw	89
  2262  000518                     u5567:
  2263  000518  2EE8               	decfsz	wreg,f,c
  2264  00051A  D7FE               	bra	u5567
  2265  00051C  2F96               	decfsz	??_main& (0+255),f,b
  2266  00051E  D7FC               	bra	u5567
  2267  000520  2F97               	decfsz	(??_main+1)& (0+255),f,b
  2268  000522  D7FA               	bra	u5567
  2269  000524  D000               	nop2	
  2270  000526                     l4614:
  2271  000526  0100               	movlb	0	; () banked
  2272  000528  05C7               	decf	_screenMode& (0+255),w,b
  2273  00052A  A4D8               	btfss	status,2,c
  2274  00052C  D017               	goto	l4622
  2275  00052E  D609               	goto	l4438
  2276  000530                     l4616:
  2277                           
  2278                           ; BSR set to: 0
  2279                           ;main.c: 258: lcdInst(0b10000000);;
  2280  000530  0E80               	movlw	128
  2281  000532  EC14  F00F         	call	_lcdInst
  2282                           
  2283                           ;main.c: 259: printf("DONE! PRESS *   ");
  2284  000536  0E87               	movlw	low STR_4
  2285  000538  0100               	movlb	0	; () banked
  2286  00053A  6F80               	movwf	printf@f& (0+255),b
  2287  00053C  0EFF               	movlw	high STR_4
  2288  00053E  0100               	movlb	0	; () banked
  2289  000540  6F81               	movwf	(printf@f+1)& (0+255),b
  2290  000542  EC85  F006         	call	_printf	;wreg free
  2291                           
  2292                           ;main.c: 260: lcdInst(0b11000000);;
  2293  000546  0EC0               	movlw	192
  2294  000548  EC14  F00F         	call	_lcdInst
  2295                           
  2296                           ;main.c: 261: printf("TO CONTINUE     ");
  2297  00054C  0E65               	movlw	low STR_5
  2298  00054E  0100               	movlb	0	; () banked
  2299  000550  6F80               	movwf	printf@f& (0+255),b
  2300  000552  0EFF               	movlw	high STR_5
  2301  000554  0100               	movlb	0	; () banked
  2302  000556  6F81               	movwf	(printf@f+1)& (0+255),b
  2303  000558  EC85  F006         	call	_printf	;wreg free
  2304  00055C                     l4622:
  2305  00055C  0100               	movlb	0	; () banked
  2306  00055E  51C7               	movf	_screenMode& (0+255),w,b
  2307  000560  A4D8               	btfss	status,2,c
  2308  000562  D01F               	goto	l4630
  2309  000564  D7E5               	goto	l4616
  2310  000566                     l4624:
  2311                           
  2312                           ; BSR set to: 0
  2313                           ;main.c: 264: lcdInst(0b10000000);;
  2314  000566  0E80               	movlw	128
  2315  000568  EC14  F00F         	call	_lcdInst
  2316                           
  2317                           ;main.c: 265: printf("TOTAL RUN TIME: ");
  2318  00056C  0EBA               	movlw	low STR_6
  2319  00056E  0100               	movlb	0	; () banked
  2320  000570  6F80               	movwf	printf@f& (0+255),b
  2321  000572  0EFF               	movlw	high STR_6
  2322  000574  0100               	movlb	0	; () banked
  2323  000576  6F81               	movwf	(printf@f+1)& (0+255),b
  2324  000578  EC85  F006         	call	_printf	;wreg free
  2325                           
  2326                           ;main.c: 266: lcdInst(0b11000000);;
  2327  00057C  0EC0               	movlw	192
  2328  00057E  EC14  F00F         	call	_lcdInst
  2329                           
  2330                           ;main.c: 267: printf("%02d:%02d               ", min, sec);
  2331  000582  0E7A               	movlw	low STR_7
  2332  000584  0100               	movlb	0	; () banked
  2333  000586  6F80               	movwf	printf@f& (0+255),b
  2334  000588  0EFE               	movlw	high STR_7
  2335  00058A  0100               	movlb	0	; () banked
  2336  00058C  6F81               	movwf	(printf@f+1)& (0+255),b
  2337  00058E  C0BA  F082         	movff	_min,?_printf+2
  2338  000592  0100               	movlb	0	; () banked
  2339  000594  6B83               	clrf	(?_printf+3)& (0+255),b
  2340  000596  C0C0  F084         	movff	_sec,?_printf+4
  2341  00059A  0100               	movlb	0	; () banked
  2342  00059C  6B85               	clrf	(?_printf+5)& (0+255),b
  2343  00059E  EC85  F006         	call	_printf	;wreg free
  2344  0005A2                     l4630:
  2345  0005A2  0E03               	movlw	3
  2346  0005A4  0100               	movlb	0	; () banked
  2347  0005A6  19C7               	xorwf	_screenMode& (0+255),w,b
  2348  0005A8  A4D8               	btfss	status,2,c
  2349  0005AA  D01B               	goto	l4638
  2350  0005AC  D7DC               	goto	l4624
  2351  0005AE                     l4632:
  2352                           
  2353                           ; BSR set to: 0
  2354                           ;main.c: 270: lcdInst(0b10000000);;
  2355  0005AE  0E80               	movlw	128
  2356  0005B0  EC14  F00F         	call	_lcdInst
  2357                           
  2358                           ;main.c: 271: printf("TOTAL # OF      ");
  2359  0005B4  0E54               	movlw	low STR_8
  2360  0005B6  0100               	movlb	0	; () banked
  2361  0005B8  6F80               	movwf	printf@f& (0+255),b
  2362  0005BA  0EFF               	movlw	high STR_8
  2363  0005BC  0100               	movlb	0	; () banked
  2364  0005BE  6F81               	movwf	(printf@f+1)& (0+255),b
  2365  0005C0  EC85  F006         	call	_printf	;wreg free
  2366                           
  2367                           ;main.c: 272: lcdInst(0b11000000);;
  2368  0005C4  0EC0               	movlw	192
  2369  0005C6  EC14  F00F         	call	_lcdInst
  2370                           
  2371                           ;main.c: 273: printf("BATTERIES: %02d   ", numBats);
  2372  0005CA  0EEC               	movlw	low STR_9
  2373  0005CC  0100               	movlb	0	; () banked
  2374  0005CE  6F80               	movwf	printf@f& (0+255),b
  2375  0005D0  0EFE               	movlw	high STR_9
  2376  0005D2  0100               	movlb	0	; () banked
  2377  0005D4  6F81               	movwf	(printf@f+1)& (0+255),b
  2378  0005D6  C0BD  F082         	movff	_numBats,?_printf+2
  2379  0005DA  0100               	movlb	0	; () banked
  2380  0005DC  6B83               	clrf	(?_printf+3)& (0+255),b
  2381  0005DE  EC85  F006         	call	_printf	;wreg free
  2382  0005E2                     l4638:
  2383  0005E2  0E04               	movlw	4
  2384  0005E4  0100               	movlb	0	; () banked
  2385  0005E6  19C7               	xorwf	_screenMode& (0+255),w,b
  2386  0005E8  A4D8               	btfss	status,2,c
  2387  0005EA  D01B               	goto	l4646
  2388  0005EC  D7E0               	goto	l4632
  2389  0005EE                     l4640:
  2390                           
  2391                           ; BSR set to: 0
  2392                           ;main.c: 276: lcdInst(0b10000000);;
  2393  0005EE  0E80               	movlw	128
  2394  0005F0  EC14  F00F         	call	_lcdInst
  2395                           
  2396                           ;main.c: 277: printf("# OF C          ");
  2397  0005F4  0E21               	movlw	low STR_10
  2398  0005F6  0100               	movlb	0	; () banked
  2399  0005F8  6F80               	movwf	printf@f& (0+255),b
  2400  0005FA  0EFF               	movlw	high STR_10
  2401  0005FC  0100               	movlb	0	; () banked
  2402  0005FE  6F81               	movwf	(printf@f+1)& (0+255),b
  2403  000600  EC85  F006         	call	_printf	;wreg free
  2404                           
  2405                           ;main.c: 278: lcdInst(0b11000000);;
  2406  000604  0EC0               	movlw	192
  2407  000606  EC14  F00F         	call	_lcdInst
  2408                           
  2409                           ;main.c: 279: printf("BATTERIES: %02d   ", numC);
  2410  00060A  0EEC               	movlw	low STR_9
  2411  00060C  0100               	movlb	0	; () banked
  2412  00060E  6F80               	movwf	printf@f& (0+255),b
  2413  000610  0EFE               	movlw	high STR_9
  2414  000612  0100               	movlb	0	; () banked
  2415  000614  6F81               	movwf	(printf@f+1)& (0+255),b
  2416  000616  C0BE  F082         	movff	_numC,?_printf+2
  2417  00061A  0100               	movlb	0	; () banked
  2418  00061C  6B83               	clrf	(?_printf+3)& (0+255),b
  2419  00061E  EC85  F006         	call	_printf	;wreg free
  2420  000622                     l4646:
  2421  000622  0E05               	movlw	5
  2422  000624  0100               	movlb	0	; () banked
  2423  000626  19C7               	xorwf	_screenMode& (0+255),w,b
  2424  000628  A4D8               	btfss	status,2,c
  2425  00062A  D01B               	goto	l4654
  2426  00062C  D7E0               	goto	l4640
  2427  00062E                     l4648:
  2428                           
  2429                           ; BSR set to: 0
  2430                           ;main.c: 282: lcdInst(0b10000000);;
  2431  00062E  0E80               	movlw	128
  2432  000630  EC14  F00F         	call	_lcdInst
  2433                           
  2434                           ;main.c: 283: printf("# OF 9V         ");
  2435  000634  0E43               	movlw	low STR_12
  2436  000636  0100               	movlb	0	; () banked
  2437  000638  6F80               	movwf	printf@f& (0+255),b
  2438  00063A  0EFF               	movlw	high STR_12
  2439  00063C  0100               	movlb	0	; () banked
  2440  00063E  6F81               	movwf	(printf@f+1)& (0+255),b
  2441  000640  EC85  F006         	call	_printf	;wreg free
  2442                           
  2443                           ;main.c: 284: lcdInst(0b11000000);;
  2444  000644  0EC0               	movlw	192
  2445  000646  EC14  F00F         	call	_lcdInst
  2446                           
  2447                           ;main.c: 285: printf("BATTERIES: %02d     ", num9V);
  2448  00064A  0ED7               	movlw	low STR_13
  2449  00064C  0100               	movlb	0	; () banked
  2450  00064E  6F80               	movwf	printf@f& (0+255),b
  2451  000650  0EFE               	movlw	high STR_13
  2452  000652  0100               	movlb	0	; () banked
  2453  000654  6F81               	movwf	(printf@f+1)& (0+255),b
  2454  000656  C0BB  F082         	movff	_num9V,?_printf+2
  2455  00065A  0100               	movlb	0	; () banked
  2456  00065C  6B83               	clrf	(?_printf+3)& (0+255),b
  2457  00065E  EC85  F006         	call	_printf	;wreg free
  2458  000662                     l4654:
  2459  000662  0E06               	movlw	6
  2460  000664  0100               	movlb	0	; () banked
  2461  000666  19C7               	xorwf	_screenMode& (0+255),w,b
  2462  000668  A4D8               	btfss	status,2,c
  2463  00066A  D01B               	goto	l4662
  2464  00066C  D7E0               	goto	l4648
  2465  00066E                     l4656:
  2466                           
  2467                           ; BSR set to: 0
  2468                           ;main.c: 288: lcdInst(0b10000000);;
  2469  00066E  0E80               	movlw	128
  2470  000670  EC14  F00F         	call	_lcdInst
  2471                           
  2472                           ;main.c: 289: printf("# OF AA         ");
  2473  000674  0E32               	movlw	low STR_14
  2474  000676  0100               	movlb	0	; () banked
  2475  000678  6F80               	movwf	printf@f& (0+255),b
  2476  00067A  0EFF               	movlw	high STR_14
  2477  00067C  0100               	movlb	0	; () banked
  2478  00067E  6F81               	movwf	(printf@f+1)& (0+255),b
  2479  000680  EC85  F006         	call	_printf	;wreg free
  2480                           
  2481                           ;main.c: 290: lcdInst(0b11000000);;
  2482  000684  0EC0               	movlw	192
  2483  000686  EC14  F00F         	call	_lcdInst
  2484                           
  2485                           ;main.c: 291: printf("BATTERIES: %02d     ", numAA);
  2486  00068A  0ED7               	movlw	low STR_13
  2487  00068C  0100               	movlb	0	; () banked
  2488  00068E  6F80               	movwf	printf@f& (0+255),b
  2489  000690  0EFE               	movlw	high STR_13
  2490  000692  0100               	movlb	0	; () banked
  2491  000694  6F81               	movwf	(printf@f+1)& (0+255),b
  2492  000696  C0BC  F082         	movff	_numAA,?_printf+2
  2493  00069A  0100               	movlb	0	; () banked
  2494  00069C  6B83               	clrf	(?_printf+3)& (0+255),b
  2495  00069E  EC85  F006         	call	_printf	;wreg free
  2496  0006A2                     l4662:
  2497  0006A2  0E07               	movlw	7
  2498  0006A4  0100               	movlb	0	; () banked
  2499  0006A6  19C7               	xorwf	_screenMode& (0+255),w,b
  2500  0006A8  A4D8               	btfss	status,2,c
  2501  0006AA  D01B               	goto	l4670
  2502  0006AC  D7E0               	goto	l4656
  2503  0006AE                     l4664:
  2504                           
  2505                           ; BSR set to: 0
  2506                           ;main.c: 294: lcdInst(0b10000000);;
  2507  0006AE  0E80               	movlw	128
  2508  0006B0  EC14  F00F         	call	_lcdInst
  2509                           
  2510                           ;main.c: 295: printf("# OF DRAINED    ");
  2511  0006B4  0E76               	movlw	low STR_16
  2512  0006B6  0100               	movlb	0	; () banked
  2513  0006B8  6F80               	movwf	printf@f& (0+255),b
  2514  0006BA  0EFF               	movlw	high STR_16
  2515  0006BC  0100               	movlb	0	; () banked
  2516  0006BE  6F81               	movwf	(printf@f+1)& (0+255),b
  2517  0006C0  EC85  F006         	call	_printf	;wreg free
  2518                           
  2519                           ;main.c: 296: lcdInst(0b11000000);;
  2520  0006C4  0EC0               	movlw	192
  2521  0006C6  EC14  F00F         	call	_lcdInst
  2522                           
  2523                           ;main.c: 297: printf("BATTERIES: %02d     ", numDrain);
  2524  0006CA  0ED7               	movlw	low STR_13
  2525  0006CC  0100               	movlb	0	; () banked
  2526  0006CE  6F80               	movwf	printf@f& (0+255),b
  2527  0006D0  0EFE               	movlw	high STR_13
  2528  0006D2  0100               	movlb	0	; () banked
  2529  0006D4  6F81               	movwf	(printf@f+1)& (0+255),b
  2530  0006D6  C0BF  F082         	movff	_numDrain,?_printf+2
  2531  0006DA  0100               	movlb	0	; () banked
  2532  0006DC  6B83               	clrf	(?_printf+3)& (0+255),b
  2533  0006DE  EC85  F006         	call	_printf	;wreg free
  2534  0006E2                     l4670:
  2535  0006E2  0E08               	movlw	8
  2536  0006E4  0100               	movlb	0	; () banked
  2537  0006E6  19C7               	xorwf	_screenMode& (0+255),w,b
  2538  0006E8  A4D8               	btfss	status,2,c
  2539  0006EA  D066               	goto	l4692
  2540  0006EC  D7E0               	goto	l4664
  2541  0006EE                     l4672:
  2542                           
  2543                           ; BSR set to: 0
  2544                           ;main.c: 301: I2C_Master_Start();
  2545  0006EE  EC2F  F00F         	call	_I2C_Master_Start	;wreg free
  2546                           
  2547                           ;main.c: 302: I2C_Master_Write(0b11010000);
  2548  0006F2  0E00               	movlw	0
  2549  0006F4  6E36               	movwf	I2C_Master_Write@d+1,c
  2550  0006F6  0ED0               	movlw	208
  2551  0006F8  6E35               	movwf	I2C_Master_Write@d,c
  2552  0006FA  EC26  F00F         	call	_I2C_Master_Write	;wreg free
  2553                           
  2554                           ;main.c: 303: I2C_Master_Write(0x00);
  2555  0006FE  0E00               	movlw	0
  2556  000700  6E36               	movwf	I2C_Master_Write@d+1,c
  2557  000702  0E00               	movlw	0
  2558  000704  6E35               	movwf	I2C_Master_Write@d,c
  2559  000706  EC26  F00F         	call	_I2C_Master_Write	;wreg free
  2560                           
  2561                           ;main.c: 304: I2C_Master_Stop();
  2562  00070A  EC2B  F00F         	call	_I2C_Master_Stop	;wreg free
  2563                           
  2564                           ;main.c: 306: I2C_Master_Start();
  2565  00070E  EC2F  F00F         	call	_I2C_Master_Start	;wreg free
  2566                           
  2567                           ;main.c: 307: I2C_Master_Write(0b11010001);
  2568  000712  0E00               	movlw	0
  2569  000714  6E36               	movwf	I2C_Master_Write@d+1,c
  2570  000716  0ED1               	movlw	209
  2571  000718  6E35               	movwf	I2C_Master_Write@d,c
  2572  00071A  EC26  F00F         	call	_I2C_Master_Write	;wreg free
  2573                           
  2574                           ;main.c: 308: for(unsigned char i=0;i<0x06;i++){
  2575  00071E  0E00               	movlw	0
  2576  000720  0100               	movlb	0	; () banked
  2577  000722  6FA6               	movwf	main@i_633& (0+255),b
  2578  000724                     l4676:
  2579                           
  2580                           ; BSR set to: 0
  2581  000724  0E05               	movlw	5
  2582  000726  0100               	movlb	0	; () banked
  2583  000728  65A6               	cpfsgt	main@i_633& (0+255),b
  2584  00072A  D001               	goto	l4680
  2585  00072C  D010               	goto	l4686
  2586  00072E                     l4680:
  2587                           
  2588                           ; BSR set to: 0
  2589                           ;main.c: 309: time[i] = I2C_Master_Read(1);
  2590  00072E  0100               	movlb	0	; () banked
  2591  000730  51A6               	movf	main@i_633& (0+255),w,b
  2592  000732  0D01               	mullw	1
  2593  000734  0EA7               	movlw	low _time
  2594  000736  24F3               	addwf	prodl,w,c
  2595  000738  6ED9               	movwf	fsr2l,c
  2596  00073A  0E00               	movlw	high _time
  2597  00073C  20F4               	addwfc	prodh,w,c
  2598  00073E  6EDA               	movwf	fsr2h,c
  2599  000740  0E01               	movlw	1
  2600  000742  ECAA  F00E         	call	_I2C_Master_Read
  2601  000746  6EDF               	movwf	indf2,c
  2602  000748  0100               	movlb	0	; () banked
  2603  00074A  2BA6               	incf	main@i_633& (0+255),f,b
  2604  00074C  D7EB               	goto	l4676
  2605  00074E                     l4686:
  2606                           
  2607                           ; BSR set to: 0
  2608                           ;main.c: 310: }
  2609                           ;main.c: 311: time[6] = I2C_Master_Read(0);
  2610  00074E  0E00               	movlw	0
  2611  000750  ECAA  F00E         	call	_I2C_Master_Read
  2612  000754  0100               	movlb	0	; () banked
  2613  000756  6FAD               	movwf	(_time+6)& (0+255),b
  2614                           
  2615                           ;main.c: 312: I2C_Master_Stop();
  2616  000758  EC2B  F00F         	call	_I2C_Master_Stop	;wreg free
  2617                           
  2618                           ;main.c: 313: lcdInst(0b10000000);;
  2619  00075C  0E80               	movlw	128
  2620  00075E  EC14  F00F         	call	_lcdInst
  2621                           
  2622                           ;main.c: 314: printf("DATE: %02x/%02x/%02x  ", time[6],time[5],time[4]);
  2623  000762  0E93               	movlw	low STR_18
  2624  000764  0100               	movlb	0	; () banked
  2625  000766  6F80               	movwf	printf@f& (0+255),b
  2626  000768  0EFE               	movlw	high STR_18
  2627  00076A  0100               	movlb	0	; () banked
  2628  00076C  6F81               	movwf	(printf@f+1)& (0+255),b
  2629  00076E  C0AD  F082         	movff	_time+6,?_printf+2
  2630  000772  0100               	movlb	0	; () banked
  2631  000774  6B83               	clrf	(?_printf+3)& (0+255),b
  2632  000776  C0AC  F084         	movff	_time+5,?_printf+4
  2633  00077A  0100               	movlb	0	; () banked
  2634  00077C  6B85               	clrf	(?_printf+5)& (0+255),b
  2635  00077E  C0AB  F086         	movff	_time+4,?_printf+6
  2636  000782  0100               	movlb	0	; () banked
  2637  000784  6B87               	clrf	(?_printf+7)& (0+255),b
  2638  000786  EC85  F006         	call	_printf	;wreg free
  2639                           
  2640                           ;main.c: 315: lcdInst(0b11000000);;
  2641  00078A  0EC0               	movlw	192
  2642  00078C  EC14  F00F         	call	_lcdInst
  2643                           
  2644                           ;main.c: 316: printf("TIME: %02x:%02x:%02x  ", time[2],time[1],time[0]);
  2645  000790  0EAA               	movlw	low STR_19
  2646  000792  0100               	movlb	0	; () banked
  2647  000794  6F80               	movwf	printf@f& (0+255),b
  2648  000796  0EFE               	movlw	high STR_19
  2649  000798  0100               	movlb	0	; () banked
  2650  00079A  6F81               	movwf	(printf@f+1)& (0+255),b
  2651  00079C  C0A9  F082         	movff	_time+2,?_printf+2
  2652  0007A0  0100               	movlb	0	; () banked
  2653  0007A2  6B83               	clrf	(?_printf+3)& (0+255),b
  2654  0007A4  C0A8  F084         	movff	_time+1,?_printf+4
  2655  0007A8  0100               	movlb	0	; () banked
  2656  0007AA  6B85               	clrf	(?_printf+5)& (0+255),b
  2657  0007AC  C0A7  F086         	movff	_time,?_printf+6
  2658  0007B0  0100               	movlb	0	; () banked
  2659  0007B2  6B87               	clrf	(?_printf+7)& (0+255),b
  2660  0007B4  EC85  F006         	call	_printf	;wreg free
  2661  0007B8                     l4692:
  2662  0007B8  0E09               	movlw	9
  2663  0007BA  0100               	movlb	0	; () banked
  2664  0007BC  19C7               	xorwf	_screenMode& (0+255),w,b
  2665  0007BE  A4D8               	btfss	status,2,c
  2666  0007C0  D028               	goto	l4704
  2667  0007C2  D795               	goto	l4672
  2668  0007C4                     l4694:
  2669                           
  2670                           ; BSR set to: 0
  2671                           ;main.c: 319: lcdInst(0b10000000);;
  2672  0007C4  0E80               	movlw	128
  2673  0007C6  EC14  F00F         	call	_lcdInst
  2674                           
  2675                           ;main.c: 320: printf("EMERGENCY STOP  ");
  2676  0007CA  0EA9               	movlw	low STR_20
  2677  0007CC  0100               	movlb	0	; () banked
  2678  0007CE  6F80               	movwf	printf@f& (0+255),b
  2679  0007D0  0EFF               	movlw	high STR_20
  2680  0007D2  0100               	movlb	0	; () banked
  2681  0007D4  6F81               	movwf	(printf@f+1)& (0+255),b
  2682  0007D6  EC85  F006         	call	_printf	;wreg free
  2683                           
  2684                           ;main.c: 321: lcdInst(0b11000000);;
  2685  0007DA  0EC0               	movlw	192
  2686  0007DC  EC14  F00F         	call	_lcdInst
  2687                           
  2688                           ;main.c: 322: printf("                ");
  2689  0007E0  0E10               	movlw	low STR_21
  2690  0007E2  0100               	movlb	0	; () banked
  2691  0007E4  6F80               	movwf	printf@f& (0+255),b
  2692  0007E6  0EFF               	movlw	high STR_21
  2693  0007E8  0100               	movlb	0	; () banked
  2694  0007EA  6F81               	movwf	(printf@f+1)& (0+255),b
  2695  0007EC  EC85  F006         	call	_printf	;wreg free
  2696                           
  2697                           ;main.c: 323: _delay((unsigned long)((2000)*(10000000/4000.0)));
  2698  0007F0  0E1A               	movlw	26
  2699  0007F2  0100               	movlb	0	; () banked
  2700  0007F4  6F97               	movwf	(??_main+1)& (0+255),b
  2701  0007F6  0E5E               	movlw	94
  2702  0007F8  0100               	movlb	0	; () banked
  2703  0007FA  6F96               	movwf	??_main& (0+255),b
  2704  0007FC  0E6E               	movlw	110
  2705  0007FE                     u5577:
  2706  0007FE  2EE8               	decfsz	wreg,f,c
  2707  000800  D7FE               	bra	u5577
  2708  000802  2F96               	decfsz	??_main& (0+255),f,b
  2709  000804  D7FC               	bra	u5577
  2710  000806  2F97               	decfsz	(??_main+1)& (0+255),f,b
  2711  000808  D7FA               	bra	u5577
  2712  00080A  F000               	nop	
  2713                           
  2714                           ;main.c: 324: screenMode = 2;
  2715  00080C  0E02               	movlw	2
  2716  00080E  0100               	movlb	0	; () banked
  2717  000810  6FC7               	movwf	_screenMode& (0+255),b
  2718  000812                     l4704:
  2719                           
  2720                           ; BSR set to: 0
  2721  000812  0E0A               	movlw	10
  2722  000814  0100               	movlb	0	; () banked
  2723  000816  19C7               	xorwf	_screenMode& (0+255),w,b
  2724  000818  A4D8               	btfss	status,2,c
  2725  00081A  D48D               	goto	l4436
  2726  00081C  D7D3               	goto	l4694
  2727  00081E                     __end_of_main:
  2728                           	opt stack 0
  2729                           tblptru	equ	0xFF8
  2730                           tblptrh	equ	0xFF7
  2731                           tblptrl	equ	0xFF6
  2732                           tablat	equ	0xFF5
  2733                           prodh	equ	0xFF4
  2734                           prodl	equ	0xFF3
  2735                           intcon	equ	0xFF2
  2736                           intcon3	equ	0xFF0
  2737                           postinc0	equ	0xFEE
  2738                           wreg	equ	0xFE8
  2739                           indf2	equ	0xFDF
  2740                           fsr2h	equ	0xFDA
  2741                           fsr2l	equ	0xFD9
  2742                           status	equ	0xFD8
  2743                           
  2744 ;; *************** function _testBatteries *****************
  2745 ;; Defined at:
  2746 ;;		line 427 in file "../main.c"
  2747 ;; Parameters:    Size  Location     Type
  2748 ;;		None
  2749 ;; Auto vars:     Size  Location     Type
  2750 ;;		None
  2751 ;; Return value:  Size  Location     Type
  2752 ;;                  1    wreg      void 
  2753 ;; Registers used:
  2754 ;;		wreg, status,2, status,0, cstack
  2755 ;; Tracked objects:
  2756 ;;		On entry : 0/0
  2757 ;;		On exit  : 0/0
  2758 ;;		Unchanged: 0/0
  2759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2760 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2761 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2762 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2763 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2764 ;;Total ram usage:        0 bytes
  2765 ;; Hardware stack levels used:    1
  2766 ;; Hardware stack levels required when called:    6
  2767 ;; This function calls:
  2768 ;;		_wait_3ms
  2769 ;; This function is called by:
  2770 ;;		_main
  2771 ;; This function uses a non-reentrant model
  2772 ;;
  2773                           
  2774                           	psect	text1
  2775  0013C2                     __ptext1:
  2776                           	opt stack 0
  2777  0013C2                     _testBatteries:
  2778                           	opt stack 24
  2779                           
  2780                           ;main.c: 428: LATEbits.LE0 = 1;;
  2781                           
  2782                           ; BSR set to: 0
  2783                           ;incstack = 0
  2784  0013C2  808D               	bsf	3981,0,c	;volatile
  2785                           
  2786                           ;main.c: 430: wait_3ms(33);
  2787  0013C4  0E00               	movlw	0
  2788  0013C6  6E35               	movwf	wait_3ms@x+1,c
  2789  0013C8  0E21               	movlw	33
  2790  0013CA  6E34               	movwf	wait_3ms@x,c
  2791  0013CC  ECEE  F00E         	call	_wait_3ms	;wreg free
  2792                           
  2793                           ;main.c: 431: if (ADRES>=706){
  2794  0013D0  0EC2               	movlw	194
  2795  0013D2  5CC3               	subwf	4035,w,c	;volatile
  2796  0013D4  0E02               	movlw	2
  2797  0013D6  58C4               	subwfb	4036,w,c	;volatile
  2798  0013D8  A0D8               	btfss	status,0,c
  2799  0013DA  D00E               	goto	l3404
  2800                           
  2801                           ;main.c: 432: LATEbits.LE0 = 0;;
  2802  0013DC  908D               	bcf	3981,0,c	;volatile
  2803                           
  2804                           ;main.c: 433: count9V++;
  2805  0013DE  0100               	movlb	0	; () banked
  2806  0013E0  2BB6               	incf	_count9V& (0+255),f,b
  2807                           
  2808                           ; BSR set to: 0
  2809                           ;main.c: 434: plat1Right = 1;
  2810  0013E2  0E00               	movlw	0
  2811  0013E4  0100               	movlb	0	; () banked
  2812  0013E6  6FB1               	movwf	(_plat1Right+1)& (0+255),b
  2813  0013E8  0E01               	movlw	1
  2814  0013EA  6FB0               	movwf	_plat1Right& (0+255),b
  2815                           
  2816                           ; BSR set to: 0
  2817                           ;main.c: 435: plat2Left = 1;
  2818  0013EC  0E00               	movlw	0
  2819  0013EE  0100               	movlb	0	; () banked
  2820  0013F0  6FB3               	movwf	(_plat2Left+1)& (0+255),b
  2821  0013F2  0E01               	movlw	1
  2822  0013F4  6FB2               	movwf	_plat2Left& (0+255),b
  2823                           
  2824                           ; BSR set to: 0
  2825                           ;main.c: 436: return;
  2826  0013F6  0012               	return	
  2827  0013F8                     l3404:
  2828                           
  2829                           ;main.c: 438: else if (ADRES>=5){
  2830  0013F8  50C4               	movf	4036,w,c	;volatile
  2831  0013FA  E104               	bnz	u3360
  2832  0013FC  0E05               	movlw	5
  2833  0013FE  5CC3               	subwf	4035,w,c	;volatile
  2834  001400  A0D8               	btfss	status,0,c
  2835  001402  D00E               	goto	l338
  2836  001404                     u3360:
  2837                           
  2838                           ;main.c: 439: LATEbits.LE0 = 0;;
  2839  001404  908D               	bcf	3981,0,c	;volatile
  2840                           
  2841                           ;main.c: 440: countDrain++;
  2842  001406  0100               	movlb	0	; () banked
  2843  001408  2BB9               	incf	_countDrain& (0+255),f,b
  2844                           
  2845                           ; BSR set to: 0
  2846                           ;main.c: 441: plat1Left = 1;
  2847  00140A  0E00               	movlw	0
  2848  00140C  0100               	movlb	0	; () banked
  2849  00140E  6FAF               	movwf	(_plat1Left+1)& (0+255),b
  2850  001410  0E01               	movlw	1
  2851  001412  6FAE               	movwf	_plat1Left& (0+255),b
  2852                           
  2853                           ; BSR set to: 0
  2854                           ;main.c: 442: plat2Right = 1;
  2855  001414  0E00               	movlw	0
  2856  001416  0100               	movlb	0	; () banked
  2857  001418  6FB5               	movwf	(_plat2Right+1)& (0+255),b
  2858  00141A  0E01               	movlw	1
  2859  00141C  6FB4               	movwf	_plat2Right& (0+255),b
  2860                           
  2861                           ; BSR set to: 0
  2862                           ;main.c: 443: return;
  2863  00141E  0012               	return	
  2864  001420                     l338:
  2865                           
  2866                           ;main.c: 444: }
  2867                           ;main.c: 447: LATEbits.LE0 = 0;;
  2868  001420  908D               	bcf	3981,0,c	;volatile
  2869                           
  2870                           ;main.c: 448: LATEbits.LE1 = 1;;
  2871  001422  828D               	bsf	3981,1,c	;volatile
  2872                           
  2873                           ;main.c: 449: wait_3ms(33);
  2874  001424  0E00               	movlw	0
  2875  001426  6E35               	movwf	wait_3ms@x+1,c
  2876  001428  0E21               	movlw	33
  2877  00142A  6E34               	movwf	wait_3ms@x,c
  2878  00142C  ECEE  F00E         	call	_wait_3ms	;wreg free
  2879                           
  2880                           ;main.c: 451: if (ADRES>=706){
  2881  001430  0EC2               	movlw	194
  2882  001432  5CC3               	subwf	4035,w,c	;volatile
  2883  001434  0E02               	movlw	2
  2884  001436  58C4               	subwfb	4036,w,c	;volatile
  2885  001438  A0D8               	btfss	status,0,c
  2886  00143A  D00E               	goto	l3432
  2887                           
  2888                           ;main.c: 452: LATEbits.LE1 = 0;;
  2889  00143C  928D               	bcf	3981,1,c	;volatile
  2890                           
  2891                           ;main.c: 453: count9V++;
  2892  00143E  0100               	movlb	0	; () banked
  2893  001440  2BB6               	incf	_count9V& (0+255),f,b
  2894                           
  2895                           ; BSR set to: 0
  2896                           ;main.c: 454: plat1Right = 1;
  2897  001442  0E00               	movlw	0
  2898  001444  0100               	movlb	0	; () banked
  2899  001446  6FB1               	movwf	(_plat1Right+1)& (0+255),b
  2900  001448  0E01               	movlw	1
  2901  00144A  6FB0               	movwf	_plat1Right& (0+255),b
  2902                           
  2903                           ; BSR set to: 0
  2904                           ;main.c: 455: plat2Left = 1;
  2905  00144C  0E00               	movlw	0
  2906  00144E  0100               	movlb	0	; () banked
  2907  001450  6FB3               	movwf	(_plat2Left+1)& (0+255),b
  2908  001452  0E01               	movlw	1
  2909  001454  6FB2               	movwf	_plat2Left& (0+255),b
  2910                           
  2911                           ; BSR set to: 0
  2912                           ;main.c: 456: return;
  2913  001456  0012               	return	
  2914  001458                     l3432:
  2915                           
  2916                           ;main.c: 458: else if (ADRES>=5){
  2917  001458  50C4               	movf	4036,w,c	;volatile
  2918  00145A  E104               	bnz	u3380
  2919  00145C  0E05               	movlw	5
  2920  00145E  5CC3               	subwf	4035,w,c	;volatile
  2921  001460  A0D8               	btfss	status,0,c
  2922  001462  D00E               	goto	l341
  2923  001464                     u3380:
  2924                           
  2925                           ;main.c: 459: LATEbits.LE1 = 0;;
  2926  001464  928D               	bcf	3981,1,c	;volatile
  2927                           
  2928                           ;main.c: 460: countDrain++;
  2929  001466  0100               	movlb	0	; () banked
  2930  001468  2BB9               	incf	_countDrain& (0+255),f,b
  2931                           
  2932                           ; BSR set to: 0
  2933                           ;main.c: 461: plat1Left = 1;
  2934  00146A  0E00               	movlw	0
  2935  00146C  0100               	movlb	0	; () banked
  2936  00146E  6FAF               	movwf	(_plat1Left+1)& (0+255),b
  2937  001470  0E01               	movlw	1
  2938  001472  6FAE               	movwf	_plat1Left& (0+255),b
  2939                           
  2940                           ; BSR set to: 0
  2941                           ;main.c: 462: plat2Right = 1;
  2942  001474  0E00               	movlw	0
  2943  001476  0100               	movlb	0	; () banked
  2944  001478  6FB5               	movwf	(_plat2Right+1)& (0+255),b
  2945  00147A  0E01               	movlw	1
  2946  00147C  6FB4               	movwf	_plat2Right& (0+255),b
  2947                           
  2948                           ; BSR set to: 0
  2949                           ;main.c: 463: return;
  2950  00147E  0012               	return	
  2951  001480                     l341:
  2952                           
  2953                           ;main.c: 464: }
  2954                           ;main.c: 467: LATEbits.LE1 = 0;;
  2955  001480  928D               	bcf	3981,1,c	;volatile
  2956                           
  2957                           ;main.c: 468: LATCbits.LC5 = 1;;
  2958  001482  8A8B               	bsf	3979,5,c	;volatile
  2959                           
  2960                           ;main.c: 469: wait_3ms(33);
  2961  001484  0E00               	movlw	0
  2962  001486  6E35               	movwf	wait_3ms@x+1,c
  2963  001488  0E21               	movlw	33
  2964  00148A  6E34               	movwf	wait_3ms@x,c
  2965  00148C  ECEE  F00E         	call	_wait_3ms	;wreg free
  2966                           
  2967                           ;main.c: 471: if (ADRES>=54){
  2968  001490  50C4               	movf	4036,w,c	;volatile
  2969  001492  E104               	bnz	u3390
  2970  001494  0E36               	movlw	54
  2971  001496  5CC3               	subwf	4035,w,c	;volatile
  2972  001498  A0D8               	btfss	status,0,c
  2973  00149A  D00E               	goto	l3460
  2974  00149C                     u3390:
  2975                           
  2976                           ;main.c: 472: LATCbits.LC5 = 0;;
  2977  00149C  9A8B               	bcf	3979,5,c	;volatile
  2978                           
  2979                           ;main.c: 473: countC++;
  2980  00149E  0100               	movlb	0	; () banked
  2981  0014A0  2BB8               	incf	_countC& (0+255),f,b
  2982                           
  2983                           ; BSR set to: 0
  2984                           ;main.c: 474: plat1Right = 1;
  2985  0014A2  0E00               	movlw	0
  2986  0014A4  0100               	movlb	0	; () banked
  2987  0014A6  6FB1               	movwf	(_plat1Right+1)& (0+255),b
  2988  0014A8  0E01               	movlw	1
  2989  0014AA  6FB0               	movwf	_plat1Right& (0+255),b
  2990                           
  2991                           ; BSR set to: 0
  2992                           ;main.c: 475: plat2Left = 1;
  2993  0014AC  0E00               	movlw	0
  2994  0014AE  0100               	movlb	0	; () banked
  2995  0014B0  6FB3               	movwf	(_plat2Left+1)& (0+255),b
  2996  0014B2  0E01               	movlw	1
  2997  0014B4  6FB2               	movwf	_plat2Left& (0+255),b
  2998                           
  2999                           ; BSR set to: 0
  3000                           ;main.c: 476: return;
  3001  0014B6  0012               	return	
  3002  0014B8                     l3460:
  3003                           
  3004                           ;main.c: 478: else if (ADRES>=5){
  3005  0014B8  50C4               	movf	4036,w,c	;volatile
  3006  0014BA  E104               	bnz	u3400
  3007  0014BC  0E05               	movlw	5
  3008  0014BE  5CC3               	subwf	4035,w,c	;volatile
  3009  0014C0  A0D8               	btfss	status,0,c
  3010  0014C2  D00E               	goto	l344
  3011  0014C4                     u3400:
  3012                           
  3013                           ;main.c: 479: LATCbits.LC5 = 0;;
  3014  0014C4  9A8B               	bcf	3979,5,c	;volatile
  3015                           
  3016                           ;main.c: 480: countDrain++;
  3017  0014C6  0100               	movlb	0	; () banked
  3018  0014C8  2BB9               	incf	_countDrain& (0+255),f,b
  3019                           
  3020                           ; BSR set to: 0
  3021                           ;main.c: 481: plat1Left = 1;
  3022  0014CA  0E00               	movlw	0
  3023  0014CC  0100               	movlb	0	; () banked
  3024  0014CE  6FAF               	movwf	(_plat1Left+1)& (0+255),b
  3025  0014D0  0E01               	movlw	1
  3026  0014D2  6FAE               	movwf	_plat1Left& (0+255),b
  3027                           
  3028                           ; BSR set to: 0
  3029                           ;main.c: 482: plat2Right = 1;
  3030  0014D4  0E00               	movlw	0
  3031  0014D6  0100               	movlb	0	; () banked
  3032  0014D8  6FB5               	movwf	(_plat2Right+1)& (0+255),b
  3033  0014DA  0E01               	movlw	1
  3034  0014DC  6FB4               	movwf	_plat2Right& (0+255),b
  3035                           
  3036                           ; BSR set to: 0
  3037                           ;main.c: 483: return;
  3038  0014DE  0012               	return	
  3039  0014E0                     l344:
  3040                           
  3041                           ;main.c: 484: }
  3042                           ;main.c: 487: LATCbits.LC5 = 0;;
  3043  0014E0  9A8B               	bcf	3979,5,c	;volatile
  3044                           
  3045                           ;main.c: 488: LATDbits.LD0 = 1;;
  3046  0014E2  808C               	bsf	3980,0,c	;volatile
  3047                           
  3048                           ;main.c: 489: wait_3ms(33);
  3049  0014E4  0E00               	movlw	0
  3050  0014E6  6E35               	movwf	wait_3ms@x+1,c
  3051  0014E8  0E21               	movlw	33
  3052  0014EA  6E34               	movwf	wait_3ms@x,c
  3053  0014EC  ECEE  F00E         	call	_wait_3ms	;wreg free
  3054                           
  3055                           ;main.c: 491: if (ADRES>=54){
  3056  0014F0  50C4               	movf	4036,w,c	;volatile
  3057  0014F2  E104               	bnz	u3410
  3058  0014F4  0E36               	movlw	54
  3059  0014F6  5CC3               	subwf	4035,w,c	;volatile
  3060  0014F8  A0D8               	btfss	status,0,c
  3061  0014FA  D009               	goto	l3482
  3062  0014FC                     u3410:
  3063                           
  3064                           ;main.c: 492: LATDbits.LD0 = 0;;
  3065  0014FC  908C               	bcf	3980,0,c	;volatile
  3066                           
  3067                           ;main.c: 493: countAA++;
  3068  0014FE  0100               	movlb	0	; () banked
  3069  001500  2BB7               	incf	_countAA& (0+255),f,b
  3070                           
  3071                           ; BSR set to: 0
  3072                           ;main.c: 494: plat1Right = 1;
  3073  001502  0E00               	movlw	0
  3074  001504  0100               	movlb	0	; () banked
  3075  001506  6FB1               	movwf	(_plat1Right+1)& (0+255),b
  3076  001508  0E01               	movlw	1
  3077  00150A  6FB0               	movwf	_plat1Right& (0+255),b
  3078                           
  3079                           ;main.c: 495: }
  3080  00150C  D00E               	goto	l3490
  3081  00150E                     l3482:
  3082                           
  3083                           ;main.c: 496: else if (ADRES>=5){
  3084  00150E  50C4               	movf	4036,w,c	;volatile
  3085  001510  E104               	bnz	u3420
  3086  001512  0E05               	movlw	5
  3087  001514  5CC3               	subwf	4035,w,c	;volatile
  3088  001516  A0D8               	btfss	status,0,c
  3089  001518  D008               	goto	l3490
  3090  00151A                     u3420:
  3091                           
  3092                           ;main.c: 497: LATDbits.LD0 = 0;;
  3093  00151A  908C               	bcf	3980,0,c	;volatile
  3094                           
  3095                           ;main.c: 498: countDrain++;
  3096  00151C  0100               	movlb	0	; () banked
  3097  00151E  2BB9               	incf	_countDrain& (0+255),f,b
  3098                           
  3099                           ; BSR set to: 0
  3100                           ;main.c: 499: plat1Left = 1;
  3101  001520  0E00               	movlw	0
  3102  001522  0100               	movlb	0	; () banked
  3103  001524  6FAF               	movwf	(_plat1Left+1)& (0+255),b
  3104  001526  0E01               	movlw	1
  3105  001528  6FAE               	movwf	_plat1Left& (0+255),b
  3106  00152A                     l3490:
  3107                           
  3108                           ;main.c: 500: }
  3109                           ;main.c: 502: LATDbits.LD0 = 0;;
  3110  00152A  908C               	bcf	3980,0,c	;volatile
  3111                           
  3112                           ;main.c: 503: LATDbits.LD1 = 1;;
  3113  00152C  828C               	bsf	3980,1,c	;volatile
  3114                           
  3115                           ;main.c: 504: wait_3ms(33);
  3116  00152E  0E00               	movlw	0
  3117  001530  6E35               	movwf	wait_3ms@x+1,c
  3118  001532  0E21               	movlw	33
  3119  001534  6E34               	movwf	wait_3ms@x,c
  3120  001536  ECEE  F00E         	call	_wait_3ms	;wreg free
  3121                           
  3122                           ;main.c: 506: if (ADRES>=54){
  3123  00153A  50C4               	movf	4036,w,c	;volatile
  3124  00153C  E104               	bnz	u3430
  3125  00153E  0E36               	movlw	54
  3126  001540  5CC3               	subwf	4035,w,c	;volatile
  3127  001542  A0D8               	btfss	status,0,c
  3128  001544  D009               	goto	l349
  3129  001546                     u3430:
  3130                           
  3131                           ;main.c: 507: LATDbits.LD1 = 0;;
  3132  001546  928C               	bcf	3980,1,c	;volatile
  3133                           
  3134                           ;main.c: 508: countAA++;
  3135  001548  0100               	movlb	0	; () banked
  3136  00154A  2BB7               	incf	_countAA& (0+255),f,b
  3137                           
  3138                           ; BSR set to: 0
  3139                           ;main.c: 509: plat2Left = 1;
  3140  00154C  0E00               	movlw	0
  3141  00154E  0100               	movlb	0	; () banked
  3142  001550  6FB3               	movwf	(_plat2Left+1)& (0+255),b
  3143  001552  0E01               	movlw	1
  3144  001554  6FB2               	movwf	_plat2Left& (0+255),b
  3145                           
  3146                           ;main.c: 510: }
  3147  001556  D008               	goto	l3508
  3148  001558                     l349:
  3149                           
  3150                           ;main.c: 512: else{
  3151                           ;main.c: 513: LATDbits.LD1 = 0;;
  3152  001558  928C               	bcf	3980,1,c	;volatile
  3153                           
  3154                           ;main.c: 514: countDrain++;
  3155  00155A  0100               	movlb	0	; () banked
  3156  00155C  2BB9               	incf	_countDrain& (0+255),f,b
  3157                           
  3158                           ; BSR set to: 0
  3159                           ;main.c: 515: plat2Right = 1;
  3160  00155E  0E00               	movlw	0
  3161  001560  0100               	movlb	0	; () banked
  3162  001562  6FB5               	movwf	(_plat2Right+1)& (0+255),b
  3163  001564  0E01               	movlw	1
  3164  001566  6FB4               	movwf	_plat2Right& (0+255),b
  3165  001568                     l3508:
  3166                           
  3167                           ; BSR set to: 0
  3168                           ;main.c: 516: }
  3169                           ;main.c: 518: LATDbits.LD1 = 0;;
  3170  001568  928C               	bcf	3980,1,c	;volatile
  3171  00156A  0012               	return	
  3172  00156C                     __end_of_testBatteries:
  3173                           	opt stack 0
  3174                           tblptru	equ	0xFF8
  3175                           tblptrh	equ	0xFF7
  3176                           tblptrl	equ	0xFF6
  3177                           tablat	equ	0xFF5
  3178                           prodh	equ	0xFF4
  3179                           prodl	equ	0xFF3
  3180                           intcon	equ	0xFF2
  3181                           intcon3	equ	0xFF0
  3182                           postinc0	equ	0xFEE
  3183                           wreg	equ	0xFE8
  3184                           indf2	equ	0xFDF
  3185                           fsr2h	equ	0xFDA
  3186                           fsr2l	equ	0xFD9
  3187                           status	equ	0xFD8
  3188                           
  3189 ;; *************** function _wait_3ms *****************
  3190 ;; Defined at:
  3191 ;;		line 534 in file "../main.c"
  3192 ;; Parameters:    Size  Location     Type
  3193 ;;  x               2   51[COMRAM] unsigned int 
  3194 ;; Auto vars:     Size  Location     Type
  3195 ;;		None
  3196 ;; Return value:  Size  Location     Type
  3197 ;;                  1    wreg      void 
  3198 ;; Registers used:
  3199 ;;		wreg, status,2, status,0
  3200 ;; Tracked objects:
  3201 ;;		On entry : 0/0
  3202 ;;		On exit  : 0/0
  3203 ;;		Unchanged: 0/0
  3204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3205 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3206 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3207 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3208 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3209 ;;Total ram usage:        2 bytes
  3210 ;; Hardware stack levels used:    1
  3211 ;; Hardware stack levels required when called:    5
  3212 ;; This function calls:
  3213 ;;		Nothing
  3214 ;; This function is called by:
  3215 ;;		_main
  3216 ;;		_testBatteries
  3217 ;; This function uses a non-reentrant model
  3218 ;;
  3219                           
  3220                           	psect	text2
  3221  001DDC                     __ptext2:
  3222                           	opt stack 0
  3223  001DDC                     _wait_3ms:
  3224                           	opt stack 25
  3225                           
  3226                           ;main.c: 535: count_3ms = x;
  3227                           
  3228                           ; BSR set to: 0
  3229                           ;incstack = 0
  3230  001DDC  C034  F040         	movff	wait_3ms@x,_count_3ms
  3231  001DE0  C035  F041         	movff	wait_3ms@x+1,_count_3ms+1
  3232  001DE4                     l2856:
  3233  001DE4  5040               	movf	_count_3ms,w,c
  3234  001DE6  1041               	iorwf	_count_3ms+1,w,c
  3235  001DE8  B4D8               	btfsc	status,2,c
  3236  001DEA  0012               	return	
  3237  001DEC  0100               	movlb	0	; () banked
  3238  001DEE  05C7               	decf	_screenMode& (0+255),w,b
  3239  001DF0  A4D8               	btfss	status,2,c
  3240  001DF2  0012               	return	
  3241  001DF4  D7F7               	goto	l2856
  3242  001DF6                     __end_of_wait_3ms:
  3243                           	opt stack 0
  3244                           tblptru	equ	0xFF8
  3245                           tblptrh	equ	0xFF7
  3246                           tblptrl	equ	0xFF6
  3247                           tablat	equ	0xFF5
  3248                           prodh	equ	0xFF4
  3249                           prodl	equ	0xFF3
  3250                           intcon	equ	0xFF2
  3251                           intcon3	equ	0xFF0
  3252                           postinc0	equ	0xFEE
  3253                           wreg	equ	0xFE8
  3254                           indf2	equ	0xFDF
  3255                           fsr2h	equ	0xFDA
  3256                           fsr2l	equ	0xFD9
  3257                           status	equ	0xFD8
  3258                           
  3259 ;; *************** function _stopOperation *****************
  3260 ;; Defined at:
  3261 ;;		line 377 in file "../main.c"
  3262 ;; Parameters:    Size  Location     Type
  3263 ;;		None
  3264 ;; Auto vars:     Size  Location     Type
  3265 ;;		None
  3266 ;; Return value:  Size  Location     Type
  3267 ;;                  1    wreg      void 
  3268 ;; Registers used:
  3269 ;;		wreg, status,2, status,0, cstack
  3270 ;; Tracked objects:
  3271 ;;		On entry : 0/0
  3272 ;;		On exit  : 0/0
  3273 ;;		Unchanged: 0/0
  3274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3275 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3276 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3277 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3278 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3279 ;;Total ram usage:        0 bytes
  3280 ;; Hardware stack levels used:    1
  3281 ;; Hardware stack levels required when called:    6
  3282 ;; This function calls:
  3283 ;;		___awdiv
  3284 ;;		___awmod
  3285 ;; This function is called by:
  3286 ;;		_main
  3287 ;; This function uses a non-reentrant model
  3288 ;;
  3289                           
  3290                           	psect	text3
  3291  00156C                     __ptext3:
  3292                           	opt stack 0
  3293  00156C                     _stopOperation:
  3294                           	opt stack 24
  3295                           
  3296                           ;main.c: 378: T0CONbits.TMR0ON = 0;
  3297                           
  3298                           ;incstack = 0
  3299  00156C  9ED5               	bcf	4053,7,c	;volatile
  3300                           
  3301                           ;main.c: 379: T1CONbits.TMR1ON = 0;
  3302  00156E  90CD               	bcf	4045,0,c	;volatile
  3303                           
  3304                           ;main.c: 380: TMR0 = 55770;
  3305  001570  0ED9               	movlw	217
  3306  001572  6ED7               	movwf	4055,c	;volatile
  3307  001574  0EDA               	movlw	218
  3308  001576  6ED6               	movwf	4054,c	;volatile
  3309                           
  3310                           ;main.c: 381: TMR1 = 58035;
  3311  001578  0EE2               	movlw	226
  3312  00157A  6ECF               	movwf	4047,c	;volatile
  3313  00157C  0EB3               	movlw	179
  3314  00157E  6ECE               	movwf	4046,c	;volatile
  3315                           
  3316                           ;main.c: 382: num9V = count9V;
  3317  001580  C0B6  F0BB         	movff	_count9V,_num9V
  3318                           
  3319                           ;main.c: 383: numC = countC;
  3320  001584  C0B8  F0BE         	movff	_countC,_numC
  3321                           
  3322                           ;main.c: 384: numAA = countAA;
  3323  001588  C0B7  F0BC         	movff	_countAA,_numAA
  3324                           
  3325                           ;main.c: 385: numDrain = countDrain;
  3326  00158C  C0B9  F0BF         	movff	_countDrain,_numDrain
  3327                           
  3328                           ;main.c: 386: count9V = 0;
  3329  001590  0E00               	movlw	0
  3330  001592  0100               	movlb	0	; () banked
  3331  001594  6FB6               	movwf	_count9V& (0+255),b
  3332                           
  3333                           ;main.c: 387: countC = 0;
  3334  001596  0E00               	movlw	0
  3335  001598  0100               	movlb	0	; () banked
  3336  00159A  6FB8               	movwf	_countC& (0+255),b
  3337                           
  3338                           ;main.c: 388: countAA = 0;
  3339  00159C  0E00               	movlw	0
  3340  00159E  0100               	movlb	0	; () banked
  3341  0015A0  6FB7               	movwf	_countAA& (0+255),b
  3342                           
  3343                           ;main.c: 389: countDrain = 0;
  3344  0015A2  0E00               	movlw	0
  3345  0015A4  0100               	movlb	0	; () banked
  3346  0015A6  6FB9               	movwf	_countDrain& (0+255),b
  3347                           
  3348                           ; BSR set to: 0
  3349                           ;main.c: 390: min = opTimer / 60;
  3350  0015A8  C047  F034         	movff	_opTimer,___awdiv@dividend
  3351  0015AC  6A35               	clrf	___awdiv@dividend+1,c
  3352  0015AE  0E00               	movlw	0
  3353  0015B0  6E37               	movwf	___awdiv@divisor+1,c
  3354  0015B2  0E3C               	movlw	60
  3355  0015B4  6E36               	movwf	___awdiv@divisor,c
  3356  0015B6  EC54  F00C         	call	___awdiv	;wreg free
  3357  0015BA  5034               	movf	?___awdiv,w,c
  3358  0015BC  0100               	movlb	0	; () banked
  3359  0015BE  6FBA               	movwf	_min& (0+255),b
  3360                           
  3361                           ; BSR set to: 0
  3362                           ;main.c: 391: sec = opTimer % 60;
  3363  0015C0  C047  F034         	movff	_opTimer,___awmod@dividend
  3364  0015C4  6A35               	clrf	___awmod@dividend+1,c
  3365  0015C6  0E00               	movlw	0
  3366  0015C8  6E37               	movwf	___awmod@divisor+1,c
  3367  0015CA  0E3C               	movlw	60
  3368  0015CC  6E36               	movwf	___awmod@divisor,c
  3369  0015CE  ECD8  F00C         	call	___awmod	;wreg free
  3370  0015D2  5034               	movf	?___awmod,w,c
  3371  0015D4  0100               	movlb	0	; () banked
  3372  0015D6  6FC0               	movwf	_sec& (0+255),b
  3373                           
  3374                           ;main.c: 392: opTimer = 0;
  3375  0015D8  0E00               	movlw	0
  3376  0015DA  6E47               	movwf	_opTimer,c
  3377                           
  3378                           ;main.c: 393: doneTimer = 0;
  3379  0015DC  0E00               	movlw	0
  3380  0015DE  6E46               	movwf	_doneTimer,c
  3381                           
  3382                           ;main.c: 394: waitPlats = 0;
  3383  0015E0  0E00               	movlw	0
  3384  0015E2  6E4B               	movwf	_waitPlats,c
  3385                           
  3386                           ;main.c: 395: stepGear = 0;
  3387  0015E4  0E00               	movlw	0
  3388  0015E6  0100               	movlb	0	; () banked
  3389  0015E8  6FC2               	movwf	_stepGear& (0+255),b
  3390                           
  3391                           ;main.c: 396: stepAmount = 0;
  3392  0015EA  0E00               	movlw	0
  3393  0015EC  6E45               	movwf	_stepAmount+1,c
  3394  0015EE  0E00               	movlw	0
  3395  0015F0  6E44               	movwf	_stepAmount,c
  3396                           
  3397                           ;main.c: 397: sorting = 0;
  3398  0015F2  0E00               	movlw	0
  3399  0015F4  6E48               	movwf	_sorting,c
  3400                           
  3401                           ;main.c: 398: plat1Left = 0;
  3402  0015F6  0E00               	movlw	0
  3403  0015F8  0100               	movlb	0	; () banked
  3404  0015FA  6FAF               	movwf	(_plat1Left+1)& (0+255),b
  3405  0015FC  0E00               	movlw	0
  3406  0015FE  6FAE               	movwf	_plat1Left& (0+255),b
  3407                           
  3408                           ;main.c: 399: plat1Right = 0;
  3409  001600  0E00               	movlw	0
  3410  001602  0100               	movlb	0	; () banked
  3411  001604  6FB1               	movwf	(_plat1Right+1)& (0+255),b
  3412  001606  0E00               	movlw	0
  3413  001608  6FB0               	movwf	_plat1Right& (0+255),b
  3414                           
  3415                           ;main.c: 400: plat2Left = 0;
  3416  00160A  0E00               	movlw	0
  3417  00160C  0100               	movlb	0	; () banked
  3418  00160E  6FB3               	movwf	(_plat2Left+1)& (0+255),b
  3419  001610  0E00               	movlw	0
  3420  001612  6FB2               	movwf	_plat2Left& (0+255),b
  3421                           
  3422                           ;main.c: 401: plat2Right = 0;
  3423  001614  0E00               	movlw	0
  3424  001616  0100               	movlb	0	; () banked
  3425  001618  6FB5               	movwf	(_plat2Right+1)& (0+255),b
  3426  00161A  0E00               	movlw	0
  3427  00161C  6FB4               	movwf	_plat2Right& (0+255),b
  3428                           
  3429                           ;main.c: 402: turn2BackLeft = 0;
  3430  00161E  0E00               	movlw	0
  3431  001620  0100               	movlb	0	; () banked
  3432  001622  6FC5               	movwf	_turn2BackLeft& (0+255),b
  3433                           
  3434                           ;main.c: 403: turn1BackLeft = 0;
  3435  001624  0E00               	movlw	0
  3436  001626  0100               	movlb	0	; () banked
  3437  001628  6FC3               	movwf	_turn1BackLeft& (0+255),b
  3438                           
  3439                           ;main.c: 404: turn2BackRight = 0;
  3440  00162A  0E00               	movlw	0
  3441  00162C  0100               	movlb	0	; () banked
  3442  00162E  6FC6               	movwf	_turn2BackRight& (0+255),b
  3443                           
  3444                           ;main.c: 405: turn1BackRight = 0;
  3445  001630  0E00               	movlw	0
  3446  001632  0100               	movlb	0	; () banked
  3447  001634  6FC4               	movwf	_turn1BackRight& (0+255),b
  3448                           
  3449                           ;main.c: 406: count_3ms = 0;
  3450  001636  0E00               	movlw	0
  3451  001638  6E41               	movwf	_count_3ms+1,c
  3452  00163A  0E00               	movlw	0
  3453  00163C  6E40               	movwf	_count_3ms,c
  3454                           
  3455                           ;main.c: 407: solOnTimer = 0;
  3456  00163E  0E00               	movlw	0
  3457  001640  6E43               	movwf	_solOnTimer+1,c
  3458  001642  0E00               	movlw	0
  3459  001644  6E42               	movwf	_solOnTimer,c
  3460                           
  3461                           ; BSR set to: 0
  3462                           ;main.c: 408: LATEbits.LE0 = 0;;
  3463  001646  908D               	bcf	3981,0,c	;volatile
  3464                           
  3465                           ; BSR set to: 0
  3466                           ;main.c: 409: LATEbits.LE1 = 0;;
  3467  001648  928D               	bcf	3981,1,c	;volatile
  3468                           
  3469                           ; BSR set to: 0
  3470                           ;main.c: 410: LATCbits.LC5 = 0;;
  3471  00164A  9A8B               	bcf	3979,5,c	;volatile
  3472                           
  3473                           ; BSR set to: 0
  3474                           ;main.c: 411: LATDbits.LD0 = 0;;
  3475  00164C  908C               	bcf	3980,0,c	;volatile
  3476                           
  3477                           ; BSR set to: 0
  3478                           ;main.c: 412: LATDbits.LD1 = 0;;
  3479  00164E  928C               	bcf	3980,1,c	;volatile
  3480                           
  3481                           ; BSR set to: 0
  3482                           ;main.c: 413: LATAbits.LA2 = 0;;
  3483  001650  9489               	bcf	3977,2,c	;volatile
  3484                           
  3485                           ; BSR set to: 0
  3486                           ;main.c: 414: LATAbits.LA3 = 0;;
  3487  001652  9689               	bcf	3977,3,c	;volatile
  3488                           
  3489                           ; BSR set to: 0
  3490                           ;main.c: 415: LATAbits.LA4 = 0;;
  3491  001654  9889               	bcf	3977,4,c	;volatile
  3492                           
  3493                           ; BSR set to: 0
  3494                           ;main.c: 416: LATAbits.LA5 = 0;;
  3495  001656  9A89               	bcf	3977,5,c	;volatile
  3496                           
  3497                           ; BSR set to: 0
  3498                           ;main.c: 417: LATBbits.LB0 = 0;;
  3499  001658  908A               	bcf	3978,0,c	;volatile
  3500                           
  3501                           ; BSR set to: 0
  3502                           ;main.c: 418: LATBbits.LB2 = 0;;
  3503  00165A  948A               	bcf	3978,2,c	;volatile
  3504                           
  3505                           ; BSR set to: 0
  3506                           ;main.c: 419: LATCbits.LC6 = 0;;
  3507  00165C  9C8B               	bcf	3979,6,c	;volatile
  3508                           
  3509                           ; BSR set to: 0
  3510                           ;main.c: 420: LATEbits.LE2 = 0;;
  3511  00165E  948D               	bcf	3981,2,c	;volatile
  3512                           
  3513                           ; BSR set to: 0
  3514                           ;main.c: 421: LATCbits.LC1= 0;;
  3515  001660  928B               	bcf	3979,1,c	;volatile
  3516                           
  3517                           ; BSR set to: 0
  3518                           ;main.c: 422: LATCbits.LC7 = 0;;
  3519  001662  9E8B               	bcf	3979,7,c	;volatile
  3520                           
  3521                           ; BSR set to: 0
  3522                           ;main.c: 423: LATCbits.LC2 = 0;;
  3523  001664  948B               	bcf	3979,2,c	;volatile
  3524                           
  3525                           ; BSR set to: 0
  3526                           ;main.c: 424: LATCbits.LC0 = 0;;
  3527  001666  908B               	bcf	3979,0,c	;volatile
  3528                           
  3529                           ; BSR set to: 0
  3530  001668  0012               	return		;funcret
  3531  00166A                     __end_of_stopOperation:
  3532                           	opt stack 0
  3533                           tblptru	equ	0xFF8
  3534                           tblptrh	equ	0xFF7
  3535                           tblptrl	equ	0xFF6
  3536                           tablat	equ	0xFF5
  3537                           prodh	equ	0xFF4
  3538                           prodl	equ	0xFF3
  3539                           intcon	equ	0xFF2
  3540                           intcon3	equ	0xFF0
  3541                           postinc0	equ	0xFEE
  3542                           wreg	equ	0xFE8
  3543                           indf2	equ	0xFDF
  3544                           fsr2h	equ	0xFDA
  3545                           fsr2l	equ	0xFD9
  3546                           status	equ	0xFD8
  3547                           
  3548 ;; *************** function ___awmod *****************
  3549 ;; Defined at:
  3550 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  3551 ;; Parameters:    Size  Location     Type
  3552 ;;  dividend        2   51[COMRAM] int 
  3553 ;;  divisor         2   53[COMRAM] int 
  3554 ;; Auto vars:     Size  Location     Type
  3555 ;;  sign            1   56[COMRAM] unsigned char 
  3556 ;;  counter         1   55[COMRAM] unsigned char 
  3557 ;; Return value:  Size  Location     Type
  3558 ;;                  2   51[COMRAM] int 
  3559 ;; Registers used:
  3560 ;;		wreg, status,2, status,0
  3561 ;; Tracked objects:
  3562 ;;		On entry : 0/0
  3563 ;;		On exit  : 0/0
  3564 ;;		Unchanged: 0/0
  3565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3566 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3567 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3568 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3569 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3570 ;;Total ram usage:        6 bytes
  3571 ;; Hardware stack levels used:    1
  3572 ;; Hardware stack levels required when called:    5
  3573 ;; This function calls:
  3574 ;;		Nothing
  3575 ;; This function is called by:
  3576 ;;		_stopOperation
  3577 ;; This function uses a non-reentrant model
  3578 ;;
  3579                           
  3580                           	psect	text4
  3581  0019B0                     __ptext4:
  3582                           	opt stack 0
  3583  0019B0                     ___awmod:
  3584                           	opt stack 24
  3585                           
  3586                           ; BSR set to: 0
  3587                           ;incstack = 0
  3588  0019B0  0E00               	movlw	0
  3589  0019B2  6E39               	movwf	___awmod@sign,c
  3590  0019B4  AE35               	btfss	___awmod@dividend+1,7,c
  3591  0019B6  D006               	goto	l2930
  3592  0019B8  6C34               	negf	___awmod@dividend,c
  3593  0019BA  1E35               	comf	___awmod@dividend+1,f,c
  3594  0019BC  B0D8               	btfsc	status,0,c
  3595  0019BE  2A35               	incf	___awmod@dividend+1,f,c
  3596  0019C0  0E01               	movlw	1
  3597  0019C2  6E39               	movwf	___awmod@sign,c
  3598  0019C4                     l2930:
  3599  0019C4  AE37               	btfss	___awmod@divisor+1,7,c
  3600  0019C6  D004               	goto	l2934
  3601  0019C8  6C36               	negf	___awmod@divisor,c
  3602  0019CA  1E37               	comf	___awmod@divisor+1,f,c
  3603  0019CC  B0D8               	btfsc	status,0,c
  3604  0019CE  2A37               	incf	___awmod@divisor+1,f,c
  3605  0019D0                     l2934:
  3606  0019D0  5036               	movf	___awmod@divisor,w,c
  3607  0019D2  1037               	iorwf	___awmod@divisor+1,w,c
  3608  0019D4  B4D8               	btfsc	status,2,c
  3609  0019D6  D018               	goto	l2950
  3610  0019D8  0E01               	movlw	1
  3611  0019DA  6E38               	movwf	___awmod@counter,c
  3612  0019DC  D004               	goto	l2940
  3613  0019DE                     l2938:
  3614  0019DE  90D8               	bcf	status,0,c
  3615  0019E0  3636               	rlcf	___awmod@divisor,f,c
  3616  0019E2  3637               	rlcf	___awmod@divisor+1,f,c
  3617  0019E4  2A38               	incf	___awmod@counter,f,c
  3618  0019E6                     l2940:
  3619  0019E6  AE37               	btfss	___awmod@divisor+1,7,c
  3620  0019E8  D7FA               	goto	l2938
  3621  0019EA                     l2942:
  3622  0019EA  5036               	movf	___awmod@divisor,w,c
  3623  0019EC  5C34               	subwf	___awmod@dividend,w,c
  3624  0019EE  5037               	movf	___awmod@divisor+1,w,c
  3625  0019F0  5835               	subwfb	___awmod@dividend+1,w,c
  3626  0019F2  A0D8               	btfss	status,0,c
  3627  0019F4  D004               	goto	l2946
  3628  0019F6  5036               	movf	___awmod@divisor,w,c
  3629  0019F8  5E34               	subwf	___awmod@dividend,f,c
  3630  0019FA  5037               	movf	___awmod@divisor+1,w,c
  3631  0019FC  5A35               	subwfb	___awmod@dividend+1,f,c
  3632  0019FE                     l2946:
  3633  0019FE  90D8               	bcf	status,0,c
  3634  001A00  3237               	rrcf	___awmod@divisor+1,f,c
  3635  001A02  3236               	rrcf	___awmod@divisor,f,c
  3636  001A04  2E38               	decfsz	___awmod@counter,f,c
  3637  001A06  D7F1               	goto	l2942
  3638  001A08                     l2950:
  3639  001A08  5039               	movf	___awmod@sign,w,c
  3640  001A0A  B4D8               	btfsc	status,2,c
  3641  001A0C  D004               	goto	l2954
  3642  001A0E  6C34               	negf	___awmod@dividend,c
  3643  001A10  1E35               	comf	___awmod@dividend+1,f,c
  3644  001A12  B0D8               	btfsc	status,0,c
  3645  001A14  2A35               	incf	___awmod@dividend+1,f,c
  3646  001A16                     l2954:
  3647  001A16  C034  F034         	movff	___awmod@dividend,?___awmod
  3648  001A1A  C035  F035         	movff	___awmod@dividend+1,?___awmod+1
  3649  001A1E  0012               	return	
  3650  001A20                     __end_of___awmod:
  3651                           	opt stack 0
  3652                           tblptru	equ	0xFF8
  3653                           tblptrh	equ	0xFF7
  3654                           tblptrl	equ	0xFF6
  3655                           tablat	equ	0xFF5
  3656                           prodh	equ	0xFF4
  3657                           prodl	equ	0xFF3
  3658                           intcon	equ	0xFF2
  3659                           intcon3	equ	0xFF0
  3660                           postinc0	equ	0xFEE
  3661                           wreg	equ	0xFE8
  3662                           indf2	equ	0xFDF
  3663                           fsr2h	equ	0xFDA
  3664                           fsr2l	equ	0xFD9
  3665                           status	equ	0xFD8
  3666                           
  3667 ;; *************** function ___awdiv *****************
  3668 ;; Defined at:
  3669 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  3670 ;; Parameters:    Size  Location     Type
  3671 ;;  dividend        2   51[COMRAM] int 
  3672 ;;  divisor         2   53[COMRAM] int 
  3673 ;; Auto vars:     Size  Location     Type
  3674 ;;  quotient        2   57[COMRAM] int 
  3675 ;;  sign            1   56[COMRAM] unsigned char 
  3676 ;;  counter         1   55[COMRAM] unsigned char 
  3677 ;; Return value:  Size  Location     Type
  3678 ;;                  2   51[COMRAM] int 
  3679 ;; Registers used:
  3680 ;;		wreg, status,2, status,0
  3681 ;; Tracked objects:
  3682 ;;		On entry : 0/0
  3683 ;;		On exit  : 0/0
  3684 ;;		Unchanged: 0/0
  3685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3686 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3687 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3688 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3689 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3690 ;;Total ram usage:        8 bytes
  3691 ;; Hardware stack levels used:    1
  3692 ;; Hardware stack levels required when called:    5
  3693 ;; This function calls:
  3694 ;;		Nothing
  3695 ;; This function is called by:
  3696 ;;		_stopOperation
  3697 ;; This function uses a non-reentrant model
  3698 ;;
  3699                           
  3700                           	psect	text5
  3701  0018A8                     __ptext5:
  3702                           	opt stack 0
  3703  0018A8                     ___awdiv:
  3704                           	opt stack 24
  3705                           
  3706                           ;incstack = 0
  3707  0018A8  0E00               	movlw	0
  3708  0018AA  6E39               	movwf	___awdiv@sign,c
  3709  0018AC  AE37               	btfss	___awdiv@divisor+1,7,c
  3710  0018AE  D006               	goto	l2886
  3711  0018B0  6C36               	negf	___awdiv@divisor,c
  3712  0018B2  1E37               	comf	___awdiv@divisor+1,f,c
  3713  0018B4  B0D8               	btfsc	status,0,c
  3714  0018B6  2A37               	incf	___awdiv@divisor+1,f,c
  3715  0018B8  0E01               	movlw	1
  3716  0018BA  6E39               	movwf	___awdiv@sign,c
  3717  0018BC                     l2886:
  3718  0018BC  AE35               	btfss	___awdiv@dividend+1,7,c
  3719  0018BE  D006               	goto	l2892
  3720  0018C0  6C34               	negf	___awdiv@dividend,c
  3721  0018C2  1E35               	comf	___awdiv@dividend+1,f,c
  3722  0018C4  B0D8               	btfsc	status,0,c
  3723  0018C6  2A35               	incf	___awdiv@dividend+1,f,c
  3724  0018C8  0E01               	movlw	1
  3725  0018CA  1A39               	xorwf	___awdiv@sign,f,c
  3726  0018CC                     l2892:
  3727  0018CC  0E00               	movlw	0
  3728  0018CE  6E3B               	movwf	___awdiv@quotient+1,c
  3729  0018D0  0E00               	movlw	0
  3730  0018D2  6E3A               	movwf	___awdiv@quotient,c
  3731  0018D4  5036               	movf	___awdiv@divisor,w,c
  3732  0018D6  1037               	iorwf	___awdiv@divisor+1,w,c
  3733  0018D8  B4D8               	btfsc	status,2,c
  3734  0018DA  D01C               	goto	l2914
  3735  0018DC  0E01               	movlw	1
  3736  0018DE  6E38               	movwf	___awdiv@counter,c
  3737  0018E0  D004               	goto	l2900
  3738  0018E2                     l2898:
  3739  0018E2  90D8               	bcf	status,0,c
  3740  0018E4  3636               	rlcf	___awdiv@divisor,f,c
  3741  0018E6  3637               	rlcf	___awdiv@divisor+1,f,c
  3742  0018E8  2A38               	incf	___awdiv@counter,f,c
  3743  0018EA                     l2900:
  3744  0018EA  AE37               	btfss	___awdiv@divisor+1,7,c
  3745  0018EC  D7FA               	goto	l2898
  3746  0018EE                     l2902:
  3747  0018EE  90D8               	bcf	status,0,c
  3748  0018F0  363A               	rlcf	___awdiv@quotient,f,c
  3749  0018F2  363B               	rlcf	___awdiv@quotient+1,f,c
  3750  0018F4  5036               	movf	___awdiv@divisor,w,c
  3751  0018F6  5C34               	subwf	___awdiv@dividend,w,c
  3752  0018F8  5037               	movf	___awdiv@divisor+1,w,c
  3753  0018FA  5835               	subwfb	___awdiv@dividend+1,w,c
  3754  0018FC  A0D8               	btfss	status,0,c
  3755  0018FE  D005               	goto	l2910
  3756  001900  5036               	movf	___awdiv@divisor,w,c
  3757  001902  5E34               	subwf	___awdiv@dividend,f,c
  3758  001904  5037               	movf	___awdiv@divisor+1,w,c
  3759  001906  5A35               	subwfb	___awdiv@dividend+1,f,c
  3760  001908  803A               	bsf	___awdiv@quotient,0,c
  3761  00190A                     l2910:
  3762  00190A  90D8               	bcf	status,0,c
  3763  00190C  3237               	rrcf	___awdiv@divisor+1,f,c
  3764  00190E  3236               	rrcf	___awdiv@divisor,f,c
  3765  001910  2E38               	decfsz	___awdiv@counter,f,c
  3766  001912  D7ED               	goto	l2902
  3767  001914                     l2914:
  3768  001914  5039               	movf	___awdiv@sign,w,c
  3769  001916  B4D8               	btfsc	status,2,c
  3770  001918  D004               	goto	l2918
  3771  00191A  6C3A               	negf	___awdiv@quotient,c
  3772  00191C  1E3B               	comf	___awdiv@quotient+1,f,c
  3773  00191E  B0D8               	btfsc	status,0,c
  3774  001920  2A3B               	incf	___awdiv@quotient+1,f,c
  3775  001922                     l2918:
  3776  001922  C03A  F034         	movff	___awdiv@quotient,?___awdiv
  3777  001926  C03B  F035         	movff	___awdiv@quotient+1,?___awdiv+1
  3778  00192A  0012               	return	
  3779  00192C                     __end_of___awdiv:
  3780                           	opt stack 0
  3781                           tblptru	equ	0xFF8
  3782                           tblptrh	equ	0xFF7
  3783                           tblptrl	equ	0xFF6
  3784                           tablat	equ	0xFF5
  3785                           prodh	equ	0xFF4
  3786                           prodl	equ	0xFF3
  3787                           intcon	equ	0xFF2
  3788                           intcon3	equ	0xFF0
  3789                           postinc0	equ	0xFEE
  3790                           wreg	equ	0xFE8
  3791                           indf2	equ	0xFDF
  3792                           fsr2h	equ	0xFDA
  3793                           fsr2l	equ	0xFD9
  3794                           status	equ	0xFD8
  3795                           
  3796 ;; *************** function _readADC *****************
  3797 ;; Defined at:
  3798 ;;		line 369 in file "../main.c"
  3799 ;; Parameters:    Size  Location     Type
  3800 ;;  channel         1    wreg     unsigned char 
  3801 ;; Auto vars:     Size  Location     Type
  3802 ;;  channel         1   51[COMRAM] unsigned char 
  3803 ;; Return value:  Size  Location     Type
  3804 ;;                  1    wreg      void 
  3805 ;; Registers used:
  3806 ;;		wreg, status,2, status,0
  3807 ;; Tracked objects:
  3808 ;;		On entry : 0/0
  3809 ;;		On exit  : 0/0
  3810 ;;		Unchanged: 0/0
  3811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3812 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3813 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3814 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3815 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3816 ;;Total ram usage:        1 bytes
  3817 ;; Hardware stack levels used:    1
  3818 ;; Hardware stack levels required when called:    5
  3819 ;; This function calls:
  3820 ;;		Nothing
  3821 ;; This function is called by:
  3822 ;;		_main
  3823 ;; This function uses a non-reentrant model
  3824 ;;
  3825                           
  3826                           	psect	text6
  3827  001DF6                     __ptext6:
  3828                           	opt stack 0
  3829  001DF6                     _readADC:
  3830                           	opt stack 25
  3831                           
  3832                           ;incstack = 0
  3833                           ;readADC@channel stored from wreg
  3834  001DF6  6E34               	movwf	readADC@channel,c
  3835                           
  3836                           ;main.c: 371: ADCON0 = channel <<2;
  3837  001DF8  4434               	rlncf	readADC@channel,w,c
  3838  001DFA  46E8               	rlncf	wreg,f,c
  3839  001DFC  0BFC               	andlw	252
  3840  001DFE  6EC2               	movwf	4034,c	;volatile
  3841                           
  3842                           ;main.c: 372: ADCON0bits.ADON = 1;
  3843  001E00  80C2               	bsf	4034,0,c	;volatile
  3844                           
  3845                           ;main.c: 373: ADCON0bits.GO = 1;
  3846  001E02  82C2               	bsf	4034,1,c	;volatile
  3847  001E04                     l327:
  3848  001E04  A2C2               	btfss	4034,1,c	;volatile
  3849  001E06  0012               	return	
  3850  001E08  D7FD               	goto	l327
  3851  001E0A                     __end_of_readADC:
  3852                           	opt stack 0
  3853                           tblptru	equ	0xFF8
  3854                           tblptrh	equ	0xFF7
  3855                           tblptrl	equ	0xFF6
  3856                           tablat	equ	0xFF5
  3857                           prodh	equ	0xFF4
  3858                           prodl	equ	0xFF3
  3859                           intcon	equ	0xFF2
  3860                           intcon3	equ	0xFF0
  3861                           postinc0	equ	0xFEE
  3862                           wreg	equ	0xFE8
  3863                           indf2	equ	0xFDF
  3864                           fsr2h	equ	0xFDA
  3865                           fsr2l	equ	0xFD9
  3866                           status	equ	0xFD8
  3867                           
  3868 ;; *************** function _printf *****************
  3869 ;; Defined at:
  3870 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  3871 ;; Parameters:    Size  Location     Type
  3872 ;;  f               2    0[BANK0 ] PTR const unsigned char 
  3873 ;;		 -> STR_23(22), STR_22(17), STR_21(17), STR_20(17), 
  3874 ;;		 -> STR_19(23), STR_18(23), STR_17(21), STR_16(17), 
  3875 ;;		 -> STR_15(21), STR_14(17), STR_13(21), STR_12(17), 
  3876 ;;		 -> STR_11(19), STR_10(17), STR_9(19), STR_8(17), 
  3877 ;;		 -> STR_7(25), STR_6(17), STR_5(17), STR_4(17), 
  3878 ;;		 -> STR_3(17), STR_2(17), STR_1(17), 
  3879 ;; Auto vars:     Size  Location     Type
  3880 ;;  idx             1   12[BANK0 ] unsigned char 
  3881 ;;  tmpval          4    0        struct .
  3882 ;;  cp              3    0        PTR const unsigned char 
  3883 ;;  width           2   19[BANK0 ] int 
  3884 ;;  val             2   16[BANK0 ] unsigned int 
  3885 ;;  ap              2   13[BANK0 ] PTR void [1]
  3886 ;;		 -> ?i2_printf(2), ?_printf(2), 
  3887 ;;  len             2    0        unsigned int 
  3888 ;;  c               1   21[BANK0 ] char 
  3889 ;;  flag            1   18[BANK0 ] unsigned char 
  3890 ;;  prec            1   15[BANK0 ] char 
  3891 ;; Return value:  Size  Location     Type
  3892 ;;                  2    0[BANK0 ] int 
  3893 ;; Registers used:
  3894 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3895 ;; Tracked objects:
  3896 ;;		On entry : 0/0
  3897 ;;		On exit  : 0/0
  3898 ;;		Unchanged: 0/0
  3899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3900 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3901 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3902 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3903 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3904 ;;Total ram usage:       22 bytes
  3905 ;; Hardware stack levels used:    1
  3906 ;; Hardware stack levels required when called:    7
  3907 ;; This function calls:
  3908 ;;		___lwdiv
  3909 ;;		___lwmod
  3910 ;;		___wmul
  3911 ;;		_isdigit
  3912 ;;		_putch
  3913 ;; This function is called by:
  3914 ;;		_main
  3915 ;; This function uses a non-reentrant model
  3916 ;;
  3917                           
  3918                           	psect	text7
  3919  000D0A                     __ptext7:
  3920                           	opt stack 0
  3921  000D0A                     _printf:
  3922                           	opt stack 23
  3923                           
  3924                           ;doprnt.c: 466: va_list ap;
  3925                           ;doprnt.c: 499: signed char c;
  3926                           ;doprnt.c: 501: int width;
  3927                           ;doprnt.c: 506: signed char prec;
  3928                           ;doprnt.c: 508: unsigned char flag;
  3929                           ;doprnt.c: 523: union {
  3930                           ;doprnt.c: 524: unsigned long vd;
  3931                           ;doprnt.c: 525: double integ;
  3932                           ;doprnt.c: 526: } tmpval;
  3933                           ;doprnt.c: 528: unsigned int val;
  3934                           ;doprnt.c: 529: unsigned len;
  3935                           ;doprnt.c: 530: const char * cp;
  3936                           ;doprnt.c: 533: *ap = __va_start();
  3937                           
  3938                           ;incstack = 0
  3939  000D0A  0E82               	movlw	low (?_printf+2)
  3940  000D0C  0100               	movlb	0	; () banked
  3941  000D0E  6F8D               	movwf	printf@ap& (0+255),b
  3942  000D10  0E00               	movlw	high (?_printf+2)
  3943  000D12  0100               	movlb	0	; () banked
  3944  000D14  6F8E               	movwf	(printf@ap+1)& (0+255),b
  3945                           
  3946                           ;doprnt.c: 536: while(c = *f++) {
  3947  000D16  D1C0               	goto	l4372
  3948  000D18                     l4246:
  3949                           
  3950                           ; BSR set to: 0
  3951                           ;doprnt.c: 538: if(c != '%')
  3952  000D18  0E25               	movlw	37
  3953  000D1A  0100               	movlb	0	; () banked
  3954  000D1C  1995               	xorwf	printf@c& (0+255),w,b
  3955  000D1E  B4D8               	btfsc	status,2,c
  3956  000D20  D005               	goto	l4250
  3957                           
  3958                           ; BSR set to: 0
  3959                           ;doprnt.c: 540: {
  3960                           ;doprnt.c: 541: (putch(c) );
  3961  000D22  0100               	movlb	0	; () banked
  3962  000D24  5195               	movf	printf@c& (0+255),w,b
  3963  000D26  EC0E  F00F         	call	_putch
  3964                           
  3965                           ;doprnt.c: 542: continue;
  3966  000D2A  D1B6               	goto	l4372
  3967  000D2C                     l4250:
  3968                           
  3969                           ;doprnt.c: 543: }
  3970                           ;doprnt.c: 546: width = 0;
  3971  000D2C  0E00               	movlw	0
  3972  000D2E  0100               	movlb	0	; () banked
  3973  000D30  6F94               	movwf	(printf@width+1)& (0+255),b
  3974  000D32  0E00               	movlw	0
  3975  000D34  6F93               	movwf	printf@width& (0+255),b
  3976                           
  3977                           ;doprnt.c: 548: flag = 0;
  3978  000D36  0E00               	movlw	0
  3979  000D38  0100               	movlb	0	; () banked
  3980  000D3A  6F92               	movwf	printf@flag& (0+255),b
  3981                           
  3982                           ; BSR set to: 0
  3983                           ;doprnt.c: 551: switch(*f) {
  3984                           
  3985                           ;doprnt.c: 550: for(;;) {
  3986  000D3C  D005               	goto	l4256
  3987  000D3E                     l4252:
  3988                           
  3989                           ;doprnt.c: 580: flag |= 0x04;
  3990  000D3E  0100               	movlb	0	; () banked
  3991  000D40  8592               	bsf	printf@flag& (0+255),2,b
  3992                           
  3993                           ;doprnt.c: 581: f++;
  3994  000D42  0100               	movlb	0	; () banked
  3995  000D44  4B80               	infsnz	printf@f& (0+255),f,b
  3996  000D46  2B81               	incf	(printf@f+1)& (0+255),f,b
  3997  000D48                     l4256:
  3998  000D48  C080  FFF6         	movff	printf@f,tblptrl
  3999  000D4C  C081  FFF7         	movff	printf@f+1,tblptrh
  4000  000D50                     	if	0	;tblptru may be non-zero
  4001  000D50                     	endif
  4002  000D50                     	if	0	;tblptru may be non-zero
  4003  000D50                     	endif
  4004  000D50  0008               	tblrd		*
  4005  000D52  50F5               	movf	tablat,w,c
  4006                           
  4007                           ; Switch size 1, requested type "space"
  4008                           ; Number of cases is 1, Range of values is 48 to 48
  4009                           ; switch strategies available:
  4010                           ; Name         Instructions Cycles
  4011                           ; simple_byte            4     3 (average)
  4012                           ;	Chosen strategy is simple_byte
  4013  000D54  0A30               	xorlw	48	; case 48
  4014  000D56  B4D8               	btfsc	status,2,c
  4015  000D58  D7F2               	goto	l4252
  4016                           
  4017                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4018                           
  4019                           ;doprnt.c: 586: }
  4020                           
  4021                           ;doprnt.c: 585: break;
  4022  000D5A  C080  FFF6         	movff	printf@f,tblptrl
  4023  000D5E  C081  FFF7         	movff	printf@f+1,tblptrh
  4024  000D62                     	if	0	;tblptru may be non-zero
  4025  000D62                     	endif
  4026  000D62                     	if	0	;tblptru may be non-zero
  4027  000D62                     	endif
  4028  000D62  0008               	tblrd		*
  4029  000D64  50F5               	movf	tablat,w,c
  4030  000D66  ECD0  F00E         	call	_isdigit
  4031  000D6A  A0D8               	btfss	status,0,c
  4032  000D6C  D043               	goto	l4274
  4033                           
  4034                           ;doprnt.c: 598: width = 0;
  4035  000D6E  0E00               	movlw	0
  4036  000D70  0100               	movlb	0	; () banked
  4037  000D72  6F94               	movwf	(printf@width+1)& (0+255),b
  4038  000D74  0E00               	movlw	0
  4039  000D76  6F93               	movwf	printf@width& (0+255),b
  4040  000D78                     l4262:
  4041                           
  4042                           ;doprnt.c: 600: width *= 10;
  4043  000D78  C093  F034         	movff	printf@width,___wmul@multiplier
  4044  000D7C  C094  F035         	movff	printf@width+1,___wmul@multiplier+1
  4045  000D80  0E00               	movlw	0
  4046  000D82  6E37               	movwf	___wmul@multiplicand+1,c
  4047  000D84  0E0A               	movlw	10
  4048  000D86  6E36               	movwf	___wmul@multiplicand,c
  4049  000D88  EC97  F00E         	call	___wmul	;wreg free
  4050  000D8C  C034  F093         	movff	?___wmul,printf@width
  4051  000D90  C035  F094         	movff	?___wmul+1,printf@width+1
  4052                           
  4053                           ;doprnt.c: 601: width += *f++ - '0';
  4054  000D94  0ED0               	movlw	208
  4055  000D96  0100               	movlb	0	; () banked
  4056  000D98  6F88               	movwf	??_printf& (0+255),b
  4057  000D9A  0EFF               	movlw	255
  4058  000D9C  0100               	movlb	0	; () banked
  4059  000D9E  6F89               	movwf	(??_printf+1)& (0+255),b
  4060  000DA0  C080  FFF6         	movff	printf@f,tblptrl
  4061  000DA4  C081  FFF7         	movff	printf@f+1,tblptrh
  4062  000DA8                     	if	0	;tblptru may be non-zero
  4063  000DA8                     	endif
  4064  000DA8                     	if	0	;tblptru may be non-zero
  4065  000DA8                     	endif
  4066  000DA8  0008               	tblrd		*
  4067  000DAA  50F5               	movf	tablat,w,c
  4068  000DAC  0100               	movlb	0	; () banked
  4069  000DAE  6F8A               	movwf	(??_printf+2)& (0+255),b
  4070  000DB0  6B8B               	clrf	(??_printf+3)& (0+255),b
  4071  000DB2  0100               	movlb	0	; () banked
  4072  000DB4  5188               	movf	??_printf& (0+255),w,b
  4073  000DB6  0100               	movlb	0	; () banked
  4074  000DB8  278A               	addwf	(??_printf+2)& (0+255),f,b
  4075  000DBA  0100               	movlb	0	; () banked
  4076  000DBC  5189               	movf	(??_printf+1)& (0+255),w,b
  4077  000DBE  0100               	movlb	0	; () banked
  4078  000DC0  238B               	addwfc	(??_printf+3)& (0+255),f,b
  4079  000DC2  0100               	movlb	0	; () banked
  4080  000DC4  518A               	movf	(??_printf+2)& (0+255),w,b
  4081  000DC6  0100               	movlb	0	; () banked
  4082  000DC8  2793               	addwf	printf@width& (0+255),f,b
  4083  000DCA  0100               	movlb	0	; () banked
  4084  000DCC  518B               	movf	(??_printf+3)& (0+255),w,b
  4085  000DCE  0100               	movlb	0	; () banked
  4086  000DD0  2394               	addwfc	(printf@width+1)& (0+255),f,b
  4087                           
  4088                           ; BSR set to: 0
  4089  000DD2  0100               	movlb	0	; () banked
  4090  000DD4  4B80               	infsnz	printf@f& (0+255),f,b
  4091  000DD6  2B81               	incf	(printf@f+1)& (0+255),f,b
  4092                           
  4093                           ; BSR set to: 0
  4094                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4095  000DD8  C080  FFF6         	movff	printf@f,tblptrl
  4096  000DDC  C081  FFF7         	movff	printf@f+1,tblptrh
  4097  000DE0                     	if	0	;tblptru may be non-zero
  4098  000DE0                     	endif
  4099  000DE0                     	if	0	;tblptru may be non-zero
  4100  000DE0                     	endif
  4101  000DE0  0008               	tblrd		*
  4102  000DE2  50F5               	movf	tablat,w,c
  4103  000DE4  ECD0  F00E         	call	_isdigit
  4104  000DE8  A0D8               	btfss	status,0,c
  4105  000DEA  D004               	goto	l4274
  4106  000DEC  D7C5               	goto	l4262
  4107  000DEE                     l4270:
  4108                           
  4109                           ;doprnt.c: 721: flag |= 0x80;
  4110  000DEE  0100               	movlb	0	; () banked
  4111  000DF0  8F92               	bsf	printf@flag& (0+255),7,b
  4112                           
  4113                           ;doprnt.c: 723: break;
  4114  000DF2  D019               	goto	l462
  4115  000DF4                     l4274:
  4116  000DF4  C080  FFF6         	movff	printf@f,tblptrl
  4117  000DF8  C081  FFF7         	movff	printf@f+1,tblptrh
  4118  000DFC  0100               	movlb	0	; () banked
  4119  000DFE  4B80               	infsnz	printf@f& (0+255),f,b
  4120  000E00  2B81               	incf	(printf@f+1)& (0+255),f,b
  4121  000E02                     	if	0	;tblptru may be non-zero
  4122  000E02                     	endif
  4123  000E02                     	if	0	;tblptru may be non-zero
  4124  000E02                     	endif
  4125  000E02  0008               	tblrd		*
  4126  000E04  CFF5 F095          	movff	tablat,printf@c
  4127  000E08  0100               	movlb	0	; () banked
  4128  000E0A  5195               	movf	printf@c& (0+255),w,b
  4129                           
  4130                           ; Switch size 1, requested type "space"
  4131                           ; Number of cases is 4, Range of values is 0 to 120
  4132                           ; switch strategies available:
  4133                           ; Name         Instructions Cycles
  4134                           ; simple_byte           13     7 (average)
  4135                           ;	Chosen strategy is simple_byte
  4136  000E0C  0A00               	xorlw	0	; case 0
  4137  000E0E  B4D8               	btfsc	status,2,c
  4138  000E10  0012               	return	
  4139  000E12  0A64               	xorlw	100	; case 100
  4140  000E14  B4D8               	btfsc	status,2,c
  4141  000E16  D007               	goto	l462
  4142  000E18  0A0D               	xorlw	13	; case 105
  4143  000E1A  B4D8               	btfsc	status,2,c
  4144  000E1C  D004               	goto	l462
  4145  000E1E  0A11               	xorlw	17	; case 120
  4146  000E20  B4D8               	btfsc	status,2,c
  4147  000E22  D7E5               	goto	l4270
  4148  000E24  D139               	goto	l4372
  4149  000E26                     l462:
  4150                           
  4151                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  4152  000E26  0100               	movlb	0	; () banked
  4153  000E28  BF92               	btfsc	printf@flag& (0+255),7,b
  4154  000E2A  D019               	goto	l4286
  4155                           
  4156                           ; BSR set to: 0
  4157                           ;doprnt.c: 1253: {
  4158                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4159  000E2C  C08D  FFD9         	movff	printf@ap,fsr2l
  4160  000E30  C08E  FFDA         	movff	printf@ap+1,fsr2h
  4161  000E34  CFDE F090          	movff	postinc2,printf@val
  4162  000E38  CFDD F091          	movff	postdec2,printf@val+1
  4163                           
  4164                           ; BSR set to: 0
  4165  000E3C  0E02               	movlw	2
  4166  000E3E  0100               	movlb	0	; () banked
  4167  000E40  278D               	addwf	printf@ap& (0+255),f,b
  4168  000E42  0E00               	movlw	0
  4169  000E44  238E               	addwfc	(printf@ap+1)& (0+255),f,b
  4170                           
  4171                           ; BSR set to: 0
  4172                           ;doprnt.c: 1261: if((int)val < 0) {
  4173  000E46  0100               	movlb	0	; () banked
  4174  000E48  AF91               	btfss	(printf@val+1)& (0+255),7,b
  4175  000E4A  D053               	goto	l4320
  4176                           
  4177                           ; BSR set to: 0
  4178                           ;doprnt.c: 1262: flag |= 0x03;
  4179  000E4C  0E03               	movlw	3
  4180  000E4E  0100               	movlb	0	; () banked
  4181  000E50  1392               	iorwf	printf@flag& (0+255),f,b
  4182                           
  4183                           ; BSR set to: 0
  4184                           ;doprnt.c: 1263: val = -val;
  4185  000E52  0100               	movlb	0	; () banked
  4186  000E54  6D90               	negf	printf@val& (0+255),b
  4187  000E56  1F91               	comf	(printf@val+1)& (0+255),f,b
  4188  000E58  B0D8               	btfsc	status,0,c
  4189  000E5A  2B91               	incf	(printf@val+1)& (0+255),f,b
  4190                           
  4191                           ; BSR set to: 0
  4192                           ;doprnt.c: 1264: }
  4193                           ;doprnt.c: 1266: }
  4194  000E5C  D04A               	goto	l4320
  4195  000E5E                     l4286:
  4196                           
  4197                           ; BSR set to: 0
  4198                           ;doprnt.c: 1268: else
  4199                           ;doprnt.c: 1273: {
  4200                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4201  000E5E  C08D  FFD9         	movff	printf@ap,fsr2l
  4202  000E62  C08E  FFDA         	movff	printf@ap+1,fsr2h
  4203  000E66  CFDE F090          	movff	postinc2,printf@val
  4204  000E6A  CFDD F091          	movff	postdec2,printf@val+1
  4205                           
  4206                           ; BSR set to: 0
  4207  000E6E  0E02               	movlw	2
  4208  000E70  0100               	movlb	0	; () banked
  4209  000E72  278D               	addwf	printf@ap& (0+255),f,b
  4210  000E74  0E00               	movlw	0
  4211  000E76  238E               	addwfc	(printf@ap+1)& (0+255),f,b
  4212                           
  4213                           ; BSR set to: 0
  4214                           ;doprnt.c: 1287: }
  4215                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  4216  000E78  D03C               	goto	l4320
  4217  000E7A                     l4290:
  4218                           
  4219                           ; BSR set to: 0
  4220                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4221  000E7A  0E01               	movlw	1
  4222  000E7C  0100               	movlb	0	; () banked
  4223  000E7E  6F95               	movwf	printf@c& (0+255),b
  4224  000E80                     l4292:
  4225                           
  4226                           ; BSR set to: 0
  4227  000E80  0E05               	movlw	5
  4228  000E82  0100               	movlb	0	; () banked
  4229  000E84  1995               	xorwf	printf@c& (0+255),w,b
  4230  000E86  B4D8               	btfsc	status,2,c
  4231  000E88  D03D               	goto	l4322
  4232                           
  4233                           ; BSR set to: 0
  4234                           ;doprnt.c: 1306: if(val < dpowers[c])
  4235                           
  4236                           ; BSR set to: 0
  4237                           
  4238                           ; BSR set to: 0
  4239  000E8A  0100               	movlb	0	; () banked
  4240  000E8C  5195               	movf	printf@c& (0+255),w,b
  4241  000E8E  0D02               	mullw	2
  4242  000E90  0E68               	movlw	low _dpowers
  4243  000E92  24F3               	addwf	prodl,w,c
  4244  000E94  6EF6               	movwf	tblptrl,c
  4245  000E96  0EFE               	movlw	high _dpowers
  4246  000E98  20F4               	addwfc	prodh,w,c
  4247  000E9A  6EF7               	movwf	tblptrh,c
  4248  000E9C                     	if	0	;There are less than 3 active tblptr bytes
  4249  000E9C                     	endif
  4250  000E9C  0009               	tblrd		*+
  4251  000E9E  50F5               	movf	tablat,w,c
  4252  000EA0  0100               	movlb	0	; () banked
  4253  000EA2  5D90               	subwf	printf@val& (0+255),w,b
  4254  000EA4  0009               	tblrd		*+
  4255  000EA6  50F5               	movf	tablat,w,c
  4256  000EA8  0100               	movlb	0	; () banked
  4257  000EAA  5991               	subwfb	(printf@val+1)& (0+255),w,b
  4258  000EAC  A0D8               	btfss	status,0,c
  4259  000EAE  D02A               	goto	l4322
  4260                           
  4261                           ; BSR set to: 0
  4262                           
  4263                           ; BSR set to: 0
  4264                           
  4265                           ; BSR set to: 0
  4266                           ;doprnt.c: 1307: break;
  4267  000EB0  0100               	movlb	0	; () banked
  4268  000EB2  2B95               	incf	printf@c& (0+255),f,b
  4269  000EB4  D7E5               	goto	l4292
  4270  000EB6                     l4304:
  4271                           
  4272                           ; BSR set to: 0
  4273                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  4274  000EB6  0E01               	movlw	1
  4275  000EB8  0100               	movlb	0	; () banked
  4276  000EBA  6F95               	movwf	printf@c& (0+255),b
  4277  000EBC                     l4306:
  4278                           
  4279                           ; BSR set to: 0
  4280  000EBC  0E04               	movlw	4
  4281  000EBE  0100               	movlb	0	; () banked
  4282  000EC0  1995               	xorwf	printf@c& (0+255),w,b
  4283  000EC2  B4D8               	btfsc	status,2,c
  4284  000EC4  D01F               	goto	l4322
  4285                           
  4286                           ; BSR set to: 0
  4287                           ;doprnt.c: 1317: if(val < hexpowers[c])
  4288                           
  4289                           ; BSR set to: 0
  4290                           
  4291                           ; BSR set to: 0
  4292  000EC6  0100               	movlb	0	; () banked
  4293  000EC8  5195               	movf	printf@c& (0+255),w,b
  4294  000ECA  0D02               	mullw	2
  4295  000ECC  0E72               	movlw	low _hexpowers
  4296  000ECE  24F3               	addwf	prodl,w,c
  4297  000ED0  6EF6               	movwf	tblptrl,c
  4298  000ED2  0EFE               	movlw	high _hexpowers
  4299  000ED4  20F4               	addwfc	prodh,w,c
  4300  000ED6  6EF7               	movwf	tblptrh,c
  4301  000ED8                     	if	0	;There are less than 3 active tblptr bytes
  4302  000ED8                     	endif
  4303  000ED8  0009               	tblrd		*+
  4304  000EDA  50F5               	movf	tablat,w,c
  4305  000EDC  0100               	movlb	0	; () banked
  4306  000EDE  5D90               	subwf	printf@val& (0+255),w,b
  4307  000EE0  0009               	tblrd		*+
  4308  000EE2  50F5               	movf	tablat,w,c
  4309  000EE4  0100               	movlb	0	; () banked
  4310  000EE6  5991               	subwfb	(printf@val+1)& (0+255),w,b
  4311  000EE8  A0D8               	btfss	status,0,c
  4312  000EEA  D00C               	goto	l4322
  4313                           
  4314                           ; BSR set to: 0
  4315                           
  4316                           ; BSR set to: 0
  4317                           
  4318                           ; BSR set to: 0
  4319                           ;doprnt.c: 1318: break;
  4320  000EEC  0100               	movlb	0	; () banked
  4321  000EEE  2B95               	incf	printf@c& (0+255),f,b
  4322  000EF0  D7E5               	goto	l4306
  4323  000EF2                     l4320:
  4324                           
  4325                           ; BSR set to: 0
  4326  000EF2  0100               	movlb	0	; () banked
  4327  000EF4  5192               	movf	printf@flag& (0+255),w,b
  4328  000EF6  0B80               	andlw	128
  4329                           
  4330                           ; Switch size 1, requested type "space"
  4331                           ; Number of cases is 2, Range of values is 0 to 128
  4332                           ; switch strategies available:
  4333                           ; Name         Instructions Cycles
  4334                           ; simple_byte            7     4 (average)
  4335                           ;	Chosen strategy is simple_byte
  4336  000EF8  0A00               	xorlw	0	; case 0
  4337  000EFA  B4D8               	btfsc	status,2,c
  4338  000EFC  D7BE               	goto	l4290
  4339  000EFE  0A80               	xorlw	128	; case 128
  4340  000F00  B4D8               	btfsc	status,2,c
  4341  000F02  D7D9               	goto	l4304
  4342  000F04                     l4322:
  4343                           
  4344                           ; BSR set to: 0
  4345                           ;doprnt.c: 1345: if(width && flag & 0x03)
  4346  000F04  0100               	movlb	0	; () banked
  4347  000F06  5193               	movf	printf@width& (0+255),w,b
  4348  000F08  0100               	movlb	0	; () banked
  4349  000F0A  1194               	iorwf	(printf@width+1)& (0+255),w,b
  4350  000F0C  B4D8               	btfsc	status,2,c
  4351  000F0E  D00B               	goto	l4328
  4352                           
  4353                           ; BSR set to: 0
  4354  000F10  C092  F088         	movff	printf@flag,??_printf
  4355  000F14  0E03               	movlw	3
  4356  000F16  0100               	movlb	0	; () banked
  4357  000F18  1788               	andwf	??_printf& (0+255),f,b
  4358  000F1A  B4D8               	btfsc	status,2,c
  4359  000F1C  D004               	goto	l4328
  4360                           
  4361                           ; BSR set to: 0
  4362                           ;doprnt.c: 1346: width--;
  4363  000F1E  0100               	movlb	0	; () banked
  4364  000F20  0793               	decf	printf@width& (0+255),f,b
  4365  000F22  A0D8               	btfss	status,0,c
  4366  000F24  0794               	decf	(printf@width+1)& (0+255),f,b
  4367  000F26                     l4328:
  4368                           
  4369                           ; BSR set to: 0
  4370                           ;doprnt.c: 1381: if(width > c)
  4371  000F26  0E80               	movlw	128
  4372  000F28  0100               	movlb	0	; () banked
  4373  000F2A  BF95               	btfsc	printf@c& (0+255),7,b
  4374  000F2C  0E7F               	movlw	127
  4375  000F2E  0100               	movlb	0	; () banked
  4376  000F30  6F88               	movwf	??_printf& (0+255),b
  4377  000F32  0100               	movlb	0	; () banked
  4378  000F34  5193               	movf	printf@width& (0+255),w,b
  4379  000F36  0100               	movlb	0	; () banked
  4380  000F38  5D95               	subwf	printf@c& (0+255),w,b
  4381  000F3A  0100               	movlb	0	; () banked
  4382  000F3C  5194               	movf	(printf@width+1)& (0+255),w,b
  4383  000F3E  0A80               	xorlw	128
  4384  000F40  0100               	movlb	0	; () banked
  4385  000F42  5988               	subwfb	??_printf& (0+255),w,b
  4386  000F44  B0D8               	btfsc	status,0,c
  4387  000F46  D00B               	goto	l4332
  4388                           
  4389                           ; BSR set to: 0
  4390                           ;doprnt.c: 1382: width -= c;
  4391  000F48  0100               	movlb	0	; () banked
  4392  000F4A  5195               	movf	printf@c& (0+255),w,b
  4393  000F4C  0100               	movlb	0	; () banked
  4394  000F4E  5F93               	subwf	printf@width& (0+255),f,b
  4395  000F50  0E00               	movlw	0
  4396  000F52  0100               	movlb	0	; () banked
  4397  000F54  BF95               	btfsc	printf@c& (0+255),7,b
  4398  000F56  0EFF               	movlw	255
  4399  000F58  0100               	movlb	0	; () banked
  4400  000F5A  5B94               	subwfb	(printf@width+1)& (0+255),f,b
  4401  000F5C  D005               	goto	l4334
  4402  000F5E                     l4332:
  4403                           
  4404                           ; BSR set to: 0
  4405                           ;doprnt.c: 1383: else
  4406                           ;doprnt.c: 1384: width = 0;
  4407  000F5E  0E00               	movlw	0
  4408  000F60  0100               	movlb	0	; () banked
  4409  000F62  6F94               	movwf	(printf@width+1)& (0+255),b
  4410  000F64  0E00               	movlw	0
  4411  000F66  6F93               	movwf	printf@width& (0+255),b
  4412  000F68                     l4334:
  4413                           
  4414                           ; BSR set to: 0
  4415                           ;doprnt.c: 1387: if(flag & 0x04) {
  4416  000F68  0100               	movlb	0	; () banked
  4417  000F6A  A592               	btfss	printf@flag& (0+255),2,b
  4418  000F6C  D018               	goto	l4346
  4419                           
  4420                           ; BSR set to: 0
  4421                           ;doprnt.c: 1392: if(flag & 0x03)
  4422  000F6E  C092  F088         	movff	printf@flag,??_printf
  4423  000F72  0E03               	movlw	3
  4424  000F74  0100               	movlb	0	; () banked
  4425  000F76  1788               	andwf	??_printf& (0+255),f,b
  4426  000F78  B4D8               	btfsc	status,2,c
  4427  000F7A  D003               	goto	l4340
  4428                           
  4429                           ; BSR set to: 0
  4430                           ;doprnt.c: 1393: (putch('-') );
  4431  000F7C  0E2D               	movlw	45
  4432  000F7E  EC0E  F00F         	call	_putch
  4433  000F82                     l4340:
  4434                           
  4435                           ;doprnt.c: 1415: if(width)
  4436  000F82  0100               	movlb	0	; () banked
  4437  000F84  5193               	movf	printf@width& (0+255),w,b
  4438  000F86  0100               	movlb	0	; () banked
  4439  000F88  1194               	iorwf	(printf@width+1)& (0+255),w,b
  4440  000F8A  B4D8               	btfsc	status,2,c
  4441  000F8C  D025               	goto	l4356
  4442                           
  4443                           ; BSR set to: 0
  4444                           ;doprnt.c: 1417: (putch('0') );
  4445                           
  4446                           ; BSR set to: 0
  4447                           
  4448                           ;doprnt.c: 1416: do
  4449  000F8E  0E30               	movlw	48
  4450  000F90  EC0E  F00F         	call	_putch
  4451                           
  4452                           ;doprnt.c: 1418: while(--width);
  4453  000F94  0100               	movlb	0	; () banked
  4454  000F96  0793               	decf	printf@width& (0+255),f,b
  4455  000F98  A0D8               	btfss	status,0,c
  4456  000F9A  0794               	decf	(printf@width+1)& (0+255),f,b
  4457  000F9C  D7F2               	goto	l4340
  4458  000F9E                     l4346:
  4459                           
  4460                           ; BSR set to: 0
  4461                           ;doprnt.c: 1422: {
  4462                           ;doprnt.c: 1424: if(width
  4463                           ;doprnt.c: 1428: )
  4464  000F9E  0100               	movlb	0	; () banked
  4465  000FA0  5193               	movf	printf@width& (0+255),w,b
  4466  000FA2  0100               	movlb	0	; () banked
  4467  000FA4  1194               	iorwf	(printf@width+1)& (0+255),w,b
  4468  000FA6  B4D8               	btfsc	status,2,c
  4469  000FA8  D00D               	goto	l4352
  4470  000FAA                     l4348:
  4471                           
  4472                           ; BSR set to: 0
  4473                           ;doprnt.c: 1430: (putch(' ') );
  4474  000FAA  0E20               	movlw	32
  4475  000FAC  EC0E  F00F         	call	_putch
  4476                           
  4477                           ;doprnt.c: 1431: while(--width);
  4478  000FB0  0100               	movlb	0	; () banked
  4479  000FB2  0793               	decf	printf@width& (0+255),f,b
  4480  000FB4  A0D8               	btfss	status,0,c
  4481  000FB6  0794               	decf	(printf@width+1)& (0+255),f,b
  4482  000FB8  0100               	movlb	0	; () banked
  4483  000FBA  5193               	movf	printf@width& (0+255),w,b
  4484  000FBC  0100               	movlb	0	; () banked
  4485  000FBE  1194               	iorwf	(printf@width+1)& (0+255),w,b
  4486  000FC0  A4D8               	btfss	status,2,c
  4487  000FC2  D7F3               	goto	l4348
  4488  000FC4                     l4352:
  4489                           
  4490                           ; BSR set to: 0
  4491                           ;doprnt.c: 1438: if(flag & 0x03)
  4492  000FC4  C092  F088         	movff	printf@flag,??_printf
  4493  000FC8  0E03               	movlw	3
  4494  000FCA  0100               	movlb	0	; () banked
  4495  000FCC  1788               	andwf	??_printf& (0+255),f,b
  4496  000FCE  B4D8               	btfsc	status,2,c
  4497  000FD0  D003               	goto	l4356
  4498                           
  4499                           ; BSR set to: 0
  4500                           ;doprnt.c: 1439: (putch('-') );
  4501  000FD2  0E2D               	movlw	45
  4502  000FD4  EC0E  F00F         	call	_putch
  4503  000FD8                     l4356:
  4504                           
  4505                           ;doprnt.c: 1469: }
  4506                           ;doprnt.c: 1472: prec = c;
  4507  000FD8  C095  F08F         	movff	printf@c,printf@prec
  4508                           
  4509                           ;doprnt.c: 1474: while(prec--) {
  4510  000FDC  D057               	goto	l4370
  4511  000FDE                     l4358:
  4512                           
  4513                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4514  000FDE  0100               	movlb	0	; () banked
  4515  000FE0  518F               	movf	printf@prec& (0+255),w,b
  4516  000FE2  0D02               	mullw	2
  4517  000FE4  0E68               	movlw	low _dpowers
  4518  000FE6  24F3               	addwf	prodl,w,c
  4519  000FE8  6EF6               	movwf	tblptrl,c
  4520  000FEA  0EFE               	movlw	high _dpowers
  4521  000FEC  20F4               	addwfc	prodh,w,c
  4522  000FEE  6EF7               	movwf	tblptrh,c
  4523  000FF0                     	if	0	;There are less than 3 active tblptr bytes
  4524  000FF0                     	endif
  4525  000FF0  0009               	tblrd		*+
  4526  000FF2  CFF5 F036          	movff	tablat,___lwdiv@divisor
  4527  000FF6  000A               	tblrd		*-
  4528  000FF8  CFF5 F037          	movff	tablat,___lwdiv@divisor+1
  4529  000FFC  C090  F034         	movff	printf@val,___lwdiv@dividend
  4530  001000  C091  F035         	movff	printf@val+1,___lwdiv@dividend+1
  4531  001004  EC76  F00D         	call	___lwdiv	;wreg free
  4532  001008  C034  F03B         	movff	?___lwdiv,___lwmod@dividend
  4533  00100C  C035  F03C         	movff	?___lwdiv+1,___lwmod@dividend+1
  4534  001010  0E00               	movlw	0
  4535  001012  6E3E               	movwf	___lwmod@divisor+1,c
  4536  001014  0E0A               	movlw	10
  4537  001016  6E3D               	movwf	___lwmod@divisor,c
  4538  001018  EC39  F00E         	call	___lwmod	;wreg free
  4539  00101C  503B               	movf	?___lwmod,w,c
  4540  00101E  0F30               	addlw	48
  4541  001020  0100               	movlb	0	; () banked
  4542  001022  6F95               	movwf	printf@c& (0+255),b
  4543                           
  4544                           ;doprnt.c: 1491: break;
  4545  001024  D02F               	goto	l4368
  4546  001026                     l4360:
  4547                           
  4548                           ; BSR set to: 0
  4549                           ;doprnt.c: 1499: {
  4550                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  4551  001026  C090  F034         	movff	printf@val,___lwdiv@dividend
  4552  00102A  C091  F035         	movff	printf@val+1,___lwdiv@dividend+1
  4553  00102E  0100               	movlb	0	; () banked
  4554  001030  518F               	movf	printf@prec& (0+255),w,b
  4555  001032  0D02               	mullw	2
  4556  001034  0E72               	movlw	low _hexpowers
  4557  001036  24F3               	addwf	prodl,w,c
  4558  001038  6EF6               	movwf	tblptrl,c
  4559  00103A  0EFE               	movlw	high _hexpowers
  4560  00103C  20F4               	addwfc	prodh,w,c
  4561  00103E  6EF7               	movwf	tblptrh,c
  4562  001040                     	if	0	;There are less than 3 active tblptr bytes
  4563  001040                     	endif
  4564  001040  0009               	tblrd		*+
  4565  001042  CFF5 F036          	movff	tablat,___lwdiv@divisor
  4566  001046  000A               	tblrd		*-
  4567  001048  CFF5 F037          	movff	tablat,___lwdiv@divisor+1
  4568  00104C  EC76  F00D         	call	___lwdiv	;wreg free
  4569  001050  5034               	movf	?___lwdiv,w,c
  4570  001052  0B0F               	andlw	15
  4571  001054  0100               	movlb	0	; () banked
  4572  001056  6F8C               	movwf	printf@idx& (0+255),b
  4573                           
  4574                           ; BSR set to: 0
  4575                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  4576  001058  0100               	movlb	0	; () banked
  4577  00105A  518C               	movf	printf@idx& (0+255),w,b
  4578  00105C  0D01               	mullw	1
  4579  00105E  0EFF               	movlw	low STR_24
  4580  001060  24F3               	addwf	prodl,w,c
  4581  001062  6EF6               	movwf	tblptrl,c
  4582  001064  0EFE               	movlw	high STR_24
  4583  001066  20F4               	addwfc	prodh,w,c
  4584  001068  6EF7               	movwf	tblptrh,c
  4585  00106A                     	if	0	;There are less than 3 active tblptr bytes
  4586  00106A                     	endif
  4587  00106A  0008               	tblrd		*
  4588  00106C  CFF5 F095          	movff	tablat,printf@c
  4589                           
  4590                           ; BSR set to: 0
  4591                           ;doprnt.c: 1523: }
  4592                           
  4593                           ;doprnt.c: 1508: }
  4594                           ;doprnt.c: 1510: break;
  4595  001070  D009               	goto	l4368
  4596  001072                     l4366:
  4597  001072  0100               	movlb	0	; () banked
  4598  001074  5192               	movf	printf@flag& (0+255),w,b
  4599  001076  0B80               	andlw	128
  4600                           
  4601                           ; Switch size 1, requested type "space"
  4602                           ; Number of cases is 2, Range of values is 0 to 128
  4603                           ; switch strategies available:
  4604                           ; Name         Instructions Cycles
  4605                           ; simple_byte            7     4 (average)
  4606                           ;	Chosen strategy is simple_byte
  4607  001078  0A00               	xorlw	0	; case 0
  4608  00107A  B4D8               	btfsc	status,2,c
  4609  00107C  D7B0               	goto	l4358
  4610  00107E  0A80               	xorlw	128	; case 128
  4611  001080  B4D8               	btfsc	status,2,c
  4612  001082  D7D1               	goto	l4360
  4613  001084                     l4368:
  4614                           
  4615                           ; BSR set to: 0
  4616                           ;doprnt.c: 1524: (putch(c) );
  4617  001084  0100               	movlb	0	; () banked
  4618  001086  5195               	movf	printf@c& (0+255),w,b
  4619  001088  EC0E  F00F         	call	_putch
  4620  00108C                     l4370:
  4621  00108C  0100               	movlb	0	; () banked
  4622  00108E  078F               	decf	printf@prec& (0+255),f,b
  4623  001090  0100               	movlb	0	; () banked
  4624  001092  298F               	incf	printf@prec& (0+255),w,b
  4625  001094  A4D8               	btfss	status,2,c
  4626  001096  D7ED               	goto	l4366
  4627  001098                     l4372:
  4628  001098  C080  FFF6         	movff	printf@f,tblptrl
  4629  00109C  C081  FFF7         	movff	printf@f+1,tblptrh
  4630  0010A0  0100               	movlb	0	; () banked
  4631  0010A2  4B80               	infsnz	printf@f& (0+255),f,b
  4632  0010A4  2B81               	incf	(printf@f+1)& (0+255),f,b
  4633  0010A6                     	if	0	;tblptru may be non-zero
  4634  0010A6                     	endif
  4635  0010A6                     	if	0	;tblptru may be non-zero
  4636  0010A6                     	endif
  4637  0010A6  0008               	tblrd		*
  4638  0010A8  CFF5 F095          	movff	tablat,printf@c
  4639  0010AC  0100               	movlb	0	; () banked
  4640  0010AE  5195               	movf	printf@c& (0+255),w,b
  4641  0010B0  B4D8               	btfsc	status,2,c
  4642  0010B2  0012               	return	
  4643  0010B4  D631               	goto	l4246
  4644  0010B6                     __end_of_printf:
  4645                           	opt stack 0
  4646                           tblptru	equ	0xFF8
  4647                           tblptrh	equ	0xFF7
  4648                           tblptrl	equ	0xFF6
  4649                           tablat	equ	0xFF5
  4650                           prodh	equ	0xFF4
  4651                           prodl	equ	0xFF3
  4652                           intcon	equ	0xFF2
  4653                           intcon3	equ	0xFF0
  4654                           postinc0	equ	0xFEE
  4655                           wreg	equ	0xFE8
  4656                           indf2	equ	0xFDF
  4657                           postinc2	equ	0xFDE
  4658                           postdec2	equ	0xFDD
  4659                           fsr2h	equ	0xFDA
  4660                           fsr2l	equ	0xFD9
  4661                           status	equ	0xFD8
  4662                           
  4663 ;; *************** function _putch *****************
  4664 ;; Defined at:
  4665 ;;		line 23 in file "../lcd.c"
  4666 ;; Parameters:    Size  Location     Type
  4667 ;;  data            1    wreg     unsigned char 
  4668 ;; Auto vars:     Size  Location     Type
  4669 ;;  data            1   53[COMRAM] unsigned char 
  4670 ;; Return value:  Size  Location     Type
  4671 ;;                  1    wreg      void 
  4672 ;; Registers used:
  4673 ;;		wreg, status,2, status,0, cstack
  4674 ;; Tracked objects:
  4675 ;;		On entry : 0/0
  4676 ;;		On exit  : 0/0
  4677 ;;		Unchanged: 0/0
  4678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4679 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4680 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4681 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4682 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4683 ;;Total ram usage:        1 bytes
  4684 ;; Hardware stack levels used:    1
  4685 ;; Hardware stack levels required when called:    6
  4686 ;; This function calls:
  4687 ;;		_lcdNibble
  4688 ;; This function is called by:
  4689 ;;		_printf
  4690 ;; This function uses a non-reentrant model
  4691 ;;
  4692                           
  4693                           	psect	text8
  4694  001E1C                     __ptext8:
  4695                           	opt stack 0
  4696  001E1C                     _putch:
  4697                           	opt stack 23
  4698                           
  4699                           ;incstack = 0
  4700                           ;putch@data stored from wreg
  4701  001E1C  6E36               	movwf	putch@data,c
  4702                           
  4703                           ;lcd.c: 24: LATDbits.LATD2 = 1;
  4704  001E1E  848C               	bsf	3980,2,c	;volatile
  4705                           
  4706                           ;lcd.c: 25: lcdNibble(data);
  4707  001E20  5036               	movf	putch@data,w,c
  4708  001E22  ECC8  F00D         	call	_lcdNibble
  4709  001E26  0012               	return		;funcret
  4710  001E28                     __end_of_putch:
  4711                           	opt stack 0
  4712                           tblptru	equ	0xFF8
  4713                           tblptrh	equ	0xFF7
  4714                           tblptrl	equ	0xFF6
  4715                           tablat	equ	0xFF5
  4716                           prodh	equ	0xFF4
  4717                           prodl	equ	0xFF3
  4718                           intcon	equ	0xFF2
  4719                           intcon3	equ	0xFF0
  4720                           postinc0	equ	0xFEE
  4721                           wreg	equ	0xFE8
  4722                           indf2	equ	0xFDF
  4723                           postinc2	equ	0xFDE
  4724                           postdec2	equ	0xFDD
  4725                           fsr2h	equ	0xFDA
  4726                           fsr2l	equ	0xFD9
  4727                           status	equ	0xFD8
  4728                           
  4729 ;; *************** function _isdigit *****************
  4730 ;; Defined at:
  4731 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  4732 ;; Parameters:    Size  Location     Type
  4733 ;;  c               1    wreg     unsigned char 
  4734 ;; Auto vars:     Size  Location     Type
  4735 ;;  c               1   53[COMRAM] unsigned char 
  4736 ;; Return value:  Size  Location     Type
  4737 ;;		None               void
  4738 ;; Registers used:
  4739 ;;		wreg, status,2, status,0
  4740 ;; Tracked objects:
  4741 ;;		On entry : 0/0
  4742 ;;		On exit  : 0/0
  4743 ;;		Unchanged: 0/0
  4744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4746 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4747 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4748 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4749 ;;Total ram usage:        3 bytes
  4750 ;; Hardware stack levels used:    1
  4751 ;; Hardware stack levels required when called:    5
  4752 ;; This function calls:
  4753 ;;		Nothing
  4754 ;; This function is called by:
  4755 ;;		_printf
  4756 ;; This function uses a non-reentrant model
  4757 ;;
  4758                           
  4759                           	psect	text9
  4760  001DA0                     __ptext9:
  4761                           	opt stack 0
  4762  001DA0                     _isdigit:
  4763                           	opt stack 24
  4764                           
  4765                           ;incstack = 0
  4766                           ;isdigit@c stored from wreg
  4767  001DA0  6E36               	movwf	isdigit@c,c
  4768  001DA2  0E00               	movlw	0
  4769  001DA4  6E35               	movwf	_isdigit$936,c
  4770  001DA6  0E3A               	movlw	58
  4771  001DA8  6036               	cpfslt	isdigit@c,c
  4772  001DAA  D005               	goto	l2868
  4773  001DAC  0E2F               	movlw	47
  4774  001DAE  6436               	cpfsgt	isdigit@c,c
  4775  001DB0  D002               	goto	l2868
  4776  001DB2  0E01               	movlw	1
  4777  001DB4  6E35               	movwf	_isdigit$936,c
  4778  001DB6                     l2868:
  4779  001DB6  C035  F034         	movff	_isdigit$936,??_isdigit
  4780  001DBA  3034               	rrcf	??_isdigit,w,c
  4781  001DBC  0012               	return	
  4782  001DBE                     __end_of_isdigit:
  4783                           	opt stack 0
  4784                           tblptru	equ	0xFF8
  4785                           tblptrh	equ	0xFF7
  4786                           tblptrl	equ	0xFF6
  4787                           tablat	equ	0xFF5
  4788                           prodh	equ	0xFF4
  4789                           prodl	equ	0xFF3
  4790                           intcon	equ	0xFF2
  4791                           intcon3	equ	0xFF0
  4792                           postinc0	equ	0xFEE
  4793                           wreg	equ	0xFE8
  4794                           indf2	equ	0xFDF
  4795                           postinc2	equ	0xFDE
  4796                           postdec2	equ	0xFDD
  4797                           fsr2h	equ	0xFDA
  4798                           fsr2l	equ	0xFD9
  4799                           status	equ	0xFD8
  4800                           
  4801 ;; *************** function ___wmul *****************
  4802 ;; Defined at:
  4803 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  4804 ;; Parameters:    Size  Location     Type
  4805 ;;  multiplier      2   51[COMRAM] unsigned int 
  4806 ;;  multiplicand    2   53[COMRAM] unsigned int 
  4807 ;; Auto vars:     Size  Location     Type
  4808 ;;  product         2   55[COMRAM] unsigned int 
  4809 ;; Return value:  Size  Location     Type
  4810 ;;                  2   51[COMRAM] unsigned int 
  4811 ;; Registers used:
  4812 ;;		wreg, status,2, status,0, prodl, prodh
  4813 ;; Tracked objects:
  4814 ;;		On entry : 0/0
  4815 ;;		On exit  : 0/0
  4816 ;;		Unchanged: 0/0
  4817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4818 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4819 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4820 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4821 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4822 ;;Total ram usage:        6 bytes
  4823 ;; Hardware stack levels used:    1
  4824 ;; Hardware stack levels required when called:    5
  4825 ;; This function calls:
  4826 ;;		Nothing
  4827 ;; This function is called by:
  4828 ;;		_printf
  4829 ;; This function uses a non-reentrant model
  4830 ;;
  4831                           
  4832                           	psect	text10
  4833  001D2E                     __ptext10:
  4834                           	opt stack 0
  4835  001D2E                     ___wmul:
  4836                           	opt stack 24
  4837                           
  4838                           ;incstack = 0
  4839  001D2E  5034               	movf	___wmul@multiplier,w,c
  4840  001D30  0236               	mulwf	___wmul@multiplicand,c
  4841  001D32  CFF3 F038          	movff	prodl,___wmul@product
  4842  001D36  CFF4 F039          	movff	prodh,___wmul@product+1
  4843  001D3A  5034               	movf	___wmul@multiplier,w,c
  4844  001D3C  0237               	mulwf	___wmul@multiplicand+1,c
  4845  001D3E  50F3               	movf	prodl,w,c
  4846  001D40  2639               	addwf	___wmul@product+1,f,c
  4847  001D42  5035               	movf	___wmul@multiplier+1,w,c
  4848  001D44  0236               	mulwf	___wmul@multiplicand,c
  4849  001D46  50F3               	movf	prodl,w,c
  4850  001D48  2639               	addwf	___wmul@product+1,f,c
  4851  001D4A  C038  F034         	movff	___wmul@product,?___wmul
  4852  001D4E  C039  F035         	movff	___wmul@product+1,?___wmul+1
  4853  001D52  0012               	return	
  4854  001D54                     __end_of___wmul:
  4855                           	opt stack 0
  4856                           tblptru	equ	0xFF8
  4857                           tblptrh	equ	0xFF7
  4858                           tblptrl	equ	0xFF6
  4859                           tablat	equ	0xFF5
  4860                           prodh	equ	0xFF4
  4861                           prodl	equ	0xFF3
  4862                           intcon	equ	0xFF2
  4863                           intcon3	equ	0xFF0
  4864                           postinc0	equ	0xFEE
  4865                           wreg	equ	0xFE8
  4866                           indf2	equ	0xFDF
  4867                           postinc2	equ	0xFDE
  4868                           postdec2	equ	0xFDD
  4869                           fsr2h	equ	0xFDA
  4870                           fsr2l	equ	0xFD9
  4871                           status	equ	0xFD8
  4872                           
  4873 ;; *************** function ___lwmod *****************
  4874 ;; Defined at:
  4875 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  4876 ;; Parameters:    Size  Location     Type
  4877 ;;  dividend        2   58[COMRAM] unsigned int 
  4878 ;;  divisor         2   60[COMRAM] unsigned int 
  4879 ;; Auto vars:     Size  Location     Type
  4880 ;;  counter         1   62[COMRAM] unsigned char 
  4881 ;; Return value:  Size  Location     Type
  4882 ;;                  2   58[COMRAM] unsigned int 
  4883 ;; Registers used:
  4884 ;;		wreg, status,2, status,0
  4885 ;; Tracked objects:
  4886 ;;		On entry : 0/0
  4887 ;;		On exit  : 0/0
  4888 ;;		Unchanged: 0/0
  4889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4890 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4891 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4892 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4893 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4894 ;;Total ram usage:        5 bytes
  4895 ;; Hardware stack levels used:    1
  4896 ;; Hardware stack levels required when called:    5
  4897 ;; This function calls:
  4898 ;;		Nothing
  4899 ;; This function is called by:
  4900 ;;		_printf
  4901 ;; This function uses a non-reentrant model
  4902 ;;
  4903                           
  4904                           	psect	text11
  4905  001C72                     __ptext11:
  4906                           	opt stack 0
  4907  001C72                     ___lwmod:
  4908                           	opt stack 24
  4909                           
  4910                           ;incstack = 0
  4911  001C72  503D               	movf	___lwmod@divisor,w,c
  4912  001C74  103E               	iorwf	___lwmod@divisor+1,w,c
  4913  001C76  B4D8               	btfsc	status,2,c
  4914  001C78  D018               	goto	l917
  4915  001C7A  0E01               	movlw	1
  4916  001C7C  6E3F               	movwf	___lwmod@counter,c
  4917  001C7E  D004               	goto	l3008
  4918  001C80                     l3006:
  4919  001C80  90D8               	bcf	status,0,c
  4920  001C82  363D               	rlcf	___lwmod@divisor,f,c
  4921  001C84  363E               	rlcf	___lwmod@divisor+1,f,c
  4922  001C86  2A3F               	incf	___lwmod@counter,f,c
  4923  001C88                     l3008:
  4924  001C88  AE3E               	btfss	___lwmod@divisor+1,7,c
  4925  001C8A  D7FA               	goto	l3006
  4926  001C8C                     l3010:
  4927  001C8C  503D               	movf	___lwmod@divisor,w,c
  4928  001C8E  5C3B               	subwf	___lwmod@dividend,w,c
  4929  001C90  503E               	movf	___lwmod@divisor+1,w,c
  4930  001C92  583C               	subwfb	___lwmod@dividend+1,w,c
  4931  001C94  A0D8               	btfss	status,0,c
  4932  001C96  D004               	goto	l3014
  4933  001C98  503D               	movf	___lwmod@divisor,w,c
  4934  001C9A  5E3B               	subwf	___lwmod@dividend,f,c
  4935  001C9C  503E               	movf	___lwmod@divisor+1,w,c
  4936  001C9E  5A3C               	subwfb	___lwmod@dividend+1,f,c
  4937  001CA0                     l3014:
  4938  001CA0  90D8               	bcf	status,0,c
  4939  001CA2  323E               	rrcf	___lwmod@divisor+1,f,c
  4940  001CA4  323D               	rrcf	___lwmod@divisor,f,c
  4941  001CA6  2E3F               	decfsz	___lwmod@counter,f,c
  4942  001CA8  D7F1               	goto	l3010
  4943  001CAA                     l917:
  4944  001CAA  C03B  F03B         	movff	___lwmod@dividend,?___lwmod
  4945  001CAE  C03C  F03C         	movff	___lwmod@dividend+1,?___lwmod+1
  4946  001CB2  0012               	return		;funcret
  4947  001CB4                     __end_of___lwmod:
  4948                           	opt stack 0
  4949                           tblptru	equ	0xFF8
  4950                           tblptrh	equ	0xFF7
  4951                           tblptrl	equ	0xFF6
  4952                           tablat	equ	0xFF5
  4953                           prodh	equ	0xFF4
  4954                           prodl	equ	0xFF3
  4955                           intcon	equ	0xFF2
  4956                           intcon3	equ	0xFF0
  4957                           postinc0	equ	0xFEE
  4958                           wreg	equ	0xFE8
  4959                           indf2	equ	0xFDF
  4960                           postinc2	equ	0xFDE
  4961                           postdec2	equ	0xFDD
  4962                           fsr2h	equ	0xFDA
  4963                           fsr2l	equ	0xFD9
  4964                           status	equ	0xFD8
  4965                           
  4966 ;; *************** function ___lwdiv *****************
  4967 ;; Defined at:
  4968 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  4969 ;; Parameters:    Size  Location     Type
  4970 ;;  dividend        2   51[COMRAM] unsigned int 
  4971 ;;  divisor         2   53[COMRAM] unsigned int 
  4972 ;; Auto vars:     Size  Location     Type
  4973 ;;  quotient        2   55[COMRAM] unsigned int 
  4974 ;;  counter         1   57[COMRAM] unsigned char 
  4975 ;; Return value:  Size  Location     Type
  4976 ;;                  2   51[COMRAM] unsigned int 
  4977 ;; Registers used:
  4978 ;;		wreg, status,2, status,0
  4979 ;; Tracked objects:
  4980 ;;		On entry : 0/0
  4981 ;;		On exit  : 0/0
  4982 ;;		Unchanged: 0/0
  4983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4984 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4985 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4986 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4987 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4988 ;;Total ram usage:        7 bytes
  4989 ;; Hardware stack levels used:    1
  4990 ;; Hardware stack levels required when called:    5
  4991 ;; This function calls:
  4992 ;;		Nothing
  4993 ;; This function is called by:
  4994 ;;		_printf
  4995 ;; This function uses a non-reentrant model
  4996 ;;
  4997                           
  4998                           	psect	text12
  4999  001AEC                     __ptext12:
  5000                           	opt stack 0
  5001  001AEC                     ___lwdiv:
  5002                           	opt stack 24
  5003                           
  5004                           ;incstack = 0
  5005  001AEC  0E00               	movlw	0
  5006  001AEE  6E39               	movwf	___lwdiv@quotient+1,c
  5007  001AF0  0E00               	movlw	0
  5008  001AF2  6E38               	movwf	___lwdiv@quotient,c
  5009  001AF4  5036               	movf	___lwdiv@divisor,w,c
  5010  001AF6  1037               	iorwf	___lwdiv@divisor+1,w,c
  5011  001AF8  B4D8               	btfsc	status,2,c
  5012  001AFA  D01C               	goto	l907
  5013  001AFC  0E01               	movlw	1
  5014  001AFE  6E3A               	movwf	___lwdiv@counter,c
  5015  001B00  D004               	goto	l2988
  5016  001B02                     l2986:
  5017  001B02  90D8               	bcf	status,0,c
  5018  001B04  3636               	rlcf	___lwdiv@divisor,f,c
  5019  001B06  3637               	rlcf	___lwdiv@divisor+1,f,c
  5020  001B08  2A3A               	incf	___lwdiv@counter,f,c
  5021  001B0A                     l2988:
  5022  001B0A  AE37               	btfss	___lwdiv@divisor+1,7,c
  5023  001B0C  D7FA               	goto	l2986
  5024  001B0E                     l2990:
  5025  001B0E  90D8               	bcf	status,0,c
  5026  001B10  3638               	rlcf	___lwdiv@quotient,f,c
  5027  001B12  3639               	rlcf	___lwdiv@quotient+1,f,c
  5028  001B14  5036               	movf	___lwdiv@divisor,w,c
  5029  001B16  5C34               	subwf	___lwdiv@dividend,w,c
  5030  001B18  5037               	movf	___lwdiv@divisor+1,w,c
  5031  001B1A  5835               	subwfb	___lwdiv@dividend+1,w,c
  5032  001B1C  A0D8               	btfss	status,0,c
  5033  001B1E  D005               	goto	l2998
  5034  001B20  5036               	movf	___lwdiv@divisor,w,c
  5035  001B22  5E34               	subwf	___lwdiv@dividend,f,c
  5036  001B24  5037               	movf	___lwdiv@divisor+1,w,c
  5037  001B26  5A35               	subwfb	___lwdiv@dividend+1,f,c
  5038  001B28  8038               	bsf	___lwdiv@quotient,0,c
  5039  001B2A                     l2998:
  5040  001B2A  90D8               	bcf	status,0,c
  5041  001B2C  3237               	rrcf	___lwdiv@divisor+1,f,c
  5042  001B2E  3236               	rrcf	___lwdiv@divisor,f,c
  5043  001B30  2E3A               	decfsz	___lwdiv@counter,f,c
  5044  001B32  D7ED               	goto	l2990
  5045  001B34                     l907:
  5046  001B34  C038  F034         	movff	___lwdiv@quotient,?___lwdiv
  5047  001B38  C039  F035         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5048  001B3C  0012               	return		;funcret
  5049  001B3E                     __end_of___lwdiv:
  5050                           	opt stack 0
  5051                           tblptru	equ	0xFF8
  5052                           tblptrh	equ	0xFF7
  5053                           tblptrl	equ	0xFF6
  5054                           tablat	equ	0xFF5
  5055                           prodh	equ	0xFF4
  5056                           prodl	equ	0xFF3
  5057                           intcon	equ	0xFF2
  5058                           intcon3	equ	0xFF0
  5059                           postinc0	equ	0xFEE
  5060                           wreg	equ	0xFE8
  5061                           indf2	equ	0xFDF
  5062                           postinc2	equ	0xFDE
  5063                           postdec2	equ	0xFDD
  5064                           fsr2h	equ	0xFDA
  5065                           fsr2l	equ	0xFD9
  5066                           status	equ	0xFD8
  5067                           
  5068 ;; *************** function _initLCD *****************
  5069 ;; Defined at:
  5070 ;;		line 7 in file "../lcd.c"
  5071 ;; Parameters:    Size  Location     Type
  5072 ;;		None
  5073 ;; Auto vars:     Size  Location     Type
  5074 ;;		None
  5075 ;; Return value:  Size  Location     Type
  5076 ;;                  1    wreg      void 
  5077 ;; Registers used:
  5078 ;;		wreg, status,2, status,0, cstack
  5079 ;; Tracked objects:
  5080 ;;		On entry : 0/0
  5081 ;;		On exit  : 0/0
  5082 ;;		Unchanged: 0/0
  5083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5084 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5085 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5086 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5087 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5088 ;;Total ram usage:        1 bytes
  5089 ;; Hardware stack levels used:    1
  5090 ;; Hardware stack levels required when called:    7
  5091 ;; This function calls:
  5092 ;;		_lcdInst
  5093 ;; This function is called by:
  5094 ;;		_main
  5095 ;; This function uses a non-reentrant model
  5096 ;;
  5097                           
  5098                           	psect	text13
  5099  001C2C                     __ptext13:
  5100                           	opt stack 0
  5101  001C2C                     _initLCD:
  5102                           	opt stack 23
  5103                           
  5104                           ;lcd.c: 8: _delay((unsigned long)((15)*(10000000/4000.0)));
  5105                           
  5106                           ;incstack = 0
  5107  001C2C  0E31               	movlw	49
  5108  001C2E  6E37               	movwf	??_initLCD& (0+255),c
  5109  001C30  0EB2               	movlw	178
  5110  001C32                     u5587:
  5111  001C32  2EE8               	decfsz	wreg,f,c
  5112  001C34  D7FE               	bra	u5587
  5113  001C36  2E37               	decfsz	??_initLCD& (0+255),f,c
  5114  001C38  D7FC               	bra	u5587
  5115  001C3A  D000               	nop2	
  5116                           
  5117                           ;lcd.c: 9: lcdInst(0b00110011);
  5118  001C3C  0E33               	movlw	51
  5119  001C3E  EC14  F00F         	call	_lcdInst
  5120                           
  5121                           ;lcd.c: 10: lcdInst(0b00110010);
  5122  001C42  0E32               	movlw	50
  5123  001C44  EC14  F00F         	call	_lcdInst
  5124                           
  5125                           ;lcd.c: 11: lcdInst(0b00101000);
  5126  001C48  0E28               	movlw	40
  5127  001C4A  EC14  F00F         	call	_lcdInst
  5128                           
  5129                           ;lcd.c: 12: lcdInst(0b00001111);
  5130  001C4E  0E0F               	movlw	15
  5131  001C50  EC14  F00F         	call	_lcdInst
  5132                           
  5133                           ;lcd.c: 13: lcdInst(0b00000110);
  5134  001C54  0E06               	movlw	6
  5135  001C56  EC14  F00F         	call	_lcdInst
  5136                           
  5137                           ;lcd.c: 14: lcdInst(0b00000001);
  5138  001C5A  0E01               	movlw	1
  5139  001C5C  EC14  F00F         	call	_lcdInst
  5140                           
  5141                           ;lcd.c: 15: _delay((unsigned long)((15)*(10000000/4000.0)));
  5142  001C60  0E31               	movlw	49
  5143  001C62  6E37               	movwf	??_initLCD& (0+255),c
  5144  001C64  0EB2               	movlw	178
  5145  001C66                     u5597:
  5146  001C66  2EE8               	decfsz	wreg,f,c
  5147  001C68  D7FE               	bra	u5597
  5148  001C6A  2E37               	decfsz	??_initLCD& (0+255),f,c
  5149  001C6C  D7FC               	bra	u5597
  5150  001C6E  D000               	nop2	
  5151  001C70  0012               	return		;funcret
  5152  001C72                     __end_of_initLCD:
  5153                           	opt stack 0
  5154                           tblptru	equ	0xFF8
  5155                           tblptrh	equ	0xFF7
  5156                           tblptrl	equ	0xFF6
  5157                           tablat	equ	0xFF5
  5158                           prodh	equ	0xFF4
  5159                           prodl	equ	0xFF3
  5160                           intcon	equ	0xFF2
  5161                           intcon3	equ	0xFF0
  5162                           postinc0	equ	0xFEE
  5163                           wreg	equ	0xFE8
  5164                           indf2	equ	0xFDF
  5165                           postinc2	equ	0xFDE
  5166                           postdec2	equ	0xFDD
  5167                           fsr2h	equ	0xFDA
  5168                           fsr2l	equ	0xFD9
  5169                           status	equ	0xFD8
  5170                           
  5171 ;; *************** function _lcdInst *****************
  5172 ;; Defined at:
  5173 ;;		line 18 in file "../lcd.c"
  5174 ;; Parameters:    Size  Location     Type
  5175 ;;  data            1    wreg     unsigned char 
  5176 ;; Auto vars:     Size  Location     Type
  5177 ;;  data            1   53[COMRAM] unsigned char 
  5178 ;; Return value:  Size  Location     Type
  5179 ;;                  1    wreg      void 
  5180 ;; Registers used:
  5181 ;;		wreg, status,2, status,0, cstack
  5182 ;; Tracked objects:
  5183 ;;		On entry : 0/0
  5184 ;;		On exit  : 0/0
  5185 ;;		Unchanged: 0/0
  5186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5187 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5188 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5189 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5190 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5191 ;;Total ram usage:        1 bytes
  5192 ;; Hardware stack levels used:    1
  5193 ;; Hardware stack levels required when called:    6
  5194 ;; This function calls:
  5195 ;;		_lcdNibble
  5196 ;; This function is called by:
  5197 ;;		_initLCD
  5198 ;;		_main
  5199 ;; This function uses a non-reentrant model
  5200 ;;
  5201                           
  5202                           	psect	text14
  5203  001E28                     __ptext14:
  5204                           	opt stack 0
  5205  001E28                     _lcdInst:
  5206                           	opt stack 24
  5207                           
  5208                           ;incstack = 0
  5209                           ;lcdInst@data stored from wreg
  5210  001E28  6E36               	movwf	lcdInst@data,c
  5211                           
  5212                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  5213  001E2A  948C               	bcf	3980,2,c	;volatile
  5214                           
  5215                           ;lcd.c: 20: lcdNibble(data);
  5216  001E2C  5036               	movf	lcdInst@data,w,c
  5217  001E2E  ECC8  F00D         	call	_lcdNibble
  5218  001E32  0012               	return		;funcret
  5219  001E34                     __end_of_lcdInst:
  5220                           	opt stack 0
  5221                           tblptru	equ	0xFF8
  5222                           tblptrh	equ	0xFF7
  5223                           tblptrl	equ	0xFF6
  5224                           tablat	equ	0xFF5
  5225                           prodh	equ	0xFF4
  5226                           prodl	equ	0xFF3
  5227                           intcon	equ	0xFF2
  5228                           intcon3	equ	0xFF0
  5229                           postinc0	equ	0xFEE
  5230                           wreg	equ	0xFE8
  5231                           indf2	equ	0xFDF
  5232                           postinc2	equ	0xFDE
  5233                           postdec2	equ	0xFDD
  5234                           fsr2h	equ	0xFDA
  5235                           fsr2l	equ	0xFD9
  5236                           status	equ	0xFD8
  5237                           
  5238 ;; *************** function _lcdNibble *****************
  5239 ;; Defined at:
  5240 ;;		line 28 in file "../lcd.c"
  5241 ;; Parameters:    Size  Location     Type
  5242 ;;  data            1    wreg     unsigned char 
  5243 ;; Auto vars:     Size  Location     Type
  5244 ;;  data            1   52[COMRAM] unsigned char 
  5245 ;;  temp            1   51[COMRAM] unsigned char 
  5246 ;; Return value:  Size  Location     Type
  5247 ;;                  1    wreg      void 
  5248 ;; Registers used:
  5249 ;;		wreg, status,2, status,0
  5250 ;; Tracked objects:
  5251 ;;		On entry : 0/0
  5252 ;;		On exit  : 0/0
  5253 ;;		Unchanged: 0/0
  5254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5255 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5256 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5257 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5258 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5259 ;;Total ram usage:        2 bytes
  5260 ;; Hardware stack levels used:    1
  5261 ;; Hardware stack levels required when called:    5
  5262 ;; This function calls:
  5263 ;;		Nothing
  5264 ;; This function is called by:
  5265 ;;		_lcdInst
  5266 ;;		_putch
  5267 ;; This function uses a non-reentrant model
  5268 ;;
  5269                           
  5270                           	psect	text15
  5271  001B90                     __ptext15:
  5272                           	opt stack 0
  5273  001B90                     _lcdNibble:
  5274                           	opt stack 23
  5275                           
  5276                           ;incstack = 0
  5277                           ;lcdNibble@data stored from wreg
  5278  001B90  6E35               	movwf	lcdNibble@data,c
  5279                           
  5280                           ;lcd.c: 30: char temp = data & 0xF0;
  5281  001B92  5035               	movf	lcdNibble@data,w,c
  5282  001B94  0BF0               	andlw	240
  5283  001B96  6E34               	movwf	lcdNibble@temp,c
  5284                           
  5285                           ;lcd.c: 31: LATD = LATD & 0x0F;
  5286  001B98  508C               	movf	3980,w,c	;volatile
  5287  001B9A  0B0F               	andlw	15
  5288  001B9C  6E8C               	movwf	3980,c	;volatile
  5289                           
  5290                           ;lcd.c: 32: LATD = temp | LATD;
  5291  001B9E  5034               	movf	lcdNibble@temp,w,c
  5292  001BA0  108C               	iorwf	3980,w,c	;volatile
  5293  001BA2  6E8C               	movwf	3980,c	;volatile
  5294                           
  5295                           ;lcd.c: 34: LATDbits.LATD3 = 0;
  5296  001BA4  968C               	bcf	3980,3,c	;volatile
  5297                           
  5298                           ;lcd.c: 35: _delay((unsigned long)((30)*(10000000/4000000.0)));
  5299  001BA6  0E19               	movlw	25
  5300  001BA8                     u5607:
  5301  001BA8  2EE8               	decfsz	wreg,f,c
  5302  001BAA  D7FE               	bra	u5607
  5303                           
  5304                           ;lcd.c: 36: LATDbits.LATD3 = 1;
  5305  001BAC  868C               	bsf	3980,3,c	;volatile
  5306                           
  5307                           ;lcd.c: 37: _delay((unsigned long)((30)*(10000000/4000000.0)));
  5308  001BAE  0E19               	movlw	25
  5309  001BB0                     u5617:
  5310  001BB0  2EE8               	decfsz	wreg,f,c
  5311  001BB2  D7FE               	bra	u5617
  5312                           
  5313                           ;lcd.c: 39: data = data << 4;
  5314  001BB4  3835               	swapf	lcdNibble@data,w,c
  5315  001BB6  0BF0               	andlw	240
  5316  001BB8  6E35               	movwf	lcdNibble@data,c
  5317                           
  5318                           ;lcd.c: 41: temp = data & 0xF0;
  5319  001BBA  5035               	movf	lcdNibble@data,w,c
  5320  001BBC  0BF0               	andlw	240
  5321  001BBE  6E34               	movwf	lcdNibble@temp,c
  5322                           
  5323                           ;lcd.c: 42: LATD = LATD & 0x0F;
  5324  001BC0  508C               	movf	3980,w,c	;volatile
  5325  001BC2  0B0F               	andlw	15
  5326  001BC4  6E8C               	movwf	3980,c	;volatile
  5327                           
  5328                           ;lcd.c: 43: LATD = temp | LATD;
  5329  001BC6  5034               	movf	lcdNibble@temp,w,c
  5330  001BC8  108C               	iorwf	3980,w,c	;volatile
  5331  001BCA  6E8C               	movwf	3980,c	;volatile
  5332                           
  5333                           ;lcd.c: 45: LATDbits.LATD3 = 0;
  5334  001BCC  968C               	bcf	3980,3,c	;volatile
  5335                           
  5336                           ;lcd.c: 46: _delay((unsigned long)((30)*(10000000/4000000.0)));
  5337  001BCE  0E19               	movlw	25
  5338  001BD0                     u5627:
  5339  001BD0  2EE8               	decfsz	wreg,f,c
  5340  001BD2  D7FE               	bra	u5627
  5341                           
  5342                           ;lcd.c: 47: LATDbits.LATD3 = 1;
  5343  001BD4  868C               	bsf	3980,3,c	;volatile
  5344                           
  5345                           ;lcd.c: 48: _delay((unsigned long)((30)*(10000000/4000000.0)));
  5346  001BD6  0E19               	movlw	25
  5347  001BD8                     u5637:
  5348  001BD8  2EE8               	decfsz	wreg,f,c
  5349  001BDA  D7FE               	bra	u5637
  5350  001BDC  0012               	return		;funcret
  5351  001BDE                     __end_of_lcdNibble:
  5352                           	opt stack 0
  5353                           tblptru	equ	0xFF8
  5354                           tblptrh	equ	0xFF7
  5355                           tblptrl	equ	0xFF6
  5356                           tablat	equ	0xFF5
  5357                           prodh	equ	0xFF4
  5358                           prodl	equ	0xFF3
  5359                           intcon	equ	0xFF2
  5360                           intcon3	equ	0xFF0
  5361                           postinc0	equ	0xFEE
  5362                           wreg	equ	0xFE8
  5363                           indf2	equ	0xFDF
  5364                           postinc2	equ	0xFDE
  5365                           postdec2	equ	0xFDD
  5366                           fsr2h	equ	0xFDA
  5367                           fsr2l	equ	0xFD9
  5368                           status	equ	0xFD8
  5369                           
  5370 ;; *************** function _I2C_Master_Write *****************
  5371 ;; Defined at:
  5372 ;;		line 39 in file "../I2C.c"
  5373 ;; Parameters:    Size  Location     Type
  5374 ;;  d               2   52[COMRAM] unsigned int 
  5375 ;; Auto vars:     Size  Location     Type
  5376 ;;		None
  5377 ;; Return value:  Size  Location     Type
  5378 ;;                  1    wreg      void 
  5379 ;; Registers used:
  5380 ;;		wreg, status,2, status,0, cstack
  5381 ;; Tracked objects:
  5382 ;;		On entry : 0/0
  5383 ;;		On exit  : 0/0
  5384 ;;		Unchanged: 0/0
  5385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5386 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5387 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5389 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5390 ;;Total ram usage:        2 bytes
  5391 ;; Hardware stack levels used:    1
  5392 ;; Hardware stack levels required when called:    6
  5393 ;; This function calls:
  5394 ;;		_I2C_Master_Wait
  5395 ;; This function is called by:
  5396 ;;		_main
  5397 ;; This function uses a non-reentrant model
  5398 ;;
  5399                           
  5400                           	psect	text16
  5401  001E4C                     __ptext16:
  5402                           	opt stack 0
  5403  001E4C                     _I2C_Master_Write:
  5404                           	opt stack 24
  5405                           
  5406                           ;I2C.c: 41: I2C_Master_Wait();
  5407                           
  5408                           ;incstack = 0
  5409  001E4C  EC05  F00F         	call	_I2C_Master_Wait	;wreg free
  5410                           
  5411                           ;I2C.c: 42: SSPBUF = d;
  5412  001E50  C035  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  5413  001E54  0012               	return		;funcret
  5414  001E56                     __end_of_I2C_Master_Write:
  5415                           	opt stack 0
  5416                           tblptru	equ	0xFF8
  5417                           tblptrh	equ	0xFF7
  5418                           tblptrl	equ	0xFF6
  5419                           tablat	equ	0xFF5
  5420                           prodh	equ	0xFF4
  5421                           prodl	equ	0xFF3
  5422                           intcon	equ	0xFF2
  5423                           intcon3	equ	0xFF0
  5424                           postinc0	equ	0xFEE
  5425                           wreg	equ	0xFE8
  5426                           indf2	equ	0xFDF
  5427                           postinc2	equ	0xFDE
  5428                           postdec2	equ	0xFDD
  5429                           fsr2h	equ	0xFDA
  5430                           fsr2l	equ	0xFD9
  5431                           status	equ	0xFD8
  5432                           
  5433 ;; *************** function _I2C_Master_Stop *****************
  5434 ;; Defined at:
  5435 ;;		line 33 in file "../I2C.c"
  5436 ;; Parameters:    Size  Location     Type
  5437 ;;		None
  5438 ;; Auto vars:     Size  Location     Type
  5439 ;;		None
  5440 ;; Return value:  Size  Location     Type
  5441 ;;                  1    wreg      void 
  5442 ;; Registers used:
  5443 ;;		wreg, status,2, status,0, cstack
  5444 ;; Tracked objects:
  5445 ;;		On entry : 0/0
  5446 ;;		On exit  : 0/0
  5447 ;;		Unchanged: 0/0
  5448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5449 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5450 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5451 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5452 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5453 ;;Total ram usage:        0 bytes
  5454 ;; Hardware stack levels used:    1
  5455 ;; Hardware stack levels required when called:    6
  5456 ;; This function calls:
  5457 ;;		_I2C_Master_Wait
  5458 ;; This function is called by:
  5459 ;;		_main
  5460 ;; This function uses a non-reentrant model
  5461 ;;
  5462                           
  5463                           	psect	text17
  5464  001E56                     __ptext17:
  5465                           	opt stack 0
  5466  001E56                     _I2C_Master_Stop:
  5467                           	opt stack 24
  5468                           
  5469                           ;I2C.c: 35: I2C_Master_Wait();
  5470                           
  5471                           ;incstack = 0
  5472  001E56  EC05  F00F         	call	_I2C_Master_Wait	;wreg free
  5473                           
  5474                           ;I2C.c: 36: PEN = 1;
  5475  001E5A  84C5               	bsf	4037,2,c	;volatile
  5476  001E5C  0012               	return		;funcret
  5477  001E5E                     __end_of_I2C_Master_Stop:
  5478                           	opt stack 0
  5479                           tblptru	equ	0xFF8
  5480                           tblptrh	equ	0xFF7
  5481                           tblptrl	equ	0xFF6
  5482                           tablat	equ	0xFF5
  5483                           prodh	equ	0xFF4
  5484                           prodl	equ	0xFF3
  5485                           intcon	equ	0xFF2
  5486                           intcon3	equ	0xFF0
  5487                           postinc0	equ	0xFEE
  5488                           wreg	equ	0xFE8
  5489                           indf2	equ	0xFDF
  5490                           postinc2	equ	0xFDE
  5491                           postdec2	equ	0xFDD
  5492                           fsr2h	equ	0xFDA
  5493                           fsr2l	equ	0xFD9
  5494                           status	equ	0xFD8
  5495                           
  5496 ;; *************** function _I2C_Master_Start *****************
  5497 ;; Defined at:
  5498 ;;		line 21 in file "../I2C.c"
  5499 ;; Parameters:    Size  Location     Type
  5500 ;;		None
  5501 ;; Auto vars:     Size  Location     Type
  5502 ;;		None
  5503 ;; Return value:  Size  Location     Type
  5504 ;;                  1    wreg      void 
  5505 ;; Registers used:
  5506 ;;		wreg, status,2, status,0, cstack
  5507 ;; Tracked objects:
  5508 ;;		On entry : 0/0
  5509 ;;		On exit  : 0/0
  5510 ;;		Unchanged: 0/0
  5511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5512 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5513 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5514 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5515 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5516 ;;Total ram usage:        0 bytes
  5517 ;; Hardware stack levels used:    1
  5518 ;; Hardware stack levels required when called:    6
  5519 ;; This function calls:
  5520 ;;		_I2C_Master_Wait
  5521 ;; This function is called by:
  5522 ;;		_main
  5523 ;; This function uses a non-reentrant model
  5524 ;;
  5525                           
  5526                           	psect	text18
  5527  001E5E                     __ptext18:
  5528                           	opt stack 0
  5529  001E5E                     _I2C_Master_Start:
  5530                           	opt stack 24
  5531                           
  5532                           ;I2C.c: 23: I2C_Master_Wait();
  5533                           
  5534                           ;incstack = 0
  5535  001E5E  EC05  F00F         	call	_I2C_Master_Wait	;wreg free
  5536                           
  5537                           ;I2C.c: 24: SEN = 1;
  5538  001E62  80C5               	bsf	4037,0,c	;volatile
  5539  001E64  0012               	return		;funcret
  5540  001E66                     __end_of_I2C_Master_Start:
  5541                           	opt stack 0
  5542                           tblptru	equ	0xFF8
  5543                           tblptrh	equ	0xFF7
  5544                           tblptrl	equ	0xFF6
  5545                           tablat	equ	0xFF5
  5546                           prodh	equ	0xFF4
  5547                           prodl	equ	0xFF3
  5548                           intcon	equ	0xFF2
  5549                           intcon3	equ	0xFF0
  5550                           postinc0	equ	0xFEE
  5551                           wreg	equ	0xFE8
  5552                           indf2	equ	0xFDF
  5553                           postinc2	equ	0xFDE
  5554                           postdec2	equ	0xFDD
  5555                           fsr2h	equ	0xFDA
  5556                           fsr2l	equ	0xFD9
  5557                           status	equ	0xFD8
  5558                           
  5559 ;; *************** function _I2C_Master_Read *****************
  5560 ;; Defined at:
  5561 ;;		line 45 in file "../I2C.c"
  5562 ;; Parameters:    Size  Location     Type
  5563 ;;  a               1    wreg     unsigned char 
  5564 ;; Auto vars:     Size  Location     Type
  5565 ;;  a               1   52[COMRAM] unsigned char 
  5566 ;;  temp            1   53[COMRAM] unsigned char 
  5567 ;; Return value:  Size  Location     Type
  5568 ;;                  1    wreg      unsigned char 
  5569 ;; Registers used:
  5570 ;;		wreg, status,2, status,0, cstack
  5571 ;; Tracked objects:
  5572 ;;		On entry : 0/0
  5573 ;;		On exit  : 0/0
  5574 ;;		Unchanged: 0/0
  5575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5577 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5578 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5579 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5580 ;;Total ram usage:        2 bytes
  5581 ;; Hardware stack levels used:    1
  5582 ;; Hardware stack levels required when called:    6
  5583 ;; This function calls:
  5584 ;;		_I2C_Master_Wait
  5585 ;; This function is called by:
  5586 ;;		_main
  5587 ;; This function uses a non-reentrant model
  5588 ;;
  5589                           
  5590                           	psect	text19
  5591  001D54                     __ptext19:
  5592                           	opt stack 0
  5593  001D54                     _I2C_Master_Read:
  5594                           	opt stack 24
  5595                           
  5596                           ;incstack = 0
  5597                           ;I2C_Master_Read@a stored from wreg
  5598  001D54  6E35               	movwf	I2C_Master_Read@a,c
  5599                           
  5600                           ;I2C.c: 47: unsigned char temp;
  5601                           ;I2C.c: 48: I2C_Master_Wait();
  5602  001D56  EC05  F00F         	call	_I2C_Master_Wait	;wreg free
  5603                           
  5604                           ;I2C.c: 49: RCEN = 1;
  5605  001D5A  86C5               	bsf	4037,3,c	;volatile
  5606                           
  5607                           ;I2C.c: 50: I2C_Master_Wait();
  5608  001D5C  EC05  F00F         	call	_I2C_Master_Wait	;wreg free
  5609                           
  5610                           ;I2C.c: 51: temp = SSPBUF;
  5611  001D60  CFC9 F036          	movff	4041,I2C_Master_Read@temp	;volatile
  5612                           
  5613                           ;I2C.c: 52: I2C_Master_Wait();
  5614  001D64  EC05  F00F         	call	_I2C_Master_Wait	;wreg free
  5615                           
  5616                           ;I2C.c: 53: ACKDT = (a)?0:1;
  5617  001D68  5035               	movf	I2C_Master_Read@a,w,c
  5618  001D6A  A4D8               	btfss	status,2,c
  5619  001D6C  D002               	goto	u3090
  5620  001D6E  8AC5               	bsf	4037,5,c	;volatile
  5621  001D70  D001               	goto	l3230
  5622  001D72                     u3090:
  5623  001D72  9AC5               	bcf	4037,5,c	;volatile
  5624  001D74                     l3230:
  5625                           
  5626                           ;I2C.c: 54: ACKEN = 1;
  5627  001D74  88C5               	bsf	4037,4,c	;volatile
  5628                           
  5629                           ;I2C.c: 55: return temp;
  5630  001D76  5036               	movf	I2C_Master_Read@temp,w,c
  5631  001D78  0012               	return	
  5632  001D7A                     __end_of_I2C_Master_Read:
  5633                           	opt stack 0
  5634                           tblptru	equ	0xFF8
  5635                           tblptrh	equ	0xFF7
  5636                           tblptrl	equ	0xFF6
  5637                           tablat	equ	0xFF5
  5638                           prodh	equ	0xFF4
  5639                           prodl	equ	0xFF3
  5640                           intcon	equ	0xFF2
  5641                           intcon3	equ	0xFF0
  5642                           postinc0	equ	0xFEE
  5643                           wreg	equ	0xFE8
  5644                           indf2	equ	0xFDF
  5645                           postinc2	equ	0xFDE
  5646                           postdec2	equ	0xFDD
  5647                           fsr2h	equ	0xFDA
  5648                           fsr2l	equ	0xFD9
  5649                           status	equ	0xFD8
  5650                           
  5651 ;; *************** function _I2C_Master_Wait *****************
  5652 ;; Defined at:
  5653 ;;		line 16 in file "../I2C.c"
  5654 ;; Parameters:    Size  Location     Type
  5655 ;;		None
  5656 ;; Auto vars:     Size  Location     Type
  5657 ;;		None
  5658 ;; Return value:  Size  Location     Type
  5659 ;;                  1    wreg      void 
  5660 ;; Registers used:
  5661 ;;		wreg, status,2, status,0
  5662 ;; Tracked objects:
  5663 ;;		On entry : 0/0
  5664 ;;		On exit  : 0/0
  5665 ;;		Unchanged: 0/0
  5666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5667 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5668 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5669 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5670 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5671 ;;Total ram usage:        1 bytes
  5672 ;; Hardware stack levels used:    1
  5673 ;; Hardware stack levels required when called:    5
  5674 ;; This function calls:
  5675 ;;		Nothing
  5676 ;; This function is called by:
  5677 ;;		_I2C_Master_Start
  5678 ;;		_I2C_Master_Stop
  5679 ;;		_I2C_Master_Write
  5680 ;;		_I2C_Master_Read
  5681 ;; This function uses a non-reentrant model
  5682 ;;
  5683                           
  5684                           	psect	text20
  5685  001E0A                     __ptext20:
  5686                           	opt stack 0
  5687  001E0A                     _I2C_Master_Wait:
  5688                           	opt stack 24
  5689  001E0A                     l30:
  5690  001E0A  B4C7               	btfsc	4039,2,c	;volatile
  5691  001E0C  D7FE               	goto	l30
  5692  001E0E  CFC5 F034          	movff	4037,??_I2C_Master_Wait	;volatile
  5693  001E12  0E1F               	movlw	31
  5694  001E14  1634               	andwf	??_I2C_Master_Wait,f,c
  5695  001E16  B4D8               	btfsc	status,2,c
  5696  001E18  0012               	return	
  5697  001E1A  D7F7               	goto	l30
  5698  001E1C                     __end_of_I2C_Master_Wait:
  5699                           	opt stack 0
  5700                           tblptru	equ	0xFF8
  5701                           tblptrh	equ	0xFF7
  5702                           tblptrl	equ	0xFF6
  5703                           tablat	equ	0xFF5
  5704                           prodh	equ	0xFF4
  5705                           prodl	equ	0xFF3
  5706                           intcon	equ	0xFF2
  5707                           intcon3	equ	0xFF0
  5708                           postinc0	equ	0xFEE
  5709                           wreg	equ	0xFE8
  5710                           indf2	equ	0xFDF
  5711                           postinc2	equ	0xFDE
  5712                           postdec2	equ	0xFDD
  5713                           fsr2h	equ	0xFDA
  5714                           fsr2l	equ	0xFD9
  5715                           status	equ	0xFD8
  5716                           
  5717 ;; *************** function _I2C_Master_Init *****************
  5718 ;; Defined at:
  5719 ;;		line 5 in file "../I2C.c"
  5720 ;; Parameters:    Size  Location     Type
  5721 ;;  c               4   59[COMRAM] const unsigned long 
  5722 ;; Auto vars:     Size  Location     Type
  5723 ;;		None
  5724 ;; Return value:  Size  Location     Type
  5725 ;;                  1    wreg      void 
  5726 ;; Registers used:
  5727 ;;		wreg, status,2, status,0, cstack
  5728 ;; Tracked objects:
  5729 ;;		On entry : 0/0
  5730 ;;		On exit  : 0/0
  5731 ;;		Unchanged: 0/0
  5732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5733 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5734 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5735 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5736 ;;      Totals:         4       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5737 ;;Total ram usage:        8 bytes
  5738 ;; Hardware stack levels used:    1
  5739 ;; Hardware stack levels required when called:    6
  5740 ;; This function calls:
  5741 ;;		___lldiv
  5742 ;; This function is called by:
  5743 ;;		_main
  5744 ;; This function uses a non-reentrant model
  5745 ;;
  5746                           
  5747                           	psect	text21
  5748  001A90                     __ptext21:
  5749                           	opt stack 0
  5750  001A90                     _I2C_Master_Init:
  5751                           	opt stack 24
  5752                           
  5753                           ;I2C.c: 8: SSPSTAT = 0b00000000;
  5754                           
  5755                           ;incstack = 0
  5756  001A90  0E00               	movlw	0
  5757  001A92  6EC7               	movwf	4039,c	;volatile
  5758                           
  5759                           ;I2C.c: 9: SSPCON1 = 0b00101000;
  5760  001A94  0E28               	movlw	40
  5761  001A96  6EC6               	movwf	4038,c	;volatile
  5762                           
  5763                           ;I2C.c: 10: SSPCON2 = 0b00000000;
  5764  001A98  0E00               	movlw	0
  5765  001A9A  6EC5               	movwf	4037,c	;volatile
  5766                           
  5767                           ;I2C.c: 11: SSPADD = (10000000/(4*c))-1;
  5768  001A9C  0E80               	movlw	128
  5769  001A9E  6E34               	movwf	___lldiv@dividend,c
  5770  001AA0  0E96               	movlw	150
  5771  001AA2  6E35               	movwf	___lldiv@dividend+1,c
  5772  001AA4  0E98               	movlw	152
  5773  001AA6  6E36               	movwf	___lldiv@dividend+2,c
  5774  001AA8  0E00               	movlw	0
  5775  001AAA  6E37               	movwf	___lldiv@dividend+3,c
  5776  001AAC  C03C  F085         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  5777  001AB0  C03D  F086         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  5778  001AB4  C03E  F087         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  5779  001AB8  C03F  F088         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  5780  001ABC  0E02               	movlw	2
  5781  001ABE                     u4785:
  5782  001ABE  90D8               	bcf	status,0,c
  5783  001AC0  0100               	movlb	0	; () banked
  5784  001AC2  3785               	rlcf	??_I2C_Master_Init& (0+255),f,b
  5785  001AC4  3786               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  5786  001AC6  3787               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  5787  001AC8  3788               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  5788  001ACA  2EE8               	decfsz	wreg,f,c
  5789  001ACC  D7F8               	goto	u4785
  5790  001ACE  C085  F038         	movff	??_I2C_Master_Init,___lldiv@divisor
  5791  001AD2  C086  F039         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  5792  001AD6  C087  F03A         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  5793  001ADA  C088  F03B         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  5794  001ADE  EC0D  F00C         	call	___lldiv	;wreg free
  5795  001AE2  0434               	decf	?___lldiv,w,c
  5796  001AE4  6EC8               	movwf	4040,c	;volatile
  5797                           
  5798                           ;I2C.c: 12: TRISC3 = 1;
  5799  001AE6  8694               	bsf	3988,3,c	;volatile
  5800                           
  5801                           ;I2C.c: 13: TRISC4 = 1;
  5802  001AE8  8894               	bsf	3988,4,c	;volatile
  5803  001AEA  0012               	return		;funcret
  5804  001AEC                     __end_of_I2C_Master_Init:
  5805                           	opt stack 0
  5806                           tblptru	equ	0xFF8
  5807                           tblptrh	equ	0xFF7
  5808                           tblptrl	equ	0xFF6
  5809                           tablat	equ	0xFF5
  5810                           prodh	equ	0xFF4
  5811                           prodl	equ	0xFF3
  5812                           intcon	equ	0xFF2
  5813                           intcon3	equ	0xFF0
  5814                           postinc0	equ	0xFEE
  5815                           wreg	equ	0xFE8
  5816                           indf2	equ	0xFDF
  5817                           postinc2	equ	0xFDE
  5818                           postdec2	equ	0xFDD
  5819                           fsr2h	equ	0xFDA
  5820                           fsr2l	equ	0xFD9
  5821                           status	equ	0xFD8
  5822                           
  5823 ;; *************** function ___lldiv *****************
  5824 ;; Defined at:
  5825 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  5826 ;; Parameters:    Size  Location     Type
  5827 ;;  dividend        4   51[COMRAM] unsigned long 
  5828 ;;  divisor         4   55[COMRAM] unsigned long 
  5829 ;; Auto vars:     Size  Location     Type
  5830 ;;  quotient        4    0[BANK0 ] unsigned long 
  5831 ;;  counter         1    4[BANK0 ] unsigned char 
  5832 ;; Return value:  Size  Location     Type
  5833 ;;                  4   51[COMRAM] unsigned long 
  5834 ;; Registers used:
  5835 ;;		wreg, status,2, status,0
  5836 ;; Tracked objects:
  5837 ;;		On entry : 0/0
  5838 ;;		On exit  : 0/0
  5839 ;;		Unchanged: 0/0
  5840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5841 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5842 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5843 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5844 ;;      Totals:         8       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5845 ;;Total ram usage:       13 bytes
  5846 ;; Hardware stack levels used:    1
  5847 ;; Hardware stack levels required when called:    5
  5848 ;; This function calls:
  5849 ;;		Nothing
  5850 ;; This function is called by:
  5851 ;;		_I2C_Master_Init
  5852 ;; This function uses a non-reentrant model
  5853 ;;
  5854                           
  5855                           	psect	text22
  5856  00181A                     __ptext22:
  5857                           	opt stack 0
  5858  00181A                     ___lldiv:
  5859                           	opt stack 24
  5860                           
  5861                           ;incstack = 0
  5862  00181A  0E00               	movlw	0
  5863  00181C  0100               	movlb	0	; () banked
  5864  00181E  6F80               	movwf	___lldiv@quotient& (0+255),b
  5865  001820  0E00               	movlw	0
  5866  001822  6F81               	movwf	(___lldiv@quotient+1)& (0+255),b
  5867  001824  0E00               	movlw	0
  5868  001826  6F82               	movwf	(___lldiv@quotient+2)& (0+255),b
  5869  001828  0E00               	movlw	0
  5870  00182A  6F83               	movwf	(___lldiv@quotient+3)& (0+255),b
  5871                           
  5872                           ; BSR set to: 0
  5873  00182C  5038               	movf	___lldiv@divisor,w,c
  5874  00182E  1039               	iorwf	___lldiv@divisor+1,w,c
  5875  001830  103A               	iorwf	___lldiv@divisor+2,w,c
  5876  001832  103B               	iorwf	___lldiv@divisor+3,w,c
  5877  001834  B4D8               	btfsc	status,2,c
  5878  001836  D02F               	goto	l854
  5879                           
  5880                           ; BSR set to: 0
  5881  001838  0E01               	movlw	1
  5882  00183A  0100               	movlb	0	; () banked
  5883  00183C  6F84               	movwf	___lldiv@counter& (0+255),b
  5884  00183E  D007               	goto	l4222
  5885  001840                     l4220:
  5886                           
  5887                           ; BSR set to: 0
  5888  001840  90D8               	bcf	status,0,c
  5889  001842  3638               	rlcf	___lldiv@divisor,f,c
  5890  001844  3639               	rlcf	___lldiv@divisor+1,f,c
  5891  001846  363A               	rlcf	___lldiv@divisor+2,f,c
  5892  001848  363B               	rlcf	___lldiv@divisor+3,f,c
  5893  00184A  0100               	movlb	0	; () banked
  5894  00184C  2B84               	incf	___lldiv@counter& (0+255),f,b
  5895  00184E                     l4222:
  5896                           
  5897                           ; BSR set to: 0
  5898  00184E  AE3B               	btfss	___lldiv@divisor+3,7,c
  5899  001850  D7F7               	goto	l4220
  5900  001852                     l4224:
  5901                           
  5902                           ; BSR set to: 0
  5903  001852  0100               	movlb	0	; () banked
  5904  001854  90D8               	bcf	status,0,c
  5905  001856  3780               	rlcf	___lldiv@quotient& (0+255),f,b
  5906  001858  3781               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  5907  00185A  3782               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  5908  00185C  3783               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  5909                           
  5910                           ; BSR set to: 0
  5911  00185E  5038               	movf	___lldiv@divisor,w,c
  5912  001860  5C34               	subwf	___lldiv@dividend,w,c
  5913  001862  5039               	movf	___lldiv@divisor+1,w,c
  5914  001864  5835               	subwfb	___lldiv@dividend+1,w,c
  5915  001866  503A               	movf	___lldiv@divisor+2,w,c
  5916  001868  5836               	subwfb	___lldiv@dividend+2,w,c
  5917  00186A  503B               	movf	___lldiv@divisor+3,w,c
  5918  00186C  5837               	subwfb	___lldiv@dividend+3,w,c
  5919  00186E  A0D8               	btfss	status,0,c
  5920  001870  D00A               	goto	l4232
  5921                           
  5922                           ; BSR set to: 0
  5923  001872  5038               	movf	___lldiv@divisor,w,c
  5924  001874  5E34               	subwf	___lldiv@dividend,f,c
  5925  001876  5039               	movf	___lldiv@divisor+1,w,c
  5926  001878  5A35               	subwfb	___lldiv@dividend+1,f,c
  5927  00187A  503A               	movf	___lldiv@divisor+2,w,c
  5928  00187C  5A36               	subwfb	___lldiv@dividend+2,f,c
  5929  00187E  503B               	movf	___lldiv@divisor+3,w,c
  5930  001880  5A37               	subwfb	___lldiv@dividend+3,f,c
  5931                           
  5932                           ; BSR set to: 0
  5933  001882  0100               	movlb	0	; () banked
  5934  001884  8180               	bsf	___lldiv@quotient& (0+255),0,b
  5935  001886                     l4232:
  5936                           
  5937                           ; BSR set to: 0
  5938  001886  90D8               	bcf	status,0,c
  5939  001888  323B               	rrcf	___lldiv@divisor+3,f,c
  5940  00188A  323A               	rrcf	___lldiv@divisor+2,f,c
  5941  00188C  3239               	rrcf	___lldiv@divisor+1,f,c
  5942  00188E  3238               	rrcf	___lldiv@divisor,f,c
  5943                           
  5944                           ; BSR set to: 0
  5945  001890  0100               	movlb	0	; () banked
  5946  001892  2F84               	decfsz	___lldiv@counter& (0+255),f,b
  5947  001894  D7DE               	goto	l4224
  5948  001896                     l854:
  5949                           
  5950                           ; BSR set to: 0
  5951  001896  C080  F034         	movff	___lldiv@quotient,?___lldiv
  5952  00189A  C081  F035         	movff	___lldiv@quotient+1,?___lldiv+1
  5953  00189E  C082  F036         	movff	___lldiv@quotient+2,?___lldiv+2
  5954  0018A2  C083  F037         	movff	___lldiv@quotient+3,?___lldiv+3
  5955                           
  5956                           ; BSR set to: 0
  5957  0018A6  0012               	return		;funcret
  5958  0018A8                     __end_of___lldiv:
  5959                           	opt stack 0
  5960                           tblptru	equ	0xFF8
  5961                           tblptrh	equ	0xFF7
  5962                           tblptrl	equ	0xFF6
  5963                           tablat	equ	0xFF5
  5964                           prodh	equ	0xFF4
  5965                           prodl	equ	0xFF3
  5966                           intcon	equ	0xFF2
  5967                           intcon3	equ	0xFF0
  5968                           postinc0	equ	0xFEE
  5969                           wreg	equ	0xFE8
  5970                           indf2	equ	0xFDF
  5971                           postinc2	equ	0xFDE
  5972                           postdec2	equ	0xFDD
  5973                           fsr2h	equ	0xFDA
  5974                           fsr2l	equ	0xFD9
  5975                           status	equ	0xFD8
  5976                           
  5977 ;; *************** function _ISR *****************
  5978 ;; Defined at:
  5979 ;;		line 539 in file "../main.c"
  5980 ;; Parameters:    Size  Location     Type
  5981 ;;		None
  5982 ;; Auto vars:     Size  Location     Type
  5983 ;;  keypress        1   50[COMRAM] unsigned char 
  5984 ;; Return value:  Size  Location     Type
  5985 ;;                  1    wreg      void 
  5986 ;; Registers used:
  5987 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5988 ;; Tracked objects:
  5989 ;;		On entry : 0/0
  5990 ;;		On exit  : 0/0
  5991 ;;		Unchanged: 0/0
  5992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5993 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5994 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5995 ;;      Temps:         15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5996 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5997 ;;Total ram usage:       16 bytes
  5998 ;; Hardware stack levels used:    1
  5999 ;; Hardware stack levels required when called:    4
  6000 ;; This function calls:
  6001 ;;		_switchMenu
  6002 ;;		i2___awdiv
  6003 ;;		i2___awmod
  6004 ;;		i2_lcdInst
  6005 ;;		i2_printf
  6006 ;;		i2_stopOperation
  6007 ;; This function is called by:
  6008 ;;		Interrupt level 2
  6009 ;; This function uses a non-reentrant model
  6010 ;;
  6011                           
  6012                           	psect	intcode
  6013  000008                     __pintcode:
  6014                           	opt stack 0
  6015  000008                     _ISR:
  6016                           	opt stack 23
  6017                           
  6018                           ; BSR set to: 0
  6019                           ;incstack = 0
  6020  000008  824C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6021  00000A  ED0F  F004         	call	int_func,f	;refresh shadow registers
  6022                           tblptru	equ	0xFF8
  6023                           tblptrh	equ	0xFF7
  6024                           tblptrl	equ	0xFF6
  6025                           tablat	equ	0xFF5
  6026                           prodh	equ	0xFF4
  6027                           prodl	equ	0xFF3
  6028                           intcon	equ	0xFF2
  6029                           intcon3	equ	0xFF0
  6030                           postinc0	equ	0xFEE
  6031                           wreg	equ	0xFE8
  6032                           indf2	equ	0xFDF
  6033                           postinc2	equ	0xFDE
  6034                           postdec2	equ	0xFDD
  6035                           fsr2h	equ	0xFDA
  6036                           fsr2l	equ	0xFD9
  6037                           status	equ	0xFD8
  6038                           
  6039                           	psect	intcode_body
  6040  00081E                     __pintcode_body:
  6041                           	opt stack 23
  6042  00081E                     int_func:
  6043                           	opt stack 23
  6044  00081E  0006               	pop		; remove dummy address from shadow register refresh
  6045  000820  CFFA F025          	movff	pclath,??_ISR+1
  6046  000824  CFFB F026          	movff	pclatu,??_ISR+2
  6047  000828  CFE9 F027          	movff	fsr0l,??_ISR+3
  6048  00082C  CFEA F028          	movff	fsr0h,??_ISR+4
  6049  000830  CFE1 F029          	movff	fsr1l,??_ISR+5
  6050  000834  CFE2 F02A          	movff	fsr1h,??_ISR+6
  6051  000838  CFD9 F02B          	movff	fsr2l,??_ISR+7
  6052  00083C  CFDA F02C          	movff	fsr2h,??_ISR+8
  6053  000840  CFF3 F02D          	movff	prodl,??_ISR+9
  6054  000844  CFF4 F02E          	movff	prodh,??_ISR+10
  6055  000848  CFF6 F02F          	movff	tblptrl,??_ISR+11
  6056  00084C  CFF7 F030          	movff	tblptrh,??_ISR+12
  6057  000850  CFF8 F031          	movff	tblptru,??_ISR+13
  6058  000854  CFF5 F032          	movff	tablat,??_ISR+14
  6059                           
  6060                           ;main.c: 540: if (INT1IF){
  6061  000858  A0F0               	btfss	intcon3,0,c	;volatile
  6062  00085A  D015               	goto	i2l3950
  6063                           
  6064                           ;main.c: 541: unsigned char keypress = (PORTB & 0xF0) >> 4;
  6065  00085C  3881               	swapf	3969,w,c	;volatile
  6066  00085E  0B0F               	andlw	15
  6067  000860  0B0F               	andlw	15
  6068  000862  6E33               	movwf	ISR@keypress,c
  6069                           
  6070                           ;main.c: 542: switchMenu('4', '6', keys[keypress]);
  6071  000864  0E36               	movlw	54
  6072  000866  6E21               	movwf	switchMenu@right,c
  6073  000868  5033               	movf	ISR@keypress,w,c
  6074  00086A  0D01               	mullw	1
  6075  00086C  0E57               	movlw	low _keys
  6076  00086E  24F3               	addwf	prodl,w,c
  6077  000870  6EF6               	movwf	tblptrl,c
  6078  000872  0EFE               	movlw	high _keys
  6079  000874  20F4               	addwfc	prodh,w,c
  6080  000876  6EF7               	movwf	tblptrh,c
  6081  000878                     	if	0	;There are less than 3 active tblptr bytes
  6082  000878                     	endif
  6083  000878  0008               	tblrd		*
  6084  00087A  CFF5 F022          	movff	tablat,switchMenu@key
  6085  00087E  0E34               	movlw	52
  6086  000880  ECB4  F00B         	call	_switchMenu
  6087                           
  6088                           ;main.c: 543: INT1IF = 0;
  6089  000884  90F0               	bcf	intcon3,0,c	;volatile
  6090  000886                     i2l3950:
  6091                           
  6092                           ;main.c: 544: }
  6093                           ;main.c: 545: if (screenMode == 1 && TMR0IF){
  6094  000886  0100               	movlb	0	; () banked
  6095  000888  05C7               	decf	_screenMode& (0+255),w,b
  6096  00088A  B4D8               	btfsc	status,2,c
  6097                           
  6098                           ; BSR set to: 0
  6099  00088C  A4F2               	btfss	intcon,2,c	;volatile
  6100  00088E  D050               	goto	i2l3994
  6101                           
  6102                           ; BSR set to: 0
  6103                           ;main.c: 546: TMR0IF = 0;
  6104  000890  94F2               	bcf	intcon,2,c	;volatile
  6105                           
  6106                           ; BSR set to: 0
  6107                           ;main.c: 547: TMR0 = 55770;
  6108  000892  0ED9               	movlw	217
  6109  000894  6ED7               	movwf	4055,c	;volatile
  6110  000896  0EDA               	movlw	218
  6111  000898  6ED6               	movwf	4054,c	;volatile
  6112                           
  6113                           ; BSR set to: 0
  6114                           ;main.c: 548: opTimer++;
  6115  00089A  2A47               	incf	_opTimer,f,c
  6116                           
  6117                           ; BSR set to: 0
  6118                           ;main.c: 549: min = opTimer / 60;
  6119  00089C  C047  F001         	movff	_opTimer,i2___awdiv@dividend
  6120  0008A0  6A02               	clrf	i2___awdiv@dividend+1,c
  6121  0008A2  0E00               	movlw	0
  6122  0008A4  6E04               	movwf	i2___awdiv@divisor+1,c
  6123  0008A6  0E3C               	movlw	60
  6124  0008A8  6E03               	movwf	i2___awdiv@divisor,c
  6125  0008AA  EC96  F00C         	call	i2___awdiv	;wreg free
  6126  0008AE  5001               	movf	?i2___awdiv,w,c
  6127  0008B0  0100               	movlb	0	; () banked
  6128  0008B2  6FBA               	movwf	_min& (0+255),b
  6129                           
  6130                           ; BSR set to: 0
  6131                           ;main.c: 550: sec = opTimer % 60;
  6132  0008B4  C047  F001         	movff	_opTimer,i2___awmod@dividend
  6133  0008B8  6A02               	clrf	i2___awmod@dividend+1,c
  6134  0008BA  0E00               	movlw	0
  6135  0008BC  6E04               	movwf	i2___awmod@divisor+1,c
  6136  0008BE  0E3C               	movlw	60
  6137  0008C0  6E03               	movwf	i2___awmod@divisor,c
  6138  0008C2  EC10  F00D         	call	i2___awmod	;wreg free
  6139  0008C6  5001               	movf	?i2___awmod,w,c
  6140  0008C8  0100               	movlb	0	; () banked
  6141  0008CA  6FC0               	movwf	_sec& (0+255),b
  6142                           
  6143                           ; BSR set to: 0
  6144                           ;main.c: 551: lcdInst(0b10000000);;
  6145  0008CC  0E80               	movlw	128
  6146  0008CE  EC20  F00F         	call	i2_lcdInst
  6147                           
  6148                           ;main.c: 552: printf("RUNNING: %02d:%02d   ", min, sec);
  6149  0008D2  0EC1               	movlw	low STR_23
  6150  0008D4  6E0D               	movwf	i2printf@f,c
  6151  0008D6  0EFE               	movlw	high STR_23
  6152  0008D8  6E0E               	movwf	i2printf@f+1,c
  6153  0008DA  C0BA  F00F         	movff	_min,?i2_printf+2
  6154  0008DE  6A10               	clrf	?i2_printf+3,c
  6155  0008E0  C0C0  F011         	movff	_sec,?i2_printf+4
  6156  0008E4  6A12               	clrf	?i2_printf+5,c
  6157  0008E6  EC5B  F008         	call	i2_printf	;wreg free
  6158                           
  6159                           ;main.c: 553: if (waitPlats)
  6160  0008EA  504B               	movf	_waitPlats,w,c
  6161  0008EC  A4D8               	btfss	status,2,c
  6162                           
  6163                           ;main.c: 554: waitPlats--;
  6164  0008EE  064B               	decf	_waitPlats,f,c
  6165                           
  6166                           ;main.c: 555: if (opTimer >= 180){
  6167  0008F0  0EB3               	movlw	179
  6168  0008F2  6447               	cpfsgt	_opTimer,c
  6169  0008F4  D005               	goto	i2l3978
  6170                           
  6171                           ;main.c: 556: screenMode = 0;
  6172  0008F6  0E00               	movlw	0
  6173  0008F8  0100               	movlb	0	; () banked
  6174  0008FA  6FC7               	movwf	_screenMode& (0+255),b
  6175                           
  6176                           ; BSR set to: 0
  6177                           ;main.c: 557: stopOperation();
  6178  0008FC  EC35  F00B         	call	i2_stopOperation	;wreg free
  6179  000900                     i2l3978:
  6180                           
  6181                           ;main.c: 558: }
  6182                           ;main.c: 560: if (!sorting){
  6183  000900  5048               	movf	_sorting,w,c
  6184  000902  A4D8               	btfss	status,2,c
  6185  000904  D013               	goto	i2l3992
  6186                           
  6187                           ;main.c: 561: if (ADRES > 50)
  6188  000906  50C4               	movf	4036,w,c	;volatile
  6189  000908  E104               	bnz	i2u412_40
  6190  00090A  0E33               	movlw	51
  6191  00090C  5CC3               	subwf	4035,w,c	;volatile
  6192  00090E  A0D8               	btfss	status,0,c
  6193  000910  D002               	goto	i2l3984
  6194  000912                     i2u412_40:
  6195                           
  6196                           ;main.c: 562: doneTimer++;
  6197  000912  2A46               	incf	_doneTimer,f,c
  6198  000914  D002               	goto	i2l3986
  6199  000916                     i2l3984:
  6200                           
  6201                           ;main.c: 563: else
  6202                           ;main.c: 564: doneTimer = 0;
  6203  000916  0E00               	movlw	0
  6204  000918  6E46               	movwf	_doneTimer,c
  6205  00091A                     i2l3986:
  6206                           
  6207                           ;main.c: 565: if (doneTimer >= 10){
  6208  00091A  0E09               	movlw	9
  6209  00091C  6446               	cpfsgt	_doneTimer,c
  6210  00091E  D008               	goto	i2l3994
  6211                           
  6212                           ;main.c: 566: screenMode = 0;
  6213  000920  0E00               	movlw	0
  6214  000922  0100               	movlb	0	; () banked
  6215  000924  6FC7               	movwf	_screenMode& (0+255),b
  6216                           
  6217                           ; BSR set to: 0
  6218                           ;main.c: 567: stopOperation();
  6219  000926  EC35  F00B         	call	i2_stopOperation	;wreg free
  6220                           
  6221                           ;main.c: 568: }
  6222                           ;main.c: 569: }
  6223  00092A  D002               	goto	i2l3994
  6224  00092C                     i2l3992:
  6225                           
  6226                           ;main.c: 570: else
  6227                           ;main.c: 571: doneTimer = 0;
  6228  00092C  0E00               	movlw	0
  6229  00092E  6E46               	movwf	_doneTimer,c
  6230  000930                     i2l3994:
  6231                           
  6232                           ;main.c: 572: }
  6233                           ;main.c: 573: if (screenMode == 1 && TMR1IF){
  6234  000930  0100               	movlb	0	; () banked
  6235  000932  05C7               	decf	_screenMode& (0+255),w,b
  6236  000934  B4D8               	btfsc	status,2,c
  6237                           
  6238                           ; BSR set to: 0
  6239  000936  A09E               	btfss	3998,0,c	;volatile
  6240  000938  D1CA               	goto	i2l430
  6241                           
  6242                           ; BSR set to: 0
  6243                           ;main.c: 574: TMR1IF = 0;
  6244  00093A  909E               	bcf	3998,0,c	;volatile
  6245                           
  6246                           ; BSR set to: 0
  6247                           ;main.c: 575: TMR1 = 58035;
  6248  00093C  0EE2               	movlw	226
  6249  00093E  6ECF               	movwf	4047,c	;volatile
  6250  000940  0EB3               	movlw	179
  6251  000942  6ECE               	movwf	4046,c	;volatile
  6252                           
  6253                           ; BSR set to: 0
  6254                           ;main.c: 576: if (count_3ms)
  6255  000944  5040               	movf	_count_3ms,w,c
  6256  000946  1041               	iorwf	_count_3ms+1,w,c
  6257  000948  B4D8               	btfsc	status,2,c
  6258  00094A  D003               	goto	i2l371
  6259                           
  6260                           ; BSR set to: 0
  6261                           ;main.c: 577: count_3ms--;
  6262  00094C  0640               	decf	_count_3ms,f,c
  6263  00094E  A0D8               	btfss	status,0,c
  6264  000950  0641               	decf	_count_3ms+1,f,c
  6265  000952                     i2l371:
  6266                           
  6267                           ; BSR set to: 0
  6268                           ;main.c: 578: solOnTimer++;
  6269  000952  4A42               	infsnz	_solOnTimer,f,c
  6270  000954  2A43               	incf	_solOnTimer+1,f,c
  6271                           
  6272                           ; BSR set to: 0
  6273                           ;main.c: 579: if (solOnTimer >= 133){
  6274  000956  5043               	movf	_solOnTimer+1,w,c
  6275  000958  E104               	bnz	i2u417_40
  6276  00095A  0E85               	movlw	133
  6277  00095C  5C42               	subwf	_solOnTimer,w,c
  6278  00095E  A0D8               	btfss	status,0,c
  6279  000960  D00F               	goto	i2l4012
  6280  000962                     i2u417_40:
  6281                           
  6282                           ; BSR set to: 0
  6283                           ;main.c: 580: solOnTimer = 0;
  6284  000962  0E00               	movlw	0
  6285  000964  6E43               	movwf	_solOnTimer+1,c
  6286  000966  0E00               	movlw	0
  6287  000968  6E42               	movwf	_solOnTimer,c
  6288                           
  6289                           ; BSR set to: 0
  6290                           ;main.c: 581: LATCbits.LC0 = !LATCbits.LC0;;
  6291  00096A  B08B               	btfsc	3979,0,c	;volatile
  6292  00096C  D003               	goto	i2u418_40
  6293  00096E  6A24               	clrf	??_ISR& (0+255),c
  6294  000970  2A24               	incf	??_ISR& (0+255),f,c
  6295  000972  D001               	goto	i2u419_48
  6296  000974                     i2u418_40:
  6297  000974  6A24               	clrf	??_ISR& (0+255),c
  6298  000976                     i2u419_48:
  6299  000976  508B               	movf	3979,w,c	;volatile
  6300  000978  1824               	xorwf	??_ISR,w,c
  6301  00097A  0BFE               	andlw	-2
  6302  00097C  1824               	xorwf	??_ISR,w,c
  6303  00097E  6E8B               	movwf	3979,c	;volatile
  6304  000980                     i2l4012:
  6305                           
  6306                           ;main.c: 582: }
  6307                           ;main.c: 583: if (stepGear != 0){
  6308  000980  0100               	movlb	0	; () banked
  6309  000982  51C2               	movf	_stepGear& (0+255),w,b
  6310  000984  B4D8               	btfsc	status,2,c
  6311  000986  D0DB               	goto	i2l4094
  6312                           
  6313                           ; BSR set to: 0
  6314                           ;main.c: 584: if (stepGear == 1){
  6315  000988  0100               	movlb	0	; () banked
  6316  00098A  05C2               	decf	_stepGear& (0+255),w,b
  6317  00098C  A4D8               	btfss	status,2,c
  6318  00098E  D017               	goto	i2l4024
  6319                           
  6320                           ; BSR set to: 0
  6321                           ;main.c: 585: stepAmount++;
  6322  000990  4A44               	infsnz	_stepAmount,f,c
  6323  000992  2A45               	incf	_stepAmount+1,f,c
  6324                           
  6325                           ; BSR set to: 0
  6326                           ;main.c: 586: LATCbits.LC2 = !LATCbits.LC2;;
  6327  000994  B48B               	btfsc	3979,2,c	;volatile
  6328  000996  D003               	goto	i2u422_40
  6329  000998  6A24               	clrf	??_ISR& (0+255),c
  6330  00099A  2A24               	incf	??_ISR& (0+255),f,c
  6331  00099C  D001               	goto	i2u423_48
  6332  00099E                     i2u422_40:
  6333  00099E  6A24               	clrf	??_ISR& (0+255),c
  6334  0009A0                     i2u423_48:
  6335  0009A0  4624               	rlncf	??_ISR,f,c
  6336  0009A2  4624               	rlncf	??_ISR,f,c
  6337  0009A4  508B               	movf	3979,w,c	;volatile
  6338  0009A6  1824               	xorwf	??_ISR,w,c
  6339  0009A8  0BFB               	andlw	-5
  6340  0009AA  1824               	xorwf	??_ISR,w,c
  6341  0009AC  6E8B               	movwf	3979,c	;volatile
  6342                           
  6343                           ;main.c: 587: if (stepAmount >= 380){
  6344  0009AE  0E7C               	movlw	124
  6345  0009B0  5C44               	subwf	_stepAmount,w,c
  6346  0009B2  0E01               	movlw	1
  6347  0009B4  5845               	subwfb	_stepAmount+1,w,c
  6348  0009B6  A0D8               	btfss	status,0,c
  6349  0009B8  D0C2               	goto	i2l4094
  6350                           
  6351                           ;main.c: 588: stepGear = 2;
  6352  0009BA  0E02               	movlw	2
  6353  0009BC  D012               	goto	L4
  6354  0009BE                     i2l4024:
  6355                           
  6356                           ; BSR set to: 0
  6357                           ;main.c: 591: else if (stepGear == 2){
  6358  0009BE  0E02               	movlw	2
  6359  0009C0  0100               	movlb	0	; () banked
  6360  0009C2  19C2               	xorwf	_stepGear& (0+255),w,b
  6361  0009C4  A4D8               	btfss	status,2,c
  6362  0009C6  D010               	goto	i2l4032
  6363                           
  6364                           ; BSR set to: 0
  6365                           ;main.c: 592: stepAmount++;
  6366  0009C8  4A44               	infsnz	_stepAmount,f,c
  6367  0009CA  2A45               	incf	_stepAmount+1,f,c
  6368                           
  6369                           ; BSR set to: 0
  6370                           ;main.c: 593: if (stepAmount >= 100){
  6371  0009CC  5045               	movf	_stepAmount+1,w,c
  6372  0009CE  E104               	bnz	i2u426_40
  6373  0009D0  0E64               	movlw	100
  6374  0009D2  5C44               	subwf	_stepAmount,w,c
  6375  0009D4  A0D8               	btfss	status,0,c
  6376  0009D6  D0B3               	goto	i2l4094
  6377  0009D8                     i2u426_40:
  6378                           
  6379                           ; BSR set to: 0
  6380                           ;main.c: 594: stepAmount = 0;
  6381  0009D8  0E00               	movlw	0
  6382  0009DA  6E45               	movwf	_stepAmount+1,c
  6383  0009DC  0E00               	movlw	0
  6384  0009DE  6E44               	movwf	_stepAmount,c
  6385                           
  6386                           ;main.c: 595: stepGear = 3;
  6387  0009E0  0E03               	movlw	3
  6388  0009E2                     L4:
  6389  0009E2  0100               	movlb	0	; () banked
  6390  0009E4  6FC2               	movwf	_stepGear& (0+255),b
  6391                           
  6392                           ; BSR set to: 0
  6393                           ;main.c: 596: }
  6394                           ;main.c: 597: }
  6395  0009E6  D0AB               	goto	i2l4094
  6396  0009E8                     i2l4032:
  6397                           
  6398                           ; BSR set to: 0
  6399                           ;main.c: 598: else if (stepGear == 3){
  6400  0009E8  0E03               	movlw	3
  6401  0009EA  0100               	movlb	0	; () banked
  6402  0009EC  19C2               	xorwf	_stepGear& (0+255),w,b
  6403  0009EE  A4D8               	btfss	status,2,c
  6404  0009F0  D01D               	goto	i2l4044
  6405                           
  6406                           ; BSR set to: 0
  6407                           ;main.c: 599: stepAmount++;
  6408  0009F2  4A44               	infsnz	_stepAmount,f,c
  6409  0009F4  2A45               	incf	_stepAmount+1,f,c
  6410                           
  6411                           ; BSR set to: 0
  6412                           ;main.c: 600: LATCbits.LC2 = !LATCbits.LC2;;
  6413  0009F6  B48B               	btfsc	3979,2,c	;volatile
  6414  0009F8  D003               	goto	i2u428_40
  6415  0009FA  6A24               	clrf	??_ISR& (0+255),c
  6416  0009FC  2A24               	incf	??_ISR& (0+255),f,c
  6417  0009FE  D001               	goto	i2u429_48
  6418  000A00                     i2u428_40:
  6419  000A00  6A24               	clrf	??_ISR& (0+255),c
  6420  000A02                     i2u429_48:
  6421  000A02  4624               	rlncf	??_ISR,f,c
  6422  000A04  4624               	rlncf	??_ISR,f,c
  6423  000A06  508B               	movf	3979,w,c	;volatile
  6424  000A08  1824               	xorwf	??_ISR,w,c
  6425  000A0A  0BFB               	andlw	-5
  6426  000A0C  1824               	xorwf	??_ISR,w,c
  6427  000A0E  6E8B               	movwf	3979,c	;volatile
  6428                           
  6429                           ;main.c: 601: if (stepAmount >= 40){
  6430  000A10  5045               	movf	_stepAmount+1,w,c
  6431  000A12  E104               	bnz	i2u430_40
  6432  000A14  0E28               	movlw	40
  6433  000A16  5C44               	subwf	_stepAmount,w,c
  6434  000A18  A0D8               	btfss	status,0,c
  6435  000A1A  D091               	goto	i2l4094
  6436  000A1C                     i2u430_40:
  6437                           
  6438                           ;main.c: 602: stepAmount = 0;
  6439  000A1C  0E00               	movlw	0
  6440  000A1E  6E45               	movwf	_stepAmount+1,c
  6441  000A20  0E00               	movlw	0
  6442  000A22  6E44               	movwf	_stepAmount,c
  6443                           
  6444                           ;main.c: 603: stepGear = 4;
  6445  000A24  0E04               	movlw	4
  6446  000A26  D043               	goto	L5
  6447  000A28                     i2l4042:
  6448                           
  6449                           ; BSR set to: 0
  6450                           ;main.c: 604: LATCbits.LC1= 1;;
  6451  000A28  828B               	bsf	3979,1,c	;volatile
  6452                           
  6453                           ; BSR set to: 0
  6454                           ;main.c: 605: }
  6455                           ;main.c: 606: }
  6456  000A2A  D089               	goto	i2l4094
  6457  000A2C                     i2l4044:
  6458                           
  6459                           ; BSR set to: 0
  6460                           ;main.c: 607: else if (stepGear == 4){
  6461  000A2C  0E04               	movlw	4
  6462  000A2E  0100               	movlb	0	; () banked
  6463  000A30  19C2               	xorwf	_stepGear& (0+255),w,b
  6464  000A32  A4D8               	btfss	status,2,c
  6465  000A34  D01D               	goto	i2l4056
  6466                           
  6467                           ; BSR set to: 0
  6468                           ;main.c: 608: stepAmount++;
  6469  000A36  4A44               	infsnz	_stepAmount,f,c
  6470  000A38  2A45               	incf	_stepAmount+1,f,c
  6471                           
  6472                           ; BSR set to: 0
  6473                           ;main.c: 609: LATCbits.LC2 = !LATCbits.LC2;;
  6474  000A3A  B48B               	btfsc	3979,2,c	;volatile
  6475  000A3C  D003               	goto	i2u432_40
  6476  000A3E  6A24               	clrf	??_ISR& (0+255),c
  6477  000A40  2A24               	incf	??_ISR& (0+255),f,c
  6478  000A42  D001               	goto	i2u433_48
  6479  000A44                     i2u432_40:
  6480  000A44  6A24               	clrf	??_ISR& (0+255),c
  6481  000A46                     i2u433_48:
  6482  000A46  4624               	rlncf	??_ISR,f,c
  6483  000A48  4624               	rlncf	??_ISR,f,c
  6484  000A4A  508B               	movf	3979,w,c	;volatile
  6485  000A4C  1824               	xorwf	??_ISR,w,c
  6486  000A4E  0BFB               	andlw	-5
  6487  000A50  1824               	xorwf	??_ISR,w,c
  6488  000A52  6E8B               	movwf	3979,c	;volatile
  6489                           
  6490                           ;main.c: 610: if (stepAmount >= 40){
  6491  000A54  5045               	movf	_stepAmount+1,w,c
  6492  000A56  E104               	bnz	i2u434_40
  6493  000A58  0E28               	movlw	40
  6494  000A5A  5C44               	subwf	_stepAmount,w,c
  6495  000A5C  A0D8               	btfss	status,0,c
  6496  000A5E  D06F               	goto	i2l4094
  6497  000A60                     i2u434_40:
  6498                           
  6499                           ;main.c: 611: stepAmount = 0;
  6500  000A60  0E00               	movlw	0
  6501  000A62  6E45               	movwf	_stepAmount+1,c
  6502  000A64  0E00               	movlw	0
  6503  000A66  6E44               	movwf	_stepAmount,c
  6504                           
  6505                           ;main.c: 612: stepGear = 5;
  6506  000A68  0E05               	movlw	5
  6507  000A6A  D043               	goto	L6
  6508  000A6C                     i2l4054:
  6509                           
  6510                           ; BSR set to: 0
  6511                           ;main.c: 613: LATCbits.LC1= 0;;
  6512  000A6C  928B               	bcf	3979,1,c	;volatile
  6513                           
  6514                           ; BSR set to: 0
  6515                           ;main.c: 614: }
  6516                           ;main.c: 615: }
  6517  000A6E  D067               	goto	i2l4094
  6518  000A70                     i2l4056:
  6519                           
  6520                           ; BSR set to: 0
  6521                           ;main.c: 616: else if (stepGear == 5){
  6522  000A70  0E05               	movlw	5
  6523  000A72  0100               	movlb	0	; () banked
  6524  000A74  19C2               	xorwf	_stepGear& (0+255),w,b
  6525  000A76  A4D8               	btfss	status,2,c
  6526  000A78  D01D               	goto	i2l4068
  6527                           
  6528                           ; BSR set to: 0
  6529                           ;main.c: 617: stepAmount++;
  6530  000A7A  4A44               	infsnz	_stepAmount,f,c
  6531  000A7C  2A45               	incf	_stepAmount+1,f,c
  6532                           
  6533                           ; BSR set to: 0
  6534                           ;main.c: 618: LATCbits.LC2 = !LATCbits.LC2;;
  6535  000A7E  B48B               	btfsc	3979,2,c	;volatile
  6536  000A80  D003               	goto	i2u436_40
  6537  000A82  6A24               	clrf	??_ISR& (0+255),c
  6538  000A84  2A24               	incf	??_ISR& (0+255),f,c
  6539  000A86  D001               	goto	i2u437_48
  6540  000A88                     i2u436_40:
  6541  000A88  6A24               	clrf	??_ISR& (0+255),c
  6542  000A8A                     i2u437_48:
  6543  000A8A  4624               	rlncf	??_ISR,f,c
  6544  000A8C  4624               	rlncf	??_ISR,f,c
  6545  000A8E  508B               	movf	3979,w,c	;volatile
  6546  000A90  1824               	xorwf	??_ISR,w,c
  6547  000A92  0BFB               	andlw	-5
  6548  000A94  1824               	xorwf	??_ISR,w,c
  6549  000A96  6E8B               	movwf	3979,c	;volatile
  6550                           
  6551                           ;main.c: 619: if (stepAmount >= 40){
  6552  000A98  5045               	movf	_stepAmount+1,w,c
  6553  000A9A  E104               	bnz	i2u438_40
  6554  000A9C  0E28               	movlw	40
  6555  000A9E  5C44               	subwf	_stepAmount,w,c
  6556  000AA0  A0D8               	btfss	status,0,c
  6557  000AA2  D04D               	goto	i2l4094
  6558  000AA4                     i2u438_40:
  6559                           
  6560                           ;main.c: 620: stepAmount = 0;
  6561  000AA4  0E00               	movlw	0
  6562  000AA6  6E45               	movwf	_stepAmount+1,c
  6563  000AA8  0E00               	movlw	0
  6564  000AAA  6E44               	movwf	_stepAmount,c
  6565                           
  6566                           ;main.c: 621: stepGear = 6;
  6567  000AAC  0E06               	movlw	6
  6568  000AAE                     L5:
  6569  000AAE  0100               	movlb	0	; () banked
  6570  000AB0  6FC2               	movwf	_stepGear& (0+255),b
  6571  000AB2  D7BA               	goto	i2l4042
  6572  000AB4                     i2l4068:
  6573                           
  6574                           ; BSR set to: 0
  6575                           ;main.c: 625: else if (stepGear == 6){
  6576  000AB4  0E06               	movlw	6
  6577  000AB6  0100               	movlb	0	; () banked
  6578  000AB8  19C2               	xorwf	_stepGear& (0+255),w,b
  6579  000ABA  A4D8               	btfss	status,2,c
  6580  000ABC  D01D               	goto	i2l4080
  6581                           
  6582                           ; BSR set to: 0
  6583                           ;main.c: 626: stepAmount++;
  6584  000ABE  4A44               	infsnz	_stepAmount,f,c
  6585  000AC0  2A45               	incf	_stepAmount+1,f,c
  6586                           
  6587                           ; BSR set to: 0
  6588                           ;main.c: 627: LATCbits.LC2 = !LATCbits.LC2;;
  6589  000AC2  B48B               	btfsc	3979,2,c	;volatile
  6590  000AC4  D003               	goto	i2u440_40
  6591  000AC6  6A24               	clrf	??_ISR& (0+255),c
  6592  000AC8  2A24               	incf	??_ISR& (0+255),f,c
  6593  000ACA  D001               	goto	i2u441_48
  6594  000ACC                     i2u440_40:
  6595  000ACC  6A24               	clrf	??_ISR& (0+255),c
  6596  000ACE                     i2u441_48:
  6597  000ACE  4624               	rlncf	??_ISR,f,c
  6598  000AD0  4624               	rlncf	??_ISR,f,c
  6599  000AD2  508B               	movf	3979,w,c	;volatile
  6600  000AD4  1824               	xorwf	??_ISR,w,c
  6601  000AD6  0BFB               	andlw	-5
  6602  000AD8  1824               	xorwf	??_ISR,w,c
  6603  000ADA  6E8B               	movwf	3979,c	;volatile
  6604                           
  6605                           ;main.c: 628: if (stepAmount >= 40){
  6606  000ADC  5045               	movf	_stepAmount+1,w,c
  6607  000ADE  E104               	bnz	i2u442_40
  6608  000AE0  0E28               	movlw	40
  6609  000AE2  5C44               	subwf	_stepAmount,w,c
  6610  000AE4  A0D8               	btfss	status,0,c
  6611  000AE6  D02B               	goto	i2l4094
  6612  000AE8                     i2u442_40:
  6613                           
  6614                           ;main.c: 629: stepAmount = 0;
  6615  000AE8  0E00               	movlw	0
  6616  000AEA  6E45               	movwf	_stepAmount+1,c
  6617  000AEC  0E00               	movlw	0
  6618  000AEE  6E44               	movwf	_stepAmount,c
  6619                           
  6620                           ;main.c: 630: stepGear = 7;
  6621  000AF0  0E07               	movlw	7
  6622  000AF2                     L6:
  6623  000AF2  0100               	movlb	0	; () banked
  6624  000AF4  6FC2               	movwf	_stepGear& (0+255),b
  6625  000AF6  D7BA               	goto	i2l4054
  6626  000AF8                     i2l4080:
  6627                           
  6628                           ; BSR set to: 0
  6629                           ;main.c: 634: else if (stepGear == 7){
  6630  000AF8  0E07               	movlw	7
  6631  000AFA  0100               	movlb	0	; () banked
  6632  000AFC  19C2               	xorwf	_stepGear& (0+255),w,b
  6633  000AFE  A4D8               	btfss	status,2,c
  6634  000B00  D01E               	goto	i2l4094
  6635                           
  6636                           ; BSR set to: 0
  6637                           ;main.c: 635: stepAmount ++;
  6638  000B02  4A44               	infsnz	_stepAmount,f,c
  6639  000B04  2A45               	incf	_stepAmount+1,f,c
  6640                           
  6641                           ; BSR set to: 0
  6642                           ;main.c: 636: LATCbits.LC2 = !LATCbits.LC2;;
  6643  000B06  B48B               	btfsc	3979,2,c	;volatile
  6644  000B08  D003               	goto	i2u444_40
  6645  000B0A  6A24               	clrf	??_ISR& (0+255),c
  6646  000B0C  2A24               	incf	??_ISR& (0+255),f,c
  6647  000B0E  D001               	goto	i2u445_48
  6648  000B10                     i2u444_40:
  6649  000B10  6A24               	clrf	??_ISR& (0+255),c
  6650  000B12                     i2u445_48:
  6651  000B12  4624               	rlncf	??_ISR,f,c
  6652  000B14  4624               	rlncf	??_ISR,f,c
  6653  000B16  508B               	movf	3979,w,c	;volatile
  6654  000B18  1824               	xorwf	??_ISR,w,c
  6655  000B1A  0BFB               	andlw	-5
  6656  000B1C  1824               	xorwf	??_ISR,w,c
  6657  000B1E  6E8B               	movwf	3979,c	;volatile
  6658                           
  6659                           ;main.c: 637: if (stepAmount >= 20){
  6660  000B20  5045               	movf	_stepAmount+1,w,c
  6661  000B22  E104               	bnz	i2u446_40
  6662  000B24  0E14               	movlw	20
  6663  000B26  5C44               	subwf	_stepAmount,w,c
  6664  000B28  A0D8               	btfss	status,0,c
  6665  000B2A  D009               	goto	i2l4094
  6666  000B2C                     i2u446_40:
  6667                           
  6668                           ;main.c: 638: stepAmount = 0;
  6669  000B2C  0E00               	movlw	0
  6670  000B2E  6E45               	movwf	_stepAmount+1,c
  6671  000B30  0E00               	movlw	0
  6672  000B32  6E44               	movwf	_stepAmount,c
  6673                           
  6674                           ;main.c: 639: stepGear = 0;
  6675  000B34  0E00               	movlw	0
  6676  000B36  0100               	movlb	0	; () banked
  6677  000B38  6FC2               	movwf	_stepGear& (0+255),b
  6678                           
  6679                           ; BSR set to: 0
  6680                           ;main.c: 640: LATCbits.LC1= 0;;
  6681  000B3A  928B               	bcf	3979,1,c	;volatile
  6682                           
  6683                           ; BSR set to: 0
  6684                           ;main.c: 641: LATCbits.LC2 = 0;;
  6685  000B3C  948B               	bcf	3979,2,c	;volatile
  6686  000B3E                     i2l4094:
  6687                           
  6688                           ;main.c: 642: }
  6689                           ;main.c: 643: }
  6690                           ;main.c: 645: }
  6691                           ;main.c: 646: if (plat1Left){
  6692  000B3E  0100               	movlb	0	; () banked
  6693  000B40  51AE               	movf	_plat1Left& (0+255),w,b
  6694  000B42  0100               	movlb	0	; () banked
  6695  000B44  11AF               	iorwf	(_plat1Left+1)& (0+255),w,b
  6696  000B46  B4D8               	btfsc	status,2,c
  6697  000B48  D02C               	goto	i2l4124
  6698                           
  6699                           ; BSR set to: 0
  6700                           ;main.c: 647: if (step1 == 1){
  6701  000B4A  0449               	decf	_step1,w,c
  6702  000B4C  A4D8               	btfss	status,2,c
  6703  000B4E  D002               	goto	i2l4100
  6704                           
  6705                           ; BSR set to: 0
  6706                           ;main.c: 648: LATAbits.LA5 = 1;;
  6707  000B50  8A89               	bsf	3977,5,c	;volatile
  6708                           
  6709                           ;main.c: 649: LATAbits.LA4 = 0;;
  6710  000B52  9889               	bcf	3977,4,c	;volatile
  6711  000B54                     i2l4100:
  6712                           
  6713                           ; BSR set to: 0
  6714                           ;main.c: 650: }
  6715                           ;main.c: 651: if (step1 == 2){
  6716  000B54  0E02               	movlw	2
  6717  000B56  1849               	xorwf	_step1,w,c
  6718  000B58  A4D8               	btfss	status,2,c
  6719  000B5A  D002               	goto	i2l4104
  6720                           
  6721                           ; BSR set to: 0
  6722                           ;main.c: 652: LATAbits.LA2 = 0;;
  6723  000B5C  9489               	bcf	3977,2,c	;volatile
  6724                           
  6725                           ;main.c: 653: LATAbits.LA3 = 1;;
  6726  000B5E  8689               	bsf	3977,3,c	;volatile
  6727  000B60                     i2l4104:
  6728                           
  6729                           ; BSR set to: 0
  6730                           ;main.c: 654: }
  6731                           ;main.c: 655: if (step1 == 3){
  6732  000B60  0E03               	movlw	3
  6733  000B62  1849               	xorwf	_step1,w,c
  6734  000B64  A4D8               	btfss	status,2,c
  6735  000B66  D002               	goto	i2l4108
  6736                           
  6737                           ; BSR set to: 0
  6738                           ;main.c: 656: LATAbits.LA5 = 0;;
  6739  000B68  9A89               	bcf	3977,5,c	;volatile
  6740                           
  6741                           ;main.c: 657: LATAbits.LA4 = 1;;
  6742  000B6A  8889               	bsf	3977,4,c	;volatile
  6743  000B6C                     i2l4108:
  6744                           
  6745                           ; BSR set to: 0
  6746                           ;main.c: 658: }
  6747                           ;main.c: 659: if (step1 == 4){
  6748  000B6C  0E04               	movlw	4
  6749  000B6E  1849               	xorwf	_step1,w,c
  6750  000B70  A4D8               	btfss	status,2,c
  6751  000B72  D002               	goto	i2l4112
  6752                           
  6753                           ; BSR set to: 0
  6754                           ;main.c: 660: LATAbits.LA2 = 1;;
  6755  000B74  8489               	bsf	3977,2,c	;volatile
  6756                           
  6757                           ;main.c: 661: LATAbits.LA3 = 0;;
  6758  000B76  9689               	bcf	3977,3,c	;volatile
  6759  000B78                     i2l4112:
  6760                           
  6761                           ; BSR set to: 0
  6762                           ;main.c: 662: }
  6763                           ;main.c: 663: plat1Left++;
  6764  000B78  0100               	movlb	0	; () banked
  6765  000B7A  4BAE               	infsnz	_plat1Left& (0+255),f,b
  6766  000B7C  2BAF               	incf	(_plat1Left+1)& (0+255),f,b
  6767                           
  6768                           ; BSR set to: 0
  6769                           ;main.c: 664: if (plat1Left>=512){
  6770  000B7E  0E02               	movlw	2
  6771  000B80  0100               	movlb	0	; () banked
  6772  000B82  5DAF               	subwf	(_plat1Left+1)& (0+255),w,b
  6773  000B84  A0D8               	btfss	status,0,c
  6774  000B86  D006               	goto	i2l4118
  6775                           
  6776                           ; BSR set to: 0
  6777                           ;main.c: 665: plat1Left = 0;
  6778  000B88  0E00               	movlw	0
  6779  000B8A  0100               	movlb	0	; () banked
  6780  000B8C  6FAF               	movwf	(_plat1Left+1)& (0+255),b
  6781  000B8E  0E00               	movlw	0
  6782  000B90  6FAE               	movwf	_plat1Left& (0+255),b
  6783                           
  6784                           ;main.c: 666: }
  6785  000B92  D007               	goto	i2l4124
  6786  000B94                     i2l4118:
  6787                           
  6788                           ; BSR set to: 0
  6789                           ;main.c: 667: else if (step1>=4)
  6790  000B94  0E03               	movlw	3
  6791  000B96  6449               	cpfsgt	_step1,c
  6792  000B98  D003               	goto	i2l4122
  6793                           
  6794                           ; BSR set to: 0
  6795                           ;main.c: 668: step1 = 1;
  6796  000B9A  0E01               	movlw	1
  6797  000B9C  6E49               	movwf	_step1,c
  6798  000B9E  D001               	goto	i2l4124
  6799  000BA0                     i2l4122:
  6800                           
  6801                           ; BSR set to: 0
  6802                           ;main.c: 669: else
  6803                           ;main.c: 670: step1++;
  6804  000BA0  2A49               	incf	_step1,f,c
  6805  000BA2                     i2l4124:
  6806                           
  6807                           ; BSR set to: 0
  6808                           ;main.c: 671: }
  6809                           ;main.c: 672: if (plat1Right){
  6810  000BA2  0100               	movlb	0	; () banked
  6811  000BA4  51B0               	movf	_plat1Right& (0+255),w,b
  6812  000BA6  0100               	movlb	0	; () banked
  6813  000BA8  11B1               	iorwf	(_plat1Right+1)& (0+255),w,b
  6814  000BAA  B4D8               	btfsc	status,2,c
  6815  000BAC  D02C               	goto	i2l4154
  6816                           
  6817                           ; BSR set to: 0
  6818                           ;main.c: 673: if (step1 == 4){
  6819  000BAE  0E04               	movlw	4
  6820  000BB0  1849               	xorwf	_step1,w,c
  6821  000BB2  A4D8               	btfss	status,2,c
  6822  000BB4  D002               	goto	i2l4130
  6823                           
  6824                           ; BSR set to: 0
  6825                           ;main.c: 674: LATAbits.LA5 = 0;;
  6826  000BB6  9A89               	bcf	3977,5,c	;volatile
  6827                           
  6828                           ;main.c: 675: LATAbits.LA4 = 1;;
  6829  000BB8  8889               	bsf	3977,4,c	;volatile
  6830  000BBA                     i2l4130:
  6831                           
  6832                           ; BSR set to: 0
  6833                           ;main.c: 676: }
  6834                           ;main.c: 677: if (step1 == 3){
  6835  000BBA  0E03               	movlw	3
  6836  000BBC  1849               	xorwf	_step1,w,c
  6837  000BBE  A4D8               	btfss	status,2,c
  6838  000BC0  D002               	goto	i2l4134
  6839                           
  6840                           ; BSR set to: 0
  6841                           ;main.c: 678: LATAbits.LA2 = 0;;
  6842  000BC2  9489               	bcf	3977,2,c	;volatile
  6843                           
  6844                           ;main.c: 679: LATAbits.LA3 = 1;;
  6845  000BC4  8689               	bsf	3977,3,c	;volatile
  6846  000BC6                     i2l4134:
  6847                           
  6848                           ; BSR set to: 0
  6849                           ;main.c: 680: }
  6850                           ;main.c: 681: if (step1 == 2){
  6851  000BC6  0E02               	movlw	2
  6852  000BC8  1849               	xorwf	_step1,w,c
  6853  000BCA  A4D8               	btfss	status,2,c
  6854  000BCC  D002               	goto	i2l4138
  6855                           
  6856                           ; BSR set to: 0
  6857                           ;main.c: 682: LATAbits.LA5 = 1;;
  6858  000BCE  8A89               	bsf	3977,5,c	;volatile
  6859                           
  6860                           ;main.c: 683: LATAbits.LA4 = 0;;
  6861  000BD0  9889               	bcf	3977,4,c	;volatile
  6862  000BD2                     i2l4138:
  6863                           
  6864                           ; BSR set to: 0
  6865                           ;main.c: 684: }
  6866                           ;main.c: 685: if (step1 == 1){
  6867  000BD2  0449               	decf	_step1,w,c
  6868  000BD4  A4D8               	btfss	status,2,c
  6869  000BD6  D002               	goto	i2l4142
  6870                           
  6871                           ; BSR set to: 0
  6872                           ;main.c: 686: LATAbits.LA2 = 1;;
  6873  000BD8  8489               	bsf	3977,2,c	;volatile
  6874                           
  6875                           ;main.c: 687: LATAbits.LA3 = 0;;
  6876  000BDA  9689               	bcf	3977,3,c	;volatile
  6877  000BDC                     i2l4142:
  6878                           
  6879                           ; BSR set to: 0
  6880                           ;main.c: 688: }
  6881                           ;main.c: 689: plat1Right++;
  6882  000BDC  0100               	movlb	0	; () banked
  6883  000BDE  4BB0               	infsnz	_plat1Right& (0+255),f,b
  6884  000BE0  2BB1               	incf	(_plat1Right+1)& (0+255),f,b
  6885                           
  6886                           ; BSR set to: 0
  6887                           ;main.c: 690: if (plat1Right>=512){
  6888  000BE2  0E02               	movlw	2
  6889  000BE4  0100               	movlb	0	; () banked
  6890  000BE6  5DB1               	subwf	(_plat1Right+1)& (0+255),w,b
  6891  000BE8  A0D8               	btfss	status,0,c
  6892  000BEA  D006               	goto	i2l4148
  6893                           
  6894                           ; BSR set to: 0
  6895                           ;main.c: 691: plat1Right = 0;
  6896  000BEC  0E00               	movlw	0
  6897  000BEE  0100               	movlb	0	; () banked
  6898  000BF0  6FB1               	movwf	(_plat1Right+1)& (0+255),b
  6899  000BF2  0E00               	movlw	0
  6900  000BF4  6FB0               	movwf	_plat1Right& (0+255),b
  6901                           
  6902                           ;main.c: 692: }
  6903  000BF6  D007               	goto	i2l4154
  6904  000BF8                     i2l4148:
  6905                           
  6906                           ; BSR set to: 0
  6907                           ;main.c: 693: else if (step1<=1)
  6908  000BF8  0E02               	movlw	2
  6909  000BFA  6049               	cpfslt	_step1,c
  6910  000BFC  D003               	goto	i2l4152
  6911                           
  6912                           ; BSR set to: 0
  6913                           ;main.c: 694: step1 = 4;
  6914  000BFE  0E04               	movlw	4
  6915  000C00  6E49               	movwf	_step1,c
  6916  000C02  D001               	goto	i2l4154
  6917  000C04                     i2l4152:
  6918                           
  6919                           ; BSR set to: 0
  6920                           ;main.c: 695: else
  6921                           ;main.c: 696: step1--;
  6922  000C04  0649               	decf	_step1,f,c
  6923  000C06                     i2l4154:
  6924                           
  6925                           ; BSR set to: 0
  6926                           ;main.c: 697: }
  6927                           ;main.c: 698: if (plat2Left){
  6928  000C06  0100               	movlb	0	; () banked
  6929  000C08  51B2               	movf	_plat2Left& (0+255),w,b
  6930  000C0A  0100               	movlb	0	; () banked
  6931  000C0C  11B3               	iorwf	(_plat2Left+1)& (0+255),w,b
  6932  000C0E  B4D8               	btfsc	status,2,c
  6933  000C10  D02C               	goto	i2l4184
  6934                           
  6935                           ; BSR set to: 0
  6936                           ;main.c: 699: if (step2 == 1){
  6937  000C12  044A               	decf	_step2,w,c
  6938  000C14  A4D8               	btfss	status,2,c
  6939  000C16  D002               	goto	i2l4160
  6940                           
  6941                           ; BSR set to: 0
  6942                           ;main.c: 700: LATEbits.LE2 = 1;;
  6943  000C18  848D               	bsf	3981,2,c	;volatile
  6944                           
  6945                           ;main.c: 701: LATCbits.LC6 = 0;;
  6946  000C1A  9C8B               	bcf	3979,6,c	;volatile
  6947  000C1C                     i2l4160:
  6948                           
  6949                           ; BSR set to: 0
  6950                           ;main.c: 702: }
  6951                           ;main.c: 703: if (step2 == 2){
  6952  000C1C  0E02               	movlw	2
  6953  000C1E  184A               	xorwf	_step2,w,c
  6954  000C20  A4D8               	btfss	status,2,c
  6955  000C22  D002               	goto	i2l4164
  6956                           
  6957                           ; BSR set to: 0
  6958                           ;main.c: 704: LATBbits.LB0 = 0;;
  6959  000C24  908A               	bcf	3978,0,c	;volatile
  6960                           
  6961                           ;main.c: 705: LATBbits.LB2 = 1;;
  6962  000C26  848A               	bsf	3978,2,c	;volatile
  6963  000C28                     i2l4164:
  6964                           
  6965                           ; BSR set to: 0
  6966                           ;main.c: 706: }
  6967                           ;main.c: 707: if (step2 == 3){
  6968  000C28  0E03               	movlw	3
  6969  000C2A  184A               	xorwf	_step2,w,c
  6970  000C2C  A4D8               	btfss	status,2,c
  6971  000C2E  D002               	goto	i2l4168
  6972                           
  6973                           ; BSR set to: 0
  6974                           ;main.c: 708: LATEbits.LE2 = 0;;
  6975  000C30  948D               	bcf	3981,2,c	;volatile
  6976                           
  6977                           ;main.c: 709: LATCbits.LC6 = 1;;
  6978  000C32  8C8B               	bsf	3979,6,c	;volatile
  6979  000C34                     i2l4168:
  6980                           
  6981                           ; BSR set to: 0
  6982                           ;main.c: 710: }
  6983                           ;main.c: 711: if (step2 == 4){
  6984  000C34  0E04               	movlw	4
  6985  000C36  184A               	xorwf	_step2,w,c
  6986  000C38  A4D8               	btfss	status,2,c
  6987  000C3A  D002               	goto	i2l4172
  6988                           
  6989                           ; BSR set to: 0
  6990                           ;main.c: 712: LATBbits.LB0 = 1;;
  6991  000C3C  808A               	bsf	3978,0,c	;volatile
  6992                           
  6993                           ;main.c: 713: LATBbits.LB2 = 0;;
  6994  000C3E  948A               	bcf	3978,2,c	;volatile
  6995  000C40                     i2l4172:
  6996                           
  6997                           ; BSR set to: 0
  6998                           ;main.c: 714: }
  6999                           ;main.c: 715: plat2Left++;
  7000  000C40  0100               	movlb	0	; () banked
  7001  000C42  4BB2               	infsnz	_plat2Left& (0+255),f,b
  7002  000C44  2BB3               	incf	(_plat2Left+1)& (0+255),f,b
  7003                           
  7004                           ; BSR set to: 0
  7005                           ;main.c: 716: if (plat2Left>=512){
  7006  000C46  0E02               	movlw	2
  7007  000C48  0100               	movlb	0	; () banked
  7008  000C4A  5DB3               	subwf	(_plat2Left+1)& (0+255),w,b
  7009  000C4C  A0D8               	btfss	status,0,c
  7010  000C4E  D006               	goto	i2l4178
  7011                           
  7012                           ; BSR set to: 0
  7013                           ;main.c: 717: plat2Left = 0;
  7014  000C50  0E00               	movlw	0
  7015  000C52  0100               	movlb	0	; () banked
  7016  000C54  6FB3               	movwf	(_plat2Left+1)& (0+255),b
  7017  000C56  0E00               	movlw	0
  7018  000C58  6FB2               	movwf	_plat2Left& (0+255),b
  7019                           
  7020                           ;main.c: 718: }
  7021  000C5A  D007               	goto	i2l4184
  7022  000C5C                     i2l4178:
  7023                           
  7024                           ; BSR set to: 0
  7025                           ;main.c: 719: else if (step2>=4)
  7026  000C5C  0E03               	movlw	3
  7027  000C5E  644A               	cpfsgt	_step2,c
  7028  000C60  D003               	goto	i2l4182
  7029                           
  7030                           ; BSR set to: 0
  7031                           ;main.c: 720: step2 = 1;
  7032  000C62  0E01               	movlw	1
  7033  000C64  6E4A               	movwf	_step2,c
  7034  000C66  D001               	goto	i2l4184
  7035  000C68                     i2l4182:
  7036                           
  7037                           ; BSR set to: 0
  7038                           ;main.c: 721: else
  7039                           ;main.c: 722: step2++;
  7040  000C68  2A4A               	incf	_step2,f,c
  7041  000C6A                     i2l4184:
  7042                           
  7043                           ; BSR set to: 0
  7044                           ;main.c: 723: }
  7045                           ;main.c: 724: if (plat2Right){
  7046  000C6A  0100               	movlb	0	; () banked
  7047  000C6C  51B4               	movf	_plat2Right& (0+255),w,b
  7048  000C6E  0100               	movlb	0	; () banked
  7049  000C70  11B5               	iorwf	(_plat2Right+1)& (0+255),w,b
  7050  000C72  B4D8               	btfsc	status,2,c
  7051  000C74  D02C               	goto	i2l430
  7052                           
  7053                           ; BSR set to: 0
  7054                           ;main.c: 725: if (step2 == 4){
  7055  000C76  0E04               	movlw	4
  7056  000C78  184A               	xorwf	_step2,w,c
  7057  000C7A  A4D8               	btfss	status,2,c
  7058  000C7C  D002               	goto	i2l4190
  7059                           
  7060                           ; BSR set to: 0
  7061                           ;main.c: 726: LATEbits.LE2 = 0;;
  7062  000C7E  948D               	bcf	3981,2,c	;volatile
  7063                           
  7064                           ;main.c: 727: LATCbits.LC6 = 1;;
  7065  000C80  8C8B               	bsf	3979,6,c	;volatile
  7066  000C82                     i2l4190:
  7067                           
  7068                           ; BSR set to: 0
  7069                           ;main.c: 728: }
  7070                           ;main.c: 729: if (step2 == 3){
  7071  000C82  0E03               	movlw	3
  7072  000C84  184A               	xorwf	_step2,w,c
  7073  000C86  A4D8               	btfss	status,2,c
  7074  000C88  D002               	goto	i2l4194
  7075                           
  7076                           ; BSR set to: 0
  7077                           ;main.c: 730: LATBbits.LB0 = 0;;
  7078  000C8A  908A               	bcf	3978,0,c	;volatile
  7079                           
  7080                           ;main.c: 731: LATBbits.LB2 = 1;;
  7081  000C8C  848A               	bsf	3978,2,c	;volatile
  7082  000C8E                     i2l4194:
  7083                           
  7084                           ; BSR set to: 0
  7085                           ;main.c: 732: }
  7086                           ;main.c: 733: if (step2 == 2){
  7087  000C8E  0E02               	movlw	2
  7088  000C90  184A               	xorwf	_step2,w,c
  7089  000C92  A4D8               	btfss	status,2,c
  7090  000C94  D002               	goto	i2l4198
  7091                           
  7092                           ; BSR set to: 0
  7093                           ;main.c: 734: LATEbits.LE2 = 1;;
  7094  000C96  848D               	bsf	3981,2,c	;volatile
  7095                           
  7096                           ;main.c: 735: LATCbits.LC6 = 0;;
  7097  000C98  9C8B               	bcf	3979,6,c	;volatile
  7098  000C9A                     i2l4198:
  7099                           
  7100                           ; BSR set to: 0
  7101                           ;main.c: 736: }
  7102                           ;main.c: 737: if (step2 == 1){
  7103  000C9A  044A               	decf	_step2,w,c
  7104  000C9C  A4D8               	btfss	status,2,c
  7105  000C9E  D002               	goto	i2l4202
  7106                           
  7107                           ; BSR set to: 0
  7108                           ;main.c: 738: LATBbits.LB0 = 1;;
  7109  000CA0  808A               	bsf	3978,0,c	;volatile
  7110                           
  7111                           ;main.c: 739: LATBbits.LB2 = 0;;
  7112  000CA2  948A               	bcf	3978,2,c	;volatile
  7113  000CA4                     i2l4202:
  7114                           
  7115                           ; BSR set to: 0
  7116                           ;main.c: 740: }
  7117                           ;main.c: 741: plat2Right++;
  7118  000CA4  0100               	movlb	0	; () banked
  7119  000CA6  4BB4               	infsnz	_plat2Right& (0+255),f,b
  7120  000CA8  2BB5               	incf	(_plat2Right+1)& (0+255),f,b
  7121                           
  7122                           ; BSR set to: 0
  7123                           ;main.c: 742: if (plat2Right>=512){
  7124  000CAA  0E02               	movlw	2
  7125  000CAC  0100               	movlb	0	; () banked
  7126  000CAE  5DB5               	subwf	(_plat2Right+1)& (0+255),w,b
  7127  000CB0  A0D8               	btfss	status,0,c
  7128  000CB2  D006               	goto	i2l4208
  7129                           
  7130                           ; BSR set to: 0
  7131                           ;main.c: 743: plat2Right = 0;
  7132  000CB4  0E00               	movlw	0
  7133  000CB6  0100               	movlb	0	; () banked
  7134  000CB8  6FB5               	movwf	(_plat2Right+1)& (0+255),b
  7135  000CBA  0E00               	movlw	0
  7136  000CBC  6FB4               	movwf	_plat2Right& (0+255),b
  7137                           
  7138                           ;main.c: 744: }
  7139  000CBE  D007               	goto	i2l430
  7140  000CC0                     i2l4208:
  7141                           
  7142                           ; BSR set to: 0
  7143                           ;main.c: 745: else if (step2<=1)
  7144  000CC0  0E02               	movlw	2
  7145  000CC2  604A               	cpfslt	_step2,c
  7146  000CC4  D003               	goto	i2l4212
  7147                           
  7148                           ; BSR set to: 0
  7149                           ;main.c: 746: step2 = 4;
  7150  000CC6  0E04               	movlw	4
  7151  000CC8  6E4A               	movwf	_step2,c
  7152  000CCA  D001               	goto	i2l430
  7153  000CCC                     i2l4212:
  7154                           
  7155                           ; BSR set to: 0
  7156                           ;main.c: 747: else
  7157                           ;main.c: 748: step2--;
  7158  000CCC  064A               	decf	_step2,f,c
  7159  000CCE                     i2l430:
  7160                           
  7161                           ; BSR set to: 0
  7162  000CCE  C032  FFF5         	movff	??_ISR+14,tablat
  7163  000CD2  C031  FFF8         	movff	??_ISR+13,tblptru
  7164  000CD6  C030  FFF7         	movff	??_ISR+12,tblptrh
  7165  000CDA  C02F  FFF6         	movff	??_ISR+11,tblptrl
  7166  000CDE  C02E  FFF4         	movff	??_ISR+10,prodh
  7167  000CE2  C02D  FFF3         	movff	??_ISR+9,prodl
  7168  000CE6  C02C  FFDA         	movff	??_ISR+8,fsr2h
  7169  000CEA  C02B  FFD9         	movff	??_ISR+7,fsr2l
  7170  000CEE  C02A  FFE2         	movff	??_ISR+6,fsr1h
  7171  000CF2  C029  FFE1         	movff	??_ISR+5,fsr1l
  7172  000CF6  C028  FFEA         	movff	??_ISR+4,fsr0h
  7173  000CFA  C027  FFE9         	movff	??_ISR+3,fsr0l
  7174  000CFE  C026  FFFB         	movff	??_ISR+2,pclatu
  7175  000D02  C025  FFFA         	movff	??_ISR+1,pclath
  7176  000D06  924C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7177  000D08  0011               	retfie		f
  7178  000D0A                     __end_of_ISR:
  7179                           	opt stack 0
  7180                           pclatu	equ	0xFFB
  7181                           pclath	equ	0xFFA
  7182                           tblptru	equ	0xFF8
  7183                           tblptrh	equ	0xFF7
  7184                           tblptrl	equ	0xFF6
  7185                           tablat	equ	0xFF5
  7186                           prodh	equ	0xFF4
  7187                           prodl	equ	0xFF3
  7188                           intcon	equ	0xFF2
  7189                           intcon3	equ	0xFF0
  7190                           postinc0	equ	0xFEE
  7191                           fsr0h	equ	0xFEA
  7192                           fsr0l	equ	0xFE9
  7193                           wreg	equ	0xFE8
  7194                           fsr1h	equ	0xFE2
  7195                           fsr1l	equ	0xFE1
  7196                           indf2	equ	0xFDF
  7197                           postinc2	equ	0xFDE
  7198                           postdec2	equ	0xFDD
  7199                           fsr2h	equ	0xFDA
  7200                           fsr2l	equ	0xFD9
  7201                           status	equ	0xFD8
  7202                           
  7203 ;; *************** function _switchMenu *****************
  7204 ;; Defined at:
  7205 ;;		line 330 in file "../main.c"
  7206 ;; Parameters:    Size  Location     Type
  7207 ;;  left            1    wreg     unsigned char 
  7208 ;;  right           1   32[COMRAM] unsigned char 
  7209 ;;  key             1   33[COMRAM] unsigned char 
  7210 ;; Auto vars:     Size  Location     Type
  7211 ;;  left            1   34[COMRAM] unsigned char 
  7212 ;; Return value:  Size  Location     Type
  7213 ;;                  1    wreg      void 
  7214 ;; Registers used:
  7215 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7216 ;; Tracked objects:
  7217 ;;		On entry : 0/0
  7218 ;;		On exit  : 0/0
  7219 ;;		Unchanged: 0/0
  7220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7221 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7222 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7223 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7224 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7225 ;;Total ram usage:        3 bytes
  7226 ;; Hardware stack levels used:    1
  7227 ;; Hardware stack levels required when called:    3
  7228 ;; This function calls:
  7229 ;;		i2_lcdInst
  7230 ;;		i2_printf
  7231 ;;		i2_stopOperation
  7232 ;; This function is called by:
  7233 ;;		_ISR
  7234 ;; This function uses a non-reentrant model
  7235 ;;
  7236                           
  7237                           	psect	text24
  7238  001768                     __ptext24:
  7239                           	opt stack 0
  7240  001768                     _switchMenu:
  7241                           	opt stack 23
  7242                           
  7243                           ; BSR set to: 0
  7244                           ;incstack = 0
  7245                           ;switchMenu@left stored from wreg
  7246  001768  6E23               	movwf	switchMenu@left,c
  7247                           
  7248                           ;main.c: 332: if (key == '*'){
  7249  00176A  0E2A               	movlw	42
  7250  00176C  1822               	xorwf	switchMenu@key,w,c
  7251  00176E  A4D8               	btfss	status,2,c
  7252  001770  D020               	goto	i2l3582
  7253                           
  7254                           ;main.c: 334: if(screenMode == 2){
  7255  001772  0E02               	movlw	2
  7256  001774  0100               	movlb	0	; () banked
  7257  001776  19C7               	xorwf	_screenMode& (0+255),w,b
  7258  001778  A4D8               	btfss	status,2,c
  7259  00177A  D013               	goto	i2l3578
  7260                           
  7261                           ; BSR set to: 0
  7262                           ;main.c: 335: screenMode = 1;
  7263  00177C  0E01               	movlw	1
  7264  00177E  0100               	movlb	0	; () banked
  7265  001780  6FC7               	movwf	_screenMode& (0+255),b
  7266                           
  7267                           ; BSR set to: 0
  7268                           ;main.c: 336: T0CONbits.TMR0ON = 1;
  7269  001782  8ED5               	bsf	4053,7,c	;volatile
  7270                           
  7271                           ; BSR set to: 0
  7272                           ;main.c: 337: T1CONbits.TMR1ON = 1;
  7273  001784  80CD               	bsf	4045,0,c	;volatile
  7274                           
  7275                           ;main.c: 338: startGear = 1;
  7276  001786  0E01               	movlw	1
  7277  001788  0100               	movlb	0	; () banked
  7278  00178A  6FC1               	movwf	_startGear& (0+255),b
  7279                           
  7280                           ; BSR set to: 0
  7281                           ;main.c: 339: lcdInst(0b10000000);;
  7282  00178C  0E80               	movlw	128
  7283  00178E  EC20  F00F         	call	i2_lcdInst
  7284                           
  7285                           ;main.c: 340: printf("RUNNING: 00:00  ");
  7286  001792  0E98               	movlw	low STR_22
  7287  001794  6E0D               	movwf	i2printf@f,c
  7288  001796  0EFF               	movlw	high STR_22
  7289  001798  6E0E               	movwf	i2printf@f+1,c
  7290  00179A  EC5B  F008         	call	i2_printf	;wreg free
  7291                           
  7292                           ;main.c: 341: LATCbits.LC0 = 1;;
  7293  00179E  808B               	bsf	3979,0,c	;volatile
  7294                           
  7295                           ;main.c: 342: }
  7296  0017A0  0012               	return	
  7297  0017A2                     i2l3578:
  7298                           
  7299                           ;main.c: 343: else if (screenMode == 0)
  7300  0017A2  0100               	movlb	0	; () banked
  7301  0017A4  51C7               	movf	_screenMode& (0+255),w,b
  7302  0017A6  A4D8               	btfss	status,2,c
  7303  0017A8  0012               	return	
  7304                           
  7305                           ; BSR set to: 0
  7306                           ;main.c: 344: screenMode = 2;
  7307  0017AA  0E02               	movlw	2
  7308  0017AC  0100               	movlb	0	; () banked
  7309  0017AE  6FC7               	movwf	_screenMode& (0+255),b
  7310                           
  7311                           ; BSR set to: 0
  7312                           ;main.c: 345: }
  7313                           
  7314                           ; BSR set to: 0
  7315  0017B0  0012               	return	
  7316  0017B2                     i2l3582:
  7317                           
  7318                           ;main.c: 346: else if (screenMode == 1){
  7319  0017B2  0100               	movlb	0	; () banked
  7320  0017B4  05C7               	decf	_screenMode& (0+255),w,b
  7321  0017B6  A4D8               	btfss	status,2,c
  7322  0017B8  D00C               	goto	i2l3592
  7323                           
  7324                           ; BSR set to: 0
  7325                           ;main.c: 347: if (key == '#'){
  7326  0017BA  0E23               	movlw	35
  7327  0017BC  1822               	xorwf	switchMenu@key,w,c
  7328  0017BE  A4D8               	btfss	status,2,c
  7329  0017C0  0012               	return	
  7330                           
  7331                           ; BSR set to: 0
  7332                           ;main.c: 348: screenMode = 10;
  7333  0017C2  0E0A               	movlw	10
  7334  0017C4  0100               	movlb	0	; () banked
  7335  0017C6  6FC7               	movwf	_screenMode& (0+255),b
  7336                           
  7337                           ; BSR set to: 0
  7338                           ;main.c: 349: countDrain--;
  7339  0017C8  0100               	movlb	0	; () banked
  7340  0017CA  07B9               	decf	_countDrain& (0+255),f,b
  7341                           
  7342                           ; BSR set to: 0
  7343                           ;main.c: 350: stopOperation();
  7344  0017CC  EC35  F00B         	call	i2_stopOperation	;wreg free
  7345                           
  7346                           ;main.c: 351: }
  7347                           ;main.c: 352: }
  7348  0017D0  0012               	return	
  7349  0017D2                     i2l3592:
  7350                           
  7351                           ;main.c: 353: else if (screenMode != 0){
  7352  0017D2  0100               	movlb	0	; () banked
  7353  0017D4  51C7               	movf	_screenMode& (0+255),w,b
  7354  0017D6  B4D8               	btfsc	status,2,c
  7355  0017D8  0012               	return	
  7356                           
  7357                           ; BSR set to: 0
  7358                           ;main.c: 354: if (key == right){
  7359  0017DA  5021               	movf	switchMenu@right,w,c
  7360  0017DC  1822               	xorwf	switchMenu@key,w,c
  7361  0017DE  A4D8               	btfss	status,2,c
  7362  0017E0  D00C               	goto	i2l3602
  7363                           
  7364                           ; BSR set to: 0
  7365                           ;main.c: 355: if (screenMode == 2)
  7366  0017E2  0E02               	movlw	2
  7367  0017E4  0100               	movlb	0	; () banked
  7368  0017E6  19C7               	xorwf	_screenMode& (0+255),w,b
  7369  0017E8  A4D8               	btfss	status,2,c
  7370  0017EA  D004               	goto	i2l3600
  7371                           
  7372                           ; BSR set to: 0
  7373                           ;main.c: 356: screenMode = 9;
  7374  0017EC  0E09               	movlw	9
  7375  0017EE  0100               	movlb	0	; () banked
  7376  0017F0  6FC7               	movwf	_screenMode& (0+255),b
  7377  0017F2  0012               	return	
  7378  0017F4                     i2l3600:
  7379                           
  7380                           ; BSR set to: 0
  7381                           ;main.c: 357: else
  7382                           ;main.c: 358: screenMode--;
  7383  0017F4  0100               	movlb	0	; () banked
  7384  0017F6  07C7               	decf	_screenMode& (0+255),f,b
  7385                           
  7386                           ; BSR set to: 0
  7387                           ;main.c: 359: }
  7388  0017F8  0012               	return	
  7389  0017FA                     i2l3602:
  7390                           
  7391                           ; BSR set to: 0
  7392                           ;main.c: 360: else if (key == left){
  7393  0017FA  5023               	movf	switchMenu@left,w,c
  7394  0017FC  1822               	xorwf	switchMenu@key,w,c
  7395  0017FE  A4D8               	btfss	status,2,c
  7396  001800  0012               	return	
  7397                           
  7398                           ; BSR set to: 0
  7399                           ;main.c: 361: if (screenMode == 9)
  7400  001802  0E09               	movlw	9
  7401  001804  0100               	movlb	0	; () banked
  7402  001806  19C7               	xorwf	_screenMode& (0+255),w,b
  7403  001808  A4D8               	btfss	status,2,c
  7404  00180A  D004               	goto	i2l3608
  7405                           
  7406                           ; BSR set to: 0
  7407                           ;main.c: 362: screenMode = 2;
  7408  00180C  0E02               	movlw	2
  7409  00180E  0100               	movlb	0	; () banked
  7410  001810  6FC7               	movwf	_screenMode& (0+255),b
  7411  001812  0012               	return	
  7412  001814                     i2l3608:
  7413                           
  7414                           ; BSR set to: 0
  7415                           ;main.c: 363: else
  7416                           ;main.c: 364: screenMode++;
  7417  001814  0100               	movlb	0	; () banked
  7418  001816  2BC7               	incf	_screenMode& (0+255),f,b
  7419                           
  7420                           ; BSR set to: 0
  7421                           
  7422                           ; BSR set to: 0
  7423                           
  7424                           ; BSR set to: 0
  7425                           
  7426                           ; BSR set to: 0
  7427                           
  7428                           ; BSR set to: 0
  7429  001818  0012               	return	
  7430  00181A                     __end_of_switchMenu:
  7431                           	opt stack 0
  7432                           pclatu	equ	0xFFB
  7433                           pclath	equ	0xFFA
  7434                           tblptru	equ	0xFF8
  7435                           tblptrh	equ	0xFF7
  7436                           tblptrl	equ	0xFF6
  7437                           tablat	equ	0xFF5
  7438                           prodh	equ	0xFF4
  7439                           prodl	equ	0xFF3
  7440                           intcon	equ	0xFF2
  7441                           intcon3	equ	0xFF0
  7442                           postinc0	equ	0xFEE
  7443                           fsr0h	equ	0xFEA
  7444                           fsr0l	equ	0xFE9
  7445                           wreg	equ	0xFE8
  7446                           fsr1h	equ	0xFE2
  7447                           fsr1l	equ	0xFE1
  7448                           indf2	equ	0xFDF
  7449                           postinc2	equ	0xFDE
  7450                           postdec2	equ	0xFDD
  7451                           fsr2h	equ	0xFDA
  7452                           fsr2l	equ	0xFD9
  7453                           status	equ	0xFD8
  7454                           
  7455 ;; *************** function i2_stopOperation *****************
  7456 ;; Defined at:
  7457 ;;		line 377 in file "../main.c"
  7458 ;; Parameters:    Size  Location     Type
  7459 ;;		None
  7460 ;; Auto vars:     Size  Location     Type
  7461 ;;		None
  7462 ;; Return value:  Size  Location     Type
  7463 ;;                  1    wreg      void 
  7464 ;; Registers used:
  7465 ;;		wreg, status,2, status,0, cstack
  7466 ;; Tracked objects:
  7467 ;;		On entry : 0/0
  7468 ;;		On exit  : 0/0
  7469 ;;		Unchanged: 0/0
  7470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7472 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7473 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7474 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7475 ;;Total ram usage:        0 bytes
  7476 ;; Hardware stack levels used:    1
  7477 ;; Hardware stack levels required when called:    1
  7478 ;; This function calls:
  7479 ;;		i2___awdiv
  7480 ;;		i2___awmod
  7481 ;; This function is called by:
  7482 ;;		_switchMenu
  7483 ;;		_ISR
  7484 ;; This function uses a non-reentrant model
  7485 ;;
  7486                           
  7487                           	psect	text25
  7488  00166A                     __ptext25:
  7489                           	opt stack 0
  7490  00166A                     i2_stopOperation:
  7491                           	opt stack 25
  7492                           
  7493                           ;main.c: 378: T0CONbits.TMR0ON = 0;
  7494                           
  7495                           ;incstack = 0
  7496  00166A  9ED5               	bcf	4053,7,c	;volatile
  7497                           
  7498                           ;main.c: 379: T1CONbits.TMR1ON = 0;
  7499  00166C  90CD               	bcf	4045,0,c	;volatile
  7500                           
  7501                           ;main.c: 380: TMR0 = 55770;
  7502  00166E  0ED9               	movlw	217
  7503  001670  6ED7               	movwf	4055,c	;volatile
  7504  001672  0EDA               	movlw	218
  7505  001674  6ED6               	movwf	4054,c	;volatile
  7506                           
  7507                           ;main.c: 381: TMR1 = 58035;
  7508  001676  0EE2               	movlw	226
  7509  001678  6ECF               	movwf	4047,c	;volatile
  7510  00167A  0EB3               	movlw	179
  7511  00167C  6ECE               	movwf	4046,c	;volatile
  7512                           
  7513                           ;main.c: 382: num9V = count9V;
  7514  00167E  C0B6  F0BB         	movff	_count9V,_num9V
  7515                           
  7516                           ;main.c: 383: numC = countC;
  7517  001682  C0B8  F0BE         	movff	_countC,_numC
  7518                           
  7519                           ;main.c: 384: numAA = countAA;
  7520  001686  C0B7  F0BC         	movff	_countAA,_numAA
  7521                           
  7522                           ;main.c: 385: numDrain = countDrain;
  7523  00168A  C0B9  F0BF         	movff	_countDrain,_numDrain
  7524                           
  7525                           ;main.c: 386: count9V = 0;
  7526  00168E  0E00               	movlw	0
  7527  001690  0100               	movlb	0	; () banked
  7528  001692  6FB6               	movwf	_count9V& (0+255),b
  7529                           
  7530                           ;main.c: 387: countC = 0;
  7531  001694  0E00               	movlw	0
  7532  001696  0100               	movlb	0	; () banked
  7533  001698  6FB8               	movwf	_countC& (0+255),b
  7534                           
  7535                           ;main.c: 388: countAA = 0;
  7536  00169A  0E00               	movlw	0
  7537  00169C  0100               	movlb	0	; () banked
  7538  00169E  6FB7               	movwf	_countAA& (0+255),b
  7539                           
  7540                           ;main.c: 389: countDrain = 0;
  7541  0016A0  0E00               	movlw	0
  7542  0016A2  0100               	movlb	0	; () banked
  7543  0016A4  6FB9               	movwf	_countDrain& (0+255),b
  7544                           
  7545                           ; BSR set to: 0
  7546                           ;main.c: 390: min = opTimer / 60;
  7547  0016A6  C047  F001         	movff	_opTimer,i2___awdiv@dividend
  7548  0016AA  6A02               	clrf	i2___awdiv@dividend+1,c
  7549  0016AC  0E00               	movlw	0
  7550  0016AE  6E04               	movwf	i2___awdiv@divisor+1,c
  7551  0016B0  0E3C               	movlw	60
  7552  0016B2  6E03               	movwf	i2___awdiv@divisor,c
  7553  0016B4  EC96  F00C         	call	i2___awdiv	;wreg free
  7554  0016B8  5001               	movf	?i2___awdiv,w,c
  7555  0016BA  0100               	movlb	0	; () banked
  7556  0016BC  6FBA               	movwf	_min& (0+255),b
  7557                           
  7558                           ; BSR set to: 0
  7559                           ;main.c: 391: sec = opTimer % 60;
  7560  0016BE  C047  F001         	movff	_opTimer,i2___awmod@dividend
  7561  0016C2  6A02               	clrf	i2___awmod@dividend+1,c
  7562  0016C4  0E00               	movlw	0
  7563  0016C6  6E04               	movwf	i2___awmod@divisor+1,c
  7564  0016C8  0E3C               	movlw	60
  7565  0016CA  6E03               	movwf	i2___awmod@divisor,c
  7566  0016CC  EC10  F00D         	call	i2___awmod	;wreg free
  7567  0016D0  5001               	movf	?i2___awmod,w,c
  7568  0016D2  0100               	movlb	0	; () banked
  7569  0016D4  6FC0               	movwf	_sec& (0+255),b
  7570                           
  7571                           ;main.c: 392: opTimer = 0;
  7572  0016D6  0E00               	movlw	0
  7573  0016D8  6E47               	movwf	_opTimer,c
  7574                           
  7575                           ;main.c: 393: doneTimer = 0;
  7576  0016DA  0E00               	movlw	0
  7577  0016DC  6E46               	movwf	_doneTimer,c
  7578                           
  7579                           ;main.c: 394: waitPlats = 0;
  7580  0016DE  0E00               	movlw	0
  7581  0016E0  6E4B               	movwf	_waitPlats,c
  7582                           
  7583                           ;main.c: 395: stepGear = 0;
  7584  0016E2  0E00               	movlw	0
  7585  0016E4  0100               	movlb	0	; () banked
  7586  0016E6  6FC2               	movwf	_stepGear& (0+255),b
  7587                           
  7588                           ;main.c: 396: stepAmount = 0;
  7589  0016E8  0E00               	movlw	0
  7590  0016EA  6E45               	movwf	_stepAmount+1,c
  7591  0016EC  0E00               	movlw	0
  7592  0016EE  6E44               	movwf	_stepAmount,c
  7593                           
  7594                           ;main.c: 397: sorting = 0;
  7595  0016F0  0E00               	movlw	0
  7596  0016F2  6E48               	movwf	_sorting,c
  7597                           
  7598                           ;main.c: 398: plat1Left = 0;
  7599  0016F4  0E00               	movlw	0
  7600  0016F6  0100               	movlb	0	; () banked
  7601  0016F8  6FAF               	movwf	(_plat1Left+1)& (0+255),b
  7602  0016FA  0E00               	movlw	0
  7603  0016FC  6FAE               	movwf	_plat1Left& (0+255),b
  7604                           
  7605                           ;main.c: 399: plat1Right = 0;
  7606  0016FE  0E00               	movlw	0
  7607  001700  0100               	movlb	0	; () banked
  7608  001702  6FB1               	movwf	(_plat1Right+1)& (0+255),b
  7609  001704  0E00               	movlw	0
  7610  001706  6FB0               	movwf	_plat1Right& (0+255),b
  7611                           
  7612                           ;main.c: 400: plat2Left = 0;
  7613  001708  0E00               	movlw	0
  7614  00170A  0100               	movlb	0	; () banked
  7615  00170C  6FB3               	movwf	(_plat2Left+1)& (0+255),b
  7616  00170E  0E00               	movlw	0
  7617  001710  6FB2               	movwf	_plat2Left& (0+255),b
  7618                           
  7619                           ;main.c: 401: plat2Right = 0;
  7620  001712  0E00               	movlw	0
  7621  001714  0100               	movlb	0	; () banked
  7622  001716  6FB5               	movwf	(_plat2Right+1)& (0+255),b
  7623  001718  0E00               	movlw	0
  7624  00171A  6FB4               	movwf	_plat2Right& (0+255),b
  7625                           
  7626                           ;main.c: 402: turn2BackLeft = 0;
  7627  00171C  0E00               	movlw	0
  7628  00171E  0100               	movlb	0	; () banked
  7629  001720  6FC5               	movwf	_turn2BackLeft& (0+255),b
  7630                           
  7631                           ;main.c: 403: turn1BackLeft = 0;
  7632  001722  0E00               	movlw	0
  7633  001724  0100               	movlb	0	; () banked
  7634  001726  6FC3               	movwf	_turn1BackLeft& (0+255),b
  7635                           
  7636                           ;main.c: 404: turn2BackRight = 0;
  7637  001728  0E00               	movlw	0
  7638  00172A  0100               	movlb	0	; () banked
  7639  00172C  6FC6               	movwf	_turn2BackRight& (0+255),b
  7640                           
  7641                           ;main.c: 405: turn1BackRight = 0;
  7642  00172E  0E00               	movlw	0
  7643  001730  0100               	movlb	0	; () banked
  7644  001732  6FC4               	movwf	_turn1BackRight& (0+255),b
  7645                           
  7646                           ;main.c: 406: count_3ms = 0;
  7647  001734  0E00               	movlw	0
  7648  001736  6E41               	movwf	_count_3ms+1,c
  7649  001738  0E00               	movlw	0
  7650  00173A  6E40               	movwf	_count_3ms,c
  7651                           
  7652                           ;main.c: 407: solOnTimer = 0;
  7653  00173C  0E00               	movlw	0
  7654  00173E  6E43               	movwf	_solOnTimer+1,c
  7655  001740  0E00               	movlw	0
  7656  001742  6E42               	movwf	_solOnTimer,c
  7657                           
  7658                           ; BSR set to: 0
  7659                           ;main.c: 408: LATEbits.LE0 = 0;;
  7660  001744  908D               	bcf	3981,0,c	;volatile
  7661                           
  7662                           ; BSR set to: 0
  7663                           ;main.c: 409: LATEbits.LE1 = 0;;
  7664  001746  928D               	bcf	3981,1,c	;volatile
  7665                           
  7666                           ; BSR set to: 0
  7667                           ;main.c: 410: LATCbits.LC5 = 0;;
  7668  001748  9A8B               	bcf	3979,5,c	;volatile
  7669                           
  7670                           ; BSR set to: 0
  7671                           ;main.c: 411: LATDbits.LD0 = 0;;
  7672  00174A  908C               	bcf	3980,0,c	;volatile
  7673                           
  7674                           ; BSR set to: 0
  7675                           ;main.c: 412: LATDbits.LD1 = 0;;
  7676  00174C  928C               	bcf	3980,1,c	;volatile
  7677                           
  7678                           ; BSR set to: 0
  7679                           ;main.c: 413: LATAbits.LA2 = 0;;
  7680  00174E  9489               	bcf	3977,2,c	;volatile
  7681                           
  7682                           ; BSR set to: 0
  7683                           ;main.c: 414: LATAbits.LA3 = 0;;
  7684  001750  9689               	bcf	3977,3,c	;volatile
  7685                           
  7686                           ; BSR set to: 0
  7687                           ;main.c: 415: LATAbits.LA4 = 0;;
  7688  001752  9889               	bcf	3977,4,c	;volatile
  7689                           
  7690                           ; BSR set to: 0
  7691                           ;main.c: 416: LATAbits.LA5 = 0;;
  7692  001754  9A89               	bcf	3977,5,c	;volatile
  7693                           
  7694                           ; BSR set to: 0
  7695                           ;main.c: 417: LATBbits.LB0 = 0;;
  7696  001756  908A               	bcf	3978,0,c	;volatile
  7697                           
  7698                           ; BSR set to: 0
  7699                           ;main.c: 418: LATBbits.LB2 = 0;;
  7700  001758  948A               	bcf	3978,2,c	;volatile
  7701                           
  7702                           ; BSR set to: 0
  7703                           ;main.c: 419: LATCbits.LC6 = 0;;
  7704  00175A  9C8B               	bcf	3979,6,c	;volatile
  7705                           
  7706                           ; BSR set to: 0
  7707                           ;main.c: 420: LATEbits.LE2 = 0;;
  7708  00175C  948D               	bcf	3981,2,c	;volatile
  7709                           
  7710                           ; BSR set to: 0
  7711                           ;main.c: 421: LATCbits.LC1= 0;;
  7712  00175E  928B               	bcf	3979,1,c	;volatile
  7713                           
  7714                           ; BSR set to: 0
  7715                           ;main.c: 422: LATCbits.LC7 = 0;;
  7716  001760  9E8B               	bcf	3979,7,c	;volatile
  7717                           
  7718                           ; BSR set to: 0
  7719                           ;main.c: 423: LATCbits.LC2 = 0;;
  7720  001762  948B               	bcf	3979,2,c	;volatile
  7721                           
  7722                           ; BSR set to: 0
  7723                           ;main.c: 424: LATCbits.LC0 = 0;;
  7724  001764  908B               	bcf	3979,0,c	;volatile
  7725                           
  7726                           ; BSR set to: 0
  7727  001766  0012               	return		;funcret
  7728  001768                     __end_ofi2_stopOperation:
  7729                           	opt stack 0
  7730                           pclatu	equ	0xFFB
  7731                           pclath	equ	0xFFA
  7732                           tblptru	equ	0xFF8
  7733                           tblptrh	equ	0xFF7
  7734                           tblptrl	equ	0xFF6
  7735                           tablat	equ	0xFF5
  7736                           prodh	equ	0xFF4
  7737                           prodl	equ	0xFF3
  7738                           intcon	equ	0xFF2
  7739                           intcon3	equ	0xFF0
  7740                           postinc0	equ	0xFEE
  7741                           fsr0h	equ	0xFEA
  7742                           fsr0l	equ	0xFE9
  7743                           wreg	equ	0xFE8
  7744                           fsr1h	equ	0xFE2
  7745                           fsr1l	equ	0xFE1
  7746                           indf2	equ	0xFDF
  7747                           postinc2	equ	0xFDE
  7748                           postdec2	equ	0xFDD
  7749                           fsr2h	equ	0xFDA
  7750                           fsr2l	equ	0xFD9
  7751                           status	equ	0xFD8
  7752                           
  7753 ;; *************** function i2___awmod *****************
  7754 ;; Defined at:
  7755 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  7756 ;; Parameters:    Size  Location     Type
  7757 ;;  dividend        2    0[COMRAM] int 
  7758 ;;  divisor         2    2[COMRAM] int 
  7759 ;; Auto vars:     Size  Location     Type
  7760 ;;  __awmod         1    5[COMRAM] unsigned char 
  7761 ;;  __awmod         1    4[COMRAM] unsigned char 
  7762 ;; Return value:  Size  Location     Type
  7763 ;;                  2    0[COMRAM] int 
  7764 ;; Registers used:
  7765 ;;		wreg, status,2, status,0
  7766 ;; Tracked objects:
  7767 ;;		On entry : 0/0
  7768 ;;		On exit  : 0/0
  7769 ;;		Unchanged: 0/0
  7770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7771 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7772 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7773 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7774 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7775 ;;Total ram usage:        6 bytes
  7776 ;; Hardware stack levels used:    1
  7777 ;; This function calls:
  7778 ;;		Nothing
  7779 ;; This function is called by:
  7780 ;;		_ISR
  7781 ;;		i2_stopOperation
  7782 ;; This function uses a non-reentrant model
  7783 ;;
  7784                           
  7785                           	psect	text26
  7786  001A20                     __ptext26:
  7787                           	opt stack 0
  7788  001A20                     i2___awmod:
  7789                           	opt stack 25
  7790                           
  7791                           ; BSR set to: 0
  7792                           ;incstack = 0
  7793  001A20  0E00               	movlw	0
  7794  001A22  6E06               	movwf	i2___awmod@sign,c
  7795  001A24  AE02               	btfss	i2___awmod@dividend+1,7,c
  7796  001A26  D006               	goto	i2l2764
  7797  001A28  6C01               	negf	i2___awmod@dividend,c
  7798  001A2A  1E02               	comf	i2___awmod@dividend+1,f,c
  7799  001A2C  B0D8               	btfsc	status,0,c
  7800  001A2E  2A02               	incf	i2___awmod@dividend+1,f,c
  7801  001A30  0E01               	movlw	1
  7802  001A32  6E06               	movwf	i2___awmod@sign,c
  7803  001A34                     i2l2764:
  7804  001A34  AE04               	btfss	i2___awmod@divisor+1,7,c
  7805  001A36  D004               	goto	i2l2768
  7806  001A38  6C03               	negf	i2___awmod@divisor,c
  7807  001A3A  1E04               	comf	i2___awmod@divisor+1,f,c
  7808  001A3C  B0D8               	btfsc	status,0,c
  7809  001A3E  2A04               	incf	i2___awmod@divisor+1,f,c
  7810  001A40                     i2l2768:
  7811  001A40  5003               	movf	i2___awmod@divisor,w,c
  7812  001A42  1004               	iorwf	i2___awmod@divisor+1,w,c
  7813  001A44  B4D8               	btfsc	status,2,c
  7814  001A46  D018               	goto	i2l2784
  7815  001A48  0E01               	movlw	1
  7816  001A4A  6E05               	movwf	i2___awmod@counter,c
  7817  001A4C  D004               	goto	i2l2774
  7818  001A4E                     i2l2772:
  7819  001A4E  90D8               	bcf	status,0,c
  7820  001A50  3603               	rlcf	i2___awmod@divisor,f,c
  7821  001A52  3604               	rlcf	i2___awmod@divisor+1,f,c
  7822  001A54  2A05               	incf	i2___awmod@counter,f,c
  7823  001A56                     i2l2774:
  7824  001A56  AE04               	btfss	i2___awmod@divisor+1,7,c
  7825  001A58  D7FA               	goto	i2l2772
  7826  001A5A                     i2l2776:
  7827  001A5A  5003               	movf	i2___awmod@divisor,w,c
  7828  001A5C  5C01               	subwf	i2___awmod@dividend,w,c
  7829  001A5E  5004               	movf	i2___awmod@divisor+1,w,c
  7830  001A60  5802               	subwfb	i2___awmod@dividend+1,w,c
  7831  001A62  A0D8               	btfss	status,0,c
  7832  001A64  D004               	goto	i2l2780
  7833  001A66  5003               	movf	i2___awmod@divisor,w,c
  7834  001A68  5E01               	subwf	i2___awmod@dividend,f,c
  7835  001A6A  5004               	movf	i2___awmod@divisor+1,w,c
  7836  001A6C  5A02               	subwfb	i2___awmod@dividend+1,f,c
  7837  001A6E                     i2l2780:
  7838  001A6E  90D8               	bcf	status,0,c
  7839  001A70  3204               	rrcf	i2___awmod@divisor+1,f,c
  7840  001A72  3203               	rrcf	i2___awmod@divisor,f,c
  7841  001A74  2E05               	decfsz	i2___awmod@counter,f,c
  7842  001A76  D7F1               	goto	i2l2776
  7843  001A78                     i2l2784:
  7844  001A78  5006               	movf	i2___awmod@sign,w,c
  7845  001A7A  B4D8               	btfsc	status,2,c
  7846  001A7C  D004               	goto	i2l2788
  7847  001A7E  6C01               	negf	i2___awmod@dividend,c
  7848  001A80  1E02               	comf	i2___awmod@dividend+1,f,c
  7849  001A82  B0D8               	btfsc	status,0,c
  7850  001A84  2A02               	incf	i2___awmod@dividend+1,f,c
  7851  001A86                     i2l2788:
  7852  001A86  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
  7853  001A8A  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
  7854  001A8E  0012               	return	
  7855  001A90                     __end_ofi2___awmod:
  7856                           	opt stack 0
  7857                           pclatu	equ	0xFFB
  7858                           pclath	equ	0xFFA
  7859                           tblptru	equ	0xFF8
  7860                           tblptrh	equ	0xFF7
  7861                           tblptrl	equ	0xFF6
  7862                           tablat	equ	0xFF5
  7863                           prodh	equ	0xFF4
  7864                           prodl	equ	0xFF3
  7865                           intcon	equ	0xFF2
  7866                           intcon3	equ	0xFF0
  7867                           postinc0	equ	0xFEE
  7868                           fsr0h	equ	0xFEA
  7869                           fsr0l	equ	0xFE9
  7870                           wreg	equ	0xFE8
  7871                           fsr1h	equ	0xFE2
  7872                           fsr1l	equ	0xFE1
  7873                           indf2	equ	0xFDF
  7874                           postinc2	equ	0xFDE
  7875                           postdec2	equ	0xFDD
  7876                           fsr2h	equ	0xFDA
  7877                           fsr2l	equ	0xFD9
  7878                           status	equ	0xFD8
  7879                           
  7880 ;; *************** function i2___awdiv *****************
  7881 ;; Defined at:
  7882 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  7883 ;; Parameters:    Size  Location     Type
  7884 ;;  dividend        2    0[COMRAM] int 
  7885 ;;  divisor         2    2[COMRAM] int 
  7886 ;; Auto vars:     Size  Location     Type
  7887 ;;  __awdiv         2    6[COMRAM] int 
  7888 ;;  __awdiv         1    5[COMRAM] unsigned char 
  7889 ;;  __awdiv         1    4[COMRAM] unsigned char 
  7890 ;; Return value:  Size  Location     Type
  7891 ;;                  2    0[COMRAM] int 
  7892 ;; Registers used:
  7893 ;;		wreg, status,2, status,0
  7894 ;; Tracked objects:
  7895 ;;		On entry : 0/0
  7896 ;;		On exit  : 0/0
  7897 ;;		Unchanged: 0/0
  7898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7899 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7900 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7901 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7902 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7903 ;;Total ram usage:        8 bytes
  7904 ;; Hardware stack levels used:    1
  7905 ;; This function calls:
  7906 ;;		Nothing
  7907 ;; This function is called by:
  7908 ;;		_ISR
  7909 ;;		i2_stopOperation
  7910 ;; This function uses a non-reentrant model
  7911 ;;
  7912                           
  7913                           	psect	text27
  7914  00192C                     __ptext27:
  7915                           	opt stack 0
  7916  00192C                     i2___awdiv:
  7917                           	opt stack 25
  7918                           
  7919                           ;incstack = 0
  7920  00192C  0E00               	movlw	0
  7921  00192E  6E06               	movwf	i2___awdiv@sign,c
  7922  001930  AE04               	btfss	i2___awdiv@divisor+1,7,c
  7923  001932  D006               	goto	i2l2720
  7924  001934  6C03               	negf	i2___awdiv@divisor,c
  7925  001936  1E04               	comf	i2___awdiv@divisor+1,f,c
  7926  001938  B0D8               	btfsc	status,0,c
  7927  00193A  2A04               	incf	i2___awdiv@divisor+1,f,c
  7928  00193C  0E01               	movlw	1
  7929  00193E  6E06               	movwf	i2___awdiv@sign,c
  7930  001940                     i2l2720:
  7931  001940  AE02               	btfss	i2___awdiv@dividend+1,7,c
  7932  001942  D006               	goto	i2l2726
  7933  001944  6C01               	negf	i2___awdiv@dividend,c
  7934  001946  1E02               	comf	i2___awdiv@dividend+1,f,c
  7935  001948  B0D8               	btfsc	status,0,c
  7936  00194A  2A02               	incf	i2___awdiv@dividend+1,f,c
  7937  00194C  0E01               	movlw	1
  7938  00194E  1A06               	xorwf	i2___awdiv@sign,f,c
  7939  001950                     i2l2726:
  7940  001950  0E00               	movlw	0
  7941  001952  6E08               	movwf	i2___awdiv@quotient+1,c
  7942  001954  0E00               	movlw	0
  7943  001956  6E07               	movwf	i2___awdiv@quotient,c
  7944  001958  5003               	movf	i2___awdiv@divisor,w,c
  7945  00195A  1004               	iorwf	i2___awdiv@divisor+1,w,c
  7946  00195C  B4D8               	btfsc	status,2,c
  7947  00195E  D01C               	goto	i2l2748
  7948  001960  0E01               	movlw	1
  7949  001962  6E05               	movwf	i2___awdiv@counter,c
  7950  001964  D004               	goto	i2l2734
  7951  001966                     i2l2732:
  7952  001966  90D8               	bcf	status,0,c
  7953  001968  3603               	rlcf	i2___awdiv@divisor,f,c
  7954  00196A  3604               	rlcf	i2___awdiv@divisor+1,f,c
  7955  00196C  2A05               	incf	i2___awdiv@counter,f,c
  7956  00196E                     i2l2734:
  7957  00196E  AE04               	btfss	i2___awdiv@divisor+1,7,c
  7958  001970  D7FA               	goto	i2l2732
  7959  001972                     i2l2736:
  7960  001972  90D8               	bcf	status,0,c
  7961  001974  3607               	rlcf	i2___awdiv@quotient,f,c
  7962  001976  3608               	rlcf	i2___awdiv@quotient+1,f,c
  7963  001978  5003               	movf	i2___awdiv@divisor,w,c
  7964  00197A  5C01               	subwf	i2___awdiv@dividend,w,c
  7965  00197C  5004               	movf	i2___awdiv@divisor+1,w,c
  7966  00197E  5802               	subwfb	i2___awdiv@dividend+1,w,c
  7967  001980  A0D8               	btfss	status,0,c
  7968  001982  D005               	goto	i2l2744
  7969  001984  5003               	movf	i2___awdiv@divisor,w,c
  7970  001986  5E01               	subwf	i2___awdiv@dividend,f,c
  7971  001988  5004               	movf	i2___awdiv@divisor+1,w,c
  7972  00198A  5A02               	subwfb	i2___awdiv@dividend+1,f,c
  7973  00198C  8007               	bsf	i2___awdiv@quotient,0,c
  7974  00198E                     i2l2744:
  7975  00198E  90D8               	bcf	status,0,c
  7976  001990  3204               	rrcf	i2___awdiv@divisor+1,f,c
  7977  001992  3203               	rrcf	i2___awdiv@divisor,f,c
  7978  001994  2E05               	decfsz	i2___awdiv@counter,f,c
  7979  001996  D7ED               	goto	i2l2736
  7980  001998                     i2l2748:
  7981  001998  5006               	movf	i2___awdiv@sign,w,c
  7982  00199A  B4D8               	btfsc	status,2,c
  7983  00199C  D004               	goto	i2l2752
  7984  00199E  6C07               	negf	i2___awdiv@quotient,c
  7985  0019A0  1E08               	comf	i2___awdiv@quotient+1,f,c
  7986  0019A2  B0D8               	btfsc	status,0,c
  7987  0019A4  2A08               	incf	i2___awdiv@quotient+1,f,c
  7988  0019A6                     i2l2752:
  7989  0019A6  C007  F001         	movff	i2___awdiv@quotient,?i2___awdiv
  7990  0019AA  C008  F002         	movff	i2___awdiv@quotient+1,?i2___awdiv+1
  7991  0019AE  0012               	return	
  7992  0019B0                     __end_ofi2___awdiv:
  7993                           	opt stack 0
  7994                           pclatu	equ	0xFFB
  7995                           pclath	equ	0xFFA
  7996                           tblptru	equ	0xFF8
  7997                           tblptrh	equ	0xFF7
  7998                           tblptrl	equ	0xFF6
  7999                           tablat	equ	0xFF5
  8000                           prodh	equ	0xFF4
  8001                           prodl	equ	0xFF3
  8002                           intcon	equ	0xFF2
  8003                           intcon3	equ	0xFF0
  8004                           postinc0	equ	0xFEE
  8005                           fsr0h	equ	0xFEA
  8006                           fsr0l	equ	0xFE9
  8007                           wreg	equ	0xFE8
  8008                           fsr1h	equ	0xFE2
  8009                           fsr1l	equ	0xFE1
  8010                           indf2	equ	0xFDF
  8011                           postinc2	equ	0xFDE
  8012                           postdec2	equ	0xFDD
  8013                           fsr2h	equ	0xFDA
  8014                           fsr2l	equ	0xFD9
  8015                           status	equ	0xFD8
  8016                           
  8017 ;; *************** function i2_printf *****************
  8018 ;; Defined at:
  8019 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  8020 ;; Parameters:    Size  Location     Type
  8021 ;;  f               2   12[COMRAM] PTR const unsigned char 
  8022 ;;		 -> STR_23(22), STR_22(17), STR_21(17), STR_20(17), 
  8023 ;;		 -> STR_19(23), STR_18(23), STR_17(21), STR_16(17), 
  8024 ;;		 -> STR_15(21), STR_14(17), STR_13(21), STR_12(17), 
  8025 ;;		 -> STR_11(19), STR_10(17), STR_9(19), STR_8(17), 
  8026 ;;		 -> STR_7(25), STR_6(17), STR_5(17), STR_4(17), 
  8027 ;;		 -> STR_3(17), STR_2(17), STR_1(17), 
  8028 ;; Auto vars:     Size  Location     Type
  8029 ;;  printf          4    0        struct .
  8030 ;;  printf          3    0        PTR const unsigned char 
  8031 ;;  printf          2   29[COMRAM] int 
  8032 ;;  printf          2   26[COMRAM] unsigned int 
  8033 ;;  printf          2   23[COMRAM] PTR void [1]
  8034 ;;		 -> ?i2_printf(2), ?_printf(2), 
  8035 ;;  printf          2    0        unsigned int 
  8036 ;;  printf          1   31[COMRAM] char 
  8037 ;;  printf          1   28[COMRAM] unsigned char 
  8038 ;;  printf          1   25[COMRAM] char 
  8039 ;;  printf          1   22[COMRAM] unsigned char 
  8040 ;; Return value:  Size  Location     Type
  8041 ;;                  2   12[COMRAM] int 
  8042 ;; Registers used:
  8043 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8044 ;; Tracked objects:
  8045 ;;		On entry : 0/0
  8046 ;;		On exit  : 0/0
  8047 ;;		Unchanged: 0/0
  8048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8049 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8050 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8051 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8052 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8053 ;;Total ram usage:       20 bytes
  8054 ;; Hardware stack levels used:    1
  8055 ;; Hardware stack levels required when called:    2
  8056 ;; This function calls:
  8057 ;;		i2___lwdiv
  8058 ;;		i2___lwmod
  8059 ;;		i2___wmul
  8060 ;;		i2_isdigit
  8061 ;;		i2_putch
  8062 ;; This function is called by:
  8063 ;;		_switchMenu
  8064 ;;		_ISR
  8065 ;; This function uses a non-reentrant model
  8066 ;;
  8067                           
  8068                           	psect	text28
  8069  0010B6                     __ptext28:
  8070                           	opt stack 0
  8071  0010B6                     i2_printf:
  8072                           	opt stack 24
  8073                           
  8074                           ;doprnt.c: 466: va_list ap;
  8075                           ;doprnt.c: 499: signed char c;
  8076                           ;doprnt.c: 501: int width;
  8077                           ;doprnt.c: 506: signed char prec;
  8078                           ;doprnt.c: 508: unsigned char flag;
  8079                           ;doprnt.c: 523: union {
  8080                           ;doprnt.c: 524: unsigned long vd;
  8081                           ;doprnt.c: 525: double integ;
  8082                           ;doprnt.c: 526: } tmpval;
  8083                           ;doprnt.c: 528: unsigned int val;
  8084                           ;doprnt.c: 529: unsigned len;
  8085                           ;doprnt.c: 530: const char * cp;
  8086                           ;doprnt.c: 533: *ap = __va_start();
  8087                           
  8088                           ;incstack = 0
  8089  0010B6  0E0F               	movlw	low (?i2_printf+2)
  8090  0010B8  6E18               	movwf	i2printf@ap,c
  8091  0010BA  0E00               	movlw	high (?i2_printf+2)
  8092  0010BC  6E19               	movwf	i2printf@ap+1,c
  8093                           
  8094                           ;doprnt.c: 536: while(c = *f++) {
  8095  0010BE  D174               	goto	i2l3200
  8096  0010C0                     i2l3074:
  8097                           
  8098                           ;doprnt.c: 538: if(c != '%')
  8099  0010C0  0E25               	movlw	37
  8100  0010C2  1820               	xorwf	i2printf@c,w,c
  8101  0010C4  B4D8               	btfsc	status,2,c
  8102  0010C6  D004               	goto	i2l3078
  8103                           
  8104                           ;doprnt.c: 540: {
  8105                           ;doprnt.c: 541: (putch(c) );
  8106  0010C8  5020               	movf	i2printf@c,w,c
  8107  0010CA  EC1A  F00F         	call	i2_putch
  8108                           
  8109                           ;doprnt.c: 542: continue;
  8110  0010CE  D16C               	goto	i2l3200
  8111  0010D0                     i2l3078:
  8112                           
  8113                           ;doprnt.c: 543: }
  8114                           ;doprnt.c: 546: width = 0;
  8115  0010D0  0E00               	movlw	0
  8116  0010D2  6E1F               	movwf	i2printf@width+1,c
  8117  0010D4  0E00               	movlw	0
  8118  0010D6  6E1E               	movwf	i2printf@width,c
  8119                           
  8120                           ;doprnt.c: 548: flag = 0;
  8121  0010D8  0E00               	movlw	0
  8122  0010DA  6E1D               	movwf	i2printf@flag,c
  8123                           
  8124                           ;doprnt.c: 551: switch(*f) {
  8125                           
  8126                           ;doprnt.c: 550: for(;;) {
  8127  0010DC  D003               	goto	i2l3084
  8128  0010DE                     i2l3080:
  8129                           
  8130                           ;doprnt.c: 580: flag |= 0x04;
  8131  0010DE  841D               	bsf	i2printf@flag,2,c
  8132                           
  8133                           ;doprnt.c: 581: f++;
  8134  0010E0  4A0D               	infsnz	i2printf@f,f,c
  8135  0010E2  2A0E               	incf	i2printf@f+1,f,c
  8136  0010E4                     i2l3084:
  8137  0010E4  C00D  FFF6         	movff	i2printf@f,tblptrl
  8138  0010E8  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  8139  0010EC                     	if	0	;tblptru may be non-zero
  8140  0010EC                     	endif
  8141  0010EC                     	if	0	;tblptru may be non-zero
  8142  0010EC                     	endif
  8143  0010EC  0008               	tblrd		*
  8144  0010EE  50F5               	movf	tablat,w,c
  8145                           
  8146                           ; Switch size 1, requested type "space"
  8147                           ; Number of cases is 1, Range of values is 48 to 48
  8148                           ; switch strategies available:
  8149                           ; Name         Instructions Cycles
  8150                           ; simple_byte            4     3 (average)
  8151                           ;	Chosen strategy is simple_byte
  8152  0010F0  0A30               	xorlw	48	; case 48
  8153  0010F2  B4D8               	btfsc	status,2,c
  8154  0010F4  D7F4               	goto	i2l3080
  8155                           
  8156                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  8157                           
  8158                           ;doprnt.c: 586: }
  8159                           
  8160                           ;doprnt.c: 585: break;
  8161  0010F6  C00D  FFF6         	movff	i2printf@f,tblptrl
  8162  0010FA  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  8163  0010FE                     	if	0	;tblptru may be non-zero
  8164  0010FE                     	endif
  8165  0010FE                     	if	0	;tblptru may be non-zero
  8166  0010FE                     	endif
  8167  0010FE  0008               	tblrd		*
  8168  001100  50F5               	movf	tablat,w,c
  8169  001102  ECDF  F00E         	call	i2_isdigit
  8170  001106  A0D8               	btfss	status,0,c
  8171  001108  D035               	goto	i2l3102
  8172                           
  8173                           ;doprnt.c: 598: width = 0;
  8174  00110A  0E00               	movlw	0
  8175  00110C  6E1F               	movwf	i2printf@width+1,c
  8176  00110E  0E00               	movlw	0
  8177  001110  6E1E               	movwf	i2printf@width,c
  8178  001112                     i2l3090:
  8179                           
  8180                           ;doprnt.c: 600: width *= 10;
  8181  001112  C01E  F001         	movff	i2printf@width,i2___wmul@multiplier
  8182  001116  C01F  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
  8183  00111A  0E00               	movlw	0
  8184  00111C  6E04               	movwf	i2___wmul@multiplicand+1,c
  8185  00111E  0E0A               	movlw	10
  8186  001120  6E03               	movwf	i2___wmul@multiplicand,c
  8187  001122  ECBD  F00E         	call	i2___wmul	;wreg free
  8188  001126  C001  F01E         	movff	?i2___wmul,i2printf@width
  8189  00112A  C002  F01F         	movff	?i2___wmul+1,i2printf@width+1
  8190                           
  8191                           ;doprnt.c: 601: width += *f++ - '0';
  8192  00112E  0ED0               	movlw	208
  8193  001130  6E13               	movwf	??i2_printf& (0+255),c
  8194  001132  0EFF               	movlw	255
  8195  001134  6E14               	movwf	(??i2_printf+1)& (0+255),c
  8196  001136  C00D  FFF6         	movff	i2printf@f,tblptrl
  8197  00113A  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  8198  00113E                     	if	0	;tblptru may be non-zero
  8199  00113E                     	endif
  8200  00113E                     	if	0	;tblptru may be non-zero
  8201  00113E                     	endif
  8202  00113E  0008               	tblrd		*
  8203  001140  50F5               	movf	tablat,w,c
  8204  001142  6E15               	movwf	(??i2_printf+2)& (0+255),c
  8205  001144  6A16               	clrf	(??i2_printf+3)& (0+255),c
  8206  001146  5013               	movf	??i2_printf,w,c
  8207  001148  2615               	addwf	??i2_printf+2,f,c
  8208  00114A  5014               	movf	??i2_printf+1,w,c
  8209  00114C  2216               	addwfc	??i2_printf+3,f,c
  8210  00114E  5015               	movf	??i2_printf+2,w,c
  8211  001150  261E               	addwf	i2printf@width,f,c
  8212  001152  5016               	movf	??i2_printf+3,w,c
  8213  001154  221F               	addwfc	i2printf@width+1,f,c
  8214  001156  4A0D               	infsnz	i2printf@f,f,c
  8215  001158  2A0E               	incf	i2printf@f+1,f,c
  8216                           
  8217                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  8218  00115A  C00D  FFF6         	movff	i2printf@f,tblptrl
  8219  00115E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  8220  001162                     	if	0	;tblptru may be non-zero
  8221  001162                     	endif
  8222  001162                     	if	0	;tblptru may be non-zero
  8223  001162                     	endif
  8224  001162  0008               	tblrd		*
  8225  001164  50F5               	movf	tablat,w,c
  8226  001166  ECDF  F00E         	call	i2_isdigit
  8227  00116A  A0D8               	btfss	status,0,c
  8228  00116C  D003               	goto	i2l3102
  8229  00116E  D7D1               	goto	i2l3090
  8230  001170                     i2l3098:
  8231                           
  8232                           ;doprnt.c: 721: flag |= 0x80;
  8233  001170  8E1D               	bsf	i2printf@flag,7,c
  8234                           
  8235                           ;doprnt.c: 723: break;
  8236  001172  D017               	goto	i2l462
  8237  001174                     i2l3102:
  8238  001174  C00D  FFF6         	movff	i2printf@f,tblptrl
  8239  001178  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  8240  00117C  4A0D               	infsnz	i2printf@f,f,c
  8241  00117E  2A0E               	incf	i2printf@f+1,f,c
  8242  001180                     	if	0	;tblptru may be non-zero
  8243  001180                     	endif
  8244  001180                     	if	0	;tblptru may be non-zero
  8245  001180                     	endif
  8246  001180  0008               	tblrd		*
  8247  001182  CFF5 F020          	movff	tablat,i2printf@c
  8248  001186  5020               	movf	i2printf@c,w,c
  8249                           
  8250                           ; Switch size 1, requested type "space"
  8251                           ; Number of cases is 4, Range of values is 0 to 120
  8252                           ; switch strategies available:
  8253                           ; Name         Instructions Cycles
  8254                           ; simple_byte           13     7 (average)
  8255                           ;	Chosen strategy is simple_byte
  8256  001188  0A00               	xorlw	0	; case 0
  8257  00118A  B4D8               	btfsc	status,2,c
  8258  00118C  0012               	return	
  8259  00118E  0A64               	xorlw	100	; case 100
  8260  001190  B4D8               	btfsc	status,2,c
  8261  001192  D007               	goto	i2l462
  8262  001194  0A0D               	xorlw	13	; case 105
  8263  001196  B4D8               	btfsc	status,2,c
  8264  001198  D004               	goto	i2l462
  8265  00119A  0A11               	xorlw	17	; case 120
  8266  00119C  B4D8               	btfsc	status,2,c
  8267  00119E  D7E8               	goto	i2l3098
  8268  0011A0  D103               	goto	i2l3200
  8269  0011A2                     i2l462:
  8270                           
  8271                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  8272  0011A2  BE1D               	btfsc	i2printf@flag,7,c
  8273  0011A4  D015               	goto	i2l3114
  8274                           
  8275                           ;doprnt.c: 1253: {
  8276                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  8277  0011A6  C018  FFD9         	movff	i2printf@ap,fsr2l
  8278  0011AA  C019  FFDA         	movff	i2printf@ap+1,fsr2h
  8279  0011AE  CFDE F01B          	movff	postinc2,i2printf@val
  8280  0011B2  CFDD F01C          	movff	postdec2,i2printf@val+1
  8281  0011B6  0E02               	movlw	2
  8282  0011B8  2618               	addwf	i2printf@ap,f,c
  8283  0011BA  0E00               	movlw	0
  8284  0011BC  2219               	addwfc	i2printf@ap+1,f,c
  8285                           
  8286                           ;doprnt.c: 1261: if((int)val < 0) {
  8287  0011BE  AE1C               	btfss	i2printf@val+1,7,c
  8288  0011C0  D044               	goto	i2l3148
  8289                           
  8290                           ;doprnt.c: 1262: flag |= 0x03;
  8291  0011C2  0E03               	movlw	3
  8292  0011C4  121D               	iorwf	i2printf@flag,f,c
  8293                           
  8294                           ;doprnt.c: 1263: val = -val;
  8295  0011C6  6C1B               	negf	i2printf@val,c
  8296  0011C8  1E1C               	comf	i2printf@val+1,f,c
  8297  0011CA  B0D8               	btfsc	status,0,c
  8298  0011CC  2A1C               	incf	i2printf@val+1,f,c
  8299                           
  8300                           ;doprnt.c: 1264: }
  8301                           ;doprnt.c: 1266: }
  8302  0011CE  D03D               	goto	i2l3148
  8303  0011D0                     i2l3114:
  8304                           
  8305                           ;doprnt.c: 1268: else
  8306                           ;doprnt.c: 1273: {
  8307                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  8308  0011D0  C018  FFD9         	movff	i2printf@ap,fsr2l
  8309  0011D4  C019  FFDA         	movff	i2printf@ap+1,fsr2h
  8310  0011D8  CFDE F01B          	movff	postinc2,i2printf@val
  8311  0011DC  CFDD F01C          	movff	postdec2,i2printf@val+1
  8312  0011E0  0E02               	movlw	2
  8313  0011E2  2618               	addwf	i2printf@ap,f,c
  8314  0011E4  0E00               	movlw	0
  8315  0011E6  2219               	addwfc	i2printf@ap+1,f,c
  8316                           
  8317                           ;doprnt.c: 1287: }
  8318                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  8319  0011E8  D030               	goto	i2l3148
  8320  0011EA                     i2l3118:
  8321                           
  8322                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  8323  0011EA  0E01               	movlw	1
  8324  0011EC  6E20               	movwf	i2printf@c,c
  8325  0011EE                     i2l3120:
  8326  0011EE  0E05               	movlw	5
  8327  0011F0  1820               	xorwf	i2printf@c,w,c
  8328  0011F2  B4D8               	btfsc	status,2,c
  8329  0011F4  D032               	goto	i2l3150
  8330                           
  8331                           ;doprnt.c: 1306: if(val < dpowers[c])
  8332  0011F6  5020               	movf	i2printf@c,w,c
  8333  0011F8  0D02               	mullw	2
  8334  0011FA  0E68               	movlw	low _dpowers
  8335  0011FC  24F3               	addwf	prodl,w,c
  8336  0011FE  6EF6               	movwf	tblptrl,c
  8337  001200  0EFE               	movlw	high _dpowers
  8338  001202  20F4               	addwfc	prodh,w,c
  8339  001204  6EF7               	movwf	tblptrh,c
  8340  001206                     	if	0	;There are less than 3 active tblptr bytes
  8341  001206                     	endif
  8342  001206  0009               	tblrd		*+
  8343  001208  50F5               	movf	tablat,w,c
  8344  00120A  5C1B               	subwf	i2printf@val,w,c
  8345  00120C  0009               	tblrd		*+
  8346  00120E  50F5               	movf	tablat,w,c
  8347  001210  581C               	subwfb	i2printf@val+1,w,c
  8348  001212  A0D8               	btfss	status,0,c
  8349  001214  D022               	goto	i2l3150
  8350                           
  8351                           ;doprnt.c: 1307: break;
  8352  001216  2A20               	incf	i2printf@c,f,c
  8353  001218  D7EA               	goto	i2l3120
  8354  00121A                     i2l3132:
  8355                           
  8356                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  8357  00121A  0E01               	movlw	1
  8358  00121C  6E20               	movwf	i2printf@c,c
  8359  00121E                     i2l3134:
  8360  00121E  0E04               	movlw	4
  8361  001220  1820               	xorwf	i2printf@c,w,c
  8362  001222  B4D8               	btfsc	status,2,c
  8363  001224  D01A               	goto	i2l3150
  8364                           
  8365                           ;doprnt.c: 1317: if(val < hexpowers[c])
  8366  001226  5020               	movf	i2printf@c,w,c
  8367  001228  0D02               	mullw	2
  8368  00122A  0E72               	movlw	low _hexpowers
  8369  00122C  24F3               	addwf	prodl,w,c
  8370  00122E  6EF6               	movwf	tblptrl,c
  8371  001230  0EFE               	movlw	high _hexpowers
  8372  001232  20F4               	addwfc	prodh,w,c
  8373  001234  6EF7               	movwf	tblptrh,c
  8374  001236                     	if	0	;There are less than 3 active tblptr bytes
  8375  001236                     	endif
  8376  001236  0009               	tblrd		*+
  8377  001238  50F5               	movf	tablat,w,c
  8378  00123A  5C1B               	subwf	i2printf@val,w,c
  8379  00123C  0009               	tblrd		*+
  8380  00123E  50F5               	movf	tablat,w,c
  8381  001240  581C               	subwfb	i2printf@val+1,w,c
  8382  001242  A0D8               	btfss	status,0,c
  8383  001244  D00A               	goto	i2l3150
  8384                           
  8385                           ;doprnt.c: 1318: break;
  8386  001246  2A20               	incf	i2printf@c,f,c
  8387  001248  D7EA               	goto	i2l3134
  8388  00124A                     i2l3148:
  8389  00124A  501D               	movf	i2printf@flag,w,c
  8390  00124C  0B80               	andlw	128
  8391                           
  8392                           ; Switch size 1, requested type "space"
  8393                           ; Number of cases is 2, Range of values is 0 to 128
  8394                           ; switch strategies available:
  8395                           ; Name         Instructions Cycles
  8396                           ; simple_byte            7     4 (average)
  8397                           ;	Chosen strategy is simple_byte
  8398  00124E  0A00               	xorlw	0	; case 0
  8399  001250  B4D8               	btfsc	status,2,c
  8400  001252  D7CB               	goto	i2l3118
  8401  001254  0A80               	xorlw	128	; case 128
  8402  001256  B4D8               	btfsc	status,2,c
  8403  001258  D7E0               	goto	i2l3132
  8404  00125A                     i2l3150:
  8405                           
  8406                           ;doprnt.c: 1345: if(width && flag & 0x03)
  8407  00125A  501E               	movf	i2printf@width,w,c
  8408  00125C  101F               	iorwf	i2printf@width+1,w,c
  8409  00125E  B4D8               	btfsc	status,2,c
  8410  001260  D009               	goto	i2l3156
  8411  001262  C01D  F013         	movff	i2printf@flag,??i2_printf
  8412  001266  0E03               	movlw	3
  8413  001268  1613               	andwf	??i2_printf,f,c
  8414  00126A  B4D8               	btfsc	status,2,c
  8415  00126C  D003               	goto	i2l3156
  8416                           
  8417                           ;doprnt.c: 1346: width--;
  8418  00126E  061E               	decf	i2printf@width,f,c
  8419  001270  A0D8               	btfss	status,0,c
  8420  001272  061F               	decf	i2printf@width+1,f,c
  8421  001274                     i2l3156:
  8422                           
  8423                           ;doprnt.c: 1381: if(width > c)
  8424  001274  0E80               	movlw	128
  8425  001276  BE20               	btfsc	i2printf@c,7,c
  8426  001278  0E7F               	movlw	127
  8427  00127A  6E13               	movwf	??i2_printf& (0+255),c
  8428  00127C  501E               	movf	i2printf@width,w,c
  8429  00127E  5C20               	subwf	i2printf@c,w,c
  8430  001280  501F               	movf	i2printf@width+1,w,c
  8431  001282  0A80               	xorlw	128
  8432  001284  5813               	subwfb	??i2_printf& (0+255),w,c
  8433  001286  B0D8               	btfsc	status,0,c
  8434  001288  D007               	goto	i2l3160
  8435                           
  8436                           ;doprnt.c: 1382: width -= c;
  8437  00128A  5020               	movf	i2printf@c,w,c
  8438  00128C  5E1E               	subwf	i2printf@width,f,c
  8439  00128E  0E00               	movlw	0
  8440  001290  BE20               	btfsc	i2printf@c,7,c
  8441  001292  0EFF               	movlw	255
  8442  001294  5A1F               	subwfb	i2printf@width+1,f,c
  8443  001296  D004               	goto	i2l3162
  8444  001298                     i2l3160:
  8445                           
  8446                           ;doprnt.c: 1383: else
  8447                           ;doprnt.c: 1384: width = 0;
  8448  001298  0E00               	movlw	0
  8449  00129A  6E1F               	movwf	i2printf@width+1,c
  8450  00129C  0E00               	movlw	0
  8451  00129E  6E1E               	movwf	i2printf@width,c
  8452  0012A0                     i2l3162:
  8453                           
  8454                           ;doprnt.c: 1387: if(flag & 0x04) {
  8455  0012A0  A41D               	btfss	i2printf@flag,2,c
  8456  0012A2  D014               	goto	i2l3174
  8457                           
  8458                           ;doprnt.c: 1392: if(flag & 0x03)
  8459  0012A4  C01D  F013         	movff	i2printf@flag,??i2_printf
  8460  0012A8  0E03               	movlw	3
  8461  0012AA  1613               	andwf	??i2_printf,f,c
  8462  0012AC  B4D8               	btfsc	status,2,c
  8463  0012AE  D003               	goto	i2l3168
  8464                           
  8465                           ;doprnt.c: 1393: (putch('-') );
  8466  0012B0  0E2D               	movlw	45
  8467  0012B2  EC1A  F00F         	call	i2_putch
  8468  0012B6                     i2l3168:
  8469                           
  8470                           ;doprnt.c: 1415: if(width)
  8471  0012B6  501E               	movf	i2printf@width,w,c
  8472  0012B8  101F               	iorwf	i2printf@width+1,w,c
  8473  0012BA  B4D8               	btfsc	status,2,c
  8474  0012BC  D01E               	goto	i2l3184
  8475                           
  8476                           ;doprnt.c: 1417: (putch('0') );
  8477                           
  8478                           ;doprnt.c: 1416: do
  8479  0012BE  0E30               	movlw	48
  8480  0012C0  EC1A  F00F         	call	i2_putch
  8481                           
  8482                           ;doprnt.c: 1418: while(--width);
  8483  0012C4  061E               	decf	i2printf@width,f,c
  8484  0012C6  A0D8               	btfss	status,0,c
  8485  0012C8  061F               	decf	i2printf@width+1,f,c
  8486  0012CA  D7F5               	goto	i2l3168
  8487  0012CC                     i2l3174:
  8488                           
  8489                           ;doprnt.c: 1422: {
  8490                           ;doprnt.c: 1424: if(width
  8491                           ;doprnt.c: 1428: )
  8492  0012CC  501E               	movf	i2printf@width,w,c
  8493  0012CE  101F               	iorwf	i2printf@width+1,w,c
  8494  0012D0  B4D8               	btfsc	status,2,c
  8495  0012D2  D00A               	goto	i2l3180
  8496  0012D4                     i2l3176:
  8497                           
  8498                           ;doprnt.c: 1430: (putch(' ') );
  8499  0012D4  0E20               	movlw	32
  8500  0012D6  EC1A  F00F         	call	i2_putch
  8501                           
  8502                           ;doprnt.c: 1431: while(--width);
  8503  0012DA  061E               	decf	i2printf@width,f,c
  8504  0012DC  A0D8               	btfss	status,0,c
  8505  0012DE  061F               	decf	i2printf@width+1,f,c
  8506  0012E0  501E               	movf	i2printf@width,w,c
  8507  0012E2  101F               	iorwf	i2printf@width+1,w,c
  8508  0012E4  A4D8               	btfss	status,2,c
  8509  0012E6  D7F6               	goto	i2l3176
  8510  0012E8                     i2l3180:
  8511                           
  8512                           ;doprnt.c: 1438: if(flag & 0x03)
  8513  0012E8  C01D  F013         	movff	i2printf@flag,??i2_printf
  8514  0012EC  0E03               	movlw	3
  8515  0012EE  1613               	andwf	??i2_printf,f,c
  8516  0012F0  B4D8               	btfsc	status,2,c
  8517  0012F2  D003               	goto	i2l3184
  8518                           
  8519                           ;doprnt.c: 1439: (putch('-') );
  8520  0012F4  0E2D               	movlw	45
  8521  0012F6  EC1A  F00F         	call	i2_putch
  8522  0012FA                     i2l3184:
  8523                           
  8524                           ;doprnt.c: 1469: }
  8525                           ;doprnt.c: 1472: prec = c;
  8526  0012FA  C020  F01A         	movff	i2printf@c,i2printf@prec
  8527                           
  8528                           ;doprnt.c: 1474: while(prec--) {
  8529  0012FE  D050               	goto	i2l3198
  8530  001300                     i2l3186:
  8531                           
  8532                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  8533  001300  501A               	movf	i2printf@prec,w,c
  8534  001302  0D02               	mullw	2
  8535  001304  0E68               	movlw	low _dpowers
  8536  001306  24F3               	addwf	prodl,w,c
  8537  001308  6EF6               	movwf	tblptrl,c
  8538  00130A  0EFE               	movlw	high _dpowers
  8539  00130C  20F4               	addwfc	prodh,w,c
  8540  00130E  6EF7               	movwf	tblptrh,c
  8541  001310                     	if	0	;There are less than 3 active tblptr bytes
  8542  001310                     	endif
  8543  001310  0009               	tblrd		*+
  8544  001312  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  8545  001316  000A               	tblrd		*-
  8546  001318  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  8547  00131C  C01B  F001         	movff	i2printf@val,i2___lwdiv@dividend
  8548  001320  C01C  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  8549  001324  EC9F  F00D         	call	i2___lwdiv	;wreg free
  8550  001328  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
  8551  00132C  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
  8552  001330  0E00               	movlw	0
  8553  001332  6E0B               	movwf	i2___lwmod@divisor+1,c
  8554  001334  0E0A               	movlw	10
  8555  001336  6E0A               	movwf	i2___lwmod@divisor,c
  8556  001338  EC5A  F00E         	call	i2___lwmod	;wreg free
  8557  00133C  5008               	movf	?i2___lwmod,w,c
  8558  00133E  0F30               	addlw	48
  8559  001340  6E20               	movwf	i2printf@c,c
  8560                           
  8561                           ;doprnt.c: 1491: break;
  8562  001342  D02B               	goto	i2l3196
  8563  001344                     i2l3188:
  8564                           
  8565                           ;doprnt.c: 1499: {
  8566                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  8567  001344  C01B  F001         	movff	i2printf@val,i2___lwdiv@dividend
  8568  001348  C01C  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  8569  00134C  501A               	movf	i2printf@prec,w,c
  8570  00134E  0D02               	mullw	2
  8571  001350  0E72               	movlw	low _hexpowers
  8572  001352  24F3               	addwf	prodl,w,c
  8573  001354  6EF6               	movwf	tblptrl,c
  8574  001356  0EFE               	movlw	high _hexpowers
  8575  001358  20F4               	addwfc	prodh,w,c
  8576  00135A  6EF7               	movwf	tblptrh,c
  8577  00135C                     	if	0	;There are less than 3 active tblptr bytes
  8578  00135C                     	endif
  8579  00135C  0009               	tblrd		*+
  8580  00135E  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  8581  001362  000A               	tblrd		*-
  8582  001364  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  8583  001368  EC9F  F00D         	call	i2___lwdiv	;wreg free
  8584  00136C  5001               	movf	?i2___lwdiv,w,c
  8585  00136E  0B0F               	andlw	15
  8586  001370  6E17               	movwf	i2printf@idx,c
  8587                           
  8588                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  8589  001372  5017               	movf	i2printf@idx,w,c
  8590  001374  0D01               	mullw	1
  8591  001376  0EFF               	movlw	low STR_24
  8592  001378  24F3               	addwf	prodl,w,c
  8593  00137A  6EF6               	movwf	tblptrl,c
  8594  00137C  0EFE               	movlw	high STR_24
  8595  00137E  20F4               	addwfc	prodh,w,c
  8596  001380  6EF7               	movwf	tblptrh,c
  8597  001382                     	if	0	;There are less than 3 active tblptr bytes
  8598  001382                     	endif
  8599  001382  0008               	tblrd		*
  8600  001384  CFF5 F020          	movff	tablat,i2printf@c
  8601                           
  8602                           ;doprnt.c: 1523: }
  8603                           
  8604                           ;doprnt.c: 1508: }
  8605                           ;doprnt.c: 1510: break;
  8606  001388  D008               	goto	i2l3196
  8607  00138A                     i2l3194:
  8608  00138A  501D               	movf	i2printf@flag,w,c
  8609  00138C  0B80               	andlw	128
  8610                           
  8611                           ; Switch size 1, requested type "space"
  8612                           ; Number of cases is 2, Range of values is 0 to 128
  8613                           ; switch strategies available:
  8614                           ; Name         Instructions Cycles
  8615                           ; simple_byte            7     4 (average)
  8616                           ;	Chosen strategy is simple_byte
  8617  00138E  0A00               	xorlw	0	; case 0
  8618  001390  B4D8               	btfsc	status,2,c
  8619  001392  D7B6               	goto	i2l3186
  8620  001394  0A80               	xorlw	128	; case 128
  8621  001396  B4D8               	btfsc	status,2,c
  8622  001398  D7D5               	goto	i2l3188
  8623  00139A                     i2l3196:
  8624                           
  8625                           ;doprnt.c: 1524: (putch(c) );
  8626  00139A  5020               	movf	i2printf@c,w,c
  8627  00139C  EC1A  F00F         	call	i2_putch
  8628  0013A0                     i2l3198:
  8629  0013A0  061A               	decf	i2printf@prec,f,c
  8630  0013A2  281A               	incf	i2printf@prec,w,c
  8631  0013A4  A4D8               	btfss	status,2,c
  8632  0013A6  D7F1               	goto	i2l3194
  8633  0013A8                     i2l3200:
  8634  0013A8  C00D  FFF6         	movff	i2printf@f,tblptrl
  8635  0013AC  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  8636  0013B0  4A0D               	infsnz	i2printf@f,f,c
  8637  0013B2  2A0E               	incf	i2printf@f+1,f,c
  8638  0013B4                     	if	0	;tblptru may be non-zero
  8639  0013B4                     	endif
  8640  0013B4                     	if	0	;tblptru may be non-zero
  8641  0013B4                     	endif
  8642  0013B4  0008               	tblrd		*
  8643  0013B6  CFF5 F020          	movff	tablat,i2printf@c
  8644  0013BA  5020               	movf	i2printf@c,w,c
  8645  0013BC  B4D8               	btfsc	status,2,c
  8646  0013BE  0012               	return	
  8647  0013C0  D67F               	goto	i2l3074
  8648  0013C2                     __end_ofi2_printf:
  8649                           	opt stack 0
  8650                           pclatu	equ	0xFFB
  8651                           pclath	equ	0xFFA
  8652                           tblptru	equ	0xFF8
  8653                           tblptrh	equ	0xFF7
  8654                           tblptrl	equ	0xFF6
  8655                           tablat	equ	0xFF5
  8656                           prodh	equ	0xFF4
  8657                           prodl	equ	0xFF3
  8658                           intcon	equ	0xFF2
  8659                           intcon3	equ	0xFF0
  8660                           postinc0	equ	0xFEE
  8661                           fsr0h	equ	0xFEA
  8662                           fsr0l	equ	0xFE9
  8663                           wreg	equ	0xFE8
  8664                           fsr1h	equ	0xFE2
  8665                           fsr1l	equ	0xFE1
  8666                           indf2	equ	0xFDF
  8667                           postinc2	equ	0xFDE
  8668                           postdec2	equ	0xFDD
  8669                           fsr2h	equ	0xFDA
  8670                           fsr2l	equ	0xFD9
  8671                           status	equ	0xFD8
  8672                           
  8673 ;; *************** function i2_putch *****************
  8674 ;; Defined at:
  8675 ;;		line 23 in file "../lcd.c"
  8676 ;; Parameters:    Size  Location     Type
  8677 ;;  data            1    wreg     unsigned char 
  8678 ;; Auto vars:     Size  Location     Type
  8679 ;;  data            1    2[COMRAM] unsigned char 
  8680 ;; Return value:  Size  Location     Type
  8681 ;;                  1    wreg      void 
  8682 ;; Registers used:
  8683 ;;		wreg, status,2, status,0, cstack
  8684 ;; Tracked objects:
  8685 ;;		On entry : 0/0
  8686 ;;		On exit  : 0/0
  8687 ;;		Unchanged: 0/0
  8688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8689 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8690 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8691 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8692 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8693 ;;Total ram usage:        1 bytes
  8694 ;; Hardware stack levels used:    1
  8695 ;; Hardware stack levels required when called:    1
  8696 ;; This function calls:
  8697 ;;		i2_lcdNibble
  8698 ;; This function is called by:
  8699 ;;		i2_printf
  8700 ;; This function uses a non-reentrant model
  8701 ;;
  8702                           
  8703                           	psect	text29
  8704  001E34                     __ptext29:
  8705                           	opt stack 0
  8706  001E34                     i2_putch:
  8707                           	opt stack 24
  8708                           
  8709                           ;incstack = 0
  8710                           ;i2putch@data stored from wreg
  8711  001E34  6E03               	movwf	i2putch@data,c
  8712                           
  8713                           ;lcd.c: 24: LATDbits.LATD2 = 1;
  8714  001E36  848C               	bsf	3980,2,c	;volatile
  8715                           
  8716                           ;lcd.c: 25: lcdNibble(data);
  8717  001E38  5003               	movf	i2putch@data,w,c
  8718  001E3A  ECEF  F00D         	call	i2_lcdNibble
  8719  001E3E  0012               	return		;funcret
  8720  001E40                     __end_ofi2_putch:
  8721                           	opt stack 0
  8722                           pclatu	equ	0xFFB
  8723                           pclath	equ	0xFFA
  8724                           tblptru	equ	0xFF8
  8725                           tblptrh	equ	0xFF7
  8726                           tblptrl	equ	0xFF6
  8727                           tablat	equ	0xFF5
  8728                           prodh	equ	0xFF4
  8729                           prodl	equ	0xFF3
  8730                           intcon	equ	0xFF2
  8731                           intcon3	equ	0xFF0
  8732                           postinc0	equ	0xFEE
  8733                           fsr0h	equ	0xFEA
  8734                           fsr0l	equ	0xFE9
  8735                           wreg	equ	0xFE8
  8736                           fsr1h	equ	0xFE2
  8737                           fsr1l	equ	0xFE1
  8738                           indf2	equ	0xFDF
  8739                           postinc2	equ	0xFDE
  8740                           postdec2	equ	0xFDD
  8741                           fsr2h	equ	0xFDA
  8742                           fsr2l	equ	0xFD9
  8743                           status	equ	0xFD8
  8744                           
  8745 ;; *************** function i2_isdigit *****************
  8746 ;; Defined at:
  8747 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  8748 ;; Parameters:    Size  Location     Type
  8749 ;;  c               1    wreg     unsigned char 
  8750 ;; Auto vars:     Size  Location     Type
  8751 ;;  c               1    2[COMRAM] unsigned char 
  8752 ;; Return value:  Size  Location     Type
  8753 ;;		None               void
  8754 ;; Registers used:
  8755 ;;		wreg, status,2, status,0
  8756 ;; Tracked objects:
  8757 ;;		On entry : 0/0
  8758 ;;		On exit  : 0/0
  8759 ;;		Unchanged: 0/0
  8760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8761 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8762 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8763 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8764 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8765 ;;Total ram usage:        3 bytes
  8766 ;; Hardware stack levels used:    1
  8767 ;; This function calls:
  8768 ;;		Nothing
  8769 ;; This function is called by:
  8770 ;;		i2_printf
  8771 ;; This function uses a non-reentrant model
  8772 ;;
  8773                           
  8774                           	psect	text30
  8775  001DBE                     __ptext30:
  8776                           	opt stack 0
  8777  001DBE                     i2_isdigit:
  8778                           	opt stack 25
  8779                           
  8780                           ;incstack = 0
  8781                           ;i2isdigit@c stored from wreg
  8782  001DBE  6E03               	movwf	i2isdigit@c,c
  8783  001DC0  0E00               	movlw	0
  8784  001DC2  6E02               	movwf	i2_isdigit$936,c
  8785  001DC4  0E3A               	movlw	58
  8786  001DC6  6003               	cpfslt	i2isdigit@c,c
  8787  001DC8  D005               	goto	i2l2800
  8788  001DCA  0E2F               	movlw	47
  8789  001DCC  6403               	cpfsgt	i2isdigit@c,c
  8790  001DCE  D002               	goto	i2l2800
  8791  001DD0  0E01               	movlw	1
  8792  001DD2  6E02               	movwf	i2_isdigit$936,c
  8793  001DD4                     i2l2800:
  8794  001DD4  C002  F001         	movff	i2_isdigit$936,??i2_isdigit
  8795  001DD8  3001               	rrcf	??i2_isdigit,w,c
  8796  001DDA  0012               	return	
  8797  001DDC                     __end_ofi2_isdigit:
  8798                           	opt stack 0
  8799                           pclatu	equ	0xFFB
  8800                           pclath	equ	0xFFA
  8801                           tblptru	equ	0xFF8
  8802                           tblptrh	equ	0xFF7
  8803                           tblptrl	equ	0xFF6
  8804                           tablat	equ	0xFF5
  8805                           prodh	equ	0xFF4
  8806                           prodl	equ	0xFF3
  8807                           intcon	equ	0xFF2
  8808                           intcon3	equ	0xFF0
  8809                           postinc0	equ	0xFEE
  8810                           fsr0h	equ	0xFEA
  8811                           fsr0l	equ	0xFE9
  8812                           wreg	equ	0xFE8
  8813                           fsr1h	equ	0xFE2
  8814                           fsr1l	equ	0xFE1
  8815                           indf2	equ	0xFDF
  8816                           postinc2	equ	0xFDE
  8817                           postdec2	equ	0xFDD
  8818                           fsr2h	equ	0xFDA
  8819                           fsr2l	equ	0xFD9
  8820                           status	equ	0xFD8
  8821                           
  8822 ;; *************** function i2___wmul *****************
  8823 ;; Defined at:
  8824 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  8825 ;; Parameters:    Size  Location     Type
  8826 ;;  multiplier      2    0[COMRAM] unsigned int 
  8827 ;;  multiplicand    2    2[COMRAM] unsigned int 
  8828 ;; Auto vars:     Size  Location     Type
  8829 ;;  __wmul          2    4[COMRAM] unsigned int 
  8830 ;; Return value:  Size  Location     Type
  8831 ;;                  2    0[COMRAM] unsigned int 
  8832 ;; Registers used:
  8833 ;;		wreg, status,2, status,0, prodl, prodh
  8834 ;; Tracked objects:
  8835 ;;		On entry : 0/0
  8836 ;;		On exit  : 0/0
  8837 ;;		Unchanged: 0/0
  8838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8839 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8840 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8841 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8842 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8843 ;;Total ram usage:        6 bytes
  8844 ;; Hardware stack levels used:    1
  8845 ;; This function calls:
  8846 ;;		Nothing
  8847 ;; This function is called by:
  8848 ;;		i2_printf
  8849 ;; This function uses a non-reentrant model
  8850 ;;
  8851                           
  8852                           	psect	text31
  8853  001D7A                     __ptext31:
  8854                           	opt stack 0
  8855  001D7A                     i2___wmul:
  8856                           	opt stack 25
  8857                           
  8858                           ;incstack = 0
  8859  001D7A  5001               	movf	i2___wmul@multiplier,w,c
  8860  001D7C  0203               	mulwf	i2___wmul@multiplicand,c
  8861  001D7E  CFF3 F005          	movff	prodl,i2___wmul@product
  8862  001D82  CFF4 F006          	movff	prodh,i2___wmul@product+1
  8863  001D86  5001               	movf	i2___wmul@multiplier,w,c
  8864  001D88  0204               	mulwf	i2___wmul@multiplicand+1,c
  8865  001D8A  50F3               	movf	prodl,w,c
  8866  001D8C  2606               	addwf	i2___wmul@product+1,f,c
  8867  001D8E  5002               	movf	i2___wmul@multiplier+1,w,c
  8868  001D90  0203               	mulwf	i2___wmul@multiplicand,c
  8869  001D92  50F3               	movf	prodl,w,c
  8870  001D94  2606               	addwf	i2___wmul@product+1,f,c
  8871  001D96  C005  F001         	movff	i2___wmul@product,?i2___wmul
  8872  001D9A  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
  8873  001D9E  0012               	return	
  8874  001DA0                     __end_ofi2___wmul:
  8875                           	opt stack 0
  8876                           pclatu	equ	0xFFB
  8877                           pclath	equ	0xFFA
  8878                           tblptru	equ	0xFF8
  8879                           tblptrh	equ	0xFF7
  8880                           tblptrl	equ	0xFF6
  8881                           tablat	equ	0xFF5
  8882                           prodh	equ	0xFF4
  8883                           prodl	equ	0xFF3
  8884                           intcon	equ	0xFF2
  8885                           intcon3	equ	0xFF0
  8886                           postinc0	equ	0xFEE
  8887                           fsr0h	equ	0xFEA
  8888                           fsr0l	equ	0xFE9
  8889                           wreg	equ	0xFE8
  8890                           fsr1h	equ	0xFE2
  8891                           fsr1l	equ	0xFE1
  8892                           indf2	equ	0xFDF
  8893                           postinc2	equ	0xFDE
  8894                           postdec2	equ	0xFDD
  8895                           fsr2h	equ	0xFDA
  8896                           fsr2l	equ	0xFD9
  8897                           status	equ	0xFD8
  8898                           
  8899 ;; *************** function i2___lwmod *****************
  8900 ;; Defined at:
  8901 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  8902 ;; Parameters:    Size  Location     Type
  8903 ;;  dividend        2    7[COMRAM] unsigned int 
  8904 ;;  divisor         2    9[COMRAM] unsigned int 
  8905 ;; Auto vars:     Size  Location     Type
  8906 ;;  __lwmod         1   11[COMRAM] unsigned char 
  8907 ;; Return value:  Size  Location     Type
  8908 ;;                  2    7[COMRAM] unsigned int 
  8909 ;; Registers used:
  8910 ;;		wreg, status,2, status,0
  8911 ;; Tracked objects:
  8912 ;;		On entry : 0/0
  8913 ;;		On exit  : 0/0
  8914 ;;		Unchanged: 0/0
  8915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8916 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8917 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8919 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8920 ;;Total ram usage:        5 bytes
  8921 ;; Hardware stack levels used:    1
  8922 ;; This function calls:
  8923 ;;		Nothing
  8924 ;; This function is called by:
  8925 ;;		i2_printf
  8926 ;; This function uses a non-reentrant model
  8927 ;;
  8928                           
  8929                           	psect	text32
  8930  001CB4                     __ptext32:
  8931                           	opt stack 0
  8932  001CB4                     i2___lwmod:
  8933                           	opt stack 25
  8934                           
  8935                           ;incstack = 0
  8936  001CB4  500A               	movf	i2___lwmod@divisor,w,c
  8937  001CB6  100B               	iorwf	i2___lwmod@divisor+1,w,c
  8938  001CB8  B4D8               	btfsc	status,2,c
  8939  001CBA  D018               	goto	i2l917
  8940  001CBC  0E01               	movlw	1
  8941  001CBE  6E0C               	movwf	i2___lwmod@counter,c
  8942  001CC0  D004               	goto	i2l2832
  8943  001CC2                     i2l2830:
  8944  001CC2  90D8               	bcf	status,0,c
  8945  001CC4  360A               	rlcf	i2___lwmod@divisor,f,c
  8946  001CC6  360B               	rlcf	i2___lwmod@divisor+1,f,c
  8947  001CC8  2A0C               	incf	i2___lwmod@counter,f,c
  8948  001CCA                     i2l2832:
  8949  001CCA  AE0B               	btfss	i2___lwmod@divisor+1,7,c
  8950  001CCC  D7FA               	goto	i2l2830
  8951  001CCE                     i2l2834:
  8952  001CCE  500A               	movf	i2___lwmod@divisor,w,c
  8953  001CD0  5C08               	subwf	i2___lwmod@dividend,w,c
  8954  001CD2  500B               	movf	i2___lwmod@divisor+1,w,c
  8955  001CD4  5809               	subwfb	i2___lwmod@dividend+1,w,c
  8956  001CD6  A0D8               	btfss	status,0,c
  8957  001CD8  D004               	goto	i2l2838
  8958  001CDA  500A               	movf	i2___lwmod@divisor,w,c
  8959  001CDC  5E08               	subwf	i2___lwmod@dividend,f,c
  8960  001CDE  500B               	movf	i2___lwmod@divisor+1,w,c
  8961  001CE0  5A09               	subwfb	i2___lwmod@dividend+1,f,c
  8962  001CE2                     i2l2838:
  8963  001CE2  90D8               	bcf	status,0,c
  8964  001CE4  320B               	rrcf	i2___lwmod@divisor+1,f,c
  8965  001CE6  320A               	rrcf	i2___lwmod@divisor,f,c
  8966  001CE8  2E0C               	decfsz	i2___lwmod@counter,f,c
  8967  001CEA  D7F1               	goto	i2l2834
  8968  001CEC                     i2l917:
  8969  001CEC  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
  8970  001CF0  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
  8971  001CF4  0012               	return		;funcret
  8972  001CF6                     __end_ofi2___lwmod:
  8973                           	opt stack 0
  8974                           pclatu	equ	0xFFB
  8975                           pclath	equ	0xFFA
  8976                           tblptru	equ	0xFF8
  8977                           tblptrh	equ	0xFF7
  8978                           tblptrl	equ	0xFF6
  8979                           tablat	equ	0xFF5
  8980                           prodh	equ	0xFF4
  8981                           prodl	equ	0xFF3
  8982                           intcon	equ	0xFF2
  8983                           intcon3	equ	0xFF0
  8984                           postinc0	equ	0xFEE
  8985                           fsr0h	equ	0xFEA
  8986                           fsr0l	equ	0xFE9
  8987                           wreg	equ	0xFE8
  8988                           fsr1h	equ	0xFE2
  8989                           fsr1l	equ	0xFE1
  8990                           indf2	equ	0xFDF
  8991                           postinc2	equ	0xFDE
  8992                           postdec2	equ	0xFDD
  8993                           fsr2h	equ	0xFDA
  8994                           fsr2l	equ	0xFD9
  8995                           status	equ	0xFD8
  8996                           
  8997 ;; *************** function i2___lwdiv *****************
  8998 ;; Defined at:
  8999 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  9000 ;; Parameters:    Size  Location     Type
  9001 ;;  dividend        2    0[COMRAM] unsigned int 
  9002 ;;  divisor         2    2[COMRAM] unsigned int 
  9003 ;; Auto vars:     Size  Location     Type
  9004 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  9005 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  9006 ;; Return value:  Size  Location     Type
  9007 ;;                  2    0[COMRAM] unsigned int 
  9008 ;; Registers used:
  9009 ;;		wreg, status,2, status,0
  9010 ;; Tracked objects:
  9011 ;;		On entry : 0/0
  9012 ;;		On exit  : 0/0
  9013 ;;		Unchanged: 0/0
  9014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9015 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9016 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9017 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9018 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9019 ;;Total ram usage:        7 bytes
  9020 ;; Hardware stack levels used:    1
  9021 ;; This function calls:
  9022 ;;		Nothing
  9023 ;; This function is called by:
  9024 ;;		i2_printf
  9025 ;; This function uses a non-reentrant model
  9026 ;;
  9027                           
  9028                           	psect	text33
  9029  001B3E                     __ptext33:
  9030                           	opt stack 0
  9031  001B3E                     i2___lwdiv:
  9032                           	opt stack 25
  9033                           
  9034                           ;incstack = 0
  9035  001B3E  0E00               	movlw	0
  9036  001B40  6E06               	movwf	i2___lwdiv@quotient+1,c
  9037  001B42  0E00               	movlw	0
  9038  001B44  6E05               	movwf	i2___lwdiv@quotient,c
  9039  001B46  5003               	movf	i2___lwdiv@divisor,w,c
  9040  001B48  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  9041  001B4A  B4D8               	btfsc	status,2,c
  9042  001B4C  D01C               	goto	i2l907
  9043  001B4E  0E01               	movlw	1
  9044  001B50  6E07               	movwf	i2___lwdiv@counter,c
  9045  001B52  D004               	goto	i2l2812
  9046  001B54                     i2l2810:
  9047  001B54  90D8               	bcf	status,0,c
  9048  001B56  3603               	rlcf	i2___lwdiv@divisor,f,c
  9049  001B58  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  9050  001B5A  2A07               	incf	i2___lwdiv@counter,f,c
  9051  001B5C                     i2l2812:
  9052  001B5C  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  9053  001B5E  D7FA               	goto	i2l2810
  9054  001B60                     i2l2814:
  9055  001B60  90D8               	bcf	status,0,c
  9056  001B62  3605               	rlcf	i2___lwdiv@quotient,f,c
  9057  001B64  3606               	rlcf	i2___lwdiv@quotient+1,f,c
  9058  001B66  5003               	movf	i2___lwdiv@divisor,w,c
  9059  001B68  5C01               	subwf	i2___lwdiv@dividend,w,c
  9060  001B6A  5004               	movf	i2___lwdiv@divisor+1,w,c
  9061  001B6C  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  9062  001B6E  A0D8               	btfss	status,0,c
  9063  001B70  D005               	goto	i2l2822
  9064  001B72  5003               	movf	i2___lwdiv@divisor,w,c
  9065  001B74  5E01               	subwf	i2___lwdiv@dividend,f,c
  9066  001B76  5004               	movf	i2___lwdiv@divisor+1,w,c
  9067  001B78  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  9068  001B7A  8005               	bsf	i2___lwdiv@quotient,0,c
  9069  001B7C                     i2l2822:
  9070  001B7C  90D8               	bcf	status,0,c
  9071  001B7E  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  9072  001B80  3203               	rrcf	i2___lwdiv@divisor,f,c
  9073  001B82  2E07               	decfsz	i2___lwdiv@counter,f,c
  9074  001B84  D7ED               	goto	i2l2814
  9075  001B86                     i2l907:
  9076  001B86  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  9077  001B8A  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  9078  001B8E  0012               	return		;funcret
  9079  001B90                     __end_ofi2___lwdiv:
  9080                           	opt stack 0
  9081                           pclatu	equ	0xFFB
  9082                           pclath	equ	0xFFA
  9083                           tblptru	equ	0xFF8
  9084                           tblptrh	equ	0xFF7
  9085                           tblptrl	equ	0xFF6
  9086                           tablat	equ	0xFF5
  9087                           prodh	equ	0xFF4
  9088                           prodl	equ	0xFF3
  9089                           intcon	equ	0xFF2
  9090                           intcon3	equ	0xFF0
  9091                           postinc0	equ	0xFEE
  9092                           fsr0h	equ	0xFEA
  9093                           fsr0l	equ	0xFE9
  9094                           wreg	equ	0xFE8
  9095                           fsr1h	equ	0xFE2
  9096                           fsr1l	equ	0xFE1
  9097                           indf2	equ	0xFDF
  9098                           postinc2	equ	0xFDE
  9099                           postdec2	equ	0xFDD
  9100                           fsr2h	equ	0xFDA
  9101                           fsr2l	equ	0xFD9
  9102                           status	equ	0xFD8
  9103                           
  9104 ;; *************** function i2_lcdInst *****************
  9105 ;; Defined at:
  9106 ;;		line 18 in file "../lcd.c"
  9107 ;; Parameters:    Size  Location     Type
  9108 ;;  data            1    wreg     unsigned char 
  9109 ;; Auto vars:     Size  Location     Type
  9110 ;;  data            1    2[COMRAM] unsigned char 
  9111 ;; Return value:  Size  Location     Type
  9112 ;;                  1    wreg      void 
  9113 ;; Registers used:
  9114 ;;		wreg, status,2, status,0, cstack
  9115 ;; Tracked objects:
  9116 ;;		On entry : 0/0
  9117 ;;		On exit  : 0/0
  9118 ;;		Unchanged: 0/0
  9119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9120 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9121 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9122 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9123 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9124 ;;Total ram usage:        1 bytes
  9125 ;; Hardware stack levels used:    1
  9126 ;; Hardware stack levels required when called:    1
  9127 ;; This function calls:
  9128 ;;		i2_lcdNibble
  9129 ;; This function is called by:
  9130 ;;		_switchMenu
  9131 ;;		_ISR
  9132 ;; This function uses a non-reentrant model
  9133 ;;
  9134                           
  9135                           	psect	text34
  9136  001E40                     __ptext34:
  9137                           	opt stack 0
  9138  001E40                     i2_lcdInst:
  9139                           	opt stack 25
  9140                           
  9141                           ;incstack = 0
  9142                           ;i2lcdInst@data stored from wreg
  9143  001E40  6E03               	movwf	i2lcdInst@data,c
  9144                           
  9145                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  9146  001E42  948C               	bcf	3980,2,c	;volatile
  9147                           
  9148                           ;lcd.c: 20: lcdNibble(data);
  9149  001E44  5003               	movf	i2lcdInst@data,w,c
  9150  001E46  ECEF  F00D         	call	i2_lcdNibble
  9151  001E4A  0012               	return		;funcret
  9152  001E4C                     __end_ofi2_lcdInst:
  9153                           	opt stack 0
  9154                           pclatu	equ	0xFFB
  9155                           pclath	equ	0xFFA
  9156                           tblptru	equ	0xFF8
  9157                           tblptrh	equ	0xFF7
  9158                           tblptrl	equ	0xFF6
  9159                           tablat	equ	0xFF5
  9160                           prodh	equ	0xFF4
  9161                           prodl	equ	0xFF3
  9162                           intcon	equ	0xFF2
  9163                           intcon3	equ	0xFF0
  9164                           postinc0	equ	0xFEE
  9165                           fsr0h	equ	0xFEA
  9166                           fsr0l	equ	0xFE9
  9167                           wreg	equ	0xFE8
  9168                           fsr1h	equ	0xFE2
  9169                           fsr1l	equ	0xFE1
  9170                           indf2	equ	0xFDF
  9171                           postinc2	equ	0xFDE
  9172                           postdec2	equ	0xFDD
  9173                           fsr2h	equ	0xFDA
  9174                           fsr2l	equ	0xFD9
  9175                           status	equ	0xFD8
  9176                           
  9177 ;; *************** function i2_lcdNibble *****************
  9178 ;; Defined at:
  9179 ;;		line 28 in file "../lcd.c"
  9180 ;; Parameters:    Size  Location     Type
  9181 ;;  data            1    wreg     unsigned char 
  9182 ;; Auto vars:     Size  Location     Type
  9183 ;;  data            1    1[COMRAM] unsigned char 
  9184 ;;  lcdNibble       1    0[COMRAM] unsigned char 
  9185 ;; Return value:  Size  Location     Type
  9186 ;;                  1    wreg      void 
  9187 ;; Registers used:
  9188 ;;		wreg, status,2, status,0
  9189 ;; Tracked objects:
  9190 ;;		On entry : 0/0
  9191 ;;		On exit  : 0/0
  9192 ;;		Unchanged: 0/0
  9193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9194 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9195 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9196 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9197 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9198 ;;Total ram usage:        2 bytes
  9199 ;; Hardware stack levels used:    1
  9200 ;; This function calls:
  9201 ;;		Nothing
  9202 ;; This function is called by:
  9203 ;;		i2_lcdInst
  9204 ;;		i2_putch
  9205 ;; This function uses a non-reentrant model
  9206 ;;
  9207                           
  9208                           	psect	text35
  9209  001BDE                     __ptext35:
  9210                           	opt stack 0
  9211  001BDE                     i2_lcdNibble:
  9212                           	opt stack 24
  9213                           
  9214                           ;incstack = 0
  9215                           ;i2lcdNibble@data stored from wreg
  9216  001BDE  6E02               	movwf	i2lcdNibble@data,c
  9217                           
  9218                           ;lcd.c: 30: char temp = data & 0xF0;
  9219  001BE0  5002               	movf	i2lcdNibble@data,w,c
  9220  001BE2  0BF0               	andlw	240
  9221  001BE4  6E01               	movwf	i2lcdNibble@temp,c
  9222                           
  9223                           ;lcd.c: 31: LATD = LATD & 0x0F;
  9224  001BE6  508C               	movf	3980,w,c	;volatile
  9225  001BE8  0B0F               	andlw	15
  9226  001BEA  6E8C               	movwf	3980,c	;volatile
  9227                           
  9228                           ;lcd.c: 32: LATD = temp | LATD;
  9229  001BEC  5001               	movf	i2lcdNibble@temp,w,c
  9230  001BEE  108C               	iorwf	3980,w,c	;volatile
  9231  001BF0  6E8C               	movwf	3980,c	;volatile
  9232                           
  9233                           ;lcd.c: 34: LATDbits.LATD3 = 0;
  9234  001BF2  968C               	bcf	3980,3,c	;volatile
  9235                           
  9236                           ;lcd.c: 35: _delay((unsigned long)((30)*(10000000/4000000.0)));
  9237  001BF4  0E19               	movlw	25
  9238  001BF6                     i2u564_47:
  9239  001BF6  2EE8               	decfsz	wreg,f,c
  9240  001BF8  D7FE               	bra	i2u564_47
  9241                           
  9242                           ;lcd.c: 36: LATDbits.LATD3 = 1;
  9243  001BFA  868C               	bsf	3980,3,c	;volatile
  9244                           
  9245                           ;lcd.c: 37: _delay((unsigned long)((30)*(10000000/4000000.0)));
  9246  001BFC  0E19               	movlw	25
  9247  001BFE                     i2u565_47:
  9248  001BFE  2EE8               	decfsz	wreg,f,c
  9249  001C00  D7FE               	bra	i2u565_47
  9250                           
  9251                           ;lcd.c: 39: data = data << 4;
  9252  001C02  3802               	swapf	i2lcdNibble@data,w,c
  9253  001C04  0BF0               	andlw	240
  9254  001C06  6E02               	movwf	i2lcdNibble@data,c
  9255                           
  9256                           ;lcd.c: 41: temp = data & 0xF0;
  9257  001C08  5002               	movf	i2lcdNibble@data,w,c
  9258  001C0A  0BF0               	andlw	240
  9259  001C0C  6E01               	movwf	i2lcdNibble@temp,c
  9260                           
  9261                           ;lcd.c: 42: LATD = LATD & 0x0F;
  9262  001C0E  508C               	movf	3980,w,c	;volatile
  9263  001C10  0B0F               	andlw	15
  9264  001C12  6E8C               	movwf	3980,c	;volatile
  9265                           
  9266                           ;lcd.c: 43: LATD = temp | LATD;
  9267  001C14  5001               	movf	i2lcdNibble@temp,w,c
  9268  001C16  108C               	iorwf	3980,w,c	;volatile
  9269  001C18  6E8C               	movwf	3980,c	;volatile
  9270                           
  9271                           ;lcd.c: 45: LATDbits.LATD3 = 0;
  9272  001C1A  968C               	bcf	3980,3,c	;volatile
  9273                           
  9274                           ;lcd.c: 46: _delay((unsigned long)((30)*(10000000/4000000.0)));
  9275  001C1C  0E19               	movlw	25
  9276  001C1E                     i2u566_47:
  9277  001C1E  2EE8               	decfsz	wreg,f,c
  9278  001C20  D7FE               	bra	i2u566_47
  9279                           
  9280                           ;lcd.c: 47: LATDbits.LATD3 = 1;
  9281  001C22  868C               	bsf	3980,3,c	;volatile
  9282                           
  9283                           ;lcd.c: 48: _delay((unsigned long)((30)*(10000000/4000000.0)));
  9284  001C24  0E19               	movlw	25
  9285  001C26                     i2u567_47:
  9286  001C26  2EE8               	decfsz	wreg,f,c
  9287  001C28  D7FE               	bra	i2u567_47
  9288  001C2A  0012               	return		;funcret
  9289  001C2C                     __end_ofi2_lcdNibble:
  9290                           	opt stack 0
  9291                           pclatu	equ	0xFFB
  9292                           pclath	equ	0xFFA
  9293                           tblptru	equ	0xFF8
  9294                           tblptrh	equ	0xFF7
  9295                           tblptrl	equ	0xFF6
  9296                           tablat	equ	0xFF5
  9297                           prodh	equ	0xFF4
  9298                           prodl	equ	0xFF3
  9299                           intcon	equ	0xFF2
  9300                           intcon3	equ	0xFF0
  9301                           postinc0	equ	0xFEE
  9302                           fsr0h	equ	0xFEA
  9303                           fsr0l	equ	0xFE9
  9304                           wreg	equ	0xFE8
  9305                           fsr1h	equ	0xFE2
  9306                           fsr1l	equ	0xFE1
  9307                           indf2	equ	0xFDF
  9308                           postinc2	equ	0xFDE
  9309                           postdec2	equ	0xFDD
  9310                           fsr2h	equ	0xFDA
  9311                           fsr2l	equ	0xFD9
  9312                           status	equ	0xFD8
  9313                           pclatu	equ	0xFFB
  9314                           pclath	equ	0xFFA
  9315                           tblptru	equ	0xFF8
  9316                           tblptrh	equ	0xFF7
  9317                           tblptrl	equ	0xFF6
  9318                           tablat	equ	0xFF5
  9319                           prodh	equ	0xFF4
  9320                           prodl	equ	0xFF3
  9321                           intcon	equ	0xFF2
  9322                           intcon3	equ	0xFF0
  9323                           postinc0	equ	0xFEE
  9324                           fsr0h	equ	0xFEA
  9325                           fsr0l	equ	0xFE9
  9326                           wreg	equ	0xFE8
  9327                           fsr1h	equ	0xFE2
  9328                           fsr1l	equ	0xFE1
  9329                           indf2	equ	0xFDF
  9330                           postinc2	equ	0xFDE
  9331                           postdec2	equ	0xFDD
  9332                           fsr2h	equ	0xFDA
  9333                           fsr2l	equ	0xFD9
  9334                           status	equ	0xFD8
  9335                           
  9336                           	psect	rparam
  9337  0000                     pclatu	equ	0xFFB
  9338                           pclath	equ	0xFFA
  9339                           tblptru	equ	0xFF8
  9340                           tblptrh	equ	0xFF7
  9341                           tblptrl	equ	0xFF6
  9342                           tablat	equ	0xFF5
  9343                           prodh	equ	0xFF4
  9344                           prodl	equ	0xFF3
  9345                           intcon	equ	0xFF2
  9346                           intcon3	equ	0xFF0
  9347                           postinc0	equ	0xFEE
  9348                           fsr0h	equ	0xFEA
  9349                           fsr0l	equ	0xFE9
  9350                           wreg	equ	0xFE8
  9351                           fsr1h	equ	0xFE2
  9352                           fsr1l	equ	0xFE1
  9353                           indf2	equ	0xFDF
  9354                           postinc2	equ	0xFDE
  9355                           postdec2	equ	0xFDD
  9356                           fsr2h	equ	0xFDA
  9357                           fsr2l	equ	0xFD9
  9358                           status	equ	0xFD8
  9359                           
  9360                           	psect	temp
  9361  00004C                     btemp:
  9362                           	opt stack 0
  9363  00004C                     	ds	1
  9364  0000                     int$flags	set	btemp
  9365                           pclatu	equ	0xFFB
  9366                           pclath	equ	0xFFA
  9367                           tblptru	equ	0xFF8
  9368                           tblptrh	equ	0xFF7
  9369                           tblptrl	equ	0xFF6
  9370                           tablat	equ	0xFF5
  9371                           prodh	equ	0xFF4
  9372                           prodl	equ	0xFF3
  9373                           intcon	equ	0xFF2
  9374                           intcon3	equ	0xFF0
  9375                           postinc0	equ	0xFEE
  9376                           fsr0h	equ	0xFEA
  9377                           fsr0l	equ	0xFE9
  9378                           wreg	equ	0xFE8
  9379                           fsr1h	equ	0xFE2
  9380                           fsr1l	equ	0xFE1
  9381                           indf2	equ	0xFDF
  9382                           postinc2	equ	0xFDE
  9383                           postdec2	equ	0xFDD
  9384                           fsr2h	equ	0xFDA
  9385                           fsr2l	equ	0xFD9
  9386                           status	equ	0xFD8


Data Sizes:
    Strings     388
    Constant    35
    Data        1
    BSS         44
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     63      75
    BANK0           128     39      72
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 25
		 -> STR_23(CODE[22]), STR_22(CODE[17]), STR_21(CODE[17]), STR_20(CODE[17]), 
		 -> STR_19(CODE[23]), STR_18(CODE[23]), STR_17(CODE[21]), STR_16(CODE[17]), 
		 -> STR_15(CODE[21]), STR_14(CODE[17]), STR_13(CODE[21]), STR_12(CODE[17]), 
		 -> STR_11(CODE[19]), STR_10(CODE[17]), STR_9(CODE[19]), STR_8(CODE[17]), 
		 -> STR_7(CODE[25]), STR_6(CODE[17]), STR_5(CODE[17]), STR_4(CODE[17]), 
		 -> STR_3(CODE[17]), STR_2(CODE[17]), STR_1(CODE[17]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 


Critical Paths under _main in COMRAM

    _main->_I2C_Master_Init
    _testBatteries->_wait_3ms
    _stopOperation->___awdiv
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _I2C_Master_Init->___lldiv

Critical Paths under _ISR in COMRAM

    _ISR->_switchMenu
    _switchMenu->i2_printf
    i2_stopOperation->i2___awdiv
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_lcdInst->i2_lcdNibble

Critical Paths under _main in BANK0

    _main->_printf
    _I2C_Master_Init->___lldiv

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                17    17      0    8690
                                             22 BANK0     17    17      0
                    _I2C_Master_Init
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _initLCD
                            _lcdInst
                             _printf
                            _readADC
                      _stopOperation
                      _testBatteries
                           _wait_3ms
 ---------------------------------------------------------------------------------
 (1) _testBatteries                                        0     0      0     854
                           _wait_3ms
 ---------------------------------------------------------------------------------
 (1) _wait_3ms                                             2     0      2     854
                                             51 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _stopOperation                                        0     0      0    1004
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     500
                                             51 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     504
                                             51 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _readADC                                              1     1      0      22
                                             51 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _printf                                              31    23      8    4349
                                              0 BANK0     22    14      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0     135
                                             53 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             51 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     289
                                             51 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     287
                                             58 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     418
                                             51 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                             54 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0     135
                                             53 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0     113
                                             51 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Write                                     2     0      2     214
                                             52 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Read                                      2     2      0      45
                                             52 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Wait                                      1     1      0       0
                                             51 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     503
                                             59 COMRAM     4     0      4
                                              5 BANK0      4     4      0
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     395
                                             51 COMRAM     8     0      8
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _ISR                                                 16    16      0    6841
                                             35 COMRAM    16    16      0
                         _switchMenu
                          i2___awdiv
                          i2___awmod
                          i2_lcdInst
                           i2_printf
                    i2_stopOperation
 ---------------------------------------------------------------------------------
 (5) _switchMenu                                           3     1      2    3137
                                             32 COMRAM     3     1      2
                          i2_lcdInst
                           i2_printf
                    i2_stopOperation
 ---------------------------------------------------------------------------------
 (5) i2_stopOperation                                      0     0      0     804
                          i2___awdiv
                          i2___awmod
 ---------------------------------------------------------------------------------
 (6) i2___awmod                                            6     2      4     400
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) i2___awdiv                                            8     4      4     404
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (5) i2_printf                                            29    23      6    1938
                                             12 COMRAM    20    14      6
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (6) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (6) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) i2___wmul                                             6     2      4     209
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (6) i2___lwdiv                                            7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (7) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _I2C_Master_Read
     _I2C_Master_Wait
   _I2C_Master_Start
     _I2C_Master_Wait
   _I2C_Master_Stop
     _I2C_Master_Wait
   _I2C_Master_Write
     _I2C_Master_Wait
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
       _lcdNibble
   _readADC
   _stopOperation
     ___awdiv
     ___awmod
   _testBatteries
     _wait_3ms
   _wait_3ms

 _ISR (ROOT)
   _switchMenu
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
       i2___lwmod
         i2___lwdiv (ARG)
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
     i2_stopOperation
       i2___awdiv
       i2___awmod
   i2___awdiv
   i2___awmod
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     i2___lwdiv
     i2___lwmod
       i2___lwdiv (ARG)
     i2___wmul
     i2_isdigit
     i2_putch
       i2_lcdNibble
   i2_stopOperation
     i2___awdiv
     i2___awmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     27      48       5       56.3%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     3F      4B       1       59.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      93      34        0.0%
DATA                 0      0      93       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Mon Mar 27 12:00:02 2017

                       l30 1E0A               ___awdiv@sign 0039        ___wmul@multiplicand 0036  
       i2___lwdiv@dividend 0001                __CFG_BORV$3 000000               __CFG_CP0$OFF 000000  
             __CFG_CP1$OFF 000000               __CFG_CP2$OFF 000000               __CFG_CP3$OFF 000000  
              __CFG_OSC$HS 000000                        l250 0206                        l252 025E  
                      l341 1480                        l254 02B6                        l327 1E04  
                      l271 048E                        l344 14E0                        l248 01AE  
                      l338 1420                        l349 1558                        l462 0E26  
                      l907 1B34                        l917 1CAA                        l854 1896  
                      _GIE 007F97               __CFG_CPB$OFF 000000                        _PEN 007E2A  
             __CFG_CPD$OFF 000000                        _ISR 0008                        _SEN 007E28  
                      _min 00BA                        _sec 00C0               ___awmod@sign 0039  
                      prod 000FF3                        wreg 000FE8               __CFG_LVP$OFF 000000  
                     ?_ISR 0001               __CFG_WDT$OFF 000000                       l3010 1C8C  
                     l3014 1CA0                       l3006 1C80                       l3008 1C88  
                     l3230 1D74                       l4220 1840                       l3404 13F8  
                     l4222 184E                       l4232 1886                       l4224 1852  
                     l4304 0EB6                       l4320 0EF2                       l3432 1458  
                     l4306 0EBC                       l4322 0F04                       l4250 0D2C  
                     l4410 00C6                       l4340 0F82                       l4332 0F5E  
                     l4252 0D3E                       l2900 18EA                       l3508 1568  
                     l3460 14B8                       l4334 0F68                       l4270 0DEE  
                     l4262 0D78                       l4246 0D18                       l2910 190A  
                     l2902 18EE                       l4406 00BC                       l4360 1026  
                     l4352 0FC4                       l4328 0F26                       l4256 0D48  
                     l4504 02C2                       l4424 010A                       l4370 108C  
                     l4346 0F9E                       l4290 0E7A                       l4274 0DF4  
                     l2914 1914                       l2930 19C4                       l3490 152A  
                     l3482 150E                       l4610 0506                       l4418 00E8  
                     l4348 0FAA                       l4356 0FD8                       l4292 0E80  
                     l4372 1098                       l2940 19E6                       l4540 0362  
                     l4612 050A                       l4516 0308                       l4428 0114  
                     l4436 0136                       l4358 0FDE                       l4366 1072  
                     l4286 0E5E                       l2918 1922                       l2942 19EA  
                     l2950 1A08                       l2934 19D0                       l4630 05A2  
                     l4622 055C                       l4518 030C                       l4438 0142  
                     l4614 0526                       l4368 1084                       l2856 1DE4  
                     l4704 0812                       l4640 05EE                       l4632 05AE  
                     l4624 0566                       l4616 0530                       l4560 03E2  
                     l4544 0378                       l4536 034C                       l4448 0168  
                     l2954 1A16                       l2946 19FE                       l2938 19DE  
                     l2868 1DB6                       l2892 18CC                       l4556 0396  
                     l4548 038E                       l2990 1B0E                       l2886 18BC  
                     l4670 06E2                       l4662 06A2                       l4654 0662  
                     l4646 0622                       l4638 05E2                       l4582 041E  
                     l4398 008A                       l4680 072E                       l4672 06EE  
                     l4664 06AE                       l4656 066E                       l4648 062E  
                     l2986 1B02                       l2898 18E2                       l2988 1B0A  
                     l4676 0724                       l4692 07B8                       l2998 1B2A  
                     l4694 07C4                       l4686 074E                       STR_1 FFDC  
                     STR_2 FFED                       STR_3 FFCB                       STR_4 FF87  
                     STR_5 FF65                       STR_6 FFBA                       STR_7 FE7A  
                     STR_8 FF54                       STR_9 FEEC                       _LATA 000F89  
                     _LATB 000F8A                       _LATC 000F8B                       _LATD 000F8C  
                     _LATE 000F8D                       u3400 14C4                       u3090 1D72  
                     u3410 14FC                       u3420 151A                       u3430 1546  
                     u5110 0184                       u3360 1404                       u5210 025E  
                     u3380 1464                       u5301 031C                       u3390 149C  
                     u5230 0286                       u5150 01D6                       u5208 0232  
                     u5128 0188                       u5410 04FC                       u5250 02B6  
                     u5170 0206                       _PEIE 007F96                       u5270 02DE  
                     u5190 022E                       u5248 028A                       u5168 01DA  
                     u5370 0462                       u5380 0464                       _RCEN 007E2B  
                     u5607 1BA8                       u5288 02E2                       u5617 1BB0  
                     u5627 1BD0                       u5547 00D8                       u5637 1BD8  
                     u5557 0126                       u5567 0518                       u4785 1ABE  
                     u5577 07FE                       u5587 1C32                       u5597 1C66  
                     _TMR0 000FD6                       _TMR1 000FCE                       _main 0012  
                     _keys FE57                       _numC 00BE                       _time 00A7  
                     fsr0h 000FEA                       fsr1h 000FE2         i2___lwdiv@quotient 0005  
                     fsr2h 000FDA                       fsr0l 000FE9                       indf2 000FDF  
                     fsr1l 000FE1                       fsr2l 000FD9                       btemp 004C  
                     prodh 000FF4                       prodl 000FF3                       start 000E  
            __CFG_IESO$OFF 000000            __end_ofi2_putch 1E40              __CFG_MCLRE$ON 000000  
             ___param_bank 000000                i2_lcdNibble 1BDE                      ??_ISR 0024  
         ?_I2C_Master_Init 003C           ?_I2C_Master_Read 0001           ?_I2C_Master_Wait 0001  
         ?_I2C_Master_Stop 0001                      ?_main 0001                      _ACKEN 007E2C  
                    _ACKDT 007E2D            __end_of___awdiv 192C                      _ADRES 000FC3  
                    STR_10 FF21                      STR_11 FEEC                      STR_20 FFA9  
                    STR_12 FF43                      STR_21 FF10                      STR_13 FED7  
                    STR_22 FF98                      STR_14 FF32                      STR_15 FED7  
                    STR_23 FEC1                      STR_16 FF76                      STR_24 FEFF  
                    STR_17 FED7                      STR_18 FE93                      STR_19 FEAA  
          __end_of___awmod 1A20            __end_of___lldiv 18A8                      _T0CON 000FD5  
          ___awdiv@divisor 0036                      _T1CON 000FCD            __end_of___lwdiv 1B3E  
          __end_of___lwmod 1CB4                      i2l430 0CCE                      i2l371 0952  
                    i2l462 11A2                      i2l907 1B86                      i2l917 1CEC  
          ___awdiv@counter 0038                      _PORTB 000F81                      _TRISA 000F92  
                    _TRISB 000F93                      _TRISC 000F94                      _TRISD 000F95  
                    _TRISE 000F96              _turn1BackLeft 00C3              __CFG_PWRT$OFF 000000  
            __CFG_WRT0$OFF 000000              __CFG_WRT1$OFF 000000              __CFG_WRT2$OFF 000000  
            __CFG_WRT3$OFF 000000            __end_of_lcdInst 1E34             __CFG_EBTR0$OFF 000000  
           __CFG_FCMEN$OFF 000000             __CFG_EBTR1$OFF 000000              _turn2BackLeft 00C5  
           __CFG_EBTR2$OFF 000000             __CFG_EBTR3$OFF 000000     __size_of_stopOperation 00FE  
            __CFG_WRTB$OFF 000000              __CFG_WRTC$OFF 000000              __CFG_WRTD$OFF 000000  
          __end_of_readADC 1E0A            __end_of_initLCD 1C72             __CFG_EBTRB$OFF 000000  
               i2isdigit@c 0003            __end_of_dpowers FE72                      _numAA 00BC  
                    _num9V 00BB            __end_of_isdigit 1DBE                      _step1 0049  
                    _step2 004A                      _putch 1E1C                      main@i 00A4  
                    pclath 000FFA                      tablat 000FF5           __end_ofi2___wmul 1DA0  
                    status 000FD8         __size_ofi2___awdiv 0084         __size_ofi2___awmod 0070  
           __CFG_PBADEN$ON 000000              i2printf@width 001E           __end_ofi2_printf 13C2  
       __size_ofi2___lwdiv 0052         __size_ofi2___lwmod 0042            __initialization 1CF6  
       __size_ofi2_lcdInst 000C               __end_of_main 081E               __end_of_keys FE68  
               i2printf@ap 0018         __size_ofi2_isdigit 001E                     ??_main 0096  
            __activetblptr 000002          ?_I2C_Master_Start 0001          ?_I2C_Master_Write 0035  
       ??_I2C_Master_Start 0035                     _ADCON0 000FC2                     _ADCON1 000FC1  
       ??_I2C_Master_Write 0037                     _ADCON2 000FC0           ___awdiv@dividend 0034  
          i2lcdNibble@data 0002                     ?_putch 0001            i2lcdNibble@temp 0001  
                   _INT1IE 007F83                     _INT1IF 007F80                     i2l3102 1174  
                   i2l3120 11EE                     i2l3200 13A8                     i2l3114 11D0  
                   i2l3132 121A                     i2l4100 0B54                     i2l4012 0980  
                   i2l3134 121E                     i2l3150 125A                     i2l3118 11EA  
                   i2l3160 1298                     i2l3080 10DE                     i2l4112 0B78  
                   i2l4104 0B60                     i2l4032 09E8                     i2l4024 09BE  
                   i2l3162 12A0                     i2l3090 1112                     i2l3074 10C0  
                   i2l4202 0CA4                     i2l4130 0BBA                     i2l4122 0BA0  
                   i2l4042 0A28                     i2l3180 12E8                     i2l3156 1274  
                   i2l3148 124A                     i2l3084 10E4                     i2l4212 0CCC  
                   i2l4108 0B6C                     i2l4124 0BA2                     i2l4044 0A2C  
                   i2l3174 12CC                     i2l3078 10D0                     i2l4142 0BDC  
                   i2l4134 0BC6                     i2l4118 0B94                     i2l4054 0A6C  
                   i2l2800 1DD4                     i2l3176 12D4                     i2l3184 12FA  
                   i2l3168 12B6                     i2l2720 1940                     i2l3600 17F4  
                   i2l4208 0CC0                     i2l4160 0C1C                     i2l4152 0C04  
                   i2l4080 0AF8                     i2l4056 0A70                     i2l2810 1B54  
                   i2l3186 1300                     i2l3194 138A                     i2l3098 1170  
                   i2l3602 17FA                     i2l4138 0BD2                     i2l4154 0C06  
                   i2l2812 1B5C                     i2l3188 1344                     i2l3196 139A  
                   i2l2732 1966                     i2l4172 0C40                     i2l4164 0C28  
                   i2l4148 0BF8                     i2l4068 0AB4                     i2l2822 1B7C  
                   i2l2814 1B60                     i2l2830 1CC2                     i2l3198 13A0  
                   i2l2734 196E                     i2l2726 1950                     i2l4190 0C82  
                   i2l4182 0C68                     i2l4094 0B3E                     i2l2832 1CCA  
                   i2l2752 19A6                     i2l2744 198E                     i2l2736 1972  
                   i2l3608 1814                     i2l4168 0C34                     i2l4184 0C6A  
                   i2l2834 1CCE                     i2l4194 0C8E                     i2l4178 0C5C  
                   i2l2748 1998                     i2l2780 1A6E                     i2l2772 1A4E  
                   i2l2764 1A34                     i2l2838 1CE2                     i2l2774 1A56  
                   i2l3582 17B2                     i2l4198 0C9A                     i2l2776 1A5A  
                   i2l2784 1A78                     i2l2768 1A40                     i2l3592 17D2  
                   i2l3578 17A2                     i2l2788 1A86                     i2l3950 0886  
                   i2l3984 0916                     i2l3992 092C                     i2l3986 091A  
                   i2l3978 0900                     i2l3994 0930                     _TMR0IE 007F95  
                   _TMR0IF 007F92                  ??i2_putch 0003                     _TMR1IE 007CE8  
                   _TMR1IF 007CF0                     _SSPADD 000FC8                     _TRISC3 007CA3  
                   _TRISC4 007CA4                     _SSPBUF 000FC9             _turn1BackRight 00C4  
           __CFG_XINST$OFF 000000              _stopOperation 156C             _turn2BackRight 00C6  
                   ___wmul 1D2E                  ??___awdiv 0038             __CFG_STVREN$ON 000000  
                ??___awmod 0038                  ??___lldiv 003C                  ??___lwdiv 0038  
                ??___lwmod 003F                     _countC 00B8                     clear_0 1D0E  
                   clear_1 1D1A           ___awdiv@quotient 003A            ___awmod@divisor 0036  
          ___awmod@counter 0038                  ??_lcdInst 0036                     _printf 0D0A  
           i2___awdiv@sign 0006                  ??_readADC 0034                  ??_initLCD 0037  
 __size_ofi2_stopOperation 00FE           __end_of_wait_3ms 1DF6                  ??_isdigit 0034  
        __end_ofi2___awdiv 19B0          __end_ofi2___awmod 1A90          __end_ofi2___lwdiv 1B90  
             __mediumconst FE56          __end_ofi2___lwmod 1CF6                     tblptrh 000FF7  
                   tblptrl 000FF6                     tblptru 000FF8            switchMenu@right 0021  
           i2___awmod@sign 0006          __end_ofi2_lcdInst 1E4C          __end_ofi2_isdigit 1DDC  
               __accesstop 0080    __end_of__initialization 1D20              ___rparam_used 000001  
           ?_stopOperation 0001         i2___lwmod@dividend 0008             __pcstackCOMRAM 0001  
             __pidataBANK0 1E66              __end_of_putch 1E28                i2printf@idx 0017  
              i2printf@val 001B                  ?i2___wmul 0001         __size_of_lcdNibble 004E  
              i2putch@data 0003                ISR@keypress 0033                  ?i2_printf 000D  
                  ??_putch 0036                 __pbssBANK0 00A7      __end_of_testBatteries 156C  
             ?i2_lcdNibble 0001                    ?___wmul 0034                    ?_printf 0080  
               ??i2___wmul 0005                 ??i2_printf 0013                    _SSPCON1 000FC6  
                  _SSPCON2 000FC5          ??i2_stopOperation 0009                    _SSPSTAT 000FC7  
                  i2_putch 1E34                 _countDrain 00B9            ??_stopOperation 003C  
        __end_of_lcdNibble 1BDE                    __Hparam 0000                    __Lparam 0000  
                ?_wait_3ms 0034                    ___awdiv 18A8                    ___awmod 19B0  
                  ___lldiv 181A            __size_of___wmul 0026                    ___lwdiv 1AEC  
                  ___lwmod 1C72                    __pcinit 1CF6                 _plat1Right 00B0  
                  __ramtop 1000                 _plat2Right 00B4                    _lcdInst 1E28  
                  __ptext0 0012                    __ptext1 13C2                    __ptext2 1DDC  
                  __ptext3 156C                    __ptext4 19B0                    __ptext5 18A8  
                  __ptext6 1DF6                    __ptext7 0D0A                    __ptext8 1E1C  
                  __ptext9 1DA0            __size_of_printf 03AC                  _T0CONbits 000FD5  
                  _countAA 00B7                    _count9V 00B6                    _readADC 1DF6  
                  _initLCD 1C2C               __size_of_ISR 0D02          __end_of_hexpowers FE7A  
                _T1CONbits 000FCD              i2_isdigit$936 0002                    _dpowers FE68  
                  _isdigit 1DA0                    _opTimer 0047           ___awmod@dividend 0034  
                  _numBats 00BD   __size_of_I2C_Master_Init 005C   __size_of_I2C_Master_Read 0026  
 __size_of_I2C_Master_Wait 0012   __size_of_I2C_Master_Stop 0008                    _sorting 0048  
           __pintcode_body 081E       end_of_initialization 1D20              __Lmediumconst FE56  
                  int_func 081E        i2___wmul@multiplier 0001                 _screenMode 00C7  
__size_of_I2C_Master_Start 0008  __size_of_I2C_Master_Write 000A            ___lldiv@divisor 0038  
          ___lldiv@counter 0084                 ??_wait_3ms 0036                    printf@c 0095  
                  printf@f 0080           I2C_Master_Init@c 003C           I2C_Master_Read@a 0035  
                  postdec2 000FDD                 _solOnTimer 0042                    postinc0 000FEE  
                  postinc2 000FDE                 _stepAmount 0044                  i2___awdiv 192C  
                i2___awmod 1A20          i2___lwdiv@divisor 0003                  i2___lwdiv 1B3E  
                i2___lwmod 1CB4          i2___lwdiv@counter 0007                  i2_lcdInst 1E40  
              printf@width 0093         i2___awdiv@dividend 0001                  i2_isdigit 1DBE  
               _switchMenu 1768             __end_of___wmul 1D54       __size_ofi2_lcdNibble 004E  
            i2lcdInst@data 0003           i2___wmul@product 0005             __end_of_printf 10B6  
             i2printf@flag 001D               i2printf@prec 001A        start_initialization 1CF6  
       i2___awdiv@quotient 0007                __end_of_ISR 0D0A          __size_ofi2___wmul 0026  
                i2printf@c 0020                  i2printf@f 000D                 ?i2___awdiv 0001  
               ?i2___awmod 0001                 ?i2___lwdiv 0001                 ?i2___lwmod 0008  
        __size_ofi2_printf 030C          ??_I2C_Master_Init 0085          ??_I2C_Master_Read 0035  
        ??_I2C_Master_Wait 0034                 ?i2_lcdInst 0001          ??_I2C_Master_Stop 0035  
               ?i2_isdigit 0001                   ??___wmul 0038                __pdataBANK0 00C7  
         __CFG_LPT1OSC$OFF 000000             switchMenu@left 0023            i2_stopOperation 166A  
                 ??_printf 0088                __pbssCOMRAM 0040              __pcstackBANK0 0080  
        i2___lwmod@divisor 000A          i2___lwmod@counter 000C                   ?i2_putch 0001  
         _I2C_Master_Start 1E5E           _I2C_Master_Write 1E4C           ___lwdiv@dividend 0034  
        __CFG_CCP2MX$PORTC 000000                ?_switchMenu 0021                  __pintcode 0008  
            __pmediumconst FE56                  _lcdNibble 1B90                   ?___awdiv 0034  
                 ?___awmod 0034                   ?___lldiv 0034          __size_of_wait_3ms 001A  
                 ?___lwdiv 0034                   ?___lwmod 003B                  _doneTimer 0046  
                 ?_lcdInst 0001                   ?_readADC 0001                   ?_initLCD 0001  
   __size_of_testBatteries 01AA                  _count_3ms 0040                   ?_isdigit 0001  
                _hexpowers FE72           ___lwdiv@quotient 0038                ??i2___awdiv 0005  
              ??i2___awmod 0005                  _plat1Left 00AE                  _plat2Left 00B2  
              ??i2___lwdiv 0005                ??i2___lwmod 000C             __size_of_putch 000C  
              ??i2_lcdInst 0003             ___wmul@product 0038                   _LATAbits 000F89  
                 _LATBbits 000F8A                   _LATCbits 000F8B                   _LATDbits 000F8C  
                 _LATEbits 000F8D                ??i2_isdigit 0001      __end_of_stopOperation 166A  
                 i2u412_40 0912                   i2u430_40 0A1C                   i2u422_40 099E  
                 i2u440_40 0ACC                   i2u432_40 0A44                   i2u423_48 09A0  
                 i2u417_40 0962                   i2u442_40 0AE8                   i2u441_48 0ACE  
                 i2u434_40 0A60                   i2u433_48 0A46                   i2u426_40 09D8  
                 i2u418_40 0974                   i2u444_40 0B10                   i2u436_40 0A88  
                 i2u428_40 0A00                   i2u419_48 0976                   i2u446_40 0B2C  
                 i2u445_48 0B12                   i2u438_40 0AA4                   i2u437_48 0A8A  
                 i2u429_48 0A02                   i2u564_47 1BF6                   i2u565_47 1BFE  
                 i2u566_47 1C1E                   i2u567_47 1C26                  _waitPlats 004B  
  __end_ofi2_stopOperation 1768           __CFG_WDTPS$32768 000000                 ?_lcdNibble 0001  
                _startGear 00C1                 _ADCON0bits 000FC2                  main@i_633 00A6  
                main@i_583 00A5                  main@i_592 009A                  main@i_593 009C  
                main@i_594 009E                  main@i_595 00A0                  main@i_596 00A2  
        ___wmul@multiplier 0034                   i2___wmul 1D7A              lcdNibble@data 0035  
               printf@flag 0092              lcdNibble@temp 0034                 printf@prec 008F  
        i2___awdiv@divisor 0003          i2___awdiv@counter 0005                   i2_printf 10B6  
      __size_of_switchMenu 00B2        I2C_Master_Read@temp 0036         i2___awmod@dividend 0001  
         __size_ofi2_putch 000C              _testBatteries 13C2                   __Hrparam 0000  
                 __Lrparam 0000         __CFG_BOREN$SBORDIS 000000              switchMenu@key 0022  
         __size_of___awdiv 0084           __size_of___awmod 0070      i2___wmul@multiplicand 0003  
         __size_of___lldiv 008E           __size_of___lwdiv 0052           __size_of___lwmod 0042  
           readADC@channel 0034                _isdigit$936 0035           __size_of_lcdInst 000C  
          _I2C_Master_Init 1A90           __size_of_readADC 0014            _I2C_Master_Read 1D54  
         __size_of_initLCD 0046            _I2C_Master_Wait 1E0A            _I2C_Master_Stop 1E56  
         __size_of_isdigit 001E            ___lwdiv@divisor 0036            ___lwdiv@counter 003A  
                 __ptext10 1D2E                   __ptext11 1C72                   __ptext20 1E0A  
                 __ptext12 1AEC                   __ptext21 1A90                   __ptext13 1C2C  
                 __ptext30 1DBE                   __ptext22 181A                   __ptext14 1E28  
                 __ptext31 1D7A                   __ptext15 1B90                   __ptext32 1CB4  
                 __ptext24 1768                   __ptext16 1E4C                   __ptext33 1B3E  
                 __ptext25 166A                   __ptext17 1E56                   __ptext34 1E40  
                 __ptext26 1A20                   __ptext18 1E5E                   __ptext35 1BDE  
                 __ptext27 192C                   __ptext19 1D54                   __ptext28 10B6  
                 __ptext29 1E34              __size_of_main 080C                  wait_3ms@x 0034  
           ?_testBatteries 0001                   _numDrain 00BF                   _wait_3ms 1DDC  
         ?i2_stopOperation 0001              ??i2_lcdNibble 0001                ??_lcdNibble 0034  
                 int$flags 004C                   _stepGear 00C2                  printf@idx 008C  
                printf@val 0090          i2___awmod@divisor 0003                  putch@data 0036  
        i2___awmod@counter 0005   __end_of_I2C_Master_Start 1E66   __end_of_I2C_Master_Write 1E56  
               _INTCONbits 000FF2                   isdigit@c 0036                   intlevel2 0000  
         ___lwmod@dividend 003B           ___lldiv@dividend 0034               ??_switchMenu 0023  
                 printf@ap 008D    __end_of_I2C_Master_Init 1AEC    __end_of_I2C_Master_Read 1D7A  
  __end_of_I2C_Master_Wait 1E1C    __end_of_I2C_Master_Stop 1E5E                lcdInst@data 0036  
      __end_ofi2_lcdNibble 1C2C           ___lldiv@quotient 0080          I2C_Master_Write@d 0035  
          ___lwmod@divisor 003D            ___lwmod@counter 003F         __end_of_switchMenu 181A  
          ??_testBatteries 0036  
