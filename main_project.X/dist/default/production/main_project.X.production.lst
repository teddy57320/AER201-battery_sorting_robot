

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sat Apr 01 14:47:45 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    37                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    51                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    52                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    53  0000                     
    54                           ; Version 1.40
    55                           ; Generated 01/12/2016 GMT
    56                           ; 
    57                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    58                           ; All rights reserved.
    59                           ; 
    60                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    61                           ; 
    62                           ; Redistribution and use in source and binary forms, with or without modification, are
    63                           ; permitted provided that the following conditions are met:
    64                           ; 
    65                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    66                           ;        conditions and the following disclaimer.
    67                           ; 
    68                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    69                           ;        of conditions and the following disclaimer in the documentation and/or other
    70                           ;        materials provided with the distribution.
    71                           ; 
    72                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    73                           ;        software without specific prior written permission.
    74                           ; 
    75                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    76                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    77                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    78                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    79                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    80                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    81                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    82                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    83                           ; 
    84                           ; 
    85                           ; Code-generator required, PIC18F4620 Definitions
    86                           ; 
    87                           ; SFR Addresses
    88  0000                     
    89                           	psect	idataBANK0
    90  001E82                     __pidataBANK0:
    91                           	opt stack 0
    92                           
    93                           ;initializer for _screenMode
    94  001E82  02                 	db	2
    95                           
    96                           	psect	mediumconst
    97  00FE46                     __pmediumconst:
    98                           	opt stack 0
    99  00FE46  00                 	db	0
   100  00FE47                     _keys:
   101                           	opt stack 0
   102  00FE47  31                 	db	49
   103  00FE48  32                 	db	50
   104  00FE49  33                 	db	51
   105  00FE4A  41                 	db	65
   106  00FE4B  34                 	db	52
   107  00FE4C  35                 	db	53
   108  00FE4D  36                 	db	54
   109  00FE4E  42                 	db	66
   110  00FE4F  37                 	db	55
   111  00FE50  38                 	db	56
   112  00FE51  39                 	db	57
   113  00FE52  43                 	db	67
   114  00FE53  2A                 	db	42
   115  00FE54  30                 	db	48
   116  00FE55  23                 	db	35
   117  00FE56  44                 	db	68
   118  00FE57  00                 	db	0
   119  00FE58                     __end_of_keys:
   120                           	opt stack 0
   121  00FE58                     _dpowers:
   122                           	opt stack 0
   123  00FE58  0001               	dw	1
   124  00FE5A  000A               	dw	10
   125  00FE5C  0064               	dw	100
   126  00FE5E  03E8               	dw	1000
   127  00FE60  2710               	dw	10000
   128  00FE62                     __end_of_dpowers:
   129                           	opt stack 0
   130  00FE62                     _hexpowers:
   131                           	opt stack 0
   132  00FE62  0001               	dw	1
   133  00FE64  0010               	dw	16
   134  00FE66  0100               	dw	256
   135  00FE68  1000               	dw	4096
   136  00FE6A                     __end_of_hexpowers:
   137                           	opt stack 0
   138  0000                     _ADRES	set	4035
   139  0000                     _TMR0	set	4054
   140  0000                     _TMR1	set	4046
   141  0000                     _ADCON0	set	4034
   142  0000                     _ADCON0bits	set	4034
   143  0000                     _ADCON1	set	4033
   144  0000                     _ADCON2	set	4032
   145  0000                     _INTCONbits	set	4082
   146  0000                     _LATA	set	3977
   147  0000                     _LATAbits	set	3977
   148  0000                     _LATB	set	3978
   149  0000                     _LATBbits	set	3978
   150  0000                     _LATC	set	3979
   151  0000                     _LATCbits	set	3979
   152  0000                     _LATD	set	3980
   153  0000                     _LATDbits	set	3980
   154  0000                     _LATE	set	3981
   155  0000                     _LATEbits	set	3981
   156  0000                     _PORTB	set	3969
   157  0000                     _SSPADD	set	4040
   158  0000                     _SSPBUF	set	4041
   159  0000                     _SSPCON1	set	4038
   160  0000                     _SSPCON2	set	4037
   161  0000                     _SSPSTAT	set	4039
   162  0000                     _T0CON	set	4053
   163  0000                     _T0CONbits	set	4053
   164  0000                     _T1CON	set	4045
   165  0000                     _T1CONbits	set	4045
   166  0000                     _TRISA	set	3986
   167  0000                     _TRISB	set	3987
   168  0000                     _TRISC	set	3988
   169  0000                     _TRISD	set	3989
   170  0000                     _TRISE	set	3990
   171  0000                     _ACKDT	set	32301
   172  0000                     _ACKEN	set	32300
   173  0000                     _GIE	set	32663
   174  0000                     _INT1IE	set	32643
   175  0000                     _INT1IF	set	32640
   176  0000                     _PEIE	set	32662
   177  0000                     _PEN	set	32298
   178  0000                     _RCEN	set	32299
   179  0000                     _SEN	set	32296
   180  0000                     _TMR0IE	set	32661
   181  0000                     _TMR0IF	set	32658
   182  0000                     _TMR1IE	set	31976
   183  0000                     _TMR1IF	set	31984
   184  0000                     _TRISC3	set	31907
   185  0000                     _TRISC4	set	31908
   186  00FE6A                     STR_8:
   187  00FE6A  25                 	db	37
   188  00FE6B  30                 	db	48	;'0'
   189  00FE6C  32                 	db	50	;'2'
   190  00FE6D  64                 	db	100	;'d'
   191  00FE6E  3A                 	db	58	;':'
   192  00FE6F  25                 	db	37
   193  00FE70  30                 	db	48	;'0'
   194  00FE71  32                 	db	50	;'2'
   195  00FE72  64                 	db	100	;'d'
   196  00FE73  20                 	db	32
   197  00FE74  20                 	db	32
   198  00FE75  20                 	db	32
   199  00FE76  20                 	db	32
   200  00FE77  20                 	db	32
   201  00FE78  20                 	db	32
   202  00FE79  20                 	db	32
   203  00FE7A  20                 	db	32
   204  00FE7B  20                 	db	32
   205  00FE7C  20                 	db	32
   206  00FE7D  20                 	db	32
   207  00FE7E  20                 	db	32
   208  00FE7F  20                 	db	32
   209  00FE80  20                 	db	32
   210  00FE81  20                 	db	32
   211  00FE82  00                 	db	0
   212  00FE83                     STR_19:
   213  00FE83  44                 	db	68	;'D'
   214  00FE84  41                 	db	65	;'A'
   215  00FE85  54                 	db	84	;'T'
   216  00FE86  45                 	db	69	;'E'
   217  00FE87  3A                 	db	58	;':'
   218  00FE88  20                 	db	32
   219  00FE89  25                 	db	37
   220  00FE8A  30                 	db	48	;'0'
   221  00FE8B  32                 	db	50	;'2'
   222  00FE8C  78                 	db	120	;'x'
   223  00FE8D  2F                 	db	47
   224  00FE8E  25                 	db	37
   225  00FE8F  30                 	db	48	;'0'
   226  00FE90  32                 	db	50	;'2'
   227  00FE91  78                 	db	120	;'x'
   228  00FE92  2F                 	db	47
   229  00FE93  25                 	db	37
   230  00FE94  30                 	db	48	;'0'
   231  00FE95  32                 	db	50	;'2'
   232  00FE96  78                 	db	120	;'x'
   233  00FE97  20                 	db	32
   234  00FE98  20                 	db	32
   235  00FE99  00                 	db	0
   236  00FE9A                     STR_20:
   237  00FE9A  54                 	db	84	;'T'
   238  00FE9B  49                 	db	73	;'I'
   239  00FE9C  4D                 	db	77	;'M'
   240  00FE9D  45                 	db	69	;'E'
   241  00FE9E  3A                 	db	58	;':'
   242  00FE9F  20                 	db	32
   243  00FEA0  25                 	db	37
   244  00FEA1  30                 	db	48	;'0'
   245  00FEA2  32                 	db	50	;'2'
   246  00FEA3  78                 	db	120	;'x'
   247  00FEA4  3A                 	db	58	;':'
   248  00FEA5  25                 	db	37
   249  00FEA6  30                 	db	48	;'0'
   250  00FEA7  32                 	db	50	;'2'
   251  00FEA8  78                 	db	120	;'x'
   252  00FEA9  3A                 	db	58	;':'
   253  00FEAA  25                 	db	37
   254  00FEAB  30                 	db	48	;'0'
   255  00FEAC  32                 	db	50	;'2'
   256  00FEAD  78                 	db	120	;'x'
   257  00FEAE  20                 	db	32
   258  00FEAF  20                 	db	32
   259  00FEB0  00                 	db	0
   260  00FEB1                     STR_24:
   261  00FEB1  52                 	db	82	;'R'
   262  00FEB2  55                 	db	85	;'U'
   263  00FEB3  4E                 	db	78	;'N'
   264  00FEB4  4E                 	db	78	;'N'
   265  00FEB5  49                 	db	73	;'I'
   266  00FEB6  4E                 	db	78	;'N'
   267  00FEB7  47                 	db	71	;'G'
   268  00FEB8  3A                 	db	58	;':'
   269  00FEB9  20                 	db	32
   270  00FEBA  25                 	db	37
   271  00FEBB  30                 	db	48	;'0'
   272  00FEBC  32                 	db	50	;'2'
   273  00FEBD  64                 	db	100	;'d'
   274  00FEBE  3A                 	db	58	;':'
   275  00FEBF  25                 	db	37
   276  00FEC0  30                 	db	48	;'0'
   277  00FEC1  32                 	db	50	;'2'
   278  00FEC2  64                 	db	100	;'d'
   279  00FEC3  20                 	db	32
   280  00FEC4  20                 	db	32
   281  00FEC5  20                 	db	32
   282  00FEC6  00                 	db	0
   283  00FEC7                     STR_14:
   284  00FEC7  42                 	db	66	;'B'
   285  00FEC8  41                 	db	65	;'A'
   286  00FEC9  54                 	db	84	;'T'
   287  00FECA  54                 	db	84	;'T'
   288  00FECB  45                 	db	69	;'E'
   289  00FECC  52                 	db	82	;'R'
   290  00FECD  49                 	db	73	;'I'
   291  00FECE  45                 	db	69	;'E'
   292  00FECF  53                 	db	83	;'S'
   293  00FED0  3A                 	db	58	;':'
   294  00FED1  20                 	db	32
   295  00FED2  25                 	db	37
   296  00FED3  30                 	db	48	;'0'
   297  00FED4  32                 	db	50	;'2'
   298  00FED5  64                 	db	100	;'d'
   299  00FED6  20                 	db	32
   300  00FED7  20                 	db	32
   301  00FED8  20                 	db	32
   302  00FED9  20                 	db	32
   303  00FEDA  20                 	db	32
   304  00FEDB  00                 	db	0
   305  00FEDC                     STR_10:
   306  00FEDC  42                 	db	66	;'B'
   307  00FEDD  41                 	db	65	;'A'
   308  00FEDE  54                 	db	84	;'T'
   309  00FEDF  54                 	db	84	;'T'
   310  00FEE0  45                 	db	69	;'E'
   311  00FEE1  52                 	db	82	;'R'
   312  00FEE2  49                 	db	73	;'I'
   313  00FEE3  45                 	db	69	;'E'
   314  00FEE4  53                 	db	83	;'S'
   315  00FEE5  3A                 	db	58	;':'
   316  00FEE6  20                 	db	32
   317  00FEE7  25                 	db	37
   318  00FEE8  30                 	db	48	;'0'
   319  00FEE9  32                 	db	50	;'2'
   320  00FEEA  64                 	db	100	;'d'
   321  00FEEB  20                 	db	32
   322  00FEEC  20                 	db	32
   323  00FEED  20                 	db	32
   324  00FEEE  00                 	db	0
   325  00FEEF                     STR_25:
   326  00FEEF  30                 	db	48	;'0'
   327  00FEF0  31                 	db	49	;'1'
   328  00FEF1  32                 	db	50	;'2'
   329  00FEF2  33                 	db	51	;'3'
   330  00FEF3  34                 	db	52	;'4'
   331  00FEF4  35                 	db	53	;'5'
   332  00FEF5  36                 	db	54	;'6'
   333  00FEF6  37                 	db	55	;'7'
   334  00FEF7  38                 	db	56	;'8'
   335  00FEF8  39                 	db	57	;'9'
   336  00FEF9  61                 	db	97	;'a'
   337  00FEFA  62                 	db	98	;'b'
   338  00FEFB  63                 	db	99	;'c'
   339  00FEFC  64                 	db	100	;'d'
   340  00FEFD  65                 	db	101	;'e'
   341  00FEFE  66                 	db	102	;'f'
   342  00FEFF  00                 	db	0
   343  00FF00                     STR_22:
   344  00FF00  20                 	db	32
   345  00FF01  20                 	db	32
   346  00FF02  20                 	db	32
   347  00FF03  20                 	db	32
   348  00FF04  20                 	db	32
   349  00FF05  20                 	db	32
   350  00FF06  20                 	db	32
   351  00FF07  20                 	db	32
   352  00FF08  20                 	db	32
   353  00FF09  20                 	db	32
   354  00FF0A  20                 	db	32
   355  00FF0B  20                 	db	32
   356  00FF0C  20                 	db	32
   357  00FF0D  20                 	db	32
   358  00FF0E  20                 	db	32
   359  00FF0F  20                 	db	32
   360  00FF10  00                 	db	0
   361  00FF11                     STR_11:
   362  00FF11  23                 	db	35
   363  00FF12  20                 	db	32
   364  00FF13  4F                 	db	79	;'O'
   365  00FF14  46                 	db	70	;'F'
   366  00FF15  20                 	db	32
   367  00FF16  43                 	db	67	;'C'
   368  00FF17  20                 	db	32
   369  00FF18  20                 	db	32
   370  00FF19  20                 	db	32
   371  00FF1A  20                 	db	32
   372  00FF1B  20                 	db	32
   373  00FF1C  20                 	db	32
   374  00FF1D  20                 	db	32
   375  00FF1E  20                 	db	32
   376  00FF1F  20                 	db	32
   377  00FF20  20                 	db	32
   378  00FF21  00                 	db	0
   379  00FF22                     STR_15:
   380  00FF22  23                 	db	35
   381  00FF23  20                 	db	32
   382  00FF24  4F                 	db	79	;'O'
   383  00FF25  46                 	db	70	;'F'
   384  00FF26  20                 	db	32
   385  00FF27  41                 	db	65	;'A'
   386  00FF28  41                 	db	65	;'A'
   387  00FF29  20                 	db	32
   388  00FF2A  20                 	db	32
   389  00FF2B  20                 	db	32
   390  00FF2C  20                 	db	32
   391  00FF2D  20                 	db	32
   392  00FF2E  20                 	db	32
   393  00FF2F  20                 	db	32
   394  00FF30  20                 	db	32
   395  00FF31  20                 	db	32
   396  00FF32  00                 	db	0
   397  00FF33                     STR_13:
   398  00FF33  23                 	db	35
   399  00FF34  20                 	db	32
   400  00FF35  4F                 	db	79	;'O'
   401  00FF36  46                 	db	70	;'F'
   402  00FF37  20                 	db	32
   403  00FF38  39                 	db	57	;'9'
   404  00FF39  56                 	db	86	;'V'
   405  00FF3A  20                 	db	32
   406  00FF3B  20                 	db	32
   407  00FF3C  20                 	db	32
   408  00FF3D  20                 	db	32
   409  00FF3E  20                 	db	32
   410  00FF3F  20                 	db	32
   411  00FF40  20                 	db	32
   412  00FF41  20                 	db	32
   413  00FF42  20                 	db	32
   414  00FF43  00                 	db	0
   415  00FF44                     STR_4:
   416  00FF44  25                 	db	37
   417  00FF45  34                 	db	52	;'4'
   418  00FF46  64                 	db	100	;'d'
   419  00FF47  20                 	db	32
   420  00FF48  25                 	db	37
   421  00FF49  32                 	db	50	;'2'
   422  00FF4A  64                 	db	100	;'d'
   423  00FF4B  20                 	db	32
   424  00FF4C  20                 	db	32
   425  00FF4D  20                 	db	32
   426  00FF4E  20                 	db	32
   427  00FF4F  20                 	db	32
   428  00FF50  20                 	db	32
   429  00FF51  20                 	db	32
   430  00FF52  20                 	db	32
   431  00FF53  20                 	db	32
   432  00FF54  00                 	db	0
   433  00FF55                     STR_9:
   434  00FF55  54                 	db	84	;'T'
   435  00FF56  4F                 	db	79	;'O'
   436  00FF57  54                 	db	84	;'T'
   437  00FF58  41                 	db	65	;'A'
   438  00FF59  4C                 	db	76	;'L'
   439  00FF5A  20                 	db	32
   440  00FF5B  23                 	db	35
   441  00FF5C  20                 	db	32
   442  00FF5D  4F                 	db	79	;'O'
   443  00FF5E  46                 	db	70	;'F'
   444  00FF5F  20                 	db	32
   445  00FF60  20                 	db	32
   446  00FF61  20                 	db	32
   447  00FF62  20                 	db	32
   448  00FF63  20                 	db	32
   449  00FF64  20                 	db	32
   450  00FF65  00                 	db	0
   451  00FF66                     STR_6:
   452  00FF66  54                 	db	84	;'T'
   453  00FF67  4F                 	db	79	;'O'
   454  00FF68  20                 	db	32
   455  00FF69  43                 	db	67	;'C'
   456  00FF6A  4F                 	db	79	;'O'
   457  00FF6B  4E                 	db	78	;'N'
   458  00FF6C  54                 	db	84	;'T'
   459  00FF6D  49                 	db	73	;'I'
   460  00FF6E  4E                 	db	78	;'N'
   461  00FF6F  55                 	db	85	;'U'
   462  00FF70  45                 	db	69	;'E'
   463  00FF71  20                 	db	32
   464  00FF72  20                 	db	32
   465  00FF73  20                 	db	32
   466  00FF74  20                 	db	32
   467  00FF75  20                 	db	32
   468  00FF76  00                 	db	0
   469  00FF77                     STR_17:
   470  00FF77  23                 	db	35
   471  00FF78  20                 	db	32
   472  00FF79  4F                 	db	79	;'O'
   473  00FF7A  46                 	db	70	;'F'
   474  00FF7B  20                 	db	32
   475  00FF7C  44                 	db	68	;'D'
   476  00FF7D  52                 	db	82	;'R'
   477  00FF7E  41                 	db	65	;'A'
   478  00FF7F  49                 	db	73	;'I'
   479  00FF80  4E                 	db	78	;'N'
   480  00FF81  45                 	db	69	;'E'
   481  00FF82  44                 	db	68	;'D'
   482  00FF83  20                 	db	32
   483  00FF84  20                 	db	32
   484  00FF85  20                 	db	32
   485  00FF86  20                 	db	32
   486  00FF87  00                 	db	0
   487  00FF88                     STR_5:
   488  00FF88  44                 	db	68	;'D'
   489  00FF89  4F                 	db	79	;'O'
   490  00FF8A  4E                 	db	78	;'N'
   491  00FF8B  45                 	db	69	;'E'
   492  00FF8C  21                 	db	33
   493  00FF8D  20                 	db	32
   494  00FF8E  50                 	db	80	;'P'
   495  00FF8F  52                 	db	82	;'R'
   496  00FF90  45                 	db	69	;'E'
   497  00FF91  53                 	db	83	;'S'
   498  00FF92  53                 	db	83	;'S'
   499  00FF93  20                 	db	32
   500  00FF94  2A                 	db	42
   501  00FF95  20                 	db	32
   502  00FF96  20                 	db	32
   503  00FF97  20                 	db	32
   504  00FF98  00                 	db	0
   505  00FF99                     STR_23:
   506  00FF99  52                 	db	82	;'R'
   507  00FF9A  55                 	db	85	;'U'
   508  00FF9B  4E                 	db	78	;'N'
   509  00FF9C  4E                 	db	78	;'N'
   510  00FF9D  49                 	db	73	;'I'
   511  00FF9E  4E                 	db	78	;'N'
   512  00FF9F  47                 	db	71	;'G'
   513  00FFA0  3A                 	db	58	;':'
   514  00FFA1  20                 	db	32
   515  00FFA2  30                 	db	48	;'0'
   516  00FFA3  30                 	db	48	;'0'
   517  00FFA4  3A                 	db	58	;':'
   518  00FFA5  30                 	db	48	;'0'
   519  00FFA6  30                 	db	48	;'0'
   520  00FFA7  20                 	db	32
   521  00FFA8  20                 	db	32
   522  00FFA9  00                 	db	0
   523  00FFAA                     STR_21:
   524  00FFAA  45                 	db	69	;'E'
   525  00FFAB  4D                 	db	77	;'M'
   526  00FFAC  45                 	db	69	;'E'
   527  00FFAD  52                 	db	82	;'R'
   528  00FFAE  47                 	db	71	;'G'
   529  00FFAF  45                 	db	69	;'E'
   530  00FFB0  4E                 	db	78	;'N'
   531  00FFB1  43                 	db	67	;'C'
   532  00FFB2  59                 	db	89	;'Y'
   533  00FFB3  20                 	db	32
   534  00FFB4  53                 	db	83	;'S'
   535  00FFB5  54                 	db	84	;'T'
   536  00FFB6  4F                 	db	79	;'O'
   537  00FFB7  50                 	db	80	;'P'
   538  00FFB8  20                 	db	32
   539  00FFB9  20                 	db	32
   540  00FFBA  00                 	db	0
   541  00FFBB                     STR_7:
   542  00FFBB  54                 	db	84	;'T'
   543  00FFBC  4F                 	db	79	;'O'
   544  00FFBD  54                 	db	84	;'T'
   545  00FFBE  41                 	db	65	;'A'
   546  00FFBF  4C                 	db	76	;'L'
   547  00FFC0  20                 	db	32
   548  00FFC1  52                 	db	82	;'R'
   549  00FFC2  55                 	db	85	;'U'
   550  00FFC3  4E                 	db	78	;'N'
   551  00FFC4  20                 	db	32
   552  00FFC5  54                 	db	84	;'T'
   553  00FFC6  49                 	db	73	;'I'
   554  00FFC7  4D                 	db	77	;'M'
   555  00FFC8  45                 	db	69	;'E'
   556  00FFC9  3A                 	db	58	;':'
   557  00FFCA  20                 	db	32
   558  00FFCB  00                 	db	0
   559  00FFCC                     STR_3:
   560  00FFCC  20                 	db	32
   561  00FFCD  3C                 	db	60	;'<'
   562  00FFCE  20                 	db	32
   563  00FFCF  56                 	db	86	;'V'
   564  00FFD0  49                 	db	73	;'I'
   565  00FFD1  45                 	db	69	;'E'
   566  00FFD2  57                 	db	87	;'W'
   567  00FFD3  20                 	db	32
   568  00FFD4  20                 	db	32
   569  00FFD5  4C                 	db	76	;'L'
   570  00FFD6  4F                 	db	79	;'O'
   571  00FFD7  47                 	db	71	;'G'
   572  00FFD8  53                 	db	83	;'S'
   573  00FFD9  20                 	db	32
   574  00FFDA  3E                 	db	62	;'>'
   575  00FFDB  20                 	db	32
   576  00FFDC  00                 	db	0
   577  00FFDD                     STR_1:
   578  00FFDD  53                 	db	83	;'S'
   579  00FFDE  54                 	db	84	;'T'
   580  00FFDF  41                 	db	65	;'A'
   581  00FFE0  52                 	db	82	;'R'
   582  00FFE1  54                 	db	84	;'T'
   583  00FFE2  3A                 	db	58	;':'
   584  00FFE3  20                 	db	32
   585  00FFE4  20                 	db	32
   586  00FFE5  20                 	db	32
   587  00FFE6  50                 	db	80	;'P'
   588  00FFE7  52                 	db	82	;'R'
   589  00FFE8  45                 	db	69	;'E'
   590  00FFE9  53                 	db	83	;'S'
   591  00FFEA  53                 	db	83	;'S'
   592  00FFEB  20                 	db	32
   593  00FFEC  2A                 	db	42
   594  00FFED  00                 	db	0
   595  00FFEE                     STR_2:
   596  00FFEE  3C                 	db	60	;'<'
   597  00FFEF  20                 	db	32
   598  00FFF0  20                 	db	32
   599  00FFF1  56                 	db	86	;'V'
   600  00FFF2  49                 	db	73	;'I'
   601  00FFF3  45                 	db	69	;'E'
   602  00FFF4  57                 	db	87	;'W'
   603  00FFF5  20                 	db	32
   604  00FFF6  20                 	db	32
   605  00FFF7  4C                 	db	76	;'L'
   606  00FFF8  4F                 	db	79	;'O'
   607  00FFF9  47                 	db	71	;'G'
   608  00FFFA  53                 	db	83	;'S'
   609  00FFFB  20                 	db	32
   610  00FFFC  20                 	db	32
   611  00FFFD  3E                 	db	62	;'>'
   612  00FFFE  00                 	db	0
   613  0000                     
   614                           ; #config settings
   615  00FFFF  00                 	db	0	; dummy byte at the end
   616  0000                     
   617                           	psect	cinit
   618  001D12                     __pcinit:
   619                           	opt stack 0
   620  001D12                     start_initialization:
   621                           	opt stack 0
   622  001D12                     __initialization:
   623                           	opt stack 0
   624                           
   625                           ; Initialize objects allocated to BANK0 (1 bytes)
   626                           ; load TBLPTR registers with __pidataBANK0
   627  001D12  0E82               	movlw	low __pidataBANK0
   628  001D14  6EF6               	movwf	tblptrl,c
   629  001D16  0E1E               	movlw	high __pidataBANK0
   630  001D18  6EF7               	movwf	tblptrh,c
   631  001D1A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   632  001D1C  6EF8               	movwf	tblptru,c
   633  001D1E  0009               	tblrd		*+	;fetch initializer
   634  001D20  CFF5 F0C7          	movff	tablat,__pdataBANK0
   635                           
   636                           ; Clear objects allocated to BANK0 (32 bytes)
   637  001D24  EE00  F0A7         	lfsr	0,__pbssBANK0
   638  001D28  0E20               	movlw	32
   639  001D2A                     clear_0:
   640  001D2A  6AEE               	clrf	postinc0,c
   641  001D2C  06E8               	decf	wreg,f,c
   642  001D2E  E1FD               	bnz	clear_0
   643                           
   644                           ; Clear objects allocated to COMRAM (10 bytes)
   645  001D30  EE00  F041         	lfsr	0,__pbssCOMRAM
   646  001D34  0E0A               	movlw	10
   647  001D36                     clear_1:
   648  001D36  6AEE               	clrf	postinc0,c
   649  001D38  06E8               	decf	wreg,f,c
   650  001D3A  E1FD               	bnz	clear_1
   651  001D3C                     end_of_initialization:
   652                           	opt stack 0
   653  001D3C                     __end_of__initialization:
   654                           	opt stack 0
   655  001D3C  904B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   656  001D3E  924B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   657  001D40  0E00               	movlw	low (__Lmediumconst shr (0+16))
   658  001D42  6EF8               	movwf	tblptru,c
   659  001D44  0100               	movlb	0
   660  001D46  EF09  F000         	goto	_main	;jump to C main() function
   661                           tblptru	equ	0xFF8
   662                           tblptrh	equ	0xFF7
   663                           tblptrl	equ	0xFF6
   664                           tablat	equ	0xFF5
   665                           postinc0	equ	0xFEE
   666                           wreg	equ	0xFE8
   667                           
   668                           	psect	bssCOMRAM
   669  000041                     __pbssCOMRAM:
   670                           	opt stack 0
   671  000041                     _count_3ms:
   672                           	opt stack 0
   673  000041                     	ds	2
   674  000043                     _stepAmount:
   675                           	opt stack 0
   676  000043                     	ds	2
   677  000045                     _doneTimer:
   678                           	opt stack 0
   679  000045                     	ds	1
   680  000046                     _opTimer:
   681                           	opt stack 0
   682  000046                     	ds	1
   683  000047                     _solOnTimer:
   684                           	opt stack 0
   685  000047                     	ds	1
   686  000048                     _sorting:
   687                           	opt stack 0
   688  000048                     	ds	1
   689  000049                     _step1:
   690                           	opt stack 0
   691  000049                     	ds	1
   692  00004A                     _step2:
   693                           	opt stack 0
   694  00004A                     	ds	1
   695                           tblptru	equ	0xFF8
   696                           tblptrh	equ	0xFF7
   697                           tblptrl	equ	0xFF6
   698                           tablat	equ	0xFF5
   699                           postinc0	equ	0xFEE
   700                           wreg	equ	0xFE8
   701                           
   702                           	psect	bssBANK0
   703  0000A7                     __pbssBANK0:
   704                           	opt stack 0
   705  0000A7                     _time:
   706                           	opt stack 0
   707  0000A7                     	ds	7
   708  0000AE                     _plat1Left:
   709                           	opt stack 0
   710  0000AE                     	ds	2
   711  0000B0                     _plat1Right:
   712                           	opt stack 0
   713  0000B0                     	ds	2
   714  0000B2                     _plat2Left:
   715                           	opt stack 0
   716  0000B2                     	ds	2
   717  0000B4                     _plat2Right:
   718                           	opt stack 0
   719  0000B4                     	ds	2
   720  0000B6                     _count9V:
   721                           	opt stack 0
   722  0000B6                     	ds	1
   723  0000B7                     _countAA:
   724                           	opt stack 0
   725  0000B7                     	ds	1
   726  0000B8                     _countC:
   727                           	opt stack 0
   728  0000B8                     	ds	1
   729  0000B9                     _countDrain:
   730                           	opt stack 0
   731  0000B9                     	ds	1
   732  0000BA                     _min:
   733                           	opt stack 0
   734  0000BA                     	ds	1
   735  0000BB                     _num9V:
   736                           	opt stack 0
   737  0000BB                     	ds	1
   738  0000BC                     _numAA:
   739                           	opt stack 0
   740  0000BC                     	ds	1
   741  0000BD                     _numBats:
   742                           	opt stack 0
   743  0000BD                     	ds	1
   744  0000BE                     _numC:
   745                           	opt stack 0
   746  0000BE                     	ds	1
   747  0000BF                     _numDrain:
   748                           	opt stack 0
   749  0000BF                     	ds	1
   750  0000C0                     _sec:
   751                           	opt stack 0
   752  0000C0                     	ds	1
   753  0000C1                     _startGear:
   754                           	opt stack 0
   755  0000C1                     	ds	1
   756  0000C2                     _stepGear:
   757                           	opt stack 0
   758  0000C2                     	ds	1
   759  0000C3                     _turn1BackLeft:
   760                           	opt stack 0
   761  0000C3                     	ds	1
   762  0000C4                     _turn1BackRight:
   763                           	opt stack 0
   764  0000C4                     	ds	1
   765  0000C5                     _turn2BackLeft:
   766                           	opt stack 0
   767  0000C5                     	ds	1
   768  0000C6                     _turn2BackRight:
   769                           	opt stack 0
   770  0000C6                     	ds	1
   771                           tblptru	equ	0xFF8
   772                           tblptrh	equ	0xFF7
   773                           tblptrl	equ	0xFF6
   774                           tablat	equ	0xFF5
   775                           postinc0	equ	0xFEE
   776                           wreg	equ	0xFE8
   777                           
   778                           	psect	dataBANK0
   779  0000C7                     __pdataBANK0:
   780                           	opt stack 0
   781  0000C7                     _screenMode:
   782                           	opt stack 0
   783  0000C7                     	ds	1
   784                           tblptru	equ	0xFF8
   785                           tblptrh	equ	0xFF7
   786                           tblptrl	equ	0xFF6
   787                           tablat	equ	0xFF5
   788                           postinc0	equ	0xFEE
   789                           wreg	equ	0xFE8
   790                           
   791                           	psect	cstackBANK0
   792  000080                     __pcstackBANK0:
   793                           	opt stack 0
   794  000080                     ?_printf:
   795                           	opt stack 0
   796  000080                     printf@f:
   797                           	opt stack 0
   798  000080                     I2C_Master_Init@c:
   799                           	opt stack 0
   800                           
   801                           ; 4 bytes @ 0x0
   802  000080                     	ds	4
   803  000084                     ??_I2C_Master_Init:
   804                           
   805                           ; 1 bytes @ 0x4
   806  000084                     	ds	4
   807  000088                     ??_printf:
   808                           
   809                           ; 1 bytes @ 0x8
   810  000088                     	ds	4
   811  00008C                     printf@idx:
   812                           	opt stack 0
   813                           
   814                           ; 1 bytes @ 0xC
   815  00008C                     	ds	1
   816  00008D                     printf@ap:
   817                           	opt stack 0
   818                           
   819                           ; 2 bytes @ 0xD
   820  00008D                     	ds	2
   821  00008F                     printf@prec:
   822                           	opt stack 0
   823                           
   824                           ; 1 bytes @ 0xF
   825  00008F                     	ds	1
   826  000090                     printf@val:
   827                           	opt stack 0
   828                           
   829                           ; 2 bytes @ 0x10
   830  000090                     	ds	2
   831  000092                     printf@flag:
   832                           	opt stack 0
   833                           
   834                           ; 1 bytes @ 0x12
   835  000092                     	ds	1
   836  000093                     printf@width:
   837                           	opt stack 0
   838                           
   839                           ; 2 bytes @ 0x13
   840  000093                     	ds	2
   841  000095                     printf@c:
   842                           	opt stack 0
   843                           
   844                           ; 1 bytes @ 0x15
   845  000095                     	ds	1
   846  000096                     ??_main:
   847                           
   848                           ; 1 bytes @ 0x16
   849  000096                     	ds	4
   850  00009A                     main@i_592:
   851                           	opt stack 0
   852                           
   853                           ; 2 bytes @ 0x1A
   854  00009A                     	ds	2
   855  00009C                     main@i_593:
   856                           	opt stack 0
   857                           
   858                           ; 2 bytes @ 0x1C
   859  00009C                     	ds	2
   860  00009E                     main@i_594:
   861                           	opt stack 0
   862                           
   863                           ; 2 bytes @ 0x1E
   864  00009E                     	ds	2
   865  0000A0                     main@i_595:
   866                           	opt stack 0
   867                           
   868                           ; 2 bytes @ 0x20
   869  0000A0                     	ds	2
   870  0000A2                     main@i_596:
   871                           	opt stack 0
   872                           
   873                           ; 2 bytes @ 0x22
   874  0000A2                     	ds	2
   875  0000A4                     main@i:
   876                           	opt stack 0
   877                           
   878                           ; 1 bytes @ 0x24
   879  0000A4                     	ds	1
   880  0000A5                     main@i_582:
   881                           	opt stack 0
   882                           
   883                           ; 1 bytes @ 0x25
   884  0000A5                     	ds	1
   885  0000A6                     main@i_633:
   886                           	opt stack 0
   887                           
   888                           ; 1 bytes @ 0x26
   889  0000A6                     	ds	1
   890                           tblptru	equ	0xFF8
   891                           tblptrh	equ	0xFF7
   892                           tblptrl	equ	0xFF6
   893                           tablat	equ	0xFF5
   894                           postinc0	equ	0xFEE
   895                           wreg	equ	0xFE8
   896                           
   897                           	psect	cstackCOMRAM
   898  000001                     __pcstackCOMRAM:
   899                           	opt stack 0
   900  000001                     ??i2_isdigit:
   901  000001                     ?i2___wmul:
   902                           	opt stack 0
   903  000001                     ?i2___awdiv:
   904                           	opt stack 0
   905  000001                     ?i2___awmod:
   906                           	opt stack 0
   907  000001                     ?i2___lwdiv:
   908                           	opt stack 0
   909  000001                     i2lcdNibble@temp:
   910                           	opt stack 0
   911  000001                     i2___wmul@multiplier:
   912                           	opt stack 0
   913  000001                     i2___awdiv@dividend:
   914                           	opt stack 0
   915  000001                     i2___awmod@dividend:
   916                           	opt stack 0
   917  000001                     i2___lwdiv@dividend:
   918                           	opt stack 0
   919                           
   920                           ; 2 bytes @ 0x0
   921  000001                     	ds	1
   922  000002                     i2lcdNibble@data:
   923                           	opt stack 0
   924  000002                     i2_isdigit$936:
   925                           	opt stack 0
   926                           
   927                           ; 1 bytes @ 0x1
   928  000002                     	ds	1
   929  000003                     i2lcdInst@data:
   930                           	opt stack 0
   931  000003                     i2putch@data:
   932                           	opt stack 0
   933  000003                     i2isdigit@c:
   934                           	opt stack 0
   935  000003                     i2___wmul@multiplicand:
   936                           	opt stack 0
   937  000003                     i2___awdiv@divisor:
   938                           	opt stack 0
   939  000003                     i2___awmod@divisor:
   940                           	opt stack 0
   941  000003                     i2___lwdiv@divisor:
   942                           	opt stack 0
   943                           
   944                           ; 2 bytes @ 0x2
   945  000003                     	ds	2
   946  000005                     i2___awdiv@counter:
   947                           	opt stack 0
   948  000005                     i2___awmod@counter:
   949                           	opt stack 0
   950  000005                     i2___wmul@product:
   951                           	opt stack 0
   952  000005                     i2___lwdiv@quotient:
   953                           	opt stack 0
   954                           
   955                           ; 2 bytes @ 0x4
   956  000005                     	ds	1
   957  000006                     i2___awdiv@sign:
   958                           	opt stack 0
   959  000006                     i2___awmod@sign:
   960                           	opt stack 0
   961                           
   962                           ; 1 bytes @ 0x5
   963  000006                     	ds	1
   964  000007                     i2___lwdiv@counter:
   965                           	opt stack 0
   966  000007                     i2___awdiv@quotient:
   967                           	opt stack 0
   968                           
   969                           ; 2 bytes @ 0x6
   970  000007                     	ds	1
   971  000008                     ?i2___lwmod:
   972                           	opt stack 0
   973  000008                     i2___lwmod@dividend:
   974                           	opt stack 0
   975                           
   976                           ; 2 bytes @ 0x7
   977  000008                     	ds	1
   978  000009                     
   979                           ; 1 bytes @ 0x8
   980  000009                     	ds	1
   981  00000A                     i2___lwmod@divisor:
   982                           	opt stack 0
   983                           
   984                           ; 2 bytes @ 0x9
   985  00000A                     	ds	2
   986  00000C                     i2___lwmod@counter:
   987                           	opt stack 0
   988                           
   989                           ; 1 bytes @ 0xB
   990  00000C                     	ds	1
   991  00000D                     ?i2_printf:
   992                           	opt stack 0
   993  00000D                     i2printf@f:
   994                           	opt stack 0
   995                           
   996                           ; 2 bytes @ 0xC
   997  00000D                     	ds	6
   998  000013                     ??i2_printf:
   999                           
  1000                           ; 1 bytes @ 0x12
  1001  000013                     	ds	4
  1002  000017                     i2printf@idx:
  1003                           	opt stack 0
  1004                           
  1005                           ; 1 bytes @ 0x16
  1006  000017                     	ds	1
  1007  000018                     i2printf@ap:
  1008                           	opt stack 0
  1009                           
  1010                           ; 2 bytes @ 0x17
  1011  000018                     	ds	2
  1012  00001A                     i2printf@prec:
  1013                           	opt stack 0
  1014                           
  1015                           ; 1 bytes @ 0x19
  1016  00001A                     	ds	1
  1017  00001B                     i2printf@val:
  1018                           	opt stack 0
  1019                           
  1020                           ; 2 bytes @ 0x1A
  1021  00001B                     	ds	2
  1022  00001D                     i2printf@flag:
  1023                           	opt stack 0
  1024                           
  1025                           ; 1 bytes @ 0x1C
  1026  00001D                     	ds	1
  1027  00001E                     i2printf@width:
  1028                           	opt stack 0
  1029                           
  1030                           ; 2 bytes @ 0x1D
  1031  00001E                     	ds	2
  1032  000020                     i2printf@c:
  1033                           	opt stack 0
  1034                           
  1035                           ; 1 bytes @ 0x1F
  1036  000020                     	ds	1
  1037  000021                     switchMenu@right:
  1038                           	opt stack 0
  1039                           
  1040                           ; 1 bytes @ 0x20
  1041  000021                     	ds	1
  1042  000022                     switchMenu@key:
  1043                           	opt stack 0
  1044                           
  1045                           ; 1 bytes @ 0x21
  1046  000022                     	ds	1
  1047  000023                     switchMenu@left:
  1048                           	opt stack 0
  1049                           
  1050                           ; 1 bytes @ 0x22
  1051  000023                     	ds	1
  1052  000024                     ??_ISR:
  1053                           
  1054                           ; 1 bytes @ 0x23
  1055  000024                     	ds	15
  1056  000033                     ISR@keypress:
  1057                           	opt stack 0
  1058                           
  1059                           ; 1 bytes @ 0x32
  1060  000033                     	ds	1
  1061  000034                     ??_isdigit:
  1062  000034                     ??_I2C_Master_Wait:
  1063  000034                     ?___wmul:
  1064                           	opt stack 0
  1065  000034                     ?___awdiv:
  1066                           	opt stack 0
  1067  000034                     ?___awmod:
  1068                           	opt stack 0
  1069  000034                     ?___lwdiv:
  1070                           	opt stack 0
  1071  000034                     ?___lldiv:
  1072                           	opt stack 0
  1073  000034                     lcdNibble@temp:
  1074                           	opt stack 0
  1075  000034                     readADC@channel:
  1076                           	opt stack 0
  1077  000034                     wait_3ms@x:
  1078                           	opt stack 0
  1079  000034                     ___wmul@multiplier:
  1080                           	opt stack 0
  1081  000034                     ___awdiv@dividend:
  1082                           	opt stack 0
  1083  000034                     ___awmod@dividend:
  1084                           	opt stack 0
  1085  000034                     ___lwdiv@dividend:
  1086                           	opt stack 0
  1087  000034                     ___lldiv@dividend:
  1088                           	opt stack 0
  1089                           
  1090                           ; 4 bytes @ 0x33
  1091  000034                     	ds	1
  1092  000035                     I2C_Master_Read@a:
  1093                           	opt stack 0
  1094  000035                     lcdNibble@data:
  1095                           	opt stack 0
  1096  000035                     _isdigit$936:
  1097                           	opt stack 0
  1098  000035                     I2C_Master_Write@d:
  1099                           	opt stack 0
  1100                           
  1101                           ; 2 bytes @ 0x34
  1102  000035                     	ds	1
  1103  000036                     I2C_Master_Read@temp:
  1104                           	opt stack 0
  1105  000036                     lcdInst@data:
  1106                           	opt stack 0
  1107  000036                     putch@data:
  1108                           	opt stack 0
  1109  000036                     isdigit@c:
  1110                           	opt stack 0
  1111  000036                     ___wmul@multiplicand:
  1112                           	opt stack 0
  1113  000036                     ___awdiv@divisor:
  1114                           	opt stack 0
  1115  000036                     ___awmod@divisor:
  1116                           	opt stack 0
  1117  000036                     ___lwdiv@divisor:
  1118                           	opt stack 0
  1119                           
  1120                           ; 2 bytes @ 0x35
  1121  000036                     	ds	1
  1122  000037                     ??_initLCD:
  1123                           
  1124                           ; 1 bytes @ 0x36
  1125  000037                     	ds	1
  1126  000038                     ___awdiv@counter:
  1127                           	opt stack 0
  1128  000038                     ___awmod@counter:
  1129                           	opt stack 0
  1130  000038                     ___wmul@product:
  1131                           	opt stack 0
  1132  000038                     ___lwdiv@quotient:
  1133                           	opt stack 0
  1134  000038                     ___lldiv@divisor:
  1135                           	opt stack 0
  1136                           
  1137                           ; 4 bytes @ 0x37
  1138  000038                     	ds	1
  1139  000039                     ___awdiv@sign:
  1140                           	opt stack 0
  1141  000039                     ___awmod@sign:
  1142                           	opt stack 0
  1143                           
  1144                           ; 1 bytes @ 0x38
  1145  000039                     	ds	1
  1146  00003A                     ___lwdiv@counter:
  1147                           	opt stack 0
  1148  00003A                     ___awdiv@quotient:
  1149                           	opt stack 0
  1150                           
  1151                           ; 2 bytes @ 0x39
  1152  00003A                     	ds	1
  1153  00003B                     ?___lwmod:
  1154                           	opt stack 0
  1155  00003B                     ___lwmod@dividend:
  1156                           	opt stack 0
  1157                           
  1158                           ; 2 bytes @ 0x3A
  1159  00003B                     	ds	1
  1160  00003C                     ___lldiv@quotient:
  1161                           	opt stack 0
  1162                           
  1163                           ; 4 bytes @ 0x3B
  1164  00003C                     	ds	1
  1165  00003D                     ___lwmod@divisor:
  1166                           	opt stack 0
  1167                           
  1168                           ; 2 bytes @ 0x3C
  1169  00003D                     	ds	2
  1170  00003F                     ___lwmod@counter:
  1171                           	opt stack 0
  1172                           
  1173                           ; 1 bytes @ 0x3E
  1174  00003F                     	ds	1
  1175  000040                     ___lldiv@counter:
  1176                           	opt stack 0
  1177                           
  1178                           ; 1 bytes @ 0x3F
  1179  000040                     	ds	1
  1180                           tblptru	equ	0xFF8
  1181                           tblptrh	equ	0xFF7
  1182                           tblptrl	equ	0xFF6
  1183                           tablat	equ	0xFF5
  1184                           postinc0	equ	0xFEE
  1185                           wreg	equ	0xFE8
  1186                           
  1187 ;;
  1188 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  1189 ;;
  1190 ;; *************** function _main *****************
  1191 ;; Defined at:
  1192 ;;		line 53 in file "../main.c"
  1193 ;; Parameters:    Size  Location     Type
  1194 ;;		None
  1195 ;; Auto vars:     Size  Location     Type
  1196 ;;  i               2   34[BANK0 ] unsigned int 
  1197 ;;  i               2   32[BANK0 ] unsigned int 
  1198 ;;  i               2   30[BANK0 ] unsigned int 
  1199 ;;  i               2   28[BANK0 ] unsigned int 
  1200 ;;  i               2   26[BANK0 ] unsigned int 
  1201 ;;  i               1   38[BANK0 ] unsigned char 
  1202 ;;  i               1   37[BANK0 ] unsigned char 
  1203 ;;  i               1   36[BANK0 ] unsigned char 
  1204 ;; Return value:  Size  Location     Type
  1205 ;;                  1    wreg      void 
  1206 ;; Registers used:
  1207 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1208 ;; Tracked objects:
  1209 ;;		On entry : 0/0
  1210 ;;		On exit  : 0/0
  1211 ;;		Unchanged: 0/0
  1212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1214 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1215 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1216 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1217 ;;Total ram usage:       17 bytes
  1218 ;; Hardware stack levels required when called:    8
  1219 ;; This function calls:
  1220 ;;		_I2C_Master_Init
  1221 ;;		_I2C_Master_Read
  1222 ;;		_I2C_Master_Start
  1223 ;;		_I2C_Master_Stop
  1224 ;;		_I2C_Master_Write
  1225 ;;		_initLCD
  1226 ;;		_lcdInst
  1227 ;;		_printf
  1228 ;;		_readADC
  1229 ;;		_stopOperation
  1230 ;;		_testBatteries
  1231 ;;		_wait_3ms
  1232 ;; This function is called by:
  1233 ;;		Startup code after reset
  1234 ;; This function uses a non-reentrant model
  1235 ;;
  1236                           
  1237                           	psect	text0
  1238  000012                     __ptext0:
  1239                           	opt stack 0
  1240  000012                     _main:
  1241                           	opt stack 23
  1242                           
  1243                           ;main.c: 55: TRISA = 0b00000011;
  1244                           
  1245                           ;incstack = 0
  1246  000012  0E03               	movlw	3
  1247  000014  6E92               	movwf	3986,c	;volatile
  1248                           
  1249                           ;main.c: 56: TRISB = 0b11110010;
  1250  000016  0EF2               	movlw	242
  1251  000018  6E93               	movwf	3987,c	;volatile
  1252                           
  1253                           ;main.c: 57: TRISC = 0x00;
  1254  00001A  0E00               	movlw	0
  1255  00001C  6E94               	movwf	3988,c	;volatile
  1256                           
  1257                           ;main.c: 58: TRISD = 0x00;
  1258  00001E  0E00               	movlw	0
  1259  000020  6E95               	movwf	3989,c	;volatile
  1260                           
  1261                           ;main.c: 59: TRISE = 0x00;
  1262  000022  0E00               	movlw	0
  1263  000024  6E96               	movwf	3990,c	;volatile
  1264                           
  1265                           ;main.c: 61: LATA = 0x00;
  1266  000026  0E00               	movlw	0
  1267  000028  6E89               	movwf	3977,c	;volatile
  1268                           
  1269                           ;main.c: 62: LATB = 0x00;
  1270  00002A  0E00               	movlw	0
  1271  00002C  6E8A               	movwf	3978,c	;volatile
  1272                           
  1273                           ;main.c: 63: LATC = 0x00;
  1274  00002E  0E00               	movlw	0
  1275  000030  6E8B               	movwf	3979,c	;volatile
  1276                           
  1277                           ;main.c: 64: LATD = 0x00;
  1278  000032  0E00               	movlw	0
  1279  000034  6E8C               	movwf	3980,c	;volatile
  1280                           
  1281                           ;main.c: 65: LATE = 0x00;
  1282  000036  0E00               	movlw	0
  1283  000038  6E8D               	movwf	3981,c	;volatile
  1284                           
  1285                           ;main.c: 67: ADCON0 = 0x00;
  1286  00003A  0E00               	movlw	0
  1287  00003C  6EC2               	movwf	4034,c	;volatile
  1288                           
  1289                           ;main.c: 68: ADCON1 = 0x0E;
  1290  00003E  0E0E               	movlw	14
  1291  000040  6EC1               	movwf	4033,c	;volatile
  1292                           
  1293                           ;main.c: 69: ADCON2 = 0b10110001;
  1294  000042  0EB1               	movlw	177
  1295  000044  6EC0               	movwf	4032,c	;volatile
  1296                           
  1297                           ;main.c: 74: GIE = 1;
  1298  000046  8EF2               	bsf	intcon,7,c	;volatile
  1299                           
  1300                           ;main.c: 75: PEIE = 1;
  1301  000048  8CF2               	bsf	intcon,6,c	;volatile
  1302                           
  1303                           ;main.c: 76: INT1IE = 1;
  1304  00004A  86F0               	bsf	intcon3,3,c	;volatile
  1305                           
  1306                           ;main.c: 77: INT1IF = 0;
  1307  00004C  90F0               	bcf	intcon3,0,c	;volatile
  1308                           
  1309                           ;main.c: 78: TMR0IE = 1;
  1310  00004E  8AF2               	bsf	intcon,5,c	;volatile
  1311                           
  1312                           ;main.c: 79: TMR0IF = 0;
  1313  000050  94F2               	bcf	intcon,2,c	;volatile
  1314                           
  1315                           ;main.c: 80: TMR1IE = 1;
  1316  000052  809D               	bsf	3997,0,c	;volatile
  1317                           
  1318                           ;main.c: 81: TMR1IF = 0;
  1319  000054  909E               	bcf	3998,0,c	;volatile
  1320                           
  1321                           ;main.c: 85: T0CON = 0b00000111;
  1322  000056  0E07               	movlw	7
  1323  000058  6ED5               	movwf	4053,c	;volatile
  1324                           
  1325                           ;main.c: 93: TMR0 = 55770;
  1326  00005A  0ED9               	movlw	217
  1327  00005C  6ED7               	movwf	4055,c	;volatile
  1328  00005E  0EDA               	movlw	218
  1329  000060  6ED6               	movwf	4054,c	;volatile
  1330                           
  1331                           ;main.c: 102: T1CON = 0b10000000;
  1332  000062  0E80               	movlw	128
  1333  000064  6ECD               	movwf	4045,c	;volatile
  1334                           
  1335                           ;main.c: 111: TMR1 = 58035;
  1336  000066  0EE2               	movlw	226
  1337  000068  6ECF               	movwf	4047,c	;volatile
  1338  00006A  0EB3               	movlw	179
  1339  00006C  6ECE               	movwf	4046,c	;volatile
  1340                           
  1341                           ;main.c: 120: initLCD();
  1342  00006E  EC24  F00E         	call	_initLCD	;wreg free
  1343                           
  1344                           ;main.c: 122: I2C_Master_Init(10000);
  1345  000072  0E10               	movlw	16
  1346  000074  0100               	movlb	0	; () banked
  1347  000076  6F80               	movwf	I2C_Master_Init@c& (0+255),b
  1348  000078  0E27               	movlw	39
  1349  00007A  6F81               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  1350  00007C  0E00               	movlw	0
  1351  00007E  6F82               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  1352  000080  0E00               	movlw	0
  1353  000082  6F83               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  1354  000084  EC56  F00D         	call	_I2C_Master_Init	;wreg free
  1355                           
  1356                           ;main.c: 123: (INTCONbits.GIE = 1);
  1357  000088  8EF2               	bsf	intcon,7,c	;volatile
  1358                           
  1359                           ;main.c: 127: while (screenMode == 2){
  1360                           
  1361                           ;main.c: 126: while (1) {
  1362  00008A  D056               	goto	l4543
  1363  00008C                     l4505:
  1364                           
  1365                           ;main.c: 128: lcdInst(0b10000000);;
  1366  00008C  0E80               	movlw	128
  1367  00008E  EC22  F00F         	call	_lcdInst
  1368                           
  1369                           ;main.c: 129: printf("START:   PRESS *");
  1370  000092  0EDD               	movlw	low STR_1
  1371  000094  0100               	movlb	0	; () banked
  1372  000096  6F80               	movwf	printf@f& (0+255),b
  1373  000098  0EFF               	movlw	high STR_1
  1374  00009A  0100               	movlb	0	; () banked
  1375  00009C  6F81               	movwf	(printf@f+1)& (0+255),b
  1376  00009E  EC8F  F006         	call	_printf	;wreg free
  1377                           
  1378                           ;main.c: 130: lcdInst(0b11000000);;
  1379  0000A2  0EC0               	movlw	192
  1380  0000A4  EC22  F00F         	call	_lcdInst
  1381                           
  1382                           ;main.c: 131: printf("<  VIEW  LOGS  >");
  1383  0000A8  0EEE               	movlw	low STR_2
  1384  0000AA  0100               	movlb	0	; () banked
  1385  0000AC  6F80               	movwf	printf@f& (0+255),b
  1386  0000AE  0EFF               	movlw	high STR_2
  1387  0000B0  0100               	movlb	0	; () banked
  1388  0000B2  6F81               	movwf	(printf@f+1)& (0+255),b
  1389  0000B4  EC8F  F006         	call	_printf	;wreg free
  1390                           
  1391                           ;main.c: 132: for(unsigned char i=0;i<50;i++){
  1392  0000B8  0E00               	movlw	0
  1393  0000BA  0100               	movlb	0	; () banked
  1394  0000BC  6FA4               	movwf	main@i& (0+255),b
  1395  0000BE                     l4513:
  1396                           
  1397                           ; BSR set to: 0
  1398  0000BE  0E31               	movlw	49
  1399  0000C0  0100               	movlb	0	; () banked
  1400  0000C2  65A4               	cpfsgt	main@i& (0+255),b
  1401  0000C4  D001               	goto	l4517
  1402  0000C6  D011               	goto	l4525
  1403  0000C8                     l4517:
  1404                           
  1405                           ; BSR set to: 0
  1406                           ;main.c: 133: if (screenMode != 2)
  1407  0000C8  0E02               	movlw	2
  1408  0000CA  0100               	movlb	0	; () banked
  1409  0000CC  19C7               	xorwf	_screenMode& (0+255),w,b
  1410  0000CE  A4D8               	btfss	status,2,c
  1411  0000D0  D00C               	goto	l4525
  1412                           
  1413                           ; BSR set to: 0
  1414                           ;main.c: 135: _delay((unsigned long)((10)*(10000000/4000.0)));
  1415                           
  1416                           ; BSR set to: 0
  1417                           
  1418                           ; BSR set to: 0
  1419                           ;main.c: 134: break;
  1420  0000D2  0E21               	movlw	33
  1421  0000D4  0100               	movlb	0	; () banked
  1422  0000D6  6F96               	movwf	??_main& (0+255),b
  1423  0000D8  0E76               	movlw	118
  1424  0000DA                     u5477:
  1425  0000DA  2EE8               	decfsz	wreg,f,c
  1426  0000DC  D7FE               	bra	u5477
  1427  0000DE  2F96               	decfsz	??_main& (0+255),f,b
  1428  0000E0  D7FC               	bra	u5477
  1429  0000E2  F000               	nop	
  1430  0000E4  0100               	movlb	0	; () banked
  1431  0000E6  2BA4               	incf	main@i& (0+255),f,b
  1432  0000E8  D7EA               	goto	l4513
  1433  0000EA                     l4525:
  1434                           
  1435                           ; BSR set to: 0
  1436                           ;main.c: 136: }
  1437                           ;main.c: 137: lcdInst(0b10000000);;
  1438  0000EA  0E80               	movlw	128
  1439  0000EC  EC22  F00F         	call	_lcdInst
  1440                           
  1441                           ;main.c: 138: lcdInst(0b11000000);;
  1442  0000F0  0EC0               	movlw	192
  1443  0000F2  EC22  F00F         	call	_lcdInst
  1444                           
  1445                           ;main.c: 139: printf(" < VIEW  LOGS > ");
  1446  0000F6  0ECC               	movlw	low STR_3
  1447  0000F8  0100               	movlb	0	; () banked
  1448  0000FA  6F80               	movwf	printf@f& (0+255),b
  1449  0000FC  0EFF               	movlw	high STR_3
  1450  0000FE  0100               	movlb	0	; () banked
  1451  000100  6F81               	movwf	(printf@f+1)& (0+255),b
  1452  000102  EC8F  F006         	call	_printf	;wreg free
  1453                           
  1454                           ;main.c: 140: for(unsigned char i=0;i<50;i++){
  1455  000106  0E00               	movlw	0
  1456  000108  0100               	movlb	0	; () banked
  1457  00010A  6FA5               	movwf	main@i_582& (0+255),b
  1458  00010C                     l4531:
  1459                           
  1460                           ; BSR set to: 0
  1461  00010C  0E31               	movlw	49
  1462  00010E  0100               	movlb	0	; () banked
  1463  000110  65A5               	cpfsgt	main@i_582& (0+255),b
  1464  000112  D001               	goto	l4535
  1465  000114  D011               	goto	l4543
  1466  000116                     l4535:
  1467                           
  1468                           ; BSR set to: 0
  1469                           ;main.c: 142: if (screenMode != 2)
  1470  000116  0E02               	movlw	2
  1471  000118  0100               	movlb	0	; () banked
  1472  00011A  19C7               	xorwf	_screenMode& (0+255),w,b
  1473  00011C  A4D8               	btfss	status,2,c
  1474  00011E  D00C               	goto	l4543
  1475                           
  1476                           ; BSR set to: 0
  1477                           ;main.c: 144: _delay((unsigned long)((10)*(10000000/4000.0)));
  1478                           
  1479                           ; BSR set to: 0
  1480                           
  1481                           ; BSR set to: 0
  1482                           ;main.c: 143: break;
  1483  000120  0E21               	movlw	33
  1484  000122  0100               	movlb	0	; () banked
  1485  000124  6F96               	movwf	??_main& (0+255),b
  1486  000126  0E76               	movlw	118
  1487  000128                     u5487:
  1488  000128  2EE8               	decfsz	wreg,f,c
  1489  00012A  D7FE               	bra	u5487
  1490  00012C  2F96               	decfsz	??_main& (0+255),f,b
  1491  00012E  D7FC               	bra	u5487
  1492  000130  F000               	nop	
  1493  000132  0100               	movlb	0	; () banked
  1494  000134  2BA5               	incf	main@i_582& (0+255),f,b
  1495  000136  D7EA               	goto	l4531
  1496  000138                     l4543:
  1497  000138  0E02               	movlw	2
  1498  00013A  0100               	movlb	0	; () banked
  1499  00013C  19C7               	xorwf	_screenMode& (0+255),w,b
  1500  00013E  A4D8               	btfss	status,2,c
  1501  000140  D22D               	goto	l4733
  1502  000142  D7A4               	goto	l4505
  1503  000144                     l4545:
  1504                           
  1505                           ; BSR set to: 0
  1506                           ;main.c: 155: lcdInst(0b10000000);;
  1507  000144  0E80               	movlw	128
  1508  000146  EC22  F00F         	call	_lcdInst
  1509                           
  1510                           ;main.c: 156: lcdInst(0b11000000);;
  1511  00014A  0EC0               	movlw	192
  1512  00014C  EC22  F00F         	call	_lcdInst
  1513                           
  1514                           ;main.c: 157: printf("%4d %2d         ", ADRES, countDrain+countAA+count9V+countC);
  1515  000150  0E44               	movlw	low STR_4
  1516  000152  0100               	movlb	0	; () banked
  1517  000154  6F80               	movwf	printf@f& (0+255),b
  1518  000156  0EFF               	movlw	high STR_4
  1519  000158  0100               	movlb	0	; () banked
  1520  00015A  6F81               	movwf	(printf@f+1)& (0+255),b
  1521  00015C  CFC3 F082          	movff	4035,?_printf+2	;volatile
  1522  000160  CFC4 F083          	movff	4036,?_printf+3	;volatile
  1523  000164  0100               	movlb	0	; () banked
  1524  000166  51B7               	movf	_countAA& (0+255),w,b
  1525  000168  C0B9  F096         	movff	_countDrain,??_main
  1526  00016C  0100               	movlb	0	; () banked
  1527  00016E  6B97               	clrf	(??_main+1)& (0+255),b
  1528  000170  0100               	movlb	0	; () banked
  1529  000172  2796               	addwf	??_main& (0+255),f,b
  1530  000174  0E00               	movlw	0
  1531  000176  2397               	addwfc	(??_main+1)& (0+255),f,b
  1532  000178  0100               	movlb	0	; () banked
  1533  00017A  51B6               	movf	_count9V& (0+255),w,b
  1534  00017C  0100               	movlb	0	; () banked
  1535  00017E  2796               	addwf	??_main& (0+255),f,b
  1536  000180  0E00               	movlw	0
  1537  000182  2397               	addwfc	(??_main+1)& (0+255),f,b
  1538  000184  0100               	movlb	0	; () banked
  1539  000186  51B8               	movf	_countC& (0+255),w,b
  1540  000188  0100               	movlb	0	; () banked
  1541  00018A  2596               	addwf	??_main& (0+255),w,b
  1542  00018C  0100               	movlb	0	; () banked
  1543  00018E  6F84               	movwf	(?_printf+4)& (0+255),b
  1544  000190  0100               	movlb	0	; () banked
  1545  000192  0E00               	movlw	0
  1546  000194  0100               	movlb	0	; () banked
  1547  000196  2197               	addwfc	(??_main+1)& (0+255),w,b
  1548  000198  0100               	movlb	0	; () banked
  1549  00019A  6F85               	movwf	(?_printf+5)& (0+255),b
  1550  00019C  EC8F  F006         	call	_printf	;wreg free
  1551                           
  1552                           ;main.c: 158: if (startGear){
  1553  0001A0  0100               	movlb	0	; () banked
  1554  0001A2  51C1               	movf	_startGear& (0+255),w,b
  1555  0001A4  B4D8               	btfsc	status,2,c
  1556  0001A6  D0E1               	goto	l4629
  1557                           
  1558                           ; BSR set to: 0
  1559                           ;main.c: 159: wait_3ms(1333);
  1560  0001A8  0E05               	movlw	5
  1561  0001AA  6E35               	movwf	wait_3ms@x+1,c
  1562  0001AC  0E35               	movlw	53
  1563  0001AE  6E34               	movwf	wait_3ms@x,c
  1564  0001B0  ECFC  F00E         	call	_wait_3ms	;wreg free
  1565                           
  1566                           ;main.c: 160: startGear = 0;
  1567  0001B4  0E00               	movlw	0
  1568  0001B6  0100               	movlb	0	; () banked
  1569  0001B8  6FC1               	movwf	_startGear& (0+255),b
  1570                           
  1571                           ; BSR set to: 0
  1572                           ;main.c: 161: LATCbits.LC1= 0;;
  1573  0001BA  928B               	bcf	3979,1,c	;volatile
  1574                           
  1575                           ; BSR set to: 0
  1576                           ;main.c: 162: for (unsigned int i = 0; i < 420; i++){
  1577  0001BC  0E00               	movlw	0
  1578  0001BE  0100               	movlb	0	; () banked
  1579  0001C0  6F9B               	movwf	(main@i_592+1)& (0+255),b
  1580  0001C2  0E00               	movlw	0
  1581  0001C4  6F9A               	movwf	main@i_592& (0+255),b
  1582  0001C6                     l4559:
  1583                           
  1584                           ; BSR set to: 0
  1585  0001C6  0EA4               	movlw	164
  1586  0001C8  0100               	movlb	0	; () banked
  1587  0001CA  5D9A               	subwf	main@i_592& (0+255),w,b
  1588  0001CC  0E01               	movlw	1
  1589  0001CE  0100               	movlb	0	; () banked
  1590  0001D0  599B               	subwfb	(main@i_592+1)& (0+255),w,b
  1591  0001D2  B0D8               	btfsc	status,0,c
  1592  0001D4  D01B               	goto	l246
  1593                           
  1594                           ; BSR set to: 0
  1595                           ;main.c: 163: LATCbits.LC2 = !LATCbits.LC2;;
  1596                           
  1597                           ; BSR set to: 0
  1598                           
  1599                           ; BSR set to: 0
  1600  0001D6  B48B               	btfsc	3979,2,c	;volatile
  1601  0001D8  D004               	goto	u5020
  1602  0001DA  0100               	movlb	0	; () banked
  1603  0001DC  6B96               	clrf	??_main& (0+255),b
  1604  0001DE  2B96               	incf	??_main& (0+255),f,b
  1605  0001E0  D002               	goto	u5038
  1606  0001E2                     u5020:
  1607  0001E2  0100               	movlb	0	; () banked
  1608  0001E4  6B96               	clrf	??_main& (0+255),b
  1609  0001E6                     u5038:
  1610  0001E6  0100               	movlb	0	; () banked
  1611  0001E8  4796               	rlncf	??_main& (0+255),f,b
  1612  0001EA  4796               	rlncf	??_main& (0+255),f,b
  1613  0001EC  508B               	movf	3979,w,c	;volatile
  1614  0001EE  0100               	movlb	0	; () banked
  1615  0001F0  1996               	xorwf	??_main& (0+255),w,b
  1616  0001F2  0BFB               	andlw	-5
  1617  0001F4  1996               	xorwf	??_main& (0+255),w,b
  1618  0001F6  6E8B               	movwf	3979,c	;volatile
  1619                           
  1620                           ; BSR set to: 0
  1621                           ;main.c: 164: wait_3ms(2);
  1622  0001F8  0E00               	movlw	0
  1623  0001FA  6E35               	movwf	wait_3ms@x+1,c
  1624  0001FC  0E02               	movlw	2
  1625  0001FE  6E34               	movwf	wait_3ms@x,c
  1626  000200  ECFC  F00E         	call	_wait_3ms	;wreg free
  1627  000204  0100               	movlb	0	; () banked
  1628  000206  4B9A               	infsnz	main@i_592& (0+255),f,b
  1629  000208  2B9B               	incf	(main@i_592+1)& (0+255),f,b
  1630  00020A  D7DD               	goto	l4559
  1631  00020C                     l246:
  1632                           
  1633                           ; BSR set to: 0
  1634                           ;main.c: 165: }
  1635                           ;main.c: 166: LATCbits.LC1= 1;;
  1636  00020C  828B               	bsf	3979,1,c	;volatile
  1637                           
  1638                           ; BSR set to: 0
  1639                           ;main.c: 167: for (unsigned int i = 0; i < 40; i++){
  1640  00020E  0E00               	movlw	0
  1641  000210  0100               	movlb	0	; () banked
  1642  000212  6F9D               	movwf	(main@i_593+1)& (0+255),b
  1643  000214  0E00               	movlw	0
  1644  000216  6F9C               	movwf	main@i_593& (0+255),b
  1645                           
  1646                           ; BSR set to: 0
  1647  000218  0100               	movlb	0	; () banked
  1648  00021A  519D               	movf	(main@i_593+1)& (0+255),w,b
  1649  00021C  E123               	bnz	l248
  1650  00021E  0E28               	movlw	40
  1651  000220  0100               	movlb	0	; () banked
  1652  000222  5D9C               	subwf	main@i_593& (0+255),w,b
  1653  000224  B0D8               	btfsc	status,0,c
  1654  000226  D01E               	goto	l248
  1655                           
  1656                           ; BSR set to: 0
  1657                           ;main.c: 168: LATCbits.LC2 = !LATCbits.LC2;;
  1658                           
  1659                           ; BSR set to: 0
  1660                           
  1661                           ; BSR set to: 0
  1662  000228  B48B               	btfsc	3979,2,c	;volatile
  1663  00022A  D004               	goto	u5060
  1664  00022C  0100               	movlb	0	; () banked
  1665  00022E  6B96               	clrf	??_main& (0+255),b
  1666  000230  2B96               	incf	??_main& (0+255),f,b
  1667  000232  D002               	goto	u5078
  1668  000234                     u5060:
  1669  000234  0100               	movlb	0	; () banked
  1670  000236  6B96               	clrf	??_main& (0+255),b
  1671  000238                     u5078:
  1672  000238  0100               	movlb	0	; () banked
  1673  00023A  4796               	rlncf	??_main& (0+255),f,b
  1674  00023C  4796               	rlncf	??_main& (0+255),f,b
  1675  00023E  508B               	movf	3979,w,c	;volatile
  1676  000240  0100               	movlb	0	; () banked
  1677  000242  1996               	xorwf	??_main& (0+255),w,b
  1678  000244  0BFB               	andlw	-5
  1679  000246  1996               	xorwf	??_main& (0+255),w,b
  1680  000248  6E8B               	movwf	3979,c	;volatile
  1681                           
  1682                           ; BSR set to: 0
  1683                           ;main.c: 169: wait_3ms(2);
  1684  00024A  0E00               	movlw	0
  1685  00024C  6E35               	movwf	wait_3ms@x+1,c
  1686  00024E  0E02               	movlw	2
  1687  000250  6E34               	movwf	wait_3ms@x,c
  1688  000252  ECFC  F00E         	call	_wait_3ms	;wreg free
  1689  000256  0100               	movlb	0	; () banked
  1690  000258  4B9C               	infsnz	main@i_593& (0+255),f,b
  1691  00025A  2B9D               	incf	(main@i_593+1)& (0+255),f,b
  1692                           
  1693                           ; BSR set to: 0
  1694  00025C  0100               	movlb	0	; () banked
  1695  00025E  519D               	movf	(main@i_593+1)& (0+255),w,b
  1696  000260  E101               	bnz	u5080
  1697  000262  D7DD               	goto	L1
  1698  000264                     u5080:
  1699  000264                     l248:
  1700                           
  1701                           ; BSR set to: 0
  1702                           ;main.c: 170: }
  1703                           ;main.c: 171: LATCbits.LC1= 0;;
  1704  000264  928B               	bcf	3979,1,c	;volatile
  1705                           
  1706                           ; BSR set to: 0
  1707                           ;main.c: 172: for (unsigned int i = 0; i < 40; i++){
  1708  000266  0E00               	movlw	0
  1709  000268  0100               	movlb	0	; () banked
  1710  00026A  6F9F               	movwf	(main@i_594+1)& (0+255),b
  1711  00026C  0E00               	movlw	0
  1712  00026E  6F9E               	movwf	main@i_594& (0+255),b
  1713                           
  1714                           ; BSR set to: 0
  1715  000270  0100               	movlb	0	; () banked
  1716  000272  519F               	movf	(main@i_594+1)& (0+255),w,b
  1717  000274  E123               	bnz	l250
  1718  000276  0E28               	movlw	40
  1719  000278  0100               	movlb	0	; () banked
  1720  00027A  5D9E               	subwf	main@i_594& (0+255),w,b
  1721  00027C  B0D8               	btfsc	status,0,c
  1722  00027E  D01E               	goto	l250
  1723                           
  1724                           ; BSR set to: 0
  1725                           ;main.c: 173: LATCbits.LC2 = !LATCbits.LC2;;
  1726                           
  1727                           ; BSR set to: 0
  1728                           
  1729                           ; BSR set to: 0
  1730  000280  B48B               	btfsc	3979,2,c	;volatile
  1731  000282  D004               	goto	u5100
  1732  000284  0100               	movlb	0	; () banked
  1733  000286  6B96               	clrf	??_main& (0+255),b
  1734  000288  2B96               	incf	??_main& (0+255),f,b
  1735  00028A  D002               	goto	u5118
  1736  00028C                     u5100:
  1737  00028C  0100               	movlb	0	; () banked
  1738  00028E  6B96               	clrf	??_main& (0+255),b
  1739  000290                     u5118:
  1740  000290  0100               	movlb	0	; () banked
  1741  000292  4796               	rlncf	??_main& (0+255),f,b
  1742  000294  4796               	rlncf	??_main& (0+255),f,b
  1743  000296  508B               	movf	3979,w,c	;volatile
  1744  000298  0100               	movlb	0	; () banked
  1745  00029A  1996               	xorwf	??_main& (0+255),w,b
  1746  00029C  0BFB               	andlw	-5
  1747  00029E  1996               	xorwf	??_main& (0+255),w,b
  1748  0002A0  6E8B               	movwf	3979,c	;volatile
  1749                           
  1750                           ; BSR set to: 0
  1751                           ;main.c: 174: wait_3ms(2);
  1752  0002A2  0E00               	movlw	0
  1753  0002A4  6E35               	movwf	wait_3ms@x+1,c
  1754  0002A6  0E02               	movlw	2
  1755  0002A8  6E34               	movwf	wait_3ms@x,c
  1756  0002AA  ECFC  F00E         	call	_wait_3ms	;wreg free
  1757  0002AE  0100               	movlb	0	; () banked
  1758  0002B0  4B9E               	infsnz	main@i_594& (0+255),f,b
  1759  0002B2  2B9F               	incf	(main@i_594+1)& (0+255),f,b
  1760                           
  1761                           ; BSR set to: 0
  1762  0002B4  0100               	movlb	0	; () banked
  1763  0002B6  519F               	movf	(main@i_594+1)& (0+255),w,b
  1764  0002B8  E101               	bnz	u5120
  1765  0002BA  D7DD               	goto	L2
  1766  0002BC                     u5120:
  1767  0002BC                     l250:
  1768                           
  1769                           ; BSR set to: 0
  1770                           ;main.c: 175: }
  1771                           ;main.c: 176: LATCbits.LC1= 1;;
  1772  0002BC  828B               	bsf	3979,1,c	;volatile
  1773                           
  1774                           ; BSR set to: 0
  1775                           ;main.c: 177: for (unsigned int i = 0; i < 40; i++){
  1776  0002BE  0E00               	movlw	0
  1777  0002C0  0100               	movlb	0	; () banked
  1778  0002C2  6FA1               	movwf	(main@i_595+1)& (0+255),b
  1779  0002C4  0E00               	movlw	0
  1780  0002C6  6FA0               	movwf	main@i_595& (0+255),b
  1781                           
  1782                           ; BSR set to: 0
  1783  0002C8  0100               	movlb	0	; () banked
  1784  0002CA  51A1               	movf	(main@i_595+1)& (0+255),w,b
  1785  0002CC  E123               	bnz	l252
  1786  0002CE  0E28               	movlw	40
  1787  0002D0  0100               	movlb	0	; () banked
  1788  0002D2  5DA0               	subwf	main@i_595& (0+255),w,b
  1789  0002D4  B0D8               	btfsc	status,0,c
  1790  0002D6  D01E               	goto	l252
  1791                           
  1792                           ; BSR set to: 0
  1793                           ;main.c: 178: LATCbits.LC2 = !LATCbits.LC2;;
  1794                           
  1795                           ; BSR set to: 0
  1796                           
  1797                           ; BSR set to: 0
  1798  0002D8  B48B               	btfsc	3979,2,c	;volatile
  1799  0002DA  D004               	goto	u5140
  1800  0002DC  0100               	movlb	0	; () banked
  1801  0002DE  6B96               	clrf	??_main& (0+255),b
  1802  0002E0  2B96               	incf	??_main& (0+255),f,b
  1803  0002E2  D002               	goto	u5158
  1804  0002E4                     u5140:
  1805  0002E4  0100               	movlb	0	; () banked
  1806  0002E6  6B96               	clrf	??_main& (0+255),b
  1807  0002E8                     u5158:
  1808  0002E8  0100               	movlb	0	; () banked
  1809  0002EA  4796               	rlncf	??_main& (0+255),f,b
  1810  0002EC  4796               	rlncf	??_main& (0+255),f,b
  1811  0002EE  508B               	movf	3979,w,c	;volatile
  1812  0002F0  0100               	movlb	0	; () banked
  1813  0002F2  1996               	xorwf	??_main& (0+255),w,b
  1814  0002F4  0BFB               	andlw	-5
  1815  0002F6  1996               	xorwf	??_main& (0+255),w,b
  1816  0002F8  6E8B               	movwf	3979,c	;volatile
  1817                           
  1818                           ; BSR set to: 0
  1819                           ;main.c: 179: wait_3ms(2);
  1820  0002FA  0E00               	movlw	0
  1821  0002FC  6E35               	movwf	wait_3ms@x+1,c
  1822  0002FE  0E02               	movlw	2
  1823  000300  6E34               	movwf	wait_3ms@x,c
  1824  000302  ECFC  F00E         	call	_wait_3ms	;wreg free
  1825  000306  0100               	movlb	0	; () banked
  1826  000308  4BA0               	infsnz	main@i_595& (0+255),f,b
  1827  00030A  2BA1               	incf	(main@i_595+1)& (0+255),f,b
  1828                           
  1829                           ; BSR set to: 0
  1830  00030C  0100               	movlb	0	; () banked
  1831  00030E  51A1               	movf	(main@i_595+1)& (0+255),w,b
  1832  000310  E101               	bnz	u5160
  1833  000312  D7DD               	goto	L3
  1834  000314                     u5160:
  1835  000314                     l252:
  1836                           
  1837                           ; BSR set to: 0
  1838                           ;main.c: 180: }
  1839                           ;main.c: 181: LATCbits.LC1= 0;;
  1840  000314  928B               	bcf	3979,1,c	;volatile
  1841                           
  1842                           ; BSR set to: 0
  1843                           ;main.c: 182: for (unsigned int i = 0; i < 20; i++){
  1844  000316  0E00               	movlw	0
  1845  000318  0100               	movlb	0	; () banked
  1846  00031A  6FA3               	movwf	(main@i_596+1)& (0+255),b
  1847  00031C  0E00               	movlw	0
  1848  00031E  6FA2               	movwf	main@i_596& (0+255),b
  1849  000320                     l4615:
  1850                           
  1851                           ; BSR set to: 0
  1852  000320  0100               	movlb	0	; () banked
  1853  000322  51A3               	movf	(main@i_596+1)& (0+255),w,b
  1854  000324  E120               	bnz	l4627
  1855  000326  0E14               	movlw	20
  1856  000328  0100               	movlb	0	; () banked
  1857  00032A  5DA2               	subwf	main@i_596& (0+255),w,b
  1858  00032C  B0D8               	btfsc	status,0,c
  1859  00032E  D01B               	goto	l4627
  1860                           
  1861                           ; BSR set to: 0
  1862                           ;main.c: 183: LATCbits.LC2 = !LATCbits.LC2;;
  1863                           
  1864                           ; BSR set to: 0
  1865                           
  1866                           ; BSR set to: 0
  1867  000330  B48B               	btfsc	3979,2,c	;volatile
  1868  000332  D004               	goto	u5180
  1869  000334  0100               	movlb	0	; () banked
  1870  000336  6B96               	clrf	??_main& (0+255),b
  1871  000338  2B96               	incf	??_main& (0+255),f,b
  1872  00033A  D002               	goto	u5198
  1873  00033C                     u5180:
  1874  00033C  0100               	movlb	0	; () banked
  1875  00033E  6B96               	clrf	??_main& (0+255),b
  1876  000340                     u5198:
  1877  000340  0100               	movlb	0	; () banked
  1878  000342  4796               	rlncf	??_main& (0+255),f,b
  1879  000344  4796               	rlncf	??_main& (0+255),f,b
  1880  000346  508B               	movf	3979,w,c	;volatile
  1881  000348  0100               	movlb	0	; () banked
  1882  00034A  1996               	xorwf	??_main& (0+255),w,b
  1883  00034C  0BFB               	andlw	-5
  1884  00034E  1996               	xorwf	??_main& (0+255),w,b
  1885  000350  6E8B               	movwf	3979,c	;volatile
  1886                           
  1887                           ; BSR set to: 0
  1888                           ;main.c: 184: wait_3ms(2);
  1889  000352  0E00               	movlw	0
  1890  000354  6E35               	movwf	wait_3ms@x+1,c
  1891  000356  0E02               	movlw	2
  1892  000358  6E34               	movwf	wait_3ms@x,c
  1893  00035A  ECFC  F00E         	call	_wait_3ms	;wreg free
  1894  00035E  0100               	movlb	0	; () banked
  1895  000360  4BA2               	infsnz	main@i_596& (0+255),f,b
  1896  000362  2BA3               	incf	(main@i_596+1)& (0+255),f,b
  1897  000364  D7DD               	goto	l4615
  1898  000366                     l4627:
  1899                           
  1900                           ; BSR set to: 0
  1901                           ;main.c: 185: }
  1902                           ;main.c: 186: doneTimer = 0;
  1903  000366  0E00               	movlw	0
  1904  000368  6E45               	movwf	_doneTimer,c
  1905  00036A                     l4629:
  1906                           
  1907                           ; BSR set to: 0
  1908                           ;main.c: 187: }
  1909                           ;main.c: 188: readADC(0);
  1910  00036A  0E00               	movlw	0
  1911  00036C  EC09  F00F         	call	_readADC
  1912                           
  1913                           ;main.c: 191: if (ADRES<50 | ADRES > 80){
  1914  000370  50C4               	movf	4036,w,c	;volatile
  1915  000372  E104               	bnz	u5211
  1916  000374  0E51               	movlw	81
  1917  000376  5CC3               	subwf	4035,w,c	;volatile
  1918  000378  A0D8               	btfss	status,0,c
  1919  00037A  D002               	goto	u5210
  1920  00037C                     u5211:
  1921  00037C  0E01               	movlw	1
  1922  00037E  D001               	goto	u5212
  1923  000380                     u5210:
  1924  000380  0E00               	movlw	0
  1925  000382                     u5212:
  1926  000382  0100               	movlb	0	; () banked
  1927  000384  6F96               	movwf	??_main& (0+255),b
  1928  000386  50C4               	movf	4036,w,c	;volatile
  1929  000388  E106               	bnz	u5220
  1930  00038A  0E32               	movlw	50
  1931  00038C  5CC3               	subwf	4035,w,c	;volatile
  1932  00038E  B0D8               	btfsc	status,0,c
  1933  000390  D002               	goto	u5220
  1934  000392  0E01               	movlw	1
  1935  000394  D001               	goto	u5222
  1936  000396                     u5220:
  1937  000396  0E00               	movlw	0
  1938  000398                     u5222:
  1939  000398  0100               	movlb	0	; () banked
  1940  00039A  1196               	iorwf	??_main& (0+255),w,b
  1941  00039C  A0E8               	btfss	wreg,0,c
  1942  00039E  D0F8               	goto	l255
  1943                           
  1944                           ; BSR set to: 0
  1945                           ;main.c: 192: wait_3ms(167);
  1946  0003A0  0E00               	movlw	0
  1947  0003A2  6E35               	movwf	wait_3ms@x+1,c
  1948  0003A4  0EA7               	movlw	167
  1949  0003A6  6E34               	movwf	wait_3ms@x,c
  1950  0003A8  ECFC  F00E         	call	_wait_3ms	;wreg free
  1951                           
  1952                           ;main.c: 193: sorting = 1;
  1953  0003AC  0E01               	movlw	1
  1954  0003AE  6E48               	movwf	_sorting,c
  1955                           
  1956                           ;main.c: 194: LATCbits.LC7 = 1;;
  1957  0003B0  8E8B               	bsf	3979,7,c	;volatile
  1958                           
  1959                           ;main.c: 195: wait_3ms(167);
  1960  0003B2  0E00               	movlw	0
  1961  0003B4  6E35               	movwf	wait_3ms@x+1,c
  1962  0003B6  0EA7               	movlw	167
  1963  0003B8  6E34               	movwf	wait_3ms@x,c
  1964  0003BA  ECFC  F00E         	call	_wait_3ms	;wreg free
  1965                           
  1966                           ;main.c: 196: testBatteries();
  1967  0003BE  ECEB  F009         	call	_testBatteries	;wreg free
  1968                           
  1969                           ;main.c: 197: LATCbits.LC7 = 0;;
  1970  0003C2  9E8B               	bcf	3979,7,c	;volatile
  1971                           
  1972                           ;main.c: 198: if (plat1Left){
  1973  0003C4  0100               	movlb	0	; () banked
  1974  0003C6  51AE               	movf	_plat1Left& (0+255),w,b
  1975  0003C8  0100               	movlb	0	; () banked
  1976  0003CA  11AF               	iorwf	(_plat1Left+1)& (0+255),w,b
  1977  0003CC  B4D8               	btfsc	status,2,c
  1978  0003CE  D004               	goto	l4651
  1979                           
  1980                           ; BSR set to: 0
  1981                           ;main.c: 199: step1 = 1;
  1982  0003D0  0E01               	movlw	1
  1983  0003D2  6E49               	movwf	_step1,c
  1984                           
  1985                           ; BSR set to: 0
  1986                           ;main.c: 200: turn1BackRight = plat1Left;
  1987  0003D4  C0AE  F0C4         	movff	_plat1Left,_turn1BackRight
  1988  0003D8                     l4651:
  1989                           
  1990                           ; BSR set to: 0
  1991                           ;main.c: 201: }
  1992                           ;main.c: 202: if (plat1Right){
  1993  0003D8  0100               	movlb	0	; () banked
  1994  0003DA  51B0               	movf	_plat1Right& (0+255),w,b
  1995  0003DC  0100               	movlb	0	; () banked
  1996  0003DE  11B1               	iorwf	(_plat1Right+1)& (0+255),w,b
  1997  0003E0  B4D8               	btfsc	status,2,c
  1998  0003E2  D004               	goto	l4657
  1999                           
  2000                           ; BSR set to: 0
  2001                           ;main.c: 203: step1 = 4;
  2002  0003E4  0E04               	movlw	4
  2003  0003E6  6E49               	movwf	_step1,c
  2004                           
  2005                           ; BSR set to: 0
  2006                           ;main.c: 204: turn1BackLeft = plat1Right;
  2007  0003E8  C0B0  F0C3         	movff	_plat1Right,_turn1BackLeft
  2008  0003EC                     l4657:
  2009                           
  2010                           ; BSR set to: 0
  2011                           ;main.c: 205: }
  2012                           ;main.c: 206: if (plat2Left){
  2013  0003EC  0100               	movlb	0	; () banked
  2014  0003EE  51B2               	movf	_plat2Left& (0+255),w,b
  2015  0003F0  0100               	movlb	0	; () banked
  2016  0003F2  11B3               	iorwf	(_plat2Left+1)& (0+255),w,b
  2017  0003F4  B4D8               	btfsc	status,2,c
  2018  0003F6  D004               	goto	l4663
  2019                           
  2020                           ; BSR set to: 0
  2021                           ;main.c: 207: step2 = 1;
  2022  0003F8  0E01               	movlw	1
  2023  0003FA  6E4A               	movwf	_step2,c
  2024                           
  2025                           ; BSR set to: 0
  2026                           ;main.c: 208: turn2BackRight = plat2Left;
  2027  0003FC  C0B2  F0C6         	movff	_plat2Left,_turn2BackRight
  2028  000400                     l4663:
  2029                           
  2030                           ; BSR set to: 0
  2031                           ;main.c: 209: }
  2032                           ;main.c: 210: if (plat2Right){
  2033  000400  0100               	movlb	0	; () banked
  2034  000402  51B4               	movf	_plat2Right& (0+255),w,b
  2035  000404  0100               	movlb	0	; () banked
  2036  000406  11B5               	iorwf	(_plat2Right+1)& (0+255),w,b
  2037  000408  B4D8               	btfsc	status,2,c
  2038  00040A  D004               	goto	l4669
  2039                           
  2040                           ; BSR set to: 0
  2041                           ;main.c: 211: step2 = 4;
  2042  00040C  0E04               	movlw	4
  2043  00040E  6E4A               	movwf	_step2,c
  2044                           
  2045                           ; BSR set to: 0
  2046                           ;main.c: 212: turn2BackLeft = plat2Right;
  2047  000410  C0B4  F0C5         	movff	_plat2Right,_turn2BackLeft
  2048  000414                     l4669:
  2049                           
  2050                           ; BSR set to: 0
  2051                           ;main.c: 213: }
  2052                           ;main.c: 214: LATAbits.LA2 = 1;;
  2053  000414  8489               	bsf	3977,2,c	;volatile
  2054                           
  2055                           ; BSR set to: 0
  2056                           ;main.c: 215: LATAbits.LA3 = 0;;
  2057  000416  9689               	bcf	3977,3,c	;volatile
  2058                           
  2059                           ; BSR set to: 0
  2060                           ;main.c: 216: LATBbits.LB0 = 1;;
  2061  000418  808A               	bsf	3978,0,c	;volatile
  2062                           
  2063                           ; BSR set to: 0
  2064                           ;main.c: 217: LATBbits.LB2 = 0;;
  2065  00041A  948A               	bcf	3978,2,c	;volatile
  2066  00041C                     l4677:
  2067                           
  2068                           ; BSR set to: 0
  2069  00041C  0100               	movlb	0	; () banked
  2070  00041E  51B2               	movf	_plat2Left& (0+255),w,b
  2071  000420  0100               	movlb	0	; () banked
  2072  000422  11AE               	iorwf	_plat1Left& (0+255),w,b
  2073  000424  0100               	movlb	0	; () banked
  2074  000426  6F96               	movwf	??_main& (0+255),b
  2075  000428  0100               	movlb	0	; () banked
  2076  00042A  51B3               	movf	(_plat2Left+1)& (0+255),w,b
  2077  00042C  0100               	movlb	0	; () banked
  2078  00042E  11AF               	iorwf	(_plat1Left+1)& (0+255),w,b
  2079  000430  0100               	movlb	0	; () banked
  2080  000432  6F97               	movwf	(??_main+1)& (0+255),b
  2081  000434  0100               	movlb	0	; () banked
  2082  000436  51B0               	movf	_plat1Right& (0+255),w,b
  2083  000438  0100               	movlb	0	; () banked
  2084  00043A  1396               	iorwf	??_main& (0+255),f,b
  2085  00043C  0100               	movlb	0	; () banked
  2086  00043E  51B1               	movf	(_plat1Right+1)& (0+255),w,b
  2087  000440  0100               	movlb	0	; () banked
  2088  000442  1397               	iorwf	(??_main+1)& (0+255),f,b
  2089  000444  0100               	movlb	0	; () banked
  2090  000446  51B4               	movf	_plat2Right& (0+255),w,b
  2091  000448  0100               	movlb	0	; () banked
  2092  00044A  1396               	iorwf	??_main& (0+255),f,b
  2093  00044C  0100               	movlb	0	; () banked
  2094  00044E  51B5               	movf	(_plat2Right+1)& (0+255),w,b
  2095  000450  0100               	movlb	0	; () banked
  2096  000452  1397               	iorwf	(??_main+1)& (0+255),f,b
  2097  000454  0100               	movlb	0	; () banked
  2098  000456  5196               	movf	??_main& (0+255),w,b
  2099  000458  0100               	movlb	0	; () banked
  2100  00045A  1197               	iorwf	(??_main+1)& (0+255),w,b
  2101  00045C  B4D8               	btfsc	status,2,c
  2102  00045E  D004               	goto	l4681
  2103                           
  2104                           ; BSR set to: 0
  2105  000460  0100               	movlb	0	; () banked
  2106  000462  05C7               	decf	_screenMode& (0+255),w,b
  2107  000464  B4D8               	btfsc	status,2,c
  2108  000466  D7DA               	goto	l4677
  2109  000468                     l4681:
  2110                           
  2111                           ; BSR set to: 0
  2112                           ;main.c: 221: wait_3ms(333);
  2113  000468  0E01               	movlw	1
  2114  00046A  6E35               	movwf	wait_3ms@x+1,c
  2115  00046C  0E4D               	movlw	77
  2116  00046E  6E34               	movwf	wait_3ms@x,c
  2117  000470  ECFC  F00E         	call	_wait_3ms	;wreg free
  2118                           
  2119                           ;main.c: 223: LATAbits.LA2 = 1;;
  2120  000474  8489               	bsf	3977,2,c	;volatile
  2121                           
  2122                           ;main.c: 224: LATAbits.LA3 = 0;;
  2123  000476  9689               	bcf	3977,3,c	;volatile
  2124                           
  2125                           ;main.c: 225: LATBbits.LB0 = 1;;
  2126  000478  808A               	bsf	3978,0,c	;volatile
  2127                           
  2128                           ;main.c: 226: LATBbits.LB2 = 0;;
  2129  00047A  948A               	bcf	3978,2,c	;volatile
  2130                           
  2131                           ;main.c: 227: plat1Left = turn1BackLeft;
  2132  00047C  C0C3  F0AE         	movff	_turn1BackLeft,_plat1Left
  2133  000480  0100               	movlb	0	; () banked
  2134  000482  6BAF               	clrf	(_plat1Left+1)& (0+255),b
  2135                           
  2136                           ; BSR set to: 0
  2137                           ;main.c: 228: plat1Right = turn1BackRight;
  2138  000484  C0C4  F0B0         	movff	_turn1BackRight,_plat1Right
  2139  000488  0100               	movlb	0	; () banked
  2140  00048A  6BB1               	clrf	(_plat1Right+1)& (0+255),b
  2141                           
  2142                           ; BSR set to: 0
  2143                           ;main.c: 229: plat2Left = turn2BackLeft;
  2144  00048C  C0C5  F0B2         	movff	_turn2BackLeft,_plat2Left
  2145  000490  0100               	movlb	0	; () banked
  2146  000492  6BB3               	clrf	(_plat2Left+1)& (0+255),b
  2147                           
  2148                           ; BSR set to: 0
  2149                           ;main.c: 230: plat2Right = turn2BackRight;
  2150  000494  C0C6  F0B4         	movff	_turn2BackRight,_plat2Right
  2151  000498  0100               	movlb	0	; () banked
  2152  00049A  6BB5               	clrf	(_plat2Right+1)& (0+255),b
  2153                           
  2154                           ; BSR set to: 0
  2155                           ;main.c: 231: stepGear = 1;
  2156  00049C  0E01               	movlw	1
  2157  00049E  0100               	movlb	0	; () banked
  2158  0004A0  6FC2               	movwf	_stepGear& (0+255),b
  2159                           
  2160                           ; BSR set to: 0
  2161                           ;main.c: 232: LATCbits.LC1= 0;;
  2162  0004A2  928B               	bcf	3979,1,c	;volatile
  2163  0004A4                     l4703:
  2164                           
  2165                           ; BSR set to: 0
  2166  0004A4  0100               	movlb	0	; () banked
  2167  0004A6  51B2               	movf	_plat2Left& (0+255),w,b
  2168  0004A8  0100               	movlb	0	; () banked
  2169  0004AA  11AE               	iorwf	_plat1Left& (0+255),w,b
  2170  0004AC  0100               	movlb	0	; () banked
  2171  0004AE  6F96               	movwf	??_main& (0+255),b
  2172  0004B0  0100               	movlb	0	; () banked
  2173  0004B2  51B3               	movf	(_plat2Left+1)& (0+255),w,b
  2174  0004B4  0100               	movlb	0	; () banked
  2175  0004B6  11AF               	iorwf	(_plat1Left+1)& (0+255),w,b
  2176  0004B8  0100               	movlb	0	; () banked
  2177  0004BA  6F97               	movwf	(??_main+1)& (0+255),b
  2178  0004BC  0100               	movlb	0	; () banked
  2179  0004BE  51B0               	movf	_plat1Right& (0+255),w,b
  2180  0004C0  0100               	movlb	0	; () banked
  2181  0004C2  1396               	iorwf	??_main& (0+255),f,b
  2182  0004C4  0100               	movlb	0	; () banked
  2183  0004C6  51B1               	movf	(_plat1Right+1)& (0+255),w,b
  2184  0004C8  0100               	movlb	0	; () banked
  2185  0004CA  1397               	iorwf	(??_main+1)& (0+255),f,b
  2186  0004CC  0100               	movlb	0	; () banked
  2187  0004CE  51B4               	movf	_plat2Right& (0+255),w,b
  2188  0004D0  0100               	movlb	0	; () banked
  2189  0004D2  1396               	iorwf	??_main& (0+255),f,b
  2190  0004D4  0100               	movlb	0	; () banked
  2191  0004D6  51B5               	movf	(_plat2Right+1)& (0+255),w,b
  2192  0004D8  0100               	movlb	0	; () banked
  2193  0004DA  1397               	iorwf	(??_main+1)& (0+255),f,b
  2194  0004DC  0100               	movlb	0	; () banked
  2195  0004DE  51C2               	movf	_stepGear& (0+255),w,b
  2196  0004E0  B4D8               	btfsc	status,2,c
  2197  0004E2  D002               	goto	u5300
  2198  0004E4  0E01               	movlw	1
  2199  0004E6  D001               	goto	u5310
  2200  0004E8                     u5300:
  2201  0004E8  0E00               	movlw	0
  2202  0004EA                     u5310:
  2203  0004EA  0100               	movlb	0	; () banked
  2204  0004EC  6F98               	movwf	(??_main+2)& (0+255),b
  2205  0004EE  6B99               	clrf	(??_main+3)& (0+255),b
  2206  0004F0  0100               	movlb	0	; () banked
  2207  0004F2  5196               	movf	??_main& (0+255),w,b
  2208  0004F4  0100               	movlb	0	; () banked
  2209  0004F6  1398               	iorwf	(??_main+2)& (0+255),f,b
  2210  0004F8  0100               	movlb	0	; () banked
  2211  0004FA  5197               	movf	(??_main+1)& (0+255),w,b
  2212  0004FC  0100               	movlb	0	; () banked
  2213  0004FE  1399               	iorwf	(??_main+3)& (0+255),f,b
  2214  000500  0100               	movlb	0	; () banked
  2215  000502  5198               	movf	(??_main+2)& (0+255),w,b
  2216  000504  0100               	movlb	0	; () banked
  2217  000506  1199               	iorwf	(??_main+3)& (0+255),w,b
  2218  000508  B4D8               	btfsc	status,2,c
  2219  00050A  D004               	goto	l269
  2220                           
  2221                           ; BSR set to: 0
  2222  00050C  0100               	movlb	0	; () banked
  2223  00050E  05C7               	decf	_screenMode& (0+255),w,b
  2224  000510  B4D8               	btfsc	status,2,c
  2225  000512  D7C8               	goto	l4703
  2226  000514                     l269:
  2227                           
  2228                           ; BSR set to: 0
  2229                           ;main.c: 236: LATCbits.LC2 = 0;;
  2230  000514  948B               	bcf	3979,2,c	;volatile
  2231                           
  2232                           ;main.c: 237: LATCbits.LC1= 0;;
  2233  000516  928B               	bcf	3979,1,c	;volatile
  2234                           
  2235                           ; BSR set to: 0
  2236                           ;main.c: 238: turn1BackRight = 0;
  2237  000518  0E00               	movlw	0
  2238  00051A  0100               	movlb	0	; () banked
  2239  00051C  6FC4               	movwf	_turn1BackRight& (0+255),b
  2240                           
  2241                           ;main.c: 239: turn1BackLeft = 0;
  2242  00051E  0E00               	movlw	0
  2243  000520  0100               	movlb	0	; () banked
  2244  000522  6FC3               	movwf	_turn1BackLeft& (0+255),b
  2245                           
  2246                           ;main.c: 240: turn2BackRight = 0;
  2247  000524  0E00               	movlw	0
  2248  000526  0100               	movlb	0	; () banked
  2249  000528  6FC6               	movwf	_turn2BackRight& (0+255),b
  2250                           
  2251                           ;main.c: 241: turn2BackLeft = 0;
  2252  00052A  0E00               	movlw	0
  2253  00052C  0100               	movlb	0	; () banked
  2254  00052E  6FC5               	movwf	_turn2BackLeft& (0+255),b
  2255                           
  2256                           ; BSR set to: 0
  2257                           ;main.c: 242: LATAbits.LA2 = 0;;
  2258  000530  9489               	bcf	3977,2,c	;volatile
  2259                           
  2260                           ; BSR set to: 0
  2261                           ;main.c: 243: LATAbits.LA3 = 0;;
  2262  000532  9689               	bcf	3977,3,c	;volatile
  2263                           
  2264                           ; BSR set to: 0
  2265                           ;main.c: 244: LATAbits.LA4 = 0;;
  2266  000534  9889               	bcf	3977,4,c	;volatile
  2267                           
  2268                           ; BSR set to: 0
  2269                           ;main.c: 245: LATAbits.LA5 = 0;;
  2270  000536  9A89               	bcf	3977,5,c	;volatile
  2271                           
  2272                           ; BSR set to: 0
  2273                           ;main.c: 246: LATBbits.LB0 = 0;;
  2274  000538  908A               	bcf	3978,0,c	;volatile
  2275                           
  2276                           ; BSR set to: 0
  2277                           ;main.c: 247: LATBbits.LB2 = 0;;
  2278  00053A  948A               	bcf	3978,2,c	;volatile
  2279                           
  2280                           ; BSR set to: 0
  2281                           ;main.c: 248: LATCbits.LC6 = 0;;
  2282  00053C  9C8B               	bcf	3979,6,c	;volatile
  2283                           
  2284                           ; BSR set to: 0
  2285                           ;main.c: 249: LATEbits.LE2 = 0;;
  2286  00053E  948D               	bcf	3981,2,c	;volatile
  2287                           
  2288                           ; BSR set to: 0
  2289                           ;main.c: 250: if (((countC + countAA + count9V + countDrain) >= 15)){
  2290  000540  0100               	movlb	0	; () banked
  2291  000542  51B7               	movf	_countAA& (0+255),w,b
  2292  000544  C0B8  F096         	movff	_countC,??_main
  2293  000548  0100               	movlb	0	; () banked
  2294  00054A  6B97               	clrf	(??_main+1)& (0+255),b
  2295  00054C  0100               	movlb	0	; () banked
  2296  00054E  2796               	addwf	??_main& (0+255),f,b
  2297  000550  0E00               	movlw	0
  2298  000552  2397               	addwfc	(??_main+1)& (0+255),f,b
  2299  000554  0100               	movlb	0	; () banked
  2300  000556  51B6               	movf	_count9V& (0+255),w,b
  2301  000558  0100               	movlb	0	; () banked
  2302  00055A  2796               	addwf	??_main& (0+255),f,b
  2303  00055C  0E00               	movlw	0
  2304  00055E  2397               	addwfc	(??_main+1)& (0+255),f,b
  2305  000560  0100               	movlb	0	; () banked
  2306  000562  51B9               	movf	_countDrain& (0+255),w,b
  2307  000564  0100               	movlb	0	; () banked
  2308  000566  2796               	addwf	??_main& (0+255),f,b
  2309  000568  0E00               	movlw	0
  2310  00056A  2397               	addwfc	(??_main+1)& (0+255),f,b
  2311  00056C  0100               	movlb	0	; () banked
  2312  00056E  BF97               	btfsc	(??_main+1)& (0+255),7,b
  2313  000570  D00D               	goto	l4731
  2314  000572  0100               	movlb	0	; () banked
  2315  000574  5197               	movf	(??_main+1)& (0+255),w,b
  2316  000576  E105               	bnz	u5340
  2317  000578  0E0F               	movlw	15
  2318  00057A  0100               	movlb	0	; () banked
  2319  00057C  5D96               	subwf	??_main& (0+255),w,b
  2320  00057E  A0D8               	btfss	status,0,c
  2321  000580  D005               	goto	l4731
  2322  000582                     u5340:
  2323                           
  2324                           ; BSR set to: 0
  2325                           ;main.c: 251: screenMode = 0;
  2326  000582  0E00               	movlw	0
  2327  000584  0100               	movlb	0	; () banked
  2328  000586  6FC7               	movwf	_screenMode& (0+255),b
  2329                           
  2330                           ; BSR set to: 0
  2331                           ;main.c: 252: stopOperation();
  2332  000588  ECC0  F00A         	call	_stopOperation	;wreg free
  2333  00058C                     l4731:
  2334                           
  2335                           ;main.c: 253: }
  2336                           ;main.c: 254: sorting = 0;
  2337  00058C  0E00               	movlw	0
  2338  00058E  6E48               	movwf	_sorting,c
  2339  000590                     l255:
  2340                           
  2341                           ;main.c: 255: }
  2342                           ;main.c: 256: wait_3ms(167);
  2343  000590  0E00               	movlw	0
  2344  000592  6E35               	movwf	wait_3ms@x+1,c
  2345  000594  0EA7               	movlw	167
  2346  000596  6E34               	movwf	wait_3ms@x,c
  2347  000598  ECFC  F00E         	call	_wait_3ms	;wreg free
  2348  00059C                     l4733:
  2349  00059C  0100               	movlb	0	; () banked
  2350  00059E  05C7               	decf	_screenMode& (0+255),w,b
  2351  0005A0  A4D8               	btfss	status,2,c
  2352  0005A2  D017               	goto	l4741
  2353  0005A4  D5CF               	goto	l4545
  2354  0005A6                     l4735:
  2355                           
  2356                           ; BSR set to: 0
  2357                           ;main.c: 260: lcdInst(0b10000000);;
  2358  0005A6  0E80               	movlw	128
  2359  0005A8  EC22  F00F         	call	_lcdInst
  2360                           
  2361                           ;main.c: 261: printf("DONE! PRESS *   ");
  2362  0005AC  0E88               	movlw	low STR_5
  2363  0005AE  0100               	movlb	0	; () banked
  2364  0005B0  6F80               	movwf	printf@f& (0+255),b
  2365  0005B2  0EFF               	movlw	high STR_5
  2366  0005B4  0100               	movlb	0	; () banked
  2367  0005B6  6F81               	movwf	(printf@f+1)& (0+255),b
  2368  0005B8  EC8F  F006         	call	_printf	;wreg free
  2369                           
  2370                           ;main.c: 262: lcdInst(0b11000000);;
  2371  0005BC  0EC0               	movlw	192
  2372  0005BE  EC22  F00F         	call	_lcdInst
  2373                           
  2374                           ;main.c: 263: printf("TO CONTINUE     ");
  2375  0005C2  0E66               	movlw	low STR_6
  2376  0005C4  0100               	movlb	0	; () banked
  2377  0005C6  6F80               	movwf	printf@f& (0+255),b
  2378  0005C8  0EFF               	movlw	high STR_6
  2379  0005CA  0100               	movlb	0	; () banked
  2380  0005CC  6F81               	movwf	(printf@f+1)& (0+255),b
  2381  0005CE  EC8F  F006         	call	_printf	;wreg free
  2382  0005D2                     l4741:
  2383  0005D2  0100               	movlb	0	; () banked
  2384  0005D4  51C7               	movf	_screenMode& (0+255),w,b
  2385  0005D6  A4D8               	btfss	status,2,c
  2386  0005D8  D01F               	goto	l4749
  2387  0005DA  D7E5               	goto	l4735
  2388  0005DC                     l4743:
  2389                           
  2390                           ; BSR set to: 0
  2391                           ;main.c: 266: lcdInst(0b10000000);;
  2392  0005DC  0E80               	movlw	128
  2393  0005DE  EC22  F00F         	call	_lcdInst
  2394                           
  2395                           ;main.c: 267: printf("TOTAL RUN TIME: ");
  2396  0005E2  0EBB               	movlw	low STR_7
  2397  0005E4  0100               	movlb	0	; () banked
  2398  0005E6  6F80               	movwf	printf@f& (0+255),b
  2399  0005E8  0EFF               	movlw	high STR_7
  2400  0005EA  0100               	movlb	0	; () banked
  2401  0005EC  6F81               	movwf	(printf@f+1)& (0+255),b
  2402  0005EE  EC8F  F006         	call	_printf	;wreg free
  2403                           
  2404                           ;main.c: 268: lcdInst(0b11000000);;
  2405  0005F2  0EC0               	movlw	192
  2406  0005F4  EC22  F00F         	call	_lcdInst
  2407                           
  2408                           ;main.c: 269: printf("%02d:%02d               ", min, sec);
  2409  0005F8  0E6A               	movlw	low STR_8
  2410  0005FA  0100               	movlb	0	; () banked
  2411  0005FC  6F80               	movwf	printf@f& (0+255),b
  2412  0005FE  0EFE               	movlw	high STR_8
  2413  000600  0100               	movlb	0	; () banked
  2414  000602  6F81               	movwf	(printf@f+1)& (0+255),b
  2415  000604  C0BA  F082         	movff	_min,?_printf+2
  2416  000608  0100               	movlb	0	; () banked
  2417  00060A  6B83               	clrf	(?_printf+3)& (0+255),b
  2418  00060C  C0C0  F084         	movff	_sec,?_printf+4
  2419  000610  0100               	movlb	0	; () banked
  2420  000612  6B85               	clrf	(?_printf+5)& (0+255),b
  2421  000614  EC8F  F006         	call	_printf	;wreg free
  2422  000618                     l4749:
  2423  000618  0E03               	movlw	3
  2424  00061A  0100               	movlb	0	; () banked
  2425  00061C  19C7               	xorwf	_screenMode& (0+255),w,b
  2426  00061E  A4D8               	btfss	status,2,c
  2427  000620  D01B               	goto	l4757
  2428  000622  D7DC               	goto	l4743
  2429  000624                     l4751:
  2430                           
  2431                           ; BSR set to: 0
  2432                           ;main.c: 272: lcdInst(0b10000000);;
  2433  000624  0E80               	movlw	128
  2434  000626  EC22  F00F         	call	_lcdInst
  2435                           
  2436                           ;main.c: 273: printf("TOTAL # OF      ");
  2437  00062A  0E55               	movlw	low STR_9
  2438  00062C  0100               	movlb	0	; () banked
  2439  00062E  6F80               	movwf	printf@f& (0+255),b
  2440  000630  0EFF               	movlw	high STR_9
  2441  000632  0100               	movlb	0	; () banked
  2442  000634  6F81               	movwf	(printf@f+1)& (0+255),b
  2443  000636  EC8F  F006         	call	_printf	;wreg free
  2444                           
  2445                           ;main.c: 274: lcdInst(0b11000000);;
  2446  00063A  0EC0               	movlw	192
  2447  00063C  EC22  F00F         	call	_lcdInst
  2448                           
  2449                           ;main.c: 275: printf("BATTERIES: %02d   ", numBats);
  2450  000640  0EDC               	movlw	low STR_10
  2451  000642  0100               	movlb	0	; () banked
  2452  000644  6F80               	movwf	printf@f& (0+255),b
  2453  000646  0EFE               	movlw	high STR_10
  2454  000648  0100               	movlb	0	; () banked
  2455  00064A  6F81               	movwf	(printf@f+1)& (0+255),b
  2456  00064C  C0BD  F082         	movff	_numBats,?_printf+2
  2457  000650  0100               	movlb	0	; () banked
  2458  000652  6B83               	clrf	(?_printf+3)& (0+255),b
  2459  000654  EC8F  F006         	call	_printf	;wreg free
  2460  000658                     l4757:
  2461  000658  0E04               	movlw	4
  2462  00065A  0100               	movlb	0	; () banked
  2463  00065C  19C7               	xorwf	_screenMode& (0+255),w,b
  2464  00065E  A4D8               	btfss	status,2,c
  2465  000660  D01B               	goto	l4765
  2466  000662  D7E0               	goto	l4751
  2467  000664                     l4759:
  2468                           
  2469                           ; BSR set to: 0
  2470                           ;main.c: 278: lcdInst(0b10000000);;
  2471  000664  0E80               	movlw	128
  2472  000666  EC22  F00F         	call	_lcdInst
  2473                           
  2474                           ;main.c: 279: printf("# OF C          ");
  2475  00066A  0E11               	movlw	low STR_11
  2476  00066C  0100               	movlb	0	; () banked
  2477  00066E  6F80               	movwf	printf@f& (0+255),b
  2478  000670  0EFF               	movlw	high STR_11
  2479  000672  0100               	movlb	0	; () banked
  2480  000674  6F81               	movwf	(printf@f+1)& (0+255),b
  2481  000676  EC8F  F006         	call	_printf	;wreg free
  2482                           
  2483                           ;main.c: 280: lcdInst(0b11000000);;
  2484  00067A  0EC0               	movlw	192
  2485  00067C  EC22  F00F         	call	_lcdInst
  2486                           
  2487                           ;main.c: 281: printf("BATTERIES: %02d   ", numC);
  2488  000680  0EDC               	movlw	low STR_10
  2489  000682  0100               	movlb	0	; () banked
  2490  000684  6F80               	movwf	printf@f& (0+255),b
  2491  000686  0EFE               	movlw	high STR_10
  2492  000688  0100               	movlb	0	; () banked
  2493  00068A  6F81               	movwf	(printf@f+1)& (0+255),b
  2494  00068C  C0BE  F082         	movff	_numC,?_printf+2
  2495  000690  0100               	movlb	0	; () banked
  2496  000692  6B83               	clrf	(?_printf+3)& (0+255),b
  2497  000694  EC8F  F006         	call	_printf	;wreg free
  2498  000698                     l4765:
  2499  000698  0E05               	movlw	5
  2500  00069A  0100               	movlb	0	; () banked
  2501  00069C  19C7               	xorwf	_screenMode& (0+255),w,b
  2502  00069E  A4D8               	btfss	status,2,c
  2503  0006A0  D01B               	goto	l4773
  2504  0006A2  D7E0               	goto	l4759
  2505  0006A4                     l4767:
  2506                           
  2507                           ; BSR set to: 0
  2508                           ;main.c: 284: lcdInst(0b10000000);;
  2509  0006A4  0E80               	movlw	128
  2510  0006A6  EC22  F00F         	call	_lcdInst
  2511                           
  2512                           ;main.c: 285: printf("# OF 9V         ");
  2513  0006AA  0E33               	movlw	low STR_13
  2514  0006AC  0100               	movlb	0	; () banked
  2515  0006AE  6F80               	movwf	printf@f& (0+255),b
  2516  0006B0  0EFF               	movlw	high STR_13
  2517  0006B2  0100               	movlb	0	; () banked
  2518  0006B4  6F81               	movwf	(printf@f+1)& (0+255),b
  2519  0006B6  EC8F  F006         	call	_printf	;wreg free
  2520                           
  2521                           ;main.c: 286: lcdInst(0b11000000);;
  2522  0006BA  0EC0               	movlw	192
  2523  0006BC  EC22  F00F         	call	_lcdInst
  2524                           
  2525                           ;main.c: 287: printf("BATTERIES: %02d     ", num9V);
  2526  0006C0  0EC7               	movlw	low STR_14
  2527  0006C2  0100               	movlb	0	; () banked
  2528  0006C4  6F80               	movwf	printf@f& (0+255),b
  2529  0006C6  0EFE               	movlw	high STR_14
  2530  0006C8  0100               	movlb	0	; () banked
  2531  0006CA  6F81               	movwf	(printf@f+1)& (0+255),b
  2532  0006CC  C0BB  F082         	movff	_num9V,?_printf+2
  2533  0006D0  0100               	movlb	0	; () banked
  2534  0006D2  6B83               	clrf	(?_printf+3)& (0+255),b
  2535  0006D4  EC8F  F006         	call	_printf	;wreg free
  2536  0006D8                     l4773:
  2537  0006D8  0E06               	movlw	6
  2538  0006DA  0100               	movlb	0	; () banked
  2539  0006DC  19C7               	xorwf	_screenMode& (0+255),w,b
  2540  0006DE  A4D8               	btfss	status,2,c
  2541  0006E0  D01B               	goto	l4781
  2542  0006E2  D7E0               	goto	l4767
  2543  0006E4                     l4775:
  2544                           
  2545                           ; BSR set to: 0
  2546                           ;main.c: 290: lcdInst(0b10000000);;
  2547  0006E4  0E80               	movlw	128
  2548  0006E6  EC22  F00F         	call	_lcdInst
  2549                           
  2550                           ;main.c: 291: printf("# OF AA         ");
  2551  0006EA  0E22               	movlw	low STR_15
  2552  0006EC  0100               	movlb	0	; () banked
  2553  0006EE  6F80               	movwf	printf@f& (0+255),b
  2554  0006F0  0EFF               	movlw	high STR_15
  2555  0006F2  0100               	movlb	0	; () banked
  2556  0006F4  6F81               	movwf	(printf@f+1)& (0+255),b
  2557  0006F6  EC8F  F006         	call	_printf	;wreg free
  2558                           
  2559                           ;main.c: 292: lcdInst(0b11000000);;
  2560  0006FA  0EC0               	movlw	192
  2561  0006FC  EC22  F00F         	call	_lcdInst
  2562                           
  2563                           ;main.c: 293: printf("BATTERIES: %02d     ", numAA);
  2564  000700  0EC7               	movlw	low STR_14
  2565  000702  0100               	movlb	0	; () banked
  2566  000704  6F80               	movwf	printf@f& (0+255),b
  2567  000706  0EFE               	movlw	high STR_14
  2568  000708  0100               	movlb	0	; () banked
  2569  00070A  6F81               	movwf	(printf@f+1)& (0+255),b
  2570  00070C  C0BC  F082         	movff	_numAA,?_printf+2
  2571  000710  0100               	movlb	0	; () banked
  2572  000712  6B83               	clrf	(?_printf+3)& (0+255),b
  2573  000714  EC8F  F006         	call	_printf	;wreg free
  2574  000718                     l4781:
  2575  000718  0E07               	movlw	7
  2576  00071A  0100               	movlb	0	; () banked
  2577  00071C  19C7               	xorwf	_screenMode& (0+255),w,b
  2578  00071E  A4D8               	btfss	status,2,c
  2579  000720  D01B               	goto	l4789
  2580  000722  D7E0               	goto	l4775
  2581  000724                     l4783:
  2582                           
  2583                           ; BSR set to: 0
  2584                           ;main.c: 296: lcdInst(0b10000000);;
  2585  000724  0E80               	movlw	128
  2586  000726  EC22  F00F         	call	_lcdInst
  2587                           
  2588                           ;main.c: 297: printf("# OF DRAINED    ");
  2589  00072A  0E77               	movlw	low STR_17
  2590  00072C  0100               	movlb	0	; () banked
  2591  00072E  6F80               	movwf	printf@f& (0+255),b
  2592  000730  0EFF               	movlw	high STR_17
  2593  000732  0100               	movlb	0	; () banked
  2594  000734  6F81               	movwf	(printf@f+1)& (0+255),b
  2595  000736  EC8F  F006         	call	_printf	;wreg free
  2596                           
  2597                           ;main.c: 298: lcdInst(0b11000000);;
  2598  00073A  0EC0               	movlw	192
  2599  00073C  EC22  F00F         	call	_lcdInst
  2600                           
  2601                           ;main.c: 299: printf("BATTERIES: %02d     ", numDrain);
  2602  000740  0EC7               	movlw	low STR_14
  2603  000742  0100               	movlb	0	; () banked
  2604  000744  6F80               	movwf	printf@f& (0+255),b
  2605  000746  0EFE               	movlw	high STR_14
  2606  000748  0100               	movlb	0	; () banked
  2607  00074A  6F81               	movwf	(printf@f+1)& (0+255),b
  2608  00074C  C0BF  F082         	movff	_numDrain,?_printf+2
  2609  000750  0100               	movlb	0	; () banked
  2610  000752  6B83               	clrf	(?_printf+3)& (0+255),b
  2611  000754  EC8F  F006         	call	_printf	;wreg free
  2612  000758                     l4789:
  2613  000758  0E08               	movlw	8
  2614  00075A  0100               	movlb	0	; () banked
  2615  00075C  19C7               	xorwf	_screenMode& (0+255),w,b
  2616  00075E  A4D8               	btfss	status,2,c
  2617  000760  D066               	goto	l4811
  2618  000762  D7E0               	goto	l4783
  2619  000764                     l4791:
  2620                           
  2621                           ; BSR set to: 0
  2622                           ;main.c: 303: I2C_Master_Start();
  2623  000764  EC3D  F00F         	call	_I2C_Master_Start	;wreg free
  2624                           
  2625                           ;main.c: 304: I2C_Master_Write(0b11010000);
  2626  000768  0E00               	movlw	0
  2627  00076A  6E36               	movwf	I2C_Master_Write@d+1,c
  2628  00076C  0ED0               	movlw	208
  2629  00076E  6E35               	movwf	I2C_Master_Write@d,c
  2630  000770  EC34  F00F         	call	_I2C_Master_Write	;wreg free
  2631                           
  2632                           ;main.c: 305: I2C_Master_Write(0x00);
  2633  000774  0E00               	movlw	0
  2634  000776  6E36               	movwf	I2C_Master_Write@d+1,c
  2635  000778  0E00               	movlw	0
  2636  00077A  6E35               	movwf	I2C_Master_Write@d,c
  2637  00077C  EC34  F00F         	call	_I2C_Master_Write	;wreg free
  2638                           
  2639                           ;main.c: 306: I2C_Master_Stop();
  2640  000780  EC39  F00F         	call	_I2C_Master_Stop	;wreg free
  2641                           
  2642                           ;main.c: 308: I2C_Master_Start();
  2643  000784  EC3D  F00F         	call	_I2C_Master_Start	;wreg free
  2644                           
  2645                           ;main.c: 309: I2C_Master_Write(0b11010001);
  2646  000788  0E00               	movlw	0
  2647  00078A  6E36               	movwf	I2C_Master_Write@d+1,c
  2648  00078C  0ED1               	movlw	209
  2649  00078E  6E35               	movwf	I2C_Master_Write@d,c
  2650  000790  EC34  F00F         	call	_I2C_Master_Write	;wreg free
  2651                           
  2652                           ;main.c: 310: for(unsigned char i=0;i<0x06;i++){
  2653  000794  0E00               	movlw	0
  2654  000796  0100               	movlb	0	; () banked
  2655  000798  6FA6               	movwf	main@i_633& (0+255),b
  2656  00079A                     l4795:
  2657                           
  2658                           ; BSR set to: 0
  2659  00079A  0E05               	movlw	5
  2660  00079C  0100               	movlb	0	; () banked
  2661  00079E  65A6               	cpfsgt	main@i_633& (0+255),b
  2662  0007A0  D001               	goto	l4799
  2663  0007A2  D010               	goto	l4805
  2664  0007A4                     l4799:
  2665                           
  2666                           ; BSR set to: 0
  2667                           ;main.c: 311: time[i] = I2C_Master_Read(1);
  2668  0007A4  0100               	movlb	0	; () banked
  2669  0007A6  51A6               	movf	main@i_633& (0+255),w,b
  2670  0007A8  0D01               	mullw	1
  2671  0007AA  0EA7               	movlw	low _time
  2672  0007AC  24F3               	addwf	prodl,w,c
  2673  0007AE  6ED9               	movwf	fsr2l,c
  2674  0007B0  0E00               	movlw	high _time
  2675  0007B2  20F4               	addwfc	prodh,w,c
  2676  0007B4  6EDA               	movwf	fsr2h,c
  2677  0007B6  0E01               	movlw	1
  2678  0007B8  ECB8  F00E         	call	_I2C_Master_Read
  2679  0007BC  6EDF               	movwf	indf2,c
  2680  0007BE  0100               	movlb	0	; () banked
  2681  0007C0  2BA6               	incf	main@i_633& (0+255),f,b
  2682  0007C2  D7EB               	goto	l4795
  2683  0007C4                     l4805:
  2684                           
  2685                           ; BSR set to: 0
  2686                           ;main.c: 312: }
  2687                           ;main.c: 313: time[6] = I2C_Master_Read(0);
  2688  0007C4  0E00               	movlw	0
  2689  0007C6  ECB8  F00E         	call	_I2C_Master_Read
  2690  0007CA  0100               	movlb	0	; () banked
  2691  0007CC  6FAD               	movwf	(_time+6)& (0+255),b
  2692                           
  2693                           ;main.c: 314: I2C_Master_Stop();
  2694  0007CE  EC39  F00F         	call	_I2C_Master_Stop	;wreg free
  2695                           
  2696                           ;main.c: 315: lcdInst(0b10000000);;
  2697  0007D2  0E80               	movlw	128
  2698  0007D4  EC22  F00F         	call	_lcdInst
  2699                           
  2700                           ;main.c: 316: printf("DATE: %02x/%02x/%02x  ", time[6],time[5],time[4]);
  2701  0007D8  0E83               	movlw	low STR_19
  2702  0007DA  0100               	movlb	0	; () banked
  2703  0007DC  6F80               	movwf	printf@f& (0+255),b
  2704  0007DE  0EFE               	movlw	high STR_19
  2705  0007E0  0100               	movlb	0	; () banked
  2706  0007E2  6F81               	movwf	(printf@f+1)& (0+255),b
  2707  0007E4  C0AD  F082         	movff	_time+6,?_printf+2
  2708  0007E8  0100               	movlb	0	; () banked
  2709  0007EA  6B83               	clrf	(?_printf+3)& (0+255),b
  2710  0007EC  C0AC  F084         	movff	_time+5,?_printf+4
  2711  0007F0  0100               	movlb	0	; () banked
  2712  0007F2  6B85               	clrf	(?_printf+5)& (0+255),b
  2713  0007F4  C0AB  F086         	movff	_time+4,?_printf+6
  2714  0007F8  0100               	movlb	0	; () banked
  2715  0007FA  6B87               	clrf	(?_printf+7)& (0+255),b
  2716  0007FC  EC8F  F006         	call	_printf	;wreg free
  2717                           
  2718                           ;main.c: 317: lcdInst(0b11000000);;
  2719  000800  0EC0               	movlw	192
  2720  000802  EC22  F00F         	call	_lcdInst
  2721                           
  2722                           ;main.c: 318: printf("TIME: %02x:%02x:%02x  ", time[2],time[1],time[0]);
  2723  000806  0E9A               	movlw	low STR_20
  2724  000808  0100               	movlb	0	; () banked
  2725  00080A  6F80               	movwf	printf@f& (0+255),b
  2726  00080C  0EFE               	movlw	high STR_20
  2727  00080E  0100               	movlb	0	; () banked
  2728  000810  6F81               	movwf	(printf@f+1)& (0+255),b
  2729  000812  C0A9  F082         	movff	_time+2,?_printf+2
  2730  000816  0100               	movlb	0	; () banked
  2731  000818  6B83               	clrf	(?_printf+3)& (0+255),b
  2732  00081A  C0A8  F084         	movff	_time+1,?_printf+4
  2733  00081E  0100               	movlb	0	; () banked
  2734  000820  6B85               	clrf	(?_printf+5)& (0+255),b
  2735  000822  C0A7  F086         	movff	_time,?_printf+6
  2736  000826  0100               	movlb	0	; () banked
  2737  000828  6B87               	clrf	(?_printf+7)& (0+255),b
  2738  00082A  EC8F  F006         	call	_printf	;wreg free
  2739  00082E                     l4811:
  2740  00082E  0E09               	movlw	9
  2741  000830  0100               	movlb	0	; () banked
  2742  000832  19C7               	xorwf	_screenMode& (0+255),w,b
  2743  000834  A4D8               	btfss	status,2,c
  2744  000836  D028               	goto	l4823
  2745  000838  D795               	goto	l4791
  2746  00083A                     l4813:
  2747                           
  2748                           ; BSR set to: 0
  2749                           ;main.c: 321: lcdInst(0b10000000);;
  2750  00083A  0E80               	movlw	128
  2751  00083C  EC22  F00F         	call	_lcdInst
  2752                           
  2753                           ;main.c: 322: printf("EMERGENCY STOP  ");
  2754  000840  0EAA               	movlw	low STR_21
  2755  000842  0100               	movlb	0	; () banked
  2756  000844  6F80               	movwf	printf@f& (0+255),b
  2757  000846  0EFF               	movlw	high STR_21
  2758  000848  0100               	movlb	0	; () banked
  2759  00084A  6F81               	movwf	(printf@f+1)& (0+255),b
  2760  00084C  EC8F  F006         	call	_printf	;wreg free
  2761                           
  2762                           ;main.c: 323: lcdInst(0b11000000);;
  2763  000850  0EC0               	movlw	192
  2764  000852  EC22  F00F         	call	_lcdInst
  2765                           
  2766                           ;main.c: 324: printf("                ");
  2767  000856  0E00               	movlw	low STR_22
  2768  000858  0100               	movlb	0	; () banked
  2769  00085A  6F80               	movwf	printf@f& (0+255),b
  2770  00085C  0EFF               	movlw	high STR_22
  2771  00085E  0100               	movlb	0	; () banked
  2772  000860  6F81               	movwf	(printf@f+1)& (0+255),b
  2773  000862  EC8F  F006         	call	_printf	;wreg free
  2774                           
  2775                           ;main.c: 325: _delay((unsigned long)((2000)*(10000000/4000.0)));
  2776  000866  0E1A               	movlw	26
  2777  000868  0100               	movlb	0	; () banked
  2778  00086A  6F97               	movwf	(??_main+1)& (0+255),b
  2779  00086C  0E5E               	movlw	94
  2780  00086E  0100               	movlb	0	; () banked
  2781  000870  6F96               	movwf	??_main& (0+255),b
  2782  000872  0E6E               	movlw	110
  2783  000874                     u5497:
  2784  000874  2EE8               	decfsz	wreg,f,c
  2785  000876  D7FE               	bra	u5497
  2786  000878  2F96               	decfsz	??_main& (0+255),f,b
  2787  00087A  D7FC               	bra	u5497
  2788  00087C  2F97               	decfsz	(??_main+1)& (0+255),f,b
  2789  00087E  D7FA               	bra	u5497
  2790  000880  F000               	nop	
  2791                           
  2792                           ;main.c: 326: screenMode = 2;
  2793  000882  0E02               	movlw	2
  2794  000884  0100               	movlb	0	; () banked
  2795  000886  6FC7               	movwf	_screenMode& (0+255),b
  2796  000888                     l4823:
  2797                           
  2798                           ; BSR set to: 0
  2799  000888  0E0A               	movlw	10
  2800  00088A  0100               	movlb	0	; () banked
  2801  00088C  19C7               	xorwf	_screenMode& (0+255),w,b
  2802  00088E  A4D8               	btfss	status,2,c
  2803  000890  D453               	goto	l4543
  2804  000892  D7D3               	goto	l4813
  2805  000894                     __end_of_main:
  2806                           	opt stack 0
  2807                           tblptru	equ	0xFF8
  2808                           tblptrh	equ	0xFF7
  2809                           tblptrl	equ	0xFF6
  2810                           tablat	equ	0xFF5
  2811                           prodh	equ	0xFF4
  2812                           prodl	equ	0xFF3
  2813                           intcon	equ	0xFF2
  2814                           intcon3	equ	0xFF0
  2815                           postinc0	equ	0xFEE
  2816                           wreg	equ	0xFE8
  2817                           indf2	equ	0xFDF
  2818                           fsr2h	equ	0xFDA
  2819                           fsr2l	equ	0xFD9
  2820                           status	equ	0xFD8
  2821                           
  2822 ;; *************** function _testBatteries *****************
  2823 ;; Defined at:
  2824 ;;		line 429 in file "../main.c"
  2825 ;; Parameters:    Size  Location     Type
  2826 ;;		None
  2827 ;; Auto vars:     Size  Location     Type
  2828 ;;		None
  2829 ;; Return value:  Size  Location     Type
  2830 ;;                  1    wreg      void 
  2831 ;; Registers used:
  2832 ;;		wreg, status,2, status,0, cstack
  2833 ;; Tracked objects:
  2834 ;;		On entry : 0/0
  2835 ;;		On exit  : 0/0
  2836 ;;		Unchanged: 0/0
  2837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2838 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2839 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2840 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2841 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2842 ;;Total ram usage:        0 bytes
  2843 ;; Hardware stack levels used:    1
  2844 ;; Hardware stack levels required when called:    6
  2845 ;; This function calls:
  2846 ;;		_wait_3ms
  2847 ;; This function is called by:
  2848 ;;		_main
  2849 ;; This function uses a non-reentrant model
  2850 ;;
  2851                           
  2852                           	psect	text1
  2853  0013D6                     __ptext1:
  2854                           	opt stack 0
  2855  0013D6                     _testBatteries:
  2856                           	opt stack 24
  2857                           
  2858                           ;main.c: 449: LATEbits.LE0 = 1;;
  2859                           
  2860                           ; BSR set to: 0
  2861                           ;incstack = 0
  2862  0013D6  808D               	bsf	3981,0,c	;volatile
  2863                           
  2864                           ;main.c: 451: wait_3ms(33);
  2865  0013D8  0E00               	movlw	0
  2866  0013DA  6E35               	movwf	wait_3ms@x+1,c
  2867  0013DC  0E21               	movlw	33
  2868  0013DE  6E34               	movwf	wait_3ms@x,c
  2869  0013E0  ECFC  F00E         	call	_wait_3ms	;wreg free
  2870                           
  2871                           ;main.c: 452: if (ADRES>=706){
  2872  0013E4  0EC2               	movlw	194
  2873  0013E6  5CC3               	subwf	4035,w,c	;volatile
  2874  0013E8  0E02               	movlw	2
  2875  0013EA  58C4               	subwfb	4036,w,c	;volatile
  2876  0013EC  A0D8               	btfss	status,0,c
  2877  0013EE  D00E               	goto	l3503
  2878                           
  2879                           ;main.c: 453: LATEbits.LE0 = 0;;
  2880  0013F0  908D               	bcf	3981,0,c	;volatile
  2881                           
  2882                           ;main.c: 454: count9V++;
  2883  0013F2  0100               	movlb	0	; () banked
  2884  0013F4  2BB6               	incf	_count9V& (0+255),f,b
  2885                           
  2886                           ; BSR set to: 0
  2887                           ;main.c: 455: plat1Right = 512;
  2888  0013F6  0E02               	movlw	2
  2889  0013F8  0100               	movlb	0	; () banked
  2890  0013FA  6FB1               	movwf	(_plat1Right+1)& (0+255),b
  2891  0013FC  0E00               	movlw	0
  2892  0013FE  6FB0               	movwf	_plat1Right& (0+255),b
  2893                           
  2894                           ; BSR set to: 0
  2895                           ;main.c: 456: plat2Left = 512;
  2896  001400  0E02               	movlw	2
  2897  001402  0100               	movlb	0	; () banked
  2898  001404  6FB3               	movwf	(_plat2Left+1)& (0+255),b
  2899  001406  0E00               	movlw	0
  2900  001408  6FB2               	movwf	_plat2Left& (0+255),b
  2901                           
  2902                           ; BSR set to: 0
  2903                           ;main.c: 457: return;
  2904  00140A  0012               	return	
  2905  00140C                     l3503:
  2906                           
  2907                           ;main.c: 459: else if (ADRES>=5){
  2908  00140C  50C4               	movf	4036,w,c	;volatile
  2909  00140E  E104               	bnz	u3330
  2910  001410  0E05               	movlw	5
  2911  001412  5CC3               	subwf	4035,w,c	;volatile
  2912  001414  A0D8               	btfss	status,0,c
  2913  001416  D00E               	goto	l336
  2914  001418                     u3330:
  2915                           
  2916                           ;main.c: 460: LATEbits.LE0 = 0;;
  2917  001418  908D               	bcf	3981,0,c	;volatile
  2918                           
  2919                           ;main.c: 461: countDrain++;
  2920  00141A  0100               	movlb	0	; () banked
  2921  00141C  2BB9               	incf	_countDrain& (0+255),f,b
  2922                           
  2923                           ; BSR set to: 0
  2924                           ;main.c: 462: plat1Left = 512;
  2925  00141E  0E02               	movlw	2
  2926  001420  0100               	movlb	0	; () banked
  2927  001422  6FAF               	movwf	(_plat1Left+1)& (0+255),b
  2928  001424  0E00               	movlw	0
  2929  001426  6FAE               	movwf	_plat1Left& (0+255),b
  2930                           
  2931                           ; BSR set to: 0
  2932                           ;main.c: 463: plat2Right = 512;
  2933  001428  0E02               	movlw	2
  2934  00142A  0100               	movlb	0	; () banked
  2935  00142C  6FB5               	movwf	(_plat2Right+1)& (0+255),b
  2936  00142E  0E00               	movlw	0
  2937  001430  6FB4               	movwf	_plat2Right& (0+255),b
  2938                           
  2939                           ; BSR set to: 0
  2940                           ;main.c: 464: return;
  2941  001432  0012               	return	
  2942  001434                     l336:
  2943                           
  2944                           ;main.c: 465: }
  2945                           ;main.c: 468: LATEbits.LE0 = 0;;
  2946  001434  908D               	bcf	3981,0,c	;volatile
  2947                           
  2948                           ;main.c: 469: LATEbits.LE1 = 1;;
  2949  001436  828D               	bsf	3981,1,c	;volatile
  2950                           
  2951                           ;main.c: 470: wait_3ms(33);
  2952  001438  0E00               	movlw	0
  2953  00143A  6E35               	movwf	wait_3ms@x+1,c
  2954  00143C  0E21               	movlw	33
  2955  00143E  6E34               	movwf	wait_3ms@x,c
  2956  001440  ECFC  F00E         	call	_wait_3ms	;wreg free
  2957                           
  2958                           ;main.c: 472: if (ADRES>=706){
  2959  001444  0EC2               	movlw	194
  2960  001446  5CC3               	subwf	4035,w,c	;volatile
  2961  001448  0E02               	movlw	2
  2962  00144A  58C4               	subwfb	4036,w,c	;volatile
  2963  00144C  A0D8               	btfss	status,0,c
  2964  00144E  D00E               	goto	l3531
  2965                           
  2966                           ;main.c: 473: LATEbits.LE1 = 0;;
  2967  001450  928D               	bcf	3981,1,c	;volatile
  2968                           
  2969                           ;main.c: 474: count9V++;
  2970  001452  0100               	movlb	0	; () banked
  2971  001454  2BB6               	incf	_count9V& (0+255),f,b
  2972                           
  2973                           ; BSR set to: 0
  2974                           ;main.c: 475: plat1Right = 512;
  2975  001456  0E02               	movlw	2
  2976  001458  0100               	movlb	0	; () banked
  2977  00145A  6FB1               	movwf	(_plat1Right+1)& (0+255),b
  2978  00145C  0E00               	movlw	0
  2979  00145E  6FB0               	movwf	_plat1Right& (0+255),b
  2980                           
  2981                           ; BSR set to: 0
  2982                           ;main.c: 476: plat2Left = 512;
  2983  001460  0E02               	movlw	2
  2984  001462  0100               	movlb	0	; () banked
  2985  001464  6FB3               	movwf	(_plat2Left+1)& (0+255),b
  2986  001466  0E00               	movlw	0
  2987  001468  6FB2               	movwf	_plat2Left& (0+255),b
  2988                           
  2989                           ; BSR set to: 0
  2990                           ;main.c: 477: return;
  2991  00146A  0012               	return	
  2992  00146C                     l3531:
  2993                           
  2994                           ;main.c: 479: else if (ADRES>=5){
  2995  00146C  50C4               	movf	4036,w,c	;volatile
  2996  00146E  E104               	bnz	u3350
  2997  001470  0E05               	movlw	5
  2998  001472  5CC3               	subwf	4035,w,c	;volatile
  2999  001474  A0D8               	btfss	status,0,c
  3000  001476  D00E               	goto	l339
  3001  001478                     u3350:
  3002                           
  3003                           ;main.c: 480: LATEbits.LE1 = 0;;
  3004  001478  928D               	bcf	3981,1,c	;volatile
  3005                           
  3006                           ;main.c: 481: countDrain++;
  3007  00147A  0100               	movlb	0	; () banked
  3008  00147C  2BB9               	incf	_countDrain& (0+255),f,b
  3009                           
  3010                           ; BSR set to: 0
  3011                           ;main.c: 482: plat1Left = 512;
  3012  00147E  0E02               	movlw	2
  3013  001480  0100               	movlb	0	; () banked
  3014  001482  6FAF               	movwf	(_plat1Left+1)& (0+255),b
  3015  001484  0E00               	movlw	0
  3016  001486  6FAE               	movwf	_plat1Left& (0+255),b
  3017                           
  3018                           ; BSR set to: 0
  3019                           ;main.c: 483: plat2Right = 512;
  3020  001488  0E02               	movlw	2
  3021  00148A  0100               	movlb	0	; () banked
  3022  00148C  6FB5               	movwf	(_plat2Right+1)& (0+255),b
  3023  00148E  0E00               	movlw	0
  3024  001490  6FB4               	movwf	_plat2Right& (0+255),b
  3025                           
  3026                           ; BSR set to: 0
  3027                           ;main.c: 484: return;
  3028  001492  0012               	return	
  3029  001494                     l339:
  3030                           
  3031                           ;main.c: 485: }
  3032                           ;main.c: 488: LATEbits.LE1 = 0;;
  3033  001494  928D               	bcf	3981,1,c	;volatile
  3034                           
  3035                           ;main.c: 489: LATCbits.LC5 = 1;;
  3036  001496  8A8B               	bsf	3979,5,c	;volatile
  3037                           
  3038                           ;main.c: 490: wait_3ms(33);
  3039  001498  0E00               	movlw	0
  3040  00149A  6E35               	movwf	wait_3ms@x+1,c
  3041  00149C  0E21               	movlw	33
  3042  00149E  6E34               	movwf	wait_3ms@x,c
  3043  0014A0  ECFC  F00E         	call	_wait_3ms	;wreg free
  3044                           
  3045                           ;main.c: 492: if (ADRES>=54){
  3046  0014A4  50C4               	movf	4036,w,c	;volatile
  3047  0014A6  E104               	bnz	u3360
  3048  0014A8  0E36               	movlw	54
  3049  0014AA  5CC3               	subwf	4035,w,c	;volatile
  3050  0014AC  A0D8               	btfss	status,0,c
  3051  0014AE  D00E               	goto	l3559
  3052  0014B0                     u3360:
  3053                           
  3054                           ;main.c: 493: LATCbits.LC5 = 0;;
  3055  0014B0  9A8B               	bcf	3979,5,c	;volatile
  3056                           
  3057                           ;main.c: 494: countC++;
  3058  0014B2  0100               	movlb	0	; () banked
  3059  0014B4  2BB8               	incf	_countC& (0+255),f,b
  3060                           
  3061                           ; BSR set to: 0
  3062                           ;main.c: 495: plat1Right = 512;
  3063  0014B6  0E02               	movlw	2
  3064  0014B8  0100               	movlb	0	; () banked
  3065  0014BA  6FB1               	movwf	(_plat1Right+1)& (0+255),b
  3066  0014BC  0E00               	movlw	0
  3067  0014BE  6FB0               	movwf	_plat1Right& (0+255),b
  3068                           
  3069                           ; BSR set to: 0
  3070                           ;main.c: 496: plat2Left = 512;
  3071  0014C0  0E02               	movlw	2
  3072  0014C2  0100               	movlb	0	; () banked
  3073  0014C4  6FB3               	movwf	(_plat2Left+1)& (0+255),b
  3074  0014C6  0E00               	movlw	0
  3075  0014C8  6FB2               	movwf	_plat2Left& (0+255),b
  3076                           
  3077                           ; BSR set to: 0
  3078                           ;main.c: 497: return;
  3079  0014CA  0012               	return	
  3080  0014CC                     l3559:
  3081                           
  3082                           ;main.c: 499: else if (ADRES>=5){
  3083  0014CC  50C4               	movf	4036,w,c	;volatile
  3084  0014CE  E104               	bnz	u3370
  3085  0014D0  0E05               	movlw	5
  3086  0014D2  5CC3               	subwf	4035,w,c	;volatile
  3087  0014D4  A0D8               	btfss	status,0,c
  3088  0014D6  D00E               	goto	l342
  3089  0014D8                     u3370:
  3090                           
  3091                           ;main.c: 500: LATCbits.LC5 = 0;;
  3092  0014D8  9A8B               	bcf	3979,5,c	;volatile
  3093                           
  3094                           ;main.c: 501: countDrain++;
  3095  0014DA  0100               	movlb	0	; () banked
  3096  0014DC  2BB9               	incf	_countDrain& (0+255),f,b
  3097                           
  3098                           ; BSR set to: 0
  3099                           ;main.c: 502: plat1Left = 512;
  3100  0014DE  0E02               	movlw	2
  3101  0014E0  0100               	movlb	0	; () banked
  3102  0014E2  6FAF               	movwf	(_plat1Left+1)& (0+255),b
  3103  0014E4  0E00               	movlw	0
  3104  0014E6  6FAE               	movwf	_plat1Left& (0+255),b
  3105                           
  3106                           ; BSR set to: 0
  3107                           ;main.c: 503: plat2Right = 512;
  3108  0014E8  0E02               	movlw	2
  3109  0014EA  0100               	movlb	0	; () banked
  3110  0014EC  6FB5               	movwf	(_plat2Right+1)& (0+255),b
  3111  0014EE  0E00               	movlw	0
  3112  0014F0  6FB4               	movwf	_plat2Right& (0+255),b
  3113                           
  3114                           ; BSR set to: 0
  3115                           ;main.c: 504: return;
  3116  0014F2  0012               	return	
  3117  0014F4                     l342:
  3118                           
  3119                           ;main.c: 505: }
  3120                           ;main.c: 508: LATCbits.LC5 = 0;;
  3121  0014F4  9A8B               	bcf	3979,5,c	;volatile
  3122                           
  3123                           ;main.c: 509: LATDbits.LD0 = 1;;
  3124  0014F6  808C               	bsf	3980,0,c	;volatile
  3125                           
  3126                           ;main.c: 510: wait_3ms(33);
  3127  0014F8  0E00               	movlw	0
  3128  0014FA  6E35               	movwf	wait_3ms@x+1,c
  3129  0014FC  0E21               	movlw	33
  3130  0014FE  6E34               	movwf	wait_3ms@x,c
  3131  001500  ECFC  F00E         	call	_wait_3ms	;wreg free
  3132                           
  3133                           ;main.c: 512: if (ADRES>=54){
  3134  001504  50C4               	movf	4036,w,c	;volatile
  3135  001506  E104               	bnz	u3380
  3136  001508  0E36               	movlw	54
  3137  00150A  5CC3               	subwf	4035,w,c	;volatile
  3138  00150C  A0D8               	btfss	status,0,c
  3139  00150E  D009               	goto	l3581
  3140  001510                     u3380:
  3141                           
  3142                           ;main.c: 513: LATDbits.LD0 = 0;;
  3143  001510  908C               	bcf	3980,0,c	;volatile
  3144                           
  3145                           ;main.c: 514: countAA++;
  3146  001512  0100               	movlb	0	; () banked
  3147  001514  2BB7               	incf	_countAA& (0+255),f,b
  3148                           
  3149                           ; BSR set to: 0
  3150                           ;main.c: 515: plat1Right = 512;
  3151  001516  0E02               	movlw	2
  3152  001518  0100               	movlb	0	; () banked
  3153  00151A  6FB1               	movwf	(_plat1Right+1)& (0+255),b
  3154  00151C  0E00               	movlw	0
  3155  00151E  6FB0               	movwf	_plat1Right& (0+255),b
  3156                           
  3157                           ;main.c: 516: }
  3158  001520  D00E               	goto	l3589
  3159  001522                     l3581:
  3160                           
  3161                           ;main.c: 517: else if (ADRES>=5){
  3162  001522  50C4               	movf	4036,w,c	;volatile
  3163  001524  E104               	bnz	u3390
  3164  001526  0E05               	movlw	5
  3165  001528  5CC3               	subwf	4035,w,c	;volatile
  3166  00152A  A0D8               	btfss	status,0,c
  3167  00152C  D008               	goto	l3589
  3168  00152E                     u3390:
  3169                           
  3170                           ;main.c: 518: LATDbits.LD0 = 0;;
  3171  00152E  908C               	bcf	3980,0,c	;volatile
  3172                           
  3173                           ;main.c: 519: countDrain++;
  3174  001530  0100               	movlb	0	; () banked
  3175  001532  2BB9               	incf	_countDrain& (0+255),f,b
  3176                           
  3177                           ; BSR set to: 0
  3178                           ;main.c: 520: plat1Left = 512;
  3179  001534  0E02               	movlw	2
  3180  001536  0100               	movlb	0	; () banked
  3181  001538  6FAF               	movwf	(_plat1Left+1)& (0+255),b
  3182  00153A  0E00               	movlw	0
  3183  00153C  6FAE               	movwf	_plat1Left& (0+255),b
  3184  00153E                     l3589:
  3185                           
  3186                           ;main.c: 521: }
  3187                           ;main.c: 523: LATDbits.LD0 = 0;;
  3188  00153E  908C               	bcf	3980,0,c	;volatile
  3189                           
  3190                           ;main.c: 524: LATDbits.LD1 = 1;;
  3191  001540  828C               	bsf	3980,1,c	;volatile
  3192                           
  3193                           ;main.c: 525: wait_3ms(33);
  3194  001542  0E00               	movlw	0
  3195  001544  6E35               	movwf	wait_3ms@x+1,c
  3196  001546  0E21               	movlw	33
  3197  001548  6E34               	movwf	wait_3ms@x,c
  3198  00154A  ECFC  F00E         	call	_wait_3ms	;wreg free
  3199                           
  3200                           ;main.c: 527: if (ADRES>=54){
  3201  00154E  50C4               	movf	4036,w,c	;volatile
  3202  001550  E104               	bnz	u3400
  3203  001552  0E36               	movlw	54
  3204  001554  5CC3               	subwf	4035,w,c	;volatile
  3205  001556  A0D8               	btfss	status,0,c
  3206  001558  D009               	goto	l347
  3207  00155A                     u3400:
  3208                           
  3209                           ;main.c: 528: LATDbits.LD1 = 0;;
  3210  00155A  928C               	bcf	3980,1,c	;volatile
  3211                           
  3212                           ;main.c: 529: countAA++;
  3213  00155C  0100               	movlb	0	; () banked
  3214  00155E  2BB7               	incf	_countAA& (0+255),f,b
  3215                           
  3216                           ; BSR set to: 0
  3217                           ;main.c: 530: plat2Left = 512;
  3218  001560  0E02               	movlw	2
  3219  001562  0100               	movlb	0	; () banked
  3220  001564  6FB3               	movwf	(_plat2Left+1)& (0+255),b
  3221  001566  0E00               	movlw	0
  3222  001568  6FB2               	movwf	_plat2Left& (0+255),b
  3223                           
  3224                           ;main.c: 531: }
  3225  00156A  D008               	goto	l3607
  3226  00156C                     l347:
  3227                           
  3228                           ;main.c: 533: else{
  3229                           ;main.c: 534: LATDbits.LD1 = 0;;
  3230  00156C  928C               	bcf	3980,1,c	;volatile
  3231                           
  3232                           ;main.c: 535: countDrain++;
  3233  00156E  0100               	movlb	0	; () banked
  3234  001570  2BB9               	incf	_countDrain& (0+255),f,b
  3235                           
  3236                           ; BSR set to: 0
  3237                           ;main.c: 536: plat2Right = 512;
  3238  001572  0E02               	movlw	2
  3239  001574  0100               	movlb	0	; () banked
  3240  001576  6FB5               	movwf	(_plat2Right+1)& (0+255),b
  3241  001578  0E00               	movlw	0
  3242  00157A  6FB4               	movwf	_plat2Right& (0+255),b
  3243  00157C                     l3607:
  3244                           
  3245                           ; BSR set to: 0
  3246                           ;main.c: 537: }
  3247                           ;main.c: 539: LATDbits.LD1 = 0;;
  3248  00157C  928C               	bcf	3980,1,c	;volatile
  3249  00157E  0012               	return	
  3250  001580                     __end_of_testBatteries:
  3251                           	opt stack 0
  3252                           tblptru	equ	0xFF8
  3253                           tblptrh	equ	0xFF7
  3254                           tblptrl	equ	0xFF6
  3255                           tablat	equ	0xFF5
  3256                           prodh	equ	0xFF4
  3257                           prodl	equ	0xFF3
  3258                           intcon	equ	0xFF2
  3259                           intcon3	equ	0xFF0
  3260                           postinc0	equ	0xFEE
  3261                           wreg	equ	0xFE8
  3262                           indf2	equ	0xFDF
  3263                           fsr2h	equ	0xFDA
  3264                           fsr2l	equ	0xFD9
  3265                           status	equ	0xFD8
  3266                           
  3267 ;; *************** function _wait_3ms *****************
  3268 ;; Defined at:
  3269 ;;		line 557 in file "../main.c"
  3270 ;; Parameters:    Size  Location     Type
  3271 ;;  x               2   51[COMRAM] unsigned int 
  3272 ;; Auto vars:     Size  Location     Type
  3273 ;;		None
  3274 ;; Return value:  Size  Location     Type
  3275 ;;                  1    wreg      void 
  3276 ;; Registers used:
  3277 ;;		wreg, status,2, status,0
  3278 ;; Tracked objects:
  3279 ;;		On entry : 0/0
  3280 ;;		On exit  : 0/0
  3281 ;;		Unchanged: 0/0
  3282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3283 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3284 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3285 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3286 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3287 ;;Total ram usage:        2 bytes
  3288 ;; Hardware stack levels used:    1
  3289 ;; Hardware stack levels required when called:    5
  3290 ;; This function calls:
  3291 ;;		Nothing
  3292 ;; This function is called by:
  3293 ;;		_main
  3294 ;;		_testBatteries
  3295 ;; This function uses a non-reentrant model
  3296 ;;
  3297                           
  3298                           	psect	text2
  3299  001DF8                     __ptext2:
  3300                           	opt stack 0
  3301  001DF8                     _wait_3ms:
  3302                           	opt stack 25
  3303                           
  3304                           ;main.c: 558: count_3ms = x;
  3305                           
  3306                           ; BSR set to: 0
  3307                           ;incstack = 0
  3308  001DF8  C034  F041         	movff	wait_3ms@x,_count_3ms
  3309  001DFC  C035  F042         	movff	wait_3ms@x+1,_count_3ms+1
  3310  001E00                     l2915:
  3311  001E00  5041               	movf	_count_3ms,w,c
  3312  001E02  1042               	iorwf	_count_3ms+1,w,c
  3313  001E04  B4D8               	btfsc	status,2,c
  3314  001E06  0012               	return	
  3315  001E08  0100               	movlb	0	; () banked
  3316  001E0A  05C7               	decf	_screenMode& (0+255),w,b
  3317  001E0C  A4D8               	btfss	status,2,c
  3318  001E0E  0012               	return	
  3319  001E10  D7F7               	goto	l2915
  3320  001E12                     __end_of_wait_3ms:
  3321                           	opt stack 0
  3322                           tblptru	equ	0xFF8
  3323                           tblptrh	equ	0xFF7
  3324                           tblptrl	equ	0xFF6
  3325                           tablat	equ	0xFF5
  3326                           prodh	equ	0xFF4
  3327                           prodl	equ	0xFF3
  3328                           intcon	equ	0xFF2
  3329                           intcon3	equ	0xFF0
  3330                           postinc0	equ	0xFEE
  3331                           wreg	equ	0xFE8
  3332                           indf2	equ	0xFDF
  3333                           fsr2h	equ	0xFDA
  3334                           fsr2l	equ	0xFD9
  3335                           status	equ	0xFD8
  3336                           
  3337 ;; *************** function _stopOperation *****************
  3338 ;; Defined at:
  3339 ;;		line 379 in file "../main.c"
  3340 ;; Parameters:    Size  Location     Type
  3341 ;;		None
  3342 ;; Auto vars:     Size  Location     Type
  3343 ;;		None
  3344 ;; Return value:  Size  Location     Type
  3345 ;;                  1    wreg      void 
  3346 ;; Registers used:
  3347 ;;		wreg, status,2, status,0, cstack
  3348 ;; Tracked objects:
  3349 ;;		On entry : 0/0
  3350 ;;		On exit  : 0/0
  3351 ;;		Unchanged: 0/0
  3352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3353 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3354 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3355 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3356 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3357 ;;Total ram usage:        0 bytes
  3358 ;; Hardware stack levels used:    1
  3359 ;; Hardware stack levels required when called:    6
  3360 ;; This function calls:
  3361 ;;		___awdiv
  3362 ;;		___awmod
  3363 ;; This function is called by:
  3364 ;;		_main
  3365 ;; This function uses a non-reentrant model
  3366 ;;
  3367                           
  3368                           	psect	text3
  3369  001580                     __ptext3:
  3370                           	opt stack 0
  3371  001580                     _stopOperation:
  3372                           	opt stack 24
  3373                           
  3374                           ;main.c: 380: T0CONbits.TMR0ON = 0;
  3375                           
  3376                           ;incstack = 0
  3377  001580  9ED5               	bcf	4053,7,c	;volatile
  3378                           
  3379                           ;main.c: 381: T1CONbits.TMR1ON = 0;
  3380  001582  90CD               	bcf	4045,0,c	;volatile
  3381                           
  3382                           ;main.c: 382: TMR0 = 55770;
  3383  001584  0ED9               	movlw	217
  3384  001586  6ED7               	movwf	4055,c	;volatile
  3385  001588  0EDA               	movlw	218
  3386  00158A  6ED6               	movwf	4054,c	;volatile
  3387                           
  3388                           ;main.c: 383: TMR1 = 58035;
  3389  00158C  0EE2               	movlw	226
  3390  00158E  6ECF               	movwf	4047,c	;volatile
  3391  001590  0EB3               	movlw	179
  3392  001592  6ECE               	movwf	4046,c	;volatile
  3393                           
  3394                           ;main.c: 384: num9V = count9V;
  3395  001594  C0B6  F0BB         	movff	_count9V,_num9V
  3396                           
  3397                           ;main.c: 385: numC = countC;
  3398  001598  C0B8  F0BE         	movff	_countC,_numC
  3399                           
  3400                           ;main.c: 386: numAA = countAA;
  3401  00159C  C0B7  F0BC         	movff	_countAA,_numAA
  3402                           
  3403                           ;main.c: 387: numDrain = countDrain;
  3404  0015A0  C0B9  F0BF         	movff	_countDrain,_numDrain
  3405                           
  3406                           ;main.c: 388: numBats = count9V + countC + countAA + countDrain;
  3407  0015A4  0100               	movlb	0	; () banked
  3408  0015A6  51B6               	movf	_count9V& (0+255),w,b
  3409  0015A8  0100               	movlb	0	; () banked
  3410  0015AA  25B8               	addwf	_countC& (0+255),w,b
  3411  0015AC  0100               	movlb	0	; () banked
  3412  0015AE  25B7               	addwf	_countAA& (0+255),w,b
  3413  0015B0  0100               	movlb	0	; () banked
  3414  0015B2  25B9               	addwf	_countDrain& (0+255),w,b
  3415  0015B4  0100               	movlb	0	; () banked
  3416  0015B6  6FBD               	movwf	_numBats& (0+255),b
  3417                           
  3418                           ; BSR set to: 0
  3419                           ;main.c: 389: count9V = 0;
  3420  0015B8  0E00               	movlw	0
  3421  0015BA  0100               	movlb	0	; () banked
  3422  0015BC  6FB6               	movwf	_count9V& (0+255),b
  3423                           
  3424                           ; BSR set to: 0
  3425                           ;main.c: 390: countC = 0;
  3426  0015BE  0E00               	movlw	0
  3427  0015C0  0100               	movlb	0	; () banked
  3428  0015C2  6FB8               	movwf	_countC& (0+255),b
  3429                           
  3430                           ; BSR set to: 0
  3431                           ;main.c: 391: countAA = 0;
  3432  0015C4  0E00               	movlw	0
  3433  0015C6  0100               	movlb	0	; () banked
  3434  0015C8  6FB7               	movwf	_countAA& (0+255),b
  3435                           
  3436                           ; BSR set to: 0
  3437                           ;main.c: 392: countDrain = 0;
  3438  0015CA  0E00               	movlw	0
  3439  0015CC  0100               	movlb	0	; () banked
  3440  0015CE  6FB9               	movwf	_countDrain& (0+255),b
  3441                           
  3442                           ; BSR set to: 0
  3443                           ;main.c: 393: min = opTimer / 60;
  3444  0015D0  C046  F034         	movff	_opTimer,___awdiv@dividend
  3445  0015D4  6A35               	clrf	___awdiv@dividend+1,c
  3446  0015D6  0E00               	movlw	0
  3447  0015D8  6E37               	movwf	___awdiv@divisor+1,c
  3448  0015DA  0E3C               	movlw	60
  3449  0015DC  6E36               	movwf	___awdiv@divisor,c
  3450  0015DE  EC21  F00C         	call	___awdiv	;wreg free
  3451  0015E2  5034               	movf	?___awdiv,w,c
  3452  0015E4  0100               	movlb	0	; () banked
  3453  0015E6  6FBA               	movwf	_min& (0+255),b
  3454                           
  3455                           ; BSR set to: 0
  3456                           ;main.c: 394: sec = opTimer % 60;
  3457  0015E8  C046  F034         	movff	_opTimer,___awmod@dividend
  3458  0015EC  6A35               	clrf	___awmod@dividend+1,c
  3459  0015EE  0E00               	movlw	0
  3460  0015F0  6E37               	movwf	___awmod@divisor+1,c
  3461  0015F2  0E3C               	movlw	60
  3462  0015F4  6E36               	movwf	___awmod@divisor,c
  3463  0015F6  ECE6  F00C         	call	___awmod	;wreg free
  3464  0015FA  5034               	movf	?___awmod,w,c
  3465  0015FC  0100               	movlb	0	; () banked
  3466  0015FE  6FC0               	movwf	_sec& (0+255),b
  3467                           
  3468                           ; BSR set to: 0
  3469                           ;main.c: 395: opTimer = 0;
  3470  001600  0E00               	movlw	0
  3471  001602  6E46               	movwf	_opTimer,c
  3472                           
  3473                           ; BSR set to: 0
  3474                           ;main.c: 396: doneTimer = 0;
  3475  001604  0E00               	movlw	0
  3476  001606  6E45               	movwf	_doneTimer,c
  3477                           
  3478                           ; BSR set to: 0
  3479                           ;main.c: 397: stepGear = 0;
  3480  001608  0E00               	movlw	0
  3481  00160A  0100               	movlb	0	; () banked
  3482  00160C  6FC2               	movwf	_stepGear& (0+255),b
  3483                           
  3484                           ; BSR set to: 0
  3485                           ;main.c: 398: stepAmount = 0;
  3486  00160E  0E00               	movlw	0
  3487  001610  6E44               	movwf	_stepAmount+1,c
  3488  001612  0E00               	movlw	0
  3489  001614  6E43               	movwf	_stepAmount,c
  3490                           
  3491                           ; BSR set to: 0
  3492                           ;main.c: 399: sorting = 0;
  3493  001616  0E00               	movlw	0
  3494  001618  6E48               	movwf	_sorting,c
  3495                           
  3496                           ; BSR set to: 0
  3497                           ;main.c: 400: plat1Left = 0;
  3498  00161A  0E00               	movlw	0
  3499  00161C  0100               	movlb	0	; () banked
  3500  00161E  6FAF               	movwf	(_plat1Left+1)& (0+255),b
  3501  001620  0E00               	movlw	0
  3502  001622  6FAE               	movwf	_plat1Left& (0+255),b
  3503                           
  3504                           ; BSR set to: 0
  3505                           ;main.c: 401: plat1Right = 0;
  3506  001624  0E00               	movlw	0
  3507  001626  0100               	movlb	0	; () banked
  3508  001628  6FB1               	movwf	(_plat1Right+1)& (0+255),b
  3509  00162A  0E00               	movlw	0
  3510  00162C  6FB0               	movwf	_plat1Right& (0+255),b
  3511                           
  3512                           ; BSR set to: 0
  3513                           ;main.c: 402: plat2Left = 0;
  3514  00162E  0E00               	movlw	0
  3515  001630  0100               	movlb	0	; () banked
  3516  001632  6FB3               	movwf	(_plat2Left+1)& (0+255),b
  3517  001634  0E00               	movlw	0
  3518  001636  6FB2               	movwf	_plat2Left& (0+255),b
  3519                           
  3520                           ; BSR set to: 0
  3521                           ;main.c: 403: plat2Right = 0;
  3522  001638  0E00               	movlw	0
  3523  00163A  0100               	movlb	0	; () banked
  3524  00163C  6FB5               	movwf	(_plat2Right+1)& (0+255),b
  3525  00163E  0E00               	movlw	0
  3526  001640  6FB4               	movwf	_plat2Right& (0+255),b
  3527                           
  3528                           ; BSR set to: 0
  3529                           ;main.c: 404: turn2BackLeft = 0;
  3530  001642  0E00               	movlw	0
  3531  001644  0100               	movlb	0	; () banked
  3532  001646  6FC5               	movwf	_turn2BackLeft& (0+255),b
  3533                           
  3534                           ; BSR set to: 0
  3535                           ;main.c: 405: turn1BackLeft = 0;
  3536  001648  0E00               	movlw	0
  3537  00164A  0100               	movlb	0	; () banked
  3538  00164C  6FC3               	movwf	_turn1BackLeft& (0+255),b
  3539                           
  3540                           ; BSR set to: 0
  3541                           ;main.c: 406: turn2BackRight = 0;
  3542  00164E  0E00               	movlw	0
  3543  001650  0100               	movlb	0	; () banked
  3544  001652  6FC6               	movwf	_turn2BackRight& (0+255),b
  3545                           
  3546                           ; BSR set to: 0
  3547                           ;main.c: 407: turn1BackRight = 0;
  3548  001654  0E00               	movlw	0
  3549  001656  0100               	movlb	0	; () banked
  3550  001658  6FC4               	movwf	_turn1BackRight& (0+255),b
  3551                           
  3552                           ; BSR set to: 0
  3553                           ;main.c: 408: count_3ms = 0;
  3554  00165A  0E00               	movlw	0
  3555  00165C  6E42               	movwf	_count_3ms+1,c
  3556  00165E  0E00               	movlw	0
  3557  001660  6E41               	movwf	_count_3ms,c
  3558                           
  3559                           ; BSR set to: 0
  3560                           ;main.c: 409: solOnTimer = 0;
  3561  001662  0E00               	movlw	0
  3562  001664  6E47               	movwf	_solOnTimer,c
  3563                           
  3564                           ; BSR set to: 0
  3565                           ;main.c: 410: LATEbits.LE0 = 0;;
  3566  001666  908D               	bcf	3981,0,c	;volatile
  3567                           
  3568                           ; BSR set to: 0
  3569                           ;main.c: 411: LATEbits.LE1 = 0;;
  3570  001668  928D               	bcf	3981,1,c	;volatile
  3571                           
  3572                           ; BSR set to: 0
  3573                           ;main.c: 412: LATCbits.LC5 = 0;;
  3574  00166A  9A8B               	bcf	3979,5,c	;volatile
  3575                           
  3576                           ; BSR set to: 0
  3577                           ;main.c: 413: LATDbits.LD0 = 0;;
  3578  00166C  908C               	bcf	3980,0,c	;volatile
  3579                           
  3580                           ; BSR set to: 0
  3581                           ;main.c: 414: LATDbits.LD1 = 0;;
  3582  00166E  928C               	bcf	3980,1,c	;volatile
  3583                           
  3584                           ; BSR set to: 0
  3585                           ;main.c: 415: LATAbits.LA2 = 0;;
  3586  001670  9489               	bcf	3977,2,c	;volatile
  3587                           
  3588                           ; BSR set to: 0
  3589                           ;main.c: 416: LATAbits.LA3 = 0;;
  3590  001672  9689               	bcf	3977,3,c	;volatile
  3591                           
  3592                           ; BSR set to: 0
  3593                           ;main.c: 417: LATAbits.LA4 = 0;;
  3594  001674  9889               	bcf	3977,4,c	;volatile
  3595                           
  3596                           ; BSR set to: 0
  3597                           ;main.c: 418: LATAbits.LA5 = 0;;
  3598  001676  9A89               	bcf	3977,5,c	;volatile
  3599                           
  3600                           ; BSR set to: 0
  3601                           ;main.c: 419: LATBbits.LB0 = 0;;
  3602  001678  908A               	bcf	3978,0,c	;volatile
  3603                           
  3604                           ; BSR set to: 0
  3605                           ;main.c: 420: LATBbits.LB2 = 0;;
  3606  00167A  948A               	bcf	3978,2,c	;volatile
  3607                           
  3608                           ; BSR set to: 0
  3609                           ;main.c: 421: LATCbits.LC6 = 0;;
  3610  00167C  9C8B               	bcf	3979,6,c	;volatile
  3611                           
  3612                           ; BSR set to: 0
  3613                           ;main.c: 422: LATEbits.LE2 = 0;;
  3614  00167E  948D               	bcf	3981,2,c	;volatile
  3615                           
  3616                           ; BSR set to: 0
  3617                           ;main.c: 423: LATCbits.LC1= 0;;
  3618  001680  928B               	bcf	3979,1,c	;volatile
  3619                           
  3620                           ; BSR set to: 0
  3621                           ;main.c: 424: LATCbits.LC7 = 0;;
  3622  001682  9E8B               	bcf	3979,7,c	;volatile
  3623                           
  3624                           ; BSR set to: 0
  3625                           ;main.c: 425: LATCbits.LC2 = 0;;
  3626  001684  948B               	bcf	3979,2,c	;volatile
  3627                           
  3628                           ; BSR set to: 0
  3629                           ;main.c: 426: LATCbits.LC0 = 0;;
  3630  001686  908B               	bcf	3979,0,c	;volatile
  3631                           
  3632                           ; BSR set to: 0
  3633  001688  0012               	return		;funcret
  3634  00168A                     __end_of_stopOperation:
  3635                           	opt stack 0
  3636                           tblptru	equ	0xFF8
  3637                           tblptrh	equ	0xFF7
  3638                           tblptrl	equ	0xFF6
  3639                           tablat	equ	0xFF5
  3640                           prodh	equ	0xFF4
  3641                           prodl	equ	0xFF3
  3642                           intcon	equ	0xFF2
  3643                           intcon3	equ	0xFF0
  3644                           postinc0	equ	0xFEE
  3645                           wreg	equ	0xFE8
  3646                           indf2	equ	0xFDF
  3647                           fsr2h	equ	0xFDA
  3648                           fsr2l	equ	0xFD9
  3649                           status	equ	0xFD8
  3650                           
  3651 ;; *************** function ___awmod *****************
  3652 ;; Defined at:
  3653 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  3654 ;; Parameters:    Size  Location     Type
  3655 ;;  dividend        2   51[COMRAM] int 
  3656 ;;  divisor         2   53[COMRAM] int 
  3657 ;; Auto vars:     Size  Location     Type
  3658 ;;  sign            1   56[COMRAM] unsigned char 
  3659 ;;  counter         1   55[COMRAM] unsigned char 
  3660 ;; Return value:  Size  Location     Type
  3661 ;;                  2   51[COMRAM] int 
  3662 ;; Registers used:
  3663 ;;		wreg, status,2, status,0
  3664 ;; Tracked objects:
  3665 ;;		On entry : 0/0
  3666 ;;		On exit  : 0/0
  3667 ;;		Unchanged: 0/0
  3668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3669 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3670 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3671 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3672 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3673 ;;Total ram usage:        6 bytes
  3674 ;; Hardware stack levels used:    1
  3675 ;; Hardware stack levels required when called:    5
  3676 ;; This function calls:
  3677 ;;		Nothing
  3678 ;; This function is called by:
  3679 ;;		_stopOperation
  3680 ;; This function uses a non-reentrant model
  3681 ;;
  3682                           
  3683                           	psect	text4
  3684  0019CC                     __ptext4:
  3685                           	opt stack 0
  3686  0019CC                     ___awmod:
  3687                           	opt stack 24
  3688                           
  3689                           ; BSR set to: 0
  3690                           ;incstack = 0
  3691  0019CC  0E00               	movlw	0
  3692  0019CE  6E39               	movwf	___awmod@sign,c
  3693  0019D0  AE35               	btfss	___awmod@dividend+1,7,c
  3694  0019D2  D006               	goto	l2989
  3695  0019D4  6C34               	negf	___awmod@dividend,c
  3696  0019D6  1E35               	comf	___awmod@dividend+1,f,c
  3697  0019D8  B0D8               	btfsc	status,0,c
  3698  0019DA  2A35               	incf	___awmod@dividend+1,f,c
  3699  0019DC  0E01               	movlw	1
  3700  0019DE  6E39               	movwf	___awmod@sign,c
  3701  0019E0                     l2989:
  3702  0019E0  AE37               	btfss	___awmod@divisor+1,7,c
  3703  0019E2  D004               	goto	l2993
  3704  0019E4  6C36               	negf	___awmod@divisor,c
  3705  0019E6  1E37               	comf	___awmod@divisor+1,f,c
  3706  0019E8  B0D8               	btfsc	status,0,c
  3707  0019EA  2A37               	incf	___awmod@divisor+1,f,c
  3708  0019EC                     l2993:
  3709  0019EC  5036               	movf	___awmod@divisor,w,c
  3710  0019EE  1037               	iorwf	___awmod@divisor+1,w,c
  3711  0019F0  B4D8               	btfsc	status,2,c
  3712  0019F2  D018               	goto	l3009
  3713  0019F4  0E01               	movlw	1
  3714  0019F6  6E38               	movwf	___awmod@counter,c
  3715  0019F8  D004               	goto	l2999
  3716  0019FA                     l2997:
  3717  0019FA  90D8               	bcf	status,0,c
  3718  0019FC  3636               	rlcf	___awmod@divisor,f,c
  3719  0019FE  3637               	rlcf	___awmod@divisor+1,f,c
  3720  001A00  2A38               	incf	___awmod@counter,f,c
  3721  001A02                     l2999:
  3722  001A02  AE37               	btfss	___awmod@divisor+1,7,c
  3723  001A04  D7FA               	goto	l2997
  3724  001A06                     l3001:
  3725  001A06  5036               	movf	___awmod@divisor,w,c
  3726  001A08  5C34               	subwf	___awmod@dividend,w,c
  3727  001A0A  5037               	movf	___awmod@divisor+1,w,c
  3728  001A0C  5835               	subwfb	___awmod@dividend+1,w,c
  3729  001A0E  A0D8               	btfss	status,0,c
  3730  001A10  D004               	goto	l3005
  3731  001A12  5036               	movf	___awmod@divisor,w,c
  3732  001A14  5E34               	subwf	___awmod@dividend,f,c
  3733  001A16  5037               	movf	___awmod@divisor+1,w,c
  3734  001A18  5A35               	subwfb	___awmod@dividend+1,f,c
  3735  001A1A                     l3005:
  3736  001A1A  90D8               	bcf	status,0,c
  3737  001A1C  3237               	rrcf	___awmod@divisor+1,f,c
  3738  001A1E  3236               	rrcf	___awmod@divisor,f,c
  3739  001A20  2E38               	decfsz	___awmod@counter,f,c
  3740  001A22  D7F1               	goto	l3001
  3741  001A24                     l3009:
  3742  001A24  5039               	movf	___awmod@sign,w,c
  3743  001A26  B4D8               	btfsc	status,2,c
  3744  001A28  D004               	goto	l3013
  3745  001A2A  6C34               	negf	___awmod@dividend,c
  3746  001A2C  1E35               	comf	___awmod@dividend+1,f,c
  3747  001A2E  B0D8               	btfsc	status,0,c
  3748  001A30  2A35               	incf	___awmod@dividend+1,f,c
  3749  001A32                     l3013:
  3750  001A32  C034  F034         	movff	___awmod@dividend,?___awmod
  3751  001A36  C035  F035         	movff	___awmod@dividend+1,?___awmod+1
  3752  001A3A  0012               	return	
  3753  001A3C                     __end_of___awmod:
  3754                           	opt stack 0
  3755                           tblptru	equ	0xFF8
  3756                           tblptrh	equ	0xFF7
  3757                           tblptrl	equ	0xFF6
  3758                           tablat	equ	0xFF5
  3759                           prodh	equ	0xFF4
  3760                           prodl	equ	0xFF3
  3761                           intcon	equ	0xFF2
  3762                           intcon3	equ	0xFF0
  3763                           postinc0	equ	0xFEE
  3764                           wreg	equ	0xFE8
  3765                           indf2	equ	0xFDF
  3766                           fsr2h	equ	0xFDA
  3767                           fsr2l	equ	0xFD9
  3768                           status	equ	0xFD8
  3769                           
  3770 ;; *************** function ___awdiv *****************
  3771 ;; Defined at:
  3772 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  3773 ;; Parameters:    Size  Location     Type
  3774 ;;  dividend        2   51[COMRAM] int 
  3775 ;;  divisor         2   53[COMRAM] int 
  3776 ;; Auto vars:     Size  Location     Type
  3777 ;;  quotient        2   57[COMRAM] int 
  3778 ;;  sign            1   56[COMRAM] unsigned char 
  3779 ;;  counter         1   55[COMRAM] unsigned char 
  3780 ;; Return value:  Size  Location     Type
  3781 ;;                  2   51[COMRAM] int 
  3782 ;; Registers used:
  3783 ;;		wreg, status,2, status,0
  3784 ;; Tracked objects:
  3785 ;;		On entry : 0/0
  3786 ;;		On exit  : 0/0
  3787 ;;		Unchanged: 0/0
  3788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3789 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3790 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3792 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3793 ;;Total ram usage:        8 bytes
  3794 ;; Hardware stack levels used:    1
  3795 ;; Hardware stack levels required when called:    5
  3796 ;; This function calls:
  3797 ;;		Nothing
  3798 ;; This function is called by:
  3799 ;;		_stopOperation
  3800 ;; This function uses a non-reentrant model
  3801 ;;
  3802                           
  3803                           	psect	text5
  3804  001842                     __ptext5:
  3805                           	opt stack 0
  3806  001842                     ___awdiv:
  3807                           	opt stack 24
  3808                           
  3809                           ;incstack = 0
  3810  001842  0E00               	movlw	0
  3811  001844  6E39               	movwf	___awdiv@sign,c
  3812  001846  AE37               	btfss	___awdiv@divisor+1,7,c
  3813  001848  D006               	goto	l2945
  3814  00184A  6C36               	negf	___awdiv@divisor,c
  3815  00184C  1E37               	comf	___awdiv@divisor+1,f,c
  3816  00184E  B0D8               	btfsc	status,0,c
  3817  001850  2A37               	incf	___awdiv@divisor+1,f,c
  3818  001852  0E01               	movlw	1
  3819  001854  6E39               	movwf	___awdiv@sign,c
  3820  001856                     l2945:
  3821  001856  AE35               	btfss	___awdiv@dividend+1,7,c
  3822  001858  D006               	goto	l2951
  3823  00185A  6C34               	negf	___awdiv@dividend,c
  3824  00185C  1E35               	comf	___awdiv@dividend+1,f,c
  3825  00185E  B0D8               	btfsc	status,0,c
  3826  001860  2A35               	incf	___awdiv@dividend+1,f,c
  3827  001862  0E01               	movlw	1
  3828  001864  1A39               	xorwf	___awdiv@sign,f,c
  3829  001866                     l2951:
  3830  001866  0E00               	movlw	0
  3831  001868  6E3B               	movwf	___awdiv@quotient+1,c
  3832  00186A  0E00               	movlw	0
  3833  00186C  6E3A               	movwf	___awdiv@quotient,c
  3834  00186E  5036               	movf	___awdiv@divisor,w,c
  3835  001870  1037               	iorwf	___awdiv@divisor+1,w,c
  3836  001872  B4D8               	btfsc	status,2,c
  3837  001874  D01C               	goto	l2973
  3838  001876  0E01               	movlw	1
  3839  001878  6E38               	movwf	___awdiv@counter,c
  3840  00187A  D004               	goto	l2959
  3841  00187C                     l2957:
  3842  00187C  90D8               	bcf	status,0,c
  3843  00187E  3636               	rlcf	___awdiv@divisor,f,c
  3844  001880  3637               	rlcf	___awdiv@divisor+1,f,c
  3845  001882  2A38               	incf	___awdiv@counter,f,c
  3846  001884                     l2959:
  3847  001884  AE37               	btfss	___awdiv@divisor+1,7,c
  3848  001886  D7FA               	goto	l2957
  3849  001888                     l2961:
  3850  001888  90D8               	bcf	status,0,c
  3851  00188A  363A               	rlcf	___awdiv@quotient,f,c
  3852  00188C  363B               	rlcf	___awdiv@quotient+1,f,c
  3853  00188E  5036               	movf	___awdiv@divisor,w,c
  3854  001890  5C34               	subwf	___awdiv@dividend,w,c
  3855  001892  5037               	movf	___awdiv@divisor+1,w,c
  3856  001894  5835               	subwfb	___awdiv@dividend+1,w,c
  3857  001896  A0D8               	btfss	status,0,c
  3858  001898  D005               	goto	l2969
  3859  00189A  5036               	movf	___awdiv@divisor,w,c
  3860  00189C  5E34               	subwf	___awdiv@dividend,f,c
  3861  00189E  5037               	movf	___awdiv@divisor+1,w,c
  3862  0018A0  5A35               	subwfb	___awdiv@dividend+1,f,c
  3863  0018A2  803A               	bsf	___awdiv@quotient,0,c
  3864  0018A4                     l2969:
  3865  0018A4  90D8               	bcf	status,0,c
  3866  0018A6  3237               	rrcf	___awdiv@divisor+1,f,c
  3867  0018A8  3236               	rrcf	___awdiv@divisor,f,c
  3868  0018AA  2E38               	decfsz	___awdiv@counter,f,c
  3869  0018AC  D7ED               	goto	l2961
  3870  0018AE                     l2973:
  3871  0018AE  5039               	movf	___awdiv@sign,w,c
  3872  0018B0  B4D8               	btfsc	status,2,c
  3873  0018B2  D004               	goto	l2977
  3874  0018B4  6C3A               	negf	___awdiv@quotient,c
  3875  0018B6  1E3B               	comf	___awdiv@quotient+1,f,c
  3876  0018B8  B0D8               	btfsc	status,0,c
  3877  0018BA  2A3B               	incf	___awdiv@quotient+1,f,c
  3878  0018BC                     l2977:
  3879  0018BC  C03A  F034         	movff	___awdiv@quotient,?___awdiv
  3880  0018C0  C03B  F035         	movff	___awdiv@quotient+1,?___awdiv+1
  3881  0018C4  0012               	return	
  3882  0018C6                     __end_of___awdiv:
  3883                           	opt stack 0
  3884                           tblptru	equ	0xFF8
  3885                           tblptrh	equ	0xFF7
  3886                           tblptrl	equ	0xFF6
  3887                           tablat	equ	0xFF5
  3888                           prodh	equ	0xFF4
  3889                           prodl	equ	0xFF3
  3890                           intcon	equ	0xFF2
  3891                           intcon3	equ	0xFF0
  3892                           postinc0	equ	0xFEE
  3893                           wreg	equ	0xFE8
  3894                           indf2	equ	0xFDF
  3895                           fsr2h	equ	0xFDA
  3896                           fsr2l	equ	0xFD9
  3897                           status	equ	0xFD8
  3898                           
  3899 ;; *************** function _readADC *****************
  3900 ;; Defined at:
  3901 ;;		line 371 in file "../main.c"
  3902 ;; Parameters:    Size  Location     Type
  3903 ;;  channel         1    wreg     unsigned char 
  3904 ;; Auto vars:     Size  Location     Type
  3905 ;;  channel         1   51[COMRAM] unsigned char 
  3906 ;; Return value:  Size  Location     Type
  3907 ;;                  1    wreg      void 
  3908 ;; Registers used:
  3909 ;;		wreg, status,2, status,0
  3910 ;; Tracked objects:
  3911 ;;		On entry : 0/0
  3912 ;;		On exit  : 0/0
  3913 ;;		Unchanged: 0/0
  3914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3915 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3916 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3917 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3918 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3919 ;;Total ram usage:        1 bytes
  3920 ;; Hardware stack levels used:    1
  3921 ;; Hardware stack levels required when called:    5
  3922 ;; This function calls:
  3923 ;;		Nothing
  3924 ;; This function is called by:
  3925 ;;		_main
  3926 ;; This function uses a non-reentrant model
  3927 ;;
  3928                           
  3929                           	psect	text6
  3930  001E12                     __ptext6:
  3931                           	opt stack 0
  3932  001E12                     _readADC:
  3933                           	opt stack 25
  3934                           
  3935                           ;incstack = 0
  3936                           ;readADC@channel stored from wreg
  3937  001E12  6E34               	movwf	readADC@channel,c
  3938                           
  3939                           ;main.c: 373: ADCON0 = channel <<2;
  3940  001E14  4434               	rlncf	readADC@channel,w,c
  3941  001E16  46E8               	rlncf	wreg,f,c
  3942  001E18  0BFC               	andlw	252
  3943  001E1A  6EC2               	movwf	4034,c	;volatile
  3944                           
  3945                           ;main.c: 374: ADCON0bits.ADON = 1;
  3946  001E1C  80C2               	bsf	4034,0,c	;volatile
  3947                           
  3948                           ;main.c: 375: ADCON0bits.GO = 1;
  3949  001E1E  82C2               	bsf	4034,1,c	;volatile
  3950  001E20                     l325:
  3951  001E20  A2C2               	btfss	4034,1,c	;volatile
  3952  001E22  0012               	return	
  3953  001E24  D7FD               	goto	l325
  3954  001E26                     __end_of_readADC:
  3955                           	opt stack 0
  3956                           tblptru	equ	0xFF8
  3957                           tblptrh	equ	0xFF7
  3958                           tblptrl	equ	0xFF6
  3959                           tablat	equ	0xFF5
  3960                           prodh	equ	0xFF4
  3961                           prodl	equ	0xFF3
  3962                           intcon	equ	0xFF2
  3963                           intcon3	equ	0xFF0
  3964                           postinc0	equ	0xFEE
  3965                           wreg	equ	0xFE8
  3966                           indf2	equ	0xFDF
  3967                           fsr2h	equ	0xFDA
  3968                           fsr2l	equ	0xFD9
  3969                           status	equ	0xFD8
  3970                           
  3971 ;; *************** function _printf *****************
  3972 ;; Defined at:
  3973 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  3974 ;; Parameters:    Size  Location     Type
  3975 ;;  f               2    0[BANK0 ] PTR const unsigned char 
  3976 ;;		 -> STR_24(22), STR_23(17), STR_22(17), STR_21(17), 
  3977 ;;		 -> STR_20(23), STR_19(23), STR_18(21), STR_17(17), 
  3978 ;;		 -> STR_16(21), STR_15(17), STR_14(21), STR_13(17), 
  3979 ;;		 -> STR_12(19), STR_11(17), STR_10(19), STR_9(17), 
  3980 ;;		 -> STR_8(25), STR_7(17), STR_6(17), STR_5(17), 
  3981 ;;		 -> STR_4(17), STR_3(17), STR_2(17), STR_1(17), 
  3982 ;; Auto vars:     Size  Location     Type
  3983 ;;  idx             1   12[BANK0 ] unsigned char 
  3984 ;;  tmpval          4    0        struct .
  3985 ;;  cp              3    0        PTR const unsigned char 
  3986 ;;  width           2   19[BANK0 ] int 
  3987 ;;  val             2   16[BANK0 ] unsigned int 
  3988 ;;  ap              2   13[BANK0 ] PTR void [1]
  3989 ;;		 -> ?i2_printf(2), ?_printf(2), 
  3990 ;;  len             2    0        unsigned int 
  3991 ;;  c               1   21[BANK0 ] char 
  3992 ;;  flag            1   18[BANK0 ] unsigned char 
  3993 ;;  prec            1   15[BANK0 ] char 
  3994 ;; Return value:  Size  Location     Type
  3995 ;;                  2    0[BANK0 ] int 
  3996 ;; Registers used:
  3997 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3998 ;; Tracked objects:
  3999 ;;		On entry : 0/0
  4000 ;;		On exit  : 0/0
  4001 ;;		Unchanged: 0/0
  4002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4003 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4004 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4005 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4006 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4007 ;;Total ram usage:       22 bytes
  4008 ;; Hardware stack levels used:    1
  4009 ;; Hardware stack levels required when called:    7
  4010 ;; This function calls:
  4011 ;;		___lwdiv
  4012 ;;		___lwmod
  4013 ;;		___wmul
  4014 ;;		_isdigit
  4015 ;;		_putch
  4016 ;; This function is called by:
  4017 ;;		_main
  4018 ;; This function uses a non-reentrant model
  4019 ;;
  4020                           
  4021                           	psect	text7
  4022  000D1E                     __ptext7:
  4023                           	opt stack 0
  4024  000D1E                     _printf:
  4025                           	opt stack 23
  4026                           
  4027                           ;doprnt.c: 466: va_list ap;
  4028                           ;doprnt.c: 499: signed char c;
  4029                           ;doprnt.c: 501: int width;
  4030                           ;doprnt.c: 506: signed char prec;
  4031                           ;doprnt.c: 508: unsigned char flag;
  4032                           ;doprnt.c: 523: union {
  4033                           ;doprnt.c: 524: unsigned long vd;
  4034                           ;doprnt.c: 525: double integ;
  4035                           ;doprnt.c: 526: } tmpval;
  4036                           ;doprnt.c: 528: unsigned int val;
  4037                           ;doprnt.c: 529: unsigned len;
  4038                           ;doprnt.c: 530: const char * cp;
  4039                           ;doprnt.c: 533: *ap = __va_start();
  4040                           
  4041                           ;incstack = 0
  4042  000D1E  0E82               	movlw	low (?_printf+2)
  4043  000D20  0100               	movlb	0	; () banked
  4044  000D22  6F8D               	movwf	printf@ap& (0+255),b
  4045  000D24  0E00               	movlw	high (?_printf+2)
  4046  000D26  0100               	movlb	0	; () banked
  4047  000D28  6F8E               	movwf	(printf@ap+1)& (0+255),b
  4048                           
  4049                           ;doprnt.c: 536: while(c = *f++) {
  4050  000D2A  D1C0               	goto	l4479
  4051  000D2C                     l4353:
  4052                           
  4053                           ; BSR set to: 0
  4054                           ;doprnt.c: 538: if(c != '%')
  4055  000D2C  0E25               	movlw	37
  4056  000D2E  0100               	movlb	0	; () banked
  4057  000D30  1995               	xorwf	printf@c& (0+255),w,b
  4058  000D32  B4D8               	btfsc	status,2,c
  4059  000D34  D005               	goto	l4357
  4060                           
  4061                           ; BSR set to: 0
  4062                           ;doprnt.c: 540: {
  4063                           ;doprnt.c: 541: (putch(c) );
  4064  000D36  0100               	movlb	0	; () banked
  4065  000D38  5195               	movf	printf@c& (0+255),w,b
  4066  000D3A  EC1C  F00F         	call	_putch
  4067                           
  4068                           ;doprnt.c: 542: continue;
  4069  000D3E  D1B6               	goto	l4479
  4070  000D40                     l4357:
  4071                           
  4072                           ;doprnt.c: 543: }
  4073                           ;doprnt.c: 546: width = 0;
  4074  000D40  0E00               	movlw	0
  4075  000D42  0100               	movlb	0	; () banked
  4076  000D44  6F94               	movwf	(printf@width+1)& (0+255),b
  4077  000D46  0E00               	movlw	0
  4078  000D48  6F93               	movwf	printf@width& (0+255),b
  4079                           
  4080                           ;doprnt.c: 548: flag = 0;
  4081  000D4A  0E00               	movlw	0
  4082  000D4C  0100               	movlb	0	; () banked
  4083  000D4E  6F92               	movwf	printf@flag& (0+255),b
  4084                           
  4085                           ; BSR set to: 0
  4086                           ;doprnt.c: 551: switch(*f) {
  4087                           
  4088                           ;doprnt.c: 550: for(;;) {
  4089  000D50  D005               	goto	l4363
  4090  000D52                     l4359:
  4091                           
  4092                           ;doprnt.c: 580: flag |= 0x04;
  4093  000D52  0100               	movlb	0	; () banked
  4094  000D54  8592               	bsf	printf@flag& (0+255),2,b
  4095                           
  4096                           ;doprnt.c: 581: f++;
  4097  000D56  0100               	movlb	0	; () banked
  4098  000D58  4B80               	infsnz	printf@f& (0+255),f,b
  4099  000D5A  2B81               	incf	(printf@f+1)& (0+255),f,b
  4100  000D5C                     l4363:
  4101  000D5C  C080  FFF6         	movff	printf@f,tblptrl
  4102  000D60  C081  FFF7         	movff	printf@f+1,tblptrh
  4103  000D64                     	if	0	;tblptru may be non-zero
  4104  000D64                     	endif
  4105  000D64                     	if	0	;tblptru may be non-zero
  4106  000D64                     	endif
  4107  000D64  0008               	tblrd		*
  4108  000D66  50F5               	movf	tablat,w,c
  4109                           
  4110                           ; Switch size 1, requested type "space"
  4111                           ; Number of cases is 1, Range of values is 48 to 48
  4112                           ; switch strategies available:
  4113                           ; Name         Instructions Cycles
  4114                           ; simple_byte            4     3 (average)
  4115                           ;	Chosen strategy is simple_byte
  4116  000D68  0A30               	xorlw	48	; case 48
  4117  000D6A  B4D8               	btfsc	status,2,c
  4118  000D6C  D7F2               	goto	l4359
  4119                           
  4120                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4121                           
  4122                           ;doprnt.c: 586: }
  4123                           
  4124                           ;doprnt.c: 585: break;
  4125  000D6E  C080  FFF6         	movff	printf@f,tblptrl
  4126  000D72  C081  FFF7         	movff	printf@f+1,tblptrh
  4127  000D76                     	if	0	;tblptru may be non-zero
  4128  000D76                     	endif
  4129  000D76                     	if	0	;tblptru may be non-zero
  4130  000D76                     	endif
  4131  000D76  0008               	tblrd		*
  4132  000D78  50F5               	movf	tablat,w,c
  4133  000D7A  ECDE  F00E         	call	_isdigit
  4134  000D7E  A0D8               	btfss	status,0,c
  4135  000D80  D043               	goto	l4381
  4136                           
  4137                           ;doprnt.c: 598: width = 0;
  4138  000D82  0E00               	movlw	0
  4139  000D84  0100               	movlb	0	; () banked
  4140  000D86  6F94               	movwf	(printf@width+1)& (0+255),b
  4141  000D88  0E00               	movlw	0
  4142  000D8A  6F93               	movwf	printf@width& (0+255),b
  4143  000D8C                     l4369:
  4144                           
  4145                           ;doprnt.c: 600: width *= 10;
  4146  000D8C  C093  F034         	movff	printf@width,___wmul@multiplier
  4147  000D90  C094  F035         	movff	printf@width+1,___wmul@multiplier+1
  4148  000D94  0E00               	movlw	0
  4149  000D96  6E37               	movwf	___wmul@multiplicand+1,c
  4150  000D98  0E0A               	movlw	10
  4151  000D9A  6E36               	movwf	___wmul@multiplicand,c
  4152  000D9C  ECA5  F00E         	call	___wmul	;wreg free
  4153  000DA0  C034  F093         	movff	?___wmul,printf@width
  4154  000DA4  C035  F094         	movff	?___wmul+1,printf@width+1
  4155                           
  4156                           ;doprnt.c: 601: width += *f++ - '0';
  4157  000DA8  0ED0               	movlw	208
  4158  000DAA  0100               	movlb	0	; () banked
  4159  000DAC  6F88               	movwf	??_printf& (0+255),b
  4160  000DAE  0EFF               	movlw	255
  4161  000DB0  0100               	movlb	0	; () banked
  4162  000DB2  6F89               	movwf	(??_printf+1)& (0+255),b
  4163  000DB4  C080  FFF6         	movff	printf@f,tblptrl
  4164  000DB8  C081  FFF7         	movff	printf@f+1,tblptrh
  4165  000DBC                     	if	0	;tblptru may be non-zero
  4166  000DBC                     	endif
  4167  000DBC                     	if	0	;tblptru may be non-zero
  4168  000DBC                     	endif
  4169  000DBC  0008               	tblrd		*
  4170  000DBE  50F5               	movf	tablat,w,c
  4171  000DC0  0100               	movlb	0	; () banked
  4172  000DC2  6F8A               	movwf	(??_printf+2)& (0+255),b
  4173  000DC4  6B8B               	clrf	(??_printf+3)& (0+255),b
  4174  000DC6  0100               	movlb	0	; () banked
  4175  000DC8  5188               	movf	??_printf& (0+255),w,b
  4176  000DCA  0100               	movlb	0	; () banked
  4177  000DCC  278A               	addwf	(??_printf+2)& (0+255),f,b
  4178  000DCE  0100               	movlb	0	; () banked
  4179  000DD0  5189               	movf	(??_printf+1)& (0+255),w,b
  4180  000DD2  0100               	movlb	0	; () banked
  4181  000DD4  238B               	addwfc	(??_printf+3)& (0+255),f,b
  4182  000DD6  0100               	movlb	0	; () banked
  4183  000DD8  518A               	movf	(??_printf+2)& (0+255),w,b
  4184  000DDA  0100               	movlb	0	; () banked
  4185  000DDC  2793               	addwf	printf@width& (0+255),f,b
  4186  000DDE  0100               	movlb	0	; () banked
  4187  000DE0  518B               	movf	(??_printf+3)& (0+255),w,b
  4188  000DE2  0100               	movlb	0	; () banked
  4189  000DE4  2394               	addwfc	(printf@width+1)& (0+255),f,b
  4190                           
  4191                           ; BSR set to: 0
  4192  000DE6  0100               	movlb	0	; () banked
  4193  000DE8  4B80               	infsnz	printf@f& (0+255),f,b
  4194  000DEA  2B81               	incf	(printf@f+1)& (0+255),f,b
  4195                           
  4196                           ; BSR set to: 0
  4197                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4198  000DEC  C080  FFF6         	movff	printf@f,tblptrl
  4199  000DF0  C081  FFF7         	movff	printf@f+1,tblptrh
  4200  000DF4                     	if	0	;tblptru may be non-zero
  4201  000DF4                     	endif
  4202  000DF4                     	if	0	;tblptru may be non-zero
  4203  000DF4                     	endif
  4204  000DF4  0008               	tblrd		*
  4205  000DF6  50F5               	movf	tablat,w,c
  4206  000DF8  ECDE  F00E         	call	_isdigit
  4207  000DFC  A0D8               	btfss	status,0,c
  4208  000DFE  D004               	goto	l4381
  4209  000E00  D7C5               	goto	l4369
  4210  000E02                     l4377:
  4211                           
  4212                           ;doprnt.c: 721: flag |= 0x80;
  4213  000E02  0100               	movlb	0	; () banked
  4214  000E04  8F92               	bsf	printf@flag& (0+255),7,b
  4215                           
  4216                           ;doprnt.c: 723: break;
  4217  000E06  D019               	goto	l451
  4218  000E08                     l4381:
  4219  000E08  C080  FFF6         	movff	printf@f,tblptrl
  4220  000E0C  C081  FFF7         	movff	printf@f+1,tblptrh
  4221  000E10  0100               	movlb	0	; () banked
  4222  000E12  4B80               	infsnz	printf@f& (0+255),f,b
  4223  000E14  2B81               	incf	(printf@f+1)& (0+255),f,b
  4224  000E16                     	if	0	;tblptru may be non-zero
  4225  000E16                     	endif
  4226  000E16                     	if	0	;tblptru may be non-zero
  4227  000E16                     	endif
  4228  000E16  0008               	tblrd		*
  4229  000E18  CFF5 F095          	movff	tablat,printf@c
  4230  000E1C  0100               	movlb	0	; () banked
  4231  000E1E  5195               	movf	printf@c& (0+255),w,b
  4232                           
  4233                           ; Switch size 1, requested type "space"
  4234                           ; Number of cases is 4, Range of values is 0 to 120
  4235                           ; switch strategies available:
  4236                           ; Name         Instructions Cycles
  4237                           ; simple_byte           13     7 (average)
  4238                           ;	Chosen strategy is simple_byte
  4239  000E20  0A00               	xorlw	0	; case 0
  4240  000E22  B4D8               	btfsc	status,2,c
  4241  000E24  0012               	return	
  4242  000E26  0A64               	xorlw	100	; case 100
  4243  000E28  B4D8               	btfsc	status,2,c
  4244  000E2A  D007               	goto	l451
  4245  000E2C  0A0D               	xorlw	13	; case 105
  4246  000E2E  B4D8               	btfsc	status,2,c
  4247  000E30  D004               	goto	l451
  4248  000E32  0A11               	xorlw	17	; case 120
  4249  000E34  B4D8               	btfsc	status,2,c
  4250  000E36  D7E5               	goto	l4377
  4251  000E38  D139               	goto	l4479
  4252  000E3A                     l451:
  4253                           
  4254                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  4255  000E3A  0100               	movlb	0	; () banked
  4256  000E3C  BF92               	btfsc	printf@flag& (0+255),7,b
  4257  000E3E  D019               	goto	l4393
  4258                           
  4259                           ; BSR set to: 0
  4260                           ;doprnt.c: 1253: {
  4261                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4262  000E40  C08D  FFD9         	movff	printf@ap,fsr2l
  4263  000E44  C08E  FFDA         	movff	printf@ap+1,fsr2h
  4264  000E48  CFDE F090          	movff	postinc2,printf@val
  4265  000E4C  CFDD F091          	movff	postdec2,printf@val+1
  4266                           
  4267                           ; BSR set to: 0
  4268  000E50  0E02               	movlw	2
  4269  000E52  0100               	movlb	0	; () banked
  4270  000E54  278D               	addwf	printf@ap& (0+255),f,b
  4271  000E56  0E00               	movlw	0
  4272  000E58  238E               	addwfc	(printf@ap+1)& (0+255),f,b
  4273                           
  4274                           ; BSR set to: 0
  4275                           ;doprnt.c: 1261: if((int)val < 0) {
  4276  000E5A  0100               	movlb	0	; () banked
  4277  000E5C  AF91               	btfss	(printf@val+1)& (0+255),7,b
  4278  000E5E  D053               	goto	l4427
  4279                           
  4280                           ; BSR set to: 0
  4281                           ;doprnt.c: 1262: flag |= 0x03;
  4282  000E60  0E03               	movlw	3
  4283  000E62  0100               	movlb	0	; () banked
  4284  000E64  1392               	iorwf	printf@flag& (0+255),f,b
  4285                           
  4286                           ; BSR set to: 0
  4287                           ;doprnt.c: 1263: val = -val;
  4288  000E66  0100               	movlb	0	; () banked
  4289  000E68  6D90               	negf	printf@val& (0+255),b
  4290  000E6A  1F91               	comf	(printf@val+1)& (0+255),f,b
  4291  000E6C  B0D8               	btfsc	status,0,c
  4292  000E6E  2B91               	incf	(printf@val+1)& (0+255),f,b
  4293                           
  4294                           ; BSR set to: 0
  4295                           ;doprnt.c: 1264: }
  4296                           ;doprnt.c: 1266: }
  4297  000E70  D04A               	goto	l4427
  4298  000E72                     l4393:
  4299                           
  4300                           ; BSR set to: 0
  4301                           ;doprnt.c: 1268: else
  4302                           ;doprnt.c: 1273: {
  4303                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4304  000E72  C08D  FFD9         	movff	printf@ap,fsr2l
  4305  000E76  C08E  FFDA         	movff	printf@ap+1,fsr2h
  4306  000E7A  CFDE F090          	movff	postinc2,printf@val
  4307  000E7E  CFDD F091          	movff	postdec2,printf@val+1
  4308                           
  4309                           ; BSR set to: 0
  4310  000E82  0E02               	movlw	2
  4311  000E84  0100               	movlb	0	; () banked
  4312  000E86  278D               	addwf	printf@ap& (0+255),f,b
  4313  000E88  0E00               	movlw	0
  4314  000E8A  238E               	addwfc	(printf@ap+1)& (0+255),f,b
  4315                           
  4316                           ; BSR set to: 0
  4317                           ;doprnt.c: 1287: }
  4318                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  4319  000E8C  D03C               	goto	l4427
  4320  000E8E                     l4397:
  4321                           
  4322                           ; BSR set to: 0
  4323                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4324  000E8E  0E01               	movlw	1
  4325  000E90  0100               	movlb	0	; () banked
  4326  000E92  6F95               	movwf	printf@c& (0+255),b
  4327  000E94                     l4399:
  4328                           
  4329                           ; BSR set to: 0
  4330  000E94  0E05               	movlw	5
  4331  000E96  0100               	movlb	0	; () banked
  4332  000E98  1995               	xorwf	printf@c& (0+255),w,b
  4333  000E9A  B4D8               	btfsc	status,2,c
  4334  000E9C  D03D               	goto	l4429
  4335                           
  4336                           ; BSR set to: 0
  4337                           ;doprnt.c: 1306: if(val < dpowers[c])
  4338                           
  4339                           ; BSR set to: 0
  4340                           
  4341                           ; BSR set to: 0
  4342  000E9E  0100               	movlb	0	; () banked
  4343  000EA0  5195               	movf	printf@c& (0+255),w,b
  4344  000EA2  0D02               	mullw	2
  4345  000EA4  0E58               	movlw	low _dpowers
  4346  000EA6  24F3               	addwf	prodl,w,c
  4347  000EA8  6EF6               	movwf	tblptrl,c
  4348  000EAA  0EFE               	movlw	high _dpowers
  4349  000EAC  20F4               	addwfc	prodh,w,c
  4350  000EAE  6EF7               	movwf	tblptrh,c
  4351  000EB0                     	if	0	;There are less than 3 active tblptr bytes
  4352  000EB0                     	endif
  4353  000EB0  0009               	tblrd		*+
  4354  000EB2  50F5               	movf	tablat,w,c
  4355  000EB4  0100               	movlb	0	; () banked
  4356  000EB6  5D90               	subwf	printf@val& (0+255),w,b
  4357  000EB8  0009               	tblrd		*+
  4358  000EBA  50F5               	movf	tablat,w,c
  4359  000EBC  0100               	movlb	0	; () banked
  4360  000EBE  5991               	subwfb	(printf@val+1)& (0+255),w,b
  4361  000EC0  A0D8               	btfss	status,0,c
  4362  000EC2  D02A               	goto	l4429
  4363                           
  4364                           ; BSR set to: 0
  4365                           
  4366                           ; BSR set to: 0
  4367                           
  4368                           ; BSR set to: 0
  4369                           ;doprnt.c: 1307: break;
  4370  000EC4  0100               	movlb	0	; () banked
  4371  000EC6  2B95               	incf	printf@c& (0+255),f,b
  4372  000EC8  D7E5               	goto	l4399
  4373  000ECA                     l4411:
  4374                           
  4375                           ; BSR set to: 0
  4376                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  4377  000ECA  0E01               	movlw	1
  4378  000ECC  0100               	movlb	0	; () banked
  4379  000ECE  6F95               	movwf	printf@c& (0+255),b
  4380  000ED0                     l4413:
  4381                           
  4382                           ; BSR set to: 0
  4383  000ED0  0E04               	movlw	4
  4384  000ED2  0100               	movlb	0	; () banked
  4385  000ED4  1995               	xorwf	printf@c& (0+255),w,b
  4386  000ED6  B4D8               	btfsc	status,2,c
  4387  000ED8  D01F               	goto	l4429
  4388                           
  4389                           ; BSR set to: 0
  4390                           ;doprnt.c: 1317: if(val < hexpowers[c])
  4391                           
  4392                           ; BSR set to: 0
  4393                           
  4394                           ; BSR set to: 0
  4395  000EDA  0100               	movlb	0	; () banked
  4396  000EDC  5195               	movf	printf@c& (0+255),w,b
  4397  000EDE  0D02               	mullw	2
  4398  000EE0  0E62               	movlw	low _hexpowers
  4399  000EE2  24F3               	addwf	prodl,w,c
  4400  000EE4  6EF6               	movwf	tblptrl,c
  4401  000EE6  0EFE               	movlw	high _hexpowers
  4402  000EE8  20F4               	addwfc	prodh,w,c
  4403  000EEA  6EF7               	movwf	tblptrh,c
  4404  000EEC                     	if	0	;There are less than 3 active tblptr bytes
  4405  000EEC                     	endif
  4406  000EEC  0009               	tblrd		*+
  4407  000EEE  50F5               	movf	tablat,w,c
  4408  000EF0  0100               	movlb	0	; () banked
  4409  000EF2  5D90               	subwf	printf@val& (0+255),w,b
  4410  000EF4  0009               	tblrd		*+
  4411  000EF6  50F5               	movf	tablat,w,c
  4412  000EF8  0100               	movlb	0	; () banked
  4413  000EFA  5991               	subwfb	(printf@val+1)& (0+255),w,b
  4414  000EFC  A0D8               	btfss	status,0,c
  4415  000EFE  D00C               	goto	l4429
  4416                           
  4417                           ; BSR set to: 0
  4418                           
  4419                           ; BSR set to: 0
  4420                           
  4421                           ; BSR set to: 0
  4422                           ;doprnt.c: 1318: break;
  4423  000F00  0100               	movlb	0	; () banked
  4424  000F02  2B95               	incf	printf@c& (0+255),f,b
  4425  000F04  D7E5               	goto	l4413
  4426  000F06                     l4427:
  4427                           
  4428                           ; BSR set to: 0
  4429  000F06  0100               	movlb	0	; () banked
  4430  000F08  5192               	movf	printf@flag& (0+255),w,b
  4431  000F0A  0B80               	andlw	128
  4432                           
  4433                           ; Switch size 1, requested type "space"
  4434                           ; Number of cases is 2, Range of values is 0 to 128
  4435                           ; switch strategies available:
  4436                           ; Name         Instructions Cycles
  4437                           ; simple_byte            7     4 (average)
  4438                           ;	Chosen strategy is simple_byte
  4439  000F0C  0A00               	xorlw	0	; case 0
  4440  000F0E  B4D8               	btfsc	status,2,c
  4441  000F10  D7BE               	goto	l4397
  4442  000F12  0A80               	xorlw	128	; case 128
  4443  000F14  B4D8               	btfsc	status,2,c
  4444  000F16  D7D9               	goto	l4411
  4445  000F18                     l4429:
  4446                           
  4447                           ; BSR set to: 0
  4448                           ;doprnt.c: 1345: if(width && flag & 0x03)
  4449  000F18  0100               	movlb	0	; () banked
  4450  000F1A  5193               	movf	printf@width& (0+255),w,b
  4451  000F1C  0100               	movlb	0	; () banked
  4452  000F1E  1194               	iorwf	(printf@width+1)& (0+255),w,b
  4453  000F20  B4D8               	btfsc	status,2,c
  4454  000F22  D00B               	goto	l4435
  4455                           
  4456                           ; BSR set to: 0
  4457  000F24  C092  F088         	movff	printf@flag,??_printf
  4458  000F28  0E03               	movlw	3
  4459  000F2A  0100               	movlb	0	; () banked
  4460  000F2C  1788               	andwf	??_printf& (0+255),f,b
  4461  000F2E  B4D8               	btfsc	status,2,c
  4462  000F30  D004               	goto	l4435
  4463                           
  4464                           ; BSR set to: 0
  4465                           ;doprnt.c: 1346: width--;
  4466  000F32  0100               	movlb	0	; () banked
  4467  000F34  0793               	decf	printf@width& (0+255),f,b
  4468  000F36  A0D8               	btfss	status,0,c
  4469  000F38  0794               	decf	(printf@width+1)& (0+255),f,b
  4470  000F3A                     l4435:
  4471                           
  4472                           ; BSR set to: 0
  4473                           ;doprnt.c: 1381: if(width > c)
  4474  000F3A  0E80               	movlw	128
  4475  000F3C  0100               	movlb	0	; () banked
  4476  000F3E  BF95               	btfsc	printf@c& (0+255),7,b
  4477  000F40  0E7F               	movlw	127
  4478  000F42  0100               	movlb	0	; () banked
  4479  000F44  6F88               	movwf	??_printf& (0+255),b
  4480  000F46  0100               	movlb	0	; () banked
  4481  000F48  5193               	movf	printf@width& (0+255),w,b
  4482  000F4A  0100               	movlb	0	; () banked
  4483  000F4C  5D95               	subwf	printf@c& (0+255),w,b
  4484  000F4E  0100               	movlb	0	; () banked
  4485  000F50  5194               	movf	(printf@width+1)& (0+255),w,b
  4486  000F52  0A80               	xorlw	128
  4487  000F54  0100               	movlb	0	; () banked
  4488  000F56  5988               	subwfb	??_printf& (0+255),w,b
  4489  000F58  B0D8               	btfsc	status,0,c
  4490  000F5A  D00B               	goto	l4439
  4491                           
  4492                           ; BSR set to: 0
  4493                           ;doprnt.c: 1382: width -= c;
  4494  000F5C  0100               	movlb	0	; () banked
  4495  000F5E  5195               	movf	printf@c& (0+255),w,b
  4496  000F60  0100               	movlb	0	; () banked
  4497  000F62  5F93               	subwf	printf@width& (0+255),f,b
  4498  000F64  0E00               	movlw	0
  4499  000F66  0100               	movlb	0	; () banked
  4500  000F68  BF95               	btfsc	printf@c& (0+255),7,b
  4501  000F6A  0EFF               	movlw	255
  4502  000F6C  0100               	movlb	0	; () banked
  4503  000F6E  5B94               	subwfb	(printf@width+1)& (0+255),f,b
  4504  000F70  D005               	goto	l4441
  4505  000F72                     l4439:
  4506                           
  4507                           ; BSR set to: 0
  4508                           ;doprnt.c: 1383: else
  4509                           ;doprnt.c: 1384: width = 0;
  4510  000F72  0E00               	movlw	0
  4511  000F74  0100               	movlb	0	; () banked
  4512  000F76  6F94               	movwf	(printf@width+1)& (0+255),b
  4513  000F78  0E00               	movlw	0
  4514  000F7A  6F93               	movwf	printf@width& (0+255),b
  4515  000F7C                     l4441:
  4516                           
  4517                           ; BSR set to: 0
  4518                           ;doprnt.c: 1387: if(flag & 0x04) {
  4519  000F7C  0100               	movlb	0	; () banked
  4520  000F7E  A592               	btfss	printf@flag& (0+255),2,b
  4521  000F80  D018               	goto	l4453
  4522                           
  4523                           ; BSR set to: 0
  4524                           ;doprnt.c: 1392: if(flag & 0x03)
  4525  000F82  C092  F088         	movff	printf@flag,??_printf
  4526  000F86  0E03               	movlw	3
  4527  000F88  0100               	movlb	0	; () banked
  4528  000F8A  1788               	andwf	??_printf& (0+255),f,b
  4529  000F8C  B4D8               	btfsc	status,2,c
  4530  000F8E  D003               	goto	l4447
  4531                           
  4532                           ; BSR set to: 0
  4533                           ;doprnt.c: 1393: (putch('-') );
  4534  000F90  0E2D               	movlw	45
  4535  000F92  EC1C  F00F         	call	_putch
  4536  000F96                     l4447:
  4537                           
  4538                           ;doprnt.c: 1415: if(width)
  4539  000F96  0100               	movlb	0	; () banked
  4540  000F98  5193               	movf	printf@width& (0+255),w,b
  4541  000F9A  0100               	movlb	0	; () banked
  4542  000F9C  1194               	iorwf	(printf@width+1)& (0+255),w,b
  4543  000F9E  B4D8               	btfsc	status,2,c
  4544  000FA0  D025               	goto	l4463
  4545                           
  4546                           ; BSR set to: 0
  4547                           ;doprnt.c: 1417: (putch('0') );
  4548                           
  4549                           ; BSR set to: 0
  4550                           
  4551                           ;doprnt.c: 1416: do
  4552  000FA2  0E30               	movlw	48
  4553  000FA4  EC1C  F00F         	call	_putch
  4554                           
  4555                           ;doprnt.c: 1418: while(--width);
  4556  000FA8  0100               	movlb	0	; () banked
  4557  000FAA  0793               	decf	printf@width& (0+255),f,b
  4558  000FAC  A0D8               	btfss	status,0,c
  4559  000FAE  0794               	decf	(printf@width+1)& (0+255),f,b
  4560  000FB0  D7F2               	goto	l4447
  4561  000FB2                     l4453:
  4562                           
  4563                           ; BSR set to: 0
  4564                           ;doprnt.c: 1422: {
  4565                           ;doprnt.c: 1424: if(width
  4566                           ;doprnt.c: 1428: )
  4567  000FB2  0100               	movlb	0	; () banked
  4568  000FB4  5193               	movf	printf@width& (0+255),w,b
  4569  000FB6  0100               	movlb	0	; () banked
  4570  000FB8  1194               	iorwf	(printf@width+1)& (0+255),w,b
  4571  000FBA  B4D8               	btfsc	status,2,c
  4572  000FBC  D00D               	goto	l4459
  4573  000FBE                     l4455:
  4574                           
  4575                           ; BSR set to: 0
  4576                           ;doprnt.c: 1430: (putch(' ') );
  4577  000FBE  0E20               	movlw	32
  4578  000FC0  EC1C  F00F         	call	_putch
  4579                           
  4580                           ;doprnt.c: 1431: while(--width);
  4581  000FC4  0100               	movlb	0	; () banked
  4582  000FC6  0793               	decf	printf@width& (0+255),f,b
  4583  000FC8  A0D8               	btfss	status,0,c
  4584  000FCA  0794               	decf	(printf@width+1)& (0+255),f,b
  4585  000FCC  0100               	movlb	0	; () banked
  4586  000FCE  5193               	movf	printf@width& (0+255),w,b
  4587  000FD0  0100               	movlb	0	; () banked
  4588  000FD2  1194               	iorwf	(printf@width+1)& (0+255),w,b
  4589  000FD4  A4D8               	btfss	status,2,c
  4590  000FD6  D7F3               	goto	l4455
  4591  000FD8                     l4459:
  4592                           
  4593                           ; BSR set to: 0
  4594                           ;doprnt.c: 1438: if(flag & 0x03)
  4595  000FD8  C092  F088         	movff	printf@flag,??_printf
  4596  000FDC  0E03               	movlw	3
  4597  000FDE  0100               	movlb	0	; () banked
  4598  000FE0  1788               	andwf	??_printf& (0+255),f,b
  4599  000FE2  B4D8               	btfsc	status,2,c
  4600  000FE4  D003               	goto	l4463
  4601                           
  4602                           ; BSR set to: 0
  4603                           ;doprnt.c: 1439: (putch('-') );
  4604  000FE6  0E2D               	movlw	45
  4605  000FE8  EC1C  F00F         	call	_putch
  4606  000FEC                     l4463:
  4607                           
  4608                           ;doprnt.c: 1469: }
  4609                           ;doprnt.c: 1472: prec = c;
  4610  000FEC  C095  F08F         	movff	printf@c,printf@prec
  4611                           
  4612                           ;doprnt.c: 1474: while(prec--) {
  4613  000FF0  D057               	goto	l4477
  4614  000FF2                     l4465:
  4615                           
  4616                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4617  000FF2  0100               	movlb	0	; () banked
  4618  000FF4  518F               	movf	printf@prec& (0+255),w,b
  4619  000FF6  0D02               	mullw	2
  4620  000FF8  0E58               	movlw	low _dpowers
  4621  000FFA  24F3               	addwf	prodl,w,c
  4622  000FFC  6EF6               	movwf	tblptrl,c
  4623  000FFE  0EFE               	movlw	high _dpowers
  4624  001000  20F4               	addwfc	prodh,w,c
  4625  001002  6EF7               	movwf	tblptrh,c
  4626  001004                     	if	0	;There are less than 3 active tblptr bytes
  4627  001004                     	endif
  4628  001004  0009               	tblrd		*+
  4629  001006  CFF5 F036          	movff	tablat,___lwdiv@divisor
  4630  00100A  000A               	tblrd		*-
  4631  00100C  CFF5 F037          	movff	tablat,___lwdiv@divisor+1
  4632  001010  C090  F034         	movff	printf@val,___lwdiv@dividend
  4633  001014  C091  F035         	movff	printf@val+1,___lwdiv@dividend+1
  4634  001018  EC84  F00D         	call	___lwdiv	;wreg free
  4635  00101C  C034  F03B         	movff	?___lwdiv,___lwmod@dividend
  4636  001020  C035  F03C         	movff	?___lwdiv+1,___lwmod@dividend+1
  4637  001024  0E00               	movlw	0
  4638  001026  6E3E               	movwf	___lwmod@divisor+1,c
  4639  001028  0E0A               	movlw	10
  4640  00102A  6E3D               	movwf	___lwmod@divisor,c
  4641  00102C  EC47  F00E         	call	___lwmod	;wreg free
  4642  001030  503B               	movf	?___lwmod,w,c
  4643  001032  0F30               	addlw	48
  4644  001034  0100               	movlb	0	; () banked
  4645  001036  6F95               	movwf	printf@c& (0+255),b
  4646                           
  4647                           ;doprnt.c: 1491: break;
  4648  001038  D02F               	goto	l4475
  4649  00103A                     l4467:
  4650                           
  4651                           ; BSR set to: 0
  4652                           ;doprnt.c: 1499: {
  4653                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  4654  00103A  C090  F034         	movff	printf@val,___lwdiv@dividend
  4655  00103E  C091  F035         	movff	printf@val+1,___lwdiv@dividend+1
  4656  001042  0100               	movlb	0	; () banked
  4657  001044  518F               	movf	printf@prec& (0+255),w,b
  4658  001046  0D02               	mullw	2
  4659  001048  0E62               	movlw	low _hexpowers
  4660  00104A  24F3               	addwf	prodl,w,c
  4661  00104C  6EF6               	movwf	tblptrl,c
  4662  00104E  0EFE               	movlw	high _hexpowers
  4663  001050  20F4               	addwfc	prodh,w,c
  4664  001052  6EF7               	movwf	tblptrh,c
  4665  001054                     	if	0	;There are less than 3 active tblptr bytes
  4666  001054                     	endif
  4667  001054  0009               	tblrd		*+
  4668  001056  CFF5 F036          	movff	tablat,___lwdiv@divisor
  4669  00105A  000A               	tblrd		*-
  4670  00105C  CFF5 F037          	movff	tablat,___lwdiv@divisor+1
  4671  001060  EC84  F00D         	call	___lwdiv	;wreg free
  4672  001064  5034               	movf	?___lwdiv,w,c
  4673  001066  0B0F               	andlw	15
  4674  001068  0100               	movlb	0	; () banked
  4675  00106A  6F8C               	movwf	printf@idx& (0+255),b
  4676                           
  4677                           ; BSR set to: 0
  4678                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  4679  00106C  0100               	movlb	0	; () banked
  4680  00106E  518C               	movf	printf@idx& (0+255),w,b
  4681  001070  0D01               	mullw	1
  4682  001072  0EEF               	movlw	low STR_25
  4683  001074  24F3               	addwf	prodl,w,c
  4684  001076  6EF6               	movwf	tblptrl,c
  4685  001078  0EFE               	movlw	high STR_25
  4686  00107A  20F4               	addwfc	prodh,w,c
  4687  00107C  6EF7               	movwf	tblptrh,c
  4688  00107E                     	if	0	;There are less than 3 active tblptr bytes
  4689  00107E                     	endif
  4690  00107E  0008               	tblrd		*
  4691  001080  CFF5 F095          	movff	tablat,printf@c
  4692                           
  4693                           ; BSR set to: 0
  4694                           ;doprnt.c: 1523: }
  4695                           
  4696                           ;doprnt.c: 1508: }
  4697                           ;doprnt.c: 1510: break;
  4698  001084  D009               	goto	l4475
  4699  001086                     l4473:
  4700  001086  0100               	movlb	0	; () banked
  4701  001088  5192               	movf	printf@flag& (0+255),w,b
  4702  00108A  0B80               	andlw	128
  4703                           
  4704                           ; Switch size 1, requested type "space"
  4705                           ; Number of cases is 2, Range of values is 0 to 128
  4706                           ; switch strategies available:
  4707                           ; Name         Instructions Cycles
  4708                           ; simple_byte            7     4 (average)
  4709                           ;	Chosen strategy is simple_byte
  4710  00108C  0A00               	xorlw	0	; case 0
  4711  00108E  B4D8               	btfsc	status,2,c
  4712  001090  D7B0               	goto	l4465
  4713  001092  0A80               	xorlw	128	; case 128
  4714  001094  B4D8               	btfsc	status,2,c
  4715  001096  D7D1               	goto	l4467
  4716  001098                     l4475:
  4717                           
  4718                           ; BSR set to: 0
  4719                           ;doprnt.c: 1524: (putch(c) );
  4720  001098  0100               	movlb	0	; () banked
  4721  00109A  5195               	movf	printf@c& (0+255),w,b
  4722  00109C  EC1C  F00F         	call	_putch
  4723  0010A0                     l4477:
  4724  0010A0  0100               	movlb	0	; () banked
  4725  0010A2  078F               	decf	printf@prec& (0+255),f,b
  4726  0010A4  0100               	movlb	0	; () banked
  4727  0010A6  298F               	incf	printf@prec& (0+255),w,b
  4728  0010A8  A4D8               	btfss	status,2,c
  4729  0010AA  D7ED               	goto	l4473
  4730  0010AC                     l4479:
  4731  0010AC  C080  FFF6         	movff	printf@f,tblptrl
  4732  0010B0  C081  FFF7         	movff	printf@f+1,tblptrh
  4733  0010B4  0100               	movlb	0	; () banked
  4734  0010B6  4B80               	infsnz	printf@f& (0+255),f,b
  4735  0010B8  2B81               	incf	(printf@f+1)& (0+255),f,b
  4736  0010BA                     	if	0	;tblptru may be non-zero
  4737  0010BA                     	endif
  4738  0010BA                     	if	0	;tblptru may be non-zero
  4739  0010BA                     	endif
  4740  0010BA  0008               	tblrd		*
  4741  0010BC  CFF5 F095          	movff	tablat,printf@c
  4742  0010C0  0100               	movlb	0	; () banked
  4743  0010C2  5195               	movf	printf@c& (0+255),w,b
  4744  0010C4  B4D8               	btfsc	status,2,c
  4745  0010C6  0012               	return	
  4746  0010C8  D631               	goto	l4353
  4747  0010CA                     __end_of_printf:
  4748                           	opt stack 0
  4749                           tblptru	equ	0xFF8
  4750                           tblptrh	equ	0xFF7
  4751                           tblptrl	equ	0xFF6
  4752                           tablat	equ	0xFF5
  4753                           prodh	equ	0xFF4
  4754                           prodl	equ	0xFF3
  4755                           intcon	equ	0xFF2
  4756                           intcon3	equ	0xFF0
  4757                           postinc0	equ	0xFEE
  4758                           wreg	equ	0xFE8
  4759                           indf2	equ	0xFDF
  4760                           postinc2	equ	0xFDE
  4761                           postdec2	equ	0xFDD
  4762                           fsr2h	equ	0xFDA
  4763                           fsr2l	equ	0xFD9
  4764                           status	equ	0xFD8
  4765                           
  4766 ;; *************** function _putch *****************
  4767 ;; Defined at:
  4768 ;;		line 23 in file "../lcd.c"
  4769 ;; Parameters:    Size  Location     Type
  4770 ;;  data            1    wreg     unsigned char 
  4771 ;; Auto vars:     Size  Location     Type
  4772 ;;  data            1   53[COMRAM] unsigned char 
  4773 ;; Return value:  Size  Location     Type
  4774 ;;                  1    wreg      void 
  4775 ;; Registers used:
  4776 ;;		wreg, status,2, status,0, cstack
  4777 ;; Tracked objects:
  4778 ;;		On entry : 0/0
  4779 ;;		On exit  : 0/0
  4780 ;;		Unchanged: 0/0
  4781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4782 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4783 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4784 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4785 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4786 ;;Total ram usage:        1 bytes
  4787 ;; Hardware stack levels used:    1
  4788 ;; Hardware stack levels required when called:    6
  4789 ;; This function calls:
  4790 ;;		_lcdNibble
  4791 ;; This function is called by:
  4792 ;;		_printf
  4793 ;; This function uses a non-reentrant model
  4794 ;;
  4795                           
  4796                           	psect	text8
  4797  001E38                     __ptext8:
  4798                           	opt stack 0
  4799  001E38                     _putch:
  4800                           	opt stack 23
  4801                           
  4802                           ;incstack = 0
  4803                           ;putch@data stored from wreg
  4804  001E38  6E36               	movwf	putch@data,c
  4805                           
  4806                           ;lcd.c: 24: LATDbits.LATD2 = 1;
  4807  001E3A  848C               	bsf	3980,2,c	;volatile
  4808                           
  4809                           ;lcd.c: 25: lcdNibble(data);
  4810  001E3C  5036               	movf	putch@data,w,c
  4811  001E3E  ECD6  F00D         	call	_lcdNibble
  4812  001E42  0012               	return		;funcret
  4813  001E44                     __end_of_putch:
  4814                           	opt stack 0
  4815                           tblptru	equ	0xFF8
  4816                           tblptrh	equ	0xFF7
  4817                           tblptrl	equ	0xFF6
  4818                           tablat	equ	0xFF5
  4819                           prodh	equ	0xFF4
  4820                           prodl	equ	0xFF3
  4821                           intcon	equ	0xFF2
  4822                           intcon3	equ	0xFF0
  4823                           postinc0	equ	0xFEE
  4824                           wreg	equ	0xFE8
  4825                           indf2	equ	0xFDF
  4826                           postinc2	equ	0xFDE
  4827                           postdec2	equ	0xFDD
  4828                           fsr2h	equ	0xFDA
  4829                           fsr2l	equ	0xFD9
  4830                           status	equ	0xFD8
  4831                           
  4832 ;; *************** function _isdigit *****************
  4833 ;; Defined at:
  4834 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  4835 ;; Parameters:    Size  Location     Type
  4836 ;;  c               1    wreg     unsigned char 
  4837 ;; Auto vars:     Size  Location     Type
  4838 ;;  c               1   53[COMRAM] unsigned char 
  4839 ;; Return value:  Size  Location     Type
  4840 ;;		None               void
  4841 ;; Registers used:
  4842 ;;		wreg, status,2, status,0
  4843 ;; Tracked objects:
  4844 ;;		On entry : 0/0
  4845 ;;		On exit  : 0/0
  4846 ;;		Unchanged: 0/0
  4847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4849 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4850 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4851 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4852 ;;Total ram usage:        3 bytes
  4853 ;; Hardware stack levels used:    1
  4854 ;; Hardware stack levels required when called:    5
  4855 ;; This function calls:
  4856 ;;		Nothing
  4857 ;; This function is called by:
  4858 ;;		_printf
  4859 ;; This function uses a non-reentrant model
  4860 ;;
  4861                           
  4862                           	psect	text9
  4863  001DBC                     __ptext9:
  4864                           	opt stack 0
  4865  001DBC                     _isdigit:
  4866                           	opt stack 24
  4867                           
  4868                           ;incstack = 0
  4869                           ;isdigit@c stored from wreg
  4870  001DBC  6E36               	movwf	isdigit@c,c
  4871  001DBE  0E00               	movlw	0
  4872  001DC0  6E35               	movwf	_isdigit$936,c
  4873  001DC2  0E3A               	movlw	58
  4874  001DC4  6036               	cpfslt	isdigit@c,c
  4875  001DC6  D005               	goto	l2927
  4876  001DC8  0E2F               	movlw	47
  4877  001DCA  6436               	cpfsgt	isdigit@c,c
  4878  001DCC  D002               	goto	l2927
  4879  001DCE  0E01               	movlw	1
  4880  001DD0  6E35               	movwf	_isdigit$936,c
  4881  001DD2                     l2927:
  4882  001DD2  C035  F034         	movff	_isdigit$936,??_isdigit
  4883  001DD6  3034               	rrcf	??_isdigit,w,c
  4884  001DD8  0012               	return	
  4885  001DDA                     __end_of_isdigit:
  4886                           	opt stack 0
  4887                           tblptru	equ	0xFF8
  4888                           tblptrh	equ	0xFF7
  4889                           tblptrl	equ	0xFF6
  4890                           tablat	equ	0xFF5
  4891                           prodh	equ	0xFF4
  4892                           prodl	equ	0xFF3
  4893                           intcon	equ	0xFF2
  4894                           intcon3	equ	0xFF0
  4895                           postinc0	equ	0xFEE
  4896                           wreg	equ	0xFE8
  4897                           indf2	equ	0xFDF
  4898                           postinc2	equ	0xFDE
  4899                           postdec2	equ	0xFDD
  4900                           fsr2h	equ	0xFDA
  4901                           fsr2l	equ	0xFD9
  4902                           status	equ	0xFD8
  4903                           
  4904 ;; *************** function ___wmul *****************
  4905 ;; Defined at:
  4906 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  4907 ;; Parameters:    Size  Location     Type
  4908 ;;  multiplier      2   51[COMRAM] unsigned int 
  4909 ;;  multiplicand    2   53[COMRAM] unsigned int 
  4910 ;; Auto vars:     Size  Location     Type
  4911 ;;  product         2   55[COMRAM] unsigned int 
  4912 ;; Return value:  Size  Location     Type
  4913 ;;                  2   51[COMRAM] unsigned int 
  4914 ;; Registers used:
  4915 ;;		wreg, status,2, status,0, prodl, prodh
  4916 ;; Tracked objects:
  4917 ;;		On entry : 0/0
  4918 ;;		On exit  : 0/0
  4919 ;;		Unchanged: 0/0
  4920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4921 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4922 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4923 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4924 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4925 ;;Total ram usage:        6 bytes
  4926 ;; Hardware stack levels used:    1
  4927 ;; Hardware stack levels required when called:    5
  4928 ;; This function calls:
  4929 ;;		Nothing
  4930 ;; This function is called by:
  4931 ;;		_printf
  4932 ;; This function uses a non-reentrant model
  4933 ;;
  4934                           
  4935                           	psect	text10
  4936  001D4A                     __ptext10:
  4937                           	opt stack 0
  4938  001D4A                     ___wmul:
  4939                           	opt stack 24
  4940                           
  4941                           ;incstack = 0
  4942  001D4A  5034               	movf	___wmul@multiplier,w,c
  4943  001D4C  0236               	mulwf	___wmul@multiplicand,c
  4944  001D4E  CFF3 F038          	movff	prodl,___wmul@product
  4945  001D52  CFF4 F039          	movff	prodh,___wmul@product+1
  4946  001D56  5034               	movf	___wmul@multiplier,w,c
  4947  001D58  0237               	mulwf	___wmul@multiplicand+1,c
  4948  001D5A  50F3               	movf	prodl,w,c
  4949  001D5C  2639               	addwf	___wmul@product+1,f,c
  4950  001D5E  5035               	movf	___wmul@multiplier+1,w,c
  4951  001D60  0236               	mulwf	___wmul@multiplicand,c
  4952  001D62  50F3               	movf	prodl,w,c
  4953  001D64  2639               	addwf	___wmul@product+1,f,c
  4954  001D66  C038  F034         	movff	___wmul@product,?___wmul
  4955  001D6A  C039  F035         	movff	___wmul@product+1,?___wmul+1
  4956  001D6E  0012               	return	
  4957  001D70                     __end_of___wmul:
  4958                           	opt stack 0
  4959                           tblptru	equ	0xFF8
  4960                           tblptrh	equ	0xFF7
  4961                           tblptrl	equ	0xFF6
  4962                           tablat	equ	0xFF5
  4963                           prodh	equ	0xFF4
  4964                           prodl	equ	0xFF3
  4965                           intcon	equ	0xFF2
  4966                           intcon3	equ	0xFF0
  4967                           postinc0	equ	0xFEE
  4968                           wreg	equ	0xFE8
  4969                           indf2	equ	0xFDF
  4970                           postinc2	equ	0xFDE
  4971                           postdec2	equ	0xFDD
  4972                           fsr2h	equ	0xFDA
  4973                           fsr2l	equ	0xFD9
  4974                           status	equ	0xFD8
  4975                           
  4976 ;; *************** function ___lwmod *****************
  4977 ;; Defined at:
  4978 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  4979 ;; Parameters:    Size  Location     Type
  4980 ;;  dividend        2   58[COMRAM] unsigned int 
  4981 ;;  divisor         2   60[COMRAM] unsigned int 
  4982 ;; Auto vars:     Size  Location     Type
  4983 ;;  counter         1   62[COMRAM] unsigned char 
  4984 ;; Return value:  Size  Location     Type
  4985 ;;                  2   58[COMRAM] unsigned int 
  4986 ;; Registers used:
  4987 ;;		wreg, status,2, status,0
  4988 ;; Tracked objects:
  4989 ;;		On entry : 0/0
  4990 ;;		On exit  : 0/0
  4991 ;;		Unchanged: 0/0
  4992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4993 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4994 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4995 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4996 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4997 ;;Total ram usage:        5 bytes
  4998 ;; Hardware stack levels used:    1
  4999 ;; Hardware stack levels required when called:    5
  5000 ;; This function calls:
  5001 ;;		Nothing
  5002 ;; This function is called by:
  5003 ;;		_printf
  5004 ;; This function uses a non-reentrant model
  5005 ;;
  5006                           
  5007                           	psect	text11
  5008  001C8E                     __ptext11:
  5009                           	opt stack 0
  5010  001C8E                     ___lwmod:
  5011                           	opt stack 24
  5012                           
  5013                           ;incstack = 0
  5014  001C8E  503D               	movf	___lwmod@divisor,w,c
  5015  001C90  103E               	iorwf	___lwmod@divisor+1,w,c
  5016  001C92  B4D8               	btfsc	status,2,c
  5017  001C94  D018               	goto	l906
  5018  001C96  0E01               	movlw	1
  5019  001C98  6E3F               	movwf	___lwmod@counter,c
  5020  001C9A  D004               	goto	l3067
  5021  001C9C                     l3065:
  5022  001C9C  90D8               	bcf	status,0,c
  5023  001C9E  363D               	rlcf	___lwmod@divisor,f,c
  5024  001CA0  363E               	rlcf	___lwmod@divisor+1,f,c
  5025  001CA2  2A3F               	incf	___lwmod@counter,f,c
  5026  001CA4                     l3067:
  5027  001CA4  AE3E               	btfss	___lwmod@divisor+1,7,c
  5028  001CA6  D7FA               	goto	l3065
  5029  001CA8                     l3069:
  5030  001CA8  503D               	movf	___lwmod@divisor,w,c
  5031  001CAA  5C3B               	subwf	___lwmod@dividend,w,c
  5032  001CAC  503E               	movf	___lwmod@divisor+1,w,c
  5033  001CAE  583C               	subwfb	___lwmod@dividend+1,w,c
  5034  001CB0  A0D8               	btfss	status,0,c
  5035  001CB2  D004               	goto	l3073
  5036  001CB4  503D               	movf	___lwmod@divisor,w,c
  5037  001CB6  5E3B               	subwf	___lwmod@dividend,f,c
  5038  001CB8  503E               	movf	___lwmod@divisor+1,w,c
  5039  001CBA  5A3C               	subwfb	___lwmod@dividend+1,f,c
  5040  001CBC                     l3073:
  5041  001CBC  90D8               	bcf	status,0,c
  5042  001CBE  323E               	rrcf	___lwmod@divisor+1,f,c
  5043  001CC0  323D               	rrcf	___lwmod@divisor,f,c
  5044  001CC2  2E3F               	decfsz	___lwmod@counter,f,c
  5045  001CC4  D7F1               	goto	l3069
  5046  001CC6                     l906:
  5047  001CC6  C03B  F03B         	movff	___lwmod@dividend,?___lwmod
  5048  001CCA  C03C  F03C         	movff	___lwmod@dividend+1,?___lwmod+1
  5049  001CCE  0012               	return		;funcret
  5050  001CD0                     __end_of___lwmod:
  5051                           	opt stack 0
  5052                           tblptru	equ	0xFF8
  5053                           tblptrh	equ	0xFF7
  5054                           tblptrl	equ	0xFF6
  5055                           tablat	equ	0xFF5
  5056                           prodh	equ	0xFF4
  5057                           prodl	equ	0xFF3
  5058                           intcon	equ	0xFF2
  5059                           intcon3	equ	0xFF0
  5060                           postinc0	equ	0xFEE
  5061                           wreg	equ	0xFE8
  5062                           indf2	equ	0xFDF
  5063                           postinc2	equ	0xFDE
  5064                           postdec2	equ	0xFDD
  5065                           fsr2h	equ	0xFDA
  5066                           fsr2l	equ	0xFD9
  5067                           status	equ	0xFD8
  5068                           
  5069 ;; *************** function ___lwdiv *****************
  5070 ;; Defined at:
  5071 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  5072 ;; Parameters:    Size  Location     Type
  5073 ;;  dividend        2   51[COMRAM] unsigned int 
  5074 ;;  divisor         2   53[COMRAM] unsigned int 
  5075 ;; Auto vars:     Size  Location     Type
  5076 ;;  quotient        2   55[COMRAM] unsigned int 
  5077 ;;  counter         1   57[COMRAM] unsigned char 
  5078 ;; Return value:  Size  Location     Type
  5079 ;;                  2   51[COMRAM] unsigned int 
  5080 ;; Registers used:
  5081 ;;		wreg, status,2, status,0
  5082 ;; Tracked objects:
  5083 ;;		On entry : 0/0
  5084 ;;		On exit  : 0/0
  5085 ;;		Unchanged: 0/0
  5086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5087 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5088 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5089 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5090 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5091 ;;Total ram usage:        7 bytes
  5092 ;; Hardware stack levels used:    1
  5093 ;; Hardware stack levels required when called:    5
  5094 ;; This function calls:
  5095 ;;		Nothing
  5096 ;; This function is called by:
  5097 ;;		_printf
  5098 ;; This function uses a non-reentrant model
  5099 ;;
  5100                           
  5101                           	psect	text12
  5102  001B08                     __ptext12:
  5103                           	opt stack 0
  5104  001B08                     ___lwdiv:
  5105                           	opt stack 24
  5106                           
  5107                           ;incstack = 0
  5108  001B08  0E00               	movlw	0
  5109  001B0A  6E39               	movwf	___lwdiv@quotient+1,c
  5110  001B0C  0E00               	movlw	0
  5111  001B0E  6E38               	movwf	___lwdiv@quotient,c
  5112  001B10  5036               	movf	___lwdiv@divisor,w,c
  5113  001B12  1037               	iorwf	___lwdiv@divisor+1,w,c
  5114  001B14  B4D8               	btfsc	status,2,c
  5115  001B16  D01C               	goto	l896
  5116  001B18  0E01               	movlw	1
  5117  001B1A  6E3A               	movwf	___lwdiv@counter,c
  5118  001B1C  D004               	goto	l3047
  5119  001B1E                     l3045:
  5120  001B1E  90D8               	bcf	status,0,c
  5121  001B20  3636               	rlcf	___lwdiv@divisor,f,c
  5122  001B22  3637               	rlcf	___lwdiv@divisor+1,f,c
  5123  001B24  2A3A               	incf	___lwdiv@counter,f,c
  5124  001B26                     l3047:
  5125  001B26  AE37               	btfss	___lwdiv@divisor+1,7,c
  5126  001B28  D7FA               	goto	l3045
  5127  001B2A                     l3049:
  5128  001B2A  90D8               	bcf	status,0,c
  5129  001B2C  3638               	rlcf	___lwdiv@quotient,f,c
  5130  001B2E  3639               	rlcf	___lwdiv@quotient+1,f,c
  5131  001B30  5036               	movf	___lwdiv@divisor,w,c
  5132  001B32  5C34               	subwf	___lwdiv@dividend,w,c
  5133  001B34  5037               	movf	___lwdiv@divisor+1,w,c
  5134  001B36  5835               	subwfb	___lwdiv@dividend+1,w,c
  5135  001B38  A0D8               	btfss	status,0,c
  5136  001B3A  D005               	goto	l3057
  5137  001B3C  5036               	movf	___lwdiv@divisor,w,c
  5138  001B3E  5E34               	subwf	___lwdiv@dividend,f,c
  5139  001B40  5037               	movf	___lwdiv@divisor+1,w,c
  5140  001B42  5A35               	subwfb	___lwdiv@dividend+1,f,c
  5141  001B44  8038               	bsf	___lwdiv@quotient,0,c
  5142  001B46                     l3057:
  5143  001B46  90D8               	bcf	status,0,c
  5144  001B48  3237               	rrcf	___lwdiv@divisor+1,f,c
  5145  001B4A  3236               	rrcf	___lwdiv@divisor,f,c
  5146  001B4C  2E3A               	decfsz	___lwdiv@counter,f,c
  5147  001B4E  D7ED               	goto	l3049
  5148  001B50                     l896:
  5149  001B50  C038  F034         	movff	___lwdiv@quotient,?___lwdiv
  5150  001B54  C039  F035         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5151  001B58  0012               	return		;funcret
  5152  001B5A                     __end_of___lwdiv:
  5153                           	opt stack 0
  5154                           tblptru	equ	0xFF8
  5155                           tblptrh	equ	0xFF7
  5156                           tblptrl	equ	0xFF6
  5157                           tablat	equ	0xFF5
  5158                           prodh	equ	0xFF4
  5159                           prodl	equ	0xFF3
  5160                           intcon	equ	0xFF2
  5161                           intcon3	equ	0xFF0
  5162                           postinc0	equ	0xFEE
  5163                           wreg	equ	0xFE8
  5164                           indf2	equ	0xFDF
  5165                           postinc2	equ	0xFDE
  5166                           postdec2	equ	0xFDD
  5167                           fsr2h	equ	0xFDA
  5168                           fsr2l	equ	0xFD9
  5169                           status	equ	0xFD8
  5170                           
  5171 ;; *************** function _initLCD *****************
  5172 ;; Defined at:
  5173 ;;		line 7 in file "../lcd.c"
  5174 ;; Parameters:    Size  Location     Type
  5175 ;;		None
  5176 ;; Auto vars:     Size  Location     Type
  5177 ;;		None
  5178 ;; Return value:  Size  Location     Type
  5179 ;;                  1    wreg      void 
  5180 ;; Registers used:
  5181 ;;		wreg, status,2, status,0, cstack
  5182 ;; Tracked objects:
  5183 ;;		On entry : 0/0
  5184 ;;		On exit  : 0/0
  5185 ;;		Unchanged: 0/0
  5186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5187 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5188 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5189 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5190 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5191 ;;Total ram usage:        1 bytes
  5192 ;; Hardware stack levels used:    1
  5193 ;; Hardware stack levels required when called:    7
  5194 ;; This function calls:
  5195 ;;		_lcdInst
  5196 ;; This function is called by:
  5197 ;;		_main
  5198 ;; This function uses a non-reentrant model
  5199 ;;
  5200                           
  5201                           	psect	text13
  5202  001C48                     __ptext13:
  5203                           	opt stack 0
  5204  001C48                     _initLCD:
  5205                           	opt stack 23
  5206                           
  5207                           ;lcd.c: 8: _delay((unsigned long)((15)*(10000000/4000.0)));
  5208                           
  5209                           ;incstack = 0
  5210  001C48  0E31               	movlw	49
  5211  001C4A  6E37               	movwf	??_initLCD& (0+255),c
  5212  001C4C  0EB2               	movlw	178
  5213  001C4E                     u5507:
  5214  001C4E  2EE8               	decfsz	wreg,f,c
  5215  001C50  D7FE               	bra	u5507
  5216  001C52  2E37               	decfsz	??_initLCD& (0+255),f,c
  5217  001C54  D7FC               	bra	u5507
  5218  001C56  D000               	nop2	
  5219                           
  5220                           ;lcd.c: 9: lcdInst(0b00110011);
  5221  001C58  0E33               	movlw	51
  5222  001C5A  EC22  F00F         	call	_lcdInst
  5223                           
  5224                           ;lcd.c: 10: lcdInst(0b00110010);
  5225  001C5E  0E32               	movlw	50
  5226  001C60  EC22  F00F         	call	_lcdInst
  5227                           
  5228                           ;lcd.c: 11: lcdInst(0b00101000);
  5229  001C64  0E28               	movlw	40
  5230  001C66  EC22  F00F         	call	_lcdInst
  5231                           
  5232                           ;lcd.c: 12: lcdInst(0b00001111);
  5233  001C6A  0E0F               	movlw	15
  5234  001C6C  EC22  F00F         	call	_lcdInst
  5235                           
  5236                           ;lcd.c: 13: lcdInst(0b00000110);
  5237  001C70  0E06               	movlw	6
  5238  001C72  EC22  F00F         	call	_lcdInst
  5239                           
  5240                           ;lcd.c: 14: lcdInst(0b00000001);
  5241  001C76  0E01               	movlw	1
  5242  001C78  EC22  F00F         	call	_lcdInst
  5243                           
  5244                           ;lcd.c: 15: _delay((unsigned long)((15)*(10000000/4000.0)));
  5245  001C7C  0E31               	movlw	49
  5246  001C7E  6E37               	movwf	??_initLCD& (0+255),c
  5247  001C80  0EB2               	movlw	178
  5248  001C82                     u5517:
  5249  001C82  2EE8               	decfsz	wreg,f,c
  5250  001C84  D7FE               	bra	u5517
  5251  001C86  2E37               	decfsz	??_initLCD& (0+255),f,c
  5252  001C88  D7FC               	bra	u5517
  5253  001C8A  D000               	nop2	
  5254  001C8C  0012               	return		;funcret
  5255  001C8E                     __end_of_initLCD:
  5256                           	opt stack 0
  5257                           tblptru	equ	0xFF8
  5258                           tblptrh	equ	0xFF7
  5259                           tblptrl	equ	0xFF6
  5260                           tablat	equ	0xFF5
  5261                           prodh	equ	0xFF4
  5262                           prodl	equ	0xFF3
  5263                           intcon	equ	0xFF2
  5264                           intcon3	equ	0xFF0
  5265                           postinc0	equ	0xFEE
  5266                           wreg	equ	0xFE8
  5267                           indf2	equ	0xFDF
  5268                           postinc2	equ	0xFDE
  5269                           postdec2	equ	0xFDD
  5270                           fsr2h	equ	0xFDA
  5271                           fsr2l	equ	0xFD9
  5272                           status	equ	0xFD8
  5273                           
  5274 ;; *************** function _lcdInst *****************
  5275 ;; Defined at:
  5276 ;;		line 18 in file "../lcd.c"
  5277 ;; Parameters:    Size  Location     Type
  5278 ;;  data            1    wreg     unsigned char 
  5279 ;; Auto vars:     Size  Location     Type
  5280 ;;  data            1   53[COMRAM] unsigned char 
  5281 ;; Return value:  Size  Location     Type
  5282 ;;                  1    wreg      void 
  5283 ;; Registers used:
  5284 ;;		wreg, status,2, status,0, cstack
  5285 ;; Tracked objects:
  5286 ;;		On entry : 0/0
  5287 ;;		On exit  : 0/0
  5288 ;;		Unchanged: 0/0
  5289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5291 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5292 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5293 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5294 ;;Total ram usage:        1 bytes
  5295 ;; Hardware stack levels used:    1
  5296 ;; Hardware stack levels required when called:    6
  5297 ;; This function calls:
  5298 ;;		_lcdNibble
  5299 ;; This function is called by:
  5300 ;;		_initLCD
  5301 ;;		_main
  5302 ;; This function uses a non-reentrant model
  5303 ;;
  5304                           
  5305                           	psect	text14
  5306  001E44                     __ptext14:
  5307                           	opt stack 0
  5308  001E44                     _lcdInst:
  5309                           	opt stack 24
  5310                           
  5311                           ;incstack = 0
  5312                           ;lcdInst@data stored from wreg
  5313  001E44  6E36               	movwf	lcdInst@data,c
  5314                           
  5315                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  5316  001E46  948C               	bcf	3980,2,c	;volatile
  5317                           
  5318                           ;lcd.c: 20: lcdNibble(data);
  5319  001E48  5036               	movf	lcdInst@data,w,c
  5320  001E4A  ECD6  F00D         	call	_lcdNibble
  5321  001E4E  0012               	return		;funcret
  5322  001E50                     __end_of_lcdInst:
  5323                           	opt stack 0
  5324                           tblptru	equ	0xFF8
  5325                           tblptrh	equ	0xFF7
  5326                           tblptrl	equ	0xFF6
  5327                           tablat	equ	0xFF5
  5328                           prodh	equ	0xFF4
  5329                           prodl	equ	0xFF3
  5330                           intcon	equ	0xFF2
  5331                           intcon3	equ	0xFF0
  5332                           postinc0	equ	0xFEE
  5333                           wreg	equ	0xFE8
  5334                           indf2	equ	0xFDF
  5335                           postinc2	equ	0xFDE
  5336                           postdec2	equ	0xFDD
  5337                           fsr2h	equ	0xFDA
  5338                           fsr2l	equ	0xFD9
  5339                           status	equ	0xFD8
  5340                           
  5341 ;; *************** function _lcdNibble *****************
  5342 ;; Defined at:
  5343 ;;		line 28 in file "../lcd.c"
  5344 ;; Parameters:    Size  Location     Type
  5345 ;;  data            1    wreg     unsigned char 
  5346 ;; Auto vars:     Size  Location     Type
  5347 ;;  data            1   52[COMRAM] unsigned char 
  5348 ;;  temp            1   51[COMRAM] unsigned char 
  5349 ;; Return value:  Size  Location     Type
  5350 ;;                  1    wreg      void 
  5351 ;; Registers used:
  5352 ;;		wreg, status,2, status,0
  5353 ;; Tracked objects:
  5354 ;;		On entry : 0/0
  5355 ;;		On exit  : 0/0
  5356 ;;		Unchanged: 0/0
  5357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5358 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5359 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5360 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5361 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5362 ;;Total ram usage:        2 bytes
  5363 ;; Hardware stack levels used:    1
  5364 ;; Hardware stack levels required when called:    5
  5365 ;; This function calls:
  5366 ;;		Nothing
  5367 ;; This function is called by:
  5368 ;;		_lcdInst
  5369 ;;		_putch
  5370 ;; This function uses a non-reentrant model
  5371 ;;
  5372                           
  5373                           	psect	text15
  5374  001BAC                     __ptext15:
  5375                           	opt stack 0
  5376  001BAC                     _lcdNibble:
  5377                           	opt stack 23
  5378                           
  5379                           ;incstack = 0
  5380                           ;lcdNibble@data stored from wreg
  5381  001BAC  6E35               	movwf	lcdNibble@data,c
  5382                           
  5383                           ;lcd.c: 30: char temp = data & 0xF0;
  5384  001BAE  5035               	movf	lcdNibble@data,w,c
  5385  001BB0  0BF0               	andlw	240
  5386  001BB2  6E34               	movwf	lcdNibble@temp,c
  5387                           
  5388                           ;lcd.c: 31: LATD = LATD & 0x0F;
  5389  001BB4  508C               	movf	3980,w,c	;volatile
  5390  001BB6  0B0F               	andlw	15
  5391  001BB8  6E8C               	movwf	3980,c	;volatile
  5392                           
  5393                           ;lcd.c: 32: LATD = temp | LATD;
  5394  001BBA  5034               	movf	lcdNibble@temp,w,c
  5395  001BBC  108C               	iorwf	3980,w,c	;volatile
  5396  001BBE  6E8C               	movwf	3980,c	;volatile
  5397                           
  5398                           ;lcd.c: 34: LATDbits.LATD3 = 0;
  5399  001BC0  968C               	bcf	3980,3,c	;volatile
  5400                           
  5401                           ;lcd.c: 35: _delay((unsigned long)((30)*(10000000/4000000.0)));
  5402  001BC2  0E19               	movlw	25
  5403  001BC4                     u5527:
  5404  001BC4  2EE8               	decfsz	wreg,f,c
  5405  001BC6  D7FE               	bra	u5527
  5406                           
  5407                           ;lcd.c: 36: LATDbits.LATD3 = 1;
  5408  001BC8  868C               	bsf	3980,3,c	;volatile
  5409                           
  5410                           ;lcd.c: 37: _delay((unsigned long)((30)*(10000000/4000000.0)));
  5411  001BCA  0E19               	movlw	25
  5412  001BCC                     u5537:
  5413  001BCC  2EE8               	decfsz	wreg,f,c
  5414  001BCE  D7FE               	bra	u5537
  5415                           
  5416                           ;lcd.c: 39: data = data << 4;
  5417  001BD0  3835               	swapf	lcdNibble@data,w,c
  5418  001BD2  0BF0               	andlw	240
  5419  001BD4  6E35               	movwf	lcdNibble@data,c
  5420                           
  5421                           ;lcd.c: 41: temp = data & 0xF0;
  5422  001BD6  5035               	movf	lcdNibble@data,w,c
  5423  001BD8  0BF0               	andlw	240
  5424  001BDA  6E34               	movwf	lcdNibble@temp,c
  5425                           
  5426                           ;lcd.c: 42: LATD = LATD & 0x0F;
  5427  001BDC  508C               	movf	3980,w,c	;volatile
  5428  001BDE  0B0F               	andlw	15
  5429  001BE0  6E8C               	movwf	3980,c	;volatile
  5430                           
  5431                           ;lcd.c: 43: LATD = temp | LATD;
  5432  001BE2  5034               	movf	lcdNibble@temp,w,c
  5433  001BE4  108C               	iorwf	3980,w,c	;volatile
  5434  001BE6  6E8C               	movwf	3980,c	;volatile
  5435                           
  5436                           ;lcd.c: 45: LATDbits.LATD3 = 0;
  5437  001BE8  968C               	bcf	3980,3,c	;volatile
  5438                           
  5439                           ;lcd.c: 46: _delay((unsigned long)((30)*(10000000/4000000.0)));
  5440  001BEA  0E19               	movlw	25
  5441  001BEC                     u5547:
  5442  001BEC  2EE8               	decfsz	wreg,f,c
  5443  001BEE  D7FE               	bra	u5547
  5444                           
  5445                           ;lcd.c: 47: LATDbits.LATD3 = 1;
  5446  001BF0  868C               	bsf	3980,3,c	;volatile
  5447                           
  5448                           ;lcd.c: 48: _delay((unsigned long)((30)*(10000000/4000000.0)));
  5449  001BF2  0E19               	movlw	25
  5450  001BF4                     u5557:
  5451  001BF4  2EE8               	decfsz	wreg,f,c
  5452  001BF6  D7FE               	bra	u5557
  5453  001BF8  0012               	return		;funcret
  5454  001BFA                     __end_of_lcdNibble:
  5455                           	opt stack 0
  5456                           tblptru	equ	0xFF8
  5457                           tblptrh	equ	0xFF7
  5458                           tblptrl	equ	0xFF6
  5459                           tablat	equ	0xFF5
  5460                           prodh	equ	0xFF4
  5461                           prodl	equ	0xFF3
  5462                           intcon	equ	0xFF2
  5463                           intcon3	equ	0xFF0
  5464                           postinc0	equ	0xFEE
  5465                           wreg	equ	0xFE8
  5466                           indf2	equ	0xFDF
  5467                           postinc2	equ	0xFDE
  5468                           postdec2	equ	0xFDD
  5469                           fsr2h	equ	0xFDA
  5470                           fsr2l	equ	0xFD9
  5471                           status	equ	0xFD8
  5472                           
  5473 ;; *************** function _I2C_Master_Write *****************
  5474 ;; Defined at:
  5475 ;;		line 39 in file "../I2C.c"
  5476 ;; Parameters:    Size  Location     Type
  5477 ;;  d               2   52[COMRAM] unsigned int 
  5478 ;; Auto vars:     Size  Location     Type
  5479 ;;		None
  5480 ;; Return value:  Size  Location     Type
  5481 ;;                  1    wreg      void 
  5482 ;; Registers used:
  5483 ;;		wreg, status,2, status,0, cstack
  5484 ;; Tracked objects:
  5485 ;;		On entry : 0/0
  5486 ;;		On exit  : 0/0
  5487 ;;		Unchanged: 0/0
  5488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5489 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5490 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5491 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5492 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5493 ;;Total ram usage:        2 bytes
  5494 ;; Hardware stack levels used:    1
  5495 ;; Hardware stack levels required when called:    6
  5496 ;; This function calls:
  5497 ;;		_I2C_Master_Wait
  5498 ;; This function is called by:
  5499 ;;		_main
  5500 ;; This function uses a non-reentrant model
  5501 ;;
  5502                           
  5503                           	psect	text16
  5504  001E68                     __ptext16:
  5505                           	opt stack 0
  5506  001E68                     _I2C_Master_Write:
  5507                           	opt stack 24
  5508                           
  5509                           ;I2C.c: 41: I2C_Master_Wait();
  5510                           
  5511                           ;incstack = 0
  5512  001E68  EC13  F00F         	call	_I2C_Master_Wait	;wreg free
  5513                           
  5514                           ;I2C.c: 42: SSPBUF = d;
  5515  001E6C  C035  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  5516  001E70  0012               	return		;funcret
  5517  001E72                     __end_of_I2C_Master_Write:
  5518                           	opt stack 0
  5519                           tblptru	equ	0xFF8
  5520                           tblptrh	equ	0xFF7
  5521                           tblptrl	equ	0xFF6
  5522                           tablat	equ	0xFF5
  5523                           prodh	equ	0xFF4
  5524                           prodl	equ	0xFF3
  5525                           intcon	equ	0xFF2
  5526                           intcon3	equ	0xFF0
  5527                           postinc0	equ	0xFEE
  5528                           wreg	equ	0xFE8
  5529                           indf2	equ	0xFDF
  5530                           postinc2	equ	0xFDE
  5531                           postdec2	equ	0xFDD
  5532                           fsr2h	equ	0xFDA
  5533                           fsr2l	equ	0xFD9
  5534                           status	equ	0xFD8
  5535                           
  5536 ;; *************** function _I2C_Master_Stop *****************
  5537 ;; Defined at:
  5538 ;;		line 33 in file "../I2C.c"
  5539 ;; Parameters:    Size  Location     Type
  5540 ;;		None
  5541 ;; Auto vars:     Size  Location     Type
  5542 ;;		None
  5543 ;; Return value:  Size  Location     Type
  5544 ;;                  1    wreg      void 
  5545 ;; Registers used:
  5546 ;;		wreg, status,2, status,0, cstack
  5547 ;; Tracked objects:
  5548 ;;		On entry : 0/0
  5549 ;;		On exit  : 0/0
  5550 ;;		Unchanged: 0/0
  5551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5552 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5553 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5554 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5555 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5556 ;;Total ram usage:        0 bytes
  5557 ;; Hardware stack levels used:    1
  5558 ;; Hardware stack levels required when called:    6
  5559 ;; This function calls:
  5560 ;;		_I2C_Master_Wait
  5561 ;; This function is called by:
  5562 ;;		_main
  5563 ;; This function uses a non-reentrant model
  5564 ;;
  5565                           
  5566                           	psect	text17
  5567  001E72                     __ptext17:
  5568                           	opt stack 0
  5569  001E72                     _I2C_Master_Stop:
  5570                           	opt stack 24
  5571                           
  5572                           ;I2C.c: 35: I2C_Master_Wait();
  5573                           
  5574                           ;incstack = 0
  5575  001E72  EC13  F00F         	call	_I2C_Master_Wait	;wreg free
  5576                           
  5577                           ;I2C.c: 36: PEN = 1;
  5578  001E76  84C5               	bsf	4037,2,c	;volatile
  5579  001E78  0012               	return		;funcret
  5580  001E7A                     __end_of_I2C_Master_Stop:
  5581                           	opt stack 0
  5582                           tblptru	equ	0xFF8
  5583                           tblptrh	equ	0xFF7
  5584                           tblptrl	equ	0xFF6
  5585                           tablat	equ	0xFF5
  5586                           prodh	equ	0xFF4
  5587                           prodl	equ	0xFF3
  5588                           intcon	equ	0xFF2
  5589                           intcon3	equ	0xFF0
  5590                           postinc0	equ	0xFEE
  5591                           wreg	equ	0xFE8
  5592                           indf2	equ	0xFDF
  5593                           postinc2	equ	0xFDE
  5594                           postdec2	equ	0xFDD
  5595                           fsr2h	equ	0xFDA
  5596                           fsr2l	equ	0xFD9
  5597                           status	equ	0xFD8
  5598                           
  5599 ;; *************** function _I2C_Master_Start *****************
  5600 ;; Defined at:
  5601 ;;		line 21 in file "../I2C.c"
  5602 ;; Parameters:    Size  Location     Type
  5603 ;;		None
  5604 ;; Auto vars:     Size  Location     Type
  5605 ;;		None
  5606 ;; Return value:  Size  Location     Type
  5607 ;;                  1    wreg      void 
  5608 ;; Registers used:
  5609 ;;		wreg, status,2, status,0, cstack
  5610 ;; Tracked objects:
  5611 ;;		On entry : 0/0
  5612 ;;		On exit  : 0/0
  5613 ;;		Unchanged: 0/0
  5614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5615 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5616 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5617 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5618 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5619 ;;Total ram usage:        0 bytes
  5620 ;; Hardware stack levels used:    1
  5621 ;; Hardware stack levels required when called:    6
  5622 ;; This function calls:
  5623 ;;		_I2C_Master_Wait
  5624 ;; This function is called by:
  5625 ;;		_main
  5626 ;; This function uses a non-reentrant model
  5627 ;;
  5628                           
  5629                           	psect	text18
  5630  001E7A                     __ptext18:
  5631                           	opt stack 0
  5632  001E7A                     _I2C_Master_Start:
  5633                           	opt stack 24
  5634                           
  5635                           ;I2C.c: 23: I2C_Master_Wait();
  5636                           
  5637                           ;incstack = 0
  5638  001E7A  EC13  F00F         	call	_I2C_Master_Wait	;wreg free
  5639                           
  5640                           ;I2C.c: 24: SEN = 1;
  5641  001E7E  80C5               	bsf	4037,0,c	;volatile
  5642  001E80  0012               	return		;funcret
  5643  001E82                     __end_of_I2C_Master_Start:
  5644                           	opt stack 0
  5645                           tblptru	equ	0xFF8
  5646                           tblptrh	equ	0xFF7
  5647                           tblptrl	equ	0xFF6
  5648                           tablat	equ	0xFF5
  5649                           prodh	equ	0xFF4
  5650                           prodl	equ	0xFF3
  5651                           intcon	equ	0xFF2
  5652                           intcon3	equ	0xFF0
  5653                           postinc0	equ	0xFEE
  5654                           wreg	equ	0xFE8
  5655                           indf2	equ	0xFDF
  5656                           postinc2	equ	0xFDE
  5657                           postdec2	equ	0xFDD
  5658                           fsr2h	equ	0xFDA
  5659                           fsr2l	equ	0xFD9
  5660                           status	equ	0xFD8
  5661                           
  5662 ;; *************** function _I2C_Master_Read *****************
  5663 ;; Defined at:
  5664 ;;		line 45 in file "../I2C.c"
  5665 ;; Parameters:    Size  Location     Type
  5666 ;;  a               1    wreg     unsigned char 
  5667 ;; Auto vars:     Size  Location     Type
  5668 ;;  a               1   52[COMRAM] unsigned char 
  5669 ;;  temp            1   53[COMRAM] unsigned char 
  5670 ;; Return value:  Size  Location     Type
  5671 ;;                  1    wreg      unsigned char 
  5672 ;; Registers used:
  5673 ;;		wreg, status,2, status,0, cstack
  5674 ;; Tracked objects:
  5675 ;;		On entry : 0/0
  5676 ;;		On exit  : 0/0
  5677 ;;		Unchanged: 0/0
  5678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5679 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5680 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5681 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5682 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5683 ;;Total ram usage:        2 bytes
  5684 ;; Hardware stack levels used:    1
  5685 ;; Hardware stack levels required when called:    6
  5686 ;; This function calls:
  5687 ;;		_I2C_Master_Wait
  5688 ;; This function is called by:
  5689 ;;		_main
  5690 ;; This function uses a non-reentrant model
  5691 ;;
  5692                           
  5693                           	psect	text19
  5694  001D70                     __ptext19:
  5695                           	opt stack 0
  5696  001D70                     _I2C_Master_Read:
  5697                           	opt stack 24
  5698                           
  5699                           ;incstack = 0
  5700                           ;I2C_Master_Read@a stored from wreg
  5701  001D70  6E35               	movwf	I2C_Master_Read@a,c
  5702                           
  5703                           ;I2C.c: 47: unsigned char temp;
  5704                           ;I2C.c: 48: I2C_Master_Wait();
  5705  001D72  EC13  F00F         	call	_I2C_Master_Wait	;wreg free
  5706                           
  5707                           ;I2C.c: 49: RCEN = 1;
  5708  001D76  86C5               	bsf	4037,3,c	;volatile
  5709                           
  5710                           ;I2C.c: 50: I2C_Master_Wait();
  5711  001D78  EC13  F00F         	call	_I2C_Master_Wait	;wreg free
  5712                           
  5713                           ;I2C.c: 51: temp = SSPBUF;
  5714  001D7C  CFC9 F036          	movff	4041,I2C_Master_Read@temp	;volatile
  5715                           
  5716                           ;I2C.c: 52: I2C_Master_Wait();
  5717  001D80  EC13  F00F         	call	_I2C_Master_Wait	;wreg free
  5718                           
  5719                           ;I2C.c: 53: ACKDT = (a)?0:1;
  5720  001D84  5035               	movf	I2C_Master_Read@a,w,c
  5721  001D86  A4D8               	btfss	status,2,c
  5722  001D88  D002               	goto	u3060
  5723  001D8A  8AC5               	bsf	4037,5,c	;volatile
  5724  001D8C  D001               	goto	l3329
  5725  001D8E                     u3060:
  5726  001D8E  9AC5               	bcf	4037,5,c	;volatile
  5727  001D90                     l3329:
  5728                           
  5729                           ;I2C.c: 54: ACKEN = 1;
  5730  001D90  88C5               	bsf	4037,4,c	;volatile
  5731                           
  5732                           ;I2C.c: 55: return temp;
  5733  001D92  5036               	movf	I2C_Master_Read@temp,w,c
  5734  001D94  0012               	return	
  5735  001D96                     __end_of_I2C_Master_Read:
  5736                           	opt stack 0
  5737                           tblptru	equ	0xFF8
  5738                           tblptrh	equ	0xFF7
  5739                           tblptrl	equ	0xFF6
  5740                           tablat	equ	0xFF5
  5741                           prodh	equ	0xFF4
  5742                           prodl	equ	0xFF3
  5743                           intcon	equ	0xFF2
  5744                           intcon3	equ	0xFF0
  5745                           postinc0	equ	0xFEE
  5746                           wreg	equ	0xFE8
  5747                           indf2	equ	0xFDF
  5748                           postinc2	equ	0xFDE
  5749                           postdec2	equ	0xFDD
  5750                           fsr2h	equ	0xFDA
  5751                           fsr2l	equ	0xFD9
  5752                           status	equ	0xFD8
  5753                           
  5754 ;; *************** function _I2C_Master_Wait *****************
  5755 ;; Defined at:
  5756 ;;		line 16 in file "../I2C.c"
  5757 ;; Parameters:    Size  Location     Type
  5758 ;;		None
  5759 ;; Auto vars:     Size  Location     Type
  5760 ;;		None
  5761 ;; Return value:  Size  Location     Type
  5762 ;;                  1    wreg      void 
  5763 ;; Registers used:
  5764 ;;		wreg, status,2, status,0
  5765 ;; Tracked objects:
  5766 ;;		On entry : 0/0
  5767 ;;		On exit  : 0/0
  5768 ;;		Unchanged: 0/0
  5769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5770 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5771 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5772 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5773 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5774 ;;Total ram usage:        1 bytes
  5775 ;; Hardware stack levels used:    1
  5776 ;; Hardware stack levels required when called:    5
  5777 ;; This function calls:
  5778 ;;		Nothing
  5779 ;; This function is called by:
  5780 ;;		_I2C_Master_Start
  5781 ;;		_I2C_Master_Stop
  5782 ;;		_I2C_Master_Write
  5783 ;;		_I2C_Master_Read
  5784 ;; This function uses a non-reentrant model
  5785 ;;
  5786                           
  5787                           	psect	text20
  5788  001E26                     __ptext20:
  5789                           	opt stack 0
  5790  001E26                     _I2C_Master_Wait:
  5791                           	opt stack 24
  5792  001E26                     l30:
  5793  001E26  B4C7               	btfsc	4039,2,c	;volatile
  5794  001E28  D7FE               	goto	l30
  5795  001E2A  CFC5 F034          	movff	4037,??_I2C_Master_Wait	;volatile
  5796  001E2E  0E1F               	movlw	31
  5797  001E30  1634               	andwf	??_I2C_Master_Wait,f,c
  5798  001E32  B4D8               	btfsc	status,2,c
  5799  001E34  0012               	return	
  5800  001E36  D7F7               	goto	l30
  5801  001E38                     __end_of_I2C_Master_Wait:
  5802                           	opt stack 0
  5803                           tblptru	equ	0xFF8
  5804                           tblptrh	equ	0xFF7
  5805                           tblptrl	equ	0xFF6
  5806                           tablat	equ	0xFF5
  5807                           prodh	equ	0xFF4
  5808                           prodl	equ	0xFF3
  5809                           intcon	equ	0xFF2
  5810                           intcon3	equ	0xFF0
  5811                           postinc0	equ	0xFEE
  5812                           wreg	equ	0xFE8
  5813                           indf2	equ	0xFDF
  5814                           postinc2	equ	0xFDE
  5815                           postdec2	equ	0xFDD
  5816                           fsr2h	equ	0xFDA
  5817                           fsr2l	equ	0xFD9
  5818                           status	equ	0xFD8
  5819                           
  5820 ;; *************** function _I2C_Master_Init *****************
  5821 ;; Defined at:
  5822 ;;		line 5 in file "../I2C.c"
  5823 ;; Parameters:    Size  Location     Type
  5824 ;;  c               4    0[BANK0 ] const unsigned long 
  5825 ;; Auto vars:     Size  Location     Type
  5826 ;;		None
  5827 ;; Return value:  Size  Location     Type
  5828 ;;                  1    wreg      void 
  5829 ;; Registers used:
  5830 ;;		wreg, status,2, status,0, cstack
  5831 ;; Tracked objects:
  5832 ;;		On entry : 0/0
  5833 ;;		On exit  : 0/0
  5834 ;;		Unchanged: 0/0
  5835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5836 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5837 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5838 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5839 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5840 ;;Total ram usage:        8 bytes
  5841 ;; Hardware stack levels used:    1
  5842 ;; Hardware stack levels required when called:    6
  5843 ;; This function calls:
  5844 ;;		___lldiv
  5845 ;; This function is called by:
  5846 ;;		_main
  5847 ;; This function uses a non-reentrant model
  5848 ;;
  5849                           
  5850                           	psect	text21
  5851  001AAC                     __ptext21:
  5852                           	opt stack 0
  5853  001AAC                     _I2C_Master_Init:
  5854                           	opt stack 24
  5855                           
  5856                           ;I2C.c: 8: SSPSTAT = 0b00000000;
  5857                           
  5858                           ;incstack = 0
  5859  001AAC  0E00               	movlw	0
  5860  001AAE  6EC7               	movwf	4039,c	;volatile
  5861                           
  5862                           ;I2C.c: 9: SSPCON1 = 0b00101000;
  5863  001AB0  0E28               	movlw	40
  5864  001AB2  6EC6               	movwf	4038,c	;volatile
  5865                           
  5866                           ;I2C.c: 10: SSPCON2 = 0b00000000;
  5867  001AB4  0E00               	movlw	0
  5868  001AB6  6EC5               	movwf	4037,c	;volatile
  5869                           
  5870                           ;I2C.c: 11: SSPADD = (10000000/(4*c))-1;
  5871  001AB8  0E80               	movlw	128
  5872  001ABA  6E34               	movwf	___lldiv@dividend,c
  5873  001ABC  0E96               	movlw	150
  5874  001ABE  6E35               	movwf	___lldiv@dividend+1,c
  5875  001AC0  0E98               	movlw	152
  5876  001AC2  6E36               	movwf	___lldiv@dividend+2,c
  5877  001AC4  0E00               	movlw	0
  5878  001AC6  6E37               	movwf	___lldiv@dividend+3,c
  5879  001AC8  C080  F084         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  5880  001ACC  C081  F085         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  5881  001AD0  C082  F086         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  5882  001AD4  C083  F087         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  5883  001AD8  0E02               	movlw	2
  5884  001ADA                     u4695:
  5885  001ADA  90D8               	bcf	status,0,c
  5886  001ADC  0100               	movlb	0	; () banked
  5887  001ADE  3784               	rlcf	??_I2C_Master_Init& (0+255),f,b
  5888  001AE0  3785               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  5889  001AE2  3786               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  5890  001AE4  3787               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  5891  001AE6  2EE8               	decfsz	wreg,f,c
  5892  001AE8  D7F8               	goto	u4695
  5893  001AEA  C084  F038         	movff	??_I2C_Master_Init,___lldiv@divisor
  5894  001AEE  C085  F039         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  5895  001AF2  C086  F03A         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  5896  001AF6  C087  F03B         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  5897  001AFA  ECA5  F00C         	call	___lldiv	;wreg free
  5898  001AFE  0434               	decf	?___lldiv,w,c
  5899  001B00  6EC8               	movwf	4040,c	;volatile
  5900                           
  5901                           ;I2C.c: 12: TRISC3 = 1;
  5902  001B02  8694               	bsf	3988,3,c	;volatile
  5903                           
  5904                           ;I2C.c: 13: TRISC4 = 1;
  5905  001B04  8894               	bsf	3988,4,c	;volatile
  5906  001B06  0012               	return		;funcret
  5907  001B08                     __end_of_I2C_Master_Init:
  5908                           	opt stack 0
  5909                           tblptru	equ	0xFF8
  5910                           tblptrh	equ	0xFF7
  5911                           tblptrl	equ	0xFF6
  5912                           tablat	equ	0xFF5
  5913                           prodh	equ	0xFF4
  5914                           prodl	equ	0xFF3
  5915                           intcon	equ	0xFF2
  5916                           intcon3	equ	0xFF0
  5917                           postinc0	equ	0xFEE
  5918                           wreg	equ	0xFE8
  5919                           indf2	equ	0xFDF
  5920                           postinc2	equ	0xFDE
  5921                           postdec2	equ	0xFDD
  5922                           fsr2h	equ	0xFDA
  5923                           fsr2l	equ	0xFD9
  5924                           status	equ	0xFD8
  5925                           
  5926 ;; *************** function ___lldiv *****************
  5927 ;; Defined at:
  5928 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  5929 ;; Parameters:    Size  Location     Type
  5930 ;;  dividend        4   51[COMRAM] unsigned long 
  5931 ;;  divisor         4   55[COMRAM] unsigned long 
  5932 ;; Auto vars:     Size  Location     Type
  5933 ;;  quotient        4   59[COMRAM] unsigned long 
  5934 ;;  counter         1   63[COMRAM] unsigned char 
  5935 ;; Return value:  Size  Location     Type
  5936 ;;                  4   51[COMRAM] unsigned long 
  5937 ;; Registers used:
  5938 ;;		wreg, status,2, status,0
  5939 ;; Tracked objects:
  5940 ;;		On entry : 0/0
  5941 ;;		On exit  : 0/0
  5942 ;;		Unchanged: 0/0
  5943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5944 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5945 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5946 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5947 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5948 ;;Total ram usage:       13 bytes
  5949 ;; Hardware stack levels used:    1
  5950 ;; Hardware stack levels required when called:    5
  5951 ;; This function calls:
  5952 ;;		Nothing
  5953 ;; This function is called by:
  5954 ;;		_I2C_Master_Init
  5955 ;; This function uses a non-reentrant model
  5956 ;;
  5957                           
  5958                           	psect	text22
  5959  00194A                     __ptext22:
  5960                           	opt stack 0
  5961  00194A                     ___lldiv:
  5962                           	opt stack 24
  5963                           
  5964                           ;incstack = 0
  5965  00194A  0E00               	movlw	0
  5966  00194C  6E3C               	movwf	___lldiv@quotient,c
  5967  00194E  0E00               	movlw	0
  5968  001950  6E3D               	movwf	___lldiv@quotient+1,c
  5969  001952  0E00               	movlw	0
  5970  001954  6E3E               	movwf	___lldiv@quotient+2,c
  5971  001956  0E00               	movlw	0
  5972  001958  6E3F               	movwf	___lldiv@quotient+3,c
  5973  00195A  5038               	movf	___lldiv@divisor,w,c
  5974  00195C  1039               	iorwf	___lldiv@divisor+1,w,c
  5975  00195E  103A               	iorwf	___lldiv@divisor+2,w,c
  5976  001960  103B               	iorwf	___lldiv@divisor+3,w,c
  5977  001962  B4D8               	btfsc	status,2,c
  5978  001964  D02A               	goto	l843
  5979  001966  0E01               	movlw	1
  5980  001968  6E40               	movwf	___lldiv@counter,c
  5981  00196A  D006               	goto	l3025
  5982  00196C                     l3023:
  5983  00196C  90D8               	bcf	status,0,c
  5984  00196E  3638               	rlcf	___lldiv@divisor,f,c
  5985  001970  3639               	rlcf	___lldiv@divisor+1,f,c
  5986  001972  363A               	rlcf	___lldiv@divisor+2,f,c
  5987  001974  363B               	rlcf	___lldiv@divisor+3,f,c
  5988  001976  2A40               	incf	___lldiv@counter,f,c
  5989  001978                     l3025:
  5990  001978  AE3B               	btfss	___lldiv@divisor+3,7,c
  5991  00197A  D7F8               	goto	l3023
  5992  00197C                     l3027:
  5993  00197C  90D8               	bcf	status,0,c
  5994  00197E  363C               	rlcf	___lldiv@quotient,f,c
  5995  001980  363D               	rlcf	___lldiv@quotient+1,f,c
  5996  001982  363E               	rlcf	___lldiv@quotient+2,f,c
  5997  001984  363F               	rlcf	___lldiv@quotient+3,f,c
  5998  001986  5038               	movf	___lldiv@divisor,w,c
  5999  001988  5C34               	subwf	___lldiv@dividend,w,c
  6000  00198A  5039               	movf	___lldiv@divisor+1,w,c
  6001  00198C  5835               	subwfb	___lldiv@dividend+1,w,c
  6002  00198E  503A               	movf	___lldiv@divisor+2,w,c
  6003  001990  5836               	subwfb	___lldiv@dividend+2,w,c
  6004  001992  503B               	movf	___lldiv@divisor+3,w,c
  6005  001994  5837               	subwfb	___lldiv@dividend+3,w,c
  6006  001996  A0D8               	btfss	status,0,c
  6007  001998  D009               	goto	l3035
  6008  00199A  5038               	movf	___lldiv@divisor,w,c
  6009  00199C  5E34               	subwf	___lldiv@dividend,f,c
  6010  00199E  5039               	movf	___lldiv@divisor+1,w,c
  6011  0019A0  5A35               	subwfb	___lldiv@dividend+1,f,c
  6012  0019A2  503A               	movf	___lldiv@divisor+2,w,c
  6013  0019A4  5A36               	subwfb	___lldiv@dividend+2,f,c
  6014  0019A6  503B               	movf	___lldiv@divisor+3,w,c
  6015  0019A8  5A37               	subwfb	___lldiv@dividend+3,f,c
  6016  0019AA  803C               	bsf	___lldiv@quotient,0,c
  6017  0019AC                     l3035:
  6018  0019AC  90D8               	bcf	status,0,c
  6019  0019AE  323B               	rrcf	___lldiv@divisor+3,f,c
  6020  0019B0  323A               	rrcf	___lldiv@divisor+2,f,c
  6021  0019B2  3239               	rrcf	___lldiv@divisor+1,f,c
  6022  0019B4  3238               	rrcf	___lldiv@divisor,f,c
  6023  0019B6  2E40               	decfsz	___lldiv@counter,f,c
  6024  0019B8  D7E1               	goto	l3027
  6025  0019BA                     l843:
  6026  0019BA  C03C  F034         	movff	___lldiv@quotient,?___lldiv
  6027  0019BE  C03D  F035         	movff	___lldiv@quotient+1,?___lldiv+1
  6028  0019C2  C03E  F036         	movff	___lldiv@quotient+2,?___lldiv+2
  6029  0019C6  C03F  F037         	movff	___lldiv@quotient+3,?___lldiv+3
  6030  0019CA  0012               	return		;funcret
  6031  0019CC                     __end_of___lldiv:
  6032                           	opt stack 0
  6033                           tblptru	equ	0xFF8
  6034                           tblptrh	equ	0xFF7
  6035                           tblptrl	equ	0xFF6
  6036                           tablat	equ	0xFF5
  6037                           prodh	equ	0xFF4
  6038                           prodl	equ	0xFF3
  6039                           intcon	equ	0xFF2
  6040                           intcon3	equ	0xFF0
  6041                           postinc0	equ	0xFEE
  6042                           wreg	equ	0xFE8
  6043                           indf2	equ	0xFDF
  6044                           postinc2	equ	0xFDE
  6045                           postdec2	equ	0xFDD
  6046                           fsr2h	equ	0xFDA
  6047                           fsr2l	equ	0xFD9
  6048                           status	equ	0xFD8
  6049                           
  6050 ;; *************** function _ISR *****************
  6051 ;; Defined at:
  6052 ;;		line 562 in file "../main.c"
  6053 ;; Parameters:    Size  Location     Type
  6054 ;;		None
  6055 ;; Auto vars:     Size  Location     Type
  6056 ;;  keypress        1   50[COMRAM] unsigned char 
  6057 ;; Return value:  Size  Location     Type
  6058 ;;                  1    wreg      void 
  6059 ;; Registers used:
  6060 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6061 ;; Tracked objects:
  6062 ;;		On entry : 0/0
  6063 ;;		On exit  : 0/0
  6064 ;;		Unchanged: 0/0
  6065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6066 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6067 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6068 ;;      Temps:         15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6069 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6070 ;;Total ram usage:       16 bytes
  6071 ;; Hardware stack levels used:    1
  6072 ;; Hardware stack levels required when called:    4
  6073 ;; This function calls:
  6074 ;;		_switchMenu
  6075 ;;		i2___awdiv
  6076 ;;		i2___awmod
  6077 ;;		i2_lcdInst
  6078 ;;		i2_printf
  6079 ;;		i2_stopOperation
  6080 ;; This function is called by:
  6081 ;;		Interrupt level 2
  6082 ;; This function uses a non-reentrant model
  6083 ;;
  6084                           
  6085                           	psect	intcode
  6086  000008                     __pintcode:
  6087                           	opt stack 0
  6088  000008                     _ISR:
  6089                           	opt stack 23
  6090                           
  6091                           ;incstack = 0
  6092  000008  824B               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6093  00000A  ED4A  F004         	call	int_func,f	;refresh shadow registers
  6094                           tblptru	equ	0xFF8
  6095                           tblptrh	equ	0xFF7
  6096                           tblptrl	equ	0xFF6
  6097                           tablat	equ	0xFF5
  6098                           prodh	equ	0xFF4
  6099                           prodl	equ	0xFF3
  6100                           intcon	equ	0xFF2
  6101                           intcon3	equ	0xFF0
  6102                           postinc0	equ	0xFEE
  6103                           wreg	equ	0xFE8
  6104                           indf2	equ	0xFDF
  6105                           postinc2	equ	0xFDE
  6106                           postdec2	equ	0xFDD
  6107                           fsr2h	equ	0xFDA
  6108                           fsr2l	equ	0xFD9
  6109                           status	equ	0xFD8
  6110                           
  6111                           	psect	intcode_body
  6112  000894                     __pintcode_body:
  6113                           	opt stack 23
  6114  000894                     int_func:
  6115                           	opt stack 23
  6116  000894  0006               	pop		; remove dummy address from shadow register refresh
  6117  000896  CFFA F025          	movff	pclath,??_ISR+1
  6118  00089A  CFFB F026          	movff	pclatu,??_ISR+2
  6119  00089E  CFE9 F027          	movff	fsr0l,??_ISR+3
  6120  0008A2  CFEA F028          	movff	fsr0h,??_ISR+4
  6121  0008A6  CFE1 F029          	movff	fsr1l,??_ISR+5
  6122  0008AA  CFE2 F02A          	movff	fsr1h,??_ISR+6
  6123  0008AE  CFD9 F02B          	movff	fsr2l,??_ISR+7
  6124  0008B2  CFDA F02C          	movff	fsr2h,??_ISR+8
  6125  0008B6  CFF3 F02D          	movff	prodl,??_ISR+9
  6126  0008BA  CFF4 F02E          	movff	prodh,??_ISR+10
  6127  0008BE  CFF6 F02F          	movff	tblptrl,??_ISR+11
  6128  0008C2  CFF7 F030          	movff	tblptrh,??_ISR+12
  6129  0008C6  CFF8 F031          	movff	tblptru,??_ISR+13
  6130  0008CA  CFF5 F032          	movff	tablat,??_ISR+14
  6131                           
  6132                           ;main.c: 563: if (INT1IF){
  6133  0008CE  A0F0               	btfss	intcon3,0,c	;volatile
  6134  0008D0  D015               	goto	i2l4099
  6135                           
  6136                           ;main.c: 564: unsigned char keypress = (PORTB & 0xF0) >> 4;
  6137  0008D2  3881               	swapf	3969,w,c	;volatile
  6138  0008D4  0B0F               	andlw	15
  6139  0008D6  0B0F               	andlw	15
  6140  0008D8  6E33               	movwf	ISR@keypress,c
  6141                           
  6142                           ;main.c: 565: switchMenu('4', '6', keys[keypress]);
  6143  0008DA  0E36               	movlw	54
  6144  0008DC  6E21               	movwf	switchMenu@right,c
  6145  0008DE  5033               	movf	ISR@keypress,w,c
  6146  0008E0  0D01               	mullw	1
  6147  0008E2  0E47               	movlw	low _keys
  6148  0008E4  24F3               	addwf	prodl,w,c
  6149  0008E6  6EF6               	movwf	tblptrl,c
  6150  0008E8  0EFE               	movlw	high _keys
  6151  0008EA  20F4               	addwfc	prodh,w,c
  6152  0008EC  6EF7               	movwf	tblptrh,c
  6153  0008EE                     	if	0	;There are less than 3 active tblptr bytes
  6154  0008EE                     	endif
  6155  0008EE  0008               	tblrd		*
  6156  0008F0  CFF5 F022          	movff	tablat,switchMenu@key
  6157  0008F4  0E34               	movlw	52
  6158  0008F6  ECCA  F00B         	call	_switchMenu
  6159                           
  6160                           ;main.c: 566: INT1IF = 0;
  6161  0008FA  90F0               	bcf	intcon3,0,c	;volatile
  6162  0008FC                     i2l4099:
  6163                           
  6164                           ;main.c: 567: }
  6165                           ;main.c: 568: if (screenMode == 1 && TMR0IF){
  6166  0008FC  0100               	movlb	0	; () banked
  6167  0008FE  05C7               	decf	_screenMode& (0+255),w,b
  6168  000900  B4D8               	btfsc	status,2,c
  6169                           
  6170                           ; BSR set to: 0
  6171  000902  A4F2               	btfss	intcon,2,c	;volatile
  6172  000904  D04D               	goto	i2l4139
  6173                           
  6174                           ; BSR set to: 0
  6175                           ;main.c: 569: TMR0IF = 0;
  6176  000906  94F2               	bcf	intcon,2,c	;volatile
  6177                           
  6178                           ; BSR set to: 0
  6179                           ;main.c: 570: TMR0 = 55770;
  6180  000908  0ED9               	movlw	217
  6181  00090A  6ED7               	movwf	4055,c	;volatile
  6182  00090C  0EDA               	movlw	218
  6183  00090E  6ED6               	movwf	4054,c	;volatile
  6184                           
  6185                           ; BSR set to: 0
  6186                           ;main.c: 571: opTimer++;
  6187  000910  2A46               	incf	_opTimer,f,c
  6188                           
  6189                           ; BSR set to: 0
  6190                           ;main.c: 572: min = opTimer / 60;
  6191  000912  C046  F001         	movff	_opTimer,i2___awdiv@dividend
  6192  000916  6A02               	clrf	i2___awdiv@dividend+1,c
  6193  000918  0E00               	movlw	0
  6194  00091A  6E04               	movwf	i2___awdiv@divisor+1,c
  6195  00091C  0E3C               	movlw	60
  6196  00091E  6E03               	movwf	i2___awdiv@divisor,c
  6197  000920  EC63  F00C         	call	i2___awdiv	;wreg free
  6198  000924  5001               	movf	?i2___awdiv,w,c
  6199  000926  0100               	movlb	0	; () banked
  6200  000928  6FBA               	movwf	_min& (0+255),b
  6201                           
  6202                           ; BSR set to: 0
  6203                           ;main.c: 573: sec = opTimer % 60;
  6204  00092A  C046  F001         	movff	_opTimer,i2___awmod@dividend
  6205  00092E  6A02               	clrf	i2___awmod@dividend+1,c
  6206  000930  0E00               	movlw	0
  6207  000932  6E04               	movwf	i2___awmod@divisor+1,c
  6208  000934  0E3C               	movlw	60
  6209  000936  6E03               	movwf	i2___awmod@divisor,c
  6210  000938  EC1E  F00D         	call	i2___awmod	;wreg free
  6211  00093C  5001               	movf	?i2___awmod,w,c
  6212  00093E  0100               	movlb	0	; () banked
  6213  000940  6FC0               	movwf	_sec& (0+255),b
  6214                           
  6215                           ; BSR set to: 0
  6216                           ;main.c: 574: lcdInst(0b10000000);;
  6217  000942  0E80               	movlw	128
  6218  000944  EC2E  F00F         	call	i2_lcdInst
  6219                           
  6220                           ;main.c: 575: printf("RUNNING: %02d:%02d   ", min, sec);
  6221  000948  0EB1               	movlw	low STR_24
  6222  00094A  6E0D               	movwf	i2printf@f,c
  6223  00094C  0EFE               	movlw	high STR_24
  6224  00094E  6E0E               	movwf	i2printf@f+1,c
  6225  000950  C0BA  F00F         	movff	_min,?i2_printf+2
  6226  000954  6A10               	clrf	?i2_printf+3,c
  6227  000956  C0C0  F011         	movff	_sec,?i2_printf+4
  6228  00095A  6A12               	clrf	?i2_printf+5,c
  6229  00095C  EC65  F008         	call	i2_printf	;wreg free
  6230                           
  6231                           ;main.c: 576: if (opTimer >= 180){
  6232  000960  0EB3               	movlw	179
  6233  000962  6446               	cpfsgt	_opTimer,c
  6234  000964  D005               	goto	i2l4123
  6235                           
  6236                           ;main.c: 577: screenMode = 0;
  6237  000966  0E00               	movlw	0
  6238  000968  0100               	movlb	0	; () banked
  6239  00096A  6FC7               	movwf	_screenMode& (0+255),b
  6240                           
  6241                           ; BSR set to: 0
  6242                           ;main.c: 578: stopOperation();
  6243  00096C  EC45  F00B         	call	i2_stopOperation	;wreg free
  6244  000970                     i2l4123:
  6245                           
  6246                           ;main.c: 579: }
  6247                           ;main.c: 581: if (!sorting){
  6248  000970  5048               	movf	_sorting,w,c
  6249  000972  A4D8               	btfss	status,2,c
  6250  000974  D013               	goto	i2l4137
  6251                           
  6252                           ;main.c: 582: if (ADRES > 50)
  6253  000976  50C4               	movf	4036,w,c	;volatile
  6254  000978  E104               	bnz	i2u410_40
  6255  00097A  0E33               	movlw	51
  6256  00097C  5CC3               	subwf	4035,w,c	;volatile
  6257  00097E  A0D8               	btfss	status,0,c
  6258  000980  D002               	goto	i2l4129
  6259  000982                     i2u410_40:
  6260                           
  6261                           ;main.c: 583: doneTimer++;
  6262  000982  2A45               	incf	_doneTimer,f,c
  6263  000984  D002               	goto	i2l4131
  6264  000986                     i2l4129:
  6265                           
  6266                           ;main.c: 584: else
  6267                           ;main.c: 585: doneTimer = 0;
  6268  000986  0E00               	movlw	0
  6269  000988  6E45               	movwf	_doneTimer,c
  6270  00098A                     i2l4131:
  6271                           
  6272                           ;main.c: 586: if (doneTimer >= 10){
  6273  00098A  0E09               	movlw	9
  6274  00098C  6445               	cpfsgt	_doneTimer,c
  6275  00098E  D008               	goto	i2l4139
  6276                           
  6277                           ;main.c: 587: screenMode = 0;
  6278  000990  0E00               	movlw	0
  6279  000992  0100               	movlb	0	; () banked
  6280  000994  6FC7               	movwf	_screenMode& (0+255),b
  6281                           
  6282                           ; BSR set to: 0
  6283                           ;main.c: 588: stopOperation();
  6284  000996  EC45  F00B         	call	i2_stopOperation	;wreg free
  6285                           
  6286                           ;main.c: 589: }
  6287                           ;main.c: 590: }
  6288  00099A  D002               	goto	i2l4139
  6289  00099C                     i2l4137:
  6290                           
  6291                           ;main.c: 591: else
  6292                           ;main.c: 592: doneTimer = 0;
  6293  00099C  0E00               	movlw	0
  6294  00099E  6E45               	movwf	_doneTimer,c
  6295  0009A0                     i2l4139:
  6296                           
  6297                           ;main.c: 593: }
  6298                           ;main.c: 594: if (screenMode == 1 && TMR1IF){
  6299  0009A0  0100               	movlb	0	; () banked
  6300  0009A2  05C7               	decf	_screenMode& (0+255),w,b
  6301  0009A4  B4D8               	btfsc	status,2,c
  6302                           
  6303                           ; BSR set to: 0
  6304  0009A6  A09E               	btfss	3998,0,c	;volatile
  6305  0009A8  D19C               	goto	i2l419
  6306                           
  6307                           ; BSR set to: 0
  6308                           ;main.c: 595: TMR1IF = 0;
  6309  0009AA  909E               	bcf	3998,0,c	;volatile
  6310                           
  6311                           ; BSR set to: 0
  6312                           ;main.c: 596: TMR1 = 58035;
  6313  0009AC  0EE2               	movlw	226
  6314  0009AE  6ECF               	movwf	4047,c	;volatile
  6315  0009B0  0EB3               	movlw	179
  6316  0009B2  6ECE               	movwf	4046,c	;volatile
  6317                           
  6318                           ; BSR set to: 0
  6319                           ;main.c: 597: if (count_3ms)
  6320  0009B4  5041               	movf	_count_3ms,w,c
  6321  0009B6  1042               	iorwf	_count_3ms+1,w,c
  6322  0009B8  B4D8               	btfsc	status,2,c
  6323  0009BA  D003               	goto	i2l368
  6324                           
  6325                           ; BSR set to: 0
  6326                           ;main.c: 598: count_3ms--;
  6327  0009BC  0641               	decf	_count_3ms,f,c
  6328  0009BE  A0D8               	btfss	status,0,c
  6329  0009C0  0642               	decf	_count_3ms+1,f,c
  6330  0009C2                     i2l368:
  6331                           
  6332                           ; BSR set to: 0
  6333                           ;main.c: 599: solOnTimer++;
  6334  0009C2  2A47               	incf	_solOnTimer,f,c
  6335                           
  6336                           ; BSR set to: 0
  6337                           ;main.c: 600: if (solOnTimer >= 133){
  6338  0009C4  0E84               	movlw	132
  6339  0009C6  6447               	cpfsgt	_solOnTimer,c
  6340  0009C8  D00D               	goto	i2l4157
  6341                           
  6342                           ; BSR set to: 0
  6343                           ;main.c: 601: solOnTimer = 0;
  6344  0009CA  0E00               	movlw	0
  6345  0009CC  6E47               	movwf	_solOnTimer,c
  6346                           
  6347                           ; BSR set to: 0
  6348                           ;main.c: 602: LATCbits.LC0 = !LATCbits.LC0;;
  6349  0009CE  B08B               	btfsc	3979,0,c	;volatile
  6350  0009D0  D003               	goto	i2u416_40
  6351  0009D2  6A24               	clrf	??_ISR& (0+255),c
  6352  0009D4  2A24               	incf	??_ISR& (0+255),f,c
  6353  0009D6  D001               	goto	i2u417_48
  6354  0009D8                     i2u416_40:
  6355  0009D8  6A24               	clrf	??_ISR& (0+255),c
  6356  0009DA                     i2u417_48:
  6357  0009DA  508B               	movf	3979,w,c	;volatile
  6358  0009DC  1824               	xorwf	??_ISR,w,c
  6359  0009DE  0BFE               	andlw	-2
  6360  0009E0  1824               	xorwf	??_ISR,w,c
  6361  0009E2  6E8B               	movwf	3979,c	;volatile
  6362  0009E4                     i2l4157:
  6363                           
  6364                           ;main.c: 603: }
  6365                           ;main.c: 604: if (stepGear != 0){
  6366  0009E4  0100               	movlb	0	; () banked
  6367  0009E6  51C2               	movf	_stepGear& (0+255),w,b
  6368  0009E8  B4D8               	btfsc	status,2,c
  6369  0009EA  D0DB               	goto	i2l4239
  6370                           
  6371                           ; BSR set to: 0
  6372                           ;main.c: 605: if (stepGear == 1){
  6373  0009EC  0100               	movlb	0	; () banked
  6374  0009EE  05C2               	decf	_stepGear& (0+255),w,b
  6375  0009F0  A4D8               	btfss	status,2,c
  6376  0009F2  D017               	goto	i2l4169
  6377                           
  6378                           ; BSR set to: 0
  6379                           ;main.c: 606: stepAmount++;
  6380  0009F4  4A43               	infsnz	_stepAmount,f,c
  6381  0009F6  2A44               	incf	_stepAmount+1,f,c
  6382                           
  6383                           ; BSR set to: 0
  6384                           ;main.c: 607: LATCbits.LC2 = !LATCbits.LC2;;
  6385  0009F8  B48B               	btfsc	3979,2,c	;volatile
  6386  0009FA  D003               	goto	i2u420_40
  6387  0009FC  6A24               	clrf	??_ISR& (0+255),c
  6388  0009FE  2A24               	incf	??_ISR& (0+255),f,c
  6389  000A00  D001               	goto	i2u421_48
  6390  000A02                     i2u420_40:
  6391  000A02  6A24               	clrf	??_ISR& (0+255),c
  6392  000A04                     i2u421_48:
  6393  000A04  4624               	rlncf	??_ISR,f,c
  6394  000A06  4624               	rlncf	??_ISR,f,c
  6395  000A08  508B               	movf	3979,w,c	;volatile
  6396  000A0A  1824               	xorwf	??_ISR,w,c
  6397  000A0C  0BFB               	andlw	-5
  6398  000A0E  1824               	xorwf	??_ISR,w,c
  6399  000A10  6E8B               	movwf	3979,c	;volatile
  6400                           
  6401                           ;main.c: 608: if (stepAmount >= 380){
  6402  000A12  0E7C               	movlw	124
  6403  000A14  5C43               	subwf	_stepAmount,w,c
  6404  000A16  0E01               	movlw	1
  6405  000A18  5844               	subwfb	_stepAmount+1,w,c
  6406  000A1A  A0D8               	btfss	status,0,c
  6407  000A1C  D0C2               	goto	i2l4239
  6408                           
  6409                           ;main.c: 609: stepGear = 2;
  6410  000A1E  0E02               	movlw	2
  6411  000A20  D012               	goto	L4
  6412  000A22                     i2l4169:
  6413                           
  6414                           ; BSR set to: 0
  6415                           ;main.c: 612: else if (stepGear == 2){
  6416  000A22  0E02               	movlw	2
  6417  000A24  0100               	movlb	0	; () banked
  6418  000A26  19C2               	xorwf	_stepGear& (0+255),w,b
  6419  000A28  A4D8               	btfss	status,2,c
  6420  000A2A  D010               	goto	i2l4177
  6421                           
  6422                           ; BSR set to: 0
  6423                           ;main.c: 613: stepAmount++;
  6424  000A2C  4A43               	infsnz	_stepAmount,f,c
  6425  000A2E  2A44               	incf	_stepAmount+1,f,c
  6426                           
  6427                           ; BSR set to: 0
  6428                           ;main.c: 614: if (stepAmount >= 100){
  6429  000A30  5044               	movf	_stepAmount+1,w,c
  6430  000A32  E104               	bnz	i2u424_40
  6431  000A34  0E64               	movlw	100
  6432  000A36  5C43               	subwf	_stepAmount,w,c
  6433  000A38  A0D8               	btfss	status,0,c
  6434  000A3A  D0B3               	goto	i2l4239
  6435  000A3C                     i2u424_40:
  6436                           
  6437                           ; BSR set to: 0
  6438                           ;main.c: 615: stepAmount = 0;
  6439  000A3C  0E00               	movlw	0
  6440  000A3E  6E44               	movwf	_stepAmount+1,c
  6441  000A40  0E00               	movlw	0
  6442  000A42  6E43               	movwf	_stepAmount,c
  6443                           
  6444                           ;main.c: 616: stepGear = 3;
  6445  000A44  0E03               	movlw	3
  6446  000A46                     L4:
  6447  000A46  0100               	movlb	0	; () banked
  6448  000A48  6FC2               	movwf	_stepGear& (0+255),b
  6449                           
  6450                           ; BSR set to: 0
  6451                           ;main.c: 617: }
  6452                           ;main.c: 618: }
  6453  000A4A  D0AB               	goto	i2l4239
  6454  000A4C                     i2l4177:
  6455                           
  6456                           ; BSR set to: 0
  6457                           ;main.c: 619: else if (stepGear == 3){
  6458  000A4C  0E03               	movlw	3
  6459  000A4E  0100               	movlb	0	; () banked
  6460  000A50  19C2               	xorwf	_stepGear& (0+255),w,b
  6461  000A52  A4D8               	btfss	status,2,c
  6462  000A54  D01D               	goto	i2l4189
  6463                           
  6464                           ; BSR set to: 0
  6465                           ;main.c: 620: stepAmount++;
  6466  000A56  4A43               	infsnz	_stepAmount,f,c
  6467  000A58  2A44               	incf	_stepAmount+1,f,c
  6468                           
  6469                           ; BSR set to: 0
  6470                           ;main.c: 621: LATCbits.LC2 = !LATCbits.LC2;;
  6471  000A5A  B48B               	btfsc	3979,2,c	;volatile
  6472  000A5C  D003               	goto	i2u426_40
  6473  000A5E  6A24               	clrf	??_ISR& (0+255),c
  6474  000A60  2A24               	incf	??_ISR& (0+255),f,c
  6475  000A62  D001               	goto	i2u427_48
  6476  000A64                     i2u426_40:
  6477  000A64  6A24               	clrf	??_ISR& (0+255),c
  6478  000A66                     i2u427_48:
  6479  000A66  4624               	rlncf	??_ISR,f,c
  6480  000A68  4624               	rlncf	??_ISR,f,c
  6481  000A6A  508B               	movf	3979,w,c	;volatile
  6482  000A6C  1824               	xorwf	??_ISR,w,c
  6483  000A6E  0BFB               	andlw	-5
  6484  000A70  1824               	xorwf	??_ISR,w,c
  6485  000A72  6E8B               	movwf	3979,c	;volatile
  6486                           
  6487                           ;main.c: 622: if (stepAmount >= 40){
  6488  000A74  5044               	movf	_stepAmount+1,w,c
  6489  000A76  E104               	bnz	i2u428_40
  6490  000A78  0E28               	movlw	40
  6491  000A7A  5C43               	subwf	_stepAmount,w,c
  6492  000A7C  A0D8               	btfss	status,0,c
  6493  000A7E  D091               	goto	i2l4239
  6494  000A80                     i2u428_40:
  6495                           
  6496                           ;main.c: 623: stepAmount = 0;
  6497  000A80  0E00               	movlw	0
  6498  000A82  6E44               	movwf	_stepAmount+1,c
  6499  000A84  0E00               	movlw	0
  6500  000A86  6E43               	movwf	_stepAmount,c
  6501                           
  6502                           ;main.c: 624: stepGear = 4;
  6503  000A88  0E04               	movlw	4
  6504  000A8A  D043               	goto	L5
  6505  000A8C                     i2l4187:
  6506                           
  6507                           ; BSR set to: 0
  6508                           ;main.c: 625: LATCbits.LC1= 1;;
  6509  000A8C  828B               	bsf	3979,1,c	;volatile
  6510                           
  6511                           ; BSR set to: 0
  6512                           ;main.c: 626: }
  6513                           ;main.c: 627: }
  6514  000A8E  D089               	goto	i2l4239
  6515  000A90                     i2l4189:
  6516                           
  6517                           ; BSR set to: 0
  6518                           ;main.c: 628: else if (stepGear == 4){
  6519  000A90  0E04               	movlw	4
  6520  000A92  0100               	movlb	0	; () banked
  6521  000A94  19C2               	xorwf	_stepGear& (0+255),w,b
  6522  000A96  A4D8               	btfss	status,2,c
  6523  000A98  D01D               	goto	i2l4201
  6524                           
  6525                           ; BSR set to: 0
  6526                           ;main.c: 629: stepAmount++;
  6527  000A9A  4A43               	infsnz	_stepAmount,f,c
  6528  000A9C  2A44               	incf	_stepAmount+1,f,c
  6529                           
  6530                           ; BSR set to: 0
  6531                           ;main.c: 630: LATCbits.LC2 = !LATCbits.LC2;;
  6532  000A9E  B48B               	btfsc	3979,2,c	;volatile
  6533  000AA0  D003               	goto	i2u430_40
  6534  000AA2  6A24               	clrf	??_ISR& (0+255),c
  6535  000AA4  2A24               	incf	??_ISR& (0+255),f,c
  6536  000AA6  D001               	goto	i2u431_48
  6537  000AA8                     i2u430_40:
  6538  000AA8  6A24               	clrf	??_ISR& (0+255),c
  6539  000AAA                     i2u431_48:
  6540  000AAA  4624               	rlncf	??_ISR,f,c
  6541  000AAC  4624               	rlncf	??_ISR,f,c
  6542  000AAE  508B               	movf	3979,w,c	;volatile
  6543  000AB0  1824               	xorwf	??_ISR,w,c
  6544  000AB2  0BFB               	andlw	-5
  6545  000AB4  1824               	xorwf	??_ISR,w,c
  6546  000AB6  6E8B               	movwf	3979,c	;volatile
  6547                           
  6548                           ;main.c: 631: if (stepAmount >= 40){
  6549  000AB8  5044               	movf	_stepAmount+1,w,c
  6550  000ABA  E104               	bnz	i2u432_40
  6551  000ABC  0E28               	movlw	40
  6552  000ABE  5C43               	subwf	_stepAmount,w,c
  6553  000AC0  A0D8               	btfss	status,0,c
  6554  000AC2  D06F               	goto	i2l4239
  6555  000AC4                     i2u432_40:
  6556                           
  6557                           ;main.c: 632: stepAmount = 0;
  6558  000AC4  0E00               	movlw	0
  6559  000AC6  6E44               	movwf	_stepAmount+1,c
  6560  000AC8  0E00               	movlw	0
  6561  000ACA  6E43               	movwf	_stepAmount,c
  6562                           
  6563                           ;main.c: 633: stepGear = 5;
  6564  000ACC  0E05               	movlw	5
  6565  000ACE  D043               	goto	L6
  6566  000AD0                     i2l4199:
  6567                           
  6568                           ; BSR set to: 0
  6569                           ;main.c: 634: LATCbits.LC1= 0;;
  6570  000AD0  928B               	bcf	3979,1,c	;volatile
  6571                           
  6572                           ; BSR set to: 0
  6573                           ;main.c: 635: }
  6574                           ;main.c: 636: }
  6575  000AD2  D067               	goto	i2l4239
  6576  000AD4                     i2l4201:
  6577                           
  6578                           ; BSR set to: 0
  6579                           ;main.c: 637: else if (stepGear == 5){
  6580  000AD4  0E05               	movlw	5
  6581  000AD6  0100               	movlb	0	; () banked
  6582  000AD8  19C2               	xorwf	_stepGear& (0+255),w,b
  6583  000ADA  A4D8               	btfss	status,2,c
  6584  000ADC  D01D               	goto	i2l4213
  6585                           
  6586                           ; BSR set to: 0
  6587                           ;main.c: 638: stepAmount++;
  6588  000ADE  4A43               	infsnz	_stepAmount,f,c
  6589  000AE0  2A44               	incf	_stepAmount+1,f,c
  6590                           
  6591                           ; BSR set to: 0
  6592                           ;main.c: 639: LATCbits.LC2 = !LATCbits.LC2;;
  6593  000AE2  B48B               	btfsc	3979,2,c	;volatile
  6594  000AE4  D003               	goto	i2u434_40
  6595  000AE6  6A24               	clrf	??_ISR& (0+255),c
  6596  000AE8  2A24               	incf	??_ISR& (0+255),f,c
  6597  000AEA  D001               	goto	i2u435_48
  6598  000AEC                     i2u434_40:
  6599  000AEC  6A24               	clrf	??_ISR& (0+255),c
  6600  000AEE                     i2u435_48:
  6601  000AEE  4624               	rlncf	??_ISR,f,c
  6602  000AF0  4624               	rlncf	??_ISR,f,c
  6603  000AF2  508B               	movf	3979,w,c	;volatile
  6604  000AF4  1824               	xorwf	??_ISR,w,c
  6605  000AF6  0BFB               	andlw	-5
  6606  000AF8  1824               	xorwf	??_ISR,w,c
  6607  000AFA  6E8B               	movwf	3979,c	;volatile
  6608                           
  6609                           ;main.c: 640: if (stepAmount >= 40){
  6610  000AFC  5044               	movf	_stepAmount+1,w,c
  6611  000AFE  E104               	bnz	i2u436_40
  6612  000B00  0E28               	movlw	40
  6613  000B02  5C43               	subwf	_stepAmount,w,c
  6614  000B04  A0D8               	btfss	status,0,c
  6615  000B06  D04D               	goto	i2l4239
  6616  000B08                     i2u436_40:
  6617                           
  6618                           ;main.c: 641: stepAmount = 0;
  6619  000B08  0E00               	movlw	0
  6620  000B0A  6E44               	movwf	_stepAmount+1,c
  6621  000B0C  0E00               	movlw	0
  6622  000B0E  6E43               	movwf	_stepAmount,c
  6623                           
  6624                           ;main.c: 642: stepGear = 6;
  6625  000B10  0E06               	movlw	6
  6626  000B12                     L5:
  6627  000B12  0100               	movlb	0	; () banked
  6628  000B14  6FC2               	movwf	_stepGear& (0+255),b
  6629  000B16  D7BA               	goto	i2l4187
  6630  000B18                     i2l4213:
  6631                           
  6632                           ; BSR set to: 0
  6633                           ;main.c: 646: else if (stepGear == 6){
  6634  000B18  0E06               	movlw	6
  6635  000B1A  0100               	movlb	0	; () banked
  6636  000B1C  19C2               	xorwf	_stepGear& (0+255),w,b
  6637  000B1E  A4D8               	btfss	status,2,c
  6638  000B20  D01D               	goto	i2l4225
  6639                           
  6640                           ; BSR set to: 0
  6641                           ;main.c: 647: stepAmount++;
  6642  000B22  4A43               	infsnz	_stepAmount,f,c
  6643  000B24  2A44               	incf	_stepAmount+1,f,c
  6644                           
  6645                           ; BSR set to: 0
  6646                           ;main.c: 648: LATCbits.LC2 = !LATCbits.LC2;;
  6647  000B26  B48B               	btfsc	3979,2,c	;volatile
  6648  000B28  D003               	goto	i2u438_40
  6649  000B2A  6A24               	clrf	??_ISR& (0+255),c
  6650  000B2C  2A24               	incf	??_ISR& (0+255),f,c
  6651  000B2E  D001               	goto	i2u439_48
  6652  000B30                     i2u438_40:
  6653  000B30  6A24               	clrf	??_ISR& (0+255),c
  6654  000B32                     i2u439_48:
  6655  000B32  4624               	rlncf	??_ISR,f,c
  6656  000B34  4624               	rlncf	??_ISR,f,c
  6657  000B36  508B               	movf	3979,w,c	;volatile
  6658  000B38  1824               	xorwf	??_ISR,w,c
  6659  000B3A  0BFB               	andlw	-5
  6660  000B3C  1824               	xorwf	??_ISR,w,c
  6661  000B3E  6E8B               	movwf	3979,c	;volatile
  6662                           
  6663                           ;main.c: 649: if (stepAmount >= 40){
  6664  000B40  5044               	movf	_stepAmount+1,w,c
  6665  000B42  E104               	bnz	i2u440_40
  6666  000B44  0E28               	movlw	40
  6667  000B46  5C43               	subwf	_stepAmount,w,c
  6668  000B48  A0D8               	btfss	status,0,c
  6669  000B4A  D02B               	goto	i2l4239
  6670  000B4C                     i2u440_40:
  6671                           
  6672                           ;main.c: 650: stepAmount = 0;
  6673  000B4C  0E00               	movlw	0
  6674  000B4E  6E44               	movwf	_stepAmount+1,c
  6675  000B50  0E00               	movlw	0
  6676  000B52  6E43               	movwf	_stepAmount,c
  6677                           
  6678                           ;main.c: 651: stepGear = 7;
  6679  000B54  0E07               	movlw	7
  6680  000B56                     L6:
  6681  000B56  0100               	movlb	0	; () banked
  6682  000B58  6FC2               	movwf	_stepGear& (0+255),b
  6683  000B5A  D7BA               	goto	i2l4199
  6684  000B5C                     i2l4225:
  6685                           
  6686                           ; BSR set to: 0
  6687                           ;main.c: 655: else if (stepGear == 7){
  6688  000B5C  0E07               	movlw	7
  6689  000B5E  0100               	movlb	0	; () banked
  6690  000B60  19C2               	xorwf	_stepGear& (0+255),w,b
  6691  000B62  A4D8               	btfss	status,2,c
  6692  000B64  D01E               	goto	i2l4239
  6693                           
  6694                           ; BSR set to: 0
  6695                           ;main.c: 656: stepAmount ++;
  6696  000B66  4A43               	infsnz	_stepAmount,f,c
  6697  000B68  2A44               	incf	_stepAmount+1,f,c
  6698                           
  6699                           ; BSR set to: 0
  6700                           ;main.c: 657: LATCbits.LC2 = !LATCbits.LC2;;
  6701  000B6A  B48B               	btfsc	3979,2,c	;volatile
  6702  000B6C  D003               	goto	i2u442_40
  6703  000B6E  6A24               	clrf	??_ISR& (0+255),c
  6704  000B70  2A24               	incf	??_ISR& (0+255),f,c
  6705  000B72  D001               	goto	i2u443_48
  6706  000B74                     i2u442_40:
  6707  000B74  6A24               	clrf	??_ISR& (0+255),c
  6708  000B76                     i2u443_48:
  6709  000B76  4624               	rlncf	??_ISR,f,c
  6710  000B78  4624               	rlncf	??_ISR,f,c
  6711  000B7A  508B               	movf	3979,w,c	;volatile
  6712  000B7C  1824               	xorwf	??_ISR,w,c
  6713  000B7E  0BFB               	andlw	-5
  6714  000B80  1824               	xorwf	??_ISR,w,c
  6715  000B82  6E8B               	movwf	3979,c	;volatile
  6716                           
  6717                           ;main.c: 658: if (stepAmount >= 20){
  6718  000B84  5044               	movf	_stepAmount+1,w,c
  6719  000B86  E104               	bnz	i2u444_40
  6720  000B88  0E14               	movlw	20
  6721  000B8A  5C43               	subwf	_stepAmount,w,c
  6722  000B8C  A0D8               	btfss	status,0,c
  6723  000B8E  D009               	goto	i2l4239
  6724  000B90                     i2u444_40:
  6725                           
  6726                           ;main.c: 659: stepAmount = 0;
  6727  000B90  0E00               	movlw	0
  6728  000B92  6E44               	movwf	_stepAmount+1,c
  6729  000B94  0E00               	movlw	0
  6730  000B96  6E43               	movwf	_stepAmount,c
  6731                           
  6732                           ;main.c: 660: stepGear = 0;
  6733  000B98  0E00               	movlw	0
  6734  000B9A  0100               	movlb	0	; () banked
  6735  000B9C  6FC2               	movwf	_stepGear& (0+255),b
  6736                           
  6737                           ; BSR set to: 0
  6738                           ;main.c: 661: LATCbits.LC1= 0;;
  6739  000B9E  928B               	bcf	3979,1,c	;volatile
  6740                           
  6741                           ; BSR set to: 0
  6742                           ;main.c: 662: LATCbits.LC2 = 0;;
  6743  000BA0  948B               	bcf	3979,2,c	;volatile
  6744  000BA2                     i2l4239:
  6745                           
  6746                           ;main.c: 663: }
  6747                           ;main.c: 664: }
  6748                           ;main.c: 666: }
  6749                           ;main.c: 667: if (plat1Left){
  6750  000BA2  0100               	movlb	0	; () banked
  6751  000BA4  51AE               	movf	_plat1Left& (0+255),w,b
  6752  000BA6  0100               	movlb	0	; () banked
  6753  000BA8  11AF               	iorwf	(_plat1Left+1)& (0+255),w,b
  6754  000BAA  B4D8               	btfsc	status,2,c
  6755  000BAC  D022               	goto	i2l4265
  6756                           
  6757                           ; BSR set to: 0
  6758                           ;main.c: 668: if (step1 == 1){
  6759  000BAE  0449               	decf	_step1,w,c
  6760  000BB0  A4D8               	btfss	status,2,c
  6761  000BB2  D002               	goto	i2l4245
  6762                           
  6763                           ; BSR set to: 0
  6764                           ;main.c: 669: LATAbits.LA5 = 1;;
  6765  000BB4  8A89               	bsf	3977,5,c	;volatile
  6766                           
  6767                           ;main.c: 670: LATAbits.LA4 = 0;;
  6768  000BB6  9889               	bcf	3977,4,c	;volatile
  6769  000BB8                     i2l4245:
  6770                           
  6771                           ; BSR set to: 0
  6772                           ;main.c: 671: }
  6773                           ;main.c: 672: if (step1 == 2){
  6774  000BB8  0E02               	movlw	2
  6775  000BBA  1849               	xorwf	_step1,w,c
  6776  000BBC  A4D8               	btfss	status,2,c
  6777  000BBE  D002               	goto	i2l4249
  6778                           
  6779                           ; BSR set to: 0
  6780                           ;main.c: 673: LATAbits.LA2 = 0;;
  6781  000BC0  9489               	bcf	3977,2,c	;volatile
  6782                           
  6783                           ;main.c: 674: LATAbits.LA3 = 1;;
  6784  000BC2  8689               	bsf	3977,3,c	;volatile
  6785  000BC4                     i2l4249:
  6786                           
  6787                           ; BSR set to: 0
  6788                           ;main.c: 675: }
  6789                           ;main.c: 676: if (step1 == 3){
  6790  000BC4  0E03               	movlw	3
  6791  000BC6  1849               	xorwf	_step1,w,c
  6792  000BC8  A4D8               	btfss	status,2,c
  6793  000BCA  D002               	goto	i2l4253
  6794                           
  6795                           ; BSR set to: 0
  6796                           ;main.c: 677: LATAbits.LA5 = 0;;
  6797  000BCC  9A89               	bcf	3977,5,c	;volatile
  6798                           
  6799                           ;main.c: 678: LATAbits.LA4 = 1;;
  6800  000BCE  8889               	bsf	3977,4,c	;volatile
  6801  000BD0                     i2l4253:
  6802                           
  6803                           ; BSR set to: 0
  6804                           ;main.c: 679: }
  6805                           ;main.c: 680: if (step1 == 4){
  6806  000BD0  0E04               	movlw	4
  6807  000BD2  1849               	xorwf	_step1,w,c
  6808  000BD4  A4D8               	btfss	status,2,c
  6809  000BD6  D002               	goto	i2l4257
  6810                           
  6811                           ; BSR set to: 0
  6812                           ;main.c: 681: LATAbits.LA2 = 1;;
  6813  000BD8  8489               	bsf	3977,2,c	;volatile
  6814                           
  6815                           ;main.c: 682: LATAbits.LA3 = 0;;
  6816  000BDA  9689               	bcf	3977,3,c	;volatile
  6817  000BDC                     i2l4257:
  6818                           
  6819                           ; BSR set to: 0
  6820                           ;main.c: 683: }
  6821                           ;main.c: 684: plat1Left--;
  6822  000BDC  0100               	movlb	0	; () banked
  6823  000BDE  07AE               	decf	_plat1Left& (0+255),f,b
  6824  000BE0  A0D8               	btfss	status,0,c
  6825  000BE2  07AF               	decf	(_plat1Left+1)& (0+255),f,b
  6826                           
  6827                           ; BSR set to: 0
  6828                           ;main.c: 685: if (step1>=4)
  6829  000BE4  0E03               	movlw	3
  6830  000BE6  6449               	cpfsgt	_step1,c
  6831  000BE8  D003               	goto	i2l4263
  6832                           
  6833                           ; BSR set to: 0
  6834                           ;main.c: 686: step1 = 1;
  6835  000BEA  0E01               	movlw	1
  6836  000BEC  6E49               	movwf	_step1,c
  6837  000BEE  D001               	goto	i2l4265
  6838  000BF0                     i2l4263:
  6839                           
  6840                           ; BSR set to: 0
  6841                           ;main.c: 687: else
  6842                           ;main.c: 688: step1++;
  6843  000BF0  2A49               	incf	_step1,f,c
  6844  000BF2                     i2l4265:
  6845                           
  6846                           ; BSR set to: 0
  6847                           ;main.c: 689: }
  6848                           ;main.c: 690: if (plat1Right){
  6849  000BF2  0100               	movlb	0	; () banked
  6850  000BF4  51B0               	movf	_plat1Right& (0+255),w,b
  6851  000BF6  0100               	movlb	0	; () banked
  6852  000BF8  11B1               	iorwf	(_plat1Right+1)& (0+255),w,b
  6853  000BFA  B4D8               	btfsc	status,2,c
  6854  000BFC  D022               	goto	i2l4291
  6855                           
  6856                           ; BSR set to: 0
  6857                           ;main.c: 691: if (step1 == 4){
  6858  000BFE  0E04               	movlw	4
  6859  000C00  1849               	xorwf	_step1,w,c
  6860  000C02  A4D8               	btfss	status,2,c
  6861  000C04  D002               	goto	i2l4271
  6862                           
  6863                           ; BSR set to: 0
  6864                           ;main.c: 692: LATAbits.LA5 = 0;;
  6865  000C06  9A89               	bcf	3977,5,c	;volatile
  6866                           
  6867                           ;main.c: 693: LATAbits.LA4 = 1;;
  6868  000C08  8889               	bsf	3977,4,c	;volatile
  6869  000C0A                     i2l4271:
  6870                           
  6871                           ; BSR set to: 0
  6872                           ;main.c: 694: }
  6873                           ;main.c: 695: if (step1 == 3){
  6874  000C0A  0E03               	movlw	3
  6875  000C0C  1849               	xorwf	_step1,w,c
  6876  000C0E  A4D8               	btfss	status,2,c
  6877  000C10  D002               	goto	i2l4275
  6878                           
  6879                           ; BSR set to: 0
  6880                           ;main.c: 696: LATAbits.LA2 = 0;;
  6881  000C12  9489               	bcf	3977,2,c	;volatile
  6882                           
  6883                           ;main.c: 697: LATAbits.LA3 = 1;;
  6884  000C14  8689               	bsf	3977,3,c	;volatile
  6885  000C16                     i2l4275:
  6886                           
  6887                           ; BSR set to: 0
  6888                           ;main.c: 698: }
  6889                           ;main.c: 699: if (step1 == 2){
  6890  000C16  0E02               	movlw	2
  6891  000C18  1849               	xorwf	_step1,w,c
  6892  000C1A  A4D8               	btfss	status,2,c
  6893  000C1C  D002               	goto	i2l4279
  6894                           
  6895                           ; BSR set to: 0
  6896                           ;main.c: 700: LATAbits.LA5 = 1;;
  6897  000C1E  8A89               	bsf	3977,5,c	;volatile
  6898                           
  6899                           ;main.c: 701: LATAbits.LA4 = 0;;
  6900  000C20  9889               	bcf	3977,4,c	;volatile
  6901  000C22                     i2l4279:
  6902                           
  6903                           ; BSR set to: 0
  6904                           ;main.c: 702: }
  6905                           ;main.c: 703: if (step1 == 1){
  6906  000C22  0449               	decf	_step1,w,c
  6907  000C24  A4D8               	btfss	status,2,c
  6908  000C26  D002               	goto	i2l4283
  6909                           
  6910                           ; BSR set to: 0
  6911                           ;main.c: 704: LATAbits.LA2 = 1;;
  6912  000C28  8489               	bsf	3977,2,c	;volatile
  6913                           
  6914                           ;main.c: 705: LATAbits.LA3 = 0;;
  6915  000C2A  9689               	bcf	3977,3,c	;volatile
  6916  000C2C                     i2l4283:
  6917                           
  6918                           ; BSR set to: 0
  6919                           ;main.c: 706: }
  6920                           ;main.c: 707: plat1Right--;
  6921  000C2C  0100               	movlb	0	; () banked
  6922  000C2E  07B0               	decf	_plat1Right& (0+255),f,b
  6923  000C30  A0D8               	btfss	status,0,c
  6924  000C32  07B1               	decf	(_plat1Right+1)& (0+255),f,b
  6925                           
  6926                           ; BSR set to: 0
  6927                           ;main.c: 708: if (step1<=1)
  6928  000C34  0E02               	movlw	2
  6929  000C36  6049               	cpfslt	_step1,c
  6930  000C38  D003               	goto	i2l4289
  6931                           
  6932                           ; BSR set to: 0
  6933                           ;main.c: 709: step1 = 4;
  6934  000C3A  0E04               	movlw	4
  6935  000C3C  6E49               	movwf	_step1,c
  6936  000C3E  D001               	goto	i2l4291
  6937  000C40                     i2l4289:
  6938                           
  6939                           ; BSR set to: 0
  6940                           ;main.c: 710: else
  6941                           ;main.c: 711: step1--;
  6942  000C40  0649               	decf	_step1,f,c
  6943  000C42                     i2l4291:
  6944                           
  6945                           ; BSR set to: 0
  6946                           ;main.c: 712: }
  6947                           ;main.c: 713: if (plat2Left){
  6948  000C42  0100               	movlb	0	; () banked
  6949  000C44  51B2               	movf	_plat2Left& (0+255),w,b
  6950  000C46  0100               	movlb	0	; () banked
  6951  000C48  11B3               	iorwf	(_plat2Left+1)& (0+255),w,b
  6952  000C4A  B4D8               	btfsc	status,2,c
  6953  000C4C  D022               	goto	i2l4317
  6954                           
  6955                           ; BSR set to: 0
  6956                           ;main.c: 714: if (step2 == 1){
  6957  000C4E  044A               	decf	_step2,w,c
  6958  000C50  A4D8               	btfss	status,2,c
  6959  000C52  D002               	goto	i2l4297
  6960                           
  6961                           ; BSR set to: 0
  6962                           ;main.c: 715: LATEbits.LE2 = 1;;
  6963  000C54  848D               	bsf	3981,2,c	;volatile
  6964                           
  6965                           ;main.c: 716: LATCbits.LC6 = 0;;
  6966  000C56  9C8B               	bcf	3979,6,c	;volatile
  6967  000C58                     i2l4297:
  6968                           
  6969                           ; BSR set to: 0
  6970                           ;main.c: 717: }
  6971                           ;main.c: 718: if (step2 == 2){
  6972  000C58  0E02               	movlw	2
  6973  000C5A  184A               	xorwf	_step2,w,c
  6974  000C5C  A4D8               	btfss	status,2,c
  6975  000C5E  D002               	goto	i2l4301
  6976                           
  6977                           ; BSR set to: 0
  6978                           ;main.c: 719: LATBbits.LB0 = 0;;
  6979  000C60  908A               	bcf	3978,0,c	;volatile
  6980                           
  6981                           ;main.c: 720: LATBbits.LB2 = 1;;
  6982  000C62  848A               	bsf	3978,2,c	;volatile
  6983  000C64                     i2l4301:
  6984                           
  6985                           ; BSR set to: 0
  6986                           ;main.c: 721: }
  6987                           ;main.c: 722: if (step2 == 3){
  6988  000C64  0E03               	movlw	3
  6989  000C66  184A               	xorwf	_step2,w,c
  6990  000C68  A4D8               	btfss	status,2,c
  6991  000C6A  D002               	goto	i2l4305
  6992                           
  6993                           ; BSR set to: 0
  6994                           ;main.c: 723: LATEbits.LE2 = 0;;
  6995  000C6C  948D               	bcf	3981,2,c	;volatile
  6996                           
  6997                           ;main.c: 724: LATCbits.LC6 = 1;;
  6998  000C6E  8C8B               	bsf	3979,6,c	;volatile
  6999  000C70                     i2l4305:
  7000                           
  7001                           ; BSR set to: 0
  7002                           ;main.c: 725: }
  7003                           ;main.c: 726: if (step2 == 4){
  7004  000C70  0E04               	movlw	4
  7005  000C72  184A               	xorwf	_step2,w,c
  7006  000C74  A4D8               	btfss	status,2,c
  7007  000C76  D002               	goto	i2l4309
  7008                           
  7009                           ; BSR set to: 0
  7010                           ;main.c: 727: LATBbits.LB0 = 1;;
  7011  000C78  808A               	bsf	3978,0,c	;volatile
  7012                           
  7013                           ;main.c: 728: LATBbits.LB2 = 0;;
  7014  000C7A  948A               	bcf	3978,2,c	;volatile
  7015  000C7C                     i2l4309:
  7016                           
  7017                           ; BSR set to: 0
  7018                           ;main.c: 729: }
  7019                           ;main.c: 730: plat2Left--;
  7020  000C7C  0100               	movlb	0	; () banked
  7021  000C7E  07B2               	decf	_plat2Left& (0+255),f,b
  7022  000C80  A0D8               	btfss	status,0,c
  7023  000C82  07B3               	decf	(_plat2Left+1)& (0+255),f,b
  7024                           
  7025                           ; BSR set to: 0
  7026                           ;main.c: 731: if (step2>=4)
  7027  000C84  0E03               	movlw	3
  7028  000C86  644A               	cpfsgt	_step2,c
  7029  000C88  D003               	goto	i2l4315
  7030                           
  7031                           ; BSR set to: 0
  7032                           ;main.c: 732: step2 = 1;
  7033  000C8A  0E01               	movlw	1
  7034  000C8C  6E4A               	movwf	_step2,c
  7035  000C8E  D001               	goto	i2l4317
  7036  000C90                     i2l4315:
  7037                           
  7038                           ; BSR set to: 0
  7039                           ;main.c: 733: else
  7040                           ;main.c: 734: step2++;
  7041  000C90  2A4A               	incf	_step2,f,c
  7042  000C92                     i2l4317:
  7043                           
  7044                           ; BSR set to: 0
  7045                           ;main.c: 735: }
  7046                           ;main.c: 736: if (plat2Right){
  7047  000C92  0100               	movlb	0	; () banked
  7048  000C94  51B4               	movf	_plat2Right& (0+255),w,b
  7049  000C96  0100               	movlb	0	; () banked
  7050  000C98  11B5               	iorwf	(_plat2Right+1)& (0+255),w,b
  7051  000C9A  B4D8               	btfsc	status,2,c
  7052  000C9C  D022               	goto	i2l419
  7053                           
  7054                           ; BSR set to: 0
  7055                           ;main.c: 737: if (step2 == 4){
  7056  000C9E  0E04               	movlw	4
  7057  000CA0  184A               	xorwf	_step2,w,c
  7058  000CA2  A4D8               	btfss	status,2,c
  7059  000CA4  D002               	goto	i2l4323
  7060                           
  7061                           ; BSR set to: 0
  7062                           ;main.c: 738: LATEbits.LE2 = 0;;
  7063  000CA6  948D               	bcf	3981,2,c	;volatile
  7064                           
  7065                           ;main.c: 739: LATCbits.LC6 = 1;;
  7066  000CA8  8C8B               	bsf	3979,6,c	;volatile
  7067  000CAA                     i2l4323:
  7068                           
  7069                           ; BSR set to: 0
  7070                           ;main.c: 740: }
  7071                           ;main.c: 741: if (step2 == 3){
  7072  000CAA  0E03               	movlw	3
  7073  000CAC  184A               	xorwf	_step2,w,c
  7074  000CAE  A4D8               	btfss	status,2,c
  7075  000CB0  D002               	goto	i2l4327
  7076                           
  7077                           ; BSR set to: 0
  7078                           ;main.c: 742: LATBbits.LB0 = 0;;
  7079  000CB2  908A               	bcf	3978,0,c	;volatile
  7080                           
  7081                           ;main.c: 743: LATBbits.LB2 = 1;;
  7082  000CB4  848A               	bsf	3978,2,c	;volatile
  7083  000CB6                     i2l4327:
  7084                           
  7085                           ; BSR set to: 0
  7086                           ;main.c: 744: }
  7087                           ;main.c: 745: if (step2 == 2){
  7088  000CB6  0E02               	movlw	2
  7089  000CB8  184A               	xorwf	_step2,w,c
  7090  000CBA  A4D8               	btfss	status,2,c
  7091  000CBC  D002               	goto	i2l4331
  7092                           
  7093                           ; BSR set to: 0
  7094                           ;main.c: 746: LATEbits.LE2 = 1;;
  7095  000CBE  848D               	bsf	3981,2,c	;volatile
  7096                           
  7097                           ;main.c: 747: LATCbits.LC6 = 0;;
  7098  000CC0  9C8B               	bcf	3979,6,c	;volatile
  7099  000CC2                     i2l4331:
  7100                           
  7101                           ; BSR set to: 0
  7102                           ;main.c: 748: }
  7103                           ;main.c: 749: if (step2 == 1){
  7104  000CC2  044A               	decf	_step2,w,c
  7105  000CC4  A4D8               	btfss	status,2,c
  7106  000CC6  D002               	goto	i2l4335
  7107                           
  7108                           ; BSR set to: 0
  7109                           ;main.c: 750: LATBbits.LB0 = 1;;
  7110  000CC8  808A               	bsf	3978,0,c	;volatile
  7111                           
  7112                           ;main.c: 751: LATBbits.LB2 = 0;;
  7113  000CCA  948A               	bcf	3978,2,c	;volatile
  7114  000CCC                     i2l4335:
  7115                           
  7116                           ; BSR set to: 0
  7117                           ;main.c: 752: }
  7118                           ;main.c: 753: plat2Right--;
  7119  000CCC  0100               	movlb	0	; () banked
  7120  000CCE  07B4               	decf	_plat2Right& (0+255),f,b
  7121  000CD0  A0D8               	btfss	status,0,c
  7122  000CD2  07B5               	decf	(_plat2Right+1)& (0+255),f,b
  7123                           
  7124                           ; BSR set to: 0
  7125                           ;main.c: 754: if (step2<=1)
  7126  000CD4  0E02               	movlw	2
  7127  000CD6  604A               	cpfslt	_step2,c
  7128  000CD8  D003               	goto	i2l4341
  7129                           
  7130                           ; BSR set to: 0
  7131                           ;main.c: 755: step2 = 4;
  7132  000CDA  0E04               	movlw	4
  7133  000CDC  6E4A               	movwf	_step2,c
  7134  000CDE  D001               	goto	i2l419
  7135  000CE0                     i2l4341:
  7136                           
  7137                           ; BSR set to: 0
  7138                           ;main.c: 756: else
  7139                           ;main.c: 757: step2--;
  7140  000CE0  064A               	decf	_step2,f,c
  7141  000CE2                     i2l419:
  7142                           
  7143                           ; BSR set to: 0
  7144  000CE2  C032  FFF5         	movff	??_ISR+14,tablat
  7145  000CE6  C031  FFF8         	movff	??_ISR+13,tblptru
  7146  000CEA  C030  FFF7         	movff	??_ISR+12,tblptrh
  7147  000CEE  C02F  FFF6         	movff	??_ISR+11,tblptrl
  7148  000CF2  C02E  FFF4         	movff	??_ISR+10,prodh
  7149  000CF6  C02D  FFF3         	movff	??_ISR+9,prodl
  7150  000CFA  C02C  FFDA         	movff	??_ISR+8,fsr2h
  7151  000CFE  C02B  FFD9         	movff	??_ISR+7,fsr2l
  7152  000D02  C02A  FFE2         	movff	??_ISR+6,fsr1h
  7153  000D06  C029  FFE1         	movff	??_ISR+5,fsr1l
  7154  000D0A  C028  FFEA         	movff	??_ISR+4,fsr0h
  7155  000D0E  C027  FFE9         	movff	??_ISR+3,fsr0l
  7156  000D12  C026  FFFB         	movff	??_ISR+2,pclatu
  7157  000D16  C025  FFFA         	movff	??_ISR+1,pclath
  7158  000D1A  924B               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7159  000D1C  0011               	retfie		f
  7160  000D1E                     __end_of_ISR:
  7161                           	opt stack 0
  7162                           pclatu	equ	0xFFB
  7163                           pclath	equ	0xFFA
  7164                           tblptru	equ	0xFF8
  7165                           tblptrh	equ	0xFF7
  7166                           tblptrl	equ	0xFF6
  7167                           tablat	equ	0xFF5
  7168                           prodh	equ	0xFF4
  7169                           prodl	equ	0xFF3
  7170                           intcon	equ	0xFF2
  7171                           intcon3	equ	0xFF0
  7172                           postinc0	equ	0xFEE
  7173                           fsr0h	equ	0xFEA
  7174                           fsr0l	equ	0xFE9
  7175                           wreg	equ	0xFE8
  7176                           fsr1h	equ	0xFE2
  7177                           fsr1l	equ	0xFE1
  7178                           indf2	equ	0xFDF
  7179                           postinc2	equ	0xFDE
  7180                           postdec2	equ	0xFDD
  7181                           fsr2h	equ	0xFDA
  7182                           fsr2l	equ	0xFD9
  7183                           status	equ	0xFD8
  7184                           
  7185 ;; *************** function _switchMenu *****************
  7186 ;; Defined at:
  7187 ;;		line 332 in file "../main.c"
  7188 ;; Parameters:    Size  Location     Type
  7189 ;;  left            1    wreg     unsigned char 
  7190 ;;  right           1   32[COMRAM] unsigned char 
  7191 ;;  key             1   33[COMRAM] unsigned char 
  7192 ;; Auto vars:     Size  Location     Type
  7193 ;;  left            1   34[COMRAM] unsigned char 
  7194 ;; Return value:  Size  Location     Type
  7195 ;;                  1    wreg      void 
  7196 ;; Registers used:
  7197 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7198 ;; Tracked objects:
  7199 ;;		On entry : 0/0
  7200 ;;		On exit  : 0/0
  7201 ;;		Unchanged: 0/0
  7202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7203 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7204 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7205 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7206 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7207 ;;Total ram usage:        3 bytes
  7208 ;; Hardware stack levels used:    1
  7209 ;; Hardware stack levels required when called:    3
  7210 ;; This function calls:
  7211 ;;		i2_lcdInst
  7212 ;;		i2_printf
  7213 ;;		i2_stopOperation
  7214 ;; This function is called by:
  7215 ;;		_ISR
  7216 ;; This function uses a non-reentrant model
  7217 ;;
  7218                           
  7219                           	psect	text24
  7220  001794                     __ptext24:
  7221                           	opt stack 0
  7222  001794                     _switchMenu:
  7223                           	opt stack 23
  7224                           
  7225                           ; BSR set to: 0
  7226                           ;incstack = 0
  7227                           ;switchMenu@left stored from wreg
  7228  001794  6E23               	movwf	switchMenu@left,c
  7229                           
  7230                           ;main.c: 334: if (key == '*'){
  7231  001796  0E2A               	movlw	42
  7232  001798  1822               	xorwf	switchMenu@key,w,c
  7233  00179A  A4D8               	btfss	status,2,c
  7234  00179C  D020               	goto	i2l3721
  7235                           
  7236                           ;main.c: 336: if(screenMode == 2){
  7237  00179E  0E02               	movlw	2
  7238  0017A0  0100               	movlb	0	; () banked
  7239  0017A2  19C7               	xorwf	_screenMode& (0+255),w,b
  7240  0017A4  A4D8               	btfss	status,2,c
  7241  0017A6  D013               	goto	i2l3717
  7242                           
  7243                           ; BSR set to: 0
  7244                           ;main.c: 337: screenMode = 1;
  7245  0017A8  0E01               	movlw	1
  7246  0017AA  0100               	movlb	0	; () banked
  7247  0017AC  6FC7               	movwf	_screenMode& (0+255),b
  7248                           
  7249                           ; BSR set to: 0
  7250                           ;main.c: 338: T0CONbits.TMR0ON = 1;
  7251  0017AE  8ED5               	bsf	4053,7,c	;volatile
  7252                           
  7253                           ; BSR set to: 0
  7254                           ;main.c: 339: T1CONbits.TMR1ON = 1;
  7255  0017B0  80CD               	bsf	4045,0,c	;volatile
  7256                           
  7257                           ;main.c: 340: startGear = 1;
  7258  0017B2  0E01               	movlw	1
  7259  0017B4  0100               	movlb	0	; () banked
  7260  0017B6  6FC1               	movwf	_startGear& (0+255),b
  7261                           
  7262                           ; BSR set to: 0
  7263                           ;main.c: 341: lcdInst(0b10000000);;
  7264  0017B8  0E80               	movlw	128
  7265  0017BA  EC2E  F00F         	call	i2_lcdInst
  7266                           
  7267                           ;main.c: 342: printf("RUNNING: 00:00  ");
  7268  0017BE  0E99               	movlw	low STR_23
  7269  0017C0  6E0D               	movwf	i2printf@f,c
  7270  0017C2  0EFF               	movlw	high STR_23
  7271  0017C4  6E0E               	movwf	i2printf@f+1,c
  7272  0017C6  EC65  F008         	call	i2_printf	;wreg free
  7273                           
  7274                           ;main.c: 343: LATCbits.LC0 = 1;;
  7275  0017CA  808B               	bsf	3979,0,c	;volatile
  7276                           
  7277                           ;main.c: 344: }
  7278  0017CC  0012               	return	
  7279  0017CE                     i2l3717:
  7280                           
  7281                           ;main.c: 345: else if (screenMode == 0)
  7282  0017CE  0100               	movlb	0	; () banked
  7283  0017D0  51C7               	movf	_screenMode& (0+255),w,b
  7284  0017D2  A4D8               	btfss	status,2,c
  7285  0017D4  0012               	return	
  7286                           
  7287                           ; BSR set to: 0
  7288                           ;main.c: 346: screenMode = 2;
  7289  0017D6  0E02               	movlw	2
  7290  0017D8  0100               	movlb	0	; () banked
  7291  0017DA  6FC7               	movwf	_screenMode& (0+255),b
  7292                           
  7293                           ; BSR set to: 0
  7294                           ;main.c: 347: }
  7295                           
  7296                           ; BSR set to: 0
  7297  0017DC  0012               	return	
  7298  0017DE                     i2l3721:
  7299                           
  7300                           ;main.c: 348: else if (screenMode == 1){
  7301  0017DE  0100               	movlb	0	; () banked
  7302  0017E0  05C7               	decf	_screenMode& (0+255),w,b
  7303  0017E2  A4D8               	btfss	status,2,c
  7304  0017E4  D00A               	goto	i2l3729
  7305                           
  7306                           ; BSR set to: 0
  7307                           ;main.c: 349: if (key == '#'){
  7308  0017E6  0E23               	movlw	35
  7309  0017E8  1822               	xorwf	switchMenu@key,w,c
  7310  0017EA  A4D8               	btfss	status,2,c
  7311  0017EC  0012               	return	
  7312                           
  7313                           ; BSR set to: 0
  7314                           ;main.c: 350: screenMode = 10;
  7315  0017EE  0E0A               	movlw	10
  7316  0017F0  0100               	movlb	0	; () banked
  7317  0017F2  6FC7               	movwf	_screenMode& (0+255),b
  7318                           
  7319                           ; BSR set to: 0
  7320                           ;main.c: 352: stopOperation();
  7321  0017F4  EC45  F00B         	call	i2_stopOperation	;wreg free
  7322                           
  7323                           ;main.c: 353: }
  7324                           ;main.c: 354: }
  7325  0017F8  0012               	return	
  7326  0017FA                     i2l3729:
  7327                           
  7328                           ;main.c: 355: else if (screenMode != 0){
  7329  0017FA  0100               	movlb	0	; () banked
  7330  0017FC  51C7               	movf	_screenMode& (0+255),w,b
  7331  0017FE  B4D8               	btfsc	status,2,c
  7332  001800  0012               	return	
  7333                           
  7334                           ; BSR set to: 0
  7335                           ;main.c: 356: if (key == right){
  7336  001802  5021               	movf	switchMenu@right,w,c
  7337  001804  1822               	xorwf	switchMenu@key,w,c
  7338  001806  A4D8               	btfss	status,2,c
  7339  001808  D00C               	goto	i2l3739
  7340                           
  7341                           ; BSR set to: 0
  7342                           ;main.c: 357: if (screenMode == 2)
  7343  00180A  0E02               	movlw	2
  7344  00180C  0100               	movlb	0	; () banked
  7345  00180E  19C7               	xorwf	_screenMode& (0+255),w,b
  7346  001810  A4D8               	btfss	status,2,c
  7347  001812  D004               	goto	i2l3737
  7348                           
  7349                           ; BSR set to: 0
  7350                           ;main.c: 358: screenMode = 9;
  7351  001814  0E09               	movlw	9
  7352  001816  0100               	movlb	0	; () banked
  7353  001818  6FC7               	movwf	_screenMode& (0+255),b
  7354  00181A  0012               	return	
  7355  00181C                     i2l3737:
  7356                           
  7357                           ; BSR set to: 0
  7358                           ;main.c: 359: else
  7359                           ;main.c: 360: screenMode--;
  7360  00181C  0100               	movlb	0	; () banked
  7361  00181E  07C7               	decf	_screenMode& (0+255),f,b
  7362                           
  7363                           ; BSR set to: 0
  7364                           ;main.c: 361: }
  7365  001820  0012               	return	
  7366  001822                     i2l3739:
  7367                           
  7368                           ; BSR set to: 0
  7369                           ;main.c: 362: else if (key == left){
  7370  001822  5023               	movf	switchMenu@left,w,c
  7371  001824  1822               	xorwf	switchMenu@key,w,c
  7372  001826  A4D8               	btfss	status,2,c
  7373  001828  0012               	return	
  7374                           
  7375                           ; BSR set to: 0
  7376                           ;main.c: 363: if (screenMode == 9)
  7377  00182A  0E09               	movlw	9
  7378  00182C  0100               	movlb	0	; () banked
  7379  00182E  19C7               	xorwf	_screenMode& (0+255),w,b
  7380  001830  A4D8               	btfss	status,2,c
  7381  001832  D004               	goto	i2l3745
  7382                           
  7383                           ; BSR set to: 0
  7384                           ;main.c: 364: screenMode = 2;
  7385  001834  0E02               	movlw	2
  7386  001836  0100               	movlb	0	; () banked
  7387  001838  6FC7               	movwf	_screenMode& (0+255),b
  7388  00183A  0012               	return	
  7389  00183C                     i2l3745:
  7390                           
  7391                           ; BSR set to: 0
  7392                           ;main.c: 365: else
  7393                           ;main.c: 366: screenMode++;
  7394  00183C  0100               	movlb	0	; () banked
  7395  00183E  2BC7               	incf	_screenMode& (0+255),f,b
  7396                           
  7397                           ; BSR set to: 0
  7398                           
  7399                           ; BSR set to: 0
  7400                           
  7401                           ; BSR set to: 0
  7402                           
  7403                           ; BSR set to: 0
  7404                           
  7405                           ; BSR set to: 0
  7406  001840  0012               	return	
  7407  001842                     __end_of_switchMenu:
  7408                           	opt stack 0
  7409                           pclatu	equ	0xFFB
  7410                           pclath	equ	0xFFA
  7411                           tblptru	equ	0xFF8
  7412                           tblptrh	equ	0xFF7
  7413                           tblptrl	equ	0xFF6
  7414                           tablat	equ	0xFF5
  7415                           prodh	equ	0xFF4
  7416                           prodl	equ	0xFF3
  7417                           intcon	equ	0xFF2
  7418                           intcon3	equ	0xFF0
  7419                           postinc0	equ	0xFEE
  7420                           fsr0h	equ	0xFEA
  7421                           fsr0l	equ	0xFE9
  7422                           wreg	equ	0xFE8
  7423                           fsr1h	equ	0xFE2
  7424                           fsr1l	equ	0xFE1
  7425                           indf2	equ	0xFDF
  7426                           postinc2	equ	0xFDE
  7427                           postdec2	equ	0xFDD
  7428                           fsr2h	equ	0xFDA
  7429                           fsr2l	equ	0xFD9
  7430                           status	equ	0xFD8
  7431                           
  7432 ;; *************** function i2_stopOperation *****************
  7433 ;; Defined at:
  7434 ;;		line 379 in file "../main.c"
  7435 ;; Parameters:    Size  Location     Type
  7436 ;;		None
  7437 ;; Auto vars:     Size  Location     Type
  7438 ;;		None
  7439 ;; Return value:  Size  Location     Type
  7440 ;;                  1    wreg      void 
  7441 ;; Registers used:
  7442 ;;		wreg, status,2, status,0, cstack
  7443 ;; Tracked objects:
  7444 ;;		On entry : 0/0
  7445 ;;		On exit  : 0/0
  7446 ;;		Unchanged: 0/0
  7447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7449 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7450 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7451 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7452 ;;Total ram usage:        0 bytes
  7453 ;; Hardware stack levels used:    1
  7454 ;; Hardware stack levels required when called:    1
  7455 ;; This function calls:
  7456 ;;		i2___awdiv
  7457 ;;		i2___awmod
  7458 ;; This function is called by:
  7459 ;;		_switchMenu
  7460 ;;		_ISR
  7461 ;; This function uses a non-reentrant model
  7462 ;;
  7463                           
  7464                           	psect	text25
  7465  00168A                     __ptext25:
  7466                           	opt stack 0
  7467  00168A                     i2_stopOperation:
  7468                           	opt stack 25
  7469                           
  7470                           ;main.c: 380: T0CONbits.TMR0ON = 0;
  7471                           
  7472                           ;incstack = 0
  7473  00168A  9ED5               	bcf	4053,7,c	;volatile
  7474                           
  7475                           ;main.c: 381: T1CONbits.TMR1ON = 0;
  7476  00168C  90CD               	bcf	4045,0,c	;volatile
  7477                           
  7478                           ;main.c: 382: TMR0 = 55770;
  7479  00168E  0ED9               	movlw	217
  7480  001690  6ED7               	movwf	4055,c	;volatile
  7481  001692  0EDA               	movlw	218
  7482  001694  6ED6               	movwf	4054,c	;volatile
  7483                           
  7484                           ;main.c: 383: TMR1 = 58035;
  7485  001696  0EE2               	movlw	226
  7486  001698  6ECF               	movwf	4047,c	;volatile
  7487  00169A  0EB3               	movlw	179
  7488  00169C  6ECE               	movwf	4046,c	;volatile
  7489                           
  7490                           ;main.c: 384: num9V = count9V;
  7491  00169E  C0B6  F0BB         	movff	_count9V,_num9V
  7492                           
  7493                           ;main.c: 385: numC = countC;
  7494  0016A2  C0B8  F0BE         	movff	_countC,_numC
  7495                           
  7496                           ;main.c: 386: numAA = countAA;
  7497  0016A6  C0B7  F0BC         	movff	_countAA,_numAA
  7498                           
  7499                           ;main.c: 387: numDrain = countDrain;
  7500  0016AA  C0B9  F0BF         	movff	_countDrain,_numDrain
  7501                           
  7502                           ;main.c: 388: numBats = count9V + countC + countAA + countDrain;
  7503  0016AE  0100               	movlb	0	; () banked
  7504  0016B0  51B6               	movf	_count9V& (0+255),w,b
  7505  0016B2  0100               	movlb	0	; () banked
  7506  0016B4  25B8               	addwf	_countC& (0+255),w,b
  7507  0016B6  0100               	movlb	0	; () banked
  7508  0016B8  25B7               	addwf	_countAA& (0+255),w,b
  7509  0016BA  0100               	movlb	0	; () banked
  7510  0016BC  25B9               	addwf	_countDrain& (0+255),w,b
  7511  0016BE  0100               	movlb	0	; () banked
  7512  0016C0  6FBD               	movwf	_numBats& (0+255),b
  7513                           
  7514                           ; BSR set to: 0
  7515                           ;main.c: 389: count9V = 0;
  7516  0016C2  0E00               	movlw	0
  7517  0016C4  0100               	movlb	0	; () banked
  7518  0016C6  6FB6               	movwf	_count9V& (0+255),b
  7519                           
  7520                           ; BSR set to: 0
  7521                           ;main.c: 390: countC = 0;
  7522  0016C8  0E00               	movlw	0
  7523  0016CA  0100               	movlb	0	; () banked
  7524  0016CC  6FB8               	movwf	_countC& (0+255),b
  7525                           
  7526                           ; BSR set to: 0
  7527                           ;main.c: 391: countAA = 0;
  7528  0016CE  0E00               	movlw	0
  7529  0016D0  0100               	movlb	0	; () banked
  7530  0016D2  6FB7               	movwf	_countAA& (0+255),b
  7531                           
  7532                           ; BSR set to: 0
  7533                           ;main.c: 392: countDrain = 0;
  7534  0016D4  0E00               	movlw	0
  7535  0016D6  0100               	movlb	0	; () banked
  7536  0016D8  6FB9               	movwf	_countDrain& (0+255),b
  7537                           
  7538                           ; BSR set to: 0
  7539                           ;main.c: 393: min = opTimer / 60;
  7540  0016DA  C046  F001         	movff	_opTimer,i2___awdiv@dividend
  7541  0016DE  6A02               	clrf	i2___awdiv@dividend+1,c
  7542  0016E0  0E00               	movlw	0
  7543  0016E2  6E04               	movwf	i2___awdiv@divisor+1,c
  7544  0016E4  0E3C               	movlw	60
  7545  0016E6  6E03               	movwf	i2___awdiv@divisor,c
  7546  0016E8  EC63  F00C         	call	i2___awdiv	;wreg free
  7547  0016EC  5001               	movf	?i2___awdiv,w,c
  7548  0016EE  0100               	movlb	0	; () banked
  7549  0016F0  6FBA               	movwf	_min& (0+255),b
  7550                           
  7551                           ; BSR set to: 0
  7552                           ;main.c: 394: sec = opTimer % 60;
  7553  0016F2  C046  F001         	movff	_opTimer,i2___awmod@dividend
  7554  0016F6  6A02               	clrf	i2___awmod@dividend+1,c
  7555  0016F8  0E00               	movlw	0
  7556  0016FA  6E04               	movwf	i2___awmod@divisor+1,c
  7557  0016FC  0E3C               	movlw	60
  7558  0016FE  6E03               	movwf	i2___awmod@divisor,c
  7559  001700  EC1E  F00D         	call	i2___awmod	;wreg free
  7560  001704  5001               	movf	?i2___awmod,w,c
  7561  001706  0100               	movlb	0	; () banked
  7562  001708  6FC0               	movwf	_sec& (0+255),b
  7563                           
  7564                           ; BSR set to: 0
  7565                           ;main.c: 395: opTimer = 0;
  7566  00170A  0E00               	movlw	0
  7567  00170C  6E46               	movwf	_opTimer,c
  7568                           
  7569                           ; BSR set to: 0
  7570                           ;main.c: 396: doneTimer = 0;
  7571  00170E  0E00               	movlw	0
  7572  001710  6E45               	movwf	_doneTimer,c
  7573                           
  7574                           ; BSR set to: 0
  7575                           ;main.c: 397: stepGear = 0;
  7576  001712  0E00               	movlw	0
  7577  001714  0100               	movlb	0	; () banked
  7578  001716  6FC2               	movwf	_stepGear& (0+255),b
  7579                           
  7580                           ; BSR set to: 0
  7581                           ;main.c: 398: stepAmount = 0;
  7582  001718  0E00               	movlw	0
  7583  00171A  6E44               	movwf	_stepAmount+1,c
  7584  00171C  0E00               	movlw	0
  7585  00171E  6E43               	movwf	_stepAmount,c
  7586                           
  7587                           ; BSR set to: 0
  7588                           ;main.c: 399: sorting = 0;
  7589  001720  0E00               	movlw	0
  7590  001722  6E48               	movwf	_sorting,c
  7591                           
  7592                           ; BSR set to: 0
  7593                           ;main.c: 400: plat1Left = 0;
  7594  001724  0E00               	movlw	0
  7595  001726  0100               	movlb	0	; () banked
  7596  001728  6FAF               	movwf	(_plat1Left+1)& (0+255),b
  7597  00172A  0E00               	movlw	0
  7598  00172C  6FAE               	movwf	_plat1Left& (0+255),b
  7599                           
  7600                           ; BSR set to: 0
  7601                           ;main.c: 401: plat1Right = 0;
  7602  00172E  0E00               	movlw	0
  7603  001730  0100               	movlb	0	; () banked
  7604  001732  6FB1               	movwf	(_plat1Right+1)& (0+255),b
  7605  001734  0E00               	movlw	0
  7606  001736  6FB0               	movwf	_plat1Right& (0+255),b
  7607                           
  7608                           ; BSR set to: 0
  7609                           ;main.c: 402: plat2Left = 0;
  7610  001738  0E00               	movlw	0
  7611  00173A  0100               	movlb	0	; () banked
  7612  00173C  6FB3               	movwf	(_plat2Left+1)& (0+255),b
  7613  00173E  0E00               	movlw	0
  7614  001740  6FB2               	movwf	_plat2Left& (0+255),b
  7615                           
  7616                           ; BSR set to: 0
  7617                           ;main.c: 403: plat2Right = 0;
  7618  001742  0E00               	movlw	0
  7619  001744  0100               	movlb	0	; () banked
  7620  001746  6FB5               	movwf	(_plat2Right+1)& (0+255),b
  7621  001748  0E00               	movlw	0
  7622  00174A  6FB4               	movwf	_plat2Right& (0+255),b
  7623                           
  7624                           ; BSR set to: 0
  7625                           ;main.c: 404: turn2BackLeft = 0;
  7626  00174C  0E00               	movlw	0
  7627  00174E  0100               	movlb	0	; () banked
  7628  001750  6FC5               	movwf	_turn2BackLeft& (0+255),b
  7629                           
  7630                           ; BSR set to: 0
  7631                           ;main.c: 405: turn1BackLeft = 0;
  7632  001752  0E00               	movlw	0
  7633  001754  0100               	movlb	0	; () banked
  7634  001756  6FC3               	movwf	_turn1BackLeft& (0+255),b
  7635                           
  7636                           ; BSR set to: 0
  7637                           ;main.c: 406: turn2BackRight = 0;
  7638  001758  0E00               	movlw	0
  7639  00175A  0100               	movlb	0	; () banked
  7640  00175C  6FC6               	movwf	_turn2BackRight& (0+255),b
  7641                           
  7642                           ; BSR set to: 0
  7643                           ;main.c: 407: turn1BackRight = 0;
  7644  00175E  0E00               	movlw	0
  7645  001760  0100               	movlb	0	; () banked
  7646  001762  6FC4               	movwf	_turn1BackRight& (0+255),b
  7647                           
  7648                           ; BSR set to: 0
  7649                           ;main.c: 408: count_3ms = 0;
  7650  001764  0E00               	movlw	0
  7651  001766  6E42               	movwf	_count_3ms+1,c
  7652  001768  0E00               	movlw	0
  7653  00176A  6E41               	movwf	_count_3ms,c
  7654                           
  7655                           ; BSR set to: 0
  7656                           ;main.c: 409: solOnTimer = 0;
  7657  00176C  0E00               	movlw	0
  7658  00176E  6E47               	movwf	_solOnTimer,c
  7659                           
  7660                           ; BSR set to: 0
  7661                           ;main.c: 410: LATEbits.LE0 = 0;;
  7662  001770  908D               	bcf	3981,0,c	;volatile
  7663                           
  7664                           ; BSR set to: 0
  7665                           ;main.c: 411: LATEbits.LE1 = 0;;
  7666  001772  928D               	bcf	3981,1,c	;volatile
  7667                           
  7668                           ; BSR set to: 0
  7669                           ;main.c: 412: LATCbits.LC5 = 0;;
  7670  001774  9A8B               	bcf	3979,5,c	;volatile
  7671                           
  7672                           ; BSR set to: 0
  7673                           ;main.c: 413: LATDbits.LD0 = 0;;
  7674  001776  908C               	bcf	3980,0,c	;volatile
  7675                           
  7676                           ; BSR set to: 0
  7677                           ;main.c: 414: LATDbits.LD1 = 0;;
  7678  001778  928C               	bcf	3980,1,c	;volatile
  7679                           
  7680                           ; BSR set to: 0
  7681                           ;main.c: 415: LATAbits.LA2 = 0;;
  7682  00177A  9489               	bcf	3977,2,c	;volatile
  7683                           
  7684                           ; BSR set to: 0
  7685                           ;main.c: 416: LATAbits.LA3 = 0;;
  7686  00177C  9689               	bcf	3977,3,c	;volatile
  7687                           
  7688                           ; BSR set to: 0
  7689                           ;main.c: 417: LATAbits.LA4 = 0;;
  7690  00177E  9889               	bcf	3977,4,c	;volatile
  7691                           
  7692                           ; BSR set to: 0
  7693                           ;main.c: 418: LATAbits.LA5 = 0;;
  7694  001780  9A89               	bcf	3977,5,c	;volatile
  7695                           
  7696                           ; BSR set to: 0
  7697                           ;main.c: 419: LATBbits.LB0 = 0;;
  7698  001782  908A               	bcf	3978,0,c	;volatile
  7699                           
  7700                           ; BSR set to: 0
  7701                           ;main.c: 420: LATBbits.LB2 = 0;;
  7702  001784  948A               	bcf	3978,2,c	;volatile
  7703                           
  7704                           ; BSR set to: 0
  7705                           ;main.c: 421: LATCbits.LC6 = 0;;
  7706  001786  9C8B               	bcf	3979,6,c	;volatile
  7707                           
  7708                           ; BSR set to: 0
  7709                           ;main.c: 422: LATEbits.LE2 = 0;;
  7710  001788  948D               	bcf	3981,2,c	;volatile
  7711                           
  7712                           ; BSR set to: 0
  7713                           ;main.c: 423: LATCbits.LC1= 0;;
  7714  00178A  928B               	bcf	3979,1,c	;volatile
  7715                           
  7716                           ; BSR set to: 0
  7717                           ;main.c: 424: LATCbits.LC7 = 0;;
  7718  00178C  9E8B               	bcf	3979,7,c	;volatile
  7719                           
  7720                           ; BSR set to: 0
  7721                           ;main.c: 425: LATCbits.LC2 = 0;;
  7722  00178E  948B               	bcf	3979,2,c	;volatile
  7723                           
  7724                           ; BSR set to: 0
  7725                           ;main.c: 426: LATCbits.LC0 = 0;;
  7726  001790  908B               	bcf	3979,0,c	;volatile
  7727                           
  7728                           ; BSR set to: 0
  7729  001792  0012               	return		;funcret
  7730  001794                     __end_ofi2_stopOperation:
  7731                           	opt stack 0
  7732                           pclatu	equ	0xFFB
  7733                           pclath	equ	0xFFA
  7734                           tblptru	equ	0xFF8
  7735                           tblptrh	equ	0xFF7
  7736                           tblptrl	equ	0xFF6
  7737                           tablat	equ	0xFF5
  7738                           prodh	equ	0xFF4
  7739                           prodl	equ	0xFF3
  7740                           intcon	equ	0xFF2
  7741                           intcon3	equ	0xFF0
  7742                           postinc0	equ	0xFEE
  7743                           fsr0h	equ	0xFEA
  7744                           fsr0l	equ	0xFE9
  7745                           wreg	equ	0xFE8
  7746                           fsr1h	equ	0xFE2
  7747                           fsr1l	equ	0xFE1
  7748                           indf2	equ	0xFDF
  7749                           postinc2	equ	0xFDE
  7750                           postdec2	equ	0xFDD
  7751                           fsr2h	equ	0xFDA
  7752                           fsr2l	equ	0xFD9
  7753                           status	equ	0xFD8
  7754                           
  7755 ;; *************** function i2___awmod *****************
  7756 ;; Defined at:
  7757 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  7758 ;; Parameters:    Size  Location     Type
  7759 ;;  dividend        2    0[COMRAM] int 
  7760 ;;  divisor         2    2[COMRAM] int 
  7761 ;; Auto vars:     Size  Location     Type
  7762 ;;  __awmod         1    5[COMRAM] unsigned char 
  7763 ;;  __awmod         1    4[COMRAM] unsigned char 
  7764 ;; Return value:  Size  Location     Type
  7765 ;;                  2    0[COMRAM] int 
  7766 ;; Registers used:
  7767 ;;		wreg, status,2, status,0
  7768 ;; Tracked objects:
  7769 ;;		On entry : 0/0
  7770 ;;		On exit  : 0/0
  7771 ;;		Unchanged: 0/0
  7772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7773 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7774 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7775 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7776 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7777 ;;Total ram usage:        6 bytes
  7778 ;; Hardware stack levels used:    1
  7779 ;; This function calls:
  7780 ;;		Nothing
  7781 ;; This function is called by:
  7782 ;;		_ISR
  7783 ;;		i2_stopOperation
  7784 ;; This function uses a non-reentrant model
  7785 ;;
  7786                           
  7787                           	psect	text26
  7788  001A3C                     __ptext26:
  7789                           	opt stack 0
  7790  001A3C                     i2___awmod:
  7791                           	opt stack 25
  7792                           
  7793                           ; BSR set to: 0
  7794                           ;incstack = 0
  7795  001A3C  0E00               	movlw	0
  7796  001A3E  6E06               	movwf	i2___awmod@sign,c
  7797  001A40  AE02               	btfss	i2___awmod@dividend+1,7,c
  7798  001A42  D006               	goto	i2l2823
  7799  001A44  6C01               	negf	i2___awmod@dividend,c
  7800  001A46  1E02               	comf	i2___awmod@dividend+1,f,c
  7801  001A48  B0D8               	btfsc	status,0,c
  7802  001A4A  2A02               	incf	i2___awmod@dividend+1,f,c
  7803  001A4C  0E01               	movlw	1
  7804  001A4E  6E06               	movwf	i2___awmod@sign,c
  7805  001A50                     i2l2823:
  7806  001A50  AE04               	btfss	i2___awmod@divisor+1,7,c
  7807  001A52  D004               	goto	i2l2827
  7808  001A54  6C03               	negf	i2___awmod@divisor,c
  7809  001A56  1E04               	comf	i2___awmod@divisor+1,f,c
  7810  001A58  B0D8               	btfsc	status,0,c
  7811  001A5A  2A04               	incf	i2___awmod@divisor+1,f,c
  7812  001A5C                     i2l2827:
  7813  001A5C  5003               	movf	i2___awmod@divisor,w,c
  7814  001A5E  1004               	iorwf	i2___awmod@divisor+1,w,c
  7815  001A60  B4D8               	btfsc	status,2,c
  7816  001A62  D018               	goto	i2l2843
  7817  001A64  0E01               	movlw	1
  7818  001A66  6E05               	movwf	i2___awmod@counter,c
  7819  001A68  D004               	goto	i2l2833
  7820  001A6A                     i2l2831:
  7821  001A6A  90D8               	bcf	status,0,c
  7822  001A6C  3603               	rlcf	i2___awmod@divisor,f,c
  7823  001A6E  3604               	rlcf	i2___awmod@divisor+1,f,c
  7824  001A70  2A05               	incf	i2___awmod@counter,f,c
  7825  001A72                     i2l2833:
  7826  001A72  AE04               	btfss	i2___awmod@divisor+1,7,c
  7827  001A74  D7FA               	goto	i2l2831
  7828  001A76                     i2l2835:
  7829  001A76  5003               	movf	i2___awmod@divisor,w,c
  7830  001A78  5C01               	subwf	i2___awmod@dividend,w,c
  7831  001A7A  5004               	movf	i2___awmod@divisor+1,w,c
  7832  001A7C  5802               	subwfb	i2___awmod@dividend+1,w,c
  7833  001A7E  A0D8               	btfss	status,0,c
  7834  001A80  D004               	goto	i2l2839
  7835  001A82  5003               	movf	i2___awmod@divisor,w,c
  7836  001A84  5E01               	subwf	i2___awmod@dividend,f,c
  7837  001A86  5004               	movf	i2___awmod@divisor+1,w,c
  7838  001A88  5A02               	subwfb	i2___awmod@dividend+1,f,c
  7839  001A8A                     i2l2839:
  7840  001A8A  90D8               	bcf	status,0,c
  7841  001A8C  3204               	rrcf	i2___awmod@divisor+1,f,c
  7842  001A8E  3203               	rrcf	i2___awmod@divisor,f,c
  7843  001A90  2E05               	decfsz	i2___awmod@counter,f,c
  7844  001A92  D7F1               	goto	i2l2835
  7845  001A94                     i2l2843:
  7846  001A94  5006               	movf	i2___awmod@sign,w,c
  7847  001A96  B4D8               	btfsc	status,2,c
  7848  001A98  D004               	goto	i2l2847
  7849  001A9A  6C01               	negf	i2___awmod@dividend,c
  7850  001A9C  1E02               	comf	i2___awmod@dividend+1,f,c
  7851  001A9E  B0D8               	btfsc	status,0,c
  7852  001AA0  2A02               	incf	i2___awmod@dividend+1,f,c
  7853  001AA2                     i2l2847:
  7854  001AA2  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
  7855  001AA6  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
  7856  001AAA  0012               	return	
  7857  001AAC                     __end_ofi2___awmod:
  7858                           	opt stack 0
  7859                           pclatu	equ	0xFFB
  7860                           pclath	equ	0xFFA
  7861                           tblptru	equ	0xFF8
  7862                           tblptrh	equ	0xFF7
  7863                           tblptrl	equ	0xFF6
  7864                           tablat	equ	0xFF5
  7865                           prodh	equ	0xFF4
  7866                           prodl	equ	0xFF3
  7867                           intcon	equ	0xFF2
  7868                           intcon3	equ	0xFF0
  7869                           postinc0	equ	0xFEE
  7870                           fsr0h	equ	0xFEA
  7871                           fsr0l	equ	0xFE9
  7872                           wreg	equ	0xFE8
  7873                           fsr1h	equ	0xFE2
  7874                           fsr1l	equ	0xFE1
  7875                           indf2	equ	0xFDF
  7876                           postinc2	equ	0xFDE
  7877                           postdec2	equ	0xFDD
  7878                           fsr2h	equ	0xFDA
  7879                           fsr2l	equ	0xFD9
  7880                           status	equ	0xFD8
  7881                           
  7882 ;; *************** function i2___awdiv *****************
  7883 ;; Defined at:
  7884 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  7885 ;; Parameters:    Size  Location     Type
  7886 ;;  dividend        2    0[COMRAM] int 
  7887 ;;  divisor         2    2[COMRAM] int 
  7888 ;; Auto vars:     Size  Location     Type
  7889 ;;  __awdiv         2    6[COMRAM] int 
  7890 ;;  __awdiv         1    5[COMRAM] unsigned char 
  7891 ;;  __awdiv         1    4[COMRAM] unsigned char 
  7892 ;; Return value:  Size  Location     Type
  7893 ;;                  2    0[COMRAM] int 
  7894 ;; Registers used:
  7895 ;;		wreg, status,2, status,0
  7896 ;; Tracked objects:
  7897 ;;		On entry : 0/0
  7898 ;;		On exit  : 0/0
  7899 ;;		Unchanged: 0/0
  7900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7901 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7902 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7903 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7904 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7905 ;;Total ram usage:        8 bytes
  7906 ;; Hardware stack levels used:    1
  7907 ;; This function calls:
  7908 ;;		Nothing
  7909 ;; This function is called by:
  7910 ;;		_ISR
  7911 ;;		i2_stopOperation
  7912 ;; This function uses a non-reentrant model
  7913 ;;
  7914                           
  7915                           	psect	text27
  7916  0018C6                     __ptext27:
  7917                           	opt stack 0
  7918  0018C6                     i2___awdiv:
  7919                           	opt stack 25
  7920                           
  7921                           ;incstack = 0
  7922  0018C6  0E00               	movlw	0
  7923  0018C8  6E06               	movwf	i2___awdiv@sign,c
  7924  0018CA  AE04               	btfss	i2___awdiv@divisor+1,7,c
  7925  0018CC  D006               	goto	i2l2779
  7926  0018CE  6C03               	negf	i2___awdiv@divisor,c
  7927  0018D0  1E04               	comf	i2___awdiv@divisor+1,f,c
  7928  0018D2  B0D8               	btfsc	status,0,c
  7929  0018D4  2A04               	incf	i2___awdiv@divisor+1,f,c
  7930  0018D6  0E01               	movlw	1
  7931  0018D8  6E06               	movwf	i2___awdiv@sign,c
  7932  0018DA                     i2l2779:
  7933  0018DA  AE02               	btfss	i2___awdiv@dividend+1,7,c
  7934  0018DC  D006               	goto	i2l2785
  7935  0018DE  6C01               	negf	i2___awdiv@dividend,c
  7936  0018E0  1E02               	comf	i2___awdiv@dividend+1,f,c
  7937  0018E2  B0D8               	btfsc	status,0,c
  7938  0018E4  2A02               	incf	i2___awdiv@dividend+1,f,c
  7939  0018E6  0E01               	movlw	1
  7940  0018E8  1A06               	xorwf	i2___awdiv@sign,f,c
  7941  0018EA                     i2l2785:
  7942  0018EA  0E00               	movlw	0
  7943  0018EC  6E08               	movwf	i2___awdiv@quotient+1,c
  7944  0018EE  0E00               	movlw	0
  7945  0018F0  6E07               	movwf	i2___awdiv@quotient,c
  7946  0018F2  5003               	movf	i2___awdiv@divisor,w,c
  7947  0018F4  1004               	iorwf	i2___awdiv@divisor+1,w,c
  7948  0018F6  B4D8               	btfsc	status,2,c
  7949  0018F8  D01C               	goto	i2l2807
  7950  0018FA  0E01               	movlw	1
  7951  0018FC  6E05               	movwf	i2___awdiv@counter,c
  7952  0018FE  D004               	goto	i2l2793
  7953  001900                     i2l2791:
  7954  001900  90D8               	bcf	status,0,c
  7955  001902  3603               	rlcf	i2___awdiv@divisor,f,c
  7956  001904  3604               	rlcf	i2___awdiv@divisor+1,f,c
  7957  001906  2A05               	incf	i2___awdiv@counter,f,c
  7958  001908                     i2l2793:
  7959  001908  AE04               	btfss	i2___awdiv@divisor+1,7,c
  7960  00190A  D7FA               	goto	i2l2791
  7961  00190C                     i2l2795:
  7962  00190C  90D8               	bcf	status,0,c
  7963  00190E  3607               	rlcf	i2___awdiv@quotient,f,c
  7964  001910  3608               	rlcf	i2___awdiv@quotient+1,f,c
  7965  001912  5003               	movf	i2___awdiv@divisor,w,c
  7966  001914  5C01               	subwf	i2___awdiv@dividend,w,c
  7967  001916  5004               	movf	i2___awdiv@divisor+1,w,c
  7968  001918  5802               	subwfb	i2___awdiv@dividend+1,w,c
  7969  00191A  A0D8               	btfss	status,0,c
  7970  00191C  D005               	goto	i2l2803
  7971  00191E  5003               	movf	i2___awdiv@divisor,w,c
  7972  001920  5E01               	subwf	i2___awdiv@dividend,f,c
  7973  001922  5004               	movf	i2___awdiv@divisor+1,w,c
  7974  001924  5A02               	subwfb	i2___awdiv@dividend+1,f,c
  7975  001926  8007               	bsf	i2___awdiv@quotient,0,c
  7976  001928                     i2l2803:
  7977  001928  90D8               	bcf	status,0,c
  7978  00192A  3204               	rrcf	i2___awdiv@divisor+1,f,c
  7979  00192C  3203               	rrcf	i2___awdiv@divisor,f,c
  7980  00192E  2E05               	decfsz	i2___awdiv@counter,f,c
  7981  001930  D7ED               	goto	i2l2795
  7982  001932                     i2l2807:
  7983  001932  5006               	movf	i2___awdiv@sign,w,c
  7984  001934  B4D8               	btfsc	status,2,c
  7985  001936  D004               	goto	i2l2811
  7986  001938  6C07               	negf	i2___awdiv@quotient,c
  7987  00193A  1E08               	comf	i2___awdiv@quotient+1,f,c
  7988  00193C  B0D8               	btfsc	status,0,c
  7989  00193E  2A08               	incf	i2___awdiv@quotient+1,f,c
  7990  001940                     i2l2811:
  7991  001940  C007  F001         	movff	i2___awdiv@quotient,?i2___awdiv
  7992  001944  C008  F002         	movff	i2___awdiv@quotient+1,?i2___awdiv+1
  7993  001948  0012               	return	
  7994  00194A                     __end_ofi2___awdiv:
  7995                           	opt stack 0
  7996                           pclatu	equ	0xFFB
  7997                           pclath	equ	0xFFA
  7998                           tblptru	equ	0xFF8
  7999                           tblptrh	equ	0xFF7
  8000                           tblptrl	equ	0xFF6
  8001                           tablat	equ	0xFF5
  8002                           prodh	equ	0xFF4
  8003                           prodl	equ	0xFF3
  8004                           intcon	equ	0xFF2
  8005                           intcon3	equ	0xFF0
  8006                           postinc0	equ	0xFEE
  8007                           fsr0h	equ	0xFEA
  8008                           fsr0l	equ	0xFE9
  8009                           wreg	equ	0xFE8
  8010                           fsr1h	equ	0xFE2
  8011                           fsr1l	equ	0xFE1
  8012                           indf2	equ	0xFDF
  8013                           postinc2	equ	0xFDE
  8014                           postdec2	equ	0xFDD
  8015                           fsr2h	equ	0xFDA
  8016                           fsr2l	equ	0xFD9
  8017                           status	equ	0xFD8
  8018                           
  8019 ;; *************** function i2_printf *****************
  8020 ;; Defined at:
  8021 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  8022 ;; Parameters:    Size  Location     Type
  8023 ;;  f               2   12[COMRAM] PTR const unsigned char 
  8024 ;;		 -> STR_24(22), STR_23(17), STR_22(17), STR_21(17), 
  8025 ;;		 -> STR_20(23), STR_19(23), STR_18(21), STR_17(17), 
  8026 ;;		 -> STR_16(21), STR_15(17), STR_14(21), STR_13(17), 
  8027 ;;		 -> STR_12(19), STR_11(17), STR_10(19), STR_9(17), 
  8028 ;;		 -> STR_8(25), STR_7(17), STR_6(17), STR_5(17), 
  8029 ;;		 -> STR_4(17), STR_3(17), STR_2(17), STR_1(17), 
  8030 ;; Auto vars:     Size  Location     Type
  8031 ;;  printf          4    0        struct .
  8032 ;;  printf          3    0        PTR const unsigned char 
  8033 ;;  printf          2   29[COMRAM] int 
  8034 ;;  printf          2   26[COMRAM] unsigned int 
  8035 ;;  printf          2   23[COMRAM] PTR void [1]
  8036 ;;		 -> ?i2_printf(2), ?_printf(2), 
  8037 ;;  printf          2    0        unsigned int 
  8038 ;;  printf          1   31[COMRAM] char 
  8039 ;;  printf          1   28[COMRAM] unsigned char 
  8040 ;;  printf          1   25[COMRAM] char 
  8041 ;;  printf          1   22[COMRAM] unsigned char 
  8042 ;; Return value:  Size  Location     Type
  8043 ;;                  2   12[COMRAM] int 
  8044 ;; Registers used:
  8045 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8046 ;; Tracked objects:
  8047 ;;		On entry : 0/0
  8048 ;;		On exit  : 0/0
  8049 ;;		Unchanged: 0/0
  8050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8051 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8052 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8053 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8054 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8055 ;;Total ram usage:       20 bytes
  8056 ;; Hardware stack levels used:    1
  8057 ;; Hardware stack levels required when called:    2
  8058 ;; This function calls:
  8059 ;;		i2___lwdiv
  8060 ;;		i2___lwmod
  8061 ;;		i2___wmul
  8062 ;;		i2_isdigit
  8063 ;;		i2_putch
  8064 ;; This function is called by:
  8065 ;;		_switchMenu
  8066 ;;		_ISR
  8067 ;; This function uses a non-reentrant model
  8068 ;;
  8069                           
  8070                           	psect	text28
  8071  0010CA                     __ptext28:
  8072                           	opt stack 0
  8073  0010CA                     i2_printf:
  8074                           	opt stack 24
  8075                           
  8076                           ;doprnt.c: 466: va_list ap;
  8077                           ;doprnt.c: 499: signed char c;
  8078                           ;doprnt.c: 501: int width;
  8079                           ;doprnt.c: 506: signed char prec;
  8080                           ;doprnt.c: 508: unsigned char flag;
  8081                           ;doprnt.c: 523: union {
  8082                           ;doprnt.c: 524: unsigned long vd;
  8083                           ;doprnt.c: 525: double integ;
  8084                           ;doprnt.c: 526: } tmpval;
  8085                           ;doprnt.c: 528: unsigned int val;
  8086                           ;doprnt.c: 529: unsigned len;
  8087                           ;doprnt.c: 530: const char * cp;
  8088                           ;doprnt.c: 533: *ap = __va_start();
  8089                           
  8090                           ;incstack = 0
  8091  0010CA  0E0F               	movlw	low (?i2_printf+2)
  8092  0010CC  6E18               	movwf	i2printf@ap,c
  8093  0010CE  0E00               	movlw	high (?i2_printf+2)
  8094  0010D0  6E19               	movwf	i2printf@ap+1,c
  8095                           
  8096                           ;doprnt.c: 536: while(c = *f++) {
  8097  0010D2  D174               	goto	i2l3299
  8098  0010D4                     i2l3173:
  8099                           
  8100                           ;doprnt.c: 538: if(c != '%')
  8101  0010D4  0E25               	movlw	37
  8102  0010D6  1820               	xorwf	i2printf@c,w,c
  8103  0010D8  B4D8               	btfsc	status,2,c
  8104  0010DA  D004               	goto	i2l3177
  8105                           
  8106                           ;doprnt.c: 540: {
  8107                           ;doprnt.c: 541: (putch(c) );
  8108  0010DC  5020               	movf	i2printf@c,w,c
  8109  0010DE  EC28  F00F         	call	i2_putch
  8110                           
  8111                           ;doprnt.c: 542: continue;
  8112  0010E2  D16C               	goto	i2l3299
  8113  0010E4                     i2l3177:
  8114                           
  8115                           ;doprnt.c: 543: }
  8116                           ;doprnt.c: 546: width = 0;
  8117  0010E4  0E00               	movlw	0
  8118  0010E6  6E1F               	movwf	i2printf@width+1,c
  8119  0010E8  0E00               	movlw	0
  8120  0010EA  6E1E               	movwf	i2printf@width,c
  8121                           
  8122                           ;doprnt.c: 548: flag = 0;
  8123  0010EC  0E00               	movlw	0
  8124  0010EE  6E1D               	movwf	i2printf@flag,c
  8125                           
  8126                           ;doprnt.c: 551: switch(*f) {
  8127                           
  8128                           ;doprnt.c: 550: for(;;) {
  8129  0010F0  D003               	goto	i2l3183
  8130  0010F2                     i2l3179:
  8131                           
  8132                           ;doprnt.c: 580: flag |= 0x04;
  8133  0010F2  841D               	bsf	i2printf@flag,2,c
  8134                           
  8135                           ;doprnt.c: 581: f++;
  8136  0010F4  4A0D               	infsnz	i2printf@f,f,c
  8137  0010F6  2A0E               	incf	i2printf@f+1,f,c
  8138  0010F8                     i2l3183:
  8139  0010F8  C00D  FFF6         	movff	i2printf@f,tblptrl
  8140  0010FC  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  8141  001100                     	if	0	;tblptru may be non-zero
  8142  001100                     	endif
  8143  001100                     	if	0	;tblptru may be non-zero
  8144  001100                     	endif
  8145  001100  0008               	tblrd		*
  8146  001102  50F5               	movf	tablat,w,c
  8147                           
  8148                           ; Switch size 1, requested type "space"
  8149                           ; Number of cases is 1, Range of values is 48 to 48
  8150                           ; switch strategies available:
  8151                           ; Name         Instructions Cycles
  8152                           ; simple_byte            4     3 (average)
  8153                           ;	Chosen strategy is simple_byte
  8154  001104  0A30               	xorlw	48	; case 48
  8155  001106  B4D8               	btfsc	status,2,c
  8156  001108  D7F4               	goto	i2l3179
  8157                           
  8158                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  8159                           
  8160                           ;doprnt.c: 586: }
  8161                           
  8162                           ;doprnt.c: 585: break;
  8163  00110A  C00D  FFF6         	movff	i2printf@f,tblptrl
  8164  00110E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  8165  001112                     	if	0	;tblptru may be non-zero
  8166  001112                     	endif
  8167  001112                     	if	0	;tblptru may be non-zero
  8168  001112                     	endif
  8169  001112  0008               	tblrd		*
  8170  001114  50F5               	movf	tablat,w,c
  8171  001116  ECED  F00E         	call	i2_isdigit
  8172  00111A  A0D8               	btfss	status,0,c
  8173  00111C  D035               	goto	i2l3201
  8174                           
  8175                           ;doprnt.c: 598: width = 0;
  8176  00111E  0E00               	movlw	0
  8177  001120  6E1F               	movwf	i2printf@width+1,c
  8178  001122  0E00               	movlw	0
  8179  001124  6E1E               	movwf	i2printf@width,c
  8180  001126                     i2l3189:
  8181                           
  8182                           ;doprnt.c: 600: width *= 10;
  8183  001126  C01E  F001         	movff	i2printf@width,i2___wmul@multiplier
  8184  00112A  C01F  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
  8185  00112E  0E00               	movlw	0
  8186  001130  6E04               	movwf	i2___wmul@multiplicand+1,c
  8187  001132  0E0A               	movlw	10
  8188  001134  6E03               	movwf	i2___wmul@multiplicand,c
  8189  001136  ECCB  F00E         	call	i2___wmul	;wreg free
  8190  00113A  C001  F01E         	movff	?i2___wmul,i2printf@width
  8191  00113E  C002  F01F         	movff	?i2___wmul+1,i2printf@width+1
  8192                           
  8193                           ;doprnt.c: 601: width += *f++ - '0';
  8194  001142  0ED0               	movlw	208
  8195  001144  6E13               	movwf	??i2_printf& (0+255),c
  8196  001146  0EFF               	movlw	255
  8197  001148  6E14               	movwf	(??i2_printf+1)& (0+255),c
  8198  00114A  C00D  FFF6         	movff	i2printf@f,tblptrl
  8199  00114E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  8200  001152                     	if	0	;tblptru may be non-zero
  8201  001152                     	endif
  8202  001152                     	if	0	;tblptru may be non-zero
  8203  001152                     	endif
  8204  001152  0008               	tblrd		*
  8205  001154  50F5               	movf	tablat,w,c
  8206  001156  6E15               	movwf	(??i2_printf+2)& (0+255),c
  8207  001158  6A16               	clrf	(??i2_printf+3)& (0+255),c
  8208  00115A  5013               	movf	??i2_printf,w,c
  8209  00115C  2615               	addwf	??i2_printf+2,f,c
  8210  00115E  5014               	movf	??i2_printf+1,w,c
  8211  001160  2216               	addwfc	??i2_printf+3,f,c
  8212  001162  5015               	movf	??i2_printf+2,w,c
  8213  001164  261E               	addwf	i2printf@width,f,c
  8214  001166  5016               	movf	??i2_printf+3,w,c
  8215  001168  221F               	addwfc	i2printf@width+1,f,c
  8216  00116A  4A0D               	infsnz	i2printf@f,f,c
  8217  00116C  2A0E               	incf	i2printf@f+1,f,c
  8218                           
  8219                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  8220  00116E  C00D  FFF6         	movff	i2printf@f,tblptrl
  8221  001172  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  8222  001176                     	if	0	;tblptru may be non-zero
  8223  001176                     	endif
  8224  001176                     	if	0	;tblptru may be non-zero
  8225  001176                     	endif
  8226  001176  0008               	tblrd		*
  8227  001178  50F5               	movf	tablat,w,c
  8228  00117A  ECED  F00E         	call	i2_isdigit
  8229  00117E  A0D8               	btfss	status,0,c
  8230  001180  D003               	goto	i2l3201
  8231  001182  D7D1               	goto	i2l3189
  8232  001184                     i2l3197:
  8233                           
  8234                           ;doprnt.c: 721: flag |= 0x80;
  8235  001184  8E1D               	bsf	i2printf@flag,7,c
  8236                           
  8237                           ;doprnt.c: 723: break;
  8238  001186  D017               	goto	i2l451
  8239  001188                     i2l3201:
  8240  001188  C00D  FFF6         	movff	i2printf@f,tblptrl
  8241  00118C  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  8242  001190  4A0D               	infsnz	i2printf@f,f,c
  8243  001192  2A0E               	incf	i2printf@f+1,f,c
  8244  001194                     	if	0	;tblptru may be non-zero
  8245  001194                     	endif
  8246  001194                     	if	0	;tblptru may be non-zero
  8247  001194                     	endif
  8248  001194  0008               	tblrd		*
  8249  001196  CFF5 F020          	movff	tablat,i2printf@c
  8250  00119A  5020               	movf	i2printf@c,w,c
  8251                           
  8252                           ; Switch size 1, requested type "space"
  8253                           ; Number of cases is 4, Range of values is 0 to 120
  8254                           ; switch strategies available:
  8255                           ; Name         Instructions Cycles
  8256                           ; simple_byte           13     7 (average)
  8257                           ;	Chosen strategy is simple_byte
  8258  00119C  0A00               	xorlw	0	; case 0
  8259  00119E  B4D8               	btfsc	status,2,c
  8260  0011A0  0012               	return	
  8261  0011A2  0A64               	xorlw	100	; case 100
  8262  0011A4  B4D8               	btfsc	status,2,c
  8263  0011A6  D007               	goto	i2l451
  8264  0011A8  0A0D               	xorlw	13	; case 105
  8265  0011AA  B4D8               	btfsc	status,2,c
  8266  0011AC  D004               	goto	i2l451
  8267  0011AE  0A11               	xorlw	17	; case 120
  8268  0011B0  B4D8               	btfsc	status,2,c
  8269  0011B2  D7E8               	goto	i2l3197
  8270  0011B4  D103               	goto	i2l3299
  8271  0011B6                     i2l451:
  8272                           
  8273                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  8274  0011B6  BE1D               	btfsc	i2printf@flag,7,c
  8275  0011B8  D015               	goto	i2l3213
  8276                           
  8277                           ;doprnt.c: 1253: {
  8278                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  8279  0011BA  C018  FFD9         	movff	i2printf@ap,fsr2l
  8280  0011BE  C019  FFDA         	movff	i2printf@ap+1,fsr2h
  8281  0011C2  CFDE F01B          	movff	postinc2,i2printf@val
  8282  0011C6  CFDD F01C          	movff	postdec2,i2printf@val+1
  8283  0011CA  0E02               	movlw	2
  8284  0011CC  2618               	addwf	i2printf@ap,f,c
  8285  0011CE  0E00               	movlw	0
  8286  0011D0  2219               	addwfc	i2printf@ap+1,f,c
  8287                           
  8288                           ;doprnt.c: 1261: if((int)val < 0) {
  8289  0011D2  AE1C               	btfss	i2printf@val+1,7,c
  8290  0011D4  D044               	goto	i2l3247
  8291                           
  8292                           ;doprnt.c: 1262: flag |= 0x03;
  8293  0011D6  0E03               	movlw	3
  8294  0011D8  121D               	iorwf	i2printf@flag,f,c
  8295                           
  8296                           ;doprnt.c: 1263: val = -val;
  8297  0011DA  6C1B               	negf	i2printf@val,c
  8298  0011DC  1E1C               	comf	i2printf@val+1,f,c
  8299  0011DE  B0D8               	btfsc	status,0,c
  8300  0011E0  2A1C               	incf	i2printf@val+1,f,c
  8301                           
  8302                           ;doprnt.c: 1264: }
  8303                           ;doprnt.c: 1266: }
  8304  0011E2  D03D               	goto	i2l3247
  8305  0011E4                     i2l3213:
  8306                           
  8307                           ;doprnt.c: 1268: else
  8308                           ;doprnt.c: 1273: {
  8309                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  8310  0011E4  C018  FFD9         	movff	i2printf@ap,fsr2l
  8311  0011E8  C019  FFDA         	movff	i2printf@ap+1,fsr2h
  8312  0011EC  CFDE F01B          	movff	postinc2,i2printf@val
  8313  0011F0  CFDD F01C          	movff	postdec2,i2printf@val+1
  8314  0011F4  0E02               	movlw	2
  8315  0011F6  2618               	addwf	i2printf@ap,f,c
  8316  0011F8  0E00               	movlw	0
  8317  0011FA  2219               	addwfc	i2printf@ap+1,f,c
  8318                           
  8319                           ;doprnt.c: 1287: }
  8320                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  8321  0011FC  D030               	goto	i2l3247
  8322  0011FE                     i2l3217:
  8323                           
  8324                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  8325  0011FE  0E01               	movlw	1
  8326  001200  6E20               	movwf	i2printf@c,c
  8327  001202                     i2l3219:
  8328  001202  0E05               	movlw	5
  8329  001204  1820               	xorwf	i2printf@c,w,c
  8330  001206  B4D8               	btfsc	status,2,c
  8331  001208  D032               	goto	i2l3249
  8332                           
  8333                           ;doprnt.c: 1306: if(val < dpowers[c])
  8334  00120A  5020               	movf	i2printf@c,w,c
  8335  00120C  0D02               	mullw	2
  8336  00120E  0E58               	movlw	low _dpowers
  8337  001210  24F3               	addwf	prodl,w,c
  8338  001212  6EF6               	movwf	tblptrl,c
  8339  001214  0EFE               	movlw	high _dpowers
  8340  001216  20F4               	addwfc	prodh,w,c
  8341  001218  6EF7               	movwf	tblptrh,c
  8342  00121A                     	if	0	;There are less than 3 active tblptr bytes
  8343  00121A                     	endif
  8344  00121A  0009               	tblrd		*+
  8345  00121C  50F5               	movf	tablat,w,c
  8346  00121E  5C1B               	subwf	i2printf@val,w,c
  8347  001220  0009               	tblrd		*+
  8348  001222  50F5               	movf	tablat,w,c
  8349  001224  581C               	subwfb	i2printf@val+1,w,c
  8350  001226  A0D8               	btfss	status,0,c
  8351  001228  D022               	goto	i2l3249
  8352                           
  8353                           ;doprnt.c: 1307: break;
  8354  00122A  2A20               	incf	i2printf@c,f,c
  8355  00122C  D7EA               	goto	i2l3219
  8356  00122E                     i2l3231:
  8357                           
  8358                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  8359  00122E  0E01               	movlw	1
  8360  001230  6E20               	movwf	i2printf@c,c
  8361  001232                     i2l3233:
  8362  001232  0E04               	movlw	4
  8363  001234  1820               	xorwf	i2printf@c,w,c
  8364  001236  B4D8               	btfsc	status,2,c
  8365  001238  D01A               	goto	i2l3249
  8366                           
  8367                           ;doprnt.c: 1317: if(val < hexpowers[c])
  8368  00123A  5020               	movf	i2printf@c,w,c
  8369  00123C  0D02               	mullw	2
  8370  00123E  0E62               	movlw	low _hexpowers
  8371  001240  24F3               	addwf	prodl,w,c
  8372  001242  6EF6               	movwf	tblptrl,c
  8373  001244  0EFE               	movlw	high _hexpowers
  8374  001246  20F4               	addwfc	prodh,w,c
  8375  001248  6EF7               	movwf	tblptrh,c
  8376  00124A                     	if	0	;There are less than 3 active tblptr bytes
  8377  00124A                     	endif
  8378  00124A  0009               	tblrd		*+
  8379  00124C  50F5               	movf	tablat,w,c
  8380  00124E  5C1B               	subwf	i2printf@val,w,c
  8381  001250  0009               	tblrd		*+
  8382  001252  50F5               	movf	tablat,w,c
  8383  001254  581C               	subwfb	i2printf@val+1,w,c
  8384  001256  A0D8               	btfss	status,0,c
  8385  001258  D00A               	goto	i2l3249
  8386                           
  8387                           ;doprnt.c: 1318: break;
  8388  00125A  2A20               	incf	i2printf@c,f,c
  8389  00125C  D7EA               	goto	i2l3233
  8390  00125E                     i2l3247:
  8391  00125E  501D               	movf	i2printf@flag,w,c
  8392  001260  0B80               	andlw	128
  8393                           
  8394                           ; Switch size 1, requested type "space"
  8395                           ; Number of cases is 2, Range of values is 0 to 128
  8396                           ; switch strategies available:
  8397                           ; Name         Instructions Cycles
  8398                           ; simple_byte            7     4 (average)
  8399                           ;	Chosen strategy is simple_byte
  8400  001262  0A00               	xorlw	0	; case 0
  8401  001264  B4D8               	btfsc	status,2,c
  8402  001266  D7CB               	goto	i2l3217
  8403  001268  0A80               	xorlw	128	; case 128
  8404  00126A  B4D8               	btfsc	status,2,c
  8405  00126C  D7E0               	goto	i2l3231
  8406  00126E                     i2l3249:
  8407                           
  8408                           ;doprnt.c: 1345: if(width && flag & 0x03)
  8409  00126E  501E               	movf	i2printf@width,w,c
  8410  001270  101F               	iorwf	i2printf@width+1,w,c
  8411  001272  B4D8               	btfsc	status,2,c
  8412  001274  D009               	goto	i2l3255
  8413  001276  C01D  F013         	movff	i2printf@flag,??i2_printf
  8414  00127A  0E03               	movlw	3
  8415  00127C  1613               	andwf	??i2_printf,f,c
  8416  00127E  B4D8               	btfsc	status,2,c
  8417  001280  D003               	goto	i2l3255
  8418                           
  8419                           ;doprnt.c: 1346: width--;
  8420  001282  061E               	decf	i2printf@width,f,c
  8421  001284  A0D8               	btfss	status,0,c
  8422  001286  061F               	decf	i2printf@width+1,f,c
  8423  001288                     i2l3255:
  8424                           
  8425                           ;doprnt.c: 1381: if(width > c)
  8426  001288  0E80               	movlw	128
  8427  00128A  BE20               	btfsc	i2printf@c,7,c
  8428  00128C  0E7F               	movlw	127
  8429  00128E  6E13               	movwf	??i2_printf& (0+255),c
  8430  001290  501E               	movf	i2printf@width,w,c
  8431  001292  5C20               	subwf	i2printf@c,w,c
  8432  001294  501F               	movf	i2printf@width+1,w,c
  8433  001296  0A80               	xorlw	128
  8434  001298  5813               	subwfb	??i2_printf& (0+255),w,c
  8435  00129A  B0D8               	btfsc	status,0,c
  8436  00129C  D007               	goto	i2l3259
  8437                           
  8438                           ;doprnt.c: 1382: width -= c;
  8439  00129E  5020               	movf	i2printf@c,w,c
  8440  0012A0  5E1E               	subwf	i2printf@width,f,c
  8441  0012A2  0E00               	movlw	0
  8442  0012A4  BE20               	btfsc	i2printf@c,7,c
  8443  0012A6  0EFF               	movlw	255
  8444  0012A8  5A1F               	subwfb	i2printf@width+1,f,c
  8445  0012AA  D004               	goto	i2l3261
  8446  0012AC                     i2l3259:
  8447                           
  8448                           ;doprnt.c: 1383: else
  8449                           ;doprnt.c: 1384: width = 0;
  8450  0012AC  0E00               	movlw	0
  8451  0012AE  6E1F               	movwf	i2printf@width+1,c
  8452  0012B0  0E00               	movlw	0
  8453  0012B2  6E1E               	movwf	i2printf@width,c
  8454  0012B4                     i2l3261:
  8455                           
  8456                           ;doprnt.c: 1387: if(flag & 0x04) {
  8457  0012B4  A41D               	btfss	i2printf@flag,2,c
  8458  0012B6  D014               	goto	i2l3273
  8459                           
  8460                           ;doprnt.c: 1392: if(flag & 0x03)
  8461  0012B8  C01D  F013         	movff	i2printf@flag,??i2_printf
  8462  0012BC  0E03               	movlw	3
  8463  0012BE  1613               	andwf	??i2_printf,f,c
  8464  0012C0  B4D8               	btfsc	status,2,c
  8465  0012C2  D003               	goto	i2l3267
  8466                           
  8467                           ;doprnt.c: 1393: (putch('-') );
  8468  0012C4  0E2D               	movlw	45
  8469  0012C6  EC28  F00F         	call	i2_putch
  8470  0012CA                     i2l3267:
  8471                           
  8472                           ;doprnt.c: 1415: if(width)
  8473  0012CA  501E               	movf	i2printf@width,w,c
  8474  0012CC  101F               	iorwf	i2printf@width+1,w,c
  8475  0012CE  B4D8               	btfsc	status,2,c
  8476  0012D0  D01E               	goto	i2l3283
  8477                           
  8478                           ;doprnt.c: 1417: (putch('0') );
  8479                           
  8480                           ;doprnt.c: 1416: do
  8481  0012D2  0E30               	movlw	48
  8482  0012D4  EC28  F00F         	call	i2_putch
  8483                           
  8484                           ;doprnt.c: 1418: while(--width);
  8485  0012D8  061E               	decf	i2printf@width,f,c
  8486  0012DA  A0D8               	btfss	status,0,c
  8487  0012DC  061F               	decf	i2printf@width+1,f,c
  8488  0012DE  D7F5               	goto	i2l3267
  8489  0012E0                     i2l3273:
  8490                           
  8491                           ;doprnt.c: 1422: {
  8492                           ;doprnt.c: 1424: if(width
  8493                           ;doprnt.c: 1428: )
  8494  0012E0  501E               	movf	i2printf@width,w,c
  8495  0012E2  101F               	iorwf	i2printf@width+1,w,c
  8496  0012E4  B4D8               	btfsc	status,2,c
  8497  0012E6  D00A               	goto	i2l3279
  8498  0012E8                     i2l3275:
  8499                           
  8500                           ;doprnt.c: 1430: (putch(' ') );
  8501  0012E8  0E20               	movlw	32
  8502  0012EA  EC28  F00F         	call	i2_putch
  8503                           
  8504                           ;doprnt.c: 1431: while(--width);
  8505  0012EE  061E               	decf	i2printf@width,f,c
  8506  0012F0  A0D8               	btfss	status,0,c
  8507  0012F2  061F               	decf	i2printf@width+1,f,c
  8508  0012F4  501E               	movf	i2printf@width,w,c
  8509  0012F6  101F               	iorwf	i2printf@width+1,w,c
  8510  0012F8  A4D8               	btfss	status,2,c
  8511  0012FA  D7F6               	goto	i2l3275
  8512  0012FC                     i2l3279:
  8513                           
  8514                           ;doprnt.c: 1438: if(flag & 0x03)
  8515  0012FC  C01D  F013         	movff	i2printf@flag,??i2_printf
  8516  001300  0E03               	movlw	3
  8517  001302  1613               	andwf	??i2_printf,f,c
  8518  001304  B4D8               	btfsc	status,2,c
  8519  001306  D003               	goto	i2l3283
  8520                           
  8521                           ;doprnt.c: 1439: (putch('-') );
  8522  001308  0E2D               	movlw	45
  8523  00130A  EC28  F00F         	call	i2_putch
  8524  00130E                     i2l3283:
  8525                           
  8526                           ;doprnt.c: 1469: }
  8527                           ;doprnt.c: 1472: prec = c;
  8528  00130E  C020  F01A         	movff	i2printf@c,i2printf@prec
  8529                           
  8530                           ;doprnt.c: 1474: while(prec--) {
  8531  001312  D050               	goto	i2l3297
  8532  001314                     i2l3285:
  8533                           
  8534                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  8535  001314  501A               	movf	i2printf@prec,w,c
  8536  001316  0D02               	mullw	2
  8537  001318  0E58               	movlw	low _dpowers
  8538  00131A  24F3               	addwf	prodl,w,c
  8539  00131C  6EF6               	movwf	tblptrl,c
  8540  00131E  0EFE               	movlw	high _dpowers
  8541  001320  20F4               	addwfc	prodh,w,c
  8542  001322  6EF7               	movwf	tblptrh,c
  8543  001324                     	if	0	;There are less than 3 active tblptr bytes
  8544  001324                     	endif
  8545  001324  0009               	tblrd		*+
  8546  001326  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  8547  00132A  000A               	tblrd		*-
  8548  00132C  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  8549  001330  C01B  F001         	movff	i2printf@val,i2___lwdiv@dividend
  8550  001334  C01C  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  8551  001338  ECAD  F00D         	call	i2___lwdiv	;wreg free
  8552  00133C  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
  8553  001340  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
  8554  001344  0E00               	movlw	0
  8555  001346  6E0B               	movwf	i2___lwmod@divisor+1,c
  8556  001348  0E0A               	movlw	10
  8557  00134A  6E0A               	movwf	i2___lwmod@divisor,c
  8558  00134C  EC68  F00E         	call	i2___lwmod	;wreg free
  8559  001350  5008               	movf	?i2___lwmod,w,c
  8560  001352  0F30               	addlw	48
  8561  001354  6E20               	movwf	i2printf@c,c
  8562                           
  8563                           ;doprnt.c: 1491: break;
  8564  001356  D02B               	goto	i2l3295
  8565  001358                     i2l3287:
  8566                           
  8567                           ;doprnt.c: 1499: {
  8568                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  8569  001358  C01B  F001         	movff	i2printf@val,i2___lwdiv@dividend
  8570  00135C  C01C  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  8571  001360  501A               	movf	i2printf@prec,w,c
  8572  001362  0D02               	mullw	2
  8573  001364  0E62               	movlw	low _hexpowers
  8574  001366  24F3               	addwf	prodl,w,c
  8575  001368  6EF6               	movwf	tblptrl,c
  8576  00136A  0EFE               	movlw	high _hexpowers
  8577  00136C  20F4               	addwfc	prodh,w,c
  8578  00136E  6EF7               	movwf	tblptrh,c
  8579  001370                     	if	0	;There are less than 3 active tblptr bytes
  8580  001370                     	endif
  8581  001370  0009               	tblrd		*+
  8582  001372  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  8583  001376  000A               	tblrd		*-
  8584  001378  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  8585  00137C  ECAD  F00D         	call	i2___lwdiv	;wreg free
  8586  001380  5001               	movf	?i2___lwdiv,w,c
  8587  001382  0B0F               	andlw	15
  8588  001384  6E17               	movwf	i2printf@idx,c
  8589                           
  8590                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  8591  001386  5017               	movf	i2printf@idx,w,c
  8592  001388  0D01               	mullw	1
  8593  00138A  0EEF               	movlw	low STR_25
  8594  00138C  24F3               	addwf	prodl,w,c
  8595  00138E  6EF6               	movwf	tblptrl,c
  8596  001390  0EFE               	movlw	high STR_25
  8597  001392  20F4               	addwfc	prodh,w,c
  8598  001394  6EF7               	movwf	tblptrh,c
  8599  001396                     	if	0	;There are less than 3 active tblptr bytes
  8600  001396                     	endif
  8601  001396  0008               	tblrd		*
  8602  001398  CFF5 F020          	movff	tablat,i2printf@c
  8603                           
  8604                           ;doprnt.c: 1523: }
  8605                           
  8606                           ;doprnt.c: 1508: }
  8607                           ;doprnt.c: 1510: break;
  8608  00139C  D008               	goto	i2l3295
  8609  00139E                     i2l3293:
  8610  00139E  501D               	movf	i2printf@flag,w,c
  8611  0013A0  0B80               	andlw	128
  8612                           
  8613                           ; Switch size 1, requested type "space"
  8614                           ; Number of cases is 2, Range of values is 0 to 128
  8615                           ; switch strategies available:
  8616                           ; Name         Instructions Cycles
  8617                           ; simple_byte            7     4 (average)
  8618                           ;	Chosen strategy is simple_byte
  8619  0013A2  0A00               	xorlw	0	; case 0
  8620  0013A4  B4D8               	btfsc	status,2,c
  8621  0013A6  D7B6               	goto	i2l3285
  8622  0013A8  0A80               	xorlw	128	; case 128
  8623  0013AA  B4D8               	btfsc	status,2,c
  8624  0013AC  D7D5               	goto	i2l3287
  8625  0013AE                     i2l3295:
  8626                           
  8627                           ;doprnt.c: 1524: (putch(c) );
  8628  0013AE  5020               	movf	i2printf@c,w,c
  8629  0013B0  EC28  F00F         	call	i2_putch
  8630  0013B4                     i2l3297:
  8631  0013B4  061A               	decf	i2printf@prec,f,c
  8632  0013B6  281A               	incf	i2printf@prec,w,c
  8633  0013B8  A4D8               	btfss	status,2,c
  8634  0013BA  D7F1               	goto	i2l3293
  8635  0013BC                     i2l3299:
  8636  0013BC  C00D  FFF6         	movff	i2printf@f,tblptrl
  8637  0013C0  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  8638  0013C4  4A0D               	infsnz	i2printf@f,f,c
  8639  0013C6  2A0E               	incf	i2printf@f+1,f,c
  8640  0013C8                     	if	0	;tblptru may be non-zero
  8641  0013C8                     	endif
  8642  0013C8                     	if	0	;tblptru may be non-zero
  8643  0013C8                     	endif
  8644  0013C8  0008               	tblrd		*
  8645  0013CA  CFF5 F020          	movff	tablat,i2printf@c
  8646  0013CE  5020               	movf	i2printf@c,w,c
  8647  0013D0  B4D8               	btfsc	status,2,c
  8648  0013D2  0012               	return	
  8649  0013D4  D67F               	goto	i2l3173
  8650  0013D6                     __end_ofi2_printf:
  8651                           	opt stack 0
  8652                           pclatu	equ	0xFFB
  8653                           pclath	equ	0xFFA
  8654                           tblptru	equ	0xFF8
  8655                           tblptrh	equ	0xFF7
  8656                           tblptrl	equ	0xFF6
  8657                           tablat	equ	0xFF5
  8658                           prodh	equ	0xFF4
  8659                           prodl	equ	0xFF3
  8660                           intcon	equ	0xFF2
  8661                           intcon3	equ	0xFF0
  8662                           postinc0	equ	0xFEE
  8663                           fsr0h	equ	0xFEA
  8664                           fsr0l	equ	0xFE9
  8665                           wreg	equ	0xFE8
  8666                           fsr1h	equ	0xFE2
  8667                           fsr1l	equ	0xFE1
  8668                           indf2	equ	0xFDF
  8669                           postinc2	equ	0xFDE
  8670                           postdec2	equ	0xFDD
  8671                           fsr2h	equ	0xFDA
  8672                           fsr2l	equ	0xFD9
  8673                           status	equ	0xFD8
  8674                           
  8675 ;; *************** function i2_putch *****************
  8676 ;; Defined at:
  8677 ;;		line 23 in file "../lcd.c"
  8678 ;; Parameters:    Size  Location     Type
  8679 ;;  data            1    wreg     unsigned char 
  8680 ;; Auto vars:     Size  Location     Type
  8681 ;;  data            1    2[COMRAM] unsigned char 
  8682 ;; Return value:  Size  Location     Type
  8683 ;;                  1    wreg      void 
  8684 ;; Registers used:
  8685 ;;		wreg, status,2, status,0, cstack
  8686 ;; Tracked objects:
  8687 ;;		On entry : 0/0
  8688 ;;		On exit  : 0/0
  8689 ;;		Unchanged: 0/0
  8690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8691 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8692 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8693 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8694 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8695 ;;Total ram usage:        1 bytes
  8696 ;; Hardware stack levels used:    1
  8697 ;; Hardware stack levels required when called:    1
  8698 ;; This function calls:
  8699 ;;		i2_lcdNibble
  8700 ;; This function is called by:
  8701 ;;		i2_printf
  8702 ;; This function uses a non-reentrant model
  8703 ;;
  8704                           
  8705                           	psect	text29
  8706  001E50                     __ptext29:
  8707                           	opt stack 0
  8708  001E50                     i2_putch:
  8709                           	opt stack 24
  8710                           
  8711                           ;incstack = 0
  8712                           ;i2putch@data stored from wreg
  8713  001E50  6E03               	movwf	i2putch@data,c
  8714                           
  8715                           ;lcd.c: 24: LATDbits.LATD2 = 1;
  8716  001E52  848C               	bsf	3980,2,c	;volatile
  8717                           
  8718                           ;lcd.c: 25: lcdNibble(data);
  8719  001E54  5003               	movf	i2putch@data,w,c
  8720  001E56  ECFD  F00D         	call	i2_lcdNibble
  8721  001E5A  0012               	return		;funcret
  8722  001E5C                     __end_ofi2_putch:
  8723                           	opt stack 0
  8724                           pclatu	equ	0xFFB
  8725                           pclath	equ	0xFFA
  8726                           tblptru	equ	0xFF8
  8727                           tblptrh	equ	0xFF7
  8728                           tblptrl	equ	0xFF6
  8729                           tablat	equ	0xFF5
  8730                           prodh	equ	0xFF4
  8731                           prodl	equ	0xFF3
  8732                           intcon	equ	0xFF2
  8733                           intcon3	equ	0xFF0
  8734                           postinc0	equ	0xFEE
  8735                           fsr0h	equ	0xFEA
  8736                           fsr0l	equ	0xFE9
  8737                           wreg	equ	0xFE8
  8738                           fsr1h	equ	0xFE2
  8739                           fsr1l	equ	0xFE1
  8740                           indf2	equ	0xFDF
  8741                           postinc2	equ	0xFDE
  8742                           postdec2	equ	0xFDD
  8743                           fsr2h	equ	0xFDA
  8744                           fsr2l	equ	0xFD9
  8745                           status	equ	0xFD8
  8746                           
  8747 ;; *************** function i2_isdigit *****************
  8748 ;; Defined at:
  8749 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  8750 ;; Parameters:    Size  Location     Type
  8751 ;;  c               1    wreg     unsigned char 
  8752 ;; Auto vars:     Size  Location     Type
  8753 ;;  c               1    2[COMRAM] unsigned char 
  8754 ;; Return value:  Size  Location     Type
  8755 ;;		None               void
  8756 ;; Registers used:
  8757 ;;		wreg, status,2, status,0
  8758 ;; Tracked objects:
  8759 ;;		On entry : 0/0
  8760 ;;		On exit  : 0/0
  8761 ;;		Unchanged: 0/0
  8762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8764 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8765 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8766 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8767 ;;Total ram usage:        3 bytes
  8768 ;; Hardware stack levels used:    1
  8769 ;; This function calls:
  8770 ;;		Nothing
  8771 ;; This function is called by:
  8772 ;;		i2_printf
  8773 ;; This function uses a non-reentrant model
  8774 ;;
  8775                           
  8776                           	psect	text30
  8777  001DDA                     __ptext30:
  8778                           	opt stack 0
  8779  001DDA                     i2_isdigit:
  8780                           	opt stack 25
  8781                           
  8782                           ;incstack = 0
  8783                           ;i2isdigit@c stored from wreg
  8784  001DDA  6E03               	movwf	i2isdigit@c,c
  8785  001DDC  0E00               	movlw	0
  8786  001DDE  6E02               	movwf	i2_isdigit$936,c
  8787  001DE0  0E3A               	movlw	58
  8788  001DE2  6003               	cpfslt	i2isdigit@c,c
  8789  001DE4  D005               	goto	i2l2859
  8790  001DE6  0E2F               	movlw	47
  8791  001DE8  6403               	cpfsgt	i2isdigit@c,c
  8792  001DEA  D002               	goto	i2l2859
  8793  001DEC  0E01               	movlw	1
  8794  001DEE  6E02               	movwf	i2_isdigit$936,c
  8795  001DF0                     i2l2859:
  8796  001DF0  C002  F001         	movff	i2_isdigit$936,??i2_isdigit
  8797  001DF4  3001               	rrcf	??i2_isdigit,w,c
  8798  001DF6  0012               	return	
  8799  001DF8                     __end_ofi2_isdigit:
  8800                           	opt stack 0
  8801                           pclatu	equ	0xFFB
  8802                           pclath	equ	0xFFA
  8803                           tblptru	equ	0xFF8
  8804                           tblptrh	equ	0xFF7
  8805                           tblptrl	equ	0xFF6
  8806                           tablat	equ	0xFF5
  8807                           prodh	equ	0xFF4
  8808                           prodl	equ	0xFF3
  8809                           intcon	equ	0xFF2
  8810                           intcon3	equ	0xFF0
  8811                           postinc0	equ	0xFEE
  8812                           fsr0h	equ	0xFEA
  8813                           fsr0l	equ	0xFE9
  8814                           wreg	equ	0xFE8
  8815                           fsr1h	equ	0xFE2
  8816                           fsr1l	equ	0xFE1
  8817                           indf2	equ	0xFDF
  8818                           postinc2	equ	0xFDE
  8819                           postdec2	equ	0xFDD
  8820                           fsr2h	equ	0xFDA
  8821                           fsr2l	equ	0xFD9
  8822                           status	equ	0xFD8
  8823                           
  8824 ;; *************** function i2___wmul *****************
  8825 ;; Defined at:
  8826 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  8827 ;; Parameters:    Size  Location     Type
  8828 ;;  multiplier      2    0[COMRAM] unsigned int 
  8829 ;;  multiplicand    2    2[COMRAM] unsigned int 
  8830 ;; Auto vars:     Size  Location     Type
  8831 ;;  __wmul          2    4[COMRAM] unsigned int 
  8832 ;; Return value:  Size  Location     Type
  8833 ;;                  2    0[COMRAM] unsigned int 
  8834 ;; Registers used:
  8835 ;;		wreg, status,2, status,0, prodl, prodh
  8836 ;; Tracked objects:
  8837 ;;		On entry : 0/0
  8838 ;;		On exit  : 0/0
  8839 ;;		Unchanged: 0/0
  8840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8841 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8842 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8843 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8844 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8845 ;;Total ram usage:        6 bytes
  8846 ;; Hardware stack levels used:    1
  8847 ;; This function calls:
  8848 ;;		Nothing
  8849 ;; This function is called by:
  8850 ;;		i2_printf
  8851 ;; This function uses a non-reentrant model
  8852 ;;
  8853                           
  8854                           	psect	text31
  8855  001D96                     __ptext31:
  8856                           	opt stack 0
  8857  001D96                     i2___wmul:
  8858                           	opt stack 25
  8859                           
  8860                           ;incstack = 0
  8861  001D96  5001               	movf	i2___wmul@multiplier,w,c
  8862  001D98  0203               	mulwf	i2___wmul@multiplicand,c
  8863  001D9A  CFF3 F005          	movff	prodl,i2___wmul@product
  8864  001D9E  CFF4 F006          	movff	prodh,i2___wmul@product+1
  8865  001DA2  5001               	movf	i2___wmul@multiplier,w,c
  8866  001DA4  0204               	mulwf	i2___wmul@multiplicand+1,c
  8867  001DA6  50F3               	movf	prodl,w,c
  8868  001DA8  2606               	addwf	i2___wmul@product+1,f,c
  8869  001DAA  5002               	movf	i2___wmul@multiplier+1,w,c
  8870  001DAC  0203               	mulwf	i2___wmul@multiplicand,c
  8871  001DAE  50F3               	movf	prodl,w,c
  8872  001DB0  2606               	addwf	i2___wmul@product+1,f,c
  8873  001DB2  C005  F001         	movff	i2___wmul@product,?i2___wmul
  8874  001DB6  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
  8875  001DBA  0012               	return	
  8876  001DBC                     __end_ofi2___wmul:
  8877                           	opt stack 0
  8878                           pclatu	equ	0xFFB
  8879                           pclath	equ	0xFFA
  8880                           tblptru	equ	0xFF8
  8881                           tblptrh	equ	0xFF7
  8882                           tblptrl	equ	0xFF6
  8883                           tablat	equ	0xFF5
  8884                           prodh	equ	0xFF4
  8885                           prodl	equ	0xFF3
  8886                           intcon	equ	0xFF2
  8887                           intcon3	equ	0xFF0
  8888                           postinc0	equ	0xFEE
  8889                           fsr0h	equ	0xFEA
  8890                           fsr0l	equ	0xFE9
  8891                           wreg	equ	0xFE8
  8892                           fsr1h	equ	0xFE2
  8893                           fsr1l	equ	0xFE1
  8894                           indf2	equ	0xFDF
  8895                           postinc2	equ	0xFDE
  8896                           postdec2	equ	0xFDD
  8897                           fsr2h	equ	0xFDA
  8898                           fsr2l	equ	0xFD9
  8899                           status	equ	0xFD8
  8900                           
  8901 ;; *************** function i2___lwmod *****************
  8902 ;; Defined at:
  8903 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  8904 ;; Parameters:    Size  Location     Type
  8905 ;;  dividend        2    7[COMRAM] unsigned int 
  8906 ;;  divisor         2    9[COMRAM] unsigned int 
  8907 ;; Auto vars:     Size  Location     Type
  8908 ;;  __lwmod         1   11[COMRAM] unsigned char 
  8909 ;; Return value:  Size  Location     Type
  8910 ;;                  2    7[COMRAM] unsigned int 
  8911 ;; Registers used:
  8912 ;;		wreg, status,2, status,0
  8913 ;; Tracked objects:
  8914 ;;		On entry : 0/0
  8915 ;;		On exit  : 0/0
  8916 ;;		Unchanged: 0/0
  8917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8918 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8919 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8920 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8921 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8922 ;;Total ram usage:        5 bytes
  8923 ;; Hardware stack levels used:    1
  8924 ;; This function calls:
  8925 ;;		Nothing
  8926 ;; This function is called by:
  8927 ;;		i2_printf
  8928 ;; This function uses a non-reentrant model
  8929 ;;
  8930                           
  8931                           	psect	text32
  8932  001CD0                     __ptext32:
  8933                           	opt stack 0
  8934  001CD0                     i2___lwmod:
  8935                           	opt stack 25
  8936                           
  8937                           ;incstack = 0
  8938  001CD0  500A               	movf	i2___lwmod@divisor,w,c
  8939  001CD2  100B               	iorwf	i2___lwmod@divisor+1,w,c
  8940  001CD4  B4D8               	btfsc	status,2,c
  8941  001CD6  D018               	goto	i2l906
  8942  001CD8  0E01               	movlw	1
  8943  001CDA  6E0C               	movwf	i2___lwmod@counter,c
  8944  001CDC  D004               	goto	i2l2891
  8945  001CDE                     i2l2889:
  8946  001CDE  90D8               	bcf	status,0,c
  8947  001CE0  360A               	rlcf	i2___lwmod@divisor,f,c
  8948  001CE2  360B               	rlcf	i2___lwmod@divisor+1,f,c
  8949  001CE4  2A0C               	incf	i2___lwmod@counter,f,c
  8950  001CE6                     i2l2891:
  8951  001CE6  AE0B               	btfss	i2___lwmod@divisor+1,7,c
  8952  001CE8  D7FA               	goto	i2l2889
  8953  001CEA                     i2l2893:
  8954  001CEA  500A               	movf	i2___lwmod@divisor,w,c
  8955  001CEC  5C08               	subwf	i2___lwmod@dividend,w,c
  8956  001CEE  500B               	movf	i2___lwmod@divisor+1,w,c
  8957  001CF0  5809               	subwfb	i2___lwmod@dividend+1,w,c
  8958  001CF2  A0D8               	btfss	status,0,c
  8959  001CF4  D004               	goto	i2l2897
  8960  001CF6  500A               	movf	i2___lwmod@divisor,w,c
  8961  001CF8  5E08               	subwf	i2___lwmod@dividend,f,c
  8962  001CFA  500B               	movf	i2___lwmod@divisor+1,w,c
  8963  001CFC  5A09               	subwfb	i2___lwmod@dividend+1,f,c
  8964  001CFE                     i2l2897:
  8965  001CFE  90D8               	bcf	status,0,c
  8966  001D00  320B               	rrcf	i2___lwmod@divisor+1,f,c
  8967  001D02  320A               	rrcf	i2___lwmod@divisor,f,c
  8968  001D04  2E0C               	decfsz	i2___lwmod@counter,f,c
  8969  001D06  D7F1               	goto	i2l2893
  8970  001D08                     i2l906:
  8971  001D08  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
  8972  001D0C  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
  8973  001D10  0012               	return		;funcret
  8974  001D12                     __end_ofi2___lwmod:
  8975                           	opt stack 0
  8976                           pclatu	equ	0xFFB
  8977                           pclath	equ	0xFFA
  8978                           tblptru	equ	0xFF8
  8979                           tblptrh	equ	0xFF7
  8980                           tblptrl	equ	0xFF6
  8981                           tablat	equ	0xFF5
  8982                           prodh	equ	0xFF4
  8983                           prodl	equ	0xFF3
  8984                           intcon	equ	0xFF2
  8985                           intcon3	equ	0xFF0
  8986                           postinc0	equ	0xFEE
  8987                           fsr0h	equ	0xFEA
  8988                           fsr0l	equ	0xFE9
  8989                           wreg	equ	0xFE8
  8990                           fsr1h	equ	0xFE2
  8991                           fsr1l	equ	0xFE1
  8992                           indf2	equ	0xFDF
  8993                           postinc2	equ	0xFDE
  8994                           postdec2	equ	0xFDD
  8995                           fsr2h	equ	0xFDA
  8996                           fsr2l	equ	0xFD9
  8997                           status	equ	0xFD8
  8998                           
  8999 ;; *************** function i2___lwdiv *****************
  9000 ;; Defined at:
  9001 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  9002 ;; Parameters:    Size  Location     Type
  9003 ;;  dividend        2    0[COMRAM] unsigned int 
  9004 ;;  divisor         2    2[COMRAM] unsigned int 
  9005 ;; Auto vars:     Size  Location     Type
  9006 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  9007 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  9008 ;; Return value:  Size  Location     Type
  9009 ;;                  2    0[COMRAM] unsigned int 
  9010 ;; Registers used:
  9011 ;;		wreg, status,2, status,0
  9012 ;; Tracked objects:
  9013 ;;		On entry : 0/0
  9014 ;;		On exit  : 0/0
  9015 ;;		Unchanged: 0/0
  9016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9017 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9018 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9019 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9020 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9021 ;;Total ram usage:        7 bytes
  9022 ;; Hardware stack levels used:    1
  9023 ;; This function calls:
  9024 ;;		Nothing
  9025 ;; This function is called by:
  9026 ;;		i2_printf
  9027 ;; This function uses a non-reentrant model
  9028 ;;
  9029                           
  9030                           	psect	text33
  9031  001B5A                     __ptext33:
  9032                           	opt stack 0
  9033  001B5A                     i2___lwdiv:
  9034                           	opt stack 25
  9035                           
  9036                           ;incstack = 0
  9037  001B5A  0E00               	movlw	0
  9038  001B5C  6E06               	movwf	i2___lwdiv@quotient+1,c
  9039  001B5E  0E00               	movlw	0
  9040  001B60  6E05               	movwf	i2___lwdiv@quotient,c
  9041  001B62  5003               	movf	i2___lwdiv@divisor,w,c
  9042  001B64  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  9043  001B66  B4D8               	btfsc	status,2,c
  9044  001B68  D01C               	goto	i2l896
  9045  001B6A  0E01               	movlw	1
  9046  001B6C  6E07               	movwf	i2___lwdiv@counter,c
  9047  001B6E  D004               	goto	i2l2871
  9048  001B70                     i2l2869:
  9049  001B70  90D8               	bcf	status,0,c
  9050  001B72  3603               	rlcf	i2___lwdiv@divisor,f,c
  9051  001B74  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  9052  001B76  2A07               	incf	i2___lwdiv@counter,f,c
  9053  001B78                     i2l2871:
  9054  001B78  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  9055  001B7A  D7FA               	goto	i2l2869
  9056  001B7C                     i2l2873:
  9057  001B7C  90D8               	bcf	status,0,c
  9058  001B7E  3605               	rlcf	i2___lwdiv@quotient,f,c
  9059  001B80  3606               	rlcf	i2___lwdiv@quotient+1,f,c
  9060  001B82  5003               	movf	i2___lwdiv@divisor,w,c
  9061  001B84  5C01               	subwf	i2___lwdiv@dividend,w,c
  9062  001B86  5004               	movf	i2___lwdiv@divisor+1,w,c
  9063  001B88  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  9064  001B8A  A0D8               	btfss	status,0,c
  9065  001B8C  D005               	goto	i2l2881
  9066  001B8E  5003               	movf	i2___lwdiv@divisor,w,c
  9067  001B90  5E01               	subwf	i2___lwdiv@dividend,f,c
  9068  001B92  5004               	movf	i2___lwdiv@divisor+1,w,c
  9069  001B94  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  9070  001B96  8005               	bsf	i2___lwdiv@quotient,0,c
  9071  001B98                     i2l2881:
  9072  001B98  90D8               	bcf	status,0,c
  9073  001B9A  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  9074  001B9C  3203               	rrcf	i2___lwdiv@divisor,f,c
  9075  001B9E  2E07               	decfsz	i2___lwdiv@counter,f,c
  9076  001BA0  D7ED               	goto	i2l2873
  9077  001BA2                     i2l896:
  9078  001BA2  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  9079  001BA6  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  9080  001BAA  0012               	return		;funcret
  9081  001BAC                     __end_ofi2___lwdiv:
  9082                           	opt stack 0
  9083                           pclatu	equ	0xFFB
  9084                           pclath	equ	0xFFA
  9085                           tblptru	equ	0xFF8
  9086                           tblptrh	equ	0xFF7
  9087                           tblptrl	equ	0xFF6
  9088                           tablat	equ	0xFF5
  9089                           prodh	equ	0xFF4
  9090                           prodl	equ	0xFF3
  9091                           intcon	equ	0xFF2
  9092                           intcon3	equ	0xFF0
  9093                           postinc0	equ	0xFEE
  9094                           fsr0h	equ	0xFEA
  9095                           fsr0l	equ	0xFE9
  9096                           wreg	equ	0xFE8
  9097                           fsr1h	equ	0xFE2
  9098                           fsr1l	equ	0xFE1
  9099                           indf2	equ	0xFDF
  9100                           postinc2	equ	0xFDE
  9101                           postdec2	equ	0xFDD
  9102                           fsr2h	equ	0xFDA
  9103                           fsr2l	equ	0xFD9
  9104                           status	equ	0xFD8
  9105                           
  9106 ;; *************** function i2_lcdInst *****************
  9107 ;; Defined at:
  9108 ;;		line 18 in file "../lcd.c"
  9109 ;; Parameters:    Size  Location     Type
  9110 ;;  data            1    wreg     unsigned char 
  9111 ;; Auto vars:     Size  Location     Type
  9112 ;;  data            1    2[COMRAM] unsigned char 
  9113 ;; Return value:  Size  Location     Type
  9114 ;;                  1    wreg      void 
  9115 ;; Registers used:
  9116 ;;		wreg, status,2, status,0, cstack
  9117 ;; Tracked objects:
  9118 ;;		On entry : 0/0
  9119 ;;		On exit  : 0/0
  9120 ;;		Unchanged: 0/0
  9121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9123 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9124 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9125 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9126 ;;Total ram usage:        1 bytes
  9127 ;; Hardware stack levels used:    1
  9128 ;; Hardware stack levels required when called:    1
  9129 ;; This function calls:
  9130 ;;		i2_lcdNibble
  9131 ;; This function is called by:
  9132 ;;		_switchMenu
  9133 ;;		_ISR
  9134 ;; This function uses a non-reentrant model
  9135 ;;
  9136                           
  9137                           	psect	text34
  9138  001E5C                     __ptext34:
  9139                           	opt stack 0
  9140  001E5C                     i2_lcdInst:
  9141                           	opt stack 25
  9142                           
  9143                           ;incstack = 0
  9144                           ;i2lcdInst@data stored from wreg
  9145  001E5C  6E03               	movwf	i2lcdInst@data,c
  9146                           
  9147                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  9148  001E5E  948C               	bcf	3980,2,c	;volatile
  9149                           
  9150                           ;lcd.c: 20: lcdNibble(data);
  9151  001E60  5003               	movf	i2lcdInst@data,w,c
  9152  001E62  ECFD  F00D         	call	i2_lcdNibble
  9153  001E66  0012               	return		;funcret
  9154  001E68                     __end_ofi2_lcdInst:
  9155                           	opt stack 0
  9156                           pclatu	equ	0xFFB
  9157                           pclath	equ	0xFFA
  9158                           tblptru	equ	0xFF8
  9159                           tblptrh	equ	0xFF7
  9160                           tblptrl	equ	0xFF6
  9161                           tablat	equ	0xFF5
  9162                           prodh	equ	0xFF4
  9163                           prodl	equ	0xFF3
  9164                           intcon	equ	0xFF2
  9165                           intcon3	equ	0xFF0
  9166                           postinc0	equ	0xFEE
  9167                           fsr0h	equ	0xFEA
  9168                           fsr0l	equ	0xFE9
  9169                           wreg	equ	0xFE8
  9170                           fsr1h	equ	0xFE2
  9171                           fsr1l	equ	0xFE1
  9172                           indf2	equ	0xFDF
  9173                           postinc2	equ	0xFDE
  9174                           postdec2	equ	0xFDD
  9175                           fsr2h	equ	0xFDA
  9176                           fsr2l	equ	0xFD9
  9177                           status	equ	0xFD8
  9178                           
  9179 ;; *************** function i2_lcdNibble *****************
  9180 ;; Defined at:
  9181 ;;		line 28 in file "../lcd.c"
  9182 ;; Parameters:    Size  Location     Type
  9183 ;;  data            1    wreg     unsigned char 
  9184 ;; Auto vars:     Size  Location     Type
  9185 ;;  data            1    1[COMRAM] unsigned char 
  9186 ;;  lcdNibble       1    0[COMRAM] unsigned char 
  9187 ;; Return value:  Size  Location     Type
  9188 ;;                  1    wreg      void 
  9189 ;; Registers used:
  9190 ;;		wreg, status,2, status,0
  9191 ;; Tracked objects:
  9192 ;;		On entry : 0/0
  9193 ;;		On exit  : 0/0
  9194 ;;		Unchanged: 0/0
  9195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9196 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9197 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9198 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9199 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9200 ;;Total ram usage:        2 bytes
  9201 ;; Hardware stack levels used:    1
  9202 ;; This function calls:
  9203 ;;		Nothing
  9204 ;; This function is called by:
  9205 ;;		i2_lcdInst
  9206 ;;		i2_putch
  9207 ;; This function uses a non-reentrant model
  9208 ;;
  9209                           
  9210                           	psect	text35
  9211  001BFA                     __ptext35:
  9212                           	opt stack 0
  9213  001BFA                     i2_lcdNibble:
  9214                           	opt stack 24
  9215                           
  9216                           ;incstack = 0
  9217                           ;i2lcdNibble@data stored from wreg
  9218  001BFA  6E02               	movwf	i2lcdNibble@data,c
  9219                           
  9220                           ;lcd.c: 30: char temp = data & 0xF0;
  9221  001BFC  5002               	movf	i2lcdNibble@data,w,c
  9222  001BFE  0BF0               	andlw	240
  9223  001C00  6E01               	movwf	i2lcdNibble@temp,c
  9224                           
  9225                           ;lcd.c: 31: LATD = LATD & 0x0F;
  9226  001C02  508C               	movf	3980,w,c	;volatile
  9227  001C04  0B0F               	andlw	15
  9228  001C06  6E8C               	movwf	3980,c	;volatile
  9229                           
  9230                           ;lcd.c: 32: LATD = temp | LATD;
  9231  001C08  5001               	movf	i2lcdNibble@temp,w,c
  9232  001C0A  108C               	iorwf	3980,w,c	;volatile
  9233  001C0C  6E8C               	movwf	3980,c	;volatile
  9234                           
  9235                           ;lcd.c: 34: LATDbits.LATD3 = 0;
  9236  001C0E  968C               	bcf	3980,3,c	;volatile
  9237                           
  9238                           ;lcd.c: 35: _delay((unsigned long)((30)*(10000000/4000000.0)));
  9239  001C10  0E19               	movlw	25
  9240  001C12                     i2u556_47:
  9241  001C12  2EE8               	decfsz	wreg,f,c
  9242  001C14  D7FE               	bra	i2u556_47
  9243                           
  9244                           ;lcd.c: 36: LATDbits.LATD3 = 1;
  9245  001C16  868C               	bsf	3980,3,c	;volatile
  9246                           
  9247                           ;lcd.c: 37: _delay((unsigned long)((30)*(10000000/4000000.0)));
  9248  001C18  0E19               	movlw	25
  9249  001C1A                     i2u557_47:
  9250  001C1A  2EE8               	decfsz	wreg,f,c
  9251  001C1C  D7FE               	bra	i2u557_47
  9252                           
  9253                           ;lcd.c: 39: data = data << 4;
  9254  001C1E  3802               	swapf	i2lcdNibble@data,w,c
  9255  001C20  0BF0               	andlw	240
  9256  001C22  6E02               	movwf	i2lcdNibble@data,c
  9257                           
  9258                           ;lcd.c: 41: temp = data & 0xF0;
  9259  001C24  5002               	movf	i2lcdNibble@data,w,c
  9260  001C26  0BF0               	andlw	240
  9261  001C28  6E01               	movwf	i2lcdNibble@temp,c
  9262                           
  9263                           ;lcd.c: 42: LATD = LATD & 0x0F;
  9264  001C2A  508C               	movf	3980,w,c	;volatile
  9265  001C2C  0B0F               	andlw	15
  9266  001C2E  6E8C               	movwf	3980,c	;volatile
  9267                           
  9268                           ;lcd.c: 43: LATD = temp | LATD;
  9269  001C30  5001               	movf	i2lcdNibble@temp,w,c
  9270  001C32  108C               	iorwf	3980,w,c	;volatile
  9271  001C34  6E8C               	movwf	3980,c	;volatile
  9272                           
  9273                           ;lcd.c: 45: LATDbits.LATD3 = 0;
  9274  001C36  968C               	bcf	3980,3,c	;volatile
  9275                           
  9276                           ;lcd.c: 46: _delay((unsigned long)((30)*(10000000/4000000.0)));
  9277  001C38  0E19               	movlw	25
  9278  001C3A                     i2u558_47:
  9279  001C3A  2EE8               	decfsz	wreg,f,c
  9280  001C3C  D7FE               	bra	i2u558_47
  9281                           
  9282                           ;lcd.c: 47: LATDbits.LATD3 = 1;
  9283  001C3E  868C               	bsf	3980,3,c	;volatile
  9284                           
  9285                           ;lcd.c: 48: _delay((unsigned long)((30)*(10000000/4000000.0)));
  9286  001C40  0E19               	movlw	25
  9287  001C42                     i2u559_47:
  9288  001C42  2EE8               	decfsz	wreg,f,c
  9289  001C44  D7FE               	bra	i2u559_47
  9290  001C46  0012               	return		;funcret
  9291  001C48                     __end_ofi2_lcdNibble:
  9292                           	opt stack 0
  9293                           pclatu	equ	0xFFB
  9294                           pclath	equ	0xFFA
  9295                           tblptru	equ	0xFF8
  9296                           tblptrh	equ	0xFF7
  9297                           tblptrl	equ	0xFF6
  9298                           tablat	equ	0xFF5
  9299                           prodh	equ	0xFF4
  9300                           prodl	equ	0xFF3
  9301                           intcon	equ	0xFF2
  9302                           intcon3	equ	0xFF0
  9303                           postinc0	equ	0xFEE
  9304                           fsr0h	equ	0xFEA
  9305                           fsr0l	equ	0xFE9
  9306                           wreg	equ	0xFE8
  9307                           fsr1h	equ	0xFE2
  9308                           fsr1l	equ	0xFE1
  9309                           indf2	equ	0xFDF
  9310                           postinc2	equ	0xFDE
  9311                           postdec2	equ	0xFDD
  9312                           fsr2h	equ	0xFDA
  9313                           fsr2l	equ	0xFD9
  9314                           status	equ	0xFD8
  9315                           pclatu	equ	0xFFB
  9316                           pclath	equ	0xFFA
  9317                           tblptru	equ	0xFF8
  9318                           tblptrh	equ	0xFF7
  9319                           tblptrl	equ	0xFF6
  9320                           tablat	equ	0xFF5
  9321                           prodh	equ	0xFF4
  9322                           prodl	equ	0xFF3
  9323                           intcon	equ	0xFF2
  9324                           intcon3	equ	0xFF0
  9325                           postinc0	equ	0xFEE
  9326                           fsr0h	equ	0xFEA
  9327                           fsr0l	equ	0xFE9
  9328                           wreg	equ	0xFE8
  9329                           fsr1h	equ	0xFE2
  9330                           fsr1l	equ	0xFE1
  9331                           indf2	equ	0xFDF
  9332                           postinc2	equ	0xFDE
  9333                           postdec2	equ	0xFDD
  9334                           fsr2h	equ	0xFDA
  9335                           fsr2l	equ	0xFD9
  9336                           status	equ	0xFD8
  9337                           
  9338                           	psect	rparam
  9339  0000                     pclatu	equ	0xFFB
  9340                           pclath	equ	0xFFA
  9341                           tblptru	equ	0xFF8
  9342                           tblptrh	equ	0xFF7
  9343                           tblptrl	equ	0xFF6
  9344                           tablat	equ	0xFF5
  9345                           prodh	equ	0xFF4
  9346                           prodl	equ	0xFF3
  9347                           intcon	equ	0xFF2
  9348                           intcon3	equ	0xFF0
  9349                           postinc0	equ	0xFEE
  9350                           fsr0h	equ	0xFEA
  9351                           fsr0l	equ	0xFE9
  9352                           wreg	equ	0xFE8
  9353                           fsr1h	equ	0xFE2
  9354                           fsr1l	equ	0xFE1
  9355                           indf2	equ	0xFDF
  9356                           postinc2	equ	0xFDE
  9357                           postdec2	equ	0xFDD
  9358                           fsr2h	equ	0xFDA
  9359                           fsr2l	equ	0xFD9
  9360                           status	equ	0xFD8
  9361                           
  9362                           	psect	temp
  9363  00004B                     btemp:
  9364                           	opt stack 0
  9365  00004B                     	ds	1
  9366  0000                     int$flags	set	btemp
  9367                           pclatu	equ	0xFFB
  9368                           pclath	equ	0xFFA
  9369                           tblptru	equ	0xFF8
  9370                           tblptrh	equ	0xFF7
  9371                           tblptrl	equ	0xFF6
  9372                           tablat	equ	0xFF5
  9373                           prodh	equ	0xFF4
  9374                           prodl	equ	0xFF3
  9375                           intcon	equ	0xFF2
  9376                           intcon3	equ	0xFF0
  9377                           postinc0	equ	0xFEE
  9378                           fsr0h	equ	0xFEA
  9379                           fsr0l	equ	0xFE9
  9380                           wreg	equ	0xFE8
  9381                           fsr1h	equ	0xFE2
  9382                           fsr1l	equ	0xFE1
  9383                           indf2	equ	0xFDF
  9384                           postinc2	equ	0xFDE
  9385                           postdec2	equ	0xFDD
  9386                           fsr2h	equ	0xFDA
  9387                           fsr2l	equ	0xFD9
  9388                           status	equ	0xFD8


Data Sizes:
    Strings     405
    Constant    35
    Data        1
    BSS         42
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     64      74
    BANK0           128     39      72
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 25
		 -> STR_24(CODE[22]), STR_23(CODE[17]), STR_22(CODE[17]), STR_21(CODE[17]), 
		 -> STR_20(CODE[23]), STR_19(CODE[23]), STR_18(CODE[21]), STR_17(CODE[17]), 
		 -> STR_16(CODE[21]), STR_15(CODE[17]), STR_14(CODE[21]), STR_13(CODE[17]), 
		 -> STR_12(CODE[19]), STR_11(CODE[17]), STR_10(CODE[19]), STR_9(CODE[17]), 
		 -> STR_8(CODE[25]), STR_7(CODE[17]), STR_6(CODE[17]), STR_5(CODE[17]), 
		 -> STR_4(CODE[17]), STR_3(CODE[17]), STR_2(CODE[17]), STR_1(CODE[17]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 


Critical Paths under _main in COMRAM

    _testBatteries->_wait_3ms
    _stopOperation->___awdiv
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _I2C_Master_Init->___lldiv

Critical Paths under _ISR in COMRAM

    _ISR->_switchMenu
    _switchMenu->i2_printf
    i2_stopOperation->i2___awdiv
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_lcdInst->i2_lcdNibble

Critical Paths under _main in BANK0

    _main->_printf

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                17    17      0    8918
                                             22 BANK0     17    17      0
                    _I2C_Master_Init
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _initLCD
                            _lcdInst
                             _printf
                            _readADC
                      _stopOperation
                      _testBatteries
                           _wait_3ms
 ---------------------------------------------------------------------------------
 (1) _testBatteries                                        0     0      0     982
                           _wait_3ms
 ---------------------------------------------------------------------------------
 (1) _wait_3ms                                             2     0      2     982
                                             51 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _stopOperation                                        0     0      0    1004
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     500
                                             51 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     504
                                             51 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _readADC                                              1     1      0      22
                                             51 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _printf                                              31    23      8    4426
                                              0 BANK0     22    14      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0     135
                                             53 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             51 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     289
                                             51 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     287
                                             58 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     418
                                             51 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                             54 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0     135
                                             53 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0     113
                                             51 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Write                                     2     0      2     214
                                             52 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Read                                      2     2      0      45
                                             52 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Wait                                      1     1      0       0
                                             51 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     398
                                              0 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     290
                                             51 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _ISR                                                 16    16      0    6841
                                             35 COMRAM    16    16      0
                         _switchMenu
                          i2___awdiv
                          i2___awmod
                          i2_lcdInst
                           i2_printf
                    i2_stopOperation
 ---------------------------------------------------------------------------------
 (5) _switchMenu                                           3     1      2    3137
                                             32 COMRAM     3     1      2
                          i2_lcdInst
                           i2_printf
                    i2_stopOperation
 ---------------------------------------------------------------------------------
 (5) i2_stopOperation                                      0     0      0     804
                          i2___awdiv
                          i2___awmod
 ---------------------------------------------------------------------------------
 (6) i2___awmod                                            6     2      4     400
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) i2___awdiv                                            8     4      4     404
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (5) i2_printf                                            29    23      6    1938
                                             12 COMRAM    20    14      6
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (6) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (6) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) i2___wmul                                             6     2      4     209
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (6) i2___lwdiv                                            7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (7) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _I2C_Master_Read
     _I2C_Master_Wait
   _I2C_Master_Start
     _I2C_Master_Wait
   _I2C_Master_Stop
     _I2C_Master_Wait
   _I2C_Master_Write
     _I2C_Master_Wait
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
       _lcdNibble
   _readADC
   _stopOperation
     ___awdiv
     ___awmod
   _testBatteries
     _wait_3ms
   _wait_3ms

 _ISR (ROOT)
   _switchMenu
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
       i2___lwmod
         i2___lwdiv (ARG)
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
     i2_stopOperation
       i2___awdiv
       i2___awmod
   i2___awdiv
   i2___awmod
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     i2___lwdiv
     i2___lwmod
       i2___lwdiv (ARG)
     i2___wmul
     i2_isdigit
     i2_putch
       i2_lcdNibble
   i2_stopOperation
     i2___awdiv
     i2___awmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     27      48       5       56.3%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     40      4A       1       58.7%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      92      34        0.0%
DATA                 0      0      92       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sat Apr 01 14:47:45 2017

                       l30 1E26               ___awdiv@sign 0039        ___wmul@multiplicand 0036  
       i2___lwdiv@dividend 0001                __CFG_BORV$3 000000               __CFG_CP0$OFF 000000  
             __CFG_CP1$OFF 000000               __CFG_CP2$OFF 000000               __CFG_CP3$OFF 000000  
              __CFG_OSC$HS 000000                        l250 02BC                        l252 0314  
                      l325 1E20                        l342 14F4                        l246 020C  
                      l255 0590                        l336 1434                        l248 0264  
                      l451 0E3A                        l347 156C                        l339 1494  
                      l269 0514                        l906 1CC6                        l843 19BA  
                      l896 1B50                        _GIE 007F97               __CFG_CPB$OFF 000000  
                      _PEN 007E2A               __CFG_CPD$OFF 000000                        _ISR 0008  
                      _SEN 007E28                        _min 00BA                        _sec 00C0  
             ___awmod@sign 0039                        prod 000FF3                        wreg 000FE8  
             __CFG_LVP$OFF 000000                       ?_ISR 0001               __CFG_WDT$OFF 000000  
                     l3001 1A06                       l3013 1A32                       l3005 1A1A  
                     l3023 196C                       l3025 1978                       l3009 1A24  
                     l3035 19AC                       l3027 197C                       l3045 1B1E  
                     l3047 1B26                       l3057 1B46                       l3049 1B2A  
                     l3073 1CBC                       l3065 1C9C                       l3067 1CA4  
                     l3069 1CA8                       l3503 140C                       l3329 1D90  
                     l4411 0ECA                       l3531 146C                       l4413 0ED0  
                     l3607 157C                       l4441 0F7C                       l4353 0D2C  
                     l4513 00BE                       l4505 008C                       l4435 0F3A  
                     l4427 0F06                       l4363 0D5C                       l2915 1E00  
                     l4531 010C                       l4453 0FB2                       l4429 0F18  
                     l4381 0E08                       l4357 0D40                       l3581 1522  
                     l4525 00EA                       l4517 00C8                       l2927 1DD2  
                     l4455 0FBE                       l4463 0FEC                       l4447 0F96  
                     l4439 0F72                       l4359 0D52                       l2951 1866  
                     l3559 14CC                       l4703 04A4                       l4615 0320  
                     l4535 0116                       l4543 0138                       l4465 0FF2  
                     l4473 1086                       l4393 0E72                       l4377 0E02  
                     l4369 0D8C                       l2961 1888                       l2945 1856  
                     l4545 0144                       l4467 103A                       l4475 1098  
                     l4459 0FD8                       l4811 082E                       l4731 058C  
                     l4651 03D8                       l4627 0366                       l4477 10A0  
                     l4397 0E8E                       l2957 187C                       l2973 18AE  
                     l3589 153E                       l4813 083A                       l4805 07C4  
                     l4741 05D2                       l4629 036A                       l4733 059C  
                     l4399 0E94                       l4479 10AC                       l2959 1884  
                     l4823 0888                       l4751 0624                       l4743 05DC  
                     l4735 05A6                       l4663 0400                       l4559 01C6  
                     l2977 18BC                       l2969 18A4                       l2993 19EC  
                     l4681 0468                       l4657 03EC                       l2997 19FA  
                     l2989 19E0                       l4781 0718                       l4773 06D8  
                     l4765 0698                       l4757 0658                       l4749 0618  
                     l4677 041C                       l4669 0414                       l2999 1A02  
                     l4791 0764                       l4783 0724                       l4775 06E4  
                     l4767 06A4                       l4759 0664                       l4795 079A  
                     l4789 0758                       l4799 07A4                       STR_1 FFDD  
                     STR_2 FFEE                       STR_3 FFCC                       STR_4 FF44  
                     STR_5 FF88                       STR_6 FF66                       STR_7 FFBB  
                     STR_8 FE6A                       STR_9 FF55                       _LATA 000F89  
                     _LATB 000F8A                       _LATC 000F8B                       _LATD 000F8C  
                     _LATE 000F8D                       u3060 1D8E                       u3400 155A  
                     u3330 1418                       u5100 028C                       u5020 01E2  
                     u3350 1478                       u3360 14B0                       u5120 02BC  
                     u3370 14D8                       u5210 0380                       u5211 037C  
                     u3380 1510                       u5300 04E8                       u5220 0396  
                     u5212 0382                       u5140 02E4                       u5060 0234  
                     u3390 152E                       u5310 04EA                       u5222 0398  
                     u5118 0290                       u5038 01E6                       u5160 0314  
                     u5080 0264                       _PEIE 007F96                       u5340 0582  
                     u5180 033C                       u5158 02E8                       u5078 0238  
                     u5507 1C4E                       _RCEN 007E2B                       u5517 1C82  
                     u5198 0340                       u5527 1BC4                       u5537 1BCC  
                     u5547 1BEC                       u5557 1BF4                       u5477 00DA  
                     u4695 1ADA                       u5487 0128                       u5497 0874  
                     _TMR0 000FD6                       _TMR1 000FCE                       _main 0012  
                     _keys FE47                       _numC 00BE                       _time 00A7  
                     fsr0h 000FEA                       fsr1h 000FE2         i2___lwdiv@quotient 0005  
                     fsr2h 000FDA                       fsr0l 000FE9                       indf2 000FDF  
                     fsr1l 000FE1                       fsr2l 000FD9                       btemp 004B  
                     prodh 000FF4                       prodl 000FF3                       start 000E  
            __CFG_IESO$OFF 000000            __end_ofi2_putch 1E5C              __CFG_MCLRE$ON 000000  
             ___param_bank 000000                i2_lcdNibble 1BFA                      ??_ISR 0024  
         ?_I2C_Master_Init 0080           ?_I2C_Master_Read 0001           ?_I2C_Master_Wait 0001  
         ?_I2C_Master_Stop 0001                      ?_main 0001                      _ACKEN 007E2C  
                    _ACKDT 007E2D            __end_of___awdiv 18C6                      _ADRES 000FC3  
                    STR_10 FEDC                      STR_11 FF11                      STR_12 FEDC  
                    STR_20 FE9A                      STR_21 FFAA                      STR_13 FF33  
                    STR_22 FF00                      STR_14 FEC7                      STR_23 FF99  
                    STR_15 FF22                      STR_16 FEC7                      STR_24 FEB1  
                    STR_17 FF77                      STR_25 FEEF                      STR_18 FEC7  
                    STR_19 FE83            __end_of___awmod 1A3C            __end_of___lldiv 19CC  
                    _T0CON 000FD5            ___awdiv@divisor 0036                      _T1CON 000FCD  
          __end_of___lwdiv 1B5A            __end_of___lwmod 1CD0                      i2l451 11B6  
                    i2l419 0CE2                      i2l368 09C2                      i2l906 1D08  
          ___awdiv@counter 0038                      i2l896 1BA2                      _PORTB 000F81  
                    _TRISA 000F92                      _TRISB 000F93                      _TRISC 000F94  
                    _TRISD 000F95                      _TRISE 000F96              _turn1BackLeft 00C3  
            __CFG_PWRT$OFF 000000              __CFG_WRT0$OFF 000000              __CFG_WRT1$OFF 000000  
            __CFG_WRT2$OFF 000000              __CFG_WRT3$OFF 000000            __end_of_lcdInst 1E50  
           __CFG_EBTR0$OFF 000000             __CFG_FCMEN$OFF 000000             __CFG_EBTR1$OFF 000000  
            _turn2BackLeft 00C5             __CFG_EBTR2$OFF 000000             __CFG_EBTR3$OFF 000000  
   __size_of_stopOperation 010A              __CFG_WRTB$OFF 000000              __CFG_WRTC$OFF 000000  
            __CFG_WRTD$OFF 000000            __end_of_readADC 1E26            __end_of_initLCD 1C8E  
           __CFG_EBTRB$OFF 000000                 i2isdigit@c 0003            __end_of_dpowers FE62  
                    _numAA 00BC                      _num9V 00BB            __end_of_isdigit 1DDA  
                    _step1 0049                      _step2 004A                      _putch 1E38  
                    main@i 00A4                      pclath 000FFA                      tablat 000FF5  
         __end_ofi2___wmul 1DBC                      status 000FD8         __size_ofi2___awdiv 0084  
       __size_ofi2___awmod 0070             __CFG_PBADEN$ON 000000              i2printf@width 001E  
         __end_ofi2_printf 13D6         __size_ofi2___lwdiv 0052         __size_ofi2___lwmod 0042  
          __initialization 1D12         __size_ofi2_lcdInst 000C               __end_of_main 0894  
             __end_of_keys FE58                 i2printf@ap 0018         __size_ofi2_isdigit 001E  
                   ??_main 0096              __activetblptr 000002          ?_I2C_Master_Start 0001  
        ?_I2C_Master_Write 0035         ??_I2C_Master_Start 0035                     _ADCON0 000FC2  
                   _ADCON1 000FC1         ??_I2C_Master_Write 0037                     _ADCON2 000FC0  
         ___awdiv@dividend 0034            i2lcdNibble@data 0002                     ?_putch 0001  
          i2lcdNibble@temp 0001                     _INT1IE 007F83                     _INT1IF 007F80  
                   i2l3201 1188                     i2l3213 11E4                     i2l3231 122E  
                   i2l3233 1232                     i2l3217 11FE                     i2l4201 0AD4  
                   i2l3219 1202                     i2l4131 098A                     i2l4123 0970  
                   i2l3261 12B4                     i2l3173 10D4                     i2l4301 0C64  
                   i2l4213 0B18                     i2l3255 1288                     i2l3247 125E  
                   i2l3183 10F8                     i2l3273 12E0                     i2l3249 126E  
                   i2l3177 10E4                     i2l4305 0C70                     i2l4225 0B5C  
                   i2l4129 0986                     i2l4137 099C                     i2l3275 12E8  
                   i2l3283 130E                     i2l3267 12CA                     i2l3259 12AC  
                   i2l3179 10F2                     i2l2811 1940                     i2l2803 1928  
                   i2l4331 0CC2                     i2l4323 0CAA                     i2l4315 0C90  
                   i2l4139 09A0                     i2l3285 1314                     i2l3293 139E  
                   i2l3197 1184                     i2l3189 1126                     i2l4341 0CE0  
                   i2l4309 0C7C                     i2l4317 0C92                     i2l4253 0BD0  
                   i2l4245 0BB8                     i2l4157 09E4                     i2l3287 1358  
                   i2l3295 13AE                     i2l3279 12FC                     i2l2807 1932  
                   i2l2831 1A6A                     i2l2823 1A50                     i2l4335 0CCC  
                   i2l4327 0CB6                     i2l4271 0C0A                     i2l4263 0BF0  
                   i2l4239 0BA2                     i2l3297 13B4                     i2l2833 1A72  
                   i2l3721 17DE                     i2l4257 0BDC                     i2l4249 0BC4  
                   i2l4265 0BF2                     i2l4177 0A4C                     i2l4169 0A22  
                   i2l3299 13BC                     i2l2835 1A76                     i2l2843 1A94  
                   i2l2827 1A5C                     i2l4283 0C2C                     i2l4275 0C16  
                   i2l4291 0C42                     i2l4187 0A8C                     i2l4099 08FC  
                   i2l3717 17CE                     i2l4189 0A90                     i2l2871 1B78  
                   i2l2791 1900                     i2l2847 1AA2                     i2l2839 1A8A  
                   i2l4279 0C22                     i2l4199 0AD0                     i2l2881 1B98  
                   i2l2873 1B7C                     i2l2793 1908                     i2l2785 18EA  
                   i2l3745 183C                     i2l3737 181C                     i2l3729 17FA  
                   i2l4297 0C58                     i2l4289 0C40                     i2l2891 1CE6  
                   i2l2859 1DF0                     i2l2795 190C                     i2l2779 18DA  
                   i2l3739 1822                     i2l2869 1B70                     i2l2893 1CEA  
                   i2l2897 1CFE                     i2l2889 1CDE                     _TMR0IE 007F95  
                   _TMR0IF 007F92                  ??i2_putch 0003                     _TMR1IE 007CE8  
                   _TMR1IF 007CF0                     _SSPADD 000FC8                     _TRISC3 007CA3  
                   _TRISC4 007CA4                     _SSPBUF 000FC9             _turn1BackRight 00C4  
           __CFG_XINST$OFF 000000              _stopOperation 1580             _turn2BackRight 00C6  
                   ___wmul 1D4A                  ??___awdiv 0038             __CFG_STVREN$ON 000000  
                ??___awmod 0038                  ??___lldiv 003C                  ??___lwdiv 0038  
                ??___lwmod 003F                     _countC 00B8                     clear_0 1D2A  
                   clear_1 1D36           ___awdiv@quotient 003A            ___awmod@divisor 0036  
          ___awmod@counter 0038                  ??_lcdInst 0036                     _printf 0D1E  
           i2___awdiv@sign 0006                  ??_readADC 0034                  ??_initLCD 0037  
 __size_ofi2_stopOperation 010A           __end_of_wait_3ms 1E12                  ??_isdigit 0034  
        __end_ofi2___awdiv 194A          __end_ofi2___awmod 1AAC          __end_ofi2___lwdiv 1BAC  
             __mediumconst FE46          __end_ofi2___lwmod 1D12                     tblptrh 000FF7  
                   tblptrl 000FF6                     tblptru 000FF8            switchMenu@right 0021  
           i2___awmod@sign 0006          __end_ofi2_lcdInst 1E68          __end_ofi2_isdigit 1DF8  
               __accesstop 0080    __end_of__initialization 1D3C              ___rparam_used 000001  
           ?_stopOperation 0001         i2___lwmod@dividend 0008             __pcstackCOMRAM 0001  
             __pidataBANK0 1E82              __end_of_putch 1E44                i2printf@idx 0017  
              i2printf@val 001B                  ?i2___wmul 0001         __size_of_lcdNibble 004E  
              i2putch@data 0003                ISR@keypress 0033                  ?i2_printf 000D  
                  ??_putch 0036                 __pbssBANK0 00A7      __end_of_testBatteries 1580  
             ?i2_lcdNibble 0001                    ?___wmul 0034                    ?_printf 0080  
               ??i2___wmul 0005                 ??i2_printf 0013                    _SSPCON1 000FC6  
                  _SSPCON2 000FC5          ??i2_stopOperation 0009                    _SSPSTAT 000FC7  
                  i2_putch 1E50                 _countDrain 00B9            ??_stopOperation 003C  
        __end_of_lcdNibble 1BFA                    __Hparam 0000                    __Lparam 0000  
                ?_wait_3ms 0034                    ___awdiv 1842                    ___awmod 19CC  
                  ___lldiv 194A            __size_of___wmul 0026                    ___lwdiv 1B08  
                  ___lwmod 1C8E                    __pcinit 1D12                 _plat1Right 00B0  
                  __ramtop 1000                 _plat2Right 00B4                    _lcdInst 1E44  
                  __ptext0 0012                    __ptext1 13D6                    __ptext2 1DF8  
                  __ptext3 1580                    __ptext4 19CC                    __ptext5 1842  
                  __ptext6 1E12                    __ptext7 0D1E                    __ptext8 1E38  
                  __ptext9 1DBC            __size_of_printf 03AC                  _T0CONbits 000FD5  
                  _countAA 00B7                    _count9V 00B6                    _readADC 1E12  
                  _initLCD 1C48               __size_of_ISR 0D16          __end_of_hexpowers FE6A  
                _T1CONbits 000FCD              i2_isdigit$936 0002                    _dpowers FE58  
                  _isdigit 1DBC                    _opTimer 0046           ___awmod@dividend 0034  
                  _numBats 00BD   __size_of_I2C_Master_Init 005C   __size_of_I2C_Master_Read 0026  
 __size_of_I2C_Master_Wait 0012   __size_of_I2C_Master_Stop 0008                    _sorting 0048  
           __pintcode_body 0894       end_of_initialization 1D3C              __Lmediumconst FE46  
                  int_func 0894        i2___wmul@multiplier 0001                 _screenMode 00C7  
__size_of_I2C_Master_Start 0008  __size_of_I2C_Master_Write 000A            ___lldiv@divisor 0038  
          ___lldiv@counter 0040                 ??_wait_3ms 0036                    printf@c 0095  
                  printf@f 0080           I2C_Master_Init@c 0080           I2C_Master_Read@a 0035  
                  postdec2 000FDD                 _solOnTimer 0047                    postinc0 000FEE  
                  postinc2 000FDE                 _stepAmount 0043                  i2___awdiv 18C6  
                i2___awmod 1A3C          i2___lwdiv@divisor 0003                  i2___lwdiv 1B5A  
                i2___lwmod 1CD0          i2___lwdiv@counter 0007                  i2_lcdInst 1E5C  
              printf@width 0093         i2___awdiv@dividend 0001                  i2_isdigit 1DDA  
               _switchMenu 1794             __end_of___wmul 1D70       __size_ofi2_lcdNibble 004E  
            i2lcdInst@data 0003           i2___wmul@product 0005             __end_of_printf 10CA  
             i2printf@flag 001D               i2printf@prec 001A        start_initialization 1D12  
       i2___awdiv@quotient 0007                __end_of_ISR 0D1E          __size_ofi2___wmul 0026  
                i2printf@c 0020                  i2printf@f 000D                 ?i2___awdiv 0001  
               ?i2___awmod 0001                 ?i2___lwdiv 0001                 ?i2___lwmod 0008  
        __size_ofi2_printf 030C          ??_I2C_Master_Init 0084          ??_I2C_Master_Read 0035  
        ??_I2C_Master_Wait 0034                 ?i2_lcdInst 0001          ??_I2C_Master_Stop 0035  
               ?i2_isdigit 0001                   ??___wmul 0038                __pdataBANK0 00C7  
         __CFG_LPT1OSC$OFF 000000             switchMenu@left 0023            i2_stopOperation 168A  
                 ??_printf 0088                __pbssCOMRAM 0041              __pcstackBANK0 0080  
        i2___lwmod@divisor 000A          i2___lwmod@counter 000C                   ?i2_putch 0001  
         _I2C_Master_Start 1E7A           _I2C_Master_Write 1E68           ___lwdiv@dividend 0034  
        __CFG_CCP2MX$PORTC 000000                ?_switchMenu 0021                  __pintcode 0008  
            __pmediumconst FE46                  _lcdNibble 1BAC                   ?___awdiv 0034  
                 ?___awmod 0034                   ?___lldiv 0034          __size_of_wait_3ms 001A  
                 ?___lwdiv 0034                   ?___lwmod 003B                  _doneTimer 0045  
                 ?_lcdInst 0001                   ?_readADC 0001                   ?_initLCD 0001  
   __size_of_testBatteries 01AA                  _count_3ms 0041                   ?_isdigit 0001  
                _hexpowers FE62           ___lwdiv@quotient 0038                ??i2___awdiv 0005  
              ??i2___awmod 0005                  _plat1Left 00AE                  _plat2Left 00B2  
              ??i2___lwdiv 0005                ??i2___lwmod 000C             __size_of_putch 000C  
              ??i2_lcdInst 0003             ___wmul@product 0038                   _LATAbits 000F89  
                 _LATBbits 000F8A                   _LATCbits 000F8B                   _LATDbits 000F8C  
                 _LATEbits 000F8D                ??i2_isdigit 0001      __end_of_stopOperation 168A  
                 i2u410_40 0982                   i2u420_40 0A02                   i2u430_40 0AA8  
                 i2u421_48 0A04                   i2u440_40 0B4C                   i2u432_40 0AC4  
                 i2u431_48 0AAA                   i2u424_40 0A3C                   i2u416_40 09D8  
                 i2u442_40 0B74                   i2u434_40 0AEC                   i2u426_40 0A64  
                 i2u417_48 09DA                   i2u444_40 0B90                   i2u443_48 0B76  
                 i2u436_40 0B08                   i2u435_48 0AEE                   i2u428_40 0A80  
                 i2u427_48 0A66                   i2u438_40 0B30                   i2u439_48 0B32  
                 i2u556_47 1C12                   i2u557_47 1C1A                   i2u558_47 1C3A  
                 i2u559_47 1C42    __end_ofi2_stopOperation 1794           __CFG_WDTPS$32768 000000  
               ?_lcdNibble 0001                  _startGear 00C1                 _ADCON0bits 000FC2  
                main@i_633 00A6                  main@i_582 00A5                  main@i_592 009A  
                main@i_593 009C                  main@i_594 009E                  main@i_595 00A0  
                main@i_596 00A2          ___wmul@multiplier 0034                   i2___wmul 1D96  
            lcdNibble@data 0035                 printf@flag 0092              lcdNibble@temp 0034  
               printf@prec 008F          i2___awdiv@divisor 0003          i2___awdiv@counter 0005  
                 i2_printf 10CA        __size_of_switchMenu 00AE        I2C_Master_Read@temp 0036  
       i2___awmod@dividend 0001           __size_ofi2_putch 000C              _testBatteries 13D6  
                 __Hrparam 0000                   __Lrparam 0000         __CFG_BOREN$SBORDIS 000000  
            switchMenu@key 0022           __size_of___awdiv 0084           __size_of___awmod 0070  
    i2___wmul@multiplicand 0003           __size_of___lldiv 0082           __size_of___lwdiv 0052  
         __size_of___lwmod 0042             readADC@channel 0034                _isdigit$936 0035  
         __size_of_lcdInst 000C            _I2C_Master_Init 1AAC           __size_of_readADC 0014  
          _I2C_Master_Read 1D70           __size_of_initLCD 0046            _I2C_Master_Wait 1E26  
          _I2C_Master_Stop 1E72           __size_of_isdigit 001E            ___lwdiv@divisor 0036  
          ___lwdiv@counter 003A                   __ptext10 1D4A                   __ptext11 1C8E  
                 __ptext20 1E26                   __ptext12 1B08                   __ptext21 1AAC  
                 __ptext13 1C48                   __ptext30 1DDA                   __ptext22 194A  
                 __ptext14 1E44                   __ptext31 1D96                   __ptext15 1BAC  
                 __ptext32 1CD0                   __ptext24 1794                   __ptext16 1E68  
                 __ptext33 1B5A                   __ptext25 168A                   __ptext17 1E72  
                 __ptext34 1E5C                   __ptext26 1A3C                   __ptext18 1E7A  
                 __ptext35 1BFA                   __ptext27 18C6                   __ptext19 1D70  
                 __ptext28 10CA                   __ptext29 1E50              __size_of_main 0882  
                wait_3ms@x 0034             ?_testBatteries 0001                   _numDrain 00BF  
                 _wait_3ms 1DF8           ?i2_stopOperation 0001              ??i2_lcdNibble 0001  
              ??_lcdNibble 0034                   int$flags 004B                   _stepGear 00C2  
                printf@idx 008C                  printf@val 0090          i2___awmod@divisor 0003  
                putch@data 0036          i2___awmod@counter 0005   __end_of_I2C_Master_Start 1E82  
 __end_of_I2C_Master_Write 1E72                 _INTCONbits 000FF2                   isdigit@c 0036  
                 intlevel2 0000           ___lwmod@dividend 003B           ___lldiv@dividend 0034  
             ??_switchMenu 0023                   printf@ap 008D    __end_of_I2C_Master_Init 1B08  
  __end_of_I2C_Master_Read 1D96    __end_of_I2C_Master_Wait 1E38    __end_of_I2C_Master_Stop 1E7A  
              lcdInst@data 0036        __end_ofi2_lcdNibble 1C48           ___lldiv@quotient 003C  
        I2C_Master_Write@d 0035            ___lwmod@divisor 003D            ___lwmod@counter 003F  
       __end_of_switchMenu 1842            ??_testBatteries 0036  
