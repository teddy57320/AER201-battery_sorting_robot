

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Mon Apr 10 07:40:00 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    49                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    71                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    72                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    73  0000                     
    74                           ; Version 1.40
    75                           ; Generated 01/12/2016 GMT
    76                           ; 
    77                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    78                           ; All rights reserved.
    79                           ; 
    80                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    81                           ; 
    82                           ; Redistribution and use in source and binary forms, with or without modification, are
    83                           ; permitted provided that the following conditions are met:
    84                           ; 
    85                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    86                           ;        conditions and the following disclaimer.
    87                           ; 
    88                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    89                           ;        of conditions and the following disclaimer in the documentation and/or other
    90                           ;        materials provided with the distribution.
    91                           ; 
    92                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    93                           ;        software without specific prior written permission.
    94                           ; 
    95                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    96                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    97                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    98                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    99                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   100                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   101                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   102                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   103                           ; 
   104                           ; 
   105                           ; Code-generator required, PIC18F4620 Definitions
   106                           ; 
   107                           ; SFR Addresses
   108  0000                     
   109                           	psect	idataCOMRAM
   110  00345C                     __pidataCOMRAM:
   111                           	opt stack 0
   112                           
   113                           ;initializer for logPC@F3217
   114  00345C  20                 	db	32
   115  00345D  20                 	db	32
   116  00345E  2F                 	db	47
   117  00345F  20                 	db	32
   118  003460  20                 	db	32
   119  003461  2F                 	db	47
   120  003462  20                 	db	32
   121  003463  20                 	db	32
   122  003464  20                 	db	32
   123  003465  20                 	db	32
   124  003466  20                 	db	32
   125  003467  3A                 	db	58
   126  003468  20                 	db	32
   127  003469  20                 	db	32
   128  00346A  3A                 	db	58
   129  00346B  20                 	db	32
   130  00346C  20                 	db	32
   131  00346D  00                 	db	0
   132  00346E  00                 	db	0
   133                           
   134                           	psect	idataBANK0
   135  003494                     __pidataBANK0:
   136                           	opt stack 0
   137                           
   138                           ;initializer for logPC@F3241
   139  003494  20                 	db	32
   140  003495  20                 	db	32
   141  003496  20                 	db	32
   142                           
   143                           ;initializer for logPC@F3221
   144  003497  20                 	db	32
   145  003498  20                 	db	32
   146                           
   147                           ;initializer for logPC@F3225
   148  003499  20                 	db	32
   149  00349A  20                 	db	32
   150                           
   151                           ;initializer for logPC@F3229
   152  00349B  20                 	db	32
   153  00349C  20                 	db	32
   154                           
   155                           ;initializer for logPC@F3233
   156  00349D  20                 	db	32
   157  00349E  20                 	db	32
   158                           
   159                           ;initializer for logPC@F3237
   160  00349F  20                 	db	32
   161  0034A0  20                 	db	32
   162                           
   163                           ;initializer for _screenMode
   164  0034A1  02                 	db	2
   165                           
   166                           	psect	mediumconst
   167  00FC94                     __pmediumconst:
   168                           	opt stack 0
   169  00FC94  00                 	db	0
   170  00FC95                     _drainHeader:
   171                           	opt stack 0
   172  00FC95  4E                 	db	78
   173  00FC96  75                 	db	117
   174  00FC97  6D                 	db	109
   175  00FC98  62                 	db	98
   176  00FC99  65                 	db	101
   177  00FC9A  72                 	db	114
   178  00FC9B  20                 	db	32
   179  00FC9C  6F                 	db	111
   180  00FC9D  66                 	db	102
   181  00FC9E  20                 	db	32
   182  00FC9F  64                 	db	100
   183  00FCA0  72                 	db	114
   184  00FCA1  61                 	db	97
   185  00FCA2  69                 	db	105
   186  00FCA3  6E                 	db	110
   187  00FCA4  65                 	db	101
   188  00FCA5  64                 	db	100
   189  00FCA6  20                 	db	32
   190  00FCA7  62                 	db	98
   191  00FCA8  61                 	db	97
   192  00FCA9  74                 	db	116
   193  00FCAA  74                 	db	116
   194  00FCAB  65                 	db	101
   195  00FCAC  72                 	db	114
   196  00FCAD  69                 	db	105
   197  00FCAE  65                 	db	101
   198  00FCAF  73                 	db	115
   199  00FCB0  20                 	db	32
   200  00FCB1  73                 	db	115
   201  00FCB2  6F                 	db	111
   202  00FCB3  72                 	db	114
   203  00FCB4  74                 	db	116
   204  00FCB5  65                 	db	101
   205  00FCB6  64                 	db	100
   206  00FCB7  3A                 	db	58
   207  00FCB8  20                 	db	32
   208  00FCB9  00                 	db	0
   209  00FCBA                     __end_of_drainHeader:
   210                           	opt stack 0
   211  00FCBA                     _totalHeader:
   212                           	opt stack 0
   213  00FCBA  54                 	db	84
   214  00FCBB  6F                 	db	111
   215  00FCBC  74                 	db	116
   216  00FCBD  61                 	db	97
   217  00FCBE  6C                 	db	108
   218  00FCBF  20                 	db	32
   219  00FCC0  6E                 	db	110
   220  00FCC1  75                 	db	117
   221  00FCC2  6D                 	db	109
   222  00FCC3  62                 	db	98
   223  00FCC4  65                 	db	101
   224  00FCC5  72                 	db	114
   225  00FCC6  20                 	db	32
   226  00FCC7  6F                 	db	111
   227  00FCC8  66                 	db	102
   228  00FCC9  20                 	db	32
   229  00FCCA  62                 	db	98
   230  00FCCB  61                 	db	97
   231  00FCCC  74                 	db	116
   232  00FCCD  74                 	db	116
   233  00FCCE  65                 	db	101
   234  00FCCF  72                 	db	114
   235  00FCD0  69                 	db	105
   236  00FCD1  65                 	db	101
   237  00FCD2  73                 	db	115
   238  00FCD3  20                 	db	32
   239  00FCD4  73                 	db	115
   240  00FCD5  6F                 	db	111
   241  00FCD6  72                 	db	114
   242  00FCD7  74                 	db	116
   243  00FCD8  65                 	db	101
   244  00FCD9  64                 	db	100
   245  00FCDA  3A                 	db	58
   246  00FCDB  20                 	db	32
   247  00FCDC  00                 	db	0
   248  00FCDD                     __end_of_totalHeader:
   249                           	opt stack 0
   250  00FCDD                     _runTimeHeader:
   251                           	opt stack 0
   252  00FCDD  53                 	db	83
   253  00FCDE  65                 	db	101
   254  00FCDF  63                 	db	99
   255  00FCE0  6F                 	db	111
   256  00FCE1  6E                 	db	110
   257  00FCE2  64                 	db	100
   258  00FCE3  73                 	db	115
   259  00FCE4  20                 	db	32
   260  00FCE5  74                 	db	116
   261  00FCE6  68                 	db	104
   262  00FCE7  65                 	db	101
   263  00FCE8  20                 	db	32
   264  00FCE9  73                 	db	115
   265  00FCEA  6F                 	db	111
   266  00FCEB  72                 	db	114
   267  00FCEC  74                 	db	116
   268  00FCED  69                 	db	105
   269  00FCEE  6E                 	db	110
   270  00FCEF  67                 	db	103
   271  00FCF0  20                 	db	32
   272  00FCF1  6C                 	db	108
   273  00FCF2  61                 	db	97
   274  00FCF3  73                 	db	115
   275  00FCF4  74                 	db	116
   276  00FCF5  65                 	db	101
   277  00FCF6  64                 	db	100
   278  00FCF7  20                 	db	32
   279  00FCF8  66                 	db	102
   280  00FCF9  6F                 	db	111
   281  00FCFA  72                 	db	114
   282  00FCFB  3A                 	db	58
   283  00FCFC  20                 	db	32
   284  00FCFD  00                 	db	0
   285  00FCFE                     __end_of_runTimeHeader:
   286                           	opt stack 0
   287  00FCFE                     _AAHeader:
   288                           	opt stack 0
   289  00FCFE  4E                 	db	78
   290  00FCFF  75                 	db	117
   291  00FD00  6D                 	db	109
   292  00FD01  62                 	db	98
   293  00FD02  65                 	db	101
   294  00FD03  72                 	db	114
   295  00FD04  20                 	db	32
   296  00FD05  6F                 	db	111
   297  00FD06  66                 	db	102
   298  00FD07  20                 	db	32
   299  00FD08  41                 	db	65
   300  00FD09  41                 	db	65
   301  00FD0A  20                 	db	32
   302  00FD0B  62                 	db	98
   303  00FD0C  61                 	db	97
   304  00FD0D  74                 	db	116
   305  00FD0E  74                 	db	116
   306  00FD0F  65                 	db	101
   307  00FD10  72                 	db	114
   308  00FD11  69                 	db	105
   309  00FD12  65                 	db	101
   310  00FD13  73                 	db	115
   311  00FD14  20                 	db	32
   312  00FD15  73                 	db	115
   313  00FD16  6F                 	db	111
   314  00FD17  72                 	db	114
   315  00FD18  74                 	db	116
   316  00FD19  65                 	db	101
   317  00FD1A  64                 	db	100
   318  00FD1B  3A                 	db	58
   319  00FD1C  20                 	db	32
   320  00FD1D  00                 	db	0
   321  00FD1E                     __end_of_AAHeader:
   322                           	opt stack 0
   323  00FD1E                     _nineVHeader:
   324                           	opt stack 0
   325  00FD1E  4E                 	db	78
   326  00FD1F  75                 	db	117
   327  00FD20  6D                 	db	109
   328  00FD21  62                 	db	98
   329  00FD22  65                 	db	101
   330  00FD23  72                 	db	114
   331  00FD24  20                 	db	32
   332  00FD25  6F                 	db	111
   333  00FD26  66                 	db	102
   334  00FD27  20                 	db	32
   335  00FD28  39                 	db	57
   336  00FD29  56                 	db	86
   337  00FD2A  20                 	db	32
   338  00FD2B  62                 	db	98
   339  00FD2C  61                 	db	97
   340  00FD2D  74                 	db	116
   341  00FD2E  74                 	db	116
   342  00FD2F  65                 	db	101
   343  00FD30  72                 	db	114
   344  00FD31  69                 	db	105
   345  00FD32  65                 	db	101
   346  00FD33  73                 	db	115
   347  00FD34  20                 	db	32
   348  00FD35  73                 	db	115
   349  00FD36  6F                 	db	111
   350  00FD37  72                 	db	114
   351  00FD38  74                 	db	116
   352  00FD39  65                 	db	101
   353  00FD3A  64                 	db	100
   354  00FD3B  3A                 	db	58
   355  00FD3C  20                 	db	32
   356  00FD3D  00                 	db	0
   357  00FD3E                     __end_of_nineVHeader:
   358                           	opt stack 0
   359  00FD3E                     _timeHeader:
   360                           	opt stack 0
   361  00FD3E  54                 	db	84
   362  00FD3F  69                 	db	105
   363  00FD40  6D                 	db	109
   364  00FD41  65                 	db	101
   365  00FD42  20                 	db	32
   366  00FD43  61                 	db	97
   367  00FD44  6E                 	db	110
   368  00FD45  64                 	db	100
   369  00FD46  20                 	db	32
   370  00FD47  64                 	db	100
   371  00FD48  61                 	db	97
   372  00FD49  74                 	db	116
   373  00FD4A  65                 	db	101
   374  00FD4B  20                 	db	32
   375  00FD4C  6F                 	db	111
   376  00FD4D  66                 	db	102
   377  00FD4E  20                 	db	32
   378  00FD4F  6C                 	db	108
   379  00FD50  61                 	db	97
   380  00FD51  73                 	db	115
   381  00FD52  74                 	db	116
   382  00FD53  20                 	db	32
   383  00FD54  73                 	db	115
   384  00FD55  6F                 	db	111
   385  00FD56  72                 	db	114
   386  00FD57  74                 	db	116
   387  00FD58  69                 	db	105
   388  00FD59  6E                 	db	110
   389  00FD5A  67                 	db	103
   390  00FD5B  3A                 	db	58
   391  00FD5C  20                 	db	32
   392  00FD5D  00                 	db	0
   393  00FD5E                     __end_of_timeHeader:
   394                           	opt stack 0
   395  00FD5E                     _CHeader:
   396                           	opt stack 0
   397  00FD5E  4E                 	db	78
   398  00FD5F  75                 	db	117
   399  00FD60  6D                 	db	109
   400  00FD61  62                 	db	98
   401  00FD62  65                 	db	101
   402  00FD63  72                 	db	114
   403  00FD64  20                 	db	32
   404  00FD65  6F                 	db	111
   405  00FD66  66                 	db	102
   406  00FD67  20                 	db	32
   407  00FD68  43                 	db	67
   408  00FD69  20                 	db	32
   409  00FD6A  62                 	db	98
   410  00FD6B  61                 	db	97
   411  00FD6C  74                 	db	116
   412  00FD6D  74                 	db	116
   413  00FD6E  65                 	db	101
   414  00FD6F  72                 	db	114
   415  00FD70  69                 	db	105
   416  00FD71  65                 	db	101
   417  00FD72  73                 	db	115
   418  00FD73  20                 	db	32
   419  00FD74  73                 	db	115
   420  00FD75  6F                 	db	111
   421  00FD76  72                 	db	114
   422  00FD77  74                 	db	116
   423  00FD78  65                 	db	101
   424  00FD79  64                 	db	100
   425  00FD7A  3A                 	db	58
   426  00FD7B  20                 	db	32
   427  00FD7C  00                 	db	0
   428  00FD7D                     __end_of_CHeader:
   429                           	opt stack 0
   430  00FD7D                     _keys:
   431                           	opt stack 0
   432  00FD7D  31                 	db	49
   433  00FD7E  32                 	db	50
   434  00FD7F  33                 	db	51
   435  00FD80  41                 	db	65
   436  00FD81  34                 	db	52
   437  00FD82  35                 	db	53
   438  00FD83  36                 	db	54
   439  00FD84  42                 	db	66
   440  00FD85  37                 	db	55
   441  00FD86  38                 	db	56
   442  00FD87  39                 	db	57
   443  00FD88  43                 	db	67
   444  00FD89  2A                 	db	42
   445  00FD8A  30                 	db	48
   446  00FD8B  23                 	db	35
   447  00FD8C  44                 	db	68
   448  00FD8D  00                 	db	0
   449  00FD8E                     __end_of_keys:
   450                           	opt stack 0
   451  00FD8E                     _dpowers:
   452                           	opt stack 0
   453  00FD8E  0001               	dw	1
   454  00FD90  000A               	dw	10
   455  00FD92  0064               	dw	100
   456  00FD94  03E8               	dw	1000
   457  00FD96  2710               	dw	10000
   458  00FD98                     __end_of_dpowers:
   459                           	opt stack 0
   460  00FD98                     _hexpowers:
   461                           	opt stack 0
   462  00FD98  0001               	dw	1
   463  00FD9A  0010               	dw	16
   464  00FD9C  0100               	dw	256
   465  00FD9E  1000               	dw	4096
   466  00FDA0                     __end_of_hexpowers:
   467                           	opt stack 0
   468  0000                     _ADRES	set	4035
   469  0000                     _TMR0	set	4054
   470  0000                     _TMR1	set	4046
   471  0000                     _ADCON0	set	4034
   472  0000                     _ADCON0bits	set	4034
   473  0000                     _ADCON1	set	4033
   474  0000                     _ADCON2	set	4032
   475  0000                     _CMCONbits	set	4020
   476  0000                     _CVRCON	set	4021
   477  0000                     _EEADR	set	4009
   478  0000                     _EEADRH	set	4010
   479  0000                     _EECON1bits	set	4006
   480  0000                     _EECON2	set	4007
   481  0000                     _EEDATA	set	4008
   482  0000                     _INTCONbits	set	4082
   483  0000                     _LATA	set	3977
   484  0000                     _LATAbits	set	3977
   485  0000                     _LATB	set	3978
   486  0000                     _LATBbits	set	3978
   487  0000                     _LATC	set	3979
   488  0000                     _LATCbits	set	3979
   489  0000                     _LATD	set	3980
   490  0000                     _LATDbits	set	3980
   491  0000                     _LATE	set	3981
   492  0000                     _LATEbits	set	3981
   493  0000                     _PIR2bits	set	4001
   494  0000                     _PORTB	set	3969
   495  0000                     _SSPADD	set	4040
   496  0000                     _SSPBUF	set	4041
   497  0000                     _SSPCON1	set	4038
   498  0000                     _SSPCON2	set	4037
   499  0000                     _SSPSTAT	set	4039
   500  0000                     _T0CON	set	4053
   501  0000                     _T0CONbits	set	4053
   502  0000                     _T1CON	set	4045
   503  0000                     _T1CONbits	set	4045
   504  0000                     _TRISA	set	3986
   505  0000                     _TRISB	set	3987
   506  0000                     _TRISC	set	3988
   507  0000                     _TRISD	set	3989
   508  0000                     _TRISE	set	3990
   509  0000                     _ACKDT	set	32301
   510  0000                     _ACKEN	set	32300
   511  0000                     _GIE	set	32663
   512  0000                     _INT1IE	set	32643
   513  0000                     _INT1IF	set	32640
   514  0000                     _PEIE	set	32662
   515  0000                     _PEN	set	32298
   516  0000                     _RCEN	set	32299
   517  0000                     _SEN	set	32296
   518  0000                     _TMR0IE	set	32661
   519  0000                     _TMR0IF	set	32658
   520  0000                     _TMR1IE	set	31976
   521  0000                     _TMR1IF	set	31984
   522  0000                     _TRISC3	set	31907
   523  0000                     _TRISC4	set	31908
   524  0000                     _nRBPU	set	32655
   525  00FDA0                     STR_8:
   526  00FDA0  25                 	db	37
   527  00FDA1  30                 	db	48	;'0'
   528  00FDA2  32                 	db	50	;'2'
   529  00FDA3  64                 	db	100	;'d'
   530  00FDA4  3A                 	db	58	;':'
   531  00FDA5  25                 	db	37
   532  00FDA6  30                 	db	48	;'0'
   533  00FDA7  32                 	db	50	;'2'
   534  00FDA8  64                 	db	100	;'d'
   535  00FDA9  20                 	db	32
   536  00FDAA  20                 	db	32
   537  00FDAB  20                 	db	32
   538  00FDAC  20                 	db	32
   539  00FDAD  20                 	db	32
   540  00FDAE  20                 	db	32
   541  00FDAF  20                 	db	32
   542  00FDB0  20                 	db	32
   543  00FDB1  20                 	db	32
   544  00FDB2  20                 	db	32
   545  00FDB3  20                 	db	32
   546  00FDB4  20                 	db	32
   547  00FDB5  20                 	db	32
   548  00FDB6  20                 	db	32
   549  00FDB7  20                 	db	32
   550  00FDB8  00                 	db	0
   551  00FDB9                     STR_20:
   552  00FDB9  25                 	db	37
   553  00FDBA  30                 	db	48	;'0'
   554  00FDBB  32                 	db	50	;'2'
   555  00FDBC  78                 	db	120	;'x'
   556  00FDBD  2F                 	db	47
   557  00FDBE  25                 	db	37
   558  00FDBF  30                 	db	48	;'0'
   559  00FDC0  32                 	db	50	;'2'
   560  00FDC1  78                 	db	120	;'x'
   561  00FDC2  2F                 	db	47
   562  00FDC3  25                 	db	37
   563  00FDC4  30                 	db	48	;'0'
   564  00FDC5  32                 	db	50	;'2'
   565  00FDC6  78                 	db	120	;'x'
   566  00FDC7  20                 	db	32
   567  00FDC8  20                 	db	32
   568  00FDC9  20                 	db	32
   569  00FDCA  20                 	db	32
   570  00FDCB  20                 	db	32
   571  00FDCC  20                 	db	32
   572  00FDCD  20                 	db	32
   573  00FDCE  20                 	db	32
   574  00FDCF  00                 	db	0
   575  00FDD0                     STR_21:
   576  00FDD0  25                 	db	37
   577  00FDD1  30                 	db	48	;'0'
   578  00FDD2  32                 	db	50	;'2'
   579  00FDD3  78                 	db	120	;'x'
   580  00FDD4  3A                 	db	58	;':'
   581  00FDD5  25                 	db	37
   582  00FDD6  30                 	db	48	;'0'
   583  00FDD7  32                 	db	50	;'2'
   584  00FDD8  78                 	db	120	;'x'
   585  00FDD9  3A                 	db	58	;':'
   586  00FDDA  25                 	db	37
   587  00FDDB  30                 	db	48	;'0'
   588  00FDDC  32                 	db	50	;'2'
   589  00FDDD  78                 	db	120	;'x'
   590  00FDDE  20                 	db	32
   591  00FDDF  20                 	db	32
   592  00FDE0  20                 	db	32
   593  00FDE1  20                 	db	32
   594  00FDE2  20                 	db	32
   595  00FDE3  20                 	db	32
   596  00FDE4  20                 	db	32
   597  00FDE5  20                 	db	32
   598  00FDE6  00                 	db	0
   599  00FDE7                     STR_32:
   600  00FDE7  44                 	db	68	;'D'
   601  00FDE8  41                 	db	65	;'A'
   602  00FDE9  54                 	db	84	;'T'
   603  00FDEA  45                 	db	69	;'E'
   604  00FDEB  3A                 	db	58	;':'
   605  00FDEC  20                 	db	32
   606  00FDED  25                 	db	37
   607  00FDEE  30                 	db	48	;'0'
   608  00FDEF  32                 	db	50	;'2'
   609  00FDF0  78                 	db	120	;'x'
   610  00FDF1  2F                 	db	47
   611  00FDF2  25                 	db	37
   612  00FDF3  30                 	db	48	;'0'
   613  00FDF4  32                 	db	50	;'2'
   614  00FDF5  78                 	db	120	;'x'
   615  00FDF6  2F                 	db	47
   616  00FDF7  25                 	db	37
   617  00FDF8  30                 	db	48	;'0'
   618  00FDF9  32                 	db	50	;'2'
   619  00FDFA  78                 	db	120	;'x'
   620  00FDFB  20                 	db	32
   621  00FDFC  20                 	db	32
   622  00FDFD  00                 	db	0
   623  00FDFE                     STR_33:
   624  00FDFE  54                 	db	84	;'T'
   625  00FDFF  49                 	db	73	;'I'
   626  00FE00  4D                 	db	77	;'M'
   627  00FE01  45                 	db	69	;'E'
   628  00FE02  3A                 	db	58	;':'
   629  00FE03  20                 	db	32
   630  00FE04  25                 	db	37
   631  00FE05  30                 	db	48	;'0'
   632  00FE06  32                 	db	50	;'2'
   633  00FE07  78                 	db	120	;'x'
   634  00FE08  3A                 	db	58	;':'
   635  00FE09  25                 	db	37
   636  00FE0A  30                 	db	48	;'0'
   637  00FE0B  32                 	db	50	;'2'
   638  00FE0C  78                 	db	120	;'x'
   639  00FE0D  3A                 	db	58	;':'
   640  00FE0E  25                 	db	37
   641  00FE0F  30                 	db	48	;'0'
   642  00FE10  32                 	db	50	;'2'
   643  00FE11  78                 	db	120	;'x'
   644  00FE12  20                 	db	32
   645  00FE13  20                 	db	32
   646  00FE14  00                 	db	0
   647  00FE15                     STR_39:
   648  00FE15  41                 	db	65	;'A'
   649  00FE16  41                 	db	65	;'A'
   650  00FE17  3A                 	db	58	;':'
   651  00FE18  25                 	db	37
   652  00FE19  30                 	db	48	;'0'
   653  00FE1A  32                 	db	50	;'2'
   654  00FE1B  64                 	db	100	;'d'
   655  00FE1C  20                 	db	32
   656  00FE1D  43                 	db	67	;'C'
   657  00FE1E  3A                 	db	58	;':'
   658  00FE1F  25                 	db	37
   659  00FE20  30                 	db	48	;'0'
   660  00FE21  32                 	db	50	;'2'
   661  00FE22  64                 	db	100	;'d'
   662  00FE23  20                 	db	32
   663  00FE24  39                 	db	57	;'9'
   664  00FE25  56                 	db	86	;'V'
   665  00FE26  3A                 	db	58	;':'
   666  00FE27  25                 	db	37
   667  00FE28  30                 	db	48	;'0'
   668  00FE29  32                 	db	50	;'2'
   669  00FE2A  64                 	db	100	;'d'
   670  00FE2B  00                 	db	0
   671  00FE2C                     STR_14:
   672  00FE2C  42                 	db	66	;'B'
   673  00FE2D  41                 	db	65	;'A'
   674  00FE2E  54                 	db	84	;'T'
   675  00FE2F  54                 	db	84	;'T'
   676  00FE30  45                 	db	69	;'E'
   677  00FE31  52                 	db	82	;'R'
   678  00FE32  49                 	db	73	;'I'
   679  00FE33  45                 	db	69	;'E'
   680  00FE34  53                 	db	83	;'S'
   681  00FE35  3A                 	db	58	;':'
   682  00FE36  20                 	db	32
   683  00FE37  25                 	db	37
   684  00FE38  30                 	db	48	;'0'
   685  00FE39  32                 	db	50	;'2'
   686  00FE3A  64                 	db	100	;'d'
   687  00FE3B  20                 	db	32
   688  00FE3C  20                 	db	32
   689  00FE3D  20                 	db	32
   690  00FE3E  20                 	db	32
   691  00FE3F  20                 	db	32
   692  00FE40  00                 	db	0
   693  00FE41                     STR_40:
   694  00FE41  58                 	db	88	;'X'
   695  00FE42  3A                 	db	58	;':'
   696  00FE43  25                 	db	37
   697  00FE44  30                 	db	48	;'0'
   698  00FE45  32                 	db	50	;'2'
   699  00FE46  64                 	db	100	;'d'
   700  00FE47  20                 	db	32
   701  00FE48  54                 	db	84	;'T'
   702  00FE49  49                 	db	73	;'I'
   703  00FE4A  4D                 	db	77	;'M'
   704  00FE4B  45                 	db	69	;'E'
   705  00FE4C  3A                 	db	58	;':'
   706  00FE4D  25                 	db	37
   707  00FE4E  64                 	db	100	;'d'
   708  00FE4F  73                 	db	115	;'s'
   709  00FE50  20                 	db	32
   710  00FE51  20                 	db	32
   711  00FE52  20                 	db	32
   712  00FE53  20                 	db	32
   713  00FE54  00                 	db	0
   714  00FE55                     STR_10:
   715  00FE55  42                 	db	66	;'B'
   716  00FE56  41                 	db	65	;'A'
   717  00FE57  54                 	db	84	;'T'
   718  00FE58  54                 	db	84	;'T'
   719  00FE59  45                 	db	69	;'E'
   720  00FE5A  52                 	db	82	;'R'
   721  00FE5B  49                 	db	73	;'I'
   722  00FE5C  45                 	db	69	;'E'
   723  00FE5D  53                 	db	83	;'S'
   724  00FE5E  3A                 	db	58	;':'
   725  00FE5F  20                 	db	32
   726  00FE60  25                 	db	37
   727  00FE61  30                 	db	48	;'0'
   728  00FE62  32                 	db	50	;'2'
   729  00FE63  64                 	db	100	;'d'
   730  00FE64  20                 	db	32
   731  00FE65  20                 	db	32
   732  00FE66  20                 	db	32
   733  00FE67  00                 	db	0
   734  00FE68                     STR_41:
   735  00FE68  30                 	db	48	;'0'
   736  00FE69  31                 	db	49	;'1'
   737  00FE6A  32                 	db	50	;'2'
   738  00FE6B  33                 	db	51	;'3'
   739  00FE6C  34                 	db	52	;'4'
   740  00FE6D  35                 	db	53	;'5'
   741  00FE6E  36                 	db	54	;'6'
   742  00FE6F  37                 	db	55	;'7'
   743  00FE70  38                 	db	56	;'8'
   744  00FE71  39                 	db	57	;'9'
   745  00FE72  61                 	db	97	;'a'
   746  00FE73  62                 	db	98	;'b'
   747  00FE74  63                 	db	99	;'c'
   748  00FE75  64                 	db	100	;'d'
   749  00FE76  65                 	db	101	;'e'
   750  00FE77  66                 	db	102	;'f'
   751  00FE78  00                 	db	0
   752  00FE79                     STR_23:
   753  00FE79  20                 	db	32
   754  00FE7A  20                 	db	32
   755  00FE7B  20                 	db	32
   756  00FE7C  20                 	db	32
   757  00FE7D  20                 	db	32
   758  00FE7E  20                 	db	32
   759  00FE7F  20                 	db	32
   760  00FE80  20                 	db	32
   761  00FE81  20                 	db	32
   762  00FE82  20                 	db	32
   763  00FE83  20                 	db	32
   764  00FE84  20                 	db	32
   765  00FE85  20                 	db	32
   766  00FE86  20                 	db	32
   767  00FE87  20                 	db	32
   768  00FE88  20                 	db	32
   769  00FE89  00                 	db	0
   770  00FE8A                     STR_11:
   771  00FE8A  23                 	db	35
   772  00FE8B  20                 	db	32
   773  00FE8C  4F                 	db	79	;'O'
   774  00FE8D  46                 	db	70	;'F'
   775  00FE8E  20                 	db	32
   776  00FE8F  43                 	db	67	;'C'
   777  00FE90  20                 	db	32
   778  00FE91  20                 	db	32
   779  00FE92  20                 	db	32
   780  00FE93  20                 	db	32
   781  00FE94  20                 	db	32
   782  00FE95  20                 	db	32
   783  00FE96  20                 	db	32
   784  00FE97  20                 	db	32
   785  00FE98  20                 	db	32
   786  00FE99  20                 	db	32
   787  00FE9A  00                 	db	0
   788  00FE9B                     STR_15:
   789  00FE9B  23                 	db	35
   790  00FE9C  20                 	db	32
   791  00FE9D  4F                 	db	79	;'O'
   792  00FE9E  46                 	db	70	;'F'
   793  00FE9F  20                 	db	32
   794  00FEA0  41                 	db	65	;'A'
   795  00FEA1  41                 	db	65	;'A'
   796  00FEA2  20                 	db	32
   797  00FEA3  20                 	db	32
   798  00FEA4  20                 	db	32
   799  00FEA5  20                 	db	32
   800  00FEA6  20                 	db	32
   801  00FEA7  20                 	db	32
   802  00FEA8  20                 	db	32
   803  00FEA9  20                 	db	32
   804  00FEAA  20                 	db	32
   805  00FEAB  00                 	db	0
   806  00FEAC                     STR_13:
   807  00FEAC  23                 	db	35
   808  00FEAD  20                 	db	32
   809  00FEAE  4F                 	db	79	;'O'
   810  00FEAF  46                 	db	70	;'F'
   811  00FEB0  20                 	db	32
   812  00FEB1  39                 	db	57	;'9'
   813  00FEB2  56                 	db	86	;'V'
   814  00FEB3  20                 	db	32
   815  00FEB4  20                 	db	32
   816  00FEB5  20                 	db	32
   817  00FEB6  20                 	db	32
   818  00FEB7  20                 	db	32
   819  00FEB8  20                 	db	32
   820  00FEB9  20                 	db	32
   821  00FEBA  20                 	db	32
   822  00FEBB  20                 	db	32
   823  00FEBC  00                 	db	0
   824  00FEBD                     STR_4:
   825  00FEBD  25                 	db	37
   826  00FEBE  34                 	db	52	;'4'
   827  00FEBF  64                 	db	100	;'d'
   828  00FEC0  20                 	db	32
   829  00FEC1  25                 	db	37
   830  00FEC2  32                 	db	50	;'2'
   831  00FEC3  64                 	db	100	;'d'
   832  00FEC4  20                 	db	32
   833  00FEC5  20                 	db	32
   834  00FEC6  20                 	db	32
   835  00FEC7  20                 	db	32
   836  00FEC8  20                 	db	32
   837  00FEC9  20                 	db	32
   838  00FECA  20                 	db	32
   839  00FECB  20                 	db	32
   840  00FECC  20                 	db	32
   841  00FECD  00                 	db	0
   842  00FECE                     STR_19:
   843  00FECE  4C                 	db	76	;'L'
   844  00FECF  41                 	db	65	;'A'
   845  00FED0  53                 	db	83	;'S'
   846  00FED1  54                 	db	84	;'T'
   847  00FED2  20                 	db	32
   848  00FED3  52                 	db	82	;'R'
   849  00FED4  55                 	db	85	;'U'
   850  00FED5  4E                 	db	78	;'N'
   851  00FED6  3A                 	db	58	;':'
   852  00FED7  20                 	db	32
   853  00FED8  20                 	db	32
   854  00FED9  20                 	db	32
   855  00FEDA  20                 	db	32
   856  00FEDB  20                 	db	32
   857  00FEDC  20                 	db	32
   858  00FEDD  20                 	db	32
   859  00FEDE  00                 	db	0
   860  00FEDF                     STR_36:
   861  00FEDF  25                 	db	37
   862  00FEE0  30                 	db	48	;'0'
   863  00FEE1  34                 	db	52	;'4'
   864  00FEE2  64                 	db	100	;'d'
   865  00FEE3  20                 	db	32
   866  00FEE4  25                 	db	37
   867  00FEE5  30                 	db	48	;'0'
   868  00FEE6  34                 	db	52	;'4'
   869  00FEE7  64                 	db	100	;'d'
   870  00FEE8  20                 	db	32
   871  00FEE9  20                 	db	32
   872  00FEEA  20                 	db	32
   873  00FEEB  20                 	db	32
   874  00FEEC  20                 	db	32
   875  00FEED  20                 	db	32
   876  00FEEE  20                 	db	32
   877  00FEEF  00                 	db	0
   878  00FEF0                     STR_9:
   879  00FEF0  54                 	db	84	;'T'
   880  00FEF1  4F                 	db	79	;'O'
   881  00FEF2  54                 	db	84	;'T'
   882  00FEF3  41                 	db	65	;'A'
   883  00FEF4  4C                 	db	76	;'L'
   884  00FEF5  20                 	db	32
   885  00FEF6  23                 	db	35
   886  00FEF7  20                 	db	32
   887  00FEF8  4F                 	db	79	;'O'
   888  00FEF9  46                 	db	70	;'F'
   889  00FEFA  20                 	db	32
   890  00FEFB  20                 	db	32
   891  00FEFC  20                 	db	32
   892  00FEFD  20                 	db	32
   893  00FEFE  20                 	db	32
   894  00FEFF  20                 	db	32
   895  00FF00  00                 	db	0
   896  00FF01                     STR_30:
   897  00FF01  50                 	db	80	;'P'
   898  00FF02  52                 	db	82	;'R'
   899  00FF03  45                 	db	69	;'E'
   900  00FF04  53                 	db	83	;'S'
   901  00FF05  53                 	db	83	;'S'
   902  00FF06  20                 	db	32
   903  00FF07  2A                 	db	42
   904  00FF08  20                 	db	32
   905  00FF09  54                 	db	84	;'T'
   906  00FF0A  4F                 	db	79	;'O'
   907  00FF0B  20                 	db	32
   908  00FF0C  20                 	db	32
   909  00FF0D  20                 	db	32
   910  00FF0E  20                 	db	32
   911  00FF0F  20                 	db	32
   912  00FF10  20                 	db	32
   913  00FF11  00                 	db	0
   914  00FF12                     STR_6:
   915  00FF12  54                 	db	84	;'T'
   916  00FF13  4F                 	db	79	;'O'
   917  00FF14  20                 	db	32
   918  00FF15  43                 	db	67	;'C'
   919  00FF16  4F                 	db	79	;'O'
   920  00FF17  4E                 	db	78	;'N'
   921  00FF18  54                 	db	84	;'T'
   922  00FF19  49                 	db	73	;'I'
   923  00FF1A  4E                 	db	78	;'N'
   924  00FF1B  55                 	db	85	;'U'
   925  00FF1C  45                 	db	69	;'E'
   926  00FF1D  20                 	db	32
   927  00FF1E  20                 	db	32
   928  00FF1F  20                 	db	32
   929  00FF20  20                 	db	32
   930  00FF21  20                 	db	32
   931  00FF22  00                 	db	0
   932  00FF23                     STR_17:
   933  00FF23  23                 	db	35
   934  00FF24  20                 	db	32
   935  00FF25  4F                 	db	79	;'O'
   936  00FF26  46                 	db	70	;'F'
   937  00FF27  20                 	db	32
   938  00FF28  44                 	db	68	;'D'
   939  00FF29  52                 	db	82	;'R'
   940  00FF2A  41                 	db	65	;'A'
   941  00FF2B  49                 	db	73	;'I'
   942  00FF2C  4E                 	db	78	;'N'
   943  00FF2D  45                 	db	69	;'E'
   944  00FF2E  44                 	db	68	;'D'
   945  00FF2F  20                 	db	32
   946  00FF30  20                 	db	32
   947  00FF31  20                 	db	32
   948  00FF32  20                 	db	32
   949  00FF33  00                 	db	0
   950  00FF34                     STR_5:
   951  00FF34  44                 	db	68	;'D'
   952  00FF35  4F                 	db	79	;'O'
   953  00FF36  4E                 	db	78	;'N'
   954  00FF37  45                 	db	69	;'E'
   955  00FF38  21                 	db	33
   956  00FF39  20                 	db	32
   957  00FF3A  50                 	db	80	;'P'
   958  00FF3B  52                 	db	82	;'R'
   959  00FF3C  45                 	db	69	;'E'
   960  00FF3D  53                 	db	83	;'S'
   961  00FF3E  53                 	db	83	;'S'
   962  00FF3F  20                 	db	32
   963  00FF40  2A                 	db	42
   964  00FF41  20                 	db	32
   965  00FF42  20                 	db	32
   966  00FF43  20                 	db	32
   967  00FF44  00                 	db	0
   968  00FF45                     STR_34:
   969  00FF45  52                 	db	82	;'R'
   970  00FF46  55                 	db	85	;'U'
   971  00FF47  4E                 	db	78	;'N'
   972  00FF48  4E                 	db	78	;'N'
   973  00FF49  49                 	db	73	;'I'
   974  00FF4A  4E                 	db	78	;'N'
   975  00FF4B  47                 	db	71	;'G'
   976  00FF4C  3A                 	db	58	;':'
   977  00FF4D  20                 	db	32
   978  00FF4E  30                 	db	48	;'0'
   979  00FF4F  30                 	db	48	;'0'
   980  00FF50  3A                 	db	58	;':'
   981  00FF51  30                 	db	48	;'0'
   982  00FF52  30                 	db	48	;'0'
   983  00FF53  20                 	db	32
   984  00FF54  20                 	db	32
   985  00FF55  00                 	db	0
   986  00FF56                     STR_7:
   987  00FF56  54                 	db	84	;'T'
   988  00FF57  4F                 	db	79	;'O'
   989  00FF58  54                 	db	84	;'T'
   990  00FF59  41                 	db	65	;'A'
   991  00FF5A  4C                 	db	76	;'L'
   992  00FF5B  20                 	db	32
   993  00FF5C  52                 	db	82	;'R'
   994  00FF5D  55                 	db	85	;'U'
   995  00FF5E  4E                 	db	78	;'N'
   996  00FF5F  20                 	db	32
   997  00FF60  54                 	db	84	;'T'
   998  00FF61  49                 	db	73	;'I'
   999  00FF62  4D                 	db	77	;'M'
  1000  00FF63  45                 	db	69	;'E'
  1001  00FF64  3A                 	db	58	;':'
  1002  00FF65  20                 	db	32
  1003  00FF66  00                 	db	0
  1004  00FF67                     STR_3:
  1005  00FF67  20                 	db	32
  1006  00FF68  3C                 	db	60	;'<'
  1007  00FF69  54                 	db	84	;'T'
  1008  00FF6A  4F                 	db	79	;'O'
  1009  00FF6B  47                 	db	71	;'G'
  1010  00FF6C  47                 	db	71	;'G'
  1011  00FF6D  4C                 	db	76	;'L'
  1012  00FF6E  45                 	db	69	;'E'
  1013  00FF6F  20                 	db	32
  1014  00FF70  20                 	db	32
  1015  00FF71  4C                 	db	76	;'L'
  1016  00FF72  4F                 	db	79	;'O'
  1017  00FF73  47                 	db	71	;'G'
  1018  00FF74  53                 	db	83	;'S'
  1019  00FF75  3E                 	db	62	;'>'
  1020  00FF76  20                 	db	32
  1021  00FF77  00                 	db	0
  1022  00FF78                     STR_31:
  1023  00FF78  53                 	db	83	;'S'
  1024  00FF79  45                 	db	69	;'E'
  1025  00FF7A  4E                 	db	78	;'N'
  1026  00FF7B  44                 	db	68	;'D'
  1027  00FF7C  20                 	db	32
  1028  00FF7D  44                 	db	68	;'D'
  1029  00FF7E  41                 	db	65	;'A'
  1030  00FF7F  54                 	db	84	;'T'
  1031  00FF80  41                 	db	65	;'A'
  1032  00FF81  20                 	db	32
  1033  00FF82  54                 	db	84	;'T'
  1034  00FF83  4F                 	db	79	;'O'
  1035  00FF84  20                 	db	32
  1036  00FF85  50                 	db	80	;'P'
  1037  00FF86  43                 	db	67	;'C'
  1038  00FF87  20                 	db	32
  1039  00FF88  00                 	db	0
  1040  00FF89                     STR_22:
  1041  00FF89  50                 	db	80	;'P'
  1042  00FF8A  45                 	db	69	;'E'
  1043  00FF8B  52                 	db	82	;'R'
  1044  00FF8C  4D                 	db	77	;'M'
  1045  00FF8D  41                 	db	65	;'A'
  1046  00FF8E  4E                 	db	78	;'N'
  1047  00FF8F  45                 	db	69	;'E'
  1048  00FF90  4E                 	db	78	;'N'
  1049  00FF91  54                 	db	84	;'T'
  1050  00FF92  20                 	db	32
  1051  00FF93  4C                 	db	76	;'L'
  1052  00FF94  4F                 	db	79	;'O'
  1053  00FF95  47                 	db	71	;'G'
  1054  00FF96  20                 	db	32
  1055  00FF97  41                 	db	65	;'A'
  1056  00FF98  3A                 	db	58	;':'
  1057  00FF99  00                 	db	0
  1058  00FF9A                     STR_24:
  1059  00FF9A  50                 	db	80	;'P'
  1060  00FF9B  45                 	db	69	;'E'
  1061  00FF9C  52                 	db	82	;'R'
  1062  00FF9D  4D                 	db	77	;'M'
  1063  00FF9E  41                 	db	65	;'A'
  1064  00FF9F  4E                 	db	78	;'N'
  1065  00FFA0  45                 	db	69	;'E'
  1066  00FFA1  4E                 	db	78	;'N'
  1067  00FFA2  54                 	db	84	;'T'
  1068  00FFA3  20                 	db	32
  1069  00FFA4  4C                 	db	76	;'L'
  1070  00FFA5  4F                 	db	79	;'O'
  1071  00FFA6  47                 	db	71	;'G'
  1072  00FFA7  20                 	db	32
  1073  00FFA8  42                 	db	66	;'B'
  1074  00FFA9  3A                 	db	58	;':'
  1075  00FFAA  00                 	db	0
  1076  00FFAB                     STR_26:
  1077  00FFAB  50                 	db	80	;'P'
  1078  00FFAC  45                 	db	69	;'E'
  1079  00FFAD  52                 	db	82	;'R'
  1080  00FFAE  4D                 	db	77	;'M'
  1081  00FFAF  41                 	db	65	;'A'
  1082  00FFB0  4E                 	db	78	;'N'
  1083  00FFB1  45                 	db	69	;'E'
  1084  00FFB2  4E                 	db	78	;'N'
  1085  00FFB3  54                 	db	84	;'T'
  1086  00FFB4  20                 	db	32
  1087  00FFB5  4C                 	db	76	;'L'
  1088  00FFB6  4F                 	db	79	;'O'
  1089  00FFB7  47                 	db	71	;'G'
  1090  00FFB8  20                 	db	32
  1091  00FFB9  43                 	db	67	;'C'
  1092  00FFBA  3A                 	db	58	;':'
  1093  00FFBB  00                 	db	0
  1094  00FFBC                     STR_28:
  1095  00FFBC  50                 	db	80	;'P'
  1096  00FFBD  45                 	db	69	;'E'
  1097  00FFBE  52                 	db	82	;'R'
  1098  00FFBF  4D                 	db	77	;'M'
  1099  00FFC0  41                 	db	65	;'A'
  1100  00FFC1  4E                 	db	78	;'N'
  1101  00FFC2  45                 	db	69	;'E'
  1102  00FFC3  4E                 	db	78	;'N'
  1103  00FFC4  54                 	db	84	;'T'
  1104  00FFC5  20                 	db	32
  1105  00FFC6  4C                 	db	76	;'L'
  1106  00FFC7  4F                 	db	79	;'O'
  1107  00FFC8  47                 	db	71	;'G'
  1108  00FFC9  20                 	db	32
  1109  00FFCA  44                 	db	68	;'D'
  1110  00FFCB  3A                 	db	58	;':'
  1111  00FFCC  00                 	db	0
  1112  00FFCD                     STR_2:
  1113  00FFCD  3C                 	db	60	;'<'
  1114  00FFCE  20                 	db	32
  1115  00FFCF  54                 	db	84	;'T'
  1116  00FFD0  4F                 	db	79	;'O'
  1117  00FFD1  47                 	db	71	;'G'
  1118  00FFD2  47                 	db	71	;'G'
  1119  00FFD3  4C                 	db	76	;'L'
  1120  00FFD4  45                 	db	69	;'E'
  1121  00FFD5  20                 	db	32
  1122  00FFD6  20                 	db	32
  1123  00FFD7  4C                 	db	76	;'L'
  1124  00FFD8  4F                 	db	79	;'O'
  1125  00FFD9  47                 	db	71	;'G'
  1126  00FFDA  53                 	db	83	;'S'
  1127  00FFDB  20                 	db	32
  1128  00FFDC  3E                 	db	62	;'>'
  1129  00FFDD  00                 	db	0
  1130  00FFDE                     STR_1:
  1131  00FFDE  50                 	db	80	;'P'
  1132  00FFDF  52                 	db	82	;'R'
  1133  00FFE0  45                 	db	69	;'E'
  1134  00FFE1  53                 	db	83	;'S'
  1135  00FFE2  53                 	db	83	;'S'
  1136  00FFE3  20                 	db	32
  1137  00FFE4  2A                 	db	42
  1138  00FFE5  20                 	db	32
  1139  00FFE6  54                 	db	84	;'T'
  1140  00FFE7  4F                 	db	79	;'O'
  1141  00FFE8  20                 	db	32
  1142  00FFE9  53                 	db	83	;'S'
  1143  00FFEA  54                 	db	84	;'T'
  1144  00FFEB  41                 	db	65	;'A'
  1145  00FFEC  52                 	db	82	;'R'
  1146  00FFED  54                 	db	84	;'T'
  1147  00FFEE  00                 	db	0
  1148  00FFEF                     STR_35:
  1149  00FFEF  25                 	db	37
  1150  00FFF0  30                 	db	48	;'0'
  1151  00FFF1  34                 	db	52	;'4'
  1152  00FFF2  64                 	db	100	;'d'
  1153  00FFF3  20                 	db	32
  1154  00FFF4  25                 	db	37
  1155  00FFF5  30                 	db	48	;'0'
  1156  00FFF6  34                 	db	52	;'4'
  1157  00FFF7  64                 	db	100	;'d'
  1158  00FFF8  20                 	db	32
  1159  00FFF9  25                 	db	37
  1160  00FFFA  30                 	db	48	;'0'
  1161  00FFFB  34                 	db	52	;'4'
  1162  00FFFC  64                 	db	100	;'d'
  1163  00FFFD  00                 	db	0
  1164  0000                     
  1165                           ; #config settings
  1166  00FFFE  00                 	db	0	; dummy byte at the end
  1167  0000                     
  1168                           	psect	cinit
  1169  002F9C                     __pcinit:
  1170                           	opt stack 0
  1171  002F9C                     start_initialization:
  1172                           	opt stack 0
  1173  002F9C                     __initialization:
  1174                           	opt stack 0
  1175                           
  1176                           ; Initialize objects allocated to BANK0 (14 bytes)
  1177                           ; load TBLPTR registers with __pidataBANK0
  1178  002F9C  0E94               	movlw	low __pidataBANK0
  1179  002F9E  6EF6               	movwf	tblptrl,c
  1180  002FA0  0E34               	movlw	high __pidataBANK0
  1181  002FA2  6EF7               	movwf	tblptrh,c
  1182  002FA4  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1183  002FA6  6EF8               	movwf	tblptru,c
  1184  002FA8  EE00  F0EF         	lfsr	0,__pdataBANK0
  1185  002FAC  EE10 F00E          	lfsr	1,14
  1186  002FB0                     copy_data0:
  1187  002FB0  0009               	tblrd		*+
  1188  002FB2  CFF5 FFEE          	movff	tablat,postinc0
  1189  002FB6  50E5               	movf	postdec1,w,c
  1190  002FB8  50E1               	movf	fsr1l,w,c
  1191  002FBA  E1FA               	bnz	copy_data0
  1192                           
  1193                           ; Initialize objects allocated to COMRAM (19 bytes)
  1194                           ; load TBLPTR registers with __pidataCOMRAM
  1195  002FBC  0E5C               	movlw	low __pidataCOMRAM
  1196  002FBE  6EF6               	movwf	tblptrl,c
  1197  002FC0  0E34               	movlw	high __pidataCOMRAM
  1198  002FC2  6EF7               	movwf	tblptrh,c
  1199  002FC4  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1200  002FC6  6EF8               	movwf	tblptru,c
  1201  002FC8  EE00  F034         	lfsr	0,__pdataCOMRAM
  1202  002FCC  EE10 F013          	lfsr	1,19
  1203  002FD0                     copy_data1:
  1204  002FD0  0009               	tblrd		*+
  1205  002FD2  CFF5 FFEE          	movff	tablat,postinc0
  1206  002FD6  50E5               	movf	postdec1,w,c
  1207  002FD8  50E1               	movf	fsr1l,w,c
  1208  002FDA  E1FA               	bnz	copy_data1
  1209                           
  1210                           ; Clear objects allocated to BANK0 (43 bytes)
  1211  002FDC  EE00  F0C4         	lfsr	0,__pbssBANK0
  1212  002FE0  0E2B               	movlw	43
  1213  002FE2                     clear_0:
  1214  002FE2  6AEE               	clrf	postinc0,c
  1215  002FE4  06E8               	decf	wreg,f,c
  1216  002FE6  E1FD               	bnz	clear_0
  1217                           
  1218                           ; Clear objects allocated to COMRAM (8 bytes)
  1219  002FE8  EE00  F047         	lfsr	0,__pbssCOMRAM
  1220  002FEC  0E08               	movlw	8
  1221  002FEE                     clear_1:
  1222  002FEE  6AEE               	clrf	postinc0,c
  1223  002FF0  06E8               	decf	wreg,f,c
  1224  002FF2  E1FD               	bnz	clear_1
  1225  002FF4                     end_of_initialization:
  1226                           	opt stack 0
  1227  002FF4                     __end_of__initialization:
  1228                           	opt stack 0
  1229  002FF4  904F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1230  002FF6  924F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1231  002FF8  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1232  002FFA  6EF8               	movwf	tblptru,c
  1233  002FFC  0100               	movlb	0
  1234  002FFE  EF8C  F005         	goto	_main	;jump to C main() function
  1235                           tblptru	equ	0xFF8
  1236                           tblptrh	equ	0xFF7
  1237                           tblptrl	equ	0xFF6
  1238                           tablat	equ	0xFF5
  1239                           postinc0	equ	0xFEE
  1240                           wreg	equ	0xFE8
  1241                           postdec1	equ	0xFE5
  1242                           fsr1l	equ	0xFE1
  1243                           
  1244                           	psect	bssCOMRAM
  1245  000047                     __pbssCOMRAM:
  1246                           	opt stack 0
  1247  000047                     _count_2ms:
  1248                           	opt stack 0
  1249  000047                     	ds	2
  1250  000049                     _doneTimer:
  1251                           	opt stack 0
  1252  000049                     	ds	1
  1253  00004A                     _opTimer:
  1254                           	opt stack 0
  1255  00004A                     	ds	1
  1256  00004B                     _solOnTimer:
  1257                           	opt stack 0
  1258  00004B                     	ds	1
  1259  00004C                     _sorting:
  1260                           	opt stack 0
  1261  00004C                     	ds	1
  1262  00004D                     _step1:
  1263                           	opt stack 0
  1264  00004D                     	ds	1
  1265  00004E                     _step2:
  1266                           	opt stack 0
  1267  00004E                     	ds	1
  1268                           tblptru	equ	0xFF8
  1269                           tblptrh	equ	0xFF7
  1270                           tblptrl	equ	0xFF6
  1271                           tablat	equ	0xFF5
  1272                           postinc0	equ	0xFEE
  1273                           wreg	equ	0xFE8
  1274                           postdec1	equ	0xFE5
  1275                           fsr1l	equ	0xFE1
  1276                           
  1277                           	psect	dataCOMRAM
  1278  000034                     __pdataCOMRAM:
  1279                           	opt stack 0
  1280  000034                     logPC@F3217:
  1281                           	opt stack 0
  1282  000034                     	ds	19
  1283                           tblptru	equ	0xFF8
  1284                           tblptrh	equ	0xFF7
  1285                           tblptrl	equ	0xFF6
  1286                           tablat	equ	0xFF5
  1287                           postinc0	equ	0xFEE
  1288                           wreg	equ	0xFE8
  1289                           postdec1	equ	0xFE5
  1290                           fsr1l	equ	0xFE1
  1291                           
  1292                           	psect	bssBANK0
  1293  0000C4                     __pbssBANK0:
  1294                           	opt stack 0
  1295  0000C4                     _lastRunRTC:
  1296                           	opt stack 0
  1297  0000C4                     	ds	7
  1298  0000CB                     _realTime:
  1299                           	opt stack 0
  1300  0000CB                     	ds	7
  1301  0000D2                     _plat1Left:
  1302                           	opt stack 0
  1303  0000D2                     	ds	2
  1304  0000D4                     _plat1Right:
  1305                           	opt stack 0
  1306  0000D4                     	ds	2
  1307  0000D6                     _plat2Left:
  1308                           	opt stack 0
  1309  0000D6                     	ds	2
  1310  0000D8                     _plat2Right:
  1311                           	opt stack 0
  1312  0000D8                     	ds	2
  1313  0000DA                     _turn1BackLeft:
  1314                           	opt stack 0
  1315  0000DA                     	ds	2
  1316  0000DC                     _turn1BackRight:
  1317                           	opt stack 0
  1318  0000DC                     	ds	2
  1319  0000DE                     _turn2BackLeft:
  1320                           	opt stack 0
  1321  0000DE                     	ds	2
  1322  0000E0                     _turn2BackRight:
  1323                           	opt stack 0
  1324  0000E0                     	ds	2
  1325  0000E2                     _count9V:
  1326                           	opt stack 0
  1327  0000E2                     	ds	1
  1328  0000E3                     _countAA:
  1329                           	opt stack 0
  1330  0000E3                     	ds	1
  1331  0000E4                     _countC:
  1332                           	opt stack 0
  1333  0000E4                     	ds	1
  1334  0000E5                     _countDrain:
  1335                           	opt stack 0
  1336  0000E5                     	ds	1
  1337  0000E6                     _doubleAA:
  1338                           	opt stack 0
  1339  0000E6                     	ds	1
  1340  0000E7                     _min:
  1341                           	opt stack 0
  1342  0000E7                     	ds	1
  1343  0000E8                     _num9V:
  1344                           	opt stack 0
  1345  0000E8                     	ds	1
  1346  0000E9                     _numAA:
  1347                           	opt stack 0
  1348  0000E9                     	ds	1
  1349  0000EA                     _numBats:
  1350                           	opt stack 0
  1351  0000EA                     	ds	1
  1352  0000EB                     _numC:
  1353                           	opt stack 0
  1354  0000EB                     	ds	1
  1355  0000EC                     _numDrain:
  1356                           	opt stack 0
  1357  0000EC                     	ds	1
  1358  0000ED                     _sec:
  1359                           	opt stack 0
  1360  0000ED                     	ds	1
  1361  0000EE                     _startGear:
  1362                           	opt stack 0
  1363  0000EE                     	ds	1
  1364                           tblptru	equ	0xFF8
  1365                           tblptrh	equ	0xFF7
  1366                           tblptrl	equ	0xFF6
  1367                           tablat	equ	0xFF5
  1368                           postinc0	equ	0xFEE
  1369                           wreg	equ	0xFE8
  1370                           postdec1	equ	0xFE5
  1371                           fsr1l	equ	0xFE1
  1372                           
  1373                           	psect	dataBANK0
  1374  0000EF                     __pdataBANK0:
  1375                           	opt stack 0
  1376  0000EF                     logPC@F3241:
  1377                           	opt stack 0
  1378  0000EF                     	ds	3
  1379  0000F2                     logPC@F3221:
  1380                           	opt stack 0
  1381  0000F2                     	ds	2
  1382  0000F4                     logPC@F3225:
  1383                           	opt stack 0
  1384  0000F4                     	ds	2
  1385  0000F6                     logPC@F3229:
  1386                           	opt stack 0
  1387  0000F6                     	ds	2
  1388  0000F8                     logPC@F3233:
  1389                           	opt stack 0
  1390  0000F8                     	ds	2
  1391  0000FA                     logPC@F3237:
  1392                           	opt stack 0
  1393  0000FA                     	ds	2
  1394  0000FC                     _screenMode:
  1395                           	opt stack 0
  1396  0000FC                     	ds	1
  1397                           tblptru	equ	0xFF8
  1398                           tblptrh	equ	0xFF7
  1399                           tblptrl	equ	0xFF6
  1400                           tablat	equ	0xFF5
  1401                           postinc0	equ	0xFEE
  1402                           wreg	equ	0xFE8
  1403                           postdec1	equ	0xFE5
  1404                           fsr1l	equ	0xFE1
  1405                           
  1406                           	psect	cstackBANK1
  1407  000100                     __pcstackBANK1:
  1408                           	opt stack 0
  1409  000100                     logPC@started_time:
  1410                           	opt stack 0
  1411                           
  1412                           ; 19 bytes @ 0x0
  1413  000100                     	ds	19
  1414  000113                     logPC@runTime:
  1415                           	opt stack 0
  1416                           
  1417                           ; 3 bytes @ 0x13
  1418  000113                     	ds	3
  1419  000116                     logPC@numberAA:
  1420                           	opt stack 0
  1421                           
  1422                           ; 2 bytes @ 0x16
  1423  000116                     	ds	2
  1424  000118                     logPC@numberC:
  1425                           	opt stack 0
  1426                           
  1427                           ; 2 bytes @ 0x18
  1428  000118                     	ds	2
  1429  00011A                     logPC@number9V:
  1430                           	opt stack 0
  1431                           
  1432                           ; 2 bytes @ 0x1A
  1433  00011A                     	ds	2
  1434  00011C                     logPC@numberDrain:
  1435                           	opt stack 0
  1436                           
  1437                           ; 2 bytes @ 0x1C
  1438  00011C                     	ds	2
  1439  00011E                     logPC@numberTotal:
  1440                           	opt stack 0
  1441                           
  1442                           ; 2 bytes @ 0x1E
  1443  00011E                     	ds	2
  1444  000120                     logPC@i:
  1445                           	opt stack 0
  1446                           
  1447                           ; 2 bytes @ 0x20
  1448  000120                     	ds	2
  1449  000122                     logPC@i_909:
  1450                           	opt stack 0
  1451                           
  1452                           ; 2 bytes @ 0x22
  1453  000122                     	ds	2
  1454  000124                     logPC@i_910:
  1455                           	opt stack 0
  1456                           
  1457                           ; 2 bytes @ 0x24
  1458  000124                     	ds	2
  1459  000126                     logPC@i_913:
  1460                           	opt stack 0
  1461                           
  1462                           ; 2 bytes @ 0x26
  1463  000126                     	ds	2
  1464  000128                     logPC@i_914:
  1465                           	opt stack 0
  1466                           
  1467                           ; 2 bytes @ 0x28
  1468  000128                     	ds	2
  1469  00012A                     logPC@i_917:
  1470                           	opt stack 0
  1471                           
  1472                           ; 2 bytes @ 0x2A
  1473  00012A                     	ds	2
  1474  00012C                     logPC@i_918:
  1475                           	opt stack 0
  1476                           
  1477                           ; 2 bytes @ 0x2C
  1478  00012C                     	ds	2
  1479  00012E                     logPC@i_921:
  1480                           	opt stack 0
  1481                           
  1482                           ; 2 bytes @ 0x2E
  1483  00012E                     	ds	2
  1484  000130                     logPC@i_922:
  1485                           	opt stack 0
  1486                           
  1487                           ; 2 bytes @ 0x30
  1488  000130                     	ds	2
  1489  000132                     logPC@i_925:
  1490                           	opt stack 0
  1491                           
  1492                           ; 2 bytes @ 0x32
  1493  000132                     	ds	2
  1494  000134                     logPC@i_926:
  1495                           	opt stack 0
  1496                           
  1497                           ; 2 bytes @ 0x34
  1498  000134                     	ds	2
  1499  000136                     logPC@i_929:
  1500                           	opt stack 0
  1501                           
  1502                           ; 2 bytes @ 0x36
  1503  000136                     	ds	2
  1504  000138                     logPC@i_930:
  1505                           	opt stack 0
  1506                           
  1507                           ; 2 bytes @ 0x38
  1508  000138                     	ds	2
  1509  00013A                     logPC@i_933:
  1510                           	opt stack 0
  1511                           
  1512                           ; 2 bytes @ 0x3A
  1513  00013A                     	ds	2
  1514                           tblptru	equ	0xFF8
  1515                           tblptrh	equ	0xFF7
  1516                           tblptrl	equ	0xFF6
  1517                           tablat	equ	0xFF5
  1518                           postinc0	equ	0xFEE
  1519                           wreg	equ	0xFE8
  1520                           postdec1	equ	0xFE5
  1521                           fsr1l	equ	0xFE1
  1522                           
  1523                           	psect	cstackBANK0
  1524  000080                     __pcstackBANK0:
  1525                           	opt stack 0
  1526  000080                     ??_initLCD:
  1527  000080                     ?___wmul:
  1528                           	opt stack 0
  1529  000080                     ?___awdiv:
  1530                           	opt stack 0
  1531  000080                     ?___awmod:
  1532                           	opt stack 0
  1533  000080                     ?___lwdiv:
  1534                           	opt stack 0
  1535  000080                     ?___lldiv:
  1536                           	opt stack 0
  1537  000080                     ___wmul@multiplier:
  1538                           	opt stack 0
  1539  000080                     ___awdiv@dividend:
  1540                           	opt stack 0
  1541  000080                     ___awmod@dividend:
  1542                           	opt stack 0
  1543  000080                     ___lwdiv@dividend:
  1544                           	opt stack 0
  1545  000080                     ___lldiv@dividend:
  1546                           	opt stack 0
  1547                           
  1548                           ; 4 bytes @ 0x0
  1549  000080                     	ds	2
  1550  000082                     ___wmul@multiplicand:
  1551                           	opt stack 0
  1552  000082                     ___awdiv@divisor:
  1553                           	opt stack 0
  1554  000082                     ___awmod@divisor:
  1555                           	opt stack 0
  1556  000082                     ___lwdiv@divisor:
  1557                           	opt stack 0
  1558                           
  1559                           ; 2 bytes @ 0x2
  1560  000082                     	ds	2
  1561  000084                     ?_getTens:
  1562                           	opt stack 0
  1563  000084                     ?_getHundreds:
  1564                           	opt stack 0
  1565  000084                     ?___lwmod:
  1566                           	opt stack 0
  1567  000084                     ___awdiv@counter:
  1568                           	opt stack 0
  1569  000084                     getHundreds@num:
  1570                           	opt stack 0
  1571  000084                     getTens@num:
  1572                           	opt stack 0
  1573  000084                     ___lwmod@dividend:
  1574                           	opt stack 0
  1575  000084                     ___lldiv@divisor:
  1576                           	opt stack 0
  1577                           
  1578                           ; 4 bytes @ 0x4
  1579  000084                     	ds	1
  1580  000085                     ___awdiv@sign:
  1581                           	opt stack 0
  1582                           
  1583                           ; 1 bytes @ 0x5
  1584  000085                     	ds	1
  1585  000086                     ___awdiv@quotient:
  1586                           	opt stack 0
  1587  000086                     ___lwmod@divisor:
  1588                           	opt stack 0
  1589                           
  1590                           ; 2 bytes @ 0x6
  1591  000086                     	ds	2
  1592  000088                     stopOperation@address_code:
  1593                           	opt stack 0
  1594  000088                     ___lwmod@counter:
  1595                           	opt stack 0
  1596  000088                     ___lldiv@quotient:
  1597                           	opt stack 0
  1598                           
  1599                           ; 4 bytes @ 0x8
  1600  000088                     	ds	1
  1601  000089                     ?_printf:
  1602                           	opt stack 0
  1603  000089                     ?_getOnes:
  1604                           	opt stack 0
  1605  000089                     stopOperation@address:
  1606                           	opt stack 0
  1607  000089                     getOnes@num:
  1608                           	opt stack 0
  1609  000089                     printf@f:
  1610                           	opt stack 0
  1611                           
  1612                           ; 2 bytes @ 0x9
  1613  000089                     	ds	2
  1614  00008B                     getChar@num:
  1615                           	opt stack 0
  1616                           
  1617                           ; 2 bytes @ 0xB
  1618  00008B                     	ds	1
  1619  00008C                     ___lldiv@counter:
  1620                           	opt stack 0
  1621                           
  1622                           ; 1 bytes @ 0xC
  1623  00008C                     	ds	1
  1624  00008D                     ??_logPC:
  1625  00008D                     I2C_Master_Init@c:
  1626                           	opt stack 0
  1627                           
  1628                           ; 4 bytes @ 0xD
  1629  00008D                     	ds	4
  1630  000091                     ??_printf:
  1631  000091                     ??_I2C_Master_Init:
  1632                           
  1633                           ; 1 bytes @ 0x11
  1634  000091                     	ds	4
  1635  000095                     printf@idx:
  1636                           	opt stack 0
  1637                           
  1638                           ; 1 bytes @ 0x15
  1639  000095                     	ds	1
  1640  000096                     printf@ap:
  1641                           	opt stack 0
  1642                           
  1643                           ; 2 bytes @ 0x16
  1644  000096                     	ds	2
  1645  000098                     printf@prec:
  1646                           	opt stack 0
  1647                           
  1648                           ; 1 bytes @ 0x18
  1649  000098                     	ds	1
  1650  000099                     printf@val:
  1651                           	opt stack 0
  1652                           
  1653                           ; 2 bytes @ 0x19
  1654  000099                     	ds	2
  1655  00009B                     printf@flag:
  1656                           	opt stack 0
  1657                           
  1658                           ; 1 bytes @ 0x1B
  1659  00009B                     	ds	1
  1660  00009C                     printf@width:
  1661                           	opt stack 0
  1662                           
  1663                           ; 2 bytes @ 0x1C
  1664  00009C                     	ds	2
  1665  00009E                     printf@c:
  1666                           	opt stack 0
  1667                           
  1668                           ; 1 bytes @ 0x1E
  1669  00009E                     	ds	1
  1670  00009F                     ??_testBatteries:
  1671  00009F                     show_log@log_address:
  1672                           	opt stack 0
  1673                           
  1674                           ; 2 bytes @ 0x1F
  1675  00009F                     	ds	2
  1676  0000A1                     show_log@currScreen:
  1677                           	opt stack 0
  1678  0000A1                     testBatteries@volt1:
  1679                           	opt stack 0
  1680                           
  1681                           ; 2 bytes @ 0x21
  1682  0000A1                     	ds	1
  1683  0000A2                     ??_show_log:
  1684                           
  1685                           ; 1 bytes @ 0x22
  1686  0000A2                     	ds	1
  1687  0000A3                     testBatteries@volt3:
  1688                           	opt stack 0
  1689  0000A3                     show_log@total_num:
  1690                           	opt stack 0
  1691                           
  1692                           ; 2 bytes @ 0x23
  1693  0000A3                     	ds	2
  1694  0000A5                     testBatteries@volt2:
  1695                           	opt stack 0
  1696  0000A5                     show_log@AA_num:
  1697                           	opt stack 0
  1698                           
  1699                           ; 2 bytes @ 0x25
  1700  0000A5                     	ds	2
  1701  0000A7                     testBatteries@volt4:
  1702                           	opt stack 0
  1703  0000A7                     show_log@C_num:
  1704                           	opt stack 0
  1705                           
  1706                           ; 2 bytes @ 0x27
  1707  0000A7                     	ds	2
  1708  0000A9                     testBatteries@volt5:
  1709                           	opt stack 0
  1710  0000A9                     show_log@Nine_num:
  1711                           	opt stack 0
  1712                           
  1713                           ; 2 bytes @ 0x29
  1714  0000A9                     	ds	2
  1715  0000AB                     show_log@Drain_num:
  1716                           	opt stack 0
  1717                           
  1718                           ; 2 bytes @ 0x2B
  1719  0000AB                     	ds	2
  1720  0000AD                     show_log@elapsed_time:
  1721                           	opt stack 0
  1722                           
  1723                           ; 2 bytes @ 0x2D
  1724  0000AD                     	ds	2
  1725  0000AF                     show_log@year:
  1726                           	opt stack 0
  1727                           
  1728                           ; 1 bytes @ 0x2F
  1729  0000AF                     	ds	1
  1730  0000B0                     show_log@month:
  1731                           	opt stack 0
  1732                           
  1733                           ; 1 bytes @ 0x30
  1734  0000B0                     	ds	1
  1735  0000B1                     show_log@day:
  1736                           	opt stack 0
  1737                           
  1738                           ; 1 bytes @ 0x31
  1739  0000B1                     	ds	1
  1740  0000B2                     show_log@hour:
  1741                           	opt stack 0
  1742                           
  1743                           ; 1 bytes @ 0x32
  1744  0000B2                     	ds	1
  1745  0000B3                     show_log@minute:
  1746                           	opt stack 0
  1747                           
  1748                           ; 1 bytes @ 0x33
  1749  0000B3                     	ds	1
  1750  0000B4                     show_log@second:
  1751                           	opt stack 0
  1752                           
  1753                           ; 1 bytes @ 0x34
  1754  0000B4                     	ds	1
  1755  0000B5                     show_log@i:
  1756                           	opt stack 0
  1757                           
  1758                           ; 1 bytes @ 0x35
  1759  0000B5                     	ds	1
  1760  0000B6                     show_log@i_901:
  1761                           	opt stack 0
  1762                           
  1763                           ; 1 bytes @ 0x36
  1764  0000B6                     	ds	1
  1765  0000B7                     show_log@i_904:
  1766                           	opt stack 0
  1767                           
  1768                           ; 1 bytes @ 0x37
  1769  0000B7                     	ds	1
  1770  0000B8                     show_log@address:
  1771                           	opt stack 0
  1772                           
  1773                           ; 2 bytes @ 0x38
  1774  0000B8                     	ds	2
  1775  0000BA                     ??_main:
  1776                           
  1777                           ; 1 bytes @ 0x3A
  1778  0000BA                     	ds	2
  1779  0000BC                     main@keypress:
  1780                           	opt stack 0
  1781                           
  1782                           ; 1 bytes @ 0x3C
  1783  0000BC                     	ds	1
  1784  0000BD                     main@i:
  1785                           	opt stack 0
  1786                           
  1787                           ; 1 bytes @ 0x3D
  1788  0000BD                     	ds	1
  1789  0000BE                     main@i_738:
  1790                           	opt stack 0
  1791                           
  1792                           ; 1 bytes @ 0x3E
  1793  0000BE                     	ds	1
  1794  0000BF                     main@i_785:
  1795                           	opt stack 0
  1796                           
  1797                           ; 1 bytes @ 0x3F
  1798  0000BF                     	ds	1
  1799  0000C0                     main@i_787:
  1800                           	opt stack 0
  1801                           
  1802                           ; 1 bytes @ 0x40
  1803  0000C0                     	ds	1
  1804  0000C1                     main@i_802:
  1805                           	opt stack 0
  1806                           
  1807                           ; 1 bytes @ 0x41
  1808  0000C1                     	ds	1
  1809  0000C2                     main@steps:
  1810                           	opt stack 0
  1811                           
  1812                           ; 1 bytes @ 0x42
  1813  0000C2                     	ds	1
  1814  0000C3                     main@steps_760:
  1815                           	opt stack 0
  1816                           
  1817                           ; 1 bytes @ 0x43
  1818  0000C3                     	ds	1
  1819                           tblptru	equ	0xFF8
  1820                           tblptrh	equ	0xFF7
  1821                           tblptrl	equ	0xFF6
  1822                           tablat	equ	0xFF5
  1823                           postinc0	equ	0xFEE
  1824                           wreg	equ	0xFE8
  1825                           postdec1	equ	0xFE5
  1826                           fsr1l	equ	0xFE1
  1827                           
  1828                           	psect	cstackCOMRAM
  1829  000001                     __pcstackCOMRAM:
  1830                           	opt stack 0
  1831  000001                     ??i2_I2C_Master_Wait:
  1832  000001                     ??i2_isdigit:
  1833  000001                     ?i2_next_address:
  1834                           	opt stack 0
  1835  000001                     ?i2___wmul:
  1836                           	opt stack 0
  1837  000001                     ?i2___awdiv:
  1838                           	opt stack 0
  1839  000001                     ?i2___awmod:
  1840                           	opt stack 0
  1841  000001                     ?i2___lwdiv:
  1842                           	opt stack 0
  1843  000001                     i2lcdNibble@temp:
  1844                           	opt stack 0
  1845  000001                     i2Eeprom_ReadByte@address:
  1846                           	opt stack 0
  1847  000001                     i2Eeprom_WriteByte@address:
  1848                           	opt stack 0
  1849  000001                     i2next_address@address:
  1850                           	opt stack 0
  1851  000001                     i2___wmul@multiplier:
  1852                           	opt stack 0
  1853  000001                     i2___awdiv@dividend:
  1854                           	opt stack 0
  1855  000001                     i2___awmod@dividend:
  1856                           	opt stack 0
  1857  000001                     i2___lwdiv@dividend:
  1858                           	opt stack 0
  1859                           
  1860                           ; 2 bytes @ 0x0
  1861  000001                     	ds	1
  1862  000002                     i2I2C_Master_Read@a:
  1863                           	opt stack 0
  1864  000002                     i2lcdNibble@data:
  1865                           	opt stack 0
  1866  000002                     i2_isdigit$1195:
  1867                           	opt stack 0
  1868  000002                     i2I2C_Master_Write@d:
  1869                           	opt stack 0
  1870                           
  1871                           ; 2 bytes @ 0x1
  1872  000002                     	ds	1
  1873  000003                     i2I2C_Master_Read@temp:
  1874                           	opt stack 0
  1875  000003                     i2lcdInst@data:
  1876                           	opt stack 0
  1877  000003                     i2putch@data:
  1878                           	opt stack 0
  1879  000003                     i2Eeprom_WriteByte@data:
  1880                           	opt stack 0
  1881  000003                     i2isdigit@c:
  1882                           	opt stack 0
  1883  000003                     i2___wmul@multiplicand:
  1884                           	opt stack 0
  1885  000003                     i2___awdiv@divisor:
  1886                           	opt stack 0
  1887  000003                     i2___awmod@divisor:
  1888                           	opt stack 0
  1889  000003                     i2___lwdiv@divisor:
  1890                           	opt stack 0
  1891                           
  1892                           ; 2 bytes @ 0x2
  1893  000003                     	ds	1
  1894  000004                     
  1895                           ; 1 bytes @ 0x3
  1896  000004                     	ds	1
  1897  000005                     i2___awdiv@counter:
  1898                           	opt stack 0
  1899  000005                     i2___awmod@counter:
  1900                           	opt stack 0
  1901  000005                     i2___wmul@product:
  1902                           	opt stack 0
  1903  000005                     i2___lwdiv@quotient:
  1904                           	opt stack 0
  1905                           
  1906                           ; 2 bytes @ 0x4
  1907  000005                     	ds	1
  1908  000006                     i2___awdiv@sign:
  1909                           	opt stack 0
  1910  000006                     i2___awmod@sign:
  1911                           	opt stack 0
  1912                           
  1913                           ; 1 bytes @ 0x5
  1914  000006                     	ds	1
  1915  000007                     i2___lwdiv@counter:
  1916                           	opt stack 0
  1917  000007                     i2___awdiv@quotient:
  1918                           	opt stack 0
  1919                           
  1920                           ; 2 bytes @ 0x6
  1921  000007                     	ds	1
  1922  000008                     ?i2___lwmod:
  1923                           	opt stack 0
  1924  000008                     i2___lwmod@dividend:
  1925                           	opt stack 0
  1926                           
  1927                           ; 2 bytes @ 0x7
  1928  000008                     	ds	1
  1929  000009                     i2stopOperation@address_code:
  1930                           	opt stack 0
  1931                           
  1932                           ; 1 bytes @ 0x8
  1933  000009                     	ds	1
  1934  00000A                     i2stopOperation@address:
  1935                           	opt stack 0
  1936  00000A                     i2___lwmod@divisor:
  1937                           	opt stack 0
  1938                           
  1939                           ; 2 bytes @ 0x9
  1940  00000A                     	ds	2
  1941  00000C                     i2___lwmod@counter:
  1942                           	opt stack 0
  1943                           
  1944                           ; 1 bytes @ 0xB
  1945  00000C                     	ds	1
  1946  00000D                     ?i2_printf:
  1947                           	opt stack 0
  1948  00000D                     i2printf@f:
  1949                           	opt stack 0
  1950                           
  1951                           ; 2 bytes @ 0xC
  1952  00000D                     	ds	2
  1953  00000F                     ??i2_printf:
  1954                           
  1955                           ; 1 bytes @ 0xE
  1956  00000F                     	ds	4
  1957  000013                     i2printf@idx:
  1958                           	opt stack 0
  1959                           
  1960                           ; 1 bytes @ 0x12
  1961  000013                     	ds	1
  1962  000014                     i2printf@ap:
  1963                           	opt stack 0
  1964                           
  1965                           ; 2 bytes @ 0x13
  1966  000014                     	ds	2
  1967  000016                     i2printf@prec:
  1968                           	opt stack 0
  1969                           
  1970                           ; 1 bytes @ 0x15
  1971  000016                     	ds	1
  1972  000017                     i2printf@val:
  1973                           	opt stack 0
  1974                           
  1975                           ; 2 bytes @ 0x16
  1976  000017                     	ds	2
  1977  000019                     i2printf@flag:
  1978                           	opt stack 0
  1979                           
  1980                           ; 1 bytes @ 0x18
  1981  000019                     	ds	1
  1982  00001A                     i2printf@width:
  1983                           	opt stack 0
  1984                           
  1985                           ; 2 bytes @ 0x19
  1986  00001A                     	ds	2
  1987  00001C                     i2printf@c:
  1988                           	opt stack 0
  1989                           
  1990                           ; 1 bytes @ 0x1B
  1991  00001C                     	ds	1
  1992  00001D                     keypressed@right:
  1993                           	opt stack 0
  1994                           
  1995                           ; 1 bytes @ 0x1C
  1996  00001D                     	ds	1
  1997  00001E                     keypressed@key:
  1998                           	opt stack 0
  1999                           
  2000                           ; 1 bytes @ 0x1D
  2001  00001E                     	ds	1
  2002  00001F                     keypressed@left:
  2003                           	opt stack 0
  2004                           
  2005                           ; 1 bytes @ 0x1E
  2006  00001F                     	ds	1
  2007  000020                     keypressed@i:
  2008                           	opt stack 0
  2009                           
  2010                           ; 1 bytes @ 0x1F
  2011  000020                     	ds	1
  2012  000021                     ??_ISR:
  2013                           
  2014                           ; 1 bytes @ 0x20
  2015  000021                     	ds	15
  2016  000030                     ISR@keypress:
  2017                           	opt stack 0
  2018                           
  2019                           ; 1 bytes @ 0x2F
  2020  000030                     	ds	1
  2021  000031                     ??_isdigit:
  2022  000031                     ??_I2C_Master_Wait:
  2023  000031                     ?_next_address:
  2024                           	opt stack 0
  2025  000031                     lcdNibble@temp:
  2026                           	opt stack 0
  2027  000031                     readADC@channel:
  2028                           	opt stack 0
  2029  000031                     ___awmod@counter:
  2030                           	opt stack 0
  2031  000031                     ___lwdiv@counter:
  2032                           	opt stack 0
  2033  000031                     wait_2ms@x:
  2034                           	opt stack 0
  2035  000031                     Eeprom_ReadByte@address:
  2036                           	opt stack 0
  2037  000031                     Eeprom_WriteByte@address:
  2038                           	opt stack 0
  2039  000031                     next_address@address:
  2040                           	opt stack 0
  2041  000031                     ___wmul@product:
  2042                           	opt stack 0
  2043                           
  2044                           ; 2 bytes @ 0x30
  2045  000031                     	ds	1
  2046  000032                     I2C_Master_Read@a:
  2047                           	opt stack 0
  2048  000032                     lcdNibble@data:
  2049                           	opt stack 0
  2050  000032                     ___awmod@sign:
  2051                           	opt stack 0
  2052  000032                     _isdigit$1195:
  2053                           	opt stack 0
  2054  000032                     I2C_Master_Write@d:
  2055                           	opt stack 0
  2056  000032                     ___lwdiv@quotient:
  2057                           	opt stack 0
  2058                           
  2059                           ; 2 bytes @ 0x31
  2060  000032                     	ds	1
  2061  000033                     I2C_Master_Read@temp:
  2062                           	opt stack 0
  2063  000033                     lcdInst@data:
  2064                           	opt stack 0
  2065  000033                     putch@data:
  2066                           	opt stack 0
  2067  000033                     Eeprom_WriteByte@data:
  2068                           	opt stack 0
  2069  000033                     isdigit@c:
  2070                           	opt stack 0
  2071                           
  2072                           ; 1 bytes @ 0x32
  2073  000033                     	ds	1
  2074  000034                     tblptru	equ	0xFF8
  2075                           tblptrh	equ	0xFF7
  2076                           tblptrl	equ	0xFF6
  2077                           tablat	equ	0xFF5
  2078                           postinc0	equ	0xFEE
  2079                           wreg	equ	0xFE8
  2080                           postdec1	equ	0xFE5
  2081                           fsr1l	equ	0xFE1
  2082                           
  2083                           ; 1 bytes @ 0x33
  2084 ;;
  2085 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2086 ;;
  2087 ;; *************** function _main *****************
  2088 ;; Defined at:
  2089 ;;		line 63 in file "../main.c"
  2090 ;; Parameters:    Size  Location     Type
  2091 ;;		None
  2092 ;; Auto vars:     Size  Location     Type
  2093 ;;  i               1   65[BANK0 ] unsigned char 
  2094 ;;  i               1   64[BANK0 ] unsigned char 
  2095 ;;  i               1   63[BANK0 ] unsigned char 
  2096 ;;  steps           1   67[BANK0 ] unsigned char 
  2097 ;;  steps           1   66[BANK0 ] unsigned char 
  2098 ;;  i               1   62[BANK0 ] unsigned char 
  2099 ;;  i               1   61[BANK0 ] unsigned char 
  2100 ;;  keypress        1   60[BANK0 ] unsigned char 
  2101 ;; Return value:  Size  Location     Type
  2102 ;;                  1    wreg      void 
  2103 ;; Registers used:
  2104 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2105 ;; Tracked objects:
  2106 ;;		On entry : 0/0
  2107 ;;		On exit  : 0/0
  2108 ;;		Unchanged: 0/0
  2109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2110 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2111 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2112 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2113 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2114 ;;Total ram usage:       10 bytes
  2115 ;; Hardware stack levels required when called:    9
  2116 ;; This function calls:
  2117 ;;		_I2C_Master_Init
  2118 ;;		_I2C_Master_Read
  2119 ;;		_I2C_Master_Start
  2120 ;;		_I2C_Master_Stop
  2121 ;;		_I2C_Master_Write
  2122 ;;		_initLCD
  2123 ;;		_lcdInst
  2124 ;;		_logPC
  2125 ;;		_printf
  2126 ;;		_readADC
  2127 ;;		_show_log
  2128 ;;		_stopOperation
  2129 ;;		_testBatteries
  2130 ;;		_wait_2ms
  2131 ;; This function is called by:
  2132 ;;		Startup code after reset
  2133 ;; This function uses a non-reentrant model
  2134 ;;
  2135                           
  2136                           	psect	text0
  2137  000B18                     __ptext0:
  2138                           	opt stack 0
  2139  000B18                     _main:
  2140                           	opt stack 22
  2141                           
  2142                           ;main.c: 65: TRISA = 0b00101111;
  2143                           
  2144                           ;incstack = 0
  2145  000B18  0E2F               	movlw	47
  2146  000B1A  6E92               	movwf	3986,c	;volatile
  2147                           
  2148                           ;main.c: 66: TRISB = 0b11110010;
  2149  000B1C  0EF2               	movlw	242
  2150  000B1E  6E93               	movwf	3987,c	;volatile
  2151                           
  2152                           ;main.c: 67: TRISC = 0x00;
  2153  000B20  0E00               	movlw	0
  2154  000B22  6E94               	movwf	3988,c	;volatile
  2155                           
  2156                           ;main.c: 68: TRISD = 0x00;
  2157  000B24  0E00               	movlw	0
  2158  000B26  6E95               	movwf	3989,c	;volatile
  2159                           
  2160                           ;main.c: 69: TRISE = 0b00000001;
  2161  000B28  0E01               	movlw	1
  2162  000B2A  6E96               	movwf	3990,c	;volatile
  2163                           
  2164                           ;main.c: 71: LATA = 0x00;
  2165  000B2C  0E00               	movlw	0
  2166  000B2E  6E89               	movwf	3977,c	;volatile
  2167                           
  2168                           ;main.c: 72: LATB = 0x00;
  2169  000B30  0E00               	movlw	0
  2170  000B32  6E8A               	movwf	3978,c	;volatile
  2171                           
  2172                           ;main.c: 73: LATC = 0x00;
  2173  000B34  0E00               	movlw	0
  2174  000B36  6E8B               	movwf	3979,c	;volatile
  2175                           
  2176                           ;main.c: 74: LATD = 0x00;
  2177  000B38  0E00               	movlw	0
  2178  000B3A  6E8C               	movwf	3980,c	;volatile
  2179                           
  2180                           ;main.c: 75: LATE = 0x00;
  2181  000B3C  0E00               	movlw	0
  2182  000B3E  6E8D               	movwf	3981,c	;volatile
  2183                           
  2184                           ;main.c: 77: ADCON0 = 0x00;
  2185  000B40  0E00               	movlw	0
  2186  000B42  6EC2               	movwf	4034,c	;volatile
  2187                           
  2188                           ;main.c: 78: ADCON1 = 0b00001001;
  2189  000B44  0E09               	movlw	9
  2190  000B46  6EC1               	movwf	4033,c	;volatile
  2191                           
  2192                           ;main.c: 79: ADCON2 = 0b10110001;
  2193  000B48  0EB1               	movlw	177
  2194  000B4A  6EC0               	movwf	4032,c	;volatile
  2195                           
  2196                           ;main.c: 83: CVRCON = 0x00;
  2197  000B4C  0E00               	movlw	0
  2198  000B4E  6EB5               	movwf	4021,c	;volatile
  2199                           
  2200                           ;main.c: 84: CMCONbits.CIS = 0;
  2201  000B50  96B4               	bcf	4020,3,c	;volatile
  2202                           
  2203                           ;main.c: 86: GIE = 1;
  2204  000B52  8EF2               	bsf	intcon,7,c	;volatile
  2205                           
  2206                           ;main.c: 87: PEIE = 1;
  2207  000B54  8CF2               	bsf	intcon,6,c	;volatile
  2208                           
  2209                           ;main.c: 88: INT1IE = 1;
  2210  000B56  86F0               	bsf	intcon3,3,c	;volatile
  2211                           
  2212                           ;main.c: 89: INT1IF = 0;
  2213  000B58  90F0               	bcf	intcon3,0,c	;volatile
  2214                           
  2215                           ;main.c: 90: TMR0IE = 1;
  2216  000B5A  8AF2               	bsf	intcon,5,c	;volatile
  2217                           
  2218                           ;main.c: 91: TMR0IF = 0;
  2219  000B5C  94F2               	bcf	intcon,2,c	;volatile
  2220                           
  2221                           ;main.c: 92: TMR1IE = 1;
  2222  000B5E  809D               	bsf	3997,0,c	;volatile
  2223                           
  2224                           ;main.c: 93: TMR1IF = 0;
  2225  000B60  909E               	bcf	3998,0,c	;volatile
  2226                           
  2227                           ;main.c: 97: T0CON = 0b00000111;
  2228  000B62  0E07               	movlw	7
  2229  000B64  6ED5               	movwf	4053,c	;volatile
  2230                           
  2231                           ;main.c: 105: TMR0 = 55770;
  2232  000B66  0ED9               	movlw	217
  2233  000B68  6ED7               	movwf	4055,c	;volatile
  2234  000B6A  0EDA               	movlw	218
  2235  000B6C  6ED6               	movwf	4054,c	;volatile
  2236                           
  2237                           ;main.c: 114: T1CON = 0b10000000;
  2238  000B6E  0E80               	movlw	128
  2239  000B70  6ECD               	movwf	4045,c	;volatile
  2240                           
  2241                           ;main.c: 123: TMR1 = 60535;
  2242  000B72  0EEC               	movlw	236
  2243  000B74  6ECF               	movwf	4047,c	;volatile
  2244  000B76  0E77               	movlw	119
  2245  000B78  6ECE               	movwf	4046,c	;volatile
  2246                           
  2247                           ;main.c: 133: initLCD();
  2248  000B7A  ECD9  F018         	call	_initLCD	;wreg free
  2249                           
  2250                           ;main.c: 134: nRBPU = 0;
  2251  000B7E  9EF1               	bcf	intcon2,7,c	;volatile
  2252                           
  2253                           ;main.c: 135: I2C_Master_Init(10000);
  2254  000B80  0E10               	movlw	16
  2255  000B82  0100               	movlb	0	; () banked
  2256  000B84  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  2257  000B86  0E27               	movlw	39
  2258  000B88  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  2259  000B8A  0E00               	movlw	0
  2260  000B8C  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  2261  000B8E  0E00               	movlw	0
  2262  000B90  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  2263  000B92  EC32  F018         	call	_I2C_Master_Init	;wreg free
  2264                           
  2265                           ;main.c: 136: (INTCONbits.GIE = 1);
  2266  000B96  8EF2               	bsf	intcon,7,c	;volatile
  2267                           
  2268                           ;main.c: 139: while (screenMode == 2){
  2269                           
  2270                           ;main.c: 138: while (1) {
  2271  000B98  D056               	goto	l6775
  2272  000B9A                     l6737:
  2273                           
  2274                           ;main.c: 140: lcdInst(0b10000000);;
  2275  000B9A  0E80               	movlw	128
  2276  000B9C  EC65  F01A         	call	_lcdInst
  2277                           
  2278                           ;main.c: 141: printf("PRESS * TO START");
  2279  000BA0  0EDE               	movlw	low STR_1
  2280  000BA2  0100               	movlb	0	; () banked
  2281  000BA4  6F89               	movwf	printf@f& (0+255),b
  2282  000BA6  0EFF               	movlw	high STR_1
  2283  000BA8  0100               	movlb	0	; () banked
  2284  000BAA  6F8A               	movwf	(printf@f+1)& (0+255),b
  2285  000BAC  EC09  F00B         	call	_printf	;wreg free
  2286                           
  2287                           ;main.c: 142: lcdInst(0b11000000);;
  2288  000BB0  0EC0               	movlw	192
  2289  000BB2  EC65  F01A         	call	_lcdInst
  2290                           
  2291                           ;main.c: 143: printf("< TOGGLE  LOGS >");
  2292  000BB6  0ECD               	movlw	low STR_2
  2293  000BB8  0100               	movlb	0	; () banked
  2294  000BBA  6F89               	movwf	printf@f& (0+255),b
  2295  000BBC  0EFF               	movlw	high STR_2
  2296  000BBE  0100               	movlb	0	; () banked
  2297  000BC0  6F8A               	movwf	(printf@f+1)& (0+255),b
  2298  000BC2  EC09  F00B         	call	_printf	;wreg free
  2299                           
  2300                           ;main.c: 144: for(unsigned char i=0;i<50;i++){
  2301  000BC6  0E00               	movlw	0
  2302  000BC8  0100               	movlb	0	; () banked
  2303  000BCA  6FBD               	movwf	main@i& (0+255),b
  2304  000BCC                     l6745:
  2305                           
  2306                           ; BSR set to: 0
  2307  000BCC  0E31               	movlw	49
  2308  000BCE  0100               	movlb	0	; () banked
  2309  000BD0  65BD               	cpfsgt	main@i& (0+255),b
  2310  000BD2  D001               	goto	l6749
  2311  000BD4  D011               	goto	l6757
  2312  000BD6                     l6749:
  2313                           
  2314                           ; BSR set to: 0
  2315                           ;main.c: 145: if (screenMode != 2)
  2316  000BD6  0E02               	movlw	2
  2317  000BD8  0100               	movlb	0	; () banked
  2318  000BDA  19FC               	xorwf	_screenMode& (0+255),w,b
  2319  000BDC  A4D8               	btfss	status,2,c
  2320  000BDE  D00C               	goto	l6757
  2321                           
  2322                           ; BSR set to: 0
  2323                           ;main.c: 147: _delay((unsigned long)((10)*(10000000/4000.0)));
  2324                           
  2325                           ; BSR set to: 0
  2326                           
  2327                           ; BSR set to: 0
  2328                           ;main.c: 146: break;
  2329  000BE0  0E21               	movlw	33
  2330  000BE2  0100               	movlb	0	; () banked
  2331  000BE4  6FBA               	movwf	??_main& (0+255),b
  2332  000BE6  0E76               	movlw	118
  2333  000BE8                     u7047:
  2334  000BE8  2EE8               	decfsz	wreg,f,c
  2335  000BEA  D7FE               	bra	u7047
  2336  000BEC  2FBA               	decfsz	??_main& (0+255),f,b
  2337  000BEE  D7FC               	bra	u7047
  2338  000BF0  F000               	nop	
  2339  000BF2  0100               	movlb	0	; () banked
  2340  000BF4  2BBD               	incf	main@i& (0+255),f,b
  2341  000BF6  D7EA               	goto	l6745
  2342  000BF8                     l6757:
  2343                           
  2344                           ; BSR set to: 0
  2345                           ;main.c: 148: }
  2346                           ;main.c: 149: lcdInst(0b10000000);;
  2347  000BF8  0E80               	movlw	128
  2348  000BFA  EC65  F01A         	call	_lcdInst
  2349                           
  2350                           ;main.c: 150: lcdInst(0b11000000);;
  2351  000BFE  0EC0               	movlw	192
  2352  000C00  EC65  F01A         	call	_lcdInst
  2353                           
  2354                           ;main.c: 151: printf(" <TOGGLE  LOGS> ");
  2355  000C04  0E67               	movlw	low STR_3
  2356  000C06  0100               	movlb	0	; () banked
  2357  000C08  6F89               	movwf	printf@f& (0+255),b
  2358  000C0A  0EFF               	movlw	high STR_3
  2359  000C0C  0100               	movlb	0	; () banked
  2360  000C0E  6F8A               	movwf	(printf@f+1)& (0+255),b
  2361  000C10  EC09  F00B         	call	_printf	;wreg free
  2362                           
  2363                           ;main.c: 152: for(unsigned char i=0;i<50;i++){
  2364  000C14  0E00               	movlw	0
  2365  000C16  0100               	movlb	0	; () banked
  2366  000C18  6FBE               	movwf	main@i_738& (0+255),b
  2367  000C1A                     l6763:
  2368                           
  2369                           ; BSR set to: 0
  2370  000C1A  0E31               	movlw	49
  2371  000C1C  0100               	movlb	0	; () banked
  2372  000C1E  65BE               	cpfsgt	main@i_738& (0+255),b
  2373  000C20  D001               	goto	l6767
  2374  000C22  D011               	goto	l6775
  2375  000C24                     l6767:
  2376                           
  2377                           ; BSR set to: 0
  2378                           ;main.c: 153: if (screenMode != 2)
  2379  000C24  0E02               	movlw	2
  2380  000C26  0100               	movlb	0	; () banked
  2381  000C28  19FC               	xorwf	_screenMode& (0+255),w,b
  2382  000C2A  A4D8               	btfss	status,2,c
  2383  000C2C  D00C               	goto	l6775
  2384                           
  2385                           ; BSR set to: 0
  2386                           ;main.c: 155: _delay((unsigned long)((10)*(10000000/4000.0)));
  2387                           
  2388                           ; BSR set to: 0
  2389                           
  2390                           ; BSR set to: 0
  2391                           ;main.c: 154: break;
  2392  000C2E  0E21               	movlw	33
  2393  000C30  0100               	movlb	0	; () banked
  2394  000C32  6FBA               	movwf	??_main& (0+255),b
  2395  000C34  0E76               	movlw	118
  2396  000C36                     u7057:
  2397  000C36  2EE8               	decfsz	wreg,f,c
  2398  000C38  D7FE               	bra	u7057
  2399  000C3A  2FBA               	decfsz	??_main& (0+255),f,b
  2400  000C3C  D7FC               	bra	u7057
  2401  000C3E  F000               	nop	
  2402  000C40  0100               	movlb	0	; () banked
  2403  000C42  2BBE               	incf	main@i_738& (0+255),f,b
  2404  000C44  D7EA               	goto	l6763
  2405  000C46                     l6775:
  2406  000C46  0E02               	movlw	2
  2407  000C48  0100               	movlb	0	; () banked
  2408  000C4A  19FC               	xorwf	_screenMode& (0+255),w,b
  2409  000C4C  A4D8               	btfss	status,2,c
  2410  000C4E  D255               	goto	l7001
  2411  000C50  D7A4               	goto	l6737
  2412  000C52                     l6777:
  2413                           
  2414                           ; BSR set to: 0
  2415                           ;main.c: 166: readADC(0);
  2416  000C52  0E00               	movlw	0
  2417  000C54  EC24  F01A         	call	_readADC
  2418                           
  2419                           ;main.c: 167: lcdInst(0b10000000);;
  2420  000C58  0E80               	movlw	128
  2421  000C5A  EC65  F01A         	call	_lcdInst
  2422                           
  2423                           ;main.c: 168: lcdInst(0b11000000);;
  2424  000C5E  0EC0               	movlw	192
  2425  000C60  EC65  F01A         	call	_lcdInst
  2426                           
  2427                           ;main.c: 169: printf("%4d %2d         ", ADRES, countDrain+countAA+count9V+countC);
  2428  000C64  0EBD               	movlw	low STR_4
  2429  000C66  0100               	movlb	0	; () banked
  2430  000C68  6F89               	movwf	printf@f& (0+255),b
  2431  000C6A  0EFE               	movlw	high STR_4
  2432  000C6C  0100               	movlb	0	; () banked
  2433  000C6E  6F8A               	movwf	(printf@f+1)& (0+255),b
  2434  000C70  CFC3 F08B          	movff	4035,?_printf+2	;volatile
  2435  000C74  CFC4 F08C          	movff	4036,?_printf+3	;volatile
  2436  000C78  0100               	movlb	0	; () banked
  2437  000C7A  51E3               	movf	_countAA& (0+255),w,b
  2438  000C7C  C0E5  F0BA         	movff	_countDrain,??_main
  2439  000C80  0100               	movlb	0	; () banked
  2440  000C82  6BBB               	clrf	(??_main+1)& (0+255),b
  2441  000C84  0100               	movlb	0	; () banked
  2442  000C86  27BA               	addwf	??_main& (0+255),f,b
  2443  000C88  0E00               	movlw	0
  2444  000C8A  23BB               	addwfc	(??_main+1)& (0+255),f,b
  2445  000C8C  0100               	movlb	0	; () banked
  2446  000C8E  51E2               	movf	_count9V& (0+255),w,b
  2447  000C90  0100               	movlb	0	; () banked
  2448  000C92  27BA               	addwf	??_main& (0+255),f,b
  2449  000C94  0E00               	movlw	0
  2450  000C96  23BB               	addwfc	(??_main+1)& (0+255),f,b
  2451  000C98  0100               	movlb	0	; () banked
  2452  000C9A  51E4               	movf	_countC& (0+255),w,b
  2453  000C9C  0100               	movlb	0	; () banked
  2454  000C9E  25BA               	addwf	??_main& (0+255),w,b
  2455  000CA0  0100               	movlb	0	; () banked
  2456  000CA2  6F8D               	movwf	(?_printf+4)& (0+255),b
  2457  000CA4  0100               	movlb	0	; () banked
  2458  000CA6  0E00               	movlw	0
  2459  000CA8  0100               	movlb	0	; () banked
  2460  000CAA  21BB               	addwfc	(??_main+1)& (0+255),w,b
  2461  000CAC  0100               	movlb	0	; () banked
  2462  000CAE  6F8E               	movwf	(?_printf+5)& (0+255),b
  2463  000CB0  EC09  F00B         	call	_printf	;wreg free
  2464                           
  2465                           ;main.c: 170: if (startGear){
  2466  000CB4  0100               	movlb	0	; () banked
  2467  000CB6  51EE               	movf	_startGear& (0+255),w,b
  2468  000CB8  B4D8               	btfsc	status,2,c
  2469  000CBA  D073               	goto	l6841
  2470                           
  2471                           ; BSR set to: 0
  2472                           ;main.c: 171: wait_2ms(2000);
  2473  000CBC  0E07               	movlw	7
  2474  000CBE  6E32               	movwf	wait_2ms@x+1,c
  2475  000CC0  0ED0               	movlw	208
  2476  000CC2  6E31               	movwf	wait_2ms@x,c
  2477  000CC4  EC01  F01A         	call	_wait_2ms	;wreg free
  2478                           
  2479                           ;main.c: 172: startGear = 0;
  2480  000CC8  0E00               	movlw	0
  2481  000CCA  0100               	movlb	0	; () banked
  2482  000CCC  6FEE               	movwf	_startGear& (0+255),b
  2483                           
  2484                           ; BSR set to: 0
  2485                           ;main.c: 173: LATDbits.LD0= 0;;
  2486  000CCE  908C               	bcf	3980,0,c	;volatile
  2487                           
  2488                           ; BSR set to: 0
  2489                           ;main.c: 174: doneTimer = 0;
  2490  000CD0  0E00               	movlw	0
  2491  000CD2  6E49               	movwf	_doneTimer,c
  2492                           
  2493                           ; BSR set to: 0
  2494                           ;main.c: 176: unsigned char steps = 0;
  2495  000CD4  0E00               	movlw	0
  2496  000CD6  0100               	movlb	0	; () banked
  2497  000CD8  6FC2               	movwf	main@steps& (0+255),b
  2498                           
  2499                           ;main.c: 177: while(steps<20 && screenMode==1){
  2500  000CDA  D016               	goto	l6803
  2501  000CDC                     l6793:
  2502                           
  2503                           ; BSR set to: 0
  2504                           ;main.c: 178: steps++;
  2505  000CDC  0100               	movlb	0	; () banked
  2506  000CDE  2BC2               	incf	main@steps& (0+255),f,b
  2507                           
  2508                           ; BSR set to: 0
  2509                           ;main.c: 179: LATDbits.LD1 = 1;;
  2510  000CE0  828C               	bsf	3980,1,c	;volatile
  2511                           
  2512                           ; BSR set to: 0
  2513                           ;main.c: 180: _delay((unsigned long)((5)*(10000000/4000.0)));
  2514  000CE2  0E11               	movlw	17
  2515  000CE4  0100               	movlb	0	; () banked
  2516  000CE6  6FBA               	movwf	??_main& (0+255),b
  2517  000CE8  0E3A               	movlw	58
  2518  000CEA                     u7067:
  2519  000CEA  2EE8               	decfsz	wreg,f,c
  2520  000CEC  D7FE               	bra	u7067
  2521  000CEE  2FBA               	decfsz	??_main& (0+255),f,b
  2522  000CF0  D7FC               	bra	u7067
  2523  000CF2  F000               	nop	
  2524                           
  2525                           ;main.c: 181: LATDbits.LD1 = 0;;
  2526  000CF4  928C               	bcf	3980,1,c	;volatile
  2527                           
  2528                           ;main.c: 182: _delay((unsigned long)((5)*(10000000/4000.0)));
  2529  000CF6  0E11               	movlw	17
  2530  000CF8  0100               	movlb	0	; () banked
  2531  000CFA  6FBA               	movwf	??_main& (0+255),b
  2532  000CFC  0E3A               	movlw	58
  2533  000CFE                     u7077:
  2534  000CFE  2EE8               	decfsz	wreg,f,c
  2535  000D00  D7FE               	bra	u7077
  2536  000D02  2FBA               	decfsz	??_main& (0+255),f,b
  2537  000D04  D7FC               	bra	u7077
  2538  000D06  F000               	nop	
  2539  000D08                     l6803:
  2540  000D08  0E14               	movlw	20
  2541  000D0A  0100               	movlb	0	; () banked
  2542  000D0C  61C2               	cpfslt	main@steps& (0+255),b
  2543  000D0E  D004               	goto	l6807
  2544                           
  2545                           ; BSR set to: 0
  2546  000D10  0100               	movlb	0	; () banked
  2547  000D12  05FC               	decf	_screenMode& (0+255),w,b
  2548  000D14  B4D8               	btfsc	status,2,c
  2549  000D16  D7E2               	goto	l6793
  2550  000D18                     l6807:
  2551                           
  2552                           ; BSR set to: 0
  2553                           ;main.c: 183: }
  2554                           ;main.c: 184: steps = 0;
  2555  000D18  0E00               	movlw	0
  2556  000D1A  0100               	movlb	0	; () banked
  2557  000D1C  6FC2               	movwf	main@steps& (0+255),b
  2558                           
  2559                           ;main.c: 185: while(steps < 178 && screenMode==1){
  2560  000D1E  D014               	goto	l6819
  2561  000D20                     l6809:
  2562                           
  2563                           ; BSR set to: 0
  2564                           ;main.c: 186: steps++;
  2565  000D20  0100               	movlb	0	; () banked
  2566  000D22  2BC2               	incf	main@steps& (0+255),f,b
  2567                           
  2568                           ; BSR set to: 0
  2569                           ;main.c: 187: LATDbits.LD1 = 1;;
  2570  000D24  828C               	bsf	3980,1,c	;volatile
  2571                           
  2572                           ; BSR set to: 0
  2573                           ;main.c: 188: _delay((unsigned long)((2)*(10000000/4000.0)));
  2574  000D26  0E07               	movlw	7
  2575  000D28  0100               	movlb	0	; () banked
  2576  000D2A  6FBA               	movwf	??_main& (0+255),b
  2577  000D2C  0E7D               	movlw	125
  2578  000D2E                     u7087:
  2579  000D2E  2EE8               	decfsz	wreg,f,c
  2580  000D30  D7FE               	bra	u7087
  2581  000D32  2FBA               	decfsz	??_main& (0+255),f,b
  2582  000D34  D7FC               	bra	u7087
  2583                           
  2584                           ;main.c: 189: LATDbits.LD1 = 0;;
  2585  000D36  928C               	bcf	3980,1,c	;volatile
  2586                           
  2587                           ;main.c: 190: _delay((unsigned long)((2)*(10000000/4000.0)));
  2588  000D38  0E07               	movlw	7
  2589  000D3A  0100               	movlb	0	; () banked
  2590  000D3C  6FBA               	movwf	??_main& (0+255),b
  2591  000D3E  0E7D               	movlw	125
  2592  000D40                     u7097:
  2593  000D40  2EE8               	decfsz	wreg,f,c
  2594  000D42  D7FE               	bra	u7097
  2595  000D44  2FBA               	decfsz	??_main& (0+255),f,b
  2596  000D46  D7FC               	bra	u7097
  2597  000D48                     l6819:
  2598  000D48  0EB2               	movlw	178
  2599  000D4A  0100               	movlb	0	; () banked
  2600  000D4C  61C2               	cpfslt	main@steps& (0+255),b
  2601  000D4E  D004               	goto	l6823
  2602                           
  2603                           ; BSR set to: 0
  2604  000D50  0100               	movlb	0	; () banked
  2605  000D52  05FC               	decf	_screenMode& (0+255),w,b
  2606  000D54  B4D8               	btfsc	status,2,c
  2607  000D56  D7E4               	goto	l6809
  2608  000D58                     l6823:
  2609                           
  2610                           ; BSR set to: 0
  2611                           ;main.c: 191: }
  2612                           ;main.c: 192: steps = 0;
  2613  000D58  0E00               	movlw	0
  2614  000D5A  0100               	movlb	0	; () banked
  2615  000D5C  6FC2               	movwf	main@steps& (0+255),b
  2616                           
  2617                           ;main.c: 193: while(steps <2 && screenMode==1){
  2618  000D5E  D016               	goto	l6835
  2619  000D60                     l6825:
  2620                           
  2621                           ; BSR set to: 0
  2622                           ;main.c: 194: steps++;
  2623  000D60  0100               	movlb	0	; () banked
  2624  000D62  2BC2               	incf	main@steps& (0+255),f,b
  2625                           
  2626                           ; BSR set to: 0
  2627                           ;main.c: 195: LATDbits.LD1 = 1;;
  2628  000D64  828C               	bsf	3980,1,c	;volatile
  2629                           
  2630                           ; BSR set to: 0
  2631                           ;main.c: 196: _delay((unsigned long)((5)*(10000000/4000.0)));
  2632  000D66  0E11               	movlw	17
  2633  000D68  0100               	movlb	0	; () banked
  2634  000D6A  6FBA               	movwf	??_main& (0+255),b
  2635  000D6C  0E3A               	movlw	58
  2636  000D6E                     u7107:
  2637  000D6E  2EE8               	decfsz	wreg,f,c
  2638  000D70  D7FE               	bra	u7107
  2639  000D72  2FBA               	decfsz	??_main& (0+255),f,b
  2640  000D74  D7FC               	bra	u7107
  2641  000D76  F000               	nop	
  2642                           
  2643                           ;main.c: 197: LATDbits.LD1 = 0;;
  2644  000D78  928C               	bcf	3980,1,c	;volatile
  2645                           
  2646                           ;main.c: 198: _delay((unsigned long)((5)*(10000000/4000.0)));
  2647  000D7A  0E11               	movlw	17
  2648  000D7C  0100               	movlb	0	; () banked
  2649  000D7E  6FBA               	movwf	??_main& (0+255),b
  2650  000D80  0E3A               	movlw	58
  2651  000D82                     u7117:
  2652  000D82  2EE8               	decfsz	wreg,f,c
  2653  000D84  D7FE               	bra	u7117
  2654  000D86  2FBA               	decfsz	??_main& (0+255),f,b
  2655  000D88  D7FC               	bra	u7117
  2656  000D8A  F000               	nop	
  2657  000D8C                     l6835:
  2658  000D8C  0E02               	movlw	2
  2659  000D8E  0100               	movlb	0	; () banked
  2660  000D90  61C2               	cpfslt	main@steps& (0+255),b
  2661  000D92  D004               	goto	l6839
  2662                           
  2663                           ; BSR set to: 0
  2664  000D94  0100               	movlb	0	; () banked
  2665  000D96  05FC               	decf	_screenMode& (0+255),w,b
  2666  000D98  B4D8               	btfsc	status,2,c
  2667  000D9A  D7E2               	goto	l6825
  2668  000D9C                     l6839:
  2669                           
  2670                           ; BSR set to: 0
  2671                           ;main.c: 199: }
  2672                           ;main.c: 200: steps = 0;
  2673  000D9C  0E00               	movlw	0
  2674  000D9E  0100               	movlb	0	; () banked
  2675  000DA0  6FC2               	movwf	main@steps& (0+255),b
  2676  000DA2                     l6841:
  2677                           
  2678                           ; BSR set to: 0
  2679                           ;main.c: 201: }
  2680                           ;main.c: 204: if (ADRES < 22 | ADRES > 55){
  2681  000DA2  50C4               	movf	4036,w,c	;volatile
  2682  000DA4  E104               	bnz	u6581
  2683  000DA6  0E38               	movlw	56
  2684  000DA8  5CC3               	subwf	4035,w,c	;volatile
  2685  000DAA  A0D8               	btfss	status,0,c
  2686  000DAC  D002               	goto	u6580
  2687  000DAE                     u6581:
  2688  000DAE  0E01               	movlw	1
  2689  000DB0  D001               	goto	u6582
  2690  000DB2                     u6580:
  2691  000DB2  0E00               	movlw	0
  2692  000DB4                     u6582:
  2693  000DB4  0100               	movlb	0	; () banked
  2694  000DB6  6FBA               	movwf	??_main& (0+255),b
  2695  000DB8  50C4               	movf	4036,w,c	;volatile
  2696  000DBA  E106               	bnz	u6590
  2697  000DBC  0E16               	movlw	22
  2698  000DBE  5CC3               	subwf	4035,w,c	;volatile
  2699  000DC0  B0D8               	btfsc	status,0,c
  2700  000DC2  D002               	goto	u6590
  2701  000DC4  0E01               	movlw	1
  2702  000DC6  D001               	goto	u6592
  2703  000DC8                     u6590:
  2704  000DC8  0E00               	movlw	0
  2705  000DCA                     u6592:
  2706  000DCA  0100               	movlb	0	; () banked
  2707  000DCC  11BA               	iorwf	??_main& (0+255),w,b
  2708  000DCE  A0E8               	btfss	wreg,0,c
  2709  000DD0  D18E               	goto	l6999
  2710                           
  2711                           ; BSR set to: 0
  2712                           ;main.c: 205: wait_2ms(250);
  2713  000DD2  0E00               	movlw	0
  2714  000DD4  6E32               	movwf	wait_2ms@x+1,c
  2715  000DD6  0EFA               	movlw	250
  2716  000DD8  6E31               	movwf	wait_2ms@x,c
  2717  000DDA  EC01  F01A         	call	_wait_2ms	;wreg free
  2718                           
  2719                           ;main.c: 206: sorting = 1;
  2720  000DDE  0E01               	movlw	1
  2721  000DE0  6E4C               	movwf	_sorting,c
  2722                           
  2723                           ;main.c: 207: LATCbits.LC7 = 1;;
  2724  000DE2  8E8B               	bsf	3979,7,c	;volatile
  2725                           
  2726                           ;main.c: 208: wait_2ms(500);
  2727  000DE4  0E01               	movlw	1
  2728  000DE6  6E32               	movwf	wait_2ms@x+1,c
  2729  000DE8  0EF4               	movlw	244
  2730  000DEA  6E31               	movwf	wait_2ms@x,c
  2731  000DEC  EC01  F01A         	call	_wait_2ms	;wreg free
  2732                           
  2733                           ;main.c: 209: testBatteries();
  2734  000DF0  EC56  F014         	call	_testBatteries	;wreg free
  2735                           
  2736                           ;main.c: 210: LATCbits.LC7 = 0;;
  2737  000DF4  9E8B               	bcf	3979,7,c	;volatile
  2738                           
  2739                           ;main.c: 212: if (doubleAA)
  2740  000DF6  0100               	movlb	0	; () banked
  2741  000DF8  51E6               	movf	_doubleAA& (0+255),w,b
  2742  000DFA  B4D8               	btfsc	status,2,c
  2743  000DFC  D005               	goto	l6859
  2744                           
  2745                           ; BSR set to: 0
  2746                           ;main.c: 213: plat1Right = 512;
  2747  000DFE  0E02               	movlw	2
  2748  000E00  0100               	movlb	0	; () banked
  2749  000E02  6FD5               	movwf	(_plat1Right+1)& (0+255),b
  2750  000E04  0E00               	movlw	0
  2751  000E06  6FD4               	movwf	_plat1Right& (0+255),b
  2752  000E08                     l6859:
  2753                           
  2754                           ; BSR set to: 0
  2755                           ;main.c: 214: if (plat1Left)
  2756  000E08  0100               	movlb	0	; () banked
  2757  000E0A  51D2               	movf	_plat1Left& (0+255),w,b
  2758  000E0C  0100               	movlb	0	; () banked
  2759  000E0E  11D3               	iorwf	(_plat1Left+1)& (0+255),w,b
  2760  000E10  B4D8               	btfsc	status,2,c
  2761  000E12  D002               	goto	l6863
  2762                           
  2763                           ; BSR set to: 0
  2764                           ;main.c: 215: step1 = 1;
  2765  000E14  0E01               	movlw	1
  2766  000E16  6E4D               	movwf	_step1,c
  2767  000E18                     l6863:
  2768                           
  2769                           ; BSR set to: 0
  2770                           ;main.c: 216: if (plat1Right)
  2771  000E18  0100               	movlb	0	; () banked
  2772  000E1A  51D4               	movf	_plat1Right& (0+255),w,b
  2773  000E1C  0100               	movlb	0	; () banked
  2774  000E1E  11D5               	iorwf	(_plat1Right+1)& (0+255),w,b
  2775  000E20  B4D8               	btfsc	status,2,c
  2776  000E22  D002               	goto	l6867
  2777                           
  2778                           ; BSR set to: 0
  2779                           ;main.c: 217: step1 = 4;
  2780  000E24  0E04               	movlw	4
  2781  000E26  6E4D               	movwf	_step1,c
  2782  000E28                     l6867:
  2783                           
  2784                           ; BSR set to: 0
  2785                           ;main.c: 218: if (plat2Left)
  2786  000E28  0100               	movlb	0	; () banked
  2787  000E2A  51D6               	movf	_plat2Left& (0+255),w,b
  2788  000E2C  0100               	movlb	0	; () banked
  2789  000E2E  11D7               	iorwf	(_plat2Left+1)& (0+255),w,b
  2790  000E30  B4D8               	btfsc	status,2,c
  2791  000E32  D002               	goto	l6871
  2792                           
  2793                           ; BSR set to: 0
  2794                           ;main.c: 219: step2 = 1;
  2795  000E34  0E01               	movlw	1
  2796  000E36  6E4E               	movwf	_step2,c
  2797  000E38                     l6871:
  2798                           
  2799                           ; BSR set to: 0
  2800                           ;main.c: 220: if (plat2Right)
  2801  000E38  0100               	movlb	0	; () banked
  2802  000E3A  51D8               	movf	_plat2Right& (0+255),w,b
  2803  000E3C  0100               	movlb	0	; () banked
  2804  000E3E  11D9               	iorwf	(_plat2Right+1)& (0+255),w,b
  2805  000E40  B4D8               	btfsc	status,2,c
  2806  000E42  D002               	goto	l6875
  2807                           
  2808                           ; BSR set to: 0
  2809                           ;main.c: 221: step2 = 4;
  2810  000E44  0E04               	movlw	4
  2811  000E46  6E4E               	movwf	_step2,c
  2812  000E48                     l6875:
  2813                           
  2814                           ; BSR set to: 0
  2815                           ;main.c: 223: turn1BackRight = plat1Left;
  2816  000E48  C0D2  F0DC         	movff	_plat1Left,_turn1BackRight
  2817  000E4C  C0D3  F0DD         	movff	_plat1Left+1,_turn1BackRight+1
  2818                           
  2819                           ; BSR set to: 0
  2820                           ;main.c: 224: turn1BackLeft = plat1Right;
  2821  000E50  C0D4  F0DA         	movff	_plat1Right,_turn1BackLeft
  2822  000E54  C0D5  F0DB         	movff	_plat1Right+1,_turn1BackLeft+1
  2823                           
  2824                           ; BSR set to: 0
  2825                           ;main.c: 225: turn2BackRight = plat2Left;
  2826  000E58  C0D6  F0E0         	movff	_plat2Left,_turn2BackRight
  2827  000E5C  C0D7  F0E1         	movff	_plat2Left+1,_turn2BackRight+1
  2828                           
  2829                           ; BSR set to: 0
  2830                           ;main.c: 226: turn2BackLeft = plat2Right;
  2831  000E60  C0D8  F0DE         	movff	_plat2Right,_turn2BackLeft
  2832  000E64  C0D9  F0DF         	movff	_plat2Right+1,_turn2BackLeft+1
  2833                           
  2834                           ; BSR set to: 0
  2835                           ;main.c: 228: LATCbits.LC1 = 1;;
  2836  000E68  828B               	bsf	3979,1,c	;volatile
  2837                           
  2838                           ; BSR set to: 0
  2839                           ;main.c: 229: LATCbits.LC2 = 0;;
  2840  000E6A  948B               	bcf	3979,2,c	;volatile
  2841                           
  2842                           ; BSR set to: 0
  2843                           ;main.c: 230: LATCbits.LC0 = 1;;
  2844  000E6C  808B               	bsf	3979,0,c	;volatile
  2845                           
  2846                           ; BSR set to: 0
  2847                           ;main.c: 231: LATEbits.LE2 = 0;;
  2848  000E6E  948D               	bcf	3981,2,c	;volatile
  2849  000E70                     l6891:
  2850                           
  2851                           ; BSR set to: 0
  2852  000E70  0100               	movlb	0	; () banked
  2853  000E72  51D6               	movf	_plat2Left& (0+255),w,b
  2854  000E74  0100               	movlb	0	; () banked
  2855  000E76  11D2               	iorwf	_plat1Left& (0+255),w,b
  2856  000E78  0100               	movlb	0	; () banked
  2857  000E7A  6FBA               	movwf	??_main& (0+255),b
  2858  000E7C  0100               	movlb	0	; () banked
  2859  000E7E  51D7               	movf	(_plat2Left+1)& (0+255),w,b
  2860  000E80  0100               	movlb	0	; () banked
  2861  000E82  11D3               	iorwf	(_plat1Left+1)& (0+255),w,b
  2862  000E84  0100               	movlb	0	; () banked
  2863  000E86  6FBB               	movwf	(??_main+1)& (0+255),b
  2864  000E88  0100               	movlb	0	; () banked
  2865  000E8A  51D4               	movf	_plat1Right& (0+255),w,b
  2866  000E8C  0100               	movlb	0	; () banked
  2867  000E8E  13BA               	iorwf	??_main& (0+255),f,b
  2868  000E90  0100               	movlb	0	; () banked
  2869  000E92  51D5               	movf	(_plat1Right+1)& (0+255),w,b
  2870  000E94  0100               	movlb	0	; () banked
  2871  000E96  13BB               	iorwf	(??_main+1)& (0+255),f,b
  2872  000E98  0100               	movlb	0	; () banked
  2873  000E9A  51D8               	movf	_plat2Right& (0+255),w,b
  2874  000E9C  0100               	movlb	0	; () banked
  2875  000E9E  13BA               	iorwf	??_main& (0+255),f,b
  2876  000EA0  0100               	movlb	0	; () banked
  2877  000EA2  51D9               	movf	(_plat2Right+1)& (0+255),w,b
  2878  000EA4  0100               	movlb	0	; () banked
  2879  000EA6  13BB               	iorwf	(??_main+1)& (0+255),f,b
  2880  000EA8  0100               	movlb	0	; () banked
  2881  000EAA  51BA               	movf	??_main& (0+255),w,b
  2882  000EAC  0100               	movlb	0	; () banked
  2883  000EAE  11BB               	iorwf	(??_main+1)& (0+255),w,b
  2884  000EB0  B4D8               	btfsc	status,2,c
  2885  000EB2  D004               	goto	l6895
  2886                           
  2887                           ; BSR set to: 0
  2888  000EB4  0100               	movlb	0	; () banked
  2889  000EB6  05FC               	decf	_screenMode& (0+255),w,b
  2890  000EB8  B4D8               	btfsc	status,2,c
  2891  000EBA  D7DA               	goto	l6891
  2892  000EBC                     l6895:
  2893                           
  2894                           ; BSR set to: 0
  2895                           ;main.c: 235: if (doubleAA){
  2896  000EBC  0100               	movlb	0	; () banked
  2897  000EBE  51E6               	movf	_doubleAA& (0+255),w,b
  2898  000EC0  B4D8               	btfsc	status,2,c
  2899  000EC2  D00B               	goto	l6901
  2900                           
  2901                           ; BSR set to: 0
  2902                           ;main.c: 236: plat2Left = 512;
  2903  000EC4  0E02               	movlw	2
  2904  000EC6  0100               	movlb	0	; () banked
  2905  000EC8  6FD7               	movwf	(_plat2Left+1)& (0+255),b
  2906  000ECA  0E00               	movlw	0
  2907  000ECC  6FD6               	movwf	_plat2Left& (0+255),b
  2908                           
  2909                           ;main.c: 237: step2 = 1;
  2910  000ECE  0E01               	movlw	1
  2911  000ED0  6E4E               	movwf	_step2,c
  2912                           
  2913                           ; BSR set to: 0
  2914                           ;main.c: 238: turn2BackRight = plat2Left;
  2915  000ED2  C0D6  F0E0         	movff	_plat2Left,_turn2BackRight
  2916  000ED6  C0D7  F0E1         	movff	_plat2Left+1,_turn2BackRight+1
  2917  000EDA                     l6901:
  2918                           
  2919                           ; BSR set to: 0
  2920  000EDA  0100               	movlb	0	; () banked
  2921  000EDC  51D6               	movf	_plat2Left& (0+255),w,b
  2922  000EDE  0100               	movlb	0	; () banked
  2923  000EE0  11D7               	iorwf	(_plat2Left+1)& (0+255),w,b
  2924  000EE2  B4D8               	btfsc	status,2,c
  2925  000EE4  D004               	goto	l6905
  2926                           
  2927                           ; BSR set to: 0
  2928  000EE6  0100               	movlb	0	; () banked
  2929  000EE8  05FC               	decf	_screenMode& (0+255),w,b
  2930  000EEA  B4D8               	btfsc	status,2,c
  2931  000EEC  D7F6               	goto	l6901
  2932  000EEE                     l6905:
  2933                           
  2934                           ; BSR set to: 0
  2935                           ;main.c: 242: wait_2ms(500);
  2936  000EEE  0E01               	movlw	1
  2937  000EF0  6E32               	movwf	wait_2ms@x+1,c
  2938  000EF2  0EF4               	movlw	244
  2939  000EF4  6E31               	movwf	wait_2ms@x,c
  2940  000EF6  EC01  F01A         	call	_wait_2ms	;wreg free
  2941                           
  2942                           ;main.c: 244: if (((countC + countAA + count9V + countDrain) >= 15))
  2943  000EFA  0100               	movlb	0	; () banked
  2944  000EFC  51E3               	movf	_countAA& (0+255),w,b
  2945  000EFE  C0E4  F0BA         	movff	_countC,??_main
  2946  000F02  0100               	movlb	0	; () banked
  2947  000F04  6BBB               	clrf	(??_main+1)& (0+255),b
  2948  000F06  0100               	movlb	0	; () banked
  2949  000F08  27BA               	addwf	??_main& (0+255),f,b
  2950  000F0A  0E00               	movlw	0
  2951  000F0C  23BB               	addwfc	(??_main+1)& (0+255),f,b
  2952  000F0E  0100               	movlb	0	; () banked
  2953  000F10  51E2               	movf	_count9V& (0+255),w,b
  2954  000F12  0100               	movlb	0	; () banked
  2955  000F14  27BA               	addwf	??_main& (0+255),f,b
  2956  000F16  0E00               	movlw	0
  2957  000F18  23BB               	addwfc	(??_main+1)& (0+255),f,b
  2958  000F1A  0100               	movlb	0	; () banked
  2959  000F1C  51E5               	movf	_countDrain& (0+255),w,b
  2960  000F1E  0100               	movlb	0	; () banked
  2961  000F20  27BA               	addwf	??_main& (0+255),f,b
  2962  000F22  0E00               	movlw	0
  2963  000F24  23BB               	addwfc	(??_main+1)& (0+255),f,b
  2964  000F26  0100               	movlb	0	; () banked
  2965  000F28  BFBB               	btfsc	(??_main+1)& (0+255),7,b
  2966  000F2A  D009               	goto	l6911
  2967  000F2C  0100               	movlb	0	; () banked
  2968  000F2E  51BB               	movf	(??_main+1)& (0+255),w,b
  2969  000F30  E104               	bnz	u6710
  2970  000F32  0E0F               	movlw	15
  2971  000F34  0100               	movlb	0	; () banked
  2972  000F36  5DBA               	subwf	??_main& (0+255),w,b
  2973  000F38  B0D8               	btfsc	status,0,c
  2974  000F3A                     u6710:
  2975                           
  2976                           ; BSR set to: 0
  2977                           ;main.c: 245: stopOperation();
  2978  000F3A  EC07  F010         	call	_stopOperation	;wreg free
  2979  000F3E                     l6911:
  2980                           
  2981                           ;main.c: 247: LATCbits.LC1 = 1;;
  2982  000F3E  828B               	bsf	3979,1,c	;volatile
  2983                           
  2984                           ;main.c: 248: LATCbits.LC2 = 0;;
  2985  000F40  948B               	bcf	3979,2,c	;volatile
  2986                           
  2987                           ;main.c: 249: LATCbits.LC0 = 1;;
  2988  000F42  808B               	bsf	3979,0,c	;volatile
  2989                           
  2990                           ;main.c: 250: LATEbits.LE2 = 0;;
  2991  000F44  948D               	bcf	3981,2,c	;volatile
  2992                           
  2993                           ;main.c: 251: plat1Left = turn1BackLeft;
  2994  000F46  C0DA  F0D2         	movff	_turn1BackLeft,_plat1Left
  2995  000F4A  C0DB  F0D3         	movff	_turn1BackLeft+1,_plat1Left+1
  2996                           
  2997                           ;main.c: 252: plat1Right = turn1BackRight;
  2998  000F4E  C0DC  F0D4         	movff	_turn1BackRight,_plat1Right
  2999  000F52  C0DD  F0D5         	movff	_turn1BackRight+1,_plat1Right+1
  3000                           
  3001                           ;main.c: 253: plat2Left = turn2BackLeft;
  3002  000F56  C0DE  F0D6         	movff	_turn2BackLeft,_plat2Left
  3003  000F5A  C0DF  F0D7         	movff	_turn2BackLeft+1,_plat2Left+1
  3004                           
  3005                           ;main.c: 254: plat2Right = turn2BackRight;
  3006  000F5E  C0E0  F0D8         	movff	_turn2BackRight,_plat2Right
  3007  000F62  C0E1  F0D9         	movff	_turn2BackRight+1,_plat2Right+1
  3008                           
  3009                           ;main.c: 256: unsigned char steps = 0;
  3010  000F66  0E00               	movlw	0
  3011  000F68  0100               	movlb	0	; () banked
  3012  000F6A  6FC3               	movwf	main@steps_760& (0+255),b
  3013                           
  3014                           ;main.c: 257: while(steps<20 && screenMode==1){
  3015  000F6C  D016               	goto	l6939
  3016  000F6E                     l6929:
  3017                           
  3018                           ; BSR set to: 0
  3019                           ;main.c: 258: steps++;
  3020  000F6E  0100               	movlb	0	; () banked
  3021  000F70  2BC3               	incf	main@steps_760& (0+255),f,b
  3022                           
  3023                           ; BSR set to: 0
  3024                           ;main.c: 259: LATDbits.LD1 = 1;;
  3025  000F72  828C               	bsf	3980,1,c	;volatile
  3026                           
  3027                           ; BSR set to: 0
  3028                           ;main.c: 260: _delay((unsigned long)((5)*(10000000/4000.0)));
  3029  000F74  0E11               	movlw	17
  3030  000F76  0100               	movlb	0	; () banked
  3031  000F78  6FBA               	movwf	??_main& (0+255),b
  3032  000F7A  0E3A               	movlw	58
  3033  000F7C                     u7127:
  3034  000F7C  2EE8               	decfsz	wreg,f,c
  3035  000F7E  D7FE               	bra	u7127
  3036  000F80  2FBA               	decfsz	??_main& (0+255),f,b
  3037  000F82  D7FC               	bra	u7127
  3038  000F84  F000               	nop	
  3039                           
  3040                           ;main.c: 261: LATDbits.LD1 = 0;;
  3041  000F86  928C               	bcf	3980,1,c	;volatile
  3042                           
  3043                           ;main.c: 262: _delay((unsigned long)((5)*(10000000/4000.0)));
  3044  000F88  0E11               	movlw	17
  3045  000F8A  0100               	movlb	0	; () banked
  3046  000F8C  6FBA               	movwf	??_main& (0+255),b
  3047  000F8E  0E3A               	movlw	58
  3048  000F90                     u7137:
  3049  000F90  2EE8               	decfsz	wreg,f,c
  3050  000F92  D7FE               	bra	u7137
  3051  000F94  2FBA               	decfsz	??_main& (0+255),f,b
  3052  000F96  D7FC               	bra	u7137
  3053  000F98  F000               	nop	
  3054  000F9A                     l6939:
  3055  000F9A  0E14               	movlw	20
  3056  000F9C  0100               	movlb	0	; () banked
  3057  000F9E  61C3               	cpfslt	main@steps_760& (0+255),b
  3058  000FA0  D004               	goto	l6943
  3059                           
  3060                           ; BSR set to: 0
  3061  000FA2  0100               	movlb	0	; () banked
  3062  000FA4  05FC               	decf	_screenMode& (0+255),w,b
  3063  000FA6  B4D8               	btfsc	status,2,c
  3064  000FA8  D7E2               	goto	l6929
  3065  000FAA                     l6943:
  3066                           
  3067                           ; BSR set to: 0
  3068                           ;main.c: 263: }
  3069                           ;main.c: 264: steps = 0;
  3070  000FAA  0E00               	movlw	0
  3071  000FAC  0100               	movlb	0	; () banked
  3072  000FAE  6FC3               	movwf	main@steps_760& (0+255),b
  3073                           
  3074                           ;main.c: 265: while(steps < 178 && screenMode==1){
  3075  000FB0  D014               	goto	l6955
  3076  000FB2                     l6945:
  3077                           
  3078                           ; BSR set to: 0
  3079                           ;main.c: 266: steps++;
  3080  000FB2  0100               	movlb	0	; () banked
  3081  000FB4  2BC3               	incf	main@steps_760& (0+255),f,b
  3082                           
  3083                           ; BSR set to: 0
  3084                           ;main.c: 267: LATDbits.LD1 = 1;;
  3085  000FB6  828C               	bsf	3980,1,c	;volatile
  3086                           
  3087                           ; BSR set to: 0
  3088                           ;main.c: 268: _delay((unsigned long)((2)*(10000000/4000.0)));
  3089  000FB8  0E07               	movlw	7
  3090  000FBA  0100               	movlb	0	; () banked
  3091  000FBC  6FBA               	movwf	??_main& (0+255),b
  3092  000FBE  0E7D               	movlw	125
  3093  000FC0                     u7147:
  3094  000FC0  2EE8               	decfsz	wreg,f,c
  3095  000FC2  D7FE               	bra	u7147
  3096  000FC4  2FBA               	decfsz	??_main& (0+255),f,b
  3097  000FC6  D7FC               	bra	u7147
  3098                           
  3099                           ;main.c: 269: LATDbits.LD1 = 0;;
  3100  000FC8  928C               	bcf	3980,1,c	;volatile
  3101                           
  3102                           ;main.c: 270: _delay((unsigned long)((2)*(10000000/4000.0)));
  3103  000FCA  0E07               	movlw	7
  3104  000FCC  0100               	movlb	0	; () banked
  3105  000FCE  6FBA               	movwf	??_main& (0+255),b
  3106  000FD0  0E7D               	movlw	125
  3107  000FD2                     u7157:
  3108  000FD2  2EE8               	decfsz	wreg,f,c
  3109  000FD4  D7FE               	bra	u7157
  3110  000FD6  2FBA               	decfsz	??_main& (0+255),f,b
  3111  000FD8  D7FC               	bra	u7157
  3112  000FDA                     l6955:
  3113  000FDA  0EB2               	movlw	178
  3114  000FDC  0100               	movlb	0	; () banked
  3115  000FDE  61C3               	cpfslt	main@steps_760& (0+255),b
  3116  000FE0  D004               	goto	l6959
  3117                           
  3118                           ; BSR set to: 0
  3119  000FE2  0100               	movlb	0	; () banked
  3120  000FE4  05FC               	decf	_screenMode& (0+255),w,b
  3121  000FE6  B4D8               	btfsc	status,2,c
  3122  000FE8  D7E4               	goto	l6945
  3123  000FEA                     l6959:
  3124                           
  3125                           ; BSR set to: 0
  3126                           ;main.c: 271: }
  3127                           ;main.c: 272: steps = 0;
  3128  000FEA  0E00               	movlw	0
  3129  000FEC  0100               	movlb	0	; () banked
  3130  000FEE  6FC3               	movwf	main@steps_760& (0+255),b
  3131                           
  3132                           ;main.c: 273: while(steps<2 && screenMode==1){
  3133  000FF0  D016               	goto	l6971
  3134  000FF2                     l6961:
  3135                           
  3136                           ; BSR set to: 0
  3137                           ;main.c: 274: steps++;
  3138  000FF2  0100               	movlb	0	; () banked
  3139  000FF4  2BC3               	incf	main@steps_760& (0+255),f,b
  3140                           
  3141                           ; BSR set to: 0
  3142                           ;main.c: 275: LATDbits.LD1 = 1;;
  3143  000FF6  828C               	bsf	3980,1,c	;volatile
  3144                           
  3145                           ; BSR set to: 0
  3146                           ;main.c: 276: _delay((unsigned long)((5)*(10000000/4000.0)));
  3147  000FF8  0E11               	movlw	17
  3148  000FFA  0100               	movlb	0	; () banked
  3149  000FFC  6FBA               	movwf	??_main& (0+255),b
  3150  000FFE  0E3A               	movlw	58
  3151  001000                     u7167:
  3152  001000  2EE8               	decfsz	wreg,f,c
  3153  001002  D7FE               	bra	u7167
  3154  001004  2FBA               	decfsz	??_main& (0+255),f,b
  3155  001006  D7FC               	bra	u7167
  3156  001008  F000               	nop	
  3157                           
  3158                           ;main.c: 277: LATDbits.LD1 = 0;;
  3159  00100A  928C               	bcf	3980,1,c	;volatile
  3160                           
  3161                           ;main.c: 278: _delay((unsigned long)((5)*(10000000/4000.0)));
  3162  00100C  0E11               	movlw	17
  3163  00100E  0100               	movlb	0	; () banked
  3164  001010  6FBA               	movwf	??_main& (0+255),b
  3165  001012  0E3A               	movlw	58
  3166  001014                     u7177:
  3167  001014  2EE8               	decfsz	wreg,f,c
  3168  001016  D7FE               	bra	u7177
  3169  001018  2FBA               	decfsz	??_main& (0+255),f,b
  3170  00101A  D7FC               	bra	u7177
  3171  00101C  F000               	nop	
  3172  00101E                     l6971:
  3173  00101E  0E02               	movlw	2
  3174  001020  0100               	movlb	0	; () banked
  3175  001022  61C3               	cpfslt	main@steps_760& (0+255),b
  3176  001024  D004               	goto	l6975
  3177                           
  3178                           ; BSR set to: 0
  3179  001026  0100               	movlb	0	; () banked
  3180  001028  05FC               	decf	_screenMode& (0+255),w,b
  3181  00102A  B4D8               	btfsc	status,2,c
  3182  00102C  D7E2               	goto	l6961
  3183  00102E                     l6975:
  3184                           
  3185                           ; BSR set to: 0
  3186                           ;main.c: 279: }
  3187                           ;main.c: 280: steps = 0;
  3188  00102E  0E00               	movlw	0
  3189  001030  0100               	movlb	0	; () banked
  3190  001032  6FC3               	movwf	main@steps_760& (0+255),b
  3191  001034                     l6977:
  3192                           
  3193                           ; BSR set to: 0
  3194  001034  0100               	movlb	0	; () banked
  3195  001036  51D6               	movf	_plat2Left& (0+255),w,b
  3196  001038  0100               	movlb	0	; () banked
  3197  00103A  11D2               	iorwf	_plat1Left& (0+255),w,b
  3198  00103C  0100               	movlb	0	; () banked
  3199  00103E  6FBA               	movwf	??_main& (0+255),b
  3200  001040  0100               	movlb	0	; () banked
  3201  001042  51D7               	movf	(_plat2Left+1)& (0+255),w,b
  3202  001044  0100               	movlb	0	; () banked
  3203  001046  11D3               	iorwf	(_plat1Left+1)& (0+255),w,b
  3204  001048  0100               	movlb	0	; () banked
  3205  00104A  6FBB               	movwf	(??_main+1)& (0+255),b
  3206  00104C  0100               	movlb	0	; () banked
  3207  00104E  51D4               	movf	_plat1Right& (0+255),w,b
  3208  001050  0100               	movlb	0	; () banked
  3209  001052  13BA               	iorwf	??_main& (0+255),f,b
  3210  001054  0100               	movlb	0	; () banked
  3211  001056  51D5               	movf	(_plat1Right+1)& (0+255),w,b
  3212  001058  0100               	movlb	0	; () banked
  3213  00105A  13BB               	iorwf	(??_main+1)& (0+255),f,b
  3214  00105C  0100               	movlb	0	; () banked
  3215  00105E  51D8               	movf	_plat2Right& (0+255),w,b
  3216  001060  0100               	movlb	0	; () banked
  3217  001062  13BA               	iorwf	??_main& (0+255),f,b
  3218  001064  0100               	movlb	0	; () banked
  3219  001066  51D9               	movf	(_plat2Right+1)& (0+255),w,b
  3220  001068  0100               	movlb	0	; () banked
  3221  00106A  13BB               	iorwf	(??_main+1)& (0+255),f,b
  3222  00106C  0100               	movlb	0	; () banked
  3223  00106E  51BA               	movf	??_main& (0+255),w,b
  3224  001070  0100               	movlb	0	; () banked
  3225  001072  11BB               	iorwf	(??_main+1)& (0+255),w,b
  3226  001074  B4D8               	btfsc	status,2,c
  3227  001076  D004               	goto	l347
  3228                           
  3229                           ; BSR set to: 0
  3230  001078  0100               	movlb	0	; () banked
  3231  00107A  05FC               	decf	_screenMode& (0+255),w,b
  3232  00107C  B4D8               	btfsc	status,2,c
  3233  00107E  D7DA               	goto	l6977
  3234  001080                     l347:
  3235                           
  3236                           ; BSR set to: 0
  3237                           ;main.c: 284: LATDbits.LD1 = 0;;
  3238  001080  928C               	bcf	3980,1,c	;volatile
  3239                           
  3240                           ;main.c: 285: LATDbits.LD0= 0;;
  3241  001082  908C               	bcf	3980,0,c	;volatile
  3242                           
  3243                           ; BSR set to: 0
  3244                           ;main.c: 286: plat1Right = 0;
  3245  001084  0E00               	movlw	0
  3246  001086  0100               	movlb	0	; () banked
  3247  001088  6FD5               	movwf	(_plat1Right+1)& (0+255),b
  3248  00108A  0E00               	movlw	0
  3249  00108C  6FD4               	movwf	_plat1Right& (0+255),b
  3250                           
  3251                           ;main.c: 287: plat2Right = 0;
  3252  00108E  0E00               	movlw	0
  3253  001090  0100               	movlb	0	; () banked
  3254  001092  6FD9               	movwf	(_plat2Right+1)& (0+255),b
  3255  001094  0E00               	movlw	0
  3256  001096  6FD8               	movwf	_plat2Right& (0+255),b
  3257                           
  3258                           ;main.c: 288: plat1Left = 0;
  3259  001098  0E00               	movlw	0
  3260  00109A  0100               	movlb	0	; () banked
  3261  00109C  6FD3               	movwf	(_plat1Left+1)& (0+255),b
  3262  00109E  0E00               	movlw	0
  3263  0010A0  6FD2               	movwf	_plat1Left& (0+255),b
  3264                           
  3265                           ;main.c: 289: plat2Left = 0;
  3266  0010A2  0E00               	movlw	0
  3267  0010A4  0100               	movlb	0	; () banked
  3268  0010A6  6FD7               	movwf	(_plat2Left+1)& (0+255),b
  3269  0010A8  0E00               	movlw	0
  3270  0010AA  6FD6               	movwf	_plat2Left& (0+255),b
  3271                           
  3272                           ;main.c: 290: turn1BackRight = 0;
  3273  0010AC  0E00               	movlw	0
  3274  0010AE  0100               	movlb	0	; () banked
  3275  0010B0  6FDD               	movwf	(_turn1BackRight+1)& (0+255),b
  3276  0010B2  0E00               	movlw	0
  3277  0010B4  6FDC               	movwf	_turn1BackRight& (0+255),b
  3278                           
  3279                           ;main.c: 291: turn1BackLeft = 0;
  3280  0010B6  0E00               	movlw	0
  3281  0010B8  0100               	movlb	0	; () banked
  3282  0010BA  6FDB               	movwf	(_turn1BackLeft+1)& (0+255),b
  3283  0010BC  0E00               	movlw	0
  3284  0010BE  6FDA               	movwf	_turn1BackLeft& (0+255),b
  3285                           
  3286                           ;main.c: 292: turn2BackRight = 0;
  3287  0010C0  0E00               	movlw	0
  3288  0010C2  0100               	movlb	0	; () banked
  3289  0010C4  6FE1               	movwf	(_turn2BackRight+1)& (0+255),b
  3290  0010C6  0E00               	movlw	0
  3291  0010C8  6FE0               	movwf	_turn2BackRight& (0+255),b
  3292                           
  3293                           ;main.c: 293: turn2BackLeft = 0;
  3294  0010CA  0E00               	movlw	0
  3295  0010CC  0100               	movlb	0	; () banked
  3296  0010CE  6FDF               	movwf	(_turn2BackLeft+1)& (0+255),b
  3297  0010D0  0E00               	movlw	0
  3298  0010D2  6FDE               	movwf	_turn2BackLeft& (0+255),b
  3299                           
  3300                           ; BSR set to: 0
  3301                           ;main.c: 294: LATCbits.LC1 = 0;;
  3302  0010D4  928B               	bcf	3979,1,c	;volatile
  3303                           
  3304                           ; BSR set to: 0
  3305                           ;main.c: 295: LATCbits.LC2 = 0;;
  3306  0010D6  948B               	bcf	3979,2,c	;volatile
  3307                           
  3308                           ; BSR set to: 0
  3309                           ;main.c: 296: LATCbits.LC6 = 0;;
  3310  0010D8  9C8B               	bcf	3979,6,c	;volatile
  3311                           
  3312                           ; BSR set to: 0
  3313                           ;main.c: 297: LATCbits.LC5 = 0;;
  3314  0010DA  9A8B               	bcf	3979,5,c	;volatile
  3315                           
  3316                           ; BSR set to: 0
  3317                           ;main.c: 298: LATCbits.LC0 = 0;;
  3318  0010DC  908B               	bcf	3979,0,c	;volatile
  3319                           
  3320                           ; BSR set to: 0
  3321                           ;main.c: 299: LATEbits.LE2 = 0;;
  3322  0010DE  948D               	bcf	3981,2,c	;volatile
  3323                           
  3324                           ; BSR set to: 0
  3325                           ;main.c: 300: LATEbits.LE1 = 0;;
  3326  0010E0  928D               	bcf	3981,1,c	;volatile
  3327                           
  3328                           ; BSR set to: 0
  3329                           ;main.c: 301: LATAbits.LA4 = 0;;
  3330  0010E2  9889               	bcf	3977,4,c	;volatile
  3331                           
  3332                           ;main.c: 302: doubleAA = 0;
  3333  0010E4  0E00               	movlw	0
  3334  0010E6  0100               	movlb	0	; () banked
  3335  0010E8  6FE6               	movwf	_doubleAA& (0+255),b
  3336                           
  3337                           ;main.c: 303: sorting = 0;
  3338  0010EA  0E00               	movlw	0
  3339  0010EC  6E4C               	movwf	_sorting,c
  3340  0010EE                     l6999:
  3341                           
  3342                           ; BSR set to: 0
  3343                           ;main.c: 304: }
  3344                           ;main.c: 305: wait_2ms(250);
  3345  0010EE  0E00               	movlw	0
  3346  0010F0  6E32               	movwf	wait_2ms@x+1,c
  3347  0010F2  0EFA               	movlw	250
  3348  0010F4  6E31               	movwf	wait_2ms@x,c
  3349  0010F6  EC01  F01A         	call	_wait_2ms	;wreg free
  3350  0010FA                     l7001:
  3351  0010FA  0100               	movlb	0	; () banked
  3352  0010FC  05FC               	decf	_screenMode& (0+255),w,b
  3353  0010FE  A4D8               	btfss	status,2,c
  3354  001100  D017               	goto	l7009
  3355  001102  D5A7               	goto	l6777
  3356  001104                     l7003:
  3357                           
  3358                           ; BSR set to: 0
  3359                           ;main.c: 308: lcdInst(0b10000000);;
  3360  001104  0E80               	movlw	128
  3361  001106  EC65  F01A         	call	_lcdInst
  3362                           
  3363                           ;main.c: 309: printf("DONE! PRESS *   ");
  3364  00110A  0E34               	movlw	low STR_5
  3365  00110C  0100               	movlb	0	; () banked
  3366  00110E  6F89               	movwf	printf@f& (0+255),b
  3367  001110  0EFF               	movlw	high STR_5
  3368  001112  0100               	movlb	0	; () banked
  3369  001114  6F8A               	movwf	(printf@f+1)& (0+255),b
  3370  001116  EC09  F00B         	call	_printf	;wreg free
  3371                           
  3372                           ;main.c: 310: lcdInst(0b11000000);;
  3373  00111A  0EC0               	movlw	192
  3374  00111C  EC65  F01A         	call	_lcdInst
  3375                           
  3376                           ;main.c: 311: printf("TO CONTINUE     ");
  3377  001120  0E12               	movlw	low STR_6
  3378  001122  0100               	movlb	0	; () banked
  3379  001124  6F89               	movwf	printf@f& (0+255),b
  3380  001126  0EFF               	movlw	high STR_6
  3381  001128  0100               	movlb	0	; () banked
  3382  00112A  6F8A               	movwf	(printf@f+1)& (0+255),b
  3383  00112C  EC09  F00B         	call	_printf	;wreg free
  3384  001130                     l7009:
  3385  001130  0100               	movlb	0	; () banked
  3386  001132  51FC               	movf	_screenMode& (0+255),w,b
  3387  001134  A4D8               	btfss	status,2,c
  3388  001136  D01F               	goto	l7017
  3389  001138  D7E5               	goto	l7003
  3390  00113A                     l7011:
  3391                           
  3392                           ; BSR set to: 0
  3393                           ;main.c: 314: lcdInst(0b10000000);;
  3394  00113A  0E80               	movlw	128
  3395  00113C  EC65  F01A         	call	_lcdInst
  3396                           
  3397                           ;main.c: 315: printf("TOTAL RUN TIME: ");
  3398  001140  0E56               	movlw	low STR_7
  3399  001142  0100               	movlb	0	; () banked
  3400  001144  6F89               	movwf	printf@f& (0+255),b
  3401  001146  0EFF               	movlw	high STR_7
  3402  001148  0100               	movlb	0	; () banked
  3403  00114A  6F8A               	movwf	(printf@f+1)& (0+255),b
  3404  00114C  EC09  F00B         	call	_printf	;wreg free
  3405                           
  3406                           ;main.c: 316: lcdInst(0b11000000);;
  3407  001150  0EC0               	movlw	192
  3408  001152  EC65  F01A         	call	_lcdInst
  3409                           
  3410                           ;main.c: 317: printf("%02d:%02d               ", min, sec);
  3411  001156  0EA0               	movlw	low STR_8
  3412  001158  0100               	movlb	0	; () banked
  3413  00115A  6F89               	movwf	printf@f& (0+255),b
  3414  00115C  0EFD               	movlw	high STR_8
  3415  00115E  0100               	movlb	0	; () banked
  3416  001160  6F8A               	movwf	(printf@f+1)& (0+255),b
  3417  001162  C0E7  F08B         	movff	_min,?_printf+2
  3418  001166  0100               	movlb	0	; () banked
  3419  001168  6B8C               	clrf	(?_printf+3)& (0+255),b
  3420  00116A  C0ED  F08D         	movff	_sec,?_printf+4
  3421  00116E  0100               	movlb	0	; () banked
  3422  001170  6B8E               	clrf	(?_printf+5)& (0+255),b
  3423  001172  EC09  F00B         	call	_printf	;wreg free
  3424  001176                     l7017:
  3425  001176  0E03               	movlw	3
  3426  001178  0100               	movlb	0	; () banked
  3427  00117A  19FC               	xorwf	_screenMode& (0+255),w,b
  3428  00117C  A4D8               	btfss	status,2,c
  3429  00117E  D01B               	goto	l7025
  3430  001180  D7DC               	goto	l7011
  3431  001182                     l7019:
  3432                           
  3433                           ; BSR set to: 0
  3434                           ;main.c: 320: lcdInst(0b10000000);;
  3435  001182  0E80               	movlw	128
  3436  001184  EC65  F01A         	call	_lcdInst
  3437                           
  3438                           ;main.c: 321: printf("TOTAL # OF      ");
  3439  001188  0EF0               	movlw	low STR_9
  3440  00118A  0100               	movlb	0	; () banked
  3441  00118C  6F89               	movwf	printf@f& (0+255),b
  3442  00118E  0EFE               	movlw	high STR_9
  3443  001190  0100               	movlb	0	; () banked
  3444  001192  6F8A               	movwf	(printf@f+1)& (0+255),b
  3445  001194  EC09  F00B         	call	_printf	;wreg free
  3446                           
  3447                           ;main.c: 322: lcdInst(0b11000000);;
  3448  001198  0EC0               	movlw	192
  3449  00119A  EC65  F01A         	call	_lcdInst
  3450                           
  3451                           ;main.c: 323: printf("BATTERIES: %02d   ", numBats);
  3452  00119E  0E55               	movlw	low STR_10
  3453  0011A0  0100               	movlb	0	; () banked
  3454  0011A2  6F89               	movwf	printf@f& (0+255),b
  3455  0011A4  0EFE               	movlw	high STR_10
  3456  0011A6  0100               	movlb	0	; () banked
  3457  0011A8  6F8A               	movwf	(printf@f+1)& (0+255),b
  3458  0011AA  C0EA  F08B         	movff	_numBats,?_printf+2
  3459  0011AE  0100               	movlb	0	; () banked
  3460  0011B0  6B8C               	clrf	(?_printf+3)& (0+255),b
  3461  0011B2  EC09  F00B         	call	_printf	;wreg free
  3462  0011B6                     l7025:
  3463  0011B6  0E04               	movlw	4
  3464  0011B8  0100               	movlb	0	; () banked
  3465  0011BA  19FC               	xorwf	_screenMode& (0+255),w,b
  3466  0011BC  A4D8               	btfss	status,2,c
  3467  0011BE  D01B               	goto	l7033
  3468  0011C0  D7E0               	goto	l7019
  3469  0011C2                     l7027:
  3470                           
  3471                           ; BSR set to: 0
  3472                           ;main.c: 326: lcdInst(0b10000000);;
  3473  0011C2  0E80               	movlw	128
  3474  0011C4  EC65  F01A         	call	_lcdInst
  3475                           
  3476                           ;main.c: 327: printf("# OF C          ");
  3477  0011C8  0E8A               	movlw	low STR_11
  3478  0011CA  0100               	movlb	0	; () banked
  3479  0011CC  6F89               	movwf	printf@f& (0+255),b
  3480  0011CE  0EFE               	movlw	high STR_11
  3481  0011D0  0100               	movlb	0	; () banked
  3482  0011D2  6F8A               	movwf	(printf@f+1)& (0+255),b
  3483  0011D4  EC09  F00B         	call	_printf	;wreg free
  3484                           
  3485                           ;main.c: 328: lcdInst(0b11000000);;
  3486  0011D8  0EC0               	movlw	192
  3487  0011DA  EC65  F01A         	call	_lcdInst
  3488                           
  3489                           ;main.c: 329: printf("BATTERIES: %02d   ", numC);
  3490  0011DE  0E55               	movlw	low STR_10
  3491  0011E0  0100               	movlb	0	; () banked
  3492  0011E2  6F89               	movwf	printf@f& (0+255),b
  3493  0011E4  0EFE               	movlw	high STR_10
  3494  0011E6  0100               	movlb	0	; () banked
  3495  0011E8  6F8A               	movwf	(printf@f+1)& (0+255),b
  3496  0011EA  C0EB  F08B         	movff	_numC,?_printf+2
  3497  0011EE  0100               	movlb	0	; () banked
  3498  0011F0  6B8C               	clrf	(?_printf+3)& (0+255),b
  3499  0011F2  EC09  F00B         	call	_printf	;wreg free
  3500  0011F6                     l7033:
  3501  0011F6  0E05               	movlw	5
  3502  0011F8  0100               	movlb	0	; () banked
  3503  0011FA  19FC               	xorwf	_screenMode& (0+255),w,b
  3504  0011FC  A4D8               	btfss	status,2,c
  3505  0011FE  D01B               	goto	l7041
  3506  001200  D7E0               	goto	l7027
  3507  001202                     l7035:
  3508                           
  3509                           ; BSR set to: 0
  3510                           ;main.c: 332: lcdInst(0b10000000);;
  3511  001202  0E80               	movlw	128
  3512  001204  EC65  F01A         	call	_lcdInst
  3513                           
  3514                           ;main.c: 333: printf("# OF 9V         ");
  3515  001208  0EAC               	movlw	low STR_13
  3516  00120A  0100               	movlb	0	; () banked
  3517  00120C  6F89               	movwf	printf@f& (0+255),b
  3518  00120E  0EFE               	movlw	high STR_13
  3519  001210  0100               	movlb	0	; () banked
  3520  001212  6F8A               	movwf	(printf@f+1)& (0+255),b
  3521  001214  EC09  F00B         	call	_printf	;wreg free
  3522                           
  3523                           ;main.c: 334: lcdInst(0b11000000);;
  3524  001218  0EC0               	movlw	192
  3525  00121A  EC65  F01A         	call	_lcdInst
  3526                           
  3527                           ;main.c: 335: printf("BATTERIES: %02d     ", num9V);
  3528  00121E  0E2C               	movlw	low STR_14
  3529  001220  0100               	movlb	0	; () banked
  3530  001222  6F89               	movwf	printf@f& (0+255),b
  3531  001224  0EFE               	movlw	high STR_14
  3532  001226  0100               	movlb	0	; () banked
  3533  001228  6F8A               	movwf	(printf@f+1)& (0+255),b
  3534  00122A  C0E8  F08B         	movff	_num9V,?_printf+2
  3535  00122E  0100               	movlb	0	; () banked
  3536  001230  6B8C               	clrf	(?_printf+3)& (0+255),b
  3537  001232  EC09  F00B         	call	_printf	;wreg free
  3538  001236                     l7041:
  3539  001236  0E06               	movlw	6
  3540  001238  0100               	movlb	0	; () banked
  3541  00123A  19FC               	xorwf	_screenMode& (0+255),w,b
  3542  00123C  A4D8               	btfss	status,2,c
  3543  00123E  D01B               	goto	l7049
  3544  001240  D7E0               	goto	l7035
  3545  001242                     l7043:
  3546                           
  3547                           ; BSR set to: 0
  3548                           ;main.c: 338: lcdInst(0b10000000);;
  3549  001242  0E80               	movlw	128
  3550  001244  EC65  F01A         	call	_lcdInst
  3551                           
  3552                           ;main.c: 339: printf("# OF AA         ");
  3553  001248  0E9B               	movlw	low STR_15
  3554  00124A  0100               	movlb	0	; () banked
  3555  00124C  6F89               	movwf	printf@f& (0+255),b
  3556  00124E  0EFE               	movlw	high STR_15
  3557  001250  0100               	movlb	0	; () banked
  3558  001252  6F8A               	movwf	(printf@f+1)& (0+255),b
  3559  001254  EC09  F00B         	call	_printf	;wreg free
  3560                           
  3561                           ;main.c: 340: lcdInst(0b11000000);;
  3562  001258  0EC0               	movlw	192
  3563  00125A  EC65  F01A         	call	_lcdInst
  3564                           
  3565                           ;main.c: 341: printf("BATTERIES: %02d     ", numAA);
  3566  00125E  0E2C               	movlw	low STR_14
  3567  001260  0100               	movlb	0	; () banked
  3568  001262  6F89               	movwf	printf@f& (0+255),b
  3569  001264  0EFE               	movlw	high STR_14
  3570  001266  0100               	movlb	0	; () banked
  3571  001268  6F8A               	movwf	(printf@f+1)& (0+255),b
  3572  00126A  C0E9  F08B         	movff	_numAA,?_printf+2
  3573  00126E  0100               	movlb	0	; () banked
  3574  001270  6B8C               	clrf	(?_printf+3)& (0+255),b
  3575  001272  EC09  F00B         	call	_printf	;wreg free
  3576  001276                     l7049:
  3577  001276  0E07               	movlw	7
  3578  001278  0100               	movlb	0	; () banked
  3579  00127A  19FC               	xorwf	_screenMode& (0+255),w,b
  3580  00127C  A4D8               	btfss	status,2,c
  3581  00127E  D01B               	goto	l7057
  3582  001280  D7E0               	goto	l7043
  3583  001282                     l7051:
  3584                           
  3585                           ; BSR set to: 0
  3586                           ;main.c: 344: lcdInst(0b10000000);;
  3587  001282  0E80               	movlw	128
  3588  001284  EC65  F01A         	call	_lcdInst
  3589                           
  3590                           ;main.c: 345: printf("# OF DRAINED    ");
  3591  001288  0E23               	movlw	low STR_17
  3592  00128A  0100               	movlb	0	; () banked
  3593  00128C  6F89               	movwf	printf@f& (0+255),b
  3594  00128E  0EFF               	movlw	high STR_17
  3595  001290  0100               	movlb	0	; () banked
  3596  001292  6F8A               	movwf	(printf@f+1)& (0+255),b
  3597  001294  EC09  F00B         	call	_printf	;wreg free
  3598                           
  3599                           ;main.c: 346: lcdInst(0b11000000);;
  3600  001298  0EC0               	movlw	192
  3601  00129A  EC65  F01A         	call	_lcdInst
  3602                           
  3603                           ;main.c: 347: printf("BATTERIES: %02d     ", numDrain);
  3604  00129E  0E2C               	movlw	low STR_14
  3605  0012A0  0100               	movlb	0	; () banked
  3606  0012A2  6F89               	movwf	printf@f& (0+255),b
  3607  0012A4  0EFE               	movlw	high STR_14
  3608  0012A6  0100               	movlb	0	; () banked
  3609  0012A8  6F8A               	movwf	(printf@f+1)& (0+255),b
  3610  0012AA  C0EC  F08B         	movff	_numDrain,?_printf+2
  3611  0012AE  0100               	movlb	0	; () banked
  3612  0012B0  6B8C               	clrf	(?_printf+3)& (0+255),b
  3613  0012B2  EC09  F00B         	call	_printf	;wreg free
  3614  0012B6                     l7057:
  3615  0012B6  0E08               	movlw	8
  3616  0012B8  0100               	movlb	0	; () banked
  3617  0012BA  19FC               	xorwf	_screenMode& (0+255),w,b
  3618  0012BC  A4D8               	btfss	status,2,c
  3619  0012BE  D06F               	goto	l7097
  3620  0012C0  D7E0               	goto	l7051
  3621  0012C2                     l7059:
  3622                           
  3623                           ; BSR set to: 0
  3624                           ;main.c: 350: lcdInst(0b10000000);;
  3625  0012C2  0E80               	movlw	128
  3626  0012C4  EC65  F01A         	call	_lcdInst
  3627                           
  3628                           ;main.c: 351: printf("LAST RUN:       ");
  3629  0012C8  0ECE               	movlw	low STR_19
  3630  0012CA  0100               	movlb	0	; () banked
  3631  0012CC  6F89               	movwf	printf@f& (0+255),b
  3632  0012CE  0EFE               	movlw	high STR_19
  3633  0012D0  0100               	movlb	0	; () banked
  3634  0012D2  6F8A               	movwf	(printf@f+1)& (0+255),b
  3635  0012D4  EC09  F00B         	call	_printf	;wreg free
  3636                           
  3637                           ;main.c: 352: lcdInst(0b11000000);;
  3638  0012D8  0EC0               	movlw	192
  3639  0012DA  EC65  F01A         	call	_lcdInst
  3640                           
  3641                           ;main.c: 353: printf("%02x/%02x/%02x        ", lastRunRTC[6],lastRunRTC[5],lastRunRTC[4]
      +                          );
  3642  0012DE  0EB9               	movlw	low STR_20
  3643  0012E0  0100               	movlb	0	; () banked
  3644  0012E2  6F89               	movwf	printf@f& (0+255),b
  3645  0012E4  0EFD               	movlw	high STR_20
  3646  0012E6  0100               	movlb	0	; () banked
  3647  0012E8  6F8A               	movwf	(printf@f+1)& (0+255),b
  3648  0012EA  C0CA  F08B         	movff	_lastRunRTC+6,?_printf+2
  3649  0012EE  0100               	movlb	0	; () banked
  3650  0012F0  6B8C               	clrf	(?_printf+3)& (0+255),b
  3651  0012F2  C0C9  F08D         	movff	_lastRunRTC+5,?_printf+4
  3652  0012F6  0100               	movlb	0	; () banked
  3653  0012F8  6B8E               	clrf	(?_printf+5)& (0+255),b
  3654  0012FA  C0C8  F08F         	movff	_lastRunRTC+4,?_printf+6
  3655  0012FE  0100               	movlb	0	; () banked
  3656  001300  6B90               	clrf	(?_printf+7)& (0+255),b
  3657  001302  EC09  F00B         	call	_printf	;wreg free
  3658                           
  3659                           ;main.c: 354: for(unsigned char i=0;i<200;i++){
  3660  001306  0E00               	movlw	0
  3661  001308  0100               	movlb	0	; () banked
  3662  00130A  6FBF               	movwf	main@i_785& (0+255),b
  3663  00130C                     l7067:
  3664                           
  3665                           ; BSR set to: 0
  3666  00130C  0EC7               	movlw	199
  3667  00130E  0100               	movlb	0	; () banked
  3668  001310  65BF               	cpfsgt	main@i_785& (0+255),b
  3669  001312  D001               	goto	l7071
  3670  001314  D011               	goto	l7079
  3671  001316                     l7071:
  3672                           
  3673                           ; BSR set to: 0
  3674                           ;main.c: 355: if (screenMode != 9)
  3675  001316  0E09               	movlw	9
  3676  001318  0100               	movlb	0	; () banked
  3677  00131A  19FC               	xorwf	_screenMode& (0+255),w,b
  3678  00131C  A4D8               	btfss	status,2,c
  3679  00131E  D00C               	goto	l7079
  3680                           
  3681                           ; BSR set to: 0
  3682                           ;main.c: 357: _delay((unsigned long)((10)*(10000000/4000.0)));
  3683                           
  3684                           ; BSR set to: 0
  3685                           
  3686                           ; BSR set to: 0
  3687                           ;main.c: 356: break;
  3688  001320  0E21               	movlw	33
  3689  001322  0100               	movlb	0	; () banked
  3690  001324  6FBA               	movwf	??_main& (0+255),b
  3691  001326  0E76               	movlw	118
  3692  001328                     u7187:
  3693  001328  2EE8               	decfsz	wreg,f,c
  3694  00132A  D7FE               	bra	u7187
  3695  00132C  2FBA               	decfsz	??_main& (0+255),f,b
  3696  00132E  D7FC               	bra	u7187
  3697  001330  F000               	nop	
  3698  001332  0100               	movlb	0	; () banked
  3699  001334  2BBF               	incf	main@i_785& (0+255),f,b
  3700  001336  D7EA               	goto	l7067
  3701  001338                     l7079:
  3702                           
  3703                           ; BSR set to: 0
  3704                           ;main.c: 358: }
  3705                           ;main.c: 359: lcdInst(0b10000000);;
  3706  001338  0E80               	movlw	128
  3707  00133A  EC65  F01A         	call	_lcdInst
  3708                           
  3709                           ;main.c: 360: lcdInst(0b11000000);;
  3710  00133E  0EC0               	movlw	192
  3711  001340  EC65  F01A         	call	_lcdInst
  3712                           
  3713                           ;main.c: 361: printf("%02x:%02x:%02x        ", lastRunRTC[2],lastRunRTC[1],lastRunRTC[0]
      +                          );
  3714  001344  0ED0               	movlw	low STR_21
  3715  001346  0100               	movlb	0	; () banked
  3716  001348  6F89               	movwf	printf@f& (0+255),b
  3717  00134A  0EFD               	movlw	high STR_21
  3718  00134C  0100               	movlb	0	; () banked
  3719  00134E  6F8A               	movwf	(printf@f+1)& (0+255),b
  3720  001350  C0C6  F08B         	movff	_lastRunRTC+2,?_printf+2
  3721  001354  0100               	movlb	0	; () banked
  3722  001356  6B8C               	clrf	(?_printf+3)& (0+255),b
  3723  001358  C0C5  F08D         	movff	_lastRunRTC+1,?_printf+4
  3724  00135C  0100               	movlb	0	; () banked
  3725  00135E  6B8E               	clrf	(?_printf+5)& (0+255),b
  3726  001360  C0C4  F08F         	movff	_lastRunRTC,?_printf+6
  3727  001364  0100               	movlb	0	; () banked
  3728  001366  6B90               	clrf	(?_printf+7)& (0+255),b
  3729  001368  EC09  F00B         	call	_printf	;wreg free
  3730                           
  3731                           ;main.c: 362: for(unsigned char i=0;i<200;i++){
  3732  00136C  0E00               	movlw	0
  3733  00136E  0100               	movlb	0	; () banked
  3734  001370  6FC0               	movwf	main@i_787& (0+255),b
  3735  001372                     l7085:
  3736                           
  3737                           ; BSR set to: 0
  3738  001372  0EC7               	movlw	199
  3739  001374  0100               	movlb	0	; () banked
  3740  001376  65C0               	cpfsgt	main@i_787& (0+255),b
  3741  001378  D001               	goto	l7089
  3742  00137A  D011               	goto	l7097
  3743  00137C                     l7089:
  3744                           
  3745                           ; BSR set to: 0
  3746                           ;main.c: 363: if (screenMode != 9)
  3747  00137C  0E09               	movlw	9
  3748  00137E  0100               	movlb	0	; () banked
  3749  001380  19FC               	xorwf	_screenMode& (0+255),w,b
  3750  001382  A4D8               	btfss	status,2,c
  3751  001384  D00C               	goto	l7097
  3752                           
  3753                           ; BSR set to: 0
  3754                           ;main.c: 365: _delay((unsigned long)((10)*(10000000/4000.0)));
  3755                           
  3756                           ; BSR set to: 0
  3757                           
  3758                           ; BSR set to: 0
  3759                           ;main.c: 364: break;
  3760  001386  0E21               	movlw	33
  3761  001388  0100               	movlb	0	; () banked
  3762  00138A  6FBA               	movwf	??_main& (0+255),b
  3763  00138C  0E76               	movlw	118
  3764  00138E                     u7197:
  3765  00138E  2EE8               	decfsz	wreg,f,c
  3766  001390  D7FE               	bra	u7197
  3767  001392  2FBA               	decfsz	??_main& (0+255),f,b
  3768  001394  D7FC               	bra	u7197
  3769  001396  F000               	nop	
  3770  001398  0100               	movlb	0	; () banked
  3771  00139A  2BC0               	incf	main@i_787& (0+255),f,b
  3772  00139C  D7EA               	goto	l7085
  3773  00139E                     l7097:
  3774                           
  3775                           ; BSR set to: 0
  3776  00139E  0E09               	movlw	9
  3777  0013A0  0100               	movlb	0	; () banked
  3778  0013A2  19FC               	xorwf	_screenMode& (0+255),w,b
  3779  0013A4  A4D8               	btfss	status,2,c
  3780  0013A6  D021               	goto	l7105
  3781  0013A8  D78C               	goto	l7059
  3782  0013AA                     l7099:
  3783                           
  3784                           ; BSR set to: 0
  3785                           ;main.c: 369: lcdInst(0b10000000);;
  3786  0013AA  0E80               	movlw	128
  3787  0013AC  EC65  F01A         	call	_lcdInst
  3788                           
  3789                           ;main.c: 370: printf("PERMANENT LOG A:");
  3790  0013B0  0E89               	movlw	low STR_22
  3791  0013B2  0100               	movlb	0	; () banked
  3792  0013B4  6F89               	movwf	printf@f& (0+255),b
  3793  0013B6  0EFF               	movlw	high STR_22
  3794  0013B8  0100               	movlb	0	; () banked
  3795  0013BA  6F8A               	movwf	(printf@f+1)& (0+255),b
  3796  0013BC  EC09  F00B         	call	_printf	;wreg free
  3797                           
  3798                           ;main.c: 371: lcdInst(0b11000000);;
  3799  0013C0  0EC0               	movlw	192
  3800  0013C2  EC65  F01A         	call	_lcdInst
  3801                           
  3802                           ;main.c: 372: printf("                ");
  3803  0013C6  0E79               	movlw	low STR_23
  3804  0013C8  0100               	movlb	0	; () banked
  3805  0013CA  6F89               	movwf	printf@f& (0+255),b
  3806  0013CC  0EFE               	movlw	high STR_23
  3807  0013CE  0100               	movlb	0	; () banked
  3808  0013D0  6F8A               	movwf	(printf@f+1)& (0+255),b
  3809  0013D2  EC09  F00B         	call	_printf	;wreg free
  3810                           
  3811                           ;main.c: 373: show_log(1, 10);
  3812  0013D6  0E00               	movlw	0
  3813  0013D8  0100               	movlb	0	; () banked
  3814  0013DA  6FA0               	movwf	(show_log@log_address+1)& (0+255),b
  3815  0013DC  0E01               	movlw	1
  3816  0013DE  6F9F               	movwf	show_log@log_address& (0+255),b
  3817  0013E0  0E0A               	movlw	10
  3818  0013E2  0100               	movlb	0	; () banked
  3819  0013E4  6FA1               	movwf	show_log@currScreen& (0+255),b
  3820  0013E6  ECE3  F00C         	call	_show_log	;wreg free
  3821  0013EA                     l7105:
  3822  0013EA  0E0A               	movlw	10
  3823  0013EC  0100               	movlb	0	; () banked
  3824  0013EE  19FC               	xorwf	_screenMode& (0+255),w,b
  3825  0013F0  A4D8               	btfss	status,2,c
  3826  0013F2  D021               	goto	l7113
  3827  0013F4  D7DA               	goto	l7099
  3828  0013F6                     l7107:
  3829                           
  3830                           ; BSR set to: 0
  3831                           ;main.c: 376: lcdInst(0b10000000);;
  3832  0013F6  0E80               	movlw	128
  3833  0013F8  EC65  F01A         	call	_lcdInst
  3834                           
  3835                           ;main.c: 377: printf("PERMANENT LOG B:");
  3836  0013FC  0E9A               	movlw	low STR_24
  3837  0013FE  0100               	movlb	0	; () banked
  3838  001400  6F89               	movwf	printf@f& (0+255),b
  3839  001402  0EFF               	movlw	high STR_24
  3840  001404  0100               	movlb	0	; () banked
  3841  001406  6F8A               	movwf	(printf@f+1)& (0+255),b
  3842  001408  EC09  F00B         	call	_printf	;wreg free
  3843                           
  3844                           ;main.c: 378: lcdInst(0b11000000);;
  3845  00140C  0EC0               	movlw	192
  3846  00140E  EC65  F01A         	call	_lcdInst
  3847                           
  3848                           ;main.c: 379: printf("                ");
  3849  001412  0E79               	movlw	low STR_23
  3850  001414  0100               	movlb	0	; () banked
  3851  001416  6F89               	movwf	printf@f& (0+255),b
  3852  001418  0EFE               	movlw	high STR_23
  3853  00141A  0100               	movlb	0	; () banked
  3854  00141C  6F8A               	movwf	(printf@f+1)& (0+255),b
  3855  00141E  EC09  F00B         	call	_printf	;wreg free
  3856                           
  3857                           ;main.c: 380: show_log(97, 11);
  3858  001422  0E00               	movlw	0
  3859  001424  0100               	movlb	0	; () banked
  3860  001426  6FA0               	movwf	(show_log@log_address+1)& (0+255),b
  3861  001428  0E61               	movlw	97
  3862  00142A  6F9F               	movwf	show_log@log_address& (0+255),b
  3863  00142C  0E0B               	movlw	11
  3864  00142E  0100               	movlb	0	; () banked
  3865  001430  6FA1               	movwf	show_log@currScreen& (0+255),b
  3866  001432  ECE3  F00C         	call	_show_log	;wreg free
  3867  001436                     l7113:
  3868  001436  0E0B               	movlw	11
  3869  001438  0100               	movlb	0	; () banked
  3870  00143A  19FC               	xorwf	_screenMode& (0+255),w,b
  3871  00143C  A4D8               	btfss	status,2,c
  3872  00143E  D021               	goto	l7121
  3873  001440  D7DA               	goto	l7107
  3874  001442                     l7115:
  3875                           
  3876                           ; BSR set to: 0
  3877                           ;main.c: 383: lcdInst(0b10000000);;
  3878  001442  0E80               	movlw	128
  3879  001444  EC65  F01A         	call	_lcdInst
  3880                           
  3881                           ;main.c: 384: printf("PERMANENT LOG C:");
  3882  001448  0EAB               	movlw	low STR_26
  3883  00144A  0100               	movlb	0	; () banked
  3884  00144C  6F89               	movwf	printf@f& (0+255),b
  3885  00144E  0EFF               	movlw	high STR_26
  3886  001450  0100               	movlb	0	; () banked
  3887  001452  6F8A               	movwf	(printf@f+1)& (0+255),b
  3888  001454  EC09  F00B         	call	_printf	;wreg free
  3889                           
  3890                           ;main.c: 385: lcdInst(0b11000000);;
  3891  001458  0EC0               	movlw	192
  3892  00145A  EC65  F01A         	call	_lcdInst
  3893                           
  3894                           ;main.c: 386: printf("                ");
  3895  00145E  0E79               	movlw	low STR_23
  3896  001460  0100               	movlb	0	; () banked
  3897  001462  6F89               	movwf	printf@f& (0+255),b
  3898  001464  0EFE               	movlw	high STR_23
  3899  001466  0100               	movlb	0	; () banked
  3900  001468  6F8A               	movwf	(printf@f+1)& (0+255),b
  3901  00146A  EC09  F00B         	call	_printf	;wreg free
  3902                           
  3903                           ;main.c: 387: show_log(193, 12);
  3904  00146E  0E00               	movlw	0
  3905  001470  0100               	movlb	0	; () banked
  3906  001472  6FA0               	movwf	(show_log@log_address+1)& (0+255),b
  3907  001474  0EC1               	movlw	193
  3908  001476  6F9F               	movwf	show_log@log_address& (0+255),b
  3909  001478  0E0C               	movlw	12
  3910  00147A  0100               	movlb	0	; () banked
  3911  00147C  6FA1               	movwf	show_log@currScreen& (0+255),b
  3912  00147E  ECE3  F00C         	call	_show_log	;wreg free
  3913  001482                     l7121:
  3914  001482  0E0C               	movlw	12
  3915  001484  0100               	movlb	0	; () banked
  3916  001486  19FC               	xorwf	_screenMode& (0+255),w,b
  3917  001488  A4D8               	btfss	status,2,c
  3918  00148A  D021               	goto	l7129
  3919  00148C  D7DA               	goto	l7115
  3920  00148E                     l7123:
  3921                           
  3922                           ; BSR set to: 0
  3923                           ;main.c: 390: lcdInst(0b10000000);;
  3924  00148E  0E80               	movlw	128
  3925  001490  EC65  F01A         	call	_lcdInst
  3926                           
  3927                           ;main.c: 391: printf("PERMANENT LOG D:");
  3928  001494  0EBC               	movlw	low STR_28
  3929  001496  0100               	movlb	0	; () banked
  3930  001498  6F89               	movwf	printf@f& (0+255),b
  3931  00149A  0EFF               	movlw	high STR_28
  3932  00149C  0100               	movlb	0	; () banked
  3933  00149E  6F8A               	movwf	(printf@f+1)& (0+255),b
  3934  0014A0  EC09  F00B         	call	_printf	;wreg free
  3935                           
  3936                           ;main.c: 392: lcdInst(0b11000000);;
  3937  0014A4  0EC0               	movlw	192
  3938  0014A6  EC65  F01A         	call	_lcdInst
  3939                           
  3940                           ;main.c: 393: printf("                ");
  3941  0014AA  0E79               	movlw	low STR_23
  3942  0014AC  0100               	movlb	0	; () banked
  3943  0014AE  6F89               	movwf	printf@f& (0+255),b
  3944  0014B0  0EFE               	movlw	high STR_23
  3945  0014B2  0100               	movlb	0	; () banked
  3946  0014B4  6F8A               	movwf	(printf@f+1)& (0+255),b
  3947  0014B6  EC09  F00B         	call	_printf	;wreg free
  3948                           
  3949                           ;main.c: 394: show_log(289, 13);
  3950  0014BA  0E01               	movlw	1
  3951  0014BC  0100               	movlb	0	; () banked
  3952  0014BE  6FA0               	movwf	(show_log@log_address+1)& (0+255),b
  3953  0014C0  0E21               	movlw	33
  3954  0014C2  6F9F               	movwf	show_log@log_address& (0+255),b
  3955  0014C4  0E0D               	movlw	13
  3956  0014C6  0100               	movlb	0	; () banked
  3957  0014C8  6FA1               	movwf	show_log@currScreen& (0+255),b
  3958  0014CA  ECE3  F00C         	call	_show_log	;wreg free
  3959  0014CE                     l7129:
  3960  0014CE  0E0D               	movlw	13
  3961  0014D0  0100               	movlb	0	; () banked
  3962  0014D2  19FC               	xorwf	_screenMode& (0+255),w,b
  3963  0014D4  A4D8               	btfss	status,2,c
  3964  0014D6  D02B               	goto	l7143
  3965  0014D8  D7DA               	goto	l7123
  3966  0014DA                     l7131:
  3967                           
  3968                           ; BSR set to: 0
  3969                           ;main.c: 397: lcdInst(0b10000000);;
  3970  0014DA  0E80               	movlw	128
  3971  0014DC  EC65  F01A         	call	_lcdInst
  3972                           
  3973                           ;main.c: 398: printf("PRESS * TO      ");
  3974  0014E0  0E01               	movlw	low STR_30
  3975  0014E2  0100               	movlb	0	; () banked
  3976  0014E4  6F89               	movwf	printf@f& (0+255),b
  3977  0014E6  0EFF               	movlw	high STR_30
  3978  0014E8  0100               	movlb	0	; () banked
  3979  0014EA  6F8A               	movwf	(printf@f+1)& (0+255),b
  3980  0014EC  EC09  F00B         	call	_printf	;wreg free
  3981                           
  3982                           ;main.c: 399: lcdInst(0b11000000);;
  3983  0014F0  0EC0               	movlw	192
  3984  0014F2  EC65  F01A         	call	_lcdInst
  3985                           
  3986                           ;main.c: 400: printf("SEND DATA TO PC ");
  3987  0014F6  0E78               	movlw	low STR_31
  3988  0014F8  0100               	movlb	0	; () banked
  3989  0014FA  6F89               	movwf	printf@f& (0+255),b
  3990  0014FC  0EFF               	movlw	high STR_31
  3991  0014FE  0100               	movlb	0	; () banked
  3992  001500  6F8A               	movwf	(printf@f+1)& (0+255),b
  3993  001502  EC09  F00B         	call	_printf	;wreg free
  3994                           
  3995                           ;main.c: 401: unsigned char keypress = (PORTB & 0xF0) >> 4;
  3996  001506  3881               	swapf	3969,w,c	;volatile
  3997  001508  0B0F               	andlw	15
  3998  00150A  0B0F               	andlw	15
  3999  00150C  0100               	movlb	0	; () banked
  4000  00150E  6FBC               	movwf	main@keypress& (0+255),b
  4001                           
  4002                           ; BSR set to: 0
  4003                           ;main.c: 402: if (keys[keypress] == '*')
  4004  001510  0100               	movlb	0	; () banked
  4005  001512  51BC               	movf	main@keypress& (0+255),w,b
  4006  001514  0D01               	mullw	1
  4007  001516  0E7D               	movlw	low _keys
  4008  001518  24F3               	addwf	prodl,w,c
  4009  00151A  6EF6               	movwf	tblptrl,c
  4010  00151C  0EFD               	movlw	high _keys
  4011  00151E  20F4               	addwfc	prodh,w,c
  4012  001520  6EF7               	movwf	tblptrh,c
  4013  001522                     	if	0	;There are less than 3 active tblptr bytes
  4014  001522                     	endif
  4015  001522  0008               	tblrd		*
  4016  001524  50F5               	movf	tablat,w,c
  4017  001526  0A2A               	xorlw	42
  4018  001528  B4D8               	btfsc	status,2,c
  4019                           
  4020                           ; BSR set to: 0
  4021                           ;main.c: 403: logPC();
  4022  00152A  EC09  F000         	call	_logPC	;wreg free
  4023  00152E                     l7143:
  4024  00152E  0E0E               	movlw	14
  4025  001530  0100               	movlb	0	; () banked
  4026  001532  19FC               	xorwf	_screenMode& (0+255),w,b
  4027  001534  A4D8               	btfss	status,2,c
  4028  001536  D066               	goto	l7165
  4029  001538  D7D0               	goto	l7131
  4030  00153A                     l7145:
  4031                           
  4032                           ; BSR set to: 0
  4033                           ;main.c: 407: I2C_Master_Start();
  4034  00153A  EC89  F01A         	call	_I2C_Master_Start	;wreg free
  4035                           
  4036                           ;main.c: 408: I2C_Master_Write(0b11010000);
  4037  00153E  0E00               	movlw	0
  4038  001540  6E33               	movwf	I2C_Master_Write@d+1,c
  4039  001542  0ED0               	movlw	208
  4040  001544  6E32               	movwf	I2C_Master_Write@d,c
  4041  001546  EC77  F01A         	call	_I2C_Master_Write	;wreg free
  4042                           
  4043                           ;main.c: 409: I2C_Master_Write(0x00);
  4044  00154A  0E00               	movlw	0
  4045  00154C  6E33               	movwf	I2C_Master_Write@d+1,c
  4046  00154E  0E00               	movlw	0
  4047  001550  6E32               	movwf	I2C_Master_Write@d,c
  4048  001552  EC77  F01A         	call	_I2C_Master_Write	;wreg free
  4049                           
  4050                           ;main.c: 410: I2C_Master_Stop();
  4051  001556  EC85  F01A         	call	_I2C_Master_Stop	;wreg free
  4052                           
  4053                           ;main.c: 412: I2C_Master_Start();
  4054  00155A  EC89  F01A         	call	_I2C_Master_Start	;wreg free
  4055                           
  4056                           ;main.c: 413: I2C_Master_Write(0b11010001);
  4057  00155E  0E00               	movlw	0
  4058  001560  6E33               	movwf	I2C_Master_Write@d+1,c
  4059  001562  0ED1               	movlw	209
  4060  001564  6E32               	movwf	I2C_Master_Write@d,c
  4061  001566  EC77  F01A         	call	_I2C_Master_Write	;wreg free
  4062                           
  4063                           ;main.c: 414: for(unsigned char i=0;i<0x06;i++){
  4064  00156A  0E00               	movlw	0
  4065  00156C  0100               	movlb	0	; () banked
  4066  00156E  6FC1               	movwf	main@i_802& (0+255),b
  4067  001570                     l7149:
  4068                           
  4069                           ; BSR set to: 0
  4070  001570  0E05               	movlw	5
  4071  001572  0100               	movlb	0	; () banked
  4072  001574  65C1               	cpfsgt	main@i_802& (0+255),b
  4073  001576  D001               	goto	l7153
  4074  001578  D010               	goto	l7159
  4075  00157A                     l7153:
  4076                           
  4077                           ; BSR set to: 0
  4078                           ;main.c: 415: realTime[i] = I2C_Master_Read(1);
  4079  00157A  0100               	movlb	0	; () banked
  4080  00157C  51C1               	movf	main@i_802& (0+255),w,b
  4081  00157E  0D01               	mullw	1
  4082  001580  0ECB               	movlw	low _realTime
  4083  001582  24F3               	addwf	prodl,w,c
  4084  001584  6ED9               	movwf	fsr2l,c
  4085  001586  0E00               	movlw	high _realTime
  4086  001588  20F4               	addwfc	prodh,w,c
  4087  00158A  6EDA               	movwf	fsr2h,c
  4088  00158C  0E01               	movlw	1
  4089  00158E  EC87  F019         	call	_I2C_Master_Read
  4090  001592  6EDF               	movwf	indf2,c
  4091  001594  0100               	movlb	0	; () banked
  4092  001596  2BC1               	incf	main@i_802& (0+255),f,b
  4093  001598  D7EB               	goto	l7149
  4094  00159A                     l7159:
  4095                           
  4096                           ; BSR set to: 0
  4097                           ;main.c: 416: }
  4098                           ;main.c: 417: realTime[6] = I2C_Master_Read(0);
  4099  00159A  0E00               	movlw	0
  4100  00159C  EC87  F019         	call	_I2C_Master_Read
  4101  0015A0  0100               	movlb	0	; () banked
  4102  0015A2  6FD1               	movwf	(_realTime+6)& (0+255),b
  4103                           
  4104                           ;main.c: 418: I2C_Master_Stop();
  4105  0015A4  EC85  F01A         	call	_I2C_Master_Stop	;wreg free
  4106                           
  4107                           ;main.c: 419: lcdInst(0b10000000);;
  4108  0015A8  0E80               	movlw	128
  4109  0015AA  EC65  F01A         	call	_lcdInst
  4110                           
  4111                           ;main.c: 420: printf("DATE: %02x/%02x/%02x  ", realTime[6],realTime[5],realTime[4]);
  4112  0015AE  0EE7               	movlw	low STR_32
  4113  0015B0  0100               	movlb	0	; () banked
  4114  0015B2  6F89               	movwf	printf@f& (0+255),b
  4115  0015B4  0EFD               	movlw	high STR_32
  4116  0015B6  0100               	movlb	0	; () banked
  4117  0015B8  6F8A               	movwf	(printf@f+1)& (0+255),b
  4118  0015BA  C0D1  F08B         	movff	_realTime+6,?_printf+2
  4119  0015BE  0100               	movlb	0	; () banked
  4120  0015C0  6B8C               	clrf	(?_printf+3)& (0+255),b
  4121  0015C2  C0D0  F08D         	movff	_realTime+5,?_printf+4
  4122  0015C6  0100               	movlb	0	; () banked
  4123  0015C8  6B8E               	clrf	(?_printf+5)& (0+255),b
  4124  0015CA  C0CF  F08F         	movff	_realTime+4,?_printf+6
  4125  0015CE  0100               	movlb	0	; () banked
  4126  0015D0  6B90               	clrf	(?_printf+7)& (0+255),b
  4127  0015D2  EC09  F00B         	call	_printf	;wreg free
  4128                           
  4129                           ;main.c: 421: lcdInst(0b11000000);;
  4130  0015D6  0EC0               	movlw	192
  4131  0015D8  EC65  F01A         	call	_lcdInst
  4132                           
  4133                           ;main.c: 422: printf("TIME: %02x:%02x:%02x  ", realTime[2],realTime[1],realTime[0]);
  4134  0015DC  0EFE               	movlw	low STR_33
  4135  0015DE  0100               	movlb	0	; () banked
  4136  0015E0  6F89               	movwf	printf@f& (0+255),b
  4137  0015E2  0EFD               	movlw	high STR_33
  4138  0015E4  0100               	movlb	0	; () banked
  4139  0015E6  6F8A               	movwf	(printf@f+1)& (0+255),b
  4140  0015E8  C0CD  F08B         	movff	_realTime+2,?_printf+2
  4141  0015EC  0100               	movlb	0	; () banked
  4142  0015EE  6B8C               	clrf	(?_printf+3)& (0+255),b
  4143  0015F0  C0CC  F08D         	movff	_realTime+1,?_printf+4
  4144  0015F4  0100               	movlb	0	; () banked
  4145  0015F6  6B8E               	clrf	(?_printf+5)& (0+255),b
  4146  0015F8  C0CB  F08F         	movff	_realTime,?_printf+6
  4147  0015FC  0100               	movlb	0	; () banked
  4148  0015FE  6B90               	clrf	(?_printf+7)& (0+255),b
  4149  001600  EC09  F00B         	call	_printf	;wreg free
  4150  001604                     l7165:
  4151  001604  0E0F               	movlw	15
  4152  001606  0100               	movlb	0	; () banked
  4153  001608  19FC               	xorwf	_screenMode& (0+255),w,b
  4154  00160A  A4D8               	btfss	status,2,c
  4155  00160C  EF23  F006         	goto	l6775
  4156  001610  D794               	goto	l7145
  4157  001612                     __end_of_main:
  4158                           	opt stack 0
  4159                           tblptru	equ	0xFF8
  4160                           tblptrh	equ	0xFF7
  4161                           tblptrl	equ	0xFF6
  4162                           tablat	equ	0xFF5
  4163                           prodh	equ	0xFF4
  4164                           prodl	equ	0xFF3
  4165                           intcon	equ	0xFF2
  4166                           intcon2	equ	0xFF1
  4167                           intcon3	equ	0xFF0
  4168                           postinc0	equ	0xFEE
  4169                           wreg	equ	0xFE8
  4170                           postdec1	equ	0xFE5
  4171                           fsr1l	equ	0xFE1
  4172                           indf2	equ	0xFDF
  4173                           fsr2h	equ	0xFDA
  4174                           fsr2l	equ	0xFD9
  4175                           status	equ	0xFD8
  4176                           
  4177 ;; *************** function _wait_2ms *****************
  4178 ;; Defined at:
  4179 ;;		line 658 in file "../main.c"
  4180 ;; Parameters:    Size  Location     Type
  4181 ;;  x               2   48[COMRAM] unsigned int 
  4182 ;; Auto vars:     Size  Location     Type
  4183 ;;		None
  4184 ;; Return value:  Size  Location     Type
  4185 ;;                  1    wreg      void 
  4186 ;; Registers used:
  4187 ;;		wreg, status,2, status,0
  4188 ;; Tracked objects:
  4189 ;;		On entry : 0/0
  4190 ;;		On exit  : 0/0
  4191 ;;		Unchanged: 0/0
  4192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4193 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4194 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4196 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4197 ;;Total ram usage:        2 bytes
  4198 ;; Hardware stack levels used:    1
  4199 ;; Hardware stack levels required when called:    5
  4200 ;; This function calls:
  4201 ;;		Nothing
  4202 ;; This function is called by:
  4203 ;;		_main
  4204 ;; This function uses a non-reentrant model
  4205 ;;
  4206                           
  4207                           	psect	text1
  4208  003402                     __ptext1:
  4209                           	opt stack 0
  4210  003402                     _wait_2ms:
  4211                           	opt stack 25
  4212                           
  4213                           ;main.c: 659: count_2ms = x;
  4214                           
  4215                           ; BSR set to: 0
  4216                           ;incstack = 0
  4217  003402  C031  F047         	movff	wait_2ms@x,_count_2ms
  4218  003406  C032  F048         	movff	wait_2ms@x+1,_count_2ms+1
  4219  00340A                     l4423:
  4220  00340A  5047               	movf	_count_2ms,w,c
  4221  00340C  1048               	iorwf	_count_2ms+1,w,c
  4222  00340E  B4D8               	btfsc	status,2,c
  4223  003410  0012               	return	
  4224  003412  0100               	movlb	0	; () banked
  4225  003414  05FC               	decf	_screenMode& (0+255),w,b
  4226  003416  A4D8               	btfss	status,2,c
  4227  003418  0012               	return	
  4228  00341A  D7F7               	goto	l4423
  4229  00341C                     __end_of_wait_2ms:
  4230                           	opt stack 0
  4231                           tblptru	equ	0xFF8
  4232                           tblptrh	equ	0xFF7
  4233                           tblptrl	equ	0xFF6
  4234                           tablat	equ	0xFF5
  4235                           prodh	equ	0xFF4
  4236                           prodl	equ	0xFF3
  4237                           intcon	equ	0xFF2
  4238                           intcon2	equ	0xFF1
  4239                           intcon3	equ	0xFF0
  4240                           postinc0	equ	0xFEE
  4241                           wreg	equ	0xFE8
  4242                           postdec1	equ	0xFE5
  4243                           fsr1l	equ	0xFE1
  4244                           indf2	equ	0xFDF
  4245                           fsr2h	equ	0xFDA
  4246                           fsr2l	equ	0xFD9
  4247                           status	equ	0xFD8
  4248                           
  4249 ;; *************** function _testBatteries *****************
  4250 ;; Defined at:
  4251 ;;		line 568 in file "../main.c"
  4252 ;; Parameters:    Size  Location     Type
  4253 ;;		None
  4254 ;; Auto vars:     Size  Location     Type
  4255 ;;  volt5           2   41[BANK0 ] unsigned int 
  4256 ;;  volt4           2   39[BANK0 ] unsigned int 
  4257 ;;  volt2           2   37[BANK0 ] unsigned int 
  4258 ;;  volt3           2   35[BANK0 ] unsigned int 
  4259 ;;  volt1           2   33[BANK0 ] unsigned int 
  4260 ;; Return value:  Size  Location     Type
  4261 ;;                  1    wreg      void 
  4262 ;; Registers used:
  4263 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4264 ;; Tracked objects:
  4265 ;;		On entry : 0/0
  4266 ;;		On exit  : 0/0
  4267 ;;		Unchanged: 0/0
  4268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4269 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4270 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4271 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4272 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4273 ;;Total ram usage:       12 bytes
  4274 ;; Hardware stack levels used:    1
  4275 ;; Hardware stack levels required when called:    8
  4276 ;; This function calls:
  4277 ;;		_lcdInst
  4278 ;;		_printf
  4279 ;;		_readADC
  4280 ;; This function is called by:
  4281 ;;		_main
  4282 ;; This function uses a non-reentrant model
  4283 ;;
  4284                           
  4285                           	psect	text2
  4286  0028AC                     __ptext2:
  4287                           	opt stack 0
  4288  0028AC                     _testBatteries:
  4289                           	opt stack 22
  4290                           
  4291                           ;main.c: 588: readADC(1);
  4292                           
  4293                           ;incstack = 0
  4294  0028AC  0E01               	movlw	1
  4295  0028AE  EC24  F01A         	call	_readADC
  4296                           
  4297                           ;main.c: 589: unsigned int volt1 = ADRES;
  4298  0028B2  CFC3 F0A1          	movff	4035,testBatteries@volt1	;volatile
  4299  0028B6  CFC4 F0A2          	movff	4036,testBatteries@volt1+1	;volatile
  4300                           
  4301                           ;main.c: 590: readADC(2);
  4302  0028BA  0E02               	movlw	2
  4303  0028BC  EC24  F01A         	call	_readADC
  4304                           
  4305                           ;main.c: 591: unsigned int volt2 = ADRES;
  4306  0028C0  CFC3 F0A5          	movff	4035,testBatteries@volt2	;volatile
  4307  0028C4  CFC4 F0A6          	movff	4036,testBatteries@volt2+1	;volatile
  4308                           
  4309                           ;main.c: 592: readADC(3);
  4310  0028C8  0E03               	movlw	3
  4311  0028CA  EC24  F01A         	call	_readADC
  4312                           
  4313                           ;main.c: 593: unsigned int volt3 = ADRES;
  4314  0028CE  CFC3 F0A3          	movff	4035,testBatteries@volt3	;volatile
  4315  0028D2  CFC4 F0A4          	movff	4036,testBatteries@volt3+1	;volatile
  4316                           
  4317                           ;main.c: 594: readADC(4);
  4318  0028D6  0E04               	movlw	4
  4319  0028D8  EC24  F01A         	call	_readADC
  4320                           
  4321                           ;main.c: 595: unsigned int volt4 = ADRES;
  4322  0028DC  CFC3 F0A7          	movff	4035,testBatteries@volt4	;volatile
  4323  0028E0  CFC4 F0A8          	movff	4036,testBatteries@volt4+1	;volatile
  4324                           
  4325                           ;main.c: 596: readADC(5);
  4326  0028E4  0E05               	movlw	5
  4327  0028E6  EC24  F01A         	call	_readADC
  4328                           
  4329                           ;main.c: 597: unsigned int volt5 = ADRES;
  4330  0028EA  CFC3 F0A9          	movff	4035,testBatteries@volt5	;volatile
  4331  0028EE  CFC4 F0AA          	movff	4036,testBatteries@volt5+1	;volatile
  4332                           
  4333                           ;main.c: 599: lcdInst(0b10000000);;
  4334  0028F2  0E80               	movlw	128
  4335  0028F4  EC65  F01A         	call	_lcdInst
  4336                           
  4337                           ;main.c: 600: printf("%04d %04d %04d", volt1, volt2, volt3);
  4338  0028F8  0EEF               	movlw	low STR_35
  4339  0028FA  0100               	movlb	0	; () banked
  4340  0028FC  6F89               	movwf	printf@f& (0+255),b
  4341  0028FE  0EFF               	movlw	high STR_35
  4342  002900  0100               	movlb	0	; () banked
  4343  002902  6F8A               	movwf	(printf@f+1)& (0+255),b
  4344  002904  C0A1  F08B         	movff	testBatteries@volt1,?_printf+2
  4345  002908  C0A2  F08C         	movff	testBatteries@volt1+1,?_printf+3
  4346  00290C  C0A5  F08D         	movff	testBatteries@volt2,?_printf+4
  4347  002910  C0A6  F08E         	movff	testBatteries@volt2+1,?_printf+5
  4348  002914  C0A3  F08F         	movff	testBatteries@volt3,?_printf+6
  4349  002918  C0A4  F090         	movff	testBatteries@volt3+1,?_printf+7
  4350  00291C  EC09  F00B         	call	_printf	;wreg free
  4351                           
  4352                           ;main.c: 601: lcdInst(0b11000000);;
  4353  002920  0EC0               	movlw	192
  4354  002922  EC65  F01A         	call	_lcdInst
  4355                           
  4356                           ;main.c: 602: printf("%04d %04d       ", volt4, volt5);
  4357  002926  0EDF               	movlw	low STR_36
  4358  002928  0100               	movlb	0	; () banked
  4359  00292A  6F89               	movwf	printf@f& (0+255),b
  4360  00292C  0EFE               	movlw	high STR_36
  4361  00292E  0100               	movlb	0	; () banked
  4362  002930  6F8A               	movwf	(printf@f+1)& (0+255),b
  4363  002932  C0A7  F08B         	movff	testBatteries@volt4,?_printf+2
  4364  002936  C0A8  F08C         	movff	testBatteries@volt4+1,?_printf+3
  4365  00293A  C0A9  F08D         	movff	testBatteries@volt5,?_printf+4
  4366  00293E  C0AA  F08E         	movff	testBatteries@volt5+1,?_printf+5
  4367  002942  EC09  F00B         	call	_printf	;wreg free
  4368                           
  4369                           ;main.c: 604: if (volt1){
  4370  002946  0100               	movlb	0	; () banked
  4371  002948  51A1               	movf	testBatteries@volt1& (0+255),w,b
  4372  00294A  0100               	movlb	0	; () banked
  4373  00294C  11A2               	iorwf	(testBatteries@volt1+1)& (0+255),w,b
  4374  00294E  B4D8               	btfsc	status,2,c
  4375  002950  D00D               	goto	l6131
  4376                           
  4377                           ; BSR set to: 0
  4378                           ;main.c: 605: countC++;
  4379  002952  0100               	movlb	0	; () banked
  4380  002954  2BE4               	incf	_countC& (0+255),f,b
  4381                           
  4382                           ; BSR set to: 0
  4383                           ;main.c: 606: plat1Right = 512;
  4384  002956  0E02               	movlw	2
  4385  002958  0100               	movlb	0	; () banked
  4386  00295A  6FD5               	movwf	(_plat1Right+1)& (0+255),b
  4387  00295C  0E00               	movlw	0
  4388  00295E  6FD4               	movwf	_plat1Right& (0+255),b
  4389                           
  4390                           ; BSR set to: 0
  4391                           ;main.c: 607: plat2Left = 512;
  4392  002960  0E02               	movlw	2
  4393  002962  0100               	movlb	0	; () banked
  4394  002964  6FD7               	movwf	(_plat2Left+1)& (0+255),b
  4395  002966  0E00               	movlw	0
  4396  002968  6FD6               	movwf	_plat2Left& (0+255),b
  4397                           
  4398                           ; BSR set to: 0
  4399                           ;main.c: 608: return;
  4400  00296A  0012               	return	
  4401  00296C                     l6131:
  4402                           
  4403                           ; BSR set to: 0
  4404                           ;main.c: 609: }
  4405                           ;main.c: 610: if (!(volt1 | volt2 | volt3 | volt4 | volt5)){
  4406  00296C  0100               	movlb	0	; () banked
  4407  00296E  51A5               	movf	testBatteries@volt2& (0+255),w,b
  4408  002970  0100               	movlb	0	; () banked
  4409  002972  11A1               	iorwf	testBatteries@volt1& (0+255),w,b
  4410  002974  0100               	movlb	0	; () banked
  4411  002976  6F9F               	movwf	??_testBatteries& (0+255),b
  4412  002978  0100               	movlb	0	; () banked
  4413  00297A  51A6               	movf	(testBatteries@volt2+1)& (0+255),w,b
  4414  00297C  0100               	movlb	0	; () banked
  4415  00297E  11A2               	iorwf	(testBatteries@volt1+1)& (0+255),w,b
  4416  002980  0100               	movlb	0	; () banked
  4417  002982  6FA0               	movwf	(??_testBatteries+1)& (0+255),b
  4418  002984  0100               	movlb	0	; () banked
  4419  002986  51A3               	movf	testBatteries@volt3& (0+255),w,b
  4420  002988  0100               	movlb	0	; () banked
  4421  00298A  139F               	iorwf	??_testBatteries& (0+255),f,b
  4422  00298C  0100               	movlb	0	; () banked
  4423  00298E  51A4               	movf	(testBatteries@volt3+1)& (0+255),w,b
  4424  002990  0100               	movlb	0	; () banked
  4425  002992  13A0               	iorwf	(??_testBatteries+1)& (0+255),f,b
  4426  002994  0100               	movlb	0	; () banked
  4427  002996  51A7               	movf	testBatteries@volt4& (0+255),w,b
  4428  002998  0100               	movlb	0	; () banked
  4429  00299A  139F               	iorwf	??_testBatteries& (0+255),f,b
  4430  00299C  0100               	movlb	0	; () banked
  4431  00299E  51A8               	movf	(testBatteries@volt4+1)& (0+255),w,b
  4432  0029A0  0100               	movlb	0	; () banked
  4433  0029A2  13A0               	iorwf	(??_testBatteries+1)& (0+255),f,b
  4434  0029A4  0100               	movlb	0	; () banked
  4435  0029A6  51A9               	movf	testBatteries@volt5& (0+255),w,b
  4436  0029A8  0100               	movlb	0	; () banked
  4437  0029AA  139F               	iorwf	??_testBatteries& (0+255),f,b
  4438  0029AC  0100               	movlb	0	; () banked
  4439  0029AE  51AA               	movf	(testBatteries@volt5+1)& (0+255),w,b
  4440  0029B0  0100               	movlb	0	; () banked
  4441  0029B2  13A0               	iorwf	(??_testBatteries+1)& (0+255),f,b
  4442  0029B4  0100               	movlb	0	; () banked
  4443  0029B6  519F               	movf	??_testBatteries& (0+255),w,b
  4444  0029B8  0100               	movlb	0	; () banked
  4445  0029BA  11A0               	iorwf	(??_testBatteries+1)& (0+255),w,b
  4446  0029BC  A4D8               	btfss	status,2,c
  4447  0029BE  D00D               	goto	l6141
  4448                           
  4449                           ; BSR set to: 0
  4450                           ;main.c: 611: countDrain++;
  4451  0029C0  0100               	movlb	0	; () banked
  4452  0029C2  2BE5               	incf	_countDrain& (0+255),f,b
  4453                           
  4454                           ; BSR set to: 0
  4455                           ;main.c: 612: plat1Left = 512;
  4456  0029C4  0E02               	movlw	2
  4457  0029C6  0100               	movlb	0	; () banked
  4458  0029C8  6FD3               	movwf	(_plat1Left+1)& (0+255),b
  4459  0029CA  0E00               	movlw	0
  4460  0029CC  6FD2               	movwf	_plat1Left& (0+255),b
  4461                           
  4462                           ; BSR set to: 0
  4463                           ;main.c: 613: plat2Right = 512;
  4464  0029CE  0E02               	movlw	2
  4465  0029D0  0100               	movlb	0	; () banked
  4466  0029D2  6FD9               	movwf	(_plat2Right+1)& (0+255),b
  4467  0029D4  0E00               	movlw	0
  4468  0029D6  6FD8               	movwf	_plat2Right& (0+255),b
  4469                           
  4470                           ; BSR set to: 0
  4471                           ;main.c: 614: return;
  4472  0029D8  0012               	return	
  4473  0029DA                     l6141:
  4474                           
  4475                           ; BSR set to: 0
  4476                           ;main.c: 615: }
  4477                           ;main.c: 616: if (volt2 && volt3){
  4478  0029DA  0100               	movlb	0	; () banked
  4479  0029DC  51A5               	movf	testBatteries@volt2& (0+255),w,b
  4480  0029DE  0100               	movlb	0	; () banked
  4481  0029E0  11A6               	iorwf	(testBatteries@volt2+1)& (0+255),w,b
  4482  0029E2  B4D8               	btfsc	status,2,c
  4483  0029E4  D00F               	goto	l6151
  4484                           
  4485                           ; BSR set to: 0
  4486  0029E6  0100               	movlb	0	; () banked
  4487  0029E8  51A3               	movf	testBatteries@volt3& (0+255),w,b
  4488  0029EA  0100               	movlb	0	; () banked
  4489  0029EC  11A4               	iorwf	(testBatteries@volt3+1)& (0+255),w,b
  4490  0029EE  B4D8               	btfsc	status,2,c
  4491  0029F0  D009               	goto	l6151
  4492                           
  4493                           ; BSR set to: 0
  4494                           ;main.c: 617: countAA = countAA + 2;
  4495  0029F2  0100               	movlb	0	; () banked
  4496  0029F4  51E3               	movf	_countAA& (0+255),w,b
  4497  0029F6  0F02               	addlw	2
  4498  0029F8  0100               	movlb	0	; () banked
  4499  0029FA  6FE3               	movwf	_countAA& (0+255),b
  4500                           
  4501                           ; BSR set to: 0
  4502                           ;main.c: 618: doubleAA = 1;
  4503  0029FC  0E01               	movlw	1
  4504  0029FE  0100               	movlb	0	; () banked
  4505  002A00  6FE6               	movwf	_doubleAA& (0+255),b
  4506                           
  4507                           ; BSR set to: 0
  4508                           ;main.c: 619: return;
  4509  002A02  0012               	return	
  4510  002A04                     l6151:
  4511                           
  4512                           ; BSR set to: 0
  4513                           ;main.c: 620: }
  4514                           ;main.c: 621: if (volt4 >200 | volt5 > 200){
  4515  002A04  0100               	movlb	0	; () banked
  4516  002A06  51A8               	movf	(testBatteries@volt4+1)& (0+255),w,b
  4517  002A08  E10D               	bnz	l6155
  4518  002A0A  0EC9               	movlw	201
  4519  002A0C  0100               	movlb	0	; () banked
  4520  002A0E  5DA7               	subwf	testBatteries@volt4& (0+255),w,b
  4521  002A10  B0D8               	btfsc	status,0,c
  4522  002A12  D008               	goto	l6155
  4523                           
  4524                           ; BSR set to: 0
  4525  002A14  0100               	movlb	0	; () banked
  4526  002A16  51AA               	movf	(testBatteries@volt5+1)& (0+255),w,b
  4527  002A18  E105               	bnz	l6155
  4528  002A1A  0EC9               	movlw	201
  4529  002A1C  0100               	movlb	0	; () banked
  4530  002A1E  5DA9               	subwf	testBatteries@volt5& (0+255),w,b
  4531  002A20  A0D8               	btfss	status,0,c
  4532  002A22  D00D               	goto	l6161
  4533  002A24                     l6155:
  4534                           
  4535                           ; BSR set to: 0
  4536                           ;main.c: 622: plat1Right = 512;
  4537  002A24  0E02               	movlw	2
  4538  002A26  0100               	movlb	0	; () banked
  4539  002A28  6FD5               	movwf	(_plat1Right+1)& (0+255),b
  4540  002A2A  0E00               	movlw	0
  4541  002A2C  6FD4               	movwf	_plat1Right& (0+255),b
  4542                           
  4543                           ;main.c: 623: plat2Left = 512;
  4544  002A2E  0E02               	movlw	2
  4545  002A30  0100               	movlb	0	; () banked
  4546  002A32  6FD7               	movwf	(_plat2Left+1)& (0+255),b
  4547  002A34  0E00               	movlw	0
  4548  002A36  6FD6               	movwf	_plat2Left& (0+255),b
  4549                           
  4550                           ; BSR set to: 0
  4551                           ;main.c: 624: count9V++;
  4552  002A38  0100               	movlb	0	; () banked
  4553  002A3A  2BE2               	incf	_count9V& (0+255),f,b
  4554                           
  4555                           ; BSR set to: 0
  4556                           ;main.c: 625: return;
  4557  002A3C  0012               	return	
  4558  002A3E                     l6161:
  4559                           
  4560                           ; BSR set to: 0
  4561                           ;main.c: 626: }
  4562                           ;main.c: 627: if (volt4 > 80 | volt5 > 80){
  4563  002A3E  0100               	movlb	0	; () banked
  4564  002A40  51A8               	movf	(testBatteries@volt4+1)& (0+255),w,b
  4565  002A42  E10D               	bnz	l6165
  4566  002A44  0E51               	movlw	81
  4567  002A46  0100               	movlb	0	; () banked
  4568  002A48  5DA7               	subwf	testBatteries@volt4& (0+255),w,b
  4569  002A4A  B0D8               	btfsc	status,0,c
  4570  002A4C  D008               	goto	l6165
  4571                           
  4572                           ; BSR set to: 0
  4573  002A4E  0100               	movlb	0	; () banked
  4574  002A50  51AA               	movf	(testBatteries@volt5+1)& (0+255),w,b
  4575  002A52  E105               	bnz	l6165
  4576  002A54  0E51               	movlw	81
  4577  002A56  0100               	movlb	0	; () banked
  4578  002A58  5DA9               	subwf	testBatteries@volt5& (0+255),w,b
  4579  002A5A  A0D8               	btfss	status,0,c
  4580  002A5C  D00D               	goto	l6173
  4581  002A5E                     l6165:
  4582                           
  4583                           ; BSR set to: 0
  4584                           ;main.c: 628: countDrain++;
  4585  002A5E  0100               	movlb	0	; () banked
  4586  002A60  2BE5               	incf	_countDrain& (0+255),f,b
  4587                           
  4588                           ; BSR set to: 0
  4589                           ;main.c: 629: plat1Left = 512;
  4590  002A62  0E02               	movlw	2
  4591  002A64  0100               	movlb	0	; () banked
  4592  002A66  6FD3               	movwf	(_plat1Left+1)& (0+255),b
  4593  002A68  0E00               	movlw	0
  4594  002A6A  6FD2               	movwf	_plat1Left& (0+255),b
  4595                           
  4596                           ; BSR set to: 0
  4597                           ;main.c: 630: plat2Right = 512;
  4598  002A6C  0E02               	movlw	2
  4599  002A6E  0100               	movlb	0	; () banked
  4600  002A70  6FD9               	movwf	(_plat2Right+1)& (0+255),b
  4601  002A72  0E00               	movlw	0
  4602  002A74  6FD8               	movwf	_plat2Right& (0+255),b
  4603                           
  4604                           ; BSR set to: 0
  4605                           ;main.c: 631: return;
  4606  002A76  0012               	return	
  4607  002A78                     l6173:
  4608                           
  4609                           ; BSR set to: 0
  4610                           ;main.c: 632: }
  4611                           ;main.c: 633: if (volt2 | volt3){
  4612  002A78  0100               	movlb	0	; () banked
  4613  002A7A  51A3               	movf	testBatteries@volt3& (0+255),w,b
  4614  002A7C  0100               	movlb	0	; () banked
  4615  002A7E  11A5               	iorwf	testBatteries@volt2& (0+255),w,b
  4616  002A80  0100               	movlb	0	; () banked
  4617  002A82  6F9F               	movwf	??_testBatteries& (0+255),b
  4618  002A84  0100               	movlb	0	; () banked
  4619  002A86  51A4               	movf	(testBatteries@volt3+1)& (0+255),w,b
  4620  002A88  0100               	movlb	0	; () banked
  4621  002A8A  11A6               	iorwf	(testBatteries@volt2+1)& (0+255),w,b
  4622  002A8C  0100               	movlb	0	; () banked
  4623  002A8E  6FA0               	movwf	(??_testBatteries+1)& (0+255),b
  4624  002A90  0100               	movlb	0	; () banked
  4625  002A92  519F               	movf	??_testBatteries& (0+255),w,b
  4626  002A94  0100               	movlb	0	; () banked
  4627  002A96  11A0               	iorwf	(??_testBatteries+1)& (0+255),w,b
  4628  002A98  B4D8               	btfsc	status,2,c
  4629  002A9A  D035               	goto	l6193
  4630                           
  4631                           ; BSR set to: 0
  4632                           ;main.c: 634: countAA++;
  4633  002A9C  0100               	movlb	0	; () banked
  4634  002A9E  2BE3               	incf	_countAA& (0+255),f,b
  4635                           
  4636                           ; BSR set to: 0
  4637                           ;main.c: 635: if (volt4 && volt5){
  4638  002AA0  0100               	movlb	0	; () banked
  4639  002AA2  51A7               	movf	testBatteries@volt4& (0+255),w,b
  4640  002AA4  0100               	movlb	0	; () banked
  4641  002AA6  11A8               	iorwf	(testBatteries@volt4+1)& (0+255),w,b
  4642  002AA8  B4D8               	btfsc	status,2,c
  4643  002AAA  D011               	goto	l6185
  4644                           
  4645                           ; BSR set to: 0
  4646  002AAC  0100               	movlb	0	; () banked
  4647  002AAE  51A9               	movf	testBatteries@volt5& (0+255),w,b
  4648  002AB0  0100               	movlb	0	; () banked
  4649  002AB2  11AA               	iorwf	(testBatteries@volt5+1)& (0+255),w,b
  4650  002AB4  B4D8               	btfsc	status,2,c
  4651  002AB6  D00B               	goto	l6185
  4652                           
  4653                           ; BSR set to: 0
  4654                           ;main.c: 636: plat1Right = 512;
  4655  002AB8  0E02               	movlw	2
  4656  002ABA  0100               	movlb	0	; () banked
  4657  002ABC  6FD5               	movwf	(_plat1Right+1)& (0+255),b
  4658  002ABE  0E00               	movlw	0
  4659  002AC0  6FD4               	movwf	_plat1Right& (0+255),b
  4660                           
  4661                           ;main.c: 637: plat2Left = 512;
  4662  002AC2  0E02               	movlw	2
  4663  002AC4  0100               	movlb	0	; () banked
  4664  002AC6  6FD7               	movwf	(_plat2Left+1)& (0+255),b
  4665  002AC8  0E00               	movlw	0
  4666  002ACA  6FD6               	movwf	_plat2Left& (0+255),b
  4667                           
  4668                           ; BSR set to: 0
  4669                           ;main.c: 638: return;
  4670  002ACC  0012               	return	
  4671  002ACE                     l6185:
  4672                           
  4673                           ; BSR set to: 0
  4674                           ;main.c: 639: }
  4675                           ;main.c: 640: if (volt2){
  4676  002ACE  0100               	movlb	0	; () banked
  4677  002AD0  51A5               	movf	testBatteries@volt2& (0+255),w,b
  4678  002AD2  0100               	movlb	0	; () banked
  4679  002AD4  11A6               	iorwf	(testBatteries@volt2+1)& (0+255),w,b
  4680  002AD6  B4D8               	btfsc	status,2,c
  4681  002AD8  D00B               	goto	l6189
  4682                           
  4683                           ; BSR set to: 0
  4684                           ;main.c: 641: plat1Right = 512;
  4685  002ADA  0E02               	movlw	2
  4686  002ADC  0100               	movlb	0	; () banked
  4687  002ADE  6FD5               	movwf	(_plat1Right+1)& (0+255),b
  4688  002AE0  0E00               	movlw	0
  4689  002AE2  6FD4               	movwf	_plat1Right& (0+255),b
  4690                           
  4691                           ;main.c: 642: plat2Right = 512;
  4692  002AE4  0E02               	movlw	2
  4693  002AE6  0100               	movlb	0	; () banked
  4694  002AE8  6FD9               	movwf	(_plat2Right+1)& (0+255),b
  4695  002AEA  0E00               	movlw	0
  4696  002AEC  6FD8               	movwf	_plat2Right& (0+255),b
  4697                           
  4698                           ;main.c: 643: }
  4699  002AEE  0012               	return	
  4700  002AF0                     l6189:
  4701                           
  4702                           ; BSR set to: 0
  4703                           ;main.c: 644: else{
  4704                           ;main.c: 645: plat2Left = 512;
  4705  002AF0  0E02               	movlw	2
  4706  002AF2  0100               	movlb	0	; () banked
  4707  002AF4  6FD7               	movwf	(_plat2Left+1)& (0+255),b
  4708  002AF6  0E00               	movlw	0
  4709  002AF8  6FD6               	movwf	_plat2Left& (0+255),b
  4710                           
  4711                           ;main.c: 646: plat1Left = 512;
  4712  002AFA  0E02               	movlw	2
  4713  002AFC  0100               	movlb	0	; () banked
  4714  002AFE  6FD3               	movwf	(_plat1Left+1)& (0+255),b
  4715  002B00  0E00               	movlw	0
  4716  002B02  6FD2               	movwf	_plat1Left& (0+255),b
  4717                           
  4718                           ; BSR set to: 0
  4719                           ;main.c: 647: }
  4720                           ;main.c: 648: return;
  4721                           
  4722                           ; BSR set to: 0
  4723  002B04  0012               	return	
  4724  002B06                     l6193:
  4725                           
  4726                           ; BSR set to: 0
  4727                           ;main.c: 649: }
  4728                           ;main.c: 652: plat1Left = 512;
  4729  002B06  0E02               	movlw	2
  4730  002B08  0100               	movlb	0	; () banked
  4731  002B0A  6FD3               	movwf	(_plat1Left+1)& (0+255),b
  4732  002B0C  0E00               	movlw	0
  4733  002B0E  6FD2               	movwf	_plat1Left& (0+255),b
  4734                           
  4735                           ;main.c: 653: plat2Right = 512;
  4736  002B10  0E02               	movlw	2
  4737  002B12  0100               	movlb	0	; () banked
  4738  002B14  6FD9               	movwf	(_plat2Right+1)& (0+255),b
  4739  002B16  0E00               	movlw	0
  4740  002B18  6FD8               	movwf	_plat2Right& (0+255),b
  4741                           
  4742                           ; BSR set to: 0
  4743                           ;main.c: 654: countDrain++;
  4744  002B1A  0100               	movlb	0	; () banked
  4745  002B1C  2BE5               	incf	_countDrain& (0+255),f,b
  4746  002B1E  0012               	return	
  4747  002B20                     __end_of_testBatteries:
  4748                           	opt stack 0
  4749                           tblptru	equ	0xFF8
  4750                           tblptrh	equ	0xFF7
  4751                           tblptrl	equ	0xFF6
  4752                           tablat	equ	0xFF5
  4753                           prodh	equ	0xFF4
  4754                           prodl	equ	0xFF3
  4755                           intcon	equ	0xFF2
  4756                           intcon2	equ	0xFF1
  4757                           intcon3	equ	0xFF0
  4758                           postinc0	equ	0xFEE
  4759                           wreg	equ	0xFE8
  4760                           postdec1	equ	0xFE5
  4761                           fsr1l	equ	0xFE1
  4762                           indf2	equ	0xFDF
  4763                           fsr2h	equ	0xFDA
  4764                           fsr2l	equ	0xFD9
  4765                           status	equ	0xFD8
  4766                           
  4767 ;; *************** function _readADC *****************
  4768 ;; Defined at:
  4769 ;;		line 479 in file "../main.c"
  4770 ;; Parameters:    Size  Location     Type
  4771 ;;  channel         1    wreg     unsigned char 
  4772 ;; Auto vars:     Size  Location     Type
  4773 ;;  channel         1   48[COMRAM] unsigned char 
  4774 ;; Return value:  Size  Location     Type
  4775 ;;                  1    wreg      void 
  4776 ;; Registers used:
  4777 ;;		wreg, status,2, status,0
  4778 ;; Tracked objects:
  4779 ;;		On entry : 0/0
  4780 ;;		On exit  : 0/0
  4781 ;;		Unchanged: 0/0
  4782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4783 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4784 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4786 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4787 ;;Total ram usage:        1 bytes
  4788 ;; Hardware stack levels used:    1
  4789 ;; Hardware stack levels required when called:    5
  4790 ;; This function calls:
  4791 ;;		Nothing
  4792 ;; This function is called by:
  4793 ;;		_main
  4794 ;;		_testBatteries
  4795 ;; This function uses a non-reentrant model
  4796 ;;
  4797                           
  4798                           	psect	text3
  4799  003448                     __ptext3:
  4800                           	opt stack 0
  4801  003448                     _readADC:
  4802                           	opt stack 24
  4803                           
  4804                           ; BSR set to: 0
  4805                           ;incstack = 0
  4806                           ;readADC@channel stored from wreg
  4807  003448  6E31               	movwf	readADC@channel,c
  4808                           
  4809                           ;main.c: 481: ADCON0 = channel << 2;
  4810  00344A  4431               	rlncf	readADC@channel,w,c
  4811  00344C  46E8               	rlncf	wreg,f,c
  4812  00344E  0BFC               	andlw	252
  4813  003450  6EC2               	movwf	4034,c	;volatile
  4814                           
  4815                           ;main.c: 482: ADCON0bits.ADON = 1;
  4816  003452  80C2               	bsf	4034,0,c	;volatile
  4817                           
  4818                           ;main.c: 483: ADCON0bits.GO = 1;
  4819  003454  82C2               	bsf	4034,1,c	;volatile
  4820  003456                     l426:
  4821  003456  A2C2               	btfss	4034,1,c	;volatile
  4822  003458  0012               	return	
  4823  00345A  D7FD               	goto	l426
  4824  00345C                     __end_of_readADC:
  4825                           	opt stack 0
  4826                           tblptru	equ	0xFF8
  4827                           tblptrh	equ	0xFF7
  4828                           tblptrl	equ	0xFF6
  4829                           tablat	equ	0xFF5
  4830                           prodh	equ	0xFF4
  4831                           prodl	equ	0xFF3
  4832                           intcon	equ	0xFF2
  4833                           intcon2	equ	0xFF1
  4834                           intcon3	equ	0xFF0
  4835                           postinc0	equ	0xFEE
  4836                           wreg	equ	0xFE8
  4837                           postdec1	equ	0xFE5
  4838                           fsr1l	equ	0xFE1
  4839                           indf2	equ	0xFDF
  4840                           fsr2h	equ	0xFDA
  4841                           fsr2l	equ	0xFD9
  4842                           status	equ	0xFD8
  4843                           
  4844 ;; *************** function _stopOperation *****************
  4845 ;; Defined at:
  4846 ;;		line 487 in file "../main.c"
  4847 ;; Parameters:    Size  Location     Type
  4848 ;;		None
  4849 ;; Auto vars:     Size  Location     Type
  4850 ;;  address         2    9[BANK0 ] unsigned int 
  4851 ;;  address_code    1    8[BANK0 ] unsigned char 
  4852 ;; Return value:  Size  Location     Type
  4853 ;;                  1    wreg      void 
  4854 ;; Registers used:
  4855 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4856 ;; Tracked objects:
  4857 ;;		On entry : 0/0
  4858 ;;		On exit  : 0/0
  4859 ;;		Unchanged: 0/0
  4860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4861 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4862 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4863 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4864 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4865 ;;Total ram usage:        3 bytes
  4866 ;; Hardware stack levels used:    1
  4867 ;; Hardware stack levels required when called:    6
  4868 ;; This function calls:
  4869 ;;		_Eeprom_ReadByte
  4870 ;;		_Eeprom_WriteByte
  4871 ;;		___awdiv
  4872 ;;		___awmod
  4873 ;;		_next_address
  4874 ;; This function is called by:
  4875 ;;		_main
  4876 ;; This function uses a non-reentrant model
  4877 ;;
  4878                           
  4879                           	psect	text4
  4880  00200E                     __ptext4:
  4881                           	opt stack 0
  4882  00200E                     _stopOperation:
  4883                           	opt stack 24
  4884                           
  4885                           ;main.c: 488: T0CONbits.TMR0ON = 0;
  4886                           
  4887                           ;incstack = 0
  4888  00200E  9ED5               	bcf	4053,7,c	;volatile
  4889                           
  4890                           ;main.c: 489: T1CONbits.TMR1ON = 0;
  4891  002010  90CD               	bcf	4045,0,c	;volatile
  4892                           
  4893                           ;main.c: 490: TMR0 = 55770;
  4894  002012  0ED9               	movlw	217
  4895  002014  6ED7               	movwf	4055,c	;volatile
  4896  002016  0EDA               	movlw	218
  4897  002018  6ED6               	movwf	4054,c	;volatile
  4898                           
  4899                           ;main.c: 491: TMR1 = 60535;
  4900  00201A  0EEC               	movlw	236
  4901  00201C  6ECF               	movwf	4047,c	;volatile
  4902  00201E  0E77               	movlw	119
  4903  002020  6ECE               	movwf	4046,c	;volatile
  4904                           
  4905                           ;main.c: 493: num9V = count9V;
  4906  002022  C0E2  F0E8         	movff	_count9V,_num9V
  4907                           
  4908                           ;main.c: 494: numC = countC;
  4909  002026  C0E4  F0EB         	movff	_countC,_numC
  4910                           
  4911                           ;main.c: 495: numAA = countAA;
  4912  00202A  C0E3  F0E9         	movff	_countAA,_numAA
  4913                           
  4914                           ;main.c: 496: numDrain = countDrain;
  4915  00202E  C0E5  F0EC         	movff	_countDrain,_numDrain
  4916                           
  4917                           ;main.c: 497: numBats = count9V + countC + countAA + countDrain;
  4918  002032  0100               	movlb	0	; () banked
  4919  002034  51E2               	movf	_count9V& (0+255),w,b
  4920  002036  0100               	movlb	0	; () banked
  4921  002038  25E4               	addwf	_countC& (0+255),w,b
  4922  00203A  0100               	movlb	0	; () banked
  4923  00203C  25E3               	addwf	_countAA& (0+255),w,b
  4924  00203E  0100               	movlb	0	; () banked
  4925  002040  25E5               	addwf	_countDrain& (0+255),w,b
  4926  002042  0100               	movlb	0	; () banked
  4927  002044  6FEA               	movwf	_numBats& (0+255),b
  4928                           
  4929                           ; BSR set to: 0
  4930                           ;main.c: 499: unsigned char address_code = Eeprom_ReadByte(0);
  4931  002046  0E00               	movlw	0
  4932  002048  6E32               	movwf	Eeprom_ReadByte@address+1,c
  4933  00204A  0E00               	movlw	0
  4934  00204C  6E31               	movwf	Eeprom_ReadByte@address,c
  4935  00204E  EC0E  F01A         	call	_Eeprom_ReadByte	;wreg free
  4936  002052  0100               	movlb	0	; () banked
  4937  002054  6F88               	movwf	stopOperation@address_code& (0+255),b
  4938                           
  4939                           ; BSR set to: 0
  4940                           ;main.c: 500: uint16_t address = address_code * 96 + 1;
  4941  002056  0100               	movlb	0	; () banked
  4942  002058  5188               	movf	stopOperation@address_code& (0+255),w,b
  4943  00205A  0D60               	mullw	96
  4944  00205C  0E01               	movlw	1
  4945  00205E  24F3               	addwf	prodl,w,c
  4946  002060  0100               	movlb	0	; () banked
  4947  002062  6F89               	movwf	stopOperation@address& (0+255),b
  4948  002064  0E00               	movlw	0
  4949  002066  20F4               	addwfc	prodh,w,c
  4950  002068  0100               	movlb	0	; () banked
  4951  00206A  6F8A               	movwf	(stopOperation@address+1)& (0+255),b
  4952                           
  4953                           ; BSR set to: 0
  4954                           ;main.c: 501: Eeprom_WriteByte(address, lastRunRTC[6]);
  4955  00206C  C089  F031         	movff	stopOperation@address,Eeprom_WriteByte@address
  4956  002070  C08A  F032         	movff	stopOperation@address+1,Eeprom_WriteByte@address+1
  4957  002074  C0CA  F033         	movff	_lastRunRTC+6,Eeprom_WriteByte@data
  4958  002078  EC74  F019         	call	_Eeprom_WriteByte	;wreg free
  4959                           
  4960                           ;main.c: 502: address = next_address(address);
  4961  00207C  C089  F031         	movff	stopOperation@address,next_address@address
  4962  002080  C08A  F032         	movff	stopOperation@address+1,next_address@address+1
  4963  002084  EC51  F01A         	call	_next_address	;wreg free
  4964  002088  C031  F089         	movff	?_next_address,stopOperation@address
  4965  00208C  C032  F08A         	movff	?_next_address+1,stopOperation@address+1
  4966                           
  4967                           ;main.c: 503: Eeprom_WriteByte(address, lastRunRTC[5]);
  4968  002090  C089  F031         	movff	stopOperation@address,Eeprom_WriteByte@address
  4969  002094  C08A  F032         	movff	stopOperation@address+1,Eeprom_WriteByte@address+1
  4970  002098  C0C9  F033         	movff	_lastRunRTC+5,Eeprom_WriteByte@data
  4971  00209C  EC74  F019         	call	_Eeprom_WriteByte	;wreg free
  4972                           
  4973                           ;main.c: 504: address = next_address(address);
  4974  0020A0  C089  F031         	movff	stopOperation@address,next_address@address
  4975  0020A4  C08A  F032         	movff	stopOperation@address+1,next_address@address+1
  4976  0020A8  EC51  F01A         	call	_next_address	;wreg free
  4977  0020AC  C031  F089         	movff	?_next_address,stopOperation@address
  4978  0020B0  C032  F08A         	movff	?_next_address+1,stopOperation@address+1
  4979                           
  4980                           ;main.c: 505: Eeprom_WriteByte(address, lastRunRTC[4]);
  4981  0020B4  C089  F031         	movff	stopOperation@address,Eeprom_WriteByte@address
  4982  0020B8  C08A  F032         	movff	stopOperation@address+1,Eeprom_WriteByte@address+1
  4983  0020BC  C0C8  F033         	movff	_lastRunRTC+4,Eeprom_WriteByte@data
  4984  0020C0  EC74  F019         	call	_Eeprom_WriteByte	;wreg free
  4985                           
  4986                           ;main.c: 506: address = next_address(address);
  4987  0020C4  C089  F031         	movff	stopOperation@address,next_address@address
  4988  0020C8  C08A  F032         	movff	stopOperation@address+1,next_address@address+1
  4989  0020CC  EC51  F01A         	call	_next_address	;wreg free
  4990  0020D0  C031  F089         	movff	?_next_address,stopOperation@address
  4991  0020D4  C032  F08A         	movff	?_next_address+1,stopOperation@address+1
  4992                           
  4993                           ;main.c: 507: Eeprom_WriteByte(address, lastRunRTC[2]);
  4994  0020D8  C089  F031         	movff	stopOperation@address,Eeprom_WriteByte@address
  4995  0020DC  C08A  F032         	movff	stopOperation@address+1,Eeprom_WriteByte@address+1
  4996  0020E0  C0C6  F033         	movff	_lastRunRTC+2,Eeprom_WriteByte@data
  4997  0020E4  EC74  F019         	call	_Eeprom_WriteByte	;wreg free
  4998                           
  4999                           ;main.c: 508: address = next_address(address);
  5000  0020E8  C089  F031         	movff	stopOperation@address,next_address@address
  5001  0020EC  C08A  F032         	movff	stopOperation@address+1,next_address@address+1
  5002  0020F0  EC51  F01A         	call	_next_address	;wreg free
  5003  0020F4  C031  F089         	movff	?_next_address,stopOperation@address
  5004  0020F8  C032  F08A         	movff	?_next_address+1,stopOperation@address+1
  5005                           
  5006                           ;main.c: 509: Eeprom_WriteByte(address, lastRunRTC[1]);
  5007  0020FC  C089  F031         	movff	stopOperation@address,Eeprom_WriteByte@address
  5008  002100  C08A  F032         	movff	stopOperation@address+1,Eeprom_WriteByte@address+1
  5009  002104  C0C5  F033         	movff	_lastRunRTC+1,Eeprom_WriteByte@data
  5010  002108  EC74  F019         	call	_Eeprom_WriteByte	;wreg free
  5011                           
  5012                           ;main.c: 510: address = next_address(address);
  5013  00210C  C089  F031         	movff	stopOperation@address,next_address@address
  5014  002110  C08A  F032         	movff	stopOperation@address+1,next_address@address+1
  5015  002114  EC51  F01A         	call	_next_address	;wreg free
  5016  002118  C031  F089         	movff	?_next_address,stopOperation@address
  5017  00211C  C032  F08A         	movff	?_next_address+1,stopOperation@address+1
  5018                           
  5019                           ;main.c: 511: Eeprom_WriteByte(address, lastRunRTC[0]);
  5020  002120  C089  F031         	movff	stopOperation@address,Eeprom_WriteByte@address
  5021  002124  C08A  F032         	movff	stopOperation@address+1,Eeprom_WriteByte@address+1
  5022  002128  C0C4  F033         	movff	_lastRunRTC,Eeprom_WriteByte@data
  5023  00212C  EC74  F019         	call	_Eeprom_WriteByte	;wreg free
  5024                           
  5025                           ;main.c: 512: address = next_address(address);
  5026  002130  C089  F031         	movff	stopOperation@address,next_address@address
  5027  002134  C08A  F032         	movff	stopOperation@address+1,next_address@address+1
  5028  002138  EC51  F01A         	call	_next_address	;wreg free
  5029  00213C  C031  F089         	movff	?_next_address,stopOperation@address
  5030  002140  C032  F08A         	movff	?_next_address+1,stopOperation@address+1
  5031                           
  5032                           ;main.c: 514: Eeprom_WriteByte(address, countAA);
  5033  002144  C089  F031         	movff	stopOperation@address,Eeprom_WriteByte@address
  5034  002148  C08A  F032         	movff	stopOperation@address+1,Eeprom_WriteByte@address+1
  5035  00214C  C0E3  F033         	movff	_countAA,Eeprom_WriteByte@data
  5036  002150  EC74  F019         	call	_Eeprom_WriteByte	;wreg free
  5037                           
  5038                           ;main.c: 515: address = next_address(address);
  5039  002154  C089  F031         	movff	stopOperation@address,next_address@address
  5040  002158  C08A  F032         	movff	stopOperation@address+1,next_address@address+1
  5041  00215C  EC51  F01A         	call	_next_address	;wreg free
  5042  002160  C031  F089         	movff	?_next_address,stopOperation@address
  5043  002164  C032  F08A         	movff	?_next_address+1,stopOperation@address+1
  5044                           
  5045                           ;main.c: 516: Eeprom_WriteByte(address, countC);
  5046  002168  C089  F031         	movff	stopOperation@address,Eeprom_WriteByte@address
  5047  00216C  C08A  F032         	movff	stopOperation@address+1,Eeprom_WriteByte@address+1
  5048  002170  C0E4  F033         	movff	_countC,Eeprom_WriteByte@data
  5049  002174  EC74  F019         	call	_Eeprom_WriteByte	;wreg free
  5050                           
  5051                           ;main.c: 517: address = next_address(address);
  5052  002178  C089  F031         	movff	stopOperation@address,next_address@address
  5053  00217C  C08A  F032         	movff	stopOperation@address+1,next_address@address+1
  5054  002180  EC51  F01A         	call	_next_address	;wreg free
  5055  002184  C031  F089         	movff	?_next_address,stopOperation@address
  5056  002188  C032  F08A         	movff	?_next_address+1,stopOperation@address+1
  5057                           
  5058                           ;main.c: 518: Eeprom_WriteByte(address, count9V);
  5059  00218C  C089  F031         	movff	stopOperation@address,Eeprom_WriteByte@address
  5060  002190  C08A  F032         	movff	stopOperation@address+1,Eeprom_WriteByte@address+1
  5061  002194  C0E2  F033         	movff	_count9V,Eeprom_WriteByte@data
  5062  002198  EC74  F019         	call	_Eeprom_WriteByte	;wreg free
  5063                           
  5064                           ;main.c: 519: address = next_address(address);
  5065  00219C  C089  F031         	movff	stopOperation@address,next_address@address
  5066  0021A0  C08A  F032         	movff	stopOperation@address+1,next_address@address+1
  5067  0021A4  EC51  F01A         	call	_next_address	;wreg free
  5068  0021A8  C031  F089         	movff	?_next_address,stopOperation@address
  5069  0021AC  C032  F08A         	movff	?_next_address+1,stopOperation@address+1
  5070                           
  5071                           ;main.c: 520: Eeprom_WriteByte(address, countDrain);
  5072  0021B0  C089  F031         	movff	stopOperation@address,Eeprom_WriteByte@address
  5073  0021B4  C08A  F032         	movff	stopOperation@address+1,Eeprom_WriteByte@address+1
  5074  0021B8  C0E5  F033         	movff	_countDrain,Eeprom_WriteByte@data
  5075  0021BC  EC74  F019         	call	_Eeprom_WriteByte	;wreg free
  5076                           
  5077                           ;main.c: 521: address = next_address(address);
  5078  0021C0  C089  F031         	movff	stopOperation@address,next_address@address
  5079  0021C4  C08A  F032         	movff	stopOperation@address+1,next_address@address+1
  5080  0021C8  EC51  F01A         	call	_next_address	;wreg free
  5081  0021CC  C031  F089         	movff	?_next_address,stopOperation@address
  5082  0021D0  C032  F08A         	movff	?_next_address+1,stopOperation@address+1
  5083                           
  5084                           ;main.c: 522: Eeprom_WriteByte(address, numBats);
  5085  0021D4  C089  F031         	movff	stopOperation@address,Eeprom_WriteByte@address
  5086  0021D8  C08A  F032         	movff	stopOperation@address+1,Eeprom_WriteByte@address+1
  5087  0021DC  C0EA  F033         	movff	_numBats,Eeprom_WriteByte@data
  5088  0021E0  EC74  F019         	call	_Eeprom_WriteByte	;wreg free
  5089                           
  5090                           ;main.c: 523: address = next_address(address);
  5091  0021E4  C089  F031         	movff	stopOperation@address,next_address@address
  5092  0021E8  C08A  F032         	movff	stopOperation@address+1,next_address@address+1
  5093  0021EC  EC51  F01A         	call	_next_address	;wreg free
  5094  0021F0  C031  F089         	movff	?_next_address,stopOperation@address
  5095  0021F4  C032  F08A         	movff	?_next_address+1,stopOperation@address+1
  5096                           
  5097                           ;main.c: 524: Eeprom_WriteByte(address, opTimer);
  5098  0021F8  C089  F031         	movff	stopOperation@address,Eeprom_WriteByte@address
  5099  0021FC  C08A  F032         	movff	stopOperation@address+1,Eeprom_WriteByte@address+1
  5100  002200  C04A  F033         	movff	_opTimer,Eeprom_WriteByte@data
  5101  002204  EC74  F019         	call	_Eeprom_WriteByte	;wreg free
  5102                           
  5103                           ;main.c: 526: address_code++;
  5104  002208  0100               	movlb	0	; () banked
  5105  00220A  2B88               	incf	stopOperation@address_code& (0+255),f,b
  5106                           
  5107                           ; BSR set to: 0
  5108                           ;main.c: 527: if (address_code > 3)
  5109  00220C  0E03               	movlw	3
  5110  00220E  0100               	movlb	0	; () banked
  5111  002210  6588               	cpfsgt	stopOperation@address_code& (0+255),b
  5112  002212  D009               	goto	l6269
  5113                           
  5114                           ; BSR set to: 0
  5115                           ;main.c: 528: Eeprom_WriteByte(0, 0);
  5116  002214  0E00               	movlw	0
  5117  002216  6E32               	movwf	Eeprom_WriteByte@address+1,c
  5118  002218  0E00               	movlw	0
  5119  00221A  6E31               	movwf	Eeprom_WriteByte@address,c
  5120  00221C  0E00               	movlw	0
  5121  00221E  6E33               	movwf	Eeprom_WriteByte@data,c
  5122  002220  EC74  F019         	call	_Eeprom_WriteByte	;wreg free
  5123  002224  D008               	goto	l6271
  5124  002226                     l6269:
  5125                           
  5126                           ;main.c: 529: else
  5127                           ;main.c: 530: Eeprom_WriteByte(0, address_code);
  5128  002226  0E00               	movlw	0
  5129  002228  6E32               	movwf	Eeprom_WriteByte@address+1,c
  5130  00222A  0E00               	movlw	0
  5131  00222C  6E31               	movwf	Eeprom_WriteByte@address,c
  5132  00222E  C088  F033         	movff	stopOperation@address_code,Eeprom_WriteByte@data
  5133  002232  EC74  F019         	call	_Eeprom_WriteByte	;wreg free
  5134  002236                     l6271:
  5135                           
  5136                           ;main.c: 532: count9V = 0;
  5137  002236  0E00               	movlw	0
  5138  002238  0100               	movlb	0	; () banked
  5139  00223A  6FE2               	movwf	_count9V& (0+255),b
  5140                           
  5141                           ; BSR set to: 0
  5142                           ;main.c: 533: countC = 0;
  5143  00223C  0E00               	movlw	0
  5144  00223E  0100               	movlb	0	; () banked
  5145  002240  6FE4               	movwf	_countC& (0+255),b
  5146                           
  5147                           ; BSR set to: 0
  5148                           ;main.c: 534: countAA = 0;
  5149  002242  0E00               	movlw	0
  5150  002244  0100               	movlb	0	; () banked
  5151  002246  6FE3               	movwf	_countAA& (0+255),b
  5152                           
  5153                           ; BSR set to: 0
  5154                           ;main.c: 535: countDrain = 0;
  5155  002248  0E00               	movlw	0
  5156  00224A  0100               	movlb	0	; () banked
  5157  00224C  6FE5               	movwf	_countDrain& (0+255),b
  5158                           
  5159                           ; BSR set to: 0
  5160                           ;main.c: 536: min = opTimer / 60;
  5161  00224E  C04A  F080         	movff	_opTimer,___awdiv@dividend
  5162  002252  0100               	movlb	0	; () banked
  5163  002254  6B81               	clrf	(___awdiv@dividend+1)& (0+255),b
  5164  002256  0E00               	movlw	0
  5165  002258  0100               	movlb	0	; () banked
  5166  00225A  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  5167  00225C  0E3C               	movlw	60
  5168  00225E  6F82               	movwf	___awdiv@divisor& (0+255),b
  5169  002260  EC17  F016         	call	___awdiv	;wreg free
  5170  002264  0100               	movlb	0	; () banked
  5171  002266  5180               	movf	?___awdiv& (0+255),w,b
  5172  002268  0100               	movlb	0	; () banked
  5173  00226A  6FE7               	movwf	_min& (0+255),b
  5174                           
  5175                           ; BSR set to: 0
  5176                           ;main.c: 537: sec = opTimer % 60;
  5177  00226C  C04A  F080         	movff	_opTimer,___awmod@dividend
  5178  002270  0100               	movlb	0	; () banked
  5179  002272  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  5180  002274  0E00               	movlw	0
  5181  002276  0100               	movlb	0	; () banked
  5182  002278  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5183  00227A  0E3C               	movlw	60
  5184  00227C  6F82               	movwf	___awmod@divisor& (0+255),b
  5185  00227E  ECD4  F016         	call	___awmod	;wreg free
  5186  002282  0100               	movlb	0	; () banked
  5187  002284  5180               	movf	?___awmod& (0+255),w,b
  5188  002286  0100               	movlb	0	; () banked
  5189  002288  6FED               	movwf	_sec& (0+255),b
  5190                           
  5191                           ; BSR set to: 0
  5192                           ;main.c: 538: opTimer = 0;
  5193  00228A  0E00               	movlw	0
  5194  00228C  6E4A               	movwf	_opTimer,c
  5195                           
  5196                           ; BSR set to: 0
  5197                           ;main.c: 539: doneTimer = 0;
  5198  00228E  0E00               	movlw	0
  5199  002290  6E49               	movwf	_doneTimer,c
  5200                           
  5201                           ; BSR set to: 0
  5202                           ;main.c: 540: sorting = 0;
  5203  002292  0E00               	movlw	0
  5204  002294  6E4C               	movwf	_sorting,c
  5205                           
  5206                           ; BSR set to: 0
  5207                           ;main.c: 541: plat1Left = 0;
  5208  002296  0E00               	movlw	0
  5209  002298  0100               	movlb	0	; () banked
  5210  00229A  6FD3               	movwf	(_plat1Left+1)& (0+255),b
  5211  00229C  0E00               	movlw	0
  5212  00229E  6FD2               	movwf	_plat1Left& (0+255),b
  5213                           
  5214                           ; BSR set to: 0
  5215                           ;main.c: 542: plat1Right = 0;
  5216  0022A0  0E00               	movlw	0
  5217  0022A2  0100               	movlb	0	; () banked
  5218  0022A4  6FD5               	movwf	(_plat1Right+1)& (0+255),b
  5219  0022A6  0E00               	movlw	0
  5220  0022A8  6FD4               	movwf	_plat1Right& (0+255),b
  5221                           
  5222                           ; BSR set to: 0
  5223                           ;main.c: 543: plat2Left = 0;
  5224  0022AA  0E00               	movlw	0
  5225  0022AC  0100               	movlb	0	; () banked
  5226  0022AE  6FD7               	movwf	(_plat2Left+1)& (0+255),b
  5227  0022B0  0E00               	movlw	0
  5228  0022B2  6FD6               	movwf	_plat2Left& (0+255),b
  5229                           
  5230                           ; BSR set to: 0
  5231                           ;main.c: 544: plat2Right = 0;
  5232  0022B4  0E00               	movlw	0
  5233  0022B6  0100               	movlb	0	; () banked
  5234  0022B8  6FD9               	movwf	(_plat2Right+1)& (0+255),b
  5235  0022BA  0E00               	movlw	0
  5236  0022BC  6FD8               	movwf	_plat2Right& (0+255),b
  5237                           
  5238                           ; BSR set to: 0
  5239                           ;main.c: 545: turn2BackLeft = 0;
  5240  0022BE  0E00               	movlw	0
  5241  0022C0  0100               	movlb	0	; () banked
  5242  0022C2  6FDF               	movwf	(_turn2BackLeft+1)& (0+255),b
  5243  0022C4  0E00               	movlw	0
  5244  0022C6  6FDE               	movwf	_turn2BackLeft& (0+255),b
  5245                           
  5246                           ; BSR set to: 0
  5247                           ;main.c: 546: turn1BackLeft = 0;
  5248  0022C8  0E00               	movlw	0
  5249  0022CA  0100               	movlb	0	; () banked
  5250  0022CC  6FDB               	movwf	(_turn1BackLeft+1)& (0+255),b
  5251  0022CE  0E00               	movlw	0
  5252  0022D0  6FDA               	movwf	_turn1BackLeft& (0+255),b
  5253                           
  5254                           ; BSR set to: 0
  5255                           ;main.c: 547: turn2BackRight = 0;
  5256  0022D2  0E00               	movlw	0
  5257  0022D4  0100               	movlb	0	; () banked
  5258  0022D6  6FE1               	movwf	(_turn2BackRight+1)& (0+255),b
  5259  0022D8  0E00               	movlw	0
  5260  0022DA  6FE0               	movwf	_turn2BackRight& (0+255),b
  5261                           
  5262                           ; BSR set to: 0
  5263                           ;main.c: 548: turn1BackRight = 0;
  5264  0022DC  0E00               	movlw	0
  5265  0022DE  0100               	movlb	0	; () banked
  5266  0022E0  6FDD               	movwf	(_turn1BackRight+1)& (0+255),b
  5267  0022E2  0E00               	movlw	0
  5268  0022E4  6FDC               	movwf	_turn1BackRight& (0+255),b
  5269                           
  5270                           ; BSR set to: 0
  5271                           ;main.c: 549: count_2ms = 0;
  5272  0022E6  0E00               	movlw	0
  5273  0022E8  6E48               	movwf	_count_2ms+1,c
  5274  0022EA  0E00               	movlw	0
  5275  0022EC  6E47               	movwf	_count_2ms,c
  5276                           
  5277                           ; BSR set to: 0
  5278                           ;main.c: 550: doubleAA = 0;
  5279  0022EE  0E00               	movlw	0
  5280  0022F0  0100               	movlb	0	; () banked
  5281  0022F2  6FE6               	movwf	_doubleAA& (0+255),b
  5282                           
  5283                           ; BSR set to: 0
  5284                           ;main.c: 551: solOnTimer = 0;
  5285  0022F4  0E00               	movlw	0
  5286  0022F6  6E4B               	movwf	_solOnTimer,c
  5287                           
  5288                           ; BSR set to: 0
  5289                           ;main.c: 553: LATCbits.LC1 = 0;;
  5290  0022F8  928B               	bcf	3979,1,c	;volatile
  5291                           
  5292                           ; BSR set to: 0
  5293                           ;main.c: 554: LATCbits.LC2 = 0;;
  5294  0022FA  948B               	bcf	3979,2,c	;volatile
  5295                           
  5296                           ; BSR set to: 0
  5297                           ;main.c: 555: LATCbits.LC6 = 0;;
  5298  0022FC  9C8B               	bcf	3979,6,c	;volatile
  5299                           
  5300                           ; BSR set to: 0
  5301                           ;main.c: 556: LATCbits.LC5 = 0;;
  5302  0022FE  9A8B               	bcf	3979,5,c	;volatile
  5303                           
  5304                           ; BSR set to: 0
  5305                           ;main.c: 557: LATCbits.LC0 = 0;;
  5306  002300  908B               	bcf	3979,0,c	;volatile
  5307                           
  5308                           ; BSR set to: 0
  5309                           ;main.c: 558: LATEbits.LE2 = 0;;
  5310  002302  948D               	bcf	3981,2,c	;volatile
  5311                           
  5312                           ; BSR set to: 0
  5313                           ;main.c: 559: LATEbits.LE1 = 0;;
  5314  002304  928D               	bcf	3981,1,c	;volatile
  5315                           
  5316                           ; BSR set to: 0
  5317                           ;main.c: 560: LATAbits.LA4 = 0;;
  5318  002306  9889               	bcf	3977,4,c	;volatile
  5319                           
  5320                           ; BSR set to: 0
  5321                           ;main.c: 561: LATDbits.LD0= 0;;
  5322  002308  908C               	bcf	3980,0,c	;volatile
  5323                           
  5324                           ; BSR set to: 0
  5325                           ;main.c: 562: LATCbits.LC7 = 0;;
  5326  00230A  9E8B               	bcf	3979,7,c	;volatile
  5327                           
  5328                           ; BSR set to: 0
  5329                           ;main.c: 563: LATDbits.LD1 = 0;;
  5330  00230C  928C               	bcf	3980,1,c	;volatile
  5331                           
  5332                           ; BSR set to: 0
  5333                           ;main.c: 564: LATBbits.LB0 = 0;;
  5334  00230E  908A               	bcf	3978,0,c	;volatile
  5335                           
  5336                           ; BSR set to: 0
  5337                           ;main.c: 565: screenMode = 0;
  5338  002310  0E00               	movlw	0
  5339  002312  0100               	movlb	0	; () banked
  5340  002314  6FFC               	movwf	_screenMode& (0+255),b
  5341                           
  5342                           ; BSR set to: 0
  5343  002316  0012               	return		;funcret
  5344  002318                     __end_of_stopOperation:
  5345                           	opt stack 0
  5346                           tblptru	equ	0xFF8
  5347                           tblptrh	equ	0xFF7
  5348                           tblptrl	equ	0xFF6
  5349                           tablat	equ	0xFF5
  5350                           prodh	equ	0xFF4
  5351                           prodl	equ	0xFF3
  5352                           intcon	equ	0xFF2
  5353                           intcon2	equ	0xFF1
  5354                           intcon3	equ	0xFF0
  5355                           postinc0	equ	0xFEE
  5356                           wreg	equ	0xFE8
  5357                           postdec1	equ	0xFE5
  5358                           fsr1l	equ	0xFE1
  5359                           indf2	equ	0xFDF
  5360                           fsr2h	equ	0xFDA
  5361                           fsr2l	equ	0xFD9
  5362                           status	equ	0xFD8
  5363                           
  5364 ;; *************** function ___awmod *****************
  5365 ;; Defined at:
  5366 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  5367 ;; Parameters:    Size  Location     Type
  5368 ;;  dividend        2    0[BANK0 ] int 
  5369 ;;  divisor         2    2[BANK0 ] int 
  5370 ;; Auto vars:     Size  Location     Type
  5371 ;;  sign            1   49[COMRAM] unsigned char 
  5372 ;;  counter         1   48[COMRAM] unsigned char 
  5373 ;; Return value:  Size  Location     Type
  5374 ;;                  2    0[BANK0 ] int 
  5375 ;; Registers used:
  5376 ;;		wreg, status,2, status,0
  5377 ;; Tracked objects:
  5378 ;;		On entry : 0/0
  5379 ;;		On exit  : 0/0
  5380 ;;		Unchanged: 0/0
  5381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5382 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5383 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5384 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5385 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5386 ;;Total ram usage:        6 bytes
  5387 ;; Hardware stack levels used:    1
  5388 ;; Hardware stack levels required when called:    5
  5389 ;; This function calls:
  5390 ;;		Nothing
  5391 ;; This function is called by:
  5392 ;;		_stopOperation
  5393 ;; This function uses a non-reentrant model
  5394 ;;
  5395                           
  5396                           	psect	text5
  5397  002DA8                     __ptext5:
  5398                           	opt stack 0
  5399  002DA8                     ___awmod:
  5400                           	opt stack 24
  5401                           
  5402                           ; BSR set to: 0
  5403                           ;incstack = 0
  5404  002DA8  0E00               	movlw	0
  5405  002DAA  6E32               	movwf	___awmod@sign,c
  5406  002DAC  0100               	movlb	0	; () banked
  5407  002DAE  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
  5408  002DB0  D007               	goto	l6019
  5409                           
  5410                           ; BSR set to: 0
  5411  002DB2  0100               	movlb	0	; () banked
  5412  002DB4  6D80               	negf	___awmod@dividend& (0+255),b
  5413  002DB6  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  5414  002DB8  B0D8               	btfsc	status,0,c
  5415  002DBA  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  5416                           
  5417                           ; BSR set to: 0
  5418  002DBC  0E01               	movlw	1
  5419  002DBE  6E32               	movwf	___awmod@sign,c
  5420  002DC0                     l6019:
  5421                           
  5422                           ; BSR set to: 0
  5423  002DC0  0100               	movlb	0	; () banked
  5424  002DC2  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  5425  002DC4  D005               	goto	l6023
  5426                           
  5427                           ; BSR set to: 0
  5428  002DC6  0100               	movlb	0	; () banked
  5429  002DC8  6D82               	negf	___awmod@divisor& (0+255),b
  5430  002DCA  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
  5431  002DCC  B0D8               	btfsc	status,0,c
  5432  002DCE  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
  5433  002DD0                     l6023:
  5434                           
  5435                           ; BSR set to: 0
  5436  002DD0  0100               	movlb	0	; () banked
  5437  002DD2  5182               	movf	___awmod@divisor& (0+255),w,b
  5438  002DD4  0100               	movlb	0	; () banked
  5439  002DD6  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  5440  002DD8  B4D8               	btfsc	status,2,c
  5441  002DDA  D023               	goto	l6039
  5442                           
  5443                           ; BSR set to: 0
  5444  002DDC  0E01               	movlw	1
  5445  002DDE  6E31               	movwf	___awmod@counter,c
  5446  002DE0  D005               	goto	l6029
  5447  002DE2                     l6027:
  5448                           
  5449                           ; BSR set to: 0
  5450  002DE2  0100               	movlb	0	; () banked
  5451  002DE4  90D8               	bcf	status,0,c
  5452  002DE6  3782               	rlcf	___awmod@divisor& (0+255),f,b
  5453  002DE8  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  5454  002DEA  2A31               	incf	___awmod@counter,f,c
  5455  002DEC                     l6029:
  5456                           
  5457                           ; BSR set to: 0
  5458  002DEC  0100               	movlb	0	; () banked
  5459  002DEE  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  5460  002DF0  D7F8               	goto	l6027
  5461  002DF2                     l6031:
  5462                           
  5463                           ; BSR set to: 0
  5464  002DF2  0100               	movlb	0	; () banked
  5465  002DF4  5182               	movf	___awmod@divisor& (0+255),w,b
  5466  002DF6  0100               	movlb	0	; () banked
  5467  002DF8  5D80               	subwf	___awmod@dividend& (0+255),w,b
  5468  002DFA  0100               	movlb	0	; () banked
  5469  002DFC  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  5470  002DFE  0100               	movlb	0	; () banked
  5471  002E00  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  5472  002E02  A0D8               	btfss	status,0,c
  5473  002E04  D008               	goto	l6035
  5474                           
  5475                           ; BSR set to: 0
  5476  002E06  0100               	movlb	0	; () banked
  5477  002E08  5182               	movf	___awmod@divisor& (0+255),w,b
  5478  002E0A  0100               	movlb	0	; () banked
  5479  002E0C  5F80               	subwf	___awmod@dividend& (0+255),f,b
  5480  002E0E  0100               	movlb	0	; () banked
  5481  002E10  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  5482  002E12  0100               	movlb	0	; () banked
  5483  002E14  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  5484  002E16                     l6035:
  5485                           
  5486                           ; BSR set to: 0
  5487  002E16  0100               	movlb	0	; () banked
  5488  002E18  90D8               	bcf	status,0,c
  5489  002E1A  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  5490  002E1C  3382               	rrcf	___awmod@divisor& (0+255),f,b
  5491                           
  5492                           ; BSR set to: 0
  5493  002E1E  2E31               	decfsz	___awmod@counter,f,c
  5494  002E20  D7E8               	goto	l6031
  5495  002E22                     l6039:
  5496                           
  5497                           ; BSR set to: 0
  5498  002E22  5032               	movf	___awmod@sign,w,c
  5499  002E24  B4D8               	btfsc	status,2,c
  5500  002E26  D005               	goto	l6043
  5501                           
  5502                           ; BSR set to: 0
  5503  002E28  0100               	movlb	0	; () banked
  5504  002E2A  6D80               	negf	___awmod@dividend& (0+255),b
  5505  002E2C  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  5506  002E2E  B0D8               	btfsc	status,0,c
  5507  002E30  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  5508  002E32                     l6043:
  5509                           
  5510                           ; BSR set to: 0
  5511  002E32  C080  F080         	movff	___awmod@dividend,?___awmod
  5512  002E36  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
  5513  002E3A  0012               	return	
  5514  002E3C                     __end_of___awmod:
  5515                           	opt stack 0
  5516                           tblptru	equ	0xFF8
  5517                           tblptrh	equ	0xFF7
  5518                           tblptrl	equ	0xFF6
  5519                           tablat	equ	0xFF5
  5520                           prodh	equ	0xFF4
  5521                           prodl	equ	0xFF3
  5522                           intcon	equ	0xFF2
  5523                           intcon2	equ	0xFF1
  5524                           intcon3	equ	0xFF0
  5525                           postinc0	equ	0xFEE
  5526                           wreg	equ	0xFE8
  5527                           postdec1	equ	0xFE5
  5528                           fsr1l	equ	0xFE1
  5529                           indf2	equ	0xFDF
  5530                           fsr2h	equ	0xFDA
  5531                           fsr2l	equ	0xFD9
  5532                           status	equ	0xFD8
  5533                           
  5534 ;; *************** function ___awdiv *****************
  5535 ;; Defined at:
  5536 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  5537 ;; Parameters:    Size  Location     Type
  5538 ;;  dividend        2    0[BANK0 ] int 
  5539 ;;  divisor         2    2[BANK0 ] int 
  5540 ;; Auto vars:     Size  Location     Type
  5541 ;;  quotient        2    6[BANK0 ] int 
  5542 ;;  sign            1    5[BANK0 ] unsigned char 
  5543 ;;  counter         1    4[BANK0 ] unsigned char 
  5544 ;; Return value:  Size  Location     Type
  5545 ;;                  2    0[BANK0 ] int 
  5546 ;; Registers used:
  5547 ;;		wreg, status,2, status,0
  5548 ;; Tracked objects:
  5549 ;;		On entry : 0/0
  5550 ;;		On exit  : 0/0
  5551 ;;		Unchanged: 0/0
  5552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5553 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5554 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5555 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5556 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5557 ;;Total ram usage:        8 bytes
  5558 ;; Hardware stack levels used:    1
  5559 ;; Hardware stack levels required when called:    5
  5560 ;; This function calls:
  5561 ;;		Nothing
  5562 ;; This function is called by:
  5563 ;;		_stopOperation
  5564 ;; This function uses a non-reentrant model
  5565 ;;
  5566                           
  5567                           	psect	text6
  5568  002C2E                     __ptext6:
  5569                           	opt stack 0
  5570  002C2E                     ___awdiv:
  5571                           	opt stack 24
  5572                           
  5573                           ; BSR set to: 0
  5574                           ;incstack = 0
  5575  002C2E  0E00               	movlw	0
  5576  002C30  0100               	movlb	0	; () banked
  5577  002C32  6F85               	movwf	___awdiv@sign& (0+255),b
  5578                           
  5579                           ; BSR set to: 0
  5580  002C34  0100               	movlb	0	; () banked
  5581  002C36  AF83               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  5582  002C38  D008               	goto	l5975
  5583                           
  5584                           ; BSR set to: 0
  5585  002C3A  0100               	movlb	0	; () banked
  5586  002C3C  6D82               	negf	___awdiv@divisor& (0+255),b
  5587  002C3E  1F83               	comf	(___awdiv@divisor+1)& (0+255),f,b
  5588  002C40  B0D8               	btfsc	status,0,c
  5589  002C42  2B83               	incf	(___awdiv@divisor+1)& (0+255),f,b
  5590                           
  5591                           ; BSR set to: 0
  5592  002C44  0E01               	movlw	1
  5593  002C46  0100               	movlb	0	; () banked
  5594  002C48  6F85               	movwf	___awdiv@sign& (0+255),b
  5595  002C4A                     l5975:
  5596                           
  5597                           ; BSR set to: 0
  5598  002C4A  0100               	movlb	0	; () banked
  5599  002C4C  AF81               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  5600  002C4E  D008               	goto	l5981
  5601                           
  5602                           ; BSR set to: 0
  5603  002C50  0100               	movlb	0	; () banked
  5604  002C52  6D80               	negf	___awdiv@dividend& (0+255),b
  5605  002C54  1F81               	comf	(___awdiv@dividend+1)& (0+255),f,b
  5606  002C56  B0D8               	btfsc	status,0,c
  5607  002C58  2B81               	incf	(___awdiv@dividend+1)& (0+255),f,b
  5608                           
  5609                           ; BSR set to: 0
  5610  002C5A  0E01               	movlw	1
  5611  002C5C  0100               	movlb	0	; () banked
  5612  002C5E  1B85               	xorwf	___awdiv@sign& (0+255),f,b
  5613  002C60                     l5981:
  5614                           
  5615                           ; BSR set to: 0
  5616  002C60  0E00               	movlw	0
  5617  002C62  0100               	movlb	0	; () banked
  5618  002C64  6F87               	movwf	(___awdiv@quotient+1)& (0+255),b
  5619  002C66  0E00               	movlw	0
  5620  002C68  6F86               	movwf	___awdiv@quotient& (0+255),b
  5621                           
  5622                           ; BSR set to: 0
  5623  002C6A  0100               	movlb	0	; () banked
  5624  002C6C  5182               	movf	___awdiv@divisor& (0+255),w,b
  5625  002C6E  0100               	movlb	0	; () banked
  5626  002C70  1183               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  5627  002C72  B4D8               	btfsc	status,2,c
  5628  002C74  D02C               	goto	l6003
  5629                           
  5630                           ; BSR set to: 0
  5631  002C76  0E01               	movlw	1
  5632  002C78  0100               	movlb	0	; () banked
  5633  002C7A  6F84               	movwf	___awdiv@counter& (0+255),b
  5634  002C7C  D006               	goto	l5989
  5635  002C7E                     l5987:
  5636                           
  5637                           ; BSR set to: 0
  5638  002C7E  0100               	movlb	0	; () banked
  5639  002C80  90D8               	bcf	status,0,c
  5640  002C82  3782               	rlcf	___awdiv@divisor& (0+255),f,b
  5641  002C84  3783               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  5642  002C86  0100               	movlb	0	; () banked
  5643  002C88  2B84               	incf	___awdiv@counter& (0+255),f,b
  5644  002C8A                     l5989:
  5645                           
  5646                           ; BSR set to: 0
  5647  002C8A  0100               	movlb	0	; () banked
  5648  002C8C  AF83               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  5649  002C8E  D7F7               	goto	l5987
  5650  002C90                     l5991:
  5651                           
  5652                           ; BSR set to: 0
  5653  002C90  0100               	movlb	0	; () banked
  5654  002C92  90D8               	bcf	status,0,c
  5655  002C94  3786               	rlcf	___awdiv@quotient& (0+255),f,b
  5656  002C96  3787               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  5657                           
  5658                           ; BSR set to: 0
  5659  002C98  0100               	movlb	0	; () banked
  5660  002C9A  5182               	movf	___awdiv@divisor& (0+255),w,b
  5661  002C9C  0100               	movlb	0	; () banked
  5662  002C9E  5D80               	subwf	___awdiv@dividend& (0+255),w,b
  5663  002CA0  0100               	movlb	0	; () banked
  5664  002CA2  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
  5665  002CA4  0100               	movlb	0	; () banked
  5666  002CA6  5981               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  5667  002CA8  A0D8               	btfss	status,0,c
  5668  002CAA  D00A               	goto	l5999
  5669                           
  5670                           ; BSR set to: 0
  5671  002CAC  0100               	movlb	0	; () banked
  5672  002CAE  5182               	movf	___awdiv@divisor& (0+255),w,b
  5673  002CB0  0100               	movlb	0	; () banked
  5674  002CB2  5F80               	subwf	___awdiv@dividend& (0+255),f,b
  5675  002CB4  0100               	movlb	0	; () banked
  5676  002CB6  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
  5677  002CB8  0100               	movlb	0	; () banked
  5678  002CBA  5B81               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  5679                           
  5680                           ; BSR set to: 0
  5681  002CBC  0100               	movlb	0	; () banked
  5682  002CBE  8186               	bsf	___awdiv@quotient& (0+255),0,b
  5683  002CC0                     l5999:
  5684                           
  5685                           ; BSR set to: 0
  5686  002CC0  0100               	movlb	0	; () banked
  5687  002CC2  90D8               	bcf	status,0,c
  5688  002CC4  3383               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  5689  002CC6  3382               	rrcf	___awdiv@divisor& (0+255),f,b
  5690                           
  5691                           ; BSR set to: 0
  5692  002CC8  0100               	movlb	0	; () banked
  5693  002CCA  2F84               	decfsz	___awdiv@counter& (0+255),f,b
  5694  002CCC  D7E1               	goto	l5991
  5695  002CCE                     l6003:
  5696                           
  5697                           ; BSR set to: 0
  5698  002CCE  0100               	movlb	0	; () banked
  5699  002CD0  5185               	movf	___awdiv@sign& (0+255),w,b
  5700  002CD2  0100               	movlb	0	; () banked
  5701  002CD4  B4D8               	btfsc	status,2,c
  5702  002CD6  D005               	goto	l6007
  5703                           
  5704                           ; BSR set to: 0
  5705  002CD8  0100               	movlb	0	; () banked
  5706  002CDA  6D86               	negf	___awdiv@quotient& (0+255),b
  5707  002CDC  1F87               	comf	(___awdiv@quotient+1)& (0+255),f,b
  5708  002CDE  B0D8               	btfsc	status,0,c
  5709  002CE0  2B87               	incf	(___awdiv@quotient+1)& (0+255),f,b
  5710  002CE2                     l6007:
  5711                           
  5712                           ; BSR set to: 0
  5713  002CE2  C086  F080         	movff	___awdiv@quotient,?___awdiv
  5714  002CE6  C087  F081         	movff	___awdiv@quotient+1,?___awdiv+1
  5715  002CEA  0012               	return	
  5716  002CEC                     __end_of___awdiv:
  5717                           	opt stack 0
  5718                           tblptru	equ	0xFF8
  5719                           tblptrh	equ	0xFF7
  5720                           tblptrl	equ	0xFF6
  5721                           tablat	equ	0xFF5
  5722                           prodh	equ	0xFF4
  5723                           prodl	equ	0xFF3
  5724                           intcon	equ	0xFF2
  5725                           intcon2	equ	0xFF1
  5726                           intcon3	equ	0xFF0
  5727                           postinc0	equ	0xFEE
  5728                           wreg	equ	0xFE8
  5729                           postdec1	equ	0xFE5
  5730                           fsr1l	equ	0xFE1
  5731                           indf2	equ	0xFDF
  5732                           fsr2h	equ	0xFDA
  5733                           fsr2l	equ	0xFD9
  5734                           status	equ	0xFD8
  5735                           
  5736 ;; *************** function _Eeprom_WriteByte *****************
  5737 ;; Defined at:
  5738 ;;		line 683 in file "../main.c"
  5739 ;; Parameters:    Size  Location     Type
  5740 ;;  address         2   48[COMRAM] unsigned int 
  5741 ;;  data            1   50[COMRAM] unsigned char 
  5742 ;; Auto vars:     Size  Location     Type
  5743 ;;		None
  5744 ;; Return value:  Size  Location     Type
  5745 ;;                  1    wreg      void 
  5746 ;; Registers used:
  5747 ;;		wreg, status,2
  5748 ;; Tracked objects:
  5749 ;;		On entry : 0/0
  5750 ;;		On exit  : 0/0
  5751 ;;		Unchanged: 0/0
  5752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5753 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5754 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5755 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5756 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5757 ;;Total ram usage:        3 bytes
  5758 ;; Hardware stack levels used:    1
  5759 ;; Hardware stack levels required when called:    5
  5760 ;; This function calls:
  5761 ;;		Nothing
  5762 ;; This function is called by:
  5763 ;;		_stopOperation
  5764 ;; This function uses a non-reentrant model
  5765 ;;
  5766                           
  5767                           	psect	text7
  5768  0032E8                     __ptext7:
  5769                           	opt stack 0
  5770  0032E8                     _Eeprom_WriteByte:
  5771                           	opt stack 24
  5772                           
  5773                           ;main.c: 685: EEADRH = (uint8_t)(address >> 8);
  5774                           
  5775                           ; BSR set to: 0
  5776                           ;incstack = 0
  5777  0032E8  5032               	movf	Eeprom_WriteByte@address+1,w,c
  5778  0032EA  6EAA               	movwf	4010,c	;volatile
  5779                           
  5780                           ;main.c: 686: EEADR = (uint8_t)address;
  5781  0032EC  C031  FFA9         	movff	Eeprom_WriteByte@address,4009	;volatile
  5782                           
  5783                           ;main.c: 688: EEDATA = data;
  5784  0032F0  C033  FFA8         	movff	Eeprom_WriteByte@data,4008	;volatile
  5785                           
  5786                           ;main.c: 689: EECON1bits.EEPGD = 0;
  5787  0032F4  9EA6               	bcf	4006,7,c	;volatile
  5788                           
  5789                           ;main.c: 690: EECON1bits.CFGS = 0;
  5790  0032F6  9CA6               	bcf	4006,6,c	;volatile
  5791                           
  5792                           ;main.c: 691: EECON1bits.WREN = 1;
  5793  0032F8  84A6               	bsf	4006,2,c	;volatile
  5794                           
  5795                           ;main.c: 695: EECON2 = 0x55;
  5796  0032FA  0E55               	movlw	85
  5797  0032FC  6EA7               	movwf	4007,c	;volatile
  5798                           
  5799                           ;main.c: 696: EECON2 = 0xAA;
  5800  0032FE  0EAA               	movlw	170
  5801  003300  6EA7               	movwf	4007,c	;volatile
  5802                           
  5803                           ;main.c: 697: EECON1bits.WR = 1;
  5804  003302  82A6               	bsf	4006,1,c	;volatile
  5805  003304                     l467:
  5806  003304  A8A1               	btfss	4001,4,c	;volatile
  5807  003306  D7FE               	goto	l467
  5808                           
  5809                           ;main.c: 703: }
  5810                           ;main.c: 705: PIR2bits.EEIF = 0;
  5811  003308  98A1               	bcf	4001,4,c	;volatile
  5812                           
  5813                           ;main.c: 706: EECON1bits.WREN = 0;
  5814  00330A  94A6               	bcf	4006,2,c	;volatile
  5815  00330C  0012               	return		;funcret
  5816  00330E                     __end_of_Eeprom_WriteByte:
  5817                           	opt stack 0
  5818                           tblptru	equ	0xFF8
  5819                           tblptrh	equ	0xFF7
  5820                           tblptrl	equ	0xFF6
  5821                           tablat	equ	0xFF5
  5822                           prodh	equ	0xFF4
  5823                           prodl	equ	0xFF3
  5824                           intcon	equ	0xFF2
  5825                           intcon2	equ	0xFF1
  5826                           intcon3	equ	0xFF0
  5827                           postinc0	equ	0xFEE
  5828                           wreg	equ	0xFE8
  5829                           postdec1	equ	0xFE5
  5830                           fsr1l	equ	0xFE1
  5831                           indf2	equ	0xFDF
  5832                           fsr2h	equ	0xFDA
  5833                           fsr2l	equ	0xFD9
  5834                           status	equ	0xFD8
  5835                           
  5836 ;; *************** function _show_log *****************
  5837 ;; Defined at:
  5838 ;;		line 714 in file "../main.c"
  5839 ;; Parameters:    Size  Location     Type
  5840 ;;  log_address     2   31[BANK0 ] unsigned int 
  5841 ;;  currScreen      1   33[BANK0 ] unsigned char 
  5842 ;; Auto vars:     Size  Location     Type
  5843 ;;  i               1   55[BANK0 ] unsigned char 
  5844 ;;  i               1   54[BANK0 ] unsigned char 
  5845 ;;  i               1   53[BANK0 ] unsigned char 
  5846 ;;  address         2   56[BANK0 ] unsigned int 
  5847 ;;  elapsed_time    2   45[BANK0 ] unsigned int 
  5848 ;;  Drain_num       2   43[BANK0 ] unsigned int 
  5849 ;;  Nine_num        2   41[BANK0 ] unsigned int 
  5850 ;;  C_num           2   39[BANK0 ] unsigned int 
  5851 ;;  AA_num          2   37[BANK0 ] unsigned int 
  5852 ;;  total_num       2   35[BANK0 ] unsigned int 
  5853 ;;  second          1   52[BANK0 ] unsigned char 
  5854 ;;  minute          1   51[BANK0 ] unsigned char 
  5855 ;;  hour            1   50[BANK0 ] unsigned char 
  5856 ;;  day             1   49[BANK0 ] unsigned char 
  5857 ;;  month           1   48[BANK0 ] unsigned char 
  5858 ;;  year            1   47[BANK0 ] unsigned char 
  5859 ;; Return value:  Size  Location     Type
  5860 ;;                  1    wreg      void 
  5861 ;; Registers used:
  5862 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5863 ;; Tracked objects:
  5864 ;;		On entry : 0/0
  5865 ;;		On exit  : 0/0
  5866 ;;		Unchanged: 0/0
  5867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5868 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5869 ;;      Locals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5870 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5871 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5872 ;;Total ram usage:       27 bytes
  5873 ;; Hardware stack levels used:    1
  5874 ;; Hardware stack levels required when called:    8
  5875 ;; This function calls:
  5876 ;;		_Eeprom_ReadByte
  5877 ;;		_lcdInst
  5878 ;;		_next_address
  5879 ;;		_printf
  5880 ;; This function is called by:
  5881 ;;		_main
  5882 ;; This function uses a non-reentrant model
  5883 ;;
  5884                           
  5885                           	psect	text8
  5886  0019C6                     __ptext8:
  5887                           	opt stack 0
  5888  0019C6                     _show_log:
  5889                           	opt stack 22
  5890                           
  5891                           ;main.c: 717: for(unsigned char i=0;i<200;i++){
  5892                           
  5893                           ;incstack = 0
  5894  0019C6  0E00               	movlw	0
  5895  0019C8  0100               	movlb	0	; () banked
  5896  0019CA  6FB5               	movwf	show_log@i& (0+255),b
  5897  0019CC                     l6339:
  5898                           
  5899                           ; BSR set to: 0
  5900  0019CC  0EC7               	movlw	199
  5901  0019CE  0100               	movlb	0	; () banked
  5902  0019D0  65B5               	cpfsgt	show_log@i& (0+255),b
  5903  0019D2  D001               	goto	l6343
  5904  0019D4  D012               	goto	l477
  5905  0019D6                     l6343:
  5906                           
  5907                           ; BSR set to: 0
  5908                           ;main.c: 718: if (screenMode != currScreen)
  5909  0019D6  0100               	movlb	0	; () banked
  5910  0019D8  51A1               	movf	show_log@currScreen& (0+255),w,b
  5911  0019DA  0100               	movlb	0	; () banked
  5912  0019DC  19FC               	xorwf	_screenMode& (0+255),w,b
  5913  0019DE  A4D8               	btfss	status,2,c
  5914  0019E0  D00C               	goto	l477
  5915                           
  5916                           ; BSR set to: 0
  5917                           ;main.c: 720: _delay((unsigned long)((10)*(10000000/4000.0)));
  5918                           
  5919                           ; BSR set to: 0
  5920                           
  5921                           ; BSR set to: 0
  5922                           ;main.c: 719: break;
  5923  0019E2  0E21               	movlw	33
  5924  0019E4  0100               	movlb	0	; () banked
  5925  0019E6  6FA2               	movwf	??_show_log& (0+255),b
  5926  0019E8  0E76               	movlw	118
  5927  0019EA                     u7207:
  5928  0019EA  2EE8               	decfsz	wreg,f,c
  5929  0019EC  D7FE               	bra	u7207
  5930  0019EE  2FA2               	decfsz	??_show_log& (0+255),f,b
  5931  0019F0  D7FC               	bra	u7207
  5932  0019F2  F000               	nop	
  5933  0019F4  0100               	movlb	0	; () banked
  5934  0019F6  2BB5               	incf	show_log@i& (0+255),f,b
  5935  0019F8  D7E9               	goto	l6339
  5936  0019FA                     l477:
  5937                           
  5938                           ; BSR set to: 0
  5939                           ;main.c: 721: }
  5940                           ;main.c: 722: uint16_t address = log_address;
  5941  0019FA  C09F  F0B8         	movff	show_log@log_address,show_log@address
  5942  0019FE  C0A0  F0B9         	movff	show_log@log_address+1,show_log@address+1
  5943                           
  5944                           ; BSR set to: 0
  5945                           ;main.c: 723: unsigned char year = Eeprom_ReadByte(address);
  5946  001A02  C0B8  F031         	movff	show_log@address,Eeprom_ReadByte@address
  5947  001A06  C0B9  F032         	movff	show_log@address+1,Eeprom_ReadByte@address+1
  5948  001A0A  EC0E  F01A         	call	_Eeprom_ReadByte	;wreg free
  5949  001A0E  0100               	movlb	0	; () banked
  5950  001A10  6FAF               	movwf	show_log@year& (0+255),b
  5951                           
  5952                           ; BSR set to: 0
  5953                           ;main.c: 724: address = next_address(address);
  5954  001A12  C0B8  F031         	movff	show_log@address,next_address@address
  5955  001A16  C0B9  F032         	movff	show_log@address+1,next_address@address+1
  5956  001A1A  EC51  F01A         	call	_next_address	;wreg free
  5957  001A1E  C031  F0B8         	movff	?_next_address,show_log@address
  5958  001A22  C032  F0B9         	movff	?_next_address+1,show_log@address+1
  5959                           
  5960                           ;main.c: 725: unsigned char month = Eeprom_ReadByte(address);
  5961  001A26  C0B8  F031         	movff	show_log@address,Eeprom_ReadByte@address
  5962  001A2A  C0B9  F032         	movff	show_log@address+1,Eeprom_ReadByte@address+1
  5963  001A2E  EC0E  F01A         	call	_Eeprom_ReadByte	;wreg free
  5964  001A32  0100               	movlb	0	; () banked
  5965  001A34  6FB0               	movwf	show_log@month& (0+255),b
  5966                           
  5967                           ;main.c: 726: address = next_address(address);
  5968  001A36  C0B8  F031         	movff	show_log@address,next_address@address
  5969  001A3A  C0B9  F032         	movff	show_log@address+1,next_address@address+1
  5970  001A3E  EC51  F01A         	call	_next_address	;wreg free
  5971  001A42  C031  F0B8         	movff	?_next_address,show_log@address
  5972  001A46  C032  F0B9         	movff	?_next_address+1,show_log@address+1
  5973                           
  5974                           ;main.c: 727: unsigned char day = Eeprom_ReadByte(address);
  5975  001A4A  C0B8  F031         	movff	show_log@address,Eeprom_ReadByte@address
  5976  001A4E  C0B9  F032         	movff	show_log@address+1,Eeprom_ReadByte@address+1
  5977  001A52  EC0E  F01A         	call	_Eeprom_ReadByte	;wreg free
  5978  001A56  0100               	movlb	0	; () banked
  5979  001A58  6FB1               	movwf	show_log@day& (0+255),b
  5980                           
  5981                           ; BSR set to: 0
  5982                           ;main.c: 728: address = next_address(address);
  5983  001A5A  C0B8  F031         	movff	show_log@address,next_address@address
  5984  001A5E  C0B9  F032         	movff	show_log@address+1,next_address@address+1
  5985  001A62  EC51  F01A         	call	_next_address	;wreg free
  5986  001A66  C031  F0B8         	movff	?_next_address,show_log@address
  5987  001A6A  C032  F0B9         	movff	?_next_address+1,show_log@address+1
  5988                           
  5989                           ;main.c: 729: unsigned char hour = Eeprom_ReadByte(address);
  5990  001A6E  C0B8  F031         	movff	show_log@address,Eeprom_ReadByte@address
  5991  001A72  C0B9  F032         	movff	show_log@address+1,Eeprom_ReadByte@address+1
  5992  001A76  EC0E  F01A         	call	_Eeprom_ReadByte	;wreg free
  5993  001A7A  0100               	movlb	0	; () banked
  5994  001A7C  6FB2               	movwf	show_log@hour& (0+255),b
  5995                           
  5996                           ; BSR set to: 0
  5997                           ;main.c: 730: address = next_address(address);
  5998  001A7E  C0B8  F031         	movff	show_log@address,next_address@address
  5999  001A82  C0B9  F032         	movff	show_log@address+1,next_address@address+1
  6000  001A86  EC51  F01A         	call	_next_address	;wreg free
  6001  001A8A  C031  F0B8         	movff	?_next_address,show_log@address
  6002  001A8E  C032  F0B9         	movff	?_next_address+1,show_log@address+1
  6003                           
  6004                           ;main.c: 731: unsigned char minute = Eeprom_ReadByte(address);
  6005  001A92  C0B8  F031         	movff	show_log@address,Eeprom_ReadByte@address
  6006  001A96  C0B9  F032         	movff	show_log@address+1,Eeprom_ReadByte@address+1
  6007  001A9A  EC0E  F01A         	call	_Eeprom_ReadByte	;wreg free
  6008  001A9E  0100               	movlb	0	; () banked
  6009  001AA0  6FB3               	movwf	show_log@minute& (0+255),b
  6010                           
  6011                           ;main.c: 732: address = next_address(address);
  6012  001AA2  C0B8  F031         	movff	show_log@address,next_address@address
  6013  001AA6  C0B9  F032         	movff	show_log@address+1,next_address@address+1
  6014  001AAA  EC51  F01A         	call	_next_address	;wreg free
  6015  001AAE  C031  F0B8         	movff	?_next_address,show_log@address
  6016  001AB2  C032  F0B9         	movff	?_next_address+1,show_log@address+1
  6017                           
  6018                           ;main.c: 733: unsigned char second = Eeprom_ReadByte(address);
  6019  001AB6  C0B8  F031         	movff	show_log@address,Eeprom_ReadByte@address
  6020  001ABA  C0B9  F032         	movff	show_log@address+1,Eeprom_ReadByte@address+1
  6021  001ABE  EC0E  F01A         	call	_Eeprom_ReadByte	;wreg free
  6022  001AC2  0100               	movlb	0	; () banked
  6023  001AC4  6FB4               	movwf	show_log@second& (0+255),b
  6024                           
  6025                           ; BSR set to: 0
  6026                           ;main.c: 734: address = next_address(address);
  6027  001AC6  C0B8  F031         	movff	show_log@address,next_address@address
  6028  001ACA  C0B9  F032         	movff	show_log@address+1,next_address@address+1
  6029  001ACE  EC51  F01A         	call	_next_address	;wreg free
  6030  001AD2  C031  F0B8         	movff	?_next_address,show_log@address
  6031  001AD6  C032  F0B9         	movff	?_next_address+1,show_log@address+1
  6032                           
  6033                           ;main.c: 736: unsigned int AA_num = Eeprom_ReadByte(address);
  6034  001ADA  C0B8  F031         	movff	show_log@address,Eeprom_ReadByte@address
  6035  001ADE  C0B9  F032         	movff	show_log@address+1,Eeprom_ReadByte@address+1
  6036  001AE2  EC0E  F01A         	call	_Eeprom_ReadByte	;wreg free
  6037  001AE6  0100               	movlb	0	; () banked
  6038  001AE8  6FA2               	movwf	??_show_log& (0+255),b
  6039  001AEA  0100               	movlb	0	; () banked
  6040  001AEC  51A2               	movf	??_show_log& (0+255),w,b
  6041  001AEE  0100               	movlb	0	; () banked
  6042  001AF0  6FA5               	movwf	show_log@AA_num& (0+255),b
  6043  001AF2  6BA6               	clrf	(show_log@AA_num+1)& (0+255),b
  6044                           
  6045                           ; BSR set to: 0
  6046                           ;main.c: 737: address = next_address(address);
  6047  001AF4  C0B8  F031         	movff	show_log@address,next_address@address
  6048  001AF8  C0B9  F032         	movff	show_log@address+1,next_address@address+1
  6049  001AFC  EC51  F01A         	call	_next_address	;wreg free
  6050  001B00  C031  F0B8         	movff	?_next_address,show_log@address
  6051  001B04  C032  F0B9         	movff	?_next_address+1,show_log@address+1
  6052                           
  6053                           ;main.c: 738: unsigned int C_num = Eeprom_ReadByte(address);
  6054  001B08  C0B8  F031         	movff	show_log@address,Eeprom_ReadByte@address
  6055  001B0C  C0B9  F032         	movff	show_log@address+1,Eeprom_ReadByte@address+1
  6056  001B10  EC0E  F01A         	call	_Eeprom_ReadByte	;wreg free
  6057  001B14  0100               	movlb	0	; () banked
  6058  001B16  6FA2               	movwf	??_show_log& (0+255),b
  6059  001B18  0100               	movlb	0	; () banked
  6060  001B1A  51A2               	movf	??_show_log& (0+255),w,b
  6061  001B1C  0100               	movlb	0	; () banked
  6062  001B1E  6FA7               	movwf	show_log@C_num& (0+255),b
  6063  001B20  6BA8               	clrf	(show_log@C_num+1)& (0+255),b
  6064                           
  6065                           ; BSR set to: 0
  6066                           ;main.c: 739: address = next_address(address);
  6067  001B22  C0B8  F031         	movff	show_log@address,next_address@address
  6068  001B26  C0B9  F032         	movff	show_log@address+1,next_address@address+1
  6069  001B2A  EC51  F01A         	call	_next_address	;wreg free
  6070  001B2E  C031  F0B8         	movff	?_next_address,show_log@address
  6071  001B32  C032  F0B9         	movff	?_next_address+1,show_log@address+1
  6072                           
  6073                           ;main.c: 740: unsigned int Nine_num = Eeprom_ReadByte(address);
  6074  001B36  C0B8  F031         	movff	show_log@address,Eeprom_ReadByte@address
  6075  001B3A  C0B9  F032         	movff	show_log@address+1,Eeprom_ReadByte@address+1
  6076  001B3E  EC0E  F01A         	call	_Eeprom_ReadByte	;wreg free
  6077  001B42  0100               	movlb	0	; () banked
  6078  001B44  6FA2               	movwf	??_show_log& (0+255),b
  6079  001B46  0100               	movlb	0	; () banked
  6080  001B48  51A2               	movf	??_show_log& (0+255),w,b
  6081  001B4A  0100               	movlb	0	; () banked
  6082  001B4C  6FA9               	movwf	show_log@Nine_num& (0+255),b
  6083  001B4E  6BAA               	clrf	(show_log@Nine_num+1)& (0+255),b
  6084                           
  6085                           ; BSR set to: 0
  6086                           ;main.c: 741: address = next_address(address);
  6087  001B50  C0B8  F031         	movff	show_log@address,next_address@address
  6088  001B54  C0B9  F032         	movff	show_log@address+1,next_address@address+1
  6089  001B58  EC51  F01A         	call	_next_address	;wreg free
  6090  001B5C  C031  F0B8         	movff	?_next_address,show_log@address
  6091  001B60  C032  F0B9         	movff	?_next_address+1,show_log@address+1
  6092                           
  6093                           ;main.c: 742: unsigned int Drain_num = Eeprom_ReadByte(address);
  6094  001B64  C0B8  F031         	movff	show_log@address,Eeprom_ReadByte@address
  6095  001B68  C0B9  F032         	movff	show_log@address+1,Eeprom_ReadByte@address+1
  6096  001B6C  EC0E  F01A         	call	_Eeprom_ReadByte	;wreg free
  6097  001B70  0100               	movlb	0	; () banked
  6098  001B72  6FA2               	movwf	??_show_log& (0+255),b
  6099  001B74  0100               	movlb	0	; () banked
  6100  001B76  51A2               	movf	??_show_log& (0+255),w,b
  6101  001B78  0100               	movlb	0	; () banked
  6102  001B7A  6FAB               	movwf	show_log@Drain_num& (0+255),b
  6103  001B7C  6BAC               	clrf	(show_log@Drain_num+1)& (0+255),b
  6104                           
  6105                           ; BSR set to: 0
  6106                           ;main.c: 743: address = next_address(address);
  6107  001B7E  C0B8  F031         	movff	show_log@address,next_address@address
  6108  001B82  C0B9  F032         	movff	show_log@address+1,next_address@address+1
  6109  001B86  EC51  F01A         	call	_next_address	;wreg free
  6110  001B8A  C031  F0B8         	movff	?_next_address,show_log@address
  6111  001B8E  C032  F0B9         	movff	?_next_address+1,show_log@address+1
  6112                           
  6113                           ;main.c: 744: unsigned int total_num = Eeprom_ReadByte(address);
  6114  001B92  C0B8  F031         	movff	show_log@address,Eeprom_ReadByte@address
  6115  001B96  C0B9  F032         	movff	show_log@address+1,Eeprom_ReadByte@address+1
  6116  001B9A  EC0E  F01A         	call	_Eeprom_ReadByte	;wreg free
  6117  001B9E  0100               	movlb	0	; () banked
  6118  001BA0  6FA2               	movwf	??_show_log& (0+255),b
  6119  001BA2  0100               	movlb	0	; () banked
  6120  001BA4  51A2               	movf	??_show_log& (0+255),w,b
  6121  001BA6  0100               	movlb	0	; () banked
  6122  001BA8  6FA3               	movwf	show_log@total_num& (0+255),b
  6123  001BAA  6BA4               	clrf	(show_log@total_num+1)& (0+255),b
  6124                           
  6125                           ; BSR set to: 0
  6126                           ;main.c: 745: address = next_address(address);
  6127  001BAC  C0B8  F031         	movff	show_log@address,next_address@address
  6128  001BB0  C0B9  F032         	movff	show_log@address+1,next_address@address+1
  6129  001BB4  EC51  F01A         	call	_next_address	;wreg free
  6130  001BB8  C031  F0B8         	movff	?_next_address,show_log@address
  6131  001BBC  C032  F0B9         	movff	?_next_address+1,show_log@address+1
  6132                           
  6133                           ;main.c: 746: unsigned int elapsed_time = Eeprom_ReadByte(address);
  6134  001BC0  C0B8  F031         	movff	show_log@address,Eeprom_ReadByte@address
  6135  001BC4  C0B9  F032         	movff	show_log@address+1,Eeprom_ReadByte@address+1
  6136  001BC8  EC0E  F01A         	call	_Eeprom_ReadByte	;wreg free
  6137  001BCC  0100               	movlb	0	; () banked
  6138  001BCE  6FA2               	movwf	??_show_log& (0+255),b
  6139  001BD0  0100               	movlb	0	; () banked
  6140  001BD2  51A2               	movf	??_show_log& (0+255),w,b
  6141  001BD4  0100               	movlb	0	; () banked
  6142  001BD6  6FAD               	movwf	show_log@elapsed_time& (0+255),b
  6143  001BD8  6BAE               	clrf	(show_log@elapsed_time+1)& (0+255),b
  6144                           
  6145                           ;main.c: 748: while (screenMode == currScreen){
  6146  001BDA  D08C               	goto	l6431
  6147  001BDC                     l6391:
  6148                           
  6149                           ; BSR set to: 0
  6150                           ;main.c: 749: lcdInst(0b10000000);;
  6151  001BDC  0E80               	movlw	128
  6152  001BDE  EC65  F01A         	call	_lcdInst
  6153                           
  6154                           ;main.c: 750: printf("%02x/%02x/%02x        ", year,month,day);
  6155  001BE2  0EB9               	movlw	low STR_20
  6156  001BE4  0100               	movlb	0	; () banked
  6157  001BE6  6F89               	movwf	printf@f& (0+255),b
  6158  001BE8  0EFD               	movlw	high STR_20
  6159  001BEA  0100               	movlb	0	; () banked
  6160  001BEC  6F8A               	movwf	(printf@f+1)& (0+255),b
  6161  001BEE  C0AF  F08B         	movff	show_log@year,?_printf+2
  6162  001BF2  0100               	movlb	0	; () banked
  6163  001BF4  6B8C               	clrf	(?_printf+3)& (0+255),b
  6164  001BF6  C0B0  F08D         	movff	show_log@month,?_printf+4
  6165  001BFA  0100               	movlb	0	; () banked
  6166  001BFC  6B8E               	clrf	(?_printf+5)& (0+255),b
  6167  001BFE  C0B1  F08F         	movff	show_log@day,?_printf+6
  6168  001C02  0100               	movlb	0	; () banked
  6169  001C04  6B90               	clrf	(?_printf+7)& (0+255),b
  6170  001C06  EC09  F00B         	call	_printf	;wreg free
  6171                           
  6172                           ;main.c: 751: lcdInst(0b11000000);;
  6173  001C0A  0EC0               	movlw	192
  6174  001C0C  EC65  F01A         	call	_lcdInst
  6175                           
  6176                           ;main.c: 752: printf("%02x:%02x:%02x        ", hour,minute, second);
  6177  001C10  0ED0               	movlw	low STR_21
  6178  001C12  0100               	movlb	0	; () banked
  6179  001C14  6F89               	movwf	printf@f& (0+255),b
  6180  001C16  0EFD               	movlw	high STR_21
  6181  001C18  0100               	movlb	0	; () banked
  6182  001C1A  6F8A               	movwf	(printf@f+1)& (0+255),b
  6183  001C1C  C0B2  F08B         	movff	show_log@hour,?_printf+2
  6184  001C20  0100               	movlb	0	; () banked
  6185  001C22  6B8C               	clrf	(?_printf+3)& (0+255),b
  6186  001C24  C0B3  F08D         	movff	show_log@minute,?_printf+4
  6187  001C28  0100               	movlb	0	; () banked
  6188  001C2A  6B8E               	clrf	(?_printf+5)& (0+255),b
  6189  001C2C  C0B4  F08F         	movff	show_log@second,?_printf+6
  6190  001C30  0100               	movlb	0	; () banked
  6191  001C32  6B90               	clrf	(?_printf+7)& (0+255),b
  6192  001C34  EC09  F00B         	call	_printf	;wreg free
  6193                           
  6194                           ;main.c: 753: for(unsigned char i=0;i<200;i++){
  6195  001C38  0E00               	movlw	0
  6196  001C3A  0100               	movlb	0	; () banked
  6197  001C3C  6FB6               	movwf	show_log@i_901& (0+255),b
  6198  001C3E                     l6399:
  6199                           
  6200                           ; BSR set to: 0
  6201  001C3E  0EC7               	movlw	199
  6202  001C40  0100               	movlb	0	; () banked
  6203  001C42  65B6               	cpfsgt	show_log@i_901& (0+255),b
  6204  001C44  D001               	goto	l6403
  6205  001C46  D012               	goto	l6411
  6206  001C48                     l6403:
  6207                           
  6208                           ; BSR set to: 0
  6209                           ;main.c: 754: if (screenMode != currScreen)
  6210  001C48  0100               	movlb	0	; () banked
  6211  001C4A  51A1               	movf	show_log@currScreen& (0+255),w,b
  6212  001C4C  0100               	movlb	0	; () banked
  6213  001C4E  19FC               	xorwf	_screenMode& (0+255),w,b
  6214  001C50  A4D8               	btfss	status,2,c
  6215  001C52  D00C               	goto	l6411
  6216                           
  6217                           ; BSR set to: 0
  6218                           ;main.c: 756: _delay((unsigned long)((10)*(10000000/4000.0)));
  6219                           
  6220                           ; BSR set to: 0
  6221                           
  6222                           ; BSR set to: 0
  6223                           ;main.c: 755: break;
  6224  001C54  0E21               	movlw	33
  6225  001C56  0100               	movlb	0	; () banked
  6226  001C58  6FA2               	movwf	??_show_log& (0+255),b
  6227  001C5A  0E76               	movlw	118
  6228  001C5C                     u7217:
  6229  001C5C  2EE8               	decfsz	wreg,f,c
  6230  001C5E  D7FE               	bra	u7217
  6231  001C60  2FA2               	decfsz	??_show_log& (0+255),f,b
  6232  001C62  D7FC               	bra	u7217
  6233  001C64  F000               	nop	
  6234  001C66  0100               	movlb	0	; () banked
  6235  001C68  2BB6               	incf	show_log@i_901& (0+255),f,b
  6236  001C6A  D7E9               	goto	l6399
  6237  001C6C                     l6411:
  6238                           
  6239                           ; BSR set to: 0
  6240                           ;main.c: 757: }
  6241                           ;main.c: 758: lcdInst(0b10000000);;
  6242  001C6C  0E80               	movlw	128
  6243  001C6E  EC65  F01A         	call	_lcdInst
  6244                           
  6245                           ;main.c: 759: printf("AA:%02d C:%02d 9V:%02d", AA_num, C_num, Nine_num);
  6246  001C72  0E15               	movlw	low STR_39
  6247  001C74  0100               	movlb	0	; () banked
  6248  001C76  6F89               	movwf	printf@f& (0+255),b
  6249  001C78  0EFE               	movlw	high STR_39
  6250  001C7A  0100               	movlb	0	; () banked
  6251  001C7C  6F8A               	movwf	(printf@f+1)& (0+255),b
  6252  001C7E  C0A5  F08B         	movff	show_log@AA_num,?_printf+2
  6253  001C82  C0A6  F08C         	movff	show_log@AA_num+1,?_printf+3
  6254  001C86  C0A7  F08D         	movff	show_log@C_num,?_printf+4
  6255  001C8A  C0A8  F08E         	movff	show_log@C_num+1,?_printf+5
  6256  001C8E  C0A9  F08F         	movff	show_log@Nine_num,?_printf+6
  6257  001C92  C0AA  F090         	movff	show_log@Nine_num+1,?_printf+7
  6258  001C96  EC09  F00B         	call	_printf	;wreg free
  6259                           
  6260                           ;main.c: 760: lcdInst(0b11000000);;
  6261  001C9A  0EC0               	movlw	192
  6262  001C9C  EC65  F01A         	call	_lcdInst
  6263                           
  6264                           ;main.c: 761: printf("X:%02d TIME:%ds    ", Drain_num, elapsed_time);
  6265  001CA0  0E41               	movlw	low STR_40
  6266  001CA2  0100               	movlb	0	; () banked
  6267  001CA4  6F89               	movwf	printf@f& (0+255),b
  6268  001CA6  0EFE               	movlw	high STR_40
  6269  001CA8  0100               	movlb	0	; () banked
  6270  001CAA  6F8A               	movwf	(printf@f+1)& (0+255),b
  6271  001CAC  C0AB  F08B         	movff	show_log@Drain_num,?_printf+2
  6272  001CB0  C0AC  F08C         	movff	show_log@Drain_num+1,?_printf+3
  6273  001CB4  C0AD  F08D         	movff	show_log@elapsed_time,?_printf+4
  6274  001CB8  C0AE  F08E         	movff	show_log@elapsed_time+1,?_printf+5
  6275  001CBC  EC09  F00B         	call	_printf	;wreg free
  6276                           
  6277                           ;main.c: 764: for(unsigned char i=0;i<200;i++){
  6278  001CC0  0E00               	movlw	0
  6279  001CC2  0100               	movlb	0	; () banked
  6280  001CC4  6FB7               	movwf	show_log@i_904& (0+255),b
  6281  001CC6                     l6419:
  6282                           
  6283                           ; BSR set to: 0
  6284  001CC6  0EC7               	movlw	199
  6285  001CC8  0100               	movlb	0	; () banked
  6286  001CCA  65B7               	cpfsgt	show_log@i_904& (0+255),b
  6287  001CCC  D001               	goto	l6423
  6288  001CCE  D012               	goto	l6431
  6289  001CD0                     l6423:
  6290                           
  6291                           ; BSR set to: 0
  6292                           ;main.c: 765: if (screenMode != currScreen)
  6293  001CD0  0100               	movlb	0	; () banked
  6294  001CD2  51A1               	movf	show_log@currScreen& (0+255),w,b
  6295  001CD4  0100               	movlb	0	; () banked
  6296  001CD6  19FC               	xorwf	_screenMode& (0+255),w,b
  6297  001CD8  A4D8               	btfss	status,2,c
  6298  001CDA  D00C               	goto	l6431
  6299                           
  6300                           ; BSR set to: 0
  6301                           ;main.c: 767: _delay((unsigned long)((10)*(10000000/4000.0)));
  6302                           
  6303                           ; BSR set to: 0
  6304                           
  6305                           ; BSR set to: 0
  6306                           ;main.c: 766: break;
  6307  001CDC  0E21               	movlw	33
  6308  001CDE  0100               	movlb	0	; () banked
  6309  001CE0  6FA2               	movwf	??_show_log& (0+255),b
  6310  001CE2  0E76               	movlw	118
  6311  001CE4                     u7227:
  6312  001CE4  2EE8               	decfsz	wreg,f,c
  6313  001CE6  D7FE               	bra	u7227
  6314  001CE8  2FA2               	decfsz	??_show_log& (0+255),f,b
  6315  001CEA  D7FC               	bra	u7227
  6316  001CEC  F000               	nop	
  6317  001CEE  0100               	movlb	0	; () banked
  6318  001CF0  2BB7               	incf	show_log@i_904& (0+255),f,b
  6319  001CF2  D7E9               	goto	l6419
  6320  001CF4                     l6431:
  6321                           
  6322                           ; BSR set to: 0
  6323  001CF4  0100               	movlb	0	; () banked
  6324  001CF6  51A1               	movf	show_log@currScreen& (0+255),w,b
  6325  001CF8  0100               	movlb	0	; () banked
  6326  001CFA  19FC               	xorwf	_screenMode& (0+255),w,b
  6327  001CFC  A4D8               	btfss	status,2,c
  6328  001CFE  0012               	return	
  6329  001D00  D76D               	goto	l6391
  6330  001D02                     __end_of_show_log:
  6331                           	opt stack 0
  6332                           tblptru	equ	0xFF8
  6333                           tblptrh	equ	0xFF7
  6334                           tblptrl	equ	0xFF6
  6335                           tablat	equ	0xFF5
  6336                           prodh	equ	0xFF4
  6337                           prodl	equ	0xFF3
  6338                           intcon	equ	0xFF2
  6339                           intcon2	equ	0xFF1
  6340                           intcon3	equ	0xFF0
  6341                           postinc0	equ	0xFEE
  6342                           wreg	equ	0xFE8
  6343                           postdec1	equ	0xFE5
  6344                           fsr1l	equ	0xFE1
  6345                           indf2	equ	0xFDF
  6346                           fsr2h	equ	0xFDA
  6347                           fsr2l	equ	0xFD9
  6348                           status	equ	0xFD8
  6349                           
  6350 ;; *************** function _printf *****************
  6351 ;; Defined at:
  6352 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  6353 ;; Parameters:    Size  Location     Type
  6354 ;;  f               2    9[BANK0 ] PTR const unsigned char 
  6355 ;;		 -> STR_40(20), STR_39(23), STR_38(23), STR_37(23), 
  6356 ;;		 -> STR_36(17), STR_35(15), STR_34(17), STR_33(23), 
  6357 ;;		 -> STR_32(23), STR_31(17), STR_30(17), STR_29(17), 
  6358 ;;		 -> STR_28(17), STR_27(17), STR_26(17), STR_25(17), 
  6359 ;;		 -> STR_24(17), STR_23(17), STR_22(17), STR_21(23), 
  6360 ;;		 -> STR_20(23), STR_19(17), STR_18(21), STR_17(17), 
  6361 ;;		 -> STR_16(21), STR_15(17), STR_14(21), STR_13(17), 
  6362 ;;		 -> STR_12(19), STR_11(17), STR_10(19), STR_9(17), 
  6363 ;;		 -> STR_8(25), STR_7(17), STR_6(17), STR_5(17), 
  6364 ;;		 -> STR_4(17), STR_3(17), STR_2(17), STR_1(17), 
  6365 ;; Auto vars:     Size  Location     Type
  6366 ;;  idx             1   21[BANK0 ] unsigned char 
  6367 ;;  tmpval          4    0        struct .
  6368 ;;  cp              3    0        PTR const unsigned char 
  6369 ;;  width           2   28[BANK0 ] int 
  6370 ;;  val             2   25[BANK0 ] unsigned int 
  6371 ;;  ap              2   22[BANK0 ] PTR void [1]
  6372 ;;		 -> ?i2_printf(2), ?_printf(2), 
  6373 ;;  len             2    0        unsigned int 
  6374 ;;  c               1   30[BANK0 ] char 
  6375 ;;  flag            1   27[BANK0 ] unsigned char 
  6376 ;;  prec            1   24[BANK0 ] char 
  6377 ;; Return value:  Size  Location     Type
  6378 ;;                  2    9[BANK0 ] int 
  6379 ;; Registers used:
  6380 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6381 ;; Tracked objects:
  6382 ;;		On entry : 0/0
  6383 ;;		On exit  : 0/0
  6384 ;;		Unchanged: 0/0
  6385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6386 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6387 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6388 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6389 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6390 ;;Total ram usage:       22 bytes
  6391 ;; Hardware stack levels used:    1
  6392 ;; Hardware stack levels required when called:    7
  6393 ;; This function calls:
  6394 ;;		___lwdiv
  6395 ;;		___lwmod
  6396 ;;		___wmul
  6397 ;;		_isdigit
  6398 ;;		_putch
  6399 ;; This function is called by:
  6400 ;;		_main
  6401 ;;		_testBatteries
  6402 ;;		_show_log
  6403 ;; This function uses a non-reentrant model
  6404 ;;
  6405                           
  6406                           	psect	text9
  6407  001612                     __ptext9:
  6408                           	opt stack 0
  6409  001612                     _printf:
  6410                           	opt stack 22
  6411                           
  6412                           ;doprnt.c: 466: va_list ap;
  6413                           ;doprnt.c: 499: signed char c;
  6414                           ;doprnt.c: 501: int width;
  6415                           ;doprnt.c: 506: signed char prec;
  6416                           ;doprnt.c: 508: unsigned char flag;
  6417                           ;doprnt.c: 523: union {
  6418                           ;doprnt.c: 524: unsigned long vd;
  6419                           ;doprnt.c: 525: double integ;
  6420                           ;doprnt.c: 526: } tmpval;
  6421                           ;doprnt.c: 528: unsigned int val;
  6422                           ;doprnt.c: 529: unsigned len;
  6423                           ;doprnt.c: 530: const char * cp;
  6424                           ;doprnt.c: 533: *ap = __va_start();
  6425                           
  6426                           ; BSR set to: 0
  6427                           ;incstack = 0
  6428  001612  0E8B               	movlw	low (?_printf+2)
  6429  001614  0100               	movlb	0	; () banked
  6430  001616  6F96               	movwf	printf@ap& (0+255),b
  6431  001618  0E00               	movlw	high (?_printf+2)
  6432  00161A  0100               	movlb	0	; () banked
  6433  00161C  6F97               	movwf	(printf@ap+1)& (0+255),b
  6434                           
  6435                           ;doprnt.c: 536: while(c = *f++) {
  6436  00161E  D1C4               	goto	l5905
  6437  001620                     l5779:
  6438                           
  6439                           ; BSR set to: 0
  6440                           ;doprnt.c: 538: if(c != '%')
  6441  001620  0E25               	movlw	37
  6442  001622  0100               	movlb	0	; () banked
  6443  001624  199E               	xorwf	printf@c& (0+255),w,b
  6444  001626  B4D8               	btfsc	status,2,c
  6445  001628  D005               	goto	l5783
  6446                           
  6447                           ; BSR set to: 0
  6448                           ;doprnt.c: 540: {
  6449                           ;doprnt.c: 541: (putch(c) );
  6450  00162A  0100               	movlb	0	; () banked
  6451  00162C  519E               	movf	printf@c& (0+255),w,b
  6452  00162E  EC5F  F01A         	call	_putch
  6453                           
  6454                           ;doprnt.c: 542: continue;
  6455  001632  D1BA               	goto	l5905
  6456  001634                     l5783:
  6457                           
  6458                           ;doprnt.c: 543: }
  6459                           ;doprnt.c: 546: width = 0;
  6460  001634  0E00               	movlw	0
  6461  001636  0100               	movlb	0	; () banked
  6462  001638  6F9D               	movwf	(printf@width+1)& (0+255),b
  6463  00163A  0E00               	movlw	0
  6464  00163C  6F9C               	movwf	printf@width& (0+255),b
  6465                           
  6466                           ;doprnt.c: 548: flag = 0;
  6467  00163E  0E00               	movlw	0
  6468  001640  0100               	movlb	0	; () banked
  6469  001642  6F9B               	movwf	printf@flag& (0+255),b
  6470                           
  6471                           ; BSR set to: 0
  6472                           ;doprnt.c: 551: switch(*f) {
  6473                           
  6474                           ;doprnt.c: 550: for(;;) {
  6475  001644  D005               	goto	l5789
  6476  001646                     l5785:
  6477                           
  6478                           ;doprnt.c: 580: flag |= 0x04;
  6479  001646  0100               	movlb	0	; () banked
  6480  001648  859B               	bsf	printf@flag& (0+255),2,b
  6481                           
  6482                           ;doprnt.c: 581: f++;
  6483  00164A  0100               	movlb	0	; () banked
  6484  00164C  4B89               	infsnz	printf@f& (0+255),f,b
  6485  00164E  2B8A               	incf	(printf@f+1)& (0+255),f,b
  6486  001650                     l5789:
  6487  001650  C089  FFF6         	movff	printf@f,tblptrl
  6488  001654  C08A  FFF7         	movff	printf@f+1,tblptrh
  6489  001658                     	if	0	;tblptru may be non-zero
  6490  001658                     	endif
  6491  001658                     	if	0	;tblptru may be non-zero
  6492  001658                     	endif
  6493  001658  0008               	tblrd		*
  6494  00165A  50F5               	movf	tablat,w,c
  6495                           
  6496                           ; Switch size 1, requested type "space"
  6497                           ; Number of cases is 1, Range of values is 48 to 48
  6498                           ; switch strategies available:
  6499                           ; Name         Instructions Cycles
  6500                           ; simple_byte            4     3 (average)
  6501                           ;	Chosen strategy is simple_byte
  6502  00165C  0A30               	xorlw	48	; case 48
  6503  00165E  B4D8               	btfsc	status,2,c
  6504  001660  D7F2               	goto	l5785
  6505                           
  6506                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  6507                           
  6508                           ;doprnt.c: 586: }
  6509                           
  6510                           ;doprnt.c: 585: break;
  6511  001662  C089  FFF6         	movff	printf@f,tblptrl
  6512  001666  C08A  FFF7         	movff	printf@f+1,tblptrh
  6513  00166A                     	if	0	;tblptru may be non-zero
  6514  00166A                     	endif
  6515  00166A                     	if	0	;tblptru may be non-zero
  6516  00166A                     	endif
  6517  00166A  0008               	tblrd		*
  6518  00166C  50F5               	movf	tablat,w,c
  6519  00166E  ECE3  F019         	call	_isdigit
  6520  001672  A0D8               	btfss	status,0,c
  6521  001674  D044               	goto	l5807
  6522                           
  6523                           ;doprnt.c: 598: width = 0;
  6524  001676  0E00               	movlw	0
  6525  001678  0100               	movlb	0	; () banked
  6526  00167A  6F9D               	movwf	(printf@width+1)& (0+255),b
  6527  00167C  0E00               	movlw	0
  6528  00167E  6F9C               	movwf	printf@width& (0+255),b
  6529  001680                     l5795:
  6530                           
  6531                           ;doprnt.c: 600: width *= 10;
  6532  001680  C09C  F080         	movff	printf@width,___wmul@multiplier
  6533  001684  C09D  F081         	movff	printf@width+1,___wmul@multiplier+1
  6534  001688  0E00               	movlw	0
  6535  00168A  0100               	movlb	0	; () banked
  6536  00168C  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6537  00168E  0E0A               	movlw	10
  6538  001690  6F82               	movwf	___wmul@multiplicand& (0+255),b
  6539  001692  EC5B  F019         	call	___wmul	;wreg free
  6540  001696  C080  F09C         	movff	?___wmul,printf@width
  6541  00169A  C081  F09D         	movff	?___wmul+1,printf@width+1
  6542                           
  6543                           ;doprnt.c: 601: width += *f++ - '0';
  6544  00169E  0ED0               	movlw	208
  6545  0016A0  0100               	movlb	0	; () banked
  6546  0016A2  6F91               	movwf	??_printf& (0+255),b
  6547  0016A4  0EFF               	movlw	255
  6548  0016A6  0100               	movlb	0	; () banked
  6549  0016A8  6F92               	movwf	(??_printf+1)& (0+255),b
  6550  0016AA  C089  FFF6         	movff	printf@f,tblptrl
  6551  0016AE  C08A  FFF7         	movff	printf@f+1,tblptrh
  6552  0016B2                     	if	0	;tblptru may be non-zero
  6553  0016B2                     	endif
  6554  0016B2                     	if	0	;tblptru may be non-zero
  6555  0016B2                     	endif
  6556  0016B2  0008               	tblrd		*
  6557  0016B4  50F5               	movf	tablat,w,c
  6558  0016B6  0100               	movlb	0	; () banked
  6559  0016B8  6F93               	movwf	(??_printf+2)& (0+255),b
  6560  0016BA  6B94               	clrf	(??_printf+3)& (0+255),b
  6561  0016BC  0100               	movlb	0	; () banked
  6562  0016BE  5191               	movf	??_printf& (0+255),w,b
  6563  0016C0  0100               	movlb	0	; () banked
  6564  0016C2  2793               	addwf	(??_printf+2)& (0+255),f,b
  6565  0016C4  0100               	movlb	0	; () banked
  6566  0016C6  5192               	movf	(??_printf+1)& (0+255),w,b
  6567  0016C8  0100               	movlb	0	; () banked
  6568  0016CA  2394               	addwfc	(??_printf+3)& (0+255),f,b
  6569  0016CC  0100               	movlb	0	; () banked
  6570  0016CE  5193               	movf	(??_printf+2)& (0+255),w,b
  6571  0016D0  0100               	movlb	0	; () banked
  6572  0016D2  279C               	addwf	printf@width& (0+255),f,b
  6573  0016D4  0100               	movlb	0	; () banked
  6574  0016D6  5194               	movf	(??_printf+3)& (0+255),w,b
  6575  0016D8  0100               	movlb	0	; () banked
  6576  0016DA  239D               	addwfc	(printf@width+1)& (0+255),f,b
  6577                           
  6578                           ; BSR set to: 0
  6579  0016DC  0100               	movlb	0	; () banked
  6580  0016DE  4B89               	infsnz	printf@f& (0+255),f,b
  6581  0016E0  2B8A               	incf	(printf@f+1)& (0+255),f,b
  6582                           
  6583                           ; BSR set to: 0
  6584                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  6585  0016E2  C089  FFF6         	movff	printf@f,tblptrl
  6586  0016E6  C08A  FFF7         	movff	printf@f+1,tblptrh
  6587  0016EA                     	if	0	;tblptru may be non-zero
  6588  0016EA                     	endif
  6589  0016EA                     	if	0	;tblptru may be non-zero
  6590  0016EA                     	endif
  6591  0016EA  0008               	tblrd		*
  6592  0016EC  50F5               	movf	tablat,w,c
  6593  0016EE  ECE3  F019         	call	_isdigit
  6594  0016F2  A0D8               	btfss	status,0,c
  6595  0016F4  D004               	goto	l5807
  6596  0016F6  D7C4               	goto	l5795
  6597  0016F8                     l5803:
  6598                           
  6599                           ;doprnt.c: 721: flag |= 0x80;
  6600  0016F8  0100               	movlb	0	; () banked
  6601  0016FA  8F9B               	bsf	printf@flag& (0+255),7,b
  6602                           
  6603                           ;doprnt.c: 723: break;
  6604  0016FC  D019               	goto	l621
  6605  0016FE                     l5807:
  6606  0016FE  C089  FFF6         	movff	printf@f,tblptrl
  6607  001702  C08A  FFF7         	movff	printf@f+1,tblptrh
  6608  001706  0100               	movlb	0	; () banked
  6609  001708  4B89               	infsnz	printf@f& (0+255),f,b
  6610  00170A  2B8A               	incf	(printf@f+1)& (0+255),f,b
  6611  00170C                     	if	0	;tblptru may be non-zero
  6612  00170C                     	endif
  6613  00170C                     	if	0	;tblptru may be non-zero
  6614  00170C                     	endif
  6615  00170C  0008               	tblrd		*
  6616  00170E  CFF5 F09E          	movff	tablat,printf@c
  6617  001712  0100               	movlb	0	; () banked
  6618  001714  519E               	movf	printf@c& (0+255),w,b
  6619                           
  6620                           ; Switch size 1, requested type "space"
  6621                           ; Number of cases is 4, Range of values is 0 to 120
  6622                           ; switch strategies available:
  6623                           ; Name         Instructions Cycles
  6624                           ; simple_byte           13     7 (average)
  6625                           ;	Chosen strategy is simple_byte
  6626  001716  0A00               	xorlw	0	; case 0
  6627  001718  B4D8               	btfsc	status,2,c
  6628  00171A  0012               	return	
  6629  00171C  0A64               	xorlw	100	; case 100
  6630  00171E  B4D8               	btfsc	status,2,c
  6631  001720  D007               	goto	l621
  6632  001722  0A0D               	xorlw	13	; case 105
  6633  001724  B4D8               	btfsc	status,2,c
  6634  001726  D004               	goto	l621
  6635  001728  0A11               	xorlw	17	; case 120
  6636  00172A  B4D8               	btfsc	status,2,c
  6637  00172C  D7E5               	goto	l5803
  6638  00172E  D13C               	goto	l5905
  6639  001730                     l621:
  6640                           
  6641                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  6642  001730  0100               	movlb	0	; () banked
  6643  001732  BF9B               	btfsc	printf@flag& (0+255),7,b
  6644  001734  D019               	goto	l5819
  6645                           
  6646                           ; BSR set to: 0
  6647                           ;doprnt.c: 1253: {
  6648                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  6649  001736  C096  FFD9         	movff	printf@ap,fsr2l
  6650  00173A  C097  FFDA         	movff	printf@ap+1,fsr2h
  6651  00173E  CFDE F099          	movff	postinc2,printf@val
  6652  001742  CFDD F09A          	movff	postdec2,printf@val+1
  6653                           
  6654                           ; BSR set to: 0
  6655  001746  0E02               	movlw	2
  6656  001748  0100               	movlb	0	; () banked
  6657  00174A  2796               	addwf	printf@ap& (0+255),f,b
  6658  00174C  0E00               	movlw	0
  6659  00174E  2397               	addwfc	(printf@ap+1)& (0+255),f,b
  6660                           
  6661                           ; BSR set to: 0
  6662                           ;doprnt.c: 1261: if((int)val < 0) {
  6663  001750  0100               	movlb	0	; () banked
  6664  001752  AF9A               	btfss	(printf@val+1)& (0+255),7,b
  6665  001754  D053               	goto	l5853
  6666                           
  6667                           ; BSR set to: 0
  6668                           ;doprnt.c: 1262: flag |= 0x03;
  6669  001756  0E03               	movlw	3
  6670  001758  0100               	movlb	0	; () banked
  6671  00175A  139B               	iorwf	printf@flag& (0+255),f,b
  6672                           
  6673                           ; BSR set to: 0
  6674                           ;doprnt.c: 1263: val = -val;
  6675  00175C  0100               	movlb	0	; () banked
  6676  00175E  6D99               	negf	printf@val& (0+255),b
  6677  001760  1F9A               	comf	(printf@val+1)& (0+255),f,b
  6678  001762  B0D8               	btfsc	status,0,c
  6679  001764  2B9A               	incf	(printf@val+1)& (0+255),f,b
  6680                           
  6681                           ; BSR set to: 0
  6682                           ;doprnt.c: 1264: }
  6683                           ;doprnt.c: 1266: }
  6684  001766  D04A               	goto	l5853
  6685  001768                     l5819:
  6686                           
  6687                           ; BSR set to: 0
  6688                           ;doprnt.c: 1268: else
  6689                           ;doprnt.c: 1273: {
  6690                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  6691  001768  C096  FFD9         	movff	printf@ap,fsr2l
  6692  00176C  C097  FFDA         	movff	printf@ap+1,fsr2h
  6693  001770  CFDE F099          	movff	postinc2,printf@val
  6694  001774  CFDD F09A          	movff	postdec2,printf@val+1
  6695                           
  6696                           ; BSR set to: 0
  6697  001778  0E02               	movlw	2
  6698  00177A  0100               	movlb	0	; () banked
  6699  00177C  2796               	addwf	printf@ap& (0+255),f,b
  6700  00177E  0E00               	movlw	0
  6701  001780  2397               	addwfc	(printf@ap+1)& (0+255),f,b
  6702                           
  6703                           ; BSR set to: 0
  6704                           ;doprnt.c: 1287: }
  6705                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  6706  001782  D03C               	goto	l5853
  6707  001784                     l5823:
  6708                           
  6709                           ; BSR set to: 0
  6710                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6711  001784  0E01               	movlw	1
  6712  001786  0100               	movlb	0	; () banked
  6713  001788  6F9E               	movwf	printf@c& (0+255),b
  6714  00178A                     l5825:
  6715                           
  6716                           ; BSR set to: 0
  6717  00178A  0E05               	movlw	5
  6718  00178C  0100               	movlb	0	; () banked
  6719  00178E  199E               	xorwf	printf@c& (0+255),w,b
  6720  001790  B4D8               	btfsc	status,2,c
  6721  001792  D03D               	goto	l5855
  6722                           
  6723                           ; BSR set to: 0
  6724                           ;doprnt.c: 1306: if(val < dpowers[c])
  6725                           
  6726                           ; BSR set to: 0
  6727                           
  6728                           ; BSR set to: 0
  6729  001794  0100               	movlb	0	; () banked
  6730  001796  519E               	movf	printf@c& (0+255),w,b
  6731  001798  0D02               	mullw	2
  6732  00179A  0E8E               	movlw	low _dpowers
  6733  00179C  24F3               	addwf	prodl,w,c
  6734  00179E  6EF6               	movwf	tblptrl,c
  6735  0017A0  0EFD               	movlw	high _dpowers
  6736  0017A2  20F4               	addwfc	prodh,w,c
  6737  0017A4  6EF7               	movwf	tblptrh,c
  6738  0017A6                     	if	0	;There are less than 3 active tblptr bytes
  6739  0017A6                     	endif
  6740  0017A6  0009               	tblrd		*+
  6741  0017A8  50F5               	movf	tablat,w,c
  6742  0017AA  0100               	movlb	0	; () banked
  6743  0017AC  5D99               	subwf	printf@val& (0+255),w,b
  6744  0017AE  0009               	tblrd		*+
  6745  0017B0  50F5               	movf	tablat,w,c
  6746  0017B2  0100               	movlb	0	; () banked
  6747  0017B4  599A               	subwfb	(printf@val+1)& (0+255),w,b
  6748  0017B6  A0D8               	btfss	status,0,c
  6749  0017B8  D02A               	goto	l5855
  6750                           
  6751                           ; BSR set to: 0
  6752                           
  6753                           ; BSR set to: 0
  6754                           
  6755                           ; BSR set to: 0
  6756                           ;doprnt.c: 1307: break;
  6757  0017BA  0100               	movlb	0	; () banked
  6758  0017BC  2B9E               	incf	printf@c& (0+255),f,b
  6759  0017BE  D7E5               	goto	l5825
  6760  0017C0                     l5837:
  6761                           
  6762                           ; BSR set to: 0
  6763                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  6764  0017C0  0E01               	movlw	1
  6765  0017C2  0100               	movlb	0	; () banked
  6766  0017C4  6F9E               	movwf	printf@c& (0+255),b
  6767  0017C6                     l5839:
  6768                           
  6769                           ; BSR set to: 0
  6770  0017C6  0E04               	movlw	4
  6771  0017C8  0100               	movlb	0	; () banked
  6772  0017CA  199E               	xorwf	printf@c& (0+255),w,b
  6773  0017CC  B4D8               	btfsc	status,2,c
  6774  0017CE  D01F               	goto	l5855
  6775                           
  6776                           ; BSR set to: 0
  6777                           ;doprnt.c: 1317: if(val < hexpowers[c])
  6778                           
  6779                           ; BSR set to: 0
  6780                           
  6781                           ; BSR set to: 0
  6782  0017D0  0100               	movlb	0	; () banked
  6783  0017D2  519E               	movf	printf@c& (0+255),w,b
  6784  0017D4  0D02               	mullw	2
  6785  0017D6  0E98               	movlw	low _hexpowers
  6786  0017D8  24F3               	addwf	prodl,w,c
  6787  0017DA  6EF6               	movwf	tblptrl,c
  6788  0017DC  0EFD               	movlw	high _hexpowers
  6789  0017DE  20F4               	addwfc	prodh,w,c
  6790  0017E0  6EF7               	movwf	tblptrh,c
  6791  0017E2                     	if	0	;There are less than 3 active tblptr bytes
  6792  0017E2                     	endif
  6793  0017E2  0009               	tblrd		*+
  6794  0017E4  50F5               	movf	tablat,w,c
  6795  0017E6  0100               	movlb	0	; () banked
  6796  0017E8  5D99               	subwf	printf@val& (0+255),w,b
  6797  0017EA  0009               	tblrd		*+
  6798  0017EC  50F5               	movf	tablat,w,c
  6799  0017EE  0100               	movlb	0	; () banked
  6800  0017F0  599A               	subwfb	(printf@val+1)& (0+255),w,b
  6801  0017F2  A0D8               	btfss	status,0,c
  6802  0017F4  D00C               	goto	l5855
  6803                           
  6804                           ; BSR set to: 0
  6805                           
  6806                           ; BSR set to: 0
  6807                           
  6808                           ; BSR set to: 0
  6809                           ;doprnt.c: 1318: break;
  6810  0017F6  0100               	movlb	0	; () banked
  6811  0017F8  2B9E               	incf	printf@c& (0+255),f,b
  6812  0017FA  D7E5               	goto	l5839
  6813  0017FC                     l5853:
  6814                           
  6815                           ; BSR set to: 0
  6816  0017FC  0100               	movlb	0	; () banked
  6817  0017FE  519B               	movf	printf@flag& (0+255),w,b
  6818  001800  0B80               	andlw	128
  6819                           
  6820                           ; Switch size 1, requested type "space"
  6821                           ; Number of cases is 2, Range of values is 0 to 128
  6822                           ; switch strategies available:
  6823                           ; Name         Instructions Cycles
  6824                           ; simple_byte            7     4 (average)
  6825                           ;	Chosen strategy is simple_byte
  6826  001802  0A00               	xorlw	0	; case 0
  6827  001804  B4D8               	btfsc	status,2,c
  6828  001806  D7BE               	goto	l5823
  6829  001808  0A80               	xorlw	128	; case 128
  6830  00180A  B4D8               	btfsc	status,2,c
  6831  00180C  D7D9               	goto	l5837
  6832  00180E                     l5855:
  6833                           
  6834                           ; BSR set to: 0
  6835                           ;doprnt.c: 1345: if(width && flag & 0x03)
  6836  00180E  0100               	movlb	0	; () banked
  6837  001810  519C               	movf	printf@width& (0+255),w,b
  6838  001812  0100               	movlb	0	; () banked
  6839  001814  119D               	iorwf	(printf@width+1)& (0+255),w,b
  6840  001816  B4D8               	btfsc	status,2,c
  6841  001818  D00B               	goto	l5861
  6842                           
  6843                           ; BSR set to: 0
  6844  00181A  C09B  F091         	movff	printf@flag,??_printf
  6845  00181E  0E03               	movlw	3
  6846  001820  0100               	movlb	0	; () banked
  6847  001822  1791               	andwf	??_printf& (0+255),f,b
  6848  001824  B4D8               	btfsc	status,2,c
  6849  001826  D004               	goto	l5861
  6850                           
  6851                           ; BSR set to: 0
  6852                           ;doprnt.c: 1346: width--;
  6853  001828  0100               	movlb	0	; () banked
  6854  00182A  079C               	decf	printf@width& (0+255),f,b
  6855  00182C  A0D8               	btfss	status,0,c
  6856  00182E  079D               	decf	(printf@width+1)& (0+255),f,b
  6857  001830                     l5861:
  6858                           
  6859                           ; BSR set to: 0
  6860                           ;doprnt.c: 1381: if(width > c)
  6861  001830  0E80               	movlw	128
  6862  001832  0100               	movlb	0	; () banked
  6863  001834  BF9E               	btfsc	printf@c& (0+255),7,b
  6864  001836  0E7F               	movlw	127
  6865  001838  0100               	movlb	0	; () banked
  6866  00183A  6F91               	movwf	??_printf& (0+255),b
  6867  00183C  0100               	movlb	0	; () banked
  6868  00183E  519C               	movf	printf@width& (0+255),w,b
  6869  001840  0100               	movlb	0	; () banked
  6870  001842  5D9E               	subwf	printf@c& (0+255),w,b
  6871  001844  0100               	movlb	0	; () banked
  6872  001846  519D               	movf	(printf@width+1)& (0+255),w,b
  6873  001848  0A80               	xorlw	128
  6874  00184A  0100               	movlb	0	; () banked
  6875  00184C  5991               	subwfb	??_printf& (0+255),w,b
  6876  00184E  B0D8               	btfsc	status,0,c
  6877  001850  D00B               	goto	l5865
  6878                           
  6879                           ; BSR set to: 0
  6880                           ;doprnt.c: 1382: width -= c;
  6881  001852  0100               	movlb	0	; () banked
  6882  001854  519E               	movf	printf@c& (0+255),w,b
  6883  001856  0100               	movlb	0	; () banked
  6884  001858  5F9C               	subwf	printf@width& (0+255),f,b
  6885  00185A  0E00               	movlw	0
  6886  00185C  0100               	movlb	0	; () banked
  6887  00185E  BF9E               	btfsc	printf@c& (0+255),7,b
  6888  001860  0EFF               	movlw	255
  6889  001862  0100               	movlb	0	; () banked
  6890  001864  5B9D               	subwfb	(printf@width+1)& (0+255),f,b
  6891  001866  D005               	goto	l5867
  6892  001868                     l5865:
  6893                           
  6894                           ; BSR set to: 0
  6895                           ;doprnt.c: 1383: else
  6896                           ;doprnt.c: 1384: width = 0;
  6897  001868  0E00               	movlw	0
  6898  00186A  0100               	movlb	0	; () banked
  6899  00186C  6F9D               	movwf	(printf@width+1)& (0+255),b
  6900  00186E  0E00               	movlw	0
  6901  001870  6F9C               	movwf	printf@width& (0+255),b
  6902  001872                     l5867:
  6903                           
  6904                           ; BSR set to: 0
  6905                           ;doprnt.c: 1387: if(flag & 0x04) {
  6906  001872  0100               	movlb	0	; () banked
  6907  001874  A59B               	btfss	printf@flag& (0+255),2,b
  6908  001876  D018               	goto	l5879
  6909                           
  6910                           ; BSR set to: 0
  6911                           ;doprnt.c: 1392: if(flag & 0x03)
  6912  001878  C09B  F091         	movff	printf@flag,??_printf
  6913  00187C  0E03               	movlw	3
  6914  00187E  0100               	movlb	0	; () banked
  6915  001880  1791               	andwf	??_printf& (0+255),f,b
  6916  001882  B4D8               	btfsc	status,2,c
  6917  001884  D003               	goto	l5873
  6918                           
  6919                           ; BSR set to: 0
  6920                           ;doprnt.c: 1393: (putch('-') );
  6921  001886  0E2D               	movlw	45
  6922  001888  EC5F  F01A         	call	_putch
  6923  00188C                     l5873:
  6924                           
  6925                           ;doprnt.c: 1415: if(width)
  6926  00188C  0100               	movlb	0	; () banked
  6927  00188E  519C               	movf	printf@width& (0+255),w,b
  6928  001890  0100               	movlb	0	; () banked
  6929  001892  119D               	iorwf	(printf@width+1)& (0+255),w,b
  6930  001894  B4D8               	btfsc	status,2,c
  6931  001896  D025               	goto	l5889
  6932                           
  6933                           ; BSR set to: 0
  6934                           ;doprnt.c: 1417: (putch('0') );
  6935                           
  6936                           ; BSR set to: 0
  6937                           
  6938                           ;doprnt.c: 1416: do
  6939  001898  0E30               	movlw	48
  6940  00189A  EC5F  F01A         	call	_putch
  6941                           
  6942                           ;doprnt.c: 1418: while(--width);
  6943  00189E  0100               	movlb	0	; () banked
  6944  0018A0  079C               	decf	printf@width& (0+255),f,b
  6945  0018A2  A0D8               	btfss	status,0,c
  6946  0018A4  079D               	decf	(printf@width+1)& (0+255),f,b
  6947  0018A6  D7F2               	goto	l5873
  6948  0018A8                     l5879:
  6949                           
  6950                           ; BSR set to: 0
  6951                           ;doprnt.c: 1422: {
  6952                           ;doprnt.c: 1424: if(width
  6953                           ;doprnt.c: 1428: )
  6954  0018A8  0100               	movlb	0	; () banked
  6955  0018AA  519C               	movf	printf@width& (0+255),w,b
  6956  0018AC  0100               	movlb	0	; () banked
  6957  0018AE  119D               	iorwf	(printf@width+1)& (0+255),w,b
  6958  0018B0  B4D8               	btfsc	status,2,c
  6959  0018B2  D00D               	goto	l5885
  6960  0018B4                     l5881:
  6961                           
  6962                           ; BSR set to: 0
  6963                           ;doprnt.c: 1430: (putch(' ') );
  6964  0018B4  0E20               	movlw	32
  6965  0018B6  EC5F  F01A         	call	_putch
  6966                           
  6967                           ;doprnt.c: 1431: while(--width);
  6968  0018BA  0100               	movlb	0	; () banked
  6969  0018BC  079C               	decf	printf@width& (0+255),f,b
  6970  0018BE  A0D8               	btfss	status,0,c
  6971  0018C0  079D               	decf	(printf@width+1)& (0+255),f,b
  6972  0018C2  0100               	movlb	0	; () banked
  6973  0018C4  519C               	movf	printf@width& (0+255),w,b
  6974  0018C6  0100               	movlb	0	; () banked
  6975  0018C8  119D               	iorwf	(printf@width+1)& (0+255),w,b
  6976  0018CA  A4D8               	btfss	status,2,c
  6977  0018CC  D7F3               	goto	l5881
  6978  0018CE                     l5885:
  6979                           
  6980                           ; BSR set to: 0
  6981                           ;doprnt.c: 1438: if(flag & 0x03)
  6982  0018CE  C09B  F091         	movff	printf@flag,??_printf
  6983  0018D2  0E03               	movlw	3
  6984  0018D4  0100               	movlb	0	; () banked
  6985  0018D6  1791               	andwf	??_printf& (0+255),f,b
  6986  0018D8  B4D8               	btfsc	status,2,c
  6987  0018DA  D003               	goto	l5889
  6988                           
  6989                           ; BSR set to: 0
  6990                           ;doprnt.c: 1439: (putch('-') );
  6991  0018DC  0E2D               	movlw	45
  6992  0018DE  EC5F  F01A         	call	_putch
  6993  0018E2                     l5889:
  6994                           
  6995                           ;doprnt.c: 1469: }
  6996                           ;doprnt.c: 1472: prec = c;
  6997  0018E2  C09E  F098         	movff	printf@c,printf@prec
  6998                           
  6999                           ;doprnt.c: 1474: while(prec--) {
  7000  0018E6  D05A               	goto	l5903
  7001  0018E8                     l5891:
  7002                           
  7003                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7004  0018E8  0100               	movlb	0	; () banked
  7005  0018EA  5198               	movf	printf@prec& (0+255),w,b
  7006  0018EC  0D02               	mullw	2
  7007  0018EE  0E8E               	movlw	low _dpowers
  7008  0018F0  24F3               	addwf	prodl,w,c
  7009  0018F2  6EF6               	movwf	tblptrl,c
  7010  0018F4  0EFD               	movlw	high _dpowers
  7011  0018F6  20F4               	addwfc	prodh,w,c
  7012  0018F8  6EF7               	movwf	tblptrh,c
  7013  0018FA                     	if	0	;There are less than 3 active tblptr bytes
  7014  0018FA                     	endif
  7015  0018FA  0009               	tblrd		*+
  7016  0018FC  CFF5 F082          	movff	tablat,___lwdiv@divisor
  7017  001900  000A               	tblrd		*-
  7018  001902  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
  7019  001906  C099  F080         	movff	printf@val,___lwdiv@dividend
  7020  00190A  C09A  F081         	movff	printf@val+1,___lwdiv@dividend+1
  7021  00190E  EC98  F017         	call	___lwdiv	;wreg free
  7022  001912  C080  F084         	movff	?___lwdiv,___lwmod@dividend
  7023  001916  C081  F085         	movff	?___lwdiv+1,___lwmod@dividend+1
  7024  00191A  0E00               	movlw	0
  7025  00191C  0100               	movlb	0	; () banked
  7026  00191E  6F87               	movwf	(___lwmod@divisor+1)& (0+255),b
  7027  001920  0E0A               	movlw	10
  7028  001922  6F86               	movwf	___lwmod@divisor& (0+255),b
  7029  001924  EC01  F018         	call	___lwmod	;wreg free
  7030  001928  0100               	movlb	0	; () banked
  7031  00192A  5184               	movf	?___lwmod& (0+255),w,b
  7032  00192C  0F30               	addlw	48
  7033  00192E  0100               	movlb	0	; () banked
  7034  001930  6F9E               	movwf	printf@c& (0+255),b
  7035                           
  7036                           ;doprnt.c: 1491: break;
  7037  001932  D030               	goto	l5901
  7038  001934                     l5893:
  7039                           
  7040                           ; BSR set to: 0
  7041                           ;doprnt.c: 1499: {
  7042                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  7043  001934  C099  F080         	movff	printf@val,___lwdiv@dividend
  7044  001938  C09A  F081         	movff	printf@val+1,___lwdiv@dividend+1
  7045  00193C  0100               	movlb	0	; () banked
  7046  00193E  5198               	movf	printf@prec& (0+255),w,b
  7047  001940  0D02               	mullw	2
  7048  001942  0E98               	movlw	low _hexpowers
  7049  001944  24F3               	addwf	prodl,w,c
  7050  001946  6EF6               	movwf	tblptrl,c
  7051  001948  0EFD               	movlw	high _hexpowers
  7052  00194A  20F4               	addwfc	prodh,w,c
  7053  00194C  6EF7               	movwf	tblptrh,c
  7054  00194E                     	if	0	;There are less than 3 active tblptr bytes
  7055  00194E                     	endif
  7056  00194E  0009               	tblrd		*+
  7057  001950  CFF5 F082          	movff	tablat,___lwdiv@divisor
  7058  001954  000A               	tblrd		*-
  7059  001956  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
  7060  00195A  EC98  F017         	call	___lwdiv	;wreg free
  7061  00195E  0100               	movlb	0	; () banked
  7062  001960  5180               	movf	?___lwdiv& (0+255),w,b
  7063  001962  0B0F               	andlw	15
  7064  001964  0100               	movlb	0	; () banked
  7065  001966  6F95               	movwf	printf@idx& (0+255),b
  7066                           
  7067                           ; BSR set to: 0
  7068                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  7069  001968  0100               	movlb	0	; () banked
  7070  00196A  5195               	movf	printf@idx& (0+255),w,b
  7071  00196C  0D01               	mullw	1
  7072  00196E  0E68               	movlw	low STR_41
  7073  001970  24F3               	addwf	prodl,w,c
  7074  001972  6EF6               	movwf	tblptrl,c
  7075  001974  0EFE               	movlw	high STR_41
  7076  001976  20F4               	addwfc	prodh,w,c
  7077  001978  6EF7               	movwf	tblptrh,c
  7078  00197A                     	if	0	;There are less than 3 active tblptr bytes
  7079  00197A                     	endif
  7080  00197A  0008               	tblrd		*
  7081  00197C  CFF5 F09E          	movff	tablat,printf@c
  7082                           
  7083                           ; BSR set to: 0
  7084                           ;doprnt.c: 1523: }
  7085                           
  7086                           ;doprnt.c: 1508: }
  7087                           ;doprnt.c: 1510: break;
  7088  001980  D009               	goto	l5901
  7089  001982                     l5899:
  7090  001982  0100               	movlb	0	; () banked
  7091  001984  519B               	movf	printf@flag& (0+255),w,b
  7092  001986  0B80               	andlw	128
  7093                           
  7094                           ; Switch size 1, requested type "space"
  7095                           ; Number of cases is 2, Range of values is 0 to 128
  7096                           ; switch strategies available:
  7097                           ; Name         Instructions Cycles
  7098                           ; simple_byte            7     4 (average)
  7099                           ;	Chosen strategy is simple_byte
  7100  001988  0A00               	xorlw	0	; case 0
  7101  00198A  B4D8               	btfsc	status,2,c
  7102  00198C  D7AD               	goto	l5891
  7103  00198E  0A80               	xorlw	128	; case 128
  7104  001990  B4D8               	btfsc	status,2,c
  7105  001992  D7D0               	goto	l5893
  7106  001994                     l5901:
  7107                           
  7108                           ; BSR set to: 0
  7109                           ;doprnt.c: 1524: (putch(c) );
  7110  001994  0100               	movlb	0	; () banked
  7111  001996  519E               	movf	printf@c& (0+255),w,b
  7112  001998  EC5F  F01A         	call	_putch
  7113  00199C                     l5903:
  7114  00199C  0100               	movlb	0	; () banked
  7115  00199E  0798               	decf	printf@prec& (0+255),f,b
  7116  0019A0  0100               	movlb	0	; () banked
  7117  0019A2  2998               	incf	printf@prec& (0+255),w,b
  7118  0019A4  A4D8               	btfss	status,2,c
  7119  0019A6  D7ED               	goto	l5899
  7120  0019A8                     l5905:
  7121  0019A8  C089  FFF6         	movff	printf@f,tblptrl
  7122  0019AC  C08A  FFF7         	movff	printf@f+1,tblptrh
  7123  0019B0  0100               	movlb	0	; () banked
  7124  0019B2  4B89               	infsnz	printf@f& (0+255),f,b
  7125  0019B4  2B8A               	incf	(printf@f+1)& (0+255),f,b
  7126  0019B6                     	if	0	;tblptru may be non-zero
  7127  0019B6                     	endif
  7128  0019B6                     	if	0	;tblptru may be non-zero
  7129  0019B6                     	endif
  7130  0019B6  0008               	tblrd		*
  7131  0019B8  CFF5 F09E          	movff	tablat,printf@c
  7132  0019BC  0100               	movlb	0	; () banked
  7133  0019BE  519E               	movf	printf@c& (0+255),w,b
  7134  0019C0  B4D8               	btfsc	status,2,c
  7135  0019C2  0012               	return	
  7136  0019C4  D62D               	goto	l5779
  7137  0019C6                     __end_of_printf:
  7138                           	opt stack 0
  7139                           tblptru	equ	0xFF8
  7140                           tblptrh	equ	0xFF7
  7141                           tblptrl	equ	0xFF6
  7142                           tablat	equ	0xFF5
  7143                           prodh	equ	0xFF4
  7144                           prodl	equ	0xFF3
  7145                           intcon	equ	0xFF2
  7146                           intcon2	equ	0xFF1
  7147                           intcon3	equ	0xFF0
  7148                           postinc0	equ	0xFEE
  7149                           wreg	equ	0xFE8
  7150                           postdec1	equ	0xFE5
  7151                           fsr1l	equ	0xFE1
  7152                           indf2	equ	0xFDF
  7153                           postinc2	equ	0xFDE
  7154                           postdec2	equ	0xFDD
  7155                           fsr2h	equ	0xFDA
  7156                           fsr2l	equ	0xFD9
  7157                           status	equ	0xFD8
  7158                           
  7159 ;; *************** function _putch *****************
  7160 ;; Defined at:
  7161 ;;		line 23 in file "../lcd.c"
  7162 ;; Parameters:    Size  Location     Type
  7163 ;;  data            1    wreg     unsigned char 
  7164 ;; Auto vars:     Size  Location     Type
  7165 ;;  data            1   50[COMRAM] unsigned char 
  7166 ;; Return value:  Size  Location     Type
  7167 ;;                  1    wreg      void 
  7168 ;; Registers used:
  7169 ;;		wreg, status,2, status,0, cstack
  7170 ;; Tracked objects:
  7171 ;;		On entry : 0/0
  7172 ;;		On exit  : 0/0
  7173 ;;		Unchanged: 0/0
  7174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7175 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7176 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7177 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7178 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7179 ;;Total ram usage:        1 bytes
  7180 ;; Hardware stack levels used:    1
  7181 ;; Hardware stack levels required when called:    6
  7182 ;; This function calls:
  7183 ;;		_lcdNibble
  7184 ;; This function is called by:
  7185 ;;		_printf
  7186 ;; This function uses a non-reentrant model
  7187 ;;
  7188                           
  7189                           	psect	text10
  7190  0034BE                     __ptext10:
  7191                           	opt stack 0
  7192  0034BE                     _putch:
  7193                           	opt stack 22
  7194                           
  7195                           ;incstack = 0
  7196                           ;putch@data stored from wreg
  7197  0034BE  6E33               	movwf	putch@data,c
  7198                           
  7199                           ;lcd.c: 24: LATDbits.LATD2 = 1;
  7200  0034C0  848C               	bsf	3980,2,c	;volatile
  7201                           
  7202                           ;lcd.c: 25: lcdNibble(data);
  7203  0034C2  5033               	movf	putch@data,w,c
  7204  0034C4  EC8B  F018         	call	_lcdNibble
  7205  0034C8  0012               	return		;funcret
  7206  0034CA                     __end_of_putch:
  7207                           	opt stack 0
  7208                           tblptru	equ	0xFF8
  7209                           tblptrh	equ	0xFF7
  7210                           tblptrl	equ	0xFF6
  7211                           tablat	equ	0xFF5
  7212                           prodh	equ	0xFF4
  7213                           prodl	equ	0xFF3
  7214                           intcon	equ	0xFF2
  7215                           intcon2	equ	0xFF1
  7216                           intcon3	equ	0xFF0
  7217                           postinc0	equ	0xFEE
  7218                           wreg	equ	0xFE8
  7219                           postdec1	equ	0xFE5
  7220                           fsr1l	equ	0xFE1
  7221                           indf2	equ	0xFDF
  7222                           postinc2	equ	0xFDE
  7223                           postdec2	equ	0xFDD
  7224                           fsr2h	equ	0xFDA
  7225                           fsr2l	equ	0xFD9
  7226                           status	equ	0xFD8
  7227                           
  7228 ;; *************** function _isdigit *****************
  7229 ;; Defined at:
  7230 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  7231 ;; Parameters:    Size  Location     Type
  7232 ;;  c               1    wreg     unsigned char 
  7233 ;; Auto vars:     Size  Location     Type
  7234 ;;  c               1   50[COMRAM] unsigned char 
  7235 ;; Return value:  Size  Location     Type
  7236 ;;		None               void
  7237 ;; Registers used:
  7238 ;;		wreg, status,2, status,0
  7239 ;; Tracked objects:
  7240 ;;		On entry : 0/0
  7241 ;;		On exit  : 0/0
  7242 ;;		Unchanged: 0/0
  7243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7245 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7246 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7247 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7248 ;;Total ram usage:        3 bytes
  7249 ;; Hardware stack levels used:    1
  7250 ;; Hardware stack levels required when called:    5
  7251 ;; This function calls:
  7252 ;;		Nothing
  7253 ;; This function is called by:
  7254 ;;		_printf
  7255 ;; This function uses a non-reentrant model
  7256 ;;
  7257                           
  7258                           	psect	text11
  7259  0033C6                     __ptext11:
  7260                           	opt stack 0
  7261  0033C6                     _isdigit:
  7262                           	opt stack 23
  7263                           
  7264                           ;incstack = 0
  7265                           ;isdigit@c stored from wreg
  7266  0033C6  6E33               	movwf	isdigit@c,c
  7267  0033C8  0E00               	movlw	0
  7268  0033CA  6E32               	movwf	_isdigit$1195,c
  7269  0033CC  0E3A               	movlw	58
  7270  0033CE  6033               	cpfslt	isdigit@c,c
  7271  0033D0  D005               	goto	l3549
  7272  0033D2  0E2F               	movlw	47
  7273  0033D4  6433               	cpfsgt	isdigit@c,c
  7274  0033D6  D002               	goto	l3549
  7275  0033D8  0E01               	movlw	1
  7276  0033DA  6E32               	movwf	_isdigit$1195,c
  7277  0033DC                     l3549:
  7278  0033DC  C032  F031         	movff	_isdigit$1195,??_isdigit
  7279  0033E0  3031               	rrcf	??_isdigit,w,c
  7280  0033E2  0012               	return	
  7281  0033E4                     __end_of_isdigit:
  7282                           	opt stack 0
  7283                           tblptru	equ	0xFF8
  7284                           tblptrh	equ	0xFF7
  7285                           tblptrl	equ	0xFF6
  7286                           tablat	equ	0xFF5
  7287                           prodh	equ	0xFF4
  7288                           prodl	equ	0xFF3
  7289                           intcon	equ	0xFF2
  7290                           intcon2	equ	0xFF1
  7291                           intcon3	equ	0xFF0
  7292                           postinc0	equ	0xFEE
  7293                           wreg	equ	0xFE8
  7294                           postdec1	equ	0xFE5
  7295                           fsr1l	equ	0xFE1
  7296                           indf2	equ	0xFDF
  7297                           postinc2	equ	0xFDE
  7298                           postdec2	equ	0xFDD
  7299                           fsr2h	equ	0xFDA
  7300                           fsr2l	equ	0xFD9
  7301                           status	equ	0xFD8
  7302                           
  7303 ;; *************** function ___wmul *****************
  7304 ;; Defined at:
  7305 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  7306 ;; Parameters:    Size  Location     Type
  7307 ;;  multiplier      2    0[BANK0 ] unsigned int 
  7308 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  7309 ;; Auto vars:     Size  Location     Type
  7310 ;;  product         2   48[COMRAM] unsigned int 
  7311 ;; Return value:  Size  Location     Type
  7312 ;;                  2    0[BANK0 ] unsigned int 
  7313 ;; Registers used:
  7314 ;;		wreg, status,2, status,0, prodl, prodh
  7315 ;; Tracked objects:
  7316 ;;		On entry : 0/0
  7317 ;;		On exit  : 0/0
  7318 ;;		Unchanged: 0/0
  7319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7320 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7321 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7322 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7323 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7324 ;;Total ram usage:        6 bytes
  7325 ;; Hardware stack levels used:    1
  7326 ;; Hardware stack levels required when called:    5
  7327 ;; This function calls:
  7328 ;;		Nothing
  7329 ;; This function is called by:
  7330 ;;		_printf
  7331 ;; This function uses a non-reentrant model
  7332 ;;
  7333                           
  7334                           	psect	text12
  7335  0032B6                     __ptext12:
  7336                           	opt stack 0
  7337  0032B6                     ___wmul:
  7338                           	opt stack 23
  7339                           
  7340                           ;incstack = 0
  7341  0032B6  0100               	movlb	0	; () banked
  7342  0032B8  5180               	movf	___wmul@multiplier& (0+255),w,b
  7343  0032BA  0100               	movlb	0	; () banked
  7344  0032BC  0382               	mulwf	___wmul@multiplicand& (0+255),b
  7345  0032BE  CFF3 F031          	movff	prodl,___wmul@product
  7346  0032C2  CFF4 F032          	movff	prodh,___wmul@product+1
  7347  0032C6  0100               	movlb	0	; () banked
  7348  0032C8  5180               	movf	___wmul@multiplier& (0+255),w,b
  7349  0032CA  0100               	movlb	0	; () banked
  7350  0032CC  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  7351  0032CE  50F3               	movf	prodl,w,c
  7352  0032D0  2632               	addwf	___wmul@product+1,f,c
  7353  0032D2  0100               	movlb	0	; () banked
  7354  0032D4  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
  7355  0032D6  0100               	movlb	0	; () banked
  7356  0032D8  0382               	mulwf	___wmul@multiplicand& (0+255),b
  7357  0032DA  50F3               	movf	prodl,w,c
  7358  0032DC  2632               	addwf	___wmul@product+1,f,c
  7359                           
  7360                           ; BSR set to: 0
  7361  0032DE  C031  F080         	movff	___wmul@product,?___wmul
  7362  0032E2  C032  F081         	movff	___wmul@product+1,?___wmul+1
  7363  0032E6  0012               	return	
  7364  0032E8                     __end_of___wmul:
  7365                           	opt stack 0
  7366                           tblptru	equ	0xFF8
  7367                           tblptrh	equ	0xFF7
  7368                           tblptrl	equ	0xFF6
  7369                           tablat	equ	0xFF5
  7370                           prodh	equ	0xFF4
  7371                           prodl	equ	0xFF3
  7372                           intcon	equ	0xFF2
  7373                           intcon2	equ	0xFF1
  7374                           intcon3	equ	0xFF0
  7375                           postinc0	equ	0xFEE
  7376                           wreg	equ	0xFE8
  7377                           postdec1	equ	0xFE5
  7378                           fsr1l	equ	0xFE1
  7379                           indf2	equ	0xFDF
  7380                           postinc2	equ	0xFDE
  7381                           postdec2	equ	0xFDD
  7382                           fsr2h	equ	0xFDA
  7383                           fsr2l	equ	0xFD9
  7384                           status	equ	0xFD8
  7385                           
  7386 ;; *************** function _next_address *****************
  7387 ;; Defined at:
  7388 ;;		line 710 in file "../main.c"
  7389 ;; Parameters:    Size  Location     Type
  7390 ;;  address         2   48[COMRAM] unsigned int 
  7391 ;; Auto vars:     Size  Location     Type
  7392 ;;		None
  7393 ;; Return value:  Size  Location     Type
  7394 ;;                  2   48[COMRAM] unsigned int 
  7395 ;; Registers used:
  7396 ;;		wreg, status,2, status,0
  7397 ;; Tracked objects:
  7398 ;;		On entry : 0/0
  7399 ;;		On exit  : 0/0
  7400 ;;		Unchanged: 0/0
  7401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7402 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7403 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7404 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7405 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7406 ;;Total ram usage:        2 bytes
  7407 ;; Hardware stack levels used:    1
  7408 ;; Hardware stack levels required when called:    5
  7409 ;; This function calls:
  7410 ;;		Nothing
  7411 ;; This function is called by:
  7412 ;;		_stopOperation
  7413 ;;		_show_log
  7414 ;; This function uses a non-reentrant model
  7415 ;;
  7416                           
  7417                           	psect	text13
  7418  0034A2                     __ptext13:
  7419                           	opt stack 0
  7420  0034A2                     _next_address:
  7421                           	opt stack 24
  7422                           
  7423                           ;main.c: 711: return address + 8;
  7424                           
  7425                           ; BSR set to: 0
  7426                           ;incstack = 0
  7427  0034A2  0E08               	movlw	8
  7428  0034A4  2431               	addwf	next_address@address,w,c
  7429  0034A6  6E31               	movwf	?_next_address,c
  7430  0034A8  0E00               	movlw	0
  7431  0034AA  2032               	addwfc	next_address@address+1,w,c
  7432  0034AC  6E32               	movwf	?_next_address+1,c
  7433  0034AE  0012               	return	
  7434  0034B0                     __end_of_next_address:
  7435                           	opt stack 0
  7436                           tblptru	equ	0xFF8
  7437                           tblptrh	equ	0xFF7
  7438                           tblptrl	equ	0xFF6
  7439                           tablat	equ	0xFF5
  7440                           prodh	equ	0xFF4
  7441                           prodl	equ	0xFF3
  7442                           intcon	equ	0xFF2
  7443                           intcon2	equ	0xFF1
  7444                           intcon3	equ	0xFF0
  7445                           postinc0	equ	0xFEE
  7446                           wreg	equ	0xFE8
  7447                           postdec1	equ	0xFE5
  7448                           fsr1l	equ	0xFE1
  7449                           indf2	equ	0xFDF
  7450                           postinc2	equ	0xFDE
  7451                           postdec2	equ	0xFDD
  7452                           fsr2h	equ	0xFDA
  7453                           fsr2l	equ	0xFD9
  7454                           status	equ	0xFD8
  7455                           
  7456 ;; *************** function _Eeprom_ReadByte *****************
  7457 ;; Defined at:
  7458 ;;		line 666 in file "../main.c"
  7459 ;; Parameters:    Size  Location     Type
  7460 ;;  address         2   48[COMRAM] unsigned int 
  7461 ;; Auto vars:     Size  Location     Type
  7462 ;;		None
  7463 ;; Return value:  Size  Location     Type
  7464 ;;                  1    wreg      unsigned char 
  7465 ;; Registers used:
  7466 ;;		wreg, status,2
  7467 ;; Tracked objects:
  7468 ;;		On entry : 0/0
  7469 ;;		On exit  : 0/0
  7470 ;;		Unchanged: 0/0
  7471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7472 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7473 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7474 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7475 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7476 ;;Total ram usage:        2 bytes
  7477 ;; Hardware stack levels used:    1
  7478 ;; Hardware stack levels required when called:    5
  7479 ;; This function calls:
  7480 ;;		Nothing
  7481 ;; This function is called by:
  7482 ;;		_stopOperation
  7483 ;;		_show_log
  7484 ;; This function uses a non-reentrant model
  7485 ;;
  7486                           
  7487                           	psect	text14
  7488  00341C                     __ptext14:
  7489                           	opt stack 0
  7490  00341C                     _Eeprom_ReadByte:
  7491                           	opt stack 24
  7492                           
  7493                           ;main.c: 668: EEADRH = (uint8_t)(address >> 8);
  7494                           
  7495                           ;incstack = 0
  7496  00341C  5032               	movf	Eeprom_ReadByte@address+1,w,c
  7497  00341E  6EAA               	movwf	4010,c	;volatile
  7498                           
  7499                           ;main.c: 669: EEADR = (uint8_t)address;
  7500  003420  C031  FFA9         	movff	Eeprom_ReadByte@address,4009	;volatile
  7501                           
  7502                           ;main.c: 671: EECON1bits.EEPGD = 0;
  7503  003424  9EA6               	bcf	4006,7,c	;volatile
  7504                           
  7505                           ;main.c: 672: EECON1bits.CFGS = 0;
  7506  003426  9CA6               	bcf	4006,6,c	;volatile
  7507                           
  7508                           ;main.c: 673: EECON1bits.RD = 1;
  7509  003428  80A6               	bsf	4006,0,c	;volatile
  7510  00342A                     l461:
  7511  00342A  B0A6               	btfsc	4006,0,c	;volatile
  7512  00342C  D7FE               	goto	l461
  7513                           
  7514                           ;main.c: 679: return EEDATA;
  7515  00342E  50A8               	movf	4008,w,c	;volatile
  7516  003430  0012               	return	
  7517  003432                     __end_of_Eeprom_ReadByte:
  7518                           	opt stack 0
  7519                           tblptru	equ	0xFF8
  7520                           tblptrh	equ	0xFF7
  7521                           tblptrl	equ	0xFF6
  7522                           tablat	equ	0xFF5
  7523                           prodh	equ	0xFF4
  7524                           prodl	equ	0xFF3
  7525                           intcon	equ	0xFF2
  7526                           intcon2	equ	0xFF1
  7527                           intcon3	equ	0xFF0
  7528                           postinc0	equ	0xFEE
  7529                           wreg	equ	0xFE8
  7530                           postdec1	equ	0xFE5
  7531                           fsr1l	equ	0xFE1
  7532                           indf2	equ	0xFDF
  7533                           postinc2	equ	0xFDE
  7534                           postdec2	equ	0xFDD
  7535                           fsr2h	equ	0xFDA
  7536                           fsr2l	equ	0xFD9
  7537                           status	equ	0xFD8
  7538                           
  7539 ;; *************** function _logPC *****************
  7540 ;; Defined at:
  7541 ;;		line 774 in file "../main.c"
  7542 ;; Parameters:    Size  Location     Type
  7543 ;;		None
  7544 ;; Auto vars:     Size  Location     Type
  7545 ;;  i               2   58[BANK1 ] unsigned int 
  7546 ;;  i               2   56[BANK1 ] unsigned int 
  7547 ;;  i               2   54[BANK1 ] unsigned int 
  7548 ;;  i               2   52[BANK1 ] unsigned int 
  7549 ;;  i               2   50[BANK1 ] unsigned int 
  7550 ;;  i               2   48[BANK1 ] unsigned int 
  7551 ;;  i               2   46[BANK1 ] unsigned int 
  7552 ;;  i               2   44[BANK1 ] unsigned int 
  7553 ;;  i               2   42[BANK1 ] unsigned int 
  7554 ;;  i               2   40[BANK1 ] unsigned int 
  7555 ;;  i               2   38[BANK1 ] unsigned int 
  7556 ;;  i               2   36[BANK1 ] unsigned int 
  7557 ;;  i               2   34[BANK1 ] unsigned int 
  7558 ;;  i               2   32[BANK1 ] unsigned int 
  7559 ;;  started_time   19    0[BANK1 ] unsigned char [19]
  7560 ;;  runTime         3   19[BANK1 ] unsigned char [3]
  7561 ;;  numberTotal     2   30[BANK1 ] unsigned char [2]
  7562 ;;  numberDrain     2   28[BANK1 ] unsigned char [2]
  7563 ;;  number9V        2   26[BANK1 ] unsigned char [2]
  7564 ;;  numberC         2   24[BANK1 ] unsigned char [2]
  7565 ;;  numberAA        2   22[BANK1 ] unsigned char [2]
  7566 ;; Return value:  Size  Location     Type
  7567 ;;                  1    wreg      void 
  7568 ;; Registers used:
  7569 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7570 ;; Tracked objects:
  7571 ;;		On entry : 0/0
  7572 ;;		On exit  : 0/0
  7573 ;;		Unchanged: 0/0
  7574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7575 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7576 ;;      Locals:         0       0      60       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7577 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7578 ;;      Totals:         0       2      60       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7579 ;;Total ram usage:       62 bytes
  7580 ;; Hardware stack levels used:    1
  7581 ;; Hardware stack levels required when called:    7
  7582 ;; This function calls:
  7583 ;;		_I2C_Master_Start
  7584 ;;		_I2C_Master_Stop
  7585 ;;		_I2C_Master_Write
  7586 ;;		_getChar
  7587 ;;		_getHundreds
  7588 ;;		_getOnes
  7589 ;;		_getTens
  7590 ;; This function is called by:
  7591 ;;		_main
  7592 ;; This function uses a non-reentrant model
  7593 ;;
  7594                           
  7595                           	psect	text15
  7596  000012                     __ptext15:
  7597                           	opt stack 0
  7598  000012                     _logPC:
  7599                           	opt stack 23
  7600                           
  7601                           ;main.c: 776: for(unsigned int i = 0; i < 31; i++) {
  7602                           
  7603                           ;incstack = 0
  7604  000012  0E00               	movlw	0
  7605  000014  0101               	movlb	1	; () banked
  7606  000016  6F21               	movwf	(logPC@i+1)& (0+255),b
  7607  000018  0E00               	movlw	0
  7608  00001A  6F20               	movwf	logPC@i& (0+255),b
  7609  00001C                     l6435:
  7610                           
  7611                           ; BSR set to: 1
  7612  00001C  0101               	movlb	1	; () banked
  7613  00001E  5121               	movf	(logPC@i+1)& (0+255),w,b
  7614  000020  E120               	bnz	l6449
  7615  000022  0E1F               	movlw	31
  7616  000024  0101               	movlb	1	; () banked
  7617  000026  5D20               	subwf	logPC@i& (0+255),w,b
  7618  000028  B0D8               	btfsc	status,0,c
  7619  00002A  D01B               	goto	l6449
  7620                           
  7621                           ; BSR set to: 1
  7622                           ;main.c: 777: I2C_Master_Start();
  7623                           
  7624                           ; BSR set to: 1
  7625                           
  7626                           ; BSR set to: 1
  7627  00002C  EC89  F01A         	call	_I2C_Master_Start	;wreg free
  7628                           
  7629                           ;main.c: 778: I2C_Master_Write(0b00010000);
  7630  000030  0E00               	movlw	0
  7631  000032  6E33               	movwf	I2C_Master_Write@d+1,c
  7632  000034  0E10               	movlw	16
  7633  000036  6E32               	movwf	I2C_Master_Write@d,c
  7634  000038  EC77  F01A         	call	_I2C_Master_Write	;wreg free
  7635                           
  7636                           ;main.c: 779: I2C_Master_Write(timeHeader[i]);
  7637  00003C  0E3E               	movlw	low _timeHeader
  7638  00003E  0101               	movlb	1	; () banked
  7639  000040  2520               	addwf	logPC@i& (0+255),w,b
  7640  000042  6EF6               	movwf	tblptrl,c
  7641  000044  0EFD               	movlw	high _timeHeader
  7642  000046  2121               	addwfc	(logPC@i+1)& (0+255),w,b
  7643  000048  6EF7               	movwf	tblptrh,c
  7644  00004A                     	if	0	;There are less than 3 active tblptr bytes
  7645  00004A                     	endif
  7646  00004A  0008               	tblrd		*
  7647  00004C  50F5               	movf	tablat,w,c
  7648  00004E  6E32               	movwf	I2C_Master_Write@d,c
  7649  000050  6A33               	clrf	I2C_Master_Write@d+1,c
  7650  000052  EC77  F01A         	call	_I2C_Master_Write	;wreg free
  7651                           
  7652                           ;main.c: 780: I2C_Master_Stop();
  7653  000056  EC85  F01A         	call	_I2C_Master_Stop	;wreg free
  7654  00005A  0101               	movlb	1	; () banked
  7655  00005C  4B20               	infsnz	logPC@i& (0+255),f,b
  7656  00005E  2B21               	incf	(logPC@i+1)& (0+255),f,b
  7657  000060  D7DD               	goto	l6435
  7658  000062                     l6449:
  7659                           
  7660                           ; BSR set to: 1
  7661                           ;main.c: 781: }
  7662                           ;main.c: 782: char started_time[19] = "  /  /     :  :  ";
  7663  000062  EE20  F034         	lfsr	2,logPC@F3217
  7664  000066  EE11  F000         	lfsr	1,logPC@started_time
  7665  00006A  0E12               	movlw	18
  7666  00006C                     u6171:
  7667  00006C  CFDB FFE3          	movff	plusw2,plusw1
  7668  000070  06E8               	decf	wreg,f,c
  7669  000072  E2FC               	bc	u6171
  7670                           
  7671                           ; BSR set to: 1
  7672                           ;main.c: 783: started_time[0] = getChar(getTens( (lastRunRTC[6] & 0x0F) + ((lastRunRTC[6
      +                          ] & 0xF0)>>4)*10 ));
  7673  000074  C0CA  F08D         	movff	_lastRunRTC+6,??_logPC
  7674  000078  0100               	movlb	0	; () banked
  7675  00007A  3B8D               	swapf	??_logPC& (0+255),f,b
  7676  00007C  0E0F               	movlw	15
  7677  00007E  178D               	andwf	??_logPC& (0+255),f,b
  7678  000080  0E0F               	movlw	15
  7679  000082  0100               	movlb	0	; () banked
  7680  000084  178D               	andwf	??_logPC& (0+255),f,b
  7681  000086  0100               	movlb	0	; () banked
  7682  000088  518D               	movf	??_logPC& (0+255),w,b
  7683  00008A  0D0A               	mullw	10
  7684  00008C  C0CA  F08E         	movff	_lastRunRTC+6,??_logPC+1
  7685  000090  0E0F               	movlw	15
  7686  000092  0100               	movlb	0	; () banked
  7687  000094  178E               	andwf	(??_logPC+1)& (0+255),f,b
  7688  000096  0100               	movlb	0	; () banked
  7689  000098  518E               	movf	(??_logPC+1)& (0+255),w,b
  7690  00009A  24F3               	addwf	prodl,w,c
  7691  00009C  0100               	movlb	0	; () banked
  7692  00009E  6F84               	movwf	getTens@num& (0+255),b
  7693  0000A0  0E00               	movlw	0
  7694  0000A2  20F4               	addwfc	prodh,w,c
  7695  0000A4  0100               	movlb	0	; () banked
  7696  0000A6  6F85               	movwf	(getTens@num+1)& (0+255),b
  7697  0000A8  EC1F  F019         	call	_getTens	;wreg free
  7698  0000AC  C084  F08B         	movff	?_getTens,getChar@num
  7699  0000B0  C085  F08C         	movff	?_getTens+1,getChar@num+1
  7700  0000B4  EC81  F01A         	call	_getChar	;wreg free
  7701  0000B8  0101               	movlb	1	; () banked
  7702  0000BA  6F00               	movwf	logPC@started_time& (0+255),b
  7703                           
  7704                           ; BSR set to: 1
  7705                           ;main.c: 784: started_time[1] = getChar(getOnes( (lastRunRTC[6] & 0x0F) + ((lastRunRTC[6
      +                          ] & 0xF0)>>4)*10 ));
  7706  0000BC  C0CA  F08D         	movff	_lastRunRTC+6,??_logPC
  7707  0000C0  0100               	movlb	0	; () banked
  7708  0000C2  3B8D               	swapf	??_logPC& (0+255),f,b
  7709  0000C4  0E0F               	movlw	15
  7710  0000C6  178D               	andwf	??_logPC& (0+255),f,b
  7711  0000C8  0E0F               	movlw	15
  7712  0000CA  0100               	movlb	0	; () banked
  7713  0000CC  178D               	andwf	??_logPC& (0+255),f,b
  7714  0000CE  0100               	movlb	0	; () banked
  7715  0000D0  518D               	movf	??_logPC& (0+255),w,b
  7716  0000D2  0D0A               	mullw	10
  7717  0000D4  C0CA  F08E         	movff	_lastRunRTC+6,??_logPC+1
  7718  0000D8  0E0F               	movlw	15
  7719  0000DA  0100               	movlb	0	; () banked
  7720  0000DC  178E               	andwf	(??_logPC+1)& (0+255),f,b
  7721  0000DE  0100               	movlb	0	; () banked
  7722  0000E0  518E               	movf	(??_logPC+1)& (0+255),w,b
  7723  0000E2  24F3               	addwf	prodl,w,c
  7724  0000E4  0100               	movlb	0	; () banked
  7725  0000E6  6F89               	movwf	getOnes@num& (0+255),b
  7726  0000E8  0E00               	movlw	0
  7727  0000EA  20F4               	addwfc	prodh,w,c
  7728  0000EC  0100               	movlb	0	; () banked
  7729  0000EE  6F8A               	movwf	(getOnes@num+1)& (0+255),b
  7730  0000F0  ECD3  F019         	call	_getOnes	;wreg free
  7731  0000F4  C089  F08B         	movff	?_getOnes,getChar@num
  7732  0000F8  C08A  F08C         	movff	?_getOnes+1,getChar@num+1
  7733  0000FC  EC81  F01A         	call	_getChar	;wreg free
  7734  000100  0101               	movlb	1	; () banked
  7735  000102  6F01               	movwf	(logPC@started_time+1)& (0+255),b
  7736                           
  7737                           ; BSR set to: 1
  7738                           ;main.c: 785: started_time[3] = getChar(getTens( (lastRunRTC[5] & 0x0F) + ((lastRunRTC[5
      +                          ] & 0xF0)>>4)*10 ));
  7739  000104  C0C9  F08D         	movff	_lastRunRTC+5,??_logPC
  7740  000108  0100               	movlb	0	; () banked
  7741  00010A  3B8D               	swapf	??_logPC& (0+255),f,b
  7742  00010C  0E0F               	movlw	15
  7743  00010E  178D               	andwf	??_logPC& (0+255),f,b
  7744  000110  0E0F               	movlw	15
  7745  000112  0100               	movlb	0	; () banked
  7746  000114  178D               	andwf	??_logPC& (0+255),f,b
  7747  000116  0100               	movlb	0	; () banked
  7748  000118  518D               	movf	??_logPC& (0+255),w,b
  7749  00011A  0D0A               	mullw	10
  7750  00011C  C0C9  F08E         	movff	_lastRunRTC+5,??_logPC+1
  7751  000120  0E0F               	movlw	15
  7752  000122  0100               	movlb	0	; () banked
  7753  000124  178E               	andwf	(??_logPC+1)& (0+255),f,b
  7754  000126  0100               	movlb	0	; () banked
  7755  000128  518E               	movf	(??_logPC+1)& (0+255),w,b
  7756  00012A  24F3               	addwf	prodl,w,c
  7757  00012C  0100               	movlb	0	; () banked
  7758  00012E  6F84               	movwf	getTens@num& (0+255),b
  7759  000130  0E00               	movlw	0
  7760  000132  20F4               	addwfc	prodh,w,c
  7761  000134  0100               	movlb	0	; () banked
  7762  000136  6F85               	movwf	(getTens@num+1)& (0+255),b
  7763  000138  EC1F  F019         	call	_getTens	;wreg free
  7764  00013C  C084  F08B         	movff	?_getTens,getChar@num
  7765  000140  C085  F08C         	movff	?_getTens+1,getChar@num+1
  7766  000144  EC81  F01A         	call	_getChar	;wreg free
  7767  000148  0101               	movlb	1	; () banked
  7768  00014A  6F03               	movwf	(logPC@started_time+3)& (0+255),b
  7769                           
  7770                           ; BSR set to: 1
  7771                           ;main.c: 786: started_time[4] = getChar(getOnes( (lastRunRTC[5] & 0x0F) + ((lastRunRTC[5
      +                          ] & 0xF0)>>4)*10 ));
  7772  00014C  C0C9  F08D         	movff	_lastRunRTC+5,??_logPC
  7773  000150  0100               	movlb	0	; () banked
  7774  000152  3B8D               	swapf	??_logPC& (0+255),f,b
  7775  000154  0E0F               	movlw	15
  7776  000156  178D               	andwf	??_logPC& (0+255),f,b
  7777  000158  0E0F               	movlw	15
  7778  00015A  0100               	movlb	0	; () banked
  7779  00015C  178D               	andwf	??_logPC& (0+255),f,b
  7780  00015E  0100               	movlb	0	; () banked
  7781  000160  518D               	movf	??_logPC& (0+255),w,b
  7782  000162  0D0A               	mullw	10
  7783  000164  C0C9  F08E         	movff	_lastRunRTC+5,??_logPC+1
  7784  000168  0E0F               	movlw	15
  7785  00016A  0100               	movlb	0	; () banked
  7786  00016C  178E               	andwf	(??_logPC+1)& (0+255),f,b
  7787  00016E  0100               	movlb	0	; () banked
  7788  000170  518E               	movf	(??_logPC+1)& (0+255),w,b
  7789  000172  24F3               	addwf	prodl,w,c
  7790  000174  0100               	movlb	0	; () banked
  7791  000176  6F89               	movwf	getOnes@num& (0+255),b
  7792  000178  0E00               	movlw	0
  7793  00017A  20F4               	addwfc	prodh,w,c
  7794  00017C  0100               	movlb	0	; () banked
  7795  00017E  6F8A               	movwf	(getOnes@num+1)& (0+255),b
  7796  000180  ECD3  F019         	call	_getOnes	;wreg free
  7797  000184  C089  F08B         	movff	?_getOnes,getChar@num
  7798  000188  C08A  F08C         	movff	?_getOnes+1,getChar@num+1
  7799  00018C  EC81  F01A         	call	_getChar	;wreg free
  7800  000190  0101               	movlb	1	; () banked
  7801  000192  6F04               	movwf	(logPC@started_time+4)& (0+255),b
  7802                           
  7803                           ; BSR set to: 1
  7804                           ;main.c: 787: started_time[6] = getChar(getTens( (lastRunRTC[4] & 0x0F) + ((lastRunRTC[4
      +                          ] & 0xF0)>>4)*10 ));
  7805  000194  C0C8  F08D         	movff	_lastRunRTC+4,??_logPC
  7806  000198  0100               	movlb	0	; () banked
  7807  00019A  3B8D               	swapf	??_logPC& (0+255),f,b
  7808  00019C  0E0F               	movlw	15
  7809  00019E  178D               	andwf	??_logPC& (0+255),f,b
  7810  0001A0  0E0F               	movlw	15
  7811  0001A2  0100               	movlb	0	; () banked
  7812  0001A4  178D               	andwf	??_logPC& (0+255),f,b
  7813  0001A6  0100               	movlb	0	; () banked
  7814  0001A8  518D               	movf	??_logPC& (0+255),w,b
  7815  0001AA  0D0A               	mullw	10
  7816  0001AC  C0C8  F08E         	movff	_lastRunRTC+4,??_logPC+1
  7817  0001B0  0E0F               	movlw	15
  7818  0001B2  0100               	movlb	0	; () banked
  7819  0001B4  178E               	andwf	(??_logPC+1)& (0+255),f,b
  7820  0001B6  0100               	movlb	0	; () banked
  7821  0001B8  518E               	movf	(??_logPC+1)& (0+255),w,b
  7822  0001BA  24F3               	addwf	prodl,w,c
  7823  0001BC  0100               	movlb	0	; () banked
  7824  0001BE  6F84               	movwf	getTens@num& (0+255),b
  7825  0001C0  0E00               	movlw	0
  7826  0001C2  20F4               	addwfc	prodh,w,c
  7827  0001C4  0100               	movlb	0	; () banked
  7828  0001C6  6F85               	movwf	(getTens@num+1)& (0+255),b
  7829  0001C8  EC1F  F019         	call	_getTens	;wreg free
  7830  0001CC  C084  F08B         	movff	?_getTens,getChar@num
  7831  0001D0  C085  F08C         	movff	?_getTens+1,getChar@num+1
  7832  0001D4  EC81  F01A         	call	_getChar	;wreg free
  7833  0001D8  0101               	movlb	1	; () banked
  7834  0001DA  6F06               	movwf	(logPC@started_time+6)& (0+255),b
  7835                           
  7836                           ; BSR set to: 1
  7837                           ;main.c: 788: started_time[7] = getChar(getOnes( (lastRunRTC[4] & 0x0F) + ((lastRunRTC[4
      +                          ] & 0xF0)>>4)*10 ));
  7838  0001DC  C0C8  F08D         	movff	_lastRunRTC+4,??_logPC
  7839  0001E0  0100               	movlb	0	; () banked
  7840  0001E2  3B8D               	swapf	??_logPC& (0+255),f,b
  7841  0001E4  0E0F               	movlw	15
  7842  0001E6  178D               	andwf	??_logPC& (0+255),f,b
  7843  0001E8  0E0F               	movlw	15
  7844  0001EA  0100               	movlb	0	; () banked
  7845  0001EC  178D               	andwf	??_logPC& (0+255),f,b
  7846  0001EE  0100               	movlb	0	; () banked
  7847  0001F0  518D               	movf	??_logPC& (0+255),w,b
  7848  0001F2  0D0A               	mullw	10
  7849  0001F4  C0C8  F08E         	movff	_lastRunRTC+4,??_logPC+1
  7850  0001F8  0E0F               	movlw	15
  7851  0001FA  0100               	movlb	0	; () banked
  7852  0001FC  178E               	andwf	(??_logPC+1)& (0+255),f,b
  7853  0001FE  0100               	movlb	0	; () banked
  7854  000200  518E               	movf	(??_logPC+1)& (0+255),w,b
  7855  000202  24F3               	addwf	prodl,w,c
  7856  000204  0100               	movlb	0	; () banked
  7857  000206  6F89               	movwf	getOnes@num& (0+255),b
  7858  000208  0E00               	movlw	0
  7859  00020A  20F4               	addwfc	prodh,w,c
  7860  00020C  0100               	movlb	0	; () banked
  7861  00020E  6F8A               	movwf	(getOnes@num+1)& (0+255),b
  7862  000210  ECD3  F019         	call	_getOnes	;wreg free
  7863  000214  C089  F08B         	movff	?_getOnes,getChar@num
  7864  000218  C08A  F08C         	movff	?_getOnes+1,getChar@num+1
  7865  00021C  EC81  F01A         	call	_getChar	;wreg free
  7866  000220  0101               	movlb	1	; () banked
  7867  000222  6F07               	movwf	(logPC@started_time+7)& (0+255),b
  7868                           
  7869                           ; BSR set to: 1
  7870                           ;main.c: 789: started_time[9] = getChar(getTens( (lastRunRTC[2] & 0x0F) + ((lastRunRTC[2
      +                          ] & 0xF0)>>4)*10 ));
  7871  000224  C0C6  F08D         	movff	_lastRunRTC+2,??_logPC
  7872  000228  0100               	movlb	0	; () banked
  7873  00022A  3B8D               	swapf	??_logPC& (0+255),f,b
  7874  00022C  0E0F               	movlw	15
  7875  00022E  178D               	andwf	??_logPC& (0+255),f,b
  7876  000230  0E0F               	movlw	15
  7877  000232  0100               	movlb	0	; () banked
  7878  000234  178D               	andwf	??_logPC& (0+255),f,b
  7879  000236  0100               	movlb	0	; () banked
  7880  000238  518D               	movf	??_logPC& (0+255),w,b
  7881  00023A  0D0A               	mullw	10
  7882  00023C  C0C6  F08E         	movff	_lastRunRTC+2,??_logPC+1
  7883  000240  0E0F               	movlw	15
  7884  000242  0100               	movlb	0	; () banked
  7885  000244  178E               	andwf	(??_logPC+1)& (0+255),f,b
  7886  000246  0100               	movlb	0	; () banked
  7887  000248  518E               	movf	(??_logPC+1)& (0+255),w,b
  7888  00024A  24F3               	addwf	prodl,w,c
  7889  00024C  0100               	movlb	0	; () banked
  7890  00024E  6F84               	movwf	getTens@num& (0+255),b
  7891  000250  0E00               	movlw	0
  7892  000252  20F4               	addwfc	prodh,w,c
  7893  000254  0100               	movlb	0	; () banked
  7894  000256  6F85               	movwf	(getTens@num+1)& (0+255),b
  7895  000258  EC1F  F019         	call	_getTens	;wreg free
  7896  00025C  C084  F08B         	movff	?_getTens,getChar@num
  7897  000260  C085  F08C         	movff	?_getTens+1,getChar@num+1
  7898  000264  EC81  F01A         	call	_getChar	;wreg free
  7899  000268  0101               	movlb	1	; () banked
  7900  00026A  6F09               	movwf	(logPC@started_time+9)& (0+255),b
  7901                           
  7902                           ; BSR set to: 1
  7903                           ;main.c: 790: started_time[10] = getChar(getOnes( (lastRunRTC[2] & 0x0F) + ((lastRunRTC[
      +                          2] & 0xF0)>>4)*10 ));
  7904  00026C  C0C6  F08D         	movff	_lastRunRTC+2,??_logPC
  7905  000270  0100               	movlb	0	; () banked
  7906  000272  3B8D               	swapf	??_logPC& (0+255),f,b
  7907  000274  0E0F               	movlw	15
  7908  000276  178D               	andwf	??_logPC& (0+255),f,b
  7909  000278  0E0F               	movlw	15
  7910  00027A  0100               	movlb	0	; () banked
  7911  00027C  178D               	andwf	??_logPC& (0+255),f,b
  7912  00027E  0100               	movlb	0	; () banked
  7913  000280  518D               	movf	??_logPC& (0+255),w,b
  7914  000282  0D0A               	mullw	10
  7915  000284  C0C6  F08E         	movff	_lastRunRTC+2,??_logPC+1
  7916  000288  0E0F               	movlw	15
  7917  00028A  0100               	movlb	0	; () banked
  7918  00028C  178E               	andwf	(??_logPC+1)& (0+255),f,b
  7919  00028E  0100               	movlb	0	; () banked
  7920  000290  518E               	movf	(??_logPC+1)& (0+255),w,b
  7921  000292  24F3               	addwf	prodl,w,c
  7922  000294  0100               	movlb	0	; () banked
  7923  000296  6F89               	movwf	getOnes@num& (0+255),b
  7924  000298  0E00               	movlw	0
  7925  00029A  20F4               	addwfc	prodh,w,c
  7926  00029C  0100               	movlb	0	; () banked
  7927  00029E  6F8A               	movwf	(getOnes@num+1)& (0+255),b
  7928  0002A0  ECD3  F019         	call	_getOnes	;wreg free
  7929  0002A4  C089  F08B         	movff	?_getOnes,getChar@num
  7930  0002A8  C08A  F08C         	movff	?_getOnes+1,getChar@num+1
  7931  0002AC  EC81  F01A         	call	_getChar	;wreg free
  7932  0002B0  0101               	movlb	1	; () banked
  7933  0002B2  6F0A               	movwf	(logPC@started_time+10)& (0+255),b
  7934                           
  7935                           ; BSR set to: 1
  7936                           ;main.c: 791: started_time[12] = getChar(getTens( (lastRunRTC[1] & 0x0F) + ((lastRunRTC[
      +                          1] & 0xF0)>>4)*10 ));
  7937  0002B4  C0C5  F08D         	movff	_lastRunRTC+1,??_logPC
  7938  0002B8  0100               	movlb	0	; () banked
  7939  0002BA  3B8D               	swapf	??_logPC& (0+255),f,b
  7940  0002BC  0E0F               	movlw	15
  7941  0002BE  178D               	andwf	??_logPC& (0+255),f,b
  7942  0002C0  0E0F               	movlw	15
  7943  0002C2  0100               	movlb	0	; () banked
  7944  0002C4  178D               	andwf	??_logPC& (0+255),f,b
  7945  0002C6  0100               	movlb	0	; () banked
  7946  0002C8  518D               	movf	??_logPC& (0+255),w,b
  7947  0002CA  0D0A               	mullw	10
  7948  0002CC  C0C5  F08E         	movff	_lastRunRTC+1,??_logPC+1
  7949  0002D0  0E0F               	movlw	15
  7950  0002D2  0100               	movlb	0	; () banked
  7951  0002D4  178E               	andwf	(??_logPC+1)& (0+255),f,b
  7952  0002D6  0100               	movlb	0	; () banked
  7953  0002D8  518E               	movf	(??_logPC+1)& (0+255),w,b
  7954  0002DA  24F3               	addwf	prodl,w,c
  7955  0002DC  0100               	movlb	0	; () banked
  7956  0002DE  6F84               	movwf	getTens@num& (0+255),b
  7957  0002E0  0E00               	movlw	0
  7958  0002E2  20F4               	addwfc	prodh,w,c
  7959  0002E4  0100               	movlb	0	; () banked
  7960  0002E6  6F85               	movwf	(getTens@num+1)& (0+255),b
  7961  0002E8  EC1F  F019         	call	_getTens	;wreg free
  7962  0002EC  C084  F08B         	movff	?_getTens,getChar@num
  7963  0002F0  C085  F08C         	movff	?_getTens+1,getChar@num+1
  7964  0002F4  EC81  F01A         	call	_getChar	;wreg free
  7965  0002F8  0101               	movlb	1	; () banked
  7966  0002FA  6F0C               	movwf	(logPC@started_time+12)& (0+255),b
  7967                           
  7968                           ; BSR set to: 1
  7969                           ;main.c: 792: started_time[13] = getChar(getOnes( (lastRunRTC[1] & 0x0F) + ((lastRunRTC[
      +                          1] & 0xF0)>>4)*10 ));
  7970  0002FC  C0C5  F08D         	movff	_lastRunRTC+1,??_logPC
  7971  000300  0100               	movlb	0	; () banked
  7972  000302  3B8D               	swapf	??_logPC& (0+255),f,b
  7973  000304  0E0F               	movlw	15
  7974  000306  178D               	andwf	??_logPC& (0+255),f,b
  7975  000308  0E0F               	movlw	15
  7976  00030A  0100               	movlb	0	; () banked
  7977  00030C  178D               	andwf	??_logPC& (0+255),f,b
  7978  00030E  0100               	movlb	0	; () banked
  7979  000310  518D               	movf	??_logPC& (0+255),w,b
  7980  000312  0D0A               	mullw	10
  7981  000314  C0C5  F08E         	movff	_lastRunRTC+1,??_logPC+1
  7982  000318  0E0F               	movlw	15
  7983  00031A  0100               	movlb	0	; () banked
  7984  00031C  178E               	andwf	(??_logPC+1)& (0+255),f,b
  7985  00031E  0100               	movlb	0	; () banked
  7986  000320  518E               	movf	(??_logPC+1)& (0+255),w,b
  7987  000322  24F3               	addwf	prodl,w,c
  7988  000324  0100               	movlb	0	; () banked
  7989  000326  6F89               	movwf	getOnes@num& (0+255),b
  7990  000328  0E00               	movlw	0
  7991  00032A  20F4               	addwfc	prodh,w,c
  7992  00032C  0100               	movlb	0	; () banked
  7993  00032E  6F8A               	movwf	(getOnes@num+1)& (0+255),b
  7994  000330  ECD3  F019         	call	_getOnes	;wreg free
  7995  000334  C089  F08B         	movff	?_getOnes,getChar@num
  7996  000338  C08A  F08C         	movff	?_getOnes+1,getChar@num+1
  7997  00033C  EC81  F01A         	call	_getChar	;wreg free
  7998  000340  0101               	movlb	1	; () banked
  7999  000342  6F0D               	movwf	(logPC@started_time+13)& (0+255),b
  8000                           
  8001                           ; BSR set to: 1
  8002                           ;main.c: 793: started_time[15] = getChar(getTens( (lastRunRTC[0] & 0x0F) + ((lastRunRTC[
      +                          0] & 0xF0)>>4)*10 ));
  8003  000344  C0C4  F08D         	movff	_lastRunRTC,??_logPC
  8004  000348  0100               	movlb	0	; () banked
  8005  00034A  3B8D               	swapf	??_logPC& (0+255),f,b
  8006  00034C  0E0F               	movlw	15
  8007  00034E  178D               	andwf	??_logPC& (0+255),f,b
  8008  000350  0E0F               	movlw	15
  8009  000352  0100               	movlb	0	; () banked
  8010  000354  178D               	andwf	??_logPC& (0+255),f,b
  8011  000356  0100               	movlb	0	; () banked
  8012  000358  518D               	movf	??_logPC& (0+255),w,b
  8013  00035A  0D0A               	mullw	10
  8014  00035C  C0C4  F08E         	movff	_lastRunRTC,??_logPC+1
  8015  000360  0E0F               	movlw	15
  8016  000362  0100               	movlb	0	; () banked
  8017  000364  178E               	andwf	(??_logPC+1)& (0+255),f,b
  8018  000366  0100               	movlb	0	; () banked
  8019  000368  518E               	movf	(??_logPC+1)& (0+255),w,b
  8020  00036A  24F3               	addwf	prodl,w,c
  8021  00036C  0100               	movlb	0	; () banked
  8022  00036E  6F84               	movwf	getTens@num& (0+255),b
  8023  000370  0E00               	movlw	0
  8024  000372  20F4               	addwfc	prodh,w,c
  8025  000374  0100               	movlb	0	; () banked
  8026  000376  6F85               	movwf	(getTens@num+1)& (0+255),b
  8027  000378  EC1F  F019         	call	_getTens	;wreg free
  8028  00037C  C084  F08B         	movff	?_getTens,getChar@num
  8029  000380  C085  F08C         	movff	?_getTens+1,getChar@num+1
  8030  000384  EC81  F01A         	call	_getChar	;wreg free
  8031  000388  0101               	movlb	1	; () banked
  8032  00038A  6F0F               	movwf	(logPC@started_time+15)& (0+255),b
  8033                           
  8034                           ; BSR set to: 1
  8035                           ;main.c: 794: started_time[16] = getChar(getOnes( (lastRunRTC[0] & 0x0F) + ((lastRunRTC[
      +                          0] & 0xF0)>>4)*10 ));
  8036  00038C  C0C4  F08D         	movff	_lastRunRTC,??_logPC
  8037  000390  0100               	movlb	0	; () banked
  8038  000392  3B8D               	swapf	??_logPC& (0+255),f,b
  8039  000394  0E0F               	movlw	15
  8040  000396  178D               	andwf	??_logPC& (0+255),f,b
  8041  000398  0E0F               	movlw	15
  8042  00039A  0100               	movlb	0	; () banked
  8043  00039C  178D               	andwf	??_logPC& (0+255),f,b
  8044  00039E  0100               	movlb	0	; () banked
  8045  0003A0  518D               	movf	??_logPC& (0+255),w,b
  8046  0003A2  0D0A               	mullw	10
  8047  0003A4  C0C4  F08E         	movff	_lastRunRTC,??_logPC+1
  8048  0003A8  0E0F               	movlw	15
  8049  0003AA  0100               	movlb	0	; () banked
  8050  0003AC  178E               	andwf	(??_logPC+1)& (0+255),f,b
  8051  0003AE  0100               	movlb	0	; () banked
  8052  0003B0  518E               	movf	(??_logPC+1)& (0+255),w,b
  8053  0003B2  24F3               	addwf	prodl,w,c
  8054  0003B4  0100               	movlb	0	; () banked
  8055  0003B6  6F89               	movwf	getOnes@num& (0+255),b
  8056  0003B8  0E00               	movlw	0
  8057  0003BA  20F4               	addwfc	prodh,w,c
  8058  0003BC  0100               	movlb	0	; () banked
  8059  0003BE  6F8A               	movwf	(getOnes@num+1)& (0+255),b
  8060  0003C0  ECD3  F019         	call	_getOnes	;wreg free
  8061  0003C4  C089  F08B         	movff	?_getOnes,getChar@num
  8062  0003C8  C08A  F08C         	movff	?_getOnes+1,getChar@num+1
  8063  0003CC  EC81  F01A         	call	_getChar	;wreg free
  8064  0003D0  0101               	movlb	1	; () banked
  8065  0003D2  6F10               	movwf	(logPC@started_time+16)& (0+255),b
  8066                           
  8067                           ; BSR set to: 1
  8068                           ;main.c: 795: for(unsigned int i = 0; i < 19; i++) {
  8069  0003D4  0E00               	movlw	0
  8070  0003D6  0101               	movlb	1	; () banked
  8071  0003D8  6F23               	movwf	(logPC@i_909+1)& (0+255),b
  8072  0003DA  0E00               	movlw	0
  8073  0003DC  6F22               	movwf	logPC@i_909& (0+255),b
  8074  0003DE                     l6477:
  8075                           
  8076                           ; BSR set to: 1
  8077  0003DE  0101               	movlb	1	; () banked
  8078  0003E0  5123               	movf	(logPC@i_909+1)& (0+255),w,b
  8079  0003E2  E124               	bnz	l6491
  8080  0003E4  0E13               	movlw	19
  8081  0003E6  0101               	movlb	1	; () banked
  8082  0003E8  5D22               	subwf	logPC@i_909& (0+255),w,b
  8083  0003EA  B0D8               	btfsc	status,0,c
  8084  0003EC  D01F               	goto	l6491
  8085                           
  8086                           ; BSR set to: 1
  8087                           ;main.c: 796: I2C_Master_Start();
  8088                           
  8089                           ; BSR set to: 1
  8090                           
  8091                           ; BSR set to: 1
  8092  0003EE  EC89  F01A         	call	_I2C_Master_Start	;wreg free
  8093                           
  8094                           ;main.c: 797: I2C_Master_Write(0b00010000);
  8095  0003F2  0E00               	movlw	0
  8096  0003F4  6E33               	movwf	I2C_Master_Write@d+1,c
  8097  0003F6  0E10               	movlw	16
  8098  0003F8  6E32               	movwf	I2C_Master_Write@d,c
  8099  0003FA  EC77  F01A         	call	_I2C_Master_Write	;wreg free
  8100                           
  8101                           ;main.c: 798: I2C_Master_Write(started_time[i]);
  8102  0003FE  0E00               	movlw	low logPC@started_time
  8103  000400  0101               	movlb	1	; () banked
  8104  000402  2522               	addwf	logPC@i_909& (0+255),w,b
  8105  000404  6ED9               	movwf	fsr2l,c
  8106  000406  0E01               	movlw	high logPC@started_time
  8107  000408  0101               	movlb	1	; () banked
  8108  00040A  2123               	addwfc	(logPC@i_909+1)& (0+255),w,b
  8109  00040C  6EDA               	movwf	fsr2h,c
  8110  00040E  50DF               	movf	indf2,w,c
  8111  000410  0100               	movlb	0	; () banked
  8112  000412  6F8D               	movwf	??_logPC& (0+255),b
  8113  000414  0100               	movlb	0	; () banked
  8114  000416  518D               	movf	??_logPC& (0+255),w,b
  8115  000418  6E32               	movwf	I2C_Master_Write@d,c
  8116  00041A  6A33               	clrf	I2C_Master_Write@d+1,c
  8117  00041C  EC77  F01A         	call	_I2C_Master_Write	;wreg free
  8118                           
  8119                           ;main.c: 799: I2C_Master_Stop();
  8120  000420  EC85  F01A         	call	_I2C_Master_Stop	;wreg free
  8121  000424  0101               	movlb	1	; () banked
  8122  000426  4B22               	infsnz	logPC@i_909& (0+255),f,b
  8123  000428  2B23               	incf	(logPC@i_909+1)& (0+255),f,b
  8124  00042A  D7D9               	goto	l6477
  8125  00042C                     l6491:
  8126                           
  8127                           ; BSR set to: 1
  8128                           ;main.c: 800: }
  8129                           ;main.c: 802: I2C_Master_Start();
  8130  00042C  EC89  F01A         	call	_I2C_Master_Start	;wreg free
  8131                           
  8132                           ;main.c: 803: I2C_Master_Write(0b00010000);
  8133  000430  0E00               	movlw	0
  8134  000432  6E33               	movwf	I2C_Master_Write@d+1,c
  8135  000434  0E10               	movlw	16
  8136  000436  6E32               	movwf	I2C_Master_Write@d,c
  8137  000438  EC77  F01A         	call	_I2C_Master_Write	;wreg free
  8138                           
  8139                           ;main.c: 804: I2C_Master_Write('\n');
  8140  00043C  0E00               	movlw	0
  8141  00043E  6E33               	movwf	I2C_Master_Write@d+1,c
  8142  000440  0E0A               	movlw	10
  8143  000442  6E32               	movwf	I2C_Master_Write@d,c
  8144  000444  EC77  F01A         	call	_I2C_Master_Write	;wreg free
  8145                           
  8146                           ;main.c: 805: I2C_Master_Stop();
  8147  000448  EC85  F01A         	call	_I2C_Master_Stop	;wreg free
  8148                           
  8149                           ;main.c: 806: for(unsigned int i = 0; i < 31; i++) {
  8150  00044C  0E00               	movlw	0
  8151  00044E  0101               	movlb	1	; () banked
  8152  000450  6F25               	movwf	(logPC@i_910+1)& (0+255),b
  8153  000452  0E00               	movlw	0
  8154  000454  6F24               	movwf	logPC@i_910& (0+255),b
  8155                           
  8156                           ; BSR set to: 1
  8157  000456  0101               	movlb	1	; () banked
  8158  000458  5125               	movf	(logPC@i_910+1)& (0+255),w,b
  8159  00045A  E123               	bnz	l498
  8160  00045C  0E1F               	movlw	31
  8161  00045E  0101               	movlb	1	; () banked
  8162  000460  5D24               	subwf	logPC@i_910& (0+255),w,b
  8163  000462  B0D8               	btfsc	status,0,c
  8164  000464  D01E               	goto	l498
  8165                           
  8166                           ; BSR set to: 1
  8167                           ;main.c: 807: I2C_Master_Start();
  8168                           
  8169                           ; BSR set to: 1
  8170                           
  8171                           ; BSR set to: 1
  8172  000466  EC89  F01A         	call	_I2C_Master_Start	;wreg free
  8173                           
  8174                           ;main.c: 808: I2C_Master_Write(0b00010000);
  8175  00046A  0E00               	movlw	0
  8176  00046C  6E33               	movwf	I2C_Master_Write@d+1,c
  8177  00046E  0E10               	movlw	16
  8178  000470  6E32               	movwf	I2C_Master_Write@d,c
  8179  000472  EC77  F01A         	call	_I2C_Master_Write	;wreg free
  8180                           
  8181                           ;main.c: 809: I2C_Master_Write(AAHeader[i]);
  8182  000476  0EFE               	movlw	low _AAHeader
  8183  000478  0101               	movlb	1	; () banked
  8184  00047A  2524               	addwf	logPC@i_910& (0+255),w,b
  8185  00047C  6EF6               	movwf	tblptrl,c
  8186  00047E  0EFC               	movlw	high _AAHeader
  8187  000480  2125               	addwfc	(logPC@i_910+1)& (0+255),w,b
  8188  000482  6EF7               	movwf	tblptrh,c
  8189  000484                     	if	0	;There are less than 3 active tblptr bytes
  8190  000484                     	endif
  8191  000484  0008               	tblrd		*
  8192  000486  50F5               	movf	tablat,w,c
  8193  000488  6E32               	movwf	I2C_Master_Write@d,c
  8194  00048A  6A33               	clrf	I2C_Master_Write@d+1,c
  8195  00048C  EC77  F01A         	call	_I2C_Master_Write	;wreg free
  8196                           
  8197                           ;main.c: 810: I2C_Master_Stop();
  8198  000490  EC85  F01A         	call	_I2C_Master_Stop	;wreg free
  8199  000494  0101               	movlb	1	; () banked
  8200  000496  4B24               	infsnz	logPC@i_910& (0+255),f,b
  8201  000498  2B25               	incf	(logPC@i_910+1)& (0+255),f,b
  8202                           
  8203                           ; BSR set to: 1
  8204  00049A  0101               	movlb	1	; () banked
  8205  00049C  5125               	movf	(logPC@i_910+1)& (0+255),w,b
  8206  00049E  E101               	bnz	u6210
  8207  0004A0  D7DD               	goto	L1
  8208  0004A2                     u6210:
  8209  0004A2                     l498:
  8210                           
  8211                           ; BSR set to: 1
  8212                           ;main.c: 811: }
  8213                           ;main.c: 812: char numberAA[2] = "  ";
  8214  0004A2  C0F2  F116         	movff	logPC@F3221,logPC@numberAA
  8215  0004A6  C0F3  F117         	movff	logPC@F3221+1,logPC@numberAA+1
  8216                           
  8217                           ; BSR set to: 1
  8218                           ;main.c: 813: numberAA[0] = getChar(getTens(numAA));
  8219  0004AA  C0E9  F084         	movff	_numAA,getTens@num
  8220  0004AE  0100               	movlb	0	; () banked
  8221  0004B0  6B85               	clrf	(getTens@num+1)& (0+255),b
  8222  0004B2  EC1F  F019         	call	_getTens	;wreg free
  8223  0004B6  C084  F08B         	movff	?_getTens,getChar@num
  8224  0004BA  C085  F08C         	movff	?_getTens+1,getChar@num+1
  8225  0004BE  EC81  F01A         	call	_getChar	;wreg free
  8226  0004C2  0101               	movlb	1	; () banked
  8227  0004C4  6F16               	movwf	logPC@numberAA& (0+255),b
  8228                           
  8229                           ;main.c: 814: numberAA[1] = getChar(getOnes(numAA));
  8230  0004C6  C0E9  F089         	movff	_numAA,getOnes@num
  8231  0004CA  0100               	movlb	0	; () banked
  8232  0004CC  6B8A               	clrf	(getOnes@num+1)& (0+255),b
  8233  0004CE  ECD3  F019         	call	_getOnes	;wreg free
  8234  0004D2  C089  F08B         	movff	?_getOnes,getChar@num
  8235  0004D6  C08A  F08C         	movff	?_getOnes+1,getChar@num+1
  8236  0004DA  EC81  F01A         	call	_getChar	;wreg free
  8237  0004DE  0101               	movlb	1	; () banked
  8238  0004E0  6F17               	movwf	(logPC@numberAA+1)& (0+255),b
  8239                           
  8240                           ; BSR set to: 1
  8241                           ;main.c: 815: for(unsigned int i = 0; i < 2; i++) {
  8242  0004E2  0E00               	movlw	0
  8243  0004E4  0101               	movlb	1	; () banked
  8244  0004E6  6F27               	movwf	(logPC@i_913+1)& (0+255),b
  8245  0004E8  0E00               	movlw	0
  8246  0004EA  6F26               	movwf	logPC@i_913& (0+255),b
  8247  0004EC                     l6513:
  8248                           
  8249                           ; BSR set to: 1
  8250  0004EC  0101               	movlb	1	; () banked
  8251  0004EE  5127               	movf	(logPC@i_913+1)& (0+255),w,b
  8252  0004F0  E124               	bnz	l6527
  8253  0004F2  0E02               	movlw	2
  8254  0004F4  0101               	movlb	1	; () banked
  8255  0004F6  5D26               	subwf	logPC@i_913& (0+255),w,b
  8256  0004F8  B0D8               	btfsc	status,0,c
  8257  0004FA  D01F               	goto	l6527
  8258                           
  8259                           ; BSR set to: 1
  8260                           ;main.c: 816: I2C_Master_Start();
  8261                           
  8262                           ; BSR set to: 1
  8263                           
  8264                           ; BSR set to: 1
  8265  0004FC  EC89  F01A         	call	_I2C_Master_Start	;wreg free
  8266                           
  8267                           ;main.c: 817: I2C_Master_Write(0b00010000);
  8268  000500  0E00               	movlw	0
  8269  000502  6E33               	movwf	I2C_Master_Write@d+1,c
  8270  000504  0E10               	movlw	16
  8271  000506  6E32               	movwf	I2C_Master_Write@d,c
  8272  000508  EC77  F01A         	call	_I2C_Master_Write	;wreg free
  8273                           
  8274                           ;main.c: 818: I2C_Master_Write(numberAA[i]);
  8275  00050C  0E16               	movlw	low logPC@numberAA
  8276  00050E  0101               	movlb	1	; () banked
  8277  000510  2526               	addwf	logPC@i_913& (0+255),w,b
  8278  000512  6ED9               	movwf	fsr2l,c
  8279  000514  0E01               	movlw	high logPC@numberAA
  8280  000516  0101               	movlb	1	; () banked
  8281  000518  2127               	addwfc	(logPC@i_913+1)& (0+255),w,b
  8282  00051A  6EDA               	movwf	fsr2h,c
  8283  00051C  50DF               	movf	indf2,w,c
  8284  00051E  0100               	movlb	0	; () banked
  8285  000520  6F8D               	movwf	??_logPC& (0+255),b
  8286  000522  0100               	movlb	0	; () banked
  8287  000524  518D               	movf	??_logPC& (0+255),w,b
  8288  000526  6E32               	movwf	I2C_Master_Write@d,c
  8289  000528  6A33               	clrf	I2C_Master_Write@d+1,c
  8290  00052A  EC77  F01A         	call	_I2C_Master_Write	;wreg free
  8291                           
  8292                           ;main.c: 819: I2C_Master_Stop();
  8293  00052E  EC85  F01A         	call	_I2C_Master_Stop	;wreg free
  8294  000532  0101               	movlb	1	; () banked
  8295  000534  4B26               	infsnz	logPC@i_913& (0+255),f,b
  8296  000536  2B27               	incf	(logPC@i_913+1)& (0+255),f,b
  8297  000538  D7D9               	goto	l6513
  8298  00053A                     l6527:
  8299                           
  8300                           ; BSR set to: 1
  8301                           ;main.c: 820: }
  8302                           ;main.c: 822: I2C_Master_Start();
  8303  00053A  EC89  F01A         	call	_I2C_Master_Start	;wreg free
  8304                           
  8305                           ;main.c: 823: I2C_Master_Write(0b00010000);
  8306  00053E  0E00               	movlw	0
  8307  000540  6E33               	movwf	I2C_Master_Write@d+1,c
  8308  000542  0E10               	movlw	16
  8309  000544  6E32               	movwf	I2C_Master_Write@d,c
  8310  000546  EC77  F01A         	call	_I2C_Master_Write	;wreg free
  8311                           
  8312                           ;main.c: 824: I2C_Master_Write('\n');
  8313  00054A  0E00               	movlw	0
  8314  00054C  6E33               	movwf	I2C_Master_Write@d+1,c
  8315  00054E  0E0A               	movlw	10
  8316  000550  6E32               	movwf	I2C_Master_Write@d,c
  8317  000552  EC77  F01A         	call	_I2C_Master_Write	;wreg free
  8318                           
  8319                           ;main.c: 825: I2C_Master_Stop();
  8320  000556  EC85  F01A         	call	_I2C_Master_Stop	;wreg free
  8321                           
  8322                           ;main.c: 826: for(unsigned int i = 0; i < 30; i++) {
  8323  00055A  0E00               	movlw	0
  8324  00055C  0101               	movlb	1	; () banked
  8325  00055E  6F29               	movwf	(logPC@i_914+1)& (0+255),b
  8326  000560  0E00               	movlw	0
  8327  000562  6F28               	movwf	logPC@i_914& (0+255),b
  8328                           
  8329                           ; BSR set to: 1
  8330  000564  0101               	movlb	1	; () banked
  8331  000566  5129               	movf	(logPC@i_914+1)& (0+255),w,b
  8332  000568  E123               	bnz	l504
  8333  00056A  0E1E               	movlw	30
  8334  00056C  0101               	movlb	1	; () banked
  8335  00056E  5D28               	subwf	logPC@i_914& (0+255),w,b
  8336  000570  B0D8               	btfsc	status,0,c
  8337  000572  D01E               	goto	l504
  8338                           
  8339                           ; BSR set to: 1
  8340                           ;main.c: 827: I2C_Master_Start();
  8341                           
  8342                           ; BSR set to: 1
  8343                           
  8344                           ; BSR set to: 1
  8345  000574  EC89  F01A         	call	_I2C_Master_Start	;wreg free
  8346                           
  8347                           ;main.c: 828: I2C_Master_Write(0b00010000);
  8348  000578  0E00               	movlw	0
  8349  00057A  6E33               	movwf	I2C_Master_Write@d+1,c
  8350  00057C  0E10               	movlw	16
  8351  00057E  6E32               	movwf	I2C_Master_Write@d,c
  8352  000580  EC77  F01A         	call	_I2C_Master_Write	;wreg free
  8353                           
  8354                           ;main.c: 829: I2C_Master_Write(CHeader[i]);
  8355  000584  0E5E               	movlw	low _CHeader
  8356  000586  0101               	movlb	1	; () banked
  8357  000588  2528               	addwf	logPC@i_914& (0+255),w,b
  8358  00058A  6EF6               	movwf	tblptrl,c
  8359  00058C  0EFD               	movlw	high _CHeader
  8360  00058E  2129               	addwfc	(logPC@i_914+1)& (0+255),w,b
  8361  000590  6EF7               	movwf	tblptrh,c
  8362  000592                     	if	0	;There are less than 3 active tblptr bytes
  8363  000592                     	endif
  8364  000592  0008               	tblrd		*
  8365  000594  50F5               	movf	tablat,w,c
  8366  000596  6E32               	movwf	I2C_Master_Write@d,c
  8367  000598  6A33               	clrf	I2C_Master_Write@d+1,c
  8368  00059A  EC77  F01A         	call	_I2C_Master_Write	;wreg free
  8369                           
  8370                           ;main.c: 830: I2C_Master_Stop();
  8371  00059E  EC85  F01A         	call	_I2C_Master_Stop	;wreg free
  8372  0005A2  0101               	movlb	1	; () banked
  8373  0005A4  4B28               	infsnz	logPC@i_914& (0+255),f,b
  8374  0005A6  2B29               	incf	(logPC@i_914+1)& (0+255),f,b
  8375                           
  8376                           ; BSR set to: 1
  8377  0005A8  0101               	movlb	1	; () banked
  8378  0005AA  5129               	movf	(logPC@i_914+1)& (0+255),w,b
  8379  0005AC  E101               	bnz	u6250
  8380  0005AE  D7DD               	goto	L2
  8381  0005B0                     u6250:
  8382  0005B0                     l504:
  8383                           
  8384                           ; BSR set to: 1
  8385                           ;main.c: 831: }
  8386                           ;main.c: 832: char numberC[2] = "  ";
  8387  0005B0  C0F4  F118         	movff	logPC@F3225,logPC@numberC
  8388  0005B4  C0F5  F119         	movff	logPC@F3225+1,logPC@numberC+1
  8389                           
  8390                           ; BSR set to: 1
  8391                           ;main.c: 833: numberC[0] = getChar(getTens(numC));
  8392  0005B8  C0EB  F084         	movff	_numC,getTens@num
  8393  0005BC  0100               	movlb	0	; () banked
  8394  0005BE  6B85               	clrf	(getTens@num+1)& (0+255),b
  8395  0005C0  EC1F  F019         	call	_getTens	;wreg free
  8396  0005C4  C084  F08B         	movff	?_getTens,getChar@num
  8397  0005C8  C085  F08C         	movff	?_getTens+1,getChar@num+1
  8398  0005CC  EC81  F01A         	call	_getChar	;wreg free
  8399  0005D0  0101               	movlb	1	; () banked
  8400  0005D2  6F18               	movwf	logPC@numberC& (0+255),b
  8401                           
  8402                           ;main.c: 834: numberC[1] = getChar(getOnes(numC));
  8403  0005D4  C0EB  F089         	movff	_numC,getOnes@num
  8404  0005D8  0100               	movlb	0	; () banked
  8405  0005DA  6B8A               	clrf	(getOnes@num+1)& (0+255),b
  8406  0005DC  ECD3  F019         	call	_getOnes	;wreg free
  8407  0005E0  C089  F08B         	movff	?_getOnes,getChar@num
  8408  0005E4  C08A  F08C         	movff	?_getOnes+1,getChar@num+1
  8409  0005E8  EC81  F01A         	call	_getChar	;wreg free
  8410  0005EC  0101               	movlb	1	; () banked
  8411  0005EE  6F19               	movwf	(logPC@numberC+1)& (0+255),b
  8412                           
  8413                           ; BSR set to: 1
  8414                           ;main.c: 835: for(unsigned int i = 0; i < 2; i++) {
  8415  0005F0  0E00               	movlw	0
  8416  0005F2  0101               	movlb	1	; () banked
  8417  0005F4  6F2B               	movwf	(logPC@i_917+1)& (0+255),b
  8418  0005F6  0E00               	movlw	0
  8419  0005F8  6F2A               	movwf	logPC@i_917& (0+255),b
  8420  0005FA                     l6549:
  8421                           
  8422                           ; BSR set to: 1
  8423  0005FA  0101               	movlb	1	; () banked
  8424  0005FC  512B               	movf	(logPC@i_917+1)& (0+255),w,b
  8425  0005FE  E124               	bnz	l6563
  8426  000600  0E02               	movlw	2
  8427  000602  0101               	movlb	1	; () banked
  8428  000604  5D2A               	subwf	logPC@i_917& (0+255),w,b
  8429  000606  B0D8               	btfsc	status,0,c
  8430  000608  D01F               	goto	l6563
  8431                           
  8432                           ; BSR set to: 1
  8433                           ;main.c: 836: I2C_Master_Start();
  8434                           
  8435                           ; BSR set to: 1
  8436                           
  8437                           ; BSR set to: 1
  8438  00060A  EC89  F01A         	call	_I2C_Master_Start	;wreg free
  8439                           
  8440                           ;main.c: 837: I2C_Master_Write(0b00010000);
  8441  00060E  0E00               	movlw	0
  8442  000610  6E33               	movwf	I2C_Master_Write@d+1,c
  8443  000612  0E10               	movlw	16
  8444  000614  6E32               	movwf	I2C_Master_Write@d,c
  8445  000616  EC77  F01A         	call	_I2C_Master_Write	;wreg free
  8446                           
  8447                           ;main.c: 838: I2C_Master_Write(numberC[i]);
  8448  00061A  0E18               	movlw	low logPC@numberC
  8449  00061C  0101               	movlb	1	; () banked
  8450  00061E  252A               	addwf	logPC@i_917& (0+255),w,b
  8451  000620  6ED9               	movwf	fsr2l,c
  8452  000622  0E01               	movlw	high logPC@numberC
  8453  000624  0101               	movlb	1	; () banked
  8454  000626  212B               	addwfc	(logPC@i_917+1)& (0+255),w,b
  8455  000628  6EDA               	movwf	fsr2h,c
  8456  00062A  50DF               	movf	indf2,w,c
  8457  00062C  0100               	movlb	0	; () banked
  8458  00062E  6F8D               	movwf	??_logPC& (0+255),b
  8459  000630  0100               	movlb	0	; () banked
  8460  000632  518D               	movf	??_logPC& (0+255),w,b
  8461  000634  6E32               	movwf	I2C_Master_Write@d,c
  8462  000636  6A33               	clrf	I2C_Master_Write@d+1,c
  8463  000638  EC77  F01A         	call	_I2C_Master_Write	;wreg free
  8464                           
  8465                           ;main.c: 839: I2C_Master_Stop();
  8466  00063C  EC85  F01A         	call	_I2C_Master_Stop	;wreg free
  8467  000640  0101               	movlb	1	; () banked
  8468  000642  4B2A               	infsnz	logPC@i_917& (0+255),f,b
  8469  000644  2B2B               	incf	(logPC@i_917+1)& (0+255),f,b
  8470  000646  D7D9               	goto	l6549
  8471  000648                     l6563:
  8472                           
  8473                           ; BSR set to: 1
  8474                           ;main.c: 840: }
  8475                           ;main.c: 842: I2C_Master_Start();
  8476  000648  EC89  F01A         	call	_I2C_Master_Start	;wreg free
  8477                           
  8478                           ;main.c: 843: I2C_Master_Write(0b00010000);
  8479  00064C  0E00               	movlw	0
  8480  00064E  6E33               	movwf	I2C_Master_Write@d+1,c
  8481  000650  0E10               	movlw	16
  8482  000652  6E32               	movwf	I2C_Master_Write@d,c
  8483  000654  EC77  F01A         	call	_I2C_Master_Write	;wreg free
  8484                           
  8485                           ;main.c: 844: I2C_Master_Write('\n');
  8486  000658  0E00               	movlw	0
  8487  00065A  6E33               	movwf	I2C_Master_Write@d+1,c
  8488  00065C  0E0A               	movlw	10
  8489  00065E  6E32               	movwf	I2C_Master_Write@d,c
  8490  000660  EC77  F01A         	call	_I2C_Master_Write	;wreg free
  8491                           
  8492                           ;main.c: 845: I2C_Master_Stop();
  8493  000664  EC85  F01A         	call	_I2C_Master_Stop	;wreg free
  8494                           
  8495                           ;main.c: 846: for(unsigned int i = 0; i < 31; i++) {
  8496  000668  0E00               	movlw	0
  8497  00066A  0101               	movlb	1	; () banked
  8498  00066C  6F2D               	movwf	(logPC@i_918+1)& (0+255),b
  8499  00066E  0E00               	movlw	0
  8500  000670  6F2C               	movwf	logPC@i_918& (0+255),b
  8501                           
  8502                           ; BSR set to: 1
  8503  000672  0101               	movlb	1	; () banked
  8504  000674  512D               	movf	(logPC@i_918+1)& (0+255),w,b
  8505  000676  E123               	bnz	l510
  8506  000678  0E1F               	movlw	31
  8507  00067A  0101               	movlb	1	; () banked
  8508  00067C  5D2C               	subwf	logPC@i_918& (0+255),w,b
  8509  00067E  B0D8               	btfsc	status,0,c
  8510  000680  D01E               	goto	l510
  8511                           
  8512                           ; BSR set to: 1
  8513                           ;main.c: 847: I2C_Master_Start();
  8514                           
  8515                           ; BSR set to: 1
  8516                           
  8517                           ; BSR set to: 1
  8518  000682  EC89  F01A         	call	_I2C_Master_Start	;wreg free
  8519                           
  8520                           ;main.c: 848: I2C_Master_Write(0b00010000);
  8521  000686  0E00               	movlw	0
  8522  000688  6E33               	movwf	I2C_Master_Write@d+1,c
  8523  00068A  0E10               	movlw	16
  8524  00068C  6E32               	movwf	I2C_Master_Write@d,c
  8525  00068E  EC77  F01A         	call	_I2C_Master_Write	;wreg free
  8526                           
  8527                           ;main.c: 849: I2C_Master_Write(nineVHeader[i]);
  8528  000692  0E1E               	movlw	low _nineVHeader
  8529  000694  0101               	movlb	1	; () banked
  8530  000696  252C               	addwf	logPC@i_918& (0+255),w,b
  8531  000698  6EF6               	movwf	tblptrl,c
  8532  00069A  0EFD               	movlw	high _nineVHeader
  8533  00069C  212D               	addwfc	(logPC@i_918+1)& (0+255),w,b
  8534  00069E  6EF7               	movwf	tblptrh,c
  8535  0006A0                     	if	0	;There are less than 3 active tblptr bytes
  8536  0006A0                     	endif
  8537  0006A0  0008               	tblrd		*
  8538  0006A2  50F5               	movf	tablat,w,c
  8539  0006A4  6E32               	movwf	I2C_Master_Write@d,c
  8540  0006A6  6A33               	clrf	I2C_Master_Write@d+1,c
  8541  0006A8  EC77  F01A         	call	_I2C_Master_Write	;wreg free
  8542                           
  8543                           ;main.c: 850: I2C_Master_Stop();
  8544  0006AC  EC85  F01A         	call	_I2C_Master_Stop	;wreg free
  8545  0006B0  0101               	movlb	1	; () banked
  8546  0006B2  4B2C               	infsnz	logPC@i_918& (0+255),f,b
  8547  0006B4  2B2D               	incf	(logPC@i_918+1)& (0+255),f,b
  8548                           
  8549                           ; BSR set to: 1
  8550  0006B6  0101               	movlb	1	; () banked
  8551  0006B8  512D               	movf	(logPC@i_918+1)& (0+255),w,b
  8552  0006BA  E101               	bnz	u6290
  8553  0006BC  D7DD               	goto	L3
  8554  0006BE                     u6290:
  8555  0006BE                     l510:
  8556                           
  8557                           ; BSR set to: 1
  8558                           ;main.c: 851: }
  8559                           ;main.c: 852: char number9V[2] = "  ";
  8560  0006BE  C0F6  F11A         	movff	logPC@F3229,logPC@number9V
  8561  0006C2  C0F7  F11B         	movff	logPC@F3229+1,logPC@number9V+1
  8562                           
  8563                           ; BSR set to: 1
  8564                           ;main.c: 853: number9V[0] = getChar(getTens(num9V));
  8565  0006C6  C0E8  F084         	movff	_num9V,getTens@num
  8566  0006CA  0100               	movlb	0	; () banked
  8567  0006CC  6B85               	clrf	(getTens@num+1)& (0+255),b
  8568  0006CE  EC1F  F019         	call	_getTens	;wreg free
  8569  0006D2  C084  F08B         	movff	?_getTens,getChar@num
  8570  0006D6  C085  F08C         	movff	?_getTens+1,getChar@num+1
  8571  0006DA  EC81  F01A         	call	_getChar	;wreg free
  8572  0006DE  0101               	movlb	1	; () banked
  8573  0006E0  6F1A               	movwf	logPC@number9V& (0+255),b
  8574                           
  8575                           ;main.c: 854: number9V[1] = getChar(getOnes(num9V));
  8576  0006E2  C0E8  F089         	movff	_num9V,getOnes@num
  8577  0006E6  0100               	movlb	0	; () banked
  8578  0006E8  6B8A               	clrf	(getOnes@num+1)& (0+255),b
  8579  0006EA  ECD3  F019         	call	_getOnes	;wreg free
  8580  0006EE  C089  F08B         	movff	?_getOnes,getChar@num
  8581  0006F2  C08A  F08C         	movff	?_getOnes+1,getChar@num+1
  8582  0006F6  EC81  F01A         	call	_getChar	;wreg free
  8583  0006FA  0101               	movlb	1	; () banked
  8584  0006FC  6F1B               	movwf	(logPC@number9V+1)& (0+255),b
  8585                           
  8586                           ; BSR set to: 1
  8587                           ;main.c: 855: for(unsigned int i = 0; i < 2; i++) {
  8588  0006FE  0E00               	movlw	0
  8589  000700  0101               	movlb	1	; () banked
  8590  000702  6F2F               	movwf	(logPC@i_921+1)& (0+255),b
  8591  000704  0E00               	movlw	0
  8592  000706  6F2E               	movwf	logPC@i_921& (0+255),b
  8593  000708                     l6585:
  8594                           
  8595                           ; BSR set to: 1
  8596  000708  0101               	movlb	1	; () banked
  8597  00070A  512F               	movf	(logPC@i_921+1)& (0+255),w,b
  8598  00070C  E124               	bnz	l6599
  8599  00070E  0E02               	movlw	2
  8600  000710  0101               	movlb	1	; () banked
  8601  000712  5D2E               	subwf	logPC@i_921& (0+255),w,b
  8602  000714  B0D8               	btfsc	status,0,c
  8603  000716  D01F               	goto	l6599
  8604                           
  8605                           ; BSR set to: 1
  8606                           ;main.c: 856: I2C_Master_Start();
  8607                           
  8608                           ; BSR set to: 1
  8609                           
  8610                           ; BSR set to: 1
  8611  000718  EC89  F01A         	call	_I2C_Master_Start	;wreg free
  8612                           
  8613                           ;main.c: 857: I2C_Master_Write(0b00010000);
  8614  00071C  0E00               	movlw	0
  8615  00071E  6E33               	movwf	I2C_Master_Write@d+1,c
  8616  000720  0E10               	movlw	16
  8617  000722  6E32               	movwf	I2C_Master_Write@d,c
  8618  000724  EC77  F01A         	call	_I2C_Master_Write	;wreg free
  8619                           
  8620                           ;main.c: 858: I2C_Master_Write(number9V[i]);
  8621  000728  0E1A               	movlw	low logPC@number9V
  8622  00072A  0101               	movlb	1	; () banked
  8623  00072C  252E               	addwf	logPC@i_921& (0+255),w,b
  8624  00072E  6ED9               	movwf	fsr2l,c
  8625  000730  0E01               	movlw	high logPC@number9V
  8626  000732  0101               	movlb	1	; () banked
  8627  000734  212F               	addwfc	(logPC@i_921+1)& (0+255),w,b
  8628  000736  6EDA               	movwf	fsr2h,c
  8629  000738  50DF               	movf	indf2,w,c
  8630  00073A  0100               	movlb	0	; () banked
  8631  00073C  6F8D               	movwf	??_logPC& (0+255),b
  8632  00073E  0100               	movlb	0	; () banked
  8633  000740  518D               	movf	??_logPC& (0+255),w,b
  8634  000742  6E32               	movwf	I2C_Master_Write@d,c
  8635  000744  6A33               	clrf	I2C_Master_Write@d+1,c
  8636  000746  EC77  F01A         	call	_I2C_Master_Write	;wreg free
  8637                           
  8638                           ;main.c: 859: I2C_Master_Stop();
  8639  00074A  EC85  F01A         	call	_I2C_Master_Stop	;wreg free
  8640  00074E  0101               	movlb	1	; () banked
  8641  000750  4B2E               	infsnz	logPC@i_921& (0+255),f,b
  8642  000752  2B2F               	incf	(logPC@i_921+1)& (0+255),f,b
  8643  000754  D7D9               	goto	l6585
  8644  000756                     l6599:
  8645                           
  8646                           ; BSR set to: 1
  8647                           ;main.c: 860: }
  8648                           ;main.c: 862: I2C_Master_Start();
  8649  000756  EC89  F01A         	call	_I2C_Master_Start	;wreg free
  8650                           
  8651                           ;main.c: 863: I2C_Master_Write(0b00010000);
  8652  00075A  0E00               	movlw	0
  8653  00075C  6E33               	movwf	I2C_Master_Write@d+1,c
  8654  00075E  0E10               	movlw	16
  8655  000760  6E32               	movwf	I2C_Master_Write@d,c
  8656  000762  EC77  F01A         	call	_I2C_Master_Write	;wreg free
  8657                           
  8658                           ;main.c: 864: I2C_Master_Write('\n');
  8659  000766  0E00               	movlw	0
  8660  000768  6E33               	movwf	I2C_Master_Write@d+1,c
  8661  00076A  0E0A               	movlw	10
  8662  00076C  6E32               	movwf	I2C_Master_Write@d,c
  8663  00076E  EC77  F01A         	call	_I2C_Master_Write	;wreg free
  8664                           
  8665                           ;main.c: 865: I2C_Master_Stop();
  8666  000772  EC85  F01A         	call	_I2C_Master_Stop	;wreg free
  8667                           
  8668                           ;main.c: 866: for(unsigned int i = 0; i < 36; i++) {
  8669  000776  0E00               	movlw	0
  8670  000778  0101               	movlb	1	; () banked
  8671  00077A  6F31               	movwf	(logPC@i_922+1)& (0+255),b
  8672  00077C  0E00               	movlw	0
  8673  00077E  6F30               	movwf	logPC@i_922& (0+255),b
  8674                           
  8675                           ; BSR set to: 1
  8676  000780  0101               	movlb	1	; () banked
  8677  000782  5131               	movf	(logPC@i_922+1)& (0+255),w,b
  8678  000784  E123               	bnz	l516
  8679  000786  0E24               	movlw	36
  8680  000788  0101               	movlb	1	; () banked
  8681  00078A  5D30               	subwf	logPC@i_922& (0+255),w,b
  8682  00078C  B0D8               	btfsc	status,0,c
  8683  00078E  D01E               	goto	l516
  8684                           
  8685                           ; BSR set to: 1
  8686                           ;main.c: 867: I2C_Master_Start();
  8687                           
  8688                           ; BSR set to: 1
  8689                           
  8690                           ; BSR set to: 1
  8691  000790  EC89  F01A         	call	_I2C_Master_Start	;wreg free
  8692                           
  8693                           ;main.c: 868: I2C_Master_Write(0b00010000);
  8694  000794  0E00               	movlw	0
  8695  000796  6E33               	movwf	I2C_Master_Write@d+1,c
  8696  000798  0E10               	movlw	16
  8697  00079A  6E32               	movwf	I2C_Master_Write@d,c
  8698  00079C  EC77  F01A         	call	_I2C_Master_Write	;wreg free
  8699                           
  8700                           ;main.c: 869: I2C_Master_Write(drainHeader[i]);
  8701  0007A0  0E95               	movlw	low _drainHeader
  8702  0007A2  0101               	movlb	1	; () banked
  8703  0007A4  2530               	addwf	logPC@i_922& (0+255),w,b
  8704  0007A6  6EF6               	movwf	tblptrl,c
  8705  0007A8  0EFC               	movlw	high _drainHeader
  8706  0007AA  2131               	addwfc	(logPC@i_922+1)& (0+255),w,b
  8707  0007AC  6EF7               	movwf	tblptrh,c
  8708  0007AE                     	if	0	;There are less than 3 active tblptr bytes
  8709  0007AE                     	endif
  8710  0007AE  0008               	tblrd		*
  8711  0007B0  50F5               	movf	tablat,w,c
  8712  0007B2  6E32               	movwf	I2C_Master_Write@d,c
  8713  0007B4  6A33               	clrf	I2C_Master_Write@d+1,c
  8714  0007B6  EC77  F01A         	call	_I2C_Master_Write	;wreg free
  8715                           
  8716                           ;main.c: 870: I2C_Master_Stop();
  8717  0007BA  EC85  F01A         	call	_I2C_Master_Stop	;wreg free
  8718  0007BE  0101               	movlb	1	; () banked
  8719  0007C0  4B30               	infsnz	logPC@i_922& (0+255),f,b
  8720  0007C2  2B31               	incf	(logPC@i_922+1)& (0+255),f,b
  8721                           
  8722                           ; BSR set to: 1
  8723  0007C4  0101               	movlb	1	; () banked
  8724  0007C6  5131               	movf	(logPC@i_922+1)& (0+255),w,b
  8725  0007C8  E101               	bnz	u6330
  8726  0007CA  D7DD               	goto	L4
  8727  0007CC                     u6330:
  8728  0007CC                     l516:
  8729                           
  8730                           ; BSR set to: 1
  8731                           ;main.c: 871: }
  8732                           ;main.c: 872: char numberDrain[2] = "  ";
  8733  0007CC  C0F8  F11C         	movff	logPC@F3233,logPC@numberDrain
  8734  0007D0  C0F9  F11D         	movff	logPC@F3233+1,logPC@numberDrain+1
  8735                           
  8736                           ; BSR set to: 1
  8737                           ;main.c: 873: numberDrain[0] = getChar(getTens(numDrain));
  8738  0007D4  C0EC  F084         	movff	_numDrain,getTens@num
  8739  0007D8  0100               	movlb	0	; () banked
  8740  0007DA  6B85               	clrf	(getTens@num+1)& (0+255),b
  8741  0007DC  EC1F  F019         	call	_getTens	;wreg free
  8742  0007E0  C084  F08B         	movff	?_getTens,getChar@num
  8743  0007E4  C085  F08C         	movff	?_getTens+1,getChar@num+1
  8744  0007E8  EC81  F01A         	call	_getChar	;wreg free
  8745  0007EC  0101               	movlb	1	; () banked
  8746  0007EE  6F1C               	movwf	logPC@numberDrain& (0+255),b
  8747                           
  8748                           ;main.c: 874: numberDrain[1] = getChar(getOnes(numDrain));
  8749  0007F0  C0EC  F089         	movff	_numDrain,getOnes@num
  8750  0007F4  0100               	movlb	0	; () banked
  8751  0007F6  6B8A               	clrf	(getOnes@num+1)& (0+255),b
  8752  0007F8  ECD3  F019         	call	_getOnes	;wreg free
  8753  0007FC  C089  F08B         	movff	?_getOnes,getChar@num
  8754  000800  C08A  F08C         	movff	?_getOnes+1,getChar@num+1
  8755  000804  EC81  F01A         	call	_getChar	;wreg free
  8756  000808  0101               	movlb	1	; () banked
  8757  00080A  6F1D               	movwf	(logPC@numberDrain+1)& (0+255),b
  8758                           
  8759                           ; BSR set to: 1
  8760                           ;main.c: 875: for(unsigned int i = 0; i < 2; i++) {
  8761  00080C  0E00               	movlw	0
  8762  00080E  0101               	movlb	1	; () banked
  8763  000810  6F33               	movwf	(logPC@i_925+1)& (0+255),b
  8764  000812  0E00               	movlw	0
  8765  000814  6F32               	movwf	logPC@i_925& (0+255),b
  8766  000816                     l6621:
  8767                           
  8768                           ; BSR set to: 1
  8769  000816  0101               	movlb	1	; () banked
  8770  000818  5133               	movf	(logPC@i_925+1)& (0+255),w,b
  8771  00081A  E124               	bnz	l6635
  8772  00081C  0E02               	movlw	2
  8773  00081E  0101               	movlb	1	; () banked
  8774  000820  5D32               	subwf	logPC@i_925& (0+255),w,b
  8775  000822  B0D8               	btfsc	status,0,c
  8776  000824  D01F               	goto	l6635
  8777                           
  8778                           ; BSR set to: 1
  8779                           ;main.c: 876: I2C_Master_Start();
  8780                           
  8781                           ; BSR set to: 1
  8782                           
  8783                           ; BSR set to: 1
  8784  000826  EC89  F01A         	call	_I2C_Master_Start	;wreg free
  8785                           
  8786                           ;main.c: 877: I2C_Master_Write(0b00010000);
  8787  00082A  0E00               	movlw	0
  8788  00082C  6E33               	movwf	I2C_Master_Write@d+1,c
  8789  00082E  0E10               	movlw	16
  8790  000830  6E32               	movwf	I2C_Master_Write@d,c
  8791  000832  EC77  F01A         	call	_I2C_Master_Write	;wreg free
  8792                           
  8793                           ;main.c: 878: I2C_Master_Write(numberDrain[i]);
  8794  000836  0E1C               	movlw	low logPC@numberDrain
  8795  000838  0101               	movlb	1	; () banked
  8796  00083A  2532               	addwf	logPC@i_925& (0+255),w,b
  8797  00083C  6ED9               	movwf	fsr2l,c
  8798  00083E  0E01               	movlw	high logPC@numberDrain
  8799  000840  0101               	movlb	1	; () banked
  8800  000842  2133               	addwfc	(logPC@i_925+1)& (0+255),w,b
  8801  000844  6EDA               	movwf	fsr2h,c
  8802  000846  50DF               	movf	indf2,w,c
  8803  000848  0100               	movlb	0	; () banked
  8804  00084A  6F8D               	movwf	??_logPC& (0+255),b
  8805  00084C  0100               	movlb	0	; () banked
  8806  00084E  518D               	movf	??_logPC& (0+255),w,b
  8807  000850  6E32               	movwf	I2C_Master_Write@d,c
  8808  000852  6A33               	clrf	I2C_Master_Write@d+1,c
  8809  000854  EC77  F01A         	call	_I2C_Master_Write	;wreg free
  8810                           
  8811                           ;main.c: 879: I2C_Master_Stop();
  8812  000858  EC85  F01A         	call	_I2C_Master_Stop	;wreg free
  8813  00085C  0101               	movlb	1	; () banked
  8814  00085E  4B32               	infsnz	logPC@i_925& (0+255),f,b
  8815  000860  2B33               	incf	(logPC@i_925+1)& (0+255),f,b
  8816  000862  D7D9               	goto	l6621
  8817  000864                     l6635:
  8818                           
  8819                           ; BSR set to: 1
  8820                           ;main.c: 880: }
  8821                           ;main.c: 882: I2C_Master_Start();
  8822  000864  EC89  F01A         	call	_I2C_Master_Start	;wreg free
  8823                           
  8824                           ;main.c: 883: I2C_Master_Write(0b00010000);
  8825  000868  0E00               	movlw	0
  8826  00086A  6E33               	movwf	I2C_Master_Write@d+1,c
  8827  00086C  0E10               	movlw	16
  8828  00086E  6E32               	movwf	I2C_Master_Write@d,c
  8829  000870  EC77  F01A         	call	_I2C_Master_Write	;wreg free
  8830                           
  8831                           ;main.c: 884: I2C_Master_Write('\n');
  8832  000874  0E00               	movlw	0
  8833  000876  6E33               	movwf	I2C_Master_Write@d+1,c
  8834  000878  0E0A               	movlw	10
  8835  00087A  6E32               	movwf	I2C_Master_Write@d,c
  8836  00087C  EC77  F01A         	call	_I2C_Master_Write	;wreg free
  8837                           
  8838                           ;main.c: 885: I2C_Master_Stop();
  8839  000880  EC85  F01A         	call	_I2C_Master_Stop	;wreg free
  8840                           
  8841                           ;main.c: 886: for(unsigned int i = 0; i < 34; i++) {
  8842  000884  0E00               	movlw	0
  8843  000886  0101               	movlb	1	; () banked
  8844  000888  6F35               	movwf	(logPC@i_926+1)& (0+255),b
  8845  00088A  0E00               	movlw	0
  8846  00088C  6F34               	movwf	logPC@i_926& (0+255),b
  8847                           
  8848                           ; BSR set to: 1
  8849  00088E  0101               	movlb	1	; () banked
  8850  000890  5135               	movf	(logPC@i_926+1)& (0+255),w,b
  8851  000892  E123               	bnz	l522
  8852  000894  0E22               	movlw	34
  8853  000896  0101               	movlb	1	; () banked
  8854  000898  5D34               	subwf	logPC@i_926& (0+255),w,b
  8855  00089A  B0D8               	btfsc	status,0,c
  8856  00089C  D01E               	goto	l522
  8857                           
  8858                           ; BSR set to: 1
  8859                           ;main.c: 887: I2C_Master_Start();
  8860                           
  8861                           ; BSR set to: 1
  8862                           
  8863                           ; BSR set to: 1
  8864  00089E  EC89  F01A         	call	_I2C_Master_Start	;wreg free
  8865                           
  8866                           ;main.c: 888: I2C_Master_Write(0b00010000);
  8867  0008A2  0E00               	movlw	0
  8868  0008A4  6E33               	movwf	I2C_Master_Write@d+1,c
  8869  0008A6  0E10               	movlw	16
  8870  0008A8  6E32               	movwf	I2C_Master_Write@d,c
  8871  0008AA  EC77  F01A         	call	_I2C_Master_Write	;wreg free
  8872                           
  8873                           ;main.c: 889: I2C_Master_Write(totalHeader[i]);
  8874  0008AE  0EBA               	movlw	low _totalHeader
  8875  0008B0  0101               	movlb	1	; () banked
  8876  0008B2  2534               	addwf	logPC@i_926& (0+255),w,b
  8877  0008B4  6EF6               	movwf	tblptrl,c
  8878  0008B6  0EFC               	movlw	high _totalHeader
  8879  0008B8  2135               	addwfc	(logPC@i_926+1)& (0+255),w,b
  8880  0008BA  6EF7               	movwf	tblptrh,c
  8881  0008BC                     	if	0	;There are less than 3 active tblptr bytes
  8882  0008BC                     	endif
  8883  0008BC  0008               	tblrd		*
  8884  0008BE  50F5               	movf	tablat,w,c
  8885  0008C0  6E32               	movwf	I2C_Master_Write@d,c
  8886  0008C2  6A33               	clrf	I2C_Master_Write@d+1,c
  8887  0008C4  EC77  F01A         	call	_I2C_Master_Write	;wreg free
  8888                           
  8889                           ;main.c: 890: I2C_Master_Stop();
  8890  0008C8  EC85  F01A         	call	_I2C_Master_Stop	;wreg free
  8891  0008CC  0101               	movlb	1	; () banked
  8892  0008CE  4B34               	infsnz	logPC@i_926& (0+255),f,b
  8893  0008D0  2B35               	incf	(logPC@i_926+1)& (0+255),f,b
  8894                           
  8895                           ; BSR set to: 1
  8896  0008D2  0101               	movlb	1	; () banked
  8897  0008D4  5135               	movf	(logPC@i_926+1)& (0+255),w,b
  8898  0008D6  E101               	bnz	u6370
  8899  0008D8  D7DD               	goto	L5
  8900  0008DA                     u6370:
  8901  0008DA                     l522:
  8902                           
  8903                           ; BSR set to: 1
  8904                           ;main.c: 891: }
  8905                           ;main.c: 892: char numberTotal[2] = "  ";
  8906  0008DA  C0FA  F11E         	movff	logPC@F3237,logPC@numberTotal
  8907  0008DE  C0FB  F11F         	movff	logPC@F3237+1,logPC@numberTotal+1
  8908                           
  8909                           ; BSR set to: 1
  8910                           ;main.c: 893: numberTotal[0] = getChar(getTens(numBats));
  8911  0008E2  C0EA  F084         	movff	_numBats,getTens@num
  8912  0008E6  0100               	movlb	0	; () banked
  8913  0008E8  6B85               	clrf	(getTens@num+1)& (0+255),b
  8914  0008EA  EC1F  F019         	call	_getTens	;wreg free
  8915  0008EE  C084  F08B         	movff	?_getTens,getChar@num
  8916  0008F2  C085  F08C         	movff	?_getTens+1,getChar@num+1
  8917  0008F6  EC81  F01A         	call	_getChar	;wreg free
  8918  0008FA  0101               	movlb	1	; () banked
  8919  0008FC  6F1E               	movwf	logPC@numberTotal& (0+255),b
  8920                           
  8921                           ;main.c: 894: numberTotal[1] = getChar(getOnes(numBats));
  8922  0008FE  C0EA  F089         	movff	_numBats,getOnes@num
  8923  000902  0100               	movlb	0	; () banked
  8924  000904  6B8A               	clrf	(getOnes@num+1)& (0+255),b
  8925  000906  ECD3  F019         	call	_getOnes	;wreg free
  8926  00090A  C089  F08B         	movff	?_getOnes,getChar@num
  8927  00090E  C08A  F08C         	movff	?_getOnes+1,getChar@num+1
  8928  000912  EC81  F01A         	call	_getChar	;wreg free
  8929  000916  0101               	movlb	1	; () banked
  8930  000918  6F1F               	movwf	(logPC@numberTotal+1)& (0+255),b
  8931                           
  8932                           ; BSR set to: 1
  8933                           ;main.c: 895: for(unsigned int i = 0; i < 2; i++) {
  8934  00091A  0E00               	movlw	0
  8935  00091C  0101               	movlb	1	; () banked
  8936  00091E  6F37               	movwf	(logPC@i_929+1)& (0+255),b
  8937  000920  0E00               	movlw	0
  8938  000922  6F36               	movwf	logPC@i_929& (0+255),b
  8939  000924                     l6657:
  8940                           
  8941                           ; BSR set to: 1
  8942  000924  0101               	movlb	1	; () banked
  8943  000926  5137               	movf	(logPC@i_929+1)& (0+255),w,b
  8944  000928  E124               	bnz	l6671
  8945  00092A  0E02               	movlw	2
  8946  00092C  0101               	movlb	1	; () banked
  8947  00092E  5D36               	subwf	logPC@i_929& (0+255),w,b
  8948  000930  B0D8               	btfsc	status,0,c
  8949  000932  D01F               	goto	l6671
  8950                           
  8951                           ; BSR set to: 1
  8952                           ;main.c: 896: I2C_Master_Start();
  8953                           
  8954                           ; BSR set to: 1
  8955                           
  8956                           ; BSR set to: 1
  8957  000934  EC89  F01A         	call	_I2C_Master_Start	;wreg free
  8958                           
  8959                           ;main.c: 897: I2C_Master_Write(0b00010000);
  8960  000938  0E00               	movlw	0
  8961  00093A  6E33               	movwf	I2C_Master_Write@d+1,c
  8962  00093C  0E10               	movlw	16
  8963  00093E  6E32               	movwf	I2C_Master_Write@d,c
  8964  000940  EC77  F01A         	call	_I2C_Master_Write	;wreg free
  8965                           
  8966                           ;main.c: 898: I2C_Master_Write(numberTotal[i]);
  8967  000944  0E1E               	movlw	low logPC@numberTotal
  8968  000946  0101               	movlb	1	; () banked
  8969  000948  2536               	addwf	logPC@i_929& (0+255),w,b
  8970  00094A  6ED9               	movwf	fsr2l,c
  8971  00094C  0E01               	movlw	high logPC@numberTotal
  8972  00094E  0101               	movlb	1	; () banked
  8973  000950  2137               	addwfc	(logPC@i_929+1)& (0+255),w,b
  8974  000952  6EDA               	movwf	fsr2h,c
  8975  000954  50DF               	movf	indf2,w,c
  8976  000956  0100               	movlb	0	; () banked
  8977  000958  6F8D               	movwf	??_logPC& (0+255),b
  8978  00095A  0100               	movlb	0	; () banked
  8979  00095C  518D               	movf	??_logPC& (0+255),w,b
  8980  00095E  6E32               	movwf	I2C_Master_Write@d,c
  8981  000960  6A33               	clrf	I2C_Master_Write@d+1,c
  8982  000962  EC77  F01A         	call	_I2C_Master_Write	;wreg free
  8983                           
  8984                           ;main.c: 899: I2C_Master_Stop();
  8985  000966  EC85  F01A         	call	_I2C_Master_Stop	;wreg free
  8986  00096A  0101               	movlb	1	; () banked
  8987  00096C  4B36               	infsnz	logPC@i_929& (0+255),f,b
  8988  00096E  2B37               	incf	(logPC@i_929+1)& (0+255),f,b
  8989  000970  D7D9               	goto	l6657
  8990  000972                     l6671:
  8991                           
  8992                           ; BSR set to: 1
  8993                           ;main.c: 900: }
  8994                           ;main.c: 902: I2C_Master_Start();
  8995  000972  EC89  F01A         	call	_I2C_Master_Start	;wreg free
  8996                           
  8997                           ;main.c: 903: I2C_Master_Write(0b00010000);
  8998  000976  0E00               	movlw	0
  8999  000978  6E33               	movwf	I2C_Master_Write@d+1,c
  9000  00097A  0E10               	movlw	16
  9001  00097C  6E32               	movwf	I2C_Master_Write@d,c
  9002  00097E  EC77  F01A         	call	_I2C_Master_Write	;wreg free
  9003                           
  9004                           ;main.c: 904: I2C_Master_Write('\n');
  9005  000982  0E00               	movlw	0
  9006  000984  6E33               	movwf	I2C_Master_Write@d+1,c
  9007  000986  0E0A               	movlw	10
  9008  000988  6E32               	movwf	I2C_Master_Write@d,c
  9009  00098A  EC77  F01A         	call	_I2C_Master_Write	;wreg free
  9010                           
  9011                           ;main.c: 905: I2C_Master_Stop();
  9012  00098E  EC85  F01A         	call	_I2C_Master_Stop	;wreg free
  9013                           
  9014                           ;main.c: 906: for(unsigned int i = 0; i < 32; i++) {
  9015  000992  0E00               	movlw	0
  9016  000994  0101               	movlb	1	; () banked
  9017  000996  6F39               	movwf	(logPC@i_930+1)& (0+255),b
  9018  000998  0E00               	movlw	0
  9019  00099A  6F38               	movwf	logPC@i_930& (0+255),b
  9020                           
  9021                           ; BSR set to: 1
  9022  00099C  0101               	movlb	1	; () banked
  9023  00099E  5139               	movf	(logPC@i_930+1)& (0+255),w,b
  9024  0009A0  E123               	bnz	l528
  9025  0009A2  0E20               	movlw	32
  9026  0009A4  0101               	movlb	1	; () banked
  9027  0009A6  5D38               	subwf	logPC@i_930& (0+255),w,b
  9028  0009A8  B0D8               	btfsc	status,0,c
  9029  0009AA  D01E               	goto	l528
  9030                           
  9031                           ; BSR set to: 1
  9032                           ;main.c: 907: I2C_Master_Start();
  9033                           
  9034                           ; BSR set to: 1
  9035                           
  9036                           ; BSR set to: 1
  9037  0009AC  EC89  F01A         	call	_I2C_Master_Start	;wreg free
  9038                           
  9039                           ;main.c: 908: I2C_Master_Write(0b00010000);
  9040  0009B0  0E00               	movlw	0
  9041  0009B2  6E33               	movwf	I2C_Master_Write@d+1,c
  9042  0009B4  0E10               	movlw	16
  9043  0009B6  6E32               	movwf	I2C_Master_Write@d,c
  9044  0009B8  EC77  F01A         	call	_I2C_Master_Write	;wreg free
  9045                           
  9046                           ;main.c: 909: I2C_Master_Write(runTimeHeader[i]);
  9047  0009BC  0EDD               	movlw	low _runTimeHeader
  9048  0009BE  0101               	movlb	1	; () banked
  9049  0009C0  2538               	addwf	logPC@i_930& (0+255),w,b
  9050  0009C2  6EF6               	movwf	tblptrl,c
  9051  0009C4  0EFC               	movlw	high _runTimeHeader
  9052  0009C6  2139               	addwfc	(logPC@i_930+1)& (0+255),w,b
  9053  0009C8  6EF7               	movwf	tblptrh,c
  9054  0009CA                     	if	0	;There are less than 3 active tblptr bytes
  9055  0009CA                     	endif
  9056  0009CA  0008               	tblrd		*
  9057  0009CC  50F5               	movf	tablat,w,c
  9058  0009CE  6E32               	movwf	I2C_Master_Write@d,c
  9059  0009D0  6A33               	clrf	I2C_Master_Write@d+1,c
  9060  0009D2  EC77  F01A         	call	_I2C_Master_Write	;wreg free
  9061                           
  9062                           ;main.c: 910: I2C_Master_Stop();
  9063  0009D6  EC85  F01A         	call	_I2C_Master_Stop	;wreg free
  9064  0009DA  0101               	movlb	1	; () banked
  9065  0009DC  4B38               	infsnz	logPC@i_930& (0+255),f,b
  9066  0009DE  2B39               	incf	(logPC@i_930+1)& (0+255),f,b
  9067                           
  9068                           ; BSR set to: 1
  9069  0009E0  0101               	movlb	1	; () banked
  9070  0009E2  5139               	movf	(logPC@i_930+1)& (0+255),w,b
  9071  0009E4  E101               	bnz	u6410
  9072  0009E6  D7DD               	goto	L6
  9073  0009E8                     u6410:
  9074  0009E8                     l528:
  9075                           
  9076                           ; BSR set to: 1
  9077                           ;main.c: 911: }
  9078                           ;main.c: 912: char runTime[3] = "   ";
  9079  0009E8  C0EF  F113         	movff	logPC@F3241,logPC@runTime
  9080  0009EC  C0F0  F114         	movff	logPC@F3241+1,logPC@runTime+1
  9081  0009F0  C0F1  F115         	movff	logPC@F3241+2,logPC@runTime+2
  9082                           
  9083                           ; BSR set to: 1
  9084                           ;main.c: 913: runTime[0] = getChar(getHundreds(min*60+sec));
  9085  0009F4  0100               	movlb	0	; () banked
  9086  0009F6  51E7               	movf	_min& (0+255),w,b
  9087  0009F8  0D3C               	mullw	60
  9088  0009FA  0100               	movlb	0	; () banked
  9089  0009FC  51ED               	movf	_sec& (0+255),w,b
  9090  0009FE  24F3               	addwf	prodl,w,c
  9091  000A00  0100               	movlb	0	; () banked
  9092  000A02  6F84               	movwf	getHundreds@num& (0+255),b
  9093  000A04  0100               	movlb	0	; () banked
  9094  000A06  0E00               	movlw	0
  9095  000A08  20F4               	addwfc	prodh,w,c
  9096  000A0A  0100               	movlb	0	; () banked
  9097  000A0C  6F85               	movwf	(getHundreds@num+1)& (0+255),b
  9098  000A0E  EC3D  F019         	call	_getHundreds	;wreg free
  9099  000A12  C084  F08B         	movff	?_getHundreds,getChar@num
  9100  000A16  C085  F08C         	movff	?_getHundreds+1,getChar@num+1
  9101  000A1A  EC81  F01A         	call	_getChar	;wreg free
  9102  000A1E  0101               	movlb	1	; () banked
  9103  000A20  6F13               	movwf	logPC@runTime& (0+255),b
  9104                           
  9105                           ;main.c: 914: runTime[1] = getChar(getTens(min*60+sec));
  9106  000A22  0100               	movlb	0	; () banked
  9107  000A24  51E7               	movf	_min& (0+255),w,b
  9108  000A26  0D3C               	mullw	60
  9109  000A28  0100               	movlb	0	; () banked
  9110  000A2A  51ED               	movf	_sec& (0+255),w,b
  9111  000A2C  24F3               	addwf	prodl,w,c
  9112  000A2E  0100               	movlb	0	; () banked
  9113  000A30  6F84               	movwf	getTens@num& (0+255),b
  9114  000A32  0100               	movlb	0	; () banked
  9115  000A34  0E00               	movlw	0
  9116  000A36  20F4               	addwfc	prodh,w,c
  9117  000A38  0100               	movlb	0	; () banked
  9118  000A3A  6F85               	movwf	(getTens@num+1)& (0+255),b
  9119  000A3C  EC1F  F019         	call	_getTens	;wreg free
  9120  000A40  C084  F08B         	movff	?_getTens,getChar@num
  9121  000A44  C085  F08C         	movff	?_getTens+1,getChar@num+1
  9122  000A48  EC81  F01A         	call	_getChar	;wreg free
  9123  000A4C  0101               	movlb	1	; () banked
  9124  000A4E  6F14               	movwf	(logPC@runTime+1)& (0+255),b
  9125                           
  9126                           ;main.c: 915: runTime[2] = getChar(getOnes(min*60+sec));
  9127  000A50  0100               	movlb	0	; () banked
  9128  000A52  51E7               	movf	_min& (0+255),w,b
  9129  000A54  0D3C               	mullw	60
  9130  000A56  0100               	movlb	0	; () banked
  9131  000A58  51ED               	movf	_sec& (0+255),w,b
  9132  000A5A  24F3               	addwf	prodl,w,c
  9133  000A5C  0100               	movlb	0	; () banked
  9134  000A5E  6F89               	movwf	getOnes@num& (0+255),b
  9135  000A60  0100               	movlb	0	; () banked
  9136  000A62  0E00               	movlw	0
  9137  000A64  20F4               	addwfc	prodh,w,c
  9138  000A66  0100               	movlb	0	; () banked
  9139  000A68  6F8A               	movwf	(getOnes@num+1)& (0+255),b
  9140  000A6A  ECD3  F019         	call	_getOnes	;wreg free
  9141  000A6E  C089  F08B         	movff	?_getOnes,getChar@num
  9142  000A72  C08A  F08C         	movff	?_getOnes+1,getChar@num+1
  9143  000A76  EC81  F01A         	call	_getChar	;wreg free
  9144  000A7A  0101               	movlb	1	; () banked
  9145  000A7C  6F15               	movwf	(logPC@runTime+2)& (0+255),b
  9146                           
  9147                           ; BSR set to: 1
  9148                           ;main.c: 916: for(unsigned int i = 0; i < 3; i++) {
  9149  000A7E  0E00               	movlw	0
  9150  000A80  0101               	movlb	1	; () banked
  9151  000A82  6F3B               	movwf	(logPC@i_933+1)& (0+255),b
  9152  000A84  0E00               	movlw	0
  9153  000A86  6F3A               	movwf	logPC@i_933& (0+255),b
  9154  000A88                     l6693:
  9155                           
  9156                           ; BSR set to: 1
  9157  000A88  0101               	movlb	1	; () banked
  9158  000A8A  513B               	movf	(logPC@i_933+1)& (0+255),w,b
  9159  000A8C  E124               	bnz	l6707
  9160  000A8E  0E03               	movlw	3
  9161  000A90  0101               	movlb	1	; () banked
  9162  000A92  5D3A               	subwf	logPC@i_933& (0+255),w,b
  9163  000A94  B0D8               	btfsc	status,0,c
  9164  000A96  D01F               	goto	l6707
  9165                           
  9166                           ; BSR set to: 1
  9167                           ;main.c: 917: I2C_Master_Start();
  9168                           
  9169                           ; BSR set to: 1
  9170                           
  9171                           ; BSR set to: 1
  9172  000A98  EC89  F01A         	call	_I2C_Master_Start	;wreg free
  9173                           
  9174                           ;main.c: 918: I2C_Master_Write(0b00010000);
  9175  000A9C  0E00               	movlw	0
  9176  000A9E  6E33               	movwf	I2C_Master_Write@d+1,c
  9177  000AA0  0E10               	movlw	16
  9178  000AA2  6E32               	movwf	I2C_Master_Write@d,c
  9179  000AA4  EC77  F01A         	call	_I2C_Master_Write	;wreg free
  9180                           
  9181                           ;main.c: 919: I2C_Master_Write(runTime[i]);
  9182  000AA8  0E13               	movlw	low logPC@runTime
  9183  000AAA  0101               	movlb	1	; () banked
  9184  000AAC  253A               	addwf	logPC@i_933& (0+255),w,b
  9185  000AAE  6ED9               	movwf	fsr2l,c
  9186  000AB0  0E01               	movlw	high logPC@runTime
  9187  000AB2  0101               	movlb	1	; () banked
  9188  000AB4  213B               	addwfc	(logPC@i_933+1)& (0+255),w,b
  9189  000AB6  6EDA               	movwf	fsr2h,c
  9190  000AB8  50DF               	movf	indf2,w,c
  9191  000ABA  0100               	movlb	0	; () banked
  9192  000ABC  6F8D               	movwf	??_logPC& (0+255),b
  9193  000ABE  0100               	movlb	0	; () banked
  9194  000AC0  518D               	movf	??_logPC& (0+255),w,b
  9195  000AC2  6E32               	movwf	I2C_Master_Write@d,c
  9196  000AC4  6A33               	clrf	I2C_Master_Write@d+1,c
  9197  000AC6  EC77  F01A         	call	_I2C_Master_Write	;wreg free
  9198                           
  9199                           ;main.c: 920: I2C_Master_Stop();
  9200  000ACA  EC85  F01A         	call	_I2C_Master_Stop	;wreg free
  9201  000ACE  0101               	movlb	1	; () banked
  9202  000AD0  4B3A               	infsnz	logPC@i_933& (0+255),f,b
  9203  000AD2  2B3B               	incf	(logPC@i_933+1)& (0+255),f,b
  9204  000AD4  D7D9               	goto	l6693
  9205  000AD6                     l6707:
  9206                           
  9207                           ; BSR set to: 1
  9208                           ;main.c: 921: }
  9209                           ;main.c: 922: I2C_Master_Start();
  9210  000AD6  EC89  F01A         	call	_I2C_Master_Start	;wreg free
  9211                           
  9212                           ;main.c: 923: I2C_Master_Write(0b00010000);
  9213  000ADA  0E00               	movlw	0
  9214  000ADC  6E33               	movwf	I2C_Master_Write@d+1,c
  9215  000ADE  0E10               	movlw	16
  9216  000AE0  6E32               	movwf	I2C_Master_Write@d,c
  9217  000AE2  EC77  F01A         	call	_I2C_Master_Write	;wreg free
  9218                           
  9219                           ;main.c: 924: I2C_Master_Write('\n');
  9220  000AE6  0E00               	movlw	0
  9221  000AE8  6E33               	movwf	I2C_Master_Write@d+1,c
  9222  000AEA  0E0A               	movlw	10
  9223  000AEC  6E32               	movwf	I2C_Master_Write@d,c
  9224  000AEE  EC77  F01A         	call	_I2C_Master_Write	;wreg free
  9225                           
  9226                           ;main.c: 925: I2C_Master_Stop();
  9227  000AF2  EC85  F01A         	call	_I2C_Master_Stop	;wreg free
  9228                           
  9229                           ;main.c: 926: I2C_Master_Start();
  9230  000AF6  EC89  F01A         	call	_I2C_Master_Start	;wreg free
  9231                           
  9232                           ;main.c: 927: I2C_Master_Write(0b00010000);
  9233  000AFA  0E00               	movlw	0
  9234  000AFC  6E33               	movwf	I2C_Master_Write@d+1,c
  9235  000AFE  0E10               	movlw	16
  9236  000B00  6E32               	movwf	I2C_Master_Write@d,c
  9237  000B02  EC77  F01A         	call	_I2C_Master_Write	;wreg free
  9238                           
  9239                           ;main.c: 928: I2C_Master_Write('\n');
  9240  000B06  0E00               	movlw	0
  9241  000B08  6E33               	movwf	I2C_Master_Write@d+1,c
  9242  000B0A  0E0A               	movlw	10
  9243  000B0C  6E32               	movwf	I2C_Master_Write@d,c
  9244  000B0E  EC77  F01A         	call	_I2C_Master_Write	;wreg free
  9245                           
  9246                           ;main.c: 929: I2C_Master_Stop();
  9247  000B12  EC85  F01A         	call	_I2C_Master_Stop	;wreg free
  9248  000B16  0012               	return		;funcret
  9249  000B18                     __end_of_logPC:
  9250                           	opt stack 0
  9251                           tblptru	equ	0xFF8
  9252                           tblptrh	equ	0xFF7
  9253                           tblptrl	equ	0xFF6
  9254                           tablat	equ	0xFF5
  9255                           prodh	equ	0xFF4
  9256                           prodl	equ	0xFF3
  9257                           intcon	equ	0xFF2
  9258                           intcon2	equ	0xFF1
  9259                           intcon3	equ	0xFF0
  9260                           postinc0	equ	0xFEE
  9261                           wreg	equ	0xFE8
  9262                           postdec1	equ	0xFE5
  9263                           plusw1	equ	0xFE3
  9264                           fsr1l	equ	0xFE1
  9265                           indf2	equ	0xFDF
  9266                           postinc2	equ	0xFDE
  9267                           postdec2	equ	0xFDD
  9268                           plusw2	equ	0xFDB
  9269                           fsr2h	equ	0xFDA
  9270                           fsr2l	equ	0xFD9
  9271                           status	equ	0xFD8
  9272                           
  9273 ;; *************** function _getTens *****************
  9274 ;; Defined at:
  9275 ;;		line 937 in file "../main.c"
  9276 ;; Parameters:    Size  Location     Type
  9277 ;;  num             2    4[BANK0 ] unsigned int 
  9278 ;; Auto vars:     Size  Location     Type
  9279 ;;		None
  9280 ;; Return value:  Size  Location     Type
  9281 ;;                  2    4[BANK0 ] int 
  9282 ;; Registers used:
  9283 ;;		wreg, status,2, status,0, cstack
  9284 ;; Tracked objects:
  9285 ;;		On entry : 0/0
  9286 ;;		On exit  : 0/0
  9287 ;;		Unchanged: 0/0
  9288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9289 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9290 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9291 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9292 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9293 ;;Total ram usage:        2 bytes
  9294 ;; Hardware stack levels used:    1
  9295 ;; Hardware stack levels required when called:    6
  9296 ;; This function calls:
  9297 ;;		___lwdiv
  9298 ;; This function is called by:
  9299 ;;		_logPC
  9300 ;; This function uses a non-reentrant model
  9301 ;;
  9302                           
  9303                           	psect	text16
  9304  00323E                     __ptext16:
  9305                           	opt stack 0
  9306  00323E                     _getTens:
  9307                           	opt stack 23
  9308                           
  9309                           ;main.c: 938: if(num > 9) { return (int)(num / 10); }
  9310                           
  9311                           ;incstack = 0
  9312  00323E  0100               	movlb	0	; () banked
  9313  003240  5185               	movf	(getTens@num+1)& (0+255),w,b
  9314  003242  E105               	bnz	u5720
  9315  003244  0E0A               	movlw	10
  9316  003246  0100               	movlb	0	; () banked
  9317  003248  5D84               	subwf	getTens@num& (0+255),w,b
  9318  00324A  A0D8               	btfss	status,0,c
  9319  00324C  D010               	goto	l5945
  9320  00324E                     u5720:
  9321                           
  9322                           ; BSR set to: 0
  9323  00324E  C084  F080         	movff	getTens@num,___lwdiv@dividend
  9324  003252  C085  F081         	movff	getTens@num+1,___lwdiv@dividend+1
  9325  003256  0E00               	movlw	0
  9326  003258  0100               	movlb	0	; () banked
  9327  00325A  6F83               	movwf	(___lwdiv@divisor+1)& (0+255),b
  9328  00325C  0E0A               	movlw	10
  9329  00325E  6F82               	movwf	___lwdiv@divisor& (0+255),b
  9330  003260  EC98  F017         	call	___lwdiv	;wreg free
  9331  003264  C080  F084         	movff	?___lwdiv,?_getTens
  9332  003268  C081  F085         	movff	?___lwdiv+1,?_getTens+1
  9333  00326C  0012               	return	
  9334  00326E                     l5945:
  9335                           
  9336                           ;main.c: 939: return 0;
  9337  00326E  0E00               	movlw	0
  9338  003270  0100               	movlb	0	; () banked
  9339  003272  6F85               	movwf	(?_getTens+1)& (0+255),b
  9340  003274  0E00               	movlw	0
  9341  003276  6F84               	movwf	?_getTens& (0+255),b
  9342  003278  0012               	return	
  9343  00327A                     __end_of_getTens:
  9344                           	opt stack 0
  9345                           tblptru	equ	0xFF8
  9346                           tblptrh	equ	0xFF7
  9347                           tblptrl	equ	0xFF6
  9348                           tablat	equ	0xFF5
  9349                           prodh	equ	0xFF4
  9350                           prodl	equ	0xFF3
  9351                           intcon	equ	0xFF2
  9352                           intcon2	equ	0xFF1
  9353                           intcon3	equ	0xFF0
  9354                           postinc0	equ	0xFEE
  9355                           wreg	equ	0xFE8
  9356                           postdec1	equ	0xFE5
  9357                           plusw1	equ	0xFE3
  9358                           fsr1l	equ	0xFE1
  9359                           indf2	equ	0xFDF
  9360                           postinc2	equ	0xFDE
  9361                           postdec2	equ	0xFDD
  9362                           plusw2	equ	0xFDB
  9363                           fsr2h	equ	0xFDA
  9364                           fsr2l	equ	0xFD9
  9365                           status	equ	0xFD8
  9366                           
  9367 ;; *************** function _getOnes *****************
  9368 ;; Defined at:
  9369 ;;		line 942 in file "../main.c"
  9370 ;; Parameters:    Size  Location     Type
  9371 ;;  num             2    9[BANK0 ] unsigned int 
  9372 ;; Auto vars:     Size  Location     Type
  9373 ;;		None
  9374 ;; Return value:  Size  Location     Type
  9375 ;;                  2    9[BANK0 ] int 
  9376 ;; Registers used:
  9377 ;;		wreg, status,2, status,0, cstack
  9378 ;; Tracked objects:
  9379 ;;		On entry : 0/0
  9380 ;;		On exit  : 0/0
  9381 ;;		Unchanged: 0/0
  9382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9383 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9384 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9385 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9386 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9387 ;;Total ram usage:        2 bytes
  9388 ;; Hardware stack levels used:    1
  9389 ;; Hardware stack levels required when called:    6
  9390 ;; This function calls:
  9391 ;;		___lwmod
  9392 ;; This function is called by:
  9393 ;;		_logPC
  9394 ;; This function uses a non-reentrant model
  9395 ;;
  9396                           
  9397                           	psect	text17
  9398  0033A6                     __ptext17:
  9399                           	opt stack 0
  9400  0033A6                     _getOnes:
  9401                           	opt stack 23
  9402                           
  9403                           ;main.c: 943: return num % 10;
  9404                           
  9405                           ;incstack = 0
  9406  0033A6  C089  F084         	movff	getOnes@num,___lwmod@dividend
  9407  0033AA  C08A  F085         	movff	getOnes@num+1,___lwmod@dividend+1
  9408  0033AE  0E00               	movlw	0
  9409  0033B0  0100               	movlb	0	; () banked
  9410  0033B2  6F87               	movwf	(___lwmod@divisor+1)& (0+255),b
  9411  0033B4  0E0A               	movlw	10
  9412  0033B6  6F86               	movwf	___lwmod@divisor& (0+255),b
  9413  0033B8  EC01  F018         	call	___lwmod	;wreg free
  9414  0033BC  C084  F089         	movff	?___lwmod,?_getOnes
  9415  0033C0  C085  F08A         	movff	?___lwmod+1,?_getOnes+1
  9416  0033C4  0012               	return	
  9417  0033C6                     __end_of_getOnes:
  9418                           	opt stack 0
  9419                           tblptru	equ	0xFF8
  9420                           tblptrh	equ	0xFF7
  9421                           tblptrl	equ	0xFF6
  9422                           tablat	equ	0xFF5
  9423                           prodh	equ	0xFF4
  9424                           prodl	equ	0xFF3
  9425                           intcon	equ	0xFF2
  9426                           intcon2	equ	0xFF1
  9427                           intcon3	equ	0xFF0
  9428                           postinc0	equ	0xFEE
  9429                           wreg	equ	0xFE8
  9430                           postdec1	equ	0xFE5
  9431                           plusw1	equ	0xFE3
  9432                           fsr1l	equ	0xFE1
  9433                           indf2	equ	0xFDF
  9434                           postinc2	equ	0xFDE
  9435                           postdec2	equ	0xFDD
  9436                           plusw2	equ	0xFDB
  9437                           fsr2h	equ	0xFDA
  9438                           fsr2l	equ	0xFD9
  9439                           status	equ	0xFD8
  9440                           
  9441 ;; *************** function ___lwmod *****************
  9442 ;; Defined at:
  9443 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  9444 ;; Parameters:    Size  Location     Type
  9445 ;;  dividend        2    4[BANK0 ] unsigned int 
  9446 ;;  divisor         2    6[BANK0 ] unsigned int 
  9447 ;; Auto vars:     Size  Location     Type
  9448 ;;  counter         1    8[BANK0 ] unsigned char 
  9449 ;; Return value:  Size  Location     Type
  9450 ;;                  2    4[BANK0 ] unsigned int 
  9451 ;; Registers used:
  9452 ;;		wreg, status,2, status,0
  9453 ;; Tracked objects:
  9454 ;;		On entry : 0/0
  9455 ;;		On exit  : 0/0
  9456 ;;		Unchanged: 0/0
  9457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9458 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9459 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9460 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9461 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9462 ;;Total ram usage:        5 bytes
  9463 ;; Hardware stack levels used:    1
  9464 ;; Hardware stack levels required when called:    5
  9465 ;; This function calls:
  9466 ;;		Nothing
  9467 ;; This function is called by:
  9468 ;;		_getOnes
  9469 ;;		_printf
  9470 ;; This function uses a non-reentrant model
  9471 ;;
  9472                           
  9473                           	psect	text18
  9474  003002                     __ptext18:
  9475                           	opt stack 0
  9476  003002                     ___lwmod:
  9477                           	opt stack 23
  9478                           
  9479                           ;incstack = 0
  9480  003002  0100               	movlb	0	; () banked
  9481  003004  5186               	movf	___lwmod@divisor& (0+255),w,b
  9482  003006  0100               	movlb	0	; () banked
  9483  003008  1187               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  9484  00300A  B4D8               	btfsc	status,2,c
  9485  00300C  D026               	goto	l1076
  9486                           
  9487                           ; BSR set to: 0
  9488  00300E  0E01               	movlw	1
  9489  003010  0100               	movlb	0	; () banked
  9490  003012  6F88               	movwf	___lwmod@counter& (0+255),b
  9491  003014  D006               	goto	l5755
  9492  003016                     l5753:
  9493                           
  9494                           ; BSR set to: 0
  9495  003016  0100               	movlb	0	; () banked
  9496  003018  90D8               	bcf	status,0,c
  9497  00301A  3786               	rlcf	___lwmod@divisor& (0+255),f,b
  9498  00301C  3787               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  9499  00301E  0100               	movlb	0	; () banked
  9500  003020  2B88               	incf	___lwmod@counter& (0+255),f,b
  9501  003022                     l5755:
  9502                           
  9503                           ; BSR set to: 0
  9504  003022  0100               	movlb	0	; () banked
  9505  003024  AF87               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  9506  003026  D7F7               	goto	l5753
  9507  003028                     l5757:
  9508                           
  9509                           ; BSR set to: 0
  9510  003028  0100               	movlb	0	; () banked
  9511  00302A  5186               	movf	___lwmod@divisor& (0+255),w,b
  9512  00302C  0100               	movlb	0	; () banked
  9513  00302E  5D84               	subwf	___lwmod@dividend& (0+255),w,b
  9514  003030  0100               	movlb	0	; () banked
  9515  003032  5187               	movf	(___lwmod@divisor+1)& (0+255),w,b
  9516  003034  0100               	movlb	0	; () banked
  9517  003036  5985               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  9518  003038  A0D8               	btfss	status,0,c
  9519  00303A  D008               	goto	l5761
  9520                           
  9521                           ; BSR set to: 0
  9522  00303C  0100               	movlb	0	; () banked
  9523  00303E  5186               	movf	___lwmod@divisor& (0+255),w,b
  9524  003040  0100               	movlb	0	; () banked
  9525  003042  5F84               	subwf	___lwmod@dividend& (0+255),f,b
  9526  003044  0100               	movlb	0	; () banked
  9527  003046  5187               	movf	(___lwmod@divisor+1)& (0+255),w,b
  9528  003048  0100               	movlb	0	; () banked
  9529  00304A  5B85               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  9530  00304C                     l5761:
  9531                           
  9532                           ; BSR set to: 0
  9533  00304C  0100               	movlb	0	; () banked
  9534  00304E  90D8               	bcf	status,0,c
  9535  003050  3387               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  9536  003052  3386               	rrcf	___lwmod@divisor& (0+255),f,b
  9537                           
  9538                           ; BSR set to: 0
  9539  003054  0100               	movlb	0	; () banked
  9540  003056  2F88               	decfsz	___lwmod@counter& (0+255),f,b
  9541  003058  D7E7               	goto	l5757
  9542  00305A                     l1076:
  9543                           
  9544                           ; BSR set to: 0
  9545  00305A  C084  F084         	movff	___lwmod@dividend,?___lwmod
  9546  00305E  C085  F085         	movff	___lwmod@dividend+1,?___lwmod+1
  9547                           
  9548                           ; BSR set to: 0
  9549  003062  0012               	return		;funcret
  9550  003064                     __end_of___lwmod:
  9551                           	opt stack 0
  9552                           tblptru	equ	0xFF8
  9553                           tblptrh	equ	0xFF7
  9554                           tblptrl	equ	0xFF6
  9555                           tablat	equ	0xFF5
  9556                           prodh	equ	0xFF4
  9557                           prodl	equ	0xFF3
  9558                           intcon	equ	0xFF2
  9559                           intcon2	equ	0xFF1
  9560                           intcon3	equ	0xFF0
  9561                           postinc0	equ	0xFEE
  9562                           wreg	equ	0xFE8
  9563                           postdec1	equ	0xFE5
  9564                           plusw1	equ	0xFE3
  9565                           fsr1l	equ	0xFE1
  9566                           indf2	equ	0xFDF
  9567                           postinc2	equ	0xFDE
  9568                           postdec2	equ	0xFDD
  9569                           plusw2	equ	0xFDB
  9570                           fsr2h	equ	0xFDA
  9571                           fsr2l	equ	0xFD9
  9572                           status	equ	0xFD8
  9573                           
  9574 ;; *************** function _getHundreds *****************
  9575 ;; Defined at:
  9576 ;;		line 932 in file "../main.c"
  9577 ;; Parameters:    Size  Location     Type
  9578 ;;  num             2    4[BANK0 ] unsigned int 
  9579 ;; Auto vars:     Size  Location     Type
  9580 ;;		None
  9581 ;; Return value:  Size  Location     Type
  9582 ;;                  2    4[BANK0 ] int 
  9583 ;; Registers used:
  9584 ;;		wreg, status,2, status,0, cstack
  9585 ;; Tracked objects:
  9586 ;;		On entry : 0/0
  9587 ;;		On exit  : 0/0
  9588 ;;		Unchanged: 0/0
  9589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9590 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9591 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9592 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9593 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9594 ;;Total ram usage:        2 bytes
  9595 ;; Hardware stack levels used:    1
  9596 ;; Hardware stack levels required when called:    6
  9597 ;; This function calls:
  9598 ;;		___lwdiv
  9599 ;; This function is called by:
  9600 ;;		_logPC
  9601 ;; This function uses a non-reentrant model
  9602 ;;
  9603                           
  9604                           	psect	text19
  9605  00327A                     __ptext19:
  9606                           	opt stack 0
  9607  00327A                     _getHundreds:
  9608                           	opt stack 23
  9609                           
  9610                           ;main.c: 933: if(num > 99) { return (int)(num / 100); }
  9611                           
  9612                           ; BSR set to: 0
  9613                           ;incstack = 0
  9614  00327A  0100               	movlb	0	; () banked
  9615  00327C  5185               	movf	(getHundreds@num+1)& (0+255),w,b
  9616  00327E  E105               	bnz	u5730
  9617  003280  0E64               	movlw	100
  9618  003282  0100               	movlb	0	; () banked
  9619  003284  5D84               	subwf	getHundreds@num& (0+255),w,b
  9620  003286  A0D8               	btfss	status,0,c
  9621  003288  D010               	goto	l5963
  9622  00328A                     u5730:
  9623                           
  9624                           ; BSR set to: 0
  9625  00328A  C084  F080         	movff	getHundreds@num,___lwdiv@dividend
  9626  00328E  C085  F081         	movff	getHundreds@num+1,___lwdiv@dividend+1
  9627  003292  0E00               	movlw	0
  9628  003294  0100               	movlb	0	; () banked
  9629  003296  6F83               	movwf	(___lwdiv@divisor+1)& (0+255),b
  9630  003298  0E64               	movlw	100
  9631  00329A  6F82               	movwf	___lwdiv@divisor& (0+255),b
  9632  00329C  EC98  F017         	call	___lwdiv	;wreg free
  9633  0032A0  C080  F084         	movff	?___lwdiv,?_getHundreds
  9634  0032A4  C081  F085         	movff	?___lwdiv+1,?_getHundreds+1
  9635  0032A8  0012               	return	
  9636  0032AA                     l5963:
  9637                           
  9638                           ;main.c: 934: return 0;
  9639  0032AA  0E00               	movlw	0
  9640  0032AC  0100               	movlb	0	; () banked
  9641  0032AE  6F85               	movwf	(?_getHundreds+1)& (0+255),b
  9642  0032B0  0E00               	movlw	0
  9643  0032B2  6F84               	movwf	?_getHundreds& (0+255),b
  9644  0032B4  0012               	return	
  9645  0032B6                     __end_of_getHundreds:
  9646                           	opt stack 0
  9647                           tblptru	equ	0xFF8
  9648                           tblptrh	equ	0xFF7
  9649                           tblptrl	equ	0xFF6
  9650                           tablat	equ	0xFF5
  9651                           prodh	equ	0xFF4
  9652                           prodl	equ	0xFF3
  9653                           intcon	equ	0xFF2
  9654                           intcon2	equ	0xFF1
  9655                           intcon3	equ	0xFF0
  9656                           postinc0	equ	0xFEE
  9657                           wreg	equ	0xFE8
  9658                           postdec1	equ	0xFE5
  9659                           plusw1	equ	0xFE3
  9660                           fsr1l	equ	0xFE1
  9661                           indf2	equ	0xFDF
  9662                           postinc2	equ	0xFDE
  9663                           postdec2	equ	0xFDD
  9664                           plusw2	equ	0xFDB
  9665                           fsr2h	equ	0xFDA
  9666                           fsr2l	equ	0xFD9
  9667                           status	equ	0xFD8
  9668                           
  9669 ;; *************** function ___lwdiv *****************
  9670 ;; Defined at:
  9671 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  9672 ;; Parameters:    Size  Location     Type
  9673 ;;  dividend        2    0[BANK0 ] unsigned int 
  9674 ;;  divisor         2    2[BANK0 ] unsigned int 
  9675 ;; Auto vars:     Size  Location     Type
  9676 ;;  quotient        2   49[COMRAM] unsigned int 
  9677 ;;  counter         1   48[COMRAM] unsigned char 
  9678 ;; Return value:  Size  Location     Type
  9679 ;;                  2    0[BANK0 ] unsigned int 
  9680 ;; Registers used:
  9681 ;;		wreg, status,2, status,0
  9682 ;; Tracked objects:
  9683 ;;		On entry : 0/0
  9684 ;;		On exit  : 0/0
  9685 ;;		Unchanged: 0/0
  9686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9687 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9688 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9689 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9690 ;;      Totals:         3       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9691 ;;Total ram usage:        7 bytes
  9692 ;; Hardware stack levels used:    1
  9693 ;; Hardware stack levels required when called:    5
  9694 ;; This function calls:
  9695 ;;		Nothing
  9696 ;; This function is called by:
  9697 ;;		_getHundreds
  9698 ;;		_getTens
  9699 ;;		_printf
  9700 ;; This function uses a non-reentrant model
  9701 ;;
  9702                           
  9703                           	psect	text20
  9704  002F30                     __ptext20:
  9705                           	opt stack 0
  9706  002F30                     ___lwdiv:
  9707                           	opt stack 23
  9708                           
  9709                           ;incstack = 0
  9710  002F30  0E00               	movlw	0
  9711  002F32  6E33               	movwf	___lwdiv@quotient+1,c
  9712  002F34  0E00               	movlw	0
  9713  002F36  6E32               	movwf	___lwdiv@quotient,c
  9714  002F38  0100               	movlb	0	; () banked
  9715  002F3A  5182               	movf	___lwdiv@divisor& (0+255),w,b
  9716  002F3C  0100               	movlb	0	; () banked
  9717  002F3E  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  9718  002F40  B4D8               	btfsc	status,2,c
  9719  002F42  D027               	goto	l1066
  9720                           
  9721                           ; BSR set to: 0
  9722  002F44  0E01               	movlw	1
  9723  002F46  6E31               	movwf	___lwdiv@counter,c
  9724  002F48  D005               	goto	l5735
  9725  002F4A                     l5733:
  9726                           
  9727                           ; BSR set to: 0
  9728  002F4A  0100               	movlb	0	; () banked
  9729  002F4C  90D8               	bcf	status,0,c
  9730  002F4E  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
  9731  002F50  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  9732  002F52  2A31               	incf	___lwdiv@counter,f,c
  9733  002F54                     l5735:
  9734                           
  9735                           ; BSR set to: 0
  9736  002F54  0100               	movlb	0	; () banked
  9737  002F56  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  9738  002F58  D7F8               	goto	l5733
  9739  002F5A                     l5737:
  9740                           
  9741                           ; BSR set to: 0
  9742  002F5A  90D8               	bcf	status,0,c
  9743  002F5C  3632               	rlcf	___lwdiv@quotient,f,c
  9744  002F5E  3633               	rlcf	___lwdiv@quotient+1,f,c
  9745                           
  9746                           ; BSR set to: 0
  9747  002F60  0100               	movlb	0	; () banked
  9748  002F62  5182               	movf	___lwdiv@divisor& (0+255),w,b
  9749  002F64  0100               	movlb	0	; () banked
  9750  002F66  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
  9751  002F68  0100               	movlb	0	; () banked
  9752  002F6A  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  9753  002F6C  0100               	movlb	0	; () banked
  9754  002F6E  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  9755  002F70  A0D8               	btfss	status,0,c
  9756  002F72  D009               	goto	l5745
  9757                           
  9758                           ; BSR set to: 0
  9759  002F74  0100               	movlb	0	; () banked
  9760  002F76  5182               	movf	___lwdiv@divisor& (0+255),w,b
  9761  002F78  0100               	movlb	0	; () banked
  9762  002F7A  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
  9763  002F7C  0100               	movlb	0	; () banked
  9764  002F7E  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  9765  002F80  0100               	movlb	0	; () banked
  9766  002F82  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  9767                           
  9768                           ; BSR set to: 0
  9769  002F84  8032               	bsf	___lwdiv@quotient,0,c
  9770  002F86                     l5745:
  9771                           
  9772                           ; BSR set to: 0
  9773  002F86  0100               	movlb	0	; () banked
  9774  002F88  90D8               	bcf	status,0,c
  9775  002F8A  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  9776  002F8C  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
  9777                           
  9778                           ; BSR set to: 0
  9779  002F8E  2E31               	decfsz	___lwdiv@counter,f,c
  9780  002F90  D7E4               	goto	l5737
  9781  002F92                     l1066:
  9782                           
  9783                           ; BSR set to: 0
  9784  002F92  C032  F080         	movff	___lwdiv@quotient,?___lwdiv
  9785  002F96  C033  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
  9786                           
  9787                           ; BSR set to: 0
  9788  002F9A  0012               	return		;funcret
  9789  002F9C                     __end_of___lwdiv:
  9790                           	opt stack 0
  9791                           tblptru	equ	0xFF8
  9792                           tblptrh	equ	0xFF7
  9793                           tblptrl	equ	0xFF6
  9794                           tablat	equ	0xFF5
  9795                           prodh	equ	0xFF4
  9796                           prodl	equ	0xFF3
  9797                           intcon	equ	0xFF2
  9798                           intcon2	equ	0xFF1
  9799                           intcon3	equ	0xFF0
  9800                           postinc0	equ	0xFEE
  9801                           wreg	equ	0xFE8
  9802                           postdec1	equ	0xFE5
  9803                           plusw1	equ	0xFE3
  9804                           fsr1l	equ	0xFE1
  9805                           indf2	equ	0xFDF
  9806                           postinc2	equ	0xFDE
  9807                           postdec2	equ	0xFDD
  9808                           plusw2	equ	0xFDB
  9809                           fsr2h	equ	0xFDA
  9810                           fsr2l	equ	0xFD9
  9811                           status	equ	0xFD8
  9812                           
  9813 ;; *************** function _getChar *****************
  9814 ;; Defined at:
  9815 ;;		line 946 in file "../main.c"
  9816 ;; Parameters:    Size  Location     Type
  9817 ;;  num             2   11[BANK0 ] unsigned int 
  9818 ;; Auto vars:     Size  Location     Type
  9819 ;;		None
  9820 ;; Return value:  Size  Location     Type
  9821 ;;                  1    wreg      unsigned char 
  9822 ;; Registers used:
  9823 ;;		wreg, status,2, status,0
  9824 ;; Tracked objects:
  9825 ;;		On entry : 0/0
  9826 ;;		On exit  : 0/0
  9827 ;;		Unchanged: 0/0
  9828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9829 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9830 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9831 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9832 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9833 ;;Total ram usage:        2 bytes
  9834 ;; Hardware stack levels used:    1
  9835 ;; Hardware stack levels required when called:    5
  9836 ;; This function calls:
  9837 ;;		Nothing
  9838 ;; This function is called by:
  9839 ;;		_logPC
  9840 ;; This function uses a non-reentrant model
  9841 ;;
  9842                           
  9843                           	psect	text21
  9844  003502                     __ptext21:
  9845                           	opt stack 0
  9846  003502                     _getChar:
  9847                           	opt stack 24
  9848                           
  9849                           ;main.c: 947: return num + '0';
  9850                           
  9851                           ; BSR set to: 0
  9852                           ;incstack = 0
  9853  003502  0100               	movlb	0	; () banked
  9854  003504  518B               	movf	getChar@num& (0+255),w,b
  9855  003506  0F30               	addlw	48
  9856  003508  0012               	return	
  9857  00350A                     __end_of_getChar:
  9858                           	opt stack 0
  9859                           tblptru	equ	0xFF8
  9860                           tblptrh	equ	0xFF7
  9861                           tblptrl	equ	0xFF6
  9862                           tablat	equ	0xFF5
  9863                           prodh	equ	0xFF4
  9864                           prodl	equ	0xFF3
  9865                           intcon	equ	0xFF2
  9866                           intcon2	equ	0xFF1
  9867                           intcon3	equ	0xFF0
  9868                           postinc0	equ	0xFEE
  9869                           wreg	equ	0xFE8
  9870                           postdec1	equ	0xFE5
  9871                           plusw1	equ	0xFE3
  9872                           fsr1l	equ	0xFE1
  9873                           indf2	equ	0xFDF
  9874                           postinc2	equ	0xFDE
  9875                           postdec2	equ	0xFDD
  9876                           plusw2	equ	0xFDB
  9877                           fsr2h	equ	0xFDA
  9878                           fsr2l	equ	0xFD9
  9879                           status	equ	0xFD8
  9880                           
  9881 ;; *************** function _I2C_Master_Write *****************
  9882 ;; Defined at:
  9883 ;;		line 39 in file "../I2C.c"
  9884 ;; Parameters:    Size  Location     Type
  9885 ;;  d               2   49[COMRAM] unsigned int 
  9886 ;; Auto vars:     Size  Location     Type
  9887 ;;		None
  9888 ;; Return value:  Size  Location     Type
  9889 ;;                  1    wreg      void 
  9890 ;; Registers used:
  9891 ;;		wreg, status,2, status,0, cstack
  9892 ;; Tracked objects:
  9893 ;;		On entry : 0/0
  9894 ;;		On exit  : 0/0
  9895 ;;		Unchanged: 0/0
  9896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9897 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9898 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9899 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9900 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9901 ;;Total ram usage:        2 bytes
  9902 ;; Hardware stack levels used:    1
  9903 ;; Hardware stack levels required when called:    6
  9904 ;; This function calls:
  9905 ;;		_I2C_Master_Wait
  9906 ;; This function is called by:
  9907 ;;		_main
  9908 ;;		_logPC
  9909 ;; This function uses a non-reentrant model
  9910 ;;
  9911                           
  9912                           	psect	text22
  9913  0034EE                     __ptext22:
  9914                           	opt stack 0
  9915  0034EE                     _I2C_Master_Write:
  9916                           	opt stack 23
  9917                           
  9918                           ;I2C.c: 41: I2C_Master_Wait();
  9919                           
  9920                           ; BSR set to: 0
  9921                           ;incstack = 0
  9922  0034EE  EC38  F01A         	call	_I2C_Master_Wait	;wreg free
  9923                           
  9924                           ;I2C.c: 42: SSPBUF = d;
  9925  0034F2  C032  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  9926  0034F6  0012               	return		;funcret
  9927  0034F8                     __end_of_I2C_Master_Write:
  9928                           	opt stack 0
  9929                           tblptru	equ	0xFF8
  9930                           tblptrh	equ	0xFF7
  9931                           tblptrl	equ	0xFF6
  9932                           tablat	equ	0xFF5
  9933                           prodh	equ	0xFF4
  9934                           prodl	equ	0xFF3
  9935                           intcon	equ	0xFF2
  9936                           intcon2	equ	0xFF1
  9937                           intcon3	equ	0xFF0
  9938                           postinc0	equ	0xFEE
  9939                           wreg	equ	0xFE8
  9940                           postdec1	equ	0xFE5
  9941                           plusw1	equ	0xFE3
  9942                           fsr1l	equ	0xFE1
  9943                           indf2	equ	0xFDF
  9944                           postinc2	equ	0xFDE
  9945                           postdec2	equ	0xFDD
  9946                           plusw2	equ	0xFDB
  9947                           fsr2h	equ	0xFDA
  9948                           fsr2l	equ	0xFD9
  9949                           status	equ	0xFD8
  9950                           
  9951 ;; *************** function _I2C_Master_Stop *****************
  9952 ;; Defined at:
  9953 ;;		line 33 in file "../I2C.c"
  9954 ;; Parameters:    Size  Location     Type
  9955 ;;		None
  9956 ;; Auto vars:     Size  Location     Type
  9957 ;;		None
  9958 ;; Return value:  Size  Location     Type
  9959 ;;                  1    wreg      void 
  9960 ;; Registers used:
  9961 ;;		wreg, status,2, status,0, cstack
  9962 ;; Tracked objects:
  9963 ;;		On entry : 0/0
  9964 ;;		On exit  : 0/0
  9965 ;;		Unchanged: 0/0
  9966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9967 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9968 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9969 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9970 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9971 ;;Total ram usage:        0 bytes
  9972 ;; Hardware stack levels used:    1
  9973 ;; Hardware stack levels required when called:    6
  9974 ;; This function calls:
  9975 ;;		_I2C_Master_Wait
  9976 ;; This function is called by:
  9977 ;;		_main
  9978 ;;		_logPC
  9979 ;; This function uses a non-reentrant model
  9980 ;;
  9981                           
  9982                           	psect	text23
  9983  00350A                     __ptext23:
  9984                           	opt stack 0
  9985  00350A                     _I2C_Master_Stop:
  9986                           	opt stack 23
  9987                           
  9988                           ;I2C.c: 35: I2C_Master_Wait();
  9989                           
  9990                           ;incstack = 0
  9991  00350A  EC38  F01A         	call	_I2C_Master_Wait	;wreg free
  9992                           
  9993                           ;I2C.c: 36: PEN = 1;
  9994  00350E  84C5               	bsf	4037,2,c	;volatile
  9995  003510  0012               	return		;funcret
  9996  003512                     __end_of_I2C_Master_Stop:
  9997                           	opt stack 0
  9998                           tblptru	equ	0xFF8
  9999                           tblptrh	equ	0xFF7
 10000                           tblptrl	equ	0xFF6
 10001                           tablat	equ	0xFF5
 10002                           prodh	equ	0xFF4
 10003                           prodl	equ	0xFF3
 10004                           intcon	equ	0xFF2
 10005                           intcon2	equ	0xFF1
 10006                           intcon3	equ	0xFF0
 10007                           postinc0	equ	0xFEE
 10008                           wreg	equ	0xFE8
 10009                           postdec1	equ	0xFE5
 10010                           plusw1	equ	0xFE3
 10011                           fsr1l	equ	0xFE1
 10012                           indf2	equ	0xFDF
 10013                           postinc2	equ	0xFDE
 10014                           postdec2	equ	0xFDD
 10015                           plusw2	equ	0xFDB
 10016                           fsr2h	equ	0xFDA
 10017                           fsr2l	equ	0xFD9
 10018                           status	equ	0xFD8
 10019                           
 10020 ;; *************** function _I2C_Master_Start *****************
 10021 ;; Defined at:
 10022 ;;		line 21 in file "../I2C.c"
 10023 ;; Parameters:    Size  Location     Type
 10024 ;;		None
 10025 ;; Auto vars:     Size  Location     Type
 10026 ;;		None
 10027 ;; Return value:  Size  Location     Type
 10028 ;;                  1    wreg      void 
 10029 ;; Registers used:
 10030 ;;		wreg, status,2, status,0, cstack
 10031 ;; Tracked objects:
 10032 ;;		On entry : 0/0
 10033 ;;		On exit  : 0/0
 10034 ;;		Unchanged: 0/0
 10035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10036 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10037 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10038 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10039 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10040 ;;Total ram usage:        0 bytes
 10041 ;; Hardware stack levels used:    1
 10042 ;; Hardware stack levels required when called:    6
 10043 ;; This function calls:
 10044 ;;		_I2C_Master_Wait
 10045 ;; This function is called by:
 10046 ;;		_main
 10047 ;;		_logPC
 10048 ;; This function uses a non-reentrant model
 10049 ;;
 10050                           
 10051                           	psect	text24
 10052  003512                     __ptext24:
 10053                           	opt stack 0
 10054  003512                     _I2C_Master_Start:
 10055                           	opt stack 23
 10056                           
 10057                           ;I2C.c: 23: I2C_Master_Wait();
 10058                           
 10059                           ;incstack = 0
 10060  003512  EC38  F01A         	call	_I2C_Master_Wait	;wreg free
 10061                           
 10062                           ;I2C.c: 24: SEN = 1;
 10063  003516  80C5               	bsf	4037,0,c	;volatile
 10064  003518  0012               	return		;funcret
 10065  00351A                     __end_of_I2C_Master_Start:
 10066                           	opt stack 0
 10067                           tblptru	equ	0xFF8
 10068                           tblptrh	equ	0xFF7
 10069                           tblptrl	equ	0xFF6
 10070                           tablat	equ	0xFF5
 10071                           prodh	equ	0xFF4
 10072                           prodl	equ	0xFF3
 10073                           intcon	equ	0xFF2
 10074                           intcon2	equ	0xFF1
 10075                           intcon3	equ	0xFF0
 10076                           postinc0	equ	0xFEE
 10077                           wreg	equ	0xFE8
 10078                           postdec1	equ	0xFE5
 10079                           plusw1	equ	0xFE3
 10080                           fsr1l	equ	0xFE1
 10081                           indf2	equ	0xFDF
 10082                           postinc2	equ	0xFDE
 10083                           postdec2	equ	0xFDD
 10084                           plusw2	equ	0xFDB
 10085                           fsr2h	equ	0xFDA
 10086                           fsr2l	equ	0xFD9
 10087                           status	equ	0xFD8
 10088                           
 10089 ;; *************** function _initLCD *****************
 10090 ;; Defined at:
 10091 ;;		line 7 in file "../lcd.c"
 10092 ;; Parameters:    Size  Location     Type
 10093 ;;		None
 10094 ;; Auto vars:     Size  Location     Type
 10095 ;;		None
 10096 ;; Return value:  Size  Location     Type
 10097 ;;                  1    wreg      void 
 10098 ;; Registers used:
 10099 ;;		wreg, status,2, status,0, cstack
 10100 ;; Tracked objects:
 10101 ;;		On entry : 0/0
 10102 ;;		On exit  : 0/0
 10103 ;;		Unchanged: 0/0
 10104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10105 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10106 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10107 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10108 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10109 ;;Total ram usage:        1 bytes
 10110 ;; Hardware stack levels used:    1
 10111 ;; Hardware stack levels required when called:    7
 10112 ;; This function calls:
 10113 ;;		_lcdInst
 10114 ;; This function is called by:
 10115 ;;		_main
 10116 ;; This function uses a non-reentrant model
 10117 ;;
 10118                           
 10119                           	psect	text25
 10120  0031B2                     __ptext25:
 10121                           	opt stack 0
 10122  0031B2                     _initLCD:
 10123                           	opt stack 23
 10124                           
 10125                           ;lcd.c: 8: _delay((unsigned long)((15)*(10000000/4000.0)));
 10126                           
 10127                           ;incstack = 0
 10128  0031B2  0E31               	movlw	49
 10129  0031B4  0100               	movlb	0	; () banked
 10130  0031B6  6F80               	movwf	??_initLCD& (0+255),b
 10131  0031B8  0EB2               	movlw	178
 10132  0031BA                     u7237:
 10133  0031BA  2EE8               	decfsz	wreg,f,c
 10134  0031BC  D7FE               	bra	u7237
 10135  0031BE  2F80               	decfsz	??_initLCD& (0+255),f,b
 10136  0031C0  D7FC               	bra	u7237
 10137  0031C2  F000               	nop	
 10138                           
 10139                           ;lcd.c: 9: lcdInst(0b00110011);
 10140  0031C4  0E33               	movlw	51
 10141  0031C6  EC65  F01A         	call	_lcdInst
 10142                           
 10143                           ;lcd.c: 10: lcdInst(0b00110010);
 10144  0031CA  0E32               	movlw	50
 10145  0031CC  EC65  F01A         	call	_lcdInst
 10146                           
 10147                           ;lcd.c: 11: lcdInst(0b00101000);
 10148  0031D0  0E28               	movlw	40
 10149  0031D2  EC65  F01A         	call	_lcdInst
 10150                           
 10151                           ;lcd.c: 12: lcdInst(0b00001111);
 10152  0031D6  0E0F               	movlw	15
 10153  0031D8  EC65  F01A         	call	_lcdInst
 10154                           
 10155                           ;lcd.c: 13: lcdInst(0b00000110);
 10156  0031DC  0E06               	movlw	6
 10157  0031DE  EC65  F01A         	call	_lcdInst
 10158                           
 10159                           ;lcd.c: 14: lcdInst(0b00000001);
 10160  0031E2  0E01               	movlw	1
 10161  0031E4  EC65  F01A         	call	_lcdInst
 10162                           
 10163                           ;lcd.c: 15: _delay((unsigned long)((15)*(10000000/4000.0)));
 10164  0031E8  0E31               	movlw	49
 10165  0031EA  0100               	movlb	0	; () banked
 10166  0031EC  6F80               	movwf	??_initLCD& (0+255),b
 10167  0031EE  0EB2               	movlw	178
 10168  0031F0                     u7247:
 10169  0031F0  2EE8               	decfsz	wreg,f,c
 10170  0031F2  D7FE               	bra	u7247
 10171  0031F4  2F80               	decfsz	??_initLCD& (0+255),f,b
 10172  0031F6  D7FC               	bra	u7247
 10173  0031F8  F000               	nop	
 10174  0031FA  0012               	return		;funcret
 10175  0031FC                     __end_of_initLCD:
 10176                           	opt stack 0
 10177                           tblptru	equ	0xFF8
 10178                           tblptrh	equ	0xFF7
 10179                           tblptrl	equ	0xFF6
 10180                           tablat	equ	0xFF5
 10181                           prodh	equ	0xFF4
 10182                           prodl	equ	0xFF3
 10183                           intcon	equ	0xFF2
 10184                           intcon2	equ	0xFF1
 10185                           intcon3	equ	0xFF0
 10186                           postinc0	equ	0xFEE
 10187                           wreg	equ	0xFE8
 10188                           postdec1	equ	0xFE5
 10189                           plusw1	equ	0xFE3
 10190                           fsr1l	equ	0xFE1
 10191                           indf2	equ	0xFDF
 10192                           postinc2	equ	0xFDE
 10193                           postdec2	equ	0xFDD
 10194                           plusw2	equ	0xFDB
 10195                           fsr2h	equ	0xFDA
 10196                           fsr2l	equ	0xFD9
 10197                           status	equ	0xFD8
 10198                           
 10199 ;; *************** function _lcdInst *****************
 10200 ;; Defined at:
 10201 ;;		line 18 in file "../lcd.c"
 10202 ;; Parameters:    Size  Location     Type
 10203 ;;  data            1    wreg     unsigned char 
 10204 ;; Auto vars:     Size  Location     Type
 10205 ;;  data            1   50[COMRAM] unsigned char 
 10206 ;; Return value:  Size  Location     Type
 10207 ;;                  1    wreg      void 
 10208 ;; Registers used:
 10209 ;;		wreg, status,2, status,0, cstack
 10210 ;; Tracked objects:
 10211 ;;		On entry : 0/0
 10212 ;;		On exit  : 0/0
 10213 ;;		Unchanged: 0/0
 10214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10215 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10216 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10217 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10218 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10219 ;;Total ram usage:        1 bytes
 10220 ;; Hardware stack levels used:    1
 10221 ;; Hardware stack levels required when called:    6
 10222 ;; This function calls:
 10223 ;;		_lcdNibble
 10224 ;; This function is called by:
 10225 ;;		_initLCD
 10226 ;;		_main
 10227 ;;		_testBatteries
 10228 ;;		_show_log
 10229 ;; This function uses a non-reentrant model
 10230 ;;
 10231                           
 10232                           	psect	text26
 10233  0034CA                     __ptext26:
 10234                           	opt stack 0
 10235  0034CA                     _lcdInst:
 10236                           	opt stack 23
 10237                           
 10238                           ;incstack = 0
 10239                           ;lcdInst@data stored from wreg
 10240  0034CA  6E33               	movwf	lcdInst@data,c
 10241                           
 10242                           ;lcd.c: 19: LATDbits.LATD2 = 0;
 10243  0034CC  948C               	bcf	3980,2,c	;volatile
 10244                           
 10245                           ;lcd.c: 20: lcdNibble(data);
 10246  0034CE  5033               	movf	lcdInst@data,w,c
 10247  0034D0  EC8B  F018         	call	_lcdNibble
 10248  0034D4  0012               	return		;funcret
 10249  0034D6                     __end_of_lcdInst:
 10250                           	opt stack 0
 10251                           tblptru	equ	0xFF8
 10252                           tblptrh	equ	0xFF7
 10253                           tblptrl	equ	0xFF6
 10254                           tablat	equ	0xFF5
 10255                           prodh	equ	0xFF4
 10256                           prodl	equ	0xFF3
 10257                           intcon	equ	0xFF2
 10258                           intcon2	equ	0xFF1
 10259                           intcon3	equ	0xFF0
 10260                           postinc0	equ	0xFEE
 10261                           wreg	equ	0xFE8
 10262                           postdec1	equ	0xFE5
 10263                           plusw1	equ	0xFE3
 10264                           fsr1l	equ	0xFE1
 10265                           indf2	equ	0xFDF
 10266                           postinc2	equ	0xFDE
 10267                           postdec2	equ	0xFDD
 10268                           plusw2	equ	0xFDB
 10269                           fsr2h	equ	0xFDA
 10270                           fsr2l	equ	0xFD9
 10271                           status	equ	0xFD8
 10272                           
 10273 ;; *************** function _lcdNibble *****************
 10274 ;; Defined at:
 10275 ;;		line 28 in file "../lcd.c"
 10276 ;; Parameters:    Size  Location     Type
 10277 ;;  data            1    wreg     unsigned char 
 10278 ;; Auto vars:     Size  Location     Type
 10279 ;;  data            1   49[COMRAM] unsigned char 
 10280 ;;  temp            1   48[COMRAM] unsigned char 
 10281 ;; Return value:  Size  Location     Type
 10282 ;;                  1    wreg      void 
 10283 ;; Registers used:
 10284 ;;		wreg, status,2, status,0
 10285 ;; Tracked objects:
 10286 ;;		On entry : 0/0
 10287 ;;		On exit  : 0/0
 10288 ;;		Unchanged: 0/0
 10289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10291 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10292 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10293 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10294 ;;Total ram usage:        2 bytes
 10295 ;; Hardware stack levels used:    1
 10296 ;; Hardware stack levels required when called:    5
 10297 ;; This function calls:
 10298 ;;		Nothing
 10299 ;; This function is called by:
 10300 ;;		_lcdInst
 10301 ;;		_putch
 10302 ;; This function uses a non-reentrant model
 10303 ;;
 10304                           
 10305                           	psect	text27
 10306  003116                     __ptext27:
 10307                           	opt stack 0
 10308  003116                     _lcdNibble:
 10309                           	opt stack 22
 10310                           
 10311                           ;incstack = 0
 10312                           ;lcdNibble@data stored from wreg
 10313  003116  6E32               	movwf	lcdNibble@data,c
 10314                           
 10315                           ;lcd.c: 30: char temp = data & 0xF0;
 10316  003118  5032               	movf	lcdNibble@data,w,c
 10317  00311A  0BF0               	andlw	240
 10318  00311C  6E31               	movwf	lcdNibble@temp,c
 10319                           
 10320                           ;lcd.c: 31: LATD = LATD & 0x0F;
 10321  00311E  508C               	movf	3980,w,c	;volatile
 10322  003120  0B0F               	andlw	15
 10323  003122  6E8C               	movwf	3980,c	;volatile
 10324                           
 10325                           ;lcd.c: 32: LATD = temp | LATD;
 10326  003124  5031               	movf	lcdNibble@temp,w,c
 10327  003126  108C               	iorwf	3980,w,c	;volatile
 10328  003128  6E8C               	movwf	3980,c	;volatile
 10329                           
 10330                           ;lcd.c: 34: LATDbits.LATD3 = 0;
 10331  00312A  968C               	bcf	3980,3,c	;volatile
 10332                           
 10333                           ;lcd.c: 35: _delay((unsigned long)((30)*(10000000/4000000.0)));
 10334  00312C  0E19               	movlw	25
 10335  00312E                     u7257:
 10336  00312E  2EE8               	decfsz	wreg,f,c
 10337  003130  D7FE               	bra	u7257
 10338                           
 10339                           ;lcd.c: 36: LATDbits.LATD3 = 1;
 10340  003132  868C               	bsf	3980,3,c	;volatile
 10341                           
 10342                           ;lcd.c: 37: _delay((unsigned long)((30)*(10000000/4000000.0)));
 10343  003134  0E19               	movlw	25
 10344  003136                     u7267:
 10345  003136  2EE8               	decfsz	wreg,f,c
 10346  003138  D7FE               	bra	u7267
 10347                           
 10348                           ;lcd.c: 39: data = data << 4;
 10349  00313A  3832               	swapf	lcdNibble@data,w,c
 10350  00313C  0BF0               	andlw	240
 10351  00313E  6E32               	movwf	lcdNibble@data,c
 10352                           
 10353                           ;lcd.c: 41: temp = data & 0xF0;
 10354  003140  5032               	movf	lcdNibble@data,w,c
 10355  003142  0BF0               	andlw	240
 10356  003144  6E31               	movwf	lcdNibble@temp,c
 10357                           
 10358                           ;lcd.c: 42: LATD = LATD & 0x0F;
 10359  003146  508C               	movf	3980,w,c	;volatile
 10360  003148  0B0F               	andlw	15
 10361  00314A  6E8C               	movwf	3980,c	;volatile
 10362                           
 10363                           ;lcd.c: 43: LATD = temp | LATD;
 10364  00314C  5031               	movf	lcdNibble@temp,w,c
 10365  00314E  108C               	iorwf	3980,w,c	;volatile
 10366  003150  6E8C               	movwf	3980,c	;volatile
 10367                           
 10368                           ;lcd.c: 45: LATDbits.LATD3 = 0;
 10369  003152  968C               	bcf	3980,3,c	;volatile
 10370                           
 10371                           ;lcd.c: 46: _delay((unsigned long)((30)*(10000000/4000000.0)));
 10372  003154  0E19               	movlw	25
 10373  003156                     u7277:
 10374  003156  2EE8               	decfsz	wreg,f,c
 10375  003158  D7FE               	bra	u7277
 10376                           
 10377                           ;lcd.c: 47: LATDbits.LATD3 = 1;
 10378  00315A  868C               	bsf	3980,3,c	;volatile
 10379                           
 10380                           ;lcd.c: 48: _delay((unsigned long)((30)*(10000000/4000000.0)));
 10381  00315C  0E19               	movlw	25
 10382  00315E                     u7287:
 10383  00315E  2EE8               	decfsz	wreg,f,c
 10384  003160  D7FE               	bra	u7287
 10385  003162  0012               	return		;funcret
 10386  003164                     __end_of_lcdNibble:
 10387                           	opt stack 0
 10388                           tblptru	equ	0xFF8
 10389                           tblptrh	equ	0xFF7
 10390                           tblptrl	equ	0xFF6
 10391                           tablat	equ	0xFF5
 10392                           prodh	equ	0xFF4
 10393                           prodl	equ	0xFF3
 10394                           intcon	equ	0xFF2
 10395                           intcon2	equ	0xFF1
 10396                           intcon3	equ	0xFF0
 10397                           postinc0	equ	0xFEE
 10398                           wreg	equ	0xFE8
 10399                           postdec1	equ	0xFE5
 10400                           plusw1	equ	0xFE3
 10401                           fsr1l	equ	0xFE1
 10402                           indf2	equ	0xFDF
 10403                           postinc2	equ	0xFDE
 10404                           postdec2	equ	0xFDD
 10405                           plusw2	equ	0xFDB
 10406                           fsr2h	equ	0xFDA
 10407                           fsr2l	equ	0xFD9
 10408                           status	equ	0xFD8
 10409                           
 10410 ;; *************** function _I2C_Master_Read *****************
 10411 ;; Defined at:
 10412 ;;		line 45 in file "../I2C.c"
 10413 ;; Parameters:    Size  Location     Type
 10414 ;;  a               1    wreg     unsigned char 
 10415 ;; Auto vars:     Size  Location     Type
 10416 ;;  a               1   49[COMRAM] unsigned char 
 10417 ;;  temp            1   50[COMRAM] unsigned char 
 10418 ;; Return value:  Size  Location     Type
 10419 ;;                  1    wreg      unsigned char 
 10420 ;; Registers used:
 10421 ;;		wreg, status,2, status,0, cstack
 10422 ;; Tracked objects:
 10423 ;;		On entry : 0/0
 10424 ;;		On exit  : 0/0
 10425 ;;		Unchanged: 0/0
 10426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10427 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10428 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10429 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10430 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10431 ;;Total ram usage:        2 bytes
 10432 ;; Hardware stack levels used:    1
 10433 ;; Hardware stack levels required when called:    6
 10434 ;; This function calls:
 10435 ;;		_I2C_Master_Wait
 10436 ;; This function is called by:
 10437 ;;		_main
 10438 ;; This function uses a non-reentrant model
 10439 ;;
 10440                           
 10441                           	psect	text28
 10442  00330E                     __ptext28:
 10443                           	opt stack 0
 10444  00330E                     _I2C_Master_Read:
 10445                           	opt stack 24
 10446                           
 10447                           ;incstack = 0
 10448                           ;I2C_Master_Read@a stored from wreg
 10449  00330E  6E32               	movwf	I2C_Master_Read@a,c
 10450                           
 10451                           ;I2C.c: 47: unsigned char temp;
 10452                           ;I2C.c: 48: I2C_Master_Wait();
 10453  003310  EC38  F01A         	call	_I2C_Master_Wait	;wreg free
 10454                           
 10455                           ;I2C.c: 49: RCEN = 1;
 10456  003314  86C5               	bsf	4037,3,c	;volatile
 10457                           
 10458                           ;I2C.c: 50: I2C_Master_Wait();
 10459  003316  EC38  F01A         	call	_I2C_Master_Wait	;wreg free
 10460                           
 10461                           ;I2C.c: 51: temp = SSPBUF;
 10462  00331A  CFC9 F033          	movff	4041,I2C_Master_Read@temp	;volatile
 10463                           
 10464                           ;I2C.c: 52: I2C_Master_Wait();
 10465  00331E  EC38  F01A         	call	_I2C_Master_Wait	;wreg free
 10466                           
 10467                           ;I2C.c: 53: ACKDT = (a)?0:1;
 10468  003322  5032               	movf	I2C_Master_Read@a,w,c
 10469  003324  A4D8               	btfss	status,2,c
 10470  003326  D002               	goto	u5900
 10471  003328  8AC5               	bsf	4037,5,c	;volatile
 10472  00332A  D001               	goto	l6085
 10473  00332C                     u5900:
 10474  00332C  9AC5               	bcf	4037,5,c	;volatile
 10475  00332E                     l6085:
 10476                           
 10477                           ;I2C.c: 54: ACKEN = 1;
 10478  00332E  88C5               	bsf	4037,4,c	;volatile
 10479                           
 10480                           ;I2C.c: 55: return temp;
 10481  003330  5033               	movf	I2C_Master_Read@temp,w,c
 10482  003332  0012               	return	
 10483  003334                     __end_of_I2C_Master_Read:
 10484                           	opt stack 0
 10485                           tblptru	equ	0xFF8
 10486                           tblptrh	equ	0xFF7
 10487                           tblptrl	equ	0xFF6
 10488                           tablat	equ	0xFF5
 10489                           prodh	equ	0xFF4
 10490                           prodl	equ	0xFF3
 10491                           intcon	equ	0xFF2
 10492                           intcon2	equ	0xFF1
 10493                           intcon3	equ	0xFF0
 10494                           postinc0	equ	0xFEE
 10495                           wreg	equ	0xFE8
 10496                           postdec1	equ	0xFE5
 10497                           plusw1	equ	0xFE3
 10498                           fsr1l	equ	0xFE1
 10499                           indf2	equ	0xFDF
 10500                           postinc2	equ	0xFDE
 10501                           postdec2	equ	0xFDD
 10502                           plusw2	equ	0xFDB
 10503                           fsr2h	equ	0xFDA
 10504                           fsr2l	equ	0xFD9
 10505                           status	equ	0xFD8
 10506                           
 10507 ;; *************** function _I2C_Master_Wait *****************
 10508 ;; Defined at:
 10509 ;;		line 16 in file "../I2C.c"
 10510 ;; Parameters:    Size  Location     Type
 10511 ;;		None
 10512 ;; Auto vars:     Size  Location     Type
 10513 ;;		None
 10514 ;; Return value:  Size  Location     Type
 10515 ;;                  1    wreg      void 
 10516 ;; Registers used:
 10517 ;;		wreg, status,2, status,0
 10518 ;; Tracked objects:
 10519 ;;		On entry : 0/0
 10520 ;;		On exit  : 0/0
 10521 ;;		Unchanged: 0/0
 10522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10523 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10524 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10525 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10526 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10527 ;;Total ram usage:        1 bytes
 10528 ;; Hardware stack levels used:    1
 10529 ;; Hardware stack levels required when called:    5
 10530 ;; This function calls:
 10531 ;;		Nothing
 10532 ;; This function is called by:
 10533 ;;		_I2C_Master_Start
 10534 ;;		_I2C_Master_Stop
 10535 ;;		_I2C_Master_Write
 10536 ;;		_I2C_Master_Read
 10537 ;; This function uses a non-reentrant model
 10538 ;;
 10539                           
 10540                           	psect	text29
 10541  003470                     __ptext29:
 10542                           	opt stack 0
 10543  003470                     _I2C_Master_Wait:
 10544                           	opt stack 23
 10545  003470                     l30:
 10546  003470  B4C7               	btfsc	4039,2,c	;volatile
 10547  003472  D7FE               	goto	l30
 10548  003474  CFC5 F031          	movff	4037,??_I2C_Master_Wait	;volatile
 10549  003478  0E1F               	movlw	31
 10550  00347A  1631               	andwf	??_I2C_Master_Wait,f,c
 10551  00347C  B4D8               	btfsc	status,2,c
 10552  00347E  0012               	return	
 10553  003480  D7F7               	goto	l30
 10554  003482                     __end_of_I2C_Master_Wait:
 10555                           	opt stack 0
 10556                           tblptru	equ	0xFF8
 10557                           tblptrh	equ	0xFF7
 10558                           tblptrl	equ	0xFF6
 10559                           tablat	equ	0xFF5
 10560                           prodh	equ	0xFF4
 10561                           prodl	equ	0xFF3
 10562                           intcon	equ	0xFF2
 10563                           intcon2	equ	0xFF1
 10564                           intcon3	equ	0xFF0
 10565                           postinc0	equ	0xFEE
 10566                           wreg	equ	0xFE8
 10567                           postdec1	equ	0xFE5
 10568                           plusw1	equ	0xFE3
 10569                           fsr1l	equ	0xFE1
 10570                           indf2	equ	0xFDF
 10571                           postinc2	equ	0xFDE
 10572                           postdec2	equ	0xFDD
 10573                           plusw2	equ	0xFDB
 10574                           fsr2h	equ	0xFDA
 10575                           fsr2l	equ	0xFD9
 10576                           status	equ	0xFD8
 10577                           
 10578 ;; *************** function _I2C_Master_Init *****************
 10579 ;; Defined at:
 10580 ;;		line 5 in file "../I2C.c"
 10581 ;; Parameters:    Size  Location     Type
 10582 ;;  c               4   13[BANK0 ] const unsigned long 
 10583 ;; Auto vars:     Size  Location     Type
 10584 ;;		None
 10585 ;; Return value:  Size  Location     Type
 10586 ;;                  1    wreg      void 
 10587 ;; Registers used:
 10588 ;;		wreg, status,2, status,0, cstack
 10589 ;; Tracked objects:
 10590 ;;		On entry : 0/0
 10591 ;;		On exit  : 0/0
 10592 ;;		Unchanged: 0/0
 10593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10594 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10595 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10596 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10597 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10598 ;;Total ram usage:        8 bytes
 10599 ;; Hardware stack levels used:    1
 10600 ;; Hardware stack levels required when called:    6
 10601 ;; This function calls:
 10602 ;;		___lldiv
 10603 ;; This function is called by:
 10604 ;;		_main
 10605 ;; This function uses a non-reentrant model
 10606 ;;
 10607                           
 10608                           	psect	text30
 10609  003064                     __ptext30:
 10610                           	opt stack 0
 10611  003064                     _I2C_Master_Init:
 10612                           	opt stack 24
 10613                           
 10614                           ;I2C.c: 8: SSPSTAT = 0b00000000;
 10615                           
 10616                           ;incstack = 0
 10617  003064  0E00               	movlw	0
 10618  003066  6EC7               	movwf	4039,c	;volatile
 10619                           
 10620                           ;I2C.c: 9: SSPCON1 = 0b00101000;
 10621  003068  0E28               	movlw	40
 10622  00306A  6EC6               	movwf	4038,c	;volatile
 10623                           
 10624                           ;I2C.c: 10: SSPCON2 = 0b00000000;
 10625  00306C  0E00               	movlw	0
 10626  00306E  6EC5               	movwf	4037,c	;volatile
 10627                           
 10628                           ;I2C.c: 11: SSPADD = (10000000/(4*c))-1;
 10629  003070  0E80               	movlw	128
 10630  003072  0100               	movlb	0	; () banked
 10631  003074  6F80               	movwf	___lldiv@dividend& (0+255),b
 10632  003076  0E96               	movlw	150
 10633  003078  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
 10634  00307A  0E98               	movlw	152
 10635  00307C  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
 10636  00307E  0E00               	movlw	0
 10637  003080  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
 10638  003082  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
 10639  003086  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
 10640  00308A  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
 10641  00308E  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
 10642  003092  0E02               	movlw	2
 10643  003094                     u5895:
 10644  003094  90D8               	bcf	status,0,c
 10645  003096  0100               	movlb	0	; () banked
 10646  003098  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
 10647  00309A  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
 10648  00309C  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
 10649  00309E  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
 10650  0030A0  2EE8               	decfsz	wreg,f,c
 10651  0030A2  D7F8               	goto	u5895
 10652  0030A4  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
 10653  0030A8  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
 10654  0030AC  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
 10655  0030B0  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
 10656  0030B4  EC76  F016         	call	___lldiv	;wreg free
 10657  0030B8  0100               	movlb	0	; () banked
 10658  0030BA  0580               	decf	?___lldiv& (0+255),w,b
 10659  0030BC  6EC8               	movwf	4040,c	;volatile
 10660                           
 10661                           ; BSR set to: 0
 10662                           ;I2C.c: 12: TRISC3 = 1;
 10663  0030BE  8694               	bsf	3988,3,c	;volatile
 10664                           
 10665                           ; BSR set to: 0
 10666                           ;I2C.c: 13: TRISC4 = 1;
 10667  0030C0  8894               	bsf	3988,4,c	;volatile
 10668                           
 10669                           ; BSR set to: 0
 10670  0030C2  0012               	return		;funcret
 10671  0030C4                     __end_of_I2C_Master_Init:
 10672                           	opt stack 0
 10673                           tblptru	equ	0xFF8
 10674                           tblptrh	equ	0xFF7
 10675                           tblptrl	equ	0xFF6
 10676                           tablat	equ	0xFF5
 10677                           prodh	equ	0xFF4
 10678                           prodl	equ	0xFF3
 10679                           intcon	equ	0xFF2
 10680                           intcon2	equ	0xFF1
 10681                           intcon3	equ	0xFF0
 10682                           postinc0	equ	0xFEE
 10683                           wreg	equ	0xFE8
 10684                           postdec1	equ	0xFE5
 10685                           plusw1	equ	0xFE3
 10686                           fsr1l	equ	0xFE1
 10687                           indf2	equ	0xFDF
 10688                           postinc2	equ	0xFDE
 10689                           postdec2	equ	0xFDD
 10690                           plusw2	equ	0xFDB
 10691                           fsr2h	equ	0xFDA
 10692                           fsr2l	equ	0xFD9
 10693                           status	equ	0xFD8
 10694                           
 10695 ;; *************** function ___lldiv *****************
 10696 ;; Defined at:
 10697 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
 10698 ;; Parameters:    Size  Location     Type
 10699 ;;  dividend        4    0[BANK0 ] unsigned long 
 10700 ;;  divisor         4    4[BANK0 ] unsigned long 
 10701 ;; Auto vars:     Size  Location     Type
 10702 ;;  quotient        4    8[BANK0 ] unsigned long 
 10703 ;;  counter         1   12[BANK0 ] unsigned char 
 10704 ;; Return value:  Size  Location     Type
 10705 ;;                  4    0[BANK0 ] unsigned long 
 10706 ;; Registers used:
 10707 ;;		wreg, status,2, status,0
 10708 ;; Tracked objects:
 10709 ;;		On entry : 0/0
 10710 ;;		On exit  : 0/0
 10711 ;;		Unchanged: 0/0
 10712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10713 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10714 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10715 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10716 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10717 ;;Total ram usage:       13 bytes
 10718 ;; Hardware stack levels used:    1
 10719 ;; Hardware stack levels required when called:    5
 10720 ;; This function calls:
 10721 ;;		Nothing
 10722 ;; This function is called by:
 10723 ;;		_I2C_Master_Init
 10724 ;; This function uses a non-reentrant model
 10725 ;;
 10726                           
 10727                           	psect	text31
 10728  002CEC                     __ptext31:
 10729                           	opt stack 0
 10730  002CEC                     ___lldiv:
 10731                           	opt stack 24
 10732                           
 10733                           ; BSR set to: 0
 10734                           ;incstack = 0
 10735  002CEC  0E00               	movlw	0
 10736  002CEE  0100               	movlb	0	; () banked
 10737  002CF0  6F88               	movwf	___lldiv@quotient& (0+255),b
 10738  002CF2  0E00               	movlw	0
 10739  002CF4  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
 10740  002CF6  0E00               	movlw	0
 10741  002CF8  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
 10742  002CFA  0E00               	movlw	0
 10743  002CFC  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
 10744                           
 10745                           ; BSR set to: 0
 10746  002CFE  0100               	movlb	0	; () banked
 10747  002D00  5184               	movf	___lldiv@divisor& (0+255),w,b
 10748  002D02  0100               	movlb	0	; () banked
 10749  002D04  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 10750  002D06  0100               	movlb	0	; () banked
 10751  002D08  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 10752  002D0A  0100               	movlb	0	; () banked
 10753  002D0C  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 10754  002D0E  B4D8               	btfsc	status,2,c
 10755  002D10  D042               	goto	l1013
 10756                           
 10757                           ; BSR set to: 0
 10758  002D12  0E01               	movlw	1
 10759  002D14  0100               	movlb	0	; () banked
 10760  002D16  6F8C               	movwf	___lldiv@counter& (0+255),b
 10761  002D18  D008               	goto	l6055
 10762  002D1A                     l6053:
 10763                           
 10764                           ; BSR set to: 0
 10765  002D1A  0100               	movlb	0	; () banked
 10766  002D1C  90D8               	bcf	status,0,c
 10767  002D1E  3784               	rlcf	___lldiv@divisor& (0+255),f,b
 10768  002D20  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 10769  002D22  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 10770  002D24  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 10771  002D26  0100               	movlb	0	; () banked
 10772  002D28  2B8C               	incf	___lldiv@counter& (0+255),f,b
 10773  002D2A                     l6055:
 10774                           
 10775                           ; BSR set to: 0
 10776  002D2A  0100               	movlb	0	; () banked
 10777  002D2C  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 10778  002D2E  D7F5               	goto	l6053
 10779  002D30                     l6057:
 10780                           
 10781                           ; BSR set to: 0
 10782  002D30  0100               	movlb	0	; () banked
 10783  002D32  90D8               	bcf	status,0,c
 10784  002D34  3788               	rlcf	___lldiv@quotient& (0+255),f,b
 10785  002D36  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 10786  002D38  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 10787  002D3A  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 10788                           
 10789                           ; BSR set to: 0
 10790  002D3C  0100               	movlb	0	; () banked
 10791  002D3E  5184               	movf	___lldiv@divisor& (0+255),w,b
 10792  002D40  0100               	movlb	0	; () banked
 10793  002D42  5D80               	subwf	___lldiv@dividend& (0+255),w,b
 10794  002D44  0100               	movlb	0	; () banked
 10795  002D46  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
 10796  002D48  0100               	movlb	0	; () banked
 10797  002D4A  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 10798  002D4C  0100               	movlb	0	; () banked
 10799  002D4E  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
 10800  002D50  0100               	movlb	0	; () banked
 10801  002D52  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 10802  002D54  0100               	movlb	0	; () banked
 10803  002D56  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
 10804  002D58  0100               	movlb	0	; () banked
 10805  002D5A  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 10806  002D5C  A0D8               	btfss	status,0,c
 10807  002D5E  D012               	goto	l6065
 10808                           
 10809                           ; BSR set to: 0
 10810  002D60  0100               	movlb	0	; () banked
 10811  002D62  5184               	movf	___lldiv@divisor& (0+255),w,b
 10812  002D64  0100               	movlb	0	; () banked
 10813  002D66  5F80               	subwf	___lldiv@dividend& (0+255),f,b
 10814  002D68  0100               	movlb	0	; () banked
 10815  002D6A  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
 10816  002D6C  0100               	movlb	0	; () banked
 10817  002D6E  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 10818  002D70  0100               	movlb	0	; () banked
 10819  002D72  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
 10820  002D74  0100               	movlb	0	; () banked
 10821  002D76  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 10822  002D78  0100               	movlb	0	; () banked
 10823  002D7A  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
 10824  002D7C  0100               	movlb	0	; () banked
 10825  002D7E  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 10826                           
 10827                           ; BSR set to: 0
 10828  002D80  0100               	movlb	0	; () banked
 10829  002D82  8188               	bsf	___lldiv@quotient& (0+255),0,b
 10830  002D84                     l6065:
 10831                           
 10832                           ; BSR set to: 0
 10833  002D84  0100               	movlb	0	; () banked
 10834  002D86  90D8               	bcf	status,0,c
 10835  002D88  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 10836  002D8A  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 10837  002D8C  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 10838  002D8E  3384               	rrcf	___lldiv@divisor& (0+255),f,b
 10839                           
 10840                           ; BSR set to: 0
 10841  002D90  0100               	movlb	0	; () banked
 10842  002D92  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
 10843  002D94  D7CD               	goto	l6057
 10844  002D96                     l1013:
 10845                           
 10846                           ; BSR set to: 0
 10847  002D96  C088  F080         	movff	___lldiv@quotient,?___lldiv
 10848  002D9A  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
 10849  002D9E  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
 10850  002DA2  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
 10851                           
 10852                           ; BSR set to: 0
 10853  002DA6  0012               	return		;funcret
 10854  002DA8                     __end_of___lldiv:
 10855                           	opt stack 0
 10856                           tblptru	equ	0xFF8
 10857                           tblptrh	equ	0xFF7
 10858                           tblptrl	equ	0xFF6
 10859                           tablat	equ	0xFF5
 10860                           prodh	equ	0xFF4
 10861                           prodl	equ	0xFF3
 10862                           intcon	equ	0xFF2
 10863                           intcon2	equ	0xFF1
 10864                           intcon3	equ	0xFF0
 10865                           postinc0	equ	0xFEE
 10866                           wreg	equ	0xFE8
 10867                           postdec1	equ	0xFE5
 10868                           plusw1	equ	0xFE3
 10869                           fsr1l	equ	0xFE1
 10870                           indf2	equ	0xFDF
 10871                           postinc2	equ	0xFDE
 10872                           postdec2	equ	0xFDD
 10873                           plusw2	equ	0xFDB
 10874                           fsr2h	equ	0xFDA
 10875                           fsr2l	equ	0xFD9
 10876                           status	equ	0xFD8
 10877                           
 10878 ;; *************** function _ISR *****************
 10879 ;; Defined at:
 10880 ;;		line 952 in file "../main.c"
 10881 ;; Parameters:    Size  Location     Type
 10882 ;;		None
 10883 ;; Auto vars:     Size  Location     Type
 10884 ;;  keypress        1   47[COMRAM] unsigned char 
 10885 ;; Return value:  Size  Location     Type
 10886 ;;                  1    wreg      void 
 10887 ;; Registers used:
 10888 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10889 ;; Tracked objects:
 10890 ;;		On entry : 0/0
 10891 ;;		On exit  : 0/0
 10892 ;;		Unchanged: 0/0
 10893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10894 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10895 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10896 ;;      Temps:         15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10897 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10898 ;;Total ram usage:       16 bytes
 10899 ;; Hardware stack levels used:    1
 10900 ;; Hardware stack levels required when called:    4
 10901 ;; This function calls:
 10902 ;;		_keypressed
 10903 ;;		i2___awdiv
 10904 ;;		i2___awmod
 10905 ;;		i2_stopOperation
 10906 ;; This function is called by:
 10907 ;;		Interrupt level 2
 10908 ;; This function uses a non-reentrant model
 10909 ;;
 10910                           
 10911                           	psect	intcode
 10912  000008                     __pintcode:
 10913                           	opt stack 0
 10914  000008                     _ISR:
 10915                           	opt stack 22
 10916                           
 10917                           ; BSR set to: 0
 10918                           ;incstack = 0
 10919  000008  824F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 10920  00000A  ED05  F013         	call	int_func,f	;refresh shadow registers
 10921                           tblptru	equ	0xFF8
 10922                           tblptrh	equ	0xFF7
 10923                           tblptrl	equ	0xFF6
 10924                           tablat	equ	0xFF5
 10925                           prodh	equ	0xFF4
 10926                           prodl	equ	0xFF3
 10927                           intcon	equ	0xFF2
 10928                           intcon2	equ	0xFF1
 10929                           intcon3	equ	0xFF0
 10930                           postinc0	equ	0xFEE
 10931                           wreg	equ	0xFE8
 10932                           postdec1	equ	0xFE5
 10933                           plusw1	equ	0xFE3
 10934                           fsr1l	equ	0xFE1
 10935                           indf2	equ	0xFDF
 10936                           postinc2	equ	0xFDE
 10937                           postdec2	equ	0xFDD
 10938                           plusw2	equ	0xFDB
 10939                           fsr2h	equ	0xFDA
 10940                           fsr2l	equ	0xFD9
 10941                           status	equ	0xFD8
 10942                           
 10943                           	psect	intcode_body
 10944  00260A                     __pintcode_body:
 10945                           	opt stack 22
 10946  00260A                     int_func:
 10947                           	opt stack 22
 10948  00260A  0006               	pop		; remove dummy address from shadow register refresh
 10949  00260C  CFFA F022          	movff	pclath,??_ISR+1
 10950  002610  CFFB F023          	movff	pclatu,??_ISR+2
 10951  002614  CFE9 F024          	movff	fsr0l,??_ISR+3
 10952  002618  CFEA F025          	movff	fsr0h,??_ISR+4
 10953  00261C  CFE1 F026          	movff	fsr1l,??_ISR+5
 10954  002620  CFE2 F027          	movff	fsr1h,??_ISR+6
 10955  002624  CFD9 F028          	movff	fsr2l,??_ISR+7
 10956  002628  CFDA F029          	movff	fsr2h,??_ISR+8
 10957  00262C  CFF3 F02A          	movff	prodl,??_ISR+9
 10958  002630  CFF4 F02B          	movff	prodh,??_ISR+10
 10959  002634  CFF6 F02C          	movff	tblptrl,??_ISR+11
 10960  002638  CFF7 F02D          	movff	tblptrh,??_ISR+12
 10961  00263C  CFF8 F02E          	movff	tblptru,??_ISR+13
 10962  002640  CFF5 F02F          	movff	tablat,??_ISR+14
 10963                           
 10964                           ;main.c: 953: if (INT1IF){
 10965  002644  A0F0               	btfss	intcon3,0,c	;volatile
 10966  002646  D015               	goto	i2l5563
 10967                           
 10968                           ;main.c: 954: unsigned char keypress = (PORTB & 0xF0) >> 4;
 10969  002648  3881               	swapf	3969,w,c	;volatile
 10970  00264A  0B0F               	andlw	15
 10971  00264C  0B0F               	andlw	15
 10972  00264E  6E30               	movwf	ISR@keypress,c
 10973                           
 10974                           ;main.c: 955: keypressed('4', '6', keys[keypress]);
 10975  002650  0E36               	movlw	54
 10976  002652  6E1D               	movwf	keypressed@right,c
 10977  002654  5030               	movf	ISR@keypress,w,c
 10978  002656  0D01               	mullw	1
 10979  002658  0E7D               	movlw	low _keys
 10980  00265A  24F3               	addwf	prodl,w,c
 10981  00265C  6EF6               	movwf	tblptrl,c
 10982  00265E  0EFD               	movlw	high _keys
 10983  002660  20F4               	addwfc	prodh,w,c
 10984  002662  6EF7               	movwf	tblptrh,c
 10985  002664                     	if	0	;There are less than 3 active tblptr bytes
 10986  002664                     	endif
 10987  002664  0008               	tblrd		*
 10988  002666  CFF5 F01E          	movff	tablat,keypressed@key
 10989  00266A  0E34               	movlw	52
 10990  00266C  EC90  F015         	call	_keypressed
 10991                           
 10992                           ;main.c: 956: INT1IF = 0;
 10993  002670  90F0               	bcf	intcon3,0,c	;volatile
 10994  002672                     i2l5563:
 10995                           
 10996                           ;main.c: 957: }
 10997                           ;main.c: 958: if (screenMode == 1 && TMR0IF){
 10998  002672  0100               	movlb	0	; () banked
 10999  002674  05FC               	decf	_screenMode& (0+255),w,b
 11000  002676  B4D8               	btfsc	status,2,c
 11001                           
 11002                           ; BSR set to: 0
 11003  002678  A4F2               	btfss	intcon,2,c	;volatile
 11004  00267A  D038               	goto	i2l5595
 11005                           
 11006                           ; BSR set to: 0
 11007                           ;main.c: 959: TMR0IF = 0;
 11008  00267C  94F2               	bcf	intcon,2,c	;volatile
 11009                           
 11010                           ; BSR set to: 0
 11011                           ;main.c: 960: TMR0 = 55770;
 11012  00267E  0ED9               	movlw	217
 11013  002680  6ED7               	movwf	4055,c	;volatile
 11014  002682  0EDA               	movlw	218
 11015  002684  6ED6               	movwf	4054,c	;volatile
 11016                           
 11017                           ; BSR set to: 0
 11018                           ;main.c: 961: opTimer++;
 11019  002686  2A4A               	incf	_opTimer,f,c
 11020                           
 11021                           ; BSR set to: 0
 11022                           ;main.c: 962: min = opTimer / 60;
 11023  002688  C04A  F001         	movff	_opTimer,i2___awdiv@dividend
 11024  00268C  6A02               	clrf	i2___awdiv@dividend+1,c
 11025  00268E  0E00               	movlw	0
 11026  002690  6E04               	movwf	i2___awdiv@divisor+1,c
 11027  002692  0E3C               	movlw	60
 11028  002694  6E03               	movwf	i2___awdiv@divisor,c
 11029  002696  EC1E  F017         	call	i2___awdiv	;wreg free
 11030  00269A  5001               	movf	?i2___awdiv,w,c
 11031  00269C  0100               	movlb	0	; () banked
 11032  00269E  6FE7               	movwf	_min& (0+255),b
 11033                           
 11034                           ; BSR set to: 0
 11035                           ;main.c: 963: sec = opTimer % 60;
 11036  0026A0  C04A  F001         	movff	_opTimer,i2___awmod@dividend
 11037  0026A4  6A02               	clrf	i2___awmod@dividend+1,c
 11038  0026A6  0E00               	movlw	0
 11039  0026A8  6E04               	movwf	i2___awmod@divisor+1,c
 11040  0026AA  0E3C               	movlw	60
 11041  0026AC  6E03               	movwf	i2___awmod@divisor,c
 11042  0026AE  EC60  F017         	call	i2___awmod	;wreg free
 11043  0026B2  5001               	movf	?i2___awmod,w,c
 11044  0026B4  0100               	movlb	0	; () banked
 11045  0026B6  6FED               	movwf	_sec& (0+255),b
 11046                           
 11047                           ; BSR set to: 0
 11048                           ;main.c: 967: if (opTimer >= 180)
 11049  0026B8  0EB3               	movlw	179
 11050  0026BA  644A               	cpfsgt	_opTimer,c
 11051  0026BC  D002               	goto	i2l5581
 11052                           
 11053                           ; BSR set to: 0
 11054                           ;main.c: 968: stopOperation();
 11055  0026BE  EC8C  F011         	call	i2_stopOperation	;wreg free
 11056  0026C2                     i2l5581:
 11057                           
 11058                           ;main.c: 970: if (!sorting){
 11059  0026C2  504C               	movf	_sorting,w,c
 11060  0026C4  A4D8               	btfss	status,2,c
 11061  0026C6  D010               	goto	i2l5593
 11062                           
 11063                           ;main.c: 971: if (ADRES > 50)
 11064  0026C8  50C4               	movf	4036,w,c	;volatile
 11065  0026CA  E104               	bnz	i2u507_40
 11066  0026CC  0E33               	movlw	51
 11067  0026CE  5CC3               	subwf	4035,w,c	;volatile
 11068  0026D0  A0D8               	btfss	status,0,c
 11069  0026D2  D002               	goto	i2l5587
 11070  0026D4                     i2u507_40:
 11071                           
 11072                           ;main.c: 972: doneTimer++;
 11073  0026D4  2A49               	incf	_doneTimer,f,c
 11074  0026D6  D002               	goto	i2l5589
 11075  0026D8                     i2l5587:
 11076                           
 11077                           ;main.c: 973: else
 11078                           ;main.c: 974: doneTimer = 0;
 11079  0026D8  0E00               	movlw	0
 11080  0026DA  6E49               	movwf	_doneTimer,c
 11081  0026DC                     i2l5589:
 11082                           
 11083                           ;main.c: 975: if (doneTimer >= 10)
 11084  0026DC  0E09               	movlw	9
 11085  0026DE  6449               	cpfsgt	_doneTimer,c
 11086  0026E0  D005               	goto	i2l5595
 11087                           
 11088                           ;main.c: 976: stopOperation();
 11089  0026E2  EC8C  F011         	call	i2_stopOperation	;wreg free
 11090                           
 11091                           ;main.c: 978: }
 11092  0026E6  D002               	goto	i2l5595
 11093  0026E8                     i2l5593:
 11094                           
 11095                           ;main.c: 979: else
 11096                           ;main.c: 980: doneTimer = 0;
 11097  0026E8  0E00               	movlw	0
 11098  0026EA  6E49               	movwf	_doneTimer,c
 11099  0026EC                     i2l5595:
 11100                           
 11101                           ;main.c: 981: }
 11102                           ;main.c: 982: if (screenMode == 1 && TMR1IF){
 11103  0026EC  0100               	movlb	0	; () banked
 11104  0026EE  05FC               	decf	_screenMode& (0+255),w,b
 11105  0026F0  B4D8               	btfsc	status,2,c
 11106                           
 11107                           ; BSR set to: 0
 11108  0026F2  A09E               	btfss	3998,0,c	;volatile
 11109  0026F4  D0BD               	goto	i2l589
 11110                           
 11111                           ; BSR set to: 0
 11112                           ;main.c: 983: TMR1IF = 0;
 11113  0026F6  909E               	bcf	3998,0,c	;volatile
 11114                           
 11115                           ; BSR set to: 0
 11116                           ;main.c: 984: TMR1 = 60535;
 11117  0026F8  0EEC               	movlw	236
 11118  0026FA  6ECF               	movwf	4047,c	;volatile
 11119  0026FC  0E77               	movlw	119
 11120  0026FE  6ECE               	movwf	4046,c	;volatile
 11121                           
 11122                           ; BSR set to: 0
 11123                           ;main.c: 985: if (count_2ms)
 11124  002700  5047               	movf	_count_2ms,w,c
 11125  002702  1048               	iorwf	_count_2ms+1,w,c
 11126  002704  B4D8               	btfsc	status,2,c
 11127  002706  D003               	goto	i2l559
 11128                           
 11129                           ; BSR set to: 0
 11130                           ;main.c: 986: count_2ms--;
 11131  002708  0647               	decf	_count_2ms,f,c
 11132  00270A  A0D8               	btfss	status,0,c
 11133  00270C  0648               	decf	_count_2ms+1,f,c
 11134  00270E                     i2l559:
 11135                           
 11136                           ; BSR set to: 0
 11137                           ;main.c: 987: solOnTimer++;
 11138  00270E  2A4B               	incf	_solOnTimer,f,c
 11139                           
 11140                           ; BSR set to: 0
 11141                           ;main.c: 988: if (solOnTimer >= 150){
 11142  002710  0E95               	movlw	149
 11143  002712  644B               	cpfsgt	_solOnTimer,c
 11144  002714  D00D               	goto	i2l5613
 11145                           
 11146                           ; BSR set to: 0
 11147                           ;main.c: 989: solOnTimer = 0;
 11148  002716  0E00               	movlw	0
 11149  002718  6E4B               	movwf	_solOnTimer,c
 11150                           
 11151                           ; BSR set to: 0
 11152                           ;main.c: 990: LATBbits.LB0 = !LATBbits.LB0;;
 11153  00271A  B08A               	btfsc	3978,0,c	;volatile
 11154  00271C  D003               	goto	i2u513_40
 11155  00271E  6A21               	clrf	??_ISR& (0+255),c
 11156  002720  2A21               	incf	??_ISR& (0+255),f,c
 11157  002722  D001               	goto	i2u514_48
 11158  002724                     i2u513_40:
 11159  002724  6A21               	clrf	??_ISR& (0+255),c
 11160  002726                     i2u514_48:
 11161  002726  508A               	movf	3978,w,c	;volatile
 11162  002728  1821               	xorwf	??_ISR,w,c
 11163  00272A  0BFE               	andlw	-2
 11164  00272C  1821               	xorwf	??_ISR,w,c
 11165  00272E  6E8A               	movwf	3978,c	;volatile
 11166  002730                     i2l5613:
 11167                           
 11168                           ;main.c: 991: }
 11169                           ;main.c: 992: if (plat1Left){
 11170  002730  0100               	movlb	0	; () banked
 11171  002732  51D2               	movf	_plat1Left& (0+255),w,b
 11172  002734  0100               	movlb	0	; () banked
 11173  002736  11D3               	iorwf	(_plat1Left+1)& (0+255),w,b
 11174  002738  B4D8               	btfsc	status,2,c
 11175  00273A  D022               	goto	i2l5639
 11176                           
 11177                           ; BSR set to: 0
 11178                           ;main.c: 993: if (step1 == 1){
 11179  00273C  044D               	decf	_step1,w,c
 11180  00273E  A4D8               	btfss	status,2,c
 11181  002740  D002               	goto	i2l5619
 11182                           
 11183                           ; BSR set to: 0
 11184                           ;main.c: 994: LATCbits.LC5 = 1;;
 11185  002742  8A8B               	bsf	3979,5,c	;volatile
 11186                           
 11187                           ;main.c: 995: LATCbits.LC6 = 0;;
 11188  002744  9C8B               	bcf	3979,6,c	;volatile
 11189  002746                     i2l5619:
 11190                           
 11191                           ; BSR set to: 0
 11192                           ;main.c: 996: }
 11193                           ;main.c: 997: if (step1 == 2){
 11194  002746  0E02               	movlw	2
 11195  002748  184D               	xorwf	_step1,w,c
 11196  00274A  A4D8               	btfss	status,2,c
 11197  00274C  D002               	goto	i2l5623
 11198                           
 11199                           ; BSR set to: 0
 11200                           ;main.c: 998: LATCbits.LC1 = 0;;
 11201  00274E  928B               	bcf	3979,1,c	;volatile
 11202                           
 11203                           ;main.c: 999: LATCbits.LC2 = 1;;
 11204  002750  848B               	bsf	3979,2,c	;volatile
 11205  002752                     i2l5623:
 11206                           
 11207                           ; BSR set to: 0
 11208                           ;main.c: 1000: }
 11209                           ;main.c: 1001: if (step1 == 3){
 11210  002752  0E03               	movlw	3
 11211  002754  184D               	xorwf	_step1,w,c
 11212  002756  A4D8               	btfss	status,2,c
 11213  002758  D002               	goto	i2l5627
 11214                           
 11215                           ; BSR set to: 0
 11216                           ;main.c: 1002: LATCbits.LC5 = 0;;
 11217  00275A  9A8B               	bcf	3979,5,c	;volatile
 11218                           
 11219                           ;main.c: 1003: LATCbits.LC6 = 1;;
 11220  00275C  8C8B               	bsf	3979,6,c	;volatile
 11221  00275E                     i2l5627:
 11222                           
 11223                           ; BSR set to: 0
 11224                           ;main.c: 1004: }
 11225                           ;main.c: 1005: if (step1 == 4){
 11226  00275E  0E04               	movlw	4
 11227  002760  184D               	xorwf	_step1,w,c
 11228  002762  A4D8               	btfss	status,2,c
 11229  002764  D002               	goto	i2l5631
 11230                           
 11231                           ; BSR set to: 0
 11232                           ;main.c: 1006: LATCbits.LC1 = 1;;
 11233  002766  828B               	bsf	3979,1,c	;volatile
 11234                           
 11235                           ;main.c: 1007: LATCbits.LC2 = 0;;
 11236  002768  948B               	bcf	3979,2,c	;volatile
 11237  00276A                     i2l5631:
 11238                           
 11239                           ; BSR set to: 0
 11240                           ;main.c: 1008: }
 11241                           ;main.c: 1009: plat1Left--;
 11242  00276A  0100               	movlb	0	; () banked
 11243  00276C  07D2               	decf	_plat1Left& (0+255),f,b
 11244  00276E  A0D8               	btfss	status,0,c
 11245  002770  07D3               	decf	(_plat1Left+1)& (0+255),f,b
 11246                           
 11247                           ; BSR set to: 0
 11248                           ;main.c: 1010: if (step1>=4)
 11249  002772  0E03               	movlw	3
 11250  002774  644D               	cpfsgt	_step1,c
 11251  002776  D003               	goto	i2l5637
 11252                           
 11253                           ; BSR set to: 0
 11254                           ;main.c: 1011: step1 = 1;
 11255  002778  0E01               	movlw	1
 11256  00277A  6E4D               	movwf	_step1,c
 11257  00277C  D001               	goto	i2l5639
 11258  00277E                     i2l5637:
 11259                           
 11260                           ; BSR set to: 0
 11261                           ;main.c: 1012: else
 11262                           ;main.c: 1013: step1++;
 11263  00277E  2A4D               	incf	_step1,f,c
 11264  002780                     i2l5639:
 11265                           
 11266                           ; BSR set to: 0
 11267                           ;main.c: 1014: }
 11268                           ;main.c: 1015: if (plat1Right){
 11269  002780  0100               	movlb	0	; () banked
 11270  002782  51D4               	movf	_plat1Right& (0+255),w,b
 11271  002784  0100               	movlb	0	; () banked
 11272  002786  11D5               	iorwf	(_plat1Right+1)& (0+255),w,b
 11273  002788  B4D8               	btfsc	status,2,c
 11274  00278A  D022               	goto	i2l5665
 11275                           
 11276                           ; BSR set to: 0
 11277                           ;main.c: 1016: if (step1 == 4){
 11278  00278C  0E04               	movlw	4
 11279  00278E  184D               	xorwf	_step1,w,c
 11280  002790  A4D8               	btfss	status,2,c
 11281  002792  D002               	goto	i2l5645
 11282                           
 11283                           ; BSR set to: 0
 11284                           ;main.c: 1017: LATCbits.LC5 = 0;;
 11285  002794  9A8B               	bcf	3979,5,c	;volatile
 11286                           
 11287                           ;main.c: 1018: LATCbits.LC6 = 1;;
 11288  002796  8C8B               	bsf	3979,6,c	;volatile
 11289  002798                     i2l5645:
 11290                           
 11291                           ; BSR set to: 0
 11292                           ;main.c: 1019: }
 11293                           ;main.c: 1020: if (step1 == 3){
 11294  002798  0E03               	movlw	3
 11295  00279A  184D               	xorwf	_step1,w,c
 11296  00279C  A4D8               	btfss	status,2,c
 11297  00279E  D002               	goto	i2l5649
 11298                           
 11299                           ; BSR set to: 0
 11300                           ;main.c: 1021: LATCbits.LC1 = 0;;
 11301  0027A0  928B               	bcf	3979,1,c	;volatile
 11302                           
 11303                           ;main.c: 1022: LATCbits.LC2 = 1;;
 11304  0027A2  848B               	bsf	3979,2,c	;volatile
 11305  0027A4                     i2l5649:
 11306                           
 11307                           ; BSR set to: 0
 11308                           ;main.c: 1023: }
 11309                           ;main.c: 1024: if (step1 == 2){
 11310  0027A4  0E02               	movlw	2
 11311  0027A6  184D               	xorwf	_step1,w,c
 11312  0027A8  A4D8               	btfss	status,2,c
 11313  0027AA  D002               	goto	i2l5653
 11314                           
 11315                           ; BSR set to: 0
 11316                           ;main.c: 1025: LATCbits.LC5 = 1;;
 11317  0027AC  8A8B               	bsf	3979,5,c	;volatile
 11318                           
 11319                           ;main.c: 1026: LATCbits.LC6 = 0;;
 11320  0027AE  9C8B               	bcf	3979,6,c	;volatile
 11321  0027B0                     i2l5653:
 11322                           
 11323                           ; BSR set to: 0
 11324                           ;main.c: 1027: }
 11325                           ;main.c: 1028: if (step1 == 1){
 11326  0027B0  044D               	decf	_step1,w,c
 11327  0027B2  A4D8               	btfss	status,2,c
 11328  0027B4  D002               	goto	i2l5657
 11329                           
 11330                           ; BSR set to: 0
 11331                           ;main.c: 1029: LATCbits.LC1 = 1;;
 11332  0027B6  828B               	bsf	3979,1,c	;volatile
 11333                           
 11334                           ;main.c: 1030: LATCbits.LC2 = 0;;
 11335  0027B8  948B               	bcf	3979,2,c	;volatile
 11336  0027BA                     i2l5657:
 11337                           
 11338                           ; BSR set to: 0
 11339                           ;main.c: 1031: }
 11340                           ;main.c: 1032: plat1Right--;
 11341  0027BA  0100               	movlb	0	; () banked
 11342  0027BC  07D4               	decf	_plat1Right& (0+255),f,b
 11343  0027BE  A0D8               	btfss	status,0,c
 11344  0027C0  07D5               	decf	(_plat1Right+1)& (0+255),f,b
 11345                           
 11346                           ; BSR set to: 0
 11347                           ;main.c: 1033: if (step1<=1)
 11348  0027C2  0E02               	movlw	2
 11349  0027C4  604D               	cpfslt	_step1,c
 11350  0027C6  D003               	goto	i2l5663
 11351                           
 11352                           ; BSR set to: 0
 11353                           ;main.c: 1034: step1 = 4;
 11354  0027C8  0E04               	movlw	4
 11355  0027CA  6E4D               	movwf	_step1,c
 11356  0027CC  D001               	goto	i2l5665
 11357  0027CE                     i2l5663:
 11358                           
 11359                           ; BSR set to: 0
 11360                           ;main.c: 1035: else
 11361                           ;main.c: 1036: step1--;
 11362  0027CE  064D               	decf	_step1,f,c
 11363  0027D0                     i2l5665:
 11364                           
 11365                           ; BSR set to: 0
 11366                           ;main.c: 1037: }
 11367                           ;main.c: 1038: if (plat2Left){
 11368  0027D0  0100               	movlb	0	; () banked
 11369  0027D2  51D6               	movf	_plat2Left& (0+255),w,b
 11370  0027D4  0100               	movlb	0	; () banked
 11371  0027D6  11D7               	iorwf	(_plat2Left+1)& (0+255),w,b
 11372  0027D8  B4D8               	btfsc	status,2,c
 11373  0027DA  D022               	goto	i2l5691
 11374                           
 11375                           ; BSR set to: 0
 11376                           ;main.c: 1039: if (step2 == 1){
 11377  0027DC  044E               	decf	_step2,w,c
 11378  0027DE  A4D8               	btfss	status,2,c
 11379  0027E0  D002               	goto	i2l5671
 11380                           
 11381                           ; BSR set to: 0
 11382                           ;main.c: 1040: LATAbits.LA4 = 1;;
 11383  0027E2  8889               	bsf	3977,4,c	;volatile
 11384                           
 11385                           ;main.c: 1041: LATEbits.LE1 = 0;;
 11386  0027E4  928D               	bcf	3981,1,c	;volatile
 11387  0027E6                     i2l5671:
 11388                           
 11389                           ; BSR set to: 0
 11390                           ;main.c: 1042: }
 11391                           ;main.c: 1043: if (step2 == 2){
 11392  0027E6  0E02               	movlw	2
 11393  0027E8  184E               	xorwf	_step2,w,c
 11394  0027EA  A4D8               	btfss	status,2,c
 11395  0027EC  D002               	goto	i2l5675
 11396                           
 11397                           ; BSR set to: 0
 11398                           ;main.c: 1044: LATCbits.LC0 = 0;;
 11399  0027EE  908B               	bcf	3979,0,c	;volatile
 11400                           
 11401                           ;main.c: 1045: LATEbits.LE2 = 1;;
 11402  0027F0  848D               	bsf	3981,2,c	;volatile
 11403  0027F2                     i2l5675:
 11404                           
 11405                           ; BSR set to: 0
 11406                           ;main.c: 1046: }
 11407                           ;main.c: 1047: if (step2 == 3){
 11408  0027F2  0E03               	movlw	3
 11409  0027F4  184E               	xorwf	_step2,w,c
 11410  0027F6  A4D8               	btfss	status,2,c
 11411  0027F8  D002               	goto	i2l5679
 11412                           
 11413                           ; BSR set to: 0
 11414                           ;main.c: 1048: LATAbits.LA4 = 0;;
 11415  0027FA  9889               	bcf	3977,4,c	;volatile
 11416                           
 11417                           ;main.c: 1049: LATEbits.LE1 = 1;;
 11418  0027FC  828D               	bsf	3981,1,c	;volatile
 11419  0027FE                     i2l5679:
 11420                           
 11421                           ; BSR set to: 0
 11422                           ;main.c: 1050: }
 11423                           ;main.c: 1051: if (step2 == 4){
 11424  0027FE  0E04               	movlw	4
 11425  002800  184E               	xorwf	_step2,w,c
 11426  002802  A4D8               	btfss	status,2,c
 11427  002804  D002               	goto	i2l5683
 11428                           
 11429                           ; BSR set to: 0
 11430                           ;main.c: 1052: LATCbits.LC0 = 1;;
 11431  002806  808B               	bsf	3979,0,c	;volatile
 11432                           
 11433                           ;main.c: 1053: LATEbits.LE2 = 0;;
 11434  002808  948D               	bcf	3981,2,c	;volatile
 11435  00280A                     i2l5683:
 11436                           
 11437                           ; BSR set to: 0
 11438                           ;main.c: 1054: }
 11439                           ;main.c: 1055: plat2Left--;
 11440  00280A  0100               	movlb	0	; () banked
 11441  00280C  07D6               	decf	_plat2Left& (0+255),f,b
 11442  00280E  A0D8               	btfss	status,0,c
 11443  002810  07D7               	decf	(_plat2Left+1)& (0+255),f,b
 11444                           
 11445                           ; BSR set to: 0
 11446                           ;main.c: 1056: if (step2>=4)
 11447  002812  0E03               	movlw	3
 11448  002814  644E               	cpfsgt	_step2,c
 11449  002816  D003               	goto	i2l5689
 11450                           
 11451                           ; BSR set to: 0
 11452                           ;main.c: 1057: step2 = 1;
 11453  002818  0E01               	movlw	1
 11454  00281A  6E4E               	movwf	_step2,c
 11455  00281C  D001               	goto	i2l5691
 11456  00281E                     i2l5689:
 11457                           
 11458                           ; BSR set to: 0
 11459                           ;main.c: 1058: else
 11460                           ;main.c: 1059: step2++;
 11461  00281E  2A4E               	incf	_step2,f,c
 11462  002820                     i2l5691:
 11463                           
 11464                           ; BSR set to: 0
 11465                           ;main.c: 1060: }
 11466                           ;main.c: 1061: if (plat2Right){
 11467  002820  0100               	movlb	0	; () banked
 11468  002822  51D8               	movf	_plat2Right& (0+255),w,b
 11469  002824  0100               	movlb	0	; () banked
 11470  002826  11D9               	iorwf	(_plat2Right+1)& (0+255),w,b
 11471  002828  B4D8               	btfsc	status,2,c
 11472  00282A  D022               	goto	i2l589
 11473                           
 11474                           ; BSR set to: 0
 11475                           ;main.c: 1062: if (step2 == 4){
 11476  00282C  0E04               	movlw	4
 11477  00282E  184E               	xorwf	_step2,w,c
 11478  002830  A4D8               	btfss	status,2,c
 11479  002832  D002               	goto	i2l5697
 11480                           
 11481                           ; BSR set to: 0
 11482                           ;main.c: 1063: LATAbits.LA4 = 0;;
 11483  002834  9889               	bcf	3977,4,c	;volatile
 11484                           
 11485                           ;main.c: 1064: LATEbits.LE1 = 1;;
 11486  002836  828D               	bsf	3981,1,c	;volatile
 11487  002838                     i2l5697:
 11488                           
 11489                           ; BSR set to: 0
 11490                           ;main.c: 1065: }
 11491                           ;main.c: 1066: if (step2 == 3){
 11492  002838  0E03               	movlw	3
 11493  00283A  184E               	xorwf	_step2,w,c
 11494  00283C  A4D8               	btfss	status,2,c
 11495  00283E  D002               	goto	i2l5701
 11496                           
 11497                           ; BSR set to: 0
 11498                           ;main.c: 1067: LATCbits.LC0 = 0;;
 11499  002840  908B               	bcf	3979,0,c	;volatile
 11500                           
 11501                           ;main.c: 1068: LATEbits.LE2 = 1;;
 11502  002842  848D               	bsf	3981,2,c	;volatile
 11503  002844                     i2l5701:
 11504                           
 11505                           ; BSR set to: 0
 11506                           ;main.c: 1069: }
 11507                           ;main.c: 1070: if (step2 == 2){
 11508  002844  0E02               	movlw	2
 11509  002846  184E               	xorwf	_step2,w,c
 11510  002848  A4D8               	btfss	status,2,c
 11511  00284A  D002               	goto	i2l5705
 11512                           
 11513                           ; BSR set to: 0
 11514                           ;main.c: 1071: LATAbits.LA4 = 1;;
 11515  00284C  8889               	bsf	3977,4,c	;volatile
 11516                           
 11517                           ;main.c: 1072: LATEbits.LE1 = 0;;
 11518  00284E  928D               	bcf	3981,1,c	;volatile
 11519  002850                     i2l5705:
 11520                           
 11521                           ; BSR set to: 0
 11522                           ;main.c: 1073: }
 11523                           ;main.c: 1074: if (step2 == 1){
 11524  002850  044E               	decf	_step2,w,c
 11525  002852  A4D8               	btfss	status,2,c
 11526  002854  D002               	goto	i2l5709
 11527                           
 11528                           ; BSR set to: 0
 11529                           ;main.c: 1075: LATCbits.LC0 = 1;;
 11530  002856  808B               	bsf	3979,0,c	;volatile
 11531                           
 11532                           ;main.c: 1076: LATEbits.LE2 = 0;;
 11533  002858  948D               	bcf	3981,2,c	;volatile
 11534  00285A                     i2l5709:
 11535                           
 11536                           ; BSR set to: 0
 11537                           ;main.c: 1077: }
 11538                           ;main.c: 1078: plat2Right--;
 11539  00285A  0100               	movlb	0	; () banked
 11540  00285C  07D8               	decf	_plat2Right& (0+255),f,b
 11541  00285E  A0D8               	btfss	status,0,c
 11542  002860  07D9               	decf	(_plat2Right+1)& (0+255),f,b
 11543                           
 11544                           ; BSR set to: 0
 11545                           ;main.c: 1079: if (step2<=1)
 11546  002862  0E02               	movlw	2
 11547  002864  604E               	cpfslt	_step2,c
 11548  002866  D003               	goto	i2l5715
 11549                           
 11550                           ; BSR set to: 0
 11551                           ;main.c: 1080: step2 = 4;
 11552  002868  0E04               	movlw	4
 11553  00286A  6E4E               	movwf	_step2,c
 11554  00286C  D001               	goto	i2l589
 11555  00286E                     i2l5715:
 11556                           
 11557                           ; BSR set to: 0
 11558                           ;main.c: 1081: else
 11559                           ;main.c: 1082: step2--;
 11560  00286E  064E               	decf	_step2,f,c
 11561  002870                     i2l589:
 11562                           
 11563                           ; BSR set to: 0
 11564  002870  C02F  FFF5         	movff	??_ISR+14,tablat
 11565  002874  C02E  FFF8         	movff	??_ISR+13,tblptru
 11566  002878  C02D  FFF7         	movff	??_ISR+12,tblptrh
 11567  00287C  C02C  FFF6         	movff	??_ISR+11,tblptrl
 11568  002880  C02B  FFF4         	movff	??_ISR+10,prodh
 11569  002884  C02A  FFF3         	movff	??_ISR+9,prodl
 11570  002888  C029  FFDA         	movff	??_ISR+8,fsr2h
 11571  00288C  C028  FFD9         	movff	??_ISR+7,fsr2l
 11572  002890  C027  FFE2         	movff	??_ISR+6,fsr1h
 11573  002894  C026  FFE1         	movff	??_ISR+5,fsr1l
 11574  002898  C025  FFEA         	movff	??_ISR+4,fsr0h
 11575  00289C  C024  FFE9         	movff	??_ISR+3,fsr0l
 11576  0028A0  C023  FFFB         	movff	??_ISR+2,pclatu
 11577  0028A4  C022  FFFA         	movff	??_ISR+1,pclath
 11578  0028A8  924F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 11579  0028AA  0011               	retfie		f
 11580  0028AC                     __end_of_ISR:
 11581                           	opt stack 0
 11582                           pclatu	equ	0xFFB
 11583                           pclath	equ	0xFFA
 11584                           tblptru	equ	0xFF8
 11585                           tblptrh	equ	0xFF7
 11586                           tblptrl	equ	0xFF6
 11587                           tablat	equ	0xFF5
 11588                           prodh	equ	0xFF4
 11589                           prodl	equ	0xFF3
 11590                           intcon	equ	0xFF2
 11591                           intcon2	equ	0xFF1
 11592                           intcon3	equ	0xFF0
 11593                           postinc0	equ	0xFEE
 11594                           fsr0h	equ	0xFEA
 11595                           fsr0l	equ	0xFE9
 11596                           wreg	equ	0xFE8
 11597                           postdec1	equ	0xFE5
 11598                           plusw1	equ	0xFE3
 11599                           fsr1h	equ	0xFE2
 11600                           fsr1l	equ	0xFE1
 11601                           indf2	equ	0xFDF
 11602                           postinc2	equ	0xFDE
 11603                           postdec2	equ	0xFDD
 11604                           plusw2	equ	0xFDB
 11605                           fsr2h	equ	0xFDA
 11606                           fsr2l	equ	0xFD9
 11607                           status	equ	0xFD8
 11608                           
 11609 ;; *************** function _keypressed *****************
 11610 ;; Defined at:
 11611 ;;		line 428 in file "../main.c"
 11612 ;; Parameters:    Size  Location     Type
 11613 ;;  left            1    wreg     unsigned char 
 11614 ;;  right           1   28[COMRAM] unsigned char 
 11615 ;;  key             1   29[COMRAM] unsigned char 
 11616 ;; Auto vars:     Size  Location     Type
 11617 ;;  left            1   30[COMRAM] unsigned char 
 11618 ;;  i               1   31[COMRAM] unsigned char 
 11619 ;; Return value:  Size  Location     Type
 11620 ;;                  1    wreg      void 
 11621 ;; Registers used:
 11622 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11623 ;; Tracked objects:
 11624 ;;		On entry : 0/0
 11625 ;;		On exit  : 0/0
 11626 ;;		Unchanged: 0/0
 11627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11628 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11629 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11630 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11631 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11632 ;;Total ram usage:        4 bytes
 11633 ;; Hardware stack levels used:    1
 11634 ;; Hardware stack levels required when called:    3
 11635 ;; This function calls:
 11636 ;;		i2_I2C_Master_Read
 11637 ;;		i2_I2C_Master_Start
 11638 ;;		i2_I2C_Master_Stop
 11639 ;;		i2_I2C_Master_Write
 11640 ;;		i2_lcdInst
 11641 ;;		i2_printf
 11642 ;;		i2_stopOperation
 11643 ;; This function is called by:
 11644 ;;		_ISR
 11645 ;; This function uses a non-reentrant model
 11646 ;;
 11647                           
 11648                           	psect	text33
 11649  002B20                     __ptext33:
 11650                           	opt stack 0
 11651  002B20                     _keypressed:
 11652                           	opt stack 22
 11653                           
 11654                           ; BSR set to: 0
 11655                           ;incstack = 0
 11656                           ;keypressed@left stored from wreg
 11657  002B20  6E1F               	movwf	keypressed@left,c
 11658                           
 11659                           ;main.c: 429: if (key == '*'){
 11660  002B22  0E2A               	movlw	42
 11661  002B24  181E               	xorwf	keypressed@key,w,c
 11662  002B26  A4D8               	btfss	status,2,c
 11663  002B28  D053               	goto	i2l5073
 11664                           
 11665                           ;main.c: 431: if(screenMode == 2){
 11666  002B2A  0E02               	movlw	2
 11667  002B2C  0100               	movlb	0	; () banked
 11668  002B2E  19FC               	xorwf	_screenMode& (0+255),w,b
 11669  002B30  A4D8               	btfss	status,2,c
 11670  002B32  D046               	goto	i2l5069
 11671                           
 11672                           ; BSR set to: 0
 11673                           ;main.c: 432: screenMode = 1;
 11674  002B34  0E01               	movlw	1
 11675  002B36  0100               	movlb	0	; () banked
 11676  002B38  6FFC               	movwf	_screenMode& (0+255),b
 11677                           
 11678                           ; BSR set to: 0
 11679                           ;main.c: 433: T0CONbits.TMR0ON = 1;
 11680  002B3A  8ED5               	bsf	4053,7,c	;volatile
 11681                           
 11682                           ; BSR set to: 0
 11683                           ;main.c: 434: T1CONbits.TMR1ON = 1;
 11684  002B3C  80CD               	bsf	4045,0,c	;volatile
 11685                           
 11686                           ;main.c: 435: startGear = 1;
 11687  002B3E  0E01               	movlw	1
 11688  002B40  0100               	movlb	0	; () banked
 11689  002B42  6FEE               	movwf	_startGear& (0+255),b
 11690                           
 11691                           ; BSR set to: 0
 11692                           ;main.c: 438: I2C_Master_Start();
 11693  002B44  EC91  F01A         	call	i2_I2C_Master_Start	;wreg free
 11694                           
 11695                           ;main.c: 439: I2C_Master_Write(0b11010000);
 11696  002B48  0E00               	movlw	0
 11697  002B4A  6E03               	movwf	i2I2C_Master_Write@d+1,c
 11698  002B4C  0ED0               	movlw	208
 11699  002B4E  6E02               	movwf	i2I2C_Master_Write@d,c
 11700  002B50  EC7C  F01A         	call	i2_I2C_Master_Write	;wreg free
 11701                           
 11702                           ;main.c: 440: I2C_Master_Write(0x00);
 11703  002B54  0E00               	movlw	0
 11704  002B56  6E03               	movwf	i2I2C_Master_Write@d+1,c
 11705  002B58  0E00               	movlw	0
 11706  002B5A  6E02               	movwf	i2I2C_Master_Write@d,c
 11707  002B5C  EC7C  F01A         	call	i2_I2C_Master_Write	;wreg free
 11708                           
 11709                           ;main.c: 441: I2C_Master_Stop();
 11710  002B60  EC8D  F01A         	call	i2_I2C_Master_Stop	;wreg free
 11711                           
 11712                           ;main.c: 443: I2C_Master_Start();
 11713  002B64  EC91  F01A         	call	i2_I2C_Master_Start	;wreg free
 11714                           
 11715                           ;main.c: 444: I2C_Master_Write(0b11010001);
 11716  002B68  0E00               	movlw	0
 11717  002B6A  6E03               	movwf	i2I2C_Master_Write@d+1,c
 11718  002B6C  0ED1               	movlw	209
 11719  002B6E  6E02               	movwf	i2I2C_Master_Write@d,c
 11720  002B70  EC7C  F01A         	call	i2_I2C_Master_Write	;wreg free
 11721                           
 11722                           ;main.c: 445: for(unsigned char i=0;i<0x06;i++){
 11723  002B74  0E00               	movlw	0
 11724  002B76  6E20               	movwf	keypressed@i,c
 11725  002B78                     i2l5053:
 11726  002B78  0E05               	movlw	5
 11727  002B7A  6420               	cpfsgt	keypressed@i,c
 11728  002B7C  D001               	goto	i2l5057
 11729  002B7E  D00E               	goto	i2l5063
 11730  002B80                     i2l5057:
 11731                           
 11732                           ;main.c: 446: lastRunRTC[i] = I2C_Master_Read(1);
 11733  002B80  5020               	movf	keypressed@i,w,c
 11734  002B82  0D01               	mullw	1
 11735  002B84  0EC4               	movlw	low _lastRunRTC
 11736  002B86  24F3               	addwf	prodl,w,c
 11737  002B88  6ED9               	movwf	fsr2l,c
 11738  002B8A  0E00               	movlw	high _lastRunRTC
 11739  002B8C  20F4               	addwfc	prodh,w,c
 11740  002B8E  6EDA               	movwf	fsr2h,c
 11741  002B90  0E01               	movlw	1
 11742  002B92  ECC0  F019         	call	i2_I2C_Master_Read
 11743  002B96  6EDF               	movwf	indf2,c
 11744  002B98  2A20               	incf	keypressed@i,f,c
 11745  002B9A  D7EE               	goto	i2l5053
 11746  002B9C                     i2l5063:
 11747                           
 11748                           ;main.c: 447: }
 11749                           ;main.c: 448: lastRunRTC[6] = I2C_Master_Read(0);
 11750  002B9C  0E00               	movlw	0
 11751  002B9E  ECC0  F019         	call	i2_I2C_Master_Read
 11752  002BA2  0100               	movlb	0	; () banked
 11753  002BA4  6FCA               	movwf	(_lastRunRTC+6)& (0+255),b
 11754                           
 11755                           ;main.c: 449: I2C_Master_Stop();
 11756  002BA6  EC8D  F01A         	call	i2_I2C_Master_Stop	;wreg free
 11757                           
 11758                           ;main.c: 451: lcdInst(0b10000000);;
 11759  002BAA  0E80               	movlw	128
 11760  002BAC  EC71  F01A         	call	i2_lcdInst
 11761                           
 11762                           ;main.c: 452: printf("RUNNING: 00:00  ");
 11763  002BB0  0E45               	movlw	low STR_34
 11764  002BB2  6E0D               	movwf	i2printf@f,c
 11765  002BB4  0EFF               	movlw	high STR_34
 11766  002BB6  6E0E               	movwf	i2printf@f+1,c
 11767  002BB8  EC81  F00E         	call	i2_printf	;wreg free
 11768                           
 11769                           ;main.c: 453: LATBbits.LB0 = 1;;
 11770  002BBC  808A               	bsf	3978,0,c	;volatile
 11771                           
 11772                           ;main.c: 454: }
 11773  002BBE  0012               	return	
 11774  002BC0                     i2l5069:
 11775                           
 11776                           ;main.c: 455: else if (screenMode == 0)
 11777  002BC0  0100               	movlb	0	; () banked
 11778  002BC2  51FC               	movf	_screenMode& (0+255),w,b
 11779  002BC4  A4D8               	btfss	status,2,c
 11780  002BC6  0012               	return	
 11781                           
 11782                           ; BSR set to: 0
 11783                           ;main.c: 456: screenMode = 2;
 11784  002BC8  0E02               	movlw	2
 11785  002BCA  0100               	movlb	0	; () banked
 11786  002BCC  6FFC               	movwf	_screenMode& (0+255),b
 11787                           
 11788                           ; BSR set to: 0
 11789                           ;main.c: 457: }
 11790                           
 11791                           ; BSR set to: 0
 11792  002BCE  0012               	return	
 11793  002BD0                     i2l5073:
 11794                           
 11795                           ;main.c: 458: else if (screenMode == 1){
 11796  002BD0  0100               	movlb	0	; () banked
 11797  002BD2  05FC               	decf	_screenMode& (0+255),w,b
 11798  002BD4  A4D8               	btfss	status,2,c
 11799  002BD6  D007               	goto	i2l5079
 11800                           
 11801                           ; BSR set to: 0
 11802                           ;main.c: 459: if (key == '#')
 11803  002BD8  0E23               	movlw	35
 11804  002BDA  181E               	xorwf	keypressed@key,w,c
 11805  002BDC  A4D8               	btfss	status,2,c
 11806  002BDE  0012               	return	
 11807                           
 11808                           ; BSR set to: 0
 11809                           ;main.c: 461: stopOperation();
 11810  002BE0  EC8C  F011         	call	i2_stopOperation	;wreg free
 11811                           
 11812                           ;main.c: 462: }
 11813  002BE4  0012               	return	
 11814  002BE6                     i2l5079:
 11815                           
 11816                           ;main.c: 463: else if (screenMode != 0){
 11817  002BE6  0100               	movlb	0	; () banked
 11818  002BE8  51FC               	movf	_screenMode& (0+255),w,b
 11819  002BEA  B4D8               	btfsc	status,2,c
 11820  002BEC  0012               	return	
 11821                           
 11822                           ; BSR set to: 0
 11823                           ;main.c: 464: if (key == right){
 11824  002BEE  501D               	movf	keypressed@right,w,c
 11825  002BF0  181E               	xorwf	keypressed@key,w,c
 11826  002BF2  A4D8               	btfss	status,2,c
 11827  002BF4  D00C               	goto	i2l5089
 11828                           
 11829                           ; BSR set to: 0
 11830                           ;main.c: 465: if (screenMode == 2)
 11831  002BF6  0E02               	movlw	2
 11832  002BF8  0100               	movlb	0	; () banked
 11833  002BFA  19FC               	xorwf	_screenMode& (0+255),w,b
 11834  002BFC  A4D8               	btfss	status,2,c
 11835  002BFE  D004               	goto	i2l5087
 11836                           
 11837                           ; BSR set to: 0
 11838                           ;main.c: 466: screenMode = 15;
 11839  002C00  0E0F               	movlw	15
 11840  002C02  0100               	movlb	0	; () banked
 11841  002C04  6FFC               	movwf	_screenMode& (0+255),b
 11842  002C06  0012               	return	
 11843  002C08                     i2l5087:
 11844                           
 11845                           ; BSR set to: 0
 11846                           ;main.c: 467: else
 11847                           ;main.c: 468: screenMode--;
 11848  002C08  0100               	movlb	0	; () banked
 11849  002C0A  07FC               	decf	_screenMode& (0+255),f,b
 11850                           
 11851                           ; BSR set to: 0
 11852                           ;main.c: 469: }
 11853  002C0C  0012               	return	
 11854  002C0E                     i2l5089:
 11855                           
 11856                           ; BSR set to: 0
 11857                           ;main.c: 470: else if (key == left){
 11858  002C0E  501F               	movf	keypressed@left,w,c
 11859  002C10  181E               	xorwf	keypressed@key,w,c
 11860  002C12  A4D8               	btfss	status,2,c
 11861  002C14  0012               	return	
 11862                           
 11863                           ; BSR set to: 0
 11864                           ;main.c: 471: if (screenMode == 15)
 11865  002C16  0E0F               	movlw	15
 11866  002C18  0100               	movlb	0	; () banked
 11867  002C1A  19FC               	xorwf	_screenMode& (0+255),w,b
 11868  002C1C  A4D8               	btfss	status,2,c
 11869  002C1E  D004               	goto	i2l5095
 11870                           
 11871                           ; BSR set to: 0
 11872                           ;main.c: 472: screenMode = 2;
 11873  002C20  0E02               	movlw	2
 11874  002C22  0100               	movlb	0	; () banked
 11875  002C24  6FFC               	movwf	_screenMode& (0+255),b
 11876  002C26  0012               	return	
 11877  002C28                     i2l5095:
 11878                           
 11879                           ; BSR set to: 0
 11880                           ;main.c: 473: else
 11881                           ;main.c: 474: screenMode++;
 11882  002C28  0100               	movlb	0	; () banked
 11883  002C2A  2BFC               	incf	_screenMode& (0+255),f,b
 11884                           
 11885                           ; BSR set to: 0
 11886                           
 11887                           ; BSR set to: 0
 11888                           
 11889                           ; BSR set to: 0
 11890                           
 11891                           ; BSR set to: 0
 11892                           
 11893                           ; BSR set to: 0
 11894  002C2C  0012               	return	
 11895  002C2E                     __end_of_keypressed:
 11896                           	opt stack 0
 11897                           pclatu	equ	0xFFB
 11898                           pclath	equ	0xFFA
 11899                           tblptru	equ	0xFF8
 11900                           tblptrh	equ	0xFF7
 11901                           tblptrl	equ	0xFF6
 11902                           tablat	equ	0xFF5
 11903                           prodh	equ	0xFF4
 11904                           prodl	equ	0xFF3
 11905                           intcon	equ	0xFF2
 11906                           intcon2	equ	0xFF1
 11907                           intcon3	equ	0xFF0
 11908                           postinc0	equ	0xFEE
 11909                           fsr0h	equ	0xFEA
 11910                           fsr0l	equ	0xFE9
 11911                           wreg	equ	0xFE8
 11912                           postdec1	equ	0xFE5
 11913                           plusw1	equ	0xFE3
 11914                           fsr1h	equ	0xFE2
 11915                           fsr1l	equ	0xFE1
 11916                           indf2	equ	0xFDF
 11917                           postinc2	equ	0xFDE
 11918                           postdec2	equ	0xFDD
 11919                           plusw2	equ	0xFDB
 11920                           fsr2h	equ	0xFDA
 11921                           fsr2l	equ	0xFD9
 11922                           status	equ	0xFD8
 11923                           
 11924 ;; *************** function i2_stopOperation *****************
 11925 ;; Defined at:
 11926 ;;		line 487 in file "../main.c"
 11927 ;; Parameters:    Size  Location     Type
 11928 ;;		None
 11929 ;; Auto vars:     Size  Location     Type
 11930 ;;  stopOperatio    2    9[COMRAM] unsigned int 
 11931 ;;  stopOperatio    1    8[COMRAM] unsigned char 
 11932 ;; Return value:  Size  Location     Type
 11933 ;;                  1    wreg      void 
 11934 ;; Registers used:
 11935 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 11936 ;; Tracked objects:
 11937 ;;		On entry : 0/0
 11938 ;;		On exit  : 0/0
 11939 ;;		Unchanged: 0/0
 11940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11941 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11942 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11943 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11944 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11945 ;;Total ram usage:        3 bytes
 11946 ;; Hardware stack levels used:    1
 11947 ;; Hardware stack levels required when called:    1
 11948 ;; This function calls:
 11949 ;;		i2_Eeprom_ReadByte
 11950 ;;		i2_Eeprom_WriteByte
 11951 ;;		i2___awdiv
 11952 ;;		i2___awmod
 11953 ;;		i2_next_address
 11954 ;; This function is called by:
 11955 ;;		_keypressed
 11956 ;;		_ISR
 11957 ;; This function uses a non-reentrant model
 11958 ;;
 11959                           
 11960                           	psect	text34
 11961  002318                     __ptext34:
 11962                           	opt stack 0
 11963  002318                     i2_stopOperation:
 11964                           	opt stack 24
 11965                           
 11966                           ;main.c: 488: T0CONbits.TMR0ON = 0;
 11967                           
 11968                           ;incstack = 0
 11969  002318  9ED5               	bcf	4053,7,c	;volatile
 11970                           
 11971                           ;main.c: 489: T1CONbits.TMR1ON = 0;
 11972  00231A  90CD               	bcf	4045,0,c	;volatile
 11973                           
 11974                           ;main.c: 490: TMR0 = 55770;
 11975  00231C  0ED9               	movlw	217
 11976  00231E  6ED7               	movwf	4055,c	;volatile
 11977  002320  0EDA               	movlw	218
 11978  002322  6ED6               	movwf	4054,c	;volatile
 11979                           
 11980                           ;main.c: 491: TMR1 = 60535;
 11981  002324  0EEC               	movlw	236
 11982  002326  6ECF               	movwf	4047,c	;volatile
 11983  002328  0E77               	movlw	119
 11984  00232A  6ECE               	movwf	4046,c	;volatile
 11985                           
 11986                           ;main.c: 493: num9V = count9V;
 11987  00232C  C0E2  F0E8         	movff	_count9V,_num9V
 11988                           
 11989                           ;main.c: 494: numC = countC;
 11990  002330  C0E4  F0EB         	movff	_countC,_numC
 11991                           
 11992                           ;main.c: 495: numAA = countAA;
 11993  002334  C0E3  F0E9         	movff	_countAA,_numAA
 11994                           
 11995                           ;main.c: 496: numDrain = countDrain;
 11996  002338  C0E5  F0EC         	movff	_countDrain,_numDrain
 11997                           
 11998                           ;main.c: 497: numBats = count9V + countC + countAA + countDrain;
 11999  00233C  0100               	movlb	0	; () banked
 12000  00233E  51E2               	movf	_count9V& (0+255),w,b
 12001  002340  0100               	movlb	0	; () banked
 12002  002342  25E4               	addwf	_countC& (0+255),w,b
 12003  002344  0100               	movlb	0	; () banked
 12004  002346  25E3               	addwf	_countAA& (0+255),w,b
 12005  002348  0100               	movlb	0	; () banked
 12006  00234A  25E5               	addwf	_countDrain& (0+255),w,b
 12007  00234C  0100               	movlb	0	; () banked
 12008  00234E  6FEA               	movwf	_numBats& (0+255),b
 12009                           
 12010                           ; BSR set to: 0
 12011                           ;main.c: 499: unsigned char address_code = Eeprom_ReadByte(0);
 12012  002350  0E00               	movlw	0
 12013  002352  6E02               	movwf	i2Eeprom_ReadByte@address+1,c
 12014  002354  0E00               	movlw	0
 12015  002356  6E01               	movwf	i2Eeprom_ReadByte@address,c
 12016  002358  EC19  F01A         	call	i2_Eeprom_ReadByte	;wreg free
 12017  00235C  6E09               	movwf	i2stopOperation@address_code,c
 12018                           
 12019                           ;main.c: 500: uint16_t address = address_code * 96 + 1;
 12020  00235E  5009               	movf	i2stopOperation@address_code,w,c
 12021  002360  0D60               	mullw	96
 12022  002362  0E01               	movlw	1
 12023  002364  24F3               	addwf	prodl,w,c
 12024  002366  6E0A               	movwf	i2stopOperation@address,c
 12025  002368  0E00               	movlw	0
 12026  00236A  20F4               	addwfc	prodh,w,c
 12027  00236C  6E0B               	movwf	i2stopOperation@address+1,c
 12028                           
 12029                           ;main.c: 501: Eeprom_WriteByte(address, lastRunRTC[6]);
 12030  00236E  C00A  F001         	movff	i2stopOperation@address,i2Eeprom_WriteByte@address
 12031  002372  C00B  F002         	movff	i2stopOperation@address+1,i2Eeprom_WriteByte@address+1
 12032  002376  C0CA  F003         	movff	_lastRunRTC+6,i2Eeprom_WriteByte@data
 12033  00237A  EC9A  F019         	call	i2_Eeprom_WriteByte	;wreg free
 12034                           
 12035                           ;main.c: 502: address = next_address(address);
 12036  00237E  C00A  F001         	movff	i2stopOperation@address,i2next_address@address
 12037  002382  C00B  F002         	movff	i2stopOperation@address+1,i2next_address@address+1
 12038  002386  EC58  F01A         	call	i2_next_address	;wreg free
 12039  00238A  C001  F00A         	movff	?i2_next_address,i2stopOperation@address
 12040  00238E  C002  F00B         	movff	?i2_next_address+1,i2stopOperation@address+1
 12041                           
 12042                           ;main.c: 503: Eeprom_WriteByte(address, lastRunRTC[5]);
 12043  002392  C00A  F001         	movff	i2stopOperation@address,i2Eeprom_WriteByte@address
 12044  002396  C00B  F002         	movff	i2stopOperation@address+1,i2Eeprom_WriteByte@address+1
 12045  00239A  C0C9  F003         	movff	_lastRunRTC+5,i2Eeprom_WriteByte@data
 12046  00239E  EC9A  F019         	call	i2_Eeprom_WriteByte	;wreg free
 12047                           
 12048                           ;main.c: 504: address = next_address(address);
 12049  0023A2  C00A  F001         	movff	i2stopOperation@address,i2next_address@address
 12050  0023A6  C00B  F002         	movff	i2stopOperation@address+1,i2next_address@address+1
 12051  0023AA  EC58  F01A         	call	i2_next_address	;wreg free
 12052  0023AE  C001  F00A         	movff	?i2_next_address,i2stopOperation@address
 12053  0023B2  C002  F00B         	movff	?i2_next_address+1,i2stopOperation@address+1
 12054                           
 12055                           ;main.c: 505: Eeprom_WriteByte(address, lastRunRTC[4]);
 12056  0023B6  C00A  F001         	movff	i2stopOperation@address,i2Eeprom_WriteByte@address
 12057  0023BA  C00B  F002         	movff	i2stopOperation@address+1,i2Eeprom_WriteByte@address+1
 12058  0023BE  C0C8  F003         	movff	_lastRunRTC+4,i2Eeprom_WriteByte@data
 12059  0023C2  EC9A  F019         	call	i2_Eeprom_WriteByte	;wreg free
 12060                           
 12061                           ;main.c: 506: address = next_address(address);
 12062  0023C6  C00A  F001         	movff	i2stopOperation@address,i2next_address@address
 12063  0023CA  C00B  F002         	movff	i2stopOperation@address+1,i2next_address@address+1
 12064  0023CE  EC58  F01A         	call	i2_next_address	;wreg free
 12065  0023D2  C001  F00A         	movff	?i2_next_address,i2stopOperation@address
 12066  0023D6  C002  F00B         	movff	?i2_next_address+1,i2stopOperation@address+1
 12067                           
 12068                           ;main.c: 507: Eeprom_WriteByte(address, lastRunRTC[2]);
 12069  0023DA  C00A  F001         	movff	i2stopOperation@address,i2Eeprom_WriteByte@address
 12070  0023DE  C00B  F002         	movff	i2stopOperation@address+1,i2Eeprom_WriteByte@address+1
 12071  0023E2  C0C6  F003         	movff	_lastRunRTC+2,i2Eeprom_WriteByte@data
 12072  0023E6  EC9A  F019         	call	i2_Eeprom_WriteByte	;wreg free
 12073                           
 12074                           ;main.c: 508: address = next_address(address);
 12075  0023EA  C00A  F001         	movff	i2stopOperation@address,i2next_address@address
 12076  0023EE  C00B  F002         	movff	i2stopOperation@address+1,i2next_address@address+1
 12077  0023F2  EC58  F01A         	call	i2_next_address	;wreg free
 12078  0023F6  C001  F00A         	movff	?i2_next_address,i2stopOperation@address
 12079  0023FA  C002  F00B         	movff	?i2_next_address+1,i2stopOperation@address+1
 12080                           
 12081                           ;main.c: 509: Eeprom_WriteByte(address, lastRunRTC[1]);
 12082  0023FE  C00A  F001         	movff	i2stopOperation@address,i2Eeprom_WriteByte@address
 12083  002402  C00B  F002         	movff	i2stopOperation@address+1,i2Eeprom_WriteByte@address+1
 12084  002406  C0C5  F003         	movff	_lastRunRTC+1,i2Eeprom_WriteByte@data
 12085  00240A  EC9A  F019         	call	i2_Eeprom_WriteByte	;wreg free
 12086                           
 12087                           ;main.c: 510: address = next_address(address);
 12088  00240E  C00A  F001         	movff	i2stopOperation@address,i2next_address@address
 12089  002412  C00B  F002         	movff	i2stopOperation@address+1,i2next_address@address+1
 12090  002416  EC58  F01A         	call	i2_next_address	;wreg free
 12091  00241A  C001  F00A         	movff	?i2_next_address,i2stopOperation@address
 12092  00241E  C002  F00B         	movff	?i2_next_address+1,i2stopOperation@address+1
 12093                           
 12094                           ;main.c: 511: Eeprom_WriteByte(address, lastRunRTC[0]);
 12095  002422  C00A  F001         	movff	i2stopOperation@address,i2Eeprom_WriteByte@address
 12096  002426  C00B  F002         	movff	i2stopOperation@address+1,i2Eeprom_WriteByte@address+1
 12097  00242A  C0C4  F003         	movff	_lastRunRTC,i2Eeprom_WriteByte@data
 12098  00242E  EC9A  F019         	call	i2_Eeprom_WriteByte	;wreg free
 12099                           
 12100                           ;main.c: 512: address = next_address(address);
 12101  002432  C00A  F001         	movff	i2stopOperation@address,i2next_address@address
 12102  002436  C00B  F002         	movff	i2stopOperation@address+1,i2next_address@address+1
 12103  00243A  EC58  F01A         	call	i2_next_address	;wreg free
 12104  00243E  C001  F00A         	movff	?i2_next_address,i2stopOperation@address
 12105  002442  C002  F00B         	movff	?i2_next_address+1,i2stopOperation@address+1
 12106                           
 12107                           ;main.c: 514: Eeprom_WriteByte(address, countAA);
 12108  002446  C00A  F001         	movff	i2stopOperation@address,i2Eeprom_WriteByte@address
 12109  00244A  C00B  F002         	movff	i2stopOperation@address+1,i2Eeprom_WriteByte@address+1
 12110  00244E  C0E3  F003         	movff	_countAA,i2Eeprom_WriteByte@data
 12111  002452  EC9A  F019         	call	i2_Eeprom_WriteByte	;wreg free
 12112                           
 12113                           ;main.c: 515: address = next_address(address);
 12114  002456  C00A  F001         	movff	i2stopOperation@address,i2next_address@address
 12115  00245A  C00B  F002         	movff	i2stopOperation@address+1,i2next_address@address+1
 12116  00245E  EC58  F01A         	call	i2_next_address	;wreg free
 12117  002462  C001  F00A         	movff	?i2_next_address,i2stopOperation@address
 12118  002466  C002  F00B         	movff	?i2_next_address+1,i2stopOperation@address+1
 12119                           
 12120                           ;main.c: 516: Eeprom_WriteByte(address, countC);
 12121  00246A  C00A  F001         	movff	i2stopOperation@address,i2Eeprom_WriteByte@address
 12122  00246E  C00B  F002         	movff	i2stopOperation@address+1,i2Eeprom_WriteByte@address+1
 12123  002472  C0E4  F003         	movff	_countC,i2Eeprom_WriteByte@data
 12124  002476  EC9A  F019         	call	i2_Eeprom_WriteByte	;wreg free
 12125                           
 12126                           ;main.c: 517: address = next_address(address);
 12127  00247A  C00A  F001         	movff	i2stopOperation@address,i2next_address@address
 12128  00247E  C00B  F002         	movff	i2stopOperation@address+1,i2next_address@address+1
 12129  002482  EC58  F01A         	call	i2_next_address	;wreg free
 12130  002486  C001  F00A         	movff	?i2_next_address,i2stopOperation@address
 12131  00248A  C002  F00B         	movff	?i2_next_address+1,i2stopOperation@address+1
 12132                           
 12133                           ;main.c: 518: Eeprom_WriteByte(address, count9V);
 12134  00248E  C00A  F001         	movff	i2stopOperation@address,i2Eeprom_WriteByte@address
 12135  002492  C00B  F002         	movff	i2stopOperation@address+1,i2Eeprom_WriteByte@address+1
 12136  002496  C0E2  F003         	movff	_count9V,i2Eeprom_WriteByte@data
 12137  00249A  EC9A  F019         	call	i2_Eeprom_WriteByte	;wreg free
 12138                           
 12139                           ;main.c: 519: address = next_address(address);
 12140  00249E  C00A  F001         	movff	i2stopOperation@address,i2next_address@address
 12141  0024A2  C00B  F002         	movff	i2stopOperation@address+1,i2next_address@address+1
 12142  0024A6  EC58  F01A         	call	i2_next_address	;wreg free
 12143  0024AA  C001  F00A         	movff	?i2_next_address,i2stopOperation@address
 12144  0024AE  C002  F00B         	movff	?i2_next_address+1,i2stopOperation@address+1
 12145                           
 12146                           ;main.c: 520: Eeprom_WriteByte(address, countDrain);
 12147  0024B2  C00A  F001         	movff	i2stopOperation@address,i2Eeprom_WriteByte@address
 12148  0024B6  C00B  F002         	movff	i2stopOperation@address+1,i2Eeprom_WriteByte@address+1
 12149  0024BA  C0E5  F003         	movff	_countDrain,i2Eeprom_WriteByte@data
 12150  0024BE  EC9A  F019         	call	i2_Eeprom_WriteByte	;wreg free
 12151                           
 12152                           ;main.c: 521: address = next_address(address);
 12153  0024C2  C00A  F001         	movff	i2stopOperation@address,i2next_address@address
 12154  0024C6  C00B  F002         	movff	i2stopOperation@address+1,i2next_address@address+1
 12155  0024CA  EC58  F01A         	call	i2_next_address	;wreg free
 12156  0024CE  C001  F00A         	movff	?i2_next_address,i2stopOperation@address
 12157  0024D2  C002  F00B         	movff	?i2_next_address+1,i2stopOperation@address+1
 12158                           
 12159                           ;main.c: 522: Eeprom_WriteByte(address, numBats);
 12160  0024D6  C00A  F001         	movff	i2stopOperation@address,i2Eeprom_WriteByte@address
 12161  0024DA  C00B  F002         	movff	i2stopOperation@address+1,i2Eeprom_WriteByte@address+1
 12162  0024DE  C0EA  F003         	movff	_numBats,i2Eeprom_WriteByte@data
 12163  0024E2  EC9A  F019         	call	i2_Eeprom_WriteByte	;wreg free
 12164                           
 12165                           ;main.c: 523: address = next_address(address);
 12166  0024E6  C00A  F001         	movff	i2stopOperation@address,i2next_address@address
 12167  0024EA  C00B  F002         	movff	i2stopOperation@address+1,i2next_address@address+1
 12168  0024EE  EC58  F01A         	call	i2_next_address	;wreg free
 12169  0024F2  C001  F00A         	movff	?i2_next_address,i2stopOperation@address
 12170  0024F6  C002  F00B         	movff	?i2_next_address+1,i2stopOperation@address+1
 12171                           
 12172                           ;main.c: 524: Eeprom_WriteByte(address, opTimer);
 12173  0024FA  C00A  F001         	movff	i2stopOperation@address,i2Eeprom_WriteByte@address
 12174  0024FE  C00B  F002         	movff	i2stopOperation@address+1,i2Eeprom_WriteByte@address+1
 12175  002502  C04A  F003         	movff	_opTimer,i2Eeprom_WriteByte@data
 12176  002506  EC9A  F019         	call	i2_Eeprom_WriteByte	;wreg free
 12177                           
 12178                           ;main.c: 526: address_code++;
 12179  00250A  2A09               	incf	i2stopOperation@address_code,f,c
 12180                           
 12181                           ;main.c: 527: if (address_code > 3)
 12182  00250C  0E03               	movlw	3
 12183  00250E  6409               	cpfsgt	i2stopOperation@address_code,c
 12184  002510  D009               	goto	i2l4187
 12185                           
 12186                           ;main.c: 528: Eeprom_WriteByte(0, 0);
 12187  002512  0E00               	movlw	0
 12188  002514  6E02               	movwf	i2Eeprom_WriteByte@address+1,c
 12189  002516  0E00               	movlw	0
 12190  002518  6E01               	movwf	i2Eeprom_WriteByte@address,c
 12191  00251A  0E00               	movlw	0
 12192  00251C  6E03               	movwf	i2Eeprom_WriteByte@data,c
 12193  00251E  EC9A  F019         	call	i2_Eeprom_WriteByte	;wreg free
 12194  002522  D008               	goto	i2l4189
 12195  002524                     i2l4187:
 12196                           
 12197                           ;main.c: 529: else
 12198                           ;main.c: 530: Eeprom_WriteByte(0, address_code);
 12199  002524  0E00               	movlw	0
 12200  002526  6E02               	movwf	i2Eeprom_WriteByte@address+1,c
 12201  002528  0E00               	movlw	0
 12202  00252A  6E01               	movwf	i2Eeprom_WriteByte@address,c
 12203  00252C  C009  F003         	movff	i2stopOperation@address_code,i2Eeprom_WriteByte@data
 12204  002530  EC9A  F019         	call	i2_Eeprom_WriteByte	;wreg free
 12205  002534                     i2l4189:
 12206                           
 12207                           ;main.c: 532: count9V = 0;
 12208  002534  0E00               	movlw	0
 12209  002536  0100               	movlb	0	; () banked
 12210  002538  6FE2               	movwf	_count9V& (0+255),b
 12211                           
 12212                           ; BSR set to: 0
 12213                           ;main.c: 533: countC = 0;
 12214  00253A  0E00               	movlw	0
 12215  00253C  0100               	movlb	0	; () banked
 12216  00253E  6FE4               	movwf	_countC& (0+255),b
 12217                           
 12218                           ; BSR set to: 0
 12219                           ;main.c: 534: countAA = 0;
 12220  002540  0E00               	movlw	0
 12221  002542  0100               	movlb	0	; () banked
 12222  002544  6FE3               	movwf	_countAA& (0+255),b
 12223                           
 12224                           ; BSR set to: 0
 12225                           ;main.c: 535: countDrain = 0;
 12226  002546  0E00               	movlw	0
 12227  002548  0100               	movlb	0	; () banked
 12228  00254A  6FE5               	movwf	_countDrain& (0+255),b
 12229                           
 12230                           ; BSR set to: 0
 12231                           ;main.c: 536: min = opTimer / 60;
 12232  00254C  C04A  F001         	movff	_opTimer,i2___awdiv@dividend
 12233  002550  6A02               	clrf	i2___awdiv@dividend+1,c
 12234  002552  0E00               	movlw	0
 12235  002554  6E04               	movwf	i2___awdiv@divisor+1,c
 12236  002556  0E3C               	movlw	60
 12237  002558  6E03               	movwf	i2___awdiv@divisor,c
 12238  00255A  EC1E  F017         	call	i2___awdiv	;wreg free
 12239  00255E  5001               	movf	?i2___awdiv,w,c
 12240  002560  0100               	movlb	0	; () banked
 12241  002562  6FE7               	movwf	_min& (0+255),b
 12242                           
 12243                           ; BSR set to: 0
 12244                           ;main.c: 537: sec = opTimer % 60;
 12245  002564  C04A  F001         	movff	_opTimer,i2___awmod@dividend
 12246  002568  6A02               	clrf	i2___awmod@dividend+1,c
 12247  00256A  0E00               	movlw	0
 12248  00256C  6E04               	movwf	i2___awmod@divisor+1,c
 12249  00256E  0E3C               	movlw	60
 12250  002570  6E03               	movwf	i2___awmod@divisor,c
 12251  002572  EC60  F017         	call	i2___awmod	;wreg free
 12252  002576  5001               	movf	?i2___awmod,w,c
 12253  002578  0100               	movlb	0	; () banked
 12254  00257A  6FED               	movwf	_sec& (0+255),b
 12255                           
 12256                           ; BSR set to: 0
 12257                           ;main.c: 538: opTimer = 0;
 12258  00257C  0E00               	movlw	0
 12259  00257E  6E4A               	movwf	_opTimer,c
 12260                           
 12261                           ; BSR set to: 0
 12262                           ;main.c: 539: doneTimer = 0;
 12263  002580  0E00               	movlw	0
 12264  002582  6E49               	movwf	_doneTimer,c
 12265                           
 12266                           ; BSR set to: 0
 12267                           ;main.c: 540: sorting = 0;
 12268  002584  0E00               	movlw	0
 12269  002586  6E4C               	movwf	_sorting,c
 12270                           
 12271                           ; BSR set to: 0
 12272                           ;main.c: 541: plat1Left = 0;
 12273  002588  0E00               	movlw	0
 12274  00258A  0100               	movlb	0	; () banked
 12275  00258C  6FD3               	movwf	(_plat1Left+1)& (0+255),b
 12276  00258E  0E00               	movlw	0
 12277  002590  6FD2               	movwf	_plat1Left& (0+255),b
 12278                           
 12279                           ; BSR set to: 0
 12280                           ;main.c: 542: plat1Right = 0;
 12281  002592  0E00               	movlw	0
 12282  002594  0100               	movlb	0	; () banked
 12283  002596  6FD5               	movwf	(_plat1Right+1)& (0+255),b
 12284  002598  0E00               	movlw	0
 12285  00259A  6FD4               	movwf	_plat1Right& (0+255),b
 12286                           
 12287                           ; BSR set to: 0
 12288                           ;main.c: 543: plat2Left = 0;
 12289  00259C  0E00               	movlw	0
 12290  00259E  0100               	movlb	0	; () banked
 12291  0025A0  6FD7               	movwf	(_plat2Left+1)& (0+255),b
 12292  0025A2  0E00               	movlw	0
 12293  0025A4  6FD6               	movwf	_plat2Left& (0+255),b
 12294                           
 12295                           ; BSR set to: 0
 12296                           ;main.c: 544: plat2Right = 0;
 12297  0025A6  0E00               	movlw	0
 12298  0025A8  0100               	movlb	0	; () banked
 12299  0025AA  6FD9               	movwf	(_plat2Right+1)& (0+255),b
 12300  0025AC  0E00               	movlw	0
 12301  0025AE  6FD8               	movwf	_plat2Right& (0+255),b
 12302                           
 12303                           ; BSR set to: 0
 12304                           ;main.c: 545: turn2BackLeft = 0;
 12305  0025B0  0E00               	movlw	0
 12306  0025B2  0100               	movlb	0	; () banked
 12307  0025B4  6FDF               	movwf	(_turn2BackLeft+1)& (0+255),b
 12308  0025B6  0E00               	movlw	0
 12309  0025B8  6FDE               	movwf	_turn2BackLeft& (0+255),b
 12310                           
 12311                           ; BSR set to: 0
 12312                           ;main.c: 546: turn1BackLeft = 0;
 12313  0025BA  0E00               	movlw	0
 12314  0025BC  0100               	movlb	0	; () banked
 12315  0025BE  6FDB               	movwf	(_turn1BackLeft+1)& (0+255),b
 12316  0025C0  0E00               	movlw	0
 12317  0025C2  6FDA               	movwf	_turn1BackLeft& (0+255),b
 12318                           
 12319                           ; BSR set to: 0
 12320                           ;main.c: 547: turn2BackRight = 0;
 12321  0025C4  0E00               	movlw	0
 12322  0025C6  0100               	movlb	0	; () banked
 12323  0025C8  6FE1               	movwf	(_turn2BackRight+1)& (0+255),b
 12324  0025CA  0E00               	movlw	0
 12325  0025CC  6FE0               	movwf	_turn2BackRight& (0+255),b
 12326                           
 12327                           ; BSR set to: 0
 12328                           ;main.c: 548: turn1BackRight = 0;
 12329  0025CE  0E00               	movlw	0
 12330  0025D0  0100               	movlb	0	; () banked
 12331  0025D2  6FDD               	movwf	(_turn1BackRight+1)& (0+255),b
 12332  0025D4  0E00               	movlw	0
 12333  0025D6  6FDC               	movwf	_turn1BackRight& (0+255),b
 12334                           
 12335                           ; BSR set to: 0
 12336                           ;main.c: 549: count_2ms = 0;
 12337  0025D8  0E00               	movlw	0
 12338  0025DA  6E48               	movwf	_count_2ms+1,c
 12339  0025DC  0E00               	movlw	0
 12340  0025DE  6E47               	movwf	_count_2ms,c
 12341                           
 12342                           ; BSR set to: 0
 12343                           ;main.c: 550: doubleAA = 0;
 12344  0025E0  0E00               	movlw	0
 12345  0025E2  0100               	movlb	0	; () banked
 12346  0025E4  6FE6               	movwf	_doubleAA& (0+255),b
 12347                           
 12348                           ; BSR set to: 0
 12349                           ;main.c: 551: solOnTimer = 0;
 12350  0025E6  0E00               	movlw	0
 12351  0025E8  6E4B               	movwf	_solOnTimer,c
 12352                           
 12353                           ; BSR set to: 0
 12354                           ;main.c: 553: LATCbits.LC1 = 0;;
 12355  0025EA  928B               	bcf	3979,1,c	;volatile
 12356                           
 12357                           ; BSR set to: 0
 12358                           ;main.c: 554: LATCbits.LC2 = 0;;
 12359  0025EC  948B               	bcf	3979,2,c	;volatile
 12360                           
 12361                           ; BSR set to: 0
 12362                           ;main.c: 555: LATCbits.LC6 = 0;;
 12363  0025EE  9C8B               	bcf	3979,6,c	;volatile
 12364                           
 12365                           ; BSR set to: 0
 12366                           ;main.c: 556: LATCbits.LC5 = 0;;
 12367  0025F0  9A8B               	bcf	3979,5,c	;volatile
 12368                           
 12369                           ; BSR set to: 0
 12370                           ;main.c: 557: LATCbits.LC0 = 0;;
 12371  0025F2  908B               	bcf	3979,0,c	;volatile
 12372                           
 12373                           ; BSR set to: 0
 12374                           ;main.c: 558: LATEbits.LE2 = 0;;
 12375  0025F4  948D               	bcf	3981,2,c	;volatile
 12376                           
 12377                           ; BSR set to: 0
 12378                           ;main.c: 559: LATEbits.LE1 = 0;;
 12379  0025F6  928D               	bcf	3981,1,c	;volatile
 12380                           
 12381                           ; BSR set to: 0
 12382                           ;main.c: 560: LATAbits.LA4 = 0;;
 12383  0025F8  9889               	bcf	3977,4,c	;volatile
 12384                           
 12385                           ; BSR set to: 0
 12386                           ;main.c: 561: LATDbits.LD0= 0;;
 12387  0025FA  908C               	bcf	3980,0,c	;volatile
 12388                           
 12389                           ; BSR set to: 0
 12390                           ;main.c: 562: LATCbits.LC7 = 0;;
 12391  0025FC  9E8B               	bcf	3979,7,c	;volatile
 12392                           
 12393                           ; BSR set to: 0
 12394                           ;main.c: 563: LATDbits.LD1 = 0;;
 12395  0025FE  928C               	bcf	3980,1,c	;volatile
 12396                           
 12397                           ; BSR set to: 0
 12398                           ;main.c: 564: LATBbits.LB0 = 0;;
 12399  002600  908A               	bcf	3978,0,c	;volatile
 12400                           
 12401                           ; BSR set to: 0
 12402                           ;main.c: 565: screenMode = 0;
 12403  002602  0E00               	movlw	0
 12404  002604  0100               	movlb	0	; () banked
 12405  002606  6FFC               	movwf	_screenMode& (0+255),b
 12406                           
 12407                           ; BSR set to: 0
 12408  002608  0012               	return		;funcret
 12409  00260A                     __end_ofi2_stopOperation:
 12410                           	opt stack 0
 12411                           pclatu	equ	0xFFB
 12412                           pclath	equ	0xFFA
 12413                           tblptru	equ	0xFF8
 12414                           tblptrh	equ	0xFF7
 12415                           tblptrl	equ	0xFF6
 12416                           tablat	equ	0xFF5
 12417                           prodh	equ	0xFF4
 12418                           prodl	equ	0xFF3
 12419                           intcon	equ	0xFF2
 12420                           intcon2	equ	0xFF1
 12421                           intcon3	equ	0xFF0
 12422                           postinc0	equ	0xFEE
 12423                           fsr0h	equ	0xFEA
 12424                           fsr0l	equ	0xFE9
 12425                           wreg	equ	0xFE8
 12426                           postdec1	equ	0xFE5
 12427                           plusw1	equ	0xFE3
 12428                           fsr1h	equ	0xFE2
 12429                           fsr1l	equ	0xFE1
 12430                           indf2	equ	0xFDF
 12431                           postinc2	equ	0xFDE
 12432                           postdec2	equ	0xFDD
 12433                           plusw2	equ	0xFDB
 12434                           fsr2h	equ	0xFDA
 12435                           fsr2l	equ	0xFD9
 12436                           status	equ	0xFD8
 12437                           
 12438 ;; *************** function i2_next_address *****************
 12439 ;; Defined at:
 12440 ;;		line 710 in file "../main.c"
 12441 ;; Parameters:    Size  Location     Type
 12442 ;;  address         2    0[COMRAM] unsigned int 
 12443 ;; Auto vars:     Size  Location     Type
 12444 ;;		None
 12445 ;; Return value:  Size  Location     Type
 12446 ;;                  2    0[COMRAM] unsigned int 
 12447 ;; Registers used:
 12448 ;;		wreg, status,2, status,0
 12449 ;; Tracked objects:
 12450 ;;		On entry : 0/0
 12451 ;;		On exit  : 0/0
 12452 ;;		Unchanged: 0/0
 12453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12454 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12455 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12456 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12457 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12458 ;;Total ram usage:        2 bytes
 12459 ;; Hardware stack levels used:    1
 12460 ;; This function calls:
 12461 ;;		Nothing
 12462 ;; This function is called by:
 12463 ;;		i2_stopOperation
 12464 ;; This function uses a non-reentrant model
 12465 ;;
 12466                           
 12467                           	psect	text35
 12468  0034B0                     __ptext35:
 12469                           	opt stack 0
 12470  0034B0                     i2_next_address:
 12471                           	opt stack 24
 12472                           
 12473                           ;main.c: 711: return address + 8;
 12474                           
 12475                           ; BSR set to: 0
 12476                           ;incstack = 0
 12477  0034B0  0E08               	movlw	8
 12478  0034B2  2401               	addwf	i2next_address@address,w,c
 12479  0034B4  6E01               	movwf	?i2_next_address,c
 12480  0034B6  0E00               	movlw	0
 12481  0034B8  2002               	addwfc	i2next_address@address+1,w,c
 12482  0034BA  6E02               	movwf	?i2_next_address+1,c
 12483  0034BC  0012               	return	
 12484  0034BE                     __end_ofi2_next_address:
 12485                           	opt stack 0
 12486                           pclatu	equ	0xFFB
 12487                           pclath	equ	0xFFA
 12488                           tblptru	equ	0xFF8
 12489                           tblptrh	equ	0xFF7
 12490                           tblptrl	equ	0xFF6
 12491                           tablat	equ	0xFF5
 12492                           prodh	equ	0xFF4
 12493                           prodl	equ	0xFF3
 12494                           intcon	equ	0xFF2
 12495                           intcon2	equ	0xFF1
 12496                           intcon3	equ	0xFF0
 12497                           postinc0	equ	0xFEE
 12498                           fsr0h	equ	0xFEA
 12499                           fsr0l	equ	0xFE9
 12500                           wreg	equ	0xFE8
 12501                           postdec1	equ	0xFE5
 12502                           plusw1	equ	0xFE3
 12503                           fsr1h	equ	0xFE2
 12504                           fsr1l	equ	0xFE1
 12505                           indf2	equ	0xFDF
 12506                           postinc2	equ	0xFDE
 12507                           postdec2	equ	0xFDD
 12508                           plusw2	equ	0xFDB
 12509                           fsr2h	equ	0xFDA
 12510                           fsr2l	equ	0xFD9
 12511                           status	equ	0xFD8
 12512                           
 12513 ;; *************** function i2___awmod *****************
 12514 ;; Defined at:
 12515 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 12516 ;; Parameters:    Size  Location     Type
 12517 ;;  dividend        2    0[COMRAM] int 
 12518 ;;  divisor         2    2[COMRAM] int 
 12519 ;; Auto vars:     Size  Location     Type
 12520 ;;  __awmod         1    5[COMRAM] unsigned char 
 12521 ;;  __awmod         1    4[COMRAM] unsigned char 
 12522 ;; Return value:  Size  Location     Type
 12523 ;;                  2    0[COMRAM] int 
 12524 ;; Registers used:
 12525 ;;		wreg, status,2, status,0
 12526 ;; Tracked objects:
 12527 ;;		On entry : 0/0
 12528 ;;		On exit  : 0/0
 12529 ;;		Unchanged: 0/0
 12530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12531 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12532 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12533 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12534 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12535 ;;Total ram usage:        6 bytes
 12536 ;; Hardware stack levels used:    1
 12537 ;; This function calls:
 12538 ;;		Nothing
 12539 ;; This function is called by:
 12540 ;;		_ISR
 12541 ;;		i2_stopOperation
 12542 ;; This function uses a non-reentrant model
 12543 ;;
 12544                           
 12545                           	psect	text36
 12546  002EC0                     __ptext36:
 12547                           	opt stack 0
 12548  002EC0                     i2___awmod:
 12549                           	opt stack 24
 12550                           
 12551                           ;incstack = 0
 12552  002EC0  0E00               	movlw	0
 12553  002EC2  6E06               	movwf	i2___awmod@sign,c
 12554  002EC4  AE02               	btfss	i2___awmod@dividend+1,7,c
 12555  002EC6  D006               	goto	i2l3695
 12556  002EC8  6C01               	negf	i2___awmod@dividend,c
 12557  002ECA  1E02               	comf	i2___awmod@dividend+1,f,c
 12558  002ECC  B0D8               	btfsc	status,0,c
 12559  002ECE  2A02               	incf	i2___awmod@dividend+1,f,c
 12560  002ED0  0E01               	movlw	1
 12561  002ED2  6E06               	movwf	i2___awmod@sign,c
 12562  002ED4                     i2l3695:
 12563  002ED4  AE04               	btfss	i2___awmod@divisor+1,7,c
 12564  002ED6  D004               	goto	i2l3699
 12565  002ED8  6C03               	negf	i2___awmod@divisor,c
 12566  002EDA  1E04               	comf	i2___awmod@divisor+1,f,c
 12567  002EDC  B0D8               	btfsc	status,0,c
 12568  002EDE  2A04               	incf	i2___awmod@divisor+1,f,c
 12569  002EE0                     i2l3699:
 12570  002EE0  5003               	movf	i2___awmod@divisor,w,c
 12571  002EE2  1004               	iorwf	i2___awmod@divisor+1,w,c
 12572  002EE4  B4D8               	btfsc	status,2,c
 12573  002EE6  D018               	goto	i2l3715
 12574  002EE8  0E01               	movlw	1
 12575  002EEA  6E05               	movwf	i2___awmod@counter,c
 12576  002EEC  D004               	goto	i2l3705
 12577  002EEE                     i2l3703:
 12578  002EEE  90D8               	bcf	status,0,c
 12579  002EF0  3603               	rlcf	i2___awmod@divisor,f,c
 12580  002EF2  3604               	rlcf	i2___awmod@divisor+1,f,c
 12581  002EF4  2A05               	incf	i2___awmod@counter,f,c
 12582  002EF6                     i2l3705:
 12583  002EF6  AE04               	btfss	i2___awmod@divisor+1,7,c
 12584  002EF8  D7FA               	goto	i2l3703
 12585  002EFA                     i2l3707:
 12586  002EFA  5003               	movf	i2___awmod@divisor,w,c
 12587  002EFC  5C01               	subwf	i2___awmod@dividend,w,c
 12588  002EFE  5004               	movf	i2___awmod@divisor+1,w,c
 12589  002F00  5802               	subwfb	i2___awmod@dividend+1,w,c
 12590  002F02  A0D8               	btfss	status,0,c
 12591  002F04  D004               	goto	i2l3711
 12592  002F06  5003               	movf	i2___awmod@divisor,w,c
 12593  002F08  5E01               	subwf	i2___awmod@dividend,f,c
 12594  002F0A  5004               	movf	i2___awmod@divisor+1,w,c
 12595  002F0C  5A02               	subwfb	i2___awmod@dividend+1,f,c
 12596  002F0E                     i2l3711:
 12597  002F0E  90D8               	bcf	status,0,c
 12598  002F10  3204               	rrcf	i2___awmod@divisor+1,f,c
 12599  002F12  3203               	rrcf	i2___awmod@divisor,f,c
 12600  002F14  2E05               	decfsz	i2___awmod@counter,f,c
 12601  002F16  D7F1               	goto	i2l3707
 12602  002F18                     i2l3715:
 12603  002F18  5006               	movf	i2___awmod@sign,w,c
 12604  002F1A  B4D8               	btfsc	status,2,c
 12605  002F1C  D004               	goto	i2l3719
 12606  002F1E  6C01               	negf	i2___awmod@dividend,c
 12607  002F20  1E02               	comf	i2___awmod@dividend+1,f,c
 12608  002F22  B0D8               	btfsc	status,0,c
 12609  002F24  2A02               	incf	i2___awmod@dividend+1,f,c
 12610  002F26                     i2l3719:
 12611  002F26  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
 12612  002F2A  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
 12613  002F2E  0012               	return	
 12614  002F30                     __end_ofi2___awmod:
 12615                           	opt stack 0
 12616                           pclatu	equ	0xFFB
 12617                           pclath	equ	0xFFA
 12618                           tblptru	equ	0xFF8
 12619                           tblptrh	equ	0xFF7
 12620                           tblptrl	equ	0xFF6
 12621                           tablat	equ	0xFF5
 12622                           prodh	equ	0xFF4
 12623                           prodl	equ	0xFF3
 12624                           intcon	equ	0xFF2
 12625                           intcon2	equ	0xFF1
 12626                           intcon3	equ	0xFF0
 12627                           postinc0	equ	0xFEE
 12628                           fsr0h	equ	0xFEA
 12629                           fsr0l	equ	0xFE9
 12630                           wreg	equ	0xFE8
 12631                           postdec1	equ	0xFE5
 12632                           plusw1	equ	0xFE3
 12633                           fsr1h	equ	0xFE2
 12634                           fsr1l	equ	0xFE1
 12635                           indf2	equ	0xFDF
 12636                           postinc2	equ	0xFDE
 12637                           postdec2	equ	0xFDD
 12638                           plusw2	equ	0xFDB
 12639                           fsr2h	equ	0xFDA
 12640                           fsr2l	equ	0xFD9
 12641                           status	equ	0xFD8
 12642                           
 12643 ;; *************** function i2___awdiv *****************
 12644 ;; Defined at:
 12645 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
 12646 ;; Parameters:    Size  Location     Type
 12647 ;;  dividend        2    0[COMRAM] int 
 12648 ;;  divisor         2    2[COMRAM] int 
 12649 ;; Auto vars:     Size  Location     Type
 12650 ;;  __awdiv         2    6[COMRAM] int 
 12651 ;;  __awdiv         1    5[COMRAM] unsigned char 
 12652 ;;  __awdiv         1    4[COMRAM] unsigned char 
 12653 ;; Return value:  Size  Location     Type
 12654 ;;                  2    0[COMRAM] int 
 12655 ;; Registers used:
 12656 ;;		wreg, status,2, status,0
 12657 ;; Tracked objects:
 12658 ;;		On entry : 0/0
 12659 ;;		On exit  : 0/0
 12660 ;;		Unchanged: 0/0
 12661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12662 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12663 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12664 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12665 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12666 ;;Total ram usage:        8 bytes
 12667 ;; Hardware stack levels used:    1
 12668 ;; This function calls:
 12669 ;;		Nothing
 12670 ;; This function is called by:
 12671 ;;		_ISR
 12672 ;;		i2_stopOperation
 12673 ;; This function uses a non-reentrant model
 12674 ;;
 12675                           
 12676                           	psect	text37
 12677  002E3C                     __ptext37:
 12678                           	opt stack 0
 12679  002E3C                     i2___awdiv:
 12680                           	opt stack 24
 12681                           
 12682                           ;incstack = 0
 12683  002E3C  0E00               	movlw	0
 12684  002E3E  6E06               	movwf	i2___awdiv@sign,c
 12685  002E40  AE04               	btfss	i2___awdiv@divisor+1,7,c
 12686  002E42  D006               	goto	i2l3651
 12687  002E44  6C03               	negf	i2___awdiv@divisor,c
 12688  002E46  1E04               	comf	i2___awdiv@divisor+1,f,c
 12689  002E48  B0D8               	btfsc	status,0,c
 12690  002E4A  2A04               	incf	i2___awdiv@divisor+1,f,c
 12691  002E4C  0E01               	movlw	1
 12692  002E4E  6E06               	movwf	i2___awdiv@sign,c
 12693  002E50                     i2l3651:
 12694  002E50  AE02               	btfss	i2___awdiv@dividend+1,7,c
 12695  002E52  D006               	goto	i2l3657
 12696  002E54  6C01               	negf	i2___awdiv@dividend,c
 12697  002E56  1E02               	comf	i2___awdiv@dividend+1,f,c
 12698  002E58  B0D8               	btfsc	status,0,c
 12699  002E5A  2A02               	incf	i2___awdiv@dividend+1,f,c
 12700  002E5C  0E01               	movlw	1
 12701  002E5E  1A06               	xorwf	i2___awdiv@sign,f,c
 12702  002E60                     i2l3657:
 12703  002E60  0E00               	movlw	0
 12704  002E62  6E08               	movwf	i2___awdiv@quotient+1,c
 12705  002E64  0E00               	movlw	0
 12706  002E66  6E07               	movwf	i2___awdiv@quotient,c
 12707  002E68  5003               	movf	i2___awdiv@divisor,w,c
 12708  002E6A  1004               	iorwf	i2___awdiv@divisor+1,w,c
 12709  002E6C  B4D8               	btfsc	status,2,c
 12710  002E6E  D01C               	goto	i2l3679
 12711  002E70  0E01               	movlw	1
 12712  002E72  6E05               	movwf	i2___awdiv@counter,c
 12713  002E74  D004               	goto	i2l3665
 12714  002E76                     i2l3663:
 12715  002E76  90D8               	bcf	status,0,c
 12716  002E78  3603               	rlcf	i2___awdiv@divisor,f,c
 12717  002E7A  3604               	rlcf	i2___awdiv@divisor+1,f,c
 12718  002E7C  2A05               	incf	i2___awdiv@counter,f,c
 12719  002E7E                     i2l3665:
 12720  002E7E  AE04               	btfss	i2___awdiv@divisor+1,7,c
 12721  002E80  D7FA               	goto	i2l3663
 12722  002E82                     i2l3667:
 12723  002E82  90D8               	bcf	status,0,c
 12724  002E84  3607               	rlcf	i2___awdiv@quotient,f,c
 12725  002E86  3608               	rlcf	i2___awdiv@quotient+1,f,c
 12726  002E88  5003               	movf	i2___awdiv@divisor,w,c
 12727  002E8A  5C01               	subwf	i2___awdiv@dividend,w,c
 12728  002E8C  5004               	movf	i2___awdiv@divisor+1,w,c
 12729  002E8E  5802               	subwfb	i2___awdiv@dividend+1,w,c
 12730  002E90  A0D8               	btfss	status,0,c
 12731  002E92  D005               	goto	i2l3675
 12732  002E94  5003               	movf	i2___awdiv@divisor,w,c
 12733  002E96  5E01               	subwf	i2___awdiv@dividend,f,c
 12734  002E98  5004               	movf	i2___awdiv@divisor+1,w,c
 12735  002E9A  5A02               	subwfb	i2___awdiv@dividend+1,f,c
 12736  002E9C  8007               	bsf	i2___awdiv@quotient,0,c
 12737  002E9E                     i2l3675:
 12738  002E9E  90D8               	bcf	status,0,c
 12739  002EA0  3204               	rrcf	i2___awdiv@divisor+1,f,c
 12740  002EA2  3203               	rrcf	i2___awdiv@divisor,f,c
 12741  002EA4  2E05               	decfsz	i2___awdiv@counter,f,c
 12742  002EA6  D7ED               	goto	i2l3667
 12743  002EA8                     i2l3679:
 12744  002EA8  5006               	movf	i2___awdiv@sign,w,c
 12745  002EAA  B4D8               	btfsc	status,2,c
 12746  002EAC  D004               	goto	i2l3683
 12747  002EAE  6C07               	negf	i2___awdiv@quotient,c
 12748  002EB0  1E08               	comf	i2___awdiv@quotient+1,f,c
 12749  002EB2  B0D8               	btfsc	status,0,c
 12750  002EB4  2A08               	incf	i2___awdiv@quotient+1,f,c
 12751  002EB6                     i2l3683:
 12752  002EB6  C007  F001         	movff	i2___awdiv@quotient,?i2___awdiv
 12753  002EBA  C008  F002         	movff	i2___awdiv@quotient+1,?i2___awdiv+1
 12754  002EBE  0012               	return	
 12755  002EC0                     __end_ofi2___awdiv:
 12756                           	opt stack 0
 12757                           pclatu	equ	0xFFB
 12758                           pclath	equ	0xFFA
 12759                           tblptru	equ	0xFF8
 12760                           tblptrh	equ	0xFF7
 12761                           tblptrl	equ	0xFF6
 12762                           tablat	equ	0xFF5
 12763                           prodh	equ	0xFF4
 12764                           prodl	equ	0xFF3
 12765                           intcon	equ	0xFF2
 12766                           intcon2	equ	0xFF1
 12767                           intcon3	equ	0xFF0
 12768                           postinc0	equ	0xFEE
 12769                           fsr0h	equ	0xFEA
 12770                           fsr0l	equ	0xFE9
 12771                           wreg	equ	0xFE8
 12772                           postdec1	equ	0xFE5
 12773                           plusw1	equ	0xFE3
 12774                           fsr1h	equ	0xFE2
 12775                           fsr1l	equ	0xFE1
 12776                           indf2	equ	0xFDF
 12777                           postinc2	equ	0xFDE
 12778                           postdec2	equ	0xFDD
 12779                           plusw2	equ	0xFDB
 12780                           fsr2h	equ	0xFDA
 12781                           fsr2l	equ	0xFD9
 12782                           status	equ	0xFD8
 12783                           
 12784 ;; *************** function i2_Eeprom_WriteByte *****************
 12785 ;; Defined at:
 12786 ;;		line 683 in file "../main.c"
 12787 ;; Parameters:    Size  Location     Type
 12788 ;;  address         2    0[COMRAM] unsigned int 
 12789 ;;  data            1    2[COMRAM] unsigned char 
 12790 ;; Auto vars:     Size  Location     Type
 12791 ;;		None
 12792 ;; Return value:  Size  Location     Type
 12793 ;;                  1    wreg      void 
 12794 ;; Registers used:
 12795 ;;		wreg, status,2
 12796 ;; Tracked objects:
 12797 ;;		On entry : 0/0
 12798 ;;		On exit  : 0/0
 12799 ;;		Unchanged: 0/0
 12800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12801 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12802 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12803 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12804 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12805 ;;Total ram usage:        3 bytes
 12806 ;; Hardware stack levels used:    1
 12807 ;; This function calls:
 12808 ;;		Nothing
 12809 ;; This function is called by:
 12810 ;;		i2_stopOperation
 12811 ;; This function uses a non-reentrant model
 12812 ;;
 12813                           
 12814                           	psect	text38
 12815  003334                     __ptext38:
 12816                           	opt stack 0
 12817  003334                     i2_Eeprom_WriteByte:
 12818                           	opt stack 24
 12819                           
 12820                           ;main.c: 685: EEADRH = (uint8_t)(address >> 8);
 12821                           
 12822                           ;incstack = 0
 12823  003334  5002               	movf	i2Eeprom_WriteByte@address+1,w,c
 12824  003336  6EAA               	movwf	4010,c	;volatile
 12825                           
 12826                           ;main.c: 686: EEADR = (uint8_t)address;
 12827  003338  C001  FFA9         	movff	i2Eeprom_WriteByte@address,4009	;volatile
 12828                           
 12829                           ;main.c: 688: EEDATA = data;
 12830  00333C  C003  FFA8         	movff	i2Eeprom_WriteByte@data,4008	;volatile
 12831                           
 12832                           ;main.c: 689: EECON1bits.EEPGD = 0;
 12833  003340  9EA6               	bcf	4006,7,c	;volatile
 12834                           
 12835                           ;main.c: 690: EECON1bits.CFGS = 0;
 12836  003342  9CA6               	bcf	4006,6,c	;volatile
 12837                           
 12838                           ;main.c: 691: EECON1bits.WREN = 1;
 12839  003344  84A6               	bsf	4006,2,c	;volatile
 12840                           
 12841                           ;main.c: 695: EECON2 = 0x55;
 12842  003346  0E55               	movlw	85
 12843  003348  6EA7               	movwf	4007,c	;volatile
 12844                           
 12845                           ;main.c: 696: EECON2 = 0xAA;
 12846  00334A  0EAA               	movlw	170
 12847  00334C  6EA7               	movwf	4007,c	;volatile
 12848                           
 12849                           ;main.c: 697: EECON1bits.WR = 1;
 12850  00334E  82A6               	bsf	4006,1,c	;volatile
 12851  003350                     i2l467:
 12852  003350  A8A1               	btfss	4001,4,c	;volatile
 12853  003352  D7FE               	goto	i2l467
 12854                           
 12855                           ;main.c: 703: }
 12856                           ;main.c: 705: PIR2bits.EEIF = 0;
 12857  003354  98A1               	bcf	4001,4,c	;volatile
 12858                           
 12859                           ;main.c: 706: EECON1bits.WREN = 0;
 12860  003356  94A6               	bcf	4006,2,c	;volatile
 12861  003358  0012               	return		;funcret
 12862  00335A                     __end_ofi2_Eeprom_WriteByte:
 12863                           	opt stack 0
 12864                           pclatu	equ	0xFFB
 12865                           pclath	equ	0xFFA
 12866                           tblptru	equ	0xFF8
 12867                           tblptrh	equ	0xFF7
 12868                           tblptrl	equ	0xFF6
 12869                           tablat	equ	0xFF5
 12870                           prodh	equ	0xFF4
 12871                           prodl	equ	0xFF3
 12872                           intcon	equ	0xFF2
 12873                           intcon2	equ	0xFF1
 12874                           intcon3	equ	0xFF0
 12875                           postinc0	equ	0xFEE
 12876                           fsr0h	equ	0xFEA
 12877                           fsr0l	equ	0xFE9
 12878                           wreg	equ	0xFE8
 12879                           postdec1	equ	0xFE5
 12880                           plusw1	equ	0xFE3
 12881                           fsr1h	equ	0xFE2
 12882                           fsr1l	equ	0xFE1
 12883                           indf2	equ	0xFDF
 12884                           postinc2	equ	0xFDE
 12885                           postdec2	equ	0xFDD
 12886                           plusw2	equ	0xFDB
 12887                           fsr2h	equ	0xFDA
 12888                           fsr2l	equ	0xFD9
 12889                           status	equ	0xFD8
 12890                           
 12891 ;; *************** function i2_Eeprom_ReadByte *****************
 12892 ;; Defined at:
 12893 ;;		line 666 in file "../main.c"
 12894 ;; Parameters:    Size  Location     Type
 12895 ;;  address         2    0[COMRAM] unsigned int 
 12896 ;; Auto vars:     Size  Location     Type
 12897 ;;		None
 12898 ;; Return value:  Size  Location     Type
 12899 ;;                  1    wreg      unsigned char 
 12900 ;; Registers used:
 12901 ;;		wreg, status,2
 12902 ;; Tracked objects:
 12903 ;;		On entry : 0/0
 12904 ;;		On exit  : 0/0
 12905 ;;		Unchanged: 0/0
 12906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12907 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12908 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12909 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12910 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12911 ;;Total ram usage:        2 bytes
 12912 ;; Hardware stack levels used:    1
 12913 ;; This function calls:
 12914 ;;		Nothing
 12915 ;; This function is called by:
 12916 ;;		i2_stopOperation
 12917 ;; This function uses a non-reentrant model
 12918 ;;
 12919                           
 12920                           	psect	text39
 12921  003432                     __ptext39:
 12922                           	opt stack 0
 12923  003432                     i2_Eeprom_ReadByte:
 12924                           	opt stack 24
 12925                           
 12926                           ;main.c: 668: EEADRH = (uint8_t)(address >> 8);
 12927                           
 12928                           ;incstack = 0
 12929  003432  5002               	movf	i2Eeprom_ReadByte@address+1,w,c
 12930  003434  6EAA               	movwf	4010,c	;volatile
 12931                           
 12932                           ;main.c: 669: EEADR = (uint8_t)address;
 12933  003436  C001  FFA9         	movff	i2Eeprom_ReadByte@address,4009	;volatile
 12934                           
 12935                           ;main.c: 671: EECON1bits.EEPGD = 0;
 12936  00343A  9EA6               	bcf	4006,7,c	;volatile
 12937                           
 12938                           ;main.c: 672: EECON1bits.CFGS = 0;
 12939  00343C  9CA6               	bcf	4006,6,c	;volatile
 12940                           
 12941                           ;main.c: 673: EECON1bits.RD = 1;
 12942  00343E  80A6               	bsf	4006,0,c	;volatile
 12943  003440                     i2l461:
 12944  003440  B0A6               	btfsc	4006,0,c	;volatile
 12945  003442  D7FE               	goto	i2l461
 12946                           
 12947                           ;main.c: 679: return EEDATA;
 12948  003444  50A8               	movf	4008,w,c	;volatile
 12949  003446  0012               	return	
 12950  003448                     __end_ofi2_Eeprom_ReadByte:
 12951                           	opt stack 0
 12952                           pclatu	equ	0xFFB
 12953                           pclath	equ	0xFFA
 12954                           tblptru	equ	0xFF8
 12955                           tblptrh	equ	0xFF7
 12956                           tblptrl	equ	0xFF6
 12957                           tablat	equ	0xFF5
 12958                           prodh	equ	0xFF4
 12959                           prodl	equ	0xFF3
 12960                           intcon	equ	0xFF2
 12961                           intcon2	equ	0xFF1
 12962                           intcon3	equ	0xFF0
 12963                           postinc0	equ	0xFEE
 12964                           fsr0h	equ	0xFEA
 12965                           fsr0l	equ	0xFE9
 12966                           wreg	equ	0xFE8
 12967                           postdec1	equ	0xFE5
 12968                           plusw1	equ	0xFE3
 12969                           fsr1h	equ	0xFE2
 12970                           fsr1l	equ	0xFE1
 12971                           indf2	equ	0xFDF
 12972                           postinc2	equ	0xFDE
 12973                           postdec2	equ	0xFDD
 12974                           plusw2	equ	0xFDB
 12975                           fsr2h	equ	0xFDA
 12976                           fsr2l	equ	0xFD9
 12977                           status	equ	0xFD8
 12978                           
 12979 ;; *************** function i2_printf *****************
 12980 ;; Defined at:
 12981 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 12982 ;; Parameters:    Size  Location     Type
 12983 ;;  f               2   12[COMRAM] PTR const unsigned char 
 12984 ;;		 -> STR_40(20), STR_39(23), STR_38(23), STR_37(23), 
 12985 ;;		 -> STR_36(17), STR_35(15), STR_34(17), STR_33(23), 
 12986 ;;		 -> STR_32(23), STR_31(17), STR_30(17), STR_29(17), 
 12987 ;;		 -> STR_28(17), STR_27(17), STR_26(17), STR_25(17), 
 12988 ;;		 -> STR_24(17), STR_23(17), STR_22(17), STR_21(23), 
 12989 ;;		 -> STR_20(23), STR_19(17), STR_18(21), STR_17(17), 
 12990 ;;		 -> STR_16(21), STR_15(17), STR_14(21), STR_13(17), 
 12991 ;;		 -> STR_12(19), STR_11(17), STR_10(19), STR_9(17), 
 12992 ;;		 -> STR_8(25), STR_7(17), STR_6(17), STR_5(17), 
 12993 ;;		 -> STR_4(17), STR_3(17), STR_2(17), STR_1(17), 
 12994 ;; Auto vars:     Size  Location     Type
 12995 ;;  printf          4    0        struct .
 12996 ;;  printf          3    0        PTR const unsigned char 
 12997 ;;  printf          2   25[COMRAM] int 
 12998 ;;  printf          2   22[COMRAM] unsigned int 
 12999 ;;  printf          2   19[COMRAM] PTR void [1]
 13000 ;;		 -> ?i2_printf(2), ?_printf(2), 
 13001 ;;  printf          2    0        unsigned int 
 13002 ;;  printf          1   27[COMRAM] char 
 13003 ;;  printf          1   24[COMRAM] unsigned char 
 13004 ;;  printf          1   21[COMRAM] char 
 13005 ;;  printf          1   18[COMRAM] unsigned char 
 13006 ;; Return value:  Size  Location     Type
 13007 ;;                  2   12[COMRAM] int 
 13008 ;; Registers used:
 13009 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13010 ;; Tracked objects:
 13011 ;;		On entry : 0/0
 13012 ;;		On exit  : 0/0
 13013 ;;		Unchanged: 0/0
 13014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13015 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13016 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13017 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13018 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13019 ;;Total ram usage:       16 bytes
 13020 ;; Hardware stack levels used:    1
 13021 ;; Hardware stack levels required when called:    2
 13022 ;; This function calls:
 13023 ;;		i2___lwdiv
 13024 ;;		i2___lwmod
 13025 ;;		i2___wmul
 13026 ;;		i2_isdigit
 13027 ;;		i2_putch
 13028 ;; This function is called by:
 13029 ;;		_keypressed
 13030 ;; This function uses a non-reentrant model
 13031 ;;
 13032                           
 13033                           	psect	text40
 13034  001D02                     __ptext40:
 13035                           	opt stack 0
 13036  001D02                     i2_printf:
 13037                           	opt stack 22
 13038                           
 13039                           ;doprnt.c: 466: va_list ap;
 13040                           ;doprnt.c: 499: signed char c;
 13041                           ;doprnt.c: 501: int width;
 13042                           ;doprnt.c: 506: signed char prec;
 13043                           ;doprnt.c: 508: unsigned char flag;
 13044                           ;doprnt.c: 523: union {
 13045                           ;doprnt.c: 524: unsigned long vd;
 13046                           ;doprnt.c: 525: double integ;
 13047                           ;doprnt.c: 526: } tmpval;
 13048                           ;doprnt.c: 528: unsigned int val;
 13049                           ;doprnt.c: 529: unsigned len;
 13050                           ;doprnt.c: 530: const char * cp;
 13051                           ;doprnt.c: 533: *ap = __va_start();
 13052                           
 13053                           ;incstack = 0
 13054  001D02  0E0F               	movlw	low (?i2_printf+2)
 13055  001D04  6E14               	movwf	i2printf@ap,c
 13056  001D06  0E00               	movlw	high (?i2_printf+2)
 13057  001D08  6E15               	movwf	i2printf@ap+1,c
 13058                           
 13059                           ;doprnt.c: 536: while(c = *f++) {
 13060  001D0A  D174               	goto	i2l4383
 13061  001D0C                     i2l4257:
 13062                           
 13063                           ;doprnt.c: 538: if(c != '%')
 13064  001D0C  0E25               	movlw	37
 13065  001D0E  181C               	xorwf	i2printf@c,w,c
 13066  001D10  B4D8               	btfsc	status,2,c
 13067  001D12  D004               	goto	i2l4261
 13068                           
 13069                           ;doprnt.c: 540: {
 13070                           ;doprnt.c: 541: (putch(c) );
 13071  001D14  501C               	movf	i2printf@c,w,c
 13072  001D16  EC6B  F01A         	call	i2_putch
 13073                           
 13074                           ;doprnt.c: 542: continue;
 13075  001D1A  D16C               	goto	i2l4383
 13076  001D1C                     i2l4261:
 13077                           
 13078                           ;doprnt.c: 543: }
 13079                           ;doprnt.c: 546: width = 0;
 13080  001D1C  0E00               	movlw	0
 13081  001D1E  6E1B               	movwf	i2printf@width+1,c
 13082  001D20  0E00               	movlw	0
 13083  001D22  6E1A               	movwf	i2printf@width,c
 13084                           
 13085                           ;doprnt.c: 548: flag = 0;
 13086  001D24  0E00               	movlw	0
 13087  001D26  6E19               	movwf	i2printf@flag,c
 13088                           
 13089                           ;doprnt.c: 551: switch(*f) {
 13090                           
 13091                           ;doprnt.c: 550: for(;;) {
 13092  001D28  D003               	goto	i2l4267
 13093  001D2A                     i2l4263:
 13094                           
 13095                           ;doprnt.c: 580: flag |= 0x04;
 13096  001D2A  8419               	bsf	i2printf@flag,2,c
 13097                           
 13098                           ;doprnt.c: 581: f++;
 13099  001D2C  4A0D               	infsnz	i2printf@f,f,c
 13100  001D2E  2A0E               	incf	i2printf@f+1,f,c
 13101  001D30                     i2l4267:
 13102  001D30  C00D  FFF6         	movff	i2printf@f,tblptrl
 13103  001D34  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 13104  001D38                     	if	0	;tblptru may be non-zero
 13105  001D38                     	endif
 13106  001D38                     	if	0	;tblptru may be non-zero
 13107  001D38                     	endif
 13108  001D38  0008               	tblrd		*
 13109  001D3A  50F5               	movf	tablat,w,c
 13110                           
 13111                           ; Switch size 1, requested type "space"
 13112                           ; Number of cases is 1, Range of values is 48 to 48
 13113                           ; switch strategies available:
 13114                           ; Name         Instructions Cycles
 13115                           ; simple_byte            4     3 (average)
 13116                           ;	Chosen strategy is simple_byte
 13117  001D3C  0A30               	xorlw	48	; case 48
 13118  001D3E  B4D8               	btfsc	status,2,c
 13119  001D40  D7F4               	goto	i2l4263
 13120                           
 13121                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 13122                           
 13123                           ;doprnt.c: 586: }
 13124                           
 13125                           ;doprnt.c: 585: break;
 13126  001D42  C00D  FFF6         	movff	i2printf@f,tblptrl
 13127  001D46  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 13128  001D4A                     	if	0	;tblptru may be non-zero
 13129  001D4A                     	endif
 13130  001D4A                     	if	0	;tblptru may be non-zero
 13131  001D4A                     	endif
 13132  001D4A  0008               	tblrd		*
 13133  001D4C  50F5               	movf	tablat,w,c
 13134  001D4E  ECF2  F019         	call	i2_isdigit
 13135  001D52  A0D8               	btfss	status,0,c
 13136  001D54  D035               	goto	i2l4285
 13137                           
 13138                           ;doprnt.c: 598: width = 0;
 13139  001D56  0E00               	movlw	0
 13140  001D58  6E1B               	movwf	i2printf@width+1,c
 13141  001D5A  0E00               	movlw	0
 13142  001D5C  6E1A               	movwf	i2printf@width,c
 13143  001D5E                     i2l4273:
 13144                           
 13145                           ;doprnt.c: 600: width *= 10;
 13146  001D5E  C01A  F001         	movff	i2printf@width,i2___wmul@multiplier
 13147  001D62  C01B  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 13148  001D66  0E00               	movlw	0
 13149  001D68  6E04               	movwf	i2___wmul@multiplicand+1,c
 13150  001D6A  0E0A               	movlw	10
 13151  001D6C  6E03               	movwf	i2___wmul@multiplicand,c
 13152  001D6E  ECAD  F019         	call	i2___wmul	;wreg free
 13153  001D72  C001  F01A         	movff	?i2___wmul,i2printf@width
 13154  001D76  C002  F01B         	movff	?i2___wmul+1,i2printf@width+1
 13155                           
 13156                           ;doprnt.c: 601: width += *f++ - '0';
 13157  001D7A  0ED0               	movlw	208
 13158  001D7C  6E0F               	movwf	??i2_printf& (0+255),c
 13159  001D7E  0EFF               	movlw	255
 13160  001D80  6E10               	movwf	(??i2_printf+1)& (0+255),c
 13161  001D82  C00D  FFF6         	movff	i2printf@f,tblptrl
 13162  001D86  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 13163  001D8A                     	if	0	;tblptru may be non-zero
 13164  001D8A                     	endif
 13165  001D8A                     	if	0	;tblptru may be non-zero
 13166  001D8A                     	endif
 13167  001D8A  0008               	tblrd		*
 13168  001D8C  50F5               	movf	tablat,w,c
 13169  001D8E  6E11               	movwf	(??i2_printf+2)& (0+255),c
 13170  001D90  6A12               	clrf	(??i2_printf+3)& (0+255),c
 13171  001D92  500F               	movf	??i2_printf,w,c
 13172  001D94  2611               	addwf	??i2_printf+2,f,c
 13173  001D96  5010               	movf	??i2_printf+1,w,c
 13174  001D98  2212               	addwfc	??i2_printf+3,f,c
 13175  001D9A  5011               	movf	??i2_printf+2,w,c
 13176  001D9C  261A               	addwf	i2printf@width,f,c
 13177  001D9E  5012               	movf	??i2_printf+3,w,c
 13178  001DA0  221B               	addwfc	i2printf@width+1,f,c
 13179  001DA2  4A0D               	infsnz	i2printf@f,f,c
 13180  001DA4  2A0E               	incf	i2printf@f+1,f,c
 13181                           
 13182                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 13183  001DA6  C00D  FFF6         	movff	i2printf@f,tblptrl
 13184  001DAA  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 13185  001DAE                     	if	0	;tblptru may be non-zero
 13186  001DAE                     	endif
 13187  001DAE                     	if	0	;tblptru may be non-zero
 13188  001DAE                     	endif
 13189  001DAE  0008               	tblrd		*
 13190  001DB0  50F5               	movf	tablat,w,c
 13191  001DB2  ECF2  F019         	call	i2_isdigit
 13192  001DB6  A0D8               	btfss	status,0,c
 13193  001DB8  D003               	goto	i2l4285
 13194  001DBA  D7D1               	goto	i2l4273
 13195  001DBC                     i2l4281:
 13196                           
 13197                           ;doprnt.c: 721: flag |= 0x80;
 13198  001DBC  8E19               	bsf	i2printf@flag,7,c
 13199                           
 13200                           ;doprnt.c: 723: break;
 13201  001DBE  D017               	goto	i2l621
 13202  001DC0                     i2l4285:
 13203  001DC0  C00D  FFF6         	movff	i2printf@f,tblptrl
 13204  001DC4  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 13205  001DC8  4A0D               	infsnz	i2printf@f,f,c
 13206  001DCA  2A0E               	incf	i2printf@f+1,f,c
 13207  001DCC                     	if	0	;tblptru may be non-zero
 13208  001DCC                     	endif
 13209  001DCC                     	if	0	;tblptru may be non-zero
 13210  001DCC                     	endif
 13211  001DCC  0008               	tblrd		*
 13212  001DCE  CFF5 F01C          	movff	tablat,i2printf@c
 13213  001DD2  501C               	movf	i2printf@c,w,c
 13214                           
 13215                           ; Switch size 1, requested type "space"
 13216                           ; Number of cases is 4, Range of values is 0 to 120
 13217                           ; switch strategies available:
 13218                           ; Name         Instructions Cycles
 13219                           ; simple_byte           13     7 (average)
 13220                           ;	Chosen strategy is simple_byte
 13221  001DD4  0A00               	xorlw	0	; case 0
 13222  001DD6  B4D8               	btfsc	status,2,c
 13223  001DD8  0012               	return	
 13224  001DDA  0A64               	xorlw	100	; case 100
 13225  001DDC  B4D8               	btfsc	status,2,c
 13226  001DDE  D007               	goto	i2l621
 13227  001DE0  0A0D               	xorlw	13	; case 105
 13228  001DE2  B4D8               	btfsc	status,2,c
 13229  001DE4  D004               	goto	i2l621
 13230  001DE6  0A11               	xorlw	17	; case 120
 13231  001DE8  B4D8               	btfsc	status,2,c
 13232  001DEA  D7E8               	goto	i2l4281
 13233  001DEC  D103               	goto	i2l4383
 13234  001DEE                     i2l621:
 13235                           
 13236                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
 13237  001DEE  BE19               	btfsc	i2printf@flag,7,c
 13238  001DF0  D015               	goto	i2l4297
 13239                           
 13240                           ;doprnt.c: 1253: {
 13241                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 13242  001DF2  C014  FFD9         	movff	i2printf@ap,fsr2l
 13243  001DF6  C015  FFDA         	movff	i2printf@ap+1,fsr2h
 13244  001DFA  CFDE F017          	movff	postinc2,i2printf@val
 13245  001DFE  CFDD F018          	movff	postdec2,i2printf@val+1
 13246  001E02  0E02               	movlw	2
 13247  001E04  2614               	addwf	i2printf@ap,f,c
 13248  001E06  0E00               	movlw	0
 13249  001E08  2215               	addwfc	i2printf@ap+1,f,c
 13250                           
 13251                           ;doprnt.c: 1261: if((int)val < 0) {
 13252  001E0A  AE18               	btfss	i2printf@val+1,7,c
 13253  001E0C  D044               	goto	i2l4331
 13254                           
 13255                           ;doprnt.c: 1262: flag |= 0x03;
 13256  001E0E  0E03               	movlw	3
 13257  001E10  1219               	iorwf	i2printf@flag,f,c
 13258                           
 13259                           ;doprnt.c: 1263: val = -val;
 13260  001E12  6C17               	negf	i2printf@val,c
 13261  001E14  1E18               	comf	i2printf@val+1,f,c
 13262  001E16  B0D8               	btfsc	status,0,c
 13263  001E18  2A18               	incf	i2printf@val+1,f,c
 13264                           
 13265                           ;doprnt.c: 1264: }
 13266                           ;doprnt.c: 1266: }
 13267  001E1A  D03D               	goto	i2l4331
 13268  001E1C                     i2l4297:
 13269                           
 13270                           ;doprnt.c: 1268: else
 13271                           ;doprnt.c: 1273: {
 13272                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 13273  001E1C  C014  FFD9         	movff	i2printf@ap,fsr2l
 13274  001E20  C015  FFDA         	movff	i2printf@ap+1,fsr2h
 13275  001E24  CFDE F017          	movff	postinc2,i2printf@val
 13276  001E28  CFDD F018          	movff	postdec2,i2printf@val+1
 13277  001E2C  0E02               	movlw	2
 13278  001E2E  2614               	addwf	i2printf@ap,f,c
 13279  001E30  0E00               	movlw	0
 13280  001E32  2215               	addwfc	i2printf@ap+1,f,c
 13281                           
 13282                           ;doprnt.c: 1287: }
 13283                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
 13284  001E34  D030               	goto	i2l4331
 13285  001E36                     i2l4301:
 13286                           
 13287                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 13288  001E36  0E01               	movlw	1
 13289  001E38  6E1C               	movwf	i2printf@c,c
 13290  001E3A                     i2l4303:
 13291  001E3A  0E05               	movlw	5
 13292  001E3C  181C               	xorwf	i2printf@c,w,c
 13293  001E3E  B4D8               	btfsc	status,2,c
 13294  001E40  D032               	goto	i2l4333
 13295                           
 13296                           ;doprnt.c: 1306: if(val < dpowers[c])
 13297  001E42  501C               	movf	i2printf@c,w,c
 13298  001E44  0D02               	mullw	2
 13299  001E46  0E8E               	movlw	low _dpowers
 13300  001E48  24F3               	addwf	prodl,w,c
 13301  001E4A  6EF6               	movwf	tblptrl,c
 13302  001E4C  0EFD               	movlw	high _dpowers
 13303  001E4E  20F4               	addwfc	prodh,w,c
 13304  001E50  6EF7               	movwf	tblptrh,c
 13305  001E52                     	if	0	;There are less than 3 active tblptr bytes
 13306  001E52                     	endif
 13307  001E52  0009               	tblrd		*+
 13308  001E54  50F5               	movf	tablat,w,c
 13309  001E56  5C17               	subwf	i2printf@val,w,c
 13310  001E58  0009               	tblrd		*+
 13311  001E5A  50F5               	movf	tablat,w,c
 13312  001E5C  5818               	subwfb	i2printf@val+1,w,c
 13313  001E5E  A0D8               	btfss	status,0,c
 13314  001E60  D022               	goto	i2l4333
 13315                           
 13316                           ;doprnt.c: 1307: break;
 13317  001E62  2A1C               	incf	i2printf@c,f,c
 13318  001E64  D7EA               	goto	i2l4303
 13319  001E66                     i2l4315:
 13320                           
 13321                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 13322  001E66  0E01               	movlw	1
 13323  001E68  6E1C               	movwf	i2printf@c,c
 13324  001E6A                     i2l4317:
 13325  001E6A  0E04               	movlw	4
 13326  001E6C  181C               	xorwf	i2printf@c,w,c
 13327  001E6E  B4D8               	btfsc	status,2,c
 13328  001E70  D01A               	goto	i2l4333
 13329                           
 13330                           ;doprnt.c: 1317: if(val < hexpowers[c])
 13331  001E72  501C               	movf	i2printf@c,w,c
 13332  001E74  0D02               	mullw	2
 13333  001E76  0E98               	movlw	low _hexpowers
 13334  001E78  24F3               	addwf	prodl,w,c
 13335  001E7A  6EF6               	movwf	tblptrl,c
 13336  001E7C  0EFD               	movlw	high _hexpowers
 13337  001E7E  20F4               	addwfc	prodh,w,c
 13338  001E80  6EF7               	movwf	tblptrh,c
 13339  001E82                     	if	0	;There are less than 3 active tblptr bytes
 13340  001E82                     	endif
 13341  001E82  0009               	tblrd		*+
 13342  001E84  50F5               	movf	tablat,w,c
 13343  001E86  5C17               	subwf	i2printf@val,w,c
 13344  001E88  0009               	tblrd		*+
 13345  001E8A  50F5               	movf	tablat,w,c
 13346  001E8C  5818               	subwfb	i2printf@val+1,w,c
 13347  001E8E  A0D8               	btfss	status,0,c
 13348  001E90  D00A               	goto	i2l4333
 13349                           
 13350                           ;doprnt.c: 1318: break;
 13351  001E92  2A1C               	incf	i2printf@c,f,c
 13352  001E94  D7EA               	goto	i2l4317
 13353  001E96                     i2l4331:
 13354  001E96  5019               	movf	i2printf@flag,w,c
 13355  001E98  0B80               	andlw	128
 13356                           
 13357                           ; Switch size 1, requested type "space"
 13358                           ; Number of cases is 2, Range of values is 0 to 128
 13359                           ; switch strategies available:
 13360                           ; Name         Instructions Cycles
 13361                           ; simple_byte            7     4 (average)
 13362                           ;	Chosen strategy is simple_byte
 13363  001E9A  0A00               	xorlw	0	; case 0
 13364  001E9C  B4D8               	btfsc	status,2,c
 13365  001E9E  D7CB               	goto	i2l4301
 13366  001EA0  0A80               	xorlw	128	; case 128
 13367  001EA2  B4D8               	btfsc	status,2,c
 13368  001EA4  D7E0               	goto	i2l4315
 13369  001EA6                     i2l4333:
 13370                           
 13371                           ;doprnt.c: 1345: if(width && flag & 0x03)
 13372  001EA6  501A               	movf	i2printf@width,w,c
 13373  001EA8  101B               	iorwf	i2printf@width+1,w,c
 13374  001EAA  B4D8               	btfsc	status,2,c
 13375  001EAC  D009               	goto	i2l4339
 13376  001EAE  C019  F00F         	movff	i2printf@flag,??i2_printf
 13377  001EB2  0E03               	movlw	3
 13378  001EB4  160F               	andwf	??i2_printf,f,c
 13379  001EB6  B4D8               	btfsc	status,2,c
 13380  001EB8  D003               	goto	i2l4339
 13381                           
 13382                           ;doprnt.c: 1346: width--;
 13383  001EBA  061A               	decf	i2printf@width,f,c
 13384  001EBC  A0D8               	btfss	status,0,c
 13385  001EBE  061B               	decf	i2printf@width+1,f,c
 13386  001EC0                     i2l4339:
 13387                           
 13388                           ;doprnt.c: 1381: if(width > c)
 13389  001EC0  0E80               	movlw	128
 13390  001EC2  BE1C               	btfsc	i2printf@c,7,c
 13391  001EC4  0E7F               	movlw	127
 13392  001EC6  6E0F               	movwf	??i2_printf& (0+255),c
 13393  001EC8  501A               	movf	i2printf@width,w,c
 13394  001ECA  5C1C               	subwf	i2printf@c,w,c
 13395  001ECC  501B               	movf	i2printf@width+1,w,c
 13396  001ECE  0A80               	xorlw	128
 13397  001ED0  580F               	subwfb	??i2_printf& (0+255),w,c
 13398  001ED2  B0D8               	btfsc	status,0,c
 13399  001ED4  D007               	goto	i2l4343
 13400                           
 13401                           ;doprnt.c: 1382: width -= c;
 13402  001ED6  501C               	movf	i2printf@c,w,c
 13403  001ED8  5E1A               	subwf	i2printf@width,f,c
 13404  001EDA  0E00               	movlw	0
 13405  001EDC  BE1C               	btfsc	i2printf@c,7,c
 13406  001EDE  0EFF               	movlw	255
 13407  001EE0  5A1B               	subwfb	i2printf@width+1,f,c
 13408  001EE2  D004               	goto	i2l4345
 13409  001EE4                     i2l4343:
 13410                           
 13411                           ;doprnt.c: 1383: else
 13412                           ;doprnt.c: 1384: width = 0;
 13413  001EE4  0E00               	movlw	0
 13414  001EE6  6E1B               	movwf	i2printf@width+1,c
 13415  001EE8  0E00               	movlw	0
 13416  001EEA  6E1A               	movwf	i2printf@width,c
 13417  001EEC                     i2l4345:
 13418                           
 13419                           ;doprnt.c: 1387: if(flag & 0x04) {
 13420  001EEC  A419               	btfss	i2printf@flag,2,c
 13421  001EEE  D014               	goto	i2l4357
 13422                           
 13423                           ;doprnt.c: 1392: if(flag & 0x03)
 13424  001EF0  C019  F00F         	movff	i2printf@flag,??i2_printf
 13425  001EF4  0E03               	movlw	3
 13426  001EF6  160F               	andwf	??i2_printf,f,c
 13427  001EF8  B4D8               	btfsc	status,2,c
 13428  001EFA  D003               	goto	i2l4351
 13429                           
 13430                           ;doprnt.c: 1393: (putch('-') );
 13431  001EFC  0E2D               	movlw	45
 13432  001EFE  EC6B  F01A         	call	i2_putch
 13433  001F02                     i2l4351:
 13434                           
 13435                           ;doprnt.c: 1415: if(width)
 13436  001F02  501A               	movf	i2printf@width,w,c
 13437  001F04  101B               	iorwf	i2printf@width+1,w,c
 13438  001F06  B4D8               	btfsc	status,2,c
 13439  001F08  D01E               	goto	i2l4367
 13440                           
 13441                           ;doprnt.c: 1417: (putch('0') );
 13442                           
 13443                           ;doprnt.c: 1416: do
 13444  001F0A  0E30               	movlw	48
 13445  001F0C  EC6B  F01A         	call	i2_putch
 13446                           
 13447                           ;doprnt.c: 1418: while(--width);
 13448  001F10  061A               	decf	i2printf@width,f,c
 13449  001F12  A0D8               	btfss	status,0,c
 13450  001F14  061B               	decf	i2printf@width+1,f,c
 13451  001F16  D7F5               	goto	i2l4351
 13452  001F18                     i2l4357:
 13453                           
 13454                           ;doprnt.c: 1422: {
 13455                           ;doprnt.c: 1424: if(width
 13456                           ;doprnt.c: 1428: )
 13457  001F18  501A               	movf	i2printf@width,w,c
 13458  001F1A  101B               	iorwf	i2printf@width+1,w,c
 13459  001F1C  B4D8               	btfsc	status,2,c
 13460  001F1E  D00A               	goto	i2l4363
 13461  001F20                     i2l4359:
 13462                           
 13463                           ;doprnt.c: 1430: (putch(' ') );
 13464  001F20  0E20               	movlw	32
 13465  001F22  EC6B  F01A         	call	i2_putch
 13466                           
 13467                           ;doprnt.c: 1431: while(--width);
 13468  001F26  061A               	decf	i2printf@width,f,c
 13469  001F28  A0D8               	btfss	status,0,c
 13470  001F2A  061B               	decf	i2printf@width+1,f,c
 13471  001F2C  501A               	movf	i2printf@width,w,c
 13472  001F2E  101B               	iorwf	i2printf@width+1,w,c
 13473  001F30  A4D8               	btfss	status,2,c
 13474  001F32  D7F6               	goto	i2l4359
 13475  001F34                     i2l4363:
 13476                           
 13477                           ;doprnt.c: 1438: if(flag & 0x03)
 13478  001F34  C019  F00F         	movff	i2printf@flag,??i2_printf
 13479  001F38  0E03               	movlw	3
 13480  001F3A  160F               	andwf	??i2_printf,f,c
 13481  001F3C  B4D8               	btfsc	status,2,c
 13482  001F3E  D003               	goto	i2l4367
 13483                           
 13484                           ;doprnt.c: 1439: (putch('-') );
 13485  001F40  0E2D               	movlw	45
 13486  001F42  EC6B  F01A         	call	i2_putch
 13487  001F46                     i2l4367:
 13488                           
 13489                           ;doprnt.c: 1469: }
 13490                           ;doprnt.c: 1472: prec = c;
 13491  001F46  C01C  F016         	movff	i2printf@c,i2printf@prec
 13492                           
 13493                           ;doprnt.c: 1474: while(prec--) {
 13494  001F4A  D050               	goto	i2l4381
 13495  001F4C                     i2l4369:
 13496                           
 13497                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 13498  001F4C  5016               	movf	i2printf@prec,w,c
 13499  001F4E  0D02               	mullw	2
 13500  001F50  0E8E               	movlw	low _dpowers
 13501  001F52  24F3               	addwf	prodl,w,c
 13502  001F54  6EF6               	movwf	tblptrl,c
 13503  001F56  0EFD               	movlw	high _dpowers
 13504  001F58  20F4               	addwfc	prodh,w,c
 13505  001F5A  6EF7               	movwf	tblptrh,c
 13506  001F5C                     	if	0	;There are less than 3 active tblptr bytes
 13507  001F5C                     	endif
 13508  001F5C  0009               	tblrd		*+
 13509  001F5E  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
 13510  001F62  000A               	tblrd		*-
 13511  001F64  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 13512  001F68  C017  F001         	movff	i2printf@val,i2___lwdiv@dividend
 13513  001F6C  C018  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 13514  001F70  EC62  F018         	call	i2___lwdiv	;wreg free
 13515  001F74  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
 13516  001F78  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 13517  001F7C  0E00               	movlw	0
 13518  001F7E  6E0B               	movwf	i2___lwmod@divisor+1,c
 13519  001F80  0E0A               	movlw	10
 13520  001F82  6E0A               	movwf	i2___lwmod@divisor,c
 13521  001F84  ECFE  F018         	call	i2___lwmod	;wreg free
 13522  001F88  5008               	movf	?i2___lwmod,w,c
 13523  001F8A  0F30               	addlw	48
 13524  001F8C  6E1C               	movwf	i2printf@c,c
 13525                           
 13526                           ;doprnt.c: 1491: break;
 13527  001F8E  D02B               	goto	i2l4379
 13528  001F90                     i2l4371:
 13529                           
 13530                           ;doprnt.c: 1499: {
 13531                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 13532  001F90  C017  F001         	movff	i2printf@val,i2___lwdiv@dividend
 13533  001F94  C018  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 13534  001F98  5016               	movf	i2printf@prec,w,c
 13535  001F9A  0D02               	mullw	2
 13536  001F9C  0E98               	movlw	low _hexpowers
 13537  001F9E  24F3               	addwf	prodl,w,c
 13538  001FA0  6EF6               	movwf	tblptrl,c
 13539  001FA2  0EFD               	movlw	high _hexpowers
 13540  001FA4  20F4               	addwfc	prodh,w,c
 13541  001FA6  6EF7               	movwf	tblptrh,c
 13542  001FA8                     	if	0	;There are less than 3 active tblptr bytes
 13543  001FA8                     	endif
 13544  001FA8  0009               	tblrd		*+
 13545  001FAA  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
 13546  001FAE  000A               	tblrd		*-
 13547  001FB0  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 13548  001FB4  EC62  F018         	call	i2___lwdiv	;wreg free
 13549  001FB8  5001               	movf	?i2___lwdiv,w,c
 13550  001FBA  0B0F               	andlw	15
 13551  001FBC  6E13               	movwf	i2printf@idx,c
 13552                           
 13553                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 13554  001FBE  5013               	movf	i2printf@idx,w,c
 13555  001FC0  0D01               	mullw	1
 13556  001FC2  0E68               	movlw	low STR_41
 13557  001FC4  24F3               	addwf	prodl,w,c
 13558  001FC6  6EF6               	movwf	tblptrl,c
 13559  001FC8  0EFE               	movlw	high STR_41
 13560  001FCA  20F4               	addwfc	prodh,w,c
 13561  001FCC  6EF7               	movwf	tblptrh,c
 13562  001FCE                     	if	0	;There are less than 3 active tblptr bytes
 13563  001FCE                     	endif
 13564  001FCE  0008               	tblrd		*
 13565  001FD0  CFF5 F01C          	movff	tablat,i2printf@c
 13566                           
 13567                           ;doprnt.c: 1523: }
 13568                           
 13569                           ;doprnt.c: 1508: }
 13570                           ;doprnt.c: 1510: break;
 13571  001FD4  D008               	goto	i2l4379
 13572  001FD6                     i2l4377:
 13573  001FD6  5019               	movf	i2printf@flag,w,c
 13574  001FD8  0B80               	andlw	128
 13575                           
 13576                           ; Switch size 1, requested type "space"
 13577                           ; Number of cases is 2, Range of values is 0 to 128
 13578                           ; switch strategies available:
 13579                           ; Name         Instructions Cycles
 13580                           ; simple_byte            7     4 (average)
 13581                           ;	Chosen strategy is simple_byte
 13582  001FDA  0A00               	xorlw	0	; case 0
 13583  001FDC  B4D8               	btfsc	status,2,c
 13584  001FDE  D7B6               	goto	i2l4369
 13585  001FE0  0A80               	xorlw	128	; case 128
 13586  001FE2  B4D8               	btfsc	status,2,c
 13587  001FE4  D7D5               	goto	i2l4371
 13588  001FE6                     i2l4379:
 13589                           
 13590                           ;doprnt.c: 1524: (putch(c) );
 13591  001FE6  501C               	movf	i2printf@c,w,c
 13592  001FE8  EC6B  F01A         	call	i2_putch
 13593  001FEC                     i2l4381:
 13594  001FEC  0616               	decf	i2printf@prec,f,c
 13595  001FEE  2816               	incf	i2printf@prec,w,c
 13596  001FF0  A4D8               	btfss	status,2,c
 13597  001FF2  D7F1               	goto	i2l4377
 13598  001FF4                     i2l4383:
 13599  001FF4  C00D  FFF6         	movff	i2printf@f,tblptrl
 13600  001FF8  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 13601  001FFC  4A0D               	infsnz	i2printf@f,f,c
 13602  001FFE  2A0E               	incf	i2printf@f+1,f,c
 13603  002000                     	if	0	;tblptru may be non-zero
 13604  002000                     	endif
 13605  002000                     	if	0	;tblptru may be non-zero
 13606  002000                     	endif
 13607  002000  0008               	tblrd		*
 13608  002002  CFF5 F01C          	movff	tablat,i2printf@c
 13609  002006  501C               	movf	i2printf@c,w,c
 13610  002008  B4D8               	btfsc	status,2,c
 13611  00200A  0012               	return	
 13612  00200C  D67F               	goto	i2l4257
 13613  00200E                     __end_ofi2_printf:
 13614                           	opt stack 0
 13615                           pclatu	equ	0xFFB
 13616                           pclath	equ	0xFFA
 13617                           tblptru	equ	0xFF8
 13618                           tblptrh	equ	0xFF7
 13619                           tblptrl	equ	0xFF6
 13620                           tablat	equ	0xFF5
 13621                           prodh	equ	0xFF4
 13622                           prodl	equ	0xFF3
 13623                           intcon	equ	0xFF2
 13624                           intcon2	equ	0xFF1
 13625                           intcon3	equ	0xFF0
 13626                           postinc0	equ	0xFEE
 13627                           fsr0h	equ	0xFEA
 13628                           fsr0l	equ	0xFE9
 13629                           wreg	equ	0xFE8
 13630                           postdec1	equ	0xFE5
 13631                           plusw1	equ	0xFE3
 13632                           fsr1h	equ	0xFE2
 13633                           fsr1l	equ	0xFE1
 13634                           indf2	equ	0xFDF
 13635                           postinc2	equ	0xFDE
 13636                           postdec2	equ	0xFDD
 13637                           plusw2	equ	0xFDB
 13638                           fsr2h	equ	0xFDA
 13639                           fsr2l	equ	0xFD9
 13640                           status	equ	0xFD8
 13641                           
 13642 ;; *************** function i2_putch *****************
 13643 ;; Defined at:
 13644 ;;		line 23 in file "../lcd.c"
 13645 ;; Parameters:    Size  Location     Type
 13646 ;;  data            1    wreg     unsigned char 
 13647 ;; Auto vars:     Size  Location     Type
 13648 ;;  data            1    2[COMRAM] unsigned char 
 13649 ;; Return value:  Size  Location     Type
 13650 ;;                  1    wreg      void 
 13651 ;; Registers used:
 13652 ;;		wreg, status,2, status,0, cstack
 13653 ;; Tracked objects:
 13654 ;;		On entry : 0/0
 13655 ;;		On exit  : 0/0
 13656 ;;		Unchanged: 0/0
 13657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13658 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13659 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13660 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13661 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13662 ;;Total ram usage:        1 bytes
 13663 ;; Hardware stack levels used:    1
 13664 ;; Hardware stack levels required when called:    1
 13665 ;; This function calls:
 13666 ;;		i2_lcdNibble
 13667 ;; This function is called by:
 13668 ;;		i2_printf
 13669 ;; This function uses a non-reentrant model
 13670 ;;
 13671                           
 13672                           	psect	text41
 13673  0034D6                     __ptext41:
 13674                           	opt stack 0
 13675  0034D6                     i2_putch:
 13676                           	opt stack 22
 13677                           
 13678                           ;incstack = 0
 13679                           ;i2putch@data stored from wreg
 13680  0034D6  6E03               	movwf	i2putch@data,c
 13681                           
 13682                           ;lcd.c: 24: LATDbits.LATD2 = 1;
 13683  0034D8  848C               	bsf	3980,2,c	;volatile
 13684                           
 13685                           ;lcd.c: 25: lcdNibble(data);
 13686  0034DA  5003               	movf	i2putch@data,w,c
 13687  0034DC  ECB2  F018         	call	i2_lcdNibble
 13688  0034E0  0012               	return		;funcret
 13689  0034E2                     __end_ofi2_putch:
 13690                           	opt stack 0
 13691                           pclatu	equ	0xFFB
 13692                           pclath	equ	0xFFA
 13693                           tblptru	equ	0xFF8
 13694                           tblptrh	equ	0xFF7
 13695                           tblptrl	equ	0xFF6
 13696                           tablat	equ	0xFF5
 13697                           prodh	equ	0xFF4
 13698                           prodl	equ	0xFF3
 13699                           intcon	equ	0xFF2
 13700                           intcon2	equ	0xFF1
 13701                           intcon3	equ	0xFF0
 13702                           postinc0	equ	0xFEE
 13703                           fsr0h	equ	0xFEA
 13704                           fsr0l	equ	0xFE9
 13705                           wreg	equ	0xFE8
 13706                           postdec1	equ	0xFE5
 13707                           plusw1	equ	0xFE3
 13708                           fsr1h	equ	0xFE2
 13709                           fsr1l	equ	0xFE1
 13710                           indf2	equ	0xFDF
 13711                           postinc2	equ	0xFDE
 13712                           postdec2	equ	0xFDD
 13713                           plusw2	equ	0xFDB
 13714                           fsr2h	equ	0xFDA
 13715                           fsr2l	equ	0xFD9
 13716                           status	equ	0xFD8
 13717                           
 13718 ;; *************** function i2_isdigit *****************
 13719 ;; Defined at:
 13720 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 13721 ;; Parameters:    Size  Location     Type
 13722 ;;  c               1    wreg     unsigned char 
 13723 ;; Auto vars:     Size  Location     Type
 13724 ;;  c               1    2[COMRAM] unsigned char 
 13725 ;; Return value:  Size  Location     Type
 13726 ;;		None               void
 13727 ;; Registers used:
 13728 ;;		wreg, status,2, status,0
 13729 ;; Tracked objects:
 13730 ;;		On entry : 0/0
 13731 ;;		On exit  : 0/0
 13732 ;;		Unchanged: 0/0
 13733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13735 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13736 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13737 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13738 ;;Total ram usage:        3 bytes
 13739 ;; Hardware stack levels used:    1
 13740 ;; This function calls:
 13741 ;;		Nothing
 13742 ;; This function is called by:
 13743 ;;		i2_printf
 13744 ;; This function uses a non-reentrant model
 13745 ;;
 13746                           
 13747                           	psect	text42
 13748  0033E4                     __ptext42:
 13749                           	opt stack 0
 13750  0033E4                     i2_isdigit:
 13751                           	opt stack 23
 13752                           
 13753                           ;incstack = 0
 13754                           ;i2isdigit@c stored from wreg
 13755  0033E4  6E03               	movwf	i2isdigit@c,c
 13756  0033E6  0E00               	movlw	0
 13757  0033E8  6E02               	movwf	i2_isdigit$1195,c
 13758  0033EA  0E3A               	movlw	58
 13759  0033EC  6003               	cpfslt	i2isdigit@c,c
 13760  0033EE  D005               	goto	i2l3731
 13761  0033F0  0E2F               	movlw	47
 13762  0033F2  6403               	cpfsgt	i2isdigit@c,c
 13763  0033F4  D002               	goto	i2l3731
 13764  0033F6  0E01               	movlw	1
 13765  0033F8  6E02               	movwf	i2_isdigit$1195,c
 13766  0033FA                     i2l3731:
 13767  0033FA  C002  F001         	movff	i2_isdigit$1195,??i2_isdigit
 13768  0033FE  3001               	rrcf	??i2_isdigit,w,c
 13769  003400  0012               	return	
 13770  003402                     __end_ofi2_isdigit:
 13771                           	opt stack 0
 13772                           pclatu	equ	0xFFB
 13773                           pclath	equ	0xFFA
 13774                           tblptru	equ	0xFF8
 13775                           tblptrh	equ	0xFF7
 13776                           tblptrl	equ	0xFF6
 13777                           tablat	equ	0xFF5
 13778                           prodh	equ	0xFF4
 13779                           prodl	equ	0xFF3
 13780                           intcon	equ	0xFF2
 13781                           intcon2	equ	0xFF1
 13782                           intcon3	equ	0xFF0
 13783                           postinc0	equ	0xFEE
 13784                           fsr0h	equ	0xFEA
 13785                           fsr0l	equ	0xFE9
 13786                           wreg	equ	0xFE8
 13787                           postdec1	equ	0xFE5
 13788                           plusw1	equ	0xFE3
 13789                           fsr1h	equ	0xFE2
 13790                           fsr1l	equ	0xFE1
 13791                           indf2	equ	0xFDF
 13792                           postinc2	equ	0xFDE
 13793                           postdec2	equ	0xFDD
 13794                           plusw2	equ	0xFDB
 13795                           fsr2h	equ	0xFDA
 13796                           fsr2l	equ	0xFD9
 13797                           status	equ	0xFD8
 13798                           
 13799 ;; *************** function i2___wmul *****************
 13800 ;; Defined at:
 13801 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 13802 ;; Parameters:    Size  Location     Type
 13803 ;;  multiplier      2    0[COMRAM] unsigned int 
 13804 ;;  multiplicand    2    2[COMRAM] unsigned int 
 13805 ;; Auto vars:     Size  Location     Type
 13806 ;;  __wmul          2    4[COMRAM] unsigned int 
 13807 ;; Return value:  Size  Location     Type
 13808 ;;                  2    0[COMRAM] unsigned int 
 13809 ;; Registers used:
 13810 ;;		wreg, status,2, status,0, prodl, prodh
 13811 ;; Tracked objects:
 13812 ;;		On entry : 0/0
 13813 ;;		On exit  : 0/0
 13814 ;;		Unchanged: 0/0
 13815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13816 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13817 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13818 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13819 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13820 ;;Total ram usage:        6 bytes
 13821 ;; Hardware stack levels used:    1
 13822 ;; This function calls:
 13823 ;;		Nothing
 13824 ;; This function is called by:
 13825 ;;		i2_printf
 13826 ;; This function uses a non-reentrant model
 13827 ;;
 13828                           
 13829                           	psect	text43
 13830  00335A                     __ptext43:
 13831                           	opt stack 0
 13832  00335A                     i2___wmul:
 13833                           	opt stack 23
 13834                           
 13835                           ;incstack = 0
 13836  00335A  5001               	movf	i2___wmul@multiplier,w,c
 13837  00335C  0203               	mulwf	i2___wmul@multiplicand,c
 13838  00335E  CFF3 F005          	movff	prodl,i2___wmul@product
 13839  003362  CFF4 F006          	movff	prodh,i2___wmul@product+1
 13840  003366  5001               	movf	i2___wmul@multiplier,w,c
 13841  003368  0204               	mulwf	i2___wmul@multiplicand+1,c
 13842  00336A  50F3               	movf	prodl,w,c
 13843  00336C  2606               	addwf	i2___wmul@product+1,f,c
 13844  00336E  5002               	movf	i2___wmul@multiplier+1,w,c
 13845  003370  0203               	mulwf	i2___wmul@multiplicand,c
 13846  003372  50F3               	movf	prodl,w,c
 13847  003374  2606               	addwf	i2___wmul@product+1,f,c
 13848  003376  C005  F001         	movff	i2___wmul@product,?i2___wmul
 13849  00337A  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 13850  00337E  0012               	return	
 13851  003380                     __end_ofi2___wmul:
 13852                           	opt stack 0
 13853                           pclatu	equ	0xFFB
 13854                           pclath	equ	0xFFA
 13855                           tblptru	equ	0xFF8
 13856                           tblptrh	equ	0xFF7
 13857                           tblptrl	equ	0xFF6
 13858                           tablat	equ	0xFF5
 13859                           prodh	equ	0xFF4
 13860                           prodl	equ	0xFF3
 13861                           intcon	equ	0xFF2
 13862                           intcon2	equ	0xFF1
 13863                           intcon3	equ	0xFF0
 13864                           postinc0	equ	0xFEE
 13865                           fsr0h	equ	0xFEA
 13866                           fsr0l	equ	0xFE9
 13867                           wreg	equ	0xFE8
 13868                           postdec1	equ	0xFE5
 13869                           plusw1	equ	0xFE3
 13870                           fsr1h	equ	0xFE2
 13871                           fsr1l	equ	0xFE1
 13872                           indf2	equ	0xFDF
 13873                           postinc2	equ	0xFDE
 13874                           postdec2	equ	0xFDD
 13875                           plusw2	equ	0xFDB
 13876                           fsr2h	equ	0xFDA
 13877                           fsr2l	equ	0xFD9
 13878                           status	equ	0xFD8
 13879                           
 13880 ;; *************** function i2___lwmod *****************
 13881 ;; Defined at:
 13882 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 13883 ;; Parameters:    Size  Location     Type
 13884 ;;  dividend        2    7[COMRAM] unsigned int 
 13885 ;;  divisor         2    9[COMRAM] unsigned int 
 13886 ;; Auto vars:     Size  Location     Type
 13887 ;;  __lwmod         1   11[COMRAM] unsigned char 
 13888 ;; Return value:  Size  Location     Type
 13889 ;;                  2    7[COMRAM] unsigned int 
 13890 ;; Registers used:
 13891 ;;		wreg, status,2, status,0
 13892 ;; Tracked objects:
 13893 ;;		On entry : 0/0
 13894 ;;		On exit  : 0/0
 13895 ;;		Unchanged: 0/0
 13896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13897 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13898 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13899 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13900 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13901 ;;Total ram usage:        5 bytes
 13902 ;; Hardware stack levels used:    1
 13903 ;; This function calls:
 13904 ;;		Nothing
 13905 ;; This function is called by:
 13906 ;;		i2_printf
 13907 ;; This function uses a non-reentrant model
 13908 ;;
 13909                           
 13910                           	psect	text44
 13911  0031FC                     __ptext44:
 13912                           	opt stack 0
 13913  0031FC                     i2___lwmod:
 13914                           	opt stack 23
 13915                           
 13916                           ;incstack = 0
 13917  0031FC  500A               	movf	i2___lwmod@divisor,w,c
 13918  0031FE  100B               	iorwf	i2___lwmod@divisor+1,w,c
 13919  003200  B4D8               	btfsc	status,2,c
 13920  003202  D018               	goto	i2l1076
 13921  003204  0E01               	movlw	1
 13922  003206  6E0C               	movwf	i2___lwmod@counter,c
 13923  003208  D004               	goto	i2l3763
 13924  00320A                     i2l3761:
 13925  00320A  90D8               	bcf	status,0,c
 13926  00320C  360A               	rlcf	i2___lwmod@divisor,f,c
 13927  00320E  360B               	rlcf	i2___lwmod@divisor+1,f,c
 13928  003210  2A0C               	incf	i2___lwmod@counter,f,c
 13929  003212                     i2l3763:
 13930  003212  AE0B               	btfss	i2___lwmod@divisor+1,7,c
 13931  003214  D7FA               	goto	i2l3761
 13932  003216                     i2l3765:
 13933  003216  500A               	movf	i2___lwmod@divisor,w,c
 13934  003218  5C08               	subwf	i2___lwmod@dividend,w,c
 13935  00321A  500B               	movf	i2___lwmod@divisor+1,w,c
 13936  00321C  5809               	subwfb	i2___lwmod@dividend+1,w,c
 13937  00321E  A0D8               	btfss	status,0,c
 13938  003220  D004               	goto	i2l3769
 13939  003222  500A               	movf	i2___lwmod@divisor,w,c
 13940  003224  5E08               	subwf	i2___lwmod@dividend,f,c
 13941  003226  500B               	movf	i2___lwmod@divisor+1,w,c
 13942  003228  5A09               	subwfb	i2___lwmod@dividend+1,f,c
 13943  00322A                     i2l3769:
 13944  00322A  90D8               	bcf	status,0,c
 13945  00322C  320B               	rrcf	i2___lwmod@divisor+1,f,c
 13946  00322E  320A               	rrcf	i2___lwmod@divisor,f,c
 13947  003230  2E0C               	decfsz	i2___lwmod@counter,f,c
 13948  003232  D7F1               	goto	i2l3765
 13949  003234                     i2l1076:
 13950  003234  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
 13951  003238  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 13952  00323C  0012               	return		;funcret
 13953  00323E                     __end_ofi2___lwmod:
 13954                           	opt stack 0
 13955                           pclatu	equ	0xFFB
 13956                           pclath	equ	0xFFA
 13957                           tblptru	equ	0xFF8
 13958                           tblptrh	equ	0xFF7
 13959                           tblptrl	equ	0xFF6
 13960                           tablat	equ	0xFF5
 13961                           prodh	equ	0xFF4
 13962                           prodl	equ	0xFF3
 13963                           intcon	equ	0xFF2
 13964                           intcon2	equ	0xFF1
 13965                           intcon3	equ	0xFF0
 13966                           postinc0	equ	0xFEE
 13967                           fsr0h	equ	0xFEA
 13968                           fsr0l	equ	0xFE9
 13969                           wreg	equ	0xFE8
 13970                           postdec1	equ	0xFE5
 13971                           plusw1	equ	0xFE3
 13972                           fsr1h	equ	0xFE2
 13973                           fsr1l	equ	0xFE1
 13974                           indf2	equ	0xFDF
 13975                           postinc2	equ	0xFDE
 13976                           postdec2	equ	0xFDD
 13977                           plusw2	equ	0xFDB
 13978                           fsr2h	equ	0xFDA
 13979                           fsr2l	equ	0xFD9
 13980                           status	equ	0xFD8
 13981                           
 13982 ;; *************** function i2___lwdiv *****************
 13983 ;; Defined at:
 13984 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 13985 ;; Parameters:    Size  Location     Type
 13986 ;;  dividend        2    0[COMRAM] unsigned int 
 13987 ;;  divisor         2    2[COMRAM] unsigned int 
 13988 ;; Auto vars:     Size  Location     Type
 13989 ;;  __lwdiv         2    4[COMRAM] unsigned int 
 13990 ;;  __lwdiv         1    6[COMRAM] unsigned char 
 13991 ;; Return value:  Size  Location     Type
 13992 ;;                  2    0[COMRAM] unsigned int 
 13993 ;; Registers used:
 13994 ;;		wreg, status,2, status,0
 13995 ;; Tracked objects:
 13996 ;;		On entry : 0/0
 13997 ;;		On exit  : 0/0
 13998 ;;		Unchanged: 0/0
 13999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14000 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14001 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14003 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14004 ;;Total ram usage:        7 bytes
 14005 ;; Hardware stack levels used:    1
 14006 ;; This function calls:
 14007 ;;		Nothing
 14008 ;; This function is called by:
 14009 ;;		i2_printf
 14010 ;; This function uses a non-reentrant model
 14011 ;;
 14012                           
 14013                           	psect	text45
 14014  0030C4                     __ptext45:
 14015                           	opt stack 0
 14016  0030C4                     i2___lwdiv:
 14017                           	opt stack 23
 14018                           
 14019                           ;incstack = 0
 14020  0030C4  0E00               	movlw	0
 14021  0030C6  6E06               	movwf	i2___lwdiv@quotient+1,c
 14022  0030C8  0E00               	movlw	0
 14023  0030CA  6E05               	movwf	i2___lwdiv@quotient,c
 14024  0030CC  5003               	movf	i2___lwdiv@divisor,w,c
 14025  0030CE  1004               	iorwf	i2___lwdiv@divisor+1,w,c
 14026  0030D0  B4D8               	btfsc	status,2,c
 14027  0030D2  D01C               	goto	i2l1066
 14028  0030D4  0E01               	movlw	1
 14029  0030D6  6E07               	movwf	i2___lwdiv@counter,c
 14030  0030D8  D004               	goto	i2l3743
 14031  0030DA                     i2l3741:
 14032  0030DA  90D8               	bcf	status,0,c
 14033  0030DC  3603               	rlcf	i2___lwdiv@divisor,f,c
 14034  0030DE  3604               	rlcf	i2___lwdiv@divisor+1,f,c
 14035  0030E0  2A07               	incf	i2___lwdiv@counter,f,c
 14036  0030E2                     i2l3743:
 14037  0030E2  AE04               	btfss	i2___lwdiv@divisor+1,7,c
 14038  0030E4  D7FA               	goto	i2l3741
 14039  0030E6                     i2l3745:
 14040  0030E6  90D8               	bcf	status,0,c
 14041  0030E8  3605               	rlcf	i2___lwdiv@quotient,f,c
 14042  0030EA  3606               	rlcf	i2___lwdiv@quotient+1,f,c
 14043  0030EC  5003               	movf	i2___lwdiv@divisor,w,c
 14044  0030EE  5C01               	subwf	i2___lwdiv@dividend,w,c
 14045  0030F0  5004               	movf	i2___lwdiv@divisor+1,w,c
 14046  0030F2  5802               	subwfb	i2___lwdiv@dividend+1,w,c
 14047  0030F4  A0D8               	btfss	status,0,c
 14048  0030F6  D005               	goto	i2l3753
 14049  0030F8  5003               	movf	i2___lwdiv@divisor,w,c
 14050  0030FA  5E01               	subwf	i2___lwdiv@dividend,f,c
 14051  0030FC  5004               	movf	i2___lwdiv@divisor+1,w,c
 14052  0030FE  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
 14053  003100  8005               	bsf	i2___lwdiv@quotient,0,c
 14054  003102                     i2l3753:
 14055  003102  90D8               	bcf	status,0,c
 14056  003104  3204               	rrcf	i2___lwdiv@divisor+1,f,c
 14057  003106  3203               	rrcf	i2___lwdiv@divisor,f,c
 14058  003108  2E07               	decfsz	i2___lwdiv@counter,f,c
 14059  00310A  D7ED               	goto	i2l3745
 14060  00310C                     i2l1066:
 14061  00310C  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
 14062  003110  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 14063  003114  0012               	return		;funcret
 14064  003116                     __end_ofi2___lwdiv:
 14065                           	opt stack 0
 14066                           pclatu	equ	0xFFB
 14067                           pclath	equ	0xFFA
 14068                           tblptru	equ	0xFF8
 14069                           tblptrh	equ	0xFF7
 14070                           tblptrl	equ	0xFF6
 14071                           tablat	equ	0xFF5
 14072                           prodh	equ	0xFF4
 14073                           prodl	equ	0xFF3
 14074                           intcon	equ	0xFF2
 14075                           intcon2	equ	0xFF1
 14076                           intcon3	equ	0xFF0
 14077                           postinc0	equ	0xFEE
 14078                           fsr0h	equ	0xFEA
 14079                           fsr0l	equ	0xFE9
 14080                           wreg	equ	0xFE8
 14081                           postdec1	equ	0xFE5
 14082                           plusw1	equ	0xFE3
 14083                           fsr1h	equ	0xFE2
 14084                           fsr1l	equ	0xFE1
 14085                           indf2	equ	0xFDF
 14086                           postinc2	equ	0xFDE
 14087                           postdec2	equ	0xFDD
 14088                           plusw2	equ	0xFDB
 14089                           fsr2h	equ	0xFDA
 14090                           fsr2l	equ	0xFD9
 14091                           status	equ	0xFD8
 14092                           
 14093 ;; *************** function i2_lcdInst *****************
 14094 ;; Defined at:
 14095 ;;		line 18 in file "../lcd.c"
 14096 ;; Parameters:    Size  Location     Type
 14097 ;;  data            1    wreg     unsigned char 
 14098 ;; Auto vars:     Size  Location     Type
 14099 ;;  data            1    2[COMRAM] unsigned char 
 14100 ;; Return value:  Size  Location     Type
 14101 ;;                  1    wreg      void 
 14102 ;; Registers used:
 14103 ;;		wreg, status,2, status,0, cstack
 14104 ;; Tracked objects:
 14105 ;;		On entry : 0/0
 14106 ;;		On exit  : 0/0
 14107 ;;		Unchanged: 0/0
 14108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14109 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14110 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14111 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14112 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14113 ;;Total ram usage:        1 bytes
 14114 ;; Hardware stack levels used:    1
 14115 ;; Hardware stack levels required when called:    1
 14116 ;; This function calls:
 14117 ;;		i2_lcdNibble
 14118 ;; This function is called by:
 14119 ;;		_keypressed
 14120 ;; This function uses a non-reentrant model
 14121 ;;
 14122                           
 14123                           	psect	text46
 14124  0034E2                     __ptext46:
 14125                           	opt stack 0
 14126  0034E2                     i2_lcdInst:
 14127                           	opt stack 23
 14128                           
 14129                           ;incstack = 0
 14130                           ;i2lcdInst@data stored from wreg
 14131  0034E2  6E03               	movwf	i2lcdInst@data,c
 14132                           
 14133                           ;lcd.c: 19: LATDbits.LATD2 = 0;
 14134  0034E4  948C               	bcf	3980,2,c	;volatile
 14135                           
 14136                           ;lcd.c: 20: lcdNibble(data);
 14137  0034E6  5003               	movf	i2lcdInst@data,w,c
 14138  0034E8  ECB2  F018         	call	i2_lcdNibble
 14139  0034EC  0012               	return		;funcret
 14140  0034EE                     __end_ofi2_lcdInst:
 14141                           	opt stack 0
 14142                           pclatu	equ	0xFFB
 14143                           pclath	equ	0xFFA
 14144                           tblptru	equ	0xFF8
 14145                           tblptrh	equ	0xFF7
 14146                           tblptrl	equ	0xFF6
 14147                           tablat	equ	0xFF5
 14148                           prodh	equ	0xFF4
 14149                           prodl	equ	0xFF3
 14150                           intcon	equ	0xFF2
 14151                           intcon2	equ	0xFF1
 14152                           intcon3	equ	0xFF0
 14153                           postinc0	equ	0xFEE
 14154                           fsr0h	equ	0xFEA
 14155                           fsr0l	equ	0xFE9
 14156                           wreg	equ	0xFE8
 14157                           postdec1	equ	0xFE5
 14158                           plusw1	equ	0xFE3
 14159                           fsr1h	equ	0xFE2
 14160                           fsr1l	equ	0xFE1
 14161                           indf2	equ	0xFDF
 14162                           postinc2	equ	0xFDE
 14163                           postdec2	equ	0xFDD
 14164                           plusw2	equ	0xFDB
 14165                           fsr2h	equ	0xFDA
 14166                           fsr2l	equ	0xFD9
 14167                           status	equ	0xFD8
 14168                           
 14169 ;; *************** function i2_lcdNibble *****************
 14170 ;; Defined at:
 14171 ;;		line 28 in file "../lcd.c"
 14172 ;; Parameters:    Size  Location     Type
 14173 ;;  data            1    wreg     unsigned char 
 14174 ;; Auto vars:     Size  Location     Type
 14175 ;;  data            1    1[COMRAM] unsigned char 
 14176 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 14177 ;; Return value:  Size  Location     Type
 14178 ;;                  1    wreg      void 
 14179 ;; Registers used:
 14180 ;;		wreg, status,2, status,0
 14181 ;; Tracked objects:
 14182 ;;		On entry : 0/0
 14183 ;;		On exit  : 0/0
 14184 ;;		Unchanged: 0/0
 14185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14186 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14187 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14188 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14189 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14190 ;;Total ram usage:        2 bytes
 14191 ;; Hardware stack levels used:    1
 14192 ;; This function calls:
 14193 ;;		Nothing
 14194 ;; This function is called by:
 14195 ;;		i2_lcdInst
 14196 ;;		i2_putch
 14197 ;; This function uses a non-reentrant model
 14198 ;;
 14199                           
 14200                           	psect	text47
 14201  003164                     __ptext47:
 14202                           	opt stack 0
 14203  003164                     i2_lcdNibble:
 14204                           	opt stack 22
 14205                           
 14206                           ;incstack = 0
 14207                           ;i2lcdNibble@data stored from wreg
 14208  003164  6E02               	movwf	i2lcdNibble@data,c
 14209                           
 14210                           ;lcd.c: 30: char temp = data & 0xF0;
 14211  003166  5002               	movf	i2lcdNibble@data,w,c
 14212  003168  0BF0               	andlw	240
 14213  00316A  6E01               	movwf	i2lcdNibble@temp,c
 14214                           
 14215                           ;lcd.c: 31: LATD = LATD & 0x0F;
 14216  00316C  508C               	movf	3980,w,c	;volatile
 14217  00316E  0B0F               	andlw	15
 14218  003170  6E8C               	movwf	3980,c	;volatile
 14219                           
 14220                           ;lcd.c: 32: LATD = temp | LATD;
 14221  003172  5001               	movf	i2lcdNibble@temp,w,c
 14222  003174  108C               	iorwf	3980,w,c	;volatile
 14223  003176  6E8C               	movwf	3980,c	;volatile
 14224                           
 14225                           ;lcd.c: 34: LATDbits.LATD3 = 0;
 14226  003178  968C               	bcf	3980,3,c	;volatile
 14227                           
 14228                           ;lcd.c: 35: _delay((unsigned long)((30)*(10000000/4000000.0)));
 14229  00317A  0E19               	movlw	25
 14230  00317C                     i2u729_47:
 14231  00317C  2EE8               	decfsz	wreg,f,c
 14232  00317E  D7FE               	bra	i2u729_47
 14233                           
 14234                           ;lcd.c: 36: LATDbits.LATD3 = 1;
 14235  003180  868C               	bsf	3980,3,c	;volatile
 14236                           
 14237                           ;lcd.c: 37: _delay((unsigned long)((30)*(10000000/4000000.0)));
 14238  003182  0E19               	movlw	25
 14239  003184                     i2u730_47:
 14240  003184  2EE8               	decfsz	wreg,f,c
 14241  003186  D7FE               	bra	i2u730_47
 14242                           
 14243                           ;lcd.c: 39: data = data << 4;
 14244  003188  3802               	swapf	i2lcdNibble@data,w,c
 14245  00318A  0BF0               	andlw	240
 14246  00318C  6E02               	movwf	i2lcdNibble@data,c
 14247                           
 14248                           ;lcd.c: 41: temp = data & 0xF0;
 14249  00318E  5002               	movf	i2lcdNibble@data,w,c
 14250  003190  0BF0               	andlw	240
 14251  003192  6E01               	movwf	i2lcdNibble@temp,c
 14252                           
 14253                           ;lcd.c: 42: LATD = LATD & 0x0F;
 14254  003194  508C               	movf	3980,w,c	;volatile
 14255  003196  0B0F               	andlw	15
 14256  003198  6E8C               	movwf	3980,c	;volatile
 14257                           
 14258                           ;lcd.c: 43: LATD = temp | LATD;
 14259  00319A  5001               	movf	i2lcdNibble@temp,w,c
 14260  00319C  108C               	iorwf	3980,w,c	;volatile
 14261  00319E  6E8C               	movwf	3980,c	;volatile
 14262                           
 14263                           ;lcd.c: 45: LATDbits.LATD3 = 0;
 14264  0031A0  968C               	bcf	3980,3,c	;volatile
 14265                           
 14266                           ;lcd.c: 46: _delay((unsigned long)((30)*(10000000/4000000.0)));
 14267  0031A2  0E19               	movlw	25
 14268  0031A4                     i2u731_47:
 14269  0031A4  2EE8               	decfsz	wreg,f,c
 14270  0031A6  D7FE               	bra	i2u731_47
 14271                           
 14272                           ;lcd.c: 47: LATDbits.LATD3 = 1;
 14273  0031A8  868C               	bsf	3980,3,c	;volatile
 14274                           
 14275                           ;lcd.c: 48: _delay((unsigned long)((30)*(10000000/4000000.0)));
 14276  0031AA  0E19               	movlw	25
 14277  0031AC                     i2u732_47:
 14278  0031AC  2EE8               	decfsz	wreg,f,c
 14279  0031AE  D7FE               	bra	i2u732_47
 14280  0031B0  0012               	return		;funcret
 14281  0031B2                     __end_ofi2_lcdNibble:
 14282                           	opt stack 0
 14283                           pclatu	equ	0xFFB
 14284                           pclath	equ	0xFFA
 14285                           tblptru	equ	0xFF8
 14286                           tblptrh	equ	0xFF7
 14287                           tblptrl	equ	0xFF6
 14288                           tablat	equ	0xFF5
 14289                           prodh	equ	0xFF4
 14290                           prodl	equ	0xFF3
 14291                           intcon	equ	0xFF2
 14292                           intcon2	equ	0xFF1
 14293                           intcon3	equ	0xFF0
 14294                           postinc0	equ	0xFEE
 14295                           fsr0h	equ	0xFEA
 14296                           fsr0l	equ	0xFE9
 14297                           wreg	equ	0xFE8
 14298                           postdec1	equ	0xFE5
 14299                           plusw1	equ	0xFE3
 14300                           fsr1h	equ	0xFE2
 14301                           fsr1l	equ	0xFE1
 14302                           indf2	equ	0xFDF
 14303                           postinc2	equ	0xFDE
 14304                           postdec2	equ	0xFDD
 14305                           plusw2	equ	0xFDB
 14306                           fsr2h	equ	0xFDA
 14307                           fsr2l	equ	0xFD9
 14308                           status	equ	0xFD8
 14309                           
 14310 ;; *************** function i2_I2C_Master_Write *****************
 14311 ;; Defined at:
 14312 ;;		line 39 in file "../I2C.c"
 14313 ;; Parameters:    Size  Location     Type
 14314 ;;  d               2    1[COMRAM] unsigned int 
 14315 ;; Auto vars:     Size  Location     Type
 14316 ;;		None
 14317 ;; Return value:  Size  Location     Type
 14318 ;;                  1    wreg      void 
 14319 ;; Registers used:
 14320 ;;		wreg, status,2, status,0, cstack
 14321 ;; Tracked objects:
 14322 ;;		On entry : 0/0
 14323 ;;		On exit  : 0/0
 14324 ;;		Unchanged: 0/0
 14325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14326 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14327 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14328 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14329 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14330 ;;Total ram usage:        2 bytes
 14331 ;; Hardware stack levels used:    1
 14332 ;; Hardware stack levels required when called:    1
 14333 ;; This function calls:
 14334 ;;		i2_I2C_Master_Wait
 14335 ;; This function is called by:
 14336 ;;		_keypressed
 14337 ;; This function uses a non-reentrant model
 14338 ;;
 14339                           
 14340                           	psect	text48
 14341  0034F8                     __ptext48:
 14342                           	opt stack 0
 14343  0034F8                     i2_I2C_Master_Write:
 14344                           	opt stack 23
 14345                           
 14346                           ;I2C.c: 41: I2C_Master_Wait();
 14347                           
 14348                           ;incstack = 0
 14349  0034F8  EC41  F01A         	call	i2_I2C_Master_Wait	;wreg free
 14350                           
 14351                           ;I2C.c: 42: SSPBUF = d;
 14352  0034FC  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 14353  003500  0012               	return		;funcret
 14354  003502                     __end_ofi2_I2C_Master_Write:
 14355                           	opt stack 0
 14356                           pclatu	equ	0xFFB
 14357                           pclath	equ	0xFFA
 14358                           tblptru	equ	0xFF8
 14359                           tblptrh	equ	0xFF7
 14360                           tblptrl	equ	0xFF6
 14361                           tablat	equ	0xFF5
 14362                           prodh	equ	0xFF4
 14363                           prodl	equ	0xFF3
 14364                           intcon	equ	0xFF2
 14365                           intcon2	equ	0xFF1
 14366                           intcon3	equ	0xFF0
 14367                           postinc0	equ	0xFEE
 14368                           fsr0h	equ	0xFEA
 14369                           fsr0l	equ	0xFE9
 14370                           wreg	equ	0xFE8
 14371                           postdec1	equ	0xFE5
 14372                           plusw1	equ	0xFE3
 14373                           fsr1h	equ	0xFE2
 14374                           fsr1l	equ	0xFE1
 14375                           indf2	equ	0xFDF
 14376                           postinc2	equ	0xFDE
 14377                           postdec2	equ	0xFDD
 14378                           plusw2	equ	0xFDB
 14379                           fsr2h	equ	0xFDA
 14380                           fsr2l	equ	0xFD9
 14381                           status	equ	0xFD8
 14382                           
 14383 ;; *************** function i2_I2C_Master_Stop *****************
 14384 ;; Defined at:
 14385 ;;		line 33 in file "../I2C.c"
 14386 ;; Parameters:    Size  Location     Type
 14387 ;;		None
 14388 ;; Auto vars:     Size  Location     Type
 14389 ;;		None
 14390 ;; Return value:  Size  Location     Type
 14391 ;;                  1    wreg      void 
 14392 ;; Registers used:
 14393 ;;		wreg, status,2, status,0, cstack
 14394 ;; Tracked objects:
 14395 ;;		On entry : 0/0
 14396 ;;		On exit  : 0/0
 14397 ;;		Unchanged: 0/0
 14398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14400 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14402 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14403 ;;Total ram usage:        0 bytes
 14404 ;; Hardware stack levels used:    1
 14405 ;; Hardware stack levels required when called:    1
 14406 ;; This function calls:
 14407 ;;		i2_I2C_Master_Wait
 14408 ;; This function is called by:
 14409 ;;		_keypressed
 14410 ;; This function uses a non-reentrant model
 14411 ;;
 14412                           
 14413                           	psect	text49
 14414  00351A                     __ptext49:
 14415                           	opt stack 0
 14416  00351A                     i2_I2C_Master_Stop:
 14417                           	opt stack 23
 14418                           
 14419                           ;I2C.c: 35: I2C_Master_Wait();
 14420                           
 14421                           ;incstack = 0
 14422  00351A  EC41  F01A         	call	i2_I2C_Master_Wait	;wreg free
 14423                           
 14424                           ;I2C.c: 36: PEN = 1;
 14425  00351E  84C5               	bsf	4037,2,c	;volatile
 14426  003520  0012               	return		;funcret
 14427  003522                     __end_ofi2_I2C_Master_Stop:
 14428                           	opt stack 0
 14429                           pclatu	equ	0xFFB
 14430                           pclath	equ	0xFFA
 14431                           tblptru	equ	0xFF8
 14432                           tblptrh	equ	0xFF7
 14433                           tblptrl	equ	0xFF6
 14434                           tablat	equ	0xFF5
 14435                           prodh	equ	0xFF4
 14436                           prodl	equ	0xFF3
 14437                           intcon	equ	0xFF2
 14438                           intcon2	equ	0xFF1
 14439                           intcon3	equ	0xFF0
 14440                           postinc0	equ	0xFEE
 14441                           fsr0h	equ	0xFEA
 14442                           fsr0l	equ	0xFE9
 14443                           wreg	equ	0xFE8
 14444                           postdec1	equ	0xFE5
 14445                           plusw1	equ	0xFE3
 14446                           fsr1h	equ	0xFE2
 14447                           fsr1l	equ	0xFE1
 14448                           indf2	equ	0xFDF
 14449                           postinc2	equ	0xFDE
 14450                           postdec2	equ	0xFDD
 14451                           plusw2	equ	0xFDB
 14452                           fsr2h	equ	0xFDA
 14453                           fsr2l	equ	0xFD9
 14454                           status	equ	0xFD8
 14455                           
 14456 ;; *************** function i2_I2C_Master_Start *****************
 14457 ;; Defined at:
 14458 ;;		line 21 in file "../I2C.c"
 14459 ;; Parameters:    Size  Location     Type
 14460 ;;		None
 14461 ;; Auto vars:     Size  Location     Type
 14462 ;;		None
 14463 ;; Return value:  Size  Location     Type
 14464 ;;                  1    wreg      void 
 14465 ;; Registers used:
 14466 ;;		wreg, status,2, status,0, cstack
 14467 ;; Tracked objects:
 14468 ;;		On entry : 0/0
 14469 ;;		On exit  : 0/0
 14470 ;;		Unchanged: 0/0
 14471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14472 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14473 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14474 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14475 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14476 ;;Total ram usage:        0 bytes
 14477 ;; Hardware stack levels used:    1
 14478 ;; Hardware stack levels required when called:    1
 14479 ;; This function calls:
 14480 ;;		i2_I2C_Master_Wait
 14481 ;; This function is called by:
 14482 ;;		_keypressed
 14483 ;; This function uses a non-reentrant model
 14484 ;;
 14485                           
 14486                           	psect	text50
 14487  003522                     __ptext50:
 14488                           	opt stack 0
 14489  003522                     i2_I2C_Master_Start:
 14490                           	opt stack 23
 14491                           
 14492                           ;I2C.c: 23: I2C_Master_Wait();
 14493                           
 14494                           ;incstack = 0
 14495  003522  EC41  F01A         	call	i2_I2C_Master_Wait	;wreg free
 14496                           
 14497                           ;I2C.c: 24: SEN = 1;
 14498  003526  80C5               	bsf	4037,0,c	;volatile
 14499  003528  0012               	return		;funcret
 14500  00352A                     __end_ofi2_I2C_Master_Start:
 14501                           	opt stack 0
 14502                           pclatu	equ	0xFFB
 14503                           pclath	equ	0xFFA
 14504                           tblptru	equ	0xFF8
 14505                           tblptrh	equ	0xFF7
 14506                           tblptrl	equ	0xFF6
 14507                           tablat	equ	0xFF5
 14508                           prodh	equ	0xFF4
 14509                           prodl	equ	0xFF3
 14510                           intcon	equ	0xFF2
 14511                           intcon2	equ	0xFF1
 14512                           intcon3	equ	0xFF0
 14513                           postinc0	equ	0xFEE
 14514                           fsr0h	equ	0xFEA
 14515                           fsr0l	equ	0xFE9
 14516                           wreg	equ	0xFE8
 14517                           postdec1	equ	0xFE5
 14518                           plusw1	equ	0xFE3
 14519                           fsr1h	equ	0xFE2
 14520                           fsr1l	equ	0xFE1
 14521                           indf2	equ	0xFDF
 14522                           postinc2	equ	0xFDE
 14523                           postdec2	equ	0xFDD
 14524                           plusw2	equ	0xFDB
 14525                           fsr2h	equ	0xFDA
 14526                           fsr2l	equ	0xFD9
 14527                           status	equ	0xFD8
 14528                           
 14529 ;; *************** function i2_I2C_Master_Read *****************
 14530 ;; Defined at:
 14531 ;;		line 45 in file "../I2C.c"
 14532 ;; Parameters:    Size  Location     Type
 14533 ;;  a               1    wreg     unsigned char 
 14534 ;; Auto vars:     Size  Location     Type
 14535 ;;  a               1    1[COMRAM] unsigned char 
 14536 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 14537 ;; Return value:  Size  Location     Type
 14538 ;;                  1    wreg      unsigned char 
 14539 ;; Registers used:
 14540 ;;		wreg, status,2, status,0, cstack
 14541 ;; Tracked objects:
 14542 ;;		On entry : 0/0
 14543 ;;		On exit  : 0/0
 14544 ;;		Unchanged: 0/0
 14545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14546 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14547 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14548 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14549 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14550 ;;Total ram usage:        2 bytes
 14551 ;; Hardware stack levels used:    1
 14552 ;; Hardware stack levels required when called:    1
 14553 ;; This function calls:
 14554 ;;		i2_I2C_Master_Wait
 14555 ;; This function is called by:
 14556 ;;		_keypressed
 14557 ;; This function uses a non-reentrant model
 14558 ;;
 14559                           
 14560                           	psect	text51
 14561  003380                     __ptext51:
 14562                           	opt stack 0
 14563  003380                     i2_I2C_Master_Read:
 14564                           	opt stack 23
 14565                           
 14566                           ;incstack = 0
 14567                           ;i2I2C_Master_Read@a stored from wreg
 14568  003380  6E02               	movwf	i2I2C_Master_Read@a,c
 14569                           
 14570                           ;I2C.c: 47: unsigned char temp;
 14571                           ;I2C.c: 48: I2C_Master_Wait();
 14572  003382  EC41  F01A         	call	i2_I2C_Master_Wait	;wreg free
 14573                           
 14574                           ;I2C.c: 49: RCEN = 1;
 14575  003386  86C5               	bsf	4037,3,c	;volatile
 14576                           
 14577                           ;I2C.c: 50: I2C_Master_Wait();
 14578  003388  EC41  F01A         	call	i2_I2C_Master_Wait	;wreg free
 14579                           
 14580                           ;I2C.c: 51: temp = SSPBUF;
 14581  00338C  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 14582                           
 14583                           ;I2C.c: 52: I2C_Master_Wait();
 14584  003390  EC41  F01A         	call	i2_I2C_Master_Wait	;wreg free
 14585                           
 14586                           ;I2C.c: 53: ACKDT = (a)?0:1;
 14587  003394  5002               	movf	i2I2C_Master_Read@a,w,c
 14588  003396  A4D8               	btfss	status,2,c
 14589  003398  D002               	goto	i2u347_40
 14590  00339A  8AC5               	bsf	4037,5,c	;volatile
 14591  00339C  D001               	goto	i2l4107
 14592  00339E                     i2u347_40:
 14593  00339E  9AC5               	bcf	4037,5,c	;volatile
 14594  0033A0                     i2l4107:
 14595                           
 14596                           ;I2C.c: 54: ACKEN = 1;
 14597  0033A0  88C5               	bsf	4037,4,c	;volatile
 14598                           
 14599                           ;I2C.c: 55: return temp;
 14600  0033A2  5003               	movf	i2I2C_Master_Read@temp,w,c
 14601  0033A4  0012               	return	
 14602  0033A6                     __end_ofi2_I2C_Master_Read:
 14603                           	opt stack 0
 14604                           pclatu	equ	0xFFB
 14605                           pclath	equ	0xFFA
 14606                           tblptru	equ	0xFF8
 14607                           tblptrh	equ	0xFF7
 14608                           tblptrl	equ	0xFF6
 14609                           tablat	equ	0xFF5
 14610                           prodh	equ	0xFF4
 14611                           prodl	equ	0xFF3
 14612                           intcon	equ	0xFF2
 14613                           intcon2	equ	0xFF1
 14614                           intcon3	equ	0xFF0
 14615                           postinc0	equ	0xFEE
 14616                           fsr0h	equ	0xFEA
 14617                           fsr0l	equ	0xFE9
 14618                           wreg	equ	0xFE8
 14619                           postdec1	equ	0xFE5
 14620                           plusw1	equ	0xFE3
 14621                           fsr1h	equ	0xFE2
 14622                           fsr1l	equ	0xFE1
 14623                           indf2	equ	0xFDF
 14624                           postinc2	equ	0xFDE
 14625                           postdec2	equ	0xFDD
 14626                           plusw2	equ	0xFDB
 14627                           fsr2h	equ	0xFDA
 14628                           fsr2l	equ	0xFD9
 14629                           status	equ	0xFD8
 14630                           
 14631 ;; *************** function i2_I2C_Master_Wait *****************
 14632 ;; Defined at:
 14633 ;;		line 16 in file "../I2C.c"
 14634 ;; Parameters:    Size  Location     Type
 14635 ;;		None
 14636 ;; Auto vars:     Size  Location     Type
 14637 ;;		None
 14638 ;; Return value:  Size  Location     Type
 14639 ;;                  1    wreg      void 
 14640 ;; Registers used:
 14641 ;;		wreg, status,2, status,0
 14642 ;; Tracked objects:
 14643 ;;		On entry : 0/0
 14644 ;;		On exit  : 0/0
 14645 ;;		Unchanged: 0/0
 14646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14647 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14648 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14649 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14650 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14651 ;;Total ram usage:        1 bytes
 14652 ;; Hardware stack levels used:    1
 14653 ;; This function calls:
 14654 ;;		Nothing
 14655 ;; This function is called by:
 14656 ;;		i2_I2C_Master_Start
 14657 ;;		i2_I2C_Master_Stop
 14658 ;;		i2_I2C_Master_Write
 14659 ;;		i2_I2C_Master_Read
 14660 ;; This function uses a non-reentrant model
 14661 ;;
 14662                           
 14663                           	psect	text52
 14664  003482                     __ptext52:
 14665                           	opt stack 0
 14666  003482                     i2_I2C_Master_Wait:
 14667                           	opt stack 23
 14668  003482                     i2l30:
 14669  003482  B4C7               	btfsc	4039,2,c	;volatile
 14670  003484  D7FE               	goto	i2l30
 14671  003486  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 14672  00348A  0E1F               	movlw	31
 14673  00348C  1601               	andwf	??i2_I2C_Master_Wait,f,c
 14674  00348E  B4D8               	btfsc	status,2,c
 14675  003490  0012               	return	
 14676  003492  D7F7               	goto	i2l30
 14677  003494                     __end_ofi2_I2C_Master_Wait:
 14678                           	opt stack 0
 14679                           pclatu	equ	0xFFB
 14680                           pclath	equ	0xFFA
 14681                           tblptru	equ	0xFF8
 14682                           tblptrh	equ	0xFF7
 14683                           tblptrl	equ	0xFF6
 14684                           tablat	equ	0xFF5
 14685                           prodh	equ	0xFF4
 14686                           prodl	equ	0xFF3
 14687                           intcon	equ	0xFF2
 14688                           intcon2	equ	0xFF1
 14689                           intcon3	equ	0xFF0
 14690                           postinc0	equ	0xFEE
 14691                           fsr0h	equ	0xFEA
 14692                           fsr0l	equ	0xFE9
 14693                           wreg	equ	0xFE8
 14694                           postdec1	equ	0xFE5
 14695                           plusw1	equ	0xFE3
 14696                           fsr1h	equ	0xFE2
 14697                           fsr1l	equ	0xFE1
 14698                           indf2	equ	0xFDF
 14699                           postinc2	equ	0xFDE
 14700                           postdec2	equ	0xFDD
 14701                           plusw2	equ	0xFDB
 14702                           fsr2h	equ	0xFDA
 14703                           fsr2l	equ	0xFD9
 14704                           status	equ	0xFD8
 14705                           pclatu	equ	0xFFB
 14706                           pclath	equ	0xFFA
 14707                           tblptru	equ	0xFF8
 14708                           tblptrh	equ	0xFF7
 14709                           tblptrl	equ	0xFF6
 14710                           tablat	equ	0xFF5
 14711                           prodh	equ	0xFF4
 14712                           prodl	equ	0xFF3
 14713                           intcon	equ	0xFF2
 14714                           intcon2	equ	0xFF1
 14715                           intcon3	equ	0xFF0
 14716                           postinc0	equ	0xFEE
 14717                           fsr0h	equ	0xFEA
 14718                           fsr0l	equ	0xFE9
 14719                           wreg	equ	0xFE8
 14720                           postdec1	equ	0xFE5
 14721                           plusw1	equ	0xFE3
 14722                           fsr1h	equ	0xFE2
 14723                           fsr1l	equ	0xFE1
 14724                           indf2	equ	0xFDF
 14725                           postinc2	equ	0xFDE
 14726                           postdec2	equ	0xFDD
 14727                           plusw2	equ	0xFDB
 14728                           fsr2h	equ	0xFDA
 14729                           fsr2l	equ	0xFD9
 14730                           status	equ	0xFD8
 14731                           
 14732                           	psect	rparam
 14733  0000                     pclatu	equ	0xFFB
 14734                           pclath	equ	0xFFA
 14735                           tblptru	equ	0xFF8
 14736                           tblptrh	equ	0xFF7
 14737                           tblptrl	equ	0xFF6
 14738                           tablat	equ	0xFF5
 14739                           prodh	equ	0xFF4
 14740                           prodl	equ	0xFF3
 14741                           intcon	equ	0xFF2
 14742                           intcon2	equ	0xFF1
 14743                           intcon3	equ	0xFF0
 14744                           postinc0	equ	0xFEE
 14745                           fsr0h	equ	0xFEA
 14746                           fsr0l	equ	0xFE9
 14747                           wreg	equ	0xFE8
 14748                           postdec1	equ	0xFE5
 14749                           plusw1	equ	0xFE3
 14750                           fsr1h	equ	0xFE2
 14751                           fsr1l	equ	0xFE1
 14752                           indf2	equ	0xFDF
 14753                           postinc2	equ	0xFDE
 14754                           postdec2	equ	0xFDD
 14755                           plusw2	equ	0xFDB
 14756                           fsr2h	equ	0xFDA
 14757                           fsr2l	equ	0xFD9
 14758                           status	equ	0xFD8
 14759                           
 14760                           	psect	temp
 14761  00004F                     btemp:
 14762                           	opt stack 0
 14763  00004F                     	ds	1
 14764  0000                     int$flags	set	btemp
 14765                           pclatu	equ	0xFFB
 14766                           pclath	equ	0xFFA
 14767                           tblptru	equ	0xFF8
 14768                           tblptrh	equ	0xFF7
 14769                           tblptrl	equ	0xFF6
 14770                           tablat	equ	0xFF5
 14771                           prodh	equ	0xFF4
 14772                           prodl	equ	0xFF3
 14773                           intcon	equ	0xFF2
 14774                           intcon2	equ	0xFF1
 14775                           intcon3	equ	0xFF0
 14776                           postinc0	equ	0xFEE
 14777                           fsr0h	equ	0xFEA
 14778                           fsr0l	equ	0xFE9
 14779                           wreg	equ	0xFE8
 14780                           postdec1	equ	0xFE5
 14781                           plusw1	equ	0xFE3
 14782                           fsr1h	equ	0xFE2
 14783                           fsr1l	equ	0xFE1
 14784                           indf2	equ	0xFDF
 14785                           postinc2	equ	0xFDE
 14786                           postdec2	equ	0xFDD
 14787                           plusw2	equ	0xFDB
 14788                           fsr2h	equ	0xFDA
 14789                           fsr2l	equ	0xFD9
 14790                           status	equ	0xFD8


Data Sizes:
    Strings     606
    Constant    267
    Data        33
    BSS         51
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     51      78
    BANK0           128     68     125
    BANK1           256     60      60
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 25
		 -> STR_40(CODE[20]), STR_39(CODE[23]), STR_38(CODE[23]), STR_37(CODE[23]), 
		 -> STR_36(CODE[17]), STR_35(CODE[15]), STR_34(CODE[17]), STR_33(CODE[23]), 
		 -> STR_32(CODE[23]), STR_31(CODE[17]), STR_30(CODE[17]), STR_29(CODE[17]), 
		 -> STR_28(CODE[17]), STR_27(CODE[17]), STR_26(CODE[17]), STR_25(CODE[17]), 
		 -> STR_24(CODE[17]), STR_23(CODE[17]), STR_22(CODE[17]), STR_21(CODE[23]), 
		 -> STR_20(CODE[23]), STR_19(CODE[17]), STR_18(CODE[21]), STR_17(CODE[17]), 
		 -> STR_16(CODE[21]), STR_15(CODE[17]), STR_14(CODE[21]), STR_13(CODE[17]), 
		 -> STR_12(CODE[19]), STR_11(CODE[17]), STR_10(CODE[19]), STR_9(CODE[17]), 
		 -> STR_8(CODE[25]), STR_7(CODE[17]), STR_6(CODE[17]), STR_5(CODE[17]), 
		 -> STR_4(CODE[17]), STR_3(CODE[17]), STR_2(CODE[17]), STR_1(CODE[17]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 


Critical Paths under _main in COMRAM

    _main->_I2C_Master_Read
    _main->_I2C_Master_Write
    _main->_lcdInst
    _testBatteries->_lcdInst
    _stopOperation->_Eeprom_WriteByte
    _show_log->_lcdInst
    _printf->___lwdiv
    _printf->_isdigit
    _printf->_putch
    _putch->_lcdNibble
    _logPC->_I2C_Master_Write
    _getTens->___lwdiv
    ___lwmod->___lwdiv
    _getHundreds->___lwdiv
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _I2C_Master_Read->_I2C_Master_Wait

Critical Paths under _ISR in COMRAM

    _ISR->_keypressed
    _keypressed->i2_printf
    i2_stopOperation->i2___awdiv
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_lcdInst->i2_lcdNibble
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_show_log
    _testBatteries->_printf
    _stopOperation->___awdiv
    _show_log->_printf
    _printf->___lwmod
    _logPC->_getChar
    _getTens->___lwdiv
    _getOnes->___lwmod
    ___lwmod->___lwdiv
    _getHundreds->___lwdiv
    _getChar->_getOnes
    _I2C_Master_Init->___lldiv

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_logPC

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                10    10      0   50590
                                             58 BANK0     10    10      0
                    _I2C_Master_Init
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _initLCD
                            _lcdInst
                              _logPC
                             _printf
                            _readADC
                           _show_log
                      _stopOperation
                      _testBatteries
                           _wait_2ms
 ---------------------------------------------------------------------------------
 (1) _wait_2ms                                             2     0      2     342
                                             48 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _testBatteries                                       12    12      0    7342
                                             31 BANK0     12    12      0
                            _lcdInst
                             _printf
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _readADC                                              1     1      0      22
                                             48 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _stopOperation                                        3     3      0    7239
                                              8 BANK0      3     3      0
                    _Eeprom_ReadByte
                   _Eeprom_WriteByte
                            ___awdiv
                            ___awmod
                       _next_address
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     671
                                             48 COMRAM     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     683
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _Eeprom_WriteByte                                     3     0      3    2249
                                             48 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _show_log                                            27    24      3   11512
                                             31 BANK0     27    24      3
                    _Eeprom_ReadByte
                            _lcdInst
                       _next_address
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              31    23      8    6488
                                              9 BANK0     22    14      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     135
                                             50 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                             48 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     392
                                             48 COMRAM     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) _next_address                                         2     0      2    1725
                                             48 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _Eeprom_ReadByte                                      2     0      2    1063
                                             48 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _logPC                                               62    62      0   12398
                                             13 BANK0      2     2      0
                                              0 BANK1     60    60      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _getChar
                        _getHundreds
                            _getOnes
                            _getTens
 ---------------------------------------------------------------------------------
 (2) _getTens                                              2     0      2    1843
                                              4 BANK0      2     0      2
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (2) _getOnes                                              2     0      2    1495
                                              9 BANK0      2     0      2
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     540
                                              4 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) _getHundreds                                          2     0      2     996
                                              4 BANK0      2     0      2
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     857
                                             48 COMRAM     3     3      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) _getChar                                              2     0      2    1956
                                             11 BANK0      2     0      2
                        _getHundreds (ARG)
                            _getOnes (ARG)
                            _getTens (ARG)
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2    3776
                                             49 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              0 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     135
                                             50 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                             48 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Read                                      2     2      0      65
                                             49 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                             48 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     503
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     395
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                 16    16      0    8471
                                             32 COMRAM    16    16      0
                         _keypressed
                          i2___awdiv
                          i2___awmod
                    i2_stopOperation
 ---------------------------------------------------------------------------------
 (6) _keypressed                                           4     2      2    5082
                                             28 COMRAM     4     2      2
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
                          i2_lcdInst
                           i2_printf
                    i2_stopOperation
 ---------------------------------------------------------------------------------
 (6) i2_stopOperation                                      3     3      0    2562
                                              8 COMRAM     3     3      0
                  i2_Eeprom_ReadByte
                 i2_Eeprom_WriteByte
                          i2___awdiv
                          i2___awmod
                     i2_next_address
 ---------------------------------------------------------------------------------
 (7) i2_next_address                                       2     0      2     308
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (7) i2___awmod                                            6     2      4     400
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (7) i2___awdiv                                            8     4      4     404
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (7) i2_Eeprom_WriteByte                                   3     0      3     794
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (7) i2_Eeprom_ReadByte                                    2     0      2      70
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (7) i2_printf                                            25    23      2    1912
                                             12 COMRAM    16    14      2
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (8) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (8) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (8) i2___wmul                                             6     2      4     209
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (8) i2___lwdiv                                            7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (7) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (9) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Write                                   2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Stop                                    0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Start                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Read                                    2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Wait                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _I2C_Master_Read
     _I2C_Master_Wait
   _I2C_Master_Start
     _I2C_Master_Wait
   _I2C_Master_Stop
     _I2C_Master_Wait
   _I2C_Master_Write
     _I2C_Master_Wait
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _logPC
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     _getChar
       _getHundreds (ARG)
         ___lwdiv
       _getOnes (ARG)
         ___lwmod
           ___lwdiv (ARG)
       _getTens (ARG)
         ___lwdiv
     _getHundreds
       ___lwdiv
     _getOnes
       ___lwmod
         ___lwdiv (ARG)
     _getTens
       ___lwdiv
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
       _lcdNibble
   _readADC
   _show_log
     _Eeprom_ReadByte
     _lcdInst
       _lcdNibble
     _next_address
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _stopOperation
     _Eeprom_ReadByte
     _Eeprom_WriteByte
     ___awdiv
     ___awmod
     _next_address
   _testBatteries
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
     _readADC
   _wait_2ms

 _ISR (ROOT)
   _keypressed
     i2_I2C_Master_Read
       i2_I2C_Master_Wait
     i2_I2C_Master_Start
       i2_I2C_Master_Wait
     i2_I2C_Master_Stop
       i2_I2C_Master_Wait
     i2_I2C_Master_Write
       i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
       i2___lwmod
         i2___lwdiv (ARG)
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
     i2_stopOperation
       i2_Eeprom_ReadByte
       i2_Eeprom_WriteByte
       i2___awdiv
       i2___awmod
       i2_next_address
   i2___awdiv
   i2___awmod
   i2_stopOperation
     i2_Eeprom_ReadByte
     i2_Eeprom_WriteByte
     i2___awdiv
     i2___awmod
     i2_next_address

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     3C      3C       7       23.4%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     44      7D       5       97.7%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     33      4E       1       61.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     107      34        0.0%
DATA                 0      0     107       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Mon Apr 10 07:40:00 2017

         i2_I2C_Master_Start 3522           i2_I2C_Master_Write 34F8     __end_of_Eeprom_WriteByte 330E  
                         l30 3470                 ___awdiv@sign 0085          ___wmul@multiplicand 0082  
         i2___lwdiv@dividend 0001                  __CFG_BORV$3 000000    stopOperation@address_code 0088  
               __CFG_CP0$OFF 000000                 __CFG_CP1$OFF 000000                 __CFG_CP2$OFF 000000  
               __CFG_CP3$OFF 000000                  __CFG_OSC$HS 000000                  _totalHeader FCBA  
                        l510 06BE                          l504 05B0                          l522 08DA  
                        l426 3456                          l347 1080                          l516 07CC  
                        l461 342A                          l621 1730                          l528 09E8  
                        l467 3304                          l477 19FA                          l498 04A2  
                        _GIE 007F97                 __CFG_CPB$OFF 000000                          _PEN 007E2A  
               __CFG_CPD$OFF 000000                          _ISR 0008                          _SEN 007E28  
        ?i2_I2C_Master_Start 0001          ?i2_I2C_Master_Write 0002                          _min 00E7  
                        _sec 00ED                 ___awmod@sign 0032                          prod 000FF3  
                        wreg 000FE8                 __CFG_LVP$OFF 000000                         ?_ISR 0001  
               show_log@hour 00B2                 __CFG_WDT$OFF 000000                         l1013 2D96  
                       l1066 2F92                         l1076 305A                 show_log@year 00AF  
                       l6003 2CCE                         l6007 2CE2                         l6031 2DF2  
                       l6023 2DD0                         l4423 340A                         l7001 10FA  
                       l6043 2E32                         l6035 2E16                         l6027 2DE2  
                       l6019 2DC0                         l6131 296C                         l7011 113A  
                       l7003 1104                         l6053 2D1A                         l3549 33DC  
                       l6029 2DEC                         l6141 29DA                         l6055 2D2A  
                       l6039 2E22                         l6151 2A04              __end_of_CHeader FD7D  
                       l6065 2D84                         l6057 2D30                         l6161 2A3E  
                       l7121 1482                         l7113 1436                         l7105 13EA  
                       l7041 1236                         l7033 11F6                         l7025 11B6  
                       l7017 1176                         l7009 1130                         l6411 1C6C  
                       l6403 1C48                         l6155 2A24                         l7131 14DA  
                       l7123 148E                         l7115 1442                         l7107 13F6  
                       l7051 1282                         l7043 1242                         l7035 1202  
                       l7027 11C2                         l7019 1182                         l6085 332E  
                       l6173 2A78                         l6165 2A5E                         l6423 1CD0  
                       l6431 1CF4                         l6343 19D6                         l6271 2236  
                       l7143 152E                         l7071 1316                         l6513 04EC  
                       l6185 2ACE                         l6193 2B06                         l7153 157A  
                       l7145 153A                         l7129 14CE                         l7057 12B6  
                       l7049 1276                         l6435 001C                         l5803 16F8  
                       l6419 1CC6                         l6339 19CC                         l7067 130C  
                       l7059 12C2                         l5733 2F4A                         l6621 0816  
                       l5901 1994                         l6269 2226                         l6189 2AF0  
                       l7149 1570                         l7165 1604                         l7085 1372  
                       l5735 2F54                         l6527 053A                         l5903 199C  
                       l5823 1784                         l5807 16FE                         l6391 1BDC  
                       l7159 159A                         l7079 1338                         l5745 2F86  
                       l5737 2F5A                         l5761 304C                         l5753 3016  
                       l6449 0062                         l5825 178A                         l5905 19A8  
                       l7089 137C                         l7097 139E                         l5755 3022  
                       l6707 0AD6                         l6635 0864                         l6563 0648  
                       l6491 042C                         l5819 1768                         l7099 13AA  
                       l6803 0D08                         l5757 3028                         l6549 05FA  
                       l6477 03DE                         l5861 1830                         l5837 17C0  
                       l5853 17FC                         l6901 0EDA                         l6671 0972  
                       l5839 17C6                         l5855 180E                         l5783 1634  
                       l6399 1C3E                         l6911 0F3E                         l6823 0D58  
                       l6807 0D18                         l5945 326E                         l6657 0924  
                       l6585 0708                         l5881 18B4                         l5873 188C  
                       l5865 1868                         l5785 1646                         l6905 0EEE  
                       l6825 0D60                         l6809 0D20                         l6841 0DA2  
                       l6745 0BCC                         l6737 0B9A                         l5963 32AA  
                       l5891 18E8                         l5867 1872                         l5795 1680  
                       l5779 1620                         l6835 0D8C                         l6819 0D48  
                       l6763 0C1A                         l6693 0A88                         l5893 1934  
                       l5885 18CE                         l5789 1650                         l5981 2C60  
                       l6757 0BF8                         l6749 0BD6                         l6599 0756  
                       l5879 18A8                         l5991 2C90                         l5975 2C4A  
                       l6943 0FAA                         l6871 0E38                         l6863 0E18  
                       l6839 0D9C                         l6767 0C24                         l6775 0C46  
                       l5889 18E2                         l6961 0FF2                         l6945 0FB2  
                       l6929 0F6E                         l6793 0CDC                         l6777 0C52  
                       l5899 1982                         l5987 2C7E                         l6971 101E  
                       l6955 0FDA                         l6939 0F9A                         l6891 0E70  
                       l6875 0E48                         l6867 0E28                         l6859 0E08  
                       l5989 2C8A                         l5999 2CC0                         l6975 102E  
                       l6959 0FEA                         l6895 0EBC                         l6977 1034  
                       l6999 10EE                         STR_1 FFDE                         STR_2 FFCD  
                       STR_3 FF67                         STR_4 FEBD                         STR_5 FF34  
                       STR_6 FF12                         STR_7 FF56                         STR_8 FDA0  
                       STR_9 FEF0                         _LATA 000F89                         _LATB 000F8A  
                       _LATC 000F8B                         _LATD 000F8C                         _LATE 000F8D  
                       u6210 04A2                         _PEIE 007F96                         u6410 09E8  
                       u6330 07CC                         u6250 05B0                         u6171 006C  
                       u7107 0D6E                         _RCEN 007E2B                         u7117 0D82  
                       i2l30 3482                         u7207 19EA                         u7127 0F7C  
                       u7047 0BE8                         u5720 324E                         u7217 1C5C  
                       u7137 0F90                         u7057 0C36                         u5730 328A  
                       u6370 08DA                         u6290 06BE                         u7227 1CE4  
                       u7147 0FC0                         u7067 0CEA                         u5900 332C  
                       u7237 31BA                         u7157 0FD2                         u7077 0CFE  
                       u6710 0F3A                         u7247 31F0                         u7167 1000  
                       u7087 0D2E                         u7257 312E                         u7177 1014  
                       u7097 0D40                         u7267 3136                         u7187 1328  
                       u6580 0DB2                         u7277 3156                         u7197 138E  
                       u6581 0DAE                         u6590 0DC8                         u6582 0DB4  
                       u7287 315E                         u6592 0DCA                         u5895 3094  
                       _TMR0 000FD6                         _TMR1 000FCE       __end_ofi2_next_address 34BE  
                       _main 0B18                         _keys FD7D                         _numC 00EB  
                       fsr0h 000FEA                         fsr1h 000FE2           i2___lwdiv@quotient 0005  
                       fsr2h 000FDA                         fsr0l 000FE9                         indf2 000FDF  
                       fsr1l 000FE1                         fsr2l 000FD9                         btemp 004F  
       ??i2_I2C_Master_Start 0002         ??i2_I2C_Master_Write 0004                         prodh 000FF4  
                       prodl 000FF3                         start 000E             __end_of_AAHeader FD1E  
              __CFG_IESO$OFF 000000              __end_ofi2_putch 34E2                __CFG_MCLRE$ON 000000  
               ___param_bank 000000                show_log@C_num 00A7                  i2_lcdNibble 3164  
                      ??_ISR 0021                show_log@i_901 00B6                show_log@i_904 00B7  
           ?_I2C_Master_Init 008D             ?_I2C_Master_Read 0001             ?_I2C_Master_Wait 0001  
           ?_I2C_Master_Stop 0001                show_log@month 00B0                        ?_main 0001  
                      _ACKEN 007E2C                        _ACKDT 007E2D              __end_of___awdiv 2CEC  
                      _ADRES 000FC3                        _EEADR 000FA9                        STR_10 FE55  
                      STR_11 FE8A                        STR_12 FE55                        STR_20 FDB9  
                      STR_13 FEAC                        STR_21 FDD0                        STR_22 FF89  
                      STR_30 FF01                        STR_14 FE2C                        STR_31 FF78  
                      STR_15 FE9B                        STR_23 FE79                        STR_16 FE2C  
                      STR_24 FF9A                        STR_40 FE41                        STR_32 FDE7  
                      STR_25 FE79                        STR_17 FF23                        STR_41 FE68  
                      STR_33 FDFE                        STR_18 FE2C                        STR_26 FFAB  
                      STR_34 FF45                        STR_27 FE79                        STR_35 FFEF  
                      STR_19 FECE                        STR_28 FFBC                        STR_36 FEDF  
            __end_of___awmod 2E3C                        STR_29 FE79                        STR_37 FDB9  
                      STR_38 FDD0                        STR_39 FE15              __end_of___lldiv 2DA8  
                      _T0CON 000FD5              ___awdiv@divisor 0082                        _T1CON 000FCD  
            __end_of___lwdiv 2F9C              __end_of___lwmod 3064                        i2l621 1DEE  
                      i2l461 3440                        i2l467 3350                        i2l559 270E  
                      i2l589 2870              ___awdiv@counter 0084                        _PORTB 000F81  
                      _TRISA 000F92                        _TRISB 000F93                        _TRISC 000F94  
                      _TRISD 000F95                        _TRISE 000F96                _turn1BackLeft 00DA  
              __CFG_PWRT$OFF 000000                __CFG_WRT0$OFF 000000              __end_of_getChar 350A  
              __CFG_WRT1$OFF 000000                __CFG_WRT2$OFF 000000                __CFG_WRT3$OFF 000000  
            __end_of_lcdInst 34D6              __end_of_getOnes 33C6               __CFG_EBTR0$OFF 000000  
             __CFG_FCMEN$OFF 000000              __end_of_getTens 327A               __CFG_EBTR1$OFF 000000  
              _turn2BackLeft 00DE               __CFG_EBTR2$OFF 000000                 main@keypress 00BC  
             __CFG_EBTR3$OFF 000000                        _nRBPU 007F8F       __size_of_stopOperation 030A  
              __CFG_WRTB$OFF 000000                __CFG_WRTC$OFF 000000                __CFG_WRTD$OFF 000000  
            __end_of_readADC 345C              __end_of_initLCD 31FC               __CFG_EBTRB$OFF 000000  
                 i2isdigit@c 0003              __end_of_dpowers FD98                        _logPC 0012  
           ?_Eeprom_ReadByte 0031                        _numAA 00E9                        _num9V 00E8  
            __end_of_isdigit 33E4                        _step1 004D                        _step2 004E  
                      _putch 34BE                        main@i 00BD       i2stopOperation@address 000A  
                      pclath 000FFA                        tablat 000FF5             __end_ofi2___wmul 3380  
                      plusw1 000FE3                        plusw2 000FDB                        status 000FD8  
            ?i2_next_address 0001           __size_ofi2___awdiv 0084           i2_Eeprom_WriteByte 3334  
         __size_ofi2___awmod 0070               __CFG_PBADEN$ON 000000                i2printf@width 001A  
           __end_ofi2_printf 200E           __size_ofi2___lwdiv 0052           __size_ofi2___lwmod 0042  
             show_log@AA_num 00A5              __initialization 2F9C           __size_ofi2_lcdInst 000C  
               __end_of_main 1612                 __end_of_keys FD8E          next_address@address 0031  
                 i2printf@ap 0014          ?i2_Eeprom_WriteByte 0001                 logPC@numberC 0118  
         __size_ofi2_isdigit 001E                 logPC@runTime 0113                       ??_main 00BA  
              __activetblptr 000002            ?_I2C_Master_Start 0001            ?_I2C_Master_Write 0032  
          show_log@Drain_num 00AB               show_log@minute 00B3               show_log@second 00B4  
       __size_of_getHundreds 003C           ??_I2C_Master_Start 0032                       _ADCON0 000FC2  
                     _ADCON1 000FC1           ??_I2C_Master_Write 0034                       _ADCON2 000FC0  
                     ?_logPC 0001                       _EEADRH 000FAA                       _EEDATA 000FA8  
       ??i2_Eeprom_WriteByte 0004                       _EECON2 000FA7             ___awdiv@dividend 0080  
            i2lcdNibble@data 0002                       ?_putch 0001              i2lcdNibble@temp 0001  
                     _INT1IE 007F83                       _INT1IF 007F80                       _CVRCON 000FB5  
                     i2l1066 310C                       i2l1076 3234                       i2l4107 33A0  
                     i2l4301 1E36                       i2l4303 1E3A                       i2l4315 1E66  
                     i2l4331 1E96                       i2l4317 1E6A                       i2l4333 1EA6  
                     i2l4261 1D1C                       i2l5053 2B78                       i2l4351 1F02  
                     i2l4343 1EE4                       i2l4263 1D2A                       i2l3711 2F0E  
                     i2l3703 2EEE                       i2l5063 2B9C                       i2l4345 1EEC  
                     i2l4281 1DBC                       i2l4273 1D5E                       i2l4257 1D0C  
                     i2l3705 2EF6                       i2l5057 2B80                       i2l5073 2BD0  
                     i2l3731 33FA                       i2l4371 1F90                       i2l4363 1F34  
                     i2l4339 1EC0                       i2l4267 1D30                       i2l3651 2E50  
                     i2l3707 2EFA                       i2l3715 2F18                       i2l4187 2524  
                     i2l3741 30DA                       i2l4381 1FEC                       i2l4357 1F18  
                     i2l4285 1DC0                       i2l4189 2534                       i2l5069 2BC0  
                     i2l3743 30E2                       i2l4359 1F20                       i2l4367 1F46  
                     i2l4383 1FF4                       i2l3663 2E76                       i2l3719 2F26  
                     i2l5095 2C28                       i2l5087 2C08                       i2l5079 2BE6  
                     i2l3753 3102                       i2l3745 30E6                       i2l3761 320A  
                     i2l4369 1F4C                       i2l4377 1FD6                       i2l4297 1E1C  
                     i2l3665 2E7E                       i2l3657 2E60                       i2l5089 2C0E  
                     i2l3763 3212                       i2l4379 1FE6                       i2l3683 2EB6  
                     i2l3675 2E9E                       i2l3667 2E82                       i2l3765 3216  
                     i2l5701 2844                       i2l5613 2730                keypressed@key 001E  
                     i2l3679 2EA8                       i2l3695 2ED4                       i2l5631 276A  
                     i2l5623 2752                       i2l3769 322A                       i2l5705 2850  
                     i2l3699 2EE0                       i2l5715 286E                       i2l5627 275E  
                     i2l5619 2746                       i2l5563 2672                       i2l5709 285A  
                     i2l5653 27B0                       i2l5645 2798                       i2l5637 277E  
                     i2l5581 26C2                       i2l5671 27E6                       i2l5663 27CE  
                     i2l5639 2780                       i2l5657 27BA                       i2l5649 27A4  
                     i2l5665 27D0                       i2l5593 26E8                       i2l5683 280A  
                     i2l5675 27F2                       i2l5691 2820                       i2l5587 26D8  
                     i2l5595 26EC                       i2l5589 26DC                       i2l5679 27FE  
                     i2l5697 2838                       i2l5689 281E                       _TMR0IE 007F95  
                     _TMR0IF 007F92                    ??i2_putch 0003                       _TMR1IE 007CE8  
                     _TMR1IF 007CF0                       _SSPADD 000FC8                       _TRISC3 007CA3  
                     _TRISC4 007CA4                       _SSPBUF 000FC9               _turn1BackRight 00DC  
             __CFG_XINST$OFF 000000                _stopOperation 200E               _turn2BackRight 00E0  
                     ___wmul 32B6                    ??___awdiv 0031               __CFG_STVREN$ON 000000  
                  ??___awmod 0031     i2Eeprom_ReadByte@address 0001                    ??___lldiv 0031  
                  ??___lwdiv 0031                    ??___lwmod 0034                       _countC 00E4  
                     clear_0 2FE2                       clear_1 2FEE             ___awdiv@quotient 0086  
            ___awmod@divisor 0082                    ??_getChar 0034              ___awmod@counter 0031  
                  ??_lcdInst 0033                       _printf 1612                    ??_getOnes 0034  
                  ??_getTens 0034                       logPC@i 0120               i2___awdiv@sign 0006  
                  ??_readADC 0031                    ??_initLCD 0080     __size_ofi2_stopOperation 02F2  
           __end_of_wait_2ms 341C                 __pdataCOMRAM 0034                    ??_isdigit 0031  
          __end_ofi2___awdiv 2EC0            __end_ofi2___awmod 2F30            __end_ofi2___lwdiv 3116  
               __mediumconst FC94            __end_ofi2___lwmod 323E             __end_of_show_log 1D02  
                     tblptrh 000FF7      Eeprom_WriteByte@address 0031                       tblptrl 000FF6  
                     tblptru 000FF8                main@steps_760 00C3               i2___awmod@sign 0006  
          __end_ofi2_lcdInst 34EE            __end_ofi2_isdigit 3402                   __accesstop 0080  
    __end_of__initialization 2FF4                ___rparam_used 000001               ?_stopOperation 0001  
         i2___lwmod@dividend 0008               __pcstackCOMRAM 0001                 __pidataBANK0 3494  
              __end_of_logPC 0B18                __end_of_putch 34CA            ?_Eeprom_WriteByte 0031  
                i2printf@idx 0013                  i2printf@val 0017           testBatteries@volt1 00A1  
         testBatteries@volt2 00A5           testBatteries@volt3 00A3           testBatteries@volt4 00A7  
         testBatteries@volt5 00A9                logPC@numberAA 0116                logPC@number9V 011A  
         ??_Eeprom_WriteByte 0034                    ?i2___wmul 0001           __size_of_lcdNibble 004E  
                i2putch@data 0003                  keypressed@i 0020                  ISR@keypress 0030  
           logPC@numberDrain 011C                    ?i2_printf 000D          show_log@log_address 009F  
           logPC@numberTotal 011E                      ??_logPC 008D                      ??_putch 0033  
                 __pbssBANK0 00C4                ?_next_address 0031              show_log@address 00B8  
      __end_of_testBatteries 2B20                 ?i2_lcdNibble 0001                      ?___wmul 0080  
                    ?_printf 0089                   ??i2___wmul 0005               keypressed@left 001F  
                    _CHeader FD5E                   ??i2_printf 000F             ??i2_next_address 0003  
       show_log@elapsed_time 00AD                      _SSPCON1 000FC6                      _SSPCON2 000FC5  
          ??i2_stopOperation 0009                      _SSPSTAT 000FC7            show_log@total_num 00A3  
             ??_next_address 0033                      i2_putch 34D6                   _countDrain 00E5  
            ??_stopOperation 0034  __size_ofi2_I2C_Master_Start 0008            __end_of_lcdNibble 3164  
__size_ofi2_I2C_Master_Write 000A                      __Hparam 0000                      __Lparam 0000  
                 _lastRunRTC 00C4                    ?_wait_2ms 0031         Eeprom_WriteByte@data 0033  
                  ?_show_log 009F                      ___awdiv 2C2E                      ___awmod 2DA8  
                    ___lldiv 2CEC              __size_of___wmul 0032                      ___lwdiv 2F30  
                    ___lwmod 3002                    _CMCONbits 000FB4                      __pcinit 2F9C  
                 _plat1Right 00D4                      _getChar 3502                      __ramtop 1000  
                 _plat2Right 00D8                      _lcdInst 34CA                      _getOnes 33A6  
                    __ptext0 0B18                      __ptext1 3402                      __ptext2 28AC  
                    __ptext3 3448                      _getTens 323E                      __ptext4 200E  
                    __ptext5 2DA8                      __ptext6 2C2E                      __ptext7 32E8  
                    __ptext8 19C6                      __ptext9 1612              __size_of_printf 03B4  
                  _T0CONbits 000FD5                      _countAA 00E3                      _count9V 00E2  
                    _readADC 3448                      _initLCD 31B2                 __size_of_ISR 28A4  
          __end_of_hexpowers FDA0                    _T1CONbits 000FCD                      _dpowers FD8E  
                    _isdigit 33C6                      _opTimer 004A             ___awmod@dividend 0080  
                    _numBats 00EA                   _keypressed 2B20     __size_of_I2C_Master_Init 0060  
   __size_of_I2C_Master_Read 0026     __size_of_I2C_Master_Wait 0012     __size_of_I2C_Master_Stop 0008  
                    _sorting 004C               __pintcode_body 260A         end_of_initialization 2FF4  
                 getChar@num 008B                __Lmediumconst FC94                      int_func 260A  
        i2___wmul@multiplier 0001                   _screenMode 00FC     __size_of_Eeprom_ReadByte 0016  
  __size_of_I2C_Master_Start 0008    __size_of_I2C_Master_Write 000A              ___lldiv@divisor 0084  
                 _timeHeader FD3E              ___lldiv@counter 008C                   ??_wait_2ms 0033  
                    printf@c 009E                      printf@f 0089             I2C_Master_Init@c 008D  
           I2C_Master_Read@a 0032                      postdec1 000FE5                      postdec2 000FDD  
                 _solOnTimer 004B                   ??_show_log 00A2                      postinc0 000FEE  
                    postinc2 000FDE                   getOnes@num 0089  i2stopOperation@address_code 0009  
                 getTens@num 0084                ??_getHundreds 0034            i2_I2C_Master_Read 3380  
          i2_I2C_Master_Wait 3482            i2_I2C_Master_Stop 351A                    i2___awdiv 2E3C  
                  i2___awmod 2EC0            i2___lwdiv@divisor 0003  __size_ofi2_Eeprom_WriteByte 0026  
                  i2___lwdiv 30C4                   logPC@F3221 00F2                   logPC@F3233 00F8  
                 logPC@F3225 00F4                   logPC@F3241 00EF                   logPC@F3217 0034  
                 logPC@F3237 00FA                   logPC@F3229 00F6                    i2___lwmod 31FC  
          i2___lwdiv@counter 0007           ?i2_I2C_Master_Read 0001           ?i2_I2C_Master_Wait 0001  
         ?i2_I2C_Master_Stop 0001         stopOperation@address 0089                    i2_lcdInst 34E2  
                show_log@day 00B1        __end_of_runTimeHeader FCFE                  printf@width 009C  
         i2___awdiv@dividend 0001                   logPC@i_910 0124                   logPC@i_921 012E  
                 logPC@i_913 0126                   logPC@i_930 0138                   logPC@i_922 0130  
                 logPC@i_914 0128                   logPC@i_933 013A                   logPC@i_925 0132  
                 logPC@i_917 012A                   logPC@i_909 0122                   logPC@i_926 0134  
                 logPC@i_918 012C                   logPC@i_929 0136          ??i2_I2C_Master_Read 0002  
                  i2_isdigit 33E4          ??i2_I2C_Master_Wait 0001          ??i2_I2C_Master_Stop 0002  
          i2_Eeprom_ReadByte 3432           ?i2_Eeprom_ReadByte 0001               __end_of___wmul 32E8  
       __size_ofi2_lcdNibble 004E                __pidataCOMRAM 345C         __end_of_next_address 34B0  
              i2lcdInst@data 0003          ??i2_Eeprom_ReadByte 0003             i2___wmul@product 0005  
             __end_of_printf 19C6                 i2printf@flag 0019    __end_ofi2_I2C_Master_Read 33A6  
  __end_ofi2_I2C_Master_Wait 3494                 i2printf@prec 0016          start_initialization 2F9C  
  __end_ofi2_I2C_Master_Stop 3522                  ?_keypressed 001D           i2___awdiv@quotient 0007  
                __end_of_ISR 28AC            __size_ofi2___wmul 0026                    i2printf@c 001C  
                  i2printf@f 000D        i2I2C_Master_Read@temp 0003                   ?i2___awdiv 0001  
                 ?i2___awmod 0001                   ?i2___lwdiv 0001                   ?i2___lwmod 0008  
  __size_of_Eeprom_WriteByte 0026          __end_of_getHundreds 32B6            __size_ofi2_printf 030C  
          ??_I2C_Master_Init 0091            ??_I2C_Master_Read 0032            ??_I2C_Master_Wait 0031  
                 ?i2_lcdInst 0001            ??_I2C_Master_Stop 0032    __end_ofi2_Eeprom_ReadByte 3448  
                 ?i2_isdigit 0001          __end_of_drainHeader FCBA    i2Eeprom_WriteByte@address 0001  
           show_log@Nine_num 00A9                     ??___wmul 0031            ??_Eeprom_ReadByte 0033  
                __pdataBANK0 00EF             __CFG_LPT1OSC$OFF 000000              i2_stopOperation 2318  
                   ??_printf 0091                  __pbssCOMRAM 0047                __pcstackBANK0 0080  
              __pcstackBANK1 0100            i2___lwmod@divisor 000A           show_log@currScreen 00A1  
          i2___lwmod@counter 000C                 _isdigit$1195 0032                     ?i2_putch 0001  
             getHundreds@num 0084             _I2C_Master_Start 3512          i2I2C_Master_Write@d 0002  
           _I2C_Master_Write 34EE             ___lwdiv@dividend 0080            __CFG_CCP2MX$PORTC 000000  
        __size_of_keypressed 010E                    __pintcode 0008                __pmediumconst FC94  
                  _lcdNibble 3116                     ?___awdiv 0080                     ?___awmod 0080  
                   ?___lldiv 0080            __size_of_wait_2ms 001A                     ?___lwdiv 0080  
                   ?___lwmod 0084            __size_of_show_log 033C                    _doneTimer 0049  
                   ?_getChar 008B                     ?_lcdInst 0001                     ?_getOnes 0089  
                   ?_getTens 0084                     ?_readADC 0001                     ?_initLCD 0001  
     __size_of_testBatteries 0274                    _count_2ms 0047                     ?_isdigit 0001  
 __size_ofi2_I2C_Master_Read 0026                  _getHundreds 327A   __size_ofi2_I2C_Master_Wait 0012  
 __size_ofi2_I2C_Master_Stop 0008                     _AAHeader FCFE                    _hexpowers FD98  
           ___lwdiv@quotient 0032                  ??i2___awdiv 0005               __size_of_logPC 0B06  
                ??i2___awmod 0005                    _plat1Left 00D2                    _plat2Left 00D6  
                ??i2___lwdiv 0005                  ??i2___lwmod 000C          __end_of_nineVHeader FD3E  
             __size_of_putch 000C                  _drainHeader FC95   __end_ofi2_I2C_Master_Start 352A  
 __end_ofi2_I2C_Master_Write 3502                  ??i2_lcdInst 0003               ___wmul@product 0031  
 __size_ofi2_Eeprom_ReadByte 0016                     _LATAbits 000F89                     _LATBbits 000F8A  
                   _LATCbits 000F8B                     _LATDbits 000F8C                     _LATEbits 000F8D  
            keypressed@right 001D                  ??i2_isdigit 0001        __end_of_stopOperation 2318  
                   i2u513_40 2724                     i2u347_40 339E                     i2u514_48 2726  
                   i2u507_40 26D4                     _PIR2bits 000FA1                     i2u730_47 3184  
                   i2u731_47 31A4                     i2u732_47 31AC                     i2u729_47 317C  
    __end_ofi2_stopOperation 260A        __size_of_next_address 000E             __CFG_WDTPS$32768 000000  
                 ?_lcdNibble 0001            logPC@started_time 0100                    _startGear 00EE  
                 _ADCON0bits 000FC2                    main@i_802 00C1                    main@i_738 00BE  
                  main@i_785 00BF                    main@i_787 00C0            ___wmul@multiplier 0080  
                   i2___wmul 335A                lcdNibble@data 0032                   printf@flag 009B  
              lcdNibble@temp 0031                   printf@prec 0098            i2___awdiv@divisor 0003  
                  main@steps 00C2            i2___awdiv@counter 0005                     i2_printf 1D02  
        I2C_Master_Read@temp 0033                    copy_data0 2FB0                    copy_data1 2FD0  
           _Eeprom_WriteByte 32E8           i2___awmod@dividend 0001                 _next_address 34A2  
           __size_ofi2_putch 000C                   _EECON1bits 000FA6                _testBatteries 28AC  
                   __Hrparam 0000      __size_ofi2_next_address 000E                     __Lrparam 0000  
         __CFG_BOREN$SBORDIS 000000             __size_of___awdiv 00BE             __size_of___awmod 0094  
      i2___wmul@multiplicand 0003             __size_of___lldiv 00BC             __size_of___lwdiv 006C  
           __size_of___lwmod 0062               readADC@channel 0031       Eeprom_ReadByte@address 0031  
         i2I2C_Master_Read@a 0002             __size_of_getChar 0008             __size_of_lcdInst 000C  
           __size_of_getOnes 0020             __size_of_getTens 003C              _I2C_Master_Init 3064  
           __size_of_readADC 0014              _I2C_Master_Read 330E             __size_of_initLCD 004A  
                _nineVHeader FD1E              _I2C_Master_Wait 3470              _I2C_Master_Stop 350A  
               ??_keypressed 001F             __size_of_isdigit 001E   __end_ofi2_Eeprom_WriteByte 335A  
            ___lwdiv@divisor 0082              ___lwdiv@counter 0031                     __ptext10 34BE  
                   __ptext11 33C6                     __ptext20 2F30                     __ptext12 32B6  
                   __ptext21 3502                     __ptext13 34A2                     __ptext30 3064  
                   __ptext22 34EE                     __ptext14 341C                     __ptext31 2CEC  
                   __ptext23 350A                     __ptext15 0012                     __ptext40 1D02  
                   __ptext24 3512                     __ptext16 323E                     __ptext41 34D6  
                   __ptext33 2B20                     __ptext25 31B2                     __ptext17 33A6  
                   __ptext50 3522                     __ptext42 33E4                     __ptext34 2318  
                   __ptext26 34CA                     __ptext18 3002                     __ptext51 3380  
                   __ptext43 335A                     __ptext35 34B0                     __ptext27 3116  
                   __ptext19 327A                     __ptext52 3482                     __ptext44 31FC  
                   __ptext36 2EC0                     __ptext28 330E                     __ptext45 30C4  
                   __ptext37 2E3C                     __ptext29 3470                     __ptext46 34E2  
                   __ptext38 3334                     __ptext47 3164                     __ptext39 3432  
                   __ptext48 34F8                     __ptext49 351A                     _doubleAA 00E6  
             i2_isdigit$1195 0002                __size_of_main 0AFA                    wait_2ms@x 0031  
            _Eeprom_ReadByte 341C               ?_testBatteries 0001                     _realTime 00CB  
                   _numDrain 00EC                     _wait_2ms 3402             ?i2_stopOperation 0001  
              ??i2_lcdNibble 0001                  ??_lcdNibble 0031                     _show_log 19C6  
         __end_of_keypressed 2C2E                     int$flags 004F                    printf@idx 0095  
                  show_log@i 00B5                    printf@val 0099            i2___awmod@divisor 0003  
                  putch@data 0033            i2___awmod@counter 0005     __end_of_I2C_Master_Start 351A  
   __end_of_I2C_Master_Write 34F8                   _INTCONbits 000FF2          __end_of_totalHeader FCDD  
                   isdigit@c 0033           __end_of_timeHeader FD5E                     intlevel2 0000  
           ___lwmod@dividend 0084             ___lldiv@dividend 0080        i2next_address@address 0001  
                   printf@ap 0096      __end_of_I2C_Master_Init 30C4      __end_of_I2C_Master_Read 3334  
    __end_of_I2C_Master_Wait 3482      __end_of_I2C_Master_Stop 3512                  lcdInst@data 0033  
        __end_ofi2_lcdNibble 31B2             ___lldiv@quotient 0088            I2C_Master_Write@d 0032  
            ___lwmod@divisor 0086                 ?_getHundreds 0084              ___lwmod@counter 0088  
    __end_of_Eeprom_ReadByte 3432              ??_testBatteries 009F                _runTimeHeader FCDD  
             i2_next_address 34B0       i2Eeprom_WriteByte@data 0003  
