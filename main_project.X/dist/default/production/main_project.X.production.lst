

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sun Feb 26 00:43:03 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    36                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    42                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    43                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    44  0000                     
    45                           ; Version 1.40
    46                           ; Generated 01/12/2016 GMT
    47                           ; 
    48                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    49                           ; All rights reserved.
    50                           ; 
    51                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    52                           ; 
    53                           ; Redistribution and use in source and binary forms, with or without modification, are
    54                           ; permitted provided that the following conditions are met:
    55                           ; 
    56                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    57                           ;        conditions and the following disclaimer.
    58                           ; 
    59                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    60                           ;        of conditions and the following disclaimer in the documentation and/or other
    61                           ;        materials provided with the distribution.
    62                           ; 
    63                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    64                           ;        software without specific prior written permission.
    65                           ; 
    66                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    67                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    68                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    69                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    70                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    71                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    72                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    73                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    74                           ; 
    75                           ; 
    76                           ; Code-generator required, PIC18F4620 Definitions
    77                           ; 
    78                           ; SFR Addresses
    79  0000                     
    80                           	psect	idataCOMRAM
    81  0013BE                     __pidataCOMRAM:
    82                           	opt stack 0
    83                           
    84                           ;initializer for _screenMode
    85  0013BE  02                 	db	2
    86                           
    87                           	psect	mediumconst
    88  00FE5A                     __pmediumconst:
    89                           	opt stack 0
    90  00FE5A  00                 	db	0
    91  00FE5B                     _keys:
    92                           	opt stack 0
    93  00FE5B  31                 	db	49
    94  00FE5C  32                 	db	50
    95  00FE5D  33                 	db	51
    96  00FE5E  41                 	db	65
    97  00FE5F  34                 	db	52
    98  00FE60  35                 	db	53
    99  00FE61  36                 	db	54
   100  00FE62  42                 	db	66
   101  00FE63  37                 	db	55
   102  00FE64  38                 	db	56
   103  00FE65  39                 	db	57
   104  00FE66  43                 	db	67
   105  00FE67  2A                 	db	42
   106  00FE68  30                 	db	48
   107  00FE69  23                 	db	35
   108  00FE6A  44                 	db	68
   109  00FE6B  00                 	db	0
   110  00FE6C                     __end_of_keys:
   111                           	opt stack 0
   112  00FE6C                     _dpowers:
   113                           	opt stack 0
   114  00FE6C  0001               	dw	1
   115  00FE6E  000A               	dw	10
   116  00FE70  0064               	dw	100
   117  00FE72  03E8               	dw	1000
   118  00FE74  2710               	dw	10000
   119  00FE76                     __end_of_dpowers:
   120                           	opt stack 0
   121  00FE76                     _hexpowers:
   122                           	opt stack 0
   123  00FE76  0001               	dw	1
   124  00FE78  0010               	dw	16
   125  00FE7A  0100               	dw	256
   126  00FE7C  1000               	dw	4096
   127  00FE7E                     __end_of_hexpowers:
   128                           	opt stack 0
   129  0000                     _TMR0	set	4054
   130  0000                     _TMR1	set	4046
   131  0000                     _ADCON0	set	4034
   132  0000                     _ADCON0bits	set	4034
   133  0000                     _ADCON1	set	4033
   134  0000                     _ADCON2	set	4032
   135  0000                     _ADRESH	set	4036
   136  0000                     _ADRESL	set	4035
   137  0000                     _INTCONbits	set	4082
   138  0000                     _LATA	set	3977
   139  0000                     _LATAbits	set	3977
   140  0000                     _LATB	set	3978
   141  0000                     _LATBbits	set	3978
   142  0000                     _LATC	set	3979
   143  0000                     _LATCbits	set	3979
   144  0000                     _LATD	set	3980
   145  0000                     _LATDbits	set	3980
   146  0000                     _LATE	set	3981
   147  0000                     _LATEbits	set	3981
   148  0000                     _PORTB	set	3969
   149  0000                     _SSPADD	set	4040
   150  0000                     _SSPBUF	set	4041
   151  0000                     _SSPCON1	set	4038
   152  0000                     _SSPCON2	set	4037
   153  0000                     _SSPSTAT	set	4039
   154  0000                     _T0CON	set	4053
   155  0000                     _T0CONbits	set	4053
   156  0000                     _T1CON	set	4045
   157  0000                     _T1CONbits	set	4045
   158  0000                     _TRISA	set	3986
   159  0000                     _TRISB	set	3987
   160  0000                     _TRISC	set	3988
   161  0000                     _TRISD	set	3989
   162  0000                     _TRISE	set	3990
   163  0000                     _ACKDT	set	32301
   164  0000                     _ACKEN	set	32300
   165  0000                     _GIE	set	32663
   166  0000                     _INT1IE	set	32643
   167  0000                     _INT1IF	set	32640
   168  0000                     _PEIE	set	32662
   169  0000                     _PEN	set	32298
   170  0000                     _RCEN	set	32299
   171  0000                     _SEN	set	32296
   172  0000                     _TMR0IE	set	32661
   173  0000                     _TMR0IF	set	32658
   174  0000                     _TMR1IE	set	31976
   175  0000                     _TMR1IF	set	31984
   176  0000                     _TRISC3	set	31907
   177  0000                     _TRISC4	set	31908
   178  00FE7E                     STR_9:
   179  00FE7E  25                 	db	37
   180  00FE7F  30                 	db	48	;'0'
   181  00FE80  32                 	db	50	;'2'
   182  00FE81  64                 	db	100	;'d'
   183  00FE82  3A                 	db	58	;':'
   184  00FE83  25                 	db	37
   185  00FE84  30                 	db	48	;'0'
   186  00FE85  32                 	db	50	;'2'
   187  00FE86  64                 	db	100	;'d'
   188  00FE87  20                 	db	32
   189  00FE88  20                 	db	32
   190  00FE89  20                 	db	32
   191  00FE8A  20                 	db	32
   192  00FE8B  20                 	db	32
   193  00FE8C  20                 	db	32
   194  00FE8D  20                 	db	32
   195  00FE8E  20                 	db	32
   196  00FE8F  20                 	db	32
   197  00FE90  20                 	db	32
   198  00FE91  20                 	db	32
   199  00FE92  20                 	db	32
   200  00FE93  20                 	db	32
   201  00FE94  20                 	db	32
   202  00FE95  20                 	db	32
   203  00FE96  00                 	db	0
   204  00FE97                     STR_20:
   205  00FE97  44                 	db	68	;'D'
   206  00FE98  41                 	db	65	;'A'
   207  00FE99  54                 	db	84	;'T'
   208  00FE9A  45                 	db	69	;'E'
   209  00FE9B  3A                 	db	58	;':'
   210  00FE9C  20                 	db	32
   211  00FE9D  25                 	db	37
   212  00FE9E  30                 	db	48	;'0'
   213  00FE9F  32                 	db	50	;'2'
   214  00FEA0  78                 	db	120	;'x'
   215  00FEA1  2F                 	db	47
   216  00FEA2  25                 	db	37
   217  00FEA3  30                 	db	48	;'0'
   218  00FEA4  32                 	db	50	;'2'
   219  00FEA5  78                 	db	120	;'x'
   220  00FEA6  2F                 	db	47
   221  00FEA7  25                 	db	37
   222  00FEA8  30                 	db	48	;'0'
   223  00FEA9  32                 	db	50	;'2'
   224  00FEAA  78                 	db	120	;'x'
   225  00FEAB  20                 	db	32
   226  00FEAC  20                 	db	32
   227  00FEAD  00                 	db	0
   228  00FEAE                     STR_21:
   229  00FEAE  54                 	db	84	;'T'
   230  00FEAF  49                 	db	73	;'I'
   231  00FEB0  4D                 	db	77	;'M'
   232  00FEB1  45                 	db	69	;'E'
   233  00FEB2  3A                 	db	58	;':'
   234  00FEB3  20                 	db	32
   235  00FEB4  25                 	db	37
   236  00FEB5  30                 	db	48	;'0'
   237  00FEB6  32                 	db	50	;'2'
   238  00FEB7  78                 	db	120	;'x'
   239  00FEB8  3A                 	db	58	;':'
   240  00FEB9  25                 	db	37
   241  00FEBA  30                 	db	48	;'0'
   242  00FEBB  32                 	db	50	;'2'
   243  00FEBC  78                 	db	120	;'x'
   244  00FEBD  3A                 	db	58	;':'
   245  00FEBE  25                 	db	37
   246  00FEBF  30                 	db	48	;'0'
   247  00FEC0  32                 	db	50	;'2'
   248  00FEC1  78                 	db	120	;'x'
   249  00FEC2  20                 	db	32
   250  00FEC3  20                 	db	32
   251  00FEC4  00                 	db	0
   252  00FEC5                     STR_15:
   253  00FEC5  42                 	db	66	;'B'
   254  00FEC6  41                 	db	65	;'A'
   255  00FEC7  54                 	db	84	;'T'
   256  00FEC8  54                 	db	84	;'T'
   257  00FEC9  45                 	db	69	;'E'
   258  00FECA  52                 	db	82	;'R'
   259  00FECB  49                 	db	73	;'I'
   260  00FECC  45                 	db	69	;'E'
   261  00FECD  53                 	db	83	;'S'
   262  00FECE  3A                 	db	58	;':'
   263  00FECF  20                 	db	32
   264  00FED0  25                 	db	37
   265  00FED1  30                 	db	48	;'0'
   266  00FED2  32                 	db	50	;'2'
   267  00FED3  64                 	db	100	;'d'
   268  00FED4  20                 	db	32
   269  00FED5  20                 	db	32
   270  00FED6  20                 	db	32
   271  00FED7  20                 	db	32
   272  00FED8  20                 	db	32
   273  00FED9  00                 	db	0
   274  00FEDA                     STR_11:
   275  00FEDA  42                 	db	66	;'B'
   276  00FEDB  41                 	db	65	;'A'
   277  00FEDC  54                 	db	84	;'T'
   278  00FEDD  54                 	db	84	;'T'
   279  00FEDE  45                 	db	69	;'E'
   280  00FEDF  52                 	db	82	;'R'
   281  00FEE0  49                 	db	73	;'I'
   282  00FEE1  45                 	db	69	;'E'
   283  00FEE2  53                 	db	83	;'S'
   284  00FEE3  3A                 	db	58	;':'
   285  00FEE4  20                 	db	32
   286  00FEE5  25                 	db	37
   287  00FEE6  30                 	db	48	;'0'
   288  00FEE7  32                 	db	50	;'2'
   289  00FEE8  64                 	db	100	;'d'
   290  00FEE9  20                 	db	32
   291  00FEEA  20                 	db	32
   292  00FEEB  20                 	db	32
   293  00FEEC  00                 	db	0
   294  00FEED                     STR_5:
   295  00FEED  25                 	db	37
   296  00FEEE  32                 	db	50	;'2'
   297  00FEEF  64                 	db	100	;'d'
   298  00FEF0  20                 	db	32
   299  00FEF1  20                 	db	32
   300  00FEF2  20                 	db	32
   301  00FEF3  20                 	db	32
   302  00FEF4  20                 	db	32
   303  00FEF5  20                 	db	32
   304  00FEF6  20                 	db	32
   305  00FEF7  20                 	db	32
   306  00FEF8  20                 	db	32
   307  00FEF9  20                 	db	32
   308  00FEFA  20                 	db	32
   309  00FEFB  20                 	db	32
   310  00FEFC  20                 	db	32
   311  00FEFD  20                 	db	32
   312  00FEFE  00                 	db	0
   313  00FEFF                     STR_24:
   314  00FEFF  30                 	db	48	;'0'
   315  00FF00  31                 	db	49	;'1'
   316  00FF01  32                 	db	50	;'2'
   317  00FF02  33                 	db	51	;'3'
   318  00FF03  34                 	db	52	;'4'
   319  00FF04  35                 	db	53	;'5'
   320  00FF05  36                 	db	54	;'6'
   321  00FF06  37                 	db	55	;'7'
   322  00FF07  38                 	db	56	;'8'
   323  00FF08  39                 	db	57	;'9'
   324  00FF09  61                 	db	97	;'a'
   325  00FF0A  62                 	db	98	;'b'
   326  00FF0B  63                 	db	99	;'c'
   327  00FF0C  64                 	db	100	;'d'
   328  00FF0D  65                 	db	101	;'e'
   329  00FF0E  66                 	db	102	;'f'
   330  00FF0F  00                 	db	0
   331  00FF10                     STR_23:
   332  00FF10  20                 	db	32
   333  00FF11  20                 	db	32
   334  00FF12  20                 	db	32
   335  00FF13  20                 	db	32
   336  00FF14  20                 	db	32
   337  00FF15  20                 	db	32
   338  00FF16  20                 	db	32
   339  00FF17  20                 	db	32
   340  00FF18  20                 	db	32
   341  00FF19  20                 	db	32
   342  00FF1A  20                 	db	32
   343  00FF1B  20                 	db	32
   344  00FF1C  20                 	db	32
   345  00FF1D  20                 	db	32
   346  00FF1E  20                 	db	32
   347  00FF1F  20                 	db	32
   348  00FF20  00                 	db	0
   349  00FF21                     STR_12:
   350  00FF21  23                 	db	35
   351  00FF22  20                 	db	32
   352  00FF23  4F                 	db	79	;'O'
   353  00FF24  46                 	db	70	;'F'
   354  00FF25  20                 	db	32
   355  00FF26  43                 	db	67	;'C'
   356  00FF27  20                 	db	32
   357  00FF28  20                 	db	32
   358  00FF29  20                 	db	32
   359  00FF2A  20                 	db	32
   360  00FF2B  20                 	db	32
   361  00FF2C  20                 	db	32
   362  00FF2D  20                 	db	32
   363  00FF2E  20                 	db	32
   364  00FF2F  20                 	db	32
   365  00FF30  20                 	db	32
   366  00FF31  00                 	db	0
   367  00FF32                     STR_16:
   368  00FF32  23                 	db	35
   369  00FF33  20                 	db	32
   370  00FF34  4F                 	db	79	;'O'
   371  00FF35  46                 	db	70	;'F'
   372  00FF36  20                 	db	32
   373  00FF37  41                 	db	65	;'A'
   374  00FF38  41                 	db	65	;'A'
   375  00FF39  20                 	db	32
   376  00FF3A  20                 	db	32
   377  00FF3B  20                 	db	32
   378  00FF3C  20                 	db	32
   379  00FF3D  20                 	db	32
   380  00FF3E  20                 	db	32
   381  00FF3F  20                 	db	32
   382  00FF40  20                 	db	32
   383  00FF41  20                 	db	32
   384  00FF42  00                 	db	0
   385  00FF43                     STR_14:
   386  00FF43  23                 	db	35
   387  00FF44  20                 	db	32
   388  00FF45  4F                 	db	79	;'O'
   389  00FF46  46                 	db	70	;'F'
   390  00FF47  20                 	db	32
   391  00FF48  39                 	db	57	;'9'
   392  00FF49  56                 	db	86	;'V'
   393  00FF4A  20                 	db	32
   394  00FF4B  20                 	db	32
   395  00FF4C  20                 	db	32
   396  00FF4D  20                 	db	32
   397  00FF4E  20                 	db	32
   398  00FF4F  20                 	db	32
   399  00FF50  20                 	db	32
   400  00FF51  20                 	db	32
   401  00FF52  20                 	db	32
   402  00FF53  00                 	db	0
   403  00FF54                     STR_4:
   404  00FF54  52                 	db	82	;'R'
   405  00FF55  55                 	db	85	;'U'
   406  00FF56  4E                 	db	78	;'N'
   407  00FF57  4E                 	db	78	;'N'
   408  00FF58  49                 	db	73	;'I'
   409  00FF59  4E                 	db	78	;'N'
   410  00FF5A  47                 	db	71	;'G'
   411  00FF5B  2E                 	db	46
   412  00FF5C  2E                 	db	46
   413  00FF5D  2E                 	db	46
   414  00FF5E  20                 	db	32
   415  00FF5F  20                 	db	32
   416  00FF60  20                 	db	32
   417  00FF61  20                 	db	32
   418  00FF62  20                 	db	32
   419  00FF63  20                 	db	32
   420  00FF64  00                 	db	0
   421  00FF65                     STR_10:
   422  00FF65  54                 	db	84	;'T'
   423  00FF66  4F                 	db	79	;'O'
   424  00FF67  54                 	db	84	;'T'
   425  00FF68  41                 	db	65	;'A'
   426  00FF69  4C                 	db	76	;'L'
   427  00FF6A  20                 	db	32
   428  00FF6B  23                 	db	35
   429  00FF6C  20                 	db	32
   430  00FF6D  4F                 	db	79	;'O'
   431  00FF6E  46                 	db	70	;'F'
   432  00FF6F  20                 	db	32
   433  00FF70  20                 	db	32
   434  00FF71  20                 	db	32
   435  00FF72  20                 	db	32
   436  00FF73  20                 	db	32
   437  00FF74  20                 	db	32
   438  00FF75  00                 	db	0
   439  00FF76                     STR_7:
   440  00FF76  54                 	db	84	;'T'
   441  00FF77  4F                 	db	79	;'O'
   442  00FF78  20                 	db	32
   443  00FF79  43                 	db	67	;'C'
   444  00FF7A  4F                 	db	79	;'O'
   445  00FF7B  4E                 	db	78	;'N'
   446  00FF7C  54                 	db	84	;'T'
   447  00FF7D  49                 	db	73	;'I'
   448  00FF7E  4E                 	db	78	;'N'
   449  00FF7F  55                 	db	85	;'U'
   450  00FF80  45                 	db	69	;'E'
   451  00FF81  20                 	db	32
   452  00FF82  20                 	db	32
   453  00FF83  20                 	db	32
   454  00FF84  20                 	db	32
   455  00FF85  20                 	db	32
   456  00FF86  00                 	db	0
   457  00FF87                     STR_18:
   458  00FF87  23                 	db	35
   459  00FF88  20                 	db	32
   460  00FF89  4F                 	db	79	;'O'
   461  00FF8A  46                 	db	70	;'F'
   462  00FF8B  20                 	db	32
   463  00FF8C  44                 	db	68	;'D'
   464  00FF8D  52                 	db	82	;'R'
   465  00FF8E  41                 	db	65	;'A'
   466  00FF8F  49                 	db	73	;'I'
   467  00FF90  4E                 	db	78	;'N'
   468  00FF91  45                 	db	69	;'E'
   469  00FF92  44                 	db	68	;'D'
   470  00FF93  20                 	db	32
   471  00FF94  20                 	db	32
   472  00FF95  20                 	db	32
   473  00FF96  20                 	db	32
   474  00FF97  00                 	db	0
   475  00FF98                     STR_6:
   476  00FF98  44                 	db	68	;'D'
   477  00FF99  4F                 	db	79	;'O'
   478  00FF9A  4E                 	db	78	;'N'
   479  00FF9B  45                 	db	69	;'E'
   480  00FF9C  21                 	db	33
   481  00FF9D  20                 	db	32
   482  00FF9E  50                 	db	80	;'P'
   483  00FF9F  52                 	db	82	;'R'
   484  00FFA0  45                 	db	69	;'E'
   485  00FFA1  53                 	db	83	;'S'
   486  00FFA2  53                 	db	83	;'S'
   487  00FFA3  20                 	db	32
   488  00FFA4  2A                 	db	42
   489  00FFA5  20                 	db	32
   490  00FFA6  20                 	db	32
   491  00FFA7  20                 	db	32
   492  00FFA8  00                 	db	0
   493  00FFA9                     STR_22:
   494  00FFA9  45                 	db	69	;'E'
   495  00FFAA  4D                 	db	77	;'M'
   496  00FFAB  45                 	db	69	;'E'
   497  00FFAC  52                 	db	82	;'R'
   498  00FFAD  47                 	db	71	;'G'
   499  00FFAE  45                 	db	69	;'E'
   500  00FFAF  4E                 	db	78	;'N'
   501  00FFB0  43                 	db	67	;'C'
   502  00FFB1  59                 	db	89	;'Y'
   503  00FFB2  20                 	db	32
   504  00FFB3  53                 	db	83	;'S'
   505  00FFB4  54                 	db	84	;'T'
   506  00FFB5  4F                 	db	79	;'O'
   507  00FFB6  50                 	db	80	;'P'
   508  00FFB7  20                 	db	32
   509  00FFB8  20                 	db	32
   510  00FFB9  00                 	db	0
   511  00FFBA                     STR_8:
   512  00FFBA  54                 	db	84	;'T'
   513  00FFBB  4F                 	db	79	;'O'
   514  00FFBC  54                 	db	84	;'T'
   515  00FFBD  41                 	db	65	;'A'
   516  00FFBE  4C                 	db	76	;'L'
   517  00FFBF  20                 	db	32
   518  00FFC0  52                 	db	82	;'R'
   519  00FFC1  55                 	db	85	;'U'
   520  00FFC2  4E                 	db	78	;'N'
   521  00FFC3  20                 	db	32
   522  00FFC4  54                 	db	84	;'T'
   523  00FFC5  49                 	db	73	;'I'
   524  00FFC6  4D                 	db	77	;'M'
   525  00FFC7  45                 	db	69	;'E'
   526  00FFC8  3A                 	db	58	;':'
   527  00FFC9  20                 	db	32
   528  00FFCA  00                 	db	0
   529  00FFCB                     STR_3:
   530  00FFCB  20                 	db	32
   531  00FFCC  3C                 	db	60	;'<'
   532  00FFCD  34                 	db	52	;'4'
   533  00FFCE  20                 	db	32
   534  00FFCF  20                 	db	32
   535  00FFD0  20                 	db	32
   536  00FFD1  44                 	db	68	;'D'
   537  00FFD2  41                 	db	65	;'A'
   538  00FFD3  54                 	db	84	;'T'
   539  00FFD4  41                 	db	65	;'A'
   540  00FFD5  20                 	db	32
   541  00FFD6  20                 	db	32
   542  00FFD7  20                 	db	32
   543  00FFD8  36                 	db	54	;'6'
   544  00FFD9  3E                 	db	62	;'>'
   545  00FFDA  20                 	db	32
   546  00FFDB  00                 	db	0
   547  00FFDC                     STR_1:
   548  00FFDC  53                 	db	83	;'S'
   549  00FFDD  54                 	db	84	;'T'
   550  00FFDE  41                 	db	65	;'A'
   551  00FFDF  52                 	db	82	;'R'
   552  00FFE0  54                 	db	84	;'T'
   553  00FFE1  3A                 	db	58	;':'
   554  00FFE2  20                 	db	32
   555  00FFE3  20                 	db	32
   556  00FFE4  20                 	db	32
   557  00FFE5  50                 	db	80	;'P'
   558  00FFE6  52                 	db	82	;'R'
   559  00FFE7  45                 	db	69	;'E'
   560  00FFE8  53                 	db	83	;'S'
   561  00FFE9  53                 	db	83	;'S'
   562  00FFEA  20                 	db	32
   563  00FFEB  2A                 	db	42
   564  00FFEC  00                 	db	0
   565  00FFED                     STR_2:
   566  00FFED  3C                 	db	60	;'<'
   567  00FFEE  20                 	db	32
   568  00FFEF  34                 	db	52	;'4'
   569  00FFF0  20                 	db	32
   570  00FFF1  20                 	db	32
   571  00FFF2  20                 	db	32
   572  00FFF3  44                 	db	68	;'D'
   573  00FFF4  41                 	db	65	;'A'
   574  00FFF5  54                 	db	84	;'T'
   575  00FFF6  41                 	db	65	;'A'
   576  00FFF7  20                 	db	32
   577  00FFF8  20                 	db	32
   578  00FFF9  20                 	db	32
   579  00FFFA  36                 	db	54	;'6'
   580  00FFFB  20                 	db	32
   581  00FFFC  3E                 	db	62	;'>'
   582  00FFFD  00                 	db	0
   583  0000                     
   584                           ; #config settings
   585  00FFFE  00                 	db	0	; dummy byte at the end
   586  0000                     
   587                           	psect	cinit
   588  0012A8                     __pcinit:
   589                           	opt stack 0
   590  0012A8                     start_initialization:
   591                           	opt stack 0
   592  0012A8                     __initialization:
   593                           	opt stack 0
   594                           
   595                           ; Initialize objects allocated to COMRAM (1 bytes)
   596                           ; load TBLPTR registers with __pidataCOMRAM
   597  0012A8  0EBE               	movlw	low __pidataCOMRAM
   598  0012AA  6EF6               	movwf	tblptrl,c
   599  0012AC  0E13               	movlw	high __pidataCOMRAM
   600  0012AE  6EF7               	movwf	tblptrh,c
   601  0012B0  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   602  0012B2  6EF8               	movwf	tblptru,c
   603  0012B4  0009               	tblrd		*+	;fetch initializer
   604  0012B6  CFF5 F062          	movff	tablat,__pdataCOMRAM
   605                           
   606                           ; Clear objects allocated to COMRAM (34 bytes)
   607  0012BA  EE00  F040         	lfsr	0,__pbssCOMRAM
   608  0012BE  0E22               	movlw	34
   609  0012C0                     clear_0:
   610  0012C0  6AEE               	clrf	postinc0,c
   611  0012C2  06E8               	decf	wreg,f,c
   612  0012C4  E1FD               	bnz	clear_0
   613  0012C6                     end_of_initialization:
   614                           	opt stack 0
   615  0012C6                     __end_of__initialization:
   616                           	opt stack 0
   617  0012C6  9063               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   618  0012C8  9263               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   619  0012CA  0E00               	movlw	low (__Lmediumconst shr (0+16))
   620  0012CC  6EF8               	movwf	tblptru,c
   621  0012CE  0100               	movlb	0
   622  0012D0  EF09  F000         	goto	_main	;jump to C main() function
   623                           tblptru	equ	0xFF8
   624                           tblptrh	equ	0xFF7
   625                           tblptrl	equ	0xFF6
   626                           tablat	equ	0xFF5
   627                           postinc0	equ	0xFEE
   628                           wreg	equ	0xFE8
   629                           
   630                           	psect	bssCOMRAM
   631  000040                     __pbssCOMRAM:
   632                           	opt stack 0
   633  000040                     _time:
   634                           	opt stack 0
   635  000040                     	ds	7
   636  000047                     _waitMotor:
   637                           	opt stack 0
   638  000047                     	ds	2
   639  000049                     _count9V:
   640                           	opt stack 0
   641  000049                     	ds	1
   642  00004A                     _countAA:
   643                           	opt stack 0
   644  00004A                     	ds	1
   645  00004B                     _countC:
   646                           	opt stack 0
   647  00004B                     	ds	1
   648  00004C                     _countDrain:
   649                           	opt stack 0
   650  00004C                     	ds	1
   651  00004D                     _doneTimer:
   652                           	opt stack 0
   653  00004D                     	ds	1
   654  00004E                     _min:
   655                           	opt stack 0
   656  00004E                     	ds	1
   657  00004F                     _num9V:
   658                           	opt stack 0
   659  00004F                     	ds	1
   660  000050                     _numAA:
   661                           	opt stack 0
   662  000050                     	ds	1
   663  000051                     _numBats:
   664                           	opt stack 0
   665  000051                     	ds	1
   666  000052                     _numC:
   667                           	opt stack 0
   668  000052                     	ds	1
   669  000053                     _numDrain:
   670                           	opt stack 0
   671  000053                     	ds	1
   672  000054                     _opTimer:
   673                           	opt stack 0
   674  000054                     	ds	1
   675  000055                     _plat1Left:
   676                           	opt stack 0
   677  000055                     	ds	1
   678  000056                     _plat1Right:
   679                           	opt stack 0
   680  000056                     	ds	1
   681  000057                     _plat2Left:
   682                           	opt stack 0
   683  000057                     	ds	1
   684  000058                     _plat2Right:
   685                           	opt stack 0
   686  000058                     	ds	1
   687  000059                     _sec:
   688                           	opt stack 0
   689  000059                     	ds	1
   690  00005A                     _solOnTimer:
   691                           	opt stack 0
   692  00005A                     	ds	1
   693  00005B                     _step1:
   694                           	opt stack 0
   695  00005B                     	ds	1
   696  00005C                     _step2:
   697                           	opt stack 0
   698  00005C                     	ds	1
   699  00005D                     _stepGear:
   700                           	opt stack 0
   701  00005D                     	ds	1
   702  00005E                     _turn1BackLeft:
   703                           	opt stack 0
   704  00005E                     	ds	1
   705  00005F                     _turn1BackRight:
   706                           	opt stack 0
   707  00005F                     	ds	1
   708  000060                     _turn2BackLeft:
   709                           	opt stack 0
   710  000060                     	ds	1
   711  000061                     _turn2BackRight:
   712                           	opt stack 0
   713  000061                     	ds	1
   714                           tblptru	equ	0xFF8
   715                           tblptrh	equ	0xFF7
   716                           tblptrl	equ	0xFF6
   717                           tablat	equ	0xFF5
   718                           postinc0	equ	0xFEE
   719                           wreg	equ	0xFE8
   720                           
   721                           	psect	dataCOMRAM
   722  000062                     __pdataCOMRAM:
   723                           	opt stack 0
   724  000062                     _screenMode:
   725                           	opt stack 0
   726  000062                     	ds	1
   727                           tblptru	equ	0xFF8
   728                           tblptrh	equ	0xFF7
   729                           tblptrl	equ	0xFF6
   730                           tablat	equ	0xFF5
   731                           postinc0	equ	0xFEE
   732                           wreg	equ	0xFE8
   733                           
   734                           	psect	cstackCOMRAM
   735  000001                     __pcstackCOMRAM:
   736                           	opt stack 0
   737  000001                     ?i2___awdiv:
   738                           	opt stack 0
   739  000001                     ?i2___awmod:
   740                           	opt stack 0
   741  000001                     switchMenu@right:
   742                           	opt stack 0
   743  000001                     i2___awdiv@dividend:
   744                           	opt stack 0
   745  000001                     i2___awmod@dividend:
   746                           	opt stack 0
   747                           
   748                           ; 2 bytes @ 0x0
   749  000001                     	ds	1
   750  000002                     switchMenu@key:
   751                           	opt stack 0
   752                           
   753                           ; 1 bytes @ 0x1
   754  000002                     	ds	1
   755  000003                     switchMenu@left:
   756                           	opt stack 0
   757  000003                     i2___awdiv@divisor:
   758                           	opt stack 0
   759  000003                     i2___awmod@divisor:
   760                           	opt stack 0
   761                           
   762                           ; 2 bytes @ 0x2
   763  000003                     	ds	2
   764  000005                     i2___awdiv@counter:
   765                           	opt stack 0
   766  000005                     i2___awmod@counter:
   767                           	opt stack 0
   768                           
   769                           ; 1 bytes @ 0x4
   770  000005                     	ds	1
   771  000006                     i2___awdiv@sign:
   772                           	opt stack 0
   773  000006                     i2___awmod@sign:
   774                           	opt stack 0
   775                           
   776                           ; 1 bytes @ 0x5
   777  000006                     	ds	1
   778  000007                     i2___awdiv@quotient:
   779                           	opt stack 0
   780                           
   781                           ; 2 bytes @ 0x6
   782  000007                     	ds	2
   783  000009                     ??_ISR:
   784  000009                     
   785                           ; 1 bytes @ 0x8
   786  000009                     	ds	15
   787  000018                     ISR@keypress:
   788                           	opt stack 0
   789                           
   790                           ; 1 bytes @ 0x17
   791  000018                     	ds	1
   792  000019                     ??_isdigit:
   793  000019                     ??_I2C_Master_Wait:
   794  000019                     ?_abs:
   795                           	opt stack 0
   796  000019                     ?___wmul:
   797                           	opt stack 0
   798  000019                     ?___awdiv:
   799                           	opt stack 0
   800  000019                     ?___awmod:
   801                           	opt stack 0
   802  000019                     ?___lwdiv:
   803                           	opt stack 0
   804  000019                     ?___lldiv:
   805                           	opt stack 0
   806  000019                     lcdNibble@temp:
   807                           	opt stack 0
   808  000019                     readADC@channel:
   809                           	opt stack 0
   810  000019                     abs@x:
   811                           	opt stack 0
   812  000019                     ___wmul@multiplier:
   813                           	opt stack 0
   814  000019                     ___awdiv@dividend:
   815                           	opt stack 0
   816  000019                     ___awmod@dividend:
   817                           	opt stack 0
   818  000019                     ___lwdiv@dividend:
   819                           	opt stack 0
   820  000019                     ___lldiv@dividend:
   821                           	opt stack 0
   822                           
   823                           ; 4 bytes @ 0x18
   824  000019                     	ds	1
   825  00001A                     I2C_Master_Read@a:
   826                           	opt stack 0
   827  00001A                     lcdNibble@data:
   828                           	opt stack 0
   829  00001A                     _isdigit$930:
   830                           	opt stack 0
   831  00001A                     I2C_Master_Write@d:
   832                           	opt stack 0
   833                           
   834                           ; 2 bytes @ 0x19
   835  00001A                     	ds	1
   836  00001B                     ??_abs:
   837  00001B                     I2C_Master_Read@temp:
   838                           	opt stack 0
   839  00001B                     lcdInst@data:
   840                           	opt stack 0
   841  00001B                     putch@data:
   842                           	opt stack 0
   843  00001B                     isdigit@c:
   844                           	opt stack 0
   845  00001B                     ___wmul@multiplicand:
   846                           	opt stack 0
   847  00001B                     ___awdiv@divisor:
   848                           	opt stack 0
   849  00001B                     ___awmod@divisor:
   850                           	opt stack 0
   851  00001B                     ___lwdiv@divisor:
   852                           	opt stack 0
   853                           
   854                           ; 2 bytes @ 0x1A
   855  00001B                     	ds	1
   856  00001C                     ??_initLCD:
   857                           
   858                           ; 1 bytes @ 0x1B
   859  00001C                     	ds	1
   860  00001D                     ?_isFluctuate:
   861                           	opt stack 0
   862  00001D                     ___awdiv@counter:
   863                           	opt stack 0
   864  00001D                     ___awmod@counter:
   865                           	opt stack 0
   866  00001D                     ___wmul@product:
   867                           	opt stack 0
   868  00001D                     ___lwdiv@quotient:
   869                           	opt stack 0
   870  00001D                     ___lldiv@divisor:
   871                           	opt stack 0
   872                           
   873                           ; 4 bytes @ 0x1C
   874  00001D                     	ds	1
   875  00001E                     ___awdiv@sign:
   876                           	opt stack 0
   877  00001E                     ___awmod@sign:
   878                           	opt stack 0
   879                           
   880                           ; 1 bytes @ 0x1D
   881  00001E                     	ds	1
   882  00001F                     ??_isFluctuate:
   883  00001F                     ___lwdiv@counter:
   884                           	opt stack 0
   885  00001F                     ___awdiv@quotient:
   886                           	opt stack 0
   887                           
   888                           ; 2 bytes @ 0x1E
   889  00001F                     	ds	1
   890  000020                     ?___lwmod:
   891                           	opt stack 0
   892  000020                     ___lwmod@dividend:
   893                           	opt stack 0
   894                           
   895                           ; 2 bytes @ 0x1F
   896  000020                     	ds	1
   897  000021                     ___lldiv@quotient:
   898                           	opt stack 0
   899                           
   900                           ; 4 bytes @ 0x20
   901  000021                     	ds	1
   902  000022                     ___lwmod@divisor:
   903                           	opt stack 0
   904                           
   905                           ; 2 bytes @ 0x21
   906  000022                     	ds	1
   907  000023                     isFluctuate@tempVoltage:
   908                           	opt stack 0
   909                           
   910                           ; 2 bytes @ 0x22
   911  000023                     	ds	1
   912  000024                     ___lwmod@counter:
   913                           	opt stack 0
   914                           
   915                           ; 1 bytes @ 0x23
   916  000024                     	ds	1
   917  000025                     ?_printf:
   918                           	opt stack 0
   919  000025                     isFluctuate@channel:
   920                           	opt stack 0
   921  000025                     ___lldiv@counter:
   922                           	opt stack 0
   923  000025                     printf@f:
   924                           	opt stack 0
   925                           
   926                           ; 2 bytes @ 0x24
   927  000025                     	ds	1
   928  000026                     isFluctuate@i:
   929                           	opt stack 0
   930  000026                     I2C_Master_Init@c:
   931                           	opt stack 0
   932                           
   933                           ; 4 bytes @ 0x25
   934  000026                     	ds	1
   935  000027                     ??_testBatteries:
   936                           
   937                           ; 1 bytes @ 0x26
   938  000027                     	ds	3
   939  00002A                     ??_I2C_Master_Init:
   940                           
   941                           ; 1 bytes @ 0x29
   942  00002A                     	ds	3
   943  00002D                     ??_printf:
   944                           
   945                           ; 1 bytes @ 0x2C
   946  00002D                     	ds	4
   947  000031                     printf@idx:
   948                           	opt stack 0
   949                           
   950                           ; 1 bytes @ 0x30
   951  000031                     	ds	1
   952  000032                     printf@ap:
   953                           	opt stack 0
   954                           
   955                           ; 2 bytes @ 0x31
   956  000032                     	ds	2
   957  000034                     printf@prec:
   958                           	opt stack 0
   959                           
   960                           ; 1 bytes @ 0x33
   961  000034                     	ds	1
   962  000035                     printf@val:
   963                           	opt stack 0
   964                           
   965                           ; 2 bytes @ 0x34
   966  000035                     	ds	2
   967  000037                     printf@flag:
   968                           	opt stack 0
   969                           
   970                           ; 1 bytes @ 0x36
   971  000037                     	ds	1
   972  000038                     printf@width:
   973                           	opt stack 0
   974                           
   975                           ; 2 bytes @ 0x37
   976  000038                     	ds	2
   977  00003A                     printf@c:
   978                           	opt stack 0
   979                           
   980                           ; 1 bytes @ 0x39
   981  00003A                     	ds	1
   982  00003B                     ??_main:
   983                           
   984                           ; 1 bytes @ 0x3A
   985  00003B                     	ds	2
   986  00003D                     main@i:
   987                           	opt stack 0
   988                           
   989                           ; 1 bytes @ 0x3C
   990  00003D                     	ds	1
   991  00003E                     main@i_578:
   992                           	opt stack 0
   993                           
   994                           ; 1 bytes @ 0x3D
   995  00003E                     	ds	1
   996  00003F                     main@i_629:
   997                           	opt stack 0
   998                           
   999                           ; 1 bytes @ 0x3E
  1000  00003F                     	ds	1
  1001                           tblptru	equ	0xFF8
  1002                           tblptrh	equ	0xFF7
  1003                           tblptrl	equ	0xFF6
  1004                           tablat	equ	0xFF5
  1005                           postinc0	equ	0xFEE
  1006                           wreg	equ	0xFE8
  1007                           
  1008 ;;
  1009 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1010 ;;
  1011 ;; *************** function _main *****************
  1012 ;; Defined at:
  1013 ;;		line 47 in file "../main.c"
  1014 ;; Parameters:    Size  Location     Type
  1015 ;;		None
  1016 ;; Auto vars:     Size  Location     Type
  1017 ;;  i               1   62[COMRAM] unsigned char 
  1018 ;;  i               1   61[COMRAM] unsigned char 
  1019 ;;  i               1   60[COMRAM] unsigned char 
  1020 ;; Return value:  Size  Location     Type
  1021 ;;                  1    wreg      void 
  1022 ;; Registers used:
  1023 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1024 ;; Tracked objects:
  1025 ;;		On entry : 0/0
  1026 ;;		On exit  : 0/0
  1027 ;;		Unchanged: 0/0
  1028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1029 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1030 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1031 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1032 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1033 ;;Total ram usage:        5 bytes
  1034 ;; Hardware stack levels required when called:    6
  1035 ;; This function calls:
  1036 ;;		_I2C_Master_Init
  1037 ;;		_I2C_Master_Read
  1038 ;;		_I2C_Master_Start
  1039 ;;		_I2C_Master_Stop
  1040 ;;		_I2C_Master_Write
  1041 ;;		_initLCD
  1042 ;;		_isFluctuate
  1043 ;;		_lcdInst
  1044 ;;		_printf
  1045 ;;		_stopOperation
  1046 ;;		_testBatteries
  1047 ;; This function is called by:
  1048 ;;		Startup code after reset
  1049 ;; This function uses a non-reentrant model
  1050 ;;
  1051                           
  1052                           	psect	text0
  1053  000012                     __ptext0:
  1054                           	opt stack 0
  1055  000012                     _main:
  1056                           	opt stack 25
  1057                           
  1058                           ;main.c: 49: TRISA = 0b00000011;
  1059                           
  1060                           ;incstack = 0
  1061  000012  0E03               	movlw	3
  1062  000014  6E92               	movwf	3986,c	;volatile
  1063                           
  1064                           ;main.c: 50: TRISB = 0b11110010;
  1065  000016  0EF2               	movlw	242
  1066  000018  6E93               	movwf	3987,c	;volatile
  1067                           
  1068                           ;main.c: 51: TRISC = 0x00;
  1069  00001A  0E00               	movlw	0
  1070  00001C  6E94               	movwf	3988,c	;volatile
  1071                           
  1072                           ;main.c: 52: TRISD = 0x00;
  1073  00001E  0E00               	movlw	0
  1074  000020  6E95               	movwf	3989,c	;volatile
  1075                           
  1076                           ;main.c: 53: TRISE = 0x00;
  1077  000022  0E00               	movlw	0
  1078  000024  6E96               	movwf	3990,c	;volatile
  1079                           
  1080                           ;main.c: 55: LATA = 0x00;
  1081  000026  0E00               	movlw	0
  1082  000028  6E89               	movwf	3977,c	;volatile
  1083                           
  1084                           ;main.c: 56: LATB = 0x00;
  1085  00002A  0E00               	movlw	0
  1086  00002C  6E8A               	movwf	3978,c	;volatile
  1087                           
  1088                           ;main.c: 57: LATC = 0x00;
  1089  00002E  0E00               	movlw	0
  1090  000030  6E8B               	movwf	3979,c	;volatile
  1091                           
  1092                           ;main.c: 58: LATD = 0x00;
  1093  000032  0E00               	movlw	0
  1094  000034  6E8C               	movwf	3980,c	;volatile
  1095                           
  1096                           ;main.c: 59: LATE = 0x00;
  1097  000036  0E00               	movlw	0
  1098  000038  6E8D               	movwf	3981,c	;volatile
  1099                           
  1100                           ;main.c: 61: ADCON0 = 0x00;
  1101  00003A  0E00               	movlw	0
  1102  00003C  6EC2               	movwf	4034,c	;volatile
  1103                           
  1104                           ;main.c: 62: ADCON1 = 0x0E;
  1105  00003E  0E0E               	movlw	14
  1106  000040  6EC1               	movwf	4033,c	;volatile
  1107                           
  1108                           ;main.c: 63: ADCON2 = 0b10110001;
  1109  000042  0EB1               	movlw	177
  1110  000044  6EC0               	movwf	4032,c	;volatile
  1111                           
  1112                           ;main.c: 68: GIE = 1;
  1113  000046  8EF2               	bsf	intcon,7,c	;volatile
  1114                           
  1115                           ;main.c: 69: PEIE = 1;
  1116  000048  8CF2               	bsf	intcon,6,c	;volatile
  1117                           
  1118                           ;main.c: 70: INT1IE = 1;
  1119  00004A  86F0               	bsf	intcon3,3,c	;volatile
  1120                           
  1121                           ;main.c: 71: INT1IF = 0;
  1122  00004C  90F0               	bcf	intcon3,0,c	;volatile
  1123                           
  1124                           ;main.c: 73: TMR0IE = 1;
  1125  00004E  8AF2               	bsf	intcon,5,c	;volatile
  1126                           
  1127                           ;main.c: 74: TMR0IF = 0;
  1128  000050  94F2               	bcf	intcon,2,c	;volatile
  1129                           
  1130                           ;main.c: 75: TMR1IE = 1;
  1131  000052  809D               	bsf	3997,0,c	;volatile
  1132                           
  1133                           ;main.c: 76: TMR1IF = 0;
  1134  000054  909E               	bcf	3998,0,c	;volatile
  1135                           
  1136                           ;main.c: 80: T0CON = 0b00000111;
  1137  000056  0E07               	movlw	7
  1138  000058  6ED5               	movwf	4053,c	;volatile
  1139                           
  1140                           ;main.c: 88: TMR0 = 55770;
  1141  00005A  0ED9               	movlw	217
  1142  00005C  6ED7               	movwf	4055,c	;volatile
  1143  00005E  0EDA               	movlw	218
  1144  000060  6ED6               	movwf	4054,c	;volatile
  1145                           
  1146                           ;main.c: 97: T1CON = 0b10000000;
  1147  000062  0E80               	movlw	128
  1148  000064  6ECD               	movwf	4045,c	;volatile
  1149                           
  1150                           ;main.c: 106: TMR1 = 48035;
  1151  000066  0EBB               	movlw	187
  1152  000068  6ECF               	movwf	4047,c	;volatile
  1153  00006A  0EA3               	movlw	163
  1154  00006C  6ECE               	movwf	4046,c	;volatile
  1155                           
  1156                           ;main.c: 115: initLCD();
  1157  00006E  ECF5  F008         	call	_initLCD	;wreg free
  1158                           
  1159                           ;main.c: 117: I2C_Master_Init(10000);
  1160  000072  0E10               	movlw	16
  1161  000074  6E26               	movwf	I2C_Master_Init@c,c
  1162  000076  0E27               	movlw	39
  1163  000078  6E27               	movwf	I2C_Master_Init@c+1,c
  1164  00007A  0E00               	movlw	0
  1165  00007C  6E28               	movwf	I2C_Master_Init@c+2,c
  1166  00007E  0E00               	movlw	0
  1167  000080  6E29               	movwf	I2C_Master_Init@c+3,c
  1168  000082  EC78  F008         	call	_I2C_Master_Init	;wreg free
  1169                           
  1170                           ;main.c: 118: (INTCONbits.GIE = 1);
  1171  000086  8EF2               	bsf	intcon,7,c	;volatile
  1172                           
  1173                           ;main.c: 121: while (screenMode == 2){
  1174                           
  1175                           ;main.c: 120: while (1) {
  1176  000088  D048               	goto	l2935
  1177  00008A                     l234:
  1178                           
  1179                           ;main.c: 122: (INTCONbits.GIE = 0);
  1180  00008A  9EF2               	bcf	intcon,7,c	;volatile
  1181                           
  1182                           ;main.c: 123: lcdInst(0b10000000);;
  1183  00008C  0E80               	movlw	128
  1184  00008E  ECCC  F009         	call	_lcdInst
  1185                           
  1186                           ;main.c: 124: printf("START:   PRESS *");
  1187  000092  0EDC               	movlw	low STR_1
  1188  000094  6E25               	movwf	printf@f,c
  1189  000096  0EFF               	movlw	high STR_1
  1190  000098  6E26               	movwf	printf@f+1,c
  1191  00009A  EC86  F002         	call	_printf	;wreg free
  1192                           
  1193                           ;main.c: 125: lcdInst(0b11000000);;
  1194  00009E  0EC0               	movlw	192
  1195  0000A0  ECCC  F009         	call	_lcdInst
  1196                           
  1197                           ;main.c: 126: printf("< 4   DATA   6 >");
  1198  0000A4  0EED               	movlw	low STR_2
  1199  0000A6  6E25               	movwf	printf@f,c
  1200  0000A8  0EFF               	movlw	high STR_2
  1201  0000AA  6E26               	movwf	printf@f+1,c
  1202  0000AC  EC86  F002         	call	_printf	;wreg free
  1203                           
  1204                           ;main.c: 127: (INTCONbits.GIE = 1);
  1205  0000B0  8EF2               	bsf	intcon,7,c	;volatile
  1206                           
  1207                           ;main.c: 128: for(unsigned char i=0;i<50;i++){
  1208  0000B2  0E00               	movlw	0
  1209  0000B4  6E3D               	movwf	main@i,c
  1210  0000B6                     l2905:
  1211  0000B6  0E31               	movlw	49
  1212  0000B8  643D               	cpfsgt	main@i,c
  1213  0000BA  D001               	goto	l2909
  1214  0000BC  D00E               	goto	l2917
  1215  0000BE                     l2909:
  1216                           
  1217                           ;main.c: 129: if (screenMode != 2)
  1218  0000BE  0E02               	movlw	2
  1219  0000C0  1862               	xorwf	_screenMode,w,c
  1220  0000C2  A4D8               	btfss	status,2,c
  1221  0000C4  D00A               	goto	l2917
  1222                           
  1223                           ;main.c: 131: _delay((unsigned long)((10)*(10000000/4000.0)));
  1224                           
  1225                           ;main.c: 130: break;
  1226  0000C6  0E21               	movlw	33
  1227  0000C8  6E3B               	movwf	??_main& (0+255),c
  1228  0000CA  0E76               	movlw	118
  1229  0000CC                     u3247:
  1230  0000CC  2EE8               	decfsz	wreg,f,c
  1231  0000CE  D7FE               	bra	u3247
  1232  0000D0  2E3B               	decfsz	??_main& (0+255),f,c
  1233  0000D2  D7FC               	bra	u3247
  1234  0000D4  D000               	nop2	
  1235  0000D6  2A3D               	incf	main@i,f,c
  1236  0000D8  D7EE               	goto	l2905
  1237  0000DA                     l2917:
  1238                           
  1239                           ;main.c: 132: }
  1240                           ;main.c: 133: lcdInst(0b10000000);;
  1241  0000DA  0E80               	movlw	128
  1242  0000DC  ECCC  F009         	call	_lcdInst
  1243                           
  1244                           ;main.c: 134: lcdInst(0b11000000);;
  1245  0000E0  0EC0               	movlw	192
  1246  0000E2  ECCC  F009         	call	_lcdInst
  1247                           
  1248                           ;main.c: 135: printf(" <4   DATA   6> ");
  1249  0000E6  0ECB               	movlw	low STR_3
  1250  0000E8  6E25               	movwf	printf@f,c
  1251  0000EA  0EFF               	movlw	high STR_3
  1252  0000EC  6E26               	movwf	printf@f+1,c
  1253  0000EE  EC86  F002         	call	_printf	;wreg free
  1254                           
  1255                           ;main.c: 136: for(unsigned char i=0;i<50;i++){
  1256  0000F2  0E00               	movlw	0
  1257  0000F4  6E3E               	movwf	main@i_578,c
  1258  0000F6                     l2923:
  1259  0000F6  0E31               	movlw	49
  1260  0000F8  643E               	cpfsgt	main@i_578,c
  1261  0000FA  D001               	goto	l2927
  1262  0000FC  D00E               	goto	l2935
  1263  0000FE                     l2927:
  1264                           
  1265                           ;main.c: 137: if (screenMode != 2)
  1266  0000FE  0E02               	movlw	2
  1267  000100  1862               	xorwf	_screenMode,w,c
  1268  000102  A4D8               	btfss	status,2,c
  1269  000104  D00A               	goto	l2935
  1270                           
  1271                           ;main.c: 139: _delay((unsigned long)((10)*(10000000/4000.0)));
  1272                           
  1273                           ;main.c: 138: break;
  1274  000106  0E21               	movlw	33
  1275  000108  6E3B               	movwf	??_main& (0+255),c
  1276  00010A  0E76               	movlw	118
  1277  00010C                     u3257:
  1278  00010C  2EE8               	decfsz	wreg,f,c
  1279  00010E  D7FE               	bra	u3257
  1280  000110  2E3B               	decfsz	??_main& (0+255),f,c
  1281  000112  D7FC               	bra	u3257
  1282  000114  D000               	nop2	
  1283  000116  2A3E               	incf	main@i_578,f,c
  1284  000118  D7EE               	goto	l2923
  1285  00011A                     l2935:
  1286  00011A  0E02               	movlw	2
  1287  00011C  1862               	xorwf	_screenMode,w,c
  1288  00011E  A4D8               	btfss	status,2,c
  1289  000120  D0AE               	goto	l3003
  1290  000122  D7B3               	goto	l234
  1291  000124                     l2937:
  1292                           
  1293                           ;main.c: 143: lcdInst(0b10000000);;
  1294  000124  0E80               	movlw	128
  1295  000126  ECCC  F009         	call	_lcdInst
  1296                           
  1297                           ;main.c: 144: printf("RUNNING...      ");
  1298  00012A  0E54               	movlw	low STR_4
  1299  00012C  6E25               	movwf	printf@f,c
  1300  00012E  0EFF               	movlw	high STR_4
  1301  000130  6E26               	movwf	printf@f+1,c
  1302  000132  EC86  F002         	call	_printf	;wreg free
  1303                           
  1304                           ;main.c: 145: lcdInst(0b11000000);;
  1305  000136  0EC0               	movlw	192
  1306  000138  ECCC  F009         	call	_lcdInst
  1307                           
  1308                           ;main.c: 146: printf("%2d              ", countDrain);
  1309  00013C  0EED               	movlw	low STR_5
  1310  00013E  6E25               	movwf	printf@f,c
  1311  000140  0EFE               	movlw	high STR_5
  1312  000142  6E26               	movwf	printf@f+1,c
  1313  000144  C04C  F027         	movff	_countDrain,?_printf+2
  1314  000148  6A28               	clrf	?_printf+3,c
  1315  00014A  EC86  F002         	call	_printf	;wreg free
  1316                           
  1317                           ;main.c: 152: if (!isFluctuate(0)){
  1318  00014E  0E00               	movlw	0
  1319  000150  ECF8  F006         	call	_isFluctuate
  1320  000154  501D               	movf	?_isFluctuate,w,c
  1321  000156  101E               	iorwf	?_isFluctuate+1,w,c
  1322  000158  A4D8               	btfss	status,2,c
  1323  00015A  D091               	goto	l3003
  1324                           
  1325                           ;main.c: 153: if (((ADRESH<<8)+ADRESL)<200){
  1326  00015C  50C3               	movf	4035,w,c	;volatile
  1327  00015E  CFC4 F03B          	movff	4036,??_main	;volatile
  1328  000162  6A3C               	clrf	(??_main+1)& (0+255),c
  1329  000164  C03B  F03C         	movff	??_main,??_main+1
  1330  000168  6A3B               	clrf	??_main,c
  1331  00016A  263B               	addwf	??_main,f,c
  1332  00016C  0E00               	movlw	0
  1333  00016E  223C               	addwfc	??_main+1,f,c
  1334  000170  BE3C               	btfsc	??_main+1,7,c
  1335  000172  D006               	goto	l2947
  1336  000174  503C               	movf	??_main+1,w,c
  1337  000176  E103               	bnz	u2501
  1338  000178  0EC8               	movlw	200
  1339  00017A  5C3B               	subwf	??_main,w,c
  1340  00017C  B0D8               	btfsc	status,0,c
  1341  00017E                     u2501:
  1342  00017E  D07F               	goto	l3003
  1343  000180                     l2947:
  1344                           
  1345                           ;main.c: 154: LATAbits.LA7 = 1;;
  1346  000180  8E89               	bsf	3977,7,c	;volatile
  1347                           
  1348                           ;main.c: 155: testBatteries();
  1349  000182  EC86  F005         	call	_testBatteries	;wreg free
  1350                           
  1351                           ;main.c: 156: LATAbits.LA7 = 0;;
  1352  000186  9E89               	bcf	3977,7,c	;volatile
  1353                           
  1354                           ;main.c: 157: if (stepGear){
  1355  000188  505D               	movf	_stepGear,w,c
  1356  00018A  B4D8               	btfsc	status,2,c
  1357  00018C  D002               	goto	l2957
  1358                           
  1359                           ;main.c: 158: LATCbits.LC1= 1;;
  1360  00018E  828B               	bsf	3979,1,c	;volatile
  1361                           
  1362                           ;main.c: 159: T1CONbits.TMR1ON = 1;
  1363  000190  80CD               	bsf	4045,0,c	;volatile
  1364  000192                     l2957:
  1365                           
  1366                           ;main.c: 160: }
  1367                           ;main.c: 161: if (plat1Left){
  1368  000192  5055               	movf	_plat1Left,w,c
  1369  000194  B4D8               	btfsc	status,2,c
  1370  000196  D007               	goto	l247
  1371                           
  1372                           ;main.c: 162: LATAbits.LA2 = 1;;
  1373  000198  8489               	bsf	3977,2,c	;volatile
  1374                           
  1375                           ;main.c: 163: LATAbits.LA3 = 0;;
  1376  00019A  9689               	bcf	3977,3,c	;volatile
  1377                           
  1378                           ;main.c: 164: step1 = 1;
  1379  00019C  0E01               	movlw	1
  1380  00019E  6E5B               	movwf	_step1,c
  1381                           
  1382                           ;main.c: 165: turn1BackRight = 1;
  1383  0001A0  0E01               	movlw	1
  1384  0001A2  6E5F               	movwf	_turn1BackRight,c
  1385                           
  1386                           ;main.c: 166: T1CONbits.TMR1ON = 1;
  1387  0001A4  80CD               	bsf	4045,0,c	;volatile
  1388  0001A6                     l247:
  1389                           
  1390                           ;main.c: 167: }
  1391                           ;main.c: 168: if (plat1Right){
  1392  0001A6  5056               	movf	_plat1Right,w,c
  1393  0001A8  B4D8               	btfsc	status,2,c
  1394  0001AA  D007               	goto	l248
  1395                           
  1396                           ;main.c: 169: LATAbits.LA2 = 1;;
  1397  0001AC  8489               	bsf	3977,2,c	;volatile
  1398                           
  1399                           ;main.c: 170: LATAbits.LA3 = 0;;
  1400  0001AE  9689               	bcf	3977,3,c	;volatile
  1401                           
  1402                           ;main.c: 171: step1 = 4;
  1403  0001B0  0E04               	movlw	4
  1404  0001B2  6E5B               	movwf	_step1,c
  1405                           
  1406                           ;main.c: 172: turn1BackLeft = 1;
  1407  0001B4  0E01               	movlw	1
  1408  0001B6  6E5E               	movwf	_turn1BackLeft,c
  1409                           
  1410                           ;main.c: 173: T1CONbits.TMR1ON = 1;
  1411  0001B8  80CD               	bsf	4045,0,c	;volatile
  1412  0001BA                     l248:
  1413                           
  1414                           ;main.c: 174: }
  1415                           ;main.c: 175: if (plat2Left){
  1416  0001BA  5057               	movf	_plat2Left,w,c
  1417  0001BC  B4D8               	btfsc	status,2,c
  1418  0001BE  D007               	goto	l249
  1419                           
  1420                           ;main.c: 176: LATBbits.LB0 = 1;;
  1421  0001C0  808A               	bsf	3978,0,c	;volatile
  1422                           
  1423                           ;main.c: 177: LATBbits.LB2 = 0;;
  1424  0001C2  948A               	bcf	3978,2,c	;volatile
  1425                           
  1426                           ;main.c: 178: step2 = 1;
  1427  0001C4  0E01               	movlw	1
  1428  0001C6  6E5C               	movwf	_step2,c
  1429                           
  1430                           ;main.c: 179: turn2BackRight = 1;
  1431  0001C8  0E01               	movlw	1
  1432  0001CA  6E61               	movwf	_turn2BackRight,c
  1433                           
  1434                           ;main.c: 180: T1CONbits.TMR1ON = 1;
  1435  0001CC  80CD               	bsf	4045,0,c	;volatile
  1436  0001CE                     l249:
  1437                           
  1438                           ;main.c: 181: }
  1439                           ;main.c: 182: if (plat2Right){
  1440  0001CE  5058               	movf	_plat2Right,w,c
  1441  0001D0  B4D8               	btfsc	status,2,c
  1442  0001D2  D007               	goto	l2983
  1443                           
  1444                           ;main.c: 183: LATBbits.LB0 = 1;;
  1445  0001D4  808A               	bsf	3978,0,c	;volatile
  1446                           
  1447                           ;main.c: 184: LATBbits.LB2 = 0;;
  1448  0001D6  948A               	bcf	3978,2,c	;volatile
  1449                           
  1450                           ;main.c: 185: step2 = 4;
  1451  0001D8  0E04               	movlw	4
  1452  0001DA  6E5C               	movwf	_step2,c
  1453                           
  1454                           ;main.c: 186: turn2BackLeft = 1;
  1455  0001DC  0E01               	movlw	1
  1456  0001DE  6E60               	movwf	_turn2BackLeft,c
  1457                           
  1458                           ;main.c: 187: T1CONbits.TMR1ON = 1;
  1459  0001E0  80CD               	bsf	4045,0,c	;volatile
  1460  0001E2                     l2983:
  1461  0001E2  505D               	movf	_stepGear,w,c
  1462  0001E4  1055               	iorwf	_plat1Left,w,c
  1463  0001E6  1057               	iorwf	_plat2Left,w,c
  1464  0001E8  1056               	iorwf	_plat1Right,w,c
  1465  0001EA  1058               	iorwf	_plat2Right,w,c
  1466  0001EC  0900               	iorlw	0
  1467  0001EE  B4D8               	btfsc	status,2,c
  1468  0001F0  D003               	goto	l2987
  1469  0001F2  0462               	decf	_screenMode,w,c
  1470  0001F4  B4D8               	btfsc	status,2,c
  1471  0001F6  D7F5               	goto	l2983
  1472  0001F8                     l2987:
  1473                           
  1474                           ;main.c: 190: waitMotor = 1;
  1475  0001F8  0E00               	movlw	0
  1476  0001FA  6E48               	movwf	_waitMotor+1,c
  1477  0001FC  0E01               	movlw	1
  1478  0001FE  6E47               	movwf	_waitMotor,c
  1479  000200                     l2989:
  1480  000200  5047               	movf	_waitMotor,w,c
  1481  000202  1048               	iorwf	_waitMotor+1,w,c
  1482  000204  B4D8               	btfsc	status,2,c
  1483  000206  D003               	goto	l260
  1484  000208  0462               	decf	_screenMode,w,c
  1485  00020A  B4D8               	btfsc	status,2,c
  1486  00020C  D7F9               	goto	l2989
  1487  00020E                     l260:
  1488                           
  1489                           ;main.c: 194: plat1Left = turn1BackLeft;
  1490  00020E  C05E  F055         	movff	_turn1BackLeft,_plat1Left
  1491                           
  1492                           ;main.c: 195: plat1Right = turn1BackRight;
  1493  000212  C05F  F056         	movff	_turn1BackRight,_plat1Right
  1494                           
  1495                           ;main.c: 196: plat2Left = turn2BackLeft;
  1496  000216  C060  F057         	movff	_turn2BackLeft,_plat2Left
  1497                           
  1498                           ;main.c: 197: plat2Right = turn2BackRight;
  1499  00021A  C061  F058         	movff	_turn2BackRight,_plat2Right
  1500  00021E                     l2993:
  1501  00021E  505D               	movf	_stepGear,w,c
  1502  000220  1055               	iorwf	_plat1Left,w,c
  1503  000222  1057               	iorwf	_plat2Left,w,c
  1504  000224  1056               	iorwf	_plat1Right,w,c
  1505  000226  1058               	iorwf	_plat2Right,w,c
  1506  000228  0900               	iorlw	0
  1507  00022A  B4D8               	btfsc	status,2,c
  1508  00022C  D003               	goto	l265
  1509  00022E  0462               	decf	_screenMode,w,c
  1510  000230  B4D8               	btfsc	status,2,c
  1511  000232  D7F5               	goto	l2993
  1512  000234                     l265:
  1513                           
  1514                           ;main.c: 200: T1CONbits.TMR1ON = 0;
  1515  000234  90CD               	bcf	4045,0,c	;volatile
  1516                           
  1517                           ;main.c: 201: LATCbits.LC2 = 0;;
  1518  000236  948B               	bcf	3979,2,c	;volatile
  1519                           
  1520                           ;main.c: 202: LATAbits.LA2 = 0;;
  1521  000238  9489               	bcf	3977,2,c	;volatile
  1522                           
  1523                           ;main.c: 203: LATAbits.LA3 = 0;;
  1524  00023A  9689               	bcf	3977,3,c	;volatile
  1525                           
  1526                           ;main.c: 204: LATAbits.LA4 = 0;;
  1527  00023C  9889               	bcf	3977,4,c	;volatile
  1528                           
  1529                           ;main.c: 205: LATAbits.LA5 = 0;;
  1530  00023E  9A89               	bcf	3977,5,c	;volatile
  1531                           
  1532                           ;main.c: 206: LATBbits.LB0 = 0;;
  1533  000240  908A               	bcf	3978,0,c	;volatile
  1534                           
  1535                           ;main.c: 207: LATBbits.LB2 = 0;;
  1536  000242  948A               	bcf	3978,2,c	;volatile
  1537                           
  1538                           ;main.c: 208: LATBbits.LB3 = 0;;
  1539  000244  968A               	bcf	3978,3,c	;volatile
  1540                           
  1541                           ;main.c: 209: LATAbits.LA6 = 0;;
  1542  000246  9C89               	bcf	3977,6,c	;volatile
  1543                           
  1544                           ;main.c: 210: if ((countC + countAA + count9V + countDrain) >= 15){
  1545  000248  504A               	movf	_countAA,w,c
  1546  00024A  C04B  F03B         	movff	_countC,??_main
  1547  00024E  6A3C               	clrf	(??_main+1)& (0+255),c
  1548  000250  263B               	addwf	??_main,f,c
  1549  000252  0E00               	movlw	0
  1550  000254  223C               	addwfc	??_main+1,f,c
  1551  000256  5049               	movf	_count9V,w,c
  1552  000258  263B               	addwf	??_main,f,c
  1553  00025A  0E00               	movlw	0
  1554  00025C  223C               	addwfc	??_main+1,f,c
  1555  00025E  504C               	movf	_countDrain,w,c
  1556  000260  263B               	addwf	??_main,f,c
  1557  000262  0E00               	movlw	0
  1558  000264  223C               	addwfc	??_main+1,f,c
  1559  000266  BE3C               	btfsc	??_main+1,7,c
  1560  000268  D00A               	goto	l3003
  1561  00026A  503C               	movf	??_main+1,w,c
  1562  00026C  E104               	bnz	u2620
  1563  00026E  0E0F               	movlw	15
  1564  000270  5C3B               	subwf	??_main,w,c
  1565  000272  A0D8               	btfss	status,0,c
  1566  000274  D004               	goto	l3003
  1567  000276                     u2620:
  1568                           
  1569                           ;main.c: 211: screenMode = 0;
  1570  000276  0E00               	movlw	0
  1571  000278  6E62               	movwf	_screenMode,c
  1572                           
  1573                           ;main.c: 212: stopOperation();
  1574  00027A  EC4C  F006         	call	_stopOperation	;wreg free
  1575  00027E                     l3003:
  1576  00027E  0462               	decf	_screenMode,w,c
  1577  000280  A4D8               	btfss	status,2,c
  1578  000282  D013               	goto	l3011
  1579  000284  D74F               	goto	l2937
  1580  000286                     l3005:
  1581                           
  1582                           ;main.c: 218: lcdInst(0b10000000);;
  1583  000286  0E80               	movlw	128
  1584  000288  ECCC  F009         	call	_lcdInst
  1585                           
  1586                           ;main.c: 219: printf("DONE! PRESS *   ");
  1587  00028C  0E98               	movlw	low STR_6
  1588  00028E  6E25               	movwf	printf@f,c
  1589  000290  0EFF               	movlw	high STR_6
  1590  000292  6E26               	movwf	printf@f+1,c
  1591  000294  EC86  F002         	call	_printf	;wreg free
  1592                           
  1593                           ;main.c: 220: lcdInst(0b11000000);;
  1594  000298  0EC0               	movlw	192
  1595  00029A  ECCC  F009         	call	_lcdInst
  1596                           
  1597                           ;main.c: 221: printf("TO CONTINUE     ");
  1598  00029E  0E76               	movlw	low STR_7
  1599  0002A0  6E25               	movwf	printf@f,c
  1600  0002A2  0EFF               	movlw	high STR_7
  1601  0002A4  6E26               	movwf	printf@f+1,c
  1602  0002A6  EC86  F002         	call	_printf	;wreg free
  1603  0002AA                     l3011:
  1604  0002AA  5062               	movf	_screenMode,w,c
  1605  0002AC  A4D8               	btfss	status,2,c
  1606  0002AE  D01B               	goto	l3021
  1607  0002B0  D7EA               	goto	l3005
  1608  0002B2                     l272:
  1609                           
  1610                           ;main.c: 224: (INTCONbits.GIE = 0);
  1611  0002B2  9EF2               	bcf	intcon,7,c	;volatile
  1612                           
  1613                           ;main.c: 225: lcdInst(0b10000000);;
  1614  0002B4  0E80               	movlw	128
  1615  0002B6  ECCC  F009         	call	_lcdInst
  1616                           
  1617                           ;main.c: 226: printf("TOTAL RUN TIME: ");
  1618  0002BA  0EBA               	movlw	low STR_8
  1619  0002BC  6E25               	movwf	printf@f,c
  1620  0002BE  0EFF               	movlw	high STR_8
  1621  0002C0  6E26               	movwf	printf@f+1,c
  1622  0002C2  EC86  F002         	call	_printf	;wreg free
  1623                           
  1624                           ;main.c: 227: lcdInst(0b11000000);;
  1625  0002C6  0EC0               	movlw	192
  1626  0002C8  ECCC  F009         	call	_lcdInst
  1627                           
  1628                           ;main.c: 228: printf("%02d:%02d               ", min, sec);
  1629  0002CC  0E7E               	movlw	low STR_9
  1630  0002CE  6E25               	movwf	printf@f,c
  1631  0002D0  0EFE               	movlw	high STR_9
  1632  0002D2  6E26               	movwf	printf@f+1,c
  1633  0002D4  C04E  F027         	movff	_min,?_printf+2
  1634  0002D8  6A28               	clrf	?_printf+3,c
  1635  0002DA  C059  F029         	movff	_sec,?_printf+4
  1636  0002DE  6A2A               	clrf	?_printf+5,c
  1637  0002E0  EC86  F002         	call	_printf	;wreg free
  1638                           
  1639                           ;main.c: 229: (INTCONbits.GIE = 1);
  1640  0002E4  8EF2               	bsf	intcon,7,c	;volatile
  1641  0002E6                     l3021:
  1642  0002E6  0E03               	movlw	3
  1643  0002E8  1862               	xorwf	_screenMode,w,c
  1644  0002EA  A4D8               	btfss	status,2,c
  1645  0002EC  D018               	goto	l3031
  1646  0002EE  D7E1               	goto	l272
  1647  0002F0                     l275:
  1648                           
  1649                           ;main.c: 232: (INTCONbits.GIE = 0);
  1650  0002F0  9EF2               	bcf	intcon,7,c	;volatile
  1651                           
  1652                           ;main.c: 233: lcdInst(0b10000000);;
  1653  0002F2  0E80               	movlw	128
  1654  0002F4  ECCC  F009         	call	_lcdInst
  1655                           
  1656                           ;main.c: 234: printf("TOTAL # OF      ");
  1657  0002F8  0E65               	movlw	low STR_10
  1658  0002FA  6E25               	movwf	printf@f,c
  1659  0002FC  0EFF               	movlw	high STR_10
  1660  0002FE  6E26               	movwf	printf@f+1,c
  1661  000300  EC86  F002         	call	_printf	;wreg free
  1662                           
  1663                           ;main.c: 235: lcdInst(0b11000000);;
  1664  000304  0EC0               	movlw	192
  1665  000306  ECCC  F009         	call	_lcdInst
  1666                           
  1667                           ;main.c: 236: printf("BATTERIES: %02d   ", numBats);
  1668  00030A  0EDA               	movlw	low STR_11
  1669  00030C  6E25               	movwf	printf@f,c
  1670  00030E  0EFE               	movlw	high STR_11
  1671  000310  6E26               	movwf	printf@f+1,c
  1672  000312  C051  F027         	movff	_numBats,?_printf+2
  1673  000316  6A28               	clrf	?_printf+3,c
  1674  000318  EC86  F002         	call	_printf	;wreg free
  1675                           
  1676                           ;main.c: 237: (INTCONbits.GIE = 1);
  1677  00031C  8EF2               	bsf	intcon,7,c	;volatile
  1678  00031E                     l3031:
  1679  00031E  0E04               	movlw	4
  1680  000320  1862               	xorwf	_screenMode,w,c
  1681  000322  A4D8               	btfss	status,2,c
  1682  000324  D018               	goto	l3041
  1683  000326  D7E4               	goto	l275
  1684  000328                     l278:
  1685                           
  1686                           ;main.c: 240: (INTCONbits.GIE = 0);
  1687  000328  9EF2               	bcf	intcon,7,c	;volatile
  1688                           
  1689                           ;main.c: 241: lcdInst(0b10000000);;
  1690  00032A  0E80               	movlw	128
  1691  00032C  ECCC  F009         	call	_lcdInst
  1692                           
  1693                           ;main.c: 242: printf("# OF C          ");
  1694  000330  0E21               	movlw	low STR_12
  1695  000332  6E25               	movwf	printf@f,c
  1696  000334  0EFF               	movlw	high STR_12
  1697  000336  6E26               	movwf	printf@f+1,c
  1698  000338  EC86  F002         	call	_printf	;wreg free
  1699                           
  1700                           ;main.c: 243: lcdInst(0b11000000);;
  1701  00033C  0EC0               	movlw	192
  1702  00033E  ECCC  F009         	call	_lcdInst
  1703                           
  1704                           ;main.c: 244: printf("BATTERIES: %02d   ", numC);
  1705  000342  0EDA               	movlw	low STR_11
  1706  000344  6E25               	movwf	printf@f,c
  1707  000346  0EFE               	movlw	high STR_11
  1708  000348  6E26               	movwf	printf@f+1,c
  1709  00034A  C052  F027         	movff	_numC,?_printf+2
  1710  00034E  6A28               	clrf	?_printf+3,c
  1711  000350  EC86  F002         	call	_printf	;wreg free
  1712                           
  1713                           ;main.c: 245: (INTCONbits.GIE = 1);
  1714  000354  8EF2               	bsf	intcon,7,c	;volatile
  1715  000356                     l3041:
  1716  000356  0E05               	movlw	5
  1717  000358  1862               	xorwf	_screenMode,w,c
  1718  00035A  A4D8               	btfss	status,2,c
  1719  00035C  D018               	goto	l3051
  1720  00035E  D7E4               	goto	l278
  1721  000360                     l281:
  1722                           
  1723                           ;main.c: 248: (INTCONbits.GIE = 0);
  1724  000360  9EF2               	bcf	intcon,7,c	;volatile
  1725                           
  1726                           ;main.c: 249: lcdInst(0b10000000);;
  1727  000362  0E80               	movlw	128
  1728  000364  ECCC  F009         	call	_lcdInst
  1729                           
  1730                           ;main.c: 250: printf("# OF 9V         ");
  1731  000368  0E43               	movlw	low STR_14
  1732  00036A  6E25               	movwf	printf@f,c
  1733  00036C  0EFF               	movlw	high STR_14
  1734  00036E  6E26               	movwf	printf@f+1,c
  1735  000370  EC86  F002         	call	_printf	;wreg free
  1736                           
  1737                           ;main.c: 251: lcdInst(0b11000000);;
  1738  000374  0EC0               	movlw	192
  1739  000376  ECCC  F009         	call	_lcdInst
  1740                           
  1741                           ;main.c: 252: printf("BATTERIES: %02d     ", num9V);
  1742  00037A  0EC5               	movlw	low STR_15
  1743  00037C  6E25               	movwf	printf@f,c
  1744  00037E  0EFE               	movlw	high STR_15
  1745  000380  6E26               	movwf	printf@f+1,c
  1746  000382  C04F  F027         	movff	_num9V,?_printf+2
  1747  000386  6A28               	clrf	?_printf+3,c
  1748  000388  EC86  F002         	call	_printf	;wreg free
  1749                           
  1750                           ;main.c: 253: (INTCONbits.GIE = 1);
  1751  00038C  8EF2               	bsf	intcon,7,c	;volatile
  1752  00038E                     l3051:
  1753  00038E  0E06               	movlw	6
  1754  000390  1862               	xorwf	_screenMode,w,c
  1755  000392  A4D8               	btfss	status,2,c
  1756  000394  D018               	goto	l3061
  1757  000396  D7E4               	goto	l281
  1758  000398                     l284:
  1759                           
  1760                           ;main.c: 256: (INTCONbits.GIE = 0);
  1761  000398  9EF2               	bcf	intcon,7,c	;volatile
  1762                           
  1763                           ;main.c: 257: lcdInst(0b10000000);;
  1764  00039A  0E80               	movlw	128
  1765  00039C  ECCC  F009         	call	_lcdInst
  1766                           
  1767                           ;main.c: 258: printf("# OF AA         ");
  1768  0003A0  0E32               	movlw	low STR_16
  1769  0003A2  6E25               	movwf	printf@f,c
  1770  0003A4  0EFF               	movlw	high STR_16
  1771  0003A6  6E26               	movwf	printf@f+1,c
  1772  0003A8  EC86  F002         	call	_printf	;wreg free
  1773                           
  1774                           ;main.c: 259: lcdInst(0b11000000);;
  1775  0003AC  0EC0               	movlw	192
  1776  0003AE  ECCC  F009         	call	_lcdInst
  1777                           
  1778                           ;main.c: 260: printf("BATTERIES: %02d     ", numAA);
  1779  0003B2  0EC5               	movlw	low STR_15
  1780  0003B4  6E25               	movwf	printf@f,c
  1781  0003B6  0EFE               	movlw	high STR_15
  1782  0003B8  6E26               	movwf	printf@f+1,c
  1783  0003BA  C050  F027         	movff	_numAA,?_printf+2
  1784  0003BE  6A28               	clrf	?_printf+3,c
  1785  0003C0  EC86  F002         	call	_printf	;wreg free
  1786                           
  1787                           ;main.c: 261: (INTCONbits.GIE = 1);
  1788  0003C4  8EF2               	bsf	intcon,7,c	;volatile
  1789  0003C6                     l3061:
  1790  0003C6  0E07               	movlw	7
  1791  0003C8  1862               	xorwf	_screenMode,w,c
  1792  0003CA  A4D8               	btfss	status,2,c
  1793  0003CC  D018               	goto	l3071
  1794  0003CE  D7E4               	goto	l284
  1795  0003D0                     l287:
  1796                           
  1797                           ;main.c: 264: (INTCONbits.GIE = 0);
  1798  0003D0  9EF2               	bcf	intcon,7,c	;volatile
  1799                           
  1800                           ;main.c: 265: lcdInst(0b10000000);;
  1801  0003D2  0E80               	movlw	128
  1802  0003D4  ECCC  F009         	call	_lcdInst
  1803                           
  1804                           ;main.c: 266: printf("# OF DRAINED    ");
  1805  0003D8  0E87               	movlw	low STR_18
  1806  0003DA  6E25               	movwf	printf@f,c
  1807  0003DC  0EFF               	movlw	high STR_18
  1808  0003DE  6E26               	movwf	printf@f+1,c
  1809  0003E0  EC86  F002         	call	_printf	;wreg free
  1810                           
  1811                           ;main.c: 267: lcdInst(0b11000000);;
  1812  0003E4  0EC0               	movlw	192
  1813  0003E6  ECCC  F009         	call	_lcdInst
  1814                           
  1815                           ;main.c: 268: printf("BATTERIES: %02d     ", numDrain);
  1816  0003EA  0EC5               	movlw	low STR_15
  1817  0003EC  6E25               	movwf	printf@f,c
  1818  0003EE  0EFE               	movlw	high STR_15
  1819  0003F0  6E26               	movwf	printf@f+1,c
  1820  0003F2  C053  F027         	movff	_numDrain,?_printf+2
  1821  0003F6  6A28               	clrf	?_printf+3,c
  1822  0003F8  EC86  F002         	call	_printf	;wreg free
  1823                           
  1824                           ;main.c: 269: (INTCONbits.GIE = 1);
  1825  0003FC  8EF2               	bsf	intcon,7,c	;volatile
  1826  0003FE                     l3071:
  1827  0003FE  0E08               	movlw	8
  1828  000400  1862               	xorwf	_screenMode,w,c
  1829  000402  A4D8               	btfss	status,2,c
  1830  000404  D057               	goto	l3093
  1831  000406  D7E4               	goto	l287
  1832  000408                     l3073:
  1833                           
  1834                           ;main.c: 273: I2C_Master_Start();
  1835  000408  ECDB  F009         	call	_I2C_Master_Start	;wreg free
  1836                           
  1837                           ;main.c: 274: I2C_Master_Write(0b11010000);
  1838  00040C  0E00               	movlw	0
  1839  00040E  6E1B               	movwf	I2C_Master_Write@d+1,c
  1840  000410  0ED0               	movlw	208
  1841  000412  6E1A               	movwf	I2C_Master_Write@d,c
  1842  000414  ECD2  F009         	call	_I2C_Master_Write	;wreg free
  1843                           
  1844                           ;main.c: 275: I2C_Master_Write(0x00);
  1845  000418  0E00               	movlw	0
  1846  00041A  6E1B               	movwf	I2C_Master_Write@d+1,c
  1847  00041C  0E00               	movlw	0
  1848  00041E  6E1A               	movwf	I2C_Master_Write@d,c
  1849  000420  ECD2  F009         	call	_I2C_Master_Write	;wreg free
  1850                           
  1851                           ;main.c: 276: I2C_Master_Stop();
  1852  000424  ECD7  F009         	call	_I2C_Master_Stop	;wreg free
  1853                           
  1854                           ;main.c: 278: I2C_Master_Start();
  1855  000428  ECDB  F009         	call	_I2C_Master_Start	;wreg free
  1856                           
  1857                           ;main.c: 279: I2C_Master_Write(0b11010001);
  1858  00042C  0E00               	movlw	0
  1859  00042E  6E1B               	movwf	I2C_Master_Write@d+1,c
  1860  000430  0ED1               	movlw	209
  1861  000432  6E1A               	movwf	I2C_Master_Write@d,c
  1862  000434  ECD2  F009         	call	_I2C_Master_Write	;wreg free
  1863                           
  1864                           ;main.c: 280: for(unsigned char i=0;i<0x06;i++){
  1865  000438  0E00               	movlw	0
  1866  00043A  6E3F               	movwf	main@i_629,c
  1867  00043C                     l3077:
  1868  00043C  0E05               	movlw	5
  1869  00043E  643F               	cpfsgt	main@i_629,c
  1870  000440  D001               	goto	l3081
  1871  000442  D00E               	goto	l3087
  1872  000444                     l3081:
  1873                           
  1874                           ;main.c: 281: time[i] = I2C_Master_Read(1);
  1875  000444  503F               	movf	main@i_629,w,c
  1876  000446  0D01               	mullw	1
  1877  000448  0E40               	movlw	low _time
  1878  00044A  24F3               	addwf	prodl,w,c
  1879  00044C  6ED9               	movwf	fsr2l,c
  1880  00044E  0E00               	movlw	high _time
  1881  000450  20F4               	addwfc	prodh,w,c
  1882  000452  6EDA               	movwf	fsr2h,c
  1883  000454  0E01               	movlw	1
  1884  000456  EC91  F009         	call	_I2C_Master_Read
  1885  00045A  6EDF               	movwf	indf2,c
  1886  00045C  2A3F               	incf	main@i_629,f,c
  1887  00045E  D7EE               	goto	l3077
  1888  000460                     l3087:
  1889                           
  1890                           ;main.c: 282: }
  1891                           ;main.c: 283: time[6] = I2C_Master_Read(0);
  1892  000460  0E00               	movlw	0
  1893  000462  EC91  F009         	call	_I2C_Master_Read
  1894  000466  6E46               	movwf	_time+6,c
  1895                           
  1896                           ;main.c: 284: I2C_Master_Stop();
  1897  000468  ECD7  F009         	call	_I2C_Master_Stop	;wreg free
  1898                           
  1899                           ;main.c: 285: lcdInst(0b10000000);;
  1900  00046C  0E80               	movlw	128
  1901  00046E  ECCC  F009         	call	_lcdInst
  1902                           
  1903                           ;main.c: 286: printf("DATE: %02x/%02x/%02x  ", time[6],time[5],time[4]);
  1904  000472  0E97               	movlw	low STR_20
  1905  000474  6E25               	movwf	printf@f,c
  1906  000476  0EFE               	movlw	high STR_20
  1907  000478  6E26               	movwf	printf@f+1,c
  1908  00047A  C046  F027         	movff	_time+6,?_printf+2
  1909  00047E  6A28               	clrf	?_printf+3,c
  1910  000480  C045  F029         	movff	_time+5,?_printf+4
  1911  000484  6A2A               	clrf	?_printf+5,c
  1912  000486  C044  F02B         	movff	_time+4,?_printf+6
  1913  00048A  6A2C               	clrf	?_printf+7,c
  1914  00048C  EC86  F002         	call	_printf	;wreg free
  1915                           
  1916                           ;main.c: 287: lcdInst(0b11000000);;
  1917  000490  0EC0               	movlw	192
  1918  000492  ECCC  F009         	call	_lcdInst
  1919                           
  1920                           ;main.c: 288: printf("TIME: %02x:%02x:%02x  ", time[2],time[1],time[0]);
  1921  000496  0EAE               	movlw	low STR_21
  1922  000498  6E25               	movwf	printf@f,c
  1923  00049A  0EFE               	movlw	high STR_21
  1924  00049C  6E26               	movwf	printf@f+1,c
  1925  00049E  C042  F027         	movff	_time+2,?_printf+2
  1926  0004A2  6A28               	clrf	?_printf+3,c
  1927  0004A4  C041  F029         	movff	_time+1,?_printf+4
  1928  0004A8  6A2A               	clrf	?_printf+5,c
  1929  0004AA  C040  F02B         	movff	_time,?_printf+6
  1930  0004AE  6A2C               	clrf	?_printf+7,c
  1931  0004B0  EC86  F002         	call	_printf	;wreg free
  1932  0004B4                     l3093:
  1933  0004B4  0E09               	movlw	9
  1934  0004B6  1862               	xorwf	_screenMode,w,c
  1935  0004B8  A4D8               	btfss	status,2,c
  1936  0004BA  D023               	goto	l3107
  1937  0004BC  D7A5               	goto	l3073
  1938  0004BE                     l295:
  1939                           
  1940                           ;main.c: 291: (INTCONbits.GIE = 0);
  1941  0004BE  9EF2               	bcf	intcon,7,c	;volatile
  1942                           
  1943                           ;main.c: 292: lcdInst(0b10000000);;
  1944  0004C0  0E80               	movlw	128
  1945  0004C2  ECCC  F009         	call	_lcdInst
  1946                           
  1947                           ;main.c: 293: printf("EMERGENCY STOP  ");
  1948  0004C6  0EA9               	movlw	low STR_22
  1949  0004C8  6E25               	movwf	printf@f,c
  1950  0004CA  0EFF               	movlw	high STR_22
  1951  0004CC  6E26               	movwf	printf@f+1,c
  1952  0004CE  EC86  F002         	call	_printf	;wreg free
  1953                           
  1954                           ;main.c: 294: lcdInst(0b11000000);;
  1955  0004D2  0EC0               	movlw	192
  1956  0004D4  ECCC  F009         	call	_lcdInst
  1957                           
  1958                           ;main.c: 295: printf("                ");
  1959  0004D8  0E10               	movlw	low STR_23
  1960  0004DA  6E25               	movwf	printf@f,c
  1961  0004DC  0EFF               	movlw	high STR_23
  1962  0004DE  6E26               	movwf	printf@f+1,c
  1963  0004E0  EC86  F002         	call	_printf	;wreg free
  1964                           
  1965                           ;main.c: 296: _delay((unsigned long)((2000)*(10000000/4000.0)));
  1966  0004E4  0E1A               	movlw	26
  1967  0004E6  6E3C               	movwf	(??_main+1)& (0+255),c
  1968  0004E8  0E5E               	movlw	94
  1969  0004EA  6E3B               	movwf	??_main& (0+255),c
  1970  0004EC  0E6E               	movlw	110
  1971  0004EE                     u3267:
  1972  0004EE  2EE8               	decfsz	wreg,f,c
  1973  0004F0  D7FE               	bra	u3267
  1974  0004F2  2E3B               	decfsz	??_main& (0+255),f,c
  1975  0004F4  D7FC               	bra	u3267
  1976  0004F6  2E3C               	decfsz	(??_main+1)& (0+255),f,c
  1977  0004F8  D7FA               	bra	u3267
  1978  0004FA  D000               	nop2	
  1979                           
  1980                           ;main.c: 297: screenMode = 2;
  1981  0004FC  0E02               	movlw	2
  1982  0004FE  6E62               	movwf	_screenMode,c
  1983                           
  1984                           ;main.c: 298: (INTCONbits.GIE = 1);
  1985  000500  8EF2               	bsf	intcon,7,c	;volatile
  1986  000502                     l3107:
  1987  000502  0E0A               	movlw	10
  1988  000504  1862               	xorwf	_screenMode,w,c
  1989  000506  A4D8               	btfss	status,2,c
  1990  000508  D608               	goto	l2935
  1991  00050A  D7D9               	goto	l295
  1992  00050C                     __end_of_main:
  1993                           	opt stack 0
  1994                           tblptru	equ	0xFF8
  1995                           tblptrh	equ	0xFF7
  1996                           tblptrl	equ	0xFF6
  1997                           tablat	equ	0xFF5
  1998                           prodh	equ	0xFF4
  1999                           prodl	equ	0xFF3
  2000                           intcon	equ	0xFF2
  2001                           intcon3	equ	0xFF0
  2002                           postinc0	equ	0xFEE
  2003                           wreg	equ	0xFE8
  2004                           indf2	equ	0xFDF
  2005                           fsr2h	equ	0xFDA
  2006                           fsr2l	equ	0xFD9
  2007                           status	equ	0xFD8
  2008                           
  2009 ;; *************** function _testBatteries *****************
  2010 ;; Defined at:
  2011 ;;		line 370 in file "../main.c"
  2012 ;; Parameters:    Size  Location     Type
  2013 ;;		None
  2014 ;; Auto vars:     Size  Location     Type
  2015 ;;		None
  2016 ;; Return value:  Size  Location     Type
  2017 ;;                  1    wreg      void 
  2018 ;; Registers used:
  2019 ;;		wreg, status,2, status,0, cstack
  2020 ;; Tracked objects:
  2021 ;;		On entry : 0/0
  2022 ;;		On exit  : 0/0
  2023 ;;		Unchanged: 0/0
  2024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2025 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2026 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2027 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2028 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2029 ;;Total ram usage:        2 bytes
  2030 ;; Hardware stack levels used:    1
  2031 ;; Hardware stack levels required when called:    5
  2032 ;; This function calls:
  2033 ;;		_isFluctuate
  2034 ;; This function is called by:
  2035 ;;		_main
  2036 ;; This function uses a non-reentrant model
  2037 ;;
  2038                           
  2039                           	psect	text1
  2040  000B0C                     __ptext1:
  2041                           	opt stack 0
  2042  000B0C                     _testBatteries:
  2043                           	opt stack 25
  2044                           
  2045                           ;main.c: 371: stepGear = 1;
  2046                           
  2047                           ;incstack = 0
  2048  000B0C  0E01               	movlw	1
  2049  000B0E  6E5D               	movwf	_stepGear,c
  2050                           
  2051                           ;main.c: 372: LATEbits.LE1 = 1;;
  2052  000B10  828D               	bsf	3981,1,c	;volatile
  2053                           
  2054                           ;main.c: 373: if (!isFluctuate(1)){
  2055  000B12  0E01               	movlw	1
  2056  000B14  ECF8  F006         	call	_isFluctuate
  2057  000B18  501D               	movf	?_isFluctuate,w,c
  2058  000B1A  101E               	iorwf	?_isFluctuate+1,w,c
  2059  000B1C  A4D8               	btfss	status,2,c
  2060  000B1E  D020               	goto	l321
  2061                           
  2062                           ;main.c: 374: if (((ADRESH<<8)+ADRESL)>=783){
  2063  000B20  50C3               	movf	4035,w,c	;volatile
  2064  000B22  CFC4 F027          	movff	4036,??_testBatteries	;volatile
  2065  000B26  6A28               	clrf	(??_testBatteries+1)& (0+255),c
  2066  000B28  C027  F028         	movff	??_testBatteries,??_testBatteries+1
  2067  000B2C  6A27               	clrf	??_testBatteries,c
  2068  000B2E  2627               	addwf	??_testBatteries,f,c
  2069  000B30  0E00               	movlw	0
  2070  000B32  2228               	addwfc	??_testBatteries+1,f,c
  2071  000B34  BE28               	btfsc	??_testBatteries+1,7,c
  2072  000B36  D00D               	goto	l322
  2073  000B38  0E0F               	movlw	15
  2074  000B3A  5C27               	subwf	??_testBatteries,w,c
  2075  000B3C  0E03               	movlw	3
  2076  000B3E  5828               	subwfb	??_testBatteries+1,w,c
  2077  000B40  A0D8               	btfss	status,0,c
  2078  000B42  D007               	goto	l322
  2079                           
  2080                           ;main.c: 375: LATEbits.LE1 = 0;;
  2081  000B44  928D               	bcf	3981,1,c	;volatile
  2082                           
  2083                           ;main.c: 376: count9V++;
  2084  000B46  2A49               	incf	_count9V,f,c
  2085                           
  2086                           ;main.c: 377: plat1Right = 1;
  2087  000B48  0E01               	movlw	1
  2088  000B4A  6E56               	movwf	_plat1Right,c
  2089                           
  2090                           ;main.c: 378: plat2Left = 1;
  2091  000B4C  0E01               	movlw	1
  2092  000B4E  6E57               	movwf	_plat2Left,c
  2093                           
  2094                           ;main.c: 379: }
  2095  000B50  0012               	return	
  2096  000B52                     l322:
  2097                           
  2098                           ;main.c: 380: else{
  2099                           ;main.c: 381: LATEbits.LE1 = 0;;
  2100  000B52  928D               	bcf	3981,1,c	;volatile
  2101                           
  2102                           ;main.c: 382: countDrain++;
  2103  000B54  2A4C               	incf	_countDrain,f,c
  2104                           
  2105                           ;main.c: 383: plat1Left = 1;
  2106  000B56  0E01               	movlw	1
  2107  000B58  6E55               	movwf	_plat1Left,c
  2108                           
  2109                           ;main.c: 384: plat2Right = 1;
  2110  000B5A  0E01               	movlw	1
  2111  000B5C  6E58               	movwf	_plat2Right,c
  2112                           
  2113                           ;main.c: 385: }
  2114                           ;main.c: 386: return;
  2115  000B5E  0012               	return	
  2116  000B60                     l321:
  2117                           
  2118                           ;main.c: 387: }
  2119                           ;main.c: 388: LATEbits.LE1 = 0;;
  2120  000B60  928D               	bcf	3981,1,c	;volatile
  2121                           
  2122                           ;main.c: 389: LATCbits.LC5 = 1;;
  2123  000B62  8A8B               	bsf	3979,5,c	;volatile
  2124                           
  2125                           ;main.c: 390: if (!isFluctuate(1)){
  2126  000B64  0E01               	movlw	1
  2127  000B66  ECF8  F006         	call	_isFluctuate
  2128  000B6A  501D               	movf	?_isFluctuate,w,c
  2129  000B6C  101E               	iorwf	?_isFluctuate+1,w,c
  2130  000B6E  A4D8               	btfss	status,2,c
  2131  000B70  D020               	goto	l325
  2132                           
  2133                           ;main.c: 391: if (((ADRESH<<8)+ADRESL)>=783){
  2134  000B72  50C3               	movf	4035,w,c	;volatile
  2135  000B74  CFC4 F027          	movff	4036,??_testBatteries	;volatile
  2136  000B78  6A28               	clrf	(??_testBatteries+1)& (0+255),c
  2137  000B7A  C027  F028         	movff	??_testBatteries,??_testBatteries+1
  2138  000B7E  6A27               	clrf	??_testBatteries,c
  2139  000B80  2627               	addwf	??_testBatteries,f,c
  2140  000B82  0E00               	movlw	0
  2141  000B84  2228               	addwfc	??_testBatteries+1,f,c
  2142  000B86  BE28               	btfsc	??_testBatteries+1,7,c
  2143  000B88  D00D               	goto	l326
  2144  000B8A  0E0F               	movlw	15
  2145  000B8C  5C27               	subwf	??_testBatteries,w,c
  2146  000B8E  0E03               	movlw	3
  2147  000B90  5828               	subwfb	??_testBatteries+1,w,c
  2148  000B92  A0D8               	btfss	status,0,c
  2149  000B94  D007               	goto	l326
  2150                           
  2151                           ;main.c: 392: LATCbits.LC5 = 0;;
  2152  000B96  9A8B               	bcf	3979,5,c	;volatile
  2153                           
  2154                           ;main.c: 393: count9V++;
  2155  000B98  2A49               	incf	_count9V,f,c
  2156                           
  2157                           ;main.c: 394: plat1Right = 1;
  2158  000B9A  0E01               	movlw	1
  2159  000B9C  6E56               	movwf	_plat1Right,c
  2160                           
  2161                           ;main.c: 395: plat2Left = 1;
  2162  000B9E  0E01               	movlw	1
  2163  000BA0  6E57               	movwf	_plat2Left,c
  2164                           
  2165                           ;main.c: 396: }
  2166  000BA2  0012               	return	
  2167  000BA4                     l326:
  2168                           
  2169                           ;main.c: 397: else{
  2170                           ;main.c: 398: LATCbits.LC5 = 0;;
  2171  000BA4  9A8B               	bcf	3979,5,c	;volatile
  2172                           
  2173                           ;main.c: 399: countDrain++;
  2174  000BA6  2A4C               	incf	_countDrain,f,c
  2175                           
  2176                           ;main.c: 400: plat1Left = 1;
  2177  000BA8  0E01               	movlw	1
  2178  000BAA  6E55               	movwf	_plat1Left,c
  2179                           
  2180                           ;main.c: 401: plat2Right = 1;
  2181  000BAC  0E01               	movlw	1
  2182  000BAE  6E58               	movwf	_plat2Right,c
  2183                           
  2184                           ;main.c: 402: }
  2185                           ;main.c: 403: return;
  2186  000BB0  0012               	return	
  2187  000BB2                     l325:
  2188                           
  2189                           ;main.c: 404: }
  2190                           ;main.c: 405: LATCbits.LC5 = 0;;
  2191  000BB2  9A8B               	bcf	3979,5,c	;volatile
  2192                           
  2193                           ;main.c: 406: LATEbits.LE0 = 1;;
  2194  000BB4  808D               	bsf	3981,0,c	;volatile
  2195                           
  2196                           ;main.c: 407: if (!isFluctuate(1)){
  2197  000BB6  0E01               	movlw	1
  2198  000BB8  ECF8  F006         	call	_isFluctuate
  2199  000BBC  501D               	movf	?_isFluctuate,w,c
  2200  000BBE  101E               	iorwf	?_isFluctuate+1,w,c
  2201  000BC0  A4D8               	btfss	status,2,c
  2202  000BC2  D020               	goto	l328
  2203                           
  2204                           ;main.c: 408: if (((ADRESH<<8)+ADRESL)>=261){
  2205  000BC4  50C3               	movf	4035,w,c	;volatile
  2206  000BC6  CFC4 F027          	movff	4036,??_testBatteries	;volatile
  2207  000BCA  6A28               	clrf	(??_testBatteries+1)& (0+255),c
  2208  000BCC  C027  F028         	movff	??_testBatteries,??_testBatteries+1
  2209  000BD0  6A27               	clrf	??_testBatteries,c
  2210  000BD2  2627               	addwf	??_testBatteries,f,c
  2211  000BD4  0E00               	movlw	0
  2212  000BD6  2228               	addwfc	??_testBatteries+1,f,c
  2213  000BD8  BE28               	btfsc	??_testBatteries+1,7,c
  2214  000BDA  D00D               	goto	l329
  2215  000BDC  0E05               	movlw	5
  2216  000BDE  5C27               	subwf	??_testBatteries,w,c
  2217  000BE0  0E01               	movlw	1
  2218  000BE2  5828               	subwfb	??_testBatteries+1,w,c
  2219  000BE4  A0D8               	btfss	status,0,c
  2220  000BE6  D007               	goto	l329
  2221                           
  2222                           ;main.c: 409: LATEbits.LE0 = 0;;
  2223  000BE8  908D               	bcf	3981,0,c	;volatile
  2224                           
  2225                           ;main.c: 410: countC++;
  2226  000BEA  2A4B               	incf	_countC,f,c
  2227                           
  2228                           ;main.c: 411: plat1Right = 1;
  2229  000BEC  0E01               	movlw	1
  2230  000BEE  6E56               	movwf	_plat1Right,c
  2231                           
  2232                           ;main.c: 412: plat2Left = 1;
  2233  000BF0  0E01               	movlw	1
  2234  000BF2  6E57               	movwf	_plat2Left,c
  2235                           
  2236                           ;main.c: 414: }
  2237                           
  2238                           ;main.c: 413: return;
  2239  000BF4  0012               	return	
  2240  000BF6                     l329:
  2241                           
  2242                           ;main.c: 415: else{
  2243                           ;main.c: 416: LATEbits.LE0 = 0;;
  2244  000BF6  908D               	bcf	3981,0,c	;volatile
  2245                           
  2246                           ;main.c: 417: countDrain++;
  2247  000BF8  2A4C               	incf	_countDrain,f,c
  2248                           
  2249                           ;main.c: 418: plat1Left = 1;
  2250  000BFA  0E01               	movlw	1
  2251  000BFC  6E55               	movwf	_plat1Left,c
  2252                           
  2253                           ;main.c: 419: plat2Right = 1;
  2254  000BFE  0E01               	movlw	1
  2255  000C00  6E58               	movwf	_plat2Right,c
  2256                           
  2257                           ;main.c: 420: }
  2258                           ;main.c: 421: return;
  2259  000C02  0012               	return	
  2260  000C04                     l328:
  2261                           
  2262                           ;main.c: 422: }
  2263                           ;main.c: 423: LATEbits.LE0 = 0;;
  2264  000C04  908D               	bcf	3981,0,c	;volatile
  2265                           
  2266                           ;main.c: 424: LATDbits.LD0 = 1;;
  2267  000C06  808C               	bsf	3980,0,c	;volatile
  2268                           
  2269                           ;main.c: 425: if (!isFluctuate(1)){
  2270  000C08  0E01               	movlw	1
  2271  000C0A  ECF8  F006         	call	_isFluctuate
  2272  000C0E  501D               	movf	?_isFluctuate,w,c
  2273  000C10  101E               	iorwf	?_isFluctuate+1,w,c
  2274  000C12  A4D8               	btfss	status,2,c
  2275  000C14  D01B               	goto	l2733
  2276                           
  2277                           ;main.c: 426: if (((ADRESH<<8)+ADRESL)>=261){
  2278  000C16  50C3               	movf	4035,w,c	;volatile
  2279  000C18  CFC4 F027          	movff	4036,??_testBatteries	;volatile
  2280  000C1C  6A28               	clrf	(??_testBatteries+1)& (0+255),c
  2281  000C1E  C027  F028         	movff	??_testBatteries,??_testBatteries+1
  2282  000C22  6A27               	clrf	??_testBatteries,c
  2283  000C24  2627               	addwf	??_testBatteries,f,c
  2284  000C26  0E00               	movlw	0
  2285  000C28  2228               	addwfc	??_testBatteries+1,f,c
  2286  000C2A  BE28               	btfsc	??_testBatteries+1,7,c
  2287  000C2C  D00B               	goto	l332
  2288  000C2E  0E05               	movlw	5
  2289  000C30  5C27               	subwf	??_testBatteries,w,c
  2290  000C32  0E01               	movlw	1
  2291  000C34  5828               	subwfb	??_testBatteries+1,w,c
  2292  000C36  A0D8               	btfss	status,0,c
  2293  000C38  D005               	goto	l332
  2294                           
  2295                           ;main.c: 427: LATDbits.LD0 = 0;;
  2296  000C3A  908C               	bcf	3980,0,c	;volatile
  2297                           
  2298                           ;main.c: 428: countAA++;
  2299  000C3C  2A4A               	incf	_countAA,f,c
  2300                           
  2301                           ;main.c: 429: plat1Right = 1;
  2302  000C3E  0E01               	movlw	1
  2303  000C40  6E56               	movwf	_plat1Right,c
  2304                           
  2305                           ;main.c: 430: }
  2306  000C42  D004               	goto	l2733
  2307  000C44                     l332:
  2308                           
  2309                           ;main.c: 431: else{
  2310                           ;main.c: 432: LATDbits.LD0 = 0;;
  2311  000C44  908C               	bcf	3980,0,c	;volatile
  2312                           
  2313                           ;main.c: 433: countDrain++;
  2314  000C46  2A4C               	incf	_countDrain,f,c
  2315                           
  2316                           ;main.c: 434: plat1Left = 1;
  2317  000C48  0E01               	movlw	1
  2318  000C4A  6E55               	movwf	_plat1Left,c
  2319  000C4C                     l2733:
  2320                           
  2321                           ;main.c: 435: }
  2322                           ;main.c: 436: }
  2323                           ;main.c: 437: LATDbits.LD0 = 0;;
  2324  000C4C  908C               	bcf	3980,0,c	;volatile
  2325                           
  2326                           ;main.c: 438: LATDbits.LD1 = 1;;
  2327  000C4E  828C               	bsf	3980,1,c	;volatile
  2328                           
  2329                           ;main.c: 439: if (!isFluctuate(1)){
  2330  000C50  0E01               	movlw	1
  2331  000C52  ECF8  F006         	call	_isFluctuate
  2332  000C56  501D               	movf	?_isFluctuate,w,c
  2333  000C58  101E               	iorwf	?_isFluctuate+1,w,c
  2334  000C5A  A4D8               	btfss	status,2,c
  2335  000C5C  D01B               	goto	l2751
  2336                           
  2337                           ;main.c: 440: if (((ADRESH<<8)+ADRESL)>=261){
  2338  000C5E  50C3               	movf	4035,w,c	;volatile
  2339  000C60  CFC4 F027          	movff	4036,??_testBatteries	;volatile
  2340  000C64  6A28               	clrf	(??_testBatteries+1)& (0+255),c
  2341  000C66  C027  F028         	movff	??_testBatteries,??_testBatteries+1
  2342  000C6A  6A27               	clrf	??_testBatteries,c
  2343  000C6C  2627               	addwf	??_testBatteries,f,c
  2344  000C6E  0E00               	movlw	0
  2345  000C70  2228               	addwfc	??_testBatteries+1,f,c
  2346  000C72  BE28               	btfsc	??_testBatteries+1,7,c
  2347  000C74  D00B               	goto	l335
  2348  000C76  0E05               	movlw	5
  2349  000C78  5C27               	subwf	??_testBatteries,w,c
  2350  000C7A  0E01               	movlw	1
  2351  000C7C  5828               	subwfb	??_testBatteries+1,w,c
  2352  000C7E  A0D8               	btfss	status,0,c
  2353  000C80  D005               	goto	l335
  2354                           
  2355                           ;main.c: 441: LATDbits.LD1 = 0;;
  2356  000C82  928C               	bcf	3980,1,c	;volatile
  2357                           
  2358                           ;main.c: 442: countAA++;
  2359  000C84  2A4A               	incf	_countAA,f,c
  2360                           
  2361                           ;main.c: 443: plat2Left = 1;
  2362  000C86  0E01               	movlw	1
  2363  000C88  6E57               	movwf	_plat2Left,c
  2364                           
  2365                           ;main.c: 444: }
  2366  000C8A  D004               	goto	l2751
  2367  000C8C                     l335:
  2368                           
  2369                           ;main.c: 445: else{
  2370                           ;main.c: 446: LATDbits.LD1 = 0;;
  2371  000C8C  928C               	bcf	3980,1,c	;volatile
  2372                           
  2373                           ;main.c: 447: countDrain++;
  2374  000C8E  2A4C               	incf	_countDrain,f,c
  2375                           
  2376                           ;main.c: 448: plat2Right = 1;
  2377  000C90  0E01               	movlw	1
  2378  000C92  6E58               	movwf	_plat2Right,c
  2379  000C94                     l2751:
  2380                           
  2381                           ;main.c: 449: }
  2382                           ;main.c: 450: }
  2383                           ;main.c: 451: LATDbits.LD1 = 0;;
  2384  000C94  928C               	bcf	3980,1,c	;volatile
  2385  000C96  0012               	return	
  2386  000C98                     __end_of_testBatteries:
  2387                           	opt stack 0
  2388                           tblptru	equ	0xFF8
  2389                           tblptrh	equ	0xFF7
  2390                           tblptrl	equ	0xFF6
  2391                           tablat	equ	0xFF5
  2392                           prodh	equ	0xFF4
  2393                           prodl	equ	0xFF3
  2394                           intcon	equ	0xFF2
  2395                           intcon3	equ	0xFF0
  2396                           postinc0	equ	0xFEE
  2397                           wreg	equ	0xFE8
  2398                           indf2	equ	0xFDF
  2399                           fsr2h	equ	0xFDA
  2400                           fsr2l	equ	0xFD9
  2401                           status	equ	0xFD8
  2402                           
  2403 ;; *************** function _isFluctuate *****************
  2404 ;; Defined at:
  2405 ;;		line 455 in file "../main.c"
  2406 ;; Parameters:    Size  Location     Type
  2407 ;;  channel         1    wreg     unsigned char 
  2408 ;; Auto vars:     Size  Location     Type
  2409 ;;  channel         1   36[COMRAM] unsigned char 
  2410 ;;  i               1   37[COMRAM] unsigned char 
  2411 ;;  tempVoltage     2   34[COMRAM] int 
  2412 ;; Return value:  Size  Location     Type
  2413 ;;                  2   28[COMRAM] int 
  2414 ;; Registers used:
  2415 ;;		wreg, status,2, status,0, cstack
  2416 ;; Tracked objects:
  2417 ;;		On entry : 0/0
  2418 ;;		On exit  : 0/0
  2419 ;;		Unchanged: 0/0
  2420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2421 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2422 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2423 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2424 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2425 ;;Total ram usage:       10 bytes
  2426 ;; Hardware stack levels used:    1
  2427 ;; Hardware stack levels required when called:    4
  2428 ;; This function calls:
  2429 ;;		_abs
  2430 ;;		_readADC
  2431 ;; This function is called by:
  2432 ;;		_main
  2433 ;;		_testBatteries
  2434 ;; This function uses a non-reentrant model
  2435 ;;
  2436                           
  2437                           	psect	text2
  2438  000DF0                     __ptext2:
  2439                           	opt stack 0
  2440  000DF0                     _isFluctuate:
  2441                           	opt stack 25
  2442                           
  2443                           ;incstack = 0
  2444                           ;isFluctuate@channel stored from wreg
  2445  000DF0  6E25               	movwf	isFluctuate@channel,c
  2446                           
  2447                           ;main.c: 456: readADC(channel);
  2448  000DF2  5025               	movf	isFluctuate@channel,w,c
  2449  000DF4  ECB3  F009         	call	_readADC
  2450                           
  2451                           ;main.c: 457: int tempVoltage = (ADRESH<<8)+ADRESL;
  2452  000DF8  50C4               	movf	4036,w,c	;volatile
  2453  000DFA  6E20               	movwf	(??_isFluctuate+1)& (0+255),c
  2454  000DFC  6A1F               	clrf	??_isFluctuate& (0+255),c
  2455  000DFE  50C3               	movf	4035,w,c	;volatile
  2456  000E00  241F               	addwf	??_isFluctuate,w,c
  2457  000E02  6E23               	movwf	isFluctuate@tempVoltage,c
  2458  000E04  0E00               	movlw	0
  2459  000E06  2020               	addwfc	??_isFluctuate+1,w,c
  2460  000E08  6E24               	movwf	isFluctuate@tempVoltage+1,c
  2461                           
  2462                           ;main.c: 458: for(unsigned char i = 0; i < 50; i++){
  2463  000E0A  0E00               	movlw	0
  2464  000E0C  6E26               	movwf	isFluctuate@i,c
  2465  000E0E                     l2249:
  2466  000E0E  0E31               	movlw	49
  2467  000E10  6426               	cpfsgt	isFluctuate@i,c
  2468  000E12  D001               	goto	l2253
  2469  000E14  D033               	goto	l2267
  2470  000E16                     l2253:
  2471                           
  2472                           ;main.c: 459: _delay((unsigned long)((1)*(10000000/4000.0)));
  2473  000E16  0E04               	movlw	4
  2474  000E18  6E1F               	movwf	??_isFluctuate& (0+255),c
  2475  000E1A  0E3E               	movlw	62
  2476  000E1C                     u3277:
  2477  000E1C  2EE8               	decfsz	wreg,f,c
  2478  000E1E  D7FE               	bra	u3277
  2479  000E20  2E1F               	decfsz	??_isFluctuate& (0+255),f,c
  2480  000E22  D7FC               	bra	u3277
  2481                           
  2482                           ;main.c: 460: readADC(channel);
  2483  000E24  5025               	movf	isFluctuate@channel,w,c
  2484  000E26  ECB3  F009         	call	_readADC
  2485                           
  2486                           ;main.c: 461: if (abs((ADRESH<<8)+ADRESL-tempVoltage)>20)
  2487  000E2A  C023  F01F         	movff	isFluctuate@tempVoltage,??_isFluctuate
  2488  000E2E  C024  F020         	movff	isFluctuate@tempVoltage+1,??_isFluctuate+1
  2489  000E32  1E1F               	comf	??_isFluctuate,f,c
  2490  000E34  1E20               	comf	??_isFluctuate+1,f,c
  2491  000E36  4A1F               	infsnz	??_isFluctuate,f,c
  2492  000E38  2A20               	incf	??_isFluctuate+1,f,c
  2493  000E3A  50C3               	movf	4035,w,c	;volatile
  2494  000E3C  CFC4 F021          	movff	4036,??_isFluctuate+2	;volatile
  2495  000E40  6A22               	clrf	(??_isFluctuate+3)& (0+255),c
  2496  000E42  C021  F022         	movff	??_isFluctuate+2,??_isFluctuate+3
  2497  000E46  6A21               	clrf	??_isFluctuate+2,c
  2498  000E48  2621               	addwf	??_isFluctuate+2,f,c
  2499  000E4A  0E00               	movlw	0
  2500  000E4C  2222               	addwfc	??_isFluctuate+3,f,c
  2501  000E4E  501F               	movf	??_isFluctuate,w,c
  2502  000E50  2421               	addwf	??_isFluctuate+2,w,c
  2503  000E52  6E19               	movwf	abs@x,c
  2504  000E54  5020               	movf	??_isFluctuate+1,w,c
  2505  000E56  2022               	addwfc	??_isFluctuate+3,w,c
  2506  000E58  6E1A               	movwf	abs@x+1,c
  2507  000E5A  EC6A  F009         	call	_abs	;wreg free
  2508  000E5E  BE1A               	btfsc	?_abs+1,7,c
  2509  000E60  D00B               	goto	l2263
  2510  000E62  501A               	movf	?_abs+1,w,c
  2511  000E64  E104               	bnz	u1670
  2512  000E66  0E15               	movlw	21
  2513  000E68  5C19               	subwf	?_abs,w,c
  2514  000E6A  A0D8               	btfss	status,0,c
  2515  000E6C  D005               	goto	l2263
  2516  000E6E                     u1670:
  2517                           
  2518                           ;main.c: 462: return 1;
  2519  000E6E  0E00               	movlw	0
  2520  000E70  6E1E               	movwf	?_isFluctuate+1,c
  2521  000E72  0E01               	movlw	1
  2522  000E74  6E1D               	movwf	?_isFluctuate,c
  2523  000E76  0012               	return	
  2524  000E78                     l2263:
  2525  000E78  2A26               	incf	isFluctuate@i,f,c
  2526  000E7A  D7C9               	goto	l2249
  2527  000E7C                     l2267:
  2528                           
  2529                           ;main.c: 463: }
  2530                           ;main.c: 464: return 0;
  2531  000E7C  0E00               	movlw	0
  2532  000E7E  6E1E               	movwf	?_isFluctuate+1,c
  2533  000E80  0E00               	movlw	0
  2534  000E82  6E1D               	movwf	?_isFluctuate,c
  2535  000E84  0012               	return	
  2536  000E86                     __end_of_isFluctuate:
  2537                           	opt stack 0
  2538                           tblptru	equ	0xFF8
  2539                           tblptrh	equ	0xFF7
  2540                           tblptrl	equ	0xFF6
  2541                           tablat	equ	0xFF5
  2542                           prodh	equ	0xFF4
  2543                           prodl	equ	0xFF3
  2544                           intcon	equ	0xFF2
  2545                           intcon3	equ	0xFF0
  2546                           postinc0	equ	0xFEE
  2547                           wreg	equ	0xFE8
  2548                           indf2	equ	0xFDF
  2549                           fsr2h	equ	0xFDA
  2550                           fsr2l	equ	0xFD9
  2551                           status	equ	0xFD8
  2552                           
  2553 ;; *************** function _readADC *****************
  2554 ;; Defined at:
  2555 ;;		line 319 in file "../main.c"
  2556 ;; Parameters:    Size  Location     Type
  2557 ;;  channel         1    wreg     unsigned char 
  2558 ;; Auto vars:     Size  Location     Type
  2559 ;;  channel         1   24[COMRAM] unsigned char 
  2560 ;; Return value:  Size  Location     Type
  2561 ;;                  1    wreg      void 
  2562 ;; Registers used:
  2563 ;;		wreg, status,2, status,0
  2564 ;; Tracked objects:
  2565 ;;		On entry : 0/0
  2566 ;;		On exit  : 0/0
  2567 ;;		Unchanged: 0/0
  2568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2569 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2570 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2571 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2572 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2573 ;;Total ram usage:        1 bytes
  2574 ;; Hardware stack levels used:    1
  2575 ;; Hardware stack levels required when called:    3
  2576 ;; This function calls:
  2577 ;;		Nothing
  2578 ;; This function is called by:
  2579 ;;		_isFluctuate
  2580 ;; This function uses a non-reentrant model
  2581 ;;
  2582                           
  2583                           	psect	text3
  2584  001366                     __ptext3:
  2585                           	opt stack 0
  2586  001366                     _readADC:
  2587                           	opt stack 25
  2588                           
  2589                           ;incstack = 0
  2590                           ;readADC@channel stored from wreg
  2591  001366  6E19               	movwf	readADC@channel,c
  2592                           
  2593                           ;main.c: 321: ADCON0 = channel <<2;
  2594  001368  4419               	rlncf	readADC@channel,w,c
  2595  00136A  46E8               	rlncf	wreg,f,c
  2596  00136C  0BFC               	andlw	252
  2597  00136E  6EC2               	movwf	4034,c	;volatile
  2598                           
  2599                           ;main.c: 322: ADCON0bits.ADON = 1;
  2600  001370  80C2               	bsf	4034,0,c	;volatile
  2601                           
  2602                           ;main.c: 323: ADCON0bits.GO = 1;
  2603  001372  82C2               	bsf	4034,1,c	;volatile
  2604  001374                     l312:
  2605  001374  A2C2               	btfss	4034,1,c	;volatile
  2606  001376  0012               	return	
  2607  001378  D7FD               	goto	l312
  2608  00137A                     __end_of_readADC:
  2609                           	opt stack 0
  2610                           tblptru	equ	0xFF8
  2611                           tblptrh	equ	0xFF7
  2612                           tblptrl	equ	0xFF6
  2613                           tablat	equ	0xFF5
  2614                           prodh	equ	0xFF4
  2615                           prodl	equ	0xFF3
  2616                           intcon	equ	0xFF2
  2617                           intcon3	equ	0xFF0
  2618                           postinc0	equ	0xFEE
  2619                           wreg	equ	0xFE8
  2620                           indf2	equ	0xFDF
  2621                           fsr2h	equ	0xFDA
  2622                           fsr2l	equ	0xFD9
  2623                           status	equ	0xFD8
  2624                           
  2625 ;; *************** function _abs *****************
  2626 ;; Defined at:
  2627 ;;		line 26 in file "../main.c"
  2628 ;; Parameters:    Size  Location     Type
  2629 ;;  x               2   24[COMRAM] int 
  2630 ;; Auto vars:     Size  Location     Type
  2631 ;;		None
  2632 ;; Return value:  Size  Location     Type
  2633 ;;                  2   24[COMRAM] int 
  2634 ;; Registers used:
  2635 ;;		wreg, status,2, status,0
  2636 ;; Tracked objects:
  2637 ;;		On entry : 0/0
  2638 ;;		On exit  : 0/0
  2639 ;;		Unchanged: 0/0
  2640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2641 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2642 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2643 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2644 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2645 ;;Total ram usage:        4 bytes
  2646 ;; Hardware stack levels used:    1
  2647 ;; Hardware stack levels required when called:    3
  2648 ;; This function calls:
  2649 ;;		Nothing
  2650 ;; This function is called by:
  2651 ;;		_isFluctuate
  2652 ;; This function uses a non-reentrant model
  2653 ;;
  2654                           
  2655                           	psect	text4
  2656  0012D4                     __ptext4:
  2657                           	opt stack 0
  2658  0012D4                     _abs:
  2659                           	opt stack 25
  2660                           
  2661                           ;main.c: 27: if (x<0)
  2662                           
  2663                           ;incstack = 0
  2664  0012D4  AE1A               	btfss	abs@x+1,7,c
  2665  0012D6  D00D               	goto	l174
  2666                           
  2667                           ;main.c: 28: return -x;
  2668  0012D8  C019  F01B         	movff	abs@x,??_abs
  2669  0012DC  C01A  F01C         	movff	abs@x+1,??_abs+1
  2670  0012E0  1E1B               	comf	??_abs,f,c
  2671  0012E2  1E1C               	comf	??_abs+1,f,c
  2672  0012E4  4A1B               	infsnz	??_abs,f,c
  2673  0012E6  2A1C               	incf	??_abs+1,f,c
  2674  0012E8  C01B  F019         	movff	??_abs,?_abs
  2675  0012EC  C01C  F01A         	movff	??_abs+1,?_abs+1
  2676  0012F0  0012               	return	
  2677  0012F2                     l174:
  2678                           
  2679                           ;main.c: 29: return x;
  2680  0012F2  C019  F019         	movff	abs@x,?_abs
  2681  0012F6  C01A  F01A         	movff	abs@x+1,?_abs+1
  2682  0012FA  0012               	return		;funcret
  2683  0012FC                     __end_of_abs:
  2684                           	opt stack 0
  2685                           tblptru	equ	0xFF8
  2686                           tblptrh	equ	0xFF7
  2687                           tblptrl	equ	0xFF6
  2688                           tablat	equ	0xFF5
  2689                           prodh	equ	0xFF4
  2690                           prodl	equ	0xFF3
  2691                           intcon	equ	0xFF2
  2692                           intcon3	equ	0xFF0
  2693                           postinc0	equ	0xFEE
  2694                           wreg	equ	0xFE8
  2695                           indf2	equ	0xFDF
  2696                           fsr2h	equ	0xFDA
  2697                           fsr2l	equ	0xFD9
  2698                           status	equ	0xFD8
  2699                           
  2700 ;; *************** function _stopOperation *****************
  2701 ;; Defined at:
  2702 ;;		line 327 in file "../main.c"
  2703 ;; Parameters:    Size  Location     Type
  2704 ;;		None
  2705 ;; Auto vars:     Size  Location     Type
  2706 ;;		None
  2707 ;; Return value:  Size  Location     Type
  2708 ;;                  1    wreg      void 
  2709 ;; Registers used:
  2710 ;;		wreg, status,2, status,0, cstack
  2711 ;; Tracked objects:
  2712 ;;		On entry : 0/0
  2713 ;;		On exit  : 0/0
  2714 ;;		Unchanged: 0/0
  2715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2716 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2717 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2718 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2719 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2720 ;;Total ram usage:        0 bytes
  2721 ;; Hardware stack levels used:    1
  2722 ;; Hardware stack levels required when called:    4
  2723 ;; This function calls:
  2724 ;;		___awdiv
  2725 ;;		___awmod
  2726 ;; This function is called by:
  2727 ;;		_main
  2728 ;; This function uses a non-reentrant model
  2729 ;;
  2730                           
  2731                           	psect	text5
  2732  000C98                     __ptext5:
  2733                           	opt stack 0
  2734  000C98                     _stopOperation:
  2735                           	opt stack 26
  2736                           
  2737                           ;main.c: 328: T0CONbits.TMR0ON = 0;
  2738                           
  2739                           ;incstack = 0
  2740  000C98  9ED5               	bcf	4053,7,c	;volatile
  2741                           
  2742                           ;main.c: 329: T1CONbits.TMR1ON = 0;
  2743  000C9A  90CD               	bcf	4045,0,c	;volatile
  2744                           
  2745                           ;main.c: 330: TMR0 = 55770;
  2746  000C9C  0ED9               	movlw	217
  2747  000C9E  6ED7               	movwf	4055,c	;volatile
  2748  000CA0  0EDA               	movlw	218
  2749  000CA2  6ED6               	movwf	4054,c	;volatile
  2750                           
  2751                           ;main.c: 331: TMR1 = 48035;
  2752  000CA4  0EBB               	movlw	187
  2753  000CA6  6ECF               	movwf	4047,c	;volatile
  2754  000CA8  0EA3               	movlw	163
  2755  000CAA  6ECE               	movwf	4046,c	;volatile
  2756                           
  2757                           ;main.c: 332: num9V = count9V;
  2758  000CAC  C049  F04F         	movff	_count9V,_num9V
  2759                           
  2760                           ;main.c: 333: numC = countC;
  2761  000CB0  C04B  F052         	movff	_countC,_numC
  2762                           
  2763                           ;main.c: 334: numAA = countAA;
  2764  000CB4  C04A  F050         	movff	_countAA,_numAA
  2765                           
  2766                           ;main.c: 335: numDrain = countDrain;
  2767  000CB8  C04C  F053         	movff	_countDrain,_numDrain
  2768                           
  2769                           ;main.c: 336: count9V = 0;
  2770  000CBC  0E00               	movlw	0
  2771  000CBE  6E49               	movwf	_count9V,c
  2772                           
  2773                           ;main.c: 337: countC = 0;
  2774  000CC0  0E00               	movlw	0
  2775  000CC2  6E4B               	movwf	_countC,c
  2776                           
  2777                           ;main.c: 338: countAA = 0;
  2778  000CC4  0E00               	movlw	0
  2779  000CC6  6E4A               	movwf	_countAA,c
  2780                           
  2781                           ;main.c: 339: countDrain = 0;
  2782  000CC8  0E00               	movlw	0
  2783  000CCA  6E4C               	movwf	_countDrain,c
  2784                           
  2785                           ;main.c: 340: min = opTimer / 60;
  2786  000CCC  C054  F019         	movff	_opTimer,___awdiv@dividend
  2787  000CD0  6A1A               	clrf	___awdiv@dividend+1,c
  2788  000CD2  0E00               	movlw	0
  2789  000CD4  6E1C               	movwf	___awdiv@divisor+1,c
  2790  000CD6  0E3C               	movlw	60
  2791  000CD8  6E1B               	movwf	___awdiv@divisor,c
  2792  000CDA  EC43  F007         	call	___awdiv	;wreg free
  2793  000CDE  5019               	movf	?___awdiv,w,c
  2794  000CE0  6E4E               	movwf	_min,c
  2795                           
  2796                           ;main.c: 341: sec = opTimer % 60;
  2797  000CE2  C054  F019         	movff	_opTimer,___awmod@dividend
  2798  000CE6  6A1A               	clrf	___awmod@dividend+1,c
  2799  000CE8  0E00               	movlw	0
  2800  000CEA  6E1C               	movwf	___awmod@divisor+1,c
  2801  000CEC  0E3C               	movlw	60
  2802  000CEE  6E1B               	movwf	___awmod@divisor,c
  2803  000CF0  EC08  F008         	call	___awmod	;wreg free
  2804  000CF4  5019               	movf	?___awmod,w,c
  2805  000CF6  6E59               	movwf	_sec,c
  2806                           
  2807                           ;main.c: 342: opTimer = 0;
  2808  000CF8  0E00               	movlw	0
  2809  000CFA  6E54               	movwf	_opTimer,c
  2810                           
  2811                           ;main.c: 343: solOnTimer = 0;
  2812  000CFC  0E00               	movlw	0
  2813  000CFE  6E5A               	movwf	_solOnTimer,c
  2814                           
  2815                           ;main.c: 344: doneTimer = 0;
  2816  000D00  0E00               	movlw	0
  2817  000D02  6E4D               	movwf	_doneTimer,c
  2818                           
  2819                           ;main.c: 345: waitMotor = 0;
  2820  000D04  0E00               	movlw	0
  2821  000D06  6E48               	movwf	_waitMotor+1,c
  2822  000D08  0E00               	movlw	0
  2823  000D0A  6E47               	movwf	_waitMotor,c
  2824                           
  2825                           ;main.c: 346: stepGear = 0;
  2826  000D0C  0E00               	movlw	0
  2827  000D0E  6E5D               	movwf	_stepGear,c
  2828                           
  2829                           ;main.c: 347: plat1Left = 0;
  2830  000D10  0E00               	movlw	0
  2831  000D12  6E55               	movwf	_plat1Left,c
  2832                           
  2833                           ;main.c: 348: plat1Right = 0;
  2834  000D14  0E00               	movlw	0
  2835  000D16  6E56               	movwf	_plat1Right,c
  2836                           
  2837                           ;main.c: 349: plat2Left = 0;
  2838  000D18  0E00               	movlw	0
  2839  000D1A  6E57               	movwf	_plat2Left,c
  2840                           
  2841                           ;main.c: 350: plat2Right = 0;
  2842  000D1C  0E00               	movlw	0
  2843  000D1E  6E58               	movwf	_plat2Right,c
  2844                           
  2845                           ;main.c: 351: LATEbits.LE0 = 0;;
  2846  000D20  908D               	bcf	3981,0,c	;volatile
  2847                           
  2848                           ;main.c: 352: LATEbits.LE1 = 0;;
  2849  000D22  928D               	bcf	3981,1,c	;volatile
  2850                           
  2851                           ;main.c: 353: LATCbits.LC5 = 0;;
  2852  000D24  9A8B               	bcf	3979,5,c	;volatile
  2853                           
  2854                           ;main.c: 354: LATDbits.LD0 = 0;;
  2855  000D26  908C               	bcf	3980,0,c	;volatile
  2856                           
  2857                           ;main.c: 355: LATDbits.LD1 = 0;;
  2858  000D28  928C               	bcf	3980,1,c	;volatile
  2859                           
  2860                           ;main.c: 356: LATAbits.LA2 = 0;;
  2861  000D2A  9489               	bcf	3977,2,c	;volatile
  2862                           
  2863                           ;main.c: 357: LATAbits.LA3 = 0;;
  2864  000D2C  9689               	bcf	3977,3,c	;volatile
  2865                           
  2866                           ;main.c: 358: LATAbits.LA4 = 0;;
  2867  000D2E  9889               	bcf	3977,4,c	;volatile
  2868                           
  2869                           ;main.c: 359: LATAbits.LA5 = 0;;
  2870  000D30  9A89               	bcf	3977,5,c	;volatile
  2871                           
  2872                           ;main.c: 360: LATBbits.LB0 = 0;;
  2873  000D32  908A               	bcf	3978,0,c	;volatile
  2874                           
  2875                           ;main.c: 361: LATBbits.LB2 = 0;;
  2876  000D34  948A               	bcf	3978,2,c	;volatile
  2877                           
  2878                           ;main.c: 362: LATBbits.LB3 = 0;;
  2879  000D36  968A               	bcf	3978,3,c	;volatile
  2880                           
  2881                           ;main.c: 363: LATAbits.LA6 = 0;;
  2882  000D38  9C89               	bcf	3977,6,c	;volatile
  2883                           
  2884                           ;main.c: 364: LATCbits.LC1= 0;;
  2885  000D3A  928B               	bcf	3979,1,c	;volatile
  2886                           
  2887                           ;main.c: 365: LATAbits.LA7 = 0;;
  2888  000D3C  9E89               	bcf	3977,7,c	;volatile
  2889                           
  2890                           ;main.c: 366: LATCbits.LC2 = 0;;
  2891  000D3E  948B               	bcf	3979,2,c	;volatile
  2892                           
  2893                           ;main.c: 367: LATCbits.LC0 = 0;;
  2894  000D40  908B               	bcf	3979,0,c	;volatile
  2895  000D42  0012               	return		;funcret
  2896  000D44                     __end_of_stopOperation:
  2897                           	opt stack 0
  2898                           tblptru	equ	0xFF8
  2899                           tblptrh	equ	0xFF7
  2900                           tblptrl	equ	0xFF6
  2901                           tablat	equ	0xFF5
  2902                           prodh	equ	0xFF4
  2903                           prodl	equ	0xFF3
  2904                           intcon	equ	0xFF2
  2905                           intcon3	equ	0xFF0
  2906                           postinc0	equ	0xFEE
  2907                           wreg	equ	0xFE8
  2908                           indf2	equ	0xFDF
  2909                           fsr2h	equ	0xFDA
  2910                           fsr2l	equ	0xFD9
  2911                           status	equ	0xFD8
  2912                           
  2913 ;; *************** function ___awmod *****************
  2914 ;; Defined at:
  2915 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  2916 ;; Parameters:    Size  Location     Type
  2917 ;;  dividend        2   24[COMRAM] int 
  2918 ;;  divisor         2   26[COMRAM] int 
  2919 ;; Auto vars:     Size  Location     Type
  2920 ;;  sign            1   29[COMRAM] unsigned char 
  2921 ;;  counter         1   28[COMRAM] unsigned char 
  2922 ;; Return value:  Size  Location     Type
  2923 ;;                  2   24[COMRAM] int 
  2924 ;; Registers used:
  2925 ;;		wreg, status,2, status,0
  2926 ;; Tracked objects:
  2927 ;;		On entry : 0/0
  2928 ;;		On exit  : 0/0
  2929 ;;		Unchanged: 0/0
  2930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2931 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2932 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2933 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2934 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2935 ;;Total ram usage:        6 bytes
  2936 ;; Hardware stack levels used:    1
  2937 ;; Hardware stack levels required when called:    3
  2938 ;; This function calls:
  2939 ;;		Nothing
  2940 ;; This function is called by:
  2941 ;;		_stopOperation
  2942 ;; This function uses a non-reentrant model
  2943 ;;
  2944                           
  2945                           	psect	text6
  2946  001010                     __ptext6:
  2947                           	opt stack 0
  2948  001010                     ___awmod:
  2949                           	opt stack 26
  2950                           
  2951                           ;incstack = 0
  2952  001010  0E00               	movlw	0
  2953  001012  6E1E               	movwf	___awmod@sign,c
  2954  001014  AE1A               	btfss	___awmod@dividend+1,7,c
  2955  001016  D006               	goto	l2341
  2956  001018  6C19               	negf	___awmod@dividend,c
  2957  00101A  1E1A               	comf	___awmod@dividend+1,f,c
  2958  00101C  B0D8               	btfsc	status,0,c
  2959  00101E  2A1A               	incf	___awmod@dividend+1,f,c
  2960  001020  0E01               	movlw	1
  2961  001022  6E1E               	movwf	___awmod@sign,c
  2962  001024                     l2341:
  2963  001024  AE1C               	btfss	___awmod@divisor+1,7,c
  2964  001026  D004               	goto	l2345
  2965  001028  6C1B               	negf	___awmod@divisor,c
  2966  00102A  1E1C               	comf	___awmod@divisor+1,f,c
  2967  00102C  B0D8               	btfsc	status,0,c
  2968  00102E  2A1C               	incf	___awmod@divisor+1,f,c
  2969  001030                     l2345:
  2970  001030  501B               	movf	___awmod@divisor,w,c
  2971  001032  101C               	iorwf	___awmod@divisor+1,w,c
  2972  001034  B4D8               	btfsc	status,2,c
  2973  001036  D018               	goto	l2361
  2974  001038  0E01               	movlw	1
  2975  00103A  6E1D               	movwf	___awmod@counter,c
  2976  00103C  D004               	goto	l2351
  2977  00103E                     l2349:
  2978  00103E  90D8               	bcf	status,0,c
  2979  001040  361B               	rlcf	___awmod@divisor,f,c
  2980  001042  361C               	rlcf	___awmod@divisor+1,f,c
  2981  001044  2A1D               	incf	___awmod@counter,f,c
  2982  001046                     l2351:
  2983  001046  AE1C               	btfss	___awmod@divisor+1,7,c
  2984  001048  D7FA               	goto	l2349
  2985  00104A                     l2353:
  2986  00104A  501B               	movf	___awmod@divisor,w,c
  2987  00104C  5C19               	subwf	___awmod@dividend,w,c
  2988  00104E  501C               	movf	___awmod@divisor+1,w,c
  2989  001050  581A               	subwfb	___awmod@dividend+1,w,c
  2990  001052  A0D8               	btfss	status,0,c
  2991  001054  D004               	goto	l2357
  2992  001056  501B               	movf	___awmod@divisor,w,c
  2993  001058  5E19               	subwf	___awmod@dividend,f,c
  2994  00105A  501C               	movf	___awmod@divisor+1,w,c
  2995  00105C  5A1A               	subwfb	___awmod@dividend+1,f,c
  2996  00105E                     l2357:
  2997  00105E  90D8               	bcf	status,0,c
  2998  001060  321C               	rrcf	___awmod@divisor+1,f,c
  2999  001062  321B               	rrcf	___awmod@divisor,f,c
  3000  001064  2E1D               	decfsz	___awmod@counter,f,c
  3001  001066  D7F1               	goto	l2353
  3002  001068                     l2361:
  3003  001068  501E               	movf	___awmod@sign,w,c
  3004  00106A  B4D8               	btfsc	status,2,c
  3005  00106C  D004               	goto	l2365
  3006  00106E  6C19               	negf	___awmod@dividend,c
  3007  001070  1E1A               	comf	___awmod@dividend+1,f,c
  3008  001072  B0D8               	btfsc	status,0,c
  3009  001074  2A1A               	incf	___awmod@dividend+1,f,c
  3010  001076                     l2365:
  3011  001076  C019  F019         	movff	___awmod@dividend,?___awmod
  3012  00107A  C01A  F01A         	movff	___awmod@dividend+1,?___awmod+1
  3013  00107E  0012               	return	
  3014  001080                     __end_of___awmod:
  3015                           	opt stack 0
  3016                           tblptru	equ	0xFF8
  3017                           tblptrh	equ	0xFF7
  3018                           tblptrl	equ	0xFF6
  3019                           tablat	equ	0xFF5
  3020                           prodh	equ	0xFF4
  3021                           prodl	equ	0xFF3
  3022                           intcon	equ	0xFF2
  3023                           intcon3	equ	0xFF0
  3024                           postinc0	equ	0xFEE
  3025                           wreg	equ	0xFE8
  3026                           indf2	equ	0xFDF
  3027                           fsr2h	equ	0xFDA
  3028                           fsr2l	equ	0xFD9
  3029                           status	equ	0xFD8
  3030                           
  3031 ;; *************** function ___awdiv *****************
  3032 ;; Defined at:
  3033 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  3034 ;; Parameters:    Size  Location     Type
  3035 ;;  dividend        2   24[COMRAM] int 
  3036 ;;  divisor         2   26[COMRAM] int 
  3037 ;; Auto vars:     Size  Location     Type
  3038 ;;  quotient        2   30[COMRAM] int 
  3039 ;;  sign            1   29[COMRAM] unsigned char 
  3040 ;;  counter         1   28[COMRAM] unsigned char 
  3041 ;; Return value:  Size  Location     Type
  3042 ;;                  2   24[COMRAM] int 
  3043 ;; Registers used:
  3044 ;;		wreg, status,2, status,0
  3045 ;; Tracked objects:
  3046 ;;		On entry : 0/0
  3047 ;;		On exit  : 0/0
  3048 ;;		Unchanged: 0/0
  3049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3050 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3051 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3052 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3053 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3054 ;;Total ram usage:        8 bytes
  3055 ;; Hardware stack levels used:    1
  3056 ;; Hardware stack levels required when called:    3
  3057 ;; This function calls:
  3058 ;;		Nothing
  3059 ;; This function is called by:
  3060 ;;		_stopOperation
  3061 ;; This function uses a non-reentrant model
  3062 ;;
  3063                           
  3064                           	psect	text7
  3065  000E86                     __ptext7:
  3066                           	opt stack 0
  3067  000E86                     ___awdiv:
  3068                           	opt stack 26
  3069                           
  3070                           ;incstack = 0
  3071  000E86  0E00               	movlw	0
  3072  000E88  6E1E               	movwf	___awdiv@sign,c
  3073  000E8A  AE1C               	btfss	___awdiv@divisor+1,7,c
  3074  000E8C  D006               	goto	l2297
  3075  000E8E  6C1B               	negf	___awdiv@divisor,c
  3076  000E90  1E1C               	comf	___awdiv@divisor+1,f,c
  3077  000E92  B0D8               	btfsc	status,0,c
  3078  000E94  2A1C               	incf	___awdiv@divisor+1,f,c
  3079  000E96  0E01               	movlw	1
  3080  000E98  6E1E               	movwf	___awdiv@sign,c
  3081  000E9A                     l2297:
  3082  000E9A  AE1A               	btfss	___awdiv@dividend+1,7,c
  3083  000E9C  D006               	goto	l2303
  3084  000E9E  6C19               	negf	___awdiv@dividend,c
  3085  000EA0  1E1A               	comf	___awdiv@dividend+1,f,c
  3086  000EA2  B0D8               	btfsc	status,0,c
  3087  000EA4  2A1A               	incf	___awdiv@dividend+1,f,c
  3088  000EA6  0E01               	movlw	1
  3089  000EA8  1A1E               	xorwf	___awdiv@sign,f,c
  3090  000EAA                     l2303:
  3091  000EAA  0E00               	movlw	0
  3092  000EAC  6E20               	movwf	___awdiv@quotient+1,c
  3093  000EAE  0E00               	movlw	0
  3094  000EB0  6E1F               	movwf	___awdiv@quotient,c
  3095  000EB2  501B               	movf	___awdiv@divisor,w,c
  3096  000EB4  101C               	iorwf	___awdiv@divisor+1,w,c
  3097  000EB6  B4D8               	btfsc	status,2,c
  3098  000EB8  D01C               	goto	l2325
  3099  000EBA  0E01               	movlw	1
  3100  000EBC  6E1D               	movwf	___awdiv@counter,c
  3101  000EBE  D004               	goto	l2311
  3102  000EC0                     l2309:
  3103  000EC0  90D8               	bcf	status,0,c
  3104  000EC2  361B               	rlcf	___awdiv@divisor,f,c
  3105  000EC4  361C               	rlcf	___awdiv@divisor+1,f,c
  3106  000EC6  2A1D               	incf	___awdiv@counter,f,c
  3107  000EC8                     l2311:
  3108  000EC8  AE1C               	btfss	___awdiv@divisor+1,7,c
  3109  000ECA  D7FA               	goto	l2309
  3110  000ECC                     l2313:
  3111  000ECC  90D8               	bcf	status,0,c
  3112  000ECE  361F               	rlcf	___awdiv@quotient,f,c
  3113  000ED0  3620               	rlcf	___awdiv@quotient+1,f,c
  3114  000ED2  501B               	movf	___awdiv@divisor,w,c
  3115  000ED4  5C19               	subwf	___awdiv@dividend,w,c
  3116  000ED6  501C               	movf	___awdiv@divisor+1,w,c
  3117  000ED8  581A               	subwfb	___awdiv@dividend+1,w,c
  3118  000EDA  A0D8               	btfss	status,0,c
  3119  000EDC  D005               	goto	l2321
  3120  000EDE  501B               	movf	___awdiv@divisor,w,c
  3121  000EE0  5E19               	subwf	___awdiv@dividend,f,c
  3122  000EE2  501C               	movf	___awdiv@divisor+1,w,c
  3123  000EE4  5A1A               	subwfb	___awdiv@dividend+1,f,c
  3124  000EE6  801F               	bsf	___awdiv@quotient,0,c
  3125  000EE8                     l2321:
  3126  000EE8  90D8               	bcf	status,0,c
  3127  000EEA  321C               	rrcf	___awdiv@divisor+1,f,c
  3128  000EEC  321B               	rrcf	___awdiv@divisor,f,c
  3129  000EEE  2E1D               	decfsz	___awdiv@counter,f,c
  3130  000EF0  D7ED               	goto	l2313
  3131  000EF2                     l2325:
  3132  000EF2  501E               	movf	___awdiv@sign,w,c
  3133  000EF4  B4D8               	btfsc	status,2,c
  3134  000EF6  D004               	goto	l2329
  3135  000EF8  6C1F               	negf	___awdiv@quotient,c
  3136  000EFA  1E20               	comf	___awdiv@quotient+1,f,c
  3137  000EFC  B0D8               	btfsc	status,0,c
  3138  000EFE  2A20               	incf	___awdiv@quotient+1,f,c
  3139  000F00                     l2329:
  3140  000F00  C01F  F019         	movff	___awdiv@quotient,?___awdiv
  3141  000F04  C020  F01A         	movff	___awdiv@quotient+1,?___awdiv+1
  3142  000F08  0012               	return	
  3143  000F0A                     __end_of___awdiv:
  3144                           	opt stack 0
  3145                           tblptru	equ	0xFF8
  3146                           tblptrh	equ	0xFF7
  3147                           tblptrl	equ	0xFF6
  3148                           tablat	equ	0xFF5
  3149                           prodh	equ	0xFF4
  3150                           prodl	equ	0xFF3
  3151                           intcon	equ	0xFF2
  3152                           intcon3	equ	0xFF0
  3153                           postinc0	equ	0xFEE
  3154                           wreg	equ	0xFE8
  3155                           indf2	equ	0xFDF
  3156                           fsr2h	equ	0xFDA
  3157                           fsr2l	equ	0xFD9
  3158                           status	equ	0xFD8
  3159                           
  3160 ;; *************** function _printf *****************
  3161 ;; Defined at:
  3162 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  3163 ;; Parameters:    Size  Location     Type
  3164 ;;  f               2   36[COMRAM] PTR const unsigned char 
  3165 ;;		 -> STR_23(17), STR_22(17), STR_21(23), STR_20(23), 
  3166 ;;		 -> STR_19(21), STR_18(17), STR_17(21), STR_16(17), 
  3167 ;;		 -> STR_15(21), STR_14(17), STR_13(19), STR_12(17), 
  3168 ;;		 -> STR_11(19), STR_10(17), STR_9(25), STR_8(17), 
  3169 ;;		 -> STR_7(17), STR_6(17), STR_5(18), STR_4(17), 
  3170 ;;		 -> STR_3(17), STR_2(17), STR_1(17), 
  3171 ;; Auto vars:     Size  Location     Type
  3172 ;;  idx             1   48[COMRAM] unsigned char 
  3173 ;;  tmpval          4    0        struct .
  3174 ;;  cp              3    0        PTR const unsigned char 
  3175 ;;  width           2   55[COMRAM] int 
  3176 ;;  val             2   52[COMRAM] unsigned int 
  3177 ;;  ap              2   49[COMRAM] PTR void [1]
  3178 ;;		 -> ?_printf(2), 
  3179 ;;  len             2    0        unsigned int 
  3180 ;;  c               1   57[COMRAM] char 
  3181 ;;  flag            1   54[COMRAM] unsigned char 
  3182 ;;  prec            1   51[COMRAM] char 
  3183 ;; Return value:  Size  Location     Type
  3184 ;;                  2   36[COMRAM] int 
  3185 ;; Registers used:
  3186 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3187 ;; Tracked objects:
  3188 ;;		On entry : 0/0
  3189 ;;		On exit  : 0/0
  3190 ;;		Unchanged: 0/0
  3191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3192 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3193 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3194 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3195 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3196 ;;Total ram usage:       22 bytes
  3197 ;; Hardware stack levels used:    1
  3198 ;; Hardware stack levels required when called:    5
  3199 ;; This function calls:
  3200 ;;		___lwdiv
  3201 ;;		___lwmod
  3202 ;;		___wmul
  3203 ;;		_isdigit
  3204 ;;		_putch
  3205 ;; This function is called by:
  3206 ;;		_main
  3207 ;; This function uses a non-reentrant model
  3208 ;;
  3209                           
  3210                           	psect	text8
  3211  00050C                     __ptext8:
  3212                           	opt stack 0
  3213  00050C                     _printf:
  3214                           	opt stack 25
  3215                           
  3216                           ;doprnt.c: 466: va_list ap;
  3217                           ;doprnt.c: 499: signed char c;
  3218                           ;doprnt.c: 501: int width;
  3219                           ;doprnt.c: 506: signed char prec;
  3220                           ;doprnt.c: 508: unsigned char flag;
  3221                           ;doprnt.c: 523: union {
  3222                           ;doprnt.c: 524: unsigned long vd;
  3223                           ;doprnt.c: 525: double integ;
  3224                           ;doprnt.c: 526: } tmpval;
  3225                           ;doprnt.c: 528: unsigned int val;
  3226                           ;doprnt.c: 529: unsigned len;
  3227                           ;doprnt.c: 530: const char * cp;
  3228                           ;doprnt.c: 533: *ap = __va_start();
  3229                           
  3230                           ;incstack = 0
  3231  00050C  0E27               	movlw	low (?_printf+2)
  3232  00050E  6E32               	movwf	printf@ap,c
  3233  000510  0E00               	movlw	high (?_printf+2)
  3234  000512  6E33               	movwf	printf@ap+1,c
  3235                           
  3236                           ;doprnt.c: 536: while(c = *f++) {
  3237  000514  D174               	goto	l2649
  3238  000516                     l2523:
  3239                           
  3240                           ;doprnt.c: 538: if(c != '%')
  3241  000516  0E25               	movlw	37
  3242  000518  183A               	xorwf	printf@c,w,c
  3243  00051A  B4D8               	btfsc	status,2,c
  3244  00051C  D004               	goto	l2527
  3245                           
  3246                           ;doprnt.c: 540: {
  3247                           ;doprnt.c: 541: (putch(c) );
  3248  00051E  503A               	movf	printf@c,w,c
  3249  000520  ECC6  F009         	call	_putch
  3250                           
  3251                           ;doprnt.c: 542: continue;
  3252  000524  D16C               	goto	l2649
  3253  000526                     l2527:
  3254                           
  3255                           ;doprnt.c: 543: }
  3256                           ;doprnt.c: 546: width = 0;
  3257  000526  0E00               	movlw	0
  3258  000528  6E39               	movwf	printf@width+1,c
  3259  00052A  0E00               	movlw	0
  3260  00052C  6E38               	movwf	printf@width,c
  3261                           
  3262                           ;doprnt.c: 548: flag = 0;
  3263  00052E  0E00               	movlw	0
  3264  000530  6E37               	movwf	printf@flag,c
  3265                           
  3266                           ;doprnt.c: 551: switch(*f) {
  3267                           
  3268                           ;doprnt.c: 550: for(;;) {
  3269  000532  D003               	goto	l2533
  3270  000534                     l2529:
  3271                           
  3272                           ;doprnt.c: 580: flag |= 0x04;
  3273  000534  8437               	bsf	printf@flag,2,c
  3274                           
  3275                           ;doprnt.c: 581: f++;
  3276  000536  4A25               	infsnz	printf@f,f,c
  3277  000538  2A26               	incf	printf@f+1,f,c
  3278  00053A                     l2533:
  3279  00053A  C025  FFF6         	movff	printf@f,tblptrl
  3280  00053E  C026  FFF7         	movff	printf@f+1,tblptrh
  3281  000542                     	if	0	;tblptru may be non-zero
  3282  000542                     	endif
  3283  000542                     	if	0	;tblptru may be non-zero
  3284  000542                     	endif
  3285  000542  0008               	tblrd		*
  3286  000544  50F5               	movf	tablat,w,c
  3287                           
  3288                           ; Switch size 1, requested type "space"
  3289                           ; Number of cases is 1, Range of values is 48 to 48
  3290                           ; switch strategies available:
  3291                           ; Name         Instructions Cycles
  3292                           ; simple_byte            4     3 (average)
  3293                           ;	Chosen strategy is simple_byte
  3294  000546  0A30               	xorlw	48	; case 48
  3295  000548  B4D8               	btfsc	status,2,c
  3296  00054A  D7F4               	goto	l2529
  3297                           
  3298                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  3299                           
  3300                           ;doprnt.c: 586: }
  3301                           
  3302                           ;doprnt.c: 585: break;
  3303  00054C  C025  FFF6         	movff	printf@f,tblptrl
  3304  000550  C026  FFF7         	movff	printf@f+1,tblptrh
  3305  000554                     	if	0	;tblptru may be non-zero
  3306  000554                     	endif
  3307  000554                     	if	0	;tblptru may be non-zero
  3308  000554                     	endif
  3309  000554  0008               	tblrd		*
  3310  000556  50F5               	movf	tablat,w,c
  3311  000558  ECA4  F009         	call	_isdigit
  3312  00055C  A0D8               	btfss	status,0,c
  3313  00055E  D035               	goto	l2551
  3314                           
  3315                           ;doprnt.c: 598: width = 0;
  3316  000560  0E00               	movlw	0
  3317  000562  6E39               	movwf	printf@width+1,c
  3318  000564  0E00               	movlw	0
  3319  000566  6E38               	movwf	printf@width,c
  3320  000568                     l2539:
  3321                           
  3322                           ;doprnt.c: 600: width *= 10;
  3323  000568  C038  F019         	movff	printf@width,___wmul@multiplier
  3324  00056C  C039  F01A         	movff	printf@width+1,___wmul@multiplier+1
  3325  000570  0E00               	movlw	0
  3326  000572  6E1C               	movwf	___wmul@multiplicand+1,c
  3327  000574  0E0A               	movlw	10
  3328  000576  6E1B               	movwf	___wmul@multiplicand,c
  3329  000578  EC7E  F009         	call	___wmul	;wreg free
  3330  00057C  C019  F038         	movff	?___wmul,printf@width
  3331  000580  C01A  F039         	movff	?___wmul+1,printf@width+1
  3332                           
  3333                           ;doprnt.c: 601: width += *f++ - '0';
  3334  000584  0ED0               	movlw	208
  3335  000586  6E2D               	movwf	??_printf& (0+255),c
  3336  000588  0EFF               	movlw	255
  3337  00058A  6E2E               	movwf	(??_printf+1)& (0+255),c
  3338  00058C  C025  FFF6         	movff	printf@f,tblptrl
  3339  000590  C026  FFF7         	movff	printf@f+1,tblptrh
  3340  000594                     	if	0	;tblptru may be non-zero
  3341  000594                     	endif
  3342  000594                     	if	0	;tblptru may be non-zero
  3343  000594                     	endif
  3344  000594  0008               	tblrd		*
  3345  000596  50F5               	movf	tablat,w,c
  3346  000598  6E2F               	movwf	(??_printf+2)& (0+255),c
  3347  00059A  6A30               	clrf	(??_printf+3)& (0+255),c
  3348  00059C  502D               	movf	??_printf,w,c
  3349  00059E  262F               	addwf	??_printf+2,f,c
  3350  0005A0  502E               	movf	??_printf+1,w,c
  3351  0005A2  2230               	addwfc	??_printf+3,f,c
  3352  0005A4  502F               	movf	??_printf+2,w,c
  3353  0005A6  2638               	addwf	printf@width,f,c
  3354  0005A8  5030               	movf	??_printf+3,w,c
  3355  0005AA  2239               	addwfc	printf@width+1,f,c
  3356  0005AC  4A25               	infsnz	printf@f,f,c
  3357  0005AE  2A26               	incf	printf@f+1,f,c
  3358                           
  3359                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  3360  0005B0  C025  FFF6         	movff	printf@f,tblptrl
  3361  0005B4  C026  FFF7         	movff	printf@f+1,tblptrh
  3362  0005B8                     	if	0	;tblptru may be non-zero
  3363  0005B8                     	endif
  3364  0005B8                     	if	0	;tblptru may be non-zero
  3365  0005B8                     	endif
  3366  0005B8  0008               	tblrd		*
  3367  0005BA  50F5               	movf	tablat,w,c
  3368  0005BC  ECA4  F009         	call	_isdigit
  3369  0005C0  A0D8               	btfss	status,0,c
  3370  0005C2  D003               	goto	l2551
  3371  0005C4  D7D1               	goto	l2539
  3372  0005C6                     l2547:
  3373                           
  3374                           ;doprnt.c: 721: flag |= 0x80;
  3375  0005C6  8E37               	bsf	printf@flag,7,c
  3376                           
  3377                           ;doprnt.c: 723: break;
  3378  0005C8  D017               	goto	l435
  3379  0005CA                     l2551:
  3380  0005CA  C025  FFF6         	movff	printf@f,tblptrl
  3381  0005CE  C026  FFF7         	movff	printf@f+1,tblptrh
  3382  0005D2  4A25               	infsnz	printf@f,f,c
  3383  0005D4  2A26               	incf	printf@f+1,f,c
  3384  0005D6                     	if	0	;tblptru may be non-zero
  3385  0005D6                     	endif
  3386  0005D6                     	if	0	;tblptru may be non-zero
  3387  0005D6                     	endif
  3388  0005D6  0008               	tblrd		*
  3389  0005D8  CFF5 F03A          	movff	tablat,printf@c
  3390  0005DC  503A               	movf	printf@c,w,c
  3391                           
  3392                           ; Switch size 1, requested type "space"
  3393                           ; Number of cases is 4, Range of values is 0 to 120
  3394                           ; switch strategies available:
  3395                           ; Name         Instructions Cycles
  3396                           ; simple_byte           13     7 (average)
  3397                           ;	Chosen strategy is simple_byte
  3398  0005DE  0A00               	xorlw	0	; case 0
  3399  0005E0  B4D8               	btfsc	status,2,c
  3400  0005E2  0012               	return	
  3401  0005E4  0A64               	xorlw	100	; case 100
  3402  0005E6  B4D8               	btfsc	status,2,c
  3403  0005E8  D007               	goto	l435
  3404  0005EA  0A0D               	xorlw	13	; case 105
  3405  0005EC  B4D8               	btfsc	status,2,c
  3406  0005EE  D004               	goto	l435
  3407  0005F0  0A11               	xorlw	17	; case 120
  3408  0005F2  B4D8               	btfsc	status,2,c
  3409  0005F4  D7E8               	goto	l2547
  3410  0005F6  D103               	goto	l2649
  3411  0005F8                     l435:
  3412                           
  3413                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  3414  0005F8  BE37               	btfsc	printf@flag,7,c
  3415  0005FA  D015               	goto	l2563
  3416                           
  3417                           ;doprnt.c: 1253: {
  3418                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3419  0005FC  C032  FFD9         	movff	printf@ap,fsr2l
  3420  000600  C033  FFDA         	movff	printf@ap+1,fsr2h
  3421  000604  CFDE F035          	movff	postinc2,printf@val
  3422  000608  CFDD F036          	movff	postdec2,printf@val+1
  3423  00060C  0E02               	movlw	2
  3424  00060E  2632               	addwf	printf@ap,f,c
  3425  000610  0E00               	movlw	0
  3426  000612  2233               	addwfc	printf@ap+1,f,c
  3427                           
  3428                           ;doprnt.c: 1261: if((int)val < 0) {
  3429  000614  AE36               	btfss	printf@val+1,7,c
  3430  000616  D044               	goto	l2597
  3431                           
  3432                           ;doprnt.c: 1262: flag |= 0x03;
  3433  000618  0E03               	movlw	3
  3434  00061A  1237               	iorwf	printf@flag,f,c
  3435                           
  3436                           ;doprnt.c: 1263: val = -val;
  3437  00061C  6C35               	negf	printf@val,c
  3438  00061E  1E36               	comf	printf@val+1,f,c
  3439  000620  B0D8               	btfsc	status,0,c
  3440  000622  2A36               	incf	printf@val+1,f,c
  3441                           
  3442                           ;doprnt.c: 1264: }
  3443                           ;doprnt.c: 1266: }
  3444  000624  D03D               	goto	l2597
  3445  000626                     l2563:
  3446                           
  3447                           ;doprnt.c: 1268: else
  3448                           ;doprnt.c: 1273: {
  3449                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3450  000626  C032  FFD9         	movff	printf@ap,fsr2l
  3451  00062A  C033  FFDA         	movff	printf@ap+1,fsr2h
  3452  00062E  CFDE F035          	movff	postinc2,printf@val
  3453  000632  CFDD F036          	movff	postdec2,printf@val+1
  3454  000636  0E02               	movlw	2
  3455  000638  2632               	addwf	printf@ap,f,c
  3456  00063A  0E00               	movlw	0
  3457  00063C  2233               	addwfc	printf@ap+1,f,c
  3458                           
  3459                           ;doprnt.c: 1287: }
  3460                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  3461  00063E  D030               	goto	l2597
  3462  000640                     l2567:
  3463                           
  3464                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3465  000640  0E01               	movlw	1
  3466  000642  6E3A               	movwf	printf@c,c
  3467  000644                     l2569:
  3468  000644  0E05               	movlw	5
  3469  000646  183A               	xorwf	printf@c,w,c
  3470  000648  B4D8               	btfsc	status,2,c
  3471  00064A  D032               	goto	l2599
  3472                           
  3473                           ;doprnt.c: 1306: if(val < dpowers[c])
  3474  00064C  503A               	movf	printf@c,w,c
  3475  00064E  0D02               	mullw	2
  3476  000650  0E6C               	movlw	low _dpowers
  3477  000652  24F3               	addwf	prodl,w,c
  3478  000654  6EF6               	movwf	tblptrl,c
  3479  000656  0EFE               	movlw	high _dpowers
  3480  000658  20F4               	addwfc	prodh,w,c
  3481  00065A  6EF7               	movwf	tblptrh,c
  3482  00065C                     	if	0	;There are less than 3 active tblptr bytes
  3483  00065C                     	endif
  3484  00065C  0009               	tblrd		*+
  3485  00065E  50F5               	movf	tablat,w,c
  3486  000660  5C35               	subwf	printf@val,w,c
  3487  000662  0009               	tblrd		*+
  3488  000664  50F5               	movf	tablat,w,c
  3489  000666  5836               	subwfb	printf@val+1,w,c
  3490  000668  A0D8               	btfss	status,0,c
  3491  00066A  D022               	goto	l2599
  3492                           
  3493                           ;doprnt.c: 1307: break;
  3494  00066C  2A3A               	incf	printf@c,f,c
  3495  00066E  D7EA               	goto	l2569
  3496  000670                     l2581:
  3497                           
  3498                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  3499  000670  0E01               	movlw	1
  3500  000672  6E3A               	movwf	printf@c,c
  3501  000674                     l2583:
  3502  000674  0E04               	movlw	4
  3503  000676  183A               	xorwf	printf@c,w,c
  3504  000678  B4D8               	btfsc	status,2,c
  3505  00067A  D01A               	goto	l2599
  3506                           
  3507                           ;doprnt.c: 1317: if(val < hexpowers[c])
  3508  00067C  503A               	movf	printf@c,w,c
  3509  00067E  0D02               	mullw	2
  3510  000680  0E76               	movlw	low _hexpowers
  3511  000682  24F3               	addwf	prodl,w,c
  3512  000684  6EF6               	movwf	tblptrl,c
  3513  000686  0EFE               	movlw	high _hexpowers
  3514  000688  20F4               	addwfc	prodh,w,c
  3515  00068A  6EF7               	movwf	tblptrh,c
  3516  00068C                     	if	0	;There are less than 3 active tblptr bytes
  3517  00068C                     	endif
  3518  00068C  0009               	tblrd		*+
  3519  00068E  50F5               	movf	tablat,w,c
  3520  000690  5C35               	subwf	printf@val,w,c
  3521  000692  0009               	tblrd		*+
  3522  000694  50F5               	movf	tablat,w,c
  3523  000696  5836               	subwfb	printf@val+1,w,c
  3524  000698  A0D8               	btfss	status,0,c
  3525  00069A  D00A               	goto	l2599
  3526                           
  3527                           ;doprnt.c: 1318: break;
  3528  00069C  2A3A               	incf	printf@c,f,c
  3529  00069E  D7EA               	goto	l2583
  3530  0006A0                     l2597:
  3531  0006A0  5037               	movf	printf@flag,w,c
  3532  0006A2  0B80               	andlw	128
  3533                           
  3534                           ; Switch size 1, requested type "space"
  3535                           ; Number of cases is 2, Range of values is 0 to 128
  3536                           ; switch strategies available:
  3537                           ; Name         Instructions Cycles
  3538                           ; simple_byte            7     4 (average)
  3539                           ;	Chosen strategy is simple_byte
  3540  0006A4  0A00               	xorlw	0	; case 0
  3541  0006A6  B4D8               	btfsc	status,2,c
  3542  0006A8  D7CB               	goto	l2567
  3543  0006AA  0A80               	xorlw	128	; case 128
  3544  0006AC  B4D8               	btfsc	status,2,c
  3545  0006AE  D7E0               	goto	l2581
  3546  0006B0                     l2599:
  3547                           
  3548                           ;doprnt.c: 1345: if(width && flag & 0x03)
  3549  0006B0  5038               	movf	printf@width,w,c
  3550  0006B2  1039               	iorwf	printf@width+1,w,c
  3551  0006B4  B4D8               	btfsc	status,2,c
  3552  0006B6  D009               	goto	l2605
  3553  0006B8  C037  F02D         	movff	printf@flag,??_printf
  3554  0006BC  0E03               	movlw	3
  3555  0006BE  162D               	andwf	??_printf,f,c
  3556  0006C0  B4D8               	btfsc	status,2,c
  3557  0006C2  D003               	goto	l2605
  3558                           
  3559                           ;doprnt.c: 1346: width--;
  3560  0006C4  0638               	decf	printf@width,f,c
  3561  0006C6  A0D8               	btfss	status,0,c
  3562  0006C8  0639               	decf	printf@width+1,f,c
  3563  0006CA                     l2605:
  3564                           
  3565                           ;doprnt.c: 1381: if(width > c)
  3566  0006CA  0E80               	movlw	128
  3567  0006CC  BE3A               	btfsc	printf@c,7,c
  3568  0006CE  0E7F               	movlw	127
  3569  0006D0  6E2D               	movwf	??_printf& (0+255),c
  3570  0006D2  5038               	movf	printf@width,w,c
  3571  0006D4  5C3A               	subwf	printf@c,w,c
  3572  0006D6  5039               	movf	printf@width+1,w,c
  3573  0006D8  0A80               	xorlw	128
  3574  0006DA  582D               	subwfb	??_printf& (0+255),w,c
  3575  0006DC  B0D8               	btfsc	status,0,c
  3576  0006DE  D007               	goto	l2609
  3577                           
  3578                           ;doprnt.c: 1382: width -= c;
  3579  0006E0  503A               	movf	printf@c,w,c
  3580  0006E2  5E38               	subwf	printf@width,f,c
  3581  0006E4  0E00               	movlw	0
  3582  0006E6  BE3A               	btfsc	printf@c,7,c
  3583  0006E8  0EFF               	movlw	255
  3584  0006EA  5A39               	subwfb	printf@width+1,f,c
  3585  0006EC  D004               	goto	l2611
  3586  0006EE                     l2609:
  3587                           
  3588                           ;doprnt.c: 1383: else
  3589                           ;doprnt.c: 1384: width = 0;
  3590  0006EE  0E00               	movlw	0
  3591  0006F0  6E39               	movwf	printf@width+1,c
  3592  0006F2  0E00               	movlw	0
  3593  0006F4  6E38               	movwf	printf@width,c
  3594  0006F6                     l2611:
  3595                           
  3596                           ;doprnt.c: 1387: if(flag & 0x04) {
  3597  0006F6  A437               	btfss	printf@flag,2,c
  3598  0006F8  D014               	goto	l2623
  3599                           
  3600                           ;doprnt.c: 1392: if(flag & 0x03)
  3601  0006FA  C037  F02D         	movff	printf@flag,??_printf
  3602  0006FE  0E03               	movlw	3
  3603  000700  162D               	andwf	??_printf,f,c
  3604  000702  B4D8               	btfsc	status,2,c
  3605  000704  D003               	goto	l2617
  3606                           
  3607                           ;doprnt.c: 1393: (putch('-') );
  3608  000706  0E2D               	movlw	45
  3609  000708  ECC6  F009         	call	_putch
  3610  00070C                     l2617:
  3611                           
  3612                           ;doprnt.c: 1415: if(width)
  3613  00070C  5038               	movf	printf@width,w,c
  3614  00070E  1039               	iorwf	printf@width+1,w,c
  3615  000710  B4D8               	btfsc	status,2,c
  3616  000712  D01E               	goto	l2633
  3617                           
  3618                           ;doprnt.c: 1417: (putch('0') );
  3619                           
  3620                           ;doprnt.c: 1416: do
  3621  000714  0E30               	movlw	48
  3622  000716  ECC6  F009         	call	_putch
  3623                           
  3624                           ;doprnt.c: 1418: while(--width);
  3625  00071A  0638               	decf	printf@width,f,c
  3626  00071C  A0D8               	btfss	status,0,c
  3627  00071E  0639               	decf	printf@width+1,f,c
  3628  000720  D7F5               	goto	l2617
  3629  000722                     l2623:
  3630                           
  3631                           ;doprnt.c: 1422: {
  3632                           ;doprnt.c: 1424: if(width
  3633                           ;doprnt.c: 1428: )
  3634  000722  5038               	movf	printf@width,w,c
  3635  000724  1039               	iorwf	printf@width+1,w,c
  3636  000726  B4D8               	btfsc	status,2,c
  3637  000728  D00A               	goto	l2629
  3638  00072A                     l2625:
  3639                           
  3640                           ;doprnt.c: 1430: (putch(' ') );
  3641  00072A  0E20               	movlw	32
  3642  00072C  ECC6  F009         	call	_putch
  3643                           
  3644                           ;doprnt.c: 1431: while(--width);
  3645  000730  0638               	decf	printf@width,f,c
  3646  000732  A0D8               	btfss	status,0,c
  3647  000734  0639               	decf	printf@width+1,f,c
  3648  000736  5038               	movf	printf@width,w,c
  3649  000738  1039               	iorwf	printf@width+1,w,c
  3650  00073A  A4D8               	btfss	status,2,c
  3651  00073C  D7F6               	goto	l2625
  3652  00073E                     l2629:
  3653                           
  3654                           ;doprnt.c: 1438: if(flag & 0x03)
  3655  00073E  C037  F02D         	movff	printf@flag,??_printf
  3656  000742  0E03               	movlw	3
  3657  000744  162D               	andwf	??_printf,f,c
  3658  000746  B4D8               	btfsc	status,2,c
  3659  000748  D003               	goto	l2633
  3660                           
  3661                           ;doprnt.c: 1439: (putch('-') );
  3662  00074A  0E2D               	movlw	45
  3663  00074C  ECC6  F009         	call	_putch
  3664  000750                     l2633:
  3665                           
  3666                           ;doprnt.c: 1469: }
  3667                           ;doprnt.c: 1472: prec = c;
  3668  000750  C03A  F034         	movff	printf@c,printf@prec
  3669                           
  3670                           ;doprnt.c: 1474: while(prec--) {
  3671  000754  D050               	goto	l2647
  3672  000756                     l2635:
  3673                           
  3674                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3675  000756  5034               	movf	printf@prec,w,c
  3676  000758  0D02               	mullw	2
  3677  00075A  0E6C               	movlw	low _dpowers
  3678  00075C  24F3               	addwf	prodl,w,c
  3679  00075E  6EF6               	movwf	tblptrl,c
  3680  000760  0EFE               	movlw	high _dpowers
  3681  000762  20F4               	addwfc	prodh,w,c
  3682  000764  6EF7               	movwf	tblptrh,c
  3683  000766                     	if	0	;There are less than 3 active tblptr bytes
  3684  000766                     	endif
  3685  000766  0009               	tblrd		*+
  3686  000768  CFF5 F01B          	movff	tablat,___lwdiv@divisor
  3687  00076C  000A               	tblrd		*-
  3688  00076E  CFF5 F01C          	movff	tablat,___lwdiv@divisor+1
  3689  000772  C035  F019         	movff	printf@val,___lwdiv@dividend
  3690  000776  C036  F01A         	movff	printf@val+1,___lwdiv@dividend+1
  3691  00077A  ECA5  F008         	call	___lwdiv	;wreg free
  3692  00077E  C019  F020         	movff	?___lwdiv,___lwmod@dividend
  3693  000782  C01A  F021         	movff	?___lwdiv+1,___lwmod@dividend+1
  3694  000786  0E00               	movlw	0
  3695  000788  6E23               	movwf	___lwmod@divisor+1,c
  3696  00078A  0E0A               	movlw	10
  3697  00078C  6E22               	movwf	___lwmod@divisor,c
  3698  00078E  EC18  F009         	call	___lwmod	;wreg free
  3699  000792  5020               	movf	?___lwmod,w,c
  3700  000794  0F30               	addlw	48
  3701  000796  6E3A               	movwf	printf@c,c
  3702                           
  3703                           ;doprnt.c: 1491: break;
  3704  000798  D02B               	goto	l2645
  3705  00079A                     l2637:
  3706                           
  3707                           ;doprnt.c: 1499: {
  3708                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  3709  00079A  C035  F019         	movff	printf@val,___lwdiv@dividend
  3710  00079E  C036  F01A         	movff	printf@val+1,___lwdiv@dividend+1
  3711  0007A2  5034               	movf	printf@prec,w,c
  3712  0007A4  0D02               	mullw	2
  3713  0007A6  0E76               	movlw	low _hexpowers
  3714  0007A8  24F3               	addwf	prodl,w,c
  3715  0007AA  6EF6               	movwf	tblptrl,c
  3716  0007AC  0EFE               	movlw	high _hexpowers
  3717  0007AE  20F4               	addwfc	prodh,w,c
  3718  0007B0  6EF7               	movwf	tblptrh,c
  3719  0007B2                     	if	0	;There are less than 3 active tblptr bytes
  3720  0007B2                     	endif
  3721  0007B2  0009               	tblrd		*+
  3722  0007B4  CFF5 F01B          	movff	tablat,___lwdiv@divisor
  3723  0007B8  000A               	tblrd		*-
  3724  0007BA  CFF5 F01C          	movff	tablat,___lwdiv@divisor+1
  3725  0007BE  ECA5  F008         	call	___lwdiv	;wreg free
  3726  0007C2  5019               	movf	?___lwdiv,w,c
  3727  0007C4  0B0F               	andlw	15
  3728  0007C6  6E31               	movwf	printf@idx,c
  3729                           
  3730                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  3731  0007C8  5031               	movf	printf@idx,w,c
  3732  0007CA  0D01               	mullw	1
  3733  0007CC  0EFF               	movlw	low STR_24
  3734  0007CE  24F3               	addwf	prodl,w,c
  3735  0007D0  6EF6               	movwf	tblptrl,c
  3736  0007D2  0EFE               	movlw	high STR_24
  3737  0007D4  20F4               	addwfc	prodh,w,c
  3738  0007D6  6EF7               	movwf	tblptrh,c
  3739  0007D8                     	if	0	;There are less than 3 active tblptr bytes
  3740  0007D8                     	endif
  3741  0007D8  0008               	tblrd		*
  3742  0007DA  CFF5 F03A          	movff	tablat,printf@c
  3743                           
  3744                           ;doprnt.c: 1523: }
  3745                           
  3746                           ;doprnt.c: 1508: }
  3747                           ;doprnt.c: 1510: break;
  3748  0007DE  D008               	goto	l2645
  3749  0007E0                     l2643:
  3750  0007E0  5037               	movf	printf@flag,w,c
  3751  0007E2  0B80               	andlw	128
  3752                           
  3753                           ; Switch size 1, requested type "space"
  3754                           ; Number of cases is 2, Range of values is 0 to 128
  3755                           ; switch strategies available:
  3756                           ; Name         Instructions Cycles
  3757                           ; simple_byte            7     4 (average)
  3758                           ;	Chosen strategy is simple_byte
  3759  0007E4  0A00               	xorlw	0	; case 0
  3760  0007E6  B4D8               	btfsc	status,2,c
  3761  0007E8  D7B6               	goto	l2635
  3762  0007EA  0A80               	xorlw	128	; case 128
  3763  0007EC  B4D8               	btfsc	status,2,c
  3764  0007EE  D7D5               	goto	l2637
  3765  0007F0                     l2645:
  3766                           
  3767                           ;doprnt.c: 1524: (putch(c) );
  3768  0007F0  503A               	movf	printf@c,w,c
  3769  0007F2  ECC6  F009         	call	_putch
  3770  0007F6                     l2647:
  3771  0007F6  0634               	decf	printf@prec,f,c
  3772  0007F8  2834               	incf	printf@prec,w,c
  3773  0007FA  A4D8               	btfss	status,2,c
  3774  0007FC  D7F1               	goto	l2643
  3775  0007FE                     l2649:
  3776  0007FE  C025  FFF6         	movff	printf@f,tblptrl
  3777  000802  C026  FFF7         	movff	printf@f+1,tblptrh
  3778  000806  4A25               	infsnz	printf@f,f,c
  3779  000808  2A26               	incf	printf@f+1,f,c
  3780  00080A                     	if	0	;tblptru may be non-zero
  3781  00080A                     	endif
  3782  00080A                     	if	0	;tblptru may be non-zero
  3783  00080A                     	endif
  3784  00080A  0008               	tblrd		*
  3785  00080C  CFF5 F03A          	movff	tablat,printf@c
  3786  000810  503A               	movf	printf@c,w,c
  3787  000812  B4D8               	btfsc	status,2,c
  3788  000814  0012               	return	
  3789  000816  D67F               	goto	l2523
  3790  000818                     __end_of_printf:
  3791                           	opt stack 0
  3792                           tblptru	equ	0xFF8
  3793                           tblptrh	equ	0xFF7
  3794                           tblptrl	equ	0xFF6
  3795                           tablat	equ	0xFF5
  3796                           prodh	equ	0xFF4
  3797                           prodl	equ	0xFF3
  3798                           intcon	equ	0xFF2
  3799                           intcon3	equ	0xFF0
  3800                           postinc0	equ	0xFEE
  3801                           wreg	equ	0xFE8
  3802                           indf2	equ	0xFDF
  3803                           postinc2	equ	0xFDE
  3804                           postdec2	equ	0xFDD
  3805                           fsr2h	equ	0xFDA
  3806                           fsr2l	equ	0xFD9
  3807                           status	equ	0xFD8
  3808                           
  3809 ;; *************** function _putch *****************
  3810 ;; Defined at:
  3811 ;;		line 30 in file "../lcd.c"
  3812 ;; Parameters:    Size  Location     Type
  3813 ;;  data            1    wreg     unsigned char 
  3814 ;; Auto vars:     Size  Location     Type
  3815 ;;  data            1   26[COMRAM] unsigned char 
  3816 ;; Return value:  Size  Location     Type
  3817 ;;                  1    wreg      void 
  3818 ;; Registers used:
  3819 ;;		wreg, status,2, status,0, cstack
  3820 ;; Tracked objects:
  3821 ;;		On entry : 0/0
  3822 ;;		On exit  : 0/0
  3823 ;;		Unchanged: 0/0
  3824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3825 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3826 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3827 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3828 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3829 ;;Total ram usage:        1 bytes
  3830 ;; Hardware stack levels used:    1
  3831 ;; Hardware stack levels required when called:    4
  3832 ;; This function calls:
  3833 ;;		_lcdNibble
  3834 ;; This function is called by:
  3835 ;;		_printf
  3836 ;; This function uses a non-reentrant model
  3837 ;;
  3838                           
  3839                           	psect	text9
  3840  00138C                     __ptext9:
  3841                           	opt stack 0
  3842  00138C                     _putch:
  3843                           	opt stack 25
  3844                           
  3845                           ;incstack = 0
  3846                           ;putch@data stored from wreg
  3847  00138C  6E1B               	movwf	putch@data,c
  3848                           
  3849                           ;lcd.c: 31: LATDbits.LATD2 = 1;
  3850  00138E  848C               	bsf	3980,2,c	;volatile
  3851                           
  3852                           ;lcd.c: 32: lcdNibble(data);
  3853  001390  501B               	movf	putch@data,w,c
  3854  001392  ECCE  F008         	call	_lcdNibble
  3855  001396  0012               	return		;funcret
  3856  001398                     __end_of_putch:
  3857                           	opt stack 0
  3858                           tblptru	equ	0xFF8
  3859                           tblptrh	equ	0xFF7
  3860                           tblptrl	equ	0xFF6
  3861                           tablat	equ	0xFF5
  3862                           prodh	equ	0xFF4
  3863                           prodl	equ	0xFF3
  3864                           intcon	equ	0xFF2
  3865                           intcon3	equ	0xFF0
  3866                           postinc0	equ	0xFEE
  3867                           wreg	equ	0xFE8
  3868                           indf2	equ	0xFDF
  3869                           postinc2	equ	0xFDE
  3870                           postdec2	equ	0xFDD
  3871                           fsr2h	equ	0xFDA
  3872                           fsr2l	equ	0xFD9
  3873                           status	equ	0xFD8
  3874                           
  3875 ;; *************** function _isdigit *****************
  3876 ;; Defined at:
  3877 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  3878 ;; Parameters:    Size  Location     Type
  3879 ;;  c               1    wreg     unsigned char 
  3880 ;; Auto vars:     Size  Location     Type
  3881 ;;  c               1   26[COMRAM] unsigned char 
  3882 ;; Return value:  Size  Location     Type
  3883 ;;		None               void
  3884 ;; Registers used:
  3885 ;;		wreg, status,2, status,0
  3886 ;; Tracked objects:
  3887 ;;		On entry : 0/0
  3888 ;;		On exit  : 0/0
  3889 ;;		Unchanged: 0/0
  3890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3891 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3892 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3893 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3894 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3895 ;;Total ram usage:        3 bytes
  3896 ;; Hardware stack levels used:    1
  3897 ;; Hardware stack levels required when called:    3
  3898 ;; This function calls:
  3899 ;;		Nothing
  3900 ;; This function is called by:
  3901 ;;		_printf
  3902 ;; This function uses a non-reentrant model
  3903 ;;
  3904                           
  3905                           	psect	text10
  3906  001348                     __ptext10:
  3907                           	opt stack 0
  3908  001348                     _isdigit:
  3909                           	opt stack 26
  3910                           
  3911                           ;incstack = 0
  3912                           ;isdigit@c stored from wreg
  3913  001348  6E1B               	movwf	isdigit@c,c
  3914  00134A  0E00               	movlw	0
  3915  00134C  6E1A               	movwf	_isdigit$930,c
  3916  00134E  0E3A               	movlw	58
  3917  001350  601B               	cpfslt	isdigit@c,c
  3918  001352  D005               	goto	l2279
  3919  001354  0E2F               	movlw	47
  3920  001356  641B               	cpfsgt	isdigit@c,c
  3921  001358  D002               	goto	l2279
  3922  00135A  0E01               	movlw	1
  3923  00135C  6E1A               	movwf	_isdigit$930,c
  3924  00135E                     l2279:
  3925  00135E  C01A  F019         	movff	_isdigit$930,??_isdigit
  3926  001362  3019               	rrcf	??_isdigit,w,c
  3927  001364  0012               	return	
  3928  001366                     __end_of_isdigit:
  3929                           	opt stack 0
  3930                           tblptru	equ	0xFF8
  3931                           tblptrh	equ	0xFF7
  3932                           tblptrl	equ	0xFF6
  3933                           tablat	equ	0xFF5
  3934                           prodh	equ	0xFF4
  3935                           prodl	equ	0xFF3
  3936                           intcon	equ	0xFF2
  3937                           intcon3	equ	0xFF0
  3938                           postinc0	equ	0xFEE
  3939                           wreg	equ	0xFE8
  3940                           indf2	equ	0xFDF
  3941                           postinc2	equ	0xFDE
  3942                           postdec2	equ	0xFDD
  3943                           fsr2h	equ	0xFDA
  3944                           fsr2l	equ	0xFD9
  3945                           status	equ	0xFD8
  3946                           
  3947 ;; *************** function ___wmul *****************
  3948 ;; Defined at:
  3949 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  3950 ;; Parameters:    Size  Location     Type
  3951 ;;  multiplier      2   24[COMRAM] unsigned int 
  3952 ;;  multiplicand    2   26[COMRAM] unsigned int 
  3953 ;; Auto vars:     Size  Location     Type
  3954 ;;  product         2   28[COMRAM] unsigned int 
  3955 ;; Return value:  Size  Location     Type
  3956 ;;                  2   24[COMRAM] unsigned int 
  3957 ;; Registers used:
  3958 ;;		wreg, status,2, status,0, prodl, prodh
  3959 ;; Tracked objects:
  3960 ;;		On entry : 0/0
  3961 ;;		On exit  : 0/0
  3962 ;;		Unchanged: 0/0
  3963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3964 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3965 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3966 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3967 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3968 ;;Total ram usage:        6 bytes
  3969 ;; Hardware stack levels used:    1
  3970 ;; Hardware stack levels required when called:    3
  3971 ;; This function calls:
  3972 ;;		Nothing
  3973 ;; This function is called by:
  3974 ;;		_printf
  3975 ;; This function uses a non-reentrant model
  3976 ;;
  3977                           
  3978                           	psect	text11
  3979  0012FC                     __ptext11:
  3980                           	opt stack 0
  3981  0012FC                     ___wmul:
  3982                           	opt stack 26
  3983                           
  3984                           ;incstack = 0
  3985  0012FC  5019               	movf	___wmul@multiplier,w,c
  3986  0012FE  021B               	mulwf	___wmul@multiplicand,c
  3987  001300  CFF3 F01D          	movff	prodl,___wmul@product
  3988  001304  CFF4 F01E          	movff	prodh,___wmul@product+1
  3989  001308  5019               	movf	___wmul@multiplier,w,c
  3990  00130A  021C               	mulwf	___wmul@multiplicand+1,c
  3991  00130C  50F3               	movf	prodl,w,c
  3992  00130E  261E               	addwf	___wmul@product+1,f,c
  3993  001310  501A               	movf	___wmul@multiplier+1,w,c
  3994  001312  021B               	mulwf	___wmul@multiplicand,c
  3995  001314  50F3               	movf	prodl,w,c
  3996  001316  261E               	addwf	___wmul@product+1,f,c
  3997  001318  C01D  F019         	movff	___wmul@product,?___wmul
  3998  00131C  C01E  F01A         	movff	___wmul@product+1,?___wmul+1
  3999  001320  0012               	return	
  4000  001322                     __end_of___wmul:
  4001                           	opt stack 0
  4002                           tblptru	equ	0xFF8
  4003                           tblptrh	equ	0xFF7
  4004                           tblptrl	equ	0xFF6
  4005                           tablat	equ	0xFF5
  4006                           prodh	equ	0xFF4
  4007                           prodl	equ	0xFF3
  4008                           intcon	equ	0xFF2
  4009                           intcon3	equ	0xFF0
  4010                           postinc0	equ	0xFEE
  4011                           wreg	equ	0xFE8
  4012                           indf2	equ	0xFDF
  4013                           postinc2	equ	0xFDE
  4014                           postdec2	equ	0xFDD
  4015                           fsr2h	equ	0xFDA
  4016                           fsr2l	equ	0xFD9
  4017                           status	equ	0xFD8
  4018                           
  4019 ;; *************** function ___lwmod *****************
  4020 ;; Defined at:
  4021 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  4022 ;; Parameters:    Size  Location     Type
  4023 ;;  dividend        2   31[COMRAM] unsigned int 
  4024 ;;  divisor         2   33[COMRAM] unsigned int 
  4025 ;; Auto vars:     Size  Location     Type
  4026 ;;  counter         1   35[COMRAM] unsigned char 
  4027 ;; Return value:  Size  Location     Type
  4028 ;;                  2   31[COMRAM] unsigned int 
  4029 ;; Registers used:
  4030 ;;		wreg, status,2, status,0
  4031 ;; Tracked objects:
  4032 ;;		On entry : 0/0
  4033 ;;		On exit  : 0/0
  4034 ;;		Unchanged: 0/0
  4035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4036 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4037 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4038 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4039 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4040 ;;Total ram usage:        5 bytes
  4041 ;; Hardware stack levels used:    1
  4042 ;; Hardware stack levels required when called:    3
  4043 ;; This function calls:
  4044 ;;		Nothing
  4045 ;; This function is called by:
  4046 ;;		_printf
  4047 ;; This function uses a non-reentrant model
  4048 ;;
  4049                           
  4050                           	psect	text12
  4051  001230                     __ptext12:
  4052                           	opt stack 0
  4053  001230                     ___lwmod:
  4054                           	opt stack 26
  4055                           
  4056                           ;incstack = 0
  4057  001230  5022               	movf	___lwmod@divisor,w,c
  4058  001232  1023               	iorwf	___lwmod@divisor+1,w,c
  4059  001234  B4D8               	btfsc	status,2,c
  4060  001236  D018               	goto	l890
  4061  001238  0E01               	movlw	1
  4062  00123A  6E24               	movwf	___lwmod@counter,c
  4063  00123C  D004               	goto	l2419
  4064  00123E                     l2417:
  4065  00123E  90D8               	bcf	status,0,c
  4066  001240  3622               	rlcf	___lwmod@divisor,f,c
  4067  001242  3623               	rlcf	___lwmod@divisor+1,f,c
  4068  001244  2A24               	incf	___lwmod@counter,f,c
  4069  001246                     l2419:
  4070  001246  AE23               	btfss	___lwmod@divisor+1,7,c
  4071  001248  D7FA               	goto	l2417
  4072  00124A                     l2421:
  4073  00124A  5022               	movf	___lwmod@divisor,w,c
  4074  00124C  5C20               	subwf	___lwmod@dividend,w,c
  4075  00124E  5023               	movf	___lwmod@divisor+1,w,c
  4076  001250  5821               	subwfb	___lwmod@dividend+1,w,c
  4077  001252  A0D8               	btfss	status,0,c
  4078  001254  D004               	goto	l2425
  4079  001256  5022               	movf	___lwmod@divisor,w,c
  4080  001258  5E20               	subwf	___lwmod@dividend,f,c
  4081  00125A  5023               	movf	___lwmod@divisor+1,w,c
  4082  00125C  5A21               	subwfb	___lwmod@dividend+1,f,c
  4083  00125E                     l2425:
  4084  00125E  90D8               	bcf	status,0,c
  4085  001260  3223               	rrcf	___lwmod@divisor+1,f,c
  4086  001262  3222               	rrcf	___lwmod@divisor,f,c
  4087  001264  2E24               	decfsz	___lwmod@counter,f,c
  4088  001266  D7F1               	goto	l2421
  4089  001268                     l890:
  4090  001268  C020  F020         	movff	___lwmod@dividend,?___lwmod
  4091  00126C  C021  F021         	movff	___lwmod@dividend+1,?___lwmod+1
  4092  001270  0012               	return		;funcret
  4093  001272                     __end_of___lwmod:
  4094                           	opt stack 0
  4095                           tblptru	equ	0xFF8
  4096                           tblptrh	equ	0xFF7
  4097                           tblptrl	equ	0xFF6
  4098                           tablat	equ	0xFF5
  4099                           prodh	equ	0xFF4
  4100                           prodl	equ	0xFF3
  4101                           intcon	equ	0xFF2
  4102                           intcon3	equ	0xFF0
  4103                           postinc0	equ	0xFEE
  4104                           wreg	equ	0xFE8
  4105                           indf2	equ	0xFDF
  4106                           postinc2	equ	0xFDE
  4107                           postdec2	equ	0xFDD
  4108                           fsr2h	equ	0xFDA
  4109                           fsr2l	equ	0xFD9
  4110                           status	equ	0xFD8
  4111                           
  4112 ;; *************** function ___lwdiv *****************
  4113 ;; Defined at:
  4114 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  4115 ;; Parameters:    Size  Location     Type
  4116 ;;  dividend        2   24[COMRAM] unsigned int 
  4117 ;;  divisor         2   26[COMRAM] unsigned int 
  4118 ;; Auto vars:     Size  Location     Type
  4119 ;;  quotient        2   28[COMRAM] unsigned int 
  4120 ;;  counter         1   30[COMRAM] unsigned char 
  4121 ;; Return value:  Size  Location     Type
  4122 ;;                  2   24[COMRAM] unsigned int 
  4123 ;; Registers used:
  4124 ;;		wreg, status,2, status,0
  4125 ;; Tracked objects:
  4126 ;;		On entry : 0/0
  4127 ;;		On exit  : 0/0
  4128 ;;		Unchanged: 0/0
  4129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4130 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4131 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4132 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4133 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4134 ;;Total ram usage:        7 bytes
  4135 ;; Hardware stack levels used:    1
  4136 ;; Hardware stack levels required when called:    3
  4137 ;; This function calls:
  4138 ;;		Nothing
  4139 ;; This function is called by:
  4140 ;;		_printf
  4141 ;; This function uses a non-reentrant model
  4142 ;;
  4143                           
  4144                           	psect	text13
  4145  00114A                     __ptext13:
  4146                           	opt stack 0
  4147  00114A                     ___lwdiv:
  4148                           	opt stack 26
  4149                           
  4150                           ;incstack = 0
  4151  00114A  0E00               	movlw	0
  4152  00114C  6E1E               	movwf	___lwdiv@quotient+1,c
  4153  00114E  0E00               	movlw	0
  4154  001150  6E1D               	movwf	___lwdiv@quotient,c
  4155  001152  501B               	movf	___lwdiv@divisor,w,c
  4156  001154  101C               	iorwf	___lwdiv@divisor+1,w,c
  4157  001156  B4D8               	btfsc	status,2,c
  4158  001158  D01C               	goto	l880
  4159  00115A  0E01               	movlw	1
  4160  00115C  6E1F               	movwf	___lwdiv@counter,c
  4161  00115E  D004               	goto	l2399
  4162  001160                     l2397:
  4163  001160  90D8               	bcf	status,0,c
  4164  001162  361B               	rlcf	___lwdiv@divisor,f,c
  4165  001164  361C               	rlcf	___lwdiv@divisor+1,f,c
  4166  001166  2A1F               	incf	___lwdiv@counter,f,c
  4167  001168                     l2399:
  4168  001168  AE1C               	btfss	___lwdiv@divisor+1,7,c
  4169  00116A  D7FA               	goto	l2397
  4170  00116C                     l2401:
  4171  00116C  90D8               	bcf	status,0,c
  4172  00116E  361D               	rlcf	___lwdiv@quotient,f,c
  4173  001170  361E               	rlcf	___lwdiv@quotient+1,f,c
  4174  001172  501B               	movf	___lwdiv@divisor,w,c
  4175  001174  5C19               	subwf	___lwdiv@dividend,w,c
  4176  001176  501C               	movf	___lwdiv@divisor+1,w,c
  4177  001178  581A               	subwfb	___lwdiv@dividend+1,w,c
  4178  00117A  A0D8               	btfss	status,0,c
  4179  00117C  D005               	goto	l2409
  4180  00117E  501B               	movf	___lwdiv@divisor,w,c
  4181  001180  5E19               	subwf	___lwdiv@dividend,f,c
  4182  001182  501C               	movf	___lwdiv@divisor+1,w,c
  4183  001184  5A1A               	subwfb	___lwdiv@dividend+1,f,c
  4184  001186  801D               	bsf	___lwdiv@quotient,0,c
  4185  001188                     l2409:
  4186  001188  90D8               	bcf	status,0,c
  4187  00118A  321C               	rrcf	___lwdiv@divisor+1,f,c
  4188  00118C  321B               	rrcf	___lwdiv@divisor,f,c
  4189  00118E  2E1F               	decfsz	___lwdiv@counter,f,c
  4190  001190  D7ED               	goto	l2401
  4191  001192                     l880:
  4192  001192  C01D  F019         	movff	___lwdiv@quotient,?___lwdiv
  4193  001196  C01E  F01A         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4194  00119A  0012               	return		;funcret
  4195  00119C                     __end_of___lwdiv:
  4196                           	opt stack 0
  4197                           tblptru	equ	0xFF8
  4198                           tblptrh	equ	0xFF7
  4199                           tblptrl	equ	0xFF6
  4200                           tablat	equ	0xFF5
  4201                           prodh	equ	0xFF4
  4202                           prodl	equ	0xFF3
  4203                           intcon	equ	0xFF2
  4204                           intcon3	equ	0xFF0
  4205                           postinc0	equ	0xFEE
  4206                           wreg	equ	0xFE8
  4207                           indf2	equ	0xFDF
  4208                           postinc2	equ	0xFDE
  4209                           postdec2	equ	0xFDD
  4210                           fsr2h	equ	0xFDA
  4211                           fsr2l	equ	0xFD9
  4212                           status	equ	0xFD8
  4213                           
  4214 ;; *************** function _initLCD *****************
  4215 ;; Defined at:
  4216 ;;		line 14 in file "../lcd.c"
  4217 ;; Parameters:    Size  Location     Type
  4218 ;;		None
  4219 ;; Auto vars:     Size  Location     Type
  4220 ;;		None
  4221 ;; Return value:  Size  Location     Type
  4222 ;;                  1    wreg      void 
  4223 ;; Registers used:
  4224 ;;		wreg, status,2, status,0, cstack
  4225 ;; Tracked objects:
  4226 ;;		On entry : 0/0
  4227 ;;		On exit  : 0/0
  4228 ;;		Unchanged: 0/0
  4229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4230 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4231 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4232 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4233 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4234 ;;Total ram usage:        1 bytes
  4235 ;; Hardware stack levels used:    1
  4236 ;; Hardware stack levels required when called:    5
  4237 ;; This function calls:
  4238 ;;		_lcdInst
  4239 ;; This function is called by:
  4240 ;;		_main
  4241 ;; This function uses a non-reentrant model
  4242 ;;
  4243                           
  4244                           	psect	text14
  4245  0011EA                     __ptext14:
  4246                           	opt stack 0
  4247  0011EA                     _initLCD:
  4248                           	opt stack 25
  4249                           
  4250                           ;lcd.c: 15: _delay((unsigned long)((15)*(10000000/4000.0)));
  4251                           
  4252                           ;incstack = 0
  4253  0011EA  0E31               	movlw	49
  4254  0011EC  6E1C               	movwf	??_initLCD& (0+255),c
  4255  0011EE  0EB2               	movlw	178
  4256  0011F0                     u3287:
  4257  0011F0  2EE8               	decfsz	wreg,f,c
  4258  0011F2  D7FE               	bra	u3287
  4259  0011F4  2E1C               	decfsz	??_initLCD& (0+255),f,c
  4260  0011F6  D7FC               	bra	u3287
  4261  0011F8  D000               	nop2	
  4262                           
  4263                           ;lcd.c: 16: lcdInst(0b00110011);
  4264  0011FA  0E33               	movlw	51
  4265  0011FC  ECCC  F009         	call	_lcdInst
  4266                           
  4267                           ;lcd.c: 17: lcdInst(0b00110010);
  4268  001200  0E32               	movlw	50
  4269  001202  ECCC  F009         	call	_lcdInst
  4270                           
  4271                           ;lcd.c: 18: lcdInst(0b00101000);
  4272  001206  0E28               	movlw	40
  4273  001208  ECCC  F009         	call	_lcdInst
  4274                           
  4275                           ;lcd.c: 19: lcdInst(0b00001111);
  4276  00120C  0E0F               	movlw	15
  4277  00120E  ECCC  F009         	call	_lcdInst
  4278                           
  4279                           ;lcd.c: 20: lcdInst(0b00000110);
  4280  001212  0E06               	movlw	6
  4281  001214  ECCC  F009         	call	_lcdInst
  4282                           
  4283                           ;lcd.c: 21: lcdInst(0b00000001);
  4284  001218  0E01               	movlw	1
  4285  00121A  ECCC  F009         	call	_lcdInst
  4286                           
  4287                           ;lcd.c: 22: _delay((unsigned long)((15)*(10000000/4000.0)));
  4288  00121E  0E31               	movlw	49
  4289  001220  6E1C               	movwf	??_initLCD& (0+255),c
  4290  001222  0EB2               	movlw	178
  4291  001224                     u3297:
  4292  001224  2EE8               	decfsz	wreg,f,c
  4293  001226  D7FE               	bra	u3297
  4294  001228  2E1C               	decfsz	??_initLCD& (0+255),f,c
  4295  00122A  D7FC               	bra	u3297
  4296  00122C  D000               	nop2	
  4297  00122E  0012               	return		;funcret
  4298  001230                     __end_of_initLCD:
  4299                           	opt stack 0
  4300                           tblptru	equ	0xFF8
  4301                           tblptrh	equ	0xFF7
  4302                           tblptrl	equ	0xFF6
  4303                           tablat	equ	0xFF5
  4304                           prodh	equ	0xFF4
  4305                           prodl	equ	0xFF3
  4306                           intcon	equ	0xFF2
  4307                           intcon3	equ	0xFF0
  4308                           postinc0	equ	0xFEE
  4309                           wreg	equ	0xFE8
  4310                           indf2	equ	0xFDF
  4311                           postinc2	equ	0xFDE
  4312                           postdec2	equ	0xFDD
  4313                           fsr2h	equ	0xFDA
  4314                           fsr2l	equ	0xFD9
  4315                           status	equ	0xFD8
  4316                           
  4317 ;; *************** function _lcdInst *****************
  4318 ;; Defined at:
  4319 ;;		line 25 in file "../lcd.c"
  4320 ;; Parameters:    Size  Location     Type
  4321 ;;  data            1    wreg     unsigned char 
  4322 ;; Auto vars:     Size  Location     Type
  4323 ;;  data            1   26[COMRAM] unsigned char 
  4324 ;; Return value:  Size  Location     Type
  4325 ;;                  1    wreg      void 
  4326 ;; Registers used:
  4327 ;;		wreg, status,2, status,0, cstack
  4328 ;; Tracked objects:
  4329 ;;		On entry : 0/0
  4330 ;;		On exit  : 0/0
  4331 ;;		Unchanged: 0/0
  4332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4333 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4334 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4335 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4336 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4337 ;;Total ram usage:        1 bytes
  4338 ;; Hardware stack levels used:    1
  4339 ;; Hardware stack levels required when called:    4
  4340 ;; This function calls:
  4341 ;;		_lcdNibble
  4342 ;; This function is called by:
  4343 ;;		_initLCD
  4344 ;;		_main
  4345 ;; This function uses a non-reentrant model
  4346 ;;
  4347                           
  4348                           	psect	text15
  4349  001398                     __ptext15:
  4350                           	opt stack 0
  4351  001398                     _lcdInst:
  4352                           	opt stack 26
  4353                           
  4354                           ;incstack = 0
  4355                           ;lcdInst@data stored from wreg
  4356  001398  6E1B               	movwf	lcdInst@data,c
  4357                           
  4358                           ;lcd.c: 26: LATDbits.LATD2 = 0;
  4359  00139A  948C               	bcf	3980,2,c	;volatile
  4360                           
  4361                           ;lcd.c: 27: lcdNibble(data);
  4362  00139C  501B               	movf	lcdInst@data,w,c
  4363  00139E  ECCE  F008         	call	_lcdNibble
  4364  0013A2  0012               	return		;funcret
  4365  0013A4                     __end_of_lcdInst:
  4366                           	opt stack 0
  4367                           tblptru	equ	0xFF8
  4368                           tblptrh	equ	0xFF7
  4369                           tblptrl	equ	0xFF6
  4370                           tablat	equ	0xFF5
  4371                           prodh	equ	0xFF4
  4372                           prodl	equ	0xFF3
  4373                           intcon	equ	0xFF2
  4374                           intcon3	equ	0xFF0
  4375                           postinc0	equ	0xFEE
  4376                           wreg	equ	0xFE8
  4377                           indf2	equ	0xFDF
  4378                           postinc2	equ	0xFDE
  4379                           postdec2	equ	0xFDD
  4380                           fsr2h	equ	0xFDA
  4381                           fsr2l	equ	0xFD9
  4382                           status	equ	0xFD8
  4383                           
  4384 ;; *************** function _lcdNibble *****************
  4385 ;; Defined at:
  4386 ;;		line 35 in file "../lcd.c"
  4387 ;; Parameters:    Size  Location     Type
  4388 ;;  data            1    wreg     unsigned char 
  4389 ;; Auto vars:     Size  Location     Type
  4390 ;;  data            1   25[COMRAM] unsigned char 
  4391 ;;  temp            1   24[COMRAM] unsigned char 
  4392 ;; Return value:  Size  Location     Type
  4393 ;;                  1    wreg      void 
  4394 ;; Registers used:
  4395 ;;		wreg, status,2, status,0
  4396 ;; Tracked objects:
  4397 ;;		On entry : 0/0
  4398 ;;		On exit  : 0/0
  4399 ;;		Unchanged: 0/0
  4400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4401 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4402 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4403 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4404 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4405 ;;Total ram usage:        2 bytes
  4406 ;; Hardware stack levels used:    1
  4407 ;; Hardware stack levels required when called:    3
  4408 ;; This function calls:
  4409 ;;		Nothing
  4410 ;; This function is called by:
  4411 ;;		_lcdInst
  4412 ;;		_putch
  4413 ;; This function uses a non-reentrant model
  4414 ;;
  4415                           
  4416                           	psect	text16
  4417  00119C                     __ptext16:
  4418                           	opt stack 0
  4419  00119C                     _lcdNibble:
  4420                           	opt stack 25
  4421                           
  4422                           ;incstack = 0
  4423                           ;lcdNibble@data stored from wreg
  4424  00119C  6E1A               	movwf	lcdNibble@data,c
  4425                           
  4426                           ;lcd.c: 37: char temp = data & 0xF0;
  4427  00119E  501A               	movf	lcdNibble@data,w,c
  4428  0011A0  0BF0               	andlw	240
  4429  0011A2  6E19               	movwf	lcdNibble@temp,c
  4430                           
  4431                           ;lcd.c: 38: LATD = LATD & 0x0F;
  4432  0011A4  508C               	movf	3980,w,c	;volatile
  4433  0011A6  0B0F               	andlw	15
  4434  0011A8  6E8C               	movwf	3980,c	;volatile
  4435                           
  4436                           ;lcd.c: 39: LATD = temp | LATD;
  4437  0011AA  5019               	movf	lcdNibble@temp,w,c
  4438  0011AC  108C               	iorwf	3980,w,c	;volatile
  4439  0011AE  6E8C               	movwf	3980,c	;volatile
  4440                           
  4441                           ;lcd.c: 41: LATDbits.LATD3 = 0;
  4442  0011B0  968C               	bcf	3980,3,c	;volatile
  4443                           
  4444                           ;lcd.c: 42: _delay((unsigned long)((30)*(10000000/4000000.0)));
  4445  0011B2  0E19               	movlw	25
  4446  0011B4                     u3307:
  4447  0011B4  2EE8               	decfsz	wreg,f,c
  4448  0011B6  D7FE               	bra	u3307
  4449                           
  4450                           ;lcd.c: 43: LATDbits.LATD3 = 1;
  4451  0011B8  868C               	bsf	3980,3,c	;volatile
  4452                           
  4453                           ;lcd.c: 44: _delay((unsigned long)((30)*(10000000/4000000.0)));
  4454  0011BA  0E19               	movlw	25
  4455  0011BC                     u3317:
  4456  0011BC  2EE8               	decfsz	wreg,f,c
  4457  0011BE  D7FE               	bra	u3317
  4458                           
  4459                           ;lcd.c: 46: data = data << 4;
  4460  0011C0  381A               	swapf	lcdNibble@data,w,c
  4461  0011C2  0BF0               	andlw	240
  4462  0011C4  6E1A               	movwf	lcdNibble@data,c
  4463                           
  4464                           ;lcd.c: 48: temp = data & 0xF0;
  4465  0011C6  501A               	movf	lcdNibble@data,w,c
  4466  0011C8  0BF0               	andlw	240
  4467  0011CA  6E19               	movwf	lcdNibble@temp,c
  4468                           
  4469                           ;lcd.c: 49: LATD = LATD & 0x0F;
  4470  0011CC  508C               	movf	3980,w,c	;volatile
  4471  0011CE  0B0F               	andlw	15
  4472  0011D0  6E8C               	movwf	3980,c	;volatile
  4473                           
  4474                           ;lcd.c: 50: LATD = temp | LATD;
  4475  0011D2  5019               	movf	lcdNibble@temp,w,c
  4476  0011D4  108C               	iorwf	3980,w,c	;volatile
  4477  0011D6  6E8C               	movwf	3980,c	;volatile
  4478                           
  4479                           ;lcd.c: 52: LATDbits.LATD3 = 0;
  4480  0011D8  968C               	bcf	3980,3,c	;volatile
  4481                           
  4482                           ;lcd.c: 53: _delay((unsigned long)((30)*(10000000/4000000.0)));
  4483  0011DA  0E19               	movlw	25
  4484  0011DC                     u3327:
  4485  0011DC  2EE8               	decfsz	wreg,f,c
  4486  0011DE  D7FE               	bra	u3327
  4487                           
  4488                           ;lcd.c: 54: LATDbits.LATD3 = 1;
  4489  0011E0  868C               	bsf	3980,3,c	;volatile
  4490                           
  4491                           ;lcd.c: 55: _delay((unsigned long)((30)*(10000000/4000000.0)));
  4492  0011E2  0E19               	movlw	25
  4493  0011E4                     u3337:
  4494  0011E4  2EE8               	decfsz	wreg,f,c
  4495  0011E6  D7FE               	bra	u3337
  4496  0011E8  0012               	return		;funcret
  4497  0011EA                     __end_of_lcdNibble:
  4498                           	opt stack 0
  4499                           tblptru	equ	0xFF8
  4500                           tblptrh	equ	0xFF7
  4501                           tblptrl	equ	0xFF6
  4502                           tablat	equ	0xFF5
  4503                           prodh	equ	0xFF4
  4504                           prodl	equ	0xFF3
  4505                           intcon	equ	0xFF2
  4506                           intcon3	equ	0xFF0
  4507                           postinc0	equ	0xFEE
  4508                           wreg	equ	0xFE8
  4509                           indf2	equ	0xFDF
  4510                           postinc2	equ	0xFDE
  4511                           postdec2	equ	0xFDD
  4512                           fsr2h	equ	0xFDA
  4513                           fsr2l	equ	0xFD9
  4514                           status	equ	0xFD8
  4515                           
  4516 ;; *************** function _I2C_Master_Write *****************
  4517 ;; Defined at:
  4518 ;;		line 47 in file "../I2C.c"
  4519 ;; Parameters:    Size  Location     Type
  4520 ;;  d               2   25[COMRAM] unsigned int 
  4521 ;; Auto vars:     Size  Location     Type
  4522 ;;		None
  4523 ;; Return value:  Size  Location     Type
  4524 ;;                  1    wreg      void 
  4525 ;; Registers used:
  4526 ;;		wreg, status,2, status,0, cstack
  4527 ;; Tracked objects:
  4528 ;;		On entry : 0/0
  4529 ;;		On exit  : 0/0
  4530 ;;		Unchanged: 0/0
  4531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4532 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4533 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4534 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4535 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4536 ;;Total ram usage:        2 bytes
  4537 ;; Hardware stack levels used:    1
  4538 ;; Hardware stack levels required when called:    4
  4539 ;; This function calls:
  4540 ;;		_I2C_Master_Wait
  4541 ;; This function is called by:
  4542 ;;		_main
  4543 ;; This function uses a non-reentrant model
  4544 ;;
  4545                           
  4546                           	psect	text17
  4547  0013A4                     __ptext17:
  4548                           	opt stack 0
  4549  0013A4                     _I2C_Master_Write:
  4550                           	opt stack 26
  4551                           
  4552                           ;I2C.c: 49: I2C_Master_Wait();
  4553                           
  4554                           ;incstack = 0
  4555  0013A4  ECBD  F009         	call	_I2C_Master_Wait	;wreg free
  4556                           
  4557                           ;I2C.c: 50: SSPBUF = d;
  4558  0013A8  C01A  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  4559  0013AC  0012               	return		;funcret
  4560  0013AE                     __end_of_I2C_Master_Write:
  4561                           	opt stack 0
  4562                           tblptru	equ	0xFF8
  4563                           tblptrh	equ	0xFF7
  4564                           tblptrl	equ	0xFF6
  4565                           tablat	equ	0xFF5
  4566                           prodh	equ	0xFF4
  4567                           prodl	equ	0xFF3
  4568                           intcon	equ	0xFF2
  4569                           intcon3	equ	0xFF0
  4570                           postinc0	equ	0xFEE
  4571                           wreg	equ	0xFE8
  4572                           indf2	equ	0xFDF
  4573                           postinc2	equ	0xFDE
  4574                           postdec2	equ	0xFDD
  4575                           fsr2h	equ	0xFDA
  4576                           fsr2l	equ	0xFD9
  4577                           status	equ	0xFD8
  4578                           
  4579 ;; *************** function _I2C_Master_Stop *****************
  4580 ;; Defined at:
  4581 ;;		line 41 in file "../I2C.c"
  4582 ;; Parameters:    Size  Location     Type
  4583 ;;		None
  4584 ;; Auto vars:     Size  Location     Type
  4585 ;;		None
  4586 ;; Return value:  Size  Location     Type
  4587 ;;                  1    wreg      void 
  4588 ;; Registers used:
  4589 ;;		wreg, status,2, status,0, cstack
  4590 ;; Tracked objects:
  4591 ;;		On entry : 0/0
  4592 ;;		On exit  : 0/0
  4593 ;;		Unchanged: 0/0
  4594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4595 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4596 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4597 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4598 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4599 ;;Total ram usage:        0 bytes
  4600 ;; Hardware stack levels used:    1
  4601 ;; Hardware stack levels required when called:    4
  4602 ;; This function calls:
  4603 ;;		_I2C_Master_Wait
  4604 ;; This function is called by:
  4605 ;;		_main
  4606 ;; This function uses a non-reentrant model
  4607 ;;
  4608                           
  4609                           	psect	text18
  4610  0013AE                     __ptext18:
  4611                           	opt stack 0
  4612  0013AE                     _I2C_Master_Stop:
  4613                           	opt stack 26
  4614                           
  4615                           ;I2C.c: 43: I2C_Master_Wait();
  4616                           
  4617                           ;incstack = 0
  4618  0013AE  ECBD  F009         	call	_I2C_Master_Wait	;wreg free
  4619                           
  4620                           ;I2C.c: 44: PEN = 1;
  4621  0013B2  84C5               	bsf	4037,2,c	;volatile
  4622  0013B4  0012               	return		;funcret
  4623  0013B6                     __end_of_I2C_Master_Stop:
  4624                           	opt stack 0
  4625                           tblptru	equ	0xFF8
  4626                           tblptrh	equ	0xFF7
  4627                           tblptrl	equ	0xFF6
  4628                           tablat	equ	0xFF5
  4629                           prodh	equ	0xFF4
  4630                           prodl	equ	0xFF3
  4631                           intcon	equ	0xFF2
  4632                           intcon3	equ	0xFF0
  4633                           postinc0	equ	0xFEE
  4634                           wreg	equ	0xFE8
  4635                           indf2	equ	0xFDF
  4636                           postinc2	equ	0xFDE
  4637                           postdec2	equ	0xFDD
  4638                           fsr2h	equ	0xFDA
  4639                           fsr2l	equ	0xFD9
  4640                           status	equ	0xFD8
  4641                           
  4642 ;; *************** function _I2C_Master_Start *****************
  4643 ;; Defined at:
  4644 ;;		line 29 in file "../I2C.c"
  4645 ;; Parameters:    Size  Location     Type
  4646 ;;		None
  4647 ;; Auto vars:     Size  Location     Type
  4648 ;;		None
  4649 ;; Return value:  Size  Location     Type
  4650 ;;                  1    wreg      void 
  4651 ;; Registers used:
  4652 ;;		wreg, status,2, status,0, cstack
  4653 ;; Tracked objects:
  4654 ;;		On entry : 0/0
  4655 ;;		On exit  : 0/0
  4656 ;;		Unchanged: 0/0
  4657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4658 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4659 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4660 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4661 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4662 ;;Total ram usage:        0 bytes
  4663 ;; Hardware stack levels used:    1
  4664 ;; Hardware stack levels required when called:    4
  4665 ;; This function calls:
  4666 ;;		_I2C_Master_Wait
  4667 ;; This function is called by:
  4668 ;;		_main
  4669 ;; This function uses a non-reentrant model
  4670 ;;
  4671                           
  4672                           	psect	text19
  4673  0013B6                     __ptext19:
  4674                           	opt stack 0
  4675  0013B6                     _I2C_Master_Start:
  4676                           	opt stack 26
  4677                           
  4678                           ;I2C.c: 31: I2C_Master_Wait();
  4679                           
  4680                           ;incstack = 0
  4681  0013B6  ECBD  F009         	call	_I2C_Master_Wait	;wreg free
  4682                           
  4683                           ;I2C.c: 32: SEN = 1;
  4684  0013BA  80C5               	bsf	4037,0,c	;volatile
  4685  0013BC  0012               	return		;funcret
  4686  0013BE                     __end_of_I2C_Master_Start:
  4687                           	opt stack 0
  4688                           tblptru	equ	0xFF8
  4689                           tblptrh	equ	0xFF7
  4690                           tblptrl	equ	0xFF6
  4691                           tablat	equ	0xFF5
  4692                           prodh	equ	0xFF4
  4693                           prodl	equ	0xFF3
  4694                           intcon	equ	0xFF2
  4695                           intcon3	equ	0xFF0
  4696                           postinc0	equ	0xFEE
  4697                           wreg	equ	0xFE8
  4698                           indf2	equ	0xFDF
  4699                           postinc2	equ	0xFDE
  4700                           postdec2	equ	0xFDD
  4701                           fsr2h	equ	0xFDA
  4702                           fsr2l	equ	0xFD9
  4703                           status	equ	0xFD8
  4704                           
  4705 ;; *************** function _I2C_Master_Read *****************
  4706 ;; Defined at:
  4707 ;;		line 53 in file "../I2C.c"
  4708 ;; Parameters:    Size  Location     Type
  4709 ;;  a               1    wreg     unsigned char 
  4710 ;; Auto vars:     Size  Location     Type
  4711 ;;  a               1   25[COMRAM] unsigned char 
  4712 ;;  temp            1   26[COMRAM] unsigned char 
  4713 ;; Return value:  Size  Location     Type
  4714 ;;                  1    wreg      unsigned char 
  4715 ;; Registers used:
  4716 ;;		wreg, status,2, status,0, cstack
  4717 ;; Tracked objects:
  4718 ;;		On entry : 0/0
  4719 ;;		On exit  : 0/0
  4720 ;;		Unchanged: 0/0
  4721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4722 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4723 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4724 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4725 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4726 ;;Total ram usage:        2 bytes
  4727 ;; Hardware stack levels used:    1
  4728 ;; Hardware stack levels required when called:    4
  4729 ;; This function calls:
  4730 ;;		_I2C_Master_Wait
  4731 ;; This function is called by:
  4732 ;;		_main
  4733 ;; This function uses a non-reentrant model
  4734 ;;
  4735                           
  4736                           	psect	text20
  4737  001322                     __ptext20:
  4738                           	opt stack 0
  4739  001322                     _I2C_Master_Read:
  4740                           	opt stack 26
  4741                           
  4742                           ;incstack = 0
  4743                           ;I2C_Master_Read@a stored from wreg
  4744  001322  6E1A               	movwf	I2C_Master_Read@a,c
  4745                           
  4746                           ;I2C.c: 55: unsigned char temp;
  4747                           ;I2C.c: 56: I2C_Master_Wait();
  4748  001324  ECBD  F009         	call	_I2C_Master_Wait	;wreg free
  4749                           
  4750                           ;I2C.c: 57: RCEN = 1;
  4751  001328  86C5               	bsf	4037,3,c	;volatile
  4752                           
  4753                           ;I2C.c: 58: I2C_Master_Wait();
  4754  00132A  ECBD  F009         	call	_I2C_Master_Wait	;wreg free
  4755                           
  4756                           ;I2C.c: 59: temp = SSPBUF;
  4757  00132E  CFC9 F01B          	movff	4041,I2C_Master_Read@temp	;volatile
  4758                           
  4759                           ;I2C.c: 60: I2C_Master_Wait();
  4760  001332  ECBD  F009         	call	_I2C_Master_Wait	;wreg free
  4761                           
  4762                           ;I2C.c: 61: ACKDT = (a)?0:1;
  4763  001336  501A               	movf	I2C_Master_Read@a,w,c
  4764  001338  A4D8               	btfss	status,2,c
  4765  00133A  D002               	goto	u440
  4766  00133C  8AC5               	bsf	4037,5,c	;volatile
  4767  00133E  D001               	goto	l1425
  4768  001340                     u440:
  4769  001340  9AC5               	bcf	4037,5,c	;volatile
  4770  001342                     l1425:
  4771                           
  4772                           ;I2C.c: 62: ACKEN = 1;
  4773  001342  88C5               	bsf	4037,4,c	;volatile
  4774                           
  4775                           ;I2C.c: 63: return temp;
  4776  001344  501B               	movf	I2C_Master_Read@temp,w,c
  4777  001346  0012               	return	
  4778  001348                     __end_of_I2C_Master_Read:
  4779                           	opt stack 0
  4780                           tblptru	equ	0xFF8
  4781                           tblptrh	equ	0xFF7
  4782                           tblptrl	equ	0xFF6
  4783                           tablat	equ	0xFF5
  4784                           prodh	equ	0xFF4
  4785                           prodl	equ	0xFF3
  4786                           intcon	equ	0xFF2
  4787                           intcon3	equ	0xFF0
  4788                           postinc0	equ	0xFEE
  4789                           wreg	equ	0xFE8
  4790                           indf2	equ	0xFDF
  4791                           postinc2	equ	0xFDE
  4792                           postdec2	equ	0xFDD
  4793                           fsr2h	equ	0xFDA
  4794                           fsr2l	equ	0xFD9
  4795                           status	equ	0xFD8
  4796                           
  4797 ;; *************** function _I2C_Master_Wait *****************
  4798 ;; Defined at:
  4799 ;;		line 24 in file "../I2C.c"
  4800 ;; Parameters:    Size  Location     Type
  4801 ;;		None
  4802 ;; Auto vars:     Size  Location     Type
  4803 ;;		None
  4804 ;; Return value:  Size  Location     Type
  4805 ;;                  1    wreg      void 
  4806 ;; Registers used:
  4807 ;;		wreg, status,2, status,0
  4808 ;; Tracked objects:
  4809 ;;		On entry : 0/0
  4810 ;;		On exit  : 0/0
  4811 ;;		Unchanged: 0/0
  4812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4813 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4814 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4815 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4816 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4817 ;;Total ram usage:        1 bytes
  4818 ;; Hardware stack levels used:    1
  4819 ;; Hardware stack levels required when called:    3
  4820 ;; This function calls:
  4821 ;;		Nothing
  4822 ;; This function is called by:
  4823 ;;		_I2C_Master_Start
  4824 ;;		_I2C_Master_Stop
  4825 ;;		_I2C_Master_Write
  4826 ;;		_I2C_Master_Read
  4827 ;; This function uses a non-reentrant model
  4828 ;;
  4829                           
  4830                           	psect	text21
  4831  00137A                     __ptext21:
  4832                           	opt stack 0
  4833  00137A                     _I2C_Master_Wait:
  4834                           	opt stack 26
  4835  00137A                     l30:
  4836  00137A  B4C7               	btfsc	4039,2,c	;volatile
  4837  00137C  D7FE               	goto	l30
  4838  00137E  CFC5 F019          	movff	4037,??_I2C_Master_Wait	;volatile
  4839  001382  0E1F               	movlw	31
  4840  001384  1619               	andwf	??_I2C_Master_Wait,f,c
  4841  001386  B4D8               	btfsc	status,2,c
  4842  001388  0012               	return	
  4843  00138A  D7F7               	goto	l30
  4844  00138C                     __end_of_I2C_Master_Wait:
  4845                           	opt stack 0
  4846                           tblptru	equ	0xFF8
  4847                           tblptrh	equ	0xFF7
  4848                           tblptrl	equ	0xFF6
  4849                           tablat	equ	0xFF5
  4850                           prodh	equ	0xFF4
  4851                           prodl	equ	0xFF3
  4852                           intcon	equ	0xFF2
  4853                           intcon3	equ	0xFF0
  4854                           postinc0	equ	0xFEE
  4855                           wreg	equ	0xFE8
  4856                           indf2	equ	0xFDF
  4857                           postinc2	equ	0xFDE
  4858                           postdec2	equ	0xFDD
  4859                           fsr2h	equ	0xFDA
  4860                           fsr2l	equ	0xFD9
  4861                           status	equ	0xFD8
  4862                           
  4863 ;; *************** function _I2C_Master_Init *****************
  4864 ;; Defined at:
  4865 ;;		line 13 in file "../I2C.c"
  4866 ;; Parameters:    Size  Location     Type
  4867 ;;  c               4   37[COMRAM] const unsigned long 
  4868 ;; Auto vars:     Size  Location     Type
  4869 ;;		None
  4870 ;; Return value:  Size  Location     Type
  4871 ;;                  1    wreg      void 
  4872 ;; Registers used:
  4873 ;;		wreg, status,2, status,0, cstack
  4874 ;; Tracked objects:
  4875 ;;		On entry : 0/0
  4876 ;;		On exit  : 0/0
  4877 ;;		Unchanged: 0/0
  4878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4879 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4880 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4881 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4882 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4883 ;;Total ram usage:        8 bytes
  4884 ;; Hardware stack levels used:    1
  4885 ;; Hardware stack levels required when called:    4
  4886 ;; This function calls:
  4887 ;;		___lldiv
  4888 ;; This function is called by:
  4889 ;;		_main
  4890 ;; This function uses a non-reentrant model
  4891 ;;
  4892                           
  4893                           	psect	text22
  4894  0010F0                     __ptext22:
  4895                           	opt stack 0
  4896  0010F0                     _I2C_Master_Init:
  4897                           	opt stack 26
  4898                           
  4899                           ;I2C.c: 16: SSPSTAT = 0b00000000;
  4900                           
  4901                           ;incstack = 0
  4902  0010F0  0E00               	movlw	0
  4903  0010F2  6EC7               	movwf	4039,c	;volatile
  4904                           
  4905                           ;I2C.c: 17: SSPCON1 = 0b00101000;
  4906  0010F4  0E28               	movlw	40
  4907  0010F6  6EC6               	movwf	4038,c	;volatile
  4908                           
  4909                           ;I2C.c: 18: SSPCON2 = 0b00000000;
  4910  0010F8  0E00               	movlw	0
  4911  0010FA  6EC5               	movwf	4037,c	;volatile
  4912                           
  4913                           ;I2C.c: 19: SSPADD = (10000000/(4*c))-1;
  4914  0010FC  0E80               	movlw	128
  4915  0010FE  6E19               	movwf	___lldiv@dividend,c
  4916  001100  0E96               	movlw	150
  4917  001102  6E1A               	movwf	___lldiv@dividend+1,c
  4918  001104  0E98               	movlw	152
  4919  001106  6E1B               	movwf	___lldiv@dividend+2,c
  4920  001108  0E00               	movlw	0
  4921  00110A  6E1C               	movwf	___lldiv@dividend+3,c
  4922  00110C  C026  F02A         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  4923  001110  C027  F02B         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  4924  001114  C028  F02C         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  4925  001118  C029  F02D         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  4926  00111C  0E02               	movlw	2
  4927  00111E                     u2045:
  4928  00111E  90D8               	bcf	status,0,c
  4929  001120  362A               	rlcf	??_I2C_Master_Init,f,c
  4930  001122  362B               	rlcf	??_I2C_Master_Init+1,f,c
  4931  001124  362C               	rlcf	??_I2C_Master_Init+2,f,c
  4932  001126  362D               	rlcf	??_I2C_Master_Init+3,f,c
  4933  001128  2EE8               	decfsz	wreg,f,c
  4934  00112A  D7F9               	goto	u2045
  4935  00112C  C02A  F01D         	movff	??_I2C_Master_Init,___lldiv@divisor
  4936  001130  C02B  F01E         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  4937  001134  C02C  F01F         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  4938  001138  C02D  F020         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  4939  00113C  ECC7  F007         	call	___lldiv	;wreg free
  4940  001140  0419               	decf	?___lldiv,w,c
  4941  001142  6EC8               	movwf	4040,c	;volatile
  4942                           
  4943                           ;I2C.c: 20: TRISC3 = 1;
  4944  001144  8694               	bsf	3988,3,c	;volatile
  4945                           
  4946                           ;I2C.c: 21: TRISC4 = 1;
  4947  001146  8894               	bsf	3988,4,c	;volatile
  4948  001148  0012               	return		;funcret
  4949  00114A                     __end_of_I2C_Master_Init:
  4950                           	opt stack 0
  4951                           tblptru	equ	0xFF8
  4952                           tblptrh	equ	0xFF7
  4953                           tblptrl	equ	0xFF6
  4954                           tablat	equ	0xFF5
  4955                           prodh	equ	0xFF4
  4956                           prodl	equ	0xFF3
  4957                           intcon	equ	0xFF2
  4958                           intcon3	equ	0xFF0
  4959                           postinc0	equ	0xFEE
  4960                           wreg	equ	0xFE8
  4961                           indf2	equ	0xFDF
  4962                           postinc2	equ	0xFDE
  4963                           postdec2	equ	0xFDD
  4964                           fsr2h	equ	0xFDA
  4965                           fsr2l	equ	0xFD9
  4966                           status	equ	0xFD8
  4967                           
  4968 ;; *************** function ___lldiv *****************
  4969 ;; Defined at:
  4970 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  4971 ;; Parameters:    Size  Location     Type
  4972 ;;  dividend        4   24[COMRAM] unsigned long 
  4973 ;;  divisor         4   28[COMRAM] unsigned long 
  4974 ;; Auto vars:     Size  Location     Type
  4975 ;;  quotient        4   32[COMRAM] unsigned long 
  4976 ;;  counter         1   36[COMRAM] unsigned char 
  4977 ;; Return value:  Size  Location     Type
  4978 ;;                  4   24[COMRAM] unsigned long 
  4979 ;; Registers used:
  4980 ;;		wreg, status,2, status,0
  4981 ;; Tracked objects:
  4982 ;;		On entry : 0/0
  4983 ;;		On exit  : 0/0
  4984 ;;		Unchanged: 0/0
  4985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4986 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4987 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4988 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4989 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4990 ;;Total ram usage:       13 bytes
  4991 ;; Hardware stack levels used:    1
  4992 ;; Hardware stack levels required when called:    3
  4993 ;; This function calls:
  4994 ;;		Nothing
  4995 ;; This function is called by:
  4996 ;;		_I2C_Master_Init
  4997 ;; This function uses a non-reentrant model
  4998 ;;
  4999                           
  5000                           	psect	text23
  5001  000F8E                     __ptext23:
  5002                           	opt stack 0
  5003  000F8E                     ___lldiv:
  5004                           	opt stack 26
  5005                           
  5006                           ;incstack = 0
  5007  000F8E  0E00               	movlw	0
  5008  000F90  6E21               	movwf	___lldiv@quotient,c
  5009  000F92  0E00               	movlw	0
  5010  000F94  6E22               	movwf	___lldiv@quotient+1,c
  5011  000F96  0E00               	movlw	0
  5012  000F98  6E23               	movwf	___lldiv@quotient+2,c
  5013  000F9A  0E00               	movlw	0
  5014  000F9C  6E24               	movwf	___lldiv@quotient+3,c
  5015  000F9E  501D               	movf	___lldiv@divisor,w,c
  5016  000FA0  101E               	iorwf	___lldiv@divisor+1,w,c
  5017  000FA2  101F               	iorwf	___lldiv@divisor+2,w,c
  5018  000FA4  1020               	iorwf	___lldiv@divisor+3,w,c
  5019  000FA6  B4D8               	btfsc	status,2,c
  5020  000FA8  D02A               	goto	l827
  5021  000FAA  0E01               	movlw	1
  5022  000FAC  6E25               	movwf	___lldiv@counter,c
  5023  000FAE  D006               	goto	l2377
  5024  000FB0                     l2375:
  5025  000FB0  90D8               	bcf	status,0,c
  5026  000FB2  361D               	rlcf	___lldiv@divisor,f,c
  5027  000FB4  361E               	rlcf	___lldiv@divisor+1,f,c
  5028  000FB6  361F               	rlcf	___lldiv@divisor+2,f,c
  5029  000FB8  3620               	rlcf	___lldiv@divisor+3,f,c
  5030  000FBA  2A25               	incf	___lldiv@counter,f,c
  5031  000FBC                     l2377:
  5032  000FBC  AE20               	btfss	___lldiv@divisor+3,7,c
  5033  000FBE  D7F8               	goto	l2375
  5034  000FC0                     l2379:
  5035  000FC0  90D8               	bcf	status,0,c
  5036  000FC2  3621               	rlcf	___lldiv@quotient,f,c
  5037  000FC4  3622               	rlcf	___lldiv@quotient+1,f,c
  5038  000FC6  3623               	rlcf	___lldiv@quotient+2,f,c
  5039  000FC8  3624               	rlcf	___lldiv@quotient+3,f,c
  5040  000FCA  501D               	movf	___lldiv@divisor,w,c
  5041  000FCC  5C19               	subwf	___lldiv@dividend,w,c
  5042  000FCE  501E               	movf	___lldiv@divisor+1,w,c
  5043  000FD0  581A               	subwfb	___lldiv@dividend+1,w,c
  5044  000FD2  501F               	movf	___lldiv@divisor+2,w,c
  5045  000FD4  581B               	subwfb	___lldiv@dividend+2,w,c
  5046  000FD6  5020               	movf	___lldiv@divisor+3,w,c
  5047  000FD8  581C               	subwfb	___lldiv@dividend+3,w,c
  5048  000FDA  A0D8               	btfss	status,0,c
  5049  000FDC  D009               	goto	l2387
  5050  000FDE  501D               	movf	___lldiv@divisor,w,c
  5051  000FE0  5E19               	subwf	___lldiv@dividend,f,c
  5052  000FE2  501E               	movf	___lldiv@divisor+1,w,c
  5053  000FE4  5A1A               	subwfb	___lldiv@dividend+1,f,c
  5054  000FE6  501F               	movf	___lldiv@divisor+2,w,c
  5055  000FE8  5A1B               	subwfb	___lldiv@dividend+2,f,c
  5056  000FEA  5020               	movf	___lldiv@divisor+3,w,c
  5057  000FEC  5A1C               	subwfb	___lldiv@dividend+3,f,c
  5058  000FEE  8021               	bsf	___lldiv@quotient,0,c
  5059  000FF0                     l2387:
  5060  000FF0  90D8               	bcf	status,0,c
  5061  000FF2  3220               	rrcf	___lldiv@divisor+3,f,c
  5062  000FF4  321F               	rrcf	___lldiv@divisor+2,f,c
  5063  000FF6  321E               	rrcf	___lldiv@divisor+1,f,c
  5064  000FF8  321D               	rrcf	___lldiv@divisor,f,c
  5065  000FFA  2E25               	decfsz	___lldiv@counter,f,c
  5066  000FFC  D7E1               	goto	l2379
  5067  000FFE                     l827:
  5068  000FFE  C021  F019         	movff	___lldiv@quotient,?___lldiv
  5069  001002  C022  F01A         	movff	___lldiv@quotient+1,?___lldiv+1
  5070  001006  C023  F01B         	movff	___lldiv@quotient+2,?___lldiv+2
  5071  00100A  C024  F01C         	movff	___lldiv@quotient+3,?___lldiv+3
  5072  00100E  0012               	return		;funcret
  5073  001010                     __end_of___lldiv:
  5074                           	opt stack 0
  5075                           tblptru	equ	0xFF8
  5076                           tblptrh	equ	0xFF7
  5077                           tblptrl	equ	0xFF6
  5078                           tablat	equ	0xFF5
  5079                           prodh	equ	0xFF4
  5080                           prodl	equ	0xFF3
  5081                           intcon	equ	0xFF2
  5082                           intcon3	equ	0xFF0
  5083                           postinc0	equ	0xFEE
  5084                           wreg	equ	0xFE8
  5085                           indf2	equ	0xFDF
  5086                           postinc2	equ	0xFDE
  5087                           postdec2	equ	0xFDD
  5088                           fsr2h	equ	0xFDA
  5089                           fsr2l	equ	0xFD9
  5090                           status	equ	0xFD8
  5091                           
  5092 ;; *************** function _ISR *****************
  5093 ;; Defined at:
  5094 ;;		line 467 in file "../main.c"
  5095 ;; Parameters:    Size  Location     Type
  5096 ;;		None
  5097 ;; Auto vars:     Size  Location     Type
  5098 ;;  keypress        1   23[COMRAM] unsigned char 
  5099 ;; Return value:  Size  Location     Type
  5100 ;;                  1    wreg      void 
  5101 ;; Registers used:
  5102 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5103 ;; Tracked objects:
  5104 ;;		On entry : 0/0
  5105 ;;		On exit  : 0/0
  5106 ;;		Unchanged: 0/0
  5107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5108 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5109 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5110 ;;      Temps:         15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5111 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5112 ;;Total ram usage:       16 bytes
  5113 ;; Hardware stack levels used:    1
  5114 ;; Hardware stack levels required when called:    2
  5115 ;; This function calls:
  5116 ;;		_switchMenu
  5117 ;;		i2_stopOperation
  5118 ;; This function is called by:
  5119 ;;		Interrupt level 2
  5120 ;; This function uses a non-reentrant model
  5121 ;;
  5122                           
  5123                           	psect	intcode
  5124  000008                     __pintcode:
  5125                           	opt stack 0
  5126  000008                     _ISR:
  5127                           	opt stack 25
  5128                           
  5129                           ;incstack = 0
  5130  000008  8263               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5131  00000A  ED0C  F004         	call	int_func,f	;refresh shadow registers
  5132                           tblptru	equ	0xFF8
  5133                           tblptrh	equ	0xFF7
  5134                           tblptrl	equ	0xFF6
  5135                           tablat	equ	0xFF5
  5136                           prodh	equ	0xFF4
  5137                           prodl	equ	0xFF3
  5138                           intcon	equ	0xFF2
  5139                           intcon3	equ	0xFF0
  5140                           postinc0	equ	0xFEE
  5141                           wreg	equ	0xFE8
  5142                           indf2	equ	0xFDF
  5143                           postinc2	equ	0xFDE
  5144                           postdec2	equ	0xFDD
  5145                           fsr2h	equ	0xFDA
  5146                           fsr2l	equ	0xFD9
  5147                           status	equ	0xFD8
  5148                           
  5149                           	psect	intcode_body
  5150  000818                     __pintcode_body:
  5151                           	opt stack 25
  5152  000818                     int_func:
  5153                           	opt stack 25
  5154  000818  0006               	pop		; remove dummy address from shadow register refresh
  5155  00081A  CFFA F00A          	movff	pclath,??_ISR+1
  5156  00081E  CFFB F00B          	movff	pclatu,??_ISR+2
  5157  000822  CFE9 F00C          	movff	fsr0l,??_ISR+3
  5158  000826  CFEA F00D          	movff	fsr0h,??_ISR+4
  5159  00082A  CFE1 F00E          	movff	fsr1l,??_ISR+5
  5160  00082E  CFE2 F00F          	movff	fsr1h,??_ISR+6
  5161  000832  CFD9 F010          	movff	fsr2l,??_ISR+7
  5162  000836  CFDA F011          	movff	fsr2h,??_ISR+8
  5163  00083A  CFF3 F012          	movff	prodl,??_ISR+9
  5164  00083E  CFF4 F013          	movff	prodh,??_ISR+10
  5165  000842  CFF6 F014          	movff	tblptrl,??_ISR+11
  5166  000846  CFF7 F015          	movff	tblptrh,??_ISR+12
  5167  00084A  CFF8 F016          	movff	tblptru,??_ISR+13
  5168  00084E  CFF5 F017          	movff	tablat,??_ISR+14
  5169                           
  5170                           ;main.c: 468: if (INT1IF){
  5171  000852  A0F0               	btfss	intcon3,0,c	;volatile
  5172  000854  D049               	goto	i2l3141
  5173                           
  5174                           ;main.c: 469: unsigned char keypress = (PORTB & 0xF0) >> 4;
  5175  000856  3881               	swapf	3969,w,c	;volatile
  5176  000858  0B0F               	andlw	15
  5177  00085A  0B0F               	andlw	15
  5178  00085C  6E18               	movwf	ISR@keypress,c
  5179                           
  5180                           ;main.c: 470: if (keys[keypress] == '*'){
  5181  00085E  5018               	movf	ISR@keypress,w,c
  5182  000860  0D01               	mullw	1
  5183  000862  0E5B               	movlw	low _keys
  5184  000864  24F3               	addwf	prodl,w,c
  5185  000866  6EF6               	movwf	tblptrl,c
  5186  000868  0EFE               	movlw	high _keys
  5187  00086A  20F4               	addwfc	prodh,w,c
  5188  00086C  6EF7               	movwf	tblptrh,c
  5189  00086E                     	if	0	;There are less than 3 active tblptr bytes
  5190  00086E                     	endif
  5191  00086E  0008               	tblrd		*
  5192  000870  50F5               	movf	tablat,w,c
  5193  000872  0A2A               	xorlw	42
  5194  000874  A4D8               	btfss	status,2,c
  5195  000876  D00F               	goto	i2l3127
  5196                           
  5197                           ;main.c: 472: if(screenMode == 2){
  5198  000878  0E02               	movlw	2
  5199  00087A  1862               	xorwf	_screenMode,w,c
  5200  00087C  A4D8               	btfss	status,2,c
  5201  00087E  D005               	goto	i2l3123
  5202                           
  5203                           ;main.c: 473: screenMode = 1;
  5204  000880  0E01               	movlw	1
  5205  000882  6E62               	movwf	_screenMode,c
  5206                           
  5207                           ;main.c: 474: T0CONbits.TMR0ON = 1;
  5208  000884  8ED5               	bsf	4053,7,c	;volatile
  5209                           
  5210                           ;main.c: 475: T1CONbits.TMR1ON = 0;
  5211  000886  90CD               	bcf	4045,0,c	;volatile
  5212                           
  5213                           ;main.c: 476: }
  5214  000888  D02E               	goto	i2l3139
  5215  00088A                     i2l3123:
  5216                           
  5217                           ;main.c: 477: else if (screenMode == 0)
  5218  00088A  5062               	movf	_screenMode,w,c
  5219  00088C  A4D8               	btfss	status,2,c
  5220  00088E  D02B               	goto	i2l3139
  5221                           
  5222                           ;main.c: 478: screenMode = 2;
  5223  000890  0E02               	movlw	2
  5224  000892  6E62               	movwf	_screenMode,c
  5225                           
  5226                           ;main.c: 479: }
  5227  000894  D028               	goto	i2l3139
  5228  000896                     i2l3127:
  5229                           
  5230                           ;main.c: 480: else if (screenMode == 1){
  5231  000896  0462               	decf	_screenMode,w,c
  5232  000898  A4D8               	btfss	status,2,c
  5233  00089A  D012               	goto	i2l3135
  5234                           
  5235                           ;main.c: 481: if (keys[keypress] == '#'){
  5236  00089C  5018               	movf	ISR@keypress,w,c
  5237  00089E  0D01               	mullw	1
  5238  0008A0  0E5B               	movlw	low _keys
  5239  0008A2  24F3               	addwf	prodl,w,c
  5240  0008A4  6EF6               	movwf	tblptrl,c
  5241  0008A6  0EFE               	movlw	high _keys
  5242  0008A8  20F4               	addwfc	prodh,w,c
  5243  0008AA  6EF7               	movwf	tblptrh,c
  5244  0008AC                     	if	0	;There are less than 3 active tblptr bytes
  5245  0008AC                     	endif
  5246  0008AC  0008               	tblrd		*
  5247  0008AE  50F5               	movf	tablat,w,c
  5248  0008B0  0A23               	xorlw	35
  5249  0008B2  A4D8               	btfss	status,2,c
  5250  0008B4  D018               	goto	i2l3139
  5251                           
  5252                           ;main.c: 482: screenMode = 10;
  5253  0008B6  0E0A               	movlw	10
  5254  0008B8  6E62               	movwf	_screenMode,c
  5255                           
  5256                           ;main.c: 483: stopOperation();
  5257  0008BA  ECA2  F006         	call	i2_stopOperation	;wreg free
  5258                           
  5259                           ;main.c: 484: }
  5260                           ;main.c: 485: }
  5261  0008BE  D013               	goto	i2l3139
  5262  0008C0                     i2l3135:
  5263                           
  5264                           ;main.c: 486: else if (screenMode != 0)
  5265  0008C0  5062               	movf	_screenMode,w,c
  5266  0008C2  B4D8               	btfsc	status,2,c
  5267  0008C4  D010               	goto	i2l3139
  5268                           
  5269                           ;main.c: 487: switchMenu('4', '6', keys[keypress]);
  5270  0008C6  0E36               	movlw	54
  5271  0008C8  6E01               	movwf	switchMenu@right,c
  5272  0008CA  5018               	movf	ISR@keypress,w,c
  5273  0008CC  0D01               	mullw	1
  5274  0008CE  0E5B               	movlw	low _keys
  5275  0008D0  24F3               	addwf	prodl,w,c
  5276  0008D2  6EF6               	movwf	tblptrl,c
  5277  0008D4  0EFE               	movlw	high _keys
  5278  0008D6  20F4               	addwfc	prodh,w,c
  5279  0008D8  6EF7               	movwf	tblptrh,c
  5280  0008DA                     	if	0	;There are less than 3 active tblptr bytes
  5281  0008DA                     	endif
  5282  0008DA  0008               	tblrd		*
  5283  0008DC  CFF5 F002          	movff	tablat,switchMenu@key
  5284  0008E0  0E34               	movlw	52
  5285  0008E2  EC39  F009         	call	_switchMenu
  5286  0008E6                     i2l3139:
  5287                           
  5288                           ;main.c: 489: INT1IF = 0;
  5289  0008E6  90F0               	bcf	intcon3,0,c	;volatile
  5290  0008E8                     i2l3141:
  5291                           
  5292                           ;main.c: 490: }
  5293                           ;main.c: 491: if (screenMode == 1 && TMR0IF){
  5294  0008E8  0462               	decf	_screenMode,w,c
  5295  0008EA  B4D8               	btfsc	status,2,c
  5296  0008EC  A4F2               	btfss	intcon,2,c	;volatile
  5297  0008EE  D018               	goto	i2l3169
  5298                           
  5299                           ;main.c: 492: TMR0IF = 0;
  5300  0008F0  94F2               	bcf	intcon,2,c	;volatile
  5301                           
  5302                           ;main.c: 493: TMR0 = 55770;
  5303  0008F2  0ED9               	movlw	217
  5304  0008F4  6ED7               	movwf	4055,c	;volatile
  5305  0008F6  0EDA               	movlw	218
  5306  0008F8  6ED6               	movwf	4054,c	;volatile
  5307                           
  5308                           ;main.c: 494: opTimer++;
  5309  0008FA  2A54               	incf	_opTimer,f,c
  5310                           
  5311                           ;main.c: 495: if (opTimer >= 180){
  5312  0008FC  0EB3               	movlw	179
  5313  0008FE  6454               	cpfsgt	_opTimer,c
  5314  000900  D004               	goto	i2l3157
  5315                           
  5316                           ;main.c: 496: screenMode = 0;
  5317  000902  0E00               	movlw	0
  5318  000904  6E62               	movwf	_screenMode,c
  5319                           
  5320                           ;main.c: 497: stopOperation();
  5321  000906  ECA2  F006         	call	i2_stopOperation	;wreg free
  5322  00090A                     i2l3157:
  5323                           
  5324                           ;main.c: 498: }
  5325                           ;main.c: 499: if (LATCbits.LC0){
  5326  00090A  A08B               	btfss	3979,0,c	;volatile
  5327  00090C  D002               	goto	i2l3161
  5328                           
  5329                           ;main.c: 500: LATCbits.LC0 = 0;;
  5330  00090E  908B               	bcf	3979,0,c	;volatile
  5331                           
  5332                           ;main.c: 501: }
  5333  000910  D007               	goto	i2l3169
  5334  000912                     i2l3161:
  5335                           
  5336                           ;main.c: 502: else {
  5337                           ;main.c: 503: solOnTimer++;
  5338  000912  2A5A               	incf	_solOnTimer,f,c
  5339                           
  5340                           ;main.c: 504: if (solOnTimer >= 4){
  5341  000914  0E03               	movlw	3
  5342  000916  645A               	cpfsgt	_solOnTimer,c
  5343  000918  D003               	goto	i2l3169
  5344                           
  5345                           ;main.c: 505: solOnTimer = 0;
  5346  00091A  0E00               	movlw	0
  5347  00091C  6E5A               	movwf	_solOnTimer,c
  5348                           
  5349                           ;main.c: 506: LATCbits.LC0 = 1;;
  5350  00091E  808B               	bsf	3979,0,c	;volatile
  5351  000920                     i2l3169:
  5352                           
  5353                           ;main.c: 507: }
  5354                           ;main.c: 508: }
  5355                           ;main.c: 509: }
  5356                           ;main.c: 510: if (screenMode == 1 && TMR1IF){
  5357  000920  0462               	decf	_screenMode,w,c
  5358  000922  B4D8               	btfsc	status,2,c
  5359  000924  A09E               	btfss	3998,0,c	;volatile
  5360  000926  D0D4               	goto	i2l403
  5361                           
  5362                           ;main.c: 511: TMR1IF = 0;
  5363  000928  909E               	bcf	3998,0,c	;volatile
  5364                           
  5365                           ;main.c: 512: TMR1 = 48035;
  5366  00092A  0EBB               	movlw	187
  5367  00092C  6ECF               	movwf	4047,c	;volatile
  5368  00092E  0EA3               	movlw	163
  5369  000930  6ECE               	movwf	4046,c	;volatile
  5370                           
  5371                           ;main.c: 513: if (stepGear){
  5372  000932  505D               	movf	_stepGear,w,c
  5373  000934  B4D8               	btfsc	status,2,c
  5374  000936  D018               	goto	i2l3189
  5375                           
  5376                           ;main.c: 514: stepGear++;
  5377  000938  2A5D               	incf	_stepGear,f,c
  5378                           
  5379                           ;main.c: 515: if (stepGear >= 133){
  5380  00093A  0E84               	movlw	132
  5381  00093C  645D               	cpfsgt	_stepGear,c
  5382  00093E  D007               	goto	i2l3187
  5383                           
  5384                           ;main.c: 516: if (!LATCbits.LC1){
  5385  000940  B28B               	btfsc	3979,1,c	;volatile
  5386  000942  D002               	goto	i2l363
  5387                           
  5388                           ;main.c: 517: stepGear = 0;
  5389  000944  0E00               	movlw	0
  5390  000946  D002               	goto	L1
  5391  000948                     i2l363:
  5392                           
  5393                           ;main.c: 519: else{
  5394                           ;main.c: 520: LATCbits.LC1= 0;;
  5395  000948  928B               	bcf	3979,1,c	;volatile
  5396                           
  5397                           ;main.c: 521: stepGear = 1;
  5398  00094A  0E01               	movlw	1
  5399  00094C                     L1:
  5400  00094C  6E5D               	movwf	_stepGear,c
  5401  00094E                     i2l3187:
  5402                           
  5403                           ;main.c: 522: }
  5404                           ;main.c: 523: }
  5405                           ;main.c: 524: LATCbits.LC2 = !LATCbits.LC2;;
  5406  00094E  B48B               	btfsc	3979,2,c	;volatile
  5407  000950  D003               	goto	i2u292_40
  5408  000952  6A09               	clrf	??_ISR& (0+255),c
  5409  000954  2A09               	incf	??_ISR& (0+255),f,c
  5410  000956  D001               	goto	i2u293_48
  5411  000958                     i2u292_40:
  5412  000958  6A09               	clrf	??_ISR& (0+255),c
  5413  00095A                     i2u293_48:
  5414  00095A  4609               	rlncf	??_ISR,f,c
  5415  00095C  4609               	rlncf	??_ISR,f,c
  5416  00095E  508B               	movf	3979,w,c	;volatile
  5417  000960  1809               	xorwf	??_ISR,w,c
  5418  000962  0BFB               	andlw	-5
  5419  000964  1809               	xorwf	??_ISR,w,c
  5420  000966  6E8B               	movwf	3979,c	;volatile
  5421  000968                     i2l3189:
  5422                           
  5423                           ;main.c: 525: }
  5424                           ;main.c: 526: if (waitMotor){
  5425  000968  5047               	movf	_waitMotor,w,c
  5426  00096A  1048               	iorwf	_waitMotor+1,w,c
  5427  00096C  B4D8               	btfsc	status,2,c
  5428  00096E  D00C               	goto	i2l365
  5429                           
  5430                           ;main.c: 527: waitMotor++;
  5431  000970  4A47               	infsnz	_waitMotor,f,c
  5432  000972  2A48               	incf	_waitMotor+1,f,c
  5433                           
  5434                           ;main.c: 528: if (waitMotor >= 286){
  5435  000974  0E1E               	movlw	30
  5436  000976  5C47               	subwf	_waitMotor,w,c
  5437  000978  0E01               	movlw	1
  5438  00097A  5848               	subwfb	_waitMotor+1,w,c
  5439  00097C  A0D8               	btfss	status,0,c
  5440  00097E  D004               	goto	i2l365
  5441                           
  5442                           ;main.c: 529: waitMotor = 0;
  5443  000980  0E00               	movlw	0
  5444  000982  6E48               	movwf	_waitMotor+1,c
  5445  000984  0E00               	movlw	0
  5446  000986  6E47               	movwf	_waitMotor,c
  5447  000988                     i2l365:
  5448                           
  5449                           ;main.c: 530: }
  5450                           ;main.c: 531: }
  5451                           ;main.c: 532: if (plat1Left){
  5452  000988  5055               	movf	_plat1Left,w,c
  5453  00098A  B4D8               	btfsc	status,2,c
  5454  00098C  D026               	goto	i2l3225
  5455                           
  5456                           ;main.c: 533: if (step1 == 1){
  5457  00098E  045B               	decf	_step1,w,c
  5458  000990  A4D8               	btfss	status,2,c
  5459  000992  D002               	goto	i2l3201
  5460                           
  5461                           ;main.c: 534: LATAbits.LA5 = 1;;
  5462  000994  8A89               	bsf	3977,5,c	;volatile
  5463                           
  5464                           ;main.c: 535: LATAbits.LA4 = 0;;
  5465  000996  9889               	bcf	3977,4,c	;volatile
  5466  000998                     i2l3201:
  5467                           
  5468                           ;main.c: 536: }
  5469                           ;main.c: 537: if (step1 == 2){
  5470  000998  0E02               	movlw	2
  5471  00099A  185B               	xorwf	_step1,w,c
  5472  00099C  A4D8               	btfss	status,2,c
  5473  00099E  D002               	goto	i2l3205
  5474                           
  5475                           ;main.c: 538: LATAbits.LA2 = 0;;
  5476  0009A0  9489               	bcf	3977,2,c	;volatile
  5477                           
  5478                           ;main.c: 539: LATAbits.LA3 = 1;;
  5479  0009A2  8689               	bsf	3977,3,c	;volatile
  5480  0009A4                     i2l3205:
  5481                           
  5482                           ;main.c: 540: }
  5483                           ;main.c: 541: if (step1 == 3){
  5484  0009A4  0E03               	movlw	3
  5485  0009A6  185B               	xorwf	_step1,w,c
  5486  0009A8  A4D8               	btfss	status,2,c
  5487  0009AA  D002               	goto	i2l3209
  5488                           
  5489                           ;main.c: 542: LATAbits.LA5 = 0;;
  5490  0009AC  9A89               	bcf	3977,5,c	;volatile
  5491                           
  5492                           ;main.c: 543: LATAbits.LA4 = 1;;
  5493  0009AE  8889               	bsf	3977,4,c	;volatile
  5494  0009B0                     i2l3209:
  5495                           
  5496                           ;main.c: 544: }
  5497                           ;main.c: 545: if (step1 == 4){
  5498  0009B0  0E04               	movlw	4
  5499  0009B2  185B               	xorwf	_step1,w,c
  5500  0009B4  A4D8               	btfss	status,2,c
  5501  0009B6  D002               	goto	i2l3213
  5502                           
  5503                           ;main.c: 546: LATAbits.LA2 = 1;;
  5504  0009B8  8489               	bsf	3977,2,c	;volatile
  5505                           
  5506                           ;main.c: 547: LATAbits.LA3 = 0;;
  5507  0009BA  9689               	bcf	3977,3,c	;volatile
  5508  0009BC                     i2l3213:
  5509                           
  5510                           ;main.c: 548: }
  5511                           ;main.c: 549: plat1Left++;
  5512  0009BC  2A55               	incf	_plat1Left,f,c
  5513                           
  5514                           ;main.c: 550: if (plat1Left>=200){
  5515  0009BE  0EC7               	movlw	199
  5516  0009C0  6455               	cpfsgt	_plat1Left,c
  5517  0009C2  D004               	goto	i2l3219
  5518                           
  5519                           ;main.c: 551: plat1Left = 0;
  5520  0009C4  0E00               	movlw	0
  5521  0009C6  6E55               	movwf	_plat1Left,c
  5522                           
  5523                           ;main.c: 552: step1 = 0;
  5524  0009C8  0E00               	movlw	0
  5525  0009CA  D004               	goto	L2
  5526  0009CC                     i2l3219:
  5527                           
  5528                           ;main.c: 554: else if (step1>=4)
  5529  0009CC  0E03               	movlw	3
  5530  0009CE  645B               	cpfsgt	_step1,c
  5531  0009D0  D003               	goto	i2l3223
  5532                           
  5533                           ;main.c: 555: step1 = 1;
  5534  0009D2  0E01               	movlw	1
  5535  0009D4                     L2:
  5536  0009D4  6E5B               	movwf	_step1,c
  5537  0009D6  D001               	goto	i2l3225
  5538  0009D8                     i2l3223:
  5539                           
  5540                           ;main.c: 556: else
  5541                           ;main.c: 557: step1++;
  5542  0009D8  2A5B               	incf	_step1,f,c
  5543  0009DA                     i2l3225:
  5544                           
  5545                           ;main.c: 558: }
  5546                           ;main.c: 559: if (plat1Right){
  5547  0009DA  5056               	movf	_plat1Right,w,c
  5548  0009DC  B4D8               	btfsc	status,2,c
  5549  0009DE  D026               	goto	i2l3255
  5550                           
  5551                           ;main.c: 560: if (step1 == 4){
  5552  0009E0  0E04               	movlw	4
  5553  0009E2  185B               	xorwf	_step1,w,c
  5554  0009E4  A4D8               	btfss	status,2,c
  5555  0009E6  D002               	goto	i2l3231
  5556                           
  5557                           ;main.c: 561: LATAbits.LA5 = 0;;
  5558  0009E8  9A89               	bcf	3977,5,c	;volatile
  5559                           
  5560                           ;main.c: 562: LATAbits.LA4 = 1;;
  5561  0009EA  8889               	bsf	3977,4,c	;volatile
  5562  0009EC                     i2l3231:
  5563                           
  5564                           ;main.c: 563: }
  5565                           ;main.c: 564: if (step1 == 3){
  5566  0009EC  0E03               	movlw	3
  5567  0009EE  185B               	xorwf	_step1,w,c
  5568  0009F0  A4D8               	btfss	status,2,c
  5569  0009F2  D002               	goto	i2l3235
  5570                           
  5571                           ;main.c: 565: LATAbits.LA2 = 0;;
  5572  0009F4  9489               	bcf	3977,2,c	;volatile
  5573                           
  5574                           ;main.c: 566: LATAbits.LA3 = 1;;
  5575  0009F6  8689               	bsf	3977,3,c	;volatile
  5576  0009F8                     i2l3235:
  5577                           
  5578                           ;main.c: 567: }
  5579                           ;main.c: 568: if (step1 == 2){
  5580  0009F8  0E02               	movlw	2
  5581  0009FA  185B               	xorwf	_step1,w,c
  5582  0009FC  A4D8               	btfss	status,2,c
  5583  0009FE  D002               	goto	i2l3239
  5584                           
  5585                           ;main.c: 569: LATAbits.LA5 = 1;;
  5586  000A00  8A89               	bsf	3977,5,c	;volatile
  5587                           
  5588                           ;main.c: 570: LATAbits.LA4 = 0;;
  5589  000A02  9889               	bcf	3977,4,c	;volatile
  5590  000A04                     i2l3239:
  5591                           
  5592                           ;main.c: 571: }
  5593                           ;main.c: 572: if (step1 == 1){
  5594  000A04  045B               	decf	_step1,w,c
  5595  000A06  A4D8               	btfss	status,2,c
  5596  000A08  D002               	goto	i2l3243
  5597                           
  5598                           ;main.c: 573: LATAbits.LA2 = 1;;
  5599  000A0A  8489               	bsf	3977,2,c	;volatile
  5600                           
  5601                           ;main.c: 574: LATAbits.LA3 = 0;;
  5602  000A0C  9689               	bcf	3977,3,c	;volatile
  5603  000A0E                     i2l3243:
  5604                           
  5605                           ;main.c: 575: }
  5606                           ;main.c: 576: plat1Right++;
  5607  000A0E  2A56               	incf	_plat1Right,f,c
  5608                           
  5609                           ;main.c: 577: if (plat1Right>=200){
  5610  000A10  0EC7               	movlw	199
  5611  000A12  6456               	cpfsgt	_plat1Right,c
  5612  000A14  D004               	goto	i2l3249
  5613                           
  5614                           ;main.c: 578: plat1Right = 0;
  5615  000A16  0E00               	movlw	0
  5616  000A18  6E56               	movwf	_plat1Right,c
  5617                           
  5618                           ;main.c: 579: step1 = 0;
  5619  000A1A  0E00               	movlw	0
  5620  000A1C  D004               	goto	L3
  5621  000A1E                     i2l3249:
  5622                           
  5623                           ;main.c: 581: else if (step1<=1)
  5624  000A1E  0E02               	movlw	2
  5625  000A20  605B               	cpfslt	_step1,c
  5626  000A22  D003               	goto	i2l3253
  5627                           
  5628                           ;main.c: 582: step1 = 4;
  5629  000A24  0E04               	movlw	4
  5630  000A26                     L3:
  5631  000A26  6E5B               	movwf	_step1,c
  5632  000A28  D001               	goto	i2l3255
  5633  000A2A                     i2l3253:
  5634                           
  5635                           ;main.c: 583: else
  5636                           ;main.c: 584: step1--;
  5637  000A2A  065B               	decf	_step1,f,c
  5638  000A2C                     i2l3255:
  5639                           
  5640                           ;main.c: 585: }
  5641                           ;main.c: 586: if (plat2Left){
  5642  000A2C  5057               	movf	_plat2Left,w,c
  5643  000A2E  B4D8               	btfsc	status,2,c
  5644  000A30  D026               	goto	i2l3285
  5645                           
  5646                           ;main.c: 587: if (step2 == 1){
  5647  000A32  045C               	decf	_step2,w,c
  5648  000A34  A4D8               	btfss	status,2,c
  5649  000A36  D002               	goto	i2l3261
  5650                           
  5651                           ;main.c: 588: LATAbits.LA6 = 1;;
  5652  000A38  8C89               	bsf	3977,6,c	;volatile
  5653                           
  5654                           ;main.c: 589: LATBbits.LB3 = 0;;
  5655  000A3A  968A               	bcf	3978,3,c	;volatile
  5656  000A3C                     i2l3261:
  5657                           
  5658                           ;main.c: 590: }
  5659                           ;main.c: 591: if (step2 == 2){
  5660  000A3C  0E02               	movlw	2
  5661  000A3E  185C               	xorwf	_step2,w,c
  5662  000A40  A4D8               	btfss	status,2,c
  5663  000A42  D002               	goto	i2l3265
  5664                           
  5665                           ;main.c: 592: LATBbits.LB0 = 0;;
  5666  000A44  908A               	bcf	3978,0,c	;volatile
  5667                           
  5668                           ;main.c: 593: LATBbits.LB2 = 1;;
  5669  000A46  848A               	bsf	3978,2,c	;volatile
  5670  000A48                     i2l3265:
  5671                           
  5672                           ;main.c: 594: }
  5673                           ;main.c: 595: if (step2 == 3){
  5674  000A48  0E03               	movlw	3
  5675  000A4A  185C               	xorwf	_step2,w,c
  5676  000A4C  A4D8               	btfss	status,2,c
  5677  000A4E  D002               	goto	i2l3269
  5678                           
  5679                           ;main.c: 596: LATAbits.LA6 = 0;;
  5680  000A50  9C89               	bcf	3977,6,c	;volatile
  5681                           
  5682                           ;main.c: 597: LATBbits.LB3 = 1;;
  5683  000A52  868A               	bsf	3978,3,c	;volatile
  5684  000A54                     i2l3269:
  5685                           
  5686                           ;main.c: 598: }
  5687                           ;main.c: 599: if (step2 == 4){
  5688  000A54  0E04               	movlw	4
  5689  000A56  185C               	xorwf	_step2,w,c
  5690  000A58  A4D8               	btfss	status,2,c
  5691  000A5A  D002               	goto	i2l3273
  5692                           
  5693                           ;main.c: 600: LATBbits.LB0 = 1;;
  5694  000A5C  808A               	bsf	3978,0,c	;volatile
  5695                           
  5696                           ;main.c: 601: LATBbits.LB2 = 0;;
  5697  000A5E  948A               	bcf	3978,2,c	;volatile
  5698  000A60                     i2l3273:
  5699                           
  5700                           ;main.c: 602: }
  5701                           ;main.c: 603: plat2Left++;
  5702  000A60  2A57               	incf	_plat2Left,f,c
  5703                           
  5704                           ;main.c: 604: if (plat2Left>=200){
  5705  000A62  0EC7               	movlw	199
  5706  000A64  6457               	cpfsgt	_plat2Left,c
  5707  000A66  D004               	goto	i2l3279
  5708                           
  5709                           ;main.c: 605: plat2Left = 0;
  5710  000A68  0E00               	movlw	0
  5711  000A6A  6E57               	movwf	_plat2Left,c
  5712                           
  5713                           ;main.c: 606: step2 = 0;
  5714  000A6C  0E00               	movlw	0
  5715  000A6E  D004               	goto	L4
  5716  000A70                     i2l3279:
  5717                           
  5718                           ;main.c: 608: else if (step2>=4)
  5719  000A70  0E03               	movlw	3
  5720  000A72  645C               	cpfsgt	_step2,c
  5721  000A74  D003               	goto	i2l3283
  5722                           
  5723                           ;main.c: 609: step2 = 1;
  5724  000A76  0E01               	movlw	1
  5725  000A78                     L4:
  5726  000A78  6E5C               	movwf	_step2,c
  5727  000A7A  D001               	goto	i2l3285
  5728  000A7C                     i2l3283:
  5729                           
  5730                           ;main.c: 610: else
  5731                           ;main.c: 611: step2++;
  5732  000A7C  2A5C               	incf	_step2,f,c
  5733  000A7E                     i2l3285:
  5734                           
  5735                           ;main.c: 612: }
  5736                           ;main.c: 613: if (plat2Right){
  5737  000A7E  5058               	movf	_plat2Right,w,c
  5738  000A80  B4D8               	btfsc	status,2,c
  5739  000A82  D026               	goto	i2l403
  5740                           
  5741                           ;main.c: 614: if (step2 == 4){
  5742  000A84  0E04               	movlw	4
  5743  000A86  185C               	xorwf	_step2,w,c
  5744  000A88  A4D8               	btfss	status,2,c
  5745  000A8A  D002               	goto	i2l3291
  5746                           
  5747                           ;main.c: 615: LATAbits.LA6 = 0;;
  5748  000A8C  9C89               	bcf	3977,6,c	;volatile
  5749                           
  5750                           ;main.c: 616: LATBbits.LB3 = 1;;
  5751  000A8E  868A               	bsf	3978,3,c	;volatile
  5752  000A90                     i2l3291:
  5753                           
  5754                           ;main.c: 617: }
  5755                           ;main.c: 618: if (step2 == 3){
  5756  000A90  0E03               	movlw	3
  5757  000A92  185C               	xorwf	_step2,w,c
  5758  000A94  A4D8               	btfss	status,2,c
  5759  000A96  D002               	goto	i2l3295
  5760                           
  5761                           ;main.c: 619: LATBbits.LB0 = 0;;
  5762  000A98  908A               	bcf	3978,0,c	;volatile
  5763                           
  5764                           ;main.c: 620: LATBbits.LB2 = 1;;
  5765  000A9A  848A               	bsf	3978,2,c	;volatile
  5766  000A9C                     i2l3295:
  5767                           
  5768                           ;main.c: 621: }
  5769                           ;main.c: 622: if (step2 == 2){
  5770  000A9C  0E02               	movlw	2
  5771  000A9E  185C               	xorwf	_step2,w,c
  5772  000AA0  A4D8               	btfss	status,2,c
  5773  000AA2  D002               	goto	i2l3299
  5774                           
  5775                           ;main.c: 623: LATAbits.LA6 = 1;;
  5776  000AA4  8C89               	bsf	3977,6,c	;volatile
  5777                           
  5778                           ;main.c: 624: LATBbits.LB3 = 0;;
  5779  000AA6  968A               	bcf	3978,3,c	;volatile
  5780  000AA8                     i2l3299:
  5781                           
  5782                           ;main.c: 625: }
  5783                           ;main.c: 626: if (step2 == 1){
  5784  000AA8  045C               	decf	_step2,w,c
  5785  000AAA  A4D8               	btfss	status,2,c
  5786  000AAC  D002               	goto	i2l3303
  5787                           
  5788                           ;main.c: 627: LATBbits.LB0 = 1;;
  5789  000AAE  808A               	bsf	3978,0,c	;volatile
  5790                           
  5791                           ;main.c: 628: LATBbits.LB2 = 0;;
  5792  000AB0  948A               	bcf	3978,2,c	;volatile
  5793  000AB2                     i2l3303:
  5794                           
  5795                           ;main.c: 629: }
  5796                           ;main.c: 630: plat2Right++;
  5797  000AB2  2A58               	incf	_plat2Right,f,c
  5798                           
  5799                           ;main.c: 631: if (plat2Right>=200){
  5800  000AB4  0EC7               	movlw	199
  5801  000AB6  6458               	cpfsgt	_plat2Right,c
  5802  000AB8  D004               	goto	i2l3309
  5803                           
  5804                           ;main.c: 632: plat2Right = 0;
  5805  000ABA  0E00               	movlw	0
  5806  000ABC  6E58               	movwf	_plat2Right,c
  5807                           
  5808                           ;main.c: 633: step2 = 0;
  5809  000ABE  0E00               	movlw	0
  5810  000AC0  D004               	goto	L5
  5811  000AC2                     i2l3309:
  5812                           
  5813                           ;main.c: 635: else if (step2<=1)
  5814  000AC2  0E02               	movlw	2
  5815  000AC4  605C               	cpfslt	_step2,c
  5816  000AC6  D003               	goto	i2l3313
  5817                           
  5818                           ;main.c: 636: step2 = 4;
  5819  000AC8  0E04               	movlw	4
  5820  000ACA                     L5:
  5821  000ACA  6E5C               	movwf	_step2,c
  5822  000ACC  D001               	goto	i2l403
  5823  000ACE                     i2l3313:
  5824                           
  5825                           ;main.c: 637: else
  5826                           ;main.c: 638: step2--;
  5827  000ACE  065C               	decf	_step2,f,c
  5828  000AD0                     i2l403:
  5829  000AD0  C017  FFF5         	movff	??_ISR+14,tablat
  5830  000AD4  C016  FFF8         	movff	??_ISR+13,tblptru
  5831  000AD8  C015  FFF7         	movff	??_ISR+12,tblptrh
  5832  000ADC  C014  FFF6         	movff	??_ISR+11,tblptrl
  5833  000AE0  C013  FFF4         	movff	??_ISR+10,prodh
  5834  000AE4  C012  FFF3         	movff	??_ISR+9,prodl
  5835  000AE8  C011  FFDA         	movff	??_ISR+8,fsr2h
  5836  000AEC  C010  FFD9         	movff	??_ISR+7,fsr2l
  5837  000AF0  C00F  FFE2         	movff	??_ISR+6,fsr1h
  5838  000AF4  C00E  FFE1         	movff	??_ISR+5,fsr1l
  5839  000AF8  C00D  FFEA         	movff	??_ISR+4,fsr0h
  5840  000AFC  C00C  FFE9         	movff	??_ISR+3,fsr0l
  5841  000B00  C00B  FFFB         	movff	??_ISR+2,pclatu
  5842  000B04  C00A  FFFA         	movff	??_ISR+1,pclath
  5843  000B08  9263               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5844  000B0A  0011               	retfie		f
  5845  000B0C                     __end_of_ISR:
  5846                           	opt stack 0
  5847                           pclatu	equ	0xFFB
  5848                           pclath	equ	0xFFA
  5849                           tblptru	equ	0xFF8
  5850                           tblptrh	equ	0xFF7
  5851                           tblptrl	equ	0xFF6
  5852                           tablat	equ	0xFF5
  5853                           prodh	equ	0xFF4
  5854                           prodl	equ	0xFF3
  5855                           intcon	equ	0xFF2
  5856                           intcon3	equ	0xFF0
  5857                           postinc0	equ	0xFEE
  5858                           fsr0h	equ	0xFEA
  5859                           fsr0l	equ	0xFE9
  5860                           wreg	equ	0xFE8
  5861                           fsr1h	equ	0xFE2
  5862                           fsr1l	equ	0xFE1
  5863                           indf2	equ	0xFDF
  5864                           postinc2	equ	0xFDE
  5865                           postdec2	equ	0xFDD
  5866                           fsr2h	equ	0xFDA
  5867                           fsr2l	equ	0xFD9
  5868                           status	equ	0xFD8
  5869                           
  5870 ;; *************** function i2_stopOperation *****************
  5871 ;; Defined at:
  5872 ;;		line 327 in file "../main.c"
  5873 ;; Parameters:    Size  Location     Type
  5874 ;;		None
  5875 ;; Auto vars:     Size  Location     Type
  5876 ;;		None
  5877 ;; Return value:  Size  Location     Type
  5878 ;;                  1    wreg      void 
  5879 ;; Registers used:
  5880 ;;		wreg, status,2, status,0, cstack
  5881 ;; Tracked objects:
  5882 ;;		On entry : 0/0
  5883 ;;		On exit  : 0/0
  5884 ;;		Unchanged: 0/0
  5885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5886 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5887 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5888 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5889 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5890 ;;Total ram usage:        0 bytes
  5891 ;; Hardware stack levels used:    1
  5892 ;; Hardware stack levels required when called:    1
  5893 ;; This function calls:
  5894 ;;		i2___awdiv
  5895 ;;		i2___awmod
  5896 ;; This function is called by:
  5897 ;;		_ISR
  5898 ;; This function uses a non-reentrant model
  5899 ;;
  5900                           
  5901                           	psect	text25
  5902  000D44                     __ptext25:
  5903                           	opt stack 0
  5904  000D44                     i2_stopOperation:
  5905                           	opt stack 25
  5906                           
  5907                           ;main.c: 328: T0CONbits.TMR0ON = 0;
  5908                           
  5909                           ;incstack = 0
  5910  000D44  9ED5               	bcf	4053,7,c	;volatile
  5911                           
  5912                           ;main.c: 329: T1CONbits.TMR1ON = 0;
  5913  000D46  90CD               	bcf	4045,0,c	;volatile
  5914                           
  5915                           ;main.c: 330: TMR0 = 55770;
  5916  000D48  0ED9               	movlw	217
  5917  000D4A  6ED7               	movwf	4055,c	;volatile
  5918  000D4C  0EDA               	movlw	218
  5919  000D4E  6ED6               	movwf	4054,c	;volatile
  5920                           
  5921                           ;main.c: 331: TMR1 = 48035;
  5922  000D50  0EBB               	movlw	187
  5923  000D52  6ECF               	movwf	4047,c	;volatile
  5924  000D54  0EA3               	movlw	163
  5925  000D56  6ECE               	movwf	4046,c	;volatile
  5926                           
  5927                           ;main.c: 332: num9V = count9V;
  5928  000D58  C049  F04F         	movff	_count9V,_num9V
  5929                           
  5930                           ;main.c: 333: numC = countC;
  5931  000D5C  C04B  F052         	movff	_countC,_numC
  5932                           
  5933                           ;main.c: 334: numAA = countAA;
  5934  000D60  C04A  F050         	movff	_countAA,_numAA
  5935                           
  5936                           ;main.c: 335: numDrain = countDrain;
  5937  000D64  C04C  F053         	movff	_countDrain,_numDrain
  5938                           
  5939                           ;main.c: 336: count9V = 0;
  5940  000D68  0E00               	movlw	0
  5941  000D6A  6E49               	movwf	_count9V,c
  5942                           
  5943                           ;main.c: 337: countC = 0;
  5944  000D6C  0E00               	movlw	0
  5945  000D6E  6E4B               	movwf	_countC,c
  5946                           
  5947                           ;main.c: 338: countAA = 0;
  5948  000D70  0E00               	movlw	0
  5949  000D72  6E4A               	movwf	_countAA,c
  5950                           
  5951                           ;main.c: 339: countDrain = 0;
  5952  000D74  0E00               	movlw	0
  5953  000D76  6E4C               	movwf	_countDrain,c
  5954                           
  5955                           ;main.c: 340: min = opTimer / 60;
  5956  000D78  C054  F001         	movff	_opTimer,i2___awdiv@dividend
  5957  000D7C  6A02               	clrf	i2___awdiv@dividend+1,c
  5958  000D7E  0E00               	movlw	0
  5959  000D80  6E04               	movwf	i2___awdiv@divisor+1,c
  5960  000D82  0E3C               	movlw	60
  5961  000D84  6E03               	movwf	i2___awdiv@divisor,c
  5962  000D86  EC85  F007         	call	i2___awdiv	;wreg free
  5963  000D8A  5001               	movf	?i2___awdiv,w,c
  5964  000D8C  6E4E               	movwf	_min,c
  5965                           
  5966                           ;main.c: 341: sec = opTimer % 60;
  5967  000D8E  C054  F001         	movff	_opTimer,i2___awmod@dividend
  5968  000D92  6A02               	clrf	i2___awmod@dividend+1,c
  5969  000D94  0E00               	movlw	0
  5970  000D96  6E04               	movwf	i2___awmod@divisor+1,c
  5971  000D98  0E3C               	movlw	60
  5972  000D9A  6E03               	movwf	i2___awmod@divisor,c
  5973  000D9C  EC40  F008         	call	i2___awmod	;wreg free
  5974  000DA0  5001               	movf	?i2___awmod,w,c
  5975  000DA2  6E59               	movwf	_sec,c
  5976                           
  5977                           ;main.c: 342: opTimer = 0;
  5978  000DA4  0E00               	movlw	0
  5979  000DA6  6E54               	movwf	_opTimer,c
  5980                           
  5981                           ;main.c: 343: solOnTimer = 0;
  5982  000DA8  0E00               	movlw	0
  5983  000DAA  6E5A               	movwf	_solOnTimer,c
  5984                           
  5985                           ;main.c: 344: doneTimer = 0;
  5986  000DAC  0E00               	movlw	0
  5987  000DAE  6E4D               	movwf	_doneTimer,c
  5988                           
  5989                           ;main.c: 345: waitMotor = 0;
  5990  000DB0  0E00               	movlw	0
  5991  000DB2  6E48               	movwf	_waitMotor+1,c
  5992  000DB4  0E00               	movlw	0
  5993  000DB6  6E47               	movwf	_waitMotor,c
  5994                           
  5995                           ;main.c: 346: stepGear = 0;
  5996  000DB8  0E00               	movlw	0
  5997  000DBA  6E5D               	movwf	_stepGear,c
  5998                           
  5999                           ;main.c: 347: plat1Left = 0;
  6000  000DBC  0E00               	movlw	0
  6001  000DBE  6E55               	movwf	_plat1Left,c
  6002                           
  6003                           ;main.c: 348: plat1Right = 0;
  6004  000DC0  0E00               	movlw	0
  6005  000DC2  6E56               	movwf	_plat1Right,c
  6006                           
  6007                           ;main.c: 349: plat2Left = 0;
  6008  000DC4  0E00               	movlw	0
  6009  000DC6  6E57               	movwf	_plat2Left,c
  6010                           
  6011                           ;main.c: 350: plat2Right = 0;
  6012  000DC8  0E00               	movlw	0
  6013  000DCA  6E58               	movwf	_plat2Right,c
  6014                           
  6015                           ;main.c: 351: LATEbits.LE0 = 0;;
  6016  000DCC  908D               	bcf	3981,0,c	;volatile
  6017                           
  6018                           ;main.c: 352: LATEbits.LE1 = 0;;
  6019  000DCE  928D               	bcf	3981,1,c	;volatile
  6020                           
  6021                           ;main.c: 353: LATCbits.LC5 = 0;;
  6022  000DD0  9A8B               	bcf	3979,5,c	;volatile
  6023                           
  6024                           ;main.c: 354: LATDbits.LD0 = 0;;
  6025  000DD2  908C               	bcf	3980,0,c	;volatile
  6026                           
  6027                           ;main.c: 355: LATDbits.LD1 = 0;;
  6028  000DD4  928C               	bcf	3980,1,c	;volatile
  6029                           
  6030                           ;main.c: 356: LATAbits.LA2 = 0;;
  6031  000DD6  9489               	bcf	3977,2,c	;volatile
  6032                           
  6033                           ;main.c: 357: LATAbits.LA3 = 0;;
  6034  000DD8  9689               	bcf	3977,3,c	;volatile
  6035                           
  6036                           ;main.c: 358: LATAbits.LA4 = 0;;
  6037  000DDA  9889               	bcf	3977,4,c	;volatile
  6038                           
  6039                           ;main.c: 359: LATAbits.LA5 = 0;;
  6040  000DDC  9A89               	bcf	3977,5,c	;volatile
  6041                           
  6042                           ;main.c: 360: LATBbits.LB0 = 0;;
  6043  000DDE  908A               	bcf	3978,0,c	;volatile
  6044                           
  6045                           ;main.c: 361: LATBbits.LB2 = 0;;
  6046  000DE0  948A               	bcf	3978,2,c	;volatile
  6047                           
  6048                           ;main.c: 362: LATBbits.LB3 = 0;;
  6049  000DE2  968A               	bcf	3978,3,c	;volatile
  6050                           
  6051                           ;main.c: 363: LATAbits.LA6 = 0;;
  6052  000DE4  9C89               	bcf	3977,6,c	;volatile
  6053                           
  6054                           ;main.c: 364: LATCbits.LC1= 0;;
  6055  000DE6  928B               	bcf	3979,1,c	;volatile
  6056                           
  6057                           ;main.c: 365: LATAbits.LA7 = 0;;
  6058  000DE8  9E89               	bcf	3977,7,c	;volatile
  6059                           
  6060                           ;main.c: 366: LATCbits.LC2 = 0;;
  6061  000DEA  948B               	bcf	3979,2,c	;volatile
  6062                           
  6063                           ;main.c: 367: LATCbits.LC0 = 0;;
  6064  000DEC  908B               	bcf	3979,0,c	;volatile
  6065  000DEE  0012               	return		;funcret
  6066  000DF0                     __end_ofi2_stopOperation:
  6067                           	opt stack 0
  6068                           pclatu	equ	0xFFB
  6069                           pclath	equ	0xFFA
  6070                           tblptru	equ	0xFF8
  6071                           tblptrh	equ	0xFF7
  6072                           tblptrl	equ	0xFF6
  6073                           tablat	equ	0xFF5
  6074                           prodh	equ	0xFF4
  6075                           prodl	equ	0xFF3
  6076                           intcon	equ	0xFF2
  6077                           intcon3	equ	0xFF0
  6078                           postinc0	equ	0xFEE
  6079                           fsr0h	equ	0xFEA
  6080                           fsr0l	equ	0xFE9
  6081                           wreg	equ	0xFE8
  6082                           fsr1h	equ	0xFE2
  6083                           fsr1l	equ	0xFE1
  6084                           indf2	equ	0xFDF
  6085                           postinc2	equ	0xFDE
  6086                           postdec2	equ	0xFDD
  6087                           fsr2h	equ	0xFDA
  6088                           fsr2l	equ	0xFD9
  6089                           status	equ	0xFD8
  6090                           
  6091 ;; *************** function i2___awmod *****************
  6092 ;; Defined at:
  6093 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  6094 ;; Parameters:    Size  Location     Type
  6095 ;;  dividend        2    0[COMRAM] int 
  6096 ;;  divisor         2    2[COMRAM] int 
  6097 ;; Auto vars:     Size  Location     Type
  6098 ;;  __awmod         1    5[COMRAM] unsigned char 
  6099 ;;  __awmod         1    4[COMRAM] unsigned char 
  6100 ;; Return value:  Size  Location     Type
  6101 ;;                  2    0[COMRAM] int 
  6102 ;; Registers used:
  6103 ;;		wreg, status,2, status,0
  6104 ;; Tracked objects:
  6105 ;;		On entry : 0/0
  6106 ;;		On exit  : 0/0
  6107 ;;		Unchanged: 0/0
  6108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6109 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6110 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6111 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6112 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6113 ;;Total ram usage:        6 bytes
  6114 ;; Hardware stack levels used:    1
  6115 ;; This function calls:
  6116 ;;		Nothing
  6117 ;; This function is called by:
  6118 ;;		i2_stopOperation
  6119 ;; This function uses a non-reentrant model
  6120 ;;
  6121                           
  6122                           	psect	text26
  6123  001080                     __ptext26:
  6124                           	opt stack 0
  6125  001080                     i2___awmod:
  6126                           	opt stack 25
  6127                           
  6128                           ;incstack = 0
  6129  001080  0E00               	movlw	0
  6130  001082  6E06               	movwf	i2___awmod@sign,c
  6131  001084  AE02               	btfss	i2___awmod@dividend+1,7,c
  6132  001086  D006               	goto	i2l2481
  6133  001088  6C01               	negf	i2___awmod@dividend,c
  6134  00108A  1E02               	comf	i2___awmod@dividend+1,f,c
  6135  00108C  B0D8               	btfsc	status,0,c
  6136  00108E  2A02               	incf	i2___awmod@dividend+1,f,c
  6137  001090  0E01               	movlw	1
  6138  001092  6E06               	movwf	i2___awmod@sign,c
  6139  001094                     i2l2481:
  6140  001094  AE04               	btfss	i2___awmod@divisor+1,7,c
  6141  001096  D004               	goto	i2l2485
  6142  001098  6C03               	negf	i2___awmod@divisor,c
  6143  00109A  1E04               	comf	i2___awmod@divisor+1,f,c
  6144  00109C  B0D8               	btfsc	status,0,c
  6145  00109E  2A04               	incf	i2___awmod@divisor+1,f,c
  6146  0010A0                     i2l2485:
  6147  0010A0  5003               	movf	i2___awmod@divisor,w,c
  6148  0010A2  1004               	iorwf	i2___awmod@divisor+1,w,c
  6149  0010A4  B4D8               	btfsc	status,2,c
  6150  0010A6  D018               	goto	i2l2501
  6151  0010A8  0E01               	movlw	1
  6152  0010AA  6E05               	movwf	i2___awmod@counter,c
  6153  0010AC  D004               	goto	i2l2491
  6154  0010AE                     i2l2489:
  6155  0010AE  90D8               	bcf	status,0,c
  6156  0010B0  3603               	rlcf	i2___awmod@divisor,f,c
  6157  0010B2  3604               	rlcf	i2___awmod@divisor+1,f,c
  6158  0010B4  2A05               	incf	i2___awmod@counter,f,c
  6159  0010B6                     i2l2491:
  6160  0010B6  AE04               	btfss	i2___awmod@divisor+1,7,c
  6161  0010B8  D7FA               	goto	i2l2489
  6162  0010BA                     i2l2493:
  6163  0010BA  5003               	movf	i2___awmod@divisor,w,c
  6164  0010BC  5C01               	subwf	i2___awmod@dividend,w,c
  6165  0010BE  5004               	movf	i2___awmod@divisor+1,w,c
  6166  0010C0  5802               	subwfb	i2___awmod@dividend+1,w,c
  6167  0010C2  A0D8               	btfss	status,0,c
  6168  0010C4  D004               	goto	i2l2497
  6169  0010C6  5003               	movf	i2___awmod@divisor,w,c
  6170  0010C8  5E01               	subwf	i2___awmod@dividend,f,c
  6171  0010CA  5004               	movf	i2___awmod@divisor+1,w,c
  6172  0010CC  5A02               	subwfb	i2___awmod@dividend+1,f,c
  6173  0010CE                     i2l2497:
  6174  0010CE  90D8               	bcf	status,0,c
  6175  0010D0  3204               	rrcf	i2___awmod@divisor+1,f,c
  6176  0010D2  3203               	rrcf	i2___awmod@divisor,f,c
  6177  0010D4  2E05               	decfsz	i2___awmod@counter,f,c
  6178  0010D6  D7F1               	goto	i2l2493
  6179  0010D8                     i2l2501:
  6180  0010D8  5006               	movf	i2___awmod@sign,w,c
  6181  0010DA  B4D8               	btfsc	status,2,c
  6182  0010DC  D004               	goto	i2l2505
  6183  0010DE  6C01               	negf	i2___awmod@dividend,c
  6184  0010E0  1E02               	comf	i2___awmod@dividend+1,f,c
  6185  0010E2  B0D8               	btfsc	status,0,c
  6186  0010E4  2A02               	incf	i2___awmod@dividend+1,f,c
  6187  0010E6                     i2l2505:
  6188  0010E6  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
  6189  0010EA  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
  6190  0010EE  0012               	return	
  6191  0010F0                     __end_ofi2___awmod:
  6192                           	opt stack 0
  6193                           pclatu	equ	0xFFB
  6194                           pclath	equ	0xFFA
  6195                           tblptru	equ	0xFF8
  6196                           tblptrh	equ	0xFF7
  6197                           tblptrl	equ	0xFF6
  6198                           tablat	equ	0xFF5
  6199                           prodh	equ	0xFF4
  6200                           prodl	equ	0xFF3
  6201                           intcon	equ	0xFF2
  6202                           intcon3	equ	0xFF0
  6203                           postinc0	equ	0xFEE
  6204                           fsr0h	equ	0xFEA
  6205                           fsr0l	equ	0xFE9
  6206                           wreg	equ	0xFE8
  6207                           fsr1h	equ	0xFE2
  6208                           fsr1l	equ	0xFE1
  6209                           indf2	equ	0xFDF
  6210                           postinc2	equ	0xFDE
  6211                           postdec2	equ	0xFDD
  6212                           fsr2h	equ	0xFDA
  6213                           fsr2l	equ	0xFD9
  6214                           status	equ	0xFD8
  6215                           
  6216 ;; *************** function i2___awdiv *****************
  6217 ;; Defined at:
  6218 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  6219 ;; Parameters:    Size  Location     Type
  6220 ;;  dividend        2    0[COMRAM] int 
  6221 ;;  divisor         2    2[COMRAM] int 
  6222 ;; Auto vars:     Size  Location     Type
  6223 ;;  __awdiv         2    6[COMRAM] int 
  6224 ;;  __awdiv         1    5[COMRAM] unsigned char 
  6225 ;;  __awdiv         1    4[COMRAM] unsigned char 
  6226 ;; Return value:  Size  Location     Type
  6227 ;;                  2    0[COMRAM] int 
  6228 ;; Registers used:
  6229 ;;		wreg, status,2, status,0
  6230 ;; Tracked objects:
  6231 ;;		On entry : 0/0
  6232 ;;		On exit  : 0/0
  6233 ;;		Unchanged: 0/0
  6234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6235 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6236 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6237 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6238 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6239 ;;Total ram usage:        8 bytes
  6240 ;; Hardware stack levels used:    1
  6241 ;; This function calls:
  6242 ;;		Nothing
  6243 ;; This function is called by:
  6244 ;;		i2_stopOperation
  6245 ;; This function uses a non-reentrant model
  6246 ;;
  6247                           
  6248                           	psect	text27
  6249  000F0A                     __ptext27:
  6250                           	opt stack 0
  6251  000F0A                     i2___awdiv:
  6252                           	opt stack 25
  6253                           
  6254                           ;incstack = 0
  6255  000F0A  0E00               	movlw	0
  6256  000F0C  6E06               	movwf	i2___awdiv@sign,c
  6257  000F0E  AE04               	btfss	i2___awdiv@divisor+1,7,c
  6258  000F10  D006               	goto	i2l2437
  6259  000F12  6C03               	negf	i2___awdiv@divisor,c
  6260  000F14  1E04               	comf	i2___awdiv@divisor+1,f,c
  6261  000F16  B0D8               	btfsc	status,0,c
  6262  000F18  2A04               	incf	i2___awdiv@divisor+1,f,c
  6263  000F1A  0E01               	movlw	1
  6264  000F1C  6E06               	movwf	i2___awdiv@sign,c
  6265  000F1E                     i2l2437:
  6266  000F1E  AE02               	btfss	i2___awdiv@dividend+1,7,c
  6267  000F20  D006               	goto	i2l2443
  6268  000F22  6C01               	negf	i2___awdiv@dividend,c
  6269  000F24  1E02               	comf	i2___awdiv@dividend+1,f,c
  6270  000F26  B0D8               	btfsc	status,0,c
  6271  000F28  2A02               	incf	i2___awdiv@dividend+1,f,c
  6272  000F2A  0E01               	movlw	1
  6273  000F2C  1A06               	xorwf	i2___awdiv@sign,f,c
  6274  000F2E                     i2l2443:
  6275  000F2E  0E00               	movlw	0
  6276  000F30  6E08               	movwf	i2___awdiv@quotient+1,c
  6277  000F32  0E00               	movlw	0
  6278  000F34  6E07               	movwf	i2___awdiv@quotient,c
  6279  000F36  5003               	movf	i2___awdiv@divisor,w,c
  6280  000F38  1004               	iorwf	i2___awdiv@divisor+1,w,c
  6281  000F3A  B4D8               	btfsc	status,2,c
  6282  000F3C  D01C               	goto	i2l2465
  6283  000F3E  0E01               	movlw	1
  6284  000F40  6E05               	movwf	i2___awdiv@counter,c
  6285  000F42  D004               	goto	i2l2451
  6286  000F44                     i2l2449:
  6287  000F44  90D8               	bcf	status,0,c
  6288  000F46  3603               	rlcf	i2___awdiv@divisor,f,c
  6289  000F48  3604               	rlcf	i2___awdiv@divisor+1,f,c
  6290  000F4A  2A05               	incf	i2___awdiv@counter,f,c
  6291  000F4C                     i2l2451:
  6292  000F4C  AE04               	btfss	i2___awdiv@divisor+1,7,c
  6293  000F4E  D7FA               	goto	i2l2449
  6294  000F50                     i2l2453:
  6295  000F50  90D8               	bcf	status,0,c
  6296  000F52  3607               	rlcf	i2___awdiv@quotient,f,c
  6297  000F54  3608               	rlcf	i2___awdiv@quotient+1,f,c
  6298  000F56  5003               	movf	i2___awdiv@divisor,w,c
  6299  000F58  5C01               	subwf	i2___awdiv@dividend,w,c
  6300  000F5A  5004               	movf	i2___awdiv@divisor+1,w,c
  6301  000F5C  5802               	subwfb	i2___awdiv@dividend+1,w,c
  6302  000F5E  A0D8               	btfss	status,0,c
  6303  000F60  D005               	goto	i2l2461
  6304  000F62  5003               	movf	i2___awdiv@divisor,w,c
  6305  000F64  5E01               	subwf	i2___awdiv@dividend,f,c
  6306  000F66  5004               	movf	i2___awdiv@divisor+1,w,c
  6307  000F68  5A02               	subwfb	i2___awdiv@dividend+1,f,c
  6308  000F6A  8007               	bsf	i2___awdiv@quotient,0,c
  6309  000F6C                     i2l2461:
  6310  000F6C  90D8               	bcf	status,0,c
  6311  000F6E  3204               	rrcf	i2___awdiv@divisor+1,f,c
  6312  000F70  3203               	rrcf	i2___awdiv@divisor,f,c
  6313  000F72  2E05               	decfsz	i2___awdiv@counter,f,c
  6314  000F74  D7ED               	goto	i2l2453
  6315  000F76                     i2l2465:
  6316  000F76  5006               	movf	i2___awdiv@sign,w,c
  6317  000F78  B4D8               	btfsc	status,2,c
  6318  000F7A  D004               	goto	i2l2469
  6319  000F7C  6C07               	negf	i2___awdiv@quotient,c
  6320  000F7E  1E08               	comf	i2___awdiv@quotient+1,f,c
  6321  000F80  B0D8               	btfsc	status,0,c
  6322  000F82  2A08               	incf	i2___awdiv@quotient+1,f,c
  6323  000F84                     i2l2469:
  6324  000F84  C007  F001         	movff	i2___awdiv@quotient,?i2___awdiv
  6325  000F88  C008  F002         	movff	i2___awdiv@quotient+1,?i2___awdiv+1
  6326  000F8C  0012               	return	
  6327  000F8E                     __end_ofi2___awdiv:
  6328                           	opt stack 0
  6329                           pclatu	equ	0xFFB
  6330                           pclath	equ	0xFFA
  6331                           tblptru	equ	0xFF8
  6332                           tblptrh	equ	0xFF7
  6333                           tblptrl	equ	0xFF6
  6334                           tablat	equ	0xFF5
  6335                           prodh	equ	0xFF4
  6336                           prodl	equ	0xFF3
  6337                           intcon	equ	0xFF2
  6338                           intcon3	equ	0xFF0
  6339                           postinc0	equ	0xFEE
  6340                           fsr0h	equ	0xFEA
  6341                           fsr0l	equ	0xFE9
  6342                           wreg	equ	0xFE8
  6343                           fsr1h	equ	0xFE2
  6344                           fsr1l	equ	0xFE1
  6345                           indf2	equ	0xFDF
  6346                           postinc2	equ	0xFDE
  6347                           postdec2	equ	0xFDD
  6348                           fsr2h	equ	0xFDA
  6349                           fsr2l	equ	0xFD9
  6350                           status	equ	0xFD8
  6351                           
  6352 ;; *************** function _switchMenu *****************
  6353 ;; Defined at:
  6354 ;;		line 304 in file "../main.c"
  6355 ;; Parameters:    Size  Location     Type
  6356 ;;  left            1    wreg     unsigned char 
  6357 ;;  right           1    0[COMRAM] unsigned char 
  6358 ;;  key             1    1[COMRAM] unsigned char 
  6359 ;; Auto vars:     Size  Location     Type
  6360 ;;  left            1    2[COMRAM] unsigned char 
  6361 ;; Return value:  Size  Location     Type
  6362 ;;                  1    wreg      void 
  6363 ;; Registers used:
  6364 ;;		wreg, status,2, status,0
  6365 ;; Tracked objects:
  6366 ;;		On entry : 0/0
  6367 ;;		On exit  : 0/0
  6368 ;;		Unchanged: 0/0
  6369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6370 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6371 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6372 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6373 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6374 ;;Total ram usage:        3 bytes
  6375 ;; Hardware stack levels used:    1
  6376 ;; This function calls:
  6377 ;;		Nothing
  6378 ;; This function is called by:
  6379 ;;		_ISR
  6380 ;; This function uses a non-reentrant model
  6381 ;;
  6382                           
  6383                           	psect	text28
  6384  001272                     __ptext28:
  6385                           	opt stack 0
  6386  001272                     _switchMenu:
  6387                           	opt stack 26
  6388                           
  6389                           ;incstack = 0
  6390                           ;switchMenu@left stored from wreg
  6391  001272  6E03               	movwf	switchMenu@left,c
  6392                           
  6393                           ;main.c: 305: if (key == right){
  6394  001274  5001               	movf	switchMenu@right,w,c
  6395  001276  1802               	xorwf	switchMenu@key,w,c
  6396  001278  A4D8               	btfss	status,2,c
  6397  00127A  D009               	goto	i2l2813
  6398                           
  6399                           ;main.c: 306: if (screenMode == 2)
  6400  00127C  0E02               	movlw	2
  6401  00127E  1862               	xorwf	_screenMode,w,c
  6402  001280  A4D8               	btfss	status,2,c
  6403  001282  D003               	goto	i2l2811
  6404                           
  6405                           ;main.c: 307: screenMode = 9;
  6406  001284  0E09               	movlw	9
  6407  001286  6E62               	movwf	_screenMode,c
  6408  001288  0012               	return	
  6409  00128A                     i2l2811:
  6410                           
  6411                           ;main.c: 308: else
  6412                           ;main.c: 309: screenMode--;
  6413  00128A  0662               	decf	_screenMode,f,c
  6414                           
  6415                           ;main.c: 310: }
  6416  00128C  0012               	return	
  6417  00128E                     i2l2813:
  6418                           
  6419                           ;main.c: 311: else if (key == left){
  6420  00128E  5003               	movf	switchMenu@left,w,c
  6421  001290  1802               	xorwf	switchMenu@key,w,c
  6422  001292  A4D8               	btfss	status,2,c
  6423  001294  0012               	return	
  6424                           
  6425                           ;main.c: 312: if (screenMode == 9)
  6426  001296  0E09               	movlw	9
  6427  001298  1862               	xorwf	_screenMode,w,c
  6428  00129A  A4D8               	btfss	status,2,c
  6429  00129C  D003               	goto	i2l2819
  6430                           
  6431                           ;main.c: 313: screenMode = 2;
  6432  00129E  0E02               	movlw	2
  6433  0012A0  6E62               	movwf	_screenMode,c
  6434  0012A2  0012               	return	
  6435  0012A4                     i2l2819:
  6436                           
  6437                           ;main.c: 314: else
  6438                           ;main.c: 315: screenMode++;
  6439  0012A4  2A62               	incf	_screenMode,f,c
  6440  0012A6  0012               	return	
  6441  0012A8                     __end_of_switchMenu:
  6442                           	opt stack 0
  6443                           pclatu	equ	0xFFB
  6444                           pclath	equ	0xFFA
  6445                           tblptru	equ	0xFF8
  6446                           tblptrh	equ	0xFF7
  6447                           tblptrl	equ	0xFF6
  6448                           tablat	equ	0xFF5
  6449                           prodh	equ	0xFF4
  6450                           prodl	equ	0xFF3
  6451                           intcon	equ	0xFF2
  6452                           intcon3	equ	0xFF0
  6453                           postinc0	equ	0xFEE
  6454                           fsr0h	equ	0xFEA
  6455                           fsr0l	equ	0xFE9
  6456                           wreg	equ	0xFE8
  6457                           fsr1h	equ	0xFE2
  6458                           fsr1l	equ	0xFE1
  6459                           indf2	equ	0xFDF
  6460                           postinc2	equ	0xFDE
  6461                           postdec2	equ	0xFDD
  6462                           fsr2h	equ	0xFDA
  6463                           fsr2l	equ	0xFD9
  6464                           status	equ	0xFD8
  6465                           pclatu	equ	0xFFB
  6466                           pclath	equ	0xFFA
  6467                           tblptru	equ	0xFF8
  6468                           tblptrh	equ	0xFF7
  6469                           tblptrl	equ	0xFF6
  6470                           tablat	equ	0xFF5
  6471                           prodh	equ	0xFF4
  6472                           prodl	equ	0xFF3
  6473                           intcon	equ	0xFF2
  6474                           intcon3	equ	0xFF0
  6475                           postinc0	equ	0xFEE
  6476                           fsr0h	equ	0xFEA
  6477                           fsr0l	equ	0xFE9
  6478                           wreg	equ	0xFE8
  6479                           fsr1h	equ	0xFE2
  6480                           fsr1l	equ	0xFE1
  6481                           indf2	equ	0xFDF
  6482                           postinc2	equ	0xFDE
  6483                           postdec2	equ	0xFDD
  6484                           fsr2h	equ	0xFDA
  6485                           fsr2l	equ	0xFD9
  6486                           status	equ	0xFD8
  6487                           
  6488                           	psect	rparam
  6489  0000                     pclatu	equ	0xFFB
  6490                           pclath	equ	0xFFA
  6491                           tblptru	equ	0xFF8
  6492                           tblptrh	equ	0xFF7
  6493                           tblptrl	equ	0xFF6
  6494                           tablat	equ	0xFF5
  6495                           prodh	equ	0xFF4
  6496                           prodl	equ	0xFF3
  6497                           intcon	equ	0xFF2
  6498                           intcon3	equ	0xFF0
  6499                           postinc0	equ	0xFEE
  6500                           fsr0h	equ	0xFEA
  6501                           fsr0l	equ	0xFE9
  6502                           wreg	equ	0xFE8
  6503                           fsr1h	equ	0xFE2
  6504                           fsr1l	equ	0xFE1
  6505                           indf2	equ	0xFDF
  6506                           postinc2	equ	0xFDE
  6507                           postdec2	equ	0xFDD
  6508                           fsr2h	equ	0xFDA
  6509                           fsr2l	equ	0xFD9
  6510                           status	equ	0xFD8
  6511                           
  6512                           	psect	temp
  6513  000063                     btemp:
  6514                           	opt stack 0
  6515  000063                     	ds	1
  6516  0000                     int$flags	set	btemp
  6517                           pclatu	equ	0xFFB
  6518                           pclath	equ	0xFFA
  6519                           tblptru	equ	0xFF8
  6520                           tblptrh	equ	0xFF7
  6521                           tblptrl	equ	0xFF6
  6522                           tablat	equ	0xFF5
  6523                           prodh	equ	0xFF4
  6524                           prodl	equ	0xFF3
  6525                           intcon	equ	0xFF2
  6526                           intcon3	equ	0xFF0
  6527                           postinc0	equ	0xFEE
  6528                           fsr0h	equ	0xFEA
  6529                           fsr0l	equ	0xFE9
  6530                           wreg	equ	0xFE8
  6531                           fsr1h	equ	0xFE2
  6532                           fsr1l	equ	0xFE1
  6533                           indf2	equ	0xFDF
  6534                           postinc2	equ	0xFDE
  6535                           postdec2	equ	0xFDD
  6536                           fsr2h	equ	0xFDA
  6537                           fsr2l	equ	0xFD9
  6538                           status	equ	0xFD8


Data Sizes:
    Strings     384
    Constant    35
    Data        1
    BSS         34
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     63      98
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 25
		 -> STR_23(CODE[17]), STR_22(CODE[17]), STR_21(CODE[23]), STR_20(CODE[23]), 
		 -> STR_19(CODE[21]), STR_18(CODE[17]), STR_17(CODE[21]), STR_16(CODE[17]), 
		 -> STR_15(CODE[21]), STR_14(CODE[17]), STR_13(CODE[19]), STR_12(CODE[17]), 
		 -> STR_11(CODE[19]), STR_10(CODE[17]), STR_9(CODE[25]), STR_8(CODE[17]), 
		 -> STR_7(CODE[17]), STR_6(CODE[17]), STR_5(CODE[18]), STR_4(CODE[17]), 
		 -> STR_3(CODE[17]), STR_2(CODE[17]), STR_1(CODE[17]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _testBatteries->_isFluctuate
    _isFluctuate->_abs
    _stopOperation->___awdiv
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _I2C_Master_Init->___lldiv

Critical Paths under _ISR in COMRAM

    i2_stopOperation->i2___awdiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0    5947
                                             58 COMRAM     5     5      0
                    _I2C_Master_Init
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _initLCD
                        _isFluctuate
                            _lcdInst
                             _printf
                      _stopOperation
                      _testBatteries
 ---------------------------------------------------------------------------------
 (1) _testBatteries                                        2     2      0     258
                                             38 COMRAM     2     2      0
                        _isFluctuate
 ---------------------------------------------------------------------------------
 (2) _isFluctuate                                         10     8      2     258
                                             28 COMRAM    10     8      2
                                _abs
                            _readADC
 ---------------------------------------------------------------------------------
 (3) _readADC                                              1     1      0      15
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _abs                                                  4     2      2     130
                                             24 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _stopOperation                                        0     0      0     852
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     424
                                             24 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     428
                                             24 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _printf                                              31    23      8    3619
                                             36 COMRAM    22    14      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      90
                                             26 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             24 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     287
                                             24 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     287
                                             31 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     418
                                             24 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0      90
                                             27 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0      90
                                             26 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0      75
                                             24 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Write                                     2     0      2     214
                                             25 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Read                                      2     2      0      30
                                             25 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Wait                                      1     1      0       0
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     376
                                             37 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     290
                                             24 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _ISR                                                 16    16      0     983
                                              8 COMRAM    16    16      0
                         _switchMenu
                    i2_stopOperation
 ---------------------------------------------------------------------------------
 (5) i2_stopOperation                                      0     0      0     700
                          i2___awdiv
                          i2___awmod
 ---------------------------------------------------------------------------------
 (6) i2___awmod                                            6     2      4     348
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) i2___awdiv                                            8     4      4     352
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (5) _switchMenu                                           3     1      2     216
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _I2C_Master_Read
     _I2C_Master_Wait
   _I2C_Master_Start
     _I2C_Master_Wait
   _I2C_Master_Stop
     _I2C_Master_Wait
   _I2C_Master_Write
     _I2C_Master_Wait
   _initLCD
     _lcdInst
       _lcdNibble
   _isFluctuate
     _abs
     _readADC
   _lcdInst
     _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
       _lcdNibble
   _stopOperation
     ___awdiv
     ___awmod
   _testBatteries
     _isFluctuate
       _abs
       _readADC

 _ISR (ROOT)
   _switchMenu
   i2_stopOperation
     i2___awdiv
     i2___awmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     3F      62       1       77.8%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      62      34        0.0%
DATA                 0      0      62       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sun Feb 26 00:43:03 2017

                       l30 137A               ___awdiv@sign 001E        ___wmul@multiplicand 001B  
              __CFG_BORV$3 000000               __CFG_CP0$OFF 000000               __CFG_CP1$OFF 000000  
             __CFG_CP2$OFF 000000               __CFG_CP3$OFF 000000                __CFG_OSC$HS 000000  
                      l312 1374                        l321 0B60                        l322 0B52  
                      l234 008A                        l332 0C44                        l260 020E  
                      l325 0BB2                        l174 12F2                        l326 0BA4  
                      l335 0C8C                        l247 01A6                        l328 0C04  
                      l272 02B2                        l248 01BA                        l329 0BF6  
                      l281 0360                        l265 0234                        l249 01CE  
                      l435 05F8                        l275 02F0                        l284 0398  
                      l278 0328                        l295 04BE                        l287 03D0  
                      l827 0FFE                        l880 1192                        l890 1268  
                      _GIE 007F97               __CFG_CPB$OFF 000000                        u440 1340  
                      _PEN 007E2A               __CFG_CPD$OFF 000000                        _ISR 0008  
                      _SEN 007E28                        _abs 12D4                        _min 004E  
                      _sec 0059               ___awmod@sign 001E                        prod 000FF3  
                      wreg 000FE8               __CFG_LVP$OFF 000000                       ?_ISR 0001  
             __CFG_WDT$OFF 000000                       ?_abs 0019                       l3011 02AA  
                     l3003 027E                       l3021 02E6                       l3005 0286  
                     l2311 0EC8                       l2303 0EAA                       l3031 031E  
                     l1425 1342                       l2401 116C                       l2321 0EE8  
                     l2313 0ECC                       l3041 0356                       l3107 0502  
                     l3051 038E                       l2421 124A                       l2309 0EC0  
                     l2325 0EF2                       l2341 1024                       l2253 0E16  
                     l3061 03C6                       l2351 1046                       l2263 0E78  
                     l3071 03FE                       l2409 1188                       l2425 125E  
                     l2417 123E                       l2329 0F00                       l2353 104A  
                     l2361 1068                       l2345 1030                       l2249 0E0E  
                     l3081 0444                       l3073 0408                       l2419 1246  
                     l2611 06F6                       l2523 0516                       l2267 0E7C  
                     l2605 06CA                       l2533 053A                       l2365 1076  
                     l2357 105E                       l2349 103E                       l3077 043C  
                     l3093 04B4                       l2375 0FB0                       l2279 135E  
                     l2623 0722                       l2551 05CA                       l2527 0526  
                     l3087 0460                       l2377 0FBC                       l2625 072A  
                     l2633 0750                       l2617 070C                       l2609 06EE  
                     l2529 0534                       l2297 0E9A                       l2387 0FF0  
                     l2379 0FC0                       l2635 0756                       l2643 07E0  
                     l2563 0626                       l2547 05C6                       l2539 0568  
                     l2397 1160                       l2637 079A                       l2645 07F0  
                     l2629 073E                       l2581 0670                       l2733 0C4C  
                     l2399 1168                       l2647 07F6                       l2583 0674  
                     l2567 0640                       l2751 0C94                       l2569 0644  
                     l2649 07FE                       l2905 00B6                       l2923 00F6  
                     l2597 06A0                       l2917 00DA                       l2909 00BE  
                     l2599 06B0                       l2927 00FE                       l2935 011A  
                     l2937 0124                       l2947 0180                       l2957 0192  
                     l2983 01E2                       l2993 021E                       l2987 01F8  
                     l2989 0200                       STR_1 FFDC                       STR_2 FFED  
                     STR_3 FFCB                       STR_4 FF54                       STR_5 FEED  
                     STR_6 FF98                       STR_7 FF76                       STR_8 FFBA  
                     STR_9 FE7E               isFluctuate@i 0026                       u2045 111E  
                     _LATA 000F89                       _LATB 000F8A                       _LATC 000F8B  
                     _LATD 000F8C                       _LATE 000F8D                       u2501 017E  
                     u3307 11B4                       u2620 0276                       u3317 11BC  
                     u1670 0E6E                       u3327 11DC                       u3247 00CC  
                     u3337 11E4                       u3257 010C                       u3267 04EE  
                     u3277 0E1C                       u3287 11F0                       u3297 1224  
                     _PEIE 007F96                       _RCEN 007E2B                       _TMR0 000FD6  
                     _TMR1 000FCE                       abs@x 0019                       _main 0012  
                     _keys FE5B                       _numC 0052                       _time 0040  
                     fsr0h 000FEA                       fsr1h 000FE2                       fsr2h 000FDA  
                     fsr0l 000FE9                       indf2 000FDF                       fsr1l 000FE1  
                     fsr2l 000FD9                       btemp 0063                       prodh 000FF4  
                     prodl 000FF3                       start 000E              __CFG_IESO$OFF 000000  
            __CFG_MCLRE$ON 000000               ___param_bank 000000                      ??_ISR 0009  
                    ??_abs 001B           ?_I2C_Master_Init 0026           ?_I2C_Master_Read 0001  
         ?_I2C_Master_Wait 0001           ?_I2C_Master_Stop 0001                      ?_main 0001  
                    _ACKEN 007E2C                      _ACKDT 007E2D            __end_of___awdiv 0F0A  
                    STR_10 FF65                      STR_11 FEDA                      STR_12 FF21  
                    STR_20 FE97                      STR_13 FEDA                      STR_21 FEAE  
                    STR_22 FFA9                      STR_14 FF43                      STR_23 FF10  
                    STR_15 FEC5                      STR_16 FF32                      STR_24 FEFF  
                    STR_17 FEC5                      STR_18 FF87                      STR_19 FEC5  
          __end_of___awmod 1080            __end_of___lldiv 1010                      _T0CON 000FD5  
          ___awdiv@divisor 001B                      _T1CON 000FCD            __end_of___lwdiv 119C  
          __end_of___lwmod 1272                      i2l403 0AD0                      i2l363 0948  
                    i2l365 0988            ___awdiv@counter 001D                      _PORTB 000F81  
                    _TRISA 000F92                      _TRISB 000F93                      _TRISC 000F94  
                    _TRISD 000F95                      _TRISE 000F96              _turn1BackLeft 005E  
            __CFG_PWRT$OFF 000000              __CFG_WRT0$OFF 000000              __CFG_WRT1$OFF 000000  
            __CFG_WRT2$OFF 000000              __CFG_WRT3$OFF 000000            __end_of_lcdInst 13A4  
           __CFG_EBTR0$OFF 000000             __CFG_FCMEN$OFF 000000             __CFG_EBTR1$OFF 000000  
            _turn2BackLeft 0060             __CFG_EBTR2$OFF 000000             __CFG_EBTR3$OFF 000000  
   __size_of_stopOperation 00AC              __CFG_WRTB$OFF 000000              __CFG_WRTC$OFF 000000  
            __CFG_WRTD$OFF 000000            __end_of_readADC 137A            __end_of_initLCD 1230  
           __CFG_EBTRB$OFF 000000            __end_of_dpowers FE76                      _numAA 0050  
                    _num9V 004F            __end_of_isdigit 1366                      _step1 005B  
                    _step2 005C                      _putch 138C                      main@i 003D  
                    pclath 000FFA                      tablat 000FF5                      status 000FD8  
       __size_ofi2___awdiv 0084         __size_ofi2___awmod 0070             __CFG_PBADEN$ON 000000  
          __initialization 12A8               __end_of_main 050C               __end_of_keys FE6C  
                   ??_main 003B              __activetblptr 000002          ?_I2C_Master_Start 0001  
        ?_I2C_Master_Write 001A         ??_I2C_Master_Start 001A                     _ADCON0 000FC2  
                   _ADCON1 000FC1         ??_I2C_Master_Write 001C                     _ADCON2 000FC0  
                   _ADRESH 000FC4                     _ADRESL 000FC3           ___awdiv@dividend 0019  
                   ?_putch 0001                     _INT1IE 007F83                     _INT1IF 007F80  
                   i2l3201 0998                     i2l3123 088A                     i2l2501 10D8  
                   i2l3213 09BC                     i2l3205 09A4                     i2l3141 08E8  
                   i2l3303 0AB2                     i2l3231 09EC                     i2l3223 09D8  
                   i2l3135 08C0                     i2l3127 0896                     i2l2505 10E6  
                   i2l3313 0ACE                     i2l3209 09B0                     i2l3225 09DA  
                   i2l3161 0912                     i2l2451 0F4C                     i2l2443 0F2E  
                   i2l3243 0A0E                     i2l3235 09F8                     i2l3219 09CC  
                   i2l3139 08E6                     i2l2461 0F6C                     i2l2453 0F50  
                   i2l2437 0F1E                     i2l3309 0AC2                     i2l3261 0A3C  
                   i2l3253 0A2A                     i2l3157 090A                     i2l3239 0A04  
                   i2l3255 0A2C                     i2l2449 0F44                     i2l2465 0F76  
                   i2l2481 1094                     i2l3273 0A60                     i2l3265 0A48  
                   i2l3249 0A1E                     i2l3169 0920                     i2l2811 128A  
                   i2l2491 10B6                     i2l3291 0A90                     i2l3283 0A7C  
                   i2l3187 094E                     i2l2813 128E                     i2l2469 0F84  
                   i2l2493 10BA                     i2l2485 10A0                     i2l3269 0A54  
                   i2l3285 0A7E                     i2l3189 0968                     i2l3295 0A9C  
                   i2l3279 0A70                     i2l2497 10CE                     i2l2489 10AE  
                   i2l2819 12A4                     i2l3299 0AA8                     _TMR0IE 007F95  
                   _TMR0IF 007F92                     _TMR1IE 007CE8                     _TMR1IF 007CF0  
                   _SSPADD 000FC8                     _TRISC3 007CA3                     _TRISC4 007CA4  
                   _SSPBUF 000FC9             _turn1BackRight 005F             __CFG_XINST$OFF 000000  
            _stopOperation 0C98             _turn2BackRight 0061       __size_of_isFluctuate 0096  
                   ___wmul 12FC                  ??___awdiv 001D             __CFG_STVREN$ON 000000  
                ??___awmod 001D                  ??___lldiv 0021                  ??___lwdiv 001D  
                ??___lwmod 0024                     _countC 004B                     clear_0 12C0  
         ___awdiv@quotient 001F            ___awmod@divisor 001B            ___awmod@counter 001D  
                ??_lcdInst 001B                     _printf 050C             i2___awdiv@sign 0006  
                ??_readADC 0019                  ??_initLCD 001C   __size_ofi2_stopOperation 00AC  
             __pdataCOMRAM 0062                  ??_isdigit 0019          __end_ofi2___awdiv 0F8E  
        __end_ofi2___awmod 10F0               __mediumconst FE5A                     tblptrh 000FF7  
                   tblptrl 000FF6                     tblptru 000FF8            switchMenu@right 0001  
           i2___awmod@sign 0006                 __accesstop 0080    __end_of__initialization 12C6  
            ___rparam_used 000001             ?_stopOperation 0001             __pcstackCOMRAM 0001  
            __end_of_putch 1398         __size_of_lcdNibble 004E                ISR@keypress 0018  
                  ??_putch 001B      __end_of_testBatteries 0C98                    ?___wmul 0019  
                  ?_printf 0025                    _SSPCON1 000FC6                    _SSPCON2 000FC5  
        ??i2_stopOperation 0009                    _SSPSTAT 000FC7                 _countDrain 004C  
          ??_stopOperation 0021          __end_of_lcdNibble 11EA                    __Hparam 0000  
                  __Lparam 0000                    ___awdiv 0E86                    ___awmod 1010  
                  ___lldiv 0F8E            __size_of___wmul 0026                    ___lwdiv 114A  
                  ___lwmod 1230                    __pcinit 12A8                 _plat1Right 0056  
                  __ramtop 1000                 _plat2Right 0058                    _lcdInst 1398  
                  __ptext0 0012                    __ptext1 0B0C                    __ptext2 0DF0  
                  __ptext3 1366                    __ptext4 12D4                    __ptext5 0C98  
                  __ptext6 1010                    __ptext7 0E86                    __ptext8 050C  
                  __ptext9 138C            __size_of_printf 030C                  _T0CONbits 000FD5  
                  _countAA 004A                    _count9V 0049                    _readADC 1366  
                  _initLCD 11EA               __size_of_ISR 0B04          __end_of_hexpowers FE7E  
                _T1CONbits 000FCD                    _dpowers FE6C               __size_of_abs 0028  
                  _isdigit 1348                    _opTimer 0054           ___awmod@dividend 0019  
                  _numBats 0051   __size_of_I2C_Master_Init 005A   __size_of_I2C_Master_Read 0026  
 __size_of_I2C_Master_Wait 0012   __size_of_I2C_Master_Stop 0008             __pintcode_body 0818  
     end_of_initialization 12C6              __Lmediumconst FE5A                    int_func 0818  
               _screenMode 0062  __size_of_I2C_Master_Start 0008  __size_of_I2C_Master_Write 000A  
          ___lldiv@divisor 001D            ___lldiv@counter 0025                    printf@c 003A  
                  printf@f 0025           I2C_Master_Init@c 0026           I2C_Master_Read@a 001A  
                  postdec2 000FDD                 _solOnTimer 005A                    postinc0 000FEE  
                  postinc2 000FDE                  i2___awdiv 0F0A                  i2___awmod 1080  
              printf@width 0038         i2___awdiv@dividend 0001              ??_isFluctuate 001F  
               _switchMenu 1272             __end_of___wmul 1322              __pidataCOMRAM 13BE  
           __end_of_printf 0818        start_initialization 12A8         i2___awdiv@quotient 0007  
              __end_of_ISR 0B0C                __end_of_abs 12FC                 ?i2___awdiv 0001  
               ?i2___awmod 0001          ??_I2C_Master_Init 002A          ??_I2C_Master_Read 001A  
        ??_I2C_Master_Wait 0019          ??_I2C_Master_Stop 001A                   ??___wmul 001D  
      __end_of_isFluctuate 0E86           __CFG_LPT1OSC$OFF 000000             switchMenu@left 0003  
          i2_stopOperation 0D44                   ??_printf 002D                __pbssCOMRAM 0040  
         _I2C_Master_Start 13B6           _I2C_Master_Write 13A4           ___lwdiv@dividend 0019  
        __CFG_CCP2MX$PORTC 000000                ?_switchMenu 0001     isFluctuate@tempVoltage 0023  
                __pintcode 0008              __pmediumconst FE5A                  _lcdNibble 119C  
                 ?___awdiv 0019                   ?___awmod 0019                   ?___lldiv 0019  
                 ?___lwdiv 0019                   ?___lwmod 0020                  _doneTimer 004D  
                 ?_lcdInst 0001                   ?_readADC 0001                   ?_initLCD 0001  
   __size_of_testBatteries 018C                   ?_isdigit 0001                  _hexpowers FE76  
         ___lwdiv@quotient 001D                ??i2___awdiv 0005                ??i2___awmod 0005  
                _plat1Left 0055                  _plat2Left 0057             __size_of_putch 000C  
           ___wmul@product 001D                   _LATAbits 000F89                   _LATBbits 000F8A  
                 _LATCbits 000F8B                   _LATDbits 000F8C                   _LATEbits 000F8D  
              _isFluctuate 0DF0      __end_of_stopOperation 0D44                   i2u292_40 0958  
                 i2u293_48 095A    __end_ofi2_stopOperation 0DF0                  _waitMotor 0047  
         __CFG_WDTPS$32768 000000                 ?_lcdNibble 0001                 _ADCON0bits 000FC2  
                main@i_629 003F                  main@i_578 003E          ___wmul@multiplier 0019  
            lcdNibble@data 001A                 printf@flag 0037              lcdNibble@temp 0019  
               printf@prec 0034          i2___awdiv@divisor 0003          i2___awdiv@counter 0005  
      __size_of_switchMenu 0036        I2C_Master_Read@temp 001B         i2___awmod@dividend 0001  
            _testBatteries 0B0C                   __Hrparam 0000                   __Lrparam 0000  
       __CFG_BOREN$SBORDIS 000000              switchMenu@key 0002           __size_of___awdiv 0084  
         __size_of___awmod 0070           __size_of___lldiv 0082           __size_of___lwdiv 0052  
         __size_of___lwmod 0042             readADC@channel 0019                _isdigit$930 001A  
         __size_of_lcdInst 000C            _I2C_Master_Init 10F0           __size_of_readADC 0014  
          _I2C_Master_Read 1322           __size_of_initLCD 0046            _I2C_Master_Wait 137A  
          _I2C_Master_Stop 13AE           __size_of_isdigit 001E            ___lwdiv@divisor 001B  
       isFluctuate@channel 0025            ___lwdiv@counter 001F                   __ptext10 1348  
                 __ptext11 12FC                   __ptext20 1322                   __ptext12 1230  
                 __ptext21 137A                   __ptext13 114A                   __ptext22 10F0  
                 __ptext14 11EA                   __ptext23 0F8E                   __ptext15 1398  
                 __ptext16 119C                   __ptext25 0D44                   __ptext17 13A4  
                 __ptext26 1080                   __ptext18 13AE                   __ptext27 0F0A  
                 __ptext19 13B6                   __ptext28 1272              __size_of_main 04FA  
           ?_testBatteries 0001                   _numDrain 0053           ?i2_stopOperation 0001  
              ??_lcdNibble 0019                   int$flags 0063                   _stepGear 005D  
                printf@idx 0031                  printf@val 0035          i2___awmod@divisor 0003  
                putch@data 001B          i2___awmod@counter 0005   __end_of_I2C_Master_Start 13BE  
 __end_of_I2C_Master_Write 13AE                 _INTCONbits 000FF2                   isdigit@c 001B  
                 intlevel2 0000           ___lwmod@dividend 0020           ___lldiv@dividend 0019  
             ??_switchMenu 0003                   printf@ap 0032    __end_of_I2C_Master_Init 114A  
  __end_of_I2C_Master_Read 1348    __end_of_I2C_Master_Wait 138C    __end_of_I2C_Master_Stop 13B6  
              lcdInst@data 001B           ___lldiv@quotient 0021          I2C_Master_Write@d 001A  
          ___lwmod@divisor 0022            ___lwmod@counter 0024         __end_of_switchMenu 12A8  
          ??_testBatteries 0027               ?_isFluctuate 001D  
