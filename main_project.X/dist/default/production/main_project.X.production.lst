

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Wed Apr 05 20:10:37 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    37                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    56                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    57                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    58  0000                     
    59                           ; Version 1.40
    60                           ; Generated 01/12/2016 GMT
    61                           ; 
    62                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    63                           ; All rights reserved.
    64                           ; 
    65                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    66                           ; 
    67                           ; Redistribution and use in source and binary forms, with or without modification, are
    68                           ; permitted provided that the following conditions are met:
    69                           ; 
    70                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    71                           ;        conditions and the following disclaimer.
    72                           ; 
    73                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    74                           ;        of conditions and the following disclaimer in the documentation and/or other
    75                           ;        materials provided with the distribution.
    76                           ; 
    77                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    78                           ;        software without specific prior written permission.
    79                           ; 
    80                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    81                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    82                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    83                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    84                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    85                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    86                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    87                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    88                           ; 
    89                           ; 
    90                           ; Code-generator required, PIC18F4620 Definitions
    91                           ; 
    92                           ; SFR Addresses
    93  0000                     
    94                           	psect	idataBANK0
    95  00206C                     __pidataBANK0:
    96                           	opt stack 0
    97                           
    98                           ;initializer for _screenMode
    99  00206C  02                 	db	2
   100                           
   101                           	psect	mediumconst
   102  00FE06                     __pmediumconst:
   103                           	opt stack 0
   104  00FE06  00                 	db	0
   105  00FE07                     _keys:
   106                           	opt stack 0
   107  00FE07  31                 	db	49
   108  00FE08  32                 	db	50
   109  00FE09  33                 	db	51
   110  00FE0A  41                 	db	65
   111  00FE0B  34                 	db	52
   112  00FE0C  35                 	db	53
   113  00FE0D  36                 	db	54
   114  00FE0E  42                 	db	66
   115  00FE0F  37                 	db	55
   116  00FE10  38                 	db	56
   117  00FE11  39                 	db	57
   118  00FE12  43                 	db	67
   119  00FE13  2A                 	db	42
   120  00FE14  30                 	db	48
   121  00FE15  23                 	db	35
   122  00FE16  44                 	db	68
   123  00FE17  00                 	db	0
   124  00FE18                     __end_of_keys:
   125                           	opt stack 0
   126  00FE18                     _dpowers:
   127                           	opt stack 0
   128  00FE18  0001               	dw	1
   129  00FE1A  000A               	dw	10
   130  00FE1C  0064               	dw	100
   131  00FE1E  03E8               	dw	1000
   132  00FE20  2710               	dw	10000
   133  00FE22                     __end_of_dpowers:
   134                           	opt stack 0
   135  00FE22                     _hexpowers:
   136                           	opt stack 0
   137  00FE22  0001               	dw	1
   138  00FE24  0010               	dw	16
   139  00FE26  0100               	dw	256
   140  00FE28  1000               	dw	4096
   141  00FE2A                     __end_of_hexpowers:
   142                           	opt stack 0
   143  0000                     _ADRES	set	4035
   144  0000                     _TMR0	set	4054
   145  0000                     _TMR1	set	4046
   146  0000                     _ADCON0	set	4034
   147  0000                     _ADCON0bits	set	4034
   148  0000                     _ADCON1	set	4033
   149  0000                     _ADCON2	set	4032
   150  0000                     _INTCONbits	set	4082
   151  0000                     _LATA	set	3977
   152  0000                     _LATAbits	set	3977
   153  0000                     _LATB	set	3978
   154  0000                     _LATBbits	set	3978
   155  0000                     _LATC	set	3979
   156  0000                     _LATCbits	set	3979
   157  0000                     _LATD	set	3980
   158  0000                     _LATDbits	set	3980
   159  0000                     _LATE	set	3981
   160  0000                     _LATEbits	set	3981
   161  0000                     _PORTB	set	3969
   162  0000                     _SSPADD	set	4040
   163  0000                     _SSPBUF	set	4041
   164  0000                     _SSPCON1	set	4038
   165  0000                     _SSPCON2	set	4037
   166  0000                     _SSPSTAT	set	4039
   167  0000                     _T0CON	set	4053
   168  0000                     _T0CONbits	set	4053
   169  0000                     _T1CON	set	4045
   170  0000                     _T1CONbits	set	4045
   171  0000                     _TRISA	set	3986
   172  0000                     _TRISB	set	3987
   173  0000                     _TRISC	set	3988
   174  0000                     _TRISD	set	3989
   175  0000                     _TRISE	set	3990
   176  0000                     _ACKDT	set	32301
   177  0000                     _ACKEN	set	32300
   178  0000                     _GIE	set	32663
   179  0000                     _INT1IE	set	32643
   180  0000                     _INT1IF	set	32640
   181  0000                     _PEIE	set	32662
   182  0000                     _PEN	set	32298
   183  0000                     _RCEN	set	32299
   184  0000                     _SEN	set	32296
   185  0000                     _TMR0IE	set	32661
   186  0000                     _TMR0IF	set	32658
   187  0000                     _TMR1IE	set	31976
   188  0000                     _TMR1IF	set	31984
   189  0000                     _TRISC3	set	31907
   190  0000                     _TRISC4	set	31908
   191  00FE2A                     STR_8:
   192  00FE2A  25                 	db	37
   193  00FE2B  30                 	db	48	;'0'
   194  00FE2C  32                 	db	50	;'2'
   195  00FE2D  64                 	db	100	;'d'
   196  00FE2E  3A                 	db	58	;':'
   197  00FE2F  25                 	db	37
   198  00FE30  30                 	db	48	;'0'
   199  00FE31  32                 	db	50	;'2'
   200  00FE32  64                 	db	100	;'d'
   201  00FE33  20                 	db	32
   202  00FE34  20                 	db	32
   203  00FE35  20                 	db	32
   204  00FE36  20                 	db	32
   205  00FE37  20                 	db	32
   206  00FE38  20                 	db	32
   207  00FE39  20                 	db	32
   208  00FE3A  20                 	db	32
   209  00FE3B  20                 	db	32
   210  00FE3C  20                 	db	32
   211  00FE3D  20                 	db	32
   212  00FE3E  20                 	db	32
   213  00FE3F  20                 	db	32
   214  00FE40  20                 	db	32
   215  00FE41  20                 	db	32
   216  00FE42  00                 	db	0
   217  00FE43                     STR_20:
   218  00FE43  25                 	db	37
   219  00FE44  30                 	db	48	;'0'
   220  00FE45  32                 	db	50	;'2'
   221  00FE46  78                 	db	120	;'x'
   222  00FE47  2F                 	db	47
   223  00FE48  25                 	db	37
   224  00FE49  30                 	db	48	;'0'
   225  00FE4A  32                 	db	50	;'2'
   226  00FE4B  78                 	db	120	;'x'
   227  00FE4C  2F                 	db	47
   228  00FE4D  25                 	db	37
   229  00FE4E  30                 	db	48	;'0'
   230  00FE4F  32                 	db	50	;'2'
   231  00FE50  78                 	db	120	;'x'
   232  00FE51  20                 	db	32
   233  00FE52  20                 	db	32
   234  00FE53  20                 	db	32
   235  00FE54  20                 	db	32
   236  00FE55  20                 	db	32
   237  00FE56  20                 	db	32
   238  00FE57  20                 	db	32
   239  00FE58  20                 	db	32
   240  00FE59  00                 	db	0
   241  00FE5A                     STR_21:
   242  00FE5A  25                 	db	37
   243  00FE5B  30                 	db	48	;'0'
   244  00FE5C  32                 	db	50	;'2'
   245  00FE5D  78                 	db	120	;'x'
   246  00FE5E  3A                 	db	58	;':'
   247  00FE5F  25                 	db	37
   248  00FE60  30                 	db	48	;'0'
   249  00FE61  32                 	db	50	;'2'
   250  00FE62  78                 	db	120	;'x'
   251  00FE63  3A                 	db	58	;':'
   252  00FE64  25                 	db	37
   253  00FE65  30                 	db	48	;'0'
   254  00FE66  32                 	db	50	;'2'
   255  00FE67  78                 	db	120	;'x'
   256  00FE68  20                 	db	32
   257  00FE69  20                 	db	32
   258  00FE6A  20                 	db	32
   259  00FE6B  20                 	db	32
   260  00FE6C  20                 	db	32
   261  00FE6D  20                 	db	32
   262  00FE6E  20                 	db	32
   263  00FE6F  20                 	db	32
   264  00FE70  00                 	db	0
   265  00FE71                     STR_22:
   266  00FE71  44                 	db	68	;'D'
   267  00FE72  41                 	db	65	;'A'
   268  00FE73  54                 	db	84	;'T'
   269  00FE74  45                 	db	69	;'E'
   270  00FE75  3A                 	db	58	;':'
   271  00FE76  20                 	db	32
   272  00FE77  25                 	db	37
   273  00FE78  30                 	db	48	;'0'
   274  00FE79  32                 	db	50	;'2'
   275  00FE7A  78                 	db	120	;'x'
   276  00FE7B  2F                 	db	47
   277  00FE7C  25                 	db	37
   278  00FE7D  30                 	db	48	;'0'
   279  00FE7E  32                 	db	50	;'2'
   280  00FE7F  78                 	db	120	;'x'
   281  00FE80  2F                 	db	47
   282  00FE81  25                 	db	37
   283  00FE82  30                 	db	48	;'0'
   284  00FE83  32                 	db	50	;'2'
   285  00FE84  78                 	db	120	;'x'
   286  00FE85  20                 	db	32
   287  00FE86  20                 	db	32
   288  00FE87  00                 	db	0
   289  00FE88                     STR_23:
   290  00FE88  54                 	db	84	;'T'
   291  00FE89  49                 	db	73	;'I'
   292  00FE8A  4D                 	db	77	;'M'
   293  00FE8B  45                 	db	69	;'E'
   294  00FE8C  3A                 	db	58	;':'
   295  00FE8D  20                 	db	32
   296  00FE8E  25                 	db	37
   297  00FE8F  30                 	db	48	;'0'
   298  00FE90  32                 	db	50	;'2'
   299  00FE91  78                 	db	120	;'x'
   300  00FE92  3A                 	db	58	;':'
   301  00FE93  25                 	db	37
   302  00FE94  30                 	db	48	;'0'
   303  00FE95  32                 	db	50	;'2'
   304  00FE96  78                 	db	120	;'x'
   305  00FE97  3A                 	db	58	;':'
   306  00FE98  25                 	db	37
   307  00FE99  30                 	db	48	;'0'
   308  00FE9A  32                 	db	50	;'2'
   309  00FE9B  78                 	db	120	;'x'
   310  00FE9C  20                 	db	32
   311  00FE9D  20                 	db	32
   312  00FE9E  00                 	db	0
   313  00FE9F                     STR_27:
   314  00FE9F  52                 	db	82	;'R'
   315  00FEA0  55                 	db	85	;'U'
   316  00FEA1  4E                 	db	78	;'N'
   317  00FEA2  4E                 	db	78	;'N'
   318  00FEA3  49                 	db	73	;'I'
   319  00FEA4  4E                 	db	78	;'N'
   320  00FEA5  47                 	db	71	;'G'
   321  00FEA6  3A                 	db	58	;':'
   322  00FEA7  20                 	db	32
   323  00FEA8  25                 	db	37
   324  00FEA9  30                 	db	48	;'0'
   325  00FEAA  32                 	db	50	;'2'
   326  00FEAB  64                 	db	100	;'d'
   327  00FEAC  3A                 	db	58	;':'
   328  00FEAD  25                 	db	37
   329  00FEAE  30                 	db	48	;'0'
   330  00FEAF  32                 	db	50	;'2'
   331  00FEB0  64                 	db	100	;'d'
   332  00FEB1  20                 	db	32
   333  00FEB2  20                 	db	32
   334  00FEB3  20                 	db	32
   335  00FEB4  00                 	db	0
   336  00FEB5                     STR_14:
   337  00FEB5  42                 	db	66	;'B'
   338  00FEB6  41                 	db	65	;'A'
   339  00FEB7  54                 	db	84	;'T'
   340  00FEB8  54                 	db	84	;'T'
   341  00FEB9  45                 	db	69	;'E'
   342  00FEBA  52                 	db	82	;'R'
   343  00FEBB  49                 	db	73	;'I'
   344  00FEBC  45                 	db	69	;'E'
   345  00FEBD  53                 	db	83	;'S'
   346  00FEBE  3A                 	db	58	;':'
   347  00FEBF  20                 	db	32
   348  00FEC0  25                 	db	37
   349  00FEC1  30                 	db	48	;'0'
   350  00FEC2  32                 	db	50	;'2'
   351  00FEC3  64                 	db	100	;'d'
   352  00FEC4  20                 	db	32
   353  00FEC5  20                 	db	32
   354  00FEC6  20                 	db	32
   355  00FEC7  20                 	db	32
   356  00FEC8  20                 	db	32
   357  00FEC9  00                 	db	0
   358  00FECA                     STR_10:
   359  00FECA  42                 	db	66	;'B'
   360  00FECB  41                 	db	65	;'A'
   361  00FECC  54                 	db	84	;'T'
   362  00FECD  54                 	db	84	;'T'
   363  00FECE  45                 	db	69	;'E'
   364  00FECF  52                 	db	82	;'R'
   365  00FED0  49                 	db	73	;'I'
   366  00FED1  45                 	db	69	;'E'
   367  00FED2  53                 	db	83	;'S'
   368  00FED3  3A                 	db	58	;':'
   369  00FED4  20                 	db	32
   370  00FED5  25                 	db	37
   371  00FED6  30                 	db	48	;'0'
   372  00FED7  32                 	db	50	;'2'
   373  00FED8  64                 	db	100	;'d'
   374  00FED9  20                 	db	32
   375  00FEDA  20                 	db	32
   376  00FEDB  20                 	db	32
   377  00FEDC  00                 	db	0
   378  00FEDD                     STR_28:
   379  00FEDD  30                 	db	48	;'0'
   380  00FEDE  31                 	db	49	;'1'
   381  00FEDF  32                 	db	50	;'2'
   382  00FEE0  33                 	db	51	;'3'
   383  00FEE1  34                 	db	52	;'4'
   384  00FEE2  35                 	db	53	;'5'
   385  00FEE3  36                 	db	54	;'6'
   386  00FEE4  37                 	db	55	;'7'
   387  00FEE5  38                 	db	56	;'8'
   388  00FEE6  39                 	db	57	;'9'
   389  00FEE7  61                 	db	97	;'a'
   390  00FEE8  62                 	db	98	;'b'
   391  00FEE9  63                 	db	99	;'c'
   392  00FEEA  64                 	db	100	;'d'
   393  00FEEB  65                 	db	101	;'e'
   394  00FEEC  66                 	db	102	;'f'
   395  00FEED  00                 	db	0
   396  00FEEE                     STR_25:
   397  00FEEE  20                 	db	32
   398  00FEEF  20                 	db	32
   399  00FEF0  20                 	db	32
   400  00FEF1  20                 	db	32
   401  00FEF2  20                 	db	32
   402  00FEF3  20                 	db	32
   403  00FEF4  20                 	db	32
   404  00FEF5  20                 	db	32
   405  00FEF6  20                 	db	32
   406  00FEF7  20                 	db	32
   407  00FEF8  20                 	db	32
   408  00FEF9  20                 	db	32
   409  00FEFA  20                 	db	32
   410  00FEFB  20                 	db	32
   411  00FEFC  20                 	db	32
   412  00FEFD  20                 	db	32
   413  00FEFE  00                 	db	0
   414  00FEFF                     STR_11:
   415  00FEFF  23                 	db	35
   416  00FF00  20                 	db	32
   417  00FF01  4F                 	db	79	;'O'
   418  00FF02  46                 	db	70	;'F'
   419  00FF03  20                 	db	32
   420  00FF04  43                 	db	67	;'C'
   421  00FF05  20                 	db	32
   422  00FF06  20                 	db	32
   423  00FF07  20                 	db	32
   424  00FF08  20                 	db	32
   425  00FF09  20                 	db	32
   426  00FF0A  20                 	db	32
   427  00FF0B  20                 	db	32
   428  00FF0C  20                 	db	32
   429  00FF0D  20                 	db	32
   430  00FF0E  20                 	db	32
   431  00FF0F  00                 	db	0
   432  00FF10                     STR_15:
   433  00FF10  23                 	db	35
   434  00FF11  20                 	db	32
   435  00FF12  4F                 	db	79	;'O'
   436  00FF13  46                 	db	70	;'F'
   437  00FF14  20                 	db	32
   438  00FF15  41                 	db	65	;'A'
   439  00FF16  41                 	db	65	;'A'
   440  00FF17  20                 	db	32
   441  00FF18  20                 	db	32
   442  00FF19  20                 	db	32
   443  00FF1A  20                 	db	32
   444  00FF1B  20                 	db	32
   445  00FF1C  20                 	db	32
   446  00FF1D  20                 	db	32
   447  00FF1E  20                 	db	32
   448  00FF1F  20                 	db	32
   449  00FF20  00                 	db	0
   450  00FF21                     STR_24:
   451  00FF21  53                 	db	83	;'S'
   452  00FF22  54                 	db	84	;'T'
   453  00FF23  4F                 	db	79	;'O'
   454  00FF24  50                 	db	80	;'P'
   455  00FF25  50                 	db	80	;'P'
   456  00FF26  45                 	db	69	;'E'
   457  00FF27  44                 	db	68	;'D'
   458  00FF28  20                 	db	32
   459  00FF29  20                 	db	32
   460  00FF2A  20                 	db	32
   461  00FF2B  20                 	db	32
   462  00FF2C  20                 	db	32
   463  00FF2D  20                 	db	32
   464  00FF2E  20                 	db	32
   465  00FF2F  20                 	db	32
   466  00FF30  20                 	db	32
   467  00FF31  00                 	db	0
   468  00FF32                     STR_13:
   469  00FF32  23                 	db	35
   470  00FF33  20                 	db	32
   471  00FF34  4F                 	db	79	;'O'
   472  00FF35  46                 	db	70	;'F'
   473  00FF36  20                 	db	32
   474  00FF37  39                 	db	57	;'9'
   475  00FF38  56                 	db	86	;'V'
   476  00FF39  20                 	db	32
   477  00FF3A  20                 	db	32
   478  00FF3B  20                 	db	32
   479  00FF3C  20                 	db	32
   480  00FF3D  20                 	db	32
   481  00FF3E  20                 	db	32
   482  00FF3F  20                 	db	32
   483  00FF40  20                 	db	32
   484  00FF41  20                 	db	32
   485  00FF42  00                 	db	0
   486  00FF43                     STR_4:
   487  00FF43  25                 	db	37
   488  00FF44  34                 	db	52	;'4'
   489  00FF45  64                 	db	100	;'d'
   490  00FF46  20                 	db	32
   491  00FF47  25                 	db	37
   492  00FF48  32                 	db	50	;'2'
   493  00FF49  64                 	db	100	;'d'
   494  00FF4A  20                 	db	32
   495  00FF4B  20                 	db	32
   496  00FF4C  20                 	db	32
   497  00FF4D  20                 	db	32
   498  00FF4E  20                 	db	32
   499  00FF4F  20                 	db	32
   500  00FF50  20                 	db	32
   501  00FF51  20                 	db	32
   502  00FF52  20                 	db	32
   503  00FF53  00                 	db	0
   504  00FF54                     STR_19:
   505  00FF54  4C                 	db	76	;'L'
   506  00FF55  41                 	db	65	;'A'
   507  00FF56  53                 	db	83	;'S'
   508  00FF57  54                 	db	84	;'T'
   509  00FF58  20                 	db	32
   510  00FF59  52                 	db	82	;'R'
   511  00FF5A  55                 	db	85	;'U'
   512  00FF5B  4E                 	db	78	;'N'
   513  00FF5C  3A                 	db	58	;':'
   514  00FF5D  20                 	db	32
   515  00FF5E  20                 	db	32
   516  00FF5F  20                 	db	32
   517  00FF60  20                 	db	32
   518  00FF61  20                 	db	32
   519  00FF62  20                 	db	32
   520  00FF63  20                 	db	32
   521  00FF64  00                 	db	0
   522  00FF65                     STR_9:
   523  00FF65  54                 	db	84	;'T'
   524  00FF66  4F                 	db	79	;'O'
   525  00FF67  54                 	db	84	;'T'
   526  00FF68  41                 	db	65	;'A'
   527  00FF69  4C                 	db	76	;'L'
   528  00FF6A  20                 	db	32
   529  00FF6B  23                 	db	35
   530  00FF6C  20                 	db	32
   531  00FF6D  4F                 	db	79	;'O'
   532  00FF6E  46                 	db	70	;'F'
   533  00FF6F  20                 	db	32
   534  00FF70  20                 	db	32
   535  00FF71  20                 	db	32
   536  00FF72  20                 	db	32
   537  00FF73  20                 	db	32
   538  00FF74  20                 	db	32
   539  00FF75  00                 	db	0
   540  00FF76                     STR_6:
   541  00FF76  54                 	db	84	;'T'
   542  00FF77  4F                 	db	79	;'O'
   543  00FF78  20                 	db	32
   544  00FF79  43                 	db	67	;'C'
   545  00FF7A  4F                 	db	79	;'O'
   546  00FF7B  4E                 	db	78	;'N'
   547  00FF7C  54                 	db	84	;'T'
   548  00FF7D  49                 	db	73	;'I'
   549  00FF7E  4E                 	db	78	;'N'
   550  00FF7F  55                 	db	85	;'U'
   551  00FF80  45                 	db	69	;'E'
   552  00FF81  20                 	db	32
   553  00FF82  20                 	db	32
   554  00FF83  20                 	db	32
   555  00FF84  20                 	db	32
   556  00FF85  20                 	db	32
   557  00FF86  00                 	db	0
   558  00FF87                     STR_17:
   559  00FF87  23                 	db	35
   560  00FF88  20                 	db	32
   561  00FF89  4F                 	db	79	;'O'
   562  00FF8A  46                 	db	70	;'F'
   563  00FF8B  20                 	db	32
   564  00FF8C  44                 	db	68	;'D'
   565  00FF8D  52                 	db	82	;'R'
   566  00FF8E  41                 	db	65	;'A'
   567  00FF8F  49                 	db	73	;'I'
   568  00FF90  4E                 	db	78	;'N'
   569  00FF91  45                 	db	69	;'E'
   570  00FF92  44                 	db	68	;'D'
   571  00FF93  20                 	db	32
   572  00FF94  20                 	db	32
   573  00FF95  20                 	db	32
   574  00FF96  20                 	db	32
   575  00FF97  00                 	db	0
   576  00FF98                     STR_5:
   577  00FF98  44                 	db	68	;'D'
   578  00FF99  4F                 	db	79	;'O'
   579  00FF9A  4E                 	db	78	;'N'
   580  00FF9B  45                 	db	69	;'E'
   581  00FF9C  21                 	db	33
   582  00FF9D  20                 	db	32
   583  00FF9E  50                 	db	80	;'P'
   584  00FF9F  52                 	db	82	;'R'
   585  00FFA0  45                 	db	69	;'E'
   586  00FFA1  53                 	db	83	;'S'
   587  00FFA2  53                 	db	83	;'S'
   588  00FFA3  20                 	db	32
   589  00FFA4  2A                 	db	42
   590  00FFA5  20                 	db	32
   591  00FFA6  20                 	db	32
   592  00FFA7  20                 	db	32
   593  00FFA8  00                 	db	0
   594  00FFA9                     STR_26:
   595  00FFA9  52                 	db	82	;'R'
   596  00FFAA  55                 	db	85	;'U'
   597  00FFAB  4E                 	db	78	;'N'
   598  00FFAC  4E                 	db	78	;'N'
   599  00FFAD  49                 	db	73	;'I'
   600  00FFAE  4E                 	db	78	;'N'
   601  00FFAF  47                 	db	71	;'G'
   602  00FFB0  3A                 	db	58	;':'
   603  00FFB1  20                 	db	32
   604  00FFB2  30                 	db	48	;'0'
   605  00FFB3  30                 	db	48	;'0'
   606  00FFB4  3A                 	db	58	;':'
   607  00FFB5  30                 	db	48	;'0'
   608  00FFB6  30                 	db	48	;'0'
   609  00FFB7  20                 	db	32
   610  00FFB8  20                 	db	32
   611  00FFB9  00                 	db	0
   612  00FFBA                     STR_7:
   613  00FFBA  54                 	db	84	;'T'
   614  00FFBB  4F                 	db	79	;'O'
   615  00FFBC  54                 	db	84	;'T'
   616  00FFBD  41                 	db	65	;'A'
   617  00FFBE  4C                 	db	76	;'L'
   618  00FFBF  20                 	db	32
   619  00FFC0  52                 	db	82	;'R'
   620  00FFC1  55                 	db	85	;'U'
   621  00FFC2  4E                 	db	78	;'N'
   622  00FFC3  20                 	db	32
   623  00FFC4  54                 	db	84	;'T'
   624  00FFC5  49                 	db	73	;'I'
   625  00FFC6  4D                 	db	77	;'M'
   626  00FFC7  45                 	db	69	;'E'
   627  00FFC8  3A                 	db	58	;':'
   628  00FFC9  20                 	db	32
   629  00FFCA  00                 	db	0
   630  00FFCB                     STR_3:
   631  00FFCB  20                 	db	32
   632  00FFCC  3C                 	db	60	;'<'
   633  00FFCD  54                 	db	84	;'T'
   634  00FFCE  4F                 	db	79	;'O'
   635  00FFCF  47                 	db	71	;'G'
   636  00FFD0  47                 	db	71	;'G'
   637  00FFD1  4C                 	db	76	;'L'
   638  00FFD2  45                 	db	69	;'E'
   639  00FFD3  20                 	db	32
   640  00FFD4  20                 	db	32
   641  00FFD5  4C                 	db	76	;'L'
   642  00FFD6  4F                 	db	79	;'O'
   643  00FFD7  47                 	db	71	;'G'
   644  00FFD8  53                 	db	83	;'S'
   645  00FFD9  3E                 	db	62	;'>'
   646  00FFDA  20                 	db	32
   647  00FFDB  00                 	db	0
   648  00FFDC                     STR_2:
   649  00FFDC  3C                 	db	60	;'<'
   650  00FFDD  20                 	db	32
   651  00FFDE  54                 	db	84	;'T'
   652  00FFDF  4F                 	db	79	;'O'
   653  00FFE0  47                 	db	71	;'G'
   654  00FFE1  47                 	db	71	;'G'
   655  00FFE2  4C                 	db	76	;'L'
   656  00FFE3  45                 	db	69	;'E'
   657  00FFE4  20                 	db	32
   658  00FFE5  20                 	db	32
   659  00FFE6  4C                 	db	76	;'L'
   660  00FFE7  4F                 	db	79	;'O'
   661  00FFE8  47                 	db	71	;'G'
   662  00FFE9  53                 	db	83	;'S'
   663  00FFEA  20                 	db	32
   664  00FFEB  3E                 	db	62	;'>'
   665  00FFEC  00                 	db	0
   666  00FFED                     STR_1:
   667  00FFED  50                 	db	80	;'P'
   668  00FFEE  52                 	db	82	;'R'
   669  00FFEF  45                 	db	69	;'E'
   670  00FFF0  53                 	db	83	;'S'
   671  00FFF1  53                 	db	83	;'S'
   672  00FFF2  20                 	db	32
   673  00FFF3  2A                 	db	42
   674  00FFF4  20                 	db	32
   675  00FFF5  54                 	db	84	;'T'
   676  00FFF6  4F                 	db	79	;'O'
   677  00FFF7  20                 	db	32
   678  00FFF8  53                 	db	83	;'S'
   679  00FFF9  54                 	db	84	;'T'
   680  00FFFA  41                 	db	65	;'A'
   681  00FFFB  52                 	db	82	;'R'
   682  00FFFC  54                 	db	84	;'T'
   683  00FFFD  00                 	db	0
   684  0000                     
   685                           ; #config settings
   686  00FFFE  00                 	db	0	; dummy byte at the end
   687  0000                     
   688                           	psect	cinit
   689  001EAA                     __pcinit:
   690                           	opt stack 0
   691  001EAA                     start_initialization:
   692                           	opt stack 0
   693  001EAA                     __initialization:
   694                           	opt stack 0
   695                           
   696                           ; Initialize objects allocated to BANK0 (1 bytes)
   697                           ; load TBLPTR registers with __pidataBANK0
   698  001EAA  0E6C               	movlw	low __pidataBANK0
   699  001EAC  6EF6               	movwf	tblptrl,c
   700  001EAE  0E20               	movlw	high __pidataBANK0
   701  001EB0  6EF7               	movwf	tblptrh,c
   702  001EB2  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   703  001EB4  6EF8               	movwf	tblptru,c
   704  001EB6  0009               	tblrd		*+	;fetch initializer
   705  001EB8  CFF5 F0D1          	movff	tablat,__pdataBANK0
   706                           
   707                           ; Clear objects allocated to BANK0 (39 bytes)
   708  001EBC  EE00  F0AA         	lfsr	0,__pbssBANK0
   709  001EC0  0E27               	movlw	39
   710  001EC2                     clear_0:
   711  001EC2  6AEE               	clrf	postinc0,c
   712  001EC4  06E8               	decf	wreg,f,c
   713  001EC6  E1FD               	bnz	clear_0
   714                           
   715                           ; Clear objects allocated to COMRAM (11 bytes)
   716  001EC8  EE00  F040         	lfsr	0,__pbssCOMRAM
   717  001ECC  0E0B               	movlw	11
   718  001ECE                     clear_1:
   719  001ECE  6AEE               	clrf	postinc0,c
   720  001ED0  06E8               	decf	wreg,f,c
   721  001ED2  E1FD               	bnz	clear_1
   722  001ED4                     end_of_initialization:
   723                           	opt stack 0
   724  001ED4                     __end_of__initialization:
   725                           	opt stack 0
   726  001ED4  904B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   727  001ED6  924B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   728  001ED8  0E00               	movlw	low (__Lmediumconst shr (0+16))
   729  001EDA  6EF8               	movwf	tblptru,c
   730  001EDC  0100               	movlb	0
   731  001EDE  EF09  F000         	goto	_main	;jump to C main() function
   732                           tblptru	equ	0xFF8
   733                           tblptrh	equ	0xFF7
   734                           tblptrl	equ	0xFF6
   735                           tablat	equ	0xFF5
   736                           postinc0	equ	0xFEE
   737                           wreg	equ	0xFE8
   738                           
   739                           	psect	bssCOMRAM
   740  000040                     __pbssCOMRAM:
   741                           	opt stack 0
   742  000040                     _count_3ms:
   743                           	opt stack 0
   744  000040                     	ds	2
   745  000042                     _stepAmount:
   746                           	opt stack 0
   747  000042                     	ds	2
   748  000044                     _doneTimer:
   749                           	opt stack 0
   750  000044                     	ds	1
   751  000045                     _doubleAA:
   752                           	opt stack 0
   753  000045                     	ds	1
   754  000046                     _opTimer:
   755                           	opt stack 0
   756  000046                     	ds	1
   757  000047                     _solOnTimer:
   758                           	opt stack 0
   759  000047                     	ds	1
   760  000048                     _sorting:
   761                           	opt stack 0
   762  000048                     	ds	1
   763  000049                     _step1:
   764                           	opt stack 0
   765  000049                     	ds	1
   766  00004A                     _step2:
   767                           	opt stack 0
   768  00004A                     	ds	1
   769                           tblptru	equ	0xFF8
   770                           tblptrh	equ	0xFF7
   771                           tblptrl	equ	0xFF6
   772                           tablat	equ	0xFF5
   773                           postinc0	equ	0xFEE
   774                           wreg	equ	0xFE8
   775                           
   776                           	psect	bssBANK0
   777  0000AA                     __pbssBANK0:
   778                           	opt stack 0
   779  0000AA                     _lastRunRTC:
   780                           	opt stack 0
   781  0000AA                     	ds	7
   782  0000B1                     _realTime:
   783                           	opt stack 0
   784  0000B1                     	ds	7
   785  0000B8                     _plat1Left:
   786                           	opt stack 0
   787  0000B8                     	ds	2
   788  0000BA                     _plat1Right:
   789                           	opt stack 0
   790  0000BA                     	ds	2
   791  0000BC                     _plat2Left:
   792                           	opt stack 0
   793  0000BC                     	ds	2
   794  0000BE                     _plat2Right:
   795                           	opt stack 0
   796  0000BE                     	ds	2
   797  0000C0                     _count9V:
   798                           	opt stack 0
   799  0000C0                     	ds	1
   800  0000C1                     _countAA:
   801                           	opt stack 0
   802  0000C1                     	ds	1
   803  0000C2                     _countC:
   804                           	opt stack 0
   805  0000C2                     	ds	1
   806  0000C3                     _countDrain:
   807                           	opt stack 0
   808  0000C3                     	ds	1
   809  0000C4                     _min:
   810                           	opt stack 0
   811  0000C4                     	ds	1
   812  0000C5                     _num9V:
   813                           	opt stack 0
   814  0000C5                     	ds	1
   815  0000C6                     _numAA:
   816                           	opt stack 0
   817  0000C6                     	ds	1
   818  0000C7                     _numBats:
   819                           	opt stack 0
   820  0000C7                     	ds	1
   821  0000C8                     _numC:
   822                           	opt stack 0
   823  0000C8                     	ds	1
   824  0000C9                     _numDrain:
   825                           	opt stack 0
   826  0000C9                     	ds	1
   827  0000CA                     _sec:
   828                           	opt stack 0
   829  0000CA                     	ds	1
   830  0000CB                     _startGear:
   831                           	opt stack 0
   832  0000CB                     	ds	1
   833  0000CC                     _stepGear:
   834                           	opt stack 0
   835  0000CC                     	ds	1
   836  0000CD                     _turn1BackLeft:
   837                           	opt stack 0
   838  0000CD                     	ds	1
   839  0000CE                     _turn1BackRight:
   840                           	opt stack 0
   841  0000CE                     	ds	1
   842  0000CF                     _turn2BackLeft:
   843                           	opt stack 0
   844  0000CF                     	ds	1
   845  0000D0                     _turn2BackRight:
   846                           	opt stack 0
   847  0000D0                     	ds	1
   848                           tblptru	equ	0xFF8
   849                           tblptrh	equ	0xFF7
   850                           tblptrl	equ	0xFF6
   851                           tablat	equ	0xFF5
   852                           postinc0	equ	0xFEE
   853                           wreg	equ	0xFE8
   854                           
   855                           	psect	dataBANK0
   856  0000D1                     __pdataBANK0:
   857                           	opt stack 0
   858  0000D1                     _screenMode:
   859                           	opt stack 0
   860  0000D1                     	ds	1
   861                           tblptru	equ	0xFF8
   862                           tblptrh	equ	0xFF7
   863                           tblptrl	equ	0xFF6
   864                           tablat	equ	0xFF5
   865                           postinc0	equ	0xFEE
   866                           wreg	equ	0xFE8
   867                           
   868                           	psect	cstackBANK0
   869  000080                     __pcstackBANK0:
   870                           	opt stack 0
   871  000080                     ___lwmod@counter:
   872                           	opt stack 0
   873  000080                     ___lldiv@quotient:
   874                           	opt stack 0
   875                           
   876                           ; 4 bytes @ 0x0
   877  000080                     	ds	1
   878  000081                     ?_printf:
   879                           	opt stack 0
   880  000081                     printf@f:
   881                           	opt stack 0
   882                           
   883                           ; 2 bytes @ 0x1
   884  000081                     	ds	3
   885  000084                     ___lldiv@counter:
   886                           	opt stack 0
   887                           
   888                           ; 1 bytes @ 0x4
   889  000084                     	ds	1
   890  000085                     I2C_Master_Init@c:
   891                           	opt stack 0
   892                           
   893                           ; 4 bytes @ 0x5
   894  000085                     	ds	4
   895  000089                     ??_printf:
   896  000089                     ??_I2C_Master_Init:
   897                           
   898                           ; 1 bytes @ 0x9
   899  000089                     	ds	4
   900  00008D                     printf@idx:
   901                           	opt stack 0
   902                           
   903                           ; 1 bytes @ 0xD
   904  00008D                     	ds	1
   905  00008E                     printf@ap:
   906                           	opt stack 0
   907                           
   908                           ; 2 bytes @ 0xE
   909  00008E                     	ds	2
   910  000090                     printf@prec:
   911                           	opt stack 0
   912                           
   913                           ; 1 bytes @ 0x10
   914  000090                     	ds	1
   915  000091                     printf@val:
   916                           	opt stack 0
   917                           
   918                           ; 2 bytes @ 0x11
   919  000091                     	ds	2
   920  000093                     printf@flag:
   921                           	opt stack 0
   922                           
   923                           ; 1 bytes @ 0x13
   924  000093                     	ds	1
   925  000094                     printf@width:
   926                           	opt stack 0
   927                           
   928                           ; 2 bytes @ 0x14
   929  000094                     	ds	2
   930  000096                     printf@c:
   931                           	opt stack 0
   932                           
   933                           ; 1 bytes @ 0x16
   934  000096                     	ds	1
   935  000097                     ??_main:
   936                           
   937                           ; 1 bytes @ 0x17
   938  000097                     	ds	4
   939  00009B                     main@i_594:
   940                           	opt stack 0
   941                           
   942                           ; 2 bytes @ 0x1B
   943  00009B                     	ds	2
   944  00009D                     main@i_595:
   945                           	opt stack 0
   946                           
   947                           ; 2 bytes @ 0x1D
   948  00009D                     	ds	2
   949  00009F                     main@i_596:
   950                           	opt stack 0
   951                           
   952                           ; 2 bytes @ 0x1F
   953  00009F                     	ds	2
   954  0000A1                     main@i_597:
   955                           	opt stack 0
   956                           
   957                           ; 2 bytes @ 0x21
   958  0000A1                     	ds	2
   959  0000A3                     main@i_598:
   960                           	opt stack 0
   961                           
   962                           ; 2 bytes @ 0x23
   963  0000A3                     	ds	2
   964  0000A5                     main@i:
   965                           	opt stack 0
   966                           
   967                           ; 1 bytes @ 0x25
   968  0000A5                     	ds	1
   969  0000A6                     main@i_584:
   970                           	opt stack 0
   971                           
   972                           ; 1 bytes @ 0x26
   973  0000A6                     	ds	1
   974  0000A7                     main@i_634:
   975                           	opt stack 0
   976                           
   977                           ; 1 bytes @ 0x27
   978  0000A7                     	ds	1
   979  0000A8                     main@i_636:
   980                           	opt stack 0
   981                           
   982                           ; 1 bytes @ 0x28
   983  0000A8                     	ds	1
   984  0000A9                     main@i_640:
   985                           	opt stack 0
   986                           
   987                           ; 1 bytes @ 0x29
   988  0000A9                     	ds	1
   989                           tblptru	equ	0xFF8
   990                           tblptrh	equ	0xFF7
   991                           tblptrl	equ	0xFF6
   992                           tablat	equ	0xFF5
   993                           postinc0	equ	0xFEE
   994                           wreg	equ	0xFE8
   995                           
   996                           	psect	cstackCOMRAM
   997  000001                     __pcstackCOMRAM:
   998                           	opt stack 0
   999  000001                     ??i2_I2C_Master_Wait:
  1000  000001                     ??i2_isdigit:
  1001  000001                     ?i2___wmul:
  1002                           	opt stack 0
  1003  000001                     ?i2___awdiv:
  1004                           	opt stack 0
  1005  000001                     ?i2___awmod:
  1006                           	opt stack 0
  1007  000001                     ?i2___lwdiv:
  1008                           	opt stack 0
  1009  000001                     i2lcdNibble@temp:
  1010                           	opt stack 0
  1011  000001                     i2___wmul@multiplier:
  1012                           	opt stack 0
  1013  000001                     i2___awdiv@dividend:
  1014                           	opt stack 0
  1015  000001                     i2___awmod@dividend:
  1016                           	opt stack 0
  1017  000001                     i2___lwdiv@dividend:
  1018                           	opt stack 0
  1019                           
  1020                           ; 2 bytes @ 0x0
  1021  000001                     	ds	1
  1022  000002                     i2I2C_Master_Read@a:
  1023                           	opt stack 0
  1024  000002                     i2lcdNibble@data:
  1025                           	opt stack 0
  1026  000002                     i2_isdigit$944:
  1027                           	opt stack 0
  1028  000002                     i2I2C_Master_Write@d:
  1029                           	opt stack 0
  1030                           
  1031                           ; 2 bytes @ 0x1
  1032  000002                     	ds	1
  1033  000003                     i2I2C_Master_Read@temp:
  1034                           	opt stack 0
  1035  000003                     i2lcdInst@data:
  1036                           	opt stack 0
  1037  000003                     i2putch@data:
  1038                           	opt stack 0
  1039  000003                     i2isdigit@c:
  1040                           	opt stack 0
  1041  000003                     i2___wmul@multiplicand:
  1042                           	opt stack 0
  1043  000003                     i2___awdiv@divisor:
  1044                           	opt stack 0
  1045  000003                     i2___awmod@divisor:
  1046                           	opt stack 0
  1047  000003                     i2___lwdiv@divisor:
  1048                           	opt stack 0
  1049                           
  1050                           ; 2 bytes @ 0x2
  1051  000003                     	ds	1
  1052  000004                     
  1053                           ; 1 bytes @ 0x3
  1054  000004                     	ds	1
  1055  000005                     i2___awdiv@counter:
  1056                           	opt stack 0
  1057  000005                     i2___awmod@counter:
  1058                           	opt stack 0
  1059  000005                     i2___wmul@product:
  1060                           	opt stack 0
  1061  000005                     i2___lwdiv@quotient:
  1062                           	opt stack 0
  1063                           
  1064                           ; 2 bytes @ 0x4
  1065  000005                     	ds	1
  1066  000006                     i2___awdiv@sign:
  1067                           	opt stack 0
  1068  000006                     i2___awmod@sign:
  1069                           	opt stack 0
  1070                           
  1071                           ; 1 bytes @ 0x5
  1072  000006                     	ds	1
  1073  000007                     i2___lwdiv@counter:
  1074                           	opt stack 0
  1075  000007                     i2___awdiv@quotient:
  1076                           	opt stack 0
  1077                           
  1078                           ; 2 bytes @ 0x6
  1079  000007                     	ds	1
  1080  000008                     ?i2___lwmod:
  1081                           	opt stack 0
  1082  000008                     i2___lwmod@dividend:
  1083                           	opt stack 0
  1084                           
  1085                           ; 2 bytes @ 0x7
  1086  000008                     	ds	1
  1087  000009                     
  1088                           ; 1 bytes @ 0x8
  1089  000009                     	ds	1
  1090  00000A                     i2___lwmod@divisor:
  1091                           	opt stack 0
  1092                           
  1093                           ; 2 bytes @ 0x9
  1094  00000A                     	ds	2
  1095  00000C                     i2___lwmod@counter:
  1096                           	opt stack 0
  1097                           
  1098                           ; 1 bytes @ 0xB
  1099  00000C                     	ds	1
  1100  00000D                     ?i2_printf:
  1101                           	opt stack 0
  1102  00000D                     i2printf@f:
  1103                           	opt stack 0
  1104                           
  1105                           ; 2 bytes @ 0xC
  1106  00000D                     	ds	6
  1107  000013                     ??i2_printf:
  1108                           
  1109                           ; 1 bytes @ 0x12
  1110  000013                     	ds	4
  1111  000017                     i2printf@idx:
  1112                           	opt stack 0
  1113                           
  1114                           ; 1 bytes @ 0x16
  1115  000017                     	ds	1
  1116  000018                     i2printf@ap:
  1117                           	opt stack 0
  1118                           
  1119                           ; 2 bytes @ 0x17
  1120  000018                     	ds	2
  1121  00001A                     i2printf@prec:
  1122                           	opt stack 0
  1123                           
  1124                           ; 1 bytes @ 0x19
  1125  00001A                     	ds	1
  1126  00001B                     i2printf@val:
  1127                           	opt stack 0
  1128                           
  1129                           ; 2 bytes @ 0x1A
  1130  00001B                     	ds	2
  1131  00001D                     i2printf@flag:
  1132                           	opt stack 0
  1133                           
  1134                           ; 1 bytes @ 0x1C
  1135  00001D                     	ds	1
  1136  00001E                     i2printf@width:
  1137                           	opt stack 0
  1138                           
  1139                           ; 2 bytes @ 0x1D
  1140  00001E                     	ds	2
  1141  000020                     i2printf@c:
  1142                           	opt stack 0
  1143                           
  1144                           ; 1 bytes @ 0x1F
  1145  000020                     	ds	1
  1146  000021                     switchMenu@right:
  1147                           	opt stack 0
  1148                           
  1149                           ; 1 bytes @ 0x20
  1150  000021                     	ds	1
  1151  000022                     switchMenu@key:
  1152                           	opt stack 0
  1153                           
  1154                           ; 1 bytes @ 0x21
  1155  000022                     	ds	1
  1156  000023                     switchMenu@left:
  1157                           	opt stack 0
  1158                           
  1159                           ; 1 bytes @ 0x22
  1160  000023                     	ds	1
  1161  000024                     switchMenu@i:
  1162                           	opt stack 0
  1163                           
  1164                           ; 1 bytes @ 0x23
  1165  000024                     	ds	1
  1166  000025                     ??_ISR:
  1167                           
  1168                           ; 1 bytes @ 0x24
  1169  000025                     	ds	15
  1170  000034                     ISR@keypress:
  1171                           	opt stack 0
  1172                           
  1173                           ; 1 bytes @ 0x33
  1174  000034                     	ds	1
  1175  000035                     ??_isdigit:
  1176  000035                     ??_I2C_Master_Wait:
  1177  000035                     ?___wmul:
  1178                           	opt stack 0
  1179  000035                     ?___awdiv:
  1180                           	opt stack 0
  1181  000035                     ?___awmod:
  1182                           	opt stack 0
  1183  000035                     ?___lwdiv:
  1184                           	opt stack 0
  1185  000035                     ?___lldiv:
  1186                           	opt stack 0
  1187  000035                     lcdNibble@temp:
  1188                           	opt stack 0
  1189  000035                     readADC@channel:
  1190                           	opt stack 0
  1191  000035                     wait_3ms@x:
  1192                           	opt stack 0
  1193  000035                     ___wmul@multiplier:
  1194                           	opt stack 0
  1195  000035                     ___awdiv@dividend:
  1196                           	opt stack 0
  1197  000035                     ___awmod@dividend:
  1198                           	opt stack 0
  1199  000035                     ___lwdiv@dividend:
  1200                           	opt stack 0
  1201  000035                     ___lldiv@dividend:
  1202                           	opt stack 0
  1203                           
  1204                           ; 4 bytes @ 0x34
  1205  000035                     	ds	1
  1206  000036                     ??_testBatteries:
  1207  000036                     I2C_Master_Read@a:
  1208                           	opt stack 0
  1209  000036                     lcdNibble@data:
  1210                           	opt stack 0
  1211  000036                     _isdigit$944:
  1212                           	opt stack 0
  1213  000036                     I2C_Master_Write@d:
  1214                           	opt stack 0
  1215                           
  1216                           ; 2 bytes @ 0x35
  1217  000036                     	ds	1
  1218  000037                     I2C_Master_Read@temp:
  1219                           	opt stack 0
  1220  000037                     lcdInst@data:
  1221                           	opt stack 0
  1222  000037                     putch@data:
  1223                           	opt stack 0
  1224  000037                     isdigit@c:
  1225                           	opt stack 0
  1226  000037                     ___wmul@multiplicand:
  1227                           	opt stack 0
  1228  000037                     ___awdiv@divisor:
  1229                           	opt stack 0
  1230  000037                     ___awmod@divisor:
  1231                           	opt stack 0
  1232  000037                     ___lwdiv@divisor:
  1233                           	opt stack 0
  1234                           
  1235                           ; 2 bytes @ 0x36
  1236  000037                     	ds	1
  1237  000038                     ??_initLCD:
  1238                           
  1239                           ; 1 bytes @ 0x37
  1240  000038                     	ds	1
  1241  000039                     ___awdiv@counter:
  1242                           	opt stack 0
  1243  000039                     ___awmod@counter:
  1244                           	opt stack 0
  1245  000039                     ___wmul@product:
  1246                           	opt stack 0
  1247  000039                     ___lwdiv@quotient:
  1248                           	opt stack 0
  1249  000039                     ___lldiv@divisor:
  1250                           	opt stack 0
  1251                           
  1252                           ; 4 bytes @ 0x38
  1253  000039                     	ds	1
  1254  00003A                     ___awdiv@sign:
  1255                           	opt stack 0
  1256  00003A                     ___awmod@sign:
  1257                           	opt stack 0
  1258                           
  1259                           ; 1 bytes @ 0x39
  1260  00003A                     	ds	1
  1261  00003B                     ___lwdiv@counter:
  1262                           	opt stack 0
  1263  00003B                     ___awdiv@quotient:
  1264                           	opt stack 0
  1265                           
  1266                           ; 2 bytes @ 0x3A
  1267  00003B                     	ds	1
  1268  00003C                     ?___lwmod:
  1269                           	opt stack 0
  1270  00003C                     ___lwmod@dividend:
  1271                           	opt stack 0
  1272                           
  1273                           ; 2 bytes @ 0x3B
  1274  00003C                     	ds	1
  1275  00003D                     
  1276                           ; 1 bytes @ 0x3C
  1277  00003D                     	ds	1
  1278  00003E                     ___lwmod@divisor:
  1279                           	opt stack 0
  1280                           
  1281                           ; 2 bytes @ 0x3D
  1282  00003E                     	ds	2
  1283  000040                     tblptru	equ	0xFF8
  1284                           tblptrh	equ	0xFF7
  1285                           tblptrl	equ	0xFF6
  1286                           tablat	equ	0xFF5
  1287                           postinc0	equ	0xFEE
  1288                           wreg	equ	0xFE8
  1289                           
  1290                           ; 1 bytes @ 0x3F
  1291 ;;
  1292 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  1293 ;;
  1294 ;; *************** function _main *****************
  1295 ;; Defined at:
  1296 ;;		line 55 in file "../main.c"
  1297 ;; Parameters:    Size  Location     Type
  1298 ;;		None
  1299 ;; Auto vars:     Size  Location     Type
  1300 ;;  i               2   35[BANK0 ] unsigned int 
  1301 ;;  i               2   33[BANK0 ] unsigned int 
  1302 ;;  i               2   31[BANK0 ] unsigned int 
  1303 ;;  i               2   29[BANK0 ] unsigned int 
  1304 ;;  i               2   27[BANK0 ] unsigned int 
  1305 ;;  i               1   41[BANK0 ] unsigned char 
  1306 ;;  i               1   40[BANK0 ] unsigned char 
  1307 ;;  i               1   39[BANK0 ] unsigned char 
  1308 ;;  i               1   38[BANK0 ] unsigned char 
  1309 ;;  i               1   37[BANK0 ] unsigned char 
  1310 ;; Return value:  Size  Location     Type
  1311 ;;                  1    wreg      void 
  1312 ;; Registers used:
  1313 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1314 ;; Tracked objects:
  1315 ;;		On entry : 0/0
  1316 ;;		On exit  : 0/0
  1317 ;;		Unchanged: 0/0
  1318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1320 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1321 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1322 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1323 ;;Total ram usage:       19 bytes
  1324 ;; Hardware stack levels required when called:    8
  1325 ;; This function calls:
  1326 ;;		_I2C_Master_Init
  1327 ;;		_I2C_Master_Read
  1328 ;;		_I2C_Master_Start
  1329 ;;		_I2C_Master_Stop
  1330 ;;		_I2C_Master_Write
  1331 ;;		_initLCD
  1332 ;;		_lcdInst
  1333 ;;		_printf
  1334 ;;		_readADC
  1335 ;;		_stopOperation
  1336 ;;		_testBatteries
  1337 ;;		_wait_3ms
  1338 ;; This function is called by:
  1339 ;;		Startup code after reset
  1340 ;; This function uses a non-reentrant model
  1341 ;;
  1342                           
  1343                           	psect	text0
  1344  000012                     __ptext0:
  1345                           	opt stack 0
  1346  000012                     _main:
  1347                           	opt stack 23
  1348                           
  1349                           ;main.c: 57: TRISA = 0b00101111;
  1350                           
  1351                           ;incstack = 0
  1352  000012  0E2F               	movlw	47
  1353  000014  6E92               	movwf	3986,c	;volatile
  1354                           
  1355                           ;main.c: 58: TRISB = 0b11110010;
  1356  000016  0EF2               	movlw	242
  1357  000018  6E93               	movwf	3987,c	;volatile
  1358                           
  1359                           ;main.c: 59: TRISC = 0x00;
  1360  00001A  0E00               	movlw	0
  1361  00001C  6E94               	movwf	3988,c	;volatile
  1362                           
  1363                           ;main.c: 60: TRISD = 0x00;
  1364  00001E  0E00               	movlw	0
  1365  000020  6E95               	movwf	3989,c	;volatile
  1366                           
  1367                           ;main.c: 61: TRISE = 0b00000001;
  1368  000022  0E01               	movlw	1
  1369  000024  6E96               	movwf	3990,c	;volatile
  1370                           
  1371                           ;main.c: 63: LATA = 0x00;
  1372  000026  0E00               	movlw	0
  1373  000028  6E89               	movwf	3977,c	;volatile
  1374                           
  1375                           ;main.c: 64: LATB = 0x00;
  1376  00002A  0E00               	movlw	0
  1377  00002C  6E8A               	movwf	3978,c	;volatile
  1378                           
  1379                           ;main.c: 65: LATC = 0x00;
  1380  00002E  0E00               	movlw	0
  1381  000030  6E8B               	movwf	3979,c	;volatile
  1382                           
  1383                           ;main.c: 66: LATD = 0x00;
  1384  000032  0E00               	movlw	0
  1385  000034  6E8C               	movwf	3980,c	;volatile
  1386                           
  1387                           ;main.c: 67: LATE = 0x00;
  1388  000036  0E00               	movlw	0
  1389  000038  6E8D               	movwf	3981,c	;volatile
  1390                           
  1391                           ;main.c: 69: ADCON0 = 0x00;
  1392  00003A  0E00               	movlw	0
  1393  00003C  6EC2               	movwf	4034,c	;volatile
  1394                           
  1395                           ;main.c: 70: ADCON1 = 0b00001001;
  1396  00003E  0E09               	movlw	9
  1397  000040  6EC1               	movwf	4033,c	;volatile
  1398                           
  1399                           ;main.c: 71: ADCON2 = 0b10110001;
  1400  000042  0EB1               	movlw	177
  1401  000044  6EC0               	movwf	4032,c	;volatile
  1402                           
  1403                           ;main.c: 76: GIE = 1;
  1404  000046  8EF2               	bsf	intcon,7,c	;volatile
  1405                           
  1406                           ;main.c: 77: PEIE = 1;
  1407  000048  8CF2               	bsf	intcon,6,c	;volatile
  1408                           
  1409                           ;main.c: 78: INT1IE = 1;
  1410  00004A  86F0               	bsf	intcon3,3,c	;volatile
  1411                           
  1412                           ;main.c: 79: INT1IF = 0;
  1413  00004C  90F0               	bcf	intcon3,0,c	;volatile
  1414                           
  1415                           ;main.c: 80: TMR0IE = 1;
  1416  00004E  8AF2               	bsf	intcon,5,c	;volatile
  1417                           
  1418                           ;main.c: 81: TMR0IF = 0;
  1419  000050  94F2               	bcf	intcon,2,c	;volatile
  1420                           
  1421                           ;main.c: 82: TMR1IE = 1;
  1422  000052  809D               	bsf	3997,0,c	;volatile
  1423                           
  1424                           ;main.c: 83: TMR1IF = 0;
  1425  000054  909E               	bcf	3998,0,c	;volatile
  1426                           
  1427                           ;main.c: 87: T0CON = 0b00000111;
  1428  000056  0E07               	movlw	7
  1429  000058  6ED5               	movwf	4053,c	;volatile
  1430                           
  1431                           ;main.c: 95: TMR0 = 55770;
  1432  00005A  0ED9               	movlw	217
  1433  00005C  6ED7               	movwf	4055,c	;volatile
  1434  00005E  0EDA               	movlw	218
  1435  000060  6ED6               	movwf	4054,c	;volatile
  1436                           
  1437                           ;main.c: 104: T1CON = 0b10000000;
  1438  000062  0E80               	movlw	128
  1439  000064  6ECD               	movwf	4045,c	;volatile
  1440                           
  1441                           ;main.c: 113: TMR1 = 58035;
  1442  000066  0EE2               	movlw	226
  1443  000068  6ECF               	movwf	4047,c	;volatile
  1444  00006A  0EB3               	movlw	179
  1445  00006C  6ECE               	movwf	4046,c	;volatile
  1446                           
  1447                           ;main.c: 122: initLCD();
  1448  00006E  EC11  F00F         	call	_initLCD	;wreg free
  1449                           
  1450                           ;main.c: 124: I2C_Master_Init(10000);
  1451  000072  0E10               	movlw	16
  1452  000074  0100               	movlb	0	; () banked
  1453  000076  6F85               	movwf	I2C_Master_Init@c& (0+255),b
  1454  000078  0E27               	movlw	39
  1455  00007A  6F86               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  1456  00007C  0E00               	movlw	0
  1457  00007E  6F87               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  1458  000080  0E00               	movlw	0
  1459  000082  6F88               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  1460  000084  EC1F  F00E         	call	_I2C_Master_Init	;wreg free
  1461                           
  1462                           ;main.c: 125: (INTCONbits.GIE = 1);
  1463  000088  8EF2               	bsf	intcon,7,c	;volatile
  1464                           
  1465                           ;main.c: 128: while (screenMode == 2){
  1466                           
  1467                           ;main.c: 127: while (1) {
  1468  00008A  D056               	goto	l4732
  1469  00008C                     l4694:
  1470                           
  1471                           ;main.c: 129: lcdInst(0b10000000);;
  1472  00008C  0E80               	movlw	128
  1473  00008E  EC0A  F010         	call	_lcdInst
  1474                           
  1475                           ;main.c: 130: printf("PRESS * TO START");
  1476  000092  0EED               	movlw	low STR_1
  1477  000094  0100               	movlb	0	; () banked
  1478  000096  6F81               	movwf	printf@f& (0+255),b
  1479  000098  0EFF               	movlw	high STR_1
  1480  00009A  0100               	movlb	0	; () banked
  1481  00009C  6F82               	movwf	(printf@f+1)& (0+255),b
  1482  00009E  EC0D  F007         	call	_printf	;wreg free
  1483                           
  1484                           ;main.c: 131: lcdInst(0b11000000);;
  1485  0000A2  0EC0               	movlw	192
  1486  0000A4  EC0A  F010         	call	_lcdInst
  1487                           
  1488                           ;main.c: 132: printf("< TOGGLE  LOGS >");
  1489  0000A8  0EDC               	movlw	low STR_2
  1490  0000AA  0100               	movlb	0	; () banked
  1491  0000AC  6F81               	movwf	printf@f& (0+255),b
  1492  0000AE  0EFF               	movlw	high STR_2
  1493  0000B0  0100               	movlb	0	; () banked
  1494  0000B2  6F82               	movwf	(printf@f+1)& (0+255),b
  1495  0000B4  EC0D  F007         	call	_printf	;wreg free
  1496                           
  1497                           ;main.c: 133: for(unsigned char i=0;i<50;i++){
  1498  0000B8  0E00               	movlw	0
  1499  0000BA  0100               	movlb	0	; () banked
  1500  0000BC  6FA5               	movwf	main@i& (0+255),b
  1501  0000BE                     l4702:
  1502                           
  1503                           ; BSR set to: 0
  1504  0000BE  0E31               	movlw	49
  1505  0000C0  0100               	movlb	0	; () banked
  1506  0000C2  65A5               	cpfsgt	main@i& (0+255),b
  1507  0000C4  D001               	goto	l4706
  1508  0000C6  D011               	goto	l4714
  1509  0000C8                     l4706:
  1510                           
  1511                           ; BSR set to: 0
  1512                           ;main.c: 134: if (screenMode != 2)
  1513  0000C8  0E02               	movlw	2
  1514  0000CA  0100               	movlb	0	; () banked
  1515  0000CC  19D1               	xorwf	_screenMode& (0+255),w,b
  1516  0000CE  A4D8               	btfss	status,2,c
  1517  0000D0  D00C               	goto	l4714
  1518                           
  1519                           ; BSR set to: 0
  1520                           ;main.c: 136: _delay((unsigned long)((10)*(10000000/4000.0)));
  1521                           
  1522                           ; BSR set to: 0
  1523                           
  1524                           ; BSR set to: 0
  1525                           ;main.c: 135: break;
  1526  0000D2  0E21               	movlw	33
  1527  0000D4  0100               	movlb	0	; () banked
  1528  0000D6  6F97               	movwf	??_main& (0+255),b
  1529  0000D8  0E76               	movlw	118
  1530  0000DA                     u5947:
  1531  0000DA  2EE8               	decfsz	wreg,f,c
  1532  0000DC  D7FE               	bra	u5947
  1533  0000DE  2F97               	decfsz	??_main& (0+255),f,b
  1534  0000E0  D7FC               	bra	u5947
  1535  0000E2  F000               	nop	
  1536  0000E4  0100               	movlb	0	; () banked
  1537  0000E6  2BA5               	incf	main@i& (0+255),f,b
  1538  0000E8  D7EA               	goto	l4702
  1539  0000EA                     l4714:
  1540                           
  1541                           ; BSR set to: 0
  1542                           ;main.c: 137: }
  1543                           ;main.c: 138: lcdInst(0b10000000);;
  1544  0000EA  0E80               	movlw	128
  1545  0000EC  EC0A  F010         	call	_lcdInst
  1546                           
  1547                           ;main.c: 139: lcdInst(0b11000000);;
  1548  0000F0  0EC0               	movlw	192
  1549  0000F2  EC0A  F010         	call	_lcdInst
  1550                           
  1551                           ;main.c: 140: printf(" <TOGGLE  LOGS> ");
  1552  0000F6  0ECB               	movlw	low STR_3
  1553  0000F8  0100               	movlb	0	; () banked
  1554  0000FA  6F81               	movwf	printf@f& (0+255),b
  1555  0000FC  0EFF               	movlw	high STR_3
  1556  0000FE  0100               	movlb	0	; () banked
  1557  000100  6F82               	movwf	(printf@f+1)& (0+255),b
  1558  000102  EC0D  F007         	call	_printf	;wreg free
  1559                           
  1560                           ;main.c: 141: for(unsigned char i=0;i<50;i++){
  1561  000106  0E00               	movlw	0
  1562  000108  0100               	movlb	0	; () banked
  1563  00010A  6FA6               	movwf	main@i_584& (0+255),b
  1564  00010C                     l4720:
  1565                           
  1566                           ; BSR set to: 0
  1567  00010C  0E31               	movlw	49
  1568  00010E  0100               	movlb	0	; () banked
  1569  000110  65A6               	cpfsgt	main@i_584& (0+255),b
  1570  000112  D001               	goto	l4724
  1571  000114  D011               	goto	l4732
  1572  000116                     l4724:
  1573                           
  1574                           ; BSR set to: 0
  1575                           ;main.c: 142: if (screenMode != 2)
  1576  000116  0E02               	movlw	2
  1577  000118  0100               	movlb	0	; () banked
  1578  00011A  19D1               	xorwf	_screenMode& (0+255),w,b
  1579  00011C  A4D8               	btfss	status,2,c
  1580  00011E  D00C               	goto	l4732
  1581                           
  1582                           ; BSR set to: 0
  1583                           ;main.c: 144: _delay((unsigned long)((10)*(10000000/4000.0)));
  1584                           
  1585                           ; BSR set to: 0
  1586                           
  1587                           ; BSR set to: 0
  1588                           ;main.c: 143: break;
  1589  000120  0E21               	movlw	33
  1590  000122  0100               	movlb	0	; () banked
  1591  000124  6F97               	movwf	??_main& (0+255),b
  1592  000126  0E76               	movlw	118
  1593  000128                     u5957:
  1594  000128  2EE8               	decfsz	wreg,f,c
  1595  00012A  D7FE               	bra	u5957
  1596  00012C  2F97               	decfsz	??_main& (0+255),f,b
  1597  00012E  D7FC               	bra	u5957
  1598  000130  F000               	nop	
  1599  000132  0100               	movlb	0	; () banked
  1600  000134  2BA6               	incf	main@i_584& (0+255),f,b
  1601  000136  D7EA               	goto	l4720
  1602  000138                     l4732:
  1603  000138  0E02               	movlw	2
  1604  00013A  0100               	movlb	0	; () banked
  1605  00013C  19D1               	xorwf	_screenMode& (0+255),w,b
  1606  00013E  A4D8               	btfss	status,2,c
  1607  000140  D23C               	goto	l4922
  1608  000142  D7A4               	goto	l4694
  1609  000144                     l4734:
  1610                           
  1611                           ; BSR set to: 0
  1612                           ;main.c: 155: lcdInst(0b10000000);;
  1613  000144  0E80               	movlw	128
  1614  000146  EC0A  F010         	call	_lcdInst
  1615                           
  1616                           ;main.c: 156: lcdInst(0b11000000);;
  1617  00014A  0EC0               	movlw	192
  1618  00014C  EC0A  F010         	call	_lcdInst
  1619                           
  1620                           ;main.c: 157: printf("%4d %2d         ", ADRES, countDrain+countAA+count9V+countC);
  1621  000150  0E43               	movlw	low STR_4
  1622  000152  0100               	movlb	0	; () banked
  1623  000154  6F81               	movwf	printf@f& (0+255),b
  1624  000156  0EFF               	movlw	high STR_4
  1625  000158  0100               	movlb	0	; () banked
  1626  00015A  6F82               	movwf	(printf@f+1)& (0+255),b
  1627  00015C  CFC3 F083          	movff	4035,?_printf+2	;volatile
  1628  000160  CFC4 F084          	movff	4036,?_printf+3	;volatile
  1629  000164  0100               	movlb	0	; () banked
  1630  000166  51C1               	movf	_countAA& (0+255),w,b
  1631  000168  C0C3  F097         	movff	_countDrain,??_main
  1632  00016C  0100               	movlb	0	; () banked
  1633  00016E  6B98               	clrf	(??_main+1)& (0+255),b
  1634  000170  0100               	movlb	0	; () banked
  1635  000172  2797               	addwf	??_main& (0+255),f,b
  1636  000174  0E00               	movlw	0
  1637  000176  2398               	addwfc	(??_main+1)& (0+255),f,b
  1638  000178  0100               	movlb	0	; () banked
  1639  00017A  51C0               	movf	_count9V& (0+255),w,b
  1640  00017C  0100               	movlb	0	; () banked
  1641  00017E  2797               	addwf	??_main& (0+255),f,b
  1642  000180  0E00               	movlw	0
  1643  000182  2398               	addwfc	(??_main+1)& (0+255),f,b
  1644  000184  0100               	movlb	0	; () banked
  1645  000186  51C2               	movf	_countC& (0+255),w,b
  1646  000188  0100               	movlb	0	; () banked
  1647  00018A  2597               	addwf	??_main& (0+255),w,b
  1648  00018C  0100               	movlb	0	; () banked
  1649  00018E  6F85               	movwf	(?_printf+4)& (0+255),b
  1650  000190  0100               	movlb	0	; () banked
  1651  000192  0E00               	movlw	0
  1652  000194  0100               	movlb	0	; () banked
  1653  000196  2198               	addwfc	(??_main+1)& (0+255),w,b
  1654  000198  0100               	movlb	0	; () banked
  1655  00019A  6F86               	movwf	(?_printf+5)& (0+255),b
  1656  00019C  EC0D  F007         	call	_printf	;wreg free
  1657                           
  1658                           ;main.c: 158: if (startGear){
  1659  0001A0  0100               	movlb	0	; () banked
  1660  0001A2  51CB               	movf	_startGear& (0+255),w,b
  1661  0001A4  B4D8               	btfsc	status,2,c
  1662  0001A6  D0DC               	goto	l4818
  1663                           
  1664                           ; BSR set to: 0
  1665                           ;main.c: 159: wait_3ms(1333);
  1666  0001A8  0E05               	movlw	5
  1667  0001AA  6E36               	movwf	wait_3ms@x+1,c
  1668  0001AC  0E35               	movlw	53
  1669  0001AE  6E35               	movwf	wait_3ms@x,c
  1670  0001B0  ECDB  F00F         	call	_wait_3ms	;wreg free
  1671                           
  1672                           ;main.c: 160: startGear = 0;
  1673  0001B4  0E00               	movlw	0
  1674  0001B6  0100               	movlb	0	; () banked
  1675  0001B8  6FCB               	movwf	_startGear& (0+255),b
  1676                           
  1677                           ; BSR set to: 0
  1678                           ;main.c: 161: LATDbits.LD0= 0;;
  1679  0001BA  908C               	bcf	3980,0,c	;volatile
  1680                           
  1681                           ; BSR set to: 0
  1682                           ;main.c: 162: for (unsigned int i = 0; i < 420; i++){
  1683  0001BC  0E00               	movlw	0
  1684  0001BE  0100               	movlb	0	; () banked
  1685  0001C0  6F9C               	movwf	(main@i_594+1)& (0+255),b
  1686  0001C2  0E00               	movlw	0
  1687  0001C4  6F9B               	movwf	main@i_594& (0+255),b
  1688  0001C6                     l4748:
  1689                           
  1690                           ; BSR set to: 0
  1691  0001C6  0EA4               	movlw	164
  1692  0001C8  0100               	movlb	0	; () banked
  1693  0001CA  5D9B               	subwf	main@i_594& (0+255),w,b
  1694  0001CC  0E01               	movlw	1
  1695  0001CE  0100               	movlb	0	; () banked
  1696  0001D0  599C               	subwfb	(main@i_594+1)& (0+255),w,b
  1697  0001D2  B0D8               	btfsc	status,0,c
  1698  0001D4  D01A               	goto	l250
  1699                           
  1700                           ; BSR set to: 0
  1701                           ;main.c: 163: LATDbits.LD1 = !LATDbits.LD1;;
  1702                           
  1703                           ; BSR set to: 0
  1704                           
  1705                           ; BSR set to: 0
  1706  0001D6  B28C               	btfsc	3980,1,c	;volatile
  1707  0001D8  D004               	goto	u5420
  1708  0001DA  0100               	movlb	0	; () banked
  1709  0001DC  6B97               	clrf	??_main& (0+255),b
  1710  0001DE  2B97               	incf	??_main& (0+255),f,b
  1711  0001E0  D002               	goto	u5438
  1712  0001E2                     u5420:
  1713  0001E2  0100               	movlb	0	; () banked
  1714  0001E4  6B97               	clrf	??_main& (0+255),b
  1715  0001E6                     u5438:
  1716  0001E6  0100               	movlb	0	; () banked
  1717  0001E8  4797               	rlncf	??_main& (0+255),f,b
  1718  0001EA  508C               	movf	3980,w,c	;volatile
  1719  0001EC  0100               	movlb	0	; () banked
  1720  0001EE  1997               	xorwf	??_main& (0+255),w,b
  1721  0001F0  0BFD               	andlw	-3
  1722  0001F2  1997               	xorwf	??_main& (0+255),w,b
  1723  0001F4  6E8C               	movwf	3980,c	;volatile
  1724                           
  1725                           ; BSR set to: 0
  1726                           ;main.c: 164: wait_3ms(2);
  1727  0001F6  0E00               	movlw	0
  1728  0001F8  6E36               	movwf	wait_3ms@x+1,c
  1729  0001FA  0E02               	movlw	2
  1730  0001FC  6E35               	movwf	wait_3ms@x,c
  1731  0001FE  ECDB  F00F         	call	_wait_3ms	;wreg free
  1732  000202  0100               	movlb	0	; () banked
  1733  000204  4B9B               	infsnz	main@i_594& (0+255),f,b
  1734  000206  2B9C               	incf	(main@i_594+1)& (0+255),f,b
  1735  000208  D7DE               	goto	l4748
  1736  00020A                     l250:
  1737                           
  1738                           ; BSR set to: 0
  1739                           ;main.c: 165: }
  1740                           ;main.c: 166: LATDbits.LD0= 1;;
  1741  00020A  808C               	bsf	3980,0,c	;volatile
  1742                           
  1743                           ; BSR set to: 0
  1744                           ;main.c: 167: for (unsigned int i = 0; i < 40; i++){
  1745  00020C  0E00               	movlw	0
  1746  00020E  0100               	movlb	0	; () banked
  1747  000210  6F9E               	movwf	(main@i_595+1)& (0+255),b
  1748  000212  0E00               	movlw	0
  1749  000214  6F9D               	movwf	main@i_595& (0+255),b
  1750                           
  1751                           ; BSR set to: 0
  1752  000216  0100               	movlb	0	; () banked
  1753  000218  519E               	movf	(main@i_595+1)& (0+255),w,b
  1754  00021A  E122               	bnz	l252
  1755  00021C  0E28               	movlw	40
  1756  00021E  0100               	movlb	0	; () banked
  1757  000220  5D9D               	subwf	main@i_595& (0+255),w,b
  1758  000222  B0D8               	btfsc	status,0,c
  1759  000224  D01D               	goto	l252
  1760                           
  1761                           ; BSR set to: 0
  1762                           ;main.c: 168: LATDbits.LD1 = !LATDbits.LD1;;
  1763                           
  1764                           ; BSR set to: 0
  1765                           
  1766                           ; BSR set to: 0
  1767  000226  B28C               	btfsc	3980,1,c	;volatile
  1768  000228  D004               	goto	u5460
  1769  00022A  0100               	movlb	0	; () banked
  1770  00022C  6B97               	clrf	??_main& (0+255),b
  1771  00022E  2B97               	incf	??_main& (0+255),f,b
  1772  000230  D002               	goto	u5478
  1773  000232                     u5460:
  1774  000232  0100               	movlb	0	; () banked
  1775  000234  6B97               	clrf	??_main& (0+255),b
  1776  000236                     u5478:
  1777  000236  0100               	movlb	0	; () banked
  1778  000238  4797               	rlncf	??_main& (0+255),f,b
  1779  00023A  508C               	movf	3980,w,c	;volatile
  1780  00023C  0100               	movlb	0	; () banked
  1781  00023E  1997               	xorwf	??_main& (0+255),w,b
  1782  000240  0BFD               	andlw	-3
  1783  000242  1997               	xorwf	??_main& (0+255),w,b
  1784  000244  6E8C               	movwf	3980,c	;volatile
  1785                           
  1786                           ; BSR set to: 0
  1787                           ;main.c: 169: wait_3ms(2);
  1788  000246  0E00               	movlw	0
  1789  000248  6E36               	movwf	wait_3ms@x+1,c
  1790  00024A  0E02               	movlw	2
  1791  00024C  6E35               	movwf	wait_3ms@x,c
  1792  00024E  ECDB  F00F         	call	_wait_3ms	;wreg free
  1793  000252  0100               	movlb	0	; () banked
  1794  000254  4B9D               	infsnz	main@i_595& (0+255),f,b
  1795  000256  2B9E               	incf	(main@i_595+1)& (0+255),f,b
  1796                           
  1797                           ; BSR set to: 0
  1798  000258  0100               	movlb	0	; () banked
  1799  00025A  519E               	movf	(main@i_595+1)& (0+255),w,b
  1800  00025C  E101               	bnz	u5480
  1801  00025E  D7DE               	goto	L1
  1802  000260                     u5480:
  1803  000260                     l252:
  1804                           
  1805                           ; BSR set to: 0
  1806                           ;main.c: 170: }
  1807                           ;main.c: 171: LATDbits.LD0= 0;;
  1808  000260  908C               	bcf	3980,0,c	;volatile
  1809                           
  1810                           ; BSR set to: 0
  1811                           ;main.c: 172: for (unsigned int i = 0; i < 40; i++){
  1812  000262  0E00               	movlw	0
  1813  000264  0100               	movlb	0	; () banked
  1814  000266  6FA0               	movwf	(main@i_596+1)& (0+255),b
  1815  000268  0E00               	movlw	0
  1816  00026A  6F9F               	movwf	main@i_596& (0+255),b
  1817                           
  1818                           ; BSR set to: 0
  1819  00026C  0100               	movlb	0	; () banked
  1820  00026E  51A0               	movf	(main@i_596+1)& (0+255),w,b
  1821  000270  E122               	bnz	l254
  1822  000272  0E28               	movlw	40
  1823  000274  0100               	movlb	0	; () banked
  1824  000276  5D9F               	subwf	main@i_596& (0+255),w,b
  1825  000278  B0D8               	btfsc	status,0,c
  1826  00027A  D01D               	goto	l254
  1827                           
  1828                           ; BSR set to: 0
  1829                           ;main.c: 173: LATDbits.LD1 = !LATDbits.LD1;;
  1830                           
  1831                           ; BSR set to: 0
  1832                           
  1833                           ; BSR set to: 0
  1834  00027C  B28C               	btfsc	3980,1,c	;volatile
  1835  00027E  D004               	goto	u5500
  1836  000280  0100               	movlb	0	; () banked
  1837  000282  6B97               	clrf	??_main& (0+255),b
  1838  000284  2B97               	incf	??_main& (0+255),f,b
  1839  000286  D002               	goto	u5518
  1840  000288                     u5500:
  1841  000288  0100               	movlb	0	; () banked
  1842  00028A  6B97               	clrf	??_main& (0+255),b
  1843  00028C                     u5518:
  1844  00028C  0100               	movlb	0	; () banked
  1845  00028E  4797               	rlncf	??_main& (0+255),f,b
  1846  000290  508C               	movf	3980,w,c	;volatile
  1847  000292  0100               	movlb	0	; () banked
  1848  000294  1997               	xorwf	??_main& (0+255),w,b
  1849  000296  0BFD               	andlw	-3
  1850  000298  1997               	xorwf	??_main& (0+255),w,b
  1851  00029A  6E8C               	movwf	3980,c	;volatile
  1852                           
  1853                           ; BSR set to: 0
  1854                           ;main.c: 174: wait_3ms(2);
  1855  00029C  0E00               	movlw	0
  1856  00029E  6E36               	movwf	wait_3ms@x+1,c
  1857  0002A0  0E02               	movlw	2
  1858  0002A2  6E35               	movwf	wait_3ms@x,c
  1859  0002A4  ECDB  F00F         	call	_wait_3ms	;wreg free
  1860  0002A8  0100               	movlb	0	; () banked
  1861  0002AA  4B9F               	infsnz	main@i_596& (0+255),f,b
  1862  0002AC  2BA0               	incf	(main@i_596+1)& (0+255),f,b
  1863                           
  1864                           ; BSR set to: 0
  1865  0002AE  0100               	movlb	0	; () banked
  1866  0002B0  51A0               	movf	(main@i_596+1)& (0+255),w,b
  1867  0002B2  E101               	bnz	u5520
  1868  0002B4  D7DE               	goto	L2
  1869  0002B6                     u5520:
  1870  0002B6                     l254:
  1871                           
  1872                           ; BSR set to: 0
  1873                           ;main.c: 175: }
  1874                           ;main.c: 176: LATDbits.LD0= 1;;
  1875  0002B6  808C               	bsf	3980,0,c	;volatile
  1876                           
  1877                           ; BSR set to: 0
  1878                           ;main.c: 177: for (unsigned int i = 0; i < 40; i++){
  1879  0002B8  0E00               	movlw	0
  1880  0002BA  0100               	movlb	0	; () banked
  1881  0002BC  6FA2               	movwf	(main@i_597+1)& (0+255),b
  1882  0002BE  0E00               	movlw	0
  1883  0002C0  6FA1               	movwf	main@i_597& (0+255),b
  1884                           
  1885                           ; BSR set to: 0
  1886  0002C2  0100               	movlb	0	; () banked
  1887  0002C4  51A2               	movf	(main@i_597+1)& (0+255),w,b
  1888  0002C6  E122               	bnz	l256
  1889  0002C8  0E28               	movlw	40
  1890  0002CA  0100               	movlb	0	; () banked
  1891  0002CC  5DA1               	subwf	main@i_597& (0+255),w,b
  1892  0002CE  B0D8               	btfsc	status,0,c
  1893  0002D0  D01D               	goto	l256
  1894                           
  1895                           ; BSR set to: 0
  1896                           ;main.c: 178: LATDbits.LD1 = !LATDbits.LD1;;
  1897                           
  1898                           ; BSR set to: 0
  1899                           
  1900                           ; BSR set to: 0
  1901  0002D2  B28C               	btfsc	3980,1,c	;volatile
  1902  0002D4  D004               	goto	u5540
  1903  0002D6  0100               	movlb	0	; () banked
  1904  0002D8  6B97               	clrf	??_main& (0+255),b
  1905  0002DA  2B97               	incf	??_main& (0+255),f,b
  1906  0002DC  D002               	goto	u5558
  1907  0002DE                     u5540:
  1908  0002DE  0100               	movlb	0	; () banked
  1909  0002E0  6B97               	clrf	??_main& (0+255),b
  1910  0002E2                     u5558:
  1911  0002E2  0100               	movlb	0	; () banked
  1912  0002E4  4797               	rlncf	??_main& (0+255),f,b
  1913  0002E6  508C               	movf	3980,w,c	;volatile
  1914  0002E8  0100               	movlb	0	; () banked
  1915  0002EA  1997               	xorwf	??_main& (0+255),w,b
  1916  0002EC  0BFD               	andlw	-3
  1917  0002EE  1997               	xorwf	??_main& (0+255),w,b
  1918  0002F0  6E8C               	movwf	3980,c	;volatile
  1919                           
  1920                           ; BSR set to: 0
  1921                           ;main.c: 179: wait_3ms(2);
  1922  0002F2  0E00               	movlw	0
  1923  0002F4  6E36               	movwf	wait_3ms@x+1,c
  1924  0002F6  0E02               	movlw	2
  1925  0002F8  6E35               	movwf	wait_3ms@x,c
  1926  0002FA  ECDB  F00F         	call	_wait_3ms	;wreg free
  1927  0002FE  0100               	movlb	0	; () banked
  1928  000300  4BA1               	infsnz	main@i_597& (0+255),f,b
  1929  000302  2BA2               	incf	(main@i_597+1)& (0+255),f,b
  1930                           
  1931                           ; BSR set to: 0
  1932  000304  0100               	movlb	0	; () banked
  1933  000306  51A2               	movf	(main@i_597+1)& (0+255),w,b
  1934  000308  E101               	bnz	u5560
  1935  00030A  D7DE               	goto	L3
  1936  00030C                     u5560:
  1937  00030C                     l256:
  1938                           
  1939                           ; BSR set to: 0
  1940                           ;main.c: 180: }
  1941                           ;main.c: 181: LATDbits.LD0= 0;;
  1942  00030C  908C               	bcf	3980,0,c	;volatile
  1943                           
  1944                           ; BSR set to: 0
  1945                           ;main.c: 182: for (unsigned int i = 0; i < 20; i++){
  1946  00030E  0E00               	movlw	0
  1947  000310  0100               	movlb	0	; () banked
  1948  000312  6FA4               	movwf	(main@i_598+1)& (0+255),b
  1949  000314  0E00               	movlw	0
  1950  000316  6FA3               	movwf	main@i_598& (0+255),b
  1951  000318                     l4804:
  1952                           
  1953                           ; BSR set to: 0
  1954  000318  0100               	movlb	0	; () banked
  1955  00031A  51A4               	movf	(main@i_598+1)& (0+255),w,b
  1956  00031C  E11F               	bnz	l4816
  1957  00031E  0E14               	movlw	20
  1958  000320  0100               	movlb	0	; () banked
  1959  000322  5DA3               	subwf	main@i_598& (0+255),w,b
  1960  000324  B0D8               	btfsc	status,0,c
  1961  000326  D01A               	goto	l4816
  1962                           
  1963                           ; BSR set to: 0
  1964                           ;main.c: 183: LATDbits.LD1 = !LATDbits.LD1;;
  1965                           
  1966                           ; BSR set to: 0
  1967                           
  1968                           ; BSR set to: 0
  1969  000328  B28C               	btfsc	3980,1,c	;volatile
  1970  00032A  D004               	goto	u5580
  1971  00032C  0100               	movlb	0	; () banked
  1972  00032E  6B97               	clrf	??_main& (0+255),b
  1973  000330  2B97               	incf	??_main& (0+255),f,b
  1974  000332  D002               	goto	u5598
  1975  000334                     u5580:
  1976  000334  0100               	movlb	0	; () banked
  1977  000336  6B97               	clrf	??_main& (0+255),b
  1978  000338                     u5598:
  1979  000338  0100               	movlb	0	; () banked
  1980  00033A  4797               	rlncf	??_main& (0+255),f,b
  1981  00033C  508C               	movf	3980,w,c	;volatile
  1982  00033E  0100               	movlb	0	; () banked
  1983  000340  1997               	xorwf	??_main& (0+255),w,b
  1984  000342  0BFD               	andlw	-3
  1985  000344  1997               	xorwf	??_main& (0+255),w,b
  1986  000346  6E8C               	movwf	3980,c	;volatile
  1987                           
  1988                           ; BSR set to: 0
  1989                           ;main.c: 184: wait_3ms(2);
  1990  000348  0E00               	movlw	0
  1991  00034A  6E36               	movwf	wait_3ms@x+1,c
  1992  00034C  0E02               	movlw	2
  1993  00034E  6E35               	movwf	wait_3ms@x,c
  1994  000350  ECDB  F00F         	call	_wait_3ms	;wreg free
  1995  000354  0100               	movlb	0	; () banked
  1996  000356  4BA3               	infsnz	main@i_598& (0+255),f,b
  1997  000358  2BA4               	incf	(main@i_598+1)& (0+255),f,b
  1998  00035A  D7DE               	goto	l4804
  1999  00035C                     l4816:
  2000                           
  2001                           ; BSR set to: 0
  2002                           ;main.c: 185: }
  2003                           ;main.c: 186: doneTimer = 0;
  2004  00035C  0E00               	movlw	0
  2005  00035E  6E44               	movwf	_doneTimer,c
  2006  000360                     l4818:
  2007                           
  2008                           ; BSR set to: 0
  2009                           ;main.c: 187: }
  2010                           ;main.c: 188: readADC(0);
  2011  000360  0E00               	movlw	0
  2012  000362  ECE8  F00F         	call	_readADC
  2013                           
  2014                           ;main.c: 191: if (ADRES < 50 | ADRES > 80){
  2015  000366  50C4               	movf	4036,w,c	;volatile
  2016  000368  E104               	bnz	u5611
  2017  00036A  0E51               	movlw	81
  2018  00036C  5CC3               	subwf	4035,w,c	;volatile
  2019  00036E  A0D8               	btfss	status,0,c
  2020  000370  D002               	goto	u5610
  2021  000372                     u5611:
  2022  000372  0E01               	movlw	1
  2023  000374  D001               	goto	u5612
  2024  000376                     u5610:
  2025  000376  0E00               	movlw	0
  2026  000378                     u5612:
  2027  000378  0100               	movlb	0	; () banked
  2028  00037A  6F97               	movwf	??_main& (0+255),b
  2029  00037C  50C4               	movf	4036,w,c	;volatile
  2030  00037E  E106               	bnz	u5620
  2031  000380  0E32               	movlw	50
  2032  000382  5CC3               	subwf	4035,w,c	;volatile
  2033  000384  B0D8               	btfsc	status,0,c
  2034  000386  D002               	goto	u5620
  2035  000388  0E01               	movlw	1
  2036  00038A  D001               	goto	u5622
  2037  00038C                     u5620:
  2038  00038C  0E00               	movlw	0
  2039  00038E                     u5622:
  2040  00038E  0100               	movlb	0	; () banked
  2041  000390  1197               	iorwf	??_main& (0+255),w,b
  2042  000392  A0E8               	btfss	wreg,0,c
  2043  000394  D10C               	goto	l259
  2044                           
  2045                           ; BSR set to: 0
  2046                           ;main.c: 192: wait_3ms(167);
  2047  000396  0E00               	movlw	0
  2048  000398  6E36               	movwf	wait_3ms@x+1,c
  2049  00039A  0EA7               	movlw	167
  2050  00039C  6E35               	movwf	wait_3ms@x,c
  2051  00039E  ECDB  F00F         	call	_wait_3ms	;wreg free
  2052                           
  2053                           ;main.c: 193: sorting = 1;
  2054  0003A2  0E01               	movlw	1
  2055  0003A4  6E48               	movwf	_sorting,c
  2056                           
  2057                           ;main.c: 194: LATCbits.LC7 = 1;;
  2058  0003A6  8E8B               	bsf	3979,7,c	;volatile
  2059                           
  2060                           ;main.c: 195: wait_3ms(167);
  2061  0003A8  0E00               	movlw	0
  2062  0003AA  6E36               	movwf	wait_3ms@x+1,c
  2063  0003AC  0EA7               	movlw	167
  2064  0003AE  6E35               	movwf	wait_3ms@x,c
  2065  0003B0  ECDB  F00F         	call	_wait_3ms	;wreg free
  2066                           
  2067                           ;main.c: 196: testBatteries();
  2068  0003B4  EC69  F00A         	call	_testBatteries	;wreg free
  2069                           
  2070                           ;main.c: 197: LATCbits.LC7 = 0;;
  2071  0003B8  9E8B               	bcf	3979,7,c	;volatile
  2072                           
  2073                           ;main.c: 198: if (plat1Left){
  2074  0003BA  0100               	movlb	0	; () banked
  2075  0003BC  51B8               	movf	_plat1Left& (0+255),w,b
  2076  0003BE  0100               	movlb	0	; () banked
  2077  0003C0  11B9               	iorwf	(_plat1Left+1)& (0+255),w,b
  2078  0003C2  B4D8               	btfsc	status,2,c
  2079  0003C4  D004               	goto	l4840
  2080                           
  2081                           ; BSR set to: 0
  2082                           ;main.c: 199: step1 = 1;
  2083  0003C6  0E01               	movlw	1
  2084  0003C8  6E49               	movwf	_step1,c
  2085                           
  2086                           ; BSR set to: 0
  2087                           ;main.c: 200: turn1BackRight = plat1Left;
  2088  0003CA  C0B8  F0CE         	movff	_plat1Left,_turn1BackRight
  2089  0003CE                     l4840:
  2090                           
  2091                           ; BSR set to: 0
  2092                           ;main.c: 201: }
  2093                           ;main.c: 202: if (plat1Right){
  2094  0003CE  0100               	movlb	0	; () banked
  2095  0003D0  51BA               	movf	_plat1Right& (0+255),w,b
  2096  0003D2  0100               	movlb	0	; () banked
  2097  0003D4  11BB               	iorwf	(_plat1Right+1)& (0+255),w,b
  2098  0003D6  B4D8               	btfsc	status,2,c
  2099  0003D8  D004               	goto	l4846
  2100                           
  2101                           ; BSR set to: 0
  2102                           ;main.c: 203: step1 = 4;
  2103  0003DA  0E04               	movlw	4
  2104  0003DC  6E49               	movwf	_step1,c
  2105                           
  2106                           ; BSR set to: 0
  2107                           ;main.c: 204: turn1BackLeft = plat1Right;
  2108  0003DE  C0BA  F0CD         	movff	_plat1Right,_turn1BackLeft
  2109  0003E2                     l4846:
  2110                           
  2111                           ; BSR set to: 0
  2112                           ;main.c: 205: }
  2113                           ;main.c: 206: if (plat2Left){
  2114  0003E2  0100               	movlb	0	; () banked
  2115  0003E4  51BC               	movf	_plat2Left& (0+255),w,b
  2116  0003E6  0100               	movlb	0	; () banked
  2117  0003E8  11BD               	iorwf	(_plat2Left+1)& (0+255),w,b
  2118  0003EA  B4D8               	btfsc	status,2,c
  2119  0003EC  D004               	goto	l4852
  2120                           
  2121                           ; BSR set to: 0
  2122                           ;main.c: 207: step2 = 1;
  2123  0003EE  0E01               	movlw	1
  2124  0003F0  6E4A               	movwf	_step2,c
  2125                           
  2126                           ; BSR set to: 0
  2127                           ;main.c: 208: turn2BackRight = plat2Left;
  2128  0003F2  C0BC  F0D0         	movff	_plat2Left,_turn2BackRight
  2129  0003F6                     l4852:
  2130                           
  2131                           ; BSR set to: 0
  2132                           ;main.c: 209: }
  2133                           ;main.c: 210: if (plat2Right){
  2134  0003F6  0100               	movlb	0	; () banked
  2135  0003F8  51BE               	movf	_plat2Right& (0+255),w,b
  2136  0003FA  0100               	movlb	0	; () banked
  2137  0003FC  11BF               	iorwf	(_plat2Right+1)& (0+255),w,b
  2138  0003FE  B4D8               	btfsc	status,2,c
  2139  000400  D004               	goto	l4858
  2140                           
  2141                           ; BSR set to: 0
  2142                           ;main.c: 211: step2 = 4;
  2143  000402  0E04               	movlw	4
  2144  000404  6E4A               	movwf	_step2,c
  2145                           
  2146                           ; BSR set to: 0
  2147                           ;main.c: 212: turn2BackLeft = plat2Right;
  2148  000406  C0BE  F0CF         	movff	_plat2Right,_turn2BackLeft
  2149  00040A                     l4858:
  2150                           
  2151                           ; BSR set to: 0
  2152                           ;main.c: 213: }
  2153                           ;main.c: 214: LATCbits.LC1 = 1;;
  2154  00040A  828B               	bsf	3979,1,c	;volatile
  2155                           
  2156                           ; BSR set to: 0
  2157                           ;main.c: 215: LATCbits.LC2 = 0;;
  2158  00040C  948B               	bcf	3979,2,c	;volatile
  2159                           
  2160                           ; BSR set to: 0
  2161                           ;main.c: 216: LATCbits.LC0 = 1;;
  2162  00040E  808B               	bsf	3979,0,c	;volatile
  2163                           
  2164                           ; BSR set to: 0
  2165                           ;main.c: 217: LATEbits.LE2 = 0;;
  2166  000410  948D               	bcf	3981,2,c	;volatile
  2167  000412                     l4866:
  2168                           
  2169                           ; BSR set to: 0
  2170  000412  0100               	movlb	0	; () banked
  2171  000414  51BC               	movf	_plat2Left& (0+255),w,b
  2172  000416  0100               	movlb	0	; () banked
  2173  000418  11B8               	iorwf	_plat1Left& (0+255),w,b
  2174  00041A  0100               	movlb	0	; () banked
  2175  00041C  6F97               	movwf	??_main& (0+255),b
  2176  00041E  0100               	movlb	0	; () banked
  2177  000420  51BD               	movf	(_plat2Left+1)& (0+255),w,b
  2178  000422  0100               	movlb	0	; () banked
  2179  000424  11B9               	iorwf	(_plat1Left+1)& (0+255),w,b
  2180  000426  0100               	movlb	0	; () banked
  2181  000428  6F98               	movwf	(??_main+1)& (0+255),b
  2182  00042A  0100               	movlb	0	; () banked
  2183  00042C  51BA               	movf	_plat1Right& (0+255),w,b
  2184  00042E  0100               	movlb	0	; () banked
  2185  000430  1397               	iorwf	??_main& (0+255),f,b
  2186  000432  0100               	movlb	0	; () banked
  2187  000434  51BB               	movf	(_plat1Right+1)& (0+255),w,b
  2188  000436  0100               	movlb	0	; () banked
  2189  000438  1398               	iorwf	(??_main+1)& (0+255),f,b
  2190  00043A  0100               	movlb	0	; () banked
  2191  00043C  51BE               	movf	_plat2Right& (0+255),w,b
  2192  00043E  0100               	movlb	0	; () banked
  2193  000440  1397               	iorwf	??_main& (0+255),f,b
  2194  000442  0100               	movlb	0	; () banked
  2195  000444  51BF               	movf	(_plat2Right+1)& (0+255),w,b
  2196  000446  0100               	movlb	0	; () banked
  2197  000448  1398               	iorwf	(??_main+1)& (0+255),f,b
  2198  00044A  0100               	movlb	0	; () banked
  2199  00044C  5197               	movf	??_main& (0+255),w,b
  2200  00044E  0100               	movlb	0	; () banked
  2201  000450  1198               	iorwf	(??_main+1)& (0+255),w,b
  2202  000452  B4D8               	btfsc	status,2,c
  2203  000454  D004               	goto	l4870
  2204                           
  2205                           ; BSR set to: 0
  2206  000456  0100               	movlb	0	; () banked
  2207  000458  05D1               	decf	_screenMode& (0+255),w,b
  2208  00045A  B4D8               	btfsc	status,2,c
  2209  00045C  D7DA               	goto	l4866
  2210  00045E                     l4870:
  2211                           
  2212                           ; BSR set to: 0
  2213                           ;main.c: 221: wait_3ms(333);
  2214  00045E  0E01               	movlw	1
  2215  000460  6E36               	movwf	wait_3ms@x+1,c
  2216  000462  0E4D               	movlw	77
  2217  000464  6E35               	movwf	wait_3ms@x,c
  2218  000466  ECDB  F00F         	call	_wait_3ms	;wreg free
  2219                           
  2220                           ;main.c: 223: LATCbits.LC1 = 1;;
  2221  00046A  828B               	bsf	3979,1,c	;volatile
  2222                           
  2223                           ;main.c: 224: LATCbits.LC2 = 0;;
  2224  00046C  948B               	bcf	3979,2,c	;volatile
  2225                           
  2226                           ;main.c: 225: LATCbits.LC0 = 1;;
  2227  00046E  808B               	bsf	3979,0,c	;volatile
  2228                           
  2229                           ;main.c: 226: LATEbits.LE2 = 0;;
  2230  000470  948D               	bcf	3981,2,c	;volatile
  2231                           
  2232                           ;main.c: 227: plat1Left = turn1BackLeft;
  2233  000472  C0CD  F0B8         	movff	_turn1BackLeft,_plat1Left
  2234  000476  0100               	movlb	0	; () banked
  2235  000478  6BB9               	clrf	(_plat1Left+1)& (0+255),b
  2236                           
  2237                           ; BSR set to: 0
  2238                           ;main.c: 228: plat1Right = turn1BackRight;
  2239  00047A  C0CE  F0BA         	movff	_turn1BackRight,_plat1Right
  2240  00047E  0100               	movlb	0	; () banked
  2241  000480  6BBB               	clrf	(_plat1Right+1)& (0+255),b
  2242                           
  2243                           ; BSR set to: 0
  2244                           ;main.c: 229: plat2Left = turn2BackLeft;
  2245  000482  C0CF  F0BC         	movff	_turn2BackLeft,_plat2Left
  2246  000486  0100               	movlb	0	; () banked
  2247  000488  6BBD               	clrf	(_plat2Left+1)& (0+255),b
  2248                           
  2249                           ; BSR set to: 0
  2250                           ;main.c: 230: plat2Right = turn2BackRight;
  2251  00048A  C0D0  F0BE         	movff	_turn2BackRight,_plat2Right
  2252  00048E  0100               	movlb	0	; () banked
  2253  000490  6BBF               	clrf	(_plat2Right+1)& (0+255),b
  2254                           
  2255                           ; BSR set to: 0
  2256                           ;main.c: 231: stepGear = 1;
  2257  000492  0E01               	movlw	1
  2258  000494  0100               	movlb	0	; () banked
  2259  000496  6FCC               	movwf	_stepGear& (0+255),b
  2260                           
  2261                           ; BSR set to: 0
  2262                           ;main.c: 232: LATDbits.LD0= 0;;
  2263  000498  908C               	bcf	3980,0,c	;volatile
  2264  00049A                     l4892:
  2265                           
  2266                           ; BSR set to: 0
  2267  00049A  0100               	movlb	0	; () banked
  2268  00049C  51BC               	movf	_plat2Left& (0+255),w,b
  2269  00049E  0100               	movlb	0	; () banked
  2270  0004A0  11B8               	iorwf	_plat1Left& (0+255),w,b
  2271  0004A2  0100               	movlb	0	; () banked
  2272  0004A4  6F97               	movwf	??_main& (0+255),b
  2273  0004A6  0100               	movlb	0	; () banked
  2274  0004A8  51BD               	movf	(_plat2Left+1)& (0+255),w,b
  2275  0004AA  0100               	movlb	0	; () banked
  2276  0004AC  11B9               	iorwf	(_plat1Left+1)& (0+255),w,b
  2277  0004AE  0100               	movlb	0	; () banked
  2278  0004B0  6F98               	movwf	(??_main+1)& (0+255),b
  2279  0004B2  0100               	movlb	0	; () banked
  2280  0004B4  51BA               	movf	_plat1Right& (0+255),w,b
  2281  0004B6  0100               	movlb	0	; () banked
  2282  0004B8  1397               	iorwf	??_main& (0+255),f,b
  2283  0004BA  0100               	movlb	0	; () banked
  2284  0004BC  51BB               	movf	(_plat1Right+1)& (0+255),w,b
  2285  0004BE  0100               	movlb	0	; () banked
  2286  0004C0  1398               	iorwf	(??_main+1)& (0+255),f,b
  2287  0004C2  0100               	movlb	0	; () banked
  2288  0004C4  51BE               	movf	_plat2Right& (0+255),w,b
  2289  0004C6  0100               	movlb	0	; () banked
  2290  0004C8  1397               	iorwf	??_main& (0+255),f,b
  2291  0004CA  0100               	movlb	0	; () banked
  2292  0004CC  51BF               	movf	(_plat2Right+1)& (0+255),w,b
  2293  0004CE  0100               	movlb	0	; () banked
  2294  0004D0  1398               	iorwf	(??_main+1)& (0+255),f,b
  2295  0004D2  0100               	movlb	0	; () banked
  2296  0004D4  51CC               	movf	_stepGear& (0+255),w,b
  2297  0004D6  B4D8               	btfsc	status,2,c
  2298  0004D8  D002               	goto	u5700
  2299  0004DA  0E01               	movlw	1
  2300  0004DC  D001               	goto	u5710
  2301  0004DE                     u5700:
  2302  0004DE  0E00               	movlw	0
  2303  0004E0                     u5710:
  2304  0004E0  0100               	movlb	0	; () banked
  2305  0004E2  6F99               	movwf	(??_main+2)& (0+255),b
  2306  0004E4  6B9A               	clrf	(??_main+3)& (0+255),b
  2307  0004E6  0100               	movlb	0	; () banked
  2308  0004E8  5197               	movf	??_main& (0+255),w,b
  2309  0004EA  0100               	movlb	0	; () banked
  2310  0004EC  1399               	iorwf	(??_main+2)& (0+255),f,b
  2311  0004EE  0100               	movlb	0	; () banked
  2312  0004F0  5198               	movf	(??_main+1)& (0+255),w,b
  2313  0004F2  0100               	movlb	0	; () banked
  2314  0004F4  139A               	iorwf	(??_main+3)& (0+255),f,b
  2315  0004F6  0100               	movlb	0	; () banked
  2316  0004F8  5199               	movf	(??_main+2)& (0+255),w,b
  2317  0004FA  0100               	movlb	0	; () banked
  2318  0004FC  119A               	iorwf	(??_main+3)& (0+255),w,b
  2319  0004FE  B4D8               	btfsc	status,2,c
  2320  000500  D004               	goto	l273
  2321                           
  2322                           ; BSR set to: 0
  2323  000502  0100               	movlb	0	; () banked
  2324  000504  05D1               	decf	_screenMode& (0+255),w,b
  2325  000506  B4D8               	btfsc	status,2,c
  2326  000508  D7C8               	goto	l4892
  2327  00050A                     l273:
  2328                           
  2329                           ; BSR set to: 0
  2330                           ;main.c: 236: LATDbits.LD1 = 0;;
  2331  00050A  928C               	bcf	3980,1,c	;volatile
  2332                           
  2333                           ;main.c: 237: LATDbits.LD0= 0;;
  2334  00050C  908C               	bcf	3980,0,c	;volatile
  2335                           
  2336                           ; BSR set to: 0
  2337                           ;main.c: 238: plat1Right = 0;
  2338  00050E  0E00               	movlw	0
  2339  000510  0100               	movlb	0	; () banked
  2340  000512  6FBB               	movwf	(_plat1Right+1)& (0+255),b
  2341  000514  0E00               	movlw	0
  2342  000516  6FBA               	movwf	_plat1Right& (0+255),b
  2343                           
  2344                           ;main.c: 239: plat2Right = 0;
  2345  000518  0E00               	movlw	0
  2346  00051A  0100               	movlb	0	; () banked
  2347  00051C  6FBF               	movwf	(_plat2Right+1)& (0+255),b
  2348  00051E  0E00               	movlw	0
  2349  000520  6FBE               	movwf	_plat2Right& (0+255),b
  2350                           
  2351                           ;main.c: 240: plat1Left = 0;
  2352  000522  0E00               	movlw	0
  2353  000524  0100               	movlb	0	; () banked
  2354  000526  6FB9               	movwf	(_plat1Left+1)& (0+255),b
  2355  000528  0E00               	movlw	0
  2356  00052A  6FB8               	movwf	_plat1Left& (0+255),b
  2357                           
  2358                           ;main.c: 241: plat2Left = 0;
  2359  00052C  0E00               	movlw	0
  2360  00052E  0100               	movlb	0	; () banked
  2361  000530  6FBD               	movwf	(_plat2Left+1)& (0+255),b
  2362  000532  0E00               	movlw	0
  2363  000534  6FBC               	movwf	_plat2Left& (0+255),b
  2364                           
  2365                           ;main.c: 242: turn1BackRight = 0;
  2366  000536  0E00               	movlw	0
  2367  000538  0100               	movlb	0	; () banked
  2368  00053A  6FCE               	movwf	_turn1BackRight& (0+255),b
  2369                           
  2370                           ;main.c: 243: turn1BackLeft = 0;
  2371  00053C  0E00               	movlw	0
  2372  00053E  0100               	movlb	0	; () banked
  2373  000540  6FCD               	movwf	_turn1BackLeft& (0+255),b
  2374                           
  2375                           ;main.c: 244: turn2BackRight = 0;
  2376  000542  0E00               	movlw	0
  2377  000544  0100               	movlb	0	; () banked
  2378  000546  6FD0               	movwf	_turn2BackRight& (0+255),b
  2379                           
  2380                           ;main.c: 245: turn2BackLeft = 0;
  2381  000548  0E00               	movlw	0
  2382  00054A  0100               	movlb	0	; () banked
  2383  00054C  6FCF               	movwf	_turn2BackLeft& (0+255),b
  2384                           
  2385                           ; BSR set to: 0
  2386                           ;main.c: 246: LATCbits.LC1 = 0;;
  2387  00054E  928B               	bcf	3979,1,c	;volatile
  2388                           
  2389                           ; BSR set to: 0
  2390                           ;main.c: 247: LATCbits.LC2 = 0;;
  2391  000550  948B               	bcf	3979,2,c	;volatile
  2392                           
  2393                           ; BSR set to: 0
  2394                           ;main.c: 248: LATCbits.LC5 = 0;;
  2395  000552  9A8B               	bcf	3979,5,c	;volatile
  2396                           
  2397                           ; BSR set to: 0
  2398                           ;main.c: 249: LATCbits.LC6 = 0;;
  2399  000554  9C8B               	bcf	3979,6,c	;volatile
  2400                           
  2401                           ; BSR set to: 0
  2402                           ;main.c: 250: LATCbits.LC0 = 0;;
  2403  000556  908B               	bcf	3979,0,c	;volatile
  2404                           
  2405                           ; BSR set to: 0
  2406                           ;main.c: 251: LATEbits.LE2 = 0;;
  2407  000558  948D               	bcf	3981,2,c	;volatile
  2408                           
  2409                           ; BSR set to: 0
  2410                           ;main.c: 252: LATEbits.LE1 = 0;;
  2411  00055A  928D               	bcf	3981,1,c	;volatile
  2412                           
  2413                           ; BSR set to: 0
  2414                           ;main.c: 253: LATAbits.LA4 = 0;;
  2415  00055C  9889               	bcf	3977,4,c	;volatile
  2416                           
  2417                           ; BSR set to: 0
  2418                           ;main.c: 254: if (((countC + countAA + count9V + countDrain) >= 15)){
  2419  00055E  0100               	movlb	0	; () banked
  2420  000560  51C1               	movf	_countAA& (0+255),w,b
  2421  000562  C0C2  F097         	movff	_countC,??_main
  2422  000566  0100               	movlb	0	; () banked
  2423  000568  6B98               	clrf	(??_main+1)& (0+255),b
  2424  00056A  0100               	movlb	0	; () banked
  2425  00056C  2797               	addwf	??_main& (0+255),f,b
  2426  00056E  0E00               	movlw	0
  2427  000570  2398               	addwfc	(??_main+1)& (0+255),f,b
  2428  000572  0100               	movlb	0	; () banked
  2429  000574  51C0               	movf	_count9V& (0+255),w,b
  2430  000576  0100               	movlb	0	; () banked
  2431  000578  2797               	addwf	??_main& (0+255),f,b
  2432  00057A  0E00               	movlw	0
  2433  00057C  2398               	addwfc	(??_main+1)& (0+255),f,b
  2434  00057E  0100               	movlb	0	; () banked
  2435  000580  51C3               	movf	_countDrain& (0+255),w,b
  2436  000582  0100               	movlb	0	; () banked
  2437  000584  2797               	addwf	??_main& (0+255),f,b
  2438  000586  0E00               	movlw	0
  2439  000588  2398               	addwfc	(??_main+1)& (0+255),f,b
  2440  00058A  0100               	movlb	0	; () banked
  2441  00058C  BF98               	btfsc	(??_main+1)& (0+255),7,b
  2442  00058E  D00D               	goto	l4920
  2443  000590  0100               	movlb	0	; () banked
  2444  000592  5198               	movf	(??_main+1)& (0+255),w,b
  2445  000594  E105               	bnz	u5740
  2446  000596  0E0F               	movlw	15
  2447  000598  0100               	movlb	0	; () banked
  2448  00059A  5D97               	subwf	??_main& (0+255),w,b
  2449  00059C  A0D8               	btfss	status,0,c
  2450  00059E  D005               	goto	l4920
  2451  0005A0                     u5740:
  2452                           
  2453                           ; BSR set to: 0
  2454                           ;main.c: 255: screenMode = 0;
  2455  0005A0  0E00               	movlw	0
  2456  0005A2  0100               	movlb	0	; () banked
  2457  0005A4  6FD1               	movwf	_screenMode& (0+255),b
  2458                           
  2459                           ; BSR set to: 0
  2460                           ;main.c: 256: stopOperation();
  2461  0005A6  ECE0  F00B         	call	_stopOperation	;wreg free
  2462  0005AA                     l4920:
  2463                           
  2464                           ;main.c: 257: }
  2465                           ;main.c: 258: sorting = 0;
  2466  0005AA  0E00               	movlw	0
  2467  0005AC  6E48               	movwf	_sorting,c
  2468  0005AE                     l259:
  2469                           
  2470                           ;main.c: 259: }
  2471                           ;main.c: 260: wait_3ms(167);
  2472  0005AE  0E00               	movlw	0
  2473  0005B0  6E36               	movwf	wait_3ms@x+1,c
  2474  0005B2  0EA7               	movlw	167
  2475  0005B4  6E35               	movwf	wait_3ms@x,c
  2476  0005B6  ECDB  F00F         	call	_wait_3ms	;wreg free
  2477  0005BA                     l4922:
  2478  0005BA  0100               	movlb	0	; () banked
  2479  0005BC  05D1               	decf	_screenMode& (0+255),w,b
  2480  0005BE  A4D8               	btfss	status,2,c
  2481  0005C0  D017               	goto	l4930
  2482  0005C2  D5C0               	goto	l4734
  2483  0005C4                     l4924:
  2484                           
  2485                           ; BSR set to: 0
  2486                           ;main.c: 264: lcdInst(0b10000000);;
  2487  0005C4  0E80               	movlw	128
  2488  0005C6  EC0A  F010         	call	_lcdInst
  2489                           
  2490                           ;main.c: 265: printf("DONE! PRESS *   ");
  2491  0005CA  0E98               	movlw	low STR_5
  2492  0005CC  0100               	movlb	0	; () banked
  2493  0005CE  6F81               	movwf	printf@f& (0+255),b
  2494  0005D0  0EFF               	movlw	high STR_5
  2495  0005D2  0100               	movlb	0	; () banked
  2496  0005D4  6F82               	movwf	(printf@f+1)& (0+255),b
  2497  0005D6  EC0D  F007         	call	_printf	;wreg free
  2498                           
  2499                           ;main.c: 266: lcdInst(0b11000000);;
  2500  0005DA  0EC0               	movlw	192
  2501  0005DC  EC0A  F010         	call	_lcdInst
  2502                           
  2503                           ;main.c: 267: printf("TO CONTINUE     ");
  2504  0005E0  0E76               	movlw	low STR_6
  2505  0005E2  0100               	movlb	0	; () banked
  2506  0005E4  6F81               	movwf	printf@f& (0+255),b
  2507  0005E6  0EFF               	movlw	high STR_6
  2508  0005E8  0100               	movlb	0	; () banked
  2509  0005EA  6F82               	movwf	(printf@f+1)& (0+255),b
  2510  0005EC  EC0D  F007         	call	_printf	;wreg free
  2511  0005F0                     l4930:
  2512  0005F0  0100               	movlb	0	; () banked
  2513  0005F2  51D1               	movf	_screenMode& (0+255),w,b
  2514  0005F4  A4D8               	btfss	status,2,c
  2515  0005F6  D01F               	goto	l4938
  2516  0005F8  D7E5               	goto	l4924
  2517  0005FA                     l4932:
  2518                           
  2519                           ; BSR set to: 0
  2520                           ;main.c: 270: lcdInst(0b10000000);;
  2521  0005FA  0E80               	movlw	128
  2522  0005FC  EC0A  F010         	call	_lcdInst
  2523                           
  2524                           ;main.c: 271: printf("TOTAL RUN TIME: ");
  2525  000600  0EBA               	movlw	low STR_7
  2526  000602  0100               	movlb	0	; () banked
  2527  000604  6F81               	movwf	printf@f& (0+255),b
  2528  000606  0EFF               	movlw	high STR_7
  2529  000608  0100               	movlb	0	; () banked
  2530  00060A  6F82               	movwf	(printf@f+1)& (0+255),b
  2531  00060C  EC0D  F007         	call	_printf	;wreg free
  2532                           
  2533                           ;main.c: 272: lcdInst(0b11000000);;
  2534  000610  0EC0               	movlw	192
  2535  000612  EC0A  F010         	call	_lcdInst
  2536                           
  2537                           ;main.c: 273: printf("%02d:%02d               ", min, sec);
  2538  000616  0E2A               	movlw	low STR_8
  2539  000618  0100               	movlb	0	; () banked
  2540  00061A  6F81               	movwf	printf@f& (0+255),b
  2541  00061C  0EFE               	movlw	high STR_8
  2542  00061E  0100               	movlb	0	; () banked
  2543  000620  6F82               	movwf	(printf@f+1)& (0+255),b
  2544  000622  C0C4  F083         	movff	_min,?_printf+2
  2545  000626  0100               	movlb	0	; () banked
  2546  000628  6B84               	clrf	(?_printf+3)& (0+255),b
  2547  00062A  C0CA  F085         	movff	_sec,?_printf+4
  2548  00062E  0100               	movlb	0	; () banked
  2549  000630  6B86               	clrf	(?_printf+5)& (0+255),b
  2550  000632  EC0D  F007         	call	_printf	;wreg free
  2551  000636                     l4938:
  2552  000636  0E03               	movlw	3
  2553  000638  0100               	movlb	0	; () banked
  2554  00063A  19D1               	xorwf	_screenMode& (0+255),w,b
  2555  00063C  A4D8               	btfss	status,2,c
  2556  00063E  D01B               	goto	l4946
  2557  000640  D7DC               	goto	l4932
  2558  000642                     l4940:
  2559                           
  2560                           ; BSR set to: 0
  2561                           ;main.c: 276: lcdInst(0b10000000);;
  2562  000642  0E80               	movlw	128
  2563  000644  EC0A  F010         	call	_lcdInst
  2564                           
  2565                           ;main.c: 277: printf("TOTAL # OF      ");
  2566  000648  0E65               	movlw	low STR_9
  2567  00064A  0100               	movlb	0	; () banked
  2568  00064C  6F81               	movwf	printf@f& (0+255),b
  2569  00064E  0EFF               	movlw	high STR_9
  2570  000650  0100               	movlb	0	; () banked
  2571  000652  6F82               	movwf	(printf@f+1)& (0+255),b
  2572  000654  EC0D  F007         	call	_printf	;wreg free
  2573                           
  2574                           ;main.c: 278: lcdInst(0b11000000);;
  2575  000658  0EC0               	movlw	192
  2576  00065A  EC0A  F010         	call	_lcdInst
  2577                           
  2578                           ;main.c: 279: printf("BATTERIES: %02d   ", numBats);
  2579  00065E  0ECA               	movlw	low STR_10
  2580  000660  0100               	movlb	0	; () banked
  2581  000662  6F81               	movwf	printf@f& (0+255),b
  2582  000664  0EFE               	movlw	high STR_10
  2583  000666  0100               	movlb	0	; () banked
  2584  000668  6F82               	movwf	(printf@f+1)& (0+255),b
  2585  00066A  C0C7  F083         	movff	_numBats,?_printf+2
  2586  00066E  0100               	movlb	0	; () banked
  2587  000670  6B84               	clrf	(?_printf+3)& (0+255),b
  2588  000672  EC0D  F007         	call	_printf	;wreg free
  2589  000676                     l4946:
  2590  000676  0E04               	movlw	4
  2591  000678  0100               	movlb	0	; () banked
  2592  00067A  19D1               	xorwf	_screenMode& (0+255),w,b
  2593  00067C  A4D8               	btfss	status,2,c
  2594  00067E  D01B               	goto	l4954
  2595  000680  D7E0               	goto	l4940
  2596  000682                     l4948:
  2597                           
  2598                           ; BSR set to: 0
  2599                           ;main.c: 282: lcdInst(0b10000000);;
  2600  000682  0E80               	movlw	128
  2601  000684  EC0A  F010         	call	_lcdInst
  2602                           
  2603                           ;main.c: 283: printf("# OF C          ");
  2604  000688  0EFF               	movlw	low STR_11
  2605  00068A  0100               	movlb	0	; () banked
  2606  00068C  6F81               	movwf	printf@f& (0+255),b
  2607  00068E  0EFE               	movlw	high STR_11
  2608  000690  0100               	movlb	0	; () banked
  2609  000692  6F82               	movwf	(printf@f+1)& (0+255),b
  2610  000694  EC0D  F007         	call	_printf	;wreg free
  2611                           
  2612                           ;main.c: 284: lcdInst(0b11000000);;
  2613  000698  0EC0               	movlw	192
  2614  00069A  EC0A  F010         	call	_lcdInst
  2615                           
  2616                           ;main.c: 285: printf("BATTERIES: %02d   ", numC);
  2617  00069E  0ECA               	movlw	low STR_10
  2618  0006A0  0100               	movlb	0	; () banked
  2619  0006A2  6F81               	movwf	printf@f& (0+255),b
  2620  0006A4  0EFE               	movlw	high STR_10
  2621  0006A6  0100               	movlb	0	; () banked
  2622  0006A8  6F82               	movwf	(printf@f+1)& (0+255),b
  2623  0006AA  C0C8  F083         	movff	_numC,?_printf+2
  2624  0006AE  0100               	movlb	0	; () banked
  2625  0006B0  6B84               	clrf	(?_printf+3)& (0+255),b
  2626  0006B2  EC0D  F007         	call	_printf	;wreg free
  2627  0006B6                     l4954:
  2628  0006B6  0E05               	movlw	5
  2629  0006B8  0100               	movlb	0	; () banked
  2630  0006BA  19D1               	xorwf	_screenMode& (0+255),w,b
  2631  0006BC  A4D8               	btfss	status,2,c
  2632  0006BE  D01B               	goto	l4962
  2633  0006C0  D7E0               	goto	l4948
  2634  0006C2                     l4956:
  2635                           
  2636                           ; BSR set to: 0
  2637                           ;main.c: 288: lcdInst(0b10000000);;
  2638  0006C2  0E80               	movlw	128
  2639  0006C4  EC0A  F010         	call	_lcdInst
  2640                           
  2641                           ;main.c: 289: printf("# OF 9V         ");
  2642  0006C8  0E32               	movlw	low STR_13
  2643  0006CA  0100               	movlb	0	; () banked
  2644  0006CC  6F81               	movwf	printf@f& (0+255),b
  2645  0006CE  0EFF               	movlw	high STR_13
  2646  0006D0  0100               	movlb	0	; () banked
  2647  0006D2  6F82               	movwf	(printf@f+1)& (0+255),b
  2648  0006D4  EC0D  F007         	call	_printf	;wreg free
  2649                           
  2650                           ;main.c: 290: lcdInst(0b11000000);;
  2651  0006D8  0EC0               	movlw	192
  2652  0006DA  EC0A  F010         	call	_lcdInst
  2653                           
  2654                           ;main.c: 291: printf("BATTERIES: %02d     ", num9V);
  2655  0006DE  0EB5               	movlw	low STR_14
  2656  0006E0  0100               	movlb	0	; () banked
  2657  0006E2  6F81               	movwf	printf@f& (0+255),b
  2658  0006E4  0EFE               	movlw	high STR_14
  2659  0006E6  0100               	movlb	0	; () banked
  2660  0006E8  6F82               	movwf	(printf@f+1)& (0+255),b
  2661  0006EA  C0C5  F083         	movff	_num9V,?_printf+2
  2662  0006EE  0100               	movlb	0	; () banked
  2663  0006F0  6B84               	clrf	(?_printf+3)& (0+255),b
  2664  0006F2  EC0D  F007         	call	_printf	;wreg free
  2665  0006F6                     l4962:
  2666  0006F6  0E06               	movlw	6
  2667  0006F8  0100               	movlb	0	; () banked
  2668  0006FA  19D1               	xorwf	_screenMode& (0+255),w,b
  2669  0006FC  A4D8               	btfss	status,2,c
  2670  0006FE  D01B               	goto	l4970
  2671  000700  D7E0               	goto	l4956
  2672  000702                     l4964:
  2673                           
  2674                           ; BSR set to: 0
  2675                           ;main.c: 294: lcdInst(0b10000000);;
  2676  000702  0E80               	movlw	128
  2677  000704  EC0A  F010         	call	_lcdInst
  2678                           
  2679                           ;main.c: 295: printf("# OF AA         ");
  2680  000708  0E10               	movlw	low STR_15
  2681  00070A  0100               	movlb	0	; () banked
  2682  00070C  6F81               	movwf	printf@f& (0+255),b
  2683  00070E  0EFF               	movlw	high STR_15
  2684  000710  0100               	movlb	0	; () banked
  2685  000712  6F82               	movwf	(printf@f+1)& (0+255),b
  2686  000714  EC0D  F007         	call	_printf	;wreg free
  2687                           
  2688                           ;main.c: 296: lcdInst(0b11000000);;
  2689  000718  0EC0               	movlw	192
  2690  00071A  EC0A  F010         	call	_lcdInst
  2691                           
  2692                           ;main.c: 297: printf("BATTERIES: %02d     ", numAA);
  2693  00071E  0EB5               	movlw	low STR_14
  2694  000720  0100               	movlb	0	; () banked
  2695  000722  6F81               	movwf	printf@f& (0+255),b
  2696  000724  0EFE               	movlw	high STR_14
  2697  000726  0100               	movlb	0	; () banked
  2698  000728  6F82               	movwf	(printf@f+1)& (0+255),b
  2699  00072A  C0C6  F083         	movff	_numAA,?_printf+2
  2700  00072E  0100               	movlb	0	; () banked
  2701  000730  6B84               	clrf	(?_printf+3)& (0+255),b
  2702  000732  EC0D  F007         	call	_printf	;wreg free
  2703  000736                     l4970:
  2704  000736  0E07               	movlw	7
  2705  000738  0100               	movlb	0	; () banked
  2706  00073A  19D1               	xorwf	_screenMode& (0+255),w,b
  2707  00073C  A4D8               	btfss	status,2,c
  2708  00073E  D01B               	goto	l4978
  2709  000740  D7E0               	goto	l4964
  2710  000742                     l4972:
  2711                           
  2712                           ; BSR set to: 0
  2713                           ;main.c: 300: lcdInst(0b10000000);;
  2714  000742  0E80               	movlw	128
  2715  000744  EC0A  F010         	call	_lcdInst
  2716                           
  2717                           ;main.c: 301: printf("# OF DRAINED    ");
  2718  000748  0E87               	movlw	low STR_17
  2719  00074A  0100               	movlb	0	; () banked
  2720  00074C  6F81               	movwf	printf@f& (0+255),b
  2721  00074E  0EFF               	movlw	high STR_17
  2722  000750  0100               	movlb	0	; () banked
  2723  000752  6F82               	movwf	(printf@f+1)& (0+255),b
  2724  000754  EC0D  F007         	call	_printf	;wreg free
  2725                           
  2726                           ;main.c: 302: lcdInst(0b11000000);;
  2727  000758  0EC0               	movlw	192
  2728  00075A  EC0A  F010         	call	_lcdInst
  2729                           
  2730                           ;main.c: 303: printf("BATTERIES: %02d     ", numDrain);
  2731  00075E  0EB5               	movlw	low STR_14
  2732  000760  0100               	movlb	0	; () banked
  2733  000762  6F81               	movwf	printf@f& (0+255),b
  2734  000764  0EFE               	movlw	high STR_14
  2735  000766  0100               	movlb	0	; () banked
  2736  000768  6F82               	movwf	(printf@f+1)& (0+255),b
  2737  00076A  C0C9  F083         	movff	_numDrain,?_printf+2
  2738  00076E  0100               	movlb	0	; () banked
  2739  000770  6B84               	clrf	(?_printf+3)& (0+255),b
  2740  000772  EC0D  F007         	call	_printf	;wreg free
  2741  000776                     l4978:
  2742  000776  0E08               	movlw	8
  2743  000778  0100               	movlb	0	; () banked
  2744  00077A  19D1               	xorwf	_screenMode& (0+255),w,b
  2745  00077C  A4D8               	btfss	status,2,c
  2746  00077E  D06F               	goto	l5018
  2747  000780  D7E0               	goto	l4972
  2748  000782                     l4980:
  2749                           
  2750                           ; BSR set to: 0
  2751                           ;main.c: 306: lcdInst(0b10000000);;
  2752  000782  0E80               	movlw	128
  2753  000784  EC0A  F010         	call	_lcdInst
  2754                           
  2755                           ;main.c: 307: printf("LAST RUN:       ");
  2756  000788  0E54               	movlw	low STR_19
  2757  00078A  0100               	movlb	0	; () banked
  2758  00078C  6F81               	movwf	printf@f& (0+255),b
  2759  00078E  0EFF               	movlw	high STR_19
  2760  000790  0100               	movlb	0	; () banked
  2761  000792  6F82               	movwf	(printf@f+1)& (0+255),b
  2762  000794  EC0D  F007         	call	_printf	;wreg free
  2763                           
  2764                           ;main.c: 308: lcdInst(0b11000000);;
  2765  000798  0EC0               	movlw	192
  2766  00079A  EC0A  F010         	call	_lcdInst
  2767                           
  2768                           ;main.c: 309: printf("%02x/%02x/%02x        ", lastRunRTC[6],lastRunRTC[5],lastRunRTC[4]
      +                          );
  2769  00079E  0E43               	movlw	low STR_20
  2770  0007A0  0100               	movlb	0	; () banked
  2771  0007A2  6F81               	movwf	printf@f& (0+255),b
  2772  0007A4  0EFE               	movlw	high STR_20
  2773  0007A6  0100               	movlb	0	; () banked
  2774  0007A8  6F82               	movwf	(printf@f+1)& (0+255),b
  2775  0007AA  C0B0  F083         	movff	_lastRunRTC+6,?_printf+2
  2776  0007AE  0100               	movlb	0	; () banked
  2777  0007B0  6B84               	clrf	(?_printf+3)& (0+255),b
  2778  0007B2  C0AF  F085         	movff	_lastRunRTC+5,?_printf+4
  2779  0007B6  0100               	movlb	0	; () banked
  2780  0007B8  6B86               	clrf	(?_printf+5)& (0+255),b
  2781  0007BA  C0AE  F087         	movff	_lastRunRTC+4,?_printf+6
  2782  0007BE  0100               	movlb	0	; () banked
  2783  0007C0  6B88               	clrf	(?_printf+7)& (0+255),b
  2784  0007C2  EC0D  F007         	call	_printf	;wreg free
  2785                           
  2786                           ;main.c: 310: for(unsigned char i=0;i<200;i++){
  2787  0007C6  0E00               	movlw	0
  2788  0007C8  0100               	movlb	0	; () banked
  2789  0007CA  6FA7               	movwf	main@i_634& (0+255),b
  2790  0007CC                     l4988:
  2791                           
  2792                           ; BSR set to: 0
  2793  0007CC  0EC7               	movlw	199
  2794  0007CE  0100               	movlb	0	; () banked
  2795  0007D0  65A7               	cpfsgt	main@i_634& (0+255),b
  2796  0007D2  D001               	goto	l4992
  2797  0007D4  D011               	goto	l5000
  2798  0007D6                     l4992:
  2799                           
  2800                           ; BSR set to: 0
  2801                           ;main.c: 311: if (screenMode != 9)
  2802  0007D6  0E09               	movlw	9
  2803  0007D8  0100               	movlb	0	; () banked
  2804  0007DA  19D1               	xorwf	_screenMode& (0+255),w,b
  2805  0007DC  A4D8               	btfss	status,2,c
  2806  0007DE  D00C               	goto	l5000
  2807                           
  2808                           ; BSR set to: 0
  2809                           ;main.c: 313: _delay((unsigned long)((10)*(10000000/4000.0)));
  2810                           
  2811                           ; BSR set to: 0
  2812                           
  2813                           ; BSR set to: 0
  2814                           ;main.c: 312: break;
  2815  0007E0  0E21               	movlw	33
  2816  0007E2  0100               	movlb	0	; () banked
  2817  0007E4  6F97               	movwf	??_main& (0+255),b
  2818  0007E6  0E76               	movlw	118
  2819  0007E8                     u5967:
  2820  0007E8  2EE8               	decfsz	wreg,f,c
  2821  0007EA  D7FE               	bra	u5967
  2822  0007EC  2F97               	decfsz	??_main& (0+255),f,b
  2823  0007EE  D7FC               	bra	u5967
  2824  0007F0  F000               	nop	
  2825  0007F2  0100               	movlb	0	; () banked
  2826  0007F4  2BA7               	incf	main@i_634& (0+255),f,b
  2827  0007F6  D7EA               	goto	l4988
  2828  0007F8                     l5000:
  2829                           
  2830                           ; BSR set to: 0
  2831                           ;main.c: 314: }
  2832                           ;main.c: 315: lcdInst(0b10000000);;
  2833  0007F8  0E80               	movlw	128
  2834  0007FA  EC0A  F010         	call	_lcdInst
  2835                           
  2836                           ;main.c: 316: lcdInst(0b11000000);;
  2837  0007FE  0EC0               	movlw	192
  2838  000800  EC0A  F010         	call	_lcdInst
  2839                           
  2840                           ;main.c: 317: printf("%02x:%02x:%02x        ", lastRunRTC[2],lastRunRTC[1],lastRunRTC[0]
      +                          );
  2841  000804  0E5A               	movlw	low STR_21
  2842  000806  0100               	movlb	0	; () banked
  2843  000808  6F81               	movwf	printf@f& (0+255),b
  2844  00080A  0EFE               	movlw	high STR_21
  2845  00080C  0100               	movlb	0	; () banked
  2846  00080E  6F82               	movwf	(printf@f+1)& (0+255),b
  2847  000810  C0AC  F083         	movff	_lastRunRTC+2,?_printf+2
  2848  000814  0100               	movlb	0	; () banked
  2849  000816  6B84               	clrf	(?_printf+3)& (0+255),b
  2850  000818  C0AB  F085         	movff	_lastRunRTC+1,?_printf+4
  2851  00081C  0100               	movlb	0	; () banked
  2852  00081E  6B86               	clrf	(?_printf+5)& (0+255),b
  2853  000820  C0AA  F087         	movff	_lastRunRTC,?_printf+6
  2854  000824  0100               	movlb	0	; () banked
  2855  000826  6B88               	clrf	(?_printf+7)& (0+255),b
  2856  000828  EC0D  F007         	call	_printf	;wreg free
  2857                           
  2858                           ;main.c: 318: for(unsigned char i=0;i<200;i++){
  2859  00082C  0E00               	movlw	0
  2860  00082E  0100               	movlb	0	; () banked
  2861  000830  6FA8               	movwf	main@i_636& (0+255),b
  2862  000832                     l5006:
  2863                           
  2864                           ; BSR set to: 0
  2865  000832  0EC7               	movlw	199
  2866  000834  0100               	movlb	0	; () banked
  2867  000836  65A8               	cpfsgt	main@i_636& (0+255),b
  2868  000838  D001               	goto	l5010
  2869  00083A  D011               	goto	l5018
  2870  00083C                     l5010:
  2871                           
  2872                           ; BSR set to: 0
  2873                           ;main.c: 319: if (screenMode != 9)
  2874  00083C  0E09               	movlw	9
  2875  00083E  0100               	movlb	0	; () banked
  2876  000840  19D1               	xorwf	_screenMode& (0+255),w,b
  2877  000842  A4D8               	btfss	status,2,c
  2878  000844  D00C               	goto	l5018
  2879                           
  2880                           ; BSR set to: 0
  2881                           ;main.c: 321: _delay((unsigned long)((10)*(10000000/4000.0)));
  2882                           
  2883                           ; BSR set to: 0
  2884                           
  2885                           ; BSR set to: 0
  2886                           ;main.c: 320: break;
  2887  000846  0E21               	movlw	33
  2888  000848  0100               	movlb	0	; () banked
  2889  00084A  6F97               	movwf	??_main& (0+255),b
  2890  00084C  0E76               	movlw	118
  2891  00084E                     u5977:
  2892  00084E  2EE8               	decfsz	wreg,f,c
  2893  000850  D7FE               	bra	u5977
  2894  000852  2F97               	decfsz	??_main& (0+255),f,b
  2895  000854  D7FC               	bra	u5977
  2896  000856  F000               	nop	
  2897  000858  0100               	movlb	0	; () banked
  2898  00085A  2BA8               	incf	main@i_636& (0+255),f,b
  2899  00085C  D7EA               	goto	l5006
  2900  00085E                     l5018:
  2901                           
  2902                           ; BSR set to: 0
  2903  00085E  0E09               	movlw	9
  2904  000860  0100               	movlb	0	; () banked
  2905  000862  19D1               	xorwf	_screenMode& (0+255),w,b
  2906  000864  A4D8               	btfss	status,2,c
  2907  000866  D066               	goto	l5040
  2908  000868  D78C               	goto	l4980
  2909  00086A                     l5020:
  2910                           
  2911                           ; BSR set to: 0
  2912                           ;main.c: 326: I2C_Master_Start();
  2913  00086A  EC2A  F010         	call	_I2C_Master_Start	;wreg free
  2914                           
  2915                           ;main.c: 327: I2C_Master_Write(0b11010000);
  2916  00086E  0E00               	movlw	0
  2917  000870  6E37               	movwf	I2C_Master_Write@d+1,c
  2918  000872  0ED0               	movlw	208
  2919  000874  6E36               	movwf	I2C_Master_Write@d,c
  2920  000876  EC1C  F010         	call	_I2C_Master_Write	;wreg free
  2921                           
  2922                           ;main.c: 328: I2C_Master_Write(0x00);
  2923  00087A  0E00               	movlw	0
  2924  00087C  6E37               	movwf	I2C_Master_Write@d+1,c
  2925  00087E  0E00               	movlw	0
  2926  000880  6E36               	movwf	I2C_Master_Write@d,c
  2927  000882  EC1C  F010         	call	_I2C_Master_Write	;wreg free
  2928                           
  2929                           ;main.c: 329: I2C_Master_Stop();
  2930  000886  EC26  F010         	call	_I2C_Master_Stop	;wreg free
  2931                           
  2932                           ;main.c: 331: I2C_Master_Start();
  2933  00088A  EC2A  F010         	call	_I2C_Master_Start	;wreg free
  2934                           
  2935                           ;main.c: 332: I2C_Master_Write(0b11010001);
  2936  00088E  0E00               	movlw	0
  2937  000890  6E37               	movwf	I2C_Master_Write@d+1,c
  2938  000892  0ED1               	movlw	209
  2939  000894  6E36               	movwf	I2C_Master_Write@d,c
  2940  000896  EC1C  F010         	call	_I2C_Master_Write	;wreg free
  2941                           
  2942                           ;main.c: 333: for(unsigned char i=0;i<0x06;i++){
  2943  00089A  0E00               	movlw	0
  2944  00089C  0100               	movlb	0	; () banked
  2945  00089E  6FA9               	movwf	main@i_640& (0+255),b
  2946  0008A0                     l5024:
  2947                           
  2948                           ; BSR set to: 0
  2949  0008A0  0E05               	movlw	5
  2950  0008A2  0100               	movlb	0	; () banked
  2951  0008A4  65A9               	cpfsgt	main@i_640& (0+255),b
  2952  0008A6  D001               	goto	l5028
  2953  0008A8  D010               	goto	l5034
  2954  0008AA                     l5028:
  2955                           
  2956                           ; BSR set to: 0
  2957                           ;main.c: 334: realTime[i] = I2C_Master_Read(1);
  2958  0008AA  0100               	movlb	0	; () banked
  2959  0008AC  51A9               	movf	main@i_640& (0+255),w,b
  2960  0008AE  0D01               	mullw	1
  2961  0008B0  0EB1               	movlw	low _realTime
  2962  0008B2  24F3               	addwf	prodl,w,c
  2963  0008B4  6ED9               	movwf	fsr2l,c
  2964  0008B6  0E00               	movlw	high _realTime
  2965  0008B8  20F4               	addwfc	prodh,w,c
  2966  0008BA  6EDA               	movwf	fsr2h,c
  2967  0008BC  0E01               	movlw	1
  2968  0008BE  EC84  F00F         	call	_I2C_Master_Read
  2969  0008C2  6EDF               	movwf	indf2,c
  2970  0008C4  0100               	movlb	0	; () banked
  2971  0008C6  2BA9               	incf	main@i_640& (0+255),f,b
  2972  0008C8  D7EB               	goto	l5024
  2973  0008CA                     l5034:
  2974                           
  2975                           ; BSR set to: 0
  2976                           ;main.c: 335: }
  2977                           ;main.c: 336: realTime[6] = I2C_Master_Read(0);
  2978  0008CA  0E00               	movlw	0
  2979  0008CC  EC84  F00F         	call	_I2C_Master_Read
  2980  0008D0  0100               	movlb	0	; () banked
  2981  0008D2  6FB7               	movwf	(_realTime+6)& (0+255),b
  2982                           
  2983                           ;main.c: 337: I2C_Master_Stop();
  2984  0008D4  EC26  F010         	call	_I2C_Master_Stop	;wreg free
  2985                           
  2986                           ;main.c: 338: lcdInst(0b10000000);;
  2987  0008D8  0E80               	movlw	128
  2988  0008DA  EC0A  F010         	call	_lcdInst
  2989                           
  2990                           ;main.c: 339: printf("DATE: %02x/%02x/%02x  ", realTime[6],realTime[5],realTime[4]);
  2991  0008DE  0E71               	movlw	low STR_22
  2992  0008E0  0100               	movlb	0	; () banked
  2993  0008E2  6F81               	movwf	printf@f& (0+255),b
  2994  0008E4  0EFE               	movlw	high STR_22
  2995  0008E6  0100               	movlb	0	; () banked
  2996  0008E8  6F82               	movwf	(printf@f+1)& (0+255),b
  2997  0008EA  C0B7  F083         	movff	_realTime+6,?_printf+2
  2998  0008EE  0100               	movlb	0	; () banked
  2999  0008F0  6B84               	clrf	(?_printf+3)& (0+255),b
  3000  0008F2  C0B6  F085         	movff	_realTime+5,?_printf+4
  3001  0008F6  0100               	movlb	0	; () banked
  3002  0008F8  6B86               	clrf	(?_printf+5)& (0+255),b
  3003  0008FA  C0B5  F087         	movff	_realTime+4,?_printf+6
  3004  0008FE  0100               	movlb	0	; () banked
  3005  000900  6B88               	clrf	(?_printf+7)& (0+255),b
  3006  000902  EC0D  F007         	call	_printf	;wreg free
  3007                           
  3008                           ;main.c: 340: lcdInst(0b11000000);;
  3009  000906  0EC0               	movlw	192
  3010  000908  EC0A  F010         	call	_lcdInst
  3011                           
  3012                           ;main.c: 341: printf("TIME: %02x:%02x:%02x  ", realTime[2],realTime[1],realTime[0]);
  3013  00090C  0E88               	movlw	low STR_23
  3014  00090E  0100               	movlb	0	; () banked
  3015  000910  6F81               	movwf	printf@f& (0+255),b
  3016  000912  0EFE               	movlw	high STR_23
  3017  000914  0100               	movlb	0	; () banked
  3018  000916  6F82               	movwf	(printf@f+1)& (0+255),b
  3019  000918  C0B3  F083         	movff	_realTime+2,?_printf+2
  3020  00091C  0100               	movlb	0	; () banked
  3021  00091E  6B84               	clrf	(?_printf+3)& (0+255),b
  3022  000920  C0B2  F085         	movff	_realTime+1,?_printf+4
  3023  000924  0100               	movlb	0	; () banked
  3024  000926  6B86               	clrf	(?_printf+5)& (0+255),b
  3025  000928  C0B1  F087         	movff	_realTime,?_printf+6
  3026  00092C  0100               	movlb	0	; () banked
  3027  00092E  6B88               	clrf	(?_printf+7)& (0+255),b
  3028  000930  EC0D  F007         	call	_printf	;wreg free
  3029  000934                     l5040:
  3030  000934  0E0A               	movlw	10
  3031  000936  0100               	movlb	0	; () banked
  3032  000938  19D1               	xorwf	_screenMode& (0+255),w,b
  3033  00093A  A4D8               	btfss	status,2,c
  3034  00093C  D028               	goto	l5052
  3035  00093E  D795               	goto	l5020
  3036  000940                     l5042:
  3037                           
  3038                           ; BSR set to: 0
  3039                           ;main.c: 344: lcdInst(0b10000000);;
  3040  000940  0E80               	movlw	128
  3041  000942  EC0A  F010         	call	_lcdInst
  3042                           
  3043                           ;main.c: 345: printf("STOPPED         ");
  3044  000946  0E21               	movlw	low STR_24
  3045  000948  0100               	movlb	0	; () banked
  3046  00094A  6F81               	movwf	printf@f& (0+255),b
  3047  00094C  0EFF               	movlw	high STR_24
  3048  00094E  0100               	movlb	0	; () banked
  3049  000950  6F82               	movwf	(printf@f+1)& (0+255),b
  3050  000952  EC0D  F007         	call	_printf	;wreg free
  3051                           
  3052                           ;main.c: 346: lcdInst(0b11000000);;
  3053  000956  0EC0               	movlw	192
  3054  000958  EC0A  F010         	call	_lcdInst
  3055                           
  3056                           ;main.c: 347: printf("                ");
  3057  00095C  0EEE               	movlw	low STR_25
  3058  00095E  0100               	movlb	0	; () banked
  3059  000960  6F81               	movwf	printf@f& (0+255),b
  3060  000962  0EFE               	movlw	high STR_25
  3061  000964  0100               	movlb	0	; () banked
  3062  000966  6F82               	movwf	(printf@f+1)& (0+255),b
  3063  000968  EC0D  F007         	call	_printf	;wreg free
  3064                           
  3065                           ;main.c: 348: _delay((unsigned long)((2000)*(10000000/4000.0)));
  3066  00096C  0E1A               	movlw	26
  3067  00096E  0100               	movlb	0	; () banked
  3068  000970  6F98               	movwf	(??_main+1)& (0+255),b
  3069  000972  0E5E               	movlw	94
  3070  000974  0100               	movlb	0	; () banked
  3071  000976  6F97               	movwf	??_main& (0+255),b
  3072  000978  0E6E               	movlw	110
  3073  00097A                     u5987:
  3074  00097A  2EE8               	decfsz	wreg,f,c
  3075  00097C  D7FE               	bra	u5987
  3076  00097E  2F97               	decfsz	??_main& (0+255),f,b
  3077  000980  D7FC               	bra	u5987
  3078  000982  2F98               	decfsz	(??_main+1)& (0+255),f,b
  3079  000984  D7FA               	bra	u5987
  3080  000986  F000               	nop	
  3081                           
  3082                           ;main.c: 349: screenMode = 2;
  3083  000988  0E02               	movlw	2
  3084  00098A  0100               	movlb	0	; () banked
  3085  00098C  6FD1               	movwf	_screenMode& (0+255),b
  3086  00098E                     l5052:
  3087                           
  3088                           ; BSR set to: 0
  3089  00098E  0E0B               	movlw	11
  3090  000990  0100               	movlb	0	; () banked
  3091  000992  19D1               	xorwf	_screenMode& (0+255),w,b
  3092  000994  A4D8               	btfss	status,2,c
  3093  000996  EF9C  F000         	goto	l4732
  3094  00099A  D7D2               	goto	l5042
  3095  00099C                     __end_of_main:
  3096                           	opt stack 0
  3097                           tblptru	equ	0xFF8
  3098                           tblptrh	equ	0xFF7
  3099                           tblptrl	equ	0xFF6
  3100                           tablat	equ	0xFF5
  3101                           prodh	equ	0xFF4
  3102                           prodl	equ	0xFF3
  3103                           intcon	equ	0xFF2
  3104                           intcon3	equ	0xFF0
  3105                           postinc0	equ	0xFEE
  3106                           wreg	equ	0xFE8
  3107                           indf2	equ	0xFDF
  3108                           fsr2h	equ	0xFDA
  3109                           fsr2l	equ	0xFD9
  3110                           status	equ	0xFD8
  3111                           
  3112 ;; *************** function _wait_3ms *****************
  3113 ;; Defined at:
  3114 ;;		line 577 in file "../main.c"
  3115 ;; Parameters:    Size  Location     Type
  3116 ;;  x               2   52[COMRAM] unsigned int 
  3117 ;; Auto vars:     Size  Location     Type
  3118 ;;		None
  3119 ;; Return value:  Size  Location     Type
  3120 ;;                  1    wreg      void 
  3121 ;; Registers used:
  3122 ;;		wreg, status,2, status,0
  3123 ;; Tracked objects:
  3124 ;;		On entry : 0/0
  3125 ;;		On exit  : 0/0
  3126 ;;		Unchanged: 0/0
  3127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3128 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3129 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3131 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3132 ;;Total ram usage:        2 bytes
  3133 ;; Hardware stack levels used:    1
  3134 ;; Hardware stack levels required when called:    5
  3135 ;; This function calls:
  3136 ;;		Nothing
  3137 ;; This function is called by:
  3138 ;;		_main
  3139 ;; This function uses a non-reentrant model
  3140 ;;
  3141                           
  3142                           	psect	text1
  3143  001FB6                     __ptext1:
  3144                           	opt stack 0
  3145  001FB6                     _wait_3ms:
  3146                           	opt stack 25
  3147                           
  3148                           ;main.c: 578: count_3ms = x;
  3149                           
  3150                           ; BSR set to: 0
  3151                           ;incstack = 0
  3152  001FB6  C035  F040         	movff	wait_3ms@x,_count_3ms
  3153  001FBA  C036  F041         	movff	wait_3ms@x+1,_count_3ms+1
  3154  001FBE                     l3588:
  3155  001FBE  5040               	movf	_count_3ms,w,c
  3156  001FC0  1041               	iorwf	_count_3ms+1,w,c
  3157  001FC2  B4D8               	btfsc	status,2,c
  3158  001FC4  0012               	return	
  3159  001FC6  0100               	movlb	0	; () banked
  3160  001FC8  05D1               	decf	_screenMode& (0+255),w,b
  3161  001FCA  A4D8               	btfss	status,2,c
  3162  001FCC  0012               	return	
  3163  001FCE  D7F7               	goto	l3588
  3164  001FD0                     __end_of_wait_3ms:
  3165                           	opt stack 0
  3166                           tblptru	equ	0xFF8
  3167                           tblptrh	equ	0xFF7
  3168                           tblptrl	equ	0xFF6
  3169                           tablat	equ	0xFF5
  3170                           prodh	equ	0xFF4
  3171                           prodl	equ	0xFF3
  3172                           intcon	equ	0xFF2
  3173                           intcon3	equ	0xFF0
  3174                           postinc0	equ	0xFEE
  3175                           wreg	equ	0xFE8
  3176                           indf2	equ	0xFDF
  3177                           fsr2h	equ	0xFDA
  3178                           fsr2l	equ	0xFD9
  3179                           status	equ	0xFD8
  3180                           
  3181 ;; *************** function _testBatteries *****************
  3182 ;; Defined at:
  3183 ;;		line 464 in file "../main.c"
  3184 ;; Parameters:    Size  Location     Type
  3185 ;;		None
  3186 ;; Auto vars:     Size  Location     Type
  3187 ;;		None
  3188 ;; Return value:  Size  Location     Type
  3189 ;;                  1    wreg      void 
  3190 ;; Registers used:
  3191 ;;		wreg, status,2, status,0, cstack
  3192 ;; Tracked objects:
  3193 ;;		On entry : 0/0
  3194 ;;		On exit  : 0/0
  3195 ;;		Unchanged: 0/0
  3196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3197 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3198 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3199 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3200 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3201 ;;Total ram usage:        2 bytes
  3202 ;; Hardware stack levels used:    1
  3203 ;; Hardware stack levels required when called:    6
  3204 ;; This function calls:
  3205 ;;		_readADC
  3206 ;; This function is called by:
  3207 ;;		_main
  3208 ;; This function uses a non-reentrant model
  3209 ;;
  3210                           
  3211                           	psect	text2
  3212  0014D2                     __ptext2:
  3213                           	opt stack 0
  3214  0014D2                     _testBatteries:
  3215                           	opt stack 24
  3216                           
  3217                           ;main.c: 485: readADC(1);
  3218                           
  3219                           ;incstack = 0
  3220  0014D2  0E01               	movlw	1
  3221  0014D4  ECE8  F00F         	call	_readADC
  3222                           
  3223                           ;main.c: 486: if (ADRES>=54){
  3224  0014D8  50C4               	movf	4036,w,c	;volatile
  3225  0014DA  E104               	bnz	u3530
  3226  0014DC  0E36               	movlw	54
  3227  0014DE  5CC3               	subwf	4035,w,c	;volatile
  3228  0014E0  A0D8               	btfss	status,0,c
  3229  0014E2  D00D               	goto	l3606
  3230  0014E4                     u3530:
  3231                           
  3232                           ;main.c: 487: countC++;
  3233  0014E4  0100               	movlb	0	; () banked
  3234  0014E6  2BC2               	incf	_countC& (0+255),f,b
  3235                           
  3236                           ; BSR set to: 0
  3237                           ;main.c: 488: plat1Right = 512;
  3238  0014E8  0E02               	movlw	2
  3239  0014EA  0100               	movlb	0	; () banked
  3240  0014EC  6FBB               	movwf	(_plat1Right+1)& (0+255),b
  3241  0014EE  0E00               	movlw	0
  3242  0014F0  6FBA               	movwf	_plat1Right& (0+255),b
  3243                           
  3244                           ; BSR set to: 0
  3245                           ;main.c: 489: plat2Left = 512;
  3246  0014F2  0E02               	movlw	2
  3247  0014F4  0100               	movlb	0	; () banked
  3248  0014F6  6FBD               	movwf	(_plat2Left+1)& (0+255),b
  3249  0014F8  0E00               	movlw	0
  3250  0014FA  6FBC               	movwf	_plat2Left& (0+255),b
  3251                           
  3252                           ; BSR set to: 0
  3253                           ;main.c: 490: return;
  3254  0014FC  0012               	return	
  3255  0014FE                     l3606:
  3256                           
  3257                           ;main.c: 492: else if (ADRES>=5){
  3258  0014FE  50C4               	movf	4036,w,c	;volatile
  3259  001500  E104               	bnz	u3540
  3260  001502  0E05               	movlw	5
  3261  001504  5CC3               	subwf	4035,w,c	;volatile
  3262  001506  A0D8               	btfss	status,0,c
  3263  001508  D00D               	goto	l3616
  3264  00150A                     u3540:
  3265                           
  3266                           ;main.c: 493: countDrain++;
  3267  00150A  0100               	movlb	0	; () banked
  3268  00150C  2BC3               	incf	_countDrain& (0+255),f,b
  3269                           
  3270                           ; BSR set to: 0
  3271                           ;main.c: 494: plat1Left = 512;
  3272  00150E  0E02               	movlw	2
  3273  001510  0100               	movlb	0	; () banked
  3274  001512  6FB9               	movwf	(_plat1Left+1)& (0+255),b
  3275  001514  0E00               	movlw	0
  3276  001516  6FB8               	movwf	_plat1Left& (0+255),b
  3277                           
  3278                           ; BSR set to: 0
  3279                           ;main.c: 495: plat2Right = 512;
  3280  001518  0E02               	movlw	2
  3281  00151A  0100               	movlb	0	; () banked
  3282  00151C  6FBF               	movwf	(_plat2Right+1)& (0+255),b
  3283  00151E  0E00               	movlw	0
  3284  001520  6FBE               	movwf	_plat2Right& (0+255),b
  3285                           
  3286                           ; BSR set to: 0
  3287                           ;main.c: 496: return;
  3288  001522  0012               	return	
  3289  001524                     l3616:
  3290                           
  3291                           ;main.c: 497: }
  3292                           ;main.c: 498: readADC(2);
  3293  001524  0E02               	movlw	2
  3294  001526  ECE8  F00F         	call	_readADC
  3295                           
  3296                           ;main.c: 500: if (ADRES>=54){
  3297  00152A  50C4               	movf	4036,w,c	;volatile
  3298  00152C  E104               	bnz	u3550
  3299  00152E  0E36               	movlw	54
  3300  001530  5CC3               	subwf	4035,w,c	;volatile
  3301  001532  A0D8               	btfss	status,0,c
  3302  001534  D00D               	goto	l3630
  3303  001536                     u3550:
  3304                           
  3305                           ;main.c: 501: countAA++;
  3306  001536  0100               	movlb	0	; () banked
  3307  001538  2BC1               	incf	_countAA& (0+255),f,b
  3308                           
  3309                           ; BSR set to: 0
  3310                           ;main.c: 502: plat1Right = 512;
  3311  00153A  0E02               	movlw	2
  3312  00153C  0100               	movlb	0	; () banked
  3313  00153E  6FBB               	movwf	(_plat1Right+1)& (0+255),b
  3314  001540  0E00               	movlw	0
  3315  001542  6FBA               	movwf	_plat1Right& (0+255),b
  3316                           
  3317                           ; BSR set to: 0
  3318                           ;main.c: 503: plat2Left = 512;
  3319  001544  0E02               	movlw	2
  3320  001546  0100               	movlb	0	; () banked
  3321  001548  6FBD               	movwf	(_plat2Left+1)& (0+255),b
  3322  00154A  0E00               	movlw	0
  3323  00154C  6FBC               	movwf	_plat2Left& (0+255),b
  3324                           
  3325                           ; BSR set to: 0
  3326                           ;main.c: 504: return;
  3327  00154E  0012               	return	
  3328  001550                     l3630:
  3329                           
  3330                           ;main.c: 506: else if (ADRES>=5){
  3331  001550  50C4               	movf	4036,w,c	;volatile
  3332  001552  E104               	bnz	u3560
  3333  001554  0E05               	movlw	5
  3334  001556  5CC3               	subwf	4035,w,c	;volatile
  3335  001558  A0D8               	btfss	status,0,c
  3336  00155A  D00D               	goto	l3640
  3337  00155C                     u3560:
  3338                           
  3339                           ;main.c: 507: countDrain++;
  3340  00155C  0100               	movlb	0	; () banked
  3341  00155E  2BC3               	incf	_countDrain& (0+255),f,b
  3342                           
  3343                           ; BSR set to: 0
  3344                           ;main.c: 508: plat1Left = 512;
  3345  001560  0E02               	movlw	2
  3346  001562  0100               	movlb	0	; () banked
  3347  001564  6FB9               	movwf	(_plat1Left+1)& (0+255),b
  3348  001566  0E00               	movlw	0
  3349  001568  6FB8               	movwf	_plat1Left& (0+255),b
  3350                           
  3351                           ; BSR set to: 0
  3352                           ;main.c: 509: plat2Right = 512;
  3353  00156A  0E02               	movlw	2
  3354  00156C  0100               	movlb	0	; () banked
  3355  00156E  6FBF               	movwf	(_plat2Right+1)& (0+255),b
  3356  001570  0E00               	movlw	0
  3357  001572  6FBE               	movwf	_plat2Right& (0+255),b
  3358                           
  3359                           ; BSR set to: 0
  3360                           ;main.c: 510: return;
  3361  001574  0012               	return	
  3362  001576                     l3640:
  3363                           
  3364                           ;main.c: 511: }
  3365                           ;main.c: 514: readADC(3);
  3366  001576  0E03               	movlw	3
  3367  001578  ECE8  F00F         	call	_readADC
  3368                           
  3369                           ;main.c: 516: if (ADRES>=54){
  3370  00157C  50C4               	movf	4036,w,c	;volatile
  3371  00157E  E104               	bnz	u3570
  3372  001580  0E36               	movlw	54
  3373  001582  5CC3               	subwf	4035,w,c	;volatile
  3374  001584  A0D8               	btfss	status,0,c
  3375  001586  D00D               	goto	l3654
  3376  001588                     u3570:
  3377                           
  3378                           ;main.c: 517: countAA++;
  3379  001588  0100               	movlb	0	; () banked
  3380  00158A  2BC1               	incf	_countAA& (0+255),f,b
  3381                           
  3382                           ; BSR set to: 0
  3383                           ;main.c: 518: plat1Right = 512;
  3384  00158C  0E02               	movlw	2
  3385  00158E  0100               	movlb	0	; () banked
  3386  001590  6FBB               	movwf	(_plat1Right+1)& (0+255),b
  3387  001592  0E00               	movlw	0
  3388  001594  6FBA               	movwf	_plat1Right& (0+255),b
  3389                           
  3390                           ; BSR set to: 0
  3391                           ;main.c: 519: plat2Left = 512;
  3392  001596  0E02               	movlw	2
  3393  001598  0100               	movlb	0	; () banked
  3394  00159A  6FBD               	movwf	(_plat2Left+1)& (0+255),b
  3395  00159C  0E00               	movlw	0
  3396  00159E  6FBC               	movwf	_plat2Left& (0+255),b
  3397                           
  3398                           ; BSR set to: 0
  3399                           ;main.c: 520: return;
  3400  0015A0  0012               	return	
  3401  0015A2                     l3654:
  3402                           
  3403                           ;main.c: 522: else if (ADRES>=5){
  3404  0015A2  50C4               	movf	4036,w,c	;volatile
  3405  0015A4  E104               	bnz	u3580
  3406  0015A6  0E05               	movlw	5
  3407  0015A8  5CC3               	subwf	4035,w,c	;volatile
  3408  0015AA  A0D8               	btfss	status,0,c
  3409  0015AC  D00D               	goto	l3664
  3410  0015AE                     u3580:
  3411                           
  3412                           ;main.c: 523: countDrain++;
  3413  0015AE  0100               	movlb	0	; () banked
  3414  0015B0  2BC3               	incf	_countDrain& (0+255),f,b
  3415                           
  3416                           ; BSR set to: 0
  3417                           ;main.c: 524: plat1Left = 512;
  3418  0015B2  0E02               	movlw	2
  3419  0015B4  0100               	movlb	0	; () banked
  3420  0015B6  6FB9               	movwf	(_plat1Left+1)& (0+255),b
  3421  0015B8  0E00               	movlw	0
  3422  0015BA  6FB8               	movwf	_plat1Left& (0+255),b
  3423                           
  3424                           ; BSR set to: 0
  3425                           ;main.c: 525: plat2Right = 512;
  3426  0015BC  0E02               	movlw	2
  3427  0015BE  0100               	movlb	0	; () banked
  3428  0015C0  6FBF               	movwf	(_plat2Right+1)& (0+255),b
  3429  0015C2  0E00               	movlw	0
  3430  0015C4  6FBE               	movwf	_plat2Right& (0+255),b
  3431                           
  3432                           ; BSR set to: 0
  3433                           ;main.c: 526: return;
  3434  0015C6  0012               	return	
  3435  0015C8                     l3664:
  3436                           
  3437                           ;main.c: 527: }
  3438                           ;main.c: 530: readADC(4);
  3439  0015C8  0E04               	movlw	4
  3440  0015CA  ECE8  F00F         	call	_readADC
  3441                           
  3442                           ;main.c: 532: if (ADRES>=706){
  3443  0015CE  0EC2               	movlw	194
  3444  0015D0  5CC3               	subwf	4035,w,c	;volatile
  3445  0015D2  0E02               	movlw	2
  3446  0015D4  58C4               	subwfb	4036,w,c	;volatile
  3447  0015D6  A0D8               	btfss	status,0,c
  3448  0015D8  D008               	goto	l3672
  3449                           
  3450                           ;main.c: 533: countAA++;
  3451  0015DA  0100               	movlb	0	; () banked
  3452  0015DC  2BC1               	incf	_countAA& (0+255),f,b
  3453                           
  3454                           ; BSR set to: 0
  3455                           ;main.c: 534: plat1Right = 512;
  3456  0015DE  0E02               	movlw	2
  3457  0015E0  0100               	movlb	0	; () banked
  3458  0015E2  6FBB               	movwf	(_plat1Right+1)& (0+255),b
  3459  0015E4  0E00               	movlw	0
  3460  0015E6  6FBA               	movwf	_plat1Right& (0+255),b
  3461                           
  3462                           ;main.c: 535: }
  3463  0015E8  D00D               	goto	l3678
  3464  0015EA                     l3672:
  3465                           
  3466                           ;main.c: 536: else if (ADRES>=5){
  3467  0015EA  50C4               	movf	4036,w,c	;volatile
  3468  0015EC  E104               	bnz	u3600
  3469  0015EE  0E05               	movlw	5
  3470  0015F0  5CC3               	subwf	4035,w,c	;volatile
  3471  0015F2  A0D8               	btfss	status,0,c
  3472  0015F4  D007               	goto	l3678
  3473  0015F6                     u3600:
  3474                           
  3475                           ;main.c: 537: countDrain++;
  3476  0015F6  0100               	movlb	0	; () banked
  3477  0015F8  2BC3               	incf	_countDrain& (0+255),f,b
  3478                           
  3479                           ; BSR set to: 0
  3480                           ;main.c: 538: plat1Left = 512;
  3481  0015FA  0E02               	movlw	2
  3482  0015FC  0100               	movlb	0	; () banked
  3483  0015FE  6FB9               	movwf	(_plat1Left+1)& (0+255),b
  3484  001600  0E00               	movlw	0
  3485  001602  6FB8               	movwf	_plat1Left& (0+255),b
  3486  001604                     l3678:
  3487                           
  3488                           ;main.c: 539: }
  3489                           ;main.c: 541: readADC(5);
  3490  001604  0E05               	movlw	5
  3491  001606  ECE8  F00F         	call	_readADC
  3492                           
  3493                           ;main.c: 543: if (ADRES>=706){
  3494  00160A  0EC2               	movlw	194
  3495  00160C  5CC3               	subwf	4035,w,c	;volatile
  3496  00160E  0E02               	movlw	2
  3497  001610  58C4               	subwfb	4036,w,c	;volatile
  3498  001612  A0D8               	btfss	status,0,c
  3499  001614  D008               	goto	l3686
  3500                           
  3501                           ;main.c: 544: countAA++;
  3502  001616  0100               	movlb	0	; () banked
  3503  001618  2BC1               	incf	_countAA& (0+255),f,b
  3504                           
  3505                           ; BSR set to: 0
  3506                           ;main.c: 545: plat2Left = 512;
  3507  00161A  0E02               	movlw	2
  3508  00161C  0100               	movlb	0	; () banked
  3509  00161E  6FBD               	movwf	(_plat2Left+1)& (0+255),b
  3510  001620  0E00               	movlw	0
  3511  001622  6FBC               	movwf	_plat2Left& (0+255),b
  3512                           
  3513                           ;main.c: 546: }
  3514  001624  D00D               	goto	l3692
  3515  001626                     l3686:
  3516                           
  3517                           ;main.c: 547: else if (ADRES>=5){
  3518  001626  50C4               	movf	4036,w,c	;volatile
  3519  001628  E104               	bnz	u3620
  3520  00162A  0E05               	movlw	5
  3521  00162C  5CC3               	subwf	4035,w,c	;volatile
  3522  00162E  A0D8               	btfss	status,0,c
  3523  001630  D007               	goto	l3692
  3524  001632                     u3620:
  3525                           
  3526                           ;main.c: 548: countDrain++;
  3527  001632  0100               	movlb	0	; () banked
  3528  001634  2BC3               	incf	_countDrain& (0+255),f,b
  3529                           
  3530                           ; BSR set to: 0
  3531                           ;main.c: 549: plat2Right = 512;
  3532  001636  0E02               	movlw	2
  3533  001638  0100               	movlb	0	; () banked
  3534  00163A  6FBF               	movwf	(_plat2Right+1)& (0+255),b
  3535  00163C  0E00               	movlw	0
  3536  00163E  6FBE               	movwf	_plat2Right& (0+255),b
  3537  001640                     l3692:
  3538                           
  3539                           ;main.c: 550: }
  3540                           ;main.c: 551: if (plat1Right && plat2Left)
  3541  001640  0100               	movlb	0	; () banked
  3542  001642  51BA               	movf	_plat1Right& (0+255),w,b
  3543  001644  0100               	movlb	0	; () banked
  3544  001646  11BB               	iorwf	(_plat1Right+1)& (0+255),w,b
  3545  001648  B4D8               	btfsc	status,2,c
  3546  00164A  D009               	goto	l3698
  3547                           
  3548                           ; BSR set to: 0
  3549  00164C  0100               	movlb	0	; () banked
  3550  00164E  51BC               	movf	_plat2Left& (0+255),w,b
  3551  001650  0100               	movlb	0	; () banked
  3552  001652  11BD               	iorwf	(_plat2Left+1)& (0+255),w,b
  3553  001654  B4D8               	btfsc	status,2,c
  3554  001656  D003               	goto	l3698
  3555                           
  3556                           ; BSR set to: 0
  3557                           ;main.c: 552: doubleAA = 1;
  3558  001658  0E01               	movlw	1
  3559  00165A  6E45               	movwf	_doubleAA,c
  3560  00165C  0012               	return	
  3561  00165E                     l3698:
  3562                           
  3563                           ; BSR set to: 0
  3564                           ;main.c: 553: else if (!(plat1Left | plat1Right | plat2Left | plat2Right)){
  3565  00165E  0100               	movlb	0	; () banked
  3566  001660  51BA               	movf	_plat1Right& (0+255),w,b
  3567  001662  0100               	movlb	0	; () banked
  3568  001664  11B8               	iorwf	_plat1Left& (0+255),w,b
  3569  001666  6E36               	movwf	??_testBatteries& (0+255),c
  3570  001668  0100               	movlb	0	; () banked
  3571  00166A  51BB               	movf	(_plat1Right+1)& (0+255),w,b
  3572  00166C  0100               	movlb	0	; () banked
  3573  00166E  11B9               	iorwf	(_plat1Left+1)& (0+255),w,b
  3574  001670  6E37               	movwf	(??_testBatteries+1)& (0+255),c
  3575  001672  0100               	movlb	0	; () banked
  3576  001674  51BC               	movf	_plat2Left& (0+255),w,b
  3577  001676  1236               	iorwf	??_testBatteries,f,c
  3578  001678  0100               	movlb	0	; () banked
  3579  00167A  51BD               	movf	(_plat2Left+1)& (0+255),w,b
  3580  00167C  1237               	iorwf	??_testBatteries+1,f,c
  3581  00167E  0100               	movlb	0	; () banked
  3582  001680  51BE               	movf	_plat2Right& (0+255),w,b
  3583  001682  1236               	iorwf	??_testBatteries,f,c
  3584  001684  0100               	movlb	0	; () banked
  3585  001686  51BF               	movf	(_plat2Right+1)& (0+255),w,b
  3586  001688  1237               	iorwf	??_testBatteries+1,f,c
  3587  00168A  5036               	movf	??_testBatteries,w,c
  3588  00168C  1037               	iorwf	??_testBatteries+1,w,c
  3589  00168E  A4D8               	btfss	status,2,c
  3590  001690  0012               	return	
  3591                           
  3592                           ; BSR set to: 0
  3593                           ;main.c: 554: countDrain++;
  3594  001692  0100               	movlb	0	; () banked
  3595  001694  2BC3               	incf	_countDrain& (0+255),f,b
  3596                           
  3597                           ; BSR set to: 0
  3598                           ;main.c: 555: plat2Right = 512;
  3599  001696  0E02               	movlw	2
  3600  001698  0100               	movlb	0	; () banked
  3601  00169A  6FBF               	movwf	(_plat2Right+1)& (0+255),b
  3602  00169C  0E00               	movlw	0
  3603  00169E  6FBE               	movwf	_plat2Right& (0+255),b
  3604                           
  3605                           ; BSR set to: 0
  3606                           ;main.c: 556: plat1Left = 512;
  3607  0016A0  0E02               	movlw	2
  3608  0016A2  0100               	movlb	0	; () banked
  3609  0016A4  6FB9               	movwf	(_plat1Left+1)& (0+255),b
  3610  0016A6  0E00               	movlw	0
  3611  0016A8  6FB8               	movwf	_plat1Left& (0+255),b
  3612                           
  3613                           ; BSR set to: 0
  3614                           
  3615                           ; BSR set to: 0
  3616  0016AA  0012               	return	
  3617  0016AC                     __end_of_testBatteries:
  3618                           	opt stack 0
  3619                           tblptru	equ	0xFF8
  3620                           tblptrh	equ	0xFF7
  3621                           tblptrl	equ	0xFF6
  3622                           tablat	equ	0xFF5
  3623                           prodh	equ	0xFF4
  3624                           prodl	equ	0xFF3
  3625                           intcon	equ	0xFF2
  3626                           intcon3	equ	0xFF0
  3627                           postinc0	equ	0xFEE
  3628                           wreg	equ	0xFE8
  3629                           indf2	equ	0xFDF
  3630                           fsr2h	equ	0xFDA
  3631                           fsr2l	equ	0xFD9
  3632                           status	equ	0xFD8
  3633                           
  3634 ;; *************** function _readADC *****************
  3635 ;; Defined at:
  3636 ;;		line 409 in file "../main.c"
  3637 ;; Parameters:    Size  Location     Type
  3638 ;;  channel         1    wreg     unsigned char 
  3639 ;; Auto vars:     Size  Location     Type
  3640 ;;  channel         1   52[COMRAM] unsigned char 
  3641 ;; Return value:  Size  Location     Type
  3642 ;;                  1    wreg      void 
  3643 ;; Registers used:
  3644 ;;		wreg, status,2, status,0
  3645 ;; Tracked objects:
  3646 ;;		On entry : 0/0
  3647 ;;		On exit  : 0/0
  3648 ;;		Unchanged: 0/0
  3649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3650 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3651 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3652 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3653 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3654 ;;Total ram usage:        1 bytes
  3655 ;; Hardware stack levels used:    1
  3656 ;; Hardware stack levels required when called:    5
  3657 ;; This function calls:
  3658 ;;		Nothing
  3659 ;; This function is called by:
  3660 ;;		_main
  3661 ;;		_testBatteries
  3662 ;; This function uses a non-reentrant model
  3663 ;;
  3664                           
  3665                           	psect	text3
  3666  001FD0                     __ptext3:
  3667                           	opt stack 0
  3668  001FD0                     _readADC:
  3669                           	opt stack 24
  3670                           
  3671                           ; BSR set to: 0
  3672                           ;incstack = 0
  3673                           ;readADC@channel stored from wreg
  3674  001FD0  6E35               	movwf	readADC@channel,c
  3675                           
  3676                           ;main.c: 411: ADCON0 = channel << 2;
  3677  001FD2  4435               	rlncf	readADC@channel,w,c
  3678  001FD4  46E8               	rlncf	wreg,f,c
  3679  001FD6  0BFC               	andlw	252
  3680  001FD8  6EC2               	movwf	4034,c	;volatile
  3681                           
  3682                           ;main.c: 412: ADCON0bits.ADON = 1;
  3683  001FDA  80C2               	bsf	4034,0,c	;volatile
  3684                           
  3685                           ;main.c: 413: ADCON0bits.GO = 1;
  3686  001FDC  82C2               	bsf	4034,1,c	;volatile
  3687  001FDE                     l340:
  3688  001FDE  A2C2               	btfss	4034,1,c	;volatile
  3689  001FE0  0012               	return	
  3690  001FE2  D7FD               	goto	l340
  3691  001FE4                     __end_of_readADC:
  3692                           	opt stack 0
  3693                           tblptru	equ	0xFF8
  3694                           tblptrh	equ	0xFF7
  3695                           tblptrl	equ	0xFF6
  3696                           tablat	equ	0xFF5
  3697                           prodh	equ	0xFF4
  3698                           prodl	equ	0xFF3
  3699                           intcon	equ	0xFF2
  3700                           intcon3	equ	0xFF0
  3701                           postinc0	equ	0xFEE
  3702                           wreg	equ	0xFE8
  3703                           indf2	equ	0xFDF
  3704                           fsr2h	equ	0xFDA
  3705                           fsr2l	equ	0xFD9
  3706                           status	equ	0xFD8
  3707                           
  3708 ;; *************** function _stopOperation *****************
  3709 ;; Defined at:
  3710 ;;		line 417 in file "../main.c"
  3711 ;; Parameters:    Size  Location     Type
  3712 ;;		None
  3713 ;; Auto vars:     Size  Location     Type
  3714 ;;		None
  3715 ;; Return value:  Size  Location     Type
  3716 ;;                  1    wreg      void 
  3717 ;; Registers used:
  3718 ;;		wreg, status,2, status,0, cstack
  3719 ;; Tracked objects:
  3720 ;;		On entry : 0/0
  3721 ;;		On exit  : 0/0
  3722 ;;		Unchanged: 0/0
  3723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3724 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3725 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3726 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3727 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3728 ;;Total ram usage:        0 bytes
  3729 ;; Hardware stack levels used:    1
  3730 ;; Hardware stack levels required when called:    6
  3731 ;; This function calls:
  3732 ;;		___awdiv
  3733 ;;		___awmod
  3734 ;; This function is called by:
  3735 ;;		_main
  3736 ;; This function uses a non-reentrant model
  3737 ;;
  3738                           
  3739                           	psect	text4
  3740  0017C0                     __ptext4:
  3741                           	opt stack 0
  3742  0017C0                     _stopOperation:
  3743                           	opt stack 24
  3744                           
  3745                           ;main.c: 418: T0CONbits.TMR0ON = 0;
  3746                           
  3747                           ;incstack = 0
  3748  0017C0  9ED5               	bcf	4053,7,c	;volatile
  3749                           
  3750                           ;main.c: 419: T1CONbits.TMR1ON = 0;
  3751  0017C2  90CD               	bcf	4045,0,c	;volatile
  3752                           
  3753                           ;main.c: 420: TMR0 = 55770;
  3754  0017C4  0ED9               	movlw	217
  3755  0017C6  6ED7               	movwf	4055,c	;volatile
  3756  0017C8  0EDA               	movlw	218
  3757  0017CA  6ED6               	movwf	4054,c	;volatile
  3758                           
  3759                           ;main.c: 421: TMR1 = 58035;
  3760  0017CC  0EE2               	movlw	226
  3761  0017CE  6ECF               	movwf	4047,c	;volatile
  3762  0017D0  0EB3               	movlw	179
  3763  0017D2  6ECE               	movwf	4046,c	;volatile
  3764                           
  3765                           ;main.c: 422: num9V = count9V;
  3766  0017D4  C0C0  F0C5         	movff	_count9V,_num9V
  3767                           
  3768                           ;main.c: 423: numC = countC;
  3769  0017D8  C0C2  F0C8         	movff	_countC,_numC
  3770                           
  3771                           ;main.c: 424: numAA = countAA;
  3772  0017DC  C0C1  F0C6         	movff	_countAA,_numAA
  3773                           
  3774                           ;main.c: 425: numDrain = countDrain;
  3775  0017E0  C0C3  F0C9         	movff	_countDrain,_numDrain
  3776                           
  3777                           ;main.c: 426: numBats = count9V + countC + countAA + countDrain;
  3778  0017E4  0100               	movlb	0	; () banked
  3779  0017E6  51C0               	movf	_count9V& (0+255),w,b
  3780  0017E8  0100               	movlb	0	; () banked
  3781  0017EA  25C2               	addwf	_countC& (0+255),w,b
  3782  0017EC  0100               	movlb	0	; () banked
  3783  0017EE  25C1               	addwf	_countAA& (0+255),w,b
  3784  0017F0  0100               	movlb	0	; () banked
  3785  0017F2  25C3               	addwf	_countDrain& (0+255),w,b
  3786  0017F4  0100               	movlb	0	; () banked
  3787  0017F6  6FC7               	movwf	_numBats& (0+255),b
  3788                           
  3789                           ; BSR set to: 0
  3790                           ;main.c: 427: count9V = 0;
  3791  0017F8  0E00               	movlw	0
  3792  0017FA  0100               	movlb	0	; () banked
  3793  0017FC  6FC0               	movwf	_count9V& (0+255),b
  3794                           
  3795                           ; BSR set to: 0
  3796                           ;main.c: 428: countC = 0;
  3797  0017FE  0E00               	movlw	0
  3798  001800  0100               	movlb	0	; () banked
  3799  001802  6FC2               	movwf	_countC& (0+255),b
  3800                           
  3801                           ; BSR set to: 0
  3802                           ;main.c: 429: countAA = 0;
  3803  001804  0E00               	movlw	0
  3804  001806  0100               	movlb	0	; () banked
  3805  001808  6FC1               	movwf	_countAA& (0+255),b
  3806                           
  3807                           ; BSR set to: 0
  3808                           ;main.c: 430: countDrain = 0;
  3809  00180A  0E00               	movlw	0
  3810  00180C  0100               	movlb	0	; () banked
  3811  00180E  6FC3               	movwf	_countDrain& (0+255),b
  3812                           
  3813                           ; BSR set to: 0
  3814                           ;main.c: 431: min = opTimer / 60;
  3815  001810  C046  F035         	movff	_opTimer,___awdiv@dividend
  3816  001814  6A36               	clrf	___awdiv@dividend+1,c
  3817  001816  0E00               	movlw	0
  3818  001818  6E38               	movwf	___awdiv@divisor+1,c
  3819  00181A  0E3C               	movlw	60
  3820  00181C  6E37               	movwf	___awdiv@divisor,c
  3821  00181E  EC2B  F00D         	call	___awdiv	;wreg free
  3822  001822  5035               	movf	?___awdiv,w,c
  3823  001824  0100               	movlb	0	; () banked
  3824  001826  6FC4               	movwf	_min& (0+255),b
  3825                           
  3826                           ; BSR set to: 0
  3827                           ;main.c: 432: sec = opTimer % 60;
  3828  001828  C046  F035         	movff	_opTimer,___awmod@dividend
  3829  00182C  6A36               	clrf	___awmod@dividend+1,c
  3830  00182E  0E00               	movlw	0
  3831  001830  6E38               	movwf	___awmod@divisor+1,c
  3832  001832  0E3C               	movlw	60
  3833  001834  6E37               	movwf	___awmod@divisor,c
  3834  001836  ECAF  F00D         	call	___awmod	;wreg free
  3835  00183A  5035               	movf	?___awmod,w,c
  3836  00183C  0100               	movlb	0	; () banked
  3837  00183E  6FCA               	movwf	_sec& (0+255),b
  3838                           
  3839                           ; BSR set to: 0
  3840                           ;main.c: 433: opTimer = 0;
  3841  001840  0E00               	movlw	0
  3842  001842  6E46               	movwf	_opTimer,c
  3843                           
  3844                           ; BSR set to: 0
  3845                           ;main.c: 434: doneTimer = 0;
  3846  001844  0E00               	movlw	0
  3847  001846  6E44               	movwf	_doneTimer,c
  3848                           
  3849                           ; BSR set to: 0
  3850                           ;main.c: 435: stepGear = 0;
  3851  001848  0E00               	movlw	0
  3852  00184A  0100               	movlb	0	; () banked
  3853  00184C  6FCC               	movwf	_stepGear& (0+255),b
  3854                           
  3855                           ; BSR set to: 0
  3856                           ;main.c: 436: stepAmount = 0;
  3857  00184E  0E00               	movlw	0
  3858  001850  6E43               	movwf	_stepAmount+1,c
  3859  001852  0E00               	movlw	0
  3860  001854  6E42               	movwf	_stepAmount,c
  3861                           
  3862                           ; BSR set to: 0
  3863                           ;main.c: 437: sorting = 0;
  3864  001856  0E00               	movlw	0
  3865  001858  6E48               	movwf	_sorting,c
  3866                           
  3867                           ; BSR set to: 0
  3868                           ;main.c: 438: plat1Left = 0;
  3869  00185A  0E00               	movlw	0
  3870  00185C  0100               	movlb	0	; () banked
  3871  00185E  6FB9               	movwf	(_plat1Left+1)& (0+255),b
  3872  001860  0E00               	movlw	0
  3873  001862  6FB8               	movwf	_plat1Left& (0+255),b
  3874                           
  3875                           ; BSR set to: 0
  3876                           ;main.c: 439: plat1Right = 0;
  3877  001864  0E00               	movlw	0
  3878  001866  0100               	movlb	0	; () banked
  3879  001868  6FBB               	movwf	(_plat1Right+1)& (0+255),b
  3880  00186A  0E00               	movlw	0
  3881  00186C  6FBA               	movwf	_plat1Right& (0+255),b
  3882                           
  3883                           ; BSR set to: 0
  3884                           ;main.c: 440: plat2Left = 0;
  3885  00186E  0E00               	movlw	0
  3886  001870  0100               	movlb	0	; () banked
  3887  001872  6FBD               	movwf	(_plat2Left+1)& (0+255),b
  3888  001874  0E00               	movlw	0
  3889  001876  6FBC               	movwf	_plat2Left& (0+255),b
  3890                           
  3891                           ; BSR set to: 0
  3892                           ;main.c: 441: plat2Right = 0;
  3893  001878  0E00               	movlw	0
  3894  00187A  0100               	movlb	0	; () banked
  3895  00187C  6FBF               	movwf	(_plat2Right+1)& (0+255),b
  3896  00187E  0E00               	movlw	0
  3897  001880  6FBE               	movwf	_plat2Right& (0+255),b
  3898                           
  3899                           ; BSR set to: 0
  3900                           ;main.c: 442: turn2BackLeft = 0;
  3901  001882  0E00               	movlw	0
  3902  001884  0100               	movlb	0	; () banked
  3903  001886  6FCF               	movwf	_turn2BackLeft& (0+255),b
  3904                           
  3905                           ; BSR set to: 0
  3906                           ;main.c: 443: turn1BackLeft = 0;
  3907  001888  0E00               	movlw	0
  3908  00188A  0100               	movlb	0	; () banked
  3909  00188C  6FCD               	movwf	_turn1BackLeft& (0+255),b
  3910                           
  3911                           ; BSR set to: 0
  3912                           ;main.c: 444: turn2BackRight = 0;
  3913  00188E  0E00               	movlw	0
  3914  001890  0100               	movlb	0	; () banked
  3915  001892  6FD0               	movwf	_turn2BackRight& (0+255),b
  3916                           
  3917                           ; BSR set to: 0
  3918                           ;main.c: 445: turn1BackRight = 0;
  3919  001894  0E00               	movlw	0
  3920  001896  0100               	movlb	0	; () banked
  3921  001898  6FCE               	movwf	_turn1BackRight& (0+255),b
  3922                           
  3923                           ; BSR set to: 0
  3924                           ;main.c: 446: count_3ms = 0;
  3925  00189A  0E00               	movlw	0
  3926  00189C  6E41               	movwf	_count_3ms+1,c
  3927  00189E  0E00               	movlw	0
  3928  0018A0  6E40               	movwf	_count_3ms,c
  3929                           
  3930                           ; BSR set to: 0
  3931                           ;main.c: 447: doubleAA = 0;
  3932  0018A2  0E00               	movlw	0
  3933  0018A4  6E45               	movwf	_doubleAA,c
  3934                           
  3935                           ; BSR set to: 0
  3936                           ;main.c: 448: solOnTimer = 0;
  3937  0018A6  0E00               	movlw	0
  3938  0018A8  6E47               	movwf	_solOnTimer,c
  3939                           
  3940                           ; BSR set to: 0
  3941                           ;main.c: 450: LATCbits.LC1 = 0;;
  3942  0018AA  928B               	bcf	3979,1,c	;volatile
  3943                           
  3944                           ; BSR set to: 0
  3945                           ;main.c: 451: LATCbits.LC2 = 0;;
  3946  0018AC  948B               	bcf	3979,2,c	;volatile
  3947                           
  3948                           ; BSR set to: 0
  3949                           ;main.c: 452: LATCbits.LC5 = 0;;
  3950  0018AE  9A8B               	bcf	3979,5,c	;volatile
  3951                           
  3952                           ; BSR set to: 0
  3953                           ;main.c: 453: LATCbits.LC6 = 0;;
  3954  0018B0  9C8B               	bcf	3979,6,c	;volatile
  3955                           
  3956                           ; BSR set to: 0
  3957                           ;main.c: 454: LATCbits.LC0 = 0;;
  3958  0018B2  908B               	bcf	3979,0,c	;volatile
  3959                           
  3960                           ; BSR set to: 0
  3961                           ;main.c: 455: LATEbits.LE2 = 0;;
  3962  0018B4  948D               	bcf	3981,2,c	;volatile
  3963                           
  3964                           ; BSR set to: 0
  3965                           ;main.c: 456: LATEbits.LE1 = 0;;
  3966  0018B6  928D               	bcf	3981,1,c	;volatile
  3967                           
  3968                           ; BSR set to: 0
  3969                           ;main.c: 457: LATAbits.LA4 = 0;;
  3970  0018B8  9889               	bcf	3977,4,c	;volatile
  3971                           
  3972                           ; BSR set to: 0
  3973                           ;main.c: 458: LATDbits.LD0= 0;;
  3974  0018BA  908C               	bcf	3980,0,c	;volatile
  3975                           
  3976                           ; BSR set to: 0
  3977                           ;main.c: 459: LATCbits.LC7 = 0;;
  3978  0018BC  9E8B               	bcf	3979,7,c	;volatile
  3979                           
  3980                           ; BSR set to: 0
  3981                           ;main.c: 460: LATDbits.LD1 = 0;;
  3982  0018BE  928C               	bcf	3980,1,c	;volatile
  3983                           
  3984                           ; BSR set to: 0
  3985                           ;main.c: 461: LATBbits.LB0 = 0;;
  3986  0018C0  908A               	bcf	3978,0,c	;volatile
  3987                           
  3988                           ; BSR set to: 0
  3989  0018C2  0012               	return		;funcret
  3990  0018C4                     __end_of_stopOperation:
  3991                           	opt stack 0
  3992                           tblptru	equ	0xFF8
  3993                           tblptrh	equ	0xFF7
  3994                           tblptrl	equ	0xFF6
  3995                           tablat	equ	0xFF5
  3996                           prodh	equ	0xFF4
  3997                           prodl	equ	0xFF3
  3998                           intcon	equ	0xFF2
  3999                           intcon3	equ	0xFF0
  4000                           postinc0	equ	0xFEE
  4001                           wreg	equ	0xFE8
  4002                           indf2	equ	0xFDF
  4003                           fsr2h	equ	0xFDA
  4004                           fsr2l	equ	0xFD9
  4005                           status	equ	0xFD8
  4006                           
  4007 ;; *************** function ___awmod *****************
  4008 ;; Defined at:
  4009 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  4010 ;; Parameters:    Size  Location     Type
  4011 ;;  dividend        2   52[COMRAM] int 
  4012 ;;  divisor         2   54[COMRAM] int 
  4013 ;; Auto vars:     Size  Location     Type
  4014 ;;  sign            1   57[COMRAM] unsigned char 
  4015 ;;  counter         1   56[COMRAM] unsigned char 
  4016 ;; Return value:  Size  Location     Type
  4017 ;;                  2   52[COMRAM] int 
  4018 ;; Registers used:
  4019 ;;		wreg, status,2, status,0
  4020 ;; Tracked objects:
  4021 ;;		On entry : 0/0
  4022 ;;		On exit  : 0/0
  4023 ;;		Unchanged: 0/0
  4024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4025 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4026 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4027 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4028 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4029 ;;Total ram usage:        6 bytes
  4030 ;; Hardware stack levels used:    1
  4031 ;; Hardware stack levels required when called:    5
  4032 ;; This function calls:
  4033 ;;		Nothing
  4034 ;; This function is called by:
  4035 ;;		_stopOperation
  4036 ;; This function uses a non-reentrant model
  4037 ;;
  4038                           
  4039                           	psect	text5
  4040  001B5E                     __ptext5:
  4041                           	opt stack 0
  4042  001B5E                     ___awmod:
  4043                           	opt stack 24
  4044                           
  4045                           ; BSR set to: 0
  4046                           ;incstack = 0
  4047  001B5E  0E00               	movlw	0
  4048  001B60  6E3A               	movwf	___awmod@sign,c
  4049  001B62  AE36               	btfss	___awmod@dividend+1,7,c
  4050  001B64  D006               	goto	l3078
  4051  001B66  6C35               	negf	___awmod@dividend,c
  4052  001B68  1E36               	comf	___awmod@dividend+1,f,c
  4053  001B6A  B0D8               	btfsc	status,0,c
  4054  001B6C  2A36               	incf	___awmod@dividend+1,f,c
  4055  001B6E  0E01               	movlw	1
  4056  001B70  6E3A               	movwf	___awmod@sign,c
  4057  001B72                     l3078:
  4058  001B72  AE38               	btfss	___awmod@divisor+1,7,c
  4059  001B74  D004               	goto	l3082
  4060  001B76  6C37               	negf	___awmod@divisor,c
  4061  001B78  1E38               	comf	___awmod@divisor+1,f,c
  4062  001B7A  B0D8               	btfsc	status,0,c
  4063  001B7C  2A38               	incf	___awmod@divisor+1,f,c
  4064  001B7E                     l3082:
  4065  001B7E  5037               	movf	___awmod@divisor,w,c
  4066  001B80  1038               	iorwf	___awmod@divisor+1,w,c
  4067  001B82  B4D8               	btfsc	status,2,c
  4068  001B84  D018               	goto	l3098
  4069  001B86  0E01               	movlw	1
  4070  001B88  6E39               	movwf	___awmod@counter,c
  4071  001B8A  D004               	goto	l3088
  4072  001B8C                     l3086:
  4073  001B8C  90D8               	bcf	status,0,c
  4074  001B8E  3637               	rlcf	___awmod@divisor,f,c
  4075  001B90  3638               	rlcf	___awmod@divisor+1,f,c
  4076  001B92  2A39               	incf	___awmod@counter,f,c
  4077  001B94                     l3088:
  4078  001B94  AE38               	btfss	___awmod@divisor+1,7,c
  4079  001B96  D7FA               	goto	l3086
  4080  001B98                     l3090:
  4081  001B98  5037               	movf	___awmod@divisor,w,c
  4082  001B9A  5C35               	subwf	___awmod@dividend,w,c
  4083  001B9C  5038               	movf	___awmod@divisor+1,w,c
  4084  001B9E  5836               	subwfb	___awmod@dividend+1,w,c
  4085  001BA0  A0D8               	btfss	status,0,c
  4086  001BA2  D004               	goto	l3094
  4087  001BA4  5037               	movf	___awmod@divisor,w,c
  4088  001BA6  5E35               	subwf	___awmod@dividend,f,c
  4089  001BA8  5038               	movf	___awmod@divisor+1,w,c
  4090  001BAA  5A36               	subwfb	___awmod@dividend+1,f,c
  4091  001BAC                     l3094:
  4092  001BAC  90D8               	bcf	status,0,c
  4093  001BAE  3238               	rrcf	___awmod@divisor+1,f,c
  4094  001BB0  3237               	rrcf	___awmod@divisor,f,c
  4095  001BB2  2E39               	decfsz	___awmod@counter,f,c
  4096  001BB4  D7F1               	goto	l3090
  4097  001BB6                     l3098:
  4098  001BB6  503A               	movf	___awmod@sign,w,c
  4099  001BB8  B4D8               	btfsc	status,2,c
  4100  001BBA  D004               	goto	l3102
  4101  001BBC  6C35               	negf	___awmod@dividend,c
  4102  001BBE  1E36               	comf	___awmod@dividend+1,f,c
  4103  001BC0  B0D8               	btfsc	status,0,c
  4104  001BC2  2A36               	incf	___awmod@dividend+1,f,c
  4105  001BC4                     l3102:
  4106  001BC4  C035  F035         	movff	___awmod@dividend,?___awmod
  4107  001BC8  C036  F036         	movff	___awmod@dividend+1,?___awmod+1
  4108  001BCC  0012               	return	
  4109  001BCE                     __end_of___awmod:
  4110                           	opt stack 0
  4111                           tblptru	equ	0xFF8
  4112                           tblptrh	equ	0xFF7
  4113                           tblptrl	equ	0xFF6
  4114                           tablat	equ	0xFF5
  4115                           prodh	equ	0xFF4
  4116                           prodl	equ	0xFF3
  4117                           intcon	equ	0xFF2
  4118                           intcon3	equ	0xFF0
  4119                           postinc0	equ	0xFEE
  4120                           wreg	equ	0xFE8
  4121                           indf2	equ	0xFDF
  4122                           fsr2h	equ	0xFDA
  4123                           fsr2l	equ	0xFD9
  4124                           status	equ	0xFD8
  4125                           
  4126 ;; *************** function ___awdiv *****************
  4127 ;; Defined at:
  4128 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  4129 ;; Parameters:    Size  Location     Type
  4130 ;;  dividend        2   52[COMRAM] int 
  4131 ;;  divisor         2   54[COMRAM] int 
  4132 ;; Auto vars:     Size  Location     Type
  4133 ;;  quotient        2   58[COMRAM] int 
  4134 ;;  sign            1   57[COMRAM] unsigned char 
  4135 ;;  counter         1   56[COMRAM] unsigned char 
  4136 ;; Return value:  Size  Location     Type
  4137 ;;                  2   52[COMRAM] int 
  4138 ;; Registers used:
  4139 ;;		wreg, status,2, status,0
  4140 ;; Tracked objects:
  4141 ;;		On entry : 0/0
  4142 ;;		On exit  : 0/0
  4143 ;;		Unchanged: 0/0
  4144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4145 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4146 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4147 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4148 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4149 ;;Total ram usage:        8 bytes
  4150 ;; Hardware stack levels used:    1
  4151 ;; Hardware stack levels required when called:    5
  4152 ;; This function calls:
  4153 ;;		Nothing
  4154 ;; This function is called by:
  4155 ;;		_stopOperation
  4156 ;; This function uses a non-reentrant model
  4157 ;;
  4158                           
  4159                           	psect	text6
  4160  001A56                     __ptext6:
  4161                           	opt stack 0
  4162  001A56                     ___awdiv:
  4163                           	opt stack 24
  4164                           
  4165                           ;incstack = 0
  4166  001A56  0E00               	movlw	0
  4167  001A58  6E3A               	movwf	___awdiv@sign,c
  4168  001A5A  AE38               	btfss	___awdiv@divisor+1,7,c
  4169  001A5C  D006               	goto	l3034
  4170  001A5E  6C37               	negf	___awdiv@divisor,c
  4171  001A60  1E38               	comf	___awdiv@divisor+1,f,c
  4172  001A62  B0D8               	btfsc	status,0,c
  4173  001A64  2A38               	incf	___awdiv@divisor+1,f,c
  4174  001A66  0E01               	movlw	1
  4175  001A68  6E3A               	movwf	___awdiv@sign,c
  4176  001A6A                     l3034:
  4177  001A6A  AE36               	btfss	___awdiv@dividend+1,7,c
  4178  001A6C  D006               	goto	l3040
  4179  001A6E  6C35               	negf	___awdiv@dividend,c
  4180  001A70  1E36               	comf	___awdiv@dividend+1,f,c
  4181  001A72  B0D8               	btfsc	status,0,c
  4182  001A74  2A36               	incf	___awdiv@dividend+1,f,c
  4183  001A76  0E01               	movlw	1
  4184  001A78  1A3A               	xorwf	___awdiv@sign,f,c
  4185  001A7A                     l3040:
  4186  001A7A  0E00               	movlw	0
  4187  001A7C  6E3C               	movwf	___awdiv@quotient+1,c
  4188  001A7E  0E00               	movlw	0
  4189  001A80  6E3B               	movwf	___awdiv@quotient,c
  4190  001A82  5037               	movf	___awdiv@divisor,w,c
  4191  001A84  1038               	iorwf	___awdiv@divisor+1,w,c
  4192  001A86  B4D8               	btfsc	status,2,c
  4193  001A88  D01C               	goto	l3062
  4194  001A8A  0E01               	movlw	1
  4195  001A8C  6E39               	movwf	___awdiv@counter,c
  4196  001A8E  D004               	goto	l3048
  4197  001A90                     l3046:
  4198  001A90  90D8               	bcf	status,0,c
  4199  001A92  3637               	rlcf	___awdiv@divisor,f,c
  4200  001A94  3638               	rlcf	___awdiv@divisor+1,f,c
  4201  001A96  2A39               	incf	___awdiv@counter,f,c
  4202  001A98                     l3048:
  4203  001A98  AE38               	btfss	___awdiv@divisor+1,7,c
  4204  001A9A  D7FA               	goto	l3046
  4205  001A9C                     l3050:
  4206  001A9C  90D8               	bcf	status,0,c
  4207  001A9E  363B               	rlcf	___awdiv@quotient,f,c
  4208  001AA0  363C               	rlcf	___awdiv@quotient+1,f,c
  4209  001AA2  5037               	movf	___awdiv@divisor,w,c
  4210  001AA4  5C35               	subwf	___awdiv@dividend,w,c
  4211  001AA6  5038               	movf	___awdiv@divisor+1,w,c
  4212  001AA8  5836               	subwfb	___awdiv@dividend+1,w,c
  4213  001AAA  A0D8               	btfss	status,0,c
  4214  001AAC  D005               	goto	l3058
  4215  001AAE  5037               	movf	___awdiv@divisor,w,c
  4216  001AB0  5E35               	subwf	___awdiv@dividend,f,c
  4217  001AB2  5038               	movf	___awdiv@divisor+1,w,c
  4218  001AB4  5A36               	subwfb	___awdiv@dividend+1,f,c
  4219  001AB6  803B               	bsf	___awdiv@quotient,0,c
  4220  001AB8                     l3058:
  4221  001AB8  90D8               	bcf	status,0,c
  4222  001ABA  3238               	rrcf	___awdiv@divisor+1,f,c
  4223  001ABC  3237               	rrcf	___awdiv@divisor,f,c
  4224  001ABE  2E39               	decfsz	___awdiv@counter,f,c
  4225  001AC0  D7ED               	goto	l3050
  4226  001AC2                     l3062:
  4227  001AC2  503A               	movf	___awdiv@sign,w,c
  4228  001AC4  B4D8               	btfsc	status,2,c
  4229  001AC6  D004               	goto	l3066
  4230  001AC8  6C3B               	negf	___awdiv@quotient,c
  4231  001ACA  1E3C               	comf	___awdiv@quotient+1,f,c
  4232  001ACC  B0D8               	btfsc	status,0,c
  4233  001ACE  2A3C               	incf	___awdiv@quotient+1,f,c
  4234  001AD0                     l3066:
  4235  001AD0  C03B  F035         	movff	___awdiv@quotient,?___awdiv
  4236  001AD4  C03C  F036         	movff	___awdiv@quotient+1,?___awdiv+1
  4237  001AD8  0012               	return	
  4238  001ADA                     __end_of___awdiv:
  4239                           	opt stack 0
  4240                           tblptru	equ	0xFF8
  4241                           tblptrh	equ	0xFF7
  4242                           tblptrl	equ	0xFF6
  4243                           tablat	equ	0xFF5
  4244                           prodh	equ	0xFF4
  4245                           prodl	equ	0xFF3
  4246                           intcon	equ	0xFF2
  4247                           intcon3	equ	0xFF0
  4248                           postinc0	equ	0xFEE
  4249                           wreg	equ	0xFE8
  4250                           indf2	equ	0xFDF
  4251                           fsr2h	equ	0xFDA
  4252                           fsr2l	equ	0xFD9
  4253                           status	equ	0xFD8
  4254                           
  4255 ;; *************** function _printf *****************
  4256 ;; Defined at:
  4257 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  4258 ;; Parameters:    Size  Location     Type
  4259 ;;  f               2    1[BANK0 ] PTR const unsigned char 
  4260 ;;		 -> STR_27(22), STR_26(17), STR_25(17), STR_24(17), 
  4261 ;;		 -> STR_23(23), STR_22(23), STR_21(23), STR_20(23), 
  4262 ;;		 -> STR_19(17), STR_18(21), STR_17(17), STR_16(21), 
  4263 ;;		 -> STR_15(17), STR_14(21), STR_13(17), STR_12(19), 
  4264 ;;		 -> STR_11(17), STR_10(19), STR_9(17), STR_8(25), 
  4265 ;;		 -> STR_7(17), STR_6(17), STR_5(17), STR_4(17), 
  4266 ;;		 -> STR_3(17), STR_2(17), STR_1(17), 
  4267 ;; Auto vars:     Size  Location     Type
  4268 ;;  idx             1   13[BANK0 ] unsigned char 
  4269 ;;  tmpval          4    0        struct .
  4270 ;;  cp              3    0        PTR const unsigned char 
  4271 ;;  width           2   20[BANK0 ] int 
  4272 ;;  val             2   17[BANK0 ] unsigned int 
  4273 ;;  ap              2   14[BANK0 ] PTR void [1]
  4274 ;;		 -> ?i2_printf(2), ?_printf(2), 
  4275 ;;  len             2    0        unsigned int 
  4276 ;;  c               1   22[BANK0 ] char 
  4277 ;;  flag            1   19[BANK0 ] unsigned char 
  4278 ;;  prec            1   16[BANK0 ] char 
  4279 ;; Return value:  Size  Location     Type
  4280 ;;                  2    1[BANK0 ] int 
  4281 ;; Registers used:
  4282 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4283 ;; Tracked objects:
  4284 ;;		On entry : 0/0
  4285 ;;		On exit  : 0/0
  4286 ;;		Unchanged: 0/0
  4287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4288 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4289 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4290 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4291 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4292 ;;Total ram usage:       22 bytes
  4293 ;; Hardware stack levels used:    1
  4294 ;; Hardware stack levels required when called:    7
  4295 ;; This function calls:
  4296 ;;		___lwdiv
  4297 ;;		___lwmod
  4298 ;;		___wmul
  4299 ;;		_isdigit
  4300 ;;		_putch
  4301 ;; This function is called by:
  4302 ;;		_main
  4303 ;; This function uses a non-reentrant model
  4304 ;;
  4305                           
  4306                           	psect	text7
  4307  000E1A                     __ptext7:
  4308                           	opt stack 0
  4309  000E1A                     _printf:
  4310                           	opt stack 23
  4311                           
  4312                           ;doprnt.c: 466: va_list ap;
  4313                           ;doprnt.c: 499: signed char c;
  4314                           ;doprnt.c: 501: int width;
  4315                           ;doprnt.c: 506: signed char prec;
  4316                           ;doprnt.c: 508: unsigned char flag;
  4317                           ;doprnt.c: 523: union {
  4318                           ;doprnt.c: 524: unsigned long vd;
  4319                           ;doprnt.c: 525: double integ;
  4320                           ;doprnt.c: 526: } tmpval;
  4321                           ;doprnt.c: 528: unsigned int val;
  4322                           ;doprnt.c: 529: unsigned len;
  4323                           ;doprnt.c: 530: const char * cp;
  4324                           ;doprnt.c: 533: *ap = __va_start();
  4325                           
  4326                           ;incstack = 0
  4327  000E1A  0E83               	movlw	low (?_printf+2)
  4328  000E1C  0100               	movlb	0	; () banked
  4329  000E1E  6F8E               	movwf	printf@ap& (0+255),b
  4330  000E20  0E00               	movlw	high (?_printf+2)
  4331  000E22  0100               	movlb	0	; () banked
  4332  000E24  6F8F               	movwf	(printf@ap+1)& (0+255),b
  4333                           
  4334                           ;doprnt.c: 536: while(c = *f++) {
  4335  000E26  D1C0               	goto	l4668
  4336  000E28                     l4542:
  4337                           
  4338                           ; BSR set to: 0
  4339                           ;doprnt.c: 538: if(c != '%')
  4340  000E28  0E25               	movlw	37
  4341  000E2A  0100               	movlb	0	; () banked
  4342  000E2C  1996               	xorwf	printf@c& (0+255),w,b
  4343  000E2E  B4D8               	btfsc	status,2,c
  4344  000E30  D005               	goto	l4546
  4345                           
  4346                           ; BSR set to: 0
  4347                           ;doprnt.c: 540: {
  4348                           ;doprnt.c: 541: (putch(c) );
  4349  000E32  0100               	movlb	0	; () banked
  4350  000E34  5196               	movf	printf@c& (0+255),w,b
  4351  000E36  EC04  F010         	call	_putch
  4352                           
  4353                           ;doprnt.c: 542: continue;
  4354  000E3A  D1B6               	goto	l4668
  4355  000E3C                     l4546:
  4356                           
  4357                           ;doprnt.c: 543: }
  4358                           ;doprnt.c: 546: width = 0;
  4359  000E3C  0E00               	movlw	0
  4360  000E3E  0100               	movlb	0	; () banked
  4361  000E40  6F95               	movwf	(printf@width+1)& (0+255),b
  4362  000E42  0E00               	movlw	0
  4363  000E44  6F94               	movwf	printf@width& (0+255),b
  4364                           
  4365                           ;doprnt.c: 548: flag = 0;
  4366  000E46  0E00               	movlw	0
  4367  000E48  0100               	movlb	0	; () banked
  4368  000E4A  6F93               	movwf	printf@flag& (0+255),b
  4369                           
  4370                           ; BSR set to: 0
  4371                           ;doprnt.c: 551: switch(*f) {
  4372                           
  4373                           ;doprnt.c: 550: for(;;) {
  4374  000E4C  D005               	goto	l4552
  4375  000E4E                     l4548:
  4376                           
  4377                           ;doprnt.c: 580: flag |= 0x04;
  4378  000E4E  0100               	movlb	0	; () banked
  4379  000E50  8593               	bsf	printf@flag& (0+255),2,b
  4380                           
  4381                           ;doprnt.c: 581: f++;
  4382  000E52  0100               	movlb	0	; () banked
  4383  000E54  4B81               	infsnz	printf@f& (0+255),f,b
  4384  000E56  2B82               	incf	(printf@f+1)& (0+255),f,b
  4385  000E58                     l4552:
  4386  000E58  C081  FFF6         	movff	printf@f,tblptrl
  4387  000E5C  C082  FFF7         	movff	printf@f+1,tblptrh
  4388  000E60                     	if	0	;tblptru may be non-zero
  4389  000E60                     	endif
  4390  000E60                     	if	0	;tblptru may be non-zero
  4391  000E60                     	endif
  4392  000E60  0008               	tblrd		*
  4393  000E62  50F5               	movf	tablat,w,c
  4394                           
  4395                           ; Switch size 1, requested type "space"
  4396                           ; Number of cases is 1, Range of values is 48 to 48
  4397                           ; switch strategies available:
  4398                           ; Name         Instructions Cycles
  4399                           ; simple_byte            4     3 (average)
  4400                           ;	Chosen strategy is simple_byte
  4401  000E64  0A30               	xorlw	48	; case 48
  4402  000E66  B4D8               	btfsc	status,2,c
  4403  000E68  D7F2               	goto	l4548
  4404                           
  4405                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4406                           
  4407                           ;doprnt.c: 586: }
  4408                           
  4409                           ;doprnt.c: 585: break;
  4410  000E6A  C081  FFF6         	movff	printf@f,tblptrl
  4411  000E6E  C082  FFF7         	movff	printf@f+1,tblptrh
  4412  000E72                     	if	0	;tblptru may be non-zero
  4413  000E72                     	endif
  4414  000E72                     	if	0	;tblptru may be non-zero
  4415  000E72                     	endif
  4416  000E72  0008               	tblrd		*
  4417  000E74  50F5               	movf	tablat,w,c
  4418  000E76  ECBD  F00F         	call	_isdigit
  4419  000E7A  A0D8               	btfss	status,0,c
  4420  000E7C  D043               	goto	l4570
  4421                           
  4422                           ;doprnt.c: 598: width = 0;
  4423  000E7E  0E00               	movlw	0
  4424  000E80  0100               	movlb	0	; () banked
  4425  000E82  6F95               	movwf	(printf@width+1)& (0+255),b
  4426  000E84  0E00               	movlw	0
  4427  000E86  6F94               	movwf	printf@width& (0+255),b
  4428  000E88                     l4558:
  4429                           
  4430                           ;doprnt.c: 600: width *= 10;
  4431  000E88  C094  F035         	movff	printf@width,___wmul@multiplier
  4432  000E8C  C095  F036         	movff	printf@width+1,___wmul@multiplier+1
  4433  000E90  0E00               	movlw	0
  4434  000E92  6E38               	movwf	___wmul@multiplicand+1,c
  4435  000E94  0E0A               	movlw	10
  4436  000E96  6E37               	movwf	___wmul@multiplicand,c
  4437  000E98  EC71  F00F         	call	___wmul	;wreg free
  4438  000E9C  C035  F094         	movff	?___wmul,printf@width
  4439  000EA0  C036  F095         	movff	?___wmul+1,printf@width+1
  4440                           
  4441                           ;doprnt.c: 601: width += *f++ - '0';
  4442  000EA4  0ED0               	movlw	208
  4443  000EA6  0100               	movlb	0	; () banked
  4444  000EA8  6F89               	movwf	??_printf& (0+255),b
  4445  000EAA  0EFF               	movlw	255
  4446  000EAC  0100               	movlb	0	; () banked
  4447  000EAE  6F8A               	movwf	(??_printf+1)& (0+255),b
  4448  000EB0  C081  FFF6         	movff	printf@f,tblptrl
  4449  000EB4  C082  FFF7         	movff	printf@f+1,tblptrh
  4450  000EB8                     	if	0	;tblptru may be non-zero
  4451  000EB8                     	endif
  4452  000EB8                     	if	0	;tblptru may be non-zero
  4453  000EB8                     	endif
  4454  000EB8  0008               	tblrd		*
  4455  000EBA  50F5               	movf	tablat,w,c
  4456  000EBC  0100               	movlb	0	; () banked
  4457  000EBE  6F8B               	movwf	(??_printf+2)& (0+255),b
  4458  000EC0  6B8C               	clrf	(??_printf+3)& (0+255),b
  4459  000EC2  0100               	movlb	0	; () banked
  4460  000EC4  5189               	movf	??_printf& (0+255),w,b
  4461  000EC6  0100               	movlb	0	; () banked
  4462  000EC8  278B               	addwf	(??_printf+2)& (0+255),f,b
  4463  000ECA  0100               	movlb	0	; () banked
  4464  000ECC  518A               	movf	(??_printf+1)& (0+255),w,b
  4465  000ECE  0100               	movlb	0	; () banked
  4466  000ED0  238C               	addwfc	(??_printf+3)& (0+255),f,b
  4467  000ED2  0100               	movlb	0	; () banked
  4468  000ED4  518B               	movf	(??_printf+2)& (0+255),w,b
  4469  000ED6  0100               	movlb	0	; () banked
  4470  000ED8  2794               	addwf	printf@width& (0+255),f,b
  4471  000EDA  0100               	movlb	0	; () banked
  4472  000EDC  518C               	movf	(??_printf+3)& (0+255),w,b
  4473  000EDE  0100               	movlb	0	; () banked
  4474  000EE0  2395               	addwfc	(printf@width+1)& (0+255),f,b
  4475                           
  4476                           ; BSR set to: 0
  4477  000EE2  0100               	movlb	0	; () banked
  4478  000EE4  4B81               	infsnz	printf@f& (0+255),f,b
  4479  000EE6  2B82               	incf	(printf@f+1)& (0+255),f,b
  4480                           
  4481                           ; BSR set to: 0
  4482                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4483  000EE8  C081  FFF6         	movff	printf@f,tblptrl
  4484  000EEC  C082  FFF7         	movff	printf@f+1,tblptrh
  4485  000EF0                     	if	0	;tblptru may be non-zero
  4486  000EF0                     	endif
  4487  000EF0                     	if	0	;tblptru may be non-zero
  4488  000EF0                     	endif
  4489  000EF0  0008               	tblrd		*
  4490  000EF2  50F5               	movf	tablat,w,c
  4491  000EF4  ECBD  F00F         	call	_isdigit
  4492  000EF8  A0D8               	btfss	status,0,c
  4493  000EFA  D004               	goto	l4570
  4494  000EFC  D7C5               	goto	l4558
  4495  000EFE                     l4566:
  4496                           
  4497                           ;doprnt.c: 721: flag |= 0x80;
  4498  000EFE  0100               	movlb	0	; () banked
  4499  000F00  8F93               	bsf	printf@flag& (0+255),7,b
  4500                           
  4501                           ;doprnt.c: 723: break;
  4502  000F02  D019               	goto	l470
  4503  000F04                     l4570:
  4504  000F04  C081  FFF6         	movff	printf@f,tblptrl
  4505  000F08  C082  FFF7         	movff	printf@f+1,tblptrh
  4506  000F0C  0100               	movlb	0	; () banked
  4507  000F0E  4B81               	infsnz	printf@f& (0+255),f,b
  4508  000F10  2B82               	incf	(printf@f+1)& (0+255),f,b
  4509  000F12                     	if	0	;tblptru may be non-zero
  4510  000F12                     	endif
  4511  000F12                     	if	0	;tblptru may be non-zero
  4512  000F12                     	endif
  4513  000F12  0008               	tblrd		*
  4514  000F14  CFF5 F096          	movff	tablat,printf@c
  4515  000F18  0100               	movlb	0	; () banked
  4516  000F1A  5196               	movf	printf@c& (0+255),w,b
  4517                           
  4518                           ; Switch size 1, requested type "space"
  4519                           ; Number of cases is 4, Range of values is 0 to 120
  4520                           ; switch strategies available:
  4521                           ; Name         Instructions Cycles
  4522                           ; simple_byte           13     7 (average)
  4523                           ;	Chosen strategy is simple_byte
  4524  000F1C  0A00               	xorlw	0	; case 0
  4525  000F1E  B4D8               	btfsc	status,2,c
  4526  000F20  0012               	return	
  4527  000F22  0A64               	xorlw	100	; case 100
  4528  000F24  B4D8               	btfsc	status,2,c
  4529  000F26  D007               	goto	l470
  4530  000F28  0A0D               	xorlw	13	; case 105
  4531  000F2A  B4D8               	btfsc	status,2,c
  4532  000F2C  D004               	goto	l470
  4533  000F2E  0A11               	xorlw	17	; case 120
  4534  000F30  B4D8               	btfsc	status,2,c
  4535  000F32  D7E5               	goto	l4566
  4536  000F34  D139               	goto	l4668
  4537  000F36                     l470:
  4538                           
  4539                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  4540  000F36  0100               	movlb	0	; () banked
  4541  000F38  BF93               	btfsc	printf@flag& (0+255),7,b
  4542  000F3A  D019               	goto	l4582
  4543                           
  4544                           ; BSR set to: 0
  4545                           ;doprnt.c: 1253: {
  4546                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4547  000F3C  C08E  FFD9         	movff	printf@ap,fsr2l
  4548  000F40  C08F  FFDA         	movff	printf@ap+1,fsr2h
  4549  000F44  CFDE F091          	movff	postinc2,printf@val
  4550  000F48  CFDD F092          	movff	postdec2,printf@val+1
  4551                           
  4552                           ; BSR set to: 0
  4553  000F4C  0E02               	movlw	2
  4554  000F4E  0100               	movlb	0	; () banked
  4555  000F50  278E               	addwf	printf@ap& (0+255),f,b
  4556  000F52  0E00               	movlw	0
  4557  000F54  238F               	addwfc	(printf@ap+1)& (0+255),f,b
  4558                           
  4559                           ; BSR set to: 0
  4560                           ;doprnt.c: 1261: if((int)val < 0) {
  4561  000F56  0100               	movlb	0	; () banked
  4562  000F58  AF92               	btfss	(printf@val+1)& (0+255),7,b
  4563  000F5A  D053               	goto	l4616
  4564                           
  4565                           ; BSR set to: 0
  4566                           ;doprnt.c: 1262: flag |= 0x03;
  4567  000F5C  0E03               	movlw	3
  4568  000F5E  0100               	movlb	0	; () banked
  4569  000F60  1393               	iorwf	printf@flag& (0+255),f,b
  4570                           
  4571                           ; BSR set to: 0
  4572                           ;doprnt.c: 1263: val = -val;
  4573  000F62  0100               	movlb	0	; () banked
  4574  000F64  6D91               	negf	printf@val& (0+255),b
  4575  000F66  1F92               	comf	(printf@val+1)& (0+255),f,b
  4576  000F68  B0D8               	btfsc	status,0,c
  4577  000F6A  2B92               	incf	(printf@val+1)& (0+255),f,b
  4578                           
  4579                           ; BSR set to: 0
  4580                           ;doprnt.c: 1264: }
  4581                           ;doprnt.c: 1266: }
  4582  000F6C  D04A               	goto	l4616
  4583  000F6E                     l4582:
  4584                           
  4585                           ; BSR set to: 0
  4586                           ;doprnt.c: 1268: else
  4587                           ;doprnt.c: 1273: {
  4588                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4589  000F6E  C08E  FFD9         	movff	printf@ap,fsr2l
  4590  000F72  C08F  FFDA         	movff	printf@ap+1,fsr2h
  4591  000F76  CFDE F091          	movff	postinc2,printf@val
  4592  000F7A  CFDD F092          	movff	postdec2,printf@val+1
  4593                           
  4594                           ; BSR set to: 0
  4595  000F7E  0E02               	movlw	2
  4596  000F80  0100               	movlb	0	; () banked
  4597  000F82  278E               	addwf	printf@ap& (0+255),f,b
  4598  000F84  0E00               	movlw	0
  4599  000F86  238F               	addwfc	(printf@ap+1)& (0+255),f,b
  4600                           
  4601                           ; BSR set to: 0
  4602                           ;doprnt.c: 1287: }
  4603                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  4604  000F88  D03C               	goto	l4616
  4605  000F8A                     l4586:
  4606                           
  4607                           ; BSR set to: 0
  4608                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4609  000F8A  0E01               	movlw	1
  4610  000F8C  0100               	movlb	0	; () banked
  4611  000F8E  6F96               	movwf	printf@c& (0+255),b
  4612  000F90                     l4588:
  4613                           
  4614                           ; BSR set to: 0
  4615  000F90  0E05               	movlw	5
  4616  000F92  0100               	movlb	0	; () banked
  4617  000F94  1996               	xorwf	printf@c& (0+255),w,b
  4618  000F96  B4D8               	btfsc	status,2,c
  4619  000F98  D03D               	goto	l4618
  4620                           
  4621                           ; BSR set to: 0
  4622                           ;doprnt.c: 1306: if(val < dpowers[c])
  4623                           
  4624                           ; BSR set to: 0
  4625                           
  4626                           ; BSR set to: 0
  4627  000F9A  0100               	movlb	0	; () banked
  4628  000F9C  5196               	movf	printf@c& (0+255),w,b
  4629  000F9E  0D02               	mullw	2
  4630  000FA0  0E18               	movlw	low _dpowers
  4631  000FA2  24F3               	addwf	prodl,w,c
  4632  000FA4  6EF6               	movwf	tblptrl,c
  4633  000FA6  0EFE               	movlw	high _dpowers
  4634  000FA8  20F4               	addwfc	prodh,w,c
  4635  000FAA  6EF7               	movwf	tblptrh,c
  4636  000FAC                     	if	0	;There are less than 3 active tblptr bytes
  4637  000FAC                     	endif
  4638  000FAC  0009               	tblrd		*+
  4639  000FAE  50F5               	movf	tablat,w,c
  4640  000FB0  0100               	movlb	0	; () banked
  4641  000FB2  5D91               	subwf	printf@val& (0+255),w,b
  4642  000FB4  0009               	tblrd		*+
  4643  000FB6  50F5               	movf	tablat,w,c
  4644  000FB8  0100               	movlb	0	; () banked
  4645  000FBA  5992               	subwfb	(printf@val+1)& (0+255),w,b
  4646  000FBC  A0D8               	btfss	status,0,c
  4647  000FBE  D02A               	goto	l4618
  4648                           
  4649                           ; BSR set to: 0
  4650                           
  4651                           ; BSR set to: 0
  4652                           
  4653                           ; BSR set to: 0
  4654                           ;doprnt.c: 1307: break;
  4655  000FC0  0100               	movlb	0	; () banked
  4656  000FC2  2B96               	incf	printf@c& (0+255),f,b
  4657  000FC4  D7E5               	goto	l4588
  4658  000FC6                     l4600:
  4659                           
  4660                           ; BSR set to: 0
  4661                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  4662  000FC6  0E01               	movlw	1
  4663  000FC8  0100               	movlb	0	; () banked
  4664  000FCA  6F96               	movwf	printf@c& (0+255),b
  4665  000FCC                     l4602:
  4666                           
  4667                           ; BSR set to: 0
  4668  000FCC  0E04               	movlw	4
  4669  000FCE  0100               	movlb	0	; () banked
  4670  000FD0  1996               	xorwf	printf@c& (0+255),w,b
  4671  000FD2  B4D8               	btfsc	status,2,c
  4672  000FD4  D01F               	goto	l4618
  4673                           
  4674                           ; BSR set to: 0
  4675                           ;doprnt.c: 1317: if(val < hexpowers[c])
  4676                           
  4677                           ; BSR set to: 0
  4678                           
  4679                           ; BSR set to: 0
  4680  000FD6  0100               	movlb	0	; () banked
  4681  000FD8  5196               	movf	printf@c& (0+255),w,b
  4682  000FDA  0D02               	mullw	2
  4683  000FDC  0E22               	movlw	low _hexpowers
  4684  000FDE  24F3               	addwf	prodl,w,c
  4685  000FE0  6EF6               	movwf	tblptrl,c
  4686  000FE2  0EFE               	movlw	high _hexpowers
  4687  000FE4  20F4               	addwfc	prodh,w,c
  4688  000FE6  6EF7               	movwf	tblptrh,c
  4689  000FE8                     	if	0	;There are less than 3 active tblptr bytes
  4690  000FE8                     	endif
  4691  000FE8  0009               	tblrd		*+
  4692  000FEA  50F5               	movf	tablat,w,c
  4693  000FEC  0100               	movlb	0	; () banked
  4694  000FEE  5D91               	subwf	printf@val& (0+255),w,b
  4695  000FF0  0009               	tblrd		*+
  4696  000FF2  50F5               	movf	tablat,w,c
  4697  000FF4  0100               	movlb	0	; () banked
  4698  000FF6  5992               	subwfb	(printf@val+1)& (0+255),w,b
  4699  000FF8  A0D8               	btfss	status,0,c
  4700  000FFA  D00C               	goto	l4618
  4701                           
  4702                           ; BSR set to: 0
  4703                           
  4704                           ; BSR set to: 0
  4705                           
  4706                           ; BSR set to: 0
  4707                           ;doprnt.c: 1318: break;
  4708  000FFC  0100               	movlb	0	; () banked
  4709  000FFE  2B96               	incf	printf@c& (0+255),f,b
  4710  001000  D7E5               	goto	l4602
  4711  001002                     l4616:
  4712                           
  4713                           ; BSR set to: 0
  4714  001002  0100               	movlb	0	; () banked
  4715  001004  5193               	movf	printf@flag& (0+255),w,b
  4716  001006  0B80               	andlw	128
  4717                           
  4718                           ; Switch size 1, requested type "space"
  4719                           ; Number of cases is 2, Range of values is 0 to 128
  4720                           ; switch strategies available:
  4721                           ; Name         Instructions Cycles
  4722                           ; simple_byte            7     4 (average)
  4723                           ;	Chosen strategy is simple_byte
  4724  001008  0A00               	xorlw	0	; case 0
  4725  00100A  B4D8               	btfsc	status,2,c
  4726  00100C  D7BE               	goto	l4586
  4727  00100E  0A80               	xorlw	128	; case 128
  4728  001010  B4D8               	btfsc	status,2,c
  4729  001012  D7D9               	goto	l4600
  4730  001014                     l4618:
  4731                           
  4732                           ; BSR set to: 0
  4733                           ;doprnt.c: 1345: if(width && flag & 0x03)
  4734  001014  0100               	movlb	0	; () banked
  4735  001016  5194               	movf	printf@width& (0+255),w,b
  4736  001018  0100               	movlb	0	; () banked
  4737  00101A  1195               	iorwf	(printf@width+1)& (0+255),w,b
  4738  00101C  B4D8               	btfsc	status,2,c
  4739  00101E  D00B               	goto	l4624
  4740                           
  4741                           ; BSR set to: 0
  4742  001020  C093  F089         	movff	printf@flag,??_printf
  4743  001024  0E03               	movlw	3
  4744  001026  0100               	movlb	0	; () banked
  4745  001028  1789               	andwf	??_printf& (0+255),f,b
  4746  00102A  B4D8               	btfsc	status,2,c
  4747  00102C  D004               	goto	l4624
  4748                           
  4749                           ; BSR set to: 0
  4750                           ;doprnt.c: 1346: width--;
  4751  00102E  0100               	movlb	0	; () banked
  4752  001030  0794               	decf	printf@width& (0+255),f,b
  4753  001032  A0D8               	btfss	status,0,c
  4754  001034  0795               	decf	(printf@width+1)& (0+255),f,b
  4755  001036                     l4624:
  4756                           
  4757                           ; BSR set to: 0
  4758                           ;doprnt.c: 1381: if(width > c)
  4759  001036  0E80               	movlw	128
  4760  001038  0100               	movlb	0	; () banked
  4761  00103A  BF96               	btfsc	printf@c& (0+255),7,b
  4762  00103C  0E7F               	movlw	127
  4763  00103E  0100               	movlb	0	; () banked
  4764  001040  6F89               	movwf	??_printf& (0+255),b
  4765  001042  0100               	movlb	0	; () banked
  4766  001044  5194               	movf	printf@width& (0+255),w,b
  4767  001046  0100               	movlb	0	; () banked
  4768  001048  5D96               	subwf	printf@c& (0+255),w,b
  4769  00104A  0100               	movlb	0	; () banked
  4770  00104C  5195               	movf	(printf@width+1)& (0+255),w,b
  4771  00104E  0A80               	xorlw	128
  4772  001050  0100               	movlb	0	; () banked
  4773  001052  5989               	subwfb	??_printf& (0+255),w,b
  4774  001054  B0D8               	btfsc	status,0,c
  4775  001056  D00B               	goto	l4628
  4776                           
  4777                           ; BSR set to: 0
  4778                           ;doprnt.c: 1382: width -= c;
  4779  001058  0100               	movlb	0	; () banked
  4780  00105A  5196               	movf	printf@c& (0+255),w,b
  4781  00105C  0100               	movlb	0	; () banked
  4782  00105E  5F94               	subwf	printf@width& (0+255),f,b
  4783  001060  0E00               	movlw	0
  4784  001062  0100               	movlb	0	; () banked
  4785  001064  BF96               	btfsc	printf@c& (0+255),7,b
  4786  001066  0EFF               	movlw	255
  4787  001068  0100               	movlb	0	; () banked
  4788  00106A  5B95               	subwfb	(printf@width+1)& (0+255),f,b
  4789  00106C  D005               	goto	l4630
  4790  00106E                     l4628:
  4791                           
  4792                           ; BSR set to: 0
  4793                           ;doprnt.c: 1383: else
  4794                           ;doprnt.c: 1384: width = 0;
  4795  00106E  0E00               	movlw	0
  4796  001070  0100               	movlb	0	; () banked
  4797  001072  6F95               	movwf	(printf@width+1)& (0+255),b
  4798  001074  0E00               	movlw	0
  4799  001076  6F94               	movwf	printf@width& (0+255),b
  4800  001078                     l4630:
  4801                           
  4802                           ; BSR set to: 0
  4803                           ;doprnt.c: 1387: if(flag & 0x04) {
  4804  001078  0100               	movlb	0	; () banked
  4805  00107A  A593               	btfss	printf@flag& (0+255),2,b
  4806  00107C  D018               	goto	l4642
  4807                           
  4808                           ; BSR set to: 0
  4809                           ;doprnt.c: 1392: if(flag & 0x03)
  4810  00107E  C093  F089         	movff	printf@flag,??_printf
  4811  001082  0E03               	movlw	3
  4812  001084  0100               	movlb	0	; () banked
  4813  001086  1789               	andwf	??_printf& (0+255),f,b
  4814  001088  B4D8               	btfsc	status,2,c
  4815  00108A  D003               	goto	l4636
  4816                           
  4817                           ; BSR set to: 0
  4818                           ;doprnt.c: 1393: (putch('-') );
  4819  00108C  0E2D               	movlw	45
  4820  00108E  EC04  F010         	call	_putch
  4821  001092                     l4636:
  4822                           
  4823                           ;doprnt.c: 1415: if(width)
  4824  001092  0100               	movlb	0	; () banked
  4825  001094  5194               	movf	printf@width& (0+255),w,b
  4826  001096  0100               	movlb	0	; () banked
  4827  001098  1195               	iorwf	(printf@width+1)& (0+255),w,b
  4828  00109A  B4D8               	btfsc	status,2,c
  4829  00109C  D025               	goto	l4652
  4830                           
  4831                           ; BSR set to: 0
  4832                           ;doprnt.c: 1417: (putch('0') );
  4833                           
  4834                           ; BSR set to: 0
  4835                           
  4836                           ;doprnt.c: 1416: do
  4837  00109E  0E30               	movlw	48
  4838  0010A0  EC04  F010         	call	_putch
  4839                           
  4840                           ;doprnt.c: 1418: while(--width);
  4841  0010A4  0100               	movlb	0	; () banked
  4842  0010A6  0794               	decf	printf@width& (0+255),f,b
  4843  0010A8  A0D8               	btfss	status,0,c
  4844  0010AA  0795               	decf	(printf@width+1)& (0+255),f,b
  4845  0010AC  D7F2               	goto	l4636
  4846  0010AE                     l4642:
  4847                           
  4848                           ; BSR set to: 0
  4849                           ;doprnt.c: 1422: {
  4850                           ;doprnt.c: 1424: if(width
  4851                           ;doprnt.c: 1428: )
  4852  0010AE  0100               	movlb	0	; () banked
  4853  0010B0  5194               	movf	printf@width& (0+255),w,b
  4854  0010B2  0100               	movlb	0	; () banked
  4855  0010B4  1195               	iorwf	(printf@width+1)& (0+255),w,b
  4856  0010B6  B4D8               	btfsc	status,2,c
  4857  0010B8  D00D               	goto	l4648
  4858  0010BA                     l4644:
  4859                           
  4860                           ; BSR set to: 0
  4861                           ;doprnt.c: 1430: (putch(' ') );
  4862  0010BA  0E20               	movlw	32
  4863  0010BC  EC04  F010         	call	_putch
  4864                           
  4865                           ;doprnt.c: 1431: while(--width);
  4866  0010C0  0100               	movlb	0	; () banked
  4867  0010C2  0794               	decf	printf@width& (0+255),f,b
  4868  0010C4  A0D8               	btfss	status,0,c
  4869  0010C6  0795               	decf	(printf@width+1)& (0+255),f,b
  4870  0010C8  0100               	movlb	0	; () banked
  4871  0010CA  5194               	movf	printf@width& (0+255),w,b
  4872  0010CC  0100               	movlb	0	; () banked
  4873  0010CE  1195               	iorwf	(printf@width+1)& (0+255),w,b
  4874  0010D0  A4D8               	btfss	status,2,c
  4875  0010D2  D7F3               	goto	l4644
  4876  0010D4                     l4648:
  4877                           
  4878                           ; BSR set to: 0
  4879                           ;doprnt.c: 1438: if(flag & 0x03)
  4880  0010D4  C093  F089         	movff	printf@flag,??_printf
  4881  0010D8  0E03               	movlw	3
  4882  0010DA  0100               	movlb	0	; () banked
  4883  0010DC  1789               	andwf	??_printf& (0+255),f,b
  4884  0010DE  B4D8               	btfsc	status,2,c
  4885  0010E0  D003               	goto	l4652
  4886                           
  4887                           ; BSR set to: 0
  4888                           ;doprnt.c: 1439: (putch('-') );
  4889  0010E2  0E2D               	movlw	45
  4890  0010E4  EC04  F010         	call	_putch
  4891  0010E8                     l4652:
  4892                           
  4893                           ;doprnt.c: 1469: }
  4894                           ;doprnt.c: 1472: prec = c;
  4895  0010E8  C096  F090         	movff	printf@c,printf@prec
  4896                           
  4897                           ;doprnt.c: 1474: while(prec--) {
  4898  0010EC  D057               	goto	l4666
  4899  0010EE                     l4654:
  4900                           
  4901                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4902  0010EE  0100               	movlb	0	; () banked
  4903  0010F0  5190               	movf	printf@prec& (0+255),w,b
  4904  0010F2  0D02               	mullw	2
  4905  0010F4  0E18               	movlw	low _dpowers
  4906  0010F6  24F3               	addwf	prodl,w,c
  4907  0010F8  6EF6               	movwf	tblptrl,c
  4908  0010FA  0EFE               	movlw	high _dpowers
  4909  0010FC  20F4               	addwfc	prodh,w,c
  4910  0010FE  6EF7               	movwf	tblptrh,c
  4911  001100                     	if	0	;There are less than 3 active tblptr bytes
  4912  001100                     	endif
  4913  001100  0009               	tblrd		*+
  4914  001102  CFF5 F037          	movff	tablat,___lwdiv@divisor
  4915  001106  000A               	tblrd		*-
  4916  001108  CFF5 F038          	movff	tablat,___lwdiv@divisor+1
  4917  00110C  C091  F035         	movff	printf@val,___lwdiv@dividend
  4918  001110  C092  F036         	movff	printf@val+1,___lwdiv@dividend+1
  4919  001114  EC4D  F00E         	call	___lwdiv	;wreg free
  4920  001118  C035  F03C         	movff	?___lwdiv,___lwmod@dividend
  4921  00111C  C036  F03D         	movff	?___lwdiv+1,___lwmod@dividend+1
  4922  001120  0E00               	movlw	0
  4923  001122  6E3F               	movwf	___lwmod@divisor+1,c
  4924  001124  0E0A               	movlw	10
  4925  001126  6E3E               	movwf	___lwmod@divisor,c
  4926  001128  ECED  F00E         	call	___lwmod	;wreg free
  4927  00112C  503C               	movf	?___lwmod,w,c
  4928  00112E  0F30               	addlw	48
  4929  001130  0100               	movlb	0	; () banked
  4930  001132  6F96               	movwf	printf@c& (0+255),b
  4931                           
  4932                           ;doprnt.c: 1491: break;
  4933  001134  D02F               	goto	l4664
  4934  001136                     l4656:
  4935                           
  4936                           ; BSR set to: 0
  4937                           ;doprnt.c: 1499: {
  4938                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  4939  001136  C091  F035         	movff	printf@val,___lwdiv@dividend
  4940  00113A  C092  F036         	movff	printf@val+1,___lwdiv@dividend+1
  4941  00113E  0100               	movlb	0	; () banked
  4942  001140  5190               	movf	printf@prec& (0+255),w,b
  4943  001142  0D02               	mullw	2
  4944  001144  0E22               	movlw	low _hexpowers
  4945  001146  24F3               	addwf	prodl,w,c
  4946  001148  6EF6               	movwf	tblptrl,c
  4947  00114A  0EFE               	movlw	high _hexpowers
  4948  00114C  20F4               	addwfc	prodh,w,c
  4949  00114E  6EF7               	movwf	tblptrh,c
  4950  001150                     	if	0	;There are less than 3 active tblptr bytes
  4951  001150                     	endif
  4952  001150  0009               	tblrd		*+
  4953  001152  CFF5 F037          	movff	tablat,___lwdiv@divisor
  4954  001156  000A               	tblrd		*-
  4955  001158  CFF5 F038          	movff	tablat,___lwdiv@divisor+1
  4956  00115C  EC4D  F00E         	call	___lwdiv	;wreg free
  4957  001160  5035               	movf	?___lwdiv,w,c
  4958  001162  0B0F               	andlw	15
  4959  001164  0100               	movlb	0	; () banked
  4960  001166  6F8D               	movwf	printf@idx& (0+255),b
  4961                           
  4962                           ; BSR set to: 0
  4963                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  4964  001168  0100               	movlb	0	; () banked
  4965  00116A  518D               	movf	printf@idx& (0+255),w,b
  4966  00116C  0D01               	mullw	1
  4967  00116E  0EDD               	movlw	low STR_28
  4968  001170  24F3               	addwf	prodl,w,c
  4969  001172  6EF6               	movwf	tblptrl,c
  4970  001174  0EFE               	movlw	high STR_28
  4971  001176  20F4               	addwfc	prodh,w,c
  4972  001178  6EF7               	movwf	tblptrh,c
  4973  00117A                     	if	0	;There are less than 3 active tblptr bytes
  4974  00117A                     	endif
  4975  00117A  0008               	tblrd		*
  4976  00117C  CFF5 F096          	movff	tablat,printf@c
  4977                           
  4978                           ; BSR set to: 0
  4979                           ;doprnt.c: 1523: }
  4980                           
  4981                           ;doprnt.c: 1508: }
  4982                           ;doprnt.c: 1510: break;
  4983  001180  D009               	goto	l4664
  4984  001182                     l4662:
  4985  001182  0100               	movlb	0	; () banked
  4986  001184  5193               	movf	printf@flag& (0+255),w,b
  4987  001186  0B80               	andlw	128
  4988                           
  4989                           ; Switch size 1, requested type "space"
  4990                           ; Number of cases is 2, Range of values is 0 to 128
  4991                           ; switch strategies available:
  4992                           ; Name         Instructions Cycles
  4993                           ; simple_byte            7     4 (average)
  4994                           ;	Chosen strategy is simple_byte
  4995  001188  0A00               	xorlw	0	; case 0
  4996  00118A  B4D8               	btfsc	status,2,c
  4997  00118C  D7B0               	goto	l4654
  4998  00118E  0A80               	xorlw	128	; case 128
  4999  001190  B4D8               	btfsc	status,2,c
  5000  001192  D7D1               	goto	l4656
  5001  001194                     l4664:
  5002                           
  5003                           ; BSR set to: 0
  5004                           ;doprnt.c: 1524: (putch(c) );
  5005  001194  0100               	movlb	0	; () banked
  5006  001196  5196               	movf	printf@c& (0+255),w,b
  5007  001198  EC04  F010         	call	_putch
  5008  00119C                     l4666:
  5009  00119C  0100               	movlb	0	; () banked
  5010  00119E  0790               	decf	printf@prec& (0+255),f,b
  5011  0011A0  0100               	movlb	0	; () banked
  5012  0011A2  2990               	incf	printf@prec& (0+255),w,b
  5013  0011A4  A4D8               	btfss	status,2,c
  5014  0011A6  D7ED               	goto	l4662
  5015  0011A8                     l4668:
  5016  0011A8  C081  FFF6         	movff	printf@f,tblptrl
  5017  0011AC  C082  FFF7         	movff	printf@f+1,tblptrh
  5018  0011B0  0100               	movlb	0	; () banked
  5019  0011B2  4B81               	infsnz	printf@f& (0+255),f,b
  5020  0011B4  2B82               	incf	(printf@f+1)& (0+255),f,b
  5021  0011B6                     	if	0	;tblptru may be non-zero
  5022  0011B6                     	endif
  5023  0011B6                     	if	0	;tblptru may be non-zero
  5024  0011B6                     	endif
  5025  0011B6  0008               	tblrd		*
  5026  0011B8  CFF5 F096          	movff	tablat,printf@c
  5027  0011BC  0100               	movlb	0	; () banked
  5028  0011BE  5196               	movf	printf@c& (0+255),w,b
  5029  0011C0  B4D8               	btfsc	status,2,c
  5030  0011C2  0012               	return	
  5031  0011C4  D631               	goto	l4542
  5032  0011C6                     __end_of_printf:
  5033                           	opt stack 0
  5034                           tblptru	equ	0xFF8
  5035                           tblptrh	equ	0xFF7
  5036                           tblptrl	equ	0xFF6
  5037                           tablat	equ	0xFF5
  5038                           prodh	equ	0xFF4
  5039                           prodl	equ	0xFF3
  5040                           intcon	equ	0xFF2
  5041                           intcon3	equ	0xFF0
  5042                           postinc0	equ	0xFEE
  5043                           wreg	equ	0xFE8
  5044                           indf2	equ	0xFDF
  5045                           postinc2	equ	0xFDE
  5046                           postdec2	equ	0xFDD
  5047                           fsr2h	equ	0xFDA
  5048                           fsr2l	equ	0xFD9
  5049                           status	equ	0xFD8
  5050                           
  5051 ;; *************** function _putch *****************
  5052 ;; Defined at:
  5053 ;;		line 23 in file "../lcd.c"
  5054 ;; Parameters:    Size  Location     Type
  5055 ;;  data            1    wreg     unsigned char 
  5056 ;; Auto vars:     Size  Location     Type
  5057 ;;  data            1   54[COMRAM] unsigned char 
  5058 ;; Return value:  Size  Location     Type
  5059 ;;                  1    wreg      void 
  5060 ;; Registers used:
  5061 ;;		wreg, status,2, status,0, cstack
  5062 ;; Tracked objects:
  5063 ;;		On entry : 0/0
  5064 ;;		On exit  : 0/0
  5065 ;;		Unchanged: 0/0
  5066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5067 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5068 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5069 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5070 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5071 ;;Total ram usage:        1 bytes
  5072 ;; Hardware stack levels used:    1
  5073 ;; Hardware stack levels required when called:    6
  5074 ;; This function calls:
  5075 ;;		_lcdNibble
  5076 ;; This function is called by:
  5077 ;;		_printf
  5078 ;; This function uses a non-reentrant model
  5079 ;;
  5080                           
  5081                           	psect	text8
  5082  002008                     __ptext8:
  5083                           	opt stack 0
  5084  002008                     _putch:
  5085                           	opt stack 23
  5086                           
  5087                           ;incstack = 0
  5088                           ;putch@data stored from wreg
  5089  002008  6E37               	movwf	putch@data,c
  5090                           
  5091                           ;lcd.c: 24: LATDbits.LATD2 = 1;
  5092  00200A  848C               	bsf	3980,2,c	;volatile
  5093                           
  5094                           ;lcd.c: 25: lcdNibble(data);
  5095  00200C  5037               	movf	putch@data,w,c
  5096  00200E  EC9F  F00E         	call	_lcdNibble
  5097  002012  0012               	return		;funcret
  5098  002014                     __end_of_putch:
  5099                           	opt stack 0
  5100                           tblptru	equ	0xFF8
  5101                           tblptrh	equ	0xFF7
  5102                           tblptrl	equ	0xFF6
  5103                           tablat	equ	0xFF5
  5104                           prodh	equ	0xFF4
  5105                           prodl	equ	0xFF3
  5106                           intcon	equ	0xFF2
  5107                           intcon3	equ	0xFF0
  5108                           postinc0	equ	0xFEE
  5109                           wreg	equ	0xFE8
  5110                           indf2	equ	0xFDF
  5111                           postinc2	equ	0xFDE
  5112                           postdec2	equ	0xFDD
  5113                           fsr2h	equ	0xFDA
  5114                           fsr2l	equ	0xFD9
  5115                           status	equ	0xFD8
  5116                           
  5117 ;; *************** function _isdigit *****************
  5118 ;; Defined at:
  5119 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  5120 ;; Parameters:    Size  Location     Type
  5121 ;;  c               1    wreg     unsigned char 
  5122 ;; Auto vars:     Size  Location     Type
  5123 ;;  c               1   54[COMRAM] unsigned char 
  5124 ;; Return value:  Size  Location     Type
  5125 ;;		None               void
  5126 ;; Registers used:
  5127 ;;		wreg, status,2, status,0
  5128 ;; Tracked objects:
  5129 ;;		On entry : 0/0
  5130 ;;		On exit  : 0/0
  5131 ;;		Unchanged: 0/0
  5132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5134 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5135 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5136 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5137 ;;Total ram usage:        3 bytes
  5138 ;; Hardware stack levels used:    1
  5139 ;; Hardware stack levels required when called:    5
  5140 ;; This function calls:
  5141 ;;		Nothing
  5142 ;; This function is called by:
  5143 ;;		_printf
  5144 ;; This function uses a non-reentrant model
  5145 ;;
  5146                           
  5147                           	psect	text9
  5148  001F7A                     __ptext9:
  5149                           	opt stack 0
  5150  001F7A                     _isdigit:
  5151                           	opt stack 24
  5152                           
  5153                           ;incstack = 0
  5154                           ;isdigit@c stored from wreg
  5155  001F7A  6E37               	movwf	isdigit@c,c
  5156  001F7C  0E00               	movlw	0
  5157  001F7E  6E36               	movwf	_isdigit$944,c
  5158  001F80  0E3A               	movlw	58
  5159  001F82  6037               	cpfslt	isdigit@c,c
  5160  001F84  D005               	goto	l3016
  5161  001F86  0E2F               	movlw	47
  5162  001F88  6437               	cpfsgt	isdigit@c,c
  5163  001F8A  D002               	goto	l3016
  5164  001F8C  0E01               	movlw	1
  5165  001F8E  6E36               	movwf	_isdigit$944,c
  5166  001F90                     l3016:
  5167  001F90  C036  F035         	movff	_isdigit$944,??_isdigit
  5168  001F94  3035               	rrcf	??_isdigit,w,c
  5169  001F96  0012               	return	
  5170  001F98                     __end_of_isdigit:
  5171                           	opt stack 0
  5172                           tblptru	equ	0xFF8
  5173                           tblptrh	equ	0xFF7
  5174                           tblptrl	equ	0xFF6
  5175                           tablat	equ	0xFF5
  5176                           prodh	equ	0xFF4
  5177                           prodl	equ	0xFF3
  5178                           intcon	equ	0xFF2
  5179                           intcon3	equ	0xFF0
  5180                           postinc0	equ	0xFEE
  5181                           wreg	equ	0xFE8
  5182                           indf2	equ	0xFDF
  5183                           postinc2	equ	0xFDE
  5184                           postdec2	equ	0xFDD
  5185                           fsr2h	equ	0xFDA
  5186                           fsr2l	equ	0xFD9
  5187                           status	equ	0xFD8
  5188                           
  5189 ;; *************** function ___wmul *****************
  5190 ;; Defined at:
  5191 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  5192 ;; Parameters:    Size  Location     Type
  5193 ;;  multiplier      2   52[COMRAM] unsigned int 
  5194 ;;  multiplicand    2   54[COMRAM] unsigned int 
  5195 ;; Auto vars:     Size  Location     Type
  5196 ;;  product         2   56[COMRAM] unsigned int 
  5197 ;; Return value:  Size  Location     Type
  5198 ;;                  2   52[COMRAM] unsigned int 
  5199 ;; Registers used:
  5200 ;;		wreg, status,2, status,0, prodl, prodh
  5201 ;; Tracked objects:
  5202 ;;		On entry : 0/0
  5203 ;;		On exit  : 0/0
  5204 ;;		Unchanged: 0/0
  5205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5206 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5207 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5208 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5209 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5210 ;;Total ram usage:        6 bytes
  5211 ;; Hardware stack levels used:    1
  5212 ;; Hardware stack levels required when called:    5
  5213 ;; This function calls:
  5214 ;;		Nothing
  5215 ;; This function is called by:
  5216 ;;		_printf
  5217 ;; This function uses a non-reentrant model
  5218 ;;
  5219                           
  5220                           	psect	text10
  5221  001EE2                     __ptext10:
  5222                           	opt stack 0
  5223  001EE2                     ___wmul:
  5224                           	opt stack 24
  5225                           
  5226                           ;incstack = 0
  5227  001EE2  5035               	movf	___wmul@multiplier,w,c
  5228  001EE4  0237               	mulwf	___wmul@multiplicand,c
  5229  001EE6  CFF3 F039          	movff	prodl,___wmul@product
  5230  001EEA  CFF4 F03A          	movff	prodh,___wmul@product+1
  5231  001EEE  5035               	movf	___wmul@multiplier,w,c
  5232  001EF0  0238               	mulwf	___wmul@multiplicand+1,c
  5233  001EF2  50F3               	movf	prodl,w,c
  5234  001EF4  263A               	addwf	___wmul@product+1,f,c
  5235  001EF6  5036               	movf	___wmul@multiplier+1,w,c
  5236  001EF8  0237               	mulwf	___wmul@multiplicand,c
  5237  001EFA  50F3               	movf	prodl,w,c
  5238  001EFC  263A               	addwf	___wmul@product+1,f,c
  5239  001EFE  C039  F035         	movff	___wmul@product,?___wmul
  5240  001F02  C03A  F036         	movff	___wmul@product+1,?___wmul+1
  5241  001F06  0012               	return	
  5242  001F08                     __end_of___wmul:
  5243                           	opt stack 0
  5244                           tblptru	equ	0xFF8
  5245                           tblptrh	equ	0xFF7
  5246                           tblptrl	equ	0xFF6
  5247                           tablat	equ	0xFF5
  5248                           prodh	equ	0xFF4
  5249                           prodl	equ	0xFF3
  5250                           intcon	equ	0xFF2
  5251                           intcon3	equ	0xFF0
  5252                           postinc0	equ	0xFEE
  5253                           wreg	equ	0xFE8
  5254                           indf2	equ	0xFDF
  5255                           postinc2	equ	0xFDE
  5256                           postdec2	equ	0xFDD
  5257                           fsr2h	equ	0xFDA
  5258                           fsr2l	equ	0xFD9
  5259                           status	equ	0xFD8
  5260                           
  5261 ;; *************** function ___lwmod *****************
  5262 ;; Defined at:
  5263 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  5264 ;; Parameters:    Size  Location     Type
  5265 ;;  dividend        2   59[COMRAM] unsigned int 
  5266 ;;  divisor         2   61[COMRAM] unsigned int 
  5267 ;; Auto vars:     Size  Location     Type
  5268 ;;  counter         1    0[BANK0 ] unsigned char 
  5269 ;; Return value:  Size  Location     Type
  5270 ;;                  2   59[COMRAM] unsigned int 
  5271 ;; Registers used:
  5272 ;;		wreg, status,2, status,0
  5273 ;; Tracked objects:
  5274 ;;		On entry : 0/0
  5275 ;;		On exit  : 0/0
  5276 ;;		Unchanged: 0/0
  5277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5278 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5279 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5280 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5281 ;;      Totals:         4       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5282 ;;Total ram usage:        5 bytes
  5283 ;; Hardware stack levels used:    1
  5284 ;; Hardware stack levels required when called:    5
  5285 ;; This function calls:
  5286 ;;		Nothing
  5287 ;; This function is called by:
  5288 ;;		_printf
  5289 ;; This function uses a non-reentrant model
  5290 ;;
  5291                           
  5292                           	psect	text11
  5293  001DDA                     __ptext11:
  5294                           	opt stack 0
  5295  001DDA                     ___lwmod:
  5296                           	opt stack 24
  5297                           
  5298                           ;incstack = 0
  5299  001DDA  503E               	movf	___lwmod@divisor,w,c
  5300  001DDC  103F               	iorwf	___lwmod@divisor+1,w,c
  5301  001DDE  B4D8               	btfsc	status,2,c
  5302  001DE0  D01B               	goto	l925
  5303  001DE2  0E01               	movlw	1
  5304  001DE4  0100               	movlb	0	; () banked
  5305  001DE6  6F80               	movwf	___lwmod@counter& (0+255),b
  5306  001DE8  D005               	goto	l4522
  5307  001DEA                     l4520:
  5308                           
  5309                           ; BSR set to: 0
  5310  001DEA  90D8               	bcf	status,0,c
  5311  001DEC  363E               	rlcf	___lwmod@divisor,f,c
  5312  001DEE  363F               	rlcf	___lwmod@divisor+1,f,c
  5313  001DF0  0100               	movlb	0	; () banked
  5314  001DF2  2B80               	incf	___lwmod@counter& (0+255),f,b
  5315  001DF4                     l4522:
  5316                           
  5317                           ; BSR set to: 0
  5318  001DF4  AE3F               	btfss	___lwmod@divisor+1,7,c
  5319  001DF6  D7F9               	goto	l4520
  5320  001DF8                     l4524:
  5321                           
  5322                           ; BSR set to: 0
  5323  001DF8  503E               	movf	___lwmod@divisor,w,c
  5324  001DFA  5C3C               	subwf	___lwmod@dividend,w,c
  5325  001DFC  503F               	movf	___lwmod@divisor+1,w,c
  5326  001DFE  583D               	subwfb	___lwmod@dividend+1,w,c
  5327  001E00  A0D8               	btfss	status,0,c
  5328  001E02  D004               	goto	l4528
  5329                           
  5330                           ; BSR set to: 0
  5331  001E04  503E               	movf	___lwmod@divisor,w,c
  5332  001E06  5E3C               	subwf	___lwmod@dividend,f,c
  5333  001E08  503F               	movf	___lwmod@divisor+1,w,c
  5334  001E0A  5A3D               	subwfb	___lwmod@dividend+1,f,c
  5335  001E0C                     l4528:
  5336                           
  5337                           ; BSR set to: 0
  5338  001E0C  90D8               	bcf	status,0,c
  5339  001E0E  323F               	rrcf	___lwmod@divisor+1,f,c
  5340  001E10  323E               	rrcf	___lwmod@divisor,f,c
  5341                           
  5342                           ; BSR set to: 0
  5343  001E12  0100               	movlb	0	; () banked
  5344  001E14  2F80               	decfsz	___lwmod@counter& (0+255),f,b
  5345  001E16  D7F0               	goto	l4524
  5346  001E18                     l925:
  5347  001E18  C03C  F03C         	movff	___lwmod@dividend,?___lwmod
  5348  001E1C  C03D  F03D         	movff	___lwmod@dividend+1,?___lwmod+1
  5349  001E20  0012               	return		;funcret
  5350  001E22                     __end_of___lwmod:
  5351                           	opt stack 0
  5352                           tblptru	equ	0xFF8
  5353                           tblptrh	equ	0xFF7
  5354                           tblptrl	equ	0xFF6
  5355                           tablat	equ	0xFF5
  5356                           prodh	equ	0xFF4
  5357                           prodl	equ	0xFF3
  5358                           intcon	equ	0xFF2
  5359                           intcon3	equ	0xFF0
  5360                           postinc0	equ	0xFEE
  5361                           wreg	equ	0xFE8
  5362                           indf2	equ	0xFDF
  5363                           postinc2	equ	0xFDE
  5364                           postdec2	equ	0xFDD
  5365                           fsr2h	equ	0xFDA
  5366                           fsr2l	equ	0xFD9
  5367                           status	equ	0xFD8
  5368                           
  5369 ;; *************** function ___lwdiv *****************
  5370 ;; Defined at:
  5371 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  5372 ;; Parameters:    Size  Location     Type
  5373 ;;  dividend        2   52[COMRAM] unsigned int 
  5374 ;;  divisor         2   54[COMRAM] unsigned int 
  5375 ;; Auto vars:     Size  Location     Type
  5376 ;;  quotient        2   56[COMRAM] unsigned int 
  5377 ;;  counter         1   58[COMRAM] unsigned char 
  5378 ;; Return value:  Size  Location     Type
  5379 ;;                  2   52[COMRAM] unsigned int 
  5380 ;; Registers used:
  5381 ;;		wreg, status,2, status,0
  5382 ;; Tracked objects:
  5383 ;;		On entry : 0/0
  5384 ;;		On exit  : 0/0
  5385 ;;		Unchanged: 0/0
  5386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5387 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5388 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5390 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5391 ;;Total ram usage:        7 bytes
  5392 ;; Hardware stack levels used:    1
  5393 ;; Hardware stack levels required when called:    5
  5394 ;; This function calls:
  5395 ;;		Nothing
  5396 ;; This function is called by:
  5397 ;;		_printf
  5398 ;; This function uses a non-reentrant model
  5399 ;;
  5400                           
  5401                           	psect	text12
  5402  001C9A                     __ptext12:
  5403                           	opt stack 0
  5404  001C9A                     ___lwdiv:
  5405                           	opt stack 24
  5406                           
  5407                           ;incstack = 0
  5408  001C9A  0E00               	movlw	0
  5409  001C9C  6E3A               	movwf	___lwdiv@quotient+1,c
  5410  001C9E  0E00               	movlw	0
  5411  001CA0  6E39               	movwf	___lwdiv@quotient,c
  5412  001CA2  5037               	movf	___lwdiv@divisor,w,c
  5413  001CA4  1038               	iorwf	___lwdiv@divisor+1,w,c
  5414  001CA6  B4D8               	btfsc	status,2,c
  5415  001CA8  D01C               	goto	l915
  5416  001CAA  0E01               	movlw	1
  5417  001CAC  6E3B               	movwf	___lwdiv@counter,c
  5418  001CAE  D004               	goto	l3136
  5419  001CB0                     l3134:
  5420  001CB0  90D8               	bcf	status,0,c
  5421  001CB2  3637               	rlcf	___lwdiv@divisor,f,c
  5422  001CB4  3638               	rlcf	___lwdiv@divisor+1,f,c
  5423  001CB6  2A3B               	incf	___lwdiv@counter,f,c
  5424  001CB8                     l3136:
  5425  001CB8  AE38               	btfss	___lwdiv@divisor+1,7,c
  5426  001CBA  D7FA               	goto	l3134
  5427  001CBC                     l3138:
  5428  001CBC  90D8               	bcf	status,0,c
  5429  001CBE  3639               	rlcf	___lwdiv@quotient,f,c
  5430  001CC0  363A               	rlcf	___lwdiv@quotient+1,f,c
  5431  001CC2  5037               	movf	___lwdiv@divisor,w,c
  5432  001CC4  5C35               	subwf	___lwdiv@dividend,w,c
  5433  001CC6  5038               	movf	___lwdiv@divisor+1,w,c
  5434  001CC8  5836               	subwfb	___lwdiv@dividend+1,w,c
  5435  001CCA  A0D8               	btfss	status,0,c
  5436  001CCC  D005               	goto	l3146
  5437  001CCE  5037               	movf	___lwdiv@divisor,w,c
  5438  001CD0  5E35               	subwf	___lwdiv@dividend,f,c
  5439  001CD2  5038               	movf	___lwdiv@divisor+1,w,c
  5440  001CD4  5A36               	subwfb	___lwdiv@dividend+1,f,c
  5441  001CD6  8039               	bsf	___lwdiv@quotient,0,c
  5442  001CD8                     l3146:
  5443  001CD8  90D8               	bcf	status,0,c
  5444  001CDA  3238               	rrcf	___lwdiv@divisor+1,f,c
  5445  001CDC  3237               	rrcf	___lwdiv@divisor,f,c
  5446  001CDE  2E3B               	decfsz	___lwdiv@counter,f,c
  5447  001CE0  D7ED               	goto	l3138
  5448  001CE2                     l915:
  5449  001CE2  C039  F035         	movff	___lwdiv@quotient,?___lwdiv
  5450  001CE6  C03A  F036         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5451  001CEA  0012               	return		;funcret
  5452  001CEC                     __end_of___lwdiv:
  5453                           	opt stack 0
  5454                           tblptru	equ	0xFF8
  5455                           tblptrh	equ	0xFF7
  5456                           tblptrl	equ	0xFF6
  5457                           tablat	equ	0xFF5
  5458                           prodh	equ	0xFF4
  5459                           prodl	equ	0xFF3
  5460                           intcon	equ	0xFF2
  5461                           intcon3	equ	0xFF0
  5462                           postinc0	equ	0xFEE
  5463                           wreg	equ	0xFE8
  5464                           indf2	equ	0xFDF
  5465                           postinc2	equ	0xFDE
  5466                           postdec2	equ	0xFDD
  5467                           fsr2h	equ	0xFDA
  5468                           fsr2l	equ	0xFD9
  5469                           status	equ	0xFD8
  5470                           
  5471 ;; *************** function _initLCD *****************
  5472 ;; Defined at:
  5473 ;;		line 7 in file "../lcd.c"
  5474 ;; Parameters:    Size  Location     Type
  5475 ;;		None
  5476 ;; Auto vars:     Size  Location     Type
  5477 ;;		None
  5478 ;; Return value:  Size  Location     Type
  5479 ;;                  1    wreg      void 
  5480 ;; Registers used:
  5481 ;;		wreg, status,2, status,0, cstack
  5482 ;; Tracked objects:
  5483 ;;		On entry : 0/0
  5484 ;;		On exit  : 0/0
  5485 ;;		Unchanged: 0/0
  5486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5487 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5488 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5489 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5490 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5491 ;;Total ram usage:        1 bytes
  5492 ;; Hardware stack levels used:    1
  5493 ;; Hardware stack levels required when called:    7
  5494 ;; This function calls:
  5495 ;;		_lcdInst
  5496 ;; This function is called by:
  5497 ;;		_main
  5498 ;; This function uses a non-reentrant model
  5499 ;;
  5500                           
  5501                           	psect	text13
  5502  001E22                     __ptext13:
  5503                           	opt stack 0
  5504  001E22                     _initLCD:
  5505                           	opt stack 23
  5506                           
  5507                           ;lcd.c: 8: _delay((unsigned long)((15)*(10000000/4000.0)));
  5508                           
  5509                           ;incstack = 0
  5510  001E22  0E31               	movlw	49
  5511  001E24  6E38               	movwf	??_initLCD& (0+255),c
  5512  001E26  0EB2               	movlw	178
  5513  001E28                     u5997:
  5514  001E28  2EE8               	decfsz	wreg,f,c
  5515  001E2A  D7FE               	bra	u5997
  5516  001E2C  2E38               	decfsz	??_initLCD& (0+255),f,c
  5517  001E2E  D7FC               	bra	u5997
  5518  001E30  D000               	nop2	
  5519                           
  5520                           ;lcd.c: 9: lcdInst(0b00110011);
  5521  001E32  0E33               	movlw	51
  5522  001E34  EC0A  F010         	call	_lcdInst
  5523                           
  5524                           ;lcd.c: 10: lcdInst(0b00110010);
  5525  001E38  0E32               	movlw	50
  5526  001E3A  EC0A  F010         	call	_lcdInst
  5527                           
  5528                           ;lcd.c: 11: lcdInst(0b00101000);
  5529  001E3E  0E28               	movlw	40
  5530  001E40  EC0A  F010         	call	_lcdInst
  5531                           
  5532                           ;lcd.c: 12: lcdInst(0b00001111);
  5533  001E44  0E0F               	movlw	15
  5534  001E46  EC0A  F010         	call	_lcdInst
  5535                           
  5536                           ;lcd.c: 13: lcdInst(0b00000110);
  5537  001E4A  0E06               	movlw	6
  5538  001E4C  EC0A  F010         	call	_lcdInst
  5539                           
  5540                           ;lcd.c: 14: lcdInst(0b00000001);
  5541  001E50  0E01               	movlw	1
  5542  001E52  EC0A  F010         	call	_lcdInst
  5543                           
  5544                           ;lcd.c: 15: _delay((unsigned long)((15)*(10000000/4000.0)));
  5545  001E56  0E31               	movlw	49
  5546  001E58  6E38               	movwf	??_initLCD& (0+255),c
  5547  001E5A  0EB2               	movlw	178
  5548  001E5C                     u6007:
  5549  001E5C  2EE8               	decfsz	wreg,f,c
  5550  001E5E  D7FE               	bra	u6007
  5551  001E60  2E38               	decfsz	??_initLCD& (0+255),f,c
  5552  001E62  D7FC               	bra	u6007
  5553  001E64  D000               	nop2	
  5554  001E66  0012               	return		;funcret
  5555  001E68                     __end_of_initLCD:
  5556                           	opt stack 0
  5557                           tblptru	equ	0xFF8
  5558                           tblptrh	equ	0xFF7
  5559                           tblptrl	equ	0xFF6
  5560                           tablat	equ	0xFF5
  5561                           prodh	equ	0xFF4
  5562                           prodl	equ	0xFF3
  5563                           intcon	equ	0xFF2
  5564                           intcon3	equ	0xFF0
  5565                           postinc0	equ	0xFEE
  5566                           wreg	equ	0xFE8
  5567                           indf2	equ	0xFDF
  5568                           postinc2	equ	0xFDE
  5569                           postdec2	equ	0xFDD
  5570                           fsr2h	equ	0xFDA
  5571                           fsr2l	equ	0xFD9
  5572                           status	equ	0xFD8
  5573                           
  5574 ;; *************** function _lcdInst *****************
  5575 ;; Defined at:
  5576 ;;		line 18 in file "../lcd.c"
  5577 ;; Parameters:    Size  Location     Type
  5578 ;;  data            1    wreg     unsigned char 
  5579 ;; Auto vars:     Size  Location     Type
  5580 ;;  data            1   54[COMRAM] unsigned char 
  5581 ;; Return value:  Size  Location     Type
  5582 ;;                  1    wreg      void 
  5583 ;; Registers used:
  5584 ;;		wreg, status,2, status,0, cstack
  5585 ;; Tracked objects:
  5586 ;;		On entry : 0/0
  5587 ;;		On exit  : 0/0
  5588 ;;		Unchanged: 0/0
  5589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5590 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5591 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5592 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5593 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5594 ;;Total ram usage:        1 bytes
  5595 ;; Hardware stack levels used:    1
  5596 ;; Hardware stack levels required when called:    6
  5597 ;; This function calls:
  5598 ;;		_lcdNibble
  5599 ;; This function is called by:
  5600 ;;		_initLCD
  5601 ;;		_main
  5602 ;; This function uses a non-reentrant model
  5603 ;;
  5604                           
  5605                           	psect	text14
  5606  002014                     __ptext14:
  5607                           	opt stack 0
  5608  002014                     _lcdInst:
  5609                           	opt stack 24
  5610                           
  5611                           ;incstack = 0
  5612                           ;lcdInst@data stored from wreg
  5613  002014  6E37               	movwf	lcdInst@data,c
  5614                           
  5615                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  5616  002016  948C               	bcf	3980,2,c	;volatile
  5617                           
  5618                           ;lcd.c: 20: lcdNibble(data);
  5619  002018  5037               	movf	lcdInst@data,w,c
  5620  00201A  EC9F  F00E         	call	_lcdNibble
  5621  00201E  0012               	return		;funcret
  5622  002020                     __end_of_lcdInst:
  5623                           	opt stack 0
  5624                           tblptru	equ	0xFF8
  5625                           tblptrh	equ	0xFF7
  5626                           tblptrl	equ	0xFF6
  5627                           tablat	equ	0xFF5
  5628                           prodh	equ	0xFF4
  5629                           prodl	equ	0xFF3
  5630                           intcon	equ	0xFF2
  5631                           intcon3	equ	0xFF0
  5632                           postinc0	equ	0xFEE
  5633                           wreg	equ	0xFE8
  5634                           indf2	equ	0xFDF
  5635                           postinc2	equ	0xFDE
  5636                           postdec2	equ	0xFDD
  5637                           fsr2h	equ	0xFDA
  5638                           fsr2l	equ	0xFD9
  5639                           status	equ	0xFD8
  5640                           
  5641 ;; *************** function _lcdNibble *****************
  5642 ;; Defined at:
  5643 ;;		line 28 in file "../lcd.c"
  5644 ;; Parameters:    Size  Location     Type
  5645 ;;  data            1    wreg     unsigned char 
  5646 ;; Auto vars:     Size  Location     Type
  5647 ;;  data            1   53[COMRAM] unsigned char 
  5648 ;;  temp            1   52[COMRAM] unsigned char 
  5649 ;; Return value:  Size  Location     Type
  5650 ;;                  1    wreg      void 
  5651 ;; Registers used:
  5652 ;;		wreg, status,2, status,0
  5653 ;; Tracked objects:
  5654 ;;		On entry : 0/0
  5655 ;;		On exit  : 0/0
  5656 ;;		Unchanged: 0/0
  5657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5658 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5659 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5660 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5661 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5662 ;;Total ram usage:        2 bytes
  5663 ;; Hardware stack levels used:    1
  5664 ;; Hardware stack levels required when called:    5
  5665 ;; This function calls:
  5666 ;;		Nothing
  5667 ;; This function is called by:
  5668 ;;		_lcdInst
  5669 ;;		_putch
  5670 ;; This function uses a non-reentrant model
  5671 ;;
  5672                           
  5673                           	psect	text15
  5674  001D3E                     __ptext15:
  5675                           	opt stack 0
  5676  001D3E                     _lcdNibble:
  5677                           	opt stack 23
  5678                           
  5679                           ;incstack = 0
  5680                           ;lcdNibble@data stored from wreg
  5681  001D3E  6E36               	movwf	lcdNibble@data,c
  5682                           
  5683                           ;lcd.c: 30: char temp = data & 0xF0;
  5684  001D40  5036               	movf	lcdNibble@data,w,c
  5685  001D42  0BF0               	andlw	240
  5686  001D44  6E35               	movwf	lcdNibble@temp,c
  5687                           
  5688                           ;lcd.c: 31: LATD = LATD & 0x0F;
  5689  001D46  508C               	movf	3980,w,c	;volatile
  5690  001D48  0B0F               	andlw	15
  5691  001D4A  6E8C               	movwf	3980,c	;volatile
  5692                           
  5693                           ;lcd.c: 32: LATD = temp | LATD;
  5694  001D4C  5035               	movf	lcdNibble@temp,w,c
  5695  001D4E  108C               	iorwf	3980,w,c	;volatile
  5696  001D50  6E8C               	movwf	3980,c	;volatile
  5697                           
  5698                           ;lcd.c: 34: LATDbits.LATD3 = 0;
  5699  001D52  968C               	bcf	3980,3,c	;volatile
  5700                           
  5701                           ;lcd.c: 35: _delay((unsigned long)((30)*(10000000/4000000.0)));
  5702  001D54  0E19               	movlw	25
  5703  001D56                     u6017:
  5704  001D56  2EE8               	decfsz	wreg,f,c
  5705  001D58  D7FE               	bra	u6017
  5706                           
  5707                           ;lcd.c: 36: LATDbits.LATD3 = 1;
  5708  001D5A  868C               	bsf	3980,3,c	;volatile
  5709                           
  5710                           ;lcd.c: 37: _delay((unsigned long)((30)*(10000000/4000000.0)));
  5711  001D5C  0E19               	movlw	25
  5712  001D5E                     u6027:
  5713  001D5E  2EE8               	decfsz	wreg,f,c
  5714  001D60  D7FE               	bra	u6027
  5715                           
  5716                           ;lcd.c: 39: data = data << 4;
  5717  001D62  3836               	swapf	lcdNibble@data,w,c
  5718  001D64  0BF0               	andlw	240
  5719  001D66  6E36               	movwf	lcdNibble@data,c
  5720                           
  5721                           ;lcd.c: 41: temp = data & 0xF0;
  5722  001D68  5036               	movf	lcdNibble@data,w,c
  5723  001D6A  0BF0               	andlw	240
  5724  001D6C  6E35               	movwf	lcdNibble@temp,c
  5725                           
  5726                           ;lcd.c: 42: LATD = LATD & 0x0F;
  5727  001D6E  508C               	movf	3980,w,c	;volatile
  5728  001D70  0B0F               	andlw	15
  5729  001D72  6E8C               	movwf	3980,c	;volatile
  5730                           
  5731                           ;lcd.c: 43: LATD = temp | LATD;
  5732  001D74  5035               	movf	lcdNibble@temp,w,c
  5733  001D76  108C               	iorwf	3980,w,c	;volatile
  5734  001D78  6E8C               	movwf	3980,c	;volatile
  5735                           
  5736                           ;lcd.c: 45: LATDbits.LATD3 = 0;
  5737  001D7A  968C               	bcf	3980,3,c	;volatile
  5738                           
  5739                           ;lcd.c: 46: _delay((unsigned long)((30)*(10000000/4000000.0)));
  5740  001D7C  0E19               	movlw	25
  5741  001D7E                     u6037:
  5742  001D7E  2EE8               	decfsz	wreg,f,c
  5743  001D80  D7FE               	bra	u6037
  5744                           
  5745                           ;lcd.c: 47: LATDbits.LATD3 = 1;
  5746  001D82  868C               	bsf	3980,3,c	;volatile
  5747                           
  5748                           ;lcd.c: 48: _delay((unsigned long)((30)*(10000000/4000000.0)));
  5749  001D84  0E19               	movlw	25
  5750  001D86                     u6047:
  5751  001D86  2EE8               	decfsz	wreg,f,c
  5752  001D88  D7FE               	bra	u6047
  5753  001D8A  0012               	return		;funcret
  5754  001D8C                     __end_of_lcdNibble:
  5755                           	opt stack 0
  5756                           tblptru	equ	0xFF8
  5757                           tblptrh	equ	0xFF7
  5758                           tblptrl	equ	0xFF6
  5759                           tablat	equ	0xFF5
  5760                           prodh	equ	0xFF4
  5761                           prodl	equ	0xFF3
  5762                           intcon	equ	0xFF2
  5763                           intcon3	equ	0xFF0
  5764                           postinc0	equ	0xFEE
  5765                           wreg	equ	0xFE8
  5766                           indf2	equ	0xFDF
  5767                           postinc2	equ	0xFDE
  5768                           postdec2	equ	0xFDD
  5769                           fsr2h	equ	0xFDA
  5770                           fsr2l	equ	0xFD9
  5771                           status	equ	0xFD8
  5772                           
  5773 ;; *************** function _I2C_Master_Write *****************
  5774 ;; Defined at:
  5775 ;;		line 39 in file "../I2C.c"
  5776 ;; Parameters:    Size  Location     Type
  5777 ;;  d               2   53[COMRAM] unsigned int 
  5778 ;; Auto vars:     Size  Location     Type
  5779 ;;		None
  5780 ;; Return value:  Size  Location     Type
  5781 ;;                  1    wreg      void 
  5782 ;; Registers used:
  5783 ;;		wreg, status,2, status,0, cstack
  5784 ;; Tracked objects:
  5785 ;;		On entry : 0/0
  5786 ;;		On exit  : 0/0
  5787 ;;		Unchanged: 0/0
  5788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5789 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5790 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5792 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5793 ;;Total ram usage:        2 bytes
  5794 ;; Hardware stack levels used:    1
  5795 ;; Hardware stack levels required when called:    6
  5796 ;; This function calls:
  5797 ;;		_I2C_Master_Wait
  5798 ;; This function is called by:
  5799 ;;		_main
  5800 ;; This function uses a non-reentrant model
  5801 ;;
  5802                           
  5803                           	psect	text16
  5804  002038                     __ptext16:
  5805                           	opt stack 0
  5806  002038                     _I2C_Master_Write:
  5807                           	opt stack 24
  5808                           
  5809                           ;I2C.c: 41: I2C_Master_Wait();
  5810                           
  5811                           ;incstack = 0
  5812  002038  ECF2  F00F         	call	_I2C_Master_Wait	;wreg free
  5813                           
  5814                           ;I2C.c: 42: SSPBUF = d;
  5815  00203C  C036  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  5816  002040  0012               	return		;funcret
  5817  002042                     __end_of_I2C_Master_Write:
  5818                           	opt stack 0
  5819                           tblptru	equ	0xFF8
  5820                           tblptrh	equ	0xFF7
  5821                           tblptrl	equ	0xFF6
  5822                           tablat	equ	0xFF5
  5823                           prodh	equ	0xFF4
  5824                           prodl	equ	0xFF3
  5825                           intcon	equ	0xFF2
  5826                           intcon3	equ	0xFF0
  5827                           postinc0	equ	0xFEE
  5828                           wreg	equ	0xFE8
  5829                           indf2	equ	0xFDF
  5830                           postinc2	equ	0xFDE
  5831                           postdec2	equ	0xFDD
  5832                           fsr2h	equ	0xFDA
  5833                           fsr2l	equ	0xFD9
  5834                           status	equ	0xFD8
  5835                           
  5836 ;; *************** function _I2C_Master_Stop *****************
  5837 ;; Defined at:
  5838 ;;		line 33 in file "../I2C.c"
  5839 ;; Parameters:    Size  Location     Type
  5840 ;;		None
  5841 ;; Auto vars:     Size  Location     Type
  5842 ;;		None
  5843 ;; Return value:  Size  Location     Type
  5844 ;;                  1    wreg      void 
  5845 ;; Registers used:
  5846 ;;		wreg, status,2, status,0, cstack
  5847 ;; Tracked objects:
  5848 ;;		On entry : 0/0
  5849 ;;		On exit  : 0/0
  5850 ;;		Unchanged: 0/0
  5851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5853 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5854 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5855 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5856 ;;Total ram usage:        0 bytes
  5857 ;; Hardware stack levels used:    1
  5858 ;; Hardware stack levels required when called:    6
  5859 ;; This function calls:
  5860 ;;		_I2C_Master_Wait
  5861 ;; This function is called by:
  5862 ;;		_main
  5863 ;; This function uses a non-reentrant model
  5864 ;;
  5865                           
  5866                           	psect	text17
  5867  00204C                     __ptext17:
  5868                           	opt stack 0
  5869  00204C                     _I2C_Master_Stop:
  5870                           	opt stack 24
  5871                           
  5872                           ;I2C.c: 35: I2C_Master_Wait();
  5873                           
  5874                           ;incstack = 0
  5875  00204C  ECF2  F00F         	call	_I2C_Master_Wait	;wreg free
  5876                           
  5877                           ;I2C.c: 36: PEN = 1;
  5878  002050  84C5               	bsf	4037,2,c	;volatile
  5879  002052  0012               	return		;funcret
  5880  002054                     __end_of_I2C_Master_Stop:
  5881                           	opt stack 0
  5882                           tblptru	equ	0xFF8
  5883                           tblptrh	equ	0xFF7
  5884                           tblptrl	equ	0xFF6
  5885                           tablat	equ	0xFF5
  5886                           prodh	equ	0xFF4
  5887                           prodl	equ	0xFF3
  5888                           intcon	equ	0xFF2
  5889                           intcon3	equ	0xFF0
  5890                           postinc0	equ	0xFEE
  5891                           wreg	equ	0xFE8
  5892                           indf2	equ	0xFDF
  5893                           postinc2	equ	0xFDE
  5894                           postdec2	equ	0xFDD
  5895                           fsr2h	equ	0xFDA
  5896                           fsr2l	equ	0xFD9
  5897                           status	equ	0xFD8
  5898                           
  5899 ;; *************** function _I2C_Master_Start *****************
  5900 ;; Defined at:
  5901 ;;		line 21 in file "../I2C.c"
  5902 ;; Parameters:    Size  Location     Type
  5903 ;;		None
  5904 ;; Auto vars:     Size  Location     Type
  5905 ;;		None
  5906 ;; Return value:  Size  Location     Type
  5907 ;;                  1    wreg      void 
  5908 ;; Registers used:
  5909 ;;		wreg, status,2, status,0, cstack
  5910 ;; Tracked objects:
  5911 ;;		On entry : 0/0
  5912 ;;		On exit  : 0/0
  5913 ;;		Unchanged: 0/0
  5914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5915 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5916 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5917 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5918 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5919 ;;Total ram usage:        0 bytes
  5920 ;; Hardware stack levels used:    1
  5921 ;; Hardware stack levels required when called:    6
  5922 ;; This function calls:
  5923 ;;		_I2C_Master_Wait
  5924 ;; This function is called by:
  5925 ;;		_main
  5926 ;; This function uses a non-reentrant model
  5927 ;;
  5928                           
  5929                           	psect	text18
  5930  002054                     __ptext18:
  5931                           	opt stack 0
  5932  002054                     _I2C_Master_Start:
  5933                           	opt stack 24
  5934                           
  5935                           ;I2C.c: 23: I2C_Master_Wait();
  5936                           
  5937                           ;incstack = 0
  5938  002054  ECF2  F00F         	call	_I2C_Master_Wait	;wreg free
  5939                           
  5940                           ;I2C.c: 24: SEN = 1;
  5941  002058  80C5               	bsf	4037,0,c	;volatile
  5942  00205A  0012               	return		;funcret
  5943  00205C                     __end_of_I2C_Master_Start:
  5944                           	opt stack 0
  5945                           tblptru	equ	0xFF8
  5946                           tblptrh	equ	0xFF7
  5947                           tblptrl	equ	0xFF6
  5948                           tablat	equ	0xFF5
  5949                           prodh	equ	0xFF4
  5950                           prodl	equ	0xFF3
  5951                           intcon	equ	0xFF2
  5952                           intcon3	equ	0xFF0
  5953                           postinc0	equ	0xFEE
  5954                           wreg	equ	0xFE8
  5955                           indf2	equ	0xFDF
  5956                           postinc2	equ	0xFDE
  5957                           postdec2	equ	0xFDD
  5958                           fsr2h	equ	0xFDA
  5959                           fsr2l	equ	0xFD9
  5960                           status	equ	0xFD8
  5961                           
  5962 ;; *************** function _I2C_Master_Read *****************
  5963 ;; Defined at:
  5964 ;;		line 45 in file "../I2C.c"
  5965 ;; Parameters:    Size  Location     Type
  5966 ;;  a               1    wreg     unsigned char 
  5967 ;; Auto vars:     Size  Location     Type
  5968 ;;  a               1   53[COMRAM] unsigned char 
  5969 ;;  temp            1   54[COMRAM] unsigned char 
  5970 ;; Return value:  Size  Location     Type
  5971 ;;                  1    wreg      unsigned char 
  5972 ;; Registers used:
  5973 ;;		wreg, status,2, status,0, cstack
  5974 ;; Tracked objects:
  5975 ;;		On entry : 0/0
  5976 ;;		On exit  : 0/0
  5977 ;;		Unchanged: 0/0
  5978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5979 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5980 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5981 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5982 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5983 ;;Total ram usage:        2 bytes
  5984 ;; Hardware stack levels used:    1
  5985 ;; Hardware stack levels required when called:    6
  5986 ;; This function calls:
  5987 ;;		_I2C_Master_Wait
  5988 ;; This function is called by:
  5989 ;;		_main
  5990 ;; This function uses a non-reentrant model
  5991 ;;
  5992                           
  5993                           	psect	text19
  5994  001F08                     __ptext19:
  5995                           	opt stack 0
  5996  001F08                     _I2C_Master_Read:
  5997                           	opt stack 24
  5998                           
  5999                           ;incstack = 0
  6000                           ;I2C_Master_Read@a stored from wreg
  6001  001F08  6E36               	movwf	I2C_Master_Read@a,c
  6002                           
  6003                           ;I2C.c: 47: unsigned char temp;
  6004                           ;I2C.c: 48: I2C_Master_Wait();
  6005  001F0A  ECF2  F00F         	call	_I2C_Master_Wait	;wreg free
  6006                           
  6007                           ;I2C.c: 49: RCEN = 1;
  6008  001F0E  86C5               	bsf	4037,3,c	;volatile
  6009                           
  6010                           ;I2C.c: 50: I2C_Master_Wait();
  6011  001F10  ECF2  F00F         	call	_I2C_Master_Wait	;wreg free
  6012                           
  6013                           ;I2C.c: 51: temp = SSPBUF;
  6014  001F14  CFC9 F037          	movff	4041,I2C_Master_Read@temp	;volatile
  6015                           
  6016                           ;I2C.c: 52: I2C_Master_Wait();
  6017  001F18  ECF2  F00F         	call	_I2C_Master_Wait	;wreg free
  6018                           
  6019                           ;I2C.c: 53: ACKDT = (a)?0:1;
  6020  001F1C  5036               	movf	I2C_Master_Read@a,w,c
  6021  001F1E  A4D8               	btfss	status,2,c
  6022  001F20  D002               	goto	u3260
  6023  001F22  8AC5               	bsf	4037,5,c	;volatile
  6024  001F24  D001               	goto	l3436
  6025  001F26                     u3260:
  6026  001F26  9AC5               	bcf	4037,5,c	;volatile
  6027  001F28                     l3436:
  6028                           
  6029                           ;I2C.c: 54: ACKEN = 1;
  6030  001F28  88C5               	bsf	4037,4,c	;volatile
  6031                           
  6032                           ;I2C.c: 55: return temp;
  6033  001F2A  5037               	movf	I2C_Master_Read@temp,w,c
  6034  001F2C  0012               	return	
  6035  001F2E                     __end_of_I2C_Master_Read:
  6036                           	opt stack 0
  6037                           tblptru	equ	0xFF8
  6038                           tblptrh	equ	0xFF7
  6039                           tblptrl	equ	0xFF6
  6040                           tablat	equ	0xFF5
  6041                           prodh	equ	0xFF4
  6042                           prodl	equ	0xFF3
  6043                           intcon	equ	0xFF2
  6044                           intcon3	equ	0xFF0
  6045                           postinc0	equ	0xFEE
  6046                           wreg	equ	0xFE8
  6047                           indf2	equ	0xFDF
  6048                           postinc2	equ	0xFDE
  6049                           postdec2	equ	0xFDD
  6050                           fsr2h	equ	0xFDA
  6051                           fsr2l	equ	0xFD9
  6052                           status	equ	0xFD8
  6053                           
  6054 ;; *************** function _I2C_Master_Wait *****************
  6055 ;; Defined at:
  6056 ;;		line 16 in file "../I2C.c"
  6057 ;; Parameters:    Size  Location     Type
  6058 ;;		None
  6059 ;; Auto vars:     Size  Location     Type
  6060 ;;		None
  6061 ;; Return value:  Size  Location     Type
  6062 ;;                  1    wreg      void 
  6063 ;; Registers used:
  6064 ;;		wreg, status,2, status,0
  6065 ;; Tracked objects:
  6066 ;;		On entry : 0/0
  6067 ;;		On exit  : 0/0
  6068 ;;		Unchanged: 0/0
  6069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6070 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6071 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6072 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6073 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6074 ;;Total ram usage:        1 bytes
  6075 ;; Hardware stack levels used:    1
  6076 ;; Hardware stack levels required when called:    5
  6077 ;; This function calls:
  6078 ;;		Nothing
  6079 ;; This function is called by:
  6080 ;;		_I2C_Master_Start
  6081 ;;		_I2C_Master_Stop
  6082 ;;		_I2C_Master_Write
  6083 ;;		_I2C_Master_Read
  6084 ;; This function uses a non-reentrant model
  6085 ;;
  6086                           
  6087                           	psect	text20
  6088  001FE4                     __ptext20:
  6089                           	opt stack 0
  6090  001FE4                     _I2C_Master_Wait:
  6091                           	opt stack 24
  6092  001FE4                     l30:
  6093  001FE4  B4C7               	btfsc	4039,2,c	;volatile
  6094  001FE6  D7FE               	goto	l30
  6095  001FE8  CFC5 F035          	movff	4037,??_I2C_Master_Wait	;volatile
  6096  001FEC  0E1F               	movlw	31
  6097  001FEE  1635               	andwf	??_I2C_Master_Wait,f,c
  6098  001FF0  B4D8               	btfsc	status,2,c
  6099  001FF2  0012               	return	
  6100  001FF4  D7F7               	goto	l30
  6101  001FF6                     __end_of_I2C_Master_Wait:
  6102                           	opt stack 0
  6103                           tblptru	equ	0xFF8
  6104                           tblptrh	equ	0xFF7
  6105                           tblptrl	equ	0xFF6
  6106                           tablat	equ	0xFF5
  6107                           prodh	equ	0xFF4
  6108                           prodl	equ	0xFF3
  6109                           intcon	equ	0xFF2
  6110                           intcon3	equ	0xFF0
  6111                           postinc0	equ	0xFEE
  6112                           wreg	equ	0xFE8
  6113                           indf2	equ	0xFDF
  6114                           postinc2	equ	0xFDE
  6115                           postdec2	equ	0xFDD
  6116                           fsr2h	equ	0xFDA
  6117                           fsr2l	equ	0xFD9
  6118                           status	equ	0xFD8
  6119                           
  6120 ;; *************** function _I2C_Master_Init *****************
  6121 ;; Defined at:
  6122 ;;		line 5 in file "../I2C.c"
  6123 ;; Parameters:    Size  Location     Type
  6124 ;;  c               4    5[BANK0 ] const unsigned long 
  6125 ;; Auto vars:     Size  Location     Type
  6126 ;;		None
  6127 ;; Return value:  Size  Location     Type
  6128 ;;                  1    wreg      void 
  6129 ;; Registers used:
  6130 ;;		wreg, status,2, status,0, cstack
  6131 ;; Tracked objects:
  6132 ;;		On entry : 0/0
  6133 ;;		On exit  : 0/0
  6134 ;;		Unchanged: 0/0
  6135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6136 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6137 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6138 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6139 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6140 ;;Total ram usage:        8 bytes
  6141 ;; Hardware stack levels used:    1
  6142 ;; Hardware stack levels required when called:    6
  6143 ;; This function calls:
  6144 ;;		___lldiv
  6145 ;; This function is called by:
  6146 ;;		_main
  6147 ;; This function uses a non-reentrant model
  6148 ;;
  6149                           
  6150                           	psect	text21
  6151  001C3E                     __ptext21:
  6152                           	opt stack 0
  6153  001C3E                     _I2C_Master_Init:
  6154                           	opt stack 24
  6155                           
  6156                           ;I2C.c: 8: SSPSTAT = 0b00000000;
  6157                           
  6158                           ;incstack = 0
  6159  001C3E  0E00               	movlw	0
  6160  001C40  6EC7               	movwf	4039,c	;volatile
  6161                           
  6162                           ;I2C.c: 9: SSPCON1 = 0b00101000;
  6163  001C42  0E28               	movlw	40
  6164  001C44  6EC6               	movwf	4038,c	;volatile
  6165                           
  6166                           ;I2C.c: 10: SSPCON2 = 0b00000000;
  6167  001C46  0E00               	movlw	0
  6168  001C48  6EC5               	movwf	4037,c	;volatile
  6169                           
  6170                           ;I2C.c: 11: SSPADD = (10000000/(4*c))-1;
  6171  001C4A  0E80               	movlw	128
  6172  001C4C  6E35               	movwf	___lldiv@dividend,c
  6173  001C4E  0E96               	movlw	150
  6174  001C50  6E36               	movwf	___lldiv@dividend+1,c
  6175  001C52  0E98               	movlw	152
  6176  001C54  6E37               	movwf	___lldiv@dividend+2,c
  6177  001C56  0E00               	movlw	0
  6178  001C58  6E38               	movwf	___lldiv@dividend+3,c
  6179  001C5A  C085  F089         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  6180  001C5E  C086  F08A         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  6181  001C62  C087  F08B         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  6182  001C66  C088  F08C         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  6183  001C6A  0E02               	movlw	2
  6184  001C6C                     u5095:
  6185  001C6C  90D8               	bcf	status,0,c
  6186  001C6E  0100               	movlb	0	; () banked
  6187  001C70  3789               	rlcf	??_I2C_Master_Init& (0+255),f,b
  6188  001C72  378A               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  6189  001C74  378B               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  6190  001C76  378C               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  6191  001C78  2EE8               	decfsz	wreg,f,c
  6192  001C7A  D7F8               	goto	u5095
  6193  001C7C  C089  F039         	movff	??_I2C_Master_Init,___lldiv@divisor
  6194  001C80  C08A  F03A         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  6195  001C84  C08B  F03B         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  6196  001C88  C08C  F03C         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  6197  001C8C  ECE4  F00C         	call	___lldiv	;wreg free
  6198  001C90  0435               	decf	?___lldiv,w,c
  6199  001C92  6EC8               	movwf	4040,c	;volatile
  6200                           
  6201                           ;I2C.c: 12: TRISC3 = 1;
  6202  001C94  8694               	bsf	3988,3,c	;volatile
  6203                           
  6204                           ;I2C.c: 13: TRISC4 = 1;
  6205  001C96  8894               	bsf	3988,4,c	;volatile
  6206  001C98  0012               	return		;funcret
  6207  001C9A                     __end_of_I2C_Master_Init:
  6208                           	opt stack 0
  6209                           tblptru	equ	0xFF8
  6210                           tblptrh	equ	0xFF7
  6211                           tblptrl	equ	0xFF6
  6212                           tablat	equ	0xFF5
  6213                           prodh	equ	0xFF4
  6214                           prodl	equ	0xFF3
  6215                           intcon	equ	0xFF2
  6216                           intcon3	equ	0xFF0
  6217                           postinc0	equ	0xFEE
  6218                           wreg	equ	0xFE8
  6219                           indf2	equ	0xFDF
  6220                           postinc2	equ	0xFDE
  6221                           postdec2	equ	0xFDD
  6222                           fsr2h	equ	0xFDA
  6223                           fsr2l	equ	0xFD9
  6224                           status	equ	0xFD8
  6225                           
  6226 ;; *************** function ___lldiv *****************
  6227 ;; Defined at:
  6228 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  6229 ;; Parameters:    Size  Location     Type
  6230 ;;  dividend        4   52[COMRAM] unsigned long 
  6231 ;;  divisor         4   56[COMRAM] unsigned long 
  6232 ;; Auto vars:     Size  Location     Type
  6233 ;;  quotient        4    0[BANK0 ] unsigned long 
  6234 ;;  counter         1    4[BANK0 ] unsigned char 
  6235 ;; Return value:  Size  Location     Type
  6236 ;;                  4   52[COMRAM] unsigned long 
  6237 ;; Registers used:
  6238 ;;		wreg, status,2, status,0
  6239 ;; Tracked objects:
  6240 ;;		On entry : 0/0
  6241 ;;		On exit  : 0/0
  6242 ;;		Unchanged: 0/0
  6243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6244 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6245 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6246 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6247 ;;      Totals:         8       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6248 ;;Total ram usage:       13 bytes
  6249 ;; Hardware stack levels used:    1
  6250 ;; Hardware stack levels required when called:    5
  6251 ;; This function calls:
  6252 ;;		Nothing
  6253 ;; This function is called by:
  6254 ;;		_I2C_Master_Init
  6255 ;; This function uses a non-reentrant model
  6256 ;;
  6257                           
  6258                           	psect	text22
  6259  0019C8                     __ptext22:
  6260                           	opt stack 0
  6261  0019C8                     ___lldiv:
  6262                           	opt stack 24
  6263                           
  6264                           ;incstack = 0
  6265  0019C8  0E00               	movlw	0
  6266  0019CA  0100               	movlb	0	; () banked
  6267  0019CC  6F80               	movwf	___lldiv@quotient& (0+255),b
  6268  0019CE  0E00               	movlw	0
  6269  0019D0  6F81               	movwf	(___lldiv@quotient+1)& (0+255),b
  6270  0019D2  0E00               	movlw	0
  6271  0019D4  6F82               	movwf	(___lldiv@quotient+2)& (0+255),b
  6272  0019D6  0E00               	movlw	0
  6273  0019D8  6F83               	movwf	(___lldiv@quotient+3)& (0+255),b
  6274                           
  6275                           ; BSR set to: 0
  6276  0019DA  5039               	movf	___lldiv@divisor,w,c
  6277  0019DC  103A               	iorwf	___lldiv@divisor+1,w,c
  6278  0019DE  103B               	iorwf	___lldiv@divisor+2,w,c
  6279  0019E0  103C               	iorwf	___lldiv@divisor+3,w,c
  6280  0019E2  B4D8               	btfsc	status,2,c
  6281  0019E4  D02F               	goto	l862
  6282                           
  6283                           ; BSR set to: 0
  6284  0019E6  0E01               	movlw	1
  6285  0019E8  0100               	movlb	0	; () banked
  6286  0019EA  6F84               	movwf	___lldiv@counter& (0+255),b
  6287  0019EC  D007               	goto	l4502
  6288  0019EE                     l4500:
  6289                           
  6290                           ; BSR set to: 0
  6291  0019EE  90D8               	bcf	status,0,c
  6292  0019F0  3639               	rlcf	___lldiv@divisor,f,c
  6293  0019F2  363A               	rlcf	___lldiv@divisor+1,f,c
  6294  0019F4  363B               	rlcf	___lldiv@divisor+2,f,c
  6295  0019F6  363C               	rlcf	___lldiv@divisor+3,f,c
  6296  0019F8  0100               	movlb	0	; () banked
  6297  0019FA  2B84               	incf	___lldiv@counter& (0+255),f,b
  6298  0019FC                     l4502:
  6299                           
  6300                           ; BSR set to: 0
  6301  0019FC  AE3C               	btfss	___lldiv@divisor+3,7,c
  6302  0019FE  D7F7               	goto	l4500
  6303  001A00                     l4504:
  6304                           
  6305                           ; BSR set to: 0
  6306  001A00  0100               	movlb	0	; () banked
  6307  001A02  90D8               	bcf	status,0,c
  6308  001A04  3780               	rlcf	___lldiv@quotient& (0+255),f,b
  6309  001A06  3781               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  6310  001A08  3782               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  6311  001A0A  3783               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  6312                           
  6313                           ; BSR set to: 0
  6314  001A0C  5039               	movf	___lldiv@divisor,w,c
  6315  001A0E  5C35               	subwf	___lldiv@dividend,w,c
  6316  001A10  503A               	movf	___lldiv@divisor+1,w,c
  6317  001A12  5836               	subwfb	___lldiv@dividend+1,w,c
  6318  001A14  503B               	movf	___lldiv@divisor+2,w,c
  6319  001A16  5837               	subwfb	___lldiv@dividend+2,w,c
  6320  001A18  503C               	movf	___lldiv@divisor+3,w,c
  6321  001A1A  5838               	subwfb	___lldiv@dividend+3,w,c
  6322  001A1C  A0D8               	btfss	status,0,c
  6323  001A1E  D00A               	goto	l4512
  6324                           
  6325                           ; BSR set to: 0
  6326  001A20  5039               	movf	___lldiv@divisor,w,c
  6327  001A22  5E35               	subwf	___lldiv@dividend,f,c
  6328  001A24  503A               	movf	___lldiv@divisor+1,w,c
  6329  001A26  5A36               	subwfb	___lldiv@dividend+1,f,c
  6330  001A28  503B               	movf	___lldiv@divisor+2,w,c
  6331  001A2A  5A37               	subwfb	___lldiv@dividend+2,f,c
  6332  001A2C  503C               	movf	___lldiv@divisor+3,w,c
  6333  001A2E  5A38               	subwfb	___lldiv@dividend+3,f,c
  6334                           
  6335                           ; BSR set to: 0
  6336  001A30  0100               	movlb	0	; () banked
  6337  001A32  8180               	bsf	___lldiv@quotient& (0+255),0,b
  6338  001A34                     l4512:
  6339                           
  6340                           ; BSR set to: 0
  6341  001A34  90D8               	bcf	status,0,c
  6342  001A36  323C               	rrcf	___lldiv@divisor+3,f,c
  6343  001A38  323B               	rrcf	___lldiv@divisor+2,f,c
  6344  001A3A  323A               	rrcf	___lldiv@divisor+1,f,c
  6345  001A3C  3239               	rrcf	___lldiv@divisor,f,c
  6346                           
  6347                           ; BSR set to: 0
  6348  001A3E  0100               	movlb	0	; () banked
  6349  001A40  2F84               	decfsz	___lldiv@counter& (0+255),f,b
  6350  001A42  D7DE               	goto	l4504
  6351  001A44                     l862:
  6352                           
  6353                           ; BSR set to: 0
  6354  001A44  C080  F035         	movff	___lldiv@quotient,?___lldiv
  6355  001A48  C081  F036         	movff	___lldiv@quotient+1,?___lldiv+1
  6356  001A4C  C082  F037         	movff	___lldiv@quotient+2,?___lldiv+2
  6357  001A50  C083  F038         	movff	___lldiv@quotient+3,?___lldiv+3
  6358                           
  6359                           ; BSR set to: 0
  6360  001A54  0012               	return		;funcret
  6361  001A56                     __end_of___lldiv:
  6362                           	opt stack 0
  6363                           tblptru	equ	0xFF8
  6364                           tblptrh	equ	0xFF7
  6365                           tblptrl	equ	0xFF6
  6366                           tablat	equ	0xFF5
  6367                           prodh	equ	0xFF4
  6368                           prodl	equ	0xFF3
  6369                           intcon	equ	0xFF2
  6370                           intcon3	equ	0xFF0
  6371                           postinc0	equ	0xFEE
  6372                           wreg	equ	0xFE8
  6373                           indf2	equ	0xFDF
  6374                           postinc2	equ	0xFDE
  6375                           postdec2	equ	0xFDD
  6376                           fsr2h	equ	0xFDA
  6377                           fsr2l	equ	0xFD9
  6378                           status	equ	0xFD8
  6379                           
  6380 ;; *************** function _ISR *****************
  6381 ;; Defined at:
  6382 ;;		line 582 in file "../main.c"
  6383 ;; Parameters:    Size  Location     Type
  6384 ;;		None
  6385 ;; Auto vars:     Size  Location     Type
  6386 ;;  keypress        1   51[COMRAM] unsigned char 
  6387 ;; Return value:  Size  Location     Type
  6388 ;;                  1    wreg      void 
  6389 ;; Registers used:
  6390 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6391 ;; Tracked objects:
  6392 ;;		On entry : 0/0
  6393 ;;		On exit  : 0/0
  6394 ;;		Unchanged: 0/0
  6395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6396 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6397 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6398 ;;      Temps:         15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6399 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6400 ;;Total ram usage:       16 bytes
  6401 ;; Hardware stack levels used:    1
  6402 ;; Hardware stack levels required when called:    4
  6403 ;; This function calls:
  6404 ;;		_switchMenu
  6405 ;;		i2___awdiv
  6406 ;;		i2___awmod
  6407 ;;		i2_lcdInst
  6408 ;;		i2_printf
  6409 ;;		i2_stopOperation
  6410 ;; This function is called by:
  6411 ;;		Interrupt level 2
  6412 ;; This function uses a non-reentrant model
  6413 ;;
  6414                           
  6415                           	psect	intcode
  6416  000008                     __pintcode:
  6417                           	opt stack 0
  6418  000008                     _ISR:
  6419                           	opt stack 23
  6420                           
  6421                           ; BSR set to: 0
  6422                           ;incstack = 0
  6423  000008  824B               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6424  00000A  EDCE  F004         	call	int_func,f	;refresh shadow registers
  6425                           tblptru	equ	0xFF8
  6426                           tblptrh	equ	0xFF7
  6427                           tblptrl	equ	0xFF6
  6428                           tablat	equ	0xFF5
  6429                           prodh	equ	0xFF4
  6430                           prodl	equ	0xFF3
  6431                           intcon	equ	0xFF2
  6432                           intcon3	equ	0xFF0
  6433                           postinc0	equ	0xFEE
  6434                           wreg	equ	0xFE8
  6435                           indf2	equ	0xFDF
  6436                           postinc2	equ	0xFDE
  6437                           postdec2	equ	0xFDD
  6438                           fsr2h	equ	0xFDA
  6439                           fsr2l	equ	0xFD9
  6440                           status	equ	0xFD8
  6441                           
  6442                           	psect	intcode_body
  6443  00099C                     __pintcode_body:
  6444                           	opt stack 23
  6445  00099C                     int_func:
  6446                           	opt stack 23
  6447  00099C  0006               	pop		; remove dummy address from shadow register refresh
  6448  00099E  CFFA F026          	movff	pclath,??_ISR+1
  6449  0009A2  CFFB F027          	movff	pclatu,??_ISR+2
  6450  0009A6  CFE9 F028          	movff	fsr0l,??_ISR+3
  6451  0009AA  CFEA F029          	movff	fsr0h,??_ISR+4
  6452  0009AE  CFE1 F02A          	movff	fsr1l,??_ISR+5
  6453  0009B2  CFE2 F02B          	movff	fsr1h,??_ISR+6
  6454  0009B6  CFD9 F02C          	movff	fsr2l,??_ISR+7
  6455  0009BA  CFDA F02D          	movff	fsr2h,??_ISR+8
  6456  0009BE  CFF3 F02E          	movff	prodl,??_ISR+9
  6457  0009C2  CFF4 F02F          	movff	prodh,??_ISR+10
  6458  0009C6  CFF6 F030          	movff	tblptrl,??_ISR+11
  6459  0009CA  CFF7 F031          	movff	tblptrh,??_ISR+12
  6460  0009CE  CFF8 F032          	movff	tblptru,??_ISR+13
  6461  0009D2  CFF5 F033          	movff	tablat,??_ISR+14
  6462                           
  6463                           ;main.c: 583: if (INT1IF){
  6464  0009D6  A0F0               	btfss	intcon3,0,c	;volatile
  6465  0009D8  D015               	goto	i2l4250
  6466                           
  6467                           ;main.c: 584: unsigned char keypress = (PORTB & 0xF0) >> 4;
  6468  0009DA  3881               	swapf	3969,w,c	;volatile
  6469  0009DC  0B0F               	andlw	15
  6470  0009DE  0B0F               	andlw	15
  6471  0009E0  6E34               	movwf	ISR@keypress,c
  6472                           
  6473                           ;main.c: 585: switchMenu('4', '6', keys[keypress]);
  6474  0009E2  0E36               	movlw	54
  6475  0009E4  6E21               	movwf	switchMenu@right,c
  6476  0009E6  5034               	movf	ISR@keypress,w,c
  6477  0009E8  0D01               	mullw	1
  6478  0009EA  0E07               	movlw	low _keys
  6479  0009EC  24F3               	addwf	prodl,w,c
  6480  0009EE  6EF6               	movwf	tblptrl,c
  6481  0009F0  0EFE               	movlw	high _keys
  6482  0009F2  20F4               	addwfc	prodh,w,c
  6483  0009F4  6EF7               	movwf	tblptrh,c
  6484  0009F6                     	if	0	;There are less than 3 active tblptr bytes
  6485  0009F6                     	endif
  6486  0009F6  0008               	tblrd		*
  6487  0009F8  CFF5 F022          	movff	tablat,switchMenu@key
  6488  0009FC  0E34               	movlw	52
  6489  0009FE  EC56  F00B         	call	_switchMenu
  6490                           
  6491                           ;main.c: 586: INT1IF = 0;
  6492  000A02  90F0               	bcf	intcon3,0,c	;volatile
  6493  000A04                     i2l4250:
  6494                           
  6495                           ;main.c: 587: }
  6496                           ;main.c: 588: if (screenMode == 1 && TMR0IF){
  6497  000A04  0100               	movlb	0	; () banked
  6498  000A06  05D1               	decf	_screenMode& (0+255),w,b
  6499  000A08  B4D8               	btfsc	status,2,c
  6500                           
  6501                           ; BSR set to: 0
  6502  000A0A  A4F2               	btfss	intcon,2,c	;volatile
  6503  000A0C  D04D               	goto	i2l4290
  6504                           
  6505                           ; BSR set to: 0
  6506                           ;main.c: 589: TMR0IF = 0;
  6507  000A0E  94F2               	bcf	intcon,2,c	;volatile
  6508                           
  6509                           ; BSR set to: 0
  6510                           ;main.c: 590: TMR0 = 55770;
  6511  000A10  0ED9               	movlw	217
  6512  000A12  6ED7               	movwf	4055,c	;volatile
  6513  000A14  0EDA               	movlw	218
  6514  000A16  6ED6               	movwf	4054,c	;volatile
  6515                           
  6516                           ; BSR set to: 0
  6517                           ;main.c: 591: opTimer++;
  6518  000A18  2A46               	incf	_opTimer,f,c
  6519                           
  6520                           ; BSR set to: 0
  6521                           ;main.c: 592: min = opTimer / 60;
  6522  000A1A  C046  F001         	movff	_opTimer,i2___awdiv@dividend
  6523  000A1E  6A02               	clrf	i2___awdiv@dividend+1,c
  6524  000A20  0E00               	movlw	0
  6525  000A22  6E04               	movwf	i2___awdiv@divisor+1,c
  6526  000A24  0E3C               	movlw	60
  6527  000A26  6E03               	movwf	i2___awdiv@divisor,c
  6528  000A28  EC6D  F00D         	call	i2___awdiv	;wreg free
  6529  000A2C  5001               	movf	?i2___awdiv,w,c
  6530  000A2E  0100               	movlb	0	; () banked
  6531  000A30  6FC4               	movwf	_min& (0+255),b
  6532                           
  6533                           ; BSR set to: 0
  6534                           ;main.c: 593: sec = opTimer % 60;
  6535  000A32  C046  F001         	movff	_opTimer,i2___awmod@dividend
  6536  000A36  6A02               	clrf	i2___awmod@dividend+1,c
  6537  000A38  0E00               	movlw	0
  6538  000A3A  6E04               	movwf	i2___awmod@divisor+1,c
  6539  000A3C  0E3C               	movlw	60
  6540  000A3E  6E03               	movwf	i2___awmod@divisor,c
  6541  000A40  ECE7  F00D         	call	i2___awmod	;wreg free
  6542  000A44  5001               	movf	?i2___awmod,w,c
  6543  000A46  0100               	movlb	0	; () banked
  6544  000A48  6FCA               	movwf	_sec& (0+255),b
  6545                           
  6546                           ; BSR set to: 0
  6547                           ;main.c: 594: lcdInst(0b10000000);;
  6548  000A4A  0E80               	movlw	128
  6549  000A4C  EC16  F010         	call	i2_lcdInst
  6550                           
  6551                           ;main.c: 595: printf("RUNNING: %02d:%02d   ", min, sec);
  6552  000A50  0E9F               	movlw	low STR_27
  6553  000A52  6E0D               	movwf	i2printf@f,c
  6554  000A54  0EFE               	movlw	high STR_27
  6555  000A56  6E0E               	movwf	i2printf@f+1,c
  6556  000A58  C0C4  F00F         	movff	_min,?i2_printf+2
  6557  000A5C  6A10               	clrf	?i2_printf+3,c
  6558  000A5E  C0CA  F011         	movff	_sec,?i2_printf+4
  6559  000A62  6A12               	clrf	?i2_printf+5,c
  6560  000A64  ECE3  F008         	call	i2_printf	;wreg free
  6561                           
  6562                           ;main.c: 596: if (opTimer >= 180){
  6563  000A68  0EB3               	movlw	179
  6564  000A6A  6446               	cpfsgt	_opTimer,c
  6565  000A6C  D005               	goto	i2l4274
  6566                           
  6567                           ;main.c: 597: screenMode = 0;
  6568  000A6E  0E00               	movlw	0
  6569  000A70  0100               	movlb	0	; () banked
  6570  000A72  6FD1               	movwf	_screenMode& (0+255),b
  6571                           
  6572                           ; BSR set to: 0
  6573                           ;main.c: 598: stopOperation();
  6574  000A74  EC62  F00C         	call	i2_stopOperation	;wreg free
  6575  000A78                     i2l4274:
  6576                           
  6577                           ;main.c: 599: }
  6578                           ;main.c: 601: if (!sorting){
  6579  000A78  5048               	movf	_sorting,w,c
  6580  000A7A  A4D8               	btfss	status,2,c
  6581  000A7C  D013               	goto	i2l4288
  6582                           
  6583                           ;main.c: 602: if (ADRES > 50)
  6584  000A7E  50C4               	movf	4036,w,c	;volatile
  6585  000A80  E104               	bnz	i2u444_40
  6586  000A82  0E33               	movlw	51
  6587  000A84  5CC3               	subwf	4035,w,c	;volatile
  6588  000A86  A0D8               	btfss	status,0,c
  6589  000A88  D002               	goto	i2l4280
  6590  000A8A                     i2u444_40:
  6591                           
  6592                           ;main.c: 603: doneTimer++;
  6593  000A8A  2A44               	incf	_doneTimer,f,c
  6594  000A8C  D002               	goto	i2l4282
  6595  000A8E                     i2l4280:
  6596                           
  6597                           ;main.c: 604: else
  6598                           ;main.c: 605: doneTimer = 0;
  6599  000A8E  0E00               	movlw	0
  6600  000A90  6E44               	movwf	_doneTimer,c
  6601  000A92                     i2l4282:
  6602                           
  6603                           ;main.c: 606: if (doneTimer >= 10){
  6604  000A92  0E09               	movlw	9
  6605  000A94  6444               	cpfsgt	_doneTimer,c
  6606  000A96  D008               	goto	i2l4290
  6607                           
  6608                           ;main.c: 607: screenMode = 0;
  6609  000A98  0E00               	movlw	0
  6610  000A9A  0100               	movlb	0	; () banked
  6611  000A9C  6FD1               	movwf	_screenMode& (0+255),b
  6612                           
  6613                           ; BSR set to: 0
  6614                           ;main.c: 608: stopOperation();
  6615  000A9E  EC62  F00C         	call	i2_stopOperation	;wreg free
  6616                           
  6617                           ;main.c: 609: }
  6618                           ;main.c: 610: }
  6619  000AA2  D002               	goto	i2l4290
  6620  000AA4                     i2l4288:
  6621                           
  6622                           ;main.c: 611: else
  6623                           ;main.c: 612: doneTimer = 0;
  6624  000AA4  0E00               	movlw	0
  6625  000AA6  6E44               	movwf	_doneTimer,c
  6626  000AA8                     i2l4290:
  6627                           
  6628                           ;main.c: 613: }
  6629                           ;main.c: 614: if (screenMode == 1 && TMR1IF){
  6630  000AA8  0100               	movlb	0	; () banked
  6631  000AAA  05D1               	decf	_screenMode& (0+255),w,b
  6632  000AAC  B4D8               	btfsc	status,2,c
  6633                           
  6634                           ; BSR set to: 0
  6635  000AAE  A09E               	btfss	3998,0,c	;volatile
  6636  000AB0  D196               	goto	i2l438
  6637                           
  6638                           ; BSR set to: 0
  6639                           ;main.c: 615: TMR1IF = 0;
  6640  000AB2  909E               	bcf	3998,0,c	;volatile
  6641                           
  6642                           ; BSR set to: 0
  6643                           ;main.c: 616: TMR1 = 58035;
  6644  000AB4  0EE2               	movlw	226
  6645  000AB6  6ECF               	movwf	4047,c	;volatile
  6646  000AB8  0EB3               	movlw	179
  6647  000ABA  6ECE               	movwf	4046,c	;volatile
  6648                           
  6649                           ; BSR set to: 0
  6650                           ;main.c: 617: if (count_3ms)
  6651  000ABC  5040               	movf	_count_3ms,w,c
  6652  000ABE  1041               	iorwf	_count_3ms+1,w,c
  6653  000AC0  B4D8               	btfsc	status,2,c
  6654  000AC2  D003               	goto	i2l387
  6655                           
  6656                           ; BSR set to: 0
  6657                           ;main.c: 618: count_3ms--;
  6658  000AC4  0640               	decf	_count_3ms,f,c
  6659  000AC6  A0D8               	btfss	status,0,c
  6660  000AC8  0641               	decf	_count_3ms+1,f,c
  6661  000ACA                     i2l387:
  6662                           
  6663                           ; BSR set to: 0
  6664                           ;main.c: 619: solOnTimer++;
  6665  000ACA  2A47               	incf	_solOnTimer,f,c
  6666                           
  6667                           ; BSR set to: 0
  6668                           ;main.c: 620: if (solOnTimer >= 133){
  6669  000ACC  0E84               	movlw	132
  6670  000ACE  6447               	cpfsgt	_solOnTimer,c
  6671  000AD0  D00D               	goto	i2l4308
  6672                           
  6673                           ; BSR set to: 0
  6674                           ;main.c: 621: solOnTimer = 0;
  6675  000AD2  0E00               	movlw	0
  6676  000AD4  6E47               	movwf	_solOnTimer,c
  6677                           
  6678                           ; BSR set to: 0
  6679                           ;main.c: 622: LATBbits.LB0 = !LATBbits.LB0;;
  6680  000AD6  B08A               	btfsc	3978,0,c	;volatile
  6681  000AD8  D003               	goto	i2u450_40
  6682  000ADA  6A25               	clrf	??_ISR& (0+255),c
  6683  000ADC  2A25               	incf	??_ISR& (0+255),f,c
  6684  000ADE  D001               	goto	i2u451_48
  6685  000AE0                     i2u450_40:
  6686  000AE0  6A25               	clrf	??_ISR& (0+255),c
  6687  000AE2                     i2u451_48:
  6688  000AE2  508A               	movf	3978,w,c	;volatile
  6689  000AE4  1825               	xorwf	??_ISR,w,c
  6690  000AE6  0BFE               	andlw	-2
  6691  000AE8  1825               	xorwf	??_ISR,w,c
  6692  000AEA  6E8A               	movwf	3978,c	;volatile
  6693  000AEC                     i2l4308:
  6694                           
  6695                           ;main.c: 623: }
  6696                           ;main.c: 624: if (stepGear != 0){
  6697  000AEC  0100               	movlb	0	; () banked
  6698  000AEE  51CC               	movf	_stepGear& (0+255),w,b
  6699  000AF0  B4D8               	btfsc	status,2,c
  6700  000AF2  D0D5               	goto	i2l4390
  6701                           
  6702                           ; BSR set to: 0
  6703                           ;main.c: 625: if (stepGear == 1){
  6704  000AF4  0100               	movlb	0	; () banked
  6705  000AF6  05CC               	decf	_stepGear& (0+255),w,b
  6706  000AF8  A4D8               	btfss	status,2,c
  6707  000AFA  D016               	goto	i2l4320
  6708                           
  6709                           ; BSR set to: 0
  6710                           ;main.c: 626: stepAmount++;
  6711  000AFC  4A42               	infsnz	_stepAmount,f,c
  6712  000AFE  2A43               	incf	_stepAmount+1,f,c
  6713                           
  6714                           ; BSR set to: 0
  6715                           ;main.c: 627: LATDbits.LD1 = !LATDbits.LD1;;
  6716  000B00  B28C               	btfsc	3980,1,c	;volatile
  6717  000B02  D003               	goto	i2u454_40
  6718  000B04  6A25               	clrf	??_ISR& (0+255),c
  6719  000B06  2A25               	incf	??_ISR& (0+255),f,c
  6720  000B08  D001               	goto	i2u455_48
  6721  000B0A                     i2u454_40:
  6722  000B0A  6A25               	clrf	??_ISR& (0+255),c
  6723  000B0C                     i2u455_48:
  6724  000B0C  4625               	rlncf	??_ISR,f,c
  6725  000B0E  508C               	movf	3980,w,c	;volatile
  6726  000B10  1825               	xorwf	??_ISR,w,c
  6727  000B12  0BFD               	andlw	-3
  6728  000B14  1825               	xorwf	??_ISR,w,c
  6729  000B16  6E8C               	movwf	3980,c	;volatile
  6730                           
  6731                           ;main.c: 628: if (stepAmount >= 380){
  6732  000B18  0E7C               	movlw	124
  6733  000B1A  5C42               	subwf	_stepAmount,w,c
  6734  000B1C  0E01               	movlw	1
  6735  000B1E  5843               	subwfb	_stepAmount+1,w,c
  6736  000B20  A0D8               	btfss	status,0,c
  6737  000B22  D0BD               	goto	i2l4390
  6738                           
  6739                           ;main.c: 629: stepGear = 2;
  6740  000B24  0E02               	movlw	2
  6741  000B26  D012               	goto	L4
  6742  000B28                     i2l4320:
  6743                           
  6744                           ; BSR set to: 0
  6745                           ;main.c: 632: else if (stepGear == 2){
  6746  000B28  0E02               	movlw	2
  6747  000B2A  0100               	movlb	0	; () banked
  6748  000B2C  19CC               	xorwf	_stepGear& (0+255),w,b
  6749  000B2E  A4D8               	btfss	status,2,c
  6750  000B30  D010               	goto	i2l4328
  6751                           
  6752                           ; BSR set to: 0
  6753                           ;main.c: 633: stepAmount++;
  6754  000B32  4A42               	infsnz	_stepAmount,f,c
  6755  000B34  2A43               	incf	_stepAmount+1,f,c
  6756                           
  6757                           ; BSR set to: 0
  6758                           ;main.c: 634: if (stepAmount >= 100){
  6759  000B36  5043               	movf	_stepAmount+1,w,c
  6760  000B38  E104               	bnz	i2u458_40
  6761  000B3A  0E64               	movlw	100
  6762  000B3C  5C42               	subwf	_stepAmount,w,c
  6763  000B3E  A0D8               	btfss	status,0,c
  6764  000B40  D0AE               	goto	i2l4390
  6765  000B42                     i2u458_40:
  6766                           
  6767                           ; BSR set to: 0
  6768                           ;main.c: 635: stepAmount = 0;
  6769  000B42  0E00               	movlw	0
  6770  000B44  6E43               	movwf	_stepAmount+1,c
  6771  000B46  0E00               	movlw	0
  6772  000B48  6E42               	movwf	_stepAmount,c
  6773                           
  6774                           ;main.c: 636: stepGear = 3;
  6775  000B4A  0E03               	movlw	3
  6776  000B4C                     L4:
  6777  000B4C  0100               	movlb	0	; () banked
  6778  000B4E  6FCC               	movwf	_stepGear& (0+255),b
  6779                           
  6780                           ; BSR set to: 0
  6781                           ;main.c: 637: }
  6782                           ;main.c: 638: }
  6783  000B50  D0A6               	goto	i2l4390
  6784  000B52                     i2l4328:
  6785                           
  6786                           ; BSR set to: 0
  6787                           ;main.c: 639: else if (stepGear == 3){
  6788  000B52  0E03               	movlw	3
  6789  000B54  0100               	movlb	0	; () banked
  6790  000B56  19CC               	xorwf	_stepGear& (0+255),w,b
  6791  000B58  A4D8               	btfss	status,2,c
  6792  000B5A  D01C               	goto	i2l4340
  6793                           
  6794                           ; BSR set to: 0
  6795                           ;main.c: 640: stepAmount++;
  6796  000B5C  4A42               	infsnz	_stepAmount,f,c
  6797  000B5E  2A43               	incf	_stepAmount+1,f,c
  6798                           
  6799                           ; BSR set to: 0
  6800                           ;main.c: 641: LATDbits.LD1 = !LATDbits.LD1;;
  6801  000B60  B28C               	btfsc	3980,1,c	;volatile
  6802  000B62  D003               	goto	i2u460_40
  6803  000B64  6A25               	clrf	??_ISR& (0+255),c
  6804  000B66  2A25               	incf	??_ISR& (0+255),f,c
  6805  000B68  D001               	goto	i2u461_48
  6806  000B6A                     i2u460_40:
  6807  000B6A  6A25               	clrf	??_ISR& (0+255),c
  6808  000B6C                     i2u461_48:
  6809  000B6C  4625               	rlncf	??_ISR,f,c
  6810  000B6E  508C               	movf	3980,w,c	;volatile
  6811  000B70  1825               	xorwf	??_ISR,w,c
  6812  000B72  0BFD               	andlw	-3
  6813  000B74  1825               	xorwf	??_ISR,w,c
  6814  000B76  6E8C               	movwf	3980,c	;volatile
  6815                           
  6816                           ;main.c: 642: if (stepAmount >= 40){
  6817  000B78  5043               	movf	_stepAmount+1,w,c
  6818  000B7A  E104               	bnz	i2u462_40
  6819  000B7C  0E28               	movlw	40
  6820  000B7E  5C42               	subwf	_stepAmount,w,c
  6821  000B80  A0D8               	btfss	status,0,c
  6822  000B82  D08D               	goto	i2l4390
  6823  000B84                     i2u462_40:
  6824                           
  6825                           ;main.c: 643: stepAmount = 0;
  6826  000B84  0E00               	movlw	0
  6827  000B86  6E43               	movwf	_stepAmount+1,c
  6828  000B88  0E00               	movlw	0
  6829  000B8A  6E42               	movwf	_stepAmount,c
  6830                           
  6831                           ;main.c: 644: stepGear = 4;
  6832  000B8C  0E04               	movlw	4
  6833  000B8E  D041               	goto	L5
  6834  000B90                     i2l4338:
  6835                           
  6836                           ; BSR set to: 0
  6837                           ;main.c: 645: LATDbits.LD0= 1;;
  6838  000B90  808C               	bsf	3980,0,c	;volatile
  6839                           
  6840                           ; BSR set to: 0
  6841                           ;main.c: 646: }
  6842                           ;main.c: 647: }
  6843  000B92  D085               	goto	i2l4390
  6844  000B94                     i2l4340:
  6845                           
  6846                           ; BSR set to: 0
  6847                           ;main.c: 648: else if (stepGear == 4){
  6848  000B94  0E04               	movlw	4
  6849  000B96  0100               	movlb	0	; () banked
  6850  000B98  19CC               	xorwf	_stepGear& (0+255),w,b
  6851  000B9A  A4D8               	btfss	status,2,c
  6852  000B9C  D01C               	goto	i2l4352
  6853                           
  6854                           ; BSR set to: 0
  6855                           ;main.c: 649: stepAmount++;
  6856  000B9E  4A42               	infsnz	_stepAmount,f,c
  6857  000BA0  2A43               	incf	_stepAmount+1,f,c
  6858                           
  6859                           ; BSR set to: 0
  6860                           ;main.c: 650: LATDbits.LD1 = !LATDbits.LD1;;
  6861  000BA2  B28C               	btfsc	3980,1,c	;volatile
  6862  000BA4  D003               	goto	i2u464_40
  6863  000BA6  6A25               	clrf	??_ISR& (0+255),c
  6864  000BA8  2A25               	incf	??_ISR& (0+255),f,c
  6865  000BAA  D001               	goto	i2u465_48
  6866  000BAC                     i2u464_40:
  6867  000BAC  6A25               	clrf	??_ISR& (0+255),c
  6868  000BAE                     i2u465_48:
  6869  000BAE  4625               	rlncf	??_ISR,f,c
  6870  000BB0  508C               	movf	3980,w,c	;volatile
  6871  000BB2  1825               	xorwf	??_ISR,w,c
  6872  000BB4  0BFD               	andlw	-3
  6873  000BB6  1825               	xorwf	??_ISR,w,c
  6874  000BB8  6E8C               	movwf	3980,c	;volatile
  6875                           
  6876                           ;main.c: 651: if (stepAmount >= 40){
  6877  000BBA  5043               	movf	_stepAmount+1,w,c
  6878  000BBC  E104               	bnz	i2u466_40
  6879  000BBE  0E28               	movlw	40
  6880  000BC0  5C42               	subwf	_stepAmount,w,c
  6881  000BC2  A0D8               	btfss	status,0,c
  6882  000BC4  D06C               	goto	i2l4390
  6883  000BC6                     i2u466_40:
  6884                           
  6885                           ;main.c: 652: stepAmount = 0;
  6886  000BC6  0E00               	movlw	0
  6887  000BC8  6E43               	movwf	_stepAmount+1,c
  6888  000BCA  0E00               	movlw	0
  6889  000BCC  6E42               	movwf	_stepAmount,c
  6890                           
  6891                           ;main.c: 653: stepGear = 5;
  6892  000BCE  0E05               	movlw	5
  6893  000BD0  D041               	goto	L6
  6894  000BD2                     i2l4350:
  6895                           
  6896                           ; BSR set to: 0
  6897                           ;main.c: 654: LATDbits.LD0= 0;;
  6898  000BD2  908C               	bcf	3980,0,c	;volatile
  6899                           
  6900                           ; BSR set to: 0
  6901                           ;main.c: 655: }
  6902                           ;main.c: 656: }
  6903  000BD4  D064               	goto	i2l4390
  6904  000BD6                     i2l4352:
  6905                           
  6906                           ; BSR set to: 0
  6907                           ;main.c: 657: else if (stepGear == 5){
  6908  000BD6  0E05               	movlw	5
  6909  000BD8  0100               	movlb	0	; () banked
  6910  000BDA  19CC               	xorwf	_stepGear& (0+255),w,b
  6911  000BDC  A4D8               	btfss	status,2,c
  6912  000BDE  D01C               	goto	i2l4364
  6913                           
  6914                           ; BSR set to: 0
  6915                           ;main.c: 658: stepAmount++;
  6916  000BE0  4A42               	infsnz	_stepAmount,f,c
  6917  000BE2  2A43               	incf	_stepAmount+1,f,c
  6918                           
  6919                           ; BSR set to: 0
  6920                           ;main.c: 659: LATDbits.LD1 = !LATDbits.LD1;;
  6921  000BE4  B28C               	btfsc	3980,1,c	;volatile
  6922  000BE6  D003               	goto	i2u468_40
  6923  000BE8  6A25               	clrf	??_ISR& (0+255),c
  6924  000BEA  2A25               	incf	??_ISR& (0+255),f,c
  6925  000BEC  D001               	goto	i2u469_48
  6926  000BEE                     i2u468_40:
  6927  000BEE  6A25               	clrf	??_ISR& (0+255),c
  6928  000BF0                     i2u469_48:
  6929  000BF0  4625               	rlncf	??_ISR,f,c
  6930  000BF2  508C               	movf	3980,w,c	;volatile
  6931  000BF4  1825               	xorwf	??_ISR,w,c
  6932  000BF6  0BFD               	andlw	-3
  6933  000BF8  1825               	xorwf	??_ISR,w,c
  6934  000BFA  6E8C               	movwf	3980,c	;volatile
  6935                           
  6936                           ;main.c: 660: if (stepAmount >= 40){
  6937  000BFC  5043               	movf	_stepAmount+1,w,c
  6938  000BFE  E104               	bnz	i2u470_40
  6939  000C00  0E28               	movlw	40
  6940  000C02  5C42               	subwf	_stepAmount,w,c
  6941  000C04  A0D8               	btfss	status,0,c
  6942  000C06  D04B               	goto	i2l4390
  6943  000C08                     i2u470_40:
  6944                           
  6945                           ;main.c: 661: stepAmount = 0;
  6946  000C08  0E00               	movlw	0
  6947  000C0A  6E43               	movwf	_stepAmount+1,c
  6948  000C0C  0E00               	movlw	0
  6949  000C0E  6E42               	movwf	_stepAmount,c
  6950                           
  6951                           ;main.c: 662: stepGear = 6;
  6952  000C10  0E06               	movlw	6
  6953  000C12                     L5:
  6954  000C12  0100               	movlb	0	; () banked
  6955  000C14  6FCC               	movwf	_stepGear& (0+255),b
  6956  000C16  D7BC               	goto	i2l4338
  6957  000C18                     i2l4364:
  6958                           
  6959                           ; BSR set to: 0
  6960                           ;main.c: 666: else if (stepGear == 6){
  6961  000C18  0E06               	movlw	6
  6962  000C1A  0100               	movlb	0	; () banked
  6963  000C1C  19CC               	xorwf	_stepGear& (0+255),w,b
  6964  000C1E  A4D8               	btfss	status,2,c
  6965  000C20  D01C               	goto	i2l4376
  6966                           
  6967                           ; BSR set to: 0
  6968                           ;main.c: 667: stepAmount++;
  6969  000C22  4A42               	infsnz	_stepAmount,f,c
  6970  000C24  2A43               	incf	_stepAmount+1,f,c
  6971                           
  6972                           ; BSR set to: 0
  6973                           ;main.c: 668: LATDbits.LD1 = !LATDbits.LD1;;
  6974  000C26  B28C               	btfsc	3980,1,c	;volatile
  6975  000C28  D003               	goto	i2u472_40
  6976  000C2A  6A25               	clrf	??_ISR& (0+255),c
  6977  000C2C  2A25               	incf	??_ISR& (0+255),f,c
  6978  000C2E  D001               	goto	i2u473_48
  6979  000C30                     i2u472_40:
  6980  000C30  6A25               	clrf	??_ISR& (0+255),c
  6981  000C32                     i2u473_48:
  6982  000C32  4625               	rlncf	??_ISR,f,c
  6983  000C34  508C               	movf	3980,w,c	;volatile
  6984  000C36  1825               	xorwf	??_ISR,w,c
  6985  000C38  0BFD               	andlw	-3
  6986  000C3A  1825               	xorwf	??_ISR,w,c
  6987  000C3C  6E8C               	movwf	3980,c	;volatile
  6988                           
  6989                           ;main.c: 669: if (stepAmount >= 40){
  6990  000C3E  5043               	movf	_stepAmount+1,w,c
  6991  000C40  E104               	bnz	i2u474_40
  6992  000C42  0E28               	movlw	40
  6993  000C44  5C42               	subwf	_stepAmount,w,c
  6994  000C46  A0D8               	btfss	status,0,c
  6995  000C48  D02A               	goto	i2l4390
  6996  000C4A                     i2u474_40:
  6997                           
  6998                           ;main.c: 670: stepAmount = 0;
  6999  000C4A  0E00               	movlw	0
  7000  000C4C  6E43               	movwf	_stepAmount+1,c
  7001  000C4E  0E00               	movlw	0
  7002  000C50  6E42               	movwf	_stepAmount,c
  7003                           
  7004                           ;main.c: 671: stepGear = 7;
  7005  000C52  0E07               	movlw	7
  7006  000C54                     L6:
  7007  000C54  0100               	movlb	0	; () banked
  7008  000C56  6FCC               	movwf	_stepGear& (0+255),b
  7009  000C58  D7BC               	goto	i2l4350
  7010  000C5A                     i2l4376:
  7011                           
  7012                           ; BSR set to: 0
  7013                           ;main.c: 675: else if (stepGear == 7){
  7014  000C5A  0E07               	movlw	7
  7015  000C5C  0100               	movlb	0	; () banked
  7016  000C5E  19CC               	xorwf	_stepGear& (0+255),w,b
  7017  000C60  A4D8               	btfss	status,2,c
  7018  000C62  D01D               	goto	i2l4390
  7019                           
  7020                           ; BSR set to: 0
  7021                           ;main.c: 676: stepAmount ++;
  7022  000C64  4A42               	infsnz	_stepAmount,f,c
  7023  000C66  2A43               	incf	_stepAmount+1,f,c
  7024                           
  7025                           ; BSR set to: 0
  7026                           ;main.c: 677: LATDbits.LD1 = !LATDbits.LD1;;
  7027  000C68  B28C               	btfsc	3980,1,c	;volatile
  7028  000C6A  D003               	goto	i2u476_40
  7029  000C6C  6A25               	clrf	??_ISR& (0+255),c
  7030  000C6E  2A25               	incf	??_ISR& (0+255),f,c
  7031  000C70  D001               	goto	i2u477_48
  7032  000C72                     i2u476_40:
  7033  000C72  6A25               	clrf	??_ISR& (0+255),c
  7034  000C74                     i2u477_48:
  7035  000C74  4625               	rlncf	??_ISR,f,c
  7036  000C76  508C               	movf	3980,w,c	;volatile
  7037  000C78  1825               	xorwf	??_ISR,w,c
  7038  000C7A  0BFD               	andlw	-3
  7039  000C7C  1825               	xorwf	??_ISR,w,c
  7040  000C7E  6E8C               	movwf	3980,c	;volatile
  7041                           
  7042                           ;main.c: 678: if (stepAmount >= 20){
  7043  000C80  5043               	movf	_stepAmount+1,w,c
  7044  000C82  E104               	bnz	i2u478_40
  7045  000C84  0E14               	movlw	20
  7046  000C86  5C42               	subwf	_stepAmount,w,c
  7047  000C88  A0D8               	btfss	status,0,c
  7048  000C8A  D009               	goto	i2l4390
  7049  000C8C                     i2u478_40:
  7050                           
  7051                           ;main.c: 679: stepAmount = 0;
  7052  000C8C  0E00               	movlw	0
  7053  000C8E  6E43               	movwf	_stepAmount+1,c
  7054  000C90  0E00               	movlw	0
  7055  000C92  6E42               	movwf	_stepAmount,c
  7056                           
  7057                           ;main.c: 680: stepGear = 0;
  7058  000C94  0E00               	movlw	0
  7059  000C96  0100               	movlb	0	; () banked
  7060  000C98  6FCC               	movwf	_stepGear& (0+255),b
  7061                           
  7062                           ; BSR set to: 0
  7063                           ;main.c: 681: LATDbits.LD0= 0;;
  7064  000C9A  908C               	bcf	3980,0,c	;volatile
  7065                           
  7066                           ; BSR set to: 0
  7067                           ;main.c: 682: LATDbits.LD1 = 0;;
  7068  000C9C  928C               	bcf	3980,1,c	;volatile
  7069  000C9E                     i2l4390:
  7070                           
  7071                           ;main.c: 683: }
  7072                           ;main.c: 684: }
  7073                           ;main.c: 686: }
  7074                           ;main.c: 687: if (plat1Left){
  7075  000C9E  0100               	movlb	0	; () banked
  7076  000CA0  51B8               	movf	_plat1Left& (0+255),w,b
  7077  000CA2  0100               	movlb	0	; () banked
  7078  000CA4  11B9               	iorwf	(_plat1Left+1)& (0+255),w,b
  7079  000CA6  B4D8               	btfsc	status,2,c
  7080  000CA8  D022               	goto	i2l4416
  7081                           
  7082                           ; BSR set to: 0
  7083                           ;main.c: 688: if (step1 == 1){
  7084  000CAA  0449               	decf	_step1,w,c
  7085  000CAC  A4D8               	btfss	status,2,c
  7086  000CAE  D002               	goto	i2l4396
  7087                           
  7088                           ; BSR set to: 0
  7089                           ;main.c: 689: LATCbits.LC6 = 1;;
  7090  000CB0  8C8B               	bsf	3979,6,c	;volatile
  7091                           
  7092                           ;main.c: 690: LATCbits.LC5 = 0;;
  7093  000CB2  9A8B               	bcf	3979,5,c	;volatile
  7094  000CB4                     i2l4396:
  7095                           
  7096                           ; BSR set to: 0
  7097                           ;main.c: 691: }
  7098                           ;main.c: 692: if (step1 == 2){
  7099  000CB4  0E02               	movlw	2
  7100  000CB6  1849               	xorwf	_step1,w,c
  7101  000CB8  A4D8               	btfss	status,2,c
  7102  000CBA  D002               	goto	i2l4400
  7103                           
  7104                           ; BSR set to: 0
  7105                           ;main.c: 693: LATCbits.LC1 = 0;;
  7106  000CBC  928B               	bcf	3979,1,c	;volatile
  7107                           
  7108                           ;main.c: 694: LATCbits.LC2 = 1;;
  7109  000CBE  848B               	bsf	3979,2,c	;volatile
  7110  000CC0                     i2l4400:
  7111                           
  7112                           ; BSR set to: 0
  7113                           ;main.c: 695: }
  7114                           ;main.c: 696: if (step1 == 3){
  7115  000CC0  0E03               	movlw	3
  7116  000CC2  1849               	xorwf	_step1,w,c
  7117  000CC4  A4D8               	btfss	status,2,c
  7118  000CC6  D002               	goto	i2l4404
  7119                           
  7120                           ; BSR set to: 0
  7121                           ;main.c: 697: LATCbits.LC6 = 0;;
  7122  000CC8  9C8B               	bcf	3979,6,c	;volatile
  7123                           
  7124                           ;main.c: 698: LATCbits.LC5 = 1;;
  7125  000CCA  8A8B               	bsf	3979,5,c	;volatile
  7126  000CCC                     i2l4404:
  7127                           
  7128                           ; BSR set to: 0
  7129                           ;main.c: 699: }
  7130                           ;main.c: 700: if (step1 == 4){
  7131  000CCC  0E04               	movlw	4
  7132  000CCE  1849               	xorwf	_step1,w,c
  7133  000CD0  A4D8               	btfss	status,2,c
  7134  000CD2  D002               	goto	i2l4408
  7135                           
  7136                           ; BSR set to: 0
  7137                           ;main.c: 701: LATCbits.LC1 = 1;;
  7138  000CD4  828B               	bsf	3979,1,c	;volatile
  7139                           
  7140                           ;main.c: 702: LATCbits.LC2 = 0;;
  7141  000CD6  948B               	bcf	3979,2,c	;volatile
  7142  000CD8                     i2l4408:
  7143                           
  7144                           ; BSR set to: 0
  7145                           ;main.c: 703: }
  7146                           ;main.c: 704: plat1Left--;
  7147  000CD8  0100               	movlb	0	; () banked
  7148  000CDA  07B8               	decf	_plat1Left& (0+255),f,b
  7149  000CDC  A0D8               	btfss	status,0,c
  7150  000CDE  07B9               	decf	(_plat1Left+1)& (0+255),f,b
  7151                           
  7152                           ; BSR set to: 0
  7153                           ;main.c: 705: if (step1>=4)
  7154  000CE0  0E03               	movlw	3
  7155  000CE2  6449               	cpfsgt	_step1,c
  7156  000CE4  D003               	goto	i2l4414
  7157                           
  7158                           ; BSR set to: 0
  7159                           ;main.c: 706: step1 = 1;
  7160  000CE6  0E01               	movlw	1
  7161  000CE8  6E49               	movwf	_step1,c
  7162  000CEA  D001               	goto	i2l4416
  7163  000CEC                     i2l4414:
  7164                           
  7165                           ; BSR set to: 0
  7166                           ;main.c: 707: else
  7167                           ;main.c: 708: step1++;
  7168  000CEC  2A49               	incf	_step1,f,c
  7169  000CEE                     i2l4416:
  7170                           
  7171                           ; BSR set to: 0
  7172                           ;main.c: 709: }
  7173                           ;main.c: 710: if (plat1Right){
  7174  000CEE  0100               	movlb	0	; () banked
  7175  000CF0  51BA               	movf	_plat1Right& (0+255),w,b
  7176  000CF2  0100               	movlb	0	; () banked
  7177  000CF4  11BB               	iorwf	(_plat1Right+1)& (0+255),w,b
  7178  000CF6  B4D8               	btfsc	status,2,c
  7179  000CF8  D022               	goto	i2l4442
  7180                           
  7181                           ; BSR set to: 0
  7182                           ;main.c: 711: if (step1 == 4){
  7183  000CFA  0E04               	movlw	4
  7184  000CFC  1849               	xorwf	_step1,w,c
  7185  000CFE  A4D8               	btfss	status,2,c
  7186  000D00  D002               	goto	i2l4422
  7187                           
  7188                           ; BSR set to: 0
  7189                           ;main.c: 712: LATCbits.LC6 = 0;;
  7190  000D02  9C8B               	bcf	3979,6,c	;volatile
  7191                           
  7192                           ;main.c: 713: LATCbits.LC5 = 1;;
  7193  000D04  8A8B               	bsf	3979,5,c	;volatile
  7194  000D06                     i2l4422:
  7195                           
  7196                           ; BSR set to: 0
  7197                           ;main.c: 714: }
  7198                           ;main.c: 715: if (step1 == 3){
  7199  000D06  0E03               	movlw	3
  7200  000D08  1849               	xorwf	_step1,w,c
  7201  000D0A  A4D8               	btfss	status,2,c
  7202  000D0C  D002               	goto	i2l4426
  7203                           
  7204                           ; BSR set to: 0
  7205                           ;main.c: 716: LATCbits.LC1 = 0;;
  7206  000D0E  928B               	bcf	3979,1,c	;volatile
  7207                           
  7208                           ;main.c: 717: LATCbits.LC2 = 1;;
  7209  000D10  848B               	bsf	3979,2,c	;volatile
  7210  000D12                     i2l4426:
  7211                           
  7212                           ; BSR set to: 0
  7213                           ;main.c: 718: }
  7214                           ;main.c: 719: if (step1 == 2){
  7215  000D12  0E02               	movlw	2
  7216  000D14  1849               	xorwf	_step1,w,c
  7217  000D16  A4D8               	btfss	status,2,c
  7218  000D18  D002               	goto	i2l4430
  7219                           
  7220                           ; BSR set to: 0
  7221                           ;main.c: 720: LATCbits.LC6 = 1;;
  7222  000D1A  8C8B               	bsf	3979,6,c	;volatile
  7223                           
  7224                           ;main.c: 721: LATCbits.LC5 = 0;;
  7225  000D1C  9A8B               	bcf	3979,5,c	;volatile
  7226  000D1E                     i2l4430:
  7227                           
  7228                           ; BSR set to: 0
  7229                           ;main.c: 722: }
  7230                           ;main.c: 723: if (step1 == 1){
  7231  000D1E  0449               	decf	_step1,w,c
  7232  000D20  A4D8               	btfss	status,2,c
  7233  000D22  D002               	goto	i2l4434
  7234                           
  7235                           ; BSR set to: 0
  7236                           ;main.c: 724: LATCbits.LC1 = 1;;
  7237  000D24  828B               	bsf	3979,1,c	;volatile
  7238                           
  7239                           ;main.c: 725: LATCbits.LC2 = 0;;
  7240  000D26  948B               	bcf	3979,2,c	;volatile
  7241  000D28                     i2l4434:
  7242                           
  7243                           ; BSR set to: 0
  7244                           ;main.c: 726: }
  7245                           ;main.c: 727: plat1Right--;
  7246  000D28  0100               	movlb	0	; () banked
  7247  000D2A  07BA               	decf	_plat1Right& (0+255),f,b
  7248  000D2C  A0D8               	btfss	status,0,c
  7249  000D2E  07BB               	decf	(_plat1Right+1)& (0+255),f,b
  7250                           
  7251                           ; BSR set to: 0
  7252                           ;main.c: 728: if (step1<=1)
  7253  000D30  0E02               	movlw	2
  7254  000D32  6049               	cpfslt	_step1,c
  7255  000D34  D003               	goto	i2l4440
  7256                           
  7257                           ; BSR set to: 0
  7258                           ;main.c: 729: step1 = 4;
  7259  000D36  0E04               	movlw	4
  7260  000D38  6E49               	movwf	_step1,c
  7261  000D3A  D001               	goto	i2l4442
  7262  000D3C                     i2l4440:
  7263                           
  7264                           ; BSR set to: 0
  7265                           ;main.c: 730: else
  7266                           ;main.c: 731: step1--;
  7267  000D3C  0649               	decf	_step1,f,c
  7268  000D3E                     i2l4442:
  7269                           
  7270                           ; BSR set to: 0
  7271                           ;main.c: 732: }
  7272                           ;main.c: 733: if (plat2Left){
  7273  000D3E  0100               	movlb	0	; () banked
  7274  000D40  51BC               	movf	_plat2Left& (0+255),w,b
  7275  000D42  0100               	movlb	0	; () banked
  7276  000D44  11BD               	iorwf	(_plat2Left+1)& (0+255),w,b
  7277  000D46  B4D8               	btfsc	status,2,c
  7278  000D48  D022               	goto	i2l4468
  7279                           
  7280                           ; BSR set to: 0
  7281                           ;main.c: 734: if (step2 == 1){
  7282  000D4A  044A               	decf	_step2,w,c
  7283  000D4C  A4D8               	btfss	status,2,c
  7284  000D4E  D002               	goto	i2l4448
  7285                           
  7286                           ; BSR set to: 0
  7287                           ;main.c: 735: LATAbits.LA4 = 1;;
  7288  000D50  8889               	bsf	3977,4,c	;volatile
  7289                           
  7290                           ;main.c: 736: LATEbits.LE1 = 0;;
  7291  000D52  928D               	bcf	3981,1,c	;volatile
  7292  000D54                     i2l4448:
  7293                           
  7294                           ; BSR set to: 0
  7295                           ;main.c: 737: }
  7296                           ;main.c: 738: if (step2 == 2){
  7297  000D54  0E02               	movlw	2
  7298  000D56  184A               	xorwf	_step2,w,c
  7299  000D58  A4D8               	btfss	status,2,c
  7300  000D5A  D002               	goto	i2l4452
  7301                           
  7302                           ; BSR set to: 0
  7303                           ;main.c: 739: LATCbits.LC0 = 0;;
  7304  000D5C  908B               	bcf	3979,0,c	;volatile
  7305                           
  7306                           ;main.c: 740: LATEbits.LE2 = 1;;
  7307  000D5E  848D               	bsf	3981,2,c	;volatile
  7308  000D60                     i2l4452:
  7309                           
  7310                           ; BSR set to: 0
  7311                           ;main.c: 741: }
  7312                           ;main.c: 742: if (step2 == 3){
  7313  000D60  0E03               	movlw	3
  7314  000D62  184A               	xorwf	_step2,w,c
  7315  000D64  A4D8               	btfss	status,2,c
  7316  000D66  D002               	goto	i2l4456
  7317                           
  7318                           ; BSR set to: 0
  7319                           ;main.c: 743: LATAbits.LA4 = 0;;
  7320  000D68  9889               	bcf	3977,4,c	;volatile
  7321                           
  7322                           ;main.c: 744: LATEbits.LE1 = 1;;
  7323  000D6A  828D               	bsf	3981,1,c	;volatile
  7324  000D6C                     i2l4456:
  7325                           
  7326                           ; BSR set to: 0
  7327                           ;main.c: 745: }
  7328                           ;main.c: 746: if (step2 == 4){
  7329  000D6C  0E04               	movlw	4
  7330  000D6E  184A               	xorwf	_step2,w,c
  7331  000D70  A4D8               	btfss	status,2,c
  7332  000D72  D002               	goto	i2l4460
  7333                           
  7334                           ; BSR set to: 0
  7335                           ;main.c: 747: LATCbits.LC0 = 1;;
  7336  000D74  808B               	bsf	3979,0,c	;volatile
  7337                           
  7338                           ;main.c: 748: LATEbits.LE2 = 0;;
  7339  000D76  948D               	bcf	3981,2,c	;volatile
  7340  000D78                     i2l4460:
  7341                           
  7342                           ; BSR set to: 0
  7343                           ;main.c: 749: }
  7344                           ;main.c: 750: plat2Left--;
  7345  000D78  0100               	movlb	0	; () banked
  7346  000D7A  07BC               	decf	_plat2Left& (0+255),f,b
  7347  000D7C  A0D8               	btfss	status,0,c
  7348  000D7E  07BD               	decf	(_plat2Left+1)& (0+255),f,b
  7349                           
  7350                           ; BSR set to: 0
  7351                           ;main.c: 751: if (step2>=4)
  7352  000D80  0E03               	movlw	3
  7353  000D82  644A               	cpfsgt	_step2,c
  7354  000D84  D003               	goto	i2l4466
  7355                           
  7356                           ; BSR set to: 0
  7357                           ;main.c: 752: step2 = 1;
  7358  000D86  0E01               	movlw	1
  7359  000D88  6E4A               	movwf	_step2,c
  7360  000D8A  D001               	goto	i2l4468
  7361  000D8C                     i2l4466:
  7362                           
  7363                           ; BSR set to: 0
  7364                           ;main.c: 753: else
  7365                           ;main.c: 754: step2++;
  7366  000D8C  2A4A               	incf	_step2,f,c
  7367  000D8E                     i2l4468:
  7368                           
  7369                           ; BSR set to: 0
  7370                           ;main.c: 755: }
  7371                           ;main.c: 756: if (plat2Right){
  7372  000D8E  0100               	movlb	0	; () banked
  7373  000D90  51BE               	movf	_plat2Right& (0+255),w,b
  7374  000D92  0100               	movlb	0	; () banked
  7375  000D94  11BF               	iorwf	(_plat2Right+1)& (0+255),w,b
  7376  000D96  B4D8               	btfsc	status,2,c
  7377  000D98  D022               	goto	i2l438
  7378                           
  7379                           ; BSR set to: 0
  7380                           ;main.c: 757: if (step2 == 4){
  7381  000D9A  0E04               	movlw	4
  7382  000D9C  184A               	xorwf	_step2,w,c
  7383  000D9E  A4D8               	btfss	status,2,c
  7384  000DA0  D002               	goto	i2l4474
  7385                           
  7386                           ; BSR set to: 0
  7387                           ;main.c: 758: LATAbits.LA4 = 0;;
  7388  000DA2  9889               	bcf	3977,4,c	;volatile
  7389                           
  7390                           ;main.c: 759: LATEbits.LE1 = 1;;
  7391  000DA4  828D               	bsf	3981,1,c	;volatile
  7392  000DA6                     i2l4474:
  7393                           
  7394                           ; BSR set to: 0
  7395                           ;main.c: 760: }
  7396                           ;main.c: 761: if (step2 == 3){
  7397  000DA6  0E03               	movlw	3
  7398  000DA8  184A               	xorwf	_step2,w,c
  7399  000DAA  A4D8               	btfss	status,2,c
  7400  000DAC  D002               	goto	i2l4478
  7401                           
  7402                           ; BSR set to: 0
  7403                           ;main.c: 762: LATCbits.LC0 = 0;;
  7404  000DAE  908B               	bcf	3979,0,c	;volatile
  7405                           
  7406                           ;main.c: 763: LATEbits.LE2 = 1;;
  7407  000DB0  848D               	bsf	3981,2,c	;volatile
  7408  000DB2                     i2l4478:
  7409                           
  7410                           ; BSR set to: 0
  7411                           ;main.c: 764: }
  7412                           ;main.c: 765: if (step2 == 2){
  7413  000DB2  0E02               	movlw	2
  7414  000DB4  184A               	xorwf	_step2,w,c
  7415  000DB6  A4D8               	btfss	status,2,c
  7416  000DB8  D002               	goto	i2l4482
  7417                           
  7418                           ; BSR set to: 0
  7419                           ;main.c: 766: LATAbits.LA4 = 1;;
  7420  000DBA  8889               	bsf	3977,4,c	;volatile
  7421                           
  7422                           ;main.c: 767: LATEbits.LE1 = 0;;
  7423  000DBC  928D               	bcf	3981,1,c	;volatile
  7424  000DBE                     i2l4482:
  7425                           
  7426                           ; BSR set to: 0
  7427                           ;main.c: 768: }
  7428                           ;main.c: 769: if (step2 == 1){
  7429  000DBE  044A               	decf	_step2,w,c
  7430  000DC0  A4D8               	btfss	status,2,c
  7431  000DC2  D002               	goto	i2l4486
  7432                           
  7433                           ; BSR set to: 0
  7434                           ;main.c: 770: LATCbits.LC0 = 1;;
  7435  000DC4  808B               	bsf	3979,0,c	;volatile
  7436                           
  7437                           ;main.c: 771: LATEbits.LE2 = 0;;
  7438  000DC6  948D               	bcf	3981,2,c	;volatile
  7439  000DC8                     i2l4486:
  7440                           
  7441                           ; BSR set to: 0
  7442                           ;main.c: 772: }
  7443                           ;main.c: 773: plat2Right--;
  7444  000DC8  0100               	movlb	0	; () banked
  7445  000DCA  07BE               	decf	_plat2Right& (0+255),f,b
  7446  000DCC  A0D8               	btfss	status,0,c
  7447  000DCE  07BF               	decf	(_plat2Right+1)& (0+255),f,b
  7448                           
  7449                           ; BSR set to: 0
  7450                           ;main.c: 774: if (step2<=1)
  7451  000DD0  0E02               	movlw	2
  7452  000DD2  604A               	cpfslt	_step2,c
  7453  000DD4  D003               	goto	i2l4492
  7454                           
  7455                           ; BSR set to: 0
  7456                           ;main.c: 775: step2 = 4;
  7457  000DD6  0E04               	movlw	4
  7458  000DD8  6E4A               	movwf	_step2,c
  7459  000DDA  D001               	goto	i2l438
  7460  000DDC                     i2l4492:
  7461                           
  7462                           ; BSR set to: 0
  7463                           ;main.c: 776: else
  7464                           ;main.c: 777: step2--;
  7465  000DDC  064A               	decf	_step2,f,c
  7466  000DDE                     i2l438:
  7467                           
  7468                           ; BSR set to: 0
  7469  000DDE  C033  FFF5         	movff	??_ISR+14,tablat
  7470  000DE2  C032  FFF8         	movff	??_ISR+13,tblptru
  7471  000DE6  C031  FFF7         	movff	??_ISR+12,tblptrh
  7472  000DEA  C030  FFF6         	movff	??_ISR+11,tblptrl
  7473  000DEE  C02F  FFF4         	movff	??_ISR+10,prodh
  7474  000DF2  C02E  FFF3         	movff	??_ISR+9,prodl
  7475  000DF6  C02D  FFDA         	movff	??_ISR+8,fsr2h
  7476  000DFA  C02C  FFD9         	movff	??_ISR+7,fsr2l
  7477  000DFE  C02B  FFE2         	movff	??_ISR+6,fsr1h
  7478  000E02  C02A  FFE1         	movff	??_ISR+5,fsr1l
  7479  000E06  C029  FFEA         	movff	??_ISR+4,fsr0h
  7480  000E0A  C028  FFE9         	movff	??_ISR+3,fsr0l
  7481  000E0E  C027  FFFB         	movff	??_ISR+2,pclatu
  7482  000E12  C026  FFFA         	movff	??_ISR+1,pclath
  7483  000E16  924B               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7484  000E18  0011               	retfie		f
  7485  000E1A                     __end_of_ISR:
  7486                           	opt stack 0
  7487                           pclatu	equ	0xFFB
  7488                           pclath	equ	0xFFA
  7489                           tblptru	equ	0xFF8
  7490                           tblptrh	equ	0xFF7
  7491                           tblptrl	equ	0xFF6
  7492                           tablat	equ	0xFF5
  7493                           prodh	equ	0xFF4
  7494                           prodl	equ	0xFF3
  7495                           intcon	equ	0xFF2
  7496                           intcon3	equ	0xFF0
  7497                           postinc0	equ	0xFEE
  7498                           fsr0h	equ	0xFEA
  7499                           fsr0l	equ	0xFE9
  7500                           wreg	equ	0xFE8
  7501                           fsr1h	equ	0xFE2
  7502                           fsr1l	equ	0xFE1
  7503                           indf2	equ	0xFDF
  7504                           postinc2	equ	0xFDE
  7505                           postdec2	equ	0xFDD
  7506                           fsr2h	equ	0xFDA
  7507                           fsr2l	equ	0xFD9
  7508                           status	equ	0xFD8
  7509                           
  7510 ;; *************** function _switchMenu *****************
  7511 ;; Defined at:
  7512 ;;		line 355 in file "../main.c"
  7513 ;; Parameters:    Size  Location     Type
  7514 ;;  left            1    wreg     unsigned char 
  7515 ;;  right           1   32[COMRAM] unsigned char 
  7516 ;;  key             1   33[COMRAM] unsigned char 
  7517 ;; Auto vars:     Size  Location     Type
  7518 ;;  left            1   34[COMRAM] unsigned char 
  7519 ;;  i               1   35[COMRAM] unsigned char 
  7520 ;; Return value:  Size  Location     Type
  7521 ;;                  1    wreg      void 
  7522 ;; Registers used:
  7523 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7524 ;; Tracked objects:
  7525 ;;		On entry : 0/0
  7526 ;;		On exit  : 0/0
  7527 ;;		Unchanged: 0/0
  7528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7529 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7530 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7532 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7533 ;;Total ram usage:        4 bytes
  7534 ;; Hardware stack levels used:    1
  7535 ;; Hardware stack levels required when called:    3
  7536 ;; This function calls:
  7537 ;;		i2_I2C_Master_Read
  7538 ;;		i2_I2C_Master_Start
  7539 ;;		i2_I2C_Master_Stop
  7540 ;;		i2_I2C_Master_Write
  7541 ;;		i2_lcdInst
  7542 ;;		i2_printf
  7543 ;;		i2_stopOperation
  7544 ;; This function is called by:
  7545 ;;		_ISR
  7546 ;; This function uses a non-reentrant model
  7547 ;;
  7548                           
  7549                           	psect	text24
  7550  0016AC                     __ptext24:
  7551                           	opt stack 0
  7552  0016AC                     _switchMenu:
  7553                           	opt stack 23
  7554                           
  7555                           ; BSR set to: 0
  7556                           ;incstack = 0
  7557                           ;switchMenu@left stored from wreg
  7558  0016AC  6E23               	movwf	switchMenu@left,c
  7559                           
  7560                           ;main.c: 357: if (key == '*'){
  7561  0016AE  0E2A               	movlw	42
  7562  0016B0  1822               	xorwf	switchMenu@key,w,c
  7563  0016B2  A4D8               	btfss	status,2,c
  7564  0016B4  D053               	goto	i2l3832
  7565                           
  7566                           ;main.c: 359: if(screenMode == 2){
  7567  0016B6  0E02               	movlw	2
  7568  0016B8  0100               	movlb	0	; () banked
  7569  0016BA  19D1               	xorwf	_screenMode& (0+255),w,b
  7570  0016BC  A4D8               	btfss	status,2,c
  7571  0016BE  D046               	goto	i2l3828
  7572                           
  7573                           ; BSR set to: 0
  7574                           ;main.c: 360: screenMode = 1;
  7575  0016C0  0E01               	movlw	1
  7576  0016C2  0100               	movlb	0	; () banked
  7577  0016C4  6FD1               	movwf	_screenMode& (0+255),b
  7578                           
  7579                           ; BSR set to: 0
  7580                           ;main.c: 361: T0CONbits.TMR0ON = 1;
  7581  0016C6  8ED5               	bsf	4053,7,c	;volatile
  7582                           
  7583                           ; BSR set to: 0
  7584                           ;main.c: 362: T1CONbits.TMR1ON = 1;
  7585  0016C8  80CD               	bsf	4045,0,c	;volatile
  7586                           
  7587                           ;main.c: 363: startGear = 1;
  7588  0016CA  0E01               	movlw	1
  7589  0016CC  0100               	movlb	0	; () banked
  7590  0016CE  6FCB               	movwf	_startGear& (0+255),b
  7591                           
  7592                           ; BSR set to: 0
  7593                           ;main.c: 366: I2C_Master_Start();
  7594  0016D0  EC32  F010         	call	i2_I2C_Master_Start	;wreg free
  7595                           
  7596                           ;main.c: 367: I2C_Master_Write(0b11010000);
  7597  0016D4  0E00               	movlw	0
  7598  0016D6  6E03               	movwf	i2I2C_Master_Write@d+1,c
  7599  0016D8  0ED0               	movlw	208
  7600  0016DA  6E02               	movwf	i2I2C_Master_Write@d,c
  7601  0016DC  EC21  F010         	call	i2_I2C_Master_Write	;wreg free
  7602                           
  7603                           ;main.c: 368: I2C_Master_Write(0x00);
  7604  0016E0  0E00               	movlw	0
  7605  0016E2  6E03               	movwf	i2I2C_Master_Write@d+1,c
  7606  0016E4  0E00               	movlw	0
  7607  0016E6  6E02               	movwf	i2I2C_Master_Write@d,c
  7608  0016E8  EC21  F010         	call	i2_I2C_Master_Write	;wreg free
  7609                           
  7610                           ;main.c: 369: I2C_Master_Stop();
  7611  0016EC  EC2E  F010         	call	i2_I2C_Master_Stop	;wreg free
  7612                           
  7613                           ;main.c: 371: I2C_Master_Start();
  7614  0016F0  EC32  F010         	call	i2_I2C_Master_Start	;wreg free
  7615                           
  7616                           ;main.c: 372: I2C_Master_Write(0b11010001);
  7617  0016F4  0E00               	movlw	0
  7618  0016F6  6E03               	movwf	i2I2C_Master_Write@d+1,c
  7619  0016F8  0ED1               	movlw	209
  7620  0016FA  6E02               	movwf	i2I2C_Master_Write@d,c
  7621  0016FC  EC21  F010         	call	i2_I2C_Master_Write	;wreg free
  7622                           
  7623                           ;main.c: 373: for(unsigned char i=0;i<0x06;i++){
  7624  001700  0E00               	movlw	0
  7625  001702  6E24               	movwf	switchMenu@i,c
  7626  001704                     i2l3812:
  7627  001704  0E05               	movlw	5
  7628  001706  6424               	cpfsgt	switchMenu@i,c
  7629  001708  D001               	goto	i2l3816
  7630  00170A  D00E               	goto	i2l3822
  7631  00170C                     i2l3816:
  7632                           
  7633                           ;main.c: 374: lastRunRTC[i] = I2C_Master_Read(1);
  7634  00170C  5024               	movf	switchMenu@i,w,c
  7635  00170E  0D01               	mullw	1
  7636  001710  0EAA               	movlw	low _lastRunRTC
  7637  001712  24F3               	addwf	prodl,w,c
  7638  001714  6ED9               	movwf	fsr2l,c
  7639  001716  0E00               	movlw	high _lastRunRTC
  7640  001718  20F4               	addwfc	prodh,w,c
  7641  00171A  6EDA               	movwf	fsr2h,c
  7642  00171C  0E01               	movlw	1
  7643  00171E  ECAA  F00F         	call	i2_I2C_Master_Read
  7644  001722  6EDF               	movwf	indf2,c
  7645  001724  2A24               	incf	switchMenu@i,f,c
  7646  001726  D7EE               	goto	i2l3812
  7647  001728                     i2l3822:
  7648                           
  7649                           ;main.c: 375: }
  7650                           ;main.c: 376: lastRunRTC[6] = I2C_Master_Read(0);
  7651  001728  0E00               	movlw	0
  7652  00172A  ECAA  F00F         	call	i2_I2C_Master_Read
  7653  00172E  0100               	movlb	0	; () banked
  7654  001730  6FB0               	movwf	(_lastRunRTC+6)& (0+255),b
  7655                           
  7656                           ;main.c: 377: I2C_Master_Stop();
  7657  001732  EC2E  F010         	call	i2_I2C_Master_Stop	;wreg free
  7658                           
  7659                           ;main.c: 379: lcdInst(0b10000000);;
  7660  001736  0E80               	movlw	128
  7661  001738  EC16  F010         	call	i2_lcdInst
  7662                           
  7663                           ;main.c: 380: printf("RUNNING: 00:00  ");
  7664  00173C  0EA9               	movlw	low STR_26
  7665  00173E  6E0D               	movwf	i2printf@f,c
  7666  001740  0EFF               	movlw	high STR_26
  7667  001742  6E0E               	movwf	i2printf@f+1,c
  7668  001744  ECE3  F008         	call	i2_printf	;wreg free
  7669                           
  7670                           ;main.c: 381: LATBbits.LB0 = 1;;
  7671  001748  808A               	bsf	3978,0,c	;volatile
  7672                           
  7673                           ;main.c: 382: }
  7674  00174A  0012               	return	
  7675  00174C                     i2l3828:
  7676                           
  7677                           ;main.c: 383: else if (screenMode == 0)
  7678  00174C  0100               	movlb	0	; () banked
  7679  00174E  51D1               	movf	_screenMode& (0+255),w,b
  7680  001750  A4D8               	btfss	status,2,c
  7681  001752  0012               	return	
  7682                           
  7683                           ; BSR set to: 0
  7684                           ;main.c: 384: screenMode = 2;
  7685  001754  0E02               	movlw	2
  7686  001756  0100               	movlb	0	; () banked
  7687  001758  6FD1               	movwf	_screenMode& (0+255),b
  7688                           
  7689                           ; BSR set to: 0
  7690                           ;main.c: 385: }
  7691                           
  7692                           ; BSR set to: 0
  7693  00175A  0012               	return	
  7694  00175C                     i2l3832:
  7695                           
  7696                           ;main.c: 386: else if (screenMode == 1){
  7697  00175C  0100               	movlb	0	; () banked
  7698  00175E  05D1               	decf	_screenMode& (0+255),w,b
  7699  001760  A4D8               	btfss	status,2,c
  7700  001762  D00A               	goto	i2l3840
  7701                           
  7702                           ; BSR set to: 0
  7703                           ;main.c: 387: if (key == '#'){
  7704  001764  0E23               	movlw	35
  7705  001766  1822               	xorwf	switchMenu@key,w,c
  7706  001768  A4D8               	btfss	status,2,c
  7707  00176A  0012               	return	
  7708                           
  7709                           ; BSR set to: 0
  7710                           ;main.c: 388: screenMode = 11;
  7711  00176C  0E0B               	movlw	11
  7712  00176E  0100               	movlb	0	; () banked
  7713  001770  6FD1               	movwf	_screenMode& (0+255),b
  7714                           
  7715                           ; BSR set to: 0
  7716                           ;main.c: 390: stopOperation();
  7717  001772  EC62  F00C         	call	i2_stopOperation	;wreg free
  7718                           
  7719                           ;main.c: 391: }
  7720                           ;main.c: 392: }
  7721  001776  0012               	return	
  7722  001778                     i2l3840:
  7723                           
  7724                           ;main.c: 393: else if (screenMode != 0){
  7725  001778  0100               	movlb	0	; () banked
  7726  00177A  51D1               	movf	_screenMode& (0+255),w,b
  7727  00177C  B4D8               	btfsc	status,2,c
  7728  00177E  0012               	return	
  7729                           
  7730                           ; BSR set to: 0
  7731                           ;main.c: 394: if (key == right){
  7732  001780  5021               	movf	switchMenu@right,w,c
  7733  001782  1822               	xorwf	switchMenu@key,w,c
  7734  001784  A4D8               	btfss	status,2,c
  7735  001786  D00C               	goto	i2l3850
  7736                           
  7737                           ; BSR set to: 0
  7738                           ;main.c: 395: if (screenMode == 2)
  7739  001788  0E02               	movlw	2
  7740  00178A  0100               	movlb	0	; () banked
  7741  00178C  19D1               	xorwf	_screenMode& (0+255),w,b
  7742  00178E  A4D8               	btfss	status,2,c
  7743  001790  D004               	goto	i2l3848
  7744                           
  7745                           ; BSR set to: 0
  7746                           ;main.c: 396: screenMode = 10;
  7747  001792  0E0A               	movlw	10
  7748  001794  0100               	movlb	0	; () banked
  7749  001796  6FD1               	movwf	_screenMode& (0+255),b
  7750  001798  0012               	return	
  7751  00179A                     i2l3848:
  7752                           
  7753                           ; BSR set to: 0
  7754                           ;main.c: 397: else
  7755                           ;main.c: 398: screenMode--;
  7756  00179A  0100               	movlb	0	; () banked
  7757  00179C  07D1               	decf	_screenMode& (0+255),f,b
  7758                           
  7759                           ; BSR set to: 0
  7760                           ;main.c: 399: }
  7761  00179E  0012               	return	
  7762  0017A0                     i2l3850:
  7763                           
  7764                           ; BSR set to: 0
  7765                           ;main.c: 400: else if (key == left){
  7766  0017A0  5023               	movf	switchMenu@left,w,c
  7767  0017A2  1822               	xorwf	switchMenu@key,w,c
  7768  0017A4  A4D8               	btfss	status,2,c
  7769  0017A6  0012               	return	
  7770                           
  7771                           ; BSR set to: 0
  7772                           ;main.c: 401: if (screenMode == 10)
  7773  0017A8  0E0A               	movlw	10
  7774  0017AA  0100               	movlb	0	; () banked
  7775  0017AC  19D1               	xorwf	_screenMode& (0+255),w,b
  7776  0017AE  A4D8               	btfss	status,2,c
  7777  0017B0  D004               	goto	i2l3856
  7778                           
  7779                           ; BSR set to: 0
  7780                           ;main.c: 402: screenMode = 2;
  7781  0017B2  0E02               	movlw	2
  7782  0017B4  0100               	movlb	0	; () banked
  7783  0017B6  6FD1               	movwf	_screenMode& (0+255),b
  7784  0017B8  0012               	return	
  7785  0017BA                     i2l3856:
  7786                           
  7787                           ; BSR set to: 0
  7788                           ;main.c: 403: else
  7789                           ;main.c: 404: screenMode++;
  7790  0017BA  0100               	movlb	0	; () banked
  7791  0017BC  2BD1               	incf	_screenMode& (0+255),f,b
  7792                           
  7793                           ; BSR set to: 0
  7794                           
  7795                           ; BSR set to: 0
  7796                           
  7797                           ; BSR set to: 0
  7798                           
  7799                           ; BSR set to: 0
  7800                           
  7801                           ; BSR set to: 0
  7802  0017BE  0012               	return	
  7803  0017C0                     __end_of_switchMenu:
  7804                           	opt stack 0
  7805                           pclatu	equ	0xFFB
  7806                           pclath	equ	0xFFA
  7807                           tblptru	equ	0xFF8
  7808                           tblptrh	equ	0xFF7
  7809                           tblptrl	equ	0xFF6
  7810                           tablat	equ	0xFF5
  7811                           prodh	equ	0xFF4
  7812                           prodl	equ	0xFF3
  7813                           intcon	equ	0xFF2
  7814                           intcon3	equ	0xFF0
  7815                           postinc0	equ	0xFEE
  7816                           fsr0h	equ	0xFEA
  7817                           fsr0l	equ	0xFE9
  7818                           wreg	equ	0xFE8
  7819                           fsr1h	equ	0xFE2
  7820                           fsr1l	equ	0xFE1
  7821                           indf2	equ	0xFDF
  7822                           postinc2	equ	0xFDE
  7823                           postdec2	equ	0xFDD
  7824                           fsr2h	equ	0xFDA
  7825                           fsr2l	equ	0xFD9
  7826                           status	equ	0xFD8
  7827                           
  7828 ;; *************** function i2_stopOperation *****************
  7829 ;; Defined at:
  7830 ;;		line 417 in file "../main.c"
  7831 ;; Parameters:    Size  Location     Type
  7832 ;;		None
  7833 ;; Auto vars:     Size  Location     Type
  7834 ;;		None
  7835 ;; Return value:  Size  Location     Type
  7836 ;;                  1    wreg      void 
  7837 ;; Registers used:
  7838 ;;		wreg, status,2, status,0, cstack
  7839 ;; Tracked objects:
  7840 ;;		On entry : 0/0
  7841 ;;		On exit  : 0/0
  7842 ;;		Unchanged: 0/0
  7843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7844 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7845 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7846 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7847 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7848 ;;Total ram usage:        0 bytes
  7849 ;; Hardware stack levels used:    1
  7850 ;; Hardware stack levels required when called:    1
  7851 ;; This function calls:
  7852 ;;		i2___awdiv
  7853 ;;		i2___awmod
  7854 ;; This function is called by:
  7855 ;;		_switchMenu
  7856 ;;		_ISR
  7857 ;; This function uses a non-reentrant model
  7858 ;;
  7859                           
  7860                           	psect	text25
  7861  0018C4                     __ptext25:
  7862                           	opt stack 0
  7863  0018C4                     i2_stopOperation:
  7864                           	opt stack 25
  7865                           
  7866                           ;main.c: 418: T0CONbits.TMR0ON = 0;
  7867                           
  7868                           ;incstack = 0
  7869  0018C4  9ED5               	bcf	4053,7,c	;volatile
  7870                           
  7871                           ;main.c: 419: T1CONbits.TMR1ON = 0;
  7872  0018C6  90CD               	bcf	4045,0,c	;volatile
  7873                           
  7874                           ;main.c: 420: TMR0 = 55770;
  7875  0018C8  0ED9               	movlw	217
  7876  0018CA  6ED7               	movwf	4055,c	;volatile
  7877  0018CC  0EDA               	movlw	218
  7878  0018CE  6ED6               	movwf	4054,c	;volatile
  7879                           
  7880                           ;main.c: 421: TMR1 = 58035;
  7881  0018D0  0EE2               	movlw	226
  7882  0018D2  6ECF               	movwf	4047,c	;volatile
  7883  0018D4  0EB3               	movlw	179
  7884  0018D6  6ECE               	movwf	4046,c	;volatile
  7885                           
  7886                           ;main.c: 422: num9V = count9V;
  7887  0018D8  C0C0  F0C5         	movff	_count9V,_num9V
  7888                           
  7889                           ;main.c: 423: numC = countC;
  7890  0018DC  C0C2  F0C8         	movff	_countC,_numC
  7891                           
  7892                           ;main.c: 424: numAA = countAA;
  7893  0018E0  C0C1  F0C6         	movff	_countAA,_numAA
  7894                           
  7895                           ;main.c: 425: numDrain = countDrain;
  7896  0018E4  C0C3  F0C9         	movff	_countDrain,_numDrain
  7897                           
  7898                           ;main.c: 426: numBats = count9V + countC + countAA + countDrain;
  7899  0018E8  0100               	movlb	0	; () banked
  7900  0018EA  51C0               	movf	_count9V& (0+255),w,b
  7901  0018EC  0100               	movlb	0	; () banked
  7902  0018EE  25C2               	addwf	_countC& (0+255),w,b
  7903  0018F0  0100               	movlb	0	; () banked
  7904  0018F2  25C1               	addwf	_countAA& (0+255),w,b
  7905  0018F4  0100               	movlb	0	; () banked
  7906  0018F6  25C3               	addwf	_countDrain& (0+255),w,b
  7907  0018F8  0100               	movlb	0	; () banked
  7908  0018FA  6FC7               	movwf	_numBats& (0+255),b
  7909                           
  7910                           ; BSR set to: 0
  7911                           ;main.c: 427: count9V = 0;
  7912  0018FC  0E00               	movlw	0
  7913  0018FE  0100               	movlb	0	; () banked
  7914  001900  6FC0               	movwf	_count9V& (0+255),b
  7915                           
  7916                           ; BSR set to: 0
  7917                           ;main.c: 428: countC = 0;
  7918  001902  0E00               	movlw	0
  7919  001904  0100               	movlb	0	; () banked
  7920  001906  6FC2               	movwf	_countC& (0+255),b
  7921                           
  7922                           ; BSR set to: 0
  7923                           ;main.c: 429: countAA = 0;
  7924  001908  0E00               	movlw	0
  7925  00190A  0100               	movlb	0	; () banked
  7926  00190C  6FC1               	movwf	_countAA& (0+255),b
  7927                           
  7928                           ; BSR set to: 0
  7929                           ;main.c: 430: countDrain = 0;
  7930  00190E  0E00               	movlw	0
  7931  001910  0100               	movlb	0	; () banked
  7932  001912  6FC3               	movwf	_countDrain& (0+255),b
  7933                           
  7934                           ; BSR set to: 0
  7935                           ;main.c: 431: min = opTimer / 60;
  7936  001914  C046  F001         	movff	_opTimer,i2___awdiv@dividend
  7937  001918  6A02               	clrf	i2___awdiv@dividend+1,c
  7938  00191A  0E00               	movlw	0
  7939  00191C  6E04               	movwf	i2___awdiv@divisor+1,c
  7940  00191E  0E3C               	movlw	60
  7941  001920  6E03               	movwf	i2___awdiv@divisor,c
  7942  001922  EC6D  F00D         	call	i2___awdiv	;wreg free
  7943  001926  5001               	movf	?i2___awdiv,w,c
  7944  001928  0100               	movlb	0	; () banked
  7945  00192A  6FC4               	movwf	_min& (0+255),b
  7946                           
  7947                           ; BSR set to: 0
  7948                           ;main.c: 432: sec = opTimer % 60;
  7949  00192C  C046  F001         	movff	_opTimer,i2___awmod@dividend
  7950  001930  6A02               	clrf	i2___awmod@dividend+1,c
  7951  001932  0E00               	movlw	0
  7952  001934  6E04               	movwf	i2___awmod@divisor+1,c
  7953  001936  0E3C               	movlw	60
  7954  001938  6E03               	movwf	i2___awmod@divisor,c
  7955  00193A  ECE7  F00D         	call	i2___awmod	;wreg free
  7956  00193E  5001               	movf	?i2___awmod,w,c
  7957  001940  0100               	movlb	0	; () banked
  7958  001942  6FCA               	movwf	_sec& (0+255),b
  7959                           
  7960                           ; BSR set to: 0
  7961                           ;main.c: 433: opTimer = 0;
  7962  001944  0E00               	movlw	0
  7963  001946  6E46               	movwf	_opTimer,c
  7964                           
  7965                           ; BSR set to: 0
  7966                           ;main.c: 434: doneTimer = 0;
  7967  001948  0E00               	movlw	0
  7968  00194A  6E44               	movwf	_doneTimer,c
  7969                           
  7970                           ; BSR set to: 0
  7971                           ;main.c: 435: stepGear = 0;
  7972  00194C  0E00               	movlw	0
  7973  00194E  0100               	movlb	0	; () banked
  7974  001950  6FCC               	movwf	_stepGear& (0+255),b
  7975                           
  7976                           ; BSR set to: 0
  7977                           ;main.c: 436: stepAmount = 0;
  7978  001952  0E00               	movlw	0
  7979  001954  6E43               	movwf	_stepAmount+1,c
  7980  001956  0E00               	movlw	0
  7981  001958  6E42               	movwf	_stepAmount,c
  7982                           
  7983                           ; BSR set to: 0
  7984                           ;main.c: 437: sorting = 0;
  7985  00195A  0E00               	movlw	0
  7986  00195C  6E48               	movwf	_sorting,c
  7987                           
  7988                           ; BSR set to: 0
  7989                           ;main.c: 438: plat1Left = 0;
  7990  00195E  0E00               	movlw	0
  7991  001960  0100               	movlb	0	; () banked
  7992  001962  6FB9               	movwf	(_plat1Left+1)& (0+255),b
  7993  001964  0E00               	movlw	0
  7994  001966  6FB8               	movwf	_plat1Left& (0+255),b
  7995                           
  7996                           ; BSR set to: 0
  7997                           ;main.c: 439: plat1Right = 0;
  7998  001968  0E00               	movlw	0
  7999  00196A  0100               	movlb	0	; () banked
  8000  00196C  6FBB               	movwf	(_plat1Right+1)& (0+255),b
  8001  00196E  0E00               	movlw	0
  8002  001970  6FBA               	movwf	_plat1Right& (0+255),b
  8003                           
  8004                           ; BSR set to: 0
  8005                           ;main.c: 440: plat2Left = 0;
  8006  001972  0E00               	movlw	0
  8007  001974  0100               	movlb	0	; () banked
  8008  001976  6FBD               	movwf	(_plat2Left+1)& (0+255),b
  8009  001978  0E00               	movlw	0
  8010  00197A  6FBC               	movwf	_plat2Left& (0+255),b
  8011                           
  8012                           ; BSR set to: 0
  8013                           ;main.c: 441: plat2Right = 0;
  8014  00197C  0E00               	movlw	0
  8015  00197E  0100               	movlb	0	; () banked
  8016  001980  6FBF               	movwf	(_plat2Right+1)& (0+255),b
  8017  001982  0E00               	movlw	0
  8018  001984  6FBE               	movwf	_plat2Right& (0+255),b
  8019                           
  8020                           ; BSR set to: 0
  8021                           ;main.c: 442: turn2BackLeft = 0;
  8022  001986  0E00               	movlw	0
  8023  001988  0100               	movlb	0	; () banked
  8024  00198A  6FCF               	movwf	_turn2BackLeft& (0+255),b
  8025                           
  8026                           ; BSR set to: 0
  8027                           ;main.c: 443: turn1BackLeft = 0;
  8028  00198C  0E00               	movlw	0
  8029  00198E  0100               	movlb	0	; () banked
  8030  001990  6FCD               	movwf	_turn1BackLeft& (0+255),b
  8031                           
  8032                           ; BSR set to: 0
  8033                           ;main.c: 444: turn2BackRight = 0;
  8034  001992  0E00               	movlw	0
  8035  001994  0100               	movlb	0	; () banked
  8036  001996  6FD0               	movwf	_turn2BackRight& (0+255),b
  8037                           
  8038                           ; BSR set to: 0
  8039                           ;main.c: 445: turn1BackRight = 0;
  8040  001998  0E00               	movlw	0
  8041  00199A  0100               	movlb	0	; () banked
  8042  00199C  6FCE               	movwf	_turn1BackRight& (0+255),b
  8043                           
  8044                           ; BSR set to: 0
  8045                           ;main.c: 446: count_3ms = 0;
  8046  00199E  0E00               	movlw	0
  8047  0019A0  6E41               	movwf	_count_3ms+1,c
  8048  0019A2  0E00               	movlw	0
  8049  0019A4  6E40               	movwf	_count_3ms,c
  8050                           
  8051                           ; BSR set to: 0
  8052                           ;main.c: 447: doubleAA = 0;
  8053  0019A6  0E00               	movlw	0
  8054  0019A8  6E45               	movwf	_doubleAA,c
  8055                           
  8056                           ; BSR set to: 0
  8057                           ;main.c: 448: solOnTimer = 0;
  8058  0019AA  0E00               	movlw	0
  8059  0019AC  6E47               	movwf	_solOnTimer,c
  8060                           
  8061                           ; BSR set to: 0
  8062                           ;main.c: 450: LATCbits.LC1 = 0;;
  8063  0019AE  928B               	bcf	3979,1,c	;volatile
  8064                           
  8065                           ; BSR set to: 0
  8066                           ;main.c: 451: LATCbits.LC2 = 0;;
  8067  0019B0  948B               	bcf	3979,2,c	;volatile
  8068                           
  8069                           ; BSR set to: 0
  8070                           ;main.c: 452: LATCbits.LC5 = 0;;
  8071  0019B2  9A8B               	bcf	3979,5,c	;volatile
  8072                           
  8073                           ; BSR set to: 0
  8074                           ;main.c: 453: LATCbits.LC6 = 0;;
  8075  0019B4  9C8B               	bcf	3979,6,c	;volatile
  8076                           
  8077                           ; BSR set to: 0
  8078                           ;main.c: 454: LATCbits.LC0 = 0;;
  8079  0019B6  908B               	bcf	3979,0,c	;volatile
  8080                           
  8081                           ; BSR set to: 0
  8082                           ;main.c: 455: LATEbits.LE2 = 0;;
  8083  0019B8  948D               	bcf	3981,2,c	;volatile
  8084                           
  8085                           ; BSR set to: 0
  8086                           ;main.c: 456: LATEbits.LE1 = 0;;
  8087  0019BA  928D               	bcf	3981,1,c	;volatile
  8088                           
  8089                           ; BSR set to: 0
  8090                           ;main.c: 457: LATAbits.LA4 = 0;;
  8091  0019BC  9889               	bcf	3977,4,c	;volatile
  8092                           
  8093                           ; BSR set to: 0
  8094                           ;main.c: 458: LATDbits.LD0= 0;;
  8095  0019BE  908C               	bcf	3980,0,c	;volatile
  8096                           
  8097                           ; BSR set to: 0
  8098                           ;main.c: 459: LATCbits.LC7 = 0;;
  8099  0019C0  9E8B               	bcf	3979,7,c	;volatile
  8100                           
  8101                           ; BSR set to: 0
  8102                           ;main.c: 460: LATDbits.LD1 = 0;;
  8103  0019C2  928C               	bcf	3980,1,c	;volatile
  8104                           
  8105                           ; BSR set to: 0
  8106                           ;main.c: 461: LATBbits.LB0 = 0;;
  8107  0019C4  908A               	bcf	3978,0,c	;volatile
  8108                           
  8109                           ; BSR set to: 0
  8110  0019C6  0012               	return		;funcret
  8111  0019C8                     __end_ofi2_stopOperation:
  8112                           	opt stack 0
  8113                           pclatu	equ	0xFFB
  8114                           pclath	equ	0xFFA
  8115                           tblptru	equ	0xFF8
  8116                           tblptrh	equ	0xFF7
  8117                           tblptrl	equ	0xFF6
  8118                           tablat	equ	0xFF5
  8119                           prodh	equ	0xFF4
  8120                           prodl	equ	0xFF3
  8121                           intcon	equ	0xFF2
  8122                           intcon3	equ	0xFF0
  8123                           postinc0	equ	0xFEE
  8124                           fsr0h	equ	0xFEA
  8125                           fsr0l	equ	0xFE9
  8126                           wreg	equ	0xFE8
  8127                           fsr1h	equ	0xFE2
  8128                           fsr1l	equ	0xFE1
  8129                           indf2	equ	0xFDF
  8130                           postinc2	equ	0xFDE
  8131                           postdec2	equ	0xFDD
  8132                           fsr2h	equ	0xFDA
  8133                           fsr2l	equ	0xFD9
  8134                           status	equ	0xFD8
  8135                           
  8136 ;; *************** function i2___awmod *****************
  8137 ;; Defined at:
  8138 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  8139 ;; Parameters:    Size  Location     Type
  8140 ;;  dividend        2    0[COMRAM] int 
  8141 ;;  divisor         2    2[COMRAM] int 
  8142 ;; Auto vars:     Size  Location     Type
  8143 ;;  __awmod         1    5[COMRAM] unsigned char 
  8144 ;;  __awmod         1    4[COMRAM] unsigned char 
  8145 ;; Return value:  Size  Location     Type
  8146 ;;                  2    0[COMRAM] int 
  8147 ;; Registers used:
  8148 ;;		wreg, status,2, status,0
  8149 ;; Tracked objects:
  8150 ;;		On entry : 0/0
  8151 ;;		On exit  : 0/0
  8152 ;;		Unchanged: 0/0
  8153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8154 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8155 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8156 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8157 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8158 ;;Total ram usage:        6 bytes
  8159 ;; Hardware stack levels used:    1
  8160 ;; This function calls:
  8161 ;;		Nothing
  8162 ;; This function is called by:
  8163 ;;		_ISR
  8164 ;;		i2_stopOperation
  8165 ;; This function uses a non-reentrant model
  8166 ;;
  8167                           
  8168                           	psect	text26
  8169  001BCE                     __ptext26:
  8170                           	opt stack 0
  8171  001BCE                     i2___awmod:
  8172                           	opt stack 25
  8173                           
  8174                           ; BSR set to: 0
  8175                           ;incstack = 0
  8176  001BCE  0E00               	movlw	0
  8177  001BD0  6E06               	movwf	i2___awmod@sign,c
  8178  001BD2  AE02               	btfss	i2___awmod@dividend+1,7,c
  8179  001BD4  D006               	goto	i2l2912
  8180  001BD6  6C01               	negf	i2___awmod@dividend,c
  8181  001BD8  1E02               	comf	i2___awmod@dividend+1,f,c
  8182  001BDA  B0D8               	btfsc	status,0,c
  8183  001BDC  2A02               	incf	i2___awmod@dividend+1,f,c
  8184  001BDE  0E01               	movlw	1
  8185  001BE0  6E06               	movwf	i2___awmod@sign,c
  8186  001BE2                     i2l2912:
  8187  001BE2  AE04               	btfss	i2___awmod@divisor+1,7,c
  8188  001BE4  D004               	goto	i2l2916
  8189  001BE6  6C03               	negf	i2___awmod@divisor,c
  8190  001BE8  1E04               	comf	i2___awmod@divisor+1,f,c
  8191  001BEA  B0D8               	btfsc	status,0,c
  8192  001BEC  2A04               	incf	i2___awmod@divisor+1,f,c
  8193  001BEE                     i2l2916:
  8194  001BEE  5003               	movf	i2___awmod@divisor,w,c
  8195  001BF0  1004               	iorwf	i2___awmod@divisor+1,w,c
  8196  001BF2  B4D8               	btfsc	status,2,c
  8197  001BF4  D018               	goto	i2l2932
  8198  001BF6  0E01               	movlw	1
  8199  001BF8  6E05               	movwf	i2___awmod@counter,c
  8200  001BFA  D004               	goto	i2l2922
  8201  001BFC                     i2l2920:
  8202  001BFC  90D8               	bcf	status,0,c
  8203  001BFE  3603               	rlcf	i2___awmod@divisor,f,c
  8204  001C00  3604               	rlcf	i2___awmod@divisor+1,f,c
  8205  001C02  2A05               	incf	i2___awmod@counter,f,c
  8206  001C04                     i2l2922:
  8207  001C04  AE04               	btfss	i2___awmod@divisor+1,7,c
  8208  001C06  D7FA               	goto	i2l2920
  8209  001C08                     i2l2924:
  8210  001C08  5003               	movf	i2___awmod@divisor,w,c
  8211  001C0A  5C01               	subwf	i2___awmod@dividend,w,c
  8212  001C0C  5004               	movf	i2___awmod@divisor+1,w,c
  8213  001C0E  5802               	subwfb	i2___awmod@dividend+1,w,c
  8214  001C10  A0D8               	btfss	status,0,c
  8215  001C12  D004               	goto	i2l2928
  8216  001C14  5003               	movf	i2___awmod@divisor,w,c
  8217  001C16  5E01               	subwf	i2___awmod@dividend,f,c
  8218  001C18  5004               	movf	i2___awmod@divisor+1,w,c
  8219  001C1A  5A02               	subwfb	i2___awmod@dividend+1,f,c
  8220  001C1C                     i2l2928:
  8221  001C1C  90D8               	bcf	status,0,c
  8222  001C1E  3204               	rrcf	i2___awmod@divisor+1,f,c
  8223  001C20  3203               	rrcf	i2___awmod@divisor,f,c
  8224  001C22  2E05               	decfsz	i2___awmod@counter,f,c
  8225  001C24  D7F1               	goto	i2l2924
  8226  001C26                     i2l2932:
  8227  001C26  5006               	movf	i2___awmod@sign,w,c
  8228  001C28  B4D8               	btfsc	status,2,c
  8229  001C2A  D004               	goto	i2l2936
  8230  001C2C  6C01               	negf	i2___awmod@dividend,c
  8231  001C2E  1E02               	comf	i2___awmod@dividend+1,f,c
  8232  001C30  B0D8               	btfsc	status,0,c
  8233  001C32  2A02               	incf	i2___awmod@dividend+1,f,c
  8234  001C34                     i2l2936:
  8235  001C34  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
  8236  001C38  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
  8237  001C3C  0012               	return	
  8238  001C3E                     __end_ofi2___awmod:
  8239                           	opt stack 0
  8240                           pclatu	equ	0xFFB
  8241                           pclath	equ	0xFFA
  8242                           tblptru	equ	0xFF8
  8243                           tblptrh	equ	0xFF7
  8244                           tblptrl	equ	0xFF6
  8245                           tablat	equ	0xFF5
  8246                           prodh	equ	0xFF4
  8247                           prodl	equ	0xFF3
  8248                           intcon	equ	0xFF2
  8249                           intcon3	equ	0xFF0
  8250                           postinc0	equ	0xFEE
  8251                           fsr0h	equ	0xFEA
  8252                           fsr0l	equ	0xFE9
  8253                           wreg	equ	0xFE8
  8254                           fsr1h	equ	0xFE2
  8255                           fsr1l	equ	0xFE1
  8256                           indf2	equ	0xFDF
  8257                           postinc2	equ	0xFDE
  8258                           postdec2	equ	0xFDD
  8259                           fsr2h	equ	0xFDA
  8260                           fsr2l	equ	0xFD9
  8261                           status	equ	0xFD8
  8262                           
  8263 ;; *************** function i2___awdiv *****************
  8264 ;; Defined at:
  8265 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  8266 ;; Parameters:    Size  Location     Type
  8267 ;;  dividend        2    0[COMRAM] int 
  8268 ;;  divisor         2    2[COMRAM] int 
  8269 ;; Auto vars:     Size  Location     Type
  8270 ;;  __awdiv         2    6[COMRAM] int 
  8271 ;;  __awdiv         1    5[COMRAM] unsigned char 
  8272 ;;  __awdiv         1    4[COMRAM] unsigned char 
  8273 ;; Return value:  Size  Location     Type
  8274 ;;                  2    0[COMRAM] int 
  8275 ;; Registers used:
  8276 ;;		wreg, status,2, status,0
  8277 ;; Tracked objects:
  8278 ;;		On entry : 0/0
  8279 ;;		On exit  : 0/0
  8280 ;;		Unchanged: 0/0
  8281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8282 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8283 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8284 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8285 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8286 ;;Total ram usage:        8 bytes
  8287 ;; Hardware stack levels used:    1
  8288 ;; This function calls:
  8289 ;;		Nothing
  8290 ;; This function is called by:
  8291 ;;		_ISR
  8292 ;;		i2_stopOperation
  8293 ;; This function uses a non-reentrant model
  8294 ;;
  8295                           
  8296                           	psect	text27
  8297  001ADA                     __ptext27:
  8298                           	opt stack 0
  8299  001ADA                     i2___awdiv:
  8300                           	opt stack 25
  8301                           
  8302                           ;incstack = 0
  8303  001ADA  0E00               	movlw	0
  8304  001ADC  6E06               	movwf	i2___awdiv@sign,c
  8305  001ADE  AE04               	btfss	i2___awdiv@divisor+1,7,c
  8306  001AE0  D006               	goto	i2l2868
  8307  001AE2  6C03               	negf	i2___awdiv@divisor,c
  8308  001AE4  1E04               	comf	i2___awdiv@divisor+1,f,c
  8309  001AE6  B0D8               	btfsc	status,0,c
  8310  001AE8  2A04               	incf	i2___awdiv@divisor+1,f,c
  8311  001AEA  0E01               	movlw	1
  8312  001AEC  6E06               	movwf	i2___awdiv@sign,c
  8313  001AEE                     i2l2868:
  8314  001AEE  AE02               	btfss	i2___awdiv@dividend+1,7,c
  8315  001AF0  D006               	goto	i2l2874
  8316  001AF2  6C01               	negf	i2___awdiv@dividend,c
  8317  001AF4  1E02               	comf	i2___awdiv@dividend+1,f,c
  8318  001AF6  B0D8               	btfsc	status,0,c
  8319  001AF8  2A02               	incf	i2___awdiv@dividend+1,f,c
  8320  001AFA  0E01               	movlw	1
  8321  001AFC  1A06               	xorwf	i2___awdiv@sign,f,c
  8322  001AFE                     i2l2874:
  8323  001AFE  0E00               	movlw	0
  8324  001B00  6E08               	movwf	i2___awdiv@quotient+1,c
  8325  001B02  0E00               	movlw	0
  8326  001B04  6E07               	movwf	i2___awdiv@quotient,c
  8327  001B06  5003               	movf	i2___awdiv@divisor,w,c
  8328  001B08  1004               	iorwf	i2___awdiv@divisor+1,w,c
  8329  001B0A  B4D8               	btfsc	status,2,c
  8330  001B0C  D01C               	goto	i2l2896
  8331  001B0E  0E01               	movlw	1
  8332  001B10  6E05               	movwf	i2___awdiv@counter,c
  8333  001B12  D004               	goto	i2l2882
  8334  001B14                     i2l2880:
  8335  001B14  90D8               	bcf	status,0,c
  8336  001B16  3603               	rlcf	i2___awdiv@divisor,f,c
  8337  001B18  3604               	rlcf	i2___awdiv@divisor+1,f,c
  8338  001B1A  2A05               	incf	i2___awdiv@counter,f,c
  8339  001B1C                     i2l2882:
  8340  001B1C  AE04               	btfss	i2___awdiv@divisor+1,7,c
  8341  001B1E  D7FA               	goto	i2l2880
  8342  001B20                     i2l2884:
  8343  001B20  90D8               	bcf	status,0,c
  8344  001B22  3607               	rlcf	i2___awdiv@quotient,f,c
  8345  001B24  3608               	rlcf	i2___awdiv@quotient+1,f,c
  8346  001B26  5003               	movf	i2___awdiv@divisor,w,c
  8347  001B28  5C01               	subwf	i2___awdiv@dividend,w,c
  8348  001B2A  5004               	movf	i2___awdiv@divisor+1,w,c
  8349  001B2C  5802               	subwfb	i2___awdiv@dividend+1,w,c
  8350  001B2E  A0D8               	btfss	status,0,c
  8351  001B30  D005               	goto	i2l2892
  8352  001B32  5003               	movf	i2___awdiv@divisor,w,c
  8353  001B34  5E01               	subwf	i2___awdiv@dividend,f,c
  8354  001B36  5004               	movf	i2___awdiv@divisor+1,w,c
  8355  001B38  5A02               	subwfb	i2___awdiv@dividend+1,f,c
  8356  001B3A  8007               	bsf	i2___awdiv@quotient,0,c
  8357  001B3C                     i2l2892:
  8358  001B3C  90D8               	bcf	status,0,c
  8359  001B3E  3204               	rrcf	i2___awdiv@divisor+1,f,c
  8360  001B40  3203               	rrcf	i2___awdiv@divisor,f,c
  8361  001B42  2E05               	decfsz	i2___awdiv@counter,f,c
  8362  001B44  D7ED               	goto	i2l2884
  8363  001B46                     i2l2896:
  8364  001B46  5006               	movf	i2___awdiv@sign,w,c
  8365  001B48  B4D8               	btfsc	status,2,c
  8366  001B4A  D004               	goto	i2l2900
  8367  001B4C  6C07               	negf	i2___awdiv@quotient,c
  8368  001B4E  1E08               	comf	i2___awdiv@quotient+1,f,c
  8369  001B50  B0D8               	btfsc	status,0,c
  8370  001B52  2A08               	incf	i2___awdiv@quotient+1,f,c
  8371  001B54                     i2l2900:
  8372  001B54  C007  F001         	movff	i2___awdiv@quotient,?i2___awdiv
  8373  001B58  C008  F002         	movff	i2___awdiv@quotient+1,?i2___awdiv+1
  8374  001B5C  0012               	return	
  8375  001B5E                     __end_ofi2___awdiv:
  8376                           	opt stack 0
  8377                           pclatu	equ	0xFFB
  8378                           pclath	equ	0xFFA
  8379                           tblptru	equ	0xFF8
  8380                           tblptrh	equ	0xFF7
  8381                           tblptrl	equ	0xFF6
  8382                           tablat	equ	0xFF5
  8383                           prodh	equ	0xFF4
  8384                           prodl	equ	0xFF3
  8385                           intcon	equ	0xFF2
  8386                           intcon3	equ	0xFF0
  8387                           postinc0	equ	0xFEE
  8388                           fsr0h	equ	0xFEA
  8389                           fsr0l	equ	0xFE9
  8390                           wreg	equ	0xFE8
  8391                           fsr1h	equ	0xFE2
  8392                           fsr1l	equ	0xFE1
  8393                           indf2	equ	0xFDF
  8394                           postinc2	equ	0xFDE
  8395                           postdec2	equ	0xFDD
  8396                           fsr2h	equ	0xFDA
  8397                           fsr2l	equ	0xFD9
  8398                           status	equ	0xFD8
  8399                           
  8400 ;; *************** function i2_printf *****************
  8401 ;; Defined at:
  8402 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  8403 ;; Parameters:    Size  Location     Type
  8404 ;;  f               2   12[COMRAM] PTR const unsigned char 
  8405 ;;		 -> STR_27(22), STR_26(17), STR_25(17), STR_24(17), 
  8406 ;;		 -> STR_23(23), STR_22(23), STR_21(23), STR_20(23), 
  8407 ;;		 -> STR_19(17), STR_18(21), STR_17(17), STR_16(21), 
  8408 ;;		 -> STR_15(17), STR_14(21), STR_13(17), STR_12(19), 
  8409 ;;		 -> STR_11(17), STR_10(19), STR_9(17), STR_8(25), 
  8410 ;;		 -> STR_7(17), STR_6(17), STR_5(17), STR_4(17), 
  8411 ;;		 -> STR_3(17), STR_2(17), STR_1(17), 
  8412 ;; Auto vars:     Size  Location     Type
  8413 ;;  printf          4    0        struct .
  8414 ;;  printf          3    0        PTR const unsigned char 
  8415 ;;  printf          2   29[COMRAM] int 
  8416 ;;  printf          2   26[COMRAM] unsigned int 
  8417 ;;  printf          2   23[COMRAM] PTR void [1]
  8418 ;;		 -> ?i2_printf(2), ?_printf(2), 
  8419 ;;  printf          2    0        unsigned int 
  8420 ;;  printf          1   31[COMRAM] char 
  8421 ;;  printf          1   28[COMRAM] unsigned char 
  8422 ;;  printf          1   25[COMRAM] char 
  8423 ;;  printf          1   22[COMRAM] unsigned char 
  8424 ;; Return value:  Size  Location     Type
  8425 ;;                  2   12[COMRAM] int 
  8426 ;; Registers used:
  8427 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8428 ;; Tracked objects:
  8429 ;;		On entry : 0/0
  8430 ;;		On exit  : 0/0
  8431 ;;		Unchanged: 0/0
  8432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8433 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8434 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8435 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8436 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8437 ;;Total ram usage:       20 bytes
  8438 ;; Hardware stack levels used:    1
  8439 ;; Hardware stack levels required when called:    2
  8440 ;; This function calls:
  8441 ;;		i2___lwdiv
  8442 ;;		i2___lwmod
  8443 ;;		i2___wmul
  8444 ;;		i2_isdigit
  8445 ;;		i2_putch
  8446 ;; This function is called by:
  8447 ;;		_switchMenu
  8448 ;;		_ISR
  8449 ;; This function uses a non-reentrant model
  8450 ;;
  8451                           
  8452                           	psect	text28
  8453  0011C6                     __ptext28:
  8454                           	opt stack 0
  8455  0011C6                     i2_printf:
  8456                           	opt stack 24
  8457                           
  8458                           ;doprnt.c: 466: va_list ap;
  8459                           ;doprnt.c: 499: signed char c;
  8460                           ;doprnt.c: 501: int width;
  8461                           ;doprnt.c: 506: signed char prec;
  8462                           ;doprnt.c: 508: unsigned char flag;
  8463                           ;doprnt.c: 523: union {
  8464                           ;doprnt.c: 524: unsigned long vd;
  8465                           ;doprnt.c: 525: double integ;
  8466                           ;doprnt.c: 526: } tmpval;
  8467                           ;doprnt.c: 528: unsigned int val;
  8468                           ;doprnt.c: 529: unsigned len;
  8469                           ;doprnt.c: 530: const char * cp;
  8470                           ;doprnt.c: 533: *ap = __va_start();
  8471                           
  8472                           ;incstack = 0
  8473  0011C6  0E0F               	movlw	low (?i2_printf+2)
  8474  0011C8  6E18               	movwf	i2printf@ap,c
  8475  0011CA  0E00               	movlw	high (?i2_printf+2)
  8476  0011CC  6E19               	movwf	i2printf@ap+1,c
  8477                           
  8478                           ;doprnt.c: 536: while(c = *f++) {
  8479  0011CE  D174               	goto	i2l3406
  8480  0011D0                     i2l3280:
  8481                           
  8482                           ;doprnt.c: 538: if(c != '%')
  8483  0011D0  0E25               	movlw	37
  8484  0011D2  1820               	xorwf	i2printf@c,w,c
  8485  0011D4  B4D8               	btfsc	status,2,c
  8486  0011D6  D004               	goto	i2l3284
  8487                           
  8488                           ;doprnt.c: 540: {
  8489                           ;doprnt.c: 541: (putch(c) );
  8490  0011D8  5020               	movf	i2printf@c,w,c
  8491  0011DA  EC10  F010         	call	i2_putch
  8492                           
  8493                           ;doprnt.c: 542: continue;
  8494  0011DE  D16C               	goto	i2l3406
  8495  0011E0                     i2l3284:
  8496                           
  8497                           ;doprnt.c: 543: }
  8498                           ;doprnt.c: 546: width = 0;
  8499  0011E0  0E00               	movlw	0
  8500  0011E2  6E1F               	movwf	i2printf@width+1,c
  8501  0011E4  0E00               	movlw	0
  8502  0011E6  6E1E               	movwf	i2printf@width,c
  8503                           
  8504                           ;doprnt.c: 548: flag = 0;
  8505  0011E8  0E00               	movlw	0
  8506  0011EA  6E1D               	movwf	i2printf@flag,c
  8507                           
  8508                           ;doprnt.c: 551: switch(*f) {
  8509                           
  8510                           ;doprnt.c: 550: for(;;) {
  8511  0011EC  D003               	goto	i2l3290
  8512  0011EE                     i2l3286:
  8513                           
  8514                           ;doprnt.c: 580: flag |= 0x04;
  8515  0011EE  841D               	bsf	i2printf@flag,2,c
  8516                           
  8517                           ;doprnt.c: 581: f++;
  8518  0011F0  4A0D               	infsnz	i2printf@f,f,c
  8519  0011F2  2A0E               	incf	i2printf@f+1,f,c
  8520  0011F4                     i2l3290:
  8521  0011F4  C00D  FFF6         	movff	i2printf@f,tblptrl
  8522  0011F8  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  8523  0011FC                     	if	0	;tblptru may be non-zero
  8524  0011FC                     	endif
  8525  0011FC                     	if	0	;tblptru may be non-zero
  8526  0011FC                     	endif
  8527  0011FC  0008               	tblrd		*
  8528  0011FE  50F5               	movf	tablat,w,c
  8529                           
  8530                           ; Switch size 1, requested type "space"
  8531                           ; Number of cases is 1, Range of values is 48 to 48
  8532                           ; switch strategies available:
  8533                           ; Name         Instructions Cycles
  8534                           ; simple_byte            4     3 (average)
  8535                           ;	Chosen strategy is simple_byte
  8536  001200  0A30               	xorlw	48	; case 48
  8537  001202  B4D8               	btfsc	status,2,c
  8538  001204  D7F4               	goto	i2l3286
  8539                           
  8540                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  8541                           
  8542                           ;doprnt.c: 586: }
  8543                           
  8544                           ;doprnt.c: 585: break;
  8545  001206  C00D  FFF6         	movff	i2printf@f,tblptrl
  8546  00120A  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  8547  00120E                     	if	0	;tblptru may be non-zero
  8548  00120E                     	endif
  8549  00120E                     	if	0	;tblptru may be non-zero
  8550  00120E                     	endif
  8551  00120E  0008               	tblrd		*
  8552  001210  50F5               	movf	tablat,w,c
  8553  001212  ECCC  F00F         	call	i2_isdigit
  8554  001216  A0D8               	btfss	status,0,c
  8555  001218  D035               	goto	i2l3308
  8556                           
  8557                           ;doprnt.c: 598: width = 0;
  8558  00121A  0E00               	movlw	0
  8559  00121C  6E1F               	movwf	i2printf@width+1,c
  8560  00121E  0E00               	movlw	0
  8561  001220  6E1E               	movwf	i2printf@width,c
  8562  001222                     i2l3296:
  8563                           
  8564                           ;doprnt.c: 600: width *= 10;
  8565  001222  C01E  F001         	movff	i2printf@width,i2___wmul@multiplier
  8566  001226  C01F  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
  8567  00122A  0E00               	movlw	0
  8568  00122C  6E04               	movwf	i2___wmul@multiplicand+1,c
  8569  00122E  0E0A               	movlw	10
  8570  001230  6E03               	movwf	i2___wmul@multiplicand,c
  8571  001232  EC97  F00F         	call	i2___wmul	;wreg free
  8572  001236  C001  F01E         	movff	?i2___wmul,i2printf@width
  8573  00123A  C002  F01F         	movff	?i2___wmul+1,i2printf@width+1
  8574                           
  8575                           ;doprnt.c: 601: width += *f++ - '0';
  8576  00123E  0ED0               	movlw	208
  8577  001240  6E13               	movwf	??i2_printf& (0+255),c
  8578  001242  0EFF               	movlw	255
  8579  001244  6E14               	movwf	(??i2_printf+1)& (0+255),c
  8580  001246  C00D  FFF6         	movff	i2printf@f,tblptrl
  8581  00124A  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  8582  00124E                     	if	0	;tblptru may be non-zero
  8583  00124E                     	endif
  8584  00124E                     	if	0	;tblptru may be non-zero
  8585  00124E                     	endif
  8586  00124E  0008               	tblrd		*
  8587  001250  50F5               	movf	tablat,w,c
  8588  001252  6E15               	movwf	(??i2_printf+2)& (0+255),c
  8589  001254  6A16               	clrf	(??i2_printf+3)& (0+255),c
  8590  001256  5013               	movf	??i2_printf,w,c
  8591  001258  2615               	addwf	??i2_printf+2,f,c
  8592  00125A  5014               	movf	??i2_printf+1,w,c
  8593  00125C  2216               	addwfc	??i2_printf+3,f,c
  8594  00125E  5015               	movf	??i2_printf+2,w,c
  8595  001260  261E               	addwf	i2printf@width,f,c
  8596  001262  5016               	movf	??i2_printf+3,w,c
  8597  001264  221F               	addwfc	i2printf@width+1,f,c
  8598  001266  4A0D               	infsnz	i2printf@f,f,c
  8599  001268  2A0E               	incf	i2printf@f+1,f,c
  8600                           
  8601                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  8602  00126A  C00D  FFF6         	movff	i2printf@f,tblptrl
  8603  00126E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  8604  001272                     	if	0	;tblptru may be non-zero
  8605  001272                     	endif
  8606  001272                     	if	0	;tblptru may be non-zero
  8607  001272                     	endif
  8608  001272  0008               	tblrd		*
  8609  001274  50F5               	movf	tablat,w,c
  8610  001276  ECCC  F00F         	call	i2_isdigit
  8611  00127A  A0D8               	btfss	status,0,c
  8612  00127C  D003               	goto	i2l3308
  8613  00127E  D7D1               	goto	i2l3296
  8614  001280                     i2l3304:
  8615                           
  8616                           ;doprnt.c: 721: flag |= 0x80;
  8617  001280  8E1D               	bsf	i2printf@flag,7,c
  8618                           
  8619                           ;doprnt.c: 723: break;
  8620  001282  D017               	goto	i2l470
  8621  001284                     i2l3308:
  8622  001284  C00D  FFF6         	movff	i2printf@f,tblptrl
  8623  001288  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  8624  00128C  4A0D               	infsnz	i2printf@f,f,c
  8625  00128E  2A0E               	incf	i2printf@f+1,f,c
  8626  001290                     	if	0	;tblptru may be non-zero
  8627  001290                     	endif
  8628  001290                     	if	0	;tblptru may be non-zero
  8629  001290                     	endif
  8630  001290  0008               	tblrd		*
  8631  001292  CFF5 F020          	movff	tablat,i2printf@c
  8632  001296  5020               	movf	i2printf@c,w,c
  8633                           
  8634                           ; Switch size 1, requested type "space"
  8635                           ; Number of cases is 4, Range of values is 0 to 120
  8636                           ; switch strategies available:
  8637                           ; Name         Instructions Cycles
  8638                           ; simple_byte           13     7 (average)
  8639                           ;	Chosen strategy is simple_byte
  8640  001298  0A00               	xorlw	0	; case 0
  8641  00129A  B4D8               	btfsc	status,2,c
  8642  00129C  0012               	return	
  8643  00129E  0A64               	xorlw	100	; case 100
  8644  0012A0  B4D8               	btfsc	status,2,c
  8645  0012A2  D007               	goto	i2l470
  8646  0012A4  0A0D               	xorlw	13	; case 105
  8647  0012A6  B4D8               	btfsc	status,2,c
  8648  0012A8  D004               	goto	i2l470
  8649  0012AA  0A11               	xorlw	17	; case 120
  8650  0012AC  B4D8               	btfsc	status,2,c
  8651  0012AE  D7E8               	goto	i2l3304
  8652  0012B0  D103               	goto	i2l3406
  8653  0012B2                     i2l470:
  8654                           
  8655                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  8656  0012B2  BE1D               	btfsc	i2printf@flag,7,c
  8657  0012B4  D015               	goto	i2l3320
  8658                           
  8659                           ;doprnt.c: 1253: {
  8660                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  8661  0012B6  C018  FFD9         	movff	i2printf@ap,fsr2l
  8662  0012BA  C019  FFDA         	movff	i2printf@ap+1,fsr2h
  8663  0012BE  CFDE F01B          	movff	postinc2,i2printf@val
  8664  0012C2  CFDD F01C          	movff	postdec2,i2printf@val+1
  8665  0012C6  0E02               	movlw	2
  8666  0012C8  2618               	addwf	i2printf@ap,f,c
  8667  0012CA  0E00               	movlw	0
  8668  0012CC  2219               	addwfc	i2printf@ap+1,f,c
  8669                           
  8670                           ;doprnt.c: 1261: if((int)val < 0) {
  8671  0012CE  AE1C               	btfss	i2printf@val+1,7,c
  8672  0012D0  D044               	goto	i2l3354
  8673                           
  8674                           ;doprnt.c: 1262: flag |= 0x03;
  8675  0012D2  0E03               	movlw	3
  8676  0012D4  121D               	iorwf	i2printf@flag,f,c
  8677                           
  8678                           ;doprnt.c: 1263: val = -val;
  8679  0012D6  6C1B               	negf	i2printf@val,c
  8680  0012D8  1E1C               	comf	i2printf@val+1,f,c
  8681  0012DA  B0D8               	btfsc	status,0,c
  8682  0012DC  2A1C               	incf	i2printf@val+1,f,c
  8683                           
  8684                           ;doprnt.c: 1264: }
  8685                           ;doprnt.c: 1266: }
  8686  0012DE  D03D               	goto	i2l3354
  8687  0012E0                     i2l3320:
  8688                           
  8689                           ;doprnt.c: 1268: else
  8690                           ;doprnt.c: 1273: {
  8691                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  8692  0012E0  C018  FFD9         	movff	i2printf@ap,fsr2l
  8693  0012E4  C019  FFDA         	movff	i2printf@ap+1,fsr2h
  8694  0012E8  CFDE F01B          	movff	postinc2,i2printf@val
  8695  0012EC  CFDD F01C          	movff	postdec2,i2printf@val+1
  8696  0012F0  0E02               	movlw	2
  8697  0012F2  2618               	addwf	i2printf@ap,f,c
  8698  0012F4  0E00               	movlw	0
  8699  0012F6  2219               	addwfc	i2printf@ap+1,f,c
  8700                           
  8701                           ;doprnt.c: 1287: }
  8702                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  8703  0012F8  D030               	goto	i2l3354
  8704  0012FA                     i2l3324:
  8705                           
  8706                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  8707  0012FA  0E01               	movlw	1
  8708  0012FC  6E20               	movwf	i2printf@c,c
  8709  0012FE                     i2l3326:
  8710  0012FE  0E05               	movlw	5
  8711  001300  1820               	xorwf	i2printf@c,w,c
  8712  001302  B4D8               	btfsc	status,2,c
  8713  001304  D032               	goto	i2l3356
  8714                           
  8715                           ;doprnt.c: 1306: if(val < dpowers[c])
  8716  001306  5020               	movf	i2printf@c,w,c
  8717  001308  0D02               	mullw	2
  8718  00130A  0E18               	movlw	low _dpowers
  8719  00130C  24F3               	addwf	prodl,w,c
  8720  00130E  6EF6               	movwf	tblptrl,c
  8721  001310  0EFE               	movlw	high _dpowers
  8722  001312  20F4               	addwfc	prodh,w,c
  8723  001314  6EF7               	movwf	tblptrh,c
  8724  001316                     	if	0	;There are less than 3 active tblptr bytes
  8725  001316                     	endif
  8726  001316  0009               	tblrd		*+
  8727  001318  50F5               	movf	tablat,w,c
  8728  00131A  5C1B               	subwf	i2printf@val,w,c
  8729  00131C  0009               	tblrd		*+
  8730  00131E  50F5               	movf	tablat,w,c
  8731  001320  581C               	subwfb	i2printf@val+1,w,c
  8732  001322  A0D8               	btfss	status,0,c
  8733  001324  D022               	goto	i2l3356
  8734                           
  8735                           ;doprnt.c: 1307: break;
  8736  001326  2A20               	incf	i2printf@c,f,c
  8737  001328  D7EA               	goto	i2l3326
  8738  00132A                     i2l3338:
  8739                           
  8740                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  8741  00132A  0E01               	movlw	1
  8742  00132C  6E20               	movwf	i2printf@c,c
  8743  00132E                     i2l3340:
  8744  00132E  0E04               	movlw	4
  8745  001330  1820               	xorwf	i2printf@c,w,c
  8746  001332  B4D8               	btfsc	status,2,c
  8747  001334  D01A               	goto	i2l3356
  8748                           
  8749                           ;doprnt.c: 1317: if(val < hexpowers[c])
  8750  001336  5020               	movf	i2printf@c,w,c
  8751  001338  0D02               	mullw	2
  8752  00133A  0E22               	movlw	low _hexpowers
  8753  00133C  24F3               	addwf	prodl,w,c
  8754  00133E  6EF6               	movwf	tblptrl,c
  8755  001340  0EFE               	movlw	high _hexpowers
  8756  001342  20F4               	addwfc	prodh,w,c
  8757  001344  6EF7               	movwf	tblptrh,c
  8758  001346                     	if	0	;There are less than 3 active tblptr bytes
  8759  001346                     	endif
  8760  001346  0009               	tblrd		*+
  8761  001348  50F5               	movf	tablat,w,c
  8762  00134A  5C1B               	subwf	i2printf@val,w,c
  8763  00134C  0009               	tblrd		*+
  8764  00134E  50F5               	movf	tablat,w,c
  8765  001350  581C               	subwfb	i2printf@val+1,w,c
  8766  001352  A0D8               	btfss	status,0,c
  8767  001354  D00A               	goto	i2l3356
  8768                           
  8769                           ;doprnt.c: 1318: break;
  8770  001356  2A20               	incf	i2printf@c,f,c
  8771  001358  D7EA               	goto	i2l3340
  8772  00135A                     i2l3354:
  8773  00135A  501D               	movf	i2printf@flag,w,c
  8774  00135C  0B80               	andlw	128
  8775                           
  8776                           ; Switch size 1, requested type "space"
  8777                           ; Number of cases is 2, Range of values is 0 to 128
  8778                           ; switch strategies available:
  8779                           ; Name         Instructions Cycles
  8780                           ; simple_byte            7     4 (average)
  8781                           ;	Chosen strategy is simple_byte
  8782  00135E  0A00               	xorlw	0	; case 0
  8783  001360  B4D8               	btfsc	status,2,c
  8784  001362  D7CB               	goto	i2l3324
  8785  001364  0A80               	xorlw	128	; case 128
  8786  001366  B4D8               	btfsc	status,2,c
  8787  001368  D7E0               	goto	i2l3338
  8788  00136A                     i2l3356:
  8789                           
  8790                           ;doprnt.c: 1345: if(width && flag & 0x03)
  8791  00136A  501E               	movf	i2printf@width,w,c
  8792  00136C  101F               	iorwf	i2printf@width+1,w,c
  8793  00136E  B4D8               	btfsc	status,2,c
  8794  001370  D009               	goto	i2l3362
  8795  001372  C01D  F013         	movff	i2printf@flag,??i2_printf
  8796  001376  0E03               	movlw	3
  8797  001378  1613               	andwf	??i2_printf,f,c
  8798  00137A  B4D8               	btfsc	status,2,c
  8799  00137C  D003               	goto	i2l3362
  8800                           
  8801                           ;doprnt.c: 1346: width--;
  8802  00137E  061E               	decf	i2printf@width,f,c
  8803  001380  A0D8               	btfss	status,0,c
  8804  001382  061F               	decf	i2printf@width+1,f,c
  8805  001384                     i2l3362:
  8806                           
  8807                           ;doprnt.c: 1381: if(width > c)
  8808  001384  0E80               	movlw	128
  8809  001386  BE20               	btfsc	i2printf@c,7,c
  8810  001388  0E7F               	movlw	127
  8811  00138A  6E13               	movwf	??i2_printf& (0+255),c
  8812  00138C  501E               	movf	i2printf@width,w,c
  8813  00138E  5C20               	subwf	i2printf@c,w,c
  8814  001390  501F               	movf	i2printf@width+1,w,c
  8815  001392  0A80               	xorlw	128
  8816  001394  5813               	subwfb	??i2_printf& (0+255),w,c
  8817  001396  B0D8               	btfsc	status,0,c
  8818  001398  D007               	goto	i2l3366
  8819                           
  8820                           ;doprnt.c: 1382: width -= c;
  8821  00139A  5020               	movf	i2printf@c,w,c
  8822  00139C  5E1E               	subwf	i2printf@width,f,c
  8823  00139E  0E00               	movlw	0
  8824  0013A0  BE20               	btfsc	i2printf@c,7,c
  8825  0013A2  0EFF               	movlw	255
  8826  0013A4  5A1F               	subwfb	i2printf@width+1,f,c
  8827  0013A6  D004               	goto	i2l3368
  8828  0013A8                     i2l3366:
  8829                           
  8830                           ;doprnt.c: 1383: else
  8831                           ;doprnt.c: 1384: width = 0;
  8832  0013A8  0E00               	movlw	0
  8833  0013AA  6E1F               	movwf	i2printf@width+1,c
  8834  0013AC  0E00               	movlw	0
  8835  0013AE  6E1E               	movwf	i2printf@width,c
  8836  0013B0                     i2l3368:
  8837                           
  8838                           ;doprnt.c: 1387: if(flag & 0x04) {
  8839  0013B0  A41D               	btfss	i2printf@flag,2,c
  8840  0013B2  D014               	goto	i2l3380
  8841                           
  8842                           ;doprnt.c: 1392: if(flag & 0x03)
  8843  0013B4  C01D  F013         	movff	i2printf@flag,??i2_printf
  8844  0013B8  0E03               	movlw	3
  8845  0013BA  1613               	andwf	??i2_printf,f,c
  8846  0013BC  B4D8               	btfsc	status,2,c
  8847  0013BE  D003               	goto	i2l3374
  8848                           
  8849                           ;doprnt.c: 1393: (putch('-') );
  8850  0013C0  0E2D               	movlw	45
  8851  0013C2  EC10  F010         	call	i2_putch
  8852  0013C6                     i2l3374:
  8853                           
  8854                           ;doprnt.c: 1415: if(width)
  8855  0013C6  501E               	movf	i2printf@width,w,c
  8856  0013C8  101F               	iorwf	i2printf@width+1,w,c
  8857  0013CA  B4D8               	btfsc	status,2,c
  8858  0013CC  D01E               	goto	i2l3390
  8859                           
  8860                           ;doprnt.c: 1417: (putch('0') );
  8861                           
  8862                           ;doprnt.c: 1416: do
  8863  0013CE  0E30               	movlw	48
  8864  0013D0  EC10  F010         	call	i2_putch
  8865                           
  8866                           ;doprnt.c: 1418: while(--width);
  8867  0013D4  061E               	decf	i2printf@width,f,c
  8868  0013D6  A0D8               	btfss	status,0,c
  8869  0013D8  061F               	decf	i2printf@width+1,f,c
  8870  0013DA  D7F5               	goto	i2l3374
  8871  0013DC                     i2l3380:
  8872                           
  8873                           ;doprnt.c: 1422: {
  8874                           ;doprnt.c: 1424: if(width
  8875                           ;doprnt.c: 1428: )
  8876  0013DC  501E               	movf	i2printf@width,w,c
  8877  0013DE  101F               	iorwf	i2printf@width+1,w,c
  8878  0013E0  B4D8               	btfsc	status,2,c
  8879  0013E2  D00A               	goto	i2l3386
  8880  0013E4                     i2l3382:
  8881                           
  8882                           ;doprnt.c: 1430: (putch(' ') );
  8883  0013E4  0E20               	movlw	32
  8884  0013E6  EC10  F010         	call	i2_putch
  8885                           
  8886                           ;doprnt.c: 1431: while(--width);
  8887  0013EA  061E               	decf	i2printf@width,f,c
  8888  0013EC  A0D8               	btfss	status,0,c
  8889  0013EE  061F               	decf	i2printf@width+1,f,c
  8890  0013F0  501E               	movf	i2printf@width,w,c
  8891  0013F2  101F               	iorwf	i2printf@width+1,w,c
  8892  0013F4  A4D8               	btfss	status,2,c
  8893  0013F6  D7F6               	goto	i2l3382
  8894  0013F8                     i2l3386:
  8895                           
  8896                           ;doprnt.c: 1438: if(flag & 0x03)
  8897  0013F8  C01D  F013         	movff	i2printf@flag,??i2_printf
  8898  0013FC  0E03               	movlw	3
  8899  0013FE  1613               	andwf	??i2_printf,f,c
  8900  001400  B4D8               	btfsc	status,2,c
  8901  001402  D003               	goto	i2l3390
  8902                           
  8903                           ;doprnt.c: 1439: (putch('-') );
  8904  001404  0E2D               	movlw	45
  8905  001406  EC10  F010         	call	i2_putch
  8906  00140A                     i2l3390:
  8907                           
  8908                           ;doprnt.c: 1469: }
  8909                           ;doprnt.c: 1472: prec = c;
  8910  00140A  C020  F01A         	movff	i2printf@c,i2printf@prec
  8911                           
  8912                           ;doprnt.c: 1474: while(prec--) {
  8913  00140E  D050               	goto	i2l3404
  8914  001410                     i2l3392:
  8915                           
  8916                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  8917  001410  501A               	movf	i2printf@prec,w,c
  8918  001412  0D02               	mullw	2
  8919  001414  0E18               	movlw	low _dpowers
  8920  001416  24F3               	addwf	prodl,w,c
  8921  001418  6EF6               	movwf	tblptrl,c
  8922  00141A  0EFE               	movlw	high _dpowers
  8923  00141C  20F4               	addwfc	prodh,w,c
  8924  00141E  6EF7               	movwf	tblptrh,c
  8925  001420                     	if	0	;There are less than 3 active tblptr bytes
  8926  001420                     	endif
  8927  001420  0009               	tblrd		*+
  8928  001422  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  8929  001426  000A               	tblrd		*-
  8930  001428  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  8931  00142C  C01B  F001         	movff	i2printf@val,i2___lwdiv@dividend
  8932  001430  C01C  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  8933  001434  EC76  F00E         	call	i2___lwdiv	;wreg free
  8934  001438  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
  8935  00143C  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
  8936  001440  0E00               	movlw	0
  8937  001442  6E0B               	movwf	i2___lwmod@divisor+1,c
  8938  001444  0E0A               	movlw	10
  8939  001446  6E0A               	movwf	i2___lwmod@divisor,c
  8940  001448  EC34  F00F         	call	i2___lwmod	;wreg free
  8941  00144C  5008               	movf	?i2___lwmod,w,c
  8942  00144E  0F30               	addlw	48
  8943  001450  6E20               	movwf	i2printf@c,c
  8944                           
  8945                           ;doprnt.c: 1491: break;
  8946  001452  D02B               	goto	i2l3402
  8947  001454                     i2l3394:
  8948                           
  8949                           ;doprnt.c: 1499: {
  8950                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  8951  001454  C01B  F001         	movff	i2printf@val,i2___lwdiv@dividend
  8952  001458  C01C  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  8953  00145C  501A               	movf	i2printf@prec,w,c
  8954  00145E  0D02               	mullw	2
  8955  001460  0E22               	movlw	low _hexpowers
  8956  001462  24F3               	addwf	prodl,w,c
  8957  001464  6EF6               	movwf	tblptrl,c
  8958  001466  0EFE               	movlw	high _hexpowers
  8959  001468  20F4               	addwfc	prodh,w,c
  8960  00146A  6EF7               	movwf	tblptrh,c
  8961  00146C                     	if	0	;There are less than 3 active tblptr bytes
  8962  00146C                     	endif
  8963  00146C  0009               	tblrd		*+
  8964  00146E  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  8965  001472  000A               	tblrd		*-
  8966  001474  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  8967  001478  EC76  F00E         	call	i2___lwdiv	;wreg free
  8968  00147C  5001               	movf	?i2___lwdiv,w,c
  8969  00147E  0B0F               	andlw	15
  8970  001480  6E17               	movwf	i2printf@idx,c
  8971                           
  8972                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  8973  001482  5017               	movf	i2printf@idx,w,c
  8974  001484  0D01               	mullw	1
  8975  001486  0EDD               	movlw	low STR_28
  8976  001488  24F3               	addwf	prodl,w,c
  8977  00148A  6EF6               	movwf	tblptrl,c
  8978  00148C  0EFE               	movlw	high STR_28
  8979  00148E  20F4               	addwfc	prodh,w,c
  8980  001490  6EF7               	movwf	tblptrh,c
  8981  001492                     	if	0	;There are less than 3 active tblptr bytes
  8982  001492                     	endif
  8983  001492  0008               	tblrd		*
  8984  001494  CFF5 F020          	movff	tablat,i2printf@c
  8985                           
  8986                           ;doprnt.c: 1523: }
  8987                           
  8988                           ;doprnt.c: 1508: }
  8989                           ;doprnt.c: 1510: break;
  8990  001498  D008               	goto	i2l3402
  8991  00149A                     i2l3400:
  8992  00149A  501D               	movf	i2printf@flag,w,c
  8993  00149C  0B80               	andlw	128
  8994                           
  8995                           ; Switch size 1, requested type "space"
  8996                           ; Number of cases is 2, Range of values is 0 to 128
  8997                           ; switch strategies available:
  8998                           ; Name         Instructions Cycles
  8999                           ; simple_byte            7     4 (average)
  9000                           ;	Chosen strategy is simple_byte
  9001  00149E  0A00               	xorlw	0	; case 0
  9002  0014A0  B4D8               	btfsc	status,2,c
  9003  0014A2  D7B6               	goto	i2l3392
  9004  0014A4  0A80               	xorlw	128	; case 128
  9005  0014A6  B4D8               	btfsc	status,2,c
  9006  0014A8  D7D5               	goto	i2l3394
  9007  0014AA                     i2l3402:
  9008                           
  9009                           ;doprnt.c: 1524: (putch(c) );
  9010  0014AA  5020               	movf	i2printf@c,w,c
  9011  0014AC  EC10  F010         	call	i2_putch
  9012  0014B0                     i2l3404:
  9013  0014B0  061A               	decf	i2printf@prec,f,c
  9014  0014B2  281A               	incf	i2printf@prec,w,c
  9015  0014B4  A4D8               	btfss	status,2,c
  9016  0014B6  D7F1               	goto	i2l3400
  9017  0014B8                     i2l3406:
  9018  0014B8  C00D  FFF6         	movff	i2printf@f,tblptrl
  9019  0014BC  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  9020  0014C0  4A0D               	infsnz	i2printf@f,f,c
  9021  0014C2  2A0E               	incf	i2printf@f+1,f,c
  9022  0014C4                     	if	0	;tblptru may be non-zero
  9023  0014C4                     	endif
  9024  0014C4                     	if	0	;tblptru may be non-zero
  9025  0014C4                     	endif
  9026  0014C4  0008               	tblrd		*
  9027  0014C6  CFF5 F020          	movff	tablat,i2printf@c
  9028  0014CA  5020               	movf	i2printf@c,w,c
  9029  0014CC  B4D8               	btfsc	status,2,c
  9030  0014CE  0012               	return	
  9031  0014D0  D67F               	goto	i2l3280
  9032  0014D2                     __end_ofi2_printf:
  9033                           	opt stack 0
  9034                           pclatu	equ	0xFFB
  9035                           pclath	equ	0xFFA
  9036                           tblptru	equ	0xFF8
  9037                           tblptrh	equ	0xFF7
  9038                           tblptrl	equ	0xFF6
  9039                           tablat	equ	0xFF5
  9040                           prodh	equ	0xFF4
  9041                           prodl	equ	0xFF3
  9042                           intcon	equ	0xFF2
  9043                           intcon3	equ	0xFF0
  9044                           postinc0	equ	0xFEE
  9045                           fsr0h	equ	0xFEA
  9046                           fsr0l	equ	0xFE9
  9047                           wreg	equ	0xFE8
  9048                           fsr1h	equ	0xFE2
  9049                           fsr1l	equ	0xFE1
  9050                           indf2	equ	0xFDF
  9051                           postinc2	equ	0xFDE
  9052                           postdec2	equ	0xFDD
  9053                           fsr2h	equ	0xFDA
  9054                           fsr2l	equ	0xFD9
  9055                           status	equ	0xFD8
  9056                           
  9057 ;; *************** function i2_putch *****************
  9058 ;; Defined at:
  9059 ;;		line 23 in file "../lcd.c"
  9060 ;; Parameters:    Size  Location     Type
  9061 ;;  data            1    wreg     unsigned char 
  9062 ;; Auto vars:     Size  Location     Type
  9063 ;;  data            1    2[COMRAM] unsigned char 
  9064 ;; Return value:  Size  Location     Type
  9065 ;;                  1    wreg      void 
  9066 ;; Registers used:
  9067 ;;		wreg, status,2, status,0, cstack
  9068 ;; Tracked objects:
  9069 ;;		On entry : 0/0
  9070 ;;		On exit  : 0/0
  9071 ;;		Unchanged: 0/0
  9072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9073 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9074 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9075 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9076 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9077 ;;Total ram usage:        1 bytes
  9078 ;; Hardware stack levels used:    1
  9079 ;; Hardware stack levels required when called:    1
  9080 ;; This function calls:
  9081 ;;		i2_lcdNibble
  9082 ;; This function is called by:
  9083 ;;		i2_printf
  9084 ;; This function uses a non-reentrant model
  9085 ;;
  9086                           
  9087                           	psect	text29
  9088  002020                     __ptext29:
  9089                           	opt stack 0
  9090  002020                     i2_putch:
  9091                           	opt stack 24
  9092                           
  9093                           ;incstack = 0
  9094                           ;i2putch@data stored from wreg
  9095  002020  6E03               	movwf	i2putch@data,c
  9096                           
  9097                           ;lcd.c: 24: LATDbits.LATD2 = 1;
  9098  002022  848C               	bsf	3980,2,c	;volatile
  9099                           
  9100                           ;lcd.c: 25: lcdNibble(data);
  9101  002024  5003               	movf	i2putch@data,w,c
  9102  002026  ECC6  F00E         	call	i2_lcdNibble
  9103  00202A  0012               	return		;funcret
  9104  00202C                     __end_ofi2_putch:
  9105                           	opt stack 0
  9106                           pclatu	equ	0xFFB
  9107                           pclath	equ	0xFFA
  9108                           tblptru	equ	0xFF8
  9109                           tblptrh	equ	0xFF7
  9110                           tblptrl	equ	0xFF6
  9111                           tablat	equ	0xFF5
  9112                           prodh	equ	0xFF4
  9113                           prodl	equ	0xFF3
  9114                           intcon	equ	0xFF2
  9115                           intcon3	equ	0xFF0
  9116                           postinc0	equ	0xFEE
  9117                           fsr0h	equ	0xFEA
  9118                           fsr0l	equ	0xFE9
  9119                           wreg	equ	0xFE8
  9120                           fsr1h	equ	0xFE2
  9121                           fsr1l	equ	0xFE1
  9122                           indf2	equ	0xFDF
  9123                           postinc2	equ	0xFDE
  9124                           postdec2	equ	0xFDD
  9125                           fsr2h	equ	0xFDA
  9126                           fsr2l	equ	0xFD9
  9127                           status	equ	0xFD8
  9128                           
  9129 ;; *************** function i2_isdigit *****************
  9130 ;; Defined at:
  9131 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  9132 ;; Parameters:    Size  Location     Type
  9133 ;;  c               1    wreg     unsigned char 
  9134 ;; Auto vars:     Size  Location     Type
  9135 ;;  c               1    2[COMRAM] unsigned char 
  9136 ;; Return value:  Size  Location     Type
  9137 ;;		None               void
  9138 ;; Registers used:
  9139 ;;		wreg, status,2, status,0
  9140 ;; Tracked objects:
  9141 ;;		On entry : 0/0
  9142 ;;		On exit  : 0/0
  9143 ;;		Unchanged: 0/0
  9144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9145 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9146 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9147 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9148 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9149 ;;Total ram usage:        3 bytes
  9150 ;; Hardware stack levels used:    1
  9151 ;; This function calls:
  9152 ;;		Nothing
  9153 ;; This function is called by:
  9154 ;;		i2_printf
  9155 ;; This function uses a non-reentrant model
  9156 ;;
  9157                           
  9158                           	psect	text30
  9159  001F98                     __ptext30:
  9160                           	opt stack 0
  9161  001F98                     i2_isdigit:
  9162                           	opt stack 25
  9163                           
  9164                           ;incstack = 0
  9165                           ;i2isdigit@c stored from wreg
  9166  001F98  6E03               	movwf	i2isdigit@c,c
  9167  001F9A  0E00               	movlw	0
  9168  001F9C  6E02               	movwf	i2_isdigit$944,c
  9169  001F9E  0E3A               	movlw	58
  9170  001FA0  6003               	cpfslt	i2isdigit@c,c
  9171  001FA2  D005               	goto	i2l2948
  9172  001FA4  0E2F               	movlw	47
  9173  001FA6  6403               	cpfsgt	i2isdigit@c,c
  9174  001FA8  D002               	goto	i2l2948
  9175  001FAA  0E01               	movlw	1
  9176  001FAC  6E02               	movwf	i2_isdigit$944,c
  9177  001FAE                     i2l2948:
  9178  001FAE  C002  F001         	movff	i2_isdigit$944,??i2_isdigit
  9179  001FB2  3001               	rrcf	??i2_isdigit,w,c
  9180  001FB4  0012               	return	
  9181  001FB6                     __end_ofi2_isdigit:
  9182                           	opt stack 0
  9183                           pclatu	equ	0xFFB
  9184                           pclath	equ	0xFFA
  9185                           tblptru	equ	0xFF8
  9186                           tblptrh	equ	0xFF7
  9187                           tblptrl	equ	0xFF6
  9188                           tablat	equ	0xFF5
  9189                           prodh	equ	0xFF4
  9190                           prodl	equ	0xFF3
  9191                           intcon	equ	0xFF2
  9192                           intcon3	equ	0xFF0
  9193                           postinc0	equ	0xFEE
  9194                           fsr0h	equ	0xFEA
  9195                           fsr0l	equ	0xFE9
  9196                           wreg	equ	0xFE8
  9197                           fsr1h	equ	0xFE2
  9198                           fsr1l	equ	0xFE1
  9199                           indf2	equ	0xFDF
  9200                           postinc2	equ	0xFDE
  9201                           postdec2	equ	0xFDD
  9202                           fsr2h	equ	0xFDA
  9203                           fsr2l	equ	0xFD9
  9204                           status	equ	0xFD8
  9205                           
  9206 ;; *************** function i2___wmul *****************
  9207 ;; Defined at:
  9208 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  9209 ;; Parameters:    Size  Location     Type
  9210 ;;  multiplier      2    0[COMRAM] unsigned int 
  9211 ;;  multiplicand    2    2[COMRAM] unsigned int 
  9212 ;; Auto vars:     Size  Location     Type
  9213 ;;  __wmul          2    4[COMRAM] unsigned int 
  9214 ;; Return value:  Size  Location     Type
  9215 ;;                  2    0[COMRAM] unsigned int 
  9216 ;; Registers used:
  9217 ;;		wreg, status,2, status,0, prodl, prodh
  9218 ;; Tracked objects:
  9219 ;;		On entry : 0/0
  9220 ;;		On exit  : 0/0
  9221 ;;		Unchanged: 0/0
  9222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9223 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9224 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9225 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9226 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9227 ;;Total ram usage:        6 bytes
  9228 ;; Hardware stack levels used:    1
  9229 ;; This function calls:
  9230 ;;		Nothing
  9231 ;; This function is called by:
  9232 ;;		i2_printf
  9233 ;; This function uses a non-reentrant model
  9234 ;;
  9235                           
  9236                           	psect	text31
  9237  001F2E                     __ptext31:
  9238                           	opt stack 0
  9239  001F2E                     i2___wmul:
  9240                           	opt stack 25
  9241                           
  9242                           ;incstack = 0
  9243  001F2E  5001               	movf	i2___wmul@multiplier,w,c
  9244  001F30  0203               	mulwf	i2___wmul@multiplicand,c
  9245  001F32  CFF3 F005          	movff	prodl,i2___wmul@product
  9246  001F36  CFF4 F006          	movff	prodh,i2___wmul@product+1
  9247  001F3A  5001               	movf	i2___wmul@multiplier,w,c
  9248  001F3C  0204               	mulwf	i2___wmul@multiplicand+1,c
  9249  001F3E  50F3               	movf	prodl,w,c
  9250  001F40  2606               	addwf	i2___wmul@product+1,f,c
  9251  001F42  5002               	movf	i2___wmul@multiplier+1,w,c
  9252  001F44  0203               	mulwf	i2___wmul@multiplicand,c
  9253  001F46  50F3               	movf	prodl,w,c
  9254  001F48  2606               	addwf	i2___wmul@product+1,f,c
  9255  001F4A  C005  F001         	movff	i2___wmul@product,?i2___wmul
  9256  001F4E  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
  9257  001F52  0012               	return	
  9258  001F54                     __end_ofi2___wmul:
  9259                           	opt stack 0
  9260                           pclatu	equ	0xFFB
  9261                           pclath	equ	0xFFA
  9262                           tblptru	equ	0xFF8
  9263                           tblptrh	equ	0xFF7
  9264                           tblptrl	equ	0xFF6
  9265                           tablat	equ	0xFF5
  9266                           prodh	equ	0xFF4
  9267                           prodl	equ	0xFF3
  9268                           intcon	equ	0xFF2
  9269                           intcon3	equ	0xFF0
  9270                           postinc0	equ	0xFEE
  9271                           fsr0h	equ	0xFEA
  9272                           fsr0l	equ	0xFE9
  9273                           wreg	equ	0xFE8
  9274                           fsr1h	equ	0xFE2
  9275                           fsr1l	equ	0xFE1
  9276                           indf2	equ	0xFDF
  9277                           postinc2	equ	0xFDE
  9278                           postdec2	equ	0xFDD
  9279                           fsr2h	equ	0xFDA
  9280                           fsr2l	equ	0xFD9
  9281                           status	equ	0xFD8
  9282                           
  9283 ;; *************** function i2___lwmod *****************
  9284 ;; Defined at:
  9285 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  9286 ;; Parameters:    Size  Location     Type
  9287 ;;  dividend        2    7[COMRAM] unsigned int 
  9288 ;;  divisor         2    9[COMRAM] unsigned int 
  9289 ;; Auto vars:     Size  Location     Type
  9290 ;;  __lwmod         1   11[COMRAM] unsigned char 
  9291 ;; Return value:  Size  Location     Type
  9292 ;;                  2    7[COMRAM] unsigned int 
  9293 ;; Registers used:
  9294 ;;		wreg, status,2, status,0
  9295 ;; Tracked objects:
  9296 ;;		On entry : 0/0
  9297 ;;		On exit  : 0/0
  9298 ;;		Unchanged: 0/0
  9299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9300 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9301 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9302 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9303 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9304 ;;Total ram usage:        5 bytes
  9305 ;; Hardware stack levels used:    1
  9306 ;; This function calls:
  9307 ;;		Nothing
  9308 ;; This function is called by:
  9309 ;;		i2_printf
  9310 ;; This function uses a non-reentrant model
  9311 ;;
  9312                           
  9313                           	psect	text32
  9314  001E68                     __ptext32:
  9315                           	opt stack 0
  9316  001E68                     i2___lwmod:
  9317                           	opt stack 25
  9318                           
  9319                           ;incstack = 0
  9320  001E68  500A               	movf	i2___lwmod@divisor,w,c
  9321  001E6A  100B               	iorwf	i2___lwmod@divisor+1,w,c
  9322  001E6C  B4D8               	btfsc	status,2,c
  9323  001E6E  D018               	goto	i2l925
  9324  001E70  0E01               	movlw	1
  9325  001E72  6E0C               	movwf	i2___lwmod@counter,c
  9326  001E74  D004               	goto	i2l2980
  9327  001E76                     i2l2978:
  9328  001E76  90D8               	bcf	status,0,c
  9329  001E78  360A               	rlcf	i2___lwmod@divisor,f,c
  9330  001E7A  360B               	rlcf	i2___lwmod@divisor+1,f,c
  9331  001E7C  2A0C               	incf	i2___lwmod@counter,f,c
  9332  001E7E                     i2l2980:
  9333  001E7E  AE0B               	btfss	i2___lwmod@divisor+1,7,c
  9334  001E80  D7FA               	goto	i2l2978
  9335  001E82                     i2l2982:
  9336  001E82  500A               	movf	i2___lwmod@divisor,w,c
  9337  001E84  5C08               	subwf	i2___lwmod@dividend,w,c
  9338  001E86  500B               	movf	i2___lwmod@divisor+1,w,c
  9339  001E88  5809               	subwfb	i2___lwmod@dividend+1,w,c
  9340  001E8A  A0D8               	btfss	status,0,c
  9341  001E8C  D004               	goto	i2l2986
  9342  001E8E  500A               	movf	i2___lwmod@divisor,w,c
  9343  001E90  5E08               	subwf	i2___lwmod@dividend,f,c
  9344  001E92  500B               	movf	i2___lwmod@divisor+1,w,c
  9345  001E94  5A09               	subwfb	i2___lwmod@dividend+1,f,c
  9346  001E96                     i2l2986:
  9347  001E96  90D8               	bcf	status,0,c
  9348  001E98  320B               	rrcf	i2___lwmod@divisor+1,f,c
  9349  001E9A  320A               	rrcf	i2___lwmod@divisor,f,c
  9350  001E9C  2E0C               	decfsz	i2___lwmod@counter,f,c
  9351  001E9E  D7F1               	goto	i2l2982
  9352  001EA0                     i2l925:
  9353  001EA0  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
  9354  001EA4  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
  9355  001EA8  0012               	return		;funcret
  9356  001EAA                     __end_ofi2___lwmod:
  9357                           	opt stack 0
  9358                           pclatu	equ	0xFFB
  9359                           pclath	equ	0xFFA
  9360                           tblptru	equ	0xFF8
  9361                           tblptrh	equ	0xFF7
  9362                           tblptrl	equ	0xFF6
  9363                           tablat	equ	0xFF5
  9364                           prodh	equ	0xFF4
  9365                           prodl	equ	0xFF3
  9366                           intcon	equ	0xFF2
  9367                           intcon3	equ	0xFF0
  9368                           postinc0	equ	0xFEE
  9369                           fsr0h	equ	0xFEA
  9370                           fsr0l	equ	0xFE9
  9371                           wreg	equ	0xFE8
  9372                           fsr1h	equ	0xFE2
  9373                           fsr1l	equ	0xFE1
  9374                           indf2	equ	0xFDF
  9375                           postinc2	equ	0xFDE
  9376                           postdec2	equ	0xFDD
  9377                           fsr2h	equ	0xFDA
  9378                           fsr2l	equ	0xFD9
  9379                           status	equ	0xFD8
  9380                           
  9381 ;; *************** function i2___lwdiv *****************
  9382 ;; Defined at:
  9383 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  9384 ;; Parameters:    Size  Location     Type
  9385 ;;  dividend        2    0[COMRAM] unsigned int 
  9386 ;;  divisor         2    2[COMRAM] unsigned int 
  9387 ;; Auto vars:     Size  Location     Type
  9388 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  9389 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  9390 ;; Return value:  Size  Location     Type
  9391 ;;                  2    0[COMRAM] unsigned int 
  9392 ;; Registers used:
  9393 ;;		wreg, status,2, status,0
  9394 ;; Tracked objects:
  9395 ;;		On entry : 0/0
  9396 ;;		On exit  : 0/0
  9397 ;;		Unchanged: 0/0
  9398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9399 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9400 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9402 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9403 ;;Total ram usage:        7 bytes
  9404 ;; Hardware stack levels used:    1
  9405 ;; This function calls:
  9406 ;;		Nothing
  9407 ;; This function is called by:
  9408 ;;		i2_printf
  9409 ;; This function uses a non-reentrant model
  9410 ;;
  9411                           
  9412                           	psect	text33
  9413  001CEC                     __ptext33:
  9414                           	opt stack 0
  9415  001CEC                     i2___lwdiv:
  9416                           	opt stack 25
  9417                           
  9418                           ;incstack = 0
  9419  001CEC  0E00               	movlw	0
  9420  001CEE  6E06               	movwf	i2___lwdiv@quotient+1,c
  9421  001CF0  0E00               	movlw	0
  9422  001CF2  6E05               	movwf	i2___lwdiv@quotient,c
  9423  001CF4  5003               	movf	i2___lwdiv@divisor,w,c
  9424  001CF6  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  9425  001CF8  B4D8               	btfsc	status,2,c
  9426  001CFA  D01C               	goto	i2l915
  9427  001CFC  0E01               	movlw	1
  9428  001CFE  6E07               	movwf	i2___lwdiv@counter,c
  9429  001D00  D004               	goto	i2l2960
  9430  001D02                     i2l2958:
  9431  001D02  90D8               	bcf	status,0,c
  9432  001D04  3603               	rlcf	i2___lwdiv@divisor,f,c
  9433  001D06  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  9434  001D08  2A07               	incf	i2___lwdiv@counter,f,c
  9435  001D0A                     i2l2960:
  9436  001D0A  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  9437  001D0C  D7FA               	goto	i2l2958
  9438  001D0E                     i2l2962:
  9439  001D0E  90D8               	bcf	status,0,c
  9440  001D10  3605               	rlcf	i2___lwdiv@quotient,f,c
  9441  001D12  3606               	rlcf	i2___lwdiv@quotient+1,f,c
  9442  001D14  5003               	movf	i2___lwdiv@divisor,w,c
  9443  001D16  5C01               	subwf	i2___lwdiv@dividend,w,c
  9444  001D18  5004               	movf	i2___lwdiv@divisor+1,w,c
  9445  001D1A  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  9446  001D1C  A0D8               	btfss	status,0,c
  9447  001D1E  D005               	goto	i2l2970
  9448  001D20  5003               	movf	i2___lwdiv@divisor,w,c
  9449  001D22  5E01               	subwf	i2___lwdiv@dividend,f,c
  9450  001D24  5004               	movf	i2___lwdiv@divisor+1,w,c
  9451  001D26  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  9452  001D28  8005               	bsf	i2___lwdiv@quotient,0,c
  9453  001D2A                     i2l2970:
  9454  001D2A  90D8               	bcf	status,0,c
  9455  001D2C  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  9456  001D2E  3203               	rrcf	i2___lwdiv@divisor,f,c
  9457  001D30  2E07               	decfsz	i2___lwdiv@counter,f,c
  9458  001D32  D7ED               	goto	i2l2962
  9459  001D34                     i2l915:
  9460  001D34  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  9461  001D38  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  9462  001D3C  0012               	return		;funcret
  9463  001D3E                     __end_ofi2___lwdiv:
  9464                           	opt stack 0
  9465                           pclatu	equ	0xFFB
  9466                           pclath	equ	0xFFA
  9467                           tblptru	equ	0xFF8
  9468                           tblptrh	equ	0xFF7
  9469                           tblptrl	equ	0xFF6
  9470                           tablat	equ	0xFF5
  9471                           prodh	equ	0xFF4
  9472                           prodl	equ	0xFF3
  9473                           intcon	equ	0xFF2
  9474                           intcon3	equ	0xFF0
  9475                           postinc0	equ	0xFEE
  9476                           fsr0h	equ	0xFEA
  9477                           fsr0l	equ	0xFE9
  9478                           wreg	equ	0xFE8
  9479                           fsr1h	equ	0xFE2
  9480                           fsr1l	equ	0xFE1
  9481                           indf2	equ	0xFDF
  9482                           postinc2	equ	0xFDE
  9483                           postdec2	equ	0xFDD
  9484                           fsr2h	equ	0xFDA
  9485                           fsr2l	equ	0xFD9
  9486                           status	equ	0xFD8
  9487                           
  9488 ;; *************** function i2_lcdInst *****************
  9489 ;; Defined at:
  9490 ;;		line 18 in file "../lcd.c"
  9491 ;; Parameters:    Size  Location     Type
  9492 ;;  data            1    wreg     unsigned char 
  9493 ;; Auto vars:     Size  Location     Type
  9494 ;;  data            1    2[COMRAM] unsigned char 
  9495 ;; Return value:  Size  Location     Type
  9496 ;;                  1    wreg      void 
  9497 ;; Registers used:
  9498 ;;		wreg, status,2, status,0, cstack
  9499 ;; Tracked objects:
  9500 ;;		On entry : 0/0
  9501 ;;		On exit  : 0/0
  9502 ;;		Unchanged: 0/0
  9503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9504 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9505 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9507 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9508 ;;Total ram usage:        1 bytes
  9509 ;; Hardware stack levels used:    1
  9510 ;; Hardware stack levels required when called:    1
  9511 ;; This function calls:
  9512 ;;		i2_lcdNibble
  9513 ;; This function is called by:
  9514 ;;		_switchMenu
  9515 ;;		_ISR
  9516 ;; This function uses a non-reentrant model
  9517 ;;
  9518                           
  9519                           	psect	text34
  9520  00202C                     __ptext34:
  9521                           	opt stack 0
  9522  00202C                     i2_lcdInst:
  9523                           	opt stack 25
  9524                           
  9525                           ;incstack = 0
  9526                           ;i2lcdInst@data stored from wreg
  9527  00202C  6E03               	movwf	i2lcdInst@data,c
  9528                           
  9529                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  9530  00202E  948C               	bcf	3980,2,c	;volatile
  9531                           
  9532                           ;lcd.c: 20: lcdNibble(data);
  9533  002030  5003               	movf	i2lcdInst@data,w,c
  9534  002032  ECC6  F00E         	call	i2_lcdNibble
  9535  002036  0012               	return		;funcret
  9536  002038                     __end_ofi2_lcdInst:
  9537                           	opt stack 0
  9538                           pclatu	equ	0xFFB
  9539                           pclath	equ	0xFFA
  9540                           tblptru	equ	0xFF8
  9541                           tblptrh	equ	0xFF7
  9542                           tblptrl	equ	0xFF6
  9543                           tablat	equ	0xFF5
  9544                           prodh	equ	0xFF4
  9545                           prodl	equ	0xFF3
  9546                           intcon	equ	0xFF2
  9547                           intcon3	equ	0xFF0
  9548                           postinc0	equ	0xFEE
  9549                           fsr0h	equ	0xFEA
  9550                           fsr0l	equ	0xFE9
  9551                           wreg	equ	0xFE8
  9552                           fsr1h	equ	0xFE2
  9553                           fsr1l	equ	0xFE1
  9554                           indf2	equ	0xFDF
  9555                           postinc2	equ	0xFDE
  9556                           postdec2	equ	0xFDD
  9557                           fsr2h	equ	0xFDA
  9558                           fsr2l	equ	0xFD9
  9559                           status	equ	0xFD8
  9560                           
  9561 ;; *************** function i2_lcdNibble *****************
  9562 ;; Defined at:
  9563 ;;		line 28 in file "../lcd.c"
  9564 ;; Parameters:    Size  Location     Type
  9565 ;;  data            1    wreg     unsigned char 
  9566 ;; Auto vars:     Size  Location     Type
  9567 ;;  data            1    1[COMRAM] unsigned char 
  9568 ;;  lcdNibble       1    0[COMRAM] unsigned char 
  9569 ;; Return value:  Size  Location     Type
  9570 ;;                  1    wreg      void 
  9571 ;; Registers used:
  9572 ;;		wreg, status,2, status,0
  9573 ;; Tracked objects:
  9574 ;;		On entry : 0/0
  9575 ;;		On exit  : 0/0
  9576 ;;		Unchanged: 0/0
  9577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9578 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9579 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9580 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9581 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9582 ;;Total ram usage:        2 bytes
  9583 ;; Hardware stack levels used:    1
  9584 ;; This function calls:
  9585 ;;		Nothing
  9586 ;; This function is called by:
  9587 ;;		i2_lcdInst
  9588 ;;		i2_putch
  9589 ;; This function uses a non-reentrant model
  9590 ;;
  9591                           
  9592                           	psect	text35
  9593  001D8C                     __ptext35:
  9594                           	opt stack 0
  9595  001D8C                     i2_lcdNibble:
  9596                           	opt stack 24
  9597                           
  9598                           ;incstack = 0
  9599                           ;i2lcdNibble@data stored from wreg
  9600  001D8C  6E02               	movwf	i2lcdNibble@data,c
  9601                           
  9602                           ;lcd.c: 30: char temp = data & 0xF0;
  9603  001D8E  5002               	movf	i2lcdNibble@data,w,c
  9604  001D90  0BF0               	andlw	240
  9605  001D92  6E01               	movwf	i2lcdNibble@temp,c
  9606                           
  9607                           ;lcd.c: 31: LATD = LATD & 0x0F;
  9608  001D94  508C               	movf	3980,w,c	;volatile
  9609  001D96  0B0F               	andlw	15
  9610  001D98  6E8C               	movwf	3980,c	;volatile
  9611                           
  9612                           ;lcd.c: 32: LATD = temp | LATD;
  9613  001D9A  5001               	movf	i2lcdNibble@temp,w,c
  9614  001D9C  108C               	iorwf	3980,w,c	;volatile
  9615  001D9E  6E8C               	movwf	3980,c	;volatile
  9616                           
  9617                           ;lcd.c: 34: LATDbits.LATD3 = 0;
  9618  001DA0  968C               	bcf	3980,3,c	;volatile
  9619                           
  9620                           ;lcd.c: 35: _delay((unsigned long)((30)*(10000000/4000000.0)));
  9621  001DA2  0E19               	movlw	25
  9622  001DA4                     i2u605_47:
  9623  001DA4  2EE8               	decfsz	wreg,f,c
  9624  001DA6  D7FE               	bra	i2u605_47
  9625                           
  9626                           ;lcd.c: 36: LATDbits.LATD3 = 1;
  9627  001DA8  868C               	bsf	3980,3,c	;volatile
  9628                           
  9629                           ;lcd.c: 37: _delay((unsigned long)((30)*(10000000/4000000.0)));
  9630  001DAA  0E19               	movlw	25
  9631  001DAC                     i2u606_47:
  9632  001DAC  2EE8               	decfsz	wreg,f,c
  9633  001DAE  D7FE               	bra	i2u606_47
  9634                           
  9635                           ;lcd.c: 39: data = data << 4;
  9636  001DB0  3802               	swapf	i2lcdNibble@data,w,c
  9637  001DB2  0BF0               	andlw	240
  9638  001DB4  6E02               	movwf	i2lcdNibble@data,c
  9639                           
  9640                           ;lcd.c: 41: temp = data & 0xF0;
  9641  001DB6  5002               	movf	i2lcdNibble@data,w,c
  9642  001DB8  0BF0               	andlw	240
  9643  001DBA  6E01               	movwf	i2lcdNibble@temp,c
  9644                           
  9645                           ;lcd.c: 42: LATD = LATD & 0x0F;
  9646  001DBC  508C               	movf	3980,w,c	;volatile
  9647  001DBE  0B0F               	andlw	15
  9648  001DC0  6E8C               	movwf	3980,c	;volatile
  9649                           
  9650                           ;lcd.c: 43: LATD = temp | LATD;
  9651  001DC2  5001               	movf	i2lcdNibble@temp,w,c
  9652  001DC4  108C               	iorwf	3980,w,c	;volatile
  9653  001DC6  6E8C               	movwf	3980,c	;volatile
  9654                           
  9655                           ;lcd.c: 45: LATDbits.LATD3 = 0;
  9656  001DC8  968C               	bcf	3980,3,c	;volatile
  9657                           
  9658                           ;lcd.c: 46: _delay((unsigned long)((30)*(10000000/4000000.0)));
  9659  001DCA  0E19               	movlw	25
  9660  001DCC                     i2u607_47:
  9661  001DCC  2EE8               	decfsz	wreg,f,c
  9662  001DCE  D7FE               	bra	i2u607_47
  9663                           
  9664                           ;lcd.c: 47: LATDbits.LATD3 = 1;
  9665  001DD0  868C               	bsf	3980,3,c	;volatile
  9666                           
  9667                           ;lcd.c: 48: _delay((unsigned long)((30)*(10000000/4000000.0)));
  9668  001DD2  0E19               	movlw	25
  9669  001DD4                     i2u608_47:
  9670  001DD4  2EE8               	decfsz	wreg,f,c
  9671  001DD6  D7FE               	bra	i2u608_47
  9672  001DD8  0012               	return		;funcret
  9673  001DDA                     __end_ofi2_lcdNibble:
  9674                           	opt stack 0
  9675                           pclatu	equ	0xFFB
  9676                           pclath	equ	0xFFA
  9677                           tblptru	equ	0xFF8
  9678                           tblptrh	equ	0xFF7
  9679                           tblptrl	equ	0xFF6
  9680                           tablat	equ	0xFF5
  9681                           prodh	equ	0xFF4
  9682                           prodl	equ	0xFF3
  9683                           intcon	equ	0xFF2
  9684                           intcon3	equ	0xFF0
  9685                           postinc0	equ	0xFEE
  9686                           fsr0h	equ	0xFEA
  9687                           fsr0l	equ	0xFE9
  9688                           wreg	equ	0xFE8
  9689                           fsr1h	equ	0xFE2
  9690                           fsr1l	equ	0xFE1
  9691                           indf2	equ	0xFDF
  9692                           postinc2	equ	0xFDE
  9693                           postdec2	equ	0xFDD
  9694                           fsr2h	equ	0xFDA
  9695                           fsr2l	equ	0xFD9
  9696                           status	equ	0xFD8
  9697                           
  9698 ;; *************** function i2_I2C_Master_Write *****************
  9699 ;; Defined at:
  9700 ;;		line 39 in file "../I2C.c"
  9701 ;; Parameters:    Size  Location     Type
  9702 ;;  d               2    1[COMRAM] unsigned int 
  9703 ;; Auto vars:     Size  Location     Type
  9704 ;;		None
  9705 ;; Return value:  Size  Location     Type
  9706 ;;                  1    wreg      void 
  9707 ;; Registers used:
  9708 ;;		wreg, status,2, status,0, cstack
  9709 ;; Tracked objects:
  9710 ;;		On entry : 0/0
  9711 ;;		On exit  : 0/0
  9712 ;;		Unchanged: 0/0
  9713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9714 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9715 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9716 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9717 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9718 ;;Total ram usage:        2 bytes
  9719 ;; Hardware stack levels used:    1
  9720 ;; Hardware stack levels required when called:    1
  9721 ;; This function calls:
  9722 ;;		i2_I2C_Master_Wait
  9723 ;; This function is called by:
  9724 ;;		_switchMenu
  9725 ;; This function uses a non-reentrant model
  9726 ;;
  9727                           
  9728                           	psect	text36
  9729  002042                     __ptext36:
  9730                           	opt stack 0
  9731  002042                     i2_I2C_Master_Write:
  9732                           	opt stack 24
  9733                           
  9734                           ;I2C.c: 41: I2C_Master_Wait();
  9735                           
  9736                           ;incstack = 0
  9737  002042  ECFB  F00F         	call	i2_I2C_Master_Wait	;wreg free
  9738                           
  9739                           ;I2C.c: 42: SSPBUF = d;
  9740  002046  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
  9741  00204A  0012               	return		;funcret
  9742  00204C                     __end_ofi2_I2C_Master_Write:
  9743                           	opt stack 0
  9744                           pclatu	equ	0xFFB
  9745                           pclath	equ	0xFFA
  9746                           tblptru	equ	0xFF8
  9747                           tblptrh	equ	0xFF7
  9748                           tblptrl	equ	0xFF6
  9749                           tablat	equ	0xFF5
  9750                           prodh	equ	0xFF4
  9751                           prodl	equ	0xFF3
  9752                           intcon	equ	0xFF2
  9753                           intcon3	equ	0xFF0
  9754                           postinc0	equ	0xFEE
  9755                           fsr0h	equ	0xFEA
  9756                           fsr0l	equ	0xFE9
  9757                           wreg	equ	0xFE8
  9758                           fsr1h	equ	0xFE2
  9759                           fsr1l	equ	0xFE1
  9760                           indf2	equ	0xFDF
  9761                           postinc2	equ	0xFDE
  9762                           postdec2	equ	0xFDD
  9763                           fsr2h	equ	0xFDA
  9764                           fsr2l	equ	0xFD9
  9765                           status	equ	0xFD8
  9766                           
  9767 ;; *************** function i2_I2C_Master_Stop *****************
  9768 ;; Defined at:
  9769 ;;		line 33 in file "../I2C.c"
  9770 ;; Parameters:    Size  Location     Type
  9771 ;;		None
  9772 ;; Auto vars:     Size  Location     Type
  9773 ;;		None
  9774 ;; Return value:  Size  Location     Type
  9775 ;;                  1    wreg      void 
  9776 ;; Registers used:
  9777 ;;		wreg, status,2, status,0, cstack
  9778 ;; Tracked objects:
  9779 ;;		On entry : 0/0
  9780 ;;		On exit  : 0/0
  9781 ;;		Unchanged: 0/0
  9782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9783 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9784 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9786 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9787 ;;Total ram usage:        0 bytes
  9788 ;; Hardware stack levels used:    1
  9789 ;; Hardware stack levels required when called:    1
  9790 ;; This function calls:
  9791 ;;		i2_I2C_Master_Wait
  9792 ;; This function is called by:
  9793 ;;		_switchMenu
  9794 ;; This function uses a non-reentrant model
  9795 ;;
  9796                           
  9797                           	psect	text37
  9798  00205C                     __ptext37:
  9799                           	opt stack 0
  9800  00205C                     i2_I2C_Master_Stop:
  9801                           	opt stack 24
  9802                           
  9803                           ;I2C.c: 35: I2C_Master_Wait();
  9804                           
  9805                           ;incstack = 0
  9806  00205C  ECFB  F00F         	call	i2_I2C_Master_Wait	;wreg free
  9807                           
  9808                           ;I2C.c: 36: PEN = 1;
  9809  002060  84C5               	bsf	4037,2,c	;volatile
  9810  002062  0012               	return		;funcret
  9811  002064                     __end_ofi2_I2C_Master_Stop:
  9812                           	opt stack 0
  9813                           pclatu	equ	0xFFB
  9814                           pclath	equ	0xFFA
  9815                           tblptru	equ	0xFF8
  9816                           tblptrh	equ	0xFF7
  9817                           tblptrl	equ	0xFF6
  9818                           tablat	equ	0xFF5
  9819                           prodh	equ	0xFF4
  9820                           prodl	equ	0xFF3
  9821                           intcon	equ	0xFF2
  9822                           intcon3	equ	0xFF0
  9823                           postinc0	equ	0xFEE
  9824                           fsr0h	equ	0xFEA
  9825                           fsr0l	equ	0xFE9
  9826                           wreg	equ	0xFE8
  9827                           fsr1h	equ	0xFE2
  9828                           fsr1l	equ	0xFE1
  9829                           indf2	equ	0xFDF
  9830                           postinc2	equ	0xFDE
  9831                           postdec2	equ	0xFDD
  9832                           fsr2h	equ	0xFDA
  9833                           fsr2l	equ	0xFD9
  9834                           status	equ	0xFD8
  9835                           
  9836 ;; *************** function i2_I2C_Master_Start *****************
  9837 ;; Defined at:
  9838 ;;		line 21 in file "../I2C.c"
  9839 ;; Parameters:    Size  Location     Type
  9840 ;;		None
  9841 ;; Auto vars:     Size  Location     Type
  9842 ;;		None
  9843 ;; Return value:  Size  Location     Type
  9844 ;;                  1    wreg      void 
  9845 ;; Registers used:
  9846 ;;		wreg, status,2, status,0, cstack
  9847 ;; Tracked objects:
  9848 ;;		On entry : 0/0
  9849 ;;		On exit  : 0/0
  9850 ;;		Unchanged: 0/0
  9851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9853 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9854 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9855 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9856 ;;Total ram usage:        0 bytes
  9857 ;; Hardware stack levels used:    1
  9858 ;; Hardware stack levels required when called:    1
  9859 ;; This function calls:
  9860 ;;		i2_I2C_Master_Wait
  9861 ;; This function is called by:
  9862 ;;		_switchMenu
  9863 ;; This function uses a non-reentrant model
  9864 ;;
  9865                           
  9866                           	psect	text38
  9867  002064                     __ptext38:
  9868                           	opt stack 0
  9869  002064                     i2_I2C_Master_Start:
  9870                           	opt stack 24
  9871                           
  9872                           ;I2C.c: 23: I2C_Master_Wait();
  9873                           
  9874                           ;incstack = 0
  9875  002064  ECFB  F00F         	call	i2_I2C_Master_Wait	;wreg free
  9876                           
  9877                           ;I2C.c: 24: SEN = 1;
  9878  002068  80C5               	bsf	4037,0,c	;volatile
  9879  00206A  0012               	return		;funcret
  9880  00206C                     __end_ofi2_I2C_Master_Start:
  9881                           	opt stack 0
  9882                           pclatu	equ	0xFFB
  9883                           pclath	equ	0xFFA
  9884                           tblptru	equ	0xFF8
  9885                           tblptrh	equ	0xFF7
  9886                           tblptrl	equ	0xFF6
  9887                           tablat	equ	0xFF5
  9888                           prodh	equ	0xFF4
  9889                           prodl	equ	0xFF3
  9890                           intcon	equ	0xFF2
  9891                           intcon3	equ	0xFF0
  9892                           postinc0	equ	0xFEE
  9893                           fsr0h	equ	0xFEA
  9894                           fsr0l	equ	0xFE9
  9895                           wreg	equ	0xFE8
  9896                           fsr1h	equ	0xFE2
  9897                           fsr1l	equ	0xFE1
  9898                           indf2	equ	0xFDF
  9899                           postinc2	equ	0xFDE
  9900                           postdec2	equ	0xFDD
  9901                           fsr2h	equ	0xFDA
  9902                           fsr2l	equ	0xFD9
  9903                           status	equ	0xFD8
  9904                           
  9905 ;; *************** function i2_I2C_Master_Read *****************
  9906 ;; Defined at:
  9907 ;;		line 45 in file "../I2C.c"
  9908 ;; Parameters:    Size  Location     Type
  9909 ;;  a               1    wreg     unsigned char 
  9910 ;; Auto vars:     Size  Location     Type
  9911 ;;  a               1    1[COMRAM] unsigned char 
  9912 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
  9913 ;; Return value:  Size  Location     Type
  9914 ;;                  1    wreg      unsigned char 
  9915 ;; Registers used:
  9916 ;;		wreg, status,2, status,0, cstack
  9917 ;; Tracked objects:
  9918 ;;		On entry : 0/0
  9919 ;;		On exit  : 0/0
  9920 ;;		Unchanged: 0/0
  9921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9923 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9924 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9925 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9926 ;;Total ram usage:        2 bytes
  9927 ;; Hardware stack levels used:    1
  9928 ;; Hardware stack levels required when called:    1
  9929 ;; This function calls:
  9930 ;;		i2_I2C_Master_Wait
  9931 ;; This function is called by:
  9932 ;;		_switchMenu
  9933 ;; This function uses a non-reentrant model
  9934 ;;
  9935                           
  9936                           	psect	text39
  9937  001F54                     __ptext39:
  9938                           	opt stack 0
  9939  001F54                     i2_I2C_Master_Read:
  9940                           	opt stack 24
  9941                           
  9942                           ;incstack = 0
  9943                           ;i2I2C_Master_Read@a stored from wreg
  9944  001F54  6E02               	movwf	i2I2C_Master_Read@a,c
  9945                           
  9946                           ;I2C.c: 47: unsigned char temp;
  9947                           ;I2C.c: 48: I2C_Master_Wait();
  9948  001F56  ECFB  F00F         	call	i2_I2C_Master_Wait	;wreg free
  9949                           
  9950                           ;I2C.c: 49: RCEN = 1;
  9951  001F5A  86C5               	bsf	4037,3,c	;volatile
  9952                           
  9953                           ;I2C.c: 50: I2C_Master_Wait();
  9954  001F5C  ECFB  F00F         	call	i2_I2C_Master_Wait	;wreg free
  9955                           
  9956                           ;I2C.c: 51: temp = SSPBUF;
  9957  001F60  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
  9958                           
  9959                           ;I2C.c: 52: I2C_Master_Wait();
  9960  001F64  ECFB  F00F         	call	i2_I2C_Master_Wait	;wreg free
  9961                           
  9962                           ;I2C.c: 53: ACKDT = (a)?0:1;
  9963  001F68  5002               	movf	i2I2C_Master_Read@a,w,c
  9964  001F6A  A4D8               	btfss	status,2,c
  9965  001F6C  D002               	goto	i2u300_40
  9966  001F6E  8AC5               	bsf	4037,5,c	;volatile
  9967  001F70  D001               	goto	i2l3186
  9968  001F72                     i2u300_40:
  9969  001F72  9AC5               	bcf	4037,5,c	;volatile
  9970  001F74                     i2l3186:
  9971                           
  9972                           ;I2C.c: 54: ACKEN = 1;
  9973  001F74  88C5               	bsf	4037,4,c	;volatile
  9974                           
  9975                           ;I2C.c: 55: return temp;
  9976  001F76  5003               	movf	i2I2C_Master_Read@temp,w,c
  9977  001F78  0012               	return	
  9978  001F7A                     __end_ofi2_I2C_Master_Read:
  9979                           	opt stack 0
  9980                           pclatu	equ	0xFFB
  9981                           pclath	equ	0xFFA
  9982                           tblptru	equ	0xFF8
  9983                           tblptrh	equ	0xFF7
  9984                           tblptrl	equ	0xFF6
  9985                           tablat	equ	0xFF5
  9986                           prodh	equ	0xFF4
  9987                           prodl	equ	0xFF3
  9988                           intcon	equ	0xFF2
  9989                           intcon3	equ	0xFF0
  9990                           postinc0	equ	0xFEE
  9991                           fsr0h	equ	0xFEA
  9992                           fsr0l	equ	0xFE9
  9993                           wreg	equ	0xFE8
  9994                           fsr1h	equ	0xFE2
  9995                           fsr1l	equ	0xFE1
  9996                           indf2	equ	0xFDF
  9997                           postinc2	equ	0xFDE
  9998                           postdec2	equ	0xFDD
  9999                           fsr2h	equ	0xFDA
 10000                           fsr2l	equ	0xFD9
 10001                           status	equ	0xFD8
 10002                           
 10003 ;; *************** function i2_I2C_Master_Wait *****************
 10004 ;; Defined at:
 10005 ;;		line 16 in file "../I2C.c"
 10006 ;; Parameters:    Size  Location     Type
 10007 ;;		None
 10008 ;; Auto vars:     Size  Location     Type
 10009 ;;		None
 10010 ;; Return value:  Size  Location     Type
 10011 ;;                  1    wreg      void 
 10012 ;; Registers used:
 10013 ;;		wreg, status,2, status,0
 10014 ;; Tracked objects:
 10015 ;;		On entry : 0/0
 10016 ;;		On exit  : 0/0
 10017 ;;		Unchanged: 0/0
 10018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10019 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10020 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10021 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10022 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10023 ;;Total ram usage:        1 bytes
 10024 ;; Hardware stack levels used:    1
 10025 ;; This function calls:
 10026 ;;		Nothing
 10027 ;; This function is called by:
 10028 ;;		i2_I2C_Master_Start
 10029 ;;		i2_I2C_Master_Stop
 10030 ;;		i2_I2C_Master_Write
 10031 ;;		i2_I2C_Master_Read
 10032 ;; This function uses a non-reentrant model
 10033 ;;
 10034                           
 10035                           	psect	text40
 10036  001FF6                     __ptext40:
 10037                           	opt stack 0
 10038  001FF6                     i2_I2C_Master_Wait:
 10039                           	opt stack 24
 10040  001FF6                     i2l30:
 10041  001FF6  B4C7               	btfsc	4039,2,c	;volatile
 10042  001FF8  D7FE               	goto	i2l30
 10043  001FFA  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 10044  001FFE  0E1F               	movlw	31
 10045  002000  1601               	andwf	??i2_I2C_Master_Wait,f,c
 10046  002002  B4D8               	btfsc	status,2,c
 10047  002004  0012               	return	
 10048  002006  D7F7               	goto	i2l30
 10049  002008                     __end_ofi2_I2C_Master_Wait:
 10050                           	opt stack 0
 10051                           pclatu	equ	0xFFB
 10052                           pclath	equ	0xFFA
 10053                           tblptru	equ	0xFF8
 10054                           tblptrh	equ	0xFF7
 10055                           tblptrl	equ	0xFF6
 10056                           tablat	equ	0xFF5
 10057                           prodh	equ	0xFF4
 10058                           prodl	equ	0xFF3
 10059                           intcon	equ	0xFF2
 10060                           intcon3	equ	0xFF0
 10061                           postinc0	equ	0xFEE
 10062                           fsr0h	equ	0xFEA
 10063                           fsr0l	equ	0xFE9
 10064                           wreg	equ	0xFE8
 10065                           fsr1h	equ	0xFE2
 10066                           fsr1l	equ	0xFE1
 10067                           indf2	equ	0xFDF
 10068                           postinc2	equ	0xFDE
 10069                           postdec2	equ	0xFDD
 10070                           fsr2h	equ	0xFDA
 10071                           fsr2l	equ	0xFD9
 10072                           status	equ	0xFD8
 10073                           pclatu	equ	0xFFB
 10074                           pclath	equ	0xFFA
 10075                           tblptru	equ	0xFF8
 10076                           tblptrh	equ	0xFF7
 10077                           tblptrl	equ	0xFF6
 10078                           tablat	equ	0xFF5
 10079                           prodh	equ	0xFF4
 10080                           prodl	equ	0xFF3
 10081                           intcon	equ	0xFF2
 10082                           intcon3	equ	0xFF0
 10083                           postinc0	equ	0xFEE
 10084                           fsr0h	equ	0xFEA
 10085                           fsr0l	equ	0xFE9
 10086                           wreg	equ	0xFE8
 10087                           fsr1h	equ	0xFE2
 10088                           fsr1l	equ	0xFE1
 10089                           indf2	equ	0xFDF
 10090                           postinc2	equ	0xFDE
 10091                           postdec2	equ	0xFDD
 10092                           fsr2h	equ	0xFDA
 10093                           fsr2l	equ	0xFD9
 10094                           status	equ	0xFD8
 10095                           
 10096                           	psect	rparam
 10097  0000                     pclatu	equ	0xFFB
 10098                           pclath	equ	0xFFA
 10099                           tblptru	equ	0xFF8
 10100                           tblptrh	equ	0xFF7
 10101                           tblptrl	equ	0xFF6
 10102                           tablat	equ	0xFF5
 10103                           prodh	equ	0xFF4
 10104                           prodl	equ	0xFF3
 10105                           intcon	equ	0xFF2
 10106                           intcon3	equ	0xFF0
 10107                           postinc0	equ	0xFEE
 10108                           fsr0h	equ	0xFEA
 10109                           fsr0l	equ	0xFE9
 10110                           wreg	equ	0xFE8
 10111                           fsr1h	equ	0xFE2
 10112                           fsr1l	equ	0xFE1
 10113                           indf2	equ	0xFDF
 10114                           postinc2	equ	0xFDE
 10115                           postdec2	equ	0xFDD
 10116                           fsr2h	equ	0xFDA
 10117                           fsr2l	equ	0xFD9
 10118                           status	equ	0xFD8
 10119                           
 10120                           	psect	temp
 10121  00004B                     btemp:
 10122                           	opt stack 0
 10123  00004B                     	ds	1
 10124  0000                     int$flags	set	btemp
 10125                           pclatu	equ	0xFFB
 10126                           pclath	equ	0xFFA
 10127                           tblptru	equ	0xFF8
 10128                           tblptrh	equ	0xFF7
 10129                           tblptrl	equ	0xFF6
 10130                           tablat	equ	0xFF5
 10131                           prodh	equ	0xFF4
 10132                           prodl	equ	0xFF3
 10133                           intcon	equ	0xFF2
 10134                           intcon3	equ	0xFF0
 10135                           postinc0	equ	0xFEE
 10136                           fsr0h	equ	0xFEA
 10137                           fsr0l	equ	0xFE9
 10138                           wreg	equ	0xFE8
 10139                           fsr1h	equ	0xFE2
 10140                           fsr1l	equ	0xFE1
 10141                           indf2	equ	0xFDF
 10142                           postinc2	equ	0xFDE
 10143                           postdec2	equ	0xFDD
 10144                           fsr2h	equ	0xFDA
 10145                           fsr2l	equ	0xFD9
 10146                           status	equ	0xFD8


Data Sizes:
    Strings     468
    Constant    35
    Data        1
    BSS         50
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     63      74
    BANK0           128     42      82
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 25
		 -> STR_27(CODE[22]), STR_26(CODE[17]), STR_25(CODE[17]), STR_24(CODE[17]), 
		 -> STR_23(CODE[23]), STR_22(CODE[23]), STR_21(CODE[23]), STR_20(CODE[23]), 
		 -> STR_19(CODE[17]), STR_18(CODE[21]), STR_17(CODE[17]), STR_16(CODE[21]), 
		 -> STR_15(CODE[17]), STR_14(CODE[21]), STR_13(CODE[17]), STR_12(CODE[19]), 
		 -> STR_11(CODE[17]), STR_10(CODE[19]), STR_9(CODE[17]), STR_8(CODE[25]), 
		 -> STR_7(CODE[17]), STR_6(CODE[17]), STR_5(CODE[17]), STR_4(CODE[17]), 
		 -> STR_3(CODE[17]), STR_2(CODE[17]), STR_1(CODE[17]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 


Critical Paths under _main in COMRAM

    _testBatteries->_readADC
    _stopOperation->___awdiv
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _I2C_Master_Init->___lldiv

Critical Paths under _ISR in COMRAM

    _ISR->_switchMenu
    _switchMenu->i2_printf
    i2_stopOperation->i2___awdiv
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_lcdInst->i2_lcdNibble
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_printf
    _printf->___lwmod
    _I2C_Master_Init->___lldiv

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                19    19      0    8323
                                             23 BANK0     19    19      0
                    _I2C_Master_Init
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _initLCD
                            _lcdInst
                             _printf
                            _readADC
                      _stopOperation
                      _testBatteries
                           _wait_3ms
 ---------------------------------------------------------------------------------
 (1) _wait_3ms                                             2     0      2     662
                                             52 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _testBatteries                                        2     2      0      22
                                             53 COMRAM     2     2      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _readADC                                              1     1      0      22
                                             52 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _stopOperation                                        0     0      0    1004
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     500
                                             52 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     504
                                             52 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _printf                                              31    23      8    4756
                                              1 BANK0     22    14      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0     135
                                             54 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             52 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     289
                                             52 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     386
                                             59 COMRAM     4     0      4
                                              0 BANK0      1     1      0
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     418
                                             52 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                             55 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0     135
                                             54 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0     113
                                             52 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Write                                     2     0      2     328
                                             53 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Read                                      2     2      0      45
                                             53 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Wait                                      1     1      0       0
                                             52 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     503
                                              5 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     395
                                             52 COMRAM     8     0      8
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _ISR                                                 16    16      0    7054
                                             36 COMRAM    16    16      0
                         _switchMenu
                          i2___awdiv
                          i2___awmod
                          i2_lcdInst
                           i2_printf
                    i2_stopOperation
 ---------------------------------------------------------------------------------
 (5) _switchMenu                                           4     2      2    3350
                                             32 COMRAM     4     2      2
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
                          i2_lcdInst
                           i2_printf
                    i2_stopOperation
 ---------------------------------------------------------------------------------
 (5) i2_stopOperation                                      0     0      0     804
                          i2___awdiv
                          i2___awmod
 ---------------------------------------------------------------------------------
 (6) i2___awmod                                            6     2      4     400
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) i2___awdiv                                            8     4      4     404
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (5) i2_printf                                            29    23      6    1938
                                             12 COMRAM    20    14      6
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (6) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (6) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) i2___wmul                                             6     2      4     209
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (6) i2___lwdiv                                            7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (7) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) i2_I2C_Master_Write                                   2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) i2_I2C_Master_Stop                                    0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) i2_I2C_Master_Start                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) i2_I2C_Master_Read                                    2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Wait                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _I2C_Master_Read
     _I2C_Master_Wait
   _I2C_Master_Start
     _I2C_Master_Wait
   _I2C_Master_Stop
     _I2C_Master_Wait
   _I2C_Master_Write
     _I2C_Master_Wait
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
       _lcdNibble
   _readADC
   _stopOperation
     ___awdiv
     ___awmod
   _testBatteries
     _readADC
   _wait_3ms

 _ISR (ROOT)
   _switchMenu
     i2_I2C_Master_Read
       i2_I2C_Master_Wait
     i2_I2C_Master_Start
       i2_I2C_Master_Wait
     i2_I2C_Master_Stop
       i2_I2C_Master_Wait
     i2_I2C_Master_Write
       i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
       i2___lwmod
         i2___lwdiv (ARG)
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
     i2_stopOperation
       i2___awdiv
       i2___awmod
   i2___awdiv
   i2___awmod
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     i2___lwdiv
     i2___lwmod
       i2___lwdiv (ARG)
     i2___wmul
     i2_isdigit
     i2_putch
       i2_lcdNibble
   i2_stopOperation
     i2___awdiv
     i2___awmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     2A      52       5       64.1%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     3F      4A       1       58.7%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      9C      34        0.0%
DATA                 0      0      9C       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Wed Apr 05 20:10:37 2017

         i2_I2C_Master_Start 2064           i2_I2C_Master_Write 2042                           l30 1FE4  
               ___awdiv@sign 003A          ___wmul@multiplicand 0037           i2___lwdiv@dividend 0001  
                __CFG_BORV$3 000000                 __CFG_CP0$OFF 000000                 __CFG_CP1$OFF 000000  
               __CFG_CP2$OFF 000000                 __CFG_CP3$OFF 000000                  __CFG_OSC$HS 000000  
                        l250 020A                          l340 1FDE                          l252 0260  
                        l254 02B6                          l256 030C                          l273 050A  
                        l259 05AE                          l470 0F36                          l915 1CE2  
                        l925 1E18                          l862 1A44                          _GIE 007F97  
               __CFG_CPB$OFF 000000                          _PEN 007E2A                 __CFG_CPD$OFF 000000  
                        _ISR 0008                          _SEN 007E28          ?i2_I2C_Master_Start 0001  
        ?i2_I2C_Master_Write 0002                          _min 00C4                          _sec 00CA  
               ___awmod@sign 003A                          prod 000FF3                          wreg 000FE8  
               __CFG_LVP$OFF 000000                         ?_ISR 0001                 __CFG_WDT$OFF 000000  
                       l3102 1BC4                         l3016 1F90                         l3040 1A7A  
                       l3050 1A9C                         l3034 1A6A                         l3134 1CB0  
                       l3046 1A90                         l3062 1AC2                         l3136 1CB8  
                       l3048 1A98                         l5000 07F8                         l3146 1CD8  
                       l3138 1CBC                         l3066 1AD0                         l3058 1AB8  
                       l3090 1B98                         l3082 1B7E                         l5010 083C  
                       l5020 086A                         l3094 1BAC                         l3086 1B8C  
                       l3078 1B72                         l5006 0832                         l3088 1B94  
                       l5024 08A0                         l5040 0934                         l3098 1BB6  
                       l5042 0940                         l5034 08CA                         l5018 085E  
                       l4500 19EE                         l3436 1F28                         l5052 098E  
                       l5028 08AA                         l4502 19FC                         l3630 1550  
                       l3606 14FE                         l4512 1A34                         l4504 1A00  
                       l4520 1DEA                         l4600 0FC6                         l3640 1576  
                       l3616 1524                         l4522 1DF4                         l4602 0FCC  
                       l4524 1DF8                         l4630 1078                         l4542 0E28  
                       l3654 15A2                         l4702 00BE                         l4528 1E0C  
                       l4624 1036                         l4616 1002                         l4552 0E58  
                       l3672 15EA                         l3664 15C8                         l4720 010C  
                       l4642 10AE                         l4618 1014                         l4570 0F04  
                       l4546 0E3C                         l4714 00EA                         l4706 00C8  
                       l4644 10BA                         l4652 10E8                         l4636 1092  
                       l4628 106E                         l4548 0E4E                         l3692 1640  
                       l3588 1FBE                         l4804 0318                         l4724 0116  
                       l4732 0138                         l4654 10EE                         l4662 1182  
                       l4582 0F6E                         l4566 0EFE                         l4558 0E88  
                       l3686 1626                         l3678 1604                         l4734 0144  
                       l4656 1136                         l4664 1194                         l4648 10D4  
                       l4920 05AA                         l4840 03CE                         l4816 035C  
                       l4666 119C                         l4586 0F8A                         l3698 165E  
                       l4930 05F0                         l4818 0360                         l4922 05BA  
                       l4588 0F90                         l4668 11A8                         l4940 0642  
                       l4932 05FA                         l4924 05C4                         l4852 03F6  
                       l4748 01C6                         l4870 045E                         l4846 03E2  
                       l4694 008C                         l4970 0736                         l4962 06F6  
                       l4954 06B6                         l4946 0676                         l4938 0636  
                       l4866 0412                         l4858 040A                         l4980 0782  
                       l4972 0742                         l4964 0702                         l4956 06C2  
                       l4948 0682                         l4892 049A                         l4992 07D6  
                       l4978 0776                         l4988 07CC                         STR_1 FFED  
                       STR_2 FFDC                         STR_3 FFCB                         STR_4 FF43  
                       STR_5 FF98                         STR_6 FF76                         STR_7 FFBA  
                       STR_8 FE2A                         STR_9 FF65                         _LATA 000F89  
                       _LATB 000F8A                         _LATC 000F8B                         _LATD 000F8C  
                       _LATE 000F8D                         u3260 1F26                         u3600 15F6  
                       u3530 14E4                         u3620 1632                         u3540 150A  
                       u3550 1536                         u6007 1E5C                         u3560 155C  
                       u6017 1D56                         u3570 1588                         u6027 1D5E  
                       _PEIE 007F96                         u3580 15AE                         u5500 0288  
                       u5420 01E2                         u6037 1D7E                         u5095 1C6C  
                       u6047 1D86                         u5520 02B6                         u5610 0376  
                       u5611 0372                         u5700 04DE                         u5620 038C  
                       u5612 0378                         u5540 02DE                         u5460 0232  
                       _RCEN 007E2B                         i2l30 1FF6                         u5710 04E0  
                       u5622 038E                         u5518 028C                         u5438 01E6  
                       u5560 030C                         u5480 0260                         u5740 05A0  
                       u5580 0334                         u5558 02E2                         u5478 0236  
                       u5598 0338                         u5947 00DA                         u5957 0128  
                       u5967 07E8                         u5977 084E                         u5987 097A  
                       u5997 1E28                         _TMR0 000FD6                         _TMR1 000FCE  
                       _main 0012                         _keys FE07                         _numC 00C8  
                       fsr0h 000FEA                         fsr1h 000FE2           i2___lwdiv@quotient 0005  
                       fsr2h 000FDA                         fsr0l 000FE9                         indf2 000FDF  
                       fsr1l 000FE1                         fsr2l 000FD9                         btemp 004B  
       ??i2_I2C_Master_Start 0002         ??i2_I2C_Master_Write 0004                         prodh 000FF4  
                       prodl 000FF3                         start 000E                __CFG_IESO$OFF 000000  
            __end_ofi2_putch 202C                __CFG_MCLRE$ON 000000                 ___param_bank 000000  
                i2_lcdNibble 1D8C                        ??_ISR 0025             ?_I2C_Master_Init 0085  
           ?_I2C_Master_Read 0001             ?_I2C_Master_Wait 0001             ?_I2C_Master_Stop 0001  
                      ?_main 0001                        _ACKEN 007E2C                        _ACKDT 007E2D  
            __end_of___awdiv 1ADA                        _ADRES 000FC3                        STR_10 FECA  
                      STR_11 FEFF                        STR_12 FECA                        STR_20 FE43  
                      STR_13 FF32                        STR_21 FE5A                        STR_14 FEB5  
                      STR_22 FE71                        STR_15 FF10                        STR_23 FE88  
                      STR_16 FEB5                        STR_24 FF21                        STR_17 FF87  
                      STR_25 FEEE                        STR_18 FEB5                        STR_26 FFA9  
                      STR_19 FF54                        STR_27 FE9F                        STR_28 FEDD  
            __end_of___awmod 1BCE              __end_of___lldiv 1A56                        _T0CON 000FD5  
            ___awdiv@divisor 0037                        _T1CON 000FCD              __end_of___lwdiv 1CEC  
            __end_of___lwmod 1E22                        i2l470 12B2                        i2l438 0DDE  
                      i2l387 0ACA                        i2l915 1D34                        i2l925 1EA0  
            ___awdiv@counter 0039                        _PORTB 000F81                        _TRISA 000F92  
                      _TRISB 000F93                        _TRISC 000F94                        _TRISD 000F95  
                      _TRISE 000F96                _turn1BackLeft 00CD                __CFG_PWRT$OFF 000000  
              __CFG_WRT0$OFF 000000                __CFG_WRT1$OFF 000000                __CFG_WRT2$OFF 000000  
              __CFG_WRT3$OFF 000000              __end_of_lcdInst 2020               __CFG_EBTR0$OFF 000000  
             __CFG_FCMEN$OFF 000000               __CFG_EBTR1$OFF 000000                _turn2BackLeft 00CF  
             __CFG_EBTR2$OFF 000000               __CFG_EBTR3$OFF 000000       __size_of_stopOperation 0104  
              __CFG_WRTB$OFF 000000                __CFG_WRTC$OFF 000000                __CFG_WRTD$OFF 000000  
            __end_of_readADC 1FE4              __end_of_initLCD 1E68               __CFG_EBTRB$OFF 000000  
                 i2isdigit@c 0003              __end_of_dpowers FE22                        _numAA 00C6  
                      _num9V 00C5              __end_of_isdigit 1F98                        _step1 0049  
                      _step2 004A                        _putch 2008                        main@i 00A5  
                      pclath 000FFA                        tablat 000FF5             __end_ofi2___wmul 1F54  
                      status 000FD8           __size_ofi2___awdiv 0084           __size_ofi2___awmod 0070  
             __CFG_PBADEN$ON 000000                i2printf@width 001E             __end_ofi2_printf 14D2  
         __size_ofi2___lwdiv 0052           __size_ofi2___lwmod 0042              __initialization 1EAA  
         __size_ofi2_lcdInst 000C                 __end_of_main 099C                 __end_of_keys FE18  
                 i2printf@ap 0018           __size_ofi2_isdigit 001E                       ??_main 0097  
              __activetblptr 000002            ?_I2C_Master_Start 0001            ?_I2C_Master_Write 0036  
         ??_I2C_Master_Start 0036                       _ADCON0 000FC2                       _ADCON1 000FC1  
         ??_I2C_Master_Write 0038                       _ADCON2 000FC0             ___awdiv@dividend 0035  
            i2lcdNibble@data 0002                       ?_putch 0001              i2lcdNibble@temp 0001  
                     _INT1IE 007F83                       _INT1IF 007F80                       i2l3400 149A  
                     i2l3320 12E0                       i2l3304 1280                       i2l3402 14AA  
                     i2l3404 14B0                       i2l3340 132E                       i2l3324 12FA  
                     i2l3308 1284                       i2l3326 12FE                       i2l3406 14B8  
                     i2l3280 11D0                       i2l4400 0CC0                       i2l4320 0B28  
                     i2l3186 1F74                       i2l3362 1384                       i2l3338 132A  
                     i2l3354 135A                       i2l3290 11F4                       i2l4250 0A04  
                     i2l3380 13DC                       i2l3356 136A                       i2l3284 11E0  
                     i2l2900 1B54                       i2l4404 0CCC                       i2l4340 0B94  
                     i2l4308 0AEC                       i2l3382 13E4                       i2l3390 140A  
                     i2l3374 13C6                       i2l3366 13A8                       i2l3286 11EE  
                     i2l4430 0D1E                       i2l4422 0D06                       i2l4414 0CEC  
                     i2l4350 0BD2                       i2l3392 1410                       i2l3368 13B0  
                     i2l3296 1222                       i2l2920 1BFC                       i2l2912 1BE2  
                     i2l4440 0D3C                       i2l4408 0CD8                       i2l4416 0CEE  
                     i2l4352 0BD6                       i2l4328 0B52                       i2l4280 0A8E  
                     i2l3394 1454                       i2l3386 13F8                       i2l2922 1C04  
                     i2l4434 0D28                       i2l4426 0D12                       i2l4442 0D3E  
                     i2l4338 0B90                       i2l4282 0A92                       i2l4274 0A78  
                     i2l4290 0AA8                       i2l2924 1C08                       i2l2932 1C26  
                     i2l2916 1BEE                       i2l3812 1704                       i2l4460 0D78  
                     i2l4452 0D60                       i2l4364 0C18                       i2l3822 1728  
                     i2l4390 0C9E                       i2l2960 1D0A                       i2l2880 1B14  
                     i2l2936 1C34                       i2l2928 1C1C                       i2l3840 1778  
                     i2l3816 170C                       i2l3832 175C                       i2l4456 0D6C  
                     i2l4448 0D54                       i2l4376 0C5A                       i2l4288 0AA4  
                     i2l2970 1D2A                       i2l2962 1D0E                       i2l2882 1B1C  
                     i2l2874 1AFE                       i2l3850 17A0                       i2l4482 0DBE  
                     i2l4474 0DA6                       i2l4466 0D8C                       i2l2980 1E7E  
                     i2l2948 1FAE                       i2l2892 1B3C                       i2l2884 1B20  
                     i2l2868 1AEE                       i2l3828 174C                       i2l4492 0DDC  
                     i2l4468 0D8E                       i2l4396 0CB4                       i2l2958 1D02  
                     i2l2982 1E82                       i2l4486 0DC8                       i2l4478 0DB2  
                     i2l2896 1B46                       i2l3856 17BA                       i2l3848 179A  
                     i2l2986 1E96                       i2l2978 1E76                       _TMR0IE 007F95  
                     _TMR0IF 007F92                    ??i2_putch 0003                       _TMR1IE 007CE8  
                     _TMR1IF 007CF0                       _SSPADD 000FC8                       _TRISC3 007CA3  
                     _TRISC4 007CA4                       _SSPBUF 000FC9               _turn1BackRight 00CE  
             __CFG_XINST$OFF 000000                _stopOperation 17C0               _turn2BackRight 00D0  
                     ___wmul 1EE2                    ??___awdiv 0039               __CFG_STVREN$ON 000000  
                  ??___awmod 0039                    ??___lldiv 003D                    ??___lwdiv 0039  
                  ??___lwmod 0040                       _countC 00C2                       clear_0 1EC2  
                     clear_1 1ECE             ___awdiv@quotient 003B              ___awmod@divisor 0037  
            ___awmod@counter 0039                    ??_lcdInst 0037                       _printf 0E1A  
             i2___awdiv@sign 0006                    ??_readADC 0035                    ??_initLCD 0038  
   __size_ofi2_stopOperation 0104             __end_of_wait_3ms 1FD0                    ??_isdigit 0035  
          __end_ofi2___awdiv 1B5E            __end_ofi2___awmod 1C3E            __end_ofi2___lwdiv 1D3E  
               __mediumconst FE06            __end_ofi2___lwmod 1EAA                       tblptrh 000FF7  
                     tblptrl 000FF6                       tblptru 000FF8              switchMenu@right 0021  
             i2___awmod@sign 0006            __end_ofi2_lcdInst 2038            __end_ofi2_isdigit 1FB6  
                 __accesstop 0080      __end_of__initialization 1ED4                ___rparam_used 000001  
             ?_stopOperation 0001           i2___lwmod@dividend 0008               __pcstackCOMRAM 0001  
               __pidataBANK0 206C                __end_of_putch 2014                  i2printf@idx 0017  
                i2printf@val 001B                    ?i2___wmul 0001           __size_of_lcdNibble 004E  
                i2putch@data 0003                  ISR@keypress 0034                    ?i2_printf 000D  
                    ??_putch 0037                   __pbssBANK0 00AA        __end_of_testBatteries 16AC  
               ?i2_lcdNibble 0001                      ?___wmul 0035                      ?_printf 0081  
                 ??i2___wmul 0005                   ??i2_printf 0013                      _SSPCON1 000FC6  
                    _SSPCON2 000FC5            ??i2_stopOperation 0009                      _SSPSTAT 000FC7  
                    i2_putch 2020                   _countDrain 00C3              ??_stopOperation 003D  
__size_ofi2_I2C_Master_Start 0008            __end_of_lcdNibble 1D8C  __size_ofi2_I2C_Master_Write 000A  
                    __Hparam 0000                      __Lparam 0000                   _lastRunRTC 00AA  
                  ?_wait_3ms 0035                      ___awdiv 1A56                      ___awmod 1B5E  
                    ___lldiv 19C8              __size_of___wmul 0026                      ___lwdiv 1C9A  
                    ___lwmod 1DDA                      __pcinit 1EAA                   _plat1Right 00BA  
                    __ramtop 1000                   _plat2Right 00BE                      _lcdInst 2014  
                    __ptext0 0012                      __ptext1 1FB6                      __ptext2 14D2  
                    __ptext3 1FD0                      __ptext4 17C0                      __ptext5 1B5E  
                    __ptext6 1A56                      __ptext7 0E1A                      __ptext8 2008  
                    __ptext9 1F7A              __size_of_printf 03AC                    _T0CONbits 000FD5  
                    _countAA 00C1                      _count9V 00C0                      _readADC 1FD0  
                    _initLCD 1E22                 __size_of_ISR 0E12            __end_of_hexpowers FE2A  
                  _T1CONbits 000FCD                i2_isdigit$944 0002                      _dpowers FE18  
                    _isdigit 1F7A                      _opTimer 0046             ___awmod@dividend 0035  
                    _numBats 00C7     __size_of_I2C_Master_Init 005C     __size_of_I2C_Master_Read 0026  
   __size_of_I2C_Master_Wait 0012     __size_of_I2C_Master_Stop 0008                      _sorting 0048  
             __pintcode_body 099C         end_of_initialization 1ED4                __Lmediumconst FE06  
                    int_func 099C          i2___wmul@multiplier 0001                   _screenMode 00D1  
  __size_of_I2C_Master_Start 0008    __size_of_I2C_Master_Write 000A              ___lldiv@divisor 0039  
            ___lldiv@counter 0084                   ??_wait_3ms 0037                      printf@c 0096  
                    printf@f 0081             I2C_Master_Init@c 0085             I2C_Master_Read@a 0036  
                    postdec2 000FDD                   _solOnTimer 0047                      postinc0 000FEE  
                    postinc2 000FDE                   _stepAmount 0042            i2_I2C_Master_Read 1F54  
          i2_I2C_Master_Wait 1FF6            i2_I2C_Master_Stop 205C                    i2___awdiv 1ADA  
                  i2___awmod 1BCE            i2___lwdiv@divisor 0003                    i2___lwdiv 1CEC  
                  i2___lwmod 1E68            i2___lwdiv@counter 0007           ?i2_I2C_Master_Read 0001  
         ?i2_I2C_Master_Wait 0001           ?i2_I2C_Master_Stop 0001                    i2_lcdInst 202C  
                printf@width 0094           i2___awdiv@dividend 0001          ??i2_I2C_Master_Read 0002  
                  i2_isdigit 1F98          ??i2_I2C_Master_Wait 0001          ??i2_I2C_Master_Stop 0002  
                 _switchMenu 16AC               __end_of___wmul 1F08         __size_ofi2_lcdNibble 004E  
              i2lcdInst@data 0003             i2___wmul@product 0005               __end_of_printf 11C6  
               i2printf@flag 001D    __end_ofi2_I2C_Master_Read 1F7A    __end_ofi2_I2C_Master_Wait 2008  
               i2printf@prec 001A          start_initialization 1EAA    __end_ofi2_I2C_Master_Stop 2064  
         i2___awdiv@quotient 0007                  __end_of_ISR 0E1A            __size_ofi2___wmul 0026  
                  i2printf@c 0020                    i2printf@f 000D        i2I2C_Master_Read@temp 0003  
                 ?i2___awdiv 0001                   ?i2___awmod 0001                   ?i2___lwdiv 0001  
                 ?i2___lwmod 0008            __size_ofi2_printf 030C            ??_I2C_Master_Init 0089  
          ??_I2C_Master_Read 0036            ??_I2C_Master_Wait 0035                   ?i2_lcdInst 0001  
          ??_I2C_Master_Stop 0036                   ?i2_isdigit 0001                     ??___wmul 0039  
                __pdataBANK0 00D1             __CFG_LPT1OSC$OFF 000000               switchMenu@left 0023  
            i2_stopOperation 18C4                     ??_printf 0089                  __pbssCOMRAM 0040  
              __pcstackBANK0 0080            i2___lwmod@divisor 000A            i2___lwmod@counter 000C  
                   ?i2_putch 0001             _I2C_Master_Start 2054          i2I2C_Master_Write@d 0002  
           _I2C_Master_Write 2038             ___lwdiv@dividend 0035            __CFG_CCP2MX$PORTC 000000  
                ?_switchMenu 0021                    __pintcode 0008                __pmediumconst FE06  
                  _lcdNibble 1D3E                     ?___awdiv 0035                     ?___awmod 0035  
                   ?___lldiv 0035            __size_of_wait_3ms 001A                     ?___lwdiv 0035  
                   ?___lwmod 003C                    _doneTimer 0044                     ?_lcdInst 0001  
                   ?_readADC 0001                     ?_initLCD 0001       __size_of_testBatteries 01DA  
                  _count_3ms 0040                     ?_isdigit 0001   __size_ofi2_I2C_Master_Read 0026  
 __size_ofi2_I2C_Master_Wait 0012   __size_ofi2_I2C_Master_Stop 0008                  switchMenu@i 0024  
                  _hexpowers FE22             ___lwdiv@quotient 0039                  ??i2___awdiv 0005  
                ??i2___awmod 0005                    _plat1Left 00B8                    _plat2Left 00BC  
                ??i2___lwdiv 0005                  ??i2___lwmod 000C               __size_of_putch 000C  
 __end_ofi2_I2C_Master_Start 206C   __end_ofi2_I2C_Master_Write 204C                  ??i2_lcdInst 0003  
             ___wmul@product 0039                     _LATAbits 000F89                     _LATBbits 000F8A  
                   _LATCbits 000F8B                     _LATDbits 000F8C                     _LATEbits 000F8D  
                ??i2_isdigit 0001        __end_of_stopOperation 18C4                     i2u300_40 1F72  
                   i2u450_40 0AE0                     i2u460_40 0B6A                     i2u451_48 0AE2  
                   i2u444_40 0A8A                     i2u605_47 1DA4                     i2u470_40 0C08  
                   i2u462_40 0B84                     i2u461_48 0B6C                     i2u454_40 0B0A  
                   i2u606_47 1DAC                     i2u607_47 1DCC                     i2u472_40 0C30  
                   i2u464_40 0BAC                     i2u455_48 0B0C                     i2u608_47 1DD4  
                   i2u474_40 0C4A                     i2u473_48 0C32                     i2u466_40 0BC6  
                   i2u465_48 0BAE                     i2u458_40 0B42                     i2u476_40 0C72  
                   i2u468_40 0BEE                     i2u478_40 0C8C                     i2u477_48 0C74  
                   i2u469_48 0BF0      __end_ofi2_stopOperation 19C8             __CFG_WDTPS$32768 000000  
                 ?_lcdNibble 0001                    _startGear 00CB                   _ADCON0bits 000FC2  
                  main@i_640 00A9                    main@i_634 00A7                    main@i_636 00A8  
                  main@i_584 00A6                    main@i_594 009B                    main@i_595 009D  
                  main@i_596 009F                    main@i_597 00A1                    main@i_598 00A3  
          ___wmul@multiplier 0035                     i2___wmul 1F2E                lcdNibble@data 0036  
                 printf@flag 0093                lcdNibble@temp 0035                   printf@prec 0090  
          i2___awdiv@divisor 0003            i2___awdiv@counter 0005                     i2_printf 11C6  
        __size_of_switchMenu 0114          I2C_Master_Read@temp 0037           i2___awmod@dividend 0001  
           __size_ofi2_putch 000C                _testBatteries 14D2                     __Hrparam 0000  
                   __Lrparam 0000           __CFG_BOREN$SBORDIS 000000                switchMenu@key 0022  
           __size_of___awdiv 0084             __size_of___awmod 0070        i2___wmul@multiplicand 0003  
           __size_of___lldiv 008E             __size_of___lwdiv 0052             __size_of___lwmod 0048  
             readADC@channel 0035                  _isdigit$944 0036           i2I2C_Master_Read@a 0002  
           __size_of_lcdInst 000C              _I2C_Master_Init 1C3E             __size_of_readADC 0014  
            _I2C_Master_Read 1F08             __size_of_initLCD 0046              _I2C_Master_Wait 1FE4  
            _I2C_Master_Stop 204C             __size_of_isdigit 001E              ___lwdiv@divisor 0037  
            ___lwdiv@counter 003B                     __ptext10 1EE2                     __ptext11 1DDA  
                   __ptext20 1FE4                     __ptext12 1C9A                     __ptext21 1C3E  
                   __ptext13 1E22                     __ptext30 1F98                     __ptext22 19C8  
                   __ptext14 2014                     __ptext31 1F2E                     __ptext15 1D3E  
                   __ptext40 1FF6                     __ptext32 1E68                     __ptext24 16AC  
                   __ptext16 2038                     __ptext33 1CEC                     __ptext25 18C4  
                   __ptext17 204C                     __ptext34 202C                     __ptext26 1BCE  
                   __ptext18 2054                     __ptext35 1D8C                     __ptext27 1ADA  
                   __ptext19 1F08                     __ptext36 2042                     __ptext28 11C6  
                   __ptext37 205C                     __ptext29 2020                     __ptext38 2064  
                   __ptext39 1F54                     _doubleAA 0045                __size_of_main 098A  
                  wait_3ms@x 0035               ?_testBatteries 0001                     _realTime 00B1  
                   _numDrain 00C9                     _wait_3ms 1FB6             ?i2_stopOperation 0001  
              ??i2_lcdNibble 0001                  ??_lcdNibble 0035                     int$flags 004B  
                   _stepGear 00CC                    printf@idx 008D                    printf@val 0091  
          i2___awmod@divisor 0003                    putch@data 0037            i2___awmod@counter 0005  
   __end_of_I2C_Master_Start 205C     __end_of_I2C_Master_Write 2042                   _INTCONbits 000FF2  
                   isdigit@c 0037                     intlevel2 0000             ___lwmod@dividend 003C  
           ___lldiv@dividend 0035                 ??_switchMenu 0023                     printf@ap 008E  
    __end_of_I2C_Master_Init 1C9A      __end_of_I2C_Master_Read 1F2E      __end_of_I2C_Master_Wait 1FF6  
    __end_of_I2C_Master_Stop 2054                  lcdInst@data 0037          __end_ofi2_lcdNibble 1DDA  
           ___lldiv@quotient 0080            I2C_Master_Write@d 0036              ___lwmod@divisor 003E  
            ___lwmod@counter 0080           __end_of_switchMenu 17C0              ??_testBatteries 0036  
