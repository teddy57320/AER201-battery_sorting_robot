

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Mon Mar 13 15:00:59 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    38                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    52                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    53                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    54  0000                     
    55                           ; Version 1.40
    56                           ; Generated 01/12/2016 GMT
    57                           ; 
    58                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    59                           ; All rights reserved.
    60                           ; 
    61                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    62                           ; 
    63                           ; Redistribution and use in source and binary forms, with or without modification, are
    64                           ; permitted provided that the following conditions are met:
    65                           ; 
    66                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    67                           ;        conditions and the following disclaimer.
    68                           ; 
    69                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    70                           ;        of conditions and the following disclaimer in the documentation and/or other
    71                           ;        materials provided with the distribution.
    72                           ; 
    73                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    74                           ;        software without specific prior written permission.
    75                           ; 
    76                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    77                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    78                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    79                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    80                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    81                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    82                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    83                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    84                           ; 
    85                           ; 
    86                           ; Code-generator required, PIC18F4620 Definitions
    87                           ; 
    88                           ; SFR Addresses
    89  0000                     
    90                           	psect	idataCOMRAM
    91  001CB2                     __pidataCOMRAM:
    92                           	opt stack 0
    93                           
    94                           ;initializer for _solOnTimer
    95  001CB2  02                 	db	2
    96                           
    97                           	psect	idataBANK0
    98  001CB3                     __pidataBANK0:
    99                           	opt stack 0
   100                           
   101                           ;initializer for _screenMode
   102  001CB3  02                 	db	2
   103                           
   104                           	psect	mediumconst
   105  00FE46                     __pmediumconst:
   106                           	opt stack 0
   107  00FE46  00                 	db	0
   108  00FE47                     _keys:
   109                           	opt stack 0
   110  00FE47  31                 	db	49
   111  00FE48  32                 	db	50
   112  00FE49  33                 	db	51
   113  00FE4A  41                 	db	65
   114  00FE4B  34                 	db	52
   115  00FE4C  35                 	db	53
   116  00FE4D  36                 	db	54
   117  00FE4E  42                 	db	66
   118  00FE4F  37                 	db	55
   119  00FE50  38                 	db	56
   120  00FE51  39                 	db	57
   121  00FE52  43                 	db	67
   122  00FE53  2A                 	db	42
   123  00FE54  30                 	db	48
   124  00FE55  23                 	db	35
   125  00FE56  44                 	db	68
   126  00FE57  00                 	db	0
   127  00FE58                     __end_of_keys:
   128                           	opt stack 0
   129  00FE58                     _dpowers:
   130                           	opt stack 0
   131  00FE58  0001               	dw	1
   132  00FE5A  000A               	dw	10
   133  00FE5C  0064               	dw	100
   134  00FE5E  03E8               	dw	1000
   135  00FE60  2710               	dw	10000
   136  00FE62                     __end_of_dpowers:
   137                           	opt stack 0
   138  00FE62                     _hexpowers:
   139                           	opt stack 0
   140  00FE62  0001               	dw	1
   141  00FE64  0010               	dw	16
   142  00FE66  0100               	dw	256
   143  00FE68  1000               	dw	4096
   144  00FE6A                     __end_of_hexpowers:
   145                           	opt stack 0
   146  0000                     _ADRES	set	4035
   147  0000                     _TMR0	set	4054
   148  0000                     _TMR1	set	4046
   149  0000                     _ADCON0	set	4034
   150  0000                     _ADCON0bits	set	4034
   151  0000                     _ADCON1	set	4033
   152  0000                     _ADCON2	set	4032
   153  0000                     _INTCONbits	set	4082
   154  0000                     _LATA	set	3977
   155  0000                     _LATAbits	set	3977
   156  0000                     _LATB	set	3978
   157  0000                     _LATBbits	set	3978
   158  0000                     _LATC	set	3979
   159  0000                     _LATCbits	set	3979
   160  0000                     _LATD	set	3980
   161  0000                     _LATDbits	set	3980
   162  0000                     _LATE	set	3981
   163  0000                     _LATEbits	set	3981
   164  0000                     _PORTB	set	3969
   165  0000                     _SSPADD	set	4040
   166  0000                     _SSPBUF	set	4041
   167  0000                     _SSPCON1	set	4038
   168  0000                     _SSPCON2	set	4037
   169  0000                     _SSPSTAT	set	4039
   170  0000                     _T0CON	set	4053
   171  0000                     _T0CONbits	set	4053
   172  0000                     _T1CON	set	4045
   173  0000                     _T1CONbits	set	4045
   174  0000                     _TRISA	set	3986
   175  0000                     _TRISB	set	3987
   176  0000                     _TRISC	set	3988
   177  0000                     _TRISD	set	3989
   178  0000                     _TRISE	set	3990
   179  0000                     _ACKDT	set	32301
   180  0000                     _ACKEN	set	32300
   181  0000                     _GIE	set	32663
   182  0000                     _INT1IE	set	32643
   183  0000                     _INT1IF	set	32640
   184  0000                     _PEIE	set	32662
   185  0000                     _PEN	set	32298
   186  0000                     _RCEN	set	32299
   187  0000                     _SEN	set	32296
   188  0000                     _TMR0IE	set	32661
   189  0000                     _TMR0IF	set	32658
   190  0000                     _TMR1IE	set	31976
   191  0000                     _TMR1IF	set	31984
   192  0000                     _TRISC3	set	31907
   193  0000                     _TRISC4	set	31908
   194  00FE6A                     STR_8:
   195  00FE6A  25                 	db	37
   196  00FE6B  30                 	db	48	;'0'
   197  00FE6C  32                 	db	50	;'2'
   198  00FE6D  64                 	db	100	;'d'
   199  00FE6E  3A                 	db	58	;':'
   200  00FE6F  25                 	db	37
   201  00FE70  30                 	db	48	;'0'
   202  00FE71  32                 	db	50	;'2'
   203  00FE72  64                 	db	100	;'d'
   204  00FE73  20                 	db	32
   205  00FE74  20                 	db	32
   206  00FE75  20                 	db	32
   207  00FE76  20                 	db	32
   208  00FE77  20                 	db	32
   209  00FE78  20                 	db	32
   210  00FE79  20                 	db	32
   211  00FE7A  20                 	db	32
   212  00FE7B  20                 	db	32
   213  00FE7C  20                 	db	32
   214  00FE7D  20                 	db	32
   215  00FE7E  20                 	db	32
   216  00FE7F  20                 	db	32
   217  00FE80  20                 	db	32
   218  00FE81  20                 	db	32
   219  00FE82  00                 	db	0
   220  00FE83                     STR_19:
   221  00FE83  44                 	db	68	;'D'
   222  00FE84  41                 	db	65	;'A'
   223  00FE85  54                 	db	84	;'T'
   224  00FE86  45                 	db	69	;'E'
   225  00FE87  3A                 	db	58	;':'
   226  00FE88  20                 	db	32
   227  00FE89  25                 	db	37
   228  00FE8A  30                 	db	48	;'0'
   229  00FE8B  32                 	db	50	;'2'
   230  00FE8C  78                 	db	120	;'x'
   231  00FE8D  2F                 	db	47
   232  00FE8E  25                 	db	37
   233  00FE8F  30                 	db	48	;'0'
   234  00FE90  32                 	db	50	;'2'
   235  00FE91  78                 	db	120	;'x'
   236  00FE92  2F                 	db	47
   237  00FE93  25                 	db	37
   238  00FE94  30                 	db	48	;'0'
   239  00FE95  32                 	db	50	;'2'
   240  00FE96  78                 	db	120	;'x'
   241  00FE97  20                 	db	32
   242  00FE98  20                 	db	32
   243  00FE99  00                 	db	0
   244  00FE9A                     STR_20:
   245  00FE9A  54                 	db	84	;'T'
   246  00FE9B  49                 	db	73	;'I'
   247  00FE9C  4D                 	db	77	;'M'
   248  00FE9D  45                 	db	69	;'E'
   249  00FE9E  3A                 	db	58	;':'
   250  00FE9F  20                 	db	32
   251  00FEA0  25                 	db	37
   252  00FEA1  30                 	db	48	;'0'
   253  00FEA2  32                 	db	50	;'2'
   254  00FEA3  78                 	db	120	;'x'
   255  00FEA4  3A                 	db	58	;':'
   256  00FEA5  25                 	db	37
   257  00FEA6  30                 	db	48	;'0'
   258  00FEA7  32                 	db	50	;'2'
   259  00FEA8  78                 	db	120	;'x'
   260  00FEA9  3A                 	db	58	;':'
   261  00FEAA  25                 	db	37
   262  00FEAB  30                 	db	48	;'0'
   263  00FEAC  32                 	db	50	;'2'
   264  00FEAD  78                 	db	120	;'x'
   265  00FEAE  20                 	db	32
   266  00FEAF  20                 	db	32
   267  00FEB0  00                 	db	0
   268  00FEB1                     STR_24:
   269  00FEB1  52                 	db	82	;'R'
   270  00FEB2  55                 	db	85	;'U'
   271  00FEB3  4E                 	db	78	;'N'
   272  00FEB4  4E                 	db	78	;'N'
   273  00FEB5  49                 	db	73	;'I'
   274  00FEB6  4E                 	db	78	;'N'
   275  00FEB7  47                 	db	71	;'G'
   276  00FEB8  3A                 	db	58	;':'
   277  00FEB9  20                 	db	32
   278  00FEBA  25                 	db	37
   279  00FEBB  30                 	db	48	;'0'
   280  00FEBC  32                 	db	50	;'2'
   281  00FEBD  64                 	db	100	;'d'
   282  00FEBE  3A                 	db	58	;':'
   283  00FEBF  25                 	db	37
   284  00FEC0  30                 	db	48	;'0'
   285  00FEC1  32                 	db	50	;'2'
   286  00FEC2  64                 	db	100	;'d'
   287  00FEC3  20                 	db	32
   288  00FEC4  20                 	db	32
   289  00FEC5  20                 	db	32
   290  00FEC6  00                 	db	0
   291  00FEC7                     STR_14:
   292  00FEC7  42                 	db	66	;'B'
   293  00FEC8  41                 	db	65	;'A'
   294  00FEC9  54                 	db	84	;'T'
   295  00FECA  54                 	db	84	;'T'
   296  00FECB  45                 	db	69	;'E'
   297  00FECC  52                 	db	82	;'R'
   298  00FECD  49                 	db	73	;'I'
   299  00FECE  45                 	db	69	;'E'
   300  00FECF  53                 	db	83	;'S'
   301  00FED0  3A                 	db	58	;':'
   302  00FED1  20                 	db	32
   303  00FED2  25                 	db	37
   304  00FED3  30                 	db	48	;'0'
   305  00FED4  32                 	db	50	;'2'
   306  00FED5  64                 	db	100	;'d'
   307  00FED6  20                 	db	32
   308  00FED7  20                 	db	32
   309  00FED8  20                 	db	32
   310  00FED9  20                 	db	32
   311  00FEDA  20                 	db	32
   312  00FEDB  00                 	db	0
   313  00FEDC                     STR_10:
   314  00FEDC  42                 	db	66	;'B'
   315  00FEDD  41                 	db	65	;'A'
   316  00FEDE  54                 	db	84	;'T'
   317  00FEDF  54                 	db	84	;'T'
   318  00FEE0  45                 	db	69	;'E'
   319  00FEE1  52                 	db	82	;'R'
   320  00FEE2  49                 	db	73	;'I'
   321  00FEE3  45                 	db	69	;'E'
   322  00FEE4  53                 	db	83	;'S'
   323  00FEE5  3A                 	db	58	;':'
   324  00FEE6  20                 	db	32
   325  00FEE7  25                 	db	37
   326  00FEE8  30                 	db	48	;'0'
   327  00FEE9  32                 	db	50	;'2'
   328  00FEEA  64                 	db	100	;'d'
   329  00FEEB  20                 	db	32
   330  00FEEC  20                 	db	32
   331  00FEED  20                 	db	32
   332  00FEEE  00                 	db	0
   333  00FEEF                     STR_25:
   334  00FEEF  30                 	db	48	;'0'
   335  00FEF0  31                 	db	49	;'1'
   336  00FEF1  32                 	db	50	;'2'
   337  00FEF2  33                 	db	51	;'3'
   338  00FEF3  34                 	db	52	;'4'
   339  00FEF4  35                 	db	53	;'5'
   340  00FEF5  36                 	db	54	;'6'
   341  00FEF6  37                 	db	55	;'7'
   342  00FEF7  38                 	db	56	;'8'
   343  00FEF8  39                 	db	57	;'9'
   344  00FEF9  61                 	db	97	;'a'
   345  00FEFA  62                 	db	98	;'b'
   346  00FEFB  63                 	db	99	;'c'
   347  00FEFC  64                 	db	100	;'d'
   348  00FEFD  65                 	db	101	;'e'
   349  00FEFE  66                 	db	102	;'f'
   350  00FEFF  00                 	db	0
   351  00FF00                     STR_22:
   352  00FF00  20                 	db	32
   353  00FF01  20                 	db	32
   354  00FF02  20                 	db	32
   355  00FF03  20                 	db	32
   356  00FF04  20                 	db	32
   357  00FF05  20                 	db	32
   358  00FF06  20                 	db	32
   359  00FF07  20                 	db	32
   360  00FF08  20                 	db	32
   361  00FF09  20                 	db	32
   362  00FF0A  20                 	db	32
   363  00FF0B  20                 	db	32
   364  00FF0C  20                 	db	32
   365  00FF0D  20                 	db	32
   366  00FF0E  20                 	db	32
   367  00FF0F  20                 	db	32
   368  00FF10  00                 	db	0
   369  00FF11                     STR_11:
   370  00FF11  23                 	db	35
   371  00FF12  20                 	db	32
   372  00FF13  4F                 	db	79	;'O'
   373  00FF14  46                 	db	70	;'F'
   374  00FF15  20                 	db	32
   375  00FF16  43                 	db	67	;'C'
   376  00FF17  20                 	db	32
   377  00FF18  20                 	db	32
   378  00FF19  20                 	db	32
   379  00FF1A  20                 	db	32
   380  00FF1B  20                 	db	32
   381  00FF1C  20                 	db	32
   382  00FF1D  20                 	db	32
   383  00FF1E  20                 	db	32
   384  00FF1F  20                 	db	32
   385  00FF20  20                 	db	32
   386  00FF21  00                 	db	0
   387  00FF22                     STR_15:
   388  00FF22  23                 	db	35
   389  00FF23  20                 	db	32
   390  00FF24  4F                 	db	79	;'O'
   391  00FF25  46                 	db	70	;'F'
   392  00FF26  20                 	db	32
   393  00FF27  41                 	db	65	;'A'
   394  00FF28  41                 	db	65	;'A'
   395  00FF29  20                 	db	32
   396  00FF2A  20                 	db	32
   397  00FF2B  20                 	db	32
   398  00FF2C  20                 	db	32
   399  00FF2D  20                 	db	32
   400  00FF2E  20                 	db	32
   401  00FF2F  20                 	db	32
   402  00FF30  20                 	db	32
   403  00FF31  20                 	db	32
   404  00FF32  00                 	db	0
   405  00FF33                     STR_13:
   406  00FF33  23                 	db	35
   407  00FF34  20                 	db	32
   408  00FF35  4F                 	db	79	;'O'
   409  00FF36  46                 	db	70	;'F'
   410  00FF37  20                 	db	32
   411  00FF38  39                 	db	57	;'9'
   412  00FF39  56                 	db	86	;'V'
   413  00FF3A  20                 	db	32
   414  00FF3B  20                 	db	32
   415  00FF3C  20                 	db	32
   416  00FF3D  20                 	db	32
   417  00FF3E  20                 	db	32
   418  00FF3F  20                 	db	32
   419  00FF40  20                 	db	32
   420  00FF41  20                 	db	32
   421  00FF42  20                 	db	32
   422  00FF43  00                 	db	0
   423  00FF44                     STR_4:
   424  00FF44  25                 	db	37
   425  00FF45  34                 	db	52	;'4'
   426  00FF46  64                 	db	100	;'d'
   427  00FF47  20                 	db	32
   428  00FF48  25                 	db	37
   429  00FF49  32                 	db	50	;'2'
   430  00FF4A  64                 	db	100	;'d'
   431  00FF4B  20                 	db	32
   432  00FF4C  20                 	db	32
   433  00FF4D  20                 	db	32
   434  00FF4E  20                 	db	32
   435  00FF4F  20                 	db	32
   436  00FF50  20                 	db	32
   437  00FF51  20                 	db	32
   438  00FF52  20                 	db	32
   439  00FF53  20                 	db	32
   440  00FF54  00                 	db	0
   441  00FF55                     STR_9:
   442  00FF55  54                 	db	84	;'T'
   443  00FF56  4F                 	db	79	;'O'
   444  00FF57  54                 	db	84	;'T'
   445  00FF58  41                 	db	65	;'A'
   446  00FF59  4C                 	db	76	;'L'
   447  00FF5A  20                 	db	32
   448  00FF5B  23                 	db	35
   449  00FF5C  20                 	db	32
   450  00FF5D  4F                 	db	79	;'O'
   451  00FF5E  46                 	db	70	;'F'
   452  00FF5F  20                 	db	32
   453  00FF60  20                 	db	32
   454  00FF61  20                 	db	32
   455  00FF62  20                 	db	32
   456  00FF63  20                 	db	32
   457  00FF64  20                 	db	32
   458  00FF65  00                 	db	0
   459  00FF66                     STR_6:
   460  00FF66  54                 	db	84	;'T'
   461  00FF67  4F                 	db	79	;'O'
   462  00FF68  20                 	db	32
   463  00FF69  43                 	db	67	;'C'
   464  00FF6A  4F                 	db	79	;'O'
   465  00FF6B  4E                 	db	78	;'N'
   466  00FF6C  54                 	db	84	;'T'
   467  00FF6D  49                 	db	73	;'I'
   468  00FF6E  4E                 	db	78	;'N'
   469  00FF6F  55                 	db	85	;'U'
   470  00FF70  45                 	db	69	;'E'
   471  00FF71  20                 	db	32
   472  00FF72  20                 	db	32
   473  00FF73  20                 	db	32
   474  00FF74  20                 	db	32
   475  00FF75  20                 	db	32
   476  00FF76  00                 	db	0
   477  00FF77                     STR_17:
   478  00FF77  23                 	db	35
   479  00FF78  20                 	db	32
   480  00FF79  4F                 	db	79	;'O'
   481  00FF7A  46                 	db	70	;'F'
   482  00FF7B  20                 	db	32
   483  00FF7C  44                 	db	68	;'D'
   484  00FF7D  52                 	db	82	;'R'
   485  00FF7E  41                 	db	65	;'A'
   486  00FF7F  49                 	db	73	;'I'
   487  00FF80  4E                 	db	78	;'N'
   488  00FF81  45                 	db	69	;'E'
   489  00FF82  44                 	db	68	;'D'
   490  00FF83  20                 	db	32
   491  00FF84  20                 	db	32
   492  00FF85  20                 	db	32
   493  00FF86  20                 	db	32
   494  00FF87  00                 	db	0
   495  00FF88                     STR_5:
   496  00FF88  44                 	db	68	;'D'
   497  00FF89  4F                 	db	79	;'O'
   498  00FF8A  4E                 	db	78	;'N'
   499  00FF8B  45                 	db	69	;'E'
   500  00FF8C  21                 	db	33
   501  00FF8D  20                 	db	32
   502  00FF8E  50                 	db	80	;'P'
   503  00FF8F  52                 	db	82	;'R'
   504  00FF90  45                 	db	69	;'E'
   505  00FF91  53                 	db	83	;'S'
   506  00FF92  53                 	db	83	;'S'
   507  00FF93  20                 	db	32
   508  00FF94  2A                 	db	42
   509  00FF95  20                 	db	32
   510  00FF96  20                 	db	32
   511  00FF97  20                 	db	32
   512  00FF98  00                 	db	0
   513  00FF99                     STR_23:
   514  00FF99  52                 	db	82	;'R'
   515  00FF9A  55                 	db	85	;'U'
   516  00FF9B  4E                 	db	78	;'N'
   517  00FF9C  4E                 	db	78	;'N'
   518  00FF9D  49                 	db	73	;'I'
   519  00FF9E  4E                 	db	78	;'N'
   520  00FF9F  47                 	db	71	;'G'
   521  00FFA0  3A                 	db	58	;':'
   522  00FFA1  20                 	db	32
   523  00FFA2  30                 	db	48	;'0'
   524  00FFA3  30                 	db	48	;'0'
   525  00FFA4  3A                 	db	58	;':'
   526  00FFA5  30                 	db	48	;'0'
   527  00FFA6  30                 	db	48	;'0'
   528  00FFA7  20                 	db	32
   529  00FFA8  20                 	db	32
   530  00FFA9  00                 	db	0
   531  00FFAA                     STR_21:
   532  00FFAA  45                 	db	69	;'E'
   533  00FFAB  4D                 	db	77	;'M'
   534  00FFAC  45                 	db	69	;'E'
   535  00FFAD  52                 	db	82	;'R'
   536  00FFAE  47                 	db	71	;'G'
   537  00FFAF  45                 	db	69	;'E'
   538  00FFB0  4E                 	db	78	;'N'
   539  00FFB1  43                 	db	67	;'C'
   540  00FFB2  59                 	db	89	;'Y'
   541  00FFB3  20                 	db	32
   542  00FFB4  53                 	db	83	;'S'
   543  00FFB5  54                 	db	84	;'T'
   544  00FFB6  4F                 	db	79	;'O'
   545  00FFB7  50                 	db	80	;'P'
   546  00FFB8  20                 	db	32
   547  00FFB9  20                 	db	32
   548  00FFBA  00                 	db	0
   549  00FFBB                     STR_7:
   550  00FFBB  54                 	db	84	;'T'
   551  00FFBC  4F                 	db	79	;'O'
   552  00FFBD  54                 	db	84	;'T'
   553  00FFBE  41                 	db	65	;'A'
   554  00FFBF  4C                 	db	76	;'L'
   555  00FFC0  20                 	db	32
   556  00FFC1  52                 	db	82	;'R'
   557  00FFC2  55                 	db	85	;'U'
   558  00FFC3  4E                 	db	78	;'N'
   559  00FFC4  20                 	db	32
   560  00FFC5  54                 	db	84	;'T'
   561  00FFC6  49                 	db	73	;'I'
   562  00FFC7  4D                 	db	77	;'M'
   563  00FFC8  45                 	db	69	;'E'
   564  00FFC9  3A                 	db	58	;':'
   565  00FFCA  20                 	db	32
   566  00FFCB  00                 	db	0
   567  00FFCC                     STR_3:
   568  00FFCC  20                 	db	32
   569  00FFCD  3C                 	db	60	;'<'
   570  00FFCE  34                 	db	52	;'4'
   571  00FFCF  20                 	db	32
   572  00FFD0  20                 	db	32
   573  00FFD1  20                 	db	32
   574  00FFD2  44                 	db	68	;'D'
   575  00FFD3  41                 	db	65	;'A'
   576  00FFD4  54                 	db	84	;'T'
   577  00FFD5  41                 	db	65	;'A'
   578  00FFD6  20                 	db	32
   579  00FFD7  20                 	db	32
   580  00FFD8  20                 	db	32
   581  00FFD9  36                 	db	54	;'6'
   582  00FFDA  3E                 	db	62	;'>'
   583  00FFDB  20                 	db	32
   584  00FFDC  00                 	db	0
   585  00FFDD                     STR_1:
   586  00FFDD  53                 	db	83	;'S'
   587  00FFDE  54                 	db	84	;'T'
   588  00FFDF  41                 	db	65	;'A'
   589  00FFE0  52                 	db	82	;'R'
   590  00FFE1  54                 	db	84	;'T'
   591  00FFE2  3A                 	db	58	;':'
   592  00FFE3  20                 	db	32
   593  00FFE4  20                 	db	32
   594  00FFE5  20                 	db	32
   595  00FFE6  50                 	db	80	;'P'
   596  00FFE7  52                 	db	82	;'R'
   597  00FFE8  45                 	db	69	;'E'
   598  00FFE9  53                 	db	83	;'S'
   599  00FFEA  53                 	db	83	;'S'
   600  00FFEB  20                 	db	32
   601  00FFEC  2A                 	db	42
   602  00FFED  00                 	db	0
   603  00FFEE                     STR_2:
   604  00FFEE  3C                 	db	60	;'<'
   605  00FFEF  20                 	db	32
   606  00FFF0  34                 	db	52	;'4'
   607  00FFF1  20                 	db	32
   608  00FFF2  20                 	db	32
   609  00FFF3  20                 	db	32
   610  00FFF4  44                 	db	68	;'D'
   611  00FFF5  41                 	db	65	;'A'
   612  00FFF6  54                 	db	84	;'T'
   613  00FFF7  41                 	db	65	;'A'
   614  00FFF8  20                 	db	32
   615  00FFF9  20                 	db	32
   616  00FFFA  20                 	db	32
   617  00FFFB  36                 	db	54	;'6'
   618  00FFFC  20                 	db	32
   619  00FFFD  3E                 	db	62	;'>'
   620  00FFFE  00                 	db	0
   621  0000                     
   622                           ; #config settings
   623  00FFFF  00                 	db	0	; dummy byte at the end
   624  0000                     
   625                           	psect	cinit
   626  001A80                     __pcinit:
   627                           	opt stack 0
   628  001A80                     start_initialization:
   629                           	opt stack 0
   630  001A80                     __initialization:
   631                           	opt stack 0
   632                           
   633                           ; Initialize objects allocated to BANK0 (1 bytes)
   634                           ; load TBLPTR registers with __pidataBANK0
   635  001A80  0EB3               	movlw	low __pidataBANK0
   636  001A82  6EF6               	movwf	tblptrl,c
   637  001A84  0E1C               	movlw	high __pidataBANK0
   638  001A86  6EF7               	movwf	tblptrh,c
   639  001A88  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   640  001A8A  6EF8               	movwf	tblptru,c
   641  001A8C  0009               	tblrd		*+	;fetch initializer
   642  001A8E  CFF5 F0BE          	movff	tablat,__pdataBANK0
   643                           
   644                           ; Initialize objects allocated to COMRAM (1 bytes)
   645                           ; load TBLPTR registers with __pidataCOMRAM
   646  001A92  0EB2               	movlw	low __pidataCOMRAM
   647  001A94  6EF6               	movwf	tblptrl,c
   648  001A96  0E1C               	movlw	high __pidataCOMRAM
   649  001A98  6EF7               	movwf	tblptrh,c
   650  001A9A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   651  001A9C  6EF8               	movwf	tblptru,c
   652  001A9E  0009               	tblrd		*+	;fetch initializer
   653  001AA0  CFF5 F04B          	movff	tablat,__pdataCOMRAM
   654                           
   655                           ; Clear objects allocated to BANK0 (33 bytes)
   656  001AA4  EE00  F080         	lfsr	0,__pbssBANK0
   657  001AA8  0E21               	movlw	33
   658  001AAA                     clear_0:
   659  001AAA  6AEE               	clrf	postinc0,c
   660  001AAC  06E8               	decf	wreg,f,c
   661  001AAE  E1FD               	bnz	clear_0
   662                           
   663                           ; Clear objects allocated to COMRAM (7 bytes)
   664  001AB0  EE00  F044         	lfsr	0,__pbssCOMRAM
   665  001AB4  0E07               	movlw	7
   666  001AB6                     clear_1:
   667  001AB6  6AEE               	clrf	postinc0,c
   668  001AB8  06E8               	decf	wreg,f,c
   669  001ABA  E1FD               	bnz	clear_1
   670  001ABC                     end_of_initialization:
   671                           	opt stack 0
   672  001ABC                     __end_of__initialization:
   673                           	opt stack 0
   674  001ABC  904C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   675  001ABE  924C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   676  001AC0  0E00               	movlw	low (__Lmediumconst shr (0+16))
   677  001AC2  6EF8               	movwf	tblptru,c
   678  001AC4  0100               	movlb	0
   679  001AC6  EF09  F000         	goto	_main	;jump to C main() function
   680                           tblptru	equ	0xFF8
   681                           tblptrh	equ	0xFF7
   682                           tblptrl	equ	0xFF6
   683                           tablat	equ	0xFF5
   684                           postinc0	equ	0xFEE
   685                           wreg	equ	0xFE8
   686                           
   687                           	psect	bssCOMRAM
   688  000044                     __pbssCOMRAM:
   689                           	opt stack 0
   690  000044                     _stepAmount:
   691                           	opt stack 0
   692  000044                     	ds	2
   693  000046                     _doneTimer:
   694                           	opt stack 0
   695  000046                     	ds	1
   696  000047                     _opTimer:
   697                           	opt stack 0
   698  000047                     	ds	1
   699  000048                     _sorting:
   700                           	opt stack 0
   701  000048                     	ds	1
   702  000049                     _step1:
   703                           	opt stack 0
   704  000049                     	ds	1
   705  00004A                     _step2:
   706                           	opt stack 0
   707  00004A                     	ds	1
   708                           tblptru	equ	0xFF8
   709                           tblptrh	equ	0xFF7
   710                           tblptrl	equ	0xFF6
   711                           tablat	equ	0xFF5
   712                           postinc0	equ	0xFEE
   713                           wreg	equ	0xFE8
   714                           
   715                           	psect	dataCOMRAM
   716  00004B                     __pdataCOMRAM:
   717                           	opt stack 0
   718  00004B                     _solOnTimer:
   719                           	opt stack 0
   720  00004B                     	ds	1
   721                           tblptru	equ	0xFF8
   722                           tblptrh	equ	0xFF7
   723                           tblptrl	equ	0xFF6
   724                           tablat	equ	0xFF5
   725                           postinc0	equ	0xFEE
   726                           wreg	equ	0xFE8
   727                           
   728                           	psect	bssBANK0
   729  000080                     __pbssBANK0:
   730                           	opt stack 0
   731  000080                     _time:
   732                           	opt stack 0
   733  000080                     	ds	7
   734  000087                     _plat1Left:
   735                           	opt stack 0
   736  000087                     	ds	2
   737  000089                     _plat1Right:
   738                           	opt stack 0
   739  000089                     	ds	2
   740  00008B                     _plat2Left:
   741                           	opt stack 0
   742  00008B                     	ds	2
   743  00008D                     _plat2Right:
   744                           	opt stack 0
   745  00008D                     	ds	2
   746  00008F                     _count9V:
   747                           	opt stack 0
   748  00008F                     	ds	1
   749  000090                     _countAA:
   750                           	opt stack 0
   751  000090                     	ds	1
   752  000091                     _countC:
   753                           	opt stack 0
   754  000091                     	ds	1
   755  000092                     _countDrain:
   756                           	opt stack 0
   757  000092                     	ds	1
   758  000093                     _min:
   759                           	opt stack 0
   760  000093                     	ds	1
   761  000094                     _num9V:
   762                           	opt stack 0
   763  000094                     	ds	1
   764  000095                     _numAA:
   765                           	opt stack 0
   766  000095                     	ds	1
   767  000096                     _numBats:
   768                           	opt stack 0
   769  000096                     	ds	1
   770  000097                     _numC:
   771                           	opt stack 0
   772  000097                     	ds	1
   773  000098                     _numDrain:
   774                           	opt stack 0
   775  000098                     	ds	1
   776  000099                     _sec:
   777                           	opt stack 0
   778  000099                     	ds	1
   779  00009A                     _startGear:
   780                           	opt stack 0
   781  00009A                     	ds	1
   782  00009B                     _stepGear:
   783                           	opt stack 0
   784  00009B                     	ds	1
   785  00009C                     _turn1BackLeft:
   786                           	opt stack 0
   787  00009C                     	ds	1
   788  00009D                     _turn1BackRight:
   789                           	opt stack 0
   790  00009D                     	ds	1
   791  00009E                     _turn2BackLeft:
   792                           	opt stack 0
   793  00009E                     	ds	1
   794  00009F                     _turn2BackRight:
   795                           	opt stack 0
   796  00009F                     	ds	1
   797  0000A0                     _waitPlats:
   798                           	opt stack 0
   799  0000A0                     	ds	1
   800                           tblptru	equ	0xFF8
   801                           tblptrh	equ	0xFF7
   802                           tblptrl	equ	0xFF6
   803                           tablat	equ	0xFF5
   804                           postinc0	equ	0xFEE
   805                           wreg	equ	0xFE8
   806                           
   807                           	psect	dataBANK0
   808  0000BE                     __pdataBANK0:
   809                           	opt stack 0
   810  0000BE                     _screenMode:
   811                           	opt stack 0
   812  0000BE                     	ds	1
   813                           tblptru	equ	0xFF8
   814                           tblptrh	equ	0xFF7
   815                           tblptrl	equ	0xFF6
   816                           tablat	equ	0xFF5
   817                           postinc0	equ	0xFEE
   818                           wreg	equ	0xFE8
   819                           
   820                           	psect	cstackBANK0
   821  0000A1                     __pcstackBANK0:
   822                           	opt stack 0
   823  0000A1                     ?_printf:
   824                           	opt stack 0
   825  0000A1                     printf@f:
   826                           	opt stack 0
   827  0000A1                     I2C_Master_Init@c:
   828                           	opt stack 0
   829                           
   830                           ; 4 bytes @ 0x0
   831  0000A1                     	ds	4
   832  0000A5                     ??_I2C_Master_Init:
   833                           
   834                           ; 1 bytes @ 0x4
   835  0000A5                     	ds	4
   836  0000A9                     printf@idx:
   837                           	opt stack 0
   838                           
   839                           ; 1 bytes @ 0x8
   840  0000A9                     	ds	1
   841  0000AA                     printf@ap:
   842                           	opt stack 0
   843                           
   844                           ; 2 bytes @ 0x9
   845  0000AA                     	ds	2
   846  0000AC                     printf@prec:
   847                           	opt stack 0
   848                           
   849                           ; 1 bytes @ 0xB
   850  0000AC                     	ds	1
   851  0000AD                     printf@val:
   852                           	opt stack 0
   853                           
   854                           ; 2 bytes @ 0xC
   855  0000AD                     	ds	2
   856  0000AF                     printf@flag:
   857                           	opt stack 0
   858                           
   859                           ; 1 bytes @ 0xE
   860  0000AF                     	ds	1
   861  0000B0                     printf@width:
   862                           	opt stack 0
   863                           
   864                           ; 2 bytes @ 0xF
   865  0000B0                     	ds	2
   866  0000B2                     printf@c:
   867                           	opt stack 0
   868                           
   869                           ; 1 bytes @ 0x11
   870  0000B2                     	ds	1
   871  0000B3                     ??_main:
   872                           
   873                           ; 1 bytes @ 0x12
   874  0000B3                     	ds	4
   875  0000B7                     main@i_590:
   876                           	opt stack 0
   877                           
   878                           ; 2 bytes @ 0x16
   879  0000B7                     	ds	2
   880  0000B9                     main@i:
   881                           	opt stack 0
   882                           
   883                           ; 1 bytes @ 0x18
   884  0000B9                     	ds	1
   885  0000BA                     main@i_580:
   886                           	opt stack 0
   887                           
   888                           ; 1 bytes @ 0x19
   889  0000BA                     	ds	1
   890  0000BB                     main@i_591:
   891                           	opt stack 0
   892                           
   893                           ; 1 bytes @ 0x1A
   894  0000BB                     	ds	1
   895  0000BC                     main@i_592:
   896                           	opt stack 0
   897                           
   898                           ; 1 bytes @ 0x1B
   899  0000BC                     	ds	1
   900  0000BD                     main@i_633:
   901                           	opt stack 0
   902                           
   903                           ; 1 bytes @ 0x1C
   904  0000BD                     	ds	1
   905                           tblptru	equ	0xFF8
   906                           tblptrh	equ	0xFF7
   907                           tblptrl	equ	0xFF6
   908                           tablat	equ	0xFF5
   909                           postinc0	equ	0xFEE
   910                           wreg	equ	0xFE8
   911                           
   912                           	psect	cstackCOMRAM
   913  000001                     __pcstackCOMRAM:
   914                           	opt stack 0
   915  000001                     ??i2_isdigit:
   916  000001                     ?i2___wmul:
   917                           	opt stack 0
   918  000001                     ?i2___awdiv:
   919                           	opt stack 0
   920  000001                     ?i2___awmod:
   921                           	opt stack 0
   922  000001                     ?i2___lwdiv:
   923                           	opt stack 0
   924  000001                     i2lcdNibble@temp:
   925                           	opt stack 0
   926  000001                     i2___wmul@multiplier:
   927                           	opt stack 0
   928  000001                     i2___awdiv@dividend:
   929                           	opt stack 0
   930  000001                     i2___awmod@dividend:
   931                           	opt stack 0
   932  000001                     i2___lwdiv@dividend:
   933                           	opt stack 0
   934                           
   935                           ; 2 bytes @ 0x0
   936  000001                     	ds	1
   937  000002                     i2lcdNibble@data:
   938                           	opt stack 0
   939  000002                     i2_isdigit$935:
   940                           	opt stack 0
   941                           
   942                           ; 1 bytes @ 0x1
   943  000002                     	ds	1
   944  000003                     i2lcdInst@data:
   945                           	opt stack 0
   946  000003                     i2putch@data:
   947                           	opt stack 0
   948  000003                     i2isdigit@c:
   949                           	opt stack 0
   950  000003                     i2___wmul@multiplicand:
   951                           	opt stack 0
   952  000003                     i2___awdiv@divisor:
   953                           	opt stack 0
   954  000003                     i2___awmod@divisor:
   955                           	opt stack 0
   956  000003                     i2___lwdiv@divisor:
   957                           	opt stack 0
   958                           
   959                           ; 2 bytes @ 0x2
   960  000003                     	ds	2
   961  000005                     i2___awdiv@counter:
   962                           	opt stack 0
   963  000005                     i2___awmod@counter:
   964                           	opt stack 0
   965  000005                     i2___wmul@product:
   966                           	opt stack 0
   967  000005                     i2___lwdiv@quotient:
   968                           	opt stack 0
   969                           
   970                           ; 2 bytes @ 0x4
   971  000005                     	ds	1
   972  000006                     i2___awdiv@sign:
   973                           	opt stack 0
   974  000006                     i2___awmod@sign:
   975                           	opt stack 0
   976                           
   977                           ; 1 bytes @ 0x5
   978  000006                     	ds	1
   979  000007                     i2___lwdiv@counter:
   980                           	opt stack 0
   981  000007                     i2___awdiv@quotient:
   982                           	opt stack 0
   983                           
   984                           ; 2 bytes @ 0x6
   985  000007                     	ds	1
   986  000008                     ?i2___lwmod:
   987                           	opt stack 0
   988  000008                     i2___lwmod@dividend:
   989                           	opt stack 0
   990                           
   991                           ; 2 bytes @ 0x7
   992  000008                     	ds	1
   993  000009                     
   994                           ; 1 bytes @ 0x8
   995  000009                     	ds	1
   996  00000A                     i2___lwmod@divisor:
   997                           	opt stack 0
   998                           
   999                           ; 2 bytes @ 0x9
  1000  00000A                     	ds	2
  1001  00000C                     i2___lwmod@counter:
  1002                           	opt stack 0
  1003                           
  1004                           ; 1 bytes @ 0xB
  1005  00000C                     	ds	1
  1006  00000D                     ?i2_printf:
  1007                           	opt stack 0
  1008  00000D                     i2printf@f:
  1009                           	opt stack 0
  1010                           
  1011                           ; 2 bytes @ 0xC
  1012  00000D                     	ds	6
  1013  000013                     ??i2_printf:
  1014                           
  1015                           ; 1 bytes @ 0x12
  1016  000013                     	ds	4
  1017  000017                     i2printf@idx:
  1018                           	opt stack 0
  1019                           
  1020                           ; 1 bytes @ 0x16
  1021  000017                     	ds	1
  1022  000018                     i2printf@ap:
  1023                           	opt stack 0
  1024                           
  1025                           ; 2 bytes @ 0x17
  1026  000018                     	ds	2
  1027  00001A                     i2printf@prec:
  1028                           	opt stack 0
  1029                           
  1030                           ; 1 bytes @ 0x19
  1031  00001A                     	ds	1
  1032  00001B                     i2printf@val:
  1033                           	opt stack 0
  1034                           
  1035                           ; 2 bytes @ 0x1A
  1036  00001B                     	ds	2
  1037  00001D                     i2printf@flag:
  1038                           	opt stack 0
  1039                           
  1040                           ; 1 bytes @ 0x1C
  1041  00001D                     	ds	1
  1042  00001E                     i2printf@width:
  1043                           	opt stack 0
  1044                           
  1045                           ; 2 bytes @ 0x1D
  1046  00001E                     	ds	2
  1047  000020                     i2printf@c:
  1048                           	opt stack 0
  1049                           
  1050                           ; 1 bytes @ 0x1F
  1051  000020                     	ds	1
  1052  000021                     switchMenu@right:
  1053                           	opt stack 0
  1054                           
  1055                           ; 1 bytes @ 0x20
  1056  000021                     	ds	1
  1057  000022                     switchMenu@key:
  1058                           	opt stack 0
  1059                           
  1060                           ; 1 bytes @ 0x21
  1061  000022                     	ds	1
  1062  000023                     switchMenu@left:
  1063                           	opt stack 0
  1064                           
  1065                           ; 1 bytes @ 0x22
  1066  000023                     	ds	1
  1067  000024                     ??_ISR:
  1068                           
  1069                           ; 1 bytes @ 0x23
  1070  000024                     	ds	15
  1071  000033                     ISR@keypress:
  1072                           	opt stack 0
  1073                           
  1074                           ; 1 bytes @ 0x32
  1075  000033                     	ds	1
  1076  000034                     ??_isdigit:
  1077  000034                     ??_I2C_Master_Wait:
  1078  000034                     ?___wmul:
  1079                           	opt stack 0
  1080  000034                     ?___awdiv:
  1081                           	opt stack 0
  1082  000034                     ?___awmod:
  1083                           	opt stack 0
  1084  000034                     ?___lwdiv:
  1085                           	opt stack 0
  1086  000034                     ?___lldiv:
  1087                           	opt stack 0
  1088  000034                     lcdNibble@temp:
  1089                           	opt stack 0
  1090  000034                     readADC@channel:
  1091                           	opt stack 0
  1092  000034                     ___wmul@multiplier:
  1093                           	opt stack 0
  1094  000034                     ___awdiv@dividend:
  1095                           	opt stack 0
  1096  000034                     ___awmod@dividend:
  1097                           	opt stack 0
  1098  000034                     ___lwdiv@dividend:
  1099                           	opt stack 0
  1100  000034                     ___lldiv@dividend:
  1101                           	opt stack 0
  1102                           
  1103                           ; 4 bytes @ 0x33
  1104  000034                     	ds	1
  1105  000035                     I2C_Master_Read@a:
  1106                           	opt stack 0
  1107  000035                     lcdNibble@data:
  1108                           	opt stack 0
  1109  000035                     _isdigit$935:
  1110                           	opt stack 0
  1111  000035                     I2C_Master_Write@d:
  1112                           	opt stack 0
  1113                           
  1114                           ; 2 bytes @ 0x34
  1115  000035                     	ds	1
  1116  000036                     I2C_Master_Read@temp:
  1117                           	opt stack 0
  1118  000036                     lcdInst@data:
  1119                           	opt stack 0
  1120  000036                     putch@data:
  1121                           	opt stack 0
  1122  000036                     isdigit@c:
  1123                           	opt stack 0
  1124  000036                     ___wmul@multiplicand:
  1125                           	opt stack 0
  1126  000036                     ___awdiv@divisor:
  1127                           	opt stack 0
  1128  000036                     ___awmod@divisor:
  1129                           	opt stack 0
  1130  000036                     ___lwdiv@divisor:
  1131                           	opt stack 0
  1132                           
  1133                           ; 2 bytes @ 0x35
  1134  000036                     	ds	1
  1135  000037                     ??_initLCD:
  1136                           
  1137                           ; 1 bytes @ 0x36
  1138  000037                     	ds	1
  1139  000038                     ___awdiv@counter:
  1140                           	opt stack 0
  1141  000038                     ___awmod@counter:
  1142                           	opt stack 0
  1143  000038                     ___wmul@product:
  1144                           	opt stack 0
  1145  000038                     ___lwdiv@quotient:
  1146                           	opt stack 0
  1147  000038                     ___lldiv@divisor:
  1148                           	opt stack 0
  1149                           
  1150                           ; 4 bytes @ 0x37
  1151  000038                     	ds	1
  1152  000039                     ___awdiv@sign:
  1153                           	opt stack 0
  1154  000039                     ___awmod@sign:
  1155                           	opt stack 0
  1156                           
  1157                           ; 1 bytes @ 0x38
  1158  000039                     	ds	1
  1159  00003A                     ___lwdiv@counter:
  1160                           	opt stack 0
  1161  00003A                     ___awdiv@quotient:
  1162                           	opt stack 0
  1163                           
  1164                           ; 2 bytes @ 0x39
  1165  00003A                     	ds	1
  1166  00003B                     ?___lwmod:
  1167                           	opt stack 0
  1168  00003B                     ___lwmod@dividend:
  1169                           	opt stack 0
  1170                           
  1171                           ; 2 bytes @ 0x3A
  1172  00003B                     	ds	1
  1173  00003C                     ___lldiv@quotient:
  1174                           	opt stack 0
  1175                           
  1176                           ; 4 bytes @ 0x3B
  1177  00003C                     	ds	1
  1178  00003D                     ___lwmod@divisor:
  1179                           	opt stack 0
  1180                           
  1181                           ; 2 bytes @ 0x3C
  1182  00003D                     	ds	2
  1183  00003F                     ___lwmod@counter:
  1184                           	opt stack 0
  1185                           
  1186                           ; 1 bytes @ 0x3E
  1187  00003F                     	ds	1
  1188  000040                     ??_printf:
  1189  000040                     ___lldiv@counter:
  1190                           	opt stack 0
  1191                           
  1192                           ; 1 bytes @ 0x3F
  1193  000040                     	ds	4
  1194                           tblptru	equ	0xFF8
  1195                           tblptrh	equ	0xFF7
  1196                           tblptrl	equ	0xFF6
  1197                           tablat	equ	0xFF5
  1198                           postinc0	equ	0xFEE
  1199                           wreg	equ	0xFE8
  1200                           
  1201 ;;
  1202 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  1203 ;;
  1204 ;; *************** function _main *****************
  1205 ;; Defined at:
  1206 ;;		line 49 in file "../main.c"
  1207 ;; Parameters:    Size  Location     Type
  1208 ;;		None
  1209 ;; Auto vars:     Size  Location     Type
  1210 ;;  i               1   27[BANK0 ] unsigned char 
  1211 ;;  i               1   26[BANK0 ] unsigned char 
  1212 ;;  i               2   22[BANK0 ] unsigned int 
  1213 ;;  i               1   28[BANK0 ] unsigned char 
  1214 ;;  i               1   25[BANK0 ] unsigned char 
  1215 ;;  i               1   24[BANK0 ] unsigned char 
  1216 ;; Return value:  Size  Location     Type
  1217 ;;                  1    wreg      void 
  1218 ;; Registers used:
  1219 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1220 ;; Tracked objects:
  1221 ;;		On entry : 0/0
  1222 ;;		On exit  : 0/0
  1223 ;;		Unchanged: 0/0
  1224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1225 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1226 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1227 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1228 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1229 ;;Total ram usage:       11 bytes
  1230 ;; Hardware stack levels required when called:    8
  1231 ;; This function calls:
  1232 ;;		_I2C_Master_Init
  1233 ;;		_I2C_Master_Read
  1234 ;;		_I2C_Master_Start
  1235 ;;		_I2C_Master_Stop
  1236 ;;		_I2C_Master_Write
  1237 ;;		_initLCD
  1238 ;;		_lcdInst
  1239 ;;		_printf
  1240 ;;		_readADC
  1241 ;;		_stopOperation
  1242 ;;		_testBatteries
  1243 ;; This function is called by:
  1244 ;;		Startup code after reset
  1245 ;; This function uses a non-reentrant model
  1246 ;;
  1247                           
  1248                           	psect	text0
  1249  000012                     __ptext0:
  1250                           	opt stack 0
  1251  000012                     _main:
  1252                           	opt stack 23
  1253                           
  1254                           ;main.c: 51: TRISA = 0b00000011;
  1255                           
  1256                           ;incstack = 0
  1257  000012  0E03               	movlw	3
  1258  000014  6E92               	movwf	3986,c	;volatile
  1259                           
  1260                           ;main.c: 52: TRISB = 0b11110010;
  1261  000016  0EF2               	movlw	242
  1262  000018  6E93               	movwf	3987,c	;volatile
  1263                           
  1264                           ;main.c: 53: TRISC = 0x00;
  1265  00001A  0E00               	movlw	0
  1266  00001C  6E94               	movwf	3988,c	;volatile
  1267                           
  1268                           ;main.c: 54: TRISD = 0x00;
  1269  00001E  0E00               	movlw	0
  1270  000020  6E95               	movwf	3989,c	;volatile
  1271                           
  1272                           ;main.c: 55: TRISE = 0x00;
  1273  000022  0E00               	movlw	0
  1274  000024  6E96               	movwf	3990,c	;volatile
  1275                           
  1276                           ;main.c: 57: LATA = 0x00;
  1277  000026  0E00               	movlw	0
  1278  000028  6E89               	movwf	3977,c	;volatile
  1279                           
  1280                           ;main.c: 58: LATB = 0x00;
  1281  00002A  0E00               	movlw	0
  1282  00002C  6E8A               	movwf	3978,c	;volatile
  1283                           
  1284                           ;main.c: 59: LATC = 0x00;
  1285  00002E  0E00               	movlw	0
  1286  000030  6E8B               	movwf	3979,c	;volatile
  1287                           
  1288                           ;main.c: 60: LATD = 0x00;
  1289  000032  0E00               	movlw	0
  1290  000034  6E8C               	movwf	3980,c	;volatile
  1291                           
  1292                           ;main.c: 61: LATE = 0x00;
  1293  000036  0E00               	movlw	0
  1294  000038  6E8D               	movwf	3981,c	;volatile
  1295                           
  1296                           ;main.c: 63: ADCON0 = 0x00;
  1297  00003A  0E00               	movlw	0
  1298  00003C  6EC2               	movwf	4034,c	;volatile
  1299                           
  1300                           ;main.c: 64: ADCON1 = 0x0E;
  1301  00003E  0E0E               	movlw	14
  1302  000040  6EC1               	movwf	4033,c	;volatile
  1303                           
  1304                           ;main.c: 65: ADCON2 = 0b10110001;
  1305  000042  0EB1               	movlw	177
  1306  000044  6EC0               	movwf	4032,c	;volatile
  1307                           
  1308                           ;main.c: 70: GIE = 1;
  1309  000046  8EF2               	bsf	intcon,7,c	;volatile
  1310                           
  1311                           ;main.c: 71: PEIE = 1;
  1312  000048  8CF2               	bsf	intcon,6,c	;volatile
  1313                           
  1314                           ;main.c: 72: INT1IE = 1;
  1315  00004A  86F0               	bsf	intcon3,3,c	;volatile
  1316                           
  1317                           ;main.c: 73: INT1IF = 0;
  1318  00004C  90F0               	bcf	intcon3,0,c	;volatile
  1319                           
  1320                           ;main.c: 74: TMR0IE = 1;
  1321  00004E  8AF2               	bsf	intcon,5,c	;volatile
  1322                           
  1323                           ;main.c: 75: TMR0IF = 0;
  1324  000050  94F2               	bcf	intcon,2,c	;volatile
  1325                           
  1326                           ;main.c: 76: TMR1IE = 1;
  1327  000052  809D               	bsf	3997,0,c	;volatile
  1328                           
  1329                           ;main.c: 77: TMR1IF = 0;
  1330  000054  909E               	bcf	3998,0,c	;volatile
  1331                           
  1332                           ;main.c: 81: T0CON = 0b00000111;
  1333  000056  0E07               	movlw	7
  1334  000058  6ED5               	movwf	4053,c	;volatile
  1335                           
  1336                           ;main.c: 89: TMR0 = 55770;
  1337  00005A  0ED9               	movlw	217
  1338  00005C  6ED7               	movwf	4055,c	;volatile
  1339  00005E  0EDA               	movlw	218
  1340  000060  6ED6               	movwf	4054,c	;volatile
  1341                           
  1342                           ;main.c: 98: T1CON = 0b10000000;
  1343  000062  0E80               	movlw	128
  1344  000064  6ECD               	movwf	4045,c	;volatile
  1345                           
  1346                           ;main.c: 107: TMR1 = 58035;
  1347  000066  0EE2               	movlw	226
  1348  000068  6ECF               	movwf	4047,c	;volatile
  1349  00006A  0EB3               	movlw	179
  1350  00006C  6ECE               	movwf	4046,c	;volatile
  1351                           
  1352                           ;main.c: 116: initLCD();
  1353  00006E  EC65  F00D         	call	_initLCD	;wreg free
  1354                           
  1355                           ;main.c: 118: I2C_Master_Init(10000);
  1356  000072  0E10               	movlw	16
  1357  000074  0100               	movlb	0	; () banked
  1358  000076  6FA1               	movwf	I2C_Master_Init@c& (0+255),b
  1359  000078  0E27               	movlw	39
  1360  00007A  6FA2               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  1361  00007C  0E00               	movlw	0
  1362  00007E  6FA3               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  1363  000080  0E00               	movlw	0
  1364  000082  6FA4               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  1365  000084  EC72  F00C         	call	_I2C_Master_Init	;wreg free
  1366                           
  1367                           ;main.c: 119: (INTCONbits.GIE = 1);
  1368  000088  8EF2               	bsf	intcon,7,c	;volatile
  1369                           
  1370                           ;main.c: 123: while (screenMode == 2){
  1371                           
  1372                           ;main.c: 122: while (1) {
  1373  00008A  D056               	goto	l4283
  1374  00008C                     l4245:
  1375                           
  1376                           ;main.c: 124: lcdInst(0b10000000);;
  1377  00008C  0E80               	movlw	128
  1378  00008E  EC3A  F00E         	call	_lcdInst
  1379                           
  1380                           ;main.c: 125: printf("START:   PRESS *");
  1381  000092  0EDD               	movlw	low STR_1
  1382  000094  0100               	movlb	0	; () banked
  1383  000096  6FA1               	movwf	printf@f& (0+255),b
  1384  000098  0EFF               	movlw	high STR_1
  1385  00009A  0100               	movlb	0	; () banked
  1386  00009C  6FA2               	movwf	(printf@f+1)& (0+255),b
  1387  00009E  ECEB  F005         	call	_printf	;wreg free
  1388                           
  1389                           ;main.c: 126: lcdInst(0b11000000);;
  1390  0000A2  0EC0               	movlw	192
  1391  0000A4  EC3A  F00E         	call	_lcdInst
  1392                           
  1393                           ;main.c: 127: printf("< 4   DATA   6 >");
  1394  0000A8  0EEE               	movlw	low STR_2
  1395  0000AA  0100               	movlb	0	; () banked
  1396  0000AC  6FA1               	movwf	printf@f& (0+255),b
  1397  0000AE  0EFF               	movlw	high STR_2
  1398  0000B0  0100               	movlb	0	; () banked
  1399  0000B2  6FA2               	movwf	(printf@f+1)& (0+255),b
  1400  0000B4  ECEB  F005         	call	_printf	;wreg free
  1401                           
  1402                           ;main.c: 128: for(unsigned char i=0;i<50;i++){
  1403  0000B8  0E00               	movlw	0
  1404  0000BA  0100               	movlb	0	; () banked
  1405  0000BC  6FB9               	movwf	main@i& (0+255),b
  1406  0000BE                     l4253:
  1407                           
  1408                           ; BSR set to: 0
  1409  0000BE  0E31               	movlw	49
  1410  0000C0  0100               	movlb	0	; () banked
  1411  0000C2  65B9               	cpfsgt	main@i& (0+255),b
  1412  0000C4  D001               	goto	l4257
  1413  0000C6  D011               	goto	l4265
  1414  0000C8                     l4257:
  1415                           
  1416                           ; BSR set to: 0
  1417                           ;main.c: 129: if (screenMode != 2)
  1418  0000C8  0E02               	movlw	2
  1419  0000CA  0100               	movlb	0	; () banked
  1420  0000CC  19BE               	xorwf	_screenMode& (0+255),w,b
  1421  0000CE  A4D8               	btfss	status,2,c
  1422  0000D0  D00C               	goto	l4265
  1423                           
  1424                           ; BSR set to: 0
  1425                           ;main.c: 131: _delay((unsigned long)((10)*(10000000/4000.0)));
  1426                           
  1427                           ; BSR set to: 0
  1428                           
  1429                           ; BSR set to: 0
  1430                           ;main.c: 130: break;
  1431  0000D2  0E21               	movlw	33
  1432  0000D4  0100               	movlb	0	; () banked
  1433  0000D6  6FB3               	movwf	??_main& (0+255),b
  1434  0000D8  0E76               	movlw	118
  1435  0000DA                     u5137:
  1436  0000DA  2EE8               	decfsz	wreg,f,c
  1437  0000DC  D7FE               	bra	u5137
  1438  0000DE  2FB3               	decfsz	??_main& (0+255),f,b
  1439  0000E0  D7FC               	bra	u5137
  1440  0000E2  F000               	nop	
  1441  0000E4  0100               	movlb	0	; () banked
  1442  0000E6  2BB9               	incf	main@i& (0+255),f,b
  1443  0000E8  D7EA               	goto	l4253
  1444  0000EA                     l4265:
  1445                           
  1446                           ; BSR set to: 0
  1447                           ;main.c: 132: }
  1448                           ;main.c: 133: lcdInst(0b10000000);;
  1449  0000EA  0E80               	movlw	128
  1450  0000EC  EC3A  F00E         	call	_lcdInst
  1451                           
  1452                           ;main.c: 134: lcdInst(0b11000000);;
  1453  0000F0  0EC0               	movlw	192
  1454  0000F2  EC3A  F00E         	call	_lcdInst
  1455                           
  1456                           ;main.c: 135: printf(" <4   DATA   6> ");
  1457  0000F6  0ECC               	movlw	low STR_3
  1458  0000F8  0100               	movlb	0	; () banked
  1459  0000FA  6FA1               	movwf	printf@f& (0+255),b
  1460  0000FC  0EFF               	movlw	high STR_3
  1461  0000FE  0100               	movlb	0	; () banked
  1462  000100  6FA2               	movwf	(printf@f+1)& (0+255),b
  1463  000102  ECEB  F005         	call	_printf	;wreg free
  1464                           
  1465                           ;main.c: 136: for(unsigned char i=0;i<50;i++){
  1466  000106  0E00               	movlw	0
  1467  000108  0100               	movlb	0	; () banked
  1468  00010A  6FBA               	movwf	main@i_580& (0+255),b
  1469  00010C                     l4271:
  1470                           
  1471                           ; BSR set to: 0
  1472  00010C  0E31               	movlw	49
  1473  00010E  0100               	movlb	0	; () banked
  1474  000110  65BA               	cpfsgt	main@i_580& (0+255),b
  1475  000112  D001               	goto	l4275
  1476  000114  D011               	goto	l4283
  1477  000116                     l4275:
  1478                           
  1479                           ; BSR set to: 0
  1480                           ;main.c: 137: if (screenMode != 2)
  1481  000116  0E02               	movlw	2
  1482  000118  0100               	movlb	0	; () banked
  1483  00011A  19BE               	xorwf	_screenMode& (0+255),w,b
  1484  00011C  A4D8               	btfss	status,2,c
  1485  00011E  D00C               	goto	l4283
  1486                           
  1487                           ; BSR set to: 0
  1488                           ;main.c: 139: _delay((unsigned long)((10)*(10000000/4000.0)));
  1489                           
  1490                           ; BSR set to: 0
  1491                           
  1492                           ; BSR set to: 0
  1493                           ;main.c: 138: break;
  1494  000120  0E21               	movlw	33
  1495  000122  0100               	movlb	0	; () banked
  1496  000124  6FB3               	movwf	??_main& (0+255),b
  1497  000126  0E76               	movlw	118
  1498  000128                     u5147:
  1499  000128  2EE8               	decfsz	wreg,f,c
  1500  00012A  D7FE               	bra	u5147
  1501  00012C  2FB3               	decfsz	??_main& (0+255),f,b
  1502  00012E  D7FC               	bra	u5147
  1503  000130  F000               	nop	
  1504  000132  0100               	movlb	0	; () banked
  1505  000134  2BBA               	incf	main@i_580& (0+255),f,b
  1506  000136  D7EA               	goto	l4271
  1507  000138                     l4283:
  1508  000138  0E02               	movlw	2
  1509  00013A  0100               	movlb	0	; () banked
  1510  00013C  19BE               	xorwf	_screenMode& (0+255),w,b
  1511  00013E  A4D8               	btfss	status,2,c
  1512  000140  D1DB               	goto	l4435
  1513  000142  D7A4               	goto	l4245
  1514  000144                     l4285:
  1515                           
  1516                           ; BSR set to: 0
  1517                           ;main.c: 149: readADC(0);
  1518  000144  0E00               	movlw	0
  1519  000146  EC21  F00E         	call	_readADC
  1520                           
  1521                           ;main.c: 150: lcdInst(0b10000000);;
  1522  00014A  0E80               	movlw	128
  1523  00014C  EC3A  F00E         	call	_lcdInst
  1524                           
  1525                           ;main.c: 151: lcdInst(0b11000000);;
  1526  000150  0EC0               	movlw	192
  1527  000152  EC3A  F00E         	call	_lcdInst
  1528                           
  1529                           ;main.c: 152: printf("%4d %2d         ", ADRES, countDrain+countAA+count9V+countC);
  1530  000156  0E44               	movlw	low STR_4
  1531  000158  0100               	movlb	0	; () banked
  1532  00015A  6FA1               	movwf	printf@f& (0+255),b
  1533  00015C  0EFF               	movlw	high STR_4
  1534  00015E  0100               	movlb	0	; () banked
  1535  000160  6FA2               	movwf	(printf@f+1)& (0+255),b
  1536  000162  CFC3 F0A3          	movff	4035,?_printf+2	;volatile
  1537  000166  CFC4 F0A4          	movff	4036,?_printf+3	;volatile
  1538  00016A  0100               	movlb	0	; () banked
  1539  00016C  5190               	movf	_countAA& (0+255),w,b
  1540  00016E  C092  F0B3         	movff	_countDrain,??_main
  1541  000172  0100               	movlb	0	; () banked
  1542  000174  6BB4               	clrf	(??_main+1)& (0+255),b
  1543  000176  0100               	movlb	0	; () banked
  1544  000178  27B3               	addwf	??_main& (0+255),f,b
  1545  00017A  0E00               	movlw	0
  1546  00017C  23B4               	addwfc	(??_main+1)& (0+255),f,b
  1547  00017E  0100               	movlb	0	; () banked
  1548  000180  518F               	movf	_count9V& (0+255),w,b
  1549  000182  0100               	movlb	0	; () banked
  1550  000184  27B3               	addwf	??_main& (0+255),f,b
  1551  000186  0E00               	movlw	0
  1552  000188  23B4               	addwfc	(??_main+1)& (0+255),f,b
  1553  00018A  0100               	movlb	0	; () banked
  1554  00018C  5191               	movf	_countC& (0+255),w,b
  1555  00018E  0100               	movlb	0	; () banked
  1556  000190  25B3               	addwf	??_main& (0+255),w,b
  1557  000192  0100               	movlb	0	; () banked
  1558  000194  6FA5               	movwf	(?_printf+4)& (0+255),b
  1559  000196  0100               	movlb	0	; () banked
  1560  000198  0E00               	movlw	0
  1561  00019A  0100               	movlb	0	; () banked
  1562  00019C  21B4               	addwfc	(??_main+1)& (0+255),w,b
  1563  00019E  0100               	movlb	0	; () banked
  1564  0001A0  6FA6               	movwf	(?_printf+5)& (0+255),b
  1565  0001A2  ECEB  F005         	call	_printf	;wreg free
  1566                           
  1567                           ;main.c: 154: if (startGear){
  1568  0001A6  0100               	movlb	0	; () banked
  1569  0001A8  519A               	movf	_startGear& (0+255),w,b
  1570  0001AA  B4D8               	btfsc	status,2,c
  1571  0001AC  D097               	goto	l4347
  1572                           
  1573                           ; BSR set to: 0
  1574                           ;main.c: 155: _delay((unsigned long)((4000)*(10000000/4000.0)));
  1575  0001AE  0E33               	movlw	51
  1576  0001B0  0100               	movlb	0	; () banked
  1577  0001B2  6FB4               	movwf	(??_main+1)& (0+255),b
  1578  0001B4  0EBB               	movlw	187
  1579  0001B6  0100               	movlb	0	; () banked
  1580  0001B8  6FB3               	movwf	??_main& (0+255),b
  1581  0001BA  0EDF               	movlw	223
  1582  0001BC                     u5157:
  1583  0001BC  2EE8               	decfsz	wreg,f,c
  1584  0001BE  D7FE               	bra	u5157
  1585  0001C0  2FB3               	decfsz	??_main& (0+255),f,b
  1586  0001C2  D7FC               	bra	u5157
  1587  0001C4  2FB4               	decfsz	(??_main+1)& (0+255),f,b
  1588  0001C6  D7FA               	bra	u5157
  1589  0001C8  D000               	nop2	
  1590                           
  1591                           ;main.c: 156: startGear = 0;
  1592  0001CA  0E00               	movlw	0
  1593  0001CC  0100               	movlb	0	; () banked
  1594  0001CE  6F9A               	movwf	_startGear& (0+255),b
  1595                           
  1596                           ; BSR set to: 0
  1597                           ;main.c: 157: LATCbits.LC1= 0;;
  1598  0001D0  928B               	bcf	3979,1,c	;volatile
  1599                           
  1600                           ; BSR set to: 0
  1601                           ;main.c: 158: for (unsigned int i = 0; i < 420; i++){
  1602  0001D2  0E00               	movlw	0
  1603  0001D4  0100               	movlb	0	; () banked
  1604  0001D6  6FB8               	movwf	(main@i_590+1)& (0+255),b
  1605  0001D8  0E00               	movlw	0
  1606  0001DA  6FB7               	movwf	main@i_590& (0+255),b
  1607  0001DC                     l4299:
  1608                           
  1609                           ; BSR set to: 0
  1610  0001DC  0EA4               	movlw	164
  1611  0001DE  0100               	movlb	0	; () banked
  1612  0001E0  5DB7               	subwf	main@i_590& (0+255),w,b
  1613  0001E2  0E01               	movlw	1
  1614  0001E4  0100               	movlb	0	; () banked
  1615  0001E6  59B8               	subwfb	(main@i_590+1)& (0+255),w,b
  1616  0001E8  B0D8               	btfsc	status,0,c
  1617  0001EA  D022               	goto	l250
  1618                           
  1619                           ; BSR set to: 0
  1620                           ;main.c: 159: if (screenMode != 1)
  1621                           
  1622                           ; BSR set to: 0
  1623                           
  1624                           ; BSR set to: 0
  1625  0001EC  0100               	movlb	0	; () banked
  1626  0001EE  05BE               	decf	_screenMode& (0+255),w,b
  1627  0001F0  A4D8               	btfss	status,2,c
  1628  0001F2  D01E               	goto	l250
  1629                           
  1630                           ; BSR set to: 0
  1631                           ;main.c: 161: LATCbits.LC2 = !LATCbits.LC2;;
  1632                           
  1633                           ; BSR set to: 0
  1634                           
  1635                           ; BSR set to: 0
  1636                           ;main.c: 160: break;
  1637  0001F4  B48B               	btfsc	3979,2,c	;volatile
  1638  0001F6  D004               	goto	u4740
  1639  0001F8  0100               	movlb	0	; () banked
  1640  0001FA  6BB3               	clrf	??_main& (0+255),b
  1641  0001FC  2BB3               	incf	??_main& (0+255),f,b
  1642  0001FE  D002               	goto	u4758
  1643  000200                     u4740:
  1644  000200  0100               	movlb	0	; () banked
  1645  000202  6BB3               	clrf	??_main& (0+255),b
  1646  000204                     u4758:
  1647  000204  0100               	movlb	0	; () banked
  1648  000206  47B3               	rlncf	??_main& (0+255),f,b
  1649  000208  47B3               	rlncf	??_main& (0+255),f,b
  1650  00020A  508B               	movf	3979,w,c	;volatile
  1651  00020C  0100               	movlb	0	; () banked
  1652  00020E  19B3               	xorwf	??_main& (0+255),w,b
  1653  000210  0BFB               	andlw	-5
  1654  000212  19B3               	xorwf	??_main& (0+255),w,b
  1655  000214  6E8B               	movwf	3979,c	;volatile
  1656                           
  1657                           ; BSR set to: 0
  1658                           ;main.c: 162: _delay((unsigned long)((3)*(10000000/4000.0)));
  1659  000216  0E0A               	movlw	10
  1660  000218  0100               	movlb	0	; () banked
  1661  00021A  6FB3               	movwf	??_main& (0+255),b
  1662  00021C  0EBC               	movlw	188
  1663  00021E                     u5167:
  1664  00021E  2EE8               	decfsz	wreg,f,c
  1665  000220  D7FE               	bra	u5167
  1666  000222  2FB3               	decfsz	??_main& (0+255),f,b
  1667  000224  D7FC               	bra	u5167
  1668  000226  F000               	nop	
  1669  000228  0100               	movlb	0	; () banked
  1670  00022A  4BB7               	infsnz	main@i_590& (0+255),f,b
  1671  00022C  2BB8               	incf	(main@i_590+1)& (0+255),f,b
  1672  00022E  D7D6               	goto	l4299
  1673  000230                     l250:
  1674                           
  1675                           ; BSR set to: 0
  1676                           ;main.c: 163: }
  1677                           ;main.c: 164: LATCbits.LC1= 1;;
  1678  000230  828B               	bsf	3979,1,c	;volatile
  1679                           
  1680                           ; BSR set to: 0
  1681                           ;main.c: 165: for (unsigned char i = 0; i < 40; i++){
  1682  000232  0E00               	movlw	0
  1683  000234  0100               	movlb	0	; () banked
  1684  000236  6FBB               	movwf	main@i_591& (0+255),b
  1685  000238                     l4315:
  1686                           
  1687                           ; BSR set to: 0
  1688  000238  0E27               	movlw	39
  1689  00023A  0100               	movlb	0	; () banked
  1690  00023C  65BB               	cpfsgt	main@i_591& (0+255),b
  1691  00023E  D001               	goto	l4319
  1692  000240  D021               	goto	l253
  1693  000242                     l4319:
  1694                           
  1695                           ; BSR set to: 0
  1696                           ;main.c: 166: if (screenMode != 1)
  1697  000242  0100               	movlb	0	; () banked
  1698  000244  05BE               	decf	_screenMode& (0+255),w,b
  1699  000246  A4D8               	btfss	status,2,c
  1700  000248  D01D               	goto	l253
  1701                           
  1702                           ; BSR set to: 0
  1703                           ;main.c: 168: LATCbits.LC2 = !LATCbits.LC2;;
  1704                           
  1705                           ; BSR set to: 0
  1706                           
  1707                           ; BSR set to: 0
  1708                           ;main.c: 167: break;
  1709  00024A  B48B               	btfsc	3979,2,c	;volatile
  1710  00024C  D004               	goto	u4790
  1711  00024E  0100               	movlb	0	; () banked
  1712  000250  6BB3               	clrf	??_main& (0+255),b
  1713  000252  2BB3               	incf	??_main& (0+255),f,b
  1714  000254  D002               	goto	u4808
  1715  000256                     u4790:
  1716  000256  0100               	movlb	0	; () banked
  1717  000258  6BB3               	clrf	??_main& (0+255),b
  1718  00025A                     u4808:
  1719  00025A  0100               	movlb	0	; () banked
  1720  00025C  47B3               	rlncf	??_main& (0+255),f,b
  1721  00025E  47B3               	rlncf	??_main& (0+255),f,b
  1722  000260  508B               	movf	3979,w,c	;volatile
  1723  000262  0100               	movlb	0	; () banked
  1724  000264  19B3               	xorwf	??_main& (0+255),w,b
  1725  000266  0BFB               	andlw	-5
  1726  000268  19B3               	xorwf	??_main& (0+255),w,b
  1727  00026A  6E8B               	movwf	3979,c	;volatile
  1728                           
  1729                           ; BSR set to: 0
  1730                           ;main.c: 169: _delay((unsigned long)((3)*(10000000/4000.0)));
  1731  00026C  0E0A               	movlw	10
  1732  00026E  0100               	movlb	0	; () banked
  1733  000270  6FB3               	movwf	??_main& (0+255),b
  1734  000272  0EBC               	movlw	188
  1735  000274                     u5177:
  1736  000274  2EE8               	decfsz	wreg,f,c
  1737  000276  D7FE               	bra	u5177
  1738  000278  2FB3               	decfsz	??_main& (0+255),f,b
  1739  00027A  D7FC               	bra	u5177
  1740  00027C  F000               	nop	
  1741  00027E  0100               	movlb	0	; () banked
  1742  000280  2BBB               	incf	main@i_591& (0+255),f,b
  1743  000282  D7DA               	goto	l4315
  1744  000284                     l253:
  1745                           
  1746                           ; BSR set to: 0
  1747                           ;main.c: 170: }
  1748                           ;main.c: 171: LATCbits.LC1= 0;;
  1749  000284  928B               	bcf	3979,1,c	;volatile
  1750                           
  1751                           ; BSR set to: 0
  1752                           ;main.c: 172: for (unsigned char i = 0; i < 20; i++){
  1753  000286  0E00               	movlw	0
  1754  000288  0100               	movlb	0	; () banked
  1755  00028A  6FBC               	movwf	main@i_592& (0+255),b
  1756  00028C                     l4331:
  1757                           
  1758                           ; BSR set to: 0
  1759  00028C  0E13               	movlw	19
  1760  00028E  0100               	movlb	0	; () banked
  1761  000290  65BC               	cpfsgt	main@i_592& (0+255),b
  1762  000292  D001               	goto	l4335
  1763  000294  D021               	goto	l4345
  1764  000296                     l4335:
  1765                           
  1766                           ; BSR set to: 0
  1767                           ;main.c: 173: if (screenMode != 1)
  1768  000296  0100               	movlb	0	; () banked
  1769  000298  05BE               	decf	_screenMode& (0+255),w,b
  1770  00029A  A4D8               	btfss	status,2,c
  1771  00029C  D01D               	goto	l4345
  1772                           
  1773                           ; BSR set to: 0
  1774                           ;main.c: 175: LATCbits.LC2 = !LATCbits.LC2;;
  1775                           
  1776                           ; BSR set to: 0
  1777                           
  1778                           ; BSR set to: 0
  1779                           ;main.c: 174: break;
  1780  00029E  B48B               	btfsc	3979,2,c	;volatile
  1781  0002A0  D004               	goto	u4840
  1782  0002A2  0100               	movlb	0	; () banked
  1783  0002A4  6BB3               	clrf	??_main& (0+255),b
  1784  0002A6  2BB3               	incf	??_main& (0+255),f,b
  1785  0002A8  D002               	goto	u4858
  1786  0002AA                     u4840:
  1787  0002AA  0100               	movlb	0	; () banked
  1788  0002AC  6BB3               	clrf	??_main& (0+255),b
  1789  0002AE                     u4858:
  1790  0002AE  0100               	movlb	0	; () banked
  1791  0002B0  47B3               	rlncf	??_main& (0+255),f,b
  1792  0002B2  47B3               	rlncf	??_main& (0+255),f,b
  1793  0002B4  508B               	movf	3979,w,c	;volatile
  1794  0002B6  0100               	movlb	0	; () banked
  1795  0002B8  19B3               	xorwf	??_main& (0+255),w,b
  1796  0002BA  0BFB               	andlw	-5
  1797  0002BC  19B3               	xorwf	??_main& (0+255),w,b
  1798  0002BE  6E8B               	movwf	3979,c	;volatile
  1799                           
  1800                           ; BSR set to: 0
  1801                           ;main.c: 176: _delay((unsigned long)((3)*(10000000/4000.0)));
  1802  0002C0  0E0A               	movlw	10
  1803  0002C2  0100               	movlb	0	; () banked
  1804  0002C4  6FB3               	movwf	??_main& (0+255),b
  1805  0002C6  0EBC               	movlw	188
  1806  0002C8                     u5187:
  1807  0002C8  2EE8               	decfsz	wreg,f,c
  1808  0002CA  D7FE               	bra	u5187
  1809  0002CC  2FB3               	decfsz	??_main& (0+255),f,b
  1810  0002CE  D7FC               	bra	u5187
  1811  0002D0  F000               	nop	
  1812  0002D2  0100               	movlb	0	; () banked
  1813  0002D4  2BBC               	incf	main@i_592& (0+255),f,b
  1814  0002D6  D7DA               	goto	l4331
  1815  0002D8                     l4345:
  1816                           
  1817                           ; BSR set to: 0
  1818                           ;main.c: 177: }
  1819                           ;main.c: 178: doneTimer = 0;
  1820  0002D8  0E00               	movlw	0
  1821  0002DA  6E46               	movwf	_doneTimer,c
  1822  0002DC                     l4347:
  1823                           
  1824                           ; BSR set to: 0
  1825                           ;main.c: 179: }
  1826                           ;main.c: 182: if (ADRES<50){
  1827  0002DC  50C4               	movf	4036,w,c	;volatile
  1828  0002DE  E103               	bnz	u4871
  1829  0002E0  0E32               	movlw	50
  1830  0002E2  5CC3               	subwf	4035,w,c	;volatile
  1831  0002E4  B0D8               	btfsc	status,0,c
  1832  0002E6                     u4871:
  1833  0002E6  D0FA               	goto	l4433
  1834                           
  1835                           ; BSR set to: 0
  1836                           ;main.c: 183: sorting = 1;
  1837  0002E8  0E01               	movlw	1
  1838  0002EA  6E48               	movwf	_sorting,c
  1839                           
  1840                           ; BSR set to: 0
  1841                           ;main.c: 184: LATAbits.LA7 = 1;;
  1842  0002EC  8E89               	bsf	3977,7,c	;volatile
  1843                           
  1844                           ; BSR set to: 0
  1845                           ;main.c: 185: testBatteries();
  1846  0002EE  EC39  F009         	call	_testBatteries	;wreg free
  1847                           
  1848                           ;main.c: 186: LATAbits.LA7 = 0;;
  1849  0002F2  9E89               	bcf	3977,7,c	;volatile
  1850                           
  1851                           ;main.c: 187: if (plat1Left){
  1852  0002F4  0100               	movlb	0	; () banked
  1853  0002F6  5187               	movf	_plat1Left& (0+255),w,b
  1854  0002F8  0100               	movlb	0	; () banked
  1855  0002FA  1188               	iorwf	(_plat1Left+1)& (0+255),w,b
  1856  0002FC  B4D8               	btfsc	status,2,c
  1857  0002FE  D006               	goto	l4363
  1858                           
  1859                           ; BSR set to: 0
  1860                           ;main.c: 188: step1 = 1;
  1861  000300  0E01               	movlw	1
  1862  000302  6E49               	movwf	_step1,c
  1863                           
  1864                           ;main.c: 189: turn1BackRight = 1;
  1865  000304  0E01               	movlw	1
  1866  000306  0100               	movlb	0	; () banked
  1867  000308  6F9D               	movwf	_turn1BackRight& (0+255),b
  1868                           
  1869                           ; BSR set to: 0
  1870                           ;main.c: 190: T1CONbits.TMR1ON = 1;
  1871  00030A  80CD               	bsf	4045,0,c	;volatile
  1872  00030C                     l4363:
  1873                           
  1874                           ; BSR set to: 0
  1875                           ;main.c: 191: }
  1876                           ;main.c: 192: if (plat1Right){
  1877  00030C  0100               	movlb	0	; () banked
  1878  00030E  5189               	movf	_plat1Right& (0+255),w,b
  1879  000310  0100               	movlb	0	; () banked
  1880  000312  118A               	iorwf	(_plat1Right+1)& (0+255),w,b
  1881  000314  B4D8               	btfsc	status,2,c
  1882  000316  D006               	goto	l4369
  1883                           
  1884                           ; BSR set to: 0
  1885                           ;main.c: 193: step1 = 4;
  1886  000318  0E04               	movlw	4
  1887  00031A  6E49               	movwf	_step1,c
  1888                           
  1889                           ;main.c: 194: turn1BackLeft = 1;
  1890  00031C  0E01               	movlw	1
  1891  00031E  0100               	movlb	0	; () banked
  1892  000320  6F9C               	movwf	_turn1BackLeft& (0+255),b
  1893                           
  1894                           ; BSR set to: 0
  1895                           ;main.c: 195: T1CONbits.TMR1ON = 1;
  1896  000322  80CD               	bsf	4045,0,c	;volatile
  1897  000324                     l4369:
  1898                           
  1899                           ; BSR set to: 0
  1900                           ;main.c: 196: }
  1901                           ;main.c: 197: if (plat2Left){
  1902  000324  0100               	movlb	0	; () banked
  1903  000326  518B               	movf	_plat2Left& (0+255),w,b
  1904  000328  0100               	movlb	0	; () banked
  1905  00032A  118C               	iorwf	(_plat2Left+1)& (0+255),w,b
  1906  00032C  B4D8               	btfsc	status,2,c
  1907  00032E  D006               	goto	l4375
  1908                           
  1909                           ; BSR set to: 0
  1910                           ;main.c: 198: step2 = 1;
  1911  000330  0E01               	movlw	1
  1912  000332  6E4A               	movwf	_step2,c
  1913                           
  1914                           ;main.c: 199: turn2BackRight = 1;
  1915  000334  0E01               	movlw	1
  1916  000336  0100               	movlb	0	; () banked
  1917  000338  6F9F               	movwf	_turn2BackRight& (0+255),b
  1918                           
  1919                           ; BSR set to: 0
  1920                           ;main.c: 200: T1CONbits.TMR1ON = 1;
  1921  00033A  80CD               	bsf	4045,0,c	;volatile
  1922  00033C                     l4375:
  1923                           
  1924                           ; BSR set to: 0
  1925                           ;main.c: 201: }
  1926                           ;main.c: 202: if (plat2Right){
  1927  00033C  0100               	movlb	0	; () banked
  1928  00033E  518D               	movf	_plat2Right& (0+255),w,b
  1929  000340  0100               	movlb	0	; () banked
  1930  000342  118E               	iorwf	(_plat2Right+1)& (0+255),w,b
  1931  000344  B4D8               	btfsc	status,2,c
  1932  000346  D006               	goto	l4381
  1933                           
  1934                           ; BSR set to: 0
  1935                           ;main.c: 203: step2 = 4;
  1936  000348  0E04               	movlw	4
  1937  00034A  6E4A               	movwf	_step2,c
  1938                           
  1939                           ;main.c: 204: turn2BackLeft = 1;
  1940  00034C  0E01               	movlw	1
  1941  00034E  0100               	movlb	0	; () banked
  1942  000350  6F9E               	movwf	_turn2BackLeft& (0+255),b
  1943                           
  1944                           ; BSR set to: 0
  1945                           ;main.c: 205: T1CONbits.TMR1ON = 1;
  1946  000352  80CD               	bsf	4045,0,c	;volatile
  1947  000354                     l4381:
  1948                           
  1949                           ; BSR set to: 0
  1950                           ;main.c: 206: }
  1951                           ;main.c: 207: LATAbits.LA2 = 1;;
  1952  000354  8489               	bsf	3977,2,c	;volatile
  1953                           
  1954                           ; BSR set to: 0
  1955                           ;main.c: 208: LATAbits.LA3 = 0;;
  1956  000356  9689               	bcf	3977,3,c	;volatile
  1957                           
  1958                           ; BSR set to: 0
  1959                           ;main.c: 209: LATBbits.LB0 = 1;;
  1960  000358  808A               	bsf	3978,0,c	;volatile
  1961                           
  1962                           ; BSR set to: 0
  1963                           ;main.c: 210: LATBbits.LB2 = 0;;
  1964  00035A  948A               	bcf	3978,2,c	;volatile
  1965  00035C                     l4389:
  1966                           
  1967                           ; BSR set to: 0
  1968  00035C  0100               	movlb	0	; () banked
  1969  00035E  518B               	movf	_plat2Left& (0+255),w,b
  1970  000360  0100               	movlb	0	; () banked
  1971  000362  1187               	iorwf	_plat1Left& (0+255),w,b
  1972  000364  0100               	movlb	0	; () banked
  1973  000366  6FB3               	movwf	??_main& (0+255),b
  1974  000368  0100               	movlb	0	; () banked
  1975  00036A  518C               	movf	(_plat2Left+1)& (0+255),w,b
  1976  00036C  0100               	movlb	0	; () banked
  1977  00036E  1188               	iorwf	(_plat1Left+1)& (0+255),w,b
  1978  000370  0100               	movlb	0	; () banked
  1979  000372  6FB4               	movwf	(??_main+1)& (0+255),b
  1980  000374  0100               	movlb	0	; () banked
  1981  000376  5189               	movf	_plat1Right& (0+255),w,b
  1982  000378  0100               	movlb	0	; () banked
  1983  00037A  13B3               	iorwf	??_main& (0+255),f,b
  1984  00037C  0100               	movlb	0	; () banked
  1985  00037E  518A               	movf	(_plat1Right+1)& (0+255),w,b
  1986  000380  0100               	movlb	0	; () banked
  1987  000382  13B4               	iorwf	(??_main+1)& (0+255),f,b
  1988  000384  0100               	movlb	0	; () banked
  1989  000386  518D               	movf	_plat2Right& (0+255),w,b
  1990  000388  0100               	movlb	0	; () banked
  1991  00038A  13B3               	iorwf	??_main& (0+255),f,b
  1992  00038C  0100               	movlb	0	; () banked
  1993  00038E  518E               	movf	(_plat2Right+1)& (0+255),w,b
  1994  000390  0100               	movlb	0	; () banked
  1995  000392  13B4               	iorwf	(??_main+1)& (0+255),f,b
  1996  000394  0100               	movlb	0	; () banked
  1997  000396  51B3               	movf	??_main& (0+255),w,b
  1998  000398  0100               	movlb	0	; () banked
  1999  00039A  11B4               	iorwf	(??_main+1)& (0+255),w,b
  2000  00039C  B4D8               	btfsc	status,2,c
  2001  00039E  D004               	goto	l4393
  2002                           
  2003                           ; BSR set to: 0
  2004  0003A0  0100               	movlb	0	; () banked
  2005  0003A2  05BE               	decf	_screenMode& (0+255),w,b
  2006  0003A4  B4D8               	btfsc	status,2,c
  2007  0003A6  D7DA               	goto	l4389
  2008  0003A8                     l4393:
  2009                           
  2010                           ; BSR set to: 0
  2011                           ;main.c: 213: waitPlats = 2;
  2012  0003A8  0E02               	movlw	2
  2013  0003AA  0100               	movlb	0	; () banked
  2014  0003AC  6FA0               	movwf	_waitPlats& (0+255),b
  2015  0003AE                     l4395:
  2016                           
  2017                           ; BSR set to: 0
  2018  0003AE  0100               	movlb	0	; () banked
  2019  0003B0  51A0               	movf	_waitPlats& (0+255),w,b
  2020  0003B2  B4D8               	btfsc	status,2,c
  2021  0003B4  D004               	goto	l272
  2022                           
  2023                           ; BSR set to: 0
  2024  0003B6  0100               	movlb	0	; () banked
  2025  0003B8  05BE               	decf	_screenMode& (0+255),w,b
  2026  0003BA  B4D8               	btfsc	status,2,c
  2027  0003BC  D7F8               	goto	l4395
  2028  0003BE                     l272:
  2029                           
  2030                           ; BSR set to: 0
  2031                           ;main.c: 216: LATAbits.LA2 = 1;;
  2032  0003BE  8489               	bsf	3977,2,c	;volatile
  2033                           
  2034                           ;main.c: 217: LATAbits.LA3 = 0;;
  2035  0003C0  9689               	bcf	3977,3,c	;volatile
  2036                           
  2037                           ;main.c: 218: LATBbits.LB0 = 1;;
  2038  0003C2  808A               	bsf	3978,0,c	;volatile
  2039                           
  2040                           ;main.c: 219: LATBbits.LB2 = 0;;
  2041  0003C4  948A               	bcf	3978,2,c	;volatile
  2042                           
  2043                           ;main.c: 220: plat1Left = turn1BackLeft;
  2044  0003C6  C09C  F087         	movff	_turn1BackLeft,_plat1Left
  2045  0003CA  0100               	movlb	0	; () banked
  2046  0003CC  6B88               	clrf	(_plat1Left+1)& (0+255),b
  2047                           
  2048                           ;main.c: 221: plat1Right = turn1BackRight;
  2049  0003CE  C09D  F089         	movff	_turn1BackRight,_plat1Right
  2050  0003D2  0100               	movlb	0	; () banked
  2051  0003D4  6B8A               	clrf	(_plat1Right+1)& (0+255),b
  2052                           
  2053                           ;main.c: 222: plat2Left = turn2BackLeft;
  2054  0003D6  C09E  F08B         	movff	_turn2BackLeft,_plat2Left
  2055  0003DA  0100               	movlb	0	; () banked
  2056  0003DC  6B8C               	clrf	(_plat2Left+1)& (0+255),b
  2057                           
  2058                           ;main.c: 223: plat2Right = turn2BackRight;
  2059  0003DE  C09F  F08D         	movff	_turn2BackRight,_plat2Right
  2060  0003E2  0100               	movlb	0	; () banked
  2061  0003E4  6B8E               	clrf	(_plat2Right+1)& (0+255),b
  2062                           
  2063                           ; BSR set to: 0
  2064                           ;main.c: 224: stepGear = 1;
  2065  0003E6  0E01               	movlw	1
  2066  0003E8  0100               	movlb	0	; () banked
  2067  0003EA  6F9B               	movwf	_stepGear& (0+255),b
  2068                           
  2069                           ; BSR set to: 0
  2070                           ;main.c: 225: LATCbits.LC1= 0;;
  2071  0003EC  928B               	bcf	3979,1,c	;volatile
  2072  0003EE                     l4403:
  2073                           
  2074                           ; BSR set to: 0
  2075  0003EE  0100               	movlb	0	; () banked
  2076  0003F0  518B               	movf	_plat2Left& (0+255),w,b
  2077  0003F2  0100               	movlb	0	; () banked
  2078  0003F4  1187               	iorwf	_plat1Left& (0+255),w,b
  2079  0003F6  0100               	movlb	0	; () banked
  2080  0003F8  6FB3               	movwf	??_main& (0+255),b
  2081  0003FA  0100               	movlb	0	; () banked
  2082  0003FC  518C               	movf	(_plat2Left+1)& (0+255),w,b
  2083  0003FE  0100               	movlb	0	; () banked
  2084  000400  1188               	iorwf	(_plat1Left+1)& (0+255),w,b
  2085  000402  0100               	movlb	0	; () banked
  2086  000404  6FB4               	movwf	(??_main+1)& (0+255),b
  2087  000406  0100               	movlb	0	; () banked
  2088  000408  5189               	movf	_plat1Right& (0+255),w,b
  2089  00040A  0100               	movlb	0	; () banked
  2090  00040C  13B3               	iorwf	??_main& (0+255),f,b
  2091  00040E  0100               	movlb	0	; () banked
  2092  000410  518A               	movf	(_plat1Right+1)& (0+255),w,b
  2093  000412  0100               	movlb	0	; () banked
  2094  000414  13B4               	iorwf	(??_main+1)& (0+255),f,b
  2095  000416  0100               	movlb	0	; () banked
  2096  000418  518D               	movf	_plat2Right& (0+255),w,b
  2097  00041A  0100               	movlb	0	; () banked
  2098  00041C  13B3               	iorwf	??_main& (0+255),f,b
  2099  00041E  0100               	movlb	0	; () banked
  2100  000420  518E               	movf	(_plat2Right+1)& (0+255),w,b
  2101  000422  0100               	movlb	0	; () banked
  2102  000424  13B4               	iorwf	(??_main+1)& (0+255),f,b
  2103  000426  0100               	movlb	0	; () banked
  2104  000428  519B               	movf	_stepGear& (0+255),w,b
  2105  00042A  B4D8               	btfsc	status,2,c
  2106  00042C  D002               	goto	u4960
  2107  00042E  0E01               	movlw	1
  2108  000430  D001               	goto	u4970
  2109  000432                     u4960:
  2110  000432  0E00               	movlw	0
  2111  000434                     u4970:
  2112  000434  0100               	movlb	0	; () banked
  2113  000436  6FB5               	movwf	(??_main+2)& (0+255),b
  2114  000438  6BB6               	clrf	(??_main+3)& (0+255),b
  2115  00043A  0100               	movlb	0	; () banked
  2116  00043C  51B3               	movf	??_main& (0+255),w,b
  2117  00043E  0100               	movlb	0	; () banked
  2118  000440  13B5               	iorwf	(??_main+2)& (0+255),f,b
  2119  000442  0100               	movlb	0	; () banked
  2120  000444  51B4               	movf	(??_main+1)& (0+255),w,b
  2121  000446  0100               	movlb	0	; () banked
  2122  000448  13B6               	iorwf	(??_main+3)& (0+255),f,b
  2123  00044A  0100               	movlb	0	; () banked
  2124  00044C  51B5               	movf	(??_main+2)& (0+255),w,b
  2125  00044E  0100               	movlb	0	; () banked
  2126  000450  11B6               	iorwf	(??_main+3)& (0+255),w,b
  2127  000452  B4D8               	btfsc	status,2,c
  2128  000454  D004               	goto	l277
  2129                           
  2130                           ; BSR set to: 0
  2131  000456  0100               	movlb	0	; () banked
  2132  000458  05BE               	decf	_screenMode& (0+255),w,b
  2133  00045A  B4D8               	btfsc	status,2,c
  2134  00045C  D7C8               	goto	l4403
  2135  00045E                     l277:
  2136                           
  2137                           ; BSR set to: 0
  2138                           ;main.c: 229: T1CONbits.TMR1ON = 0;
  2139  00045E  90CD               	bcf	4045,0,c	;volatile
  2140                           
  2141                           ;main.c: 230: LATCbits.LC2 = 0;;
  2142  000460  948B               	bcf	3979,2,c	;volatile
  2143                           
  2144                           ;main.c: 231: LATCbits.LC1= 0;;
  2145  000462  928B               	bcf	3979,1,c	;volatile
  2146                           
  2147                           ; BSR set to: 0
  2148                           ;main.c: 232: turn1BackRight = 0;
  2149  000464  0E00               	movlw	0
  2150  000466  0100               	movlb	0	; () banked
  2151  000468  6F9D               	movwf	_turn1BackRight& (0+255),b
  2152                           
  2153                           ;main.c: 233: turn1BackLeft = 0;
  2154  00046A  0E00               	movlw	0
  2155  00046C  0100               	movlb	0	; () banked
  2156  00046E  6F9C               	movwf	_turn1BackLeft& (0+255),b
  2157                           
  2158                           ;main.c: 234: turn2BackRight = 0;
  2159  000470  0E00               	movlw	0
  2160  000472  0100               	movlb	0	; () banked
  2161  000474  6F9F               	movwf	_turn2BackRight& (0+255),b
  2162                           
  2163                           ;main.c: 235: turn2BackLeft = 0;
  2164  000476  0E00               	movlw	0
  2165  000478  0100               	movlb	0	; () banked
  2166  00047A  6F9E               	movwf	_turn2BackLeft& (0+255),b
  2167                           
  2168                           ; BSR set to: 0
  2169                           ;main.c: 236: LATAbits.LA2 = 0;;
  2170  00047C  9489               	bcf	3977,2,c	;volatile
  2171                           
  2172                           ; BSR set to: 0
  2173                           ;main.c: 237: LATAbits.LA3 = 0;;
  2174  00047E  9689               	bcf	3977,3,c	;volatile
  2175                           
  2176                           ; BSR set to: 0
  2177                           ;main.c: 238: LATAbits.LA4 = 0;;
  2178  000480  9889               	bcf	3977,4,c	;volatile
  2179                           
  2180                           ; BSR set to: 0
  2181                           ;main.c: 239: LATAbits.LA5 = 0;;
  2182  000482  9A89               	bcf	3977,5,c	;volatile
  2183                           
  2184                           ; BSR set to: 0
  2185                           ;main.c: 240: LATBbits.LB0 = 0;;
  2186  000484  908A               	bcf	3978,0,c	;volatile
  2187                           
  2188                           ; BSR set to: 0
  2189                           ;main.c: 241: LATBbits.LB2 = 0;;
  2190  000486  948A               	bcf	3978,2,c	;volatile
  2191                           
  2192                           ; BSR set to: 0
  2193                           ;main.c: 242: LATCbits.LC6 = 0;;
  2194  000488  9C8B               	bcf	3979,6,c	;volatile
  2195                           
  2196                           ; BSR set to: 0
  2197                           ;main.c: 243: LATAbits.LA6 = 0;;
  2198  00048A  9C89               	bcf	3977,6,c	;volatile
  2199                           
  2200                           ; BSR set to: 0
  2201                           ;main.c: 244: if (((countC + countAA + count9V + countDrain) >= 15)){
  2202  00048C  0100               	movlb	0	; () banked
  2203  00048E  5190               	movf	_countAA& (0+255),w,b
  2204  000490  C091  F0B3         	movff	_countC,??_main
  2205  000494  0100               	movlb	0	; () banked
  2206  000496  6BB4               	clrf	(??_main+1)& (0+255),b
  2207  000498  0100               	movlb	0	; () banked
  2208  00049A  27B3               	addwf	??_main& (0+255),f,b
  2209  00049C  0E00               	movlw	0
  2210  00049E  23B4               	addwfc	(??_main+1)& (0+255),f,b
  2211  0004A0  0100               	movlb	0	; () banked
  2212  0004A2  518F               	movf	_count9V& (0+255),w,b
  2213  0004A4  0100               	movlb	0	; () banked
  2214  0004A6  27B3               	addwf	??_main& (0+255),f,b
  2215  0004A8  0E00               	movlw	0
  2216  0004AA  23B4               	addwfc	(??_main+1)& (0+255),f,b
  2217  0004AC  0100               	movlb	0	; () banked
  2218  0004AE  5192               	movf	_countDrain& (0+255),w,b
  2219  0004B0  0100               	movlb	0	; () banked
  2220  0004B2  27B3               	addwf	??_main& (0+255),f,b
  2221  0004B4  0E00               	movlw	0
  2222  0004B6  23B4               	addwfc	(??_main+1)& (0+255),f,b
  2223  0004B8  0100               	movlb	0	; () banked
  2224  0004BA  BFB4               	btfsc	(??_main+1)& (0+255),7,b
  2225  0004BC  D00D               	goto	l4431
  2226  0004BE  0100               	movlb	0	; () banked
  2227  0004C0  51B4               	movf	(??_main+1)& (0+255),w,b
  2228  0004C2  E105               	bnz	u5000
  2229  0004C4  0E0F               	movlw	15
  2230  0004C6  0100               	movlb	0	; () banked
  2231  0004C8  5DB3               	subwf	??_main& (0+255),w,b
  2232  0004CA  A0D8               	btfss	status,0,c
  2233  0004CC  D005               	goto	l4431
  2234  0004CE                     u5000:
  2235                           
  2236                           ; BSR set to: 0
  2237                           ;main.c: 245: screenMode = 0;
  2238  0004CE  0E00               	movlw	0
  2239  0004D0  0100               	movlb	0	; () banked
  2240  0004D2  6FBE               	movwf	_screenMode& (0+255),b
  2241                           
  2242                           ; BSR set to: 0
  2243                           ;main.c: 246: stopOperation();
  2244  0004D4  ECF0  F009         	call	_stopOperation	;wreg free
  2245  0004D8                     l4431:
  2246                           
  2247                           ;main.c: 247: }
  2248                           ;main.c: 248: sorting = 0;
  2249  0004D8  0E00               	movlw	0
  2250  0004DA  6E48               	movwf	_sorting,c
  2251  0004DC                     l4433:
  2252                           
  2253                           ;main.c: 249: }
  2254                           ;main.c: 250: _delay((unsigned long)((500)*(10000000/4000.0)));
  2255  0004DC  0E07               	movlw	7
  2256  0004DE  0100               	movlb	0	; () banked
  2257  0004E0  6FB4               	movwf	(??_main+1)& (0+255),b
  2258  0004E2  0E58               	movlw	88
  2259  0004E4  0100               	movlb	0	; () banked
  2260  0004E6  6FB3               	movwf	??_main& (0+255),b
  2261  0004E8  0E59               	movlw	89
  2262  0004EA                     u5197:
  2263  0004EA  2EE8               	decfsz	wreg,f,c
  2264  0004EC  D7FE               	bra	u5197
  2265  0004EE  2FB3               	decfsz	??_main& (0+255),f,b
  2266  0004F0  D7FC               	bra	u5197
  2267  0004F2  2FB4               	decfsz	(??_main+1)& (0+255),f,b
  2268  0004F4  D7FA               	bra	u5197
  2269  0004F6  D000               	nop2	
  2270  0004F8                     l4435:
  2271  0004F8  0100               	movlb	0	; () banked
  2272  0004FA  05BE               	decf	_screenMode& (0+255),w,b
  2273  0004FC  A4D8               	btfss	status,2,c
  2274  0004FE  D017               	goto	l4443
  2275  000500  D621               	goto	l4285
  2276  000502                     l4437:
  2277                           
  2278                           ; BSR set to: 0
  2279                           ;main.c: 254: lcdInst(0b10000000);;
  2280  000502  0E80               	movlw	128
  2281  000504  EC3A  F00E         	call	_lcdInst
  2282                           
  2283                           ;main.c: 255: printf("DONE! PRESS *   ");
  2284  000508  0E88               	movlw	low STR_5
  2285  00050A  0100               	movlb	0	; () banked
  2286  00050C  6FA1               	movwf	printf@f& (0+255),b
  2287  00050E  0EFF               	movlw	high STR_5
  2288  000510  0100               	movlb	0	; () banked
  2289  000512  6FA2               	movwf	(printf@f+1)& (0+255),b
  2290  000514  ECEB  F005         	call	_printf	;wreg free
  2291                           
  2292                           ;main.c: 256: lcdInst(0b11000000);;
  2293  000518  0EC0               	movlw	192
  2294  00051A  EC3A  F00E         	call	_lcdInst
  2295                           
  2296                           ;main.c: 257: printf("TO CONTINUE     ");
  2297  00051E  0E66               	movlw	low STR_6
  2298  000520  0100               	movlb	0	; () banked
  2299  000522  6FA1               	movwf	printf@f& (0+255),b
  2300  000524  0EFF               	movlw	high STR_6
  2301  000526  0100               	movlb	0	; () banked
  2302  000528  6FA2               	movwf	(printf@f+1)& (0+255),b
  2303  00052A  ECEB  F005         	call	_printf	;wreg free
  2304  00052E                     l4443:
  2305  00052E  0100               	movlb	0	; () banked
  2306  000530  51BE               	movf	_screenMode& (0+255),w,b
  2307  000532  A4D8               	btfss	status,2,c
  2308  000534  D01F               	goto	l4451
  2309  000536  D7E5               	goto	l4437
  2310  000538                     l4445:
  2311                           
  2312                           ; BSR set to: 0
  2313                           ;main.c: 260: lcdInst(0b10000000);;
  2314  000538  0E80               	movlw	128
  2315  00053A  EC3A  F00E         	call	_lcdInst
  2316                           
  2317                           ;main.c: 261: printf("TOTAL RUN TIME: ");
  2318  00053E  0EBB               	movlw	low STR_7
  2319  000540  0100               	movlb	0	; () banked
  2320  000542  6FA1               	movwf	printf@f& (0+255),b
  2321  000544  0EFF               	movlw	high STR_7
  2322  000546  0100               	movlb	0	; () banked
  2323  000548  6FA2               	movwf	(printf@f+1)& (0+255),b
  2324  00054A  ECEB  F005         	call	_printf	;wreg free
  2325                           
  2326                           ;main.c: 262: lcdInst(0b11000000);;
  2327  00054E  0EC0               	movlw	192
  2328  000550  EC3A  F00E         	call	_lcdInst
  2329                           
  2330                           ;main.c: 263: printf("%02d:%02d               ", min, sec);
  2331  000554  0E6A               	movlw	low STR_8
  2332  000556  0100               	movlb	0	; () banked
  2333  000558  6FA1               	movwf	printf@f& (0+255),b
  2334  00055A  0EFE               	movlw	high STR_8
  2335  00055C  0100               	movlb	0	; () banked
  2336  00055E  6FA2               	movwf	(printf@f+1)& (0+255),b
  2337  000560  C093  F0A3         	movff	_min,?_printf+2
  2338  000564  0100               	movlb	0	; () banked
  2339  000566  6BA4               	clrf	(?_printf+3)& (0+255),b
  2340  000568  C099  F0A5         	movff	_sec,?_printf+4
  2341  00056C  0100               	movlb	0	; () banked
  2342  00056E  6BA6               	clrf	(?_printf+5)& (0+255),b
  2343  000570  ECEB  F005         	call	_printf	;wreg free
  2344  000574                     l4451:
  2345  000574  0E03               	movlw	3
  2346  000576  0100               	movlb	0	; () banked
  2347  000578  19BE               	xorwf	_screenMode& (0+255),w,b
  2348  00057A  A4D8               	btfss	status,2,c
  2349  00057C  D01B               	goto	l4459
  2350  00057E  D7DC               	goto	l4445
  2351  000580                     l4453:
  2352                           
  2353                           ; BSR set to: 0
  2354                           ;main.c: 266: lcdInst(0b10000000);;
  2355  000580  0E80               	movlw	128
  2356  000582  EC3A  F00E         	call	_lcdInst
  2357                           
  2358                           ;main.c: 267: printf("TOTAL # OF      ");
  2359  000586  0E55               	movlw	low STR_9
  2360  000588  0100               	movlb	0	; () banked
  2361  00058A  6FA1               	movwf	printf@f& (0+255),b
  2362  00058C  0EFF               	movlw	high STR_9
  2363  00058E  0100               	movlb	0	; () banked
  2364  000590  6FA2               	movwf	(printf@f+1)& (0+255),b
  2365  000592  ECEB  F005         	call	_printf	;wreg free
  2366                           
  2367                           ;main.c: 268: lcdInst(0b11000000);;
  2368  000596  0EC0               	movlw	192
  2369  000598  EC3A  F00E         	call	_lcdInst
  2370                           
  2371                           ;main.c: 269: printf("BATTERIES: %02d   ", numBats);
  2372  00059C  0EDC               	movlw	low STR_10
  2373  00059E  0100               	movlb	0	; () banked
  2374  0005A0  6FA1               	movwf	printf@f& (0+255),b
  2375  0005A2  0EFE               	movlw	high STR_10
  2376  0005A4  0100               	movlb	0	; () banked
  2377  0005A6  6FA2               	movwf	(printf@f+1)& (0+255),b
  2378  0005A8  C096  F0A3         	movff	_numBats,?_printf+2
  2379  0005AC  0100               	movlb	0	; () banked
  2380  0005AE  6BA4               	clrf	(?_printf+3)& (0+255),b
  2381  0005B0  ECEB  F005         	call	_printf	;wreg free
  2382  0005B4                     l4459:
  2383  0005B4  0E04               	movlw	4
  2384  0005B6  0100               	movlb	0	; () banked
  2385  0005B8  19BE               	xorwf	_screenMode& (0+255),w,b
  2386  0005BA  A4D8               	btfss	status,2,c
  2387  0005BC  D01B               	goto	l4467
  2388  0005BE  D7E0               	goto	l4453
  2389  0005C0                     l4461:
  2390                           
  2391                           ; BSR set to: 0
  2392                           ;main.c: 272: lcdInst(0b10000000);;
  2393  0005C0  0E80               	movlw	128
  2394  0005C2  EC3A  F00E         	call	_lcdInst
  2395                           
  2396                           ;main.c: 273: printf("# OF C          ");
  2397  0005C6  0E11               	movlw	low STR_11
  2398  0005C8  0100               	movlb	0	; () banked
  2399  0005CA  6FA1               	movwf	printf@f& (0+255),b
  2400  0005CC  0EFF               	movlw	high STR_11
  2401  0005CE  0100               	movlb	0	; () banked
  2402  0005D0  6FA2               	movwf	(printf@f+1)& (0+255),b
  2403  0005D2  ECEB  F005         	call	_printf	;wreg free
  2404                           
  2405                           ;main.c: 274: lcdInst(0b11000000);;
  2406  0005D6  0EC0               	movlw	192
  2407  0005D8  EC3A  F00E         	call	_lcdInst
  2408                           
  2409                           ;main.c: 275: printf("BATTERIES: %02d   ", numC);
  2410  0005DC  0EDC               	movlw	low STR_10
  2411  0005DE  0100               	movlb	0	; () banked
  2412  0005E0  6FA1               	movwf	printf@f& (0+255),b
  2413  0005E2  0EFE               	movlw	high STR_10
  2414  0005E4  0100               	movlb	0	; () banked
  2415  0005E6  6FA2               	movwf	(printf@f+1)& (0+255),b
  2416  0005E8  C097  F0A3         	movff	_numC,?_printf+2
  2417  0005EC  0100               	movlb	0	; () banked
  2418  0005EE  6BA4               	clrf	(?_printf+3)& (0+255),b
  2419  0005F0  ECEB  F005         	call	_printf	;wreg free
  2420  0005F4                     l4467:
  2421  0005F4  0E05               	movlw	5
  2422  0005F6  0100               	movlb	0	; () banked
  2423  0005F8  19BE               	xorwf	_screenMode& (0+255),w,b
  2424  0005FA  A4D8               	btfss	status,2,c
  2425  0005FC  D01B               	goto	l4475
  2426  0005FE  D7E0               	goto	l4461
  2427  000600                     l4469:
  2428                           
  2429                           ; BSR set to: 0
  2430                           ;main.c: 278: lcdInst(0b10000000);;
  2431  000600  0E80               	movlw	128
  2432  000602  EC3A  F00E         	call	_lcdInst
  2433                           
  2434                           ;main.c: 279: printf("# OF 9V         ");
  2435  000606  0E33               	movlw	low STR_13
  2436  000608  0100               	movlb	0	; () banked
  2437  00060A  6FA1               	movwf	printf@f& (0+255),b
  2438  00060C  0EFF               	movlw	high STR_13
  2439  00060E  0100               	movlb	0	; () banked
  2440  000610  6FA2               	movwf	(printf@f+1)& (0+255),b
  2441  000612  ECEB  F005         	call	_printf	;wreg free
  2442                           
  2443                           ;main.c: 280: lcdInst(0b11000000);;
  2444  000616  0EC0               	movlw	192
  2445  000618  EC3A  F00E         	call	_lcdInst
  2446                           
  2447                           ;main.c: 281: printf("BATTERIES: %02d     ", num9V);
  2448  00061C  0EC7               	movlw	low STR_14
  2449  00061E  0100               	movlb	0	; () banked
  2450  000620  6FA1               	movwf	printf@f& (0+255),b
  2451  000622  0EFE               	movlw	high STR_14
  2452  000624  0100               	movlb	0	; () banked
  2453  000626  6FA2               	movwf	(printf@f+1)& (0+255),b
  2454  000628  C094  F0A3         	movff	_num9V,?_printf+2
  2455  00062C  0100               	movlb	0	; () banked
  2456  00062E  6BA4               	clrf	(?_printf+3)& (0+255),b
  2457  000630  ECEB  F005         	call	_printf	;wreg free
  2458  000634                     l4475:
  2459  000634  0E06               	movlw	6
  2460  000636  0100               	movlb	0	; () banked
  2461  000638  19BE               	xorwf	_screenMode& (0+255),w,b
  2462  00063A  A4D8               	btfss	status,2,c
  2463  00063C  D01B               	goto	l4483
  2464  00063E  D7E0               	goto	l4469
  2465  000640                     l4477:
  2466                           
  2467                           ; BSR set to: 0
  2468                           ;main.c: 284: lcdInst(0b10000000);;
  2469  000640  0E80               	movlw	128
  2470  000642  EC3A  F00E         	call	_lcdInst
  2471                           
  2472                           ;main.c: 285: printf("# OF AA         ");
  2473  000646  0E22               	movlw	low STR_15
  2474  000648  0100               	movlb	0	; () banked
  2475  00064A  6FA1               	movwf	printf@f& (0+255),b
  2476  00064C  0EFF               	movlw	high STR_15
  2477  00064E  0100               	movlb	0	; () banked
  2478  000650  6FA2               	movwf	(printf@f+1)& (0+255),b
  2479  000652  ECEB  F005         	call	_printf	;wreg free
  2480                           
  2481                           ;main.c: 286: lcdInst(0b11000000);;
  2482  000656  0EC0               	movlw	192
  2483  000658  EC3A  F00E         	call	_lcdInst
  2484                           
  2485                           ;main.c: 287: printf("BATTERIES: %02d     ", numAA);
  2486  00065C  0EC7               	movlw	low STR_14
  2487  00065E  0100               	movlb	0	; () banked
  2488  000660  6FA1               	movwf	printf@f& (0+255),b
  2489  000662  0EFE               	movlw	high STR_14
  2490  000664  0100               	movlb	0	; () banked
  2491  000666  6FA2               	movwf	(printf@f+1)& (0+255),b
  2492  000668  C095  F0A3         	movff	_numAA,?_printf+2
  2493  00066C  0100               	movlb	0	; () banked
  2494  00066E  6BA4               	clrf	(?_printf+3)& (0+255),b
  2495  000670  ECEB  F005         	call	_printf	;wreg free
  2496  000674                     l4483:
  2497  000674  0E07               	movlw	7
  2498  000676  0100               	movlb	0	; () banked
  2499  000678  19BE               	xorwf	_screenMode& (0+255),w,b
  2500  00067A  A4D8               	btfss	status,2,c
  2501  00067C  D01B               	goto	l4491
  2502  00067E  D7E0               	goto	l4477
  2503  000680                     l4485:
  2504                           
  2505                           ; BSR set to: 0
  2506                           ;main.c: 290: lcdInst(0b10000000);;
  2507  000680  0E80               	movlw	128
  2508  000682  EC3A  F00E         	call	_lcdInst
  2509                           
  2510                           ;main.c: 291: printf("# OF DRAINED    ");
  2511  000686  0E77               	movlw	low STR_17
  2512  000688  0100               	movlb	0	; () banked
  2513  00068A  6FA1               	movwf	printf@f& (0+255),b
  2514  00068C  0EFF               	movlw	high STR_17
  2515  00068E  0100               	movlb	0	; () banked
  2516  000690  6FA2               	movwf	(printf@f+1)& (0+255),b
  2517  000692  ECEB  F005         	call	_printf	;wreg free
  2518                           
  2519                           ;main.c: 292: lcdInst(0b11000000);;
  2520  000696  0EC0               	movlw	192
  2521  000698  EC3A  F00E         	call	_lcdInst
  2522                           
  2523                           ;main.c: 293: printf("BATTERIES: %02d     ", numDrain);
  2524  00069C  0EC7               	movlw	low STR_14
  2525  00069E  0100               	movlb	0	; () banked
  2526  0006A0  6FA1               	movwf	printf@f& (0+255),b
  2527  0006A2  0EFE               	movlw	high STR_14
  2528  0006A4  0100               	movlb	0	; () banked
  2529  0006A6  6FA2               	movwf	(printf@f+1)& (0+255),b
  2530  0006A8  C098  F0A3         	movff	_numDrain,?_printf+2
  2531  0006AC  0100               	movlb	0	; () banked
  2532  0006AE  6BA4               	clrf	(?_printf+3)& (0+255),b
  2533  0006B0  ECEB  F005         	call	_printf	;wreg free
  2534  0006B4                     l4491:
  2535  0006B4  0E08               	movlw	8
  2536  0006B6  0100               	movlb	0	; () banked
  2537  0006B8  19BE               	xorwf	_screenMode& (0+255),w,b
  2538  0006BA  A4D8               	btfss	status,2,c
  2539  0006BC  D066               	goto	l4513
  2540  0006BE  D7E0               	goto	l4485
  2541  0006C0                     l4493:
  2542                           
  2543                           ; BSR set to: 0
  2544                           ;main.c: 297: I2C_Master_Start();
  2545  0006C0  EC55  F00E         	call	_I2C_Master_Start	;wreg free
  2546                           
  2547                           ;main.c: 298: I2C_Master_Write(0b11010000);
  2548  0006C4  0E00               	movlw	0
  2549  0006C6  6E36               	movwf	I2C_Master_Write@d+1,c
  2550  0006C8  0ED0               	movlw	208
  2551  0006CA  6E35               	movwf	I2C_Master_Write@d,c
  2552  0006CC  EC4C  F00E         	call	_I2C_Master_Write	;wreg free
  2553                           
  2554                           ;main.c: 299: I2C_Master_Write(0x00);
  2555  0006D0  0E00               	movlw	0
  2556  0006D2  6E36               	movwf	I2C_Master_Write@d+1,c
  2557  0006D4  0E00               	movlw	0
  2558  0006D6  6E35               	movwf	I2C_Master_Write@d,c
  2559  0006D8  EC4C  F00E         	call	_I2C_Master_Write	;wreg free
  2560                           
  2561                           ;main.c: 300: I2C_Master_Stop();
  2562  0006DC  EC51  F00E         	call	_I2C_Master_Stop	;wreg free
  2563                           
  2564                           ;main.c: 302: I2C_Master_Start();
  2565  0006E0  EC55  F00E         	call	_I2C_Master_Start	;wreg free
  2566                           
  2567                           ;main.c: 303: I2C_Master_Write(0b11010001);
  2568  0006E4  0E00               	movlw	0
  2569  0006E6  6E36               	movwf	I2C_Master_Write@d+1,c
  2570  0006E8  0ED1               	movlw	209
  2571  0006EA  6E35               	movwf	I2C_Master_Write@d,c
  2572  0006EC  EC4C  F00E         	call	_I2C_Master_Write	;wreg free
  2573                           
  2574                           ;main.c: 304: for(unsigned char i=0;i<0x06;i++){
  2575  0006F0  0E00               	movlw	0
  2576  0006F2  0100               	movlb	0	; () banked
  2577  0006F4  6FBD               	movwf	main@i_633& (0+255),b
  2578  0006F6                     l4497:
  2579                           
  2580                           ; BSR set to: 0
  2581  0006F6  0E05               	movlw	5
  2582  0006F8  0100               	movlb	0	; () banked
  2583  0006FA  65BD               	cpfsgt	main@i_633& (0+255),b
  2584  0006FC  D001               	goto	l4501
  2585  0006FE  D010               	goto	l4507
  2586  000700                     l4501:
  2587                           
  2588                           ; BSR set to: 0
  2589                           ;main.c: 305: time[i] = I2C_Master_Read(1);
  2590  000700  0100               	movlb	0	; () banked
  2591  000702  51BD               	movf	main@i_633& (0+255),w,b
  2592  000704  0D01               	mullw	1
  2593  000706  0E80               	movlw	low _time
  2594  000708  24F3               	addwf	prodl,w,c
  2595  00070A  6ED9               	movwf	fsr2l,c
  2596  00070C  0E00               	movlw	high _time
  2597  00070E  20F4               	addwfc	prodh,w,c
  2598  000710  6EDA               	movwf	fsr2h,c
  2599  000712  0E01               	movlw	1
  2600  000714  ECDD  F00D         	call	_I2C_Master_Read
  2601  000718  6EDF               	movwf	indf2,c
  2602  00071A  0100               	movlb	0	; () banked
  2603  00071C  2BBD               	incf	main@i_633& (0+255),f,b
  2604  00071E  D7EB               	goto	l4497
  2605  000720                     l4507:
  2606                           
  2607                           ; BSR set to: 0
  2608                           ;main.c: 306: }
  2609                           ;main.c: 307: time[6] = I2C_Master_Read(0);
  2610  000720  0E00               	movlw	0
  2611  000722  ECDD  F00D         	call	_I2C_Master_Read
  2612  000726  0100               	movlb	0	; () banked
  2613  000728  6F86               	movwf	(_time+6)& (0+255),b
  2614                           
  2615                           ;main.c: 308: I2C_Master_Stop();
  2616  00072A  EC51  F00E         	call	_I2C_Master_Stop	;wreg free
  2617                           
  2618                           ;main.c: 309: lcdInst(0b10000000);;
  2619  00072E  0E80               	movlw	128
  2620  000730  EC3A  F00E         	call	_lcdInst
  2621                           
  2622                           ;main.c: 310: printf("DATE: %02x/%02x/%02x  ", time[6],time[5],time[4]);
  2623  000734  0E83               	movlw	low STR_19
  2624  000736  0100               	movlb	0	; () banked
  2625  000738  6FA1               	movwf	printf@f& (0+255),b
  2626  00073A  0EFE               	movlw	high STR_19
  2627  00073C  0100               	movlb	0	; () banked
  2628  00073E  6FA2               	movwf	(printf@f+1)& (0+255),b
  2629  000740  C086  F0A3         	movff	_time+6,?_printf+2
  2630  000744  0100               	movlb	0	; () banked
  2631  000746  6BA4               	clrf	(?_printf+3)& (0+255),b
  2632  000748  C085  F0A5         	movff	_time+5,?_printf+4
  2633  00074C  0100               	movlb	0	; () banked
  2634  00074E  6BA6               	clrf	(?_printf+5)& (0+255),b
  2635  000750  C084  F0A7         	movff	_time+4,?_printf+6
  2636  000754  0100               	movlb	0	; () banked
  2637  000756  6BA8               	clrf	(?_printf+7)& (0+255),b
  2638  000758  ECEB  F005         	call	_printf	;wreg free
  2639                           
  2640                           ;main.c: 311: lcdInst(0b11000000);;
  2641  00075C  0EC0               	movlw	192
  2642  00075E  EC3A  F00E         	call	_lcdInst
  2643                           
  2644                           ;main.c: 312: printf("TIME: %02x:%02x:%02x  ", time[2],time[1],time[0]);
  2645  000762  0E9A               	movlw	low STR_20
  2646  000764  0100               	movlb	0	; () banked
  2647  000766  6FA1               	movwf	printf@f& (0+255),b
  2648  000768  0EFE               	movlw	high STR_20
  2649  00076A  0100               	movlb	0	; () banked
  2650  00076C  6FA2               	movwf	(printf@f+1)& (0+255),b
  2651  00076E  C082  F0A3         	movff	_time+2,?_printf+2
  2652  000772  0100               	movlb	0	; () banked
  2653  000774  6BA4               	clrf	(?_printf+3)& (0+255),b
  2654  000776  C081  F0A5         	movff	_time+1,?_printf+4
  2655  00077A  0100               	movlb	0	; () banked
  2656  00077C  6BA6               	clrf	(?_printf+5)& (0+255),b
  2657  00077E  C080  F0A7         	movff	_time,?_printf+6
  2658  000782  0100               	movlb	0	; () banked
  2659  000784  6BA8               	clrf	(?_printf+7)& (0+255),b
  2660  000786  ECEB  F005         	call	_printf	;wreg free
  2661  00078A                     l4513:
  2662  00078A  0E09               	movlw	9
  2663  00078C  0100               	movlb	0	; () banked
  2664  00078E  19BE               	xorwf	_screenMode& (0+255),w,b
  2665  000790  A4D8               	btfss	status,2,c
  2666  000792  D028               	goto	l4525
  2667  000794  D795               	goto	l4493
  2668  000796                     l4515:
  2669                           
  2670                           ; BSR set to: 0
  2671                           ;main.c: 315: lcdInst(0b10000000);;
  2672  000796  0E80               	movlw	128
  2673  000798  EC3A  F00E         	call	_lcdInst
  2674                           
  2675                           ;main.c: 316: printf("EMERGENCY STOP  ");
  2676  00079C  0EAA               	movlw	low STR_21
  2677  00079E  0100               	movlb	0	; () banked
  2678  0007A0  6FA1               	movwf	printf@f& (0+255),b
  2679  0007A2  0EFF               	movlw	high STR_21
  2680  0007A4  0100               	movlb	0	; () banked
  2681  0007A6  6FA2               	movwf	(printf@f+1)& (0+255),b
  2682  0007A8  ECEB  F005         	call	_printf	;wreg free
  2683                           
  2684                           ;main.c: 317: lcdInst(0b11000000);;
  2685  0007AC  0EC0               	movlw	192
  2686  0007AE  EC3A  F00E         	call	_lcdInst
  2687                           
  2688                           ;main.c: 318: printf("                ");
  2689  0007B2  0E00               	movlw	low STR_22
  2690  0007B4  0100               	movlb	0	; () banked
  2691  0007B6  6FA1               	movwf	printf@f& (0+255),b
  2692  0007B8  0EFF               	movlw	high STR_22
  2693  0007BA  0100               	movlb	0	; () banked
  2694  0007BC  6FA2               	movwf	(printf@f+1)& (0+255),b
  2695  0007BE  ECEB  F005         	call	_printf	;wreg free
  2696                           
  2697                           ;main.c: 319: _delay((unsigned long)((2000)*(10000000/4000.0)));
  2698  0007C2  0E1A               	movlw	26
  2699  0007C4  0100               	movlb	0	; () banked
  2700  0007C6  6FB4               	movwf	(??_main+1)& (0+255),b
  2701  0007C8  0E5E               	movlw	94
  2702  0007CA  0100               	movlb	0	; () banked
  2703  0007CC  6FB3               	movwf	??_main& (0+255),b
  2704  0007CE  0E6E               	movlw	110
  2705  0007D0                     u5207:
  2706  0007D0  2EE8               	decfsz	wreg,f,c
  2707  0007D2  D7FE               	bra	u5207
  2708  0007D4  2FB3               	decfsz	??_main& (0+255),f,b
  2709  0007D6  D7FC               	bra	u5207
  2710  0007D8  2FB4               	decfsz	(??_main+1)& (0+255),f,b
  2711  0007DA  D7FA               	bra	u5207
  2712  0007DC  F000               	nop	
  2713                           
  2714                           ;main.c: 320: screenMode = 2;
  2715  0007DE  0E02               	movlw	2
  2716  0007E0  0100               	movlb	0	; () banked
  2717  0007E2  6FBE               	movwf	_screenMode& (0+255),b
  2718  0007E4                     l4525:
  2719                           
  2720                           ; BSR set to: 0
  2721  0007E4  0E0A               	movlw	10
  2722  0007E6  0100               	movlb	0	; () banked
  2723  0007E8  19BE               	xorwf	_screenMode& (0+255),w,b
  2724  0007EA  A4D8               	btfss	status,2,c
  2725  0007EC  D4A5               	goto	l4283
  2726  0007EE  D7D3               	goto	l4515
  2727  0007F0                     __end_of_main:
  2728                           	opt stack 0
  2729                           tblptru	equ	0xFF8
  2730                           tblptrh	equ	0xFF7
  2731                           tblptrl	equ	0xFF6
  2732                           tablat	equ	0xFF5
  2733                           prodh	equ	0xFF4
  2734                           prodl	equ	0xFF3
  2735                           intcon	equ	0xFF2
  2736                           intcon3	equ	0xFF0
  2737                           postinc0	equ	0xFEE
  2738                           wreg	equ	0xFE8
  2739                           indf2	equ	0xFDF
  2740                           fsr2h	equ	0xFDA
  2741                           fsr2l	equ	0xFD9
  2742                           status	equ	0xFD8
  2743                           
  2744 ;; *************** function _testBatteries *****************
  2745 ;; Defined at:
  2746 ;;		line 422 in file "../main.c"
  2747 ;; Parameters:    Size  Location     Type
  2748 ;;		None
  2749 ;; Auto vars:     Size  Location     Type
  2750 ;;		None
  2751 ;; Return value:  Size  Location     Type
  2752 ;;                  1    wreg      void 
  2753 ;; Registers used:
  2754 ;;		wreg, status,2, status,0
  2755 ;; Tracked objects:
  2756 ;;		On entry : 0/0
  2757 ;;		On exit  : 0/0
  2758 ;;		Unchanged: 0/0
  2759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2760 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2761 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2762 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2763 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2764 ;;Total ram usage:        0 bytes
  2765 ;; Hardware stack levels used:    1
  2766 ;; Hardware stack levels required when called:    5
  2767 ;; This function calls:
  2768 ;;		Nothing
  2769 ;; This function is called by:
  2770 ;;		_main
  2771 ;; This function uses a non-reentrant model
  2772 ;;
  2773                           
  2774                           	psect	text1
  2775  001272                     __ptext1:
  2776                           	opt stack 0
  2777  001272                     _testBatteries:
  2778                           	opt stack 25
  2779                           
  2780                           ;main.c: 423: LATEbits.LE0 = 1;;
  2781                           
  2782                           ; BSR set to: 0
  2783                           ;incstack = 0
  2784  001272  808D               	bsf	3981,0,c	;volatile
  2785                           
  2786                           ;main.c: 425: if (ADRES>=706){
  2787  001274  0EC2               	movlw	194
  2788  001276  5CC3               	subwf	4035,w,c	;volatile
  2789  001278  0E02               	movlw	2
  2790  00127A  58C4               	subwfb	4036,w,c	;volatile
  2791  00127C  A0D8               	btfss	status,0,c
  2792  00127E  D00E               	goto	l3329
  2793                           
  2794                           ;main.c: 426: LATEbits.LE0 = 0;;
  2795  001280  908D               	bcf	3981,0,c	;volatile
  2796                           
  2797                           ;main.c: 427: count9V++;
  2798  001282  0100               	movlb	0	; () banked
  2799  001284  2B8F               	incf	_count9V& (0+255),f,b
  2800                           
  2801                           ; BSR set to: 0
  2802                           ;main.c: 428: plat1Right = 1;
  2803  001286  0E00               	movlw	0
  2804  001288  0100               	movlb	0	; () banked
  2805  00128A  6F8A               	movwf	(_plat1Right+1)& (0+255),b
  2806  00128C  0E01               	movlw	1
  2807  00128E  6F89               	movwf	_plat1Right& (0+255),b
  2808                           
  2809                           ; BSR set to: 0
  2810                           ;main.c: 429: plat2Left = 1;
  2811  001290  0E00               	movlw	0
  2812  001292  0100               	movlb	0	; () banked
  2813  001294  6F8C               	movwf	(_plat2Left+1)& (0+255),b
  2814  001296  0E01               	movlw	1
  2815  001298  6F8B               	movwf	_plat2Left& (0+255),b
  2816                           
  2817                           ; BSR set to: 0
  2818                           ;main.c: 430: return;
  2819  00129A  0012               	return	
  2820  00129C                     l3329:
  2821                           
  2822                           ;main.c: 432: else if (ADRES>=5){
  2823  00129C  50C4               	movf	4036,w,c	;volatile
  2824  00129E  E104               	bnz	u3170
  2825  0012A0  0E05               	movlw	5
  2826  0012A2  5CC3               	subwf	4035,w,c	;volatile
  2827  0012A4  A0D8               	btfss	status,0,c
  2828  0012A6  D00E               	goto	l344
  2829  0012A8                     u3170:
  2830                           
  2831                           ;main.c: 433: LATEbits.LE0 = 0;;
  2832  0012A8  908D               	bcf	3981,0,c	;volatile
  2833                           
  2834                           ;main.c: 434: countDrain++;
  2835  0012AA  0100               	movlb	0	; () banked
  2836  0012AC  2B92               	incf	_countDrain& (0+255),f,b
  2837                           
  2838                           ; BSR set to: 0
  2839                           ;main.c: 435: plat1Left = 1;
  2840  0012AE  0E00               	movlw	0
  2841  0012B0  0100               	movlb	0	; () banked
  2842  0012B2  6F88               	movwf	(_plat1Left+1)& (0+255),b
  2843  0012B4  0E01               	movlw	1
  2844  0012B6  6F87               	movwf	_plat1Left& (0+255),b
  2845                           
  2846                           ; BSR set to: 0
  2847                           ;main.c: 436: plat2Right = 1;
  2848  0012B8  0E00               	movlw	0
  2849  0012BA  0100               	movlb	0	; () banked
  2850  0012BC  6F8E               	movwf	(_plat2Right+1)& (0+255),b
  2851  0012BE  0E01               	movlw	1
  2852  0012C0  6F8D               	movwf	_plat2Right& (0+255),b
  2853                           
  2854                           ; BSR set to: 0
  2855                           ;main.c: 437: return;
  2856  0012C2  0012               	return	
  2857  0012C4                     l344:
  2858                           
  2859                           ;main.c: 438: }
  2860                           ;main.c: 441: LATEbits.LE0 = 0;;
  2861  0012C4  908D               	bcf	3981,0,c	;volatile
  2862                           
  2863                           ;main.c: 442: LATEbits.LE1 = 1;;
  2864  0012C6  828D               	bsf	3981,1,c	;volatile
  2865                           
  2866                           ;main.c: 444: if (ADRES>=706){
  2867  0012C8  0EC2               	movlw	194
  2868  0012CA  5CC3               	subwf	4035,w,c	;volatile
  2869  0012CC  0E02               	movlw	2
  2870  0012CE  58C4               	subwfb	4036,w,c	;volatile
  2871  0012D0  A0D8               	btfss	status,0,c
  2872  0012D2  D00E               	goto	l3355
  2873                           
  2874                           ;main.c: 445: LATEbits.LE1 = 0;;
  2875  0012D4  928D               	bcf	3981,1,c	;volatile
  2876                           
  2877                           ;main.c: 446: count9V++;
  2878  0012D6  0100               	movlb	0	; () banked
  2879  0012D8  2B8F               	incf	_count9V& (0+255),f,b
  2880                           
  2881                           ; BSR set to: 0
  2882                           ;main.c: 447: plat1Right = 1;
  2883  0012DA  0E00               	movlw	0
  2884  0012DC  0100               	movlb	0	; () banked
  2885  0012DE  6F8A               	movwf	(_plat1Right+1)& (0+255),b
  2886  0012E0  0E01               	movlw	1
  2887  0012E2  6F89               	movwf	_plat1Right& (0+255),b
  2888                           
  2889                           ; BSR set to: 0
  2890                           ;main.c: 448: plat2Left = 1;
  2891  0012E4  0E00               	movlw	0
  2892  0012E6  0100               	movlb	0	; () banked
  2893  0012E8  6F8C               	movwf	(_plat2Left+1)& (0+255),b
  2894  0012EA  0E01               	movlw	1
  2895  0012EC  6F8B               	movwf	_plat2Left& (0+255),b
  2896                           
  2897                           ; BSR set to: 0
  2898                           ;main.c: 449: return;
  2899  0012EE  0012               	return	
  2900  0012F0                     l3355:
  2901                           
  2902                           ;main.c: 451: else if (ADRES>=5){
  2903  0012F0  50C4               	movf	4036,w,c	;volatile
  2904  0012F2  E104               	bnz	u3190
  2905  0012F4  0E05               	movlw	5
  2906  0012F6  5CC3               	subwf	4035,w,c	;volatile
  2907  0012F8  A0D8               	btfss	status,0,c
  2908  0012FA  D00E               	goto	l347
  2909  0012FC                     u3190:
  2910                           
  2911                           ;main.c: 452: LATEbits.LE1 = 0;;
  2912  0012FC  928D               	bcf	3981,1,c	;volatile
  2913                           
  2914                           ;main.c: 453: countDrain++;
  2915  0012FE  0100               	movlb	0	; () banked
  2916  001300  2B92               	incf	_countDrain& (0+255),f,b
  2917                           
  2918                           ; BSR set to: 0
  2919                           ;main.c: 454: plat1Left = 1;
  2920  001302  0E00               	movlw	0
  2921  001304  0100               	movlb	0	; () banked
  2922  001306  6F88               	movwf	(_plat1Left+1)& (0+255),b
  2923  001308  0E01               	movlw	1
  2924  00130A  6F87               	movwf	_plat1Left& (0+255),b
  2925                           
  2926                           ; BSR set to: 0
  2927                           ;main.c: 455: plat2Right = 1;
  2928  00130C  0E00               	movlw	0
  2929  00130E  0100               	movlb	0	; () banked
  2930  001310  6F8E               	movwf	(_plat2Right+1)& (0+255),b
  2931  001312  0E01               	movlw	1
  2932  001314  6F8D               	movwf	_plat2Right& (0+255),b
  2933                           
  2934                           ; BSR set to: 0
  2935                           ;main.c: 456: return;
  2936  001316  0012               	return	
  2937  001318                     l347:
  2938                           
  2939                           ;main.c: 457: }
  2940                           ;main.c: 460: LATEbits.LE1 = 0;;
  2941  001318  928D               	bcf	3981,1,c	;volatile
  2942                           
  2943                           ;main.c: 461: LATCbits.LC5 = 1;;
  2944  00131A  8A8B               	bsf	3979,5,c	;volatile
  2945                           
  2946                           ;main.c: 463: if (ADRES>=54){
  2947  00131C  50C4               	movf	4036,w,c	;volatile
  2948  00131E  E104               	bnz	u3200
  2949  001320  0E36               	movlw	54
  2950  001322  5CC3               	subwf	4035,w,c	;volatile
  2951  001324  A0D8               	btfss	status,0,c
  2952  001326  D00E               	goto	l3381
  2953  001328                     u3200:
  2954                           
  2955                           ;main.c: 464: LATCbits.LC5 = 0;;
  2956  001328  9A8B               	bcf	3979,5,c	;volatile
  2957                           
  2958                           ;main.c: 465: countC++;
  2959  00132A  0100               	movlb	0	; () banked
  2960  00132C  2B91               	incf	_countC& (0+255),f,b
  2961                           
  2962                           ; BSR set to: 0
  2963                           ;main.c: 466: plat1Right = 1;
  2964  00132E  0E00               	movlw	0
  2965  001330  0100               	movlb	0	; () banked
  2966  001332  6F8A               	movwf	(_plat1Right+1)& (0+255),b
  2967  001334  0E01               	movlw	1
  2968  001336  6F89               	movwf	_plat1Right& (0+255),b
  2969                           
  2970                           ; BSR set to: 0
  2971                           ;main.c: 467: plat2Left = 1;
  2972  001338  0E00               	movlw	0
  2973  00133A  0100               	movlb	0	; () banked
  2974  00133C  6F8C               	movwf	(_plat2Left+1)& (0+255),b
  2975  00133E  0E01               	movlw	1
  2976  001340  6F8B               	movwf	_plat2Left& (0+255),b
  2977                           
  2978                           ; BSR set to: 0
  2979                           ;main.c: 468: return;
  2980  001342  0012               	return	
  2981  001344                     l3381:
  2982                           
  2983                           ;main.c: 470: else if (ADRES>=5){
  2984  001344  50C4               	movf	4036,w,c	;volatile
  2985  001346  E104               	bnz	u3210
  2986  001348  0E05               	movlw	5
  2987  00134A  5CC3               	subwf	4035,w,c	;volatile
  2988  00134C  A0D8               	btfss	status,0,c
  2989  00134E  D00E               	goto	l350
  2990  001350                     u3210:
  2991                           
  2992                           ;main.c: 471: LATCbits.LC5 = 0;;
  2993  001350  9A8B               	bcf	3979,5,c	;volatile
  2994                           
  2995                           ;main.c: 472: countDrain++;
  2996  001352  0100               	movlb	0	; () banked
  2997  001354  2B92               	incf	_countDrain& (0+255),f,b
  2998                           
  2999                           ; BSR set to: 0
  3000                           ;main.c: 473: plat1Left = 1;
  3001  001356  0E00               	movlw	0
  3002  001358  0100               	movlb	0	; () banked
  3003  00135A  6F88               	movwf	(_plat1Left+1)& (0+255),b
  3004  00135C  0E01               	movlw	1
  3005  00135E  6F87               	movwf	_plat1Left& (0+255),b
  3006                           
  3007                           ; BSR set to: 0
  3008                           ;main.c: 474: plat2Right = 1;
  3009  001360  0E00               	movlw	0
  3010  001362  0100               	movlb	0	; () banked
  3011  001364  6F8E               	movwf	(_plat2Right+1)& (0+255),b
  3012  001366  0E01               	movlw	1
  3013  001368  6F8D               	movwf	_plat2Right& (0+255),b
  3014                           
  3015                           ; BSR set to: 0
  3016                           ;main.c: 475: return;
  3017  00136A  0012               	return	
  3018  00136C                     l350:
  3019                           
  3020                           ;main.c: 476: }
  3021                           ;main.c: 479: LATCbits.LC5 = 0;;
  3022  00136C  9A8B               	bcf	3979,5,c	;volatile
  3023                           
  3024                           ;main.c: 480: LATDbits.LD0 = 1;;
  3025  00136E  808C               	bsf	3980,0,c	;volatile
  3026                           
  3027                           ;main.c: 482: if (ADRES>=54){
  3028  001370  50C4               	movf	4036,w,c	;volatile
  3029  001372  E104               	bnz	u3220
  3030  001374  0E36               	movlw	54
  3031  001376  5CC3               	subwf	4035,w,c	;volatile
  3032  001378  A0D8               	btfss	status,0,c
  3033  00137A  D009               	goto	l3401
  3034  00137C                     u3220:
  3035                           
  3036                           ;main.c: 483: LATDbits.LD0 = 0;;
  3037  00137C  908C               	bcf	3980,0,c	;volatile
  3038                           
  3039                           ;main.c: 484: countAA++;
  3040  00137E  0100               	movlb	0	; () banked
  3041  001380  2B90               	incf	_countAA& (0+255),f,b
  3042                           
  3043                           ; BSR set to: 0
  3044                           ;main.c: 485: plat1Right = 1;
  3045  001382  0E00               	movlw	0
  3046  001384  0100               	movlb	0	; () banked
  3047  001386  6F8A               	movwf	(_plat1Right+1)& (0+255),b
  3048  001388  0E01               	movlw	1
  3049  00138A  6F89               	movwf	_plat1Right& (0+255),b
  3050                           
  3051                           ;main.c: 486: }
  3052  00138C  D00E               	goto	l3409
  3053  00138E                     l3401:
  3054                           
  3055                           ;main.c: 487: else if (ADRES>=5){
  3056  00138E  50C4               	movf	4036,w,c	;volatile
  3057  001390  E104               	bnz	u3230
  3058  001392  0E05               	movlw	5
  3059  001394  5CC3               	subwf	4035,w,c	;volatile
  3060  001396  A0D8               	btfss	status,0,c
  3061  001398  D008               	goto	l3409
  3062  00139A                     u3230:
  3063                           
  3064                           ;main.c: 488: LATDbits.LD0 = 0;;
  3065  00139A  908C               	bcf	3980,0,c	;volatile
  3066                           
  3067                           ;main.c: 489: countDrain++;
  3068  00139C  0100               	movlb	0	; () banked
  3069  00139E  2B92               	incf	_countDrain& (0+255),f,b
  3070                           
  3071                           ; BSR set to: 0
  3072                           ;main.c: 490: plat1Left = 1;
  3073  0013A0  0E00               	movlw	0
  3074  0013A2  0100               	movlb	0	; () banked
  3075  0013A4  6F88               	movwf	(_plat1Left+1)& (0+255),b
  3076  0013A6  0E01               	movlw	1
  3077  0013A8  6F87               	movwf	_plat1Left& (0+255),b
  3078  0013AA                     l3409:
  3079                           
  3080                           ;main.c: 491: }
  3081                           ;main.c: 493: LATDbits.LD0 = 0;;
  3082  0013AA  908C               	bcf	3980,0,c	;volatile
  3083                           
  3084                           ;main.c: 494: LATDbits.LD1 = 1;;
  3085  0013AC  828C               	bsf	3980,1,c	;volatile
  3086                           
  3087                           ;main.c: 496: if (ADRES>=54){
  3088  0013AE  50C4               	movf	4036,w,c	;volatile
  3089  0013B0  E104               	bnz	u3240
  3090  0013B2  0E36               	movlw	54
  3091  0013B4  5CC3               	subwf	4035,w,c	;volatile
  3092  0013B6  A0D8               	btfss	status,0,c
  3093  0013B8  D009               	goto	l355
  3094  0013BA                     u3240:
  3095                           
  3096                           ;main.c: 497: LATDbits.LD1 = 0;;
  3097  0013BA  928C               	bcf	3980,1,c	;volatile
  3098                           
  3099                           ;main.c: 498: countAA++;
  3100  0013BC  0100               	movlb	0	; () banked
  3101  0013BE  2B90               	incf	_countAA& (0+255),f,b
  3102                           
  3103                           ; BSR set to: 0
  3104                           ;main.c: 499: plat2Left = 1;
  3105  0013C0  0E00               	movlw	0
  3106  0013C2  0100               	movlb	0	; () banked
  3107  0013C4  6F8C               	movwf	(_plat2Left+1)& (0+255),b
  3108  0013C6  0E01               	movlw	1
  3109  0013C8  6F8B               	movwf	_plat2Left& (0+255),b
  3110                           
  3111                           ;main.c: 500: }
  3112  0013CA  D008               	goto	l3425
  3113  0013CC                     l355:
  3114                           
  3115                           ;main.c: 502: else{
  3116                           ;main.c: 503: LATDbits.LD1 = 0;;
  3117  0013CC  928C               	bcf	3980,1,c	;volatile
  3118                           
  3119                           ;main.c: 504: countDrain++;
  3120  0013CE  0100               	movlb	0	; () banked
  3121  0013D0  2B92               	incf	_countDrain& (0+255),f,b
  3122                           
  3123                           ; BSR set to: 0
  3124                           ;main.c: 505: plat2Right = 1;
  3125  0013D2  0E00               	movlw	0
  3126  0013D4  0100               	movlb	0	; () banked
  3127  0013D6  6F8E               	movwf	(_plat2Right+1)& (0+255),b
  3128  0013D8  0E01               	movlw	1
  3129  0013DA  6F8D               	movwf	_plat2Right& (0+255),b
  3130  0013DC                     l3425:
  3131                           
  3132                           ; BSR set to: 0
  3133                           ;main.c: 506: }
  3134                           ;main.c: 508: LATDbits.LD1 = 0;;
  3135  0013DC  928C               	bcf	3980,1,c	;volatile
  3136  0013DE  0012               	return	
  3137  0013E0                     __end_of_testBatteries:
  3138                           	opt stack 0
  3139                           tblptru	equ	0xFF8
  3140                           tblptrh	equ	0xFF7
  3141                           tblptrl	equ	0xFF6
  3142                           tablat	equ	0xFF5
  3143                           prodh	equ	0xFF4
  3144                           prodl	equ	0xFF3
  3145                           intcon	equ	0xFF2
  3146                           intcon3	equ	0xFF0
  3147                           postinc0	equ	0xFEE
  3148                           wreg	equ	0xFE8
  3149                           indf2	equ	0xFDF
  3150                           fsr2h	equ	0xFDA
  3151                           fsr2l	equ	0xFD9
  3152                           status	equ	0xFD8
  3153                           
  3154 ;; *************** function _stopOperation *****************
  3155 ;; Defined at:
  3156 ;;		line 373 in file "../main.c"
  3157 ;; Parameters:    Size  Location     Type
  3158 ;;		None
  3159 ;; Auto vars:     Size  Location     Type
  3160 ;;		None
  3161 ;; Return value:  Size  Location     Type
  3162 ;;                  1    wreg      void 
  3163 ;; Registers used:
  3164 ;;		wreg, status,2, status,0, cstack
  3165 ;; Tracked objects:
  3166 ;;		On entry : 0/0
  3167 ;;		On exit  : 0/0
  3168 ;;		Unchanged: 0/0
  3169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3170 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3171 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3172 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3173 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3174 ;;Total ram usage:        0 bytes
  3175 ;; Hardware stack levels used:    1
  3176 ;; Hardware stack levels required when called:    6
  3177 ;; This function calls:
  3178 ;;		___awdiv
  3179 ;;		___awmod
  3180 ;; This function is called by:
  3181 ;;		_main
  3182 ;; This function uses a non-reentrant model
  3183 ;;
  3184                           
  3185                           	psect	text2
  3186  0013E0                     __ptext2:
  3187                           	opt stack 0
  3188  0013E0                     _stopOperation:
  3189                           	opt stack 24
  3190                           
  3191                           ;main.c: 374: T0CONbits.TMR0ON = 0;
  3192                           
  3193                           ; BSR set to: 0
  3194                           ;incstack = 0
  3195  0013E0  9ED5               	bcf	4053,7,c	;volatile
  3196                           
  3197                           ;main.c: 375: T1CONbits.TMR1ON = 0;
  3198  0013E2  90CD               	bcf	4045,0,c	;volatile
  3199                           
  3200                           ;main.c: 376: TMR0 = 55770;
  3201  0013E4  0ED9               	movlw	217
  3202  0013E6  6ED7               	movwf	4055,c	;volatile
  3203  0013E8  0EDA               	movlw	218
  3204  0013EA  6ED6               	movwf	4054,c	;volatile
  3205                           
  3206                           ;main.c: 377: TMR1 = 58035;
  3207  0013EC  0EE2               	movlw	226
  3208  0013EE  6ECF               	movwf	4047,c	;volatile
  3209  0013F0  0EB3               	movlw	179
  3210  0013F2  6ECE               	movwf	4046,c	;volatile
  3211                           
  3212                           ;main.c: 378: num9V = count9V;
  3213  0013F4  C08F  F094         	movff	_count9V,_num9V
  3214                           
  3215                           ;main.c: 379: numC = countC;
  3216  0013F8  C091  F097         	movff	_countC,_numC
  3217                           
  3218                           ;main.c: 380: numAA = countAA;
  3219  0013FC  C090  F095         	movff	_countAA,_numAA
  3220                           
  3221                           ;main.c: 381: numDrain = countDrain;
  3222  001400  C092  F098         	movff	_countDrain,_numDrain
  3223                           
  3224                           ;main.c: 382: count9V = 0;
  3225  001404  0E00               	movlw	0
  3226  001406  0100               	movlb	0	; () banked
  3227  001408  6F8F               	movwf	_count9V& (0+255),b
  3228                           
  3229                           ;main.c: 383: countC = 0;
  3230  00140A  0E00               	movlw	0
  3231  00140C  0100               	movlb	0	; () banked
  3232  00140E  6F91               	movwf	_countC& (0+255),b
  3233                           
  3234                           ;main.c: 384: countAA = 0;
  3235  001410  0E00               	movlw	0
  3236  001412  0100               	movlb	0	; () banked
  3237  001414  6F90               	movwf	_countAA& (0+255),b
  3238                           
  3239                           ;main.c: 385: countDrain = 0;
  3240  001416  0E00               	movlw	0
  3241  001418  0100               	movlb	0	; () banked
  3242  00141A  6F92               	movwf	_countDrain& (0+255),b
  3243                           
  3244                           ; BSR set to: 0
  3245                           ;main.c: 386: min = opTimer / 60;
  3246  00141C  C047  F034         	movff	_opTimer,___awdiv@dividend
  3247  001420  6A35               	clrf	___awdiv@dividend+1,c
  3248  001422  0E00               	movlw	0
  3249  001424  6E37               	movwf	___awdiv@divisor+1,c
  3250  001426  0E3C               	movlw	60
  3251  001428  6E36               	movwf	___awdiv@divisor,c
  3252  00142A  EC3D  F00B         	call	___awdiv	;wreg free
  3253  00142E  5034               	movf	?___awdiv,w,c
  3254  001430  0100               	movlb	0	; () banked
  3255  001432  6F93               	movwf	_min& (0+255),b
  3256                           
  3257                           ; BSR set to: 0
  3258                           ;main.c: 387: sec = opTimer % 60;
  3259  001434  C047  F034         	movff	_opTimer,___awmod@dividend
  3260  001438  6A35               	clrf	___awmod@dividend+1,c
  3261  00143A  0E00               	movlw	0
  3262  00143C  6E37               	movwf	___awmod@divisor+1,c
  3263  00143E  0E3C               	movlw	60
  3264  001440  6E36               	movwf	___awmod@divisor,c
  3265  001442  EC02  F00C         	call	___awmod	;wreg free
  3266  001446  5034               	movf	?___awmod,w,c
  3267  001448  0100               	movlb	0	; () banked
  3268  00144A  6F99               	movwf	_sec& (0+255),b
  3269                           
  3270                           ;main.c: 388: opTimer = 0;
  3271  00144C  0E00               	movlw	0
  3272  00144E  6E47               	movwf	_opTimer,c
  3273                           
  3274                           ;main.c: 389: solOnTimer = 0;
  3275  001450  0E00               	movlw	0
  3276  001452  6E4B               	movwf	_solOnTimer,c
  3277                           
  3278                           ;main.c: 390: doneTimer = 0;
  3279  001454  0E00               	movlw	0
  3280  001456  6E46               	movwf	_doneTimer,c
  3281                           
  3282                           ;main.c: 391: waitPlats = 0;
  3283  001458  0E00               	movlw	0
  3284  00145A  0100               	movlb	0	; () banked
  3285  00145C  6FA0               	movwf	_waitPlats& (0+255),b
  3286                           
  3287                           ;main.c: 392: stepGear = 0;
  3288  00145E  0E00               	movlw	0
  3289  001460  0100               	movlb	0	; () banked
  3290  001462  6F9B               	movwf	_stepGear& (0+255),b
  3291                           
  3292                           ;main.c: 393: stepAmount = 0;
  3293  001464  0E00               	movlw	0
  3294  001466  6E45               	movwf	_stepAmount+1,c
  3295  001468  0E00               	movlw	0
  3296  00146A  6E44               	movwf	_stepAmount,c
  3297                           
  3298                           ;main.c: 394: sorting = 0;
  3299  00146C  0E00               	movlw	0
  3300  00146E  6E48               	movwf	_sorting,c
  3301                           
  3302                           ;main.c: 395: plat1Left = 0;
  3303  001470  0E00               	movlw	0
  3304  001472  0100               	movlb	0	; () banked
  3305  001474  6F88               	movwf	(_plat1Left+1)& (0+255),b
  3306  001476  0E00               	movlw	0
  3307  001478  6F87               	movwf	_plat1Left& (0+255),b
  3308                           
  3309                           ;main.c: 396: plat1Right = 0;
  3310  00147A  0E00               	movlw	0
  3311  00147C  0100               	movlb	0	; () banked
  3312  00147E  6F8A               	movwf	(_plat1Right+1)& (0+255),b
  3313  001480  0E00               	movlw	0
  3314  001482  6F89               	movwf	_plat1Right& (0+255),b
  3315                           
  3316                           ;main.c: 397: plat2Left = 0;
  3317  001484  0E00               	movlw	0
  3318  001486  0100               	movlb	0	; () banked
  3319  001488  6F8C               	movwf	(_plat2Left+1)& (0+255),b
  3320  00148A  0E00               	movlw	0
  3321  00148C  6F8B               	movwf	_plat2Left& (0+255),b
  3322                           
  3323                           ;main.c: 398: plat2Right = 0;
  3324  00148E  0E00               	movlw	0
  3325  001490  0100               	movlb	0	; () banked
  3326  001492  6F8E               	movwf	(_plat2Right+1)& (0+255),b
  3327  001494  0E00               	movlw	0
  3328  001496  6F8D               	movwf	_plat2Right& (0+255),b
  3329                           
  3330                           ;main.c: 399: turn2BackLeft = 0;
  3331  001498  0E00               	movlw	0
  3332  00149A  0100               	movlb	0	; () banked
  3333  00149C  6F9E               	movwf	_turn2BackLeft& (0+255),b
  3334                           
  3335                           ;main.c: 400: turn1BackLeft = 0;
  3336  00149E  0E00               	movlw	0
  3337  0014A0  0100               	movlb	0	; () banked
  3338  0014A2  6F9C               	movwf	_turn1BackLeft& (0+255),b
  3339                           
  3340                           ;main.c: 401: turn2BackRight = 0;
  3341  0014A4  0E00               	movlw	0
  3342  0014A6  0100               	movlb	0	; () banked
  3343  0014A8  6F9F               	movwf	_turn2BackRight& (0+255),b
  3344                           
  3345                           ;main.c: 402: turn1BackRight = 0;
  3346  0014AA  0E00               	movlw	0
  3347  0014AC  0100               	movlb	0	; () banked
  3348  0014AE  6F9D               	movwf	_turn1BackRight& (0+255),b
  3349                           
  3350                           ; BSR set to: 0
  3351                           ;main.c: 403: LATEbits.LE0 = 0;;
  3352  0014B0  908D               	bcf	3981,0,c	;volatile
  3353                           
  3354                           ; BSR set to: 0
  3355                           ;main.c: 404: LATEbits.LE1 = 0;;
  3356  0014B2  928D               	bcf	3981,1,c	;volatile
  3357                           
  3358                           ; BSR set to: 0
  3359                           ;main.c: 405: LATCbits.LC5 = 0;;
  3360  0014B4  9A8B               	bcf	3979,5,c	;volatile
  3361                           
  3362                           ; BSR set to: 0
  3363                           ;main.c: 406: LATDbits.LD0 = 0;;
  3364  0014B6  908C               	bcf	3980,0,c	;volatile
  3365                           
  3366                           ; BSR set to: 0
  3367                           ;main.c: 407: LATDbits.LD1 = 0;;
  3368  0014B8  928C               	bcf	3980,1,c	;volatile
  3369                           
  3370                           ; BSR set to: 0
  3371                           ;main.c: 408: LATAbits.LA2 = 0;;
  3372  0014BA  9489               	bcf	3977,2,c	;volatile
  3373                           
  3374                           ; BSR set to: 0
  3375                           ;main.c: 409: LATAbits.LA3 = 0;;
  3376  0014BC  9689               	bcf	3977,3,c	;volatile
  3377                           
  3378                           ; BSR set to: 0
  3379                           ;main.c: 410: LATAbits.LA4 = 0;;
  3380  0014BE  9889               	bcf	3977,4,c	;volatile
  3381                           
  3382                           ; BSR set to: 0
  3383                           ;main.c: 411: LATAbits.LA5 = 0;;
  3384  0014C0  9A89               	bcf	3977,5,c	;volatile
  3385                           
  3386                           ; BSR set to: 0
  3387                           ;main.c: 412: LATBbits.LB0 = 0;;
  3388  0014C2  908A               	bcf	3978,0,c	;volatile
  3389                           
  3390                           ; BSR set to: 0
  3391                           ;main.c: 413: LATBbits.LB2 = 0;;
  3392  0014C4  948A               	bcf	3978,2,c	;volatile
  3393                           
  3394                           ; BSR set to: 0
  3395                           ;main.c: 414: LATCbits.LC6 = 0;;
  3396  0014C6  9C8B               	bcf	3979,6,c	;volatile
  3397                           
  3398                           ; BSR set to: 0
  3399                           ;main.c: 415: LATAbits.LA6 = 0;;
  3400  0014C8  9C89               	bcf	3977,6,c	;volatile
  3401                           
  3402                           ; BSR set to: 0
  3403                           ;main.c: 416: LATCbits.LC1= 0;;
  3404  0014CA  928B               	bcf	3979,1,c	;volatile
  3405                           
  3406                           ; BSR set to: 0
  3407                           ;main.c: 417: LATAbits.LA7 = 0;;
  3408  0014CC  9E89               	bcf	3977,7,c	;volatile
  3409                           
  3410                           ; BSR set to: 0
  3411                           ;main.c: 418: LATCbits.LC2 = 0;;
  3412  0014CE  948B               	bcf	3979,2,c	;volatile
  3413                           
  3414                           ; BSR set to: 0
  3415                           ;main.c: 419: LATCbits.LC0 = 0;;
  3416  0014D0  908B               	bcf	3979,0,c	;volatile
  3417                           
  3418                           ; BSR set to: 0
  3419  0014D2  0012               	return		;funcret
  3420  0014D4                     __end_of_stopOperation:
  3421                           	opt stack 0
  3422                           tblptru	equ	0xFF8
  3423                           tblptrh	equ	0xFF7
  3424                           tblptrl	equ	0xFF6
  3425                           tablat	equ	0xFF5
  3426                           prodh	equ	0xFF4
  3427                           prodl	equ	0xFF3
  3428                           intcon	equ	0xFF2
  3429                           intcon3	equ	0xFF0
  3430                           postinc0	equ	0xFEE
  3431                           wreg	equ	0xFE8
  3432                           indf2	equ	0xFDF
  3433                           fsr2h	equ	0xFDA
  3434                           fsr2l	equ	0xFD9
  3435                           status	equ	0xFD8
  3436                           
  3437 ;; *************** function ___awmod *****************
  3438 ;; Defined at:
  3439 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  3440 ;; Parameters:    Size  Location     Type
  3441 ;;  dividend        2   51[COMRAM] int 
  3442 ;;  divisor         2   53[COMRAM] int 
  3443 ;; Auto vars:     Size  Location     Type
  3444 ;;  sign            1   56[COMRAM] unsigned char 
  3445 ;;  counter         1   55[COMRAM] unsigned char 
  3446 ;; Return value:  Size  Location     Type
  3447 ;;                  2   51[COMRAM] int 
  3448 ;; Registers used:
  3449 ;;		wreg, status,2, status,0
  3450 ;; Tracked objects:
  3451 ;;		On entry : 0/0
  3452 ;;		On exit  : 0/0
  3453 ;;		Unchanged: 0/0
  3454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3455 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3456 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3458 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3459 ;;Total ram usage:        6 bytes
  3460 ;; Hardware stack levels used:    1
  3461 ;; Hardware stack levels required when called:    5
  3462 ;; This function calls:
  3463 ;;		Nothing
  3464 ;; This function is called by:
  3465 ;;		_stopOperation
  3466 ;; This function uses a non-reentrant model
  3467 ;;
  3468                           
  3469                           	psect	text3
  3470  001804                     __ptext3:
  3471                           	opt stack 0
  3472  001804                     ___awmod:
  3473                           	opt stack 24
  3474                           
  3475                           ; BSR set to: 0
  3476                           ;incstack = 0
  3477  001804  0E00               	movlw	0
  3478  001806  6E39               	movwf	___awmod@sign,c
  3479  001808  AE35               	btfss	___awmod@dividend+1,7,c
  3480  00180A  D006               	goto	l2857
  3481  00180C  6C34               	negf	___awmod@dividend,c
  3482  00180E  1E35               	comf	___awmod@dividend+1,f,c
  3483  001810  B0D8               	btfsc	status,0,c
  3484  001812  2A35               	incf	___awmod@dividend+1,f,c
  3485  001814  0E01               	movlw	1
  3486  001816  6E39               	movwf	___awmod@sign,c
  3487  001818                     l2857:
  3488  001818  AE37               	btfss	___awmod@divisor+1,7,c
  3489  00181A  D004               	goto	l2861
  3490  00181C  6C36               	negf	___awmod@divisor,c
  3491  00181E  1E37               	comf	___awmod@divisor+1,f,c
  3492  001820  B0D8               	btfsc	status,0,c
  3493  001822  2A37               	incf	___awmod@divisor+1,f,c
  3494  001824                     l2861:
  3495  001824  5036               	movf	___awmod@divisor,w,c
  3496  001826  1037               	iorwf	___awmod@divisor+1,w,c
  3497  001828  B4D8               	btfsc	status,2,c
  3498  00182A  D018               	goto	l2877
  3499  00182C  0E01               	movlw	1
  3500  00182E  6E38               	movwf	___awmod@counter,c
  3501  001830  D004               	goto	l2867
  3502  001832                     l2865:
  3503  001832  90D8               	bcf	status,0,c
  3504  001834  3636               	rlcf	___awmod@divisor,f,c
  3505  001836  3637               	rlcf	___awmod@divisor+1,f,c
  3506  001838  2A38               	incf	___awmod@counter,f,c
  3507  00183A                     l2867:
  3508  00183A  AE37               	btfss	___awmod@divisor+1,7,c
  3509  00183C  D7FA               	goto	l2865
  3510  00183E                     l2869:
  3511  00183E  5036               	movf	___awmod@divisor,w,c
  3512  001840  5C34               	subwf	___awmod@dividend,w,c
  3513  001842  5037               	movf	___awmod@divisor+1,w,c
  3514  001844  5835               	subwfb	___awmod@dividend+1,w,c
  3515  001846  A0D8               	btfss	status,0,c
  3516  001848  D004               	goto	l2873
  3517  00184A  5036               	movf	___awmod@divisor,w,c
  3518  00184C  5E34               	subwf	___awmod@dividend,f,c
  3519  00184E  5037               	movf	___awmod@divisor+1,w,c
  3520  001850  5A35               	subwfb	___awmod@dividend+1,f,c
  3521  001852                     l2873:
  3522  001852  90D8               	bcf	status,0,c
  3523  001854  3237               	rrcf	___awmod@divisor+1,f,c
  3524  001856  3236               	rrcf	___awmod@divisor,f,c
  3525  001858  2E38               	decfsz	___awmod@counter,f,c
  3526  00185A  D7F1               	goto	l2869
  3527  00185C                     l2877:
  3528  00185C  5039               	movf	___awmod@sign,w,c
  3529  00185E  B4D8               	btfsc	status,2,c
  3530  001860  D004               	goto	l2881
  3531  001862  6C34               	negf	___awmod@dividend,c
  3532  001864  1E35               	comf	___awmod@dividend+1,f,c
  3533  001866  B0D8               	btfsc	status,0,c
  3534  001868  2A35               	incf	___awmod@dividend+1,f,c
  3535  00186A                     l2881:
  3536  00186A  C034  F034         	movff	___awmod@dividend,?___awmod
  3537  00186E  C035  F035         	movff	___awmod@dividend+1,?___awmod+1
  3538  001872  0012               	return	
  3539  001874                     __end_of___awmod:
  3540                           	opt stack 0
  3541                           tblptru	equ	0xFF8
  3542                           tblptrh	equ	0xFF7
  3543                           tblptrl	equ	0xFF6
  3544                           tablat	equ	0xFF5
  3545                           prodh	equ	0xFF4
  3546                           prodl	equ	0xFF3
  3547                           intcon	equ	0xFF2
  3548                           intcon3	equ	0xFF0
  3549                           postinc0	equ	0xFEE
  3550                           wreg	equ	0xFE8
  3551                           indf2	equ	0xFDF
  3552                           fsr2h	equ	0xFDA
  3553                           fsr2l	equ	0xFD9
  3554                           status	equ	0xFD8
  3555                           
  3556 ;; *************** function ___awdiv *****************
  3557 ;; Defined at:
  3558 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  3559 ;; Parameters:    Size  Location     Type
  3560 ;;  dividend        2   51[COMRAM] int 
  3561 ;;  divisor         2   53[COMRAM] int 
  3562 ;; Auto vars:     Size  Location     Type
  3563 ;;  quotient        2   57[COMRAM] int 
  3564 ;;  sign            1   56[COMRAM] unsigned char 
  3565 ;;  counter         1   55[COMRAM] unsigned char 
  3566 ;; Return value:  Size  Location     Type
  3567 ;;                  2   51[COMRAM] int 
  3568 ;; Registers used:
  3569 ;;		wreg, status,2, status,0
  3570 ;; Tracked objects:
  3571 ;;		On entry : 0/0
  3572 ;;		On exit  : 0/0
  3573 ;;		Unchanged: 0/0
  3574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3575 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3576 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3577 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3578 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3579 ;;Total ram usage:        8 bytes
  3580 ;; Hardware stack levels used:    1
  3581 ;; Hardware stack levels required when called:    5
  3582 ;; This function calls:
  3583 ;;		Nothing
  3584 ;; This function is called by:
  3585 ;;		_stopOperation
  3586 ;; This function uses a non-reentrant model
  3587 ;;
  3588                           
  3589                           	psect	text4
  3590  00167A                     __ptext4:
  3591                           	opt stack 0
  3592  00167A                     ___awdiv:
  3593                           	opt stack 24
  3594                           
  3595                           ;incstack = 0
  3596  00167A  0E00               	movlw	0
  3597  00167C  6E39               	movwf	___awdiv@sign,c
  3598  00167E  AE37               	btfss	___awdiv@divisor+1,7,c
  3599  001680  D006               	goto	l2813
  3600  001682  6C36               	negf	___awdiv@divisor,c
  3601  001684  1E37               	comf	___awdiv@divisor+1,f,c
  3602  001686  B0D8               	btfsc	status,0,c
  3603  001688  2A37               	incf	___awdiv@divisor+1,f,c
  3604  00168A  0E01               	movlw	1
  3605  00168C  6E39               	movwf	___awdiv@sign,c
  3606  00168E                     l2813:
  3607  00168E  AE35               	btfss	___awdiv@dividend+1,7,c
  3608  001690  D006               	goto	l2819
  3609  001692  6C34               	negf	___awdiv@dividend,c
  3610  001694  1E35               	comf	___awdiv@dividend+1,f,c
  3611  001696  B0D8               	btfsc	status,0,c
  3612  001698  2A35               	incf	___awdiv@dividend+1,f,c
  3613  00169A  0E01               	movlw	1
  3614  00169C  1A39               	xorwf	___awdiv@sign,f,c
  3615  00169E                     l2819:
  3616  00169E  0E00               	movlw	0
  3617  0016A0  6E3B               	movwf	___awdiv@quotient+1,c
  3618  0016A2  0E00               	movlw	0
  3619  0016A4  6E3A               	movwf	___awdiv@quotient,c
  3620  0016A6  5036               	movf	___awdiv@divisor,w,c
  3621  0016A8  1037               	iorwf	___awdiv@divisor+1,w,c
  3622  0016AA  B4D8               	btfsc	status,2,c
  3623  0016AC  D01C               	goto	l2841
  3624  0016AE  0E01               	movlw	1
  3625  0016B0  6E38               	movwf	___awdiv@counter,c
  3626  0016B2  D004               	goto	l2827
  3627  0016B4                     l2825:
  3628  0016B4  90D8               	bcf	status,0,c
  3629  0016B6  3636               	rlcf	___awdiv@divisor,f,c
  3630  0016B8  3637               	rlcf	___awdiv@divisor+1,f,c
  3631  0016BA  2A38               	incf	___awdiv@counter,f,c
  3632  0016BC                     l2827:
  3633  0016BC  AE37               	btfss	___awdiv@divisor+1,7,c
  3634  0016BE  D7FA               	goto	l2825
  3635  0016C0                     l2829:
  3636  0016C0  90D8               	bcf	status,0,c
  3637  0016C2  363A               	rlcf	___awdiv@quotient,f,c
  3638  0016C4  363B               	rlcf	___awdiv@quotient+1,f,c
  3639  0016C6  5036               	movf	___awdiv@divisor,w,c
  3640  0016C8  5C34               	subwf	___awdiv@dividend,w,c
  3641  0016CA  5037               	movf	___awdiv@divisor+1,w,c
  3642  0016CC  5835               	subwfb	___awdiv@dividend+1,w,c
  3643  0016CE  A0D8               	btfss	status,0,c
  3644  0016D0  D005               	goto	l2837
  3645  0016D2  5036               	movf	___awdiv@divisor,w,c
  3646  0016D4  5E34               	subwf	___awdiv@dividend,f,c
  3647  0016D6  5037               	movf	___awdiv@divisor+1,w,c
  3648  0016D8  5A35               	subwfb	___awdiv@dividend+1,f,c
  3649  0016DA  803A               	bsf	___awdiv@quotient,0,c
  3650  0016DC                     l2837:
  3651  0016DC  90D8               	bcf	status,0,c
  3652  0016DE  3237               	rrcf	___awdiv@divisor+1,f,c
  3653  0016E0  3236               	rrcf	___awdiv@divisor,f,c
  3654  0016E2  2E38               	decfsz	___awdiv@counter,f,c
  3655  0016E4  D7ED               	goto	l2829
  3656  0016E6                     l2841:
  3657  0016E6  5039               	movf	___awdiv@sign,w,c
  3658  0016E8  B4D8               	btfsc	status,2,c
  3659  0016EA  D004               	goto	l2845
  3660  0016EC  6C3A               	negf	___awdiv@quotient,c
  3661  0016EE  1E3B               	comf	___awdiv@quotient+1,f,c
  3662  0016F0  B0D8               	btfsc	status,0,c
  3663  0016F2  2A3B               	incf	___awdiv@quotient+1,f,c
  3664  0016F4                     l2845:
  3665  0016F4  C03A  F034         	movff	___awdiv@quotient,?___awdiv
  3666  0016F8  C03B  F035         	movff	___awdiv@quotient+1,?___awdiv+1
  3667  0016FC  0012               	return	
  3668  0016FE                     __end_of___awdiv:
  3669                           	opt stack 0
  3670                           tblptru	equ	0xFF8
  3671                           tblptrh	equ	0xFF7
  3672                           tblptrl	equ	0xFF6
  3673                           tablat	equ	0xFF5
  3674                           prodh	equ	0xFF4
  3675                           prodl	equ	0xFF3
  3676                           intcon	equ	0xFF2
  3677                           intcon3	equ	0xFF0
  3678                           postinc0	equ	0xFEE
  3679                           wreg	equ	0xFE8
  3680                           indf2	equ	0xFDF
  3681                           fsr2h	equ	0xFDA
  3682                           fsr2l	equ	0xFD9
  3683                           status	equ	0xFD8
  3684                           
  3685 ;; *************** function _readADC *****************
  3686 ;; Defined at:
  3687 ;;		line 365 in file "../main.c"
  3688 ;; Parameters:    Size  Location     Type
  3689 ;;  channel         1    wreg     unsigned char 
  3690 ;; Auto vars:     Size  Location     Type
  3691 ;;  channel         1   51[COMRAM] unsigned char 
  3692 ;; Return value:  Size  Location     Type
  3693 ;;                  1    wreg      void 
  3694 ;; Registers used:
  3695 ;;		wreg, status,2, status,0
  3696 ;; Tracked objects:
  3697 ;;		On entry : 0/0
  3698 ;;		On exit  : 0/0
  3699 ;;		Unchanged: 0/0
  3700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3702 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3704 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3705 ;;Total ram usage:        1 bytes
  3706 ;; Hardware stack levels used:    1
  3707 ;; Hardware stack levels required when called:    5
  3708 ;; This function calls:
  3709 ;;		Nothing
  3710 ;; This function is called by:
  3711 ;;		_main
  3712 ;;		_isFluctuate
  3713 ;; This function uses a non-reentrant model
  3714 ;;
  3715                           
  3716                           	psect	text5
  3717  001C42                     __ptext5:
  3718                           	opt stack 0
  3719  001C42                     _readADC:
  3720                           	opt stack 25
  3721                           
  3722                           ;incstack = 0
  3723                           ;readADC@channel stored from wreg
  3724  001C42  6E34               	movwf	readADC@channel,c
  3725                           
  3726                           ;main.c: 367: ADCON0 = channel <<2;
  3727  001C44  4434               	rlncf	readADC@channel,w,c
  3728  001C46  46E8               	rlncf	wreg,f,c
  3729  001C48  0BFC               	andlw	252
  3730  001C4A  6EC2               	movwf	4034,c	;volatile
  3731                           
  3732                           ;main.c: 368: ADCON0bits.ADON = 1;
  3733  001C4C  80C2               	bsf	4034,0,c	;volatile
  3734                           
  3735                           ;main.c: 369: ADCON0bits.GO = 1;
  3736  001C4E  82C2               	bsf	4034,1,c	;volatile
  3737  001C50                     l333:
  3738  001C50  A2C2               	btfss	4034,1,c	;volatile
  3739  001C52  0012               	return	
  3740  001C54  D7FD               	goto	l333
  3741  001C56                     __end_of_readADC:
  3742                           	opt stack 0
  3743                           tblptru	equ	0xFF8
  3744                           tblptrh	equ	0xFF7
  3745                           tblptrl	equ	0xFF6
  3746                           tablat	equ	0xFF5
  3747                           prodh	equ	0xFF4
  3748                           prodl	equ	0xFF3
  3749                           intcon	equ	0xFF2
  3750                           intcon3	equ	0xFF0
  3751                           postinc0	equ	0xFEE
  3752                           wreg	equ	0xFE8
  3753                           indf2	equ	0xFDF
  3754                           fsr2h	equ	0xFDA
  3755                           fsr2l	equ	0xFD9
  3756                           status	equ	0xFD8
  3757                           
  3758 ;; *************** function _printf *****************
  3759 ;; Defined at:
  3760 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  3761 ;; Parameters:    Size  Location     Type
  3762 ;;  f               2    0[BANK0 ] PTR const unsigned char 
  3763 ;;		 -> STR_24(22), STR_23(17), STR_22(17), STR_21(17), 
  3764 ;;		 -> STR_20(23), STR_19(23), STR_18(21), STR_17(17), 
  3765 ;;		 -> STR_16(21), STR_15(17), STR_14(21), STR_13(17), 
  3766 ;;		 -> STR_12(19), STR_11(17), STR_10(19), STR_9(17), 
  3767 ;;		 -> STR_8(25), STR_7(17), STR_6(17), STR_5(17), 
  3768 ;;		 -> STR_4(17), STR_3(17), STR_2(17), STR_1(17), 
  3769 ;; Auto vars:     Size  Location     Type
  3770 ;;  idx             1    8[BANK0 ] unsigned char 
  3771 ;;  tmpval          4    0        struct .
  3772 ;;  cp              3    0        PTR const unsigned char 
  3773 ;;  width           2   15[BANK0 ] int 
  3774 ;;  val             2   12[BANK0 ] unsigned int 
  3775 ;;  ap              2    9[BANK0 ] PTR void [1]
  3776 ;;		 -> ?i2_printf(2), ?_printf(2), 
  3777 ;;  len             2    0        unsigned int 
  3778 ;;  c               1   17[BANK0 ] char 
  3779 ;;  flag            1   14[BANK0 ] unsigned char 
  3780 ;;  prec            1   11[BANK0 ] char 
  3781 ;; Return value:  Size  Location     Type
  3782 ;;                  2    0[BANK0 ] int 
  3783 ;; Registers used:
  3784 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3785 ;; Tracked objects:
  3786 ;;		On entry : 0/0
  3787 ;;		On exit  : 0/0
  3788 ;;		Unchanged: 0/0
  3789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3790 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3791 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3792 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3793 ;;      Totals:         4      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3794 ;;Total ram usage:       22 bytes
  3795 ;; Hardware stack levels used:    1
  3796 ;; Hardware stack levels required when called:    7
  3797 ;; This function calls:
  3798 ;;		___lwdiv
  3799 ;;		___lwmod
  3800 ;;		___wmul
  3801 ;;		_isdigit
  3802 ;;		_putch
  3803 ;; This function is called by:
  3804 ;;		_main
  3805 ;; This function uses a non-reentrant model
  3806 ;;
  3807                           
  3808                           	psect	text6
  3809  000BD6                     __ptext6:
  3810                           	opt stack 0
  3811  000BD6                     _printf:
  3812                           	opt stack 23
  3813                           
  3814                           ;doprnt.c: 466: va_list ap;
  3815                           ;doprnt.c: 499: signed char c;
  3816                           ;doprnt.c: 501: int width;
  3817                           ;doprnt.c: 506: signed char prec;
  3818                           ;doprnt.c: 508: unsigned char flag;
  3819                           ;doprnt.c: 523: union {
  3820                           ;doprnt.c: 524: unsigned long vd;
  3821                           ;doprnt.c: 525: double integ;
  3822                           ;doprnt.c: 526: } tmpval;
  3823                           ;doprnt.c: 528: unsigned int val;
  3824                           ;doprnt.c: 529: unsigned len;
  3825                           ;doprnt.c: 530: const char * cp;
  3826                           ;doprnt.c: 533: *ap = __va_start();
  3827                           
  3828                           ;incstack = 0
  3829  000BD6  0EA3               	movlw	low (?_printf+2)
  3830  000BD8  0100               	movlb	0	; () banked
  3831  000BDA  6FAA               	movwf	printf@ap& (0+255),b
  3832  000BDC  0E00               	movlw	high (?_printf+2)
  3833  000BDE  0100               	movlb	0	; () banked
  3834  000BE0  6FAB               	movwf	(printf@ap+1)& (0+255),b
  3835                           
  3836                           ;doprnt.c: 536: while(c = *f++) {
  3837  000BE2  D1B2               	goto	l4219
  3838  000BE4                     l4093:
  3839                           
  3840                           ; BSR set to: 0
  3841                           ;doprnt.c: 538: if(c != '%')
  3842  000BE4  0E25               	movlw	37
  3843  000BE6  0100               	movlb	0	; () banked
  3844  000BE8  19B2               	xorwf	printf@c& (0+255),w,b
  3845  000BEA  B4D8               	btfsc	status,2,c
  3846  000BEC  D005               	goto	l4097
  3847                           
  3848                           ; BSR set to: 0
  3849                           ;doprnt.c: 540: {
  3850                           ;doprnt.c: 541: (putch(c) );
  3851  000BEE  0100               	movlb	0	; () banked
  3852  000BF0  51B2               	movf	printf@c& (0+255),w,b
  3853  000BF2  EC34  F00E         	call	_putch
  3854                           
  3855                           ;doprnt.c: 542: continue;
  3856  000BF6  D1A8               	goto	l4219
  3857  000BF8                     l4097:
  3858                           
  3859                           ;doprnt.c: 543: }
  3860                           ;doprnt.c: 546: width = 0;
  3861  000BF8  0E00               	movlw	0
  3862  000BFA  0100               	movlb	0	; () banked
  3863  000BFC  6FB1               	movwf	(printf@width+1)& (0+255),b
  3864  000BFE  0E00               	movlw	0
  3865  000C00  6FB0               	movwf	printf@width& (0+255),b
  3866                           
  3867                           ;doprnt.c: 548: flag = 0;
  3868  000C02  0E00               	movlw	0
  3869  000C04  0100               	movlb	0	; () banked
  3870  000C06  6FAF               	movwf	printf@flag& (0+255),b
  3871                           
  3872                           ; BSR set to: 0
  3873                           ;doprnt.c: 551: switch(*f) {
  3874                           
  3875                           ;doprnt.c: 550: for(;;) {
  3876  000C08  D005               	goto	l4103
  3877  000C0A                     l4099:
  3878                           
  3879                           ;doprnt.c: 580: flag |= 0x04;
  3880  000C0A  0100               	movlb	0	; () banked
  3881  000C0C  85AF               	bsf	printf@flag& (0+255),2,b
  3882                           
  3883                           ;doprnt.c: 581: f++;
  3884  000C0E  0100               	movlb	0	; () banked
  3885  000C10  4BA1               	infsnz	printf@f& (0+255),f,b
  3886  000C12  2BA2               	incf	(printf@f+1)& (0+255),f,b
  3887  000C14                     l4103:
  3888  000C14  C0A1  FFF6         	movff	printf@f,tblptrl
  3889  000C18  C0A2  FFF7         	movff	printf@f+1,tblptrh
  3890  000C1C                     	if	0	;tblptru may be non-zero
  3891  000C1C                     	endif
  3892  000C1C                     	if	0	;tblptru may be non-zero
  3893  000C1C                     	endif
  3894  000C1C  0008               	tblrd		*
  3895  000C1E  50F5               	movf	tablat,w,c
  3896                           
  3897                           ; Switch size 1, requested type "space"
  3898                           ; Number of cases is 1, Range of values is 48 to 48
  3899                           ; switch strategies available:
  3900                           ; Name         Instructions Cycles
  3901                           ; simple_byte            4     3 (average)
  3902                           ;	Chosen strategy is simple_byte
  3903  000C20  0A30               	xorlw	48	; case 48
  3904  000C22  B4D8               	btfsc	status,2,c
  3905  000C24  D7F2               	goto	l4099
  3906                           
  3907                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  3908                           
  3909                           ;doprnt.c: 586: }
  3910                           
  3911                           ;doprnt.c: 585: break;
  3912  000C26  C0A1  FFF6         	movff	printf@f,tblptrl
  3913  000C2A  C0A2  FFF7         	movff	printf@f+1,tblptrh
  3914  000C2E                     	if	0	;tblptru may be non-zero
  3915  000C2E                     	endif
  3916  000C2E                     	if	0	;tblptru may be non-zero
  3917  000C2E                     	endif
  3918  000C2E  0008               	tblrd		*
  3919  000C30  50F5               	movf	tablat,w,c
  3920  000C32  EC03  F00E         	call	_isdigit
  3921  000C36  A0D8               	btfss	status,0,c
  3922  000C38  D03A               	goto	l4121
  3923                           
  3924                           ;doprnt.c: 598: width = 0;
  3925  000C3A  0E00               	movlw	0
  3926  000C3C  0100               	movlb	0	; () banked
  3927  000C3E  6FB1               	movwf	(printf@width+1)& (0+255),b
  3928  000C40  0E00               	movlw	0
  3929  000C42  6FB0               	movwf	printf@width& (0+255),b
  3930  000C44                     l4109:
  3931                           
  3932                           ;doprnt.c: 600: width *= 10;
  3933  000C44  C0B0  F034         	movff	printf@width,___wmul@multiplier
  3934  000C48  C0B1  F035         	movff	printf@width+1,___wmul@multiplier+1
  3935  000C4C  0E00               	movlw	0
  3936  000C4E  6E37               	movwf	___wmul@multiplicand+1,c
  3937  000C50  0E0A               	movlw	10
  3938  000C52  6E36               	movwf	___wmul@multiplicand,c
  3939  000C54  ECCA  F00D         	call	___wmul	;wreg free
  3940  000C58  C034  F0B0         	movff	?___wmul,printf@width
  3941  000C5C  C035  F0B1         	movff	?___wmul+1,printf@width+1
  3942                           
  3943                           ;doprnt.c: 601: width += *f++ - '0';
  3944  000C60  0ED0               	movlw	208
  3945  000C62  6E40               	movwf	??_printf& (0+255),c
  3946  000C64  0EFF               	movlw	255
  3947  000C66  6E41               	movwf	(??_printf+1)& (0+255),c
  3948  000C68  C0A1  FFF6         	movff	printf@f,tblptrl
  3949  000C6C  C0A2  FFF7         	movff	printf@f+1,tblptrh
  3950  000C70                     	if	0	;tblptru may be non-zero
  3951  000C70                     	endif
  3952  000C70                     	if	0	;tblptru may be non-zero
  3953  000C70                     	endif
  3954  000C70  0008               	tblrd		*
  3955  000C72  50F5               	movf	tablat,w,c
  3956  000C74  6E42               	movwf	(??_printf+2)& (0+255),c
  3957  000C76  6A43               	clrf	(??_printf+3)& (0+255),c
  3958  000C78  5040               	movf	??_printf,w,c
  3959  000C7A  2642               	addwf	??_printf+2,f,c
  3960  000C7C  5041               	movf	??_printf+1,w,c
  3961  000C7E  2243               	addwfc	??_printf+3,f,c
  3962  000C80  5042               	movf	??_printf+2,w,c
  3963  000C82  0100               	movlb	0	; () banked
  3964  000C84  27B0               	addwf	printf@width& (0+255),f,b
  3965  000C86  5043               	movf	??_printf+3,w,c
  3966  000C88  0100               	movlb	0	; () banked
  3967  000C8A  23B1               	addwfc	(printf@width+1)& (0+255),f,b
  3968                           
  3969                           ; BSR set to: 0
  3970  000C8C  0100               	movlb	0	; () banked
  3971  000C8E  4BA1               	infsnz	printf@f& (0+255),f,b
  3972  000C90  2BA2               	incf	(printf@f+1)& (0+255),f,b
  3973                           
  3974                           ; BSR set to: 0
  3975                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  3976  000C92  C0A1  FFF6         	movff	printf@f,tblptrl
  3977  000C96  C0A2  FFF7         	movff	printf@f+1,tblptrh
  3978  000C9A                     	if	0	;tblptru may be non-zero
  3979  000C9A                     	endif
  3980  000C9A                     	if	0	;tblptru may be non-zero
  3981  000C9A                     	endif
  3982  000C9A  0008               	tblrd		*
  3983  000C9C  50F5               	movf	tablat,w,c
  3984  000C9E  EC03  F00E         	call	_isdigit
  3985  000CA2  A0D8               	btfss	status,0,c
  3986  000CA4  D004               	goto	l4121
  3987  000CA6  D7CE               	goto	l4109
  3988  000CA8                     l4117:
  3989                           
  3990                           ;doprnt.c: 721: flag |= 0x80;
  3991  000CA8  0100               	movlb	0	; () banked
  3992  000CAA  8FAF               	bsf	printf@flag& (0+255),7,b
  3993                           
  3994                           ;doprnt.c: 723: break;
  3995  000CAC  D019               	goto	l455
  3996  000CAE                     l4121:
  3997  000CAE  C0A1  FFF6         	movff	printf@f,tblptrl
  3998  000CB2  C0A2  FFF7         	movff	printf@f+1,tblptrh
  3999  000CB6  0100               	movlb	0	; () banked
  4000  000CB8  4BA1               	infsnz	printf@f& (0+255),f,b
  4001  000CBA  2BA2               	incf	(printf@f+1)& (0+255),f,b
  4002  000CBC                     	if	0	;tblptru may be non-zero
  4003  000CBC                     	endif
  4004  000CBC                     	if	0	;tblptru may be non-zero
  4005  000CBC                     	endif
  4006  000CBC  0008               	tblrd		*
  4007  000CBE  CFF5 F0B2          	movff	tablat,printf@c
  4008  000CC2  0100               	movlb	0	; () banked
  4009  000CC4  51B2               	movf	printf@c& (0+255),w,b
  4010                           
  4011                           ; Switch size 1, requested type "space"
  4012                           ; Number of cases is 4, Range of values is 0 to 120
  4013                           ; switch strategies available:
  4014                           ; Name         Instructions Cycles
  4015                           ; simple_byte           13     7 (average)
  4016                           ;	Chosen strategy is simple_byte
  4017  000CC6  0A00               	xorlw	0	; case 0
  4018  000CC8  B4D8               	btfsc	status,2,c
  4019  000CCA  0012               	return	
  4020  000CCC  0A64               	xorlw	100	; case 100
  4021  000CCE  B4D8               	btfsc	status,2,c
  4022  000CD0  D007               	goto	l455
  4023  000CD2  0A0D               	xorlw	13	; case 105
  4024  000CD4  B4D8               	btfsc	status,2,c
  4025  000CD6  D004               	goto	l455
  4026  000CD8  0A11               	xorlw	17	; case 120
  4027  000CDA  B4D8               	btfsc	status,2,c
  4028  000CDC  D7E5               	goto	l4117
  4029  000CDE  D134               	goto	l4219
  4030  000CE0                     l455:
  4031                           
  4032                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  4033  000CE0  0100               	movlb	0	; () banked
  4034  000CE2  BFAF               	btfsc	printf@flag& (0+255),7,b
  4035  000CE4  D019               	goto	l4133
  4036                           
  4037                           ; BSR set to: 0
  4038                           ;doprnt.c: 1253: {
  4039                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4040  000CE6  C0AA  FFD9         	movff	printf@ap,fsr2l
  4041  000CEA  C0AB  FFDA         	movff	printf@ap+1,fsr2h
  4042  000CEE  CFDE F0AD          	movff	postinc2,printf@val
  4043  000CF2  CFDD F0AE          	movff	postdec2,printf@val+1
  4044                           
  4045                           ; BSR set to: 0
  4046  000CF6  0E02               	movlw	2
  4047  000CF8  0100               	movlb	0	; () banked
  4048  000CFA  27AA               	addwf	printf@ap& (0+255),f,b
  4049  000CFC  0E00               	movlw	0
  4050  000CFE  23AB               	addwfc	(printf@ap+1)& (0+255),f,b
  4051                           
  4052                           ; BSR set to: 0
  4053                           ;doprnt.c: 1261: if((int)val < 0) {
  4054  000D00  0100               	movlb	0	; () banked
  4055  000D02  AFAE               	btfss	(printf@val+1)& (0+255),7,b
  4056  000D04  D053               	goto	l4167
  4057                           
  4058                           ; BSR set to: 0
  4059                           ;doprnt.c: 1262: flag |= 0x03;
  4060  000D06  0E03               	movlw	3
  4061  000D08  0100               	movlb	0	; () banked
  4062  000D0A  13AF               	iorwf	printf@flag& (0+255),f,b
  4063                           
  4064                           ; BSR set to: 0
  4065                           ;doprnt.c: 1263: val = -val;
  4066  000D0C  0100               	movlb	0	; () banked
  4067  000D0E  6DAD               	negf	printf@val& (0+255),b
  4068  000D10  1FAE               	comf	(printf@val+1)& (0+255),f,b
  4069  000D12  B0D8               	btfsc	status,0,c
  4070  000D14  2BAE               	incf	(printf@val+1)& (0+255),f,b
  4071                           
  4072                           ; BSR set to: 0
  4073                           ;doprnt.c: 1264: }
  4074                           ;doprnt.c: 1266: }
  4075  000D16  D04A               	goto	l4167
  4076  000D18                     l4133:
  4077                           
  4078                           ; BSR set to: 0
  4079                           ;doprnt.c: 1268: else
  4080                           ;doprnt.c: 1273: {
  4081                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4082  000D18  C0AA  FFD9         	movff	printf@ap,fsr2l
  4083  000D1C  C0AB  FFDA         	movff	printf@ap+1,fsr2h
  4084  000D20  CFDE F0AD          	movff	postinc2,printf@val
  4085  000D24  CFDD F0AE          	movff	postdec2,printf@val+1
  4086                           
  4087                           ; BSR set to: 0
  4088  000D28  0E02               	movlw	2
  4089  000D2A  0100               	movlb	0	; () banked
  4090  000D2C  27AA               	addwf	printf@ap& (0+255),f,b
  4091  000D2E  0E00               	movlw	0
  4092  000D30  23AB               	addwfc	(printf@ap+1)& (0+255),f,b
  4093                           
  4094                           ; BSR set to: 0
  4095                           ;doprnt.c: 1287: }
  4096                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  4097  000D32  D03C               	goto	l4167
  4098  000D34                     l4137:
  4099                           
  4100                           ; BSR set to: 0
  4101                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4102  000D34  0E01               	movlw	1
  4103  000D36  0100               	movlb	0	; () banked
  4104  000D38  6FB2               	movwf	printf@c& (0+255),b
  4105  000D3A                     l4139:
  4106                           
  4107                           ; BSR set to: 0
  4108  000D3A  0E05               	movlw	5
  4109  000D3C  0100               	movlb	0	; () banked
  4110  000D3E  19B2               	xorwf	printf@c& (0+255),w,b
  4111  000D40  B4D8               	btfsc	status,2,c
  4112  000D42  D03D               	goto	l4169
  4113                           
  4114                           ; BSR set to: 0
  4115                           ;doprnt.c: 1306: if(val < dpowers[c])
  4116                           
  4117                           ; BSR set to: 0
  4118                           
  4119                           ; BSR set to: 0
  4120  000D44  0100               	movlb	0	; () banked
  4121  000D46  51B2               	movf	printf@c& (0+255),w,b
  4122  000D48  0D02               	mullw	2
  4123  000D4A  0E58               	movlw	low _dpowers
  4124  000D4C  24F3               	addwf	prodl,w,c
  4125  000D4E  6EF6               	movwf	tblptrl,c
  4126  000D50  0EFE               	movlw	high _dpowers
  4127  000D52  20F4               	addwfc	prodh,w,c
  4128  000D54  6EF7               	movwf	tblptrh,c
  4129  000D56                     	if	0	;There are less than 3 active tblptr bytes
  4130  000D56                     	endif
  4131  000D56  0009               	tblrd		*+
  4132  000D58  50F5               	movf	tablat,w,c
  4133  000D5A  0100               	movlb	0	; () banked
  4134  000D5C  5DAD               	subwf	printf@val& (0+255),w,b
  4135  000D5E  0009               	tblrd		*+
  4136  000D60  50F5               	movf	tablat,w,c
  4137  000D62  0100               	movlb	0	; () banked
  4138  000D64  59AE               	subwfb	(printf@val+1)& (0+255),w,b
  4139  000D66  A0D8               	btfss	status,0,c
  4140  000D68  D02A               	goto	l4169
  4141                           
  4142                           ; BSR set to: 0
  4143                           
  4144                           ; BSR set to: 0
  4145                           
  4146                           ; BSR set to: 0
  4147                           ;doprnt.c: 1307: break;
  4148  000D6A  0100               	movlb	0	; () banked
  4149  000D6C  2BB2               	incf	printf@c& (0+255),f,b
  4150  000D6E  D7E5               	goto	l4139
  4151  000D70                     l4151:
  4152                           
  4153                           ; BSR set to: 0
  4154                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  4155  000D70  0E01               	movlw	1
  4156  000D72  0100               	movlb	0	; () banked
  4157  000D74  6FB2               	movwf	printf@c& (0+255),b
  4158  000D76                     l4153:
  4159                           
  4160                           ; BSR set to: 0
  4161  000D76  0E04               	movlw	4
  4162  000D78  0100               	movlb	0	; () banked
  4163  000D7A  19B2               	xorwf	printf@c& (0+255),w,b
  4164  000D7C  B4D8               	btfsc	status,2,c
  4165  000D7E  D01F               	goto	l4169
  4166                           
  4167                           ; BSR set to: 0
  4168                           ;doprnt.c: 1317: if(val < hexpowers[c])
  4169                           
  4170                           ; BSR set to: 0
  4171                           
  4172                           ; BSR set to: 0
  4173  000D80  0100               	movlb	0	; () banked
  4174  000D82  51B2               	movf	printf@c& (0+255),w,b
  4175  000D84  0D02               	mullw	2
  4176  000D86  0E62               	movlw	low _hexpowers
  4177  000D88  24F3               	addwf	prodl,w,c
  4178  000D8A  6EF6               	movwf	tblptrl,c
  4179  000D8C  0EFE               	movlw	high _hexpowers
  4180  000D8E  20F4               	addwfc	prodh,w,c
  4181  000D90  6EF7               	movwf	tblptrh,c
  4182  000D92                     	if	0	;There are less than 3 active tblptr bytes
  4183  000D92                     	endif
  4184  000D92  0009               	tblrd		*+
  4185  000D94  50F5               	movf	tablat,w,c
  4186  000D96  0100               	movlb	0	; () banked
  4187  000D98  5DAD               	subwf	printf@val& (0+255),w,b
  4188  000D9A  0009               	tblrd		*+
  4189  000D9C  50F5               	movf	tablat,w,c
  4190  000D9E  0100               	movlb	0	; () banked
  4191  000DA0  59AE               	subwfb	(printf@val+1)& (0+255),w,b
  4192  000DA2  A0D8               	btfss	status,0,c
  4193  000DA4  D00C               	goto	l4169
  4194                           
  4195                           ; BSR set to: 0
  4196                           
  4197                           ; BSR set to: 0
  4198                           
  4199                           ; BSR set to: 0
  4200                           ;doprnt.c: 1318: break;
  4201  000DA6  0100               	movlb	0	; () banked
  4202  000DA8  2BB2               	incf	printf@c& (0+255),f,b
  4203  000DAA  D7E5               	goto	l4153
  4204  000DAC                     l4167:
  4205                           
  4206                           ; BSR set to: 0
  4207  000DAC  0100               	movlb	0	; () banked
  4208  000DAE  51AF               	movf	printf@flag& (0+255),w,b
  4209  000DB0  0B80               	andlw	128
  4210                           
  4211                           ; Switch size 1, requested type "space"
  4212                           ; Number of cases is 2, Range of values is 0 to 128
  4213                           ; switch strategies available:
  4214                           ; Name         Instructions Cycles
  4215                           ; simple_byte            7     4 (average)
  4216                           ;	Chosen strategy is simple_byte
  4217  000DB2  0A00               	xorlw	0	; case 0
  4218  000DB4  B4D8               	btfsc	status,2,c
  4219  000DB6  D7BE               	goto	l4137
  4220  000DB8  0A80               	xorlw	128	; case 128
  4221  000DBA  B4D8               	btfsc	status,2,c
  4222  000DBC  D7D9               	goto	l4151
  4223  000DBE                     l4169:
  4224                           
  4225                           ; BSR set to: 0
  4226                           ;doprnt.c: 1345: if(width && flag & 0x03)
  4227  000DBE  0100               	movlb	0	; () banked
  4228  000DC0  51B0               	movf	printf@width& (0+255),w,b
  4229  000DC2  0100               	movlb	0	; () banked
  4230  000DC4  11B1               	iorwf	(printf@width+1)& (0+255),w,b
  4231  000DC6  B4D8               	btfsc	status,2,c
  4232  000DC8  D00A               	goto	l4175
  4233                           
  4234                           ; BSR set to: 0
  4235  000DCA  C0AF  F040         	movff	printf@flag,??_printf
  4236  000DCE  0E03               	movlw	3
  4237  000DD0  1640               	andwf	??_printf,f,c
  4238  000DD2  B4D8               	btfsc	status,2,c
  4239  000DD4  D004               	goto	l4175
  4240                           
  4241                           ; BSR set to: 0
  4242                           ;doprnt.c: 1346: width--;
  4243  000DD6  0100               	movlb	0	; () banked
  4244  000DD8  07B0               	decf	printf@width& (0+255),f,b
  4245  000DDA  A0D8               	btfss	status,0,c
  4246  000DDC  07B1               	decf	(printf@width+1)& (0+255),f,b
  4247  000DDE                     l4175:
  4248                           
  4249                           ; BSR set to: 0
  4250                           ;doprnt.c: 1381: if(width > c)
  4251  000DDE  0E80               	movlw	128
  4252  000DE0  0100               	movlb	0	; () banked
  4253  000DE2  BFB2               	btfsc	printf@c& (0+255),7,b
  4254  000DE4  0E7F               	movlw	127
  4255  000DE6  6E40               	movwf	??_printf& (0+255),c
  4256  000DE8  0100               	movlb	0	; () banked
  4257  000DEA  51B0               	movf	printf@width& (0+255),w,b
  4258  000DEC  0100               	movlb	0	; () banked
  4259  000DEE  5DB2               	subwf	printf@c& (0+255),w,b
  4260  000DF0  0100               	movlb	0	; () banked
  4261  000DF2  51B1               	movf	(printf@width+1)& (0+255),w,b
  4262  000DF4  0A80               	xorlw	128
  4263  000DF6  5840               	subwfb	??_printf& (0+255),w,c
  4264  000DF8  B0D8               	btfsc	status,0,c
  4265  000DFA  D00B               	goto	l4179
  4266                           
  4267                           ; BSR set to: 0
  4268                           ;doprnt.c: 1382: width -= c;
  4269  000DFC  0100               	movlb	0	; () banked
  4270  000DFE  51B2               	movf	printf@c& (0+255),w,b
  4271  000E00  0100               	movlb	0	; () banked
  4272  000E02  5FB0               	subwf	printf@width& (0+255),f,b
  4273  000E04  0E00               	movlw	0
  4274  000E06  0100               	movlb	0	; () banked
  4275  000E08  BFB2               	btfsc	printf@c& (0+255),7,b
  4276  000E0A  0EFF               	movlw	255
  4277  000E0C  0100               	movlb	0	; () banked
  4278  000E0E  5BB1               	subwfb	(printf@width+1)& (0+255),f,b
  4279  000E10  D005               	goto	l4181
  4280  000E12                     l4179:
  4281                           
  4282                           ; BSR set to: 0
  4283                           ;doprnt.c: 1383: else
  4284                           ;doprnt.c: 1384: width = 0;
  4285  000E12  0E00               	movlw	0
  4286  000E14  0100               	movlb	0	; () banked
  4287  000E16  6FB1               	movwf	(printf@width+1)& (0+255),b
  4288  000E18  0E00               	movlw	0
  4289  000E1A  6FB0               	movwf	printf@width& (0+255),b
  4290  000E1C                     l4181:
  4291                           
  4292                           ; BSR set to: 0
  4293                           ;doprnt.c: 1387: if(flag & 0x04) {
  4294  000E1C  0100               	movlb	0	; () banked
  4295  000E1E  A5AF               	btfss	printf@flag& (0+255),2,b
  4296  000E20  D017               	goto	l4193
  4297                           
  4298                           ; BSR set to: 0
  4299                           ;doprnt.c: 1392: if(flag & 0x03)
  4300  000E22  C0AF  F040         	movff	printf@flag,??_printf
  4301  000E26  0E03               	movlw	3
  4302  000E28  1640               	andwf	??_printf,f,c
  4303  000E2A  B4D8               	btfsc	status,2,c
  4304  000E2C  D003               	goto	l4187
  4305                           
  4306                           ; BSR set to: 0
  4307                           ;doprnt.c: 1393: (putch('-') );
  4308  000E2E  0E2D               	movlw	45
  4309  000E30  EC34  F00E         	call	_putch
  4310  000E34                     l4187:
  4311                           
  4312                           ;doprnt.c: 1415: if(width)
  4313  000E34  0100               	movlb	0	; () banked
  4314  000E36  51B0               	movf	printf@width& (0+255),w,b
  4315  000E38  0100               	movlb	0	; () banked
  4316  000E3A  11B1               	iorwf	(printf@width+1)& (0+255),w,b
  4317  000E3C  B4D8               	btfsc	status,2,c
  4318  000E3E  D024               	goto	l4203
  4319                           
  4320                           ; BSR set to: 0
  4321                           ;doprnt.c: 1417: (putch('0') );
  4322                           
  4323                           ; BSR set to: 0
  4324                           
  4325                           ;doprnt.c: 1416: do
  4326  000E40  0E30               	movlw	48
  4327  000E42  EC34  F00E         	call	_putch
  4328                           
  4329                           ;doprnt.c: 1418: while(--width);
  4330  000E46  0100               	movlb	0	; () banked
  4331  000E48  07B0               	decf	printf@width& (0+255),f,b
  4332  000E4A  A0D8               	btfss	status,0,c
  4333  000E4C  07B1               	decf	(printf@width+1)& (0+255),f,b
  4334  000E4E  D7F2               	goto	l4187
  4335  000E50                     l4193:
  4336                           
  4337                           ; BSR set to: 0
  4338                           ;doprnt.c: 1422: {
  4339                           ;doprnt.c: 1424: if(width
  4340                           ;doprnt.c: 1428: )
  4341  000E50  0100               	movlb	0	; () banked
  4342  000E52  51B0               	movf	printf@width& (0+255),w,b
  4343  000E54  0100               	movlb	0	; () banked
  4344  000E56  11B1               	iorwf	(printf@width+1)& (0+255),w,b
  4345  000E58  B4D8               	btfsc	status,2,c
  4346  000E5A  D00D               	goto	l4199
  4347  000E5C                     l4195:
  4348                           
  4349                           ; BSR set to: 0
  4350                           ;doprnt.c: 1430: (putch(' ') );
  4351  000E5C  0E20               	movlw	32
  4352  000E5E  EC34  F00E         	call	_putch
  4353                           
  4354                           ;doprnt.c: 1431: while(--width);
  4355  000E62  0100               	movlb	0	; () banked
  4356  000E64  07B0               	decf	printf@width& (0+255),f,b
  4357  000E66  A0D8               	btfss	status,0,c
  4358  000E68  07B1               	decf	(printf@width+1)& (0+255),f,b
  4359  000E6A  0100               	movlb	0	; () banked
  4360  000E6C  51B0               	movf	printf@width& (0+255),w,b
  4361  000E6E  0100               	movlb	0	; () banked
  4362  000E70  11B1               	iorwf	(printf@width+1)& (0+255),w,b
  4363  000E72  A4D8               	btfss	status,2,c
  4364  000E74  D7F3               	goto	l4195
  4365  000E76                     l4199:
  4366                           
  4367                           ; BSR set to: 0
  4368                           ;doprnt.c: 1438: if(flag & 0x03)
  4369  000E76  C0AF  F040         	movff	printf@flag,??_printf
  4370  000E7A  0E03               	movlw	3
  4371  000E7C  1640               	andwf	??_printf,f,c
  4372  000E7E  B4D8               	btfsc	status,2,c
  4373  000E80  D003               	goto	l4203
  4374                           
  4375                           ; BSR set to: 0
  4376                           ;doprnt.c: 1439: (putch('-') );
  4377  000E82  0E2D               	movlw	45
  4378  000E84  EC34  F00E         	call	_putch
  4379  000E88                     l4203:
  4380                           
  4381                           ;doprnt.c: 1469: }
  4382                           ;doprnt.c: 1472: prec = c;
  4383  000E88  C0B2  F0AC         	movff	printf@c,printf@prec
  4384                           
  4385                           ;doprnt.c: 1474: while(prec--) {
  4386  000E8C  D057               	goto	l4217
  4387  000E8E                     l4205:
  4388                           
  4389                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4390  000E8E  0100               	movlb	0	; () banked
  4391  000E90  51AC               	movf	printf@prec& (0+255),w,b
  4392  000E92  0D02               	mullw	2
  4393  000E94  0E58               	movlw	low _dpowers
  4394  000E96  24F3               	addwf	prodl,w,c
  4395  000E98  6EF6               	movwf	tblptrl,c
  4396  000E9A  0EFE               	movlw	high _dpowers
  4397  000E9C  20F4               	addwfc	prodh,w,c
  4398  000E9E  6EF7               	movwf	tblptrh,c
  4399  000EA0                     	if	0	;There are less than 3 active tblptr bytes
  4400  000EA0                     	endif
  4401  000EA0  0009               	tblrd		*+
  4402  000EA2  CFF5 F036          	movff	tablat,___lwdiv@divisor
  4403  000EA6  000A               	tblrd		*-
  4404  000EA8  CFF5 F037          	movff	tablat,___lwdiv@divisor+1
  4405  000EAC  C0AD  F034         	movff	printf@val,___lwdiv@dividend
  4406  000EB0  C0AE  F035         	movff	printf@val+1,___lwdiv@dividend+1
  4407  000EB4  ECA0  F00C         	call	___lwdiv	;wreg free
  4408  000EB8  C034  F03B         	movff	?___lwdiv,___lwmod@dividend
  4409  000EBC  C035  F03C         	movff	?___lwdiv+1,___lwmod@dividend+1
  4410  000EC0  0E00               	movlw	0
  4411  000EC2  6E3E               	movwf	___lwmod@divisor+1,c
  4412  000EC4  0E0A               	movlw	10
  4413  000EC6  6E3D               	movwf	___lwmod@divisor,c
  4414  000EC8  EC88  F00D         	call	___lwmod	;wreg free
  4415  000ECC  503B               	movf	?___lwmod,w,c
  4416  000ECE  0F30               	addlw	48
  4417  000ED0  0100               	movlb	0	; () banked
  4418  000ED2  6FB2               	movwf	printf@c& (0+255),b
  4419                           
  4420                           ;doprnt.c: 1491: break;
  4421  000ED4  D02F               	goto	l4215
  4422  000ED6                     l4207:
  4423                           
  4424                           ; BSR set to: 0
  4425                           ;doprnt.c: 1499: {
  4426                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  4427  000ED6  C0AD  F034         	movff	printf@val,___lwdiv@dividend
  4428  000EDA  C0AE  F035         	movff	printf@val+1,___lwdiv@dividend+1
  4429  000EDE  0100               	movlb	0	; () banked
  4430  000EE0  51AC               	movf	printf@prec& (0+255),w,b
  4431  000EE2  0D02               	mullw	2
  4432  000EE4  0E62               	movlw	low _hexpowers
  4433  000EE6  24F3               	addwf	prodl,w,c
  4434  000EE8  6EF6               	movwf	tblptrl,c
  4435  000EEA  0EFE               	movlw	high _hexpowers
  4436  000EEC  20F4               	addwfc	prodh,w,c
  4437  000EEE  6EF7               	movwf	tblptrh,c
  4438  000EF0                     	if	0	;There are less than 3 active tblptr bytes
  4439  000EF0                     	endif
  4440  000EF0  0009               	tblrd		*+
  4441  000EF2  CFF5 F036          	movff	tablat,___lwdiv@divisor
  4442  000EF6  000A               	tblrd		*-
  4443  000EF8  CFF5 F037          	movff	tablat,___lwdiv@divisor+1
  4444  000EFC  ECA0  F00C         	call	___lwdiv	;wreg free
  4445  000F00  5034               	movf	?___lwdiv,w,c
  4446  000F02  0B0F               	andlw	15
  4447  000F04  0100               	movlb	0	; () banked
  4448  000F06  6FA9               	movwf	printf@idx& (0+255),b
  4449                           
  4450                           ; BSR set to: 0
  4451                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  4452  000F08  0100               	movlb	0	; () banked
  4453  000F0A  51A9               	movf	printf@idx& (0+255),w,b
  4454  000F0C  0D01               	mullw	1
  4455  000F0E  0EEF               	movlw	low STR_25
  4456  000F10  24F3               	addwf	prodl,w,c
  4457  000F12  6EF6               	movwf	tblptrl,c
  4458  000F14  0EFE               	movlw	high STR_25
  4459  000F16  20F4               	addwfc	prodh,w,c
  4460  000F18  6EF7               	movwf	tblptrh,c
  4461  000F1A                     	if	0	;There are less than 3 active tblptr bytes
  4462  000F1A                     	endif
  4463  000F1A  0008               	tblrd		*
  4464  000F1C  CFF5 F0B2          	movff	tablat,printf@c
  4465                           
  4466                           ; BSR set to: 0
  4467                           ;doprnt.c: 1523: }
  4468                           
  4469                           ;doprnt.c: 1508: }
  4470                           ;doprnt.c: 1510: break;
  4471  000F20  D009               	goto	l4215
  4472  000F22                     l4213:
  4473  000F22  0100               	movlb	0	; () banked
  4474  000F24  51AF               	movf	printf@flag& (0+255),w,b
  4475  000F26  0B80               	andlw	128
  4476                           
  4477                           ; Switch size 1, requested type "space"
  4478                           ; Number of cases is 2, Range of values is 0 to 128
  4479                           ; switch strategies available:
  4480                           ; Name         Instructions Cycles
  4481                           ; simple_byte            7     4 (average)
  4482                           ;	Chosen strategy is simple_byte
  4483  000F28  0A00               	xorlw	0	; case 0
  4484  000F2A  B4D8               	btfsc	status,2,c
  4485  000F2C  D7B0               	goto	l4205
  4486  000F2E  0A80               	xorlw	128	; case 128
  4487  000F30  B4D8               	btfsc	status,2,c
  4488  000F32  D7D1               	goto	l4207
  4489  000F34                     l4215:
  4490                           
  4491                           ; BSR set to: 0
  4492                           ;doprnt.c: 1524: (putch(c) );
  4493  000F34  0100               	movlb	0	; () banked
  4494  000F36  51B2               	movf	printf@c& (0+255),w,b
  4495  000F38  EC34  F00E         	call	_putch
  4496  000F3C                     l4217:
  4497  000F3C  0100               	movlb	0	; () banked
  4498  000F3E  07AC               	decf	printf@prec& (0+255),f,b
  4499  000F40  0100               	movlb	0	; () banked
  4500  000F42  29AC               	incf	printf@prec& (0+255),w,b
  4501  000F44  A4D8               	btfss	status,2,c
  4502  000F46  D7ED               	goto	l4213
  4503  000F48                     l4219:
  4504  000F48  C0A1  FFF6         	movff	printf@f,tblptrl
  4505  000F4C  C0A2  FFF7         	movff	printf@f+1,tblptrh
  4506  000F50  0100               	movlb	0	; () banked
  4507  000F52  4BA1               	infsnz	printf@f& (0+255),f,b
  4508  000F54  2BA2               	incf	(printf@f+1)& (0+255),f,b
  4509  000F56                     	if	0	;tblptru may be non-zero
  4510  000F56                     	endif
  4511  000F56                     	if	0	;tblptru may be non-zero
  4512  000F56                     	endif
  4513  000F56  0008               	tblrd		*
  4514  000F58  CFF5 F0B2          	movff	tablat,printf@c
  4515  000F5C  0100               	movlb	0	; () banked
  4516  000F5E  51B2               	movf	printf@c& (0+255),w,b
  4517  000F60  B4D8               	btfsc	status,2,c
  4518  000F62  0012               	return	
  4519  000F64  D63F               	goto	l4093
  4520  000F66                     __end_of_printf:
  4521                           	opt stack 0
  4522                           tblptru	equ	0xFF8
  4523                           tblptrh	equ	0xFF7
  4524                           tblptrl	equ	0xFF6
  4525                           tablat	equ	0xFF5
  4526                           prodh	equ	0xFF4
  4527                           prodl	equ	0xFF3
  4528                           intcon	equ	0xFF2
  4529                           intcon3	equ	0xFF0
  4530                           postinc0	equ	0xFEE
  4531                           wreg	equ	0xFE8
  4532                           indf2	equ	0xFDF
  4533                           postinc2	equ	0xFDE
  4534                           postdec2	equ	0xFDD
  4535                           fsr2h	equ	0xFDA
  4536                           fsr2l	equ	0xFD9
  4537                           status	equ	0xFD8
  4538                           
  4539 ;; *************** function _putch *****************
  4540 ;; Defined at:
  4541 ;;		line 23 in file "../lcd.c"
  4542 ;; Parameters:    Size  Location     Type
  4543 ;;  data            1    wreg     unsigned char 
  4544 ;; Auto vars:     Size  Location     Type
  4545 ;;  data            1   53[COMRAM] unsigned char 
  4546 ;; Return value:  Size  Location     Type
  4547 ;;                  1    wreg      void 
  4548 ;; Registers used:
  4549 ;;		wreg, status,2, status,0, cstack
  4550 ;; Tracked objects:
  4551 ;;		On entry : 0/0
  4552 ;;		On exit  : 0/0
  4553 ;;		Unchanged: 0/0
  4554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4555 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4556 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4557 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4558 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4559 ;;Total ram usage:        1 bytes
  4560 ;; Hardware stack levels used:    1
  4561 ;; Hardware stack levels required when called:    6
  4562 ;; This function calls:
  4563 ;;		_lcdNibble
  4564 ;; This function is called by:
  4565 ;;		_printf
  4566 ;; This function uses a non-reentrant model
  4567 ;;
  4568                           
  4569                           	psect	text7
  4570  001C68                     __ptext7:
  4571                           	opt stack 0
  4572  001C68                     _putch:
  4573                           	opt stack 23
  4574                           
  4575                           ;incstack = 0
  4576                           ;putch@data stored from wreg
  4577  001C68  6E36               	movwf	putch@data,c
  4578                           
  4579                           ;lcd.c: 24: LATDbits.LATD2 = 1;
  4580  001C6A  848C               	bsf	3980,2,c	;volatile
  4581                           
  4582                           ;lcd.c: 25: lcdNibble(data);
  4583  001C6C  5036               	movf	putch@data,w,c
  4584  001C6E  ECF2  F00C         	call	_lcdNibble
  4585  001C72  0012               	return		;funcret
  4586  001C74                     __end_of_putch:
  4587                           	opt stack 0
  4588                           tblptru	equ	0xFF8
  4589                           tblptrh	equ	0xFF7
  4590                           tblptrl	equ	0xFF6
  4591                           tablat	equ	0xFF5
  4592                           prodh	equ	0xFF4
  4593                           prodl	equ	0xFF3
  4594                           intcon	equ	0xFF2
  4595                           intcon3	equ	0xFF0
  4596                           postinc0	equ	0xFEE
  4597                           wreg	equ	0xFE8
  4598                           indf2	equ	0xFDF
  4599                           postinc2	equ	0xFDE
  4600                           postdec2	equ	0xFDD
  4601                           fsr2h	equ	0xFDA
  4602                           fsr2l	equ	0xFD9
  4603                           status	equ	0xFD8
  4604                           
  4605 ;; *************** function _isdigit *****************
  4606 ;; Defined at:
  4607 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  4608 ;; Parameters:    Size  Location     Type
  4609 ;;  c               1    wreg     unsigned char 
  4610 ;; Auto vars:     Size  Location     Type
  4611 ;;  c               1   53[COMRAM] unsigned char 
  4612 ;; Return value:  Size  Location     Type
  4613 ;;		None               void
  4614 ;; Registers used:
  4615 ;;		wreg, status,2, status,0
  4616 ;; Tracked objects:
  4617 ;;		On entry : 0/0
  4618 ;;		On exit  : 0/0
  4619 ;;		Unchanged: 0/0
  4620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4621 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4622 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4623 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4624 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4625 ;;Total ram usage:        3 bytes
  4626 ;; Hardware stack levels used:    1
  4627 ;; Hardware stack levels required when called:    5
  4628 ;; This function calls:
  4629 ;;		Nothing
  4630 ;; This function is called by:
  4631 ;;		_printf
  4632 ;; This function uses a non-reentrant model
  4633 ;;
  4634                           
  4635                           	psect	text8
  4636  001C06                     __ptext8:
  4637                           	opt stack 0
  4638  001C06                     _isdigit:
  4639                           	opt stack 24
  4640                           
  4641                           ;incstack = 0
  4642                           ;isdigit@c stored from wreg
  4643  001C06  6E36               	movwf	isdigit@c,c
  4644  001C08  0E00               	movlw	0
  4645  001C0A  6E35               	movwf	_isdigit$935,c
  4646  001C0C  0E3A               	movlw	58
  4647  001C0E  6036               	cpfslt	isdigit@c,c
  4648  001C10  D005               	goto	l2795
  4649  001C12  0E2F               	movlw	47
  4650  001C14  6436               	cpfsgt	isdigit@c,c
  4651  001C16  D002               	goto	l2795
  4652  001C18  0E01               	movlw	1
  4653  001C1A  6E35               	movwf	_isdigit$935,c
  4654  001C1C                     l2795:
  4655  001C1C  C035  F034         	movff	_isdigit$935,??_isdigit
  4656  001C20  3034               	rrcf	??_isdigit,w,c
  4657  001C22  0012               	return	
  4658  001C24                     __end_of_isdigit:
  4659                           	opt stack 0
  4660                           tblptru	equ	0xFF8
  4661                           tblptrh	equ	0xFF7
  4662                           tblptrl	equ	0xFF6
  4663                           tablat	equ	0xFF5
  4664                           prodh	equ	0xFF4
  4665                           prodl	equ	0xFF3
  4666                           intcon	equ	0xFF2
  4667                           intcon3	equ	0xFF0
  4668                           postinc0	equ	0xFEE
  4669                           wreg	equ	0xFE8
  4670                           indf2	equ	0xFDF
  4671                           postinc2	equ	0xFDE
  4672                           postdec2	equ	0xFDD
  4673                           fsr2h	equ	0xFDA
  4674                           fsr2l	equ	0xFD9
  4675                           status	equ	0xFD8
  4676                           
  4677 ;; *************** function ___wmul *****************
  4678 ;; Defined at:
  4679 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  4680 ;; Parameters:    Size  Location     Type
  4681 ;;  multiplier      2   51[COMRAM] unsigned int 
  4682 ;;  multiplicand    2   53[COMRAM] unsigned int 
  4683 ;; Auto vars:     Size  Location     Type
  4684 ;;  product         2   55[COMRAM] unsigned int 
  4685 ;; Return value:  Size  Location     Type
  4686 ;;                  2   51[COMRAM] unsigned int 
  4687 ;; Registers used:
  4688 ;;		wreg, status,2, status,0, prodl, prodh
  4689 ;; Tracked objects:
  4690 ;;		On entry : 0/0
  4691 ;;		On exit  : 0/0
  4692 ;;		Unchanged: 0/0
  4693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4694 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4695 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4696 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4697 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4698 ;;Total ram usage:        6 bytes
  4699 ;; Hardware stack levels used:    1
  4700 ;; Hardware stack levels required when called:    5
  4701 ;; This function calls:
  4702 ;;		Nothing
  4703 ;; This function is called by:
  4704 ;;		_printf
  4705 ;; This function uses a non-reentrant model
  4706 ;;
  4707                           
  4708                           	psect	text9
  4709  001B94                     __ptext9:
  4710                           	opt stack 0
  4711  001B94                     ___wmul:
  4712                           	opt stack 24
  4713                           
  4714                           ;incstack = 0
  4715  001B94  5034               	movf	___wmul@multiplier,w,c
  4716  001B96  0236               	mulwf	___wmul@multiplicand,c
  4717  001B98  CFF3 F038          	movff	prodl,___wmul@product
  4718  001B9C  CFF4 F039          	movff	prodh,___wmul@product+1
  4719  001BA0  5034               	movf	___wmul@multiplier,w,c
  4720  001BA2  0237               	mulwf	___wmul@multiplicand+1,c
  4721  001BA4  50F3               	movf	prodl,w,c
  4722  001BA6  2639               	addwf	___wmul@product+1,f,c
  4723  001BA8  5035               	movf	___wmul@multiplier+1,w,c
  4724  001BAA  0236               	mulwf	___wmul@multiplicand,c
  4725  001BAC  50F3               	movf	prodl,w,c
  4726  001BAE  2639               	addwf	___wmul@product+1,f,c
  4727  001BB0  C038  F034         	movff	___wmul@product,?___wmul
  4728  001BB4  C039  F035         	movff	___wmul@product+1,?___wmul+1
  4729  001BB8  0012               	return	
  4730  001BBA                     __end_of___wmul:
  4731                           	opt stack 0
  4732                           tblptru	equ	0xFF8
  4733                           tblptrh	equ	0xFF7
  4734                           tblptrl	equ	0xFF6
  4735                           tablat	equ	0xFF5
  4736                           prodh	equ	0xFF4
  4737                           prodl	equ	0xFF3
  4738                           intcon	equ	0xFF2
  4739                           intcon3	equ	0xFF0
  4740                           postinc0	equ	0xFEE
  4741                           wreg	equ	0xFE8
  4742                           indf2	equ	0xFDF
  4743                           postinc2	equ	0xFDE
  4744                           postdec2	equ	0xFDD
  4745                           fsr2h	equ	0xFDA
  4746                           fsr2l	equ	0xFD9
  4747                           status	equ	0xFD8
  4748                           
  4749 ;; *************** function ___lwmod *****************
  4750 ;; Defined at:
  4751 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  4752 ;; Parameters:    Size  Location     Type
  4753 ;;  dividend        2   58[COMRAM] unsigned int 
  4754 ;;  divisor         2   60[COMRAM] unsigned int 
  4755 ;; Auto vars:     Size  Location     Type
  4756 ;;  counter         1   62[COMRAM] unsigned char 
  4757 ;; Return value:  Size  Location     Type
  4758 ;;                  2   58[COMRAM] unsigned int 
  4759 ;; Registers used:
  4760 ;;		wreg, status,2, status,0
  4761 ;; Tracked objects:
  4762 ;;		On entry : 0/0
  4763 ;;		On exit  : 0/0
  4764 ;;		Unchanged: 0/0
  4765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4766 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4767 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4768 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4769 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4770 ;;Total ram usage:        5 bytes
  4771 ;; Hardware stack levels used:    1
  4772 ;; Hardware stack levels required when called:    5
  4773 ;; This function calls:
  4774 ;;		Nothing
  4775 ;; This function is called by:
  4776 ;;		_printf
  4777 ;; This function uses a non-reentrant model
  4778 ;;
  4779                           
  4780                           	psect	text10
  4781  001B10                     __ptext10:
  4782                           	opt stack 0
  4783  001B10                     ___lwmod:
  4784                           	opt stack 24
  4785                           
  4786                           ;incstack = 0
  4787  001B10  503D               	movf	___lwmod@divisor,w,c
  4788  001B12  103E               	iorwf	___lwmod@divisor+1,w,c
  4789  001B14  B4D8               	btfsc	status,2,c
  4790  001B16  D018               	goto	l910
  4791  001B18  0E01               	movlw	1
  4792  001B1A  6E3F               	movwf	___lwmod@counter,c
  4793  001B1C  D004               	goto	l2935
  4794  001B1E                     l2933:
  4795  001B1E  90D8               	bcf	status,0,c
  4796  001B20  363D               	rlcf	___lwmod@divisor,f,c
  4797  001B22  363E               	rlcf	___lwmod@divisor+1,f,c
  4798  001B24  2A3F               	incf	___lwmod@counter,f,c
  4799  001B26                     l2935:
  4800  001B26  AE3E               	btfss	___lwmod@divisor+1,7,c
  4801  001B28  D7FA               	goto	l2933
  4802  001B2A                     l2937:
  4803  001B2A  503D               	movf	___lwmod@divisor,w,c
  4804  001B2C  5C3B               	subwf	___lwmod@dividend,w,c
  4805  001B2E  503E               	movf	___lwmod@divisor+1,w,c
  4806  001B30  583C               	subwfb	___lwmod@dividend+1,w,c
  4807  001B32  A0D8               	btfss	status,0,c
  4808  001B34  D004               	goto	l2941
  4809  001B36  503D               	movf	___lwmod@divisor,w,c
  4810  001B38  5E3B               	subwf	___lwmod@dividend,f,c
  4811  001B3A  503E               	movf	___lwmod@divisor+1,w,c
  4812  001B3C  5A3C               	subwfb	___lwmod@dividend+1,f,c
  4813  001B3E                     l2941:
  4814  001B3E  90D8               	bcf	status,0,c
  4815  001B40  323E               	rrcf	___lwmod@divisor+1,f,c
  4816  001B42  323D               	rrcf	___lwmod@divisor,f,c
  4817  001B44  2E3F               	decfsz	___lwmod@counter,f,c
  4818  001B46  D7F1               	goto	l2937
  4819  001B48                     l910:
  4820  001B48  C03B  F03B         	movff	___lwmod@dividend,?___lwmod
  4821  001B4C  C03C  F03C         	movff	___lwmod@dividend+1,?___lwmod+1
  4822  001B50  0012               	return		;funcret
  4823  001B52                     __end_of___lwmod:
  4824                           	opt stack 0
  4825                           tblptru	equ	0xFF8
  4826                           tblptrh	equ	0xFF7
  4827                           tblptrl	equ	0xFF6
  4828                           tablat	equ	0xFF5
  4829                           prodh	equ	0xFF4
  4830                           prodl	equ	0xFF3
  4831                           intcon	equ	0xFF2
  4832                           intcon3	equ	0xFF0
  4833                           postinc0	equ	0xFEE
  4834                           wreg	equ	0xFE8
  4835                           indf2	equ	0xFDF
  4836                           postinc2	equ	0xFDE
  4837                           postdec2	equ	0xFDD
  4838                           fsr2h	equ	0xFDA
  4839                           fsr2l	equ	0xFD9
  4840                           status	equ	0xFD8
  4841                           
  4842 ;; *************** function ___lwdiv *****************
  4843 ;; Defined at:
  4844 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  4845 ;; Parameters:    Size  Location     Type
  4846 ;;  dividend        2   51[COMRAM] unsigned int 
  4847 ;;  divisor         2   53[COMRAM] unsigned int 
  4848 ;; Auto vars:     Size  Location     Type
  4849 ;;  quotient        2   55[COMRAM] unsigned int 
  4850 ;;  counter         1   57[COMRAM] unsigned char 
  4851 ;; Return value:  Size  Location     Type
  4852 ;;                  2   51[COMRAM] unsigned int 
  4853 ;; Registers used:
  4854 ;;		wreg, status,2, status,0
  4855 ;; Tracked objects:
  4856 ;;		On entry : 0/0
  4857 ;;		On exit  : 0/0
  4858 ;;		Unchanged: 0/0
  4859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4860 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4861 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4862 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4863 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4864 ;;Total ram usage:        7 bytes
  4865 ;; Hardware stack levels used:    1
  4866 ;; Hardware stack levels required when called:    5
  4867 ;; This function calls:
  4868 ;;		Nothing
  4869 ;; This function is called by:
  4870 ;;		_printf
  4871 ;; This function uses a non-reentrant model
  4872 ;;
  4873                           
  4874                           	psect	text11
  4875  001940                     __ptext11:
  4876                           	opt stack 0
  4877  001940                     ___lwdiv:
  4878                           	opt stack 24
  4879                           
  4880                           ;incstack = 0
  4881  001940  0E00               	movlw	0
  4882  001942  6E39               	movwf	___lwdiv@quotient+1,c
  4883  001944  0E00               	movlw	0
  4884  001946  6E38               	movwf	___lwdiv@quotient,c
  4885  001948  5036               	movf	___lwdiv@divisor,w,c
  4886  00194A  1037               	iorwf	___lwdiv@divisor+1,w,c
  4887  00194C  B4D8               	btfsc	status,2,c
  4888  00194E  D01C               	goto	l900
  4889  001950  0E01               	movlw	1
  4890  001952  6E3A               	movwf	___lwdiv@counter,c
  4891  001954  D004               	goto	l2915
  4892  001956                     l2913:
  4893  001956  90D8               	bcf	status,0,c
  4894  001958  3636               	rlcf	___lwdiv@divisor,f,c
  4895  00195A  3637               	rlcf	___lwdiv@divisor+1,f,c
  4896  00195C  2A3A               	incf	___lwdiv@counter,f,c
  4897  00195E                     l2915:
  4898  00195E  AE37               	btfss	___lwdiv@divisor+1,7,c
  4899  001960  D7FA               	goto	l2913
  4900  001962                     l2917:
  4901  001962  90D8               	bcf	status,0,c
  4902  001964  3638               	rlcf	___lwdiv@quotient,f,c
  4903  001966  3639               	rlcf	___lwdiv@quotient+1,f,c
  4904  001968  5036               	movf	___lwdiv@divisor,w,c
  4905  00196A  5C34               	subwf	___lwdiv@dividend,w,c
  4906  00196C  5037               	movf	___lwdiv@divisor+1,w,c
  4907  00196E  5835               	subwfb	___lwdiv@dividend+1,w,c
  4908  001970  A0D8               	btfss	status,0,c
  4909  001972  D005               	goto	l2925
  4910  001974  5036               	movf	___lwdiv@divisor,w,c
  4911  001976  5E34               	subwf	___lwdiv@dividend,f,c
  4912  001978  5037               	movf	___lwdiv@divisor+1,w,c
  4913  00197A  5A35               	subwfb	___lwdiv@dividend+1,f,c
  4914  00197C  8038               	bsf	___lwdiv@quotient,0,c
  4915  00197E                     l2925:
  4916  00197E  90D8               	bcf	status,0,c
  4917  001980  3237               	rrcf	___lwdiv@divisor+1,f,c
  4918  001982  3236               	rrcf	___lwdiv@divisor,f,c
  4919  001984  2E3A               	decfsz	___lwdiv@counter,f,c
  4920  001986  D7ED               	goto	l2917
  4921  001988                     l900:
  4922  001988  C038  F034         	movff	___lwdiv@quotient,?___lwdiv
  4923  00198C  C039  F035         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4924  001990  0012               	return		;funcret
  4925  001992                     __end_of___lwdiv:
  4926                           	opt stack 0
  4927                           tblptru	equ	0xFF8
  4928                           tblptrh	equ	0xFF7
  4929                           tblptrl	equ	0xFF6
  4930                           tablat	equ	0xFF5
  4931                           prodh	equ	0xFF4
  4932                           prodl	equ	0xFF3
  4933                           intcon	equ	0xFF2
  4934                           intcon3	equ	0xFF0
  4935                           postinc0	equ	0xFEE
  4936                           wreg	equ	0xFE8
  4937                           indf2	equ	0xFDF
  4938                           postinc2	equ	0xFDE
  4939                           postdec2	equ	0xFDD
  4940                           fsr2h	equ	0xFDA
  4941                           fsr2l	equ	0xFD9
  4942                           status	equ	0xFD8
  4943                           
  4944 ;; *************** function _initLCD *****************
  4945 ;; Defined at:
  4946 ;;		line 7 in file "../lcd.c"
  4947 ;; Parameters:    Size  Location     Type
  4948 ;;		None
  4949 ;; Auto vars:     Size  Location     Type
  4950 ;;		None
  4951 ;; Return value:  Size  Location     Type
  4952 ;;                  1    wreg      void 
  4953 ;; Registers used:
  4954 ;;		wreg, status,2, status,0, cstack
  4955 ;; Tracked objects:
  4956 ;;		On entry : 0/0
  4957 ;;		On exit  : 0/0
  4958 ;;		Unchanged: 0/0
  4959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4960 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4961 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4962 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4963 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4964 ;;Total ram usage:        1 bytes
  4965 ;; Hardware stack levels used:    1
  4966 ;; Hardware stack levels required when called:    7
  4967 ;; This function calls:
  4968 ;;		_lcdInst
  4969 ;; This function is called by:
  4970 ;;		_main
  4971 ;; This function uses a non-reentrant model
  4972 ;;
  4973                           
  4974                           	psect	text12
  4975  001ACA                     __ptext12:
  4976                           	opt stack 0
  4977  001ACA                     _initLCD:
  4978                           	opt stack 23
  4979                           
  4980                           ;lcd.c: 8: _delay((unsigned long)((15)*(10000000/4000.0)));
  4981                           
  4982                           ;incstack = 0
  4983  001ACA  0E31               	movlw	49
  4984  001ACC  6E37               	movwf	??_initLCD& (0+255),c
  4985  001ACE  0EB2               	movlw	178
  4986  001AD0                     u5217:
  4987  001AD0  2EE8               	decfsz	wreg,f,c
  4988  001AD2  D7FE               	bra	u5217
  4989  001AD4  2E37               	decfsz	??_initLCD& (0+255),f,c
  4990  001AD6  D7FC               	bra	u5217
  4991  001AD8  D000               	nop2	
  4992                           
  4993                           ;lcd.c: 9: lcdInst(0b00110011);
  4994  001ADA  0E33               	movlw	51
  4995  001ADC  EC3A  F00E         	call	_lcdInst
  4996                           
  4997                           ;lcd.c: 10: lcdInst(0b00110010);
  4998  001AE0  0E32               	movlw	50
  4999  001AE2  EC3A  F00E         	call	_lcdInst
  5000                           
  5001                           ;lcd.c: 11: lcdInst(0b00101000);
  5002  001AE6  0E28               	movlw	40
  5003  001AE8  EC3A  F00E         	call	_lcdInst
  5004                           
  5005                           ;lcd.c: 12: lcdInst(0b00001111);
  5006  001AEC  0E0F               	movlw	15
  5007  001AEE  EC3A  F00E         	call	_lcdInst
  5008                           
  5009                           ;lcd.c: 13: lcdInst(0b00000110);
  5010  001AF2  0E06               	movlw	6
  5011  001AF4  EC3A  F00E         	call	_lcdInst
  5012                           
  5013                           ;lcd.c: 14: lcdInst(0b00000001);
  5014  001AF8  0E01               	movlw	1
  5015  001AFA  EC3A  F00E         	call	_lcdInst
  5016                           
  5017                           ;lcd.c: 15: _delay((unsigned long)((15)*(10000000/4000.0)));
  5018  001AFE  0E31               	movlw	49
  5019  001B00  6E37               	movwf	??_initLCD& (0+255),c
  5020  001B02  0EB2               	movlw	178
  5021  001B04                     u5227:
  5022  001B04  2EE8               	decfsz	wreg,f,c
  5023  001B06  D7FE               	bra	u5227
  5024  001B08  2E37               	decfsz	??_initLCD& (0+255),f,c
  5025  001B0A  D7FC               	bra	u5227
  5026  001B0C  D000               	nop2	
  5027  001B0E  0012               	return		;funcret
  5028  001B10                     __end_of_initLCD:
  5029                           	opt stack 0
  5030                           tblptru	equ	0xFF8
  5031                           tblptrh	equ	0xFF7
  5032                           tblptrl	equ	0xFF6
  5033                           tablat	equ	0xFF5
  5034                           prodh	equ	0xFF4
  5035                           prodl	equ	0xFF3
  5036                           intcon	equ	0xFF2
  5037                           intcon3	equ	0xFF0
  5038                           postinc0	equ	0xFEE
  5039                           wreg	equ	0xFE8
  5040                           indf2	equ	0xFDF
  5041                           postinc2	equ	0xFDE
  5042                           postdec2	equ	0xFDD
  5043                           fsr2h	equ	0xFDA
  5044                           fsr2l	equ	0xFD9
  5045                           status	equ	0xFD8
  5046                           
  5047 ;; *************** function _lcdInst *****************
  5048 ;; Defined at:
  5049 ;;		line 18 in file "../lcd.c"
  5050 ;; Parameters:    Size  Location     Type
  5051 ;;  data            1    wreg     unsigned char 
  5052 ;; Auto vars:     Size  Location     Type
  5053 ;;  data            1   53[COMRAM] unsigned char 
  5054 ;; Return value:  Size  Location     Type
  5055 ;;                  1    wreg      void 
  5056 ;; Registers used:
  5057 ;;		wreg, status,2, status,0, cstack
  5058 ;; Tracked objects:
  5059 ;;		On entry : 0/0
  5060 ;;		On exit  : 0/0
  5061 ;;		Unchanged: 0/0
  5062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5063 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5064 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5065 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5066 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5067 ;;Total ram usage:        1 bytes
  5068 ;; Hardware stack levels used:    1
  5069 ;; Hardware stack levels required when called:    6
  5070 ;; This function calls:
  5071 ;;		_lcdNibble
  5072 ;; This function is called by:
  5073 ;;		_initLCD
  5074 ;;		_main
  5075 ;; This function uses a non-reentrant model
  5076 ;;
  5077                           
  5078                           	psect	text13
  5079  001C74                     __ptext13:
  5080                           	opt stack 0
  5081  001C74                     _lcdInst:
  5082                           	opt stack 24
  5083                           
  5084                           ;incstack = 0
  5085                           ;lcdInst@data stored from wreg
  5086  001C74  6E36               	movwf	lcdInst@data,c
  5087                           
  5088                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  5089  001C76  948C               	bcf	3980,2,c	;volatile
  5090                           
  5091                           ;lcd.c: 20: lcdNibble(data);
  5092  001C78  5036               	movf	lcdInst@data,w,c
  5093  001C7A  ECF2  F00C         	call	_lcdNibble
  5094  001C7E  0012               	return		;funcret
  5095  001C80                     __end_of_lcdInst:
  5096                           	opt stack 0
  5097                           tblptru	equ	0xFF8
  5098                           tblptrh	equ	0xFF7
  5099                           tblptrl	equ	0xFF6
  5100                           tablat	equ	0xFF5
  5101                           prodh	equ	0xFF4
  5102                           prodl	equ	0xFF3
  5103                           intcon	equ	0xFF2
  5104                           intcon3	equ	0xFF0
  5105                           postinc0	equ	0xFEE
  5106                           wreg	equ	0xFE8
  5107                           indf2	equ	0xFDF
  5108                           postinc2	equ	0xFDE
  5109                           postdec2	equ	0xFDD
  5110                           fsr2h	equ	0xFDA
  5111                           fsr2l	equ	0xFD9
  5112                           status	equ	0xFD8
  5113                           
  5114 ;; *************** function _lcdNibble *****************
  5115 ;; Defined at:
  5116 ;;		line 28 in file "../lcd.c"
  5117 ;; Parameters:    Size  Location     Type
  5118 ;;  data            1    wreg     unsigned char 
  5119 ;; Auto vars:     Size  Location     Type
  5120 ;;  data            1   52[COMRAM] unsigned char 
  5121 ;;  temp            1   51[COMRAM] unsigned char 
  5122 ;; Return value:  Size  Location     Type
  5123 ;;                  1    wreg      void 
  5124 ;; Registers used:
  5125 ;;		wreg, status,2, status,0
  5126 ;; Tracked objects:
  5127 ;;		On entry : 0/0
  5128 ;;		On exit  : 0/0
  5129 ;;		Unchanged: 0/0
  5130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5131 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5132 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5133 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5134 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5135 ;;Total ram usage:        2 bytes
  5136 ;; Hardware stack levels used:    1
  5137 ;; Hardware stack levels required when called:    5
  5138 ;; This function calls:
  5139 ;;		Nothing
  5140 ;; This function is called by:
  5141 ;;		_lcdInst
  5142 ;;		_putch
  5143 ;; This function uses a non-reentrant model
  5144 ;;
  5145                           
  5146                           	psect	text14
  5147  0019E4                     __ptext14:
  5148                           	opt stack 0
  5149  0019E4                     _lcdNibble:
  5150                           	opt stack 23
  5151                           
  5152                           ;incstack = 0
  5153                           ;lcdNibble@data stored from wreg
  5154  0019E4  6E35               	movwf	lcdNibble@data,c
  5155                           
  5156                           ;lcd.c: 30: char temp = data & 0xF0;
  5157  0019E6  5035               	movf	lcdNibble@data,w,c
  5158  0019E8  0BF0               	andlw	240
  5159  0019EA  6E34               	movwf	lcdNibble@temp,c
  5160                           
  5161                           ;lcd.c: 31: LATD = LATD & 0x0F;
  5162  0019EC  508C               	movf	3980,w,c	;volatile
  5163  0019EE  0B0F               	andlw	15
  5164  0019F0  6E8C               	movwf	3980,c	;volatile
  5165                           
  5166                           ;lcd.c: 32: LATD = temp | LATD;
  5167  0019F2  5034               	movf	lcdNibble@temp,w,c
  5168  0019F4  108C               	iorwf	3980,w,c	;volatile
  5169  0019F6  6E8C               	movwf	3980,c	;volatile
  5170                           
  5171                           ;lcd.c: 34: LATDbits.LATD3 = 0;
  5172  0019F8  968C               	bcf	3980,3,c	;volatile
  5173                           
  5174                           ;lcd.c: 35: _delay((unsigned long)((30)*(10000000/4000000.0)));
  5175  0019FA  0E19               	movlw	25
  5176  0019FC                     u5237:
  5177  0019FC  2EE8               	decfsz	wreg,f,c
  5178  0019FE  D7FE               	bra	u5237
  5179                           
  5180                           ;lcd.c: 36: LATDbits.LATD3 = 1;
  5181  001A00  868C               	bsf	3980,3,c	;volatile
  5182                           
  5183                           ;lcd.c: 37: _delay((unsigned long)((30)*(10000000/4000000.0)));
  5184  001A02  0E19               	movlw	25
  5185  001A04                     u5247:
  5186  001A04  2EE8               	decfsz	wreg,f,c
  5187  001A06  D7FE               	bra	u5247
  5188                           
  5189                           ;lcd.c: 39: data = data << 4;
  5190  001A08  3835               	swapf	lcdNibble@data,w,c
  5191  001A0A  0BF0               	andlw	240
  5192  001A0C  6E35               	movwf	lcdNibble@data,c
  5193                           
  5194                           ;lcd.c: 41: temp = data & 0xF0;
  5195  001A0E  5035               	movf	lcdNibble@data,w,c
  5196  001A10  0BF0               	andlw	240
  5197  001A12  6E34               	movwf	lcdNibble@temp,c
  5198                           
  5199                           ;lcd.c: 42: LATD = LATD & 0x0F;
  5200  001A14  508C               	movf	3980,w,c	;volatile
  5201  001A16  0B0F               	andlw	15
  5202  001A18  6E8C               	movwf	3980,c	;volatile
  5203                           
  5204                           ;lcd.c: 43: LATD = temp | LATD;
  5205  001A1A  5034               	movf	lcdNibble@temp,w,c
  5206  001A1C  108C               	iorwf	3980,w,c	;volatile
  5207  001A1E  6E8C               	movwf	3980,c	;volatile
  5208                           
  5209                           ;lcd.c: 45: LATDbits.LATD3 = 0;
  5210  001A20  968C               	bcf	3980,3,c	;volatile
  5211                           
  5212                           ;lcd.c: 46: _delay((unsigned long)((30)*(10000000/4000000.0)));
  5213  001A22  0E19               	movlw	25
  5214  001A24                     u5257:
  5215  001A24  2EE8               	decfsz	wreg,f,c
  5216  001A26  D7FE               	bra	u5257
  5217                           
  5218                           ;lcd.c: 47: LATDbits.LATD3 = 1;
  5219  001A28  868C               	bsf	3980,3,c	;volatile
  5220                           
  5221                           ;lcd.c: 48: _delay((unsigned long)((30)*(10000000/4000000.0)));
  5222  001A2A  0E19               	movlw	25
  5223  001A2C                     u5267:
  5224  001A2C  2EE8               	decfsz	wreg,f,c
  5225  001A2E  D7FE               	bra	u5267
  5226  001A30  0012               	return		;funcret
  5227  001A32                     __end_of_lcdNibble:
  5228                           	opt stack 0
  5229                           tblptru	equ	0xFF8
  5230                           tblptrh	equ	0xFF7
  5231                           tblptrl	equ	0xFF6
  5232                           tablat	equ	0xFF5
  5233                           prodh	equ	0xFF4
  5234                           prodl	equ	0xFF3
  5235                           intcon	equ	0xFF2
  5236                           intcon3	equ	0xFF0
  5237                           postinc0	equ	0xFEE
  5238                           wreg	equ	0xFE8
  5239                           indf2	equ	0xFDF
  5240                           postinc2	equ	0xFDE
  5241                           postdec2	equ	0xFDD
  5242                           fsr2h	equ	0xFDA
  5243                           fsr2l	equ	0xFD9
  5244                           status	equ	0xFD8
  5245                           
  5246 ;; *************** function _I2C_Master_Write *****************
  5247 ;; Defined at:
  5248 ;;		line 39 in file "../I2C.c"
  5249 ;; Parameters:    Size  Location     Type
  5250 ;;  d               2   52[COMRAM] unsigned int 
  5251 ;; Auto vars:     Size  Location     Type
  5252 ;;		None
  5253 ;; Return value:  Size  Location     Type
  5254 ;;                  1    wreg      void 
  5255 ;; Registers used:
  5256 ;;		wreg, status,2, status,0, cstack
  5257 ;; Tracked objects:
  5258 ;;		On entry : 0/0
  5259 ;;		On exit  : 0/0
  5260 ;;		Unchanged: 0/0
  5261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5262 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5263 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5264 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5265 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5266 ;;Total ram usage:        2 bytes
  5267 ;; Hardware stack levels used:    1
  5268 ;; Hardware stack levels required when called:    6
  5269 ;; This function calls:
  5270 ;;		_I2C_Master_Wait
  5271 ;; This function is called by:
  5272 ;;		_main
  5273 ;; This function uses a non-reentrant model
  5274 ;;
  5275                           
  5276                           	psect	text15
  5277  001C98                     __ptext15:
  5278                           	opt stack 0
  5279  001C98                     _I2C_Master_Write:
  5280                           	opt stack 24
  5281                           
  5282                           ;I2C.c: 41: I2C_Master_Wait();
  5283                           
  5284                           ;incstack = 0
  5285  001C98  EC2B  F00E         	call	_I2C_Master_Wait	;wreg free
  5286                           
  5287                           ;I2C.c: 42: SSPBUF = d;
  5288  001C9C  C035  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  5289  001CA0  0012               	return		;funcret
  5290  001CA2                     __end_of_I2C_Master_Write:
  5291                           	opt stack 0
  5292                           tblptru	equ	0xFF8
  5293                           tblptrh	equ	0xFF7
  5294                           tblptrl	equ	0xFF6
  5295                           tablat	equ	0xFF5
  5296                           prodh	equ	0xFF4
  5297                           prodl	equ	0xFF3
  5298                           intcon	equ	0xFF2
  5299                           intcon3	equ	0xFF0
  5300                           postinc0	equ	0xFEE
  5301                           wreg	equ	0xFE8
  5302                           indf2	equ	0xFDF
  5303                           postinc2	equ	0xFDE
  5304                           postdec2	equ	0xFDD
  5305                           fsr2h	equ	0xFDA
  5306                           fsr2l	equ	0xFD9
  5307                           status	equ	0xFD8
  5308                           
  5309 ;; *************** function _I2C_Master_Stop *****************
  5310 ;; Defined at:
  5311 ;;		line 33 in file "../I2C.c"
  5312 ;; Parameters:    Size  Location     Type
  5313 ;;		None
  5314 ;; Auto vars:     Size  Location     Type
  5315 ;;		None
  5316 ;; Return value:  Size  Location     Type
  5317 ;;                  1    wreg      void 
  5318 ;; Registers used:
  5319 ;;		wreg, status,2, status,0, cstack
  5320 ;; Tracked objects:
  5321 ;;		On entry : 0/0
  5322 ;;		On exit  : 0/0
  5323 ;;		Unchanged: 0/0
  5324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5325 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5326 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5327 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5328 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5329 ;;Total ram usage:        0 bytes
  5330 ;; Hardware stack levels used:    1
  5331 ;; Hardware stack levels required when called:    6
  5332 ;; This function calls:
  5333 ;;		_I2C_Master_Wait
  5334 ;; This function is called by:
  5335 ;;		_main
  5336 ;; This function uses a non-reentrant model
  5337 ;;
  5338                           
  5339                           	psect	text16
  5340  001CA2                     __ptext16:
  5341                           	opt stack 0
  5342  001CA2                     _I2C_Master_Stop:
  5343                           	opt stack 24
  5344                           
  5345                           ;I2C.c: 35: I2C_Master_Wait();
  5346                           
  5347                           ;incstack = 0
  5348  001CA2  EC2B  F00E         	call	_I2C_Master_Wait	;wreg free
  5349                           
  5350                           ;I2C.c: 36: PEN = 1;
  5351  001CA6  84C5               	bsf	4037,2,c	;volatile
  5352  001CA8  0012               	return		;funcret
  5353  001CAA                     __end_of_I2C_Master_Stop:
  5354                           	opt stack 0
  5355                           tblptru	equ	0xFF8
  5356                           tblptrh	equ	0xFF7
  5357                           tblptrl	equ	0xFF6
  5358                           tablat	equ	0xFF5
  5359                           prodh	equ	0xFF4
  5360                           prodl	equ	0xFF3
  5361                           intcon	equ	0xFF2
  5362                           intcon3	equ	0xFF0
  5363                           postinc0	equ	0xFEE
  5364                           wreg	equ	0xFE8
  5365                           indf2	equ	0xFDF
  5366                           postinc2	equ	0xFDE
  5367                           postdec2	equ	0xFDD
  5368                           fsr2h	equ	0xFDA
  5369                           fsr2l	equ	0xFD9
  5370                           status	equ	0xFD8
  5371                           
  5372 ;; *************** function _I2C_Master_Start *****************
  5373 ;; Defined at:
  5374 ;;		line 21 in file "../I2C.c"
  5375 ;; Parameters:    Size  Location     Type
  5376 ;;		None
  5377 ;; Auto vars:     Size  Location     Type
  5378 ;;		None
  5379 ;; Return value:  Size  Location     Type
  5380 ;;                  1    wreg      void 
  5381 ;; Registers used:
  5382 ;;		wreg, status,2, status,0, cstack
  5383 ;; Tracked objects:
  5384 ;;		On entry : 0/0
  5385 ;;		On exit  : 0/0
  5386 ;;		Unchanged: 0/0
  5387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5388 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5389 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5390 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5391 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5392 ;;Total ram usage:        0 bytes
  5393 ;; Hardware stack levels used:    1
  5394 ;; Hardware stack levels required when called:    6
  5395 ;; This function calls:
  5396 ;;		_I2C_Master_Wait
  5397 ;; This function is called by:
  5398 ;;		_main
  5399 ;; This function uses a non-reentrant model
  5400 ;;
  5401                           
  5402                           	psect	text17
  5403  001CAA                     __ptext17:
  5404                           	opt stack 0
  5405  001CAA                     _I2C_Master_Start:
  5406                           	opt stack 24
  5407                           
  5408                           ;I2C.c: 23: I2C_Master_Wait();
  5409                           
  5410                           ;incstack = 0
  5411  001CAA  EC2B  F00E         	call	_I2C_Master_Wait	;wreg free
  5412                           
  5413                           ;I2C.c: 24: SEN = 1;
  5414  001CAE  80C5               	bsf	4037,0,c	;volatile
  5415  001CB0  0012               	return		;funcret
  5416  001CB2                     __end_of_I2C_Master_Start:
  5417                           	opt stack 0
  5418                           tblptru	equ	0xFF8
  5419                           tblptrh	equ	0xFF7
  5420                           tblptrl	equ	0xFF6
  5421                           tablat	equ	0xFF5
  5422                           prodh	equ	0xFF4
  5423                           prodl	equ	0xFF3
  5424                           intcon	equ	0xFF2
  5425                           intcon3	equ	0xFF0
  5426                           postinc0	equ	0xFEE
  5427                           wreg	equ	0xFE8
  5428                           indf2	equ	0xFDF
  5429                           postinc2	equ	0xFDE
  5430                           postdec2	equ	0xFDD
  5431                           fsr2h	equ	0xFDA
  5432                           fsr2l	equ	0xFD9
  5433                           status	equ	0xFD8
  5434                           
  5435 ;; *************** function _I2C_Master_Read *****************
  5436 ;; Defined at:
  5437 ;;		line 45 in file "../I2C.c"
  5438 ;; Parameters:    Size  Location     Type
  5439 ;;  a               1    wreg     unsigned char 
  5440 ;; Auto vars:     Size  Location     Type
  5441 ;;  a               1   52[COMRAM] unsigned char 
  5442 ;;  temp            1   53[COMRAM] unsigned char 
  5443 ;; Return value:  Size  Location     Type
  5444 ;;                  1    wreg      unsigned char 
  5445 ;; Registers used:
  5446 ;;		wreg, status,2, status,0, cstack
  5447 ;; Tracked objects:
  5448 ;;		On entry : 0/0
  5449 ;;		On exit  : 0/0
  5450 ;;		Unchanged: 0/0
  5451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5452 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5453 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5454 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5455 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5456 ;;Total ram usage:        2 bytes
  5457 ;; Hardware stack levels used:    1
  5458 ;; Hardware stack levels required when called:    6
  5459 ;; This function calls:
  5460 ;;		_I2C_Master_Wait
  5461 ;; This function is called by:
  5462 ;;		_main
  5463 ;; This function uses a non-reentrant model
  5464 ;;
  5465                           
  5466                           	psect	text18
  5467  001BBA                     __ptext18:
  5468                           	opt stack 0
  5469  001BBA                     _I2C_Master_Read:
  5470                           	opt stack 24
  5471                           
  5472                           ;incstack = 0
  5473                           ;I2C_Master_Read@a stored from wreg
  5474  001BBA  6E35               	movwf	I2C_Master_Read@a,c
  5475                           
  5476                           ;I2C.c: 47: unsigned char temp;
  5477                           ;I2C.c: 48: I2C_Master_Wait();
  5478  001BBC  EC2B  F00E         	call	_I2C_Master_Wait	;wreg free
  5479                           
  5480                           ;I2C.c: 49: RCEN = 1;
  5481  001BC0  86C5               	bsf	4037,3,c	;volatile
  5482                           
  5483                           ;I2C.c: 50: I2C_Master_Wait();
  5484  001BC2  EC2B  F00E         	call	_I2C_Master_Wait	;wreg free
  5485                           
  5486                           ;I2C.c: 51: temp = SSPBUF;
  5487  001BC6  CFC9 F036          	movff	4041,I2C_Master_Read@temp	;volatile
  5488                           
  5489                           ;I2C.c: 52: I2C_Master_Wait();
  5490  001BCA  EC2B  F00E         	call	_I2C_Master_Wait	;wreg free
  5491                           
  5492                           ;I2C.c: 53: ACKDT = (a)?0:1;
  5493  001BCE  5035               	movf	I2C_Master_Read@a,w,c
  5494  001BD0  A4D8               	btfss	status,2,c
  5495  001BD2  D002               	goto	u2900
  5496  001BD4  8AC5               	bsf	4037,5,c	;volatile
  5497  001BD6  D001               	goto	l3157
  5498  001BD8                     u2900:
  5499  001BD8  9AC5               	bcf	4037,5,c	;volatile
  5500  001BDA                     l3157:
  5501                           
  5502                           ;I2C.c: 54: ACKEN = 1;
  5503  001BDA  88C5               	bsf	4037,4,c	;volatile
  5504                           
  5505                           ;I2C.c: 55: return temp;
  5506  001BDC  5036               	movf	I2C_Master_Read@temp,w,c
  5507  001BDE  0012               	return	
  5508  001BE0                     __end_of_I2C_Master_Read:
  5509                           	opt stack 0
  5510                           tblptru	equ	0xFF8
  5511                           tblptrh	equ	0xFF7
  5512                           tblptrl	equ	0xFF6
  5513                           tablat	equ	0xFF5
  5514                           prodh	equ	0xFF4
  5515                           prodl	equ	0xFF3
  5516                           intcon	equ	0xFF2
  5517                           intcon3	equ	0xFF0
  5518                           postinc0	equ	0xFEE
  5519                           wreg	equ	0xFE8
  5520                           indf2	equ	0xFDF
  5521                           postinc2	equ	0xFDE
  5522                           postdec2	equ	0xFDD
  5523                           fsr2h	equ	0xFDA
  5524                           fsr2l	equ	0xFD9
  5525                           status	equ	0xFD8
  5526                           
  5527 ;; *************** function _I2C_Master_Wait *****************
  5528 ;; Defined at:
  5529 ;;		line 16 in file "../I2C.c"
  5530 ;; Parameters:    Size  Location     Type
  5531 ;;		None
  5532 ;; Auto vars:     Size  Location     Type
  5533 ;;		None
  5534 ;; Return value:  Size  Location     Type
  5535 ;;                  1    wreg      void 
  5536 ;; Registers used:
  5537 ;;		wreg, status,2, status,0
  5538 ;; Tracked objects:
  5539 ;;		On entry : 0/0
  5540 ;;		On exit  : 0/0
  5541 ;;		Unchanged: 0/0
  5542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5543 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5544 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5545 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5546 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5547 ;;Total ram usage:        1 bytes
  5548 ;; Hardware stack levels used:    1
  5549 ;; Hardware stack levels required when called:    5
  5550 ;; This function calls:
  5551 ;;		Nothing
  5552 ;; This function is called by:
  5553 ;;		_I2C_Master_Start
  5554 ;;		_I2C_Master_Stop
  5555 ;;		_I2C_Master_Write
  5556 ;;		_I2C_Master_Read
  5557 ;; This function uses a non-reentrant model
  5558 ;;
  5559                           
  5560                           	psect	text19
  5561  001C56                     __ptext19:
  5562                           	opt stack 0
  5563  001C56                     _I2C_Master_Wait:
  5564                           	opt stack 24
  5565  001C56                     l30:
  5566  001C56  B4C7               	btfsc	4039,2,c	;volatile
  5567  001C58  D7FE               	goto	l30
  5568  001C5A  CFC5 F034          	movff	4037,??_I2C_Master_Wait	;volatile
  5569  001C5E  0E1F               	movlw	31
  5570  001C60  1634               	andwf	??_I2C_Master_Wait,f,c
  5571  001C62  B4D8               	btfsc	status,2,c
  5572  001C64  0012               	return	
  5573  001C66  D7F7               	goto	l30
  5574  001C68                     __end_of_I2C_Master_Wait:
  5575                           	opt stack 0
  5576                           tblptru	equ	0xFF8
  5577                           tblptrh	equ	0xFF7
  5578                           tblptrl	equ	0xFF6
  5579                           tablat	equ	0xFF5
  5580                           prodh	equ	0xFF4
  5581                           prodl	equ	0xFF3
  5582                           intcon	equ	0xFF2
  5583                           intcon3	equ	0xFF0
  5584                           postinc0	equ	0xFEE
  5585                           wreg	equ	0xFE8
  5586                           indf2	equ	0xFDF
  5587                           postinc2	equ	0xFDE
  5588                           postdec2	equ	0xFDD
  5589                           fsr2h	equ	0xFDA
  5590                           fsr2l	equ	0xFD9
  5591                           status	equ	0xFD8
  5592                           
  5593 ;; *************** function _I2C_Master_Init *****************
  5594 ;; Defined at:
  5595 ;;		line 5 in file "../I2C.c"
  5596 ;; Parameters:    Size  Location     Type
  5597 ;;  c               4    0[BANK0 ] const unsigned long 
  5598 ;; Auto vars:     Size  Location     Type
  5599 ;;		None
  5600 ;; Return value:  Size  Location     Type
  5601 ;;                  1    wreg      void 
  5602 ;; Registers used:
  5603 ;;		wreg, status,2, status,0, cstack
  5604 ;; Tracked objects:
  5605 ;;		On entry : 0/0
  5606 ;;		On exit  : 0/0
  5607 ;;		Unchanged: 0/0
  5608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5609 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5610 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5611 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5612 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5613 ;;Total ram usage:        8 bytes
  5614 ;; Hardware stack levels used:    1
  5615 ;; Hardware stack levels required when called:    6
  5616 ;; This function calls:
  5617 ;;		___lldiv
  5618 ;; This function is called by:
  5619 ;;		_main
  5620 ;; This function uses a non-reentrant model
  5621 ;;
  5622                           
  5623                           	psect	text20
  5624  0018E4                     __ptext20:
  5625                           	opt stack 0
  5626  0018E4                     _I2C_Master_Init:
  5627                           	opt stack 24
  5628                           
  5629                           ;I2C.c: 8: SSPSTAT = 0b00000000;
  5630                           
  5631                           ;incstack = 0
  5632  0018E4  0E00               	movlw	0
  5633  0018E6  6EC7               	movwf	4039,c	;volatile
  5634                           
  5635                           ;I2C.c: 9: SSPCON1 = 0b00101000;
  5636  0018E8  0E28               	movlw	40
  5637  0018EA  6EC6               	movwf	4038,c	;volatile
  5638                           
  5639                           ;I2C.c: 10: SSPCON2 = 0b00000000;
  5640  0018EC  0E00               	movlw	0
  5641  0018EE  6EC5               	movwf	4037,c	;volatile
  5642                           
  5643                           ;I2C.c: 11: SSPADD = (10000000/(4*c))-1;
  5644  0018F0  0E80               	movlw	128
  5645  0018F2  6E34               	movwf	___lldiv@dividend,c
  5646  0018F4  0E96               	movlw	150
  5647  0018F6  6E35               	movwf	___lldiv@dividend+1,c
  5648  0018F8  0E98               	movlw	152
  5649  0018FA  6E36               	movwf	___lldiv@dividend+2,c
  5650  0018FC  0E00               	movlw	0
  5651  0018FE  6E37               	movwf	___lldiv@dividend+3,c
  5652  001900  C0A1  F0A5         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  5653  001904  C0A2  F0A6         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  5654  001908  C0A3  F0A7         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  5655  00190C  C0A4  F0A8         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  5656  001910  0E02               	movlw	2
  5657  001912                     u4405:
  5658  001912  90D8               	bcf	status,0,c
  5659  001914  0100               	movlb	0	; () banked
  5660  001916  37A5               	rlcf	??_I2C_Master_Init& (0+255),f,b
  5661  001918  37A6               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  5662  00191A  37A7               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  5663  00191C  37A8               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  5664  00191E  2EE8               	decfsz	wreg,f,c
  5665  001920  D7F8               	goto	u4405
  5666  001922  C0A5  F038         	movff	??_I2C_Master_Init,___lldiv@divisor
  5667  001926  C0A6  F039         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  5668  00192A  C0A7  F03A         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  5669  00192E  C0A8  F03B         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  5670  001932  ECC1  F00B         	call	___lldiv	;wreg free
  5671  001936  0434               	decf	?___lldiv,w,c
  5672  001938  6EC8               	movwf	4040,c	;volatile
  5673                           
  5674                           ;I2C.c: 12: TRISC3 = 1;
  5675  00193A  8694               	bsf	3988,3,c	;volatile
  5676                           
  5677                           ;I2C.c: 13: TRISC4 = 1;
  5678  00193C  8894               	bsf	3988,4,c	;volatile
  5679  00193E  0012               	return		;funcret
  5680  001940                     __end_of_I2C_Master_Init:
  5681                           	opt stack 0
  5682                           tblptru	equ	0xFF8
  5683                           tblptrh	equ	0xFF7
  5684                           tblptrl	equ	0xFF6
  5685                           tablat	equ	0xFF5
  5686                           prodh	equ	0xFF4
  5687                           prodl	equ	0xFF3
  5688                           intcon	equ	0xFF2
  5689                           intcon3	equ	0xFF0
  5690                           postinc0	equ	0xFEE
  5691                           wreg	equ	0xFE8
  5692                           indf2	equ	0xFDF
  5693                           postinc2	equ	0xFDE
  5694                           postdec2	equ	0xFDD
  5695                           fsr2h	equ	0xFDA
  5696                           fsr2l	equ	0xFD9
  5697                           status	equ	0xFD8
  5698                           
  5699 ;; *************** function ___lldiv *****************
  5700 ;; Defined at:
  5701 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  5702 ;; Parameters:    Size  Location     Type
  5703 ;;  dividend        4   51[COMRAM] unsigned long 
  5704 ;;  divisor         4   55[COMRAM] unsigned long 
  5705 ;; Auto vars:     Size  Location     Type
  5706 ;;  quotient        4   59[COMRAM] unsigned long 
  5707 ;;  counter         1   63[COMRAM] unsigned char 
  5708 ;; Return value:  Size  Location     Type
  5709 ;;                  4   51[COMRAM] unsigned long 
  5710 ;; Registers used:
  5711 ;;		wreg, status,2, status,0
  5712 ;; Tracked objects:
  5713 ;;		On entry : 0/0
  5714 ;;		On exit  : 0/0
  5715 ;;		Unchanged: 0/0
  5716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5717 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5718 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5719 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5720 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5721 ;;Total ram usage:       13 bytes
  5722 ;; Hardware stack levels used:    1
  5723 ;; Hardware stack levels required when called:    5
  5724 ;; This function calls:
  5725 ;;		Nothing
  5726 ;; This function is called by:
  5727 ;;		_I2C_Master_Init
  5728 ;; This function uses a non-reentrant model
  5729 ;;
  5730                           
  5731                           	psect	text21
  5732  001782                     __ptext21:
  5733                           	opt stack 0
  5734  001782                     ___lldiv:
  5735                           	opt stack 24
  5736                           
  5737                           ;incstack = 0
  5738  001782  0E00               	movlw	0
  5739  001784  6E3C               	movwf	___lldiv@quotient,c
  5740  001786  0E00               	movlw	0
  5741  001788  6E3D               	movwf	___lldiv@quotient+1,c
  5742  00178A  0E00               	movlw	0
  5743  00178C  6E3E               	movwf	___lldiv@quotient+2,c
  5744  00178E  0E00               	movlw	0
  5745  001790  6E3F               	movwf	___lldiv@quotient+3,c
  5746  001792  5038               	movf	___lldiv@divisor,w,c
  5747  001794  1039               	iorwf	___lldiv@divisor+1,w,c
  5748  001796  103A               	iorwf	___lldiv@divisor+2,w,c
  5749  001798  103B               	iorwf	___lldiv@divisor+3,w,c
  5750  00179A  B4D8               	btfsc	status,2,c
  5751  00179C  D02A               	goto	l847
  5752  00179E  0E01               	movlw	1
  5753  0017A0  6E40               	movwf	___lldiv@counter,c
  5754  0017A2  D006               	goto	l2893
  5755  0017A4                     l2891:
  5756  0017A4  90D8               	bcf	status,0,c
  5757  0017A6  3638               	rlcf	___lldiv@divisor,f,c
  5758  0017A8  3639               	rlcf	___lldiv@divisor+1,f,c
  5759  0017AA  363A               	rlcf	___lldiv@divisor+2,f,c
  5760  0017AC  363B               	rlcf	___lldiv@divisor+3,f,c
  5761  0017AE  2A40               	incf	___lldiv@counter,f,c
  5762  0017B0                     l2893:
  5763  0017B0  AE3B               	btfss	___lldiv@divisor+3,7,c
  5764  0017B2  D7F8               	goto	l2891
  5765  0017B4                     l2895:
  5766  0017B4  90D8               	bcf	status,0,c
  5767  0017B6  363C               	rlcf	___lldiv@quotient,f,c
  5768  0017B8  363D               	rlcf	___lldiv@quotient+1,f,c
  5769  0017BA  363E               	rlcf	___lldiv@quotient+2,f,c
  5770  0017BC  363F               	rlcf	___lldiv@quotient+3,f,c
  5771  0017BE  5038               	movf	___lldiv@divisor,w,c
  5772  0017C0  5C34               	subwf	___lldiv@dividend,w,c
  5773  0017C2  5039               	movf	___lldiv@divisor+1,w,c
  5774  0017C4  5835               	subwfb	___lldiv@dividend+1,w,c
  5775  0017C6  503A               	movf	___lldiv@divisor+2,w,c
  5776  0017C8  5836               	subwfb	___lldiv@dividend+2,w,c
  5777  0017CA  503B               	movf	___lldiv@divisor+3,w,c
  5778  0017CC  5837               	subwfb	___lldiv@dividend+3,w,c
  5779  0017CE  A0D8               	btfss	status,0,c
  5780  0017D0  D009               	goto	l2903
  5781  0017D2  5038               	movf	___lldiv@divisor,w,c
  5782  0017D4  5E34               	subwf	___lldiv@dividend,f,c
  5783  0017D6  5039               	movf	___lldiv@divisor+1,w,c
  5784  0017D8  5A35               	subwfb	___lldiv@dividend+1,f,c
  5785  0017DA  503A               	movf	___lldiv@divisor+2,w,c
  5786  0017DC  5A36               	subwfb	___lldiv@dividend+2,f,c
  5787  0017DE  503B               	movf	___lldiv@divisor+3,w,c
  5788  0017E0  5A37               	subwfb	___lldiv@dividend+3,f,c
  5789  0017E2  803C               	bsf	___lldiv@quotient,0,c
  5790  0017E4                     l2903:
  5791  0017E4  90D8               	bcf	status,0,c
  5792  0017E6  323B               	rrcf	___lldiv@divisor+3,f,c
  5793  0017E8  323A               	rrcf	___lldiv@divisor+2,f,c
  5794  0017EA  3239               	rrcf	___lldiv@divisor+1,f,c
  5795  0017EC  3238               	rrcf	___lldiv@divisor,f,c
  5796  0017EE  2E40               	decfsz	___lldiv@counter,f,c
  5797  0017F0  D7E1               	goto	l2895
  5798  0017F2                     l847:
  5799  0017F2  C03C  F034         	movff	___lldiv@quotient,?___lldiv
  5800  0017F6  C03D  F035         	movff	___lldiv@quotient+1,?___lldiv+1
  5801  0017FA  C03E  F036         	movff	___lldiv@quotient+2,?___lldiv+2
  5802  0017FE  C03F  F037         	movff	___lldiv@quotient+3,?___lldiv+3
  5803  001802  0012               	return		;funcret
  5804  001804                     __end_of___lldiv:
  5805                           	opt stack 0
  5806                           tblptru	equ	0xFF8
  5807                           tblptrh	equ	0xFF7
  5808                           tblptrl	equ	0xFF6
  5809                           tablat	equ	0xFF5
  5810                           prodh	equ	0xFF4
  5811                           prodl	equ	0xFF3
  5812                           intcon	equ	0xFF2
  5813                           intcon3	equ	0xFF0
  5814                           postinc0	equ	0xFEE
  5815                           wreg	equ	0xFE8
  5816                           indf2	equ	0xFDF
  5817                           postinc2	equ	0xFDE
  5818                           postdec2	equ	0xFDD
  5819                           fsr2h	equ	0xFDA
  5820                           fsr2l	equ	0xFD9
  5821                           status	equ	0xFD8
  5822                           
  5823 ;; *************** function _ISR *****************
  5824 ;; Defined at:
  5825 ;;		line 524 in file "../main.c"
  5826 ;; Parameters:    Size  Location     Type
  5827 ;;		None
  5828 ;; Auto vars:     Size  Location     Type
  5829 ;;  keypress        1   50[COMRAM] unsigned char 
  5830 ;; Return value:  Size  Location     Type
  5831 ;;                  1    wreg      void 
  5832 ;; Registers used:
  5833 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5834 ;; Tracked objects:
  5835 ;;		On entry : 0/0
  5836 ;;		On exit  : 0/0
  5837 ;;		Unchanged: 0/0
  5838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5839 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5840 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5841 ;;      Temps:         15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5842 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5843 ;;Total ram usage:       16 bytes
  5844 ;; Hardware stack levels used:    1
  5845 ;; Hardware stack levels required when called:    4
  5846 ;; This function calls:
  5847 ;;		_switchMenu
  5848 ;;		i2___awdiv
  5849 ;;		i2___awmod
  5850 ;;		i2_lcdInst
  5851 ;;		i2_printf
  5852 ;;		i2_stopOperation
  5853 ;; This function is called by:
  5854 ;;		Interrupt level 2
  5855 ;; This function uses a non-reentrant model
  5856 ;;
  5857                           
  5858                           	psect	intcode
  5859  000008                     __pintcode:
  5860                           	opt stack 0
  5861  000008                     _ISR:
  5862                           	opt stack 23
  5863                           
  5864                           ;incstack = 0
  5865  000008  824C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5866  00000A  EDF8  F003         	call	int_func,f	;refresh shadow registers
  5867                           tblptru	equ	0xFF8
  5868                           tblptrh	equ	0xFF7
  5869                           tblptrl	equ	0xFF6
  5870                           tablat	equ	0xFF5
  5871                           prodh	equ	0xFF4
  5872                           prodl	equ	0xFF3
  5873                           intcon	equ	0xFF2
  5874                           intcon3	equ	0xFF0
  5875                           postinc0	equ	0xFEE
  5876                           wreg	equ	0xFE8
  5877                           indf2	equ	0xFDF
  5878                           postinc2	equ	0xFDE
  5879                           postdec2	equ	0xFDD
  5880                           fsr2h	equ	0xFDA
  5881                           fsr2l	equ	0xFD9
  5882                           status	equ	0xFD8
  5883                           
  5884                           	psect	intcode_body
  5885  0007F0                     __pintcode_body:
  5886                           	opt stack 23
  5887  0007F0                     int_func:
  5888                           	opt stack 23
  5889  0007F0  0006               	pop		; remove dummy address from shadow register refresh
  5890  0007F2  CFFA F025          	movff	pclath,??_ISR+1
  5891  0007F6  CFFB F026          	movff	pclatu,??_ISR+2
  5892  0007FA  CFE9 F027          	movff	fsr0l,??_ISR+3
  5893  0007FE  CFEA F028          	movff	fsr0h,??_ISR+4
  5894  000802  CFE1 F029          	movff	fsr1l,??_ISR+5
  5895  000806  CFE2 F02A          	movff	fsr1h,??_ISR+6
  5896  00080A  CFD9 F02B          	movff	fsr2l,??_ISR+7
  5897  00080E  CFDA F02C          	movff	fsr2h,??_ISR+8
  5898  000812  CFF3 F02D          	movff	prodl,??_ISR+9
  5899  000816  CFF4 F02E          	movff	prodh,??_ISR+10
  5900  00081A  CFF6 F02F          	movff	tblptrl,??_ISR+11
  5901  00081E  CFF7 F030          	movff	tblptrh,??_ISR+12
  5902  000822  CFF8 F031          	movff	tblptru,??_ISR+13
  5903  000826  CFF5 F032          	movff	tablat,??_ISR+14
  5904                           
  5905                           ;main.c: 525: if (INT1IF){
  5906  00082A  A0F0               	btfss	intcon3,0,c	;volatile
  5907  00082C  D015               	goto	i2l3863
  5908                           
  5909                           ;main.c: 526: unsigned char keypress = (PORTB & 0xF0) >> 4;
  5910  00082E  3881               	swapf	3969,w,c	;volatile
  5911  000830  0B0F               	andlw	15
  5912  000832  0B0F               	andlw	15
  5913  000834  6E33               	movwf	ISR@keypress,c
  5914                           
  5915                           ;main.c: 527: switchMenu('4', '6', keys[keypress]);
  5916  000836  0E36               	movlw	54
  5917  000838  6E21               	movwf	switchMenu@right,c
  5918  00083A  5033               	movf	ISR@keypress,w,c
  5919  00083C  0D01               	mullw	1
  5920  00083E  0E47               	movlw	low _keys
  5921  000840  24F3               	addwf	prodl,w,c
  5922  000842  6EF6               	movwf	tblptrl,c
  5923  000844  0EFE               	movlw	high _keys
  5924  000846  20F4               	addwfc	prodh,w,c
  5925  000848  6EF7               	movwf	tblptrh,c
  5926  00084A                     	if	0	;There are less than 3 active tblptr bytes
  5927  00084A                     	endif
  5928  00084A  0008               	tblrd		*
  5929  00084C  CFF5 F022          	movff	tablat,switchMenu@key
  5930  000850  0E34               	movlw	52
  5931  000852  ECE4  F00A         	call	_switchMenu
  5932                           
  5933                           ;main.c: 528: INT1IF = 0;
  5934  000856  90F0               	bcf	intcon3,0,c	;volatile
  5935  000858                     i2l3863:
  5936                           
  5937                           ;main.c: 529: }
  5938                           ;main.c: 530: if (screenMode == 1 && TMR0IF){
  5939  000858  0100               	movlb	0	; () banked
  5940  00085A  05BE               	decf	_screenMode& (0+255),w,b
  5941  00085C  B4D8               	btfsc	status,2,c
  5942                           
  5943                           ; BSR set to: 0
  5944  00085E  A4F2               	btfss	intcon,2,c	;volatile
  5945  000860  D05E               	goto	i2l3917
  5946                           
  5947                           ; BSR set to: 0
  5948                           ;main.c: 531: TMR0IF = 0;
  5949  000862  94F2               	bcf	intcon,2,c	;volatile
  5950                           
  5951                           ; BSR set to: 0
  5952                           ;main.c: 532: TMR0 = 55770;
  5953  000864  0ED9               	movlw	217
  5954  000866  6ED7               	movwf	4055,c	;volatile
  5955  000868  0EDA               	movlw	218
  5956  00086A  6ED6               	movwf	4054,c	;volatile
  5957                           
  5958                           ; BSR set to: 0
  5959                           ;main.c: 533: opTimer++;
  5960  00086C  2A47               	incf	_opTimer,f,c
  5961                           
  5962                           ; BSR set to: 0
  5963                           ;main.c: 534: min = opTimer / 60;
  5964  00086E  C047  F001         	movff	_opTimer,i2___awdiv@dividend
  5965  000872  6A02               	clrf	i2___awdiv@dividend+1,c
  5966  000874  0E00               	movlw	0
  5967  000876  6E04               	movwf	i2___awdiv@divisor+1,c
  5968  000878  0E3C               	movlw	60
  5969  00087A  6E03               	movwf	i2___awdiv@divisor,c
  5970  00087C  EC7F  F00B         	call	i2___awdiv	;wreg free
  5971  000880  5001               	movf	?i2___awdiv,w,c
  5972  000882  0100               	movlb	0	; () banked
  5973  000884  6F93               	movwf	_min& (0+255),b
  5974                           
  5975                           ; BSR set to: 0
  5976                           ;main.c: 535: sec = opTimer % 60;
  5977  000886  C047  F001         	movff	_opTimer,i2___awmod@dividend
  5978  00088A  6A02               	clrf	i2___awmod@dividend+1,c
  5979  00088C  0E00               	movlw	0
  5980  00088E  6E04               	movwf	i2___awmod@divisor+1,c
  5981  000890  0E3C               	movlw	60
  5982  000892  6E03               	movwf	i2___awmod@divisor,c
  5983  000894  EC3A  F00C         	call	i2___awmod	;wreg free
  5984  000898  5001               	movf	?i2___awmod,w,c
  5985  00089A  0100               	movlb	0	; () banked
  5986  00089C  6F99               	movwf	_sec& (0+255),b
  5987                           
  5988                           ; BSR set to: 0
  5989                           ;main.c: 536: lcdInst(0b10000000);;
  5990  00089E  0E80               	movlw	128
  5991  0008A0  EC46  F00E         	call	i2_lcdInst
  5992                           
  5993                           ;main.c: 537: printf("RUNNING: %02d:%02d   ", min, sec);
  5994  0008A4  0EB1               	movlw	low STR_24
  5995  0008A6  6E0D               	movwf	i2printf@f,c
  5996  0008A8  0EFE               	movlw	high STR_24
  5997  0008AA  6E0E               	movwf	i2printf@f+1,c
  5998  0008AC  C093  F00F         	movff	_min,?i2_printf+2
  5999  0008B0  6A10               	clrf	?i2_printf+3,c
  6000  0008B2  C099  F011         	movff	_sec,?i2_printf+4
  6001  0008B6  6A12               	clrf	?i2_printf+5,c
  6002  0008B8  ECB3  F007         	call	i2_printf	;wreg free
  6003                           
  6004                           ;main.c: 538: if (waitPlats)
  6005  0008BC  0100               	movlb	0	; () banked
  6006  0008BE  51A0               	movf	_waitPlats& (0+255),w,b
  6007  0008C0  B4D8               	btfsc	status,2,c
  6008  0008C2  D002               	goto	i2l3885
  6009                           
  6010                           ; BSR set to: 0
  6011                           ;main.c: 539: waitPlats--;
  6012  0008C4  0100               	movlb	0	; () banked
  6013  0008C6  07A0               	decf	_waitPlats& (0+255),f,b
  6014  0008C8                     i2l3885:
  6015                           
  6016                           ; BSR set to: 0
  6017                           ;main.c: 540: if (opTimer >= 180){
  6018  0008C8  0EB3               	movlw	179
  6019  0008CA  6447               	cpfsgt	_opTimer,c
  6020  0008CC  D005               	goto	i2l3891
  6021                           
  6022                           ; BSR set to: 0
  6023                           ;main.c: 541: screenMode = 0;
  6024  0008CE  0E00               	movlw	0
  6025  0008D0  0100               	movlb	0	; () banked
  6026  0008D2  6FBE               	movwf	_screenMode& (0+255),b
  6027                           
  6028                           ; BSR set to: 0
  6029                           ;main.c: 542: stopOperation();
  6030  0008D4  EC6A  F00A         	call	i2_stopOperation	;wreg free
  6031  0008D8                     i2l3891:
  6032                           
  6033                           ;main.c: 543: }
  6034                           ;main.c: 544: if (LATCbits.LC0){
  6035  0008D8  A08B               	btfss	3979,0,c	;volatile
  6036  0008DA  D002               	goto	i2l3895
  6037                           
  6038                           ;main.c: 545: LATCbits.LC0 = 0;;
  6039  0008DC  908B               	bcf	3979,0,c	;volatile
  6040                           
  6041                           ;main.c: 546: }
  6042  0008DE  D007               	goto	i2l370
  6043  0008E0                     i2l3895:
  6044                           
  6045                           ;main.c: 547: else {
  6046                           ;main.c: 548: solOnTimer++;
  6047  0008E0  2A4B               	incf	_solOnTimer,f,c
  6048                           
  6049                           ;main.c: 549: if (solOnTimer >= 2){
  6050  0008E2  0E01               	movlw	1
  6051  0008E4  644B               	cpfsgt	_solOnTimer,c
  6052  0008E6  D003               	goto	i2l370
  6053                           
  6054                           ;main.c: 550: solOnTimer = 0;
  6055  0008E8  0E00               	movlw	0
  6056  0008EA  6E4B               	movwf	_solOnTimer,c
  6057                           
  6058                           ;main.c: 551: LATCbits.LC0 = 1;;
  6059  0008EC  808B               	bsf	3979,0,c	;volatile
  6060  0008EE                     i2l370:
  6061                           
  6062                           ;main.c: 552: }
  6063                           ;main.c: 553: }
  6064                           ;main.c: 554: if (!sorting){
  6065  0008EE  5048               	movf	_sorting,w,c
  6066  0008F0  A4D8               	btfss	status,2,c
  6067  0008F2  D013               	goto	i2l3915
  6068                           
  6069                           ;main.c: 555: if (ADRES > 50)
  6070  0008F4  50C4               	movf	4036,w,c	;volatile
  6071  0008F6  E104               	bnz	i2u395_40
  6072  0008F8  0E33               	movlw	51
  6073  0008FA  5CC3               	subwf	4035,w,c	;volatile
  6074  0008FC  A0D8               	btfss	status,0,c
  6075  0008FE  D002               	goto	i2l3907
  6076  000900                     i2u395_40:
  6077                           
  6078                           ;main.c: 556: doneTimer++;
  6079  000900  2A46               	incf	_doneTimer,f,c
  6080  000902  D002               	goto	i2l3909
  6081  000904                     i2l3907:
  6082                           
  6083                           ;main.c: 557: else
  6084                           ;main.c: 558: doneTimer = 0;
  6085  000904  0E00               	movlw	0
  6086  000906  6E46               	movwf	_doneTimer,c
  6087  000908                     i2l3909:
  6088                           
  6089                           ;main.c: 559: if (doneTimer >= 10){
  6090  000908  0E09               	movlw	9
  6091  00090A  6446               	cpfsgt	_doneTimer,c
  6092  00090C  D008               	goto	i2l3917
  6093                           
  6094                           ;main.c: 560: screenMode = 0;
  6095  00090E  0E00               	movlw	0
  6096  000910  0100               	movlb	0	; () banked
  6097  000912  6FBE               	movwf	_screenMode& (0+255),b
  6098                           
  6099                           ; BSR set to: 0
  6100                           ;main.c: 561: stopOperation();
  6101  000914  EC6A  F00A         	call	i2_stopOperation	;wreg free
  6102                           
  6103                           ;main.c: 562: }
  6104                           ;main.c: 563: }
  6105  000918  D002               	goto	i2l3917
  6106  00091A                     i2l3915:
  6107                           
  6108                           ;main.c: 564: else
  6109                           ;main.c: 565: doneTimer = 0;
  6110  00091A  0E00               	movlw	0
  6111  00091C  6E46               	movwf	_doneTimer,c
  6112  00091E                     i2l3917:
  6113                           
  6114                           ;main.c: 566: }
  6115                           ;main.c: 567: if (screenMode == 1 && TMR1IF){
  6116  00091E  0100               	movlb	0	; () banked
  6117  000920  05BE               	decf	_screenMode& (0+255),w,b
  6118  000922  B4D8               	btfsc	status,2,c
  6119                           
  6120                           ; BSR set to: 0
  6121  000924  A09E               	btfss	3998,0,c	;volatile
  6122  000926  D139               	goto	i2l423
  6123                           
  6124                           ; BSR set to: 0
  6125                           ;main.c: 568: TMR1IF = 0;
  6126  000928  909E               	bcf	3998,0,c	;volatile
  6127                           
  6128                           ; BSR set to: 0
  6129                           ;main.c: 569: TMR1 = 58035;
  6130  00092A  0EE2               	movlw	226
  6131  00092C  6ECF               	movwf	4047,c	;volatile
  6132  00092E  0EB3               	movlw	179
  6133  000930  6ECE               	movwf	4046,c	;volatile
  6134                           
  6135                           ;main.c: 570: if (stepGear != 0){
  6136  000932  0100               	movlb	0	; () banked
  6137  000934  519B               	movf	_stepGear& (0+255),w,b
  6138  000936  B4D8               	btfsc	status,2,c
  6139  000938  D068               	goto	i2l3963
  6140                           
  6141                           ; BSR set to: 0
  6142                           ;main.c: 571: if (stepGear == 1){
  6143  00093A  0100               	movlb	0	; () banked
  6144  00093C  059B               	decf	_stepGear& (0+255),w,b
  6145  00093E  A4D8               	btfss	status,2,c
  6146  000940  D01E               	goto	i2l3937
  6147                           
  6148                           ; BSR set to: 0
  6149                           ;main.c: 572: stepAmount++;
  6150  000942  4A44               	infsnz	_stepAmount,f,c
  6151  000944  2A45               	incf	_stepAmount+1,f,c
  6152                           
  6153                           ; BSR set to: 0
  6154                           ;main.c: 573: LATCbits.LC2 = !LATCbits.LC2;;
  6155  000946  B48B               	btfsc	3979,2,c	;volatile
  6156  000948  D003               	goto	i2u401_40
  6157  00094A  6A24               	clrf	??_ISR& (0+255),c
  6158  00094C  2A24               	incf	??_ISR& (0+255),f,c
  6159  00094E  D001               	goto	i2u402_48
  6160  000950                     i2u401_40:
  6161  000950  6A24               	clrf	??_ISR& (0+255),c
  6162  000952                     i2u402_48:
  6163  000952  4624               	rlncf	??_ISR,f,c
  6164  000954  4624               	rlncf	??_ISR,f,c
  6165  000956  508B               	movf	3979,w,c	;volatile
  6166  000958  1824               	xorwf	??_ISR,w,c
  6167  00095A  0BFB               	andlw	-5
  6168  00095C  1824               	xorwf	??_ISR,w,c
  6169  00095E  6E8B               	movwf	3979,c	;volatile
  6170                           
  6171                           ;main.c: 574: if (stepAmount >= 420){
  6172  000960  0EA4               	movlw	164
  6173  000962  5C44               	subwf	_stepAmount,w,c
  6174  000964  0E01               	movlw	1
  6175  000966  5845               	subwfb	_stepAmount+1,w,c
  6176  000968  A0D8               	btfss	status,0,c
  6177  00096A  D04F               	goto	i2l3963
  6178                           
  6179                           ;main.c: 575: stepAmount = 0;
  6180  00096C  0E00               	movlw	0
  6181  00096E  6E45               	movwf	_stepAmount+1,c
  6182  000970  0E00               	movlw	0
  6183  000972  6E44               	movwf	_stepAmount,c
  6184                           
  6185                           ;main.c: 576: stepGear = 2;
  6186  000974  0E02               	movlw	2
  6187  000976  0100               	movlb	0	; () banked
  6188  000978  6F9B               	movwf	_stepGear& (0+255),b
  6189                           
  6190                           ; BSR set to: 0
  6191                           ;main.c: 577: LATCbits.LC1= 1;;
  6192  00097A  828B               	bsf	3979,1,c	;volatile
  6193                           
  6194                           ; BSR set to: 0
  6195                           ;main.c: 578: }
  6196                           ;main.c: 579: }
  6197  00097C  D046               	goto	i2l3963
  6198  00097E                     i2l3937:
  6199                           
  6200                           ; BSR set to: 0
  6201                           ;main.c: 580: else if (stepGear == 2){
  6202  00097E  0E02               	movlw	2
  6203  000980  0100               	movlb	0	; () banked
  6204  000982  199B               	xorwf	_stepGear& (0+255),w,b
  6205  000984  A4D8               	btfss	status,2,c
  6206  000986  D01E               	goto	i2l3949
  6207                           
  6208                           ; BSR set to: 0
  6209                           ;main.c: 581: stepAmount++;
  6210  000988  4A44               	infsnz	_stepAmount,f,c
  6211  00098A  2A45               	incf	_stepAmount+1,f,c
  6212                           
  6213                           ; BSR set to: 0
  6214                           ;main.c: 582: LATCbits.LC2 = !LATCbits.LC2;;
  6215  00098C  B48B               	btfsc	3979,2,c	;volatile
  6216  00098E  D003               	goto	i2u405_40
  6217  000990  6A24               	clrf	??_ISR& (0+255),c
  6218  000992  2A24               	incf	??_ISR& (0+255),f,c
  6219  000994  D001               	goto	i2u406_48
  6220  000996                     i2u405_40:
  6221  000996  6A24               	clrf	??_ISR& (0+255),c
  6222  000998                     i2u406_48:
  6223  000998  4624               	rlncf	??_ISR,f,c
  6224  00099A  4624               	rlncf	??_ISR,f,c
  6225  00099C  508B               	movf	3979,w,c	;volatile
  6226  00099E  1824               	xorwf	??_ISR,w,c
  6227  0009A0  0BFB               	andlw	-5
  6228  0009A2  1824               	xorwf	??_ISR,w,c
  6229  0009A4  6E8B               	movwf	3979,c	;volatile
  6230                           
  6231                           ;main.c: 583: if (stepAmount >= 40){
  6232  0009A6  5045               	movf	_stepAmount+1,w,c
  6233  0009A8  E104               	bnz	i2u407_40
  6234  0009AA  0E28               	movlw	40
  6235  0009AC  5C44               	subwf	_stepAmount,w,c
  6236  0009AE  A0D8               	btfss	status,0,c
  6237  0009B0  D02C               	goto	i2l3963
  6238  0009B2                     i2u407_40:
  6239                           
  6240                           ;main.c: 584: stepAmount = 0;
  6241  0009B2  0E00               	movlw	0
  6242  0009B4  6E45               	movwf	_stepAmount+1,c
  6243  0009B6  0E00               	movlw	0
  6244  0009B8  6E44               	movwf	_stepAmount,c
  6245                           
  6246                           ;main.c: 585: stepGear = 3;
  6247  0009BA  0E03               	movlw	3
  6248  0009BC  0100               	movlb	0	; () banked
  6249  0009BE  6F9B               	movwf	_stepGear& (0+255),b
  6250                           
  6251                           ; BSR set to: 0
  6252                           ;main.c: 586: LATCbits.LC1= 0;;
  6253  0009C0  928B               	bcf	3979,1,c	;volatile
  6254                           
  6255                           ; BSR set to: 0
  6256                           ;main.c: 587: }
  6257                           ;main.c: 588: }
  6258  0009C2  D023               	goto	i2l3963
  6259  0009C4                     i2l3949:
  6260                           
  6261                           ; BSR set to: 0
  6262                           ;main.c: 589: else if (stepGear == 3){
  6263  0009C4  0E03               	movlw	3
  6264  0009C6  0100               	movlb	0	; () banked
  6265  0009C8  199B               	xorwf	_stepGear& (0+255),w,b
  6266  0009CA  A4D8               	btfss	status,2,c
  6267  0009CC  D01E               	goto	i2l3963
  6268                           
  6269                           ; BSR set to: 0
  6270                           ;main.c: 590: stepAmount ++;
  6271  0009CE  4A44               	infsnz	_stepAmount,f,c
  6272  0009D0  2A45               	incf	_stepAmount+1,f,c
  6273                           
  6274                           ; BSR set to: 0
  6275                           ;main.c: 591: LATCbits.LC2 = !LATCbits.LC2;;
  6276  0009D2  B48B               	btfsc	3979,2,c	;volatile
  6277  0009D4  D003               	goto	i2u409_40
  6278  0009D6  6A24               	clrf	??_ISR& (0+255),c
  6279  0009D8  2A24               	incf	??_ISR& (0+255),f,c
  6280  0009DA  D001               	goto	i2u410_48
  6281  0009DC                     i2u409_40:
  6282  0009DC  6A24               	clrf	??_ISR& (0+255),c
  6283  0009DE                     i2u410_48:
  6284  0009DE  4624               	rlncf	??_ISR,f,c
  6285  0009E0  4624               	rlncf	??_ISR,f,c
  6286  0009E2  508B               	movf	3979,w,c	;volatile
  6287  0009E4  1824               	xorwf	??_ISR,w,c
  6288  0009E6  0BFB               	andlw	-5
  6289  0009E8  1824               	xorwf	??_ISR,w,c
  6290  0009EA  6E8B               	movwf	3979,c	;volatile
  6291                           
  6292                           ;main.c: 592: if (stepAmount >= 20){
  6293  0009EC  5045               	movf	_stepAmount+1,w,c
  6294  0009EE  E104               	bnz	i2u411_40
  6295  0009F0  0E14               	movlw	20
  6296  0009F2  5C44               	subwf	_stepAmount,w,c
  6297  0009F4  A0D8               	btfss	status,0,c
  6298  0009F6  D009               	goto	i2l3963
  6299  0009F8                     i2u411_40:
  6300                           
  6301                           ;main.c: 593: stepAmount = 0;
  6302  0009F8  0E00               	movlw	0
  6303  0009FA  6E45               	movwf	_stepAmount+1,c
  6304  0009FC  0E00               	movlw	0
  6305  0009FE  6E44               	movwf	_stepAmount,c
  6306                           
  6307                           ;main.c: 594: stepGear = 0;
  6308  000A00  0E00               	movlw	0
  6309  000A02  0100               	movlb	0	; () banked
  6310  000A04  6F9B               	movwf	_stepGear& (0+255),b
  6311                           
  6312                           ; BSR set to: 0
  6313                           ;main.c: 595: LATCbits.LC1= 1;;
  6314  000A06  828B               	bsf	3979,1,c	;volatile
  6315                           
  6316                           ; BSR set to: 0
  6317                           ;main.c: 596: LATCbits.LC2 = 0;;
  6318  000A08  948B               	bcf	3979,2,c	;volatile
  6319  000A0A                     i2l3963:
  6320                           
  6321                           ;main.c: 597: }
  6322                           ;main.c: 598: }
  6323                           ;main.c: 599: }
  6324                           ;main.c: 600: if (plat1Left){
  6325  000A0A  0100               	movlb	0	; () banked
  6326  000A0C  5187               	movf	_plat1Left& (0+255),w,b
  6327  000A0E  0100               	movlb	0	; () banked
  6328  000A10  1188               	iorwf	(_plat1Left+1)& (0+255),w,b
  6329  000A12  B4D8               	btfsc	status,2,c
  6330  000A14  D02C               	goto	i2l3993
  6331                           
  6332                           ; BSR set to: 0
  6333                           ;main.c: 601: if (step1 == 1){
  6334  000A16  0449               	decf	_step1,w,c
  6335  000A18  A4D8               	btfss	status,2,c
  6336  000A1A  D002               	goto	i2l3969
  6337                           
  6338                           ; BSR set to: 0
  6339                           ;main.c: 602: LATAbits.LA5 = 1;;
  6340  000A1C  8A89               	bsf	3977,5,c	;volatile
  6341                           
  6342                           ;main.c: 603: LATAbits.LA4 = 0;;
  6343  000A1E  9889               	bcf	3977,4,c	;volatile
  6344  000A20                     i2l3969:
  6345                           
  6346                           ; BSR set to: 0
  6347                           ;main.c: 604: }
  6348                           ;main.c: 605: if (step1 == 2){
  6349  000A20  0E02               	movlw	2
  6350  000A22  1849               	xorwf	_step1,w,c
  6351  000A24  A4D8               	btfss	status,2,c
  6352  000A26  D002               	goto	i2l3973
  6353                           
  6354                           ; BSR set to: 0
  6355                           ;main.c: 606: LATAbits.LA2 = 0;;
  6356  000A28  9489               	bcf	3977,2,c	;volatile
  6357                           
  6358                           ;main.c: 607: LATAbits.LA3 = 1;;
  6359  000A2A  8689               	bsf	3977,3,c	;volatile
  6360  000A2C                     i2l3973:
  6361                           
  6362                           ; BSR set to: 0
  6363                           ;main.c: 608: }
  6364                           ;main.c: 609: if (step1 == 3){
  6365  000A2C  0E03               	movlw	3
  6366  000A2E  1849               	xorwf	_step1,w,c
  6367  000A30  A4D8               	btfss	status,2,c
  6368  000A32  D002               	goto	i2l3977
  6369                           
  6370                           ; BSR set to: 0
  6371                           ;main.c: 610: LATAbits.LA5 = 0;;
  6372  000A34  9A89               	bcf	3977,5,c	;volatile
  6373                           
  6374                           ;main.c: 611: LATAbits.LA4 = 1;;
  6375  000A36  8889               	bsf	3977,4,c	;volatile
  6376  000A38                     i2l3977:
  6377                           
  6378                           ; BSR set to: 0
  6379                           ;main.c: 612: }
  6380                           ;main.c: 613: if (step1 == 4){
  6381  000A38  0E04               	movlw	4
  6382  000A3A  1849               	xorwf	_step1,w,c
  6383  000A3C  A4D8               	btfss	status,2,c
  6384  000A3E  D002               	goto	i2l3981
  6385                           
  6386                           ; BSR set to: 0
  6387                           ;main.c: 614: LATAbits.LA2 = 1;;
  6388  000A40  8489               	bsf	3977,2,c	;volatile
  6389                           
  6390                           ;main.c: 615: LATAbits.LA3 = 0;;
  6391  000A42  9689               	bcf	3977,3,c	;volatile
  6392  000A44                     i2l3981:
  6393                           
  6394                           ; BSR set to: 0
  6395                           ;main.c: 616: }
  6396                           ;main.c: 617: plat1Left++;
  6397  000A44  0100               	movlb	0	; () banked
  6398  000A46  4B87               	infsnz	_plat1Left& (0+255),f,b
  6399  000A48  2B88               	incf	(_plat1Left+1)& (0+255),f,b
  6400                           
  6401                           ; BSR set to: 0
  6402                           ;main.c: 618: if (plat1Left>=512){
  6403  000A4A  0E02               	movlw	2
  6404  000A4C  0100               	movlb	0	; () banked
  6405  000A4E  5D88               	subwf	(_plat1Left+1)& (0+255),w,b
  6406  000A50  A0D8               	btfss	status,0,c
  6407  000A52  D006               	goto	i2l3987
  6408                           
  6409                           ; BSR set to: 0
  6410                           ;main.c: 619: plat1Left = 0;
  6411  000A54  0E00               	movlw	0
  6412  000A56  0100               	movlb	0	; () banked
  6413  000A58  6F88               	movwf	(_plat1Left+1)& (0+255),b
  6414  000A5A  0E00               	movlw	0
  6415  000A5C  6F87               	movwf	_plat1Left& (0+255),b
  6416                           
  6417                           ;main.c: 620: }
  6418  000A5E  D007               	goto	i2l3993
  6419  000A60                     i2l3987:
  6420                           
  6421                           ; BSR set to: 0
  6422                           ;main.c: 621: else if (step1>=4)
  6423  000A60  0E03               	movlw	3
  6424  000A62  6449               	cpfsgt	_step1,c
  6425  000A64  D003               	goto	i2l3991
  6426                           
  6427                           ; BSR set to: 0
  6428                           ;main.c: 622: step1 = 1;
  6429  000A66  0E01               	movlw	1
  6430  000A68  6E49               	movwf	_step1,c
  6431  000A6A  D001               	goto	i2l3993
  6432  000A6C                     i2l3991:
  6433                           
  6434                           ; BSR set to: 0
  6435                           ;main.c: 623: else
  6436                           ;main.c: 624: step1++;
  6437  000A6C  2A49               	incf	_step1,f,c
  6438  000A6E                     i2l3993:
  6439                           
  6440                           ; BSR set to: 0
  6441                           ;main.c: 625: }
  6442                           ;main.c: 626: if (plat1Right){
  6443  000A6E  0100               	movlb	0	; () banked
  6444  000A70  5189               	movf	_plat1Right& (0+255),w,b
  6445  000A72  0100               	movlb	0	; () banked
  6446  000A74  118A               	iorwf	(_plat1Right+1)& (0+255),w,b
  6447  000A76  B4D8               	btfsc	status,2,c
  6448  000A78  D02C               	goto	i2l4023
  6449                           
  6450                           ; BSR set to: 0
  6451                           ;main.c: 627: if (step1 == 4){
  6452  000A7A  0E04               	movlw	4
  6453  000A7C  1849               	xorwf	_step1,w,c
  6454  000A7E  A4D8               	btfss	status,2,c
  6455  000A80  D002               	goto	i2l3999
  6456                           
  6457                           ; BSR set to: 0
  6458                           ;main.c: 628: LATAbits.LA5 = 0;;
  6459  000A82  9A89               	bcf	3977,5,c	;volatile
  6460                           
  6461                           ;main.c: 629: LATAbits.LA4 = 1;;
  6462  000A84  8889               	bsf	3977,4,c	;volatile
  6463  000A86                     i2l3999:
  6464                           
  6465                           ; BSR set to: 0
  6466                           ;main.c: 630: }
  6467                           ;main.c: 631: if (step1 == 3){
  6468  000A86  0E03               	movlw	3
  6469  000A88  1849               	xorwf	_step1,w,c
  6470  000A8A  A4D8               	btfss	status,2,c
  6471  000A8C  D002               	goto	i2l4003
  6472                           
  6473                           ; BSR set to: 0
  6474                           ;main.c: 632: LATAbits.LA2 = 0;;
  6475  000A8E  9489               	bcf	3977,2,c	;volatile
  6476                           
  6477                           ;main.c: 633: LATAbits.LA3 = 1;;
  6478  000A90  8689               	bsf	3977,3,c	;volatile
  6479  000A92                     i2l4003:
  6480                           
  6481                           ; BSR set to: 0
  6482                           ;main.c: 634: }
  6483                           ;main.c: 635: if (step1 == 2){
  6484  000A92  0E02               	movlw	2
  6485  000A94  1849               	xorwf	_step1,w,c
  6486  000A96  A4D8               	btfss	status,2,c
  6487  000A98  D002               	goto	i2l4007
  6488                           
  6489                           ; BSR set to: 0
  6490                           ;main.c: 636: LATAbits.LA5 = 1;;
  6491  000A9A  8A89               	bsf	3977,5,c	;volatile
  6492                           
  6493                           ;main.c: 637: LATAbits.LA4 = 0;;
  6494  000A9C  9889               	bcf	3977,4,c	;volatile
  6495  000A9E                     i2l4007:
  6496                           
  6497                           ; BSR set to: 0
  6498                           ;main.c: 638: }
  6499                           ;main.c: 639: if (step1 == 1){
  6500  000A9E  0449               	decf	_step1,w,c
  6501  000AA0  A4D8               	btfss	status,2,c
  6502  000AA2  D002               	goto	i2l4011
  6503                           
  6504                           ; BSR set to: 0
  6505                           ;main.c: 640: LATAbits.LA2 = 1;;
  6506  000AA4  8489               	bsf	3977,2,c	;volatile
  6507                           
  6508                           ;main.c: 641: LATAbits.LA3 = 0;;
  6509  000AA6  9689               	bcf	3977,3,c	;volatile
  6510  000AA8                     i2l4011:
  6511                           
  6512                           ; BSR set to: 0
  6513                           ;main.c: 642: }
  6514                           ;main.c: 643: plat1Right++;
  6515  000AA8  0100               	movlb	0	; () banked
  6516  000AAA  4B89               	infsnz	_plat1Right& (0+255),f,b
  6517  000AAC  2B8A               	incf	(_plat1Right+1)& (0+255),f,b
  6518                           
  6519                           ; BSR set to: 0
  6520                           ;main.c: 644: if (plat1Right>=512){
  6521  000AAE  0E02               	movlw	2
  6522  000AB0  0100               	movlb	0	; () banked
  6523  000AB2  5D8A               	subwf	(_plat1Right+1)& (0+255),w,b
  6524  000AB4  A0D8               	btfss	status,0,c
  6525  000AB6  D006               	goto	i2l4017
  6526                           
  6527                           ; BSR set to: 0
  6528                           ;main.c: 645: plat1Right = 0;
  6529  000AB8  0E00               	movlw	0
  6530  000ABA  0100               	movlb	0	; () banked
  6531  000ABC  6F8A               	movwf	(_plat1Right+1)& (0+255),b
  6532  000ABE  0E00               	movlw	0
  6533  000AC0  6F89               	movwf	_plat1Right& (0+255),b
  6534                           
  6535                           ;main.c: 646: }
  6536  000AC2  D007               	goto	i2l4023
  6537  000AC4                     i2l4017:
  6538                           
  6539                           ; BSR set to: 0
  6540                           ;main.c: 647: else if (step1<=1)
  6541  000AC4  0E02               	movlw	2
  6542  000AC6  6049               	cpfslt	_step1,c
  6543  000AC8  D003               	goto	i2l4021
  6544                           
  6545                           ; BSR set to: 0
  6546                           ;main.c: 648: step1 = 4;
  6547  000ACA  0E04               	movlw	4
  6548  000ACC  6E49               	movwf	_step1,c
  6549  000ACE  D001               	goto	i2l4023
  6550  000AD0                     i2l4021:
  6551                           
  6552                           ; BSR set to: 0
  6553                           ;main.c: 649: else
  6554                           ;main.c: 650: step1--;
  6555  000AD0  0649               	decf	_step1,f,c
  6556  000AD2                     i2l4023:
  6557                           
  6558                           ; BSR set to: 0
  6559                           ;main.c: 651: }
  6560                           ;main.c: 652: if (plat2Left){
  6561  000AD2  0100               	movlb	0	; () banked
  6562  000AD4  518B               	movf	_plat2Left& (0+255),w,b
  6563  000AD6  0100               	movlb	0	; () banked
  6564  000AD8  118C               	iorwf	(_plat2Left+1)& (0+255),w,b
  6565  000ADA  B4D8               	btfsc	status,2,c
  6566  000ADC  D02C               	goto	i2l4053
  6567                           
  6568                           ; BSR set to: 0
  6569                           ;main.c: 653: if (step2 == 1){
  6570  000ADE  044A               	decf	_step2,w,c
  6571  000AE0  A4D8               	btfss	status,2,c
  6572  000AE2  D002               	goto	i2l4029
  6573                           
  6574                           ; BSR set to: 0
  6575                           ;main.c: 654: LATAbits.LA6 = 1;;
  6576  000AE4  8C89               	bsf	3977,6,c	;volatile
  6577                           
  6578                           ;main.c: 655: LATCbits.LC6 = 0;;
  6579  000AE6  9C8B               	bcf	3979,6,c	;volatile
  6580  000AE8                     i2l4029:
  6581                           
  6582                           ; BSR set to: 0
  6583                           ;main.c: 656: }
  6584                           ;main.c: 657: if (step2 == 2){
  6585  000AE8  0E02               	movlw	2
  6586  000AEA  184A               	xorwf	_step2,w,c
  6587  000AEC  A4D8               	btfss	status,2,c
  6588  000AEE  D002               	goto	i2l4033
  6589                           
  6590                           ; BSR set to: 0
  6591                           ;main.c: 658: LATBbits.LB0 = 0;;
  6592  000AF0  908A               	bcf	3978,0,c	;volatile
  6593                           
  6594                           ;main.c: 659: LATBbits.LB2 = 1;;
  6595  000AF2  848A               	bsf	3978,2,c	;volatile
  6596  000AF4                     i2l4033:
  6597                           
  6598                           ; BSR set to: 0
  6599                           ;main.c: 660: }
  6600                           ;main.c: 661: if (step2 == 3){
  6601  000AF4  0E03               	movlw	3
  6602  000AF6  184A               	xorwf	_step2,w,c
  6603  000AF8  A4D8               	btfss	status,2,c
  6604  000AFA  D002               	goto	i2l4037
  6605                           
  6606                           ; BSR set to: 0
  6607                           ;main.c: 662: LATAbits.LA6 = 0;;
  6608  000AFC  9C89               	bcf	3977,6,c	;volatile
  6609                           
  6610                           ;main.c: 663: LATCbits.LC6 = 1;;
  6611  000AFE  8C8B               	bsf	3979,6,c	;volatile
  6612  000B00                     i2l4037:
  6613                           
  6614                           ; BSR set to: 0
  6615                           ;main.c: 664: }
  6616                           ;main.c: 665: if (step2 == 4){
  6617  000B00  0E04               	movlw	4
  6618  000B02  184A               	xorwf	_step2,w,c
  6619  000B04  A4D8               	btfss	status,2,c
  6620  000B06  D002               	goto	i2l4041
  6621                           
  6622                           ; BSR set to: 0
  6623                           ;main.c: 666: LATBbits.LB0 = 1;;
  6624  000B08  808A               	bsf	3978,0,c	;volatile
  6625                           
  6626                           ;main.c: 667: LATBbits.LB2 = 0;;
  6627  000B0A  948A               	bcf	3978,2,c	;volatile
  6628  000B0C                     i2l4041:
  6629                           
  6630                           ; BSR set to: 0
  6631                           ;main.c: 668: }
  6632                           ;main.c: 669: plat2Left++;
  6633  000B0C  0100               	movlb	0	; () banked
  6634  000B0E  4B8B               	infsnz	_plat2Left& (0+255),f,b
  6635  000B10  2B8C               	incf	(_plat2Left+1)& (0+255),f,b
  6636                           
  6637                           ; BSR set to: 0
  6638                           ;main.c: 670: if (plat2Left>=512){
  6639  000B12  0E02               	movlw	2
  6640  000B14  0100               	movlb	0	; () banked
  6641  000B16  5D8C               	subwf	(_plat2Left+1)& (0+255),w,b
  6642  000B18  A0D8               	btfss	status,0,c
  6643  000B1A  D006               	goto	i2l4047
  6644                           
  6645                           ; BSR set to: 0
  6646                           ;main.c: 671: plat2Left = 0;
  6647  000B1C  0E00               	movlw	0
  6648  000B1E  0100               	movlb	0	; () banked
  6649  000B20  6F8C               	movwf	(_plat2Left+1)& (0+255),b
  6650  000B22  0E00               	movlw	0
  6651  000B24  6F8B               	movwf	_plat2Left& (0+255),b
  6652                           
  6653                           ;main.c: 672: }
  6654  000B26  D007               	goto	i2l4053
  6655  000B28                     i2l4047:
  6656                           
  6657                           ; BSR set to: 0
  6658                           ;main.c: 673: else if (step2>=4)
  6659  000B28  0E03               	movlw	3
  6660  000B2A  644A               	cpfsgt	_step2,c
  6661  000B2C  D003               	goto	i2l4051
  6662                           
  6663                           ; BSR set to: 0
  6664                           ;main.c: 674: step2 = 1;
  6665  000B2E  0E01               	movlw	1
  6666  000B30  6E4A               	movwf	_step2,c
  6667  000B32  D001               	goto	i2l4053
  6668  000B34                     i2l4051:
  6669                           
  6670                           ; BSR set to: 0
  6671                           ;main.c: 675: else
  6672                           ;main.c: 676: step2++;
  6673  000B34  2A4A               	incf	_step2,f,c
  6674  000B36                     i2l4053:
  6675                           
  6676                           ; BSR set to: 0
  6677                           ;main.c: 677: }
  6678                           ;main.c: 678: if (plat2Right){
  6679  000B36  0100               	movlb	0	; () banked
  6680  000B38  518D               	movf	_plat2Right& (0+255),w,b
  6681  000B3A  0100               	movlb	0	; () banked
  6682  000B3C  118E               	iorwf	(_plat2Right+1)& (0+255),w,b
  6683  000B3E  B4D8               	btfsc	status,2,c
  6684  000B40  D02C               	goto	i2l423
  6685                           
  6686                           ; BSR set to: 0
  6687                           ;main.c: 679: if (step2 == 4){
  6688  000B42  0E04               	movlw	4
  6689  000B44  184A               	xorwf	_step2,w,c
  6690  000B46  A4D8               	btfss	status,2,c
  6691  000B48  D002               	goto	i2l4059
  6692                           
  6693                           ; BSR set to: 0
  6694                           ;main.c: 680: LATAbits.LA6 = 0;;
  6695  000B4A  9C89               	bcf	3977,6,c	;volatile
  6696                           
  6697                           ;main.c: 681: LATCbits.LC6 = 1;;
  6698  000B4C  8C8B               	bsf	3979,6,c	;volatile
  6699  000B4E                     i2l4059:
  6700                           
  6701                           ; BSR set to: 0
  6702                           ;main.c: 682: }
  6703                           ;main.c: 683: if (step2 == 3){
  6704  000B4E  0E03               	movlw	3
  6705  000B50  184A               	xorwf	_step2,w,c
  6706  000B52  A4D8               	btfss	status,2,c
  6707  000B54  D002               	goto	i2l4063
  6708                           
  6709                           ; BSR set to: 0
  6710                           ;main.c: 684: LATBbits.LB0 = 0;;
  6711  000B56  908A               	bcf	3978,0,c	;volatile
  6712                           
  6713                           ;main.c: 685: LATBbits.LB2 = 1;;
  6714  000B58  848A               	bsf	3978,2,c	;volatile
  6715  000B5A                     i2l4063:
  6716                           
  6717                           ; BSR set to: 0
  6718                           ;main.c: 686: }
  6719                           ;main.c: 687: if (step2 == 2){
  6720  000B5A  0E02               	movlw	2
  6721  000B5C  184A               	xorwf	_step2,w,c
  6722  000B5E  A4D8               	btfss	status,2,c
  6723  000B60  D002               	goto	i2l4067
  6724                           
  6725                           ; BSR set to: 0
  6726                           ;main.c: 688: LATAbits.LA6 = 1;;
  6727  000B62  8C89               	bsf	3977,6,c	;volatile
  6728                           
  6729                           ;main.c: 689: LATCbits.LC6 = 0;;
  6730  000B64  9C8B               	bcf	3979,6,c	;volatile
  6731  000B66                     i2l4067:
  6732                           
  6733                           ; BSR set to: 0
  6734                           ;main.c: 690: }
  6735                           ;main.c: 691: if (step2 == 1){
  6736  000B66  044A               	decf	_step2,w,c
  6737  000B68  A4D8               	btfss	status,2,c
  6738  000B6A  D002               	goto	i2l4071
  6739                           
  6740                           ; BSR set to: 0
  6741                           ;main.c: 692: LATBbits.LB0 = 1;;
  6742  000B6C  808A               	bsf	3978,0,c	;volatile
  6743                           
  6744                           ;main.c: 693: LATBbits.LB2 = 0;;
  6745  000B6E  948A               	bcf	3978,2,c	;volatile
  6746  000B70                     i2l4071:
  6747                           
  6748                           ; BSR set to: 0
  6749                           ;main.c: 694: }
  6750                           ;main.c: 695: plat2Right++;
  6751  000B70  0100               	movlb	0	; () banked
  6752  000B72  4B8D               	infsnz	_plat2Right& (0+255),f,b
  6753  000B74  2B8E               	incf	(_plat2Right+1)& (0+255),f,b
  6754                           
  6755                           ; BSR set to: 0
  6756                           ;main.c: 696: if (plat2Right>=512){
  6757  000B76  0E02               	movlw	2
  6758  000B78  0100               	movlb	0	; () banked
  6759  000B7A  5D8E               	subwf	(_plat2Right+1)& (0+255),w,b
  6760  000B7C  A0D8               	btfss	status,0,c
  6761  000B7E  D006               	goto	i2l4077
  6762                           
  6763                           ; BSR set to: 0
  6764                           ;main.c: 697: plat2Right = 0;
  6765  000B80  0E00               	movlw	0
  6766  000B82  0100               	movlb	0	; () banked
  6767  000B84  6F8E               	movwf	(_plat2Right+1)& (0+255),b
  6768  000B86  0E00               	movlw	0
  6769  000B88  6F8D               	movwf	_plat2Right& (0+255),b
  6770                           
  6771                           ;main.c: 698: }
  6772  000B8A  D007               	goto	i2l423
  6773  000B8C                     i2l4077:
  6774                           
  6775                           ; BSR set to: 0
  6776                           ;main.c: 699: else if (step2<=1)
  6777  000B8C  0E02               	movlw	2
  6778  000B8E  604A               	cpfslt	_step2,c
  6779  000B90  D003               	goto	i2l4081
  6780                           
  6781                           ; BSR set to: 0
  6782                           ;main.c: 700: step2 = 4;
  6783  000B92  0E04               	movlw	4
  6784  000B94  6E4A               	movwf	_step2,c
  6785  000B96  D001               	goto	i2l423
  6786  000B98                     i2l4081:
  6787                           
  6788                           ; BSR set to: 0
  6789                           ;main.c: 701: else
  6790                           ;main.c: 702: step2--;
  6791  000B98  064A               	decf	_step2,f,c
  6792  000B9A                     i2l423:
  6793                           
  6794                           ; BSR set to: 0
  6795  000B9A  C032  FFF5         	movff	??_ISR+14,tablat
  6796  000B9E  C031  FFF8         	movff	??_ISR+13,tblptru
  6797  000BA2  C030  FFF7         	movff	??_ISR+12,tblptrh
  6798  000BA6  C02F  FFF6         	movff	??_ISR+11,tblptrl
  6799  000BAA  C02E  FFF4         	movff	??_ISR+10,prodh
  6800  000BAE  C02D  FFF3         	movff	??_ISR+9,prodl
  6801  000BB2  C02C  FFDA         	movff	??_ISR+8,fsr2h
  6802  000BB6  C02B  FFD9         	movff	??_ISR+7,fsr2l
  6803  000BBA  C02A  FFE2         	movff	??_ISR+6,fsr1h
  6804  000BBE  C029  FFE1         	movff	??_ISR+5,fsr1l
  6805  000BC2  C028  FFEA         	movff	??_ISR+4,fsr0h
  6806  000BC6  C027  FFE9         	movff	??_ISR+3,fsr0l
  6807  000BCA  C026  FFFB         	movff	??_ISR+2,pclatu
  6808  000BCE  C025  FFFA         	movff	??_ISR+1,pclath
  6809  000BD2  924C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6810  000BD4  0011               	retfie		f
  6811  000BD6                     __end_of_ISR:
  6812                           	opt stack 0
  6813                           pclatu	equ	0xFFB
  6814                           pclath	equ	0xFFA
  6815                           tblptru	equ	0xFF8
  6816                           tblptrh	equ	0xFF7
  6817                           tblptrl	equ	0xFF6
  6818                           tablat	equ	0xFF5
  6819                           prodh	equ	0xFF4
  6820                           prodl	equ	0xFF3
  6821                           intcon	equ	0xFF2
  6822                           intcon3	equ	0xFF0
  6823                           postinc0	equ	0xFEE
  6824                           fsr0h	equ	0xFEA
  6825                           fsr0l	equ	0xFE9
  6826                           wreg	equ	0xFE8
  6827                           fsr1h	equ	0xFE2
  6828                           fsr1l	equ	0xFE1
  6829                           indf2	equ	0xFDF
  6830                           postinc2	equ	0xFDE
  6831                           postdec2	equ	0xFDD
  6832                           fsr2h	equ	0xFDA
  6833                           fsr2l	equ	0xFD9
  6834                           status	equ	0xFD8
  6835                           
  6836 ;; *************** function _switchMenu *****************
  6837 ;; Defined at:
  6838 ;;		line 326 in file "../main.c"
  6839 ;; Parameters:    Size  Location     Type
  6840 ;;  left            1    wreg     unsigned char 
  6841 ;;  right           1   32[COMRAM] unsigned char 
  6842 ;;  key             1   33[COMRAM] unsigned char 
  6843 ;; Auto vars:     Size  Location     Type
  6844 ;;  left            1   34[COMRAM] unsigned char 
  6845 ;; Return value:  Size  Location     Type
  6846 ;;                  1    wreg      void 
  6847 ;; Registers used:
  6848 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6849 ;; Tracked objects:
  6850 ;;		On entry : 0/0
  6851 ;;		On exit  : 0/0
  6852 ;;		Unchanged: 0/0
  6853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6854 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6855 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6856 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6857 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6858 ;;Total ram usage:        3 bytes
  6859 ;; Hardware stack levels used:    1
  6860 ;; Hardware stack levels required when called:    3
  6861 ;; This function calls:
  6862 ;;		i2_lcdInst
  6863 ;;		i2_printf
  6864 ;;		i2_stopOperation
  6865 ;; This function is called by:
  6866 ;;		_ISR
  6867 ;; This function uses a non-reentrant model
  6868 ;;
  6869                           
  6870                           	psect	text23
  6871  0015C8                     __ptext23:
  6872                           	opt stack 0
  6873  0015C8                     _switchMenu:
  6874                           	opt stack 23
  6875                           
  6876                           ; BSR set to: 0
  6877                           ;incstack = 0
  6878                           ;switchMenu@left stored from wreg
  6879  0015C8  6E23               	movwf	switchMenu@left,c
  6880                           
  6881                           ;main.c: 328: if (key == '*'){
  6882  0015CA  0E2A               	movlw	42
  6883  0015CC  1822               	xorwf	switchMenu@key,w,c
  6884  0015CE  A4D8               	btfss	status,2,c
  6885  0015D0  D020               	goto	i2l3499
  6886                           
  6887                           ;main.c: 330: if(screenMode == 2){
  6888  0015D2  0E02               	movlw	2
  6889  0015D4  0100               	movlb	0	; () banked
  6890  0015D6  19BE               	xorwf	_screenMode& (0+255),w,b
  6891  0015D8  A4D8               	btfss	status,2,c
  6892  0015DA  D013               	goto	i2l3495
  6893                           
  6894                           ; BSR set to: 0
  6895                           ;main.c: 331: screenMode = 1;
  6896  0015DC  0E01               	movlw	1
  6897  0015DE  0100               	movlb	0	; () banked
  6898  0015E0  6FBE               	movwf	_screenMode& (0+255),b
  6899                           
  6900                           ; BSR set to: 0
  6901                           ;main.c: 332: T0CONbits.TMR0ON = 1;
  6902  0015E2  8ED5               	bsf	4053,7,c	;volatile
  6903                           
  6904                           ; BSR set to: 0
  6905                           ;main.c: 333: T1CONbits.TMR1ON = 0;
  6906  0015E4  90CD               	bcf	4045,0,c	;volatile
  6907                           
  6908                           ;main.c: 334: startGear = 1;
  6909  0015E6  0E01               	movlw	1
  6910  0015E8  0100               	movlb	0	; () banked
  6911  0015EA  6F9A               	movwf	_startGear& (0+255),b
  6912                           
  6913                           ; BSR set to: 0
  6914                           ;main.c: 335: lcdInst(0b10000000);;
  6915  0015EC  0E80               	movlw	128
  6916  0015EE  EC46  F00E         	call	i2_lcdInst
  6917                           
  6918                           ;main.c: 336: printf("RUNNING: 00:00  ");
  6919  0015F2  0E99               	movlw	low STR_23
  6920  0015F4  6E0D               	movwf	i2printf@f,c
  6921  0015F6  0EFF               	movlw	high STR_23
  6922  0015F8  6E0E               	movwf	i2printf@f+1,c
  6923  0015FA  ECB3  F007         	call	i2_printf	;wreg free
  6924                           
  6925                           ;main.c: 337: LATCbits.LC0 = 1;;
  6926  0015FE  808B               	bsf	3979,0,c	;volatile
  6927                           
  6928                           ;main.c: 338: }
  6929  001600  0012               	return	
  6930  001602                     i2l3495:
  6931                           
  6932                           ;main.c: 339: else if (screenMode == 0)
  6933  001602  0100               	movlb	0	; () banked
  6934  001604  51BE               	movf	_screenMode& (0+255),w,b
  6935  001606  A4D8               	btfss	status,2,c
  6936  001608  0012               	return	
  6937                           
  6938                           ; BSR set to: 0
  6939                           ;main.c: 340: screenMode = 2;
  6940  00160A  0E02               	movlw	2
  6941  00160C  0100               	movlb	0	; () banked
  6942  00160E  6FBE               	movwf	_screenMode& (0+255),b
  6943                           
  6944                           ; BSR set to: 0
  6945                           ;main.c: 341: }
  6946                           
  6947                           ; BSR set to: 0
  6948  001610  0012               	return	
  6949  001612                     i2l3499:
  6950                           
  6951                           ;main.c: 342: else if (screenMode == 1){
  6952  001612  0100               	movlb	0	; () banked
  6953  001614  05BE               	decf	_screenMode& (0+255),w,b
  6954  001616  A4D8               	btfss	status,2,c
  6955  001618  D00C               	goto	i2l3509
  6956                           
  6957                           ; BSR set to: 0
  6958                           ;main.c: 343: if (key == '#'){
  6959  00161A  0E23               	movlw	35
  6960  00161C  1822               	xorwf	switchMenu@key,w,c
  6961  00161E  A4D8               	btfss	status,2,c
  6962  001620  0012               	return	
  6963                           
  6964                           ; BSR set to: 0
  6965                           ;main.c: 344: screenMode = 10;
  6966  001622  0E0A               	movlw	10
  6967  001624  0100               	movlb	0	; () banked
  6968  001626  6FBE               	movwf	_screenMode& (0+255),b
  6969                           
  6970                           ; BSR set to: 0
  6971                           ;main.c: 345: countDrain--;
  6972  001628  0100               	movlb	0	; () banked
  6973  00162A  0792               	decf	_countDrain& (0+255),f,b
  6974                           
  6975                           ; BSR set to: 0
  6976                           ;main.c: 346: stopOperation();
  6977  00162C  EC6A  F00A         	call	i2_stopOperation	;wreg free
  6978                           
  6979                           ;main.c: 347: }
  6980                           ;main.c: 348: }
  6981  001630  0012               	return	
  6982  001632                     i2l3509:
  6983                           
  6984                           ;main.c: 349: else if (screenMode != 0){
  6985  001632  0100               	movlb	0	; () banked
  6986  001634  51BE               	movf	_screenMode& (0+255),w,b
  6987  001636  B4D8               	btfsc	status,2,c
  6988  001638  0012               	return	
  6989                           
  6990                           ; BSR set to: 0
  6991                           ;main.c: 350: if (key == right){
  6992  00163A  5021               	movf	switchMenu@right,w,c
  6993  00163C  1822               	xorwf	switchMenu@key,w,c
  6994  00163E  A4D8               	btfss	status,2,c
  6995  001640  D00C               	goto	i2l3519
  6996                           
  6997                           ; BSR set to: 0
  6998                           ;main.c: 351: if (screenMode == 2)
  6999  001642  0E02               	movlw	2
  7000  001644  0100               	movlb	0	; () banked
  7001  001646  19BE               	xorwf	_screenMode& (0+255),w,b
  7002  001648  A4D8               	btfss	status,2,c
  7003  00164A  D004               	goto	i2l3517
  7004                           
  7005                           ; BSR set to: 0
  7006                           ;main.c: 352: screenMode = 9;
  7007  00164C  0E09               	movlw	9
  7008  00164E  0100               	movlb	0	; () banked
  7009  001650  6FBE               	movwf	_screenMode& (0+255),b
  7010  001652  0012               	return	
  7011  001654                     i2l3517:
  7012                           
  7013                           ; BSR set to: 0
  7014                           ;main.c: 353: else
  7015                           ;main.c: 354: screenMode--;
  7016  001654  0100               	movlb	0	; () banked
  7017  001656  07BE               	decf	_screenMode& (0+255),f,b
  7018                           
  7019                           ; BSR set to: 0
  7020                           ;main.c: 355: }
  7021  001658  0012               	return	
  7022  00165A                     i2l3519:
  7023                           
  7024                           ; BSR set to: 0
  7025                           ;main.c: 356: else if (key == left){
  7026  00165A  5023               	movf	switchMenu@left,w,c
  7027  00165C  1822               	xorwf	switchMenu@key,w,c
  7028  00165E  A4D8               	btfss	status,2,c
  7029  001660  0012               	return	
  7030                           
  7031                           ; BSR set to: 0
  7032                           ;main.c: 357: if (screenMode == 9)
  7033  001662  0E09               	movlw	9
  7034  001664  0100               	movlb	0	; () banked
  7035  001666  19BE               	xorwf	_screenMode& (0+255),w,b
  7036  001668  A4D8               	btfss	status,2,c
  7037  00166A  D004               	goto	i2l3525
  7038                           
  7039                           ; BSR set to: 0
  7040                           ;main.c: 358: screenMode = 2;
  7041  00166C  0E02               	movlw	2
  7042  00166E  0100               	movlb	0	; () banked
  7043  001670  6FBE               	movwf	_screenMode& (0+255),b
  7044  001672  0012               	return	
  7045  001674                     i2l3525:
  7046                           
  7047                           ; BSR set to: 0
  7048                           ;main.c: 359: else
  7049                           ;main.c: 360: screenMode++;
  7050  001674  0100               	movlb	0	; () banked
  7051  001676  2BBE               	incf	_screenMode& (0+255),f,b
  7052                           
  7053                           ; BSR set to: 0
  7054                           
  7055                           ; BSR set to: 0
  7056                           
  7057                           ; BSR set to: 0
  7058                           
  7059                           ; BSR set to: 0
  7060                           
  7061                           ; BSR set to: 0
  7062  001678  0012               	return	
  7063  00167A                     __end_of_switchMenu:
  7064                           	opt stack 0
  7065                           pclatu	equ	0xFFB
  7066                           pclath	equ	0xFFA
  7067                           tblptru	equ	0xFF8
  7068                           tblptrh	equ	0xFF7
  7069                           tblptrl	equ	0xFF6
  7070                           tablat	equ	0xFF5
  7071                           prodh	equ	0xFF4
  7072                           prodl	equ	0xFF3
  7073                           intcon	equ	0xFF2
  7074                           intcon3	equ	0xFF0
  7075                           postinc0	equ	0xFEE
  7076                           fsr0h	equ	0xFEA
  7077                           fsr0l	equ	0xFE9
  7078                           wreg	equ	0xFE8
  7079                           fsr1h	equ	0xFE2
  7080                           fsr1l	equ	0xFE1
  7081                           indf2	equ	0xFDF
  7082                           postinc2	equ	0xFDE
  7083                           postdec2	equ	0xFDD
  7084                           fsr2h	equ	0xFDA
  7085                           fsr2l	equ	0xFD9
  7086                           status	equ	0xFD8
  7087                           
  7088 ;; *************** function i2_stopOperation *****************
  7089 ;; Defined at:
  7090 ;;		line 373 in file "../main.c"
  7091 ;; Parameters:    Size  Location     Type
  7092 ;;		None
  7093 ;; Auto vars:     Size  Location     Type
  7094 ;;		None
  7095 ;; Return value:  Size  Location     Type
  7096 ;;                  1    wreg      void 
  7097 ;; Registers used:
  7098 ;;		wreg, status,2, status,0, cstack
  7099 ;; Tracked objects:
  7100 ;;		On entry : 0/0
  7101 ;;		On exit  : 0/0
  7102 ;;		Unchanged: 0/0
  7103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7104 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7105 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7106 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7107 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7108 ;;Total ram usage:        0 bytes
  7109 ;; Hardware stack levels used:    1
  7110 ;; Hardware stack levels required when called:    1
  7111 ;; This function calls:
  7112 ;;		i2___awdiv
  7113 ;;		i2___awmod
  7114 ;; This function is called by:
  7115 ;;		_switchMenu
  7116 ;;		_ISR
  7117 ;; This function uses a non-reentrant model
  7118 ;;
  7119                           
  7120                           	psect	text24
  7121  0014D4                     __ptext24:
  7122                           	opt stack 0
  7123  0014D4                     i2_stopOperation:
  7124                           	opt stack 25
  7125                           
  7126                           ;main.c: 374: T0CONbits.TMR0ON = 0;
  7127                           
  7128                           ;incstack = 0
  7129  0014D4  9ED5               	bcf	4053,7,c	;volatile
  7130                           
  7131                           ;main.c: 375: T1CONbits.TMR1ON = 0;
  7132  0014D6  90CD               	bcf	4045,0,c	;volatile
  7133                           
  7134                           ;main.c: 376: TMR0 = 55770;
  7135  0014D8  0ED9               	movlw	217
  7136  0014DA  6ED7               	movwf	4055,c	;volatile
  7137  0014DC  0EDA               	movlw	218
  7138  0014DE  6ED6               	movwf	4054,c	;volatile
  7139                           
  7140                           ;main.c: 377: TMR1 = 58035;
  7141  0014E0  0EE2               	movlw	226
  7142  0014E2  6ECF               	movwf	4047,c	;volatile
  7143  0014E4  0EB3               	movlw	179
  7144  0014E6  6ECE               	movwf	4046,c	;volatile
  7145                           
  7146                           ;main.c: 378: num9V = count9V;
  7147  0014E8  C08F  F094         	movff	_count9V,_num9V
  7148                           
  7149                           ;main.c: 379: numC = countC;
  7150  0014EC  C091  F097         	movff	_countC,_numC
  7151                           
  7152                           ;main.c: 380: numAA = countAA;
  7153  0014F0  C090  F095         	movff	_countAA,_numAA
  7154                           
  7155                           ;main.c: 381: numDrain = countDrain;
  7156  0014F4  C092  F098         	movff	_countDrain,_numDrain
  7157                           
  7158                           ;main.c: 382: count9V = 0;
  7159  0014F8  0E00               	movlw	0
  7160  0014FA  0100               	movlb	0	; () banked
  7161  0014FC  6F8F               	movwf	_count9V& (0+255),b
  7162                           
  7163                           ;main.c: 383: countC = 0;
  7164  0014FE  0E00               	movlw	0
  7165  001500  0100               	movlb	0	; () banked
  7166  001502  6F91               	movwf	_countC& (0+255),b
  7167                           
  7168                           ;main.c: 384: countAA = 0;
  7169  001504  0E00               	movlw	0
  7170  001506  0100               	movlb	0	; () banked
  7171  001508  6F90               	movwf	_countAA& (0+255),b
  7172                           
  7173                           ;main.c: 385: countDrain = 0;
  7174  00150A  0E00               	movlw	0
  7175  00150C  0100               	movlb	0	; () banked
  7176  00150E  6F92               	movwf	_countDrain& (0+255),b
  7177                           
  7178                           ; BSR set to: 0
  7179                           ;main.c: 386: min = opTimer / 60;
  7180  001510  C047  F001         	movff	_opTimer,i2___awdiv@dividend
  7181  001514  6A02               	clrf	i2___awdiv@dividend+1,c
  7182  001516  0E00               	movlw	0
  7183  001518  6E04               	movwf	i2___awdiv@divisor+1,c
  7184  00151A  0E3C               	movlw	60
  7185  00151C  6E03               	movwf	i2___awdiv@divisor,c
  7186  00151E  EC7F  F00B         	call	i2___awdiv	;wreg free
  7187  001522  5001               	movf	?i2___awdiv,w,c
  7188  001524  0100               	movlb	0	; () banked
  7189  001526  6F93               	movwf	_min& (0+255),b
  7190                           
  7191                           ; BSR set to: 0
  7192                           ;main.c: 387: sec = opTimer % 60;
  7193  001528  C047  F001         	movff	_opTimer,i2___awmod@dividend
  7194  00152C  6A02               	clrf	i2___awmod@dividend+1,c
  7195  00152E  0E00               	movlw	0
  7196  001530  6E04               	movwf	i2___awmod@divisor+1,c
  7197  001532  0E3C               	movlw	60
  7198  001534  6E03               	movwf	i2___awmod@divisor,c
  7199  001536  EC3A  F00C         	call	i2___awmod	;wreg free
  7200  00153A  5001               	movf	?i2___awmod,w,c
  7201  00153C  0100               	movlb	0	; () banked
  7202  00153E  6F99               	movwf	_sec& (0+255),b
  7203                           
  7204                           ;main.c: 388: opTimer = 0;
  7205  001540  0E00               	movlw	0
  7206  001542  6E47               	movwf	_opTimer,c
  7207                           
  7208                           ;main.c: 389: solOnTimer = 0;
  7209  001544  0E00               	movlw	0
  7210  001546  6E4B               	movwf	_solOnTimer,c
  7211                           
  7212                           ;main.c: 390: doneTimer = 0;
  7213  001548  0E00               	movlw	0
  7214  00154A  6E46               	movwf	_doneTimer,c
  7215                           
  7216                           ;main.c: 391: waitPlats = 0;
  7217  00154C  0E00               	movlw	0
  7218  00154E  0100               	movlb	0	; () banked
  7219  001550  6FA0               	movwf	_waitPlats& (0+255),b
  7220                           
  7221                           ;main.c: 392: stepGear = 0;
  7222  001552  0E00               	movlw	0
  7223  001554  0100               	movlb	0	; () banked
  7224  001556  6F9B               	movwf	_stepGear& (0+255),b
  7225                           
  7226                           ;main.c: 393: stepAmount = 0;
  7227  001558  0E00               	movlw	0
  7228  00155A  6E45               	movwf	_stepAmount+1,c
  7229  00155C  0E00               	movlw	0
  7230  00155E  6E44               	movwf	_stepAmount,c
  7231                           
  7232                           ;main.c: 394: sorting = 0;
  7233  001560  0E00               	movlw	0
  7234  001562  6E48               	movwf	_sorting,c
  7235                           
  7236                           ;main.c: 395: plat1Left = 0;
  7237  001564  0E00               	movlw	0
  7238  001566  0100               	movlb	0	; () banked
  7239  001568  6F88               	movwf	(_plat1Left+1)& (0+255),b
  7240  00156A  0E00               	movlw	0
  7241  00156C  6F87               	movwf	_plat1Left& (0+255),b
  7242                           
  7243                           ;main.c: 396: plat1Right = 0;
  7244  00156E  0E00               	movlw	0
  7245  001570  0100               	movlb	0	; () banked
  7246  001572  6F8A               	movwf	(_plat1Right+1)& (0+255),b
  7247  001574  0E00               	movlw	0
  7248  001576  6F89               	movwf	_plat1Right& (0+255),b
  7249                           
  7250                           ;main.c: 397: plat2Left = 0;
  7251  001578  0E00               	movlw	0
  7252  00157A  0100               	movlb	0	; () banked
  7253  00157C  6F8C               	movwf	(_plat2Left+1)& (0+255),b
  7254  00157E  0E00               	movlw	0
  7255  001580  6F8B               	movwf	_plat2Left& (0+255),b
  7256                           
  7257                           ;main.c: 398: plat2Right = 0;
  7258  001582  0E00               	movlw	0
  7259  001584  0100               	movlb	0	; () banked
  7260  001586  6F8E               	movwf	(_plat2Right+1)& (0+255),b
  7261  001588  0E00               	movlw	0
  7262  00158A  6F8D               	movwf	_plat2Right& (0+255),b
  7263                           
  7264                           ;main.c: 399: turn2BackLeft = 0;
  7265  00158C  0E00               	movlw	0
  7266  00158E  0100               	movlb	0	; () banked
  7267  001590  6F9E               	movwf	_turn2BackLeft& (0+255),b
  7268                           
  7269                           ;main.c: 400: turn1BackLeft = 0;
  7270  001592  0E00               	movlw	0
  7271  001594  0100               	movlb	0	; () banked
  7272  001596  6F9C               	movwf	_turn1BackLeft& (0+255),b
  7273                           
  7274                           ;main.c: 401: turn2BackRight = 0;
  7275  001598  0E00               	movlw	0
  7276  00159A  0100               	movlb	0	; () banked
  7277  00159C  6F9F               	movwf	_turn2BackRight& (0+255),b
  7278                           
  7279                           ;main.c: 402: turn1BackRight = 0;
  7280  00159E  0E00               	movlw	0
  7281  0015A0  0100               	movlb	0	; () banked
  7282  0015A2  6F9D               	movwf	_turn1BackRight& (0+255),b
  7283                           
  7284                           ; BSR set to: 0
  7285                           ;main.c: 403: LATEbits.LE0 = 0;;
  7286  0015A4  908D               	bcf	3981,0,c	;volatile
  7287                           
  7288                           ; BSR set to: 0
  7289                           ;main.c: 404: LATEbits.LE1 = 0;;
  7290  0015A6  928D               	bcf	3981,1,c	;volatile
  7291                           
  7292                           ; BSR set to: 0
  7293                           ;main.c: 405: LATCbits.LC5 = 0;;
  7294  0015A8  9A8B               	bcf	3979,5,c	;volatile
  7295                           
  7296                           ; BSR set to: 0
  7297                           ;main.c: 406: LATDbits.LD0 = 0;;
  7298  0015AA  908C               	bcf	3980,0,c	;volatile
  7299                           
  7300                           ; BSR set to: 0
  7301                           ;main.c: 407: LATDbits.LD1 = 0;;
  7302  0015AC  928C               	bcf	3980,1,c	;volatile
  7303                           
  7304                           ; BSR set to: 0
  7305                           ;main.c: 408: LATAbits.LA2 = 0;;
  7306  0015AE  9489               	bcf	3977,2,c	;volatile
  7307                           
  7308                           ; BSR set to: 0
  7309                           ;main.c: 409: LATAbits.LA3 = 0;;
  7310  0015B0  9689               	bcf	3977,3,c	;volatile
  7311                           
  7312                           ; BSR set to: 0
  7313                           ;main.c: 410: LATAbits.LA4 = 0;;
  7314  0015B2  9889               	bcf	3977,4,c	;volatile
  7315                           
  7316                           ; BSR set to: 0
  7317                           ;main.c: 411: LATAbits.LA5 = 0;;
  7318  0015B4  9A89               	bcf	3977,5,c	;volatile
  7319                           
  7320                           ; BSR set to: 0
  7321                           ;main.c: 412: LATBbits.LB0 = 0;;
  7322  0015B6  908A               	bcf	3978,0,c	;volatile
  7323                           
  7324                           ; BSR set to: 0
  7325                           ;main.c: 413: LATBbits.LB2 = 0;;
  7326  0015B8  948A               	bcf	3978,2,c	;volatile
  7327                           
  7328                           ; BSR set to: 0
  7329                           ;main.c: 414: LATCbits.LC6 = 0;;
  7330  0015BA  9C8B               	bcf	3979,6,c	;volatile
  7331                           
  7332                           ; BSR set to: 0
  7333                           ;main.c: 415: LATAbits.LA6 = 0;;
  7334  0015BC  9C89               	bcf	3977,6,c	;volatile
  7335                           
  7336                           ; BSR set to: 0
  7337                           ;main.c: 416: LATCbits.LC1= 0;;
  7338  0015BE  928B               	bcf	3979,1,c	;volatile
  7339                           
  7340                           ; BSR set to: 0
  7341                           ;main.c: 417: LATAbits.LA7 = 0;;
  7342  0015C0  9E89               	bcf	3977,7,c	;volatile
  7343                           
  7344                           ; BSR set to: 0
  7345                           ;main.c: 418: LATCbits.LC2 = 0;;
  7346  0015C2  948B               	bcf	3979,2,c	;volatile
  7347                           
  7348                           ; BSR set to: 0
  7349                           ;main.c: 419: LATCbits.LC0 = 0;;
  7350  0015C4  908B               	bcf	3979,0,c	;volatile
  7351                           
  7352                           ; BSR set to: 0
  7353  0015C6  0012               	return		;funcret
  7354  0015C8                     __end_ofi2_stopOperation:
  7355                           	opt stack 0
  7356                           pclatu	equ	0xFFB
  7357                           pclath	equ	0xFFA
  7358                           tblptru	equ	0xFF8
  7359                           tblptrh	equ	0xFF7
  7360                           tblptrl	equ	0xFF6
  7361                           tablat	equ	0xFF5
  7362                           prodh	equ	0xFF4
  7363                           prodl	equ	0xFF3
  7364                           intcon	equ	0xFF2
  7365                           intcon3	equ	0xFF0
  7366                           postinc0	equ	0xFEE
  7367                           fsr0h	equ	0xFEA
  7368                           fsr0l	equ	0xFE9
  7369                           wreg	equ	0xFE8
  7370                           fsr1h	equ	0xFE2
  7371                           fsr1l	equ	0xFE1
  7372                           indf2	equ	0xFDF
  7373                           postinc2	equ	0xFDE
  7374                           postdec2	equ	0xFDD
  7375                           fsr2h	equ	0xFDA
  7376                           fsr2l	equ	0xFD9
  7377                           status	equ	0xFD8
  7378                           
  7379 ;; *************** function i2___awmod *****************
  7380 ;; Defined at:
  7381 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  7382 ;; Parameters:    Size  Location     Type
  7383 ;;  dividend        2    0[COMRAM] int 
  7384 ;;  divisor         2    2[COMRAM] int 
  7385 ;; Auto vars:     Size  Location     Type
  7386 ;;  __awmod         1    5[COMRAM] unsigned char 
  7387 ;;  __awmod         1    4[COMRAM] unsigned char 
  7388 ;; Return value:  Size  Location     Type
  7389 ;;                  2    0[COMRAM] int 
  7390 ;; Registers used:
  7391 ;;		wreg, status,2, status,0
  7392 ;; Tracked objects:
  7393 ;;		On entry : 0/0
  7394 ;;		On exit  : 0/0
  7395 ;;		Unchanged: 0/0
  7396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7397 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7398 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7399 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7400 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7401 ;;Total ram usage:        6 bytes
  7402 ;; Hardware stack levels used:    1
  7403 ;; This function calls:
  7404 ;;		Nothing
  7405 ;; This function is called by:
  7406 ;;		_ISR
  7407 ;;		i2_stopOperation
  7408 ;; This function uses a non-reentrant model
  7409 ;;
  7410                           
  7411                           	psect	text25
  7412  001874                     __ptext25:
  7413                           	opt stack 0
  7414  001874                     i2___awmod:
  7415                           	opt stack 25
  7416                           
  7417                           ; BSR set to: 0
  7418                           ;incstack = 0
  7419  001874  0E00               	movlw	0
  7420  001876  6E06               	movwf	i2___awmod@sign,c
  7421  001878  AE02               	btfss	i2___awmod@dividend+1,7,c
  7422  00187A  D006               	goto	i2l2697
  7423  00187C  6C01               	negf	i2___awmod@dividend,c
  7424  00187E  1E02               	comf	i2___awmod@dividend+1,f,c
  7425  001880  B0D8               	btfsc	status,0,c
  7426  001882  2A02               	incf	i2___awmod@dividend+1,f,c
  7427  001884  0E01               	movlw	1
  7428  001886  6E06               	movwf	i2___awmod@sign,c
  7429  001888                     i2l2697:
  7430  001888  AE04               	btfss	i2___awmod@divisor+1,7,c
  7431  00188A  D004               	goto	i2l2701
  7432  00188C  6C03               	negf	i2___awmod@divisor,c
  7433  00188E  1E04               	comf	i2___awmod@divisor+1,f,c
  7434  001890  B0D8               	btfsc	status,0,c
  7435  001892  2A04               	incf	i2___awmod@divisor+1,f,c
  7436  001894                     i2l2701:
  7437  001894  5003               	movf	i2___awmod@divisor,w,c
  7438  001896  1004               	iorwf	i2___awmod@divisor+1,w,c
  7439  001898  B4D8               	btfsc	status,2,c
  7440  00189A  D018               	goto	i2l2717
  7441  00189C  0E01               	movlw	1
  7442  00189E  6E05               	movwf	i2___awmod@counter,c
  7443  0018A0  D004               	goto	i2l2707
  7444  0018A2                     i2l2705:
  7445  0018A2  90D8               	bcf	status,0,c
  7446  0018A4  3603               	rlcf	i2___awmod@divisor,f,c
  7447  0018A6  3604               	rlcf	i2___awmod@divisor+1,f,c
  7448  0018A8  2A05               	incf	i2___awmod@counter,f,c
  7449  0018AA                     i2l2707:
  7450  0018AA  AE04               	btfss	i2___awmod@divisor+1,7,c
  7451  0018AC  D7FA               	goto	i2l2705
  7452  0018AE                     i2l2709:
  7453  0018AE  5003               	movf	i2___awmod@divisor,w,c
  7454  0018B0  5C01               	subwf	i2___awmod@dividend,w,c
  7455  0018B2  5004               	movf	i2___awmod@divisor+1,w,c
  7456  0018B4  5802               	subwfb	i2___awmod@dividend+1,w,c
  7457  0018B6  A0D8               	btfss	status,0,c
  7458  0018B8  D004               	goto	i2l2713
  7459  0018BA  5003               	movf	i2___awmod@divisor,w,c
  7460  0018BC  5E01               	subwf	i2___awmod@dividend,f,c
  7461  0018BE  5004               	movf	i2___awmod@divisor+1,w,c
  7462  0018C0  5A02               	subwfb	i2___awmod@dividend+1,f,c
  7463  0018C2                     i2l2713:
  7464  0018C2  90D8               	bcf	status,0,c
  7465  0018C4  3204               	rrcf	i2___awmod@divisor+1,f,c
  7466  0018C6  3203               	rrcf	i2___awmod@divisor,f,c
  7467  0018C8  2E05               	decfsz	i2___awmod@counter,f,c
  7468  0018CA  D7F1               	goto	i2l2709
  7469  0018CC                     i2l2717:
  7470  0018CC  5006               	movf	i2___awmod@sign,w,c
  7471  0018CE  B4D8               	btfsc	status,2,c
  7472  0018D0  D004               	goto	i2l2721
  7473  0018D2  6C01               	negf	i2___awmod@dividend,c
  7474  0018D4  1E02               	comf	i2___awmod@dividend+1,f,c
  7475  0018D6  B0D8               	btfsc	status,0,c
  7476  0018D8  2A02               	incf	i2___awmod@dividend+1,f,c
  7477  0018DA                     i2l2721:
  7478  0018DA  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
  7479  0018DE  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
  7480  0018E2  0012               	return	
  7481  0018E4                     __end_ofi2___awmod:
  7482                           	opt stack 0
  7483                           pclatu	equ	0xFFB
  7484                           pclath	equ	0xFFA
  7485                           tblptru	equ	0xFF8
  7486                           tblptrh	equ	0xFF7
  7487                           tblptrl	equ	0xFF6
  7488                           tablat	equ	0xFF5
  7489                           prodh	equ	0xFF4
  7490                           prodl	equ	0xFF3
  7491                           intcon	equ	0xFF2
  7492                           intcon3	equ	0xFF0
  7493                           postinc0	equ	0xFEE
  7494                           fsr0h	equ	0xFEA
  7495                           fsr0l	equ	0xFE9
  7496                           wreg	equ	0xFE8
  7497                           fsr1h	equ	0xFE2
  7498                           fsr1l	equ	0xFE1
  7499                           indf2	equ	0xFDF
  7500                           postinc2	equ	0xFDE
  7501                           postdec2	equ	0xFDD
  7502                           fsr2h	equ	0xFDA
  7503                           fsr2l	equ	0xFD9
  7504                           status	equ	0xFD8
  7505                           
  7506 ;; *************** function i2___awdiv *****************
  7507 ;; Defined at:
  7508 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  7509 ;; Parameters:    Size  Location     Type
  7510 ;;  dividend        2    0[COMRAM] int 
  7511 ;;  divisor         2    2[COMRAM] int 
  7512 ;; Auto vars:     Size  Location     Type
  7513 ;;  __awdiv         2    6[COMRAM] int 
  7514 ;;  __awdiv         1    5[COMRAM] unsigned char 
  7515 ;;  __awdiv         1    4[COMRAM] unsigned char 
  7516 ;; Return value:  Size  Location     Type
  7517 ;;                  2    0[COMRAM] int 
  7518 ;; Registers used:
  7519 ;;		wreg, status,2, status,0
  7520 ;; Tracked objects:
  7521 ;;		On entry : 0/0
  7522 ;;		On exit  : 0/0
  7523 ;;		Unchanged: 0/0
  7524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7525 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7526 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7527 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7528 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7529 ;;Total ram usage:        8 bytes
  7530 ;; Hardware stack levels used:    1
  7531 ;; This function calls:
  7532 ;;		Nothing
  7533 ;; This function is called by:
  7534 ;;		_ISR
  7535 ;;		i2_stopOperation
  7536 ;; This function uses a non-reentrant model
  7537 ;;
  7538                           
  7539                           	psect	text26
  7540  0016FE                     __ptext26:
  7541                           	opt stack 0
  7542  0016FE                     i2___awdiv:
  7543                           	opt stack 25
  7544                           
  7545                           ;incstack = 0
  7546  0016FE  0E00               	movlw	0
  7547  001700  6E06               	movwf	i2___awdiv@sign,c
  7548  001702  AE04               	btfss	i2___awdiv@divisor+1,7,c
  7549  001704  D006               	goto	i2l2653
  7550  001706  6C03               	negf	i2___awdiv@divisor,c
  7551  001708  1E04               	comf	i2___awdiv@divisor+1,f,c
  7552  00170A  B0D8               	btfsc	status,0,c
  7553  00170C  2A04               	incf	i2___awdiv@divisor+1,f,c
  7554  00170E  0E01               	movlw	1
  7555  001710  6E06               	movwf	i2___awdiv@sign,c
  7556  001712                     i2l2653:
  7557  001712  AE02               	btfss	i2___awdiv@dividend+1,7,c
  7558  001714  D006               	goto	i2l2659
  7559  001716  6C01               	negf	i2___awdiv@dividend,c
  7560  001718  1E02               	comf	i2___awdiv@dividend+1,f,c
  7561  00171A  B0D8               	btfsc	status,0,c
  7562  00171C  2A02               	incf	i2___awdiv@dividend+1,f,c
  7563  00171E  0E01               	movlw	1
  7564  001720  1A06               	xorwf	i2___awdiv@sign,f,c
  7565  001722                     i2l2659:
  7566  001722  0E00               	movlw	0
  7567  001724  6E08               	movwf	i2___awdiv@quotient+1,c
  7568  001726  0E00               	movlw	0
  7569  001728  6E07               	movwf	i2___awdiv@quotient,c
  7570  00172A  5003               	movf	i2___awdiv@divisor,w,c
  7571  00172C  1004               	iorwf	i2___awdiv@divisor+1,w,c
  7572  00172E  B4D8               	btfsc	status,2,c
  7573  001730  D01C               	goto	i2l2681
  7574  001732  0E01               	movlw	1
  7575  001734  6E05               	movwf	i2___awdiv@counter,c
  7576  001736  D004               	goto	i2l2667
  7577  001738                     i2l2665:
  7578  001738  90D8               	bcf	status,0,c
  7579  00173A  3603               	rlcf	i2___awdiv@divisor,f,c
  7580  00173C  3604               	rlcf	i2___awdiv@divisor+1,f,c
  7581  00173E  2A05               	incf	i2___awdiv@counter,f,c
  7582  001740                     i2l2667:
  7583  001740  AE04               	btfss	i2___awdiv@divisor+1,7,c
  7584  001742  D7FA               	goto	i2l2665
  7585  001744                     i2l2669:
  7586  001744  90D8               	bcf	status,0,c
  7587  001746  3607               	rlcf	i2___awdiv@quotient,f,c
  7588  001748  3608               	rlcf	i2___awdiv@quotient+1,f,c
  7589  00174A  5003               	movf	i2___awdiv@divisor,w,c
  7590  00174C  5C01               	subwf	i2___awdiv@dividend,w,c
  7591  00174E  5004               	movf	i2___awdiv@divisor+1,w,c
  7592  001750  5802               	subwfb	i2___awdiv@dividend+1,w,c
  7593  001752  A0D8               	btfss	status,0,c
  7594  001754  D005               	goto	i2l2677
  7595  001756  5003               	movf	i2___awdiv@divisor,w,c
  7596  001758  5E01               	subwf	i2___awdiv@dividend,f,c
  7597  00175A  5004               	movf	i2___awdiv@divisor+1,w,c
  7598  00175C  5A02               	subwfb	i2___awdiv@dividend+1,f,c
  7599  00175E  8007               	bsf	i2___awdiv@quotient,0,c
  7600  001760                     i2l2677:
  7601  001760  90D8               	bcf	status,0,c
  7602  001762  3204               	rrcf	i2___awdiv@divisor+1,f,c
  7603  001764  3203               	rrcf	i2___awdiv@divisor,f,c
  7604  001766  2E05               	decfsz	i2___awdiv@counter,f,c
  7605  001768  D7ED               	goto	i2l2669
  7606  00176A                     i2l2681:
  7607  00176A  5006               	movf	i2___awdiv@sign,w,c
  7608  00176C  B4D8               	btfsc	status,2,c
  7609  00176E  D004               	goto	i2l2685
  7610  001770  6C07               	negf	i2___awdiv@quotient,c
  7611  001772  1E08               	comf	i2___awdiv@quotient+1,f,c
  7612  001774  B0D8               	btfsc	status,0,c
  7613  001776  2A08               	incf	i2___awdiv@quotient+1,f,c
  7614  001778                     i2l2685:
  7615  001778  C007  F001         	movff	i2___awdiv@quotient,?i2___awdiv
  7616  00177C  C008  F002         	movff	i2___awdiv@quotient+1,?i2___awdiv+1
  7617  001780  0012               	return	
  7618  001782                     __end_ofi2___awdiv:
  7619                           	opt stack 0
  7620                           pclatu	equ	0xFFB
  7621                           pclath	equ	0xFFA
  7622                           tblptru	equ	0xFF8
  7623                           tblptrh	equ	0xFF7
  7624                           tblptrl	equ	0xFF6
  7625                           tablat	equ	0xFF5
  7626                           prodh	equ	0xFF4
  7627                           prodl	equ	0xFF3
  7628                           intcon	equ	0xFF2
  7629                           intcon3	equ	0xFF0
  7630                           postinc0	equ	0xFEE
  7631                           fsr0h	equ	0xFEA
  7632                           fsr0l	equ	0xFE9
  7633                           wreg	equ	0xFE8
  7634                           fsr1h	equ	0xFE2
  7635                           fsr1l	equ	0xFE1
  7636                           indf2	equ	0xFDF
  7637                           postinc2	equ	0xFDE
  7638                           postdec2	equ	0xFDD
  7639                           fsr2h	equ	0xFDA
  7640                           fsr2l	equ	0xFD9
  7641                           status	equ	0xFD8
  7642                           
  7643 ;; *************** function i2_printf *****************
  7644 ;; Defined at:
  7645 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  7646 ;; Parameters:    Size  Location     Type
  7647 ;;  f               2   12[COMRAM] PTR const unsigned char 
  7648 ;;		 -> STR_24(22), STR_23(17), STR_22(17), STR_21(17), 
  7649 ;;		 -> STR_20(23), STR_19(23), STR_18(21), STR_17(17), 
  7650 ;;		 -> STR_16(21), STR_15(17), STR_14(21), STR_13(17), 
  7651 ;;		 -> STR_12(19), STR_11(17), STR_10(19), STR_9(17), 
  7652 ;;		 -> STR_8(25), STR_7(17), STR_6(17), STR_5(17), 
  7653 ;;		 -> STR_4(17), STR_3(17), STR_2(17), STR_1(17), 
  7654 ;; Auto vars:     Size  Location     Type
  7655 ;;  printf          4    0        struct .
  7656 ;;  printf          3    0        PTR const unsigned char 
  7657 ;;  printf          2   29[COMRAM] int 
  7658 ;;  printf          2   26[COMRAM] unsigned int 
  7659 ;;  printf          2   23[COMRAM] PTR void [1]
  7660 ;;		 -> ?i2_printf(2), ?_printf(2), 
  7661 ;;  printf          2    0        unsigned int 
  7662 ;;  printf          1   31[COMRAM] char 
  7663 ;;  printf          1   28[COMRAM] unsigned char 
  7664 ;;  printf          1   25[COMRAM] char 
  7665 ;;  printf          1   22[COMRAM] unsigned char 
  7666 ;; Return value:  Size  Location     Type
  7667 ;;                  2   12[COMRAM] int 
  7668 ;; Registers used:
  7669 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7670 ;; Tracked objects:
  7671 ;;		On entry : 0/0
  7672 ;;		On exit  : 0/0
  7673 ;;		Unchanged: 0/0
  7674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7675 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7676 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7677 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7678 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7679 ;;Total ram usage:       20 bytes
  7680 ;; Hardware stack levels used:    1
  7681 ;; Hardware stack levels required when called:    2
  7682 ;; This function calls:
  7683 ;;		i2___lwdiv
  7684 ;;		i2___lwmod
  7685 ;;		i2___wmul
  7686 ;;		i2_isdigit
  7687 ;;		i2_putch
  7688 ;; This function is called by:
  7689 ;;		_switchMenu
  7690 ;;		_ISR
  7691 ;; This function uses a non-reentrant model
  7692 ;;
  7693                           
  7694                           	psect	text27
  7695  000F66                     __ptext27:
  7696                           	opt stack 0
  7697  000F66                     i2_printf:
  7698                           	opt stack 24
  7699                           
  7700                           ;doprnt.c: 466: va_list ap;
  7701                           ;doprnt.c: 499: signed char c;
  7702                           ;doprnt.c: 501: int width;
  7703                           ;doprnt.c: 506: signed char prec;
  7704                           ;doprnt.c: 508: unsigned char flag;
  7705                           ;doprnt.c: 523: union {
  7706                           ;doprnt.c: 524: unsigned long vd;
  7707                           ;doprnt.c: 525: double integ;
  7708                           ;doprnt.c: 526: } tmpval;
  7709                           ;doprnt.c: 528: unsigned int val;
  7710                           ;doprnt.c: 529: unsigned len;
  7711                           ;doprnt.c: 530: const char * cp;
  7712                           ;doprnt.c: 533: *ap = __va_start();
  7713                           
  7714                           ;incstack = 0
  7715  000F66  0E0F               	movlw	low (?i2_printf+2)
  7716  000F68  6E18               	movwf	i2printf@ap,c
  7717  000F6A  0E00               	movlw	high (?i2_printf+2)
  7718  000F6C  6E19               	movwf	i2printf@ap+1,c
  7719                           
  7720                           ;doprnt.c: 536: while(c = *f++) {
  7721  000F6E  D174               	goto	i2l3127
  7722  000F70                     i2l3001:
  7723                           
  7724                           ;doprnt.c: 538: if(c != '%')
  7725  000F70  0E25               	movlw	37
  7726  000F72  1820               	xorwf	i2printf@c,w,c
  7727  000F74  B4D8               	btfsc	status,2,c
  7728  000F76  D004               	goto	i2l3005
  7729                           
  7730                           ;doprnt.c: 540: {
  7731                           ;doprnt.c: 541: (putch(c) );
  7732  000F78  5020               	movf	i2printf@c,w,c
  7733  000F7A  EC40  F00E         	call	i2_putch
  7734                           
  7735                           ;doprnt.c: 542: continue;
  7736  000F7E  D16C               	goto	i2l3127
  7737  000F80                     i2l3005:
  7738                           
  7739                           ;doprnt.c: 543: }
  7740                           ;doprnt.c: 546: width = 0;
  7741  000F80  0E00               	movlw	0
  7742  000F82  6E1F               	movwf	i2printf@width+1,c
  7743  000F84  0E00               	movlw	0
  7744  000F86  6E1E               	movwf	i2printf@width,c
  7745                           
  7746                           ;doprnt.c: 548: flag = 0;
  7747  000F88  0E00               	movlw	0
  7748  000F8A  6E1D               	movwf	i2printf@flag,c
  7749                           
  7750                           ;doprnt.c: 551: switch(*f) {
  7751                           
  7752                           ;doprnt.c: 550: for(;;) {
  7753  000F8C  D003               	goto	i2l3011
  7754  000F8E                     i2l3007:
  7755                           
  7756                           ;doprnt.c: 580: flag |= 0x04;
  7757  000F8E  841D               	bsf	i2printf@flag,2,c
  7758                           
  7759                           ;doprnt.c: 581: f++;
  7760  000F90  4A0D               	infsnz	i2printf@f,f,c
  7761  000F92  2A0E               	incf	i2printf@f+1,f,c
  7762  000F94                     i2l3011:
  7763  000F94  C00D  FFF6         	movff	i2printf@f,tblptrl
  7764  000F98  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7765  000F9C                     	if	0	;tblptru may be non-zero
  7766  000F9C                     	endif
  7767  000F9C                     	if	0	;tblptru may be non-zero
  7768  000F9C                     	endif
  7769  000F9C  0008               	tblrd		*
  7770  000F9E  50F5               	movf	tablat,w,c
  7771                           
  7772                           ; Switch size 1, requested type "space"
  7773                           ; Number of cases is 1, Range of values is 48 to 48
  7774                           ; switch strategies available:
  7775                           ; Name         Instructions Cycles
  7776                           ; simple_byte            4     3 (average)
  7777                           ;	Chosen strategy is simple_byte
  7778  000FA0  0A30               	xorlw	48	; case 48
  7779  000FA2  B4D8               	btfsc	status,2,c
  7780  000FA4  D7F4               	goto	i2l3007
  7781                           
  7782                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  7783                           
  7784                           ;doprnt.c: 586: }
  7785                           
  7786                           ;doprnt.c: 585: break;
  7787  000FA6  C00D  FFF6         	movff	i2printf@f,tblptrl
  7788  000FAA  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7789  000FAE                     	if	0	;tblptru may be non-zero
  7790  000FAE                     	endif
  7791  000FAE                     	if	0	;tblptru may be non-zero
  7792  000FAE                     	endif
  7793  000FAE  0008               	tblrd		*
  7794  000FB0  50F5               	movf	tablat,w,c
  7795  000FB2  EC12  F00E         	call	i2_isdigit
  7796  000FB6  A0D8               	btfss	status,0,c
  7797  000FB8  D035               	goto	i2l3029
  7798                           
  7799                           ;doprnt.c: 598: width = 0;
  7800  000FBA  0E00               	movlw	0
  7801  000FBC  6E1F               	movwf	i2printf@width+1,c
  7802  000FBE  0E00               	movlw	0
  7803  000FC0  6E1E               	movwf	i2printf@width,c
  7804  000FC2                     i2l3017:
  7805                           
  7806                           ;doprnt.c: 600: width *= 10;
  7807  000FC2  C01E  F001         	movff	i2printf@width,i2___wmul@multiplier
  7808  000FC6  C01F  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
  7809  000FCA  0E00               	movlw	0
  7810  000FCC  6E04               	movwf	i2___wmul@multiplicand+1,c
  7811  000FCE  0E0A               	movlw	10
  7812  000FD0  6E03               	movwf	i2___wmul@multiplicand,c
  7813  000FD2  ECF0  F00D         	call	i2___wmul	;wreg free
  7814  000FD6  C001  F01E         	movff	?i2___wmul,i2printf@width
  7815  000FDA  C002  F01F         	movff	?i2___wmul+1,i2printf@width+1
  7816                           
  7817                           ;doprnt.c: 601: width += *f++ - '0';
  7818  000FDE  0ED0               	movlw	208
  7819  000FE0  6E13               	movwf	??i2_printf& (0+255),c
  7820  000FE2  0EFF               	movlw	255
  7821  000FE4  6E14               	movwf	(??i2_printf+1)& (0+255),c
  7822  000FE6  C00D  FFF6         	movff	i2printf@f,tblptrl
  7823  000FEA  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7824  000FEE                     	if	0	;tblptru may be non-zero
  7825  000FEE                     	endif
  7826  000FEE                     	if	0	;tblptru may be non-zero
  7827  000FEE                     	endif
  7828  000FEE  0008               	tblrd		*
  7829  000FF0  50F5               	movf	tablat,w,c
  7830  000FF2  6E15               	movwf	(??i2_printf+2)& (0+255),c
  7831  000FF4  6A16               	clrf	(??i2_printf+3)& (0+255),c
  7832  000FF6  5013               	movf	??i2_printf,w,c
  7833  000FF8  2615               	addwf	??i2_printf+2,f,c
  7834  000FFA  5014               	movf	??i2_printf+1,w,c
  7835  000FFC  2216               	addwfc	??i2_printf+3,f,c
  7836  000FFE  5015               	movf	??i2_printf+2,w,c
  7837  001000  261E               	addwf	i2printf@width,f,c
  7838  001002  5016               	movf	??i2_printf+3,w,c
  7839  001004  221F               	addwfc	i2printf@width+1,f,c
  7840  001006  4A0D               	infsnz	i2printf@f,f,c
  7841  001008  2A0E               	incf	i2printf@f+1,f,c
  7842                           
  7843                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  7844  00100A  C00D  FFF6         	movff	i2printf@f,tblptrl
  7845  00100E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7846  001012                     	if	0	;tblptru may be non-zero
  7847  001012                     	endif
  7848  001012                     	if	0	;tblptru may be non-zero
  7849  001012                     	endif
  7850  001012  0008               	tblrd		*
  7851  001014  50F5               	movf	tablat,w,c
  7852  001016  EC12  F00E         	call	i2_isdigit
  7853  00101A  A0D8               	btfss	status,0,c
  7854  00101C  D003               	goto	i2l3029
  7855  00101E  D7D1               	goto	i2l3017
  7856  001020                     i2l3025:
  7857                           
  7858                           ;doprnt.c: 721: flag |= 0x80;
  7859  001020  8E1D               	bsf	i2printf@flag,7,c
  7860                           
  7861                           ;doprnt.c: 723: break;
  7862  001022  D017               	goto	i2l455
  7863  001024                     i2l3029:
  7864  001024  C00D  FFF6         	movff	i2printf@f,tblptrl
  7865  001028  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7866  00102C  4A0D               	infsnz	i2printf@f,f,c
  7867  00102E  2A0E               	incf	i2printf@f+1,f,c
  7868  001030                     	if	0	;tblptru may be non-zero
  7869  001030                     	endif
  7870  001030                     	if	0	;tblptru may be non-zero
  7871  001030                     	endif
  7872  001030  0008               	tblrd		*
  7873  001032  CFF5 F020          	movff	tablat,i2printf@c
  7874  001036  5020               	movf	i2printf@c,w,c
  7875                           
  7876                           ; Switch size 1, requested type "space"
  7877                           ; Number of cases is 4, Range of values is 0 to 120
  7878                           ; switch strategies available:
  7879                           ; Name         Instructions Cycles
  7880                           ; simple_byte           13     7 (average)
  7881                           ;	Chosen strategy is simple_byte
  7882  001038  0A00               	xorlw	0	; case 0
  7883  00103A  B4D8               	btfsc	status,2,c
  7884  00103C  0012               	return	
  7885  00103E  0A64               	xorlw	100	; case 100
  7886  001040  B4D8               	btfsc	status,2,c
  7887  001042  D007               	goto	i2l455
  7888  001044  0A0D               	xorlw	13	; case 105
  7889  001046  B4D8               	btfsc	status,2,c
  7890  001048  D004               	goto	i2l455
  7891  00104A  0A11               	xorlw	17	; case 120
  7892  00104C  B4D8               	btfsc	status,2,c
  7893  00104E  D7E8               	goto	i2l3025
  7894  001050  D103               	goto	i2l3127
  7895  001052                     i2l455:
  7896                           
  7897                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  7898  001052  BE1D               	btfsc	i2printf@flag,7,c
  7899  001054  D015               	goto	i2l3041
  7900                           
  7901                           ;doprnt.c: 1253: {
  7902                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  7903  001056  C018  FFD9         	movff	i2printf@ap,fsr2l
  7904  00105A  C019  FFDA         	movff	i2printf@ap+1,fsr2h
  7905  00105E  CFDE F01B          	movff	postinc2,i2printf@val
  7906  001062  CFDD F01C          	movff	postdec2,i2printf@val+1
  7907  001066  0E02               	movlw	2
  7908  001068  2618               	addwf	i2printf@ap,f,c
  7909  00106A  0E00               	movlw	0
  7910  00106C  2219               	addwfc	i2printf@ap+1,f,c
  7911                           
  7912                           ;doprnt.c: 1261: if((int)val < 0) {
  7913  00106E  AE1C               	btfss	i2printf@val+1,7,c
  7914  001070  D044               	goto	i2l3075
  7915                           
  7916                           ;doprnt.c: 1262: flag |= 0x03;
  7917  001072  0E03               	movlw	3
  7918  001074  121D               	iorwf	i2printf@flag,f,c
  7919                           
  7920                           ;doprnt.c: 1263: val = -val;
  7921  001076  6C1B               	negf	i2printf@val,c
  7922  001078  1E1C               	comf	i2printf@val+1,f,c
  7923  00107A  B0D8               	btfsc	status,0,c
  7924  00107C  2A1C               	incf	i2printf@val+1,f,c
  7925                           
  7926                           ;doprnt.c: 1264: }
  7927                           ;doprnt.c: 1266: }
  7928  00107E  D03D               	goto	i2l3075
  7929  001080                     i2l3041:
  7930                           
  7931                           ;doprnt.c: 1268: else
  7932                           ;doprnt.c: 1273: {
  7933                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  7934  001080  C018  FFD9         	movff	i2printf@ap,fsr2l
  7935  001084  C019  FFDA         	movff	i2printf@ap+1,fsr2h
  7936  001088  CFDE F01B          	movff	postinc2,i2printf@val
  7937  00108C  CFDD F01C          	movff	postdec2,i2printf@val+1
  7938  001090  0E02               	movlw	2
  7939  001092  2618               	addwf	i2printf@ap,f,c
  7940  001094  0E00               	movlw	0
  7941  001096  2219               	addwfc	i2printf@ap+1,f,c
  7942                           
  7943                           ;doprnt.c: 1287: }
  7944                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  7945  001098  D030               	goto	i2l3075
  7946  00109A                     i2l3045:
  7947                           
  7948                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7949  00109A  0E01               	movlw	1
  7950  00109C  6E20               	movwf	i2printf@c,c
  7951  00109E                     i2l3047:
  7952  00109E  0E05               	movlw	5
  7953  0010A0  1820               	xorwf	i2printf@c,w,c
  7954  0010A2  B4D8               	btfsc	status,2,c
  7955  0010A4  D032               	goto	i2l3077
  7956                           
  7957                           ;doprnt.c: 1306: if(val < dpowers[c])
  7958  0010A6  5020               	movf	i2printf@c,w,c
  7959  0010A8  0D02               	mullw	2
  7960  0010AA  0E58               	movlw	low _dpowers
  7961  0010AC  24F3               	addwf	prodl,w,c
  7962  0010AE  6EF6               	movwf	tblptrl,c
  7963  0010B0  0EFE               	movlw	high _dpowers
  7964  0010B2  20F4               	addwfc	prodh,w,c
  7965  0010B4  6EF7               	movwf	tblptrh,c
  7966  0010B6                     	if	0	;There are less than 3 active tblptr bytes
  7967  0010B6                     	endif
  7968  0010B6  0009               	tblrd		*+
  7969  0010B8  50F5               	movf	tablat,w,c
  7970  0010BA  5C1B               	subwf	i2printf@val,w,c
  7971  0010BC  0009               	tblrd		*+
  7972  0010BE  50F5               	movf	tablat,w,c
  7973  0010C0  581C               	subwfb	i2printf@val+1,w,c
  7974  0010C2  A0D8               	btfss	status,0,c
  7975  0010C4  D022               	goto	i2l3077
  7976                           
  7977                           ;doprnt.c: 1307: break;
  7978  0010C6  2A20               	incf	i2printf@c,f,c
  7979  0010C8  D7EA               	goto	i2l3047
  7980  0010CA                     i2l3059:
  7981                           
  7982                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  7983  0010CA  0E01               	movlw	1
  7984  0010CC  6E20               	movwf	i2printf@c,c
  7985  0010CE                     i2l3061:
  7986  0010CE  0E04               	movlw	4
  7987  0010D0  1820               	xorwf	i2printf@c,w,c
  7988  0010D2  B4D8               	btfsc	status,2,c
  7989  0010D4  D01A               	goto	i2l3077
  7990                           
  7991                           ;doprnt.c: 1317: if(val < hexpowers[c])
  7992  0010D6  5020               	movf	i2printf@c,w,c
  7993  0010D8  0D02               	mullw	2
  7994  0010DA  0E62               	movlw	low _hexpowers
  7995  0010DC  24F3               	addwf	prodl,w,c
  7996  0010DE  6EF6               	movwf	tblptrl,c
  7997  0010E0  0EFE               	movlw	high _hexpowers
  7998  0010E2  20F4               	addwfc	prodh,w,c
  7999  0010E4  6EF7               	movwf	tblptrh,c
  8000  0010E6                     	if	0	;There are less than 3 active tblptr bytes
  8001  0010E6                     	endif
  8002  0010E6  0009               	tblrd		*+
  8003  0010E8  50F5               	movf	tablat,w,c
  8004  0010EA  5C1B               	subwf	i2printf@val,w,c
  8005  0010EC  0009               	tblrd		*+
  8006  0010EE  50F5               	movf	tablat,w,c
  8007  0010F0  581C               	subwfb	i2printf@val+1,w,c
  8008  0010F2  A0D8               	btfss	status,0,c
  8009  0010F4  D00A               	goto	i2l3077
  8010                           
  8011                           ;doprnt.c: 1318: break;
  8012  0010F6  2A20               	incf	i2printf@c,f,c
  8013  0010F8  D7EA               	goto	i2l3061
  8014  0010FA                     i2l3075:
  8015  0010FA  501D               	movf	i2printf@flag,w,c
  8016  0010FC  0B80               	andlw	128
  8017                           
  8018                           ; Switch size 1, requested type "space"
  8019                           ; Number of cases is 2, Range of values is 0 to 128
  8020                           ; switch strategies available:
  8021                           ; Name         Instructions Cycles
  8022                           ; simple_byte            7     4 (average)
  8023                           ;	Chosen strategy is simple_byte
  8024  0010FE  0A00               	xorlw	0	; case 0
  8025  001100  B4D8               	btfsc	status,2,c
  8026  001102  D7CB               	goto	i2l3045
  8027  001104  0A80               	xorlw	128	; case 128
  8028  001106  B4D8               	btfsc	status,2,c
  8029  001108  D7E0               	goto	i2l3059
  8030  00110A                     i2l3077:
  8031                           
  8032                           ;doprnt.c: 1345: if(width && flag & 0x03)
  8033  00110A  501E               	movf	i2printf@width,w,c
  8034  00110C  101F               	iorwf	i2printf@width+1,w,c
  8035  00110E  B4D8               	btfsc	status,2,c
  8036  001110  D009               	goto	i2l3083
  8037  001112  C01D  F013         	movff	i2printf@flag,??i2_printf
  8038  001116  0E03               	movlw	3
  8039  001118  1613               	andwf	??i2_printf,f,c
  8040  00111A  B4D8               	btfsc	status,2,c
  8041  00111C  D003               	goto	i2l3083
  8042                           
  8043                           ;doprnt.c: 1346: width--;
  8044  00111E  061E               	decf	i2printf@width,f,c
  8045  001120  A0D8               	btfss	status,0,c
  8046  001122  061F               	decf	i2printf@width+1,f,c
  8047  001124                     i2l3083:
  8048                           
  8049                           ;doprnt.c: 1381: if(width > c)
  8050  001124  0E80               	movlw	128
  8051  001126  BE20               	btfsc	i2printf@c,7,c
  8052  001128  0E7F               	movlw	127
  8053  00112A  6E13               	movwf	??i2_printf& (0+255),c
  8054  00112C  501E               	movf	i2printf@width,w,c
  8055  00112E  5C20               	subwf	i2printf@c,w,c
  8056  001130  501F               	movf	i2printf@width+1,w,c
  8057  001132  0A80               	xorlw	128
  8058  001134  5813               	subwfb	??i2_printf& (0+255),w,c
  8059  001136  B0D8               	btfsc	status,0,c
  8060  001138  D007               	goto	i2l3087
  8061                           
  8062                           ;doprnt.c: 1382: width -= c;
  8063  00113A  5020               	movf	i2printf@c,w,c
  8064  00113C  5E1E               	subwf	i2printf@width,f,c
  8065  00113E  0E00               	movlw	0
  8066  001140  BE20               	btfsc	i2printf@c,7,c
  8067  001142  0EFF               	movlw	255
  8068  001144  5A1F               	subwfb	i2printf@width+1,f,c
  8069  001146  D004               	goto	i2l3089
  8070  001148                     i2l3087:
  8071                           
  8072                           ;doprnt.c: 1383: else
  8073                           ;doprnt.c: 1384: width = 0;
  8074  001148  0E00               	movlw	0
  8075  00114A  6E1F               	movwf	i2printf@width+1,c
  8076  00114C  0E00               	movlw	0
  8077  00114E  6E1E               	movwf	i2printf@width,c
  8078  001150                     i2l3089:
  8079                           
  8080                           ;doprnt.c: 1387: if(flag & 0x04) {
  8081  001150  A41D               	btfss	i2printf@flag,2,c
  8082  001152  D014               	goto	i2l3101
  8083                           
  8084                           ;doprnt.c: 1392: if(flag & 0x03)
  8085  001154  C01D  F013         	movff	i2printf@flag,??i2_printf
  8086  001158  0E03               	movlw	3
  8087  00115A  1613               	andwf	??i2_printf,f,c
  8088  00115C  B4D8               	btfsc	status,2,c
  8089  00115E  D003               	goto	i2l3095
  8090                           
  8091                           ;doprnt.c: 1393: (putch('-') );
  8092  001160  0E2D               	movlw	45
  8093  001162  EC40  F00E         	call	i2_putch
  8094  001166                     i2l3095:
  8095                           
  8096                           ;doprnt.c: 1415: if(width)
  8097  001166  501E               	movf	i2printf@width,w,c
  8098  001168  101F               	iorwf	i2printf@width+1,w,c
  8099  00116A  B4D8               	btfsc	status,2,c
  8100  00116C  D01E               	goto	i2l3111
  8101                           
  8102                           ;doprnt.c: 1417: (putch('0') );
  8103                           
  8104                           ;doprnt.c: 1416: do
  8105  00116E  0E30               	movlw	48
  8106  001170  EC40  F00E         	call	i2_putch
  8107                           
  8108                           ;doprnt.c: 1418: while(--width);
  8109  001174  061E               	decf	i2printf@width,f,c
  8110  001176  A0D8               	btfss	status,0,c
  8111  001178  061F               	decf	i2printf@width+1,f,c
  8112  00117A  D7F5               	goto	i2l3095
  8113  00117C                     i2l3101:
  8114                           
  8115                           ;doprnt.c: 1422: {
  8116                           ;doprnt.c: 1424: if(width
  8117                           ;doprnt.c: 1428: )
  8118  00117C  501E               	movf	i2printf@width,w,c
  8119  00117E  101F               	iorwf	i2printf@width+1,w,c
  8120  001180  B4D8               	btfsc	status,2,c
  8121  001182  D00A               	goto	i2l3107
  8122  001184                     i2l3103:
  8123                           
  8124                           ;doprnt.c: 1430: (putch(' ') );
  8125  001184  0E20               	movlw	32
  8126  001186  EC40  F00E         	call	i2_putch
  8127                           
  8128                           ;doprnt.c: 1431: while(--width);
  8129  00118A  061E               	decf	i2printf@width,f,c
  8130  00118C  A0D8               	btfss	status,0,c
  8131  00118E  061F               	decf	i2printf@width+1,f,c
  8132  001190  501E               	movf	i2printf@width,w,c
  8133  001192  101F               	iorwf	i2printf@width+1,w,c
  8134  001194  A4D8               	btfss	status,2,c
  8135  001196  D7F6               	goto	i2l3103
  8136  001198                     i2l3107:
  8137                           
  8138                           ;doprnt.c: 1438: if(flag & 0x03)
  8139  001198  C01D  F013         	movff	i2printf@flag,??i2_printf
  8140  00119C  0E03               	movlw	3
  8141  00119E  1613               	andwf	??i2_printf,f,c
  8142  0011A0  B4D8               	btfsc	status,2,c
  8143  0011A2  D003               	goto	i2l3111
  8144                           
  8145                           ;doprnt.c: 1439: (putch('-') );
  8146  0011A4  0E2D               	movlw	45
  8147  0011A6  EC40  F00E         	call	i2_putch
  8148  0011AA                     i2l3111:
  8149                           
  8150                           ;doprnt.c: 1469: }
  8151                           ;doprnt.c: 1472: prec = c;
  8152  0011AA  C020  F01A         	movff	i2printf@c,i2printf@prec
  8153                           
  8154                           ;doprnt.c: 1474: while(prec--) {
  8155  0011AE  D050               	goto	i2l3125
  8156  0011B0                     i2l3113:
  8157                           
  8158                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  8159  0011B0  501A               	movf	i2printf@prec,w,c
  8160  0011B2  0D02               	mullw	2
  8161  0011B4  0E58               	movlw	low _dpowers
  8162  0011B6  24F3               	addwf	prodl,w,c
  8163  0011B8  6EF6               	movwf	tblptrl,c
  8164  0011BA  0EFE               	movlw	high _dpowers
  8165  0011BC  20F4               	addwfc	prodh,w,c
  8166  0011BE  6EF7               	movwf	tblptrh,c
  8167  0011C0                     	if	0	;There are less than 3 active tblptr bytes
  8168  0011C0                     	endif
  8169  0011C0  0009               	tblrd		*+
  8170  0011C2  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  8171  0011C6  000A               	tblrd		*-
  8172  0011C8  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  8173  0011CC  C01B  F001         	movff	i2printf@val,i2___lwdiv@dividend
  8174  0011D0  C01C  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  8175  0011D4  ECC9  F00C         	call	i2___lwdiv	;wreg free
  8176  0011D8  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
  8177  0011DC  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
  8178  0011E0  0E00               	movlw	0
  8179  0011E2  6E0B               	movwf	i2___lwmod@divisor+1,c
  8180  0011E4  0E0A               	movlw	10
  8181  0011E6  6E0A               	movwf	i2___lwmod@divisor,c
  8182  0011E8  ECA9  F00D         	call	i2___lwmod	;wreg free
  8183  0011EC  5008               	movf	?i2___lwmod,w,c
  8184  0011EE  0F30               	addlw	48
  8185  0011F0  6E20               	movwf	i2printf@c,c
  8186                           
  8187                           ;doprnt.c: 1491: break;
  8188  0011F2  D02B               	goto	i2l3123
  8189  0011F4                     i2l3115:
  8190                           
  8191                           ;doprnt.c: 1499: {
  8192                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  8193  0011F4  C01B  F001         	movff	i2printf@val,i2___lwdiv@dividend
  8194  0011F8  C01C  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  8195  0011FC  501A               	movf	i2printf@prec,w,c
  8196  0011FE  0D02               	mullw	2
  8197  001200  0E62               	movlw	low _hexpowers
  8198  001202  24F3               	addwf	prodl,w,c
  8199  001204  6EF6               	movwf	tblptrl,c
  8200  001206  0EFE               	movlw	high _hexpowers
  8201  001208  20F4               	addwfc	prodh,w,c
  8202  00120A  6EF7               	movwf	tblptrh,c
  8203  00120C                     	if	0	;There are less than 3 active tblptr bytes
  8204  00120C                     	endif
  8205  00120C  0009               	tblrd		*+
  8206  00120E  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  8207  001212  000A               	tblrd		*-
  8208  001214  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  8209  001218  ECC9  F00C         	call	i2___lwdiv	;wreg free
  8210  00121C  5001               	movf	?i2___lwdiv,w,c
  8211  00121E  0B0F               	andlw	15
  8212  001220  6E17               	movwf	i2printf@idx,c
  8213                           
  8214                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  8215  001222  5017               	movf	i2printf@idx,w,c
  8216  001224  0D01               	mullw	1
  8217  001226  0EEF               	movlw	low STR_25
  8218  001228  24F3               	addwf	prodl,w,c
  8219  00122A  6EF6               	movwf	tblptrl,c
  8220  00122C  0EFE               	movlw	high STR_25
  8221  00122E  20F4               	addwfc	prodh,w,c
  8222  001230  6EF7               	movwf	tblptrh,c
  8223  001232                     	if	0	;There are less than 3 active tblptr bytes
  8224  001232                     	endif
  8225  001232  0008               	tblrd		*
  8226  001234  CFF5 F020          	movff	tablat,i2printf@c
  8227                           
  8228                           ;doprnt.c: 1523: }
  8229                           
  8230                           ;doprnt.c: 1508: }
  8231                           ;doprnt.c: 1510: break;
  8232  001238  D008               	goto	i2l3123
  8233  00123A                     i2l3121:
  8234  00123A  501D               	movf	i2printf@flag,w,c
  8235  00123C  0B80               	andlw	128
  8236                           
  8237                           ; Switch size 1, requested type "space"
  8238                           ; Number of cases is 2, Range of values is 0 to 128
  8239                           ; switch strategies available:
  8240                           ; Name         Instructions Cycles
  8241                           ; simple_byte            7     4 (average)
  8242                           ;	Chosen strategy is simple_byte
  8243  00123E  0A00               	xorlw	0	; case 0
  8244  001240  B4D8               	btfsc	status,2,c
  8245  001242  D7B6               	goto	i2l3113
  8246  001244  0A80               	xorlw	128	; case 128
  8247  001246  B4D8               	btfsc	status,2,c
  8248  001248  D7D5               	goto	i2l3115
  8249  00124A                     i2l3123:
  8250                           
  8251                           ;doprnt.c: 1524: (putch(c) );
  8252  00124A  5020               	movf	i2printf@c,w,c
  8253  00124C  EC40  F00E         	call	i2_putch
  8254  001250                     i2l3125:
  8255  001250  061A               	decf	i2printf@prec,f,c
  8256  001252  281A               	incf	i2printf@prec,w,c
  8257  001254  A4D8               	btfss	status,2,c
  8258  001256  D7F1               	goto	i2l3121
  8259  001258                     i2l3127:
  8260  001258  C00D  FFF6         	movff	i2printf@f,tblptrl
  8261  00125C  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  8262  001260  4A0D               	infsnz	i2printf@f,f,c
  8263  001262  2A0E               	incf	i2printf@f+1,f,c
  8264  001264                     	if	0	;tblptru may be non-zero
  8265  001264                     	endif
  8266  001264                     	if	0	;tblptru may be non-zero
  8267  001264                     	endif
  8268  001264  0008               	tblrd		*
  8269  001266  CFF5 F020          	movff	tablat,i2printf@c
  8270  00126A  5020               	movf	i2printf@c,w,c
  8271  00126C  B4D8               	btfsc	status,2,c
  8272  00126E  0012               	return	
  8273  001270  D67F               	goto	i2l3001
  8274  001272                     __end_ofi2_printf:
  8275                           	opt stack 0
  8276                           pclatu	equ	0xFFB
  8277                           pclath	equ	0xFFA
  8278                           tblptru	equ	0xFF8
  8279                           tblptrh	equ	0xFF7
  8280                           tblptrl	equ	0xFF6
  8281                           tablat	equ	0xFF5
  8282                           prodh	equ	0xFF4
  8283                           prodl	equ	0xFF3
  8284                           intcon	equ	0xFF2
  8285                           intcon3	equ	0xFF0
  8286                           postinc0	equ	0xFEE
  8287                           fsr0h	equ	0xFEA
  8288                           fsr0l	equ	0xFE9
  8289                           wreg	equ	0xFE8
  8290                           fsr1h	equ	0xFE2
  8291                           fsr1l	equ	0xFE1
  8292                           indf2	equ	0xFDF
  8293                           postinc2	equ	0xFDE
  8294                           postdec2	equ	0xFDD
  8295                           fsr2h	equ	0xFDA
  8296                           fsr2l	equ	0xFD9
  8297                           status	equ	0xFD8
  8298                           
  8299 ;; *************** function i2_putch *****************
  8300 ;; Defined at:
  8301 ;;		line 23 in file "../lcd.c"
  8302 ;; Parameters:    Size  Location     Type
  8303 ;;  data            1    wreg     unsigned char 
  8304 ;; Auto vars:     Size  Location     Type
  8305 ;;  data            1    2[COMRAM] unsigned char 
  8306 ;; Return value:  Size  Location     Type
  8307 ;;                  1    wreg      void 
  8308 ;; Registers used:
  8309 ;;		wreg, status,2, status,0, cstack
  8310 ;; Tracked objects:
  8311 ;;		On entry : 0/0
  8312 ;;		On exit  : 0/0
  8313 ;;		Unchanged: 0/0
  8314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8315 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8316 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8317 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8318 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8319 ;;Total ram usage:        1 bytes
  8320 ;; Hardware stack levels used:    1
  8321 ;; Hardware stack levels required when called:    1
  8322 ;; This function calls:
  8323 ;;		i2_lcdNibble
  8324 ;; This function is called by:
  8325 ;;		i2_printf
  8326 ;; This function uses a non-reentrant model
  8327 ;;
  8328                           
  8329                           	psect	text28
  8330  001C80                     __ptext28:
  8331                           	opt stack 0
  8332  001C80                     i2_putch:
  8333                           	opt stack 24
  8334                           
  8335                           ;incstack = 0
  8336                           ;i2putch@data stored from wreg
  8337  001C80  6E03               	movwf	i2putch@data,c
  8338                           
  8339                           ;lcd.c: 24: LATDbits.LATD2 = 1;
  8340  001C82  848C               	bsf	3980,2,c	;volatile
  8341                           
  8342                           ;lcd.c: 25: lcdNibble(data);
  8343  001C84  5003               	movf	i2putch@data,w,c
  8344  001C86  EC19  F00D         	call	i2_lcdNibble
  8345  001C8A  0012               	return		;funcret
  8346  001C8C                     __end_ofi2_putch:
  8347                           	opt stack 0
  8348                           pclatu	equ	0xFFB
  8349                           pclath	equ	0xFFA
  8350                           tblptru	equ	0xFF8
  8351                           tblptrh	equ	0xFF7
  8352                           tblptrl	equ	0xFF6
  8353                           tablat	equ	0xFF5
  8354                           prodh	equ	0xFF4
  8355                           prodl	equ	0xFF3
  8356                           intcon	equ	0xFF2
  8357                           intcon3	equ	0xFF0
  8358                           postinc0	equ	0xFEE
  8359                           fsr0h	equ	0xFEA
  8360                           fsr0l	equ	0xFE9
  8361                           wreg	equ	0xFE8
  8362                           fsr1h	equ	0xFE2
  8363                           fsr1l	equ	0xFE1
  8364                           indf2	equ	0xFDF
  8365                           postinc2	equ	0xFDE
  8366                           postdec2	equ	0xFDD
  8367                           fsr2h	equ	0xFDA
  8368                           fsr2l	equ	0xFD9
  8369                           status	equ	0xFD8
  8370                           
  8371 ;; *************** function i2_isdigit *****************
  8372 ;; Defined at:
  8373 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  8374 ;; Parameters:    Size  Location     Type
  8375 ;;  c               1    wreg     unsigned char 
  8376 ;; Auto vars:     Size  Location     Type
  8377 ;;  c               1    2[COMRAM] unsigned char 
  8378 ;; Return value:  Size  Location     Type
  8379 ;;		None               void
  8380 ;; Registers used:
  8381 ;;		wreg, status,2, status,0
  8382 ;; Tracked objects:
  8383 ;;		On entry : 0/0
  8384 ;;		On exit  : 0/0
  8385 ;;		Unchanged: 0/0
  8386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8388 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8389 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8390 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8391 ;;Total ram usage:        3 bytes
  8392 ;; Hardware stack levels used:    1
  8393 ;; This function calls:
  8394 ;;		Nothing
  8395 ;; This function is called by:
  8396 ;;		i2_printf
  8397 ;; This function uses a non-reentrant model
  8398 ;;
  8399                           
  8400                           	psect	text29
  8401  001C24                     __ptext29:
  8402                           	opt stack 0
  8403  001C24                     i2_isdigit:
  8404                           	opt stack 25
  8405                           
  8406                           ;incstack = 0
  8407                           ;i2isdigit@c stored from wreg
  8408  001C24  6E03               	movwf	i2isdigit@c,c
  8409  001C26  0E00               	movlw	0
  8410  001C28  6E02               	movwf	i2_isdigit$935,c
  8411  001C2A  0E3A               	movlw	58
  8412  001C2C  6003               	cpfslt	i2isdigit@c,c
  8413  001C2E  D005               	goto	i2l2733
  8414  001C30  0E2F               	movlw	47
  8415  001C32  6403               	cpfsgt	i2isdigit@c,c
  8416  001C34  D002               	goto	i2l2733
  8417  001C36  0E01               	movlw	1
  8418  001C38  6E02               	movwf	i2_isdigit$935,c
  8419  001C3A                     i2l2733:
  8420  001C3A  C002  F001         	movff	i2_isdigit$935,??i2_isdigit
  8421  001C3E  3001               	rrcf	??i2_isdigit,w,c
  8422  001C40  0012               	return	
  8423  001C42                     __end_ofi2_isdigit:
  8424                           	opt stack 0
  8425                           pclatu	equ	0xFFB
  8426                           pclath	equ	0xFFA
  8427                           tblptru	equ	0xFF8
  8428                           tblptrh	equ	0xFF7
  8429                           tblptrl	equ	0xFF6
  8430                           tablat	equ	0xFF5
  8431                           prodh	equ	0xFF4
  8432                           prodl	equ	0xFF3
  8433                           intcon	equ	0xFF2
  8434                           intcon3	equ	0xFF0
  8435                           postinc0	equ	0xFEE
  8436                           fsr0h	equ	0xFEA
  8437                           fsr0l	equ	0xFE9
  8438                           wreg	equ	0xFE8
  8439                           fsr1h	equ	0xFE2
  8440                           fsr1l	equ	0xFE1
  8441                           indf2	equ	0xFDF
  8442                           postinc2	equ	0xFDE
  8443                           postdec2	equ	0xFDD
  8444                           fsr2h	equ	0xFDA
  8445                           fsr2l	equ	0xFD9
  8446                           status	equ	0xFD8
  8447                           
  8448 ;; *************** function i2___wmul *****************
  8449 ;; Defined at:
  8450 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  8451 ;; Parameters:    Size  Location     Type
  8452 ;;  multiplier      2    0[COMRAM] unsigned int 
  8453 ;;  multiplicand    2    2[COMRAM] unsigned int 
  8454 ;; Auto vars:     Size  Location     Type
  8455 ;;  __wmul          2    4[COMRAM] unsigned int 
  8456 ;; Return value:  Size  Location     Type
  8457 ;;                  2    0[COMRAM] unsigned int 
  8458 ;; Registers used:
  8459 ;;		wreg, status,2, status,0, prodl, prodh
  8460 ;; Tracked objects:
  8461 ;;		On entry : 0/0
  8462 ;;		On exit  : 0/0
  8463 ;;		Unchanged: 0/0
  8464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8465 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8466 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8467 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8468 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8469 ;;Total ram usage:        6 bytes
  8470 ;; Hardware stack levels used:    1
  8471 ;; This function calls:
  8472 ;;		Nothing
  8473 ;; This function is called by:
  8474 ;;		i2_printf
  8475 ;; This function uses a non-reentrant model
  8476 ;;
  8477                           
  8478                           	psect	text30
  8479  001BE0                     __ptext30:
  8480                           	opt stack 0
  8481  001BE0                     i2___wmul:
  8482                           	opt stack 25
  8483                           
  8484                           ;incstack = 0
  8485  001BE0  5001               	movf	i2___wmul@multiplier,w,c
  8486  001BE2  0203               	mulwf	i2___wmul@multiplicand,c
  8487  001BE4  CFF3 F005          	movff	prodl,i2___wmul@product
  8488  001BE8  CFF4 F006          	movff	prodh,i2___wmul@product+1
  8489  001BEC  5001               	movf	i2___wmul@multiplier,w,c
  8490  001BEE  0204               	mulwf	i2___wmul@multiplicand+1,c
  8491  001BF0  50F3               	movf	prodl,w,c
  8492  001BF2  2606               	addwf	i2___wmul@product+1,f,c
  8493  001BF4  5002               	movf	i2___wmul@multiplier+1,w,c
  8494  001BF6  0203               	mulwf	i2___wmul@multiplicand,c
  8495  001BF8  50F3               	movf	prodl,w,c
  8496  001BFA  2606               	addwf	i2___wmul@product+1,f,c
  8497  001BFC  C005  F001         	movff	i2___wmul@product,?i2___wmul
  8498  001C00  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
  8499  001C04  0012               	return	
  8500  001C06                     __end_ofi2___wmul:
  8501                           	opt stack 0
  8502                           pclatu	equ	0xFFB
  8503                           pclath	equ	0xFFA
  8504                           tblptru	equ	0xFF8
  8505                           tblptrh	equ	0xFF7
  8506                           tblptrl	equ	0xFF6
  8507                           tablat	equ	0xFF5
  8508                           prodh	equ	0xFF4
  8509                           prodl	equ	0xFF3
  8510                           intcon	equ	0xFF2
  8511                           intcon3	equ	0xFF0
  8512                           postinc0	equ	0xFEE
  8513                           fsr0h	equ	0xFEA
  8514                           fsr0l	equ	0xFE9
  8515                           wreg	equ	0xFE8
  8516                           fsr1h	equ	0xFE2
  8517                           fsr1l	equ	0xFE1
  8518                           indf2	equ	0xFDF
  8519                           postinc2	equ	0xFDE
  8520                           postdec2	equ	0xFDD
  8521                           fsr2h	equ	0xFDA
  8522                           fsr2l	equ	0xFD9
  8523                           status	equ	0xFD8
  8524                           
  8525 ;; *************** function i2___lwmod *****************
  8526 ;; Defined at:
  8527 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  8528 ;; Parameters:    Size  Location     Type
  8529 ;;  dividend        2    7[COMRAM] unsigned int 
  8530 ;;  divisor         2    9[COMRAM] unsigned int 
  8531 ;; Auto vars:     Size  Location     Type
  8532 ;;  __lwmod         1   11[COMRAM] unsigned char 
  8533 ;; Return value:  Size  Location     Type
  8534 ;;                  2    7[COMRAM] unsigned int 
  8535 ;; Registers used:
  8536 ;;		wreg, status,2, status,0
  8537 ;; Tracked objects:
  8538 ;;		On entry : 0/0
  8539 ;;		On exit  : 0/0
  8540 ;;		Unchanged: 0/0
  8541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8542 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8543 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8544 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8545 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8546 ;;Total ram usage:        5 bytes
  8547 ;; Hardware stack levels used:    1
  8548 ;; This function calls:
  8549 ;;		Nothing
  8550 ;; This function is called by:
  8551 ;;		i2_printf
  8552 ;; This function uses a non-reentrant model
  8553 ;;
  8554                           
  8555                           	psect	text31
  8556  001B52                     __ptext31:
  8557                           	opt stack 0
  8558  001B52                     i2___lwmod:
  8559                           	opt stack 25
  8560                           
  8561                           ;incstack = 0
  8562  001B52  500A               	movf	i2___lwmod@divisor,w,c
  8563  001B54  100B               	iorwf	i2___lwmod@divisor+1,w,c
  8564  001B56  B4D8               	btfsc	status,2,c
  8565  001B58  D018               	goto	i2l910
  8566  001B5A  0E01               	movlw	1
  8567  001B5C  6E0C               	movwf	i2___lwmod@counter,c
  8568  001B5E  D004               	goto	i2l2765
  8569  001B60                     i2l2763:
  8570  001B60  90D8               	bcf	status,0,c
  8571  001B62  360A               	rlcf	i2___lwmod@divisor,f,c
  8572  001B64  360B               	rlcf	i2___lwmod@divisor+1,f,c
  8573  001B66  2A0C               	incf	i2___lwmod@counter,f,c
  8574  001B68                     i2l2765:
  8575  001B68  AE0B               	btfss	i2___lwmod@divisor+1,7,c
  8576  001B6A  D7FA               	goto	i2l2763
  8577  001B6C                     i2l2767:
  8578  001B6C  500A               	movf	i2___lwmod@divisor,w,c
  8579  001B6E  5C08               	subwf	i2___lwmod@dividend,w,c
  8580  001B70  500B               	movf	i2___lwmod@divisor+1,w,c
  8581  001B72  5809               	subwfb	i2___lwmod@dividend+1,w,c
  8582  001B74  A0D8               	btfss	status,0,c
  8583  001B76  D004               	goto	i2l2771
  8584  001B78  500A               	movf	i2___lwmod@divisor,w,c
  8585  001B7A  5E08               	subwf	i2___lwmod@dividend,f,c
  8586  001B7C  500B               	movf	i2___lwmod@divisor+1,w,c
  8587  001B7E  5A09               	subwfb	i2___lwmod@dividend+1,f,c
  8588  001B80                     i2l2771:
  8589  001B80  90D8               	bcf	status,0,c
  8590  001B82  320B               	rrcf	i2___lwmod@divisor+1,f,c
  8591  001B84  320A               	rrcf	i2___lwmod@divisor,f,c
  8592  001B86  2E0C               	decfsz	i2___lwmod@counter,f,c
  8593  001B88  D7F1               	goto	i2l2767
  8594  001B8A                     i2l910:
  8595  001B8A  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
  8596  001B8E  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
  8597  001B92  0012               	return		;funcret
  8598  001B94                     __end_ofi2___lwmod:
  8599                           	opt stack 0
  8600                           pclatu	equ	0xFFB
  8601                           pclath	equ	0xFFA
  8602                           tblptru	equ	0xFF8
  8603                           tblptrh	equ	0xFF7
  8604                           tblptrl	equ	0xFF6
  8605                           tablat	equ	0xFF5
  8606                           prodh	equ	0xFF4
  8607                           prodl	equ	0xFF3
  8608                           intcon	equ	0xFF2
  8609                           intcon3	equ	0xFF0
  8610                           postinc0	equ	0xFEE
  8611                           fsr0h	equ	0xFEA
  8612                           fsr0l	equ	0xFE9
  8613                           wreg	equ	0xFE8
  8614                           fsr1h	equ	0xFE2
  8615                           fsr1l	equ	0xFE1
  8616                           indf2	equ	0xFDF
  8617                           postinc2	equ	0xFDE
  8618                           postdec2	equ	0xFDD
  8619                           fsr2h	equ	0xFDA
  8620                           fsr2l	equ	0xFD9
  8621                           status	equ	0xFD8
  8622                           
  8623 ;; *************** function i2___lwdiv *****************
  8624 ;; Defined at:
  8625 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  8626 ;; Parameters:    Size  Location     Type
  8627 ;;  dividend        2    0[COMRAM] unsigned int 
  8628 ;;  divisor         2    2[COMRAM] unsigned int 
  8629 ;; Auto vars:     Size  Location     Type
  8630 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  8631 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  8632 ;; Return value:  Size  Location     Type
  8633 ;;                  2    0[COMRAM] unsigned int 
  8634 ;; Registers used:
  8635 ;;		wreg, status,2, status,0
  8636 ;; Tracked objects:
  8637 ;;		On entry : 0/0
  8638 ;;		On exit  : 0/0
  8639 ;;		Unchanged: 0/0
  8640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8641 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8642 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8643 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8644 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8645 ;;Total ram usage:        7 bytes
  8646 ;; Hardware stack levels used:    1
  8647 ;; This function calls:
  8648 ;;		Nothing
  8649 ;; This function is called by:
  8650 ;;		i2_printf
  8651 ;; This function uses a non-reentrant model
  8652 ;;
  8653                           
  8654                           	psect	text32
  8655  001992                     __ptext32:
  8656                           	opt stack 0
  8657  001992                     i2___lwdiv:
  8658                           	opt stack 25
  8659                           
  8660                           ;incstack = 0
  8661  001992  0E00               	movlw	0
  8662  001994  6E06               	movwf	i2___lwdiv@quotient+1,c
  8663  001996  0E00               	movlw	0
  8664  001998  6E05               	movwf	i2___lwdiv@quotient,c
  8665  00199A  5003               	movf	i2___lwdiv@divisor,w,c
  8666  00199C  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  8667  00199E  B4D8               	btfsc	status,2,c
  8668  0019A0  D01C               	goto	i2l900
  8669  0019A2  0E01               	movlw	1
  8670  0019A4  6E07               	movwf	i2___lwdiv@counter,c
  8671  0019A6  D004               	goto	i2l2745
  8672  0019A8                     i2l2743:
  8673  0019A8  90D8               	bcf	status,0,c
  8674  0019AA  3603               	rlcf	i2___lwdiv@divisor,f,c
  8675  0019AC  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  8676  0019AE  2A07               	incf	i2___lwdiv@counter,f,c
  8677  0019B0                     i2l2745:
  8678  0019B0  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  8679  0019B2  D7FA               	goto	i2l2743
  8680  0019B4                     i2l2747:
  8681  0019B4  90D8               	bcf	status,0,c
  8682  0019B6  3605               	rlcf	i2___lwdiv@quotient,f,c
  8683  0019B8  3606               	rlcf	i2___lwdiv@quotient+1,f,c
  8684  0019BA  5003               	movf	i2___lwdiv@divisor,w,c
  8685  0019BC  5C01               	subwf	i2___lwdiv@dividend,w,c
  8686  0019BE  5004               	movf	i2___lwdiv@divisor+1,w,c
  8687  0019C0  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  8688  0019C2  A0D8               	btfss	status,0,c
  8689  0019C4  D005               	goto	i2l2755
  8690  0019C6  5003               	movf	i2___lwdiv@divisor,w,c
  8691  0019C8  5E01               	subwf	i2___lwdiv@dividend,f,c
  8692  0019CA  5004               	movf	i2___lwdiv@divisor+1,w,c
  8693  0019CC  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  8694  0019CE  8005               	bsf	i2___lwdiv@quotient,0,c
  8695  0019D0                     i2l2755:
  8696  0019D0  90D8               	bcf	status,0,c
  8697  0019D2  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  8698  0019D4  3203               	rrcf	i2___lwdiv@divisor,f,c
  8699  0019D6  2E07               	decfsz	i2___lwdiv@counter,f,c
  8700  0019D8  D7ED               	goto	i2l2747
  8701  0019DA                     i2l900:
  8702  0019DA  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  8703  0019DE  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  8704  0019E2  0012               	return		;funcret
  8705  0019E4                     __end_ofi2___lwdiv:
  8706                           	opt stack 0
  8707                           pclatu	equ	0xFFB
  8708                           pclath	equ	0xFFA
  8709                           tblptru	equ	0xFF8
  8710                           tblptrh	equ	0xFF7
  8711                           tblptrl	equ	0xFF6
  8712                           tablat	equ	0xFF5
  8713                           prodh	equ	0xFF4
  8714                           prodl	equ	0xFF3
  8715                           intcon	equ	0xFF2
  8716                           intcon3	equ	0xFF0
  8717                           postinc0	equ	0xFEE
  8718                           fsr0h	equ	0xFEA
  8719                           fsr0l	equ	0xFE9
  8720                           wreg	equ	0xFE8
  8721                           fsr1h	equ	0xFE2
  8722                           fsr1l	equ	0xFE1
  8723                           indf2	equ	0xFDF
  8724                           postinc2	equ	0xFDE
  8725                           postdec2	equ	0xFDD
  8726                           fsr2h	equ	0xFDA
  8727                           fsr2l	equ	0xFD9
  8728                           status	equ	0xFD8
  8729                           
  8730 ;; *************** function i2_lcdInst *****************
  8731 ;; Defined at:
  8732 ;;		line 18 in file "../lcd.c"
  8733 ;; Parameters:    Size  Location     Type
  8734 ;;  data            1    wreg     unsigned char 
  8735 ;; Auto vars:     Size  Location     Type
  8736 ;;  data            1    2[COMRAM] unsigned char 
  8737 ;; Return value:  Size  Location     Type
  8738 ;;                  1    wreg      void 
  8739 ;; Registers used:
  8740 ;;		wreg, status,2, status,0, cstack
  8741 ;; Tracked objects:
  8742 ;;		On entry : 0/0
  8743 ;;		On exit  : 0/0
  8744 ;;		Unchanged: 0/0
  8745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8746 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8747 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8748 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8749 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8750 ;;Total ram usage:        1 bytes
  8751 ;; Hardware stack levels used:    1
  8752 ;; Hardware stack levels required when called:    1
  8753 ;; This function calls:
  8754 ;;		i2_lcdNibble
  8755 ;; This function is called by:
  8756 ;;		_switchMenu
  8757 ;;		_ISR
  8758 ;; This function uses a non-reentrant model
  8759 ;;
  8760                           
  8761                           	psect	text33
  8762  001C8C                     __ptext33:
  8763                           	opt stack 0
  8764  001C8C                     i2_lcdInst:
  8765                           	opt stack 25
  8766                           
  8767                           ;incstack = 0
  8768                           ;i2lcdInst@data stored from wreg
  8769  001C8C  6E03               	movwf	i2lcdInst@data,c
  8770                           
  8771                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  8772  001C8E  948C               	bcf	3980,2,c	;volatile
  8773                           
  8774                           ;lcd.c: 20: lcdNibble(data);
  8775  001C90  5003               	movf	i2lcdInst@data,w,c
  8776  001C92  EC19  F00D         	call	i2_lcdNibble
  8777  001C96  0012               	return		;funcret
  8778  001C98                     __end_ofi2_lcdInst:
  8779                           	opt stack 0
  8780                           pclatu	equ	0xFFB
  8781                           pclath	equ	0xFFA
  8782                           tblptru	equ	0xFF8
  8783                           tblptrh	equ	0xFF7
  8784                           tblptrl	equ	0xFF6
  8785                           tablat	equ	0xFF5
  8786                           prodh	equ	0xFF4
  8787                           prodl	equ	0xFF3
  8788                           intcon	equ	0xFF2
  8789                           intcon3	equ	0xFF0
  8790                           postinc0	equ	0xFEE
  8791                           fsr0h	equ	0xFEA
  8792                           fsr0l	equ	0xFE9
  8793                           wreg	equ	0xFE8
  8794                           fsr1h	equ	0xFE2
  8795                           fsr1l	equ	0xFE1
  8796                           indf2	equ	0xFDF
  8797                           postinc2	equ	0xFDE
  8798                           postdec2	equ	0xFDD
  8799                           fsr2h	equ	0xFDA
  8800                           fsr2l	equ	0xFD9
  8801                           status	equ	0xFD8
  8802                           
  8803 ;; *************** function i2_lcdNibble *****************
  8804 ;; Defined at:
  8805 ;;		line 28 in file "../lcd.c"
  8806 ;; Parameters:    Size  Location     Type
  8807 ;;  data            1    wreg     unsigned char 
  8808 ;; Auto vars:     Size  Location     Type
  8809 ;;  data            1    1[COMRAM] unsigned char 
  8810 ;;  lcdNibble       1    0[COMRAM] unsigned char 
  8811 ;; Return value:  Size  Location     Type
  8812 ;;                  1    wreg      void 
  8813 ;; Registers used:
  8814 ;;		wreg, status,2, status,0
  8815 ;; Tracked objects:
  8816 ;;		On entry : 0/0
  8817 ;;		On exit  : 0/0
  8818 ;;		Unchanged: 0/0
  8819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8820 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8821 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8823 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8824 ;;Total ram usage:        2 bytes
  8825 ;; Hardware stack levels used:    1
  8826 ;; This function calls:
  8827 ;;		Nothing
  8828 ;; This function is called by:
  8829 ;;		i2_lcdInst
  8830 ;;		i2_putch
  8831 ;; This function uses a non-reentrant model
  8832 ;;
  8833                           
  8834                           	psect	text34
  8835  001A32                     __ptext34:
  8836                           	opt stack 0
  8837  001A32                     i2_lcdNibble:
  8838                           	opt stack 24
  8839                           
  8840                           ;incstack = 0
  8841                           ;i2lcdNibble@data stored from wreg
  8842  001A32  6E02               	movwf	i2lcdNibble@data,c
  8843                           
  8844                           ;lcd.c: 30: char temp = data & 0xF0;
  8845  001A34  5002               	movf	i2lcdNibble@data,w,c
  8846  001A36  0BF0               	andlw	240
  8847  001A38  6E01               	movwf	i2lcdNibble@temp,c
  8848                           
  8849                           ;lcd.c: 31: LATD = LATD & 0x0F;
  8850  001A3A  508C               	movf	3980,w,c	;volatile
  8851  001A3C  0B0F               	andlw	15
  8852  001A3E  6E8C               	movwf	3980,c	;volatile
  8853                           
  8854                           ;lcd.c: 32: LATD = temp | LATD;
  8855  001A40  5001               	movf	i2lcdNibble@temp,w,c
  8856  001A42  108C               	iorwf	3980,w,c	;volatile
  8857  001A44  6E8C               	movwf	3980,c	;volatile
  8858                           
  8859                           ;lcd.c: 34: LATDbits.LATD3 = 0;
  8860  001A46  968C               	bcf	3980,3,c	;volatile
  8861                           
  8862                           ;lcd.c: 35: _delay((unsigned long)((30)*(10000000/4000000.0)));
  8863  001A48  0E19               	movlw	25
  8864  001A4A                     i2u527_47:
  8865  001A4A  2EE8               	decfsz	wreg,f,c
  8866  001A4C  D7FE               	bra	i2u527_47
  8867                           
  8868                           ;lcd.c: 36: LATDbits.LATD3 = 1;
  8869  001A4E  868C               	bsf	3980,3,c	;volatile
  8870                           
  8871                           ;lcd.c: 37: _delay((unsigned long)((30)*(10000000/4000000.0)));
  8872  001A50  0E19               	movlw	25
  8873  001A52                     i2u528_47:
  8874  001A52  2EE8               	decfsz	wreg,f,c
  8875  001A54  D7FE               	bra	i2u528_47
  8876                           
  8877                           ;lcd.c: 39: data = data << 4;
  8878  001A56  3802               	swapf	i2lcdNibble@data,w,c
  8879  001A58  0BF0               	andlw	240
  8880  001A5A  6E02               	movwf	i2lcdNibble@data,c
  8881                           
  8882                           ;lcd.c: 41: temp = data & 0xF0;
  8883  001A5C  5002               	movf	i2lcdNibble@data,w,c
  8884  001A5E  0BF0               	andlw	240
  8885  001A60  6E01               	movwf	i2lcdNibble@temp,c
  8886                           
  8887                           ;lcd.c: 42: LATD = LATD & 0x0F;
  8888  001A62  508C               	movf	3980,w,c	;volatile
  8889  001A64  0B0F               	andlw	15
  8890  001A66  6E8C               	movwf	3980,c	;volatile
  8891                           
  8892                           ;lcd.c: 43: LATD = temp | LATD;
  8893  001A68  5001               	movf	i2lcdNibble@temp,w,c
  8894  001A6A  108C               	iorwf	3980,w,c	;volatile
  8895  001A6C  6E8C               	movwf	3980,c	;volatile
  8896                           
  8897                           ;lcd.c: 45: LATDbits.LATD3 = 0;
  8898  001A6E  968C               	bcf	3980,3,c	;volatile
  8899                           
  8900                           ;lcd.c: 46: _delay((unsigned long)((30)*(10000000/4000000.0)));
  8901  001A70  0E19               	movlw	25
  8902  001A72                     i2u529_47:
  8903  001A72  2EE8               	decfsz	wreg,f,c
  8904  001A74  D7FE               	bra	i2u529_47
  8905                           
  8906                           ;lcd.c: 47: LATDbits.LATD3 = 1;
  8907  001A76  868C               	bsf	3980,3,c	;volatile
  8908                           
  8909                           ;lcd.c: 48: _delay((unsigned long)((30)*(10000000/4000000.0)));
  8910  001A78  0E19               	movlw	25
  8911  001A7A                     i2u530_47:
  8912  001A7A  2EE8               	decfsz	wreg,f,c
  8913  001A7C  D7FE               	bra	i2u530_47
  8914  001A7E  0012               	return		;funcret
  8915  001A80                     __end_ofi2_lcdNibble:
  8916                           	opt stack 0
  8917                           pclatu	equ	0xFFB
  8918                           pclath	equ	0xFFA
  8919                           tblptru	equ	0xFF8
  8920                           tblptrh	equ	0xFF7
  8921                           tblptrl	equ	0xFF6
  8922                           tablat	equ	0xFF5
  8923                           prodh	equ	0xFF4
  8924                           prodl	equ	0xFF3
  8925                           intcon	equ	0xFF2
  8926                           intcon3	equ	0xFF0
  8927                           postinc0	equ	0xFEE
  8928                           fsr0h	equ	0xFEA
  8929                           fsr0l	equ	0xFE9
  8930                           wreg	equ	0xFE8
  8931                           fsr1h	equ	0xFE2
  8932                           fsr1l	equ	0xFE1
  8933                           indf2	equ	0xFDF
  8934                           postinc2	equ	0xFDE
  8935                           postdec2	equ	0xFDD
  8936                           fsr2h	equ	0xFDA
  8937                           fsr2l	equ	0xFD9
  8938                           status	equ	0xFD8
  8939                           pclatu	equ	0xFFB
  8940                           pclath	equ	0xFFA
  8941                           tblptru	equ	0xFF8
  8942                           tblptrh	equ	0xFF7
  8943                           tblptrl	equ	0xFF6
  8944                           tablat	equ	0xFF5
  8945                           prodh	equ	0xFF4
  8946                           prodl	equ	0xFF3
  8947                           intcon	equ	0xFF2
  8948                           intcon3	equ	0xFF0
  8949                           postinc0	equ	0xFEE
  8950                           fsr0h	equ	0xFEA
  8951                           fsr0l	equ	0xFE9
  8952                           wreg	equ	0xFE8
  8953                           fsr1h	equ	0xFE2
  8954                           fsr1l	equ	0xFE1
  8955                           indf2	equ	0xFDF
  8956                           postinc2	equ	0xFDE
  8957                           postdec2	equ	0xFDD
  8958                           fsr2h	equ	0xFDA
  8959                           fsr2l	equ	0xFD9
  8960                           status	equ	0xFD8
  8961                           
  8962                           	psect	rparam
  8963  0000                     pclatu	equ	0xFFB
  8964                           pclath	equ	0xFFA
  8965                           tblptru	equ	0xFF8
  8966                           tblptrh	equ	0xFF7
  8967                           tblptrl	equ	0xFF6
  8968                           tablat	equ	0xFF5
  8969                           prodh	equ	0xFF4
  8970                           prodl	equ	0xFF3
  8971                           intcon	equ	0xFF2
  8972                           intcon3	equ	0xFF0
  8973                           postinc0	equ	0xFEE
  8974                           fsr0h	equ	0xFEA
  8975                           fsr0l	equ	0xFE9
  8976                           wreg	equ	0xFE8
  8977                           fsr1h	equ	0xFE2
  8978                           fsr1l	equ	0xFE1
  8979                           indf2	equ	0xFDF
  8980                           postinc2	equ	0xFDE
  8981                           postdec2	equ	0xFDD
  8982                           fsr2h	equ	0xFDA
  8983                           fsr2l	equ	0xFD9
  8984                           status	equ	0xFD8
  8985                           
  8986                           	psect	temp
  8987  00004C                     btemp:
  8988                           	opt stack 0
  8989  00004C                     	ds	1
  8990  0000                     int$flags	set	btemp
  8991                           pclatu	equ	0xFFB
  8992                           pclath	equ	0xFFA
  8993                           tblptru	equ	0xFF8
  8994                           tblptrh	equ	0xFF7
  8995                           tblptrl	equ	0xFF6
  8996                           tablat	equ	0xFF5
  8997                           prodh	equ	0xFF4
  8998                           prodl	equ	0xFF3
  8999                           intcon	equ	0xFF2
  9000                           intcon3	equ	0xFF0
  9001                           postinc0	equ	0xFEE
  9002                           fsr0h	equ	0xFEA
  9003                           fsr0l	equ	0xFE9
  9004                           wreg	equ	0xFE8
  9005                           fsr1h	equ	0xFE2
  9006                           fsr1l	equ	0xFE1
  9007                           indf2	equ	0xFDF
  9008                           postinc2	equ	0xFDE
  9009                           postdec2	equ	0xFDD
  9010                           fsr2h	equ	0xFDA
  9011                           fsr2l	equ	0xFD9
  9012                           status	equ	0xFD8


Data Sizes:
    Strings     405
    Constant    35
    Data        2
    BSS         40
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     67      75
    BANK0           128     29      63
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 25
		 -> STR_24(CODE[22]), STR_23(CODE[17]), STR_22(CODE[17]), STR_21(CODE[17]), 
		 -> STR_20(CODE[23]), STR_19(CODE[23]), STR_18(CODE[21]), STR_17(CODE[17]), 
		 -> STR_16(CODE[21]), STR_15(CODE[17]), STR_14(CODE[21]), STR_13(CODE[17]), 
		 -> STR_12(CODE[19]), STR_11(CODE[17]), STR_10(CODE[19]), STR_9(CODE[17]), 
		 -> STR_8(CODE[25]), STR_7(CODE[17]), STR_6(CODE[17]), STR_5(CODE[17]), 
		 -> STR_4(CODE[17]), STR_3(CODE[17]), STR_2(CODE[17]), STR_1(CODE[17]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _stopOperation->___awdiv
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _I2C_Master_Init->___lldiv

Critical Paths under _ISR in COMRAM

    _ISR->_switchMenu
    _switchMenu->i2_printf
    i2_stopOperation->i2___awdiv
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_lcdInst->i2_lcdNibble

Critical Paths under _main in BANK0

    _main->_printf

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                11    11      0    6818
                                             18 BANK0     11    11      0
                    _I2C_Master_Init
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _initLCD
                            _lcdInst
                             _printf
                            _readADC
                      _stopOperation
                      _testBatteries
 ---------------------------------------------------------------------------------
 (1) _testBatteries                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _stopOperation                                        0     0      0    1004
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     500
                                             51 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     504
                                             51 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _readADC                                              1     1      0      22
                                             51 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _printf                                              31    23      8    4426
                                             63 COMRAM     4     4      0
                                              0 BANK0     18    10      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0     135
                                             53 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             51 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     289
                                             51 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     287
                                             58 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     418
                                             51 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                             54 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0     135
                                             53 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0     113
                                             51 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Write                                     2     0      2     214
                                             52 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Read                                      2     2      0      45
                                             52 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Wait                                      1     1      0       0
                                             51 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     398
                                              0 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     290
                                             51 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _ISR                                                 16    16      0    6841
                                             35 COMRAM    16    16      0
                         _switchMenu
                          i2___awdiv
                          i2___awmod
                          i2_lcdInst
                           i2_printf
                    i2_stopOperation
 ---------------------------------------------------------------------------------
 (5) _switchMenu                                           3     1      2    3137
                                             32 COMRAM     3     1      2
                          i2_lcdInst
                           i2_printf
                    i2_stopOperation
 ---------------------------------------------------------------------------------
 (5) i2_stopOperation                                      0     0      0     804
                          i2___awdiv
                          i2___awmod
 ---------------------------------------------------------------------------------
 (6) i2___awmod                                            6     2      4     400
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) i2___awdiv                                            8     4      4     404
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (5) i2_printf                                            29    23      6    1938
                                             12 COMRAM    20    14      6
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (6) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (6) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) i2___wmul                                             6     2      4     209
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (6) i2___lwdiv                                            7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (7) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _I2C_Master_Read
     _I2C_Master_Wait
   _I2C_Master_Start
     _I2C_Master_Wait
   _I2C_Master_Stop
     _I2C_Master_Wait
   _I2C_Master_Write
     _I2C_Master_Wait
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
       _lcdNibble
   _readADC
   _stopOperation
     ___awdiv
     ___awmod
   _testBatteries

 _ISR (ROOT)
   _switchMenu
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
       i2___lwmod
         i2___lwdiv (ARG)
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
     i2_stopOperation
       i2___awdiv
       i2___awmod
   i2___awdiv
   i2___awmod
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     i2___lwdiv
     i2___lwmod
       i2___lwdiv (ARG)
     i2___wmul
     i2_isdigit
     i2_putch
       i2_lcdNibble
   i2_stopOperation
     i2___awdiv
     i2___awmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     1D      3F       5       49.2%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     43      4B       1       59.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      8A      34        0.0%
DATA                 0      0      8A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Mon Mar 13 15:00:59 2017

                       l30 1C56               ___awdiv@sign 0039        ___wmul@multiplicand 0036  
       i2___lwdiv@dividend 0001                __CFG_BORV$3 000000               __CFG_CP0$OFF 000000  
             __CFG_CP1$OFF 000000               __CFG_CP2$OFF 000000               __CFG_CP3$OFF 000000  
              __CFG_OSC$HS 000000                        l250 0230                        l333 1C50  
                      l253 0284                        l350 136C                        l344 12C4  
                      l272 03BE                        l355 13CC                        l347 1318  
                      l277 045E                        l455 0CE0                        l900 1988  
                      l910 1B48                        l847 17F2                        _GIE 007F97  
             __CFG_CPB$OFF 000000                        _PEN 007E2A               __CFG_CPD$OFF 000000  
                      _ISR 0008                        _SEN 007E28                        _min 0093  
                      _sec 0099               ___awmod@sign 0039                        prod 000FF3  
                      wreg 000FE8               __CFG_LVP$OFF 000000                       ?_ISR 0001  
             __CFG_WDT$OFF 000000                       l4103 0C14                       l4121 0CAE  
                     l3401 138E                       l4203 0E88                       l3157 1BDA  
                     l4205 0E8E                       l4213 0F22                       l4133 0D18  
                     l4117 0CA8                       l4109 0C44                       l4207 0ED6  
                     l4215 0F34                       l4151 0D70                       l4217 0F3C  
                     l4153 0D76                       l4137 0D34                       l3425 13DC  
                     l3409 13AA                       l3329 129C                       l4139 0D3A  
                     l4219 0F48                       l3355 12F0                       l4403 03EE  
                     l4331 028C                       l4315 0238                       l4181 0E1C  
                     l4093 0BE4                       l2813 168E                       l3381 1344  
                     l4501 0700                       l4253 00BE                       l4245 008C  
                     l2903 17E4                       l4175 0DDE                       l4167 0DAC  
                     l4431 04D8                       l4335 0296                       l4319 0242  
                     l4271 010C                       l2913 1956                       l4193 0E50  
                     l4169 0DBE                       l4097 0BF8                       l2825 16B4  
                     l2841 16E6                       l4513 078A                       l4433 04DC  
                     l4345 02D8                       l4265 00EA                       l4257 00C8  
                     l2915 195E                       l4195 0E5C                       l4187 0E34  
                     l4179 0E12                       l4099 0C0A                       l2827 16BC  
                     l2819 169E                       l4515 0796                       l4507 0720  
                     l4451 0574                       l4443 052E                       l4363 030C  
                     l4347 02DC                       l4435 04F8                       l4275 0116  
                     l4283 0138                       l2925 197E                       l2917 1962  
                     l2941 1B3E                       l2933 1B1E                       l2845 16F4  
                     l2837 16DC                       l2829 16C0                       l2861 1824  
                     l4525 07E4                       l4461 05C0                       l4453 0580  
                     l4445 0538                       l4437 0502                       l4381 0354  
                     l4285 0144                       l2935 1B26                       l4199 0E76  
                     l4375 033C                       l2937 1B2A                       l2881 186A  
                     l2873 1852                       l2865 1832                       l2857 1818  
                     l4393 03A8                       l4369 0324                       l2891 17A4  
                     l2795 1C1C                       l2867 183A                       l4491 06B4  
                     l4483 0674                       l4475 0634                       l4467 05F4  
                     l4459 05B4                       l4395 03AE                       l4299 01DC  
                     l2893 17B0                       l2869 183E                       l2877 185C  
                     l4493 06C0                       l4485 0680                       l4477 0640  
                     l4469 0600                       l4389 035C                       l2895 17B4  
                     l4497 06F6                       STR_1 FFDD                       STR_2 FFEE  
                     STR_3 FFCC                       STR_4 FF44                       STR_5 FF88  
                     STR_6 FF66                       STR_7 FFBB                       STR_8 FE6A  
                     STR_9 FF55                       _LATA 000F89                       _LATB 000F8A  
                     _LATC 000F8B                       u3200 1328                       _LATD 000F8C  
                     _LATE 000F8D                       u3210 1350                       u3220 137C  
                     u3230 139A                       u3240 13BA                       u5000 04CE  
                     u3170 12A8                       u3190 12FC                       u2900 1BD8  
                     u4405 1912                       u5207 07D0                       u5217 1AD0  
                     u5137 00DA                       u5227 1B04                       u5147 0128  
                     _PEIE 007F96                       u5237 19FC                       u5157 01BC  
                     u5247 1A04                       u5167 021E                       u5257 1A24  
                     u5177 0274                       u5267 1A2C                       u5187 02C8  
                     u4740 0200                       _RCEN 007E2B                       u5197 04EA  
                     u4840 02AA                       u4808 025A                       u4790 0256  
                     u4758 0204                       u4871 02E6                       u4960 0432  
                     u4970 0434                       u4858 02AE                       _TMR0 000FD6  
                     _TMR1 000FCE                       _main 0012                       _keys FE47  
                     _numC 0097                       _time 0080                       fsr0h 000FEA  
                     fsr1h 000FE2         i2___lwdiv@quotient 0005                       fsr2h 000FDA  
                     fsr0l 000FE9                       indf2 000FDF                       fsr1l 000FE1  
                     fsr2l 000FD9                       btemp 004C                       prodh 000FF4  
                     prodl 000FF3                       start 000E              __CFG_IESO$OFF 000000  
          __end_ofi2_putch 1C8C              __CFG_MCLRE$ON 000000               ___param_bank 000000  
              i2_lcdNibble 1A32                      ??_ISR 0024           ?_I2C_Master_Init 00A1  
         ?_I2C_Master_Read 0001           ?_I2C_Master_Wait 0001           ?_I2C_Master_Stop 0001  
                    ?_main 0001                      _ACKEN 007E2C                      _ACKDT 007E2D  
          __end_of___awdiv 16FE                      _ADRES 000FC3                      STR_10 FEDC  
                    STR_11 FF11                      STR_12 FEDC                      STR_20 FE9A  
                    STR_21 FFAA                      STR_13 FF33                      STR_22 FF00  
                    STR_14 FEC7                      STR_23 FF99                      STR_15 FF22  
                    STR_16 FEC7                      STR_24 FEB1                      STR_17 FF77  
                    STR_25 FEEF                      STR_18 FEC7                      STR_19 FE83  
          __end_of___awmod 1874            __end_of___lldiv 1804                      _T0CON 000FD5  
          ___awdiv@divisor 0036                      _T1CON 000FCD            __end_of___lwdiv 1992  
          __end_of___lwmod 1B52                      i2l423 0B9A                      i2l370 08EE  
                    i2l455 1052                      i2l900 19DA                      i2l910 1B8A  
          ___awdiv@counter 0038                      _PORTB 000F81                      _TRISA 000F92  
                    _TRISB 000F93                      _TRISC 000F94                      _TRISD 000F95  
                    _TRISE 000F96              _turn1BackLeft 009C              __CFG_PWRT$OFF 000000  
            __CFG_WRT0$OFF 000000              __CFG_WRT1$OFF 000000              __CFG_WRT2$OFF 000000  
            __CFG_WRT3$OFF 000000            __end_of_lcdInst 1C80             __CFG_EBTR0$OFF 000000  
           __CFG_FCMEN$OFF 000000             __CFG_EBTR1$OFF 000000              _turn2BackLeft 009E  
           __CFG_EBTR2$OFF 000000             __CFG_EBTR3$OFF 000000     __size_of_stopOperation 00F4  
            __CFG_WRTB$OFF 000000              __CFG_WRTC$OFF 000000              __CFG_WRTD$OFF 000000  
          __end_of_readADC 1C56            __end_of_initLCD 1B10             __CFG_EBTRB$OFF 000000  
               i2isdigit@c 0003            __end_of_dpowers FE62                      _numAA 0095  
                    _num9V 0094            __end_of_isdigit 1C24                      _step1 0049  
                    _step2 004A                      _putch 1C68                      main@i 00B9  
                    pclath 000FFA                      tablat 000FF5           __end_ofi2___wmul 1C06  
                    status 000FD8         __size_ofi2___awdiv 0084         __size_ofi2___awmod 0070  
           __CFG_PBADEN$ON 000000              i2printf@width 001E           __end_ofi2_printf 1272  
       __size_ofi2___lwdiv 0052         __size_ofi2___lwmod 0042            __initialization 1A80  
       __size_ofi2_lcdInst 000C               __end_of_main 07F0               __end_of_keys FE58  
               i2printf@ap 0018         __size_ofi2_isdigit 001E                     ??_main 00B3  
            __activetblptr 000002          ?_I2C_Master_Start 0001          ?_I2C_Master_Write 0035  
       ??_I2C_Master_Start 0035                     _ADCON0 000FC2                     _ADCON1 000FC1  
       ??_I2C_Master_Write 0037                     _ADCON2 000FC0           ___awdiv@dividend 0034  
          i2lcdNibble@data 0002                     ?_putch 0001            i2lcdNibble@temp 0001  
                   _INT1IE 007F83                     _INT1IF 007F80                     i2l3001 0F70  
                   i2l3011 0F94                     i2l3101 117C                     i2l3005 0F80  
                   i2l3103 1184                     i2l3111 11AA                     i2l3007 0F8E  
                   i2l3113 11B0                     i2l3121 123A                     i2l3041 1080  
                   i2l3025 1020                     i2l3017 0FC2                     i2l3115 11F4  
                   i2l3123 124A                     i2l3107 1198                     i2l4011 0AA8  
                   i2l4003 0A92                     i2l3125 1250                     i2l3061 10CE  
                   i2l3045 109A                     i2l3029 1024                     i2l4021 0AD0  
                   i2l3047 109E                     i2l3127 1258                     i2l4007 0A9E  
                   i2l4023 0AD2                     i2l4041 0B0C                     i2l4033 0AF4  
                   i2l4017 0AC4                     i2l3083 1124                     i2l3059 10CA  
                   i2l3075 10FA                     i2l4051 0B34                     i2l3077 110A  
                   i2l2701 1894                     i2l4037 0B00                     i2l4029 0AE8  
                   i2l4053 0B36                     i2l3095 1166                     i2l3087 1148  
                   i2l4071 0B70                     i2l4063 0B5A                     i2l4047 0B28  
                   i2l3089 1150                     i2l2721 18DA                     i2l2713 18C2  
                   i2l2705 18A2                     i2l4081 0B98                     i2l2707 18AA  
                   i2l4067 0B66                     i2l4059 0B4E                     i2l2733 1C3A  
                   i2l2653 1712                     i2l2709 18AE                     i2l2717 18CC  
                   i2l3525 1674                     i2l3517 1654                     i2l3509 1632  
                   i2l4077 0B8C                     i2l2743 19A8                     i2l3519 165A  
                   i2l2745 19B0                     i2l2665 1738                     i2l2681 176A  
                   i2l2755 19D0                     i2l2747 19B4                     i2l2771 1B80  
                   i2l2763 1B60                     i2l2667 1740                     i2l2659 1722  
                   i2l2765 1B68                     i2l2685 1778                     i2l2677 1760  
                   i2l2669 1744                     i2l2767 1B6C                     i2l3495 1602  
                   i2l2697 1888                     i2l3499 1612                     i2l3907 0904  
                   i2l3915 091A                     i2l3909 0908                     i2l3917 091E  
                   i2l3863 0858                     i2l3937 097E                     i2l3963 0A0A  
                   i2l3891 08D8                     i2l3981 0A44                     i2l3973 0A2C  
                   i2l3949 09C4                     i2l3885 08C8                     i2l3991 0A6C  
                   i2l3895 08E0                     i2l3977 0A38                     i2l3969 0A20  
                   i2l3993 0A6E                     i2l3987 0A60                     i2l3999 0A86  
                   _TMR0IE 007F95                     _TMR0IF 007F92                  ??i2_putch 0003  
                   _TMR1IE 007CE8                     _TMR1IF 007CF0                     _SSPADD 000FC8  
                   _TRISC3 007CA3                     _TRISC4 007CA4                     _SSPBUF 000FC9  
           _turn1BackRight 009D             __CFG_XINST$OFF 000000              _stopOperation 13E0  
           _turn2BackRight 009F                     ___wmul 1B94                  ??___awdiv 0038  
           __CFG_STVREN$ON 000000                  ??___awmod 0038                  ??___lldiv 003C  
                ??___lwdiv 0038                  ??___lwmod 003F                     _countC 0091  
                   clear_0 1AAA                     clear_1 1AB6           ___awdiv@quotient 003A  
          ___awmod@divisor 0036            ___awmod@counter 0038                  ??_lcdInst 0036  
                   _printf 0BD6             i2___awdiv@sign 0006                  ??_readADC 0034  
                ??_initLCD 0037   __size_ofi2_stopOperation 00F4               __pdataCOMRAM 004B  
                ??_isdigit 0034          __end_ofi2___awdiv 1782          __end_ofi2___awmod 18E4  
        __end_ofi2___lwdiv 19E4               __mediumconst FE46          __end_ofi2___lwmod 1B94  
                   tblptrh 000FF7                     tblptrl 000FF6                     tblptru 000FF8  
          switchMenu@right 0021             i2___awmod@sign 0006          __end_ofi2_lcdInst 1C98  
        __end_ofi2_isdigit 1C42                 __accesstop 0080    __end_of__initialization 1ABC  
            ___rparam_used 000001             ?_stopOperation 0001         i2___lwmod@dividend 0008  
           __pcstackCOMRAM 0001               __pidataBANK0 1CB3              __end_of_putch 1C74  
              i2printf@idx 0017                i2printf@val 001B                  ?i2___wmul 0001  
       __size_of_lcdNibble 004E                i2putch@data 0003                ISR@keypress 0033  
                ?i2_printf 000D                    ??_putch 0036                 __pbssBANK0 0080  
    __end_of_testBatteries 13E0               ?i2_lcdNibble 0001                    ?___wmul 0034  
                  ?_printf 00A1                 ??i2___wmul 0005                 ??i2_printf 0013  
                  _SSPCON1 000FC6                    _SSPCON2 000FC5          ??i2_stopOperation 0009  
                  _SSPSTAT 000FC7                    i2_putch 1C80                 _countDrain 0092  
          ??_stopOperation 003C          __end_of_lcdNibble 1A32                    __Hparam 0000  
                  __Lparam 0000                    ___awdiv 167A                    ___awmod 1804  
                  ___lldiv 1782            __size_of___wmul 0026                    ___lwdiv 1940  
                  ___lwmod 1B10                    __pcinit 1A80                 _plat1Right 0089  
                  __ramtop 1000                 _plat2Right 008D                    _lcdInst 1C74  
                  __ptext0 0012                    __ptext1 1272                    __ptext2 13E0  
                  __ptext3 1804                    __ptext4 167A                    __ptext5 1C42  
                  __ptext6 0BD6                    __ptext7 1C68                    __ptext8 1C06  
                  __ptext9 1B94            __size_of_printf 0390                  _T0CONbits 000FD5  
                  _countAA 0090                    _count9V 008F                    _readADC 1C42  
                  _initLCD 1ACA               __size_of_ISR 0BCE          __end_of_hexpowers FE6A  
                _T1CONbits 000FCD              i2_isdigit$935 0002                    _dpowers FE58  
                  _isdigit 1C06                    _opTimer 0047           ___awmod@dividend 0034  
                  _numBats 0096   __size_of_I2C_Master_Init 005C   __size_of_I2C_Master_Read 0026  
 __size_of_I2C_Master_Wait 0012   __size_of_I2C_Master_Stop 0008                    _sorting 0048  
           __pintcode_body 07F0       end_of_initialization 1ABC              __Lmediumconst FE46  
                  int_func 07F0        i2___wmul@multiplier 0001                 _screenMode 00BE  
__size_of_I2C_Master_Start 0008  __size_of_I2C_Master_Write 000A            ___lldiv@divisor 0038  
          ___lldiv@counter 0040                    printf@c 00B2                    printf@f 00A1  
         I2C_Master_Init@c 00A1           I2C_Master_Read@a 0035                    postdec2 000FDD  
               _solOnTimer 004B                    postinc0 000FEE                    postinc2 000FDE  
               _stepAmount 0044                  i2___awdiv 16FE                  i2___awmod 1874  
        i2___lwdiv@divisor 0003                  i2___lwdiv 1992                  i2___lwmod 1B52  
        i2___lwdiv@counter 0007                  i2_lcdInst 1C8C                printf@width 00B0  
       i2___awdiv@dividend 0001                  i2_isdigit 1C24                 _switchMenu 15C8  
           __end_of___wmul 1BBA       __size_ofi2_lcdNibble 004E              __pidataCOMRAM 1CB2  
            i2lcdInst@data 0003           i2___wmul@product 0005             __end_of_printf 0F66  
             i2printf@flag 001D               i2printf@prec 001A        start_initialization 1A80  
       i2___awdiv@quotient 0007                __end_of_ISR 0BD6          __size_ofi2___wmul 0026  
                i2printf@c 0020                  i2printf@f 000D                 ?i2___awdiv 0001  
               ?i2___awmod 0001                 ?i2___lwdiv 0001                 ?i2___lwmod 0008  
        __size_ofi2_printf 030C          ??_I2C_Master_Init 00A5          ??_I2C_Master_Read 0035  
        ??_I2C_Master_Wait 0034                 ?i2_lcdInst 0001          ??_I2C_Master_Stop 0035  
               ?i2_isdigit 0001                   ??___wmul 0038                __pdataBANK0 00BE  
         __CFG_LPT1OSC$OFF 000000             switchMenu@left 0023            i2_stopOperation 14D4  
                 ??_printf 0040                __pbssCOMRAM 0044              __pcstackBANK0 00A1  
        i2___lwmod@divisor 000A          i2___lwmod@counter 000C                   ?i2_putch 0001  
         _I2C_Master_Start 1CAA           _I2C_Master_Write 1C98           ___lwdiv@dividend 0034  
        __CFG_CCP2MX$PORTC 000000                ?_switchMenu 0021                  __pintcode 0008  
            __pmediumconst FE46                  _lcdNibble 19E4                   ?___awdiv 0034  
                 ?___awmod 0034                   ?___lldiv 0034                   ?___lwdiv 0034  
                 ?___lwmod 003B                  _doneTimer 0046                   ?_lcdInst 0001  
                 ?_readADC 0001                   ?_initLCD 0001     __size_of_testBatteries 016E  
                 ?_isdigit 0001                  _hexpowers FE62           ___lwdiv@quotient 0038  
              ??i2___awdiv 0005                ??i2___awmod 0005                  _plat1Left 0087  
                _plat2Left 008B                ??i2___lwdiv 0005                ??i2___lwmod 000C  
           __size_of_putch 000C                ??i2_lcdInst 0003             ___wmul@product 0038  
                 _LATAbits 000F89                   _LATBbits 000F8A                   _LATCbits 000F8B  
                 _LATDbits 000F8C                   _LATEbits 000F8D                ??i2_isdigit 0001  
    __end_of_stopOperation 14D4                   i2u401_40 0950                   i2u411_40 09F8  
                 i2u410_48 09DE                   i2u402_48 0952                   i2u405_40 0996  
                 i2u407_40 09B2                   i2u406_48 0998                   i2u409_40 09DC  
                 i2u530_47 1A7A                   i2u527_47 1A4A                   i2u528_47 1A52  
                 i2u529_47 1A72                   i2u395_40 0900                  _waitPlats 00A0  
  __end_ofi2_stopOperation 15C8           __CFG_WDTPS$32768 000000                 ?_lcdNibble 0001  
                _startGear 009A                 _ADCON0bits 000FC2                  main@i_633 00BD  
                main@i_580 00BA                  main@i_590 00B7                  main@i_591 00BB  
                main@i_592 00BC          ___wmul@multiplier 0034                   i2___wmul 1BE0  
            lcdNibble@data 0035                 printf@flag 00AF              lcdNibble@temp 0034  
               printf@prec 00AC          i2___awdiv@divisor 0003          i2___awdiv@counter 0005  
                 i2_printf 0F66        __size_of_switchMenu 00B2        I2C_Master_Read@temp 0036  
       i2___awmod@dividend 0001           __size_ofi2_putch 000C              _testBatteries 1272  
                 __Hrparam 0000                   __Lrparam 0000         __CFG_BOREN$SBORDIS 000000  
            switchMenu@key 0022           __size_of___awdiv 0084           __size_of___awmod 0070  
    i2___wmul@multiplicand 0003           __size_of___lldiv 0082           __size_of___lwdiv 0052  
         __size_of___lwmod 0042             readADC@channel 0034                _isdigit$935 0035  
         __size_of_lcdInst 000C            _I2C_Master_Init 18E4           __size_of_readADC 0014  
          _I2C_Master_Read 1BBA           __size_of_initLCD 0046            _I2C_Master_Wait 1C56  
          _I2C_Master_Stop 1CA2           __size_of_isdigit 001E            ___lwdiv@divisor 0036  
          ___lwdiv@counter 003A                   __ptext10 1B10                   __ptext11 1940  
                 __ptext20 18E4                   __ptext12 1ACA                   __ptext21 1782  
                 __ptext13 1C74                   __ptext30 1BE0                   __ptext14 19E4  
                 __ptext31 1B52                   __ptext23 15C8                   __ptext15 1C98  
                 __ptext32 1992                   __ptext24 14D4                   __ptext16 1CA2  
                 __ptext33 1C8C                   __ptext25 1874                   __ptext17 1CAA  
                 __ptext34 1A32                   __ptext26 16FE                   __ptext18 1BBA  
                 __ptext27 0F66                   __ptext19 1C56                   __ptext28 1C80  
                 __ptext29 1C24              __size_of_main 07DE             ?_testBatteries 0001  
                 _numDrain 0098           ?i2_stopOperation 0001              ??i2_lcdNibble 0001  
              ??_lcdNibble 0034                   int$flags 004C                   _stepGear 009B  
                printf@idx 00A9                  printf@val 00AD          i2___awmod@divisor 0003  
                putch@data 0036          i2___awmod@counter 0005   __end_of_I2C_Master_Start 1CB2  
 __end_of_I2C_Master_Write 1CA2                 _INTCONbits 000FF2                   isdigit@c 0036  
                 intlevel2 0000           ___lwmod@dividend 003B           ___lldiv@dividend 0034  
             ??_switchMenu 0023                   printf@ap 00AA    __end_of_I2C_Master_Init 1940  
  __end_of_I2C_Master_Read 1BE0    __end_of_I2C_Master_Wait 1C68    __end_of_I2C_Master_Stop 1CAA  
              lcdInst@data 0036        __end_ofi2_lcdNibble 1A80           ___lldiv@quotient 003C  
        I2C_Master_Write@d 0035            ___lwmod@divisor 003D            ___lwmod@counter 003F  
       __end_of_switchMenu 167A            ??_testBatteries 0034  
