

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sat Feb 04 18:23:49 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    29                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    32                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    33                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    34  0000                     
    35                           ; Version 1.40
    36                           ; Generated 01/12/2016 GMT
    37                           ; 
    38                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    39                           ; All rights reserved.
    40                           ; 
    41                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    42                           ; 
    43                           ; Redistribution and use in source and binary forms, with or without modification, are
    44                           ; permitted provided that the following conditions are met:
    45                           ; 
    46                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    47                           ;        conditions and the following disclaimer.
    48                           ; 
    49                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    50                           ;        of conditions and the following disclaimer in the documentation and/or other
    51                           ;        materials provided with the distribution.
    52                           ; 
    53                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    54                           ;        software without specific prior written permission.
    55                           ; 
    56                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    57                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    58                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    59                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    60                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    61                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    62                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    63                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    64                           ; 
    65                           ; 
    66                           ; Code-generator required, PIC18F4620 Definitions
    67                           ; 
    68                           ; SFR Addresses
    69  0000                     
    70                           	psect	idataCOMRAM
    71  000A66                     __pidataCOMRAM:
    72                           	opt stack 0
    73                           
    74                           ;initializer for _screenMode
    75  000A66  02                 	db	2
    76                           
    77                           	psect	mediumconst
    78  00FE7A                     __pmediumconst:
    79                           	opt stack 0
    80  00FE7A  00                 	db	0
    81  00FE7B                     _keys:
    82                           	opt stack 0
    83  00FE7B  31                 	db	49
    84  00FE7C  32                 	db	50
    85  00FE7D  33                 	db	51
    86  00FE7E  41                 	db	65
    87  00FE7F  34                 	db	52
    88  00FE80  35                 	db	53
    89  00FE81  36                 	db	54
    90  00FE82  42                 	db	66
    91  00FE83  37                 	db	55
    92  00FE84  38                 	db	56
    93  00FE85  39                 	db	57
    94  00FE86  43                 	db	67
    95  00FE87  2A                 	db	42
    96  00FE88  30                 	db	48
    97  00FE89  23                 	db	35
    98  00FE8A  44                 	db	68
    99  00FE8B  00                 	db	0
   100  00FE8C                     __end_of_keys:
   101                           	opt stack 0
   102  00FE8C                     _dpowers:
   103                           	opt stack 0
   104  00FE8C  0001               	dw	1
   105  00FE8E  000A               	dw	10
   106  00FE90  0064               	dw	100
   107  00FE92  03E8               	dw	1000
   108  00FE94  2710               	dw	10000
   109  00FE96                     __end_of_dpowers:
   110                           	opt stack 0
   111  00FE96                     _hexpowers:
   112                           	opt stack 0
   113  00FE96  0001               	dw	1
   114  00FE98  0010               	dw	16
   115  00FE9A  0100               	dw	256
   116  00FE9C  1000               	dw	4096
   117  00FE9E                     __end_of_hexpowers:
   118                           	opt stack 0
   119  0000                     _TMR0	set	4054
   120  0000                     _ADCON0	set	4034
   121  0000                     _ADCON1	set	4033
   122  0000                     _INTCONbits	set	4082
   123  0000                     _LATB	set	3978
   124  0000                     _LATC	set	3979
   125  0000                     _LATD	set	3980
   126  0000                     _LATDbits	set	3980
   127  0000                     _PORTB	set	3969
   128  0000                     _SSPADD	set	4040
   129  0000                     _SSPBUF	set	4041
   130  0000                     _SSPCON1	set	4038
   131  0000                     _SSPCON2	set	4037
   132  0000                     _SSPSTAT	set	4039
   133  0000                     _T0CON	set	4053
   134  0000                     _T0CONbits	set	4053
   135  0000                     _TRISB	set	3987
   136  0000                     _TRISC	set	3988
   137  0000                     _TRISD	set	3989
   138  0000                     _ACKDT	set	32301
   139  0000                     _ACKEN	set	32300
   140  0000                     _INT1IE	set	32643
   141  0000                     _INT1IF	set	32640
   142  0000                     _PEN	set	32298
   143  0000                     _RCEN	set	32299
   144  0000                     _RSEN	set	32297
   145  0000                     _SEN	set	32296
   146  0000                     _TMR0IE	set	32661
   147  0000                     _TMR0IF	set	32658
   148  0000                     _TRISC3	set	31907
   149  0000                     _TRISC4	set	31908
   150  00FE9E                     STR_9:
   151  00FE9E  25                 	db	37
   152  00FE9F  30                 	db	48	;'0'
   153  00FEA0  32                 	db	50	;'2'
   154  00FEA1  78                 	db	120	;'x'
   155  00FEA2  3A                 	db	58	;':'
   156  00FEA3  25                 	db	37
   157  00FEA4  30                 	db	48	;'0'
   158  00FEA5  32                 	db	50	;'2'
   159  00FEA6  78                 	db	120	;'x'
   160  00FEA7  20                 	db	32
   161  00FEA8  20                 	db	32
   162  00FEA9  20                 	db	32
   163  00FEAA  20                 	db	32
   164  00FEAB  20                 	db	32
   165  00FEAC  20                 	db	32
   166  00FEAD  20                 	db	32
   167  00FEAE  20                 	db	32
   168  00FEAF  20                 	db	32
   169  00FEB0  20                 	db	32
   170  00FEB1  20                 	db	32
   171  00FEB2  20                 	db	32
   172  00FEB3  20                 	db	32
   173  00FEB4  20                 	db	32
   174  00FEB5  20                 	db	32
   175  00FEB6  00                 	db	0
   176  00FEB7                     STR_18:
   177  00FEB7  44                 	db	68	;'D'
   178  00FEB8  41                 	db	65	;'A'
   179  00FEB9  54                 	db	84	;'T'
   180  00FEBA  45                 	db	69	;'E'
   181  00FEBB  3A                 	db	58	;':'
   182  00FEBC  20                 	db	32
   183  00FEBD  25                 	db	37
   184  00FEBE  30                 	db	48	;'0'
   185  00FEBF  32                 	db	50	;'2'
   186  00FEC0  78                 	db	120	;'x'
   187  00FEC1  2F                 	db	47
   188  00FEC2  25                 	db	37
   189  00FEC3  30                 	db	48	;'0'
   190  00FEC4  32                 	db	50	;'2'
   191  00FEC5  78                 	db	120	;'x'
   192  00FEC6  2F                 	db	47
   193  00FEC7  25                 	db	37
   194  00FEC8  30                 	db	48	;'0'
   195  00FEC9  32                 	db	50	;'2'
   196  00FECA  78                 	db	120	;'x'
   197  00FECB  20                 	db	32
   198  00FECC  20                 	db	32
   199  00FECD  00                 	db	0
   200  00FECE                     STR_19:
   201  00FECE  54                 	db	84	;'T'
   202  00FECF  49                 	db	73	;'I'
   203  00FED0  4D                 	db	77	;'M'
   204  00FED1  45                 	db	69	;'E'
   205  00FED2  3A                 	db	58	;':'
   206  00FED3  20                 	db	32
   207  00FED4  25                 	db	37
   208  00FED5  30                 	db	48	;'0'
   209  00FED6  32                 	db	50	;'2'
   210  00FED7  78                 	db	120	;'x'
   211  00FED8  3A                 	db	58	;':'
   212  00FED9  25                 	db	37
   213  00FEDA  30                 	db	48	;'0'
   214  00FEDB  32                 	db	50	;'2'
   215  00FEDC  78                 	db	120	;'x'
   216  00FEDD  3A                 	db	58	;':'
   217  00FEDE  25                 	db	37
   218  00FEDF  30                 	db	48	;'0'
   219  00FEE0  32                 	db	50	;'2'
   220  00FEE1  78                 	db	120	;'x'
   221  00FEE2  20                 	db	32
   222  00FEE3  20                 	db	32
   223  00FEE4  00                 	db	0
   224  00FEE5                     STR_15:
   225  00FEE5  42                 	db	66	;'B'
   226  00FEE6  41                 	db	65	;'A'
   227  00FEE7  54                 	db	84	;'T'
   228  00FEE8  54                 	db	84	;'T'
   229  00FEE9  45                 	db	69	;'E'
   230  00FEEA  52                 	db	82	;'R'
   231  00FEEB  49                 	db	73	;'I'
   232  00FEEC  45                 	db	69	;'E'
   233  00FEED  53                 	db	83	;'S'
   234  00FEEE  3A                 	db	58	;':'
   235  00FEEF  20                 	db	32
   236  00FEF0  25                 	db	37
   237  00FEF1  30                 	db	48	;'0'
   238  00FEF2  32                 	db	50	;'2'
   239  00FEF3  64                 	db	100	;'d'
   240  00FEF4  20                 	db	32
   241  00FEF5  20                 	db	32
   242  00FEF6  20                 	db	32
   243  00FEF7  20                 	db	32
   244  00FEF8  20                 	db	32
   245  00FEF9  00                 	db	0
   246  00FEFA                     STR_17:
   247  00FEFA  42                 	db	66	;'B'
   248  00FEFB  41                 	db	65	;'A'
   249  00FEFC  54                 	db	84	;'T'
   250  00FEFD  54                 	db	84	;'T'
   251  00FEFE  45                 	db	69	;'E'
   252  00FEFF  52                 	db	82	;'R'
   253  00FF00  49                 	db	73	;'I'
   254  00FF01  45                 	db	69	;'E'
   255  00FF02  53                 	db	83	;'S'
   256  00FF03  3A                 	db	58	;':'
   257  00FF04  20                 	db	32
   258  00FF05  25                 	db	37
   259  00FF06  30                 	db	48	;'0'
   260  00FF07  32                 	db	50	;'2'
   261  00FF08  78                 	db	120	;'x'
   262  00FF09  20                 	db	32
   263  00FF0A  20                 	db	32
   264  00FF0B  20                 	db	32
   265  00FF0C  20                 	db	32
   266  00FF0D  20                 	db	32
   267  00FF0E  00                 	db	0
   268  00FF0F                     STR_11:
   269  00FF0F  42                 	db	66	;'B'
   270  00FF10  41                 	db	65	;'A'
   271  00FF11  54                 	db	84	;'T'
   272  00FF12  54                 	db	84	;'T'
   273  00FF13  45                 	db	69	;'E'
   274  00FF14  52                 	db	82	;'R'
   275  00FF15  49                 	db	73	;'I'
   276  00FF16  45                 	db	69	;'E'
   277  00FF17  53                 	db	83	;'S'
   278  00FF18  3A                 	db	58	;':'
   279  00FF19  20                 	db	32
   280  00FF1A  25                 	db	37
   281  00FF1B  30                 	db	48	;'0'
   282  00FF1C  32                 	db	50	;'2'
   283  00FF1D  64                 	db	100	;'d'
   284  00FF1E  20                 	db	32
   285  00FF1F  20                 	db	32
   286  00FF20  20                 	db	32
   287  00FF21  00                 	db	0
   288  00FF22                     STR_20:
   289  00FF22  30                 	db	48	;'0'
   290  00FF23  31                 	db	49	;'1'
   291  00FF24  32                 	db	50	;'2'
   292  00FF25  33                 	db	51	;'3'
   293  00FF26  34                 	db	52	;'4'
   294  00FF27  35                 	db	53	;'5'
   295  00FF28  36                 	db	54	;'6'
   296  00FF29  37                 	db	55	;'7'
   297  00FF2A  38                 	db	56	;'8'
   298  00FF2B  39                 	db	57	;'9'
   299  00FF2C  61                 	db	97	;'a'
   300  00FF2D  62                 	db	98	;'b'
   301  00FF2E  63                 	db	99	;'c'
   302  00FF2F  64                 	db	100	;'d'
   303  00FF30  65                 	db	101	;'e'
   304  00FF31  66                 	db	102	;'f'
   305  00FF32  00                 	db	0
   306  00FF33                     STR_5:
   307  00FF33  20                 	db	32
   308  00FF34  20                 	db	32
   309  00FF35  20                 	db	32
   310  00FF36  20                 	db	32
   311  00FF37  20                 	db	32
   312  00FF38  20                 	db	32
   313  00FF39  20                 	db	32
   314  00FF3A  20                 	db	32
   315  00FF3B  20                 	db	32
   316  00FF3C  20                 	db	32
   317  00FF3D  20                 	db	32
   318  00FF3E  20                 	db	32
   319  00FF3F  20                 	db	32
   320  00FF40  20                 	db	32
   321  00FF41  20                 	db	32
   322  00FF42  20                 	db	32
   323  00FF43  00                 	db	0
   324  00FF44                     STR_4:
   325  00FF44  52                 	db	82	;'R'
   326  00FF45  55                 	db	85	;'U'
   327  00FF46  4E                 	db	78	;'N'
   328  00FF47  4E                 	db	78	;'N'
   329  00FF48  49                 	db	73	;'I'
   330  00FF49  4E                 	db	78	;'N'
   331  00FF4A  47                 	db	71	;'G'
   332  00FF4B  2E                 	db	46
   333  00FF4C  2E                 	db	46
   334  00FF4D  2E                 	db	46
   335  00FF4E  20                 	db	32
   336  00FF4F  20                 	db	32
   337  00FF50  20                 	db	32
   338  00FF51  20                 	db	32
   339  00FF52  20                 	db	32
   340  00FF53  20                 	db	32
   341  00FF54  00                 	db	0
   342  00FF55                     STR_12:
   343  00FF55  4E                 	db	78	;'N'
   344  00FF56  55                 	db	85	;'U'
   345  00FF57  4D                 	db	77	;'M'
   346  00FF58  42                 	db	66	;'B'
   347  00FF59  45                 	db	69	;'E'
   348  00FF5A  52                 	db	82	;'R'
   349  00FF5B  20                 	db	32
   350  00FF5C  4F                 	db	79	;'O'
   351  00FF5D  46                 	db	70	;'F'
   352  00FF5E  20                 	db	32
   353  00FF5F  43                 	db	67	;'C'
   354  00FF60  20                 	db	32
   355  00FF61  20                 	db	32
   356  00FF62  20                 	db	32
   357  00FF63  20                 	db	32
   358  00FF64  20                 	db	32
   359  00FF65  00                 	db	0
   360  00FF66                     STR_7:
   361  00FF66  54                 	db	84	;'T'
   362  00FF67  4F                 	db	79	;'O'
   363  00FF68  20                 	db	32
   364  00FF69  43                 	db	67	;'C'
   365  00FF6A  4F                 	db	79	;'O'
   366  00FF6B  4E                 	db	78	;'N'
   367  00FF6C  54                 	db	84	;'T'
   368  00FF6D  49                 	db	73	;'I'
   369  00FF6E  4E                 	db	78	;'N'
   370  00FF6F  55                 	db	85	;'U'
   371  00FF70  45                 	db	69	;'E'
   372  00FF71  20                 	db	32
   373  00FF72  20                 	db	32
   374  00FF73  20                 	db	32
   375  00FF74  20                 	db	32
   376  00FF75  20                 	db	32
   377  00FF76  00                 	db	0
   378  00FF77                     STR_16:
   379  00FF77  4E                 	db	78	;'N'
   380  00FF78  55                 	db	85	;'U'
   381  00FF79  4D                 	db	77	;'M'
   382  00FF7A  42                 	db	66	;'B'
   383  00FF7B  45                 	db	69	;'E'
   384  00FF7C  52                 	db	82	;'R'
   385  00FF7D  20                 	db	32
   386  00FF7E  4F                 	db	79	;'O'
   387  00FF7F  46                 	db	70	;'F'
   388  00FF80  20                 	db	32
   389  00FF81  41                 	db	65	;'A'
   390  00FF82  41                 	db	65	;'A'
   391  00FF83  20                 	db	32
   392  00FF84  20                 	db	32
   393  00FF85  20                 	db	32
   394  00FF86  20                 	db	32
   395  00FF87  00                 	db	0
   396  00FF88                     STR_14:
   397  00FF88  4E                 	db	78	;'N'
   398  00FF89  55                 	db	85	;'U'
   399  00FF8A  4D                 	db	77	;'M'
   400  00FF8B  42                 	db	66	;'B'
   401  00FF8C  45                 	db	69	;'E'
   402  00FF8D  52                 	db	82	;'R'
   403  00FF8E  20                 	db	32
   404  00FF8F  4F                 	db	79	;'O'
   405  00FF90  46                 	db	70	;'F'
   406  00FF91  20                 	db	32
   407  00FF92  39                 	db	57	;'9'
   408  00FF93  56                 	db	86	;'V'
   409  00FF94  20                 	db	32
   410  00FF95  20                 	db	32
   411  00FF96  20                 	db	32
   412  00FF97  20                 	db	32
   413  00FF98  00                 	db	0
   414  00FF99                     STR_6:
   415  00FF99  44                 	db	68	;'D'
   416  00FF9A  4F                 	db	79	;'O'
   417  00FF9B  4E                 	db	78	;'N'
   418  00FF9C  45                 	db	69	;'E'
   419  00FF9D  21                 	db	33
   420  00FF9E  20                 	db	32
   421  00FF9F  50                 	db	80	;'P'
   422  00FFA0  52                 	db	82	;'R'
   423  00FFA1  45                 	db	69	;'E'
   424  00FFA2  53                 	db	83	;'S'
   425  00FFA3  53                 	db	83	;'S'
   426  00FFA4  20                 	db	32
   427  00FFA5  2A                 	db	42
   428  00FFA6  20                 	db	32
   429  00FFA7  20                 	db	32
   430  00FFA8  20                 	db	32
   431  00FFA9  00                 	db	0
   432  00FFAA                     STR_8:
   433  00FFAA  54                 	db	84	;'T'
   434  00FFAB  4F                 	db	79	;'O'
   435  00FFAC  54                 	db	84	;'T'
   436  00FFAD  41                 	db	65	;'A'
   437  00FFAE  4C                 	db	76	;'L'
   438  00FFAF  20                 	db	32
   439  00FFB0  52                 	db	82	;'R'
   440  00FFB1  55                 	db	85	;'U'
   441  00FFB2  4E                 	db	78	;'N'
   442  00FFB3  20                 	db	32
   443  00FFB4  54                 	db	84	;'T'
   444  00FFB5  49                 	db	73	;'I'
   445  00FFB6  4D                 	db	77	;'M'
   446  00FFB7  45                 	db	69	;'E'
   447  00FFB8  3A                 	db	58	;':'
   448  00FFB9  20                 	db	32
   449  00FFBA  00                 	db	0
   450  00FFBB                     STR_3:
   451  00FFBB  20                 	db	32
   452  00FFBC  3C                 	db	60	;'<'
   453  00FFBD  34                 	db	52	;'4'
   454  00FFBE  20                 	db	32
   455  00FFBF  20                 	db	32
   456  00FFC0  20                 	db	32
   457  00FFC1  44                 	db	68	;'D'
   458  00FFC2  41                 	db	65	;'A'
   459  00FFC3  54                 	db	84	;'T'
   460  00FFC4  41                 	db	65	;'A'
   461  00FFC5  20                 	db	32
   462  00FFC6  20                 	db	32
   463  00FFC7  20                 	db	32
   464  00FFC8  36                 	db	54	;'6'
   465  00FFC9  3E                 	db	62	;'>'
   466  00FFCA  20                 	db	32
   467  00FFCB  00                 	db	0
   468  00FFCC                     STR_10:
   469  00FFCC  54                 	db	84	;'T'
   470  00FFCD  4F                 	db	79	;'O'
   471  00FFCE  54                 	db	84	;'T'
   472  00FFCF  41                 	db	65	;'A'
   473  00FFD0  4C                 	db	76	;'L'
   474  00FFD1  20                 	db	32
   475  00FFD2  4E                 	db	78	;'N'
   476  00FFD3  55                 	db	85	;'U'
   477  00FFD4  4D                 	db	77	;'M'
   478  00FFD5  42                 	db	66	;'B'
   479  00FFD6  45                 	db	69	;'E'
   480  00FFD7  52                 	db	82	;'R'
   481  00FFD8  20                 	db	32
   482  00FFD9  4F                 	db	79	;'O'
   483  00FFDA  46                 	db	70	;'F'
   484  00FFDB  20                 	db	32
   485  00FFDC  00                 	db	0
   486  00FFDD                     STR_1:
   487  00FFDD  53                 	db	83	;'S'
   488  00FFDE  54                 	db	84	;'T'
   489  00FFDF  41                 	db	65	;'A'
   490  00FFE0  52                 	db	82	;'R'
   491  00FFE1  54                 	db	84	;'T'
   492  00FFE2  3A                 	db	58	;':'
   493  00FFE3  20                 	db	32
   494  00FFE4  20                 	db	32
   495  00FFE5  20                 	db	32
   496  00FFE6  50                 	db	80	;'P'
   497  00FFE7  52                 	db	82	;'R'
   498  00FFE8  45                 	db	69	;'E'
   499  00FFE9  53                 	db	83	;'S'
   500  00FFEA  53                 	db	83	;'S'
   501  00FFEB  20                 	db	32
   502  00FFEC  2A                 	db	42
   503  00FFED  00                 	db	0
   504  00FFEE                     STR_2:
   505  00FFEE  3C                 	db	60	;'<'
   506  00FFEF  20                 	db	32
   507  00FFF0  34                 	db	52	;'4'
   508  00FFF1  20                 	db	32
   509  00FFF2  20                 	db	32
   510  00FFF3  20                 	db	32
   511  00FFF4  44                 	db	68	;'D'
   512  00FFF5  41                 	db	65	;'A'
   513  00FFF6  54                 	db	84	;'T'
   514  00FFF7  41                 	db	65	;'A'
   515  00FFF8  20                 	db	32
   516  00FFF9  20                 	db	32
   517  00FFFA  20                 	db	32
   518  00FFFB  36                 	db	54	;'6'
   519  00FFFC  20                 	db	32
   520  00FFFD  3E                 	db	62	;'>'
   521  00FFFE  00                 	db	0
   522  0000                     
   523                           ; #config settings
   524  00FFFF  00                 	db	0	; dummy byte at the end
   525  0000                     
   526                           	psect	cinit
   527  00098C                     __pcinit:
   528                           	opt stack 0
   529  00098C                     start_initialization:
   530                           	opt stack 0
   531  00098C                     __initialization:
   532                           	opt stack 0
   533                           
   534                           ; Initialize objects allocated to COMRAM (1 bytes)
   535                           ; load TBLPTR registers with __pidataCOMRAM
   536  00098C  0E66               	movlw	low __pidataCOMRAM
   537  00098E  6EF6               	movwf	tblptrl,c
   538  000990  0E0A               	movlw	high __pidataCOMRAM
   539  000992  6EF7               	movwf	tblptrh,c
   540  000994  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   541  000996  6EF8               	movwf	tblptru,c
   542  000998  0009               	tblrd		*+	;fetch initializer
   543  00099A  CFF5 F047          	movff	tablat,__pdataCOMRAM
   544                           
   545                           ; Clear objects allocated to COMRAM (9 bytes)
   546  00099E  EE00  F03E         	lfsr	0,__pbssCOMRAM
   547  0009A2  0E09               	movlw	9
   548  0009A4                     clear_0:
   549  0009A4  6AEE               	clrf	postinc0,c
   550  0009A6  06E8               	decf	wreg,f,c
   551  0009A8  E1FD               	bnz	clear_0
   552  0009AA                     end_of_initialization:
   553                           	opt stack 0
   554  0009AA                     __end_of__initialization:
   555                           	opt stack 0
   556  0009AA  9048               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   557  0009AC  9248               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   558  0009AE  0E00               	movlw	low (__Lmediumconst shr (0+16))
   559  0009B0  6EF8               	movwf	tblptru,c
   560  0009B2  0100               	movlb	0
   561  0009B4  EF09  F000         	goto	_main	;jump to C main() function
   562                           tblptru	equ	0xFF8
   563                           tblptrh	equ	0xFF7
   564                           tblptrl	equ	0xFF6
   565                           tablat	equ	0xFF5
   566                           postinc0	equ	0xFEE
   567                           wreg	equ	0xFE8
   568                           
   569                           	psect	bssCOMRAM
   570  00003E                     __pbssCOMRAM:
   571                           	opt stack 0
   572  00003E                     _time:
   573                           	opt stack 0
   574  00003E                     	ds	7
   575  000045                     _counter:
   576                           	opt stack 0
   577  000045                     	ds	2
   578                           tblptru	equ	0xFF8
   579                           tblptrh	equ	0xFF7
   580                           tblptrl	equ	0xFF6
   581                           tablat	equ	0xFF5
   582                           postinc0	equ	0xFEE
   583                           wreg	equ	0xFE8
   584                           
   585                           	psect	dataCOMRAM
   586  000047                     __pdataCOMRAM:
   587                           	opt stack 0
   588  000047                     _screenMode:
   589                           	opt stack 0
   590  000047                     	ds	1
   591                           tblptru	equ	0xFF8
   592                           tblptrh	equ	0xFF7
   593                           tblptrl	equ	0xFF6
   594                           tablat	equ	0xFF5
   595                           postinc0	equ	0xFEE
   596                           wreg	equ	0xFE8
   597                           
   598                           	psect	cstackCOMRAM
   599  000001                     __pcstackCOMRAM:
   600                           	opt stack 0
   601  000001                     switchMenu@right:
   602                           	opt stack 0
   603                           
   604                           ; 1 bytes @ 0x0
   605  000001                     	ds	1
   606  000002                     switchMenu@key:
   607                           	opt stack 0
   608                           
   609                           ; 1 bytes @ 0x1
   610  000002                     	ds	1
   611  000003                     switchMenu@left:
   612                           	opt stack 0
   613                           
   614                           ; 1 bytes @ 0x2
   615  000003                     	ds	1
   616  000004                     ??_isr:
   617                           
   618                           ; 1 bytes @ 0x3
   619  000004                     	ds	14
   620  000012                     isr@keypress:
   621                           	opt stack 0
   622                           
   623                           ; 1 bytes @ 0x11
   624  000012                     	ds	1
   625  000013                     ??_isdigit:
   626  000013                     ??_I2C_Master_Wait:
   627  000013                     ?___wmul:
   628                           	opt stack 0
   629  000013                     ?___lwdiv:
   630                           	opt stack 0
   631  000013                     ?___lldiv:
   632                           	opt stack 0
   633  000013                     lcdNibble@temp:
   634                           	opt stack 0
   635  000013                     ___wmul@multiplier:
   636                           	opt stack 0
   637  000013                     ___lwdiv@dividend:
   638                           	opt stack 0
   639  000013                     ___lldiv@dividend:
   640                           	opt stack 0
   641                           
   642                           ; 4 bytes @ 0x12
   643  000013                     	ds	1
   644  000014                     I2C_Master_Read@a:
   645                           	opt stack 0
   646  000014                     lcdNibble@data:
   647                           	opt stack 0
   648  000014                     _isdigit$539:
   649                           	opt stack 0
   650  000014                     I2C_Master_Write@d:
   651                           	opt stack 0
   652                           
   653                           ; 2 bytes @ 0x13
   654  000014                     	ds	1
   655  000015                     I2C_Master_Read@temp:
   656                           	opt stack 0
   657  000015                     lcdInst@data:
   658                           	opt stack 0
   659  000015                     putch@data:
   660                           	opt stack 0
   661  000015                     isdigit@c:
   662                           	opt stack 0
   663  000015                     ___wmul@multiplicand:
   664                           	opt stack 0
   665  000015                     ___lwdiv@divisor:
   666                           	opt stack 0
   667                           
   668                           ; 2 bytes @ 0x14
   669  000015                     	ds	1
   670  000016                     ??_initLCD:
   671                           
   672                           ; 1 bytes @ 0x15
   673  000016                     	ds	1
   674  000017                     ___wmul@product:
   675                           	opt stack 0
   676  000017                     ___lwdiv@quotient:
   677                           	opt stack 0
   678  000017                     ___lldiv@divisor:
   679                           	opt stack 0
   680                           
   681                           ; 4 bytes @ 0x16
   682  000017                     	ds	2
   683  000019                     ___lwdiv@counter:
   684                           	opt stack 0
   685                           
   686                           ; 1 bytes @ 0x18
   687  000019                     	ds	1
   688  00001A                     ?___lwmod:
   689                           	opt stack 0
   690  00001A                     ___lwmod@dividend:
   691                           	opt stack 0
   692                           
   693                           ; 2 bytes @ 0x19
   694  00001A                     	ds	1
   695  00001B                     ___lldiv@quotient:
   696                           	opt stack 0
   697                           
   698                           ; 4 bytes @ 0x1A
   699  00001B                     	ds	1
   700  00001C                     ___lwmod@divisor:
   701                           	opt stack 0
   702                           
   703                           ; 2 bytes @ 0x1B
   704  00001C                     	ds	2
   705  00001E                     ___lwmod@counter:
   706                           	opt stack 0
   707                           
   708                           ; 1 bytes @ 0x1D
   709  00001E                     	ds	1
   710  00001F                     ?_printf:
   711                           	opt stack 0
   712  00001F                     ___lldiv@counter:
   713                           	opt stack 0
   714  00001F                     printf@f:
   715                           	opt stack 0
   716                           
   717                           ; 2 bytes @ 0x1E
   718  00001F                     	ds	1
   719  000020                     I2C_Master_Init@c:
   720                           	opt stack 0
   721                           
   722                           ; 4 bytes @ 0x1F
   723  000020                     	ds	4
   724  000024                     ??_I2C_Master_Init:
   725                           
   726                           ; 1 bytes @ 0x23
   727  000024                     	ds	3
   728  000027                     ??_printf:
   729                           
   730                           ; 1 bytes @ 0x26
   731  000027                     	ds	4
   732  00002B                     printf@idx:
   733                           	opt stack 0
   734                           
   735                           ; 1 bytes @ 0x2A
   736  00002B                     	ds	1
   737  00002C                     printf@ap:
   738                           	opt stack 0
   739                           
   740                           ; 2 bytes @ 0x2B
   741  00002C                     	ds	2
   742  00002E                     printf@prec:
   743                           	opt stack 0
   744                           
   745                           ; 1 bytes @ 0x2D
   746  00002E                     	ds	1
   747  00002F                     printf@val:
   748                           	opt stack 0
   749                           
   750                           ; 2 bytes @ 0x2E
   751  00002F                     	ds	2
   752  000031                     printf@flag:
   753                           	opt stack 0
   754                           
   755                           ; 1 bytes @ 0x30
   756  000031                     	ds	1
   757  000032                     printf@width:
   758                           	opt stack 0
   759                           
   760                           ; 2 bytes @ 0x31
   761  000032                     	ds	2
   762  000034                     printf@c:
   763                           	opt stack 0
   764                           
   765                           ; 1 bytes @ 0x33
   766  000034                     	ds	1
   767  000035                     ??_main:
   768                           
   769                           ; 1 bytes @ 0x34
   770  000035                     	ds	1
   771  000036                     main@min:
   772                           	opt stack 0
   773                           
   774                           ; 1 bytes @ 0x35
   775  000036                     	ds	1
   776  000037                     main@sec:
   777                           	opt stack 0
   778                           
   779                           ; 1 bytes @ 0x36
   780  000037                     	ds	1
   781  000038                     main@numBats:
   782                           	opt stack 0
   783                           
   784                           ; 1 bytes @ 0x37
   785  000038                     	ds	1
   786  000039                     main@numC:
   787                           	opt stack 0
   788                           
   789                           ; 1 bytes @ 0x38
   790  000039                     	ds	1
   791  00003A                     main@num9V:
   792                           	opt stack 0
   793                           
   794                           ; 1 bytes @ 0x39
   795  00003A                     	ds	1
   796  00003B                     main@numAA:
   797                           	opt stack 0
   798                           
   799                           ; 1 bytes @ 0x3A
   800  00003B                     	ds	1
   801  00003C                     main@i_272:
   802                           	opt stack 0
   803                           
   804                           ; 1 bytes @ 0x3B
   805  00003C                     	ds	1
   806  00003D                     main@i:
   807                           	opt stack 0
   808                           
   809                           ; 1 bytes @ 0x3C
   810  00003D                     	ds	1
   811                           tblptru	equ	0xFF8
   812                           tblptrh	equ	0xFF7
   813                           tblptrl	equ	0xFF6
   814                           tablat	equ	0xFF5
   815                           postinc0	equ	0xFEE
   816                           wreg	equ	0xFE8
   817                           
   818 ;;
   819 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   820 ;;
   821 ;; *************** function _main *****************
   822 ;; Defined at:
   823 ;;		line 16 in file "../main.c"
   824 ;; Parameters:    Size  Location     Type
   825 ;;		None
   826 ;; Auto vars:     Size  Location     Type
   827 ;;  i               1   59[COMRAM] unsigned char 
   828 ;;  numAA           1   58[COMRAM] unsigned char 
   829 ;;  num9V           1   57[COMRAM] unsigned char 
   830 ;;  numC            1   56[COMRAM] unsigned char 
   831 ;;  numBats         1   55[COMRAM] unsigned char 
   832 ;;  sec             1   54[COMRAM] unsigned char 
   833 ;;  min             1   53[COMRAM] unsigned char 
   834 ;;  i               1   60[COMRAM] unsigned char 
   835 ;; Return value:  Size  Location     Type
   836 ;;                  1    wreg      void 
   837 ;; Registers used:
   838 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   839 ;; Tracked objects:
   840 ;;		On entry : 0/0
   841 ;;		On exit  : 0/0
   842 ;;		Unchanged: 0/0
   843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   844 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   845 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   846 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   847 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   848 ;;Total ram usage:        9 bytes
   849 ;; Hardware stack levels required when called:    5
   850 ;; This function calls:
   851 ;;		_I2C_Master_Init
   852 ;;		_I2C_Master_Read
   853 ;;		_I2C_Master_Start
   854 ;;		_I2C_Master_Stop
   855 ;;		_I2C_Master_Write
   856 ;;		_initLCD
   857 ;;		_lcdInst
   858 ;;		_printf
   859 ;; This function is called by:
   860 ;;		Startup code after reset
   861 ;; This function uses a non-reentrant model
   862 ;;
   863                           
   864                           	psect	text0
   865  000012                     __ptext0:
   866                           	opt stack 0
   867  000012                     _main:
   868                           	opt stack 26
   869                           
   870                           ;main.c: 17: TRISC = 0x00;
   871                           
   872                           ;incstack = 0
   873  000012  0E00               	movlw	0
   874  000014  6E94               	movwf	3988,c	;volatile
   875                           
   876                           ;main.c: 18: TRISD = 0x00;
   877  000016  0E00               	movlw	0
   878  000018  6E95               	movwf	3989,c	;volatile
   879                           
   880                           ;main.c: 19: TRISB = 0xFF;
   881  00001A  6893               	setf	3987,c	;volatile
   882                           
   883                           ;main.c: 20: LATB = 0x00;
   884  00001C  0E00               	movlw	0
   885  00001E  6E8A               	movwf	3978,c	;volatile
   886                           
   887                           ;main.c: 21: LATC = 0x00;
   888  000020  0E00               	movlw	0
   889  000022  6E8B               	movwf	3979,c	;volatile
   890                           
   891                           ;main.c: 22: ADCON0 = 0x00;
   892  000024  0E00               	movlw	0
   893  000026  6EC2               	movwf	4034,c	;volatile
   894                           
   895                           ;main.c: 23: ADCON1 = 0xFF;
   896  000028  68C1               	setf	4033,c	;volatile
   897                           
   898                           ;main.c: 25: INT1IE = 1;
   899  00002A  86F0               	bsf	intcon3,3,c	;volatile
   900                           
   901                           ;main.c: 26: TMR0IE = 1;
   902  00002C  8AF2               	bsf	intcon,5,c	;volatile
   903                           
   904                           ;main.c: 28: T0CON = 0b01000111;
   905  00002E  0E47               	movlw	71
   906  000030  6ED5               	movwf	4053,c	;volatile
   907                           
   908                           ;main.c: 36: initLCD();
   909  000032  EC67  F004         	call	_initLCD	;wreg free
   910                           
   911                           ;main.c: 38: I2C_Master_Init(10000);
   912  000036  0E10               	movlw	16
   913  000038  6E20               	movwf	I2C_Master_Init@c,c
   914  00003A  0E27               	movlw	39
   915  00003C  6E21               	movwf	I2C_Master_Init@c+1,c
   916  00003E  0E00               	movlw	0
   917  000040  6E22               	movwf	I2C_Master_Init@c+2,c
   918  000042  0E00               	movlw	0
   919  000044  6E23               	movwf	I2C_Master_Init@c+3,c
   920  000046  ECEA  F003         	call	_I2C_Master_Init	;wreg free
   921                           
   922                           ;main.c: 39: (INTCONbits.GIE = 1);
   923  00004A  8EF2               	bsf	intcon,7,c	;volatile
   924                           
   925                           ;main.c: 42: while (screenMode == 2){
   926                           
   927                           ;main.c: 41: while (1) {
   928  00004C  D048               	goto	l1699
   929  00004E                     l143:
   930                           
   931                           ;main.c: 43: (INTCONbits.GIE = 0);
   932  00004E  9EF2               	bcf	intcon,7,c	;volatile
   933                           
   934                           ;main.c: 44: lcdInst(0b10000000);;
   935  000050  0E80               	movlw	128
   936  000052  EC20  F005         	call	_lcdInst
   937                           
   938                           ;main.c: 45: printf("START:   PRESS *");
   939  000056  0EDD               	movlw	low STR_1
   940  000058  6E1F               	movwf	printf@f,c
   941  00005A  0EFF               	movlw	high STR_1
   942  00005C  6E20               	movwf	printf@f+1,c
   943  00005E  EC94  F001         	call	_printf	;wreg free
   944                           
   945                           ;main.c: 46: lcdInst(0b11000000);;
   946  000062  0EC0               	movlw	192
   947  000064  EC20  F005         	call	_lcdInst
   948                           
   949                           ;main.c: 47: printf("< 4   DATA   6 >");
   950  000068  0EEE               	movlw	low STR_2
   951  00006A  6E1F               	movwf	printf@f,c
   952  00006C  0EFF               	movlw	high STR_2
   953  00006E  6E20               	movwf	printf@f+1,c
   954  000070  EC94  F001         	call	_printf	;wreg free
   955                           
   956                           ;main.c: 48: (INTCONbits.GIE = 1);
   957  000074  8EF2               	bsf	intcon,7,c	;volatile
   958                           
   959                           ;main.c: 49: unsigned char i;
   960                           ;main.c: 50: for(i=0;i<50;i++){
   961  000076  0E00               	movlw	0
   962  000078  6E3D               	movwf	main@i,c
   963  00007A                     l1669:
   964  00007A  0E31               	movlw	49
   965  00007C  643D               	cpfsgt	main@i,c
   966  00007E  D001               	goto	l1673
   967  000080  D00E               	goto	l1681
   968  000082                     l1673:
   969                           
   970                           ;main.c: 51: if (screenMode != 2)
   971  000082  0E02               	movlw	2
   972  000084  1847               	xorwf	_screenMode,w,c
   973  000086  A4D8               	btfss	status,2,c
   974  000088  D00A               	goto	l1681
   975                           
   976                           ;main.c: 53: _delay((unsigned long)((10)*(10000000/4000.0)));
   977                           
   978                           ;main.c: 52: break;
   979  00008A  0E21               	movlw	33
   980  00008C  6E35               	movwf	??_main& (0+255),c
   981  00008E  0E76               	movlw	118
   982  000090                     u1387:
   983  000090  2EE8               	decfsz	wreg,f,c
   984  000092  D7FE               	bra	u1387
   985  000094  2E35               	decfsz	??_main& (0+255),f,c
   986  000096  D7FC               	bra	u1387
   987  000098  D000               	nop2	
   988  00009A  2A3D               	incf	main@i,f,c
   989  00009C  D7EE               	goto	l1669
   990  00009E                     l1681:
   991                           
   992                           ;main.c: 54: }
   993                           ;main.c: 55: lcdInst(0b10000000);;
   994  00009E  0E80               	movlw	128
   995  0000A0  EC20  F005         	call	_lcdInst
   996                           
   997                           ;main.c: 56: lcdInst(0b11000000);;
   998  0000A4  0EC0               	movlw	192
   999  0000A6  EC20  F005         	call	_lcdInst
  1000                           
  1001                           ;main.c: 57: printf(" <4   DATA   6> ");
  1002  0000AA  0EBB               	movlw	low STR_3
  1003  0000AC  6E1F               	movwf	printf@f,c
  1004  0000AE  0EFF               	movlw	high STR_3
  1005  0000B0  6E20               	movwf	printf@f+1,c
  1006  0000B2  EC94  F001         	call	_printf	;wreg free
  1007                           
  1008                           ;main.c: 58: for(i=0;i<50;i++){
  1009  0000B6  0E00               	movlw	0
  1010  0000B8  6E3D               	movwf	main@i,c
  1011  0000BA                     l1687:
  1012  0000BA  0E31               	movlw	49
  1013  0000BC  643D               	cpfsgt	main@i,c
  1014  0000BE  D001               	goto	l1691
  1015  0000C0  D00E               	goto	l1699
  1016  0000C2                     l1691:
  1017                           
  1018                           ;main.c: 59: if (screenMode != 2)
  1019  0000C2  0E02               	movlw	2
  1020  0000C4  1847               	xorwf	_screenMode,w,c
  1021  0000C6  A4D8               	btfss	status,2,c
  1022  0000C8  D00A               	goto	l1699
  1023                           
  1024                           ;main.c: 61: _delay((unsigned long)((10)*(10000000/4000.0)));
  1025                           
  1026                           ;main.c: 60: break;
  1027  0000CA  0E21               	movlw	33
  1028  0000CC  6E35               	movwf	??_main& (0+255),c
  1029  0000CE  0E76               	movlw	118
  1030  0000D0                     u1397:
  1031  0000D0  2EE8               	decfsz	wreg,f,c
  1032  0000D2  D7FE               	bra	u1397
  1033  0000D4  2E35               	decfsz	??_main& (0+255),f,c
  1034  0000D6  D7FC               	bra	u1397
  1035  0000D8  D000               	nop2	
  1036  0000DA  2A3D               	incf	main@i,f,c
  1037  0000DC  D7EE               	goto	l1687
  1038  0000DE                     l1699:
  1039  0000DE  0E02               	movlw	2
  1040  0000E0  1847               	xorwf	_screenMode,w,c
  1041  0000E2  A4D8               	btfss	status,2,c
  1042  0000E4  D013               	goto	l1707
  1043  0000E6  D7B3               	goto	l143
  1044  0000E8                     l1701:
  1045                           
  1046                           ;main.c: 65: lcdInst(0b10000000);;
  1047  0000E8  0E80               	movlw	128
  1048  0000EA  EC20  F005         	call	_lcdInst
  1049                           
  1050                           ;main.c: 66: printf("RUNNING...      ");
  1051  0000EE  0E44               	movlw	low STR_4
  1052  0000F0  6E1F               	movwf	printf@f,c
  1053  0000F2  0EFF               	movlw	high STR_4
  1054  0000F4  6E20               	movwf	printf@f+1,c
  1055  0000F6  EC94  F001         	call	_printf	;wreg free
  1056                           
  1057                           ;main.c: 67: lcdInst(0b11000000);;
  1058  0000FA  0EC0               	movlw	192
  1059  0000FC  EC20  F005         	call	_lcdInst
  1060                           
  1061                           ;main.c: 68: printf("                ");
  1062  000100  0E33               	movlw	low STR_5
  1063  000102  6E1F               	movwf	printf@f,c
  1064  000104  0EFF               	movlw	high STR_5
  1065  000106  6E20               	movwf	printf@f+1,c
  1066  000108  EC94  F001         	call	_printf	;wreg free
  1067  00010C                     l1707:
  1068  00010C  0447               	decf	_screenMode,w,c
  1069  00010E  A4D8               	btfss	status,2,c
  1070  000110  D013               	goto	l1715
  1071  000112  D7EA               	goto	l1701
  1072  000114                     l1709:
  1073                           
  1074                           ;main.c: 76: lcdInst(0b10000000);;
  1075  000114  0E80               	movlw	128
  1076  000116  EC20  F005         	call	_lcdInst
  1077                           
  1078                           ;main.c: 77: printf("DONE! PRESS *   ");
  1079  00011A  0E99               	movlw	low STR_6
  1080  00011C  6E1F               	movwf	printf@f,c
  1081  00011E  0EFF               	movlw	high STR_6
  1082  000120  6E20               	movwf	printf@f+1,c
  1083  000122  EC94  F001         	call	_printf	;wreg free
  1084                           
  1085                           ;main.c: 78: lcdInst(0b11000000);;
  1086  000126  0EC0               	movlw	192
  1087  000128  EC20  F005         	call	_lcdInst
  1088                           
  1089                           ;main.c: 79: printf("TO CONTINUE     ");
  1090  00012C  0E66               	movlw	low STR_7
  1091  00012E  6E1F               	movwf	printf@f,c
  1092  000130  0EFF               	movlw	high STR_7
  1093  000132  6E20               	movwf	printf@f+1,c
  1094  000134  EC94  F001         	call	_printf	;wreg free
  1095  000138                     l1715:
  1096  000138  5047               	movf	_screenMode,w,c
  1097  00013A  A4D8               	btfss	status,2,c
  1098  00013C  D01F               	goto	l1729
  1099  00013E  D7EA               	goto	l1709
  1100  000140                     l158:
  1101                           
  1102                           ;main.c: 83: (INTCONbits.GIE = 0);
  1103  000140  9EF2               	bcf	intcon,7,c	;volatile
  1104                           
  1105                           ;main.c: 84: unsigned char min, sec;
  1106                           ;main.c: 87: min = 1;
  1107  000142  0E01               	movlw	1
  1108  000144  6E36               	movwf	main@min,c
  1109                           
  1110                           ;main.c: 88: sec = 1;
  1111  000146  0E01               	movlw	1
  1112  000148  6E37               	movwf	main@sec,c
  1113                           
  1114                           ;main.c: 90: lcdInst(0b10000000);;
  1115  00014A  0E80               	movlw	128
  1116  00014C  EC20  F005         	call	_lcdInst
  1117                           
  1118                           ;main.c: 91: printf("TOTAL RUN TIME: ");
  1119  000150  0EAA               	movlw	low STR_8
  1120  000152  6E1F               	movwf	printf@f,c
  1121  000154  0EFF               	movlw	high STR_8
  1122  000156  6E20               	movwf	printf@f+1,c
  1123  000158  EC94  F001         	call	_printf	;wreg free
  1124                           
  1125                           ;main.c: 92: lcdInst(0b11000000);;
  1126  00015C  0EC0               	movlw	192
  1127  00015E  EC20  F005         	call	_lcdInst
  1128                           
  1129                           ;main.c: 93: printf("%02x:%02x               ", min, sec);
  1130  000162  0E9E               	movlw	low STR_9
  1131  000164  6E1F               	movwf	printf@f,c
  1132  000166  0EFE               	movlw	high STR_9
  1133  000168  6E20               	movwf	printf@f+1,c
  1134  00016A  C036  F021         	movff	main@min,?_printf+2
  1135  00016E  6A22               	clrf	?_printf+3,c
  1136  000170  C037  F023         	movff	main@sec,?_printf+4
  1137  000174  6A24               	clrf	?_printf+5,c
  1138  000176  EC94  F001         	call	_printf	;wreg free
  1139                           
  1140                           ;main.c: 94: (INTCONbits.GIE = 1);
  1141  00017A  8EF2               	bsf	intcon,7,c	;volatile
  1142  00017C                     l1729:
  1143  00017C  0E03               	movlw	3
  1144  00017E  1847               	xorwf	_screenMode,w,c
  1145  000180  A4D8               	btfss	status,2,c
  1146  000182  D018               	goto	l1741
  1147  000184  D7DD               	goto	l158
  1148  000186                     l1731:
  1149                           
  1150                           ;main.c: 97: unsigned char numBats;
  1151                           ;main.c: 100: numBats = 6;
  1152  000186  0E06               	movlw	6
  1153  000188  6E38               	movwf	main@numBats,c
  1154                           
  1155                           ;main.c: 102: lcdInst(0b10000000);;
  1156  00018A  0E80               	movlw	128
  1157  00018C  EC20  F005         	call	_lcdInst
  1158                           
  1159                           ;main.c: 103: printf("TOTAL NUMBER OF ");
  1160  000190  0ECC               	movlw	low STR_10
  1161  000192  6E1F               	movwf	printf@f,c
  1162  000194  0EFF               	movlw	high STR_10
  1163  000196  6E20               	movwf	printf@f+1,c
  1164  000198  EC94  F001         	call	_printf	;wreg free
  1165                           
  1166                           ;main.c: 104: lcdInst(0b11000000);;
  1167  00019C  0EC0               	movlw	192
  1168  00019E  EC20  F005         	call	_lcdInst
  1169                           
  1170                           ;main.c: 105: printf("BATTERIES: %02d   ", numBats);
  1171  0001A2  0E0F               	movlw	low STR_11
  1172  0001A4  6E1F               	movwf	printf@f,c
  1173  0001A6  0EFF               	movlw	high STR_11
  1174  0001A8  6E20               	movwf	printf@f+1,c
  1175  0001AA  C038  F021         	movff	main@numBats,?_printf+2
  1176  0001AE  6A22               	clrf	?_printf+3,c
  1177  0001B0  EC94  F001         	call	_printf	;wreg free
  1178  0001B4                     l1741:
  1179  0001B4  0E04               	movlw	4
  1180  0001B6  1847               	xorwf	_screenMode,w,c
  1181  0001B8  A4D8               	btfss	status,2,c
  1182  0001BA  D01A               	goto	l1755
  1183  0001BC  D7E4               	goto	l1731
  1184  0001BE                     l164:
  1185                           
  1186                           ;main.c: 108: (INTCONbits.GIE = 0);
  1187  0001BE  9EF2               	bcf	intcon,7,c	;volatile
  1188                           
  1189                           ;main.c: 109: unsigned char numC;
  1190                           ;main.c: 112: numC = 3;
  1191  0001C0  0E03               	movlw	3
  1192  0001C2  6E39               	movwf	main@numC,c
  1193                           
  1194                           ;main.c: 114: lcdInst(0b10000000);;
  1195  0001C4  0E80               	movlw	128
  1196  0001C6  EC20  F005         	call	_lcdInst
  1197                           
  1198                           ;main.c: 115: printf("NUMBER OF C     ");
  1199  0001CA  0E55               	movlw	low STR_12
  1200  0001CC  6E1F               	movwf	printf@f,c
  1201  0001CE  0EFF               	movlw	high STR_12
  1202  0001D0  6E20               	movwf	printf@f+1,c
  1203  0001D2  EC94  F001         	call	_printf	;wreg free
  1204                           
  1205                           ;main.c: 116: lcdInst(0b11000000);;
  1206  0001D6  0EC0               	movlw	192
  1207  0001D8  EC20  F005         	call	_lcdInst
  1208                           
  1209                           ;main.c: 117: printf("BATTERIES: %02d   ", numC);
  1210  0001DC  0E0F               	movlw	low STR_11
  1211  0001DE  6E1F               	movwf	printf@f,c
  1212  0001E0  0EFF               	movlw	high STR_11
  1213  0001E2  6E20               	movwf	printf@f+1,c
  1214  0001E4  C039  F021         	movff	main@numC,?_printf+2
  1215  0001E8  6A22               	clrf	?_printf+3,c
  1216  0001EA  EC94  F001         	call	_printf	;wreg free
  1217                           
  1218                           ;main.c: 118: (INTCONbits.GIE = 1);
  1219  0001EE  8EF2               	bsf	intcon,7,c	;volatile
  1220  0001F0                     l1755:
  1221  0001F0  0E05               	movlw	5
  1222  0001F2  1847               	xorwf	_screenMode,w,c
  1223  0001F4  A4D8               	btfss	status,2,c
  1224  0001F6  D01A               	goto	l1769
  1225  0001F8  D7E2               	goto	l164
  1226  0001FA                     l167:
  1227                           
  1228                           ;main.c: 121: (INTCONbits.GIE = 0);
  1229  0001FA  9EF2               	bcf	intcon,7,c	;volatile
  1230                           
  1231                           ;main.c: 122: unsigned char num9V;
  1232                           ;main.c: 125: num9V = 10;
  1233  0001FC  0E0A               	movlw	10
  1234  0001FE  6E3A               	movwf	main@num9V,c
  1235                           
  1236                           ;main.c: 127: lcdInst(0b10000000);;
  1237  000200  0E80               	movlw	128
  1238  000202  EC20  F005         	call	_lcdInst
  1239                           
  1240                           ;main.c: 128: printf("NUMBER OF 9V    ");
  1241  000206  0E88               	movlw	low STR_14
  1242  000208  6E1F               	movwf	printf@f,c
  1243  00020A  0EFF               	movlw	high STR_14
  1244  00020C  6E20               	movwf	printf@f+1,c
  1245  00020E  EC94  F001         	call	_printf	;wreg free
  1246                           
  1247                           ;main.c: 129: lcdInst(0b11000000);;
  1248  000212  0EC0               	movlw	192
  1249  000214  EC20  F005         	call	_lcdInst
  1250                           
  1251                           ;main.c: 130: printf("BATTERIES: %02d     ", num9V);
  1252  000218  0EE5               	movlw	low STR_15
  1253  00021A  6E1F               	movwf	printf@f,c
  1254  00021C  0EFE               	movlw	high STR_15
  1255  00021E  6E20               	movwf	printf@f+1,c
  1256  000220  C03A  F021         	movff	main@num9V,?_printf+2
  1257  000224  6A22               	clrf	?_printf+3,c
  1258  000226  EC94  F001         	call	_printf	;wreg free
  1259                           
  1260                           ;main.c: 131: (INTCONbits.GIE = 1);
  1261  00022A  8EF2               	bsf	intcon,7,c	;volatile
  1262  00022C                     l1769:
  1263  00022C  0E06               	movlw	6
  1264  00022E  1847               	xorwf	_screenMode,w,c
  1265  000230  A4D8               	btfss	status,2,c
  1266  000232  D01A               	goto	l1783
  1267  000234  D7E2               	goto	l167
  1268  000236                     l170:
  1269                           
  1270                           ;main.c: 134: (INTCONbits.GIE = 0);
  1271  000236  9EF2               	bcf	intcon,7,c	;volatile
  1272                           
  1273                           ;main.c: 135: unsigned char numAA;
  1274                           ;main.c: 138: numAA = 2;
  1275  000238  0E02               	movlw	2
  1276  00023A  6E3B               	movwf	main@numAA,c
  1277                           
  1278                           ;main.c: 140: lcdInst(0b10000000);;
  1279  00023C  0E80               	movlw	128
  1280  00023E  EC20  F005         	call	_lcdInst
  1281                           
  1282                           ;main.c: 141: printf("NUMBER OF AA    ");
  1283  000242  0E77               	movlw	low STR_16
  1284  000244  6E1F               	movwf	printf@f,c
  1285  000246  0EFF               	movlw	high STR_16
  1286  000248  6E20               	movwf	printf@f+1,c
  1287  00024A  EC94  F001         	call	_printf	;wreg free
  1288                           
  1289                           ;main.c: 142: lcdInst(0b11000000);;
  1290  00024E  0EC0               	movlw	192
  1291  000250  EC20  F005         	call	_lcdInst
  1292                           
  1293                           ;main.c: 143: printf("BATTERIES: %02x     ", numAA);
  1294  000254  0EFA               	movlw	low STR_17
  1295  000256  6E1F               	movwf	printf@f,c
  1296  000258  0EFE               	movlw	high STR_17
  1297  00025A  6E20               	movwf	printf@f+1,c
  1298  00025C  C03B  F021         	movff	main@numAA,?_printf+2
  1299  000260  6A22               	clrf	?_printf+3,c
  1300  000262  EC94  F001         	call	_printf	;wreg free
  1301                           
  1302                           ;main.c: 144: (INTCONbits.GIE = 1);
  1303  000266  8EF2               	bsf	intcon,7,c	;volatile
  1304  000268                     l1783:
  1305  000268  0E07               	movlw	7
  1306  00026A  1847               	xorwf	_screenMode,w,c
  1307  00026C  A4D8               	btfss	status,2,c
  1308  00026E  D057               	goto	l1805
  1309  000270  D7E2               	goto	l170
  1310  000272                     l1785:
  1311                           
  1312                           ;main.c: 148: I2C_Master_Start();
  1313  000272  EC2F  F005         	call	_I2C_Master_Start	;wreg free
  1314                           
  1315                           ;main.c: 149: I2C_Master_Write(0b11010000);
  1316  000276  0E00               	movlw	0
  1317  000278  6E15               	movwf	I2C_Master_Write@d+1,c
  1318  00027A  0ED0               	movlw	208
  1319  00027C  6E14               	movwf	I2C_Master_Write@d,c
  1320  00027E  EC26  F005         	call	_I2C_Master_Write	;wreg free
  1321                           
  1322                           ;main.c: 150: I2C_Master_Write(0x00);
  1323  000282  0E00               	movlw	0
  1324  000284  6E15               	movwf	I2C_Master_Write@d+1,c
  1325  000286  0E00               	movlw	0
  1326  000288  6E14               	movwf	I2C_Master_Write@d,c
  1327  00028A  EC26  F005         	call	_I2C_Master_Write	;wreg free
  1328                           
  1329                           ;main.c: 151: I2C_Master_Stop();
  1330  00028E  EC2B  F005         	call	_I2C_Master_Stop	;wreg free
  1331                           
  1332                           ;main.c: 153: I2C_Master_Start();
  1333  000292  EC2F  F005         	call	_I2C_Master_Start	;wreg free
  1334                           
  1335                           ;main.c: 154: I2C_Master_Write(0b11010001);
  1336  000296  0E00               	movlw	0
  1337  000298  6E15               	movwf	I2C_Master_Write@d+1,c
  1338  00029A  0ED1               	movlw	209
  1339  00029C  6E14               	movwf	I2C_Master_Write@d,c
  1340  00029E  EC26  F005         	call	_I2C_Master_Write	;wreg free
  1341                           
  1342                           ;main.c: 155: for(unsigned char i=0;i<0x06;i++){
  1343  0002A2  0E00               	movlw	0
  1344  0002A4  6E3C               	movwf	main@i_272,c
  1345  0002A6                     l1789:
  1346  0002A6  0E05               	movlw	5
  1347  0002A8  643C               	cpfsgt	main@i_272,c
  1348  0002AA  D001               	goto	l1793
  1349  0002AC  D00E               	goto	l1799
  1350  0002AE                     l1793:
  1351                           
  1352                           ;main.c: 156: time[i] = I2C_Master_Read(1);
  1353  0002AE  503C               	movf	main@i_272,w,c
  1354  0002B0  0D01               	mullw	1
  1355  0002B2  0E3E               	movlw	low _time
  1356  0002B4  24F3               	addwf	prodl,w,c
  1357  0002B6  6ED9               	movwf	fsr2l,c
  1358  0002B8  0E00               	movlw	high _time
  1359  0002BA  20F4               	addwfc	prodh,w,c
  1360  0002BC  6EDA               	movwf	fsr2h,c
  1361  0002BE  0E01               	movlw	1
  1362  0002C0  ECEF  F004         	call	_I2C_Master_Read
  1363  0002C4  6EDF               	movwf	indf2,c
  1364  0002C6  2A3C               	incf	main@i_272,f,c
  1365  0002C8  D7EE               	goto	l1789
  1366  0002CA                     l1799:
  1367                           
  1368                           ;main.c: 157: }
  1369                           ;main.c: 158: time[6] = I2C_Master_Read(0);
  1370  0002CA  0E00               	movlw	0
  1371  0002CC  ECEF  F004         	call	_I2C_Master_Read
  1372  0002D0  6E44               	movwf	_time+6,c
  1373                           
  1374                           ;main.c: 159: I2C_Master_Stop();
  1375  0002D2  EC2B  F005         	call	_I2C_Master_Stop	;wreg free
  1376                           
  1377                           ;main.c: 160: lcdInst(0b10000000);;
  1378  0002D6  0E80               	movlw	128
  1379  0002D8  EC20  F005         	call	_lcdInst
  1380                           
  1381                           ;main.c: 161: printf("DATE: %02x/%02x/%02x  ", time[6],time[5],time[4]);
  1382  0002DC  0EB7               	movlw	low STR_18
  1383  0002DE  6E1F               	movwf	printf@f,c
  1384  0002E0  0EFE               	movlw	high STR_18
  1385  0002E2  6E20               	movwf	printf@f+1,c
  1386  0002E4  C044  F021         	movff	_time+6,?_printf+2
  1387  0002E8  6A22               	clrf	?_printf+3,c
  1388  0002EA  C043  F023         	movff	_time+5,?_printf+4
  1389  0002EE  6A24               	clrf	?_printf+5,c
  1390  0002F0  C042  F025         	movff	_time+4,?_printf+6
  1391  0002F4  6A26               	clrf	?_printf+7,c
  1392  0002F6  EC94  F001         	call	_printf	;wreg free
  1393                           
  1394                           ;main.c: 162: lcdInst(0b11000000);;
  1395  0002FA  0EC0               	movlw	192
  1396  0002FC  EC20  F005         	call	_lcdInst
  1397                           
  1398                           ;main.c: 163: printf("TIME: %02x:%02x:%02x  ", time[2],time[1],time[0]);
  1399  000300  0ECE               	movlw	low STR_19
  1400  000302  6E1F               	movwf	printf@f,c
  1401  000304  0EFE               	movlw	high STR_19
  1402  000306  6E20               	movwf	printf@f+1,c
  1403  000308  C040  F021         	movff	_time+2,?_printf+2
  1404  00030C  6A22               	clrf	?_printf+3,c
  1405  00030E  C03F  F023         	movff	_time+1,?_printf+4
  1406  000312  6A24               	clrf	?_printf+5,c
  1407  000314  C03E  F025         	movff	_time,?_printf+6
  1408  000318  6A26               	clrf	?_printf+7,c
  1409  00031A  EC94  F001         	call	_printf	;wreg free
  1410  00031E                     l1805:
  1411  00031E  0E08               	movlw	8
  1412  000320  1847               	xorwf	_screenMode,w,c
  1413  000322  A4D8               	btfss	status,2,c
  1414  000324  D6DC               	goto	l1699
  1415  000326  D7A5               	goto	l1785
  1416  000328                     __end_of_main:
  1417                           	opt stack 0
  1418                           tblptru	equ	0xFF8
  1419                           tblptrh	equ	0xFF7
  1420                           tblptrl	equ	0xFF6
  1421                           tablat	equ	0xFF5
  1422                           prodh	equ	0xFF4
  1423                           prodl	equ	0xFF3
  1424                           intcon	equ	0xFF2
  1425                           intcon3	equ	0xFF0
  1426                           postinc0	equ	0xFEE
  1427                           wreg	equ	0xFE8
  1428                           indf2	equ	0xFDF
  1429                           fsr2h	equ	0xFDA
  1430                           fsr2l	equ	0xFD9
  1431                           status	equ	0xFD8
  1432                           
  1433 ;; *************** function _printf *****************
  1434 ;; Defined at:
  1435 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  1436 ;; Parameters:    Size  Location     Type
  1437 ;;  f               2   30[COMRAM] PTR const unsigned char 
  1438 ;;		 -> STR_19(23), STR_18(23), STR_17(21), STR_16(17), 
  1439 ;;		 -> STR_15(21), STR_14(17), STR_13(19), STR_12(17), 
  1440 ;;		 -> STR_11(19), STR_10(17), STR_9(25), STR_8(17), 
  1441 ;;		 -> STR_7(17), STR_6(17), STR_5(17), STR_4(17), 
  1442 ;;		 -> STR_3(17), STR_2(17), STR_1(17), 
  1443 ;; Auto vars:     Size  Location     Type
  1444 ;;  idx             1   42[COMRAM] unsigned char 
  1445 ;;  tmpval          4    0        struct .
  1446 ;;  cp              3    0        PTR const unsigned char 
  1447 ;;  width           2   49[COMRAM] int 
  1448 ;;  val             2   46[COMRAM] unsigned int 
  1449 ;;  ap              2   43[COMRAM] PTR void [1]
  1450 ;;		 -> ?_printf(2), 
  1451 ;;  len             2    0        unsigned int 
  1452 ;;  c               1   51[COMRAM] char 
  1453 ;;  flag            1   48[COMRAM] unsigned char 
  1454 ;;  prec            1   45[COMRAM] char 
  1455 ;; Return value:  Size  Location     Type
  1456 ;;                  2   30[COMRAM] int 
  1457 ;; Registers used:
  1458 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1459 ;; Tracked objects:
  1460 ;;		On entry : 0/0
  1461 ;;		On exit  : 0/0
  1462 ;;		Unchanged: 0/0
  1463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1464 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1465 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1466 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1467 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1468 ;;Total ram usage:       22 bytes
  1469 ;; Hardware stack levels used:    1
  1470 ;; Hardware stack levels required when called:    4
  1471 ;; This function calls:
  1472 ;;		___lwdiv
  1473 ;;		___lwmod
  1474 ;;		___wmul
  1475 ;;		_isdigit
  1476 ;;		_putch
  1477 ;; This function is called by:
  1478 ;;		_main
  1479 ;; This function uses a non-reentrant model
  1480 ;;
  1481                           
  1482                           	psect	text1
  1483  000328                     __ptext1:
  1484                           	opt stack 0
  1485  000328                     _printf:
  1486                           	opt stack 26
  1487                           
  1488                           ;doprnt.c: 466: va_list ap;
  1489                           ;doprnt.c: 499: signed char c;
  1490                           ;doprnt.c: 501: int width;
  1491                           ;doprnt.c: 506: signed char prec;
  1492                           ;doprnt.c: 508: unsigned char flag;
  1493                           ;doprnt.c: 523: union {
  1494                           ;doprnt.c: 524: unsigned long vd;
  1495                           ;doprnt.c: 525: double integ;
  1496                           ;doprnt.c: 526: } tmpval;
  1497                           ;doprnt.c: 528: unsigned int val;
  1498                           ;doprnt.c: 529: unsigned len;
  1499                           ;doprnt.c: 530: const char * cp;
  1500                           ;doprnt.c: 533: *ap = __va_start();
  1501                           
  1502                           ;incstack = 0
  1503  000328  0E21               	movlw	low (?_printf+2)
  1504  00032A  6E2C               	movwf	printf@ap,c
  1505  00032C  0E00               	movlw	high (?_printf+2)
  1506  00032E  6E2D               	movwf	printf@ap+1,c
  1507                           
  1508                           ;doprnt.c: 536: while(c = *f++) {
  1509  000330  D174               	goto	l1625
  1510  000332                     l1499:
  1511                           
  1512                           ;doprnt.c: 538: if(c != '%')
  1513  000332  0E25               	movlw	37
  1514  000334  1834               	xorwf	printf@c,w,c
  1515  000336  B4D8               	btfsc	status,2,c
  1516  000338  D004               	goto	l1503
  1517                           
  1518                           ;doprnt.c: 540: {
  1519                           ;doprnt.c: 541: (putch(c) );
  1520  00033A  5034               	movf	printf@c,w,c
  1521  00033C  EC1A  F005         	call	_putch
  1522                           
  1523                           ;doprnt.c: 542: continue;
  1524  000340  D16C               	goto	l1625
  1525  000342                     l1503:
  1526                           
  1527                           ;doprnt.c: 543: }
  1528                           ;doprnt.c: 546: width = 0;
  1529  000342  0E00               	movlw	0
  1530  000344  6E33               	movwf	printf@width+1,c
  1531  000346  0E00               	movlw	0
  1532  000348  6E32               	movwf	printf@width,c
  1533                           
  1534                           ;doprnt.c: 548: flag = 0;
  1535  00034A  0E00               	movlw	0
  1536  00034C  6E31               	movwf	printf@flag,c
  1537                           
  1538                           ;doprnt.c: 551: switch(*f) {
  1539                           
  1540                           ;doprnt.c: 550: for(;;) {
  1541  00034E  D003               	goto	l1509
  1542  000350                     l1505:
  1543                           
  1544                           ;doprnt.c: 580: flag |= 0x04;
  1545  000350  8431               	bsf	printf@flag,2,c
  1546                           
  1547                           ;doprnt.c: 581: f++;
  1548  000352  4A1F               	infsnz	printf@f,f,c
  1549  000354  2A20               	incf	printf@f+1,f,c
  1550  000356                     l1509:
  1551  000356  C01F  FFF6         	movff	printf@f,tblptrl
  1552  00035A  C020  FFF7         	movff	printf@f+1,tblptrh
  1553  00035E                     	if	0	;tblptru may be non-zero
  1554  00035E                     	endif
  1555  00035E                     	if	0	;tblptru may be non-zero
  1556  00035E                     	endif
  1557  00035E  0008               	tblrd		*
  1558  000360  50F5               	movf	tablat,w,c
  1559                           
  1560                           ; Switch size 1, requested type "space"
  1561                           ; Number of cases is 1, Range of values is 48 to 48
  1562                           ; switch strategies available:
  1563                           ; Name         Instructions Cycles
  1564                           ; simple_byte            4     3 (average)
  1565                           ;	Chosen strategy is simple_byte
  1566  000362  0A30               	xorlw	48	; case 48
  1567  000364  B4D8               	btfsc	status,2,c
  1568  000366  D7F4               	goto	l1505
  1569                           
  1570                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1571                           
  1572                           ;doprnt.c: 586: }
  1573                           
  1574                           ;doprnt.c: 585: break;
  1575  000368  C01F  FFF6         	movff	printf@f,tblptrl
  1576  00036C  C020  FFF7         	movff	printf@f+1,tblptrh
  1577  000370                     	if	0	;tblptru may be non-zero
  1578  000370                     	endif
  1579  000370                     	if	0	;tblptru may be non-zero
  1580  000370                     	endif
  1581  000370  0008               	tblrd		*
  1582  000372  50F5               	movf	tablat,w,c
  1583  000374  EC02  F005         	call	_isdigit
  1584  000378  A0D8               	btfss	status,0,c
  1585  00037A  D035               	goto	l1527
  1586                           
  1587                           ;doprnt.c: 598: width = 0;
  1588  00037C  0E00               	movlw	0
  1589  00037E  6E33               	movwf	printf@width+1,c
  1590  000380  0E00               	movlw	0
  1591  000382  6E32               	movwf	printf@width,c
  1592  000384                     l1515:
  1593                           
  1594                           ;doprnt.c: 600: width *= 10;
  1595  000384  C032  F013         	movff	printf@width,___wmul@multiplier
  1596  000388  C033  F014         	movff	printf@width+1,___wmul@multiplier+1
  1597  00038C  0E00               	movlw	0
  1598  00038E  6E16               	movwf	___wmul@multiplicand+1,c
  1599  000390  0E0A               	movlw	10
  1600  000392  6E15               	movwf	___wmul@multiplicand,c
  1601  000394  ECDC  F004         	call	___wmul	;wreg free
  1602  000398  C013  F032         	movff	?___wmul,printf@width
  1603  00039C  C014  F033         	movff	?___wmul+1,printf@width+1
  1604                           
  1605                           ;doprnt.c: 601: width += *f++ - '0';
  1606  0003A0  0ED0               	movlw	208
  1607  0003A2  6E27               	movwf	??_printf& (0+255),c
  1608  0003A4  0EFF               	movlw	255
  1609  0003A6  6E28               	movwf	(??_printf+1)& (0+255),c
  1610  0003A8  C01F  FFF6         	movff	printf@f,tblptrl
  1611  0003AC  C020  FFF7         	movff	printf@f+1,tblptrh
  1612  0003B0                     	if	0	;tblptru may be non-zero
  1613  0003B0                     	endif
  1614  0003B0                     	if	0	;tblptru may be non-zero
  1615  0003B0                     	endif
  1616  0003B0  0008               	tblrd		*
  1617  0003B2  50F5               	movf	tablat,w,c
  1618  0003B4  6E29               	movwf	(??_printf+2)& (0+255),c
  1619  0003B6  6A2A               	clrf	(??_printf+3)& (0+255),c
  1620  0003B8  5027               	movf	??_printf,w,c
  1621  0003BA  2629               	addwf	??_printf+2,f,c
  1622  0003BC  5028               	movf	??_printf+1,w,c
  1623  0003BE  222A               	addwfc	??_printf+3,f,c
  1624  0003C0  5029               	movf	??_printf+2,w,c
  1625  0003C2  2632               	addwf	printf@width,f,c
  1626  0003C4  502A               	movf	??_printf+3,w,c
  1627  0003C6  2233               	addwfc	printf@width+1,f,c
  1628  0003C8  4A1F               	infsnz	printf@f,f,c
  1629  0003CA  2A20               	incf	printf@f+1,f,c
  1630                           
  1631                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1632  0003CC  C01F  FFF6         	movff	printf@f,tblptrl
  1633  0003D0  C020  FFF7         	movff	printf@f+1,tblptrh
  1634  0003D4                     	if	0	;tblptru may be non-zero
  1635  0003D4                     	endif
  1636  0003D4                     	if	0	;tblptru may be non-zero
  1637  0003D4                     	endif
  1638  0003D4  0008               	tblrd		*
  1639  0003D6  50F5               	movf	tablat,w,c
  1640  0003D8  EC02  F005         	call	_isdigit
  1641  0003DC  A0D8               	btfss	status,0,c
  1642  0003DE  D003               	goto	l1527
  1643  0003E0  D7D1               	goto	l1515
  1644  0003E2                     l1523:
  1645                           
  1646                           ;doprnt.c: 721: flag |= 0x80;
  1647  0003E2  8E31               	bsf	printf@flag,7,c
  1648                           
  1649                           ;doprnt.c: 723: break;
  1650  0003E4  D017               	goto	l233
  1651  0003E6                     l1527:
  1652  0003E6  C01F  FFF6         	movff	printf@f,tblptrl
  1653  0003EA  C020  FFF7         	movff	printf@f+1,tblptrh
  1654  0003EE  4A1F               	infsnz	printf@f,f,c
  1655  0003F0  2A20               	incf	printf@f+1,f,c
  1656  0003F2                     	if	0	;tblptru may be non-zero
  1657  0003F2                     	endif
  1658  0003F2                     	if	0	;tblptru may be non-zero
  1659  0003F2                     	endif
  1660  0003F2  0008               	tblrd		*
  1661  0003F4  CFF5 F034          	movff	tablat,printf@c
  1662  0003F8  5034               	movf	printf@c,w,c
  1663                           
  1664                           ; Switch size 1, requested type "space"
  1665                           ; Number of cases is 4, Range of values is 0 to 120
  1666                           ; switch strategies available:
  1667                           ; Name         Instructions Cycles
  1668                           ; simple_byte           13     7 (average)
  1669                           ;	Chosen strategy is simple_byte
  1670  0003FA  0A00               	xorlw	0	; case 0
  1671  0003FC  B4D8               	btfsc	status,2,c
  1672  0003FE  0012               	return	
  1673  000400  0A64               	xorlw	100	; case 100
  1674  000402  B4D8               	btfsc	status,2,c
  1675  000404  D007               	goto	l233
  1676  000406  0A0D               	xorlw	13	; case 105
  1677  000408  B4D8               	btfsc	status,2,c
  1678  00040A  D004               	goto	l233
  1679  00040C  0A11               	xorlw	17	; case 120
  1680  00040E  B4D8               	btfsc	status,2,c
  1681  000410  D7E8               	goto	l1523
  1682  000412  D103               	goto	l1625
  1683  000414                     l233:
  1684                           
  1685                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  1686  000414  BE31               	btfsc	printf@flag,7,c
  1687  000416  D015               	goto	l1539
  1688                           
  1689                           ;doprnt.c: 1253: {
  1690                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1691  000418  C02C  FFD9         	movff	printf@ap,fsr2l
  1692  00041C  C02D  FFDA         	movff	printf@ap+1,fsr2h
  1693  000420  CFDE F02F          	movff	postinc2,printf@val
  1694  000424  CFDD F030          	movff	postdec2,printf@val+1
  1695  000428  0E02               	movlw	2
  1696  00042A  262C               	addwf	printf@ap,f,c
  1697  00042C  0E00               	movlw	0
  1698  00042E  222D               	addwfc	printf@ap+1,f,c
  1699                           
  1700                           ;doprnt.c: 1261: if((int)val < 0) {
  1701  000430  AE30               	btfss	printf@val+1,7,c
  1702  000432  D044               	goto	l1573
  1703                           
  1704                           ;doprnt.c: 1262: flag |= 0x03;
  1705  000434  0E03               	movlw	3
  1706  000436  1231               	iorwf	printf@flag,f,c
  1707                           
  1708                           ;doprnt.c: 1263: val = -val;
  1709  000438  6C2F               	negf	printf@val,c
  1710  00043A  1E30               	comf	printf@val+1,f,c
  1711  00043C  B0D8               	btfsc	status,0,c
  1712  00043E  2A30               	incf	printf@val+1,f,c
  1713                           
  1714                           ;doprnt.c: 1264: }
  1715                           ;doprnt.c: 1266: }
  1716  000440  D03D               	goto	l1573
  1717  000442                     l1539:
  1718                           
  1719                           ;doprnt.c: 1268: else
  1720                           ;doprnt.c: 1273: {
  1721                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  1722  000442  C02C  FFD9         	movff	printf@ap,fsr2l
  1723  000446  C02D  FFDA         	movff	printf@ap+1,fsr2h
  1724  00044A  CFDE F02F          	movff	postinc2,printf@val
  1725  00044E  CFDD F030          	movff	postdec2,printf@val+1
  1726  000452  0E02               	movlw	2
  1727  000454  262C               	addwf	printf@ap,f,c
  1728  000456  0E00               	movlw	0
  1729  000458  222D               	addwfc	printf@ap+1,f,c
  1730                           
  1731                           ;doprnt.c: 1287: }
  1732                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  1733  00045A  D030               	goto	l1573
  1734  00045C                     l1543:
  1735                           
  1736                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1737  00045C  0E01               	movlw	1
  1738  00045E  6E34               	movwf	printf@c,c
  1739  000460                     l1545:
  1740  000460  0E05               	movlw	5
  1741  000462  1834               	xorwf	printf@c,w,c
  1742  000464  B4D8               	btfsc	status,2,c
  1743  000466  D032               	goto	l1575
  1744                           
  1745                           ;doprnt.c: 1306: if(val < dpowers[c])
  1746  000468  5034               	movf	printf@c,w,c
  1747  00046A  0D02               	mullw	2
  1748  00046C  0E8C               	movlw	low _dpowers
  1749  00046E  24F3               	addwf	prodl,w,c
  1750  000470  6EF6               	movwf	tblptrl,c
  1751  000472  0EFE               	movlw	high _dpowers
  1752  000474  20F4               	addwfc	prodh,w,c
  1753  000476  6EF7               	movwf	tblptrh,c
  1754  000478                     	if	0	;There are less than 3 active tblptr bytes
  1755  000478                     	endif
  1756  000478  0009               	tblrd		*+
  1757  00047A  50F5               	movf	tablat,w,c
  1758  00047C  5C2F               	subwf	printf@val,w,c
  1759  00047E  0009               	tblrd		*+
  1760  000480  50F5               	movf	tablat,w,c
  1761  000482  5830               	subwfb	printf@val+1,w,c
  1762  000484  A0D8               	btfss	status,0,c
  1763  000486  D022               	goto	l1575
  1764                           
  1765                           ;doprnt.c: 1307: break;
  1766  000488  2A34               	incf	printf@c,f,c
  1767  00048A  D7EA               	goto	l1545
  1768  00048C                     l1557:
  1769                           
  1770                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  1771  00048C  0E01               	movlw	1
  1772  00048E  6E34               	movwf	printf@c,c
  1773  000490                     l1559:
  1774  000490  0E04               	movlw	4
  1775  000492  1834               	xorwf	printf@c,w,c
  1776  000494  B4D8               	btfsc	status,2,c
  1777  000496  D01A               	goto	l1575
  1778                           
  1779                           ;doprnt.c: 1317: if(val < hexpowers[c])
  1780  000498  5034               	movf	printf@c,w,c
  1781  00049A  0D02               	mullw	2
  1782  00049C  0E96               	movlw	low _hexpowers
  1783  00049E  24F3               	addwf	prodl,w,c
  1784  0004A0  6EF6               	movwf	tblptrl,c
  1785  0004A2  0EFE               	movlw	high _hexpowers
  1786  0004A4  20F4               	addwfc	prodh,w,c
  1787  0004A6  6EF7               	movwf	tblptrh,c
  1788  0004A8                     	if	0	;There are less than 3 active tblptr bytes
  1789  0004A8                     	endif
  1790  0004A8  0009               	tblrd		*+
  1791  0004AA  50F5               	movf	tablat,w,c
  1792  0004AC  5C2F               	subwf	printf@val,w,c
  1793  0004AE  0009               	tblrd		*+
  1794  0004B0  50F5               	movf	tablat,w,c
  1795  0004B2  5830               	subwfb	printf@val+1,w,c
  1796  0004B4  A0D8               	btfss	status,0,c
  1797  0004B6  D00A               	goto	l1575
  1798                           
  1799                           ;doprnt.c: 1318: break;
  1800  0004B8  2A34               	incf	printf@c,f,c
  1801  0004BA  D7EA               	goto	l1559
  1802  0004BC                     l1573:
  1803  0004BC  5031               	movf	printf@flag,w,c
  1804  0004BE  0B80               	andlw	128
  1805                           
  1806                           ; Switch size 1, requested type "space"
  1807                           ; Number of cases is 2, Range of values is 0 to 128
  1808                           ; switch strategies available:
  1809                           ; Name         Instructions Cycles
  1810                           ; simple_byte            7     4 (average)
  1811                           ;	Chosen strategy is simple_byte
  1812  0004C0  0A00               	xorlw	0	; case 0
  1813  0004C2  B4D8               	btfsc	status,2,c
  1814  0004C4  D7CB               	goto	l1543
  1815  0004C6  0A80               	xorlw	128	; case 128
  1816  0004C8  B4D8               	btfsc	status,2,c
  1817  0004CA  D7E0               	goto	l1557
  1818  0004CC                     l1575:
  1819                           
  1820                           ;doprnt.c: 1345: if(width && flag & 0x03)
  1821  0004CC  5032               	movf	printf@width,w,c
  1822  0004CE  1033               	iorwf	printf@width+1,w,c
  1823  0004D0  B4D8               	btfsc	status,2,c
  1824  0004D2  D009               	goto	l1581
  1825  0004D4  C031  F027         	movff	printf@flag,??_printf
  1826  0004D8  0E03               	movlw	3
  1827  0004DA  1627               	andwf	??_printf,f,c
  1828  0004DC  B4D8               	btfsc	status,2,c
  1829  0004DE  D003               	goto	l1581
  1830                           
  1831                           ;doprnt.c: 1346: width--;
  1832  0004E0  0632               	decf	printf@width,f,c
  1833  0004E2  A0D8               	btfss	status,0,c
  1834  0004E4  0633               	decf	printf@width+1,f,c
  1835  0004E6                     l1581:
  1836                           
  1837                           ;doprnt.c: 1381: if(width > c)
  1838  0004E6  0E80               	movlw	128
  1839  0004E8  BE34               	btfsc	printf@c,7,c
  1840  0004EA  0E7F               	movlw	127
  1841  0004EC  6E27               	movwf	??_printf& (0+255),c
  1842  0004EE  5032               	movf	printf@width,w,c
  1843  0004F0  5C34               	subwf	printf@c,w,c
  1844  0004F2  5033               	movf	printf@width+1,w,c
  1845  0004F4  0A80               	xorlw	128
  1846  0004F6  5827               	subwfb	??_printf& (0+255),w,c
  1847  0004F8  B0D8               	btfsc	status,0,c
  1848  0004FA  D007               	goto	l1585
  1849                           
  1850                           ;doprnt.c: 1382: width -= c;
  1851  0004FC  5034               	movf	printf@c,w,c
  1852  0004FE  5E32               	subwf	printf@width,f,c
  1853  000500  0E00               	movlw	0
  1854  000502  BE34               	btfsc	printf@c,7,c
  1855  000504  0EFF               	movlw	255
  1856  000506  5A33               	subwfb	printf@width+1,f,c
  1857  000508  D004               	goto	l1587
  1858  00050A                     l1585:
  1859                           
  1860                           ;doprnt.c: 1383: else
  1861                           ;doprnt.c: 1384: width = 0;
  1862  00050A  0E00               	movlw	0
  1863  00050C  6E33               	movwf	printf@width+1,c
  1864  00050E  0E00               	movlw	0
  1865  000510  6E32               	movwf	printf@width,c
  1866  000512                     l1587:
  1867                           
  1868                           ;doprnt.c: 1387: if(flag & 0x04) {
  1869  000512  A431               	btfss	printf@flag,2,c
  1870  000514  D014               	goto	l1599
  1871                           
  1872                           ;doprnt.c: 1392: if(flag & 0x03)
  1873  000516  C031  F027         	movff	printf@flag,??_printf
  1874  00051A  0E03               	movlw	3
  1875  00051C  1627               	andwf	??_printf,f,c
  1876  00051E  B4D8               	btfsc	status,2,c
  1877  000520  D003               	goto	l1593
  1878                           
  1879                           ;doprnt.c: 1393: (putch('-') );
  1880  000522  0E2D               	movlw	45
  1881  000524  EC1A  F005         	call	_putch
  1882  000528                     l1593:
  1883                           
  1884                           ;doprnt.c: 1415: if(width)
  1885  000528  5032               	movf	printf@width,w,c
  1886  00052A  1033               	iorwf	printf@width+1,w,c
  1887  00052C  B4D8               	btfsc	status,2,c
  1888  00052E  D01E               	goto	l1609
  1889                           
  1890                           ;doprnt.c: 1417: (putch('0') );
  1891                           
  1892                           ;doprnt.c: 1416: do
  1893  000530  0E30               	movlw	48
  1894  000532  EC1A  F005         	call	_putch
  1895                           
  1896                           ;doprnt.c: 1418: while(--width);
  1897  000536  0632               	decf	printf@width,f,c
  1898  000538  A0D8               	btfss	status,0,c
  1899  00053A  0633               	decf	printf@width+1,f,c
  1900  00053C  D7F5               	goto	l1593
  1901  00053E                     l1599:
  1902                           
  1903                           ;doprnt.c: 1422: {
  1904                           ;doprnt.c: 1424: if(width
  1905                           ;doprnt.c: 1428: )
  1906  00053E  5032               	movf	printf@width,w,c
  1907  000540  1033               	iorwf	printf@width+1,w,c
  1908  000542  B4D8               	btfsc	status,2,c
  1909  000544  D00A               	goto	l1605
  1910  000546                     l1601:
  1911                           
  1912                           ;doprnt.c: 1430: (putch(' ') );
  1913  000546  0E20               	movlw	32
  1914  000548  EC1A  F005         	call	_putch
  1915                           
  1916                           ;doprnt.c: 1431: while(--width);
  1917  00054C  0632               	decf	printf@width,f,c
  1918  00054E  A0D8               	btfss	status,0,c
  1919  000550  0633               	decf	printf@width+1,f,c
  1920  000552  5032               	movf	printf@width,w,c
  1921  000554  1033               	iorwf	printf@width+1,w,c
  1922  000556  A4D8               	btfss	status,2,c
  1923  000558  D7F6               	goto	l1601
  1924  00055A                     l1605:
  1925                           
  1926                           ;doprnt.c: 1438: if(flag & 0x03)
  1927  00055A  C031  F027         	movff	printf@flag,??_printf
  1928  00055E  0E03               	movlw	3
  1929  000560  1627               	andwf	??_printf,f,c
  1930  000562  B4D8               	btfsc	status,2,c
  1931  000564  D003               	goto	l1609
  1932                           
  1933                           ;doprnt.c: 1439: (putch('-') );
  1934  000566  0E2D               	movlw	45
  1935  000568  EC1A  F005         	call	_putch
  1936  00056C                     l1609:
  1937                           
  1938                           ;doprnt.c: 1469: }
  1939                           ;doprnt.c: 1472: prec = c;
  1940  00056C  C034  F02E         	movff	printf@c,printf@prec
  1941                           
  1942                           ;doprnt.c: 1474: while(prec--) {
  1943  000570  D050               	goto	l1623
  1944  000572                     l1611:
  1945                           
  1946                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1947  000572  502E               	movf	printf@prec,w,c
  1948  000574  0D02               	mullw	2
  1949  000576  0E8C               	movlw	low _dpowers
  1950  000578  24F3               	addwf	prodl,w,c
  1951  00057A  6EF6               	movwf	tblptrl,c
  1952  00057C  0EFE               	movlw	high _dpowers
  1953  00057E  20F4               	addwfc	prodh,w,c
  1954  000580  6EF7               	movwf	tblptrh,c
  1955  000582                     	if	0	;There are less than 3 active tblptr bytes
  1956  000582                     	endif
  1957  000582  0009               	tblrd		*+
  1958  000584  CFF5 F015          	movff	tablat,___lwdiv@divisor
  1959  000588  000A               	tblrd		*-
  1960  00058A  CFF5 F016          	movff	tablat,___lwdiv@divisor+1
  1961  00058E  C02F  F013         	movff	printf@val,___lwdiv@dividend
  1962  000592  C030  F014         	movff	printf@val+1,___lwdiv@dividend+1
  1963  000596  EC17  F004         	call	___lwdiv	;wreg free
  1964  00059A  C013  F01A         	movff	?___lwdiv,___lwmod@dividend
  1965  00059E  C014  F01B         	movff	?___lwdiv+1,___lwmod@dividend+1
  1966  0005A2  0E00               	movlw	0
  1967  0005A4  6E1D               	movwf	___lwmod@divisor+1,c
  1968  0005A6  0E0A               	movlw	10
  1969  0005A8  6E1C               	movwf	___lwmod@divisor,c
  1970  0005AA  EC8A  F004         	call	___lwmod	;wreg free
  1971  0005AE  501A               	movf	?___lwmod,w,c
  1972  0005B0  0F30               	addlw	48
  1973  0005B2  6E34               	movwf	printf@c,c
  1974                           
  1975                           ;doprnt.c: 1491: break;
  1976  0005B4  D02B               	goto	l1621
  1977  0005B6                     l1613:
  1978                           
  1979                           ;doprnt.c: 1499: {
  1980                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  1981  0005B6  C02F  F013         	movff	printf@val,___lwdiv@dividend
  1982  0005BA  C030  F014         	movff	printf@val+1,___lwdiv@dividend+1
  1983  0005BE  502E               	movf	printf@prec,w,c
  1984  0005C0  0D02               	mullw	2
  1985  0005C2  0E96               	movlw	low _hexpowers
  1986  0005C4  24F3               	addwf	prodl,w,c
  1987  0005C6  6EF6               	movwf	tblptrl,c
  1988  0005C8  0EFE               	movlw	high _hexpowers
  1989  0005CA  20F4               	addwfc	prodh,w,c
  1990  0005CC  6EF7               	movwf	tblptrh,c
  1991  0005CE                     	if	0	;There are less than 3 active tblptr bytes
  1992  0005CE                     	endif
  1993  0005CE  0009               	tblrd		*+
  1994  0005D0  CFF5 F015          	movff	tablat,___lwdiv@divisor
  1995  0005D4  000A               	tblrd		*-
  1996  0005D6  CFF5 F016          	movff	tablat,___lwdiv@divisor+1
  1997  0005DA  EC17  F004         	call	___lwdiv	;wreg free
  1998  0005DE  5013               	movf	?___lwdiv,w,c
  1999  0005E0  0B0F               	andlw	15
  2000  0005E2  6E2B               	movwf	printf@idx,c
  2001                           
  2002                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  2003  0005E4  502B               	movf	printf@idx,w,c
  2004  0005E6  0D01               	mullw	1
  2005  0005E8  0E22               	movlw	low STR_20
  2006  0005EA  24F3               	addwf	prodl,w,c
  2007  0005EC  6EF6               	movwf	tblptrl,c
  2008  0005EE  0EFF               	movlw	high STR_20
  2009  0005F0  20F4               	addwfc	prodh,w,c
  2010  0005F2  6EF7               	movwf	tblptrh,c
  2011  0005F4                     	if	0	;There are less than 3 active tblptr bytes
  2012  0005F4                     	endif
  2013  0005F4  0008               	tblrd		*
  2014  0005F6  CFF5 F034          	movff	tablat,printf@c
  2015                           
  2016                           ;doprnt.c: 1523: }
  2017                           
  2018                           ;doprnt.c: 1508: }
  2019                           ;doprnt.c: 1510: break;
  2020  0005FA  D008               	goto	l1621
  2021  0005FC                     l1619:
  2022  0005FC  5031               	movf	printf@flag,w,c
  2023  0005FE  0B80               	andlw	128
  2024                           
  2025                           ; Switch size 1, requested type "space"
  2026                           ; Number of cases is 2, Range of values is 0 to 128
  2027                           ; switch strategies available:
  2028                           ; Name         Instructions Cycles
  2029                           ; simple_byte            7     4 (average)
  2030                           ;	Chosen strategy is simple_byte
  2031  000600  0A00               	xorlw	0	; case 0
  2032  000602  B4D8               	btfsc	status,2,c
  2033  000604  D7B6               	goto	l1611
  2034  000606  0A80               	xorlw	128	; case 128
  2035  000608  B4D8               	btfsc	status,2,c
  2036  00060A  D7D5               	goto	l1613
  2037  00060C                     l1621:
  2038                           
  2039                           ;doprnt.c: 1524: (putch(c) );
  2040  00060C  5034               	movf	printf@c,w,c
  2041  00060E  EC1A  F005         	call	_putch
  2042  000612                     l1623:
  2043  000612  062E               	decf	printf@prec,f,c
  2044  000614  282E               	incf	printf@prec,w,c
  2045  000616  A4D8               	btfss	status,2,c
  2046  000618  D7F1               	goto	l1619
  2047  00061A                     l1625:
  2048  00061A  C01F  FFF6         	movff	printf@f,tblptrl
  2049  00061E  C020  FFF7         	movff	printf@f+1,tblptrh
  2050  000622  4A1F               	infsnz	printf@f,f,c
  2051  000624  2A20               	incf	printf@f+1,f,c
  2052  000626                     	if	0	;tblptru may be non-zero
  2053  000626                     	endif
  2054  000626                     	if	0	;tblptru may be non-zero
  2055  000626                     	endif
  2056  000626  0008               	tblrd		*
  2057  000628  CFF5 F034          	movff	tablat,printf@c
  2058  00062C  5034               	movf	printf@c,w,c
  2059  00062E  B4D8               	btfsc	status,2,c
  2060  000630  0012               	return	
  2061  000632  D67F               	goto	l1499
  2062  000634                     __end_of_printf:
  2063                           	opt stack 0
  2064                           tblptru	equ	0xFF8
  2065                           tblptrh	equ	0xFF7
  2066                           tblptrl	equ	0xFF6
  2067                           tablat	equ	0xFF5
  2068                           prodh	equ	0xFF4
  2069                           prodl	equ	0xFF3
  2070                           intcon	equ	0xFF2
  2071                           intcon3	equ	0xFF0
  2072                           postinc0	equ	0xFEE
  2073                           wreg	equ	0xFE8
  2074                           indf2	equ	0xFDF
  2075                           postinc2	equ	0xFDE
  2076                           postdec2	equ	0xFDD
  2077                           fsr2h	equ	0xFDA
  2078                           fsr2l	equ	0xFD9
  2079                           status	equ	0xFD8
  2080                           
  2081 ;; *************** function _putch *****************
  2082 ;; Defined at:
  2083 ;;		line 30 in file "../lcd.c"
  2084 ;; Parameters:    Size  Location     Type
  2085 ;;  data            1    wreg     unsigned char 
  2086 ;; Auto vars:     Size  Location     Type
  2087 ;;  data            1   20[COMRAM] unsigned char 
  2088 ;; Return value:  Size  Location     Type
  2089 ;;                  1    wreg      void 
  2090 ;; Registers used:
  2091 ;;		wreg, status,2, status,0, cstack
  2092 ;; Tracked objects:
  2093 ;;		On entry : 0/0
  2094 ;;		On exit  : 0/0
  2095 ;;		Unchanged: 0/0
  2096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2097 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2098 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2099 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2100 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2101 ;;Total ram usage:        1 bytes
  2102 ;; Hardware stack levels used:    1
  2103 ;; Hardware stack levels required when called:    3
  2104 ;; This function calls:
  2105 ;;		_lcdNibble
  2106 ;; This function is called by:
  2107 ;;		_printf
  2108 ;; This function uses a non-reentrant model
  2109 ;;
  2110                           
  2111                           	psect	text2
  2112  000A34                     __ptext2:
  2113                           	opt stack 0
  2114  000A34                     _putch:
  2115                           	opt stack 26
  2116                           
  2117                           ;incstack = 0
  2118                           ;putch@data stored from wreg
  2119  000A34  6E15               	movwf	putch@data,c
  2120                           
  2121                           ;lcd.c: 31: LATDbits.LATD2 = 1;
  2122  000A36  848C               	bsf	3980,2,c	;volatile
  2123                           
  2124                           ;lcd.c: 32: lcdNibble(data);
  2125  000A38  5015               	movf	putch@data,w,c
  2126  000A3A  EC40  F004         	call	_lcdNibble
  2127  000A3E  0012               	return		;funcret
  2128  000A40                     __end_of_putch:
  2129                           	opt stack 0
  2130                           tblptru	equ	0xFF8
  2131                           tblptrh	equ	0xFF7
  2132                           tblptrl	equ	0xFF6
  2133                           tablat	equ	0xFF5
  2134                           prodh	equ	0xFF4
  2135                           prodl	equ	0xFF3
  2136                           intcon	equ	0xFF2
  2137                           intcon3	equ	0xFF0
  2138                           postinc0	equ	0xFEE
  2139                           wreg	equ	0xFE8
  2140                           indf2	equ	0xFDF
  2141                           postinc2	equ	0xFDE
  2142                           postdec2	equ	0xFDD
  2143                           fsr2h	equ	0xFDA
  2144                           fsr2l	equ	0xFD9
  2145                           status	equ	0xFD8
  2146                           
  2147 ;; *************** function _isdigit *****************
  2148 ;; Defined at:
  2149 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  2150 ;; Parameters:    Size  Location     Type
  2151 ;;  c               1    wreg     unsigned char 
  2152 ;; Auto vars:     Size  Location     Type
  2153 ;;  c               1   20[COMRAM] unsigned char 
  2154 ;; Return value:  Size  Location     Type
  2155 ;;		None               void
  2156 ;; Registers used:
  2157 ;;		wreg, status,2, status,0
  2158 ;; Tracked objects:
  2159 ;;		On entry : 0/0
  2160 ;;		On exit  : 0/0
  2161 ;;		Unchanged: 0/0
  2162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2163 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2164 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2165 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2166 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2167 ;;Total ram usage:        3 bytes
  2168 ;; Hardware stack levels used:    1
  2169 ;; Hardware stack levels required when called:    2
  2170 ;; This function calls:
  2171 ;;		Nothing
  2172 ;; This function is called by:
  2173 ;;		_printf
  2174 ;; This function uses a non-reentrant model
  2175 ;;
  2176                           
  2177                           	psect	text3
  2178  000A04                     __ptext3:
  2179                           	opt stack 0
  2180  000A04                     _isdigit:
  2181                           	opt stack 27
  2182                           
  2183                           ;incstack = 0
  2184                           ;isdigit@c stored from wreg
  2185  000A04  6E15               	movwf	isdigit@c,c
  2186  000A06  0E00               	movlw	0
  2187  000A08  6E14               	movwf	_isdigit$539,c
  2188  000A0A  0E3A               	movlw	58
  2189  000A0C  6015               	cpfslt	isdigit@c,c
  2190  000A0E  D005               	goto	l1415
  2191  000A10  0E2F               	movlw	47
  2192  000A12  6415               	cpfsgt	isdigit@c,c
  2193  000A14  D002               	goto	l1415
  2194  000A16  0E01               	movlw	1
  2195  000A18  6E14               	movwf	_isdigit$539,c
  2196  000A1A                     l1415:
  2197  000A1A  C014  F013         	movff	_isdigit$539,??_isdigit
  2198  000A1E  3013               	rrcf	??_isdigit,w,c
  2199  000A20  0012               	return	
  2200  000A22                     __end_of_isdigit:
  2201                           	opt stack 0
  2202                           tblptru	equ	0xFF8
  2203                           tblptrh	equ	0xFF7
  2204                           tblptrl	equ	0xFF6
  2205                           tablat	equ	0xFF5
  2206                           prodh	equ	0xFF4
  2207                           prodl	equ	0xFF3
  2208                           intcon	equ	0xFF2
  2209                           intcon3	equ	0xFF0
  2210                           postinc0	equ	0xFEE
  2211                           wreg	equ	0xFE8
  2212                           indf2	equ	0xFDF
  2213                           postinc2	equ	0xFDE
  2214                           postdec2	equ	0xFDD
  2215                           fsr2h	equ	0xFDA
  2216                           fsr2l	equ	0xFD9
  2217                           status	equ	0xFD8
  2218                           
  2219 ;; *************** function ___wmul *****************
  2220 ;; Defined at:
  2221 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  2222 ;; Parameters:    Size  Location     Type
  2223 ;;  multiplier      2   18[COMRAM] unsigned int 
  2224 ;;  multiplicand    2   20[COMRAM] unsigned int 
  2225 ;; Auto vars:     Size  Location     Type
  2226 ;;  product         2   22[COMRAM] unsigned int 
  2227 ;; Return value:  Size  Location     Type
  2228 ;;                  2   18[COMRAM] unsigned int 
  2229 ;; Registers used:
  2230 ;;		wreg, status,2, status,0, prodl, prodh
  2231 ;; Tracked objects:
  2232 ;;		On entry : 0/0
  2233 ;;		On exit  : 0/0
  2234 ;;		Unchanged: 0/0
  2235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2236 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2237 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2238 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2239 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2240 ;;Total ram usage:        6 bytes
  2241 ;; Hardware stack levels used:    1
  2242 ;; Hardware stack levels required when called:    2
  2243 ;; This function calls:
  2244 ;;		Nothing
  2245 ;; This function is called by:
  2246 ;;		_printf
  2247 ;; This function uses a non-reentrant model
  2248 ;;
  2249                           
  2250                           	psect	text4
  2251  0009B8                     __ptext4:
  2252                           	opt stack 0
  2253  0009B8                     ___wmul:
  2254                           	opt stack 27
  2255                           
  2256                           ;incstack = 0
  2257  0009B8  5013               	movf	___wmul@multiplier,w,c
  2258  0009BA  0215               	mulwf	___wmul@multiplicand,c
  2259  0009BC  CFF3 F017          	movff	prodl,___wmul@product
  2260  0009C0  CFF4 F018          	movff	prodh,___wmul@product+1
  2261  0009C4  5013               	movf	___wmul@multiplier,w,c
  2262  0009C6  0216               	mulwf	___wmul@multiplicand+1,c
  2263  0009C8  50F3               	movf	prodl,w,c
  2264  0009CA  2618               	addwf	___wmul@product+1,f,c
  2265  0009CC  5014               	movf	___wmul@multiplier+1,w,c
  2266  0009CE  0215               	mulwf	___wmul@multiplicand,c
  2267  0009D0  50F3               	movf	prodl,w,c
  2268  0009D2  2618               	addwf	___wmul@product+1,f,c
  2269  0009D4  C017  F013         	movff	___wmul@product,?___wmul
  2270  0009D8  C018  F014         	movff	___wmul@product+1,?___wmul+1
  2271  0009DC  0012               	return	
  2272  0009DE                     __end_of___wmul:
  2273                           	opt stack 0
  2274                           tblptru	equ	0xFF8
  2275                           tblptrh	equ	0xFF7
  2276                           tblptrl	equ	0xFF6
  2277                           tablat	equ	0xFF5
  2278                           prodh	equ	0xFF4
  2279                           prodl	equ	0xFF3
  2280                           intcon	equ	0xFF2
  2281                           intcon3	equ	0xFF0
  2282                           postinc0	equ	0xFEE
  2283                           wreg	equ	0xFE8
  2284                           indf2	equ	0xFDF
  2285                           postinc2	equ	0xFDE
  2286                           postdec2	equ	0xFDD
  2287                           fsr2h	equ	0xFDA
  2288                           fsr2l	equ	0xFD9
  2289                           status	equ	0xFD8
  2290                           
  2291 ;; *************** function ___lwmod *****************
  2292 ;; Defined at:
  2293 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  2294 ;; Parameters:    Size  Location     Type
  2295 ;;  dividend        2   25[COMRAM] unsigned int 
  2296 ;;  divisor         2   27[COMRAM] unsigned int 
  2297 ;; Auto vars:     Size  Location     Type
  2298 ;;  counter         1   29[COMRAM] unsigned char 
  2299 ;; Return value:  Size  Location     Type
  2300 ;;                  2   25[COMRAM] unsigned int 
  2301 ;; Registers used:
  2302 ;;		wreg, status,2, status,0
  2303 ;; Tracked objects:
  2304 ;;		On entry : 0/0
  2305 ;;		On exit  : 0/0
  2306 ;;		Unchanged: 0/0
  2307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2308 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2309 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2310 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2311 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2312 ;;Total ram usage:        5 bytes
  2313 ;; Hardware stack levels used:    1
  2314 ;; Hardware stack levels required when called:    2
  2315 ;; This function calls:
  2316 ;;		Nothing
  2317 ;; This function is called by:
  2318 ;;		_printf
  2319 ;; This function uses a non-reentrant model
  2320 ;;
  2321                           
  2322                           	psect	text5
  2323  000914                     __ptext5:
  2324                           	opt stack 0
  2325  000914                     ___lwmod:
  2326                           	opt stack 27
  2327                           
  2328                           ;incstack = 0
  2329  000914  501C               	movf	___lwmod@divisor,w,c
  2330  000916  101D               	iorwf	___lwmod@divisor+1,w,c
  2331  000918  B4D8               	btfsc	status,2,c
  2332  00091A  D018               	goto	l688
  2333  00091C  0E01               	movlw	1
  2334  00091E  6E1E               	movwf	___lwmod@counter,c
  2335  000920  D004               	goto	l1475
  2336  000922                     l1473:
  2337  000922  90D8               	bcf	status,0,c
  2338  000924  361C               	rlcf	___lwmod@divisor,f,c
  2339  000926  361D               	rlcf	___lwmod@divisor+1,f,c
  2340  000928  2A1E               	incf	___lwmod@counter,f,c
  2341  00092A                     l1475:
  2342  00092A  AE1D               	btfss	___lwmod@divisor+1,7,c
  2343  00092C  D7FA               	goto	l1473
  2344  00092E                     l1477:
  2345  00092E  501C               	movf	___lwmod@divisor,w,c
  2346  000930  5C1A               	subwf	___lwmod@dividend,w,c
  2347  000932  501D               	movf	___lwmod@divisor+1,w,c
  2348  000934  581B               	subwfb	___lwmod@dividend+1,w,c
  2349  000936  A0D8               	btfss	status,0,c
  2350  000938  D004               	goto	l1481
  2351  00093A  501C               	movf	___lwmod@divisor,w,c
  2352  00093C  5E1A               	subwf	___lwmod@dividend,f,c
  2353  00093E  501D               	movf	___lwmod@divisor+1,w,c
  2354  000940  5A1B               	subwfb	___lwmod@dividend+1,f,c
  2355  000942                     l1481:
  2356  000942  90D8               	bcf	status,0,c
  2357  000944  321D               	rrcf	___lwmod@divisor+1,f,c
  2358  000946  321C               	rrcf	___lwmod@divisor,f,c
  2359  000948  2E1E               	decfsz	___lwmod@counter,f,c
  2360  00094A  D7F1               	goto	l1477
  2361  00094C                     l688:
  2362  00094C  C01A  F01A         	movff	___lwmod@dividend,?___lwmod
  2363  000950  C01B  F01B         	movff	___lwmod@dividend+1,?___lwmod+1
  2364  000954  0012               	return		;funcret
  2365  000956                     __end_of___lwmod:
  2366                           	opt stack 0
  2367                           tblptru	equ	0xFF8
  2368                           tblptrh	equ	0xFF7
  2369                           tblptrl	equ	0xFF6
  2370                           tablat	equ	0xFF5
  2371                           prodh	equ	0xFF4
  2372                           prodl	equ	0xFF3
  2373                           intcon	equ	0xFF2
  2374                           intcon3	equ	0xFF0
  2375                           postinc0	equ	0xFEE
  2376                           wreg	equ	0xFE8
  2377                           indf2	equ	0xFDF
  2378                           postinc2	equ	0xFDE
  2379                           postdec2	equ	0xFDD
  2380                           fsr2h	equ	0xFDA
  2381                           fsr2l	equ	0xFD9
  2382                           status	equ	0xFD8
  2383                           
  2384 ;; *************** function ___lwdiv *****************
  2385 ;; Defined at:
  2386 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  2387 ;; Parameters:    Size  Location     Type
  2388 ;;  dividend        2   18[COMRAM] unsigned int 
  2389 ;;  divisor         2   20[COMRAM] unsigned int 
  2390 ;; Auto vars:     Size  Location     Type
  2391 ;;  quotient        2   22[COMRAM] unsigned int 
  2392 ;;  counter         1   24[COMRAM] unsigned char 
  2393 ;; Return value:  Size  Location     Type
  2394 ;;                  2   18[COMRAM] unsigned int 
  2395 ;; Registers used:
  2396 ;;		wreg, status,2, status,0
  2397 ;; Tracked objects:
  2398 ;;		On entry : 0/0
  2399 ;;		On exit  : 0/0
  2400 ;;		Unchanged: 0/0
  2401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2402 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2403 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2404 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2405 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2406 ;;Total ram usage:        7 bytes
  2407 ;; Hardware stack levels used:    1
  2408 ;; Hardware stack levels required when called:    2
  2409 ;; This function calls:
  2410 ;;		Nothing
  2411 ;; This function is called by:
  2412 ;;		_printf
  2413 ;; This function uses a non-reentrant model
  2414 ;;
  2415                           
  2416                           	psect	text6
  2417  00082E                     __ptext6:
  2418                           	opt stack 0
  2419  00082E                     ___lwdiv:
  2420                           	opt stack 27
  2421                           
  2422                           ;incstack = 0
  2423  00082E  0E00               	movlw	0
  2424  000830  6E18               	movwf	___lwdiv@quotient+1,c
  2425  000832  0E00               	movlw	0
  2426  000834  6E17               	movwf	___lwdiv@quotient,c
  2427  000836  5015               	movf	___lwdiv@divisor,w,c
  2428  000838  1016               	iorwf	___lwdiv@divisor+1,w,c
  2429  00083A  B4D8               	btfsc	status,2,c
  2430  00083C  D01C               	goto	l678
  2431  00083E  0E01               	movlw	1
  2432  000840  6E19               	movwf	___lwdiv@counter,c
  2433  000842  D004               	goto	l1455
  2434  000844                     l1453:
  2435  000844  90D8               	bcf	status,0,c
  2436  000846  3615               	rlcf	___lwdiv@divisor,f,c
  2437  000848  3616               	rlcf	___lwdiv@divisor+1,f,c
  2438  00084A  2A19               	incf	___lwdiv@counter,f,c
  2439  00084C                     l1455:
  2440  00084C  AE16               	btfss	___lwdiv@divisor+1,7,c
  2441  00084E  D7FA               	goto	l1453
  2442  000850                     l1457:
  2443  000850  90D8               	bcf	status,0,c
  2444  000852  3617               	rlcf	___lwdiv@quotient,f,c
  2445  000854  3618               	rlcf	___lwdiv@quotient+1,f,c
  2446  000856  5015               	movf	___lwdiv@divisor,w,c
  2447  000858  5C13               	subwf	___lwdiv@dividend,w,c
  2448  00085A  5016               	movf	___lwdiv@divisor+1,w,c
  2449  00085C  5814               	subwfb	___lwdiv@dividend+1,w,c
  2450  00085E  A0D8               	btfss	status,0,c
  2451  000860  D005               	goto	l1465
  2452  000862  5015               	movf	___lwdiv@divisor,w,c
  2453  000864  5E13               	subwf	___lwdiv@dividend,f,c
  2454  000866  5016               	movf	___lwdiv@divisor+1,w,c
  2455  000868  5A14               	subwfb	___lwdiv@dividend+1,f,c
  2456  00086A  8017               	bsf	___lwdiv@quotient,0,c
  2457  00086C                     l1465:
  2458  00086C  90D8               	bcf	status,0,c
  2459  00086E  3216               	rrcf	___lwdiv@divisor+1,f,c
  2460  000870  3215               	rrcf	___lwdiv@divisor,f,c
  2461  000872  2E19               	decfsz	___lwdiv@counter,f,c
  2462  000874  D7ED               	goto	l1457
  2463  000876                     l678:
  2464  000876  C017  F013         	movff	___lwdiv@quotient,?___lwdiv
  2465  00087A  C018  F014         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2466  00087E  0012               	return		;funcret
  2467  000880                     __end_of___lwdiv:
  2468                           	opt stack 0
  2469                           tblptru	equ	0xFF8
  2470                           tblptrh	equ	0xFF7
  2471                           tblptrl	equ	0xFF6
  2472                           tablat	equ	0xFF5
  2473                           prodh	equ	0xFF4
  2474                           prodl	equ	0xFF3
  2475                           intcon	equ	0xFF2
  2476                           intcon3	equ	0xFF0
  2477                           postinc0	equ	0xFEE
  2478                           wreg	equ	0xFE8
  2479                           indf2	equ	0xFDF
  2480                           postinc2	equ	0xFDE
  2481                           postdec2	equ	0xFDD
  2482                           fsr2h	equ	0xFDA
  2483                           fsr2l	equ	0xFD9
  2484                           status	equ	0xFD8
  2485                           
  2486 ;; *************** function _initLCD *****************
  2487 ;; Defined at:
  2488 ;;		line 14 in file "../lcd.c"
  2489 ;; Parameters:    Size  Location     Type
  2490 ;;		None
  2491 ;; Auto vars:     Size  Location     Type
  2492 ;;		None
  2493 ;; Return value:  Size  Location     Type
  2494 ;;                  1    wreg      void 
  2495 ;; Registers used:
  2496 ;;		wreg, status,2, status,0, cstack
  2497 ;; Tracked objects:
  2498 ;;		On entry : 0/0
  2499 ;;		On exit  : 0/0
  2500 ;;		Unchanged: 0/0
  2501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2502 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2503 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2504 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2505 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2506 ;;Total ram usage:        1 bytes
  2507 ;; Hardware stack levels used:    1
  2508 ;; Hardware stack levels required when called:    4
  2509 ;; This function calls:
  2510 ;;		_lcdInst
  2511 ;; This function is called by:
  2512 ;;		_main
  2513 ;; This function uses a non-reentrant model
  2514 ;;
  2515                           
  2516                           	psect	text7
  2517  0008CE                     __ptext7:
  2518                           	opt stack 0
  2519  0008CE                     _initLCD:
  2520                           	opt stack 26
  2521                           
  2522                           ;lcd.c: 15: _delay((unsigned long)((15)*(10000000/4000.0)));
  2523                           
  2524                           ;incstack = 0
  2525  0008CE  0E31               	movlw	49
  2526  0008D0  6E16               	movwf	??_initLCD& (0+255),c
  2527  0008D2  0EB2               	movlw	178
  2528  0008D4                     u1407:
  2529  0008D4  2EE8               	decfsz	wreg,f,c
  2530  0008D6  D7FE               	bra	u1407
  2531  0008D8  2E16               	decfsz	??_initLCD& (0+255),f,c
  2532  0008DA  D7FC               	bra	u1407
  2533  0008DC  D000               	nop2	
  2534                           
  2535                           ;lcd.c: 16: lcdInst(0b00110011);
  2536  0008DE  0E33               	movlw	51
  2537  0008E0  EC20  F005         	call	_lcdInst
  2538                           
  2539                           ;lcd.c: 17: lcdInst(0b00110010);
  2540  0008E4  0E32               	movlw	50
  2541  0008E6  EC20  F005         	call	_lcdInst
  2542                           
  2543                           ;lcd.c: 18: lcdInst(0b00101000);
  2544  0008EA  0E28               	movlw	40
  2545  0008EC  EC20  F005         	call	_lcdInst
  2546                           
  2547                           ;lcd.c: 19: lcdInst(0b00001111);
  2548  0008F0  0E0F               	movlw	15
  2549  0008F2  EC20  F005         	call	_lcdInst
  2550                           
  2551                           ;lcd.c: 20: lcdInst(0b00000110);
  2552  0008F6  0E06               	movlw	6
  2553  0008F8  EC20  F005         	call	_lcdInst
  2554                           
  2555                           ;lcd.c: 21: lcdInst(0b00000001);
  2556  0008FC  0E01               	movlw	1
  2557  0008FE  EC20  F005         	call	_lcdInst
  2558                           
  2559                           ;lcd.c: 22: _delay((unsigned long)((15)*(10000000/4000.0)));
  2560  000902  0E31               	movlw	49
  2561  000904  6E16               	movwf	??_initLCD& (0+255),c
  2562  000906  0EB2               	movlw	178
  2563  000908                     u1417:
  2564  000908  2EE8               	decfsz	wreg,f,c
  2565  00090A  D7FE               	bra	u1417
  2566  00090C  2E16               	decfsz	??_initLCD& (0+255),f,c
  2567  00090E  D7FC               	bra	u1417
  2568  000910  D000               	nop2	
  2569  000912  0012               	return		;funcret
  2570  000914                     __end_of_initLCD:
  2571                           	opt stack 0
  2572                           tblptru	equ	0xFF8
  2573                           tblptrh	equ	0xFF7
  2574                           tblptrl	equ	0xFF6
  2575                           tablat	equ	0xFF5
  2576                           prodh	equ	0xFF4
  2577                           prodl	equ	0xFF3
  2578                           intcon	equ	0xFF2
  2579                           intcon3	equ	0xFF0
  2580                           postinc0	equ	0xFEE
  2581                           wreg	equ	0xFE8
  2582                           indf2	equ	0xFDF
  2583                           postinc2	equ	0xFDE
  2584                           postdec2	equ	0xFDD
  2585                           fsr2h	equ	0xFDA
  2586                           fsr2l	equ	0xFD9
  2587                           status	equ	0xFD8
  2588                           
  2589 ;; *************** function _lcdInst *****************
  2590 ;; Defined at:
  2591 ;;		line 25 in file "../lcd.c"
  2592 ;; Parameters:    Size  Location     Type
  2593 ;;  data            1    wreg     unsigned char 
  2594 ;; Auto vars:     Size  Location     Type
  2595 ;;  data            1   20[COMRAM] unsigned char 
  2596 ;; Return value:  Size  Location     Type
  2597 ;;                  1    wreg      void 
  2598 ;; Registers used:
  2599 ;;		wreg, status,2, status,0, cstack
  2600 ;; Tracked objects:
  2601 ;;		On entry : 0/0
  2602 ;;		On exit  : 0/0
  2603 ;;		Unchanged: 0/0
  2604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2605 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2606 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2607 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2608 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2609 ;;Total ram usage:        1 bytes
  2610 ;; Hardware stack levels used:    1
  2611 ;; Hardware stack levels required when called:    3
  2612 ;; This function calls:
  2613 ;;		_lcdNibble
  2614 ;; This function is called by:
  2615 ;;		_initLCD
  2616 ;;		_main
  2617 ;; This function uses a non-reentrant model
  2618 ;;
  2619                           
  2620                           	psect	text8
  2621  000A40                     __ptext8:
  2622                           	opt stack 0
  2623  000A40                     _lcdInst:
  2624                           	opt stack 27
  2625                           
  2626                           ;incstack = 0
  2627                           ;lcdInst@data stored from wreg
  2628  000A40  6E15               	movwf	lcdInst@data,c
  2629                           
  2630                           ;lcd.c: 26: LATDbits.LATD2 = 0;
  2631  000A42  948C               	bcf	3980,2,c	;volatile
  2632                           
  2633                           ;lcd.c: 27: lcdNibble(data);
  2634  000A44  5015               	movf	lcdInst@data,w,c
  2635  000A46  EC40  F004         	call	_lcdNibble
  2636  000A4A  0012               	return		;funcret
  2637  000A4C                     __end_of_lcdInst:
  2638                           	opt stack 0
  2639                           tblptru	equ	0xFF8
  2640                           tblptrh	equ	0xFF7
  2641                           tblptrl	equ	0xFF6
  2642                           tablat	equ	0xFF5
  2643                           prodh	equ	0xFF4
  2644                           prodl	equ	0xFF3
  2645                           intcon	equ	0xFF2
  2646                           intcon3	equ	0xFF0
  2647                           postinc0	equ	0xFEE
  2648                           wreg	equ	0xFE8
  2649                           indf2	equ	0xFDF
  2650                           postinc2	equ	0xFDE
  2651                           postdec2	equ	0xFDD
  2652                           fsr2h	equ	0xFDA
  2653                           fsr2l	equ	0xFD9
  2654                           status	equ	0xFD8
  2655                           
  2656 ;; *************** function _lcdNibble *****************
  2657 ;; Defined at:
  2658 ;;		line 35 in file "../lcd.c"
  2659 ;; Parameters:    Size  Location     Type
  2660 ;;  data            1    wreg     unsigned char 
  2661 ;; Auto vars:     Size  Location     Type
  2662 ;;  data            1   19[COMRAM] unsigned char 
  2663 ;;  temp            1   18[COMRAM] unsigned char 
  2664 ;; Return value:  Size  Location     Type
  2665 ;;                  1    wreg      void 
  2666 ;; Registers used:
  2667 ;;		wreg, status,2, status,0
  2668 ;; Tracked objects:
  2669 ;;		On entry : 0/0
  2670 ;;		On exit  : 0/0
  2671 ;;		Unchanged: 0/0
  2672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2673 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2674 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2675 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2676 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2677 ;;Total ram usage:        2 bytes
  2678 ;; Hardware stack levels used:    1
  2679 ;; Hardware stack levels required when called:    2
  2680 ;; This function calls:
  2681 ;;		Nothing
  2682 ;; This function is called by:
  2683 ;;		_lcdInst
  2684 ;;		_putch
  2685 ;; This function uses a non-reentrant model
  2686 ;;
  2687                           
  2688                           	psect	text9
  2689  000880                     __ptext9:
  2690                           	opt stack 0
  2691  000880                     _lcdNibble:
  2692                           	opt stack 26
  2693                           
  2694                           ;incstack = 0
  2695                           ;lcdNibble@data stored from wreg
  2696  000880  6E14               	movwf	lcdNibble@data,c
  2697                           
  2698                           ;lcd.c: 37: char temp = data & 0xF0;
  2699  000882  5014               	movf	lcdNibble@data,w,c
  2700  000884  0BF0               	andlw	240
  2701  000886  6E13               	movwf	lcdNibble@temp,c
  2702                           
  2703                           ;lcd.c: 38: LATD = LATD & 0x0F;
  2704  000888  508C               	movf	3980,w,c	;volatile
  2705  00088A  0B0F               	andlw	15
  2706  00088C  6E8C               	movwf	3980,c	;volatile
  2707                           
  2708                           ;lcd.c: 39: LATD = temp | LATD;
  2709  00088E  5013               	movf	lcdNibble@temp,w,c
  2710  000890  108C               	iorwf	3980,w,c	;volatile
  2711  000892  6E8C               	movwf	3980,c	;volatile
  2712                           
  2713                           ;lcd.c: 41: LATDbits.LATD3 = 0;
  2714  000894  968C               	bcf	3980,3,c	;volatile
  2715                           
  2716                           ;lcd.c: 42: _delay((unsigned long)((30)*(10000000/4000000.0)));
  2717  000896  0E19               	movlw	25
  2718  000898                     u1427:
  2719  000898  2EE8               	decfsz	wreg,f,c
  2720  00089A  D7FE               	bra	u1427
  2721                           
  2722                           ;lcd.c: 43: LATDbits.LATD3 = 1;
  2723  00089C  868C               	bsf	3980,3,c	;volatile
  2724                           
  2725                           ;lcd.c: 44: _delay((unsigned long)((30)*(10000000/4000000.0)));
  2726  00089E  0E19               	movlw	25
  2727  0008A0                     u1437:
  2728  0008A0  2EE8               	decfsz	wreg,f,c
  2729  0008A2  D7FE               	bra	u1437
  2730                           
  2731                           ;lcd.c: 46: data = data << 4;
  2732  0008A4  3814               	swapf	lcdNibble@data,w,c
  2733  0008A6  0BF0               	andlw	240
  2734  0008A8  6E14               	movwf	lcdNibble@data,c
  2735                           
  2736                           ;lcd.c: 48: temp = data & 0xF0;
  2737  0008AA  5014               	movf	lcdNibble@data,w,c
  2738  0008AC  0BF0               	andlw	240
  2739  0008AE  6E13               	movwf	lcdNibble@temp,c
  2740                           
  2741                           ;lcd.c: 49: LATD = LATD & 0x0F;
  2742  0008B0  508C               	movf	3980,w,c	;volatile
  2743  0008B2  0B0F               	andlw	15
  2744  0008B4  6E8C               	movwf	3980,c	;volatile
  2745                           
  2746                           ;lcd.c: 50: LATD = temp | LATD;
  2747  0008B6  5013               	movf	lcdNibble@temp,w,c
  2748  0008B8  108C               	iorwf	3980,w,c	;volatile
  2749  0008BA  6E8C               	movwf	3980,c	;volatile
  2750                           
  2751                           ;lcd.c: 52: LATDbits.LATD3 = 0;
  2752  0008BC  968C               	bcf	3980,3,c	;volatile
  2753                           
  2754                           ;lcd.c: 53: _delay((unsigned long)((30)*(10000000/4000000.0)));
  2755  0008BE  0E19               	movlw	25
  2756  0008C0                     u1447:
  2757  0008C0  2EE8               	decfsz	wreg,f,c
  2758  0008C2  D7FE               	bra	u1447
  2759                           
  2760                           ;lcd.c: 54: LATDbits.LATD3 = 1;
  2761  0008C4  868C               	bsf	3980,3,c	;volatile
  2762                           
  2763                           ;lcd.c: 55: _delay((unsigned long)((30)*(10000000/4000000.0)));
  2764  0008C6  0E19               	movlw	25
  2765  0008C8                     u1457:
  2766  0008C8  2EE8               	decfsz	wreg,f,c
  2767  0008CA  D7FE               	bra	u1457
  2768  0008CC  0012               	return		;funcret
  2769  0008CE                     __end_of_lcdNibble:
  2770                           	opt stack 0
  2771                           tblptru	equ	0xFF8
  2772                           tblptrh	equ	0xFF7
  2773                           tblptrl	equ	0xFF6
  2774                           tablat	equ	0xFF5
  2775                           prodh	equ	0xFF4
  2776                           prodl	equ	0xFF3
  2777                           intcon	equ	0xFF2
  2778                           intcon3	equ	0xFF0
  2779                           postinc0	equ	0xFEE
  2780                           wreg	equ	0xFE8
  2781                           indf2	equ	0xFDF
  2782                           postinc2	equ	0xFDE
  2783                           postdec2	equ	0xFDD
  2784                           fsr2h	equ	0xFDA
  2785                           fsr2l	equ	0xFD9
  2786                           status	equ	0xFD8
  2787                           
  2788 ;; *************** function _I2C_Master_Write *****************
  2789 ;; Defined at:
  2790 ;;		line 47 in file "../I2C.c"
  2791 ;; Parameters:    Size  Location     Type
  2792 ;;  d               2   19[COMRAM] unsigned int 
  2793 ;; Auto vars:     Size  Location     Type
  2794 ;;		None
  2795 ;; Return value:  Size  Location     Type
  2796 ;;                  1    wreg      void 
  2797 ;; Registers used:
  2798 ;;		wreg, status,2, status,0, cstack
  2799 ;; Tracked objects:
  2800 ;;		On entry : 0/0
  2801 ;;		On exit  : 0/0
  2802 ;;		Unchanged: 0/0
  2803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2804 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2805 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2806 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2807 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2808 ;;Total ram usage:        2 bytes
  2809 ;; Hardware stack levels used:    1
  2810 ;; Hardware stack levels required when called:    3
  2811 ;; This function calls:
  2812 ;;		_I2C_Master_Wait
  2813 ;; This function is called by:
  2814 ;;		_main
  2815 ;; This function uses a non-reentrant model
  2816 ;;
  2817                           
  2818                           	psect	text10
  2819  000A4C                     __ptext10:
  2820                           	opt stack 0
  2821  000A4C                     _I2C_Master_Write:
  2822                           	opt stack 27
  2823                           
  2824                           ;I2C.c: 49: I2C_Master_Wait();
  2825                           
  2826                           ;incstack = 0
  2827  000A4C  EC11  F005         	call	_I2C_Master_Wait	;wreg free
  2828                           
  2829                           ;I2C.c: 50: SSPBUF = d;
  2830  000A50  C014  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  2831  000A54  0012               	return		;funcret
  2832  000A56                     __end_of_I2C_Master_Write:
  2833                           	opt stack 0
  2834                           tblptru	equ	0xFF8
  2835                           tblptrh	equ	0xFF7
  2836                           tblptrl	equ	0xFF6
  2837                           tablat	equ	0xFF5
  2838                           prodh	equ	0xFF4
  2839                           prodl	equ	0xFF3
  2840                           intcon	equ	0xFF2
  2841                           intcon3	equ	0xFF0
  2842                           postinc0	equ	0xFEE
  2843                           wreg	equ	0xFE8
  2844                           indf2	equ	0xFDF
  2845                           postinc2	equ	0xFDE
  2846                           postdec2	equ	0xFDD
  2847                           fsr2h	equ	0xFDA
  2848                           fsr2l	equ	0xFD9
  2849                           status	equ	0xFD8
  2850                           
  2851 ;; *************** function _I2C_Master_Stop *****************
  2852 ;; Defined at:
  2853 ;;		line 41 in file "../I2C.c"
  2854 ;; Parameters:    Size  Location     Type
  2855 ;;		None
  2856 ;; Auto vars:     Size  Location     Type
  2857 ;;		None
  2858 ;; Return value:  Size  Location     Type
  2859 ;;                  1    wreg      void 
  2860 ;; Registers used:
  2861 ;;		wreg, status,2, status,0, cstack
  2862 ;; Tracked objects:
  2863 ;;		On entry : 0/0
  2864 ;;		On exit  : 0/0
  2865 ;;		Unchanged: 0/0
  2866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2867 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2868 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2869 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2870 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2871 ;;Total ram usage:        0 bytes
  2872 ;; Hardware stack levels used:    1
  2873 ;; Hardware stack levels required when called:    3
  2874 ;; This function calls:
  2875 ;;		_I2C_Master_Wait
  2876 ;; This function is called by:
  2877 ;;		_main
  2878 ;; This function uses a non-reentrant model
  2879 ;;
  2880                           
  2881                           	psect	text11
  2882  000A56                     __ptext11:
  2883                           	opt stack 0
  2884  000A56                     _I2C_Master_Stop:
  2885                           	opt stack 27
  2886                           
  2887                           ;I2C.c: 43: I2C_Master_Wait();
  2888                           
  2889                           ;incstack = 0
  2890  000A56  EC11  F005         	call	_I2C_Master_Wait	;wreg free
  2891                           
  2892                           ;I2C.c: 44: PEN = 1;
  2893  000A5A  84C5               	bsf	4037,2,c	;volatile
  2894  000A5C  0012               	return		;funcret
  2895  000A5E                     __end_of_I2C_Master_Stop:
  2896                           	opt stack 0
  2897                           tblptru	equ	0xFF8
  2898                           tblptrh	equ	0xFF7
  2899                           tblptrl	equ	0xFF6
  2900                           tablat	equ	0xFF5
  2901                           prodh	equ	0xFF4
  2902                           prodl	equ	0xFF3
  2903                           intcon	equ	0xFF2
  2904                           intcon3	equ	0xFF0
  2905                           postinc0	equ	0xFEE
  2906                           wreg	equ	0xFE8
  2907                           indf2	equ	0xFDF
  2908                           postinc2	equ	0xFDE
  2909                           postdec2	equ	0xFDD
  2910                           fsr2h	equ	0xFDA
  2911                           fsr2l	equ	0xFD9
  2912                           status	equ	0xFD8
  2913                           
  2914 ;; *************** function _I2C_Master_Start *****************
  2915 ;; Defined at:
  2916 ;;		line 29 in file "../I2C.c"
  2917 ;; Parameters:    Size  Location     Type
  2918 ;;		None
  2919 ;; Auto vars:     Size  Location     Type
  2920 ;;		None
  2921 ;; Return value:  Size  Location     Type
  2922 ;;                  1    wreg      void 
  2923 ;; Registers used:
  2924 ;;		wreg, status,2, status,0, cstack
  2925 ;; Tracked objects:
  2926 ;;		On entry : 0/0
  2927 ;;		On exit  : 0/0
  2928 ;;		Unchanged: 0/0
  2929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2931 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2932 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2933 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2934 ;;Total ram usage:        0 bytes
  2935 ;; Hardware stack levels used:    1
  2936 ;; Hardware stack levels required when called:    3
  2937 ;; This function calls:
  2938 ;;		_I2C_Master_Wait
  2939 ;; This function is called by:
  2940 ;;		_main
  2941 ;; This function uses a non-reentrant model
  2942 ;;
  2943                           
  2944                           	psect	text12
  2945  000A5E                     __ptext12:
  2946                           	opt stack 0
  2947  000A5E                     _I2C_Master_Start:
  2948                           	opt stack 27
  2949                           
  2950                           ;I2C.c: 31: I2C_Master_Wait();
  2951                           
  2952                           ;incstack = 0
  2953  000A5E  EC11  F005         	call	_I2C_Master_Wait	;wreg free
  2954                           
  2955                           ;I2C.c: 32: SEN = 1;
  2956  000A62  80C5               	bsf	4037,0,c	;volatile
  2957  000A64  0012               	return		;funcret
  2958  000A66                     __end_of_I2C_Master_Start:
  2959                           	opt stack 0
  2960                           tblptru	equ	0xFF8
  2961                           tblptrh	equ	0xFF7
  2962                           tblptrl	equ	0xFF6
  2963                           tablat	equ	0xFF5
  2964                           prodh	equ	0xFF4
  2965                           prodl	equ	0xFF3
  2966                           intcon	equ	0xFF2
  2967                           intcon3	equ	0xFF0
  2968                           postinc0	equ	0xFEE
  2969                           wreg	equ	0xFE8
  2970                           indf2	equ	0xFDF
  2971                           postinc2	equ	0xFDE
  2972                           postdec2	equ	0xFDD
  2973                           fsr2h	equ	0xFDA
  2974                           fsr2l	equ	0xFD9
  2975                           status	equ	0xFD8
  2976                           
  2977 ;; *************** function _I2C_Master_Read *****************
  2978 ;; Defined at:
  2979 ;;		line 53 in file "../I2C.c"
  2980 ;; Parameters:    Size  Location     Type
  2981 ;;  a               1    wreg     unsigned char 
  2982 ;; Auto vars:     Size  Location     Type
  2983 ;;  a               1   19[COMRAM] unsigned char 
  2984 ;;  temp            1   20[COMRAM] unsigned char 
  2985 ;; Return value:  Size  Location     Type
  2986 ;;                  1    wreg      unsigned char 
  2987 ;; Registers used:
  2988 ;;		wreg, status,2, status,0, cstack
  2989 ;; Tracked objects:
  2990 ;;		On entry : 0/0
  2991 ;;		On exit  : 0/0
  2992 ;;		Unchanged: 0/0
  2993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2994 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2995 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2996 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2997 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2998 ;;Total ram usage:        2 bytes
  2999 ;; Hardware stack levels used:    1
  3000 ;; Hardware stack levels required when called:    3
  3001 ;; This function calls:
  3002 ;;		_I2C_Master_Wait
  3003 ;; This function is called by:
  3004 ;;		_main
  3005 ;; This function uses a non-reentrant model
  3006 ;;
  3007                           
  3008                           	psect	text13
  3009  0009DE                     __ptext13:
  3010                           	opt stack 0
  3011  0009DE                     _I2C_Master_Read:
  3012                           	opt stack 27
  3013                           
  3014                           ;incstack = 0
  3015                           ;I2C_Master_Read@a stored from wreg
  3016  0009DE  6E14               	movwf	I2C_Master_Read@a,c
  3017                           
  3018                           ;I2C.c: 55: unsigned char temp;
  3019                           ;I2C.c: 56: I2C_Master_Wait();
  3020  0009E0  EC11  F005         	call	_I2C_Master_Wait	;wreg free
  3021                           
  3022                           ;I2C.c: 57: RCEN = 1;
  3023  0009E4  86C5               	bsf	4037,3,c	;volatile
  3024                           
  3025                           ;I2C.c: 58: I2C_Master_Wait();
  3026  0009E6  EC11  F005         	call	_I2C_Master_Wait	;wreg free
  3027                           
  3028                           ;I2C.c: 59: temp = SSPBUF;
  3029  0009EA  CFC9 F015          	movff	4041,I2C_Master_Read@temp	;volatile
  3030                           
  3031                           ;I2C.c: 60: I2C_Master_Wait();
  3032  0009EE  EC11  F005         	call	_I2C_Master_Wait	;wreg free
  3033                           
  3034                           ;I2C.c: 61: ACKDT = (a)?0:1;
  3035  0009F2  5014               	movf	I2C_Master_Read@a,w,c
  3036  0009F4  A4D8               	btfss	status,2,c
  3037  0009F6  D002               	goto	u150
  3038  0009F8  8AC5               	bsf	4037,5,c	;volatile
  3039  0009FA  D001               	goto	l1025
  3040  0009FC                     u150:
  3041  0009FC  9AC5               	bcf	4037,5,c	;volatile
  3042  0009FE                     l1025:
  3043                           
  3044                           ;I2C.c: 62: ACKEN = 1;
  3045  0009FE  88C5               	bsf	4037,4,c	;volatile
  3046                           
  3047                           ;I2C.c: 63: return temp;
  3048  000A00  5015               	movf	I2C_Master_Read@temp,w,c
  3049  000A02  0012               	return	
  3050  000A04                     __end_of_I2C_Master_Read:
  3051                           	opt stack 0
  3052                           tblptru	equ	0xFF8
  3053                           tblptrh	equ	0xFF7
  3054                           tblptrl	equ	0xFF6
  3055                           tablat	equ	0xFF5
  3056                           prodh	equ	0xFF4
  3057                           prodl	equ	0xFF3
  3058                           intcon	equ	0xFF2
  3059                           intcon3	equ	0xFF0
  3060                           postinc0	equ	0xFEE
  3061                           wreg	equ	0xFE8
  3062                           indf2	equ	0xFDF
  3063                           postinc2	equ	0xFDE
  3064                           postdec2	equ	0xFDD
  3065                           fsr2h	equ	0xFDA
  3066                           fsr2l	equ	0xFD9
  3067                           status	equ	0xFD8
  3068                           
  3069 ;; *************** function _I2C_Master_Wait *****************
  3070 ;; Defined at:
  3071 ;;		line 24 in file "../I2C.c"
  3072 ;; Parameters:    Size  Location     Type
  3073 ;;		None
  3074 ;; Auto vars:     Size  Location     Type
  3075 ;;		None
  3076 ;; Return value:  Size  Location     Type
  3077 ;;                  1    wreg      void 
  3078 ;; Registers used:
  3079 ;;		wreg, status,2, status,0
  3080 ;; Tracked objects:
  3081 ;;		On entry : 0/0
  3082 ;;		On exit  : 0/0
  3083 ;;		Unchanged: 0/0
  3084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3086 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3087 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3088 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3089 ;;Total ram usage:        1 bytes
  3090 ;; Hardware stack levels used:    1
  3091 ;; Hardware stack levels required when called:    2
  3092 ;; This function calls:
  3093 ;;		Nothing
  3094 ;; This function is called by:
  3095 ;;		_I2C_Master_Start
  3096 ;;		_I2C_Master_Stop
  3097 ;;		_I2C_Master_Write
  3098 ;;		_I2C_Master_Read
  3099 ;;		_I2C_Master_RepeatedStart
  3100 ;; This function uses a non-reentrant model
  3101 ;;
  3102                           
  3103                           	psect	text14
  3104  000A22                     __ptext14:
  3105                           	opt stack 0
  3106  000A22                     _I2C_Master_Wait:
  3107                           	opt stack 27
  3108  000A22                     l34:
  3109  000A22  B4C7               	btfsc	4039,2,c	;volatile
  3110  000A24  D7FE               	goto	l34
  3111  000A26  CFC5 F013          	movff	4037,??_I2C_Master_Wait	;volatile
  3112  000A2A  0E1F               	movlw	31
  3113  000A2C  1613               	andwf	??_I2C_Master_Wait,f,c
  3114  000A2E  B4D8               	btfsc	status,2,c
  3115  000A30  0012               	return	
  3116  000A32  D7F7               	goto	l34
  3117  000A34                     __end_of_I2C_Master_Wait:
  3118                           	opt stack 0
  3119                           tblptru	equ	0xFF8
  3120                           tblptrh	equ	0xFF7
  3121                           tblptrl	equ	0xFF6
  3122                           tablat	equ	0xFF5
  3123                           prodh	equ	0xFF4
  3124                           prodl	equ	0xFF3
  3125                           intcon	equ	0xFF2
  3126                           intcon3	equ	0xFF0
  3127                           postinc0	equ	0xFEE
  3128                           wreg	equ	0xFE8
  3129                           indf2	equ	0xFDF
  3130                           postinc2	equ	0xFDE
  3131                           postdec2	equ	0xFDD
  3132                           fsr2h	equ	0xFDA
  3133                           fsr2l	equ	0xFD9
  3134                           status	equ	0xFD8
  3135                           
  3136 ;; *************** function _I2C_Master_Init *****************
  3137 ;; Defined at:
  3138 ;;		line 13 in file "../I2C.c"
  3139 ;; Parameters:    Size  Location     Type
  3140 ;;  c               4   31[COMRAM] const unsigned long 
  3141 ;; Auto vars:     Size  Location     Type
  3142 ;;		None
  3143 ;; Return value:  Size  Location     Type
  3144 ;;                  1    wreg      void 
  3145 ;; Registers used:
  3146 ;;		wreg, status,2, status,0, cstack
  3147 ;; Tracked objects:
  3148 ;;		On entry : 0/0
  3149 ;;		On exit  : 0/0
  3150 ;;		Unchanged: 0/0
  3151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3152 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3153 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3154 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3155 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3156 ;;Total ram usage:        8 bytes
  3157 ;; Hardware stack levels used:    1
  3158 ;; Hardware stack levels required when called:    3
  3159 ;; This function calls:
  3160 ;;		___lldiv
  3161 ;; This function is called by:
  3162 ;;		_main
  3163 ;; This function uses a non-reentrant model
  3164 ;;
  3165                           
  3166                           	psect	text15
  3167  0007D4                     __ptext15:
  3168                           	opt stack 0
  3169  0007D4                     _I2C_Master_Init:
  3170                           	opt stack 27
  3171                           
  3172                           ;I2C.c: 16: SSPSTAT = 0b00000000;
  3173                           
  3174                           ;incstack = 0
  3175  0007D4  0E00               	movlw	0
  3176  0007D6  6EC7               	movwf	4039,c	;volatile
  3177                           
  3178                           ;I2C.c: 17: SSPCON1 = 0b00101000;
  3179  0007D8  0E28               	movlw	40
  3180  0007DA  6EC6               	movwf	4038,c	;volatile
  3181                           
  3182                           ;I2C.c: 18: SSPCON2 = 0b00000000;
  3183  0007DC  0E00               	movlw	0
  3184  0007DE  6EC5               	movwf	4037,c	;volatile
  3185                           
  3186                           ;I2C.c: 19: SSPADD = (10000000/(4*c))-1;
  3187  0007E0  0E80               	movlw	128
  3188  0007E2  6E13               	movwf	___lldiv@dividend,c
  3189  0007E4  0E96               	movlw	150
  3190  0007E6  6E14               	movwf	___lldiv@dividend+1,c
  3191  0007E8  0E98               	movlw	152
  3192  0007EA  6E15               	movwf	___lldiv@dividend+2,c
  3193  0007EC  0E00               	movlw	0
  3194  0007EE  6E16               	movwf	___lldiv@dividend+3,c
  3195  0007F0  C020  F024         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  3196  0007F4  C021  F025         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  3197  0007F8  C022  F026         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  3198  0007FC  C023  F027         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  3199  000800  0E02               	movlw	2
  3200  000802                     u835:
  3201  000802  90D8               	bcf	status,0,c
  3202  000804  3624               	rlcf	??_I2C_Master_Init,f,c
  3203  000806  3625               	rlcf	??_I2C_Master_Init+1,f,c
  3204  000808  3626               	rlcf	??_I2C_Master_Init+2,f,c
  3205  00080A  3627               	rlcf	??_I2C_Master_Init+3,f,c
  3206  00080C  2EE8               	decfsz	wreg,f,c
  3207  00080E  D7F9               	goto	u835
  3208  000810  C024  F017         	movff	??_I2C_Master_Init,___lldiv@divisor
  3209  000814  C025  F018         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  3210  000818  C026  F019         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  3211  00081C  C027  F01A         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  3212  000820  ECA9  F003         	call	___lldiv	;wreg free
  3213  000824  0413               	decf	?___lldiv,w,c
  3214  000826  6EC8               	movwf	4040,c	;volatile
  3215                           
  3216                           ;I2C.c: 20: TRISC3 = 1;
  3217  000828  8694               	bsf	3988,3,c	;volatile
  3218                           
  3219                           ;I2C.c: 21: TRISC4 = 1;
  3220  00082A  8894               	bsf	3988,4,c	;volatile
  3221  00082C  0012               	return		;funcret
  3222  00082E                     __end_of_I2C_Master_Init:
  3223                           	opt stack 0
  3224                           tblptru	equ	0xFF8
  3225                           tblptrh	equ	0xFF7
  3226                           tblptrl	equ	0xFF6
  3227                           tablat	equ	0xFF5
  3228                           prodh	equ	0xFF4
  3229                           prodl	equ	0xFF3
  3230                           intcon	equ	0xFF2
  3231                           intcon3	equ	0xFF0
  3232                           postinc0	equ	0xFEE
  3233                           wreg	equ	0xFE8
  3234                           indf2	equ	0xFDF
  3235                           postinc2	equ	0xFDE
  3236                           postdec2	equ	0xFDD
  3237                           fsr2h	equ	0xFDA
  3238                           fsr2l	equ	0xFD9
  3239                           status	equ	0xFD8
  3240                           
  3241 ;; *************** function ___lldiv *****************
  3242 ;; Defined at:
  3243 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  3244 ;; Parameters:    Size  Location     Type
  3245 ;;  dividend        4   18[COMRAM] unsigned long 
  3246 ;;  divisor         4   22[COMRAM] unsigned long 
  3247 ;; Auto vars:     Size  Location     Type
  3248 ;;  quotient        4   26[COMRAM] unsigned long 
  3249 ;;  counter         1   30[COMRAM] unsigned char 
  3250 ;; Return value:  Size  Location     Type
  3251 ;;                  4   18[COMRAM] unsigned long 
  3252 ;; Registers used:
  3253 ;;		wreg, status,2, status,0
  3254 ;; Tracked objects:
  3255 ;;		On entry : 0/0
  3256 ;;		On exit  : 0/0
  3257 ;;		Unchanged: 0/0
  3258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3259 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3260 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3261 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3262 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3263 ;;Total ram usage:       13 bytes
  3264 ;; Hardware stack levels used:    1
  3265 ;; Hardware stack levels required when called:    2
  3266 ;; This function calls:
  3267 ;;		Nothing
  3268 ;; This function is called by:
  3269 ;;		_I2C_Master_Init
  3270 ;; This function uses a non-reentrant model
  3271 ;;
  3272                           
  3273                           	psect	text16
  3274  000752                     __ptext16:
  3275                           	opt stack 0
  3276  000752                     ___lldiv:
  3277                           	opt stack 27
  3278                           
  3279                           ;incstack = 0
  3280  000752  0E00               	movlw	0
  3281  000754  6E1B               	movwf	___lldiv@quotient,c
  3282  000756  0E00               	movlw	0
  3283  000758  6E1C               	movwf	___lldiv@quotient+1,c
  3284  00075A  0E00               	movlw	0
  3285  00075C  6E1D               	movwf	___lldiv@quotient+2,c
  3286  00075E  0E00               	movlw	0
  3287  000760  6E1E               	movwf	___lldiv@quotient+3,c
  3288  000762  5017               	movf	___lldiv@divisor,w,c
  3289  000764  1018               	iorwf	___lldiv@divisor+1,w,c
  3290  000766  1019               	iorwf	___lldiv@divisor+2,w,c
  3291  000768  101A               	iorwf	___lldiv@divisor+3,w,c
  3292  00076A  B4D8               	btfsc	status,2,c
  3293  00076C  D02A               	goto	l625
  3294  00076E  0E01               	movlw	1
  3295  000770  6E1F               	movwf	___lldiv@counter,c
  3296  000772  D006               	goto	l1433
  3297  000774                     l1431:
  3298  000774  90D8               	bcf	status,0,c
  3299  000776  3617               	rlcf	___lldiv@divisor,f,c
  3300  000778  3618               	rlcf	___lldiv@divisor+1,f,c
  3301  00077A  3619               	rlcf	___lldiv@divisor+2,f,c
  3302  00077C  361A               	rlcf	___lldiv@divisor+3,f,c
  3303  00077E  2A1F               	incf	___lldiv@counter,f,c
  3304  000780                     l1433:
  3305  000780  AE1A               	btfss	___lldiv@divisor+3,7,c
  3306  000782  D7F8               	goto	l1431
  3307  000784                     l1435:
  3308  000784  90D8               	bcf	status,0,c
  3309  000786  361B               	rlcf	___lldiv@quotient,f,c
  3310  000788  361C               	rlcf	___lldiv@quotient+1,f,c
  3311  00078A  361D               	rlcf	___lldiv@quotient+2,f,c
  3312  00078C  361E               	rlcf	___lldiv@quotient+3,f,c
  3313  00078E  5017               	movf	___lldiv@divisor,w,c
  3314  000790  5C13               	subwf	___lldiv@dividend,w,c
  3315  000792  5018               	movf	___lldiv@divisor+1,w,c
  3316  000794  5814               	subwfb	___lldiv@dividend+1,w,c
  3317  000796  5019               	movf	___lldiv@divisor+2,w,c
  3318  000798  5815               	subwfb	___lldiv@dividend+2,w,c
  3319  00079A  501A               	movf	___lldiv@divisor+3,w,c
  3320  00079C  5816               	subwfb	___lldiv@dividend+3,w,c
  3321  00079E  A0D8               	btfss	status,0,c
  3322  0007A0  D009               	goto	l1443
  3323  0007A2  5017               	movf	___lldiv@divisor,w,c
  3324  0007A4  5E13               	subwf	___lldiv@dividend,f,c
  3325  0007A6  5018               	movf	___lldiv@divisor+1,w,c
  3326  0007A8  5A14               	subwfb	___lldiv@dividend+1,f,c
  3327  0007AA  5019               	movf	___lldiv@divisor+2,w,c
  3328  0007AC  5A15               	subwfb	___lldiv@dividend+2,f,c
  3329  0007AE  501A               	movf	___lldiv@divisor+3,w,c
  3330  0007B0  5A16               	subwfb	___lldiv@dividend+3,f,c
  3331  0007B2  801B               	bsf	___lldiv@quotient,0,c
  3332  0007B4                     l1443:
  3333  0007B4  90D8               	bcf	status,0,c
  3334  0007B6  321A               	rrcf	___lldiv@divisor+3,f,c
  3335  0007B8  3219               	rrcf	___lldiv@divisor+2,f,c
  3336  0007BA  3218               	rrcf	___lldiv@divisor+1,f,c
  3337  0007BC  3217               	rrcf	___lldiv@divisor,f,c
  3338  0007BE  2E1F               	decfsz	___lldiv@counter,f,c
  3339  0007C0  D7E1               	goto	l1435
  3340  0007C2                     l625:
  3341  0007C2  C01B  F013         	movff	___lldiv@quotient,?___lldiv
  3342  0007C6  C01C  F014         	movff	___lldiv@quotient+1,?___lldiv+1
  3343  0007CA  C01D  F015         	movff	___lldiv@quotient+2,?___lldiv+2
  3344  0007CE  C01E  F016         	movff	___lldiv@quotient+3,?___lldiv+3
  3345  0007D2  0012               	return		;funcret
  3346  0007D4                     __end_of___lldiv:
  3347                           	opt stack 0
  3348                           tblptru	equ	0xFF8
  3349                           tblptrh	equ	0xFF7
  3350                           tblptrl	equ	0xFF6
  3351                           tablat	equ	0xFF5
  3352                           prodh	equ	0xFF4
  3353                           prodl	equ	0xFF3
  3354                           intcon	equ	0xFF2
  3355                           intcon3	equ	0xFF0
  3356                           postinc0	equ	0xFEE
  3357                           wreg	equ	0xFE8
  3358                           indf2	equ	0xFDF
  3359                           postinc2	equ	0xFDE
  3360                           postdec2	equ	0xFDD
  3361                           fsr2h	equ	0xFDA
  3362                           fsr2l	equ	0xFD9
  3363                           status	equ	0xFD8
  3364                           
  3365 ;; *************** function _isr *****************
  3366 ;; Defined at:
  3367 ;;		line 184 in file "../main.c"
  3368 ;; Parameters:    Size  Location     Type
  3369 ;;		None
  3370 ;; Auto vars:     Size  Location     Type
  3371 ;;  keypress        1   17[COMRAM] unsigned char 
  3372 ;; Return value:  Size  Location     Type
  3373 ;;                  1    wreg      void 
  3374 ;; Registers used:
  3375 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3376 ;; Tracked objects:
  3377 ;;		On entry : 0/0
  3378 ;;		On exit  : 0/0
  3379 ;;		Unchanged: 0/0
  3380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3381 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3382 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3383 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3384 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3385 ;;Total ram usage:       15 bytes
  3386 ;; Hardware stack levels used:    1
  3387 ;; Hardware stack levels required when called:    1
  3388 ;; This function calls:
  3389 ;;		_switchMenu
  3390 ;; This function is called by:
  3391 ;;		Interrupt level 2
  3392 ;; This function uses a non-reentrant model
  3393 ;;
  3394                           
  3395                           	psect	intcode
  3396  000008                     __pintcode:
  3397                           	opt stack 0
  3398  000008                     _isr:
  3399                           	opt stack 26
  3400                           
  3401                           ;incstack = 0
  3402  000008  8248               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3403  00000A  ED1A  F003         	call	int_func,f	;refresh shadow registers
  3404                           tblptru	equ	0xFF8
  3405                           tblptrh	equ	0xFF7
  3406                           tblptrl	equ	0xFF6
  3407                           tablat	equ	0xFF5
  3408                           prodh	equ	0xFF4
  3409                           prodl	equ	0xFF3
  3410                           intcon	equ	0xFF2
  3411                           intcon3	equ	0xFF0
  3412                           postinc0	equ	0xFEE
  3413                           wreg	equ	0xFE8
  3414                           indf2	equ	0xFDF
  3415                           postinc2	equ	0xFDE
  3416                           postdec2	equ	0xFDD
  3417                           fsr2h	equ	0xFDA
  3418                           fsr2l	equ	0xFD9
  3419                           status	equ	0xFD8
  3420                           
  3421                           	psect	intcode_body
  3422  000634                     __pintcode_body:
  3423                           	opt stack 26
  3424  000634                     int_func:
  3425                           	opt stack 26
  3426  000634  0006               	pop		; remove dummy address from shadow register refresh
  3427  000636  CFFA F004          	movff	pclath,??_isr
  3428  00063A  CFFB F005          	movff	pclatu,??_isr+1
  3429  00063E  CFE9 F006          	movff	fsr0l,??_isr+2
  3430  000642  CFEA F007          	movff	fsr0h,??_isr+3
  3431  000646  CFE1 F008          	movff	fsr1l,??_isr+4
  3432  00064A  CFE2 F009          	movff	fsr1h,??_isr+5
  3433  00064E  CFD9 F00A          	movff	fsr2l,??_isr+6
  3434  000652  CFDA F00B          	movff	fsr2h,??_isr+7
  3435  000656  CFF3 F00C          	movff	prodl,??_isr+8
  3436  00065A  CFF4 F00D          	movff	prodh,??_isr+9
  3437  00065E  CFF6 F00E          	movff	tblptrl,??_isr+10
  3438  000662  CFF7 F00F          	movff	tblptrh,??_isr+11
  3439  000666  CFF8 F010          	movff	tblptru,??_isr+12
  3440  00066A  CFF5 F011          	movff	tablat,??_isr+13
  3441                           
  3442                           ;main.c: 185: if(INT1IF && (screenMode != 1)){
  3443  00066E  A0F0               	btfss	intcon3,0,c	;volatile
  3444  000670  D036               	goto	i2l1831
  3445  000672  0447               	decf	_screenMode,w,c
  3446  000674  B4D8               	btfsc	status,2,c
  3447  000676  D033               	goto	i2l1831
  3448                           
  3449                           ;main.c: 186: unsigned char keypress = (PORTB & 0xF0) >> 4;
  3450  000678  3881               	swapf	3969,w,c	;volatile
  3451  00067A  0B0F               	andlw	15
  3452  00067C  0B0F               	andlw	15
  3453  00067E  6E12               	movwf	isr@keypress,c
  3454                           
  3455                           ;main.c: 187: if (keys[keypress] == '*'){
  3456  000680  5012               	movf	isr@keypress,w,c
  3457  000682  0D01               	mullw	1
  3458  000684  0E7B               	movlw	low _keys
  3459  000686  24F3               	addwf	prodl,w,c
  3460  000688  6EF6               	movwf	tblptrl,c
  3461  00068A  0EFE               	movlw	high _keys
  3462  00068C  20F4               	addwfc	prodh,w,c
  3463  00068E  6EF7               	movwf	tblptrh,c
  3464  000690                     	if	0	;There are less than 3 active tblptr bytes
  3465  000690                     	endif
  3466  000690  0008               	tblrd		*
  3467  000692  50F5               	movf	tablat,w,c
  3468  000694  0A2A               	xorlw	42
  3469  000696  A4D8               	btfss	status,2,c
  3470  000698  D00E               	goto	i2l1825
  3471                           
  3472                           ;main.c: 189: if(screenMode == 2){
  3473  00069A  0E02               	movlw	2
  3474  00069C  1847               	xorwf	_screenMode,w,c
  3475  00069E  A4D8               	btfss	status,2,c
  3476  0006A0  D004               	goto	i2l1821
  3477                           
  3478                           ;main.c: 190: screenMode = 1;
  3479  0006A2  0E01               	movlw	1
  3480  0006A4  6E47               	movwf	_screenMode,c
  3481                           
  3482                           ;main.c: 191: T0CONbits.TMR0ON = 1;
  3483  0006A6  8ED5               	bsf	4053,7,c	;volatile
  3484                           
  3485                           ;main.c: 192: }
  3486  0006A8  D019               	goto	i2l1829
  3487  0006AA                     i2l1821:
  3488                           
  3489                           ;main.c: 193: else if (screenMode == 0)
  3490  0006AA  5047               	movf	_screenMode,w,c
  3491  0006AC  A4D8               	btfss	status,2,c
  3492  0006AE  D016               	goto	i2l1829
  3493                           
  3494                           ;main.c: 194: screenMode = 2;
  3495  0006B0  0E02               	movlw	2
  3496  0006B2  6E47               	movwf	_screenMode,c
  3497                           
  3498                           ;main.c: 195: }
  3499  0006B4  D013               	goto	i2l1829
  3500  0006B6                     i2l1825:
  3501                           
  3502                           ;main.c: 196: else if (screenMode != 0)
  3503  0006B6  5047               	movf	_screenMode,w,c
  3504  0006B8  B4D8               	btfsc	status,2,c
  3505  0006BA  D010               	goto	i2l1829
  3506                           
  3507                           ;main.c: 197: switchMenu('4', '6', keys[keypress]);
  3508  0006BC  0E36               	movlw	54
  3509  0006BE  6E01               	movwf	switchMenu@right,c
  3510  0006C0  5012               	movf	isr@keypress,w,c
  3511  0006C2  0D01               	mullw	1
  3512  0006C4  0E7B               	movlw	low _keys
  3513  0006C6  24F3               	addwf	prodl,w,c
  3514  0006C8  6EF6               	movwf	tblptrl,c
  3515  0006CA  0EFE               	movlw	high _keys
  3516  0006CC  20F4               	addwfc	prodh,w,c
  3517  0006CE  6EF7               	movwf	tblptrh,c
  3518  0006D0                     	if	0	;There are less than 3 active tblptr bytes
  3519  0006D0                     	endif
  3520  0006D0  0008               	tblrd		*
  3521  0006D2  CFF5 F002          	movff	tablat,switchMenu@key
  3522  0006D6  0E34               	movlw	52
  3523  0006D8  ECAB  F004         	call	_switchMenu
  3524  0006DC                     i2l1829:
  3525                           
  3526                           ;main.c: 199: INT1IF = 0;
  3527  0006DC  90F0               	bcf	intcon3,0,c	;volatile
  3528  0006DE                     i2l1831:
  3529                           
  3530                           ;main.c: 200: }
  3531                           ;main.c: 201: if ((screenMode == 1) && TMR0IF && TMR0IE){
  3532  0006DE  0447               	decf	_screenMode,w,c
  3533  0006E0  B4D8               	btfsc	status,2,c
  3534  0006E2  A4F2               	btfss	intcon,2,c	;volatile
  3535  0006E4  D018               	goto	i2l201
  3536  0006E6  AAF2               	btfss	intcon,5,c	;volatile
  3537  0006E8  D016               	goto	i2l201
  3538                           
  3539                           ;main.c: 203: TMR0IF = 0;
  3540  0006EA  94F2               	bcf	intcon,2,c	;volatile
  3541                           
  3542                           ;main.c: 204: TMR0 = 0;
  3543  0006EC  0E00               	movlw	0
  3544  0006EE  6ED7               	movwf	4055,c	;volatile
  3545  0006F0  0E00               	movlw	0
  3546  0006F2  6ED6               	movwf	4054,c	;volatile
  3547                           
  3548                           ;main.c: 205: counter++;
  3549  0006F4  4A45               	infsnz	_counter,f,c
  3550  0006F6  2A46               	incf	_counter+1,f,c
  3551                           
  3552                           ;main.c: 206: if (counter >= 6866){
  3553  0006F8  BE46               	btfsc	_counter+1,7,c
  3554  0006FA  D00D               	goto	i2l201
  3555  0006FC  0ED2               	movlw	210
  3556  0006FE  5C45               	subwf	_counter,w,c
  3557  000700  0E1A               	movlw	26
  3558  000702  5846               	subwfb	_counter+1,w,c
  3559  000704  A0D8               	btfss	status,0,c
  3560  000706  D007               	goto	i2l201
  3561                           
  3562                           ;main.c: 213: counter = 0;
  3563  000708  0E00               	movlw	0
  3564  00070A  6E46               	movwf	_counter+1,c
  3565  00070C  0E00               	movlw	0
  3566  00070E  6E45               	movwf	_counter,c
  3567                           
  3568                           ;main.c: 214: screenMode = 0;
  3569  000710  0E00               	movlw	0
  3570  000712  6E47               	movwf	_screenMode,c
  3571                           
  3572                           ;main.c: 215: T0CONbits.TMR0ON = 0;
  3573  000714  9ED5               	bcf	4053,7,c	;volatile
  3574  000716                     i2l201:
  3575  000716  C011  FFF5         	movff	??_isr+13,tablat
  3576  00071A  C010  FFF8         	movff	??_isr+12,tblptru
  3577  00071E  C00F  FFF7         	movff	??_isr+11,tblptrh
  3578  000722  C00E  FFF6         	movff	??_isr+10,tblptrl
  3579  000726  C00D  FFF4         	movff	??_isr+9,prodh
  3580  00072A  C00C  FFF3         	movff	??_isr+8,prodl
  3581  00072E  C00B  FFDA         	movff	??_isr+7,fsr2h
  3582  000732  C00A  FFD9         	movff	??_isr+6,fsr2l
  3583  000736  C009  FFE2         	movff	??_isr+5,fsr1h
  3584  00073A  C008  FFE1         	movff	??_isr+4,fsr1l
  3585  00073E  C007  FFEA         	movff	??_isr+3,fsr0h
  3586  000742  C006  FFE9         	movff	??_isr+2,fsr0l
  3587  000746  C005  FFFB         	movff	??_isr+1,pclatu
  3588  00074A  C004  FFFA         	movff	??_isr,pclath
  3589  00074E  9248               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3590  000750  0011               	retfie		f
  3591  000752                     __end_of_isr:
  3592                           	opt stack 0
  3593                           pclatu	equ	0xFFB
  3594                           pclath	equ	0xFFA
  3595                           tblptru	equ	0xFF8
  3596                           tblptrh	equ	0xFF7
  3597                           tblptrl	equ	0xFF6
  3598                           tablat	equ	0xFF5
  3599                           prodh	equ	0xFF4
  3600                           prodl	equ	0xFF3
  3601                           intcon	equ	0xFF2
  3602                           intcon3	equ	0xFF0
  3603                           postinc0	equ	0xFEE
  3604                           fsr0h	equ	0xFEA
  3605                           fsr0l	equ	0xFE9
  3606                           wreg	equ	0xFE8
  3607                           fsr1h	equ	0xFE2
  3608                           fsr1l	equ	0xFE1
  3609                           indf2	equ	0xFDF
  3610                           postinc2	equ	0xFDE
  3611                           postdec2	equ	0xFDD
  3612                           fsr2h	equ	0xFDA
  3613                           fsr2l	equ	0xFD9
  3614                           status	equ	0xFD8
  3615                           
  3616 ;; *************** function _switchMenu *****************
  3617 ;; Defined at:
  3618 ;;		line 169 in file "../main.c"
  3619 ;; Parameters:    Size  Location     Type
  3620 ;;  left            1    wreg     unsigned char 
  3621 ;;  right           1    0[COMRAM] unsigned char 
  3622 ;;  key             1    1[COMRAM] unsigned char 
  3623 ;; Auto vars:     Size  Location     Type
  3624 ;;  left            1    2[COMRAM] unsigned char 
  3625 ;; Return value:  Size  Location     Type
  3626 ;;                  1    wreg      void 
  3627 ;; Registers used:
  3628 ;;		wreg, status,2, status,0
  3629 ;; Tracked objects:
  3630 ;;		On entry : 0/0
  3631 ;;		On exit  : 0/0
  3632 ;;		Unchanged: 0/0
  3633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3634 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3635 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3636 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3637 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3638 ;;Total ram usage:        3 bytes
  3639 ;; Hardware stack levels used:    1
  3640 ;; This function calls:
  3641 ;;		Nothing
  3642 ;; This function is called by:
  3643 ;;		_isr
  3644 ;; This function uses a non-reentrant model
  3645 ;;
  3646                           
  3647                           	psect	text18
  3648  000956                     __ptext18:
  3649                           	opt stack 0
  3650  000956                     _switchMenu:
  3651                           	opt stack 26
  3652                           
  3653                           ;incstack = 0
  3654                           ;switchMenu@left stored from wreg
  3655  000956  6E03               	movwf	switchMenu@left,c
  3656                           
  3657                           ;main.c: 170: if (key == right){
  3658  000958  5001               	movf	switchMenu@right,w,c
  3659  00095A  1802               	xorwf	switchMenu@key,w,c
  3660  00095C  A4D8               	btfss	status,2,c
  3661  00095E  D009               	goto	i2l1635
  3662                           
  3663                           ;main.c: 171: if (screenMode == 2)
  3664  000960  0E02               	movlw	2
  3665  000962  1847               	xorwf	_screenMode,w,c
  3666  000964  A4D8               	btfss	status,2,c
  3667  000966  D003               	goto	i2l1633
  3668                           
  3669                           ;main.c: 172: screenMode = 8;
  3670  000968  0E08               	movlw	8
  3671  00096A  6E47               	movwf	_screenMode,c
  3672  00096C  0012               	return	
  3673  00096E                     i2l1633:
  3674                           
  3675                           ;main.c: 173: else
  3676                           ;main.c: 174: screenMode -= 1;
  3677  00096E  0647               	decf	_screenMode,f,c
  3678                           
  3679                           ;main.c: 175: }
  3680  000970  0012               	return	
  3681  000972                     i2l1635:
  3682                           
  3683                           ;main.c: 176: else if (key == left){
  3684  000972  5003               	movf	switchMenu@left,w,c
  3685  000974  1802               	xorwf	switchMenu@key,w,c
  3686  000976  A4D8               	btfss	status,2,c
  3687  000978  0012               	return	
  3688                           
  3689                           ;main.c: 177: if (screenMode == 8)
  3690  00097A  0E08               	movlw	8
  3691  00097C  1847               	xorwf	_screenMode,w,c
  3692  00097E  A4D8               	btfss	status,2,c
  3693  000980  D003               	goto	i2l1641
  3694                           
  3695                           ;main.c: 178: screenMode = 2;
  3696  000982  0E02               	movlw	2
  3697  000984  6E47               	movwf	_screenMode,c
  3698  000986  0012               	return	
  3699  000988                     i2l1641:
  3700                           
  3701                           ;main.c: 179: else
  3702                           ;main.c: 180: screenMode += 1;
  3703  000988  2A47               	incf	_screenMode,f,c
  3704  00098A  0012               	return	
  3705  00098C                     __end_of_switchMenu:
  3706                           	opt stack 0
  3707                           pclatu	equ	0xFFB
  3708                           pclath	equ	0xFFA
  3709                           tblptru	equ	0xFF8
  3710                           tblptrh	equ	0xFF7
  3711                           tblptrl	equ	0xFF6
  3712                           tablat	equ	0xFF5
  3713                           prodh	equ	0xFF4
  3714                           prodl	equ	0xFF3
  3715                           intcon	equ	0xFF2
  3716                           intcon3	equ	0xFF0
  3717                           postinc0	equ	0xFEE
  3718                           fsr0h	equ	0xFEA
  3719                           fsr0l	equ	0xFE9
  3720                           wreg	equ	0xFE8
  3721                           fsr1h	equ	0xFE2
  3722                           fsr1l	equ	0xFE1
  3723                           indf2	equ	0xFDF
  3724                           postinc2	equ	0xFDE
  3725                           postdec2	equ	0xFDD
  3726                           fsr2h	equ	0xFDA
  3727                           fsr2l	equ	0xFD9
  3728                           status	equ	0xFD8
  3729                           pclatu	equ	0xFFB
  3730                           pclath	equ	0xFFA
  3731                           tblptru	equ	0xFF8
  3732                           tblptrh	equ	0xFF7
  3733                           tblptrl	equ	0xFF6
  3734                           tablat	equ	0xFF5
  3735                           prodh	equ	0xFF4
  3736                           prodl	equ	0xFF3
  3737                           intcon	equ	0xFF2
  3738                           intcon3	equ	0xFF0
  3739                           postinc0	equ	0xFEE
  3740                           fsr0h	equ	0xFEA
  3741                           fsr0l	equ	0xFE9
  3742                           wreg	equ	0xFE8
  3743                           fsr1h	equ	0xFE2
  3744                           fsr1l	equ	0xFE1
  3745                           indf2	equ	0xFDF
  3746                           postinc2	equ	0xFDE
  3747                           postdec2	equ	0xFDD
  3748                           fsr2h	equ	0xFDA
  3749                           fsr2l	equ	0xFD9
  3750                           status	equ	0xFD8
  3751                           
  3752                           	psect	rparam
  3753  0000                     pclatu	equ	0xFFB
  3754                           pclath	equ	0xFFA
  3755                           tblptru	equ	0xFF8
  3756                           tblptrh	equ	0xFF7
  3757                           tblptrl	equ	0xFF6
  3758                           tablat	equ	0xFF5
  3759                           prodh	equ	0xFF4
  3760                           prodl	equ	0xFF3
  3761                           intcon	equ	0xFF2
  3762                           intcon3	equ	0xFF0
  3763                           postinc0	equ	0xFEE
  3764                           fsr0h	equ	0xFEA
  3765                           fsr0l	equ	0xFE9
  3766                           wreg	equ	0xFE8
  3767                           fsr1h	equ	0xFE2
  3768                           fsr1l	equ	0xFE1
  3769                           indf2	equ	0xFDF
  3770                           postinc2	equ	0xFDE
  3771                           postdec2	equ	0xFDD
  3772                           fsr2h	equ	0xFDA
  3773                           fsr2l	equ	0xFD9
  3774                           status	equ	0xFD8
  3775                           
  3776                           	psect	temp
  3777  000048                     btemp:
  3778                           	opt stack 0
  3779  000048                     	ds	1
  3780  0000                     int$flags	set	btemp
  3781                           pclatu	equ	0xFFB
  3782                           pclath	equ	0xFFA
  3783                           tblptru	equ	0xFF8
  3784                           tblptrh	equ	0xFF7
  3785                           tblptrl	equ	0xFF6
  3786                           tablat	equ	0xFF5
  3787                           prodh	equ	0xFF4
  3788                           prodl	equ	0xFF3
  3789                           intcon	equ	0xFF2
  3790                           intcon3	equ	0xFF0
  3791                           postinc0	equ	0xFEE
  3792                           fsr0h	equ	0xFEA
  3793                           fsr0l	equ	0xFE9
  3794                           wreg	equ	0xFE8
  3795                           fsr1h	equ	0xFE2
  3796                           fsr1l	equ	0xFE1
  3797                           indf2	equ	0xFDF
  3798                           postinc2	equ	0xFDE
  3799                           postdec2	equ	0xFDD
  3800                           fsr2h	equ	0xFDA
  3801                           fsr2l	equ	0xFD9
  3802                           status	equ	0xFD8


Data Sizes:
    Strings     353
    Constant    35
    Data        1
    BSS         9
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     61      71
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 25
		 -> STR_19(CODE[23]), STR_18(CODE[23]), STR_17(CODE[21]), STR_16(CODE[17]), 
		 -> STR_15(CODE[21]), STR_14(CODE[17]), STR_13(CODE[19]), STR_12(CODE[17]), 
		 -> STR_11(CODE[19]), STR_10(CODE[17]), STR_9(CODE[25]), STR_8(CODE[17]), 
		 -> STR_7(CODE[17]), STR_6(CODE[17]), STR_5(CODE[17]), STR_4(CODE[17]), 
		 -> STR_3(CODE[17]), STR_2(CODE[17]), STR_1(CODE[17]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _I2C_Master_Init->___lldiv

Critical Paths under _isr in COMRAM

    _isr->_switchMenu

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0    4461
                                             52 COMRAM     9     9      0
                    _I2C_Master_Init
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              31    23      8    3363
                                             30 COMRAM    22    14      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      90
                                             20 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             18 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     287
                                             18 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     287
                                             25 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     418
                                             18 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0      90
                                             21 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0      90
                                             20 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0      75
                                             18 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Write                                     2     0      2     214
                                             19 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Read                                      2     2      0      30
                                             19 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Wait                                      1     1      0       0
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     376
                                             31 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     290
                                             18 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                 15    15      0     261
                                              3 COMRAM    15    15      0
                         _switchMenu
 ---------------------------------------------------------------------------------
 (5) _switchMenu                                           3     1      2     216
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _I2C_Master_Read
     _I2C_Master_Wait
   _I2C_Master_Start
     _I2C_Master_Wait
   _I2C_Master_Stop
     _I2C_Master_Wait
   _I2C_Master_Write
     _I2C_Master_Wait
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
       _lcdNibble

 _isr (ROOT)
   _switchMenu

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     3D      47       1       56.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      47      34        0.0%
DATA                 0      0      47       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sat Feb 04 18:23:49 2017

                       l34 0A22        ___wmul@multiplicand 0015                __CFG_BORV$3 000000  
             __CFG_CP0$OFF 000000               __CFG_CP1$OFF 000000               __CFG_CP2$OFF 000000  
             __CFG_CP3$OFF 000000                __CFG_OSC$HS 000000                        l143 004E  
                      l233 0414                        l170 0236                        l164 01BE  
                      l158 0140                        l167 01FA                        l625 07C2  
                      l678 0876                        l688 094C               __CFG_CPB$OFF 000000  
                      u150 09FC                        _PEN 007E2A               __CFG_CPD$OFF 000000  
                      _SEN 007E28                        u835 0802                        _isr 0008  
                      prod 000FF3                        wreg 000FE8               __CFG_LVP$OFF 000000  
             __CFG_WDT$OFF 000000                       l1025 09FE                       l1431 0774  
                     l1415 0A1A                       l1503 0342                       l1433 0780  
                     l1601 0546                       l1505 0350                       l1443 07B4  
                     l1435 0784                       l1611 0572                       l1523 03E2  
                     l1515 0384                       l1453 0844                       l1613 05B6  
                     l1621 060C                       l1605 055A                       l1509 0356  
                     l1701 00E8                       l1455 084C                       l1623 0612  
                     l1543 045C                       l1527 03E6                       l1465 086C  
                     l1457 0850                       l1481 0942                       l1473 0922  
                     l1609 056C                       l1545 0460                       l1625 061A  
                     l1475 092A                       l1619 05FC                       l1539 0442  
                     l1731 0186                       l1715 0138                       l1707 010C  
                     l1477 092E                       l1581 04E6                       l1557 048C  
                     l1573 04BC                       l1805 031E                       l1741 01B4  
                     l1709 0114                       l1559 0490                       l1575 04CC  
                     l1593 0528                       l1585 050A                       l1729 017C  
                     l1681 009E                       l1673 0082                       l1587 0512  
                     l1499 0332                       l1755 01F0                       l1691 00C2  
                     l1669 007A                       l1599 053E                       l1783 0268  
                     l1687 00BA                       l1793 02AE                       l1785 0272  
                     l1769 022C                       l1699 00DE                       l1789 02A6  
                     l1799 02CA                       ?_isr 0001                       STR_1 FFDD  
                     STR_2 FFEE                       STR_3 FFBB                       STR_4 FF44  
                     STR_5 FF33                       STR_6 FF99                       STR_7 FF66  
                     STR_8 FFAA                       STR_9 FE9E                       _LATB 000F8A  
                     u1407 08D4                       _LATC 000F8B                       _LATD 000F8C  
                     u1417 0908                       u1427 0898                       u1437 08A0  
                     u1447 08C0                       u1457 08C8                       u1387 0090  
                     u1397 00D0                       _RCEN 007E2B                       _TMR0 000FD6  
                     _RSEN 007E29                main@numBats 0038                       _main 0012  
                     _keys FE7B                       _time 003E                       fsr0h 000FEA  
                     fsr1h 000FE2                       fsr2h 000FDA                       fsr0l 000FE9  
                     indf2 000FDF                       fsr1l 000FE1                       fsr2l 000FD9  
                     btemp 0048                       prodh 000FF4                       prodl 000FF3  
                     start 000E              __CFG_IESO$OFF 000000              __CFG_MCLRE$ON 000000  
             ___param_bank 000000                      ??_isr 0004           ?_I2C_Master_Init 0020  
         ?_I2C_Master_Read 0001           ?_I2C_Master_Wait 0001           ?_I2C_Master_Stop 0001  
                    ?_main 0001                      _ACKEN 007E2C                      _ACKDT 007E2D  
                    STR_10 FFCC                      STR_11 FF0F                      STR_12 FF55  
                    STR_20 FF22                      STR_13 FF0F                      STR_14 FF88  
                    STR_15 FEE5                      STR_16 FF77                      STR_17 FEFA  
                    STR_18 FEB7                      STR_19 FECE            __end_of___lldiv 07D4  
                    _T0CON 000FD5            __end_of___lwdiv 0880                      i2l201 0716  
          __end_of___lwmod 0956                      _PORTB 000F81                      _TRISB 000F93  
                    _TRISC 000F94                      _TRISD 000F95              __CFG_PWRT$OFF 000000  
            __CFG_WRT0$OFF 000000              __CFG_WRT1$OFF 000000              __CFG_WRT2$OFF 000000  
            __CFG_WRT3$OFF 000000            __end_of_lcdInst 0A4C             __CFG_EBTR0$OFF 000000  
           __CFG_FCMEN$OFF 000000             __CFG_EBTR1$OFF 000000             __CFG_EBTR2$OFF 000000  
           __CFG_EBTR3$OFF 000000              __CFG_WRTB$OFF 000000              __CFG_WRTC$OFF 000000  
            __CFG_WRTD$OFF 000000            __end_of_initLCD 0914             __CFG_EBTRB$OFF 000000  
          __end_of_dpowers FE96            __end_of_isdigit 0A22                      _putch 0A34  
                    main@i 003D                      pclath 000FFA                      tablat 000FF5  
                    status 000FD8             __CFG_PBADEN$ON 000000            __initialization 098C  
             __end_of_main 0328               __end_of_keys FE8C                     ??_main 0035  
            __activetblptr 000002          ?_I2C_Master_Start 0001          ?_I2C_Master_Write 0014  
       ??_I2C_Master_Start 0014                     _ADCON0 000FC2                     _ADCON1 000FC1  
       ??_I2C_Master_Write 0016                     ?_putch 0001                     _INT1IE 007F83  
                   _INT1IF 007F80                     i2l1641 0988                     i2l1633 096E  
                   i2l1635 0972                     i2l1821 06AA                     i2l1831 06DE  
                   i2l1825 06B6                     i2l1829 06DC                     _TMR0IE 007F95  
                   _TMR0IF 007F92                     _SSPADD 000FC8                     _TRISC3 007CA3  
                   _TRISC4 007CA4                     _SSPBUF 000FC9                isr@keypress 0012  
           __CFG_XINST$OFF 000000                     ___wmul 09B8             __CFG_STVREN$ON 000000  
                ??___lldiv 001B                  ??___lwdiv 0017                  ??___lwmod 001E  
                   clear_0 09A4                  ??_lcdInst 0015                     _printf 0328  
                ??_initLCD 0016               __pdataCOMRAM 0047                  ??_isdigit 0013  
             __mediumconst FE7A                     tblptrh 000FF7                     tblptrl 000FF6  
                   tblptru 000FF8            switchMenu@right 0001                 __accesstop 0080  
  __end_of__initialization 09AA              ___rparam_used 000001             __pcstackCOMRAM 0001  
            __end_of_putch 0A40         __size_of_lcdNibble 004E                    ??_putch 0015  
                  ?___wmul 0013                    ?_printf 001F                    _SSPCON1 000FC6  
                  _SSPCON2 000FC5                    _SSPSTAT 000FC7          __end_of_lcdNibble 08CE  
                  __Hparam 0000                    __Lparam 0000                    ___lldiv 0752  
          __size_of___wmul 0026                    ___lwdiv 082E                    ___lwmod 0914  
                  __pcinit 098C                    __ramtop 1000                    _lcdInst 0A40  
                  __ptext0 0012                    __ptext1 0328                    __ptext2 0A34  
                  __ptext3 0A04                    __ptext4 09B8                    __ptext5 0914  
                  __ptext6 082E                    __ptext7 08CE                    __ptext8 0A40  
                  __ptext9 0880            __size_of_printf 030C                  _T0CONbits 000FD5  
                  _initLCD 08CE          __end_of_hexpowers FE9E                    _counter 0045  
                  _dpowers FE8C                    _isdigit 0A04               __size_of_isr 074A  
 __size_of_I2C_Master_Init 005A   __size_of_I2C_Master_Read 0026   __size_of_I2C_Master_Wait 0012  
 __size_of_I2C_Master_Stop 0008                    main@min 0036                    main@sec 0037  
           __pintcode_body 0634       end_of_initialization 09AA              __Lmediumconst FE7A  
                  int_func 0634                 _screenMode 0047  __size_of_I2C_Master_Start 0008  
__size_of_I2C_Master_Write 000A            ___lldiv@divisor 0017            ___lldiv@counter 001F  
                  printf@c 0034                    printf@f 001F           I2C_Master_Init@c 0020  
         I2C_Master_Read@a 0014                    postdec2 000FDD                    postinc0 000FEE  
                  postinc2 000FDE                printf@width 0032                 _switchMenu 0956  
           __end_of___wmul 09DE              __pidataCOMRAM 0A66             __end_of_printf 0634  
      start_initialization 098C                __end_of_isr 0752          ??_I2C_Master_Init 0024  
        ??_I2C_Master_Read 0014          ??_I2C_Master_Wait 0013          ??_I2C_Master_Stop 0014  
                 ??___wmul 0017           __CFG_LPT1OSC$OFF 000000             switchMenu@left 0003  
                 ??_printf 0027                __pbssCOMRAM 003E           _I2C_Master_Start 0A5E  
         _I2C_Master_Write 0A4C           ___lwdiv@dividend 0013          __CFG_CCP2MX$PORTC 000000  
              ?_switchMenu 0001                  __pintcode 0008              __pmediumconst FE7A  
                _lcdNibble 0880                   ?___lldiv 0013                   ?___lwdiv 0013  
                 ?___lwmod 001A                   ?_lcdInst 0001                   ?_initLCD 0001  
                 ?_isdigit 0001                  _hexpowers FE96           ___lwdiv@quotient 0017  
           __size_of_putch 000C             ___wmul@product 0017                   _LATDbits 000F8C  
         __CFG_WDTPS$32768 000000                 ?_lcdNibble 0001                  main@i_272 003C  
        ___wmul@multiplier 0013              lcdNibble@data 0014                 printf@flag 0031  
            lcdNibble@temp 0013                 printf@prec 002E                  main@numAA 003B  
                main@num9V 003A        __size_of_switchMenu 0036        I2C_Master_Read@temp 0015  
                 __Hrparam 0000                   __Lrparam 0000         __CFG_BOREN$SBORDIS 000000  
            switchMenu@key 0002           __size_of___lldiv 0082           __size_of___lwdiv 0052  
         __size_of___lwmod 0042                _isdigit$539 0014           __size_of_lcdInst 000C  
          _I2C_Master_Init 07D4            _I2C_Master_Read 09DE           __size_of_initLCD 0046  
          _I2C_Master_Wait 0A22            _I2C_Master_Stop 0A56           __size_of_isdigit 001E  
          ___lwdiv@divisor 0015            ___lwdiv@counter 0019                   __ptext10 0A4C  
                 __ptext11 0A56                   __ptext12 0A5E                   __ptext13 09DE  
                 __ptext14 0A22                   __ptext15 07D4                   __ptext16 0752  
                 __ptext18 0956              __size_of_main 0316                ??_lcdNibble 0013  
                 int$flags 0048                  printf@idx 002B                  printf@val 002F  
                 main@numC 0039                  putch@data 0015   __end_of_I2C_Master_Start 0A66  
 __end_of_I2C_Master_Write 0A56                 _INTCONbits 000FF2                   isdigit@c 0015  
                 intlevel2 0000           ___lwmod@dividend 001A           ___lldiv@dividend 0013  
             ??_switchMenu 0003                   printf@ap 002C    __end_of_I2C_Master_Init 082E  
  __end_of_I2C_Master_Read 0A04    __end_of_I2C_Master_Wait 0A34    __end_of_I2C_Master_Stop 0A5E  
              lcdInst@data 0015           ___lldiv@quotient 001B          I2C_Master_Write@d 0014  
          ___lwmod@divisor 001C            ___lwmod@counter 001E         __end_of_switchMenu 098C  
