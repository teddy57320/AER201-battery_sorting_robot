

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sat Feb 04 18:37:49 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    29                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    32                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    33                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    34  0000                     
    35                           ; Version 1.40
    36                           ; Generated 01/12/2016 GMT
    37                           ; 
    38                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    39                           ; All rights reserved.
    40                           ; 
    41                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    42                           ; 
    43                           ; Redistribution and use in source and binary forms, with or without modification, are
    44                           ; permitted provided that the following conditions are met:
    45                           ; 
    46                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    47                           ;        conditions and the following disclaimer.
    48                           ; 
    49                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    50                           ;        of conditions and the following disclaimer in the documentation and/or other
    51                           ;        materials provided with the distribution.
    52                           ; 
    53                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    54                           ;        software without specific prior written permission.
    55                           ; 
    56                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    57                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    58                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    59                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    60                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    61                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    62                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    63                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    64                           ; 
    65                           ; 
    66                           ; Code-generator required, PIC18F4620 Definitions
    67                           ; 
    68                           ; SFR Addresses
    69  0000                     
    70                           	psect	idataCOMRAM
    71  000A6C                     __pidataCOMRAM:
    72                           	opt stack 0
    73                           
    74                           ;initializer for _screenMode
    75  000A6C  02                 	db	2
    76                           
    77                           	psect	mediumconst
    78  00FE7A                     __pmediumconst:
    79                           	opt stack 0
    80  00FE7A  00                 	db	0
    81  00FE7B                     _keys:
    82                           	opt stack 0
    83  00FE7B  31                 	db	49
    84  00FE7C  32                 	db	50
    85  00FE7D  33                 	db	51
    86  00FE7E  41                 	db	65
    87  00FE7F  34                 	db	52
    88  00FE80  35                 	db	53
    89  00FE81  36                 	db	54
    90  00FE82  42                 	db	66
    91  00FE83  37                 	db	55
    92  00FE84  38                 	db	56
    93  00FE85  39                 	db	57
    94  00FE86  43                 	db	67
    95  00FE87  2A                 	db	42
    96  00FE88  30                 	db	48
    97  00FE89  23                 	db	35
    98  00FE8A  44                 	db	68
    99  00FE8B  00                 	db	0
   100  00FE8C                     __end_of_keys:
   101                           	opt stack 0
   102  00FE8C                     _dpowers:
   103                           	opt stack 0
   104  00FE8C  0001               	dw	1
   105  00FE8E  000A               	dw	10
   106  00FE90  0064               	dw	100
   107  00FE92  03E8               	dw	1000
   108  00FE94  2710               	dw	10000
   109  00FE96                     __end_of_dpowers:
   110                           	opt stack 0
   111  00FE96                     _hexpowers:
   112                           	opt stack 0
   113  00FE96  0001               	dw	1
   114  00FE98  0010               	dw	16
   115  00FE9A  0100               	dw	256
   116  00FE9C  1000               	dw	4096
   117  00FE9E                     __end_of_hexpowers:
   118                           	opt stack 0
   119  0000                     _TMR0	set	4054
   120  0000                     _ADCON0	set	4034
   121  0000                     _ADCON1	set	4033
   122  0000                     _INTCONbits	set	4082
   123  0000                     _LATB	set	3978
   124  0000                     _LATC	set	3979
   125  0000                     _LATD	set	3980
   126  0000                     _LATDbits	set	3980
   127  0000                     _PORTB	set	3969
   128  0000                     _SSPADD	set	4040
   129  0000                     _SSPBUF	set	4041
   130  0000                     _SSPCON1	set	4038
   131  0000                     _SSPCON2	set	4037
   132  0000                     _SSPSTAT	set	4039
   133  0000                     _T0CON	set	4053
   134  0000                     _T0CONbits	set	4053
   135  0000                     _TRISB	set	3987
   136  0000                     _TRISC	set	3988
   137  0000                     _TRISD	set	3989
   138  0000                     _ACKDT	set	32301
   139  0000                     _ACKEN	set	32300
   140  0000                     _INT1IE	set	32643
   141  0000                     _INT1IF	set	32640
   142  0000                     _PEN	set	32298
   143  0000                     _RC1	set	31761
   144  0000                     _RCEN	set	32299
   145  0000                     _RSEN	set	32297
   146  0000                     _SEN	set	32296
   147  0000                     _TMR0IE	set	32661
   148  0000                     _TMR0IF	set	32658
   149  0000                     _TRISC3	set	31907
   150  0000                     _TRISC4	set	31908
   151  00FE9E                     STR_9:
   152  00FE9E  25                 	db	37
   153  00FE9F  30                 	db	48	;'0'
   154  00FEA0  32                 	db	50	;'2'
   155  00FEA1  78                 	db	120	;'x'
   156  00FEA2  3A                 	db	58	;':'
   157  00FEA3  25                 	db	37
   158  00FEA4  30                 	db	48	;'0'
   159  00FEA5  32                 	db	50	;'2'
   160  00FEA6  78                 	db	120	;'x'
   161  00FEA7  20                 	db	32
   162  00FEA8  20                 	db	32
   163  00FEA9  20                 	db	32
   164  00FEAA  20                 	db	32
   165  00FEAB  20                 	db	32
   166  00FEAC  20                 	db	32
   167  00FEAD  20                 	db	32
   168  00FEAE  20                 	db	32
   169  00FEAF  20                 	db	32
   170  00FEB0  20                 	db	32
   171  00FEB1  20                 	db	32
   172  00FEB2  20                 	db	32
   173  00FEB3  20                 	db	32
   174  00FEB4  20                 	db	32
   175  00FEB5  20                 	db	32
   176  00FEB6  00                 	db	0
   177  00FEB7                     STR_18:
   178  00FEB7  44                 	db	68	;'D'
   179  00FEB8  41                 	db	65	;'A'
   180  00FEB9  54                 	db	84	;'T'
   181  00FEBA  45                 	db	69	;'E'
   182  00FEBB  3A                 	db	58	;':'
   183  00FEBC  20                 	db	32
   184  00FEBD  25                 	db	37
   185  00FEBE  30                 	db	48	;'0'
   186  00FEBF  32                 	db	50	;'2'
   187  00FEC0  78                 	db	120	;'x'
   188  00FEC1  2F                 	db	47
   189  00FEC2  25                 	db	37
   190  00FEC3  30                 	db	48	;'0'
   191  00FEC4  32                 	db	50	;'2'
   192  00FEC5  78                 	db	120	;'x'
   193  00FEC6  2F                 	db	47
   194  00FEC7  25                 	db	37
   195  00FEC8  30                 	db	48	;'0'
   196  00FEC9  32                 	db	50	;'2'
   197  00FECA  78                 	db	120	;'x'
   198  00FECB  20                 	db	32
   199  00FECC  20                 	db	32
   200  00FECD  00                 	db	0
   201  00FECE                     STR_19:
   202  00FECE  54                 	db	84	;'T'
   203  00FECF  49                 	db	73	;'I'
   204  00FED0  4D                 	db	77	;'M'
   205  00FED1  45                 	db	69	;'E'
   206  00FED2  3A                 	db	58	;':'
   207  00FED3  20                 	db	32
   208  00FED4  25                 	db	37
   209  00FED5  30                 	db	48	;'0'
   210  00FED6  32                 	db	50	;'2'
   211  00FED7  78                 	db	120	;'x'
   212  00FED8  3A                 	db	58	;':'
   213  00FED9  25                 	db	37
   214  00FEDA  30                 	db	48	;'0'
   215  00FEDB  32                 	db	50	;'2'
   216  00FEDC  78                 	db	120	;'x'
   217  00FEDD  3A                 	db	58	;':'
   218  00FEDE  25                 	db	37
   219  00FEDF  30                 	db	48	;'0'
   220  00FEE0  32                 	db	50	;'2'
   221  00FEE1  78                 	db	120	;'x'
   222  00FEE2  20                 	db	32
   223  00FEE3  20                 	db	32
   224  00FEE4  00                 	db	0
   225  00FEE5                     STR_15:
   226  00FEE5  42                 	db	66	;'B'
   227  00FEE6  41                 	db	65	;'A'
   228  00FEE7  54                 	db	84	;'T'
   229  00FEE8  54                 	db	84	;'T'
   230  00FEE9  45                 	db	69	;'E'
   231  00FEEA  52                 	db	82	;'R'
   232  00FEEB  49                 	db	73	;'I'
   233  00FEEC  45                 	db	69	;'E'
   234  00FEED  53                 	db	83	;'S'
   235  00FEEE  3A                 	db	58	;':'
   236  00FEEF  20                 	db	32
   237  00FEF0  25                 	db	37
   238  00FEF1  30                 	db	48	;'0'
   239  00FEF2  32                 	db	50	;'2'
   240  00FEF3  64                 	db	100	;'d'
   241  00FEF4  20                 	db	32
   242  00FEF5  20                 	db	32
   243  00FEF6  20                 	db	32
   244  00FEF7  20                 	db	32
   245  00FEF8  20                 	db	32
   246  00FEF9  00                 	db	0
   247  00FEFA                     STR_17:
   248  00FEFA  42                 	db	66	;'B'
   249  00FEFB  41                 	db	65	;'A'
   250  00FEFC  54                 	db	84	;'T'
   251  00FEFD  54                 	db	84	;'T'
   252  00FEFE  45                 	db	69	;'E'
   253  00FEFF  52                 	db	82	;'R'
   254  00FF00  49                 	db	73	;'I'
   255  00FF01  45                 	db	69	;'E'
   256  00FF02  53                 	db	83	;'S'
   257  00FF03  3A                 	db	58	;':'
   258  00FF04  20                 	db	32
   259  00FF05  25                 	db	37
   260  00FF06  30                 	db	48	;'0'
   261  00FF07  32                 	db	50	;'2'
   262  00FF08  78                 	db	120	;'x'
   263  00FF09  20                 	db	32
   264  00FF0A  20                 	db	32
   265  00FF0B  20                 	db	32
   266  00FF0C  20                 	db	32
   267  00FF0D  20                 	db	32
   268  00FF0E  00                 	db	0
   269  00FF0F                     STR_11:
   270  00FF0F  42                 	db	66	;'B'
   271  00FF10  41                 	db	65	;'A'
   272  00FF11  54                 	db	84	;'T'
   273  00FF12  54                 	db	84	;'T'
   274  00FF13  45                 	db	69	;'E'
   275  00FF14  52                 	db	82	;'R'
   276  00FF15  49                 	db	73	;'I'
   277  00FF16  45                 	db	69	;'E'
   278  00FF17  53                 	db	83	;'S'
   279  00FF18  3A                 	db	58	;':'
   280  00FF19  20                 	db	32
   281  00FF1A  25                 	db	37
   282  00FF1B  30                 	db	48	;'0'
   283  00FF1C  32                 	db	50	;'2'
   284  00FF1D  64                 	db	100	;'d'
   285  00FF1E  20                 	db	32
   286  00FF1F  20                 	db	32
   287  00FF20  20                 	db	32
   288  00FF21  00                 	db	0
   289  00FF22                     STR_20:
   290  00FF22  30                 	db	48	;'0'
   291  00FF23  31                 	db	49	;'1'
   292  00FF24  32                 	db	50	;'2'
   293  00FF25  33                 	db	51	;'3'
   294  00FF26  34                 	db	52	;'4'
   295  00FF27  35                 	db	53	;'5'
   296  00FF28  36                 	db	54	;'6'
   297  00FF29  37                 	db	55	;'7'
   298  00FF2A  38                 	db	56	;'8'
   299  00FF2B  39                 	db	57	;'9'
   300  00FF2C  61                 	db	97	;'a'
   301  00FF2D  62                 	db	98	;'b'
   302  00FF2E  63                 	db	99	;'c'
   303  00FF2F  64                 	db	100	;'d'
   304  00FF30  65                 	db	101	;'e'
   305  00FF31  66                 	db	102	;'f'
   306  00FF32  00                 	db	0
   307  00FF33                     STR_5:
   308  00FF33  20                 	db	32
   309  00FF34  20                 	db	32
   310  00FF35  20                 	db	32
   311  00FF36  20                 	db	32
   312  00FF37  20                 	db	32
   313  00FF38  20                 	db	32
   314  00FF39  20                 	db	32
   315  00FF3A  20                 	db	32
   316  00FF3B  20                 	db	32
   317  00FF3C  20                 	db	32
   318  00FF3D  20                 	db	32
   319  00FF3E  20                 	db	32
   320  00FF3F  20                 	db	32
   321  00FF40  20                 	db	32
   322  00FF41  20                 	db	32
   323  00FF42  20                 	db	32
   324  00FF43  00                 	db	0
   325  00FF44                     STR_4:
   326  00FF44  52                 	db	82	;'R'
   327  00FF45  55                 	db	85	;'U'
   328  00FF46  4E                 	db	78	;'N'
   329  00FF47  4E                 	db	78	;'N'
   330  00FF48  49                 	db	73	;'I'
   331  00FF49  4E                 	db	78	;'N'
   332  00FF4A  47                 	db	71	;'G'
   333  00FF4B  2E                 	db	46
   334  00FF4C  2E                 	db	46
   335  00FF4D  2E                 	db	46
   336  00FF4E  20                 	db	32
   337  00FF4F  20                 	db	32
   338  00FF50  20                 	db	32
   339  00FF51  20                 	db	32
   340  00FF52  20                 	db	32
   341  00FF53  20                 	db	32
   342  00FF54  00                 	db	0
   343  00FF55                     STR_12:
   344  00FF55  4E                 	db	78	;'N'
   345  00FF56  55                 	db	85	;'U'
   346  00FF57  4D                 	db	77	;'M'
   347  00FF58  42                 	db	66	;'B'
   348  00FF59  45                 	db	69	;'E'
   349  00FF5A  52                 	db	82	;'R'
   350  00FF5B  20                 	db	32
   351  00FF5C  4F                 	db	79	;'O'
   352  00FF5D  46                 	db	70	;'F'
   353  00FF5E  20                 	db	32
   354  00FF5F  43                 	db	67	;'C'
   355  00FF60  20                 	db	32
   356  00FF61  20                 	db	32
   357  00FF62  20                 	db	32
   358  00FF63  20                 	db	32
   359  00FF64  20                 	db	32
   360  00FF65  00                 	db	0
   361  00FF66                     STR_7:
   362  00FF66  54                 	db	84	;'T'
   363  00FF67  4F                 	db	79	;'O'
   364  00FF68  20                 	db	32
   365  00FF69  43                 	db	67	;'C'
   366  00FF6A  4F                 	db	79	;'O'
   367  00FF6B  4E                 	db	78	;'N'
   368  00FF6C  54                 	db	84	;'T'
   369  00FF6D  49                 	db	73	;'I'
   370  00FF6E  4E                 	db	78	;'N'
   371  00FF6F  55                 	db	85	;'U'
   372  00FF70  45                 	db	69	;'E'
   373  00FF71  20                 	db	32
   374  00FF72  20                 	db	32
   375  00FF73  20                 	db	32
   376  00FF74  20                 	db	32
   377  00FF75  20                 	db	32
   378  00FF76  00                 	db	0
   379  00FF77                     STR_16:
   380  00FF77  4E                 	db	78	;'N'
   381  00FF78  55                 	db	85	;'U'
   382  00FF79  4D                 	db	77	;'M'
   383  00FF7A  42                 	db	66	;'B'
   384  00FF7B  45                 	db	69	;'E'
   385  00FF7C  52                 	db	82	;'R'
   386  00FF7D  20                 	db	32
   387  00FF7E  4F                 	db	79	;'O'
   388  00FF7F  46                 	db	70	;'F'
   389  00FF80  20                 	db	32
   390  00FF81  41                 	db	65	;'A'
   391  00FF82  41                 	db	65	;'A'
   392  00FF83  20                 	db	32
   393  00FF84  20                 	db	32
   394  00FF85  20                 	db	32
   395  00FF86  20                 	db	32
   396  00FF87  00                 	db	0
   397  00FF88                     STR_14:
   398  00FF88  4E                 	db	78	;'N'
   399  00FF89  55                 	db	85	;'U'
   400  00FF8A  4D                 	db	77	;'M'
   401  00FF8B  42                 	db	66	;'B'
   402  00FF8C  45                 	db	69	;'E'
   403  00FF8D  52                 	db	82	;'R'
   404  00FF8E  20                 	db	32
   405  00FF8F  4F                 	db	79	;'O'
   406  00FF90  46                 	db	70	;'F'
   407  00FF91  20                 	db	32
   408  00FF92  39                 	db	57	;'9'
   409  00FF93  56                 	db	86	;'V'
   410  00FF94  20                 	db	32
   411  00FF95  20                 	db	32
   412  00FF96  20                 	db	32
   413  00FF97  20                 	db	32
   414  00FF98  00                 	db	0
   415  00FF99                     STR_6:
   416  00FF99  44                 	db	68	;'D'
   417  00FF9A  4F                 	db	79	;'O'
   418  00FF9B  4E                 	db	78	;'N'
   419  00FF9C  45                 	db	69	;'E'
   420  00FF9D  21                 	db	33
   421  00FF9E  20                 	db	32
   422  00FF9F  50                 	db	80	;'P'
   423  00FFA0  52                 	db	82	;'R'
   424  00FFA1  45                 	db	69	;'E'
   425  00FFA2  53                 	db	83	;'S'
   426  00FFA3  53                 	db	83	;'S'
   427  00FFA4  20                 	db	32
   428  00FFA5  2A                 	db	42
   429  00FFA6  20                 	db	32
   430  00FFA7  20                 	db	32
   431  00FFA8  20                 	db	32
   432  00FFA9  00                 	db	0
   433  00FFAA                     STR_8:
   434  00FFAA  54                 	db	84	;'T'
   435  00FFAB  4F                 	db	79	;'O'
   436  00FFAC  54                 	db	84	;'T'
   437  00FFAD  41                 	db	65	;'A'
   438  00FFAE  4C                 	db	76	;'L'
   439  00FFAF  20                 	db	32
   440  00FFB0  52                 	db	82	;'R'
   441  00FFB1  55                 	db	85	;'U'
   442  00FFB2  4E                 	db	78	;'N'
   443  00FFB3  20                 	db	32
   444  00FFB4  54                 	db	84	;'T'
   445  00FFB5  49                 	db	73	;'I'
   446  00FFB6  4D                 	db	77	;'M'
   447  00FFB7  45                 	db	69	;'E'
   448  00FFB8  3A                 	db	58	;':'
   449  00FFB9  20                 	db	32
   450  00FFBA  00                 	db	0
   451  00FFBB                     STR_3:
   452  00FFBB  20                 	db	32
   453  00FFBC  3C                 	db	60	;'<'
   454  00FFBD  34                 	db	52	;'4'
   455  00FFBE  20                 	db	32
   456  00FFBF  20                 	db	32
   457  00FFC0  20                 	db	32
   458  00FFC1  44                 	db	68	;'D'
   459  00FFC2  41                 	db	65	;'A'
   460  00FFC3  54                 	db	84	;'T'
   461  00FFC4  41                 	db	65	;'A'
   462  00FFC5  20                 	db	32
   463  00FFC6  20                 	db	32
   464  00FFC7  20                 	db	32
   465  00FFC8  36                 	db	54	;'6'
   466  00FFC9  3E                 	db	62	;'>'
   467  00FFCA  20                 	db	32
   468  00FFCB  00                 	db	0
   469  00FFCC                     STR_10:
   470  00FFCC  54                 	db	84	;'T'
   471  00FFCD  4F                 	db	79	;'O'
   472  00FFCE  54                 	db	84	;'T'
   473  00FFCF  41                 	db	65	;'A'
   474  00FFD0  4C                 	db	76	;'L'
   475  00FFD1  20                 	db	32
   476  00FFD2  4E                 	db	78	;'N'
   477  00FFD3  55                 	db	85	;'U'
   478  00FFD4  4D                 	db	77	;'M'
   479  00FFD5  42                 	db	66	;'B'
   480  00FFD6  45                 	db	69	;'E'
   481  00FFD7  52                 	db	82	;'R'
   482  00FFD8  20                 	db	32
   483  00FFD9  4F                 	db	79	;'O'
   484  00FFDA  46                 	db	70	;'F'
   485  00FFDB  20                 	db	32
   486  00FFDC  00                 	db	0
   487  00FFDD                     STR_1:
   488  00FFDD  53                 	db	83	;'S'
   489  00FFDE  54                 	db	84	;'T'
   490  00FFDF  41                 	db	65	;'A'
   491  00FFE0  52                 	db	82	;'R'
   492  00FFE1  54                 	db	84	;'T'
   493  00FFE2  3A                 	db	58	;':'
   494  00FFE3  20                 	db	32
   495  00FFE4  20                 	db	32
   496  00FFE5  20                 	db	32
   497  00FFE6  50                 	db	80	;'P'
   498  00FFE7  52                 	db	82	;'R'
   499  00FFE8  45                 	db	69	;'E'
   500  00FFE9  53                 	db	83	;'S'
   501  00FFEA  53                 	db	83	;'S'
   502  00FFEB  20                 	db	32
   503  00FFEC  2A                 	db	42
   504  00FFED  00                 	db	0
   505  00FFEE                     STR_2:
   506  00FFEE  3C                 	db	60	;'<'
   507  00FFEF  20                 	db	32
   508  00FFF0  34                 	db	52	;'4'
   509  00FFF1  20                 	db	32
   510  00FFF2  20                 	db	32
   511  00FFF3  20                 	db	32
   512  00FFF4  44                 	db	68	;'D'
   513  00FFF5  41                 	db	65	;'A'
   514  00FFF6  54                 	db	84	;'T'
   515  00FFF7  41                 	db	65	;'A'
   516  00FFF8  20                 	db	32
   517  00FFF9  20                 	db	32
   518  00FFFA  20                 	db	32
   519  00FFFB  36                 	db	54	;'6'
   520  00FFFC  20                 	db	32
   521  00FFFD  3E                 	db	62	;'>'
   522  00FFFE  00                 	db	0
   523  0000                     
   524                           ; #config settings
   525  00FFFF  00                 	db	0	; dummy byte at the end
   526  0000                     
   527                           	psect	cinit
   528  000992                     __pcinit:
   529                           	opt stack 0
   530  000992                     start_initialization:
   531                           	opt stack 0
   532  000992                     __initialization:
   533                           	opt stack 0
   534                           
   535                           ; Initialize objects allocated to COMRAM (1 bytes)
   536                           ; load TBLPTR registers with __pidataCOMRAM
   537  000992  0E6C               	movlw	low __pidataCOMRAM
   538  000994  6EF6               	movwf	tblptrl,c
   539  000996  0E0A               	movlw	high __pidataCOMRAM
   540  000998  6EF7               	movwf	tblptrh,c
   541  00099A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   542  00099C  6EF8               	movwf	tblptru,c
   543  00099E  0009               	tblrd		*+	;fetch initializer
   544  0009A0  CFF5 F047          	movff	tablat,__pdataCOMRAM
   545                           
   546                           ; Clear objects allocated to COMRAM (9 bytes)
   547  0009A4  EE00  F03E         	lfsr	0,__pbssCOMRAM
   548  0009A8  0E09               	movlw	9
   549  0009AA                     clear_0:
   550  0009AA  6AEE               	clrf	postinc0,c
   551  0009AC  06E8               	decf	wreg,f,c
   552  0009AE  E1FD               	bnz	clear_0
   553  0009B0                     end_of_initialization:
   554                           	opt stack 0
   555  0009B0                     __end_of__initialization:
   556                           	opt stack 0
   557  0009B0  9048               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   558  0009B2  9248               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   559  0009B4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   560  0009B6  6EF8               	movwf	tblptru,c
   561  0009B8  0100               	movlb	0
   562  0009BA  EF09  F000         	goto	_main	;jump to C main() function
   563                           tblptru	equ	0xFF8
   564                           tblptrh	equ	0xFF7
   565                           tblptrl	equ	0xFF6
   566                           tablat	equ	0xFF5
   567                           postinc0	equ	0xFEE
   568                           wreg	equ	0xFE8
   569                           
   570                           	psect	bssCOMRAM
   571  00003E                     __pbssCOMRAM:
   572                           	opt stack 0
   573  00003E                     _time:
   574                           	opt stack 0
   575  00003E                     	ds	7
   576  000045                     _counter:
   577                           	opt stack 0
   578  000045                     	ds	2
   579                           tblptru	equ	0xFF8
   580                           tblptrh	equ	0xFF7
   581                           tblptrl	equ	0xFF6
   582                           tablat	equ	0xFF5
   583                           postinc0	equ	0xFEE
   584                           wreg	equ	0xFE8
   585                           
   586                           	psect	dataCOMRAM
   587  000047                     __pdataCOMRAM:
   588                           	opt stack 0
   589  000047                     _screenMode:
   590                           	opt stack 0
   591  000047                     	ds	1
   592                           tblptru	equ	0xFF8
   593                           tblptrh	equ	0xFF7
   594                           tblptrl	equ	0xFF6
   595                           tablat	equ	0xFF5
   596                           postinc0	equ	0xFEE
   597                           wreg	equ	0xFE8
   598                           
   599                           	psect	cstackCOMRAM
   600  000001                     __pcstackCOMRAM:
   601                           	opt stack 0
   602  000001                     switchMenu@right:
   603                           	opt stack 0
   604                           
   605                           ; 1 bytes @ 0x0
   606  000001                     	ds	1
   607  000002                     switchMenu@key:
   608                           	opt stack 0
   609                           
   610                           ; 1 bytes @ 0x1
   611  000002                     	ds	1
   612  000003                     switchMenu@left:
   613                           	opt stack 0
   614                           
   615                           ; 1 bytes @ 0x2
   616  000003                     	ds	1
   617  000004                     ??_isr:
   618                           
   619                           ; 1 bytes @ 0x3
   620  000004                     	ds	14
   621  000012                     isr@keypress:
   622                           	opt stack 0
   623                           
   624                           ; 1 bytes @ 0x11
   625  000012                     	ds	1
   626  000013                     ??_isdigit:
   627  000013                     ??_I2C_Master_Wait:
   628  000013                     ?___wmul:
   629                           	opt stack 0
   630  000013                     ?___lwdiv:
   631                           	opt stack 0
   632  000013                     ?___lldiv:
   633                           	opt stack 0
   634  000013                     lcdNibble@temp:
   635                           	opt stack 0
   636  000013                     ___wmul@multiplier:
   637                           	opt stack 0
   638  000013                     ___lwdiv@dividend:
   639                           	opt stack 0
   640  000013                     ___lldiv@dividend:
   641                           	opt stack 0
   642                           
   643                           ; 4 bytes @ 0x12
   644  000013                     	ds	1
   645  000014                     I2C_Master_Read@a:
   646                           	opt stack 0
   647  000014                     lcdNibble@data:
   648                           	opt stack 0
   649  000014                     _isdigit$540:
   650                           	opt stack 0
   651  000014                     I2C_Master_Write@d:
   652                           	opt stack 0
   653                           
   654                           ; 2 bytes @ 0x13
   655  000014                     	ds	1
   656  000015                     I2C_Master_Read@temp:
   657                           	opt stack 0
   658  000015                     lcdInst@data:
   659                           	opt stack 0
   660  000015                     putch@data:
   661                           	opt stack 0
   662  000015                     isdigit@c:
   663                           	opt stack 0
   664  000015                     ___wmul@multiplicand:
   665                           	opt stack 0
   666  000015                     ___lwdiv@divisor:
   667                           	opt stack 0
   668                           
   669                           ; 2 bytes @ 0x14
   670  000015                     	ds	1
   671  000016                     ??_initLCD:
   672                           
   673                           ; 1 bytes @ 0x15
   674  000016                     	ds	1
   675  000017                     ___wmul@product:
   676                           	opt stack 0
   677  000017                     ___lwdiv@quotient:
   678                           	opt stack 0
   679  000017                     ___lldiv@divisor:
   680                           	opt stack 0
   681                           
   682                           ; 4 bytes @ 0x16
   683  000017                     	ds	2
   684  000019                     ___lwdiv@counter:
   685                           	opt stack 0
   686                           
   687                           ; 1 bytes @ 0x18
   688  000019                     	ds	1
   689  00001A                     ?___lwmod:
   690                           	opt stack 0
   691  00001A                     ___lwmod@dividend:
   692                           	opt stack 0
   693                           
   694                           ; 2 bytes @ 0x19
   695  00001A                     	ds	1
   696  00001B                     ___lldiv@quotient:
   697                           	opt stack 0
   698                           
   699                           ; 4 bytes @ 0x1A
   700  00001B                     	ds	1
   701  00001C                     ___lwmod@divisor:
   702                           	opt stack 0
   703                           
   704                           ; 2 bytes @ 0x1B
   705  00001C                     	ds	2
   706  00001E                     ___lwmod@counter:
   707                           	opt stack 0
   708                           
   709                           ; 1 bytes @ 0x1D
   710  00001E                     	ds	1
   711  00001F                     ?_printf:
   712                           	opt stack 0
   713  00001F                     ___lldiv@counter:
   714                           	opt stack 0
   715  00001F                     printf@f:
   716                           	opt stack 0
   717                           
   718                           ; 2 bytes @ 0x1E
   719  00001F                     	ds	1
   720  000020                     I2C_Master_Init@c:
   721                           	opt stack 0
   722                           
   723                           ; 4 bytes @ 0x1F
   724  000020                     	ds	4
   725  000024                     ??_I2C_Master_Init:
   726                           
   727                           ; 1 bytes @ 0x23
   728  000024                     	ds	3
   729  000027                     ??_printf:
   730                           
   731                           ; 1 bytes @ 0x26
   732  000027                     	ds	4
   733  00002B                     printf@idx:
   734                           	opt stack 0
   735                           
   736                           ; 1 bytes @ 0x2A
   737  00002B                     	ds	1
   738  00002C                     printf@ap:
   739                           	opt stack 0
   740                           
   741                           ; 2 bytes @ 0x2B
   742  00002C                     	ds	2
   743  00002E                     printf@prec:
   744                           	opt stack 0
   745                           
   746                           ; 1 bytes @ 0x2D
   747  00002E                     	ds	1
   748  00002F                     printf@val:
   749                           	opt stack 0
   750                           
   751                           ; 2 bytes @ 0x2E
   752  00002F                     	ds	2
   753  000031                     printf@flag:
   754                           	opt stack 0
   755                           
   756                           ; 1 bytes @ 0x30
   757  000031                     	ds	1
   758  000032                     printf@width:
   759                           	opt stack 0
   760                           
   761                           ; 2 bytes @ 0x31
   762  000032                     	ds	2
   763  000034                     printf@c:
   764                           	opt stack 0
   765                           
   766                           ; 1 bytes @ 0x33
   767  000034                     	ds	1
   768  000035                     ??_main:
   769                           
   770                           ; 1 bytes @ 0x34
   771  000035                     	ds	1
   772  000036                     main@min:
   773                           	opt stack 0
   774                           
   775                           ; 1 bytes @ 0x35
   776  000036                     	ds	1
   777  000037                     main@sec:
   778                           	opt stack 0
   779                           
   780                           ; 1 bytes @ 0x36
   781  000037                     	ds	1
   782  000038                     main@numBats:
   783                           	opt stack 0
   784                           
   785                           ; 1 bytes @ 0x37
   786  000038                     	ds	1
   787  000039                     main@numC:
   788                           	opt stack 0
   789                           
   790                           ; 1 bytes @ 0x38
   791  000039                     	ds	1
   792  00003A                     main@num9V:
   793                           	opt stack 0
   794                           
   795                           ; 1 bytes @ 0x39
   796  00003A                     	ds	1
   797  00003B                     main@numAA:
   798                           	opt stack 0
   799                           
   800                           ; 1 bytes @ 0x3A
   801  00003B                     	ds	1
   802  00003C                     main@i_273:
   803                           	opt stack 0
   804                           
   805                           ; 1 bytes @ 0x3B
   806  00003C                     	ds	1
   807  00003D                     main@i:
   808                           	opt stack 0
   809                           
   810                           ; 1 bytes @ 0x3C
   811  00003D                     	ds	1
   812                           tblptru	equ	0xFF8
   813                           tblptrh	equ	0xFF7
   814                           tblptrl	equ	0xFF6
   815                           tablat	equ	0xFF5
   816                           postinc0	equ	0xFEE
   817                           wreg	equ	0xFE8
   818                           
   819 ;;
   820 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   821 ;;
   822 ;; *************** function _main *****************
   823 ;; Defined at:
   824 ;;		line 16 in file "../main.c"
   825 ;; Parameters:    Size  Location     Type
   826 ;;		None
   827 ;; Auto vars:     Size  Location     Type
   828 ;;  i               1   59[COMRAM] unsigned char 
   829 ;;  numAA           1   58[COMRAM] unsigned char 
   830 ;;  num9V           1   57[COMRAM] unsigned char 
   831 ;;  numC            1   56[COMRAM] unsigned char 
   832 ;;  numBats         1   55[COMRAM] unsigned char 
   833 ;;  sec             1   54[COMRAM] unsigned char 
   834 ;;  min             1   53[COMRAM] unsigned char 
   835 ;;  i               1   60[COMRAM] unsigned char 
   836 ;; Return value:  Size  Location     Type
   837 ;;                  1    wreg      void 
   838 ;; Registers used:
   839 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   840 ;; Tracked objects:
   841 ;;		On entry : 0/0
   842 ;;		On exit  : 0/0
   843 ;;		Unchanged: 0/0
   844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   845 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   846 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   847 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   848 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   849 ;;Total ram usage:        9 bytes
   850 ;; Hardware stack levels required when called:    5
   851 ;; This function calls:
   852 ;;		_I2C_Master_Init
   853 ;;		_I2C_Master_Read
   854 ;;		_I2C_Master_Start
   855 ;;		_I2C_Master_Stop
   856 ;;		_I2C_Master_Write
   857 ;;		_initLCD
   858 ;;		_lcdInst
   859 ;;		_printf
   860 ;; This function is called by:
   861 ;;		Startup code after reset
   862 ;; This function uses a non-reentrant model
   863 ;;
   864                           
   865                           	psect	text0
   866  000012                     __ptext0:
   867                           	opt stack 0
   868  000012                     _main:
   869                           	opt stack 26
   870                           
   871                           ;main.c: 17: TRISC = 0x00;
   872                           
   873                           ;incstack = 0
   874  000012  0E00               	movlw	0
   875  000014  6E94               	movwf	3988,c	;volatile
   876                           
   877                           ;main.c: 18: TRISD = 0x00;
   878  000016  0E00               	movlw	0
   879  000018  6E95               	movwf	3989,c	;volatile
   880                           
   881                           ;main.c: 19: TRISB = 0xFF;
   882  00001A  6893               	setf	3987,c	;volatile
   883                           
   884                           ;main.c: 20: LATB = 0x00;
   885  00001C  0E00               	movlw	0
   886  00001E  6E8A               	movwf	3978,c	;volatile
   887                           
   888                           ;main.c: 21: LATC = 0x00;
   889  000020  0E00               	movlw	0
   890  000022  6E8B               	movwf	3979,c	;volatile
   891                           
   892                           ;main.c: 22: ADCON0 = 0x00;
   893  000024  0E00               	movlw	0
   894  000026  6EC2               	movwf	4034,c	;volatile
   895                           
   896                           ;main.c: 23: ADCON1 = 0xFF;
   897  000028  68C1               	setf	4033,c	;volatile
   898                           
   899                           ;main.c: 24: RC1 = 0;
   900  00002A  9282               	bcf	3970,1,c	;volatile
   901                           
   902                           ;main.c: 26: INT1IE = 1;
   903  00002C  86F0               	bsf	intcon3,3,c	;volatile
   904                           
   905                           ;main.c: 27: TMR0IE = 1;
   906  00002E  8AF2               	bsf	intcon,5,c	;volatile
   907                           
   908                           ;main.c: 29: T0CON = 0b01000111;
   909  000030  0E47               	movlw	71
   910  000032  6ED5               	movwf	4053,c	;volatile
   911                           
   912                           ;main.c: 37: initLCD();
   913  000034  EC6A  F004         	call	_initLCD	;wreg free
   914                           
   915                           ;main.c: 39: I2C_Master_Init(10000);
   916  000038  0E10               	movlw	16
   917  00003A  6E20               	movwf	I2C_Master_Init@c,c
   918  00003C  0E27               	movlw	39
   919  00003E  6E21               	movwf	I2C_Master_Init@c+1,c
   920  000040  0E00               	movlw	0
   921  000042  6E22               	movwf	I2C_Master_Init@c+2,c
   922  000044  0E00               	movlw	0
   923  000046  6E23               	movwf	I2C_Master_Init@c+3,c
   924  000048  ECED  F003         	call	_I2C_Master_Init	;wreg free
   925                           
   926                           ;main.c: 40: (INTCONbits.GIE = 1);
   927  00004C  8EF2               	bsf	intcon,7,c	;volatile
   928                           
   929                           ;main.c: 43: while (screenMode == 2){
   930                           
   931                           ;main.c: 42: while (1) {
   932  00004E  D048               	goto	l1709
   933  000050                     l145:
   934                           
   935                           ;main.c: 44: (INTCONbits.GIE = 0);
   936  000050  9EF2               	bcf	intcon,7,c	;volatile
   937                           
   938                           ;main.c: 45: lcdInst(0b10000000);;
   939  000052  0E80               	movlw	128
   940  000054  EC23  F005         	call	_lcdInst
   941                           
   942                           ;main.c: 46: printf("START:   PRESS *");
   943  000058  0EDD               	movlw	low STR_1
   944  00005A  6E1F               	movwf	printf@f,c
   945  00005C  0EFF               	movlw	high STR_1
   946  00005E  6E20               	movwf	printf@f+1,c
   947  000060  EC95  F001         	call	_printf	;wreg free
   948                           
   949                           ;main.c: 47: lcdInst(0b11000000);;
   950  000064  0EC0               	movlw	192
   951  000066  EC23  F005         	call	_lcdInst
   952                           
   953                           ;main.c: 48: printf("< 4   DATA   6 >");
   954  00006A  0EEE               	movlw	low STR_2
   955  00006C  6E1F               	movwf	printf@f,c
   956  00006E  0EFF               	movlw	high STR_2
   957  000070  6E20               	movwf	printf@f+1,c
   958  000072  EC95  F001         	call	_printf	;wreg free
   959                           
   960                           ;main.c: 49: (INTCONbits.GIE = 1);
   961  000076  8EF2               	bsf	intcon,7,c	;volatile
   962                           
   963                           ;main.c: 50: unsigned char i;
   964                           ;main.c: 51: for(i=0;i<50;i++){
   965  000078  0E00               	movlw	0
   966  00007A  6E3D               	movwf	main@i,c
   967  00007C                     l1679:
   968  00007C  0E31               	movlw	49
   969  00007E  643D               	cpfsgt	main@i,c
   970  000080  D001               	goto	l1683
   971  000082  D00E               	goto	l1691
   972  000084                     l1683:
   973                           
   974                           ;main.c: 52: if (screenMode != 2)
   975  000084  0E02               	movlw	2
   976  000086  1847               	xorwf	_screenMode,w,c
   977  000088  A4D8               	btfss	status,2,c
   978  00008A  D00A               	goto	l1691
   979                           
   980                           ;main.c: 54: _delay((unsigned long)((10)*(10000000/4000.0)));
   981                           
   982                           ;main.c: 53: break;
   983  00008C  0E21               	movlw	33
   984  00008E  6E35               	movwf	??_main& (0+255),c
   985  000090  0E76               	movlw	118
   986  000092                     u1387:
   987  000092  2EE8               	decfsz	wreg,f,c
   988  000094  D7FE               	bra	u1387
   989  000096  2E35               	decfsz	??_main& (0+255),f,c
   990  000098  D7FC               	bra	u1387
   991  00009A  D000               	nop2	
   992  00009C  2A3D               	incf	main@i,f,c
   993  00009E  D7EE               	goto	l1679
   994  0000A0                     l1691:
   995                           
   996                           ;main.c: 55: }
   997                           ;main.c: 56: lcdInst(0b10000000);;
   998  0000A0  0E80               	movlw	128
   999  0000A2  EC23  F005         	call	_lcdInst
  1000                           
  1001                           ;main.c: 57: lcdInst(0b11000000);;
  1002  0000A6  0EC0               	movlw	192
  1003  0000A8  EC23  F005         	call	_lcdInst
  1004                           
  1005                           ;main.c: 58: printf(" <4   DATA   6> ");
  1006  0000AC  0EBB               	movlw	low STR_3
  1007  0000AE  6E1F               	movwf	printf@f,c
  1008  0000B0  0EFF               	movlw	high STR_3
  1009  0000B2  6E20               	movwf	printf@f+1,c
  1010  0000B4  EC95  F001         	call	_printf	;wreg free
  1011                           
  1012                           ;main.c: 59: for(i=0;i<50;i++){
  1013  0000B8  0E00               	movlw	0
  1014  0000BA  6E3D               	movwf	main@i,c
  1015  0000BC                     l1697:
  1016  0000BC  0E31               	movlw	49
  1017  0000BE  643D               	cpfsgt	main@i,c
  1018  0000C0  D001               	goto	l1701
  1019  0000C2  D00E               	goto	l1709
  1020  0000C4                     l1701:
  1021                           
  1022                           ;main.c: 60: if (screenMode != 2)
  1023  0000C4  0E02               	movlw	2
  1024  0000C6  1847               	xorwf	_screenMode,w,c
  1025  0000C8  A4D8               	btfss	status,2,c
  1026  0000CA  D00A               	goto	l1709
  1027                           
  1028                           ;main.c: 62: _delay((unsigned long)((10)*(10000000/4000.0)));
  1029                           
  1030                           ;main.c: 61: break;
  1031  0000CC  0E21               	movlw	33
  1032  0000CE  6E35               	movwf	??_main& (0+255),c
  1033  0000D0  0E76               	movlw	118
  1034  0000D2                     u1397:
  1035  0000D2  2EE8               	decfsz	wreg,f,c
  1036  0000D4  D7FE               	bra	u1397
  1037  0000D6  2E35               	decfsz	??_main& (0+255),f,c
  1038  0000D8  D7FC               	bra	u1397
  1039  0000DA  D000               	nop2	
  1040  0000DC  2A3D               	incf	main@i,f,c
  1041  0000DE  D7EE               	goto	l1697
  1042  0000E0                     l1709:
  1043  0000E0  0E02               	movlw	2
  1044  0000E2  1847               	xorwf	_screenMode,w,c
  1045  0000E4  A4D8               	btfss	status,2,c
  1046  0000E6  D013               	goto	l1717
  1047  0000E8  D7B3               	goto	l145
  1048  0000EA                     l1711:
  1049                           
  1050                           ;main.c: 66: lcdInst(0b10000000);;
  1051  0000EA  0E80               	movlw	128
  1052  0000EC  EC23  F005         	call	_lcdInst
  1053                           
  1054                           ;main.c: 67: printf("RUNNING...      ");
  1055  0000F0  0E44               	movlw	low STR_4
  1056  0000F2  6E1F               	movwf	printf@f,c
  1057  0000F4  0EFF               	movlw	high STR_4
  1058  0000F6  6E20               	movwf	printf@f+1,c
  1059  0000F8  EC95  F001         	call	_printf	;wreg free
  1060                           
  1061                           ;main.c: 68: lcdInst(0b11000000);;
  1062  0000FC  0EC0               	movlw	192
  1063  0000FE  EC23  F005         	call	_lcdInst
  1064                           
  1065                           ;main.c: 69: printf("                ");
  1066  000102  0E33               	movlw	low STR_5
  1067  000104  6E1F               	movwf	printf@f,c
  1068  000106  0EFF               	movlw	high STR_5
  1069  000108  6E20               	movwf	printf@f+1,c
  1070  00010A  EC95  F001         	call	_printf	;wreg free
  1071  00010E                     l1717:
  1072  00010E  0447               	decf	_screenMode,w,c
  1073  000110  A4D8               	btfss	status,2,c
  1074  000112  D013               	goto	l1725
  1075  000114  D7EA               	goto	l1711
  1076  000116                     l1719:
  1077                           
  1078                           ;main.c: 77: lcdInst(0b10000000);;
  1079  000116  0E80               	movlw	128
  1080  000118  EC23  F005         	call	_lcdInst
  1081                           
  1082                           ;main.c: 78: printf("DONE! PRESS *   ");
  1083  00011C  0E99               	movlw	low STR_6
  1084  00011E  6E1F               	movwf	printf@f,c
  1085  000120  0EFF               	movlw	high STR_6
  1086  000122  6E20               	movwf	printf@f+1,c
  1087  000124  EC95  F001         	call	_printf	;wreg free
  1088                           
  1089                           ;main.c: 79: lcdInst(0b11000000);;
  1090  000128  0EC0               	movlw	192
  1091  00012A  EC23  F005         	call	_lcdInst
  1092                           
  1093                           ;main.c: 80: printf("TO CONTINUE     ");
  1094  00012E  0E66               	movlw	low STR_7
  1095  000130  6E1F               	movwf	printf@f,c
  1096  000132  0EFF               	movlw	high STR_7
  1097  000134  6E20               	movwf	printf@f+1,c
  1098  000136  EC95  F001         	call	_printf	;wreg free
  1099  00013A                     l1725:
  1100  00013A  5047               	movf	_screenMode,w,c
  1101  00013C  A4D8               	btfss	status,2,c
  1102  00013E  D01F               	goto	l1739
  1103  000140  D7EA               	goto	l1719
  1104  000142                     l160:
  1105                           
  1106                           ;main.c: 84: (INTCONbits.GIE = 0);
  1107  000142  9EF2               	bcf	intcon,7,c	;volatile
  1108                           
  1109                           ;main.c: 85: unsigned char min, sec;
  1110                           ;main.c: 88: min = 1;
  1111  000144  0E01               	movlw	1
  1112  000146  6E36               	movwf	main@min,c
  1113                           
  1114                           ;main.c: 89: sec = 1;
  1115  000148  0E01               	movlw	1
  1116  00014A  6E37               	movwf	main@sec,c
  1117                           
  1118                           ;main.c: 91: lcdInst(0b10000000);;
  1119  00014C  0E80               	movlw	128
  1120  00014E  EC23  F005         	call	_lcdInst
  1121                           
  1122                           ;main.c: 92: printf("TOTAL RUN TIME: ");
  1123  000152  0EAA               	movlw	low STR_8
  1124  000154  6E1F               	movwf	printf@f,c
  1125  000156  0EFF               	movlw	high STR_8
  1126  000158  6E20               	movwf	printf@f+1,c
  1127  00015A  EC95  F001         	call	_printf	;wreg free
  1128                           
  1129                           ;main.c: 93: lcdInst(0b11000000);;
  1130  00015E  0EC0               	movlw	192
  1131  000160  EC23  F005         	call	_lcdInst
  1132                           
  1133                           ;main.c: 94: printf("%02x:%02x               ", min, sec);
  1134  000164  0E9E               	movlw	low STR_9
  1135  000166  6E1F               	movwf	printf@f,c
  1136  000168  0EFE               	movlw	high STR_9
  1137  00016A  6E20               	movwf	printf@f+1,c
  1138  00016C  C036  F021         	movff	main@min,?_printf+2
  1139  000170  6A22               	clrf	?_printf+3,c
  1140  000172  C037  F023         	movff	main@sec,?_printf+4
  1141  000176  6A24               	clrf	?_printf+5,c
  1142  000178  EC95  F001         	call	_printf	;wreg free
  1143                           
  1144                           ;main.c: 95: (INTCONbits.GIE = 1);
  1145  00017C  8EF2               	bsf	intcon,7,c	;volatile
  1146  00017E                     l1739:
  1147  00017E  0E03               	movlw	3
  1148  000180  1847               	xorwf	_screenMode,w,c
  1149  000182  A4D8               	btfss	status,2,c
  1150  000184  D018               	goto	l1751
  1151  000186  D7DD               	goto	l160
  1152  000188                     l1741:
  1153                           
  1154                           ;main.c: 98: unsigned char numBats;
  1155                           ;main.c: 101: numBats = 6;
  1156  000188  0E06               	movlw	6
  1157  00018A  6E38               	movwf	main@numBats,c
  1158                           
  1159                           ;main.c: 103: lcdInst(0b10000000);;
  1160  00018C  0E80               	movlw	128
  1161  00018E  EC23  F005         	call	_lcdInst
  1162                           
  1163                           ;main.c: 104: printf("TOTAL NUMBER OF ");
  1164  000192  0ECC               	movlw	low STR_10
  1165  000194  6E1F               	movwf	printf@f,c
  1166  000196  0EFF               	movlw	high STR_10
  1167  000198  6E20               	movwf	printf@f+1,c
  1168  00019A  EC95  F001         	call	_printf	;wreg free
  1169                           
  1170                           ;main.c: 105: lcdInst(0b11000000);;
  1171  00019E  0EC0               	movlw	192
  1172  0001A0  EC23  F005         	call	_lcdInst
  1173                           
  1174                           ;main.c: 106: printf("BATTERIES: %02d   ", numBats);
  1175  0001A4  0E0F               	movlw	low STR_11
  1176  0001A6  6E1F               	movwf	printf@f,c
  1177  0001A8  0EFF               	movlw	high STR_11
  1178  0001AA  6E20               	movwf	printf@f+1,c
  1179  0001AC  C038  F021         	movff	main@numBats,?_printf+2
  1180  0001B0  6A22               	clrf	?_printf+3,c
  1181  0001B2  EC95  F001         	call	_printf	;wreg free
  1182  0001B6                     l1751:
  1183  0001B6  0E04               	movlw	4
  1184  0001B8  1847               	xorwf	_screenMode,w,c
  1185  0001BA  A4D8               	btfss	status,2,c
  1186  0001BC  D01A               	goto	l1765
  1187  0001BE  D7E4               	goto	l1741
  1188  0001C0                     l166:
  1189                           
  1190                           ;main.c: 109: (INTCONbits.GIE = 0);
  1191  0001C0  9EF2               	bcf	intcon,7,c	;volatile
  1192                           
  1193                           ;main.c: 110: unsigned char numC;
  1194                           ;main.c: 113: numC = 3;
  1195  0001C2  0E03               	movlw	3
  1196  0001C4  6E39               	movwf	main@numC,c
  1197                           
  1198                           ;main.c: 115: lcdInst(0b10000000);;
  1199  0001C6  0E80               	movlw	128
  1200  0001C8  EC23  F005         	call	_lcdInst
  1201                           
  1202                           ;main.c: 116: printf("NUMBER OF C     ");
  1203  0001CC  0E55               	movlw	low STR_12
  1204  0001CE  6E1F               	movwf	printf@f,c
  1205  0001D0  0EFF               	movlw	high STR_12
  1206  0001D2  6E20               	movwf	printf@f+1,c
  1207  0001D4  EC95  F001         	call	_printf	;wreg free
  1208                           
  1209                           ;main.c: 117: lcdInst(0b11000000);;
  1210  0001D8  0EC0               	movlw	192
  1211  0001DA  EC23  F005         	call	_lcdInst
  1212                           
  1213                           ;main.c: 118: printf("BATTERIES: %02d   ", numC);
  1214  0001DE  0E0F               	movlw	low STR_11
  1215  0001E0  6E1F               	movwf	printf@f,c
  1216  0001E2  0EFF               	movlw	high STR_11
  1217  0001E4  6E20               	movwf	printf@f+1,c
  1218  0001E6  C039  F021         	movff	main@numC,?_printf+2
  1219  0001EA  6A22               	clrf	?_printf+3,c
  1220  0001EC  EC95  F001         	call	_printf	;wreg free
  1221                           
  1222                           ;main.c: 119: (INTCONbits.GIE = 1);
  1223  0001F0  8EF2               	bsf	intcon,7,c	;volatile
  1224  0001F2                     l1765:
  1225  0001F2  0E05               	movlw	5
  1226  0001F4  1847               	xorwf	_screenMode,w,c
  1227  0001F6  A4D8               	btfss	status,2,c
  1228  0001F8  D01A               	goto	l1779
  1229  0001FA  D7E2               	goto	l166
  1230  0001FC                     l169:
  1231                           
  1232                           ;main.c: 122: (INTCONbits.GIE = 0);
  1233  0001FC  9EF2               	bcf	intcon,7,c	;volatile
  1234                           
  1235                           ;main.c: 123: unsigned char num9V;
  1236                           ;main.c: 126: num9V = 10;
  1237  0001FE  0E0A               	movlw	10
  1238  000200  6E3A               	movwf	main@num9V,c
  1239                           
  1240                           ;main.c: 128: lcdInst(0b10000000);;
  1241  000202  0E80               	movlw	128
  1242  000204  EC23  F005         	call	_lcdInst
  1243                           
  1244                           ;main.c: 129: printf("NUMBER OF 9V    ");
  1245  000208  0E88               	movlw	low STR_14
  1246  00020A  6E1F               	movwf	printf@f,c
  1247  00020C  0EFF               	movlw	high STR_14
  1248  00020E  6E20               	movwf	printf@f+1,c
  1249  000210  EC95  F001         	call	_printf	;wreg free
  1250                           
  1251                           ;main.c: 130: lcdInst(0b11000000);;
  1252  000214  0EC0               	movlw	192
  1253  000216  EC23  F005         	call	_lcdInst
  1254                           
  1255                           ;main.c: 131: printf("BATTERIES: %02d     ", num9V);
  1256  00021A  0EE5               	movlw	low STR_15
  1257  00021C  6E1F               	movwf	printf@f,c
  1258  00021E  0EFE               	movlw	high STR_15
  1259  000220  6E20               	movwf	printf@f+1,c
  1260  000222  C03A  F021         	movff	main@num9V,?_printf+2
  1261  000226  6A22               	clrf	?_printf+3,c
  1262  000228  EC95  F001         	call	_printf	;wreg free
  1263                           
  1264                           ;main.c: 132: (INTCONbits.GIE = 1);
  1265  00022C  8EF2               	bsf	intcon,7,c	;volatile
  1266  00022E                     l1779:
  1267  00022E  0E06               	movlw	6
  1268  000230  1847               	xorwf	_screenMode,w,c
  1269  000232  A4D8               	btfss	status,2,c
  1270  000234  D01A               	goto	l1793
  1271  000236  D7E2               	goto	l169
  1272  000238                     l172:
  1273                           
  1274                           ;main.c: 135: (INTCONbits.GIE = 0);
  1275  000238  9EF2               	bcf	intcon,7,c	;volatile
  1276                           
  1277                           ;main.c: 136: unsigned char numAA;
  1278                           ;main.c: 139: numAA = 2;
  1279  00023A  0E02               	movlw	2
  1280  00023C  6E3B               	movwf	main@numAA,c
  1281                           
  1282                           ;main.c: 141: lcdInst(0b10000000);;
  1283  00023E  0E80               	movlw	128
  1284  000240  EC23  F005         	call	_lcdInst
  1285                           
  1286                           ;main.c: 142: printf("NUMBER OF AA    ");
  1287  000244  0E77               	movlw	low STR_16
  1288  000246  6E1F               	movwf	printf@f,c
  1289  000248  0EFF               	movlw	high STR_16
  1290  00024A  6E20               	movwf	printf@f+1,c
  1291  00024C  EC95  F001         	call	_printf	;wreg free
  1292                           
  1293                           ;main.c: 143: lcdInst(0b11000000);;
  1294  000250  0EC0               	movlw	192
  1295  000252  EC23  F005         	call	_lcdInst
  1296                           
  1297                           ;main.c: 144: printf("BATTERIES: %02x     ", numAA);
  1298  000256  0EFA               	movlw	low STR_17
  1299  000258  6E1F               	movwf	printf@f,c
  1300  00025A  0EFE               	movlw	high STR_17
  1301  00025C  6E20               	movwf	printf@f+1,c
  1302  00025E  C03B  F021         	movff	main@numAA,?_printf+2
  1303  000262  6A22               	clrf	?_printf+3,c
  1304  000264  EC95  F001         	call	_printf	;wreg free
  1305                           
  1306                           ;main.c: 145: (INTCONbits.GIE = 1);
  1307  000268  8EF2               	bsf	intcon,7,c	;volatile
  1308  00026A                     l1793:
  1309  00026A  0E07               	movlw	7
  1310  00026C  1847               	xorwf	_screenMode,w,c
  1311  00026E  A4D8               	btfss	status,2,c
  1312  000270  D057               	goto	l1815
  1313  000272  D7E2               	goto	l172
  1314  000274                     l1795:
  1315                           
  1316                           ;main.c: 149: I2C_Master_Start();
  1317  000274  EC32  F005         	call	_I2C_Master_Start	;wreg free
  1318                           
  1319                           ;main.c: 150: I2C_Master_Write(0b11010000);
  1320  000278  0E00               	movlw	0
  1321  00027A  6E15               	movwf	I2C_Master_Write@d+1,c
  1322  00027C  0ED0               	movlw	208
  1323  00027E  6E14               	movwf	I2C_Master_Write@d,c
  1324  000280  EC29  F005         	call	_I2C_Master_Write	;wreg free
  1325                           
  1326                           ;main.c: 151: I2C_Master_Write(0x00);
  1327  000284  0E00               	movlw	0
  1328  000286  6E15               	movwf	I2C_Master_Write@d+1,c
  1329  000288  0E00               	movlw	0
  1330  00028A  6E14               	movwf	I2C_Master_Write@d,c
  1331  00028C  EC29  F005         	call	_I2C_Master_Write	;wreg free
  1332                           
  1333                           ;main.c: 152: I2C_Master_Stop();
  1334  000290  EC2E  F005         	call	_I2C_Master_Stop	;wreg free
  1335                           
  1336                           ;main.c: 154: I2C_Master_Start();
  1337  000294  EC32  F005         	call	_I2C_Master_Start	;wreg free
  1338                           
  1339                           ;main.c: 155: I2C_Master_Write(0b11010001);
  1340  000298  0E00               	movlw	0
  1341  00029A  6E15               	movwf	I2C_Master_Write@d+1,c
  1342  00029C  0ED1               	movlw	209
  1343  00029E  6E14               	movwf	I2C_Master_Write@d,c
  1344  0002A0  EC29  F005         	call	_I2C_Master_Write	;wreg free
  1345                           
  1346                           ;main.c: 156: for(unsigned char i=0;i<0x06;i++){
  1347  0002A4  0E00               	movlw	0
  1348  0002A6  6E3C               	movwf	main@i_273,c
  1349  0002A8                     l1799:
  1350  0002A8  0E05               	movlw	5
  1351  0002AA  643C               	cpfsgt	main@i_273,c
  1352  0002AC  D001               	goto	l1803
  1353  0002AE  D00E               	goto	l1809
  1354  0002B0                     l1803:
  1355                           
  1356                           ;main.c: 157: time[i] = I2C_Master_Read(1);
  1357  0002B0  503C               	movf	main@i_273,w,c
  1358  0002B2  0D01               	mullw	1
  1359  0002B4  0E3E               	movlw	low _time
  1360  0002B6  24F3               	addwf	prodl,w,c
  1361  0002B8  6ED9               	movwf	fsr2l,c
  1362  0002BA  0E00               	movlw	high _time
  1363  0002BC  20F4               	addwfc	prodh,w,c
  1364  0002BE  6EDA               	movwf	fsr2h,c
  1365  0002C0  0E01               	movlw	1
  1366  0002C2  ECF2  F004         	call	_I2C_Master_Read
  1367  0002C6  6EDF               	movwf	indf2,c
  1368  0002C8  2A3C               	incf	main@i_273,f,c
  1369  0002CA  D7EE               	goto	l1799
  1370  0002CC                     l1809:
  1371                           
  1372                           ;main.c: 158: }
  1373                           ;main.c: 159: time[6] = I2C_Master_Read(0);
  1374  0002CC  0E00               	movlw	0
  1375  0002CE  ECF2  F004         	call	_I2C_Master_Read
  1376  0002D2  6E44               	movwf	_time+6,c
  1377                           
  1378                           ;main.c: 160: I2C_Master_Stop();
  1379  0002D4  EC2E  F005         	call	_I2C_Master_Stop	;wreg free
  1380                           
  1381                           ;main.c: 161: lcdInst(0b10000000);;
  1382  0002D8  0E80               	movlw	128
  1383  0002DA  EC23  F005         	call	_lcdInst
  1384                           
  1385                           ;main.c: 162: printf("DATE: %02x/%02x/%02x  ", time[6],time[5],time[4]);
  1386  0002DE  0EB7               	movlw	low STR_18
  1387  0002E0  6E1F               	movwf	printf@f,c
  1388  0002E2  0EFE               	movlw	high STR_18
  1389  0002E4  6E20               	movwf	printf@f+1,c
  1390  0002E6  C044  F021         	movff	_time+6,?_printf+2
  1391  0002EA  6A22               	clrf	?_printf+3,c
  1392  0002EC  C043  F023         	movff	_time+5,?_printf+4
  1393  0002F0  6A24               	clrf	?_printf+5,c
  1394  0002F2  C042  F025         	movff	_time+4,?_printf+6
  1395  0002F6  6A26               	clrf	?_printf+7,c
  1396  0002F8  EC95  F001         	call	_printf	;wreg free
  1397                           
  1398                           ;main.c: 163: lcdInst(0b11000000);;
  1399  0002FC  0EC0               	movlw	192
  1400  0002FE  EC23  F005         	call	_lcdInst
  1401                           
  1402                           ;main.c: 164: printf("TIME: %02x:%02x:%02x  ", time[2],time[1],time[0]);
  1403  000302  0ECE               	movlw	low STR_19
  1404  000304  6E1F               	movwf	printf@f,c
  1405  000306  0EFE               	movlw	high STR_19
  1406  000308  6E20               	movwf	printf@f+1,c
  1407  00030A  C040  F021         	movff	_time+2,?_printf+2
  1408  00030E  6A22               	clrf	?_printf+3,c
  1409  000310  C03F  F023         	movff	_time+1,?_printf+4
  1410  000314  6A24               	clrf	?_printf+5,c
  1411  000316  C03E  F025         	movff	_time,?_printf+6
  1412  00031A  6A26               	clrf	?_printf+7,c
  1413  00031C  EC95  F001         	call	_printf	;wreg free
  1414  000320                     l1815:
  1415  000320  0E08               	movlw	8
  1416  000322  1847               	xorwf	_screenMode,w,c
  1417  000324  A4D8               	btfss	status,2,c
  1418  000326  D6DC               	goto	l1709
  1419  000328  D7A5               	goto	l1795
  1420  00032A                     __end_of_main:
  1421                           	opt stack 0
  1422                           tblptru	equ	0xFF8
  1423                           tblptrh	equ	0xFF7
  1424                           tblptrl	equ	0xFF6
  1425                           tablat	equ	0xFF5
  1426                           prodh	equ	0xFF4
  1427                           prodl	equ	0xFF3
  1428                           intcon	equ	0xFF2
  1429                           intcon3	equ	0xFF0
  1430                           postinc0	equ	0xFEE
  1431                           wreg	equ	0xFE8
  1432                           indf2	equ	0xFDF
  1433                           fsr2h	equ	0xFDA
  1434                           fsr2l	equ	0xFD9
  1435                           status	equ	0xFD8
  1436                           
  1437 ;; *************** function _printf *****************
  1438 ;; Defined at:
  1439 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  1440 ;; Parameters:    Size  Location     Type
  1441 ;;  f               2   30[COMRAM] PTR const unsigned char 
  1442 ;;		 -> STR_19(23), STR_18(23), STR_17(21), STR_16(17), 
  1443 ;;		 -> STR_15(21), STR_14(17), STR_13(19), STR_12(17), 
  1444 ;;		 -> STR_11(19), STR_10(17), STR_9(25), STR_8(17), 
  1445 ;;		 -> STR_7(17), STR_6(17), STR_5(17), STR_4(17), 
  1446 ;;		 -> STR_3(17), STR_2(17), STR_1(17), 
  1447 ;; Auto vars:     Size  Location     Type
  1448 ;;  idx             1   42[COMRAM] unsigned char 
  1449 ;;  tmpval          4    0        struct .
  1450 ;;  cp              3    0        PTR const unsigned char 
  1451 ;;  width           2   49[COMRAM] int 
  1452 ;;  val             2   46[COMRAM] unsigned int 
  1453 ;;  ap              2   43[COMRAM] PTR void [1]
  1454 ;;		 -> ?_printf(2), 
  1455 ;;  len             2    0        unsigned int 
  1456 ;;  c               1   51[COMRAM] char 
  1457 ;;  flag            1   48[COMRAM] unsigned char 
  1458 ;;  prec            1   45[COMRAM] char 
  1459 ;; Return value:  Size  Location     Type
  1460 ;;                  2   30[COMRAM] int 
  1461 ;; Registers used:
  1462 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1463 ;; Tracked objects:
  1464 ;;		On entry : 0/0
  1465 ;;		On exit  : 0/0
  1466 ;;		Unchanged: 0/0
  1467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1468 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1469 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1470 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1471 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1472 ;;Total ram usage:       22 bytes
  1473 ;; Hardware stack levels used:    1
  1474 ;; Hardware stack levels required when called:    4
  1475 ;; This function calls:
  1476 ;;		___lwdiv
  1477 ;;		___lwmod
  1478 ;;		___wmul
  1479 ;;		_isdigit
  1480 ;;		_putch
  1481 ;; This function is called by:
  1482 ;;		_main
  1483 ;; This function uses a non-reentrant model
  1484 ;;
  1485                           
  1486                           	psect	text1
  1487  00032A                     __ptext1:
  1488                           	opt stack 0
  1489  00032A                     _printf:
  1490                           	opt stack 26
  1491                           
  1492                           ;doprnt.c: 466: va_list ap;
  1493                           ;doprnt.c: 499: signed char c;
  1494                           ;doprnt.c: 501: int width;
  1495                           ;doprnt.c: 506: signed char prec;
  1496                           ;doprnt.c: 508: unsigned char flag;
  1497                           ;doprnt.c: 523: union {
  1498                           ;doprnt.c: 524: unsigned long vd;
  1499                           ;doprnt.c: 525: double integ;
  1500                           ;doprnt.c: 526: } tmpval;
  1501                           ;doprnt.c: 528: unsigned int val;
  1502                           ;doprnt.c: 529: unsigned len;
  1503                           ;doprnt.c: 530: const char * cp;
  1504                           ;doprnt.c: 533: *ap = __va_start();
  1505                           
  1506                           ;incstack = 0
  1507  00032A  0E21               	movlw	low (?_printf+2)
  1508  00032C  6E2C               	movwf	printf@ap,c
  1509  00032E  0E00               	movlw	high (?_printf+2)
  1510  000330  6E2D               	movwf	printf@ap+1,c
  1511                           
  1512                           ;doprnt.c: 536: while(c = *f++) {
  1513  000332  D174               	goto	l1633
  1514  000334                     l1507:
  1515                           
  1516                           ;doprnt.c: 538: if(c != '%')
  1517  000334  0E25               	movlw	37
  1518  000336  1834               	xorwf	printf@c,w,c
  1519  000338  B4D8               	btfsc	status,2,c
  1520  00033A  D004               	goto	l1511
  1521                           
  1522                           ;doprnt.c: 540: {
  1523                           ;doprnt.c: 541: (putch(c) );
  1524  00033C  5034               	movf	printf@c,w,c
  1525  00033E  EC1D  F005         	call	_putch
  1526                           
  1527                           ;doprnt.c: 542: continue;
  1528  000342  D16C               	goto	l1633
  1529  000344                     l1511:
  1530                           
  1531                           ;doprnt.c: 543: }
  1532                           ;doprnt.c: 546: width = 0;
  1533  000344  0E00               	movlw	0
  1534  000346  6E33               	movwf	printf@width+1,c
  1535  000348  0E00               	movlw	0
  1536  00034A  6E32               	movwf	printf@width,c
  1537                           
  1538                           ;doprnt.c: 548: flag = 0;
  1539  00034C  0E00               	movlw	0
  1540  00034E  6E31               	movwf	printf@flag,c
  1541                           
  1542                           ;doprnt.c: 551: switch(*f) {
  1543                           
  1544                           ;doprnt.c: 550: for(;;) {
  1545  000350  D003               	goto	l1517
  1546  000352                     l1513:
  1547                           
  1548                           ;doprnt.c: 580: flag |= 0x04;
  1549  000352  8431               	bsf	printf@flag,2,c
  1550                           
  1551                           ;doprnt.c: 581: f++;
  1552  000354  4A1F               	infsnz	printf@f,f,c
  1553  000356  2A20               	incf	printf@f+1,f,c
  1554  000358                     l1517:
  1555  000358  C01F  FFF6         	movff	printf@f,tblptrl
  1556  00035C  C020  FFF7         	movff	printf@f+1,tblptrh
  1557  000360                     	if	0	;tblptru may be non-zero
  1558  000360                     	endif
  1559  000360                     	if	0	;tblptru may be non-zero
  1560  000360                     	endif
  1561  000360  0008               	tblrd		*
  1562  000362  50F5               	movf	tablat,w,c
  1563                           
  1564                           ; Switch size 1, requested type "space"
  1565                           ; Number of cases is 1, Range of values is 48 to 48
  1566                           ; switch strategies available:
  1567                           ; Name         Instructions Cycles
  1568                           ; simple_byte            4     3 (average)
  1569                           ;	Chosen strategy is simple_byte
  1570  000364  0A30               	xorlw	48	; case 48
  1571  000366  B4D8               	btfsc	status,2,c
  1572  000368  D7F4               	goto	l1513
  1573                           
  1574                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1575                           
  1576                           ;doprnt.c: 586: }
  1577                           
  1578                           ;doprnt.c: 585: break;
  1579  00036A  C01F  FFF6         	movff	printf@f,tblptrl
  1580  00036E  C020  FFF7         	movff	printf@f+1,tblptrh
  1581  000372                     	if	0	;tblptru may be non-zero
  1582  000372                     	endif
  1583  000372                     	if	0	;tblptru may be non-zero
  1584  000372                     	endif
  1585  000372  0008               	tblrd		*
  1586  000374  50F5               	movf	tablat,w,c
  1587  000376  EC05  F005         	call	_isdigit
  1588  00037A  A0D8               	btfss	status,0,c
  1589  00037C  D035               	goto	l1535
  1590                           
  1591                           ;doprnt.c: 598: width = 0;
  1592  00037E  0E00               	movlw	0
  1593  000380  6E33               	movwf	printf@width+1,c
  1594  000382  0E00               	movlw	0
  1595  000384  6E32               	movwf	printf@width,c
  1596  000386                     l1523:
  1597                           
  1598                           ;doprnt.c: 600: width *= 10;
  1599  000386  C032  F013         	movff	printf@width,___wmul@multiplier
  1600  00038A  C033  F014         	movff	printf@width+1,___wmul@multiplier+1
  1601  00038E  0E00               	movlw	0
  1602  000390  6E16               	movwf	___wmul@multiplicand+1,c
  1603  000392  0E0A               	movlw	10
  1604  000394  6E15               	movwf	___wmul@multiplicand,c
  1605  000396  ECDF  F004         	call	___wmul	;wreg free
  1606  00039A  C013  F032         	movff	?___wmul,printf@width
  1607  00039E  C014  F033         	movff	?___wmul+1,printf@width+1
  1608                           
  1609                           ;doprnt.c: 601: width += *f++ - '0';
  1610  0003A2  0ED0               	movlw	208
  1611  0003A4  6E27               	movwf	??_printf& (0+255),c
  1612  0003A6  0EFF               	movlw	255
  1613  0003A8  6E28               	movwf	(??_printf+1)& (0+255),c
  1614  0003AA  C01F  FFF6         	movff	printf@f,tblptrl
  1615  0003AE  C020  FFF7         	movff	printf@f+1,tblptrh
  1616  0003B2                     	if	0	;tblptru may be non-zero
  1617  0003B2                     	endif
  1618  0003B2                     	if	0	;tblptru may be non-zero
  1619  0003B2                     	endif
  1620  0003B2  0008               	tblrd		*
  1621  0003B4  50F5               	movf	tablat,w,c
  1622  0003B6  6E29               	movwf	(??_printf+2)& (0+255),c
  1623  0003B8  6A2A               	clrf	(??_printf+3)& (0+255),c
  1624  0003BA  5027               	movf	??_printf,w,c
  1625  0003BC  2629               	addwf	??_printf+2,f,c
  1626  0003BE  5028               	movf	??_printf+1,w,c
  1627  0003C0  222A               	addwfc	??_printf+3,f,c
  1628  0003C2  5029               	movf	??_printf+2,w,c
  1629  0003C4  2632               	addwf	printf@width,f,c
  1630  0003C6  502A               	movf	??_printf+3,w,c
  1631  0003C8  2233               	addwfc	printf@width+1,f,c
  1632  0003CA  4A1F               	infsnz	printf@f,f,c
  1633  0003CC  2A20               	incf	printf@f+1,f,c
  1634                           
  1635                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1636  0003CE  C01F  FFF6         	movff	printf@f,tblptrl
  1637  0003D2  C020  FFF7         	movff	printf@f+1,tblptrh
  1638  0003D6                     	if	0	;tblptru may be non-zero
  1639  0003D6                     	endif
  1640  0003D6                     	if	0	;tblptru may be non-zero
  1641  0003D6                     	endif
  1642  0003D6  0008               	tblrd		*
  1643  0003D8  50F5               	movf	tablat,w,c
  1644  0003DA  EC05  F005         	call	_isdigit
  1645  0003DE  A0D8               	btfss	status,0,c
  1646  0003E0  D003               	goto	l1535
  1647  0003E2  D7D1               	goto	l1523
  1648  0003E4                     l1531:
  1649                           
  1650                           ;doprnt.c: 721: flag |= 0x80;
  1651  0003E4  8E31               	bsf	printf@flag,7,c
  1652                           
  1653                           ;doprnt.c: 723: break;
  1654  0003E6  D017               	goto	l235
  1655  0003E8                     l1535:
  1656  0003E8  C01F  FFF6         	movff	printf@f,tblptrl
  1657  0003EC  C020  FFF7         	movff	printf@f+1,tblptrh
  1658  0003F0  4A1F               	infsnz	printf@f,f,c
  1659  0003F2  2A20               	incf	printf@f+1,f,c
  1660  0003F4                     	if	0	;tblptru may be non-zero
  1661  0003F4                     	endif
  1662  0003F4                     	if	0	;tblptru may be non-zero
  1663  0003F4                     	endif
  1664  0003F4  0008               	tblrd		*
  1665  0003F6  CFF5 F034          	movff	tablat,printf@c
  1666  0003FA  5034               	movf	printf@c,w,c
  1667                           
  1668                           ; Switch size 1, requested type "space"
  1669                           ; Number of cases is 4, Range of values is 0 to 120
  1670                           ; switch strategies available:
  1671                           ; Name         Instructions Cycles
  1672                           ; simple_byte           13     7 (average)
  1673                           ;	Chosen strategy is simple_byte
  1674  0003FC  0A00               	xorlw	0	; case 0
  1675  0003FE  B4D8               	btfsc	status,2,c
  1676  000400  0012               	return	
  1677  000402  0A64               	xorlw	100	; case 100
  1678  000404  B4D8               	btfsc	status,2,c
  1679  000406  D007               	goto	l235
  1680  000408  0A0D               	xorlw	13	; case 105
  1681  00040A  B4D8               	btfsc	status,2,c
  1682  00040C  D004               	goto	l235
  1683  00040E  0A11               	xorlw	17	; case 120
  1684  000410  B4D8               	btfsc	status,2,c
  1685  000412  D7E8               	goto	l1531
  1686  000414  D103               	goto	l1633
  1687  000416                     l235:
  1688                           
  1689                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  1690  000416  BE31               	btfsc	printf@flag,7,c
  1691  000418  D015               	goto	l1547
  1692                           
  1693                           ;doprnt.c: 1253: {
  1694                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1695  00041A  C02C  FFD9         	movff	printf@ap,fsr2l
  1696  00041E  C02D  FFDA         	movff	printf@ap+1,fsr2h
  1697  000422  CFDE F02F          	movff	postinc2,printf@val
  1698  000426  CFDD F030          	movff	postdec2,printf@val+1
  1699  00042A  0E02               	movlw	2
  1700  00042C  262C               	addwf	printf@ap,f,c
  1701  00042E  0E00               	movlw	0
  1702  000430  222D               	addwfc	printf@ap+1,f,c
  1703                           
  1704                           ;doprnt.c: 1261: if((int)val < 0) {
  1705  000432  AE30               	btfss	printf@val+1,7,c
  1706  000434  D044               	goto	l1581
  1707                           
  1708                           ;doprnt.c: 1262: flag |= 0x03;
  1709  000436  0E03               	movlw	3
  1710  000438  1231               	iorwf	printf@flag,f,c
  1711                           
  1712                           ;doprnt.c: 1263: val = -val;
  1713  00043A  6C2F               	negf	printf@val,c
  1714  00043C  1E30               	comf	printf@val+1,f,c
  1715  00043E  B0D8               	btfsc	status,0,c
  1716  000440  2A30               	incf	printf@val+1,f,c
  1717                           
  1718                           ;doprnt.c: 1264: }
  1719                           ;doprnt.c: 1266: }
  1720  000442  D03D               	goto	l1581
  1721  000444                     l1547:
  1722                           
  1723                           ;doprnt.c: 1268: else
  1724                           ;doprnt.c: 1273: {
  1725                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  1726  000444  C02C  FFD9         	movff	printf@ap,fsr2l
  1727  000448  C02D  FFDA         	movff	printf@ap+1,fsr2h
  1728  00044C  CFDE F02F          	movff	postinc2,printf@val
  1729  000450  CFDD F030          	movff	postdec2,printf@val+1
  1730  000454  0E02               	movlw	2
  1731  000456  262C               	addwf	printf@ap,f,c
  1732  000458  0E00               	movlw	0
  1733  00045A  222D               	addwfc	printf@ap+1,f,c
  1734                           
  1735                           ;doprnt.c: 1287: }
  1736                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  1737  00045C  D030               	goto	l1581
  1738  00045E                     l1551:
  1739                           
  1740                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1741  00045E  0E01               	movlw	1
  1742  000460  6E34               	movwf	printf@c,c
  1743  000462                     l1553:
  1744  000462  0E05               	movlw	5
  1745  000464  1834               	xorwf	printf@c,w,c
  1746  000466  B4D8               	btfsc	status,2,c
  1747  000468  D032               	goto	l1583
  1748                           
  1749                           ;doprnt.c: 1306: if(val < dpowers[c])
  1750  00046A  5034               	movf	printf@c,w,c
  1751  00046C  0D02               	mullw	2
  1752  00046E  0E8C               	movlw	low _dpowers
  1753  000470  24F3               	addwf	prodl,w,c
  1754  000472  6EF6               	movwf	tblptrl,c
  1755  000474  0EFE               	movlw	high _dpowers
  1756  000476  20F4               	addwfc	prodh,w,c
  1757  000478  6EF7               	movwf	tblptrh,c
  1758  00047A                     	if	0	;There are less than 3 active tblptr bytes
  1759  00047A                     	endif
  1760  00047A  0009               	tblrd		*+
  1761  00047C  50F5               	movf	tablat,w,c
  1762  00047E  5C2F               	subwf	printf@val,w,c
  1763  000480  0009               	tblrd		*+
  1764  000482  50F5               	movf	tablat,w,c
  1765  000484  5830               	subwfb	printf@val+1,w,c
  1766  000486  A0D8               	btfss	status,0,c
  1767  000488  D022               	goto	l1583
  1768                           
  1769                           ;doprnt.c: 1307: break;
  1770  00048A  2A34               	incf	printf@c,f,c
  1771  00048C  D7EA               	goto	l1553
  1772  00048E                     l1565:
  1773                           
  1774                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  1775  00048E  0E01               	movlw	1
  1776  000490  6E34               	movwf	printf@c,c
  1777  000492                     l1567:
  1778  000492  0E04               	movlw	4
  1779  000494  1834               	xorwf	printf@c,w,c
  1780  000496  B4D8               	btfsc	status,2,c
  1781  000498  D01A               	goto	l1583
  1782                           
  1783                           ;doprnt.c: 1317: if(val < hexpowers[c])
  1784  00049A  5034               	movf	printf@c,w,c
  1785  00049C  0D02               	mullw	2
  1786  00049E  0E96               	movlw	low _hexpowers
  1787  0004A0  24F3               	addwf	prodl,w,c
  1788  0004A2  6EF6               	movwf	tblptrl,c
  1789  0004A4  0EFE               	movlw	high _hexpowers
  1790  0004A6  20F4               	addwfc	prodh,w,c
  1791  0004A8  6EF7               	movwf	tblptrh,c
  1792  0004AA                     	if	0	;There are less than 3 active tblptr bytes
  1793  0004AA                     	endif
  1794  0004AA  0009               	tblrd		*+
  1795  0004AC  50F5               	movf	tablat,w,c
  1796  0004AE  5C2F               	subwf	printf@val,w,c
  1797  0004B0  0009               	tblrd		*+
  1798  0004B2  50F5               	movf	tablat,w,c
  1799  0004B4  5830               	subwfb	printf@val+1,w,c
  1800  0004B6  A0D8               	btfss	status,0,c
  1801  0004B8  D00A               	goto	l1583
  1802                           
  1803                           ;doprnt.c: 1318: break;
  1804  0004BA  2A34               	incf	printf@c,f,c
  1805  0004BC  D7EA               	goto	l1567
  1806  0004BE                     l1581:
  1807  0004BE  5031               	movf	printf@flag,w,c
  1808  0004C0  0B80               	andlw	128
  1809                           
  1810                           ; Switch size 1, requested type "space"
  1811                           ; Number of cases is 2, Range of values is 0 to 128
  1812                           ; switch strategies available:
  1813                           ; Name         Instructions Cycles
  1814                           ; simple_byte            7     4 (average)
  1815                           ;	Chosen strategy is simple_byte
  1816  0004C2  0A00               	xorlw	0	; case 0
  1817  0004C4  B4D8               	btfsc	status,2,c
  1818  0004C6  D7CB               	goto	l1551
  1819  0004C8  0A80               	xorlw	128	; case 128
  1820  0004CA  B4D8               	btfsc	status,2,c
  1821  0004CC  D7E0               	goto	l1565
  1822  0004CE                     l1583:
  1823                           
  1824                           ;doprnt.c: 1345: if(width && flag & 0x03)
  1825  0004CE  5032               	movf	printf@width,w,c
  1826  0004D0  1033               	iorwf	printf@width+1,w,c
  1827  0004D2  B4D8               	btfsc	status,2,c
  1828  0004D4  D009               	goto	l1589
  1829  0004D6  C031  F027         	movff	printf@flag,??_printf
  1830  0004DA  0E03               	movlw	3
  1831  0004DC  1627               	andwf	??_printf,f,c
  1832  0004DE  B4D8               	btfsc	status,2,c
  1833  0004E0  D003               	goto	l1589
  1834                           
  1835                           ;doprnt.c: 1346: width--;
  1836  0004E2  0632               	decf	printf@width,f,c
  1837  0004E4  A0D8               	btfss	status,0,c
  1838  0004E6  0633               	decf	printf@width+1,f,c
  1839  0004E8                     l1589:
  1840                           
  1841                           ;doprnt.c: 1381: if(width > c)
  1842  0004E8  0E80               	movlw	128
  1843  0004EA  BE34               	btfsc	printf@c,7,c
  1844  0004EC  0E7F               	movlw	127
  1845  0004EE  6E27               	movwf	??_printf& (0+255),c
  1846  0004F0  5032               	movf	printf@width,w,c
  1847  0004F2  5C34               	subwf	printf@c,w,c
  1848  0004F4  5033               	movf	printf@width+1,w,c
  1849  0004F6  0A80               	xorlw	128
  1850  0004F8  5827               	subwfb	??_printf& (0+255),w,c
  1851  0004FA  B0D8               	btfsc	status,0,c
  1852  0004FC  D007               	goto	l1593
  1853                           
  1854                           ;doprnt.c: 1382: width -= c;
  1855  0004FE  5034               	movf	printf@c,w,c
  1856  000500  5E32               	subwf	printf@width,f,c
  1857  000502  0E00               	movlw	0
  1858  000504  BE34               	btfsc	printf@c,7,c
  1859  000506  0EFF               	movlw	255
  1860  000508  5A33               	subwfb	printf@width+1,f,c
  1861  00050A  D004               	goto	l1595
  1862  00050C                     l1593:
  1863                           
  1864                           ;doprnt.c: 1383: else
  1865                           ;doprnt.c: 1384: width = 0;
  1866  00050C  0E00               	movlw	0
  1867  00050E  6E33               	movwf	printf@width+1,c
  1868  000510  0E00               	movlw	0
  1869  000512  6E32               	movwf	printf@width,c
  1870  000514                     l1595:
  1871                           
  1872                           ;doprnt.c: 1387: if(flag & 0x04) {
  1873  000514  A431               	btfss	printf@flag,2,c
  1874  000516  D014               	goto	l1607
  1875                           
  1876                           ;doprnt.c: 1392: if(flag & 0x03)
  1877  000518  C031  F027         	movff	printf@flag,??_printf
  1878  00051C  0E03               	movlw	3
  1879  00051E  1627               	andwf	??_printf,f,c
  1880  000520  B4D8               	btfsc	status,2,c
  1881  000522  D003               	goto	l1601
  1882                           
  1883                           ;doprnt.c: 1393: (putch('-') );
  1884  000524  0E2D               	movlw	45
  1885  000526  EC1D  F005         	call	_putch
  1886  00052A                     l1601:
  1887                           
  1888                           ;doprnt.c: 1415: if(width)
  1889  00052A  5032               	movf	printf@width,w,c
  1890  00052C  1033               	iorwf	printf@width+1,w,c
  1891  00052E  B4D8               	btfsc	status,2,c
  1892  000530  D01E               	goto	l1617
  1893                           
  1894                           ;doprnt.c: 1417: (putch('0') );
  1895                           
  1896                           ;doprnt.c: 1416: do
  1897  000532  0E30               	movlw	48
  1898  000534  EC1D  F005         	call	_putch
  1899                           
  1900                           ;doprnt.c: 1418: while(--width);
  1901  000538  0632               	decf	printf@width,f,c
  1902  00053A  A0D8               	btfss	status,0,c
  1903  00053C  0633               	decf	printf@width+1,f,c
  1904  00053E  D7F5               	goto	l1601
  1905  000540                     l1607:
  1906                           
  1907                           ;doprnt.c: 1422: {
  1908                           ;doprnt.c: 1424: if(width
  1909                           ;doprnt.c: 1428: )
  1910  000540  5032               	movf	printf@width,w,c
  1911  000542  1033               	iorwf	printf@width+1,w,c
  1912  000544  B4D8               	btfsc	status,2,c
  1913  000546  D00A               	goto	l1613
  1914  000548                     l1609:
  1915                           
  1916                           ;doprnt.c: 1430: (putch(' ') );
  1917  000548  0E20               	movlw	32
  1918  00054A  EC1D  F005         	call	_putch
  1919                           
  1920                           ;doprnt.c: 1431: while(--width);
  1921  00054E  0632               	decf	printf@width,f,c
  1922  000550  A0D8               	btfss	status,0,c
  1923  000552  0633               	decf	printf@width+1,f,c
  1924  000554  5032               	movf	printf@width,w,c
  1925  000556  1033               	iorwf	printf@width+1,w,c
  1926  000558  A4D8               	btfss	status,2,c
  1927  00055A  D7F6               	goto	l1609
  1928  00055C                     l1613:
  1929                           
  1930                           ;doprnt.c: 1438: if(flag & 0x03)
  1931  00055C  C031  F027         	movff	printf@flag,??_printf
  1932  000560  0E03               	movlw	3
  1933  000562  1627               	andwf	??_printf,f,c
  1934  000564  B4D8               	btfsc	status,2,c
  1935  000566  D003               	goto	l1617
  1936                           
  1937                           ;doprnt.c: 1439: (putch('-') );
  1938  000568  0E2D               	movlw	45
  1939  00056A  EC1D  F005         	call	_putch
  1940  00056E                     l1617:
  1941                           
  1942                           ;doprnt.c: 1469: }
  1943                           ;doprnt.c: 1472: prec = c;
  1944  00056E  C034  F02E         	movff	printf@c,printf@prec
  1945                           
  1946                           ;doprnt.c: 1474: while(prec--) {
  1947  000572  D050               	goto	l1631
  1948  000574                     l1619:
  1949                           
  1950                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1951  000574  502E               	movf	printf@prec,w,c
  1952  000576  0D02               	mullw	2
  1953  000578  0E8C               	movlw	low _dpowers
  1954  00057A  24F3               	addwf	prodl,w,c
  1955  00057C  6EF6               	movwf	tblptrl,c
  1956  00057E  0EFE               	movlw	high _dpowers
  1957  000580  20F4               	addwfc	prodh,w,c
  1958  000582  6EF7               	movwf	tblptrh,c
  1959  000584                     	if	0	;There are less than 3 active tblptr bytes
  1960  000584                     	endif
  1961  000584  0009               	tblrd		*+
  1962  000586  CFF5 F015          	movff	tablat,___lwdiv@divisor
  1963  00058A  000A               	tblrd		*-
  1964  00058C  CFF5 F016          	movff	tablat,___lwdiv@divisor+1
  1965  000590  C02F  F013         	movff	printf@val,___lwdiv@dividend
  1966  000594  C030  F014         	movff	printf@val+1,___lwdiv@dividend+1
  1967  000598  EC1A  F004         	call	___lwdiv	;wreg free
  1968  00059C  C013  F01A         	movff	?___lwdiv,___lwmod@dividend
  1969  0005A0  C014  F01B         	movff	?___lwdiv+1,___lwmod@dividend+1
  1970  0005A4  0E00               	movlw	0
  1971  0005A6  6E1D               	movwf	___lwmod@divisor+1,c
  1972  0005A8  0E0A               	movlw	10
  1973  0005AA  6E1C               	movwf	___lwmod@divisor,c
  1974  0005AC  EC8D  F004         	call	___lwmod	;wreg free
  1975  0005B0  501A               	movf	?___lwmod,w,c
  1976  0005B2  0F30               	addlw	48
  1977  0005B4  6E34               	movwf	printf@c,c
  1978                           
  1979                           ;doprnt.c: 1491: break;
  1980  0005B6  D02B               	goto	l1629
  1981  0005B8                     l1621:
  1982                           
  1983                           ;doprnt.c: 1499: {
  1984                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  1985  0005B8  C02F  F013         	movff	printf@val,___lwdiv@dividend
  1986  0005BC  C030  F014         	movff	printf@val+1,___lwdiv@dividend+1
  1987  0005C0  502E               	movf	printf@prec,w,c
  1988  0005C2  0D02               	mullw	2
  1989  0005C4  0E96               	movlw	low _hexpowers
  1990  0005C6  24F3               	addwf	prodl,w,c
  1991  0005C8  6EF6               	movwf	tblptrl,c
  1992  0005CA  0EFE               	movlw	high _hexpowers
  1993  0005CC  20F4               	addwfc	prodh,w,c
  1994  0005CE  6EF7               	movwf	tblptrh,c
  1995  0005D0                     	if	0	;There are less than 3 active tblptr bytes
  1996  0005D0                     	endif
  1997  0005D0  0009               	tblrd		*+
  1998  0005D2  CFF5 F015          	movff	tablat,___lwdiv@divisor
  1999  0005D6  000A               	tblrd		*-
  2000  0005D8  CFF5 F016          	movff	tablat,___lwdiv@divisor+1
  2001  0005DC  EC1A  F004         	call	___lwdiv	;wreg free
  2002  0005E0  5013               	movf	?___lwdiv,w,c
  2003  0005E2  0B0F               	andlw	15
  2004  0005E4  6E2B               	movwf	printf@idx,c
  2005                           
  2006                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  2007  0005E6  502B               	movf	printf@idx,w,c
  2008  0005E8  0D01               	mullw	1
  2009  0005EA  0E22               	movlw	low STR_20
  2010  0005EC  24F3               	addwf	prodl,w,c
  2011  0005EE  6EF6               	movwf	tblptrl,c
  2012  0005F0  0EFF               	movlw	high STR_20
  2013  0005F2  20F4               	addwfc	prodh,w,c
  2014  0005F4  6EF7               	movwf	tblptrh,c
  2015  0005F6                     	if	0	;There are less than 3 active tblptr bytes
  2016  0005F6                     	endif
  2017  0005F6  0008               	tblrd		*
  2018  0005F8  CFF5 F034          	movff	tablat,printf@c
  2019                           
  2020                           ;doprnt.c: 1523: }
  2021                           
  2022                           ;doprnt.c: 1508: }
  2023                           ;doprnt.c: 1510: break;
  2024  0005FC  D008               	goto	l1629
  2025  0005FE                     l1627:
  2026  0005FE  5031               	movf	printf@flag,w,c
  2027  000600  0B80               	andlw	128
  2028                           
  2029                           ; Switch size 1, requested type "space"
  2030                           ; Number of cases is 2, Range of values is 0 to 128
  2031                           ; switch strategies available:
  2032                           ; Name         Instructions Cycles
  2033                           ; simple_byte            7     4 (average)
  2034                           ;	Chosen strategy is simple_byte
  2035  000602  0A00               	xorlw	0	; case 0
  2036  000604  B4D8               	btfsc	status,2,c
  2037  000606  D7B6               	goto	l1619
  2038  000608  0A80               	xorlw	128	; case 128
  2039  00060A  B4D8               	btfsc	status,2,c
  2040  00060C  D7D5               	goto	l1621
  2041  00060E                     l1629:
  2042                           
  2043                           ;doprnt.c: 1524: (putch(c) );
  2044  00060E  5034               	movf	printf@c,w,c
  2045  000610  EC1D  F005         	call	_putch
  2046  000614                     l1631:
  2047  000614  062E               	decf	printf@prec,f,c
  2048  000616  282E               	incf	printf@prec,w,c
  2049  000618  A4D8               	btfss	status,2,c
  2050  00061A  D7F1               	goto	l1627
  2051  00061C                     l1633:
  2052  00061C  C01F  FFF6         	movff	printf@f,tblptrl
  2053  000620  C020  FFF7         	movff	printf@f+1,tblptrh
  2054  000624  4A1F               	infsnz	printf@f,f,c
  2055  000626  2A20               	incf	printf@f+1,f,c
  2056  000628                     	if	0	;tblptru may be non-zero
  2057  000628                     	endif
  2058  000628                     	if	0	;tblptru may be non-zero
  2059  000628                     	endif
  2060  000628  0008               	tblrd		*
  2061  00062A  CFF5 F034          	movff	tablat,printf@c
  2062  00062E  5034               	movf	printf@c,w,c
  2063  000630  B4D8               	btfsc	status,2,c
  2064  000632  0012               	return	
  2065  000634  D67F               	goto	l1507
  2066  000636                     __end_of_printf:
  2067                           	opt stack 0
  2068                           tblptru	equ	0xFF8
  2069                           tblptrh	equ	0xFF7
  2070                           tblptrl	equ	0xFF6
  2071                           tablat	equ	0xFF5
  2072                           prodh	equ	0xFF4
  2073                           prodl	equ	0xFF3
  2074                           intcon	equ	0xFF2
  2075                           intcon3	equ	0xFF0
  2076                           postinc0	equ	0xFEE
  2077                           wreg	equ	0xFE8
  2078                           indf2	equ	0xFDF
  2079                           postinc2	equ	0xFDE
  2080                           postdec2	equ	0xFDD
  2081                           fsr2h	equ	0xFDA
  2082                           fsr2l	equ	0xFD9
  2083                           status	equ	0xFD8
  2084                           
  2085 ;; *************** function _putch *****************
  2086 ;; Defined at:
  2087 ;;		line 30 in file "../lcd.c"
  2088 ;; Parameters:    Size  Location     Type
  2089 ;;  data            1    wreg     unsigned char 
  2090 ;; Auto vars:     Size  Location     Type
  2091 ;;  data            1   20[COMRAM] unsigned char 
  2092 ;; Return value:  Size  Location     Type
  2093 ;;                  1    wreg      void 
  2094 ;; Registers used:
  2095 ;;		wreg, status,2, status,0, cstack
  2096 ;; Tracked objects:
  2097 ;;		On entry : 0/0
  2098 ;;		On exit  : 0/0
  2099 ;;		Unchanged: 0/0
  2100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2102 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2104 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2105 ;;Total ram usage:        1 bytes
  2106 ;; Hardware stack levels used:    1
  2107 ;; Hardware stack levels required when called:    3
  2108 ;; This function calls:
  2109 ;;		_lcdNibble
  2110 ;; This function is called by:
  2111 ;;		_printf
  2112 ;; This function uses a non-reentrant model
  2113 ;;
  2114                           
  2115                           	psect	text2
  2116  000A3A                     __ptext2:
  2117                           	opt stack 0
  2118  000A3A                     _putch:
  2119                           	opt stack 26
  2120                           
  2121                           ;incstack = 0
  2122                           ;putch@data stored from wreg
  2123  000A3A  6E15               	movwf	putch@data,c
  2124                           
  2125                           ;lcd.c: 31: LATDbits.LATD2 = 1;
  2126  000A3C  848C               	bsf	3980,2,c	;volatile
  2127                           
  2128                           ;lcd.c: 32: lcdNibble(data);
  2129  000A3E  5015               	movf	putch@data,w,c
  2130  000A40  EC43  F004         	call	_lcdNibble
  2131  000A44  0012               	return		;funcret
  2132  000A46                     __end_of_putch:
  2133                           	opt stack 0
  2134                           tblptru	equ	0xFF8
  2135                           tblptrh	equ	0xFF7
  2136                           tblptrl	equ	0xFF6
  2137                           tablat	equ	0xFF5
  2138                           prodh	equ	0xFF4
  2139                           prodl	equ	0xFF3
  2140                           intcon	equ	0xFF2
  2141                           intcon3	equ	0xFF0
  2142                           postinc0	equ	0xFEE
  2143                           wreg	equ	0xFE8
  2144                           indf2	equ	0xFDF
  2145                           postinc2	equ	0xFDE
  2146                           postdec2	equ	0xFDD
  2147                           fsr2h	equ	0xFDA
  2148                           fsr2l	equ	0xFD9
  2149                           status	equ	0xFD8
  2150                           
  2151 ;; *************** function _isdigit *****************
  2152 ;; Defined at:
  2153 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  2154 ;; Parameters:    Size  Location     Type
  2155 ;;  c               1    wreg     unsigned char 
  2156 ;; Auto vars:     Size  Location     Type
  2157 ;;  c               1   20[COMRAM] unsigned char 
  2158 ;; Return value:  Size  Location     Type
  2159 ;;		None               void
  2160 ;; Registers used:
  2161 ;;		wreg, status,2, status,0
  2162 ;; Tracked objects:
  2163 ;;		On entry : 0/0
  2164 ;;		On exit  : 0/0
  2165 ;;		Unchanged: 0/0
  2166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2168 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2169 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2170 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2171 ;;Total ram usage:        3 bytes
  2172 ;; Hardware stack levels used:    1
  2173 ;; Hardware stack levels required when called:    2
  2174 ;; This function calls:
  2175 ;;		Nothing
  2176 ;; This function is called by:
  2177 ;;		_printf
  2178 ;; This function uses a non-reentrant model
  2179 ;;
  2180                           
  2181                           	psect	text3
  2182  000A0A                     __ptext3:
  2183                           	opt stack 0
  2184  000A0A                     _isdigit:
  2185                           	opt stack 27
  2186                           
  2187                           ;incstack = 0
  2188                           ;isdigit@c stored from wreg
  2189  000A0A  6E15               	movwf	isdigit@c,c
  2190  000A0C  0E00               	movlw	0
  2191  000A0E  6E14               	movwf	_isdigit$540,c
  2192  000A10  0E3A               	movlw	58
  2193  000A12  6015               	cpfslt	isdigit@c,c
  2194  000A14  D005               	goto	l1423
  2195  000A16  0E2F               	movlw	47
  2196  000A18  6415               	cpfsgt	isdigit@c,c
  2197  000A1A  D002               	goto	l1423
  2198  000A1C  0E01               	movlw	1
  2199  000A1E  6E14               	movwf	_isdigit$540,c
  2200  000A20                     l1423:
  2201  000A20  C014  F013         	movff	_isdigit$540,??_isdigit
  2202  000A24  3013               	rrcf	??_isdigit,w,c
  2203  000A26  0012               	return	
  2204  000A28                     __end_of_isdigit:
  2205                           	opt stack 0
  2206                           tblptru	equ	0xFF8
  2207                           tblptrh	equ	0xFF7
  2208                           tblptrl	equ	0xFF6
  2209                           tablat	equ	0xFF5
  2210                           prodh	equ	0xFF4
  2211                           prodl	equ	0xFF3
  2212                           intcon	equ	0xFF2
  2213                           intcon3	equ	0xFF0
  2214                           postinc0	equ	0xFEE
  2215                           wreg	equ	0xFE8
  2216                           indf2	equ	0xFDF
  2217                           postinc2	equ	0xFDE
  2218                           postdec2	equ	0xFDD
  2219                           fsr2h	equ	0xFDA
  2220                           fsr2l	equ	0xFD9
  2221                           status	equ	0xFD8
  2222                           
  2223 ;; *************** function ___wmul *****************
  2224 ;; Defined at:
  2225 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  2226 ;; Parameters:    Size  Location     Type
  2227 ;;  multiplier      2   18[COMRAM] unsigned int 
  2228 ;;  multiplicand    2   20[COMRAM] unsigned int 
  2229 ;; Auto vars:     Size  Location     Type
  2230 ;;  product         2   22[COMRAM] unsigned int 
  2231 ;; Return value:  Size  Location     Type
  2232 ;;                  2   18[COMRAM] unsigned int 
  2233 ;; Registers used:
  2234 ;;		wreg, status,2, status,0, prodl, prodh
  2235 ;; Tracked objects:
  2236 ;;		On entry : 0/0
  2237 ;;		On exit  : 0/0
  2238 ;;		Unchanged: 0/0
  2239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2240 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2241 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2242 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2243 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2244 ;;Total ram usage:        6 bytes
  2245 ;; Hardware stack levels used:    1
  2246 ;; Hardware stack levels required when called:    2
  2247 ;; This function calls:
  2248 ;;		Nothing
  2249 ;; This function is called by:
  2250 ;;		_printf
  2251 ;; This function uses a non-reentrant model
  2252 ;;
  2253                           
  2254                           	psect	text4
  2255  0009BE                     __ptext4:
  2256                           	opt stack 0
  2257  0009BE                     ___wmul:
  2258                           	opt stack 27
  2259                           
  2260                           ;incstack = 0
  2261  0009BE  5013               	movf	___wmul@multiplier,w,c
  2262  0009C0  0215               	mulwf	___wmul@multiplicand,c
  2263  0009C2  CFF3 F017          	movff	prodl,___wmul@product
  2264  0009C6  CFF4 F018          	movff	prodh,___wmul@product+1
  2265  0009CA  5013               	movf	___wmul@multiplier,w,c
  2266  0009CC  0216               	mulwf	___wmul@multiplicand+1,c
  2267  0009CE  50F3               	movf	prodl,w,c
  2268  0009D0  2618               	addwf	___wmul@product+1,f,c
  2269  0009D2  5014               	movf	___wmul@multiplier+1,w,c
  2270  0009D4  0215               	mulwf	___wmul@multiplicand,c
  2271  0009D6  50F3               	movf	prodl,w,c
  2272  0009D8  2618               	addwf	___wmul@product+1,f,c
  2273  0009DA  C017  F013         	movff	___wmul@product,?___wmul
  2274  0009DE  C018  F014         	movff	___wmul@product+1,?___wmul+1
  2275  0009E2  0012               	return	
  2276  0009E4                     __end_of___wmul:
  2277                           	opt stack 0
  2278                           tblptru	equ	0xFF8
  2279                           tblptrh	equ	0xFF7
  2280                           tblptrl	equ	0xFF6
  2281                           tablat	equ	0xFF5
  2282                           prodh	equ	0xFF4
  2283                           prodl	equ	0xFF3
  2284                           intcon	equ	0xFF2
  2285                           intcon3	equ	0xFF0
  2286                           postinc0	equ	0xFEE
  2287                           wreg	equ	0xFE8
  2288                           indf2	equ	0xFDF
  2289                           postinc2	equ	0xFDE
  2290                           postdec2	equ	0xFDD
  2291                           fsr2h	equ	0xFDA
  2292                           fsr2l	equ	0xFD9
  2293                           status	equ	0xFD8
  2294                           
  2295 ;; *************** function ___lwmod *****************
  2296 ;; Defined at:
  2297 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  2298 ;; Parameters:    Size  Location     Type
  2299 ;;  dividend        2   25[COMRAM] unsigned int 
  2300 ;;  divisor         2   27[COMRAM] unsigned int 
  2301 ;; Auto vars:     Size  Location     Type
  2302 ;;  counter         1   29[COMRAM] unsigned char 
  2303 ;; Return value:  Size  Location     Type
  2304 ;;                  2   25[COMRAM] unsigned int 
  2305 ;; Registers used:
  2306 ;;		wreg, status,2, status,0
  2307 ;; Tracked objects:
  2308 ;;		On entry : 0/0
  2309 ;;		On exit  : 0/0
  2310 ;;		Unchanged: 0/0
  2311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2312 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2313 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2314 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2315 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2316 ;;Total ram usage:        5 bytes
  2317 ;; Hardware stack levels used:    1
  2318 ;; Hardware stack levels required when called:    2
  2319 ;; This function calls:
  2320 ;;		Nothing
  2321 ;; This function is called by:
  2322 ;;		_printf
  2323 ;; This function uses a non-reentrant model
  2324 ;;
  2325                           
  2326                           	psect	text5
  2327  00091A                     __ptext5:
  2328                           	opt stack 0
  2329  00091A                     ___lwmod:
  2330                           	opt stack 27
  2331                           
  2332                           ;incstack = 0
  2333  00091A  501C               	movf	___lwmod@divisor,w,c
  2334  00091C  101D               	iorwf	___lwmod@divisor+1,w,c
  2335  00091E  B4D8               	btfsc	status,2,c
  2336  000920  D018               	goto	l690
  2337  000922  0E01               	movlw	1
  2338  000924  6E1E               	movwf	___lwmod@counter,c
  2339  000926  D004               	goto	l1483
  2340  000928                     l1481:
  2341  000928  90D8               	bcf	status,0,c
  2342  00092A  361C               	rlcf	___lwmod@divisor,f,c
  2343  00092C  361D               	rlcf	___lwmod@divisor+1,f,c
  2344  00092E  2A1E               	incf	___lwmod@counter,f,c
  2345  000930                     l1483:
  2346  000930  AE1D               	btfss	___lwmod@divisor+1,7,c
  2347  000932  D7FA               	goto	l1481
  2348  000934                     l1485:
  2349  000934  501C               	movf	___lwmod@divisor,w,c
  2350  000936  5C1A               	subwf	___lwmod@dividend,w,c
  2351  000938  501D               	movf	___lwmod@divisor+1,w,c
  2352  00093A  581B               	subwfb	___lwmod@dividend+1,w,c
  2353  00093C  A0D8               	btfss	status,0,c
  2354  00093E  D004               	goto	l1489
  2355  000940  501C               	movf	___lwmod@divisor,w,c
  2356  000942  5E1A               	subwf	___lwmod@dividend,f,c
  2357  000944  501D               	movf	___lwmod@divisor+1,w,c
  2358  000946  5A1B               	subwfb	___lwmod@dividend+1,f,c
  2359  000948                     l1489:
  2360  000948  90D8               	bcf	status,0,c
  2361  00094A  321D               	rrcf	___lwmod@divisor+1,f,c
  2362  00094C  321C               	rrcf	___lwmod@divisor,f,c
  2363  00094E  2E1E               	decfsz	___lwmod@counter,f,c
  2364  000950  D7F1               	goto	l1485
  2365  000952                     l690:
  2366  000952  C01A  F01A         	movff	___lwmod@dividend,?___lwmod
  2367  000956  C01B  F01B         	movff	___lwmod@dividend+1,?___lwmod+1
  2368  00095A  0012               	return		;funcret
  2369  00095C                     __end_of___lwmod:
  2370                           	opt stack 0
  2371                           tblptru	equ	0xFF8
  2372                           tblptrh	equ	0xFF7
  2373                           tblptrl	equ	0xFF6
  2374                           tablat	equ	0xFF5
  2375                           prodh	equ	0xFF4
  2376                           prodl	equ	0xFF3
  2377                           intcon	equ	0xFF2
  2378                           intcon3	equ	0xFF0
  2379                           postinc0	equ	0xFEE
  2380                           wreg	equ	0xFE8
  2381                           indf2	equ	0xFDF
  2382                           postinc2	equ	0xFDE
  2383                           postdec2	equ	0xFDD
  2384                           fsr2h	equ	0xFDA
  2385                           fsr2l	equ	0xFD9
  2386                           status	equ	0xFD8
  2387                           
  2388 ;; *************** function ___lwdiv *****************
  2389 ;; Defined at:
  2390 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  2391 ;; Parameters:    Size  Location     Type
  2392 ;;  dividend        2   18[COMRAM] unsigned int 
  2393 ;;  divisor         2   20[COMRAM] unsigned int 
  2394 ;; Auto vars:     Size  Location     Type
  2395 ;;  quotient        2   22[COMRAM] unsigned int 
  2396 ;;  counter         1   24[COMRAM] unsigned char 
  2397 ;; Return value:  Size  Location     Type
  2398 ;;                  2   18[COMRAM] unsigned int 
  2399 ;; Registers used:
  2400 ;;		wreg, status,2, status,0
  2401 ;; Tracked objects:
  2402 ;;		On entry : 0/0
  2403 ;;		On exit  : 0/0
  2404 ;;		Unchanged: 0/0
  2405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2406 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2407 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2408 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2409 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2410 ;;Total ram usage:        7 bytes
  2411 ;; Hardware stack levels used:    1
  2412 ;; Hardware stack levels required when called:    2
  2413 ;; This function calls:
  2414 ;;		Nothing
  2415 ;; This function is called by:
  2416 ;;		_printf
  2417 ;; This function uses a non-reentrant model
  2418 ;;
  2419                           
  2420                           	psect	text6
  2421  000834                     __ptext6:
  2422                           	opt stack 0
  2423  000834                     ___lwdiv:
  2424                           	opt stack 27
  2425                           
  2426                           ;incstack = 0
  2427  000834  0E00               	movlw	0
  2428  000836  6E18               	movwf	___lwdiv@quotient+1,c
  2429  000838  0E00               	movlw	0
  2430  00083A  6E17               	movwf	___lwdiv@quotient,c
  2431  00083C  5015               	movf	___lwdiv@divisor,w,c
  2432  00083E  1016               	iorwf	___lwdiv@divisor+1,w,c
  2433  000840  B4D8               	btfsc	status,2,c
  2434  000842  D01C               	goto	l680
  2435  000844  0E01               	movlw	1
  2436  000846  6E19               	movwf	___lwdiv@counter,c
  2437  000848  D004               	goto	l1463
  2438  00084A                     l1461:
  2439  00084A  90D8               	bcf	status,0,c
  2440  00084C  3615               	rlcf	___lwdiv@divisor,f,c
  2441  00084E  3616               	rlcf	___lwdiv@divisor+1,f,c
  2442  000850  2A19               	incf	___lwdiv@counter,f,c
  2443  000852                     l1463:
  2444  000852  AE16               	btfss	___lwdiv@divisor+1,7,c
  2445  000854  D7FA               	goto	l1461
  2446  000856                     l1465:
  2447  000856  90D8               	bcf	status,0,c
  2448  000858  3617               	rlcf	___lwdiv@quotient,f,c
  2449  00085A  3618               	rlcf	___lwdiv@quotient+1,f,c
  2450  00085C  5015               	movf	___lwdiv@divisor,w,c
  2451  00085E  5C13               	subwf	___lwdiv@dividend,w,c
  2452  000860  5016               	movf	___lwdiv@divisor+1,w,c
  2453  000862  5814               	subwfb	___lwdiv@dividend+1,w,c
  2454  000864  A0D8               	btfss	status,0,c
  2455  000866  D005               	goto	l1473
  2456  000868  5015               	movf	___lwdiv@divisor,w,c
  2457  00086A  5E13               	subwf	___lwdiv@dividend,f,c
  2458  00086C  5016               	movf	___lwdiv@divisor+1,w,c
  2459  00086E  5A14               	subwfb	___lwdiv@dividend+1,f,c
  2460  000870  8017               	bsf	___lwdiv@quotient,0,c
  2461  000872                     l1473:
  2462  000872  90D8               	bcf	status,0,c
  2463  000874  3216               	rrcf	___lwdiv@divisor+1,f,c
  2464  000876  3215               	rrcf	___lwdiv@divisor,f,c
  2465  000878  2E19               	decfsz	___lwdiv@counter,f,c
  2466  00087A  D7ED               	goto	l1465
  2467  00087C                     l680:
  2468  00087C  C017  F013         	movff	___lwdiv@quotient,?___lwdiv
  2469  000880  C018  F014         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2470  000884  0012               	return		;funcret
  2471  000886                     __end_of___lwdiv:
  2472                           	opt stack 0
  2473                           tblptru	equ	0xFF8
  2474                           tblptrh	equ	0xFF7
  2475                           tblptrl	equ	0xFF6
  2476                           tablat	equ	0xFF5
  2477                           prodh	equ	0xFF4
  2478                           prodl	equ	0xFF3
  2479                           intcon	equ	0xFF2
  2480                           intcon3	equ	0xFF0
  2481                           postinc0	equ	0xFEE
  2482                           wreg	equ	0xFE8
  2483                           indf2	equ	0xFDF
  2484                           postinc2	equ	0xFDE
  2485                           postdec2	equ	0xFDD
  2486                           fsr2h	equ	0xFDA
  2487                           fsr2l	equ	0xFD9
  2488                           status	equ	0xFD8
  2489                           
  2490 ;; *************** function _initLCD *****************
  2491 ;; Defined at:
  2492 ;;		line 14 in file "../lcd.c"
  2493 ;; Parameters:    Size  Location     Type
  2494 ;;		None
  2495 ;; Auto vars:     Size  Location     Type
  2496 ;;		None
  2497 ;; Return value:  Size  Location     Type
  2498 ;;                  1    wreg      void 
  2499 ;; Registers used:
  2500 ;;		wreg, status,2, status,0, cstack
  2501 ;; Tracked objects:
  2502 ;;		On entry : 0/0
  2503 ;;		On exit  : 0/0
  2504 ;;		Unchanged: 0/0
  2505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2506 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2507 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2508 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2509 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2510 ;;Total ram usage:        1 bytes
  2511 ;; Hardware stack levels used:    1
  2512 ;; Hardware stack levels required when called:    4
  2513 ;; This function calls:
  2514 ;;		_lcdInst
  2515 ;; This function is called by:
  2516 ;;		_main
  2517 ;; This function uses a non-reentrant model
  2518 ;;
  2519                           
  2520                           	psect	text7
  2521  0008D4                     __ptext7:
  2522                           	opt stack 0
  2523  0008D4                     _initLCD:
  2524                           	opt stack 26
  2525                           
  2526                           ;lcd.c: 15: _delay((unsigned long)((15)*(10000000/4000.0)));
  2527                           
  2528                           ;incstack = 0
  2529  0008D4  0E31               	movlw	49
  2530  0008D6  6E16               	movwf	??_initLCD& (0+255),c
  2531  0008D8  0EB2               	movlw	178
  2532  0008DA                     u1407:
  2533  0008DA  2EE8               	decfsz	wreg,f,c
  2534  0008DC  D7FE               	bra	u1407
  2535  0008DE  2E16               	decfsz	??_initLCD& (0+255),f,c
  2536  0008E0  D7FC               	bra	u1407
  2537  0008E2  D000               	nop2	
  2538                           
  2539                           ;lcd.c: 16: lcdInst(0b00110011);
  2540  0008E4  0E33               	movlw	51
  2541  0008E6  EC23  F005         	call	_lcdInst
  2542                           
  2543                           ;lcd.c: 17: lcdInst(0b00110010);
  2544  0008EA  0E32               	movlw	50
  2545  0008EC  EC23  F005         	call	_lcdInst
  2546                           
  2547                           ;lcd.c: 18: lcdInst(0b00101000);
  2548  0008F0  0E28               	movlw	40
  2549  0008F2  EC23  F005         	call	_lcdInst
  2550                           
  2551                           ;lcd.c: 19: lcdInst(0b00001111);
  2552  0008F6  0E0F               	movlw	15
  2553  0008F8  EC23  F005         	call	_lcdInst
  2554                           
  2555                           ;lcd.c: 20: lcdInst(0b00000110);
  2556  0008FC  0E06               	movlw	6
  2557  0008FE  EC23  F005         	call	_lcdInst
  2558                           
  2559                           ;lcd.c: 21: lcdInst(0b00000001);
  2560  000902  0E01               	movlw	1
  2561  000904  EC23  F005         	call	_lcdInst
  2562                           
  2563                           ;lcd.c: 22: _delay((unsigned long)((15)*(10000000/4000.0)));
  2564  000908  0E31               	movlw	49
  2565  00090A  6E16               	movwf	??_initLCD& (0+255),c
  2566  00090C  0EB2               	movlw	178
  2567  00090E                     u1417:
  2568  00090E  2EE8               	decfsz	wreg,f,c
  2569  000910  D7FE               	bra	u1417
  2570  000912  2E16               	decfsz	??_initLCD& (0+255),f,c
  2571  000914  D7FC               	bra	u1417
  2572  000916  D000               	nop2	
  2573  000918  0012               	return		;funcret
  2574  00091A                     __end_of_initLCD:
  2575                           	opt stack 0
  2576                           tblptru	equ	0xFF8
  2577                           tblptrh	equ	0xFF7
  2578                           tblptrl	equ	0xFF6
  2579                           tablat	equ	0xFF5
  2580                           prodh	equ	0xFF4
  2581                           prodl	equ	0xFF3
  2582                           intcon	equ	0xFF2
  2583                           intcon3	equ	0xFF0
  2584                           postinc0	equ	0xFEE
  2585                           wreg	equ	0xFE8
  2586                           indf2	equ	0xFDF
  2587                           postinc2	equ	0xFDE
  2588                           postdec2	equ	0xFDD
  2589                           fsr2h	equ	0xFDA
  2590                           fsr2l	equ	0xFD9
  2591                           status	equ	0xFD8
  2592                           
  2593 ;; *************** function _lcdInst *****************
  2594 ;; Defined at:
  2595 ;;		line 25 in file "../lcd.c"
  2596 ;; Parameters:    Size  Location     Type
  2597 ;;  data            1    wreg     unsigned char 
  2598 ;; Auto vars:     Size  Location     Type
  2599 ;;  data            1   20[COMRAM] unsigned char 
  2600 ;; Return value:  Size  Location     Type
  2601 ;;                  1    wreg      void 
  2602 ;; Registers used:
  2603 ;;		wreg, status,2, status,0, cstack
  2604 ;; Tracked objects:
  2605 ;;		On entry : 0/0
  2606 ;;		On exit  : 0/0
  2607 ;;		Unchanged: 0/0
  2608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2609 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2610 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2611 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2612 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2613 ;;Total ram usage:        1 bytes
  2614 ;; Hardware stack levels used:    1
  2615 ;; Hardware stack levels required when called:    3
  2616 ;; This function calls:
  2617 ;;		_lcdNibble
  2618 ;; This function is called by:
  2619 ;;		_initLCD
  2620 ;;		_main
  2621 ;; This function uses a non-reentrant model
  2622 ;;
  2623                           
  2624                           	psect	text8
  2625  000A46                     __ptext8:
  2626                           	opt stack 0
  2627  000A46                     _lcdInst:
  2628                           	opt stack 27
  2629                           
  2630                           ;incstack = 0
  2631                           ;lcdInst@data stored from wreg
  2632  000A46  6E15               	movwf	lcdInst@data,c
  2633                           
  2634                           ;lcd.c: 26: LATDbits.LATD2 = 0;
  2635  000A48  948C               	bcf	3980,2,c	;volatile
  2636                           
  2637                           ;lcd.c: 27: lcdNibble(data);
  2638  000A4A  5015               	movf	lcdInst@data,w,c
  2639  000A4C  EC43  F004         	call	_lcdNibble
  2640  000A50  0012               	return		;funcret
  2641  000A52                     __end_of_lcdInst:
  2642                           	opt stack 0
  2643                           tblptru	equ	0xFF8
  2644                           tblptrh	equ	0xFF7
  2645                           tblptrl	equ	0xFF6
  2646                           tablat	equ	0xFF5
  2647                           prodh	equ	0xFF4
  2648                           prodl	equ	0xFF3
  2649                           intcon	equ	0xFF2
  2650                           intcon3	equ	0xFF0
  2651                           postinc0	equ	0xFEE
  2652                           wreg	equ	0xFE8
  2653                           indf2	equ	0xFDF
  2654                           postinc2	equ	0xFDE
  2655                           postdec2	equ	0xFDD
  2656                           fsr2h	equ	0xFDA
  2657                           fsr2l	equ	0xFD9
  2658                           status	equ	0xFD8
  2659                           
  2660 ;; *************** function _lcdNibble *****************
  2661 ;; Defined at:
  2662 ;;		line 35 in file "../lcd.c"
  2663 ;; Parameters:    Size  Location     Type
  2664 ;;  data            1    wreg     unsigned char 
  2665 ;; Auto vars:     Size  Location     Type
  2666 ;;  data            1   19[COMRAM] unsigned char 
  2667 ;;  temp            1   18[COMRAM] unsigned char 
  2668 ;; Return value:  Size  Location     Type
  2669 ;;                  1    wreg      void 
  2670 ;; Registers used:
  2671 ;;		wreg, status,2, status,0
  2672 ;; Tracked objects:
  2673 ;;		On entry : 0/0
  2674 ;;		On exit  : 0/0
  2675 ;;		Unchanged: 0/0
  2676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2677 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2678 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2680 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2681 ;;Total ram usage:        2 bytes
  2682 ;; Hardware stack levels used:    1
  2683 ;; Hardware stack levels required when called:    2
  2684 ;; This function calls:
  2685 ;;		Nothing
  2686 ;; This function is called by:
  2687 ;;		_lcdInst
  2688 ;;		_putch
  2689 ;; This function uses a non-reentrant model
  2690 ;;
  2691                           
  2692                           	psect	text9
  2693  000886                     __ptext9:
  2694                           	opt stack 0
  2695  000886                     _lcdNibble:
  2696                           	opt stack 26
  2697                           
  2698                           ;incstack = 0
  2699                           ;lcdNibble@data stored from wreg
  2700  000886  6E14               	movwf	lcdNibble@data,c
  2701                           
  2702                           ;lcd.c: 37: char temp = data & 0xF0;
  2703  000888  5014               	movf	lcdNibble@data,w,c
  2704  00088A  0BF0               	andlw	240
  2705  00088C  6E13               	movwf	lcdNibble@temp,c
  2706                           
  2707                           ;lcd.c: 38: LATD = LATD & 0x0F;
  2708  00088E  508C               	movf	3980,w,c	;volatile
  2709  000890  0B0F               	andlw	15
  2710  000892  6E8C               	movwf	3980,c	;volatile
  2711                           
  2712                           ;lcd.c: 39: LATD = temp | LATD;
  2713  000894  5013               	movf	lcdNibble@temp,w,c
  2714  000896  108C               	iorwf	3980,w,c	;volatile
  2715  000898  6E8C               	movwf	3980,c	;volatile
  2716                           
  2717                           ;lcd.c: 41: LATDbits.LATD3 = 0;
  2718  00089A  968C               	bcf	3980,3,c	;volatile
  2719                           
  2720                           ;lcd.c: 42: _delay((unsigned long)((30)*(10000000/4000000.0)));
  2721  00089C  0E19               	movlw	25
  2722  00089E                     u1427:
  2723  00089E  2EE8               	decfsz	wreg,f,c
  2724  0008A0  D7FE               	bra	u1427
  2725                           
  2726                           ;lcd.c: 43: LATDbits.LATD3 = 1;
  2727  0008A2  868C               	bsf	3980,3,c	;volatile
  2728                           
  2729                           ;lcd.c: 44: _delay((unsigned long)((30)*(10000000/4000000.0)));
  2730  0008A4  0E19               	movlw	25
  2731  0008A6                     u1437:
  2732  0008A6  2EE8               	decfsz	wreg,f,c
  2733  0008A8  D7FE               	bra	u1437
  2734                           
  2735                           ;lcd.c: 46: data = data << 4;
  2736  0008AA  3814               	swapf	lcdNibble@data,w,c
  2737  0008AC  0BF0               	andlw	240
  2738  0008AE  6E14               	movwf	lcdNibble@data,c
  2739                           
  2740                           ;lcd.c: 48: temp = data & 0xF0;
  2741  0008B0  5014               	movf	lcdNibble@data,w,c
  2742  0008B2  0BF0               	andlw	240
  2743  0008B4  6E13               	movwf	lcdNibble@temp,c
  2744                           
  2745                           ;lcd.c: 49: LATD = LATD & 0x0F;
  2746  0008B6  508C               	movf	3980,w,c	;volatile
  2747  0008B8  0B0F               	andlw	15
  2748  0008BA  6E8C               	movwf	3980,c	;volatile
  2749                           
  2750                           ;lcd.c: 50: LATD = temp | LATD;
  2751  0008BC  5013               	movf	lcdNibble@temp,w,c
  2752  0008BE  108C               	iorwf	3980,w,c	;volatile
  2753  0008C0  6E8C               	movwf	3980,c	;volatile
  2754                           
  2755                           ;lcd.c: 52: LATDbits.LATD3 = 0;
  2756  0008C2  968C               	bcf	3980,3,c	;volatile
  2757                           
  2758                           ;lcd.c: 53: _delay((unsigned long)((30)*(10000000/4000000.0)));
  2759  0008C4  0E19               	movlw	25
  2760  0008C6                     u1447:
  2761  0008C6  2EE8               	decfsz	wreg,f,c
  2762  0008C8  D7FE               	bra	u1447
  2763                           
  2764                           ;lcd.c: 54: LATDbits.LATD3 = 1;
  2765  0008CA  868C               	bsf	3980,3,c	;volatile
  2766                           
  2767                           ;lcd.c: 55: _delay((unsigned long)((30)*(10000000/4000000.0)));
  2768  0008CC  0E19               	movlw	25
  2769  0008CE                     u1457:
  2770  0008CE  2EE8               	decfsz	wreg,f,c
  2771  0008D0  D7FE               	bra	u1457
  2772  0008D2  0012               	return		;funcret
  2773  0008D4                     __end_of_lcdNibble:
  2774                           	opt stack 0
  2775                           tblptru	equ	0xFF8
  2776                           tblptrh	equ	0xFF7
  2777                           tblptrl	equ	0xFF6
  2778                           tablat	equ	0xFF5
  2779                           prodh	equ	0xFF4
  2780                           prodl	equ	0xFF3
  2781                           intcon	equ	0xFF2
  2782                           intcon3	equ	0xFF0
  2783                           postinc0	equ	0xFEE
  2784                           wreg	equ	0xFE8
  2785                           indf2	equ	0xFDF
  2786                           postinc2	equ	0xFDE
  2787                           postdec2	equ	0xFDD
  2788                           fsr2h	equ	0xFDA
  2789                           fsr2l	equ	0xFD9
  2790                           status	equ	0xFD8
  2791                           
  2792 ;; *************** function _I2C_Master_Write *****************
  2793 ;; Defined at:
  2794 ;;		line 47 in file "../I2C.c"
  2795 ;; Parameters:    Size  Location     Type
  2796 ;;  d               2   19[COMRAM] unsigned int 
  2797 ;; Auto vars:     Size  Location     Type
  2798 ;;		None
  2799 ;; Return value:  Size  Location     Type
  2800 ;;                  1    wreg      void 
  2801 ;; Registers used:
  2802 ;;		wreg, status,2, status,0, cstack
  2803 ;; Tracked objects:
  2804 ;;		On entry : 0/0
  2805 ;;		On exit  : 0/0
  2806 ;;		Unchanged: 0/0
  2807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2808 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2809 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2810 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2811 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2812 ;;Total ram usage:        2 bytes
  2813 ;; Hardware stack levels used:    1
  2814 ;; Hardware stack levels required when called:    3
  2815 ;; This function calls:
  2816 ;;		_I2C_Master_Wait
  2817 ;; This function is called by:
  2818 ;;		_main
  2819 ;; This function uses a non-reentrant model
  2820 ;;
  2821                           
  2822                           	psect	text10
  2823  000A52                     __ptext10:
  2824                           	opt stack 0
  2825  000A52                     _I2C_Master_Write:
  2826                           	opt stack 27
  2827                           
  2828                           ;I2C.c: 49: I2C_Master_Wait();
  2829                           
  2830                           ;incstack = 0
  2831  000A52  EC14  F005         	call	_I2C_Master_Wait	;wreg free
  2832                           
  2833                           ;I2C.c: 50: SSPBUF = d;
  2834  000A56  C014  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  2835  000A5A  0012               	return		;funcret
  2836  000A5C                     __end_of_I2C_Master_Write:
  2837                           	opt stack 0
  2838                           tblptru	equ	0xFF8
  2839                           tblptrh	equ	0xFF7
  2840                           tblptrl	equ	0xFF6
  2841                           tablat	equ	0xFF5
  2842                           prodh	equ	0xFF4
  2843                           prodl	equ	0xFF3
  2844                           intcon	equ	0xFF2
  2845                           intcon3	equ	0xFF0
  2846                           postinc0	equ	0xFEE
  2847                           wreg	equ	0xFE8
  2848                           indf2	equ	0xFDF
  2849                           postinc2	equ	0xFDE
  2850                           postdec2	equ	0xFDD
  2851                           fsr2h	equ	0xFDA
  2852                           fsr2l	equ	0xFD9
  2853                           status	equ	0xFD8
  2854                           
  2855 ;; *************** function _I2C_Master_Stop *****************
  2856 ;; Defined at:
  2857 ;;		line 41 in file "../I2C.c"
  2858 ;; Parameters:    Size  Location     Type
  2859 ;;		None
  2860 ;; Auto vars:     Size  Location     Type
  2861 ;;		None
  2862 ;; Return value:  Size  Location     Type
  2863 ;;                  1    wreg      void 
  2864 ;; Registers used:
  2865 ;;		wreg, status,2, status,0, cstack
  2866 ;; Tracked objects:
  2867 ;;		On entry : 0/0
  2868 ;;		On exit  : 0/0
  2869 ;;		Unchanged: 0/0
  2870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2871 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2872 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2873 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2874 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2875 ;;Total ram usage:        0 bytes
  2876 ;; Hardware stack levels used:    1
  2877 ;; Hardware stack levels required when called:    3
  2878 ;; This function calls:
  2879 ;;		_I2C_Master_Wait
  2880 ;; This function is called by:
  2881 ;;		_main
  2882 ;; This function uses a non-reentrant model
  2883 ;;
  2884                           
  2885                           	psect	text11
  2886  000A5C                     __ptext11:
  2887                           	opt stack 0
  2888  000A5C                     _I2C_Master_Stop:
  2889                           	opt stack 27
  2890                           
  2891                           ;I2C.c: 43: I2C_Master_Wait();
  2892                           
  2893                           ;incstack = 0
  2894  000A5C  EC14  F005         	call	_I2C_Master_Wait	;wreg free
  2895                           
  2896                           ;I2C.c: 44: PEN = 1;
  2897  000A60  84C5               	bsf	4037,2,c	;volatile
  2898  000A62  0012               	return		;funcret
  2899  000A64                     __end_of_I2C_Master_Stop:
  2900                           	opt stack 0
  2901                           tblptru	equ	0xFF8
  2902                           tblptrh	equ	0xFF7
  2903                           tblptrl	equ	0xFF6
  2904                           tablat	equ	0xFF5
  2905                           prodh	equ	0xFF4
  2906                           prodl	equ	0xFF3
  2907                           intcon	equ	0xFF2
  2908                           intcon3	equ	0xFF0
  2909                           postinc0	equ	0xFEE
  2910                           wreg	equ	0xFE8
  2911                           indf2	equ	0xFDF
  2912                           postinc2	equ	0xFDE
  2913                           postdec2	equ	0xFDD
  2914                           fsr2h	equ	0xFDA
  2915                           fsr2l	equ	0xFD9
  2916                           status	equ	0xFD8
  2917                           
  2918 ;; *************** function _I2C_Master_Start *****************
  2919 ;; Defined at:
  2920 ;;		line 29 in file "../I2C.c"
  2921 ;; Parameters:    Size  Location     Type
  2922 ;;		None
  2923 ;; Auto vars:     Size  Location     Type
  2924 ;;		None
  2925 ;; Return value:  Size  Location     Type
  2926 ;;                  1    wreg      void 
  2927 ;; Registers used:
  2928 ;;		wreg, status,2, status,0, cstack
  2929 ;; Tracked objects:
  2930 ;;		On entry : 0/0
  2931 ;;		On exit  : 0/0
  2932 ;;		Unchanged: 0/0
  2933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2934 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2935 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2936 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2937 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2938 ;;Total ram usage:        0 bytes
  2939 ;; Hardware stack levels used:    1
  2940 ;; Hardware stack levels required when called:    3
  2941 ;; This function calls:
  2942 ;;		_I2C_Master_Wait
  2943 ;; This function is called by:
  2944 ;;		_main
  2945 ;; This function uses a non-reentrant model
  2946 ;;
  2947                           
  2948                           	psect	text12
  2949  000A64                     __ptext12:
  2950                           	opt stack 0
  2951  000A64                     _I2C_Master_Start:
  2952                           	opt stack 27
  2953                           
  2954                           ;I2C.c: 31: I2C_Master_Wait();
  2955                           
  2956                           ;incstack = 0
  2957  000A64  EC14  F005         	call	_I2C_Master_Wait	;wreg free
  2958                           
  2959                           ;I2C.c: 32: SEN = 1;
  2960  000A68  80C5               	bsf	4037,0,c	;volatile
  2961  000A6A  0012               	return		;funcret
  2962  000A6C                     __end_of_I2C_Master_Start:
  2963                           	opt stack 0
  2964                           tblptru	equ	0xFF8
  2965                           tblptrh	equ	0xFF7
  2966                           tblptrl	equ	0xFF6
  2967                           tablat	equ	0xFF5
  2968                           prodh	equ	0xFF4
  2969                           prodl	equ	0xFF3
  2970                           intcon	equ	0xFF2
  2971                           intcon3	equ	0xFF0
  2972                           postinc0	equ	0xFEE
  2973                           wreg	equ	0xFE8
  2974                           indf2	equ	0xFDF
  2975                           postinc2	equ	0xFDE
  2976                           postdec2	equ	0xFDD
  2977                           fsr2h	equ	0xFDA
  2978                           fsr2l	equ	0xFD9
  2979                           status	equ	0xFD8
  2980                           
  2981 ;; *************** function _I2C_Master_Read *****************
  2982 ;; Defined at:
  2983 ;;		line 53 in file "../I2C.c"
  2984 ;; Parameters:    Size  Location     Type
  2985 ;;  a               1    wreg     unsigned char 
  2986 ;; Auto vars:     Size  Location     Type
  2987 ;;  a               1   19[COMRAM] unsigned char 
  2988 ;;  temp            1   20[COMRAM] unsigned char 
  2989 ;; Return value:  Size  Location     Type
  2990 ;;                  1    wreg      unsigned char 
  2991 ;; Registers used:
  2992 ;;		wreg, status,2, status,0, cstack
  2993 ;; Tracked objects:
  2994 ;;		On entry : 0/0
  2995 ;;		On exit  : 0/0
  2996 ;;		Unchanged: 0/0
  2997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2999 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3000 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3001 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3002 ;;Total ram usage:        2 bytes
  3003 ;; Hardware stack levels used:    1
  3004 ;; Hardware stack levels required when called:    3
  3005 ;; This function calls:
  3006 ;;		_I2C_Master_Wait
  3007 ;; This function is called by:
  3008 ;;		_main
  3009 ;; This function uses a non-reentrant model
  3010 ;;
  3011                           
  3012                           	psect	text13
  3013  0009E4                     __ptext13:
  3014                           	opt stack 0
  3015  0009E4                     _I2C_Master_Read:
  3016                           	opt stack 27
  3017                           
  3018                           ;incstack = 0
  3019                           ;I2C_Master_Read@a stored from wreg
  3020  0009E4  6E14               	movwf	I2C_Master_Read@a,c
  3021                           
  3022                           ;I2C.c: 55: unsigned char temp;
  3023                           ;I2C.c: 56: I2C_Master_Wait();
  3024  0009E6  EC14  F005         	call	_I2C_Master_Wait	;wreg free
  3025                           
  3026                           ;I2C.c: 57: RCEN = 1;
  3027  0009EA  86C5               	bsf	4037,3,c	;volatile
  3028                           
  3029                           ;I2C.c: 58: I2C_Master_Wait();
  3030  0009EC  EC14  F005         	call	_I2C_Master_Wait	;wreg free
  3031                           
  3032                           ;I2C.c: 59: temp = SSPBUF;
  3033  0009F0  CFC9 F015          	movff	4041,I2C_Master_Read@temp	;volatile
  3034                           
  3035                           ;I2C.c: 60: I2C_Master_Wait();
  3036  0009F4  EC14  F005         	call	_I2C_Master_Wait	;wreg free
  3037                           
  3038                           ;I2C.c: 61: ACKDT = (a)?0:1;
  3039  0009F8  5014               	movf	I2C_Master_Read@a,w,c
  3040  0009FA  A4D8               	btfss	status,2,c
  3041  0009FC  D002               	goto	u150
  3042  0009FE  8AC5               	bsf	4037,5,c	;volatile
  3043  000A00  D001               	goto	l1027
  3044  000A02                     u150:
  3045  000A02  9AC5               	bcf	4037,5,c	;volatile
  3046  000A04                     l1027:
  3047                           
  3048                           ;I2C.c: 62: ACKEN = 1;
  3049  000A04  88C5               	bsf	4037,4,c	;volatile
  3050                           
  3051                           ;I2C.c: 63: return temp;
  3052  000A06  5015               	movf	I2C_Master_Read@temp,w,c
  3053  000A08  0012               	return	
  3054  000A0A                     __end_of_I2C_Master_Read:
  3055                           	opt stack 0
  3056                           tblptru	equ	0xFF8
  3057                           tblptrh	equ	0xFF7
  3058                           tblptrl	equ	0xFF6
  3059                           tablat	equ	0xFF5
  3060                           prodh	equ	0xFF4
  3061                           prodl	equ	0xFF3
  3062                           intcon	equ	0xFF2
  3063                           intcon3	equ	0xFF0
  3064                           postinc0	equ	0xFEE
  3065                           wreg	equ	0xFE8
  3066                           indf2	equ	0xFDF
  3067                           postinc2	equ	0xFDE
  3068                           postdec2	equ	0xFDD
  3069                           fsr2h	equ	0xFDA
  3070                           fsr2l	equ	0xFD9
  3071                           status	equ	0xFD8
  3072                           
  3073 ;; *************** function _I2C_Master_Wait *****************
  3074 ;; Defined at:
  3075 ;;		line 24 in file "../I2C.c"
  3076 ;; Parameters:    Size  Location     Type
  3077 ;;		None
  3078 ;; Auto vars:     Size  Location     Type
  3079 ;;		None
  3080 ;; Return value:  Size  Location     Type
  3081 ;;                  1    wreg      void 
  3082 ;; Registers used:
  3083 ;;		wreg, status,2, status,0
  3084 ;; Tracked objects:
  3085 ;;		On entry : 0/0
  3086 ;;		On exit  : 0/0
  3087 ;;		Unchanged: 0/0
  3088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3089 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3090 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3091 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3092 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3093 ;;Total ram usage:        1 bytes
  3094 ;; Hardware stack levels used:    1
  3095 ;; Hardware stack levels required when called:    2
  3096 ;; This function calls:
  3097 ;;		Nothing
  3098 ;; This function is called by:
  3099 ;;		_I2C_Master_Start
  3100 ;;		_I2C_Master_Stop
  3101 ;;		_I2C_Master_Write
  3102 ;;		_I2C_Master_Read
  3103 ;;		_I2C_Master_RepeatedStart
  3104 ;; This function uses a non-reentrant model
  3105 ;;
  3106                           
  3107                           	psect	text14
  3108  000A28                     __ptext14:
  3109                           	opt stack 0
  3110  000A28                     _I2C_Master_Wait:
  3111                           	opt stack 27
  3112  000A28                     l34:
  3113  000A28  B4C7               	btfsc	4039,2,c	;volatile
  3114  000A2A  D7FE               	goto	l34
  3115  000A2C  CFC5 F013          	movff	4037,??_I2C_Master_Wait	;volatile
  3116  000A30  0E1F               	movlw	31
  3117  000A32  1613               	andwf	??_I2C_Master_Wait,f,c
  3118  000A34  B4D8               	btfsc	status,2,c
  3119  000A36  0012               	return	
  3120  000A38  D7F7               	goto	l34
  3121  000A3A                     __end_of_I2C_Master_Wait:
  3122                           	opt stack 0
  3123                           tblptru	equ	0xFF8
  3124                           tblptrh	equ	0xFF7
  3125                           tblptrl	equ	0xFF6
  3126                           tablat	equ	0xFF5
  3127                           prodh	equ	0xFF4
  3128                           prodl	equ	0xFF3
  3129                           intcon	equ	0xFF2
  3130                           intcon3	equ	0xFF0
  3131                           postinc0	equ	0xFEE
  3132                           wreg	equ	0xFE8
  3133                           indf2	equ	0xFDF
  3134                           postinc2	equ	0xFDE
  3135                           postdec2	equ	0xFDD
  3136                           fsr2h	equ	0xFDA
  3137                           fsr2l	equ	0xFD9
  3138                           status	equ	0xFD8
  3139                           
  3140 ;; *************** function _I2C_Master_Init *****************
  3141 ;; Defined at:
  3142 ;;		line 13 in file "../I2C.c"
  3143 ;; Parameters:    Size  Location     Type
  3144 ;;  c               4   31[COMRAM] const unsigned long 
  3145 ;; Auto vars:     Size  Location     Type
  3146 ;;		None
  3147 ;; Return value:  Size  Location     Type
  3148 ;;                  1    wreg      void 
  3149 ;; Registers used:
  3150 ;;		wreg, status,2, status,0, cstack
  3151 ;; Tracked objects:
  3152 ;;		On entry : 0/0
  3153 ;;		On exit  : 0/0
  3154 ;;		Unchanged: 0/0
  3155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3156 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3157 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3158 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3159 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3160 ;;Total ram usage:        8 bytes
  3161 ;; Hardware stack levels used:    1
  3162 ;; Hardware stack levels required when called:    3
  3163 ;; This function calls:
  3164 ;;		___lldiv
  3165 ;; This function is called by:
  3166 ;;		_main
  3167 ;; This function uses a non-reentrant model
  3168 ;;
  3169                           
  3170                           	psect	text15
  3171  0007DA                     __ptext15:
  3172                           	opt stack 0
  3173  0007DA                     _I2C_Master_Init:
  3174                           	opt stack 27
  3175                           
  3176                           ;I2C.c: 16: SSPSTAT = 0b00000000;
  3177                           
  3178                           ;incstack = 0
  3179  0007DA  0E00               	movlw	0
  3180  0007DC  6EC7               	movwf	4039,c	;volatile
  3181                           
  3182                           ;I2C.c: 17: SSPCON1 = 0b00101000;
  3183  0007DE  0E28               	movlw	40
  3184  0007E0  6EC6               	movwf	4038,c	;volatile
  3185                           
  3186                           ;I2C.c: 18: SSPCON2 = 0b00000000;
  3187  0007E2  0E00               	movlw	0
  3188  0007E4  6EC5               	movwf	4037,c	;volatile
  3189                           
  3190                           ;I2C.c: 19: SSPADD = (10000000/(4*c))-1;
  3191  0007E6  0E80               	movlw	128
  3192  0007E8  6E13               	movwf	___lldiv@dividend,c
  3193  0007EA  0E96               	movlw	150
  3194  0007EC  6E14               	movwf	___lldiv@dividend+1,c
  3195  0007EE  0E98               	movlw	152
  3196  0007F0  6E15               	movwf	___lldiv@dividend+2,c
  3197  0007F2  0E00               	movlw	0
  3198  0007F4  6E16               	movwf	___lldiv@dividend+3,c
  3199  0007F6  C020  F024         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  3200  0007FA  C021  F025         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  3201  0007FE  C022  F026         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  3202  000802  C023  F027         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  3203  000806  0E02               	movlw	2
  3204  000808                     u835:
  3205  000808  90D8               	bcf	status,0,c
  3206  00080A  3624               	rlcf	??_I2C_Master_Init,f,c
  3207  00080C  3625               	rlcf	??_I2C_Master_Init+1,f,c
  3208  00080E  3626               	rlcf	??_I2C_Master_Init+2,f,c
  3209  000810  3627               	rlcf	??_I2C_Master_Init+3,f,c
  3210  000812  2EE8               	decfsz	wreg,f,c
  3211  000814  D7F9               	goto	u835
  3212  000816  C024  F017         	movff	??_I2C_Master_Init,___lldiv@divisor
  3213  00081A  C025  F018         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  3214  00081E  C026  F019         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  3215  000822  C027  F01A         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  3216  000826  ECAC  F003         	call	___lldiv	;wreg free
  3217  00082A  0413               	decf	?___lldiv,w,c
  3218  00082C  6EC8               	movwf	4040,c	;volatile
  3219                           
  3220                           ;I2C.c: 20: TRISC3 = 1;
  3221  00082E  8694               	bsf	3988,3,c	;volatile
  3222                           
  3223                           ;I2C.c: 21: TRISC4 = 1;
  3224  000830  8894               	bsf	3988,4,c	;volatile
  3225  000832  0012               	return		;funcret
  3226  000834                     __end_of_I2C_Master_Init:
  3227                           	opt stack 0
  3228                           tblptru	equ	0xFF8
  3229                           tblptrh	equ	0xFF7
  3230                           tblptrl	equ	0xFF6
  3231                           tablat	equ	0xFF5
  3232                           prodh	equ	0xFF4
  3233                           prodl	equ	0xFF3
  3234                           intcon	equ	0xFF2
  3235                           intcon3	equ	0xFF0
  3236                           postinc0	equ	0xFEE
  3237                           wreg	equ	0xFE8
  3238                           indf2	equ	0xFDF
  3239                           postinc2	equ	0xFDE
  3240                           postdec2	equ	0xFDD
  3241                           fsr2h	equ	0xFDA
  3242                           fsr2l	equ	0xFD9
  3243                           status	equ	0xFD8
  3244                           
  3245 ;; *************** function ___lldiv *****************
  3246 ;; Defined at:
  3247 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  3248 ;; Parameters:    Size  Location     Type
  3249 ;;  dividend        4   18[COMRAM] unsigned long 
  3250 ;;  divisor         4   22[COMRAM] unsigned long 
  3251 ;; Auto vars:     Size  Location     Type
  3252 ;;  quotient        4   26[COMRAM] unsigned long 
  3253 ;;  counter         1   30[COMRAM] unsigned char 
  3254 ;; Return value:  Size  Location     Type
  3255 ;;                  4   18[COMRAM] unsigned long 
  3256 ;; Registers used:
  3257 ;;		wreg, status,2, status,0
  3258 ;; Tracked objects:
  3259 ;;		On entry : 0/0
  3260 ;;		On exit  : 0/0
  3261 ;;		Unchanged: 0/0
  3262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3263 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3264 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3265 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3266 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3267 ;;Total ram usage:       13 bytes
  3268 ;; Hardware stack levels used:    1
  3269 ;; Hardware stack levels required when called:    2
  3270 ;; This function calls:
  3271 ;;		Nothing
  3272 ;; This function is called by:
  3273 ;;		_I2C_Master_Init
  3274 ;; This function uses a non-reentrant model
  3275 ;;
  3276                           
  3277                           	psect	text16
  3278  000758                     __ptext16:
  3279                           	opt stack 0
  3280  000758                     ___lldiv:
  3281                           	opt stack 27
  3282                           
  3283                           ;incstack = 0
  3284  000758  0E00               	movlw	0
  3285  00075A  6E1B               	movwf	___lldiv@quotient,c
  3286  00075C  0E00               	movlw	0
  3287  00075E  6E1C               	movwf	___lldiv@quotient+1,c
  3288  000760  0E00               	movlw	0
  3289  000762  6E1D               	movwf	___lldiv@quotient+2,c
  3290  000764  0E00               	movlw	0
  3291  000766  6E1E               	movwf	___lldiv@quotient+3,c
  3292  000768  5017               	movf	___lldiv@divisor,w,c
  3293  00076A  1018               	iorwf	___lldiv@divisor+1,w,c
  3294  00076C  1019               	iorwf	___lldiv@divisor+2,w,c
  3295  00076E  101A               	iorwf	___lldiv@divisor+3,w,c
  3296  000770  B4D8               	btfsc	status,2,c
  3297  000772  D02A               	goto	l627
  3298  000774  0E01               	movlw	1
  3299  000776  6E1F               	movwf	___lldiv@counter,c
  3300  000778  D006               	goto	l1441
  3301  00077A                     l1439:
  3302  00077A  90D8               	bcf	status,0,c
  3303  00077C  3617               	rlcf	___lldiv@divisor,f,c
  3304  00077E  3618               	rlcf	___lldiv@divisor+1,f,c
  3305  000780  3619               	rlcf	___lldiv@divisor+2,f,c
  3306  000782  361A               	rlcf	___lldiv@divisor+3,f,c
  3307  000784  2A1F               	incf	___lldiv@counter,f,c
  3308  000786                     l1441:
  3309  000786  AE1A               	btfss	___lldiv@divisor+3,7,c
  3310  000788  D7F8               	goto	l1439
  3311  00078A                     l1443:
  3312  00078A  90D8               	bcf	status,0,c
  3313  00078C  361B               	rlcf	___lldiv@quotient,f,c
  3314  00078E  361C               	rlcf	___lldiv@quotient+1,f,c
  3315  000790  361D               	rlcf	___lldiv@quotient+2,f,c
  3316  000792  361E               	rlcf	___lldiv@quotient+3,f,c
  3317  000794  5017               	movf	___lldiv@divisor,w,c
  3318  000796  5C13               	subwf	___lldiv@dividend,w,c
  3319  000798  5018               	movf	___lldiv@divisor+1,w,c
  3320  00079A  5814               	subwfb	___lldiv@dividend+1,w,c
  3321  00079C  5019               	movf	___lldiv@divisor+2,w,c
  3322  00079E  5815               	subwfb	___lldiv@dividend+2,w,c
  3323  0007A0  501A               	movf	___lldiv@divisor+3,w,c
  3324  0007A2  5816               	subwfb	___lldiv@dividend+3,w,c
  3325  0007A4  A0D8               	btfss	status,0,c
  3326  0007A6  D009               	goto	l1451
  3327  0007A8  5017               	movf	___lldiv@divisor,w,c
  3328  0007AA  5E13               	subwf	___lldiv@dividend,f,c
  3329  0007AC  5018               	movf	___lldiv@divisor+1,w,c
  3330  0007AE  5A14               	subwfb	___lldiv@dividend+1,f,c
  3331  0007B0  5019               	movf	___lldiv@divisor+2,w,c
  3332  0007B2  5A15               	subwfb	___lldiv@dividend+2,f,c
  3333  0007B4  501A               	movf	___lldiv@divisor+3,w,c
  3334  0007B6  5A16               	subwfb	___lldiv@dividend+3,f,c
  3335  0007B8  801B               	bsf	___lldiv@quotient,0,c
  3336  0007BA                     l1451:
  3337  0007BA  90D8               	bcf	status,0,c
  3338  0007BC  321A               	rrcf	___lldiv@divisor+3,f,c
  3339  0007BE  3219               	rrcf	___lldiv@divisor+2,f,c
  3340  0007C0  3218               	rrcf	___lldiv@divisor+1,f,c
  3341  0007C2  3217               	rrcf	___lldiv@divisor,f,c
  3342  0007C4  2E1F               	decfsz	___lldiv@counter,f,c
  3343  0007C6  D7E1               	goto	l1443
  3344  0007C8                     l627:
  3345  0007C8  C01B  F013         	movff	___lldiv@quotient,?___lldiv
  3346  0007CC  C01C  F014         	movff	___lldiv@quotient+1,?___lldiv+1
  3347  0007D0  C01D  F015         	movff	___lldiv@quotient+2,?___lldiv+2
  3348  0007D4  C01E  F016         	movff	___lldiv@quotient+3,?___lldiv+3
  3349  0007D8  0012               	return		;funcret
  3350  0007DA                     __end_of___lldiv:
  3351                           	opt stack 0
  3352                           tblptru	equ	0xFF8
  3353                           tblptrh	equ	0xFF7
  3354                           tblptrl	equ	0xFF6
  3355                           tablat	equ	0xFF5
  3356                           prodh	equ	0xFF4
  3357                           prodl	equ	0xFF3
  3358                           intcon	equ	0xFF2
  3359                           intcon3	equ	0xFF0
  3360                           postinc0	equ	0xFEE
  3361                           wreg	equ	0xFE8
  3362                           indf2	equ	0xFDF
  3363                           postinc2	equ	0xFDE
  3364                           postdec2	equ	0xFDD
  3365                           fsr2h	equ	0xFDA
  3366                           fsr2l	equ	0xFD9
  3367                           status	equ	0xFD8
  3368                           
  3369 ;; *************** function _isr *****************
  3370 ;; Defined at:
  3371 ;;		line 185 in file "../main.c"
  3372 ;; Parameters:    Size  Location     Type
  3373 ;;		None
  3374 ;; Auto vars:     Size  Location     Type
  3375 ;;  keypress        1   17[COMRAM] unsigned char 
  3376 ;; Return value:  Size  Location     Type
  3377 ;;                  1    wreg      void 
  3378 ;; Registers used:
  3379 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3380 ;; Tracked objects:
  3381 ;;		On entry : 0/0
  3382 ;;		On exit  : 0/0
  3383 ;;		Unchanged: 0/0
  3384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3385 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3386 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3387 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3388 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3389 ;;Total ram usage:       15 bytes
  3390 ;; Hardware stack levels used:    1
  3391 ;; Hardware stack levels required when called:    1
  3392 ;; This function calls:
  3393 ;;		_switchMenu
  3394 ;; This function is called by:
  3395 ;;		Interrupt level 2
  3396 ;; This function uses a non-reentrant model
  3397 ;;
  3398                           
  3399                           	psect	intcode
  3400  000008                     __pintcode:
  3401                           	opt stack 0
  3402  000008                     _isr:
  3403                           	opt stack 26
  3404                           
  3405                           ;incstack = 0
  3406  000008  8248               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3407  00000A  ED1B  F003         	call	int_func,f	;refresh shadow registers
  3408                           tblptru	equ	0xFF8
  3409                           tblptrh	equ	0xFF7
  3410                           tblptrl	equ	0xFF6
  3411                           tablat	equ	0xFF5
  3412                           prodh	equ	0xFF4
  3413                           prodl	equ	0xFF3
  3414                           intcon	equ	0xFF2
  3415                           intcon3	equ	0xFF0
  3416                           postinc0	equ	0xFEE
  3417                           wreg	equ	0xFE8
  3418                           indf2	equ	0xFDF
  3419                           postinc2	equ	0xFDE
  3420                           postdec2	equ	0xFDD
  3421                           fsr2h	equ	0xFDA
  3422                           fsr2l	equ	0xFD9
  3423                           status	equ	0xFD8
  3424                           
  3425                           	psect	intcode_body
  3426  000636                     __pintcode_body:
  3427                           	opt stack 26
  3428  000636                     int_func:
  3429                           	opt stack 26
  3430  000636  0006               	pop		; remove dummy address from shadow register refresh
  3431  000638  CFFA F004          	movff	pclath,??_isr
  3432  00063C  CFFB F005          	movff	pclatu,??_isr+1
  3433  000640  CFE9 F006          	movff	fsr0l,??_isr+2
  3434  000644  CFEA F007          	movff	fsr0h,??_isr+3
  3435  000648  CFE1 F008          	movff	fsr1l,??_isr+4
  3436  00064C  CFE2 F009          	movff	fsr1h,??_isr+5
  3437  000650  CFD9 F00A          	movff	fsr2l,??_isr+6
  3438  000654  CFDA F00B          	movff	fsr2h,??_isr+7
  3439  000658  CFF3 F00C          	movff	prodl,??_isr+8
  3440  00065C  CFF4 F00D          	movff	prodh,??_isr+9
  3441  000660  CFF6 F00E          	movff	tblptrl,??_isr+10
  3442  000664  CFF7 F00F          	movff	tblptrh,??_isr+11
  3443  000668  CFF8 F010          	movff	tblptru,??_isr+12
  3444  00066C  CFF5 F011          	movff	tablat,??_isr+13
  3445                           
  3446                           ;main.c: 186: if(INT1IF && (screenMode != 1)){
  3447  000670  A0F0               	btfss	intcon3,0,c	;volatile
  3448  000672  D037               	goto	i2l1843
  3449  000674  0447               	decf	_screenMode,w,c
  3450  000676  B4D8               	btfsc	status,2,c
  3451  000678  D034               	goto	i2l1843
  3452                           
  3453                           ;main.c: 187: unsigned char keypress = (PORTB & 0xF0) >> 4;
  3454  00067A  3881               	swapf	3969,w,c	;volatile
  3455  00067C  0B0F               	andlw	15
  3456  00067E  0B0F               	andlw	15
  3457  000680  6E12               	movwf	isr@keypress,c
  3458                           
  3459                           ;main.c: 188: if (keys[keypress] == '*'){
  3460  000682  5012               	movf	isr@keypress,w,c
  3461  000684  0D01               	mullw	1
  3462  000686  0E7B               	movlw	low _keys
  3463  000688  24F3               	addwf	prodl,w,c
  3464  00068A  6EF6               	movwf	tblptrl,c
  3465  00068C  0EFE               	movlw	high _keys
  3466  00068E  20F4               	addwfc	prodh,w,c
  3467  000690  6EF7               	movwf	tblptrh,c
  3468  000692                     	if	0	;There are less than 3 active tblptr bytes
  3469  000692                     	endif
  3470  000692  0008               	tblrd		*
  3471  000694  50F5               	movf	tablat,w,c
  3472  000696  0A2A               	xorlw	42
  3473  000698  A4D8               	btfss	status,2,c
  3474  00069A  D00F               	goto	i2l1837
  3475                           
  3476                           ;main.c: 190: if(screenMode == 2){
  3477  00069C  0E02               	movlw	2
  3478  00069E  1847               	xorwf	_screenMode,w,c
  3479  0006A0  A4D8               	btfss	status,2,c
  3480  0006A2  D005               	goto	i2l1833
  3481                           
  3482                           ;main.c: 191: screenMode = 1;
  3483  0006A4  0E01               	movlw	1
  3484  0006A6  6E47               	movwf	_screenMode,c
  3485                           
  3486                           ;main.c: 192: T0CONbits.TMR0ON = 1;
  3487  0006A8  8ED5               	bsf	4053,7,c	;volatile
  3488                           
  3489                           ;main.c: 193: RC1 = 1;
  3490  0006AA  8282               	bsf	3970,1,c	;volatile
  3491                           
  3492                           ;main.c: 194: }
  3493  0006AC  D019               	goto	i2l1841
  3494  0006AE                     i2l1833:
  3495                           
  3496                           ;main.c: 195: else if (screenMode == 0)
  3497  0006AE  5047               	movf	_screenMode,w,c
  3498  0006B0  A4D8               	btfss	status,2,c
  3499  0006B2  D016               	goto	i2l1841
  3500                           
  3501                           ;main.c: 196: screenMode = 2;
  3502  0006B4  0E02               	movlw	2
  3503  0006B6  6E47               	movwf	_screenMode,c
  3504                           
  3505                           ;main.c: 197: }
  3506  0006B8  D013               	goto	i2l1841
  3507  0006BA                     i2l1837:
  3508                           
  3509                           ;main.c: 198: else if (screenMode != 0)
  3510  0006BA  5047               	movf	_screenMode,w,c
  3511  0006BC  B4D8               	btfsc	status,2,c
  3512  0006BE  D010               	goto	i2l1841
  3513                           
  3514                           ;main.c: 199: switchMenu('4', '6', keys[keypress]);
  3515  0006C0  0E36               	movlw	54
  3516  0006C2  6E01               	movwf	switchMenu@right,c
  3517  0006C4  5012               	movf	isr@keypress,w,c
  3518  0006C6  0D01               	mullw	1
  3519  0006C8  0E7B               	movlw	low _keys
  3520  0006CA  24F3               	addwf	prodl,w,c
  3521  0006CC  6EF6               	movwf	tblptrl,c
  3522  0006CE  0EFE               	movlw	high _keys
  3523  0006D0  20F4               	addwfc	prodh,w,c
  3524  0006D2  6EF7               	movwf	tblptrh,c
  3525  0006D4                     	if	0	;There are less than 3 active tblptr bytes
  3526  0006D4                     	endif
  3527  0006D4  0008               	tblrd		*
  3528  0006D6  CFF5 F002          	movff	tablat,switchMenu@key
  3529  0006DA  0E34               	movlw	52
  3530  0006DC  ECAE  F004         	call	_switchMenu
  3531  0006E0                     i2l1841:
  3532                           
  3533                           ;main.c: 201: INT1IF = 0;
  3534  0006E0  90F0               	bcf	intcon3,0,c	;volatile
  3535  0006E2                     i2l1843:
  3536                           
  3537                           ;main.c: 202: }
  3538                           ;main.c: 203: if ((screenMode == 1) && TMR0IF && TMR0IE){
  3539  0006E2  0447               	decf	_screenMode,w,c
  3540  0006E4  B4D8               	btfsc	status,2,c
  3541  0006E6  A4F2               	btfss	intcon,2,c	;volatile
  3542  0006E8  D019               	goto	i2l203
  3543  0006EA  AAF2               	btfss	intcon,5,c	;volatile
  3544  0006EC  D017               	goto	i2l203
  3545                           
  3546                           ;main.c: 205: TMR0IF = 0;
  3547  0006EE  94F2               	bcf	intcon,2,c	;volatile
  3548                           
  3549                           ;main.c: 206: TMR0 = 0;
  3550  0006F0  0E00               	movlw	0
  3551  0006F2  6ED7               	movwf	4055,c	;volatile
  3552  0006F4  0E00               	movlw	0
  3553  0006F6  6ED6               	movwf	4054,c	;volatile
  3554                           
  3555                           ;main.c: 207: counter++;
  3556  0006F8  4A45               	infsnz	_counter,f,c
  3557  0006FA  2A46               	incf	_counter+1,f,c
  3558                           
  3559                           ;main.c: 208: if (counter >= 6866){
  3560  0006FC  BE46               	btfsc	_counter+1,7,c
  3561  0006FE  D00E               	goto	i2l203
  3562  000700  0ED2               	movlw	210
  3563  000702  5C45               	subwf	_counter,w,c
  3564  000704  0E1A               	movlw	26
  3565  000706  5846               	subwfb	_counter+1,w,c
  3566  000708  A0D8               	btfss	status,0,c
  3567  00070A  D008               	goto	i2l203
  3568                           
  3569                           ;main.c: 215: counter = 0;
  3570  00070C  0E00               	movlw	0
  3571  00070E  6E46               	movwf	_counter+1,c
  3572  000710  0E00               	movlw	0
  3573  000712  6E45               	movwf	_counter,c
  3574                           
  3575                           ;main.c: 216: screenMode = 0;
  3576  000714  0E00               	movlw	0
  3577  000716  6E47               	movwf	_screenMode,c
  3578                           
  3579                           ;main.c: 217: T0CONbits.TMR0ON = 0;
  3580  000718  9ED5               	bcf	4053,7,c	;volatile
  3581                           
  3582                           ;main.c: 218: RC1 = 0;
  3583  00071A  9282               	bcf	3970,1,c	;volatile
  3584  00071C                     i2l203:
  3585  00071C  C011  FFF5         	movff	??_isr+13,tablat
  3586  000720  C010  FFF8         	movff	??_isr+12,tblptru
  3587  000724  C00F  FFF7         	movff	??_isr+11,tblptrh
  3588  000728  C00E  FFF6         	movff	??_isr+10,tblptrl
  3589  00072C  C00D  FFF4         	movff	??_isr+9,prodh
  3590  000730  C00C  FFF3         	movff	??_isr+8,prodl
  3591  000734  C00B  FFDA         	movff	??_isr+7,fsr2h
  3592  000738  C00A  FFD9         	movff	??_isr+6,fsr2l
  3593  00073C  C009  FFE2         	movff	??_isr+5,fsr1h
  3594  000740  C008  FFE1         	movff	??_isr+4,fsr1l
  3595  000744  C007  FFEA         	movff	??_isr+3,fsr0h
  3596  000748  C006  FFE9         	movff	??_isr+2,fsr0l
  3597  00074C  C005  FFFB         	movff	??_isr+1,pclatu
  3598  000750  C004  FFFA         	movff	??_isr,pclath
  3599  000754  9248               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3600  000756  0011               	retfie		f
  3601  000758                     __end_of_isr:
  3602                           	opt stack 0
  3603                           pclatu	equ	0xFFB
  3604                           pclath	equ	0xFFA
  3605                           tblptru	equ	0xFF8
  3606                           tblptrh	equ	0xFF7
  3607                           tblptrl	equ	0xFF6
  3608                           tablat	equ	0xFF5
  3609                           prodh	equ	0xFF4
  3610                           prodl	equ	0xFF3
  3611                           intcon	equ	0xFF2
  3612                           intcon3	equ	0xFF0
  3613                           postinc0	equ	0xFEE
  3614                           fsr0h	equ	0xFEA
  3615                           fsr0l	equ	0xFE9
  3616                           wreg	equ	0xFE8
  3617                           fsr1h	equ	0xFE2
  3618                           fsr1l	equ	0xFE1
  3619                           indf2	equ	0xFDF
  3620                           postinc2	equ	0xFDE
  3621                           postdec2	equ	0xFDD
  3622                           fsr2h	equ	0xFDA
  3623                           fsr2l	equ	0xFD9
  3624                           status	equ	0xFD8
  3625                           
  3626 ;; *************** function _switchMenu *****************
  3627 ;; Defined at:
  3628 ;;		line 170 in file "../main.c"
  3629 ;; Parameters:    Size  Location     Type
  3630 ;;  left            1    wreg     unsigned char 
  3631 ;;  right           1    0[COMRAM] unsigned char 
  3632 ;;  key             1    1[COMRAM] unsigned char 
  3633 ;; Auto vars:     Size  Location     Type
  3634 ;;  left            1    2[COMRAM] unsigned char 
  3635 ;; Return value:  Size  Location     Type
  3636 ;;                  1    wreg      void 
  3637 ;; Registers used:
  3638 ;;		wreg, status,2, status,0
  3639 ;; Tracked objects:
  3640 ;;		On entry : 0/0
  3641 ;;		On exit  : 0/0
  3642 ;;		Unchanged: 0/0
  3643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3644 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3645 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3646 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3647 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3648 ;;Total ram usage:        3 bytes
  3649 ;; Hardware stack levels used:    1
  3650 ;; This function calls:
  3651 ;;		Nothing
  3652 ;; This function is called by:
  3653 ;;		_isr
  3654 ;; This function uses a non-reentrant model
  3655 ;;
  3656                           
  3657                           	psect	text18
  3658  00095C                     __ptext18:
  3659                           	opt stack 0
  3660  00095C                     _switchMenu:
  3661                           	opt stack 26
  3662                           
  3663                           ;incstack = 0
  3664                           ;switchMenu@left stored from wreg
  3665  00095C  6E03               	movwf	switchMenu@left,c
  3666                           
  3667                           ;main.c: 171: if (key == right){
  3668  00095E  5001               	movf	switchMenu@right,w,c
  3669  000960  1802               	xorwf	switchMenu@key,w,c
  3670  000962  A4D8               	btfss	status,2,c
  3671  000964  D009               	goto	i2l1643
  3672                           
  3673                           ;main.c: 172: if (screenMode == 2)
  3674  000966  0E02               	movlw	2
  3675  000968  1847               	xorwf	_screenMode,w,c
  3676  00096A  A4D8               	btfss	status,2,c
  3677  00096C  D003               	goto	i2l1641
  3678                           
  3679                           ;main.c: 173: screenMode = 8;
  3680  00096E  0E08               	movlw	8
  3681  000970  6E47               	movwf	_screenMode,c
  3682  000972  0012               	return	
  3683  000974                     i2l1641:
  3684                           
  3685                           ;main.c: 174: else
  3686                           ;main.c: 175: screenMode -= 1;
  3687  000974  0647               	decf	_screenMode,f,c
  3688                           
  3689                           ;main.c: 176: }
  3690  000976  0012               	return	
  3691  000978                     i2l1643:
  3692                           
  3693                           ;main.c: 177: else if (key == left){
  3694  000978  5003               	movf	switchMenu@left,w,c
  3695  00097A  1802               	xorwf	switchMenu@key,w,c
  3696  00097C  A4D8               	btfss	status,2,c
  3697  00097E  0012               	return	
  3698                           
  3699                           ;main.c: 178: if (screenMode == 8)
  3700  000980  0E08               	movlw	8
  3701  000982  1847               	xorwf	_screenMode,w,c
  3702  000984  A4D8               	btfss	status,2,c
  3703  000986  D003               	goto	i2l1649
  3704                           
  3705                           ;main.c: 179: screenMode = 2;
  3706  000988  0E02               	movlw	2
  3707  00098A  6E47               	movwf	_screenMode,c
  3708  00098C  0012               	return	
  3709  00098E                     i2l1649:
  3710                           
  3711                           ;main.c: 180: else
  3712                           ;main.c: 181: screenMode += 1;
  3713  00098E  2A47               	incf	_screenMode,f,c
  3714  000990  0012               	return	
  3715  000992                     __end_of_switchMenu:
  3716                           	opt stack 0
  3717                           pclatu	equ	0xFFB
  3718                           pclath	equ	0xFFA
  3719                           tblptru	equ	0xFF8
  3720                           tblptrh	equ	0xFF7
  3721                           tblptrl	equ	0xFF6
  3722                           tablat	equ	0xFF5
  3723                           prodh	equ	0xFF4
  3724                           prodl	equ	0xFF3
  3725                           intcon	equ	0xFF2
  3726                           intcon3	equ	0xFF0
  3727                           postinc0	equ	0xFEE
  3728                           fsr0h	equ	0xFEA
  3729                           fsr0l	equ	0xFE9
  3730                           wreg	equ	0xFE8
  3731                           fsr1h	equ	0xFE2
  3732                           fsr1l	equ	0xFE1
  3733                           indf2	equ	0xFDF
  3734                           postinc2	equ	0xFDE
  3735                           postdec2	equ	0xFDD
  3736                           fsr2h	equ	0xFDA
  3737                           fsr2l	equ	0xFD9
  3738                           status	equ	0xFD8
  3739                           pclatu	equ	0xFFB
  3740                           pclath	equ	0xFFA
  3741                           tblptru	equ	0xFF8
  3742                           tblptrh	equ	0xFF7
  3743                           tblptrl	equ	0xFF6
  3744                           tablat	equ	0xFF5
  3745                           prodh	equ	0xFF4
  3746                           prodl	equ	0xFF3
  3747                           intcon	equ	0xFF2
  3748                           intcon3	equ	0xFF0
  3749                           postinc0	equ	0xFEE
  3750                           fsr0h	equ	0xFEA
  3751                           fsr0l	equ	0xFE9
  3752                           wreg	equ	0xFE8
  3753                           fsr1h	equ	0xFE2
  3754                           fsr1l	equ	0xFE1
  3755                           indf2	equ	0xFDF
  3756                           postinc2	equ	0xFDE
  3757                           postdec2	equ	0xFDD
  3758                           fsr2h	equ	0xFDA
  3759                           fsr2l	equ	0xFD9
  3760                           status	equ	0xFD8
  3761                           
  3762                           	psect	rparam
  3763  0000                     pclatu	equ	0xFFB
  3764                           pclath	equ	0xFFA
  3765                           tblptru	equ	0xFF8
  3766                           tblptrh	equ	0xFF7
  3767                           tblptrl	equ	0xFF6
  3768                           tablat	equ	0xFF5
  3769                           prodh	equ	0xFF4
  3770                           prodl	equ	0xFF3
  3771                           intcon	equ	0xFF2
  3772                           intcon3	equ	0xFF0
  3773                           postinc0	equ	0xFEE
  3774                           fsr0h	equ	0xFEA
  3775                           fsr0l	equ	0xFE9
  3776                           wreg	equ	0xFE8
  3777                           fsr1h	equ	0xFE2
  3778                           fsr1l	equ	0xFE1
  3779                           indf2	equ	0xFDF
  3780                           postinc2	equ	0xFDE
  3781                           postdec2	equ	0xFDD
  3782                           fsr2h	equ	0xFDA
  3783                           fsr2l	equ	0xFD9
  3784                           status	equ	0xFD8
  3785                           
  3786                           	psect	temp
  3787  000048                     btemp:
  3788                           	opt stack 0
  3789  000048                     	ds	1
  3790  0000                     int$flags	set	btemp
  3791                           pclatu	equ	0xFFB
  3792                           pclath	equ	0xFFA
  3793                           tblptru	equ	0xFF8
  3794                           tblptrh	equ	0xFF7
  3795                           tblptrl	equ	0xFF6
  3796                           tablat	equ	0xFF5
  3797                           prodh	equ	0xFF4
  3798                           prodl	equ	0xFF3
  3799                           intcon	equ	0xFF2
  3800                           intcon3	equ	0xFF0
  3801                           postinc0	equ	0xFEE
  3802                           fsr0h	equ	0xFEA
  3803                           fsr0l	equ	0xFE9
  3804                           wreg	equ	0xFE8
  3805                           fsr1h	equ	0xFE2
  3806                           fsr1l	equ	0xFE1
  3807                           indf2	equ	0xFDF
  3808                           postinc2	equ	0xFDE
  3809                           postdec2	equ	0xFDD
  3810                           fsr2h	equ	0xFDA
  3811                           fsr2l	equ	0xFD9
  3812                           status	equ	0xFD8


Data Sizes:
    Strings     353
    Constant    35
    Data        1
    BSS         9
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     61      71
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 25
		 -> STR_19(CODE[23]), STR_18(CODE[23]), STR_17(CODE[21]), STR_16(CODE[17]), 
		 -> STR_15(CODE[21]), STR_14(CODE[17]), STR_13(CODE[19]), STR_12(CODE[17]), 
		 -> STR_11(CODE[19]), STR_10(CODE[17]), STR_9(CODE[25]), STR_8(CODE[17]), 
		 -> STR_7(CODE[17]), STR_6(CODE[17]), STR_5(CODE[17]), STR_4(CODE[17]), 
		 -> STR_3(CODE[17]), STR_2(CODE[17]), STR_1(CODE[17]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _I2C_Master_Init->___lldiv

Critical Paths under _isr in COMRAM

    _isr->_switchMenu

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0    4461
                                             52 COMRAM     9     9      0
                    _I2C_Master_Init
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              31    23      8    3363
                                             30 COMRAM    22    14      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      90
                                             20 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             18 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     287
                                             18 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     287
                                             25 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     418
                                             18 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0      90
                                             21 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0      90
                                             20 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0      75
                                             18 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Write                                     2     0      2     214
                                             19 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Read                                      2     2      0      30
                                             19 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Wait                                      1     1      0       0
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     376
                                             31 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     290
                                             18 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                 15    15      0     261
                                              3 COMRAM    15    15      0
                         _switchMenu
 ---------------------------------------------------------------------------------
 (5) _switchMenu                                           3     1      2     216
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _I2C_Master_Read
     _I2C_Master_Wait
   _I2C_Master_Start
     _I2C_Master_Wait
   _I2C_Master_Stop
     _I2C_Master_Wait
   _I2C_Master_Write
     _I2C_Master_Wait
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
       _lcdNibble

 _isr (ROOT)
   _switchMenu

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     3D      47       1       56.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      47      34        0.0%
DATA                 0      0      47       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sat Feb 04 18:37:49 2017

                       l34 0A28        ___wmul@multiplicand 0015                __CFG_BORV$3 000000  
             __CFG_CP0$OFF 000000               __CFG_CP1$OFF 000000               __CFG_CP2$OFF 000000  
             __CFG_CP3$OFF 000000                __CFG_OSC$HS 000000                        l160 0142  
                      l145 0050                        l235 0416                        l172 0238  
                      l166 01C0                        l169 01FC                        l627 07C8  
                      l680 087C                        l690 0952               __CFG_CPB$OFF 000000  
                      _RC1 007C11                        u150 0A02                        _PEN 007E2A  
             __CFG_CPD$OFF 000000                        _SEN 007E28                        u835 0808  
                      _isr 0008                        prod 000FF3                        wreg 000FE8  
             __CFG_LVP$OFF 000000               __CFG_WDT$OFF 000000                       l1027 0A04  
                     l1423 0A20                       l1511 0344                       l1441 0786  
                     l1601 052A                       l1513 0352                       l1451 07BA  
                     l1443 078A                       l1531 03E4                       l1523 0386  
                     l1507 0334                       l1461 084A                       l1621 05B8  
                     l1613 055C                       l1517 0358                       l1701 00C4  
                     l1439 077A                       l1463 0852                       l1631 0614  
                     l1607 0540                       l1551 045E                       l1535 03E8  
                     l1711 00EA                       l1473 0872                       l1465 0856  
                     l1481 0928                       l1609 0548                       l1617 056E  
                     l1553 0462                       l1633 061C                       l1483 0930  
                     l1619 0574                       l1627 05FE                       l1547 0444  
                     l1803 02B0                       l1485 0934                       l1629 060E  
                     l1565 048E                       l1581 04BE                       l1741 0188  
                     l1725 013A                       l1717 010E                       l1709 00E0  
                     l1567 0492                       l1583 04CE                       l1815 0320  
                     l1751 01B6                       l1719 0116                       l1489 0948  
                     l1593 050C                       l1809 02CC                       l1595 0514  
                     l1739 017E                       l1691 00A0                       l1683 0084  
                     l1589 04E8                       l1765 01F2                       l1679 007C  
                     l1793 026A                       l1697 00BC                       l1795 0274  
                     l1779 022E                       l1799 02A8                       ?_isr 0001  
                     STR_1 FFDD                       STR_2 FFEE                       STR_3 FFBB  
                     STR_4 FF44                       STR_5 FF33                       STR_6 FF99  
                     STR_7 FF66                       STR_8 FFAA                       STR_9 FE9E  
                     _LATB 000F8A                       u1407 08DA                       _LATC 000F8B  
                     _LATD 000F8C                       u1417 090E                       u1427 089E  
                     u1437 08A6                       u1447 08C6                       u1457 08CE  
                     u1387 0092                       u1397 00D2                       _RCEN 007E2B  
                     _TMR0 000FD6                       _RSEN 007E29                main@numBats 0038  
                     _main 0012                       _keys FE7B                       _time 003E  
                     fsr0h 000FEA                       fsr1h 000FE2                       fsr2h 000FDA  
                     fsr0l 000FE9                       indf2 000FDF                       fsr1l 000FE1  
                     fsr2l 000FD9                       btemp 0048                       prodh 000FF4  
                     prodl 000FF3                       start 000E              __CFG_IESO$OFF 000000  
            __CFG_MCLRE$ON 000000               ___param_bank 000000                      ??_isr 0004  
         ?_I2C_Master_Init 0020           ?_I2C_Master_Read 0001           ?_I2C_Master_Wait 0001  
         ?_I2C_Master_Stop 0001                      ?_main 0001                      _ACKEN 007E2C  
                    _ACKDT 007E2D                      STR_10 FFCC                      STR_11 FF0F  
                    STR_12 FF55                      STR_20 FF22                      STR_13 FF0F  
                    STR_14 FF88                      STR_15 FEE5                      STR_16 FF77  
                    STR_17 FEFA                      STR_18 FEB7                      STR_19 FECE  
          __end_of___lldiv 07DA                      _T0CON 000FD5            __end_of___lwdiv 0886  
          __end_of___lwmod 095C                      i2l203 071C                      _PORTB 000F81  
                    _TRISB 000F93                      _TRISC 000F94                      _TRISD 000F95  
            __CFG_PWRT$OFF 000000              __CFG_WRT0$OFF 000000              __CFG_WRT1$OFF 000000  
            __CFG_WRT2$OFF 000000              __CFG_WRT3$OFF 000000            __end_of_lcdInst 0A52  
           __CFG_EBTR0$OFF 000000             __CFG_FCMEN$OFF 000000             __CFG_EBTR1$OFF 000000  
           __CFG_EBTR2$OFF 000000             __CFG_EBTR3$OFF 000000              __CFG_WRTB$OFF 000000  
            __CFG_WRTC$OFF 000000              __CFG_WRTD$OFF 000000            __end_of_initLCD 091A  
           __CFG_EBTRB$OFF 000000            __end_of_dpowers FE96            __end_of_isdigit 0A28  
                    _putch 0A3A                      main@i 003D                      pclath 000FFA  
                    tablat 000FF5                      status 000FD8             __CFG_PBADEN$ON 000000  
          __initialization 0992               __end_of_main 032A               __end_of_keys FE8C  
                   ??_main 0035              __activetblptr 000002          ?_I2C_Master_Start 0001  
        ?_I2C_Master_Write 0014         ??_I2C_Master_Start 0014                     _ADCON0 000FC2  
                   _ADCON1 000FC1         ??_I2C_Master_Write 0016                     ?_putch 0001  
                   _INT1IE 007F83                     _INT1IF 007F80                     i2l1641 0974  
                   i2l1643 0978                     i2l1649 098E                     i2l1841 06E0  
                   i2l1833 06AE                     i2l1843 06E2                     i2l1837 06BA  
                   _TMR0IE 007F95                     _TMR0IF 007F92                     _SSPADD 000FC8  
                   _TRISC3 007CA3                     _TRISC4 007CA4                     _SSPBUF 000FC9  
              isr@keypress 0012             __CFG_XINST$OFF 000000                     ___wmul 09BE  
           __CFG_STVREN$ON 000000                  ??___lldiv 001B                  ??___lwdiv 0017  
                ??___lwmod 001E                     clear_0 09AA                  ??_lcdInst 0015  
                   _printf 032A                  ??_initLCD 0016               __pdataCOMRAM 0047  
                ??_isdigit 0013               __mediumconst FE7A                     tblptrh 000FF7  
                   tblptrl 000FF6                     tblptru 000FF8            switchMenu@right 0001  
               __accesstop 0080    __end_of__initialization 09B0              ___rparam_used 000001  
           __pcstackCOMRAM 0001              __end_of_putch 0A46         __size_of_lcdNibble 004E  
                  ??_putch 0015                    ?___wmul 0013                    ?_printf 001F  
                  _SSPCON1 000FC6                    _SSPCON2 000FC5                    _SSPSTAT 000FC7  
        __end_of_lcdNibble 08D4                    __Hparam 0000                    __Lparam 0000  
                  ___lldiv 0758            __size_of___wmul 0026                    ___lwdiv 0834  
                  ___lwmod 091A                    __pcinit 0992                    __ramtop 1000  
                  _lcdInst 0A46                    __ptext0 0012                    __ptext1 032A  
                  __ptext2 0A3A                    __ptext3 0A0A                    __ptext4 09BE  
                  __ptext5 091A                    __ptext6 0834                    __ptext7 08D4  
                  __ptext8 0A46                    __ptext9 0886            __size_of_printf 030C  
                _T0CONbits 000FD5                    _initLCD 08D4          __end_of_hexpowers FE9E  
                  _counter 0045                    _dpowers FE8C                    _isdigit 0A0A  
             __size_of_isr 0750   __size_of_I2C_Master_Init 005A   __size_of_I2C_Master_Read 0026  
 __size_of_I2C_Master_Wait 0012   __size_of_I2C_Master_Stop 0008                    main@min 0036  
                  main@sec 0037             __pintcode_body 0636       end_of_initialization 09B0  
            __Lmediumconst FE7A                    int_func 0636                 _screenMode 0047  
__size_of_I2C_Master_Start 0008  __size_of_I2C_Master_Write 000A            ___lldiv@divisor 0017  
          ___lldiv@counter 001F                    printf@c 0034                    printf@f 001F  
         I2C_Master_Init@c 0020           I2C_Master_Read@a 0014                    postdec2 000FDD  
                  postinc0 000FEE                    postinc2 000FDE                printf@width 0032  
               _switchMenu 095C             __end_of___wmul 09E4              __pidataCOMRAM 0A6C  
           __end_of_printf 0636        start_initialization 0992                __end_of_isr 0758  
        ??_I2C_Master_Init 0024          ??_I2C_Master_Read 0014          ??_I2C_Master_Wait 0013  
        ??_I2C_Master_Stop 0014                   ??___wmul 0017           __CFG_LPT1OSC$OFF 000000  
           switchMenu@left 0003                   ??_printf 0027                __pbssCOMRAM 003E  
         _I2C_Master_Start 0A64           _I2C_Master_Write 0A52           ___lwdiv@dividend 0013  
        __CFG_CCP2MX$PORTC 000000                ?_switchMenu 0001                  __pintcode 0008  
            __pmediumconst FE7A                  _lcdNibble 0886                   ?___lldiv 0013  
                 ?___lwdiv 0013                   ?___lwmod 001A                   ?_lcdInst 0001  
                 ?_initLCD 0001                   ?_isdigit 0001                  _hexpowers FE96  
         ___lwdiv@quotient 0017             __size_of_putch 000C             ___wmul@product 0017  
                 _LATDbits 000F8C           __CFG_WDTPS$32768 000000                 ?_lcdNibble 0001  
                main@i_273 003C          ___wmul@multiplier 0013              lcdNibble@data 0014  
               printf@flag 0031              lcdNibble@temp 0013                 printf@prec 002E  
                main@numAA 003B                  main@num9V 003A        __size_of_switchMenu 0036  
      I2C_Master_Read@temp 0015                   __Hrparam 0000                   __Lrparam 0000  
       __CFG_BOREN$SBORDIS 000000              switchMenu@key 0002           __size_of___lldiv 0082  
         __size_of___lwdiv 0052           __size_of___lwmod 0042                _isdigit$540 0014  
         __size_of_lcdInst 000C            _I2C_Master_Init 07DA            _I2C_Master_Read 09E4  
         __size_of_initLCD 0046            _I2C_Master_Wait 0A28            _I2C_Master_Stop 0A5C  
         __size_of_isdigit 001E            ___lwdiv@divisor 0015            ___lwdiv@counter 0019  
                 __ptext10 0A52                   __ptext11 0A5C                   __ptext12 0A64  
                 __ptext13 09E4                   __ptext14 0A28                   __ptext15 07DA  
                 __ptext16 0758                   __ptext18 095C              __size_of_main 0318  
              ??_lcdNibble 0013                   int$flags 0048                  printf@idx 002B  
                printf@val 002F                   main@numC 0039                  putch@data 0015  
 __end_of_I2C_Master_Start 0A6C   __end_of_I2C_Master_Write 0A5C                 _INTCONbits 000FF2  
                 isdigit@c 0015                   intlevel2 0000           ___lwmod@dividend 001A  
         ___lldiv@dividend 0013               ??_switchMenu 0003                   printf@ap 002C  
  __end_of_I2C_Master_Init 0834    __end_of_I2C_Master_Read 0A0A    __end_of_I2C_Master_Wait 0A3A  
  __end_of_I2C_Master_Stop 0A64                lcdInst@data 0015           ___lldiv@quotient 001B  
        I2C_Master_Write@d 0014            ___lwmod@divisor 001C            ___lwmod@counter 001E  
       __end_of_switchMenu 0992  
