

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sat Feb 04 00:37:32 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    29                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    32                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    33                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    34  0000                     
    35                           ; Version 1.40
    36                           ; Generated 01/12/2016 GMT
    37                           ; 
    38                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    39                           ; All rights reserved.
    40                           ; 
    41                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    42                           ; 
    43                           ; Redistribution and use in source and binary forms, with or without modification, are
    44                           ; permitted provided that the following conditions are met:
    45                           ; 
    46                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    47                           ;        conditions and the following disclaimer.
    48                           ; 
    49                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    50                           ;        of conditions and the following disclaimer in the documentation and/or other
    51                           ;        materials provided with the distribution.
    52                           ; 
    53                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    54                           ;        software without specific prior written permission.
    55                           ; 
    56                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    57                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    58                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    59                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    60                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    61                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    62                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    63                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    64                           ; 
    65                           ; 
    66                           ; Code-generator required, PIC18F4620 Definitions
    67                           ; 
    68                           ; SFR Addresses
    69  0000                     
    70                           	psect	idataCOMRAM
    71  000A66                     __pidataCOMRAM:
    72                           	opt stack 0
    73                           
    74                           ;initializer for _screenMode
    75  000A66  02                 	db	2
    76                           
    77                           	psect	mediumconst
    78  00FE78                     __pmediumconst:
    79                           	opt stack 0
    80  00FE78  00                 	db	0
    81  00FE79                     _keys:
    82                           	opt stack 0
    83  00FE79  31                 	db	49
    84  00FE7A  32                 	db	50
    85  00FE7B  33                 	db	51
    86  00FE7C  41                 	db	65
    87  00FE7D  34                 	db	52
    88  00FE7E  35                 	db	53
    89  00FE7F  36                 	db	54
    90  00FE80  42                 	db	66
    91  00FE81  37                 	db	55
    92  00FE82  38                 	db	56
    93  00FE83  39                 	db	57
    94  00FE84  43                 	db	67
    95  00FE85  2A                 	db	42
    96  00FE86  30                 	db	48
    97  00FE87  23                 	db	35
    98  00FE88  44                 	db	68
    99  00FE89  00                 	db	0
   100  00FE8A                     __end_of_keys:
   101                           	opt stack 0
   102  00FE8A                     _dpowers:
   103                           	opt stack 0
   104  00FE8A  0001               	dw	1
   105  00FE8C  000A               	dw	10
   106  00FE8E  0064               	dw	100
   107  00FE90  03E8               	dw	1000
   108  00FE92  2710               	dw	10000
   109  00FE94                     __end_of_dpowers:
   110                           	opt stack 0
   111  00FE94                     _hexpowers:
   112                           	opt stack 0
   113  00FE94  0001               	dw	1
   114  00FE96  0010               	dw	16
   115  00FE98  0100               	dw	256
   116  00FE9A  1000               	dw	4096
   117  00FE9C                     __end_of_hexpowers:
   118                           	opt stack 0
   119  0000                     _ADCON0	set	4034
   120  0000                     _ADCON1	set	4033
   121  0000                     _INTCONbits	set	4082
   122  0000                     _LATB	set	3978
   123  0000                     _LATC	set	3979
   124  0000                     _LATD	set	3980
   125  0000                     _LATDbits	set	3980
   126  0000                     _PORTB	set	3969
   127  0000                     _SSPADD	set	4040
   128  0000                     _SSPBUF	set	4041
   129  0000                     _SSPCON1	set	4038
   130  0000                     _SSPCON2	set	4037
   131  0000                     _SSPSTAT	set	4039
   132  0000                     _TRISB	set	3987
   133  0000                     _TRISC	set	3988
   134  0000                     _TRISD	set	3989
   135  0000                     _ACKDT	set	32301
   136  0000                     _ACKEN	set	32300
   137  0000                     _INT1IE	set	32643
   138  0000                     _INT1IF	set	32640
   139  0000                     _PEN	set	32298
   140  0000                     _RCEN	set	32299
   141  0000                     _RSEN	set	32297
   142  0000                     _SEN	set	32296
   143  0000                     _TRISC3	set	31907
   144  0000                     _TRISC4	set	31908
   145  00FE9C                     STR_9:
   146  00FE9C  25                 	db	37
   147  00FE9D  30                 	db	48	;'0'
   148  00FE9E  32                 	db	50	;'2'
   149  00FE9F  78                 	db	120	;'x'
   150  00FEA0  3A                 	db	58	;':'
   151  00FEA1  25                 	db	37
   152  00FEA2  30                 	db	48	;'0'
   153  00FEA3  32                 	db	50	;'2'
   154  00FEA4  78                 	db	120	;'x'
   155  00FEA5  20                 	db	32
   156  00FEA6  20                 	db	32
   157  00FEA7  20                 	db	32
   158  00FEA8  20                 	db	32
   159  00FEA9  20                 	db	32
   160  00FEAA  20                 	db	32
   161  00FEAB  20                 	db	32
   162  00FEAC  20                 	db	32
   163  00FEAD  20                 	db	32
   164  00FEAE  20                 	db	32
   165  00FEAF  20                 	db	32
   166  00FEB0  20                 	db	32
   167  00FEB1  20                 	db	32
   168  00FEB2  20                 	db	32
   169  00FEB3  20                 	db	32
   170  00FEB4  00                 	db	0
   171  00FEB5                     STR_18:
   172  00FEB5  44                 	db	68	;'D'
   173  00FEB6  41                 	db	65	;'A'
   174  00FEB7  54                 	db	84	;'T'
   175  00FEB8  45                 	db	69	;'E'
   176  00FEB9  3A                 	db	58	;':'
   177  00FEBA  20                 	db	32
   178  00FEBB  25                 	db	37
   179  00FEBC  30                 	db	48	;'0'
   180  00FEBD  32                 	db	50	;'2'
   181  00FEBE  78                 	db	120	;'x'
   182  00FEBF  2F                 	db	47
   183  00FEC0  25                 	db	37
   184  00FEC1  30                 	db	48	;'0'
   185  00FEC2  32                 	db	50	;'2'
   186  00FEC3  78                 	db	120	;'x'
   187  00FEC4  2F                 	db	47
   188  00FEC5  25                 	db	37
   189  00FEC6  30                 	db	48	;'0'
   190  00FEC7  32                 	db	50	;'2'
   191  00FEC8  78                 	db	120	;'x'
   192  00FEC9  20                 	db	32
   193  00FECA  20                 	db	32
   194  00FECB  00                 	db	0
   195  00FECC                     STR_19:
   196  00FECC  54                 	db	84	;'T'
   197  00FECD  49                 	db	73	;'I'
   198  00FECE  4D                 	db	77	;'M'
   199  00FECF  45                 	db	69	;'E'
   200  00FED0  3A                 	db	58	;':'
   201  00FED1  20                 	db	32
   202  00FED2  25                 	db	37
   203  00FED3  30                 	db	48	;'0'
   204  00FED4  32                 	db	50	;'2'
   205  00FED5  78                 	db	120	;'x'
   206  00FED6  3A                 	db	58	;':'
   207  00FED7  25                 	db	37
   208  00FED8  30                 	db	48	;'0'
   209  00FED9  32                 	db	50	;'2'
   210  00FEDA  78                 	db	120	;'x'
   211  00FEDB  3A                 	db	58	;':'
   212  00FEDC  25                 	db	37
   213  00FEDD  30                 	db	48	;'0'
   214  00FEDE  32                 	db	50	;'2'
   215  00FEDF  78                 	db	120	;'x'
   216  00FEE0  20                 	db	32
   217  00FEE1  20                 	db	32
   218  00FEE2  00                 	db	0
   219  00FEE3                     STR_15:
   220  00FEE3  42                 	db	66	;'B'
   221  00FEE4  41                 	db	65	;'A'
   222  00FEE5  54                 	db	84	;'T'
   223  00FEE6  54                 	db	84	;'T'
   224  00FEE7  45                 	db	69	;'E'
   225  00FEE8  52                 	db	82	;'R'
   226  00FEE9  49                 	db	73	;'I'
   227  00FEEA  45                 	db	69	;'E'
   228  00FEEB  53                 	db	83	;'S'
   229  00FEEC  3A                 	db	58	;':'
   230  00FEED  20                 	db	32
   231  00FEEE  25                 	db	37
   232  00FEEF  30                 	db	48	;'0'
   233  00FEF0  32                 	db	50	;'2'
   234  00FEF1  64                 	db	100	;'d'
   235  00FEF2  20                 	db	32
   236  00FEF3  20                 	db	32
   237  00FEF4  20                 	db	32
   238  00FEF5  20                 	db	32
   239  00FEF6  20                 	db	32
   240  00FEF7  00                 	db	0
   241  00FEF8                     STR_17:
   242  00FEF8  42                 	db	66	;'B'
   243  00FEF9  41                 	db	65	;'A'
   244  00FEFA  54                 	db	84	;'T'
   245  00FEFB  54                 	db	84	;'T'
   246  00FEFC  45                 	db	69	;'E'
   247  00FEFD  52                 	db	82	;'R'
   248  00FEFE  49                 	db	73	;'I'
   249  00FEFF  45                 	db	69	;'E'
   250  00FF00  53                 	db	83	;'S'
   251  00FF01  3A                 	db	58	;':'
   252  00FF02  20                 	db	32
   253  00FF03  25                 	db	37
   254  00FF04  30                 	db	48	;'0'
   255  00FF05  32                 	db	50	;'2'
   256  00FF06  78                 	db	120	;'x'
   257  00FF07  20                 	db	32
   258  00FF08  20                 	db	32
   259  00FF09  20                 	db	32
   260  00FF0A  20                 	db	32
   261  00FF0B  20                 	db	32
   262  00FF0C  00                 	db	0
   263  00FF0D                     STR_5:
   264  00FF0D  25                 	db	37
   265  00FF0E  30                 	db	48	;'0'
   266  00FF0F  32                 	db	50	;'2'
   267  00FF10  64                 	db	100	;'d'
   268  00FF11  20                 	db	32
   269  00FF12  20                 	db	32
   270  00FF13  20                 	db	32
   271  00FF14  20                 	db	32
   272  00FF15  20                 	db	32
   273  00FF16  20                 	db	32
   274  00FF17  20                 	db	32
   275  00FF18  20                 	db	32
   276  00FF19  20                 	db	32
   277  00FF1A  20                 	db	32
   278  00FF1B  20                 	db	32
   279  00FF1C  20                 	db	32
   280  00FF1D  20                 	db	32
   281  00FF1E  20                 	db	32
   282  00FF1F  00                 	db	0
   283  00FF20                     STR_11:
   284  00FF20  42                 	db	66	;'B'
   285  00FF21  41                 	db	65	;'A'
   286  00FF22  54                 	db	84	;'T'
   287  00FF23  54                 	db	84	;'T'
   288  00FF24  45                 	db	69	;'E'
   289  00FF25  52                 	db	82	;'R'
   290  00FF26  49                 	db	73	;'I'
   291  00FF27  45                 	db	69	;'E'
   292  00FF28  53                 	db	83	;'S'
   293  00FF29  3A                 	db	58	;':'
   294  00FF2A  20                 	db	32
   295  00FF2B  25                 	db	37
   296  00FF2C  30                 	db	48	;'0'
   297  00FF2D  32                 	db	50	;'2'
   298  00FF2E  64                 	db	100	;'d'
   299  00FF2F  20                 	db	32
   300  00FF30  20                 	db	32
   301  00FF31  20                 	db	32
   302  00FF32  00                 	db	0
   303  00FF33                     STR_20:
   304  00FF33  30                 	db	48	;'0'
   305  00FF34  31                 	db	49	;'1'
   306  00FF35  32                 	db	50	;'2'
   307  00FF36  33                 	db	51	;'3'
   308  00FF37  34                 	db	52	;'4'
   309  00FF38  35                 	db	53	;'5'
   310  00FF39  36                 	db	54	;'6'
   311  00FF3A  37                 	db	55	;'7'
   312  00FF3B  38                 	db	56	;'8'
   313  00FF3C  39                 	db	57	;'9'
   314  00FF3D  61                 	db	97	;'a'
   315  00FF3E  62                 	db	98	;'b'
   316  00FF3F  63                 	db	99	;'c'
   317  00FF40  64                 	db	100	;'d'
   318  00FF41  65                 	db	101	;'e'
   319  00FF42  66                 	db	102	;'f'
   320  00FF43  00                 	db	0
   321  00FF44                     STR_4:
   322  00FF44  52                 	db	82	;'R'
   323  00FF45  55                 	db	85	;'U'
   324  00FF46  4E                 	db	78	;'N'
   325  00FF47  4E                 	db	78	;'N'
   326  00FF48  49                 	db	73	;'I'
   327  00FF49  4E                 	db	78	;'N'
   328  00FF4A  47                 	db	71	;'G'
   329  00FF4B  2E                 	db	46
   330  00FF4C  2E                 	db	46
   331  00FF4D  2E                 	db	46
   332  00FF4E  20                 	db	32
   333  00FF4F  20                 	db	32
   334  00FF50  20                 	db	32
   335  00FF51  20                 	db	32
   336  00FF52  20                 	db	32
   337  00FF53  20                 	db	32
   338  00FF54  00                 	db	0
   339  00FF55                     STR_12:
   340  00FF55  4E                 	db	78	;'N'
   341  00FF56  55                 	db	85	;'U'
   342  00FF57  4D                 	db	77	;'M'
   343  00FF58  42                 	db	66	;'B'
   344  00FF59  45                 	db	69	;'E'
   345  00FF5A  52                 	db	82	;'R'
   346  00FF5B  20                 	db	32
   347  00FF5C  4F                 	db	79	;'O'
   348  00FF5D  46                 	db	70	;'F'
   349  00FF5E  20                 	db	32
   350  00FF5F  43                 	db	67	;'C'
   351  00FF60  20                 	db	32
   352  00FF61  20                 	db	32
   353  00FF62  20                 	db	32
   354  00FF63  20                 	db	32
   355  00FF64  20                 	db	32
   356  00FF65  00                 	db	0
   357  00FF66                     STR_7:
   358  00FF66  54                 	db	84	;'T'
   359  00FF67  4F                 	db	79	;'O'
   360  00FF68  20                 	db	32
   361  00FF69  43                 	db	67	;'C'
   362  00FF6A  4F                 	db	79	;'O'
   363  00FF6B  4E                 	db	78	;'N'
   364  00FF6C  54                 	db	84	;'T'
   365  00FF6D  49                 	db	73	;'I'
   366  00FF6E  4E                 	db	78	;'N'
   367  00FF6F  55                 	db	85	;'U'
   368  00FF70  45                 	db	69	;'E'
   369  00FF71  20                 	db	32
   370  00FF72  20                 	db	32
   371  00FF73  20                 	db	32
   372  00FF74  20                 	db	32
   373  00FF75  20                 	db	32
   374  00FF76  00                 	db	0
   375  00FF77                     STR_16:
   376  00FF77  4E                 	db	78	;'N'
   377  00FF78  55                 	db	85	;'U'
   378  00FF79  4D                 	db	77	;'M'
   379  00FF7A  42                 	db	66	;'B'
   380  00FF7B  45                 	db	69	;'E'
   381  00FF7C  52                 	db	82	;'R'
   382  00FF7D  20                 	db	32
   383  00FF7E  4F                 	db	79	;'O'
   384  00FF7F  46                 	db	70	;'F'
   385  00FF80  20                 	db	32
   386  00FF81  41                 	db	65	;'A'
   387  00FF82  41                 	db	65	;'A'
   388  00FF83  20                 	db	32
   389  00FF84  20                 	db	32
   390  00FF85  20                 	db	32
   391  00FF86  20                 	db	32
   392  00FF87  00                 	db	0
   393  00FF88                     STR_14:
   394  00FF88  4E                 	db	78	;'N'
   395  00FF89  55                 	db	85	;'U'
   396  00FF8A  4D                 	db	77	;'M'
   397  00FF8B  42                 	db	66	;'B'
   398  00FF8C  45                 	db	69	;'E'
   399  00FF8D  52                 	db	82	;'R'
   400  00FF8E  20                 	db	32
   401  00FF8F  4F                 	db	79	;'O'
   402  00FF90  46                 	db	70	;'F'
   403  00FF91  20                 	db	32
   404  00FF92  39                 	db	57	;'9'
   405  00FF93  56                 	db	86	;'V'
   406  00FF94  20                 	db	32
   407  00FF95  20                 	db	32
   408  00FF96  20                 	db	32
   409  00FF97  20                 	db	32
   410  00FF98  00                 	db	0
   411  00FF99                     STR_6:
   412  00FF99  44                 	db	68	;'D'
   413  00FF9A  4F                 	db	79	;'O'
   414  00FF9B  4E                 	db	78	;'N'
   415  00FF9C  45                 	db	69	;'E'
   416  00FF9D  21                 	db	33
   417  00FF9E  20                 	db	32
   418  00FF9F  50                 	db	80	;'P'
   419  00FFA0  52                 	db	82	;'R'
   420  00FFA1  45                 	db	69	;'E'
   421  00FFA2  53                 	db	83	;'S'
   422  00FFA3  53                 	db	83	;'S'
   423  00FFA4  20                 	db	32
   424  00FFA5  2A                 	db	42
   425  00FFA6  20                 	db	32
   426  00FFA7  20                 	db	32
   427  00FFA8  20                 	db	32
   428  00FFA9  00                 	db	0
   429  00FFAA                     STR_8:
   430  00FFAA  54                 	db	84	;'T'
   431  00FFAB  4F                 	db	79	;'O'
   432  00FFAC  54                 	db	84	;'T'
   433  00FFAD  41                 	db	65	;'A'
   434  00FFAE  4C                 	db	76	;'L'
   435  00FFAF  20                 	db	32
   436  00FFB0  52                 	db	82	;'R'
   437  00FFB1  55                 	db	85	;'U'
   438  00FFB2  4E                 	db	78	;'N'
   439  00FFB3  20                 	db	32
   440  00FFB4  54                 	db	84	;'T'
   441  00FFB5  49                 	db	73	;'I'
   442  00FFB6  4D                 	db	77	;'M'
   443  00FFB7  45                 	db	69	;'E'
   444  00FFB8  3A                 	db	58	;':'
   445  00FFB9  20                 	db	32
   446  00FFBA  00                 	db	0
   447  00FFBB                     STR_3:
   448  00FFBB  20                 	db	32
   449  00FFBC  3C                 	db	60	;'<'
   450  00FFBD  34                 	db	52	;'4'
   451  00FFBE  20                 	db	32
   452  00FFBF  20                 	db	32
   453  00FFC0  20                 	db	32
   454  00FFC1  44                 	db	68	;'D'
   455  00FFC2  41                 	db	65	;'A'
   456  00FFC3  54                 	db	84	;'T'
   457  00FFC4  41                 	db	65	;'A'
   458  00FFC5  20                 	db	32
   459  00FFC6  20                 	db	32
   460  00FFC7  20                 	db	32
   461  00FFC8  36                 	db	54	;'6'
   462  00FFC9  3E                 	db	62	;'>'
   463  00FFCA  20                 	db	32
   464  00FFCB  00                 	db	0
   465  00FFCC                     STR_10:
   466  00FFCC  54                 	db	84	;'T'
   467  00FFCD  4F                 	db	79	;'O'
   468  00FFCE  54                 	db	84	;'T'
   469  00FFCF  41                 	db	65	;'A'
   470  00FFD0  4C                 	db	76	;'L'
   471  00FFD1  20                 	db	32
   472  00FFD2  4E                 	db	78	;'N'
   473  00FFD3  55                 	db	85	;'U'
   474  00FFD4  4D                 	db	77	;'M'
   475  00FFD5  42                 	db	66	;'B'
   476  00FFD6  45                 	db	69	;'E'
   477  00FFD7  52                 	db	82	;'R'
   478  00FFD8  20                 	db	32
   479  00FFD9  4F                 	db	79	;'O'
   480  00FFDA  46                 	db	70	;'F'
   481  00FFDB  20                 	db	32
   482  00FFDC  00                 	db	0
   483  00FFDD                     STR_1:
   484  00FFDD  53                 	db	83	;'S'
   485  00FFDE  54                 	db	84	;'T'
   486  00FFDF  41                 	db	65	;'A'
   487  00FFE0  52                 	db	82	;'R'
   488  00FFE1  54                 	db	84	;'T'
   489  00FFE2  3A                 	db	58	;':'
   490  00FFE3  20                 	db	32
   491  00FFE4  20                 	db	32
   492  00FFE5  20                 	db	32
   493  00FFE6  50                 	db	80	;'P'
   494  00FFE7  52                 	db	82	;'R'
   495  00FFE8  45                 	db	69	;'E'
   496  00FFE9  53                 	db	83	;'S'
   497  00FFEA  53                 	db	83	;'S'
   498  00FFEB  20                 	db	32
   499  00FFEC  2A                 	db	42
   500  00FFED  00                 	db	0
   501  00FFEE                     STR_2:
   502  00FFEE  3C                 	db	60	;'<'
   503  00FFEF  20                 	db	32
   504  00FFF0  34                 	db	52	;'4'
   505  00FFF1  20                 	db	32
   506  00FFF2  20                 	db	32
   507  00FFF3  20                 	db	32
   508  00FFF4  44                 	db	68	;'D'
   509  00FFF5  41                 	db	65	;'A'
   510  00FFF6  54                 	db	84	;'T'
   511  00FFF7  41                 	db	65	;'A'
   512  00FFF8  20                 	db	32
   513  00FFF9  20                 	db	32
   514  00FFFA  20                 	db	32
   515  00FFFB  36                 	db	54	;'6'
   516  00FFFC  20                 	db	32
   517  00FFFD  3E                 	db	62	;'>'
   518  00FFFE  00                 	db	0
   519  0000                     
   520                           ; #config settings
   521  00FFFF  00                 	db	0	; dummy byte at the end
   522  0000                     
   523                           	psect	cinit
   524  00098C                     __pcinit:
   525                           	opt stack 0
   526  00098C                     start_initialization:
   527                           	opt stack 0
   528  00098C                     __initialization:
   529                           	opt stack 0
   530                           
   531                           ; Initialize objects allocated to COMRAM (1 bytes)
   532                           ; load TBLPTR registers with __pidataCOMRAM
   533  00098C  0E66               	movlw	low __pidataCOMRAM
   534  00098E  6EF6               	movwf	tblptrl,c
   535  000990  0E0A               	movlw	high __pidataCOMRAM
   536  000992  6EF7               	movwf	tblptrh,c
   537  000994  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   538  000996  6EF8               	movwf	tblptru,c
   539  000998  0009               	tblrd		*+	;fetch initializer
   540  00099A  CFF5 F047          	movff	tablat,__pdataCOMRAM
   541                           
   542                           ; Clear objects allocated to COMRAM (7 bytes)
   543  00099E  EE00  F040         	lfsr	0,__pbssCOMRAM
   544  0009A2  0E07               	movlw	7
   545  0009A4                     clear_0:
   546  0009A4  6AEE               	clrf	postinc0,c
   547  0009A6  06E8               	decf	wreg,f,c
   548  0009A8  E1FD               	bnz	clear_0
   549  0009AA                     end_of_initialization:
   550                           	opt stack 0
   551  0009AA                     __end_of__initialization:
   552                           	opt stack 0
   553  0009AA  9048               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   554  0009AC  9248               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   555  0009AE  0E00               	movlw	low (__Lmediumconst shr (0+16))
   556  0009B0  6EF8               	movwf	tblptru,c
   557  0009B2  0100               	movlb	0
   558  0009B4  EF09  F000         	goto	_main	;jump to C main() function
   559                           tblptru	equ	0xFF8
   560                           tblptrh	equ	0xFF7
   561                           tblptrl	equ	0xFF6
   562                           tablat	equ	0xFF5
   563                           postinc0	equ	0xFEE
   564                           wreg	equ	0xFE8
   565                           
   566                           	psect	bssCOMRAM
   567  000040                     __pbssCOMRAM:
   568                           	opt stack 0
   569  000040                     _time:
   570                           	opt stack 0
   571  000040                     	ds	7
   572                           tblptru	equ	0xFF8
   573                           tblptrh	equ	0xFF7
   574                           tblptrl	equ	0xFF6
   575                           tablat	equ	0xFF5
   576                           postinc0	equ	0xFEE
   577                           wreg	equ	0xFE8
   578                           
   579                           	psect	dataCOMRAM
   580  000047                     __pdataCOMRAM:
   581                           	opt stack 0
   582  000047                     _screenMode:
   583                           	opt stack 0
   584  000047                     	ds	1
   585                           tblptru	equ	0xFF8
   586                           tblptrh	equ	0xFF7
   587                           tblptrl	equ	0xFF6
   588                           tablat	equ	0xFF5
   589                           postinc0	equ	0xFEE
   590                           wreg	equ	0xFE8
   591                           
   592                           	psect	cstackCOMRAM
   593  000001                     __pcstackCOMRAM:
   594                           	opt stack 0
   595  000001                     switchMenu@right:
   596                           	opt stack 0
   597                           
   598                           ; 1 bytes @ 0x0
   599  000001                     	ds	1
   600  000002                     switchMenu@key:
   601                           	opt stack 0
   602                           
   603                           ; 1 bytes @ 0x1
   604  000002                     	ds	1
   605  000003                     switchMenu@left:
   606                           	opt stack 0
   607                           
   608                           ; 1 bytes @ 0x2
   609  000003                     	ds	1
   610  000004                     ??_menuChange:
   611                           
   612                           ; 1 bytes @ 0x3
   613  000004                     	ds	14
   614  000012                     menuChange@keypress:
   615                           	opt stack 0
   616                           
   617                           ; 1 bytes @ 0x11
   618  000012                     	ds	1
   619  000013                     ??_isdigit:
   620  000013                     ??_I2C_Master_Wait:
   621  000013                     ?___wmul:
   622                           	opt stack 0
   623  000013                     ?___lwdiv:
   624                           	opt stack 0
   625  000013                     ?___lldiv:
   626                           	opt stack 0
   627  000013                     lcdNibble@temp:
   628                           	opt stack 0
   629  000013                     ___wmul@multiplier:
   630                           	opt stack 0
   631  000013                     ___lwdiv@dividend:
   632                           	opt stack 0
   633  000013                     ___lldiv@dividend:
   634                           	opt stack 0
   635                           
   636                           ; 4 bytes @ 0x12
   637  000013                     	ds	1
   638  000014                     I2C_Master_Read@a:
   639                           	opt stack 0
   640  000014                     lcdNibble@data:
   641                           	opt stack 0
   642  000014                     _isdigit$500:
   643                           	opt stack 0
   644  000014                     I2C_Master_Write@d:
   645                           	opt stack 0
   646                           
   647                           ; 2 bytes @ 0x13
   648  000014                     	ds	1
   649  000015                     I2C_Master_Read@temp:
   650                           	opt stack 0
   651  000015                     lcdInst@data:
   652                           	opt stack 0
   653  000015                     putch@data:
   654                           	opt stack 0
   655  000015                     isdigit@c:
   656                           	opt stack 0
   657  000015                     ___wmul@multiplicand:
   658                           	opt stack 0
   659  000015                     ___lwdiv@divisor:
   660                           	opt stack 0
   661                           
   662                           ; 2 bytes @ 0x14
   663  000015                     	ds	1
   664  000016                     ??_initLCD:
   665                           
   666                           ; 1 bytes @ 0x15
   667  000016                     	ds	1
   668  000017                     ___wmul@product:
   669                           	opt stack 0
   670  000017                     ___lwdiv@quotient:
   671                           	opt stack 0
   672  000017                     ___lldiv@divisor:
   673                           	opt stack 0
   674                           
   675                           ; 4 bytes @ 0x16
   676  000017                     	ds	2
   677  000019                     ___lwdiv@counter:
   678                           	opt stack 0
   679                           
   680                           ; 1 bytes @ 0x18
   681  000019                     	ds	1
   682  00001A                     ?___lwmod:
   683                           	opt stack 0
   684  00001A                     ___lwmod@dividend:
   685                           	opt stack 0
   686                           
   687                           ; 2 bytes @ 0x19
   688  00001A                     	ds	1
   689  00001B                     ___lldiv@quotient:
   690                           	opt stack 0
   691                           
   692                           ; 4 bytes @ 0x1A
   693  00001B                     	ds	1
   694  00001C                     ___lwmod@divisor:
   695                           	opt stack 0
   696                           
   697                           ; 2 bytes @ 0x1B
   698  00001C                     	ds	2
   699  00001E                     ___lwmod@counter:
   700                           	opt stack 0
   701                           
   702                           ; 1 bytes @ 0x1D
   703  00001E                     	ds	1
   704  00001F                     ?_printf:
   705                           	opt stack 0
   706  00001F                     ___lldiv@counter:
   707                           	opt stack 0
   708  00001F                     printf@f:
   709                           	opt stack 0
   710                           
   711                           ; 2 bytes @ 0x1E
   712  00001F                     	ds	1
   713  000020                     I2C_Master_Init@c:
   714                           	opt stack 0
   715                           
   716                           ; 4 bytes @ 0x1F
   717  000020                     	ds	4
   718  000024                     ??_I2C_Master_Init:
   719                           
   720                           ; 1 bytes @ 0x23
   721  000024                     	ds	3
   722  000027                     ??_printf:
   723                           
   724                           ; 1 bytes @ 0x26
   725  000027                     	ds	4
   726  00002B                     printf@idx:
   727                           	opt stack 0
   728                           
   729                           ; 1 bytes @ 0x2A
   730  00002B                     	ds	1
   731  00002C                     printf@ap:
   732                           	opt stack 0
   733                           
   734                           ; 2 bytes @ 0x2B
   735  00002C                     	ds	2
   736  00002E                     printf@prec:
   737                           	opt stack 0
   738                           
   739                           ; 1 bytes @ 0x2D
   740  00002E                     	ds	1
   741  00002F                     printf@val:
   742                           	opt stack 0
   743                           
   744                           ; 2 bytes @ 0x2E
   745  00002F                     	ds	2
   746  000031                     printf@flag:
   747                           	opt stack 0
   748                           
   749                           ; 1 bytes @ 0x30
   750  000031                     	ds	1
   751  000032                     printf@width:
   752                           	opt stack 0
   753                           
   754                           ; 2 bytes @ 0x31
   755  000032                     	ds	2
   756  000034                     printf@c:
   757                           	opt stack 0
   758                           
   759                           ; 1 bytes @ 0x33
   760  000034                     	ds	1
   761  000035                     ??_main:
   762                           
   763                           ; 1 bytes @ 0x34
   764  000035                     	ds	1
   765  000036                     main@min:
   766                           	opt stack 0
   767                           
   768                           ; 1 bytes @ 0x35
   769  000036                     	ds	1
   770  000037                     main@sec:
   771                           	opt stack 0
   772                           
   773                           ; 1 bytes @ 0x36
   774  000037                     	ds	1
   775  000038                     main@numBats:
   776                           	opt stack 0
   777                           
   778                           ; 1 bytes @ 0x37
   779  000038                     	ds	1
   780  000039                     main@numC:
   781                           	opt stack 0
   782                           
   783                           ; 1 bytes @ 0x38
   784  000039                     	ds	1
   785  00003A                     main@num9V:
   786                           	opt stack 0
   787                           
   788                           ; 1 bytes @ 0x39
   789  00003A                     	ds	1
   790  00003B                     main@numAA:
   791                           	opt stack 0
   792                           
   793                           ; 1 bytes @ 0x3A
   794  00003B                     	ds	1
   795  00003C                     main@i_217:
   796                           	opt stack 0
   797                           
   798                           ; 1 bytes @ 0x3B
   799  00003C                     	ds	1
   800  00003D                     main@i_215:
   801                           	opt stack 0
   802                           
   803                           ; 1 bytes @ 0x3C
   804  00003D                     	ds	1
   805  00003E                     main@i_239:
   806                           	opt stack 0
   807                           
   808                           ; 1 bytes @ 0x3D
   809  00003E                     	ds	1
   810  00003F                     main@i:
   811                           	opt stack 0
   812                           
   813                           ; 1 bytes @ 0x3E
   814  00003F                     	ds	1
   815                           tblptru	equ	0xFF8
   816                           tblptrh	equ	0xFF7
   817                           tblptrl	equ	0xFF6
   818                           tablat	equ	0xFF5
   819                           postinc0	equ	0xFEE
   820                           wreg	equ	0xFE8
   821                           
   822 ;;
   823 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   824 ;;
   825 ;; *************** function _main *****************
   826 ;; Defined at:
   827 ;;		line 15 in file "../main.c"
   828 ;; Parameters:    Size  Location     Type
   829 ;;		None
   830 ;; Auto vars:     Size  Location     Type
   831 ;;  i               1   59[COMRAM] unsigned char 
   832 ;;  i               1   61[COMRAM] unsigned char 
   833 ;;  numAA           1   58[COMRAM] unsigned char 
   834 ;;  num9V           1   57[COMRAM] unsigned char 
   835 ;;  numC            1   56[COMRAM] unsigned char 
   836 ;;  numBats         1   55[COMRAM] unsigned char 
   837 ;;  sec             1   54[COMRAM] unsigned char 
   838 ;;  min             1   53[COMRAM] unsigned char 
   839 ;;  i               1   60[COMRAM] unsigned char 
   840 ;;  i               1   62[COMRAM] unsigned char 
   841 ;; Return value:  Size  Location     Type
   842 ;;                  1    wreg      void 
   843 ;; Registers used:
   844 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   845 ;; Tracked objects:
   846 ;;		On entry : 0/0
   847 ;;		On exit  : 0/0
   848 ;;		Unchanged: 0/0
   849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   851 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   852 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   853 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   854 ;;Total ram usage:       11 bytes
   855 ;; Hardware stack levels required when called:    5
   856 ;; This function calls:
   857 ;;		_I2C_Master_Init
   858 ;;		_I2C_Master_Read
   859 ;;		_I2C_Master_Start
   860 ;;		_I2C_Master_Stop
   861 ;;		_I2C_Master_Write
   862 ;;		_initLCD
   863 ;;		_lcdInst
   864 ;;		_printf
   865 ;; This function is called by:
   866 ;;		Startup code after reset
   867 ;; This function uses a non-reentrant model
   868 ;;
   869                           
   870                           	psect	text0
   871  000012                     __ptext0:
   872                           	opt stack 0
   873  000012                     _main:
   874                           	opt stack 26
   875                           
   876                           ;main.c: 16: TRISC = 0x00;
   877                           
   878                           ;incstack = 0
   879  000012  0E00               	movlw	0
   880  000014  6E94               	movwf	3988,c	;volatile
   881                           
   882                           ;main.c: 17: TRISD = 0x00;
   883  000016  0E00               	movlw	0
   884  000018  6E95               	movwf	3989,c	;volatile
   885                           
   886                           ;main.c: 18: TRISB = 0xFF;
   887  00001A  6893               	setf	3987,c	;volatile
   888                           
   889                           ;main.c: 19: LATB = 0x00;
   890  00001C  0E00               	movlw	0
   891  00001E  6E8A               	movwf	3978,c	;volatile
   892                           
   893                           ;main.c: 20: LATC = 0x00;
   894  000020  0E00               	movlw	0
   895  000022  6E8B               	movwf	3979,c	;volatile
   896                           
   897                           ;main.c: 21: ADCON0 = 0x00;
   898  000024  0E00               	movlw	0
   899  000026  6EC2               	movwf	4034,c	;volatile
   900                           
   901                           ;main.c: 22: ADCON1 = 0xFF;
   902  000028  68C1               	setf	4033,c	;volatile
   903                           
   904                           ;main.c: 23: INT1IE = 1;
   905  00002A  86F0               	bsf	intcon3,3,c	;volatile
   906                           
   907                           ;main.c: 24: initLCD();
   908  00002C  EC67  F004         	call	_initLCD	;wreg free
   909                           
   910                           ;main.c: 26: I2C_Master_Init(10000);
   911  000030  0E10               	movlw	16
   912  000032  6E20               	movwf	I2C_Master_Init@c,c
   913  000034  0E27               	movlw	39
   914  000036  6E21               	movwf	I2C_Master_Init@c+1,c
   915  000038  0E00               	movlw	0
   916  00003A  6E22               	movwf	I2C_Master_Init@c+2,c
   917  00003C  0E00               	movlw	0
   918  00003E  6E23               	movwf	I2C_Master_Init@c+3,c
   919  000040  ECEA  F003         	call	_I2C_Master_Init	;wreg free
   920                           
   921                           ;main.c: 27: (INTCONbits.GIE = 1);
   922  000044  8EF2               	bsf	intcon,7,c	;volatile
   923                           
   924                           ;main.c: 30: while (screenMode == 2){
   925                           
   926                           ;main.c: 29: while (1) {
   927  000046  D048               	goto	l1689
   928  000048                     l131:
   929                           
   930                           ;main.c: 31: (INTCONbits.GIE = 0);
   931  000048  9EF2               	bcf	intcon,7,c	;volatile
   932                           
   933                           ;main.c: 32: lcdInst(0b10000000);;
   934  00004A  0E80               	movlw	128
   935  00004C  EC20  F005         	call	_lcdInst
   936                           
   937                           ;main.c: 33: printf("START:   PRESS *");
   938  000050  0EDD               	movlw	low STR_1
   939  000052  6E1F               	movwf	printf@f,c
   940  000054  0EFF               	movlw	high STR_1
   941  000056  6E20               	movwf	printf@f+1,c
   942  000058  ECB5  F001         	call	_printf	;wreg free
   943                           
   944                           ;main.c: 34: lcdInst(0b11000000);;
   945  00005C  0EC0               	movlw	192
   946  00005E  EC20  F005         	call	_lcdInst
   947                           
   948                           ;main.c: 35: printf("< 4   DATA   6 >");
   949  000062  0EEE               	movlw	low STR_2
   950  000064  6E1F               	movwf	printf@f,c
   951  000066  0EFF               	movlw	high STR_2
   952  000068  6E20               	movwf	printf@f+1,c
   953  00006A  ECB5  F001         	call	_printf	;wreg free
   954                           
   955                           ;main.c: 36: (INTCONbits.GIE = 1);
   956  00006E  8EF2               	bsf	intcon,7,c	;volatile
   957                           
   958                           ;main.c: 37: unsigned char i;
   959                           ;main.c: 38: for(i=0;i<50;i++){
   960  000070  0E00               	movlw	0
   961  000072  6E3F               	movwf	main@i,c
   962  000074                     l1659:
   963  000074  0E31               	movlw	49
   964  000076  643F               	cpfsgt	main@i,c
   965  000078  D001               	goto	l1663
   966  00007A  D00E               	goto	l1671
   967  00007C                     l1663:
   968                           
   969                           ;main.c: 39: if (screenMode != 2)
   970  00007C  0E02               	movlw	2
   971  00007E  1847               	xorwf	_screenMode,w,c
   972  000080  A4D8               	btfss	status,2,c
   973  000082  D00A               	goto	l1671
   974                           
   975                           ;main.c: 41: _delay((unsigned long)((10)*(10000000/4000.0)));
   976                           
   977                           ;main.c: 40: break;
   978  000084  0E21               	movlw	33
   979  000086  6E35               	movwf	??_main& (0+255),c
   980  000088  0E76               	movlw	118
   981  00008A                     u1367:
   982  00008A  2EE8               	decfsz	wreg,f,c
   983  00008C  D7FE               	bra	u1367
   984  00008E  2E35               	decfsz	??_main& (0+255),f,c
   985  000090  D7FC               	bra	u1367
   986  000092  D000               	nop2	
   987  000094  2A3F               	incf	main@i,f,c
   988  000096  D7EE               	goto	l1659
   989  000098                     l1671:
   990                           
   991                           ;main.c: 42: }
   992                           ;main.c: 43: lcdInst(0b10000000);;
   993  000098  0E80               	movlw	128
   994  00009A  EC20  F005         	call	_lcdInst
   995                           
   996                           ;main.c: 44: lcdInst(0b11000000);;
   997  00009E  0EC0               	movlw	192
   998  0000A0  EC20  F005         	call	_lcdInst
   999                           
  1000                           ;main.c: 45: printf(" <4   DATA   6> ");
  1001  0000A4  0EBB               	movlw	low STR_3
  1002  0000A6  6E1F               	movwf	printf@f,c
  1003  0000A8  0EFF               	movlw	high STR_3
  1004  0000AA  6E20               	movwf	printf@f+1,c
  1005  0000AC  ECB5  F001         	call	_printf	;wreg free
  1006                           
  1007                           ;main.c: 46: for(i=0;i<50;i++){
  1008  0000B0  0E00               	movlw	0
  1009  0000B2  6E3F               	movwf	main@i,c
  1010  0000B4                     l1677:
  1011  0000B4  0E31               	movlw	49
  1012  0000B6  643F               	cpfsgt	main@i,c
  1013  0000B8  D001               	goto	l1681
  1014  0000BA  D00E               	goto	l1689
  1015  0000BC                     l1681:
  1016                           
  1017                           ;main.c: 47: if (screenMode != 2)
  1018  0000BC  0E02               	movlw	2
  1019  0000BE  1847               	xorwf	_screenMode,w,c
  1020  0000C0  A4D8               	btfss	status,2,c
  1021  0000C2  D00A               	goto	l1689
  1022                           
  1023                           ;main.c: 49: _delay((unsigned long)((10)*(10000000/4000.0)));
  1024                           
  1025                           ;main.c: 48: break;
  1026  0000C4  0E21               	movlw	33
  1027  0000C6  6E35               	movwf	??_main& (0+255),c
  1028  0000C8  0E76               	movlw	118
  1029  0000CA                     u1377:
  1030  0000CA  2EE8               	decfsz	wreg,f,c
  1031  0000CC  D7FE               	bra	u1377
  1032  0000CE  2E35               	decfsz	??_main& (0+255),f,c
  1033  0000D0  D7FC               	bra	u1377
  1034  0000D2  D000               	nop2	
  1035  0000D4  2A3F               	incf	main@i,f,c
  1036  0000D6  D7EE               	goto	l1677
  1037  0000D8                     l1689:
  1038  0000D8  0E02               	movlw	2
  1039  0000DA  1847               	xorwf	_screenMode,w,c
  1040  0000DC  A4D8               	btfss	status,2,c
  1041  0000DE  D035               	goto	l1721
  1042  0000E0  D7B3               	goto	l131
  1043  0000E2                     l140:
  1044                           
  1045                           ;main.c: 54: (INTCONbits.GIE = 0);
  1046  0000E2  9EF2               	bcf	intcon,7,c	;volatile
  1047                           
  1048                           ;main.c: 55: lcdInst(0b10000000);;
  1049  0000E4  0E80               	movlw	128
  1050  0000E6  EC20  F005         	call	_lcdInst
  1051                           
  1052                           ;main.c: 56: printf("RUNNING...      ");
  1053  0000EA  0E44               	movlw	low STR_4
  1054  0000EC  6E1F               	movwf	printf@f,c
  1055  0000EE  0EFF               	movlw	high STR_4
  1056  0000F0  6E20               	movwf	printf@f+1,c
  1057  0000F2  ECB5  F001         	call	_printf	;wreg free
  1058                           
  1059                           ;main.c: 57: unsigned char i;
  1060                           ;main.c: 58: for (i=0; i<10; i++){
  1061  0000F6  0E00               	movlw	0
  1062  0000F8  6E3D               	movwf	main@i_215,c
  1063  0000FA                     l1697:
  1064  0000FA  0E09               	movlw	9
  1065  0000FC  643D               	cpfsgt	main@i_215,c
  1066  0000FE  D001               	goto	l1701
  1067  000100  D021               	goto	l142
  1068  000102                     l1701:
  1069                           
  1070                           ;main.c: 59: lcdInst(0b10000000);;
  1071  000102  0E80               	movlw	128
  1072  000104  EC20  F005         	call	_lcdInst
  1073                           
  1074                           ;main.c: 60: lcdInst(0b11000000);;
  1075  000108  0EC0               	movlw	192
  1076  00010A  EC20  F005         	call	_lcdInst
  1077                           
  1078                           ;main.c: 61: printf("%02d              ", i);
  1079  00010E  0E0D               	movlw	low STR_5
  1080  000110  6E1F               	movwf	printf@f,c
  1081  000112  0EFF               	movlw	high STR_5
  1082  000114  6E20               	movwf	printf@f+1,c
  1083  000116  C03D  F021         	movff	main@i_215,?_printf+2
  1084  00011A  6A22               	clrf	?_printf+3,c
  1085  00011C  ECB5  F001         	call	_printf	;wreg free
  1086                           
  1087                           ;main.c: 62: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(10000000/4000.0)));};
  1088  000120  0E00               	movlw	0
  1089  000122  6E3C               	movwf	main@i_217,c
  1090  000124                     l1707:
  1091  000124  0E63               	movlw	99
  1092  000126  643C               	cpfsgt	main@i_217,c
  1093  000128  D001               	goto	l1711
  1094  00012A  D00A               	goto	l1715
  1095  00012C                     l1711:
  1096  00012C  0E21               	movlw	33
  1097  00012E  6E35               	movwf	??_main& (0+255),c
  1098  000130  0E76               	movlw	118
  1099  000132                     u1387:
  1100  000132  2EE8               	decfsz	wreg,f,c
  1101  000134  D7FE               	bra	u1387
  1102  000136  2E35               	decfsz	??_main& (0+255),f,c
  1103  000138  D7FC               	bra	u1387
  1104  00013A  D000               	nop2	
  1105  00013C  2A3C               	incf	main@i_217,f,c
  1106  00013E  D7F2               	goto	l1707
  1107  000140                     l1715:
  1108  000140  2A3D               	incf	main@i_215,f,c
  1109  000142  D7DB               	goto	l1697
  1110  000144                     l142:
  1111                           
  1112                           ;main.c: 63: }
  1113                           ;main.c: 64: (INTCONbits.GIE = 1);
  1114  000144  8EF2               	bsf	intcon,7,c	;volatile
  1115                           
  1116                           ;main.c: 66: screenMode = 0;
  1117  000146  0E00               	movlw	0
  1118  000148  6E47               	movwf	_screenMode,c
  1119  00014A                     l1721:
  1120  00014A  0447               	decf	_screenMode,w,c
  1121  00014C  A4D8               	btfss	status,2,c
  1122  00014E  D015               	goto	l1731
  1123  000150  D7C8               	goto	l140
  1124  000152                     l147:
  1125                           
  1126                           ;main.c: 69: (INTCONbits.GIE = 0);
  1127  000152  9EF2               	bcf	intcon,7,c	;volatile
  1128                           
  1129                           ;main.c: 70: lcdInst(0b10000000);;
  1130  000154  0E80               	movlw	128
  1131  000156  EC20  F005         	call	_lcdInst
  1132                           
  1133                           ;main.c: 71: printf("DONE! PRESS *   ");
  1134  00015A  0E99               	movlw	low STR_6
  1135  00015C  6E1F               	movwf	printf@f,c
  1136  00015E  0EFF               	movlw	high STR_6
  1137  000160  6E20               	movwf	printf@f+1,c
  1138  000162  ECB5  F001         	call	_printf	;wreg free
  1139                           
  1140                           ;main.c: 72: lcdInst(0b11000000);;
  1141  000166  0EC0               	movlw	192
  1142  000168  EC20  F005         	call	_lcdInst
  1143                           
  1144                           ;main.c: 73: printf("TO CONTINUE     ");
  1145  00016C  0E66               	movlw	low STR_7
  1146  00016E  6E1F               	movwf	printf@f,c
  1147  000170  0EFF               	movlw	high STR_7
  1148  000172  6E20               	movwf	printf@f+1,c
  1149  000174  ECB5  F001         	call	_printf	;wreg free
  1150                           
  1151                           ;main.c: 74: (INTCONbits.GIE = 1);
  1152  000178  8EF2               	bsf	intcon,7,c	;volatile
  1153  00017A                     l1731:
  1154  00017A  5047               	movf	_screenMode,w,c
  1155  00017C  A4D8               	btfss	status,2,c
  1156  00017E  D01F               	goto	l1745
  1157  000180  D7E8               	goto	l147
  1158  000182                     l150:
  1159                           
  1160                           ;main.c: 77: (INTCONbits.GIE = 0);
  1161  000182  9EF2               	bcf	intcon,7,c	;volatile
  1162                           
  1163                           ;main.c: 78: unsigned char min, sec;
  1164                           ;main.c: 81: min = 1;
  1165  000184  0E01               	movlw	1
  1166  000186  6E36               	movwf	main@min,c
  1167                           
  1168                           ;main.c: 82: sec = 1;
  1169  000188  0E01               	movlw	1
  1170  00018A  6E37               	movwf	main@sec,c
  1171                           
  1172                           ;main.c: 84: lcdInst(0b10000000);;
  1173  00018C  0E80               	movlw	128
  1174  00018E  EC20  F005         	call	_lcdInst
  1175                           
  1176                           ;main.c: 85: printf("TOTAL RUN TIME: ");
  1177  000192  0EAA               	movlw	low STR_8
  1178  000194  6E1F               	movwf	printf@f,c
  1179  000196  0EFF               	movlw	high STR_8
  1180  000198  6E20               	movwf	printf@f+1,c
  1181  00019A  ECB5  F001         	call	_printf	;wreg free
  1182                           
  1183                           ;main.c: 86: lcdInst(0b11000000);;
  1184  00019E  0EC0               	movlw	192
  1185  0001A0  EC20  F005         	call	_lcdInst
  1186                           
  1187                           ;main.c: 87: printf("%02x:%02x               ", min, sec);
  1188  0001A4  0E9C               	movlw	low STR_9
  1189  0001A6  6E1F               	movwf	printf@f,c
  1190  0001A8  0EFE               	movlw	high STR_9
  1191  0001AA  6E20               	movwf	printf@f+1,c
  1192  0001AC  C036  F021         	movff	main@min,?_printf+2
  1193  0001B0  6A22               	clrf	?_printf+3,c
  1194  0001B2  C037  F023         	movff	main@sec,?_printf+4
  1195  0001B6  6A24               	clrf	?_printf+5,c
  1196  0001B8  ECB5  F001         	call	_printf	;wreg free
  1197                           
  1198                           ;main.c: 88: (INTCONbits.GIE = 1);
  1199  0001BC  8EF2               	bsf	intcon,7,c	;volatile
  1200  0001BE                     l1745:
  1201  0001BE  0E03               	movlw	3
  1202  0001C0  1847               	xorwf	_screenMode,w,c
  1203  0001C2  A4D8               	btfss	status,2,c
  1204  0001C4  D018               	goto	l1757
  1205  0001C6  D7DD               	goto	l150
  1206  0001C8                     l1747:
  1207                           
  1208                           ;main.c: 91: unsigned char numBats;
  1209                           ;main.c: 94: numBats = 6;
  1210  0001C8  0E06               	movlw	6
  1211  0001CA  6E38               	movwf	main@numBats,c
  1212                           
  1213                           ;main.c: 96: lcdInst(0b10000000);;
  1214  0001CC  0E80               	movlw	128
  1215  0001CE  EC20  F005         	call	_lcdInst
  1216                           
  1217                           ;main.c: 97: printf("TOTAL NUMBER OF ");
  1218  0001D2  0ECC               	movlw	low STR_10
  1219  0001D4  6E1F               	movwf	printf@f,c
  1220  0001D6  0EFF               	movlw	high STR_10
  1221  0001D8  6E20               	movwf	printf@f+1,c
  1222  0001DA  ECB5  F001         	call	_printf	;wreg free
  1223                           
  1224                           ;main.c: 98: lcdInst(0b11000000);;
  1225  0001DE  0EC0               	movlw	192
  1226  0001E0  EC20  F005         	call	_lcdInst
  1227                           
  1228                           ;main.c: 99: printf("BATTERIES: %02d   ", numBats);
  1229  0001E4  0E20               	movlw	low STR_11
  1230  0001E6  6E1F               	movwf	printf@f,c
  1231  0001E8  0EFF               	movlw	high STR_11
  1232  0001EA  6E20               	movwf	printf@f+1,c
  1233  0001EC  C038  F021         	movff	main@numBats,?_printf+2
  1234  0001F0  6A22               	clrf	?_printf+3,c
  1235  0001F2  ECB5  F001         	call	_printf	;wreg free
  1236  0001F6                     l1757:
  1237  0001F6  0E04               	movlw	4
  1238  0001F8  1847               	xorwf	_screenMode,w,c
  1239  0001FA  A4D8               	btfss	status,2,c
  1240  0001FC  D01A               	goto	l1771
  1241  0001FE  D7E4               	goto	l1747
  1242  000200                     l156:
  1243                           
  1244                           ;main.c: 102: (INTCONbits.GIE = 0);
  1245  000200  9EF2               	bcf	intcon,7,c	;volatile
  1246                           
  1247                           ;main.c: 103: unsigned char numC;
  1248                           ;main.c: 106: numC = 3;
  1249  000202  0E03               	movlw	3
  1250  000204  6E39               	movwf	main@numC,c
  1251                           
  1252                           ;main.c: 108: lcdInst(0b10000000);;
  1253  000206  0E80               	movlw	128
  1254  000208  EC20  F005         	call	_lcdInst
  1255                           
  1256                           ;main.c: 109: printf("NUMBER OF C     ");
  1257  00020C  0E55               	movlw	low STR_12
  1258  00020E  6E1F               	movwf	printf@f,c
  1259  000210  0EFF               	movlw	high STR_12
  1260  000212  6E20               	movwf	printf@f+1,c
  1261  000214  ECB5  F001         	call	_printf	;wreg free
  1262                           
  1263                           ;main.c: 110: lcdInst(0b11000000);;
  1264  000218  0EC0               	movlw	192
  1265  00021A  EC20  F005         	call	_lcdInst
  1266                           
  1267                           ;main.c: 111: printf("BATTERIES: %02d   ", numC);
  1268  00021E  0E20               	movlw	low STR_11
  1269  000220  6E1F               	movwf	printf@f,c
  1270  000222  0EFF               	movlw	high STR_11
  1271  000224  6E20               	movwf	printf@f+1,c
  1272  000226  C039  F021         	movff	main@numC,?_printf+2
  1273  00022A  6A22               	clrf	?_printf+3,c
  1274  00022C  ECB5  F001         	call	_printf	;wreg free
  1275                           
  1276                           ;main.c: 112: (INTCONbits.GIE = 1);
  1277  000230  8EF2               	bsf	intcon,7,c	;volatile
  1278  000232                     l1771:
  1279  000232  0E05               	movlw	5
  1280  000234  1847               	xorwf	_screenMode,w,c
  1281  000236  A4D8               	btfss	status,2,c
  1282  000238  D01A               	goto	l1785
  1283  00023A  D7E2               	goto	l156
  1284  00023C                     l159:
  1285                           
  1286                           ;main.c: 115: (INTCONbits.GIE = 0);
  1287  00023C  9EF2               	bcf	intcon,7,c	;volatile
  1288                           
  1289                           ;main.c: 116: unsigned char num9V;
  1290                           ;main.c: 119: num9V = 10;
  1291  00023E  0E0A               	movlw	10
  1292  000240  6E3A               	movwf	main@num9V,c
  1293                           
  1294                           ;main.c: 121: lcdInst(0b10000000);;
  1295  000242  0E80               	movlw	128
  1296  000244  EC20  F005         	call	_lcdInst
  1297                           
  1298                           ;main.c: 122: printf("NUMBER OF 9V    ");
  1299  000248  0E88               	movlw	low STR_14
  1300  00024A  6E1F               	movwf	printf@f,c
  1301  00024C  0EFF               	movlw	high STR_14
  1302  00024E  6E20               	movwf	printf@f+1,c
  1303  000250  ECB5  F001         	call	_printf	;wreg free
  1304                           
  1305                           ;main.c: 123: lcdInst(0b11000000);;
  1306  000254  0EC0               	movlw	192
  1307  000256  EC20  F005         	call	_lcdInst
  1308                           
  1309                           ;main.c: 124: printf("BATTERIES: %02d     ", num9V);
  1310  00025A  0EE3               	movlw	low STR_15
  1311  00025C  6E1F               	movwf	printf@f,c
  1312  00025E  0EFE               	movlw	high STR_15
  1313  000260  6E20               	movwf	printf@f+1,c
  1314  000262  C03A  F021         	movff	main@num9V,?_printf+2
  1315  000266  6A22               	clrf	?_printf+3,c
  1316  000268  ECB5  F001         	call	_printf	;wreg free
  1317                           
  1318                           ;main.c: 125: (INTCONbits.GIE = 1);
  1319  00026C  8EF2               	bsf	intcon,7,c	;volatile
  1320  00026E                     l1785:
  1321  00026E  0E06               	movlw	6
  1322  000270  1847               	xorwf	_screenMode,w,c
  1323  000272  A4D8               	btfss	status,2,c
  1324  000274  D01A               	goto	l1799
  1325  000276  D7E2               	goto	l159
  1326  000278                     l162:
  1327                           
  1328                           ;main.c: 128: (INTCONbits.GIE = 0);
  1329  000278  9EF2               	bcf	intcon,7,c	;volatile
  1330                           
  1331                           ;main.c: 129: unsigned char numAA;
  1332                           ;main.c: 132: numAA = 2;
  1333  00027A  0E02               	movlw	2
  1334  00027C  6E3B               	movwf	main@numAA,c
  1335                           
  1336                           ;main.c: 134: lcdInst(0b10000000);;
  1337  00027E  0E80               	movlw	128
  1338  000280  EC20  F005         	call	_lcdInst
  1339                           
  1340                           ;main.c: 135: printf("NUMBER OF AA    ");
  1341  000284  0E77               	movlw	low STR_16
  1342  000286  6E1F               	movwf	printf@f,c
  1343  000288  0EFF               	movlw	high STR_16
  1344  00028A  6E20               	movwf	printf@f+1,c
  1345  00028C  ECB5  F001         	call	_printf	;wreg free
  1346                           
  1347                           ;main.c: 136: lcdInst(0b11000000);;
  1348  000290  0EC0               	movlw	192
  1349  000292  EC20  F005         	call	_lcdInst
  1350                           
  1351                           ;main.c: 137: printf("BATTERIES: %02x     ", numAA);
  1352  000296  0EF8               	movlw	low STR_17
  1353  000298  6E1F               	movwf	printf@f,c
  1354  00029A  0EFE               	movlw	high STR_17
  1355  00029C  6E20               	movwf	printf@f+1,c
  1356  00029E  C03B  F021         	movff	main@numAA,?_printf+2
  1357  0002A2  6A22               	clrf	?_printf+3,c
  1358  0002A4  ECB5  F001         	call	_printf	;wreg free
  1359                           
  1360                           ;main.c: 138: (INTCONbits.GIE = 1);
  1361  0002A8  8EF2               	bsf	intcon,7,c	;volatile
  1362  0002AA                     l1799:
  1363  0002AA  0E07               	movlw	7
  1364  0002AC  1847               	xorwf	_screenMode,w,c
  1365  0002AE  A4D8               	btfss	status,2,c
  1366  0002B0  D057               	goto	l1821
  1367  0002B2  D7E2               	goto	l162
  1368  0002B4                     l1801:
  1369                           
  1370                           ;main.c: 142: I2C_Master_Start();
  1371  0002B4  EC2F  F005         	call	_I2C_Master_Start	;wreg free
  1372                           
  1373                           ;main.c: 143: I2C_Master_Write(0b11010000);
  1374  0002B8  0E00               	movlw	0
  1375  0002BA  6E15               	movwf	I2C_Master_Write@d+1,c
  1376  0002BC  0ED0               	movlw	208
  1377  0002BE  6E14               	movwf	I2C_Master_Write@d,c
  1378  0002C0  EC26  F005         	call	_I2C_Master_Write	;wreg free
  1379                           
  1380                           ;main.c: 144: I2C_Master_Write(0x00);
  1381  0002C4  0E00               	movlw	0
  1382  0002C6  6E15               	movwf	I2C_Master_Write@d+1,c
  1383  0002C8  0E00               	movlw	0
  1384  0002CA  6E14               	movwf	I2C_Master_Write@d,c
  1385  0002CC  EC26  F005         	call	_I2C_Master_Write	;wreg free
  1386                           
  1387                           ;main.c: 145: I2C_Master_Stop();
  1388  0002D0  EC2B  F005         	call	_I2C_Master_Stop	;wreg free
  1389                           
  1390                           ;main.c: 147: I2C_Master_Start();
  1391  0002D4  EC2F  F005         	call	_I2C_Master_Start	;wreg free
  1392                           
  1393                           ;main.c: 148: I2C_Master_Write(0b11010001);
  1394  0002D8  0E00               	movlw	0
  1395  0002DA  6E15               	movwf	I2C_Master_Write@d+1,c
  1396  0002DC  0ED1               	movlw	209
  1397  0002DE  6E14               	movwf	I2C_Master_Write@d,c
  1398  0002E0  EC26  F005         	call	_I2C_Master_Write	;wreg free
  1399                           
  1400                           ;main.c: 149: for(unsigned char i=0;i<0x06;i++){
  1401  0002E4  0E00               	movlw	0
  1402  0002E6  6E3E               	movwf	main@i_239,c
  1403  0002E8                     l1805:
  1404  0002E8  0E05               	movlw	5
  1405  0002EA  643E               	cpfsgt	main@i_239,c
  1406  0002EC  D001               	goto	l1809
  1407  0002EE  D00E               	goto	l1815
  1408  0002F0                     l1809:
  1409                           
  1410                           ;main.c: 150: time[i] = I2C_Master_Read(1);
  1411  0002F0  503E               	movf	main@i_239,w,c
  1412  0002F2  0D01               	mullw	1
  1413  0002F4  0E40               	movlw	low _time
  1414  0002F6  24F3               	addwf	prodl,w,c
  1415  0002F8  6ED9               	movwf	fsr2l,c
  1416  0002FA  0E00               	movlw	high _time
  1417  0002FC  20F4               	addwfc	prodh,w,c
  1418  0002FE  6EDA               	movwf	fsr2h,c
  1419  000300  0E01               	movlw	1
  1420  000302  ECEF  F004         	call	_I2C_Master_Read
  1421  000306  6EDF               	movwf	indf2,c
  1422  000308  2A3E               	incf	main@i_239,f,c
  1423  00030A  D7EE               	goto	l1805
  1424  00030C                     l1815:
  1425                           
  1426                           ;main.c: 151: }
  1427                           ;main.c: 152: time[6] = I2C_Master_Read(0);
  1428  00030C  0E00               	movlw	0
  1429  00030E  ECEF  F004         	call	_I2C_Master_Read
  1430  000312  6E46               	movwf	_time+6,c
  1431                           
  1432                           ;main.c: 153: I2C_Master_Stop();
  1433  000314  EC2B  F005         	call	_I2C_Master_Stop	;wreg free
  1434                           
  1435                           ;main.c: 154: lcdInst(0b10000000);;
  1436  000318  0E80               	movlw	128
  1437  00031A  EC20  F005         	call	_lcdInst
  1438                           
  1439                           ;main.c: 155: printf("DATE: %02x/%02x/%02x  ", time[6],time[5],time[4]);
  1440  00031E  0EB5               	movlw	low STR_18
  1441  000320  6E1F               	movwf	printf@f,c
  1442  000322  0EFE               	movlw	high STR_18
  1443  000324  6E20               	movwf	printf@f+1,c
  1444  000326  C046  F021         	movff	_time+6,?_printf+2
  1445  00032A  6A22               	clrf	?_printf+3,c
  1446  00032C  C045  F023         	movff	_time+5,?_printf+4
  1447  000330  6A24               	clrf	?_printf+5,c
  1448  000332  C044  F025         	movff	_time+4,?_printf+6
  1449  000336  6A26               	clrf	?_printf+7,c
  1450  000338  ECB5  F001         	call	_printf	;wreg free
  1451                           
  1452                           ;main.c: 156: lcdInst(0b11000000);;
  1453  00033C  0EC0               	movlw	192
  1454  00033E  EC20  F005         	call	_lcdInst
  1455                           
  1456                           ;main.c: 157: printf("TIME: %02x:%02x:%02x  ", time[2],time[1],time[0]);
  1457  000342  0ECC               	movlw	low STR_19
  1458  000344  6E1F               	movwf	printf@f,c
  1459  000346  0EFE               	movlw	high STR_19
  1460  000348  6E20               	movwf	printf@f+1,c
  1461  00034A  C042  F021         	movff	_time+2,?_printf+2
  1462  00034E  6A22               	clrf	?_printf+3,c
  1463  000350  C041  F023         	movff	_time+1,?_printf+4
  1464  000354  6A24               	clrf	?_printf+5,c
  1465  000356  C040  F025         	movff	_time,?_printf+6
  1466  00035A  6A26               	clrf	?_printf+7,c
  1467  00035C  ECB5  F001         	call	_printf	;wreg free
  1468  000360                     l1821:
  1469  000360  0E08               	movlw	8
  1470  000362  1847               	xorwf	_screenMode,w,c
  1471  000364  A4D8               	btfss	status,2,c
  1472  000366  D6B8               	goto	l1689
  1473  000368  D7A5               	goto	l1801
  1474  00036A                     __end_of_main:
  1475                           	opt stack 0
  1476                           tblptru	equ	0xFF8
  1477                           tblptrh	equ	0xFF7
  1478                           tblptrl	equ	0xFF6
  1479                           tablat	equ	0xFF5
  1480                           prodh	equ	0xFF4
  1481                           prodl	equ	0xFF3
  1482                           intcon	equ	0xFF2
  1483                           intcon3	equ	0xFF0
  1484                           postinc0	equ	0xFEE
  1485                           wreg	equ	0xFE8
  1486                           indf2	equ	0xFDF
  1487                           fsr2h	equ	0xFDA
  1488                           fsr2l	equ	0xFD9
  1489                           status	equ	0xFD8
  1490                           
  1491 ;; *************** function _printf *****************
  1492 ;; Defined at:
  1493 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  1494 ;; Parameters:    Size  Location     Type
  1495 ;;  f               2   30[COMRAM] PTR const unsigned char 
  1496 ;;		 -> STR_19(23), STR_18(23), STR_17(21), STR_16(17), 
  1497 ;;		 -> STR_15(21), STR_14(17), STR_13(19), STR_12(17), 
  1498 ;;		 -> STR_11(19), STR_10(17), STR_9(25), STR_8(17), 
  1499 ;;		 -> STR_7(17), STR_6(17), STR_5(19), STR_4(17), 
  1500 ;;		 -> STR_3(17), STR_2(17), STR_1(17), 
  1501 ;; Auto vars:     Size  Location     Type
  1502 ;;  idx             1   42[COMRAM] unsigned char 
  1503 ;;  tmpval          4    0        struct .
  1504 ;;  cp              3    0        PTR const unsigned char 
  1505 ;;  width           2   49[COMRAM] int 
  1506 ;;  val             2   46[COMRAM] unsigned int 
  1507 ;;  ap              2   43[COMRAM] PTR void [1]
  1508 ;;		 -> ?_printf(2), 
  1509 ;;  len             2    0        unsigned int 
  1510 ;;  c               1   51[COMRAM] char 
  1511 ;;  flag            1   48[COMRAM] unsigned char 
  1512 ;;  prec            1   45[COMRAM] char 
  1513 ;; Return value:  Size  Location     Type
  1514 ;;                  2   30[COMRAM] int 
  1515 ;; Registers used:
  1516 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1517 ;; Tracked objects:
  1518 ;;		On entry : 0/0
  1519 ;;		On exit  : 0/0
  1520 ;;		Unchanged: 0/0
  1521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1522 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1523 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1524 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1525 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1526 ;;Total ram usage:       22 bytes
  1527 ;; Hardware stack levels used:    1
  1528 ;; Hardware stack levels required when called:    4
  1529 ;; This function calls:
  1530 ;;		___lwdiv
  1531 ;;		___lwmod
  1532 ;;		___wmul
  1533 ;;		_isdigit
  1534 ;;		_putch
  1535 ;; This function is called by:
  1536 ;;		_main
  1537 ;; This function uses a non-reentrant model
  1538 ;;
  1539                           
  1540                           	psect	text1
  1541  00036A                     __ptext1:
  1542                           	opt stack 0
  1543  00036A                     _printf:
  1544                           	opt stack 26
  1545                           
  1546                           ;doprnt.c: 466: va_list ap;
  1547                           ;doprnt.c: 499: signed char c;
  1548                           ;doprnt.c: 501: int width;
  1549                           ;doprnt.c: 506: signed char prec;
  1550                           ;doprnt.c: 508: unsigned char flag;
  1551                           ;doprnt.c: 523: union {
  1552                           ;doprnt.c: 524: unsigned long vd;
  1553                           ;doprnt.c: 525: double integ;
  1554                           ;doprnt.c: 526: } tmpval;
  1555                           ;doprnt.c: 528: unsigned int val;
  1556                           ;doprnt.c: 529: unsigned len;
  1557                           ;doprnt.c: 530: const char * cp;
  1558                           ;doprnt.c: 533: *ap = __va_start();
  1559                           
  1560                           ;incstack = 0
  1561  00036A  0E21               	movlw	low (?_printf+2)
  1562  00036C  6E2C               	movwf	printf@ap,c
  1563  00036E  0E00               	movlw	high (?_printf+2)
  1564  000370  6E2D               	movwf	printf@ap+1,c
  1565                           
  1566                           ;doprnt.c: 536: while(c = *f++) {
  1567  000372  D174               	goto	l1617
  1568  000374                     l1491:
  1569                           
  1570                           ;doprnt.c: 538: if(c != '%')
  1571  000374  0E25               	movlw	37
  1572  000376  1834               	xorwf	printf@c,w,c
  1573  000378  B4D8               	btfsc	status,2,c
  1574  00037A  D004               	goto	l1495
  1575                           
  1576                           ;doprnt.c: 540: {
  1577                           ;doprnt.c: 541: (putch(c) );
  1578  00037C  5034               	movf	printf@c,w,c
  1579  00037E  EC1A  F005         	call	_putch
  1580                           
  1581                           ;doprnt.c: 542: continue;
  1582  000382  D16C               	goto	l1617
  1583  000384                     l1495:
  1584                           
  1585                           ;doprnt.c: 543: }
  1586                           ;doprnt.c: 546: width = 0;
  1587  000384  0E00               	movlw	0
  1588  000386  6E33               	movwf	printf@width+1,c
  1589  000388  0E00               	movlw	0
  1590  00038A  6E32               	movwf	printf@width,c
  1591                           
  1592                           ;doprnt.c: 548: flag = 0;
  1593  00038C  0E00               	movlw	0
  1594  00038E  6E31               	movwf	printf@flag,c
  1595                           
  1596                           ;doprnt.c: 551: switch(*f) {
  1597                           
  1598                           ;doprnt.c: 550: for(;;) {
  1599  000390  D003               	goto	l1501
  1600  000392                     l1497:
  1601                           
  1602                           ;doprnt.c: 580: flag |= 0x04;
  1603  000392  8431               	bsf	printf@flag,2,c
  1604                           
  1605                           ;doprnt.c: 581: f++;
  1606  000394  4A1F               	infsnz	printf@f,f,c
  1607  000396  2A20               	incf	printf@f+1,f,c
  1608  000398                     l1501:
  1609  000398  C01F  FFF6         	movff	printf@f,tblptrl
  1610  00039C  C020  FFF7         	movff	printf@f+1,tblptrh
  1611  0003A0                     	if	0	;tblptru may be non-zero
  1612  0003A0                     	endif
  1613  0003A0                     	if	0	;tblptru may be non-zero
  1614  0003A0                     	endif
  1615  0003A0  0008               	tblrd		*
  1616  0003A2  50F5               	movf	tablat,w,c
  1617                           
  1618                           ; Switch size 1, requested type "space"
  1619                           ; Number of cases is 1, Range of values is 48 to 48
  1620                           ; switch strategies available:
  1621                           ; Name         Instructions Cycles
  1622                           ; simple_byte            4     3 (average)
  1623                           ;	Chosen strategy is simple_byte
  1624  0003A4  0A30               	xorlw	48	; case 48
  1625  0003A6  B4D8               	btfsc	status,2,c
  1626  0003A8  D7F4               	goto	l1497
  1627                           
  1628                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1629                           
  1630                           ;doprnt.c: 586: }
  1631                           
  1632                           ;doprnt.c: 585: break;
  1633  0003AA  C01F  FFF6         	movff	printf@f,tblptrl
  1634  0003AE  C020  FFF7         	movff	printf@f+1,tblptrh
  1635  0003B2                     	if	0	;tblptru may be non-zero
  1636  0003B2                     	endif
  1637  0003B2                     	if	0	;tblptru may be non-zero
  1638  0003B2                     	endif
  1639  0003B2  0008               	tblrd		*
  1640  0003B4  50F5               	movf	tablat,w,c
  1641  0003B6  EC02  F005         	call	_isdigit
  1642  0003BA  A0D8               	btfss	status,0,c
  1643  0003BC  D035               	goto	l1519
  1644                           
  1645                           ;doprnt.c: 598: width = 0;
  1646  0003BE  0E00               	movlw	0
  1647  0003C0  6E33               	movwf	printf@width+1,c
  1648  0003C2  0E00               	movlw	0
  1649  0003C4  6E32               	movwf	printf@width,c
  1650  0003C6                     l1507:
  1651                           
  1652                           ;doprnt.c: 600: width *= 10;
  1653  0003C6  C032  F013         	movff	printf@width,___wmul@multiplier
  1654  0003CA  C033  F014         	movff	printf@width+1,___wmul@multiplier+1
  1655  0003CE  0E00               	movlw	0
  1656  0003D0  6E16               	movwf	___wmul@multiplicand+1,c
  1657  0003D2  0E0A               	movlw	10
  1658  0003D4  6E15               	movwf	___wmul@multiplicand,c
  1659  0003D6  ECDC  F004         	call	___wmul	;wreg free
  1660  0003DA  C013  F032         	movff	?___wmul,printf@width
  1661  0003DE  C014  F033         	movff	?___wmul+1,printf@width+1
  1662                           
  1663                           ;doprnt.c: 601: width += *f++ - '0';
  1664  0003E2  0ED0               	movlw	208
  1665  0003E4  6E27               	movwf	??_printf& (0+255),c
  1666  0003E6  0EFF               	movlw	255
  1667  0003E8  6E28               	movwf	(??_printf+1)& (0+255),c
  1668  0003EA  C01F  FFF6         	movff	printf@f,tblptrl
  1669  0003EE  C020  FFF7         	movff	printf@f+1,tblptrh
  1670  0003F2                     	if	0	;tblptru may be non-zero
  1671  0003F2                     	endif
  1672  0003F2                     	if	0	;tblptru may be non-zero
  1673  0003F2                     	endif
  1674  0003F2  0008               	tblrd		*
  1675  0003F4  50F5               	movf	tablat,w,c
  1676  0003F6  6E29               	movwf	(??_printf+2)& (0+255),c
  1677  0003F8  6A2A               	clrf	(??_printf+3)& (0+255),c
  1678  0003FA  5027               	movf	??_printf,w,c
  1679  0003FC  2629               	addwf	??_printf+2,f,c
  1680  0003FE  5028               	movf	??_printf+1,w,c
  1681  000400  222A               	addwfc	??_printf+3,f,c
  1682  000402  5029               	movf	??_printf+2,w,c
  1683  000404  2632               	addwf	printf@width,f,c
  1684  000406  502A               	movf	??_printf+3,w,c
  1685  000408  2233               	addwfc	printf@width+1,f,c
  1686  00040A  4A1F               	infsnz	printf@f,f,c
  1687  00040C  2A20               	incf	printf@f+1,f,c
  1688                           
  1689                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1690  00040E  C01F  FFF6         	movff	printf@f,tblptrl
  1691  000412  C020  FFF7         	movff	printf@f+1,tblptrh
  1692  000416                     	if	0	;tblptru may be non-zero
  1693  000416                     	endif
  1694  000416                     	if	0	;tblptru may be non-zero
  1695  000416                     	endif
  1696  000416  0008               	tblrd		*
  1697  000418  50F5               	movf	tablat,w,c
  1698  00041A  EC02  F005         	call	_isdigit
  1699  00041E  A0D8               	btfss	status,0,c
  1700  000420  D003               	goto	l1519
  1701  000422  D7D1               	goto	l1507
  1702  000424                     l1515:
  1703                           
  1704                           ;doprnt.c: 721: flag |= 0x80;
  1705  000424  8E31               	bsf	printf@flag,7,c
  1706                           
  1707                           ;doprnt.c: 723: break;
  1708  000426  D017               	goto	l223
  1709  000428                     l1519:
  1710  000428  C01F  FFF6         	movff	printf@f,tblptrl
  1711  00042C  C020  FFF7         	movff	printf@f+1,tblptrh
  1712  000430  4A1F               	infsnz	printf@f,f,c
  1713  000432  2A20               	incf	printf@f+1,f,c
  1714  000434                     	if	0	;tblptru may be non-zero
  1715  000434                     	endif
  1716  000434                     	if	0	;tblptru may be non-zero
  1717  000434                     	endif
  1718  000434  0008               	tblrd		*
  1719  000436  CFF5 F034          	movff	tablat,printf@c
  1720  00043A  5034               	movf	printf@c,w,c
  1721                           
  1722                           ; Switch size 1, requested type "space"
  1723                           ; Number of cases is 4, Range of values is 0 to 120
  1724                           ; switch strategies available:
  1725                           ; Name         Instructions Cycles
  1726                           ; simple_byte           13     7 (average)
  1727                           ;	Chosen strategy is simple_byte
  1728  00043C  0A00               	xorlw	0	; case 0
  1729  00043E  B4D8               	btfsc	status,2,c
  1730  000440  0012               	return	
  1731  000442  0A64               	xorlw	100	; case 100
  1732  000444  B4D8               	btfsc	status,2,c
  1733  000446  D007               	goto	l223
  1734  000448  0A0D               	xorlw	13	; case 105
  1735  00044A  B4D8               	btfsc	status,2,c
  1736  00044C  D004               	goto	l223
  1737  00044E  0A11               	xorlw	17	; case 120
  1738  000450  B4D8               	btfsc	status,2,c
  1739  000452  D7E8               	goto	l1515
  1740  000454  D103               	goto	l1617
  1741  000456                     l223:
  1742                           
  1743                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  1744  000456  BE31               	btfsc	printf@flag,7,c
  1745  000458  D015               	goto	l1531
  1746                           
  1747                           ;doprnt.c: 1253: {
  1748                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1749  00045A  C02C  FFD9         	movff	printf@ap,fsr2l
  1750  00045E  C02D  FFDA         	movff	printf@ap+1,fsr2h
  1751  000462  CFDE F02F          	movff	postinc2,printf@val
  1752  000466  CFDD F030          	movff	postdec2,printf@val+1
  1753  00046A  0E02               	movlw	2
  1754  00046C  262C               	addwf	printf@ap,f,c
  1755  00046E  0E00               	movlw	0
  1756  000470  222D               	addwfc	printf@ap+1,f,c
  1757                           
  1758                           ;doprnt.c: 1261: if((int)val < 0) {
  1759  000472  AE30               	btfss	printf@val+1,7,c
  1760  000474  D044               	goto	l1565
  1761                           
  1762                           ;doprnt.c: 1262: flag |= 0x03;
  1763  000476  0E03               	movlw	3
  1764  000478  1231               	iorwf	printf@flag,f,c
  1765                           
  1766                           ;doprnt.c: 1263: val = -val;
  1767  00047A  6C2F               	negf	printf@val,c
  1768  00047C  1E30               	comf	printf@val+1,f,c
  1769  00047E  B0D8               	btfsc	status,0,c
  1770  000480  2A30               	incf	printf@val+1,f,c
  1771                           
  1772                           ;doprnt.c: 1264: }
  1773                           ;doprnt.c: 1266: }
  1774  000482  D03D               	goto	l1565
  1775  000484                     l1531:
  1776                           
  1777                           ;doprnt.c: 1268: else
  1778                           ;doprnt.c: 1273: {
  1779                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  1780  000484  C02C  FFD9         	movff	printf@ap,fsr2l
  1781  000488  C02D  FFDA         	movff	printf@ap+1,fsr2h
  1782  00048C  CFDE F02F          	movff	postinc2,printf@val
  1783  000490  CFDD F030          	movff	postdec2,printf@val+1
  1784  000494  0E02               	movlw	2
  1785  000496  262C               	addwf	printf@ap,f,c
  1786  000498  0E00               	movlw	0
  1787  00049A  222D               	addwfc	printf@ap+1,f,c
  1788                           
  1789                           ;doprnt.c: 1287: }
  1790                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  1791  00049C  D030               	goto	l1565
  1792  00049E                     l1535:
  1793                           
  1794                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1795  00049E  0E01               	movlw	1
  1796  0004A0  6E34               	movwf	printf@c,c
  1797  0004A2                     l1537:
  1798  0004A2  0E05               	movlw	5
  1799  0004A4  1834               	xorwf	printf@c,w,c
  1800  0004A6  B4D8               	btfsc	status,2,c
  1801  0004A8  D032               	goto	l1567
  1802                           
  1803                           ;doprnt.c: 1306: if(val < dpowers[c])
  1804  0004AA  5034               	movf	printf@c,w,c
  1805  0004AC  0D02               	mullw	2
  1806  0004AE  0E8A               	movlw	low _dpowers
  1807  0004B0  24F3               	addwf	prodl,w,c
  1808  0004B2  6EF6               	movwf	tblptrl,c
  1809  0004B4  0EFE               	movlw	high _dpowers
  1810  0004B6  20F4               	addwfc	prodh,w,c
  1811  0004B8  6EF7               	movwf	tblptrh,c
  1812  0004BA                     	if	0	;There are less than 3 active tblptr bytes
  1813  0004BA                     	endif
  1814  0004BA  0009               	tblrd		*+
  1815  0004BC  50F5               	movf	tablat,w,c
  1816  0004BE  5C2F               	subwf	printf@val,w,c
  1817  0004C0  0009               	tblrd		*+
  1818  0004C2  50F5               	movf	tablat,w,c
  1819  0004C4  5830               	subwfb	printf@val+1,w,c
  1820  0004C6  A0D8               	btfss	status,0,c
  1821  0004C8  D022               	goto	l1567
  1822                           
  1823                           ;doprnt.c: 1307: break;
  1824  0004CA  2A34               	incf	printf@c,f,c
  1825  0004CC  D7EA               	goto	l1537
  1826  0004CE                     l1549:
  1827                           
  1828                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  1829  0004CE  0E01               	movlw	1
  1830  0004D0  6E34               	movwf	printf@c,c
  1831  0004D2                     l1551:
  1832  0004D2  0E04               	movlw	4
  1833  0004D4  1834               	xorwf	printf@c,w,c
  1834  0004D6  B4D8               	btfsc	status,2,c
  1835  0004D8  D01A               	goto	l1567
  1836                           
  1837                           ;doprnt.c: 1317: if(val < hexpowers[c])
  1838  0004DA  5034               	movf	printf@c,w,c
  1839  0004DC  0D02               	mullw	2
  1840  0004DE  0E94               	movlw	low _hexpowers
  1841  0004E0  24F3               	addwf	prodl,w,c
  1842  0004E2  6EF6               	movwf	tblptrl,c
  1843  0004E4  0EFE               	movlw	high _hexpowers
  1844  0004E6  20F4               	addwfc	prodh,w,c
  1845  0004E8  6EF7               	movwf	tblptrh,c
  1846  0004EA                     	if	0	;There are less than 3 active tblptr bytes
  1847  0004EA                     	endif
  1848  0004EA  0009               	tblrd		*+
  1849  0004EC  50F5               	movf	tablat,w,c
  1850  0004EE  5C2F               	subwf	printf@val,w,c
  1851  0004F0  0009               	tblrd		*+
  1852  0004F2  50F5               	movf	tablat,w,c
  1853  0004F4  5830               	subwfb	printf@val+1,w,c
  1854  0004F6  A0D8               	btfss	status,0,c
  1855  0004F8  D00A               	goto	l1567
  1856                           
  1857                           ;doprnt.c: 1318: break;
  1858  0004FA  2A34               	incf	printf@c,f,c
  1859  0004FC  D7EA               	goto	l1551
  1860  0004FE                     l1565:
  1861  0004FE  5031               	movf	printf@flag,w,c
  1862  000500  0B80               	andlw	128
  1863                           
  1864                           ; Switch size 1, requested type "space"
  1865                           ; Number of cases is 2, Range of values is 0 to 128
  1866                           ; switch strategies available:
  1867                           ; Name         Instructions Cycles
  1868                           ; simple_byte            7     4 (average)
  1869                           ;	Chosen strategy is simple_byte
  1870  000502  0A00               	xorlw	0	; case 0
  1871  000504  B4D8               	btfsc	status,2,c
  1872  000506  D7CB               	goto	l1535
  1873  000508  0A80               	xorlw	128	; case 128
  1874  00050A  B4D8               	btfsc	status,2,c
  1875  00050C  D7E0               	goto	l1549
  1876  00050E                     l1567:
  1877                           
  1878                           ;doprnt.c: 1345: if(width && flag & 0x03)
  1879  00050E  5032               	movf	printf@width,w,c
  1880  000510  1033               	iorwf	printf@width+1,w,c
  1881  000512  B4D8               	btfsc	status,2,c
  1882  000514  D009               	goto	l1573
  1883  000516  C031  F027         	movff	printf@flag,??_printf
  1884  00051A  0E03               	movlw	3
  1885  00051C  1627               	andwf	??_printf,f,c
  1886  00051E  B4D8               	btfsc	status,2,c
  1887  000520  D003               	goto	l1573
  1888                           
  1889                           ;doprnt.c: 1346: width--;
  1890  000522  0632               	decf	printf@width,f,c
  1891  000524  A0D8               	btfss	status,0,c
  1892  000526  0633               	decf	printf@width+1,f,c
  1893  000528                     l1573:
  1894                           
  1895                           ;doprnt.c: 1381: if(width > c)
  1896  000528  0E80               	movlw	128
  1897  00052A  BE34               	btfsc	printf@c,7,c
  1898  00052C  0E7F               	movlw	127
  1899  00052E  6E27               	movwf	??_printf& (0+255),c
  1900  000530  5032               	movf	printf@width,w,c
  1901  000532  5C34               	subwf	printf@c,w,c
  1902  000534  5033               	movf	printf@width+1,w,c
  1903  000536  0A80               	xorlw	128
  1904  000538  5827               	subwfb	??_printf& (0+255),w,c
  1905  00053A  B0D8               	btfsc	status,0,c
  1906  00053C  D007               	goto	l1577
  1907                           
  1908                           ;doprnt.c: 1382: width -= c;
  1909  00053E  5034               	movf	printf@c,w,c
  1910  000540  5E32               	subwf	printf@width,f,c
  1911  000542  0E00               	movlw	0
  1912  000544  BE34               	btfsc	printf@c,7,c
  1913  000546  0EFF               	movlw	255
  1914  000548  5A33               	subwfb	printf@width+1,f,c
  1915  00054A  D004               	goto	l1579
  1916  00054C                     l1577:
  1917                           
  1918                           ;doprnt.c: 1383: else
  1919                           ;doprnt.c: 1384: width = 0;
  1920  00054C  0E00               	movlw	0
  1921  00054E  6E33               	movwf	printf@width+1,c
  1922  000550  0E00               	movlw	0
  1923  000552  6E32               	movwf	printf@width,c
  1924  000554                     l1579:
  1925                           
  1926                           ;doprnt.c: 1387: if(flag & 0x04) {
  1927  000554  A431               	btfss	printf@flag,2,c
  1928  000556  D014               	goto	l1591
  1929                           
  1930                           ;doprnt.c: 1392: if(flag & 0x03)
  1931  000558  C031  F027         	movff	printf@flag,??_printf
  1932  00055C  0E03               	movlw	3
  1933  00055E  1627               	andwf	??_printf,f,c
  1934  000560  B4D8               	btfsc	status,2,c
  1935  000562  D003               	goto	l1585
  1936                           
  1937                           ;doprnt.c: 1393: (putch('-') );
  1938  000564  0E2D               	movlw	45
  1939  000566  EC1A  F005         	call	_putch
  1940  00056A                     l1585:
  1941                           
  1942                           ;doprnt.c: 1415: if(width)
  1943  00056A  5032               	movf	printf@width,w,c
  1944  00056C  1033               	iorwf	printf@width+1,w,c
  1945  00056E  B4D8               	btfsc	status,2,c
  1946  000570  D01E               	goto	l1601
  1947                           
  1948                           ;doprnt.c: 1417: (putch('0') );
  1949                           
  1950                           ;doprnt.c: 1416: do
  1951  000572  0E30               	movlw	48
  1952  000574  EC1A  F005         	call	_putch
  1953                           
  1954                           ;doprnt.c: 1418: while(--width);
  1955  000578  0632               	decf	printf@width,f,c
  1956  00057A  A0D8               	btfss	status,0,c
  1957  00057C  0633               	decf	printf@width+1,f,c
  1958  00057E  D7F5               	goto	l1585
  1959  000580                     l1591:
  1960                           
  1961                           ;doprnt.c: 1422: {
  1962                           ;doprnt.c: 1424: if(width
  1963                           ;doprnt.c: 1428: )
  1964  000580  5032               	movf	printf@width,w,c
  1965  000582  1033               	iorwf	printf@width+1,w,c
  1966  000584  B4D8               	btfsc	status,2,c
  1967  000586  D00A               	goto	l1597
  1968  000588                     l1593:
  1969                           
  1970                           ;doprnt.c: 1430: (putch(' ') );
  1971  000588  0E20               	movlw	32
  1972  00058A  EC1A  F005         	call	_putch
  1973                           
  1974                           ;doprnt.c: 1431: while(--width);
  1975  00058E  0632               	decf	printf@width,f,c
  1976  000590  A0D8               	btfss	status,0,c
  1977  000592  0633               	decf	printf@width+1,f,c
  1978  000594  5032               	movf	printf@width,w,c
  1979  000596  1033               	iorwf	printf@width+1,w,c
  1980  000598  A4D8               	btfss	status,2,c
  1981  00059A  D7F6               	goto	l1593
  1982  00059C                     l1597:
  1983                           
  1984                           ;doprnt.c: 1438: if(flag & 0x03)
  1985  00059C  C031  F027         	movff	printf@flag,??_printf
  1986  0005A0  0E03               	movlw	3
  1987  0005A2  1627               	andwf	??_printf,f,c
  1988  0005A4  B4D8               	btfsc	status,2,c
  1989  0005A6  D003               	goto	l1601
  1990                           
  1991                           ;doprnt.c: 1439: (putch('-') );
  1992  0005A8  0E2D               	movlw	45
  1993  0005AA  EC1A  F005         	call	_putch
  1994  0005AE                     l1601:
  1995                           
  1996                           ;doprnt.c: 1469: }
  1997                           ;doprnt.c: 1472: prec = c;
  1998  0005AE  C034  F02E         	movff	printf@c,printf@prec
  1999                           
  2000                           ;doprnt.c: 1474: while(prec--) {
  2001  0005B2  D050               	goto	l1615
  2002  0005B4                     l1603:
  2003                           
  2004                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2005  0005B4  502E               	movf	printf@prec,w,c
  2006  0005B6  0D02               	mullw	2
  2007  0005B8  0E8A               	movlw	low _dpowers
  2008  0005BA  24F3               	addwf	prodl,w,c
  2009  0005BC  6EF6               	movwf	tblptrl,c
  2010  0005BE  0EFE               	movlw	high _dpowers
  2011  0005C0  20F4               	addwfc	prodh,w,c
  2012  0005C2  6EF7               	movwf	tblptrh,c
  2013  0005C4                     	if	0	;There are less than 3 active tblptr bytes
  2014  0005C4                     	endif
  2015  0005C4  0009               	tblrd		*+
  2016  0005C6  CFF5 F015          	movff	tablat,___lwdiv@divisor
  2017  0005CA  000A               	tblrd		*-
  2018  0005CC  CFF5 F016          	movff	tablat,___lwdiv@divisor+1
  2019  0005D0  C02F  F013         	movff	printf@val,___lwdiv@dividend
  2020  0005D4  C030  F014         	movff	printf@val+1,___lwdiv@dividend+1
  2021  0005D8  EC17  F004         	call	___lwdiv	;wreg free
  2022  0005DC  C013  F01A         	movff	?___lwdiv,___lwmod@dividend
  2023  0005E0  C014  F01B         	movff	?___lwdiv+1,___lwmod@dividend+1
  2024  0005E4  0E00               	movlw	0
  2025  0005E6  6E1D               	movwf	___lwmod@divisor+1,c
  2026  0005E8  0E0A               	movlw	10
  2027  0005EA  6E1C               	movwf	___lwmod@divisor,c
  2028  0005EC  EC8A  F004         	call	___lwmod	;wreg free
  2029  0005F0  501A               	movf	?___lwmod,w,c
  2030  0005F2  0F30               	addlw	48
  2031  0005F4  6E34               	movwf	printf@c,c
  2032                           
  2033                           ;doprnt.c: 1491: break;
  2034  0005F6  D02B               	goto	l1613
  2035  0005F8                     l1605:
  2036                           
  2037                           ;doprnt.c: 1499: {
  2038                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  2039  0005F8  C02F  F013         	movff	printf@val,___lwdiv@dividend
  2040  0005FC  C030  F014         	movff	printf@val+1,___lwdiv@dividend+1
  2041  000600  502E               	movf	printf@prec,w,c
  2042  000602  0D02               	mullw	2
  2043  000604  0E94               	movlw	low _hexpowers
  2044  000606  24F3               	addwf	prodl,w,c
  2045  000608  6EF6               	movwf	tblptrl,c
  2046  00060A  0EFE               	movlw	high _hexpowers
  2047  00060C  20F4               	addwfc	prodh,w,c
  2048  00060E  6EF7               	movwf	tblptrh,c
  2049  000610                     	if	0	;There are less than 3 active tblptr bytes
  2050  000610                     	endif
  2051  000610  0009               	tblrd		*+
  2052  000612  CFF5 F015          	movff	tablat,___lwdiv@divisor
  2053  000616  000A               	tblrd		*-
  2054  000618  CFF5 F016          	movff	tablat,___lwdiv@divisor+1
  2055  00061C  EC17  F004         	call	___lwdiv	;wreg free
  2056  000620  5013               	movf	?___lwdiv,w,c
  2057  000622  0B0F               	andlw	15
  2058  000624  6E2B               	movwf	printf@idx,c
  2059                           
  2060                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  2061  000626  502B               	movf	printf@idx,w,c
  2062  000628  0D01               	mullw	1
  2063  00062A  0E33               	movlw	low STR_20
  2064  00062C  24F3               	addwf	prodl,w,c
  2065  00062E  6EF6               	movwf	tblptrl,c
  2066  000630  0EFF               	movlw	high STR_20
  2067  000632  20F4               	addwfc	prodh,w,c
  2068  000634  6EF7               	movwf	tblptrh,c
  2069  000636                     	if	0	;There are less than 3 active tblptr bytes
  2070  000636                     	endif
  2071  000636  0008               	tblrd		*
  2072  000638  CFF5 F034          	movff	tablat,printf@c
  2073                           
  2074                           ;doprnt.c: 1523: }
  2075                           
  2076                           ;doprnt.c: 1508: }
  2077                           ;doprnt.c: 1510: break;
  2078  00063C  D008               	goto	l1613
  2079  00063E                     l1611:
  2080  00063E  5031               	movf	printf@flag,w,c
  2081  000640  0B80               	andlw	128
  2082                           
  2083                           ; Switch size 1, requested type "space"
  2084                           ; Number of cases is 2, Range of values is 0 to 128
  2085                           ; switch strategies available:
  2086                           ; Name         Instructions Cycles
  2087                           ; simple_byte            7     4 (average)
  2088                           ;	Chosen strategy is simple_byte
  2089  000642  0A00               	xorlw	0	; case 0
  2090  000644  B4D8               	btfsc	status,2,c
  2091  000646  D7B6               	goto	l1603
  2092  000648  0A80               	xorlw	128	; case 128
  2093  00064A  B4D8               	btfsc	status,2,c
  2094  00064C  D7D5               	goto	l1605
  2095  00064E                     l1613:
  2096                           
  2097                           ;doprnt.c: 1524: (putch(c) );
  2098  00064E  5034               	movf	printf@c,w,c
  2099  000650  EC1A  F005         	call	_putch
  2100  000654                     l1615:
  2101  000654  062E               	decf	printf@prec,f,c
  2102  000656  282E               	incf	printf@prec,w,c
  2103  000658  A4D8               	btfss	status,2,c
  2104  00065A  D7F1               	goto	l1611
  2105  00065C                     l1617:
  2106  00065C  C01F  FFF6         	movff	printf@f,tblptrl
  2107  000660  C020  FFF7         	movff	printf@f+1,tblptrh
  2108  000664  4A1F               	infsnz	printf@f,f,c
  2109  000666  2A20               	incf	printf@f+1,f,c
  2110  000668                     	if	0	;tblptru may be non-zero
  2111  000668                     	endif
  2112  000668                     	if	0	;tblptru may be non-zero
  2113  000668                     	endif
  2114  000668  0008               	tblrd		*
  2115  00066A  CFF5 F034          	movff	tablat,printf@c
  2116  00066E  5034               	movf	printf@c,w,c
  2117  000670  B4D8               	btfsc	status,2,c
  2118  000672  0012               	return	
  2119  000674  D67F               	goto	l1491
  2120  000676                     __end_of_printf:
  2121                           	opt stack 0
  2122                           tblptru	equ	0xFF8
  2123                           tblptrh	equ	0xFF7
  2124                           tblptrl	equ	0xFF6
  2125                           tablat	equ	0xFF5
  2126                           prodh	equ	0xFF4
  2127                           prodl	equ	0xFF3
  2128                           intcon	equ	0xFF2
  2129                           intcon3	equ	0xFF0
  2130                           postinc0	equ	0xFEE
  2131                           wreg	equ	0xFE8
  2132                           indf2	equ	0xFDF
  2133                           postinc2	equ	0xFDE
  2134                           postdec2	equ	0xFDD
  2135                           fsr2h	equ	0xFDA
  2136                           fsr2l	equ	0xFD9
  2137                           status	equ	0xFD8
  2138                           
  2139 ;; *************** function _putch *****************
  2140 ;; Defined at:
  2141 ;;		line 30 in file "../lcd.c"
  2142 ;; Parameters:    Size  Location     Type
  2143 ;;  data            1    wreg     unsigned char 
  2144 ;; Auto vars:     Size  Location     Type
  2145 ;;  data            1   20[COMRAM] unsigned char 
  2146 ;; Return value:  Size  Location     Type
  2147 ;;                  1    wreg      void 
  2148 ;; Registers used:
  2149 ;;		wreg, status,2, status,0, cstack
  2150 ;; Tracked objects:
  2151 ;;		On entry : 0/0
  2152 ;;		On exit  : 0/0
  2153 ;;		Unchanged: 0/0
  2154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2155 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2156 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2157 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2158 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2159 ;;Total ram usage:        1 bytes
  2160 ;; Hardware stack levels used:    1
  2161 ;; Hardware stack levels required when called:    3
  2162 ;; This function calls:
  2163 ;;		_lcdNibble
  2164 ;; This function is called by:
  2165 ;;		_printf
  2166 ;; This function uses a non-reentrant model
  2167 ;;
  2168                           
  2169                           	psect	text2
  2170  000A34                     __ptext2:
  2171                           	opt stack 0
  2172  000A34                     _putch:
  2173                           	opt stack 26
  2174                           
  2175                           ;incstack = 0
  2176                           ;putch@data stored from wreg
  2177  000A34  6E15               	movwf	putch@data,c
  2178                           
  2179                           ;lcd.c: 31: LATDbits.LATD2 = 1;
  2180  000A36  848C               	bsf	3980,2,c	;volatile
  2181                           
  2182                           ;lcd.c: 32: lcdNibble(data);
  2183  000A38  5015               	movf	putch@data,w,c
  2184  000A3A  EC40  F004         	call	_lcdNibble
  2185  000A3E  0012               	return		;funcret
  2186  000A40                     __end_of_putch:
  2187                           	opt stack 0
  2188                           tblptru	equ	0xFF8
  2189                           tblptrh	equ	0xFF7
  2190                           tblptrl	equ	0xFF6
  2191                           tablat	equ	0xFF5
  2192                           prodh	equ	0xFF4
  2193                           prodl	equ	0xFF3
  2194                           intcon	equ	0xFF2
  2195                           intcon3	equ	0xFF0
  2196                           postinc0	equ	0xFEE
  2197                           wreg	equ	0xFE8
  2198                           indf2	equ	0xFDF
  2199                           postinc2	equ	0xFDE
  2200                           postdec2	equ	0xFDD
  2201                           fsr2h	equ	0xFDA
  2202                           fsr2l	equ	0xFD9
  2203                           status	equ	0xFD8
  2204                           
  2205 ;; *************** function _isdigit *****************
  2206 ;; Defined at:
  2207 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  2208 ;; Parameters:    Size  Location     Type
  2209 ;;  c               1    wreg     unsigned char 
  2210 ;; Auto vars:     Size  Location     Type
  2211 ;;  c               1   20[COMRAM] unsigned char 
  2212 ;; Return value:  Size  Location     Type
  2213 ;;		None               void
  2214 ;; Registers used:
  2215 ;;		wreg, status,2, status,0
  2216 ;; Tracked objects:
  2217 ;;		On entry : 0/0
  2218 ;;		On exit  : 0/0
  2219 ;;		Unchanged: 0/0
  2220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2221 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2222 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2223 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2224 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2225 ;;Total ram usage:        3 bytes
  2226 ;; Hardware stack levels used:    1
  2227 ;; Hardware stack levels required when called:    2
  2228 ;; This function calls:
  2229 ;;		Nothing
  2230 ;; This function is called by:
  2231 ;;		_printf
  2232 ;; This function uses a non-reentrant model
  2233 ;;
  2234                           
  2235                           	psect	text3
  2236  000A04                     __ptext3:
  2237                           	opt stack 0
  2238  000A04                     _isdigit:
  2239                           	opt stack 27
  2240                           
  2241                           ;incstack = 0
  2242                           ;isdigit@c stored from wreg
  2243  000A04  6E15               	movwf	isdigit@c,c
  2244  000A06  0E00               	movlw	0
  2245  000A08  6E14               	movwf	_isdigit$500,c
  2246  000A0A  0E3A               	movlw	58
  2247  000A0C  6015               	cpfslt	isdigit@c,c
  2248  000A0E  D005               	goto	l1407
  2249  000A10  0E2F               	movlw	47
  2250  000A12  6415               	cpfsgt	isdigit@c,c
  2251  000A14  D002               	goto	l1407
  2252  000A16  0E01               	movlw	1
  2253  000A18  6E14               	movwf	_isdigit$500,c
  2254  000A1A                     l1407:
  2255  000A1A  C014  F013         	movff	_isdigit$500,??_isdigit
  2256  000A1E  3013               	rrcf	??_isdigit,w,c
  2257  000A20  0012               	return	
  2258  000A22                     __end_of_isdigit:
  2259                           	opt stack 0
  2260                           tblptru	equ	0xFF8
  2261                           tblptrh	equ	0xFF7
  2262                           tblptrl	equ	0xFF6
  2263                           tablat	equ	0xFF5
  2264                           prodh	equ	0xFF4
  2265                           prodl	equ	0xFF3
  2266                           intcon	equ	0xFF2
  2267                           intcon3	equ	0xFF0
  2268                           postinc0	equ	0xFEE
  2269                           wreg	equ	0xFE8
  2270                           indf2	equ	0xFDF
  2271                           postinc2	equ	0xFDE
  2272                           postdec2	equ	0xFDD
  2273                           fsr2h	equ	0xFDA
  2274                           fsr2l	equ	0xFD9
  2275                           status	equ	0xFD8
  2276                           
  2277 ;; *************** function ___wmul *****************
  2278 ;; Defined at:
  2279 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  2280 ;; Parameters:    Size  Location     Type
  2281 ;;  multiplier      2   18[COMRAM] unsigned int 
  2282 ;;  multiplicand    2   20[COMRAM] unsigned int 
  2283 ;; Auto vars:     Size  Location     Type
  2284 ;;  product         2   22[COMRAM] unsigned int 
  2285 ;; Return value:  Size  Location     Type
  2286 ;;                  2   18[COMRAM] unsigned int 
  2287 ;; Registers used:
  2288 ;;		wreg, status,2, status,0, prodl, prodh
  2289 ;; Tracked objects:
  2290 ;;		On entry : 0/0
  2291 ;;		On exit  : 0/0
  2292 ;;		Unchanged: 0/0
  2293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2294 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2295 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2296 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2297 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2298 ;;Total ram usage:        6 bytes
  2299 ;; Hardware stack levels used:    1
  2300 ;; Hardware stack levels required when called:    2
  2301 ;; This function calls:
  2302 ;;		Nothing
  2303 ;; This function is called by:
  2304 ;;		_printf
  2305 ;; This function uses a non-reentrant model
  2306 ;;
  2307                           
  2308                           	psect	text4
  2309  0009B8                     __ptext4:
  2310                           	opt stack 0
  2311  0009B8                     ___wmul:
  2312                           	opt stack 27
  2313                           
  2314                           ;incstack = 0
  2315  0009B8  5013               	movf	___wmul@multiplier,w,c
  2316  0009BA  0215               	mulwf	___wmul@multiplicand,c
  2317  0009BC  CFF3 F017          	movff	prodl,___wmul@product
  2318  0009C0  CFF4 F018          	movff	prodh,___wmul@product+1
  2319  0009C4  5013               	movf	___wmul@multiplier,w,c
  2320  0009C6  0216               	mulwf	___wmul@multiplicand+1,c
  2321  0009C8  50F3               	movf	prodl,w,c
  2322  0009CA  2618               	addwf	___wmul@product+1,f,c
  2323  0009CC  5014               	movf	___wmul@multiplier+1,w,c
  2324  0009CE  0215               	mulwf	___wmul@multiplicand,c
  2325  0009D0  50F3               	movf	prodl,w,c
  2326  0009D2  2618               	addwf	___wmul@product+1,f,c
  2327  0009D4  C017  F013         	movff	___wmul@product,?___wmul
  2328  0009D8  C018  F014         	movff	___wmul@product+1,?___wmul+1
  2329  0009DC  0012               	return	
  2330  0009DE                     __end_of___wmul:
  2331                           	opt stack 0
  2332                           tblptru	equ	0xFF8
  2333                           tblptrh	equ	0xFF7
  2334                           tblptrl	equ	0xFF6
  2335                           tablat	equ	0xFF5
  2336                           prodh	equ	0xFF4
  2337                           prodl	equ	0xFF3
  2338                           intcon	equ	0xFF2
  2339                           intcon3	equ	0xFF0
  2340                           postinc0	equ	0xFEE
  2341                           wreg	equ	0xFE8
  2342                           indf2	equ	0xFDF
  2343                           postinc2	equ	0xFDE
  2344                           postdec2	equ	0xFDD
  2345                           fsr2h	equ	0xFDA
  2346                           fsr2l	equ	0xFD9
  2347                           status	equ	0xFD8
  2348                           
  2349 ;; *************** function ___lwmod *****************
  2350 ;; Defined at:
  2351 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  2352 ;; Parameters:    Size  Location     Type
  2353 ;;  dividend        2   25[COMRAM] unsigned int 
  2354 ;;  divisor         2   27[COMRAM] unsigned int 
  2355 ;; Auto vars:     Size  Location     Type
  2356 ;;  counter         1   29[COMRAM] unsigned char 
  2357 ;; Return value:  Size  Location     Type
  2358 ;;                  2   25[COMRAM] unsigned int 
  2359 ;; Registers used:
  2360 ;;		wreg, status,2, status,0
  2361 ;; Tracked objects:
  2362 ;;		On entry : 0/0
  2363 ;;		On exit  : 0/0
  2364 ;;		Unchanged: 0/0
  2365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2366 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2367 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2368 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2369 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2370 ;;Total ram usage:        5 bytes
  2371 ;; Hardware stack levels used:    1
  2372 ;; Hardware stack levels required when called:    2
  2373 ;; This function calls:
  2374 ;;		Nothing
  2375 ;; This function is called by:
  2376 ;;		_printf
  2377 ;; This function uses a non-reentrant model
  2378 ;;
  2379                           
  2380                           	psect	text5
  2381  000914                     __ptext5:
  2382                           	opt stack 0
  2383  000914                     ___lwmod:
  2384                           	opt stack 27
  2385                           
  2386                           ;incstack = 0
  2387  000914  501C               	movf	___lwmod@divisor,w,c
  2388  000916  101D               	iorwf	___lwmod@divisor+1,w,c
  2389  000918  B4D8               	btfsc	status,2,c
  2390  00091A  D018               	goto	l678
  2391  00091C  0E01               	movlw	1
  2392  00091E  6E1E               	movwf	___lwmod@counter,c
  2393  000920  D004               	goto	l1467
  2394  000922                     l1465:
  2395  000922  90D8               	bcf	status,0,c
  2396  000924  361C               	rlcf	___lwmod@divisor,f,c
  2397  000926  361D               	rlcf	___lwmod@divisor+1,f,c
  2398  000928  2A1E               	incf	___lwmod@counter,f,c
  2399  00092A                     l1467:
  2400  00092A  AE1D               	btfss	___lwmod@divisor+1,7,c
  2401  00092C  D7FA               	goto	l1465
  2402  00092E                     l1469:
  2403  00092E  501C               	movf	___lwmod@divisor,w,c
  2404  000930  5C1A               	subwf	___lwmod@dividend,w,c
  2405  000932  501D               	movf	___lwmod@divisor+1,w,c
  2406  000934  581B               	subwfb	___lwmod@dividend+1,w,c
  2407  000936  A0D8               	btfss	status,0,c
  2408  000938  D004               	goto	l1473
  2409  00093A  501C               	movf	___lwmod@divisor,w,c
  2410  00093C  5E1A               	subwf	___lwmod@dividend,f,c
  2411  00093E  501D               	movf	___lwmod@divisor+1,w,c
  2412  000940  5A1B               	subwfb	___lwmod@dividend+1,f,c
  2413  000942                     l1473:
  2414  000942  90D8               	bcf	status,0,c
  2415  000944  321D               	rrcf	___lwmod@divisor+1,f,c
  2416  000946  321C               	rrcf	___lwmod@divisor,f,c
  2417  000948  2E1E               	decfsz	___lwmod@counter,f,c
  2418  00094A  D7F1               	goto	l1469
  2419  00094C                     l678:
  2420  00094C  C01A  F01A         	movff	___lwmod@dividend,?___lwmod
  2421  000950  C01B  F01B         	movff	___lwmod@dividend+1,?___lwmod+1
  2422  000954  0012               	return		;funcret
  2423  000956                     __end_of___lwmod:
  2424                           	opt stack 0
  2425                           tblptru	equ	0xFF8
  2426                           tblptrh	equ	0xFF7
  2427                           tblptrl	equ	0xFF6
  2428                           tablat	equ	0xFF5
  2429                           prodh	equ	0xFF4
  2430                           prodl	equ	0xFF3
  2431                           intcon	equ	0xFF2
  2432                           intcon3	equ	0xFF0
  2433                           postinc0	equ	0xFEE
  2434                           wreg	equ	0xFE8
  2435                           indf2	equ	0xFDF
  2436                           postinc2	equ	0xFDE
  2437                           postdec2	equ	0xFDD
  2438                           fsr2h	equ	0xFDA
  2439                           fsr2l	equ	0xFD9
  2440                           status	equ	0xFD8
  2441                           
  2442 ;; *************** function ___lwdiv *****************
  2443 ;; Defined at:
  2444 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  2445 ;; Parameters:    Size  Location     Type
  2446 ;;  dividend        2   18[COMRAM] unsigned int 
  2447 ;;  divisor         2   20[COMRAM] unsigned int 
  2448 ;; Auto vars:     Size  Location     Type
  2449 ;;  quotient        2   22[COMRAM] unsigned int 
  2450 ;;  counter         1   24[COMRAM] unsigned char 
  2451 ;; Return value:  Size  Location     Type
  2452 ;;                  2   18[COMRAM] unsigned int 
  2453 ;; Registers used:
  2454 ;;		wreg, status,2, status,0
  2455 ;; Tracked objects:
  2456 ;;		On entry : 0/0
  2457 ;;		On exit  : 0/0
  2458 ;;		Unchanged: 0/0
  2459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2460 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2461 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2462 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2463 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2464 ;;Total ram usage:        7 bytes
  2465 ;; Hardware stack levels used:    1
  2466 ;; Hardware stack levels required when called:    2
  2467 ;; This function calls:
  2468 ;;		Nothing
  2469 ;; This function is called by:
  2470 ;;		_printf
  2471 ;; This function uses a non-reentrant model
  2472 ;;
  2473                           
  2474                           	psect	text6
  2475  00082E                     __ptext6:
  2476                           	opt stack 0
  2477  00082E                     ___lwdiv:
  2478                           	opt stack 27
  2479                           
  2480                           ;incstack = 0
  2481  00082E  0E00               	movlw	0
  2482  000830  6E18               	movwf	___lwdiv@quotient+1,c
  2483  000832  0E00               	movlw	0
  2484  000834  6E17               	movwf	___lwdiv@quotient,c
  2485  000836  5015               	movf	___lwdiv@divisor,w,c
  2486  000838  1016               	iorwf	___lwdiv@divisor+1,w,c
  2487  00083A  B4D8               	btfsc	status,2,c
  2488  00083C  D01C               	goto	l668
  2489  00083E  0E01               	movlw	1
  2490  000840  6E19               	movwf	___lwdiv@counter,c
  2491  000842  D004               	goto	l1447
  2492  000844                     l1445:
  2493  000844  90D8               	bcf	status,0,c
  2494  000846  3615               	rlcf	___lwdiv@divisor,f,c
  2495  000848  3616               	rlcf	___lwdiv@divisor+1,f,c
  2496  00084A  2A19               	incf	___lwdiv@counter,f,c
  2497  00084C                     l1447:
  2498  00084C  AE16               	btfss	___lwdiv@divisor+1,7,c
  2499  00084E  D7FA               	goto	l1445
  2500  000850                     l1449:
  2501  000850  90D8               	bcf	status,0,c
  2502  000852  3617               	rlcf	___lwdiv@quotient,f,c
  2503  000854  3618               	rlcf	___lwdiv@quotient+1,f,c
  2504  000856  5015               	movf	___lwdiv@divisor,w,c
  2505  000858  5C13               	subwf	___lwdiv@dividend,w,c
  2506  00085A  5016               	movf	___lwdiv@divisor+1,w,c
  2507  00085C  5814               	subwfb	___lwdiv@dividend+1,w,c
  2508  00085E  A0D8               	btfss	status,0,c
  2509  000860  D005               	goto	l1457
  2510  000862  5015               	movf	___lwdiv@divisor,w,c
  2511  000864  5E13               	subwf	___lwdiv@dividend,f,c
  2512  000866  5016               	movf	___lwdiv@divisor+1,w,c
  2513  000868  5A14               	subwfb	___lwdiv@dividend+1,f,c
  2514  00086A  8017               	bsf	___lwdiv@quotient,0,c
  2515  00086C                     l1457:
  2516  00086C  90D8               	bcf	status,0,c
  2517  00086E  3216               	rrcf	___lwdiv@divisor+1,f,c
  2518  000870  3215               	rrcf	___lwdiv@divisor,f,c
  2519  000872  2E19               	decfsz	___lwdiv@counter,f,c
  2520  000874  D7ED               	goto	l1449
  2521  000876                     l668:
  2522  000876  C017  F013         	movff	___lwdiv@quotient,?___lwdiv
  2523  00087A  C018  F014         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2524  00087E  0012               	return		;funcret
  2525  000880                     __end_of___lwdiv:
  2526                           	opt stack 0
  2527                           tblptru	equ	0xFF8
  2528                           tblptrh	equ	0xFF7
  2529                           tblptrl	equ	0xFF6
  2530                           tablat	equ	0xFF5
  2531                           prodh	equ	0xFF4
  2532                           prodl	equ	0xFF3
  2533                           intcon	equ	0xFF2
  2534                           intcon3	equ	0xFF0
  2535                           postinc0	equ	0xFEE
  2536                           wreg	equ	0xFE8
  2537                           indf2	equ	0xFDF
  2538                           postinc2	equ	0xFDE
  2539                           postdec2	equ	0xFDD
  2540                           fsr2h	equ	0xFDA
  2541                           fsr2l	equ	0xFD9
  2542                           status	equ	0xFD8
  2543                           
  2544 ;; *************** function _initLCD *****************
  2545 ;; Defined at:
  2546 ;;		line 14 in file "../lcd.c"
  2547 ;; Parameters:    Size  Location     Type
  2548 ;;		None
  2549 ;; Auto vars:     Size  Location     Type
  2550 ;;		None
  2551 ;; Return value:  Size  Location     Type
  2552 ;;                  1    wreg      void 
  2553 ;; Registers used:
  2554 ;;		wreg, status,2, status,0, cstack
  2555 ;; Tracked objects:
  2556 ;;		On entry : 0/0
  2557 ;;		On exit  : 0/0
  2558 ;;		Unchanged: 0/0
  2559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2560 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2561 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2562 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2563 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2564 ;;Total ram usage:        1 bytes
  2565 ;; Hardware stack levels used:    1
  2566 ;; Hardware stack levels required when called:    4
  2567 ;; This function calls:
  2568 ;;		_lcdInst
  2569 ;; This function is called by:
  2570 ;;		_main
  2571 ;; This function uses a non-reentrant model
  2572 ;;
  2573                           
  2574                           	psect	text7
  2575  0008CE                     __ptext7:
  2576                           	opt stack 0
  2577  0008CE                     _initLCD:
  2578                           	opt stack 26
  2579                           
  2580                           ;lcd.c: 15: _delay((unsigned long)((15)*(10000000/4000.0)));
  2581                           
  2582                           ;incstack = 0
  2583  0008CE  0E31               	movlw	49
  2584  0008D0  6E16               	movwf	??_initLCD& (0+255),c
  2585  0008D2  0EB2               	movlw	178
  2586  0008D4                     u1397:
  2587  0008D4  2EE8               	decfsz	wreg,f,c
  2588  0008D6  D7FE               	bra	u1397
  2589  0008D8  2E16               	decfsz	??_initLCD& (0+255),f,c
  2590  0008DA  D7FC               	bra	u1397
  2591  0008DC  D000               	nop2	
  2592                           
  2593                           ;lcd.c: 16: lcdInst(0b00110011);
  2594  0008DE  0E33               	movlw	51
  2595  0008E0  EC20  F005         	call	_lcdInst
  2596                           
  2597                           ;lcd.c: 17: lcdInst(0b00110010);
  2598  0008E4  0E32               	movlw	50
  2599  0008E6  EC20  F005         	call	_lcdInst
  2600                           
  2601                           ;lcd.c: 18: lcdInst(0b00101000);
  2602  0008EA  0E28               	movlw	40
  2603  0008EC  EC20  F005         	call	_lcdInst
  2604                           
  2605                           ;lcd.c: 19: lcdInst(0b00001111);
  2606  0008F0  0E0F               	movlw	15
  2607  0008F2  EC20  F005         	call	_lcdInst
  2608                           
  2609                           ;lcd.c: 20: lcdInst(0b00000110);
  2610  0008F6  0E06               	movlw	6
  2611  0008F8  EC20  F005         	call	_lcdInst
  2612                           
  2613                           ;lcd.c: 21: lcdInst(0b00000001);
  2614  0008FC  0E01               	movlw	1
  2615  0008FE  EC20  F005         	call	_lcdInst
  2616                           
  2617                           ;lcd.c: 22: _delay((unsigned long)((15)*(10000000/4000.0)));
  2618  000902  0E31               	movlw	49
  2619  000904  6E16               	movwf	??_initLCD& (0+255),c
  2620  000906  0EB2               	movlw	178
  2621  000908                     u1407:
  2622  000908  2EE8               	decfsz	wreg,f,c
  2623  00090A  D7FE               	bra	u1407
  2624  00090C  2E16               	decfsz	??_initLCD& (0+255),f,c
  2625  00090E  D7FC               	bra	u1407
  2626  000910  D000               	nop2	
  2627  000912  0012               	return		;funcret
  2628  000914                     __end_of_initLCD:
  2629                           	opt stack 0
  2630                           tblptru	equ	0xFF8
  2631                           tblptrh	equ	0xFF7
  2632                           tblptrl	equ	0xFF6
  2633                           tablat	equ	0xFF5
  2634                           prodh	equ	0xFF4
  2635                           prodl	equ	0xFF3
  2636                           intcon	equ	0xFF2
  2637                           intcon3	equ	0xFF0
  2638                           postinc0	equ	0xFEE
  2639                           wreg	equ	0xFE8
  2640                           indf2	equ	0xFDF
  2641                           postinc2	equ	0xFDE
  2642                           postdec2	equ	0xFDD
  2643                           fsr2h	equ	0xFDA
  2644                           fsr2l	equ	0xFD9
  2645                           status	equ	0xFD8
  2646                           
  2647 ;; *************** function _lcdInst *****************
  2648 ;; Defined at:
  2649 ;;		line 25 in file "../lcd.c"
  2650 ;; Parameters:    Size  Location     Type
  2651 ;;  data            1    wreg     unsigned char 
  2652 ;; Auto vars:     Size  Location     Type
  2653 ;;  data            1   20[COMRAM] unsigned char 
  2654 ;; Return value:  Size  Location     Type
  2655 ;;                  1    wreg      void 
  2656 ;; Registers used:
  2657 ;;		wreg, status,2, status,0, cstack
  2658 ;; Tracked objects:
  2659 ;;		On entry : 0/0
  2660 ;;		On exit  : 0/0
  2661 ;;		Unchanged: 0/0
  2662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2663 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2664 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2665 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2666 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2667 ;;Total ram usage:        1 bytes
  2668 ;; Hardware stack levels used:    1
  2669 ;; Hardware stack levels required when called:    3
  2670 ;; This function calls:
  2671 ;;		_lcdNibble
  2672 ;; This function is called by:
  2673 ;;		_initLCD
  2674 ;;		_main
  2675 ;; This function uses a non-reentrant model
  2676 ;;
  2677                           
  2678                           	psect	text8
  2679  000A40                     __ptext8:
  2680                           	opt stack 0
  2681  000A40                     _lcdInst:
  2682                           	opt stack 27
  2683                           
  2684                           ;incstack = 0
  2685                           ;lcdInst@data stored from wreg
  2686  000A40  6E15               	movwf	lcdInst@data,c
  2687                           
  2688                           ;lcd.c: 26: LATDbits.LATD2 = 0;
  2689  000A42  948C               	bcf	3980,2,c	;volatile
  2690                           
  2691                           ;lcd.c: 27: lcdNibble(data);
  2692  000A44  5015               	movf	lcdInst@data,w,c
  2693  000A46  EC40  F004         	call	_lcdNibble
  2694  000A4A  0012               	return		;funcret
  2695  000A4C                     __end_of_lcdInst:
  2696                           	opt stack 0
  2697                           tblptru	equ	0xFF8
  2698                           tblptrh	equ	0xFF7
  2699                           tblptrl	equ	0xFF6
  2700                           tablat	equ	0xFF5
  2701                           prodh	equ	0xFF4
  2702                           prodl	equ	0xFF3
  2703                           intcon	equ	0xFF2
  2704                           intcon3	equ	0xFF0
  2705                           postinc0	equ	0xFEE
  2706                           wreg	equ	0xFE8
  2707                           indf2	equ	0xFDF
  2708                           postinc2	equ	0xFDE
  2709                           postdec2	equ	0xFDD
  2710                           fsr2h	equ	0xFDA
  2711                           fsr2l	equ	0xFD9
  2712                           status	equ	0xFD8
  2713                           
  2714 ;; *************** function _lcdNibble *****************
  2715 ;; Defined at:
  2716 ;;		line 35 in file "../lcd.c"
  2717 ;; Parameters:    Size  Location     Type
  2718 ;;  data            1    wreg     unsigned char 
  2719 ;; Auto vars:     Size  Location     Type
  2720 ;;  data            1   19[COMRAM] unsigned char 
  2721 ;;  temp            1   18[COMRAM] unsigned char 
  2722 ;; Return value:  Size  Location     Type
  2723 ;;                  1    wreg      void 
  2724 ;; Registers used:
  2725 ;;		wreg, status,2, status,0
  2726 ;; Tracked objects:
  2727 ;;		On entry : 0/0
  2728 ;;		On exit  : 0/0
  2729 ;;		Unchanged: 0/0
  2730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2731 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2732 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2733 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2734 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2735 ;;Total ram usage:        2 bytes
  2736 ;; Hardware stack levels used:    1
  2737 ;; Hardware stack levels required when called:    2
  2738 ;; This function calls:
  2739 ;;		Nothing
  2740 ;; This function is called by:
  2741 ;;		_lcdInst
  2742 ;;		_putch
  2743 ;; This function uses a non-reentrant model
  2744 ;;
  2745                           
  2746                           	psect	text9
  2747  000880                     __ptext9:
  2748                           	opt stack 0
  2749  000880                     _lcdNibble:
  2750                           	opt stack 26
  2751                           
  2752                           ;incstack = 0
  2753                           ;lcdNibble@data stored from wreg
  2754  000880  6E14               	movwf	lcdNibble@data,c
  2755                           
  2756                           ;lcd.c: 37: char temp = data & 0xF0;
  2757  000882  5014               	movf	lcdNibble@data,w,c
  2758  000884  0BF0               	andlw	240
  2759  000886  6E13               	movwf	lcdNibble@temp,c
  2760                           
  2761                           ;lcd.c: 38: LATD = LATD & 0x0F;
  2762  000888  508C               	movf	3980,w,c	;volatile
  2763  00088A  0B0F               	andlw	15
  2764  00088C  6E8C               	movwf	3980,c	;volatile
  2765                           
  2766                           ;lcd.c: 39: LATD = temp | LATD;
  2767  00088E  5013               	movf	lcdNibble@temp,w,c
  2768  000890  108C               	iorwf	3980,w,c	;volatile
  2769  000892  6E8C               	movwf	3980,c	;volatile
  2770                           
  2771                           ;lcd.c: 41: LATDbits.LATD3 = 0;
  2772  000894  968C               	bcf	3980,3,c	;volatile
  2773                           
  2774                           ;lcd.c: 42: _delay((unsigned long)((30)*(10000000/4000000.0)));
  2775  000896  0E19               	movlw	25
  2776  000898                     u1417:
  2777  000898  2EE8               	decfsz	wreg,f,c
  2778  00089A  D7FE               	bra	u1417
  2779                           
  2780                           ;lcd.c: 43: LATDbits.LATD3 = 1;
  2781  00089C  868C               	bsf	3980,3,c	;volatile
  2782                           
  2783                           ;lcd.c: 44: _delay((unsigned long)((30)*(10000000/4000000.0)));
  2784  00089E  0E19               	movlw	25
  2785  0008A0                     u1427:
  2786  0008A0  2EE8               	decfsz	wreg,f,c
  2787  0008A2  D7FE               	bra	u1427
  2788                           
  2789                           ;lcd.c: 46: data = data << 4;
  2790  0008A4  3814               	swapf	lcdNibble@data,w,c
  2791  0008A6  0BF0               	andlw	240
  2792  0008A8  6E14               	movwf	lcdNibble@data,c
  2793                           
  2794                           ;lcd.c: 48: temp = data & 0xF0;
  2795  0008AA  5014               	movf	lcdNibble@data,w,c
  2796  0008AC  0BF0               	andlw	240
  2797  0008AE  6E13               	movwf	lcdNibble@temp,c
  2798                           
  2799                           ;lcd.c: 49: LATD = LATD & 0x0F;
  2800  0008B0  508C               	movf	3980,w,c	;volatile
  2801  0008B2  0B0F               	andlw	15
  2802  0008B4  6E8C               	movwf	3980,c	;volatile
  2803                           
  2804                           ;lcd.c: 50: LATD = temp | LATD;
  2805  0008B6  5013               	movf	lcdNibble@temp,w,c
  2806  0008B8  108C               	iorwf	3980,w,c	;volatile
  2807  0008BA  6E8C               	movwf	3980,c	;volatile
  2808                           
  2809                           ;lcd.c: 52: LATDbits.LATD3 = 0;
  2810  0008BC  968C               	bcf	3980,3,c	;volatile
  2811                           
  2812                           ;lcd.c: 53: _delay((unsigned long)((30)*(10000000/4000000.0)));
  2813  0008BE  0E19               	movlw	25
  2814  0008C0                     u1437:
  2815  0008C0  2EE8               	decfsz	wreg,f,c
  2816  0008C2  D7FE               	bra	u1437
  2817                           
  2818                           ;lcd.c: 54: LATDbits.LATD3 = 1;
  2819  0008C4  868C               	bsf	3980,3,c	;volatile
  2820                           
  2821                           ;lcd.c: 55: _delay((unsigned long)((30)*(10000000/4000000.0)));
  2822  0008C6  0E19               	movlw	25
  2823  0008C8                     u1447:
  2824  0008C8  2EE8               	decfsz	wreg,f,c
  2825  0008CA  D7FE               	bra	u1447
  2826  0008CC  0012               	return		;funcret
  2827  0008CE                     __end_of_lcdNibble:
  2828                           	opt stack 0
  2829                           tblptru	equ	0xFF8
  2830                           tblptrh	equ	0xFF7
  2831                           tblptrl	equ	0xFF6
  2832                           tablat	equ	0xFF5
  2833                           prodh	equ	0xFF4
  2834                           prodl	equ	0xFF3
  2835                           intcon	equ	0xFF2
  2836                           intcon3	equ	0xFF0
  2837                           postinc0	equ	0xFEE
  2838                           wreg	equ	0xFE8
  2839                           indf2	equ	0xFDF
  2840                           postinc2	equ	0xFDE
  2841                           postdec2	equ	0xFDD
  2842                           fsr2h	equ	0xFDA
  2843                           fsr2l	equ	0xFD9
  2844                           status	equ	0xFD8
  2845                           
  2846 ;; *************** function _I2C_Master_Write *****************
  2847 ;; Defined at:
  2848 ;;		line 47 in file "../I2C.c"
  2849 ;; Parameters:    Size  Location     Type
  2850 ;;  d               2   19[COMRAM] unsigned int 
  2851 ;; Auto vars:     Size  Location     Type
  2852 ;;		None
  2853 ;; Return value:  Size  Location     Type
  2854 ;;                  1    wreg      void 
  2855 ;; Registers used:
  2856 ;;		wreg, status,2, status,0, cstack
  2857 ;; Tracked objects:
  2858 ;;		On entry : 0/0
  2859 ;;		On exit  : 0/0
  2860 ;;		Unchanged: 0/0
  2861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2862 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2863 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2864 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2865 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2866 ;;Total ram usage:        2 bytes
  2867 ;; Hardware stack levels used:    1
  2868 ;; Hardware stack levels required when called:    3
  2869 ;; This function calls:
  2870 ;;		_I2C_Master_Wait
  2871 ;; This function is called by:
  2872 ;;		_main
  2873 ;; This function uses a non-reentrant model
  2874 ;;
  2875                           
  2876                           	psect	text10
  2877  000A4C                     __ptext10:
  2878                           	opt stack 0
  2879  000A4C                     _I2C_Master_Write:
  2880                           	opt stack 27
  2881                           
  2882                           ;I2C.c: 49: I2C_Master_Wait();
  2883                           
  2884                           ;incstack = 0
  2885  000A4C  EC11  F005         	call	_I2C_Master_Wait	;wreg free
  2886                           
  2887                           ;I2C.c: 50: SSPBUF = d;
  2888  000A50  C014  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  2889  000A54  0012               	return		;funcret
  2890  000A56                     __end_of_I2C_Master_Write:
  2891                           	opt stack 0
  2892                           tblptru	equ	0xFF8
  2893                           tblptrh	equ	0xFF7
  2894                           tblptrl	equ	0xFF6
  2895                           tablat	equ	0xFF5
  2896                           prodh	equ	0xFF4
  2897                           prodl	equ	0xFF3
  2898                           intcon	equ	0xFF2
  2899                           intcon3	equ	0xFF0
  2900                           postinc0	equ	0xFEE
  2901                           wreg	equ	0xFE8
  2902                           indf2	equ	0xFDF
  2903                           postinc2	equ	0xFDE
  2904                           postdec2	equ	0xFDD
  2905                           fsr2h	equ	0xFDA
  2906                           fsr2l	equ	0xFD9
  2907                           status	equ	0xFD8
  2908                           
  2909 ;; *************** function _I2C_Master_Stop *****************
  2910 ;; Defined at:
  2911 ;;		line 41 in file "../I2C.c"
  2912 ;; Parameters:    Size  Location     Type
  2913 ;;		None
  2914 ;; Auto vars:     Size  Location     Type
  2915 ;;		None
  2916 ;; Return value:  Size  Location     Type
  2917 ;;                  1    wreg      void 
  2918 ;; Registers used:
  2919 ;;		wreg, status,2, status,0, cstack
  2920 ;; Tracked objects:
  2921 ;;		On entry : 0/0
  2922 ;;		On exit  : 0/0
  2923 ;;		Unchanged: 0/0
  2924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2925 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2926 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2927 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2928 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2929 ;;Total ram usage:        0 bytes
  2930 ;; Hardware stack levels used:    1
  2931 ;; Hardware stack levels required when called:    3
  2932 ;; This function calls:
  2933 ;;		_I2C_Master_Wait
  2934 ;; This function is called by:
  2935 ;;		_main
  2936 ;; This function uses a non-reentrant model
  2937 ;;
  2938                           
  2939                           	psect	text11
  2940  000A56                     __ptext11:
  2941                           	opt stack 0
  2942  000A56                     _I2C_Master_Stop:
  2943                           	opt stack 27
  2944                           
  2945                           ;I2C.c: 43: I2C_Master_Wait();
  2946                           
  2947                           ;incstack = 0
  2948  000A56  EC11  F005         	call	_I2C_Master_Wait	;wreg free
  2949                           
  2950                           ;I2C.c: 44: PEN = 1;
  2951  000A5A  84C5               	bsf	4037,2,c	;volatile
  2952  000A5C  0012               	return		;funcret
  2953  000A5E                     __end_of_I2C_Master_Stop:
  2954                           	opt stack 0
  2955                           tblptru	equ	0xFF8
  2956                           tblptrh	equ	0xFF7
  2957                           tblptrl	equ	0xFF6
  2958                           tablat	equ	0xFF5
  2959                           prodh	equ	0xFF4
  2960                           prodl	equ	0xFF3
  2961                           intcon	equ	0xFF2
  2962                           intcon3	equ	0xFF0
  2963                           postinc0	equ	0xFEE
  2964                           wreg	equ	0xFE8
  2965                           indf2	equ	0xFDF
  2966                           postinc2	equ	0xFDE
  2967                           postdec2	equ	0xFDD
  2968                           fsr2h	equ	0xFDA
  2969                           fsr2l	equ	0xFD9
  2970                           status	equ	0xFD8
  2971                           
  2972 ;; *************** function _I2C_Master_Start *****************
  2973 ;; Defined at:
  2974 ;;		line 29 in file "../I2C.c"
  2975 ;; Parameters:    Size  Location     Type
  2976 ;;		None
  2977 ;; Auto vars:     Size  Location     Type
  2978 ;;		None
  2979 ;; Return value:  Size  Location     Type
  2980 ;;                  1    wreg      void 
  2981 ;; Registers used:
  2982 ;;		wreg, status,2, status,0, cstack
  2983 ;; Tracked objects:
  2984 ;;		On entry : 0/0
  2985 ;;		On exit  : 0/0
  2986 ;;		Unchanged: 0/0
  2987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2988 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2989 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2990 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2991 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2992 ;;Total ram usage:        0 bytes
  2993 ;; Hardware stack levels used:    1
  2994 ;; Hardware stack levels required when called:    3
  2995 ;; This function calls:
  2996 ;;		_I2C_Master_Wait
  2997 ;; This function is called by:
  2998 ;;		_main
  2999 ;; This function uses a non-reentrant model
  3000 ;;
  3001                           
  3002                           	psect	text12
  3003  000A5E                     __ptext12:
  3004                           	opt stack 0
  3005  000A5E                     _I2C_Master_Start:
  3006                           	opt stack 27
  3007                           
  3008                           ;I2C.c: 31: I2C_Master_Wait();
  3009                           
  3010                           ;incstack = 0
  3011  000A5E  EC11  F005         	call	_I2C_Master_Wait	;wreg free
  3012                           
  3013                           ;I2C.c: 32: SEN = 1;
  3014  000A62  80C5               	bsf	4037,0,c	;volatile
  3015  000A64  0012               	return		;funcret
  3016  000A66                     __end_of_I2C_Master_Start:
  3017                           	opt stack 0
  3018                           tblptru	equ	0xFF8
  3019                           tblptrh	equ	0xFF7
  3020                           tblptrl	equ	0xFF6
  3021                           tablat	equ	0xFF5
  3022                           prodh	equ	0xFF4
  3023                           prodl	equ	0xFF3
  3024                           intcon	equ	0xFF2
  3025                           intcon3	equ	0xFF0
  3026                           postinc0	equ	0xFEE
  3027                           wreg	equ	0xFE8
  3028                           indf2	equ	0xFDF
  3029                           postinc2	equ	0xFDE
  3030                           postdec2	equ	0xFDD
  3031                           fsr2h	equ	0xFDA
  3032                           fsr2l	equ	0xFD9
  3033                           status	equ	0xFD8
  3034                           
  3035 ;; *************** function _I2C_Master_Read *****************
  3036 ;; Defined at:
  3037 ;;		line 53 in file "../I2C.c"
  3038 ;; Parameters:    Size  Location     Type
  3039 ;;  a               1    wreg     unsigned char 
  3040 ;; Auto vars:     Size  Location     Type
  3041 ;;  a               1   19[COMRAM] unsigned char 
  3042 ;;  temp            1   20[COMRAM] unsigned char 
  3043 ;; Return value:  Size  Location     Type
  3044 ;;                  1    wreg      unsigned char 
  3045 ;; Registers used:
  3046 ;;		wreg, status,2, status,0, cstack
  3047 ;; Tracked objects:
  3048 ;;		On entry : 0/0
  3049 ;;		On exit  : 0/0
  3050 ;;		Unchanged: 0/0
  3051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3052 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3053 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3054 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3055 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3056 ;;Total ram usage:        2 bytes
  3057 ;; Hardware stack levels used:    1
  3058 ;; Hardware stack levels required when called:    3
  3059 ;; This function calls:
  3060 ;;		_I2C_Master_Wait
  3061 ;; This function is called by:
  3062 ;;		_main
  3063 ;; This function uses a non-reentrant model
  3064 ;;
  3065                           
  3066                           	psect	text13
  3067  0009DE                     __ptext13:
  3068                           	opt stack 0
  3069  0009DE                     _I2C_Master_Read:
  3070                           	opt stack 27
  3071                           
  3072                           ;incstack = 0
  3073                           ;I2C_Master_Read@a stored from wreg
  3074  0009DE  6E14               	movwf	I2C_Master_Read@a,c
  3075                           
  3076                           ;I2C.c: 55: unsigned char temp;
  3077                           ;I2C.c: 56: I2C_Master_Wait();
  3078  0009E0  EC11  F005         	call	_I2C_Master_Wait	;wreg free
  3079                           
  3080                           ;I2C.c: 57: RCEN = 1;
  3081  0009E4  86C5               	bsf	4037,3,c	;volatile
  3082                           
  3083                           ;I2C.c: 58: I2C_Master_Wait();
  3084  0009E6  EC11  F005         	call	_I2C_Master_Wait	;wreg free
  3085                           
  3086                           ;I2C.c: 59: temp = SSPBUF;
  3087  0009EA  CFC9 F015          	movff	4041,I2C_Master_Read@temp	;volatile
  3088                           
  3089                           ;I2C.c: 60: I2C_Master_Wait();
  3090  0009EE  EC11  F005         	call	_I2C_Master_Wait	;wreg free
  3091                           
  3092                           ;I2C.c: 61: ACKDT = (a)?0:1;
  3093  0009F2  5014               	movf	I2C_Master_Read@a,w,c
  3094  0009F4  A4D8               	btfss	status,2,c
  3095  0009F6  D002               	goto	u150
  3096  0009F8  8AC5               	bsf	4037,5,c	;volatile
  3097  0009FA  D001               	goto	l1015
  3098  0009FC                     u150:
  3099  0009FC  9AC5               	bcf	4037,5,c	;volatile
  3100  0009FE                     l1015:
  3101                           
  3102                           ;I2C.c: 62: ACKEN = 1;
  3103  0009FE  88C5               	bsf	4037,4,c	;volatile
  3104                           
  3105                           ;I2C.c: 63: return temp;
  3106  000A00  5015               	movf	I2C_Master_Read@temp,w,c
  3107  000A02  0012               	return	
  3108  000A04                     __end_of_I2C_Master_Read:
  3109                           	opt stack 0
  3110                           tblptru	equ	0xFF8
  3111                           tblptrh	equ	0xFF7
  3112                           tblptrl	equ	0xFF6
  3113                           tablat	equ	0xFF5
  3114                           prodh	equ	0xFF4
  3115                           prodl	equ	0xFF3
  3116                           intcon	equ	0xFF2
  3117                           intcon3	equ	0xFF0
  3118                           postinc0	equ	0xFEE
  3119                           wreg	equ	0xFE8
  3120                           indf2	equ	0xFDF
  3121                           postinc2	equ	0xFDE
  3122                           postdec2	equ	0xFDD
  3123                           fsr2h	equ	0xFDA
  3124                           fsr2l	equ	0xFD9
  3125                           status	equ	0xFD8
  3126                           
  3127 ;; *************** function _I2C_Master_Wait *****************
  3128 ;; Defined at:
  3129 ;;		line 24 in file "../I2C.c"
  3130 ;; Parameters:    Size  Location     Type
  3131 ;;		None
  3132 ;; Auto vars:     Size  Location     Type
  3133 ;;		None
  3134 ;; Return value:  Size  Location     Type
  3135 ;;                  1    wreg      void 
  3136 ;; Registers used:
  3137 ;;		wreg, status,2, status,0
  3138 ;; Tracked objects:
  3139 ;;		On entry : 0/0
  3140 ;;		On exit  : 0/0
  3141 ;;		Unchanged: 0/0
  3142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3143 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3144 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3145 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3146 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3147 ;;Total ram usage:        1 bytes
  3148 ;; Hardware stack levels used:    1
  3149 ;; Hardware stack levels required when called:    2
  3150 ;; This function calls:
  3151 ;;		Nothing
  3152 ;; This function is called by:
  3153 ;;		_I2C_Master_Start
  3154 ;;		_I2C_Master_Stop
  3155 ;;		_I2C_Master_Write
  3156 ;;		_I2C_Master_Read
  3157 ;;		_I2C_Master_RepeatedStart
  3158 ;; This function uses a non-reentrant model
  3159 ;;
  3160                           
  3161                           	psect	text14
  3162  000A22                     __ptext14:
  3163                           	opt stack 0
  3164  000A22                     _I2C_Master_Wait:
  3165                           	opt stack 27
  3166  000A22                     l34:
  3167  000A22  B4C7               	btfsc	4039,2,c	;volatile
  3168  000A24  D7FE               	goto	l34
  3169  000A26  CFC5 F013          	movff	4037,??_I2C_Master_Wait	;volatile
  3170  000A2A  0E1F               	movlw	31
  3171  000A2C  1613               	andwf	??_I2C_Master_Wait,f,c
  3172  000A2E  B4D8               	btfsc	status,2,c
  3173  000A30  0012               	return	
  3174  000A32  D7F7               	goto	l34
  3175  000A34                     __end_of_I2C_Master_Wait:
  3176                           	opt stack 0
  3177                           tblptru	equ	0xFF8
  3178                           tblptrh	equ	0xFF7
  3179                           tblptrl	equ	0xFF6
  3180                           tablat	equ	0xFF5
  3181                           prodh	equ	0xFF4
  3182                           prodl	equ	0xFF3
  3183                           intcon	equ	0xFF2
  3184                           intcon3	equ	0xFF0
  3185                           postinc0	equ	0xFEE
  3186                           wreg	equ	0xFE8
  3187                           indf2	equ	0xFDF
  3188                           postinc2	equ	0xFDE
  3189                           postdec2	equ	0xFDD
  3190                           fsr2h	equ	0xFDA
  3191                           fsr2l	equ	0xFD9
  3192                           status	equ	0xFD8
  3193                           
  3194 ;; *************** function _I2C_Master_Init *****************
  3195 ;; Defined at:
  3196 ;;		line 13 in file "../I2C.c"
  3197 ;; Parameters:    Size  Location     Type
  3198 ;;  c               4   31[COMRAM] const unsigned long 
  3199 ;; Auto vars:     Size  Location     Type
  3200 ;;		None
  3201 ;; Return value:  Size  Location     Type
  3202 ;;                  1    wreg      void 
  3203 ;; Registers used:
  3204 ;;		wreg, status,2, status,0, cstack
  3205 ;; Tracked objects:
  3206 ;;		On entry : 0/0
  3207 ;;		On exit  : 0/0
  3208 ;;		Unchanged: 0/0
  3209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3210 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3211 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3212 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3213 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3214 ;;Total ram usage:        8 bytes
  3215 ;; Hardware stack levels used:    1
  3216 ;; Hardware stack levels required when called:    3
  3217 ;; This function calls:
  3218 ;;		___lldiv
  3219 ;; This function is called by:
  3220 ;;		_main
  3221 ;; This function uses a non-reentrant model
  3222 ;;
  3223                           
  3224                           	psect	text15
  3225  0007D4                     __ptext15:
  3226                           	opt stack 0
  3227  0007D4                     _I2C_Master_Init:
  3228                           	opt stack 27
  3229                           
  3230                           ;I2C.c: 16: SSPSTAT = 0b00000000;
  3231                           
  3232                           ;incstack = 0
  3233  0007D4  0E00               	movlw	0
  3234  0007D6  6EC7               	movwf	4039,c	;volatile
  3235                           
  3236                           ;I2C.c: 17: SSPCON1 = 0b00101000;
  3237  0007D8  0E28               	movlw	40
  3238  0007DA  6EC6               	movwf	4038,c	;volatile
  3239                           
  3240                           ;I2C.c: 18: SSPCON2 = 0b00000000;
  3241  0007DC  0E00               	movlw	0
  3242  0007DE  6EC5               	movwf	4037,c	;volatile
  3243                           
  3244                           ;I2C.c: 19: SSPADD = (10000000/(4*c))-1;
  3245  0007E0  0E80               	movlw	128
  3246  0007E2  6E13               	movwf	___lldiv@dividend,c
  3247  0007E4  0E96               	movlw	150
  3248  0007E6  6E14               	movwf	___lldiv@dividend+1,c
  3249  0007E8  0E98               	movlw	152
  3250  0007EA  6E15               	movwf	___lldiv@dividend+2,c
  3251  0007EC  0E00               	movlw	0
  3252  0007EE  6E16               	movwf	___lldiv@dividend+3,c
  3253  0007F0  C020  F024         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  3254  0007F4  C021  F025         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  3255  0007F8  C022  F026         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  3256  0007FC  C023  F027         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  3257  000800  0E02               	movlw	2
  3258  000802                     u825:
  3259  000802  90D8               	bcf	status,0,c
  3260  000804  3624               	rlcf	??_I2C_Master_Init,f,c
  3261  000806  3625               	rlcf	??_I2C_Master_Init+1,f,c
  3262  000808  3626               	rlcf	??_I2C_Master_Init+2,f,c
  3263  00080A  3627               	rlcf	??_I2C_Master_Init+3,f,c
  3264  00080C  2EE8               	decfsz	wreg,f,c
  3265  00080E  D7F9               	goto	u825
  3266  000810  C024  F017         	movff	??_I2C_Master_Init,___lldiv@divisor
  3267  000814  C025  F018         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  3268  000818  C026  F019         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  3269  00081C  C027  F01A         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  3270  000820  ECA9  F003         	call	___lldiv	;wreg free
  3271  000824  0413               	decf	?___lldiv,w,c
  3272  000826  6EC8               	movwf	4040,c	;volatile
  3273                           
  3274                           ;I2C.c: 20: TRISC3 = 1;
  3275  000828  8694               	bsf	3988,3,c	;volatile
  3276                           
  3277                           ;I2C.c: 21: TRISC4 = 1;
  3278  00082A  8894               	bsf	3988,4,c	;volatile
  3279  00082C  0012               	return		;funcret
  3280  00082E                     __end_of_I2C_Master_Init:
  3281                           	opt stack 0
  3282                           tblptru	equ	0xFF8
  3283                           tblptrh	equ	0xFF7
  3284                           tblptrl	equ	0xFF6
  3285                           tablat	equ	0xFF5
  3286                           prodh	equ	0xFF4
  3287                           prodl	equ	0xFF3
  3288                           intcon	equ	0xFF2
  3289                           intcon3	equ	0xFF0
  3290                           postinc0	equ	0xFEE
  3291                           wreg	equ	0xFE8
  3292                           indf2	equ	0xFDF
  3293                           postinc2	equ	0xFDE
  3294                           postdec2	equ	0xFDD
  3295                           fsr2h	equ	0xFDA
  3296                           fsr2l	equ	0xFD9
  3297                           status	equ	0xFD8
  3298                           
  3299 ;; *************** function ___lldiv *****************
  3300 ;; Defined at:
  3301 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  3302 ;; Parameters:    Size  Location     Type
  3303 ;;  dividend        4   18[COMRAM] unsigned long 
  3304 ;;  divisor         4   22[COMRAM] unsigned long 
  3305 ;; Auto vars:     Size  Location     Type
  3306 ;;  quotient        4   26[COMRAM] unsigned long 
  3307 ;;  counter         1   30[COMRAM] unsigned char 
  3308 ;; Return value:  Size  Location     Type
  3309 ;;                  4   18[COMRAM] unsigned long 
  3310 ;; Registers used:
  3311 ;;		wreg, status,2, status,0
  3312 ;; Tracked objects:
  3313 ;;		On entry : 0/0
  3314 ;;		On exit  : 0/0
  3315 ;;		Unchanged: 0/0
  3316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3317 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3318 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3319 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3320 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3321 ;;Total ram usage:       13 bytes
  3322 ;; Hardware stack levels used:    1
  3323 ;; Hardware stack levels required when called:    2
  3324 ;; This function calls:
  3325 ;;		Nothing
  3326 ;; This function is called by:
  3327 ;;		_I2C_Master_Init
  3328 ;; This function uses a non-reentrant model
  3329 ;;
  3330                           
  3331                           	psect	text16
  3332  000752                     __ptext16:
  3333                           	opt stack 0
  3334  000752                     ___lldiv:
  3335                           	opt stack 27
  3336                           
  3337                           ;incstack = 0
  3338  000752  0E00               	movlw	0
  3339  000754  6E1B               	movwf	___lldiv@quotient,c
  3340  000756  0E00               	movlw	0
  3341  000758  6E1C               	movwf	___lldiv@quotient+1,c
  3342  00075A  0E00               	movlw	0
  3343  00075C  6E1D               	movwf	___lldiv@quotient+2,c
  3344  00075E  0E00               	movlw	0
  3345  000760  6E1E               	movwf	___lldiv@quotient+3,c
  3346  000762  5017               	movf	___lldiv@divisor,w,c
  3347  000764  1018               	iorwf	___lldiv@divisor+1,w,c
  3348  000766  1019               	iorwf	___lldiv@divisor+2,w,c
  3349  000768  101A               	iorwf	___lldiv@divisor+3,w,c
  3350  00076A  B4D8               	btfsc	status,2,c
  3351  00076C  D02A               	goto	l615
  3352  00076E  0E01               	movlw	1
  3353  000770  6E1F               	movwf	___lldiv@counter,c
  3354  000772  D006               	goto	l1425
  3355  000774                     l1423:
  3356  000774  90D8               	bcf	status,0,c
  3357  000776  3617               	rlcf	___lldiv@divisor,f,c
  3358  000778  3618               	rlcf	___lldiv@divisor+1,f,c
  3359  00077A  3619               	rlcf	___lldiv@divisor+2,f,c
  3360  00077C  361A               	rlcf	___lldiv@divisor+3,f,c
  3361  00077E  2A1F               	incf	___lldiv@counter,f,c
  3362  000780                     l1425:
  3363  000780  AE1A               	btfss	___lldiv@divisor+3,7,c
  3364  000782  D7F8               	goto	l1423
  3365  000784                     l1427:
  3366  000784  90D8               	bcf	status,0,c
  3367  000786  361B               	rlcf	___lldiv@quotient,f,c
  3368  000788  361C               	rlcf	___lldiv@quotient+1,f,c
  3369  00078A  361D               	rlcf	___lldiv@quotient+2,f,c
  3370  00078C  361E               	rlcf	___lldiv@quotient+3,f,c
  3371  00078E  5017               	movf	___lldiv@divisor,w,c
  3372  000790  5C13               	subwf	___lldiv@dividend,w,c
  3373  000792  5018               	movf	___lldiv@divisor+1,w,c
  3374  000794  5814               	subwfb	___lldiv@dividend+1,w,c
  3375  000796  5019               	movf	___lldiv@divisor+2,w,c
  3376  000798  5815               	subwfb	___lldiv@dividend+2,w,c
  3377  00079A  501A               	movf	___lldiv@divisor+3,w,c
  3378  00079C  5816               	subwfb	___lldiv@dividend+3,w,c
  3379  00079E  A0D8               	btfss	status,0,c
  3380  0007A0  D009               	goto	l1435
  3381  0007A2  5017               	movf	___lldiv@divisor,w,c
  3382  0007A4  5E13               	subwf	___lldiv@dividend,f,c
  3383  0007A6  5018               	movf	___lldiv@divisor+1,w,c
  3384  0007A8  5A14               	subwfb	___lldiv@dividend+1,f,c
  3385  0007AA  5019               	movf	___lldiv@divisor+2,w,c
  3386  0007AC  5A15               	subwfb	___lldiv@dividend+2,f,c
  3387  0007AE  501A               	movf	___lldiv@divisor+3,w,c
  3388  0007B0  5A16               	subwfb	___lldiv@dividend+3,f,c
  3389  0007B2  801B               	bsf	___lldiv@quotient,0,c
  3390  0007B4                     l1435:
  3391  0007B4  90D8               	bcf	status,0,c
  3392  0007B6  321A               	rrcf	___lldiv@divisor+3,f,c
  3393  0007B8  3219               	rrcf	___lldiv@divisor+2,f,c
  3394  0007BA  3218               	rrcf	___lldiv@divisor+1,f,c
  3395  0007BC  3217               	rrcf	___lldiv@divisor,f,c
  3396  0007BE  2E1F               	decfsz	___lldiv@counter,f,c
  3397  0007C0  D7E1               	goto	l1427
  3398  0007C2                     l615:
  3399  0007C2  C01B  F013         	movff	___lldiv@quotient,?___lldiv
  3400  0007C6  C01C  F014         	movff	___lldiv@quotient+1,?___lldiv+1
  3401  0007CA  C01D  F015         	movff	___lldiv@quotient+2,?___lldiv+2
  3402  0007CE  C01E  F016         	movff	___lldiv@quotient+3,?___lldiv+3
  3403  0007D2  0012               	return		;funcret
  3404  0007D4                     __end_of___lldiv:
  3405                           	opt stack 0
  3406                           tblptru	equ	0xFF8
  3407                           tblptrh	equ	0xFF7
  3408                           tblptrl	equ	0xFF6
  3409                           tablat	equ	0xFF5
  3410                           prodh	equ	0xFF4
  3411                           prodl	equ	0xFF3
  3412                           intcon	equ	0xFF2
  3413                           intcon3	equ	0xFF0
  3414                           postinc0	equ	0xFEE
  3415                           wreg	equ	0xFE8
  3416                           indf2	equ	0xFDF
  3417                           postinc2	equ	0xFDE
  3418                           postdec2	equ	0xFDD
  3419                           fsr2h	equ	0xFDA
  3420                           fsr2l	equ	0xFD9
  3421                           status	equ	0xFD8
  3422                           
  3423 ;; *************** function _menuChange *****************
  3424 ;; Defined at:
  3425 ;;		line 178 in file "../main.c"
  3426 ;; Parameters:    Size  Location     Type
  3427 ;;		None
  3428 ;; Auto vars:     Size  Location     Type
  3429 ;;  keypress        1   17[COMRAM] unsigned char 
  3430 ;; Return value:  Size  Location     Type
  3431 ;;                  1    wreg      void 
  3432 ;; Registers used:
  3433 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3434 ;; Tracked objects:
  3435 ;;		On entry : 0/0
  3436 ;;		On exit  : 0/0
  3437 ;;		Unchanged: 0/0
  3438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3440 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3441 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3442 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3443 ;;Total ram usage:       15 bytes
  3444 ;; Hardware stack levels used:    1
  3445 ;; Hardware stack levels required when called:    1
  3446 ;; This function calls:
  3447 ;;		_switchMenu
  3448 ;; This function is called by:
  3449 ;;		Interrupt level 2
  3450 ;; This function uses a non-reentrant model
  3451 ;;
  3452                           
  3453                           	psect	intcode
  3454  000008                     __pintcode:
  3455                           	opt stack 0
  3456  000008                     _menuChange:
  3457                           	opt stack 26
  3458                           
  3459                           ;incstack = 0
  3460  000008  8248               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3461  00000A  ED3B  F003         	call	int_func,f	;refresh shadow registers
  3462                           tblptru	equ	0xFF8
  3463                           tblptrh	equ	0xFF7
  3464                           tblptrl	equ	0xFF6
  3465                           tablat	equ	0xFF5
  3466                           prodh	equ	0xFF4
  3467                           prodl	equ	0xFF3
  3468                           intcon	equ	0xFF2
  3469                           intcon3	equ	0xFF0
  3470                           postinc0	equ	0xFEE
  3471                           wreg	equ	0xFE8
  3472                           indf2	equ	0xFDF
  3473                           postinc2	equ	0xFDE
  3474                           postdec2	equ	0xFDD
  3475                           fsr2h	equ	0xFDA
  3476                           fsr2l	equ	0xFD9
  3477                           status	equ	0xFD8
  3478                           
  3479                           	psect	intcode_body
  3480  000676                     __pintcode_body:
  3481                           	opt stack 26
  3482  000676                     int_func:
  3483                           	opt stack 26
  3484  000676  0006               	pop		; remove dummy address from shadow register refresh
  3485  000678  CFFA F004          	movff	pclath,??_menuChange
  3486  00067C  CFFB F005          	movff	pclatu,??_menuChange+1
  3487  000680  CFE9 F006          	movff	fsr0l,??_menuChange+2
  3488  000684  CFEA F007          	movff	fsr0h,??_menuChange+3
  3489  000688  CFE1 F008          	movff	fsr1l,??_menuChange+4
  3490  00068C  CFE2 F009          	movff	fsr1h,??_menuChange+5
  3491  000690  CFD9 F00A          	movff	fsr2l,??_menuChange+6
  3492  000694  CFDA F00B          	movff	fsr2h,??_menuChange+7
  3493  000698  CFF3 F00C          	movff	prodl,??_menuChange+8
  3494  00069C  CFF4 F00D          	movff	prodh,??_menuChange+9
  3495  0006A0  CFF6 F00E          	movff	tblptrl,??_menuChange+10
  3496  0006A4  CFF7 F00F          	movff	tblptrh,??_menuChange+11
  3497  0006A8  CFF8 F010          	movff	tblptru,??_menuChange+12
  3498  0006AC  CFF5 F011          	movff	tablat,??_menuChange+13
  3499                           
  3500                           ;main.c: 179: if(INT1IF){
  3501  0006B0  A0F0               	btfss	intcon3,0,c	;volatile
  3502  0006B2  D031               	goto	i2l191
  3503                           
  3504                           ;main.c: 180: unsigned char keypress = (PORTB & 0xF0) >> 4;
  3505  0006B4  3881               	swapf	3969,w,c	;volatile
  3506  0006B6  0B0F               	andlw	15
  3507  0006B8  0B0F               	andlw	15
  3508  0006BA  6E12               	movwf	menuChange@keypress,c
  3509                           
  3510                           ;main.c: 181: if (keys[keypress] == '*'){
  3511  0006BC  5012               	movf	menuChange@keypress,w,c
  3512  0006BE  0D01               	mullw	1
  3513  0006C0  0E79               	movlw	low _keys
  3514  0006C2  24F3               	addwf	prodl,w,c
  3515  0006C4  6EF6               	movwf	tblptrl,c
  3516  0006C6  0EFE               	movlw	high _keys
  3517  0006C8  20F4               	addwfc	prodh,w,c
  3518  0006CA  6EF7               	movwf	tblptrh,c
  3519  0006CC                     	if	0	;There are less than 3 active tblptr bytes
  3520  0006CC                     	endif
  3521  0006CC  0008               	tblrd		*
  3522  0006CE  50F5               	movf	tablat,w,c
  3523  0006D0  0A2A               	xorlw	42
  3524  0006D2  A4D8               	btfss	status,2,c
  3525  0006D4  D00C               	goto	i2l1837
  3526                           
  3527                           ;main.c: 183: if(screenMode == 2)
  3528  0006D6  0E02               	movlw	2
  3529  0006D8  1847               	xorwf	_screenMode,w,c
  3530  0006DA  A4D8               	btfss	status,2,c
  3531  0006DC  D002               	goto	i2l1833
  3532                           
  3533                           ;main.c: 184: screenMode = 1;
  3534  0006DE  0E01               	movlw	1
  3535  0006E0  D004               	goto	L1
  3536  0006E2                     i2l1833:
  3537                           
  3538                           ;main.c: 185: else if (screenMode == 0)
  3539  0006E2  5047               	movf	_screenMode,w,c
  3540  0006E4  A4D8               	btfss	status,2,c
  3541  0006E6  D016               	goto	i2l1841
  3542                           
  3543                           ;main.c: 186: screenMode = 2;
  3544  0006E8  0E02               	movlw	2
  3545  0006EA                     L1:
  3546  0006EA  6E47               	movwf	_screenMode,c
  3547                           
  3548                           ;main.c: 187: }
  3549  0006EC  D013               	goto	i2l1841
  3550  0006EE                     i2l1837:
  3551                           
  3552                           ;main.c: 188: else if (screenMode != 0)
  3553  0006EE  5047               	movf	_screenMode,w,c
  3554  0006F0  B4D8               	btfsc	status,2,c
  3555  0006F2  D010               	goto	i2l1841
  3556                           
  3557                           ;main.c: 189: switchMenu('4', '6', keys[keypress]);
  3558  0006F4  0E36               	movlw	54
  3559  0006F6  6E01               	movwf	switchMenu@right,c
  3560  0006F8  5012               	movf	menuChange@keypress,w,c
  3561  0006FA  0D01               	mullw	1
  3562  0006FC  0E79               	movlw	low _keys
  3563  0006FE  24F3               	addwf	prodl,w,c
  3564  000700  6EF6               	movwf	tblptrl,c
  3565  000702  0EFE               	movlw	high _keys
  3566  000704  20F4               	addwfc	prodh,w,c
  3567  000706  6EF7               	movwf	tblptrh,c
  3568  000708                     	if	0	;There are less than 3 active tblptr bytes
  3569  000708                     	endif
  3570  000708  0008               	tblrd		*
  3571  00070A  CFF5 F002          	movff	tablat,switchMenu@key
  3572  00070E  0E34               	movlw	52
  3573  000710  ECAB  F004         	call	_switchMenu
  3574  000714                     i2l1841:
  3575                           
  3576                           ;main.c: 191: INT1IF = 0;
  3577  000714  90F0               	bcf	intcon3,0,c	;volatile
  3578  000716                     i2l191:
  3579  000716  C011  FFF5         	movff	??_menuChange+13,tablat
  3580  00071A  C010  FFF8         	movff	??_menuChange+12,tblptru
  3581  00071E  C00F  FFF7         	movff	??_menuChange+11,tblptrh
  3582  000722  C00E  FFF6         	movff	??_menuChange+10,tblptrl
  3583  000726  C00D  FFF4         	movff	??_menuChange+9,prodh
  3584  00072A  C00C  FFF3         	movff	??_menuChange+8,prodl
  3585  00072E  C00B  FFDA         	movff	??_menuChange+7,fsr2h
  3586  000732  C00A  FFD9         	movff	??_menuChange+6,fsr2l
  3587  000736  C009  FFE2         	movff	??_menuChange+5,fsr1h
  3588  00073A  C008  FFE1         	movff	??_menuChange+4,fsr1l
  3589  00073E  C007  FFEA         	movff	??_menuChange+3,fsr0h
  3590  000742  C006  FFE9         	movff	??_menuChange+2,fsr0l
  3591  000746  C005  FFFB         	movff	??_menuChange+1,pclatu
  3592  00074A  C004  FFFA         	movff	??_menuChange,pclath
  3593  00074E  9248               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3594  000750  0011               	retfie		f
  3595  000752                     __end_of_menuChange:
  3596                           	opt stack 0
  3597                           pclatu	equ	0xFFB
  3598                           pclath	equ	0xFFA
  3599                           tblptru	equ	0xFF8
  3600                           tblptrh	equ	0xFF7
  3601                           tblptrl	equ	0xFF6
  3602                           tablat	equ	0xFF5
  3603                           prodh	equ	0xFF4
  3604                           prodl	equ	0xFF3
  3605                           intcon	equ	0xFF2
  3606                           intcon3	equ	0xFF0
  3607                           postinc0	equ	0xFEE
  3608                           fsr0h	equ	0xFEA
  3609                           fsr0l	equ	0xFE9
  3610                           wreg	equ	0xFE8
  3611                           fsr1h	equ	0xFE2
  3612                           fsr1l	equ	0xFE1
  3613                           indf2	equ	0xFDF
  3614                           postinc2	equ	0xFDE
  3615                           postdec2	equ	0xFDD
  3616                           fsr2h	equ	0xFDA
  3617                           fsr2l	equ	0xFD9
  3618                           status	equ	0xFD8
  3619                           
  3620 ;; *************** function _switchMenu *****************
  3621 ;; Defined at:
  3622 ;;		line 163 in file "../main.c"
  3623 ;; Parameters:    Size  Location     Type
  3624 ;;  left            1    wreg     unsigned char 
  3625 ;;  right           1    0[COMRAM] unsigned char 
  3626 ;;  key             1    1[COMRAM] unsigned char 
  3627 ;; Auto vars:     Size  Location     Type
  3628 ;;  left            1    2[COMRAM] unsigned char 
  3629 ;; Return value:  Size  Location     Type
  3630 ;;                  1    wreg      void 
  3631 ;; Registers used:
  3632 ;;		wreg, status,2, status,0
  3633 ;; Tracked objects:
  3634 ;;		On entry : 0/0
  3635 ;;		On exit  : 0/0
  3636 ;;		Unchanged: 0/0
  3637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3638 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3639 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3640 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3641 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3642 ;;Total ram usage:        3 bytes
  3643 ;; Hardware stack levels used:    1
  3644 ;; This function calls:
  3645 ;;		Nothing
  3646 ;; This function is called by:
  3647 ;;		_menuChange
  3648 ;; This function uses a non-reentrant model
  3649 ;;
  3650                           
  3651                           	psect	text18
  3652  000956                     __ptext18:
  3653                           	opt stack 0
  3654  000956                     _switchMenu:
  3655                           	opt stack 26
  3656                           
  3657                           ;incstack = 0
  3658                           ;switchMenu@left stored from wreg
  3659  000956  6E03               	movwf	switchMenu@left,c
  3660                           
  3661                           ;main.c: 164: if (key == right){
  3662  000958  5001               	movf	switchMenu@right,w,c
  3663  00095A  1802               	xorwf	switchMenu@key,w,c
  3664  00095C  A4D8               	btfss	status,2,c
  3665  00095E  D009               	goto	i2l1627
  3666                           
  3667                           ;main.c: 165: if (screenMode == 2)
  3668  000960  0E02               	movlw	2
  3669  000962  1847               	xorwf	_screenMode,w,c
  3670  000964  A4D8               	btfss	status,2,c
  3671  000966  D003               	goto	i2l1625
  3672                           
  3673                           ;main.c: 166: screenMode = 8;
  3674  000968  0E08               	movlw	8
  3675  00096A  6E47               	movwf	_screenMode,c
  3676  00096C  0012               	return	
  3677  00096E                     i2l1625:
  3678                           
  3679                           ;main.c: 167: else
  3680                           ;main.c: 168: screenMode -= 1;
  3681  00096E  0647               	decf	_screenMode,f,c
  3682                           
  3683                           ;main.c: 169: }
  3684  000970  0012               	return	
  3685  000972                     i2l1627:
  3686                           
  3687                           ;main.c: 170: else if (key == left){
  3688  000972  5003               	movf	switchMenu@left,w,c
  3689  000974  1802               	xorwf	switchMenu@key,w,c
  3690  000976  A4D8               	btfss	status,2,c
  3691  000978  0012               	return	
  3692                           
  3693                           ;main.c: 171: if (screenMode == 8)
  3694  00097A  0E08               	movlw	8
  3695  00097C  1847               	xorwf	_screenMode,w,c
  3696  00097E  A4D8               	btfss	status,2,c
  3697  000980  D003               	goto	i2l1633
  3698                           
  3699                           ;main.c: 172: screenMode = 2;
  3700  000982  0E02               	movlw	2
  3701  000984  6E47               	movwf	_screenMode,c
  3702  000986  0012               	return	
  3703  000988                     i2l1633:
  3704                           
  3705                           ;main.c: 173: else
  3706                           ;main.c: 174: screenMode += 1;
  3707  000988  2A47               	incf	_screenMode,f,c
  3708  00098A  0012               	return	
  3709  00098C                     __end_of_switchMenu:
  3710                           	opt stack 0
  3711                           pclatu	equ	0xFFB
  3712                           pclath	equ	0xFFA
  3713                           tblptru	equ	0xFF8
  3714                           tblptrh	equ	0xFF7
  3715                           tblptrl	equ	0xFF6
  3716                           tablat	equ	0xFF5
  3717                           prodh	equ	0xFF4
  3718                           prodl	equ	0xFF3
  3719                           intcon	equ	0xFF2
  3720                           intcon3	equ	0xFF0
  3721                           postinc0	equ	0xFEE
  3722                           fsr0h	equ	0xFEA
  3723                           fsr0l	equ	0xFE9
  3724                           wreg	equ	0xFE8
  3725                           fsr1h	equ	0xFE2
  3726                           fsr1l	equ	0xFE1
  3727                           indf2	equ	0xFDF
  3728                           postinc2	equ	0xFDE
  3729                           postdec2	equ	0xFDD
  3730                           fsr2h	equ	0xFDA
  3731                           fsr2l	equ	0xFD9
  3732                           status	equ	0xFD8
  3733                           pclatu	equ	0xFFB
  3734                           pclath	equ	0xFFA
  3735                           tblptru	equ	0xFF8
  3736                           tblptrh	equ	0xFF7
  3737                           tblptrl	equ	0xFF6
  3738                           tablat	equ	0xFF5
  3739                           prodh	equ	0xFF4
  3740                           prodl	equ	0xFF3
  3741                           intcon	equ	0xFF2
  3742                           intcon3	equ	0xFF0
  3743                           postinc0	equ	0xFEE
  3744                           fsr0h	equ	0xFEA
  3745                           fsr0l	equ	0xFE9
  3746                           wreg	equ	0xFE8
  3747                           fsr1h	equ	0xFE2
  3748                           fsr1l	equ	0xFE1
  3749                           indf2	equ	0xFDF
  3750                           postinc2	equ	0xFDE
  3751                           postdec2	equ	0xFDD
  3752                           fsr2h	equ	0xFDA
  3753                           fsr2l	equ	0xFD9
  3754                           status	equ	0xFD8
  3755                           
  3756                           	psect	rparam
  3757  0000                     pclatu	equ	0xFFB
  3758                           pclath	equ	0xFFA
  3759                           tblptru	equ	0xFF8
  3760                           tblptrh	equ	0xFF7
  3761                           tblptrl	equ	0xFF6
  3762                           tablat	equ	0xFF5
  3763                           prodh	equ	0xFF4
  3764                           prodl	equ	0xFF3
  3765                           intcon	equ	0xFF2
  3766                           intcon3	equ	0xFF0
  3767                           postinc0	equ	0xFEE
  3768                           fsr0h	equ	0xFEA
  3769                           fsr0l	equ	0xFE9
  3770                           wreg	equ	0xFE8
  3771                           fsr1h	equ	0xFE2
  3772                           fsr1l	equ	0xFE1
  3773                           indf2	equ	0xFDF
  3774                           postinc2	equ	0xFDE
  3775                           postdec2	equ	0xFDD
  3776                           fsr2h	equ	0xFDA
  3777                           fsr2l	equ	0xFD9
  3778                           status	equ	0xFD8
  3779                           
  3780                           	psect	temp
  3781  000048                     btemp:
  3782                           	opt stack 0
  3783  000048                     	ds	1
  3784  0000                     int$flags	set	btemp
  3785                           pclatu	equ	0xFFB
  3786                           pclath	equ	0xFFA
  3787                           tblptru	equ	0xFF8
  3788                           tblptrh	equ	0xFF7
  3789                           tblptrl	equ	0xFF6
  3790                           tablat	equ	0xFF5
  3791                           prodh	equ	0xFF4
  3792                           prodl	equ	0xFF3
  3793                           intcon	equ	0xFF2
  3794                           intcon3	equ	0xFF0
  3795                           postinc0	equ	0xFEE
  3796                           fsr0h	equ	0xFEA
  3797                           fsr0l	equ	0xFE9
  3798                           wreg	equ	0xFE8
  3799                           fsr1h	equ	0xFE2
  3800                           fsr1l	equ	0xFE1
  3801                           indf2	equ	0xFDF
  3802                           postinc2	equ	0xFDE
  3803                           postdec2	equ	0xFDD
  3804                           fsr2h	equ	0xFDA
  3805                           fsr2l	equ	0xFD9
  3806                           status	equ	0xFD8


Data Sizes:
    Strings     355
    Constant    35
    Data        1
    BSS         7
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     63      71
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 25
		 -> STR_19(CODE[23]), STR_18(CODE[23]), STR_17(CODE[21]), STR_16(CODE[17]), 
		 -> STR_15(CODE[21]), STR_14(CODE[17]), STR_13(CODE[19]), STR_12(CODE[17]), 
		 -> STR_11(CODE[19]), STR_10(CODE[17]), STR_9(CODE[25]), STR_8(CODE[17]), 
		 -> STR_7(CODE[17]), STR_6(CODE[17]), STR_5(CODE[19]), STR_4(CODE[17]), 
		 -> STR_3(CODE[17]), STR_2(CODE[17]), STR_1(CODE[17]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _I2C_Master_Init->___lldiv

Critical Paths under _menuChange in COMRAM

    _menuChange->_switchMenu

Critical Paths under _main in BANK0

    None.

Critical Paths under _menuChange in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _menuChange in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _menuChange in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _menuChange in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _menuChange in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _menuChange in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _menuChange in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _menuChange in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _menuChange in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _menuChange in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _menuChange in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _menuChange in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _menuChange in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _menuChange in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _menuChange in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _menuChange in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                11    11      0    4575
                                             52 COMRAM    11    11      0
                    _I2C_Master_Init
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              31    23      8    3363
                                             30 COMRAM    22    14      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      90
                                             20 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             18 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     287
                                             18 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     287
                                             25 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     418
                                             18 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0      90
                                             21 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0      90
                                             20 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0      75
                                             18 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Write                                     2     0      2     214
                                             19 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Read                                      2     2      0      30
                                             19 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Wait                                      1     1      0       0
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     376
                                             31 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     290
                                             18 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _menuChange                                          15    15      0     261
                                              3 COMRAM    15    15      0
                         _switchMenu
 ---------------------------------------------------------------------------------
 (5) _switchMenu                                           3     1      2     216
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _I2C_Master_Read
     _I2C_Master_Wait
   _I2C_Master_Start
     _I2C_Master_Wait
   _I2C_Master_Stop
     _I2C_Master_Wait
   _I2C_Master_Write
     _I2C_Master_Wait
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
       _lcdNibble

 _menuChange (ROOT)
   _switchMenu

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     3F      47       1       56.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      47      34        0.0%
DATA                 0      0      47       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sat Feb 04 00:37:32 2017

                       l34 0A22        ___wmul@multiplicand 0015                __CFG_BORV$3 000000  
             __CFG_CP0$OFF 000000               __CFG_CP1$OFF 000000               __CFG_CP2$OFF 000000  
             __CFG_CP3$OFF 000000                __CFG_OSC$HS 000000                        l131 0048  
                      l140 00E2                        l150 0182                        l142 0144  
                      l223 0456                        l162 0278                        l147 0152  
                      l156 0200                        l159 023C                        l615 07C2  
                      l668 0876                        l678 094C               __CFG_CPB$OFF 000000  
                      u150 09FC                        _PEN 007E2A               __CFG_CPD$OFF 000000  
                      _SEN 007E28                        u825 0802                        prod 000FF3  
                      wreg 000FE8               __CFG_LVP$OFF 000000               __CFG_WDT$OFF 000000  
                     l1015 09FE                       l1501 0398                       l1423 0774  
                     l1407 0A1A                       l1425 0780                       l1601 05AE  
                     l1435 07B4                       l1427 0784                       l1603 05B4  
                     l1611 063E                       l1531 0484                       l1515 0424  
                     l1507 03C6                       l1445 0844                       l1605 05F8  
                     l1613 064E                       l1701 0102                       l1447 084C  
                     l1615 0654                       l1551 04D2                       l1535 049E  
                     l1519 0428                       l1711 012C                       l1457 086C  
                     l1449 0850                       l1473 0942                       l1465 0922  
                     l1537 04A2                       l1617 065C                       l1801 02B4  
                     l1721 014A                       l1467 092A                       l1491 0374  
                     l1731 017A                       l1715 0140                       l1707 0124  
                     l1469 092E                       l1573 0528                       l1549 04CE  
                     l1565 04FE                       l1805 02E8                       l1821 0360  
                     l1591 0580                       l1567 050E                       l1495 0384  
                     l1815 030C                       l1671 0098                       l1663 007C  
                     l1593 0588                       l1585 056A                       l1577 054C  
                     l1497 0392                       l1809 02F0                       l1745 01BE  
                     l1681 00BC                       l1579 0554                       l1771 0232  
                     l1747 01C8                       l1659 0074                       l1597 059C  
                     l1757 01F6                       l1677 00B4                       l1785 026E  
                     l1697 00FA                       l1689 00D8                       l1799 02AA  
                     STR_1 FFDD                       STR_2 FFEE                       STR_3 FFBB  
                     STR_4 FF44                       STR_5 FF0D                       STR_6 FF99  
                     STR_7 FF66                       STR_8 FFAA                       STR_9 FE9C  
                     _LATB 000F8A                       u1407 0908                       _LATC 000F8B  
                     _LATD 000F8C                       u1417 0898                       u1427 08A0  
                     u1437 08C0                       u1447 08C8                       u1367 008A  
                     u1377 00CA                       u1387 0132                       u1397 08D4  
                     _RCEN 007E2B                       _RSEN 007E29                main@numBats 0038  
                     _main 0012                       _keys FE79                       _time 0040  
                     fsr0h 000FEA                       fsr1h 000FE2                       fsr2h 000FDA  
                     fsr0l 000FE9                       indf2 000FDF                       fsr1l 000FE1  
                     fsr2l 000FD9                       btemp 0048                       prodh 000FF4  
                     prodl 000FF3                       start 000E              __CFG_IESO$OFF 000000  
            __CFG_MCLRE$ON 000000               ___param_bank 000000           ?_I2C_Master_Init 0020  
         ?_I2C_Master_Read 0001           ?_I2C_Master_Wait 0001           ?_I2C_Master_Stop 0001  
                    ?_main 0001                      _ACKEN 007E2C                      _ACKDT 007E2D  
                    STR_10 FFCC                      STR_11 FF20                      STR_12 FF55  
                    STR_20 FF33                      STR_13 FF20                      STR_14 FF88  
                    STR_15 FEE3                      STR_16 FF77                      STR_17 FEF8  
                    STR_18 FEB5                      STR_19 FECC            __end_of___lldiv 07D4  
          __end_of___lwdiv 0880            __end_of___lwmod 0956                      i2l191 0716  
                    _PORTB 000F81                      _TRISB 000F93                      _TRISC 000F94  
                    _TRISD 000F95              __CFG_PWRT$OFF 000000              __CFG_WRT0$OFF 000000  
            __CFG_WRT1$OFF 000000              __CFG_WRT2$OFF 000000              __CFG_WRT3$OFF 000000  
          __end_of_lcdInst 0A4C             __CFG_EBTR0$OFF 000000             __CFG_FCMEN$OFF 000000  
           __CFG_EBTR1$OFF 000000             __CFG_EBTR2$OFF 000000             __CFG_EBTR3$OFF 000000  
            __CFG_WRTB$OFF 000000              __CFG_WRTC$OFF 000000              __CFG_WRTD$OFF 000000  
          __end_of_initLCD 0914             __CFG_EBTRB$OFF 000000            __end_of_dpowers FE94  
          __end_of_isdigit 0A22                      _putch 0A34                      main@i 003F  
                    pclath 000FFA                      tablat 000FF5                      status 000FD8  
           __CFG_PBADEN$ON 000000            __initialization 098C               __end_of_main 036A  
             __end_of_keys FE8A                     ??_main 0035              __activetblptr 000002  
        ?_I2C_Master_Start 0001          ?_I2C_Master_Write 0014         ??_I2C_Master_Start 0014  
                   _ADCON0 000FC2                     _ADCON1 000FC1         ??_I2C_Master_Write 0016  
                   ?_putch 0001                     _INT1IE 007F83                     _INT1IF 007F80  
                   i2l1633 0988                     i2l1625 096E                     i2l1627 0972  
                   i2l1841 0714                     i2l1833 06E2                     i2l1837 06EE  
                   _SSPADD 000FC8                     _TRISC3 007CA3                     _TRISC4 007CA4  
                   _SSPBUF 000FC9             __CFG_XINST$OFF 000000                     ___wmul 09B8  
           __CFG_STVREN$ON 000000                  ??___lldiv 001B                  ??___lwdiv 0017  
                ??___lwmod 001E                     clear_0 09A4                  ??_lcdInst 0015  
                   _printf 036A                  ??_initLCD 0016               __pdataCOMRAM 0047  
                ??_isdigit 0013               __mediumconst FE78                     tblptrh 000FF7  
                   tblptrl 000FF6                     tblptru 000FF8            switchMenu@right 0001  
               __accesstop 0080    __end_of__initialization 09AA              ___rparam_used 000001  
           __pcstackCOMRAM 0001              __end_of_putch 0A40         __size_of_lcdNibble 004E  
                  ??_putch 0015                    ?___wmul 0013                    ?_printf 001F  
                  _SSPCON1 000FC6                    _SSPCON2 000FC5                    _SSPSTAT 000FC7  
        __end_of_lcdNibble 08CE                    __Hparam 0000                    __Lparam 0000  
               _menuChange 0008                    ___lldiv 0752            __size_of___wmul 0026  
                  ___lwdiv 082E                    ___lwmod 0914                    __pcinit 098C  
                  __ramtop 1000                    _lcdInst 0A40                    __ptext0 0012  
                  __ptext1 036A                    __ptext2 0A34                    __ptext3 0A04  
                  __ptext4 09B8                    __ptext5 0914                    __ptext6 082E  
                  __ptext7 08CE                    __ptext8 0A40                    __ptext9 0880  
          __size_of_printf 030C                    _initLCD 08CE          __end_of_hexpowers FE9C  
                  _dpowers FE8A                    _isdigit 0A04   __size_of_I2C_Master_Init 005A  
 __size_of_I2C_Master_Read 0026   __size_of_I2C_Master_Wait 0012   __size_of_I2C_Master_Stop 0008  
                  main@min 0036                    main@sec 0037             __pintcode_body 0676  
     end_of_initialization 09AA              __Lmediumconst FE78                    int_func 0676  
               _screenMode 0047  __size_of_I2C_Master_Start 0008  __size_of_I2C_Master_Write 000A  
          ___lldiv@divisor 0017            ___lldiv@counter 001F                    printf@c 0034  
                  printf@f 001F           I2C_Master_Init@c 0020           I2C_Master_Read@a 0014  
                  postdec2 000FDD                    postinc0 000FEE                    postinc2 000FDE  
              printf@width 0032                 _switchMenu 0956                ?_menuChange 0001  
           __end_of___wmul 09DE              __pidataCOMRAM 0A66             __end_of_printf 0676  
      start_initialization 098C         menuChange@keypress 0012          ??_I2C_Master_Init 0024  
        ??_I2C_Master_Read 0014          ??_I2C_Master_Wait 0013          ??_I2C_Master_Stop 0014  
                 ??___wmul 0017           __CFG_LPT1OSC$OFF 000000             switchMenu@left 0003  
                 ??_printf 0027                __pbssCOMRAM 0040        __size_of_menuChange 074A  
         _I2C_Master_Start 0A5E           _I2C_Master_Write 0A4C           ___lwdiv@dividend 0013  
        __CFG_CCP2MX$PORTC 000000                ?_switchMenu 0001                  __pintcode 0008  
            __pmediumconst FE78                  _lcdNibble 0880                   ?___lldiv 0013  
                 ?___lwdiv 0013                   ?___lwmod 001A                   ?_lcdInst 0001  
                 ?_initLCD 0001                   ?_isdigit 0001                  _hexpowers FE94  
         ___lwdiv@quotient 0017             __size_of_putch 000C             ___wmul@product 0017  
                 _LATDbits 000F8C           __CFG_WDTPS$32768 000000                 ?_lcdNibble 0001  
                main@i_215 003D                  main@i_217 003C                  main@i_239 003E  
        ___wmul@multiplier 0013              lcdNibble@data 0014                 printf@flag 0031  
            lcdNibble@temp 0013                 printf@prec 002E                  main@numAA 003B  
                main@num9V 003A        __size_of_switchMenu 0036        I2C_Master_Read@temp 0015  
                 __Hrparam 0000                   __Lrparam 0000         __CFG_BOREN$SBORDIS 000000  
             ??_menuChange 0004              switchMenu@key 0002           __size_of___lldiv 0082  
         __size_of___lwdiv 0052           __size_of___lwmod 0042                _isdigit$500 0014  
         __size_of_lcdInst 000C            _I2C_Master_Init 07D4            _I2C_Master_Read 09DE  
         __size_of_initLCD 0046            _I2C_Master_Wait 0A22            _I2C_Master_Stop 0A56  
         __size_of_isdigit 001E            ___lwdiv@divisor 0015            ___lwdiv@counter 0019  
                 __ptext10 0A4C                   __ptext11 0A56                   __ptext12 0A5E  
                 __ptext13 09DE                   __ptext14 0A22                   __ptext15 07D4  
                 __ptext16 0752                   __ptext18 0956         __end_of_menuChange 0752  
            __size_of_main 0358                ??_lcdNibble 0013                   int$flags 0048  
                printf@idx 002B                  printf@val 002F                   main@numC 0039  
                putch@data 0015   __end_of_I2C_Master_Start 0A66   __end_of_I2C_Master_Write 0A56  
               _INTCONbits 000FF2                   isdigit@c 0015                   intlevel2 0000  
         ___lwmod@dividend 001A           ___lldiv@dividend 0013               ??_switchMenu 0003  
                 printf@ap 002C    __end_of_I2C_Master_Init 082E    __end_of_I2C_Master_Read 0A04  
  __end_of_I2C_Master_Wait 0A34    __end_of_I2C_Master_Stop 0A5E                lcdInst@data 0015  
         ___lldiv@quotient 001B          I2C_Master_Write@d 0014            ___lwmod@divisor 001C  
          ___lwmod@counter 001E         __end_of_switchMenu 098C  
