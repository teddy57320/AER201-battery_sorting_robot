

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sun Apr 09 05:26:24 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    37                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    56                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    57                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    58  0000                     
    59                           ; Version 1.40
    60                           ; Generated 01/12/2016 GMT
    61                           ; 
    62                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    63                           ; All rights reserved.
    64                           ; 
    65                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    66                           ; 
    67                           ; Redistribution and use in source and binary forms, with or without modification, are
    68                           ; permitted provided that the following conditions are met:
    69                           ; 
    70                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    71                           ;        conditions and the following disclaimer.
    72                           ; 
    73                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    74                           ;        of conditions and the following disclaimer in the documentation and/or other
    75                           ;        materials provided with the distribution.
    76                           ; 
    77                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    78                           ;        software without specific prior written permission.
    79                           ; 
    80                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    81                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    82                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    83                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    84                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    85                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    86                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    87                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    88                           ; 
    89                           ; 
    90                           ; Code-generator required, PIC18F4620 Definitions
    91                           ; 
    92                           ; SFR Addresses
    93  0000                     
    94                           	psect	idataBANK0
    95  001E48                     __pidataBANK0:
    96                           	opt stack 0
    97                           
    98                           ;initializer for _screenMode
    99  001E48  02                 	db	2
   100                           
   101                           	psect	mediumconst
   102  00FE1E                     __pmediumconst:
   103                           	opt stack 0
   104  00FE1E  00                 	db	0
   105  00FE1F                     _keys:
   106                           	opt stack 0
   107  00FE1F  31                 	db	49
   108  00FE20  32                 	db	50
   109  00FE21  33                 	db	51
   110  00FE22  41                 	db	65
   111  00FE23  34                 	db	52
   112  00FE24  35                 	db	53
   113  00FE25  36                 	db	54
   114  00FE26  42                 	db	66
   115  00FE27  37                 	db	55
   116  00FE28  38                 	db	56
   117  00FE29  39                 	db	57
   118  00FE2A  43                 	db	67
   119  00FE2B  2A                 	db	42
   120  00FE2C  30                 	db	48
   121  00FE2D  23                 	db	35
   122  00FE2E  44                 	db	68
   123  00FE2F  00                 	db	0
   124  00FE30                     __end_of_keys:
   125                           	opt stack 0
   126  00FE30                     _dpowers:
   127                           	opt stack 0
   128  00FE30  0001               	dw	1
   129  00FE32  000A               	dw	10
   130  00FE34  0064               	dw	100
   131  00FE36  03E8               	dw	1000
   132  00FE38  2710               	dw	10000
   133  00FE3A                     __end_of_dpowers:
   134                           	opt stack 0
   135  00FE3A                     _hexpowers:
   136                           	opt stack 0
   137  00FE3A  0001               	dw	1
   138  00FE3C  0010               	dw	16
   139  00FE3E  0100               	dw	256
   140  00FE40  1000               	dw	4096
   141  00FE42                     __end_of_hexpowers:
   142                           	opt stack 0
   143  0000                     _ADRES	set	4035
   144  0000                     _TMR0	set	4054
   145  0000                     _TMR1	set	4046
   146  0000                     _ADCON0	set	4034
   147  0000                     _ADCON0bits	set	4034
   148  0000                     _ADCON1	set	4033
   149  0000                     _ADCON2	set	4032
   150  0000                     _INTCONbits	set	4082
   151  0000                     _LATA	set	3977
   152  0000                     _LATAbits	set	3977
   153  0000                     _LATB	set	3978
   154  0000                     _LATBbits	set	3978
   155  0000                     _LATC	set	3979
   156  0000                     _LATCbits	set	3979
   157  0000                     _LATD	set	3980
   158  0000                     _LATDbits	set	3980
   159  0000                     _LATE	set	3981
   160  0000                     _LATEbits	set	3981
   161  0000                     _PORTB	set	3969
   162  0000                     _SSPADD	set	4040
   163  0000                     _SSPBUF	set	4041
   164  0000                     _SSPCON1	set	4038
   165  0000                     _SSPCON2	set	4037
   166  0000                     _SSPSTAT	set	4039
   167  0000                     _T0CON	set	4053
   168  0000                     _T0CONbits	set	4053
   169  0000                     _T1CON	set	4045
   170  0000                     _T1CONbits	set	4045
   171  0000                     _TRISA	set	3986
   172  0000                     _TRISB	set	3987
   173  0000                     _TRISC	set	3988
   174  0000                     _TRISD	set	3989
   175  0000                     _TRISE	set	3990
   176  0000                     _ACKDT	set	32301
   177  0000                     _ACKEN	set	32300
   178  0000                     _GIE	set	32663
   179  0000                     _INT1IE	set	32643
   180  0000                     _INT1IF	set	32640
   181  0000                     _PEIE	set	32662
   182  0000                     _PEN	set	32298
   183  0000                     _RCEN	set	32299
   184  0000                     _SEN	set	32296
   185  0000                     _TMR0IE	set	32661
   186  0000                     _TMR0IF	set	32658
   187  0000                     _TMR1IE	set	31976
   188  0000                     _TMR1IF	set	31984
   189  0000                     _TRISC3	set	31907
   190  0000                     _TRISC4	set	31908
   191  0000                     _nRBPU	set	32655
   192  00FE42                     STR_8:
   193  00FE42  25                 	db	37
   194  00FE43  30                 	db	48	;'0'
   195  00FE44  32                 	db	50	;'2'
   196  00FE45  64                 	db	100	;'d'
   197  00FE46  3A                 	db	58	;':'
   198  00FE47  25                 	db	37
   199  00FE48  30                 	db	48	;'0'
   200  00FE49  32                 	db	50	;'2'
   201  00FE4A  64                 	db	100	;'d'
   202  00FE4B  20                 	db	32
   203  00FE4C  20                 	db	32
   204  00FE4D  20                 	db	32
   205  00FE4E  20                 	db	32
   206  00FE4F  20                 	db	32
   207  00FE50  20                 	db	32
   208  00FE51  20                 	db	32
   209  00FE52  20                 	db	32
   210  00FE53  20                 	db	32
   211  00FE54  20                 	db	32
   212  00FE55  20                 	db	32
   213  00FE56  20                 	db	32
   214  00FE57  20                 	db	32
   215  00FE58  20                 	db	32
   216  00FE59  20                 	db	32
   217  00FE5A  00                 	db	0
   218  00FE5B                     STR_20:
   219  00FE5B  25                 	db	37
   220  00FE5C  30                 	db	48	;'0'
   221  00FE5D  32                 	db	50	;'2'
   222  00FE5E  78                 	db	120	;'x'
   223  00FE5F  2F                 	db	47
   224  00FE60  25                 	db	37
   225  00FE61  30                 	db	48	;'0'
   226  00FE62  32                 	db	50	;'2'
   227  00FE63  78                 	db	120	;'x'
   228  00FE64  2F                 	db	47
   229  00FE65  25                 	db	37
   230  00FE66  30                 	db	48	;'0'
   231  00FE67  32                 	db	50	;'2'
   232  00FE68  78                 	db	120	;'x'
   233  00FE69  20                 	db	32
   234  00FE6A  20                 	db	32
   235  00FE6B  20                 	db	32
   236  00FE6C  20                 	db	32
   237  00FE6D  20                 	db	32
   238  00FE6E  20                 	db	32
   239  00FE6F  20                 	db	32
   240  00FE70  20                 	db	32
   241  00FE71  00                 	db	0
   242  00FE72                     STR_21:
   243  00FE72  25                 	db	37
   244  00FE73  30                 	db	48	;'0'
   245  00FE74  32                 	db	50	;'2'
   246  00FE75  78                 	db	120	;'x'
   247  00FE76  3A                 	db	58	;':'
   248  00FE77  25                 	db	37
   249  00FE78  30                 	db	48	;'0'
   250  00FE79  32                 	db	50	;'2'
   251  00FE7A  78                 	db	120	;'x'
   252  00FE7B  3A                 	db	58	;':'
   253  00FE7C  25                 	db	37
   254  00FE7D  30                 	db	48	;'0'
   255  00FE7E  32                 	db	50	;'2'
   256  00FE7F  78                 	db	120	;'x'
   257  00FE80  20                 	db	32
   258  00FE81  20                 	db	32
   259  00FE82  20                 	db	32
   260  00FE83  20                 	db	32
   261  00FE84  20                 	db	32
   262  00FE85  20                 	db	32
   263  00FE86  20                 	db	32
   264  00FE87  20                 	db	32
   265  00FE88  00                 	db	0
   266  00FE89                     STR_22:
   267  00FE89  44                 	db	68	;'D'
   268  00FE8A  41                 	db	65	;'A'
   269  00FE8B  54                 	db	84	;'T'
   270  00FE8C  45                 	db	69	;'E'
   271  00FE8D  3A                 	db	58	;':'
   272  00FE8E  20                 	db	32
   273  00FE8F  25                 	db	37
   274  00FE90  30                 	db	48	;'0'
   275  00FE91  32                 	db	50	;'2'
   276  00FE92  78                 	db	120	;'x'
   277  00FE93  2F                 	db	47
   278  00FE94  25                 	db	37
   279  00FE95  30                 	db	48	;'0'
   280  00FE96  32                 	db	50	;'2'
   281  00FE97  78                 	db	120	;'x'
   282  00FE98  2F                 	db	47
   283  00FE99  25                 	db	37
   284  00FE9A  30                 	db	48	;'0'
   285  00FE9B  32                 	db	50	;'2'
   286  00FE9C  78                 	db	120	;'x'
   287  00FE9D  20                 	db	32
   288  00FE9E  20                 	db	32
   289  00FE9F  00                 	db	0
   290  00FEA0                     STR_23:
   291  00FEA0  54                 	db	84	;'T'
   292  00FEA1  49                 	db	73	;'I'
   293  00FEA2  4D                 	db	77	;'M'
   294  00FEA3  45                 	db	69	;'E'
   295  00FEA4  3A                 	db	58	;':'
   296  00FEA5  20                 	db	32
   297  00FEA6  25                 	db	37
   298  00FEA7  30                 	db	48	;'0'
   299  00FEA8  32                 	db	50	;'2'
   300  00FEA9  78                 	db	120	;'x'
   301  00FEAA  3A                 	db	58	;':'
   302  00FEAB  25                 	db	37
   303  00FEAC  30                 	db	48	;'0'
   304  00FEAD  32                 	db	50	;'2'
   305  00FEAE  78                 	db	120	;'x'
   306  00FEAF  3A                 	db	58	;':'
   307  00FEB0  25                 	db	37
   308  00FEB1  30                 	db	48	;'0'
   309  00FEB2  32                 	db	50	;'2'
   310  00FEB3  78                 	db	120	;'x'
   311  00FEB4  20                 	db	32
   312  00FEB5  20                 	db	32
   313  00FEB6  00                 	db	0
   314  00FEB7                     STR_14:
   315  00FEB7  42                 	db	66	;'B'
   316  00FEB8  41                 	db	65	;'A'
   317  00FEB9  54                 	db	84	;'T'
   318  00FEBA  54                 	db	84	;'T'
   319  00FEBB  45                 	db	69	;'E'
   320  00FEBC  52                 	db	82	;'R'
   321  00FEBD  49                 	db	73	;'I'
   322  00FEBE  45                 	db	69	;'E'
   323  00FEBF  53                 	db	83	;'S'
   324  00FEC0  3A                 	db	58	;':'
   325  00FEC1  20                 	db	32
   326  00FEC2  25                 	db	37
   327  00FEC3  30                 	db	48	;'0'
   328  00FEC4  32                 	db	50	;'2'
   329  00FEC5  64                 	db	100	;'d'
   330  00FEC6  20                 	db	32
   331  00FEC7  20                 	db	32
   332  00FEC8  20                 	db	32
   333  00FEC9  20                 	db	32
   334  00FECA  20                 	db	32
   335  00FECB  00                 	db	0
   336  00FECC                     STR_10:
   337  00FECC  42                 	db	66	;'B'
   338  00FECD  41                 	db	65	;'A'
   339  00FECE  54                 	db	84	;'T'
   340  00FECF  54                 	db	84	;'T'
   341  00FED0  45                 	db	69	;'E'
   342  00FED1  52                 	db	82	;'R'
   343  00FED2  49                 	db	73	;'I'
   344  00FED3  45                 	db	69	;'E'
   345  00FED4  53                 	db	83	;'S'
   346  00FED5  3A                 	db	58	;':'
   347  00FED6  20                 	db	32
   348  00FED7  25                 	db	37
   349  00FED8  30                 	db	48	;'0'
   350  00FED9  32                 	db	50	;'2'
   351  00FEDA  64                 	db	100	;'d'
   352  00FEDB  20                 	db	32
   353  00FEDC  20                 	db	32
   354  00FEDD  20                 	db	32
   355  00FEDE  00                 	db	0
   356  00FEDF                     STR_27:
   357  00FEDF  30                 	db	48	;'0'
   358  00FEE0  31                 	db	49	;'1'
   359  00FEE1  32                 	db	50	;'2'
   360  00FEE2  33                 	db	51	;'3'
   361  00FEE3  34                 	db	52	;'4'
   362  00FEE4  35                 	db	53	;'5'
   363  00FEE5  36                 	db	54	;'6'
   364  00FEE6  37                 	db	55	;'7'
   365  00FEE7  38                 	db	56	;'8'
   366  00FEE8  39                 	db	57	;'9'
   367  00FEE9  61                 	db	97	;'a'
   368  00FEEA  62                 	db	98	;'b'
   369  00FEEB  63                 	db	99	;'c'
   370  00FEEC  64                 	db	100	;'d'
   371  00FEED  65                 	db	101	;'e'
   372  00FEEE  66                 	db	102	;'f'
   373  00FEEF  00                 	db	0
   374  00FEF0                     STR_11:
   375  00FEF0  23                 	db	35
   376  00FEF1  20                 	db	32
   377  00FEF2  4F                 	db	79	;'O'
   378  00FEF3  46                 	db	70	;'F'
   379  00FEF4  20                 	db	32
   380  00FEF5  43                 	db	67	;'C'
   381  00FEF6  20                 	db	32
   382  00FEF7  20                 	db	32
   383  00FEF8  20                 	db	32
   384  00FEF9  20                 	db	32
   385  00FEFA  20                 	db	32
   386  00FEFB  20                 	db	32
   387  00FEFC  20                 	db	32
   388  00FEFD  20                 	db	32
   389  00FEFE  20                 	db	32
   390  00FEFF  20                 	db	32
   391  00FF00  00                 	db	0
   392  00FF01                     STR_15:
   393  00FF01  23                 	db	35
   394  00FF02  20                 	db	32
   395  00FF03  4F                 	db	79	;'O'
   396  00FF04  46                 	db	70	;'F'
   397  00FF05  20                 	db	32
   398  00FF06  41                 	db	65	;'A'
   399  00FF07  41                 	db	65	;'A'
   400  00FF08  20                 	db	32
   401  00FF09  20                 	db	32
   402  00FF0A  20                 	db	32
   403  00FF0B  20                 	db	32
   404  00FF0C  20                 	db	32
   405  00FF0D  20                 	db	32
   406  00FF0E  20                 	db	32
   407  00FF0F  20                 	db	32
   408  00FF10  20                 	db	32
   409  00FF11  00                 	db	0
   410  00FF12                     STR_13:
   411  00FF12  23                 	db	35
   412  00FF13  20                 	db	32
   413  00FF14  4F                 	db	79	;'O'
   414  00FF15  46                 	db	70	;'F'
   415  00FF16  20                 	db	32
   416  00FF17  39                 	db	57	;'9'
   417  00FF18  56                 	db	86	;'V'
   418  00FF19  20                 	db	32
   419  00FF1A  20                 	db	32
   420  00FF1B  20                 	db	32
   421  00FF1C  20                 	db	32
   422  00FF1D  20                 	db	32
   423  00FF1E  20                 	db	32
   424  00FF1F  20                 	db	32
   425  00FF20  20                 	db	32
   426  00FF21  20                 	db	32
   427  00FF22  00                 	db	0
   428  00FF23                     STR_4:
   429  00FF23  25                 	db	37
   430  00FF24  34                 	db	52	;'4'
   431  00FF25  64                 	db	100	;'d'
   432  00FF26  20                 	db	32
   433  00FF27  25                 	db	37
   434  00FF28  32                 	db	50	;'2'
   435  00FF29  64                 	db	100	;'d'
   436  00FF2A  20                 	db	32
   437  00FF2B  20                 	db	32
   438  00FF2C  20                 	db	32
   439  00FF2D  20                 	db	32
   440  00FF2E  20                 	db	32
   441  00FF2F  20                 	db	32
   442  00FF30  20                 	db	32
   443  00FF31  20                 	db	32
   444  00FF32  20                 	db	32
   445  00FF33  00                 	db	0
   446  00FF34                     STR_19:
   447  00FF34  4C                 	db	76	;'L'
   448  00FF35  41                 	db	65	;'A'
   449  00FF36  53                 	db	83	;'S'
   450  00FF37  54                 	db	84	;'T'
   451  00FF38  20                 	db	32
   452  00FF39  52                 	db	82	;'R'
   453  00FF3A  55                 	db	85	;'U'
   454  00FF3B  4E                 	db	78	;'N'
   455  00FF3C  3A                 	db	58	;':'
   456  00FF3D  20                 	db	32
   457  00FF3E  20                 	db	32
   458  00FF3F  20                 	db	32
   459  00FF40  20                 	db	32
   460  00FF41  20                 	db	32
   461  00FF42  20                 	db	32
   462  00FF43  20                 	db	32
   463  00FF44  00                 	db	0
   464  00FF45                     STR_26:
   465  00FF45  25                 	db	37
   466  00FF46  30                 	db	48	;'0'
   467  00FF47  34                 	db	52	;'4'
   468  00FF48  64                 	db	100	;'d'
   469  00FF49  20                 	db	32
   470  00FF4A  25                 	db	37
   471  00FF4B  30                 	db	48	;'0'
   472  00FF4C  34                 	db	52	;'4'
   473  00FF4D  64                 	db	100	;'d'
   474  00FF4E  20                 	db	32
   475  00FF4F  20                 	db	32
   476  00FF50  20                 	db	32
   477  00FF51  20                 	db	32
   478  00FF52  20                 	db	32
   479  00FF53  20                 	db	32
   480  00FF54  20                 	db	32
   481  00FF55  00                 	db	0
   482  00FF56                     STR_9:
   483  00FF56  54                 	db	84	;'T'
   484  00FF57  4F                 	db	79	;'O'
   485  00FF58  54                 	db	84	;'T'
   486  00FF59  41                 	db	65	;'A'
   487  00FF5A  4C                 	db	76	;'L'
   488  00FF5B  20                 	db	32
   489  00FF5C  23                 	db	35
   490  00FF5D  20                 	db	32
   491  00FF5E  4F                 	db	79	;'O'
   492  00FF5F  46                 	db	70	;'F'
   493  00FF60  20                 	db	32
   494  00FF61  20                 	db	32
   495  00FF62  20                 	db	32
   496  00FF63  20                 	db	32
   497  00FF64  20                 	db	32
   498  00FF65  20                 	db	32
   499  00FF66  00                 	db	0
   500  00FF67                     STR_6:
   501  00FF67  54                 	db	84	;'T'
   502  00FF68  4F                 	db	79	;'O'
   503  00FF69  20                 	db	32
   504  00FF6A  43                 	db	67	;'C'
   505  00FF6B  4F                 	db	79	;'O'
   506  00FF6C  4E                 	db	78	;'N'
   507  00FF6D  54                 	db	84	;'T'
   508  00FF6E  49                 	db	73	;'I'
   509  00FF6F  4E                 	db	78	;'N'
   510  00FF70  55                 	db	85	;'U'
   511  00FF71  45                 	db	69	;'E'
   512  00FF72  20                 	db	32
   513  00FF73  20                 	db	32
   514  00FF74  20                 	db	32
   515  00FF75  20                 	db	32
   516  00FF76  20                 	db	32
   517  00FF77  00                 	db	0
   518  00FF78                     STR_17:
   519  00FF78  23                 	db	35
   520  00FF79  20                 	db	32
   521  00FF7A  4F                 	db	79	;'O'
   522  00FF7B  46                 	db	70	;'F'
   523  00FF7C  20                 	db	32
   524  00FF7D  44                 	db	68	;'D'
   525  00FF7E  52                 	db	82	;'R'
   526  00FF7F  41                 	db	65	;'A'
   527  00FF80  49                 	db	73	;'I'
   528  00FF81  4E                 	db	78	;'N'
   529  00FF82  45                 	db	69	;'E'
   530  00FF83  44                 	db	68	;'D'
   531  00FF84  20                 	db	32
   532  00FF85  20                 	db	32
   533  00FF86  20                 	db	32
   534  00FF87  20                 	db	32
   535  00FF88  00                 	db	0
   536  00FF89                     STR_5:
   537  00FF89  44                 	db	68	;'D'
   538  00FF8A  4F                 	db	79	;'O'
   539  00FF8B  4E                 	db	78	;'N'
   540  00FF8C  45                 	db	69	;'E'
   541  00FF8D  21                 	db	33
   542  00FF8E  20                 	db	32
   543  00FF8F  50                 	db	80	;'P'
   544  00FF90  52                 	db	82	;'R'
   545  00FF91  45                 	db	69	;'E'
   546  00FF92  53                 	db	83	;'S'
   547  00FF93  53                 	db	83	;'S'
   548  00FF94  20                 	db	32
   549  00FF95  2A                 	db	42
   550  00FF96  20                 	db	32
   551  00FF97  20                 	db	32
   552  00FF98  20                 	db	32
   553  00FF99  00                 	db	0
   554  00FF9A                     STR_24:
   555  00FF9A  52                 	db	82	;'R'
   556  00FF9B  55                 	db	85	;'U'
   557  00FF9C  4E                 	db	78	;'N'
   558  00FF9D  4E                 	db	78	;'N'
   559  00FF9E  49                 	db	73	;'I'
   560  00FF9F  4E                 	db	78	;'N'
   561  00FFA0  47                 	db	71	;'G'
   562  00FFA1  3A                 	db	58	;':'
   563  00FFA2  20                 	db	32
   564  00FFA3  30                 	db	48	;'0'
   565  00FFA4  30                 	db	48	;'0'
   566  00FFA5  3A                 	db	58	;':'
   567  00FFA6  30                 	db	48	;'0'
   568  00FFA7  30                 	db	48	;'0'
   569  00FFA8  20                 	db	32
   570  00FFA9  20                 	db	32
   571  00FFAA  00                 	db	0
   572  00FFAB                     STR_7:
   573  00FFAB  54                 	db	84	;'T'
   574  00FFAC  4F                 	db	79	;'O'
   575  00FFAD  54                 	db	84	;'T'
   576  00FFAE  41                 	db	65	;'A'
   577  00FFAF  4C                 	db	76	;'L'
   578  00FFB0  20                 	db	32
   579  00FFB1  52                 	db	82	;'R'
   580  00FFB2  55                 	db	85	;'U'
   581  00FFB3  4E                 	db	78	;'N'
   582  00FFB4  20                 	db	32
   583  00FFB5  54                 	db	84	;'T'
   584  00FFB6  49                 	db	73	;'I'
   585  00FFB7  4D                 	db	77	;'M'
   586  00FFB8  45                 	db	69	;'E'
   587  00FFB9  3A                 	db	58	;':'
   588  00FFBA  20                 	db	32
   589  00FFBB  00                 	db	0
   590  00FFBC                     STR_3:
   591  00FFBC  20                 	db	32
   592  00FFBD  3C                 	db	60	;'<'
   593  00FFBE  54                 	db	84	;'T'
   594  00FFBF  4F                 	db	79	;'O'
   595  00FFC0  47                 	db	71	;'G'
   596  00FFC1  47                 	db	71	;'G'
   597  00FFC2  4C                 	db	76	;'L'
   598  00FFC3  45                 	db	69	;'E'
   599  00FFC4  20                 	db	32
   600  00FFC5  20                 	db	32
   601  00FFC6  4C                 	db	76	;'L'
   602  00FFC7  4F                 	db	79	;'O'
   603  00FFC8  47                 	db	71	;'G'
   604  00FFC9  53                 	db	83	;'S'
   605  00FFCA  3E                 	db	62	;'>'
   606  00FFCB  20                 	db	32
   607  00FFCC  00                 	db	0
   608  00FFCD                     STR_2:
   609  00FFCD  3C                 	db	60	;'<'
   610  00FFCE  20                 	db	32
   611  00FFCF  54                 	db	84	;'T'
   612  00FFD0  4F                 	db	79	;'O'
   613  00FFD1  47                 	db	71	;'G'
   614  00FFD2  47                 	db	71	;'G'
   615  00FFD3  4C                 	db	76	;'L'
   616  00FFD4  45                 	db	69	;'E'
   617  00FFD5  20                 	db	32
   618  00FFD6  20                 	db	32
   619  00FFD7  4C                 	db	76	;'L'
   620  00FFD8  4F                 	db	79	;'O'
   621  00FFD9  47                 	db	71	;'G'
   622  00FFDA  53                 	db	83	;'S'
   623  00FFDB  20                 	db	32
   624  00FFDC  3E                 	db	62	;'>'
   625  00FFDD  00                 	db	0
   626  00FFDE                     STR_1:
   627  00FFDE  50                 	db	80	;'P'
   628  00FFDF  52                 	db	82	;'R'
   629  00FFE0  45                 	db	69	;'E'
   630  00FFE1  53                 	db	83	;'S'
   631  00FFE2  53                 	db	83	;'S'
   632  00FFE3  20                 	db	32
   633  00FFE4  2A                 	db	42
   634  00FFE5  20                 	db	32
   635  00FFE6  54                 	db	84	;'T'
   636  00FFE7  4F                 	db	79	;'O'
   637  00FFE8  20                 	db	32
   638  00FFE9  53                 	db	83	;'S'
   639  00FFEA  54                 	db	84	;'T'
   640  00FFEB  41                 	db	65	;'A'
   641  00FFEC  52                 	db	82	;'R'
   642  00FFED  54                 	db	84	;'T'
   643  00FFEE  00                 	db	0
   644  00FFEF                     STR_25:
   645  00FFEF  25                 	db	37
   646  00FFF0  30                 	db	48	;'0'
   647  00FFF1  34                 	db	52	;'4'
   648  00FFF2  64                 	db	100	;'d'
   649  00FFF3  20                 	db	32
   650  00FFF4  25                 	db	37
   651  00FFF5  30                 	db	48	;'0'
   652  00FFF6  34                 	db	52	;'4'
   653  00FFF7  64                 	db	100	;'d'
   654  00FFF8  20                 	db	32
   655  00FFF9  25                 	db	37
   656  00FFFA  30                 	db	48	;'0'
   657  00FFFB  34                 	db	52	;'4'
   658  00FFFC  64                 	db	100	;'d'
   659  00FFFD  00                 	db	0
   660  0000                     
   661                           ; #config settings
   662  00FFFE  00                 	db	0	; dummy byte at the end
   663  0000                     
   664                           	psect	cinit
   665  001C86                     __pcinit:
   666                           	opt stack 0
   667  001C86                     start_initialization:
   668                           	opt stack 0
   669  001C86                     __initialization:
   670                           	opt stack 0
   671                           
   672                           ; Initialize objects allocated to BANK0 (1 bytes)
   673                           ; load TBLPTR registers with __pidataBANK0
   674  001C86  0E48               	movlw	low __pidataBANK0
   675  001C88  6EF6               	movwf	tblptrl,c
   676  001C8A  0E1E               	movlw	high __pidataBANK0
   677  001C8C  6EF7               	movwf	tblptrh,c
   678  001C8E  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   679  001C90  6EF8               	movwf	tblptru,c
   680  001C92  0009               	tblrd		*+	;fetch initializer
   681  001C94  CFF5 F0CC          	movff	tablat,__pdataBANK0
   682                           
   683                           ; Clear objects allocated to BANK0 (43 bytes)
   684  001C98  EE00  F080         	lfsr	0,__pbssBANK0
   685  001C9C  0E2B               	movlw	43
   686  001C9E                     clear_0:
   687  001C9E  6AEE               	clrf	postinc0,c
   688  001CA0  06E8               	decf	wreg,f,c
   689  001CA2  E1FD               	bnz	clear_0
   690                           
   691                           ; Clear objects allocated to COMRAM (8 bytes)
   692  001CA4  EE00  F047         	lfsr	0,__pbssCOMRAM
   693  001CA8  0E08               	movlw	8
   694  001CAA                     clear_1:
   695  001CAA  6AEE               	clrf	postinc0,c
   696  001CAC  06E8               	decf	wreg,f,c
   697  001CAE  E1FD               	bnz	clear_1
   698  001CB0                     end_of_initialization:
   699                           	opt stack 0
   700  001CB0                     __end_of__initialization:
   701                           	opt stack 0
   702  001CB0  904F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   703  001CB2  924F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   704  001CB4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   705  001CB6  6EF8               	movwf	tblptru,c
   706  001CB8  0100               	movlb	0
   707  001CBA  EF09  F000         	goto	_main	;jump to C main() function
   708                           tblptru	equ	0xFF8
   709                           tblptrh	equ	0xFF7
   710                           tblptrl	equ	0xFF6
   711                           tablat	equ	0xFF5
   712                           postinc0	equ	0xFEE
   713                           wreg	equ	0xFE8
   714                           
   715                           	psect	bssCOMRAM
   716  000047                     __pbssCOMRAM:
   717                           	opt stack 0
   718  000047                     _count_2ms:
   719                           	opt stack 0
   720  000047                     	ds	2
   721  000049                     _doneTimer:
   722                           	opt stack 0
   723  000049                     	ds	1
   724  00004A                     _opTimer:
   725                           	opt stack 0
   726  00004A                     	ds	1
   727  00004B                     _solOnTimer:
   728                           	opt stack 0
   729  00004B                     	ds	1
   730  00004C                     _sorting:
   731                           	opt stack 0
   732  00004C                     	ds	1
   733  00004D                     _step1:
   734                           	opt stack 0
   735  00004D                     	ds	1
   736  00004E                     _step2:
   737                           	opt stack 0
   738  00004E                     	ds	1
   739                           tblptru	equ	0xFF8
   740                           tblptrh	equ	0xFF7
   741                           tblptrl	equ	0xFF6
   742                           tablat	equ	0xFF5
   743                           postinc0	equ	0xFEE
   744                           wreg	equ	0xFE8
   745                           
   746                           	psect	bssBANK0
   747  000080                     __pbssBANK0:
   748                           	opt stack 0
   749  000080                     _lastRunRTC:
   750                           	opt stack 0
   751  000080                     	ds	7
   752  000087                     _realTime:
   753                           	opt stack 0
   754  000087                     	ds	7
   755  00008E                     _plat1Left:
   756                           	opt stack 0
   757  00008E                     	ds	2
   758  000090                     _plat1Right:
   759                           	opt stack 0
   760  000090                     	ds	2
   761  000092                     _plat2Left:
   762                           	opt stack 0
   763  000092                     	ds	2
   764  000094                     _plat2Right:
   765                           	opt stack 0
   766  000094                     	ds	2
   767  000096                     _turn1BackLeft:
   768                           	opt stack 0
   769  000096                     	ds	2
   770  000098                     _turn1BackRight:
   771                           	opt stack 0
   772  000098                     	ds	2
   773  00009A                     _turn2BackLeft:
   774                           	opt stack 0
   775  00009A                     	ds	2
   776  00009C                     _turn2BackRight:
   777                           	opt stack 0
   778  00009C                     	ds	2
   779  00009E                     _count9V:
   780                           	opt stack 0
   781  00009E                     	ds	1
   782  00009F                     _countAA:
   783                           	opt stack 0
   784  00009F                     	ds	1
   785  0000A0                     _countC:
   786                           	opt stack 0
   787  0000A0                     	ds	1
   788  0000A1                     _countDrain:
   789                           	opt stack 0
   790  0000A1                     	ds	1
   791  0000A2                     _doubleAA:
   792                           	opt stack 0
   793  0000A2                     	ds	1
   794  0000A3                     _min:
   795                           	opt stack 0
   796  0000A3                     	ds	1
   797  0000A4                     _num9V:
   798                           	opt stack 0
   799  0000A4                     	ds	1
   800  0000A5                     _numAA:
   801                           	opt stack 0
   802  0000A5                     	ds	1
   803  0000A6                     _numBats:
   804                           	opt stack 0
   805  0000A6                     	ds	1
   806  0000A7                     _numC:
   807                           	opt stack 0
   808  0000A7                     	ds	1
   809  0000A8                     _numDrain:
   810                           	opt stack 0
   811  0000A8                     	ds	1
   812  0000A9                     _sec:
   813                           	opt stack 0
   814  0000A9                     	ds	1
   815  0000AA                     _startGear:
   816                           	opt stack 0
   817  0000AA                     	ds	1
   818                           tblptru	equ	0xFF8
   819                           tblptrh	equ	0xFF7
   820                           tblptrl	equ	0xFF6
   821                           tablat	equ	0xFF5
   822                           postinc0	equ	0xFEE
   823                           wreg	equ	0xFE8
   824                           
   825                           	psect	dataBANK0
   826  0000CC                     __pdataBANK0:
   827                           	opt stack 0
   828  0000CC                     _screenMode:
   829                           	opt stack 0
   830  0000CC                     	ds	1
   831                           tblptru	equ	0xFF8
   832                           tblptrh	equ	0xFF7
   833                           tblptrl	equ	0xFF6
   834                           tablat	equ	0xFF5
   835                           postinc0	equ	0xFEE
   836                           wreg	equ	0xFE8
   837                           
   838                           	psect	cstackBANK0
   839  0000AB                     __pcstackBANK0:
   840                           	opt stack 0
   841  0000AB                     ??_printf:
   842                           
   843                           ; 1 bytes @ 0x0
   844  0000AB                     	ds	4
   845  0000AF                     printf@idx:
   846                           	opt stack 0
   847                           
   848                           ; 1 bytes @ 0x4
   849  0000AF                     	ds	1
   850  0000B0                     printf@ap:
   851                           	opt stack 0
   852                           
   853                           ; 2 bytes @ 0x5
   854  0000B0                     	ds	2
   855  0000B2                     printf@prec:
   856                           	opt stack 0
   857                           
   858                           ; 1 bytes @ 0x7
   859  0000B2                     	ds	1
   860  0000B3                     printf@val:
   861                           	opt stack 0
   862                           
   863                           ; 2 bytes @ 0x8
   864  0000B3                     	ds	2
   865  0000B5                     printf@flag:
   866                           	opt stack 0
   867                           
   868                           ; 1 bytes @ 0xA
   869  0000B5                     	ds	1
   870  0000B6                     printf@width:
   871                           	opt stack 0
   872                           
   873                           ; 2 bytes @ 0xB
   874  0000B6                     	ds	2
   875  0000B8                     printf@c:
   876                           	opt stack 0
   877                           
   878                           ; 1 bytes @ 0xD
   879  0000B8                     	ds	1
   880  0000B9                     testBatteries@volt1:
   881                           	opt stack 0
   882                           
   883                           ; 2 bytes @ 0xE
   884  0000B9                     	ds	2
   885  0000BB                     testBatteries@volt3:
   886                           	opt stack 0
   887                           
   888                           ; 2 bytes @ 0x10
   889  0000BB                     	ds	2
   890  0000BD                     testBatteries@volt2:
   891                           	opt stack 0
   892                           
   893                           ; 2 bytes @ 0x12
   894  0000BD                     	ds	2
   895  0000BF                     testBatteries@volt4:
   896                           	opt stack 0
   897                           
   898                           ; 2 bytes @ 0x14
   899  0000BF                     	ds	2
   900  0000C1                     testBatteries@volt5:
   901                           	opt stack 0
   902                           
   903                           ; 2 bytes @ 0x16
   904  0000C1                     	ds	2
   905  0000C3                     ??_main:
   906                           
   907                           ; 1 bytes @ 0x18
   908  0000C3                     	ds	2
   909  0000C5                     main@i:
   910                           	opt stack 0
   911                           
   912                           ; 1 bytes @ 0x1A
   913  0000C5                     	ds	1
   914  0000C6                     main@i_583:
   915                           	opt stack 0
   916                           
   917                           ; 1 bytes @ 0x1B
   918  0000C6                     	ds	1
   919  0000C7                     main@i_630:
   920                           	opt stack 0
   921                           
   922                           ; 1 bytes @ 0x1C
   923  0000C7                     	ds	1
   924  0000C8                     main@i_632:
   925                           	opt stack 0
   926                           
   927                           ; 1 bytes @ 0x1D
   928  0000C8                     	ds	1
   929  0000C9                     main@i_636:
   930                           	opt stack 0
   931                           
   932                           ; 1 bytes @ 0x1E
   933  0000C9                     	ds	1
   934  0000CA                     main@steps:
   935                           	opt stack 0
   936                           
   937                           ; 1 bytes @ 0x1F
   938  0000CA                     	ds	1
   939  0000CB                     main@steps_605:
   940                           	opt stack 0
   941                           
   942                           ; 1 bytes @ 0x20
   943  0000CB                     	ds	1
   944                           tblptru	equ	0xFF8
   945                           tblptrh	equ	0xFF7
   946                           tblptrl	equ	0xFF6
   947                           tablat	equ	0xFF5
   948                           postinc0	equ	0xFEE
   949                           wreg	equ	0xFE8
   950                           
   951                           	psect	cstackCOMRAM
   952  000001                     __pcstackCOMRAM:
   953                           	opt stack 0
   954  000001                     ??i2_I2C_Master_Wait:
   955  000001                     ??i2_isdigit:
   956  000001                     ?i2___wmul:
   957                           	opt stack 0
   958  000001                     ?i2___awdiv:
   959                           	opt stack 0
   960  000001                     ?i2___awmod:
   961                           	opt stack 0
   962  000001                     ?i2___lwdiv:
   963                           	opt stack 0
   964  000001                     i2lcdNibble@temp:
   965                           	opt stack 0
   966  000001                     i2___wmul@multiplier:
   967                           	opt stack 0
   968  000001                     i2___awdiv@dividend:
   969                           	opt stack 0
   970  000001                     i2___awmod@dividend:
   971                           	opt stack 0
   972  000001                     i2___lwdiv@dividend:
   973                           	opt stack 0
   974                           
   975                           ; 2 bytes @ 0x0
   976  000001                     	ds	1
   977  000002                     i2I2C_Master_Read@a:
   978                           	opt stack 0
   979  000002                     i2lcdNibble@data:
   980                           	opt stack 0
   981  000002                     i2_isdigit$944:
   982                           	opt stack 0
   983  000002                     i2I2C_Master_Write@d:
   984                           	opt stack 0
   985                           
   986                           ; 2 bytes @ 0x1
   987  000002                     	ds	1
   988  000003                     i2I2C_Master_Read@temp:
   989                           	opt stack 0
   990  000003                     i2lcdInst@data:
   991                           	opt stack 0
   992  000003                     i2putch@data:
   993                           	opt stack 0
   994  000003                     i2isdigit@c:
   995                           	opt stack 0
   996  000003                     i2___wmul@multiplicand:
   997                           	opt stack 0
   998  000003                     i2___awdiv@divisor:
   999                           	opt stack 0
  1000  000003                     i2___awmod@divisor:
  1001                           	opt stack 0
  1002  000003                     i2___lwdiv@divisor:
  1003                           	opt stack 0
  1004                           
  1005                           ; 2 bytes @ 0x2
  1006  000003                     	ds	1
  1007  000004                     
  1008                           ; 1 bytes @ 0x3
  1009  000004                     	ds	1
  1010  000005                     i2___awdiv@counter:
  1011                           	opt stack 0
  1012  000005                     i2___awmod@counter:
  1013                           	opt stack 0
  1014  000005                     i2___wmul@product:
  1015                           	opt stack 0
  1016  000005                     i2___lwdiv@quotient:
  1017                           	opt stack 0
  1018                           
  1019                           ; 2 bytes @ 0x4
  1020  000005                     	ds	1
  1021  000006                     i2___awdiv@sign:
  1022                           	opt stack 0
  1023  000006                     i2___awmod@sign:
  1024                           	opt stack 0
  1025                           
  1026                           ; 1 bytes @ 0x5
  1027  000006                     	ds	1
  1028  000007                     i2___lwdiv@counter:
  1029                           	opt stack 0
  1030  000007                     i2___awdiv@quotient:
  1031                           	opt stack 0
  1032                           
  1033                           ; 2 bytes @ 0x6
  1034  000007                     	ds	1
  1035  000008                     ?i2___lwmod:
  1036                           	opt stack 0
  1037  000008                     i2___lwmod@dividend:
  1038                           	opt stack 0
  1039                           
  1040                           ; 2 bytes @ 0x7
  1041  000008                     	ds	1
  1042  000009                     
  1043                           ; 1 bytes @ 0x8
  1044  000009                     	ds	1
  1045  00000A                     i2___lwmod@divisor:
  1046                           	opt stack 0
  1047                           
  1048                           ; 2 bytes @ 0x9
  1049  00000A                     	ds	2
  1050  00000C                     i2___lwmod@counter:
  1051                           	opt stack 0
  1052                           
  1053                           ; 1 bytes @ 0xB
  1054  00000C                     	ds	1
  1055  00000D                     ?i2_printf:
  1056                           	opt stack 0
  1057  00000D                     i2printf@f:
  1058                           	opt stack 0
  1059                           
  1060                           ; 2 bytes @ 0xC
  1061  00000D                     	ds	2
  1062  00000F                     ??i2_printf:
  1063                           
  1064                           ; 1 bytes @ 0xE
  1065  00000F                     	ds	4
  1066  000013                     i2printf@idx:
  1067                           	opt stack 0
  1068                           
  1069                           ; 1 bytes @ 0x12
  1070  000013                     	ds	1
  1071  000014                     i2printf@ap:
  1072                           	opt stack 0
  1073                           
  1074                           ; 2 bytes @ 0x13
  1075  000014                     	ds	2
  1076  000016                     i2printf@prec:
  1077                           	opt stack 0
  1078                           
  1079                           ; 1 bytes @ 0x15
  1080  000016                     	ds	1
  1081  000017                     i2printf@val:
  1082                           	opt stack 0
  1083                           
  1084                           ; 2 bytes @ 0x16
  1085  000017                     	ds	2
  1086  000019                     i2printf@flag:
  1087                           	opt stack 0
  1088                           
  1089                           ; 1 bytes @ 0x18
  1090  000019                     	ds	1
  1091  00001A                     i2printf@width:
  1092                           	opt stack 0
  1093                           
  1094                           ; 2 bytes @ 0x19
  1095  00001A                     	ds	2
  1096  00001C                     i2printf@c:
  1097                           	opt stack 0
  1098                           
  1099                           ; 1 bytes @ 0x1B
  1100  00001C                     	ds	1
  1101  00001D                     keypressed@right:
  1102                           	opt stack 0
  1103                           
  1104                           ; 1 bytes @ 0x1C
  1105  00001D                     	ds	1
  1106  00001E                     keypressed@key:
  1107                           	opt stack 0
  1108                           
  1109                           ; 1 bytes @ 0x1D
  1110  00001E                     	ds	1
  1111  00001F                     keypressed@left:
  1112                           	opt stack 0
  1113                           
  1114                           ; 1 bytes @ 0x1E
  1115  00001F                     	ds	1
  1116  000020                     keypressed@i:
  1117                           	opt stack 0
  1118                           
  1119                           ; 1 bytes @ 0x1F
  1120  000020                     	ds	1
  1121  000021                     ??_ISR:
  1122                           
  1123                           ; 1 bytes @ 0x20
  1124  000021                     	ds	15
  1125  000030                     ISR@keypress:
  1126                           	opt stack 0
  1127                           
  1128                           ; 1 bytes @ 0x2F
  1129  000030                     	ds	1
  1130  000031                     ??_isdigit:
  1131  000031                     ??_I2C_Master_Wait:
  1132  000031                     ?___wmul:
  1133                           	opt stack 0
  1134  000031                     ?___awdiv:
  1135                           	opt stack 0
  1136  000031                     ?___awmod:
  1137                           	opt stack 0
  1138  000031                     ?___lwdiv:
  1139                           	opt stack 0
  1140  000031                     ?___lldiv:
  1141                           	opt stack 0
  1142  000031                     lcdNibble@temp:
  1143                           	opt stack 0
  1144  000031                     readADC@channel:
  1145                           	opt stack 0
  1146  000031                     wait_2ms@x:
  1147                           	opt stack 0
  1148  000031                     ___wmul@multiplier:
  1149                           	opt stack 0
  1150  000031                     ___awdiv@dividend:
  1151                           	opt stack 0
  1152  000031                     ___awmod@dividend:
  1153                           	opt stack 0
  1154  000031                     ___lwdiv@dividend:
  1155                           	opt stack 0
  1156  000031                     ___lldiv@dividend:
  1157                           	opt stack 0
  1158                           
  1159                           ; 4 bytes @ 0x30
  1160  000031                     	ds	1
  1161  000032                     I2C_Master_Read@a:
  1162                           	opt stack 0
  1163  000032                     lcdNibble@data:
  1164                           	opt stack 0
  1165  000032                     _isdigit$944:
  1166                           	opt stack 0
  1167  000032                     I2C_Master_Write@d:
  1168                           	opt stack 0
  1169                           
  1170                           ; 2 bytes @ 0x31
  1171  000032                     	ds	1
  1172  000033                     I2C_Master_Read@temp:
  1173                           	opt stack 0
  1174  000033                     lcdInst@data:
  1175                           	opt stack 0
  1176  000033                     putch@data:
  1177                           	opt stack 0
  1178  000033                     isdigit@c:
  1179                           	opt stack 0
  1180  000033                     ___wmul@multiplicand:
  1181                           	opt stack 0
  1182  000033                     ___awdiv@divisor:
  1183                           	opt stack 0
  1184  000033                     ___awmod@divisor:
  1185                           	opt stack 0
  1186  000033                     ___lwdiv@divisor:
  1187                           	opt stack 0
  1188                           
  1189                           ; 2 bytes @ 0x32
  1190  000033                     	ds	1
  1191  000034                     ??_initLCD:
  1192                           
  1193                           ; 1 bytes @ 0x33
  1194  000034                     	ds	1
  1195  000035                     ___awdiv@counter:
  1196                           	opt stack 0
  1197  000035                     ___awmod@counter:
  1198                           	opt stack 0
  1199  000035                     ___wmul@product:
  1200                           	opt stack 0
  1201  000035                     ___lwdiv@quotient:
  1202                           	opt stack 0
  1203  000035                     ___lldiv@divisor:
  1204                           	opt stack 0
  1205                           
  1206                           ; 4 bytes @ 0x34
  1207  000035                     	ds	1
  1208  000036                     ___awdiv@sign:
  1209                           	opt stack 0
  1210  000036                     ___awmod@sign:
  1211                           	opt stack 0
  1212                           
  1213                           ; 1 bytes @ 0x35
  1214  000036                     	ds	1
  1215  000037                     ___lwdiv@counter:
  1216                           	opt stack 0
  1217  000037                     ___awdiv@quotient:
  1218                           	opt stack 0
  1219                           
  1220                           ; 2 bytes @ 0x36
  1221  000037                     	ds	1
  1222  000038                     ?___lwmod:
  1223                           	opt stack 0
  1224  000038                     ___lwmod@dividend:
  1225                           	opt stack 0
  1226                           
  1227                           ; 2 bytes @ 0x37
  1228  000038                     	ds	1
  1229  000039                     ___lldiv@quotient:
  1230                           	opt stack 0
  1231                           
  1232                           ; 4 bytes @ 0x38
  1233  000039                     	ds	1
  1234  00003A                     ___lwmod@divisor:
  1235                           	opt stack 0
  1236                           
  1237                           ; 2 bytes @ 0x39
  1238  00003A                     	ds	2
  1239  00003C                     ___lwmod@counter:
  1240                           	opt stack 0
  1241                           
  1242                           ; 1 bytes @ 0x3B
  1243  00003C                     	ds	1
  1244  00003D                     ?_printf:
  1245                           	opt stack 0
  1246  00003D                     ___lldiv@counter:
  1247                           	opt stack 0
  1248  00003D                     printf@f:
  1249                           	opt stack 0
  1250                           
  1251                           ; 2 bytes @ 0x3C
  1252  00003D                     	ds	1
  1253  00003E                     I2C_Master_Init@c:
  1254                           	opt stack 0
  1255                           
  1256                           ; 4 bytes @ 0x3D
  1257  00003E                     	ds	4
  1258  000042                     ??_I2C_Master_Init:
  1259                           
  1260                           ; 1 bytes @ 0x41
  1261  000042                     	ds	3
  1262  000045                     ??_testBatteries:
  1263                           
  1264                           ; 1 bytes @ 0x44
  1265  000045                     	ds	2
  1266                           tblptru	equ	0xFF8
  1267                           tblptrh	equ	0xFF7
  1268                           tblptrl	equ	0xFF6
  1269                           tablat	equ	0xFF5
  1270                           postinc0	equ	0xFEE
  1271                           wreg	equ	0xFE8
  1272                           
  1273 ;;
  1274 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1275 ;;
  1276 ;; *************** function _main *****************
  1277 ;; Defined at:
  1278 ;;		line 45 in file "../main.c"
  1279 ;; Parameters:    Size  Location     Type
  1280 ;;		None
  1281 ;; Auto vars:     Size  Location     Type
  1282 ;;  i               1   30[BANK0 ] unsigned char 
  1283 ;;  i               1   29[BANK0 ] unsigned char 
  1284 ;;  i               1   28[BANK0 ] unsigned char 
  1285 ;;  steps           1   32[BANK0 ] unsigned char 
  1286 ;;  steps           1   31[BANK0 ] unsigned char 
  1287 ;;  i               1   27[BANK0 ] unsigned char 
  1288 ;;  i               1   26[BANK0 ] unsigned char 
  1289 ;; Return value:  Size  Location     Type
  1290 ;;                  1    wreg      void 
  1291 ;; Registers used:
  1292 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1293 ;; Tracked objects:
  1294 ;;		On entry : 0/0
  1295 ;;		On exit  : 0/0
  1296 ;;		Unchanged: 0/0
  1297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1298 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1299 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1300 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1301 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1302 ;;Total ram usage:        9 bytes
  1303 ;; Hardware stack levels required when called:    9
  1304 ;; This function calls:
  1305 ;;		_I2C_Master_Init
  1306 ;;		_I2C_Master_Read
  1307 ;;		_I2C_Master_Start
  1308 ;;		_I2C_Master_Stop
  1309 ;;		_I2C_Master_Write
  1310 ;;		_initLCD
  1311 ;;		_lcdInst
  1312 ;;		_printf
  1313 ;;		_readADC
  1314 ;;		_stopOperation
  1315 ;;		_testBatteries
  1316 ;;		_wait_2ms
  1317 ;; This function is called by:
  1318 ;;		Startup code after reset
  1319 ;; This function uses a non-reentrant model
  1320 ;;
  1321                           
  1322                           	psect	text0
  1323  000012                     __ptext0:
  1324                           	opt stack 0
  1325  000012                     _main:
  1326                           	opt stack 22
  1327                           
  1328                           ;main.c: 47: TRISA = 0b00101111;
  1329                           
  1330                           ;incstack = 0
  1331  000012  0E2F               	movlw	47
  1332  000014  6E92               	movwf	3986,c	;volatile
  1333                           
  1334                           ;main.c: 48: TRISB = 0b11110010;
  1335  000016  0EF2               	movlw	242
  1336  000018  6E93               	movwf	3987,c	;volatile
  1337                           
  1338                           ;main.c: 49: TRISC = 0x00;
  1339  00001A  0E00               	movlw	0
  1340  00001C  6E94               	movwf	3988,c	;volatile
  1341                           
  1342                           ;main.c: 50: TRISD = 0x00;
  1343  00001E  0E00               	movlw	0
  1344  000020  6E95               	movwf	3989,c	;volatile
  1345                           
  1346                           ;main.c: 51: TRISE = 0b00000001;
  1347  000022  0E01               	movlw	1
  1348  000024  6E96               	movwf	3990,c	;volatile
  1349                           
  1350                           ;main.c: 53: LATA = 0x00;
  1351  000026  0E00               	movlw	0
  1352  000028  6E89               	movwf	3977,c	;volatile
  1353                           
  1354                           ;main.c: 54: LATB = 0x00;
  1355  00002A  0E00               	movlw	0
  1356  00002C  6E8A               	movwf	3978,c	;volatile
  1357                           
  1358                           ;main.c: 55: LATC = 0x00;
  1359  00002E  0E00               	movlw	0
  1360  000030  6E8B               	movwf	3979,c	;volatile
  1361                           
  1362                           ;main.c: 56: LATD = 0x00;
  1363  000032  0E00               	movlw	0
  1364  000034  6E8C               	movwf	3980,c	;volatile
  1365                           
  1366                           ;main.c: 57: LATE = 0x00;
  1367  000036  0E00               	movlw	0
  1368  000038  6E8D               	movwf	3981,c	;volatile
  1369                           
  1370                           ;main.c: 59: ADCON0 = 0x00;
  1371  00003A  0E00               	movlw	0
  1372  00003C  6EC2               	movwf	4034,c	;volatile
  1373                           
  1374                           ;main.c: 60: ADCON1 = 0b00001001;
  1375  00003E  0E09               	movlw	9
  1376  000040  6EC1               	movwf	4033,c	;volatile
  1377                           
  1378                           ;main.c: 61: ADCON2 = 0b10110001;
  1379  000042  0EB1               	movlw	177
  1380  000044  6EC0               	movwf	4032,c	;volatile
  1381                           
  1382                           ;main.c: 66: GIE = 1;
  1383  000046  8EF2               	bsf	intcon,7,c	;volatile
  1384                           
  1385                           ;main.c: 67: PEIE = 1;
  1386  000048  8CF2               	bsf	intcon,6,c	;volatile
  1387                           
  1388                           ;main.c: 68: INT1IE = 1;
  1389  00004A  86F0               	bsf	intcon3,3,c	;volatile
  1390                           
  1391                           ;main.c: 69: INT1IF = 0;
  1392  00004C  90F0               	bcf	intcon3,0,c	;volatile
  1393                           
  1394                           ;main.c: 70: TMR0IE = 1;
  1395  00004E  8AF2               	bsf	intcon,5,c	;volatile
  1396                           
  1397                           ;main.c: 71: TMR0IF = 0;
  1398  000050  94F2               	bcf	intcon,2,c	;volatile
  1399                           
  1400                           ;main.c: 72: TMR1IE = 1;
  1401  000052  809D               	bsf	3997,0,c	;volatile
  1402                           
  1403                           ;main.c: 73: TMR1IF = 0;
  1404  000054  909E               	bcf	3998,0,c	;volatile
  1405                           
  1406                           ;main.c: 77: T0CON = 0b00000111;
  1407  000056  0E07               	movlw	7
  1408  000058  6ED5               	movwf	4053,c	;volatile
  1409                           
  1410                           ;main.c: 85: TMR0 = 55770;
  1411  00005A  0ED9               	movlw	217
  1412  00005C  6ED7               	movwf	4055,c	;volatile
  1413  00005E  0EDA               	movlw	218
  1414  000060  6ED6               	movwf	4054,c	;volatile
  1415                           
  1416                           ;main.c: 94: T1CON = 0b10000000;
  1417  000062  0E80               	movlw	128
  1418  000064  6ECD               	movwf	4045,c	;volatile
  1419                           
  1420                           ;main.c: 103: TMR1 = 60535;
  1421  000066  0EEC               	movlw	236
  1422  000068  6ECF               	movwf	4047,c	;volatile
  1423  00006A  0E77               	movlw	119
  1424  00006C  6ECE               	movwf	4046,c	;volatile
  1425                           
  1426                           ;main.c: 112: initLCD();
  1427  00006E  ECDE  F00D         	call	_initLCD	;wreg free
  1428                           
  1429                           ;main.c: 113: nRBPU = 0;
  1430  000072  9EF1               	bcf	intcon2,7,c	;volatile
  1431                           
  1432                           ;main.c: 114: I2C_Master_Init(10000);
  1433  000074  0E10               	movlw	16
  1434  000076  6E3E               	movwf	I2C_Master_Init@c,c
  1435  000078  0E27               	movlw	39
  1436  00007A  6E3F               	movwf	I2C_Master_Init@c+1,c
  1437  00007C  0E00               	movlw	0
  1438  00007E  6E40               	movwf	I2C_Master_Init@c+2,c
  1439  000080  0E00               	movlw	0
  1440  000082  6E41               	movwf	I2C_Master_Init@c+3,c
  1441  000084  EC11  F00D         	call	_I2C_Master_Init	;wreg free
  1442                           
  1443                           ;main.c: 115: (INTCONbits.GIE = 1);
  1444  000088  8EF2               	bsf	intcon,7,c	;volatile
  1445                           
  1446                           ;main.c: 118: while (screenMode == 2){
  1447                           
  1448                           ;main.c: 117: while (1) {
  1449  00008A  D050               	goto	l4594
  1450  00008C                     l4556:
  1451                           
  1452                           ;main.c: 119: lcdInst(0b10000000);;
  1453  00008C  0E80               	movlw	128
  1454  00008E  ECF8  F00E         	call	_lcdInst
  1455                           
  1456                           ;main.c: 120: printf("PRESS * TO START");
  1457  000092  0EDE               	movlw	low STR_1
  1458  000094  6E3D               	movwf	printf@f,c
  1459  000096  0EFF               	movlw	high STR_1
  1460  000098  6E3E               	movwf	printf@f+1,c
  1461  00009A  EC76  F004         	call	_printf	;wreg free
  1462                           
  1463                           ;main.c: 121: lcdInst(0b11000000);;
  1464  00009E  0EC0               	movlw	192
  1465  0000A0  ECF8  F00E         	call	_lcdInst
  1466                           
  1467                           ;main.c: 122: printf("< TOGGLE  LOGS >");
  1468  0000A4  0ECD               	movlw	low STR_2
  1469  0000A6  6E3D               	movwf	printf@f,c
  1470  0000A8  0EFF               	movlw	high STR_2
  1471  0000AA  6E3E               	movwf	printf@f+1,c
  1472  0000AC  EC76  F004         	call	_printf	;wreg free
  1473                           
  1474                           ;main.c: 123: for(unsigned char i=0;i<50;i++){
  1475  0000B0  0E00               	movlw	0
  1476  0000B2  0100               	movlb	0	; () banked
  1477  0000B4  6FC5               	movwf	main@i& (0+255),b
  1478  0000B6                     l4564:
  1479                           
  1480                           ; BSR set to: 0
  1481  0000B6  0E31               	movlw	49
  1482  0000B8  0100               	movlb	0	; () banked
  1483  0000BA  65C5               	cpfsgt	main@i& (0+255),b
  1484  0000BC  D001               	goto	l4568
  1485  0000BE  D011               	goto	l4576
  1486  0000C0                     l4568:
  1487                           
  1488                           ; BSR set to: 0
  1489                           ;main.c: 124: if (screenMode != 2)
  1490  0000C0  0E02               	movlw	2
  1491  0000C2  0100               	movlb	0	; () banked
  1492  0000C4  19CC               	xorwf	_screenMode& (0+255),w,b
  1493  0000C6  A4D8               	btfss	status,2,c
  1494  0000C8  D00C               	goto	l4576
  1495                           
  1496                           ; BSR set to: 0
  1497                           ;main.c: 126: _delay((unsigned long)((10)*(10000000/4000.0)));
  1498                           
  1499                           ; BSR set to: 0
  1500                           
  1501                           ; BSR set to: 0
  1502                           ;main.c: 125: break;
  1503  0000CA  0E21               	movlw	33
  1504  0000CC  0100               	movlb	0	; () banked
  1505  0000CE  6FC3               	movwf	??_main& (0+255),b
  1506  0000D0  0E76               	movlw	118
  1507  0000D2                     u5227:
  1508  0000D2  2EE8               	decfsz	wreg,f,c
  1509  0000D4  D7FE               	bra	u5227
  1510  0000D6  2FC3               	decfsz	??_main& (0+255),f,b
  1511  0000D8  D7FC               	bra	u5227
  1512  0000DA  F000               	nop	
  1513  0000DC  0100               	movlb	0	; () banked
  1514  0000DE  2BC5               	incf	main@i& (0+255),f,b
  1515  0000E0  D7EA               	goto	l4564
  1516  0000E2                     l4576:
  1517                           
  1518                           ; BSR set to: 0
  1519                           ;main.c: 127: }
  1520                           ;main.c: 128: lcdInst(0b10000000);;
  1521  0000E2  0E80               	movlw	128
  1522  0000E4  ECF8  F00E         	call	_lcdInst
  1523                           
  1524                           ;main.c: 129: lcdInst(0b11000000);;
  1525  0000E8  0EC0               	movlw	192
  1526  0000EA  ECF8  F00E         	call	_lcdInst
  1527                           
  1528                           ;main.c: 130: printf(" <TOGGLE  LOGS> ");
  1529  0000EE  0EBC               	movlw	low STR_3
  1530  0000F0  6E3D               	movwf	printf@f,c
  1531  0000F2  0EFF               	movlw	high STR_3
  1532  0000F4  6E3E               	movwf	printf@f+1,c
  1533  0000F6  EC76  F004         	call	_printf	;wreg free
  1534                           
  1535                           ;main.c: 131: for(unsigned char i=0;i<50;i++){
  1536  0000FA  0E00               	movlw	0
  1537  0000FC  0100               	movlb	0	; () banked
  1538  0000FE  6FC6               	movwf	main@i_583& (0+255),b
  1539  000100                     l4582:
  1540                           
  1541                           ; BSR set to: 0
  1542  000100  0E31               	movlw	49
  1543  000102  0100               	movlb	0	; () banked
  1544  000104  65C6               	cpfsgt	main@i_583& (0+255),b
  1545  000106  D001               	goto	l4586
  1546  000108  D011               	goto	l4594
  1547  00010A                     l4586:
  1548                           
  1549                           ; BSR set to: 0
  1550                           ;main.c: 132: if (screenMode != 2)
  1551  00010A  0E02               	movlw	2
  1552  00010C  0100               	movlb	0	; () banked
  1553  00010E  19CC               	xorwf	_screenMode& (0+255),w,b
  1554  000110  A4D8               	btfss	status,2,c
  1555  000112  D00C               	goto	l4594
  1556                           
  1557                           ; BSR set to: 0
  1558                           ;main.c: 134: _delay((unsigned long)((10)*(10000000/4000.0)));
  1559                           
  1560                           ; BSR set to: 0
  1561                           
  1562                           ; BSR set to: 0
  1563                           ;main.c: 133: break;
  1564  000114  0E21               	movlw	33
  1565  000116  0100               	movlb	0	; () banked
  1566  000118  6FC3               	movwf	??_main& (0+255),b
  1567  00011A  0E76               	movlw	118
  1568  00011C                     u5237:
  1569  00011C  2EE8               	decfsz	wreg,f,c
  1570  00011E  D7FE               	bra	u5237
  1571  000120  2FC3               	decfsz	??_main& (0+255),f,b
  1572  000122  D7FC               	bra	u5237
  1573  000124  F000               	nop	
  1574  000126  0100               	movlb	0	; () banked
  1575  000128  2BC6               	incf	main@i_583& (0+255),f,b
  1576  00012A  D7EA               	goto	l4582
  1577  00012C                     l4594:
  1578  00012C  0E02               	movlw	2
  1579  00012E  0100               	movlb	0	; () banked
  1580  000130  19CC               	xorwf	_screenMode& (0+255),w,b
  1581  000132  A4D8               	btfss	status,2,c
  1582  000134  D251               	goto	l4820
  1583  000136  D7AA               	goto	l4556
  1584  000138                     l4596:
  1585                           
  1586                           ; BSR set to: 0
  1587                           ;main.c: 145: readADC(0);
  1588  000138  0E00               	movlw	0
  1589  00013A  ECD6  F00E         	call	_readADC
  1590                           
  1591                           ;main.c: 146: lcdInst(0b10000000);;
  1592  00013E  0E80               	movlw	128
  1593  000140  ECF8  F00E         	call	_lcdInst
  1594                           
  1595                           ;main.c: 147: lcdInst(0b11000000);;
  1596  000144  0EC0               	movlw	192
  1597  000146  ECF8  F00E         	call	_lcdInst
  1598                           
  1599                           ;main.c: 148: printf("%4d %2d         ", ADRES, countDrain+countAA+count9V+countC);
  1600  00014A  0E23               	movlw	low STR_4
  1601  00014C  6E3D               	movwf	printf@f,c
  1602  00014E  0EFF               	movlw	high STR_4
  1603  000150  6E3E               	movwf	printf@f+1,c
  1604  000152  CFC3 F03F          	movff	4035,?_printf+2	;volatile
  1605  000156  CFC4 F040          	movff	4036,?_printf+3	;volatile
  1606  00015A  0100               	movlb	0	; () banked
  1607  00015C  519F               	movf	_countAA& (0+255),w,b
  1608  00015E  C0A1  F0C3         	movff	_countDrain,??_main
  1609  000162  0100               	movlb	0	; () banked
  1610  000164  6BC4               	clrf	(??_main+1)& (0+255),b
  1611  000166  0100               	movlb	0	; () banked
  1612  000168  27C3               	addwf	??_main& (0+255),f,b
  1613  00016A  0E00               	movlw	0
  1614  00016C  23C4               	addwfc	(??_main+1)& (0+255),f,b
  1615  00016E  0100               	movlb	0	; () banked
  1616  000170  519E               	movf	_count9V& (0+255),w,b
  1617  000172  0100               	movlb	0	; () banked
  1618  000174  27C3               	addwf	??_main& (0+255),f,b
  1619  000176  0E00               	movlw	0
  1620  000178  23C4               	addwfc	(??_main+1)& (0+255),f,b
  1621  00017A  0100               	movlb	0	; () banked
  1622  00017C  51A0               	movf	_countC& (0+255),w,b
  1623  00017E  0100               	movlb	0	; () banked
  1624  000180  25C3               	addwf	??_main& (0+255),w,b
  1625  000182  6E41               	movwf	?_printf+4,c
  1626  000184  0100               	movlb	0	; () banked
  1627  000186  0E00               	movlw	0
  1628  000188  0100               	movlb	0	; () banked
  1629  00018A  21C4               	addwfc	(??_main+1)& (0+255),w,b
  1630  00018C  6E42               	movwf	?_printf+5,c
  1631  00018E  EC76  F004         	call	_printf	;wreg free
  1632                           
  1633                           ;main.c: 149: if (startGear){
  1634  000192  0100               	movlb	0	; () banked
  1635  000194  51AA               	movf	_startGear& (0+255),w,b
  1636  000196  B4D8               	btfsc	status,2,c
  1637  000198  D073               	goto	l4660
  1638                           
  1639                           ; BSR set to: 0
  1640                           ;main.c: 150: wait_2ms(2000);
  1641  00019A  0E07               	movlw	7
  1642  00019C  6E32               	movwf	wait_2ms@x+1,c
  1643  00019E  0ED0               	movlw	208
  1644  0001A0  6E31               	movwf	wait_2ms@x,c
  1645  0001A2  ECC9  F00E         	call	_wait_2ms	;wreg free
  1646                           
  1647                           ;main.c: 151: startGear = 0;
  1648  0001A6  0E00               	movlw	0
  1649  0001A8  0100               	movlb	0	; () banked
  1650  0001AA  6FAA               	movwf	_startGear& (0+255),b
  1651                           
  1652                           ; BSR set to: 0
  1653                           ;main.c: 152: LATDbits.LD0= 0;;
  1654  0001AC  908C               	bcf	3980,0,c	;volatile
  1655                           
  1656                           ; BSR set to: 0
  1657                           ;main.c: 153: doneTimer = 0;
  1658  0001AE  0E00               	movlw	0
  1659  0001B0  6E49               	movwf	_doneTimer,c
  1660                           
  1661                           ; BSR set to: 0
  1662                           ;main.c: 155: unsigned char steps = 0;
  1663  0001B2  0E00               	movlw	0
  1664  0001B4  0100               	movlb	0	; () banked
  1665  0001B6  6FCA               	movwf	main@steps& (0+255),b
  1666                           
  1667                           ;main.c: 156: while(steps<20 && screenMode==1){
  1668  0001B8  D016               	goto	l4622
  1669  0001BA                     l4612:
  1670                           
  1671                           ; BSR set to: 0
  1672                           ;main.c: 157: steps++;
  1673  0001BA  0100               	movlb	0	; () banked
  1674  0001BC  2BCA               	incf	main@steps& (0+255),f,b
  1675                           
  1676                           ; BSR set to: 0
  1677                           ;main.c: 158: LATDbits.LD1 = 1;;
  1678  0001BE  828C               	bsf	3980,1,c	;volatile
  1679                           
  1680                           ; BSR set to: 0
  1681                           ;main.c: 159: _delay((unsigned long)((5)*(10000000/4000.0)));
  1682  0001C0  0E11               	movlw	17
  1683  0001C2  0100               	movlb	0	; () banked
  1684  0001C4  6FC3               	movwf	??_main& (0+255),b
  1685  0001C6  0E3A               	movlw	58
  1686  0001C8                     u5247:
  1687  0001C8  2EE8               	decfsz	wreg,f,c
  1688  0001CA  D7FE               	bra	u5247
  1689  0001CC  2FC3               	decfsz	??_main& (0+255),f,b
  1690  0001CE  D7FC               	bra	u5247
  1691  0001D0  F000               	nop	
  1692                           
  1693                           ;main.c: 160: LATDbits.LD1 = 0;;
  1694  0001D2  928C               	bcf	3980,1,c	;volatile
  1695                           
  1696                           ;main.c: 161: _delay((unsigned long)((5)*(10000000/4000.0)));
  1697  0001D4  0E11               	movlw	17
  1698  0001D6  0100               	movlb	0	; () banked
  1699  0001D8  6FC3               	movwf	??_main& (0+255),b
  1700  0001DA  0E3A               	movlw	58
  1701  0001DC                     u5257:
  1702  0001DC  2EE8               	decfsz	wreg,f,c
  1703  0001DE  D7FE               	bra	u5257
  1704  0001E0  2FC3               	decfsz	??_main& (0+255),f,b
  1705  0001E2  D7FC               	bra	u5257
  1706  0001E4  F000               	nop	
  1707  0001E6                     l4622:
  1708  0001E6  0E14               	movlw	20
  1709  0001E8  0100               	movlb	0	; () banked
  1710  0001EA  61CA               	cpfslt	main@steps& (0+255),b
  1711  0001EC  D004               	goto	l4626
  1712                           
  1713                           ; BSR set to: 0
  1714  0001EE  0100               	movlb	0	; () banked
  1715  0001F0  05CC               	decf	_screenMode& (0+255),w,b
  1716  0001F2  B4D8               	btfsc	status,2,c
  1717  0001F4  D7E2               	goto	l4612
  1718  0001F6                     l4626:
  1719                           
  1720                           ; BSR set to: 0
  1721                           ;main.c: 162: }
  1722                           ;main.c: 163: steps = 0;
  1723  0001F6  0E00               	movlw	0
  1724  0001F8  0100               	movlb	0	; () banked
  1725  0001FA  6FCA               	movwf	main@steps& (0+255),b
  1726                           
  1727                           ;main.c: 164: while(steps < 178 && screenMode==1){
  1728  0001FC  D014               	goto	l4638
  1729  0001FE                     l4628:
  1730                           
  1731                           ; BSR set to: 0
  1732                           ;main.c: 165: steps++;
  1733  0001FE  0100               	movlb	0	; () banked
  1734  000200  2BCA               	incf	main@steps& (0+255),f,b
  1735                           
  1736                           ; BSR set to: 0
  1737                           ;main.c: 166: LATDbits.LD1 = 1;;
  1738  000202  828C               	bsf	3980,1,c	;volatile
  1739                           
  1740                           ; BSR set to: 0
  1741                           ;main.c: 167: _delay((unsigned long)((2)*(10000000/4000.0)));
  1742  000204  0E07               	movlw	7
  1743  000206  0100               	movlb	0	; () banked
  1744  000208  6FC3               	movwf	??_main& (0+255),b
  1745  00020A  0E7D               	movlw	125
  1746  00020C                     u5267:
  1747  00020C  2EE8               	decfsz	wreg,f,c
  1748  00020E  D7FE               	bra	u5267
  1749  000210  2FC3               	decfsz	??_main& (0+255),f,b
  1750  000212  D7FC               	bra	u5267
  1751                           
  1752                           ;main.c: 168: LATDbits.LD1 = 0;;
  1753  000214  928C               	bcf	3980,1,c	;volatile
  1754                           
  1755                           ;main.c: 169: _delay((unsigned long)((2)*(10000000/4000.0)));
  1756  000216  0E07               	movlw	7
  1757  000218  0100               	movlb	0	; () banked
  1758  00021A  6FC3               	movwf	??_main& (0+255),b
  1759  00021C  0E7D               	movlw	125
  1760  00021E                     u5277:
  1761  00021E  2EE8               	decfsz	wreg,f,c
  1762  000220  D7FE               	bra	u5277
  1763  000222  2FC3               	decfsz	??_main& (0+255),f,b
  1764  000224  D7FC               	bra	u5277
  1765  000226                     l4638:
  1766  000226  0EB2               	movlw	178
  1767  000228  0100               	movlb	0	; () banked
  1768  00022A  61CA               	cpfslt	main@steps& (0+255),b
  1769  00022C  D004               	goto	l4642
  1770                           
  1771                           ; BSR set to: 0
  1772  00022E  0100               	movlb	0	; () banked
  1773  000230  05CC               	decf	_screenMode& (0+255),w,b
  1774  000232  B4D8               	btfsc	status,2,c
  1775  000234  D7E4               	goto	l4628
  1776  000236                     l4642:
  1777                           
  1778                           ; BSR set to: 0
  1779                           ;main.c: 170: }
  1780                           ;main.c: 171: steps = 0;
  1781  000236  0E00               	movlw	0
  1782  000238  0100               	movlb	0	; () banked
  1783  00023A  6FCA               	movwf	main@steps& (0+255),b
  1784                           
  1785                           ;main.c: 172: while(steps <2 && screenMode==1){
  1786  00023C  D016               	goto	l4654
  1787  00023E                     l4644:
  1788                           
  1789                           ; BSR set to: 0
  1790                           ;main.c: 173: steps++;
  1791  00023E  0100               	movlb	0	; () banked
  1792  000240  2BCA               	incf	main@steps& (0+255),f,b
  1793                           
  1794                           ; BSR set to: 0
  1795                           ;main.c: 174: LATDbits.LD1 = 1;;
  1796  000242  828C               	bsf	3980,1,c	;volatile
  1797                           
  1798                           ; BSR set to: 0
  1799                           ;main.c: 175: _delay((unsigned long)((5)*(10000000/4000.0)));
  1800  000244  0E11               	movlw	17
  1801  000246  0100               	movlb	0	; () banked
  1802  000248  6FC3               	movwf	??_main& (0+255),b
  1803  00024A  0E3A               	movlw	58
  1804  00024C                     u5287:
  1805  00024C  2EE8               	decfsz	wreg,f,c
  1806  00024E  D7FE               	bra	u5287
  1807  000250  2FC3               	decfsz	??_main& (0+255),f,b
  1808  000252  D7FC               	bra	u5287
  1809  000254  F000               	nop	
  1810                           
  1811                           ;main.c: 176: LATDbits.LD1 = 0;;
  1812  000256  928C               	bcf	3980,1,c	;volatile
  1813                           
  1814                           ;main.c: 177: _delay((unsigned long)((5)*(10000000/4000.0)));
  1815  000258  0E11               	movlw	17
  1816  00025A  0100               	movlb	0	; () banked
  1817  00025C  6FC3               	movwf	??_main& (0+255),b
  1818  00025E  0E3A               	movlw	58
  1819  000260                     u5297:
  1820  000260  2EE8               	decfsz	wreg,f,c
  1821  000262  D7FE               	bra	u5297
  1822  000264  2FC3               	decfsz	??_main& (0+255),f,b
  1823  000266  D7FC               	bra	u5297
  1824  000268  F000               	nop	
  1825  00026A                     l4654:
  1826  00026A  0E02               	movlw	2
  1827  00026C  0100               	movlb	0	; () banked
  1828  00026E  61CA               	cpfslt	main@steps& (0+255),b
  1829  000270  D004               	goto	l4658
  1830                           
  1831                           ; BSR set to: 0
  1832  000272  0100               	movlb	0	; () banked
  1833  000274  05CC               	decf	_screenMode& (0+255),w,b
  1834  000276  B4D8               	btfsc	status,2,c
  1835  000278  D7E2               	goto	l4644
  1836  00027A                     l4658:
  1837                           
  1838                           ; BSR set to: 0
  1839                           ;main.c: 178: }
  1840                           ;main.c: 179: steps = 0;
  1841  00027A  0E00               	movlw	0
  1842  00027C  0100               	movlb	0	; () banked
  1843  00027E  6FCA               	movwf	main@steps& (0+255),b
  1844  000280                     l4660:
  1845                           
  1846                           ; BSR set to: 0
  1847                           ;main.c: 180: }
  1848                           ;main.c: 183: if (ADRES < 22 | ADRES > 55){
  1849  000280  50C4               	movf	4036,w,c	;volatile
  1850  000282  E104               	bnz	u4821
  1851  000284  0E38               	movlw	56
  1852  000286  5CC3               	subwf	4035,w,c	;volatile
  1853  000288  A0D8               	btfss	status,0,c
  1854  00028A  D002               	goto	u4820
  1855  00028C                     u4821:
  1856  00028C  0E01               	movlw	1
  1857  00028E  D001               	goto	u4822
  1858  000290                     u4820:
  1859  000290  0E00               	movlw	0
  1860  000292                     u4822:
  1861  000292  0100               	movlb	0	; () banked
  1862  000294  6FC3               	movwf	??_main& (0+255),b
  1863  000296  50C4               	movf	4036,w,c	;volatile
  1864  000298  E106               	bnz	u4830
  1865  00029A  0E16               	movlw	22
  1866  00029C  5CC3               	subwf	4035,w,c	;volatile
  1867  00029E  B0D8               	btfsc	status,0,c
  1868  0002A0  D002               	goto	u4830
  1869  0002A2  0E01               	movlw	1
  1870  0002A4  D001               	goto	u4832
  1871  0002A6                     u4830:
  1872  0002A6  0E00               	movlw	0
  1873  0002A8                     u4832:
  1874  0002A8  0100               	movlb	0	; () banked
  1875  0002AA  11C3               	iorwf	??_main& (0+255),w,b
  1876  0002AC  A0E8               	btfss	wreg,0,c
  1877  0002AE  D18E               	goto	l4818
  1878                           
  1879                           ; BSR set to: 0
  1880                           ;main.c: 184: wait_2ms(250);
  1881  0002B0  0E00               	movlw	0
  1882  0002B2  6E32               	movwf	wait_2ms@x+1,c
  1883  0002B4  0EFA               	movlw	250
  1884  0002B6  6E31               	movwf	wait_2ms@x,c
  1885  0002B8  ECC9  F00E         	call	_wait_2ms	;wreg free
  1886                           
  1887                           ;main.c: 185: sorting = 1;
  1888  0002BC  0E01               	movlw	1
  1889  0002BE  6E4C               	movwf	_sorting,c
  1890                           
  1891                           ;main.c: 186: LATCbits.LC7 = 1;;
  1892  0002C0  8E8B               	bsf	3979,7,c	;volatile
  1893                           
  1894                           ;main.c: 187: wait_2ms(500);
  1895  0002C2  0E01               	movlw	1
  1896  0002C4  6E32               	movwf	wait_2ms@x+1,c
  1897  0002C6  0EF4               	movlw	244
  1898  0002C8  6E31               	movwf	wait_2ms@x,c
  1899  0002CA  ECC9  F00E         	call	_wait_2ms	;wreg free
  1900                           
  1901                           ;main.c: 188: testBatteries();
  1902  0002CE  EC1F  F009         	call	_testBatteries	;wreg free
  1903                           
  1904                           ;main.c: 189: LATCbits.LC7 = 0;;
  1905  0002D2  9E8B               	bcf	3979,7,c	;volatile
  1906                           
  1907                           ;main.c: 191: if (doubleAA)
  1908  0002D4  0100               	movlb	0	; () banked
  1909  0002D6  51A2               	movf	_doubleAA& (0+255),w,b
  1910  0002D8  B4D8               	btfsc	status,2,c
  1911  0002DA  D005               	goto	l4678
  1912                           
  1913                           ; BSR set to: 0
  1914                           ;main.c: 192: plat1Right = 512;
  1915  0002DC  0E02               	movlw	2
  1916  0002DE  0100               	movlb	0	; () banked
  1917  0002E0  6F91               	movwf	(_plat1Right+1)& (0+255),b
  1918  0002E2  0E00               	movlw	0
  1919  0002E4  6F90               	movwf	_plat1Right& (0+255),b
  1920  0002E6                     l4678:
  1921                           
  1922                           ; BSR set to: 0
  1923                           ;main.c: 193: if (plat1Left)
  1924  0002E6  0100               	movlb	0	; () banked
  1925  0002E8  518E               	movf	_plat1Left& (0+255),w,b
  1926  0002EA  0100               	movlb	0	; () banked
  1927  0002EC  118F               	iorwf	(_plat1Left+1)& (0+255),w,b
  1928  0002EE  B4D8               	btfsc	status,2,c
  1929  0002F0  D002               	goto	l4682
  1930                           
  1931                           ; BSR set to: 0
  1932                           ;main.c: 194: step1 = 1;
  1933  0002F2  0E01               	movlw	1
  1934  0002F4  6E4D               	movwf	_step1,c
  1935  0002F6                     l4682:
  1936                           
  1937                           ; BSR set to: 0
  1938                           ;main.c: 195: if (plat1Right)
  1939  0002F6  0100               	movlb	0	; () banked
  1940  0002F8  5190               	movf	_plat1Right& (0+255),w,b
  1941  0002FA  0100               	movlb	0	; () banked
  1942  0002FC  1191               	iorwf	(_plat1Right+1)& (0+255),w,b
  1943  0002FE  B4D8               	btfsc	status,2,c
  1944  000300  D002               	goto	l4686
  1945                           
  1946                           ; BSR set to: 0
  1947                           ;main.c: 196: step1 = 4;
  1948  000302  0E04               	movlw	4
  1949  000304  6E4D               	movwf	_step1,c
  1950  000306                     l4686:
  1951                           
  1952                           ; BSR set to: 0
  1953                           ;main.c: 197: if (plat2Left)
  1954  000306  0100               	movlb	0	; () banked
  1955  000308  5192               	movf	_plat2Left& (0+255),w,b
  1956  00030A  0100               	movlb	0	; () banked
  1957  00030C  1193               	iorwf	(_plat2Left+1)& (0+255),w,b
  1958  00030E  B4D8               	btfsc	status,2,c
  1959  000310  D002               	goto	l4690
  1960                           
  1961                           ; BSR set to: 0
  1962                           ;main.c: 198: step2 = 1;
  1963  000312  0E01               	movlw	1
  1964  000314  6E4E               	movwf	_step2,c
  1965  000316                     l4690:
  1966                           
  1967                           ; BSR set to: 0
  1968                           ;main.c: 199: if (plat2Right)
  1969  000316  0100               	movlb	0	; () banked
  1970  000318  5194               	movf	_plat2Right& (0+255),w,b
  1971  00031A  0100               	movlb	0	; () banked
  1972  00031C  1195               	iorwf	(_plat2Right+1)& (0+255),w,b
  1973  00031E  B4D8               	btfsc	status,2,c
  1974  000320  D002               	goto	l4694
  1975                           
  1976                           ; BSR set to: 0
  1977                           ;main.c: 200: step2 = 4;
  1978  000322  0E04               	movlw	4
  1979  000324  6E4E               	movwf	_step2,c
  1980  000326                     l4694:
  1981                           
  1982                           ; BSR set to: 0
  1983                           ;main.c: 202: turn1BackRight = plat1Left;
  1984  000326  C08E  F098         	movff	_plat1Left,_turn1BackRight
  1985  00032A  C08F  F099         	movff	_plat1Left+1,_turn1BackRight+1
  1986                           
  1987                           ; BSR set to: 0
  1988                           ;main.c: 203: turn1BackLeft = plat1Right;
  1989  00032E  C090  F096         	movff	_plat1Right,_turn1BackLeft
  1990  000332  C091  F097         	movff	_plat1Right+1,_turn1BackLeft+1
  1991                           
  1992                           ; BSR set to: 0
  1993                           ;main.c: 204: turn2BackRight = plat2Left;
  1994  000336  C092  F09C         	movff	_plat2Left,_turn2BackRight
  1995  00033A  C093  F09D         	movff	_plat2Left+1,_turn2BackRight+1
  1996                           
  1997                           ; BSR set to: 0
  1998                           ;main.c: 205: turn2BackLeft = plat2Right;
  1999  00033E  C094  F09A         	movff	_plat2Right,_turn2BackLeft
  2000  000342  C095  F09B         	movff	_plat2Right+1,_turn2BackLeft+1
  2001                           
  2002                           ; BSR set to: 0
  2003                           ;main.c: 207: LATCbits.LC1 = 1;;
  2004  000346  828B               	bsf	3979,1,c	;volatile
  2005                           
  2006                           ; BSR set to: 0
  2007                           ;main.c: 208: LATCbits.LC2 = 0;;
  2008  000348  948B               	bcf	3979,2,c	;volatile
  2009                           
  2010                           ; BSR set to: 0
  2011                           ;main.c: 209: LATCbits.LC0 = 1;;
  2012  00034A  808B               	bsf	3979,0,c	;volatile
  2013                           
  2014                           ; BSR set to: 0
  2015                           ;main.c: 210: LATEbits.LE2 = 0;;
  2016  00034C  948D               	bcf	3981,2,c	;volatile
  2017  00034E                     l4710:
  2018                           
  2019                           ; BSR set to: 0
  2020  00034E  0100               	movlb	0	; () banked
  2021  000350  5192               	movf	_plat2Left& (0+255),w,b
  2022  000352  0100               	movlb	0	; () banked
  2023  000354  118E               	iorwf	_plat1Left& (0+255),w,b
  2024  000356  0100               	movlb	0	; () banked
  2025  000358  6FC3               	movwf	??_main& (0+255),b
  2026  00035A  0100               	movlb	0	; () banked
  2027  00035C  5193               	movf	(_plat2Left+1)& (0+255),w,b
  2028  00035E  0100               	movlb	0	; () banked
  2029  000360  118F               	iorwf	(_plat1Left+1)& (0+255),w,b
  2030  000362  0100               	movlb	0	; () banked
  2031  000364  6FC4               	movwf	(??_main+1)& (0+255),b
  2032  000366  0100               	movlb	0	; () banked
  2033  000368  5190               	movf	_plat1Right& (0+255),w,b
  2034  00036A  0100               	movlb	0	; () banked
  2035  00036C  13C3               	iorwf	??_main& (0+255),f,b
  2036  00036E  0100               	movlb	0	; () banked
  2037  000370  5191               	movf	(_plat1Right+1)& (0+255),w,b
  2038  000372  0100               	movlb	0	; () banked
  2039  000374  13C4               	iorwf	(??_main+1)& (0+255),f,b
  2040  000376  0100               	movlb	0	; () banked
  2041  000378  5194               	movf	_plat2Right& (0+255),w,b
  2042  00037A  0100               	movlb	0	; () banked
  2043  00037C  13C3               	iorwf	??_main& (0+255),f,b
  2044  00037E  0100               	movlb	0	; () banked
  2045  000380  5195               	movf	(_plat2Right+1)& (0+255),w,b
  2046  000382  0100               	movlb	0	; () banked
  2047  000384  13C4               	iorwf	(??_main+1)& (0+255),f,b
  2048  000386  0100               	movlb	0	; () banked
  2049  000388  51C3               	movf	??_main& (0+255),w,b
  2050  00038A  0100               	movlb	0	; () banked
  2051  00038C  11C4               	iorwf	(??_main+1)& (0+255),w,b
  2052  00038E  B4D8               	btfsc	status,2,c
  2053  000390  D004               	goto	l4714
  2054                           
  2055                           ; BSR set to: 0
  2056  000392  0100               	movlb	0	; () banked
  2057  000394  05CC               	decf	_screenMode& (0+255),w,b
  2058  000396  B4D8               	btfsc	status,2,c
  2059  000398  D7DA               	goto	l4710
  2060  00039A                     l4714:
  2061                           
  2062                           ; BSR set to: 0
  2063                           ;main.c: 214: if (doubleAA){
  2064  00039A  0100               	movlb	0	; () banked
  2065  00039C  51A2               	movf	_doubleAA& (0+255),w,b
  2066  00039E  B4D8               	btfsc	status,2,c
  2067  0003A0  D00B               	goto	l4720
  2068                           
  2069                           ; BSR set to: 0
  2070                           ;main.c: 215: plat2Left = 512;
  2071  0003A2  0E02               	movlw	2
  2072  0003A4  0100               	movlb	0	; () banked
  2073  0003A6  6F93               	movwf	(_plat2Left+1)& (0+255),b
  2074  0003A8  0E00               	movlw	0
  2075  0003AA  6F92               	movwf	_plat2Left& (0+255),b
  2076                           
  2077                           ;main.c: 216: step2 = 1;
  2078  0003AC  0E01               	movlw	1
  2079  0003AE  6E4E               	movwf	_step2,c
  2080                           
  2081                           ; BSR set to: 0
  2082                           ;main.c: 217: turn2BackRight = plat2Left;
  2083  0003B0  C092  F09C         	movff	_plat2Left,_turn2BackRight
  2084  0003B4  C093  F09D         	movff	_plat2Left+1,_turn2BackRight+1
  2085  0003B8                     l4720:
  2086                           
  2087                           ; BSR set to: 0
  2088  0003B8  0100               	movlb	0	; () banked
  2089  0003BA  5192               	movf	_plat2Left& (0+255),w,b
  2090  0003BC  0100               	movlb	0	; () banked
  2091  0003BE  1193               	iorwf	(_plat2Left+1)& (0+255),w,b
  2092  0003C0  B4D8               	btfsc	status,2,c
  2093  0003C2  D004               	goto	l4724
  2094                           
  2095                           ; BSR set to: 0
  2096  0003C4  0100               	movlb	0	; () banked
  2097  0003C6  05CC               	decf	_screenMode& (0+255),w,b
  2098  0003C8  B4D8               	btfsc	status,2,c
  2099  0003CA  D7F6               	goto	l4720
  2100  0003CC                     l4724:
  2101                           
  2102                           ; BSR set to: 0
  2103                           ;main.c: 221: wait_2ms(500);
  2104  0003CC  0E01               	movlw	1
  2105  0003CE  6E32               	movwf	wait_2ms@x+1,c
  2106  0003D0  0EF4               	movlw	244
  2107  0003D2  6E31               	movwf	wait_2ms@x,c
  2108  0003D4  ECC9  F00E         	call	_wait_2ms	;wreg free
  2109                           
  2110                           ;main.c: 223: if (((countC + countAA + count9V + countDrain) >= 15))
  2111  0003D8  0100               	movlb	0	; () banked
  2112  0003DA  519F               	movf	_countAA& (0+255),w,b
  2113  0003DC  C0A0  F0C3         	movff	_countC,??_main
  2114  0003E0  0100               	movlb	0	; () banked
  2115  0003E2  6BC4               	clrf	(??_main+1)& (0+255),b
  2116  0003E4  0100               	movlb	0	; () banked
  2117  0003E6  27C3               	addwf	??_main& (0+255),f,b
  2118  0003E8  0E00               	movlw	0
  2119  0003EA  23C4               	addwfc	(??_main+1)& (0+255),f,b
  2120  0003EC  0100               	movlb	0	; () banked
  2121  0003EE  519E               	movf	_count9V& (0+255),w,b
  2122  0003F0  0100               	movlb	0	; () banked
  2123  0003F2  27C3               	addwf	??_main& (0+255),f,b
  2124  0003F4  0E00               	movlw	0
  2125  0003F6  23C4               	addwfc	(??_main+1)& (0+255),f,b
  2126  0003F8  0100               	movlb	0	; () banked
  2127  0003FA  51A1               	movf	_countDrain& (0+255),w,b
  2128  0003FC  0100               	movlb	0	; () banked
  2129  0003FE  27C3               	addwf	??_main& (0+255),f,b
  2130  000400  0E00               	movlw	0
  2131  000402  23C4               	addwfc	(??_main+1)& (0+255),f,b
  2132  000404  0100               	movlb	0	; () banked
  2133  000406  BFC4               	btfsc	(??_main+1)& (0+255),7,b
  2134  000408  D009               	goto	l4730
  2135  00040A  0100               	movlb	0	; () banked
  2136  00040C  51C4               	movf	(??_main+1)& (0+255),w,b
  2137  00040E  E104               	bnz	u4950
  2138  000410  0E0F               	movlw	15
  2139  000412  0100               	movlb	0	; () banked
  2140  000414  5DC3               	subwf	??_main& (0+255),w,b
  2141  000416  B0D8               	btfsc	status,0,c
  2142  000418                     u4950:
  2143                           
  2144                           ; BSR set to: 0
  2145                           ;main.c: 224: stopOperation();
  2146  000418  EC47  F00A         	call	_stopOperation	;wreg free
  2147  00041C                     l4730:
  2148                           
  2149                           ;main.c: 226: LATCbits.LC1 = 1;;
  2150  00041C  828B               	bsf	3979,1,c	;volatile
  2151                           
  2152                           ;main.c: 227: LATCbits.LC2 = 0;;
  2153  00041E  948B               	bcf	3979,2,c	;volatile
  2154                           
  2155                           ;main.c: 228: LATCbits.LC0 = 1;;
  2156  000420  808B               	bsf	3979,0,c	;volatile
  2157                           
  2158                           ;main.c: 229: LATEbits.LE2 = 0;;
  2159  000422  948D               	bcf	3981,2,c	;volatile
  2160                           
  2161                           ;main.c: 230: plat1Left = turn1BackLeft;
  2162  000424  C096  F08E         	movff	_turn1BackLeft,_plat1Left
  2163  000428  C097  F08F         	movff	_turn1BackLeft+1,_plat1Left+1
  2164                           
  2165                           ;main.c: 231: plat1Right = turn1BackRight;
  2166  00042C  C098  F090         	movff	_turn1BackRight,_plat1Right
  2167  000430  C099  F091         	movff	_turn1BackRight+1,_plat1Right+1
  2168                           
  2169                           ;main.c: 232: plat2Left = turn2BackLeft;
  2170  000434  C09A  F092         	movff	_turn2BackLeft,_plat2Left
  2171  000438  C09B  F093         	movff	_turn2BackLeft+1,_plat2Left+1
  2172                           
  2173                           ;main.c: 233: plat2Right = turn2BackRight;
  2174  00043C  C09C  F094         	movff	_turn2BackRight,_plat2Right
  2175  000440  C09D  F095         	movff	_turn2BackRight+1,_plat2Right+1
  2176                           
  2177                           ;main.c: 235: unsigned char steps = 0;
  2178  000444  0E00               	movlw	0
  2179  000446  0100               	movlb	0	; () banked
  2180  000448  6FCB               	movwf	main@steps_605& (0+255),b
  2181                           
  2182                           ;main.c: 236: while(steps<20 && screenMode==1){
  2183  00044A  D016               	goto	l4758
  2184  00044C                     l4748:
  2185                           
  2186                           ; BSR set to: 0
  2187                           ;main.c: 237: steps++;
  2188  00044C  0100               	movlb	0	; () banked
  2189  00044E  2BCB               	incf	main@steps_605& (0+255),f,b
  2190                           
  2191                           ; BSR set to: 0
  2192                           ;main.c: 238: LATDbits.LD1 = 1;;
  2193  000450  828C               	bsf	3980,1,c	;volatile
  2194                           
  2195                           ; BSR set to: 0
  2196                           ;main.c: 239: _delay((unsigned long)((5)*(10000000/4000.0)));
  2197  000452  0E11               	movlw	17
  2198  000454  0100               	movlb	0	; () banked
  2199  000456  6FC3               	movwf	??_main& (0+255),b
  2200  000458  0E3A               	movlw	58
  2201  00045A                     u5307:
  2202  00045A  2EE8               	decfsz	wreg,f,c
  2203  00045C  D7FE               	bra	u5307
  2204  00045E  2FC3               	decfsz	??_main& (0+255),f,b
  2205  000460  D7FC               	bra	u5307
  2206  000462  F000               	nop	
  2207                           
  2208                           ;main.c: 240: LATDbits.LD1 = 0;;
  2209  000464  928C               	bcf	3980,1,c	;volatile
  2210                           
  2211                           ;main.c: 241: _delay((unsigned long)((5)*(10000000/4000.0)));
  2212  000466  0E11               	movlw	17
  2213  000468  0100               	movlb	0	; () banked
  2214  00046A  6FC3               	movwf	??_main& (0+255),b
  2215  00046C  0E3A               	movlw	58
  2216  00046E                     u5317:
  2217  00046E  2EE8               	decfsz	wreg,f,c
  2218  000470  D7FE               	bra	u5317
  2219  000472  2FC3               	decfsz	??_main& (0+255),f,b
  2220  000474  D7FC               	bra	u5317
  2221  000476  F000               	nop	
  2222  000478                     l4758:
  2223  000478  0E14               	movlw	20
  2224  00047A  0100               	movlb	0	; () banked
  2225  00047C  61CB               	cpfslt	main@steps_605& (0+255),b
  2226  00047E  D004               	goto	l4762
  2227                           
  2228                           ; BSR set to: 0
  2229  000480  0100               	movlb	0	; () banked
  2230  000482  05CC               	decf	_screenMode& (0+255),w,b
  2231  000484  B4D8               	btfsc	status,2,c
  2232  000486  D7E2               	goto	l4748
  2233  000488                     l4762:
  2234                           
  2235                           ; BSR set to: 0
  2236                           ;main.c: 242: }
  2237                           ;main.c: 243: steps = 0;
  2238  000488  0E00               	movlw	0
  2239  00048A  0100               	movlb	0	; () banked
  2240  00048C  6FCB               	movwf	main@steps_605& (0+255),b
  2241                           
  2242                           ;main.c: 244: while(steps < 178 && screenMode==1){
  2243  00048E  D014               	goto	l4774
  2244  000490                     l4764:
  2245                           
  2246                           ; BSR set to: 0
  2247                           ;main.c: 245: steps++;
  2248  000490  0100               	movlb	0	; () banked
  2249  000492  2BCB               	incf	main@steps_605& (0+255),f,b
  2250                           
  2251                           ; BSR set to: 0
  2252                           ;main.c: 246: LATDbits.LD1 = 1;;
  2253  000494  828C               	bsf	3980,1,c	;volatile
  2254                           
  2255                           ; BSR set to: 0
  2256                           ;main.c: 247: _delay((unsigned long)((2)*(10000000/4000.0)));
  2257  000496  0E07               	movlw	7
  2258  000498  0100               	movlb	0	; () banked
  2259  00049A  6FC3               	movwf	??_main& (0+255),b
  2260  00049C  0E7D               	movlw	125
  2261  00049E                     u5327:
  2262  00049E  2EE8               	decfsz	wreg,f,c
  2263  0004A0  D7FE               	bra	u5327
  2264  0004A2  2FC3               	decfsz	??_main& (0+255),f,b
  2265  0004A4  D7FC               	bra	u5327
  2266                           
  2267                           ;main.c: 248: LATDbits.LD1 = 0;;
  2268  0004A6  928C               	bcf	3980,1,c	;volatile
  2269                           
  2270                           ;main.c: 249: _delay((unsigned long)((2)*(10000000/4000.0)));
  2271  0004A8  0E07               	movlw	7
  2272  0004AA  0100               	movlb	0	; () banked
  2273  0004AC  6FC3               	movwf	??_main& (0+255),b
  2274  0004AE  0E7D               	movlw	125
  2275  0004B0                     u5337:
  2276  0004B0  2EE8               	decfsz	wreg,f,c
  2277  0004B2  D7FE               	bra	u5337
  2278  0004B4  2FC3               	decfsz	??_main& (0+255),f,b
  2279  0004B6  D7FC               	bra	u5337
  2280  0004B8                     l4774:
  2281  0004B8  0EB2               	movlw	178
  2282  0004BA  0100               	movlb	0	; () banked
  2283  0004BC  61CB               	cpfslt	main@steps_605& (0+255),b
  2284  0004BE  D004               	goto	l4778
  2285                           
  2286                           ; BSR set to: 0
  2287  0004C0  0100               	movlb	0	; () banked
  2288  0004C2  05CC               	decf	_screenMode& (0+255),w,b
  2289  0004C4  B4D8               	btfsc	status,2,c
  2290  0004C6  D7E4               	goto	l4764
  2291  0004C8                     l4778:
  2292                           
  2293                           ; BSR set to: 0
  2294                           ;main.c: 250: }
  2295                           ;main.c: 251: steps = 0;
  2296  0004C8  0E00               	movlw	0
  2297  0004CA  0100               	movlb	0	; () banked
  2298  0004CC  6FCB               	movwf	main@steps_605& (0+255),b
  2299                           
  2300                           ;main.c: 252: while(steps<2 && screenMode==1){
  2301  0004CE  D016               	goto	l4790
  2302  0004D0                     l4780:
  2303                           
  2304                           ; BSR set to: 0
  2305                           ;main.c: 253: steps++;
  2306  0004D0  0100               	movlb	0	; () banked
  2307  0004D2  2BCB               	incf	main@steps_605& (0+255),f,b
  2308                           
  2309                           ; BSR set to: 0
  2310                           ;main.c: 254: LATDbits.LD1 = 1;;
  2311  0004D4  828C               	bsf	3980,1,c	;volatile
  2312                           
  2313                           ; BSR set to: 0
  2314                           ;main.c: 255: _delay((unsigned long)((5)*(10000000/4000.0)));
  2315  0004D6  0E11               	movlw	17
  2316  0004D8  0100               	movlb	0	; () banked
  2317  0004DA  6FC3               	movwf	??_main& (0+255),b
  2318  0004DC  0E3A               	movlw	58
  2319  0004DE                     u5347:
  2320  0004DE  2EE8               	decfsz	wreg,f,c
  2321  0004E0  D7FE               	bra	u5347
  2322  0004E2  2FC3               	decfsz	??_main& (0+255),f,b
  2323  0004E4  D7FC               	bra	u5347
  2324  0004E6  F000               	nop	
  2325                           
  2326                           ;main.c: 256: LATDbits.LD1 = 0;;
  2327  0004E8  928C               	bcf	3980,1,c	;volatile
  2328                           
  2329                           ;main.c: 257: _delay((unsigned long)((5)*(10000000/4000.0)));
  2330  0004EA  0E11               	movlw	17
  2331  0004EC  0100               	movlb	0	; () banked
  2332  0004EE  6FC3               	movwf	??_main& (0+255),b
  2333  0004F0  0E3A               	movlw	58
  2334  0004F2                     u5357:
  2335  0004F2  2EE8               	decfsz	wreg,f,c
  2336  0004F4  D7FE               	bra	u5357
  2337  0004F6  2FC3               	decfsz	??_main& (0+255),f,b
  2338  0004F8  D7FC               	bra	u5357
  2339  0004FA  F000               	nop	
  2340  0004FC                     l4790:
  2341  0004FC  0E02               	movlw	2
  2342  0004FE  0100               	movlb	0	; () banked
  2343  000500  61CB               	cpfslt	main@steps_605& (0+255),b
  2344  000502  D004               	goto	l4794
  2345                           
  2346                           ; BSR set to: 0
  2347  000504  0100               	movlb	0	; () banked
  2348  000506  05CC               	decf	_screenMode& (0+255),w,b
  2349  000508  B4D8               	btfsc	status,2,c
  2350  00050A  D7E2               	goto	l4780
  2351  00050C                     l4794:
  2352                           
  2353                           ; BSR set to: 0
  2354                           ;main.c: 258: }
  2355                           ;main.c: 259: steps = 0;
  2356  00050C  0E00               	movlw	0
  2357  00050E  0100               	movlb	0	; () banked
  2358  000510  6FCB               	movwf	main@steps_605& (0+255),b
  2359  000512                     l4796:
  2360                           
  2361                           ; BSR set to: 0
  2362  000512  0100               	movlb	0	; () banked
  2363  000514  5192               	movf	_plat2Left& (0+255),w,b
  2364  000516  0100               	movlb	0	; () banked
  2365  000518  118E               	iorwf	_plat1Left& (0+255),w,b
  2366  00051A  0100               	movlb	0	; () banked
  2367  00051C  6FC3               	movwf	??_main& (0+255),b
  2368  00051E  0100               	movlb	0	; () banked
  2369  000520  5193               	movf	(_plat2Left+1)& (0+255),w,b
  2370  000522  0100               	movlb	0	; () banked
  2371  000524  118F               	iorwf	(_plat1Left+1)& (0+255),w,b
  2372  000526  0100               	movlb	0	; () banked
  2373  000528  6FC4               	movwf	(??_main+1)& (0+255),b
  2374  00052A  0100               	movlb	0	; () banked
  2375  00052C  5190               	movf	_plat1Right& (0+255),w,b
  2376  00052E  0100               	movlb	0	; () banked
  2377  000530  13C3               	iorwf	??_main& (0+255),f,b
  2378  000532  0100               	movlb	0	; () banked
  2379  000534  5191               	movf	(_plat1Right+1)& (0+255),w,b
  2380  000536  0100               	movlb	0	; () banked
  2381  000538  13C4               	iorwf	(??_main+1)& (0+255),f,b
  2382  00053A  0100               	movlb	0	; () banked
  2383  00053C  5194               	movf	_plat2Right& (0+255),w,b
  2384  00053E  0100               	movlb	0	; () banked
  2385  000540  13C3               	iorwf	??_main& (0+255),f,b
  2386  000542  0100               	movlb	0	; () banked
  2387  000544  5195               	movf	(_plat2Right+1)& (0+255),w,b
  2388  000546  0100               	movlb	0	; () banked
  2389  000548  13C4               	iorwf	(??_main+1)& (0+255),f,b
  2390  00054A  0100               	movlb	0	; () banked
  2391  00054C  51C3               	movf	??_main& (0+255),w,b
  2392  00054E  0100               	movlb	0	; () banked
  2393  000550  11C4               	iorwf	(??_main+1)& (0+255),w,b
  2394  000552  B4D8               	btfsc	status,2,c
  2395  000554  D004               	goto	l299
  2396                           
  2397                           ; BSR set to: 0
  2398  000556  0100               	movlb	0	; () banked
  2399  000558  05CC               	decf	_screenMode& (0+255),w,b
  2400  00055A  B4D8               	btfsc	status,2,c
  2401  00055C  D7DA               	goto	l4796
  2402  00055E                     l299:
  2403                           
  2404                           ; BSR set to: 0
  2405                           ;main.c: 263: LATDbits.LD1 = 0;;
  2406  00055E  928C               	bcf	3980,1,c	;volatile
  2407                           
  2408                           ;main.c: 264: LATDbits.LD0= 0;;
  2409  000560  908C               	bcf	3980,0,c	;volatile
  2410                           
  2411                           ; BSR set to: 0
  2412                           ;main.c: 265: plat1Right = 0;
  2413  000562  0E00               	movlw	0
  2414  000564  0100               	movlb	0	; () banked
  2415  000566  6F91               	movwf	(_plat1Right+1)& (0+255),b
  2416  000568  0E00               	movlw	0
  2417  00056A  6F90               	movwf	_plat1Right& (0+255),b
  2418                           
  2419                           ;main.c: 266: plat2Right = 0;
  2420  00056C  0E00               	movlw	0
  2421  00056E  0100               	movlb	0	; () banked
  2422  000570  6F95               	movwf	(_plat2Right+1)& (0+255),b
  2423  000572  0E00               	movlw	0
  2424  000574  6F94               	movwf	_plat2Right& (0+255),b
  2425                           
  2426                           ;main.c: 267: plat1Left = 0;
  2427  000576  0E00               	movlw	0
  2428  000578  0100               	movlb	0	; () banked
  2429  00057A  6F8F               	movwf	(_plat1Left+1)& (0+255),b
  2430  00057C  0E00               	movlw	0
  2431  00057E  6F8E               	movwf	_plat1Left& (0+255),b
  2432                           
  2433                           ;main.c: 268: plat2Left = 0;
  2434  000580  0E00               	movlw	0
  2435  000582  0100               	movlb	0	; () banked
  2436  000584  6F93               	movwf	(_plat2Left+1)& (0+255),b
  2437  000586  0E00               	movlw	0
  2438  000588  6F92               	movwf	_plat2Left& (0+255),b
  2439                           
  2440                           ;main.c: 269: turn1BackRight = 0;
  2441  00058A  0E00               	movlw	0
  2442  00058C  0100               	movlb	0	; () banked
  2443  00058E  6F99               	movwf	(_turn1BackRight+1)& (0+255),b
  2444  000590  0E00               	movlw	0
  2445  000592  6F98               	movwf	_turn1BackRight& (0+255),b
  2446                           
  2447                           ;main.c: 270: turn1BackLeft = 0;
  2448  000594  0E00               	movlw	0
  2449  000596  0100               	movlb	0	; () banked
  2450  000598  6F97               	movwf	(_turn1BackLeft+1)& (0+255),b
  2451  00059A  0E00               	movlw	0
  2452  00059C  6F96               	movwf	_turn1BackLeft& (0+255),b
  2453                           
  2454                           ;main.c: 271: turn2BackRight = 0;
  2455  00059E  0E00               	movlw	0
  2456  0005A0  0100               	movlb	0	; () banked
  2457  0005A2  6F9D               	movwf	(_turn2BackRight+1)& (0+255),b
  2458  0005A4  0E00               	movlw	0
  2459  0005A6  6F9C               	movwf	_turn2BackRight& (0+255),b
  2460                           
  2461                           ;main.c: 272: turn2BackLeft = 0;
  2462  0005A8  0E00               	movlw	0
  2463  0005AA  0100               	movlb	0	; () banked
  2464  0005AC  6F9B               	movwf	(_turn2BackLeft+1)& (0+255),b
  2465  0005AE  0E00               	movlw	0
  2466  0005B0  6F9A               	movwf	_turn2BackLeft& (0+255),b
  2467                           
  2468                           ; BSR set to: 0
  2469                           ;main.c: 273: LATCbits.LC1 = 0;;
  2470  0005B2  928B               	bcf	3979,1,c	;volatile
  2471                           
  2472                           ; BSR set to: 0
  2473                           ;main.c: 274: LATCbits.LC2 = 0;;
  2474  0005B4  948B               	bcf	3979,2,c	;volatile
  2475                           
  2476                           ; BSR set to: 0
  2477                           ;main.c: 275: LATCbits.LC6 = 0;;
  2478  0005B6  9C8B               	bcf	3979,6,c	;volatile
  2479                           
  2480                           ; BSR set to: 0
  2481                           ;main.c: 276: LATCbits.LC5 = 0;;
  2482  0005B8  9A8B               	bcf	3979,5,c	;volatile
  2483                           
  2484                           ; BSR set to: 0
  2485                           ;main.c: 277: LATCbits.LC0 = 0;;
  2486  0005BA  908B               	bcf	3979,0,c	;volatile
  2487                           
  2488                           ; BSR set to: 0
  2489                           ;main.c: 278: LATEbits.LE2 = 0;;
  2490  0005BC  948D               	bcf	3981,2,c	;volatile
  2491                           
  2492                           ; BSR set to: 0
  2493                           ;main.c: 279: LATEbits.LE1 = 0;;
  2494  0005BE  928D               	bcf	3981,1,c	;volatile
  2495                           
  2496                           ; BSR set to: 0
  2497                           ;main.c: 280: LATAbits.LA4 = 0;;
  2498  0005C0  9889               	bcf	3977,4,c	;volatile
  2499                           
  2500                           ;main.c: 281: doubleAA = 0;
  2501  0005C2  0E00               	movlw	0
  2502  0005C4  0100               	movlb	0	; () banked
  2503  0005C6  6FA2               	movwf	_doubleAA& (0+255),b
  2504                           
  2505                           ;main.c: 282: sorting = 0;
  2506  0005C8  0E00               	movlw	0
  2507  0005CA  6E4C               	movwf	_sorting,c
  2508  0005CC                     l4818:
  2509                           
  2510                           ; BSR set to: 0
  2511                           ;main.c: 283: }
  2512                           ;main.c: 284: wait_2ms(250);
  2513  0005CC  0E00               	movlw	0
  2514  0005CE  6E32               	movwf	wait_2ms@x+1,c
  2515  0005D0  0EFA               	movlw	250
  2516  0005D2  6E31               	movwf	wait_2ms@x,c
  2517  0005D4  ECC9  F00E         	call	_wait_2ms	;wreg free
  2518  0005D8                     l4820:
  2519  0005D8  0100               	movlb	0	; () banked
  2520  0005DA  05CC               	decf	_screenMode& (0+255),w,b
  2521  0005DC  A4D8               	btfss	status,2,c
  2522  0005DE  D013               	goto	l4828
  2523  0005E0  D5AB               	goto	l4596
  2524  0005E2                     l4822:
  2525                           
  2526                           ; BSR set to: 0
  2527                           ;main.c: 287: lcdInst(0b10000000);;
  2528  0005E2  0E80               	movlw	128
  2529  0005E4  ECF8  F00E         	call	_lcdInst
  2530                           
  2531                           ;main.c: 288: printf("DONE! PRESS *   ");
  2532  0005E8  0E89               	movlw	low STR_5
  2533  0005EA  6E3D               	movwf	printf@f,c
  2534  0005EC  0EFF               	movlw	high STR_5
  2535  0005EE  6E3E               	movwf	printf@f+1,c
  2536  0005F0  EC76  F004         	call	_printf	;wreg free
  2537                           
  2538                           ;main.c: 289: lcdInst(0b11000000);;
  2539  0005F4  0EC0               	movlw	192
  2540  0005F6  ECF8  F00E         	call	_lcdInst
  2541                           
  2542                           ;main.c: 290: printf("TO CONTINUE     ");
  2543  0005FA  0E67               	movlw	low STR_6
  2544  0005FC  6E3D               	movwf	printf@f,c
  2545  0005FE  0EFF               	movlw	high STR_6
  2546  000600  6E3E               	movwf	printf@f+1,c
  2547  000602  EC76  F004         	call	_printf	;wreg free
  2548  000606                     l4828:
  2549  000606  0100               	movlb	0	; () banked
  2550  000608  51CC               	movf	_screenMode& (0+255),w,b
  2551  00060A  A4D8               	btfss	status,2,c
  2552  00060C  D019               	goto	l4836
  2553  00060E  D7E9               	goto	l4822
  2554  000610                     l4830:
  2555                           
  2556                           ; BSR set to: 0
  2557                           ;main.c: 293: lcdInst(0b10000000);;
  2558  000610  0E80               	movlw	128
  2559  000612  ECF8  F00E         	call	_lcdInst
  2560                           
  2561                           ;main.c: 294: printf("TOTAL RUN TIME: ");
  2562  000616  0EAB               	movlw	low STR_7
  2563  000618  6E3D               	movwf	printf@f,c
  2564  00061A  0EFF               	movlw	high STR_7
  2565  00061C  6E3E               	movwf	printf@f+1,c
  2566  00061E  EC76  F004         	call	_printf	;wreg free
  2567                           
  2568                           ;main.c: 295: lcdInst(0b11000000);;
  2569  000622  0EC0               	movlw	192
  2570  000624  ECF8  F00E         	call	_lcdInst
  2571                           
  2572                           ;main.c: 296: printf("%02d:%02d               ", min, sec);
  2573  000628  0E42               	movlw	low STR_8
  2574  00062A  6E3D               	movwf	printf@f,c
  2575  00062C  0EFE               	movlw	high STR_8
  2576  00062E  6E3E               	movwf	printf@f+1,c
  2577  000630  C0A3  F03F         	movff	_min,?_printf+2
  2578  000634  6A40               	clrf	?_printf+3,c
  2579  000636  C0A9  F041         	movff	_sec,?_printf+4
  2580  00063A  6A42               	clrf	?_printf+5,c
  2581  00063C  EC76  F004         	call	_printf	;wreg free
  2582  000640                     l4836:
  2583  000640  0E03               	movlw	3
  2584  000642  0100               	movlb	0	; () banked
  2585  000644  19CC               	xorwf	_screenMode& (0+255),w,b
  2586  000646  A4D8               	btfss	status,2,c
  2587  000648  D016               	goto	l4844
  2588  00064A  D7E2               	goto	l4830
  2589  00064C                     l4838:
  2590                           
  2591                           ; BSR set to: 0
  2592                           ;main.c: 299: lcdInst(0b10000000);;
  2593  00064C  0E80               	movlw	128
  2594  00064E  ECF8  F00E         	call	_lcdInst
  2595                           
  2596                           ;main.c: 300: printf("TOTAL # OF      ");
  2597  000652  0E56               	movlw	low STR_9
  2598  000654  6E3D               	movwf	printf@f,c
  2599  000656  0EFF               	movlw	high STR_9
  2600  000658  6E3E               	movwf	printf@f+1,c
  2601  00065A  EC76  F004         	call	_printf	;wreg free
  2602                           
  2603                           ;main.c: 301: lcdInst(0b11000000);;
  2604  00065E  0EC0               	movlw	192
  2605  000660  ECF8  F00E         	call	_lcdInst
  2606                           
  2607                           ;main.c: 302: printf("BATTERIES: %02d   ", numBats);
  2608  000664  0ECC               	movlw	low STR_10
  2609  000666  6E3D               	movwf	printf@f,c
  2610  000668  0EFE               	movlw	high STR_10
  2611  00066A  6E3E               	movwf	printf@f+1,c
  2612  00066C  C0A6  F03F         	movff	_numBats,?_printf+2
  2613  000670  6A40               	clrf	?_printf+3,c
  2614  000672  EC76  F004         	call	_printf	;wreg free
  2615  000676                     l4844:
  2616  000676  0E04               	movlw	4
  2617  000678  0100               	movlb	0	; () banked
  2618  00067A  19CC               	xorwf	_screenMode& (0+255),w,b
  2619  00067C  A4D8               	btfss	status,2,c
  2620  00067E  D016               	goto	l4852
  2621  000680  D7E5               	goto	l4838
  2622  000682                     l4846:
  2623                           
  2624                           ; BSR set to: 0
  2625                           ;main.c: 305: lcdInst(0b10000000);;
  2626  000682  0E80               	movlw	128
  2627  000684  ECF8  F00E         	call	_lcdInst
  2628                           
  2629                           ;main.c: 306: printf("# OF C          ");
  2630  000688  0EF0               	movlw	low STR_11
  2631  00068A  6E3D               	movwf	printf@f,c
  2632  00068C  0EFE               	movlw	high STR_11
  2633  00068E  6E3E               	movwf	printf@f+1,c
  2634  000690  EC76  F004         	call	_printf	;wreg free
  2635                           
  2636                           ;main.c: 307: lcdInst(0b11000000);;
  2637  000694  0EC0               	movlw	192
  2638  000696  ECF8  F00E         	call	_lcdInst
  2639                           
  2640                           ;main.c: 308: printf("BATTERIES: %02d   ", numC);
  2641  00069A  0ECC               	movlw	low STR_10
  2642  00069C  6E3D               	movwf	printf@f,c
  2643  00069E  0EFE               	movlw	high STR_10
  2644  0006A0  6E3E               	movwf	printf@f+1,c
  2645  0006A2  C0A7  F03F         	movff	_numC,?_printf+2
  2646  0006A6  6A40               	clrf	?_printf+3,c
  2647  0006A8  EC76  F004         	call	_printf	;wreg free
  2648  0006AC                     l4852:
  2649  0006AC  0E05               	movlw	5
  2650  0006AE  0100               	movlb	0	; () banked
  2651  0006B0  19CC               	xorwf	_screenMode& (0+255),w,b
  2652  0006B2  A4D8               	btfss	status,2,c
  2653  0006B4  D016               	goto	l4860
  2654  0006B6  D7E5               	goto	l4846
  2655  0006B8                     l4854:
  2656                           
  2657                           ; BSR set to: 0
  2658                           ;main.c: 311: lcdInst(0b10000000);;
  2659  0006B8  0E80               	movlw	128
  2660  0006BA  ECF8  F00E         	call	_lcdInst
  2661                           
  2662                           ;main.c: 312: printf("# OF 9V         ");
  2663  0006BE  0E12               	movlw	low STR_13
  2664  0006C0  6E3D               	movwf	printf@f,c
  2665  0006C2  0EFF               	movlw	high STR_13
  2666  0006C4  6E3E               	movwf	printf@f+1,c
  2667  0006C6  EC76  F004         	call	_printf	;wreg free
  2668                           
  2669                           ;main.c: 313: lcdInst(0b11000000);;
  2670  0006CA  0EC0               	movlw	192
  2671  0006CC  ECF8  F00E         	call	_lcdInst
  2672                           
  2673                           ;main.c: 314: printf("BATTERIES: %02d     ", num9V);
  2674  0006D0  0EB7               	movlw	low STR_14
  2675  0006D2  6E3D               	movwf	printf@f,c
  2676  0006D4  0EFE               	movlw	high STR_14
  2677  0006D6  6E3E               	movwf	printf@f+1,c
  2678  0006D8  C0A4  F03F         	movff	_num9V,?_printf+2
  2679  0006DC  6A40               	clrf	?_printf+3,c
  2680  0006DE  EC76  F004         	call	_printf	;wreg free
  2681  0006E2                     l4860:
  2682  0006E2  0E06               	movlw	6
  2683  0006E4  0100               	movlb	0	; () banked
  2684  0006E6  19CC               	xorwf	_screenMode& (0+255),w,b
  2685  0006E8  A4D8               	btfss	status,2,c
  2686  0006EA  D016               	goto	l4868
  2687  0006EC  D7E5               	goto	l4854
  2688  0006EE                     l4862:
  2689                           
  2690                           ; BSR set to: 0
  2691                           ;main.c: 317: lcdInst(0b10000000);;
  2692  0006EE  0E80               	movlw	128
  2693  0006F0  ECF8  F00E         	call	_lcdInst
  2694                           
  2695                           ;main.c: 318: printf("# OF AA         ");
  2696  0006F4  0E01               	movlw	low STR_15
  2697  0006F6  6E3D               	movwf	printf@f,c
  2698  0006F8  0EFF               	movlw	high STR_15
  2699  0006FA  6E3E               	movwf	printf@f+1,c
  2700  0006FC  EC76  F004         	call	_printf	;wreg free
  2701                           
  2702                           ;main.c: 319: lcdInst(0b11000000);;
  2703  000700  0EC0               	movlw	192
  2704  000702  ECF8  F00E         	call	_lcdInst
  2705                           
  2706                           ;main.c: 320: printf("BATTERIES: %02d     ", numAA);
  2707  000706  0EB7               	movlw	low STR_14
  2708  000708  6E3D               	movwf	printf@f,c
  2709  00070A  0EFE               	movlw	high STR_14
  2710  00070C  6E3E               	movwf	printf@f+1,c
  2711  00070E  C0A5  F03F         	movff	_numAA,?_printf+2
  2712  000712  6A40               	clrf	?_printf+3,c
  2713  000714  EC76  F004         	call	_printf	;wreg free
  2714  000718                     l4868:
  2715  000718  0E07               	movlw	7
  2716  00071A  0100               	movlb	0	; () banked
  2717  00071C  19CC               	xorwf	_screenMode& (0+255),w,b
  2718  00071E  A4D8               	btfss	status,2,c
  2719  000720  D016               	goto	l4876
  2720  000722  D7E5               	goto	l4862
  2721  000724                     l4870:
  2722                           
  2723                           ; BSR set to: 0
  2724                           ;main.c: 323: lcdInst(0b10000000);;
  2725  000724  0E80               	movlw	128
  2726  000726  ECF8  F00E         	call	_lcdInst
  2727                           
  2728                           ;main.c: 324: printf("# OF DRAINED    ");
  2729  00072A  0E78               	movlw	low STR_17
  2730  00072C  6E3D               	movwf	printf@f,c
  2731  00072E  0EFF               	movlw	high STR_17
  2732  000730  6E3E               	movwf	printf@f+1,c
  2733  000732  EC76  F004         	call	_printf	;wreg free
  2734                           
  2735                           ;main.c: 325: lcdInst(0b11000000);;
  2736  000736  0EC0               	movlw	192
  2737  000738  ECF8  F00E         	call	_lcdInst
  2738                           
  2739                           ;main.c: 326: printf("BATTERIES: %02d     ", numDrain);
  2740  00073C  0EB7               	movlw	low STR_14
  2741  00073E  6E3D               	movwf	printf@f,c
  2742  000740  0EFE               	movlw	high STR_14
  2743  000742  6E3E               	movwf	printf@f+1,c
  2744  000744  C0A8  F03F         	movff	_numDrain,?_printf+2
  2745  000748  6A40               	clrf	?_printf+3,c
  2746  00074A  EC76  F004         	call	_printf	;wreg free
  2747  00074E                     l4876:
  2748  00074E  0E08               	movlw	8
  2749  000750  0100               	movlb	0	; () banked
  2750  000752  19CC               	xorwf	_screenMode& (0+255),w,b
  2751  000754  A4D8               	btfss	status,2,c
  2752  000756  D063               	goto	l4916
  2753  000758  D7E5               	goto	l4870
  2754  00075A                     l4878:
  2755                           
  2756                           ; BSR set to: 0
  2757                           ;main.c: 329: lcdInst(0b10000000);;
  2758  00075A  0E80               	movlw	128
  2759  00075C  ECF8  F00E         	call	_lcdInst
  2760                           
  2761                           ;main.c: 330: printf("LAST RUN:       ");
  2762  000760  0E34               	movlw	low STR_19
  2763  000762  6E3D               	movwf	printf@f,c
  2764  000764  0EFF               	movlw	high STR_19
  2765  000766  6E3E               	movwf	printf@f+1,c
  2766  000768  EC76  F004         	call	_printf	;wreg free
  2767                           
  2768                           ;main.c: 331: lcdInst(0b11000000);;
  2769  00076C  0EC0               	movlw	192
  2770  00076E  ECF8  F00E         	call	_lcdInst
  2771                           
  2772                           ;main.c: 332: printf("%02x/%02x/%02x        ", lastRunRTC[6],lastRunRTC[5],lastRunRTC[4]
      +                          );
  2773  000772  0E5B               	movlw	low STR_20
  2774  000774  6E3D               	movwf	printf@f,c
  2775  000776  0EFE               	movlw	high STR_20
  2776  000778  6E3E               	movwf	printf@f+1,c
  2777  00077A  C086  F03F         	movff	_lastRunRTC+6,?_printf+2
  2778  00077E  6A40               	clrf	?_printf+3,c
  2779  000780  C085  F041         	movff	_lastRunRTC+5,?_printf+4
  2780  000784  6A42               	clrf	?_printf+5,c
  2781  000786  C084  F043         	movff	_lastRunRTC+4,?_printf+6
  2782  00078A  6A44               	clrf	?_printf+7,c
  2783  00078C  EC76  F004         	call	_printf	;wreg free
  2784                           
  2785                           ;main.c: 333: for(unsigned char i=0;i<200;i++){
  2786  000790  0E00               	movlw	0
  2787  000792  0100               	movlb	0	; () banked
  2788  000794  6FC7               	movwf	main@i_630& (0+255),b
  2789  000796                     l4886:
  2790                           
  2791                           ; BSR set to: 0
  2792  000796  0EC7               	movlw	199
  2793  000798  0100               	movlb	0	; () banked
  2794  00079A  65C7               	cpfsgt	main@i_630& (0+255),b
  2795  00079C  D001               	goto	l4890
  2796  00079E  D011               	goto	l4898
  2797  0007A0                     l4890:
  2798                           
  2799                           ; BSR set to: 0
  2800                           ;main.c: 334: if (screenMode != 9)
  2801  0007A0  0E09               	movlw	9
  2802  0007A2  0100               	movlb	0	; () banked
  2803  0007A4  19CC               	xorwf	_screenMode& (0+255),w,b
  2804  0007A6  A4D8               	btfss	status,2,c
  2805  0007A8  D00C               	goto	l4898
  2806                           
  2807                           ; BSR set to: 0
  2808                           ;main.c: 336: _delay((unsigned long)((10)*(10000000/4000.0)));
  2809                           
  2810                           ; BSR set to: 0
  2811                           
  2812                           ; BSR set to: 0
  2813                           ;main.c: 335: break;
  2814  0007AA  0E21               	movlw	33
  2815  0007AC  0100               	movlb	0	; () banked
  2816  0007AE  6FC3               	movwf	??_main& (0+255),b
  2817  0007B0  0E76               	movlw	118
  2818  0007B2                     u5367:
  2819  0007B2  2EE8               	decfsz	wreg,f,c
  2820  0007B4  D7FE               	bra	u5367
  2821  0007B6  2FC3               	decfsz	??_main& (0+255),f,b
  2822  0007B8  D7FC               	bra	u5367
  2823  0007BA  F000               	nop	
  2824  0007BC  0100               	movlb	0	; () banked
  2825  0007BE  2BC7               	incf	main@i_630& (0+255),f,b
  2826  0007C0  D7EA               	goto	l4886
  2827  0007C2                     l4898:
  2828                           
  2829                           ; BSR set to: 0
  2830                           ;main.c: 337: }
  2831                           ;main.c: 338: lcdInst(0b10000000);;
  2832  0007C2  0E80               	movlw	128
  2833  0007C4  ECF8  F00E         	call	_lcdInst
  2834                           
  2835                           ;main.c: 339: lcdInst(0b11000000);;
  2836  0007C8  0EC0               	movlw	192
  2837  0007CA  ECF8  F00E         	call	_lcdInst
  2838                           
  2839                           ;main.c: 340: printf("%02x:%02x:%02x        ", lastRunRTC[2],lastRunRTC[1],lastRunRTC[0]
      +                          );
  2840  0007CE  0E72               	movlw	low STR_21
  2841  0007D0  6E3D               	movwf	printf@f,c
  2842  0007D2  0EFE               	movlw	high STR_21
  2843  0007D4  6E3E               	movwf	printf@f+1,c
  2844  0007D6  C082  F03F         	movff	_lastRunRTC+2,?_printf+2
  2845  0007DA  6A40               	clrf	?_printf+3,c
  2846  0007DC  C081  F041         	movff	_lastRunRTC+1,?_printf+4
  2847  0007E0  6A42               	clrf	?_printf+5,c
  2848  0007E2  C080  F043         	movff	_lastRunRTC,?_printf+6
  2849  0007E6  6A44               	clrf	?_printf+7,c
  2850  0007E8  EC76  F004         	call	_printf	;wreg free
  2851                           
  2852                           ;main.c: 341: for(unsigned char i=0;i<200;i++){
  2853  0007EC  0E00               	movlw	0
  2854  0007EE  0100               	movlb	0	; () banked
  2855  0007F0  6FC8               	movwf	main@i_632& (0+255),b
  2856  0007F2                     l4904:
  2857                           
  2858                           ; BSR set to: 0
  2859  0007F2  0EC7               	movlw	199
  2860  0007F4  0100               	movlb	0	; () banked
  2861  0007F6  65C8               	cpfsgt	main@i_632& (0+255),b
  2862  0007F8  D001               	goto	l4908
  2863  0007FA  D011               	goto	l4916
  2864  0007FC                     l4908:
  2865                           
  2866                           ; BSR set to: 0
  2867                           ;main.c: 342: if (screenMode != 9)
  2868  0007FC  0E09               	movlw	9
  2869  0007FE  0100               	movlb	0	; () banked
  2870  000800  19CC               	xorwf	_screenMode& (0+255),w,b
  2871  000802  A4D8               	btfss	status,2,c
  2872  000804  D00C               	goto	l4916
  2873                           
  2874                           ; BSR set to: 0
  2875                           ;main.c: 344: _delay((unsigned long)((10)*(10000000/4000.0)));
  2876                           
  2877                           ; BSR set to: 0
  2878                           
  2879                           ; BSR set to: 0
  2880                           ;main.c: 343: break;
  2881  000806  0E21               	movlw	33
  2882  000808  0100               	movlb	0	; () banked
  2883  00080A  6FC3               	movwf	??_main& (0+255),b
  2884  00080C  0E76               	movlw	118
  2885  00080E                     u5377:
  2886  00080E  2EE8               	decfsz	wreg,f,c
  2887  000810  D7FE               	bra	u5377
  2888  000812  2FC3               	decfsz	??_main& (0+255),f,b
  2889  000814  D7FC               	bra	u5377
  2890  000816  F000               	nop	
  2891  000818  0100               	movlb	0	; () banked
  2892  00081A  2BC8               	incf	main@i_632& (0+255),f,b
  2893  00081C  D7EA               	goto	l4904
  2894  00081E                     l4916:
  2895                           
  2896                           ; BSR set to: 0
  2897  00081E  0E09               	movlw	9
  2898  000820  0100               	movlb	0	; () banked
  2899  000822  19CC               	xorwf	_screenMode& (0+255),w,b
  2900  000824  A4D8               	btfss	status,2,c
  2901  000826  D05C               	goto	l4938
  2902  000828  D798               	goto	l4878
  2903  00082A                     l4918:
  2904                           
  2905                           ; BSR set to: 0
  2906                           ;main.c: 349: I2C_Master_Start();
  2907  00082A  EC18  F00F         	call	_I2C_Master_Start	;wreg free
  2908                           
  2909                           ;main.c: 350: I2C_Master_Write(0b11010000);
  2910  00082E  0E00               	movlw	0
  2911  000830  6E33               	movwf	I2C_Master_Write@d+1,c
  2912  000832  0ED0               	movlw	208
  2913  000834  6E32               	movwf	I2C_Master_Write@d,c
  2914  000836  EC0A  F00F         	call	_I2C_Master_Write	;wreg free
  2915                           
  2916                           ;main.c: 351: I2C_Master_Write(0x00);
  2917  00083A  0E00               	movlw	0
  2918  00083C  6E33               	movwf	I2C_Master_Write@d+1,c
  2919  00083E  0E00               	movlw	0
  2920  000840  6E32               	movwf	I2C_Master_Write@d,c
  2921  000842  EC0A  F00F         	call	_I2C_Master_Write	;wreg free
  2922                           
  2923                           ;main.c: 352: I2C_Master_Stop();
  2924  000846  EC14  F00F         	call	_I2C_Master_Stop	;wreg free
  2925                           
  2926                           ;main.c: 354: I2C_Master_Start();
  2927  00084A  EC18  F00F         	call	_I2C_Master_Start	;wreg free
  2928                           
  2929                           ;main.c: 355: I2C_Master_Write(0b11010001);
  2930  00084E  0E00               	movlw	0
  2931  000850  6E33               	movwf	I2C_Master_Write@d+1,c
  2932  000852  0ED1               	movlw	209
  2933  000854  6E32               	movwf	I2C_Master_Write@d,c
  2934  000856  EC0A  F00F         	call	_I2C_Master_Write	;wreg free
  2935                           
  2936                           ;main.c: 356: for(unsigned char i=0;i<0x06;i++){
  2937  00085A  0E00               	movlw	0
  2938  00085C  0100               	movlb	0	; () banked
  2939  00085E  6FC9               	movwf	main@i_636& (0+255),b
  2940  000860                     l4922:
  2941                           
  2942                           ; BSR set to: 0
  2943  000860  0E05               	movlw	5
  2944  000862  0100               	movlb	0	; () banked
  2945  000864  65C9               	cpfsgt	main@i_636& (0+255),b
  2946  000866  D001               	goto	l4926
  2947  000868  D010               	goto	l4932
  2948  00086A                     l4926:
  2949                           
  2950                           ; BSR set to: 0
  2951                           ;main.c: 357: realTime[i] = I2C_Master_Read(1);
  2952  00086A  0100               	movlb	0	; () banked
  2953  00086C  51C9               	movf	main@i_636& (0+255),w,b
  2954  00086E  0D01               	mullw	1
  2955  000870  0E87               	movlw	low _realTime
  2956  000872  24F3               	addwf	prodl,w,c
  2957  000874  6ED9               	movwf	fsr2l,c
  2958  000876  0E00               	movlw	high _realTime
  2959  000878  20F4               	addwfc	prodh,w,c
  2960  00087A  6EDA               	movwf	fsr2h,c
  2961  00087C  0E01               	movlw	1
  2962  00087E  EC72  F00E         	call	_I2C_Master_Read
  2963  000882  6EDF               	movwf	indf2,c
  2964  000884  0100               	movlb	0	; () banked
  2965  000886  2BC9               	incf	main@i_636& (0+255),f,b
  2966  000888  D7EB               	goto	l4922
  2967  00088A                     l4932:
  2968                           
  2969                           ; BSR set to: 0
  2970                           ;main.c: 358: }
  2971                           ;main.c: 359: realTime[6] = I2C_Master_Read(0);
  2972  00088A  0E00               	movlw	0
  2973  00088C  EC72  F00E         	call	_I2C_Master_Read
  2974  000890  0100               	movlb	0	; () banked
  2975  000892  6F8D               	movwf	(_realTime+6)& (0+255),b
  2976                           
  2977                           ;main.c: 360: I2C_Master_Stop();
  2978  000894  EC14  F00F         	call	_I2C_Master_Stop	;wreg free
  2979                           
  2980                           ;main.c: 361: lcdInst(0b10000000);;
  2981  000898  0E80               	movlw	128
  2982  00089A  ECF8  F00E         	call	_lcdInst
  2983                           
  2984                           ;main.c: 362: printf("DATE: %02x/%02x/%02x  ", realTime[6],realTime[5],realTime[4]);
  2985  00089E  0E89               	movlw	low STR_22
  2986  0008A0  6E3D               	movwf	printf@f,c
  2987  0008A2  0EFE               	movlw	high STR_22
  2988  0008A4  6E3E               	movwf	printf@f+1,c
  2989  0008A6  C08D  F03F         	movff	_realTime+6,?_printf+2
  2990  0008AA  6A40               	clrf	?_printf+3,c
  2991  0008AC  C08C  F041         	movff	_realTime+5,?_printf+4
  2992  0008B0  6A42               	clrf	?_printf+5,c
  2993  0008B2  C08B  F043         	movff	_realTime+4,?_printf+6
  2994  0008B6  6A44               	clrf	?_printf+7,c
  2995  0008B8  EC76  F004         	call	_printf	;wreg free
  2996                           
  2997                           ;main.c: 363: lcdInst(0b11000000);;
  2998  0008BC  0EC0               	movlw	192
  2999  0008BE  ECF8  F00E         	call	_lcdInst
  3000                           
  3001                           ;main.c: 364: printf("TIME: %02x:%02x:%02x  ", realTime[2],realTime[1],realTime[0]);
  3002  0008C2  0EA0               	movlw	low STR_23
  3003  0008C4  6E3D               	movwf	printf@f,c
  3004  0008C6  0EFE               	movlw	high STR_23
  3005  0008C8  6E3E               	movwf	printf@f+1,c
  3006  0008CA  C089  F03F         	movff	_realTime+2,?_printf+2
  3007  0008CE  6A40               	clrf	?_printf+3,c
  3008  0008D0  C088  F041         	movff	_realTime+1,?_printf+4
  3009  0008D4  6A42               	clrf	?_printf+5,c
  3010  0008D6  C087  F043         	movff	_realTime,?_printf+6
  3011  0008DA  6A44               	clrf	?_printf+7,c
  3012  0008DC  EC76  F004         	call	_printf	;wreg free
  3013  0008E0                     l4938:
  3014  0008E0  0E0A               	movlw	10
  3015  0008E2  0100               	movlb	0	; () banked
  3016  0008E4  19CC               	xorwf	_screenMode& (0+255),w,b
  3017  0008E6  A4D8               	btfss	status,2,c
  3018  0008E8  D421               	goto	l4594
  3019  0008EA  D79F               	goto	l4918
  3020  0008EC                     __end_of_main:
  3021                           	opt stack 0
  3022                           tblptru	equ	0xFF8
  3023                           tblptrh	equ	0xFF7
  3024                           tblptrl	equ	0xFF6
  3025                           tablat	equ	0xFF5
  3026                           prodh	equ	0xFF4
  3027                           prodl	equ	0xFF3
  3028                           intcon	equ	0xFF2
  3029                           intcon2	equ	0xFF1
  3030                           intcon3	equ	0xFF0
  3031                           postinc0	equ	0xFEE
  3032                           wreg	equ	0xFE8
  3033                           indf2	equ	0xFDF
  3034                           fsr2h	equ	0xFDA
  3035                           fsr2l	equ	0xFD9
  3036                           status	equ	0xFD8
  3037                           
  3038 ;; *************** function _wait_2ms *****************
  3039 ;; Defined at:
  3040 ;;		line 565 in file "../main.c"
  3041 ;; Parameters:    Size  Location     Type
  3042 ;;  x               2   48[COMRAM] unsigned int 
  3043 ;; Auto vars:     Size  Location     Type
  3044 ;;		None
  3045 ;; Return value:  Size  Location     Type
  3046 ;;                  1    wreg      void 
  3047 ;; Registers used:
  3048 ;;		wreg, status,2, status,0
  3049 ;; Tracked objects:
  3050 ;;		On entry : 0/0
  3051 ;;		On exit  : 0/0
  3052 ;;		Unchanged: 0/0
  3053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3054 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3055 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3056 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3057 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3058 ;;Total ram usage:        2 bytes
  3059 ;; Hardware stack levels used:    1
  3060 ;; Hardware stack levels required when called:    5
  3061 ;; This function calls:
  3062 ;;		Nothing
  3063 ;; This function is called by:
  3064 ;;		_main
  3065 ;; This function uses a non-reentrant model
  3066 ;;
  3067                           
  3068                           	psect	text1
  3069  001D92                     __ptext1:
  3070                           	opt stack 0
  3071  001D92                     _wait_2ms:
  3072                           	opt stack 25
  3073                           
  3074                           ;main.c: 566: count_2ms = x;
  3075                           
  3076                           ; BSR set to: 0
  3077                           ;incstack = 0
  3078  001D92  C031  F047         	movff	wait_2ms@x,_count_2ms
  3079  001D96  C032  F048         	movff	wait_2ms@x+1,_count_2ms+1
  3080  001D9A                     l3490:
  3081  001D9A  5047               	movf	_count_2ms,w,c
  3082  001D9C  1048               	iorwf	_count_2ms+1,w,c
  3083  001D9E  B4D8               	btfsc	status,2,c
  3084  001DA0  0012               	return	
  3085  001DA2  0100               	movlb	0	; () banked
  3086  001DA4  05CC               	decf	_screenMode& (0+255),w,b
  3087  001DA6  A4D8               	btfss	status,2,c
  3088  001DA8  0012               	return	
  3089  001DAA  D7F7               	goto	l3490
  3090  001DAC                     __end_of_wait_2ms:
  3091                           	opt stack 0
  3092                           tblptru	equ	0xFF8
  3093                           tblptrh	equ	0xFF7
  3094                           tblptrl	equ	0xFF6
  3095                           tablat	equ	0xFF5
  3096                           prodh	equ	0xFF4
  3097                           prodl	equ	0xFF3
  3098                           intcon	equ	0xFF2
  3099                           intcon2	equ	0xFF1
  3100                           intcon3	equ	0xFF0
  3101                           postinc0	equ	0xFEE
  3102                           wreg	equ	0xFE8
  3103                           indf2	equ	0xFDF
  3104                           fsr2h	equ	0xFDA
  3105                           fsr2l	equ	0xFD9
  3106                           status	equ	0xFD8
  3107                           
  3108 ;; *************** function _testBatteries *****************
  3109 ;; Defined at:
  3110 ;;		line 475 in file "../main.c"
  3111 ;; Parameters:    Size  Location     Type
  3112 ;;		None
  3113 ;; Auto vars:     Size  Location     Type
  3114 ;;  volt5           2   22[BANK0 ] unsigned int 
  3115 ;;  volt4           2   20[BANK0 ] unsigned int 
  3116 ;;  volt2           2   18[BANK0 ] unsigned int 
  3117 ;;  volt3           2   16[BANK0 ] unsigned int 
  3118 ;;  volt1           2   14[BANK0 ] unsigned int 
  3119 ;; Return value:  Size  Location     Type
  3120 ;;                  1    wreg      void 
  3121 ;; Registers used:
  3122 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3123 ;; Tracked objects:
  3124 ;;		On entry : 0/0
  3125 ;;		On exit  : 0/0
  3126 ;;		Unchanged: 0/0
  3127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3129 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3130 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3131 ;;      Totals:         2      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3132 ;;Total ram usage:       12 bytes
  3133 ;; Hardware stack levels used:    1
  3134 ;; Hardware stack levels required when called:    8
  3135 ;; This function calls:
  3136 ;;		_lcdInst
  3137 ;;		_printf
  3138 ;;		_readADC
  3139 ;; This function is called by:
  3140 ;;		_main
  3141 ;; This function uses a non-reentrant model
  3142 ;;
  3143                           
  3144                           	psect	text2
  3145  00123E                     __ptext2:
  3146                           	opt stack 0
  3147  00123E                     _testBatteries:
  3148                           	opt stack 22
  3149                           
  3150                           ;main.c: 495: readADC(1);
  3151                           
  3152                           ;incstack = 0
  3153  00123E  0E01               	movlw	1
  3154  001240  ECD6  F00E         	call	_readADC
  3155                           
  3156                           ;main.c: 496: unsigned int volt1 = ADRES;
  3157  001244  CFC3 F0B9          	movff	4035,testBatteries@volt1	;volatile
  3158  001248  CFC4 F0BA          	movff	4036,testBatteries@volt1+1	;volatile
  3159                           
  3160                           ;main.c: 497: readADC(2);
  3161  00124C  0E02               	movlw	2
  3162  00124E  ECD6  F00E         	call	_readADC
  3163                           
  3164                           ;main.c: 498: unsigned int volt2 = ADRES;
  3165  001252  CFC3 F0BD          	movff	4035,testBatteries@volt2	;volatile
  3166  001256  CFC4 F0BE          	movff	4036,testBatteries@volt2+1	;volatile
  3167                           
  3168                           ;main.c: 499: readADC(3);
  3169  00125A  0E03               	movlw	3
  3170  00125C  ECD6  F00E         	call	_readADC
  3171                           
  3172                           ;main.c: 500: unsigned int volt3 = ADRES;
  3173  001260  CFC3 F0BB          	movff	4035,testBatteries@volt3	;volatile
  3174  001264  CFC4 F0BC          	movff	4036,testBatteries@volt3+1	;volatile
  3175                           
  3176                           ;main.c: 501: readADC(4);
  3177  001268  0E04               	movlw	4
  3178  00126A  ECD6  F00E         	call	_readADC
  3179                           
  3180                           ;main.c: 502: unsigned int volt4 = ADRES;
  3181  00126E  CFC3 F0BF          	movff	4035,testBatteries@volt4	;volatile
  3182  001272  CFC4 F0C0          	movff	4036,testBatteries@volt4+1	;volatile
  3183                           
  3184                           ;main.c: 503: readADC(5);
  3185  001276  0E05               	movlw	5
  3186  001278  ECD6  F00E         	call	_readADC
  3187                           
  3188                           ;main.c: 504: unsigned int volt5 = ADRES;
  3189  00127C  CFC3 F0C1          	movff	4035,testBatteries@volt5	;volatile
  3190  001280  CFC4 F0C2          	movff	4036,testBatteries@volt5+1	;volatile
  3191                           
  3192                           ;main.c: 506: lcdInst(0b10000000);;
  3193  001284  0E80               	movlw	128
  3194  001286  ECF8  F00E         	call	_lcdInst
  3195                           
  3196                           ;main.c: 507: printf("%04d %04d %04d", volt1, volt2, volt3);
  3197  00128A  0EEF               	movlw	low STR_25
  3198  00128C  6E3D               	movwf	printf@f,c
  3199  00128E  0EFF               	movlw	high STR_25
  3200  001290  6E3E               	movwf	printf@f+1,c
  3201  001292  C0B9  F03F         	movff	testBatteries@volt1,?_printf+2
  3202  001296  C0BA  F040         	movff	testBatteries@volt1+1,?_printf+3
  3203  00129A  C0BD  F041         	movff	testBatteries@volt2,?_printf+4
  3204  00129E  C0BE  F042         	movff	testBatteries@volt2+1,?_printf+5
  3205  0012A2  C0BB  F043         	movff	testBatteries@volt3,?_printf+6
  3206  0012A6  C0BC  F044         	movff	testBatteries@volt3+1,?_printf+7
  3207  0012AA  EC76  F004         	call	_printf	;wreg free
  3208                           
  3209                           ;main.c: 508: lcdInst(0b11000000);;
  3210  0012AE  0EC0               	movlw	192
  3211  0012B0  ECF8  F00E         	call	_lcdInst
  3212                           
  3213                           ;main.c: 509: printf("%04d %04d       ", volt4, volt5);
  3214  0012B4  0E45               	movlw	low STR_26
  3215  0012B6  6E3D               	movwf	printf@f,c
  3216  0012B8  0EFF               	movlw	high STR_26
  3217  0012BA  6E3E               	movwf	printf@f+1,c
  3218  0012BC  C0BF  F03F         	movff	testBatteries@volt4,?_printf+2
  3219  0012C0  C0C0  F040         	movff	testBatteries@volt4+1,?_printf+3
  3220  0012C4  C0C1  F041         	movff	testBatteries@volt5,?_printf+4
  3221  0012C8  C0C2  F042         	movff	testBatteries@volt5+1,?_printf+5
  3222  0012CC  EC76  F004         	call	_printf	;wreg free
  3223                           
  3224                           ;main.c: 511: if (volt1){
  3225  0012D0  0100               	movlb	0	; () banked
  3226  0012D2  51B9               	movf	testBatteries@volt1& (0+255),w,b
  3227  0012D4  0100               	movlb	0	; () banked
  3228  0012D6  11BA               	iorwf	(testBatteries@volt1+1)& (0+255),w,b
  3229  0012D8  B4D8               	btfsc	status,2,c
  3230  0012DA  D00D               	goto	l4462
  3231                           
  3232                           ; BSR set to: 0
  3233                           ;main.c: 512: countC++;
  3234  0012DC  0100               	movlb	0	; () banked
  3235  0012DE  2BA0               	incf	_countC& (0+255),f,b
  3236                           
  3237                           ; BSR set to: 0
  3238                           ;main.c: 513: plat1Right = 512;
  3239  0012E0  0E02               	movlw	2
  3240  0012E2  0100               	movlb	0	; () banked
  3241  0012E4  6F91               	movwf	(_plat1Right+1)& (0+255),b
  3242  0012E6  0E00               	movlw	0
  3243  0012E8  6F90               	movwf	_plat1Right& (0+255),b
  3244                           
  3245                           ; BSR set to: 0
  3246                           ;main.c: 514: plat2Left = 512;
  3247  0012EA  0E02               	movlw	2
  3248  0012EC  0100               	movlb	0	; () banked
  3249  0012EE  6F93               	movwf	(_plat2Left+1)& (0+255),b
  3250  0012F0  0E00               	movlw	0
  3251  0012F2  6F92               	movwf	_plat2Left& (0+255),b
  3252                           
  3253                           ; BSR set to: 0
  3254                           ;main.c: 515: return;
  3255  0012F4  0012               	return	
  3256  0012F6                     l4462:
  3257                           
  3258                           ; BSR set to: 0
  3259                           ;main.c: 516: }
  3260                           ;main.c: 517: if (!(volt1 | volt2 | volt3 | volt4 | volt5)){
  3261  0012F6  0100               	movlb	0	; () banked
  3262  0012F8  51BD               	movf	testBatteries@volt2& (0+255),w,b
  3263  0012FA  0100               	movlb	0	; () banked
  3264  0012FC  11B9               	iorwf	testBatteries@volt1& (0+255),w,b
  3265  0012FE  6E45               	movwf	??_testBatteries& (0+255),c
  3266  001300  0100               	movlb	0	; () banked
  3267  001302  51BE               	movf	(testBatteries@volt2+1)& (0+255),w,b
  3268  001304  0100               	movlb	0	; () banked
  3269  001306  11BA               	iorwf	(testBatteries@volt1+1)& (0+255),w,b
  3270  001308  6E46               	movwf	(??_testBatteries+1)& (0+255),c
  3271  00130A  0100               	movlb	0	; () banked
  3272  00130C  51BB               	movf	testBatteries@volt3& (0+255),w,b
  3273  00130E  1245               	iorwf	??_testBatteries,f,c
  3274  001310  0100               	movlb	0	; () banked
  3275  001312  51BC               	movf	(testBatteries@volt3+1)& (0+255),w,b
  3276  001314  1246               	iorwf	??_testBatteries+1,f,c
  3277  001316  0100               	movlb	0	; () banked
  3278  001318  51BF               	movf	testBatteries@volt4& (0+255),w,b
  3279  00131A  1245               	iorwf	??_testBatteries,f,c
  3280  00131C  0100               	movlb	0	; () banked
  3281  00131E  51C0               	movf	(testBatteries@volt4+1)& (0+255),w,b
  3282  001320  1246               	iorwf	??_testBatteries+1,f,c
  3283  001322  0100               	movlb	0	; () banked
  3284  001324  51C1               	movf	testBatteries@volt5& (0+255),w,b
  3285  001326  1245               	iorwf	??_testBatteries,f,c
  3286  001328  0100               	movlb	0	; () banked
  3287  00132A  51C2               	movf	(testBatteries@volt5+1)& (0+255),w,b
  3288  00132C  1246               	iorwf	??_testBatteries+1,f,c
  3289  00132E  5045               	movf	??_testBatteries,w,c
  3290  001330  1046               	iorwf	??_testBatteries+1,w,c
  3291  001332  A4D8               	btfss	status,2,c
  3292  001334  D00D               	goto	l4472
  3293                           
  3294                           ; BSR set to: 0
  3295                           ;main.c: 518: countDrain++;
  3296  001336  0100               	movlb	0	; () banked
  3297  001338  2BA1               	incf	_countDrain& (0+255),f,b
  3298                           
  3299                           ; BSR set to: 0
  3300                           ;main.c: 519: plat1Left = 512;
  3301  00133A  0E02               	movlw	2
  3302  00133C  0100               	movlb	0	; () banked
  3303  00133E  6F8F               	movwf	(_plat1Left+1)& (0+255),b
  3304  001340  0E00               	movlw	0
  3305  001342  6F8E               	movwf	_plat1Left& (0+255),b
  3306                           
  3307                           ; BSR set to: 0
  3308                           ;main.c: 520: plat2Right = 512;
  3309  001344  0E02               	movlw	2
  3310  001346  0100               	movlb	0	; () banked
  3311  001348  6F95               	movwf	(_plat2Right+1)& (0+255),b
  3312  00134A  0E00               	movlw	0
  3313  00134C  6F94               	movwf	_plat2Right& (0+255),b
  3314                           
  3315                           ; BSR set to: 0
  3316                           ;main.c: 521: return;
  3317  00134E  0012               	return	
  3318  001350                     l4472:
  3319                           
  3320                           ; BSR set to: 0
  3321                           ;main.c: 522: }
  3322                           ;main.c: 523: if (volt2 && volt3){
  3323  001350  0100               	movlb	0	; () banked
  3324  001352  51BD               	movf	testBatteries@volt2& (0+255),w,b
  3325  001354  0100               	movlb	0	; () banked
  3326  001356  11BE               	iorwf	(testBatteries@volt2+1)& (0+255),w,b
  3327  001358  B4D8               	btfsc	status,2,c
  3328  00135A  D00F               	goto	l4482
  3329                           
  3330                           ; BSR set to: 0
  3331  00135C  0100               	movlb	0	; () banked
  3332  00135E  51BB               	movf	testBatteries@volt3& (0+255),w,b
  3333  001360  0100               	movlb	0	; () banked
  3334  001362  11BC               	iorwf	(testBatteries@volt3+1)& (0+255),w,b
  3335  001364  B4D8               	btfsc	status,2,c
  3336  001366  D009               	goto	l4482
  3337                           
  3338                           ; BSR set to: 0
  3339                           ;main.c: 524: countAA = countAA + 2;
  3340  001368  0100               	movlb	0	; () banked
  3341  00136A  519F               	movf	_countAA& (0+255),w,b
  3342  00136C  0F02               	addlw	2
  3343  00136E  0100               	movlb	0	; () banked
  3344  001370  6F9F               	movwf	_countAA& (0+255),b
  3345                           
  3346                           ; BSR set to: 0
  3347                           ;main.c: 525: doubleAA = 1;
  3348  001372  0E01               	movlw	1
  3349  001374  0100               	movlb	0	; () banked
  3350  001376  6FA2               	movwf	_doubleAA& (0+255),b
  3351                           
  3352                           ; BSR set to: 0
  3353                           ;main.c: 526: return;
  3354  001378  0012               	return	
  3355  00137A                     l4482:
  3356                           
  3357                           ; BSR set to: 0
  3358                           ;main.c: 527: }
  3359                           ;main.c: 528: if (volt4 >200 | volt5 > 200){
  3360  00137A  0100               	movlb	0	; () banked
  3361  00137C  51C0               	movf	(testBatteries@volt4+1)& (0+255),w,b
  3362  00137E  E10D               	bnz	l4486
  3363  001380  0EC9               	movlw	201
  3364  001382  0100               	movlb	0	; () banked
  3365  001384  5DBF               	subwf	testBatteries@volt4& (0+255),w,b
  3366  001386  B0D8               	btfsc	status,0,c
  3367  001388  D008               	goto	l4486
  3368                           
  3369                           ; BSR set to: 0
  3370  00138A  0100               	movlb	0	; () banked
  3371  00138C  51C2               	movf	(testBatteries@volt5+1)& (0+255),w,b
  3372  00138E  E105               	bnz	l4486
  3373  001390  0EC9               	movlw	201
  3374  001392  0100               	movlb	0	; () banked
  3375  001394  5DC1               	subwf	testBatteries@volt5& (0+255),w,b
  3376  001396  A0D8               	btfss	status,0,c
  3377  001398  D00D               	goto	l4492
  3378  00139A                     l4486:
  3379                           
  3380                           ; BSR set to: 0
  3381                           ;main.c: 529: plat1Right = 512;
  3382  00139A  0E02               	movlw	2
  3383  00139C  0100               	movlb	0	; () banked
  3384  00139E  6F91               	movwf	(_plat1Right+1)& (0+255),b
  3385  0013A0  0E00               	movlw	0
  3386  0013A2  6F90               	movwf	_plat1Right& (0+255),b
  3387                           
  3388                           ;main.c: 530: plat2Left = 512;
  3389  0013A4  0E02               	movlw	2
  3390  0013A6  0100               	movlb	0	; () banked
  3391  0013A8  6F93               	movwf	(_plat2Left+1)& (0+255),b
  3392  0013AA  0E00               	movlw	0
  3393  0013AC  6F92               	movwf	_plat2Left& (0+255),b
  3394                           
  3395                           ; BSR set to: 0
  3396                           ;main.c: 531: count9V++;
  3397  0013AE  0100               	movlb	0	; () banked
  3398  0013B0  2B9E               	incf	_count9V& (0+255),f,b
  3399                           
  3400                           ; BSR set to: 0
  3401                           ;main.c: 532: return;
  3402  0013B2  0012               	return	
  3403  0013B4                     l4492:
  3404                           
  3405                           ; BSR set to: 0
  3406                           ;main.c: 533: }
  3407                           ;main.c: 534: if (volt4 > 80 | volt5 > 80){
  3408  0013B4  0100               	movlb	0	; () banked
  3409  0013B6  51C0               	movf	(testBatteries@volt4+1)& (0+255),w,b
  3410  0013B8  E10D               	bnz	l4496
  3411  0013BA  0E51               	movlw	81
  3412  0013BC  0100               	movlb	0	; () banked
  3413  0013BE  5DBF               	subwf	testBatteries@volt4& (0+255),w,b
  3414  0013C0  B0D8               	btfsc	status,0,c
  3415  0013C2  D008               	goto	l4496
  3416                           
  3417                           ; BSR set to: 0
  3418  0013C4  0100               	movlb	0	; () banked
  3419  0013C6  51C2               	movf	(testBatteries@volt5+1)& (0+255),w,b
  3420  0013C8  E105               	bnz	l4496
  3421  0013CA  0E51               	movlw	81
  3422  0013CC  0100               	movlb	0	; () banked
  3423  0013CE  5DC1               	subwf	testBatteries@volt5& (0+255),w,b
  3424  0013D0  A0D8               	btfss	status,0,c
  3425  0013D2  D00D               	goto	l4504
  3426  0013D4                     l4496:
  3427                           
  3428                           ; BSR set to: 0
  3429                           ;main.c: 535: countDrain++;
  3430  0013D4  0100               	movlb	0	; () banked
  3431  0013D6  2BA1               	incf	_countDrain& (0+255),f,b
  3432                           
  3433                           ; BSR set to: 0
  3434                           ;main.c: 536: plat1Left = 512;
  3435  0013D8  0E02               	movlw	2
  3436  0013DA  0100               	movlb	0	; () banked
  3437  0013DC  6F8F               	movwf	(_plat1Left+1)& (0+255),b
  3438  0013DE  0E00               	movlw	0
  3439  0013E0  6F8E               	movwf	_plat1Left& (0+255),b
  3440                           
  3441                           ; BSR set to: 0
  3442                           ;main.c: 537: plat2Right = 512;
  3443  0013E2  0E02               	movlw	2
  3444  0013E4  0100               	movlb	0	; () banked
  3445  0013E6  6F95               	movwf	(_plat2Right+1)& (0+255),b
  3446  0013E8  0E00               	movlw	0
  3447  0013EA  6F94               	movwf	_plat2Right& (0+255),b
  3448                           
  3449                           ; BSR set to: 0
  3450                           ;main.c: 538: return;
  3451  0013EC  0012               	return	
  3452  0013EE                     l4504:
  3453                           
  3454                           ; BSR set to: 0
  3455                           ;main.c: 539: }
  3456                           ;main.c: 540: if (volt2 | volt3){
  3457  0013EE  0100               	movlb	0	; () banked
  3458  0013F0  51BB               	movf	testBatteries@volt3& (0+255),w,b
  3459  0013F2  0100               	movlb	0	; () banked
  3460  0013F4  11BD               	iorwf	testBatteries@volt2& (0+255),w,b
  3461  0013F6  6E45               	movwf	??_testBatteries& (0+255),c
  3462  0013F8  0100               	movlb	0	; () banked
  3463  0013FA  51BC               	movf	(testBatteries@volt3+1)& (0+255),w,b
  3464  0013FC  0100               	movlb	0	; () banked
  3465  0013FE  11BE               	iorwf	(testBatteries@volt2+1)& (0+255),w,b
  3466  001400  6E46               	movwf	(??_testBatteries+1)& (0+255),c
  3467  001402  5045               	movf	??_testBatteries,w,c
  3468  001404  1046               	iorwf	??_testBatteries+1,w,c
  3469  001406  B4D8               	btfsc	status,2,c
  3470  001408  D035               	goto	l4524
  3471                           
  3472                           ; BSR set to: 0
  3473                           ;main.c: 541: countAA++;
  3474  00140A  0100               	movlb	0	; () banked
  3475  00140C  2B9F               	incf	_countAA& (0+255),f,b
  3476                           
  3477                           ; BSR set to: 0
  3478                           ;main.c: 542: if (volt4 && volt5){
  3479  00140E  0100               	movlb	0	; () banked
  3480  001410  51BF               	movf	testBatteries@volt4& (0+255),w,b
  3481  001412  0100               	movlb	0	; () banked
  3482  001414  11C0               	iorwf	(testBatteries@volt4+1)& (0+255),w,b
  3483  001416  B4D8               	btfsc	status,2,c
  3484  001418  D011               	goto	l4516
  3485                           
  3486                           ; BSR set to: 0
  3487  00141A  0100               	movlb	0	; () banked
  3488  00141C  51C1               	movf	testBatteries@volt5& (0+255),w,b
  3489  00141E  0100               	movlb	0	; () banked
  3490  001420  11C2               	iorwf	(testBatteries@volt5+1)& (0+255),w,b
  3491  001422  B4D8               	btfsc	status,2,c
  3492  001424  D00B               	goto	l4516
  3493                           
  3494                           ; BSR set to: 0
  3495                           ;main.c: 543: plat1Right = 512;
  3496  001426  0E02               	movlw	2
  3497  001428  0100               	movlb	0	; () banked
  3498  00142A  6F91               	movwf	(_plat1Right+1)& (0+255),b
  3499  00142C  0E00               	movlw	0
  3500  00142E  6F90               	movwf	_plat1Right& (0+255),b
  3501                           
  3502                           ;main.c: 544: plat2Left = 512;
  3503  001430  0E02               	movlw	2
  3504  001432  0100               	movlb	0	; () banked
  3505  001434  6F93               	movwf	(_plat2Left+1)& (0+255),b
  3506  001436  0E00               	movlw	0
  3507  001438  6F92               	movwf	_plat2Left& (0+255),b
  3508                           
  3509                           ; BSR set to: 0
  3510                           ;main.c: 545: return;
  3511  00143A  0012               	return	
  3512  00143C                     l4516:
  3513                           
  3514                           ; BSR set to: 0
  3515                           ;main.c: 546: }
  3516                           ;main.c: 547: if (volt2){
  3517  00143C  0100               	movlb	0	; () banked
  3518  00143E  51BD               	movf	testBatteries@volt2& (0+255),w,b
  3519  001440  0100               	movlb	0	; () banked
  3520  001442  11BE               	iorwf	(testBatteries@volt2+1)& (0+255),w,b
  3521  001444  B4D8               	btfsc	status,2,c
  3522  001446  D00B               	goto	l4520
  3523                           
  3524                           ; BSR set to: 0
  3525                           ;main.c: 548: plat1Right = 512;
  3526  001448  0E02               	movlw	2
  3527  00144A  0100               	movlb	0	; () banked
  3528  00144C  6F91               	movwf	(_plat1Right+1)& (0+255),b
  3529  00144E  0E00               	movlw	0
  3530  001450  6F90               	movwf	_plat1Right& (0+255),b
  3531                           
  3532                           ;main.c: 549: plat2Right = 512;
  3533  001452  0E02               	movlw	2
  3534  001454  0100               	movlb	0	; () banked
  3535  001456  6F95               	movwf	(_plat2Right+1)& (0+255),b
  3536  001458  0E00               	movlw	0
  3537  00145A  6F94               	movwf	_plat2Right& (0+255),b
  3538                           
  3539                           ;main.c: 550: }
  3540  00145C  0012               	return	
  3541  00145E                     l4520:
  3542                           
  3543                           ; BSR set to: 0
  3544                           ;main.c: 551: else{
  3545                           ;main.c: 552: plat2Left = 512;
  3546  00145E  0E02               	movlw	2
  3547  001460  0100               	movlb	0	; () banked
  3548  001462  6F93               	movwf	(_plat2Left+1)& (0+255),b
  3549  001464  0E00               	movlw	0
  3550  001466  6F92               	movwf	_plat2Left& (0+255),b
  3551                           
  3552                           ;main.c: 553: plat1Left = 512;
  3553  001468  0E02               	movlw	2
  3554  00146A  0100               	movlb	0	; () banked
  3555  00146C  6F8F               	movwf	(_plat1Left+1)& (0+255),b
  3556  00146E  0E00               	movlw	0
  3557  001470  6F8E               	movwf	_plat1Left& (0+255),b
  3558                           
  3559                           ; BSR set to: 0
  3560                           ;main.c: 554: }
  3561                           ;main.c: 555: return;
  3562                           
  3563                           ; BSR set to: 0
  3564  001472  0012               	return	
  3565  001474                     l4524:
  3566                           
  3567                           ; BSR set to: 0
  3568                           ;main.c: 556: }
  3569                           ;main.c: 559: plat1Left = 512;
  3570  001474  0E02               	movlw	2
  3571  001476  0100               	movlb	0	; () banked
  3572  001478  6F8F               	movwf	(_plat1Left+1)& (0+255),b
  3573  00147A  0E00               	movlw	0
  3574  00147C  6F8E               	movwf	_plat1Left& (0+255),b
  3575                           
  3576                           ;main.c: 560: plat2Right = 512;
  3577  00147E  0E02               	movlw	2
  3578  001480  0100               	movlb	0	; () banked
  3579  001482  6F95               	movwf	(_plat2Right+1)& (0+255),b
  3580  001484  0E00               	movlw	0
  3581  001486  6F94               	movwf	_plat2Right& (0+255),b
  3582                           
  3583                           ; BSR set to: 0
  3584                           ;main.c: 561: countDrain++;
  3585  001488  0100               	movlb	0	; () banked
  3586  00148A  2BA1               	incf	_countDrain& (0+255),f,b
  3587  00148C  0012               	return	
  3588  00148E                     __end_of_testBatteries:
  3589                           	opt stack 0
  3590                           tblptru	equ	0xFF8
  3591                           tblptrh	equ	0xFF7
  3592                           tblptrl	equ	0xFF6
  3593                           tablat	equ	0xFF5
  3594                           prodh	equ	0xFF4
  3595                           prodl	equ	0xFF3
  3596                           intcon	equ	0xFF2
  3597                           intcon2	equ	0xFF1
  3598                           intcon3	equ	0xFF0
  3599                           postinc0	equ	0xFEE
  3600                           wreg	equ	0xFE8
  3601                           indf2	equ	0xFDF
  3602                           fsr2h	equ	0xFDA
  3603                           fsr2l	equ	0xFD9
  3604                           status	equ	0xFD8
  3605                           
  3606 ;; *************** function _readADC *****************
  3607 ;; Defined at:
  3608 ;;		line 421 in file "../main.c"
  3609 ;; Parameters:    Size  Location     Type
  3610 ;;  channel         1    wreg     unsigned char 
  3611 ;; Auto vars:     Size  Location     Type
  3612 ;;  channel         1   48[COMRAM] unsigned char 
  3613 ;; Return value:  Size  Location     Type
  3614 ;;                  1    wreg      void 
  3615 ;; Registers used:
  3616 ;;		wreg, status,2, status,0
  3617 ;; Tracked objects:
  3618 ;;		On entry : 0/0
  3619 ;;		On exit  : 0/0
  3620 ;;		Unchanged: 0/0
  3621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3622 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3623 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3624 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3625 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3626 ;;Total ram usage:        1 bytes
  3627 ;; Hardware stack levels used:    1
  3628 ;; Hardware stack levels required when called:    5
  3629 ;; This function calls:
  3630 ;;		Nothing
  3631 ;; This function is called by:
  3632 ;;		_main
  3633 ;;		_testBatteries
  3634 ;; This function uses a non-reentrant model
  3635 ;;
  3636                           
  3637                           	psect	text3
  3638  001DAC                     __ptext3:
  3639                           	opt stack 0
  3640  001DAC                     _readADC:
  3641                           	opt stack 24
  3642                           
  3643                           ; BSR set to: 0
  3644                           ;incstack = 0
  3645                           ;readADC@channel stored from wreg
  3646  001DAC  6E31               	movwf	readADC@channel,c
  3647                           
  3648                           ;main.c: 423: ADCON0 = channel << 2;
  3649  001DAE  4431               	rlncf	readADC@channel,w,c
  3650  001DB0  46E8               	rlncf	wreg,f,c
  3651  001DB2  0BFC               	andlw	252
  3652  001DB4  6EC2               	movwf	4034,c	;volatile
  3653                           
  3654                           ;main.c: 424: ADCON0bits.ADON = 1;
  3655  001DB6  80C2               	bsf	4034,0,c	;volatile
  3656                           
  3657                           ;main.c: 425: ADCON0bits.GO = 1;
  3658  001DB8  82C2               	bsf	4034,1,c	;volatile
  3659  001DBA                     l362:
  3660  001DBA  A2C2               	btfss	4034,1,c	;volatile
  3661  001DBC  0012               	return	
  3662  001DBE  D7FD               	goto	l362
  3663  001DC0                     __end_of_readADC:
  3664                           	opt stack 0
  3665                           tblptru	equ	0xFF8
  3666                           tblptrh	equ	0xFF7
  3667                           tblptrl	equ	0xFF6
  3668                           tablat	equ	0xFF5
  3669                           prodh	equ	0xFF4
  3670                           prodl	equ	0xFF3
  3671                           intcon	equ	0xFF2
  3672                           intcon2	equ	0xFF1
  3673                           intcon3	equ	0xFF0
  3674                           postinc0	equ	0xFEE
  3675                           wreg	equ	0xFE8
  3676                           indf2	equ	0xFDF
  3677                           fsr2h	equ	0xFDA
  3678                           fsr2l	equ	0xFD9
  3679                           status	equ	0xFD8
  3680                           
  3681 ;; *************** function _printf *****************
  3682 ;; Defined at:
  3683 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  3684 ;; Parameters:    Size  Location     Type
  3685 ;;  f               2   60[COMRAM] PTR const unsigned char 
  3686 ;;		 -> STR_26(17), STR_25(15), STR_24(17), STR_23(23), 
  3687 ;;		 -> STR_22(23), STR_21(23), STR_20(23), STR_19(17), 
  3688 ;;		 -> STR_18(21), STR_17(17), STR_16(21), STR_15(17), 
  3689 ;;		 -> STR_14(21), STR_13(17), STR_12(19), STR_11(17), 
  3690 ;;		 -> STR_10(19), STR_9(17), STR_8(25), STR_7(17), 
  3691 ;;		 -> STR_6(17), STR_5(17), STR_4(17), STR_3(17), 
  3692 ;;		 -> STR_2(17), STR_1(17), 
  3693 ;; Auto vars:     Size  Location     Type
  3694 ;;  idx             1    4[BANK0 ] unsigned char 
  3695 ;;  tmpval          4    0        struct .
  3696 ;;  cp              3    0        PTR const unsigned char 
  3697 ;;  width           2   11[BANK0 ] int 
  3698 ;;  val             2    8[BANK0 ] unsigned int 
  3699 ;;  ap              2    5[BANK0 ] PTR void [1]
  3700 ;;		 -> ?i2_printf(2), ?_printf(2), 
  3701 ;;  len             2    0        unsigned int 
  3702 ;;  c               1   13[BANK0 ] char 
  3703 ;;  flag            1   10[BANK0 ] unsigned char 
  3704 ;;  prec            1    7[BANK0 ] char 
  3705 ;; Return value:  Size  Location     Type
  3706 ;;                  2   60[COMRAM] int 
  3707 ;; Registers used:
  3708 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3709 ;; Tracked objects:
  3710 ;;		On entry : 0/0
  3711 ;;		On exit  : 0/0
  3712 ;;		Unchanged: 0/0
  3713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3714 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3715 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3716 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3717 ;;      Totals:         8      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3718 ;;Total ram usage:       22 bytes
  3719 ;; Hardware stack levels used:    1
  3720 ;; Hardware stack levels required when called:    7
  3721 ;; This function calls:
  3722 ;;		___lwdiv
  3723 ;;		___lwmod
  3724 ;;		___wmul
  3725 ;;		_isdigit
  3726 ;;		_putch
  3727 ;; This function is called by:
  3728 ;;		_main
  3729 ;;		_testBatteries
  3730 ;; This function uses a non-reentrant model
  3731 ;;
  3732                           
  3733                           	psect	text4
  3734  0008EC                     __ptext4:
  3735                           	opt stack 0
  3736  0008EC                     _printf:
  3737                           	opt stack 22
  3738                           
  3739                           ;doprnt.c: 466: va_list ap;
  3740                           ;doprnt.c: 499: signed char c;
  3741                           ;doprnt.c: 501: int width;
  3742                           ;doprnt.c: 506: signed char prec;
  3743                           ;doprnt.c: 508: unsigned char flag;
  3744                           ;doprnt.c: 523: union {
  3745                           ;doprnt.c: 524: unsigned long vd;
  3746                           ;doprnt.c: 525: double integ;
  3747                           ;doprnt.c: 526: } tmpval;
  3748                           ;doprnt.c: 528: unsigned int val;
  3749                           ;doprnt.c: 529: unsigned len;
  3750                           ;doprnt.c: 530: const char * cp;
  3751                           ;doprnt.c: 533: *ap = __va_start();
  3752                           
  3753                           ;incstack = 0
  3754  0008EC  0E3F               	movlw	low (?_printf+2)
  3755  0008EE  0100               	movlb	0	; () banked
  3756  0008F0  6FB0               	movwf	printf@ap& (0+255),b
  3757  0008F2  0E00               	movlw	high (?_printf+2)
  3758  0008F4  0100               	movlb	0	; () banked
  3759  0008F6  6FB1               	movwf	(printf@ap+1)& (0+255),b
  3760                           
  3761                           ;doprnt.c: 536: while(c = *f++) {
  3762  0008F8  D1BD               	goto	l4434
  3763  0008FA                     l4308:
  3764                           
  3765                           ; BSR set to: 0
  3766                           ;doprnt.c: 538: if(c != '%')
  3767  0008FA  0E25               	movlw	37
  3768  0008FC  0100               	movlb	0	; () banked
  3769  0008FE  19B8               	xorwf	printf@c& (0+255),w,b
  3770  000900  B4D8               	btfsc	status,2,c
  3771  000902  D005               	goto	l4312
  3772                           
  3773                           ; BSR set to: 0
  3774                           ;doprnt.c: 540: {
  3775                           ;doprnt.c: 541: (putch(c) );
  3776  000904  0100               	movlb	0	; () banked
  3777  000906  51B8               	movf	printf@c& (0+255),w,b
  3778  000908  ECF2  F00E         	call	_putch
  3779                           
  3780                           ;doprnt.c: 542: continue;
  3781  00090C  D1B3               	goto	l4434
  3782  00090E                     l4312:
  3783                           
  3784                           ;doprnt.c: 543: }
  3785                           ;doprnt.c: 546: width = 0;
  3786  00090E  0E00               	movlw	0
  3787  000910  0100               	movlb	0	; () banked
  3788  000912  6FB7               	movwf	(printf@width+1)& (0+255),b
  3789  000914  0E00               	movlw	0
  3790  000916  6FB6               	movwf	printf@width& (0+255),b
  3791                           
  3792                           ;doprnt.c: 548: flag = 0;
  3793  000918  0E00               	movlw	0
  3794  00091A  0100               	movlb	0	; () banked
  3795  00091C  6FB5               	movwf	printf@flag& (0+255),b
  3796                           
  3797                           ; BSR set to: 0
  3798                           ;doprnt.c: 551: switch(*f) {
  3799                           
  3800                           ;doprnt.c: 550: for(;;) {
  3801  00091E  D004               	goto	l4318
  3802  000920                     l4314:
  3803                           
  3804                           ;doprnt.c: 580: flag |= 0x04;
  3805  000920  0100               	movlb	0	; () banked
  3806  000922  85B5               	bsf	printf@flag& (0+255),2,b
  3807                           
  3808                           ;doprnt.c: 581: f++;
  3809  000924  4A3D               	infsnz	printf@f,f,c
  3810  000926  2A3E               	incf	printf@f+1,f,c
  3811  000928                     l4318:
  3812  000928  C03D  FFF6         	movff	printf@f,tblptrl
  3813  00092C  C03E  FFF7         	movff	printf@f+1,tblptrh
  3814  000930                     	if	0	;tblptru may be non-zero
  3815  000930                     	endif
  3816  000930                     	if	0	;tblptru may be non-zero
  3817  000930                     	endif
  3818  000930  0008               	tblrd		*
  3819  000932  50F5               	movf	tablat,w,c
  3820                           
  3821                           ; Switch size 1, requested type "space"
  3822                           ; Number of cases is 1, Range of values is 48 to 48
  3823                           ; switch strategies available:
  3824                           ; Name         Instructions Cycles
  3825                           ; simple_byte            4     3 (average)
  3826                           ;	Chosen strategy is simple_byte
  3827  000934  0A30               	xorlw	48	; case 48
  3828  000936  B4D8               	btfsc	status,2,c
  3829  000938  D7F3               	goto	l4314
  3830                           
  3831                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  3832                           
  3833                           ;doprnt.c: 586: }
  3834                           
  3835                           ;doprnt.c: 585: break;
  3836  00093A  C03D  FFF6         	movff	printf@f,tblptrl
  3837  00093E  C03E  FFF7         	movff	printf@f+1,tblptrh
  3838  000942                     	if	0	;tblptru may be non-zero
  3839  000942                     	endif
  3840  000942                     	if	0	;tblptru may be non-zero
  3841  000942                     	endif
  3842  000942  0008               	tblrd		*
  3843  000944  50F5               	movf	tablat,w,c
  3844  000946  ECAB  F00E         	call	_isdigit
  3845  00094A  A0D8               	btfss	status,0,c
  3846  00094C  D042               	goto	l4336
  3847                           
  3848                           ;doprnt.c: 598: width = 0;
  3849  00094E  0E00               	movlw	0
  3850  000950  0100               	movlb	0	; () banked
  3851  000952  6FB7               	movwf	(printf@width+1)& (0+255),b
  3852  000954  0E00               	movlw	0
  3853  000956  6FB6               	movwf	printf@width& (0+255),b
  3854  000958                     l4324:
  3855                           
  3856                           ;doprnt.c: 600: width *= 10;
  3857  000958  C0B6  F031         	movff	printf@width,___wmul@multiplier
  3858  00095C  C0B7  F032         	movff	printf@width+1,___wmul@multiplier+1
  3859  000960  0E00               	movlw	0
  3860  000962  6E34               	movwf	___wmul@multiplicand+1,c
  3861  000964  0E0A               	movlw	10
  3862  000966  6E33               	movwf	___wmul@multiplicand,c
  3863  000968  EC5F  F00E         	call	___wmul	;wreg free
  3864  00096C  C031  F0B6         	movff	?___wmul,printf@width
  3865  000970  C032  F0B7         	movff	?___wmul+1,printf@width+1
  3866                           
  3867                           ;doprnt.c: 601: width += *f++ - '0';
  3868  000974  0ED0               	movlw	208
  3869  000976  0100               	movlb	0	; () banked
  3870  000978  6FAB               	movwf	??_printf& (0+255),b
  3871  00097A  0EFF               	movlw	255
  3872  00097C  0100               	movlb	0	; () banked
  3873  00097E  6FAC               	movwf	(??_printf+1)& (0+255),b
  3874  000980  C03D  FFF6         	movff	printf@f,tblptrl
  3875  000984  C03E  FFF7         	movff	printf@f+1,tblptrh
  3876  000988                     	if	0	;tblptru may be non-zero
  3877  000988                     	endif
  3878  000988                     	if	0	;tblptru may be non-zero
  3879  000988                     	endif
  3880  000988  0008               	tblrd		*
  3881  00098A  50F5               	movf	tablat,w,c
  3882  00098C  0100               	movlb	0	; () banked
  3883  00098E  6FAD               	movwf	(??_printf+2)& (0+255),b
  3884  000990  6BAE               	clrf	(??_printf+3)& (0+255),b
  3885  000992  0100               	movlb	0	; () banked
  3886  000994  51AB               	movf	??_printf& (0+255),w,b
  3887  000996  0100               	movlb	0	; () banked
  3888  000998  27AD               	addwf	(??_printf+2)& (0+255),f,b
  3889  00099A  0100               	movlb	0	; () banked
  3890  00099C  51AC               	movf	(??_printf+1)& (0+255),w,b
  3891  00099E  0100               	movlb	0	; () banked
  3892  0009A0  23AE               	addwfc	(??_printf+3)& (0+255),f,b
  3893  0009A2  0100               	movlb	0	; () banked
  3894  0009A4  51AD               	movf	(??_printf+2)& (0+255),w,b
  3895  0009A6  0100               	movlb	0	; () banked
  3896  0009A8  27B6               	addwf	printf@width& (0+255),f,b
  3897  0009AA  0100               	movlb	0	; () banked
  3898  0009AC  51AE               	movf	(??_printf+3)& (0+255),w,b
  3899  0009AE  0100               	movlb	0	; () banked
  3900  0009B0  23B7               	addwfc	(printf@width+1)& (0+255),f,b
  3901                           
  3902                           ; BSR set to: 0
  3903  0009B2  4A3D               	infsnz	printf@f,f,c
  3904  0009B4  2A3E               	incf	printf@f+1,f,c
  3905                           
  3906                           ; BSR set to: 0
  3907                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  3908  0009B6  C03D  FFF6         	movff	printf@f,tblptrl
  3909  0009BA  C03E  FFF7         	movff	printf@f+1,tblptrh
  3910  0009BE                     	if	0	;tblptru may be non-zero
  3911  0009BE                     	endif
  3912  0009BE                     	if	0	;tblptru may be non-zero
  3913  0009BE                     	endif
  3914  0009BE  0008               	tblrd		*
  3915  0009C0  50F5               	movf	tablat,w,c
  3916  0009C2  ECAB  F00E         	call	_isdigit
  3917  0009C6  A0D8               	btfss	status,0,c
  3918  0009C8  D004               	goto	l4336
  3919  0009CA  D7C6               	goto	l4324
  3920  0009CC                     l4332:
  3921                           
  3922                           ;doprnt.c: 721: flag |= 0x80;
  3923  0009CC  0100               	movlb	0	; () banked
  3924  0009CE  8FB5               	bsf	printf@flag& (0+255),7,b
  3925                           
  3926                           ;doprnt.c: 723: break;
  3927  0009D0  D018               	goto	l466
  3928  0009D2                     l4336:
  3929  0009D2  C03D  FFF6         	movff	printf@f,tblptrl
  3930  0009D6  C03E  FFF7         	movff	printf@f+1,tblptrh
  3931  0009DA  4A3D               	infsnz	printf@f,f,c
  3932  0009DC  2A3E               	incf	printf@f+1,f,c
  3933  0009DE                     	if	0	;tblptru may be non-zero
  3934  0009DE                     	endif
  3935  0009DE                     	if	0	;tblptru may be non-zero
  3936  0009DE                     	endif
  3937  0009DE  0008               	tblrd		*
  3938  0009E0  CFF5 F0B8          	movff	tablat,printf@c
  3939  0009E4  0100               	movlb	0	; () banked
  3940  0009E6  51B8               	movf	printf@c& (0+255),w,b
  3941                           
  3942                           ; Switch size 1, requested type "space"
  3943                           ; Number of cases is 4, Range of values is 0 to 120
  3944                           ; switch strategies available:
  3945                           ; Name         Instructions Cycles
  3946                           ; simple_byte           13     7 (average)
  3947                           ;	Chosen strategy is simple_byte
  3948  0009E8  0A00               	xorlw	0	; case 0
  3949  0009EA  B4D8               	btfsc	status,2,c
  3950  0009EC  0012               	return	
  3951  0009EE  0A64               	xorlw	100	; case 100
  3952  0009F0  B4D8               	btfsc	status,2,c
  3953  0009F2  D007               	goto	l466
  3954  0009F4  0A0D               	xorlw	13	; case 105
  3955  0009F6  B4D8               	btfsc	status,2,c
  3956  0009F8  D004               	goto	l466
  3957  0009FA  0A11               	xorlw	17	; case 120
  3958  0009FC  B4D8               	btfsc	status,2,c
  3959  0009FE  D7E6               	goto	l4332
  3960  000A00  D139               	goto	l4434
  3961  000A02                     l466:
  3962                           
  3963                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  3964  000A02  0100               	movlb	0	; () banked
  3965  000A04  BFB5               	btfsc	printf@flag& (0+255),7,b
  3966  000A06  D019               	goto	l4348
  3967                           
  3968                           ; BSR set to: 0
  3969                           ;doprnt.c: 1253: {
  3970                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3971  000A08  C0B0  FFD9         	movff	printf@ap,fsr2l
  3972  000A0C  C0B1  FFDA         	movff	printf@ap+1,fsr2h
  3973  000A10  CFDE F0B3          	movff	postinc2,printf@val
  3974  000A14  CFDD F0B4          	movff	postdec2,printf@val+1
  3975                           
  3976                           ; BSR set to: 0
  3977  000A18  0E02               	movlw	2
  3978  000A1A  0100               	movlb	0	; () banked
  3979  000A1C  27B0               	addwf	printf@ap& (0+255),f,b
  3980  000A1E  0E00               	movlw	0
  3981  000A20  23B1               	addwfc	(printf@ap+1)& (0+255),f,b
  3982                           
  3983                           ; BSR set to: 0
  3984                           ;doprnt.c: 1261: if((int)val < 0) {
  3985  000A22  0100               	movlb	0	; () banked
  3986  000A24  AFB4               	btfss	(printf@val+1)& (0+255),7,b
  3987  000A26  D053               	goto	l4382
  3988                           
  3989                           ; BSR set to: 0
  3990                           ;doprnt.c: 1262: flag |= 0x03;
  3991  000A28  0E03               	movlw	3
  3992  000A2A  0100               	movlb	0	; () banked
  3993  000A2C  13B5               	iorwf	printf@flag& (0+255),f,b
  3994                           
  3995                           ; BSR set to: 0
  3996                           ;doprnt.c: 1263: val = -val;
  3997  000A2E  0100               	movlb	0	; () banked
  3998  000A30  6DB3               	negf	printf@val& (0+255),b
  3999  000A32  1FB4               	comf	(printf@val+1)& (0+255),f,b
  4000  000A34  B0D8               	btfsc	status,0,c
  4001  000A36  2BB4               	incf	(printf@val+1)& (0+255),f,b
  4002                           
  4003                           ; BSR set to: 0
  4004                           ;doprnt.c: 1264: }
  4005                           ;doprnt.c: 1266: }
  4006  000A38  D04A               	goto	l4382
  4007  000A3A                     l4348:
  4008                           
  4009                           ; BSR set to: 0
  4010                           ;doprnt.c: 1268: else
  4011                           ;doprnt.c: 1273: {
  4012                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4013  000A3A  C0B0  FFD9         	movff	printf@ap,fsr2l
  4014  000A3E  C0B1  FFDA         	movff	printf@ap+1,fsr2h
  4015  000A42  CFDE F0B3          	movff	postinc2,printf@val
  4016  000A46  CFDD F0B4          	movff	postdec2,printf@val+1
  4017                           
  4018                           ; BSR set to: 0
  4019  000A4A  0E02               	movlw	2
  4020  000A4C  0100               	movlb	0	; () banked
  4021  000A4E  27B0               	addwf	printf@ap& (0+255),f,b
  4022  000A50  0E00               	movlw	0
  4023  000A52  23B1               	addwfc	(printf@ap+1)& (0+255),f,b
  4024                           
  4025                           ; BSR set to: 0
  4026                           ;doprnt.c: 1287: }
  4027                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  4028  000A54  D03C               	goto	l4382
  4029  000A56                     l4352:
  4030                           
  4031                           ; BSR set to: 0
  4032                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4033  000A56  0E01               	movlw	1
  4034  000A58  0100               	movlb	0	; () banked
  4035  000A5A  6FB8               	movwf	printf@c& (0+255),b
  4036  000A5C                     l4354:
  4037                           
  4038                           ; BSR set to: 0
  4039  000A5C  0E05               	movlw	5
  4040  000A5E  0100               	movlb	0	; () banked
  4041  000A60  19B8               	xorwf	printf@c& (0+255),w,b
  4042  000A62  B4D8               	btfsc	status,2,c
  4043  000A64  D03D               	goto	l4384
  4044                           
  4045                           ; BSR set to: 0
  4046                           ;doprnt.c: 1306: if(val < dpowers[c])
  4047                           
  4048                           ; BSR set to: 0
  4049                           
  4050                           ; BSR set to: 0
  4051  000A66  0100               	movlb	0	; () banked
  4052  000A68  51B8               	movf	printf@c& (0+255),w,b
  4053  000A6A  0D02               	mullw	2
  4054  000A6C  0E30               	movlw	low _dpowers
  4055  000A6E  24F3               	addwf	prodl,w,c
  4056  000A70  6EF6               	movwf	tblptrl,c
  4057  000A72  0EFE               	movlw	high _dpowers
  4058  000A74  20F4               	addwfc	prodh,w,c
  4059  000A76  6EF7               	movwf	tblptrh,c
  4060  000A78                     	if	0	;There are less than 3 active tblptr bytes
  4061  000A78                     	endif
  4062  000A78  0009               	tblrd		*+
  4063  000A7A  50F5               	movf	tablat,w,c
  4064  000A7C  0100               	movlb	0	; () banked
  4065  000A7E  5DB3               	subwf	printf@val& (0+255),w,b
  4066  000A80  0009               	tblrd		*+
  4067  000A82  50F5               	movf	tablat,w,c
  4068  000A84  0100               	movlb	0	; () banked
  4069  000A86  59B4               	subwfb	(printf@val+1)& (0+255),w,b
  4070  000A88  A0D8               	btfss	status,0,c
  4071  000A8A  D02A               	goto	l4384
  4072                           
  4073                           ; BSR set to: 0
  4074                           
  4075                           ; BSR set to: 0
  4076                           
  4077                           ; BSR set to: 0
  4078                           ;doprnt.c: 1307: break;
  4079  000A8C  0100               	movlb	0	; () banked
  4080  000A8E  2BB8               	incf	printf@c& (0+255),f,b
  4081  000A90  D7E5               	goto	l4354
  4082  000A92                     l4366:
  4083                           
  4084                           ; BSR set to: 0
  4085                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  4086  000A92  0E01               	movlw	1
  4087  000A94  0100               	movlb	0	; () banked
  4088  000A96  6FB8               	movwf	printf@c& (0+255),b
  4089  000A98                     l4368:
  4090                           
  4091                           ; BSR set to: 0
  4092  000A98  0E04               	movlw	4
  4093  000A9A  0100               	movlb	0	; () banked
  4094  000A9C  19B8               	xorwf	printf@c& (0+255),w,b
  4095  000A9E  B4D8               	btfsc	status,2,c
  4096  000AA0  D01F               	goto	l4384
  4097                           
  4098                           ; BSR set to: 0
  4099                           ;doprnt.c: 1317: if(val < hexpowers[c])
  4100                           
  4101                           ; BSR set to: 0
  4102                           
  4103                           ; BSR set to: 0
  4104  000AA2  0100               	movlb	0	; () banked
  4105  000AA4  51B8               	movf	printf@c& (0+255),w,b
  4106  000AA6  0D02               	mullw	2
  4107  000AA8  0E3A               	movlw	low _hexpowers
  4108  000AAA  24F3               	addwf	prodl,w,c
  4109  000AAC  6EF6               	movwf	tblptrl,c
  4110  000AAE  0EFE               	movlw	high _hexpowers
  4111  000AB0  20F4               	addwfc	prodh,w,c
  4112  000AB2  6EF7               	movwf	tblptrh,c
  4113  000AB4                     	if	0	;There are less than 3 active tblptr bytes
  4114  000AB4                     	endif
  4115  000AB4  0009               	tblrd		*+
  4116  000AB6  50F5               	movf	tablat,w,c
  4117  000AB8  0100               	movlb	0	; () banked
  4118  000ABA  5DB3               	subwf	printf@val& (0+255),w,b
  4119  000ABC  0009               	tblrd		*+
  4120  000ABE  50F5               	movf	tablat,w,c
  4121  000AC0  0100               	movlb	0	; () banked
  4122  000AC2  59B4               	subwfb	(printf@val+1)& (0+255),w,b
  4123  000AC4  A0D8               	btfss	status,0,c
  4124  000AC6  D00C               	goto	l4384
  4125                           
  4126                           ; BSR set to: 0
  4127                           
  4128                           ; BSR set to: 0
  4129                           
  4130                           ; BSR set to: 0
  4131                           ;doprnt.c: 1318: break;
  4132  000AC8  0100               	movlb	0	; () banked
  4133  000ACA  2BB8               	incf	printf@c& (0+255),f,b
  4134  000ACC  D7E5               	goto	l4368
  4135  000ACE                     l4382:
  4136                           
  4137                           ; BSR set to: 0
  4138  000ACE  0100               	movlb	0	; () banked
  4139  000AD0  51B5               	movf	printf@flag& (0+255),w,b
  4140  000AD2  0B80               	andlw	128
  4141                           
  4142                           ; Switch size 1, requested type "space"
  4143                           ; Number of cases is 2, Range of values is 0 to 128
  4144                           ; switch strategies available:
  4145                           ; Name         Instructions Cycles
  4146                           ; simple_byte            7     4 (average)
  4147                           ;	Chosen strategy is simple_byte
  4148  000AD4  0A00               	xorlw	0	; case 0
  4149  000AD6  B4D8               	btfsc	status,2,c
  4150  000AD8  D7BE               	goto	l4352
  4151  000ADA  0A80               	xorlw	128	; case 128
  4152  000ADC  B4D8               	btfsc	status,2,c
  4153  000ADE  D7D9               	goto	l4366
  4154  000AE0                     l4384:
  4155                           
  4156                           ; BSR set to: 0
  4157                           ;doprnt.c: 1345: if(width && flag & 0x03)
  4158  000AE0  0100               	movlb	0	; () banked
  4159  000AE2  51B6               	movf	printf@width& (0+255),w,b
  4160  000AE4  0100               	movlb	0	; () banked
  4161  000AE6  11B7               	iorwf	(printf@width+1)& (0+255),w,b
  4162  000AE8  B4D8               	btfsc	status,2,c
  4163  000AEA  D00B               	goto	l4390
  4164                           
  4165                           ; BSR set to: 0
  4166  000AEC  C0B5  F0AB         	movff	printf@flag,??_printf
  4167  000AF0  0E03               	movlw	3
  4168  000AF2  0100               	movlb	0	; () banked
  4169  000AF4  17AB               	andwf	??_printf& (0+255),f,b
  4170  000AF6  B4D8               	btfsc	status,2,c
  4171  000AF8  D004               	goto	l4390
  4172                           
  4173                           ; BSR set to: 0
  4174                           ;doprnt.c: 1346: width--;
  4175  000AFA  0100               	movlb	0	; () banked
  4176  000AFC  07B6               	decf	printf@width& (0+255),f,b
  4177  000AFE  A0D8               	btfss	status,0,c
  4178  000B00  07B7               	decf	(printf@width+1)& (0+255),f,b
  4179  000B02                     l4390:
  4180                           
  4181                           ; BSR set to: 0
  4182                           ;doprnt.c: 1381: if(width > c)
  4183  000B02  0E80               	movlw	128
  4184  000B04  0100               	movlb	0	; () banked
  4185  000B06  BFB8               	btfsc	printf@c& (0+255),7,b
  4186  000B08  0E7F               	movlw	127
  4187  000B0A  0100               	movlb	0	; () banked
  4188  000B0C  6FAB               	movwf	??_printf& (0+255),b
  4189  000B0E  0100               	movlb	0	; () banked
  4190  000B10  51B6               	movf	printf@width& (0+255),w,b
  4191  000B12  0100               	movlb	0	; () banked
  4192  000B14  5DB8               	subwf	printf@c& (0+255),w,b
  4193  000B16  0100               	movlb	0	; () banked
  4194  000B18  51B7               	movf	(printf@width+1)& (0+255),w,b
  4195  000B1A  0A80               	xorlw	128
  4196  000B1C  0100               	movlb	0	; () banked
  4197  000B1E  59AB               	subwfb	??_printf& (0+255),w,b
  4198  000B20  B0D8               	btfsc	status,0,c
  4199  000B22  D00B               	goto	l4394
  4200                           
  4201                           ; BSR set to: 0
  4202                           ;doprnt.c: 1382: width -= c;
  4203  000B24  0100               	movlb	0	; () banked
  4204  000B26  51B8               	movf	printf@c& (0+255),w,b
  4205  000B28  0100               	movlb	0	; () banked
  4206  000B2A  5FB6               	subwf	printf@width& (0+255),f,b
  4207  000B2C  0E00               	movlw	0
  4208  000B2E  0100               	movlb	0	; () banked
  4209  000B30  BFB8               	btfsc	printf@c& (0+255),7,b
  4210  000B32  0EFF               	movlw	255
  4211  000B34  0100               	movlb	0	; () banked
  4212  000B36  5BB7               	subwfb	(printf@width+1)& (0+255),f,b
  4213  000B38  D005               	goto	l4396
  4214  000B3A                     l4394:
  4215                           
  4216                           ; BSR set to: 0
  4217                           ;doprnt.c: 1383: else
  4218                           ;doprnt.c: 1384: width = 0;
  4219  000B3A  0E00               	movlw	0
  4220  000B3C  0100               	movlb	0	; () banked
  4221  000B3E  6FB7               	movwf	(printf@width+1)& (0+255),b
  4222  000B40  0E00               	movlw	0
  4223  000B42  6FB6               	movwf	printf@width& (0+255),b
  4224  000B44                     l4396:
  4225                           
  4226                           ; BSR set to: 0
  4227                           ;doprnt.c: 1387: if(flag & 0x04) {
  4228  000B44  0100               	movlb	0	; () banked
  4229  000B46  A5B5               	btfss	printf@flag& (0+255),2,b
  4230  000B48  D018               	goto	l4408
  4231                           
  4232                           ; BSR set to: 0
  4233                           ;doprnt.c: 1392: if(flag & 0x03)
  4234  000B4A  C0B5  F0AB         	movff	printf@flag,??_printf
  4235  000B4E  0E03               	movlw	3
  4236  000B50  0100               	movlb	0	; () banked
  4237  000B52  17AB               	andwf	??_printf& (0+255),f,b
  4238  000B54  B4D8               	btfsc	status,2,c
  4239  000B56  D003               	goto	l4402
  4240                           
  4241                           ; BSR set to: 0
  4242                           ;doprnt.c: 1393: (putch('-') );
  4243  000B58  0E2D               	movlw	45
  4244  000B5A  ECF2  F00E         	call	_putch
  4245  000B5E                     l4402:
  4246                           
  4247                           ;doprnt.c: 1415: if(width)
  4248  000B5E  0100               	movlb	0	; () banked
  4249  000B60  51B6               	movf	printf@width& (0+255),w,b
  4250  000B62  0100               	movlb	0	; () banked
  4251  000B64  11B7               	iorwf	(printf@width+1)& (0+255),w,b
  4252  000B66  B4D8               	btfsc	status,2,c
  4253  000B68  D025               	goto	l4418
  4254                           
  4255                           ; BSR set to: 0
  4256                           ;doprnt.c: 1417: (putch('0') );
  4257                           
  4258                           ; BSR set to: 0
  4259                           
  4260                           ;doprnt.c: 1416: do
  4261  000B6A  0E30               	movlw	48
  4262  000B6C  ECF2  F00E         	call	_putch
  4263                           
  4264                           ;doprnt.c: 1418: while(--width);
  4265  000B70  0100               	movlb	0	; () banked
  4266  000B72  07B6               	decf	printf@width& (0+255),f,b
  4267  000B74  A0D8               	btfss	status,0,c
  4268  000B76  07B7               	decf	(printf@width+1)& (0+255),f,b
  4269  000B78  D7F2               	goto	l4402
  4270  000B7A                     l4408:
  4271                           
  4272                           ; BSR set to: 0
  4273                           ;doprnt.c: 1422: {
  4274                           ;doprnt.c: 1424: if(width
  4275                           ;doprnt.c: 1428: )
  4276  000B7A  0100               	movlb	0	; () banked
  4277  000B7C  51B6               	movf	printf@width& (0+255),w,b
  4278  000B7E  0100               	movlb	0	; () banked
  4279  000B80  11B7               	iorwf	(printf@width+1)& (0+255),w,b
  4280  000B82  B4D8               	btfsc	status,2,c
  4281  000B84  D00D               	goto	l4414
  4282  000B86                     l4410:
  4283                           
  4284                           ; BSR set to: 0
  4285                           ;doprnt.c: 1430: (putch(' ') );
  4286  000B86  0E20               	movlw	32
  4287  000B88  ECF2  F00E         	call	_putch
  4288                           
  4289                           ;doprnt.c: 1431: while(--width);
  4290  000B8C  0100               	movlb	0	; () banked
  4291  000B8E  07B6               	decf	printf@width& (0+255),f,b
  4292  000B90  A0D8               	btfss	status,0,c
  4293  000B92  07B7               	decf	(printf@width+1)& (0+255),f,b
  4294  000B94  0100               	movlb	0	; () banked
  4295  000B96  51B6               	movf	printf@width& (0+255),w,b
  4296  000B98  0100               	movlb	0	; () banked
  4297  000B9A  11B7               	iorwf	(printf@width+1)& (0+255),w,b
  4298  000B9C  A4D8               	btfss	status,2,c
  4299  000B9E  D7F3               	goto	l4410
  4300  000BA0                     l4414:
  4301                           
  4302                           ; BSR set to: 0
  4303                           ;doprnt.c: 1438: if(flag & 0x03)
  4304  000BA0  C0B5  F0AB         	movff	printf@flag,??_printf
  4305  000BA4  0E03               	movlw	3
  4306  000BA6  0100               	movlb	0	; () banked
  4307  000BA8  17AB               	andwf	??_printf& (0+255),f,b
  4308  000BAA  B4D8               	btfsc	status,2,c
  4309  000BAC  D003               	goto	l4418
  4310                           
  4311                           ; BSR set to: 0
  4312                           ;doprnt.c: 1439: (putch('-') );
  4313  000BAE  0E2D               	movlw	45
  4314  000BB0  ECF2  F00E         	call	_putch
  4315  000BB4                     l4418:
  4316                           
  4317                           ;doprnt.c: 1469: }
  4318                           ;doprnt.c: 1472: prec = c;
  4319  000BB4  C0B8  F0B2         	movff	printf@c,printf@prec
  4320                           
  4321                           ;doprnt.c: 1474: while(prec--) {
  4322  000BB8  D057               	goto	l4432
  4323  000BBA                     l4420:
  4324                           
  4325                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4326  000BBA  0100               	movlb	0	; () banked
  4327  000BBC  51B2               	movf	printf@prec& (0+255),w,b
  4328  000BBE  0D02               	mullw	2
  4329  000BC0  0E30               	movlw	low _dpowers
  4330  000BC2  24F3               	addwf	prodl,w,c
  4331  000BC4  6EF6               	movwf	tblptrl,c
  4332  000BC6  0EFE               	movlw	high _dpowers
  4333  000BC8  20F4               	addwfc	prodh,w,c
  4334  000BCA  6EF7               	movwf	tblptrh,c
  4335  000BCC                     	if	0	;There are less than 3 active tblptr bytes
  4336  000BCC                     	endif
  4337  000BCC  0009               	tblrd		*+
  4338  000BCE  CFF5 F033          	movff	tablat,___lwdiv@divisor
  4339  000BD2  000A               	tblrd		*-
  4340  000BD4  CFF5 F034          	movff	tablat,___lwdiv@divisor+1
  4341  000BD8  C0B3  F031         	movff	printf@val,___lwdiv@dividend
  4342  000BDC  C0B4  F032         	movff	printf@val+1,___lwdiv@dividend+1
  4343  000BE0  EC3E  F00D         	call	___lwdiv	;wreg free
  4344  000BE4  C031  F038         	movff	?___lwdiv,___lwmod@dividend
  4345  000BE8  C032  F039         	movff	?___lwdiv+1,___lwmod@dividend+1
  4346  000BEC  0E00               	movlw	0
  4347  000BEE  6E3B               	movwf	___lwmod@divisor+1,c
  4348  000BF0  0E0A               	movlw	10
  4349  000BF2  6E3A               	movwf	___lwmod@divisor,c
  4350  000BF4  EC01  F00E         	call	___lwmod	;wreg free
  4351  000BF8  5038               	movf	?___lwmod,w,c
  4352  000BFA  0F30               	addlw	48
  4353  000BFC  0100               	movlb	0	; () banked
  4354  000BFE  6FB8               	movwf	printf@c& (0+255),b
  4355                           
  4356                           ;doprnt.c: 1491: break;
  4357  000C00  D02F               	goto	l4430
  4358  000C02                     l4422:
  4359                           
  4360                           ; BSR set to: 0
  4361                           ;doprnt.c: 1499: {
  4362                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  4363  000C02  C0B3  F031         	movff	printf@val,___lwdiv@dividend
  4364  000C06  C0B4  F032         	movff	printf@val+1,___lwdiv@dividend+1
  4365  000C0A  0100               	movlb	0	; () banked
  4366  000C0C  51B2               	movf	printf@prec& (0+255),w,b
  4367  000C0E  0D02               	mullw	2
  4368  000C10  0E3A               	movlw	low _hexpowers
  4369  000C12  24F3               	addwf	prodl,w,c
  4370  000C14  6EF6               	movwf	tblptrl,c
  4371  000C16  0EFE               	movlw	high _hexpowers
  4372  000C18  20F4               	addwfc	prodh,w,c
  4373  000C1A  6EF7               	movwf	tblptrh,c
  4374  000C1C                     	if	0	;There are less than 3 active tblptr bytes
  4375  000C1C                     	endif
  4376  000C1C  0009               	tblrd		*+
  4377  000C1E  CFF5 F033          	movff	tablat,___lwdiv@divisor
  4378  000C22  000A               	tblrd		*-
  4379  000C24  CFF5 F034          	movff	tablat,___lwdiv@divisor+1
  4380  000C28  EC3E  F00D         	call	___lwdiv	;wreg free
  4381  000C2C  5031               	movf	?___lwdiv,w,c
  4382  000C2E  0B0F               	andlw	15
  4383  000C30  0100               	movlb	0	; () banked
  4384  000C32  6FAF               	movwf	printf@idx& (0+255),b
  4385                           
  4386                           ; BSR set to: 0
  4387                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  4388  000C34  0100               	movlb	0	; () banked
  4389  000C36  51AF               	movf	printf@idx& (0+255),w,b
  4390  000C38  0D01               	mullw	1
  4391  000C3A  0EDF               	movlw	low STR_27
  4392  000C3C  24F3               	addwf	prodl,w,c
  4393  000C3E  6EF6               	movwf	tblptrl,c
  4394  000C40  0EFE               	movlw	high STR_27
  4395  000C42  20F4               	addwfc	prodh,w,c
  4396  000C44  6EF7               	movwf	tblptrh,c
  4397  000C46                     	if	0	;There are less than 3 active tblptr bytes
  4398  000C46                     	endif
  4399  000C46  0008               	tblrd		*
  4400  000C48  CFF5 F0B8          	movff	tablat,printf@c
  4401                           
  4402                           ; BSR set to: 0
  4403                           ;doprnt.c: 1523: }
  4404                           
  4405                           ;doprnt.c: 1508: }
  4406                           ;doprnt.c: 1510: break;
  4407  000C4C  D009               	goto	l4430
  4408  000C4E                     l4428:
  4409  000C4E  0100               	movlb	0	; () banked
  4410  000C50  51B5               	movf	printf@flag& (0+255),w,b
  4411  000C52  0B80               	andlw	128
  4412                           
  4413                           ; Switch size 1, requested type "space"
  4414                           ; Number of cases is 2, Range of values is 0 to 128
  4415                           ; switch strategies available:
  4416                           ; Name         Instructions Cycles
  4417                           ; simple_byte            7     4 (average)
  4418                           ;	Chosen strategy is simple_byte
  4419  000C54  0A00               	xorlw	0	; case 0
  4420  000C56  B4D8               	btfsc	status,2,c
  4421  000C58  D7B0               	goto	l4420
  4422  000C5A  0A80               	xorlw	128	; case 128
  4423  000C5C  B4D8               	btfsc	status,2,c
  4424  000C5E  D7D1               	goto	l4422
  4425  000C60                     l4430:
  4426                           
  4427                           ; BSR set to: 0
  4428                           ;doprnt.c: 1524: (putch(c) );
  4429  000C60  0100               	movlb	0	; () banked
  4430  000C62  51B8               	movf	printf@c& (0+255),w,b
  4431  000C64  ECF2  F00E         	call	_putch
  4432  000C68                     l4432:
  4433  000C68  0100               	movlb	0	; () banked
  4434  000C6A  07B2               	decf	printf@prec& (0+255),f,b
  4435  000C6C  0100               	movlb	0	; () banked
  4436  000C6E  29B2               	incf	printf@prec& (0+255),w,b
  4437  000C70  A4D8               	btfss	status,2,c
  4438  000C72  D7ED               	goto	l4428
  4439  000C74                     l4434:
  4440  000C74  C03D  FFF6         	movff	printf@f,tblptrl
  4441  000C78  C03E  FFF7         	movff	printf@f+1,tblptrh
  4442  000C7C  4A3D               	infsnz	printf@f,f,c
  4443  000C7E  2A3E               	incf	printf@f+1,f,c
  4444  000C80                     	if	0	;tblptru may be non-zero
  4445  000C80                     	endif
  4446  000C80                     	if	0	;tblptru may be non-zero
  4447  000C80                     	endif
  4448  000C80  0008               	tblrd		*
  4449  000C82  CFF5 F0B8          	movff	tablat,printf@c
  4450  000C86  0100               	movlb	0	; () banked
  4451  000C88  51B8               	movf	printf@c& (0+255),w,b
  4452  000C8A  B4D8               	btfsc	status,2,c
  4453  000C8C  0012               	return	
  4454  000C8E  D635               	goto	l4308
  4455  000C90                     __end_of_printf:
  4456                           	opt stack 0
  4457                           tblptru	equ	0xFF8
  4458                           tblptrh	equ	0xFF7
  4459                           tblptrl	equ	0xFF6
  4460                           tablat	equ	0xFF5
  4461                           prodh	equ	0xFF4
  4462                           prodl	equ	0xFF3
  4463                           intcon	equ	0xFF2
  4464                           intcon2	equ	0xFF1
  4465                           intcon3	equ	0xFF0
  4466                           postinc0	equ	0xFEE
  4467                           wreg	equ	0xFE8
  4468                           indf2	equ	0xFDF
  4469                           postinc2	equ	0xFDE
  4470                           postdec2	equ	0xFDD
  4471                           fsr2h	equ	0xFDA
  4472                           fsr2l	equ	0xFD9
  4473                           status	equ	0xFD8
  4474                           
  4475 ;; *************** function _putch *****************
  4476 ;; Defined at:
  4477 ;;		line 23 in file "../lcd.c"
  4478 ;; Parameters:    Size  Location     Type
  4479 ;;  data            1    wreg     unsigned char 
  4480 ;; Auto vars:     Size  Location     Type
  4481 ;;  data            1   50[COMRAM] unsigned char 
  4482 ;; Return value:  Size  Location     Type
  4483 ;;                  1    wreg      void 
  4484 ;; Registers used:
  4485 ;;		wreg, status,2, status,0, cstack
  4486 ;; Tracked objects:
  4487 ;;		On entry : 0/0
  4488 ;;		On exit  : 0/0
  4489 ;;		Unchanged: 0/0
  4490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4491 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4492 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4493 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4494 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4495 ;;Total ram usage:        1 bytes
  4496 ;; Hardware stack levels used:    1
  4497 ;; Hardware stack levels required when called:    6
  4498 ;; This function calls:
  4499 ;;		_lcdNibble
  4500 ;; This function is called by:
  4501 ;;		_printf
  4502 ;; This function uses a non-reentrant model
  4503 ;;
  4504                           
  4505                           	psect	text5
  4506  001DE4                     __ptext5:
  4507                           	opt stack 0
  4508  001DE4                     _putch:
  4509                           	opt stack 22
  4510                           
  4511                           ;incstack = 0
  4512                           ;putch@data stored from wreg
  4513  001DE4  6E33               	movwf	putch@data,c
  4514                           
  4515                           ;lcd.c: 24: LATDbits.LATD2 = 1;
  4516  001DE6  848C               	bsf	3980,2,c	;volatile
  4517                           
  4518                           ;lcd.c: 25: lcdNibble(data);
  4519  001DE8  5033               	movf	putch@data,w,c
  4520  001DEA  EC90  F00D         	call	_lcdNibble
  4521  001DEE  0012               	return		;funcret
  4522  001DF0                     __end_of_putch:
  4523                           	opt stack 0
  4524                           tblptru	equ	0xFF8
  4525                           tblptrh	equ	0xFF7
  4526                           tblptrl	equ	0xFF6
  4527                           tablat	equ	0xFF5
  4528                           prodh	equ	0xFF4
  4529                           prodl	equ	0xFF3
  4530                           intcon	equ	0xFF2
  4531                           intcon2	equ	0xFF1
  4532                           intcon3	equ	0xFF0
  4533                           postinc0	equ	0xFEE
  4534                           wreg	equ	0xFE8
  4535                           indf2	equ	0xFDF
  4536                           postinc2	equ	0xFDE
  4537                           postdec2	equ	0xFDD
  4538                           fsr2h	equ	0xFDA
  4539                           fsr2l	equ	0xFD9
  4540                           status	equ	0xFD8
  4541                           
  4542 ;; *************** function _isdigit *****************
  4543 ;; Defined at:
  4544 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  4545 ;; Parameters:    Size  Location     Type
  4546 ;;  c               1    wreg     unsigned char 
  4547 ;; Auto vars:     Size  Location     Type
  4548 ;;  c               1   50[COMRAM] unsigned char 
  4549 ;; Return value:  Size  Location     Type
  4550 ;;		None               void
  4551 ;; Registers used:
  4552 ;;		wreg, status,2, status,0
  4553 ;; Tracked objects:
  4554 ;;		On entry : 0/0
  4555 ;;		On exit  : 0/0
  4556 ;;		Unchanged: 0/0
  4557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4558 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4559 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4560 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4561 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4562 ;;Total ram usage:        3 bytes
  4563 ;; Hardware stack levels used:    1
  4564 ;; Hardware stack levels required when called:    5
  4565 ;; This function calls:
  4566 ;;		Nothing
  4567 ;; This function is called by:
  4568 ;;		_printf
  4569 ;; This function uses a non-reentrant model
  4570 ;;
  4571                           
  4572                           	psect	text6
  4573  001D56                     __ptext6:
  4574                           	opt stack 0
  4575  001D56                     _isdigit:
  4576                           	opt stack 23
  4577                           
  4578                           ;incstack = 0
  4579                           ;isdigit@c stored from wreg
  4580  001D56  6E33               	movwf	isdigit@c,c
  4581  001D58  0E00               	movlw	0
  4582  001D5A  6E32               	movwf	_isdigit$944,c
  4583  001D5C  0E3A               	movlw	58
  4584  001D5E  6033               	cpfslt	isdigit@c,c
  4585  001D60  D005               	goto	l2762
  4586  001D62  0E2F               	movlw	47
  4587  001D64  6433               	cpfsgt	isdigit@c,c
  4588  001D66  D002               	goto	l2762
  4589  001D68  0E01               	movlw	1
  4590  001D6A  6E32               	movwf	_isdigit$944,c
  4591  001D6C                     l2762:
  4592  001D6C  C032  F031         	movff	_isdigit$944,??_isdigit
  4593  001D70  3031               	rrcf	??_isdigit,w,c
  4594  001D72  0012               	return	
  4595  001D74                     __end_of_isdigit:
  4596                           	opt stack 0
  4597                           tblptru	equ	0xFF8
  4598                           tblptrh	equ	0xFF7
  4599                           tblptrl	equ	0xFF6
  4600                           tablat	equ	0xFF5
  4601                           prodh	equ	0xFF4
  4602                           prodl	equ	0xFF3
  4603                           intcon	equ	0xFF2
  4604                           intcon2	equ	0xFF1
  4605                           intcon3	equ	0xFF0
  4606                           postinc0	equ	0xFEE
  4607                           wreg	equ	0xFE8
  4608                           indf2	equ	0xFDF
  4609                           postinc2	equ	0xFDE
  4610                           postdec2	equ	0xFDD
  4611                           fsr2h	equ	0xFDA
  4612                           fsr2l	equ	0xFD9
  4613                           status	equ	0xFD8
  4614                           
  4615 ;; *************** function ___wmul *****************
  4616 ;; Defined at:
  4617 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  4618 ;; Parameters:    Size  Location     Type
  4619 ;;  multiplier      2   48[COMRAM] unsigned int 
  4620 ;;  multiplicand    2   50[COMRAM] unsigned int 
  4621 ;; Auto vars:     Size  Location     Type
  4622 ;;  product         2   52[COMRAM] unsigned int 
  4623 ;; Return value:  Size  Location     Type
  4624 ;;                  2   48[COMRAM] unsigned int 
  4625 ;; Registers used:
  4626 ;;		wreg, status,2, status,0, prodl, prodh
  4627 ;; Tracked objects:
  4628 ;;		On entry : 0/0
  4629 ;;		On exit  : 0/0
  4630 ;;		Unchanged: 0/0
  4631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4632 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4633 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4634 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4635 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4636 ;;Total ram usage:        6 bytes
  4637 ;; Hardware stack levels used:    1
  4638 ;; Hardware stack levels required when called:    5
  4639 ;; This function calls:
  4640 ;;		Nothing
  4641 ;; This function is called by:
  4642 ;;		_printf
  4643 ;; This function uses a non-reentrant model
  4644 ;;
  4645                           
  4646                           	psect	text7
  4647  001CBE                     __ptext7:
  4648                           	opt stack 0
  4649  001CBE                     ___wmul:
  4650                           	opt stack 23
  4651                           
  4652                           ;incstack = 0
  4653  001CBE  5031               	movf	___wmul@multiplier,w,c
  4654  001CC0  0233               	mulwf	___wmul@multiplicand,c
  4655  001CC2  CFF3 F035          	movff	prodl,___wmul@product
  4656  001CC6  CFF4 F036          	movff	prodh,___wmul@product+1
  4657  001CCA  5031               	movf	___wmul@multiplier,w,c
  4658  001CCC  0234               	mulwf	___wmul@multiplicand+1,c
  4659  001CCE  50F3               	movf	prodl,w,c
  4660  001CD0  2636               	addwf	___wmul@product+1,f,c
  4661  001CD2  5032               	movf	___wmul@multiplier+1,w,c
  4662  001CD4  0233               	mulwf	___wmul@multiplicand,c
  4663  001CD6  50F3               	movf	prodl,w,c
  4664  001CD8  2636               	addwf	___wmul@product+1,f,c
  4665  001CDA  C035  F031         	movff	___wmul@product,?___wmul
  4666  001CDE  C036  F032         	movff	___wmul@product+1,?___wmul+1
  4667  001CE2  0012               	return	
  4668  001CE4                     __end_of___wmul:
  4669                           	opt stack 0
  4670                           tblptru	equ	0xFF8
  4671                           tblptrh	equ	0xFF7
  4672                           tblptrl	equ	0xFF6
  4673                           tablat	equ	0xFF5
  4674                           prodh	equ	0xFF4
  4675                           prodl	equ	0xFF3
  4676                           intcon	equ	0xFF2
  4677                           intcon2	equ	0xFF1
  4678                           intcon3	equ	0xFF0
  4679                           postinc0	equ	0xFEE
  4680                           wreg	equ	0xFE8
  4681                           indf2	equ	0xFDF
  4682                           postinc2	equ	0xFDE
  4683                           postdec2	equ	0xFDD
  4684                           fsr2h	equ	0xFDA
  4685                           fsr2l	equ	0xFD9
  4686                           status	equ	0xFD8
  4687                           
  4688 ;; *************** function ___lwmod *****************
  4689 ;; Defined at:
  4690 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  4691 ;; Parameters:    Size  Location     Type
  4692 ;;  dividend        2   55[COMRAM] unsigned int 
  4693 ;;  divisor         2   57[COMRAM] unsigned int 
  4694 ;; Auto vars:     Size  Location     Type
  4695 ;;  counter         1   59[COMRAM] unsigned char 
  4696 ;; Return value:  Size  Location     Type
  4697 ;;                  2   55[COMRAM] unsigned int 
  4698 ;; Registers used:
  4699 ;;		wreg, status,2, status,0
  4700 ;; Tracked objects:
  4701 ;;		On entry : 0/0
  4702 ;;		On exit  : 0/0
  4703 ;;		Unchanged: 0/0
  4704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4705 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4706 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4707 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4708 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4709 ;;Total ram usage:        5 bytes
  4710 ;; Hardware stack levels used:    1
  4711 ;; Hardware stack levels required when called:    5
  4712 ;; This function calls:
  4713 ;;		Nothing
  4714 ;; This function is called by:
  4715 ;;		_printf
  4716 ;; This function uses a non-reentrant model
  4717 ;;
  4718                           
  4719                           	psect	text8
  4720  001C02                     __ptext8:
  4721                           	opt stack 0
  4722  001C02                     ___lwmod:
  4723                           	opt stack 23
  4724                           
  4725                           ;incstack = 0
  4726  001C02  503A               	movf	___lwmod@divisor,w,c
  4727  001C04  103B               	iorwf	___lwmod@divisor+1,w,c
  4728  001C06  B4D8               	btfsc	status,2,c
  4729  001C08  D018               	goto	l921
  4730  001C0A  0E01               	movlw	1
  4731  001C0C  6E3C               	movwf	___lwmod@counter,c
  4732  001C0E  D004               	goto	l2800
  4733  001C10                     l2798:
  4734  001C10  90D8               	bcf	status,0,c
  4735  001C12  363A               	rlcf	___lwmod@divisor,f,c
  4736  001C14  363B               	rlcf	___lwmod@divisor+1,f,c
  4737  001C16  2A3C               	incf	___lwmod@counter,f,c
  4738  001C18                     l2800:
  4739  001C18  AE3B               	btfss	___lwmod@divisor+1,7,c
  4740  001C1A  D7FA               	goto	l2798
  4741  001C1C                     l2802:
  4742  001C1C  503A               	movf	___lwmod@divisor,w,c
  4743  001C1E  5C38               	subwf	___lwmod@dividend,w,c
  4744  001C20  503B               	movf	___lwmod@divisor+1,w,c
  4745  001C22  5839               	subwfb	___lwmod@dividend+1,w,c
  4746  001C24  A0D8               	btfss	status,0,c
  4747  001C26  D004               	goto	l2806
  4748  001C28  503A               	movf	___lwmod@divisor,w,c
  4749  001C2A  5E38               	subwf	___lwmod@dividend,f,c
  4750  001C2C  503B               	movf	___lwmod@divisor+1,w,c
  4751  001C2E  5A39               	subwfb	___lwmod@dividend+1,f,c
  4752  001C30                     l2806:
  4753  001C30  90D8               	bcf	status,0,c
  4754  001C32  323B               	rrcf	___lwmod@divisor+1,f,c
  4755  001C34  323A               	rrcf	___lwmod@divisor,f,c
  4756  001C36  2E3C               	decfsz	___lwmod@counter,f,c
  4757  001C38  D7F1               	goto	l2802
  4758  001C3A                     l921:
  4759  001C3A  C038  F038         	movff	___lwmod@dividend,?___lwmod
  4760  001C3E  C039  F039         	movff	___lwmod@dividend+1,?___lwmod+1
  4761  001C42  0012               	return		;funcret
  4762  001C44                     __end_of___lwmod:
  4763                           	opt stack 0
  4764                           tblptru	equ	0xFF8
  4765                           tblptrh	equ	0xFF7
  4766                           tblptrl	equ	0xFF6
  4767                           tablat	equ	0xFF5
  4768                           prodh	equ	0xFF4
  4769                           prodl	equ	0xFF3
  4770                           intcon	equ	0xFF2
  4771                           intcon2	equ	0xFF1
  4772                           intcon3	equ	0xFF0
  4773                           postinc0	equ	0xFEE
  4774                           wreg	equ	0xFE8
  4775                           indf2	equ	0xFDF
  4776                           postinc2	equ	0xFDE
  4777                           postdec2	equ	0xFDD
  4778                           fsr2h	equ	0xFDA
  4779                           fsr2l	equ	0xFD9
  4780                           status	equ	0xFD8
  4781                           
  4782 ;; *************** function ___lwdiv *****************
  4783 ;; Defined at:
  4784 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  4785 ;; Parameters:    Size  Location     Type
  4786 ;;  dividend        2   48[COMRAM] unsigned int 
  4787 ;;  divisor         2   50[COMRAM] unsigned int 
  4788 ;; Auto vars:     Size  Location     Type
  4789 ;;  quotient        2   52[COMRAM] unsigned int 
  4790 ;;  counter         1   54[COMRAM] unsigned char 
  4791 ;; Return value:  Size  Location     Type
  4792 ;;                  2   48[COMRAM] unsigned int 
  4793 ;; Registers used:
  4794 ;;		wreg, status,2, status,0
  4795 ;; Tracked objects:
  4796 ;;		On entry : 0/0
  4797 ;;		On exit  : 0/0
  4798 ;;		Unchanged: 0/0
  4799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4800 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4801 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4802 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4803 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4804 ;;Total ram usage:        7 bytes
  4805 ;; Hardware stack levels used:    1
  4806 ;; Hardware stack levels required when called:    5
  4807 ;; This function calls:
  4808 ;;		Nothing
  4809 ;; This function is called by:
  4810 ;;		_printf
  4811 ;; This function uses a non-reentrant model
  4812 ;;
  4813                           
  4814                           	psect	text9
  4815  001A7C                     __ptext9:
  4816                           	opt stack 0
  4817  001A7C                     ___lwdiv:
  4818                           	opt stack 23
  4819                           
  4820                           ;incstack = 0
  4821  001A7C  0E00               	movlw	0
  4822  001A7E  6E36               	movwf	___lwdiv@quotient+1,c
  4823  001A80  0E00               	movlw	0
  4824  001A82  6E35               	movwf	___lwdiv@quotient,c
  4825  001A84  5033               	movf	___lwdiv@divisor,w,c
  4826  001A86  1034               	iorwf	___lwdiv@divisor+1,w,c
  4827  001A88  B4D8               	btfsc	status,2,c
  4828  001A8A  D01C               	goto	l911
  4829  001A8C  0E01               	movlw	1
  4830  001A8E  6E37               	movwf	___lwdiv@counter,c
  4831  001A90  D004               	goto	l2780
  4832  001A92                     l2778:
  4833  001A92  90D8               	bcf	status,0,c
  4834  001A94  3633               	rlcf	___lwdiv@divisor,f,c
  4835  001A96  3634               	rlcf	___lwdiv@divisor+1,f,c
  4836  001A98  2A37               	incf	___lwdiv@counter,f,c
  4837  001A9A                     l2780:
  4838  001A9A  AE34               	btfss	___lwdiv@divisor+1,7,c
  4839  001A9C  D7FA               	goto	l2778
  4840  001A9E                     l2782:
  4841  001A9E  90D8               	bcf	status,0,c
  4842  001AA0  3635               	rlcf	___lwdiv@quotient,f,c
  4843  001AA2  3636               	rlcf	___lwdiv@quotient+1,f,c
  4844  001AA4  5033               	movf	___lwdiv@divisor,w,c
  4845  001AA6  5C31               	subwf	___lwdiv@dividend,w,c
  4846  001AA8  5034               	movf	___lwdiv@divisor+1,w,c
  4847  001AAA  5832               	subwfb	___lwdiv@dividend+1,w,c
  4848  001AAC  A0D8               	btfss	status,0,c
  4849  001AAE  D005               	goto	l2790
  4850  001AB0  5033               	movf	___lwdiv@divisor,w,c
  4851  001AB2  5E31               	subwf	___lwdiv@dividend,f,c
  4852  001AB4  5034               	movf	___lwdiv@divisor+1,w,c
  4853  001AB6  5A32               	subwfb	___lwdiv@dividend+1,f,c
  4854  001AB8  8035               	bsf	___lwdiv@quotient,0,c
  4855  001ABA                     l2790:
  4856  001ABA  90D8               	bcf	status,0,c
  4857  001ABC  3234               	rrcf	___lwdiv@divisor+1,f,c
  4858  001ABE  3233               	rrcf	___lwdiv@divisor,f,c
  4859  001AC0  2E37               	decfsz	___lwdiv@counter,f,c
  4860  001AC2  D7ED               	goto	l2782
  4861  001AC4                     l911:
  4862  001AC4  C035  F031         	movff	___lwdiv@quotient,?___lwdiv
  4863  001AC8  C036  F032         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4864  001ACC  0012               	return		;funcret
  4865  001ACE                     __end_of___lwdiv:
  4866                           	opt stack 0
  4867                           tblptru	equ	0xFF8
  4868                           tblptrh	equ	0xFF7
  4869                           tblptrl	equ	0xFF6
  4870                           tablat	equ	0xFF5
  4871                           prodh	equ	0xFF4
  4872                           prodl	equ	0xFF3
  4873                           intcon	equ	0xFF2
  4874                           intcon2	equ	0xFF1
  4875                           intcon3	equ	0xFF0
  4876                           postinc0	equ	0xFEE
  4877                           wreg	equ	0xFE8
  4878                           indf2	equ	0xFDF
  4879                           postinc2	equ	0xFDE
  4880                           postdec2	equ	0xFDD
  4881                           fsr2h	equ	0xFDA
  4882                           fsr2l	equ	0xFD9
  4883                           status	equ	0xFD8
  4884                           
  4885 ;; *************** function _stopOperation *****************
  4886 ;; Defined at:
  4887 ;;		line 429 in file "../main.c"
  4888 ;; Parameters:    Size  Location     Type
  4889 ;;		None
  4890 ;; Auto vars:     Size  Location     Type
  4891 ;;		None
  4892 ;; Return value:  Size  Location     Type
  4893 ;;                  1    wreg      void 
  4894 ;; Registers used:
  4895 ;;		wreg, status,2, status,0, cstack
  4896 ;; Tracked objects:
  4897 ;;		On entry : 0/0
  4898 ;;		On exit  : 0/0
  4899 ;;		Unchanged: 0/0
  4900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4901 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4902 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4903 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4904 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4905 ;;Total ram usage:        0 bytes
  4906 ;; Hardware stack levels used:    1
  4907 ;; Hardware stack levels required when called:    6
  4908 ;; This function calls:
  4909 ;;		___awdiv
  4910 ;;		___awmod
  4911 ;; This function is called by:
  4912 ;;		_main
  4913 ;; This function uses a non-reentrant model
  4914 ;;
  4915                           
  4916                           	psect	text10
  4917  00148E                     __ptext10:
  4918                           	opt stack 0
  4919  00148E                     _stopOperation:
  4920                           	opt stack 24
  4921                           
  4922                           ;main.c: 430: T0CONbits.TMR0ON = 0;
  4923                           
  4924                           ;incstack = 0
  4925  00148E  9ED5               	bcf	4053,7,c	;volatile
  4926                           
  4927                           ;main.c: 431: T1CONbits.TMR1ON = 0;
  4928  001490  90CD               	bcf	4045,0,c	;volatile
  4929                           
  4930                           ;main.c: 432: TMR0 = 55770;
  4931  001492  0ED9               	movlw	217
  4932  001494  6ED7               	movwf	4055,c	;volatile
  4933  001496  0EDA               	movlw	218
  4934  001498  6ED6               	movwf	4054,c	;volatile
  4935                           
  4936                           ;main.c: 433: TMR1 = 60535;
  4937  00149A  0EEC               	movlw	236
  4938  00149C  6ECF               	movwf	4047,c	;volatile
  4939  00149E  0E77               	movlw	119
  4940  0014A0  6ECE               	movwf	4046,c	;volatile
  4941                           
  4942                           ;main.c: 434: num9V = count9V;
  4943  0014A2  C09E  F0A4         	movff	_count9V,_num9V
  4944                           
  4945                           ;main.c: 435: numC = countC;
  4946  0014A6  C0A0  F0A7         	movff	_countC,_numC
  4947                           
  4948                           ;main.c: 436: numAA = countAA;
  4949  0014AA  C09F  F0A5         	movff	_countAA,_numAA
  4950                           
  4951                           ;main.c: 437: numDrain = countDrain;
  4952  0014AE  C0A1  F0A8         	movff	_countDrain,_numDrain
  4953                           
  4954                           ;main.c: 438: numBats = count9V + countC + countAA + countDrain;
  4955  0014B2  0100               	movlb	0	; () banked
  4956  0014B4  519E               	movf	_count9V& (0+255),w,b
  4957  0014B6  0100               	movlb	0	; () banked
  4958  0014B8  25A0               	addwf	_countC& (0+255),w,b
  4959  0014BA  0100               	movlb	0	; () banked
  4960  0014BC  259F               	addwf	_countAA& (0+255),w,b
  4961  0014BE  0100               	movlb	0	; () banked
  4962  0014C0  25A1               	addwf	_countDrain& (0+255),w,b
  4963  0014C2  0100               	movlb	0	; () banked
  4964  0014C4  6FA6               	movwf	_numBats& (0+255),b
  4965                           
  4966                           ; BSR set to: 0
  4967                           ;main.c: 439: count9V = 0;
  4968  0014C6  0E00               	movlw	0
  4969  0014C8  0100               	movlb	0	; () banked
  4970  0014CA  6F9E               	movwf	_count9V& (0+255),b
  4971                           
  4972                           ; BSR set to: 0
  4973                           ;main.c: 440: countC = 0;
  4974  0014CC  0E00               	movlw	0
  4975  0014CE  0100               	movlb	0	; () banked
  4976  0014D0  6FA0               	movwf	_countC& (0+255),b
  4977                           
  4978                           ; BSR set to: 0
  4979                           ;main.c: 441: countAA = 0;
  4980  0014D2  0E00               	movlw	0
  4981  0014D4  0100               	movlb	0	; () banked
  4982  0014D6  6F9F               	movwf	_countAA& (0+255),b
  4983                           
  4984                           ; BSR set to: 0
  4985                           ;main.c: 442: countDrain = 0;
  4986  0014D8  0E00               	movlw	0
  4987  0014DA  0100               	movlb	0	; () banked
  4988  0014DC  6FA1               	movwf	_countDrain& (0+255),b
  4989                           
  4990                           ; BSR set to: 0
  4991                           ;main.c: 443: min = opTimer / 60;
  4992  0014DE  C04A  F031         	movff	_opTimer,___awdiv@dividend
  4993  0014E2  6A32               	clrf	___awdiv@dividend+1,c
  4994  0014E4  0E00               	movlw	0
  4995  0014E6  6E34               	movwf	___awdiv@divisor+1,c
  4996  0014E8  0E3C               	movlw	60
  4997  0014EA  6E33               	movwf	___awdiv@divisor,c
  4998  0014EC  ECDC  F00B         	call	___awdiv	;wreg free
  4999  0014F0  5031               	movf	?___awdiv,w,c
  5000  0014F2  0100               	movlb	0	; () banked
  5001  0014F4  6FA3               	movwf	_min& (0+255),b
  5002                           
  5003                           ; BSR set to: 0
  5004                           ;main.c: 444: sec = opTimer % 60;
  5005  0014F6  C04A  F031         	movff	_opTimer,___awmod@dividend
  5006  0014FA  6A32               	clrf	___awmod@dividend+1,c
  5007  0014FC  0E00               	movlw	0
  5008  0014FE  6E34               	movwf	___awmod@divisor+1,c
  5009  001500  0E3C               	movlw	60
  5010  001502  6E33               	movwf	___awmod@divisor,c
  5011  001504  ECA1  F00C         	call	___awmod	;wreg free
  5012  001508  5031               	movf	?___awmod,w,c
  5013  00150A  0100               	movlb	0	; () banked
  5014  00150C  6FA9               	movwf	_sec& (0+255),b
  5015                           
  5016                           ; BSR set to: 0
  5017                           ;main.c: 445: opTimer = 0;
  5018  00150E  0E00               	movlw	0
  5019  001510  6E4A               	movwf	_opTimer,c
  5020                           
  5021                           ; BSR set to: 0
  5022                           ;main.c: 446: doneTimer = 0;
  5023  001512  0E00               	movlw	0
  5024  001514  6E49               	movwf	_doneTimer,c
  5025                           
  5026                           ; BSR set to: 0
  5027                           ;main.c: 447: sorting = 0;
  5028  001516  0E00               	movlw	0
  5029  001518  6E4C               	movwf	_sorting,c
  5030                           
  5031                           ; BSR set to: 0
  5032                           ;main.c: 448: plat1Left = 0;
  5033  00151A  0E00               	movlw	0
  5034  00151C  0100               	movlb	0	; () banked
  5035  00151E  6F8F               	movwf	(_plat1Left+1)& (0+255),b
  5036  001520  0E00               	movlw	0
  5037  001522  6F8E               	movwf	_plat1Left& (0+255),b
  5038                           
  5039                           ; BSR set to: 0
  5040                           ;main.c: 449: plat1Right = 0;
  5041  001524  0E00               	movlw	0
  5042  001526  0100               	movlb	0	; () banked
  5043  001528  6F91               	movwf	(_plat1Right+1)& (0+255),b
  5044  00152A  0E00               	movlw	0
  5045  00152C  6F90               	movwf	_plat1Right& (0+255),b
  5046                           
  5047                           ; BSR set to: 0
  5048                           ;main.c: 450: plat2Left = 0;
  5049  00152E  0E00               	movlw	0
  5050  001530  0100               	movlb	0	; () banked
  5051  001532  6F93               	movwf	(_plat2Left+1)& (0+255),b
  5052  001534  0E00               	movlw	0
  5053  001536  6F92               	movwf	_plat2Left& (0+255),b
  5054                           
  5055                           ; BSR set to: 0
  5056                           ;main.c: 451: plat2Right = 0;
  5057  001538  0E00               	movlw	0
  5058  00153A  0100               	movlb	0	; () banked
  5059  00153C  6F95               	movwf	(_plat2Right+1)& (0+255),b
  5060  00153E  0E00               	movlw	0
  5061  001540  6F94               	movwf	_plat2Right& (0+255),b
  5062                           
  5063                           ; BSR set to: 0
  5064                           ;main.c: 452: turn2BackLeft = 0;
  5065  001542  0E00               	movlw	0
  5066  001544  0100               	movlb	0	; () banked
  5067  001546  6F9B               	movwf	(_turn2BackLeft+1)& (0+255),b
  5068  001548  0E00               	movlw	0
  5069  00154A  6F9A               	movwf	_turn2BackLeft& (0+255),b
  5070                           
  5071                           ; BSR set to: 0
  5072                           ;main.c: 453: turn1BackLeft = 0;
  5073  00154C  0E00               	movlw	0
  5074  00154E  0100               	movlb	0	; () banked
  5075  001550  6F97               	movwf	(_turn1BackLeft+1)& (0+255),b
  5076  001552  0E00               	movlw	0
  5077  001554  6F96               	movwf	_turn1BackLeft& (0+255),b
  5078                           
  5079                           ; BSR set to: 0
  5080                           ;main.c: 454: turn2BackRight = 0;
  5081  001556  0E00               	movlw	0
  5082  001558  0100               	movlb	0	; () banked
  5083  00155A  6F9D               	movwf	(_turn2BackRight+1)& (0+255),b
  5084  00155C  0E00               	movlw	0
  5085  00155E  6F9C               	movwf	_turn2BackRight& (0+255),b
  5086                           
  5087                           ; BSR set to: 0
  5088                           ;main.c: 455: turn1BackRight = 0;
  5089  001560  0E00               	movlw	0
  5090  001562  0100               	movlb	0	; () banked
  5091  001564  6F99               	movwf	(_turn1BackRight+1)& (0+255),b
  5092  001566  0E00               	movlw	0
  5093  001568  6F98               	movwf	_turn1BackRight& (0+255),b
  5094                           
  5095                           ; BSR set to: 0
  5096                           ;main.c: 456: count_2ms = 0;
  5097  00156A  0E00               	movlw	0
  5098  00156C  6E48               	movwf	_count_2ms+1,c
  5099  00156E  0E00               	movlw	0
  5100  001570  6E47               	movwf	_count_2ms,c
  5101                           
  5102                           ; BSR set to: 0
  5103                           ;main.c: 457: doubleAA = 0;
  5104  001572  0E00               	movlw	0
  5105  001574  0100               	movlb	0	; () banked
  5106  001576  6FA2               	movwf	_doubleAA& (0+255),b
  5107                           
  5108                           ; BSR set to: 0
  5109                           ;main.c: 458: solOnTimer = 0;
  5110  001578  0E00               	movlw	0
  5111  00157A  6E4B               	movwf	_solOnTimer,c
  5112                           
  5113                           ; BSR set to: 0
  5114                           ;main.c: 460: LATCbits.LC1 = 0;;
  5115  00157C  928B               	bcf	3979,1,c	;volatile
  5116                           
  5117                           ; BSR set to: 0
  5118                           ;main.c: 461: LATCbits.LC2 = 0;;
  5119  00157E  948B               	bcf	3979,2,c	;volatile
  5120                           
  5121                           ; BSR set to: 0
  5122                           ;main.c: 462: LATCbits.LC6 = 0;;
  5123  001580  9C8B               	bcf	3979,6,c	;volatile
  5124                           
  5125                           ; BSR set to: 0
  5126                           ;main.c: 463: LATCbits.LC5 = 0;;
  5127  001582  9A8B               	bcf	3979,5,c	;volatile
  5128                           
  5129                           ; BSR set to: 0
  5130                           ;main.c: 464: LATCbits.LC0 = 0;;
  5131  001584  908B               	bcf	3979,0,c	;volatile
  5132                           
  5133                           ; BSR set to: 0
  5134                           ;main.c: 465: LATEbits.LE2 = 0;;
  5135  001586  948D               	bcf	3981,2,c	;volatile
  5136                           
  5137                           ; BSR set to: 0
  5138                           ;main.c: 466: LATEbits.LE1 = 0;;
  5139  001588  928D               	bcf	3981,1,c	;volatile
  5140                           
  5141                           ; BSR set to: 0
  5142                           ;main.c: 467: LATAbits.LA4 = 0;;
  5143  00158A  9889               	bcf	3977,4,c	;volatile
  5144                           
  5145                           ; BSR set to: 0
  5146                           ;main.c: 468: LATDbits.LD0= 0;;
  5147  00158C  908C               	bcf	3980,0,c	;volatile
  5148                           
  5149                           ; BSR set to: 0
  5150                           ;main.c: 469: LATCbits.LC7 = 0;;
  5151  00158E  9E8B               	bcf	3979,7,c	;volatile
  5152                           
  5153                           ; BSR set to: 0
  5154                           ;main.c: 470: LATDbits.LD1 = 0;;
  5155  001590  928C               	bcf	3980,1,c	;volatile
  5156                           
  5157                           ; BSR set to: 0
  5158                           ;main.c: 471: LATBbits.LB0 = 0;;
  5159  001592  908A               	bcf	3978,0,c	;volatile
  5160                           
  5161                           ; BSR set to: 0
  5162                           ;main.c: 472: screenMode = 0;
  5163  001594  0E00               	movlw	0
  5164  001596  0100               	movlb	0	; () banked
  5165  001598  6FCC               	movwf	_screenMode& (0+255),b
  5166                           
  5167                           ; BSR set to: 0
  5168  00159A  0012               	return		;funcret
  5169  00159C                     __end_of_stopOperation:
  5170                           	opt stack 0
  5171                           tblptru	equ	0xFF8
  5172                           tblptrh	equ	0xFF7
  5173                           tblptrl	equ	0xFF6
  5174                           tablat	equ	0xFF5
  5175                           prodh	equ	0xFF4
  5176                           prodl	equ	0xFF3
  5177                           intcon	equ	0xFF2
  5178                           intcon2	equ	0xFF1
  5179                           intcon3	equ	0xFF0
  5180                           postinc0	equ	0xFEE
  5181                           wreg	equ	0xFE8
  5182                           indf2	equ	0xFDF
  5183                           postinc2	equ	0xFDE
  5184                           postdec2	equ	0xFDD
  5185                           fsr2h	equ	0xFDA
  5186                           fsr2l	equ	0xFD9
  5187                           status	equ	0xFD8
  5188                           
  5189 ;; *************** function ___awmod *****************
  5190 ;; Defined at:
  5191 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  5192 ;; Parameters:    Size  Location     Type
  5193 ;;  dividend        2   48[COMRAM] int 
  5194 ;;  divisor         2   50[COMRAM] int 
  5195 ;; Auto vars:     Size  Location     Type
  5196 ;;  sign            1   53[COMRAM] unsigned char 
  5197 ;;  counter         1   52[COMRAM] unsigned char 
  5198 ;; Return value:  Size  Location     Type
  5199 ;;                  2   48[COMRAM] int 
  5200 ;; Registers used:
  5201 ;;		wreg, status,2, status,0
  5202 ;; Tracked objects:
  5203 ;;		On entry : 0/0
  5204 ;;		On exit  : 0/0
  5205 ;;		Unchanged: 0/0
  5206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5207 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5208 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5209 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5210 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5211 ;;Total ram usage:        6 bytes
  5212 ;; Hardware stack levels used:    1
  5213 ;; Hardware stack levels required when called:    5
  5214 ;; This function calls:
  5215 ;;		Nothing
  5216 ;; This function is called by:
  5217 ;;		_stopOperation
  5218 ;; This function uses a non-reentrant model
  5219 ;;
  5220                           
  5221                           	psect	text11
  5222  001942                     __ptext11:
  5223                           	opt stack 0
  5224  001942                     ___awmod:
  5225                           	opt stack 24
  5226                           
  5227                           ; BSR set to: 0
  5228                           ;incstack = 0
  5229  001942  0E00               	movlw	0
  5230  001944  6E36               	movwf	___awmod@sign,c
  5231  001946  AE32               	btfss	___awmod@dividend+1,7,c
  5232  001948  D006               	goto	l3150
  5233  00194A  6C31               	negf	___awmod@dividend,c
  5234  00194C  1E32               	comf	___awmod@dividend+1,f,c
  5235  00194E  B0D8               	btfsc	status,0,c
  5236  001950  2A32               	incf	___awmod@dividend+1,f,c
  5237  001952  0E01               	movlw	1
  5238  001954  6E36               	movwf	___awmod@sign,c
  5239  001956                     l3150:
  5240  001956  AE34               	btfss	___awmod@divisor+1,7,c
  5241  001958  D004               	goto	l3154
  5242  00195A  6C33               	negf	___awmod@divisor,c
  5243  00195C  1E34               	comf	___awmod@divisor+1,f,c
  5244  00195E  B0D8               	btfsc	status,0,c
  5245  001960  2A34               	incf	___awmod@divisor+1,f,c
  5246  001962                     l3154:
  5247  001962  5033               	movf	___awmod@divisor,w,c
  5248  001964  1034               	iorwf	___awmod@divisor+1,w,c
  5249  001966  B4D8               	btfsc	status,2,c
  5250  001968  D018               	goto	l3170
  5251  00196A  0E01               	movlw	1
  5252  00196C  6E35               	movwf	___awmod@counter,c
  5253  00196E  D004               	goto	l3160
  5254  001970                     l3158:
  5255  001970  90D8               	bcf	status,0,c
  5256  001972  3633               	rlcf	___awmod@divisor,f,c
  5257  001974  3634               	rlcf	___awmod@divisor+1,f,c
  5258  001976  2A35               	incf	___awmod@counter,f,c
  5259  001978                     l3160:
  5260  001978  AE34               	btfss	___awmod@divisor+1,7,c
  5261  00197A  D7FA               	goto	l3158
  5262  00197C                     l3162:
  5263  00197C  5033               	movf	___awmod@divisor,w,c
  5264  00197E  5C31               	subwf	___awmod@dividend,w,c
  5265  001980  5034               	movf	___awmod@divisor+1,w,c
  5266  001982  5832               	subwfb	___awmod@dividend+1,w,c
  5267  001984  A0D8               	btfss	status,0,c
  5268  001986  D004               	goto	l3166
  5269  001988  5033               	movf	___awmod@divisor,w,c
  5270  00198A  5E31               	subwf	___awmod@dividend,f,c
  5271  00198C  5034               	movf	___awmod@divisor+1,w,c
  5272  00198E  5A32               	subwfb	___awmod@dividend+1,f,c
  5273  001990                     l3166:
  5274  001990  90D8               	bcf	status,0,c
  5275  001992  3234               	rrcf	___awmod@divisor+1,f,c
  5276  001994  3233               	rrcf	___awmod@divisor,f,c
  5277  001996  2E35               	decfsz	___awmod@counter,f,c
  5278  001998  D7F1               	goto	l3162
  5279  00199A                     l3170:
  5280  00199A  5036               	movf	___awmod@sign,w,c
  5281  00199C  B4D8               	btfsc	status,2,c
  5282  00199E  D004               	goto	l3174
  5283  0019A0  6C31               	negf	___awmod@dividend,c
  5284  0019A2  1E32               	comf	___awmod@dividend+1,f,c
  5285  0019A4  B0D8               	btfsc	status,0,c
  5286  0019A6  2A32               	incf	___awmod@dividend+1,f,c
  5287  0019A8                     l3174:
  5288  0019A8  C031  F031         	movff	___awmod@dividend,?___awmod
  5289  0019AC  C032  F032         	movff	___awmod@dividend+1,?___awmod+1
  5290  0019B0  0012               	return	
  5291  0019B2                     __end_of___awmod:
  5292                           	opt stack 0
  5293                           tblptru	equ	0xFF8
  5294                           tblptrh	equ	0xFF7
  5295                           tblptrl	equ	0xFF6
  5296                           tablat	equ	0xFF5
  5297                           prodh	equ	0xFF4
  5298                           prodl	equ	0xFF3
  5299                           intcon	equ	0xFF2
  5300                           intcon2	equ	0xFF1
  5301                           intcon3	equ	0xFF0
  5302                           postinc0	equ	0xFEE
  5303                           wreg	equ	0xFE8
  5304                           indf2	equ	0xFDF
  5305                           postinc2	equ	0xFDE
  5306                           postdec2	equ	0xFDD
  5307                           fsr2h	equ	0xFDA
  5308                           fsr2l	equ	0xFD9
  5309                           status	equ	0xFD8
  5310                           
  5311 ;; *************** function ___awdiv *****************
  5312 ;; Defined at:
  5313 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  5314 ;; Parameters:    Size  Location     Type
  5315 ;;  dividend        2   48[COMRAM] int 
  5316 ;;  divisor         2   50[COMRAM] int 
  5317 ;; Auto vars:     Size  Location     Type
  5318 ;;  quotient        2   54[COMRAM] int 
  5319 ;;  sign            1   53[COMRAM] unsigned char 
  5320 ;;  counter         1   52[COMRAM] unsigned char 
  5321 ;; Return value:  Size  Location     Type
  5322 ;;                  2   48[COMRAM] int 
  5323 ;; Registers used:
  5324 ;;		wreg, status,2, status,0
  5325 ;; Tracked objects:
  5326 ;;		On entry : 0/0
  5327 ;;		On exit  : 0/0
  5328 ;;		Unchanged: 0/0
  5329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5330 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5331 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5332 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5333 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5334 ;;Total ram usage:        8 bytes
  5335 ;; Hardware stack levels used:    1
  5336 ;; Hardware stack levels required when called:    5
  5337 ;; This function calls:
  5338 ;;		Nothing
  5339 ;; This function is called by:
  5340 ;;		_stopOperation
  5341 ;; This function uses a non-reentrant model
  5342 ;;
  5343                           
  5344                           	psect	text12
  5345  0017B8                     __ptext12:
  5346                           	opt stack 0
  5347  0017B8                     ___awdiv:
  5348                           	opt stack 24
  5349                           
  5350                           ;incstack = 0
  5351  0017B8  0E00               	movlw	0
  5352  0017BA  6E36               	movwf	___awdiv@sign,c
  5353  0017BC  AE34               	btfss	___awdiv@divisor+1,7,c
  5354  0017BE  D006               	goto	l3106
  5355  0017C0  6C33               	negf	___awdiv@divisor,c
  5356  0017C2  1E34               	comf	___awdiv@divisor+1,f,c
  5357  0017C4  B0D8               	btfsc	status,0,c
  5358  0017C6  2A34               	incf	___awdiv@divisor+1,f,c
  5359  0017C8  0E01               	movlw	1
  5360  0017CA  6E36               	movwf	___awdiv@sign,c
  5361  0017CC                     l3106:
  5362  0017CC  AE32               	btfss	___awdiv@dividend+1,7,c
  5363  0017CE  D006               	goto	l3112
  5364  0017D0  6C31               	negf	___awdiv@dividend,c
  5365  0017D2  1E32               	comf	___awdiv@dividend+1,f,c
  5366  0017D4  B0D8               	btfsc	status,0,c
  5367  0017D6  2A32               	incf	___awdiv@dividend+1,f,c
  5368  0017D8  0E01               	movlw	1
  5369  0017DA  1A36               	xorwf	___awdiv@sign,f,c
  5370  0017DC                     l3112:
  5371  0017DC  0E00               	movlw	0
  5372  0017DE  6E38               	movwf	___awdiv@quotient+1,c
  5373  0017E0  0E00               	movlw	0
  5374  0017E2  6E37               	movwf	___awdiv@quotient,c
  5375  0017E4  5033               	movf	___awdiv@divisor,w,c
  5376  0017E6  1034               	iorwf	___awdiv@divisor+1,w,c
  5377  0017E8  B4D8               	btfsc	status,2,c
  5378  0017EA  D01C               	goto	l3134
  5379  0017EC  0E01               	movlw	1
  5380  0017EE  6E35               	movwf	___awdiv@counter,c
  5381  0017F0  D004               	goto	l3120
  5382  0017F2                     l3118:
  5383  0017F2  90D8               	bcf	status,0,c
  5384  0017F4  3633               	rlcf	___awdiv@divisor,f,c
  5385  0017F6  3634               	rlcf	___awdiv@divisor+1,f,c
  5386  0017F8  2A35               	incf	___awdiv@counter,f,c
  5387  0017FA                     l3120:
  5388  0017FA  AE34               	btfss	___awdiv@divisor+1,7,c
  5389  0017FC  D7FA               	goto	l3118
  5390  0017FE                     l3122:
  5391  0017FE  90D8               	bcf	status,0,c
  5392  001800  3637               	rlcf	___awdiv@quotient,f,c
  5393  001802  3638               	rlcf	___awdiv@quotient+1,f,c
  5394  001804  5033               	movf	___awdiv@divisor,w,c
  5395  001806  5C31               	subwf	___awdiv@dividend,w,c
  5396  001808  5034               	movf	___awdiv@divisor+1,w,c
  5397  00180A  5832               	subwfb	___awdiv@dividend+1,w,c
  5398  00180C  A0D8               	btfss	status,0,c
  5399  00180E  D005               	goto	l3130
  5400  001810  5033               	movf	___awdiv@divisor,w,c
  5401  001812  5E31               	subwf	___awdiv@dividend,f,c
  5402  001814  5034               	movf	___awdiv@divisor+1,w,c
  5403  001816  5A32               	subwfb	___awdiv@dividend+1,f,c
  5404  001818  8037               	bsf	___awdiv@quotient,0,c
  5405  00181A                     l3130:
  5406  00181A  90D8               	bcf	status,0,c
  5407  00181C  3234               	rrcf	___awdiv@divisor+1,f,c
  5408  00181E  3233               	rrcf	___awdiv@divisor,f,c
  5409  001820  2E35               	decfsz	___awdiv@counter,f,c
  5410  001822  D7ED               	goto	l3122
  5411  001824                     l3134:
  5412  001824  5036               	movf	___awdiv@sign,w,c
  5413  001826  B4D8               	btfsc	status,2,c
  5414  001828  D004               	goto	l3138
  5415  00182A  6C37               	negf	___awdiv@quotient,c
  5416  00182C  1E38               	comf	___awdiv@quotient+1,f,c
  5417  00182E  B0D8               	btfsc	status,0,c
  5418  001830  2A38               	incf	___awdiv@quotient+1,f,c
  5419  001832                     l3138:
  5420  001832  C037  F031         	movff	___awdiv@quotient,?___awdiv
  5421  001836  C038  F032         	movff	___awdiv@quotient+1,?___awdiv+1
  5422  00183A  0012               	return	
  5423  00183C                     __end_of___awdiv:
  5424                           	opt stack 0
  5425                           tblptru	equ	0xFF8
  5426                           tblptrh	equ	0xFF7
  5427                           tblptrl	equ	0xFF6
  5428                           tablat	equ	0xFF5
  5429                           prodh	equ	0xFF4
  5430                           prodl	equ	0xFF3
  5431                           intcon	equ	0xFF2
  5432                           intcon2	equ	0xFF1
  5433                           intcon3	equ	0xFF0
  5434                           postinc0	equ	0xFEE
  5435                           wreg	equ	0xFE8
  5436                           indf2	equ	0xFDF
  5437                           postinc2	equ	0xFDE
  5438                           postdec2	equ	0xFDD
  5439                           fsr2h	equ	0xFDA
  5440                           fsr2l	equ	0xFD9
  5441                           status	equ	0xFD8
  5442                           
  5443 ;; *************** function _initLCD *****************
  5444 ;; Defined at:
  5445 ;;		line 7 in file "../lcd.c"
  5446 ;; Parameters:    Size  Location     Type
  5447 ;;		None
  5448 ;; Auto vars:     Size  Location     Type
  5449 ;;		None
  5450 ;; Return value:  Size  Location     Type
  5451 ;;                  1    wreg      void 
  5452 ;; Registers used:
  5453 ;;		wreg, status,2, status,0, cstack
  5454 ;; Tracked objects:
  5455 ;;		On entry : 0/0
  5456 ;;		On exit  : 0/0
  5457 ;;		Unchanged: 0/0
  5458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5459 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5460 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5461 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5462 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5463 ;;Total ram usage:        1 bytes
  5464 ;; Hardware stack levels used:    1
  5465 ;; Hardware stack levels required when called:    7
  5466 ;; This function calls:
  5467 ;;		_lcdInst
  5468 ;; This function is called by:
  5469 ;;		_main
  5470 ;; This function uses a non-reentrant model
  5471 ;;
  5472                           
  5473                           	psect	text13
  5474  001BBC                     __ptext13:
  5475                           	opt stack 0
  5476  001BBC                     _initLCD:
  5477                           	opt stack 23
  5478                           
  5479                           ;lcd.c: 8: _delay((unsigned long)((15)*(10000000/4000.0)));
  5480                           
  5481                           ;incstack = 0
  5482  001BBC  0E31               	movlw	49
  5483  001BBE  6E34               	movwf	??_initLCD& (0+255),c
  5484  001BC0  0EB2               	movlw	178
  5485  001BC2                     u5387:
  5486  001BC2  2EE8               	decfsz	wreg,f,c
  5487  001BC4  D7FE               	bra	u5387
  5488  001BC6  2E34               	decfsz	??_initLCD& (0+255),f,c
  5489  001BC8  D7FC               	bra	u5387
  5490  001BCA  D000               	nop2	
  5491                           
  5492                           ;lcd.c: 9: lcdInst(0b00110011);
  5493  001BCC  0E33               	movlw	51
  5494  001BCE  ECF8  F00E         	call	_lcdInst
  5495                           
  5496                           ;lcd.c: 10: lcdInst(0b00110010);
  5497  001BD2  0E32               	movlw	50
  5498  001BD4  ECF8  F00E         	call	_lcdInst
  5499                           
  5500                           ;lcd.c: 11: lcdInst(0b00101000);
  5501  001BD8  0E28               	movlw	40
  5502  001BDA  ECF8  F00E         	call	_lcdInst
  5503                           
  5504                           ;lcd.c: 12: lcdInst(0b00001111);
  5505  001BDE  0E0F               	movlw	15
  5506  001BE0  ECF8  F00E         	call	_lcdInst
  5507                           
  5508                           ;lcd.c: 13: lcdInst(0b00000110);
  5509  001BE4  0E06               	movlw	6
  5510  001BE6  ECF8  F00E         	call	_lcdInst
  5511                           
  5512                           ;lcd.c: 14: lcdInst(0b00000001);
  5513  001BEA  0E01               	movlw	1
  5514  001BEC  ECF8  F00E         	call	_lcdInst
  5515                           
  5516                           ;lcd.c: 15: _delay((unsigned long)((15)*(10000000/4000.0)));
  5517  001BF0  0E31               	movlw	49
  5518  001BF2  6E34               	movwf	??_initLCD& (0+255),c
  5519  001BF4  0EB2               	movlw	178
  5520  001BF6                     u5397:
  5521  001BF6  2EE8               	decfsz	wreg,f,c
  5522  001BF8  D7FE               	bra	u5397
  5523  001BFA  2E34               	decfsz	??_initLCD& (0+255),f,c
  5524  001BFC  D7FC               	bra	u5397
  5525  001BFE  D000               	nop2	
  5526  001C00  0012               	return		;funcret
  5527  001C02                     __end_of_initLCD:
  5528                           	opt stack 0
  5529                           tblptru	equ	0xFF8
  5530                           tblptrh	equ	0xFF7
  5531                           tblptrl	equ	0xFF6
  5532                           tablat	equ	0xFF5
  5533                           prodh	equ	0xFF4
  5534                           prodl	equ	0xFF3
  5535                           intcon	equ	0xFF2
  5536                           intcon2	equ	0xFF1
  5537                           intcon3	equ	0xFF0
  5538                           postinc0	equ	0xFEE
  5539                           wreg	equ	0xFE8
  5540                           indf2	equ	0xFDF
  5541                           postinc2	equ	0xFDE
  5542                           postdec2	equ	0xFDD
  5543                           fsr2h	equ	0xFDA
  5544                           fsr2l	equ	0xFD9
  5545                           status	equ	0xFD8
  5546                           
  5547 ;; *************** function _lcdInst *****************
  5548 ;; Defined at:
  5549 ;;		line 18 in file "../lcd.c"
  5550 ;; Parameters:    Size  Location     Type
  5551 ;;  data            1    wreg     unsigned char 
  5552 ;; Auto vars:     Size  Location     Type
  5553 ;;  data            1   50[COMRAM] unsigned char 
  5554 ;; Return value:  Size  Location     Type
  5555 ;;                  1    wreg      void 
  5556 ;; Registers used:
  5557 ;;		wreg, status,2, status,0, cstack
  5558 ;; Tracked objects:
  5559 ;;		On entry : 0/0
  5560 ;;		On exit  : 0/0
  5561 ;;		Unchanged: 0/0
  5562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5563 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5564 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5565 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5566 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5567 ;;Total ram usage:        1 bytes
  5568 ;; Hardware stack levels used:    1
  5569 ;; Hardware stack levels required when called:    6
  5570 ;; This function calls:
  5571 ;;		_lcdNibble
  5572 ;; This function is called by:
  5573 ;;		_initLCD
  5574 ;;		_main
  5575 ;;		_testBatteries
  5576 ;; This function uses a non-reentrant model
  5577 ;;
  5578                           
  5579                           	psect	text14
  5580  001DF0                     __ptext14:
  5581                           	opt stack 0
  5582  001DF0                     _lcdInst:
  5583                           	opt stack 23
  5584                           
  5585                           ;incstack = 0
  5586                           ;lcdInst@data stored from wreg
  5587  001DF0  6E33               	movwf	lcdInst@data,c
  5588                           
  5589                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  5590  001DF2  948C               	bcf	3980,2,c	;volatile
  5591                           
  5592                           ;lcd.c: 20: lcdNibble(data);
  5593  001DF4  5033               	movf	lcdInst@data,w,c
  5594  001DF6  EC90  F00D         	call	_lcdNibble
  5595  001DFA  0012               	return		;funcret
  5596  001DFC                     __end_of_lcdInst:
  5597                           	opt stack 0
  5598                           tblptru	equ	0xFF8
  5599                           tblptrh	equ	0xFF7
  5600                           tblptrl	equ	0xFF6
  5601                           tablat	equ	0xFF5
  5602                           prodh	equ	0xFF4
  5603                           prodl	equ	0xFF3
  5604                           intcon	equ	0xFF2
  5605                           intcon2	equ	0xFF1
  5606                           intcon3	equ	0xFF0
  5607                           postinc0	equ	0xFEE
  5608                           wreg	equ	0xFE8
  5609                           indf2	equ	0xFDF
  5610                           postinc2	equ	0xFDE
  5611                           postdec2	equ	0xFDD
  5612                           fsr2h	equ	0xFDA
  5613                           fsr2l	equ	0xFD9
  5614                           status	equ	0xFD8
  5615                           
  5616 ;; *************** function _lcdNibble *****************
  5617 ;; Defined at:
  5618 ;;		line 28 in file "../lcd.c"
  5619 ;; Parameters:    Size  Location     Type
  5620 ;;  data            1    wreg     unsigned char 
  5621 ;; Auto vars:     Size  Location     Type
  5622 ;;  data            1   49[COMRAM] unsigned char 
  5623 ;;  temp            1   48[COMRAM] unsigned char 
  5624 ;; Return value:  Size  Location     Type
  5625 ;;                  1    wreg      void 
  5626 ;; Registers used:
  5627 ;;		wreg, status,2, status,0
  5628 ;; Tracked objects:
  5629 ;;		On entry : 0/0
  5630 ;;		On exit  : 0/0
  5631 ;;		Unchanged: 0/0
  5632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5633 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5634 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5635 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5636 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5637 ;;Total ram usage:        2 bytes
  5638 ;; Hardware stack levels used:    1
  5639 ;; Hardware stack levels required when called:    5
  5640 ;; This function calls:
  5641 ;;		Nothing
  5642 ;; This function is called by:
  5643 ;;		_lcdInst
  5644 ;;		_putch
  5645 ;; This function uses a non-reentrant model
  5646 ;;
  5647                           
  5648                           	psect	text15
  5649  001B20                     __ptext15:
  5650                           	opt stack 0
  5651  001B20                     _lcdNibble:
  5652                           	opt stack 22
  5653                           
  5654                           ;incstack = 0
  5655                           ;lcdNibble@data stored from wreg
  5656  001B20  6E32               	movwf	lcdNibble@data,c
  5657                           
  5658                           ;lcd.c: 30: char temp = data & 0xF0;
  5659  001B22  5032               	movf	lcdNibble@data,w,c
  5660  001B24  0BF0               	andlw	240
  5661  001B26  6E31               	movwf	lcdNibble@temp,c
  5662                           
  5663                           ;lcd.c: 31: LATD = LATD & 0x0F;
  5664  001B28  508C               	movf	3980,w,c	;volatile
  5665  001B2A  0B0F               	andlw	15
  5666  001B2C  6E8C               	movwf	3980,c	;volatile
  5667                           
  5668                           ;lcd.c: 32: LATD = temp | LATD;
  5669  001B2E  5031               	movf	lcdNibble@temp,w,c
  5670  001B30  108C               	iorwf	3980,w,c	;volatile
  5671  001B32  6E8C               	movwf	3980,c	;volatile
  5672                           
  5673                           ;lcd.c: 34: LATDbits.LATD3 = 0;
  5674  001B34  968C               	bcf	3980,3,c	;volatile
  5675                           
  5676                           ;lcd.c: 35: _delay((unsigned long)((30)*(10000000/4000000.0)));
  5677  001B36  0E19               	movlw	25
  5678  001B38                     u5407:
  5679  001B38  2EE8               	decfsz	wreg,f,c
  5680  001B3A  D7FE               	bra	u5407
  5681                           
  5682                           ;lcd.c: 36: LATDbits.LATD3 = 1;
  5683  001B3C  868C               	bsf	3980,3,c	;volatile
  5684                           
  5685                           ;lcd.c: 37: _delay((unsigned long)((30)*(10000000/4000000.0)));
  5686  001B3E  0E19               	movlw	25
  5687  001B40                     u5417:
  5688  001B40  2EE8               	decfsz	wreg,f,c
  5689  001B42  D7FE               	bra	u5417
  5690                           
  5691                           ;lcd.c: 39: data = data << 4;
  5692  001B44  3832               	swapf	lcdNibble@data,w,c
  5693  001B46  0BF0               	andlw	240
  5694  001B48  6E32               	movwf	lcdNibble@data,c
  5695                           
  5696                           ;lcd.c: 41: temp = data & 0xF0;
  5697  001B4A  5032               	movf	lcdNibble@data,w,c
  5698  001B4C  0BF0               	andlw	240
  5699  001B4E  6E31               	movwf	lcdNibble@temp,c
  5700                           
  5701                           ;lcd.c: 42: LATD = LATD & 0x0F;
  5702  001B50  508C               	movf	3980,w,c	;volatile
  5703  001B52  0B0F               	andlw	15
  5704  001B54  6E8C               	movwf	3980,c	;volatile
  5705                           
  5706                           ;lcd.c: 43: LATD = temp | LATD;
  5707  001B56  5031               	movf	lcdNibble@temp,w,c
  5708  001B58  108C               	iorwf	3980,w,c	;volatile
  5709  001B5A  6E8C               	movwf	3980,c	;volatile
  5710                           
  5711                           ;lcd.c: 45: LATDbits.LATD3 = 0;
  5712  001B5C  968C               	bcf	3980,3,c	;volatile
  5713                           
  5714                           ;lcd.c: 46: _delay((unsigned long)((30)*(10000000/4000000.0)));
  5715  001B5E  0E19               	movlw	25
  5716  001B60                     u5427:
  5717  001B60  2EE8               	decfsz	wreg,f,c
  5718  001B62  D7FE               	bra	u5427
  5719                           
  5720                           ;lcd.c: 47: LATDbits.LATD3 = 1;
  5721  001B64  868C               	bsf	3980,3,c	;volatile
  5722                           
  5723                           ;lcd.c: 48: _delay((unsigned long)((30)*(10000000/4000000.0)));
  5724  001B66  0E19               	movlw	25
  5725  001B68                     u5437:
  5726  001B68  2EE8               	decfsz	wreg,f,c
  5727  001B6A  D7FE               	bra	u5437
  5728  001B6C  0012               	return		;funcret
  5729  001B6E                     __end_of_lcdNibble:
  5730                           	opt stack 0
  5731                           tblptru	equ	0xFF8
  5732                           tblptrh	equ	0xFF7
  5733                           tblptrl	equ	0xFF6
  5734                           tablat	equ	0xFF5
  5735                           prodh	equ	0xFF4
  5736                           prodl	equ	0xFF3
  5737                           intcon	equ	0xFF2
  5738                           intcon2	equ	0xFF1
  5739                           intcon3	equ	0xFF0
  5740                           postinc0	equ	0xFEE
  5741                           wreg	equ	0xFE8
  5742                           indf2	equ	0xFDF
  5743                           postinc2	equ	0xFDE
  5744                           postdec2	equ	0xFDD
  5745                           fsr2h	equ	0xFDA
  5746                           fsr2l	equ	0xFD9
  5747                           status	equ	0xFD8
  5748                           
  5749 ;; *************** function _I2C_Master_Write *****************
  5750 ;; Defined at:
  5751 ;;		line 39 in file "../I2C.c"
  5752 ;; Parameters:    Size  Location     Type
  5753 ;;  d               2   49[COMRAM] unsigned int 
  5754 ;; Auto vars:     Size  Location     Type
  5755 ;;		None
  5756 ;; Return value:  Size  Location     Type
  5757 ;;                  1    wreg      void 
  5758 ;; Registers used:
  5759 ;;		wreg, status,2, status,0, cstack
  5760 ;; Tracked objects:
  5761 ;;		On entry : 0/0
  5762 ;;		On exit  : 0/0
  5763 ;;		Unchanged: 0/0
  5764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5765 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5766 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5767 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5768 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5769 ;;Total ram usage:        2 bytes
  5770 ;; Hardware stack levels used:    1
  5771 ;; Hardware stack levels required when called:    6
  5772 ;; This function calls:
  5773 ;;		_I2C_Master_Wait
  5774 ;; This function is called by:
  5775 ;;		_main
  5776 ;; This function uses a non-reentrant model
  5777 ;;
  5778                           
  5779                           	psect	text16
  5780  001E14                     __ptext16:
  5781                           	opt stack 0
  5782  001E14                     _I2C_Master_Write:
  5783                           	opt stack 24
  5784                           
  5785                           ;I2C.c: 41: I2C_Master_Wait();
  5786                           
  5787                           ;incstack = 0
  5788  001E14  ECE0  F00E         	call	_I2C_Master_Wait	;wreg free
  5789                           
  5790                           ;I2C.c: 42: SSPBUF = d;
  5791  001E18  C032  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  5792  001E1C  0012               	return		;funcret
  5793  001E1E                     __end_of_I2C_Master_Write:
  5794                           	opt stack 0
  5795                           tblptru	equ	0xFF8
  5796                           tblptrh	equ	0xFF7
  5797                           tblptrl	equ	0xFF6
  5798                           tablat	equ	0xFF5
  5799                           prodh	equ	0xFF4
  5800                           prodl	equ	0xFF3
  5801                           intcon	equ	0xFF2
  5802                           intcon2	equ	0xFF1
  5803                           intcon3	equ	0xFF0
  5804                           postinc0	equ	0xFEE
  5805                           wreg	equ	0xFE8
  5806                           indf2	equ	0xFDF
  5807                           postinc2	equ	0xFDE
  5808                           postdec2	equ	0xFDD
  5809                           fsr2h	equ	0xFDA
  5810                           fsr2l	equ	0xFD9
  5811                           status	equ	0xFD8
  5812                           
  5813 ;; *************** function _I2C_Master_Stop *****************
  5814 ;; Defined at:
  5815 ;;		line 33 in file "../I2C.c"
  5816 ;; Parameters:    Size  Location     Type
  5817 ;;		None
  5818 ;; Auto vars:     Size  Location     Type
  5819 ;;		None
  5820 ;; Return value:  Size  Location     Type
  5821 ;;                  1    wreg      void 
  5822 ;; Registers used:
  5823 ;;		wreg, status,2, status,0, cstack
  5824 ;; Tracked objects:
  5825 ;;		On entry : 0/0
  5826 ;;		On exit  : 0/0
  5827 ;;		Unchanged: 0/0
  5828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5829 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5830 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5831 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5832 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5833 ;;Total ram usage:        0 bytes
  5834 ;; Hardware stack levels used:    1
  5835 ;; Hardware stack levels required when called:    6
  5836 ;; This function calls:
  5837 ;;		_I2C_Master_Wait
  5838 ;; This function is called by:
  5839 ;;		_main
  5840 ;; This function uses a non-reentrant model
  5841 ;;
  5842                           
  5843                           	psect	text17
  5844  001E28                     __ptext17:
  5845                           	opt stack 0
  5846  001E28                     _I2C_Master_Stop:
  5847                           	opt stack 24
  5848                           
  5849                           ;I2C.c: 35: I2C_Master_Wait();
  5850                           
  5851                           ;incstack = 0
  5852  001E28  ECE0  F00E         	call	_I2C_Master_Wait	;wreg free
  5853                           
  5854                           ;I2C.c: 36: PEN = 1;
  5855  001E2C  84C5               	bsf	4037,2,c	;volatile
  5856  001E2E  0012               	return		;funcret
  5857  001E30                     __end_of_I2C_Master_Stop:
  5858                           	opt stack 0
  5859                           tblptru	equ	0xFF8
  5860                           tblptrh	equ	0xFF7
  5861                           tblptrl	equ	0xFF6
  5862                           tablat	equ	0xFF5
  5863                           prodh	equ	0xFF4
  5864                           prodl	equ	0xFF3
  5865                           intcon	equ	0xFF2
  5866                           intcon2	equ	0xFF1
  5867                           intcon3	equ	0xFF0
  5868                           postinc0	equ	0xFEE
  5869                           wreg	equ	0xFE8
  5870                           indf2	equ	0xFDF
  5871                           postinc2	equ	0xFDE
  5872                           postdec2	equ	0xFDD
  5873                           fsr2h	equ	0xFDA
  5874                           fsr2l	equ	0xFD9
  5875                           status	equ	0xFD8
  5876                           
  5877 ;; *************** function _I2C_Master_Start *****************
  5878 ;; Defined at:
  5879 ;;		line 21 in file "../I2C.c"
  5880 ;; Parameters:    Size  Location     Type
  5881 ;;		None
  5882 ;; Auto vars:     Size  Location     Type
  5883 ;;		None
  5884 ;; Return value:  Size  Location     Type
  5885 ;;                  1    wreg      void 
  5886 ;; Registers used:
  5887 ;;		wreg, status,2, status,0, cstack
  5888 ;; Tracked objects:
  5889 ;;		On entry : 0/0
  5890 ;;		On exit  : 0/0
  5891 ;;		Unchanged: 0/0
  5892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5893 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5894 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5895 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5896 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5897 ;;Total ram usage:        0 bytes
  5898 ;; Hardware stack levels used:    1
  5899 ;; Hardware stack levels required when called:    6
  5900 ;; This function calls:
  5901 ;;		_I2C_Master_Wait
  5902 ;; This function is called by:
  5903 ;;		_main
  5904 ;; This function uses a non-reentrant model
  5905 ;;
  5906                           
  5907                           	psect	text18
  5908  001E30                     __ptext18:
  5909                           	opt stack 0
  5910  001E30                     _I2C_Master_Start:
  5911                           	opt stack 24
  5912                           
  5913                           ;I2C.c: 23: I2C_Master_Wait();
  5914                           
  5915                           ;incstack = 0
  5916  001E30  ECE0  F00E         	call	_I2C_Master_Wait	;wreg free
  5917                           
  5918                           ;I2C.c: 24: SEN = 1;
  5919  001E34  80C5               	bsf	4037,0,c	;volatile
  5920  001E36  0012               	return		;funcret
  5921  001E38                     __end_of_I2C_Master_Start:
  5922                           	opt stack 0
  5923                           tblptru	equ	0xFF8
  5924                           tblptrh	equ	0xFF7
  5925                           tblptrl	equ	0xFF6
  5926                           tablat	equ	0xFF5
  5927                           prodh	equ	0xFF4
  5928                           prodl	equ	0xFF3
  5929                           intcon	equ	0xFF2
  5930                           intcon2	equ	0xFF1
  5931                           intcon3	equ	0xFF0
  5932                           postinc0	equ	0xFEE
  5933                           wreg	equ	0xFE8
  5934                           indf2	equ	0xFDF
  5935                           postinc2	equ	0xFDE
  5936                           postdec2	equ	0xFDD
  5937                           fsr2h	equ	0xFDA
  5938                           fsr2l	equ	0xFD9
  5939                           status	equ	0xFD8
  5940                           
  5941 ;; *************** function _I2C_Master_Read *****************
  5942 ;; Defined at:
  5943 ;;		line 45 in file "../I2C.c"
  5944 ;; Parameters:    Size  Location     Type
  5945 ;;  a               1    wreg     unsigned char 
  5946 ;; Auto vars:     Size  Location     Type
  5947 ;;  a               1   49[COMRAM] unsigned char 
  5948 ;;  temp            1   50[COMRAM] unsigned char 
  5949 ;; Return value:  Size  Location     Type
  5950 ;;                  1    wreg      unsigned char 
  5951 ;; Registers used:
  5952 ;;		wreg, status,2, status,0, cstack
  5953 ;; Tracked objects:
  5954 ;;		On entry : 0/0
  5955 ;;		On exit  : 0/0
  5956 ;;		Unchanged: 0/0
  5957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5958 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5959 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5960 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5961 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5962 ;;Total ram usage:        2 bytes
  5963 ;; Hardware stack levels used:    1
  5964 ;; Hardware stack levels required when called:    6
  5965 ;; This function calls:
  5966 ;;		_I2C_Master_Wait
  5967 ;; This function is called by:
  5968 ;;		_main
  5969 ;; This function uses a non-reentrant model
  5970 ;;
  5971                           
  5972                           	psect	text19
  5973  001CE4                     __ptext19:
  5974                           	opt stack 0
  5975  001CE4                     _I2C_Master_Read:
  5976                           	opt stack 24
  5977                           
  5978                           ;incstack = 0
  5979                           ;I2C_Master_Read@a stored from wreg
  5980  001CE4  6E32               	movwf	I2C_Master_Read@a,c
  5981                           
  5982                           ;I2C.c: 47: unsigned char temp;
  5983                           ;I2C.c: 48: I2C_Master_Wait();
  5984  001CE6  ECE0  F00E         	call	_I2C_Master_Wait	;wreg free
  5985                           
  5986                           ;I2C.c: 49: RCEN = 1;
  5987  001CEA  86C5               	bsf	4037,3,c	;volatile
  5988                           
  5989                           ;I2C.c: 50: I2C_Master_Wait();
  5990  001CEC  ECE0  F00E         	call	_I2C_Master_Wait	;wreg free
  5991                           
  5992                           ;I2C.c: 51: temp = SSPBUF;
  5993  001CF0  CFC9 F033          	movff	4041,I2C_Master_Read@temp	;volatile
  5994                           
  5995                           ;I2C.c: 52: I2C_Master_Wait();
  5996  001CF4  ECE0  F00E         	call	_I2C_Master_Wait	;wreg free
  5997                           
  5998                           ;I2C.c: 53: ACKDT = (a)?0:1;
  5999  001CF8  5032               	movf	I2C_Master_Read@a,w,c
  6000  001CFA  A4D8               	btfss	status,2,c
  6001  001CFC  D002               	goto	u3140
  6002  001CFE  8AC5               	bsf	4037,5,c	;volatile
  6003  001D00  D001               	goto	l3468
  6004  001D02                     u3140:
  6005  001D02  9AC5               	bcf	4037,5,c	;volatile
  6006  001D04                     l3468:
  6007                           
  6008                           ;I2C.c: 54: ACKEN = 1;
  6009  001D04  88C5               	bsf	4037,4,c	;volatile
  6010                           
  6011                           ;I2C.c: 55: return temp;
  6012  001D06  5033               	movf	I2C_Master_Read@temp,w,c
  6013  001D08  0012               	return	
  6014  001D0A                     __end_of_I2C_Master_Read:
  6015                           	opt stack 0
  6016                           tblptru	equ	0xFF8
  6017                           tblptrh	equ	0xFF7
  6018                           tblptrl	equ	0xFF6
  6019                           tablat	equ	0xFF5
  6020                           prodh	equ	0xFF4
  6021                           prodl	equ	0xFF3
  6022                           intcon	equ	0xFF2
  6023                           intcon2	equ	0xFF1
  6024                           intcon3	equ	0xFF0
  6025                           postinc0	equ	0xFEE
  6026                           wreg	equ	0xFE8
  6027                           indf2	equ	0xFDF
  6028                           postinc2	equ	0xFDE
  6029                           postdec2	equ	0xFDD
  6030                           fsr2h	equ	0xFDA
  6031                           fsr2l	equ	0xFD9
  6032                           status	equ	0xFD8
  6033                           
  6034 ;; *************** function _I2C_Master_Wait *****************
  6035 ;; Defined at:
  6036 ;;		line 16 in file "../I2C.c"
  6037 ;; Parameters:    Size  Location     Type
  6038 ;;		None
  6039 ;; Auto vars:     Size  Location     Type
  6040 ;;		None
  6041 ;; Return value:  Size  Location     Type
  6042 ;;                  1    wreg      void 
  6043 ;; Registers used:
  6044 ;;		wreg, status,2, status,0
  6045 ;; Tracked objects:
  6046 ;;		On entry : 0/0
  6047 ;;		On exit  : 0/0
  6048 ;;		Unchanged: 0/0
  6049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6050 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6051 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6052 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6053 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6054 ;;Total ram usage:        1 bytes
  6055 ;; Hardware stack levels used:    1
  6056 ;; Hardware stack levels required when called:    5
  6057 ;; This function calls:
  6058 ;;		Nothing
  6059 ;; This function is called by:
  6060 ;;		_I2C_Master_Start
  6061 ;;		_I2C_Master_Stop
  6062 ;;		_I2C_Master_Write
  6063 ;;		_I2C_Master_Read
  6064 ;; This function uses a non-reentrant model
  6065 ;;
  6066                           
  6067                           	psect	text20
  6068  001DC0                     __ptext20:
  6069                           	opt stack 0
  6070  001DC0                     _I2C_Master_Wait:
  6071                           	opt stack 24
  6072  001DC0                     l30:
  6073  001DC0  B4C7               	btfsc	4039,2,c	;volatile
  6074  001DC2  D7FE               	goto	l30
  6075  001DC4  CFC5 F031          	movff	4037,??_I2C_Master_Wait	;volatile
  6076  001DC8  0E1F               	movlw	31
  6077  001DCA  1631               	andwf	??_I2C_Master_Wait,f,c
  6078  001DCC  B4D8               	btfsc	status,2,c
  6079  001DCE  0012               	return	
  6080  001DD0  D7F7               	goto	l30
  6081  001DD2                     __end_of_I2C_Master_Wait:
  6082                           	opt stack 0
  6083                           tblptru	equ	0xFF8
  6084                           tblptrh	equ	0xFF7
  6085                           tblptrl	equ	0xFF6
  6086                           tablat	equ	0xFF5
  6087                           prodh	equ	0xFF4
  6088                           prodl	equ	0xFF3
  6089                           intcon	equ	0xFF2
  6090                           intcon2	equ	0xFF1
  6091                           intcon3	equ	0xFF0
  6092                           postinc0	equ	0xFEE
  6093                           wreg	equ	0xFE8
  6094                           indf2	equ	0xFDF
  6095                           postinc2	equ	0xFDE
  6096                           postdec2	equ	0xFDD
  6097                           fsr2h	equ	0xFDA
  6098                           fsr2l	equ	0xFD9
  6099                           status	equ	0xFD8
  6100                           
  6101 ;; *************** function _I2C_Master_Init *****************
  6102 ;; Defined at:
  6103 ;;		line 5 in file "../I2C.c"
  6104 ;; Parameters:    Size  Location     Type
  6105 ;;  c               4   61[COMRAM] const unsigned long 
  6106 ;; Auto vars:     Size  Location     Type
  6107 ;;		None
  6108 ;; Return value:  Size  Location     Type
  6109 ;;                  1    wreg      void 
  6110 ;; Registers used:
  6111 ;;		wreg, status,2, status,0, cstack
  6112 ;; Tracked objects:
  6113 ;;		On entry : 0/0
  6114 ;;		On exit  : 0/0
  6115 ;;		Unchanged: 0/0
  6116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6117 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6118 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6119 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6120 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6121 ;;Total ram usage:        8 bytes
  6122 ;; Hardware stack levels used:    1
  6123 ;; Hardware stack levels required when called:    6
  6124 ;; This function calls:
  6125 ;;		___lldiv
  6126 ;; This function is called by:
  6127 ;;		_main
  6128 ;; This function uses a non-reentrant model
  6129 ;;
  6130                           
  6131                           	psect	text21
  6132  001A22                     __ptext21:
  6133                           	opt stack 0
  6134  001A22                     _I2C_Master_Init:
  6135                           	opt stack 24
  6136                           
  6137                           ;I2C.c: 8: SSPSTAT = 0b00000000;
  6138                           
  6139                           ;incstack = 0
  6140  001A22  0E00               	movlw	0
  6141  001A24  6EC7               	movwf	4039,c	;volatile
  6142                           
  6143                           ;I2C.c: 9: SSPCON1 = 0b00101000;
  6144  001A26  0E28               	movlw	40
  6145  001A28  6EC6               	movwf	4038,c	;volatile
  6146                           
  6147                           ;I2C.c: 10: SSPCON2 = 0b00000000;
  6148  001A2A  0E00               	movlw	0
  6149  001A2C  6EC5               	movwf	4037,c	;volatile
  6150                           
  6151                           ;I2C.c: 11: SSPADD = (10000000/(4*c))-1;
  6152  001A2E  0E80               	movlw	128
  6153  001A30  6E31               	movwf	___lldiv@dividend,c
  6154  001A32  0E96               	movlw	150
  6155  001A34  6E32               	movwf	___lldiv@dividend+1,c
  6156  001A36  0E98               	movlw	152
  6157  001A38  6E33               	movwf	___lldiv@dividend+2,c
  6158  001A3A  0E00               	movlw	0
  6159  001A3C  6E34               	movwf	___lldiv@dividend+3,c
  6160  001A3E  C03E  F042         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  6161  001A42  C03F  F043         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  6162  001A46  C040  F044         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  6163  001A4A  C041  F045         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  6164  001A4E  0E02               	movlw	2
  6165  001A50                     u3135:
  6166  001A50  90D8               	bcf	status,0,c
  6167  001A52  3642               	rlcf	??_I2C_Master_Init,f,c
  6168  001A54  3643               	rlcf	??_I2C_Master_Init+1,f,c
  6169  001A56  3644               	rlcf	??_I2C_Master_Init+2,f,c
  6170  001A58  3645               	rlcf	??_I2C_Master_Init+3,f,c
  6171  001A5A  2EE8               	decfsz	wreg,f,c
  6172  001A5C  D7F9               	goto	u3135
  6173  001A5E  C042  F035         	movff	??_I2C_Master_Init,___lldiv@divisor
  6174  001A62  C043  F036         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  6175  001A66  C044  F037         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  6176  001A6A  C045  F038         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  6177  001A6E  EC60  F00C         	call	___lldiv	;wreg free
  6178  001A72  0431               	decf	?___lldiv,w,c
  6179  001A74  6EC8               	movwf	4040,c	;volatile
  6180                           
  6181                           ;I2C.c: 12: TRISC3 = 1;
  6182  001A76  8694               	bsf	3988,3,c	;volatile
  6183                           
  6184                           ;I2C.c: 13: TRISC4 = 1;
  6185  001A78  8894               	bsf	3988,4,c	;volatile
  6186  001A7A  0012               	return		;funcret
  6187  001A7C                     __end_of_I2C_Master_Init:
  6188                           	opt stack 0
  6189                           tblptru	equ	0xFF8
  6190                           tblptrh	equ	0xFF7
  6191                           tblptrl	equ	0xFF6
  6192                           tablat	equ	0xFF5
  6193                           prodh	equ	0xFF4
  6194                           prodl	equ	0xFF3
  6195                           intcon	equ	0xFF2
  6196                           intcon2	equ	0xFF1
  6197                           intcon3	equ	0xFF0
  6198                           postinc0	equ	0xFEE
  6199                           wreg	equ	0xFE8
  6200                           indf2	equ	0xFDF
  6201                           postinc2	equ	0xFDE
  6202                           postdec2	equ	0xFDD
  6203                           fsr2h	equ	0xFDA
  6204                           fsr2l	equ	0xFD9
  6205                           status	equ	0xFD8
  6206                           
  6207 ;; *************** function ___lldiv *****************
  6208 ;; Defined at:
  6209 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  6210 ;; Parameters:    Size  Location     Type
  6211 ;;  dividend        4   48[COMRAM] unsigned long 
  6212 ;;  divisor         4   52[COMRAM] unsigned long 
  6213 ;; Auto vars:     Size  Location     Type
  6214 ;;  quotient        4   56[COMRAM] unsigned long 
  6215 ;;  counter         1   60[COMRAM] unsigned char 
  6216 ;; Return value:  Size  Location     Type
  6217 ;;                  4   48[COMRAM] unsigned long 
  6218 ;; Registers used:
  6219 ;;		wreg, status,2, status,0
  6220 ;; Tracked objects:
  6221 ;;		On entry : 0/0
  6222 ;;		On exit  : 0/0
  6223 ;;		Unchanged: 0/0
  6224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6225 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6226 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6227 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6228 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6229 ;;Total ram usage:       13 bytes
  6230 ;; Hardware stack levels used:    1
  6231 ;; Hardware stack levels required when called:    5
  6232 ;; This function calls:
  6233 ;;		Nothing
  6234 ;; This function is called by:
  6235 ;;		_I2C_Master_Init
  6236 ;; This function uses a non-reentrant model
  6237 ;;
  6238                           
  6239                           	psect	text22
  6240  0018C0                     __ptext22:
  6241                           	opt stack 0
  6242  0018C0                     ___lldiv:
  6243                           	opt stack 24
  6244                           
  6245                           ;incstack = 0
  6246  0018C0  0E00               	movlw	0
  6247  0018C2  6E39               	movwf	___lldiv@quotient,c
  6248  0018C4  0E00               	movlw	0
  6249  0018C6  6E3A               	movwf	___lldiv@quotient+1,c
  6250  0018C8  0E00               	movlw	0
  6251  0018CA  6E3B               	movwf	___lldiv@quotient+2,c
  6252  0018CC  0E00               	movlw	0
  6253  0018CE  6E3C               	movwf	___lldiv@quotient+3,c
  6254  0018D0  5035               	movf	___lldiv@divisor,w,c
  6255  0018D2  1036               	iorwf	___lldiv@divisor+1,w,c
  6256  0018D4  1037               	iorwf	___lldiv@divisor+2,w,c
  6257  0018D6  1038               	iorwf	___lldiv@divisor+3,w,c
  6258  0018D8  B4D8               	btfsc	status,2,c
  6259  0018DA  D02A               	goto	l858
  6260  0018DC  0E01               	movlw	1
  6261  0018DE  6E3D               	movwf	___lldiv@counter,c
  6262  0018E0  D006               	goto	l3186
  6263  0018E2                     l3184:
  6264  0018E2  90D8               	bcf	status,0,c
  6265  0018E4  3635               	rlcf	___lldiv@divisor,f,c
  6266  0018E6  3636               	rlcf	___lldiv@divisor+1,f,c
  6267  0018E8  3637               	rlcf	___lldiv@divisor+2,f,c
  6268  0018EA  3638               	rlcf	___lldiv@divisor+3,f,c
  6269  0018EC  2A3D               	incf	___lldiv@counter,f,c
  6270  0018EE                     l3186:
  6271  0018EE  AE38               	btfss	___lldiv@divisor+3,7,c
  6272  0018F0  D7F8               	goto	l3184
  6273  0018F2                     l3188:
  6274  0018F2  90D8               	bcf	status,0,c
  6275  0018F4  3639               	rlcf	___lldiv@quotient,f,c
  6276  0018F6  363A               	rlcf	___lldiv@quotient+1,f,c
  6277  0018F8  363B               	rlcf	___lldiv@quotient+2,f,c
  6278  0018FA  363C               	rlcf	___lldiv@quotient+3,f,c
  6279  0018FC  5035               	movf	___lldiv@divisor,w,c
  6280  0018FE  5C31               	subwf	___lldiv@dividend,w,c
  6281  001900  5036               	movf	___lldiv@divisor+1,w,c
  6282  001902  5832               	subwfb	___lldiv@dividend+1,w,c
  6283  001904  5037               	movf	___lldiv@divisor+2,w,c
  6284  001906  5833               	subwfb	___lldiv@dividend+2,w,c
  6285  001908  5038               	movf	___lldiv@divisor+3,w,c
  6286  00190A  5834               	subwfb	___lldiv@dividend+3,w,c
  6287  00190C  A0D8               	btfss	status,0,c
  6288  00190E  D009               	goto	l3196
  6289  001910  5035               	movf	___lldiv@divisor,w,c
  6290  001912  5E31               	subwf	___lldiv@dividend,f,c
  6291  001914  5036               	movf	___lldiv@divisor+1,w,c
  6292  001916  5A32               	subwfb	___lldiv@dividend+1,f,c
  6293  001918  5037               	movf	___lldiv@divisor+2,w,c
  6294  00191A  5A33               	subwfb	___lldiv@dividend+2,f,c
  6295  00191C  5038               	movf	___lldiv@divisor+3,w,c
  6296  00191E  5A34               	subwfb	___lldiv@dividend+3,f,c
  6297  001920  8039               	bsf	___lldiv@quotient,0,c
  6298  001922                     l3196:
  6299  001922  90D8               	bcf	status,0,c
  6300  001924  3238               	rrcf	___lldiv@divisor+3,f,c
  6301  001926  3237               	rrcf	___lldiv@divisor+2,f,c
  6302  001928  3236               	rrcf	___lldiv@divisor+1,f,c
  6303  00192A  3235               	rrcf	___lldiv@divisor,f,c
  6304  00192C  2E3D               	decfsz	___lldiv@counter,f,c
  6305  00192E  D7E1               	goto	l3188
  6306  001930                     l858:
  6307  001930  C039  F031         	movff	___lldiv@quotient,?___lldiv
  6308  001934  C03A  F032         	movff	___lldiv@quotient+1,?___lldiv+1
  6309  001938  C03B  F033         	movff	___lldiv@quotient+2,?___lldiv+2
  6310  00193C  C03C  F034         	movff	___lldiv@quotient+3,?___lldiv+3
  6311  001940  0012               	return		;funcret
  6312  001942                     __end_of___lldiv:
  6313                           	opt stack 0
  6314                           tblptru	equ	0xFF8
  6315                           tblptrh	equ	0xFF7
  6316                           tblptrl	equ	0xFF6
  6317                           tablat	equ	0xFF5
  6318                           prodh	equ	0xFF4
  6319                           prodl	equ	0xFF3
  6320                           intcon	equ	0xFF2
  6321                           intcon2	equ	0xFF1
  6322                           intcon3	equ	0xFF0
  6323                           postinc0	equ	0xFEE
  6324                           wreg	equ	0xFE8
  6325                           indf2	equ	0xFDF
  6326                           postinc2	equ	0xFDE
  6327                           postdec2	equ	0xFDD
  6328                           fsr2h	equ	0xFDA
  6329                           fsr2l	equ	0xFD9
  6330                           status	equ	0xFD8
  6331                           
  6332 ;; *************** function _ISR *****************
  6333 ;; Defined at:
  6334 ;;		line 570 in file "../main.c"
  6335 ;; Parameters:    Size  Location     Type
  6336 ;;		None
  6337 ;; Auto vars:     Size  Location     Type
  6338 ;;  keypress        1   47[COMRAM] unsigned char 
  6339 ;; Return value:  Size  Location     Type
  6340 ;;                  1    wreg      void 
  6341 ;; Registers used:
  6342 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6343 ;; Tracked objects:
  6344 ;;		On entry : 0/0
  6345 ;;		On exit  : 0/0
  6346 ;;		Unchanged: 0/0
  6347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6348 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6349 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6350 ;;      Temps:         15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6351 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6352 ;;Total ram usage:       16 bytes
  6353 ;; Hardware stack levels used:    1
  6354 ;; Hardware stack levels required when called:    4
  6355 ;; This function calls:
  6356 ;;		_keypressed
  6357 ;;		i2___awdiv
  6358 ;;		i2___awmod
  6359 ;;		i2_stopOperation
  6360 ;; This function is called by:
  6361 ;;		Interrupt level 2
  6362 ;; This function uses a non-reentrant model
  6363 ;;
  6364                           
  6365                           	psect	intcode
  6366  000008                     __pintcode:
  6367                           	opt stack 0
  6368  000008                     _ISR:
  6369                           	opt stack 22
  6370                           
  6371                           ;incstack = 0
  6372  000008  824F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6373  00000A  EDCE  F007         	call	int_func,f	;refresh shadow registers
  6374                           tblptru	equ	0xFF8
  6375                           tblptrh	equ	0xFF7
  6376                           tblptrl	equ	0xFF6
  6377                           tablat	equ	0xFF5
  6378                           prodh	equ	0xFF4
  6379                           prodl	equ	0xFF3
  6380                           intcon	equ	0xFF2
  6381                           intcon2	equ	0xFF1
  6382                           intcon3	equ	0xFF0
  6383                           postinc0	equ	0xFEE
  6384                           wreg	equ	0xFE8
  6385                           indf2	equ	0xFDF
  6386                           postinc2	equ	0xFDE
  6387                           postdec2	equ	0xFDD
  6388                           fsr2h	equ	0xFDA
  6389                           fsr2l	equ	0xFD9
  6390                           status	equ	0xFD8
  6391                           
  6392                           	psect	intcode_body
  6393  000F9C                     __pintcode_body:
  6394                           	opt stack 22
  6395  000F9C                     int_func:
  6396                           	opt stack 22
  6397  000F9C  0006               	pop		; remove dummy address from shadow register refresh
  6398  000F9E  CFFA F022          	movff	pclath,??_ISR+1
  6399  000FA2  CFFB F023          	movff	pclatu,??_ISR+2
  6400  000FA6  CFE9 F024          	movff	fsr0l,??_ISR+3
  6401  000FAA  CFEA F025          	movff	fsr0h,??_ISR+4
  6402  000FAE  CFE1 F026          	movff	fsr1l,??_ISR+5
  6403  000FB2  CFE2 F027          	movff	fsr1h,??_ISR+6
  6404  000FB6  CFD9 F028          	movff	fsr2l,??_ISR+7
  6405  000FBA  CFDA F029          	movff	fsr2h,??_ISR+8
  6406  000FBE  CFF3 F02A          	movff	prodl,??_ISR+9
  6407  000FC2  CFF4 F02B          	movff	prodh,??_ISR+10
  6408  000FC6  CFF6 F02C          	movff	tblptrl,??_ISR+11
  6409  000FCA  CFF7 F02D          	movff	tblptrh,??_ISR+12
  6410  000FCE  CFF8 F02E          	movff	tblptru,??_ISR+13
  6411  000FD2  CFF5 F02F          	movff	tablat,??_ISR+14
  6412                           
  6413                           ;main.c: 571: if (INT1IF){
  6414  000FD6  A0F0               	btfss	intcon3,0,c	;volatile
  6415  000FD8  D015               	goto	i2l4152
  6416                           
  6417                           ;main.c: 572: unsigned char keypress = (PORTB & 0xF0) >> 4;
  6418  000FDA  3881               	swapf	3969,w,c	;volatile
  6419  000FDC  0B0F               	andlw	15
  6420  000FDE  0B0F               	andlw	15
  6421  000FE0  6E30               	movwf	ISR@keypress,c
  6422                           
  6423                           ;main.c: 573: keypressed('4', '6', keys[keypress]);
  6424  000FE2  0E36               	movlw	54
  6425  000FE4  6E1D               	movwf	keypressed@right,c
  6426  000FE6  5030               	movf	ISR@keypress,w,c
  6427  000FE8  0D01               	mullw	1
  6428  000FEA  0E1F               	movlw	low _keys
  6429  000FEC  24F3               	addwf	prodl,w,c
  6430  000FEE  6EF6               	movwf	tblptrl,c
  6431  000FF0  0EFE               	movlw	high _keys
  6432  000FF2  20F4               	addwfc	prodh,w,c
  6433  000FF4  6EF7               	movwf	tblptrh,c
  6434  000FF6                     	if	0	;There are less than 3 active tblptr bytes
  6435  000FF6                     	endif
  6436  000FF6  0008               	tblrd		*
  6437  000FF8  CFF5 F01E          	movff	tablat,keypressed@key
  6438  000FFC  0E34               	movlw	52
  6439  000FFE  ECCE  F00A         	call	_keypressed
  6440                           
  6441                           ;main.c: 574: INT1IF = 0;
  6442  001002  90F0               	bcf	intcon3,0,c	;volatile
  6443  001004                     i2l4152:
  6444                           
  6445                           ;main.c: 575: }
  6446                           ;main.c: 576: if (screenMode == 1 && TMR0IF){
  6447  001004  0100               	movlb	0	; () banked
  6448  001006  05CC               	decf	_screenMode& (0+255),w,b
  6449  001008  B4D8               	btfsc	status,2,c
  6450                           
  6451                           ; BSR set to: 0
  6452  00100A  A4F2               	btfss	intcon,2,c	;volatile
  6453  00100C  D038               	goto	i2l4184
  6454                           
  6455                           ; BSR set to: 0
  6456                           ;main.c: 577: TMR0IF = 0;
  6457  00100E  94F2               	bcf	intcon,2,c	;volatile
  6458                           
  6459                           ; BSR set to: 0
  6460                           ;main.c: 578: TMR0 = 55770;
  6461  001010  0ED9               	movlw	217
  6462  001012  6ED7               	movwf	4055,c	;volatile
  6463  001014  0EDA               	movlw	218
  6464  001016  6ED6               	movwf	4054,c	;volatile
  6465                           
  6466                           ; BSR set to: 0
  6467                           ;main.c: 579: opTimer++;
  6468  001018  2A4A               	incf	_opTimer,f,c
  6469                           
  6470                           ; BSR set to: 0
  6471                           ;main.c: 580: min = opTimer / 60;
  6472  00101A  C04A  F001         	movff	_opTimer,i2___awdiv@dividend
  6473  00101E  6A02               	clrf	i2___awdiv@dividend+1,c
  6474  001020  0E00               	movlw	0
  6475  001022  6E04               	movwf	i2___awdiv@divisor+1,c
  6476  001024  0E3C               	movlw	60
  6477  001026  6E03               	movwf	i2___awdiv@divisor,c
  6478  001028  EC1E  F00C         	call	i2___awdiv	;wreg free
  6479  00102C  5001               	movf	?i2___awdiv,w,c
  6480  00102E  0100               	movlb	0	; () banked
  6481  001030  6FA3               	movwf	_min& (0+255),b
  6482                           
  6483                           ; BSR set to: 0
  6484                           ;main.c: 581: sec = opTimer % 60;
  6485  001032  C04A  F001         	movff	_opTimer,i2___awmod@dividend
  6486  001036  6A02               	clrf	i2___awmod@dividend+1,c
  6487  001038  0E00               	movlw	0
  6488  00103A  6E04               	movwf	i2___awmod@divisor+1,c
  6489  00103C  0E3C               	movlw	60
  6490  00103E  6E03               	movwf	i2___awmod@divisor,c
  6491  001040  ECD9  F00C         	call	i2___awmod	;wreg free
  6492  001044  5001               	movf	?i2___awmod,w,c
  6493  001046  0100               	movlb	0	; () banked
  6494  001048  6FA9               	movwf	_sec& (0+255),b
  6495                           
  6496                           ; BSR set to: 0
  6497                           ;main.c: 585: if (opTimer >= 180)
  6498  00104A  0EB3               	movlw	179
  6499  00104C  644A               	cpfsgt	_opTimer,c
  6500  00104E  D002               	goto	i2l4170
  6501                           
  6502                           ; BSR set to: 0
  6503                           ;main.c: 586: stopOperation();
  6504  001050  EC55  F00B         	call	i2_stopOperation	;wreg free
  6505  001054                     i2l4170:
  6506                           
  6507                           ;main.c: 588: if (!sorting){
  6508  001054  504C               	movf	_sorting,w,c
  6509  001056  A4D8               	btfss	status,2,c
  6510  001058  D010               	goto	i2l4182
  6511                           
  6512                           ;main.c: 589: if (ADRES > 50)
  6513  00105A  50C4               	movf	4036,w,c	;volatile
  6514  00105C  E104               	bnz	i2u401_40
  6515  00105E  0E33               	movlw	51
  6516  001060  5CC3               	subwf	4035,w,c	;volatile
  6517  001062  A0D8               	btfss	status,0,c
  6518  001064  D002               	goto	i2l4176
  6519  001066                     i2u401_40:
  6520                           
  6521                           ;main.c: 590: doneTimer++;
  6522  001066  2A49               	incf	_doneTimer,f,c
  6523  001068  D002               	goto	i2l4178
  6524  00106A                     i2l4176:
  6525                           
  6526                           ;main.c: 591: else
  6527                           ;main.c: 592: doneTimer = 0;
  6528  00106A  0E00               	movlw	0
  6529  00106C  6E49               	movwf	_doneTimer,c
  6530  00106E                     i2l4178:
  6531                           
  6532                           ;main.c: 593: if (doneTimer >= 10)
  6533  00106E  0E09               	movlw	9
  6534  001070  6449               	cpfsgt	_doneTimer,c
  6535  001072  D005               	goto	i2l4184
  6536                           
  6537                           ;main.c: 594: stopOperation();
  6538  001074  EC55  F00B         	call	i2_stopOperation	;wreg free
  6539                           
  6540                           ;main.c: 596: }
  6541  001078  D002               	goto	i2l4184
  6542  00107A                     i2l4182:
  6543                           
  6544                           ;main.c: 597: else
  6545                           ;main.c: 598: doneTimer = 0;
  6546  00107A  0E00               	movlw	0
  6547  00107C  6E49               	movwf	_doneTimer,c
  6548  00107E                     i2l4184:
  6549                           
  6550                           ;main.c: 599: }
  6551                           ;main.c: 600: if (screenMode == 1 && TMR1IF){
  6552  00107E  0100               	movlb	0	; () banked
  6553  001080  05CC               	decf	_screenMode& (0+255),w,b
  6554  001082  B4D8               	btfsc	status,2,c
  6555                           
  6556                           ; BSR set to: 0
  6557  001084  A09E               	btfss	3998,0,c	;volatile
  6558  001086  D0BD               	goto	i2l434
  6559                           
  6560                           ; BSR set to: 0
  6561                           ;main.c: 601: TMR1IF = 0;
  6562  001088  909E               	bcf	3998,0,c	;volatile
  6563                           
  6564                           ; BSR set to: 0
  6565                           ;main.c: 602: TMR1 = 60535;
  6566  00108A  0EEC               	movlw	236
  6567  00108C  6ECF               	movwf	4047,c	;volatile
  6568  00108E  0E77               	movlw	119
  6569  001090  6ECE               	movwf	4046,c	;volatile
  6570                           
  6571                           ; BSR set to: 0
  6572                           ;main.c: 603: if (count_2ms)
  6573  001092  5047               	movf	_count_2ms,w,c
  6574  001094  1048               	iorwf	_count_2ms+1,w,c
  6575  001096  B4D8               	btfsc	status,2,c
  6576  001098  D003               	goto	i2l404
  6577                           
  6578                           ; BSR set to: 0
  6579                           ;main.c: 604: count_2ms--;
  6580  00109A  0647               	decf	_count_2ms,f,c
  6581  00109C  A0D8               	btfss	status,0,c
  6582  00109E  0648               	decf	_count_2ms+1,f,c
  6583  0010A0                     i2l404:
  6584                           
  6585                           ; BSR set to: 0
  6586                           ;main.c: 605: solOnTimer++;
  6587  0010A0  2A4B               	incf	_solOnTimer,f,c
  6588                           
  6589                           ; BSR set to: 0
  6590                           ;main.c: 606: if (solOnTimer >= 150){
  6591  0010A2  0E95               	movlw	149
  6592  0010A4  644B               	cpfsgt	_solOnTimer,c
  6593  0010A6  D00D               	goto	i2l4202
  6594                           
  6595                           ; BSR set to: 0
  6596                           ;main.c: 607: solOnTimer = 0;
  6597  0010A8  0E00               	movlw	0
  6598  0010AA  6E4B               	movwf	_solOnTimer,c
  6599                           
  6600                           ; BSR set to: 0
  6601                           ;main.c: 608: LATBbits.LB0 = !LATBbits.LB0;;
  6602  0010AC  B08A               	btfsc	3978,0,c	;volatile
  6603  0010AE  D003               	goto	i2u407_40
  6604  0010B0  6A21               	clrf	??_ISR& (0+255),c
  6605  0010B2  2A21               	incf	??_ISR& (0+255),f,c
  6606  0010B4  D001               	goto	i2u408_48
  6607  0010B6                     i2u407_40:
  6608  0010B6  6A21               	clrf	??_ISR& (0+255),c
  6609  0010B8                     i2u408_48:
  6610  0010B8  508A               	movf	3978,w,c	;volatile
  6611  0010BA  1821               	xorwf	??_ISR,w,c
  6612  0010BC  0BFE               	andlw	-2
  6613  0010BE  1821               	xorwf	??_ISR,w,c
  6614  0010C0  6E8A               	movwf	3978,c	;volatile
  6615  0010C2                     i2l4202:
  6616                           
  6617                           ;main.c: 609: }
  6618                           ;main.c: 610: if (plat1Left){
  6619  0010C2  0100               	movlb	0	; () banked
  6620  0010C4  518E               	movf	_plat1Left& (0+255),w,b
  6621  0010C6  0100               	movlb	0	; () banked
  6622  0010C8  118F               	iorwf	(_plat1Left+1)& (0+255),w,b
  6623  0010CA  B4D8               	btfsc	status,2,c
  6624  0010CC  D022               	goto	i2l4228
  6625                           
  6626                           ; BSR set to: 0
  6627                           ;main.c: 611: if (step1 == 1){
  6628  0010CE  044D               	decf	_step1,w,c
  6629  0010D0  A4D8               	btfss	status,2,c
  6630  0010D2  D002               	goto	i2l4208
  6631                           
  6632                           ; BSR set to: 0
  6633                           ;main.c: 612: LATCbits.LC5 = 1;;
  6634  0010D4  8A8B               	bsf	3979,5,c	;volatile
  6635                           
  6636                           ;main.c: 613: LATCbits.LC6 = 0;;
  6637  0010D6  9C8B               	bcf	3979,6,c	;volatile
  6638  0010D8                     i2l4208:
  6639                           
  6640                           ; BSR set to: 0
  6641                           ;main.c: 614: }
  6642                           ;main.c: 615: if (step1 == 2){
  6643  0010D8  0E02               	movlw	2
  6644  0010DA  184D               	xorwf	_step1,w,c
  6645  0010DC  A4D8               	btfss	status,2,c
  6646  0010DE  D002               	goto	i2l4212
  6647                           
  6648                           ; BSR set to: 0
  6649                           ;main.c: 616: LATCbits.LC1 = 0;;
  6650  0010E0  928B               	bcf	3979,1,c	;volatile
  6651                           
  6652                           ;main.c: 617: LATCbits.LC2 = 1;;
  6653  0010E2  848B               	bsf	3979,2,c	;volatile
  6654  0010E4                     i2l4212:
  6655                           
  6656                           ; BSR set to: 0
  6657                           ;main.c: 618: }
  6658                           ;main.c: 619: if (step1 == 3){
  6659  0010E4  0E03               	movlw	3
  6660  0010E6  184D               	xorwf	_step1,w,c
  6661  0010E8  A4D8               	btfss	status,2,c
  6662  0010EA  D002               	goto	i2l4216
  6663                           
  6664                           ; BSR set to: 0
  6665                           ;main.c: 620: LATCbits.LC5 = 0;;
  6666  0010EC  9A8B               	bcf	3979,5,c	;volatile
  6667                           
  6668                           ;main.c: 621: LATCbits.LC6 = 1;;
  6669  0010EE  8C8B               	bsf	3979,6,c	;volatile
  6670  0010F0                     i2l4216:
  6671                           
  6672                           ; BSR set to: 0
  6673                           ;main.c: 622: }
  6674                           ;main.c: 623: if (step1 == 4){
  6675  0010F0  0E04               	movlw	4
  6676  0010F2  184D               	xorwf	_step1,w,c
  6677  0010F4  A4D8               	btfss	status,2,c
  6678  0010F6  D002               	goto	i2l4220
  6679                           
  6680                           ; BSR set to: 0
  6681                           ;main.c: 624: LATCbits.LC1 = 1;;
  6682  0010F8  828B               	bsf	3979,1,c	;volatile
  6683                           
  6684                           ;main.c: 625: LATCbits.LC2 = 0;;
  6685  0010FA  948B               	bcf	3979,2,c	;volatile
  6686  0010FC                     i2l4220:
  6687                           
  6688                           ; BSR set to: 0
  6689                           ;main.c: 626: }
  6690                           ;main.c: 627: plat1Left--;
  6691  0010FC  0100               	movlb	0	; () banked
  6692  0010FE  078E               	decf	_plat1Left& (0+255),f,b
  6693  001100  A0D8               	btfss	status,0,c
  6694  001102  078F               	decf	(_plat1Left+1)& (0+255),f,b
  6695                           
  6696                           ; BSR set to: 0
  6697                           ;main.c: 628: if (step1>=4)
  6698  001104  0E03               	movlw	3
  6699  001106  644D               	cpfsgt	_step1,c
  6700  001108  D003               	goto	i2l4226
  6701                           
  6702                           ; BSR set to: 0
  6703                           ;main.c: 629: step1 = 1;
  6704  00110A  0E01               	movlw	1
  6705  00110C  6E4D               	movwf	_step1,c
  6706  00110E  D001               	goto	i2l4228
  6707  001110                     i2l4226:
  6708                           
  6709                           ; BSR set to: 0
  6710                           ;main.c: 630: else
  6711                           ;main.c: 631: step1++;
  6712  001110  2A4D               	incf	_step1,f,c
  6713  001112                     i2l4228:
  6714                           
  6715                           ; BSR set to: 0
  6716                           ;main.c: 632: }
  6717                           ;main.c: 633: if (plat1Right){
  6718  001112  0100               	movlb	0	; () banked
  6719  001114  5190               	movf	_plat1Right& (0+255),w,b
  6720  001116  0100               	movlb	0	; () banked
  6721  001118  1191               	iorwf	(_plat1Right+1)& (0+255),w,b
  6722  00111A  B4D8               	btfsc	status,2,c
  6723  00111C  D022               	goto	i2l4254
  6724                           
  6725                           ; BSR set to: 0
  6726                           ;main.c: 634: if (step1 == 4){
  6727  00111E  0E04               	movlw	4
  6728  001120  184D               	xorwf	_step1,w,c
  6729  001122  A4D8               	btfss	status,2,c
  6730  001124  D002               	goto	i2l4234
  6731                           
  6732                           ; BSR set to: 0
  6733                           ;main.c: 635: LATCbits.LC5 = 0;;
  6734  001126  9A8B               	bcf	3979,5,c	;volatile
  6735                           
  6736                           ;main.c: 636: LATCbits.LC6 = 1;;
  6737  001128  8C8B               	bsf	3979,6,c	;volatile
  6738  00112A                     i2l4234:
  6739                           
  6740                           ; BSR set to: 0
  6741                           ;main.c: 637: }
  6742                           ;main.c: 638: if (step1 == 3){
  6743  00112A  0E03               	movlw	3
  6744  00112C  184D               	xorwf	_step1,w,c
  6745  00112E  A4D8               	btfss	status,2,c
  6746  001130  D002               	goto	i2l4238
  6747                           
  6748                           ; BSR set to: 0
  6749                           ;main.c: 639: LATCbits.LC1 = 0;;
  6750  001132  928B               	bcf	3979,1,c	;volatile
  6751                           
  6752                           ;main.c: 640: LATCbits.LC2 = 1;;
  6753  001134  848B               	bsf	3979,2,c	;volatile
  6754  001136                     i2l4238:
  6755                           
  6756                           ; BSR set to: 0
  6757                           ;main.c: 641: }
  6758                           ;main.c: 642: if (step1 == 2){
  6759  001136  0E02               	movlw	2
  6760  001138  184D               	xorwf	_step1,w,c
  6761  00113A  A4D8               	btfss	status,2,c
  6762  00113C  D002               	goto	i2l4242
  6763                           
  6764                           ; BSR set to: 0
  6765                           ;main.c: 643: LATCbits.LC5 = 1;;
  6766  00113E  8A8B               	bsf	3979,5,c	;volatile
  6767                           
  6768                           ;main.c: 644: LATCbits.LC6 = 0;;
  6769  001140  9C8B               	bcf	3979,6,c	;volatile
  6770  001142                     i2l4242:
  6771                           
  6772                           ; BSR set to: 0
  6773                           ;main.c: 645: }
  6774                           ;main.c: 646: if (step1 == 1){
  6775  001142  044D               	decf	_step1,w,c
  6776  001144  A4D8               	btfss	status,2,c
  6777  001146  D002               	goto	i2l4246
  6778                           
  6779                           ; BSR set to: 0
  6780                           ;main.c: 647: LATCbits.LC1 = 1;;
  6781  001148  828B               	bsf	3979,1,c	;volatile
  6782                           
  6783                           ;main.c: 648: LATCbits.LC2 = 0;;
  6784  00114A  948B               	bcf	3979,2,c	;volatile
  6785  00114C                     i2l4246:
  6786                           
  6787                           ; BSR set to: 0
  6788                           ;main.c: 649: }
  6789                           ;main.c: 650: plat1Right--;
  6790  00114C  0100               	movlb	0	; () banked
  6791  00114E  0790               	decf	_plat1Right& (0+255),f,b
  6792  001150  A0D8               	btfss	status,0,c
  6793  001152  0791               	decf	(_plat1Right+1)& (0+255),f,b
  6794                           
  6795                           ; BSR set to: 0
  6796                           ;main.c: 651: if (step1<=1)
  6797  001154  0E02               	movlw	2
  6798  001156  604D               	cpfslt	_step1,c
  6799  001158  D003               	goto	i2l4252
  6800                           
  6801                           ; BSR set to: 0
  6802                           ;main.c: 652: step1 = 4;
  6803  00115A  0E04               	movlw	4
  6804  00115C  6E4D               	movwf	_step1,c
  6805  00115E  D001               	goto	i2l4254
  6806  001160                     i2l4252:
  6807                           
  6808                           ; BSR set to: 0
  6809                           ;main.c: 653: else
  6810                           ;main.c: 654: step1--;
  6811  001160  064D               	decf	_step1,f,c
  6812  001162                     i2l4254:
  6813                           
  6814                           ; BSR set to: 0
  6815                           ;main.c: 655: }
  6816                           ;main.c: 656: if (plat2Left){
  6817  001162  0100               	movlb	0	; () banked
  6818  001164  5192               	movf	_plat2Left& (0+255),w,b
  6819  001166  0100               	movlb	0	; () banked
  6820  001168  1193               	iorwf	(_plat2Left+1)& (0+255),w,b
  6821  00116A  B4D8               	btfsc	status,2,c
  6822  00116C  D022               	goto	i2l4280
  6823                           
  6824                           ; BSR set to: 0
  6825                           ;main.c: 657: if (step2 == 1){
  6826  00116E  044E               	decf	_step2,w,c
  6827  001170  A4D8               	btfss	status,2,c
  6828  001172  D002               	goto	i2l4260
  6829                           
  6830                           ; BSR set to: 0
  6831                           ;main.c: 658: LATAbits.LA4 = 1;;
  6832  001174  8889               	bsf	3977,4,c	;volatile
  6833                           
  6834                           ;main.c: 659: LATEbits.LE1 = 0;;
  6835  001176  928D               	bcf	3981,1,c	;volatile
  6836  001178                     i2l4260:
  6837                           
  6838                           ; BSR set to: 0
  6839                           ;main.c: 660: }
  6840                           ;main.c: 661: if (step2 == 2){
  6841  001178  0E02               	movlw	2
  6842  00117A  184E               	xorwf	_step2,w,c
  6843  00117C  A4D8               	btfss	status,2,c
  6844  00117E  D002               	goto	i2l4264
  6845                           
  6846                           ; BSR set to: 0
  6847                           ;main.c: 662: LATCbits.LC0 = 0;;
  6848  001180  908B               	bcf	3979,0,c	;volatile
  6849                           
  6850                           ;main.c: 663: LATEbits.LE2 = 1;;
  6851  001182  848D               	bsf	3981,2,c	;volatile
  6852  001184                     i2l4264:
  6853                           
  6854                           ; BSR set to: 0
  6855                           ;main.c: 664: }
  6856                           ;main.c: 665: if (step2 == 3){
  6857  001184  0E03               	movlw	3
  6858  001186  184E               	xorwf	_step2,w,c
  6859  001188  A4D8               	btfss	status,2,c
  6860  00118A  D002               	goto	i2l4268
  6861                           
  6862                           ; BSR set to: 0
  6863                           ;main.c: 666: LATAbits.LA4 = 0;;
  6864  00118C  9889               	bcf	3977,4,c	;volatile
  6865                           
  6866                           ;main.c: 667: LATEbits.LE1 = 1;;
  6867  00118E  828D               	bsf	3981,1,c	;volatile
  6868  001190                     i2l4268:
  6869                           
  6870                           ; BSR set to: 0
  6871                           ;main.c: 668: }
  6872                           ;main.c: 669: if (step2 == 4){
  6873  001190  0E04               	movlw	4
  6874  001192  184E               	xorwf	_step2,w,c
  6875  001194  A4D8               	btfss	status,2,c
  6876  001196  D002               	goto	i2l4272
  6877                           
  6878                           ; BSR set to: 0
  6879                           ;main.c: 670: LATCbits.LC0 = 1;;
  6880  001198  808B               	bsf	3979,0,c	;volatile
  6881                           
  6882                           ;main.c: 671: LATEbits.LE2 = 0;;
  6883  00119A  948D               	bcf	3981,2,c	;volatile
  6884  00119C                     i2l4272:
  6885                           
  6886                           ; BSR set to: 0
  6887                           ;main.c: 672: }
  6888                           ;main.c: 673: plat2Left--;
  6889  00119C  0100               	movlb	0	; () banked
  6890  00119E  0792               	decf	_plat2Left& (0+255),f,b
  6891  0011A0  A0D8               	btfss	status,0,c
  6892  0011A2  0793               	decf	(_plat2Left+1)& (0+255),f,b
  6893                           
  6894                           ; BSR set to: 0
  6895                           ;main.c: 674: if (step2>=4)
  6896  0011A4  0E03               	movlw	3
  6897  0011A6  644E               	cpfsgt	_step2,c
  6898  0011A8  D003               	goto	i2l4278
  6899                           
  6900                           ; BSR set to: 0
  6901                           ;main.c: 675: step2 = 1;
  6902  0011AA  0E01               	movlw	1
  6903  0011AC  6E4E               	movwf	_step2,c
  6904  0011AE  D001               	goto	i2l4280
  6905  0011B0                     i2l4278:
  6906                           
  6907                           ; BSR set to: 0
  6908                           ;main.c: 676: else
  6909                           ;main.c: 677: step2++;
  6910  0011B0  2A4E               	incf	_step2,f,c
  6911  0011B2                     i2l4280:
  6912                           
  6913                           ; BSR set to: 0
  6914                           ;main.c: 678: }
  6915                           ;main.c: 679: if (plat2Right){
  6916  0011B2  0100               	movlb	0	; () banked
  6917  0011B4  5194               	movf	_plat2Right& (0+255),w,b
  6918  0011B6  0100               	movlb	0	; () banked
  6919  0011B8  1195               	iorwf	(_plat2Right+1)& (0+255),w,b
  6920  0011BA  B4D8               	btfsc	status,2,c
  6921  0011BC  D022               	goto	i2l434
  6922                           
  6923                           ; BSR set to: 0
  6924                           ;main.c: 680: if (step2 == 4){
  6925  0011BE  0E04               	movlw	4
  6926  0011C0  184E               	xorwf	_step2,w,c
  6927  0011C2  A4D8               	btfss	status,2,c
  6928  0011C4  D002               	goto	i2l4286
  6929                           
  6930                           ; BSR set to: 0
  6931                           ;main.c: 681: LATAbits.LA4 = 0;;
  6932  0011C6  9889               	bcf	3977,4,c	;volatile
  6933                           
  6934                           ;main.c: 682: LATEbits.LE1 = 1;;
  6935  0011C8  828D               	bsf	3981,1,c	;volatile
  6936  0011CA                     i2l4286:
  6937                           
  6938                           ; BSR set to: 0
  6939                           ;main.c: 683: }
  6940                           ;main.c: 684: if (step2 == 3){
  6941  0011CA  0E03               	movlw	3
  6942  0011CC  184E               	xorwf	_step2,w,c
  6943  0011CE  A4D8               	btfss	status,2,c
  6944  0011D0  D002               	goto	i2l4290
  6945                           
  6946                           ; BSR set to: 0
  6947                           ;main.c: 685: LATCbits.LC0 = 0;;
  6948  0011D2  908B               	bcf	3979,0,c	;volatile
  6949                           
  6950                           ;main.c: 686: LATEbits.LE2 = 1;;
  6951  0011D4  848D               	bsf	3981,2,c	;volatile
  6952  0011D6                     i2l4290:
  6953                           
  6954                           ; BSR set to: 0
  6955                           ;main.c: 687: }
  6956                           ;main.c: 688: if (step2 == 2){
  6957  0011D6  0E02               	movlw	2
  6958  0011D8  184E               	xorwf	_step2,w,c
  6959  0011DA  A4D8               	btfss	status,2,c
  6960  0011DC  D002               	goto	i2l4294
  6961                           
  6962                           ; BSR set to: 0
  6963                           ;main.c: 689: LATAbits.LA4 = 1;;
  6964  0011DE  8889               	bsf	3977,4,c	;volatile
  6965                           
  6966                           ;main.c: 690: LATEbits.LE1 = 0;;
  6967  0011E0  928D               	bcf	3981,1,c	;volatile
  6968  0011E2                     i2l4294:
  6969                           
  6970                           ; BSR set to: 0
  6971                           ;main.c: 691: }
  6972                           ;main.c: 692: if (step2 == 1){
  6973  0011E2  044E               	decf	_step2,w,c
  6974  0011E4  A4D8               	btfss	status,2,c
  6975  0011E6  D002               	goto	i2l4298
  6976                           
  6977                           ; BSR set to: 0
  6978                           ;main.c: 693: LATCbits.LC0 = 1;;
  6979  0011E8  808B               	bsf	3979,0,c	;volatile
  6980                           
  6981                           ;main.c: 694: LATEbits.LE2 = 0;;
  6982  0011EA  948D               	bcf	3981,2,c	;volatile
  6983  0011EC                     i2l4298:
  6984                           
  6985                           ; BSR set to: 0
  6986                           ;main.c: 695: }
  6987                           ;main.c: 696: plat2Right--;
  6988  0011EC  0100               	movlb	0	; () banked
  6989  0011EE  0794               	decf	_plat2Right& (0+255),f,b
  6990  0011F0  A0D8               	btfss	status,0,c
  6991  0011F2  0795               	decf	(_plat2Right+1)& (0+255),f,b
  6992                           
  6993                           ; BSR set to: 0
  6994                           ;main.c: 697: if (step2<=1)
  6995  0011F4  0E02               	movlw	2
  6996  0011F6  604E               	cpfslt	_step2,c
  6997  0011F8  D003               	goto	i2l4304
  6998                           
  6999                           ; BSR set to: 0
  7000                           ;main.c: 698: step2 = 4;
  7001  0011FA  0E04               	movlw	4
  7002  0011FC  6E4E               	movwf	_step2,c
  7003  0011FE  D001               	goto	i2l434
  7004  001200                     i2l4304:
  7005                           
  7006                           ; BSR set to: 0
  7007                           ;main.c: 699: else
  7008                           ;main.c: 700: step2--;
  7009  001200  064E               	decf	_step2,f,c
  7010  001202                     i2l434:
  7011                           
  7012                           ; BSR set to: 0
  7013  001202  C02F  FFF5         	movff	??_ISR+14,tablat
  7014  001206  C02E  FFF8         	movff	??_ISR+13,tblptru
  7015  00120A  C02D  FFF7         	movff	??_ISR+12,tblptrh
  7016  00120E  C02C  FFF6         	movff	??_ISR+11,tblptrl
  7017  001212  C02B  FFF4         	movff	??_ISR+10,prodh
  7018  001216  C02A  FFF3         	movff	??_ISR+9,prodl
  7019  00121A  C029  FFDA         	movff	??_ISR+8,fsr2h
  7020  00121E  C028  FFD9         	movff	??_ISR+7,fsr2l
  7021  001222  C027  FFE2         	movff	??_ISR+6,fsr1h
  7022  001226  C026  FFE1         	movff	??_ISR+5,fsr1l
  7023  00122A  C025  FFEA         	movff	??_ISR+4,fsr0h
  7024  00122E  C024  FFE9         	movff	??_ISR+3,fsr0l
  7025  001232  C023  FFFB         	movff	??_ISR+2,pclatu
  7026  001236  C022  FFFA         	movff	??_ISR+1,pclath
  7027  00123A  924F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7028  00123C  0011               	retfie		f
  7029  00123E                     __end_of_ISR:
  7030                           	opt stack 0
  7031                           pclatu	equ	0xFFB
  7032                           pclath	equ	0xFFA
  7033                           tblptru	equ	0xFF8
  7034                           tblptrh	equ	0xFF7
  7035                           tblptrl	equ	0xFF6
  7036                           tablat	equ	0xFF5
  7037                           prodh	equ	0xFF4
  7038                           prodl	equ	0xFF3
  7039                           intcon	equ	0xFF2
  7040                           intcon2	equ	0xFF1
  7041                           intcon3	equ	0xFF0
  7042                           postinc0	equ	0xFEE
  7043                           fsr0h	equ	0xFEA
  7044                           fsr0l	equ	0xFE9
  7045                           wreg	equ	0xFE8
  7046                           fsr1h	equ	0xFE2
  7047                           fsr1l	equ	0xFE1
  7048                           indf2	equ	0xFDF
  7049                           postinc2	equ	0xFDE
  7050                           postdec2	equ	0xFDD
  7051                           fsr2h	equ	0xFDA
  7052                           fsr2l	equ	0xFD9
  7053                           status	equ	0xFD8
  7054                           
  7055 ;; *************** function _keypressed *****************
  7056 ;; Defined at:
  7057 ;;		line 370 in file "../main.c"
  7058 ;; Parameters:    Size  Location     Type
  7059 ;;  left            1    wreg     unsigned char 
  7060 ;;  right           1   28[COMRAM] unsigned char 
  7061 ;;  key             1   29[COMRAM] unsigned char 
  7062 ;; Auto vars:     Size  Location     Type
  7063 ;;  left            1   30[COMRAM] unsigned char 
  7064 ;;  i               1   31[COMRAM] unsigned char 
  7065 ;; Return value:  Size  Location     Type
  7066 ;;                  1    wreg      void 
  7067 ;; Registers used:
  7068 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7069 ;; Tracked objects:
  7070 ;;		On entry : 0/0
  7071 ;;		On exit  : 0/0
  7072 ;;		Unchanged: 0/0
  7073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7074 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7075 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7076 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7077 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7078 ;;Total ram usage:        4 bytes
  7079 ;; Hardware stack levels used:    1
  7080 ;; Hardware stack levels required when called:    3
  7081 ;; This function calls:
  7082 ;;		i2_I2C_Master_Read
  7083 ;;		i2_I2C_Master_Start
  7084 ;;		i2_I2C_Master_Stop
  7085 ;;		i2_I2C_Master_Write
  7086 ;;		i2_lcdInst
  7087 ;;		i2_printf
  7088 ;;		i2_stopOperation
  7089 ;; This function is called by:
  7090 ;;		_ISR
  7091 ;; This function uses a non-reentrant model
  7092 ;;
  7093                           
  7094                           	psect	text24
  7095  00159C                     __ptext24:
  7096                           	opt stack 0
  7097  00159C                     _keypressed:
  7098                           	opt stack 22
  7099                           
  7100                           ; BSR set to: 0
  7101                           ;incstack = 0
  7102                           ;keypressed@left stored from wreg
  7103  00159C  6E1F               	movwf	keypressed@left,c
  7104                           
  7105                           ;main.c: 371: if (key == '*'){
  7106  00159E  0E2A               	movlw	42
  7107  0015A0  181E               	xorwf	keypressed@key,w,c
  7108  0015A2  A4D8               	btfss	status,2,c
  7109  0015A4  D053               	goto	i2l3710
  7110                           
  7111                           ;main.c: 373: if(screenMode == 2){
  7112  0015A6  0E02               	movlw	2
  7113  0015A8  0100               	movlb	0	; () banked
  7114  0015AA  19CC               	xorwf	_screenMode& (0+255),w,b
  7115  0015AC  A4D8               	btfss	status,2,c
  7116  0015AE  D046               	goto	i2l3706
  7117                           
  7118                           ; BSR set to: 0
  7119                           ;main.c: 374: screenMode = 1;
  7120  0015B0  0E01               	movlw	1
  7121  0015B2  0100               	movlb	0	; () banked
  7122  0015B4  6FCC               	movwf	_screenMode& (0+255),b
  7123                           
  7124                           ; BSR set to: 0
  7125                           ;main.c: 375: T0CONbits.TMR0ON = 1;
  7126  0015B6  8ED5               	bsf	4053,7,c	;volatile
  7127                           
  7128                           ; BSR set to: 0
  7129                           ;main.c: 376: T1CONbits.TMR1ON = 1;
  7130  0015B8  80CD               	bsf	4045,0,c	;volatile
  7131                           
  7132                           ;main.c: 377: startGear = 1;
  7133  0015BA  0E01               	movlw	1
  7134  0015BC  0100               	movlb	0	; () banked
  7135  0015BE  6FAA               	movwf	_startGear& (0+255),b
  7136                           
  7137                           ; BSR set to: 0
  7138                           ;main.c: 380: I2C_Master_Start();
  7139  0015C0  EC20  F00F         	call	i2_I2C_Master_Start	;wreg free
  7140                           
  7141                           ;main.c: 381: I2C_Master_Write(0b11010000);
  7142  0015C4  0E00               	movlw	0
  7143  0015C6  6E03               	movwf	i2I2C_Master_Write@d+1,c
  7144  0015C8  0ED0               	movlw	208
  7145  0015CA  6E02               	movwf	i2I2C_Master_Write@d,c
  7146  0015CC  EC0F  F00F         	call	i2_I2C_Master_Write	;wreg free
  7147                           
  7148                           ;main.c: 382: I2C_Master_Write(0x00);
  7149  0015D0  0E00               	movlw	0
  7150  0015D2  6E03               	movwf	i2I2C_Master_Write@d+1,c
  7151  0015D4  0E00               	movlw	0
  7152  0015D6  6E02               	movwf	i2I2C_Master_Write@d,c
  7153  0015D8  EC0F  F00F         	call	i2_I2C_Master_Write	;wreg free
  7154                           
  7155                           ;main.c: 383: I2C_Master_Stop();
  7156  0015DC  EC1C  F00F         	call	i2_I2C_Master_Stop	;wreg free
  7157                           
  7158                           ;main.c: 385: I2C_Master_Start();
  7159  0015E0  EC20  F00F         	call	i2_I2C_Master_Start	;wreg free
  7160                           
  7161                           ;main.c: 386: I2C_Master_Write(0b11010001);
  7162  0015E4  0E00               	movlw	0
  7163  0015E6  6E03               	movwf	i2I2C_Master_Write@d+1,c
  7164  0015E8  0ED1               	movlw	209
  7165  0015EA  6E02               	movwf	i2I2C_Master_Write@d,c
  7166  0015EC  EC0F  F00F         	call	i2_I2C_Master_Write	;wreg free
  7167                           
  7168                           ;main.c: 387: for(unsigned char i=0;i<0x06;i++){
  7169  0015F0  0E00               	movlw	0
  7170  0015F2  6E20               	movwf	keypressed@i,c
  7171  0015F4                     i2l3690:
  7172  0015F4  0E05               	movlw	5
  7173  0015F6  6420               	cpfsgt	keypressed@i,c
  7174  0015F8  D001               	goto	i2l3694
  7175  0015FA  D00E               	goto	i2l3700
  7176  0015FC                     i2l3694:
  7177                           
  7178                           ;main.c: 388: lastRunRTC[i] = I2C_Master_Read(1);
  7179  0015FC  5020               	movf	keypressed@i,w,c
  7180  0015FE  0D01               	mullw	1
  7181  001600  0E80               	movlw	low _lastRunRTC
  7182  001602  24F3               	addwf	prodl,w,c
  7183  001604  6ED9               	movwf	fsr2l,c
  7184  001606  0E00               	movlw	high _lastRunRTC
  7185  001608  20F4               	addwfc	prodh,w,c
  7186  00160A  6EDA               	movwf	fsr2h,c
  7187  00160C  0E01               	movlw	1
  7188  00160E  EC98  F00E         	call	i2_I2C_Master_Read
  7189  001612  6EDF               	movwf	indf2,c
  7190  001614  2A20               	incf	keypressed@i,f,c
  7191  001616  D7EE               	goto	i2l3690
  7192  001618                     i2l3700:
  7193                           
  7194                           ;main.c: 389: }
  7195                           ;main.c: 390: lastRunRTC[6] = I2C_Master_Read(0);
  7196  001618  0E00               	movlw	0
  7197  00161A  EC98  F00E         	call	i2_I2C_Master_Read
  7198  00161E  0100               	movlb	0	; () banked
  7199  001620  6F86               	movwf	(_lastRunRTC+6)& (0+255),b
  7200                           
  7201                           ;main.c: 391: I2C_Master_Stop();
  7202  001622  EC1C  F00F         	call	i2_I2C_Master_Stop	;wreg free
  7203                           
  7204                           ;main.c: 393: lcdInst(0b10000000);;
  7205  001626  0E80               	movlw	128
  7206  001628  EC04  F00F         	call	i2_lcdInst
  7207                           
  7208                           ;main.c: 394: printf("RUNNING: 00:00  ");
  7209  00162C  0E9A               	movlw	low STR_24
  7210  00162E  6E0D               	movwf	i2printf@f,c
  7211  001630  0EFF               	movlw	high STR_24
  7212  001632  6E0E               	movwf	i2printf@f+1,c
  7213  001634  EC48  F006         	call	i2_printf	;wreg free
  7214                           
  7215                           ;main.c: 395: LATBbits.LB0 = 1;;
  7216  001638  808A               	bsf	3978,0,c	;volatile
  7217                           
  7218                           ;main.c: 396: }
  7219  00163A  0012               	return	
  7220  00163C                     i2l3706:
  7221                           
  7222                           ;main.c: 397: else if (screenMode == 0)
  7223  00163C  0100               	movlb	0	; () banked
  7224  00163E  51CC               	movf	_screenMode& (0+255),w,b
  7225  001640  A4D8               	btfss	status,2,c
  7226  001642  0012               	return	
  7227                           
  7228                           ; BSR set to: 0
  7229                           ;main.c: 398: screenMode = 2;
  7230  001644  0E02               	movlw	2
  7231  001646  0100               	movlb	0	; () banked
  7232  001648  6FCC               	movwf	_screenMode& (0+255),b
  7233                           
  7234                           ; BSR set to: 0
  7235                           ;main.c: 399: }
  7236                           
  7237                           ; BSR set to: 0
  7238  00164A  0012               	return	
  7239  00164C                     i2l3710:
  7240                           
  7241                           ;main.c: 400: else if (screenMode == 1){
  7242  00164C  0100               	movlb	0	; () banked
  7243  00164E  05CC               	decf	_screenMode& (0+255),w,b
  7244  001650  A4D8               	btfss	status,2,c
  7245  001652  D007               	goto	i2l3716
  7246                           
  7247                           ; BSR set to: 0
  7248                           ;main.c: 401: if (key == '#')
  7249  001654  0E23               	movlw	35
  7250  001656  181E               	xorwf	keypressed@key,w,c
  7251  001658  A4D8               	btfss	status,2,c
  7252  00165A  0012               	return	
  7253                           
  7254                           ; BSR set to: 0
  7255                           ;main.c: 403: stopOperation();
  7256  00165C  EC55  F00B         	call	i2_stopOperation	;wreg free
  7257                           
  7258                           ;main.c: 404: }
  7259  001660  0012               	return	
  7260  001662                     i2l3716:
  7261                           
  7262                           ;main.c: 405: else if (screenMode != 0){
  7263  001662  0100               	movlb	0	; () banked
  7264  001664  51CC               	movf	_screenMode& (0+255),w,b
  7265  001666  B4D8               	btfsc	status,2,c
  7266  001668  0012               	return	
  7267                           
  7268                           ; BSR set to: 0
  7269                           ;main.c: 406: if (key == right){
  7270  00166A  501D               	movf	keypressed@right,w,c
  7271  00166C  181E               	xorwf	keypressed@key,w,c
  7272  00166E  A4D8               	btfss	status,2,c
  7273  001670  D00C               	goto	i2l3726
  7274                           
  7275                           ; BSR set to: 0
  7276                           ;main.c: 407: if (screenMode == 2)
  7277  001672  0E02               	movlw	2
  7278  001674  0100               	movlb	0	; () banked
  7279  001676  19CC               	xorwf	_screenMode& (0+255),w,b
  7280  001678  A4D8               	btfss	status,2,c
  7281  00167A  D004               	goto	i2l3724
  7282                           
  7283                           ; BSR set to: 0
  7284                           ;main.c: 408: screenMode = 10;
  7285  00167C  0E0A               	movlw	10
  7286  00167E  0100               	movlb	0	; () banked
  7287  001680  6FCC               	movwf	_screenMode& (0+255),b
  7288  001682  0012               	return	
  7289  001684                     i2l3724:
  7290                           
  7291                           ; BSR set to: 0
  7292                           ;main.c: 409: else
  7293                           ;main.c: 410: screenMode--;
  7294  001684  0100               	movlb	0	; () banked
  7295  001686  07CC               	decf	_screenMode& (0+255),f,b
  7296                           
  7297                           ; BSR set to: 0
  7298                           ;main.c: 411: }
  7299  001688  0012               	return	
  7300  00168A                     i2l3726:
  7301                           
  7302                           ; BSR set to: 0
  7303                           ;main.c: 412: else if (key == left){
  7304  00168A  501F               	movf	keypressed@left,w,c
  7305  00168C  181E               	xorwf	keypressed@key,w,c
  7306  00168E  A4D8               	btfss	status,2,c
  7307  001690  0012               	return	
  7308                           
  7309                           ; BSR set to: 0
  7310                           ;main.c: 413: if (screenMode == 10)
  7311  001692  0E0A               	movlw	10
  7312  001694  0100               	movlb	0	; () banked
  7313  001696  19CC               	xorwf	_screenMode& (0+255),w,b
  7314  001698  A4D8               	btfss	status,2,c
  7315  00169A  D004               	goto	i2l3732
  7316                           
  7317                           ; BSR set to: 0
  7318                           ;main.c: 414: screenMode = 2;
  7319  00169C  0E02               	movlw	2
  7320  00169E  0100               	movlb	0	; () banked
  7321  0016A0  6FCC               	movwf	_screenMode& (0+255),b
  7322  0016A2  0012               	return	
  7323  0016A4                     i2l3732:
  7324                           
  7325                           ; BSR set to: 0
  7326                           ;main.c: 415: else
  7327                           ;main.c: 416: screenMode++;
  7328  0016A4  0100               	movlb	0	; () banked
  7329  0016A6  2BCC               	incf	_screenMode& (0+255),f,b
  7330                           
  7331                           ; BSR set to: 0
  7332                           
  7333                           ; BSR set to: 0
  7334                           
  7335                           ; BSR set to: 0
  7336                           
  7337                           ; BSR set to: 0
  7338                           
  7339                           ; BSR set to: 0
  7340  0016A8  0012               	return	
  7341  0016AA                     __end_of_keypressed:
  7342                           	opt stack 0
  7343                           pclatu	equ	0xFFB
  7344                           pclath	equ	0xFFA
  7345                           tblptru	equ	0xFF8
  7346                           tblptrh	equ	0xFF7
  7347                           tblptrl	equ	0xFF6
  7348                           tablat	equ	0xFF5
  7349                           prodh	equ	0xFF4
  7350                           prodl	equ	0xFF3
  7351                           intcon	equ	0xFF2
  7352                           intcon2	equ	0xFF1
  7353                           intcon3	equ	0xFF0
  7354                           postinc0	equ	0xFEE
  7355                           fsr0h	equ	0xFEA
  7356                           fsr0l	equ	0xFE9
  7357                           wreg	equ	0xFE8
  7358                           fsr1h	equ	0xFE2
  7359                           fsr1l	equ	0xFE1
  7360                           indf2	equ	0xFDF
  7361                           postinc2	equ	0xFDE
  7362                           postdec2	equ	0xFDD
  7363                           fsr2h	equ	0xFDA
  7364                           fsr2l	equ	0xFD9
  7365                           status	equ	0xFD8
  7366                           
  7367 ;; *************** function i2_stopOperation *****************
  7368 ;; Defined at:
  7369 ;;		line 429 in file "../main.c"
  7370 ;; Parameters:    Size  Location     Type
  7371 ;;		None
  7372 ;; Auto vars:     Size  Location     Type
  7373 ;;		None
  7374 ;; Return value:  Size  Location     Type
  7375 ;;                  1    wreg      void 
  7376 ;; Registers used:
  7377 ;;		wreg, status,2, status,0, cstack
  7378 ;; Tracked objects:
  7379 ;;		On entry : 0/0
  7380 ;;		On exit  : 0/0
  7381 ;;		Unchanged: 0/0
  7382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7383 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7384 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7385 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7386 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7387 ;;Total ram usage:        0 bytes
  7388 ;; Hardware stack levels used:    1
  7389 ;; Hardware stack levels required when called:    1
  7390 ;; This function calls:
  7391 ;;		i2___awdiv
  7392 ;;		i2___awmod
  7393 ;; This function is called by:
  7394 ;;		_keypressed
  7395 ;;		_ISR
  7396 ;; This function uses a non-reentrant model
  7397 ;;
  7398                           
  7399                           	psect	text25
  7400  0016AA                     __ptext25:
  7401                           	opt stack 0
  7402  0016AA                     i2_stopOperation:
  7403                           	opt stack 24
  7404                           
  7405                           ;main.c: 430: T0CONbits.TMR0ON = 0;
  7406                           
  7407                           ;incstack = 0
  7408  0016AA  9ED5               	bcf	4053,7,c	;volatile
  7409                           
  7410                           ;main.c: 431: T1CONbits.TMR1ON = 0;
  7411  0016AC  90CD               	bcf	4045,0,c	;volatile
  7412                           
  7413                           ;main.c: 432: TMR0 = 55770;
  7414  0016AE  0ED9               	movlw	217
  7415  0016B0  6ED7               	movwf	4055,c	;volatile
  7416  0016B2  0EDA               	movlw	218
  7417  0016B4  6ED6               	movwf	4054,c	;volatile
  7418                           
  7419                           ;main.c: 433: TMR1 = 60535;
  7420  0016B6  0EEC               	movlw	236
  7421  0016B8  6ECF               	movwf	4047,c	;volatile
  7422  0016BA  0E77               	movlw	119
  7423  0016BC  6ECE               	movwf	4046,c	;volatile
  7424                           
  7425                           ;main.c: 434: num9V = count9V;
  7426  0016BE  C09E  F0A4         	movff	_count9V,_num9V
  7427                           
  7428                           ;main.c: 435: numC = countC;
  7429  0016C2  C0A0  F0A7         	movff	_countC,_numC
  7430                           
  7431                           ;main.c: 436: numAA = countAA;
  7432  0016C6  C09F  F0A5         	movff	_countAA,_numAA
  7433                           
  7434                           ;main.c: 437: numDrain = countDrain;
  7435  0016CA  C0A1  F0A8         	movff	_countDrain,_numDrain
  7436                           
  7437                           ;main.c: 438: numBats = count9V + countC + countAA + countDrain;
  7438  0016CE  0100               	movlb	0	; () banked
  7439  0016D0  519E               	movf	_count9V& (0+255),w,b
  7440  0016D2  0100               	movlb	0	; () banked
  7441  0016D4  25A0               	addwf	_countC& (0+255),w,b
  7442  0016D6  0100               	movlb	0	; () banked
  7443  0016D8  259F               	addwf	_countAA& (0+255),w,b
  7444  0016DA  0100               	movlb	0	; () banked
  7445  0016DC  25A1               	addwf	_countDrain& (0+255),w,b
  7446  0016DE  0100               	movlb	0	; () banked
  7447  0016E0  6FA6               	movwf	_numBats& (0+255),b
  7448                           
  7449                           ; BSR set to: 0
  7450                           ;main.c: 439: count9V = 0;
  7451  0016E2  0E00               	movlw	0
  7452  0016E4  0100               	movlb	0	; () banked
  7453  0016E6  6F9E               	movwf	_count9V& (0+255),b
  7454                           
  7455                           ; BSR set to: 0
  7456                           ;main.c: 440: countC = 0;
  7457  0016E8  0E00               	movlw	0
  7458  0016EA  0100               	movlb	0	; () banked
  7459  0016EC  6FA0               	movwf	_countC& (0+255),b
  7460                           
  7461                           ; BSR set to: 0
  7462                           ;main.c: 441: countAA = 0;
  7463  0016EE  0E00               	movlw	0
  7464  0016F0  0100               	movlb	0	; () banked
  7465  0016F2  6F9F               	movwf	_countAA& (0+255),b
  7466                           
  7467                           ; BSR set to: 0
  7468                           ;main.c: 442: countDrain = 0;
  7469  0016F4  0E00               	movlw	0
  7470  0016F6  0100               	movlb	0	; () banked
  7471  0016F8  6FA1               	movwf	_countDrain& (0+255),b
  7472                           
  7473                           ; BSR set to: 0
  7474                           ;main.c: 443: min = opTimer / 60;
  7475  0016FA  C04A  F001         	movff	_opTimer,i2___awdiv@dividend
  7476  0016FE  6A02               	clrf	i2___awdiv@dividend+1,c
  7477  001700  0E00               	movlw	0
  7478  001702  6E04               	movwf	i2___awdiv@divisor+1,c
  7479  001704  0E3C               	movlw	60
  7480  001706  6E03               	movwf	i2___awdiv@divisor,c
  7481  001708  EC1E  F00C         	call	i2___awdiv	;wreg free
  7482  00170C  5001               	movf	?i2___awdiv,w,c
  7483  00170E  0100               	movlb	0	; () banked
  7484  001710  6FA3               	movwf	_min& (0+255),b
  7485                           
  7486                           ; BSR set to: 0
  7487                           ;main.c: 444: sec = opTimer % 60;
  7488  001712  C04A  F001         	movff	_opTimer,i2___awmod@dividend
  7489  001716  6A02               	clrf	i2___awmod@dividend+1,c
  7490  001718  0E00               	movlw	0
  7491  00171A  6E04               	movwf	i2___awmod@divisor+1,c
  7492  00171C  0E3C               	movlw	60
  7493  00171E  6E03               	movwf	i2___awmod@divisor,c
  7494  001720  ECD9  F00C         	call	i2___awmod	;wreg free
  7495  001724  5001               	movf	?i2___awmod,w,c
  7496  001726  0100               	movlb	0	; () banked
  7497  001728  6FA9               	movwf	_sec& (0+255),b
  7498                           
  7499                           ; BSR set to: 0
  7500                           ;main.c: 445: opTimer = 0;
  7501  00172A  0E00               	movlw	0
  7502  00172C  6E4A               	movwf	_opTimer,c
  7503                           
  7504                           ; BSR set to: 0
  7505                           ;main.c: 446: doneTimer = 0;
  7506  00172E  0E00               	movlw	0
  7507  001730  6E49               	movwf	_doneTimer,c
  7508                           
  7509                           ; BSR set to: 0
  7510                           ;main.c: 447: sorting = 0;
  7511  001732  0E00               	movlw	0
  7512  001734  6E4C               	movwf	_sorting,c
  7513                           
  7514                           ; BSR set to: 0
  7515                           ;main.c: 448: plat1Left = 0;
  7516  001736  0E00               	movlw	0
  7517  001738  0100               	movlb	0	; () banked
  7518  00173A  6F8F               	movwf	(_plat1Left+1)& (0+255),b
  7519  00173C  0E00               	movlw	0
  7520  00173E  6F8E               	movwf	_plat1Left& (0+255),b
  7521                           
  7522                           ; BSR set to: 0
  7523                           ;main.c: 449: plat1Right = 0;
  7524  001740  0E00               	movlw	0
  7525  001742  0100               	movlb	0	; () banked
  7526  001744  6F91               	movwf	(_plat1Right+1)& (0+255),b
  7527  001746  0E00               	movlw	0
  7528  001748  6F90               	movwf	_plat1Right& (0+255),b
  7529                           
  7530                           ; BSR set to: 0
  7531                           ;main.c: 450: plat2Left = 0;
  7532  00174A  0E00               	movlw	0
  7533  00174C  0100               	movlb	0	; () banked
  7534  00174E  6F93               	movwf	(_plat2Left+1)& (0+255),b
  7535  001750  0E00               	movlw	0
  7536  001752  6F92               	movwf	_plat2Left& (0+255),b
  7537                           
  7538                           ; BSR set to: 0
  7539                           ;main.c: 451: plat2Right = 0;
  7540  001754  0E00               	movlw	0
  7541  001756  0100               	movlb	0	; () banked
  7542  001758  6F95               	movwf	(_plat2Right+1)& (0+255),b
  7543  00175A  0E00               	movlw	0
  7544  00175C  6F94               	movwf	_plat2Right& (0+255),b
  7545                           
  7546                           ; BSR set to: 0
  7547                           ;main.c: 452: turn2BackLeft = 0;
  7548  00175E  0E00               	movlw	0
  7549  001760  0100               	movlb	0	; () banked
  7550  001762  6F9B               	movwf	(_turn2BackLeft+1)& (0+255),b
  7551  001764  0E00               	movlw	0
  7552  001766  6F9A               	movwf	_turn2BackLeft& (0+255),b
  7553                           
  7554                           ; BSR set to: 0
  7555                           ;main.c: 453: turn1BackLeft = 0;
  7556  001768  0E00               	movlw	0
  7557  00176A  0100               	movlb	0	; () banked
  7558  00176C  6F97               	movwf	(_turn1BackLeft+1)& (0+255),b
  7559  00176E  0E00               	movlw	0
  7560  001770  6F96               	movwf	_turn1BackLeft& (0+255),b
  7561                           
  7562                           ; BSR set to: 0
  7563                           ;main.c: 454: turn2BackRight = 0;
  7564  001772  0E00               	movlw	0
  7565  001774  0100               	movlb	0	; () banked
  7566  001776  6F9D               	movwf	(_turn2BackRight+1)& (0+255),b
  7567  001778  0E00               	movlw	0
  7568  00177A  6F9C               	movwf	_turn2BackRight& (0+255),b
  7569                           
  7570                           ; BSR set to: 0
  7571                           ;main.c: 455: turn1BackRight = 0;
  7572  00177C  0E00               	movlw	0
  7573  00177E  0100               	movlb	0	; () banked
  7574  001780  6F99               	movwf	(_turn1BackRight+1)& (0+255),b
  7575  001782  0E00               	movlw	0
  7576  001784  6F98               	movwf	_turn1BackRight& (0+255),b
  7577                           
  7578                           ; BSR set to: 0
  7579                           ;main.c: 456: count_2ms = 0;
  7580  001786  0E00               	movlw	0
  7581  001788  6E48               	movwf	_count_2ms+1,c
  7582  00178A  0E00               	movlw	0
  7583  00178C  6E47               	movwf	_count_2ms,c
  7584                           
  7585                           ; BSR set to: 0
  7586                           ;main.c: 457: doubleAA = 0;
  7587  00178E  0E00               	movlw	0
  7588  001790  0100               	movlb	0	; () banked
  7589  001792  6FA2               	movwf	_doubleAA& (0+255),b
  7590                           
  7591                           ; BSR set to: 0
  7592                           ;main.c: 458: solOnTimer = 0;
  7593  001794  0E00               	movlw	0
  7594  001796  6E4B               	movwf	_solOnTimer,c
  7595                           
  7596                           ; BSR set to: 0
  7597                           ;main.c: 460: LATCbits.LC1 = 0;;
  7598  001798  928B               	bcf	3979,1,c	;volatile
  7599                           
  7600                           ; BSR set to: 0
  7601                           ;main.c: 461: LATCbits.LC2 = 0;;
  7602  00179A  948B               	bcf	3979,2,c	;volatile
  7603                           
  7604                           ; BSR set to: 0
  7605                           ;main.c: 462: LATCbits.LC6 = 0;;
  7606  00179C  9C8B               	bcf	3979,6,c	;volatile
  7607                           
  7608                           ; BSR set to: 0
  7609                           ;main.c: 463: LATCbits.LC5 = 0;;
  7610  00179E  9A8B               	bcf	3979,5,c	;volatile
  7611                           
  7612                           ; BSR set to: 0
  7613                           ;main.c: 464: LATCbits.LC0 = 0;;
  7614  0017A0  908B               	bcf	3979,0,c	;volatile
  7615                           
  7616                           ; BSR set to: 0
  7617                           ;main.c: 465: LATEbits.LE2 = 0;;
  7618  0017A2  948D               	bcf	3981,2,c	;volatile
  7619                           
  7620                           ; BSR set to: 0
  7621                           ;main.c: 466: LATEbits.LE1 = 0;;
  7622  0017A4  928D               	bcf	3981,1,c	;volatile
  7623                           
  7624                           ; BSR set to: 0
  7625                           ;main.c: 467: LATAbits.LA4 = 0;;
  7626  0017A6  9889               	bcf	3977,4,c	;volatile
  7627                           
  7628                           ; BSR set to: 0
  7629                           ;main.c: 468: LATDbits.LD0= 0;;
  7630  0017A8  908C               	bcf	3980,0,c	;volatile
  7631                           
  7632                           ; BSR set to: 0
  7633                           ;main.c: 469: LATCbits.LC7 = 0;;
  7634  0017AA  9E8B               	bcf	3979,7,c	;volatile
  7635                           
  7636                           ; BSR set to: 0
  7637                           ;main.c: 470: LATDbits.LD1 = 0;;
  7638  0017AC  928C               	bcf	3980,1,c	;volatile
  7639                           
  7640                           ; BSR set to: 0
  7641                           ;main.c: 471: LATBbits.LB0 = 0;;
  7642  0017AE  908A               	bcf	3978,0,c	;volatile
  7643                           
  7644                           ; BSR set to: 0
  7645                           ;main.c: 472: screenMode = 0;
  7646  0017B0  0E00               	movlw	0
  7647  0017B2  0100               	movlb	0	; () banked
  7648  0017B4  6FCC               	movwf	_screenMode& (0+255),b
  7649                           
  7650                           ; BSR set to: 0
  7651  0017B6  0012               	return		;funcret
  7652  0017B8                     __end_ofi2_stopOperation:
  7653                           	opt stack 0
  7654                           pclatu	equ	0xFFB
  7655                           pclath	equ	0xFFA
  7656                           tblptru	equ	0xFF8
  7657                           tblptrh	equ	0xFF7
  7658                           tblptrl	equ	0xFF6
  7659                           tablat	equ	0xFF5
  7660                           prodh	equ	0xFF4
  7661                           prodl	equ	0xFF3
  7662                           intcon	equ	0xFF2
  7663                           intcon2	equ	0xFF1
  7664                           intcon3	equ	0xFF0
  7665                           postinc0	equ	0xFEE
  7666                           fsr0h	equ	0xFEA
  7667                           fsr0l	equ	0xFE9
  7668                           wreg	equ	0xFE8
  7669                           fsr1h	equ	0xFE2
  7670                           fsr1l	equ	0xFE1
  7671                           indf2	equ	0xFDF
  7672                           postinc2	equ	0xFDE
  7673                           postdec2	equ	0xFDD
  7674                           fsr2h	equ	0xFDA
  7675                           fsr2l	equ	0xFD9
  7676                           status	equ	0xFD8
  7677                           
  7678 ;; *************** function i2___awmod *****************
  7679 ;; Defined at:
  7680 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  7681 ;; Parameters:    Size  Location     Type
  7682 ;;  dividend        2    0[COMRAM] int 
  7683 ;;  divisor         2    2[COMRAM] int 
  7684 ;; Auto vars:     Size  Location     Type
  7685 ;;  __awmod         1    5[COMRAM] unsigned char 
  7686 ;;  __awmod         1    4[COMRAM] unsigned char 
  7687 ;; Return value:  Size  Location     Type
  7688 ;;                  2    0[COMRAM] int 
  7689 ;; Registers used:
  7690 ;;		wreg, status,2, status,0
  7691 ;; Tracked objects:
  7692 ;;		On entry : 0/0
  7693 ;;		On exit  : 0/0
  7694 ;;		Unchanged: 0/0
  7695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7696 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7697 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7699 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7700 ;;Total ram usage:        6 bytes
  7701 ;; Hardware stack levels used:    1
  7702 ;; This function calls:
  7703 ;;		Nothing
  7704 ;; This function is called by:
  7705 ;;		_ISR
  7706 ;;		i2_stopOperation
  7707 ;; This function uses a non-reentrant model
  7708 ;;
  7709                           
  7710                           	psect	text26
  7711  0019B2                     __ptext26:
  7712                           	opt stack 0
  7713  0019B2                     i2___awmod:
  7714                           	opt stack 24
  7715                           
  7716                           ; BSR set to: 0
  7717                           ;incstack = 0
  7718  0019B2  0E00               	movlw	0
  7719  0019B4  6E06               	movwf	i2___awmod@sign,c
  7720  0019B6  AE02               	btfss	i2___awmod@dividend+1,7,c
  7721  0019B8  D006               	goto	i2l2876
  7722  0019BA  6C01               	negf	i2___awmod@dividend,c
  7723  0019BC  1E02               	comf	i2___awmod@dividend+1,f,c
  7724  0019BE  B0D8               	btfsc	status,0,c
  7725  0019C0  2A02               	incf	i2___awmod@dividend+1,f,c
  7726  0019C2  0E01               	movlw	1
  7727  0019C4  6E06               	movwf	i2___awmod@sign,c
  7728  0019C6                     i2l2876:
  7729  0019C6  AE04               	btfss	i2___awmod@divisor+1,7,c
  7730  0019C8  D004               	goto	i2l2880
  7731  0019CA  6C03               	negf	i2___awmod@divisor,c
  7732  0019CC  1E04               	comf	i2___awmod@divisor+1,f,c
  7733  0019CE  B0D8               	btfsc	status,0,c
  7734  0019D0  2A04               	incf	i2___awmod@divisor+1,f,c
  7735  0019D2                     i2l2880:
  7736  0019D2  5003               	movf	i2___awmod@divisor,w,c
  7737  0019D4  1004               	iorwf	i2___awmod@divisor+1,w,c
  7738  0019D6  B4D8               	btfsc	status,2,c
  7739  0019D8  D018               	goto	i2l2896
  7740  0019DA  0E01               	movlw	1
  7741  0019DC  6E05               	movwf	i2___awmod@counter,c
  7742  0019DE  D004               	goto	i2l2886
  7743  0019E0                     i2l2884:
  7744  0019E0  90D8               	bcf	status,0,c
  7745  0019E2  3603               	rlcf	i2___awmod@divisor,f,c
  7746  0019E4  3604               	rlcf	i2___awmod@divisor+1,f,c
  7747  0019E6  2A05               	incf	i2___awmod@counter,f,c
  7748  0019E8                     i2l2886:
  7749  0019E8  AE04               	btfss	i2___awmod@divisor+1,7,c
  7750  0019EA  D7FA               	goto	i2l2884
  7751  0019EC                     i2l2888:
  7752  0019EC  5003               	movf	i2___awmod@divisor,w,c
  7753  0019EE  5C01               	subwf	i2___awmod@dividend,w,c
  7754  0019F0  5004               	movf	i2___awmod@divisor+1,w,c
  7755  0019F2  5802               	subwfb	i2___awmod@dividend+1,w,c
  7756  0019F4  A0D8               	btfss	status,0,c
  7757  0019F6  D004               	goto	i2l2892
  7758  0019F8  5003               	movf	i2___awmod@divisor,w,c
  7759  0019FA  5E01               	subwf	i2___awmod@dividend,f,c
  7760  0019FC  5004               	movf	i2___awmod@divisor+1,w,c
  7761  0019FE  5A02               	subwfb	i2___awmod@dividend+1,f,c
  7762  001A00                     i2l2892:
  7763  001A00  90D8               	bcf	status,0,c
  7764  001A02  3204               	rrcf	i2___awmod@divisor+1,f,c
  7765  001A04  3203               	rrcf	i2___awmod@divisor,f,c
  7766  001A06  2E05               	decfsz	i2___awmod@counter,f,c
  7767  001A08  D7F1               	goto	i2l2888
  7768  001A0A                     i2l2896:
  7769  001A0A  5006               	movf	i2___awmod@sign,w,c
  7770  001A0C  B4D8               	btfsc	status,2,c
  7771  001A0E  D004               	goto	i2l2900
  7772  001A10  6C01               	negf	i2___awmod@dividend,c
  7773  001A12  1E02               	comf	i2___awmod@dividend+1,f,c
  7774  001A14  B0D8               	btfsc	status,0,c
  7775  001A16  2A02               	incf	i2___awmod@dividend+1,f,c
  7776  001A18                     i2l2900:
  7777  001A18  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
  7778  001A1C  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
  7779  001A20  0012               	return	
  7780  001A22                     __end_ofi2___awmod:
  7781                           	opt stack 0
  7782                           pclatu	equ	0xFFB
  7783                           pclath	equ	0xFFA
  7784                           tblptru	equ	0xFF8
  7785                           tblptrh	equ	0xFF7
  7786                           tblptrl	equ	0xFF6
  7787                           tablat	equ	0xFF5
  7788                           prodh	equ	0xFF4
  7789                           prodl	equ	0xFF3
  7790                           intcon	equ	0xFF2
  7791                           intcon2	equ	0xFF1
  7792                           intcon3	equ	0xFF0
  7793                           postinc0	equ	0xFEE
  7794                           fsr0h	equ	0xFEA
  7795                           fsr0l	equ	0xFE9
  7796                           wreg	equ	0xFE8
  7797                           fsr1h	equ	0xFE2
  7798                           fsr1l	equ	0xFE1
  7799                           indf2	equ	0xFDF
  7800                           postinc2	equ	0xFDE
  7801                           postdec2	equ	0xFDD
  7802                           fsr2h	equ	0xFDA
  7803                           fsr2l	equ	0xFD9
  7804                           status	equ	0xFD8
  7805                           
  7806 ;; *************** function i2___awdiv *****************
  7807 ;; Defined at:
  7808 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  7809 ;; Parameters:    Size  Location     Type
  7810 ;;  dividend        2    0[COMRAM] int 
  7811 ;;  divisor         2    2[COMRAM] int 
  7812 ;; Auto vars:     Size  Location     Type
  7813 ;;  __awdiv         2    6[COMRAM] int 
  7814 ;;  __awdiv         1    5[COMRAM] unsigned char 
  7815 ;;  __awdiv         1    4[COMRAM] unsigned char 
  7816 ;; Return value:  Size  Location     Type
  7817 ;;                  2    0[COMRAM] int 
  7818 ;; Registers used:
  7819 ;;		wreg, status,2, status,0
  7820 ;; Tracked objects:
  7821 ;;		On entry : 0/0
  7822 ;;		On exit  : 0/0
  7823 ;;		Unchanged: 0/0
  7824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7825 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7826 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7827 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7828 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7829 ;;Total ram usage:        8 bytes
  7830 ;; Hardware stack levels used:    1
  7831 ;; This function calls:
  7832 ;;		Nothing
  7833 ;; This function is called by:
  7834 ;;		_ISR
  7835 ;;		i2_stopOperation
  7836 ;; This function uses a non-reentrant model
  7837 ;;
  7838                           
  7839                           	psect	text27
  7840  00183C                     __ptext27:
  7841                           	opt stack 0
  7842  00183C                     i2___awdiv:
  7843                           	opt stack 24
  7844                           
  7845                           ;incstack = 0
  7846  00183C  0E00               	movlw	0
  7847  00183E  6E06               	movwf	i2___awdiv@sign,c
  7848  001840  AE04               	btfss	i2___awdiv@divisor+1,7,c
  7849  001842  D006               	goto	i2l2832
  7850  001844  6C03               	negf	i2___awdiv@divisor,c
  7851  001846  1E04               	comf	i2___awdiv@divisor+1,f,c
  7852  001848  B0D8               	btfsc	status,0,c
  7853  00184A  2A04               	incf	i2___awdiv@divisor+1,f,c
  7854  00184C  0E01               	movlw	1
  7855  00184E  6E06               	movwf	i2___awdiv@sign,c
  7856  001850                     i2l2832:
  7857  001850  AE02               	btfss	i2___awdiv@dividend+1,7,c
  7858  001852  D006               	goto	i2l2838
  7859  001854  6C01               	negf	i2___awdiv@dividend,c
  7860  001856  1E02               	comf	i2___awdiv@dividend+1,f,c
  7861  001858  B0D8               	btfsc	status,0,c
  7862  00185A  2A02               	incf	i2___awdiv@dividend+1,f,c
  7863  00185C  0E01               	movlw	1
  7864  00185E  1A06               	xorwf	i2___awdiv@sign,f,c
  7865  001860                     i2l2838:
  7866  001860  0E00               	movlw	0
  7867  001862  6E08               	movwf	i2___awdiv@quotient+1,c
  7868  001864  0E00               	movlw	0
  7869  001866  6E07               	movwf	i2___awdiv@quotient,c
  7870  001868  5003               	movf	i2___awdiv@divisor,w,c
  7871  00186A  1004               	iorwf	i2___awdiv@divisor+1,w,c
  7872  00186C  B4D8               	btfsc	status,2,c
  7873  00186E  D01C               	goto	i2l2860
  7874  001870  0E01               	movlw	1
  7875  001872  6E05               	movwf	i2___awdiv@counter,c
  7876  001874  D004               	goto	i2l2846
  7877  001876                     i2l2844:
  7878  001876  90D8               	bcf	status,0,c
  7879  001878  3603               	rlcf	i2___awdiv@divisor,f,c
  7880  00187A  3604               	rlcf	i2___awdiv@divisor+1,f,c
  7881  00187C  2A05               	incf	i2___awdiv@counter,f,c
  7882  00187E                     i2l2846:
  7883  00187E  AE04               	btfss	i2___awdiv@divisor+1,7,c
  7884  001880  D7FA               	goto	i2l2844
  7885  001882                     i2l2848:
  7886  001882  90D8               	bcf	status,0,c
  7887  001884  3607               	rlcf	i2___awdiv@quotient,f,c
  7888  001886  3608               	rlcf	i2___awdiv@quotient+1,f,c
  7889  001888  5003               	movf	i2___awdiv@divisor,w,c
  7890  00188A  5C01               	subwf	i2___awdiv@dividend,w,c
  7891  00188C  5004               	movf	i2___awdiv@divisor+1,w,c
  7892  00188E  5802               	subwfb	i2___awdiv@dividend+1,w,c
  7893  001890  A0D8               	btfss	status,0,c
  7894  001892  D005               	goto	i2l2856
  7895  001894  5003               	movf	i2___awdiv@divisor,w,c
  7896  001896  5E01               	subwf	i2___awdiv@dividend,f,c
  7897  001898  5004               	movf	i2___awdiv@divisor+1,w,c
  7898  00189A  5A02               	subwfb	i2___awdiv@dividend+1,f,c
  7899  00189C  8007               	bsf	i2___awdiv@quotient,0,c
  7900  00189E                     i2l2856:
  7901  00189E  90D8               	bcf	status,0,c
  7902  0018A0  3204               	rrcf	i2___awdiv@divisor+1,f,c
  7903  0018A2  3203               	rrcf	i2___awdiv@divisor,f,c
  7904  0018A4  2E05               	decfsz	i2___awdiv@counter,f,c
  7905  0018A6  D7ED               	goto	i2l2848
  7906  0018A8                     i2l2860:
  7907  0018A8  5006               	movf	i2___awdiv@sign,w,c
  7908  0018AA  B4D8               	btfsc	status,2,c
  7909  0018AC  D004               	goto	i2l2864
  7910  0018AE  6C07               	negf	i2___awdiv@quotient,c
  7911  0018B0  1E08               	comf	i2___awdiv@quotient+1,f,c
  7912  0018B2  B0D8               	btfsc	status,0,c
  7913  0018B4  2A08               	incf	i2___awdiv@quotient+1,f,c
  7914  0018B6                     i2l2864:
  7915  0018B6  C007  F001         	movff	i2___awdiv@quotient,?i2___awdiv
  7916  0018BA  C008  F002         	movff	i2___awdiv@quotient+1,?i2___awdiv+1
  7917  0018BE  0012               	return	
  7918  0018C0                     __end_ofi2___awdiv:
  7919                           	opt stack 0
  7920                           pclatu	equ	0xFFB
  7921                           pclath	equ	0xFFA
  7922                           tblptru	equ	0xFF8
  7923                           tblptrh	equ	0xFF7
  7924                           tblptrl	equ	0xFF6
  7925                           tablat	equ	0xFF5
  7926                           prodh	equ	0xFF4
  7927                           prodl	equ	0xFF3
  7928                           intcon	equ	0xFF2
  7929                           intcon2	equ	0xFF1
  7930                           intcon3	equ	0xFF0
  7931                           postinc0	equ	0xFEE
  7932                           fsr0h	equ	0xFEA
  7933                           fsr0l	equ	0xFE9
  7934                           wreg	equ	0xFE8
  7935                           fsr1h	equ	0xFE2
  7936                           fsr1l	equ	0xFE1
  7937                           indf2	equ	0xFDF
  7938                           postinc2	equ	0xFDE
  7939                           postdec2	equ	0xFDD
  7940                           fsr2h	equ	0xFDA
  7941                           fsr2l	equ	0xFD9
  7942                           status	equ	0xFD8
  7943                           
  7944 ;; *************** function i2_printf *****************
  7945 ;; Defined at:
  7946 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  7947 ;; Parameters:    Size  Location     Type
  7948 ;;  f               2   12[COMRAM] PTR const unsigned char 
  7949 ;;		 -> STR_26(17), STR_25(15), STR_24(17), STR_23(23), 
  7950 ;;		 -> STR_22(23), STR_21(23), STR_20(23), STR_19(17), 
  7951 ;;		 -> STR_18(21), STR_17(17), STR_16(21), STR_15(17), 
  7952 ;;		 -> STR_14(21), STR_13(17), STR_12(19), STR_11(17), 
  7953 ;;		 -> STR_10(19), STR_9(17), STR_8(25), STR_7(17), 
  7954 ;;		 -> STR_6(17), STR_5(17), STR_4(17), STR_3(17), 
  7955 ;;		 -> STR_2(17), STR_1(17), 
  7956 ;; Auto vars:     Size  Location     Type
  7957 ;;  printf          4    0        struct .
  7958 ;;  printf          3    0        PTR const unsigned char 
  7959 ;;  printf          2   25[COMRAM] int 
  7960 ;;  printf          2   22[COMRAM] unsigned int 
  7961 ;;  printf          2   19[COMRAM] PTR void [1]
  7962 ;;		 -> ?i2_printf(2), ?_printf(2), 
  7963 ;;  printf          2    0        unsigned int 
  7964 ;;  printf          1   27[COMRAM] char 
  7965 ;;  printf          1   24[COMRAM] unsigned char 
  7966 ;;  printf          1   21[COMRAM] char 
  7967 ;;  printf          1   18[COMRAM] unsigned char 
  7968 ;; Return value:  Size  Location     Type
  7969 ;;                  2   12[COMRAM] int 
  7970 ;; Registers used:
  7971 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7972 ;; Tracked objects:
  7973 ;;		On entry : 0/0
  7974 ;;		On exit  : 0/0
  7975 ;;		Unchanged: 0/0
  7976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7977 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7978 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7979 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7980 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7981 ;;Total ram usage:       16 bytes
  7982 ;; Hardware stack levels used:    1
  7983 ;; Hardware stack levels required when called:    2
  7984 ;; This function calls:
  7985 ;;		i2___lwdiv
  7986 ;;		i2___lwmod
  7987 ;;		i2___wmul
  7988 ;;		i2_isdigit
  7989 ;;		i2_putch
  7990 ;; This function is called by:
  7991 ;;		_keypressed
  7992 ;; This function uses a non-reentrant model
  7993 ;;
  7994                           
  7995                           	psect	text28
  7996  000C90                     __ptext28:
  7997                           	opt stack 0
  7998  000C90                     i2_printf:
  7999                           	opt stack 22
  8000                           
  8001                           ;doprnt.c: 466: va_list ap;
  8002                           ;doprnt.c: 499: signed char c;
  8003                           ;doprnt.c: 501: int width;
  8004                           ;doprnt.c: 506: signed char prec;
  8005                           ;doprnt.c: 508: unsigned char flag;
  8006                           ;doprnt.c: 523: union {
  8007                           ;doprnt.c: 524: unsigned long vd;
  8008                           ;doprnt.c: 525: double integ;
  8009                           ;doprnt.c: 526: } tmpval;
  8010                           ;doprnt.c: 528: unsigned int val;
  8011                           ;doprnt.c: 529: unsigned len;
  8012                           ;doprnt.c: 530: const char * cp;
  8013                           ;doprnt.c: 533: *ap = __va_start();
  8014                           
  8015                           ;incstack = 0
  8016  000C90  0E0F               	movlw	low (?i2_printf+2)
  8017  000C92  6E14               	movwf	i2printf@ap,c
  8018  000C94  0E00               	movlw	high (?i2_printf+2)
  8019  000C96  6E15               	movwf	i2printf@ap+1,c
  8020                           
  8021                           ;doprnt.c: 536: while(c = *f++) {
  8022  000C98  D174               	goto	i2l3438
  8023  000C9A                     i2l3312:
  8024                           
  8025                           ;doprnt.c: 538: if(c != '%')
  8026  000C9A  0E25               	movlw	37
  8027  000C9C  181C               	xorwf	i2printf@c,w,c
  8028  000C9E  B4D8               	btfsc	status,2,c
  8029  000CA0  D004               	goto	i2l3316
  8030                           
  8031                           ;doprnt.c: 540: {
  8032                           ;doprnt.c: 541: (putch(c) );
  8033  000CA2  501C               	movf	i2printf@c,w,c
  8034  000CA4  ECFE  F00E         	call	i2_putch
  8035                           
  8036                           ;doprnt.c: 542: continue;
  8037  000CA8  D16C               	goto	i2l3438
  8038  000CAA                     i2l3316:
  8039                           
  8040                           ;doprnt.c: 543: }
  8041                           ;doprnt.c: 546: width = 0;
  8042  000CAA  0E00               	movlw	0
  8043  000CAC  6E1B               	movwf	i2printf@width+1,c
  8044  000CAE  0E00               	movlw	0
  8045  000CB0  6E1A               	movwf	i2printf@width,c
  8046                           
  8047                           ;doprnt.c: 548: flag = 0;
  8048  000CB2  0E00               	movlw	0
  8049  000CB4  6E19               	movwf	i2printf@flag,c
  8050                           
  8051                           ;doprnt.c: 551: switch(*f) {
  8052                           
  8053                           ;doprnt.c: 550: for(;;) {
  8054  000CB6  D003               	goto	i2l3322
  8055  000CB8                     i2l3318:
  8056                           
  8057                           ;doprnt.c: 580: flag |= 0x04;
  8058  000CB8  8419               	bsf	i2printf@flag,2,c
  8059                           
  8060                           ;doprnt.c: 581: f++;
  8061  000CBA  4A0D               	infsnz	i2printf@f,f,c
  8062  000CBC  2A0E               	incf	i2printf@f+1,f,c
  8063  000CBE                     i2l3322:
  8064  000CBE  C00D  FFF6         	movff	i2printf@f,tblptrl
  8065  000CC2  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  8066  000CC6                     	if	0	;tblptru may be non-zero
  8067  000CC6                     	endif
  8068  000CC6                     	if	0	;tblptru may be non-zero
  8069  000CC6                     	endif
  8070  000CC6  0008               	tblrd		*
  8071  000CC8  50F5               	movf	tablat,w,c
  8072                           
  8073                           ; Switch size 1, requested type "space"
  8074                           ; Number of cases is 1, Range of values is 48 to 48
  8075                           ; switch strategies available:
  8076                           ; Name         Instructions Cycles
  8077                           ; simple_byte            4     3 (average)
  8078                           ;	Chosen strategy is simple_byte
  8079  000CCA  0A30               	xorlw	48	; case 48
  8080  000CCC  B4D8               	btfsc	status,2,c
  8081  000CCE  D7F4               	goto	i2l3318
  8082                           
  8083                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  8084                           
  8085                           ;doprnt.c: 586: }
  8086                           
  8087                           ;doprnt.c: 585: break;
  8088  000CD0  C00D  FFF6         	movff	i2printf@f,tblptrl
  8089  000CD4  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  8090  000CD8                     	if	0	;tblptru may be non-zero
  8091  000CD8                     	endif
  8092  000CD8                     	if	0	;tblptru may be non-zero
  8093  000CD8                     	endif
  8094  000CD8  0008               	tblrd		*
  8095  000CDA  50F5               	movf	tablat,w,c
  8096  000CDC  ECBA  F00E         	call	i2_isdigit
  8097  000CE0  A0D8               	btfss	status,0,c
  8098  000CE2  D035               	goto	i2l3340
  8099                           
  8100                           ;doprnt.c: 598: width = 0;
  8101  000CE4  0E00               	movlw	0
  8102  000CE6  6E1B               	movwf	i2printf@width+1,c
  8103  000CE8  0E00               	movlw	0
  8104  000CEA  6E1A               	movwf	i2printf@width,c
  8105  000CEC                     i2l3328:
  8106                           
  8107                           ;doprnt.c: 600: width *= 10;
  8108  000CEC  C01A  F001         	movff	i2printf@width,i2___wmul@multiplier
  8109  000CF0  C01B  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
  8110  000CF4  0E00               	movlw	0
  8111  000CF6  6E04               	movwf	i2___wmul@multiplicand+1,c
  8112  000CF8  0E0A               	movlw	10
  8113  000CFA  6E03               	movwf	i2___wmul@multiplicand,c
  8114  000CFC  EC85  F00E         	call	i2___wmul	;wreg free
  8115  000D00  C001  F01A         	movff	?i2___wmul,i2printf@width
  8116  000D04  C002  F01B         	movff	?i2___wmul+1,i2printf@width+1
  8117                           
  8118                           ;doprnt.c: 601: width += *f++ - '0';
  8119  000D08  0ED0               	movlw	208
  8120  000D0A  6E0F               	movwf	??i2_printf& (0+255),c
  8121  000D0C  0EFF               	movlw	255
  8122  000D0E  6E10               	movwf	(??i2_printf+1)& (0+255),c
  8123  000D10  C00D  FFF6         	movff	i2printf@f,tblptrl
  8124  000D14  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  8125  000D18                     	if	0	;tblptru may be non-zero
  8126  000D18                     	endif
  8127  000D18                     	if	0	;tblptru may be non-zero
  8128  000D18                     	endif
  8129  000D18  0008               	tblrd		*
  8130  000D1A  50F5               	movf	tablat,w,c
  8131  000D1C  6E11               	movwf	(??i2_printf+2)& (0+255),c
  8132  000D1E  6A12               	clrf	(??i2_printf+3)& (0+255),c
  8133  000D20  500F               	movf	??i2_printf,w,c
  8134  000D22  2611               	addwf	??i2_printf+2,f,c
  8135  000D24  5010               	movf	??i2_printf+1,w,c
  8136  000D26  2212               	addwfc	??i2_printf+3,f,c
  8137  000D28  5011               	movf	??i2_printf+2,w,c
  8138  000D2A  261A               	addwf	i2printf@width,f,c
  8139  000D2C  5012               	movf	??i2_printf+3,w,c
  8140  000D2E  221B               	addwfc	i2printf@width+1,f,c
  8141  000D30  4A0D               	infsnz	i2printf@f,f,c
  8142  000D32  2A0E               	incf	i2printf@f+1,f,c
  8143                           
  8144                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  8145  000D34  C00D  FFF6         	movff	i2printf@f,tblptrl
  8146  000D38  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  8147  000D3C                     	if	0	;tblptru may be non-zero
  8148  000D3C                     	endif
  8149  000D3C                     	if	0	;tblptru may be non-zero
  8150  000D3C                     	endif
  8151  000D3C  0008               	tblrd		*
  8152  000D3E  50F5               	movf	tablat,w,c
  8153  000D40  ECBA  F00E         	call	i2_isdigit
  8154  000D44  A0D8               	btfss	status,0,c
  8155  000D46  D003               	goto	i2l3340
  8156  000D48  D7D1               	goto	i2l3328
  8157  000D4A                     i2l3336:
  8158                           
  8159                           ;doprnt.c: 721: flag |= 0x80;
  8160  000D4A  8E19               	bsf	i2printf@flag,7,c
  8161                           
  8162                           ;doprnt.c: 723: break;
  8163  000D4C  D017               	goto	i2l466
  8164  000D4E                     i2l3340:
  8165  000D4E  C00D  FFF6         	movff	i2printf@f,tblptrl
  8166  000D52  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  8167  000D56  4A0D               	infsnz	i2printf@f,f,c
  8168  000D58  2A0E               	incf	i2printf@f+1,f,c
  8169  000D5A                     	if	0	;tblptru may be non-zero
  8170  000D5A                     	endif
  8171  000D5A                     	if	0	;tblptru may be non-zero
  8172  000D5A                     	endif
  8173  000D5A  0008               	tblrd		*
  8174  000D5C  CFF5 F01C          	movff	tablat,i2printf@c
  8175  000D60  501C               	movf	i2printf@c,w,c
  8176                           
  8177                           ; Switch size 1, requested type "space"
  8178                           ; Number of cases is 4, Range of values is 0 to 120
  8179                           ; switch strategies available:
  8180                           ; Name         Instructions Cycles
  8181                           ; simple_byte           13     7 (average)
  8182                           ;	Chosen strategy is simple_byte
  8183  000D62  0A00               	xorlw	0	; case 0
  8184  000D64  B4D8               	btfsc	status,2,c
  8185  000D66  0012               	return	
  8186  000D68  0A64               	xorlw	100	; case 100
  8187  000D6A  B4D8               	btfsc	status,2,c
  8188  000D6C  D007               	goto	i2l466
  8189  000D6E  0A0D               	xorlw	13	; case 105
  8190  000D70  B4D8               	btfsc	status,2,c
  8191  000D72  D004               	goto	i2l466
  8192  000D74  0A11               	xorlw	17	; case 120
  8193  000D76  B4D8               	btfsc	status,2,c
  8194  000D78  D7E8               	goto	i2l3336
  8195  000D7A  D103               	goto	i2l3438
  8196  000D7C                     i2l466:
  8197                           
  8198                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  8199  000D7C  BE19               	btfsc	i2printf@flag,7,c
  8200  000D7E  D015               	goto	i2l3352
  8201                           
  8202                           ;doprnt.c: 1253: {
  8203                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  8204  000D80  C014  FFD9         	movff	i2printf@ap,fsr2l
  8205  000D84  C015  FFDA         	movff	i2printf@ap+1,fsr2h
  8206  000D88  CFDE F017          	movff	postinc2,i2printf@val
  8207  000D8C  CFDD F018          	movff	postdec2,i2printf@val+1
  8208  000D90  0E02               	movlw	2
  8209  000D92  2614               	addwf	i2printf@ap,f,c
  8210  000D94  0E00               	movlw	0
  8211  000D96  2215               	addwfc	i2printf@ap+1,f,c
  8212                           
  8213                           ;doprnt.c: 1261: if((int)val < 0) {
  8214  000D98  AE18               	btfss	i2printf@val+1,7,c
  8215  000D9A  D044               	goto	i2l3386
  8216                           
  8217                           ;doprnt.c: 1262: flag |= 0x03;
  8218  000D9C  0E03               	movlw	3
  8219  000D9E  1219               	iorwf	i2printf@flag,f,c
  8220                           
  8221                           ;doprnt.c: 1263: val = -val;
  8222  000DA0  6C17               	negf	i2printf@val,c
  8223  000DA2  1E18               	comf	i2printf@val+1,f,c
  8224  000DA4  B0D8               	btfsc	status,0,c
  8225  000DA6  2A18               	incf	i2printf@val+1,f,c
  8226                           
  8227                           ;doprnt.c: 1264: }
  8228                           ;doprnt.c: 1266: }
  8229  000DA8  D03D               	goto	i2l3386
  8230  000DAA                     i2l3352:
  8231                           
  8232                           ;doprnt.c: 1268: else
  8233                           ;doprnt.c: 1273: {
  8234                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  8235  000DAA  C014  FFD9         	movff	i2printf@ap,fsr2l
  8236  000DAE  C015  FFDA         	movff	i2printf@ap+1,fsr2h
  8237  000DB2  CFDE F017          	movff	postinc2,i2printf@val
  8238  000DB6  CFDD F018          	movff	postdec2,i2printf@val+1
  8239  000DBA  0E02               	movlw	2
  8240  000DBC  2614               	addwf	i2printf@ap,f,c
  8241  000DBE  0E00               	movlw	0
  8242  000DC0  2215               	addwfc	i2printf@ap+1,f,c
  8243                           
  8244                           ;doprnt.c: 1287: }
  8245                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  8246  000DC2  D030               	goto	i2l3386
  8247  000DC4                     i2l3356:
  8248                           
  8249                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  8250  000DC4  0E01               	movlw	1
  8251  000DC6  6E1C               	movwf	i2printf@c,c
  8252  000DC8                     i2l3358:
  8253  000DC8  0E05               	movlw	5
  8254  000DCA  181C               	xorwf	i2printf@c,w,c
  8255  000DCC  B4D8               	btfsc	status,2,c
  8256  000DCE  D032               	goto	i2l3388
  8257                           
  8258                           ;doprnt.c: 1306: if(val < dpowers[c])
  8259  000DD0  501C               	movf	i2printf@c,w,c
  8260  000DD2  0D02               	mullw	2
  8261  000DD4  0E30               	movlw	low _dpowers
  8262  000DD6  24F3               	addwf	prodl,w,c
  8263  000DD8  6EF6               	movwf	tblptrl,c
  8264  000DDA  0EFE               	movlw	high _dpowers
  8265  000DDC  20F4               	addwfc	prodh,w,c
  8266  000DDE  6EF7               	movwf	tblptrh,c
  8267  000DE0                     	if	0	;There are less than 3 active tblptr bytes
  8268  000DE0                     	endif
  8269  000DE0  0009               	tblrd		*+
  8270  000DE2  50F5               	movf	tablat,w,c
  8271  000DE4  5C17               	subwf	i2printf@val,w,c
  8272  000DE6  0009               	tblrd		*+
  8273  000DE8  50F5               	movf	tablat,w,c
  8274  000DEA  5818               	subwfb	i2printf@val+1,w,c
  8275  000DEC  A0D8               	btfss	status,0,c
  8276  000DEE  D022               	goto	i2l3388
  8277                           
  8278                           ;doprnt.c: 1307: break;
  8279  000DF0  2A1C               	incf	i2printf@c,f,c
  8280  000DF2  D7EA               	goto	i2l3358
  8281  000DF4                     i2l3370:
  8282                           
  8283                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  8284  000DF4  0E01               	movlw	1
  8285  000DF6  6E1C               	movwf	i2printf@c,c
  8286  000DF8                     i2l3372:
  8287  000DF8  0E04               	movlw	4
  8288  000DFA  181C               	xorwf	i2printf@c,w,c
  8289  000DFC  B4D8               	btfsc	status,2,c
  8290  000DFE  D01A               	goto	i2l3388
  8291                           
  8292                           ;doprnt.c: 1317: if(val < hexpowers[c])
  8293  000E00  501C               	movf	i2printf@c,w,c
  8294  000E02  0D02               	mullw	2
  8295  000E04  0E3A               	movlw	low _hexpowers
  8296  000E06  24F3               	addwf	prodl,w,c
  8297  000E08  6EF6               	movwf	tblptrl,c
  8298  000E0A  0EFE               	movlw	high _hexpowers
  8299  000E0C  20F4               	addwfc	prodh,w,c
  8300  000E0E  6EF7               	movwf	tblptrh,c
  8301  000E10                     	if	0	;There are less than 3 active tblptr bytes
  8302  000E10                     	endif
  8303  000E10  0009               	tblrd		*+
  8304  000E12  50F5               	movf	tablat,w,c
  8305  000E14  5C17               	subwf	i2printf@val,w,c
  8306  000E16  0009               	tblrd		*+
  8307  000E18  50F5               	movf	tablat,w,c
  8308  000E1A  5818               	subwfb	i2printf@val+1,w,c
  8309  000E1C  A0D8               	btfss	status,0,c
  8310  000E1E  D00A               	goto	i2l3388
  8311                           
  8312                           ;doprnt.c: 1318: break;
  8313  000E20  2A1C               	incf	i2printf@c,f,c
  8314  000E22  D7EA               	goto	i2l3372
  8315  000E24                     i2l3386:
  8316  000E24  5019               	movf	i2printf@flag,w,c
  8317  000E26  0B80               	andlw	128
  8318                           
  8319                           ; Switch size 1, requested type "space"
  8320                           ; Number of cases is 2, Range of values is 0 to 128
  8321                           ; switch strategies available:
  8322                           ; Name         Instructions Cycles
  8323                           ; simple_byte            7     4 (average)
  8324                           ;	Chosen strategy is simple_byte
  8325  000E28  0A00               	xorlw	0	; case 0
  8326  000E2A  B4D8               	btfsc	status,2,c
  8327  000E2C  D7CB               	goto	i2l3356
  8328  000E2E  0A80               	xorlw	128	; case 128
  8329  000E30  B4D8               	btfsc	status,2,c
  8330  000E32  D7E0               	goto	i2l3370
  8331  000E34                     i2l3388:
  8332                           
  8333                           ;doprnt.c: 1345: if(width && flag & 0x03)
  8334  000E34  501A               	movf	i2printf@width,w,c
  8335  000E36  101B               	iorwf	i2printf@width+1,w,c
  8336  000E38  B4D8               	btfsc	status,2,c
  8337  000E3A  D009               	goto	i2l3394
  8338  000E3C  C019  F00F         	movff	i2printf@flag,??i2_printf
  8339  000E40  0E03               	movlw	3
  8340  000E42  160F               	andwf	??i2_printf,f,c
  8341  000E44  B4D8               	btfsc	status,2,c
  8342  000E46  D003               	goto	i2l3394
  8343                           
  8344                           ;doprnt.c: 1346: width--;
  8345  000E48  061A               	decf	i2printf@width,f,c
  8346  000E4A  A0D8               	btfss	status,0,c
  8347  000E4C  061B               	decf	i2printf@width+1,f,c
  8348  000E4E                     i2l3394:
  8349                           
  8350                           ;doprnt.c: 1381: if(width > c)
  8351  000E4E  0E80               	movlw	128
  8352  000E50  BE1C               	btfsc	i2printf@c,7,c
  8353  000E52  0E7F               	movlw	127
  8354  000E54  6E0F               	movwf	??i2_printf& (0+255),c
  8355  000E56  501A               	movf	i2printf@width,w,c
  8356  000E58  5C1C               	subwf	i2printf@c,w,c
  8357  000E5A  501B               	movf	i2printf@width+1,w,c
  8358  000E5C  0A80               	xorlw	128
  8359  000E5E  580F               	subwfb	??i2_printf& (0+255),w,c
  8360  000E60  B0D8               	btfsc	status,0,c
  8361  000E62  D007               	goto	i2l3398
  8362                           
  8363                           ;doprnt.c: 1382: width -= c;
  8364  000E64  501C               	movf	i2printf@c,w,c
  8365  000E66  5E1A               	subwf	i2printf@width,f,c
  8366  000E68  0E00               	movlw	0
  8367  000E6A  BE1C               	btfsc	i2printf@c,7,c
  8368  000E6C  0EFF               	movlw	255
  8369  000E6E  5A1B               	subwfb	i2printf@width+1,f,c
  8370  000E70  D004               	goto	i2l3400
  8371  000E72                     i2l3398:
  8372                           
  8373                           ;doprnt.c: 1383: else
  8374                           ;doprnt.c: 1384: width = 0;
  8375  000E72  0E00               	movlw	0
  8376  000E74  6E1B               	movwf	i2printf@width+1,c
  8377  000E76  0E00               	movlw	0
  8378  000E78  6E1A               	movwf	i2printf@width,c
  8379  000E7A                     i2l3400:
  8380                           
  8381                           ;doprnt.c: 1387: if(flag & 0x04) {
  8382  000E7A  A419               	btfss	i2printf@flag,2,c
  8383  000E7C  D014               	goto	i2l3412
  8384                           
  8385                           ;doprnt.c: 1392: if(flag & 0x03)
  8386  000E7E  C019  F00F         	movff	i2printf@flag,??i2_printf
  8387  000E82  0E03               	movlw	3
  8388  000E84  160F               	andwf	??i2_printf,f,c
  8389  000E86  B4D8               	btfsc	status,2,c
  8390  000E88  D003               	goto	i2l3406
  8391                           
  8392                           ;doprnt.c: 1393: (putch('-') );
  8393  000E8A  0E2D               	movlw	45
  8394  000E8C  ECFE  F00E         	call	i2_putch
  8395  000E90                     i2l3406:
  8396                           
  8397                           ;doprnt.c: 1415: if(width)
  8398  000E90  501A               	movf	i2printf@width,w,c
  8399  000E92  101B               	iorwf	i2printf@width+1,w,c
  8400  000E94  B4D8               	btfsc	status,2,c
  8401  000E96  D01E               	goto	i2l3422
  8402                           
  8403                           ;doprnt.c: 1417: (putch('0') );
  8404                           
  8405                           ;doprnt.c: 1416: do
  8406  000E98  0E30               	movlw	48
  8407  000E9A  ECFE  F00E         	call	i2_putch
  8408                           
  8409                           ;doprnt.c: 1418: while(--width);
  8410  000E9E  061A               	decf	i2printf@width,f,c
  8411  000EA0  A0D8               	btfss	status,0,c
  8412  000EA2  061B               	decf	i2printf@width+1,f,c
  8413  000EA4  D7F5               	goto	i2l3406
  8414  000EA6                     i2l3412:
  8415                           
  8416                           ;doprnt.c: 1422: {
  8417                           ;doprnt.c: 1424: if(width
  8418                           ;doprnt.c: 1428: )
  8419  000EA6  501A               	movf	i2printf@width,w,c
  8420  000EA8  101B               	iorwf	i2printf@width+1,w,c
  8421  000EAA  B4D8               	btfsc	status,2,c
  8422  000EAC  D00A               	goto	i2l3418
  8423  000EAE                     i2l3414:
  8424                           
  8425                           ;doprnt.c: 1430: (putch(' ') );
  8426  000EAE  0E20               	movlw	32
  8427  000EB0  ECFE  F00E         	call	i2_putch
  8428                           
  8429                           ;doprnt.c: 1431: while(--width);
  8430  000EB4  061A               	decf	i2printf@width,f,c
  8431  000EB6  A0D8               	btfss	status,0,c
  8432  000EB8  061B               	decf	i2printf@width+1,f,c
  8433  000EBA  501A               	movf	i2printf@width,w,c
  8434  000EBC  101B               	iorwf	i2printf@width+1,w,c
  8435  000EBE  A4D8               	btfss	status,2,c
  8436  000EC0  D7F6               	goto	i2l3414
  8437  000EC2                     i2l3418:
  8438                           
  8439                           ;doprnt.c: 1438: if(flag & 0x03)
  8440  000EC2  C019  F00F         	movff	i2printf@flag,??i2_printf
  8441  000EC6  0E03               	movlw	3
  8442  000EC8  160F               	andwf	??i2_printf,f,c
  8443  000ECA  B4D8               	btfsc	status,2,c
  8444  000ECC  D003               	goto	i2l3422
  8445                           
  8446                           ;doprnt.c: 1439: (putch('-') );
  8447  000ECE  0E2D               	movlw	45
  8448  000ED0  ECFE  F00E         	call	i2_putch
  8449  000ED4                     i2l3422:
  8450                           
  8451                           ;doprnt.c: 1469: }
  8452                           ;doprnt.c: 1472: prec = c;
  8453  000ED4  C01C  F016         	movff	i2printf@c,i2printf@prec
  8454                           
  8455                           ;doprnt.c: 1474: while(prec--) {
  8456  000ED8  D050               	goto	i2l3436
  8457  000EDA                     i2l3424:
  8458                           
  8459                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  8460  000EDA  5016               	movf	i2printf@prec,w,c
  8461  000EDC  0D02               	mullw	2
  8462  000EDE  0E30               	movlw	low _dpowers
  8463  000EE0  24F3               	addwf	prodl,w,c
  8464  000EE2  6EF6               	movwf	tblptrl,c
  8465  000EE4  0EFE               	movlw	high _dpowers
  8466  000EE6  20F4               	addwfc	prodh,w,c
  8467  000EE8  6EF7               	movwf	tblptrh,c
  8468  000EEA                     	if	0	;There are less than 3 active tblptr bytes
  8469  000EEA                     	endif
  8470  000EEA  0009               	tblrd		*+
  8471  000EEC  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  8472  000EF0  000A               	tblrd		*-
  8473  000EF2  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  8474  000EF6  C017  F001         	movff	i2printf@val,i2___lwdiv@dividend
  8475  000EFA  C018  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  8476  000EFE  EC67  F00D         	call	i2___lwdiv	;wreg free
  8477  000F02  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
  8478  000F06  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
  8479  000F0A  0E00               	movlw	0
  8480  000F0C  6E0B               	movwf	i2___lwmod@divisor+1,c
  8481  000F0E  0E0A               	movlw	10
  8482  000F10  6E0A               	movwf	i2___lwmod@divisor,c
  8483  000F12  EC22  F00E         	call	i2___lwmod	;wreg free
  8484  000F16  5008               	movf	?i2___lwmod,w,c
  8485  000F18  0F30               	addlw	48
  8486  000F1A  6E1C               	movwf	i2printf@c,c
  8487                           
  8488                           ;doprnt.c: 1491: break;
  8489  000F1C  D02B               	goto	i2l3434
  8490  000F1E                     i2l3426:
  8491                           
  8492                           ;doprnt.c: 1499: {
  8493                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  8494  000F1E  C017  F001         	movff	i2printf@val,i2___lwdiv@dividend
  8495  000F22  C018  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  8496  000F26  5016               	movf	i2printf@prec,w,c
  8497  000F28  0D02               	mullw	2
  8498  000F2A  0E3A               	movlw	low _hexpowers
  8499  000F2C  24F3               	addwf	prodl,w,c
  8500  000F2E  6EF6               	movwf	tblptrl,c
  8501  000F30  0EFE               	movlw	high _hexpowers
  8502  000F32  20F4               	addwfc	prodh,w,c
  8503  000F34  6EF7               	movwf	tblptrh,c
  8504  000F36                     	if	0	;There are less than 3 active tblptr bytes
  8505  000F36                     	endif
  8506  000F36  0009               	tblrd		*+
  8507  000F38  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  8508  000F3C  000A               	tblrd		*-
  8509  000F3E  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  8510  000F42  EC67  F00D         	call	i2___lwdiv	;wreg free
  8511  000F46  5001               	movf	?i2___lwdiv,w,c
  8512  000F48  0B0F               	andlw	15
  8513  000F4A  6E13               	movwf	i2printf@idx,c
  8514                           
  8515                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  8516  000F4C  5013               	movf	i2printf@idx,w,c
  8517  000F4E  0D01               	mullw	1
  8518  000F50  0EDF               	movlw	low STR_27
  8519  000F52  24F3               	addwf	prodl,w,c
  8520  000F54  6EF6               	movwf	tblptrl,c
  8521  000F56  0EFE               	movlw	high STR_27
  8522  000F58  20F4               	addwfc	prodh,w,c
  8523  000F5A  6EF7               	movwf	tblptrh,c
  8524  000F5C                     	if	0	;There are less than 3 active tblptr bytes
  8525  000F5C                     	endif
  8526  000F5C  0008               	tblrd		*
  8527  000F5E  CFF5 F01C          	movff	tablat,i2printf@c
  8528                           
  8529                           ;doprnt.c: 1523: }
  8530                           
  8531                           ;doprnt.c: 1508: }
  8532                           ;doprnt.c: 1510: break;
  8533  000F62  D008               	goto	i2l3434
  8534  000F64                     i2l3432:
  8535  000F64  5019               	movf	i2printf@flag,w,c
  8536  000F66  0B80               	andlw	128
  8537                           
  8538                           ; Switch size 1, requested type "space"
  8539                           ; Number of cases is 2, Range of values is 0 to 128
  8540                           ; switch strategies available:
  8541                           ; Name         Instructions Cycles
  8542                           ; simple_byte            7     4 (average)
  8543                           ;	Chosen strategy is simple_byte
  8544  000F68  0A00               	xorlw	0	; case 0
  8545  000F6A  B4D8               	btfsc	status,2,c
  8546  000F6C  D7B6               	goto	i2l3424
  8547  000F6E  0A80               	xorlw	128	; case 128
  8548  000F70  B4D8               	btfsc	status,2,c
  8549  000F72  D7D5               	goto	i2l3426
  8550  000F74                     i2l3434:
  8551                           
  8552                           ;doprnt.c: 1524: (putch(c) );
  8553  000F74  501C               	movf	i2printf@c,w,c
  8554  000F76  ECFE  F00E         	call	i2_putch
  8555  000F7A                     i2l3436:
  8556  000F7A  0616               	decf	i2printf@prec,f,c
  8557  000F7C  2816               	incf	i2printf@prec,w,c
  8558  000F7E  A4D8               	btfss	status,2,c
  8559  000F80  D7F1               	goto	i2l3432
  8560  000F82                     i2l3438:
  8561  000F82  C00D  FFF6         	movff	i2printf@f,tblptrl
  8562  000F86  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  8563  000F8A  4A0D               	infsnz	i2printf@f,f,c
  8564  000F8C  2A0E               	incf	i2printf@f+1,f,c
  8565  000F8E                     	if	0	;tblptru may be non-zero
  8566  000F8E                     	endif
  8567  000F8E                     	if	0	;tblptru may be non-zero
  8568  000F8E                     	endif
  8569  000F8E  0008               	tblrd		*
  8570  000F90  CFF5 F01C          	movff	tablat,i2printf@c
  8571  000F94  501C               	movf	i2printf@c,w,c
  8572  000F96  B4D8               	btfsc	status,2,c
  8573  000F98  0012               	return	
  8574  000F9A  D67F               	goto	i2l3312
  8575  000F9C                     __end_ofi2_printf:
  8576                           	opt stack 0
  8577                           pclatu	equ	0xFFB
  8578                           pclath	equ	0xFFA
  8579                           tblptru	equ	0xFF8
  8580                           tblptrh	equ	0xFF7
  8581                           tblptrl	equ	0xFF6
  8582                           tablat	equ	0xFF5
  8583                           prodh	equ	0xFF4
  8584                           prodl	equ	0xFF3
  8585                           intcon	equ	0xFF2
  8586                           intcon2	equ	0xFF1
  8587                           intcon3	equ	0xFF0
  8588                           postinc0	equ	0xFEE
  8589                           fsr0h	equ	0xFEA
  8590                           fsr0l	equ	0xFE9
  8591                           wreg	equ	0xFE8
  8592                           fsr1h	equ	0xFE2
  8593                           fsr1l	equ	0xFE1
  8594                           indf2	equ	0xFDF
  8595                           postinc2	equ	0xFDE
  8596                           postdec2	equ	0xFDD
  8597                           fsr2h	equ	0xFDA
  8598                           fsr2l	equ	0xFD9
  8599                           status	equ	0xFD8
  8600                           
  8601 ;; *************** function i2_putch *****************
  8602 ;; Defined at:
  8603 ;;		line 23 in file "../lcd.c"
  8604 ;; Parameters:    Size  Location     Type
  8605 ;;  data            1    wreg     unsigned char 
  8606 ;; Auto vars:     Size  Location     Type
  8607 ;;  data            1    2[COMRAM] unsigned char 
  8608 ;; Return value:  Size  Location     Type
  8609 ;;                  1    wreg      void 
  8610 ;; Registers used:
  8611 ;;		wreg, status,2, status,0, cstack
  8612 ;; Tracked objects:
  8613 ;;		On entry : 0/0
  8614 ;;		On exit  : 0/0
  8615 ;;		Unchanged: 0/0
  8616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8617 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8618 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8619 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8620 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8621 ;;Total ram usage:        1 bytes
  8622 ;; Hardware stack levels used:    1
  8623 ;; Hardware stack levels required when called:    1
  8624 ;; This function calls:
  8625 ;;		i2_lcdNibble
  8626 ;; This function is called by:
  8627 ;;		i2_printf
  8628 ;; This function uses a non-reentrant model
  8629 ;;
  8630                           
  8631                           	psect	text29
  8632  001DFC                     __ptext29:
  8633                           	opt stack 0
  8634  001DFC                     i2_putch:
  8635                           	opt stack 22
  8636                           
  8637                           ;incstack = 0
  8638                           ;i2putch@data stored from wreg
  8639  001DFC  6E03               	movwf	i2putch@data,c
  8640                           
  8641                           ;lcd.c: 24: LATDbits.LATD2 = 1;
  8642  001DFE  848C               	bsf	3980,2,c	;volatile
  8643                           
  8644                           ;lcd.c: 25: lcdNibble(data);
  8645  001E00  5003               	movf	i2putch@data,w,c
  8646  001E02  ECB7  F00D         	call	i2_lcdNibble
  8647  001E06  0012               	return		;funcret
  8648  001E08                     __end_ofi2_putch:
  8649                           	opt stack 0
  8650                           pclatu	equ	0xFFB
  8651                           pclath	equ	0xFFA
  8652                           tblptru	equ	0xFF8
  8653                           tblptrh	equ	0xFF7
  8654                           tblptrl	equ	0xFF6
  8655                           tablat	equ	0xFF5
  8656                           prodh	equ	0xFF4
  8657                           prodl	equ	0xFF3
  8658                           intcon	equ	0xFF2
  8659                           intcon2	equ	0xFF1
  8660                           intcon3	equ	0xFF0
  8661                           postinc0	equ	0xFEE
  8662                           fsr0h	equ	0xFEA
  8663                           fsr0l	equ	0xFE9
  8664                           wreg	equ	0xFE8
  8665                           fsr1h	equ	0xFE2
  8666                           fsr1l	equ	0xFE1
  8667                           indf2	equ	0xFDF
  8668                           postinc2	equ	0xFDE
  8669                           postdec2	equ	0xFDD
  8670                           fsr2h	equ	0xFDA
  8671                           fsr2l	equ	0xFD9
  8672                           status	equ	0xFD8
  8673                           
  8674 ;; *************** function i2_isdigit *****************
  8675 ;; Defined at:
  8676 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  8677 ;; Parameters:    Size  Location     Type
  8678 ;;  c               1    wreg     unsigned char 
  8679 ;; Auto vars:     Size  Location     Type
  8680 ;;  c               1    2[COMRAM] unsigned char 
  8681 ;; Return value:  Size  Location     Type
  8682 ;;		None               void
  8683 ;; Registers used:
  8684 ;;		wreg, status,2, status,0
  8685 ;; Tracked objects:
  8686 ;;		On entry : 0/0
  8687 ;;		On exit  : 0/0
  8688 ;;		Unchanged: 0/0
  8689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8690 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8691 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8692 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8693 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8694 ;;Total ram usage:        3 bytes
  8695 ;; Hardware stack levels used:    1
  8696 ;; This function calls:
  8697 ;;		Nothing
  8698 ;; This function is called by:
  8699 ;;		i2_printf
  8700 ;; This function uses a non-reentrant model
  8701 ;;
  8702                           
  8703                           	psect	text30
  8704  001D74                     __ptext30:
  8705                           	opt stack 0
  8706  001D74                     i2_isdigit:
  8707                           	opt stack 23
  8708                           
  8709                           ;incstack = 0
  8710                           ;i2isdigit@c stored from wreg
  8711  001D74  6E03               	movwf	i2isdigit@c,c
  8712  001D76  0E00               	movlw	0
  8713  001D78  6E02               	movwf	i2_isdigit$944,c
  8714  001D7A  0E3A               	movlw	58
  8715  001D7C  6003               	cpfslt	i2isdigit@c,c
  8716  001D7E  D005               	goto	i2l2912
  8717  001D80  0E2F               	movlw	47
  8718  001D82  6403               	cpfsgt	i2isdigit@c,c
  8719  001D84  D002               	goto	i2l2912
  8720  001D86  0E01               	movlw	1
  8721  001D88  6E02               	movwf	i2_isdigit$944,c
  8722  001D8A                     i2l2912:
  8723  001D8A  C002  F001         	movff	i2_isdigit$944,??i2_isdigit
  8724  001D8E  3001               	rrcf	??i2_isdigit,w,c
  8725  001D90  0012               	return	
  8726  001D92                     __end_ofi2_isdigit:
  8727                           	opt stack 0
  8728                           pclatu	equ	0xFFB
  8729                           pclath	equ	0xFFA
  8730                           tblptru	equ	0xFF8
  8731                           tblptrh	equ	0xFF7
  8732                           tblptrl	equ	0xFF6
  8733                           tablat	equ	0xFF5
  8734                           prodh	equ	0xFF4
  8735                           prodl	equ	0xFF3
  8736                           intcon	equ	0xFF2
  8737                           intcon2	equ	0xFF1
  8738                           intcon3	equ	0xFF0
  8739                           postinc0	equ	0xFEE
  8740                           fsr0h	equ	0xFEA
  8741                           fsr0l	equ	0xFE9
  8742                           wreg	equ	0xFE8
  8743                           fsr1h	equ	0xFE2
  8744                           fsr1l	equ	0xFE1
  8745                           indf2	equ	0xFDF
  8746                           postinc2	equ	0xFDE
  8747                           postdec2	equ	0xFDD
  8748                           fsr2h	equ	0xFDA
  8749                           fsr2l	equ	0xFD9
  8750                           status	equ	0xFD8
  8751                           
  8752 ;; *************** function i2___wmul *****************
  8753 ;; Defined at:
  8754 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  8755 ;; Parameters:    Size  Location     Type
  8756 ;;  multiplier      2    0[COMRAM] unsigned int 
  8757 ;;  multiplicand    2    2[COMRAM] unsigned int 
  8758 ;; Auto vars:     Size  Location     Type
  8759 ;;  __wmul          2    4[COMRAM] unsigned int 
  8760 ;; Return value:  Size  Location     Type
  8761 ;;                  2    0[COMRAM] unsigned int 
  8762 ;; Registers used:
  8763 ;;		wreg, status,2, status,0, prodl, prodh
  8764 ;; Tracked objects:
  8765 ;;		On entry : 0/0
  8766 ;;		On exit  : 0/0
  8767 ;;		Unchanged: 0/0
  8768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8769 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8770 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8771 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8772 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8773 ;;Total ram usage:        6 bytes
  8774 ;; Hardware stack levels used:    1
  8775 ;; This function calls:
  8776 ;;		Nothing
  8777 ;; This function is called by:
  8778 ;;		i2_printf
  8779 ;; This function uses a non-reentrant model
  8780 ;;
  8781                           
  8782                           	psect	text31
  8783  001D0A                     __ptext31:
  8784                           	opt stack 0
  8785  001D0A                     i2___wmul:
  8786                           	opt stack 23
  8787                           
  8788                           ;incstack = 0
  8789  001D0A  5001               	movf	i2___wmul@multiplier,w,c
  8790  001D0C  0203               	mulwf	i2___wmul@multiplicand,c
  8791  001D0E  CFF3 F005          	movff	prodl,i2___wmul@product
  8792  001D12  CFF4 F006          	movff	prodh,i2___wmul@product+1
  8793  001D16  5001               	movf	i2___wmul@multiplier,w,c
  8794  001D18  0204               	mulwf	i2___wmul@multiplicand+1,c
  8795  001D1A  50F3               	movf	prodl,w,c
  8796  001D1C  2606               	addwf	i2___wmul@product+1,f,c
  8797  001D1E  5002               	movf	i2___wmul@multiplier+1,w,c
  8798  001D20  0203               	mulwf	i2___wmul@multiplicand,c
  8799  001D22  50F3               	movf	prodl,w,c
  8800  001D24  2606               	addwf	i2___wmul@product+1,f,c
  8801  001D26  C005  F001         	movff	i2___wmul@product,?i2___wmul
  8802  001D2A  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
  8803  001D2E  0012               	return	
  8804  001D30                     __end_ofi2___wmul:
  8805                           	opt stack 0
  8806                           pclatu	equ	0xFFB
  8807                           pclath	equ	0xFFA
  8808                           tblptru	equ	0xFF8
  8809                           tblptrh	equ	0xFF7
  8810                           tblptrl	equ	0xFF6
  8811                           tablat	equ	0xFF5
  8812                           prodh	equ	0xFF4
  8813                           prodl	equ	0xFF3
  8814                           intcon	equ	0xFF2
  8815                           intcon2	equ	0xFF1
  8816                           intcon3	equ	0xFF0
  8817                           postinc0	equ	0xFEE
  8818                           fsr0h	equ	0xFEA
  8819                           fsr0l	equ	0xFE9
  8820                           wreg	equ	0xFE8
  8821                           fsr1h	equ	0xFE2
  8822                           fsr1l	equ	0xFE1
  8823                           indf2	equ	0xFDF
  8824                           postinc2	equ	0xFDE
  8825                           postdec2	equ	0xFDD
  8826                           fsr2h	equ	0xFDA
  8827                           fsr2l	equ	0xFD9
  8828                           status	equ	0xFD8
  8829                           
  8830 ;; *************** function i2___lwmod *****************
  8831 ;; Defined at:
  8832 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  8833 ;; Parameters:    Size  Location     Type
  8834 ;;  dividend        2    7[COMRAM] unsigned int 
  8835 ;;  divisor         2    9[COMRAM] unsigned int 
  8836 ;; Auto vars:     Size  Location     Type
  8837 ;;  __lwmod         1   11[COMRAM] unsigned char 
  8838 ;; Return value:  Size  Location     Type
  8839 ;;                  2    7[COMRAM] unsigned int 
  8840 ;; Registers used:
  8841 ;;		wreg, status,2, status,0
  8842 ;; Tracked objects:
  8843 ;;		On entry : 0/0
  8844 ;;		On exit  : 0/0
  8845 ;;		Unchanged: 0/0
  8846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8847 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8848 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8849 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8850 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8851 ;;Total ram usage:        5 bytes
  8852 ;; Hardware stack levels used:    1
  8853 ;; This function calls:
  8854 ;;		Nothing
  8855 ;; This function is called by:
  8856 ;;		i2_printf
  8857 ;; This function uses a non-reentrant model
  8858 ;;
  8859                           
  8860                           	psect	text32
  8861  001C44                     __ptext32:
  8862                           	opt stack 0
  8863  001C44                     i2___lwmod:
  8864                           	opt stack 23
  8865                           
  8866                           ;incstack = 0
  8867  001C44  500A               	movf	i2___lwmod@divisor,w,c
  8868  001C46  100B               	iorwf	i2___lwmod@divisor+1,w,c
  8869  001C48  B4D8               	btfsc	status,2,c
  8870  001C4A  D018               	goto	i2l921
  8871  001C4C  0E01               	movlw	1
  8872  001C4E  6E0C               	movwf	i2___lwmod@counter,c
  8873  001C50  D004               	goto	i2l2944
  8874  001C52                     i2l2942:
  8875  001C52  90D8               	bcf	status,0,c
  8876  001C54  360A               	rlcf	i2___lwmod@divisor,f,c
  8877  001C56  360B               	rlcf	i2___lwmod@divisor+1,f,c
  8878  001C58  2A0C               	incf	i2___lwmod@counter,f,c
  8879  001C5A                     i2l2944:
  8880  001C5A  AE0B               	btfss	i2___lwmod@divisor+1,7,c
  8881  001C5C  D7FA               	goto	i2l2942
  8882  001C5E                     i2l2946:
  8883  001C5E  500A               	movf	i2___lwmod@divisor,w,c
  8884  001C60  5C08               	subwf	i2___lwmod@dividend,w,c
  8885  001C62  500B               	movf	i2___lwmod@divisor+1,w,c
  8886  001C64  5809               	subwfb	i2___lwmod@dividend+1,w,c
  8887  001C66  A0D8               	btfss	status,0,c
  8888  001C68  D004               	goto	i2l2950
  8889  001C6A  500A               	movf	i2___lwmod@divisor,w,c
  8890  001C6C  5E08               	subwf	i2___lwmod@dividend,f,c
  8891  001C6E  500B               	movf	i2___lwmod@divisor+1,w,c
  8892  001C70  5A09               	subwfb	i2___lwmod@dividend+1,f,c
  8893  001C72                     i2l2950:
  8894  001C72  90D8               	bcf	status,0,c
  8895  001C74  320B               	rrcf	i2___lwmod@divisor+1,f,c
  8896  001C76  320A               	rrcf	i2___lwmod@divisor,f,c
  8897  001C78  2E0C               	decfsz	i2___lwmod@counter,f,c
  8898  001C7A  D7F1               	goto	i2l2946
  8899  001C7C                     i2l921:
  8900  001C7C  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
  8901  001C80  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
  8902  001C84  0012               	return		;funcret
  8903  001C86                     __end_ofi2___lwmod:
  8904                           	opt stack 0
  8905                           pclatu	equ	0xFFB
  8906                           pclath	equ	0xFFA
  8907                           tblptru	equ	0xFF8
  8908                           tblptrh	equ	0xFF7
  8909                           tblptrl	equ	0xFF6
  8910                           tablat	equ	0xFF5
  8911                           prodh	equ	0xFF4
  8912                           prodl	equ	0xFF3
  8913                           intcon	equ	0xFF2
  8914                           intcon2	equ	0xFF1
  8915                           intcon3	equ	0xFF0
  8916                           postinc0	equ	0xFEE
  8917                           fsr0h	equ	0xFEA
  8918                           fsr0l	equ	0xFE9
  8919                           wreg	equ	0xFE8
  8920                           fsr1h	equ	0xFE2
  8921                           fsr1l	equ	0xFE1
  8922                           indf2	equ	0xFDF
  8923                           postinc2	equ	0xFDE
  8924                           postdec2	equ	0xFDD
  8925                           fsr2h	equ	0xFDA
  8926                           fsr2l	equ	0xFD9
  8927                           status	equ	0xFD8
  8928                           
  8929 ;; *************** function i2___lwdiv *****************
  8930 ;; Defined at:
  8931 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  8932 ;; Parameters:    Size  Location     Type
  8933 ;;  dividend        2    0[COMRAM] unsigned int 
  8934 ;;  divisor         2    2[COMRAM] unsigned int 
  8935 ;; Auto vars:     Size  Location     Type
  8936 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  8937 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  8938 ;; Return value:  Size  Location     Type
  8939 ;;                  2    0[COMRAM] unsigned int 
  8940 ;; Registers used:
  8941 ;;		wreg, status,2, status,0
  8942 ;; Tracked objects:
  8943 ;;		On entry : 0/0
  8944 ;;		On exit  : 0/0
  8945 ;;		Unchanged: 0/0
  8946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8947 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8948 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8949 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8950 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8951 ;;Total ram usage:        7 bytes
  8952 ;; Hardware stack levels used:    1
  8953 ;; This function calls:
  8954 ;;		Nothing
  8955 ;; This function is called by:
  8956 ;;		i2_printf
  8957 ;; This function uses a non-reentrant model
  8958 ;;
  8959                           
  8960                           	psect	text33
  8961  001ACE                     __ptext33:
  8962                           	opt stack 0
  8963  001ACE                     i2___lwdiv:
  8964                           	opt stack 23
  8965                           
  8966                           ;incstack = 0
  8967  001ACE  0E00               	movlw	0
  8968  001AD0  6E06               	movwf	i2___lwdiv@quotient+1,c
  8969  001AD2  0E00               	movlw	0
  8970  001AD4  6E05               	movwf	i2___lwdiv@quotient,c
  8971  001AD6  5003               	movf	i2___lwdiv@divisor,w,c
  8972  001AD8  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  8973  001ADA  B4D8               	btfsc	status,2,c
  8974  001ADC  D01C               	goto	i2l911
  8975  001ADE  0E01               	movlw	1
  8976  001AE0  6E07               	movwf	i2___lwdiv@counter,c
  8977  001AE2  D004               	goto	i2l2924
  8978  001AE4                     i2l2922:
  8979  001AE4  90D8               	bcf	status,0,c
  8980  001AE6  3603               	rlcf	i2___lwdiv@divisor,f,c
  8981  001AE8  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  8982  001AEA  2A07               	incf	i2___lwdiv@counter,f,c
  8983  001AEC                     i2l2924:
  8984  001AEC  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  8985  001AEE  D7FA               	goto	i2l2922
  8986  001AF0                     i2l2926:
  8987  001AF0  90D8               	bcf	status,0,c
  8988  001AF2  3605               	rlcf	i2___lwdiv@quotient,f,c
  8989  001AF4  3606               	rlcf	i2___lwdiv@quotient+1,f,c
  8990  001AF6  5003               	movf	i2___lwdiv@divisor,w,c
  8991  001AF8  5C01               	subwf	i2___lwdiv@dividend,w,c
  8992  001AFA  5004               	movf	i2___lwdiv@divisor+1,w,c
  8993  001AFC  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  8994  001AFE  A0D8               	btfss	status,0,c
  8995  001B00  D005               	goto	i2l2934
  8996  001B02  5003               	movf	i2___lwdiv@divisor,w,c
  8997  001B04  5E01               	subwf	i2___lwdiv@dividend,f,c
  8998  001B06  5004               	movf	i2___lwdiv@divisor+1,w,c
  8999  001B08  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  9000  001B0A  8005               	bsf	i2___lwdiv@quotient,0,c
  9001  001B0C                     i2l2934:
  9002  001B0C  90D8               	bcf	status,0,c
  9003  001B0E  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  9004  001B10  3203               	rrcf	i2___lwdiv@divisor,f,c
  9005  001B12  2E07               	decfsz	i2___lwdiv@counter,f,c
  9006  001B14  D7ED               	goto	i2l2926
  9007  001B16                     i2l911:
  9008  001B16  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  9009  001B1A  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  9010  001B1E  0012               	return		;funcret
  9011  001B20                     __end_ofi2___lwdiv:
  9012                           	opt stack 0
  9013                           pclatu	equ	0xFFB
  9014                           pclath	equ	0xFFA
  9015                           tblptru	equ	0xFF8
  9016                           tblptrh	equ	0xFF7
  9017                           tblptrl	equ	0xFF6
  9018                           tablat	equ	0xFF5
  9019                           prodh	equ	0xFF4
  9020                           prodl	equ	0xFF3
  9021                           intcon	equ	0xFF2
  9022                           intcon2	equ	0xFF1
  9023                           intcon3	equ	0xFF0
  9024                           postinc0	equ	0xFEE
  9025                           fsr0h	equ	0xFEA
  9026                           fsr0l	equ	0xFE9
  9027                           wreg	equ	0xFE8
  9028                           fsr1h	equ	0xFE2
  9029                           fsr1l	equ	0xFE1
  9030                           indf2	equ	0xFDF
  9031                           postinc2	equ	0xFDE
  9032                           postdec2	equ	0xFDD
  9033                           fsr2h	equ	0xFDA
  9034                           fsr2l	equ	0xFD9
  9035                           status	equ	0xFD8
  9036                           
  9037 ;; *************** function i2_lcdInst *****************
  9038 ;; Defined at:
  9039 ;;		line 18 in file "../lcd.c"
  9040 ;; Parameters:    Size  Location     Type
  9041 ;;  data            1    wreg     unsigned char 
  9042 ;; Auto vars:     Size  Location     Type
  9043 ;;  data            1    2[COMRAM] unsigned char 
  9044 ;; Return value:  Size  Location     Type
  9045 ;;                  1    wreg      void 
  9046 ;; Registers used:
  9047 ;;		wreg, status,2, status,0, cstack
  9048 ;; Tracked objects:
  9049 ;;		On entry : 0/0
  9050 ;;		On exit  : 0/0
  9051 ;;		Unchanged: 0/0
  9052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9053 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9054 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9055 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9056 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9057 ;;Total ram usage:        1 bytes
  9058 ;; Hardware stack levels used:    1
  9059 ;; Hardware stack levels required when called:    1
  9060 ;; This function calls:
  9061 ;;		i2_lcdNibble
  9062 ;; This function is called by:
  9063 ;;		_keypressed
  9064 ;; This function uses a non-reentrant model
  9065 ;;
  9066                           
  9067                           	psect	text34
  9068  001E08                     __ptext34:
  9069                           	opt stack 0
  9070  001E08                     i2_lcdInst:
  9071                           	opt stack 23
  9072                           
  9073                           ;incstack = 0
  9074                           ;i2lcdInst@data stored from wreg
  9075  001E08  6E03               	movwf	i2lcdInst@data,c
  9076                           
  9077                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  9078  001E0A  948C               	bcf	3980,2,c	;volatile
  9079                           
  9080                           ;lcd.c: 20: lcdNibble(data);
  9081  001E0C  5003               	movf	i2lcdInst@data,w,c
  9082  001E0E  ECB7  F00D         	call	i2_lcdNibble
  9083  001E12  0012               	return		;funcret
  9084  001E14                     __end_ofi2_lcdInst:
  9085                           	opt stack 0
  9086                           pclatu	equ	0xFFB
  9087                           pclath	equ	0xFFA
  9088                           tblptru	equ	0xFF8
  9089                           tblptrh	equ	0xFF7
  9090                           tblptrl	equ	0xFF6
  9091                           tablat	equ	0xFF5
  9092                           prodh	equ	0xFF4
  9093                           prodl	equ	0xFF3
  9094                           intcon	equ	0xFF2
  9095                           intcon2	equ	0xFF1
  9096                           intcon3	equ	0xFF0
  9097                           postinc0	equ	0xFEE
  9098                           fsr0h	equ	0xFEA
  9099                           fsr0l	equ	0xFE9
  9100                           wreg	equ	0xFE8
  9101                           fsr1h	equ	0xFE2
  9102                           fsr1l	equ	0xFE1
  9103                           indf2	equ	0xFDF
  9104                           postinc2	equ	0xFDE
  9105                           postdec2	equ	0xFDD
  9106                           fsr2h	equ	0xFDA
  9107                           fsr2l	equ	0xFD9
  9108                           status	equ	0xFD8
  9109                           
  9110 ;; *************** function i2_lcdNibble *****************
  9111 ;; Defined at:
  9112 ;;		line 28 in file "../lcd.c"
  9113 ;; Parameters:    Size  Location     Type
  9114 ;;  data            1    wreg     unsigned char 
  9115 ;; Auto vars:     Size  Location     Type
  9116 ;;  data            1    1[COMRAM] unsigned char 
  9117 ;;  lcdNibble       1    0[COMRAM] unsigned char 
  9118 ;; Return value:  Size  Location     Type
  9119 ;;                  1    wreg      void 
  9120 ;; Registers used:
  9121 ;;		wreg, status,2, status,0
  9122 ;; Tracked objects:
  9123 ;;		On entry : 0/0
  9124 ;;		On exit  : 0/0
  9125 ;;		Unchanged: 0/0
  9126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9128 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9129 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9130 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9131 ;;Total ram usage:        2 bytes
  9132 ;; Hardware stack levels used:    1
  9133 ;; This function calls:
  9134 ;;		Nothing
  9135 ;; This function is called by:
  9136 ;;		i2_lcdInst
  9137 ;;		i2_putch
  9138 ;; This function uses a non-reentrant model
  9139 ;;
  9140                           
  9141                           	psect	text35
  9142  001B6E                     __ptext35:
  9143                           	opt stack 0
  9144  001B6E                     i2_lcdNibble:
  9145                           	opt stack 22
  9146                           
  9147                           ;incstack = 0
  9148                           ;i2lcdNibble@data stored from wreg
  9149  001B6E  6E02               	movwf	i2lcdNibble@data,c
  9150                           
  9151                           ;lcd.c: 30: char temp = data & 0xF0;
  9152  001B70  5002               	movf	i2lcdNibble@data,w,c
  9153  001B72  0BF0               	andlw	240
  9154  001B74  6E01               	movwf	i2lcdNibble@temp,c
  9155                           
  9156                           ;lcd.c: 31: LATD = LATD & 0x0F;
  9157  001B76  508C               	movf	3980,w,c	;volatile
  9158  001B78  0B0F               	andlw	15
  9159  001B7A  6E8C               	movwf	3980,c	;volatile
  9160                           
  9161                           ;lcd.c: 32: LATD = temp | LATD;
  9162  001B7C  5001               	movf	i2lcdNibble@temp,w,c
  9163  001B7E  108C               	iorwf	3980,w,c	;volatile
  9164  001B80  6E8C               	movwf	3980,c	;volatile
  9165                           
  9166                           ;lcd.c: 34: LATDbits.LATD3 = 0;
  9167  001B82  968C               	bcf	3980,3,c	;volatile
  9168                           
  9169                           ;lcd.c: 35: _delay((unsigned long)((30)*(10000000/4000000.0)));
  9170  001B84  0E19               	movlw	25
  9171  001B86                     i2u544_47:
  9172  001B86  2EE8               	decfsz	wreg,f,c
  9173  001B88  D7FE               	bra	i2u544_47
  9174                           
  9175                           ;lcd.c: 36: LATDbits.LATD3 = 1;
  9176  001B8A  868C               	bsf	3980,3,c	;volatile
  9177                           
  9178                           ;lcd.c: 37: _delay((unsigned long)((30)*(10000000/4000000.0)));
  9179  001B8C  0E19               	movlw	25
  9180  001B8E                     i2u545_47:
  9181  001B8E  2EE8               	decfsz	wreg,f,c
  9182  001B90  D7FE               	bra	i2u545_47
  9183                           
  9184                           ;lcd.c: 39: data = data << 4;
  9185  001B92  3802               	swapf	i2lcdNibble@data,w,c
  9186  001B94  0BF0               	andlw	240
  9187  001B96  6E02               	movwf	i2lcdNibble@data,c
  9188                           
  9189                           ;lcd.c: 41: temp = data & 0xF0;
  9190  001B98  5002               	movf	i2lcdNibble@data,w,c
  9191  001B9A  0BF0               	andlw	240
  9192  001B9C  6E01               	movwf	i2lcdNibble@temp,c
  9193                           
  9194                           ;lcd.c: 42: LATD = LATD & 0x0F;
  9195  001B9E  508C               	movf	3980,w,c	;volatile
  9196  001BA0  0B0F               	andlw	15
  9197  001BA2  6E8C               	movwf	3980,c	;volatile
  9198                           
  9199                           ;lcd.c: 43: LATD = temp | LATD;
  9200  001BA4  5001               	movf	i2lcdNibble@temp,w,c
  9201  001BA6  108C               	iorwf	3980,w,c	;volatile
  9202  001BA8  6E8C               	movwf	3980,c	;volatile
  9203                           
  9204                           ;lcd.c: 45: LATDbits.LATD3 = 0;
  9205  001BAA  968C               	bcf	3980,3,c	;volatile
  9206                           
  9207                           ;lcd.c: 46: _delay((unsigned long)((30)*(10000000/4000000.0)));
  9208  001BAC  0E19               	movlw	25
  9209  001BAE                     i2u546_47:
  9210  001BAE  2EE8               	decfsz	wreg,f,c
  9211  001BB0  D7FE               	bra	i2u546_47
  9212                           
  9213                           ;lcd.c: 47: LATDbits.LATD3 = 1;
  9214  001BB2  868C               	bsf	3980,3,c	;volatile
  9215                           
  9216                           ;lcd.c: 48: _delay((unsigned long)((30)*(10000000/4000000.0)));
  9217  001BB4  0E19               	movlw	25
  9218  001BB6                     i2u547_47:
  9219  001BB6  2EE8               	decfsz	wreg,f,c
  9220  001BB8  D7FE               	bra	i2u547_47
  9221  001BBA  0012               	return		;funcret
  9222  001BBC                     __end_ofi2_lcdNibble:
  9223                           	opt stack 0
  9224                           pclatu	equ	0xFFB
  9225                           pclath	equ	0xFFA
  9226                           tblptru	equ	0xFF8
  9227                           tblptrh	equ	0xFF7
  9228                           tblptrl	equ	0xFF6
  9229                           tablat	equ	0xFF5
  9230                           prodh	equ	0xFF4
  9231                           prodl	equ	0xFF3
  9232                           intcon	equ	0xFF2
  9233                           intcon2	equ	0xFF1
  9234                           intcon3	equ	0xFF0
  9235                           postinc0	equ	0xFEE
  9236                           fsr0h	equ	0xFEA
  9237                           fsr0l	equ	0xFE9
  9238                           wreg	equ	0xFE8
  9239                           fsr1h	equ	0xFE2
  9240                           fsr1l	equ	0xFE1
  9241                           indf2	equ	0xFDF
  9242                           postinc2	equ	0xFDE
  9243                           postdec2	equ	0xFDD
  9244                           fsr2h	equ	0xFDA
  9245                           fsr2l	equ	0xFD9
  9246                           status	equ	0xFD8
  9247                           
  9248 ;; *************** function i2_I2C_Master_Write *****************
  9249 ;; Defined at:
  9250 ;;		line 39 in file "../I2C.c"
  9251 ;; Parameters:    Size  Location     Type
  9252 ;;  d               2    1[COMRAM] unsigned int 
  9253 ;; Auto vars:     Size  Location     Type
  9254 ;;		None
  9255 ;; Return value:  Size  Location     Type
  9256 ;;                  1    wreg      void 
  9257 ;; Registers used:
  9258 ;;		wreg, status,2, status,0, cstack
  9259 ;; Tracked objects:
  9260 ;;		On entry : 0/0
  9261 ;;		On exit  : 0/0
  9262 ;;		Unchanged: 0/0
  9263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9264 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9265 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9267 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9268 ;;Total ram usage:        2 bytes
  9269 ;; Hardware stack levels used:    1
  9270 ;; Hardware stack levels required when called:    1
  9271 ;; This function calls:
  9272 ;;		i2_I2C_Master_Wait
  9273 ;; This function is called by:
  9274 ;;		_keypressed
  9275 ;; This function uses a non-reentrant model
  9276 ;;
  9277                           
  9278                           	psect	text36
  9279  001E1E                     __ptext36:
  9280                           	opt stack 0
  9281  001E1E                     i2_I2C_Master_Write:
  9282                           	opt stack 23
  9283                           
  9284                           ;I2C.c: 41: I2C_Master_Wait();
  9285                           
  9286                           ;incstack = 0
  9287  001E1E  ECE9  F00E         	call	i2_I2C_Master_Wait	;wreg free
  9288                           
  9289                           ;I2C.c: 42: SSPBUF = d;
  9290  001E22  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
  9291  001E26  0012               	return		;funcret
  9292  001E28                     __end_ofi2_I2C_Master_Write:
  9293                           	opt stack 0
  9294                           pclatu	equ	0xFFB
  9295                           pclath	equ	0xFFA
  9296                           tblptru	equ	0xFF8
  9297                           tblptrh	equ	0xFF7
  9298                           tblptrl	equ	0xFF6
  9299                           tablat	equ	0xFF5
  9300                           prodh	equ	0xFF4
  9301                           prodl	equ	0xFF3
  9302                           intcon	equ	0xFF2
  9303                           intcon2	equ	0xFF1
  9304                           intcon3	equ	0xFF0
  9305                           postinc0	equ	0xFEE
  9306                           fsr0h	equ	0xFEA
  9307                           fsr0l	equ	0xFE9
  9308                           wreg	equ	0xFE8
  9309                           fsr1h	equ	0xFE2
  9310                           fsr1l	equ	0xFE1
  9311                           indf2	equ	0xFDF
  9312                           postinc2	equ	0xFDE
  9313                           postdec2	equ	0xFDD
  9314                           fsr2h	equ	0xFDA
  9315                           fsr2l	equ	0xFD9
  9316                           status	equ	0xFD8
  9317                           
  9318 ;; *************** function i2_I2C_Master_Stop *****************
  9319 ;; Defined at:
  9320 ;;		line 33 in file "../I2C.c"
  9321 ;; Parameters:    Size  Location     Type
  9322 ;;		None
  9323 ;; Auto vars:     Size  Location     Type
  9324 ;;		None
  9325 ;; Return value:  Size  Location     Type
  9326 ;;                  1    wreg      void 
  9327 ;; Registers used:
  9328 ;;		wreg, status,2, status,0, cstack
  9329 ;; Tracked objects:
  9330 ;;		On entry : 0/0
  9331 ;;		On exit  : 0/0
  9332 ;;		Unchanged: 0/0
  9333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9335 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9336 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9337 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9338 ;;Total ram usage:        0 bytes
  9339 ;; Hardware stack levels used:    1
  9340 ;; Hardware stack levels required when called:    1
  9341 ;; This function calls:
  9342 ;;		i2_I2C_Master_Wait
  9343 ;; This function is called by:
  9344 ;;		_keypressed
  9345 ;; This function uses a non-reentrant model
  9346 ;;
  9347                           
  9348                           	psect	text37
  9349  001E38                     __ptext37:
  9350                           	opt stack 0
  9351  001E38                     i2_I2C_Master_Stop:
  9352                           	opt stack 23
  9353                           
  9354                           ;I2C.c: 35: I2C_Master_Wait();
  9355                           
  9356                           ;incstack = 0
  9357  001E38  ECE9  F00E         	call	i2_I2C_Master_Wait	;wreg free
  9358                           
  9359                           ;I2C.c: 36: PEN = 1;
  9360  001E3C  84C5               	bsf	4037,2,c	;volatile
  9361  001E3E  0012               	return		;funcret
  9362  001E40                     __end_ofi2_I2C_Master_Stop:
  9363                           	opt stack 0
  9364                           pclatu	equ	0xFFB
  9365                           pclath	equ	0xFFA
  9366                           tblptru	equ	0xFF8
  9367                           tblptrh	equ	0xFF7
  9368                           tblptrl	equ	0xFF6
  9369                           tablat	equ	0xFF5
  9370                           prodh	equ	0xFF4
  9371                           prodl	equ	0xFF3
  9372                           intcon	equ	0xFF2
  9373                           intcon2	equ	0xFF1
  9374                           intcon3	equ	0xFF0
  9375                           postinc0	equ	0xFEE
  9376                           fsr0h	equ	0xFEA
  9377                           fsr0l	equ	0xFE9
  9378                           wreg	equ	0xFE8
  9379                           fsr1h	equ	0xFE2
  9380                           fsr1l	equ	0xFE1
  9381                           indf2	equ	0xFDF
  9382                           postinc2	equ	0xFDE
  9383                           postdec2	equ	0xFDD
  9384                           fsr2h	equ	0xFDA
  9385                           fsr2l	equ	0xFD9
  9386                           status	equ	0xFD8
  9387                           
  9388 ;; *************** function i2_I2C_Master_Start *****************
  9389 ;; Defined at:
  9390 ;;		line 21 in file "../I2C.c"
  9391 ;; Parameters:    Size  Location     Type
  9392 ;;		None
  9393 ;; Auto vars:     Size  Location     Type
  9394 ;;		None
  9395 ;; Return value:  Size  Location     Type
  9396 ;;                  1    wreg      void 
  9397 ;; Registers used:
  9398 ;;		wreg, status,2, status,0, cstack
  9399 ;; Tracked objects:
  9400 ;;		On entry : 0/0
  9401 ;;		On exit  : 0/0
  9402 ;;		Unchanged: 0/0
  9403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9405 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9406 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9407 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9408 ;;Total ram usage:        0 bytes
  9409 ;; Hardware stack levels used:    1
  9410 ;; Hardware stack levels required when called:    1
  9411 ;; This function calls:
  9412 ;;		i2_I2C_Master_Wait
  9413 ;; This function is called by:
  9414 ;;		_keypressed
  9415 ;; This function uses a non-reentrant model
  9416 ;;
  9417                           
  9418                           	psect	text38
  9419  001E40                     __ptext38:
  9420                           	opt stack 0
  9421  001E40                     i2_I2C_Master_Start:
  9422                           	opt stack 23
  9423                           
  9424                           ;I2C.c: 23: I2C_Master_Wait();
  9425                           
  9426                           ;incstack = 0
  9427  001E40  ECE9  F00E         	call	i2_I2C_Master_Wait	;wreg free
  9428                           
  9429                           ;I2C.c: 24: SEN = 1;
  9430  001E44  80C5               	bsf	4037,0,c	;volatile
  9431  001E46  0012               	return		;funcret
  9432  001E48                     __end_ofi2_I2C_Master_Start:
  9433                           	opt stack 0
  9434                           pclatu	equ	0xFFB
  9435                           pclath	equ	0xFFA
  9436                           tblptru	equ	0xFF8
  9437                           tblptrh	equ	0xFF7
  9438                           tblptrl	equ	0xFF6
  9439                           tablat	equ	0xFF5
  9440                           prodh	equ	0xFF4
  9441                           prodl	equ	0xFF3
  9442                           intcon	equ	0xFF2
  9443                           intcon2	equ	0xFF1
  9444                           intcon3	equ	0xFF0
  9445                           postinc0	equ	0xFEE
  9446                           fsr0h	equ	0xFEA
  9447                           fsr0l	equ	0xFE9
  9448                           wreg	equ	0xFE8
  9449                           fsr1h	equ	0xFE2
  9450                           fsr1l	equ	0xFE1
  9451                           indf2	equ	0xFDF
  9452                           postinc2	equ	0xFDE
  9453                           postdec2	equ	0xFDD
  9454                           fsr2h	equ	0xFDA
  9455                           fsr2l	equ	0xFD9
  9456                           status	equ	0xFD8
  9457                           
  9458 ;; *************** function i2_I2C_Master_Read *****************
  9459 ;; Defined at:
  9460 ;;		line 45 in file "../I2C.c"
  9461 ;; Parameters:    Size  Location     Type
  9462 ;;  a               1    wreg     unsigned char 
  9463 ;; Auto vars:     Size  Location     Type
  9464 ;;  a               1    1[COMRAM] unsigned char 
  9465 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
  9466 ;; Return value:  Size  Location     Type
  9467 ;;                  1    wreg      unsigned char 
  9468 ;; Registers used:
  9469 ;;		wreg, status,2, status,0, cstack
  9470 ;; Tracked objects:
  9471 ;;		On entry : 0/0
  9472 ;;		On exit  : 0/0
  9473 ;;		Unchanged: 0/0
  9474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9476 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9477 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9478 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9479 ;;Total ram usage:        2 bytes
  9480 ;; Hardware stack levels used:    1
  9481 ;; Hardware stack levels required when called:    1
  9482 ;; This function calls:
  9483 ;;		i2_I2C_Master_Wait
  9484 ;; This function is called by:
  9485 ;;		_keypressed
  9486 ;; This function uses a non-reentrant model
  9487 ;;
  9488                           
  9489                           	psect	text39
  9490  001D30                     __ptext39:
  9491                           	opt stack 0
  9492  001D30                     i2_I2C_Master_Read:
  9493                           	opt stack 23
  9494                           
  9495                           ;incstack = 0
  9496                           ;i2I2C_Master_Read@a stored from wreg
  9497  001D30  6E02               	movwf	i2I2C_Master_Read@a,c
  9498                           
  9499                           ;I2C.c: 47: unsigned char temp;
  9500                           ;I2C.c: 48: I2C_Master_Wait();
  9501  001D32  ECE9  F00E         	call	i2_I2C_Master_Wait	;wreg free
  9502                           
  9503                           ;I2C.c: 49: RCEN = 1;
  9504  001D36  86C5               	bsf	4037,3,c	;volatile
  9505                           
  9506                           ;I2C.c: 50: I2C_Master_Wait();
  9507  001D38  ECE9  F00E         	call	i2_I2C_Master_Wait	;wreg free
  9508                           
  9509                           ;I2C.c: 51: temp = SSPBUF;
  9510  001D3C  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
  9511                           
  9512                           ;I2C.c: 52: I2C_Master_Wait();
  9513  001D40  ECE9  F00E         	call	i2_I2C_Master_Wait	;wreg free
  9514                           
  9515                           ;I2C.c: 53: ACKDT = (a)?0:1;
  9516  001D44  5002               	movf	i2I2C_Master_Read@a,w,c
  9517  001D46  A4D8               	btfss	status,2,c
  9518  001D48  D002               	goto	i2u288_40
  9519  001D4A  8AC5               	bsf	4037,5,c	;volatile
  9520  001D4C  D001               	goto	i2l3220
  9521  001D4E                     i2u288_40:
  9522  001D4E  9AC5               	bcf	4037,5,c	;volatile
  9523  001D50                     i2l3220:
  9524                           
  9525                           ;I2C.c: 54: ACKEN = 1;
  9526  001D50  88C5               	bsf	4037,4,c	;volatile
  9527                           
  9528                           ;I2C.c: 55: return temp;
  9529  001D52  5003               	movf	i2I2C_Master_Read@temp,w,c
  9530  001D54  0012               	return	
  9531  001D56                     __end_ofi2_I2C_Master_Read:
  9532                           	opt stack 0
  9533                           pclatu	equ	0xFFB
  9534                           pclath	equ	0xFFA
  9535                           tblptru	equ	0xFF8
  9536                           tblptrh	equ	0xFF7
  9537                           tblptrl	equ	0xFF6
  9538                           tablat	equ	0xFF5
  9539                           prodh	equ	0xFF4
  9540                           prodl	equ	0xFF3
  9541                           intcon	equ	0xFF2
  9542                           intcon2	equ	0xFF1
  9543                           intcon3	equ	0xFF0
  9544                           postinc0	equ	0xFEE
  9545                           fsr0h	equ	0xFEA
  9546                           fsr0l	equ	0xFE9
  9547                           wreg	equ	0xFE8
  9548                           fsr1h	equ	0xFE2
  9549                           fsr1l	equ	0xFE1
  9550                           indf2	equ	0xFDF
  9551                           postinc2	equ	0xFDE
  9552                           postdec2	equ	0xFDD
  9553                           fsr2h	equ	0xFDA
  9554                           fsr2l	equ	0xFD9
  9555                           status	equ	0xFD8
  9556                           
  9557 ;; *************** function i2_I2C_Master_Wait *****************
  9558 ;; Defined at:
  9559 ;;		line 16 in file "../I2C.c"
  9560 ;; Parameters:    Size  Location     Type
  9561 ;;		None
  9562 ;; Auto vars:     Size  Location     Type
  9563 ;;		None
  9564 ;; Return value:  Size  Location     Type
  9565 ;;                  1    wreg      void 
  9566 ;; Registers used:
  9567 ;;		wreg, status,2, status,0
  9568 ;; Tracked objects:
  9569 ;;		On entry : 0/0
  9570 ;;		On exit  : 0/0
  9571 ;;		Unchanged: 0/0
  9572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9573 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9574 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9575 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9576 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9577 ;;Total ram usage:        1 bytes
  9578 ;; Hardware stack levels used:    1
  9579 ;; This function calls:
  9580 ;;		Nothing
  9581 ;; This function is called by:
  9582 ;;		i2_I2C_Master_Start
  9583 ;;		i2_I2C_Master_Stop
  9584 ;;		i2_I2C_Master_Write
  9585 ;;		i2_I2C_Master_Read
  9586 ;; This function uses a non-reentrant model
  9587 ;;
  9588                           
  9589                           	psect	text40
  9590  001DD2                     __ptext40:
  9591                           	opt stack 0
  9592  001DD2                     i2_I2C_Master_Wait:
  9593                           	opt stack 23
  9594  001DD2                     i2l30:
  9595  001DD2  B4C7               	btfsc	4039,2,c	;volatile
  9596  001DD4  D7FE               	goto	i2l30
  9597  001DD6  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
  9598  001DDA  0E1F               	movlw	31
  9599  001DDC  1601               	andwf	??i2_I2C_Master_Wait,f,c
  9600  001DDE  B4D8               	btfsc	status,2,c
  9601  001DE0  0012               	return	
  9602  001DE2  D7F7               	goto	i2l30
  9603  001DE4                     __end_ofi2_I2C_Master_Wait:
  9604                           	opt stack 0
  9605                           pclatu	equ	0xFFB
  9606                           pclath	equ	0xFFA
  9607                           tblptru	equ	0xFF8
  9608                           tblptrh	equ	0xFF7
  9609                           tblptrl	equ	0xFF6
  9610                           tablat	equ	0xFF5
  9611                           prodh	equ	0xFF4
  9612                           prodl	equ	0xFF3
  9613                           intcon	equ	0xFF2
  9614                           intcon2	equ	0xFF1
  9615                           intcon3	equ	0xFF0
  9616                           postinc0	equ	0xFEE
  9617                           fsr0h	equ	0xFEA
  9618                           fsr0l	equ	0xFE9
  9619                           wreg	equ	0xFE8
  9620                           fsr1h	equ	0xFE2
  9621                           fsr1l	equ	0xFE1
  9622                           indf2	equ	0xFDF
  9623                           postinc2	equ	0xFDE
  9624                           postdec2	equ	0xFDD
  9625                           fsr2h	equ	0xFDA
  9626                           fsr2l	equ	0xFD9
  9627                           status	equ	0xFD8
  9628                           pclatu	equ	0xFFB
  9629                           pclath	equ	0xFFA
  9630                           tblptru	equ	0xFF8
  9631                           tblptrh	equ	0xFF7
  9632                           tblptrl	equ	0xFF6
  9633                           tablat	equ	0xFF5
  9634                           prodh	equ	0xFF4
  9635                           prodl	equ	0xFF3
  9636                           intcon	equ	0xFF2
  9637                           intcon2	equ	0xFF1
  9638                           intcon3	equ	0xFF0
  9639                           postinc0	equ	0xFEE
  9640                           fsr0h	equ	0xFEA
  9641                           fsr0l	equ	0xFE9
  9642                           wreg	equ	0xFE8
  9643                           fsr1h	equ	0xFE2
  9644                           fsr1l	equ	0xFE1
  9645                           indf2	equ	0xFDF
  9646                           postinc2	equ	0xFDE
  9647                           postdec2	equ	0xFDD
  9648                           fsr2h	equ	0xFDA
  9649                           fsr2l	equ	0xFD9
  9650                           status	equ	0xFD8
  9651                           
  9652                           	psect	rparam
  9653  0000                     pclatu	equ	0xFFB
  9654                           pclath	equ	0xFFA
  9655                           tblptru	equ	0xFF8
  9656                           tblptrh	equ	0xFF7
  9657                           tblptrl	equ	0xFF6
  9658                           tablat	equ	0xFF5
  9659                           prodh	equ	0xFF4
  9660                           prodl	equ	0xFF3
  9661                           intcon	equ	0xFF2
  9662                           intcon2	equ	0xFF1
  9663                           intcon3	equ	0xFF0
  9664                           postinc0	equ	0xFEE
  9665                           fsr0h	equ	0xFEA
  9666                           fsr0l	equ	0xFE9
  9667                           wreg	equ	0xFE8
  9668                           fsr1h	equ	0xFE2
  9669                           fsr1l	equ	0xFE1
  9670                           indf2	equ	0xFDF
  9671                           postinc2	equ	0xFDE
  9672                           postdec2	equ	0xFDD
  9673                           fsr2h	equ	0xFDA
  9674                           fsr2l	equ	0xFD9
  9675                           status	equ	0xFD8
  9676                           
  9677                           	psect	temp
  9678  00004F                     btemp:
  9679                           	opt stack 0
  9680  00004F                     	ds	1
  9681  0000                     int$flags	set	btemp
  9682                           pclatu	equ	0xFFB
  9683                           pclath	equ	0xFFA
  9684                           tblptru	equ	0xFF8
  9685                           tblptrh	equ	0xFF7
  9686                           tblptrl	equ	0xFF6
  9687                           tablat	equ	0xFF5
  9688                           prodh	equ	0xFF4
  9689                           prodl	equ	0xFF3
  9690                           intcon	equ	0xFF2
  9691                           intcon2	equ	0xFF1
  9692                           intcon3	equ	0xFF0
  9693                           postinc0	equ	0xFEE
  9694                           fsr0h	equ	0xFEA
  9695                           fsr0l	equ	0xFE9
  9696                           wreg	equ	0xFE8
  9697                           fsr1h	equ	0xFE2
  9698                           fsr1l	equ	0xFE1
  9699                           indf2	equ	0xFDF
  9700                           postinc2	equ	0xFDE
  9701                           postdec2	equ	0xFDD
  9702                           fsr2h	equ	0xFDA
  9703                           fsr2l	equ	0xFD9
  9704                           status	equ	0xFD8


Data Sizes:
    Strings     444
    Constant    35
    Data        1
    BSS         51
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     70      78
    BANK0           128     33      77
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 25
		 -> STR_26(CODE[17]), STR_25(CODE[15]), STR_24(CODE[17]), STR_23(CODE[23]), 
		 -> STR_22(CODE[23]), STR_21(CODE[23]), STR_20(CODE[23]), STR_19(CODE[17]), 
		 -> STR_18(CODE[21]), STR_17(CODE[17]), STR_16(CODE[21]), STR_15(CODE[17]), 
		 -> STR_14(CODE[21]), STR_13(CODE[17]), STR_12(CODE[19]), STR_11(CODE[17]), 
		 -> STR_10(CODE[19]), STR_9(CODE[17]), STR_8(CODE[25]), STR_7(CODE[17]), 
		 -> STR_6(CODE[17]), STR_5(CODE[17]), STR_4(CODE[17]), STR_3(CODE[17]), 
		 -> STR_2(CODE[17]), STR_1(CODE[17]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_testBatteries
    _testBatteries->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _stopOperation->___awdiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _I2C_Master_Init->___lldiv

Critical Paths under _ISR in COMRAM

    _ISR->_keypressed
    _keypressed->i2_printf
    i2_stopOperation->i2___awdiv
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_lcdInst->i2_lcdNibble
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_testBatteries
    _testBatteries->_printf

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0   13070
                                             24 BANK0      9     9      0
                    _I2C_Master_Init
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _initLCD
                            _lcdInst
                             _printf
                            _readADC
                      _stopOperation
                      _testBatteries
                           _wait_2ms
 ---------------------------------------------------------------------------------
 (1) _wait_2ms                                             2     0      2     342
                                             48 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _testBatteries                                       12    12      0    5469
                                             68 COMRAM     2     2      0
                                             14 BANK0     10    10      0
                            _lcdInst
                             _printf
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _readADC                                              1     1      0      22
                                             48 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _printf                                              31    23      8    4615
                                             60 COMRAM     8     0      8
                                              0 BANK0     14    14      0
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     135
                                             50 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                             48 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     289
                                             48 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     287
                                             55 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     418
                                             48 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _stopOperation                                        0     0      0    1004
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     500
                                             48 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     504
                                             48 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                             51 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     135
                                             50 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                             48 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Write                                     2     0      2     328
                                             49 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Read                                      2     2      0      45
                                             49 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Wait                                      1     1      0       0
                                             48 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     376
                                             61 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     290
                                             48 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                 16    16      0    4955
                                             32 COMRAM    16    16      0
                         _keypressed
                          i2___awdiv
                          i2___awmod
                    i2_stopOperation
 ---------------------------------------------------------------------------------
 (6) _keypressed                                           4     2      2    3324
                                             28 COMRAM     4     2      2
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
                          i2_lcdInst
                           i2_printf
                    i2_stopOperation
 ---------------------------------------------------------------------------------
 (6) i2_stopOperation                                      0     0      0     804
                          i2___awdiv
                          i2___awmod
 ---------------------------------------------------------------------------------
 (7) i2___awmod                                            6     2      4     400
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (7) i2___awdiv                                            8     4      4     404
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (7) i2_printf                                            25    23      2    1912
                                             12 COMRAM    16    14      2
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (8) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (8) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (8) i2___wmul                                             6     2      4     209
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (8) i2___lwdiv                                            7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (7) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (9) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Write                                   2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Stop                                    0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Start                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Read                                    2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Wait                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _I2C_Master_Read
     _I2C_Master_Wait
   _I2C_Master_Start
     _I2C_Master_Wait
   _I2C_Master_Stop
     _I2C_Master_Wait
   _I2C_Master_Write
     _I2C_Master_Wait
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
       _lcdNibble
   _readADC
   _stopOperation
     ___awdiv
     ___awmod
   _testBatteries
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
     _readADC
   _wait_2ms

 _ISR (ROOT)
   _keypressed
     i2_I2C_Master_Read
       i2_I2C_Master_Wait
     i2_I2C_Master_Start
       i2_I2C_Master_Wait
     i2_I2C_Master_Stop
       i2_I2C_Master_Wait
     i2_I2C_Master_Write
       i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
       i2___lwmod
         i2___lwdiv (ARG)
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
     i2_stopOperation
       i2___awdiv
       i2___awmod
   i2___awdiv
   i2___awmod
   i2_stopOperation
     i2___awdiv
     i2___awmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     21      4D       5       60.2%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     46      4E       1       61.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      9B      34        0.0%
DATA                 0      0      9B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sun Apr 09 05:26:24 2017

         i2_I2C_Master_Start 1E40           i2_I2C_Master_Write 1E1E                           l30 1DC0  
               ___awdiv@sign 0036          ___wmul@multiplicand 0033           i2___lwdiv@dividend 0001  
                __CFG_BORV$3 000000                 __CFG_CP0$OFF 000000                 __CFG_CP1$OFF 000000  
               __CFG_CP2$OFF 000000                 __CFG_CP3$OFF 000000                  __CFG_OSC$HS 000000  
                        l362 1DBA                          l466 0A02                          l299 055E  
                        l911 1AC4                          l921 1C3A                          l858 1930  
                        _GIE 007F97                 __CFG_CPB$OFF 000000                          _PEN 007E2A  
               __CFG_CPD$OFF 000000                          _ISR 0008                          _SEN 007E28  
        ?i2_I2C_Master_Start 0001          ?i2_I2C_Master_Write 0002                          _min 00A3  
                        _sec 00A9                 ___awmod@sign 0036                          prod 000FF3  
                        wreg 000FE8                 __CFG_LVP$OFF 000000                         ?_ISR 0001  
               __CFG_WDT$OFF 000000                         l3120 17FA                         l3112 17DC  
                       l3130 181A                         l3122 17FE                         l3106 17CC  
                       l3118 17F2                         l3134 1824                         l3150 1956  
                       l3160 1978                         l3138 1832                         l3162 197C  
                       l3170 199A                         l3154 1962                         l3174 19A8  
                       l3166 1990                         l3158 1970                         l3184 18E2  
                       l2800 1C18                         l4312 090E                         l3186 18EE  
                       l2802 1C1C                         l4410 0B86                         l4402 0B5E  
                       l4314 0920                         l3196 1922                         l3188 18F2  
                       l4420 0BBA                         l4332 09CC                         l4324 0958  
                       l4308 08FA                         l2806 1C30                         l4422 0C02  
                       l4430 0C60                         l4414 0BA0                         l4318 0928  
                       l4432 0C68                         l4408 0B7A                         l4352 0A56  
                       l4336 09D2                         l4520 145E                         l4504 13EE  
                       l2762 1D6C                         l4418 0BB4                         l4354 0A5C  
                       l4434 0C74                         l3490 1D9A                         l3468 1D04  
                       l2780 1A9A                         l4428 0C4E                         l4348 0A3A  
                       l4516 143C                         l4524 1474                         l4612 01BA  
                       l2790 1ABA                         l2782 1A9E                         l4390 0B02  
                       l4366 0A92                         l4382 0ACE                         l4462 12F6  
                       l4710 034E                         l4622 01E6                         l4368 0A98  
                       l4384 0AE0                         l4472 1350                         l4720 03B8  
                       l2778 1A92                         l4394 0B3A                         l4482 137A  
                       l4730 041C                         l4714 039A                         l4642 0236  
                       l4626 01F6                         l4396 0B44                         l4492 13B4  
                       l4724 03CC                         l4644 023E                         l4628 01FE  
                       l4660 0280                         l4820 05D8                         l4564 00B6  
                       l4556 008C                         l2798 1C10                         l4486 139A  
                       l4830 0610                         l4822 05E2                         l4654 026A  
                       l4638 0226                         l4582 0100                         l4496 13D4  
                       l4904 07F2                         l4576 00E2                         l4568 00C0  
                       l4922 0860                         l4762 0488                         l4690 0316  
                       l4682 02F6                         l4818 05CC                         l4658 027A  
                       l4586 010A                         l4594 012C                         l4932 088A  
                       l4908 07FC                         l4916 081E                         l4860 06E2  
                       l4852 06AC                         l4844 0676                         l4836 0640  
                       l4828 0606                         l4780 04D0                         l4764 0490  
                       l4748 044C                         l4596 0138                         l4926 086A  
                       l4918 082A                         l4870 0724                         l4862 06EE  
                       l4854 06B8                         l4846 0682                         l4838 064C  
                       l4790 04FC                         l4774 04B8                         l4758 0478  
                       l4694 0326                         l4686 0306                         l4678 02E6  
                       l4938 08E0                         l4890 07A0                         l4794 050C  
                       l4778 04C8                         l4876 074E                         l4868 0718  
                       l4796 0512                         l4886 0796                         l4878 075A  
                       l4898 07C2                         STR_1 FFDE                         STR_2 FFCD  
                       STR_3 FFBC                         STR_4 FF23                         STR_5 FF89  
                       STR_6 FF67                         STR_7 FFAB                         STR_8 FE42  
                       STR_9 FF56                         _LATA 000F89                         _LATB 000F8A  
                       _LATC 000F8B                         _LATD 000F8C                         _LATE 000F8D  
                       u3140 1D02                         u3135 1A50                         u5307 045A  
                       u5227 00D2                         _PEIE 007F96                         u5317 046E  
                       u5237 011C                         u5407 1B38                         u5327 049E  
                       u5247 01C8                         u5417 1B40                         u5337 04B0  
                       u5257 01DC                         u5427 1B60                         u5347 04DE  
                       u5267 020C                         u4820 0290                         _RCEN 007E2B  
                       u5437 1B68                         u5357 04F2                         u4821 028C  
                       u5277 021E                         i2l30 1DD2                         u4830 02A6  
                       u4822 0292                         u5367 07B2                         u5287 024C  
                       u4832 02A8                         u5377 080E                         u5297 0260  
                       u5387 1BC2                         u5397 1BF6                         u4950 0418  
                       _TMR0 000FD6                         _TMR1 000FCE                         _main 0012  
                       _keys FE1F                         _numC 00A7                         fsr0h 000FEA  
                       fsr1h 000FE2           i2___lwdiv@quotient 0005                         fsr2h 000FDA  
                       fsr0l 000FE9                         indf2 000FDF                         fsr1l 000FE1  
                       fsr2l 000FD9                         btemp 004F         ??i2_I2C_Master_Start 0002  
       ??i2_I2C_Master_Write 0004                         prodh 000FF4                         prodl 000FF3  
                       start 000E                __CFG_IESO$OFF 000000              __end_ofi2_putch 1E08  
              __CFG_MCLRE$ON 000000                 ___param_bank 000000                  i2_lcdNibble 1B6E  
                      ??_ISR 0021             ?_I2C_Master_Init 003E             ?_I2C_Master_Read 0001  
           ?_I2C_Master_Wait 0001             ?_I2C_Master_Stop 0001                        ?_main 0001  
                      _ACKEN 007E2C                        _ACKDT 007E2D              __end_of___awdiv 183C  
                      _ADRES 000FC3                        STR_10 FECC                        STR_11 FEF0  
                      STR_12 FECC                        STR_20 FE5B                        STR_13 FF12  
                      STR_21 FE72                        STR_14 FEB7                        STR_22 FE89  
                      STR_15 FF01                        STR_23 FEA0                        STR_16 FEB7  
                      STR_24 FF9A                        STR_25 FFEF                        STR_17 FF78  
                      STR_18 FEB7                        STR_26 FF45                        STR_19 FF34  
                      STR_27 FEDF              __end_of___awmod 19B2              __end_of___lldiv 1942  
                      _T0CON 000FD5              ___awdiv@divisor 0033                        _T1CON 000FCD  
            __end_of___lwdiv 1ACE              __end_of___lwmod 1C44                        i2l404 10A0  
                      i2l434 1202                        i2l466 0D7C                        i2l911 1B16  
                      i2l921 1C7C              ___awdiv@counter 0035                        _PORTB 000F81  
                      _TRISA 000F92                        _TRISB 000F93                        _TRISC 000F94  
                      _TRISD 000F95                        _TRISE 000F96                _turn1BackLeft 0096  
              __CFG_PWRT$OFF 000000                __CFG_WRT0$OFF 000000                __CFG_WRT1$OFF 000000  
              __CFG_WRT2$OFF 000000                __CFG_WRT3$OFF 000000              __end_of_lcdInst 1DFC  
             __CFG_EBTR0$OFF 000000               __CFG_FCMEN$OFF 000000               __CFG_EBTR1$OFF 000000  
              _turn2BackLeft 009A               __CFG_EBTR2$OFF 000000               __CFG_EBTR3$OFF 000000  
                      _nRBPU 007F8F       __size_of_stopOperation 010E                __CFG_WRTB$OFF 000000  
              __CFG_WRTC$OFF 000000                __CFG_WRTD$OFF 000000              __end_of_readADC 1DC0  
            __end_of_initLCD 1C02               __CFG_EBTRB$OFF 000000                   i2isdigit@c 0003  
            __end_of_dpowers FE3A                        _numAA 00A5                        _num9V 00A4  
            __end_of_isdigit 1D74                        _step1 004D                        _step2 004E  
                      _putch 1DE4                        main@i 00C5                        pclath 000FFA  
                      tablat 000FF5             __end_ofi2___wmul 1D30                        status 000FD8  
         __size_ofi2___awdiv 0084           __size_ofi2___awmod 0070               __CFG_PBADEN$ON 000000  
              i2printf@width 001A             __end_ofi2_printf 0F9C           __size_ofi2___lwdiv 0052  
         __size_ofi2___lwmod 0042              __initialization 1C86           __size_ofi2_lcdInst 000C  
               __end_of_main 08EC                 __end_of_keys FE30                   i2printf@ap 0014  
         __size_ofi2_isdigit 001E                       ??_main 00C3                __activetblptr 000002  
          ?_I2C_Master_Start 0001            ?_I2C_Master_Write 0032           ??_I2C_Master_Start 0032  
                     _ADCON0 000FC2                       _ADCON1 000FC1           ??_I2C_Master_Write 0034  
                     _ADCON2 000FC0             ___awdiv@dividend 0031              i2lcdNibble@data 0002  
                     ?_putch 0001              i2lcdNibble@temp 0001                       _INT1IE 007F83  
                     _INT1IF 007F80                       i2l3220 1D50                       i2l3400 0E7A  
                     i2l3312 0C9A                       i2l3322 0CBE                       i2l4202 10C2  
                     i2l3412 0EA6                       i2l3340 0D4E                       i2l3316 0CAA  
                     i2l4220 10FC                       i2l4212 10E4                       i2l3414 0EAE  
                     i2l3422 0ED4                       i2l3406 0E90                       i2l3318 0CB8  
                     i2l3424 0EDA                       i2l3432 0F64                       i2l3352 0DAA  
                     i2l3336 0D4A                       i2l3328 0CEC                       i2l4304 1200  
                     i2l4216 10F0                       i2l4208 10D8                       i2l4152 1004  
                     i2l3426 0F1E                       i2l3434 0F74                       i2l3418 0EC2  
                     i2l3370 0DF4                       i2l4242 1142                       i2l4234 112A  
                     i2l4226 1110                       i2l4170 1054                       i2l3436 0F7A  
                     i2l3372 0DF8                       i2l3356 0DC4                       i2l2900 1A18  
                     i2l3700 1618                       i2l4260 1178                       i2l4252 1160  
                     i2l4228 1112                       i2l3358 0DC8                       i2l3438 0F82  
                     i2l3710 164C                       i2l4246 114C                       i2l4238 1136  
                     i2l4254 1162                       i2l4182 107A                       i2l2912 1D8A  
                     i2l2832 1850                       i2l4272 119C                       i2l4264 1184  
                     i2l4280 11B2                       i2l4176 106A                       i2l4184 107E  
                     i2l2922 1AE4                       i2l3394 0E4E                       i2l3386 0E24  
                     i2l3706 163C                       i2l4290 11D6                       i2l4178 106E  
                     i2l2924 1AEC                       i2l3388 0E34                       i2l2844 1876  
                     i2l2860 18A8                       i2l3732 16A4                       i2l3724 1684  
                     i2l3716 1662                       i2l4268 1190                       i2l2934 1B0C  
                     i2l2926 1AF0                       i2l2950 1C72                       i2l2942 1C52  
                     i2l3398 0E72                       i2l2846 187E                       i2l2838 1860  
                     i2l3726 168A                       i2l4294 11E2                       i2l4286 11CA  
                     i2l4278 11B0                       i2l2944 1C5A                       i2l2864 18B6  
                     i2l2856 189E                       i2l2848 1882                       i2l2880 19D2  
                     i2l2946 1C5E                       i2l3690 15F4                       i2l4298 11EC  
                     i2l2892 1A00                       i2l2884 19E0                       i2l2876 19C6  
                     i2l2886 19E8                       i2l3694 15FC                keypressed@key 001E  
                     i2l2888 19EC                       i2l2896 1A0A                       _TMR0IE 007F95  
                     _TMR0IF 007F92                    ??i2_putch 0003                       _TMR1IE 007CE8  
                     _TMR1IF 007CF0                       _SSPADD 000FC8                       _TRISC3 007CA3  
                     _TRISC4 007CA4                       _SSPBUF 000FC9               _turn1BackRight 0098  
             __CFG_XINST$OFF 000000                _stopOperation 148E               _turn2BackRight 009C  
                     ___wmul 1CBE                    ??___awdiv 0035               __CFG_STVREN$ON 000000  
                  ??___awmod 0035                    ??___lldiv 0039                    ??___lwdiv 0035  
                  ??___lwmod 003C                       _countC 00A0                       clear_0 1C9E  
                     clear_1 1CAA             ___awdiv@quotient 0037              ___awmod@divisor 0033  
            ___awmod@counter 0035                    ??_lcdInst 0033                       _printf 08EC  
             i2___awdiv@sign 0006                    ??_readADC 0031                    ??_initLCD 0034  
   __size_ofi2_stopOperation 010E             __end_of_wait_2ms 1DAC                    ??_isdigit 0031  
          __end_ofi2___awdiv 18C0            __end_ofi2___awmod 1A22            __end_ofi2___lwdiv 1B20  
               __mediumconst FE1E            __end_ofi2___lwmod 1C86                       tblptrh 000FF7  
                     tblptrl 000FF6                       tblptru 000FF8                main@steps_605 00CB  
             i2___awmod@sign 0006            __end_ofi2_lcdInst 1E14            __end_ofi2_isdigit 1D92  
                 __accesstop 0080      __end_of__initialization 1CB0                ___rparam_used 000001  
             ?_stopOperation 0001           i2___lwmod@dividend 0008               __pcstackCOMRAM 0001  
               __pidataBANK0 1E48                __end_of_putch 1DF0                  i2printf@idx 0013  
                i2printf@val 0017           testBatteries@volt1 00B9           testBatteries@volt2 00BD  
         testBatteries@volt3 00BB           testBatteries@volt4 00BF           testBatteries@volt5 00C1  
                  ?i2___wmul 0001           __size_of_lcdNibble 004E                  i2putch@data 0003  
                keypressed@i 0020                  ISR@keypress 0030                    ?i2_printf 000D  
                    ??_putch 0033                   __pbssBANK0 0080        __end_of_testBatteries 148E  
               ?i2_lcdNibble 0001                      ?___wmul 0031                      ?_printf 003D  
                 ??i2___wmul 0005               keypressed@left 001F                   ??i2_printf 000F  
                    _SSPCON1 000FC6                      _SSPCON2 000FC5            ??i2_stopOperation 0009  
                    _SSPSTAT 000FC7                      i2_putch 1DFC                   _countDrain 00A1  
            ??_stopOperation 0039  __size_ofi2_I2C_Master_Start 0008            __end_of_lcdNibble 1B6E  
__size_ofi2_I2C_Master_Write 000A                      __Hparam 0000                      __Lparam 0000  
                 _lastRunRTC 0080                    ?_wait_2ms 0031                      ___awdiv 17B8  
                    ___awmod 1942                      ___lldiv 18C0              __size_of___wmul 0026  
                    ___lwdiv 1A7C                      ___lwmod 1C02                      __pcinit 1C86  
                 _plat1Right 0090                      __ramtop 1000                   _plat2Right 0094  
                    _lcdInst 1DF0                      __ptext0 0012                      __ptext1 1D92  
                    __ptext2 123E                      __ptext3 1DAC                      __ptext4 08EC  
                    __ptext5 1DE4                      __ptext6 1D56                      __ptext7 1CBE  
                    __ptext8 1C02                      __ptext9 1A7C              __size_of_printf 03A4  
                  _T0CONbits 000FD5                      _countAA 009F                      _count9V 009E  
                    _readADC 1DAC                      _initLCD 1BBC                 __size_of_ISR 1236  
          __end_of_hexpowers FE42                    _T1CONbits 000FCD                i2_isdigit$944 0002  
                    _dpowers FE30                      _isdigit 1D56                      _opTimer 004A  
           ___awmod@dividend 0031                      _numBats 00A6                   _keypressed 159C  
   __size_of_I2C_Master_Init 005A     __size_of_I2C_Master_Read 0026     __size_of_I2C_Master_Wait 0012  
   __size_of_I2C_Master_Stop 0008                      _sorting 004C               __pintcode_body 0F9C  
       end_of_initialization 1CB0                __Lmediumconst FE1E                      int_func 0F9C  
        i2___wmul@multiplier 0001                   _screenMode 00CC    __size_of_I2C_Master_Start 0008  
  __size_of_I2C_Master_Write 000A              ___lldiv@divisor 0035              ___lldiv@counter 003D  
                 ??_wait_2ms 0033                      printf@c 00B8                      printf@f 003D  
           I2C_Master_Init@c 003E             I2C_Master_Read@a 0032                      postdec2 000FDD  
                 _solOnTimer 004B                      postinc0 000FEE                      postinc2 000FDE  
          i2_I2C_Master_Read 1D30            i2_I2C_Master_Wait 1DD2            i2_I2C_Master_Stop 1E38  
                  i2___awdiv 183C                    i2___awmod 19B2            i2___lwdiv@divisor 0003  
                  i2___lwdiv 1ACE                    i2___lwmod 1C44            i2___lwdiv@counter 0007  
         ?i2_I2C_Master_Read 0001           ?i2_I2C_Master_Wait 0001           ?i2_I2C_Master_Stop 0001  
                  i2_lcdInst 1E08                  printf@width 00B6           i2___awdiv@dividend 0001  
        ??i2_I2C_Master_Read 0002                    i2_isdigit 1D74          ??i2_I2C_Master_Wait 0001  
        ??i2_I2C_Master_Stop 0002               __end_of___wmul 1CE4         __size_ofi2_lcdNibble 004E  
              i2lcdInst@data 0003             i2___wmul@product 0005               __end_of_printf 0C90  
               i2printf@flag 0019    __end_ofi2_I2C_Master_Read 1D56    __end_ofi2_I2C_Master_Wait 1DE4  
               i2printf@prec 0016          start_initialization 1C86    __end_ofi2_I2C_Master_Stop 1E40  
                ?_keypressed 001D           i2___awdiv@quotient 0007                  __end_of_ISR 123E  
          __size_ofi2___wmul 0026                    i2printf@c 001C                    i2printf@f 000D  
      i2I2C_Master_Read@temp 0003                   ?i2___awdiv 0001                   ?i2___awmod 0001  
                 ?i2___lwdiv 0001                   ?i2___lwmod 0008            __size_ofi2_printf 030C  
          ??_I2C_Master_Init 0042            ??_I2C_Master_Read 0032            ??_I2C_Master_Wait 0031  
                 ?i2_lcdInst 0001            ??_I2C_Master_Stop 0032                   ?i2_isdigit 0001  
                   ??___wmul 0035                  __pdataBANK0 00CC             __CFG_LPT1OSC$OFF 000000  
            i2_stopOperation 16AA                     ??_printf 00AB                  __pbssCOMRAM 0047  
              __pcstackBANK0 00AB            i2___lwmod@divisor 000A            i2___lwmod@counter 000C  
                   ?i2_putch 0001             _I2C_Master_Start 1E30          i2I2C_Master_Write@d 0002  
           _I2C_Master_Write 1E14             ___lwdiv@dividend 0031            __CFG_CCP2MX$PORTC 000000  
        __size_of_keypressed 010E                    __pintcode 0008                __pmediumconst FE1E  
                  _lcdNibble 1B20                     ?___awdiv 0031                     ?___awmod 0031  
                   ?___lldiv 0031            __size_of_wait_2ms 001A                     ?___lwdiv 0031  
                   ?___lwmod 0038                    _doneTimer 0049                     ?_lcdInst 0001  
                   ?_readADC 0001                     ?_initLCD 0001       __size_of_testBatteries 0250  
                  _count_2ms 0047                     ?_isdigit 0001   __size_ofi2_I2C_Master_Read 0026  
 __size_ofi2_I2C_Master_Wait 0012   __size_ofi2_I2C_Master_Stop 0008                    _hexpowers FE3A  
           ___lwdiv@quotient 0035                  ??i2___awdiv 0005                  ??i2___awmod 0005  
                  _plat1Left 008E                    _plat2Left 0092                  ??i2___lwdiv 0005  
                ??i2___lwmod 000C               __size_of_putch 000C   __end_ofi2_I2C_Master_Start 1E48  
 __end_ofi2_I2C_Master_Write 1E28                  ??i2_lcdInst 0003               ___wmul@product 0035  
                   _LATAbits 000F89                     _LATBbits 000F8A                     _LATCbits 000F8B  
                   _LATDbits 000F8C                     _LATEbits 000F8D              keypressed@right 001D  
                ??i2_isdigit 0001        __end_of_stopOperation 159C                     i2u401_40 1066  
                   i2u407_40 10B6                     i2u408_48 10B8                     i2u288_40 1D4E  
                   i2u544_47 1B86                     i2u545_47 1B8E                     i2u546_47 1BAE  
                   i2u547_47 1BB6      __end_ofi2_stopOperation 17B8             __CFG_WDTPS$32768 000000  
                 ?_lcdNibble 0001                    _startGear 00AA                   _ADCON0bits 000FC2  
                  main@i_630 00C7                    main@i_632 00C8                    main@i_636 00C9  
                  main@i_583 00C6            ___wmul@multiplier 0031                     i2___wmul 1D0A  
              lcdNibble@data 0032                   printf@flag 00B5                lcdNibble@temp 0031  
                 printf@prec 00B2            i2___awdiv@divisor 0003                    main@steps 00CA  
          i2___awdiv@counter 0005                     i2_printf 0C90          I2C_Master_Read@temp 0033  
         i2___awmod@dividend 0001             __size_ofi2_putch 000C                _testBatteries 123E  
                   __Hrparam 0000                     __Lrparam 0000           __CFG_BOREN$SBORDIS 000000  
           __size_of___awdiv 0084             __size_of___awmod 0070        i2___wmul@multiplicand 0003  
           __size_of___lldiv 0082             __size_of___lwdiv 0052             __size_of___lwmod 0042  
             readADC@channel 0031                  _isdigit$944 0032           i2I2C_Master_Read@a 0002  
           __size_of_lcdInst 000C              _I2C_Master_Init 1A22             __size_of_readADC 0014  
            _I2C_Master_Read 1CE4             __size_of_initLCD 0046              _I2C_Master_Wait 1DC0  
            _I2C_Master_Stop 1E28                 ??_keypressed 001F             __size_of_isdigit 001E  
            ___lwdiv@divisor 0033              ___lwdiv@counter 0037                     __ptext10 148E  
                   __ptext11 1942                     __ptext20 1DC0                     __ptext12 17B8  
                   __ptext21 1A22                     __ptext13 1BBC                     __ptext30 1D74  
                   __ptext22 18C0                     __ptext14 1DF0                     __ptext31 1D0A  
                   __ptext15 1B20                     __ptext40 1DD2                     __ptext32 1C44  
                   __ptext24 159C                     __ptext16 1E14                     __ptext33 1ACE  
                   __ptext25 16AA                     __ptext17 1E28                     __ptext34 1E08  
                   __ptext26 19B2                     __ptext18 1E30                     __ptext35 1B6E  
                   __ptext27 183C                     __ptext19 1CE4                     __ptext36 1E1E  
                   __ptext28 0C90                     __ptext37 1E38                     __ptext29 1DFC  
                   __ptext38 1E40                     __ptext39 1D30                     _doubleAA 00A2  
              __size_of_main 08DA                    wait_2ms@x 0031               ?_testBatteries 0001  
                   _realTime 0087                     _numDrain 00A8                     _wait_2ms 1D92  
           ?i2_stopOperation 0001                ??i2_lcdNibble 0001                  ??_lcdNibble 0031  
         __end_of_keypressed 16AA                     int$flags 004F                    printf@idx 00AF  
                  printf@val 00B3            i2___awmod@divisor 0003                    putch@data 0033  
          i2___awmod@counter 0005     __end_of_I2C_Master_Start 1E38     __end_of_I2C_Master_Write 1E1E  
                 _INTCONbits 000FF2                     isdigit@c 0033                     intlevel2 0000  
           ___lwmod@dividend 0038             ___lldiv@dividend 0031                     printf@ap 00B0  
    __end_of_I2C_Master_Init 1A7C      __end_of_I2C_Master_Read 1D0A      __end_of_I2C_Master_Wait 1DD2  
    __end_of_I2C_Master_Stop 1E30                  lcdInst@data 0033          __end_ofi2_lcdNibble 1BBC  
           ___lldiv@quotient 0039            I2C_Master_Write@d 0032              ___lwmod@divisor 003A  
            ___lwmod@counter 003C              ??_testBatteries 0045  
