

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Fri Feb 03 17:47:38 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    31                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    32  0000                     
    33                           ; Version 1.40
    34                           ; Generated 01/12/2016 GMT
    35                           ; 
    36                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    37                           ; All rights reserved.
    38                           ; 
    39                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    40                           ; 
    41                           ; Redistribution and use in source and binary forms, with or without modification, are
    42                           ; permitted provided that the following conditions are met:
    43                           ; 
    44                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    45                           ;        conditions and the following disclaimer.
    46                           ; 
    47                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    48                           ;        of conditions and the following disclaimer in the documentation and/or other
    49                           ;        materials provided with the distribution.
    50                           ; 
    51                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    52                           ;        software without specific prior written permission.
    53                           ; 
    54                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    55                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    56                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    57                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    58                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    59                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    60                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    61                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    62                           ; 
    63                           ; 
    64                           ; Code-generator required, PIC18F4620 Definitions
    65                           ; 
    66                           ; SFR Addresses
    67  0000                     
    68                           	psect	idataCOMRAM
    69  00F366                     __pidataCOMRAM:
    70                           	opt stack 0
    71                           
    72                           ;initializer for _screenMode
    73  00F366  0002               	dw	2
    74                           
    75                           	psect	mediumconst
    76  00FE8A                     __pmediumconst:
    77                           	opt stack 0
    78  00FE8A  00                 	db	0
    79  00FE8B                     _keys:
    80                           	opt stack 0
    81  00FE8B  31                 	db	49
    82  00FE8C  32                 	db	50
    83  00FE8D  33                 	db	51
    84  00FE8E  41                 	db	65
    85  00FE8F  34                 	db	52
    86  00FE90  35                 	db	53
    87  00FE91  36                 	db	54
    88  00FE92  42                 	db	66
    89  00FE93  37                 	db	55
    90  00FE94  38                 	db	56
    91  00FE95  39                 	db	57
    92  00FE96  43                 	db	67
    93  00FE97  2A                 	db	42
    94  00FE98  30                 	db	48
    95  00FE99  23                 	db	35
    96  00FE9A  44                 	db	68
    97  00FE9B  00                 	db	0
    98  00FE9C                     __end_of_keys:
    99                           	opt stack 0
   100  00FE9C                     _dpowers:
   101                           	opt stack 0
   102  00FE9C  0001               	dw	1
   103  00FE9E  000A               	dw	10
   104  00FEA0  0064               	dw	100
   105  00FEA2  03E8               	dw	1000
   106  00FEA4  2710               	dw	10000
   107  00FEA6                     __end_of_dpowers:
   108                           	opt stack 0
   109  00FEA6                     _hexpowers:
   110                           	opt stack 0
   111  00FEA6  0001               	dw	1
   112  00FEA8  0010               	dw	16
   113  00FEAA  0100               	dw	256
   114  00FEAC  1000               	dw	4096
   115  00FEAE                     __end_of_hexpowers:
   116                           	opt stack 0
   117  0000                     _ADCON0	set	4034
   118  0000                     _ADCON1	set	4033
   119  0000                     _INTCONbits	set	4082
   120  0000                     _LATB	set	3978
   121  0000                     _LATC	set	3979
   122  0000                     _LATD	set	3980
   123  0000                     _LATDbits	set	3980
   124  0000                     _PORTB	set	3969
   125  0000                     _PORTBbits	set	3969
   126  0000                     _SSPADD	set	4040
   127  0000                     _SSPBUF	set	4041
   128  0000                     _SSPCON1	set	4038
   129  0000                     _SSPCON2	set	4037
   130  0000                     _SSPSTAT	set	4039
   131  0000                     _TRISB	set	3987
   132  0000                     _TRISC	set	3988
   133  0000                     _TRISD	set	3989
   134  0000                     _ACKDT	set	32301
   135  0000                     _ACKEN	set	32300
   136  0000                     _PEN	set	32298
   137  0000                     _RCEN	set	32299
   138  0000                     _RSEN	set	32297
   139  0000                     _SEN	set	32296
   140  0000                     _TRISC3	set	31907
   141  0000                     _TRISC4	set	31908
   142  00FEAE                     STR_8:
   143  00FEAE  25                 	db	37
   144  00FEAF  30                 	db	48	;'0'
   145  00FEB0  32                 	db	50	;'2'
   146  00FEB1  78                 	db	120	;'x'
   147  00FEB2  3A                 	db	58	;':'
   148  00FEB3  25                 	db	37
   149  00FEB4  30                 	db	48	;'0'
   150  00FEB5  32                 	db	50	;'2'
   151  00FEB6  78                 	db	120	;'x'
   152  00FEB7  20                 	db	32
   153  00FEB8  20                 	db	32
   154  00FEB9  20                 	db	32
   155  00FEBA  20                 	db	32
   156  00FEBB  20                 	db	32
   157  00FEBC  20                 	db	32
   158  00FEBD  20                 	db	32
   159  00FEBE  20                 	db	32
   160  00FEBF  20                 	db	32
   161  00FEC0  20                 	db	32
   162  00FEC1  20                 	db	32
   163  00FEC2  20                 	db	32
   164  00FEC3  20                 	db	32
   165  00FEC4  20                 	db	32
   166  00FEC5  20                 	db	32
   167  00FEC6  00                 	db	0
   168  00FEC7                     STR_17:
   169  00FEC7  25                 	db	37
   170  00FEC8  30                 	db	48	;'0'
   171  00FEC9  32                 	db	50	;'2'
   172  00FECA  78                 	db	120	;'x'
   173  00FECB  2F                 	db	47
   174  00FECC  25                 	db	37
   175  00FECD  30                 	db	48	;'0'
   176  00FECE  32                 	db	50	;'2'
   177  00FECF  78                 	db	120	;'x'
   178  00FED0  2F                 	db	47
   179  00FED1  25                 	db	37
   180  00FED2  30                 	db	48	;'0'
   181  00FED3  32                 	db	50	;'2'
   182  00FED4  78                 	db	120	;'x'
   183  00FED5  20                 	db	32
   184  00FED6  20                 	db	32
   185  00FED7  20                 	db	32
   186  00FED8  20                 	db	32
   187  00FED9  20                 	db	32
   188  00FEDA  20                 	db	32
   189  00FEDB  20                 	db	32
   190  00FEDC  20                 	db	32
   191  00FEDD  00                 	db	0
   192  00FEDE                     STR_18:
   193  00FEDE  25                 	db	37
   194  00FEDF  30                 	db	48	;'0'
   195  00FEE0  32                 	db	50	;'2'
   196  00FEE1  78                 	db	120	;'x'
   197  00FEE2  3A                 	db	58	;':'
   198  00FEE3  25                 	db	37
   199  00FEE4  30                 	db	48	;'0'
   200  00FEE5  32                 	db	50	;'2'
   201  00FEE6  78                 	db	120	;'x'
   202  00FEE7  3A                 	db	58	;':'
   203  00FEE8  25                 	db	37
   204  00FEE9  30                 	db	48	;'0'
   205  00FEEA  32                 	db	50	;'2'
   206  00FEEB  78                 	db	120	;'x'
   207  00FEEC  20                 	db	32
   208  00FEED  20                 	db	32
   209  00FEEE  20                 	db	32
   210  00FEEF  20                 	db	32
   211  00FEF0  20                 	db	32
   212  00FEF1  20                 	db	32
   213  00FEF2  20                 	db	32
   214  00FEF3  20                 	db	32
   215  00FEF4  00                 	db	0
   216  00FEF5                     STR_14:
   217  00FEF5  42                 	db	66	;'B'
   218  00FEF6  41                 	db	65	;'A'
   219  00FEF7  54                 	db	84	;'T'
   220  00FEF8  54                 	db	84	;'T'
   221  00FEF9  45                 	db	69	;'E'
   222  00FEFA  52                 	db	82	;'R'
   223  00FEFB  49                 	db	73	;'I'
   224  00FEFC  45                 	db	69	;'E'
   225  00FEFD  53                 	db	83	;'S'
   226  00FEFE  3A                 	db	58	;':'
   227  00FEFF  20                 	db	32
   228  00FF00  25                 	db	37
   229  00FF01  30                 	db	48	;'0'
   230  00FF02  32                 	db	50	;'2'
   231  00FF03  64                 	db	100	;'d'
   232  00FF04  20                 	db	32
   233  00FF05  20                 	db	32
   234  00FF06  20                 	db	32
   235  00FF07  20                 	db	32
   236  00FF08  20                 	db	32
   237  00FF09  00                 	db	0
   238  00FF0A                     STR_16:
   239  00FF0A  42                 	db	66	;'B'
   240  00FF0B  41                 	db	65	;'A'
   241  00FF0C  54                 	db	84	;'T'
   242  00FF0D  54                 	db	84	;'T'
   243  00FF0E  45                 	db	69	;'E'
   244  00FF0F  52                 	db	82	;'R'
   245  00FF10  49                 	db	73	;'I'
   246  00FF11  45                 	db	69	;'E'
   247  00FF12  53                 	db	83	;'S'
   248  00FF13  3A                 	db	58	;':'
   249  00FF14  20                 	db	32
   250  00FF15  25                 	db	37
   251  00FF16  30                 	db	48	;'0'
   252  00FF17  32                 	db	50	;'2'
   253  00FF18  78                 	db	120	;'x'
   254  00FF19  20                 	db	32
   255  00FF1A  20                 	db	32
   256  00FF1B  20                 	db	32
   257  00FF1C  20                 	db	32
   258  00FF1D  20                 	db	32
   259  00FF1E  00                 	db	0
   260  00FF1F                     STR_10:
   261  00FF1F  42                 	db	66	;'B'
   262  00FF20  41                 	db	65	;'A'
   263  00FF21  54                 	db	84	;'T'
   264  00FF22  54                 	db	84	;'T'
   265  00FF23  45                 	db	69	;'E'
   266  00FF24  52                 	db	82	;'R'
   267  00FF25  49                 	db	73	;'I'
   268  00FF26  45                 	db	69	;'E'
   269  00FF27  53                 	db	83	;'S'
   270  00FF28  3A                 	db	58	;':'
   271  00FF29  20                 	db	32
   272  00FF2A  25                 	db	37
   273  00FF2B  30                 	db	48	;'0'
   274  00FF2C  32                 	db	50	;'2'
   275  00FF2D  78                 	db	120	;'x'
   276  00FF2E  20                 	db	32
   277  00FF2F  20                 	db	32
   278  00FF30  20                 	db	32
   279  00FF31  00                 	db	0
   280  00FF32                     STR_19:
   281  00FF32  30                 	db	48	;'0'
   282  00FF33  31                 	db	49	;'1'
   283  00FF34  32                 	db	50	;'2'
   284  00FF35  33                 	db	51	;'3'
   285  00FF36  34                 	db	52	;'4'
   286  00FF37  35                 	db	53	;'5'
   287  00FF38  36                 	db	54	;'6'
   288  00FF39  37                 	db	55	;'7'
   289  00FF3A  38                 	db	56	;'8'
   290  00FF3B  39                 	db	57	;'9'
   291  00FF3C  61                 	db	97	;'a'
   292  00FF3D  62                 	db	98	;'b'
   293  00FF3E  63                 	db	99	;'c'
   294  00FF3F  64                 	db	100	;'d'
   295  00FF40  65                 	db	101	;'e'
   296  00FF41  66                 	db	102	;'f'
   297  00FF42  00                 	db	0
   298  00FF43                     STR_4:
   299  00FF43  20                 	db	32
   300  00FF44  20                 	db	32
   301  00FF45  20                 	db	32
   302  00FF46  20                 	db	32
   303  00FF47  20                 	db	32
   304  00FF48  20                 	db	32
   305  00FF49  20                 	db	32
   306  00FF4A  20                 	db	32
   307  00FF4B  20                 	db	32
   308  00FF4C  20                 	db	32
   309  00FF4D  20                 	db	32
   310  00FF4E  20                 	db	32
   311  00FF4F  20                 	db	32
   312  00FF50  20                 	db	32
   313  00FF51  20                 	db	32
   314  00FF52  20                 	db	32
   315  00FF53  00                 	db	0
   316  00FF54                     STR_3:
   317  00FF54  52                 	db	82	;'R'
   318  00FF55  55                 	db	85	;'U'
   319  00FF56  4E                 	db	78	;'N'
   320  00FF57  4E                 	db	78	;'N'
   321  00FF58  49                 	db	73	;'I'
   322  00FF59  4E                 	db	78	;'N'
   323  00FF5A  47                 	db	71	;'G'
   324  00FF5B  2E                 	db	46
   325  00FF5C  2E                 	db	46
   326  00FF5D  2E                 	db	46
   327  00FF5E  20                 	db	32
   328  00FF5F  20                 	db	32
   329  00FF60  20                 	db	32
   330  00FF61  20                 	db	32
   331  00FF62  20                 	db	32
   332  00FF63  20                 	db	32
   333  00FF64  00                 	db	0
   334  00FF65                     STR_11:
   335  00FF65  4E                 	db	78	;'N'
   336  00FF66  55                 	db	85	;'U'
   337  00FF67  4D                 	db	77	;'M'
   338  00FF68  42                 	db	66	;'B'
   339  00FF69  45                 	db	69	;'E'
   340  00FF6A  52                 	db	82	;'R'
   341  00FF6B  20                 	db	32
   342  00FF6C  4F                 	db	79	;'O'
   343  00FF6D  46                 	db	70	;'F'
   344  00FF6E  20                 	db	32
   345  00FF6F  43                 	db	67	;'C'
   346  00FF70  20                 	db	32
   347  00FF71  20                 	db	32
   348  00FF72  20                 	db	32
   349  00FF73  20                 	db	32
   350  00FF74  20                 	db	32
   351  00FF75  00                 	db	0
   352  00FF76                     STR_6:
   353  00FF76  54                 	db	84	;'T'
   354  00FF77  4F                 	db	79	;'O'
   355  00FF78  20                 	db	32
   356  00FF79  43                 	db	67	;'C'
   357  00FF7A  4F                 	db	79	;'O'
   358  00FF7B  4E                 	db	78	;'N'
   359  00FF7C  54                 	db	84	;'T'
   360  00FF7D  49                 	db	73	;'I'
   361  00FF7E  4E                 	db	78	;'N'
   362  00FF7F  55                 	db	85	;'U'
   363  00FF80  45                 	db	69	;'E'
   364  00FF81  20                 	db	32
   365  00FF82  20                 	db	32
   366  00FF83  20                 	db	32
   367  00FF84  20                 	db	32
   368  00FF85  20                 	db	32
   369  00FF86  00                 	db	0
   370  00FF87                     STR_15:
   371  00FF87  4E                 	db	78	;'N'
   372  00FF88  55                 	db	85	;'U'
   373  00FF89  4D                 	db	77	;'M'
   374  00FF8A  42                 	db	66	;'B'
   375  00FF8B  45                 	db	69	;'E'
   376  00FF8C  52                 	db	82	;'R'
   377  00FF8D  20                 	db	32
   378  00FF8E  4F                 	db	79	;'O'
   379  00FF8F  46                 	db	70	;'F'
   380  00FF90  20                 	db	32
   381  00FF91  41                 	db	65	;'A'
   382  00FF92  41                 	db	65	;'A'
   383  00FF93  20                 	db	32
   384  00FF94  20                 	db	32
   385  00FF95  20                 	db	32
   386  00FF96  20                 	db	32
   387  00FF97  00                 	db	0
   388  00FF98                     STR_13:
   389  00FF98  4E                 	db	78	;'N'
   390  00FF99  55                 	db	85	;'U'
   391  00FF9A  4D                 	db	77	;'M'
   392  00FF9B  42                 	db	66	;'B'
   393  00FF9C  45                 	db	69	;'E'
   394  00FF9D  52                 	db	82	;'R'
   395  00FF9E  20                 	db	32
   396  00FF9F  4F                 	db	79	;'O'
   397  00FFA0  46                 	db	70	;'F'
   398  00FFA1  20                 	db	32
   399  00FFA2  39                 	db	57	;'9'
   400  00FFA3  56                 	db	86	;'V'
   401  00FFA4  20                 	db	32
   402  00FFA5  20                 	db	32
   403  00FFA6  20                 	db	32
   404  00FFA7  20                 	db	32
   405  00FFA8  00                 	db	0
   406  00FFA9                     STR_5:
   407  00FFA9  44                 	db	68	;'D'
   408  00FFAA  4F                 	db	79	;'O'
   409  00FFAB  4E                 	db	78	;'N'
   410  00FFAC  45                 	db	69	;'E'
   411  00FFAD  21                 	db	33
   412  00FFAE  20                 	db	32
   413  00FFAF  50                 	db	80	;'P'
   414  00FFB0  52                 	db	82	;'R'
   415  00FFB1  45                 	db	69	;'E'
   416  00FFB2  53                 	db	83	;'S'
   417  00FFB3  53                 	db	83	;'S'
   418  00FFB4  20                 	db	32
   419  00FFB5  2A                 	db	42
   420  00FFB6  20                 	db	32
   421  00FFB7  20                 	db	32
   422  00FFB8  20                 	db	32
   423  00FFB9  00                 	db	0
   424  00FFBA                     STR_7:
   425  00FFBA  54                 	db	84	;'T'
   426  00FFBB  4F                 	db	79	;'O'
   427  00FFBC  54                 	db	84	;'T'
   428  00FFBD  41                 	db	65	;'A'
   429  00FFBE  4C                 	db	76	;'L'
   430  00FFBF  20                 	db	32
   431  00FFC0  52                 	db	82	;'R'
   432  00FFC1  55                 	db	85	;'U'
   433  00FFC2  4E                 	db	78	;'N'
   434  00FFC3  20                 	db	32
   435  00FFC4  54                 	db	84	;'T'
   436  00FFC5  49                 	db	73	;'I'
   437  00FFC6  4D                 	db	77	;'M'
   438  00FFC7  45                 	db	69	;'E'
   439  00FFC8  3A                 	db	58	;':'
   440  00FFC9  20                 	db	32
   441  00FFCA  00                 	db	0
   442  00FFCB                     STR_9:
   443  00FFCB  54                 	db	84	;'T'
   444  00FFCC  4F                 	db	79	;'O'
   445  00FFCD  54                 	db	84	;'T'
   446  00FFCE  41                 	db	65	;'A'
   447  00FFCF  4C                 	db	76	;'L'
   448  00FFD0  20                 	db	32
   449  00FFD1  4E                 	db	78	;'N'
   450  00FFD2  55                 	db	85	;'U'
   451  00FFD3  4D                 	db	77	;'M'
   452  00FFD4  42                 	db	66	;'B'
   453  00FFD5  45                 	db	69	;'E'
   454  00FFD6  52                 	db	82	;'R'
   455  00FFD7  20                 	db	32
   456  00FFD8  4F                 	db	79	;'O'
   457  00FFD9  46                 	db	70	;'F'
   458  00FFDA  20                 	db	32
   459  00FFDB  00                 	db	0
   460  00FFDC                     STR_1:
   461  00FFDC  53                 	db	83	;'S'
   462  00FFDD  54                 	db	84	;'T'
   463  00FFDE  41                 	db	65	;'A'
   464  00FFDF  52                 	db	82	;'R'
   465  00FFE0  54                 	db	84	;'T'
   466  00FFE1  3A                 	db	58	;':'
   467  00FFE2  20                 	db	32
   468  00FFE3  20                 	db	32
   469  00FFE4  20                 	db	32
   470  00FFE5  50                 	db	80	;'P'
   471  00FFE6  52                 	db	82	;'R'
   472  00FFE7  45                 	db	69	;'E'
   473  00FFE8  53                 	db	83	;'S'
   474  00FFE9  53                 	db	83	;'S'
   475  00FFEA  20                 	db	32
   476  00FFEB  2A                 	db	42
   477  00FFEC  00                 	db	0
   478  00FFED                     STR_2:
   479  00FFED  4F                 	db	79	;'O'
   480  00FFEE  50                 	db	80	;'P'
   481  00FFEF  54                 	db	84	;'T'
   482  00FFF0  49                 	db	73	;'I'
   483  00FFF1  4F                 	db	79	;'O'
   484  00FFF2  4E                 	db	78	;'N'
   485  00FFF3  53                 	db	83	;'S'
   486  00FFF4  3A                 	db	58	;':'
   487  00FFF5  20                 	db	32
   488  00FFF6  20                 	db	32
   489  00FFF7  34                 	db	52	;'4'
   490  00FFF8  20                 	db	32
   491  00FFF9  4F                 	db	79	;'O'
   492  00FFFA  52                 	db	82	;'R'
   493  00FFFB  20                 	db	32
   494  00FFFC  36                 	db	54	;'6'
   495  00FFFD  00                 	db	0
   496  0000                     
   497                           ; #config settings
   498  00FFFE  00                 	db	0	; dummy byte at the end
   499  0000                     
   500                           	psect	cinit
   501  00F416                     __pcinit:
   502                           	opt stack 0
   503  00F416                     start_initialization:
   504                           	opt stack 0
   505  00F416                     __initialization:
   506                           	opt stack 0
   507                           
   508                           ; Initialize objects allocated to COMRAM (2 bytes)
   509                           ; load TBLPTR registers with __pidataCOMRAM
   510  00F416  0E66               	movlw	low __pidataCOMRAM
   511  00F418  6EF6               	movwf	tblptrl,c
   512  00F41A  0EF3               	movlw	high __pidataCOMRAM
   513  00F41C  6EF7               	movwf	tblptrh,c
   514  00F41E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   515  00F420  6EF8               	movwf	tblptru,c
   516  00F422  0009               	tblrd		*+	;fetch initializer
   517  00F424  CFF5 F043          	movff	tablat,__pdataCOMRAM
   518  00F428  0009               	tblrd		*+	;fetch initializer
   519  00F42A  CFF5 F044          	movff	tablat,__pdataCOMRAM+1
   520                           
   521                           ; Clear objects allocated to COMRAM (7 bytes)
   522  00F42E  EE00  F03C         	lfsr	0,__pbssCOMRAM
   523  00F432  0E07               	movlw	7
   524  00F434                     clear_0:
   525  00F434  6AEE               	clrf	postinc0,c
   526  00F436  06E8               	decf	wreg,f,c
   527  00F438  E1FD               	bnz	clear_0
   528  00F43A                     end_of_initialization:
   529                           	opt stack 0
   530  00F43A                     __end_of__initialization:
   531                           	opt stack 0
   532  00F43A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   533  00F43C  6EF8               	movwf	tblptru,c
   534  00F43E  0100               	movlb	0
   535  00F440  EF28  F07D         	goto	_main	;jump to C main() function
   536                           tblptru	equ	0xFF8
   537                           tblptrh	equ	0xFF7
   538                           tblptrl	equ	0xFF6
   539                           tablat	equ	0xFF5
   540                           postinc0	equ	0xFEE
   541                           wreg	equ	0xFE8
   542                           
   543                           	psect	bssCOMRAM
   544  00003C                     __pbssCOMRAM:
   545                           	opt stack 0
   546  00003C                     _time:
   547                           	opt stack 0
   548  00003C                     	ds	7
   549                           tblptru	equ	0xFF8
   550                           tblptrh	equ	0xFF7
   551                           tblptrl	equ	0xFF6
   552                           tablat	equ	0xFF5
   553                           postinc0	equ	0xFEE
   554                           wreg	equ	0xFE8
   555                           
   556                           	psect	dataCOMRAM
   557  000043                     __pdataCOMRAM:
   558                           	opt stack 0
   559  000043                     _screenMode:
   560                           	opt stack 0
   561  000043                     	ds	2
   562                           tblptru	equ	0xFF8
   563                           tblptrh	equ	0xFF7
   564                           tblptrl	equ	0xFF6
   565                           tablat	equ	0xFF5
   566                           postinc0	equ	0xFEE
   567                           wreg	equ	0xFE8
   568                           
   569                           	psect	cstackCOMRAM
   570  000001                     __pcstackCOMRAM:
   571                           	opt stack 0
   572  000001                     ??_isdigit:
   573  000001                     ??_I2C_Master_Wait:
   574  000001                     ?___wmul:
   575                           	opt stack 0
   576  000001                     ?___lwdiv:
   577                           	opt stack 0
   578  000001                     ?___lldiv:
   579                           	opt stack 0
   580  000001                     switchMenu@right:
   581                           	opt stack 0
   582  000001                     lcdNibble@temp:
   583                           	opt stack 0
   584  000001                     ___wmul@multiplier:
   585                           	opt stack 0
   586  000001                     ___lwdiv@dividend:
   587                           	opt stack 0
   588  000001                     ___lldiv@dividend:
   589                           	opt stack 0
   590                           
   591                           ; 4 bytes @ 0x0
   592  000001                     	ds	1
   593  000002                     switchMenu@key:
   594                           	opt stack 0
   595  000002                     I2C_Master_Read@a:
   596                           	opt stack 0
   597  000002                     lcdNibble@data:
   598                           	opt stack 0
   599  000002                     _isdigit$602:
   600                           	opt stack 0
   601  000002                     I2C_Master_Write@d:
   602                           	opt stack 0
   603                           
   604                           ; 2 bytes @ 0x1
   605  000002                     	ds	1
   606  000003                     switchMenu@left:
   607                           	opt stack 0
   608  000003                     I2C_Master_Read@temp:
   609                           	opt stack 0
   610  000003                     lcdInst@data:
   611                           	opt stack 0
   612  000003                     putch@data:
   613                           	opt stack 0
   614  000003                     isdigit@c:
   615                           	opt stack 0
   616  000003                     ___wmul@multiplicand:
   617                           	opt stack 0
   618  000003                     ___lwdiv@divisor:
   619                           	opt stack 0
   620                           
   621                           ; 2 bytes @ 0x2
   622  000003                     	ds	1
   623  000004                     ??_initLCD:
   624  000004                     
   625                           ; 1 bytes @ 0x3
   626  000004                     	ds	1
   627  000005                     ___wmul@product:
   628                           	opt stack 0
   629  000005                     ___lwdiv@quotient:
   630                           	opt stack 0
   631  000005                     ___lldiv@divisor:
   632                           	opt stack 0
   633                           
   634                           ; 4 bytes @ 0x4
   635  000005                     	ds	2
   636  000007                     ___lwdiv@counter:
   637                           	opt stack 0
   638                           
   639                           ; 1 bytes @ 0x6
   640  000007                     	ds	1
   641  000008                     ?___lwmod:
   642                           	opt stack 0
   643  000008                     ___lwmod@dividend:
   644                           	opt stack 0
   645                           
   646                           ; 2 bytes @ 0x7
   647  000008                     	ds	1
   648  000009                     ___lldiv@quotient:
   649                           	opt stack 0
   650                           
   651                           ; 4 bytes @ 0x8
   652  000009                     	ds	1
   653  00000A                     ___lwmod@divisor:
   654                           	opt stack 0
   655                           
   656                           ; 2 bytes @ 0x9
   657  00000A                     	ds	2
   658  00000C                     ___lwmod@counter:
   659                           	opt stack 0
   660                           
   661                           ; 1 bytes @ 0xB
   662  00000C                     	ds	1
   663  00000D                     ?_printf:
   664                           	opt stack 0
   665  00000D                     ___lldiv@counter:
   666                           	opt stack 0
   667  00000D                     printf@f:
   668                           	opt stack 0
   669                           
   670                           ; 2 bytes @ 0xC
   671  00000D                     	ds	1
   672  00000E                     I2C_Master_Init@c:
   673                           	opt stack 0
   674                           
   675                           ; 4 bytes @ 0xD
   676  00000E                     	ds	4
   677  000012                     ??_I2C_Master_Init:
   678                           
   679                           ; 1 bytes @ 0x11
   680  000012                     	ds	3
   681  000015                     ??_printf:
   682                           
   683                           ; 1 bytes @ 0x14
   684  000015                     	ds	4
   685  000019                     printf@idx:
   686                           	opt stack 0
   687                           
   688                           ; 1 bytes @ 0x18
   689  000019                     	ds	1
   690  00001A                     printf@ap:
   691                           	opt stack 0
   692                           
   693                           ; 2 bytes @ 0x19
   694  00001A                     	ds	2
   695  00001C                     printf@prec:
   696                           	opt stack 0
   697                           
   698                           ; 1 bytes @ 0x1B
   699  00001C                     	ds	1
   700  00001D                     printf@val:
   701                           	opt stack 0
   702                           
   703                           ; 2 bytes @ 0x1C
   704  00001D                     	ds	2
   705  00001F                     printf@flag:
   706                           	opt stack 0
   707                           
   708                           ; 1 bytes @ 0x1E
   709  00001F                     	ds	1
   710  000020                     printf@width:
   711                           	opt stack 0
   712                           
   713                           ; 2 bytes @ 0x1F
   714  000020                     	ds	2
   715  000022                     printf@c:
   716                           	opt stack 0
   717                           
   718                           ; 1 bytes @ 0x21
   719  000022                     	ds	1
   720  000023                     printRTC@i:
   721                           	opt stack 0
   722                           
   723                           ; 1 bytes @ 0x22
   724  000023                     	ds	1
   725  000024                     ??_main:
   726                           
   727                           ; 1 bytes @ 0x23
   728  000024                     	ds	1
   729  000025                     main@min:
   730                           	opt stack 0
   731                           
   732                           ; 2 bytes @ 0x24
   733  000025                     	ds	2
   734  000027                     main@sec:
   735                           	opt stack 0
   736                           
   737                           ; 2 bytes @ 0x26
   738  000027                     	ds	2
   739  000029                     main@numBats:
   740                           	opt stack 0
   741                           
   742                           ; 2 bytes @ 0x28
   743  000029                     	ds	2
   744  00002B                     main@numC:
   745                           	opt stack 0
   746                           
   747                           ; 2 bytes @ 0x2A
   748  00002B                     	ds	2
   749  00002D                     main@num9V:
   750                           	opt stack 0
   751                           
   752                           ; 2 bytes @ 0x2C
   753  00002D                     	ds	2
   754  00002F                     main@numAA:
   755                           	opt stack 0
   756                           
   757                           ; 2 bytes @ 0x2E
   758  00002F                     	ds	2
   759  000031                     main@keypress_228:
   760                           	opt stack 0
   761                           
   762                           ; 1 bytes @ 0x30
   763  000031                     	ds	1
   764  000032                     main@keypress_233:
   765                           	opt stack 0
   766                           
   767                           ; 1 bytes @ 0x31
   768  000032                     	ds	1
   769  000033                     main@keypress_237:
   770                           	opt stack 0
   771                           
   772                           ; 1 bytes @ 0x32
   773  000033                     	ds	1
   774  000034                     main@keypress_241:
   775                           	opt stack 0
   776                           
   777                           ; 1 bytes @ 0x33
   778  000034                     	ds	1
   779  000035                     main@keypress_245:
   780                           	opt stack 0
   781                           
   782                           ; 1 bytes @ 0x34
   783  000035                     	ds	1
   784  000036                     main@keypress_249:
   785                           	opt stack 0
   786                           
   787                           ; 1 bytes @ 0x35
   788  000036                     	ds	1
   789  000037                     main@keypress_250:
   790                           	opt stack 0
   791                           
   792                           ; 1 bytes @ 0x36
   793  000037                     	ds	1
   794  000038                     main@keypress:
   795                           	opt stack 0
   796                           
   797                           ; 1 bytes @ 0x37
   798  000038                     	ds	1
   799  000039                     main@i:
   800                           	opt stack 0
   801                           
   802                           ; 1 bytes @ 0x38
   803  000039                     	ds	1
   804  00003A                     main@i_224:
   805                           	opt stack 0
   806                           
   807                           ; 1 bytes @ 0x39
   808  00003A                     	ds	1
   809  00003B                     main@i_225:
   810                           	opt stack 0
   811                           
   812                           ; 1 bytes @ 0x3A
   813  00003B                     	ds	1
   814                           tblptru	equ	0xFF8
   815                           tblptrh	equ	0xFF7
   816                           tblptrl	equ	0xFF6
   817                           tablat	equ	0xFF5
   818                           postinc0	equ	0xFEE
   819                           wreg	equ	0xFE8
   820                           
   821 ;;
   822 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   823 ;;
   824 ;; *************** function _main *****************
   825 ;; Defined at:
   826 ;;		line 18 in file "../../../../AER201 pseudo code/pseudo main program.c"
   827 ;; Parameters:    Size  Location     Type
   828 ;;		None
   829 ;; Auto vars:     Size  Location     Type
   830 ;;  i               1   58[COMRAM] unsigned char 
   831 ;;  i               1   57[COMRAM] unsigned char 
   832 ;;  i               1   56[COMRAM] unsigned char 
   833 ;;  keypress        1   54[COMRAM] unsigned char 
   834 ;;  numAA           2   46[COMRAM] unsigned int 
   835 ;;  keypress        1   53[COMRAM] unsigned char 
   836 ;;  num9V           2   44[COMRAM] unsigned int 
   837 ;;  keypress        1   52[COMRAM] unsigned char 
   838 ;;  numC            2   42[COMRAM] unsigned int 
   839 ;;  keypress        1   51[COMRAM] unsigned char 
   840 ;;  numBats         2   40[COMRAM] unsigned int 
   841 ;;  keypress        1   50[COMRAM] unsigned char 
   842 ;;  sec             2   38[COMRAM] unsigned int 
   843 ;;  min             2   36[COMRAM] unsigned int 
   844 ;;  keypress        1   49[COMRAM] unsigned char 
   845 ;;  keypress        1   48[COMRAM] unsigned char 
   846 ;;  keypress        1   55[COMRAM] unsigned char 
   847 ;; Return value:  Size  Location     Type
   848 ;;                  1    wreg      void 
   849 ;; Registers used:
   850 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   851 ;; Tracked objects:
   852 ;;		On entry : 0/0
   853 ;;		On exit  : 0/0
   854 ;;		Unchanged: 0/0
   855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   856 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   857 ;;      Locals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   858 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   859 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   860 ;;Total ram usage:       24 bytes
   861 ;; Hardware stack levels required when called:    4
   862 ;; This function calls:
   863 ;;		_I2C_Master_Init
   864 ;;		_initLCD
   865 ;;		_lcdInst
   866 ;;		_printRTC
   867 ;;		_printf
   868 ;;		_switchMenu
   869 ;; This function is called by:
   870 ;;		Startup code after reset
   871 ;; This function uses a non-reentrant model
   872 ;;
   873                           
   874                           	psect	text0
   875  00FA50                     __ptext0:
   876                           	opt stack 0
   877  00FA50                     _main:
   878                           	opt stack 27
   879                           
   880                           ;pseudo main program.c: 20: TRISC = 0x00;
   881                           
   882                           ;incstack = 0
   883  00FA50  0E00               	movlw	0
   884  00FA52  6E94               	movwf	3988,c	;volatile
   885                           
   886                           ;pseudo main program.c: 21: TRISD = 0x00;
   887  00FA54  0E00               	movlw	0
   888  00FA56  6E95               	movwf	3989,c	;volatile
   889                           
   890                           ;pseudo main program.c: 22: TRISB = 0xFF;
   891  00FA58  6893               	setf	3987,c	;volatile
   892                           
   893                           ;pseudo main program.c: 23: LATB = 0x00;
   894  00FA5A  0E00               	movlw	0
   895  00FA5C  6E8A               	movwf	3978,c	;volatile
   896                           
   897                           ;pseudo main program.c: 24: LATC = 0x00;
   898  00FA5E  0E00               	movlw	0
   899  00FA60  6E8B               	movwf	3979,c	;volatile
   900                           
   901                           ;pseudo main program.c: 25: ADCON0 = 0x00;
   902  00FA62  0E00               	movlw	0
   903  00FA64  6EC2               	movwf	4034,c	;volatile
   904                           
   905                           ;pseudo main program.c: 26: ADCON1 = 0xFF;
   906  00FA66  68C1               	setf	4033,c	;volatile
   907                           
   908                           ;pseudo main program.c: 27: initLCD();
   909  00FA68  EC67  F07A         	call	_initLCD	;wreg free
   910                           
   911                           ;pseudo main program.c: 29: I2C_Master_Init(10000);
   912  00FA6C  0E10               	movlw	16
   913  00FA6E  6E0E               	movwf	I2C_Master_Init@c,c
   914  00FA70  0E27               	movlw	39
   915  00FA72  6E0F               	movwf	I2C_Master_Init@c+1,c
   916  00FA74  0E00               	movlw	0
   917  00FA76  6E10               	movwf	I2C_Master_Init@c+2,c
   918  00FA78  0E00               	movlw	0
   919  00FA7A  6E11               	movwf	I2C_Master_Init@c+3,c
   920  00FA7C  ECDD  F07A         	call	_I2C_Master_Init	;wreg free
   921                           
   922                           ;pseudo main program.c: 30: (INTCONbits.GIE = 0);
   923  00FA80  9EF2               	bcf	intcon,7,c	;volatile
   924                           
   925                           ;pseudo main program.c: 33: while (screenMode == 2){
   926                           
   927                           ;pseudo main program.c: 32: while (1) {
   928  00FA82  D03C               	goto	l1717
   929  00FA84                     l1703:
   930                           
   931                           ;pseudo main program.c: 35: lcdInst(0b10000000);;
   932  00FA84  0E80               	movlw	128
   933  00FA86  ECC1  F079         	call	_lcdInst
   934                           
   935                           ;pseudo main program.c: 36: printf("START:   PRESS *");
   936  00FA8A  0EDC               	movlw	low STR_1
   937  00FA8C  6E0D               	movwf	printf@f,c
   938  00FA8E  0EFF               	movlw	high STR_1
   939  00FA90  6E0E               	movwf	printf@f+1,c
   940  00FA92  ECA2  F07B         	call	_printf	;wreg free
   941                           
   942                           ;pseudo main program.c: 37: lcdInst(0b11000000);;
   943  00FA96  0EC0               	movlw	192
   944  00FA98  ECC1  F079         	call	_lcdInst
   945                           
   946                           ;pseudo main program.c: 38: printf("OPTIONS:  4 OR 6");
   947  00FA9C  0EED               	movlw	low STR_2
   948  00FA9E  6E0D               	movwf	printf@f,c
   949  00FAA0  0EFF               	movlw	high STR_2
   950  00FAA2  6E0E               	movwf	printf@f+1,c
   951  00FAA4  ECA2  F07B         	call	_printf	;wreg free
   952  00FAA8                     l54:
   953  00FAA8  A281               	btfss	3969,1,c	;volatile
   954  00FAAA  D7FE               	goto	l54
   955                           
   956                           ;pseudo main program.c: 43: }
   957                           ;pseudo main program.c: 44: unsigned char keypress = (PORTB & 0xF0)>>4;
   958  00FAAC  3881               	swapf	3969,w,c	;volatile
   959  00FAAE  0B0F               	andlw	15
   960  00FAB0  0B0F               	andlw	15
   961  00FAB2  6E38               	movwf	main@keypress,c
   962  00FAB4                     l57:
   963  00FAB4  B281               	btfsc	3969,1,c	;volatile
   964  00FAB6  D7FE               	goto	l57
   965                           
   966                           ;pseudo main program.c: 47: }
   967                           ;pseudo main program.c: 48: if (keys[keypress] == '*')
   968  00FAB8  5038               	movf	main@keypress,w,c
   969  00FABA  0D01               	mullw	1
   970  00FABC  0E8B               	movlw	low _keys
   971  00FABE  24F3               	addwf	prodl,w,c
   972  00FAC0  6EF6               	movwf	tblptrl,c
   973  00FAC2  0EFE               	movlw	high _keys
   974  00FAC4  20F4               	addwfc	prodh,w,c
   975  00FAC6  6EF7               	movwf	tblptrh,c
   976  00FAC8                     	if	0	;There are less than 3 active tblptr bytes
   977  00FAC8                     	endif
   978  00FAC8  0008               	tblrd		*
   979  00FACA  50F5               	movf	tablat,w,c
   980  00FACC  0A2A               	xorlw	42
   981  00FACE  A4D8               	btfss	status,2,c
   982  00FAD0  D005               	goto	l1715
   983                           
   984                           ;pseudo main program.c: 49: screenMode = 1;
   985  00FAD2  0E00               	movlw	0
   986  00FAD4  6E44               	movwf	_screenMode+1,c
   987  00FAD6  0E01               	movlw	1
   988  00FAD8  6E43               	movwf	_screenMode,c
   989  00FADA  D010               	goto	l1717
   990  00FADC                     l1715:
   991                           
   992                           ;pseudo main program.c: 50: else
   993                           ;pseudo main program.c: 51: switchMenu('4', '6', keys[keypress]);
   994  00FADC  0E36               	movlw	54
   995  00FADE  6E01               	movwf	switchMenu@right,c
   996  00FAE0  5038               	movf	main@keypress,w,c
   997  00FAE2  0D01               	mullw	1
   998  00FAE4  0E8B               	movlw	low _keys
   999  00FAE6  24F3               	addwf	prodl,w,c
  1000  00FAE8  6EF6               	movwf	tblptrl,c
  1001  00FAEA  0EFE               	movlw	high _keys
  1002  00FAEC  20F4               	addwfc	prodh,w,c
  1003  00FAEE  6EF7               	movwf	tblptrh,c
  1004  00FAF0                     	if	0	;There are less than 3 active tblptr bytes
  1005  00FAF0                     	endif
  1006  00FAF0  0008               	tblrd		*
  1007  00FAF2  CFF5 F002          	movff	tablat,switchMenu@key
  1008  00FAF6  0E34               	movlw	52
  1009  00FAF8  EC43  F07A         	call	_switchMenu
  1010  00FAFC                     l1717:
  1011  00FAFC  0E02               	movlw	2
  1012  00FAFE  1843               	xorwf	_screenMode,w,c
  1013  00FB00  1044               	iorwf	_screenMode+1,w,c
  1014  00FB02  A4D8               	btfss	status,2,c
  1015  00FB04  D047               	goto	l1757
  1016  00FB06  D7BE               	goto	l1703
  1017  00FB08                     l1719:
  1018                           
  1019                           ;pseudo main program.c: 56: lcdInst(0b10000000);;
  1020  00FB08  0E80               	movlw	128
  1021  00FB0A  ECC1  F079         	call	_lcdInst
  1022                           
  1023                           ;pseudo main program.c: 57: printf("RUNNING...      ");
  1024  00FB0E  0E54               	movlw	low STR_3
  1025  00FB10  6E0D               	movwf	printf@f,c
  1026  00FB12  0EFF               	movlw	high STR_3
  1027  00FB14  6E0E               	movwf	printf@f+1,c
  1028  00FB16  ECA2  F07B         	call	_printf	;wreg free
  1029                           
  1030                           ;pseudo main program.c: 58: lcdInst(0b11000000);;
  1031  00FB1A  0EC0               	movlw	192
  1032  00FB1C  ECC1  F079         	call	_lcdInst
  1033                           
  1034                           ;pseudo main program.c: 59: printf("                ");
  1035  00FB20  0E43               	movlw	low STR_4
  1036  00FB22  6E0D               	movwf	printf@f,c
  1037  00FB24  0EFF               	movlw	high STR_4
  1038  00FB26  6E0E               	movwf	printf@f+1,c
  1039  00FB28  ECA2  F07B         	call	_printf	;wreg free
  1040                           
  1041                           ;pseudo main program.c: 63: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(1000000
      +                          0/4000.0)));};
  1042  00FB2C  0E00               	movlw	0
  1043  00FB2E  6E39               	movwf	main@i,c
  1044  00FB30                     l1727:
  1045  00FB30  0E63               	movlw	99
  1046  00FB32  6439               	cpfsgt	main@i,c
  1047  00FB34  D001               	goto	l1731
  1048  00FB36  D00A               	goto	l1735
  1049  00FB38                     l1731:
  1050  00FB38  0E21               	movlw	33
  1051  00FB3A  6E24               	movwf	??_main& (0+255),c
  1052  00FB3C  0E76               	movlw	118
  1053  00FB3E                     u1547:
  1054  00FB3E  2EE8               	decfsz	wreg,f,c
  1055  00FB40  D7FE               	bra	u1547
  1056  00FB42  2E24               	decfsz	??_main& (0+255),f,c
  1057  00FB44  D7FC               	bra	u1547
  1058  00FB46  D000               	nop2	
  1059  00FB48  2A39               	incf	main@i,f,c
  1060  00FB4A  D7F2               	goto	l1727
  1061  00FB4C                     l1735:
  1062                           
  1063                           ;pseudo main program.c: 64: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(1000000
      +                          0/4000.0)));};
  1064  00FB4C  0E00               	movlw	0
  1065  00FB4E  6E3A               	movwf	main@i_224,c
  1066  00FB50                     l1737:
  1067  00FB50  0E63               	movlw	99
  1068  00FB52  643A               	cpfsgt	main@i_224,c
  1069  00FB54  D001               	goto	l1741
  1070  00FB56  D00A               	goto	l1745
  1071  00FB58                     l1741:
  1072  00FB58  0E21               	movlw	33
  1073  00FB5A  6E24               	movwf	??_main& (0+255),c
  1074  00FB5C  0E76               	movlw	118
  1075  00FB5E                     u1557:
  1076  00FB5E  2EE8               	decfsz	wreg,f,c
  1077  00FB60  D7FE               	bra	u1557
  1078  00FB62  2E24               	decfsz	??_main& (0+255),f,c
  1079  00FB64  D7FC               	bra	u1557
  1080  00FB66  D000               	nop2	
  1081  00FB68  2A3A               	incf	main@i_224,f,c
  1082  00FB6A  D7F2               	goto	l1737
  1083  00FB6C                     l1745:
  1084                           
  1085                           ;pseudo main program.c: 65: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(1000000
      +                          0/4000.0)));};
  1086  00FB6C  0E00               	movlw	0
  1087  00FB6E  6E3B               	movwf	main@i_225,c
  1088  00FB70                     l1747:
  1089  00FB70  0E63               	movlw	99
  1090  00FB72  643B               	cpfsgt	main@i_225,c
  1091  00FB74  D001               	goto	l1751
  1092  00FB76  D00A               	goto	l1755
  1093  00FB78                     l1751:
  1094  00FB78  0E21               	movlw	33
  1095  00FB7A  6E24               	movwf	??_main& (0+255),c
  1096  00FB7C  0E76               	movlw	118
  1097  00FB7E                     u1567:
  1098  00FB7E  2EE8               	decfsz	wreg,f,c
  1099  00FB80  D7FE               	bra	u1567
  1100  00FB82  2E24               	decfsz	??_main& (0+255),f,c
  1101  00FB84  D7FC               	bra	u1567
  1102  00FB86  D000               	nop2	
  1103  00FB88  2A3B               	incf	main@i_225,f,c
  1104  00FB8A  D7F2               	goto	l1747
  1105  00FB8C                     l1755:
  1106                           
  1107                           ;pseudo main program.c: 66: screenMode = 0;
  1108  00FB8C  0E00               	movlw	0
  1109  00FB8E  6E44               	movwf	_screenMode+1,c
  1110  00FB90  0E00               	movlw	0
  1111  00FB92  6E43               	movwf	_screenMode,c
  1112  00FB94                     l1757:
  1113  00FB94  0443               	decf	_screenMode,w,c
  1114  00FB96  1044               	iorwf	_screenMode+1,w,c
  1115  00FB98  A4D8               	btfss	status,2,c
  1116  00FB9A  D02C               	goto	l1771
  1117  00FB9C  D7B5               	goto	l1719
  1118  00FB9E                     l1759:
  1119                           
  1120                           ;pseudo main program.c: 70: lcdInst(0b10000000);;
  1121  00FB9E  0E80               	movlw	128
  1122  00FBA0  ECC1  F079         	call	_lcdInst
  1123                           
  1124                           ;pseudo main program.c: 71: printf("DONE! PRESS *   ");
  1125  00FBA4  0EA9               	movlw	low STR_5
  1126  00FBA6  6E0D               	movwf	printf@f,c
  1127  00FBA8  0EFF               	movlw	high STR_5
  1128  00FBAA  6E0E               	movwf	printf@f+1,c
  1129  00FBAC  ECA2  F07B         	call	_printf	;wreg free
  1130                           
  1131                           ;pseudo main program.c: 72: lcdInst(0b11000000);;
  1132  00FBB0  0EC0               	movlw	192
  1133  00FBB2  ECC1  F079         	call	_lcdInst
  1134                           
  1135                           ;pseudo main program.c: 73: printf("TO CONTINUE     ");
  1136  00FBB6  0E76               	movlw	low STR_6
  1137  00FBB8  6E0D               	movwf	printf@f,c
  1138  00FBBA  0EFF               	movlw	high STR_6
  1139  00FBBC  6E0E               	movwf	printf@f+1,c
  1140  00FBBE  ECA2  F07B         	call	_printf	;wreg free
  1141  00FBC2                     l74:
  1142  00FBC2  A281               	btfss	3969,1,c	;volatile
  1143  00FBC4  D7FE               	goto	l74
  1144                           
  1145                           ;pseudo main program.c: 78: }
  1146                           ;pseudo main program.c: 79: unsigned char keypress = (PORTB & 0xF0)>>4;
  1147  00FBC6  3881               	swapf	3969,w,c	;volatile
  1148  00FBC8  0B0F               	andlw	15
  1149  00FBCA  0B0F               	andlw	15
  1150  00FBCC  6E31               	movwf	main@keypress_228,c
  1151  00FBCE                     l77:
  1152  00FBCE  B281               	btfsc	3969,1,c	;volatile
  1153  00FBD0  D7FE               	goto	l77
  1154                           
  1155                           ;pseudo main program.c: 82: }
  1156                           ;pseudo main program.c: 83: if (keys[keypress] == '*')
  1157  00FBD2  5031               	movf	main@keypress_228,w,c
  1158  00FBD4  0D01               	mullw	1
  1159  00FBD6  0E8B               	movlw	low _keys
  1160  00FBD8  24F3               	addwf	prodl,w,c
  1161  00FBDA  6EF6               	movwf	tblptrl,c
  1162  00FBDC  0EFE               	movlw	high _keys
  1163  00FBDE  20F4               	addwfc	prodh,w,c
  1164  00FBE0  6EF7               	movwf	tblptrh,c
  1165  00FBE2                     	if	0	;There are less than 3 active tblptr bytes
  1166  00FBE2                     	endif
  1167  00FBE2  0008               	tblrd		*
  1168  00FBE4  50F5               	movf	tablat,w,c
  1169  00FBE6  0A2A               	xorlw	42
  1170  00FBE8  A4D8               	btfss	status,2,c
  1171  00FBEA  D004               	goto	l1771
  1172                           
  1173                           ;pseudo main program.c: 84: screenMode = 2;
  1174  00FBEC  0E00               	movlw	0
  1175  00FBEE  6E44               	movwf	_screenMode+1,c
  1176  00FBF0  0E02               	movlw	2
  1177  00FBF2  6E43               	movwf	_screenMode,c
  1178  00FBF4                     l1771:
  1179  00FBF4  5043               	movf	_screenMode,w,c
  1180  00FBF6  1044               	iorwf	_screenMode+1,w,c
  1181  00FBF8  A4D8               	btfss	status,2,c
  1182  00FBFA  D03B               	goto	l1787
  1183  00FBFC  D7D0               	goto	l1759
  1184  00FBFE                     l1773:
  1185                           
  1186                           ;pseudo main program.c: 87: unsigned int min, sec;
  1187                           ;pseudo main program.c: 90: min = 1;
  1188  00FBFE  0E00               	movlw	0
  1189  00FC00  6E26               	movwf	main@min+1,c
  1190  00FC02  0E01               	movlw	1
  1191  00FC04  6E25               	movwf	main@min,c
  1192                           
  1193                           ;pseudo main program.c: 91: sec = 1;
  1194  00FC06  0E00               	movlw	0
  1195  00FC08  6E28               	movwf	main@sec+1,c
  1196  00FC0A  0E01               	movlw	1
  1197  00FC0C  6E27               	movwf	main@sec,c
  1198                           
  1199                           ;pseudo main program.c: 93: lcdInst(0b10000000);;
  1200  00FC0E  0E80               	movlw	128
  1201  00FC10  ECC1  F079         	call	_lcdInst
  1202                           
  1203                           ;pseudo main program.c: 94: printf("TOTAL RUN TIME: ");
  1204  00FC14  0EBA               	movlw	low STR_7
  1205  00FC16  6E0D               	movwf	printf@f,c
  1206  00FC18  0EFF               	movlw	high STR_7
  1207  00FC1A  6E0E               	movwf	printf@f+1,c
  1208  00FC1C  ECA2  F07B         	call	_printf	;wreg free
  1209                           
  1210                           ;pseudo main program.c: 95: lcdInst(0b11000000);;
  1211  00FC20  0EC0               	movlw	192
  1212  00FC22  ECC1  F079         	call	_lcdInst
  1213                           
  1214                           ;pseudo main program.c: 96: printf("%02x:%02x               ", min, sec);
  1215  00FC26  0EAE               	movlw	low STR_8
  1216  00FC28  6E0D               	movwf	printf@f,c
  1217  00FC2A  0EFE               	movlw	high STR_8
  1218  00FC2C  6E0E               	movwf	printf@f+1,c
  1219  00FC2E  C025  F00F         	movff	main@min,?_printf+2
  1220  00FC32  C026  F010         	movff	main@min+1,?_printf+3
  1221  00FC36  C027  F011         	movff	main@sec,?_printf+4
  1222  00FC3A  C028  F012         	movff	main@sec+1,?_printf+5
  1223  00FC3E  ECA2  F07B         	call	_printf	;wreg free
  1224  00FC42                     l84:
  1225  00FC42  A281               	btfss	3969,1,c	;volatile
  1226  00FC44  D7FE               	goto	l84
  1227                           
  1228                           ;pseudo main program.c: 101: }
  1229                           ;pseudo main program.c: 102: unsigned char keypress = (PORTB & 0xF0)>>4;
  1230  00FC46  3881               	swapf	3969,w,c	;volatile
  1231  00FC48  0B0F               	andlw	15
  1232  00FC4A  0B0F               	andlw	15
  1233  00FC4C  6E32               	movwf	main@keypress_233,c
  1234  00FC4E                     l87:
  1235  00FC4E  B281               	btfsc	3969,1,c	;volatile
  1236  00FC50  D7FE               	goto	l87
  1237                           
  1238                           ;pseudo main program.c: 105: }
  1239                           ;pseudo main program.c: 106: switchMenu('4', '6', keys[keypress]);
  1240  00FC52  0E36               	movlw	54
  1241  00FC54  6E01               	movwf	switchMenu@right,c
  1242  00FC56  5032               	movf	main@keypress_233,w,c
  1243  00FC58  0D01               	mullw	1
  1244  00FC5A  0E8B               	movlw	low _keys
  1245  00FC5C  24F3               	addwf	prodl,w,c
  1246  00FC5E  6EF6               	movwf	tblptrl,c
  1247  00FC60  0EFE               	movlw	high _keys
  1248  00FC62  20F4               	addwfc	prodh,w,c
  1249  00FC64  6EF7               	movwf	tblptrh,c
  1250  00FC66                     	if	0	;There are less than 3 active tblptr bytes
  1251  00FC66                     	endif
  1252  00FC66  0008               	tblrd		*
  1253  00FC68  CFF5 F002          	movff	tablat,switchMenu@key
  1254  00FC6C  0E34               	movlw	52
  1255  00FC6E  EC43  F07A         	call	_switchMenu
  1256  00FC72                     l1787:
  1257  00FC72  0E03               	movlw	3
  1258  00FC74  1843               	xorwf	_screenMode,w,c
  1259  00FC76  1044               	iorwf	_screenMode+1,w,c
  1260  00FC78  A4D8               	btfss	status,2,c
  1261  00FC7A  D033               	goto	l1803
  1262  00FC7C  D7C0               	goto	l1773
  1263  00FC7E                     l1789:
  1264                           
  1265                           ;pseudo main program.c: 109: unsigned int numBats;
  1266                           ;pseudo main program.c: 112: numBats = 6;
  1267  00FC7E  0E00               	movlw	0
  1268  00FC80  6E2A               	movwf	main@numBats+1,c
  1269  00FC82  0E06               	movlw	6
  1270  00FC84  6E29               	movwf	main@numBats,c
  1271                           
  1272                           ;pseudo main program.c: 114: lcdInst(0b10000000);;
  1273  00FC86  0E80               	movlw	128
  1274  00FC88  ECC1  F079         	call	_lcdInst
  1275                           
  1276                           ;pseudo main program.c: 115: printf("TOTAL NUMBER OF ");
  1277  00FC8C  0ECB               	movlw	low STR_9
  1278  00FC8E  6E0D               	movwf	printf@f,c
  1279  00FC90  0EFF               	movlw	high STR_9
  1280  00FC92  6E0E               	movwf	printf@f+1,c
  1281  00FC94  ECA2  F07B         	call	_printf	;wreg free
  1282                           
  1283                           ;pseudo main program.c: 116: lcdInst(0b11000000);;
  1284  00FC98  0EC0               	movlw	192
  1285  00FC9A  ECC1  F079         	call	_lcdInst
  1286                           
  1287                           ;pseudo main program.c: 117: printf("BATTERIES: %02x   ", numBats);
  1288  00FC9E  0E1F               	movlw	low STR_10
  1289  00FCA0  6E0D               	movwf	printf@f,c
  1290  00FCA2  0EFF               	movlw	high STR_10
  1291  00FCA4  6E0E               	movwf	printf@f+1,c
  1292  00FCA6  C029  F00F         	movff	main@numBats,?_printf+2
  1293  00FCAA  C02A  F010         	movff	main@numBats+1,?_printf+3
  1294  00FCAE  ECA2  F07B         	call	_printf	;wreg free
  1295  00FCB2                     l93:
  1296  00FCB2  A281               	btfss	3969,1,c	;volatile
  1297  00FCB4  D7FE               	goto	l93
  1298                           
  1299                           ;pseudo main program.c: 122: }
  1300                           ;pseudo main program.c: 123: unsigned char keypress = (PORTB & 0xF0)>>4;
  1301  00FCB6  3881               	swapf	3969,w,c	;volatile
  1302  00FCB8  0B0F               	andlw	15
  1303  00FCBA  0B0F               	andlw	15
  1304  00FCBC  6E33               	movwf	main@keypress_237,c
  1305  00FCBE                     l96:
  1306  00FCBE  B281               	btfsc	3969,1,c	;volatile
  1307  00FCC0  D7FE               	goto	l96
  1308                           
  1309                           ;pseudo main program.c: 126: }
  1310                           ;pseudo main program.c: 127: switchMenu('4', '6', keys[keypress]);
  1311  00FCC2  0E36               	movlw	54
  1312  00FCC4  6E01               	movwf	switchMenu@right,c
  1313  00FCC6  5033               	movf	main@keypress_237,w,c
  1314  00FCC8  0D01               	mullw	1
  1315  00FCCA  0E8B               	movlw	low _keys
  1316  00FCCC  24F3               	addwf	prodl,w,c
  1317  00FCCE  6EF6               	movwf	tblptrl,c
  1318  00FCD0  0EFE               	movlw	high _keys
  1319  00FCD2  20F4               	addwfc	prodh,w,c
  1320  00FCD4  6EF7               	movwf	tblptrh,c
  1321  00FCD6                     	if	0	;There are less than 3 active tblptr bytes
  1322  00FCD6                     	endif
  1323  00FCD6  0008               	tblrd		*
  1324  00FCD8  CFF5 F002          	movff	tablat,switchMenu@key
  1325  00FCDC  0E34               	movlw	52
  1326  00FCDE  EC43  F07A         	call	_switchMenu
  1327  00FCE2                     l1803:
  1328  00FCE2  0E04               	movlw	4
  1329  00FCE4  1843               	xorwf	_screenMode,w,c
  1330  00FCE6  1044               	iorwf	_screenMode+1,w,c
  1331  00FCE8  A4D8               	btfss	status,2,c
  1332  00FCEA  D033               	goto	l1819
  1333  00FCEC  D7C8               	goto	l1789
  1334  00FCEE                     l1805:
  1335                           
  1336                           ;pseudo main program.c: 130: unsigned int numC;
  1337                           ;pseudo main program.c: 133: numC = 3;
  1338  00FCEE  0E00               	movlw	0
  1339  00FCF0  6E2C               	movwf	main@numC+1,c
  1340  00FCF2  0E03               	movlw	3
  1341  00FCF4  6E2B               	movwf	main@numC,c
  1342                           
  1343                           ;pseudo main program.c: 135: lcdInst(0b10000000);;
  1344  00FCF6  0E80               	movlw	128
  1345  00FCF8  ECC1  F079         	call	_lcdInst
  1346                           
  1347                           ;pseudo main program.c: 136: printf("NUMBER OF C     ");
  1348  00FCFC  0E65               	movlw	low STR_11
  1349  00FCFE  6E0D               	movwf	printf@f,c
  1350  00FD00  0EFF               	movlw	high STR_11
  1351  00FD02  6E0E               	movwf	printf@f+1,c
  1352  00FD04  ECA2  F07B         	call	_printf	;wreg free
  1353                           
  1354                           ;pseudo main program.c: 137: lcdInst(0b11000000);;
  1355  00FD08  0EC0               	movlw	192
  1356  00FD0A  ECC1  F079         	call	_lcdInst
  1357                           
  1358                           ;pseudo main program.c: 138: printf("BATTERIES: %02x   ", numC);
  1359  00FD0E  0E1F               	movlw	low STR_10
  1360  00FD10  6E0D               	movwf	printf@f,c
  1361  00FD12  0EFF               	movlw	high STR_10
  1362  00FD14  6E0E               	movwf	printf@f+1,c
  1363  00FD16  C02B  F00F         	movff	main@numC,?_printf+2
  1364  00FD1A  C02C  F010         	movff	main@numC+1,?_printf+3
  1365  00FD1E  ECA2  F07B         	call	_printf	;wreg free
  1366  00FD22                     l102:
  1367  00FD22  A281               	btfss	3969,1,c	;volatile
  1368  00FD24  D7FE               	goto	l102
  1369                           
  1370                           ;pseudo main program.c: 143: }
  1371                           ;pseudo main program.c: 144: unsigned char keypress = (PORTB & 0xF0)>>4;
  1372  00FD26  3881               	swapf	3969,w,c	;volatile
  1373  00FD28  0B0F               	andlw	15
  1374  00FD2A  0B0F               	andlw	15
  1375  00FD2C  6E34               	movwf	main@keypress_241,c
  1376  00FD2E                     l105:
  1377  00FD2E  B281               	btfsc	3969,1,c	;volatile
  1378  00FD30  D7FE               	goto	l105
  1379                           
  1380                           ;pseudo main program.c: 147: }
  1381                           ;pseudo main program.c: 148: switchMenu('4', '6', keys[keypress]);
  1382  00FD32  0E36               	movlw	54
  1383  00FD34  6E01               	movwf	switchMenu@right,c
  1384  00FD36  5034               	movf	main@keypress_241,w,c
  1385  00FD38  0D01               	mullw	1
  1386  00FD3A  0E8B               	movlw	low _keys
  1387  00FD3C  24F3               	addwf	prodl,w,c
  1388  00FD3E  6EF6               	movwf	tblptrl,c
  1389  00FD40  0EFE               	movlw	high _keys
  1390  00FD42  20F4               	addwfc	prodh,w,c
  1391  00FD44  6EF7               	movwf	tblptrh,c
  1392  00FD46                     	if	0	;There are less than 3 active tblptr bytes
  1393  00FD46                     	endif
  1394  00FD46  0008               	tblrd		*
  1395  00FD48  CFF5 F002          	movff	tablat,switchMenu@key
  1396  00FD4C  0E34               	movlw	52
  1397  00FD4E  EC43  F07A         	call	_switchMenu
  1398  00FD52                     l1819:
  1399  00FD52  0E05               	movlw	5
  1400  00FD54  1843               	xorwf	_screenMode,w,c
  1401  00FD56  1044               	iorwf	_screenMode+1,w,c
  1402  00FD58  A4D8               	btfss	status,2,c
  1403  00FD5A  D033               	goto	l1835
  1404  00FD5C  D7C8               	goto	l1805
  1405  00FD5E                     l1821:
  1406                           
  1407                           ;pseudo main program.c: 151: unsigned int num9V;
  1408                           ;pseudo main program.c: 154: num9V = 10;
  1409  00FD5E  0E00               	movlw	0
  1410  00FD60  6E2E               	movwf	main@num9V+1,c
  1411  00FD62  0E0A               	movlw	10
  1412  00FD64  6E2D               	movwf	main@num9V,c
  1413                           
  1414                           ;pseudo main program.c: 156: lcdInst(0b10000000);;
  1415  00FD66  0E80               	movlw	128
  1416  00FD68  ECC1  F079         	call	_lcdInst
  1417                           
  1418                           ;pseudo main program.c: 157: printf("NUMBER OF 9V    ");
  1419  00FD6C  0E98               	movlw	low STR_13
  1420  00FD6E  6E0D               	movwf	printf@f,c
  1421  00FD70  0EFF               	movlw	high STR_13
  1422  00FD72  6E0E               	movwf	printf@f+1,c
  1423  00FD74  ECA2  F07B         	call	_printf	;wreg free
  1424                           
  1425                           ;pseudo main program.c: 158: lcdInst(0b11000000);;
  1426  00FD78  0EC0               	movlw	192
  1427  00FD7A  ECC1  F079         	call	_lcdInst
  1428                           
  1429                           ;pseudo main program.c: 159: printf("BATTERIES: %02d     ", num9V);
  1430  00FD7E  0EF5               	movlw	low STR_14
  1431  00FD80  6E0D               	movwf	printf@f,c
  1432  00FD82  0EFE               	movlw	high STR_14
  1433  00FD84  6E0E               	movwf	printf@f+1,c
  1434  00FD86  C02D  F00F         	movff	main@num9V,?_printf+2
  1435  00FD8A  C02E  F010         	movff	main@num9V+1,?_printf+3
  1436  00FD8E  ECA2  F07B         	call	_printf	;wreg free
  1437  00FD92                     l111:
  1438  00FD92  A281               	btfss	3969,1,c	;volatile
  1439  00FD94  D7FE               	goto	l111
  1440                           
  1441                           ;pseudo main program.c: 163: }
  1442                           ;pseudo main program.c: 164: unsigned char keypress = (PORTB & 0xF0)>>4;
  1443  00FD96  3881               	swapf	3969,w,c	;volatile
  1444  00FD98  0B0F               	andlw	15
  1445  00FD9A  0B0F               	andlw	15
  1446  00FD9C  6E35               	movwf	main@keypress_245,c
  1447  00FD9E                     l114:
  1448  00FD9E  B281               	btfsc	3969,1,c	;volatile
  1449  00FDA0  D7FE               	goto	l114
  1450                           
  1451                           ;pseudo main program.c: 167: }
  1452                           ;pseudo main program.c: 168: switchMenu('4', '6', keys[keypress]);
  1453  00FDA2  0E36               	movlw	54
  1454  00FDA4  6E01               	movwf	switchMenu@right,c
  1455  00FDA6  5035               	movf	main@keypress_245,w,c
  1456  00FDA8  0D01               	mullw	1
  1457  00FDAA  0E8B               	movlw	low _keys
  1458  00FDAC  24F3               	addwf	prodl,w,c
  1459  00FDAE  6EF6               	movwf	tblptrl,c
  1460  00FDB0  0EFE               	movlw	high _keys
  1461  00FDB2  20F4               	addwfc	prodh,w,c
  1462  00FDB4  6EF7               	movwf	tblptrh,c
  1463  00FDB6                     	if	0	;There are less than 3 active tblptr bytes
  1464  00FDB6                     	endif
  1465  00FDB6  0008               	tblrd		*
  1466  00FDB8  CFF5 F002          	movff	tablat,switchMenu@key
  1467  00FDBC  0E34               	movlw	52
  1468  00FDBE  EC43  F07A         	call	_switchMenu
  1469  00FDC2                     l1835:
  1470  00FDC2  0E06               	movlw	6
  1471  00FDC4  1843               	xorwf	_screenMode,w,c
  1472  00FDC6  1044               	iorwf	_screenMode+1,w,c
  1473  00FDC8  A4D8               	btfss	status,2,c
  1474  00FDCA  D033               	goto	l1851
  1475  00FDCC  D7C8               	goto	l1821
  1476  00FDCE                     l1837:
  1477                           
  1478                           ;pseudo main program.c: 171: unsigned int numAA;
  1479                           ;pseudo main program.c: 174: numAA = 2;
  1480  00FDCE  0E00               	movlw	0
  1481  00FDD0  6E30               	movwf	main@numAA+1,c
  1482  00FDD2  0E02               	movlw	2
  1483  00FDD4  6E2F               	movwf	main@numAA,c
  1484                           
  1485                           ;pseudo main program.c: 176: lcdInst(0b10000000);;
  1486  00FDD6  0E80               	movlw	128
  1487  00FDD8  ECC1  F079         	call	_lcdInst
  1488                           
  1489                           ;pseudo main program.c: 177: printf("NUMBER OF AA    ");
  1490  00FDDC  0E87               	movlw	low STR_15
  1491  00FDDE  6E0D               	movwf	printf@f,c
  1492  00FDE0  0EFF               	movlw	high STR_15
  1493  00FDE2  6E0E               	movwf	printf@f+1,c
  1494  00FDE4  ECA2  F07B         	call	_printf	;wreg free
  1495                           
  1496                           ;pseudo main program.c: 178: lcdInst(0b11000000);;
  1497  00FDE8  0EC0               	movlw	192
  1498  00FDEA  ECC1  F079         	call	_lcdInst
  1499                           
  1500                           ;pseudo main program.c: 179: printf("BATTERIES: %02x     ", numAA);
  1501  00FDEE  0E0A               	movlw	low STR_16
  1502  00FDF0  6E0D               	movwf	printf@f,c
  1503  00FDF2  0EFF               	movlw	high STR_16
  1504  00FDF4  6E0E               	movwf	printf@f+1,c
  1505  00FDF6  C02F  F00F         	movff	main@numAA,?_printf+2
  1506  00FDFA  C030  F010         	movff	main@numAA+1,?_printf+3
  1507  00FDFE  ECA2  F07B         	call	_printf	;wreg free
  1508  00FE02                     l120:
  1509  00FE02  A281               	btfss	3969,1,c	;volatile
  1510  00FE04  D7FE               	goto	l120
  1511                           
  1512                           ;pseudo main program.c: 184: }
  1513                           ;pseudo main program.c: 185: unsigned char keypress = (PORTB & 0xF0)>>4;
  1514  00FE06  3881               	swapf	3969,w,c	;volatile
  1515  00FE08  0B0F               	andlw	15
  1516  00FE0A  0B0F               	andlw	15
  1517  00FE0C  6E36               	movwf	main@keypress_249,c
  1518  00FE0E                     l123:
  1519  00FE0E  B281               	btfsc	3969,1,c	;volatile
  1520  00FE10  D7FE               	goto	l123
  1521                           
  1522                           ;pseudo main program.c: 188: }
  1523                           ;pseudo main program.c: 189: switchMenu('4', '6', keys[keypress]);
  1524  00FE12  0E36               	movlw	54
  1525  00FE14  6E01               	movwf	switchMenu@right,c
  1526  00FE16  5036               	movf	main@keypress_249,w,c
  1527  00FE18  0D01               	mullw	1
  1528  00FE1A  0E8B               	movlw	low _keys
  1529  00FE1C  24F3               	addwf	prodl,w,c
  1530  00FE1E  6EF6               	movwf	tblptrl,c
  1531  00FE20  0EFE               	movlw	high _keys
  1532  00FE22  20F4               	addwfc	prodh,w,c
  1533  00FE24  6EF7               	movwf	tblptrh,c
  1534  00FE26                     	if	0	;There are less than 3 active tblptr bytes
  1535  00FE26                     	endif
  1536  00FE26  0008               	tblrd		*
  1537  00FE28  CFF5 F002          	movff	tablat,switchMenu@key
  1538  00FE2C  0E34               	movlw	52
  1539  00FE2E  EC43  F07A         	call	_switchMenu
  1540  00FE32                     l1851:
  1541  00FE32  0E07               	movlw	7
  1542  00FE34  1843               	xorwf	_screenMode,w,c
  1543  00FE36  1044               	iorwf	_screenMode+1,w,c
  1544  00FE38  A4D8               	btfss	status,2,c
  1545  00FE3A  D021               	goto	l1867
  1546  00FE3C  D7C8               	goto	l1837
  1547  00FE3E                     l1853:
  1548                           
  1549                           ;pseudo main program.c: 193: printRTC();
  1550  00FE3E  EC4B  F07B         	call	_printRTC	;wreg free
  1551                           
  1552                           ;pseudo main program.c: 194: while (PORTBbits.RB1 == 0){
  1553  00FE42  D002               	goto	l1857
  1554  00FE44                     l1855:
  1555                           
  1556                           ;pseudo main program.c: 195: printRTC();
  1557  00FE44  EC4B  F07B         	call	_printRTC	;wreg free
  1558  00FE48                     l1857:
  1559  00FE48  A281               	btfss	3969,1,c	;volatile
  1560  00FE4A  D7FC               	goto	l1855
  1561                           
  1562                           ;pseudo main program.c: 196: }
  1563                           ;pseudo main program.c: 197: unsigned char keypress = (PORTB & 0xF0)>>4;
  1564  00FE4C  3881               	swapf	3969,w,c	;volatile
  1565  00FE4E  0B0F               	andlw	15
  1566  00FE50  0B0F               	andlw	15
  1567  00FE52  6E37               	movwf	main@keypress_250,c
  1568                           
  1569                           ;pseudo main program.c: 198: while (PORTBbits.RB1 == 1){
  1570  00FE54  D002               	goto	l1863
  1571  00FE56                     l1861:
  1572                           
  1573                           ;pseudo main program.c: 199: printRTC();
  1574  00FE56  EC4B  F07B         	call	_printRTC	;wreg free
  1575  00FE5A                     l1863:
  1576  00FE5A  B281               	btfsc	3969,1,c	;volatile
  1577  00FE5C  D7FC               	goto	l1861
  1578                           
  1579                           ;pseudo main program.c: 200: }
  1580                           ;pseudo main program.c: 201: switchMenu('4', '6', keys[keypress]);
  1581  00FE5E  0E36               	movlw	54
  1582  00FE60  6E01               	movwf	switchMenu@right,c
  1583  00FE62  5037               	movf	main@keypress_250,w,c
  1584  00FE64  0D01               	mullw	1
  1585  00FE66  0E8B               	movlw	low _keys
  1586  00FE68  24F3               	addwf	prodl,w,c
  1587  00FE6A  6EF6               	movwf	tblptrl,c
  1588  00FE6C  0EFE               	movlw	high _keys
  1589  00FE6E  20F4               	addwfc	prodh,w,c
  1590  00FE70  6EF7               	movwf	tblptrh,c
  1591  00FE72                     	if	0	;There are less than 3 active tblptr bytes
  1592  00FE72                     	endif
  1593  00FE72  0008               	tblrd		*
  1594  00FE74  CFF5 F002          	movff	tablat,switchMenu@key
  1595  00FE78  0E34               	movlw	52
  1596  00FE7A  EC43  F07A         	call	_switchMenu
  1597  00FE7E                     l1867:
  1598  00FE7E  0E08               	movlw	8
  1599  00FE80  1843               	xorwf	_screenMode,w,c
  1600  00FE82  1044               	iorwf	_screenMode+1,w,c
  1601  00FE84  A4D8               	btfss	status,2,c
  1602  00FE86  D63A               	goto	l1717
  1603  00FE88  D7DA               	goto	l1853
  1604  00FE8A                     __end_of_main:
  1605                           	opt stack 0
  1606                           tblptru	equ	0xFF8
  1607                           tblptrh	equ	0xFF7
  1608                           tblptrl	equ	0xFF6
  1609                           tablat	equ	0xFF5
  1610                           prodh	equ	0xFF4
  1611                           prodl	equ	0xFF3
  1612                           intcon	equ	0xFF2
  1613                           postinc0	equ	0xFEE
  1614                           wreg	equ	0xFE8
  1615                           status	equ	0xFD8
  1616                           
  1617 ;; *************** function _switchMenu *****************
  1618 ;; Defined at:
  1619 ;;		line 208 in file "../../../../AER201 pseudo code/pseudo main program.c"
  1620 ;; Parameters:    Size  Location     Type
  1621 ;;  left            1    wreg     unsigned char 
  1622 ;;  right           1    0[COMRAM] unsigned char 
  1623 ;;  key             1    1[COMRAM] unsigned char 
  1624 ;; Auto vars:     Size  Location     Type
  1625 ;;  left            1    2[COMRAM] unsigned char 
  1626 ;; Return value:  Size  Location     Type
  1627 ;;                  1    wreg      void 
  1628 ;; Registers used:
  1629 ;;		wreg, status,2, status,0
  1630 ;; Tracked objects:
  1631 ;;		On entry : 0/0
  1632 ;;		On exit  : 0/0
  1633 ;;		Unchanged: 0/0
  1634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1635 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1636 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1637 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1638 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1639 ;;Total ram usage:        3 bytes
  1640 ;; Hardware stack levels used:    1
  1641 ;; This function calls:
  1642 ;;		Nothing
  1643 ;; This function is called by:
  1644 ;;		_main
  1645 ;; This function uses a non-reentrant model
  1646 ;;
  1647                           
  1648                           	psect	text1
  1649  00F486                     __ptext1:
  1650                           	opt stack 0
  1651  00F486                     _switchMenu:
  1652                           	opt stack 30
  1653                           
  1654                           ;incstack = 0
  1655                           ;switchMenu@left stored from wreg
  1656  00F486  6E03               	movwf	switchMenu@left,c
  1657                           
  1658                           ;pseudo main program.c: 209: if (key == right){
  1659  00F488  5001               	movf	switchMenu@right,w,c
  1660  00F48A  1802               	xorwf	switchMenu@key,w,c
  1661  00F48C  A4D8               	btfss	status,2,c
  1662  00F48E  D00E               	goto	l1663
  1663                           
  1664                           ;pseudo main program.c: 210: if (screenMode == 2)
  1665  00F490  0E02               	movlw	2
  1666  00F492  1843               	xorwf	_screenMode,w,c
  1667  00F494  1044               	iorwf	_screenMode+1,w,c
  1668  00F496  A4D8               	btfss	status,2,c
  1669  00F498  D005               	goto	l1661
  1670                           
  1671                           ;pseudo main program.c: 211: screenMode = 8;
  1672  00F49A  0E00               	movlw	0
  1673  00F49C  6E44               	movwf	_screenMode+1,c
  1674  00F49E  0E08               	movlw	8
  1675  00F4A0  6E43               	movwf	_screenMode,c
  1676  00F4A2  0012               	return	
  1677  00F4A4                     l1661:
  1678                           
  1679                           ;pseudo main program.c: 212: else
  1680                           ;pseudo main program.c: 213: screenMode -= 1;
  1681  00F4A4  0643               	decf	_screenMode,f,c
  1682  00F4A6  A0D8               	btfss	status,0,c
  1683  00F4A8  0644               	decf	_screenMode+1,f,c
  1684                           
  1685                           ;pseudo main program.c: 214: }
  1686  00F4AA  0012               	return	
  1687  00F4AC                     l1663:
  1688                           
  1689                           ;pseudo main program.c: 215: else if (key == left){
  1690  00F4AC  5003               	movf	switchMenu@left,w,c
  1691  00F4AE  1802               	xorwf	switchMenu@key,w,c
  1692  00F4B0  A4D8               	btfss	status,2,c
  1693  00F4B2  0012               	return	
  1694                           
  1695                           ;pseudo main program.c: 216: if (screenMode == 8)
  1696  00F4B4  0E08               	movlw	8
  1697  00F4B6  1843               	xorwf	_screenMode,w,c
  1698  00F4B8  1044               	iorwf	_screenMode+1,w,c
  1699  00F4BA  A4D8               	btfss	status,2,c
  1700  00F4BC  D005               	goto	l1669
  1701                           
  1702                           ;pseudo main program.c: 217: screenMode = 2;
  1703  00F4BE  0E00               	movlw	0
  1704  00F4C0  6E44               	movwf	_screenMode+1,c
  1705  00F4C2  0E02               	movlw	2
  1706  00F4C4  6E43               	movwf	_screenMode,c
  1707  00F4C6  0012               	return	
  1708  00F4C8                     l1669:
  1709                           
  1710                           ;pseudo main program.c: 218: else
  1711                           ;pseudo main program.c: 219: screenMode += 1;
  1712  00F4C8  4A43               	infsnz	_screenMode,f,c
  1713  00F4CA  2A44               	incf	_screenMode+1,f,c
  1714  00F4CC  0012               	return	
  1715  00F4CE                     __end_of_switchMenu:
  1716                           	opt stack 0
  1717                           tblptru	equ	0xFF8
  1718                           tblptrh	equ	0xFF7
  1719                           tblptrl	equ	0xFF6
  1720                           tablat	equ	0xFF5
  1721                           prodh	equ	0xFF4
  1722                           prodl	equ	0xFF3
  1723                           intcon	equ	0xFF2
  1724                           postinc0	equ	0xFEE
  1725                           wreg	equ	0xFE8
  1726                           status	equ	0xFD8
  1727                           
  1728 ;; *************** function _printRTC *****************
  1729 ;; Defined at:
  1730 ;;		line 223 in file "../../../../AER201 pseudo code/pseudo main program.c"
  1731 ;; Parameters:    Size  Location     Type
  1732 ;;		None
  1733 ;; Auto vars:     Size  Location     Type
  1734 ;;  i               1   34[COMRAM] unsigned char 
  1735 ;; Return value:  Size  Location     Type
  1736 ;;                  1    wreg      void 
  1737 ;; Registers used:
  1738 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1739 ;; Tracked objects:
  1740 ;;		On entry : 0/0
  1741 ;;		On exit  : 0/0
  1742 ;;		Unchanged: 0/0
  1743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1744 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1745 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1746 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1747 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1748 ;;Total ram usage:        1 bytes
  1749 ;; Hardware stack levels used:    1
  1750 ;; Hardware stack levels required when called:    3
  1751 ;; This function calls:
  1752 ;;		_I2C_Master_Read
  1753 ;;		_I2C_Master_Start
  1754 ;;		_I2C_Master_Stop
  1755 ;;		_I2C_Master_Write
  1756 ;;		_lcdInst
  1757 ;;		_printf
  1758 ;; This function is called by:
  1759 ;;		_main
  1760 ;; This function uses a non-reentrant model
  1761 ;;
  1762                           
  1763                           	psect	text2
  1764  00F696                     __ptext2:
  1765                           	opt stack 0
  1766  00F696                     _printRTC:
  1767                           	opt stack 27
  1768                           
  1769                           ;pseudo main program.c: 225: I2C_Master_Start();
  1770                           
  1771                           ;incstack = 0
  1772  00F696  ECB4  F079         	call	_I2C_Master_Start	;wreg free
  1773                           
  1774                           ;pseudo main program.c: 226: I2C_Master_Write(0b11010000);
  1775  00F69A  0E00               	movlw	0
  1776  00F69C  6E03               	movwf	I2C_Master_Write@d+1,c
  1777  00F69E  0ED0               	movlw	208
  1778  00F6A0  6E02               	movwf	I2C_Master_Write@d,c
  1779  00F6A2  ECBC  F079         	call	_I2C_Master_Write	;wreg free
  1780                           
  1781                           ;pseudo main program.c: 227: I2C_Master_Write(0x00);
  1782  00F6A6  0E00               	movlw	0
  1783  00F6A8  6E03               	movwf	I2C_Master_Write@d+1,c
  1784  00F6AA  0E00               	movlw	0
  1785  00F6AC  6E02               	movwf	I2C_Master_Write@d,c
  1786  00F6AE  ECBC  F079         	call	_I2C_Master_Write	;wreg free
  1787                           
  1788                           ;pseudo main program.c: 228: I2C_Master_Stop();
  1789  00F6B2  ECB8  F079         	call	_I2C_Master_Stop	;wreg free
  1790                           
  1791                           ;pseudo main program.c: 230: I2C_Master_Start();
  1792  00F6B6  ECB4  F079         	call	_I2C_Master_Start	;wreg free
  1793                           
  1794                           ;pseudo main program.c: 231: I2C_Master_Write(0b11010001);
  1795  00F6BA  0E00               	movlw	0
  1796  00F6BC  6E03               	movwf	I2C_Master_Write@d+1,c
  1797  00F6BE  0ED1               	movlw	209
  1798  00F6C0  6E02               	movwf	I2C_Master_Write@d,c
  1799  00F6C2  ECBC  F079         	call	_I2C_Master_Write	;wreg free
  1800                           
  1801                           ;pseudo main program.c: 232: for(unsigned char i=0;i<0x06;i++){
  1802  00F6C6  0E00               	movlw	0
  1803  00F6C8  6E23               	movwf	printRTC@i,c
  1804  00F6CA                     l1675:
  1805  00F6CA  0E05               	movlw	5
  1806  00F6CC  6423               	cpfsgt	printRTC@i,c
  1807  00F6CE  D001               	goto	l1679
  1808  00F6D0  D00E               	goto	l1685
  1809  00F6D2                     l1679:
  1810                           
  1811                           ;pseudo main program.c: 233: time[i] = I2C_Master_Read(1);
  1812  00F6D2  5023               	movf	printRTC@i,w,c
  1813  00F6D4  0D01               	mullw	1
  1814  00F6D6  0E3C               	movlw	low _time
  1815  00F6D8  24F3               	addwf	prodl,w,c
  1816  00F6DA  6ED9               	movwf	fsr2l,c
  1817  00F6DC  0E00               	movlw	high _time
  1818  00F6DE  20F4               	addwfc	prodh,w,c
  1819  00F6E0  6EDA               	movwf	fsr2h,c
  1820  00F6E2  0E01               	movlw	1
  1821  00F6E4  ECE5  F079         	call	_I2C_Master_Read
  1822  00F6E8  6EDF               	movwf	indf2,c
  1823  00F6EA  2A23               	incf	printRTC@i,f,c
  1824  00F6EC  D7EE               	goto	l1675
  1825  00F6EE                     l1685:
  1826                           
  1827                           ;pseudo main program.c: 234: }
  1828                           ;pseudo main program.c: 235: time[6] = I2C_Master_Read(0);
  1829  00F6EE  0E00               	movlw	0
  1830  00F6F0  ECE5  F079         	call	_I2C_Master_Read
  1831  00F6F4  6E42               	movwf	_time+6,c
  1832                           
  1833                           ;pseudo main program.c: 236: I2C_Master_Stop();
  1834  00F6F6  ECB8  F079         	call	_I2C_Master_Stop	;wreg free
  1835                           
  1836                           ;pseudo main program.c: 237: lcdInst(0b10000000);;
  1837  00F6FA  0E80               	movlw	128
  1838  00F6FC  ECC1  F079         	call	_lcdInst
  1839                           
  1840                           ;pseudo main program.c: 238: printf("%02x/%02x/%02x        ", time[6],time[5],time[4]);
  1841  00F700  0EC7               	movlw	low STR_17
  1842  00F702  6E0D               	movwf	printf@f,c
  1843  00F704  0EFE               	movlw	high STR_17
  1844  00F706  6E0E               	movwf	printf@f+1,c
  1845  00F708  C042  F00F         	movff	_time+6,?_printf+2
  1846  00F70C  6A10               	clrf	?_printf+3,c
  1847  00F70E  C041  F011         	movff	_time+5,?_printf+4
  1848  00F712  6A12               	clrf	?_printf+5,c
  1849  00F714  C040  F013         	movff	_time+4,?_printf+6
  1850  00F718  6A14               	clrf	?_printf+7,c
  1851  00F71A  ECA2  F07B         	call	_printf	;wreg free
  1852                           
  1853                           ;pseudo main program.c: 239: lcdInst(0b11000000);;
  1854  00F71E  0EC0               	movlw	192
  1855  00F720  ECC1  F079         	call	_lcdInst
  1856                           
  1857                           ;pseudo main program.c: 240: printf("%02x:%02x:%02x        ", time[2],time[1],time[0]);
  1858  00F724  0EDE               	movlw	low STR_18
  1859  00F726  6E0D               	movwf	printf@f,c
  1860  00F728  0EFE               	movlw	high STR_18
  1861  00F72A  6E0E               	movwf	printf@f+1,c
  1862  00F72C  C03E  F00F         	movff	_time+2,?_printf+2
  1863  00F730  6A10               	clrf	?_printf+3,c
  1864  00F732  C03D  F011         	movff	_time+1,?_printf+4
  1865  00F736  6A12               	clrf	?_printf+5,c
  1866  00F738  C03C  F013         	movff	_time,?_printf+6
  1867  00F73C  6A14               	clrf	?_printf+7,c
  1868  00F73E  ECA2  F07B         	call	_printf	;wreg free
  1869  00F742  0012               	return		;funcret
  1870  00F744                     __end_of_printRTC:
  1871                           	opt stack 0
  1872                           tblptru	equ	0xFF8
  1873                           tblptrh	equ	0xFF7
  1874                           tblptrl	equ	0xFF6
  1875                           tablat	equ	0xFF5
  1876                           prodh	equ	0xFF4
  1877                           prodl	equ	0xFF3
  1878                           intcon	equ	0xFF2
  1879                           postinc0	equ	0xFEE
  1880                           wreg	equ	0xFE8
  1881                           indf2	equ	0xFDF
  1882                           fsr2h	equ	0xFDA
  1883                           fsr2l	equ	0xFD9
  1884                           status	equ	0xFD8
  1885                           
  1886 ;; *************** function _printf *****************
  1887 ;; Defined at:
  1888 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  1889 ;; Parameters:    Size  Location     Type
  1890 ;;  f               2   12[COMRAM] PTR const unsigned char 
  1891 ;;		 -> STR_18(23), STR_17(23), STR_16(21), STR_15(17), 
  1892 ;;		 -> STR_14(21), STR_13(17), STR_12(19), STR_11(17), 
  1893 ;;		 -> STR_10(19), STR_9(17), STR_8(25), STR_7(17), 
  1894 ;;		 -> STR_6(17), STR_5(17), STR_4(17), STR_3(17), 
  1895 ;;		 -> STR_2(17), STR_1(17), 
  1896 ;; Auto vars:     Size  Location     Type
  1897 ;;  idx             1   24[COMRAM] unsigned char 
  1898 ;;  tmpval          4    0        struct .
  1899 ;;  cp              3    0        PTR const unsigned char 
  1900 ;;  width           2   31[COMRAM] int 
  1901 ;;  val             2   28[COMRAM] unsigned int 
  1902 ;;  ap              2   25[COMRAM] PTR void [1]
  1903 ;;		 -> ?_printf(2), 
  1904 ;;  len             2    0        unsigned int 
  1905 ;;  c               1   33[COMRAM] char 
  1906 ;;  flag            1   30[COMRAM] unsigned char 
  1907 ;;  prec            1   27[COMRAM] char 
  1908 ;; Return value:  Size  Location     Type
  1909 ;;                  2   12[COMRAM] int 
  1910 ;; Registers used:
  1911 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1912 ;; Tracked objects:
  1913 ;;		On entry : 0/0
  1914 ;;		On exit  : 0/0
  1915 ;;		Unchanged: 0/0
  1916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1917 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1918 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1919 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1920 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1921 ;;Total ram usage:       22 bytes
  1922 ;; Hardware stack levels used:    1
  1923 ;; Hardware stack levels required when called:    2
  1924 ;; This function calls:
  1925 ;;		___lwdiv
  1926 ;;		___lwmod
  1927 ;;		___wmul
  1928 ;;		_isdigit
  1929 ;;		_putch
  1930 ;; This function is called by:
  1931 ;;		_main
  1932 ;;		_printRTC
  1933 ;; This function uses a non-reentrant model
  1934 ;;
  1935                           
  1936                           	psect	text3
  1937  00F744                     __ptext3:
  1938                           	opt stack 0
  1939  00F744                     _printf:
  1940                           	opt stack 28
  1941                           
  1942                           ;doprnt.c: 466: va_list ap;
  1943                           ;doprnt.c: 499: signed char c;
  1944                           ;doprnt.c: 501: int width;
  1945                           ;doprnt.c: 506: signed char prec;
  1946                           ;doprnt.c: 508: unsigned char flag;
  1947                           ;doprnt.c: 523: union {
  1948                           ;doprnt.c: 524: unsigned long vd;
  1949                           ;doprnt.c: 525: double integ;
  1950                           ;doprnt.c: 526: } tmpval;
  1951                           ;doprnt.c: 528: unsigned int val;
  1952                           ;doprnt.c: 529: unsigned len;
  1953                           ;doprnt.c: 530: const char * cp;
  1954                           ;doprnt.c: 533: *ap = __va_start();
  1955                           
  1956                           ;incstack = 0
  1957  00F744  0E0F               	movlw	low (?_printf+2)
  1958  00F746  6E1A               	movwf	printf@ap,c
  1959  00F748  0E00               	movlw	high (?_printf+2)
  1960  00F74A  6E1B               	movwf	printf@ap+1,c
  1961                           
  1962                           ;doprnt.c: 536: while(c = *f++) {
  1963  00F74C  D174               	goto	l1619
  1964  00F74E                     l1493:
  1965                           
  1966                           ;doprnt.c: 538: if(c != '%')
  1967  00F74E  0E25               	movlw	37
  1968  00F750  1822               	xorwf	printf@c,w,c
  1969  00F752  B4D8               	btfsc	status,2,c
  1970  00F754  D004               	goto	l1497
  1971                           
  1972                           ;doprnt.c: 540: {
  1973                           ;doprnt.c: 541: (putch(c) );
  1974  00F756  5022               	movf	printf@c,w,c
  1975  00F758  ECC7  F079         	call	_putch
  1976                           
  1977                           ;doprnt.c: 542: continue;
  1978  00F75C  D16C               	goto	l1619
  1979  00F75E                     l1497:
  1980                           
  1981                           ;doprnt.c: 543: }
  1982                           ;doprnt.c: 546: width = 0;
  1983  00F75E  0E00               	movlw	0
  1984  00F760  6E21               	movwf	printf@width+1,c
  1985  00F762  0E00               	movlw	0
  1986  00F764  6E20               	movwf	printf@width,c
  1987                           
  1988                           ;doprnt.c: 548: flag = 0;
  1989  00F766  0E00               	movlw	0
  1990  00F768  6E1F               	movwf	printf@flag,c
  1991                           
  1992                           ;doprnt.c: 551: switch(*f) {
  1993                           
  1994                           ;doprnt.c: 550: for(;;) {
  1995  00F76A  D003               	goto	l1503
  1996  00F76C                     l1499:
  1997                           
  1998                           ;doprnt.c: 580: flag |= 0x04;
  1999  00F76C  841F               	bsf	printf@flag,2,c
  2000                           
  2001                           ;doprnt.c: 581: f++;
  2002  00F76E  4A0D               	infsnz	printf@f,f,c
  2003  00F770  2A0E               	incf	printf@f+1,f,c
  2004  00F772                     l1503:
  2005  00F772  C00D  FFF6         	movff	printf@f,tblptrl
  2006  00F776  C00E  FFF7         	movff	printf@f+1,tblptrh
  2007  00F77A                     	if	0	;tblptru may be non-zero
  2008  00F77A                     	endif
  2009  00F77A                     	if	0	;tblptru may be non-zero
  2010  00F77A                     	endif
  2011  00F77A  0008               	tblrd		*
  2012  00F77C  50F5               	movf	tablat,w,c
  2013                           
  2014                           ; Switch size 1, requested type "space"
  2015                           ; Number of cases is 1, Range of values is 48 to 48
  2016                           ; switch strategies available:
  2017                           ; Name         Instructions Cycles
  2018                           ; simple_byte            4     3 (average)
  2019                           ;	Chosen strategy is simple_byte
  2020  00F77E  0A30               	xorlw	48	; case 48
  2021  00F780  B4D8               	btfsc	status,2,c
  2022  00F782  D7F4               	goto	l1499
  2023                           
  2024                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2025                           
  2026                           ;doprnt.c: 586: }
  2027                           
  2028                           ;doprnt.c: 585: break;
  2029  00F784  C00D  FFF6         	movff	printf@f,tblptrl
  2030  00F788  C00E  FFF7         	movff	printf@f+1,tblptrh
  2031  00F78C                     	if	0	;tblptru may be non-zero
  2032  00F78C                     	endif
  2033  00F78C                     	if	0	;tblptru may be non-zero
  2034  00F78C                     	endif
  2035  00F78C  0008               	tblrd		*
  2036  00F78E  50F5               	movf	tablat,w,c
  2037  00F790  ECD6  F079         	call	_isdigit
  2038  00F794  A0D8               	btfss	status,0,c
  2039  00F796  D035               	goto	l1521
  2040                           
  2041                           ;doprnt.c: 598: width = 0;
  2042  00F798  0E00               	movlw	0
  2043  00F79A  6E21               	movwf	printf@width+1,c
  2044  00F79C  0E00               	movlw	0
  2045  00F79E  6E20               	movwf	printf@width,c
  2046  00F7A0                     l1509:
  2047                           
  2048                           ;doprnt.c: 600: width *= 10;
  2049  00F7A0  C020  F001         	movff	printf@width,___wmul@multiplier
  2050  00F7A4  C021  F002         	movff	printf@width+1,___wmul@multiplier+1
  2051  00F7A8  0E00               	movlw	0
  2052  00F7AA  6E04               	movwf	___wmul@multiplicand+1,c
  2053  00F7AC  0E0A               	movlw	10
  2054  00F7AE  6E03               	movwf	___wmul@multiplicand,c
  2055  00F7B0  ECF8  F079         	call	___wmul	;wreg free
  2056  00F7B4  C001  F020         	movff	?___wmul,printf@width
  2057  00F7B8  C002  F021         	movff	?___wmul+1,printf@width+1
  2058                           
  2059                           ;doprnt.c: 601: width += *f++ - '0';
  2060  00F7BC  0ED0               	movlw	208
  2061  00F7BE  6E15               	movwf	??_printf& (0+255),c
  2062  00F7C0  0EFF               	movlw	255
  2063  00F7C2  6E16               	movwf	(??_printf+1)& (0+255),c
  2064  00F7C4  C00D  FFF6         	movff	printf@f,tblptrl
  2065  00F7C8  C00E  FFF7         	movff	printf@f+1,tblptrh
  2066  00F7CC                     	if	0	;tblptru may be non-zero
  2067  00F7CC                     	endif
  2068  00F7CC                     	if	0	;tblptru may be non-zero
  2069  00F7CC                     	endif
  2070  00F7CC  0008               	tblrd		*
  2071  00F7CE  50F5               	movf	tablat,w,c
  2072  00F7D0  6E17               	movwf	(??_printf+2)& (0+255),c
  2073  00F7D2  6A18               	clrf	(??_printf+3)& (0+255),c
  2074  00F7D4  5015               	movf	??_printf,w,c
  2075  00F7D6  2617               	addwf	??_printf+2,f,c
  2076  00F7D8  5016               	movf	??_printf+1,w,c
  2077  00F7DA  2218               	addwfc	??_printf+3,f,c
  2078  00F7DC  5017               	movf	??_printf+2,w,c
  2079  00F7DE  2620               	addwf	printf@width,f,c
  2080  00F7E0  5018               	movf	??_printf+3,w,c
  2081  00F7E2  2221               	addwfc	printf@width+1,f,c
  2082  00F7E4  4A0D               	infsnz	printf@f,f,c
  2083  00F7E6  2A0E               	incf	printf@f+1,f,c
  2084                           
  2085                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2086  00F7E8  C00D  FFF6         	movff	printf@f,tblptrl
  2087  00F7EC  C00E  FFF7         	movff	printf@f+1,tblptrh
  2088  00F7F0                     	if	0	;tblptru may be non-zero
  2089  00F7F0                     	endif
  2090  00F7F0                     	if	0	;tblptru may be non-zero
  2091  00F7F0                     	endif
  2092  00F7F0  0008               	tblrd		*
  2093  00F7F2  50F5               	movf	tablat,w,c
  2094  00F7F4  ECD6  F079         	call	_isdigit
  2095  00F7F8  A0D8               	btfss	status,0,c
  2096  00F7FA  D003               	goto	l1521
  2097  00F7FC  D7D1               	goto	l1509
  2098  00F7FE                     l1517:
  2099                           
  2100                           ;doprnt.c: 721: flag |= 0x80;
  2101  00F7FE  8E1F               	bsf	printf@flag,7,c
  2102                           
  2103                           ;doprnt.c: 723: break;
  2104  00F800  D017               	goto	l265
  2105  00F802                     l1521:
  2106  00F802  C00D  FFF6         	movff	printf@f,tblptrl
  2107  00F806  C00E  FFF7         	movff	printf@f+1,tblptrh
  2108  00F80A  4A0D               	infsnz	printf@f,f,c
  2109  00F80C  2A0E               	incf	printf@f+1,f,c
  2110  00F80E                     	if	0	;tblptru may be non-zero
  2111  00F80E                     	endif
  2112  00F80E                     	if	0	;tblptru may be non-zero
  2113  00F80E                     	endif
  2114  00F80E  0008               	tblrd		*
  2115  00F810  CFF5 F022          	movff	tablat,printf@c
  2116  00F814  5022               	movf	printf@c,w,c
  2117                           
  2118                           ; Switch size 1, requested type "space"
  2119                           ; Number of cases is 4, Range of values is 0 to 120
  2120                           ; switch strategies available:
  2121                           ; Name         Instructions Cycles
  2122                           ; simple_byte           13     7 (average)
  2123                           ;	Chosen strategy is simple_byte
  2124  00F816  0A00               	xorlw	0	; case 0
  2125  00F818  B4D8               	btfsc	status,2,c
  2126  00F81A  0012               	return	
  2127  00F81C  0A64               	xorlw	100	; case 100
  2128  00F81E  B4D8               	btfsc	status,2,c
  2129  00F820  D007               	goto	l265
  2130  00F822  0A0D               	xorlw	13	; case 105
  2131  00F824  B4D8               	btfsc	status,2,c
  2132  00F826  D004               	goto	l265
  2133  00F828  0A11               	xorlw	17	; case 120
  2134  00F82A  B4D8               	btfsc	status,2,c
  2135  00F82C  D7E8               	goto	l1517
  2136  00F82E  D103               	goto	l1619
  2137  00F830                     l265:
  2138                           
  2139                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  2140  00F830  BE1F               	btfsc	printf@flag,7,c
  2141  00F832  D015               	goto	l1533
  2142                           
  2143                           ;doprnt.c: 1253: {
  2144                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2145  00F834  C01A  FFD9         	movff	printf@ap,fsr2l
  2146  00F838  C01B  FFDA         	movff	printf@ap+1,fsr2h
  2147  00F83C  CFDE F01D          	movff	postinc2,printf@val
  2148  00F840  CFDD F01E          	movff	postdec2,printf@val+1
  2149  00F844  0E02               	movlw	2
  2150  00F846  261A               	addwf	printf@ap,f,c
  2151  00F848  0E00               	movlw	0
  2152  00F84A  221B               	addwfc	printf@ap+1,f,c
  2153                           
  2154                           ;doprnt.c: 1261: if((int)val < 0) {
  2155  00F84C  AE1E               	btfss	printf@val+1,7,c
  2156  00F84E  D044               	goto	l1567
  2157                           
  2158                           ;doprnt.c: 1262: flag |= 0x03;
  2159  00F850  0E03               	movlw	3
  2160  00F852  121F               	iorwf	printf@flag,f,c
  2161                           
  2162                           ;doprnt.c: 1263: val = -val;
  2163  00F854  6C1D               	negf	printf@val,c
  2164  00F856  1E1E               	comf	printf@val+1,f,c
  2165  00F858  B0D8               	btfsc	status,0,c
  2166  00F85A  2A1E               	incf	printf@val+1,f,c
  2167                           
  2168                           ;doprnt.c: 1264: }
  2169                           ;doprnt.c: 1266: }
  2170  00F85C  D03D               	goto	l1567
  2171  00F85E                     l1533:
  2172                           
  2173                           ;doprnt.c: 1268: else
  2174                           ;doprnt.c: 1273: {
  2175                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2176  00F85E  C01A  FFD9         	movff	printf@ap,fsr2l
  2177  00F862  C01B  FFDA         	movff	printf@ap+1,fsr2h
  2178  00F866  CFDE F01D          	movff	postinc2,printf@val
  2179  00F86A  CFDD F01E          	movff	postdec2,printf@val+1
  2180  00F86E  0E02               	movlw	2
  2181  00F870  261A               	addwf	printf@ap,f,c
  2182  00F872  0E00               	movlw	0
  2183  00F874  221B               	addwfc	printf@ap+1,f,c
  2184                           
  2185                           ;doprnt.c: 1287: }
  2186                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  2187  00F876  D030               	goto	l1567
  2188  00F878                     l1537:
  2189                           
  2190                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2191  00F878  0E01               	movlw	1
  2192  00F87A  6E22               	movwf	printf@c,c
  2193  00F87C                     l1539:
  2194  00F87C  0E05               	movlw	5
  2195  00F87E  1822               	xorwf	printf@c,w,c
  2196  00F880  B4D8               	btfsc	status,2,c
  2197  00F882  D032               	goto	l1569
  2198                           
  2199                           ;doprnt.c: 1306: if(val < dpowers[c])
  2200  00F884  5022               	movf	printf@c,w,c
  2201  00F886  0D02               	mullw	2
  2202  00F888  0E9C               	movlw	low _dpowers
  2203  00F88A  24F3               	addwf	prodl,w,c
  2204  00F88C  6EF6               	movwf	tblptrl,c
  2205  00F88E  0EFE               	movlw	high _dpowers
  2206  00F890  20F4               	addwfc	prodh,w,c
  2207  00F892  6EF7               	movwf	tblptrh,c
  2208  00F894                     	if	0	;There are less than 3 active tblptr bytes
  2209  00F894                     	endif
  2210  00F894  0009               	tblrd		*+
  2211  00F896  50F5               	movf	tablat,w,c
  2212  00F898  5C1D               	subwf	printf@val,w,c
  2213  00F89A  0009               	tblrd		*+
  2214  00F89C  50F5               	movf	tablat,w,c
  2215  00F89E  581E               	subwfb	printf@val+1,w,c
  2216  00F8A0  A0D8               	btfss	status,0,c
  2217  00F8A2  D022               	goto	l1569
  2218                           
  2219                           ;doprnt.c: 1307: break;
  2220  00F8A4  2A22               	incf	printf@c,f,c
  2221  00F8A6  D7EA               	goto	l1539
  2222  00F8A8                     l1551:
  2223                           
  2224                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2225  00F8A8  0E01               	movlw	1
  2226  00F8AA  6E22               	movwf	printf@c,c
  2227  00F8AC                     l1553:
  2228  00F8AC  0E04               	movlw	4
  2229  00F8AE  1822               	xorwf	printf@c,w,c
  2230  00F8B0  B4D8               	btfsc	status,2,c
  2231  00F8B2  D01A               	goto	l1569
  2232                           
  2233                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2234  00F8B4  5022               	movf	printf@c,w,c
  2235  00F8B6  0D02               	mullw	2
  2236  00F8B8  0EA6               	movlw	low _hexpowers
  2237  00F8BA  24F3               	addwf	prodl,w,c
  2238  00F8BC  6EF6               	movwf	tblptrl,c
  2239  00F8BE  0EFE               	movlw	high _hexpowers
  2240  00F8C0  20F4               	addwfc	prodh,w,c
  2241  00F8C2  6EF7               	movwf	tblptrh,c
  2242  00F8C4                     	if	0	;There are less than 3 active tblptr bytes
  2243  00F8C4                     	endif
  2244  00F8C4  0009               	tblrd		*+
  2245  00F8C6  50F5               	movf	tablat,w,c
  2246  00F8C8  5C1D               	subwf	printf@val,w,c
  2247  00F8CA  0009               	tblrd		*+
  2248  00F8CC  50F5               	movf	tablat,w,c
  2249  00F8CE  581E               	subwfb	printf@val+1,w,c
  2250  00F8D0  A0D8               	btfss	status,0,c
  2251  00F8D2  D00A               	goto	l1569
  2252                           
  2253                           ;doprnt.c: 1318: break;
  2254  00F8D4  2A22               	incf	printf@c,f,c
  2255  00F8D6  D7EA               	goto	l1553
  2256  00F8D8                     l1567:
  2257  00F8D8  501F               	movf	printf@flag,w,c
  2258  00F8DA  0B80               	andlw	128
  2259                           
  2260                           ; Switch size 1, requested type "space"
  2261                           ; Number of cases is 2, Range of values is 0 to 128
  2262                           ; switch strategies available:
  2263                           ; Name         Instructions Cycles
  2264                           ; simple_byte            7     4 (average)
  2265                           ;	Chosen strategy is simple_byte
  2266  00F8DC  0A00               	xorlw	0	; case 0
  2267  00F8DE  B4D8               	btfsc	status,2,c
  2268  00F8E0  D7CB               	goto	l1537
  2269  00F8E2  0A80               	xorlw	128	; case 128
  2270  00F8E4  B4D8               	btfsc	status,2,c
  2271  00F8E6  D7E0               	goto	l1551
  2272  00F8E8                     l1569:
  2273                           
  2274                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2275  00F8E8  5020               	movf	printf@width,w,c
  2276  00F8EA  1021               	iorwf	printf@width+1,w,c
  2277  00F8EC  B4D8               	btfsc	status,2,c
  2278  00F8EE  D009               	goto	l1575
  2279  00F8F0  C01F  F015         	movff	printf@flag,??_printf
  2280  00F8F4  0E03               	movlw	3
  2281  00F8F6  1615               	andwf	??_printf,f,c
  2282  00F8F8  B4D8               	btfsc	status,2,c
  2283  00F8FA  D003               	goto	l1575
  2284                           
  2285                           ;doprnt.c: 1346: width--;
  2286  00F8FC  0620               	decf	printf@width,f,c
  2287  00F8FE  A0D8               	btfss	status,0,c
  2288  00F900  0621               	decf	printf@width+1,f,c
  2289  00F902                     l1575:
  2290                           
  2291                           ;doprnt.c: 1381: if(width > c)
  2292  00F902  0E80               	movlw	128
  2293  00F904  BE22               	btfsc	printf@c,7,c
  2294  00F906  0E7F               	movlw	127
  2295  00F908  6E15               	movwf	??_printf& (0+255),c
  2296  00F90A  5020               	movf	printf@width,w,c
  2297  00F90C  5C22               	subwf	printf@c,w,c
  2298  00F90E  5021               	movf	printf@width+1,w,c
  2299  00F910  0A80               	xorlw	128
  2300  00F912  5815               	subwfb	??_printf& (0+255),w,c
  2301  00F914  B0D8               	btfsc	status,0,c
  2302  00F916  D007               	goto	l1579
  2303                           
  2304                           ;doprnt.c: 1382: width -= c;
  2305  00F918  5022               	movf	printf@c,w,c
  2306  00F91A  5E20               	subwf	printf@width,f,c
  2307  00F91C  0E00               	movlw	0
  2308  00F91E  BE22               	btfsc	printf@c,7,c
  2309  00F920  0EFF               	movlw	255
  2310  00F922  5A21               	subwfb	printf@width+1,f,c
  2311  00F924  D004               	goto	l1581
  2312  00F926                     l1579:
  2313                           
  2314                           ;doprnt.c: 1383: else
  2315                           ;doprnt.c: 1384: width = 0;
  2316  00F926  0E00               	movlw	0
  2317  00F928  6E21               	movwf	printf@width+1,c
  2318  00F92A  0E00               	movlw	0
  2319  00F92C  6E20               	movwf	printf@width,c
  2320  00F92E                     l1581:
  2321                           
  2322                           ;doprnt.c: 1387: if(flag & 0x04) {
  2323  00F92E  A41F               	btfss	printf@flag,2,c
  2324  00F930  D014               	goto	l1593
  2325                           
  2326                           ;doprnt.c: 1392: if(flag & 0x03)
  2327  00F932  C01F  F015         	movff	printf@flag,??_printf
  2328  00F936  0E03               	movlw	3
  2329  00F938  1615               	andwf	??_printf,f,c
  2330  00F93A  B4D8               	btfsc	status,2,c
  2331  00F93C  D003               	goto	l1587
  2332                           
  2333                           ;doprnt.c: 1393: (putch('-') );
  2334  00F93E  0E2D               	movlw	45
  2335  00F940  ECC7  F079         	call	_putch
  2336  00F944                     l1587:
  2337                           
  2338                           ;doprnt.c: 1415: if(width)
  2339  00F944  5020               	movf	printf@width,w,c
  2340  00F946  1021               	iorwf	printf@width+1,w,c
  2341  00F948  B4D8               	btfsc	status,2,c
  2342  00F94A  D01E               	goto	l1603
  2343                           
  2344                           ;doprnt.c: 1417: (putch('0') );
  2345                           
  2346                           ;doprnt.c: 1416: do
  2347  00F94C  0E30               	movlw	48
  2348  00F94E  ECC7  F079         	call	_putch
  2349                           
  2350                           ;doprnt.c: 1418: while(--width);
  2351  00F952  0620               	decf	printf@width,f,c
  2352  00F954  A0D8               	btfss	status,0,c
  2353  00F956  0621               	decf	printf@width+1,f,c
  2354  00F958  D7F5               	goto	l1587
  2355  00F95A                     l1593:
  2356                           
  2357                           ;doprnt.c: 1422: {
  2358                           ;doprnt.c: 1424: if(width
  2359                           ;doprnt.c: 1428: )
  2360  00F95A  5020               	movf	printf@width,w,c
  2361  00F95C  1021               	iorwf	printf@width+1,w,c
  2362  00F95E  B4D8               	btfsc	status,2,c
  2363  00F960  D00A               	goto	l1599
  2364  00F962                     l1595:
  2365                           
  2366                           ;doprnt.c: 1430: (putch(' ') );
  2367  00F962  0E20               	movlw	32
  2368  00F964  ECC7  F079         	call	_putch
  2369                           
  2370                           ;doprnt.c: 1431: while(--width);
  2371  00F968  0620               	decf	printf@width,f,c
  2372  00F96A  A0D8               	btfss	status,0,c
  2373  00F96C  0621               	decf	printf@width+1,f,c
  2374  00F96E  5020               	movf	printf@width,w,c
  2375  00F970  1021               	iorwf	printf@width+1,w,c
  2376  00F972  A4D8               	btfss	status,2,c
  2377  00F974  D7F6               	goto	l1595
  2378  00F976                     l1599:
  2379                           
  2380                           ;doprnt.c: 1438: if(flag & 0x03)
  2381  00F976  C01F  F015         	movff	printf@flag,??_printf
  2382  00F97A  0E03               	movlw	3
  2383  00F97C  1615               	andwf	??_printf,f,c
  2384  00F97E  B4D8               	btfsc	status,2,c
  2385  00F980  D003               	goto	l1603
  2386                           
  2387                           ;doprnt.c: 1439: (putch('-') );
  2388  00F982  0E2D               	movlw	45
  2389  00F984  ECC7  F079         	call	_putch
  2390  00F988                     l1603:
  2391                           
  2392                           ;doprnt.c: 1469: }
  2393                           ;doprnt.c: 1472: prec = c;
  2394  00F988  C022  F01C         	movff	printf@c,printf@prec
  2395                           
  2396                           ;doprnt.c: 1474: while(prec--) {
  2397  00F98C  D050               	goto	l1617
  2398  00F98E                     l1605:
  2399                           
  2400                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2401  00F98E  501C               	movf	printf@prec,w,c
  2402  00F990  0D02               	mullw	2
  2403  00F992  0E9C               	movlw	low _dpowers
  2404  00F994  24F3               	addwf	prodl,w,c
  2405  00F996  6EF6               	movwf	tblptrl,c
  2406  00F998  0EFE               	movlw	high _dpowers
  2407  00F99A  20F4               	addwfc	prodh,w,c
  2408  00F99C  6EF7               	movwf	tblptrh,c
  2409  00F99E                     	if	0	;There are less than 3 active tblptr bytes
  2410  00F99E                     	endif
  2411  00F99E  0009               	tblrd		*+
  2412  00F9A0  CFF5 F003          	movff	tablat,___lwdiv@divisor
  2413  00F9A4  000A               	tblrd		*-
  2414  00F9A6  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  2415  00F9AA  C01D  F001         	movff	printf@val,___lwdiv@dividend
  2416  00F9AE  C01E  F002         	movff	printf@val+1,___lwdiv@dividend+1
  2417  00F9B2  ECB4  F07A         	call	___lwdiv	;wreg free
  2418  00F9B6  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  2419  00F9BA  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  2420  00F9BE  0E00               	movlw	0
  2421  00F9C0  6E0B               	movwf	___lwmod@divisor+1,c
  2422  00F9C2  0E0A               	movlw	10
  2423  00F9C4  6E0A               	movwf	___lwmod@divisor,c
  2424  00F9C6  EC22  F07A         	call	___lwmod	;wreg free
  2425  00F9CA  5008               	movf	?___lwmod,w,c
  2426  00F9CC  0F30               	addlw	48
  2427  00F9CE  6E22               	movwf	printf@c,c
  2428                           
  2429                           ;doprnt.c: 1491: break;
  2430  00F9D0  D02B               	goto	l1615
  2431  00F9D2                     l1607:
  2432                           
  2433                           ;doprnt.c: 1499: {
  2434                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  2435  00F9D2  C01D  F001         	movff	printf@val,___lwdiv@dividend
  2436  00F9D6  C01E  F002         	movff	printf@val+1,___lwdiv@dividend+1
  2437  00F9DA  501C               	movf	printf@prec,w,c
  2438  00F9DC  0D02               	mullw	2
  2439  00F9DE  0EA6               	movlw	low _hexpowers
  2440  00F9E0  24F3               	addwf	prodl,w,c
  2441  00F9E2  6EF6               	movwf	tblptrl,c
  2442  00F9E4  0EFE               	movlw	high _hexpowers
  2443  00F9E6  20F4               	addwfc	prodh,w,c
  2444  00F9E8  6EF7               	movwf	tblptrh,c
  2445  00F9EA                     	if	0	;There are less than 3 active tblptr bytes
  2446  00F9EA                     	endif
  2447  00F9EA  0009               	tblrd		*+
  2448  00F9EC  CFF5 F003          	movff	tablat,___lwdiv@divisor
  2449  00F9F0  000A               	tblrd		*-
  2450  00F9F2  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  2451  00F9F6  ECB4  F07A         	call	___lwdiv	;wreg free
  2452  00F9FA  5001               	movf	?___lwdiv,w,c
  2453  00F9FC  0B0F               	andlw	15
  2454  00F9FE  6E19               	movwf	printf@idx,c
  2455                           
  2456                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  2457  00FA00  5019               	movf	printf@idx,w,c
  2458  00FA02  0D01               	mullw	1
  2459  00FA04  0E32               	movlw	low STR_19
  2460  00FA06  24F3               	addwf	prodl,w,c
  2461  00FA08  6EF6               	movwf	tblptrl,c
  2462  00FA0A  0EFF               	movlw	high STR_19
  2463  00FA0C  20F4               	addwfc	prodh,w,c
  2464  00FA0E  6EF7               	movwf	tblptrh,c
  2465  00FA10                     	if	0	;There are less than 3 active tblptr bytes
  2466  00FA10                     	endif
  2467  00FA10  0008               	tblrd		*
  2468  00FA12  CFF5 F022          	movff	tablat,printf@c
  2469                           
  2470                           ;doprnt.c: 1523: }
  2471                           
  2472                           ;doprnt.c: 1508: }
  2473                           ;doprnt.c: 1510: break;
  2474  00FA16  D008               	goto	l1615
  2475  00FA18                     l1613:
  2476  00FA18  501F               	movf	printf@flag,w,c
  2477  00FA1A  0B80               	andlw	128
  2478                           
  2479                           ; Switch size 1, requested type "space"
  2480                           ; Number of cases is 2, Range of values is 0 to 128
  2481                           ; switch strategies available:
  2482                           ; Name         Instructions Cycles
  2483                           ; simple_byte            7     4 (average)
  2484                           ;	Chosen strategy is simple_byte
  2485  00FA1C  0A00               	xorlw	0	; case 0
  2486  00FA1E  B4D8               	btfsc	status,2,c
  2487  00FA20  D7B6               	goto	l1605
  2488  00FA22  0A80               	xorlw	128	; case 128
  2489  00FA24  B4D8               	btfsc	status,2,c
  2490  00FA26  D7D5               	goto	l1607
  2491  00FA28                     l1615:
  2492                           
  2493                           ;doprnt.c: 1524: (putch(c) );
  2494  00FA28  5022               	movf	printf@c,w,c
  2495  00FA2A  ECC7  F079         	call	_putch
  2496  00FA2E                     l1617:
  2497  00FA2E  061C               	decf	printf@prec,f,c
  2498  00FA30  281C               	incf	printf@prec,w,c
  2499  00FA32  A4D8               	btfss	status,2,c
  2500  00FA34  D7F1               	goto	l1613
  2501  00FA36                     l1619:
  2502  00FA36  C00D  FFF6         	movff	printf@f,tblptrl
  2503  00FA3A  C00E  FFF7         	movff	printf@f+1,tblptrh
  2504  00FA3E  4A0D               	infsnz	printf@f,f,c
  2505  00FA40  2A0E               	incf	printf@f+1,f,c
  2506  00FA42                     	if	0	;tblptru may be non-zero
  2507  00FA42                     	endif
  2508  00FA42                     	if	0	;tblptru may be non-zero
  2509  00FA42                     	endif
  2510  00FA42  0008               	tblrd		*
  2511  00FA44  CFF5 F022          	movff	tablat,printf@c
  2512  00FA48  5022               	movf	printf@c,w,c
  2513  00FA4A  B4D8               	btfsc	status,2,c
  2514  00FA4C  0012               	return	
  2515  00FA4E  D67F               	goto	l1493
  2516  00FA50                     __end_of_printf:
  2517                           	opt stack 0
  2518                           tblptru	equ	0xFF8
  2519                           tblptrh	equ	0xFF7
  2520                           tblptrl	equ	0xFF6
  2521                           tablat	equ	0xFF5
  2522                           prodh	equ	0xFF4
  2523                           prodl	equ	0xFF3
  2524                           intcon	equ	0xFF2
  2525                           postinc0	equ	0xFEE
  2526                           wreg	equ	0xFE8
  2527                           indf2	equ	0xFDF
  2528                           postinc2	equ	0xFDE
  2529                           postdec2	equ	0xFDD
  2530                           fsr2h	equ	0xFDA
  2531                           fsr2l	equ	0xFD9
  2532                           status	equ	0xFD8
  2533                           
  2534 ;; *************** function _putch *****************
  2535 ;; Defined at:
  2536 ;;		line 31 in file "../../../../AER201 pseudo code/lcd.c"
  2537 ;; Parameters:    Size  Location     Type
  2538 ;;  data            1    wreg     unsigned char 
  2539 ;; Auto vars:     Size  Location     Type
  2540 ;;  data            1    2[COMRAM] unsigned char 
  2541 ;; Return value:  Size  Location     Type
  2542 ;;                  1    wreg      void 
  2543 ;; Registers used:
  2544 ;;		wreg, status,2, status,0, cstack
  2545 ;; Tracked objects:
  2546 ;;		On entry : 0/0
  2547 ;;		On exit  : 0/0
  2548 ;;		Unchanged: 0/0
  2549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2550 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2551 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2552 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2553 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2554 ;;Total ram usage:        1 bytes
  2555 ;; Hardware stack levels used:    1
  2556 ;; Hardware stack levels required when called:    1
  2557 ;; This function calls:
  2558 ;;		_lcdNibble
  2559 ;; This function is called by:
  2560 ;;		_printf
  2561 ;; This function uses a non-reentrant model
  2562 ;;
  2563                           
  2564                           	psect	text4
  2565  00F38E                     __ptext4:
  2566                           	opt stack 0
  2567  00F38E                     _putch:
  2568                           	opt stack 28
  2569                           
  2570                           ;incstack = 0
  2571                           ;putch@data stored from wreg
  2572  00F38E  6E03               	movwf	putch@data,c
  2573                           
  2574                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  2575  00F390  848C               	bsf	3980,2,c	;volatile
  2576                           
  2577                           ;lcd.c: 33: lcdNibble(data);
  2578  00F392  5003               	movf	putch@data,w,c
  2579  00F394  EC8D  F07A         	call	_lcdNibble
  2580  00F398  0012               	return		;funcret
  2581  00F39A                     __end_of_putch:
  2582                           	opt stack 0
  2583                           tblptru	equ	0xFF8
  2584                           tblptrh	equ	0xFF7
  2585                           tblptrl	equ	0xFF6
  2586                           tablat	equ	0xFF5
  2587                           prodh	equ	0xFF4
  2588                           prodl	equ	0xFF3
  2589                           intcon	equ	0xFF2
  2590                           postinc0	equ	0xFEE
  2591                           wreg	equ	0xFE8
  2592                           indf2	equ	0xFDF
  2593                           postinc2	equ	0xFDE
  2594                           postdec2	equ	0xFDD
  2595                           fsr2h	equ	0xFDA
  2596                           fsr2l	equ	0xFD9
  2597                           status	equ	0xFD8
  2598                           
  2599 ;; *************** function _isdigit *****************
  2600 ;; Defined at:
  2601 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  2602 ;; Parameters:    Size  Location     Type
  2603 ;;  c               1    wreg     unsigned char 
  2604 ;; Auto vars:     Size  Location     Type
  2605 ;;  c               1    2[COMRAM] unsigned char 
  2606 ;; Return value:  Size  Location     Type
  2607 ;;		None               void
  2608 ;; Registers used:
  2609 ;;		wreg, status,2, status,0
  2610 ;; Tracked objects:
  2611 ;;		On entry : 0/0
  2612 ;;		On exit  : 0/0
  2613 ;;		Unchanged: 0/0
  2614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2615 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2616 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2617 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2618 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2619 ;;Total ram usage:        3 bytes
  2620 ;; Hardware stack levels used:    1
  2621 ;; This function calls:
  2622 ;;		Nothing
  2623 ;; This function is called by:
  2624 ;;		_printf
  2625 ;; This function uses a non-reentrant model
  2626 ;;
  2627                           
  2628                           	psect	text5
  2629  00F3AC                     __ptext5:
  2630                           	opt stack 0
  2631  00F3AC                     _isdigit:
  2632                           	opt stack 29
  2633                           
  2634                           ;incstack = 0
  2635                           ;isdigit@c stored from wreg
  2636  00F3AC  6E03               	movwf	isdigit@c,c
  2637  00F3AE  0E00               	movlw	0
  2638  00F3B0  6E02               	movwf	_isdigit$602,c
  2639  00F3B2  0E3A               	movlw	58
  2640  00F3B4  6003               	cpfslt	isdigit@c,c
  2641  00F3B6  D005               	goto	l1443
  2642  00F3B8  0E2F               	movlw	47
  2643  00F3BA  6403               	cpfsgt	isdigit@c,c
  2644  00F3BC  D002               	goto	l1443
  2645  00F3BE  0E01               	movlw	1
  2646  00F3C0  6E02               	movwf	_isdigit$602,c
  2647  00F3C2                     l1443:
  2648  00F3C2  C002  F001         	movff	_isdigit$602,??_isdigit
  2649  00F3C6  3001               	rrcf	??_isdigit,w,c
  2650  00F3C8  0012               	return	
  2651  00F3CA                     __end_of_isdigit:
  2652                           	opt stack 0
  2653                           tblptru	equ	0xFF8
  2654                           tblptrh	equ	0xFF7
  2655                           tblptrl	equ	0xFF6
  2656                           tablat	equ	0xFF5
  2657                           prodh	equ	0xFF4
  2658                           prodl	equ	0xFF3
  2659                           intcon	equ	0xFF2
  2660                           postinc0	equ	0xFEE
  2661                           wreg	equ	0xFE8
  2662                           indf2	equ	0xFDF
  2663                           postinc2	equ	0xFDE
  2664                           postdec2	equ	0xFDD
  2665                           fsr2h	equ	0xFDA
  2666                           fsr2l	equ	0xFD9
  2667                           status	equ	0xFD8
  2668                           
  2669 ;; *************** function ___wmul *****************
  2670 ;; Defined at:
  2671 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  2672 ;; Parameters:    Size  Location     Type
  2673 ;;  multiplier      2    0[COMRAM] unsigned int 
  2674 ;;  multiplicand    2    2[COMRAM] unsigned int 
  2675 ;; Auto vars:     Size  Location     Type
  2676 ;;  product         2    4[COMRAM] unsigned int 
  2677 ;; Return value:  Size  Location     Type
  2678 ;;                  2    0[COMRAM] unsigned int 
  2679 ;; Registers used:
  2680 ;;		wreg, status,2, status,0, prodl, prodh
  2681 ;; Tracked objects:
  2682 ;;		On entry : 0/0
  2683 ;;		On exit  : 0/0
  2684 ;;		Unchanged: 0/0
  2685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2686 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2687 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2688 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2689 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2690 ;;Total ram usage:        6 bytes
  2691 ;; Hardware stack levels used:    1
  2692 ;; This function calls:
  2693 ;;		Nothing
  2694 ;; This function is called by:
  2695 ;;		_printf
  2696 ;; This function uses a non-reentrant model
  2697 ;;
  2698                           
  2699                           	psect	text6
  2700  00F3F0                     __ptext6:
  2701                           	opt stack 0
  2702  00F3F0                     ___wmul:
  2703                           	opt stack 29
  2704                           
  2705                           ;incstack = 0
  2706  00F3F0  5001               	movf	___wmul@multiplier,w,c
  2707  00F3F2  0203               	mulwf	___wmul@multiplicand,c
  2708  00F3F4  CFF3 F005          	movff	prodl,___wmul@product
  2709  00F3F8  CFF4 F006          	movff	prodh,___wmul@product+1
  2710  00F3FC  5001               	movf	___wmul@multiplier,w,c
  2711  00F3FE  0204               	mulwf	___wmul@multiplicand+1,c
  2712  00F400  50F3               	movf	prodl,w,c
  2713  00F402  2606               	addwf	___wmul@product+1,f,c
  2714  00F404  5002               	movf	___wmul@multiplier+1,w,c
  2715  00F406  0203               	mulwf	___wmul@multiplicand,c
  2716  00F408  50F3               	movf	prodl,w,c
  2717  00F40A  2606               	addwf	___wmul@product+1,f,c
  2718  00F40C  C005  F001         	movff	___wmul@product,?___wmul
  2719  00F410  C006  F002         	movff	___wmul@product+1,?___wmul+1
  2720  00F414  0012               	return	
  2721  00F416                     __end_of___wmul:
  2722                           	opt stack 0
  2723                           tblptru	equ	0xFF8
  2724                           tblptrh	equ	0xFF7
  2725                           tblptrl	equ	0xFF6
  2726                           tablat	equ	0xFF5
  2727                           prodh	equ	0xFF4
  2728                           prodl	equ	0xFF3
  2729                           intcon	equ	0xFF2
  2730                           postinc0	equ	0xFEE
  2731                           wreg	equ	0xFE8
  2732                           indf2	equ	0xFDF
  2733                           postinc2	equ	0xFDE
  2734                           postdec2	equ	0xFDD
  2735                           fsr2h	equ	0xFDA
  2736                           fsr2l	equ	0xFD9
  2737                           status	equ	0xFD8
  2738                           
  2739 ;; *************** function ___lwmod *****************
  2740 ;; Defined at:
  2741 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  2742 ;; Parameters:    Size  Location     Type
  2743 ;;  dividend        2    7[COMRAM] unsigned int 
  2744 ;;  divisor         2    9[COMRAM] unsigned int 
  2745 ;; Auto vars:     Size  Location     Type
  2746 ;;  counter         1   11[COMRAM] unsigned char 
  2747 ;; Return value:  Size  Location     Type
  2748 ;;                  2    7[COMRAM] unsigned int 
  2749 ;; Registers used:
  2750 ;;		wreg, status,2, status,0
  2751 ;; Tracked objects:
  2752 ;;		On entry : 0/0
  2753 ;;		On exit  : 0/0
  2754 ;;		Unchanged: 0/0
  2755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2756 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2757 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2758 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2759 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2760 ;;Total ram usage:        5 bytes
  2761 ;; Hardware stack levels used:    1
  2762 ;; This function calls:
  2763 ;;		Nothing
  2764 ;; This function is called by:
  2765 ;;		_printf
  2766 ;; This function uses a non-reentrant model
  2767 ;;
  2768                           
  2769                           	psect	text7
  2770  00F444                     __ptext7:
  2771                           	opt stack 0
  2772  00F444                     ___lwmod:
  2773                           	opt stack 29
  2774                           
  2775                           ;incstack = 0
  2776  00F444  500A               	movf	___lwmod@divisor,w,c
  2777  00F446  100B               	iorwf	___lwmod@divisor+1,w,c
  2778  00F448  B4D8               	btfsc	status,2,c
  2779  00F44A  D018               	goto	l720
  2780  00F44C  0E01               	movlw	1
  2781  00F44E  6E0C               	movwf	___lwmod@counter,c
  2782  00F450  D004               	goto	l1481
  2783  00F452                     l1479:
  2784  00F452  90D8               	bcf	status,0,c
  2785  00F454  360A               	rlcf	___lwmod@divisor,f,c
  2786  00F456  360B               	rlcf	___lwmod@divisor+1,f,c
  2787  00F458  2A0C               	incf	___lwmod@counter,f,c
  2788  00F45A                     l1481:
  2789  00F45A  AE0B               	btfss	___lwmod@divisor+1,7,c
  2790  00F45C  D7FA               	goto	l1479
  2791  00F45E                     l1483:
  2792  00F45E  500A               	movf	___lwmod@divisor,w,c
  2793  00F460  5C08               	subwf	___lwmod@dividend,w,c
  2794  00F462  500B               	movf	___lwmod@divisor+1,w,c
  2795  00F464  5809               	subwfb	___lwmod@dividend+1,w,c
  2796  00F466  A0D8               	btfss	status,0,c
  2797  00F468  D004               	goto	l1487
  2798  00F46A  500A               	movf	___lwmod@divisor,w,c
  2799  00F46C  5E08               	subwf	___lwmod@dividend,f,c
  2800  00F46E  500B               	movf	___lwmod@divisor+1,w,c
  2801  00F470  5A09               	subwfb	___lwmod@dividend+1,f,c
  2802  00F472                     l1487:
  2803  00F472  90D8               	bcf	status,0,c
  2804  00F474  320B               	rrcf	___lwmod@divisor+1,f,c
  2805  00F476  320A               	rrcf	___lwmod@divisor,f,c
  2806  00F478  2E0C               	decfsz	___lwmod@counter,f,c
  2807  00F47A  D7F1               	goto	l1483
  2808  00F47C                     l720:
  2809  00F47C  C008  F008         	movff	___lwmod@dividend,?___lwmod
  2810  00F480  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  2811  00F484  0012               	return		;funcret
  2812  00F486                     __end_of___lwmod:
  2813                           	opt stack 0
  2814                           tblptru	equ	0xFF8
  2815                           tblptrh	equ	0xFF7
  2816                           tblptrl	equ	0xFF6
  2817                           tablat	equ	0xFF5
  2818                           prodh	equ	0xFF4
  2819                           prodl	equ	0xFF3
  2820                           intcon	equ	0xFF2
  2821                           postinc0	equ	0xFEE
  2822                           wreg	equ	0xFE8
  2823                           indf2	equ	0xFDF
  2824                           postinc2	equ	0xFDE
  2825                           postdec2	equ	0xFDD
  2826                           fsr2h	equ	0xFDA
  2827                           fsr2l	equ	0xFD9
  2828                           status	equ	0xFD8
  2829                           
  2830 ;; *************** function ___lwdiv *****************
  2831 ;; Defined at:
  2832 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  2833 ;; Parameters:    Size  Location     Type
  2834 ;;  dividend        2    0[COMRAM] unsigned int 
  2835 ;;  divisor         2    2[COMRAM] unsigned int 
  2836 ;; Auto vars:     Size  Location     Type
  2837 ;;  quotient        2    4[COMRAM] unsigned int 
  2838 ;;  counter         1    6[COMRAM] unsigned char 
  2839 ;; Return value:  Size  Location     Type
  2840 ;;                  2    0[COMRAM] unsigned int 
  2841 ;; Registers used:
  2842 ;;		wreg, status,2, status,0
  2843 ;; Tracked objects:
  2844 ;;		On entry : 0/0
  2845 ;;		On exit  : 0/0
  2846 ;;		Unchanged: 0/0
  2847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2848 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2849 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2850 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2851 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2852 ;;Total ram usage:        7 bytes
  2853 ;; Hardware stack levels used:    1
  2854 ;; This function calls:
  2855 ;;		Nothing
  2856 ;; This function is called by:
  2857 ;;		_printf
  2858 ;; This function uses a non-reentrant model
  2859 ;;
  2860                           
  2861                           	psect	text8
  2862  00F568                     __ptext8:
  2863                           	opt stack 0
  2864  00F568                     ___lwdiv:
  2865                           	opt stack 29
  2866                           
  2867                           ;incstack = 0
  2868  00F568  0E00               	movlw	0
  2869  00F56A  6E06               	movwf	___lwdiv@quotient+1,c
  2870  00F56C  0E00               	movlw	0
  2871  00F56E  6E05               	movwf	___lwdiv@quotient,c
  2872  00F570  5003               	movf	___lwdiv@divisor,w,c
  2873  00F572  1004               	iorwf	___lwdiv@divisor+1,w,c
  2874  00F574  B4D8               	btfsc	status,2,c
  2875  00F576  D01C               	goto	l710
  2876  00F578  0E01               	movlw	1
  2877  00F57A  6E07               	movwf	___lwdiv@counter,c
  2878  00F57C  D004               	goto	l1461
  2879  00F57E                     l1459:
  2880  00F57E  90D8               	bcf	status,0,c
  2881  00F580  3603               	rlcf	___lwdiv@divisor,f,c
  2882  00F582  3604               	rlcf	___lwdiv@divisor+1,f,c
  2883  00F584  2A07               	incf	___lwdiv@counter,f,c
  2884  00F586                     l1461:
  2885  00F586  AE04               	btfss	___lwdiv@divisor+1,7,c
  2886  00F588  D7FA               	goto	l1459
  2887  00F58A                     l1463:
  2888  00F58A  90D8               	bcf	status,0,c
  2889  00F58C  3605               	rlcf	___lwdiv@quotient,f,c
  2890  00F58E  3606               	rlcf	___lwdiv@quotient+1,f,c
  2891  00F590  5003               	movf	___lwdiv@divisor,w,c
  2892  00F592  5C01               	subwf	___lwdiv@dividend,w,c
  2893  00F594  5004               	movf	___lwdiv@divisor+1,w,c
  2894  00F596  5802               	subwfb	___lwdiv@dividend+1,w,c
  2895  00F598  A0D8               	btfss	status,0,c
  2896  00F59A  D005               	goto	l1471
  2897  00F59C  5003               	movf	___lwdiv@divisor,w,c
  2898  00F59E  5E01               	subwf	___lwdiv@dividend,f,c
  2899  00F5A0  5004               	movf	___lwdiv@divisor+1,w,c
  2900  00F5A2  5A02               	subwfb	___lwdiv@dividend+1,f,c
  2901  00F5A4  8005               	bsf	___lwdiv@quotient,0,c
  2902  00F5A6                     l1471:
  2903  00F5A6  90D8               	bcf	status,0,c
  2904  00F5A8  3204               	rrcf	___lwdiv@divisor+1,f,c
  2905  00F5AA  3203               	rrcf	___lwdiv@divisor,f,c
  2906  00F5AC  2E07               	decfsz	___lwdiv@counter,f,c
  2907  00F5AE  D7ED               	goto	l1463
  2908  00F5B0                     l710:
  2909  00F5B0  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  2910  00F5B4  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2911  00F5B8  0012               	return		;funcret
  2912  00F5BA                     __end_of___lwdiv:
  2913                           	opt stack 0
  2914                           tblptru	equ	0xFF8
  2915                           tblptrh	equ	0xFF7
  2916                           tblptrl	equ	0xFF6
  2917                           tablat	equ	0xFF5
  2918                           prodh	equ	0xFF4
  2919                           prodl	equ	0xFF3
  2920                           intcon	equ	0xFF2
  2921                           postinc0	equ	0xFEE
  2922                           wreg	equ	0xFE8
  2923                           indf2	equ	0xFDF
  2924                           postinc2	equ	0xFDE
  2925                           postdec2	equ	0xFDD
  2926                           fsr2h	equ	0xFDA
  2927                           fsr2l	equ	0xFD9
  2928                           status	equ	0xFD8
  2929                           
  2930 ;; *************** function _I2C_Master_Write *****************
  2931 ;; Defined at:
  2932 ;;		line 47 in file "../../../../AER201 pseudo code/I2C.c"
  2933 ;; Parameters:    Size  Location     Type
  2934 ;;  d               2    1[COMRAM] unsigned int 
  2935 ;; Auto vars:     Size  Location     Type
  2936 ;;		None
  2937 ;; Return value:  Size  Location     Type
  2938 ;;                  1    wreg      void 
  2939 ;; Registers used:
  2940 ;;		wreg, status,2, status,0, cstack
  2941 ;; Tracked objects:
  2942 ;;		On entry : 0/0
  2943 ;;		On exit  : 0/0
  2944 ;;		Unchanged: 0/0
  2945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2946 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2947 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2948 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2949 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2950 ;;Total ram usage:        2 bytes
  2951 ;; Hardware stack levels used:    1
  2952 ;; Hardware stack levels required when called:    1
  2953 ;; This function calls:
  2954 ;;		_I2C_Master_Wait
  2955 ;; This function is called by:
  2956 ;;		_printRTC
  2957 ;; This function uses a non-reentrant model
  2958 ;;
  2959                           
  2960                           	psect	text9
  2961  00F378                     __ptext9:
  2962                           	opt stack 0
  2963  00F378                     _I2C_Master_Write:
  2964                           	opt stack 28
  2965                           
  2966                           ;I2C.c: 49: I2C_Master_Wait();
  2967                           
  2968                           ;incstack = 0
  2969  00F378  ECCD  F079         	call	_I2C_Master_Wait	;wreg free
  2970                           
  2971                           ;I2C.c: 50: SSPBUF = d;
  2972  00F37C  C002  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  2973  00F380  0012               	return		;funcret
  2974  00F382                     __end_of_I2C_Master_Write:
  2975                           	opt stack 0
  2976                           tblptru	equ	0xFF8
  2977                           tblptrh	equ	0xFF7
  2978                           tblptrl	equ	0xFF6
  2979                           tablat	equ	0xFF5
  2980                           prodh	equ	0xFF4
  2981                           prodl	equ	0xFF3
  2982                           intcon	equ	0xFF2
  2983                           postinc0	equ	0xFEE
  2984                           wreg	equ	0xFE8
  2985                           indf2	equ	0xFDF
  2986                           postinc2	equ	0xFDE
  2987                           postdec2	equ	0xFDD
  2988                           fsr2h	equ	0xFDA
  2989                           fsr2l	equ	0xFD9
  2990                           status	equ	0xFD8
  2991                           
  2992 ;; *************** function _I2C_Master_Stop *****************
  2993 ;; Defined at:
  2994 ;;		line 41 in file "../../../../AER201 pseudo code/I2C.c"
  2995 ;; Parameters:    Size  Location     Type
  2996 ;;		None
  2997 ;; Auto vars:     Size  Location     Type
  2998 ;;		None
  2999 ;; Return value:  Size  Location     Type
  3000 ;;                  2   40[None  ] int 
  3001 ;; Registers used:
  3002 ;;		wreg, status,2, status,0, cstack
  3003 ;; Tracked objects:
  3004 ;;		On entry : 0/0
  3005 ;;		On exit  : 0/0
  3006 ;;		Unchanged: 0/0
  3007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3008 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3009 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3010 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3011 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3012 ;;Total ram usage:        0 bytes
  3013 ;; Hardware stack levels used:    1
  3014 ;; Hardware stack levels required when called:    1
  3015 ;; This function calls:
  3016 ;;		_I2C_Master_Wait
  3017 ;; This function is called by:
  3018 ;;		_printRTC
  3019 ;; This function uses a non-reentrant model
  3020 ;;
  3021                           
  3022                           	psect	text10
  3023  00F370                     __ptext10:
  3024                           	opt stack 0
  3025  00F370                     _I2C_Master_Stop:
  3026                           	opt stack 28
  3027                           
  3028                           ;I2C.c: 43: I2C_Master_Wait();
  3029                           
  3030                           ;incstack = 0
  3031  00F370  ECCD  F079         	call	_I2C_Master_Wait	;wreg free
  3032                           
  3033                           ;I2C.c: 44: PEN = 1;
  3034  00F374  84C5               	bsf	4037,2,c	;volatile
  3035  00F376  0012               	return		;funcret
  3036  00F378                     __end_of_I2C_Master_Stop:
  3037                           	opt stack 0
  3038                           tblptru	equ	0xFF8
  3039                           tblptrh	equ	0xFF7
  3040                           tblptrl	equ	0xFF6
  3041                           tablat	equ	0xFF5
  3042                           prodh	equ	0xFF4
  3043                           prodl	equ	0xFF3
  3044                           intcon	equ	0xFF2
  3045                           postinc0	equ	0xFEE
  3046                           wreg	equ	0xFE8
  3047                           indf2	equ	0xFDF
  3048                           postinc2	equ	0xFDE
  3049                           postdec2	equ	0xFDD
  3050                           fsr2h	equ	0xFDA
  3051                           fsr2l	equ	0xFD9
  3052                           status	equ	0xFD8
  3053                           
  3054 ;; *************** function _I2C_Master_Start *****************
  3055 ;; Defined at:
  3056 ;;		line 29 in file "../../../../AER201 pseudo code/I2C.c"
  3057 ;; Parameters:    Size  Location     Type
  3058 ;;		None
  3059 ;; Auto vars:     Size  Location     Type
  3060 ;;		None
  3061 ;; Return value:  Size  Location     Type
  3062 ;;                  2   36[None  ] int 
  3063 ;; Registers used:
  3064 ;;		wreg, status,2, status,0, cstack
  3065 ;; Tracked objects:
  3066 ;;		On entry : 0/0
  3067 ;;		On exit  : 0/0
  3068 ;;		Unchanged: 0/0
  3069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3070 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3071 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3072 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3073 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3074 ;;Total ram usage:        0 bytes
  3075 ;; Hardware stack levels used:    1
  3076 ;; Hardware stack levels required when called:    1
  3077 ;; This function calls:
  3078 ;;		_I2C_Master_Wait
  3079 ;; This function is called by:
  3080 ;;		_printRTC
  3081 ;; This function uses a non-reentrant model
  3082 ;;
  3083                           
  3084                           	psect	text11
  3085  00F368                     __ptext11:
  3086                           	opt stack 0
  3087  00F368                     _I2C_Master_Start:
  3088                           	opt stack 28
  3089                           
  3090                           ;I2C.c: 31: I2C_Master_Wait();
  3091                           
  3092                           ;incstack = 0
  3093  00F368  ECCD  F079         	call	_I2C_Master_Wait	;wreg free
  3094                           
  3095                           ;I2C.c: 32: SEN = 1;
  3096  00F36C  80C5               	bsf	4037,0,c	;volatile
  3097  00F36E  0012               	return		;funcret
  3098  00F370                     __end_of_I2C_Master_Start:
  3099                           	opt stack 0
  3100                           tblptru	equ	0xFF8
  3101                           tblptrh	equ	0xFF7
  3102                           tblptrl	equ	0xFF6
  3103                           tablat	equ	0xFF5
  3104                           prodh	equ	0xFF4
  3105                           prodl	equ	0xFF3
  3106                           intcon	equ	0xFF2
  3107                           postinc0	equ	0xFEE
  3108                           wreg	equ	0xFE8
  3109                           indf2	equ	0xFDF
  3110                           postinc2	equ	0xFDE
  3111                           postdec2	equ	0xFDD
  3112                           fsr2h	equ	0xFDA
  3113                           fsr2l	equ	0xFD9
  3114                           status	equ	0xFD8
  3115                           
  3116 ;; *************** function _I2C_Master_Read *****************
  3117 ;; Defined at:
  3118 ;;		line 53 in file "../../../../AER201 pseudo code/I2C.c"
  3119 ;; Parameters:    Size  Location     Type
  3120 ;;  a               1    wreg     unsigned char 
  3121 ;; Auto vars:     Size  Location     Type
  3122 ;;  a               1    1[COMRAM] unsigned char 
  3123 ;;  temp            1    2[COMRAM] unsigned char 
  3124 ;; Return value:  Size  Location     Type
  3125 ;;                  1    wreg      unsigned char 
  3126 ;; Registers used:
  3127 ;;		wreg, status,2, status,0, cstack
  3128 ;; Tracked objects:
  3129 ;;		On entry : 0/0
  3130 ;;		On exit  : 0/0
  3131 ;;		Unchanged: 0/0
  3132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3134 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3135 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3136 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3137 ;;Total ram usage:        2 bytes
  3138 ;; Hardware stack levels used:    1
  3139 ;; Hardware stack levels required when called:    1
  3140 ;; This function calls:
  3141 ;;		_I2C_Master_Wait
  3142 ;; This function is called by:
  3143 ;;		_printRTC
  3144 ;; This function uses a non-reentrant model
  3145 ;;
  3146                           
  3147                           	psect	text12
  3148  00F3CA                     __ptext12:
  3149                           	opt stack 0
  3150  00F3CA                     _I2C_Master_Read:
  3151                           	opt stack 28
  3152                           
  3153                           ;incstack = 0
  3154                           ;I2C_Master_Read@a stored from wreg
  3155  00F3CA  6E02               	movwf	I2C_Master_Read@a,c
  3156                           
  3157                           ;I2C.c: 55: unsigned char temp;
  3158                           ;I2C.c: 56: I2C_Master_Wait();
  3159  00F3CC  ECCD  F079         	call	_I2C_Master_Wait	;wreg free
  3160                           
  3161                           ;I2C.c: 57: RCEN = 1;
  3162  00F3D0  86C5               	bsf	4037,3,c	;volatile
  3163                           
  3164                           ;I2C.c: 58: I2C_Master_Wait();
  3165  00F3D2  ECCD  F079         	call	_I2C_Master_Wait	;wreg free
  3166                           
  3167                           ;I2C.c: 59: temp = SSPBUF;
  3168  00F3D6  CFC9 F003          	movff	4041,I2C_Master_Read@temp	;volatile
  3169                           
  3170                           ;I2C.c: 60: I2C_Master_Wait();
  3171  00F3DA  ECCD  F079         	call	_I2C_Master_Wait	;wreg free
  3172                           
  3173                           ;I2C.c: 61: ACKDT = (a)?0:1;
  3174  00F3DE  5002               	movf	I2C_Master_Read@a,w,c
  3175  00F3E0  A4D8               	btfss	status,2,c
  3176  00F3E2  D002               	goto	u340
  3177  00F3E4  8AC5               	bsf	4037,5,c	;volatile
  3178  00F3E6  D001               	goto	l1157
  3179  00F3E8                     u340:
  3180  00F3E8  9AC5               	bcf	4037,5,c	;volatile
  3181  00F3EA                     l1157:
  3182                           
  3183                           ;I2C.c: 62: ACKEN = 1;
  3184  00F3EA  88C5               	bsf	4037,4,c	;volatile
  3185                           
  3186                           ;I2C.c: 63: return temp;
  3187  00F3EC  5003               	movf	I2C_Master_Read@temp,w,c
  3188  00F3EE  0012               	return	
  3189  00F3F0                     __end_of_I2C_Master_Read:
  3190                           	opt stack 0
  3191                           tblptru	equ	0xFF8
  3192                           tblptrh	equ	0xFF7
  3193                           tblptrl	equ	0xFF6
  3194                           tablat	equ	0xFF5
  3195                           prodh	equ	0xFF4
  3196                           prodl	equ	0xFF3
  3197                           intcon	equ	0xFF2
  3198                           postinc0	equ	0xFEE
  3199                           wreg	equ	0xFE8
  3200                           indf2	equ	0xFDF
  3201                           postinc2	equ	0xFDE
  3202                           postdec2	equ	0xFDD
  3203                           fsr2h	equ	0xFDA
  3204                           fsr2l	equ	0xFD9
  3205                           status	equ	0xFD8
  3206                           
  3207 ;; *************** function _I2C_Master_Wait *****************
  3208 ;; Defined at:
  3209 ;;		line 24 in file "../../../../AER201 pseudo code/I2C.c"
  3210 ;; Parameters:    Size  Location     Type
  3211 ;;		None
  3212 ;; Auto vars:     Size  Location     Type
  3213 ;;		None
  3214 ;; Return value:  Size  Location     Type
  3215 ;;                  1    wreg      void 
  3216 ;; Registers used:
  3217 ;;		wreg, status,2, status,0
  3218 ;; Tracked objects:
  3219 ;;		On entry : 0/0
  3220 ;;		On exit  : 0/0
  3221 ;;		Unchanged: 0/0
  3222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3223 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3224 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3225 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3226 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3227 ;;Total ram usage:        1 bytes
  3228 ;; Hardware stack levels used:    1
  3229 ;; This function calls:
  3230 ;;		Nothing
  3231 ;; This function is called by:
  3232 ;;		_I2C_Master_Start
  3233 ;;		_I2C_Master_Stop
  3234 ;;		_I2C_Master_Write
  3235 ;;		_I2C_Master_Read
  3236 ;;		_I2C_Master_RepeatedStart
  3237 ;; This function uses a non-reentrant model
  3238 ;;
  3239                           
  3240                           	psect	text13
  3241  00F39A                     __ptext13:
  3242                           	opt stack 0
  3243  00F39A                     _I2C_Master_Wait:
  3244                           	opt stack 28
  3245  00F39A                     l187:
  3246  00F39A  B4C7               	btfsc	4039,2,c	;volatile
  3247  00F39C  D7FE               	goto	l187
  3248  00F39E  CFC5 F001          	movff	4037,??_I2C_Master_Wait	;volatile
  3249  00F3A2  0E1F               	movlw	31
  3250  00F3A4  1601               	andwf	??_I2C_Master_Wait,f,c
  3251  00F3A6  B4D8               	btfsc	status,2,c
  3252  00F3A8  0012               	return	
  3253  00F3AA  D7F7               	goto	l187
  3254  00F3AC                     __end_of_I2C_Master_Wait:
  3255                           	opt stack 0
  3256                           tblptru	equ	0xFF8
  3257                           tblptrh	equ	0xFF7
  3258                           tblptrl	equ	0xFF6
  3259                           tablat	equ	0xFF5
  3260                           prodh	equ	0xFF4
  3261                           prodl	equ	0xFF3
  3262                           intcon	equ	0xFF2
  3263                           postinc0	equ	0xFEE
  3264                           wreg	equ	0xFE8
  3265                           indf2	equ	0xFDF
  3266                           postinc2	equ	0xFDE
  3267                           postdec2	equ	0xFDD
  3268                           fsr2h	equ	0xFDA
  3269                           fsr2l	equ	0xFD9
  3270                           status	equ	0xFD8
  3271                           
  3272 ;; *************** function _initLCD *****************
  3273 ;; Defined at:
  3274 ;;		line 14 in file "../../../../AER201 pseudo code/lcd.c"
  3275 ;; Parameters:    Size  Location     Type
  3276 ;;		None
  3277 ;; Auto vars:     Size  Location     Type
  3278 ;;		None
  3279 ;; Return value:  Size  Location     Type
  3280 ;;                  1    wreg      void 
  3281 ;; Registers used:
  3282 ;;		wreg, status,2, status,0, cstack
  3283 ;; Tracked objects:
  3284 ;;		On entry : 0/0
  3285 ;;		On exit  : 0/0
  3286 ;;		Unchanged: 0/0
  3287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3288 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3289 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3290 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3291 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3292 ;;Total ram usage:        1 bytes
  3293 ;; Hardware stack levels used:    1
  3294 ;; Hardware stack levels required when called:    2
  3295 ;; This function calls:
  3296 ;;		_lcdInst
  3297 ;; This function is called by:
  3298 ;;		_main
  3299 ;; This function uses a non-reentrant model
  3300 ;;
  3301                           
  3302                           	psect	text14
  3303  00F4CE                     __ptext14:
  3304                           	opt stack 0
  3305  00F4CE                     _initLCD:
  3306                           	opt stack 28
  3307                           
  3308                           ;lcd.c: 15: _delay((unsigned long)((15)*(10000000/4000.0)));
  3309                           
  3310                           ;incstack = 0
  3311  00F4CE  0E31               	movlw	49
  3312  00F4D0  6E04               	movwf	??_initLCD& (0+255),c
  3313  00F4D2  0EB2               	movlw	178
  3314  00F4D4                     u1577:
  3315  00F4D4  2EE8               	decfsz	wreg,f,c
  3316  00F4D6  D7FE               	bra	u1577
  3317  00F4D8  2E04               	decfsz	??_initLCD& (0+255),f,c
  3318  00F4DA  D7FC               	bra	u1577
  3319  00F4DC  D000               	nop2	
  3320                           
  3321                           ;lcd.c: 16: lcdInst(0b00110011);
  3322  00F4DE  0E33               	movlw	51
  3323  00F4E0  ECC1  F079         	call	_lcdInst
  3324                           
  3325                           ;lcd.c: 17: lcdInst(0b00110011);
  3326  00F4E4  0E33               	movlw	51
  3327  00F4E6  ECC1  F079         	call	_lcdInst
  3328                           
  3329                           ;lcd.c: 18: lcdInst(0b00110010);
  3330  00F4EA  0E32               	movlw	50
  3331  00F4EC  ECC1  F079         	call	_lcdInst
  3332                           
  3333                           ;lcd.c: 19: lcdInst(0b00101000);
  3334  00F4F0  0E28               	movlw	40
  3335  00F4F2  ECC1  F079         	call	_lcdInst
  3336                           
  3337                           ;lcd.c: 20: lcdInst(0b00001111);
  3338  00F4F6  0E0F               	movlw	15
  3339  00F4F8  ECC1  F079         	call	_lcdInst
  3340                           
  3341                           ;lcd.c: 21: lcdInst(0b00000110);
  3342  00F4FC  0E06               	movlw	6
  3343  00F4FE  ECC1  F079         	call	_lcdInst
  3344                           
  3345                           ;lcd.c: 22: lcdInst(0b00000001);
  3346  00F502  0E01               	movlw	1
  3347  00F504  ECC1  F079         	call	_lcdInst
  3348                           
  3349                           ;lcd.c: 23: _delay((unsigned long)((15)*(10000000/4000.0)));
  3350  00F508  0E31               	movlw	49
  3351  00F50A  6E04               	movwf	??_initLCD& (0+255),c
  3352  00F50C  0EB2               	movlw	178
  3353  00F50E                     u1587:
  3354  00F50E  2EE8               	decfsz	wreg,f,c
  3355  00F510  D7FE               	bra	u1587
  3356  00F512  2E04               	decfsz	??_initLCD& (0+255),f,c
  3357  00F514  D7FC               	bra	u1587
  3358  00F516  D000               	nop2	
  3359  00F518  0012               	return		;funcret
  3360  00F51A                     __end_of_initLCD:
  3361                           	opt stack 0
  3362                           tblptru	equ	0xFF8
  3363                           tblptrh	equ	0xFF7
  3364                           tblptrl	equ	0xFF6
  3365                           tablat	equ	0xFF5
  3366                           prodh	equ	0xFF4
  3367                           prodl	equ	0xFF3
  3368                           intcon	equ	0xFF2
  3369                           postinc0	equ	0xFEE
  3370                           wreg	equ	0xFE8
  3371                           indf2	equ	0xFDF
  3372                           postinc2	equ	0xFDE
  3373                           postdec2	equ	0xFDD
  3374                           fsr2h	equ	0xFDA
  3375                           fsr2l	equ	0xFD9
  3376                           status	equ	0xFD8
  3377                           
  3378 ;; *************** function _lcdInst *****************
  3379 ;; Defined at:
  3380 ;;		line 26 in file "../../../../AER201 pseudo code/lcd.c"
  3381 ;; Parameters:    Size  Location     Type
  3382 ;;  data            1    wreg     unsigned char 
  3383 ;; Auto vars:     Size  Location     Type
  3384 ;;  data            1    2[COMRAM] unsigned char 
  3385 ;; Return value:  Size  Location     Type
  3386 ;;                  1    wreg      void 
  3387 ;; Registers used:
  3388 ;;		wreg, status,2, status,0, cstack
  3389 ;; Tracked objects:
  3390 ;;		On entry : 0/0
  3391 ;;		On exit  : 0/0
  3392 ;;		Unchanged: 0/0
  3393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3394 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3395 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3396 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3397 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3398 ;;Total ram usage:        1 bytes
  3399 ;; Hardware stack levels used:    1
  3400 ;; Hardware stack levels required when called:    1
  3401 ;; This function calls:
  3402 ;;		_lcdNibble
  3403 ;; This function is called by:
  3404 ;;		_main
  3405 ;;		_printRTC
  3406 ;;		_initLCD
  3407 ;; This function uses a non-reentrant model
  3408 ;;
  3409                           
  3410                           	psect	text15
  3411  00F382                     __ptext15:
  3412                           	opt stack 0
  3413  00F382                     _lcdInst:
  3414                           	opt stack 28
  3415                           
  3416                           ;incstack = 0
  3417                           ;lcdInst@data stored from wreg
  3418  00F382  6E03               	movwf	lcdInst@data,c
  3419                           
  3420                           ;lcd.c: 27: LATDbits.LATD2 = 0;
  3421  00F384  948C               	bcf	3980,2,c	;volatile
  3422                           
  3423                           ;lcd.c: 28: lcdNibble(data);
  3424  00F386  5003               	movf	lcdInst@data,w,c
  3425  00F388  EC8D  F07A         	call	_lcdNibble
  3426  00F38C  0012               	return		;funcret
  3427  00F38E                     __end_of_lcdInst:
  3428                           	opt stack 0
  3429                           tblptru	equ	0xFF8
  3430                           tblptrh	equ	0xFF7
  3431                           tblptrl	equ	0xFF6
  3432                           tablat	equ	0xFF5
  3433                           prodh	equ	0xFF4
  3434                           prodl	equ	0xFF3
  3435                           intcon	equ	0xFF2
  3436                           postinc0	equ	0xFEE
  3437                           wreg	equ	0xFE8
  3438                           indf2	equ	0xFDF
  3439                           postinc2	equ	0xFDE
  3440                           postdec2	equ	0xFDD
  3441                           fsr2h	equ	0xFDA
  3442                           fsr2l	equ	0xFD9
  3443                           status	equ	0xFD8
  3444                           
  3445 ;; *************** function _lcdNibble *****************
  3446 ;; Defined at:
  3447 ;;		line 36 in file "../../../../AER201 pseudo code/lcd.c"
  3448 ;; Parameters:    Size  Location     Type
  3449 ;;  data            1    wreg     unsigned char 
  3450 ;; Auto vars:     Size  Location     Type
  3451 ;;  data            1    1[COMRAM] unsigned char 
  3452 ;;  temp            1    0[COMRAM] unsigned char 
  3453 ;; Return value:  Size  Location     Type
  3454 ;;                  1    wreg      void 
  3455 ;; Registers used:
  3456 ;;		wreg, status,2, status,0
  3457 ;; Tracked objects:
  3458 ;;		On entry : 0/0
  3459 ;;		On exit  : 0/0
  3460 ;;		Unchanged: 0/0
  3461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3462 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3463 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3464 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3465 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3466 ;;Total ram usage:        2 bytes
  3467 ;; Hardware stack levels used:    1
  3468 ;; This function calls:
  3469 ;;		Nothing
  3470 ;; This function is called by:
  3471 ;;		_lcdInst
  3472 ;;		_putch
  3473 ;; This function uses a non-reentrant model
  3474 ;;
  3475                           
  3476                           	psect	text16
  3477  00F51A                     __ptext16:
  3478                           	opt stack 0
  3479  00F51A                     _lcdNibble:
  3480                           	opt stack 28
  3481                           
  3482                           ;incstack = 0
  3483                           ;lcdNibble@data stored from wreg
  3484  00F51A  6E02               	movwf	lcdNibble@data,c
  3485                           
  3486                           ;lcd.c: 38: char temp = data & 0xF0;
  3487  00F51C  5002               	movf	lcdNibble@data,w,c
  3488  00F51E  0BF0               	andlw	240
  3489  00F520  6E01               	movwf	lcdNibble@temp,c
  3490                           
  3491                           ;lcd.c: 39: LATD = LATD & 0x0F;
  3492  00F522  508C               	movf	3980,w,c	;volatile
  3493  00F524  0B0F               	andlw	15
  3494  00F526  6E8C               	movwf	3980,c	;volatile
  3495                           
  3496                           ;lcd.c: 40: LATD = temp | LATD;
  3497  00F528  5001               	movf	lcdNibble@temp,w,c
  3498  00F52A  108C               	iorwf	3980,w,c	;volatile
  3499  00F52C  6E8C               	movwf	3980,c	;volatile
  3500                           
  3501                           ;lcd.c: 42: LATDbits.LATD3 = 0;
  3502  00F52E  968C               	bcf	3980,3,c	;volatile
  3503                           
  3504                           ;lcd.c: 43: _delay((unsigned long)((30)*(10000000/4000000.0)));
  3505  00F530  0E19               	movlw	25
  3506  00F532                     u1597:
  3507  00F532  2EE8               	decfsz	wreg,f,c
  3508  00F534  D7FE               	bra	u1597
  3509                           
  3510                           ;lcd.c: 44: LATDbits.LATD3 = 1;
  3511  00F536  868C               	bsf	3980,3,c	;volatile
  3512                           
  3513                           ;lcd.c: 45: _delay((unsigned long)((30)*(10000000/4000000.0)));
  3514  00F538  0E19               	movlw	25
  3515  00F53A                     u1607:
  3516  00F53A  2EE8               	decfsz	wreg,f,c
  3517  00F53C  D7FE               	bra	u1607
  3518                           
  3519                           ;lcd.c: 47: data = data << 4;
  3520  00F53E  3802               	swapf	lcdNibble@data,w,c
  3521  00F540  0BF0               	andlw	240
  3522  00F542  6E02               	movwf	lcdNibble@data,c
  3523                           
  3524                           ;lcd.c: 49: temp = data & 0xF0;
  3525  00F544  5002               	movf	lcdNibble@data,w,c
  3526  00F546  0BF0               	andlw	240
  3527  00F548  6E01               	movwf	lcdNibble@temp,c
  3528                           
  3529                           ;lcd.c: 50: LATD = LATD & 0x0F;
  3530  00F54A  508C               	movf	3980,w,c	;volatile
  3531  00F54C  0B0F               	andlw	15
  3532  00F54E  6E8C               	movwf	3980,c	;volatile
  3533                           
  3534                           ;lcd.c: 51: LATD = temp | LATD;
  3535  00F550  5001               	movf	lcdNibble@temp,w,c
  3536  00F552  108C               	iorwf	3980,w,c	;volatile
  3537  00F554  6E8C               	movwf	3980,c	;volatile
  3538                           
  3539                           ;lcd.c: 53: LATDbits.LATD3 = 0;
  3540  00F556  968C               	bcf	3980,3,c	;volatile
  3541                           
  3542                           ;lcd.c: 54: _delay((unsigned long)((30)*(10000000/4000000.0)));
  3543  00F558  0E19               	movlw	25
  3544  00F55A                     u1617:
  3545  00F55A  2EE8               	decfsz	wreg,f,c
  3546  00F55C  D7FE               	bra	u1617
  3547                           
  3548                           ;lcd.c: 55: LATDbits.LATD3 = 1;
  3549  00F55E  868C               	bsf	3980,3,c	;volatile
  3550                           
  3551                           ;lcd.c: 56: _delay((unsigned long)((30)*(10000000/4000000.0)));
  3552  00F560  0E19               	movlw	25
  3553  00F562                     u1627:
  3554  00F562  2EE8               	decfsz	wreg,f,c
  3555  00F564  D7FE               	bra	u1627
  3556  00F566  0012               	return		;funcret
  3557  00F568                     __end_of_lcdNibble:
  3558                           	opt stack 0
  3559                           tblptru	equ	0xFF8
  3560                           tblptrh	equ	0xFF7
  3561                           tblptrl	equ	0xFF6
  3562                           tablat	equ	0xFF5
  3563                           prodh	equ	0xFF4
  3564                           prodl	equ	0xFF3
  3565                           intcon	equ	0xFF2
  3566                           postinc0	equ	0xFEE
  3567                           wreg	equ	0xFE8
  3568                           indf2	equ	0xFDF
  3569                           postinc2	equ	0xFDE
  3570                           postdec2	equ	0xFDD
  3571                           fsr2h	equ	0xFDA
  3572                           fsr2l	equ	0xFD9
  3573                           status	equ	0xFD8
  3574                           
  3575 ;; *************** function _I2C_Master_Init *****************
  3576 ;; Defined at:
  3577 ;;		line 13 in file "../../../../AER201 pseudo code/I2C.c"
  3578 ;; Parameters:    Size  Location     Type
  3579 ;;  c               4   13[COMRAM] const unsigned long 
  3580 ;; Auto vars:     Size  Location     Type
  3581 ;;		None
  3582 ;; Return value:  Size  Location     Type
  3583 ;;                  1    wreg      void 
  3584 ;; Registers used:
  3585 ;;		wreg, status,2, status,0, cstack
  3586 ;; Tracked objects:
  3587 ;;		On entry : 0/0
  3588 ;;		On exit  : 0/0
  3589 ;;		Unchanged: 0/0
  3590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3591 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3592 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3593 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3594 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3595 ;;Total ram usage:        8 bytes
  3596 ;; Hardware stack levels used:    1
  3597 ;; Hardware stack levels required when called:    1
  3598 ;; This function calls:
  3599 ;;		___lldiv
  3600 ;; This function is called by:
  3601 ;;		_main
  3602 ;; This function uses a non-reentrant model
  3603 ;;
  3604                           
  3605                           	psect	text17
  3606  00F5BA                     __ptext17:
  3607                           	opt stack 0
  3608  00F5BA                     _I2C_Master_Init:
  3609                           	opt stack 29
  3610                           
  3611                           ;I2C.c: 16: SSPSTAT = 0b00000000;
  3612                           
  3613                           ;incstack = 0
  3614  00F5BA  0E00               	movlw	0
  3615  00F5BC  6EC7               	movwf	4039,c	;volatile
  3616                           
  3617                           ;I2C.c: 17: SSPCON1 = 0b00101000;
  3618  00F5BE  0E28               	movlw	40
  3619  00F5C0  6EC6               	movwf	4038,c	;volatile
  3620                           
  3621                           ;I2C.c: 18: SSPCON2 = 0b00000000;
  3622  00F5C2  0E00               	movlw	0
  3623  00F5C4  6EC5               	movwf	4037,c	;volatile
  3624                           
  3625                           ;I2C.c: 19: SSPADD = (10000000/(4*c))-1;
  3626  00F5C6  0E80               	movlw	128
  3627  00F5C8  6E01               	movwf	___lldiv@dividend,c
  3628  00F5CA  0E96               	movlw	150
  3629  00F5CC  6E02               	movwf	___lldiv@dividend+1,c
  3630  00F5CE  0E98               	movlw	152
  3631  00F5D0  6E03               	movwf	___lldiv@dividend+2,c
  3632  00F5D2  0E00               	movlw	0
  3633  00F5D4  6E04               	movwf	___lldiv@dividend+3,c
  3634  00F5D6  C00E  F012         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  3635  00F5DA  C00F  F013         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  3636  00F5DE  C010  F014         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  3637  00F5E2  C011  F015         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  3638  00F5E6  0E02               	movlw	2
  3639  00F5E8                     u1145:
  3640  00F5E8  90D8               	bcf	status,0,c
  3641  00F5EA  3612               	rlcf	??_I2C_Master_Init,f,c
  3642  00F5EC  3613               	rlcf	??_I2C_Master_Init+1,f,c
  3643  00F5EE  3614               	rlcf	??_I2C_Master_Init+2,f,c
  3644  00F5F0  3615               	rlcf	??_I2C_Master_Init+3,f,c
  3645  00F5F2  2EE8               	decfsz	wreg,f,c
  3646  00F5F4  D7F9               	goto	u1145
  3647  00F5F6  C012  F005         	movff	??_I2C_Master_Init,___lldiv@divisor
  3648  00F5FA  C013  F006         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  3649  00F5FE  C014  F007         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  3650  00F602  C015  F008         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  3651  00F606  EC0A  F07B         	call	___lldiv	;wreg free
  3652  00F60A  0401               	decf	?___lldiv,w,c
  3653  00F60C  6EC8               	movwf	4040,c	;volatile
  3654                           
  3655                           ;I2C.c: 20: TRISC3 = 1;
  3656  00F60E  8694               	bsf	3988,3,c	;volatile
  3657                           
  3658                           ;I2C.c: 21: TRISC4 = 1;
  3659  00F610  8894               	bsf	3988,4,c	;volatile
  3660  00F612  0012               	return		;funcret
  3661  00F614                     __end_of_I2C_Master_Init:
  3662                           	opt stack 0
  3663                           tblptru	equ	0xFF8
  3664                           tblptrh	equ	0xFF7
  3665                           tblptrl	equ	0xFF6
  3666                           tablat	equ	0xFF5
  3667                           prodh	equ	0xFF4
  3668                           prodl	equ	0xFF3
  3669                           intcon	equ	0xFF2
  3670                           postinc0	equ	0xFEE
  3671                           wreg	equ	0xFE8
  3672                           indf2	equ	0xFDF
  3673                           postinc2	equ	0xFDE
  3674                           postdec2	equ	0xFDD
  3675                           fsr2h	equ	0xFDA
  3676                           fsr2l	equ	0xFD9
  3677                           status	equ	0xFD8
  3678                           
  3679 ;; *************** function ___lldiv *****************
  3680 ;; Defined at:
  3681 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  3682 ;; Parameters:    Size  Location     Type
  3683 ;;  dividend        4    0[COMRAM] unsigned long 
  3684 ;;  divisor         4    4[COMRAM] unsigned long 
  3685 ;; Auto vars:     Size  Location     Type
  3686 ;;  quotient        4    8[COMRAM] unsigned long 
  3687 ;;  counter         1   12[COMRAM] unsigned char 
  3688 ;; Return value:  Size  Location     Type
  3689 ;;                  4    0[COMRAM] unsigned long 
  3690 ;; Registers used:
  3691 ;;		wreg, status,2, status,0
  3692 ;; Tracked objects:
  3693 ;;		On entry : 0/0
  3694 ;;		On exit  : 0/0
  3695 ;;		Unchanged: 0/0
  3696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3697 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3698 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3699 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3700 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3701 ;;Total ram usage:       13 bytes
  3702 ;; Hardware stack levels used:    1
  3703 ;; This function calls:
  3704 ;;		Nothing
  3705 ;; This function is called by:
  3706 ;;		_I2C_Master_Init
  3707 ;; This function uses a non-reentrant model
  3708 ;;
  3709                           
  3710                           	psect	text18
  3711  00F614                     __ptext18:
  3712                           	opt stack 0
  3713  00F614                     ___lldiv:
  3714                           	opt stack 29
  3715                           
  3716                           ;incstack = 0
  3717  00F614  0E00               	movlw	0
  3718  00F616  6E09               	movwf	___lldiv@quotient,c
  3719  00F618  0E00               	movlw	0
  3720  00F61A  6E0A               	movwf	___lldiv@quotient+1,c
  3721  00F61C  0E00               	movlw	0
  3722  00F61E  6E0B               	movwf	___lldiv@quotient+2,c
  3723  00F620  0E00               	movlw	0
  3724  00F622  6E0C               	movwf	___lldiv@quotient+3,c
  3725  00F624  5005               	movf	___lldiv@divisor,w,c
  3726  00F626  1006               	iorwf	___lldiv@divisor+1,w,c
  3727  00F628  1007               	iorwf	___lldiv@divisor+2,w,c
  3728  00F62A  1008               	iorwf	___lldiv@divisor+3,w,c
  3729  00F62C  B4D8               	btfsc	status,2,c
  3730  00F62E  D02A               	goto	l657
  3731  00F630  0E01               	movlw	1
  3732  00F632  6E0D               	movwf	___lldiv@counter,c
  3733  00F634  D006               	goto	l1633
  3734  00F636                     l1631:
  3735  00F636  90D8               	bcf	status,0,c
  3736  00F638  3605               	rlcf	___lldiv@divisor,f,c
  3737  00F63A  3606               	rlcf	___lldiv@divisor+1,f,c
  3738  00F63C  3607               	rlcf	___lldiv@divisor+2,f,c
  3739  00F63E  3608               	rlcf	___lldiv@divisor+3,f,c
  3740  00F640  2A0D               	incf	___lldiv@counter,f,c
  3741  00F642                     l1633:
  3742  00F642  AE08               	btfss	___lldiv@divisor+3,7,c
  3743  00F644  D7F8               	goto	l1631
  3744  00F646                     l1635:
  3745  00F646  90D8               	bcf	status,0,c
  3746  00F648  3609               	rlcf	___lldiv@quotient,f,c
  3747  00F64A  360A               	rlcf	___lldiv@quotient+1,f,c
  3748  00F64C  360B               	rlcf	___lldiv@quotient+2,f,c
  3749  00F64E  360C               	rlcf	___lldiv@quotient+3,f,c
  3750  00F650  5005               	movf	___lldiv@divisor,w,c
  3751  00F652  5C01               	subwf	___lldiv@dividend,w,c
  3752  00F654  5006               	movf	___lldiv@divisor+1,w,c
  3753  00F656  5802               	subwfb	___lldiv@dividend+1,w,c
  3754  00F658  5007               	movf	___lldiv@divisor+2,w,c
  3755  00F65A  5803               	subwfb	___lldiv@dividend+2,w,c
  3756  00F65C  5008               	movf	___lldiv@divisor+3,w,c
  3757  00F65E  5804               	subwfb	___lldiv@dividend+3,w,c
  3758  00F660  A0D8               	btfss	status,0,c
  3759  00F662  D009               	goto	l1643
  3760  00F664  5005               	movf	___lldiv@divisor,w,c
  3761  00F666  5E01               	subwf	___lldiv@dividend,f,c
  3762  00F668  5006               	movf	___lldiv@divisor+1,w,c
  3763  00F66A  5A02               	subwfb	___lldiv@dividend+1,f,c
  3764  00F66C  5007               	movf	___lldiv@divisor+2,w,c
  3765  00F66E  5A03               	subwfb	___lldiv@dividend+2,f,c
  3766  00F670  5008               	movf	___lldiv@divisor+3,w,c
  3767  00F672  5A04               	subwfb	___lldiv@dividend+3,f,c
  3768  00F674  8009               	bsf	___lldiv@quotient,0,c
  3769  00F676                     l1643:
  3770  00F676  90D8               	bcf	status,0,c
  3771  00F678  3208               	rrcf	___lldiv@divisor+3,f,c
  3772  00F67A  3207               	rrcf	___lldiv@divisor+2,f,c
  3773  00F67C  3206               	rrcf	___lldiv@divisor+1,f,c
  3774  00F67E  3205               	rrcf	___lldiv@divisor,f,c
  3775  00F680  2E0D               	decfsz	___lldiv@counter,f,c
  3776  00F682  D7E1               	goto	l1635
  3777  00F684                     l657:
  3778  00F684  C009  F001         	movff	___lldiv@quotient,?___lldiv
  3779  00F688  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  3780  00F68C  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  3781  00F690  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  3782  00F694  0012               	return		;funcret
  3783  00F696                     __end_of___lldiv:
  3784                           	opt stack 0
  3785                           tblptru	equ	0xFF8
  3786                           tblptrh	equ	0xFF7
  3787                           tblptrl	equ	0xFF6
  3788                           tablat	equ	0xFF5
  3789                           prodh	equ	0xFF4
  3790                           prodl	equ	0xFF3
  3791                           intcon	equ	0xFF2
  3792                           postinc0	equ	0xFEE
  3793                           wreg	equ	0xFE8
  3794                           indf2	equ	0xFDF
  3795                           postinc2	equ	0xFDE
  3796                           postdec2	equ	0xFDD
  3797                           fsr2h	equ	0xFDA
  3798                           fsr2l	equ	0xFD9
  3799                           status	equ	0xFD8
  3800                           tblptru	equ	0xFF8
  3801                           tblptrh	equ	0xFF7
  3802                           tblptrl	equ	0xFF6
  3803                           tablat	equ	0xFF5
  3804                           prodh	equ	0xFF4
  3805                           prodl	equ	0xFF3
  3806                           intcon	equ	0xFF2
  3807                           postinc0	equ	0xFEE
  3808                           wreg	equ	0xFE8
  3809                           indf2	equ	0xFDF
  3810                           postinc2	equ	0xFDE
  3811                           postdec2	equ	0xFDD
  3812                           fsr2h	equ	0xFDA
  3813                           fsr2l	equ	0xFD9
  3814                           status	equ	0xFD8
  3815                           
  3816                           	psect	rparam
  3817  0000                     tblptru	equ	0xFF8
  3818                           tblptrh	equ	0xFF7
  3819                           tblptrl	equ	0xFF6
  3820                           tablat	equ	0xFF5
  3821                           prodh	equ	0xFF4
  3822                           prodl	equ	0xFF3
  3823                           intcon	equ	0xFF2
  3824                           postinc0	equ	0xFEE
  3825                           wreg	equ	0xFE8
  3826                           indf2	equ	0xFDF
  3827                           postinc2	equ	0xFDE
  3828                           postdec2	equ	0xFDD
  3829                           fsr2h	equ	0xFDA
  3830                           fsr2l	equ	0xFD9
  3831                           status	equ	0xFD8


Data Sizes:
    Strings     336
    Constant    35
    Data        2
    BSS         7
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     59      68
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 25
		 -> STR_18(CODE[23]), STR_17(CODE[23]), STR_16(CODE[21]), STR_15(CODE[17]), 
		 -> STR_14(CODE[21]), STR_13(CODE[17]), STR_12(CODE[19]), STR_11(CODE[17]), 
		 -> STR_10(CODE[19]), STR_9(CODE[17]), STR_8(CODE[25]), STR_7(CODE[17]), 
		 -> STR_6(CODE[17]), STR_5(CODE[17]), STR_4(CODE[17]), STR_3(CODE[17]), 
		 -> STR_2(CODE[17]), STR_1(CODE[17]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printRTC
    _printRTC->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _I2C_Master_Init->___lldiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                24    24      0    9022
                                             35 COMRAM    24    24      0
                    _I2C_Master_Init
                            _initLCD
                            _lcdInst
                           _printRTC
                             _printf
                         _switchMenu
 ---------------------------------------------------------------------------------
 (1) _switchMenu                                           3     1      2     984
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _printRTC                                             1     1      0    3701
                                             34 COMRAM     1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              31    23      8    3299
                                             12 COMRAM    22    14      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     287
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     287
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     418
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     214
                                              1 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      2     2      0      30
                                              1 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0      90
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0      75
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     376
                                             13 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     290
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _printRTC
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
       _lcdNibble
   _switchMenu

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     3B      44       1       53.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      44      34        0.0%
DATA                 0      0      44       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Fri Feb 03 17:47:38 2017

                       l54 FAA8                         l57 FAB4                         l74 FBC2  
                       l84 FC42                         l93 FCB2                         l77 FBCE  
                       l87 FC4E                         l96 FCBE        ___wmul@multiplicand 0003  
              __CFG_BORV$3 000000               __CFG_CP0$OFF 000000               __CFG_CP1$OFF 000000  
             __CFG_CP2$OFF 000000               __CFG_CP3$OFF 000000                __CFG_OSC$HS 000000  
                      l102 FD22                        l111 FD92                        l120 FE02  
                      l105 FD2E                        l114 FD9E                        l123 FE0E  
                      l265 F830                        l187 F39A                        l710 F5B0  
                      l720 F47C                        l657 F684               __CFG_CPB$OFF 000000  
                      u340 F3E8                        _PEN 007E2A               __CFG_CPD$OFF 000000  
                      _SEN 007E28                        prod 000FF3                        wreg 000FE8  
             __CFG_LVP$OFF 000000               __CFG_WDT$OFF 000000                       l1157 F3EA  
                     l1503 F772                       l1521 F802                       l1443 F3C2  
                     l1603 F988                       l1461 F586                       l1605 F98E  
                     l1613 FA18                       l1533 F85E                       l1517 F7FE  
                     l1509 F7A0                       l1631 F636                       l1471 F5A6  
                     l1463 F58A                       l1607 F9D2                       l1615 FA28  
                     l1551 F8A8                       l1703 FA84                       l1633 F642  
                     l1481 F45A                       l1617 FA2E                       l1553 F8AC  
                     l1537 F878                       l1643 F676                       l1635 F646  
                     l1459 F57E                       l1483 F45E                       l1539 F87C  
                     l1619 FA36                       l1803 FCE2                       l1731 FB38  
                     l1715 FADC                       l1581 F92E                       l1493 F74E  
                     l1661 F4A4                       l1821 FD5E                       l1805 FCEE  
                     l1741 FB58                       l1717 FAFC                       l1487 F472  
                     l1479 F452                       l1575 F902                       l1567 F8D8  
                     l1663 F4AC                       l1751 FB78                       l1735 FB4C  
                     l1727 FB30                       l1719 FB08                       l1593 F95A  
                     l1569 F8E8                       l1497 F75E                       l1745 FB6C  
                     l1737 FB50                       l1595 F962                       l1587 F944  
                     l1579 F926                       l1499 F76C                       l1675 F6CA  
                     l1851 FE32                       l1835 FDC2                       l1819 FD52  
                     l1771 FBF4                       l1755 FB8C                       l1747 FB70  
                     l1685 F6EE                       l1669 F4C8                       l1861 FE56  
                     l1853 FE3E                       l1837 FDCE                       l1773 FBFE  
                     l1757 FB94                       l1599 F976                       l1679 F6D2  
                     l1863 FE5A                       l1855 FE44                       l1759 FB9E  
                     l1857 FE48                       l1867 FE7E                       l1787 FC72  
                     l1789 FC7E                       STR_1 FFDC                       STR_2 FFED  
                     STR_3 FF54                       STR_4 FF43                       STR_5 FFA9  
                     STR_6 FF76                       STR_7 FFBA                       STR_8 FEAE  
                     STR_9 FFCB                       u1145 F5E8                       _LATB 000F8A  
                     _LATC 000F8B                       _LATD 000F8C                       u1607 F53A  
                     u1617 F55A                       u1627 F562                       u1547 FB3E  
                     u1557 FB5E                       u1567 FB7E                       u1577 F4D4  
                     u1587 F50E                       u1597 F532                       _RCEN 007E2B  
                     _RSEN 007E29                main@numBats 0029                       _main FA50  
                     _keys FE8B                       _time 003C                       fsr2h 000FDA  
                     indf2 000FDF                       fsr2l 000FD9                       prodh 000FF4  
                     prodl 000FF3                       start 0000              __CFG_IESO$OFF 000000  
            __CFG_MCLRE$ON 000000               ___param_bank 000000           ?_I2C_Master_Init 000E  
         ?_I2C_Master_Read 0001           ?_I2C_Master_Wait 0001           ?_I2C_Master_Stop 0001  
                    ?_main 0001                      _ACKEN 007E2C                      _ACKDT 007E2D  
                    STR_10 FF1F                      STR_11 FF65                      STR_12 FF1F  
                    STR_13 FF98                      STR_14 FEF5                      STR_15 FF87  
                    STR_16 FF0A                      STR_17 FEC7                      STR_18 FEDE  
                    STR_19 FF32            __end_of___lldiv F696            __end_of___lwdiv F5BA  
          __end_of___lwmod F486                      _PORTB 000F81                      _TRISB 000F93  
                    _TRISC 000F94                      _TRISD 000F95              __CFG_PWRT$OFF 000000  
            __CFG_WRT0$OFF 000000              __CFG_WRT1$OFF 000000              __CFG_WRT2$OFF 000000  
            __CFG_WRT3$OFF 000000            __end_of_lcdInst F38E             __CFG_EBTR0$OFF 000000  
           __CFG_FCMEN$OFF 000000             __CFG_EBTR1$OFF 000000             __CFG_EBTR2$OFF 000000  
             main@keypress 0038             __CFG_EBTR3$OFF 000000              __CFG_WRTB$OFF 000000  
            __CFG_WRTC$OFF 000000              __CFG_WRTD$OFF 000000            __end_of_initLCD F51A  
           __CFG_EBTRB$OFF 000000            __end_of_dpowers FEA6            __end_of_isdigit F3CA  
                    _putch F38E                      main@i 0039                      tablat 000FF5  
                    status 000FD8             __CFG_PBADEN$ON 000000            __initialization F416  
             __end_of_main FE8A               __end_of_keys FE9C                     ??_main 0024  
            __activetblptr 000002          ?_I2C_Master_Start 0001          ?_I2C_Master_Write 0002  
       ??_I2C_Master_Start 0002                     _ADCON0 000FC2                     _ADCON1 000FC1  
       ??_I2C_Master_Write 0004                     ?_putch 0001                     _SSPADD 000FC8  
                   _TRISC3 007CA3                     _TRISC4 007CA4                     _SSPBUF 000FC9  
           __CFG_XINST$OFF 000000                     ___wmul F3F0             __CFG_STVREN$ON 000000  
                ??___lldiv 0009                  ??___lwdiv 0005                  ??___lwmod 000C  
                   clear_0 F434                  ??_lcdInst 0003                     _printf F744  
                ??_initLCD 0004               __pdataCOMRAM 0043                  ??_isdigit 0001  
         __end_of_printRTC F744               __mediumconst FE8A                     tblptrh 000FF7  
                   tblptrl 000FF6                     tblptru 000FF8            switchMenu@right 0001  
               __accesstop 0080    __end_of__initialization F43A              ___rparam_used 000001  
           __pcstackCOMRAM 0001              __end_of_putch F39A         __size_of_lcdNibble 004E  
                  ??_putch 0003                    ?___wmul 0001                    ?_printf 000D  
                  _SSPCON1 000FC6                    _SSPCON2 000FC5                    _SSPSTAT 000FC7  
        __end_of_lcdNibble F568                    __Hparam 0000                    __Lparam 0000  
                ?_printRTC 0001                    ___lldiv F614            __size_of___wmul 0026  
                  ___lwdiv F568                    ___lwmod F444                    __pcinit F416  
                  __ramtop 1000                    _lcdInst F382                    __ptext0 FA50  
                  __ptext1 F486                    __ptext2 F696                    __ptext3 F744  
                  __ptext4 F38E                    __ptext5 F3AC                    __ptext6 F3F0  
                  __ptext7 F444                    __ptext8 F568                    __ptext9 F378  
          __size_of_printf 030C                    _initLCD F4CE          __end_of_hexpowers FEAE  
                  _dpowers FE9C                    _isdigit F3AC   __size_of_I2C_Master_Init 005A  
 __size_of_I2C_Master_Read 0026   __size_of_I2C_Master_Wait 0012   __size_of_I2C_Master_Stop 0008  
                  main@min 0025                    main@sec 0027       end_of_initialization F43A  
            __Lmediumconst FE8A                 _screenMode 0043  __size_of_I2C_Master_Start 0008  
__size_of_I2C_Master_Write 000A            ___lldiv@divisor 0005            ___lldiv@counter 000D  
                  printf@c 0022                    printf@f 000D                 ??_printRTC 0023  
         I2C_Master_Init@c 000E           I2C_Master_Read@a 0002                    postdec2 000FDD  
                  postinc0 000FEE                    postinc2 000FDE                  _PORTBbits 000F81  
              printf@width 0020                 _switchMenu F486             __end_of___wmul F416  
            __pidataCOMRAM F366             __end_of_printf FA50        start_initialization F416  
        ??_I2C_Master_Init 0012          ??_I2C_Master_Read 0002          ??_I2C_Master_Wait 0001  
        ??_I2C_Master_Stop 0002           main@keypress_241 0034           main@keypress_233 0032  
         main@keypress_250 0037           main@keypress_228 0031           main@keypress_245 0035  
         main@keypress_237 0033           main@keypress_249 0036                   ??___wmul 0005  
         __CFG_LPT1OSC$OFF 000000             switchMenu@left 0003                   ??_printf 0015  
              __pbssCOMRAM 003C           _I2C_Master_Start F368           _I2C_Master_Write F378  
         ___lwdiv@dividend 0001          __CFG_CCP2MX$PORTC 000000                ?_switchMenu 0001  
            __pmediumconst FE8A                  _lcdNibble F51A                   ?___lldiv 0001  
                 ?___lwdiv 0001                   ?___lwmod 0008          __size_of_printRTC 00AE  
                 ?_lcdInst 0001                   ?_initLCD 0001                   ?_isdigit 0001  
                _hexpowers FEA6           ___lwdiv@quotient 0005             __size_of_putch 000C  
           ___wmul@product 0005                   _LATDbits 000F8C           __CFG_WDTPS$32768 000000  
               ?_lcdNibble 0001                  main@i_224 003A                  main@i_225 003B  
        ___wmul@multiplier 0001              lcdNibble@data 0002                 printf@flag 001F  
            lcdNibble@temp 0001                 printf@prec 001C                  main@numAA 002F  
                main@num9V 002D        __size_of_switchMenu 0048        I2C_Master_Read@temp 0003  
                 __Hrparam 0000                   __Lrparam 0000         __CFG_BOREN$SBORDIS 000000  
            switchMenu@key 0002           __size_of___lldiv 0082           __size_of___lwdiv 0052  
         __size_of___lwmod 0042                _isdigit$602 0002           __size_of_lcdInst 000C  
          _I2C_Master_Init F5BA            _I2C_Master_Read F3CA           __size_of_initLCD 004C  
          _I2C_Master_Wait F39A            _I2C_Master_Stop F370           __size_of_isdigit 001E  
          ___lwdiv@divisor 0003            ___lwdiv@counter 0007                   __ptext10 F370  
                 __ptext11 F368                   __ptext12 F3CA                   __ptext13 F39A  
                 __ptext14 F4CE                   __ptext15 F382                   __ptext16 F51A  
                 __ptext17 F5BA                   __ptext18 F614              __size_of_main 043A  
                 _printRTC F696                ??_lcdNibble 0001                  printRTC@i 0023  
                printf@idx 0019                  printf@val 001D                   main@numC 002B  
                putch@data 0003   __end_of_I2C_Master_Start F370   __end_of_I2C_Master_Write F382  
               _INTCONbits 000FF2                   isdigit@c 0003           ___lwmod@dividend 0008  
         ___lldiv@dividend 0001               ??_switchMenu 0003                   printf@ap 001A  
  __end_of_I2C_Master_Init F614    __end_of_I2C_Master_Read F3F0    __end_of_I2C_Master_Wait F3AC  
  __end_of_I2C_Master_Stop F378                lcdInst@data 0003           ___lldiv@quotient 0009  
        I2C_Master_Write@d 0002            ___lwmod@divisor 000A            ___lwmod@counter 000C  
       __end_of_switchMenu F4CE  
