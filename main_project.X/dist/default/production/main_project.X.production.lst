

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Mon Apr 10 04:27:41 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    41                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    63                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    64                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    65  0000                     
    66                           ; Version 1.40
    67                           ; Generated 01/12/2016 GMT
    68                           ; 
    69                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    70                           ; All rights reserved.
    71                           ; 
    72                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    73                           ; 
    74                           ; Redistribution and use in source and binary forms, with or without modification, are
    75                           ; permitted provided that the following conditions are met:
    76                           ; 
    77                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    78                           ;        conditions and the following disclaimer.
    79                           ; 
    80                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    81                           ;        of conditions and the following disclaimer in the documentation and/or other
    82                           ;        materials provided with the distribution.
    83                           ; 
    84                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    85                           ;        software without specific prior written permission.
    86                           ; 
    87                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    88                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    89                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    90                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    91                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    92                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    93                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    94                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    95                           ; 
    96                           ; 
    97                           ; Code-generator required, PIC18F4620 Definitions
    98                           ; 
    99                           ; SFR Addresses
   100  0000                     
   101                           	psect	idataBANK0
   102  0026BE                     __pidataBANK0:
   103                           	opt stack 0
   104                           
   105                           ;initializer for _screenMode
   106  0026BE  02                 	db	2
   107                           
   108                           	psect	mediumconst
   109  00FD9E                     __pmediumconst:
   110                           	opt stack 0
   111  00FD9E  00                 	db	0
   112  00FD9F                     _keys:
   113                           	opt stack 0
   114  00FD9F  31                 	db	49
   115  00FDA0  32                 	db	50
   116  00FDA1  33                 	db	51
   117  00FDA2  41                 	db	65
   118  00FDA3  34                 	db	52
   119  00FDA4  35                 	db	53
   120  00FDA5  36                 	db	54
   121  00FDA6  42                 	db	66
   122  00FDA7  37                 	db	55
   123  00FDA8  38                 	db	56
   124  00FDA9  39                 	db	57
   125  00FDAA  43                 	db	67
   126  00FDAB  2A                 	db	42
   127  00FDAC  30                 	db	48
   128  00FDAD  23                 	db	35
   129  00FDAE  44                 	db	68
   130  00FDAF  00                 	db	0
   131  00FDB0                     __end_of_keys:
   132                           	opt stack 0
   133  00FDB0                     _dpowers:
   134                           	opt stack 0
   135  00FDB0  0001               	dw	1
   136  00FDB2  000A               	dw	10
   137  00FDB4  0064               	dw	100
   138  00FDB6  03E8               	dw	1000
   139  00FDB8  2710               	dw	10000
   140  00FDBA                     __end_of_dpowers:
   141                           	opt stack 0
   142  00FDBA                     _hexpowers:
   143                           	opt stack 0
   144  00FDBA  0001               	dw	1
   145  00FDBC  0010               	dw	16
   146  00FDBE  0100               	dw	256
   147  00FDC0  1000               	dw	4096
   148  00FDC2                     __end_of_hexpowers:
   149                           	opt stack 0
   150  0000                     _ADRES	set	4035
   151  0000                     _TMR0	set	4054
   152  0000                     _TMR1	set	4046
   153  0000                     _ADCON0	set	4034
   154  0000                     _ADCON0bits	set	4034
   155  0000                     _ADCON1	set	4033
   156  0000                     _ADCON2	set	4032
   157  0000                     _CMCONbits	set	4020
   158  0000                     _CVRCON	set	4021
   159  0000                     _EEADR	set	4009
   160  0000                     _EEADRH	set	4010
   161  0000                     _EECON1bits	set	4006
   162  0000                     _EECON2	set	4007
   163  0000                     _EEDATA	set	4008
   164  0000                     _INTCONbits	set	4082
   165  0000                     _LATA	set	3977
   166  0000                     _LATAbits	set	3977
   167  0000                     _LATB	set	3978
   168  0000                     _LATBbits	set	3978
   169  0000                     _LATC	set	3979
   170  0000                     _LATCbits	set	3979
   171  0000                     _LATD	set	3980
   172  0000                     _LATDbits	set	3980
   173  0000                     _LATE	set	3981
   174  0000                     _LATEbits	set	3981
   175  0000                     _PIR2bits	set	4001
   176  0000                     _PORTB	set	3969
   177  0000                     _SSPADD	set	4040
   178  0000                     _SSPBUF	set	4041
   179  0000                     _SSPCON1	set	4038
   180  0000                     _SSPCON2	set	4037
   181  0000                     _SSPSTAT	set	4039
   182  0000                     _T0CON	set	4053
   183  0000                     _T0CONbits	set	4053
   184  0000                     _T1CON	set	4045
   185  0000                     _T1CONbits	set	4045
   186  0000                     _TRISA	set	3986
   187  0000                     _TRISB	set	3987
   188  0000                     _TRISC	set	3988
   189  0000                     _TRISD	set	3989
   190  0000                     _TRISE	set	3990
   191  0000                     _ACKDT	set	32301
   192  0000                     _ACKEN	set	32300
   193  0000                     _GIE	set	32663
   194  0000                     _INT1IE	set	32643
   195  0000                     _INT1IF	set	32640
   196  0000                     _PEIE	set	32662
   197  0000                     _PEN	set	32298
   198  0000                     _RCEN	set	32299
   199  0000                     _SEN	set	32296
   200  0000                     _TMR0IE	set	32661
   201  0000                     _TMR0IF	set	32658
   202  0000                     _TMR1IE	set	31976
   203  0000                     _TMR1IF	set	31984
   204  0000                     _TRISC3	set	31907
   205  0000                     _TRISC4	set	31908
   206  0000                     _nRBPU	set	32655
   207  00FDC2                     STR_8:
   208  00FDC2  25                 	db	37
   209  00FDC3  30                 	db	48	;'0'
   210  00FDC4  32                 	db	50	;'2'
   211  00FDC5  64                 	db	100	;'d'
   212  00FDC6  3A                 	db	58	;':'
   213  00FDC7  25                 	db	37
   214  00FDC8  30                 	db	48	;'0'
   215  00FDC9  32                 	db	50	;'2'
   216  00FDCA  64                 	db	100	;'d'
   217  00FDCB  20                 	db	32
   218  00FDCC  20                 	db	32
   219  00FDCD  20                 	db	32
   220  00FDCE  20                 	db	32
   221  00FDCF  20                 	db	32
   222  00FDD0  20                 	db	32
   223  00FDD1  20                 	db	32
   224  00FDD2  20                 	db	32
   225  00FDD3  20                 	db	32
   226  00FDD4  20                 	db	32
   227  00FDD5  20                 	db	32
   228  00FDD6  20                 	db	32
   229  00FDD7  20                 	db	32
   230  00FDD8  20                 	db	32
   231  00FDD9  20                 	db	32
   232  00FDDA  00                 	db	0
   233  00FDDB                     STR_20:
   234  00FDDB  25                 	db	37
   235  00FDDC  30                 	db	48	;'0'
   236  00FDDD  32                 	db	50	;'2'
   237  00FDDE  78                 	db	120	;'x'
   238  00FDDF  2F                 	db	47
   239  00FDE0  25                 	db	37
   240  00FDE1  30                 	db	48	;'0'
   241  00FDE2  32                 	db	50	;'2'
   242  00FDE3  78                 	db	120	;'x'
   243  00FDE4  2F                 	db	47
   244  00FDE5  25                 	db	37
   245  00FDE6  30                 	db	48	;'0'
   246  00FDE7  32                 	db	50	;'2'
   247  00FDE8  78                 	db	120	;'x'
   248  00FDE9  20                 	db	32
   249  00FDEA  20                 	db	32
   250  00FDEB  20                 	db	32
   251  00FDEC  20                 	db	32
   252  00FDED  20                 	db	32
   253  00FDEE  20                 	db	32
   254  00FDEF  20                 	db	32
   255  00FDF0  20                 	db	32
   256  00FDF1  00                 	db	0
   257  00FDF2                     STR_21:
   258  00FDF2  25                 	db	37
   259  00FDF3  30                 	db	48	;'0'
   260  00FDF4  32                 	db	50	;'2'
   261  00FDF5  78                 	db	120	;'x'
   262  00FDF6  3A                 	db	58	;':'
   263  00FDF7  25                 	db	37
   264  00FDF8  30                 	db	48	;'0'
   265  00FDF9  32                 	db	50	;'2'
   266  00FDFA  78                 	db	120	;'x'
   267  00FDFB  3A                 	db	58	;':'
   268  00FDFC  25                 	db	37
   269  00FDFD  30                 	db	48	;'0'
   270  00FDFE  32                 	db	50	;'2'
   271  00FDFF  78                 	db	120	;'x'
   272  00FE00  20                 	db	32
   273  00FE01  20                 	db	32
   274  00FE02  20                 	db	32
   275  00FE03  20                 	db	32
   276  00FE04  20                 	db	32
   277  00FE05  20                 	db	32
   278  00FE06  20                 	db	32
   279  00FE07  20                 	db	32
   280  00FE08  00                 	db	0
   281  00FE09                     STR_30:
   282  00FE09  44                 	db	68	;'D'
   283  00FE0A  41                 	db	65	;'A'
   284  00FE0B  54                 	db	84	;'T'
   285  00FE0C  45                 	db	69	;'E'
   286  00FE0D  3A                 	db	58	;':'
   287  00FE0E  20                 	db	32
   288  00FE0F  25                 	db	37
   289  00FE10  30                 	db	48	;'0'
   290  00FE11  32                 	db	50	;'2'
   291  00FE12  78                 	db	120	;'x'
   292  00FE13  2F                 	db	47
   293  00FE14  25                 	db	37
   294  00FE15  30                 	db	48	;'0'
   295  00FE16  32                 	db	50	;'2'
   296  00FE17  78                 	db	120	;'x'
   297  00FE18  2F                 	db	47
   298  00FE19  25                 	db	37
   299  00FE1A  30                 	db	48	;'0'
   300  00FE1B  32                 	db	50	;'2'
   301  00FE1C  78                 	db	120	;'x'
   302  00FE1D  20                 	db	32
   303  00FE1E  20                 	db	32
   304  00FE1F  00                 	db	0
   305  00FE20                     STR_31:
   306  00FE20  54                 	db	84	;'T'
   307  00FE21  49                 	db	73	;'I'
   308  00FE22  4D                 	db	77	;'M'
   309  00FE23  45                 	db	69	;'E'
   310  00FE24  3A                 	db	58	;':'
   311  00FE25  20                 	db	32
   312  00FE26  25                 	db	37
   313  00FE27  30                 	db	48	;'0'
   314  00FE28  32                 	db	50	;'2'
   315  00FE29  78                 	db	120	;'x'
   316  00FE2A  3A                 	db	58	;':'
   317  00FE2B  25                 	db	37
   318  00FE2C  30                 	db	48	;'0'
   319  00FE2D  32                 	db	50	;'2'
   320  00FE2E  78                 	db	120	;'x'
   321  00FE2F  3A                 	db	58	;':'
   322  00FE30  25                 	db	37
   323  00FE31  30                 	db	48	;'0'
   324  00FE32  32                 	db	50	;'2'
   325  00FE33  78                 	db	120	;'x'
   326  00FE34  20                 	db	32
   327  00FE35  20                 	db	32
   328  00FE36  00                 	db	0
   329  00FE37                     STR_37:
   330  00FE37  41                 	db	65	;'A'
   331  00FE38  41                 	db	65	;'A'
   332  00FE39  3A                 	db	58	;':'
   333  00FE3A  25                 	db	37
   334  00FE3B  30                 	db	48	;'0'
   335  00FE3C  32                 	db	50	;'2'
   336  00FE3D  64                 	db	100	;'d'
   337  00FE3E  20                 	db	32
   338  00FE3F  43                 	db	67	;'C'
   339  00FE40  3A                 	db	58	;':'
   340  00FE41  25                 	db	37
   341  00FE42  30                 	db	48	;'0'
   342  00FE43  32                 	db	50	;'2'
   343  00FE44  64                 	db	100	;'d'
   344  00FE45  20                 	db	32
   345  00FE46  39                 	db	57	;'9'
   346  00FE47  56                 	db	86	;'V'
   347  00FE48  3A                 	db	58	;':'
   348  00FE49  25                 	db	37
   349  00FE4A  30                 	db	48	;'0'
   350  00FE4B  32                 	db	50	;'2'
   351  00FE4C  64                 	db	100	;'d'
   352  00FE4D  00                 	db	0
   353  00FE4E                     STR_14:
   354  00FE4E  42                 	db	66	;'B'
   355  00FE4F  41                 	db	65	;'A'
   356  00FE50  54                 	db	84	;'T'
   357  00FE51  54                 	db	84	;'T'
   358  00FE52  45                 	db	69	;'E'
   359  00FE53  52                 	db	82	;'R'
   360  00FE54  49                 	db	73	;'I'
   361  00FE55  45                 	db	69	;'E'
   362  00FE56  53                 	db	83	;'S'
   363  00FE57  3A                 	db	58	;':'
   364  00FE58  20                 	db	32
   365  00FE59  25                 	db	37
   366  00FE5A  30                 	db	48	;'0'
   367  00FE5B  32                 	db	50	;'2'
   368  00FE5C  64                 	db	100	;'d'
   369  00FE5D  20                 	db	32
   370  00FE5E  20                 	db	32
   371  00FE5F  20                 	db	32
   372  00FE60  20                 	db	32
   373  00FE61  20                 	db	32
   374  00FE62  00                 	db	0
   375  00FE63                     STR_38:
   376  00FE63  58                 	db	88	;'X'
   377  00FE64  3A                 	db	58	;':'
   378  00FE65  25                 	db	37
   379  00FE66  30                 	db	48	;'0'
   380  00FE67  32                 	db	50	;'2'
   381  00FE68  64                 	db	100	;'d'
   382  00FE69  20                 	db	32
   383  00FE6A  54                 	db	84	;'T'
   384  00FE6B  49                 	db	73	;'I'
   385  00FE6C  4D                 	db	77	;'M'
   386  00FE6D  45                 	db	69	;'E'
   387  00FE6E  3A                 	db	58	;':'
   388  00FE6F  25                 	db	37
   389  00FE70  64                 	db	100	;'d'
   390  00FE71  73                 	db	115	;'s'
   391  00FE72  20                 	db	32
   392  00FE73  20                 	db	32
   393  00FE74  20                 	db	32
   394  00FE75  20                 	db	32
   395  00FE76  00                 	db	0
   396  00FE77                     STR_10:
   397  00FE77  42                 	db	66	;'B'
   398  00FE78  41                 	db	65	;'A'
   399  00FE79  54                 	db	84	;'T'
   400  00FE7A  54                 	db	84	;'T'
   401  00FE7B  45                 	db	69	;'E'
   402  00FE7C  52                 	db	82	;'R'
   403  00FE7D  49                 	db	73	;'I'
   404  00FE7E  45                 	db	69	;'E'
   405  00FE7F  53                 	db	83	;'S'
   406  00FE80  3A                 	db	58	;':'
   407  00FE81  20                 	db	32
   408  00FE82  25                 	db	37
   409  00FE83  30                 	db	48	;'0'
   410  00FE84  32                 	db	50	;'2'
   411  00FE85  64                 	db	100	;'d'
   412  00FE86  20                 	db	32
   413  00FE87  20                 	db	32
   414  00FE88  20                 	db	32
   415  00FE89  00                 	db	0
   416  00FE8A                     STR_39:
   417  00FE8A  30                 	db	48	;'0'
   418  00FE8B  31                 	db	49	;'1'
   419  00FE8C  32                 	db	50	;'2'
   420  00FE8D  33                 	db	51	;'3'
   421  00FE8E  34                 	db	52	;'4'
   422  00FE8F  35                 	db	53	;'5'
   423  00FE90  36                 	db	54	;'6'
   424  00FE91  37                 	db	55	;'7'
   425  00FE92  38                 	db	56	;'8'
   426  00FE93  39                 	db	57	;'9'
   427  00FE94  61                 	db	97	;'a'
   428  00FE95  62                 	db	98	;'b'
   429  00FE96  63                 	db	99	;'c'
   430  00FE97  64                 	db	100	;'d'
   431  00FE98  65                 	db	101	;'e'
   432  00FE99  66                 	db	102	;'f'
   433  00FE9A  00                 	db	0
   434  00FE9B                     STR_23:
   435  00FE9B  20                 	db	32
   436  00FE9C  20                 	db	32
   437  00FE9D  20                 	db	32
   438  00FE9E  20                 	db	32
   439  00FE9F  20                 	db	32
   440  00FEA0  20                 	db	32
   441  00FEA1  20                 	db	32
   442  00FEA2  20                 	db	32
   443  00FEA3  20                 	db	32
   444  00FEA4  20                 	db	32
   445  00FEA5  20                 	db	32
   446  00FEA6  20                 	db	32
   447  00FEA7  20                 	db	32
   448  00FEA8  20                 	db	32
   449  00FEA9  20                 	db	32
   450  00FEAA  20                 	db	32
   451  00FEAB  00                 	db	0
   452  00FEAC                     STR_11:
   453  00FEAC  23                 	db	35
   454  00FEAD  20                 	db	32
   455  00FEAE  4F                 	db	79	;'O'
   456  00FEAF  46                 	db	70	;'F'
   457  00FEB0  20                 	db	32
   458  00FEB1  43                 	db	67	;'C'
   459  00FEB2  20                 	db	32
   460  00FEB3  20                 	db	32
   461  00FEB4  20                 	db	32
   462  00FEB5  20                 	db	32
   463  00FEB6  20                 	db	32
   464  00FEB7  20                 	db	32
   465  00FEB8  20                 	db	32
   466  00FEB9  20                 	db	32
   467  00FEBA  20                 	db	32
   468  00FEBB  20                 	db	32
   469  00FEBC  00                 	db	0
   470  00FEBD                     STR_15:
   471  00FEBD  23                 	db	35
   472  00FEBE  20                 	db	32
   473  00FEBF  4F                 	db	79	;'O'
   474  00FEC0  46                 	db	70	;'F'
   475  00FEC1  20                 	db	32
   476  00FEC2  41                 	db	65	;'A'
   477  00FEC3  41                 	db	65	;'A'
   478  00FEC4  20                 	db	32
   479  00FEC5  20                 	db	32
   480  00FEC6  20                 	db	32
   481  00FEC7  20                 	db	32
   482  00FEC8  20                 	db	32
   483  00FEC9  20                 	db	32
   484  00FECA  20                 	db	32
   485  00FECB  20                 	db	32
   486  00FECC  20                 	db	32
   487  00FECD  00                 	db	0
   488  00FECE                     STR_13:
   489  00FECE  23                 	db	35
   490  00FECF  20                 	db	32
   491  00FED0  4F                 	db	79	;'O'
   492  00FED1  46                 	db	70	;'F'
   493  00FED2  20                 	db	32
   494  00FED3  39                 	db	57	;'9'
   495  00FED4  56                 	db	86	;'V'
   496  00FED5  20                 	db	32
   497  00FED6  20                 	db	32
   498  00FED7  20                 	db	32
   499  00FED8  20                 	db	32
   500  00FED9  20                 	db	32
   501  00FEDA  20                 	db	32
   502  00FEDB  20                 	db	32
   503  00FEDC  20                 	db	32
   504  00FEDD  20                 	db	32
   505  00FEDE  00                 	db	0
   506  00FEDF                     STR_4:
   507  00FEDF  25                 	db	37
   508  00FEE0  34                 	db	52	;'4'
   509  00FEE1  64                 	db	100	;'d'
   510  00FEE2  20                 	db	32
   511  00FEE3  25                 	db	37
   512  00FEE4  32                 	db	50	;'2'
   513  00FEE5  64                 	db	100	;'d'
   514  00FEE6  20                 	db	32
   515  00FEE7  20                 	db	32
   516  00FEE8  20                 	db	32
   517  00FEE9  20                 	db	32
   518  00FEEA  20                 	db	32
   519  00FEEB  20                 	db	32
   520  00FEEC  20                 	db	32
   521  00FEED  20                 	db	32
   522  00FEEE  20                 	db	32
   523  00FEEF  00                 	db	0
   524  00FEF0                     STR_19:
   525  00FEF0  4C                 	db	76	;'L'
   526  00FEF1  41                 	db	65	;'A'
   527  00FEF2  53                 	db	83	;'S'
   528  00FEF3  54                 	db	84	;'T'
   529  00FEF4  20                 	db	32
   530  00FEF5  52                 	db	82	;'R'
   531  00FEF6  55                 	db	85	;'U'
   532  00FEF7  4E                 	db	78	;'N'
   533  00FEF8  3A                 	db	58	;':'
   534  00FEF9  20                 	db	32
   535  00FEFA  20                 	db	32
   536  00FEFB  20                 	db	32
   537  00FEFC  20                 	db	32
   538  00FEFD  20                 	db	32
   539  00FEFE  20                 	db	32
   540  00FEFF  20                 	db	32
   541  00FF00  00                 	db	0
   542  00FF01                     STR_34:
   543  00FF01  25                 	db	37
   544  00FF02  30                 	db	48	;'0'
   545  00FF03  34                 	db	52	;'4'
   546  00FF04  64                 	db	100	;'d'
   547  00FF05  20                 	db	32
   548  00FF06  25                 	db	37
   549  00FF07  30                 	db	48	;'0'
   550  00FF08  34                 	db	52	;'4'
   551  00FF09  64                 	db	100	;'d'
   552  00FF0A  20                 	db	32
   553  00FF0B  20                 	db	32
   554  00FF0C  20                 	db	32
   555  00FF0D  20                 	db	32
   556  00FF0E  20                 	db	32
   557  00FF0F  20                 	db	32
   558  00FF10  20                 	db	32
   559  00FF11  00                 	db	0
   560  00FF12                     STR_9:
   561  00FF12  54                 	db	84	;'T'
   562  00FF13  4F                 	db	79	;'O'
   563  00FF14  54                 	db	84	;'T'
   564  00FF15  41                 	db	65	;'A'
   565  00FF16  4C                 	db	76	;'L'
   566  00FF17  20                 	db	32
   567  00FF18  23                 	db	35
   568  00FF19  20                 	db	32
   569  00FF1A  4F                 	db	79	;'O'
   570  00FF1B  46                 	db	70	;'F'
   571  00FF1C  20                 	db	32
   572  00FF1D  20                 	db	32
   573  00FF1E  20                 	db	32
   574  00FF1F  20                 	db	32
   575  00FF20  20                 	db	32
   576  00FF21  20                 	db	32
   577  00FF22  00                 	db	0
   578  00FF23                     STR_6:
   579  00FF23  54                 	db	84	;'T'
   580  00FF24  4F                 	db	79	;'O'
   581  00FF25  20                 	db	32
   582  00FF26  43                 	db	67	;'C'
   583  00FF27  4F                 	db	79	;'O'
   584  00FF28  4E                 	db	78	;'N'
   585  00FF29  54                 	db	84	;'T'
   586  00FF2A  49                 	db	73	;'I'
   587  00FF2B  4E                 	db	78	;'N'
   588  00FF2C  55                 	db	85	;'U'
   589  00FF2D  45                 	db	69	;'E'
   590  00FF2E  20                 	db	32
   591  00FF2F  20                 	db	32
   592  00FF30  20                 	db	32
   593  00FF31  20                 	db	32
   594  00FF32  20                 	db	32
   595  00FF33  00                 	db	0
   596  00FF34                     STR_17:
   597  00FF34  23                 	db	35
   598  00FF35  20                 	db	32
   599  00FF36  4F                 	db	79	;'O'
   600  00FF37  46                 	db	70	;'F'
   601  00FF38  20                 	db	32
   602  00FF39  44                 	db	68	;'D'
   603  00FF3A  52                 	db	82	;'R'
   604  00FF3B  41                 	db	65	;'A'
   605  00FF3C  49                 	db	73	;'I'
   606  00FF3D  4E                 	db	78	;'N'
   607  00FF3E  45                 	db	69	;'E'
   608  00FF3F  44                 	db	68	;'D'
   609  00FF40  20                 	db	32
   610  00FF41  20                 	db	32
   611  00FF42  20                 	db	32
   612  00FF43  20                 	db	32
   613  00FF44  00                 	db	0
   614  00FF45                     STR_5:
   615  00FF45  44                 	db	68	;'D'
   616  00FF46  4F                 	db	79	;'O'
   617  00FF47  4E                 	db	78	;'N'
   618  00FF48  45                 	db	69	;'E'
   619  00FF49  21                 	db	33
   620  00FF4A  20                 	db	32
   621  00FF4B  50                 	db	80	;'P'
   622  00FF4C  52                 	db	82	;'R'
   623  00FF4D  45                 	db	69	;'E'
   624  00FF4E  53                 	db	83	;'S'
   625  00FF4F  53                 	db	83	;'S'
   626  00FF50  20                 	db	32
   627  00FF51  2A                 	db	42
   628  00FF52  20                 	db	32
   629  00FF53  20                 	db	32
   630  00FF54  20                 	db	32
   631  00FF55  00                 	db	0
   632  00FF56                     STR_32:
   633  00FF56  52                 	db	82	;'R'
   634  00FF57  55                 	db	85	;'U'
   635  00FF58  4E                 	db	78	;'N'
   636  00FF59  4E                 	db	78	;'N'
   637  00FF5A  49                 	db	73	;'I'
   638  00FF5B  4E                 	db	78	;'N'
   639  00FF5C  47                 	db	71	;'G'
   640  00FF5D  3A                 	db	58	;':'
   641  00FF5E  20                 	db	32
   642  00FF5F  30                 	db	48	;'0'
   643  00FF60  30                 	db	48	;'0'
   644  00FF61  3A                 	db	58	;':'
   645  00FF62  30                 	db	48	;'0'
   646  00FF63  30                 	db	48	;'0'
   647  00FF64  20                 	db	32
   648  00FF65  20                 	db	32
   649  00FF66  00                 	db	0
   650  00FF67                     STR_7:
   651  00FF67  54                 	db	84	;'T'
   652  00FF68  4F                 	db	79	;'O'
   653  00FF69  54                 	db	84	;'T'
   654  00FF6A  41                 	db	65	;'A'
   655  00FF6B  4C                 	db	76	;'L'
   656  00FF6C  20                 	db	32
   657  00FF6D  52                 	db	82	;'R'
   658  00FF6E  55                 	db	85	;'U'
   659  00FF6F  4E                 	db	78	;'N'
   660  00FF70  20                 	db	32
   661  00FF71  54                 	db	84	;'T'
   662  00FF72  49                 	db	73	;'I'
   663  00FF73  4D                 	db	77	;'M'
   664  00FF74  45                 	db	69	;'E'
   665  00FF75  3A                 	db	58	;':'
   666  00FF76  20                 	db	32
   667  00FF77  00                 	db	0
   668  00FF78                     STR_3:
   669  00FF78  20                 	db	32
   670  00FF79  3C                 	db	60	;'<'
   671  00FF7A  54                 	db	84	;'T'
   672  00FF7B  4F                 	db	79	;'O'
   673  00FF7C  47                 	db	71	;'G'
   674  00FF7D  47                 	db	71	;'G'
   675  00FF7E  4C                 	db	76	;'L'
   676  00FF7F  45                 	db	69	;'E'
   677  00FF80  20                 	db	32
   678  00FF81  20                 	db	32
   679  00FF82  4C                 	db	76	;'L'
   680  00FF83  4F                 	db	79	;'O'
   681  00FF84  47                 	db	71	;'G'
   682  00FF85  53                 	db	83	;'S'
   683  00FF86  3E                 	db	62	;'>'
   684  00FF87  20                 	db	32
   685  00FF88  00                 	db	0
   686  00FF89                     STR_22:
   687  00FF89  50                 	db	80	;'P'
   688  00FF8A  45                 	db	69	;'E'
   689  00FF8B  52                 	db	82	;'R'
   690  00FF8C  4D                 	db	77	;'M'
   691  00FF8D  41                 	db	65	;'A'
   692  00FF8E  4E                 	db	78	;'N'
   693  00FF8F  45                 	db	69	;'E'
   694  00FF90  4E                 	db	78	;'N'
   695  00FF91  54                 	db	84	;'T'
   696  00FF92  20                 	db	32
   697  00FF93  4C                 	db	76	;'L'
   698  00FF94  4F                 	db	79	;'O'
   699  00FF95  47                 	db	71	;'G'
   700  00FF96  20                 	db	32
   701  00FF97  41                 	db	65	;'A'
   702  00FF98  3A                 	db	58	;':'
   703  00FF99  00                 	db	0
   704  00FF9A                     STR_24:
   705  00FF9A  50                 	db	80	;'P'
   706  00FF9B  45                 	db	69	;'E'
   707  00FF9C  52                 	db	82	;'R'
   708  00FF9D  4D                 	db	77	;'M'
   709  00FF9E  41                 	db	65	;'A'
   710  00FF9F  4E                 	db	78	;'N'
   711  00FFA0  45                 	db	69	;'E'
   712  00FFA1  4E                 	db	78	;'N'
   713  00FFA2  54                 	db	84	;'T'
   714  00FFA3  20                 	db	32
   715  00FFA4  4C                 	db	76	;'L'
   716  00FFA5  4F                 	db	79	;'O'
   717  00FFA6  47                 	db	71	;'G'
   718  00FFA7  20                 	db	32
   719  00FFA8  42                 	db	66	;'B'
   720  00FFA9  3A                 	db	58	;':'
   721  00FFAA  00                 	db	0
   722  00FFAB                     STR_26:
   723  00FFAB  50                 	db	80	;'P'
   724  00FFAC  45                 	db	69	;'E'
   725  00FFAD  52                 	db	82	;'R'
   726  00FFAE  4D                 	db	77	;'M'
   727  00FFAF  41                 	db	65	;'A'
   728  00FFB0  4E                 	db	78	;'N'
   729  00FFB1  45                 	db	69	;'E'
   730  00FFB2  4E                 	db	78	;'N'
   731  00FFB3  54                 	db	84	;'T'
   732  00FFB4  20                 	db	32
   733  00FFB5  4C                 	db	76	;'L'
   734  00FFB6  4F                 	db	79	;'O'
   735  00FFB7  47                 	db	71	;'G'
   736  00FFB8  20                 	db	32
   737  00FFB9  43                 	db	67	;'C'
   738  00FFBA  3A                 	db	58	;':'
   739  00FFBB  00                 	db	0
   740  00FFBC                     STR_28:
   741  00FFBC  50                 	db	80	;'P'
   742  00FFBD  45                 	db	69	;'E'
   743  00FFBE  52                 	db	82	;'R'
   744  00FFBF  4D                 	db	77	;'M'
   745  00FFC0  41                 	db	65	;'A'
   746  00FFC1  4E                 	db	78	;'N'
   747  00FFC2  45                 	db	69	;'E'
   748  00FFC3  4E                 	db	78	;'N'
   749  00FFC4  54                 	db	84	;'T'
   750  00FFC5  20                 	db	32
   751  00FFC6  4C                 	db	76	;'L'
   752  00FFC7  4F                 	db	79	;'O'
   753  00FFC8  47                 	db	71	;'G'
   754  00FFC9  20                 	db	32
   755  00FFCA  44                 	db	68	;'D'
   756  00FFCB  3A                 	db	58	;':'
   757  00FFCC  00                 	db	0
   758  00FFCD                     STR_2:
   759  00FFCD  3C                 	db	60	;'<'
   760  00FFCE  20                 	db	32
   761  00FFCF  54                 	db	84	;'T'
   762  00FFD0  4F                 	db	79	;'O'
   763  00FFD1  47                 	db	71	;'G'
   764  00FFD2  47                 	db	71	;'G'
   765  00FFD3  4C                 	db	76	;'L'
   766  00FFD4  45                 	db	69	;'E'
   767  00FFD5  20                 	db	32
   768  00FFD6  20                 	db	32
   769  00FFD7  4C                 	db	76	;'L'
   770  00FFD8  4F                 	db	79	;'O'
   771  00FFD9  47                 	db	71	;'G'
   772  00FFDA  53                 	db	83	;'S'
   773  00FFDB  20                 	db	32
   774  00FFDC  3E                 	db	62	;'>'
   775  00FFDD  00                 	db	0
   776  00FFDE                     STR_1:
   777  00FFDE  50                 	db	80	;'P'
   778  00FFDF  52                 	db	82	;'R'
   779  00FFE0  45                 	db	69	;'E'
   780  00FFE1  53                 	db	83	;'S'
   781  00FFE2  53                 	db	83	;'S'
   782  00FFE3  20                 	db	32
   783  00FFE4  2A                 	db	42
   784  00FFE5  20                 	db	32
   785  00FFE6  54                 	db	84	;'T'
   786  00FFE7  4F                 	db	79	;'O'
   787  00FFE8  20                 	db	32
   788  00FFE9  53                 	db	83	;'S'
   789  00FFEA  54                 	db	84	;'T'
   790  00FFEB  41                 	db	65	;'A'
   791  00FFEC  52                 	db	82	;'R'
   792  00FFED  54                 	db	84	;'T'
   793  00FFEE  00                 	db	0
   794  00FFEF                     STR_33:
   795  00FFEF  25                 	db	37
   796  00FFF0  30                 	db	48	;'0'
   797  00FFF1  34                 	db	52	;'4'
   798  00FFF2  64                 	db	100	;'d'
   799  00FFF3  20                 	db	32
   800  00FFF4  25                 	db	37
   801  00FFF5  30                 	db	48	;'0'
   802  00FFF6  34                 	db	52	;'4'
   803  00FFF7  64                 	db	100	;'d'
   804  00FFF8  20                 	db	32
   805  00FFF9  25                 	db	37
   806  00FFFA  30                 	db	48	;'0'
   807  00FFFB  34                 	db	52	;'4'
   808  00FFFC  64                 	db	100	;'d'
   809  00FFFD  00                 	db	0
   810  0000                     
   811                           ; #config settings
   812  00FFFE  00                 	db	0	; dummy byte at the end
   813  0000                     
   814                           	psect	cinit
   815  002468                     __pcinit:
   816                           	opt stack 0
   817  002468                     start_initialization:
   818                           	opt stack 0
   819  002468                     __initialization:
   820                           	opt stack 0
   821                           
   822                           ; Initialize objects allocated to BANK0 (1 bytes)
   823                           ; load TBLPTR registers with __pidataBANK0
   824  002468  0EBE               	movlw	low __pidataBANK0
   825  00246A  6EF6               	movwf	tblptrl,c
   826  00246C  0E26               	movlw	high __pidataBANK0
   827  00246E  6EF7               	movwf	tblptrh,c
   828  002470  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   829  002472  6EF8               	movwf	tblptru,c
   830  002474  0009               	tblrd		*+	;fetch initializer
   831  002476  CFF5 F0DC          	movff	tablat,__pdataBANK0
   832                           
   833                           ; Clear objects allocated to BANK0 (43 bytes)
   834  00247A  EE00  F0B1         	lfsr	0,__pbssBANK0
   835  00247E  0E2B               	movlw	43
   836  002480                     clear_0:
   837  002480  6AEE               	clrf	postinc0,c
   838  002482  06E8               	decf	wreg,f,c
   839  002484  E1FD               	bnz	clear_0
   840                           
   841                           ; Clear objects allocated to COMRAM (8 bytes)
   842  002486  EE00  F047         	lfsr	0,__pbssCOMRAM
   843  00248A  0E08               	movlw	8
   844  00248C                     clear_1:
   845  00248C  6AEE               	clrf	postinc0,c
   846  00248E  06E8               	decf	wreg,f,c
   847  002490  E1FD               	bnz	clear_1
   848  002492                     end_of_initialization:
   849                           	opt stack 0
   850  002492                     __end_of__initialization:
   851                           	opt stack 0
   852  002492  904F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   853  002494  924F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   854  002496  0E00               	movlw	low (__Lmediumconst shr (0+16))
   855  002498  6EF8               	movwf	tblptru,c
   856  00249A  0100               	movlb	0
   857  00249C  EF09  F000         	goto	_main	;jump to C main() function
   858                           tblptru	equ	0xFF8
   859                           tblptrh	equ	0xFF7
   860                           tblptrl	equ	0xFF6
   861                           tablat	equ	0xFF5
   862                           postinc0	equ	0xFEE
   863                           wreg	equ	0xFE8
   864                           
   865                           	psect	bssCOMRAM
   866  000047                     __pbssCOMRAM:
   867                           	opt stack 0
   868  000047                     _count_2ms:
   869                           	opt stack 0
   870  000047                     	ds	2
   871  000049                     _doneTimer:
   872                           	opt stack 0
   873  000049                     	ds	1
   874  00004A                     _opTimer:
   875                           	opt stack 0
   876  00004A                     	ds	1
   877  00004B                     _solOnTimer:
   878                           	opt stack 0
   879  00004B                     	ds	1
   880  00004C                     _sorting:
   881                           	opt stack 0
   882  00004C                     	ds	1
   883  00004D                     _step1:
   884                           	opt stack 0
   885  00004D                     	ds	1
   886  00004E                     _step2:
   887                           	opt stack 0
   888  00004E                     	ds	1
   889                           tblptru	equ	0xFF8
   890                           tblptrh	equ	0xFF7
   891                           tblptrl	equ	0xFF6
   892                           tablat	equ	0xFF5
   893                           postinc0	equ	0xFEE
   894                           wreg	equ	0xFE8
   895                           
   896                           	psect	bssBANK0
   897  0000B1                     __pbssBANK0:
   898                           	opt stack 0
   899  0000B1                     _lastRunRTC:
   900                           	opt stack 0
   901  0000B1                     	ds	7
   902  0000B8                     _realTime:
   903                           	opt stack 0
   904  0000B8                     	ds	7
   905  0000BF                     _plat1Left:
   906                           	opt stack 0
   907  0000BF                     	ds	2
   908  0000C1                     _plat1Right:
   909                           	opt stack 0
   910  0000C1                     	ds	2
   911  0000C3                     _plat2Left:
   912                           	opt stack 0
   913  0000C3                     	ds	2
   914  0000C5                     _plat2Right:
   915                           	opt stack 0
   916  0000C5                     	ds	2
   917  0000C7                     _turn1BackLeft:
   918                           	opt stack 0
   919  0000C7                     	ds	2
   920  0000C9                     _turn1BackRight:
   921                           	opt stack 0
   922  0000C9                     	ds	2
   923  0000CB                     _turn2BackLeft:
   924                           	opt stack 0
   925  0000CB                     	ds	2
   926  0000CD                     _turn2BackRight:
   927                           	opt stack 0
   928  0000CD                     	ds	2
   929  0000CF                     _count9V:
   930                           	opt stack 0
   931  0000CF                     	ds	1
   932  0000D0                     _countAA:
   933                           	opt stack 0
   934  0000D0                     	ds	1
   935  0000D1                     _countC:
   936                           	opt stack 0
   937  0000D1                     	ds	1
   938  0000D2                     _countDrain:
   939                           	opt stack 0
   940  0000D2                     	ds	1
   941  0000D3                     _doubleAA:
   942                           	opt stack 0
   943  0000D3                     	ds	1
   944  0000D4                     _min:
   945                           	opt stack 0
   946  0000D4                     	ds	1
   947  0000D5                     _num9V:
   948                           	opt stack 0
   949  0000D5                     	ds	1
   950  0000D6                     _numAA:
   951                           	opt stack 0
   952  0000D6                     	ds	1
   953  0000D7                     _numBats:
   954                           	opt stack 0
   955  0000D7                     	ds	1
   956  0000D8                     _numC:
   957                           	opt stack 0
   958  0000D8                     	ds	1
   959  0000D9                     _numDrain:
   960                           	opt stack 0
   961  0000D9                     	ds	1
   962  0000DA                     _sec:
   963                           	opt stack 0
   964  0000DA                     	ds	1
   965  0000DB                     _startGear:
   966                           	opt stack 0
   967  0000DB                     	ds	1
   968                           tblptru	equ	0xFF8
   969                           tblptrh	equ	0xFF7
   970                           tblptrl	equ	0xFF6
   971                           tablat	equ	0xFF5
   972                           postinc0	equ	0xFEE
   973                           wreg	equ	0xFE8
   974                           
   975                           	psect	dataBANK0
   976  0000DC                     __pdataBANK0:
   977                           	opt stack 0
   978  0000DC                     _screenMode:
   979                           	opt stack 0
   980  0000DC                     	ds	1
   981                           tblptru	equ	0xFF8
   982                           tblptrh	equ	0xFF7
   983                           tblptrl	equ	0xFF6
   984                           tablat	equ	0xFF5
   985                           postinc0	equ	0xFEE
   986                           wreg	equ	0xFE8
   987                           
   988                           	psect	cstackBANK0
   989  000080                     __pcstackBANK0:
   990                           	opt stack 0
   991  000080                     ??_printf:
   992                           
   993                           ; 1 bytes @ 0x0
   994  000080                     	ds	4
   995  000084                     printf@idx:
   996                           	opt stack 0
   997                           
   998                           ; 1 bytes @ 0x4
   999  000084                     	ds	1
  1000  000085                     printf@ap:
  1001                           	opt stack 0
  1002                           
  1003                           ; 2 bytes @ 0x5
  1004  000085                     	ds	2
  1005  000087                     printf@prec:
  1006                           	opt stack 0
  1007                           
  1008                           ; 1 bytes @ 0x7
  1009  000087                     	ds	1
  1010  000088                     printf@val:
  1011                           	opt stack 0
  1012                           
  1013                           ; 2 bytes @ 0x8
  1014  000088                     	ds	2
  1015  00008A                     printf@flag:
  1016                           	opt stack 0
  1017                           
  1018                           ; 1 bytes @ 0xA
  1019  00008A                     	ds	1
  1020  00008B                     printf@width:
  1021                           	opt stack 0
  1022                           
  1023                           ; 2 bytes @ 0xB
  1024  00008B                     	ds	2
  1025  00008D                     printf@c:
  1026                           	opt stack 0
  1027                           
  1028                           ; 1 bytes @ 0xD
  1029  00008D                     	ds	1
  1030  00008E                     testBatteries@volt1:
  1031                           	opt stack 0
  1032  00008E                     show_log@log_address:
  1033                           	opt stack 0
  1034                           
  1035                           ; 2 bytes @ 0xE
  1036  00008E                     	ds	2
  1037  000090                     show_log@currScreen:
  1038                           	opt stack 0
  1039  000090                     testBatteries@volt3:
  1040                           	opt stack 0
  1041                           
  1042                           ; 2 bytes @ 0x10
  1043  000090                     	ds	1
  1044  000091                     show_log@total_num:
  1045                           	opt stack 0
  1046                           
  1047                           ; 2 bytes @ 0x11
  1048  000091                     	ds	1
  1049  000092                     testBatteries@volt2:
  1050                           	opt stack 0
  1051                           
  1052                           ; 2 bytes @ 0x12
  1053  000092                     	ds	1
  1054  000093                     show_log@AA_num:
  1055                           	opt stack 0
  1056                           
  1057                           ; 2 bytes @ 0x13
  1058  000093                     	ds	1
  1059  000094                     testBatteries@volt4:
  1060                           	opt stack 0
  1061                           
  1062                           ; 2 bytes @ 0x14
  1063  000094                     	ds	1
  1064  000095                     show_log@C_num:
  1065                           	opt stack 0
  1066                           
  1067                           ; 2 bytes @ 0x15
  1068  000095                     	ds	1
  1069  000096                     testBatteries@volt5:
  1070                           	opt stack 0
  1071                           
  1072                           ; 2 bytes @ 0x16
  1073  000096                     	ds	1
  1074  000097                     show_log@Nine_num:
  1075                           	opt stack 0
  1076                           
  1077                           ; 2 bytes @ 0x17
  1078  000097                     	ds	2
  1079  000099                     show_log@Drain_num:
  1080                           	opt stack 0
  1081                           
  1082                           ; 2 bytes @ 0x19
  1083  000099                     	ds	2
  1084  00009B                     show_log@elapsed_time:
  1085                           	opt stack 0
  1086                           
  1087                           ; 2 bytes @ 0x1B
  1088  00009B                     	ds	2
  1089  00009D                     show_log@year:
  1090                           	opt stack 0
  1091                           
  1092                           ; 1 bytes @ 0x1D
  1093  00009D                     	ds	1
  1094  00009E                     show_log@month:
  1095                           	opt stack 0
  1096                           
  1097                           ; 1 bytes @ 0x1E
  1098  00009E                     	ds	1
  1099  00009F                     show_log@day:
  1100                           	opt stack 0
  1101                           
  1102                           ; 1 bytes @ 0x1F
  1103  00009F                     	ds	1
  1104  0000A0                     show_log@hour:
  1105                           	opt stack 0
  1106                           
  1107                           ; 1 bytes @ 0x20
  1108  0000A0                     	ds	1
  1109  0000A1                     show_log@minute:
  1110                           	opt stack 0
  1111                           
  1112                           ; 1 bytes @ 0x21
  1113  0000A1                     	ds	1
  1114  0000A2                     show_log@second:
  1115                           	opt stack 0
  1116                           
  1117                           ; 1 bytes @ 0x22
  1118  0000A2                     	ds	1
  1119  0000A3                     show_log@i:
  1120                           	opt stack 0
  1121                           
  1122                           ; 1 bytes @ 0x23
  1123  0000A3                     	ds	1
  1124  0000A4                     show_log@i_867:
  1125                           	opt stack 0
  1126                           
  1127                           ; 1 bytes @ 0x24
  1128  0000A4                     	ds	1
  1129  0000A5                     show_log@i_870:
  1130                           	opt stack 0
  1131                           
  1132                           ; 1 bytes @ 0x25
  1133  0000A5                     	ds	1
  1134  0000A6                     show_log@address:
  1135                           	opt stack 0
  1136                           
  1137                           ; 2 bytes @ 0x26
  1138  0000A6                     	ds	2
  1139  0000A8                     ??_main:
  1140                           
  1141                           ; 1 bytes @ 0x28
  1142  0000A8                     	ds	2
  1143  0000AA                     main@i:
  1144                           	opt stack 0
  1145                           
  1146                           ; 1 bytes @ 0x2A
  1147  0000AA                     	ds	1
  1148  0000AB                     main@i_707:
  1149                           	opt stack 0
  1150                           
  1151                           ; 1 bytes @ 0x2B
  1152  0000AB                     	ds	1
  1153  0000AC                     main@i_754:
  1154                           	opt stack 0
  1155                           
  1156                           ; 1 bytes @ 0x2C
  1157  0000AC                     	ds	1
  1158  0000AD                     main@i_756:
  1159                           	opt stack 0
  1160                           
  1161                           ; 1 bytes @ 0x2D
  1162  0000AD                     	ds	1
  1163  0000AE                     main@i_768:
  1164                           	opt stack 0
  1165                           
  1166                           ; 1 bytes @ 0x2E
  1167  0000AE                     	ds	1
  1168  0000AF                     main@steps:
  1169                           	opt stack 0
  1170                           
  1171                           ; 1 bytes @ 0x2F
  1172  0000AF                     	ds	1
  1173  0000B0                     main@steps_729:
  1174                           	opt stack 0
  1175                           
  1176                           ; 1 bytes @ 0x30
  1177  0000B0                     	ds	1
  1178                           tblptru	equ	0xFF8
  1179                           tblptrh	equ	0xFF7
  1180                           tblptrl	equ	0xFF6
  1181                           tablat	equ	0xFF5
  1182                           postinc0	equ	0xFEE
  1183                           wreg	equ	0xFE8
  1184                           
  1185                           	psect	cstackCOMRAM
  1186  000001                     __pcstackCOMRAM:
  1187                           	opt stack 0
  1188  000001                     ??i2_I2C_Master_Wait:
  1189  000001                     ??i2_isdigit:
  1190  000001                     ?i2_next_address:
  1191                           	opt stack 0
  1192  000001                     ?i2___wmul:
  1193                           	opt stack 0
  1194  000001                     ?i2___awdiv:
  1195                           	opt stack 0
  1196  000001                     ?i2___awmod:
  1197                           	opt stack 0
  1198  000001                     ?i2___lwdiv:
  1199                           	opt stack 0
  1200  000001                     i2lcdNibble@temp:
  1201                           	opt stack 0
  1202  000001                     i2Eeprom_ReadByte@address:
  1203                           	opt stack 0
  1204  000001                     i2Eeprom_WriteByte@address:
  1205                           	opt stack 0
  1206  000001                     i2next_address@address:
  1207                           	opt stack 0
  1208  000001                     i2___wmul@multiplier:
  1209                           	opt stack 0
  1210  000001                     i2___awdiv@dividend:
  1211                           	opt stack 0
  1212  000001                     i2___awmod@dividend:
  1213                           	opt stack 0
  1214  000001                     i2___lwdiv@dividend:
  1215                           	opt stack 0
  1216                           
  1217                           ; 2 bytes @ 0x0
  1218  000001                     	ds	1
  1219  000002                     i2I2C_Master_Read@a:
  1220                           	opt stack 0
  1221  000002                     i2lcdNibble@data:
  1222                           	opt stack 0
  1223  000002                     i2_isdigit$1124:
  1224                           	opt stack 0
  1225  000002                     i2I2C_Master_Write@d:
  1226                           	opt stack 0
  1227                           
  1228                           ; 2 bytes @ 0x1
  1229  000002                     	ds	1
  1230  000003                     i2I2C_Master_Read@temp:
  1231                           	opt stack 0
  1232  000003                     i2lcdInst@data:
  1233                           	opt stack 0
  1234  000003                     i2putch@data:
  1235                           	opt stack 0
  1236  000003                     i2Eeprom_WriteByte@data:
  1237                           	opt stack 0
  1238  000003                     i2isdigit@c:
  1239                           	opt stack 0
  1240  000003                     i2___wmul@multiplicand:
  1241                           	opt stack 0
  1242  000003                     i2___awdiv@divisor:
  1243                           	opt stack 0
  1244  000003                     i2___awmod@divisor:
  1245                           	opt stack 0
  1246  000003                     i2___lwdiv@divisor:
  1247                           	opt stack 0
  1248                           
  1249                           ; 2 bytes @ 0x2
  1250  000003                     	ds	1
  1251  000004                     
  1252                           ; 1 bytes @ 0x3
  1253  000004                     	ds	1
  1254  000005                     i2___awdiv@counter:
  1255                           	opt stack 0
  1256  000005                     i2___awmod@counter:
  1257                           	opt stack 0
  1258  000005                     i2___wmul@product:
  1259                           	opt stack 0
  1260  000005                     i2___lwdiv@quotient:
  1261                           	opt stack 0
  1262                           
  1263                           ; 2 bytes @ 0x4
  1264  000005                     	ds	1
  1265  000006                     i2___awdiv@sign:
  1266                           	opt stack 0
  1267  000006                     i2___awmod@sign:
  1268                           	opt stack 0
  1269                           
  1270                           ; 1 bytes @ 0x5
  1271  000006                     	ds	1
  1272  000007                     i2___lwdiv@counter:
  1273                           	opt stack 0
  1274  000007                     i2___awdiv@quotient:
  1275                           	opt stack 0
  1276                           
  1277                           ; 2 bytes @ 0x6
  1278  000007                     	ds	1
  1279  000008                     ?i2___lwmod:
  1280                           	opt stack 0
  1281  000008                     i2___lwmod@dividend:
  1282                           	opt stack 0
  1283                           
  1284                           ; 2 bytes @ 0x7
  1285  000008                     	ds	1
  1286  000009                     i2stopOperation@address_code:
  1287                           	opt stack 0
  1288                           
  1289                           ; 1 bytes @ 0x8
  1290  000009                     	ds	1
  1291  00000A                     i2stopOperation@address:
  1292                           	opt stack 0
  1293  00000A                     i2___lwmod@divisor:
  1294                           	opt stack 0
  1295                           
  1296                           ; 2 bytes @ 0x9
  1297  00000A                     	ds	2
  1298  00000C                     i2___lwmod@counter:
  1299                           	opt stack 0
  1300                           
  1301                           ; 1 bytes @ 0xB
  1302  00000C                     	ds	1
  1303  00000D                     ?i2_printf:
  1304                           	opt stack 0
  1305  00000D                     i2printf@f:
  1306                           	opt stack 0
  1307                           
  1308                           ; 2 bytes @ 0xC
  1309  00000D                     	ds	2
  1310  00000F                     ??i2_printf:
  1311                           
  1312                           ; 1 bytes @ 0xE
  1313  00000F                     	ds	4
  1314  000013                     i2printf@idx:
  1315                           	opt stack 0
  1316                           
  1317                           ; 1 bytes @ 0x12
  1318  000013                     	ds	1
  1319  000014                     i2printf@ap:
  1320                           	opt stack 0
  1321                           
  1322                           ; 2 bytes @ 0x13
  1323  000014                     	ds	2
  1324  000016                     i2printf@prec:
  1325                           	opt stack 0
  1326                           
  1327                           ; 1 bytes @ 0x15
  1328  000016                     	ds	1
  1329  000017                     i2printf@val:
  1330                           	opt stack 0
  1331                           
  1332                           ; 2 bytes @ 0x16
  1333  000017                     	ds	2
  1334  000019                     i2printf@flag:
  1335                           	opt stack 0
  1336                           
  1337                           ; 1 bytes @ 0x18
  1338  000019                     	ds	1
  1339  00001A                     i2printf@width:
  1340                           	opt stack 0
  1341                           
  1342                           ; 2 bytes @ 0x19
  1343  00001A                     	ds	2
  1344  00001C                     i2printf@c:
  1345                           	opt stack 0
  1346                           
  1347                           ; 1 bytes @ 0x1B
  1348  00001C                     	ds	1
  1349  00001D                     keypressed@right:
  1350                           	opt stack 0
  1351                           
  1352                           ; 1 bytes @ 0x1C
  1353  00001D                     	ds	1
  1354  00001E                     keypressed@key:
  1355                           	opt stack 0
  1356                           
  1357                           ; 1 bytes @ 0x1D
  1358  00001E                     	ds	1
  1359  00001F                     keypressed@left:
  1360                           	opt stack 0
  1361                           
  1362                           ; 1 bytes @ 0x1E
  1363  00001F                     	ds	1
  1364  000020                     keypressed@i:
  1365                           	opt stack 0
  1366                           
  1367                           ; 1 bytes @ 0x1F
  1368  000020                     	ds	1
  1369  000021                     ??_ISR:
  1370                           
  1371                           ; 1 bytes @ 0x20
  1372  000021                     	ds	15
  1373  000030                     ISR@keypress:
  1374                           	opt stack 0
  1375                           
  1376                           ; 1 bytes @ 0x2F
  1377  000030                     	ds	1
  1378  000031                     ??_isdigit:
  1379  000031                     ??_I2C_Master_Wait:
  1380  000031                     ?_next_address:
  1381                           	opt stack 0
  1382  000031                     ?___wmul:
  1383                           	opt stack 0
  1384  000031                     ?___awdiv:
  1385                           	opt stack 0
  1386  000031                     ?___awmod:
  1387                           	opt stack 0
  1388  000031                     ?___lwdiv:
  1389                           	opt stack 0
  1390  000031                     ?___lldiv:
  1391                           	opt stack 0
  1392  000031                     lcdNibble@temp:
  1393                           	opt stack 0
  1394  000031                     readADC@channel:
  1395                           	opt stack 0
  1396  000031                     wait_2ms@x:
  1397                           	opt stack 0
  1398  000031                     Eeprom_ReadByte@address:
  1399                           	opt stack 0
  1400  000031                     Eeprom_WriteByte@address:
  1401                           	opt stack 0
  1402  000031                     next_address@address:
  1403                           	opt stack 0
  1404  000031                     ___wmul@multiplier:
  1405                           	opt stack 0
  1406  000031                     ___awdiv@dividend:
  1407                           	opt stack 0
  1408  000031                     ___awmod@dividend:
  1409                           	opt stack 0
  1410  000031                     ___lwdiv@dividend:
  1411                           	opt stack 0
  1412  000031                     ___lldiv@dividend:
  1413                           	opt stack 0
  1414                           
  1415                           ; 4 bytes @ 0x30
  1416  000031                     	ds	1
  1417  000032                     I2C_Master_Read@a:
  1418                           	opt stack 0
  1419  000032                     lcdNibble@data:
  1420                           	opt stack 0
  1421  000032                     _isdigit$1124:
  1422                           	opt stack 0
  1423  000032                     I2C_Master_Write@d:
  1424                           	opt stack 0
  1425                           
  1426                           ; 2 bytes @ 0x31
  1427  000032                     	ds	1
  1428  000033                     I2C_Master_Read@temp:
  1429                           	opt stack 0
  1430  000033                     lcdInst@data:
  1431                           	opt stack 0
  1432  000033                     putch@data:
  1433                           	opt stack 0
  1434  000033                     Eeprom_WriteByte@data:
  1435                           	opt stack 0
  1436  000033                     isdigit@c:
  1437                           	opt stack 0
  1438  000033                     ___wmul@multiplicand:
  1439                           	opt stack 0
  1440  000033                     ___awdiv@divisor:
  1441                           	opt stack 0
  1442  000033                     ___awmod@divisor:
  1443                           	opt stack 0
  1444  000033                     ___lwdiv@divisor:
  1445                           	opt stack 0
  1446                           
  1447                           ; 2 bytes @ 0x32
  1448  000033                     	ds	1
  1449  000034                     ??_initLCD:
  1450                           
  1451                           ; 1 bytes @ 0x33
  1452  000034                     	ds	1
  1453  000035                     ___awdiv@counter:
  1454                           	opt stack 0
  1455  000035                     ___awmod@counter:
  1456                           	opt stack 0
  1457  000035                     ___wmul@product:
  1458                           	opt stack 0
  1459  000035                     ___lwdiv@quotient:
  1460                           	opt stack 0
  1461  000035                     ___lldiv@divisor:
  1462                           	opt stack 0
  1463                           
  1464                           ; 4 bytes @ 0x34
  1465  000035                     	ds	1
  1466  000036                     ___awdiv@sign:
  1467                           	opt stack 0
  1468  000036                     ___awmod@sign:
  1469                           	opt stack 0
  1470                           
  1471                           ; 1 bytes @ 0x35
  1472  000036                     	ds	1
  1473  000037                     ___lwdiv@counter:
  1474                           	opt stack 0
  1475  000037                     ___awdiv@quotient:
  1476                           	opt stack 0
  1477                           
  1478                           ; 2 bytes @ 0x36
  1479  000037                     	ds	1
  1480  000038                     ?___lwmod:
  1481                           	opt stack 0
  1482  000038                     ___lwmod@dividend:
  1483                           	opt stack 0
  1484                           
  1485                           ; 2 bytes @ 0x37
  1486  000038                     	ds	1
  1487  000039                     stopOperation@address_code:
  1488                           	opt stack 0
  1489  000039                     ___lldiv@quotient:
  1490                           	opt stack 0
  1491                           
  1492                           ; 4 bytes @ 0x38
  1493  000039                     	ds	1
  1494  00003A                     stopOperation@address:
  1495                           	opt stack 0
  1496  00003A                     ___lwmod@divisor:
  1497                           	opt stack 0
  1498                           
  1499                           ; 2 bytes @ 0x39
  1500  00003A                     	ds	2
  1501  00003C                     ___lwmod@counter:
  1502                           	opt stack 0
  1503                           
  1504                           ; 1 bytes @ 0x3B
  1505  00003C                     	ds	1
  1506  00003D                     ?_printf:
  1507                           	opt stack 0
  1508  00003D                     ___lldiv@counter:
  1509                           	opt stack 0
  1510  00003D                     printf@f:
  1511                           	opt stack 0
  1512                           
  1513                           ; 2 bytes @ 0x3C
  1514  00003D                     	ds	1
  1515  00003E                     I2C_Master_Init@c:
  1516                           	opt stack 0
  1517                           
  1518                           ; 4 bytes @ 0x3D
  1519  00003E                     	ds	4
  1520  000042                     ??_I2C_Master_Init:
  1521                           
  1522                           ; 1 bytes @ 0x41
  1523  000042                     	ds	3
  1524  000045                     ??_testBatteries:
  1525  000045                     ??_show_log:
  1526                           
  1527                           ; 1 bytes @ 0x44
  1528  000045                     	ds	2
  1529                           tblptru	equ	0xFF8
  1530                           tblptrh	equ	0xFF7
  1531                           tblptrl	equ	0xFF6
  1532                           tablat	equ	0xFF5
  1533                           postinc0	equ	0xFEE
  1534                           wreg	equ	0xFE8
  1535                           
  1536 ;;
  1537 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1538 ;;
  1539 ;; *************** function _main *****************
  1540 ;; Defined at:
  1541 ;;		line 50 in file "../main.c"
  1542 ;; Parameters:    Size  Location     Type
  1543 ;;		None
  1544 ;; Auto vars:     Size  Location     Type
  1545 ;;  i               1   46[BANK0 ] unsigned char 
  1546 ;;  i               1   45[BANK0 ] unsigned char 
  1547 ;;  i               1   44[BANK0 ] unsigned char 
  1548 ;;  steps           1   48[BANK0 ] unsigned char 
  1549 ;;  steps           1   47[BANK0 ] unsigned char 
  1550 ;;  i               1   43[BANK0 ] unsigned char 
  1551 ;;  i               1   42[BANK0 ] unsigned char 
  1552 ;; Return value:  Size  Location     Type
  1553 ;;                  1    wreg      void 
  1554 ;; Registers used:
  1555 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1556 ;; Tracked objects:
  1557 ;;		On entry : 0/0
  1558 ;;		On exit  : 0/0
  1559 ;;		Unchanged: 0/0
  1560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1561 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1562 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1563 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1564 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1565 ;;Total ram usage:        9 bytes
  1566 ;; Hardware stack levels required when called:    9
  1567 ;; This function calls:
  1568 ;;		_I2C_Master_Init
  1569 ;;		_I2C_Master_Read
  1570 ;;		_I2C_Master_Start
  1571 ;;		_I2C_Master_Stop
  1572 ;;		_I2C_Master_Write
  1573 ;;		_initLCD
  1574 ;;		_lcdInst
  1575 ;;		_printf
  1576 ;;		_readADC
  1577 ;;		_show_log
  1578 ;;		_stopOperation
  1579 ;;		_testBatteries
  1580 ;;		_wait_2ms
  1581 ;; This function is called by:
  1582 ;;		Startup code after reset
  1583 ;; This function uses a non-reentrant model
  1584 ;;
  1585                           
  1586                           	psect	text0
  1587  000012                     __ptext0:
  1588                           	opt stack 0
  1589  000012                     _main:
  1590                           	opt stack 22
  1591                           
  1592                           ;main.c: 52: TRISA = 0b00101111;
  1593                           
  1594                           ;incstack = 0
  1595  000012  0E2F               	movlw	47
  1596  000014  6E92               	movwf	3986,c	;volatile
  1597                           
  1598                           ;main.c: 53: TRISB = 0b11110010;
  1599  000016  0EF2               	movlw	242
  1600  000018  6E93               	movwf	3987,c	;volatile
  1601                           
  1602                           ;main.c: 54: TRISC = 0x00;
  1603  00001A  0E00               	movlw	0
  1604  00001C  6E94               	movwf	3988,c	;volatile
  1605                           
  1606                           ;main.c: 55: TRISD = 0x00;
  1607  00001E  0E00               	movlw	0
  1608  000020  6E95               	movwf	3989,c	;volatile
  1609                           
  1610                           ;main.c: 56: TRISE = 0b00000001;
  1611  000022  0E01               	movlw	1
  1612  000024  6E96               	movwf	3990,c	;volatile
  1613                           
  1614                           ;main.c: 58: LATA = 0x00;
  1615  000026  0E00               	movlw	0
  1616  000028  6E89               	movwf	3977,c	;volatile
  1617                           
  1618                           ;main.c: 59: LATB = 0x00;
  1619  00002A  0E00               	movlw	0
  1620  00002C  6E8A               	movwf	3978,c	;volatile
  1621                           
  1622                           ;main.c: 60: LATC = 0x00;
  1623  00002E  0E00               	movlw	0
  1624  000030  6E8B               	movwf	3979,c	;volatile
  1625                           
  1626                           ;main.c: 61: LATD = 0x00;
  1627  000032  0E00               	movlw	0
  1628  000034  6E8C               	movwf	3980,c	;volatile
  1629                           
  1630                           ;main.c: 62: LATE = 0x00;
  1631  000036  0E00               	movlw	0
  1632  000038  6E8D               	movwf	3981,c	;volatile
  1633                           
  1634                           ;main.c: 64: ADCON0 = 0x00;
  1635  00003A  0E00               	movlw	0
  1636  00003C  6EC2               	movwf	4034,c	;volatile
  1637                           
  1638                           ;main.c: 65: ADCON1 = 0b00001001;
  1639  00003E  0E09               	movlw	9
  1640  000040  6EC1               	movwf	4033,c	;volatile
  1641                           
  1642                           ;main.c: 66: ADCON2 = 0b10110001;
  1643  000042  0EB1               	movlw	177
  1644  000044  6EC0               	movwf	4032,c	;volatile
  1645                           
  1646                           ;main.c: 70: CVRCON = 0x00;
  1647  000046  0E00               	movlw	0
  1648  000048  6EB5               	movwf	4021,c	;volatile
  1649                           
  1650                           ;main.c: 71: CMCONbits.CIS = 0;
  1651  00004A  96B4               	bcf	4020,3,c	;volatile
  1652                           
  1653                           ;main.c: 73: GIE = 1;
  1654  00004C  8EF2               	bsf	intcon,7,c	;volatile
  1655                           
  1656                           ;main.c: 74: PEIE = 1;
  1657  00004E  8CF2               	bsf	intcon,6,c	;volatile
  1658                           
  1659                           ;main.c: 75: INT1IE = 1;
  1660  000050  86F0               	bsf	intcon3,3,c	;volatile
  1661                           
  1662                           ;main.c: 76: INT1IF = 0;
  1663  000052  90F0               	bcf	intcon3,0,c	;volatile
  1664                           
  1665                           ;main.c: 77: TMR0IE = 1;
  1666  000054  8AF2               	bsf	intcon,5,c	;volatile
  1667                           
  1668                           ;main.c: 78: TMR0IF = 0;
  1669  000056  94F2               	bcf	intcon,2,c	;volatile
  1670                           
  1671                           ;main.c: 79: TMR1IE = 1;
  1672  000058  809D               	bsf	3997,0,c	;volatile
  1673                           
  1674                           ;main.c: 80: TMR1IF = 0;
  1675  00005A  909E               	bcf	3998,0,c	;volatile
  1676                           
  1677                           ;main.c: 84: T0CON = 0b00000111;
  1678  00005C  0E07               	movlw	7
  1679  00005E  6ED5               	movwf	4053,c	;volatile
  1680                           
  1681                           ;main.c: 92: TMR0 = 55770;
  1682  000060  0ED9               	movlw	217
  1683  000062  6ED7               	movwf	4055,c	;volatile
  1684  000064  0EDA               	movlw	218
  1685  000066  6ED6               	movwf	4054,c	;volatile
  1686                           
  1687                           ;main.c: 101: T1CON = 0b10000000;
  1688  000068  0E80               	movlw	128
  1689  00006A  6ECD               	movwf	4045,c	;volatile
  1690                           
  1691                           ;main.c: 110: TMR1 = 60535;
  1692  00006C  0EEC               	movlw	236
  1693  00006E  6ECF               	movwf	4047,c	;volatile
  1694  000070  0E77               	movlw	119
  1695  000072  6ECE               	movwf	4046,c	;volatile
  1696                           
  1697                           ;main.c: 120: initLCD();
  1698  000074  ECCF  F011         	call	_initLCD	;wreg free
  1699                           
  1700                           ;main.c: 121: nRBPU = 0;
  1701  000078  9EF1               	bcf	intcon2,7,c	;volatile
  1702                           
  1703                           ;main.c: 122: I2C_Master_Init(10000);
  1704  00007A  0E10               	movlw	16
  1705  00007C  6E3E               	movwf	I2C_Master_Init@c,c
  1706  00007E  0E27               	movlw	39
  1707  000080  6E3F               	movwf	I2C_Master_Init@c+1,c
  1708  000082  0E00               	movlw	0
  1709  000084  6E40               	movwf	I2C_Master_Init@c+2,c
  1710  000086  0E00               	movlw	0
  1711  000088  6E41               	movwf	I2C_Master_Init@c+3,c
  1712  00008A  EC02  F011         	call	_I2C_Master_Init	;wreg free
  1713                           
  1714                           ;main.c: 123: (INTCONbits.GIE = 1);
  1715  00008E  8EF2               	bsf	intcon,7,c	;volatile
  1716                           
  1717                           ;main.c: 126: while (screenMode == 2){
  1718                           
  1719                           ;main.c: 125: while (1) {
  1720  000090  D050               	goto	l5380
  1721  000092                     l5342:
  1722                           
  1723                           ;main.c: 127: lcdInst(0b10000000);;
  1724  000092  0E80               	movlw	128
  1725  000094  EC33  F013         	call	_lcdInst
  1726                           
  1727                           ;main.c: 128: printf("PRESS * TO START");
  1728  000098  0EDE               	movlw	low STR_1
  1729  00009A  6E3D               	movwf	printf@f,c
  1730  00009C  0EFF               	movlw	high STR_1
  1731  00009E  6E3E               	movwf	printf@f+1,c
  1732  0000A0  EC02  F005         	call	_printf	;wreg free
  1733                           
  1734                           ;main.c: 129: lcdInst(0b11000000);;
  1735  0000A4  0EC0               	movlw	192
  1736  0000A6  EC33  F013         	call	_lcdInst
  1737                           
  1738                           ;main.c: 130: printf("< TOGGLE  LOGS >");
  1739  0000AA  0ECD               	movlw	low STR_2
  1740  0000AC  6E3D               	movwf	printf@f,c
  1741  0000AE  0EFF               	movlw	high STR_2
  1742  0000B0  6E3E               	movwf	printf@f+1,c
  1743  0000B2  EC02  F005         	call	_printf	;wreg free
  1744                           
  1745                           ;main.c: 131: for(unsigned char i=0;i<50;i++){
  1746  0000B6  0E00               	movlw	0
  1747  0000B8  0100               	movlb	0	; () banked
  1748  0000BA  6FAA               	movwf	main@i& (0+255),b
  1749  0000BC                     l5350:
  1750                           
  1751                           ; BSR set to: 0
  1752  0000BC  0E31               	movlw	49
  1753  0000BE  0100               	movlb	0	; () banked
  1754  0000C0  65AA               	cpfsgt	main@i& (0+255),b
  1755  0000C2  D001               	goto	l5354
  1756  0000C4  D011               	goto	l5362
  1757  0000C6                     l5354:
  1758                           
  1759                           ; BSR set to: 0
  1760                           ;main.c: 132: if (screenMode != 2)
  1761  0000C6  0E02               	movlw	2
  1762  0000C8  0100               	movlb	0	; () banked
  1763  0000CA  19DC               	xorwf	_screenMode& (0+255),w,b
  1764  0000CC  A4D8               	btfss	status,2,c
  1765  0000CE  D00C               	goto	l5362
  1766                           
  1767                           ; BSR set to: 0
  1768                           ;main.c: 134: _delay((unsigned long)((10)*(10000000/4000.0)));
  1769                           
  1770                           ; BSR set to: 0
  1771                           
  1772                           ; BSR set to: 0
  1773                           ;main.c: 133: break;
  1774  0000D0  0E21               	movlw	33
  1775  0000D2  0100               	movlb	0	; () banked
  1776  0000D4  6FA8               	movwf	??_main& (0+255),b
  1777  0000D6  0E76               	movlw	118
  1778  0000D8                     u5767:
  1779  0000D8  2EE8               	decfsz	wreg,f,c
  1780  0000DA  D7FE               	bra	u5767
  1781  0000DC  2FA8               	decfsz	??_main& (0+255),f,b
  1782  0000DE  D7FC               	bra	u5767
  1783  0000E0  F000               	nop	
  1784  0000E2  0100               	movlb	0	; () banked
  1785  0000E4  2BAA               	incf	main@i& (0+255),f,b
  1786  0000E6  D7EA               	goto	l5350
  1787  0000E8                     l5362:
  1788                           
  1789                           ; BSR set to: 0
  1790                           ;main.c: 135: }
  1791                           ;main.c: 136: lcdInst(0b10000000);;
  1792  0000E8  0E80               	movlw	128
  1793  0000EA  EC33  F013         	call	_lcdInst
  1794                           
  1795                           ;main.c: 137: lcdInst(0b11000000);;
  1796  0000EE  0EC0               	movlw	192
  1797  0000F0  EC33  F013         	call	_lcdInst
  1798                           
  1799                           ;main.c: 138: printf(" <TOGGLE  LOGS> ");
  1800  0000F4  0E78               	movlw	low STR_3
  1801  0000F6  6E3D               	movwf	printf@f,c
  1802  0000F8  0EFF               	movlw	high STR_3
  1803  0000FA  6E3E               	movwf	printf@f+1,c
  1804  0000FC  EC02  F005         	call	_printf	;wreg free
  1805                           
  1806                           ;main.c: 139: for(unsigned char i=0;i<50;i++){
  1807  000100  0E00               	movlw	0
  1808  000102  0100               	movlb	0	; () banked
  1809  000104  6FAB               	movwf	main@i_707& (0+255),b
  1810  000106                     l5368:
  1811                           
  1812                           ; BSR set to: 0
  1813  000106  0E31               	movlw	49
  1814  000108  0100               	movlb	0	; () banked
  1815  00010A  65AB               	cpfsgt	main@i_707& (0+255),b
  1816  00010C  D001               	goto	l5372
  1817  00010E  D011               	goto	l5380
  1818  000110                     l5372:
  1819                           
  1820                           ; BSR set to: 0
  1821                           ;main.c: 140: if (screenMode != 2)
  1822  000110  0E02               	movlw	2
  1823  000112  0100               	movlb	0	; () banked
  1824  000114  19DC               	xorwf	_screenMode& (0+255),w,b
  1825  000116  A4D8               	btfss	status,2,c
  1826  000118  D00C               	goto	l5380
  1827                           
  1828                           ; BSR set to: 0
  1829                           ;main.c: 142: _delay((unsigned long)((10)*(10000000/4000.0)));
  1830                           
  1831                           ; BSR set to: 0
  1832                           
  1833                           ; BSR set to: 0
  1834                           ;main.c: 141: break;
  1835  00011A  0E21               	movlw	33
  1836  00011C  0100               	movlb	0	; () banked
  1837  00011E  6FA8               	movwf	??_main& (0+255),b
  1838  000120  0E76               	movlw	118
  1839  000122                     u5777:
  1840  000122  2EE8               	decfsz	wreg,f,c
  1841  000124  D7FE               	bra	u5777
  1842  000126  2FA8               	decfsz	??_main& (0+255),f,b
  1843  000128  D7FC               	bra	u5777
  1844  00012A  F000               	nop	
  1845  00012C  0100               	movlb	0	; () banked
  1846  00012E  2BAB               	incf	main@i_707& (0+255),f,b
  1847  000130  D7EA               	goto	l5368
  1848  000132                     l5380:
  1849  000132  0E02               	movlw	2
  1850  000134  0100               	movlb	0	; () banked
  1851  000136  19DC               	xorwf	_screenMode& (0+255),w,b
  1852  000138  A4D8               	btfss	status,2,c
  1853  00013A  D251               	goto	l5606
  1854  00013C  D7AA               	goto	l5342
  1855  00013E                     l5382:
  1856                           
  1857                           ; BSR set to: 0
  1858                           ;main.c: 153: readADC(0);
  1859  00013E  0E00               	movlw	0
  1860  000140  EC03  F013         	call	_readADC
  1861                           
  1862                           ;main.c: 154: lcdInst(0b10000000);;
  1863  000144  0E80               	movlw	128
  1864  000146  EC33  F013         	call	_lcdInst
  1865                           
  1866                           ;main.c: 155: lcdInst(0b11000000);;
  1867  00014A  0EC0               	movlw	192
  1868  00014C  EC33  F013         	call	_lcdInst
  1869                           
  1870                           ;main.c: 156: printf("%4d %2d         ", ADRES, countDrain+countAA+count9V+countC);
  1871  000150  0EDF               	movlw	low STR_4
  1872  000152  6E3D               	movwf	printf@f,c
  1873  000154  0EFE               	movlw	high STR_4
  1874  000156  6E3E               	movwf	printf@f+1,c
  1875  000158  CFC3 F03F          	movff	4035,?_printf+2	;volatile
  1876  00015C  CFC4 F040          	movff	4036,?_printf+3	;volatile
  1877  000160  0100               	movlb	0	; () banked
  1878  000162  51D0               	movf	_countAA& (0+255),w,b
  1879  000164  C0D2  F0A8         	movff	_countDrain,??_main
  1880  000168  0100               	movlb	0	; () banked
  1881  00016A  6BA9               	clrf	(??_main+1)& (0+255),b
  1882  00016C  0100               	movlb	0	; () banked
  1883  00016E  27A8               	addwf	??_main& (0+255),f,b
  1884  000170  0E00               	movlw	0
  1885  000172  23A9               	addwfc	(??_main+1)& (0+255),f,b
  1886  000174  0100               	movlb	0	; () banked
  1887  000176  51CF               	movf	_count9V& (0+255),w,b
  1888  000178  0100               	movlb	0	; () banked
  1889  00017A  27A8               	addwf	??_main& (0+255),f,b
  1890  00017C  0E00               	movlw	0
  1891  00017E  23A9               	addwfc	(??_main+1)& (0+255),f,b
  1892  000180  0100               	movlb	0	; () banked
  1893  000182  51D1               	movf	_countC& (0+255),w,b
  1894  000184  0100               	movlb	0	; () banked
  1895  000186  25A8               	addwf	??_main& (0+255),w,b
  1896  000188  6E41               	movwf	?_printf+4,c
  1897  00018A  0100               	movlb	0	; () banked
  1898  00018C  0E00               	movlw	0
  1899  00018E  0100               	movlb	0	; () banked
  1900  000190  21A9               	addwfc	(??_main+1)& (0+255),w,b
  1901  000192  6E42               	movwf	?_printf+5,c
  1902  000194  EC02  F005         	call	_printf	;wreg free
  1903                           
  1904                           ;main.c: 157: if (startGear){
  1905  000198  0100               	movlb	0	; () banked
  1906  00019A  51DB               	movf	_startGear& (0+255),w,b
  1907  00019C  B4D8               	btfsc	status,2,c
  1908  00019E  D073               	goto	l5446
  1909                           
  1910                           ; BSR set to: 0
  1911                           ;main.c: 158: wait_2ms(2000);
  1912  0001A0  0E07               	movlw	7
  1913  0001A2  6E32               	movwf	wait_2ms@x+1,c
  1914  0001A4  0ED0               	movlw	208
  1915  0001A6  6E31               	movwf	wait_2ms@x,c
  1916  0001A8  ECE0  F012         	call	_wait_2ms	;wreg free
  1917                           
  1918                           ;main.c: 159: startGear = 0;
  1919  0001AC  0E00               	movlw	0
  1920  0001AE  0100               	movlb	0	; () banked
  1921  0001B0  6FDB               	movwf	_startGear& (0+255),b
  1922                           
  1923                           ; BSR set to: 0
  1924                           ;main.c: 160: LATDbits.LD0= 0;;
  1925  0001B2  908C               	bcf	3980,0,c	;volatile
  1926                           
  1927                           ; BSR set to: 0
  1928                           ;main.c: 161: doneTimer = 0;
  1929  0001B4  0E00               	movlw	0
  1930  0001B6  6E49               	movwf	_doneTimer,c
  1931                           
  1932                           ; BSR set to: 0
  1933                           ;main.c: 163: unsigned char steps = 0;
  1934  0001B8  0E00               	movlw	0
  1935  0001BA  0100               	movlb	0	; () banked
  1936  0001BC  6FAF               	movwf	main@steps& (0+255),b
  1937                           
  1938                           ;main.c: 164: while(steps<20 && screenMode==1){
  1939  0001BE  D016               	goto	l5408
  1940  0001C0                     l5398:
  1941                           
  1942                           ; BSR set to: 0
  1943                           ;main.c: 165: steps++;
  1944  0001C0  0100               	movlb	0	; () banked
  1945  0001C2  2BAF               	incf	main@steps& (0+255),f,b
  1946                           
  1947                           ; BSR set to: 0
  1948                           ;main.c: 166: LATDbits.LD1 = 1;;
  1949  0001C4  828C               	bsf	3980,1,c	;volatile
  1950                           
  1951                           ; BSR set to: 0
  1952                           ;main.c: 167: _delay((unsigned long)((5)*(10000000/4000.0)));
  1953  0001C6  0E11               	movlw	17
  1954  0001C8  0100               	movlb	0	; () banked
  1955  0001CA  6FA8               	movwf	??_main& (0+255),b
  1956  0001CC  0E3A               	movlw	58
  1957  0001CE                     u5787:
  1958  0001CE  2EE8               	decfsz	wreg,f,c
  1959  0001D0  D7FE               	bra	u5787
  1960  0001D2  2FA8               	decfsz	??_main& (0+255),f,b
  1961  0001D4  D7FC               	bra	u5787
  1962  0001D6  F000               	nop	
  1963                           
  1964                           ;main.c: 168: LATDbits.LD1 = 0;;
  1965  0001D8  928C               	bcf	3980,1,c	;volatile
  1966                           
  1967                           ;main.c: 169: _delay((unsigned long)((5)*(10000000/4000.0)));
  1968  0001DA  0E11               	movlw	17
  1969  0001DC  0100               	movlb	0	; () banked
  1970  0001DE  6FA8               	movwf	??_main& (0+255),b
  1971  0001E0  0E3A               	movlw	58
  1972  0001E2                     u5797:
  1973  0001E2  2EE8               	decfsz	wreg,f,c
  1974  0001E4  D7FE               	bra	u5797
  1975  0001E6  2FA8               	decfsz	??_main& (0+255),f,b
  1976  0001E8  D7FC               	bra	u5797
  1977  0001EA  F000               	nop	
  1978  0001EC                     l5408:
  1979  0001EC  0E14               	movlw	20
  1980  0001EE  0100               	movlb	0	; () banked
  1981  0001F0  61AF               	cpfslt	main@steps& (0+255),b
  1982  0001F2  D004               	goto	l5412
  1983                           
  1984                           ; BSR set to: 0
  1985  0001F4  0100               	movlb	0	; () banked
  1986  0001F6  05DC               	decf	_screenMode& (0+255),w,b
  1987  0001F8  B4D8               	btfsc	status,2,c
  1988  0001FA  D7E2               	goto	l5398
  1989  0001FC                     l5412:
  1990                           
  1991                           ; BSR set to: 0
  1992                           ;main.c: 170: }
  1993                           ;main.c: 171: steps = 0;
  1994  0001FC  0E00               	movlw	0
  1995  0001FE  0100               	movlb	0	; () banked
  1996  000200  6FAF               	movwf	main@steps& (0+255),b
  1997                           
  1998                           ;main.c: 172: while(steps < 178 && screenMode==1){
  1999  000202  D014               	goto	l5424
  2000  000204                     l5414:
  2001                           
  2002                           ; BSR set to: 0
  2003                           ;main.c: 173: steps++;
  2004  000204  0100               	movlb	0	; () banked
  2005  000206  2BAF               	incf	main@steps& (0+255),f,b
  2006                           
  2007                           ; BSR set to: 0
  2008                           ;main.c: 174: LATDbits.LD1 = 1;;
  2009  000208  828C               	bsf	3980,1,c	;volatile
  2010                           
  2011                           ; BSR set to: 0
  2012                           ;main.c: 175: _delay((unsigned long)((2)*(10000000/4000.0)));
  2013  00020A  0E07               	movlw	7
  2014  00020C  0100               	movlb	0	; () banked
  2015  00020E  6FA8               	movwf	??_main& (0+255),b
  2016  000210  0E7D               	movlw	125
  2017  000212                     u5807:
  2018  000212  2EE8               	decfsz	wreg,f,c
  2019  000214  D7FE               	bra	u5807
  2020  000216  2FA8               	decfsz	??_main& (0+255),f,b
  2021  000218  D7FC               	bra	u5807
  2022                           
  2023                           ;main.c: 176: LATDbits.LD1 = 0;;
  2024  00021A  928C               	bcf	3980,1,c	;volatile
  2025                           
  2026                           ;main.c: 177: _delay((unsigned long)((2)*(10000000/4000.0)));
  2027  00021C  0E07               	movlw	7
  2028  00021E  0100               	movlb	0	; () banked
  2029  000220  6FA8               	movwf	??_main& (0+255),b
  2030  000222  0E7D               	movlw	125
  2031  000224                     u5817:
  2032  000224  2EE8               	decfsz	wreg,f,c
  2033  000226  D7FE               	bra	u5817
  2034  000228  2FA8               	decfsz	??_main& (0+255),f,b
  2035  00022A  D7FC               	bra	u5817
  2036  00022C                     l5424:
  2037  00022C  0EB2               	movlw	178
  2038  00022E  0100               	movlb	0	; () banked
  2039  000230  61AF               	cpfslt	main@steps& (0+255),b
  2040  000232  D004               	goto	l5428
  2041                           
  2042                           ; BSR set to: 0
  2043  000234  0100               	movlb	0	; () banked
  2044  000236  05DC               	decf	_screenMode& (0+255),w,b
  2045  000238  B4D8               	btfsc	status,2,c
  2046  00023A  D7E4               	goto	l5414
  2047  00023C                     l5428:
  2048                           
  2049                           ; BSR set to: 0
  2050                           ;main.c: 178: }
  2051                           ;main.c: 179: steps = 0;
  2052  00023C  0E00               	movlw	0
  2053  00023E  0100               	movlb	0	; () banked
  2054  000240  6FAF               	movwf	main@steps& (0+255),b
  2055                           
  2056                           ;main.c: 180: while(steps <2 && screenMode==1){
  2057  000242  D016               	goto	l5440
  2058  000244                     l5430:
  2059                           
  2060                           ; BSR set to: 0
  2061                           ;main.c: 181: steps++;
  2062  000244  0100               	movlb	0	; () banked
  2063  000246  2BAF               	incf	main@steps& (0+255),f,b
  2064                           
  2065                           ; BSR set to: 0
  2066                           ;main.c: 182: LATDbits.LD1 = 1;;
  2067  000248  828C               	bsf	3980,1,c	;volatile
  2068                           
  2069                           ; BSR set to: 0
  2070                           ;main.c: 183: _delay((unsigned long)((5)*(10000000/4000.0)));
  2071  00024A  0E11               	movlw	17
  2072  00024C  0100               	movlb	0	; () banked
  2073  00024E  6FA8               	movwf	??_main& (0+255),b
  2074  000250  0E3A               	movlw	58
  2075  000252                     u5827:
  2076  000252  2EE8               	decfsz	wreg,f,c
  2077  000254  D7FE               	bra	u5827
  2078  000256  2FA8               	decfsz	??_main& (0+255),f,b
  2079  000258  D7FC               	bra	u5827
  2080  00025A  F000               	nop	
  2081                           
  2082                           ;main.c: 184: LATDbits.LD1 = 0;;
  2083  00025C  928C               	bcf	3980,1,c	;volatile
  2084                           
  2085                           ;main.c: 185: _delay((unsigned long)((5)*(10000000/4000.0)));
  2086  00025E  0E11               	movlw	17
  2087  000260  0100               	movlb	0	; () banked
  2088  000262  6FA8               	movwf	??_main& (0+255),b
  2089  000264  0E3A               	movlw	58
  2090  000266                     u5837:
  2091  000266  2EE8               	decfsz	wreg,f,c
  2092  000268  D7FE               	bra	u5837
  2093  00026A  2FA8               	decfsz	??_main& (0+255),f,b
  2094  00026C  D7FC               	bra	u5837
  2095  00026E  F000               	nop	
  2096  000270                     l5440:
  2097  000270  0E02               	movlw	2
  2098  000272  0100               	movlb	0	; () banked
  2099  000274  61AF               	cpfslt	main@steps& (0+255),b
  2100  000276  D004               	goto	l5444
  2101                           
  2102                           ; BSR set to: 0
  2103  000278  0100               	movlb	0	; () banked
  2104  00027A  05DC               	decf	_screenMode& (0+255),w,b
  2105  00027C  B4D8               	btfsc	status,2,c
  2106  00027E  D7E2               	goto	l5430
  2107  000280                     l5444:
  2108                           
  2109                           ; BSR set to: 0
  2110                           ;main.c: 186: }
  2111                           ;main.c: 187: steps = 0;
  2112  000280  0E00               	movlw	0
  2113  000282  0100               	movlb	0	; () banked
  2114  000284  6FAF               	movwf	main@steps& (0+255),b
  2115  000286                     l5446:
  2116                           
  2117                           ; BSR set to: 0
  2118                           ;main.c: 188: }
  2119                           ;main.c: 191: if (ADRES < 22 | ADRES > 55){
  2120  000286  50C4               	movf	4036,w,c	;volatile
  2121  000288  E104               	bnz	u5321
  2122  00028A  0E38               	movlw	56
  2123  00028C  5CC3               	subwf	4035,w,c	;volatile
  2124  00028E  A0D8               	btfss	status,0,c
  2125  000290  D002               	goto	u5320
  2126  000292                     u5321:
  2127  000292  0E01               	movlw	1
  2128  000294  D001               	goto	u5322
  2129  000296                     u5320:
  2130  000296  0E00               	movlw	0
  2131  000298                     u5322:
  2132  000298  0100               	movlb	0	; () banked
  2133  00029A  6FA8               	movwf	??_main& (0+255),b
  2134  00029C  50C4               	movf	4036,w,c	;volatile
  2135  00029E  E106               	bnz	u5330
  2136  0002A0  0E16               	movlw	22
  2137  0002A2  5CC3               	subwf	4035,w,c	;volatile
  2138  0002A4  B0D8               	btfsc	status,0,c
  2139  0002A6  D002               	goto	u5330
  2140  0002A8  0E01               	movlw	1
  2141  0002AA  D001               	goto	u5332
  2142  0002AC                     u5330:
  2143  0002AC  0E00               	movlw	0
  2144  0002AE                     u5332:
  2145  0002AE  0100               	movlb	0	; () banked
  2146  0002B0  11A8               	iorwf	??_main& (0+255),w,b
  2147  0002B2  A0E8               	btfss	wreg,0,c
  2148  0002B4  D18E               	goto	l5604
  2149                           
  2150                           ; BSR set to: 0
  2151                           ;main.c: 192: wait_2ms(250);
  2152  0002B6  0E00               	movlw	0
  2153  0002B8  6E32               	movwf	wait_2ms@x+1,c
  2154  0002BA  0EFA               	movlw	250
  2155  0002BC  6E31               	movwf	wait_2ms@x,c
  2156  0002BE  ECE0  F012         	call	_wait_2ms	;wreg free
  2157                           
  2158                           ;main.c: 193: sorting = 1;
  2159  0002C2  0E01               	movlw	1
  2160  0002C4  6E4C               	movwf	_sorting,c
  2161                           
  2162                           ;main.c: 194: LATCbits.LC7 = 1;;
  2163  0002C6  8E8B               	bsf	3979,7,c	;volatile
  2164                           
  2165                           ;main.c: 195: wait_2ms(500);
  2166  0002C8  0E01               	movlw	1
  2167  0002CA  6E32               	movwf	wait_2ms@x+1,c
  2168  0002CC  0EF4               	movlw	244
  2169  0002CE  6E31               	movwf	wait_2ms@x,c
  2170  0002D0  ECE0  F012         	call	_wait_2ms	;wreg free
  2171                           
  2172                           ;main.c: 196: testBatteries();
  2173  0002D4  EC1E  F00E         	call	_testBatteries	;wreg free
  2174                           
  2175                           ;main.c: 197: LATCbits.LC7 = 0;;
  2176  0002D8  9E8B               	bcf	3979,7,c	;volatile
  2177                           
  2178                           ;main.c: 199: if (doubleAA)
  2179  0002DA  0100               	movlb	0	; () banked
  2180  0002DC  51D3               	movf	_doubleAA& (0+255),w,b
  2181  0002DE  B4D8               	btfsc	status,2,c
  2182  0002E0  D005               	goto	l5464
  2183                           
  2184                           ; BSR set to: 0
  2185                           ;main.c: 200: plat1Right = 512;
  2186  0002E2  0E02               	movlw	2
  2187  0002E4  0100               	movlb	0	; () banked
  2188  0002E6  6FC2               	movwf	(_plat1Right+1)& (0+255),b
  2189  0002E8  0E00               	movlw	0
  2190  0002EA  6FC1               	movwf	_plat1Right& (0+255),b
  2191  0002EC                     l5464:
  2192                           
  2193                           ; BSR set to: 0
  2194                           ;main.c: 201: if (plat1Left)
  2195  0002EC  0100               	movlb	0	; () banked
  2196  0002EE  51BF               	movf	_plat1Left& (0+255),w,b
  2197  0002F0  0100               	movlb	0	; () banked
  2198  0002F2  11C0               	iorwf	(_plat1Left+1)& (0+255),w,b
  2199  0002F4  B4D8               	btfsc	status,2,c
  2200  0002F6  D002               	goto	l5468
  2201                           
  2202                           ; BSR set to: 0
  2203                           ;main.c: 202: step1 = 1;
  2204  0002F8  0E01               	movlw	1
  2205  0002FA  6E4D               	movwf	_step1,c
  2206  0002FC                     l5468:
  2207                           
  2208                           ; BSR set to: 0
  2209                           ;main.c: 203: if (plat1Right)
  2210  0002FC  0100               	movlb	0	; () banked
  2211  0002FE  51C1               	movf	_plat1Right& (0+255),w,b
  2212  000300  0100               	movlb	0	; () banked
  2213  000302  11C2               	iorwf	(_plat1Right+1)& (0+255),w,b
  2214  000304  B4D8               	btfsc	status,2,c
  2215  000306  D002               	goto	l5472
  2216                           
  2217                           ; BSR set to: 0
  2218                           ;main.c: 204: step1 = 4;
  2219  000308  0E04               	movlw	4
  2220  00030A  6E4D               	movwf	_step1,c
  2221  00030C                     l5472:
  2222                           
  2223                           ; BSR set to: 0
  2224                           ;main.c: 205: if (plat2Left)
  2225  00030C  0100               	movlb	0	; () banked
  2226  00030E  51C3               	movf	_plat2Left& (0+255),w,b
  2227  000310  0100               	movlb	0	; () banked
  2228  000312  11C4               	iorwf	(_plat2Left+1)& (0+255),w,b
  2229  000314  B4D8               	btfsc	status,2,c
  2230  000316  D002               	goto	l5476
  2231                           
  2232                           ; BSR set to: 0
  2233                           ;main.c: 206: step2 = 1;
  2234  000318  0E01               	movlw	1
  2235  00031A  6E4E               	movwf	_step2,c
  2236  00031C                     l5476:
  2237                           
  2238                           ; BSR set to: 0
  2239                           ;main.c: 207: if (plat2Right)
  2240  00031C  0100               	movlb	0	; () banked
  2241  00031E  51C5               	movf	_plat2Right& (0+255),w,b
  2242  000320  0100               	movlb	0	; () banked
  2243  000322  11C6               	iorwf	(_plat2Right+1)& (0+255),w,b
  2244  000324  B4D8               	btfsc	status,2,c
  2245  000326  D002               	goto	l5480
  2246                           
  2247                           ; BSR set to: 0
  2248                           ;main.c: 208: step2 = 4;
  2249  000328  0E04               	movlw	4
  2250  00032A  6E4E               	movwf	_step2,c
  2251  00032C                     l5480:
  2252                           
  2253                           ; BSR set to: 0
  2254                           ;main.c: 210: turn1BackRight = plat1Left;
  2255  00032C  C0BF  F0C9         	movff	_plat1Left,_turn1BackRight
  2256  000330  C0C0  F0CA         	movff	_plat1Left+1,_turn1BackRight+1
  2257                           
  2258                           ; BSR set to: 0
  2259                           ;main.c: 211: turn1BackLeft = plat1Right;
  2260  000334  C0C1  F0C7         	movff	_plat1Right,_turn1BackLeft
  2261  000338  C0C2  F0C8         	movff	_plat1Right+1,_turn1BackLeft+1
  2262                           
  2263                           ; BSR set to: 0
  2264                           ;main.c: 212: turn2BackRight = plat2Left;
  2265  00033C  C0C3  F0CD         	movff	_plat2Left,_turn2BackRight
  2266  000340  C0C4  F0CE         	movff	_plat2Left+1,_turn2BackRight+1
  2267                           
  2268                           ; BSR set to: 0
  2269                           ;main.c: 213: turn2BackLeft = plat2Right;
  2270  000344  C0C5  F0CB         	movff	_plat2Right,_turn2BackLeft
  2271  000348  C0C6  F0CC         	movff	_plat2Right+1,_turn2BackLeft+1
  2272                           
  2273                           ; BSR set to: 0
  2274                           ;main.c: 215: LATCbits.LC1 = 1;;
  2275  00034C  828B               	bsf	3979,1,c	;volatile
  2276                           
  2277                           ; BSR set to: 0
  2278                           ;main.c: 216: LATCbits.LC2 = 0;;
  2279  00034E  948B               	bcf	3979,2,c	;volatile
  2280                           
  2281                           ; BSR set to: 0
  2282                           ;main.c: 217: LATCbits.LC0 = 1;;
  2283  000350  808B               	bsf	3979,0,c	;volatile
  2284                           
  2285                           ; BSR set to: 0
  2286                           ;main.c: 218: LATEbits.LE2 = 0;;
  2287  000352  948D               	bcf	3981,2,c	;volatile
  2288  000354                     l5496:
  2289                           
  2290                           ; BSR set to: 0
  2291  000354  0100               	movlb	0	; () banked
  2292  000356  51C3               	movf	_plat2Left& (0+255),w,b
  2293  000358  0100               	movlb	0	; () banked
  2294  00035A  11BF               	iorwf	_plat1Left& (0+255),w,b
  2295  00035C  0100               	movlb	0	; () banked
  2296  00035E  6FA8               	movwf	??_main& (0+255),b
  2297  000360  0100               	movlb	0	; () banked
  2298  000362  51C4               	movf	(_plat2Left+1)& (0+255),w,b
  2299  000364  0100               	movlb	0	; () banked
  2300  000366  11C0               	iorwf	(_plat1Left+1)& (0+255),w,b
  2301  000368  0100               	movlb	0	; () banked
  2302  00036A  6FA9               	movwf	(??_main+1)& (0+255),b
  2303  00036C  0100               	movlb	0	; () banked
  2304  00036E  51C1               	movf	_plat1Right& (0+255),w,b
  2305  000370  0100               	movlb	0	; () banked
  2306  000372  13A8               	iorwf	??_main& (0+255),f,b
  2307  000374  0100               	movlb	0	; () banked
  2308  000376  51C2               	movf	(_plat1Right+1)& (0+255),w,b
  2309  000378  0100               	movlb	0	; () banked
  2310  00037A  13A9               	iorwf	(??_main+1)& (0+255),f,b
  2311  00037C  0100               	movlb	0	; () banked
  2312  00037E  51C5               	movf	_plat2Right& (0+255),w,b
  2313  000380  0100               	movlb	0	; () banked
  2314  000382  13A8               	iorwf	??_main& (0+255),f,b
  2315  000384  0100               	movlb	0	; () banked
  2316  000386  51C6               	movf	(_plat2Right+1)& (0+255),w,b
  2317  000388  0100               	movlb	0	; () banked
  2318  00038A  13A9               	iorwf	(??_main+1)& (0+255),f,b
  2319  00038C  0100               	movlb	0	; () banked
  2320  00038E  51A8               	movf	??_main& (0+255),w,b
  2321  000390  0100               	movlb	0	; () banked
  2322  000392  11A9               	iorwf	(??_main+1)& (0+255),w,b
  2323  000394  B4D8               	btfsc	status,2,c
  2324  000396  D004               	goto	l5500
  2325                           
  2326                           ; BSR set to: 0
  2327  000398  0100               	movlb	0	; () banked
  2328  00039A  05DC               	decf	_screenMode& (0+255),w,b
  2329  00039C  B4D8               	btfsc	status,2,c
  2330  00039E  D7DA               	goto	l5496
  2331  0003A0                     l5500:
  2332                           
  2333                           ; BSR set to: 0
  2334                           ;main.c: 222: if (doubleAA){
  2335  0003A0  0100               	movlb	0	; () banked
  2336  0003A2  51D3               	movf	_doubleAA& (0+255),w,b
  2337  0003A4  B4D8               	btfsc	status,2,c
  2338  0003A6  D00B               	goto	l5506
  2339                           
  2340                           ; BSR set to: 0
  2341                           ;main.c: 223: plat2Left = 512;
  2342  0003A8  0E02               	movlw	2
  2343  0003AA  0100               	movlb	0	; () banked
  2344  0003AC  6FC4               	movwf	(_plat2Left+1)& (0+255),b
  2345  0003AE  0E00               	movlw	0
  2346  0003B0  6FC3               	movwf	_plat2Left& (0+255),b
  2347                           
  2348                           ;main.c: 224: step2 = 1;
  2349  0003B2  0E01               	movlw	1
  2350  0003B4  6E4E               	movwf	_step2,c
  2351                           
  2352                           ; BSR set to: 0
  2353                           ;main.c: 225: turn2BackRight = plat2Left;
  2354  0003B6  C0C3  F0CD         	movff	_plat2Left,_turn2BackRight
  2355  0003BA  C0C4  F0CE         	movff	_plat2Left+1,_turn2BackRight+1
  2356  0003BE                     l5506:
  2357                           
  2358                           ; BSR set to: 0
  2359  0003BE  0100               	movlb	0	; () banked
  2360  0003C0  51C3               	movf	_plat2Left& (0+255),w,b
  2361  0003C2  0100               	movlb	0	; () banked
  2362  0003C4  11C4               	iorwf	(_plat2Left+1)& (0+255),w,b
  2363  0003C6  B4D8               	btfsc	status,2,c
  2364  0003C8  D004               	goto	l5510
  2365                           
  2366                           ; BSR set to: 0
  2367  0003CA  0100               	movlb	0	; () banked
  2368  0003CC  05DC               	decf	_screenMode& (0+255),w,b
  2369  0003CE  B4D8               	btfsc	status,2,c
  2370  0003D0  D7F6               	goto	l5506
  2371  0003D2                     l5510:
  2372                           
  2373                           ; BSR set to: 0
  2374                           ;main.c: 229: wait_2ms(500);
  2375  0003D2  0E01               	movlw	1
  2376  0003D4  6E32               	movwf	wait_2ms@x+1,c
  2377  0003D6  0EF4               	movlw	244
  2378  0003D8  6E31               	movwf	wait_2ms@x,c
  2379  0003DA  ECE0  F012         	call	_wait_2ms	;wreg free
  2380                           
  2381                           ;main.c: 231: if (((countC + countAA + count9V + countDrain) >= 15))
  2382  0003DE  0100               	movlb	0	; () banked
  2383  0003E0  51D0               	movf	_countAA& (0+255),w,b
  2384  0003E2  C0D1  F0A8         	movff	_countC,??_main
  2385  0003E6  0100               	movlb	0	; () banked
  2386  0003E8  6BA9               	clrf	(??_main+1)& (0+255),b
  2387  0003EA  0100               	movlb	0	; () banked
  2388  0003EC  27A8               	addwf	??_main& (0+255),f,b
  2389  0003EE  0E00               	movlw	0
  2390  0003F0  23A9               	addwfc	(??_main+1)& (0+255),f,b
  2391  0003F2  0100               	movlb	0	; () banked
  2392  0003F4  51CF               	movf	_count9V& (0+255),w,b
  2393  0003F6  0100               	movlb	0	; () banked
  2394  0003F8  27A8               	addwf	??_main& (0+255),f,b
  2395  0003FA  0E00               	movlw	0
  2396  0003FC  23A9               	addwfc	(??_main+1)& (0+255),f,b
  2397  0003FE  0100               	movlb	0	; () banked
  2398  000400  51D2               	movf	_countDrain& (0+255),w,b
  2399  000402  0100               	movlb	0	; () banked
  2400  000404  27A8               	addwf	??_main& (0+255),f,b
  2401  000406  0E00               	movlw	0
  2402  000408  23A9               	addwfc	(??_main+1)& (0+255),f,b
  2403  00040A  0100               	movlb	0	; () banked
  2404  00040C  BFA9               	btfsc	(??_main+1)& (0+255),7,b
  2405  00040E  D009               	goto	l5516
  2406  000410  0100               	movlb	0	; () banked
  2407  000412  51A9               	movf	(??_main+1)& (0+255),w,b
  2408  000414  E104               	bnz	u5450
  2409  000416  0E0F               	movlw	15
  2410  000418  0100               	movlb	0	; () banked
  2411  00041A  5DA8               	subwf	??_main& (0+255),w,b
  2412  00041C  B0D8               	btfsc	status,0,c
  2413  00041E                     u5450:
  2414                           
  2415                           ; BSR set to: 0
  2416                           ;main.c: 232: stopOperation();
  2417  00041E  ECDB  F009         	call	_stopOperation	;wreg free
  2418  000422                     l5516:
  2419                           
  2420                           ;main.c: 234: LATCbits.LC1 = 1;;
  2421  000422  828B               	bsf	3979,1,c	;volatile
  2422                           
  2423                           ;main.c: 235: LATCbits.LC2 = 0;;
  2424  000424  948B               	bcf	3979,2,c	;volatile
  2425                           
  2426                           ;main.c: 236: LATCbits.LC0 = 1;;
  2427  000426  808B               	bsf	3979,0,c	;volatile
  2428                           
  2429                           ;main.c: 237: LATEbits.LE2 = 0;;
  2430  000428  948D               	bcf	3981,2,c	;volatile
  2431                           
  2432                           ;main.c: 238: plat1Left = turn1BackLeft;
  2433  00042A  C0C7  F0BF         	movff	_turn1BackLeft,_plat1Left
  2434  00042E  C0C8  F0C0         	movff	_turn1BackLeft+1,_plat1Left+1
  2435                           
  2436                           ;main.c: 239: plat1Right = turn1BackRight;
  2437  000432  C0C9  F0C1         	movff	_turn1BackRight,_plat1Right
  2438  000436  C0CA  F0C2         	movff	_turn1BackRight+1,_plat1Right+1
  2439                           
  2440                           ;main.c: 240: plat2Left = turn2BackLeft;
  2441  00043A  C0CB  F0C3         	movff	_turn2BackLeft,_plat2Left
  2442  00043E  C0CC  F0C4         	movff	_turn2BackLeft+1,_plat2Left+1
  2443                           
  2444                           ;main.c: 241: plat2Right = turn2BackRight;
  2445  000442  C0CD  F0C5         	movff	_turn2BackRight,_plat2Right
  2446  000446  C0CE  F0C6         	movff	_turn2BackRight+1,_plat2Right+1
  2447                           
  2448                           ;main.c: 243: unsigned char steps = 0;
  2449  00044A  0E00               	movlw	0
  2450  00044C  0100               	movlb	0	; () banked
  2451  00044E  6FB0               	movwf	main@steps_729& (0+255),b
  2452                           
  2453                           ;main.c: 244: while(steps<20 && screenMode==1){
  2454  000450  D016               	goto	l5544
  2455  000452                     l5534:
  2456                           
  2457                           ; BSR set to: 0
  2458                           ;main.c: 245: steps++;
  2459  000452  0100               	movlb	0	; () banked
  2460  000454  2BB0               	incf	main@steps_729& (0+255),f,b
  2461                           
  2462                           ; BSR set to: 0
  2463                           ;main.c: 246: LATDbits.LD1 = 1;;
  2464  000456  828C               	bsf	3980,1,c	;volatile
  2465                           
  2466                           ; BSR set to: 0
  2467                           ;main.c: 247: _delay((unsigned long)((5)*(10000000/4000.0)));
  2468  000458  0E11               	movlw	17
  2469  00045A  0100               	movlb	0	; () banked
  2470  00045C  6FA8               	movwf	??_main& (0+255),b
  2471  00045E  0E3A               	movlw	58
  2472  000460                     u5847:
  2473  000460  2EE8               	decfsz	wreg,f,c
  2474  000462  D7FE               	bra	u5847
  2475  000464  2FA8               	decfsz	??_main& (0+255),f,b
  2476  000466  D7FC               	bra	u5847
  2477  000468  F000               	nop	
  2478                           
  2479                           ;main.c: 248: LATDbits.LD1 = 0;;
  2480  00046A  928C               	bcf	3980,1,c	;volatile
  2481                           
  2482                           ;main.c: 249: _delay((unsigned long)((5)*(10000000/4000.0)));
  2483  00046C  0E11               	movlw	17
  2484  00046E  0100               	movlb	0	; () banked
  2485  000470  6FA8               	movwf	??_main& (0+255),b
  2486  000472  0E3A               	movlw	58
  2487  000474                     u5857:
  2488  000474  2EE8               	decfsz	wreg,f,c
  2489  000476  D7FE               	bra	u5857
  2490  000478  2FA8               	decfsz	??_main& (0+255),f,b
  2491  00047A  D7FC               	bra	u5857
  2492  00047C  F000               	nop	
  2493  00047E                     l5544:
  2494  00047E  0E14               	movlw	20
  2495  000480  0100               	movlb	0	; () banked
  2496  000482  61B0               	cpfslt	main@steps_729& (0+255),b
  2497  000484  D004               	goto	l5548
  2498                           
  2499                           ; BSR set to: 0
  2500  000486  0100               	movlb	0	; () banked
  2501  000488  05DC               	decf	_screenMode& (0+255),w,b
  2502  00048A  B4D8               	btfsc	status,2,c
  2503  00048C  D7E2               	goto	l5534
  2504  00048E                     l5548:
  2505                           
  2506                           ; BSR set to: 0
  2507                           ;main.c: 250: }
  2508                           ;main.c: 251: steps = 0;
  2509  00048E  0E00               	movlw	0
  2510  000490  0100               	movlb	0	; () banked
  2511  000492  6FB0               	movwf	main@steps_729& (0+255),b
  2512                           
  2513                           ;main.c: 252: while(steps < 178 && screenMode==1){
  2514  000494  D014               	goto	l5560
  2515  000496                     l5550:
  2516                           
  2517                           ; BSR set to: 0
  2518                           ;main.c: 253: steps++;
  2519  000496  0100               	movlb	0	; () banked
  2520  000498  2BB0               	incf	main@steps_729& (0+255),f,b
  2521                           
  2522                           ; BSR set to: 0
  2523                           ;main.c: 254: LATDbits.LD1 = 1;;
  2524  00049A  828C               	bsf	3980,1,c	;volatile
  2525                           
  2526                           ; BSR set to: 0
  2527                           ;main.c: 255: _delay((unsigned long)((2)*(10000000/4000.0)));
  2528  00049C  0E07               	movlw	7
  2529  00049E  0100               	movlb	0	; () banked
  2530  0004A0  6FA8               	movwf	??_main& (0+255),b
  2531  0004A2  0E7D               	movlw	125
  2532  0004A4                     u5867:
  2533  0004A4  2EE8               	decfsz	wreg,f,c
  2534  0004A6  D7FE               	bra	u5867
  2535  0004A8  2FA8               	decfsz	??_main& (0+255),f,b
  2536  0004AA  D7FC               	bra	u5867
  2537                           
  2538                           ;main.c: 256: LATDbits.LD1 = 0;;
  2539  0004AC  928C               	bcf	3980,1,c	;volatile
  2540                           
  2541                           ;main.c: 257: _delay((unsigned long)((2)*(10000000/4000.0)));
  2542  0004AE  0E07               	movlw	7
  2543  0004B0  0100               	movlb	0	; () banked
  2544  0004B2  6FA8               	movwf	??_main& (0+255),b
  2545  0004B4  0E7D               	movlw	125
  2546  0004B6                     u5877:
  2547  0004B6  2EE8               	decfsz	wreg,f,c
  2548  0004B8  D7FE               	bra	u5877
  2549  0004BA  2FA8               	decfsz	??_main& (0+255),f,b
  2550  0004BC  D7FC               	bra	u5877
  2551  0004BE                     l5560:
  2552  0004BE  0EB2               	movlw	178
  2553  0004C0  0100               	movlb	0	; () banked
  2554  0004C2  61B0               	cpfslt	main@steps_729& (0+255),b
  2555  0004C4  D004               	goto	l5564
  2556                           
  2557                           ; BSR set to: 0
  2558  0004C6  0100               	movlb	0	; () banked
  2559  0004C8  05DC               	decf	_screenMode& (0+255),w,b
  2560  0004CA  B4D8               	btfsc	status,2,c
  2561  0004CC  D7E4               	goto	l5550
  2562  0004CE                     l5564:
  2563                           
  2564                           ; BSR set to: 0
  2565                           ;main.c: 258: }
  2566                           ;main.c: 259: steps = 0;
  2567  0004CE  0E00               	movlw	0
  2568  0004D0  0100               	movlb	0	; () banked
  2569  0004D2  6FB0               	movwf	main@steps_729& (0+255),b
  2570                           
  2571                           ;main.c: 260: while(steps<2 && screenMode==1){
  2572  0004D4  D016               	goto	l5576
  2573  0004D6                     l5566:
  2574                           
  2575                           ; BSR set to: 0
  2576                           ;main.c: 261: steps++;
  2577  0004D6  0100               	movlb	0	; () banked
  2578  0004D8  2BB0               	incf	main@steps_729& (0+255),f,b
  2579                           
  2580                           ; BSR set to: 0
  2581                           ;main.c: 262: LATDbits.LD1 = 1;;
  2582  0004DA  828C               	bsf	3980,1,c	;volatile
  2583                           
  2584                           ; BSR set to: 0
  2585                           ;main.c: 263: _delay((unsigned long)((5)*(10000000/4000.0)));
  2586  0004DC  0E11               	movlw	17
  2587  0004DE  0100               	movlb	0	; () banked
  2588  0004E0  6FA8               	movwf	??_main& (0+255),b
  2589  0004E2  0E3A               	movlw	58
  2590  0004E4                     u5887:
  2591  0004E4  2EE8               	decfsz	wreg,f,c
  2592  0004E6  D7FE               	bra	u5887
  2593  0004E8  2FA8               	decfsz	??_main& (0+255),f,b
  2594  0004EA  D7FC               	bra	u5887
  2595  0004EC  F000               	nop	
  2596                           
  2597                           ;main.c: 264: LATDbits.LD1 = 0;;
  2598  0004EE  928C               	bcf	3980,1,c	;volatile
  2599                           
  2600                           ;main.c: 265: _delay((unsigned long)((5)*(10000000/4000.0)));
  2601  0004F0  0E11               	movlw	17
  2602  0004F2  0100               	movlb	0	; () banked
  2603  0004F4  6FA8               	movwf	??_main& (0+255),b
  2604  0004F6  0E3A               	movlw	58
  2605  0004F8                     u5897:
  2606  0004F8  2EE8               	decfsz	wreg,f,c
  2607  0004FA  D7FE               	bra	u5897
  2608  0004FC  2FA8               	decfsz	??_main& (0+255),f,b
  2609  0004FE  D7FC               	bra	u5897
  2610  000500  F000               	nop	
  2611  000502                     l5576:
  2612  000502  0E02               	movlw	2
  2613  000504  0100               	movlb	0	; () banked
  2614  000506  61B0               	cpfslt	main@steps_729& (0+255),b
  2615  000508  D004               	goto	l5580
  2616                           
  2617                           ; BSR set to: 0
  2618  00050A  0100               	movlb	0	; () banked
  2619  00050C  05DC               	decf	_screenMode& (0+255),w,b
  2620  00050E  B4D8               	btfsc	status,2,c
  2621  000510  D7E2               	goto	l5566
  2622  000512                     l5580:
  2623                           
  2624                           ; BSR set to: 0
  2625                           ;main.c: 266: }
  2626                           ;main.c: 267: steps = 0;
  2627  000512  0E00               	movlw	0
  2628  000514  0100               	movlb	0	; () banked
  2629  000516  6FB0               	movwf	main@steps_729& (0+255),b
  2630  000518                     l5582:
  2631                           
  2632                           ; BSR set to: 0
  2633  000518  0100               	movlb	0	; () banked
  2634  00051A  51C3               	movf	_plat2Left& (0+255),w,b
  2635  00051C  0100               	movlb	0	; () banked
  2636  00051E  11BF               	iorwf	_plat1Left& (0+255),w,b
  2637  000520  0100               	movlb	0	; () banked
  2638  000522  6FA8               	movwf	??_main& (0+255),b
  2639  000524  0100               	movlb	0	; () banked
  2640  000526  51C4               	movf	(_plat2Left+1)& (0+255),w,b
  2641  000528  0100               	movlb	0	; () banked
  2642  00052A  11C0               	iorwf	(_plat1Left+1)& (0+255),w,b
  2643  00052C  0100               	movlb	0	; () banked
  2644  00052E  6FA9               	movwf	(??_main+1)& (0+255),b
  2645  000530  0100               	movlb	0	; () banked
  2646  000532  51C1               	movf	_plat1Right& (0+255),w,b
  2647  000534  0100               	movlb	0	; () banked
  2648  000536  13A8               	iorwf	??_main& (0+255),f,b
  2649  000538  0100               	movlb	0	; () banked
  2650  00053A  51C2               	movf	(_plat1Right+1)& (0+255),w,b
  2651  00053C  0100               	movlb	0	; () banked
  2652  00053E  13A9               	iorwf	(??_main+1)& (0+255),f,b
  2653  000540  0100               	movlb	0	; () banked
  2654  000542  51C5               	movf	_plat2Right& (0+255),w,b
  2655  000544  0100               	movlb	0	; () banked
  2656  000546  13A8               	iorwf	??_main& (0+255),f,b
  2657  000548  0100               	movlb	0	; () banked
  2658  00054A  51C6               	movf	(_plat2Right+1)& (0+255),w,b
  2659  00054C  0100               	movlb	0	; () banked
  2660  00054E  13A9               	iorwf	(??_main+1)& (0+255),f,b
  2661  000550  0100               	movlb	0	; () banked
  2662  000552  51A8               	movf	??_main& (0+255),w,b
  2663  000554  0100               	movlb	0	; () banked
  2664  000556  11A9               	iorwf	(??_main+1)& (0+255),w,b
  2665  000558  B4D8               	btfsc	status,2,c
  2666  00055A  D004               	goto	l323
  2667                           
  2668                           ; BSR set to: 0
  2669  00055C  0100               	movlb	0	; () banked
  2670  00055E  05DC               	decf	_screenMode& (0+255),w,b
  2671  000560  B4D8               	btfsc	status,2,c
  2672  000562  D7DA               	goto	l5582
  2673  000564                     l323:
  2674                           
  2675                           ; BSR set to: 0
  2676                           ;main.c: 271: LATDbits.LD1 = 0;;
  2677  000564  928C               	bcf	3980,1,c	;volatile
  2678                           
  2679                           ;main.c: 272: LATDbits.LD0= 0;;
  2680  000566  908C               	bcf	3980,0,c	;volatile
  2681                           
  2682                           ; BSR set to: 0
  2683                           ;main.c: 273: plat1Right = 0;
  2684  000568  0E00               	movlw	0
  2685  00056A  0100               	movlb	0	; () banked
  2686  00056C  6FC2               	movwf	(_plat1Right+1)& (0+255),b
  2687  00056E  0E00               	movlw	0
  2688  000570  6FC1               	movwf	_plat1Right& (0+255),b
  2689                           
  2690                           ;main.c: 274: plat2Right = 0;
  2691  000572  0E00               	movlw	0
  2692  000574  0100               	movlb	0	; () banked
  2693  000576  6FC6               	movwf	(_plat2Right+1)& (0+255),b
  2694  000578  0E00               	movlw	0
  2695  00057A  6FC5               	movwf	_plat2Right& (0+255),b
  2696                           
  2697                           ;main.c: 275: plat1Left = 0;
  2698  00057C  0E00               	movlw	0
  2699  00057E  0100               	movlb	0	; () banked
  2700  000580  6FC0               	movwf	(_plat1Left+1)& (0+255),b
  2701  000582  0E00               	movlw	0
  2702  000584  6FBF               	movwf	_plat1Left& (0+255),b
  2703                           
  2704                           ;main.c: 276: plat2Left = 0;
  2705  000586  0E00               	movlw	0
  2706  000588  0100               	movlb	0	; () banked
  2707  00058A  6FC4               	movwf	(_plat2Left+1)& (0+255),b
  2708  00058C  0E00               	movlw	0
  2709  00058E  6FC3               	movwf	_plat2Left& (0+255),b
  2710                           
  2711                           ;main.c: 277: turn1BackRight = 0;
  2712  000590  0E00               	movlw	0
  2713  000592  0100               	movlb	0	; () banked
  2714  000594  6FCA               	movwf	(_turn1BackRight+1)& (0+255),b
  2715  000596  0E00               	movlw	0
  2716  000598  6FC9               	movwf	_turn1BackRight& (0+255),b
  2717                           
  2718                           ;main.c: 278: turn1BackLeft = 0;
  2719  00059A  0E00               	movlw	0
  2720  00059C  0100               	movlb	0	; () banked
  2721  00059E  6FC8               	movwf	(_turn1BackLeft+1)& (0+255),b
  2722  0005A0  0E00               	movlw	0
  2723  0005A2  6FC7               	movwf	_turn1BackLeft& (0+255),b
  2724                           
  2725                           ;main.c: 279: turn2BackRight = 0;
  2726  0005A4  0E00               	movlw	0
  2727  0005A6  0100               	movlb	0	; () banked
  2728  0005A8  6FCE               	movwf	(_turn2BackRight+1)& (0+255),b
  2729  0005AA  0E00               	movlw	0
  2730  0005AC  6FCD               	movwf	_turn2BackRight& (0+255),b
  2731                           
  2732                           ;main.c: 280: turn2BackLeft = 0;
  2733  0005AE  0E00               	movlw	0
  2734  0005B0  0100               	movlb	0	; () banked
  2735  0005B2  6FCC               	movwf	(_turn2BackLeft+1)& (0+255),b
  2736  0005B4  0E00               	movlw	0
  2737  0005B6  6FCB               	movwf	_turn2BackLeft& (0+255),b
  2738                           
  2739                           ; BSR set to: 0
  2740                           ;main.c: 281: LATCbits.LC1 = 0;;
  2741  0005B8  928B               	bcf	3979,1,c	;volatile
  2742                           
  2743                           ; BSR set to: 0
  2744                           ;main.c: 282: LATCbits.LC2 = 0;;
  2745  0005BA  948B               	bcf	3979,2,c	;volatile
  2746                           
  2747                           ; BSR set to: 0
  2748                           ;main.c: 283: LATCbits.LC6 = 0;;
  2749  0005BC  9C8B               	bcf	3979,6,c	;volatile
  2750                           
  2751                           ; BSR set to: 0
  2752                           ;main.c: 284: LATCbits.LC5 = 0;;
  2753  0005BE  9A8B               	bcf	3979,5,c	;volatile
  2754                           
  2755                           ; BSR set to: 0
  2756                           ;main.c: 285: LATCbits.LC0 = 0;;
  2757  0005C0  908B               	bcf	3979,0,c	;volatile
  2758                           
  2759                           ; BSR set to: 0
  2760                           ;main.c: 286: LATEbits.LE2 = 0;;
  2761  0005C2  948D               	bcf	3981,2,c	;volatile
  2762                           
  2763                           ; BSR set to: 0
  2764                           ;main.c: 287: LATEbits.LE1 = 0;;
  2765  0005C4  928D               	bcf	3981,1,c	;volatile
  2766                           
  2767                           ; BSR set to: 0
  2768                           ;main.c: 288: LATAbits.LA4 = 0;;
  2769  0005C6  9889               	bcf	3977,4,c	;volatile
  2770                           
  2771                           ;main.c: 289: doubleAA = 0;
  2772  0005C8  0E00               	movlw	0
  2773  0005CA  0100               	movlb	0	; () banked
  2774  0005CC  6FD3               	movwf	_doubleAA& (0+255),b
  2775                           
  2776                           ;main.c: 290: sorting = 0;
  2777  0005CE  0E00               	movlw	0
  2778  0005D0  6E4C               	movwf	_sorting,c
  2779  0005D2                     l5604:
  2780                           
  2781                           ; BSR set to: 0
  2782                           ;main.c: 291: }
  2783                           ;main.c: 292: wait_2ms(250);
  2784  0005D2  0E00               	movlw	0
  2785  0005D4  6E32               	movwf	wait_2ms@x+1,c
  2786  0005D6  0EFA               	movlw	250
  2787  0005D8  6E31               	movwf	wait_2ms@x,c
  2788  0005DA  ECE0  F012         	call	_wait_2ms	;wreg free
  2789  0005DE                     l5606:
  2790  0005DE  0100               	movlb	0	; () banked
  2791  0005E0  05DC               	decf	_screenMode& (0+255),w,b
  2792  0005E2  A4D8               	btfss	status,2,c
  2793  0005E4  D013               	goto	l5614
  2794  0005E6  D5AB               	goto	l5382
  2795  0005E8                     l5608:
  2796                           
  2797                           ; BSR set to: 0
  2798                           ;main.c: 295: lcdInst(0b10000000);;
  2799  0005E8  0E80               	movlw	128
  2800  0005EA  EC33  F013         	call	_lcdInst
  2801                           
  2802                           ;main.c: 296: printf("DONE! PRESS *   ");
  2803  0005EE  0E45               	movlw	low STR_5
  2804  0005F0  6E3D               	movwf	printf@f,c
  2805  0005F2  0EFF               	movlw	high STR_5
  2806  0005F4  6E3E               	movwf	printf@f+1,c
  2807  0005F6  EC02  F005         	call	_printf	;wreg free
  2808                           
  2809                           ;main.c: 297: lcdInst(0b11000000);;
  2810  0005FA  0EC0               	movlw	192
  2811  0005FC  EC33  F013         	call	_lcdInst
  2812                           
  2813                           ;main.c: 298: printf("TO CONTINUE     ");
  2814  000600  0E23               	movlw	low STR_6
  2815  000602  6E3D               	movwf	printf@f,c
  2816  000604  0EFF               	movlw	high STR_6
  2817  000606  6E3E               	movwf	printf@f+1,c
  2818  000608  EC02  F005         	call	_printf	;wreg free
  2819  00060C                     l5614:
  2820  00060C  0100               	movlb	0	; () banked
  2821  00060E  51DC               	movf	_screenMode& (0+255),w,b
  2822  000610  A4D8               	btfss	status,2,c
  2823  000612  D019               	goto	l5622
  2824  000614  D7E9               	goto	l5608
  2825  000616                     l5616:
  2826                           
  2827                           ; BSR set to: 0
  2828                           ;main.c: 301: lcdInst(0b10000000);;
  2829  000616  0E80               	movlw	128
  2830  000618  EC33  F013         	call	_lcdInst
  2831                           
  2832                           ;main.c: 302: printf("TOTAL RUN TIME: ");
  2833  00061C  0E67               	movlw	low STR_7
  2834  00061E  6E3D               	movwf	printf@f,c
  2835  000620  0EFF               	movlw	high STR_7
  2836  000622  6E3E               	movwf	printf@f+1,c
  2837  000624  EC02  F005         	call	_printf	;wreg free
  2838                           
  2839                           ;main.c: 303: lcdInst(0b11000000);;
  2840  000628  0EC0               	movlw	192
  2841  00062A  EC33  F013         	call	_lcdInst
  2842                           
  2843                           ;main.c: 304: printf("%02d:%02d               ", min, sec);
  2844  00062E  0EC2               	movlw	low STR_8
  2845  000630  6E3D               	movwf	printf@f,c
  2846  000632  0EFD               	movlw	high STR_8
  2847  000634  6E3E               	movwf	printf@f+1,c
  2848  000636  C0D4  F03F         	movff	_min,?_printf+2
  2849  00063A  6A40               	clrf	?_printf+3,c
  2850  00063C  C0DA  F041         	movff	_sec,?_printf+4
  2851  000640  6A42               	clrf	?_printf+5,c
  2852  000642  EC02  F005         	call	_printf	;wreg free
  2853  000646                     l5622:
  2854  000646  0E03               	movlw	3
  2855  000648  0100               	movlb	0	; () banked
  2856  00064A  19DC               	xorwf	_screenMode& (0+255),w,b
  2857  00064C  A4D8               	btfss	status,2,c
  2858  00064E  D016               	goto	l5630
  2859  000650  D7E2               	goto	l5616
  2860  000652                     l5624:
  2861                           
  2862                           ; BSR set to: 0
  2863                           ;main.c: 307: lcdInst(0b10000000);;
  2864  000652  0E80               	movlw	128
  2865  000654  EC33  F013         	call	_lcdInst
  2866                           
  2867                           ;main.c: 308: printf("TOTAL # OF      ");
  2868  000658  0E12               	movlw	low STR_9
  2869  00065A  6E3D               	movwf	printf@f,c
  2870  00065C  0EFF               	movlw	high STR_9
  2871  00065E  6E3E               	movwf	printf@f+1,c
  2872  000660  EC02  F005         	call	_printf	;wreg free
  2873                           
  2874                           ;main.c: 309: lcdInst(0b11000000);;
  2875  000664  0EC0               	movlw	192
  2876  000666  EC33  F013         	call	_lcdInst
  2877                           
  2878                           ;main.c: 310: printf("BATTERIES: %02d   ", numBats);
  2879  00066A  0E77               	movlw	low STR_10
  2880  00066C  6E3D               	movwf	printf@f,c
  2881  00066E  0EFE               	movlw	high STR_10
  2882  000670  6E3E               	movwf	printf@f+1,c
  2883  000672  C0D7  F03F         	movff	_numBats,?_printf+2
  2884  000676  6A40               	clrf	?_printf+3,c
  2885  000678  EC02  F005         	call	_printf	;wreg free
  2886  00067C                     l5630:
  2887  00067C  0E04               	movlw	4
  2888  00067E  0100               	movlb	0	; () banked
  2889  000680  19DC               	xorwf	_screenMode& (0+255),w,b
  2890  000682  A4D8               	btfss	status,2,c
  2891  000684  D016               	goto	l5638
  2892  000686  D7E5               	goto	l5624
  2893  000688                     l5632:
  2894                           
  2895                           ; BSR set to: 0
  2896                           ;main.c: 313: lcdInst(0b10000000);;
  2897  000688  0E80               	movlw	128
  2898  00068A  EC33  F013         	call	_lcdInst
  2899                           
  2900                           ;main.c: 314: printf("# OF C          ");
  2901  00068E  0EAC               	movlw	low STR_11
  2902  000690  6E3D               	movwf	printf@f,c
  2903  000692  0EFE               	movlw	high STR_11
  2904  000694  6E3E               	movwf	printf@f+1,c
  2905  000696  EC02  F005         	call	_printf	;wreg free
  2906                           
  2907                           ;main.c: 315: lcdInst(0b11000000);;
  2908  00069A  0EC0               	movlw	192
  2909  00069C  EC33  F013         	call	_lcdInst
  2910                           
  2911                           ;main.c: 316: printf("BATTERIES: %02d   ", numC);
  2912  0006A0  0E77               	movlw	low STR_10
  2913  0006A2  6E3D               	movwf	printf@f,c
  2914  0006A4  0EFE               	movlw	high STR_10
  2915  0006A6  6E3E               	movwf	printf@f+1,c
  2916  0006A8  C0D8  F03F         	movff	_numC,?_printf+2
  2917  0006AC  6A40               	clrf	?_printf+3,c
  2918  0006AE  EC02  F005         	call	_printf	;wreg free
  2919  0006B2                     l5638:
  2920  0006B2  0E05               	movlw	5
  2921  0006B4  0100               	movlb	0	; () banked
  2922  0006B6  19DC               	xorwf	_screenMode& (0+255),w,b
  2923  0006B8  A4D8               	btfss	status,2,c
  2924  0006BA  D016               	goto	l5646
  2925  0006BC  D7E5               	goto	l5632
  2926  0006BE                     l5640:
  2927                           
  2928                           ; BSR set to: 0
  2929                           ;main.c: 319: lcdInst(0b10000000);;
  2930  0006BE  0E80               	movlw	128
  2931  0006C0  EC33  F013         	call	_lcdInst
  2932                           
  2933                           ;main.c: 320: printf("# OF 9V         ");
  2934  0006C4  0ECE               	movlw	low STR_13
  2935  0006C6  6E3D               	movwf	printf@f,c
  2936  0006C8  0EFE               	movlw	high STR_13
  2937  0006CA  6E3E               	movwf	printf@f+1,c
  2938  0006CC  EC02  F005         	call	_printf	;wreg free
  2939                           
  2940                           ;main.c: 321: lcdInst(0b11000000);;
  2941  0006D0  0EC0               	movlw	192
  2942  0006D2  EC33  F013         	call	_lcdInst
  2943                           
  2944                           ;main.c: 322: printf("BATTERIES: %02d     ", num9V);
  2945  0006D6  0E4E               	movlw	low STR_14
  2946  0006D8  6E3D               	movwf	printf@f,c
  2947  0006DA  0EFE               	movlw	high STR_14
  2948  0006DC  6E3E               	movwf	printf@f+1,c
  2949  0006DE  C0D5  F03F         	movff	_num9V,?_printf+2
  2950  0006E2  6A40               	clrf	?_printf+3,c
  2951  0006E4  EC02  F005         	call	_printf	;wreg free
  2952  0006E8                     l5646:
  2953  0006E8  0E06               	movlw	6
  2954  0006EA  0100               	movlb	0	; () banked
  2955  0006EC  19DC               	xorwf	_screenMode& (0+255),w,b
  2956  0006EE  A4D8               	btfss	status,2,c
  2957  0006F0  D016               	goto	l5654
  2958  0006F2  D7E5               	goto	l5640
  2959  0006F4                     l5648:
  2960                           
  2961                           ; BSR set to: 0
  2962                           ;main.c: 325: lcdInst(0b10000000);;
  2963  0006F4  0E80               	movlw	128
  2964  0006F6  EC33  F013         	call	_lcdInst
  2965                           
  2966                           ;main.c: 326: printf("# OF AA         ");
  2967  0006FA  0EBD               	movlw	low STR_15
  2968  0006FC  6E3D               	movwf	printf@f,c
  2969  0006FE  0EFE               	movlw	high STR_15
  2970  000700  6E3E               	movwf	printf@f+1,c
  2971  000702  EC02  F005         	call	_printf	;wreg free
  2972                           
  2973                           ;main.c: 327: lcdInst(0b11000000);;
  2974  000706  0EC0               	movlw	192
  2975  000708  EC33  F013         	call	_lcdInst
  2976                           
  2977                           ;main.c: 328: printf("BATTERIES: %02d     ", numAA);
  2978  00070C  0E4E               	movlw	low STR_14
  2979  00070E  6E3D               	movwf	printf@f,c
  2980  000710  0EFE               	movlw	high STR_14
  2981  000712  6E3E               	movwf	printf@f+1,c
  2982  000714  C0D6  F03F         	movff	_numAA,?_printf+2
  2983  000718  6A40               	clrf	?_printf+3,c
  2984  00071A  EC02  F005         	call	_printf	;wreg free
  2985  00071E                     l5654:
  2986  00071E  0E07               	movlw	7
  2987  000720  0100               	movlb	0	; () banked
  2988  000722  19DC               	xorwf	_screenMode& (0+255),w,b
  2989  000724  A4D8               	btfss	status,2,c
  2990  000726  D016               	goto	l5662
  2991  000728  D7E5               	goto	l5648
  2992  00072A                     l5656:
  2993                           
  2994                           ; BSR set to: 0
  2995                           ;main.c: 331: lcdInst(0b10000000);;
  2996  00072A  0E80               	movlw	128
  2997  00072C  EC33  F013         	call	_lcdInst
  2998                           
  2999                           ;main.c: 332: printf("# OF DRAINED    ");
  3000  000730  0E34               	movlw	low STR_17
  3001  000732  6E3D               	movwf	printf@f,c
  3002  000734  0EFF               	movlw	high STR_17
  3003  000736  6E3E               	movwf	printf@f+1,c
  3004  000738  EC02  F005         	call	_printf	;wreg free
  3005                           
  3006                           ;main.c: 333: lcdInst(0b11000000);;
  3007  00073C  0EC0               	movlw	192
  3008  00073E  EC33  F013         	call	_lcdInst
  3009                           
  3010                           ;main.c: 334: printf("BATTERIES: %02d     ", numDrain);
  3011  000742  0E4E               	movlw	low STR_14
  3012  000744  6E3D               	movwf	printf@f,c
  3013  000746  0EFE               	movlw	high STR_14
  3014  000748  6E3E               	movwf	printf@f+1,c
  3015  00074A  C0D9  F03F         	movff	_numDrain,?_printf+2
  3016  00074E  6A40               	clrf	?_printf+3,c
  3017  000750  EC02  F005         	call	_printf	;wreg free
  3018  000754                     l5662:
  3019  000754  0E08               	movlw	8
  3020  000756  0100               	movlb	0	; () banked
  3021  000758  19DC               	xorwf	_screenMode& (0+255),w,b
  3022  00075A  A4D8               	btfss	status,2,c
  3023  00075C  D063               	goto	l5702
  3024  00075E  D7E5               	goto	l5656
  3025  000760                     l5664:
  3026                           
  3027                           ; BSR set to: 0
  3028                           ;main.c: 337: lcdInst(0b10000000);;
  3029  000760  0E80               	movlw	128
  3030  000762  EC33  F013         	call	_lcdInst
  3031                           
  3032                           ;main.c: 338: printf("LAST RUN:       ");
  3033  000766  0EF0               	movlw	low STR_19
  3034  000768  6E3D               	movwf	printf@f,c
  3035  00076A  0EFE               	movlw	high STR_19
  3036  00076C  6E3E               	movwf	printf@f+1,c
  3037  00076E  EC02  F005         	call	_printf	;wreg free
  3038                           
  3039                           ;main.c: 339: lcdInst(0b11000000);;
  3040  000772  0EC0               	movlw	192
  3041  000774  EC33  F013         	call	_lcdInst
  3042                           
  3043                           ;main.c: 340: printf("%02x/%02x/%02x        ", lastRunRTC[6],lastRunRTC[5],lastRunRTC[4]
      +                          );
  3044  000778  0EDB               	movlw	low STR_20
  3045  00077A  6E3D               	movwf	printf@f,c
  3046  00077C  0EFD               	movlw	high STR_20
  3047  00077E  6E3E               	movwf	printf@f+1,c
  3048  000780  C0B7  F03F         	movff	_lastRunRTC+6,?_printf+2
  3049  000784  6A40               	clrf	?_printf+3,c
  3050  000786  C0B6  F041         	movff	_lastRunRTC+5,?_printf+4
  3051  00078A  6A42               	clrf	?_printf+5,c
  3052  00078C  C0B5  F043         	movff	_lastRunRTC+4,?_printf+6
  3053  000790  6A44               	clrf	?_printf+7,c
  3054  000792  EC02  F005         	call	_printf	;wreg free
  3055                           
  3056                           ;main.c: 341: for(unsigned char i=0;i<200;i++){
  3057  000796  0E00               	movlw	0
  3058  000798  0100               	movlb	0	; () banked
  3059  00079A  6FAC               	movwf	main@i_754& (0+255),b
  3060  00079C                     l5672:
  3061                           
  3062                           ; BSR set to: 0
  3063  00079C  0EC7               	movlw	199
  3064  00079E  0100               	movlb	0	; () banked
  3065  0007A0  65AC               	cpfsgt	main@i_754& (0+255),b
  3066  0007A2  D001               	goto	l5676
  3067  0007A4  D011               	goto	l5684
  3068  0007A6                     l5676:
  3069                           
  3070                           ; BSR set to: 0
  3071                           ;main.c: 342: if (screenMode != 9)
  3072  0007A6  0E09               	movlw	9
  3073  0007A8  0100               	movlb	0	; () banked
  3074  0007AA  19DC               	xorwf	_screenMode& (0+255),w,b
  3075  0007AC  A4D8               	btfss	status,2,c
  3076  0007AE  D00C               	goto	l5684
  3077                           
  3078                           ; BSR set to: 0
  3079                           ;main.c: 344: _delay((unsigned long)((10)*(10000000/4000.0)));
  3080                           
  3081                           ; BSR set to: 0
  3082                           
  3083                           ; BSR set to: 0
  3084                           ;main.c: 343: break;
  3085  0007B0  0E21               	movlw	33
  3086  0007B2  0100               	movlb	0	; () banked
  3087  0007B4  6FA8               	movwf	??_main& (0+255),b
  3088  0007B6  0E76               	movlw	118
  3089  0007B8                     u5907:
  3090  0007B8  2EE8               	decfsz	wreg,f,c
  3091  0007BA  D7FE               	bra	u5907
  3092  0007BC  2FA8               	decfsz	??_main& (0+255),f,b
  3093  0007BE  D7FC               	bra	u5907
  3094  0007C0  F000               	nop	
  3095  0007C2  0100               	movlb	0	; () banked
  3096  0007C4  2BAC               	incf	main@i_754& (0+255),f,b
  3097  0007C6  D7EA               	goto	l5672
  3098  0007C8                     l5684:
  3099                           
  3100                           ; BSR set to: 0
  3101                           ;main.c: 345: }
  3102                           ;main.c: 346: lcdInst(0b10000000);;
  3103  0007C8  0E80               	movlw	128
  3104  0007CA  EC33  F013         	call	_lcdInst
  3105                           
  3106                           ;main.c: 347: lcdInst(0b11000000);;
  3107  0007CE  0EC0               	movlw	192
  3108  0007D0  EC33  F013         	call	_lcdInst
  3109                           
  3110                           ;main.c: 348: printf("%02x:%02x:%02x        ", lastRunRTC[2],lastRunRTC[1],lastRunRTC[0]
      +                          );
  3111  0007D4  0EF2               	movlw	low STR_21
  3112  0007D6  6E3D               	movwf	printf@f,c
  3113  0007D8  0EFD               	movlw	high STR_21
  3114  0007DA  6E3E               	movwf	printf@f+1,c
  3115  0007DC  C0B3  F03F         	movff	_lastRunRTC+2,?_printf+2
  3116  0007E0  6A40               	clrf	?_printf+3,c
  3117  0007E2  C0B2  F041         	movff	_lastRunRTC+1,?_printf+4
  3118  0007E6  6A42               	clrf	?_printf+5,c
  3119  0007E8  C0B1  F043         	movff	_lastRunRTC,?_printf+6
  3120  0007EC  6A44               	clrf	?_printf+7,c
  3121  0007EE  EC02  F005         	call	_printf	;wreg free
  3122                           
  3123                           ;main.c: 349: for(unsigned char i=0;i<200;i++){
  3124  0007F2  0E00               	movlw	0
  3125  0007F4  0100               	movlb	0	; () banked
  3126  0007F6  6FAD               	movwf	main@i_756& (0+255),b
  3127  0007F8                     l5690:
  3128                           
  3129                           ; BSR set to: 0
  3130  0007F8  0EC7               	movlw	199
  3131  0007FA  0100               	movlb	0	; () banked
  3132  0007FC  65AD               	cpfsgt	main@i_756& (0+255),b
  3133  0007FE  D001               	goto	l5694
  3134  000800  D011               	goto	l5702
  3135  000802                     l5694:
  3136                           
  3137                           ; BSR set to: 0
  3138                           ;main.c: 350: if (screenMode != 9)
  3139  000802  0E09               	movlw	9
  3140  000804  0100               	movlb	0	; () banked
  3141  000806  19DC               	xorwf	_screenMode& (0+255),w,b
  3142  000808  A4D8               	btfss	status,2,c
  3143  00080A  D00C               	goto	l5702
  3144                           
  3145                           ; BSR set to: 0
  3146                           ;main.c: 352: _delay((unsigned long)((10)*(10000000/4000.0)));
  3147                           
  3148                           ; BSR set to: 0
  3149                           
  3150                           ; BSR set to: 0
  3151                           ;main.c: 351: break;
  3152  00080C  0E21               	movlw	33
  3153  00080E  0100               	movlb	0	; () banked
  3154  000810  6FA8               	movwf	??_main& (0+255),b
  3155  000812  0E76               	movlw	118
  3156  000814                     u5917:
  3157  000814  2EE8               	decfsz	wreg,f,c
  3158  000816  D7FE               	bra	u5917
  3159  000818  2FA8               	decfsz	??_main& (0+255),f,b
  3160  00081A  D7FC               	bra	u5917
  3161  00081C  F000               	nop	
  3162  00081E  0100               	movlb	0	; () banked
  3163  000820  2BAD               	incf	main@i_756& (0+255),f,b
  3164  000822  D7EA               	goto	l5690
  3165  000824                     l5702:
  3166                           
  3167                           ; BSR set to: 0
  3168  000824  0E09               	movlw	9
  3169  000826  0100               	movlb	0	; () banked
  3170  000828  19DC               	xorwf	_screenMode& (0+255),w,b
  3171  00082A  A4D8               	btfss	status,2,c
  3172  00082C  D01D               	goto	l5710
  3173  00082E  D798               	goto	l5664
  3174  000830                     l5704:
  3175                           
  3176                           ; BSR set to: 0
  3177                           ;main.c: 356: lcdInst(0b10000000);;
  3178  000830  0E80               	movlw	128
  3179  000832  EC33  F013         	call	_lcdInst
  3180                           
  3181                           ;main.c: 357: printf("PERMANENT LOG A:");
  3182  000836  0E89               	movlw	low STR_22
  3183  000838  6E3D               	movwf	printf@f,c
  3184  00083A  0EFF               	movlw	high STR_22
  3185  00083C  6E3E               	movwf	printf@f+1,c
  3186  00083E  EC02  F005         	call	_printf	;wreg free
  3187                           
  3188                           ;main.c: 358: lcdInst(0b11000000);;
  3189  000842  0EC0               	movlw	192
  3190  000844  EC33  F013         	call	_lcdInst
  3191                           
  3192                           ;main.c: 359: printf("                ");
  3193  000848  0E9B               	movlw	low STR_23
  3194  00084A  6E3D               	movwf	printf@f,c
  3195  00084C  0EFE               	movlw	high STR_23
  3196  00084E  6E3E               	movwf	printf@f+1,c
  3197  000850  EC02  F005         	call	_printf	;wreg free
  3198                           
  3199                           ;main.c: 360: show_log(1, 10);
  3200  000854  0E00               	movlw	0
  3201  000856  0100               	movlb	0	; () banked
  3202  000858  6F8F               	movwf	(show_log@log_address+1)& (0+255),b
  3203  00085A  0E01               	movlw	1
  3204  00085C  6F8E               	movwf	show_log@log_address& (0+255),b
  3205  00085E  0E0A               	movlw	10
  3206  000860  0100               	movlb	0	; () banked
  3207  000862  6F90               	movwf	show_log@currScreen& (0+255),b
  3208  000864  EC5A  F008         	call	_show_log	;wreg free
  3209  000868                     l5710:
  3210  000868  0E0A               	movlw	10
  3211  00086A  0100               	movlb	0	; () banked
  3212  00086C  19DC               	xorwf	_screenMode& (0+255),w,b
  3213  00086E  A4D8               	btfss	status,2,c
  3214  000870  D01D               	goto	l5718
  3215  000872  D7DE               	goto	l5704
  3216  000874                     l5712:
  3217                           
  3218                           ; BSR set to: 0
  3219                           ;main.c: 363: lcdInst(0b10000000);;
  3220  000874  0E80               	movlw	128
  3221  000876  EC33  F013         	call	_lcdInst
  3222                           
  3223                           ;main.c: 364: printf("PERMANENT LOG B:");
  3224  00087A  0E9A               	movlw	low STR_24
  3225  00087C  6E3D               	movwf	printf@f,c
  3226  00087E  0EFF               	movlw	high STR_24
  3227  000880  6E3E               	movwf	printf@f+1,c
  3228  000882  EC02  F005         	call	_printf	;wreg free
  3229                           
  3230                           ;main.c: 365: lcdInst(0b11000000);;
  3231  000886  0EC0               	movlw	192
  3232  000888  EC33  F013         	call	_lcdInst
  3233                           
  3234                           ;main.c: 366: printf("                ");
  3235  00088C  0E9B               	movlw	low STR_23
  3236  00088E  6E3D               	movwf	printf@f,c
  3237  000890  0EFE               	movlw	high STR_23
  3238  000892  6E3E               	movwf	printf@f+1,c
  3239  000894  EC02  F005         	call	_printf	;wreg free
  3240                           
  3241                           ;main.c: 367: show_log(97, 11);
  3242  000898  0E00               	movlw	0
  3243  00089A  0100               	movlb	0	; () banked
  3244  00089C  6F8F               	movwf	(show_log@log_address+1)& (0+255),b
  3245  00089E  0E61               	movlw	97
  3246  0008A0  6F8E               	movwf	show_log@log_address& (0+255),b
  3247  0008A2  0E0B               	movlw	11
  3248  0008A4  0100               	movlb	0	; () banked
  3249  0008A6  6F90               	movwf	show_log@currScreen& (0+255),b
  3250  0008A8  EC5A  F008         	call	_show_log	;wreg free
  3251  0008AC                     l5718:
  3252  0008AC  0E0B               	movlw	11
  3253  0008AE  0100               	movlb	0	; () banked
  3254  0008B0  19DC               	xorwf	_screenMode& (0+255),w,b
  3255  0008B2  A4D8               	btfss	status,2,c
  3256  0008B4  D01D               	goto	l5726
  3257  0008B6  D7DE               	goto	l5712
  3258  0008B8                     l5720:
  3259                           
  3260                           ; BSR set to: 0
  3261                           ;main.c: 370: lcdInst(0b10000000);;
  3262  0008B8  0E80               	movlw	128
  3263  0008BA  EC33  F013         	call	_lcdInst
  3264                           
  3265                           ;main.c: 371: printf("PERMANENT LOG C:");
  3266  0008BE  0EAB               	movlw	low STR_26
  3267  0008C0  6E3D               	movwf	printf@f,c
  3268  0008C2  0EFF               	movlw	high STR_26
  3269  0008C4  6E3E               	movwf	printf@f+1,c
  3270  0008C6  EC02  F005         	call	_printf	;wreg free
  3271                           
  3272                           ;main.c: 372: lcdInst(0b11000000);;
  3273  0008CA  0EC0               	movlw	192
  3274  0008CC  EC33  F013         	call	_lcdInst
  3275                           
  3276                           ;main.c: 373: printf("                ");
  3277  0008D0  0E9B               	movlw	low STR_23
  3278  0008D2  6E3D               	movwf	printf@f,c
  3279  0008D4  0EFE               	movlw	high STR_23
  3280  0008D6  6E3E               	movwf	printf@f+1,c
  3281  0008D8  EC02  F005         	call	_printf	;wreg free
  3282                           
  3283                           ;main.c: 374: show_log(193, 12);
  3284  0008DC  0E00               	movlw	0
  3285  0008DE  0100               	movlb	0	; () banked
  3286  0008E0  6F8F               	movwf	(show_log@log_address+1)& (0+255),b
  3287  0008E2  0EC1               	movlw	193
  3288  0008E4  6F8E               	movwf	show_log@log_address& (0+255),b
  3289  0008E6  0E0C               	movlw	12
  3290  0008E8  0100               	movlb	0	; () banked
  3291  0008EA  6F90               	movwf	show_log@currScreen& (0+255),b
  3292  0008EC  EC5A  F008         	call	_show_log	;wreg free
  3293  0008F0                     l5726:
  3294  0008F0  0E0C               	movlw	12
  3295  0008F2  0100               	movlb	0	; () banked
  3296  0008F4  19DC               	xorwf	_screenMode& (0+255),w,b
  3297  0008F6  A4D8               	btfss	status,2,c
  3298  0008F8  D01D               	goto	l5734
  3299  0008FA  D7DE               	goto	l5720
  3300  0008FC                     l5728:
  3301                           
  3302                           ; BSR set to: 0
  3303                           ;main.c: 377: lcdInst(0b10000000);;
  3304  0008FC  0E80               	movlw	128
  3305  0008FE  EC33  F013         	call	_lcdInst
  3306                           
  3307                           ;main.c: 378: printf("PERMANENT LOG D:");
  3308  000902  0EBC               	movlw	low STR_28
  3309  000904  6E3D               	movwf	printf@f,c
  3310  000906  0EFF               	movlw	high STR_28
  3311  000908  6E3E               	movwf	printf@f+1,c
  3312  00090A  EC02  F005         	call	_printf	;wreg free
  3313                           
  3314                           ;main.c: 379: lcdInst(0b11000000);;
  3315  00090E  0EC0               	movlw	192
  3316  000910  EC33  F013         	call	_lcdInst
  3317                           
  3318                           ;main.c: 380: printf("                ");
  3319  000914  0E9B               	movlw	low STR_23
  3320  000916  6E3D               	movwf	printf@f,c
  3321  000918  0EFE               	movlw	high STR_23
  3322  00091A  6E3E               	movwf	printf@f+1,c
  3323  00091C  EC02  F005         	call	_printf	;wreg free
  3324                           
  3325                           ;main.c: 381: show_log(289, 13);
  3326  000920  0E01               	movlw	1
  3327  000922  0100               	movlb	0	; () banked
  3328  000924  6F8F               	movwf	(show_log@log_address+1)& (0+255),b
  3329  000926  0E21               	movlw	33
  3330  000928  6F8E               	movwf	show_log@log_address& (0+255),b
  3331  00092A  0E0D               	movlw	13
  3332  00092C  0100               	movlb	0	; () banked
  3333  00092E  6F90               	movwf	show_log@currScreen& (0+255),b
  3334  000930  EC5A  F008         	call	_show_log	;wreg free
  3335  000934                     l5734:
  3336  000934  0E0D               	movlw	13
  3337  000936  0100               	movlb	0	; () banked
  3338  000938  19DC               	xorwf	_screenMode& (0+255),w,b
  3339  00093A  A4D8               	btfss	status,2,c
  3340  00093C  D05C               	goto	l5756
  3341  00093E  D7DE               	goto	l5728
  3342  000940                     l5736:
  3343                           
  3344                           ; BSR set to: 0
  3345                           ;main.c: 386: I2C_Master_Start();
  3346  000940  EC53  F013         	call	_I2C_Master_Start	;wreg free
  3347                           
  3348                           ;main.c: 387: I2C_Master_Write(0b11010000);
  3349  000944  0E00               	movlw	0
  3350  000946  6E33               	movwf	I2C_Master_Write@d+1,c
  3351  000948  0ED0               	movlw	208
  3352  00094A  6E32               	movwf	I2C_Master_Write@d,c
  3353  00094C  EC45  F013         	call	_I2C_Master_Write	;wreg free
  3354                           
  3355                           ;main.c: 388: I2C_Master_Write(0x00);
  3356  000950  0E00               	movlw	0
  3357  000952  6E33               	movwf	I2C_Master_Write@d+1,c
  3358  000954  0E00               	movlw	0
  3359  000956  6E32               	movwf	I2C_Master_Write@d,c
  3360  000958  EC45  F013         	call	_I2C_Master_Write	;wreg free
  3361                           
  3362                           ;main.c: 389: I2C_Master_Stop();
  3363  00095C  EC4F  F013         	call	_I2C_Master_Stop	;wreg free
  3364                           
  3365                           ;main.c: 391: I2C_Master_Start();
  3366  000960  EC53  F013         	call	_I2C_Master_Start	;wreg free
  3367                           
  3368                           ;main.c: 392: I2C_Master_Write(0b11010001);
  3369  000964  0E00               	movlw	0
  3370  000966  6E33               	movwf	I2C_Master_Write@d+1,c
  3371  000968  0ED1               	movlw	209
  3372  00096A  6E32               	movwf	I2C_Master_Write@d,c
  3373  00096C  EC45  F013         	call	_I2C_Master_Write	;wreg free
  3374                           
  3375                           ;main.c: 393: for(unsigned char i=0;i<0x06;i++){
  3376  000970  0E00               	movlw	0
  3377  000972  0100               	movlb	0	; () banked
  3378  000974  6FAE               	movwf	main@i_768& (0+255),b
  3379  000976                     l5740:
  3380                           
  3381                           ; BSR set to: 0
  3382  000976  0E05               	movlw	5
  3383  000978  0100               	movlb	0	; () banked
  3384  00097A  65AE               	cpfsgt	main@i_768& (0+255),b
  3385  00097C  D001               	goto	l5744
  3386  00097E  D010               	goto	l5750
  3387  000980                     l5744:
  3388                           
  3389                           ; BSR set to: 0
  3390                           ;main.c: 394: realTime[i] = I2C_Master_Read(1);
  3391  000980  0100               	movlb	0	; () banked
  3392  000982  51AE               	movf	main@i_768& (0+255),w,b
  3393  000984  0D01               	mullw	1
  3394  000986  0EB8               	movlw	low _realTime
  3395  000988  24F3               	addwf	prodl,w,c
  3396  00098A  6ED9               	movwf	fsr2l,c
  3397  00098C  0E00               	movlw	high _realTime
  3398  00098E  20F4               	addwfc	prodh,w,c
  3399  000990  6EDA               	movwf	fsr2h,c
  3400  000992  0E01               	movlw	1
  3401  000994  EC76  F012         	call	_I2C_Master_Read
  3402  000998  6EDF               	movwf	indf2,c
  3403  00099A  0100               	movlb	0	; () banked
  3404  00099C  2BAE               	incf	main@i_768& (0+255),f,b
  3405  00099E  D7EB               	goto	l5740
  3406  0009A0                     l5750:
  3407                           
  3408                           ; BSR set to: 0
  3409                           ;main.c: 395: }
  3410                           ;main.c: 396: realTime[6] = I2C_Master_Read(0);
  3411  0009A0  0E00               	movlw	0
  3412  0009A2  EC76  F012         	call	_I2C_Master_Read
  3413  0009A6  0100               	movlb	0	; () banked
  3414  0009A8  6FBE               	movwf	(_realTime+6)& (0+255),b
  3415                           
  3416                           ;main.c: 397: I2C_Master_Stop();
  3417  0009AA  EC4F  F013         	call	_I2C_Master_Stop	;wreg free
  3418                           
  3419                           ;main.c: 398: lcdInst(0b10000000);;
  3420  0009AE  0E80               	movlw	128
  3421  0009B0  EC33  F013         	call	_lcdInst
  3422                           
  3423                           ;main.c: 399: printf("DATE: %02x/%02x/%02x  ", realTime[6],realTime[5],realTime[4]);
  3424  0009B4  0E09               	movlw	low STR_30
  3425  0009B6  6E3D               	movwf	printf@f,c
  3426  0009B8  0EFE               	movlw	high STR_30
  3427  0009BA  6E3E               	movwf	printf@f+1,c
  3428  0009BC  C0BE  F03F         	movff	_realTime+6,?_printf+2
  3429  0009C0  6A40               	clrf	?_printf+3,c
  3430  0009C2  C0BD  F041         	movff	_realTime+5,?_printf+4
  3431  0009C6  6A42               	clrf	?_printf+5,c
  3432  0009C8  C0BC  F043         	movff	_realTime+4,?_printf+6
  3433  0009CC  6A44               	clrf	?_printf+7,c
  3434  0009CE  EC02  F005         	call	_printf	;wreg free
  3435                           
  3436                           ;main.c: 400: lcdInst(0b11000000);;
  3437  0009D2  0EC0               	movlw	192
  3438  0009D4  EC33  F013         	call	_lcdInst
  3439                           
  3440                           ;main.c: 401: printf("TIME: %02x:%02x:%02x  ", realTime[2],realTime[1],realTime[0]);
  3441  0009D8  0E20               	movlw	low STR_31
  3442  0009DA  6E3D               	movwf	printf@f,c
  3443  0009DC  0EFE               	movlw	high STR_31
  3444  0009DE  6E3E               	movwf	printf@f+1,c
  3445  0009E0  C0BA  F03F         	movff	_realTime+2,?_printf+2
  3446  0009E4  6A40               	clrf	?_printf+3,c
  3447  0009E6  C0B9  F041         	movff	_realTime+1,?_printf+4
  3448  0009EA  6A42               	clrf	?_printf+5,c
  3449  0009EC  C0B8  F043         	movff	_realTime,?_printf+6
  3450  0009F0  6A44               	clrf	?_printf+7,c
  3451  0009F2  EC02  F005         	call	_printf	;wreg free
  3452  0009F6                     l5756:
  3453  0009F6  0E0E               	movlw	14
  3454  0009F8  0100               	movlb	0	; () banked
  3455  0009FA  19DC               	xorwf	_screenMode& (0+255),w,b
  3456  0009FC  A4D8               	btfss	status,2,c
  3457  0009FE  EF99  F000         	goto	l5380
  3458  000A02  D79E               	goto	l5736
  3459  000A04                     __end_of_main:
  3460                           	opt stack 0
  3461                           tblptru	equ	0xFF8
  3462                           tblptrh	equ	0xFF7
  3463                           tblptrl	equ	0xFF6
  3464                           tablat	equ	0xFF5
  3465                           prodh	equ	0xFF4
  3466                           prodl	equ	0xFF3
  3467                           intcon	equ	0xFF2
  3468                           intcon2	equ	0xFF1
  3469                           intcon3	equ	0xFF0
  3470                           postinc0	equ	0xFEE
  3471                           wreg	equ	0xFE8
  3472                           indf2	equ	0xFDF
  3473                           fsr2h	equ	0xFDA
  3474                           fsr2l	equ	0xFD9
  3475                           status	equ	0xFD8
  3476                           
  3477 ;; *************** function _wait_2ms *****************
  3478 ;; Defined at:
  3479 ;;		line 637 in file "../main.c"
  3480 ;; Parameters:    Size  Location     Type
  3481 ;;  x               2   48[COMRAM] unsigned int 
  3482 ;; Auto vars:     Size  Location     Type
  3483 ;;		None
  3484 ;; Return value:  Size  Location     Type
  3485 ;;                  1    wreg      void 
  3486 ;; Registers used:
  3487 ;;		wreg, status,2, status,0
  3488 ;; Tracked objects:
  3489 ;;		On entry : 0/0
  3490 ;;		On exit  : 0/0
  3491 ;;		Unchanged: 0/0
  3492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3493 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3494 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3495 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3496 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3497 ;;Total ram usage:        2 bytes
  3498 ;; Hardware stack levels used:    1
  3499 ;; Hardware stack levels required when called:    5
  3500 ;; This function calls:
  3501 ;;		Nothing
  3502 ;; This function is called by:
  3503 ;;		_main
  3504 ;; This function uses a non-reentrant model
  3505 ;;
  3506                           
  3507                           	psect	text1
  3508  0025C0                     __ptext1:
  3509                           	opt stack 0
  3510  0025C0                     _wait_2ms:
  3511                           	opt stack 25
  3512                           
  3513                           ;main.c: 638: count_2ms = x;
  3514                           
  3515                           ; BSR set to: 0
  3516                           ;incstack = 0
  3517  0025C0  C031  F047         	movff	wait_2ms@x,_count_2ms
  3518  0025C4  C032  F048         	movff	wait_2ms@x+1,_count_2ms+1
  3519  0025C8                     l3990:
  3520  0025C8  5047               	movf	_count_2ms,w,c
  3521  0025CA  1048               	iorwf	_count_2ms+1,w,c
  3522  0025CC  B4D8               	btfsc	status,2,c
  3523  0025CE  0012               	return	
  3524  0025D0  0100               	movlb	0	; () banked
  3525  0025D2  05DC               	decf	_screenMode& (0+255),w,b
  3526  0025D4  A4D8               	btfss	status,2,c
  3527  0025D6  0012               	return	
  3528  0025D8  D7F7               	goto	l3990
  3529  0025DA                     __end_of_wait_2ms:
  3530                           	opt stack 0
  3531                           tblptru	equ	0xFF8
  3532                           tblptrh	equ	0xFF7
  3533                           tblptrl	equ	0xFF6
  3534                           tablat	equ	0xFF5
  3535                           prodh	equ	0xFF4
  3536                           prodl	equ	0xFF3
  3537                           intcon	equ	0xFF2
  3538                           intcon2	equ	0xFF1
  3539                           intcon3	equ	0xFF0
  3540                           postinc0	equ	0xFEE
  3541                           wreg	equ	0xFE8
  3542                           indf2	equ	0xFDF
  3543                           fsr2h	equ	0xFDA
  3544                           fsr2l	equ	0xFD9
  3545                           status	equ	0xFD8
  3546                           
  3547 ;; *************** function _testBatteries *****************
  3548 ;; Defined at:
  3549 ;;		line 547 in file "../main.c"
  3550 ;; Parameters:    Size  Location     Type
  3551 ;;		None
  3552 ;; Auto vars:     Size  Location     Type
  3553 ;;  volt5           2   22[BANK0 ] unsigned int 
  3554 ;;  volt4           2   20[BANK0 ] unsigned int 
  3555 ;;  volt2           2   18[BANK0 ] unsigned int 
  3556 ;;  volt3           2   16[BANK0 ] unsigned int 
  3557 ;;  volt1           2   14[BANK0 ] unsigned int 
  3558 ;; Return value:  Size  Location     Type
  3559 ;;                  1    wreg      void 
  3560 ;; Registers used:
  3561 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3562 ;; Tracked objects:
  3563 ;;		On entry : 0/0
  3564 ;;		On exit  : 0/0
  3565 ;;		Unchanged: 0/0
  3566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3567 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3568 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3569 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3570 ;;      Totals:         2      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3571 ;;Total ram usage:       12 bytes
  3572 ;; Hardware stack levels used:    1
  3573 ;; Hardware stack levels required when called:    8
  3574 ;; This function calls:
  3575 ;;		_lcdInst
  3576 ;;		_printf
  3577 ;;		_readADC
  3578 ;; This function is called by:
  3579 ;;		_main
  3580 ;; This function uses a non-reentrant model
  3581 ;;
  3582                           
  3583                           	psect	text2
  3584  001C3C                     __ptext2:
  3585                           	opt stack 0
  3586  001C3C                     _testBatteries:
  3587                           	opt stack 22
  3588                           
  3589                           ;main.c: 567: readADC(1);
  3590                           
  3591                           ;incstack = 0
  3592  001C3C  0E01               	movlw	1
  3593  001C3E  EC03  F013         	call	_readADC
  3594                           
  3595                           ;main.c: 568: unsigned int volt1 = ADRES;
  3596  001C42  CFC3 F08E          	movff	4035,testBatteries@volt1	;volatile
  3597  001C46  CFC4 F08F          	movff	4036,testBatteries@volt1+1	;volatile
  3598                           
  3599                           ;main.c: 569: readADC(2);
  3600  001C4A  0E02               	movlw	2
  3601  001C4C  EC03  F013         	call	_readADC
  3602                           
  3603                           ;main.c: 570: unsigned int volt2 = ADRES;
  3604  001C50  CFC3 F092          	movff	4035,testBatteries@volt2	;volatile
  3605  001C54  CFC4 F093          	movff	4036,testBatteries@volt2+1	;volatile
  3606                           
  3607                           ;main.c: 571: readADC(3);
  3608  001C58  0E03               	movlw	3
  3609  001C5A  EC03  F013         	call	_readADC
  3610                           
  3611                           ;main.c: 572: unsigned int volt3 = ADRES;
  3612  001C5E  CFC3 F090          	movff	4035,testBatteries@volt3	;volatile
  3613  001C62  CFC4 F091          	movff	4036,testBatteries@volt3+1	;volatile
  3614                           
  3615                           ;main.c: 573: readADC(4);
  3616  001C66  0E04               	movlw	4
  3617  001C68  EC03  F013         	call	_readADC
  3618                           
  3619                           ;main.c: 574: unsigned int volt4 = ADRES;
  3620  001C6C  CFC3 F094          	movff	4035,testBatteries@volt4	;volatile
  3621  001C70  CFC4 F095          	movff	4036,testBatteries@volt4+1	;volatile
  3622                           
  3623                           ;main.c: 575: readADC(5);
  3624  001C74  0E05               	movlw	5
  3625  001C76  EC03  F013         	call	_readADC
  3626                           
  3627                           ;main.c: 576: unsigned int volt5 = ADRES;
  3628  001C7A  CFC3 F096          	movff	4035,testBatteries@volt5	;volatile
  3629  001C7E  CFC4 F097          	movff	4036,testBatteries@volt5+1	;volatile
  3630                           
  3631                           ;main.c: 578: lcdInst(0b10000000);;
  3632  001C82  0E80               	movlw	128
  3633  001C84  EC33  F013         	call	_lcdInst
  3634                           
  3635                           ;main.c: 579: printf("%04d %04d %04d", volt1, volt2, volt3);
  3636  001C88  0EEF               	movlw	low STR_33
  3637  001C8A  6E3D               	movwf	printf@f,c
  3638  001C8C  0EFF               	movlw	high STR_33
  3639  001C8E  6E3E               	movwf	printf@f+1,c
  3640  001C90  C08E  F03F         	movff	testBatteries@volt1,?_printf+2
  3641  001C94  C08F  F040         	movff	testBatteries@volt1+1,?_printf+3
  3642  001C98  C092  F041         	movff	testBatteries@volt2,?_printf+4
  3643  001C9C  C093  F042         	movff	testBatteries@volt2+1,?_printf+5
  3644  001CA0  C090  F043         	movff	testBatteries@volt3,?_printf+6
  3645  001CA4  C091  F044         	movff	testBatteries@volt3+1,?_printf+7
  3646  001CA8  EC02  F005         	call	_printf	;wreg free
  3647                           
  3648                           ;main.c: 580: lcdInst(0b11000000);;
  3649  001CAC  0EC0               	movlw	192
  3650  001CAE  EC33  F013         	call	_lcdInst
  3651                           
  3652                           ;main.c: 581: printf("%04d %04d       ", volt4, volt5);
  3653  001CB2  0E01               	movlw	low STR_34
  3654  001CB4  6E3D               	movwf	printf@f,c
  3655  001CB6  0EFF               	movlw	high STR_34
  3656  001CB8  6E3E               	movwf	printf@f+1,c
  3657  001CBA  C094  F03F         	movff	testBatteries@volt4,?_printf+2
  3658  001CBE  C095  F040         	movff	testBatteries@volt4+1,?_printf+3
  3659  001CC2  C096  F041         	movff	testBatteries@volt5,?_printf+4
  3660  001CC6  C097  F042         	movff	testBatteries@volt5+1,?_printf+5
  3661  001CCA  EC02  F005         	call	_printf	;wreg free
  3662                           
  3663                           ;main.c: 583: if (volt1){
  3664  001CCE  0100               	movlb	0	; () banked
  3665  001CD0  518E               	movf	testBatteries@volt1& (0+255),w,b
  3666  001CD2  0100               	movlb	0	; () banked
  3667  001CD4  118F               	iorwf	(testBatteries@volt1+1)& (0+255),w,b
  3668  001CD6  B4D8               	btfsc	status,2,c
  3669  001CD8  D00D               	goto	l5150
  3670                           
  3671                           ; BSR set to: 0
  3672                           ;main.c: 584: countC++;
  3673  001CDA  0100               	movlb	0	; () banked
  3674  001CDC  2BD1               	incf	_countC& (0+255),f,b
  3675                           
  3676                           ; BSR set to: 0
  3677                           ;main.c: 585: plat1Right = 512;
  3678  001CDE  0E02               	movlw	2
  3679  001CE0  0100               	movlb	0	; () banked
  3680  001CE2  6FC2               	movwf	(_plat1Right+1)& (0+255),b
  3681  001CE4  0E00               	movlw	0
  3682  001CE6  6FC1               	movwf	_plat1Right& (0+255),b
  3683                           
  3684                           ; BSR set to: 0
  3685                           ;main.c: 586: plat2Left = 512;
  3686  001CE8  0E02               	movlw	2
  3687  001CEA  0100               	movlb	0	; () banked
  3688  001CEC  6FC4               	movwf	(_plat2Left+1)& (0+255),b
  3689  001CEE  0E00               	movlw	0
  3690  001CF0  6FC3               	movwf	_plat2Left& (0+255),b
  3691                           
  3692                           ; BSR set to: 0
  3693                           ;main.c: 587: return;
  3694  001CF2  0012               	return	
  3695  001CF4                     l5150:
  3696                           
  3697                           ; BSR set to: 0
  3698                           ;main.c: 588: }
  3699                           ;main.c: 589: if (!(volt1 | volt2 | volt3 | volt4 | volt5)){
  3700  001CF4  0100               	movlb	0	; () banked
  3701  001CF6  5192               	movf	testBatteries@volt2& (0+255),w,b
  3702  001CF8  0100               	movlb	0	; () banked
  3703  001CFA  118E               	iorwf	testBatteries@volt1& (0+255),w,b
  3704  001CFC  6E45               	movwf	??_testBatteries& (0+255),c
  3705  001CFE  0100               	movlb	0	; () banked
  3706  001D00  5193               	movf	(testBatteries@volt2+1)& (0+255),w,b
  3707  001D02  0100               	movlb	0	; () banked
  3708  001D04  118F               	iorwf	(testBatteries@volt1+1)& (0+255),w,b
  3709  001D06  6E46               	movwf	(??_testBatteries+1)& (0+255),c
  3710  001D08  0100               	movlb	0	; () banked
  3711  001D0A  5190               	movf	testBatteries@volt3& (0+255),w,b
  3712  001D0C  1245               	iorwf	??_testBatteries,f,c
  3713  001D0E  0100               	movlb	0	; () banked
  3714  001D10  5191               	movf	(testBatteries@volt3+1)& (0+255),w,b
  3715  001D12  1246               	iorwf	??_testBatteries+1,f,c
  3716  001D14  0100               	movlb	0	; () banked
  3717  001D16  5194               	movf	testBatteries@volt4& (0+255),w,b
  3718  001D18  1245               	iorwf	??_testBatteries,f,c
  3719  001D1A  0100               	movlb	0	; () banked
  3720  001D1C  5195               	movf	(testBatteries@volt4+1)& (0+255),w,b
  3721  001D1E  1246               	iorwf	??_testBatteries+1,f,c
  3722  001D20  0100               	movlb	0	; () banked
  3723  001D22  5196               	movf	testBatteries@volt5& (0+255),w,b
  3724  001D24  1245               	iorwf	??_testBatteries,f,c
  3725  001D26  0100               	movlb	0	; () banked
  3726  001D28  5197               	movf	(testBatteries@volt5+1)& (0+255),w,b
  3727  001D2A  1246               	iorwf	??_testBatteries+1,f,c
  3728  001D2C  5045               	movf	??_testBatteries,w,c
  3729  001D2E  1046               	iorwf	??_testBatteries+1,w,c
  3730  001D30  A4D8               	btfss	status,2,c
  3731  001D32  D00D               	goto	l5160
  3732                           
  3733                           ; BSR set to: 0
  3734                           ;main.c: 590: countDrain++;
  3735  001D34  0100               	movlb	0	; () banked
  3736  001D36  2BD2               	incf	_countDrain& (0+255),f,b
  3737                           
  3738                           ; BSR set to: 0
  3739                           ;main.c: 591: plat1Left = 512;
  3740  001D38  0E02               	movlw	2
  3741  001D3A  0100               	movlb	0	; () banked
  3742  001D3C  6FC0               	movwf	(_plat1Left+1)& (0+255),b
  3743  001D3E  0E00               	movlw	0
  3744  001D40  6FBF               	movwf	_plat1Left& (0+255),b
  3745                           
  3746                           ; BSR set to: 0
  3747                           ;main.c: 592: plat2Right = 512;
  3748  001D42  0E02               	movlw	2
  3749  001D44  0100               	movlb	0	; () banked
  3750  001D46  6FC6               	movwf	(_plat2Right+1)& (0+255),b
  3751  001D48  0E00               	movlw	0
  3752  001D4A  6FC5               	movwf	_plat2Right& (0+255),b
  3753                           
  3754                           ; BSR set to: 0
  3755                           ;main.c: 593: return;
  3756  001D4C  0012               	return	
  3757  001D4E                     l5160:
  3758                           
  3759                           ; BSR set to: 0
  3760                           ;main.c: 594: }
  3761                           ;main.c: 595: if (volt2 && volt3){
  3762  001D4E  0100               	movlb	0	; () banked
  3763  001D50  5192               	movf	testBatteries@volt2& (0+255),w,b
  3764  001D52  0100               	movlb	0	; () banked
  3765  001D54  1193               	iorwf	(testBatteries@volt2+1)& (0+255),w,b
  3766  001D56  B4D8               	btfsc	status,2,c
  3767  001D58  D00F               	goto	l5170
  3768                           
  3769                           ; BSR set to: 0
  3770  001D5A  0100               	movlb	0	; () banked
  3771  001D5C  5190               	movf	testBatteries@volt3& (0+255),w,b
  3772  001D5E  0100               	movlb	0	; () banked
  3773  001D60  1191               	iorwf	(testBatteries@volt3+1)& (0+255),w,b
  3774  001D62  B4D8               	btfsc	status,2,c
  3775  001D64  D009               	goto	l5170
  3776                           
  3777                           ; BSR set to: 0
  3778                           ;main.c: 596: countAA = countAA + 2;
  3779  001D66  0100               	movlb	0	; () banked
  3780  001D68  51D0               	movf	_countAA& (0+255),w,b
  3781  001D6A  0F02               	addlw	2
  3782  001D6C  0100               	movlb	0	; () banked
  3783  001D6E  6FD0               	movwf	_countAA& (0+255),b
  3784                           
  3785                           ; BSR set to: 0
  3786                           ;main.c: 597: doubleAA = 1;
  3787  001D70  0E01               	movlw	1
  3788  001D72  0100               	movlb	0	; () banked
  3789  001D74  6FD3               	movwf	_doubleAA& (0+255),b
  3790                           
  3791                           ; BSR set to: 0
  3792                           ;main.c: 598: return;
  3793  001D76  0012               	return	
  3794  001D78                     l5170:
  3795                           
  3796                           ; BSR set to: 0
  3797                           ;main.c: 599: }
  3798                           ;main.c: 600: if (volt4 >200 | volt5 > 200){
  3799  001D78  0100               	movlb	0	; () banked
  3800  001D7A  5195               	movf	(testBatteries@volt4+1)& (0+255),w,b
  3801  001D7C  E10D               	bnz	l5174
  3802  001D7E  0EC9               	movlw	201
  3803  001D80  0100               	movlb	0	; () banked
  3804  001D82  5D94               	subwf	testBatteries@volt4& (0+255),w,b
  3805  001D84  B0D8               	btfsc	status,0,c
  3806  001D86  D008               	goto	l5174
  3807                           
  3808                           ; BSR set to: 0
  3809  001D88  0100               	movlb	0	; () banked
  3810  001D8A  5197               	movf	(testBatteries@volt5+1)& (0+255),w,b
  3811  001D8C  E105               	bnz	l5174
  3812  001D8E  0EC9               	movlw	201
  3813  001D90  0100               	movlb	0	; () banked
  3814  001D92  5D96               	subwf	testBatteries@volt5& (0+255),w,b
  3815  001D94  A0D8               	btfss	status,0,c
  3816  001D96  D00D               	goto	l5180
  3817  001D98                     l5174:
  3818                           
  3819                           ; BSR set to: 0
  3820                           ;main.c: 601: plat1Right = 512;
  3821  001D98  0E02               	movlw	2
  3822  001D9A  0100               	movlb	0	; () banked
  3823  001D9C  6FC2               	movwf	(_plat1Right+1)& (0+255),b
  3824  001D9E  0E00               	movlw	0
  3825  001DA0  6FC1               	movwf	_plat1Right& (0+255),b
  3826                           
  3827                           ;main.c: 602: plat2Left = 512;
  3828  001DA2  0E02               	movlw	2
  3829  001DA4  0100               	movlb	0	; () banked
  3830  001DA6  6FC4               	movwf	(_plat2Left+1)& (0+255),b
  3831  001DA8  0E00               	movlw	0
  3832  001DAA  6FC3               	movwf	_plat2Left& (0+255),b
  3833                           
  3834                           ; BSR set to: 0
  3835                           ;main.c: 603: count9V++;
  3836  001DAC  0100               	movlb	0	; () banked
  3837  001DAE  2BCF               	incf	_count9V& (0+255),f,b
  3838                           
  3839                           ; BSR set to: 0
  3840                           ;main.c: 604: return;
  3841  001DB0  0012               	return	
  3842  001DB2                     l5180:
  3843                           
  3844                           ; BSR set to: 0
  3845                           ;main.c: 605: }
  3846                           ;main.c: 606: if (volt4 > 80 | volt5 > 80){
  3847  001DB2  0100               	movlb	0	; () banked
  3848  001DB4  5195               	movf	(testBatteries@volt4+1)& (0+255),w,b
  3849  001DB6  E10D               	bnz	l5184
  3850  001DB8  0E51               	movlw	81
  3851  001DBA  0100               	movlb	0	; () banked
  3852  001DBC  5D94               	subwf	testBatteries@volt4& (0+255),w,b
  3853  001DBE  B0D8               	btfsc	status,0,c
  3854  001DC0  D008               	goto	l5184
  3855                           
  3856                           ; BSR set to: 0
  3857  001DC2  0100               	movlb	0	; () banked
  3858  001DC4  5197               	movf	(testBatteries@volt5+1)& (0+255),w,b
  3859  001DC6  E105               	bnz	l5184
  3860  001DC8  0E51               	movlw	81
  3861  001DCA  0100               	movlb	0	; () banked
  3862  001DCC  5D96               	subwf	testBatteries@volt5& (0+255),w,b
  3863  001DCE  A0D8               	btfss	status,0,c
  3864  001DD0  D00D               	goto	l5192
  3865  001DD2                     l5184:
  3866                           
  3867                           ; BSR set to: 0
  3868                           ;main.c: 607: countDrain++;
  3869  001DD2  0100               	movlb	0	; () banked
  3870  001DD4  2BD2               	incf	_countDrain& (0+255),f,b
  3871                           
  3872                           ; BSR set to: 0
  3873                           ;main.c: 608: plat1Left = 512;
  3874  001DD6  0E02               	movlw	2
  3875  001DD8  0100               	movlb	0	; () banked
  3876  001DDA  6FC0               	movwf	(_plat1Left+1)& (0+255),b
  3877  001DDC  0E00               	movlw	0
  3878  001DDE  6FBF               	movwf	_plat1Left& (0+255),b
  3879                           
  3880                           ; BSR set to: 0
  3881                           ;main.c: 609: plat2Right = 512;
  3882  001DE0  0E02               	movlw	2
  3883  001DE2  0100               	movlb	0	; () banked
  3884  001DE4  6FC6               	movwf	(_plat2Right+1)& (0+255),b
  3885  001DE6  0E00               	movlw	0
  3886  001DE8  6FC5               	movwf	_plat2Right& (0+255),b
  3887                           
  3888                           ; BSR set to: 0
  3889                           ;main.c: 610: return;
  3890  001DEA  0012               	return	
  3891  001DEC                     l5192:
  3892                           
  3893                           ; BSR set to: 0
  3894                           ;main.c: 611: }
  3895                           ;main.c: 612: if (volt2 | volt3){
  3896  001DEC  0100               	movlb	0	; () banked
  3897  001DEE  5190               	movf	testBatteries@volt3& (0+255),w,b
  3898  001DF0  0100               	movlb	0	; () banked
  3899  001DF2  1192               	iorwf	testBatteries@volt2& (0+255),w,b
  3900  001DF4  6E45               	movwf	??_testBatteries& (0+255),c
  3901  001DF6  0100               	movlb	0	; () banked
  3902  001DF8  5191               	movf	(testBatteries@volt3+1)& (0+255),w,b
  3903  001DFA  0100               	movlb	0	; () banked
  3904  001DFC  1193               	iorwf	(testBatteries@volt2+1)& (0+255),w,b
  3905  001DFE  6E46               	movwf	(??_testBatteries+1)& (0+255),c
  3906  001E00  5045               	movf	??_testBatteries,w,c
  3907  001E02  1046               	iorwf	??_testBatteries+1,w,c
  3908  001E04  B4D8               	btfsc	status,2,c
  3909  001E06  D035               	goto	l5212
  3910                           
  3911                           ; BSR set to: 0
  3912                           ;main.c: 613: countAA++;
  3913  001E08  0100               	movlb	0	; () banked
  3914  001E0A  2BD0               	incf	_countAA& (0+255),f,b
  3915                           
  3916                           ; BSR set to: 0
  3917                           ;main.c: 614: if (volt4 && volt5){
  3918  001E0C  0100               	movlb	0	; () banked
  3919  001E0E  5194               	movf	testBatteries@volt4& (0+255),w,b
  3920  001E10  0100               	movlb	0	; () banked
  3921  001E12  1195               	iorwf	(testBatteries@volt4+1)& (0+255),w,b
  3922  001E14  B4D8               	btfsc	status,2,c
  3923  001E16  D011               	goto	l5204
  3924                           
  3925                           ; BSR set to: 0
  3926  001E18  0100               	movlb	0	; () banked
  3927  001E1A  5196               	movf	testBatteries@volt5& (0+255),w,b
  3928  001E1C  0100               	movlb	0	; () banked
  3929  001E1E  1197               	iorwf	(testBatteries@volt5+1)& (0+255),w,b
  3930  001E20  B4D8               	btfsc	status,2,c
  3931  001E22  D00B               	goto	l5204
  3932                           
  3933                           ; BSR set to: 0
  3934                           ;main.c: 615: plat1Right = 512;
  3935  001E24  0E02               	movlw	2
  3936  001E26  0100               	movlb	0	; () banked
  3937  001E28  6FC2               	movwf	(_plat1Right+1)& (0+255),b
  3938  001E2A  0E00               	movlw	0
  3939  001E2C  6FC1               	movwf	_plat1Right& (0+255),b
  3940                           
  3941                           ;main.c: 616: plat2Left = 512;
  3942  001E2E  0E02               	movlw	2
  3943  001E30  0100               	movlb	0	; () banked
  3944  001E32  6FC4               	movwf	(_plat2Left+1)& (0+255),b
  3945  001E34  0E00               	movlw	0
  3946  001E36  6FC3               	movwf	_plat2Left& (0+255),b
  3947                           
  3948                           ; BSR set to: 0
  3949                           ;main.c: 617: return;
  3950  001E38  0012               	return	
  3951  001E3A                     l5204:
  3952                           
  3953                           ; BSR set to: 0
  3954                           ;main.c: 618: }
  3955                           ;main.c: 619: if (volt2){
  3956  001E3A  0100               	movlb	0	; () banked
  3957  001E3C  5192               	movf	testBatteries@volt2& (0+255),w,b
  3958  001E3E  0100               	movlb	0	; () banked
  3959  001E40  1193               	iorwf	(testBatteries@volt2+1)& (0+255),w,b
  3960  001E42  B4D8               	btfsc	status,2,c
  3961  001E44  D00B               	goto	l5208
  3962                           
  3963                           ; BSR set to: 0
  3964                           ;main.c: 620: plat1Right = 512;
  3965  001E46  0E02               	movlw	2
  3966  001E48  0100               	movlb	0	; () banked
  3967  001E4A  6FC2               	movwf	(_plat1Right+1)& (0+255),b
  3968  001E4C  0E00               	movlw	0
  3969  001E4E  6FC1               	movwf	_plat1Right& (0+255),b
  3970                           
  3971                           ;main.c: 621: plat2Right = 512;
  3972  001E50  0E02               	movlw	2
  3973  001E52  0100               	movlb	0	; () banked
  3974  001E54  6FC6               	movwf	(_plat2Right+1)& (0+255),b
  3975  001E56  0E00               	movlw	0
  3976  001E58  6FC5               	movwf	_plat2Right& (0+255),b
  3977                           
  3978                           ;main.c: 622: }
  3979  001E5A  0012               	return	
  3980  001E5C                     l5208:
  3981                           
  3982                           ; BSR set to: 0
  3983                           ;main.c: 623: else{
  3984                           ;main.c: 624: plat2Left = 512;
  3985  001E5C  0E02               	movlw	2
  3986  001E5E  0100               	movlb	0	; () banked
  3987  001E60  6FC4               	movwf	(_plat2Left+1)& (0+255),b
  3988  001E62  0E00               	movlw	0
  3989  001E64  6FC3               	movwf	_plat2Left& (0+255),b
  3990                           
  3991                           ;main.c: 625: plat1Left = 512;
  3992  001E66  0E02               	movlw	2
  3993  001E68  0100               	movlb	0	; () banked
  3994  001E6A  6FC0               	movwf	(_plat1Left+1)& (0+255),b
  3995  001E6C  0E00               	movlw	0
  3996  001E6E  6FBF               	movwf	_plat1Left& (0+255),b
  3997                           
  3998                           ; BSR set to: 0
  3999                           ;main.c: 626: }
  4000                           ;main.c: 627: return;
  4001                           
  4002                           ; BSR set to: 0
  4003  001E70  0012               	return	
  4004  001E72                     l5212:
  4005                           
  4006                           ; BSR set to: 0
  4007                           ;main.c: 628: }
  4008                           ;main.c: 631: plat1Left = 512;
  4009  001E72  0E02               	movlw	2
  4010  001E74  0100               	movlb	0	; () banked
  4011  001E76  6FC0               	movwf	(_plat1Left+1)& (0+255),b
  4012  001E78  0E00               	movlw	0
  4013  001E7A  6FBF               	movwf	_plat1Left& (0+255),b
  4014                           
  4015                           ;main.c: 632: plat2Right = 512;
  4016  001E7C  0E02               	movlw	2
  4017  001E7E  0100               	movlb	0	; () banked
  4018  001E80  6FC6               	movwf	(_plat2Right+1)& (0+255),b
  4019  001E82  0E00               	movlw	0
  4020  001E84  6FC5               	movwf	_plat2Right& (0+255),b
  4021                           
  4022                           ; BSR set to: 0
  4023                           ;main.c: 633: countDrain++;
  4024  001E86  0100               	movlb	0	; () banked
  4025  001E88  2BD2               	incf	_countDrain& (0+255),f,b
  4026  001E8A  0012               	return	
  4027  001E8C                     __end_of_testBatteries:
  4028                           	opt stack 0
  4029                           tblptru	equ	0xFF8
  4030                           tblptrh	equ	0xFF7
  4031                           tblptrl	equ	0xFF6
  4032                           tablat	equ	0xFF5
  4033                           prodh	equ	0xFF4
  4034                           prodl	equ	0xFF3
  4035                           intcon	equ	0xFF2
  4036                           intcon2	equ	0xFF1
  4037                           intcon3	equ	0xFF0
  4038                           postinc0	equ	0xFEE
  4039                           wreg	equ	0xFE8
  4040                           indf2	equ	0xFDF
  4041                           fsr2h	equ	0xFDA
  4042                           fsr2l	equ	0xFD9
  4043                           status	equ	0xFD8
  4044                           
  4045 ;; *************** function _readADC *****************
  4046 ;; Defined at:
  4047 ;;		line 458 in file "../main.c"
  4048 ;; Parameters:    Size  Location     Type
  4049 ;;  channel         1    wreg     unsigned char 
  4050 ;; Auto vars:     Size  Location     Type
  4051 ;;  channel         1   48[COMRAM] unsigned char 
  4052 ;; Return value:  Size  Location     Type
  4053 ;;                  1    wreg      void 
  4054 ;; Registers used:
  4055 ;;		wreg, status,2, status,0
  4056 ;; Tracked objects:
  4057 ;;		On entry : 0/0
  4058 ;;		On exit  : 0/0
  4059 ;;		Unchanged: 0/0
  4060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4061 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4062 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4063 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4064 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4065 ;;Total ram usage:        1 bytes
  4066 ;; Hardware stack levels used:    1
  4067 ;; Hardware stack levels required when called:    5
  4068 ;; This function calls:
  4069 ;;		Nothing
  4070 ;; This function is called by:
  4071 ;;		_main
  4072 ;;		_testBatteries
  4073 ;; This function uses a non-reentrant model
  4074 ;;
  4075                           
  4076                           	psect	text3
  4077  002606                     __ptext3:
  4078                           	opt stack 0
  4079  002606                     _readADC:
  4080                           	opt stack 24
  4081                           
  4082                           ; BSR set to: 0
  4083                           ;incstack = 0
  4084                           ;readADC@channel stored from wreg
  4085  002606  6E31               	movwf	readADC@channel,c
  4086                           
  4087                           ;main.c: 460: ADCON0 = channel << 2;
  4088  002608  4431               	rlncf	readADC@channel,w,c
  4089  00260A  46E8               	rlncf	wreg,f,c
  4090  00260C  0BFC               	andlw	252
  4091  00260E  6EC2               	movwf	4034,c	;volatile
  4092                           
  4093                           ;main.c: 461: ADCON0bits.ADON = 1;
  4094  002610  80C2               	bsf	4034,0,c	;volatile
  4095                           
  4096                           ;main.c: 462: ADCON0bits.GO = 1;
  4097  002612  82C2               	bsf	4034,1,c	;volatile
  4098  002614                     l398:
  4099  002614  A2C2               	btfss	4034,1,c	;volatile
  4100  002616  0012               	return	
  4101  002618  D7FD               	goto	l398
  4102  00261A                     __end_of_readADC:
  4103                           	opt stack 0
  4104                           tblptru	equ	0xFF8
  4105                           tblptrh	equ	0xFF7
  4106                           tblptrl	equ	0xFF6
  4107                           tablat	equ	0xFF5
  4108                           prodh	equ	0xFF4
  4109                           prodl	equ	0xFF3
  4110                           intcon	equ	0xFF2
  4111                           intcon2	equ	0xFF1
  4112                           intcon3	equ	0xFF0
  4113                           postinc0	equ	0xFEE
  4114                           wreg	equ	0xFE8
  4115                           indf2	equ	0xFDF
  4116                           fsr2h	equ	0xFDA
  4117                           fsr2l	equ	0xFD9
  4118                           status	equ	0xFD8
  4119                           
  4120 ;; *************** function _stopOperation *****************
  4121 ;; Defined at:
  4122 ;;		line 466 in file "../main.c"
  4123 ;; Parameters:    Size  Location     Type
  4124 ;;		None
  4125 ;; Auto vars:     Size  Location     Type
  4126 ;;  address         2   57[COMRAM] unsigned int 
  4127 ;;  address_code    1   56[COMRAM] unsigned char 
  4128 ;; Return value:  Size  Location     Type
  4129 ;;                  1    wreg      void 
  4130 ;; Registers used:
  4131 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4132 ;; Tracked objects:
  4133 ;;		On entry : 0/0
  4134 ;;		On exit  : 0/0
  4135 ;;		Unchanged: 0/0
  4136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4137 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4138 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4139 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4140 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4141 ;;Total ram usage:        3 bytes
  4142 ;; Hardware stack levels used:    1
  4143 ;; Hardware stack levels required when called:    6
  4144 ;; This function calls:
  4145 ;;		_Eeprom_ReadByte
  4146 ;;		_Eeprom_WriteByte
  4147 ;;		___awdiv
  4148 ;;		___awmod
  4149 ;;		_next_address
  4150 ;; This function is called by:
  4151 ;;		_main
  4152 ;; This function uses a non-reentrant model
  4153 ;;
  4154                           
  4155                           	psect	text4
  4156  0013B6                     __ptext4:
  4157                           	opt stack 0
  4158  0013B6                     _stopOperation:
  4159                           	opt stack 24
  4160                           
  4161                           ;main.c: 467: T0CONbits.TMR0ON = 0;
  4162                           
  4163                           ;incstack = 0
  4164  0013B6  9ED5               	bcf	4053,7,c	;volatile
  4165                           
  4166                           ;main.c: 468: T1CONbits.TMR1ON = 0;
  4167  0013B8  90CD               	bcf	4045,0,c	;volatile
  4168                           
  4169                           ;main.c: 469: TMR0 = 55770;
  4170  0013BA  0ED9               	movlw	217
  4171  0013BC  6ED7               	movwf	4055,c	;volatile
  4172  0013BE  0EDA               	movlw	218
  4173  0013C0  6ED6               	movwf	4054,c	;volatile
  4174                           
  4175                           ;main.c: 470: TMR1 = 60535;
  4176  0013C2  0EEC               	movlw	236
  4177  0013C4  6ECF               	movwf	4047,c	;volatile
  4178  0013C6  0E77               	movlw	119
  4179  0013C8  6ECE               	movwf	4046,c	;volatile
  4180                           
  4181                           ;main.c: 472: num9V = count9V;
  4182  0013CA  C0CF  F0D5         	movff	_count9V,_num9V
  4183                           
  4184                           ;main.c: 473: numC = countC;
  4185  0013CE  C0D1  F0D8         	movff	_countC,_numC
  4186                           
  4187                           ;main.c: 474: numAA = countAA;
  4188  0013D2  C0D0  F0D6         	movff	_countAA,_numAA
  4189                           
  4190                           ;main.c: 475: numDrain = countDrain;
  4191  0013D6  C0D2  F0D9         	movff	_countDrain,_numDrain
  4192                           
  4193                           ;main.c: 476: numBats = count9V + countC + countAA + countDrain;
  4194  0013DA  0100               	movlb	0	; () banked
  4195  0013DC  51CF               	movf	_count9V& (0+255),w,b
  4196  0013DE  0100               	movlb	0	; () banked
  4197  0013E0  25D1               	addwf	_countC& (0+255),w,b
  4198  0013E2  0100               	movlb	0	; () banked
  4199  0013E4  25D0               	addwf	_countAA& (0+255),w,b
  4200  0013E6  0100               	movlb	0	; () banked
  4201  0013E8  25D2               	addwf	_countDrain& (0+255),w,b
  4202  0013EA  0100               	movlb	0	; () banked
  4203  0013EC  6FD7               	movwf	_numBats& (0+255),b
  4204                           
  4205                           ; BSR set to: 0
  4206                           ;main.c: 478: unsigned char address_code = Eeprom_ReadByte(0);
  4207  0013EE  0E00               	movlw	0
  4208  0013F0  6E32               	movwf	Eeprom_ReadByte@address+1,c
  4209  0013F2  0E00               	movlw	0
  4210  0013F4  6E31               	movwf	Eeprom_ReadByte@address,c
  4211  0013F6  ECED  F012         	call	_Eeprom_ReadByte	;wreg free
  4212  0013FA  6E39               	movwf	stopOperation@address_code,c
  4213                           
  4214                           ;main.c: 479: uint16_t address = address_code * 96 + 1;
  4215  0013FC  5039               	movf	stopOperation@address_code,w,c
  4216  0013FE  0D60               	mullw	96
  4217  001400  0E01               	movlw	1
  4218  001402  24F3               	addwf	prodl,w,c
  4219  001404  6E3A               	movwf	stopOperation@address,c
  4220  001406  0E00               	movlw	0
  4221  001408  20F4               	addwfc	prodh,w,c
  4222  00140A  6E3B               	movwf	stopOperation@address+1,c
  4223                           
  4224                           ;main.c: 480: Eeprom_WriteByte(address, lastRunRTC[6]);
  4225  00140C  C03A  F031         	movff	stopOperation@address,Eeprom_WriteByte@address
  4226  001410  C03B  F032         	movff	stopOperation@address+1,Eeprom_WriteByte@address+1
  4227  001414  C0B7  F033         	movff	_lastRunRTC+6,Eeprom_WriteByte@data
  4228  001418  EC50  F012         	call	_Eeprom_WriteByte	;wreg free
  4229                           
  4230                           ;main.c: 481: address = next_address(address);
  4231  00141C  C03A  F031         	movff	stopOperation@address,next_address@address
  4232  001420  C03B  F032         	movff	stopOperation@address+1,next_address@address+1
  4233  001424  EC1F  F013         	call	_next_address	;wreg free
  4234  001428  C031  F03A         	movff	?_next_address,stopOperation@address
  4235  00142C  C032  F03B         	movff	?_next_address+1,stopOperation@address+1
  4236                           
  4237                           ;main.c: 482: Eeprom_WriteByte(address, lastRunRTC[5]);
  4238  001430  C03A  F031         	movff	stopOperation@address,Eeprom_WriteByte@address
  4239  001434  C03B  F032         	movff	stopOperation@address+1,Eeprom_WriteByte@address+1
  4240  001438  C0B6  F033         	movff	_lastRunRTC+5,Eeprom_WriteByte@data
  4241  00143C  EC50  F012         	call	_Eeprom_WriteByte	;wreg free
  4242                           
  4243                           ;main.c: 483: address = next_address(address);
  4244  001440  C03A  F031         	movff	stopOperation@address,next_address@address
  4245  001444  C03B  F032         	movff	stopOperation@address+1,next_address@address+1
  4246  001448  EC1F  F013         	call	_next_address	;wreg free
  4247  00144C  C031  F03A         	movff	?_next_address,stopOperation@address
  4248  001450  C032  F03B         	movff	?_next_address+1,stopOperation@address+1
  4249                           
  4250                           ;main.c: 484: Eeprom_WriteByte(address, lastRunRTC[4]);
  4251  001454  C03A  F031         	movff	stopOperation@address,Eeprom_WriteByte@address
  4252  001458  C03B  F032         	movff	stopOperation@address+1,Eeprom_WriteByte@address+1
  4253  00145C  C0B5  F033         	movff	_lastRunRTC+4,Eeprom_WriteByte@data
  4254  001460  EC50  F012         	call	_Eeprom_WriteByte	;wreg free
  4255                           
  4256                           ;main.c: 485: address = next_address(address);
  4257  001464  C03A  F031         	movff	stopOperation@address,next_address@address
  4258  001468  C03B  F032         	movff	stopOperation@address+1,next_address@address+1
  4259  00146C  EC1F  F013         	call	_next_address	;wreg free
  4260  001470  C031  F03A         	movff	?_next_address,stopOperation@address
  4261  001474  C032  F03B         	movff	?_next_address+1,stopOperation@address+1
  4262                           
  4263                           ;main.c: 486: Eeprom_WriteByte(address, lastRunRTC[2]);
  4264  001478  C03A  F031         	movff	stopOperation@address,Eeprom_WriteByte@address
  4265  00147C  C03B  F032         	movff	stopOperation@address+1,Eeprom_WriteByte@address+1
  4266  001480  C0B3  F033         	movff	_lastRunRTC+2,Eeprom_WriteByte@data
  4267  001484  EC50  F012         	call	_Eeprom_WriteByte	;wreg free
  4268                           
  4269                           ;main.c: 487: address = next_address(address);
  4270  001488  C03A  F031         	movff	stopOperation@address,next_address@address
  4271  00148C  C03B  F032         	movff	stopOperation@address+1,next_address@address+1
  4272  001490  EC1F  F013         	call	_next_address	;wreg free
  4273  001494  C031  F03A         	movff	?_next_address,stopOperation@address
  4274  001498  C032  F03B         	movff	?_next_address+1,stopOperation@address+1
  4275                           
  4276                           ;main.c: 488: Eeprom_WriteByte(address, lastRunRTC[1]);
  4277  00149C  C03A  F031         	movff	stopOperation@address,Eeprom_WriteByte@address
  4278  0014A0  C03B  F032         	movff	stopOperation@address+1,Eeprom_WriteByte@address+1
  4279  0014A4  C0B2  F033         	movff	_lastRunRTC+1,Eeprom_WriteByte@data
  4280  0014A8  EC50  F012         	call	_Eeprom_WriteByte	;wreg free
  4281                           
  4282                           ;main.c: 489: address = next_address(address);
  4283  0014AC  C03A  F031         	movff	stopOperation@address,next_address@address
  4284  0014B0  C03B  F032         	movff	stopOperation@address+1,next_address@address+1
  4285  0014B4  EC1F  F013         	call	_next_address	;wreg free
  4286  0014B8  C031  F03A         	movff	?_next_address,stopOperation@address
  4287  0014BC  C032  F03B         	movff	?_next_address+1,stopOperation@address+1
  4288                           
  4289                           ;main.c: 490: Eeprom_WriteByte(address, lastRunRTC[0]);
  4290  0014C0  C03A  F031         	movff	stopOperation@address,Eeprom_WriteByte@address
  4291  0014C4  C03B  F032         	movff	stopOperation@address+1,Eeprom_WriteByte@address+1
  4292  0014C8  C0B1  F033         	movff	_lastRunRTC,Eeprom_WriteByte@data
  4293  0014CC  EC50  F012         	call	_Eeprom_WriteByte	;wreg free
  4294                           
  4295                           ;main.c: 491: address = next_address(address);
  4296  0014D0  C03A  F031         	movff	stopOperation@address,next_address@address
  4297  0014D4  C03B  F032         	movff	stopOperation@address+1,next_address@address+1
  4298  0014D8  EC1F  F013         	call	_next_address	;wreg free
  4299  0014DC  C031  F03A         	movff	?_next_address,stopOperation@address
  4300  0014E0  C032  F03B         	movff	?_next_address+1,stopOperation@address+1
  4301                           
  4302                           ;main.c: 493: Eeprom_WriteByte(address, countAA);
  4303  0014E4  C03A  F031         	movff	stopOperation@address,Eeprom_WriteByte@address
  4304  0014E8  C03B  F032         	movff	stopOperation@address+1,Eeprom_WriteByte@address+1
  4305  0014EC  C0D0  F033         	movff	_countAA,Eeprom_WriteByte@data
  4306  0014F0  EC50  F012         	call	_Eeprom_WriteByte	;wreg free
  4307                           
  4308                           ;main.c: 494: address = next_address(address);
  4309  0014F4  C03A  F031         	movff	stopOperation@address,next_address@address
  4310  0014F8  C03B  F032         	movff	stopOperation@address+1,next_address@address+1
  4311  0014FC  EC1F  F013         	call	_next_address	;wreg free
  4312  001500  C031  F03A         	movff	?_next_address,stopOperation@address
  4313  001504  C032  F03B         	movff	?_next_address+1,stopOperation@address+1
  4314                           
  4315                           ;main.c: 495: Eeprom_WriteByte(address, countC);
  4316  001508  C03A  F031         	movff	stopOperation@address,Eeprom_WriteByte@address
  4317  00150C  C03B  F032         	movff	stopOperation@address+1,Eeprom_WriteByte@address+1
  4318  001510  C0D1  F033         	movff	_countC,Eeprom_WriteByte@data
  4319  001514  EC50  F012         	call	_Eeprom_WriteByte	;wreg free
  4320                           
  4321                           ;main.c: 496: address = next_address(address);
  4322  001518  C03A  F031         	movff	stopOperation@address,next_address@address
  4323  00151C  C03B  F032         	movff	stopOperation@address+1,next_address@address+1
  4324  001520  EC1F  F013         	call	_next_address	;wreg free
  4325  001524  C031  F03A         	movff	?_next_address,stopOperation@address
  4326  001528  C032  F03B         	movff	?_next_address+1,stopOperation@address+1
  4327                           
  4328                           ;main.c: 497: Eeprom_WriteByte(address, count9V);
  4329  00152C  C03A  F031         	movff	stopOperation@address,Eeprom_WriteByte@address
  4330  001530  C03B  F032         	movff	stopOperation@address+1,Eeprom_WriteByte@address+1
  4331  001534  C0CF  F033         	movff	_count9V,Eeprom_WriteByte@data
  4332  001538  EC50  F012         	call	_Eeprom_WriteByte	;wreg free
  4333                           
  4334                           ;main.c: 498: address = next_address(address);
  4335  00153C  C03A  F031         	movff	stopOperation@address,next_address@address
  4336  001540  C03B  F032         	movff	stopOperation@address+1,next_address@address+1
  4337  001544  EC1F  F013         	call	_next_address	;wreg free
  4338  001548  C031  F03A         	movff	?_next_address,stopOperation@address
  4339  00154C  C032  F03B         	movff	?_next_address+1,stopOperation@address+1
  4340                           
  4341                           ;main.c: 499: Eeprom_WriteByte(address, countDrain);
  4342  001550  C03A  F031         	movff	stopOperation@address,Eeprom_WriteByte@address
  4343  001554  C03B  F032         	movff	stopOperation@address+1,Eeprom_WriteByte@address+1
  4344  001558  C0D2  F033         	movff	_countDrain,Eeprom_WriteByte@data
  4345  00155C  EC50  F012         	call	_Eeprom_WriteByte	;wreg free
  4346                           
  4347                           ;main.c: 500: address = next_address(address);
  4348  001560  C03A  F031         	movff	stopOperation@address,next_address@address
  4349  001564  C03B  F032         	movff	stopOperation@address+1,next_address@address+1
  4350  001568  EC1F  F013         	call	_next_address	;wreg free
  4351  00156C  C031  F03A         	movff	?_next_address,stopOperation@address
  4352  001570  C032  F03B         	movff	?_next_address+1,stopOperation@address+1
  4353                           
  4354                           ;main.c: 501: Eeprom_WriteByte(address, numBats);
  4355  001574  C03A  F031         	movff	stopOperation@address,Eeprom_WriteByte@address
  4356  001578  C03B  F032         	movff	stopOperation@address+1,Eeprom_WriteByte@address+1
  4357  00157C  C0D7  F033         	movff	_numBats,Eeprom_WriteByte@data
  4358  001580  EC50  F012         	call	_Eeprom_WriteByte	;wreg free
  4359                           
  4360                           ;main.c: 502: address = next_address(address);
  4361  001584  C03A  F031         	movff	stopOperation@address,next_address@address
  4362  001588  C03B  F032         	movff	stopOperation@address+1,next_address@address+1
  4363  00158C  EC1F  F013         	call	_next_address	;wreg free
  4364  001590  C031  F03A         	movff	?_next_address,stopOperation@address
  4365  001594  C032  F03B         	movff	?_next_address+1,stopOperation@address+1
  4366                           
  4367                           ;main.c: 503: Eeprom_WriteByte(address, opTimer);
  4368  001598  C03A  F031         	movff	stopOperation@address,Eeprom_WriteByte@address
  4369  00159C  C03B  F032         	movff	stopOperation@address+1,Eeprom_WriteByte@address+1
  4370  0015A0  C04A  F033         	movff	_opTimer,Eeprom_WriteByte@data
  4371  0015A4  EC50  F012         	call	_Eeprom_WriteByte	;wreg free
  4372                           
  4373                           ;main.c: 505: address_code++;
  4374  0015A8  2A39               	incf	stopOperation@address_code,f,c
  4375                           
  4376                           ;main.c: 506: if (address_code > 3)
  4377  0015AA  0E03               	movlw	3
  4378  0015AC  6439               	cpfsgt	stopOperation@address_code,c
  4379  0015AE  D009               	goto	l4158
  4380                           
  4381                           ;main.c: 507: Eeprom_WriteByte(0, 0);
  4382  0015B0  0E00               	movlw	0
  4383  0015B2  6E32               	movwf	Eeprom_WriteByte@address+1,c
  4384  0015B4  0E00               	movlw	0
  4385  0015B6  6E31               	movwf	Eeprom_WriteByte@address,c
  4386  0015B8  0E00               	movlw	0
  4387  0015BA  6E33               	movwf	Eeprom_WriteByte@data,c
  4388  0015BC  EC50  F012         	call	_Eeprom_WriteByte	;wreg free
  4389  0015C0  D008               	goto	l4160
  4390  0015C2                     l4158:
  4391                           
  4392                           ;main.c: 508: else
  4393                           ;main.c: 509: Eeprom_WriteByte(0, address_code);
  4394  0015C2  0E00               	movlw	0
  4395  0015C4  6E32               	movwf	Eeprom_WriteByte@address+1,c
  4396  0015C6  0E00               	movlw	0
  4397  0015C8  6E31               	movwf	Eeprom_WriteByte@address,c
  4398  0015CA  C039  F033         	movff	stopOperation@address_code,Eeprom_WriteByte@data
  4399  0015CE  EC50  F012         	call	_Eeprom_WriteByte	;wreg free
  4400  0015D2                     l4160:
  4401                           
  4402                           ;main.c: 511: count9V = 0;
  4403  0015D2  0E00               	movlw	0
  4404  0015D4  0100               	movlb	0	; () banked
  4405  0015D6  6FCF               	movwf	_count9V& (0+255),b
  4406                           
  4407                           ; BSR set to: 0
  4408                           ;main.c: 512: countC = 0;
  4409  0015D8  0E00               	movlw	0
  4410  0015DA  0100               	movlb	0	; () banked
  4411  0015DC  6FD1               	movwf	_countC& (0+255),b
  4412                           
  4413                           ; BSR set to: 0
  4414                           ;main.c: 513: countAA = 0;
  4415  0015DE  0E00               	movlw	0
  4416  0015E0  0100               	movlb	0	; () banked
  4417  0015E2  6FD0               	movwf	_countAA& (0+255),b
  4418                           
  4419                           ; BSR set to: 0
  4420                           ;main.c: 514: countDrain = 0;
  4421  0015E4  0E00               	movlw	0
  4422  0015E6  0100               	movlb	0	; () banked
  4423  0015E8  6FD2               	movwf	_countDrain& (0+255),b
  4424                           
  4425                           ; BSR set to: 0
  4426                           ;main.c: 515: min = opTimer / 60;
  4427  0015EA  C04A  F031         	movff	_opTimer,___awdiv@dividend
  4428  0015EE  6A32               	clrf	___awdiv@dividend+1,c
  4429  0015F0  0E00               	movlw	0
  4430  0015F2  6E34               	movwf	___awdiv@divisor+1,c
  4431  0015F4  0E3C               	movlw	60
  4432  0015F6  6E33               	movwf	___awdiv@divisor,c
  4433  0015F8  ECCD  F00F         	call	___awdiv	;wreg free
  4434  0015FC  5031               	movf	?___awdiv,w,c
  4435  0015FE  0100               	movlb	0	; () banked
  4436  001600  6FD4               	movwf	_min& (0+255),b
  4437                           
  4438                           ; BSR set to: 0
  4439                           ;main.c: 516: sec = opTimer % 60;
  4440  001602  C04A  F031         	movff	_opTimer,___awmod@dividend
  4441  001606  6A32               	clrf	___awmod@dividend+1,c
  4442  001608  0E00               	movlw	0
  4443  00160A  6E34               	movwf	___awmod@divisor+1,c
  4444  00160C  0E3C               	movlw	60
  4445  00160E  6E33               	movwf	___awmod@divisor,c
  4446  001610  EC92  F010         	call	___awmod	;wreg free
  4447  001614  5031               	movf	?___awmod,w,c
  4448  001616  0100               	movlb	0	; () banked
  4449  001618  6FDA               	movwf	_sec& (0+255),b
  4450                           
  4451                           ; BSR set to: 0
  4452                           ;main.c: 517: opTimer = 0;
  4453  00161A  0E00               	movlw	0
  4454  00161C  6E4A               	movwf	_opTimer,c
  4455                           
  4456                           ; BSR set to: 0
  4457                           ;main.c: 518: doneTimer = 0;
  4458  00161E  0E00               	movlw	0
  4459  001620  6E49               	movwf	_doneTimer,c
  4460                           
  4461                           ; BSR set to: 0
  4462                           ;main.c: 519: sorting = 0;
  4463  001622  0E00               	movlw	0
  4464  001624  6E4C               	movwf	_sorting,c
  4465                           
  4466                           ; BSR set to: 0
  4467                           ;main.c: 520: plat1Left = 0;
  4468  001626  0E00               	movlw	0
  4469  001628  0100               	movlb	0	; () banked
  4470  00162A  6FC0               	movwf	(_plat1Left+1)& (0+255),b
  4471  00162C  0E00               	movlw	0
  4472  00162E  6FBF               	movwf	_plat1Left& (0+255),b
  4473                           
  4474                           ; BSR set to: 0
  4475                           ;main.c: 521: plat1Right = 0;
  4476  001630  0E00               	movlw	0
  4477  001632  0100               	movlb	0	; () banked
  4478  001634  6FC2               	movwf	(_plat1Right+1)& (0+255),b
  4479  001636  0E00               	movlw	0
  4480  001638  6FC1               	movwf	_plat1Right& (0+255),b
  4481                           
  4482                           ; BSR set to: 0
  4483                           ;main.c: 522: plat2Left = 0;
  4484  00163A  0E00               	movlw	0
  4485  00163C  0100               	movlb	0	; () banked
  4486  00163E  6FC4               	movwf	(_plat2Left+1)& (0+255),b
  4487  001640  0E00               	movlw	0
  4488  001642  6FC3               	movwf	_plat2Left& (0+255),b
  4489                           
  4490                           ; BSR set to: 0
  4491                           ;main.c: 523: plat2Right = 0;
  4492  001644  0E00               	movlw	0
  4493  001646  0100               	movlb	0	; () banked
  4494  001648  6FC6               	movwf	(_plat2Right+1)& (0+255),b
  4495  00164A  0E00               	movlw	0
  4496  00164C  6FC5               	movwf	_plat2Right& (0+255),b
  4497                           
  4498                           ; BSR set to: 0
  4499                           ;main.c: 524: turn2BackLeft = 0;
  4500  00164E  0E00               	movlw	0
  4501  001650  0100               	movlb	0	; () banked
  4502  001652  6FCC               	movwf	(_turn2BackLeft+1)& (0+255),b
  4503  001654  0E00               	movlw	0
  4504  001656  6FCB               	movwf	_turn2BackLeft& (0+255),b
  4505                           
  4506                           ; BSR set to: 0
  4507                           ;main.c: 525: turn1BackLeft = 0;
  4508  001658  0E00               	movlw	0
  4509  00165A  0100               	movlb	0	; () banked
  4510  00165C  6FC8               	movwf	(_turn1BackLeft+1)& (0+255),b
  4511  00165E  0E00               	movlw	0
  4512  001660  6FC7               	movwf	_turn1BackLeft& (0+255),b
  4513                           
  4514                           ; BSR set to: 0
  4515                           ;main.c: 526: turn2BackRight = 0;
  4516  001662  0E00               	movlw	0
  4517  001664  0100               	movlb	0	; () banked
  4518  001666  6FCE               	movwf	(_turn2BackRight+1)& (0+255),b
  4519  001668  0E00               	movlw	0
  4520  00166A  6FCD               	movwf	_turn2BackRight& (0+255),b
  4521                           
  4522                           ; BSR set to: 0
  4523                           ;main.c: 527: turn1BackRight = 0;
  4524  00166C  0E00               	movlw	0
  4525  00166E  0100               	movlb	0	; () banked
  4526  001670  6FCA               	movwf	(_turn1BackRight+1)& (0+255),b
  4527  001672  0E00               	movlw	0
  4528  001674  6FC9               	movwf	_turn1BackRight& (0+255),b
  4529                           
  4530                           ; BSR set to: 0
  4531                           ;main.c: 528: count_2ms = 0;
  4532  001676  0E00               	movlw	0
  4533  001678  6E48               	movwf	_count_2ms+1,c
  4534  00167A  0E00               	movlw	0
  4535  00167C  6E47               	movwf	_count_2ms,c
  4536                           
  4537                           ; BSR set to: 0
  4538                           ;main.c: 529: doubleAA = 0;
  4539  00167E  0E00               	movlw	0
  4540  001680  0100               	movlb	0	; () banked
  4541  001682  6FD3               	movwf	_doubleAA& (0+255),b
  4542                           
  4543                           ; BSR set to: 0
  4544                           ;main.c: 530: solOnTimer = 0;
  4545  001684  0E00               	movlw	0
  4546  001686  6E4B               	movwf	_solOnTimer,c
  4547                           
  4548                           ; BSR set to: 0
  4549                           ;main.c: 532: LATCbits.LC1 = 0;;
  4550  001688  928B               	bcf	3979,1,c	;volatile
  4551                           
  4552                           ; BSR set to: 0
  4553                           ;main.c: 533: LATCbits.LC2 = 0;;
  4554  00168A  948B               	bcf	3979,2,c	;volatile
  4555                           
  4556                           ; BSR set to: 0
  4557                           ;main.c: 534: LATCbits.LC6 = 0;;
  4558  00168C  9C8B               	bcf	3979,6,c	;volatile
  4559                           
  4560                           ; BSR set to: 0
  4561                           ;main.c: 535: LATCbits.LC5 = 0;;
  4562  00168E  9A8B               	bcf	3979,5,c	;volatile
  4563                           
  4564                           ; BSR set to: 0
  4565                           ;main.c: 536: LATCbits.LC0 = 0;;
  4566  001690  908B               	bcf	3979,0,c	;volatile
  4567                           
  4568                           ; BSR set to: 0
  4569                           ;main.c: 537: LATEbits.LE2 = 0;;
  4570  001692  948D               	bcf	3981,2,c	;volatile
  4571                           
  4572                           ; BSR set to: 0
  4573                           ;main.c: 538: LATEbits.LE1 = 0;;
  4574  001694  928D               	bcf	3981,1,c	;volatile
  4575                           
  4576                           ; BSR set to: 0
  4577                           ;main.c: 539: LATAbits.LA4 = 0;;
  4578  001696  9889               	bcf	3977,4,c	;volatile
  4579                           
  4580                           ; BSR set to: 0
  4581                           ;main.c: 540: LATDbits.LD0= 0;;
  4582  001698  908C               	bcf	3980,0,c	;volatile
  4583                           
  4584                           ; BSR set to: 0
  4585                           ;main.c: 541: LATCbits.LC7 = 0;;
  4586  00169A  9E8B               	bcf	3979,7,c	;volatile
  4587                           
  4588                           ; BSR set to: 0
  4589                           ;main.c: 542: LATDbits.LD1 = 0;;
  4590  00169C  928C               	bcf	3980,1,c	;volatile
  4591                           
  4592                           ; BSR set to: 0
  4593                           ;main.c: 543: LATBbits.LB0 = 0;;
  4594  00169E  908A               	bcf	3978,0,c	;volatile
  4595                           
  4596                           ; BSR set to: 0
  4597                           ;main.c: 544: screenMode = 0;
  4598  0016A0  0E00               	movlw	0
  4599  0016A2  0100               	movlb	0	; () banked
  4600  0016A4  6FDC               	movwf	_screenMode& (0+255),b
  4601                           
  4602                           ; BSR set to: 0
  4603  0016A6  0012               	return		;funcret
  4604  0016A8                     __end_of_stopOperation:
  4605                           	opt stack 0
  4606                           tblptru	equ	0xFF8
  4607                           tblptrh	equ	0xFF7
  4608                           tblptrl	equ	0xFF6
  4609                           tablat	equ	0xFF5
  4610                           prodh	equ	0xFF4
  4611                           prodl	equ	0xFF3
  4612                           intcon	equ	0xFF2
  4613                           intcon2	equ	0xFF1
  4614                           intcon3	equ	0xFF0
  4615                           postinc0	equ	0xFEE
  4616                           wreg	equ	0xFE8
  4617                           indf2	equ	0xFDF
  4618                           fsr2h	equ	0xFDA
  4619                           fsr2l	equ	0xFD9
  4620                           status	equ	0xFD8
  4621                           
  4622 ;; *************** function ___awmod *****************
  4623 ;; Defined at:
  4624 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  4625 ;; Parameters:    Size  Location     Type
  4626 ;;  dividend        2   48[COMRAM] int 
  4627 ;;  divisor         2   50[COMRAM] int 
  4628 ;; Auto vars:     Size  Location     Type
  4629 ;;  sign            1   53[COMRAM] unsigned char 
  4630 ;;  counter         1   52[COMRAM] unsigned char 
  4631 ;; Return value:  Size  Location     Type
  4632 ;;                  2   48[COMRAM] int 
  4633 ;; Registers used:
  4634 ;;		wreg, status,2, status,0
  4635 ;; Tracked objects:
  4636 ;;		On entry : 0/0
  4637 ;;		On exit  : 0/0
  4638 ;;		Unchanged: 0/0
  4639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4640 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4641 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4642 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4643 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4644 ;;Total ram usage:        6 bytes
  4645 ;; Hardware stack levels used:    1
  4646 ;; Hardware stack levels required when called:    5
  4647 ;; This function calls:
  4648 ;;		Nothing
  4649 ;; This function is called by:
  4650 ;;		_stopOperation
  4651 ;; This function uses a non-reentrant model
  4652 ;;
  4653                           
  4654                           	psect	text5
  4655  002124                     __ptext5:
  4656                           	opt stack 0
  4657  002124                     ___awmod:
  4658                           	opt stack 24
  4659                           
  4660                           ; BSR set to: 0
  4661                           ;incstack = 0
  4662  002124  0E00               	movlw	0
  4663  002126  6E36               	movwf	___awmod@sign,c
  4664  002128  AE32               	btfss	___awmod@dividend+1,7,c
  4665  00212A  D006               	goto	l3592
  4666  00212C  6C31               	negf	___awmod@dividend,c
  4667  00212E  1E32               	comf	___awmod@dividend+1,f,c
  4668  002130  B0D8               	btfsc	status,0,c
  4669  002132  2A32               	incf	___awmod@dividend+1,f,c
  4670  002134  0E01               	movlw	1
  4671  002136  6E36               	movwf	___awmod@sign,c
  4672  002138                     l3592:
  4673  002138  AE34               	btfss	___awmod@divisor+1,7,c
  4674  00213A  D004               	goto	l3596
  4675  00213C  6C33               	negf	___awmod@divisor,c
  4676  00213E  1E34               	comf	___awmod@divisor+1,f,c
  4677  002140  B0D8               	btfsc	status,0,c
  4678  002142  2A34               	incf	___awmod@divisor+1,f,c
  4679  002144                     l3596:
  4680  002144  5033               	movf	___awmod@divisor,w,c
  4681  002146  1034               	iorwf	___awmod@divisor+1,w,c
  4682  002148  B4D8               	btfsc	status,2,c
  4683  00214A  D018               	goto	l3612
  4684  00214C  0E01               	movlw	1
  4685  00214E  6E35               	movwf	___awmod@counter,c
  4686  002150  D004               	goto	l3602
  4687  002152                     l3600:
  4688  002152  90D8               	bcf	status,0,c
  4689  002154  3633               	rlcf	___awmod@divisor,f,c
  4690  002156  3634               	rlcf	___awmod@divisor+1,f,c
  4691  002158  2A35               	incf	___awmod@counter,f,c
  4692  00215A                     l3602:
  4693  00215A  AE34               	btfss	___awmod@divisor+1,7,c
  4694  00215C  D7FA               	goto	l3600
  4695  00215E                     l3604:
  4696  00215E  5033               	movf	___awmod@divisor,w,c
  4697  002160  5C31               	subwf	___awmod@dividend,w,c
  4698  002162  5034               	movf	___awmod@divisor+1,w,c
  4699  002164  5832               	subwfb	___awmod@dividend+1,w,c
  4700  002166  A0D8               	btfss	status,0,c
  4701  002168  D004               	goto	l3608
  4702  00216A  5033               	movf	___awmod@divisor,w,c
  4703  00216C  5E31               	subwf	___awmod@dividend,f,c
  4704  00216E  5034               	movf	___awmod@divisor+1,w,c
  4705  002170  5A32               	subwfb	___awmod@dividend+1,f,c
  4706  002172                     l3608:
  4707  002172  90D8               	bcf	status,0,c
  4708  002174  3234               	rrcf	___awmod@divisor+1,f,c
  4709  002176  3233               	rrcf	___awmod@divisor,f,c
  4710  002178  2E35               	decfsz	___awmod@counter,f,c
  4711  00217A  D7F1               	goto	l3604
  4712  00217C                     l3612:
  4713  00217C  5036               	movf	___awmod@sign,w,c
  4714  00217E  B4D8               	btfsc	status,2,c
  4715  002180  D004               	goto	l3616
  4716  002182  6C31               	negf	___awmod@dividend,c
  4717  002184  1E32               	comf	___awmod@dividend+1,f,c
  4718  002186  B0D8               	btfsc	status,0,c
  4719  002188  2A32               	incf	___awmod@dividend+1,f,c
  4720  00218A                     l3616:
  4721  00218A  C031  F031         	movff	___awmod@dividend,?___awmod
  4722  00218E  C032  F032         	movff	___awmod@dividend+1,?___awmod+1
  4723  002192  0012               	return	
  4724  002194                     __end_of___awmod:
  4725                           	opt stack 0
  4726                           tblptru	equ	0xFF8
  4727                           tblptrh	equ	0xFF7
  4728                           tblptrl	equ	0xFF6
  4729                           tablat	equ	0xFF5
  4730                           prodh	equ	0xFF4
  4731                           prodl	equ	0xFF3
  4732                           intcon	equ	0xFF2
  4733                           intcon2	equ	0xFF1
  4734                           intcon3	equ	0xFF0
  4735                           postinc0	equ	0xFEE
  4736                           wreg	equ	0xFE8
  4737                           indf2	equ	0xFDF
  4738                           fsr2h	equ	0xFDA
  4739                           fsr2l	equ	0xFD9
  4740                           status	equ	0xFD8
  4741                           
  4742 ;; *************** function ___awdiv *****************
  4743 ;; Defined at:
  4744 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  4745 ;; Parameters:    Size  Location     Type
  4746 ;;  dividend        2   48[COMRAM] int 
  4747 ;;  divisor         2   50[COMRAM] int 
  4748 ;; Auto vars:     Size  Location     Type
  4749 ;;  quotient        2   54[COMRAM] int 
  4750 ;;  sign            1   53[COMRAM] unsigned char 
  4751 ;;  counter         1   52[COMRAM] unsigned char 
  4752 ;; Return value:  Size  Location     Type
  4753 ;;                  2   48[COMRAM] int 
  4754 ;; Registers used:
  4755 ;;		wreg, status,2, status,0
  4756 ;; Tracked objects:
  4757 ;;		On entry : 0/0
  4758 ;;		On exit  : 0/0
  4759 ;;		Unchanged: 0/0
  4760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4761 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4762 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4763 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4764 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4765 ;;Total ram usage:        8 bytes
  4766 ;; Hardware stack levels used:    1
  4767 ;; Hardware stack levels required when called:    5
  4768 ;; This function calls:
  4769 ;;		Nothing
  4770 ;; This function is called by:
  4771 ;;		_stopOperation
  4772 ;; This function uses a non-reentrant model
  4773 ;;
  4774                           
  4775                           	psect	text6
  4776  001F9A                     __ptext6:
  4777                           	opt stack 0
  4778  001F9A                     ___awdiv:
  4779                           	opt stack 24
  4780                           
  4781                           ;incstack = 0
  4782  001F9A  0E00               	movlw	0
  4783  001F9C  6E36               	movwf	___awdiv@sign,c
  4784  001F9E  AE34               	btfss	___awdiv@divisor+1,7,c
  4785  001FA0  D006               	goto	l3548
  4786  001FA2  6C33               	negf	___awdiv@divisor,c
  4787  001FA4  1E34               	comf	___awdiv@divisor+1,f,c
  4788  001FA6  B0D8               	btfsc	status,0,c
  4789  001FA8  2A34               	incf	___awdiv@divisor+1,f,c
  4790  001FAA  0E01               	movlw	1
  4791  001FAC  6E36               	movwf	___awdiv@sign,c
  4792  001FAE                     l3548:
  4793  001FAE  AE32               	btfss	___awdiv@dividend+1,7,c
  4794  001FB0  D006               	goto	l3554
  4795  001FB2  6C31               	negf	___awdiv@dividend,c
  4796  001FB4  1E32               	comf	___awdiv@dividend+1,f,c
  4797  001FB6  B0D8               	btfsc	status,0,c
  4798  001FB8  2A32               	incf	___awdiv@dividend+1,f,c
  4799  001FBA  0E01               	movlw	1
  4800  001FBC  1A36               	xorwf	___awdiv@sign,f,c
  4801  001FBE                     l3554:
  4802  001FBE  0E00               	movlw	0
  4803  001FC0  6E38               	movwf	___awdiv@quotient+1,c
  4804  001FC2  0E00               	movlw	0
  4805  001FC4  6E37               	movwf	___awdiv@quotient,c
  4806  001FC6  5033               	movf	___awdiv@divisor,w,c
  4807  001FC8  1034               	iorwf	___awdiv@divisor+1,w,c
  4808  001FCA  B4D8               	btfsc	status,2,c
  4809  001FCC  D01C               	goto	l3576
  4810  001FCE  0E01               	movlw	1
  4811  001FD0  6E35               	movwf	___awdiv@counter,c
  4812  001FD2  D004               	goto	l3562
  4813  001FD4                     l3560:
  4814  001FD4  90D8               	bcf	status,0,c
  4815  001FD6  3633               	rlcf	___awdiv@divisor,f,c
  4816  001FD8  3634               	rlcf	___awdiv@divisor+1,f,c
  4817  001FDA  2A35               	incf	___awdiv@counter,f,c
  4818  001FDC                     l3562:
  4819  001FDC  AE34               	btfss	___awdiv@divisor+1,7,c
  4820  001FDE  D7FA               	goto	l3560
  4821  001FE0                     l3564:
  4822  001FE0  90D8               	bcf	status,0,c
  4823  001FE2  3637               	rlcf	___awdiv@quotient,f,c
  4824  001FE4  3638               	rlcf	___awdiv@quotient+1,f,c
  4825  001FE6  5033               	movf	___awdiv@divisor,w,c
  4826  001FE8  5C31               	subwf	___awdiv@dividend,w,c
  4827  001FEA  5034               	movf	___awdiv@divisor+1,w,c
  4828  001FEC  5832               	subwfb	___awdiv@dividend+1,w,c
  4829  001FEE  A0D8               	btfss	status,0,c
  4830  001FF0  D005               	goto	l3572
  4831  001FF2  5033               	movf	___awdiv@divisor,w,c
  4832  001FF4  5E31               	subwf	___awdiv@dividend,f,c
  4833  001FF6  5034               	movf	___awdiv@divisor+1,w,c
  4834  001FF8  5A32               	subwfb	___awdiv@dividend+1,f,c
  4835  001FFA  8037               	bsf	___awdiv@quotient,0,c
  4836  001FFC                     l3572:
  4837  001FFC  90D8               	bcf	status,0,c
  4838  001FFE  3234               	rrcf	___awdiv@divisor+1,f,c
  4839  002000  3233               	rrcf	___awdiv@divisor,f,c
  4840  002002  2E35               	decfsz	___awdiv@counter,f,c
  4841  002004  D7ED               	goto	l3564
  4842  002006                     l3576:
  4843  002006  5036               	movf	___awdiv@sign,w,c
  4844  002008  B4D8               	btfsc	status,2,c
  4845  00200A  D004               	goto	l3580
  4846  00200C  6C37               	negf	___awdiv@quotient,c
  4847  00200E  1E38               	comf	___awdiv@quotient+1,f,c
  4848  002010  B0D8               	btfsc	status,0,c
  4849  002012  2A38               	incf	___awdiv@quotient+1,f,c
  4850  002014                     l3580:
  4851  002014  C037  F031         	movff	___awdiv@quotient,?___awdiv
  4852  002018  C038  F032         	movff	___awdiv@quotient+1,?___awdiv+1
  4853  00201C  0012               	return	
  4854  00201E                     __end_of___awdiv:
  4855                           	opt stack 0
  4856                           tblptru	equ	0xFF8
  4857                           tblptrh	equ	0xFF7
  4858                           tblptrl	equ	0xFF6
  4859                           tablat	equ	0xFF5
  4860                           prodh	equ	0xFF4
  4861                           prodl	equ	0xFF3
  4862                           intcon	equ	0xFF2
  4863                           intcon2	equ	0xFF1
  4864                           intcon3	equ	0xFF0
  4865                           postinc0	equ	0xFEE
  4866                           wreg	equ	0xFE8
  4867                           indf2	equ	0xFDF
  4868                           fsr2h	equ	0xFDA
  4869                           fsr2l	equ	0xFD9
  4870                           status	equ	0xFD8
  4871                           
  4872 ;; *************** function _Eeprom_WriteByte *****************
  4873 ;; Defined at:
  4874 ;;		line 662 in file "../main.c"
  4875 ;; Parameters:    Size  Location     Type
  4876 ;;  address         2   48[COMRAM] unsigned int 
  4877 ;;  data            1   50[COMRAM] unsigned char 
  4878 ;; Auto vars:     Size  Location     Type
  4879 ;;		None
  4880 ;; Return value:  Size  Location     Type
  4881 ;;                  1    wreg      void 
  4882 ;; Registers used:
  4883 ;;		wreg, status,2
  4884 ;; Tracked objects:
  4885 ;;		On entry : 0/0
  4886 ;;		On exit  : 0/0
  4887 ;;		Unchanged: 0/0
  4888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4889 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4890 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4891 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4892 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4893 ;;Total ram usage:        3 bytes
  4894 ;; Hardware stack levels used:    1
  4895 ;; Hardware stack levels required when called:    5
  4896 ;; This function calls:
  4897 ;;		Nothing
  4898 ;; This function is called by:
  4899 ;;		_stopOperation
  4900 ;; This function uses a non-reentrant model
  4901 ;;
  4902                           
  4903                           	psect	text7
  4904  0024A0                     __ptext7:
  4905                           	opt stack 0
  4906  0024A0                     _Eeprom_WriteByte:
  4907                           	opt stack 24
  4908                           
  4909                           ;main.c: 664: EEADRH = (uint8_t)(address >> 8);
  4910                           
  4911                           ;incstack = 0
  4912  0024A0  5032               	movf	Eeprom_WriteByte@address+1,w,c
  4913  0024A2  6EAA               	movwf	4010,c	;volatile
  4914                           
  4915                           ;main.c: 665: EEADR = (uint8_t)address;
  4916  0024A4  C031  FFA9         	movff	Eeprom_WriteByte@address,4009	;volatile
  4917                           
  4918                           ;main.c: 667: EEDATA = data;
  4919  0024A8  C033  FFA8         	movff	Eeprom_WriteByte@data,4008	;volatile
  4920                           
  4921                           ;main.c: 668: EECON1bits.EEPGD = 0;
  4922  0024AC  9EA6               	bcf	4006,7,c	;volatile
  4923                           
  4924                           ;main.c: 669: EECON1bits.CFGS = 0;
  4925  0024AE  9CA6               	bcf	4006,6,c	;volatile
  4926                           
  4927                           ;main.c: 670: EECON1bits.WREN = 1;
  4928  0024B0  84A6               	bsf	4006,2,c	;volatile
  4929                           
  4930                           ;main.c: 674: EECON2 = 0x55;
  4931  0024B2  0E55               	movlw	85
  4932  0024B4  6EA7               	movwf	4007,c	;volatile
  4933                           
  4934                           ;main.c: 675: EECON2 = 0xAA;
  4935  0024B6  0EAA               	movlw	170
  4936  0024B8  6EA7               	movwf	4007,c	;volatile
  4937                           
  4938                           ;main.c: 676: EECON1bits.WR = 1;
  4939  0024BA  82A6               	bsf	4006,1,c	;volatile
  4940  0024BC                     l439:
  4941  0024BC  A8A1               	btfss	4001,4,c	;volatile
  4942  0024BE  D7FE               	goto	l439
  4943                           
  4944                           ;main.c: 682: }
  4945                           ;main.c: 684: PIR2bits.EEIF = 0;
  4946  0024C0  98A1               	bcf	4001,4,c	;volatile
  4947                           
  4948                           ;main.c: 685: EECON1bits.WREN = 0;
  4949  0024C2  94A6               	bcf	4006,2,c	;volatile
  4950  0024C4  0012               	return		;funcret
  4951  0024C6                     __end_of_Eeprom_WriteByte:
  4952                           	opt stack 0
  4953                           tblptru	equ	0xFF8
  4954                           tblptrh	equ	0xFF7
  4955                           tblptrl	equ	0xFF6
  4956                           tablat	equ	0xFF5
  4957                           prodh	equ	0xFF4
  4958                           prodl	equ	0xFF3
  4959                           intcon	equ	0xFF2
  4960                           intcon2	equ	0xFF1
  4961                           intcon3	equ	0xFF0
  4962                           postinc0	equ	0xFEE
  4963                           wreg	equ	0xFE8
  4964                           indf2	equ	0xFDF
  4965                           fsr2h	equ	0xFDA
  4966                           fsr2l	equ	0xFD9
  4967                           status	equ	0xFD8
  4968                           
  4969 ;; *************** function _show_log *****************
  4970 ;; Defined at:
  4971 ;;		line 693 in file "../main.c"
  4972 ;; Parameters:    Size  Location     Type
  4973 ;;  log_address     2   14[BANK0 ] unsigned int 
  4974 ;;  currScreen      1   16[BANK0 ] unsigned char 
  4975 ;; Auto vars:     Size  Location     Type
  4976 ;;  i               1   37[BANK0 ] unsigned char 
  4977 ;;  i               1   36[BANK0 ] unsigned char 
  4978 ;;  i               1   35[BANK0 ] unsigned char 
  4979 ;;  address         2   38[BANK0 ] unsigned int 
  4980 ;;  elapsed_time    2   27[BANK0 ] unsigned int 
  4981 ;;  Drain_num       2   25[BANK0 ] unsigned int 
  4982 ;;  Nine_num        2   23[BANK0 ] unsigned int 
  4983 ;;  C_num           2   21[BANK0 ] unsigned int 
  4984 ;;  AA_num          2   19[BANK0 ] unsigned int 
  4985 ;;  total_num       2   17[BANK0 ] unsigned int 
  4986 ;;  second          1   34[BANK0 ] unsigned char 
  4987 ;;  minute          1   33[BANK0 ] unsigned char 
  4988 ;;  hour            1   32[BANK0 ] unsigned char 
  4989 ;;  day             1   31[BANK0 ] unsigned char 
  4990 ;;  month           1   30[BANK0 ] unsigned char 
  4991 ;;  year            1   29[BANK0 ] unsigned char 
  4992 ;; Return value:  Size  Location     Type
  4993 ;;                  1    wreg      void 
  4994 ;; Registers used:
  4995 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4996 ;; Tracked objects:
  4997 ;;		On entry : 0/0
  4998 ;;		On exit  : 0/0
  4999 ;;		Unchanged: 0/0
  5000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5001 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5002 ;;      Locals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5003 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5004 ;;      Totals:         1      26       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5005 ;;Total ram usage:       27 bytes
  5006 ;; Hardware stack levels used:    1
  5007 ;; Hardware stack levels required when called:    8
  5008 ;; This function calls:
  5009 ;;		_Eeprom_ReadByte
  5010 ;;		_lcdInst
  5011 ;;		_next_address
  5012 ;;		_printf
  5013 ;; This function is called by:
  5014 ;;		_main
  5015 ;; This function uses a non-reentrant model
  5016 ;;
  5017                           
  5018                           	psect	text8
  5019  0010B4                     __ptext8:
  5020                           	opt stack 0
  5021  0010B4                     _show_log:
  5022                           	opt stack 22
  5023                           
  5024                           ;main.c: 696: for(unsigned char i=0;i<200;i++){
  5025                           
  5026                           ;incstack = 0
  5027  0010B4  0E00               	movlw	0
  5028  0010B6  0100               	movlb	0	; () banked
  5029  0010B8  6FA3               	movwf	show_log@i& (0+255),b
  5030  0010BA                     l5220:
  5031                           
  5032                           ; BSR set to: 0
  5033  0010BA  0EC7               	movlw	199
  5034  0010BC  0100               	movlb	0	; () banked
  5035  0010BE  65A3               	cpfsgt	show_log@i& (0+255),b
  5036  0010C0  D001               	goto	l5224
  5037  0010C2  D011               	goto	l449
  5038  0010C4                     l5224:
  5039                           
  5040                           ; BSR set to: 0
  5041                           ;main.c: 697: if (screenMode != currScreen)
  5042  0010C4  0100               	movlb	0	; () banked
  5043  0010C6  5190               	movf	show_log@currScreen& (0+255),w,b
  5044  0010C8  0100               	movlb	0	; () banked
  5045  0010CA  19DC               	xorwf	_screenMode& (0+255),w,b
  5046  0010CC  A4D8               	btfss	status,2,c
  5047  0010CE  D00B               	goto	l449
  5048                           
  5049                           ; BSR set to: 0
  5050                           ;main.c: 699: _delay((unsigned long)((10)*(10000000/4000.0)));
  5051                           
  5052                           ; BSR set to: 0
  5053                           
  5054                           ; BSR set to: 0
  5055                           ;main.c: 698: break;
  5056  0010D0  0E21               	movlw	33
  5057  0010D2  6E45               	movwf	??_show_log& (0+255),c
  5058  0010D4  0E76               	movlw	118
  5059  0010D6                     u5927:
  5060  0010D6  2EE8               	decfsz	wreg,f,c
  5061  0010D8  D7FE               	bra	u5927
  5062  0010DA  2E45               	decfsz	??_show_log& (0+255),f,c
  5063  0010DC  D7FC               	bra	u5927
  5064  0010DE  D000               	nop2	
  5065  0010E0  0100               	movlb	0	; () banked
  5066  0010E2  2BA3               	incf	show_log@i& (0+255),f,b
  5067  0010E4  D7EA               	goto	l5220
  5068  0010E6                     l449:
  5069                           
  5070                           ; BSR set to: 0
  5071                           ;main.c: 700: }
  5072                           ;main.c: 701: uint16_t address = log_address;
  5073  0010E6  C08E  F0A6         	movff	show_log@log_address,show_log@address
  5074  0010EA  C08F  F0A7         	movff	show_log@log_address+1,show_log@address+1
  5075                           
  5076                           ; BSR set to: 0
  5077                           ;main.c: 702: unsigned char year = Eeprom_ReadByte(address);
  5078  0010EE  C0A6  F031         	movff	show_log@address,Eeprom_ReadByte@address
  5079  0010F2  C0A7  F032         	movff	show_log@address+1,Eeprom_ReadByte@address+1
  5080  0010F6  ECED  F012         	call	_Eeprom_ReadByte	;wreg free
  5081  0010FA  0100               	movlb	0	; () banked
  5082  0010FC  6F9D               	movwf	show_log@year& (0+255),b
  5083                           
  5084                           ; BSR set to: 0
  5085                           ;main.c: 703: address = next_address(address);
  5086  0010FE  C0A6  F031         	movff	show_log@address,next_address@address
  5087  001102  C0A7  F032         	movff	show_log@address+1,next_address@address+1
  5088  001106  EC1F  F013         	call	_next_address	;wreg free
  5089  00110A  C031  F0A6         	movff	?_next_address,show_log@address
  5090  00110E  C032  F0A7         	movff	?_next_address+1,show_log@address+1
  5091                           
  5092                           ;main.c: 704: unsigned char month = Eeprom_ReadByte(address);
  5093  001112  C0A6  F031         	movff	show_log@address,Eeprom_ReadByte@address
  5094  001116  C0A7  F032         	movff	show_log@address+1,Eeprom_ReadByte@address+1
  5095  00111A  ECED  F012         	call	_Eeprom_ReadByte	;wreg free
  5096  00111E  0100               	movlb	0	; () banked
  5097  001120  6F9E               	movwf	show_log@month& (0+255),b
  5098                           
  5099                           ;main.c: 705: address = next_address(address);
  5100  001122  C0A6  F031         	movff	show_log@address,next_address@address
  5101  001126  C0A7  F032         	movff	show_log@address+1,next_address@address+1
  5102  00112A  EC1F  F013         	call	_next_address	;wreg free
  5103  00112E  C031  F0A6         	movff	?_next_address,show_log@address
  5104  001132  C032  F0A7         	movff	?_next_address+1,show_log@address+1
  5105                           
  5106                           ;main.c: 706: unsigned char day = Eeprom_ReadByte(address);
  5107  001136  C0A6  F031         	movff	show_log@address,Eeprom_ReadByte@address
  5108  00113A  C0A7  F032         	movff	show_log@address+1,Eeprom_ReadByte@address+1
  5109  00113E  ECED  F012         	call	_Eeprom_ReadByte	;wreg free
  5110  001142  0100               	movlb	0	; () banked
  5111  001144  6F9F               	movwf	show_log@day& (0+255),b
  5112                           
  5113                           ; BSR set to: 0
  5114                           ;main.c: 707: address = next_address(address);
  5115  001146  C0A6  F031         	movff	show_log@address,next_address@address
  5116  00114A  C0A7  F032         	movff	show_log@address+1,next_address@address+1
  5117  00114E  EC1F  F013         	call	_next_address	;wreg free
  5118  001152  C031  F0A6         	movff	?_next_address,show_log@address
  5119  001156  C032  F0A7         	movff	?_next_address+1,show_log@address+1
  5120                           
  5121                           ;main.c: 708: unsigned char hour = Eeprom_ReadByte(address);
  5122  00115A  C0A6  F031         	movff	show_log@address,Eeprom_ReadByte@address
  5123  00115E  C0A7  F032         	movff	show_log@address+1,Eeprom_ReadByte@address+1
  5124  001162  ECED  F012         	call	_Eeprom_ReadByte	;wreg free
  5125  001166  0100               	movlb	0	; () banked
  5126  001168  6FA0               	movwf	show_log@hour& (0+255),b
  5127                           
  5128                           ; BSR set to: 0
  5129                           ;main.c: 709: address = next_address(address);
  5130  00116A  C0A6  F031         	movff	show_log@address,next_address@address
  5131  00116E  C0A7  F032         	movff	show_log@address+1,next_address@address+1
  5132  001172  EC1F  F013         	call	_next_address	;wreg free
  5133  001176  C031  F0A6         	movff	?_next_address,show_log@address
  5134  00117A  C032  F0A7         	movff	?_next_address+1,show_log@address+1
  5135                           
  5136                           ;main.c: 710: unsigned char minute = Eeprom_ReadByte(address);
  5137  00117E  C0A6  F031         	movff	show_log@address,Eeprom_ReadByte@address
  5138  001182  C0A7  F032         	movff	show_log@address+1,Eeprom_ReadByte@address+1
  5139  001186  ECED  F012         	call	_Eeprom_ReadByte	;wreg free
  5140  00118A  0100               	movlb	0	; () banked
  5141  00118C  6FA1               	movwf	show_log@minute& (0+255),b
  5142                           
  5143                           ;main.c: 711: address = next_address(address);
  5144  00118E  C0A6  F031         	movff	show_log@address,next_address@address
  5145  001192  C0A7  F032         	movff	show_log@address+1,next_address@address+1
  5146  001196  EC1F  F013         	call	_next_address	;wreg free
  5147  00119A  C031  F0A6         	movff	?_next_address,show_log@address
  5148  00119E  C032  F0A7         	movff	?_next_address+1,show_log@address+1
  5149                           
  5150                           ;main.c: 712: unsigned char second = Eeprom_ReadByte(address);
  5151  0011A2  C0A6  F031         	movff	show_log@address,Eeprom_ReadByte@address
  5152  0011A6  C0A7  F032         	movff	show_log@address+1,Eeprom_ReadByte@address+1
  5153  0011AA  ECED  F012         	call	_Eeprom_ReadByte	;wreg free
  5154  0011AE  0100               	movlb	0	; () banked
  5155  0011B0  6FA2               	movwf	show_log@second& (0+255),b
  5156                           
  5157                           ; BSR set to: 0
  5158                           ;main.c: 713: address = next_address(address);
  5159  0011B2  C0A6  F031         	movff	show_log@address,next_address@address
  5160  0011B6  C0A7  F032         	movff	show_log@address+1,next_address@address+1
  5161  0011BA  EC1F  F013         	call	_next_address	;wreg free
  5162  0011BE  C031  F0A6         	movff	?_next_address,show_log@address
  5163  0011C2  C032  F0A7         	movff	?_next_address+1,show_log@address+1
  5164                           
  5165                           ;main.c: 715: unsigned int AA_num = Eeprom_ReadByte(address);
  5166  0011C6  C0A6  F031         	movff	show_log@address,Eeprom_ReadByte@address
  5167  0011CA  C0A7  F032         	movff	show_log@address+1,Eeprom_ReadByte@address+1
  5168  0011CE  ECED  F012         	call	_Eeprom_ReadByte	;wreg free
  5169  0011D2  6E45               	movwf	??_show_log& (0+255),c
  5170  0011D4  5045               	movf	??_show_log,w,c
  5171  0011D6  0100               	movlb	0	; () banked
  5172  0011D8  6F93               	movwf	show_log@AA_num& (0+255),b
  5173  0011DA  6B94               	clrf	(show_log@AA_num+1)& (0+255),b
  5174                           
  5175                           ; BSR set to: 0
  5176                           ;main.c: 716: address = next_address(address);
  5177  0011DC  C0A6  F031         	movff	show_log@address,next_address@address
  5178  0011E0  C0A7  F032         	movff	show_log@address+1,next_address@address+1
  5179  0011E4  EC1F  F013         	call	_next_address	;wreg free
  5180  0011E8  C031  F0A6         	movff	?_next_address,show_log@address
  5181  0011EC  C032  F0A7         	movff	?_next_address+1,show_log@address+1
  5182                           
  5183                           ;main.c: 717: unsigned int C_num = Eeprom_ReadByte(address);
  5184  0011F0  C0A6  F031         	movff	show_log@address,Eeprom_ReadByte@address
  5185  0011F4  C0A7  F032         	movff	show_log@address+1,Eeprom_ReadByte@address+1
  5186  0011F8  ECED  F012         	call	_Eeprom_ReadByte	;wreg free
  5187  0011FC  6E45               	movwf	??_show_log& (0+255),c
  5188  0011FE  5045               	movf	??_show_log,w,c
  5189  001200  0100               	movlb	0	; () banked
  5190  001202  6F95               	movwf	show_log@C_num& (0+255),b
  5191  001204  6B96               	clrf	(show_log@C_num+1)& (0+255),b
  5192                           
  5193                           ; BSR set to: 0
  5194                           ;main.c: 718: address = next_address(address);
  5195  001206  C0A6  F031         	movff	show_log@address,next_address@address
  5196  00120A  C0A7  F032         	movff	show_log@address+1,next_address@address+1
  5197  00120E  EC1F  F013         	call	_next_address	;wreg free
  5198  001212  C031  F0A6         	movff	?_next_address,show_log@address
  5199  001216  C032  F0A7         	movff	?_next_address+1,show_log@address+1
  5200                           
  5201                           ;main.c: 719: unsigned int Nine_num = Eeprom_ReadByte(address);
  5202  00121A  C0A6  F031         	movff	show_log@address,Eeprom_ReadByte@address
  5203  00121E  C0A7  F032         	movff	show_log@address+1,Eeprom_ReadByte@address+1
  5204  001222  ECED  F012         	call	_Eeprom_ReadByte	;wreg free
  5205  001226  6E45               	movwf	??_show_log& (0+255),c
  5206  001228  5045               	movf	??_show_log,w,c
  5207  00122A  0100               	movlb	0	; () banked
  5208  00122C  6F97               	movwf	show_log@Nine_num& (0+255),b
  5209  00122E  6B98               	clrf	(show_log@Nine_num+1)& (0+255),b
  5210                           
  5211                           ; BSR set to: 0
  5212                           ;main.c: 720: address = next_address(address);
  5213  001230  C0A6  F031         	movff	show_log@address,next_address@address
  5214  001234  C0A7  F032         	movff	show_log@address+1,next_address@address+1
  5215  001238  EC1F  F013         	call	_next_address	;wreg free
  5216  00123C  C031  F0A6         	movff	?_next_address,show_log@address
  5217  001240  C032  F0A7         	movff	?_next_address+1,show_log@address+1
  5218                           
  5219                           ;main.c: 721: unsigned int Drain_num = Eeprom_ReadByte(address);
  5220  001244  C0A6  F031         	movff	show_log@address,Eeprom_ReadByte@address
  5221  001248  C0A7  F032         	movff	show_log@address+1,Eeprom_ReadByte@address+1
  5222  00124C  ECED  F012         	call	_Eeprom_ReadByte	;wreg free
  5223  001250  6E45               	movwf	??_show_log& (0+255),c
  5224  001252  5045               	movf	??_show_log,w,c
  5225  001254  0100               	movlb	0	; () banked
  5226  001256  6F99               	movwf	show_log@Drain_num& (0+255),b
  5227  001258  6B9A               	clrf	(show_log@Drain_num+1)& (0+255),b
  5228                           
  5229                           ; BSR set to: 0
  5230                           ;main.c: 722: address = next_address(address);
  5231  00125A  C0A6  F031         	movff	show_log@address,next_address@address
  5232  00125E  C0A7  F032         	movff	show_log@address+1,next_address@address+1
  5233  001262  EC1F  F013         	call	_next_address	;wreg free
  5234  001266  C031  F0A6         	movff	?_next_address,show_log@address
  5235  00126A  C032  F0A7         	movff	?_next_address+1,show_log@address+1
  5236                           
  5237                           ;main.c: 723: unsigned int total_num = Eeprom_ReadByte(address);
  5238  00126E  C0A6  F031         	movff	show_log@address,Eeprom_ReadByte@address
  5239  001272  C0A7  F032         	movff	show_log@address+1,Eeprom_ReadByte@address+1
  5240  001276  ECED  F012         	call	_Eeprom_ReadByte	;wreg free
  5241  00127A  6E45               	movwf	??_show_log& (0+255),c
  5242  00127C  5045               	movf	??_show_log,w,c
  5243  00127E  0100               	movlb	0	; () banked
  5244  001280  6F91               	movwf	show_log@total_num& (0+255),b
  5245  001282  6B92               	clrf	(show_log@total_num+1)& (0+255),b
  5246                           
  5247                           ; BSR set to: 0
  5248                           ;main.c: 724: address = next_address(address);
  5249  001284  C0A6  F031         	movff	show_log@address,next_address@address
  5250  001288  C0A7  F032         	movff	show_log@address+1,next_address@address+1
  5251  00128C  EC1F  F013         	call	_next_address	;wreg free
  5252  001290  C031  F0A6         	movff	?_next_address,show_log@address
  5253  001294  C032  F0A7         	movff	?_next_address+1,show_log@address+1
  5254                           
  5255                           ;main.c: 725: unsigned int elapsed_time = Eeprom_ReadByte(address);
  5256  001298  C0A6  F031         	movff	show_log@address,Eeprom_ReadByte@address
  5257  00129C  C0A7  F032         	movff	show_log@address+1,Eeprom_ReadByte@address+1
  5258  0012A0  ECED  F012         	call	_Eeprom_ReadByte	;wreg free
  5259  0012A4  6E45               	movwf	??_show_log& (0+255),c
  5260  0012A6  5045               	movf	??_show_log,w,c
  5261  0012A8  0100               	movlb	0	; () banked
  5262  0012AA  6F9B               	movwf	show_log@elapsed_time& (0+255),b
  5263  0012AC  6B9C               	clrf	(show_log@elapsed_time+1)& (0+255),b
  5264                           
  5265                           ;main.c: 727: while (screenMode == currScreen){
  5266  0012AE  D07C               	goto	l5312
  5267  0012B0                     l5272:
  5268                           
  5269                           ; BSR set to: 0
  5270                           ;main.c: 728: lcdInst(0b10000000);;
  5271  0012B0  0E80               	movlw	128
  5272  0012B2  EC33  F013         	call	_lcdInst
  5273                           
  5274                           ;main.c: 729: printf("%02x/%02x/%02x        ", year,month,day);
  5275  0012B6  0EDB               	movlw	low STR_20
  5276  0012B8  6E3D               	movwf	printf@f,c
  5277  0012BA  0EFD               	movlw	high STR_20
  5278  0012BC  6E3E               	movwf	printf@f+1,c
  5279  0012BE  C09D  F03F         	movff	show_log@year,?_printf+2
  5280  0012C2  6A40               	clrf	?_printf+3,c
  5281  0012C4  C09E  F041         	movff	show_log@month,?_printf+4
  5282  0012C8  6A42               	clrf	?_printf+5,c
  5283  0012CA  C09F  F043         	movff	show_log@day,?_printf+6
  5284  0012CE  6A44               	clrf	?_printf+7,c
  5285  0012D0  EC02  F005         	call	_printf	;wreg free
  5286                           
  5287                           ;main.c: 730: lcdInst(0b11000000);;
  5288  0012D4  0EC0               	movlw	192
  5289  0012D6  EC33  F013         	call	_lcdInst
  5290                           
  5291                           ;main.c: 731: printf("%02x:%02x:%02x        ", hour,minute, second);
  5292  0012DA  0EF2               	movlw	low STR_21
  5293  0012DC  6E3D               	movwf	printf@f,c
  5294  0012DE  0EFD               	movlw	high STR_21
  5295  0012E0  6E3E               	movwf	printf@f+1,c
  5296  0012E2  C0A0  F03F         	movff	show_log@hour,?_printf+2
  5297  0012E6  6A40               	clrf	?_printf+3,c
  5298  0012E8  C0A1  F041         	movff	show_log@minute,?_printf+4
  5299  0012EC  6A42               	clrf	?_printf+5,c
  5300  0012EE  C0A2  F043         	movff	show_log@second,?_printf+6
  5301  0012F2  6A44               	clrf	?_printf+7,c
  5302  0012F4  EC02  F005         	call	_printf	;wreg free
  5303                           
  5304                           ;main.c: 732: for(unsigned char i=0;i<200;i++){
  5305  0012F8  0E00               	movlw	0
  5306  0012FA  0100               	movlb	0	; () banked
  5307  0012FC  6FA4               	movwf	show_log@i_867& (0+255),b
  5308  0012FE                     l5280:
  5309                           
  5310                           ; BSR set to: 0
  5311  0012FE  0EC7               	movlw	199
  5312  001300  0100               	movlb	0	; () banked
  5313  001302  65A4               	cpfsgt	show_log@i_867& (0+255),b
  5314  001304  D001               	goto	l5284
  5315  001306  D011               	goto	l5292
  5316  001308                     l5284:
  5317                           
  5318                           ; BSR set to: 0
  5319                           ;main.c: 733: if (screenMode != currScreen)
  5320  001308  0100               	movlb	0	; () banked
  5321  00130A  5190               	movf	show_log@currScreen& (0+255),w,b
  5322  00130C  0100               	movlb	0	; () banked
  5323  00130E  19DC               	xorwf	_screenMode& (0+255),w,b
  5324  001310  A4D8               	btfss	status,2,c
  5325  001312  D00B               	goto	l5292
  5326                           
  5327                           ; BSR set to: 0
  5328                           ;main.c: 735: _delay((unsigned long)((10)*(10000000/4000.0)));
  5329                           
  5330                           ; BSR set to: 0
  5331                           
  5332                           ; BSR set to: 0
  5333                           ;main.c: 734: break;
  5334  001314  0E21               	movlw	33
  5335  001316  6E45               	movwf	??_show_log& (0+255),c
  5336  001318  0E76               	movlw	118
  5337  00131A                     u5937:
  5338  00131A  2EE8               	decfsz	wreg,f,c
  5339  00131C  D7FE               	bra	u5937
  5340  00131E  2E45               	decfsz	??_show_log& (0+255),f,c
  5341  001320  D7FC               	bra	u5937
  5342  001322  D000               	nop2	
  5343  001324  0100               	movlb	0	; () banked
  5344  001326  2BA4               	incf	show_log@i_867& (0+255),f,b
  5345  001328  D7EA               	goto	l5280
  5346  00132A                     l5292:
  5347                           
  5348                           ; BSR set to: 0
  5349                           ;main.c: 736: }
  5350                           ;main.c: 737: lcdInst(0b10000000);;
  5351  00132A  0E80               	movlw	128
  5352  00132C  EC33  F013         	call	_lcdInst
  5353                           
  5354                           ;main.c: 738: printf("AA:%02d C:%02d 9V:%02d", AA_num, C_num, Nine_num);
  5355  001330  0E37               	movlw	low STR_37
  5356  001332  6E3D               	movwf	printf@f,c
  5357  001334  0EFE               	movlw	high STR_37
  5358  001336  6E3E               	movwf	printf@f+1,c
  5359  001338  C093  F03F         	movff	show_log@AA_num,?_printf+2
  5360  00133C  C094  F040         	movff	show_log@AA_num+1,?_printf+3
  5361  001340  C095  F041         	movff	show_log@C_num,?_printf+4
  5362  001344  C096  F042         	movff	show_log@C_num+1,?_printf+5
  5363  001348  C097  F043         	movff	show_log@Nine_num,?_printf+6
  5364  00134C  C098  F044         	movff	show_log@Nine_num+1,?_printf+7
  5365  001350  EC02  F005         	call	_printf	;wreg free
  5366                           
  5367                           ;main.c: 739: lcdInst(0b11000000);;
  5368  001354  0EC0               	movlw	192
  5369  001356  EC33  F013         	call	_lcdInst
  5370                           
  5371                           ;main.c: 740: printf("X:%02d TIME:%ds    ", Drain_num, elapsed_time);
  5372  00135A  0E63               	movlw	low STR_38
  5373  00135C  6E3D               	movwf	printf@f,c
  5374  00135E  0EFE               	movlw	high STR_38
  5375  001360  6E3E               	movwf	printf@f+1,c
  5376  001362  C099  F03F         	movff	show_log@Drain_num,?_printf+2
  5377  001366  C09A  F040         	movff	show_log@Drain_num+1,?_printf+3
  5378  00136A  C09B  F041         	movff	show_log@elapsed_time,?_printf+4
  5379  00136E  C09C  F042         	movff	show_log@elapsed_time+1,?_printf+5
  5380  001372  EC02  F005         	call	_printf	;wreg free
  5381                           
  5382                           ;main.c: 743: for(unsigned char i=0;i<200;i++){
  5383  001376  0E00               	movlw	0
  5384  001378  0100               	movlb	0	; () banked
  5385  00137A  6FA5               	movwf	show_log@i_870& (0+255),b
  5386  00137C                     l5300:
  5387                           
  5388                           ; BSR set to: 0
  5389  00137C  0EC7               	movlw	199
  5390  00137E  0100               	movlb	0	; () banked
  5391  001380  65A5               	cpfsgt	show_log@i_870& (0+255),b
  5392  001382  D001               	goto	l5304
  5393  001384  D011               	goto	l5312
  5394  001386                     l5304:
  5395                           
  5396                           ; BSR set to: 0
  5397                           ;main.c: 744: if (screenMode != currScreen)
  5398  001386  0100               	movlb	0	; () banked
  5399  001388  5190               	movf	show_log@currScreen& (0+255),w,b
  5400  00138A  0100               	movlb	0	; () banked
  5401  00138C  19DC               	xorwf	_screenMode& (0+255),w,b
  5402  00138E  A4D8               	btfss	status,2,c
  5403  001390  D00B               	goto	l5312
  5404                           
  5405                           ; BSR set to: 0
  5406                           ;main.c: 746: _delay((unsigned long)((10)*(10000000/4000.0)));
  5407                           
  5408                           ; BSR set to: 0
  5409                           
  5410                           ; BSR set to: 0
  5411                           ;main.c: 745: break;
  5412  001392  0E21               	movlw	33
  5413  001394  6E45               	movwf	??_show_log& (0+255),c
  5414  001396  0E76               	movlw	118
  5415  001398                     u5947:
  5416  001398  2EE8               	decfsz	wreg,f,c
  5417  00139A  D7FE               	bra	u5947
  5418  00139C  2E45               	decfsz	??_show_log& (0+255),f,c
  5419  00139E  D7FC               	bra	u5947
  5420  0013A0  D000               	nop2	
  5421  0013A2  0100               	movlb	0	; () banked
  5422  0013A4  2BA5               	incf	show_log@i_870& (0+255),f,b
  5423  0013A6  D7EA               	goto	l5300
  5424  0013A8                     l5312:
  5425                           
  5426                           ; BSR set to: 0
  5427  0013A8  0100               	movlb	0	; () banked
  5428  0013AA  5190               	movf	show_log@currScreen& (0+255),w,b
  5429  0013AC  0100               	movlb	0	; () banked
  5430  0013AE  19DC               	xorwf	_screenMode& (0+255),w,b
  5431  0013B0  A4D8               	btfss	status,2,c
  5432  0013B2  0012               	return	
  5433  0013B4  D77D               	goto	l5272
  5434  0013B6                     __end_of_show_log:
  5435                           	opt stack 0
  5436                           tblptru	equ	0xFF8
  5437                           tblptrh	equ	0xFF7
  5438                           tblptrl	equ	0xFF6
  5439                           tablat	equ	0xFF5
  5440                           prodh	equ	0xFF4
  5441                           prodl	equ	0xFF3
  5442                           intcon	equ	0xFF2
  5443                           intcon2	equ	0xFF1
  5444                           intcon3	equ	0xFF0
  5445                           postinc0	equ	0xFEE
  5446                           wreg	equ	0xFE8
  5447                           indf2	equ	0xFDF
  5448                           fsr2h	equ	0xFDA
  5449                           fsr2l	equ	0xFD9
  5450                           status	equ	0xFD8
  5451                           
  5452 ;; *************** function _printf *****************
  5453 ;; Defined at:
  5454 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  5455 ;; Parameters:    Size  Location     Type
  5456 ;;  f               2   60[COMRAM] PTR const unsigned char 
  5457 ;;		 -> STR_38(20), STR_37(23), STR_36(23), STR_35(23), 
  5458 ;;		 -> STR_34(17), STR_33(15), STR_32(17), STR_31(23), 
  5459 ;;		 -> STR_30(23), STR_29(17), STR_28(17), STR_27(17), 
  5460 ;;		 -> STR_26(17), STR_25(17), STR_24(17), STR_23(17), 
  5461 ;;		 -> STR_22(17), STR_21(23), STR_20(23), STR_19(17), 
  5462 ;;		 -> STR_18(21), STR_17(17), STR_16(21), STR_15(17), 
  5463 ;;		 -> STR_14(21), STR_13(17), STR_12(19), STR_11(17), 
  5464 ;;		 -> STR_10(19), STR_9(17), STR_8(25), STR_7(17), 
  5465 ;;		 -> STR_6(17), STR_5(17), STR_4(17), STR_3(17), 
  5466 ;;		 -> STR_2(17), STR_1(17), 
  5467 ;; Auto vars:     Size  Location     Type
  5468 ;;  idx             1    4[BANK0 ] unsigned char 
  5469 ;;  tmpval          4    0        struct .
  5470 ;;  cp              3    0        PTR const unsigned char 
  5471 ;;  width           2   11[BANK0 ] int 
  5472 ;;  val             2    8[BANK0 ] unsigned int 
  5473 ;;  ap              2    5[BANK0 ] PTR void [1]
  5474 ;;		 -> ?i2_printf(2), ?_printf(2), 
  5475 ;;  len             2    0        unsigned int 
  5476 ;;  c               1   13[BANK0 ] char 
  5477 ;;  flag            1   10[BANK0 ] unsigned char 
  5478 ;;  prec            1    7[BANK0 ] char 
  5479 ;; Return value:  Size  Location     Type
  5480 ;;                  2   60[COMRAM] int 
  5481 ;; Registers used:
  5482 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5483 ;; Tracked objects:
  5484 ;;		On entry : 0/0
  5485 ;;		On exit  : 0/0
  5486 ;;		Unchanged: 0/0
  5487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5488 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5489 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5490 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5491 ;;      Totals:         8      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5492 ;;Total ram usage:       22 bytes
  5493 ;; Hardware stack levels used:    1
  5494 ;; Hardware stack levels required when called:    7
  5495 ;; This function calls:
  5496 ;;		___lwdiv
  5497 ;;		___lwmod
  5498 ;;		___wmul
  5499 ;;		_isdigit
  5500 ;;		_putch
  5501 ;; This function is called by:
  5502 ;;		_main
  5503 ;;		_testBatteries
  5504 ;;		_show_log
  5505 ;; This function uses a non-reentrant model
  5506 ;;
  5507                           
  5508                           	psect	text9
  5509  000A04                     __ptext9:
  5510                           	opt stack 0
  5511  000A04                     _printf:
  5512                           	opt stack 22
  5513                           
  5514                           ;doprnt.c: 466: va_list ap;
  5515                           ;doprnt.c: 499: signed char c;
  5516                           ;doprnt.c: 501: int width;
  5517                           ;doprnt.c: 506: signed char prec;
  5518                           ;doprnt.c: 508: unsigned char flag;
  5519                           ;doprnt.c: 523: union {
  5520                           ;doprnt.c: 524: unsigned long vd;
  5521                           ;doprnt.c: 525: double integ;
  5522                           ;doprnt.c: 526: } tmpval;
  5523                           ;doprnt.c: 528: unsigned int val;
  5524                           ;doprnt.c: 529: unsigned len;
  5525                           ;doprnt.c: 530: const char * cp;
  5526                           ;doprnt.c: 533: *ap = __va_start();
  5527                           
  5528                           ; BSR set to: 0
  5529                           ;incstack = 0
  5530  000A04  0E3F               	movlw	low (?_printf+2)
  5531  000A06  0100               	movlb	0	; () banked
  5532  000A08  6F85               	movwf	printf@ap& (0+255),b
  5533  000A0A  0E00               	movlw	high (?_printf+2)
  5534  000A0C  0100               	movlb	0	; () banked
  5535  000A0E  6F86               	movwf	(printf@ap+1)& (0+255),b
  5536                           
  5537                           ;doprnt.c: 536: while(c = *f++) {
  5538  000A10  D1BD               	goto	l5122
  5539  000A12                     l4996:
  5540                           
  5541                           ; BSR set to: 0
  5542                           ;doprnt.c: 538: if(c != '%')
  5543  000A12  0E25               	movlw	37
  5544  000A14  0100               	movlb	0	; () banked
  5545  000A16  198D               	xorwf	printf@c& (0+255),w,b
  5546  000A18  B4D8               	btfsc	status,2,c
  5547  000A1A  D005               	goto	l5000
  5548                           
  5549                           ; BSR set to: 0
  5550                           ;doprnt.c: 540: {
  5551                           ;doprnt.c: 541: (putch(c) );
  5552  000A1C  0100               	movlb	0	; () banked
  5553  000A1E  518D               	movf	printf@c& (0+255),w,b
  5554  000A20  EC2D  F013         	call	_putch
  5555                           
  5556                           ;doprnt.c: 542: continue;
  5557  000A24  D1B3               	goto	l5122
  5558  000A26                     l5000:
  5559                           
  5560                           ;doprnt.c: 543: }
  5561                           ;doprnt.c: 546: width = 0;
  5562  000A26  0E00               	movlw	0
  5563  000A28  0100               	movlb	0	; () banked
  5564  000A2A  6F8C               	movwf	(printf@width+1)& (0+255),b
  5565  000A2C  0E00               	movlw	0
  5566  000A2E  6F8B               	movwf	printf@width& (0+255),b
  5567                           
  5568                           ;doprnt.c: 548: flag = 0;
  5569  000A30  0E00               	movlw	0
  5570  000A32  0100               	movlb	0	; () banked
  5571  000A34  6F8A               	movwf	printf@flag& (0+255),b
  5572                           
  5573                           ; BSR set to: 0
  5574                           ;doprnt.c: 551: switch(*f) {
  5575                           
  5576                           ;doprnt.c: 550: for(;;) {
  5577  000A36  D004               	goto	l5006
  5578  000A38                     l5002:
  5579                           
  5580                           ;doprnt.c: 580: flag |= 0x04;
  5581  000A38  0100               	movlb	0	; () banked
  5582  000A3A  858A               	bsf	printf@flag& (0+255),2,b
  5583                           
  5584                           ;doprnt.c: 581: f++;
  5585  000A3C  4A3D               	infsnz	printf@f,f,c
  5586  000A3E  2A3E               	incf	printf@f+1,f,c
  5587  000A40                     l5006:
  5588  000A40  C03D  FFF6         	movff	printf@f,tblptrl
  5589  000A44  C03E  FFF7         	movff	printf@f+1,tblptrh
  5590  000A48                     	if	0	;tblptru may be non-zero
  5591  000A48                     	endif
  5592  000A48                     	if	0	;tblptru may be non-zero
  5593  000A48                     	endif
  5594  000A48  0008               	tblrd		*
  5595  000A4A  50F5               	movf	tablat,w,c
  5596                           
  5597                           ; Switch size 1, requested type "space"
  5598                           ; Number of cases is 1, Range of values is 48 to 48
  5599                           ; switch strategies available:
  5600                           ; Name         Instructions Cycles
  5601                           ; simple_byte            4     3 (average)
  5602                           ;	Chosen strategy is simple_byte
  5603  000A4C  0A30               	xorlw	48	; case 48
  5604  000A4E  B4D8               	btfsc	status,2,c
  5605  000A50  D7F3               	goto	l5002
  5606                           
  5607                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  5608                           
  5609                           ;doprnt.c: 586: }
  5610                           
  5611                           ;doprnt.c: 585: break;
  5612  000A52  C03D  FFF6         	movff	printf@f,tblptrl
  5613  000A56  C03E  FFF7         	movff	printf@f+1,tblptrh
  5614  000A5A                     	if	0	;tblptru may be non-zero
  5615  000A5A                     	endif
  5616  000A5A                     	if	0	;tblptru may be non-zero
  5617  000A5A                     	endif
  5618  000A5A  0008               	tblrd		*
  5619  000A5C  50F5               	movf	tablat,w,c
  5620  000A5E  ECC2  F012         	call	_isdigit
  5621  000A62  A0D8               	btfss	status,0,c
  5622  000A64  D042               	goto	l5024
  5623                           
  5624                           ;doprnt.c: 598: width = 0;
  5625  000A66  0E00               	movlw	0
  5626  000A68  0100               	movlb	0	; () banked
  5627  000A6A  6F8C               	movwf	(printf@width+1)& (0+255),b
  5628  000A6C  0E00               	movlw	0
  5629  000A6E  6F8B               	movwf	printf@width& (0+255),b
  5630  000A70                     l5012:
  5631                           
  5632                           ;doprnt.c: 600: width *= 10;
  5633  000A70  C08B  F031         	movff	printf@width,___wmul@multiplier
  5634  000A74  C08C  F032         	movff	printf@width+1,___wmul@multiplier+1
  5635  000A78  0E00               	movlw	0
  5636  000A7A  6E34               	movwf	___wmul@multiplicand+1,c
  5637  000A7C  0E0A               	movlw	10
  5638  000A7E  6E33               	movwf	___wmul@multiplicand,c
  5639  000A80  EC63  F012         	call	___wmul	;wreg free
  5640  000A84  C031  F08B         	movff	?___wmul,printf@width
  5641  000A88  C032  F08C         	movff	?___wmul+1,printf@width+1
  5642                           
  5643                           ;doprnt.c: 601: width += *f++ - '0';
  5644  000A8C  0ED0               	movlw	208
  5645  000A8E  0100               	movlb	0	; () banked
  5646  000A90  6F80               	movwf	??_printf& (0+255),b
  5647  000A92  0EFF               	movlw	255
  5648  000A94  0100               	movlb	0	; () banked
  5649  000A96  6F81               	movwf	(??_printf+1)& (0+255),b
  5650  000A98  C03D  FFF6         	movff	printf@f,tblptrl
  5651  000A9C  C03E  FFF7         	movff	printf@f+1,tblptrh
  5652  000AA0                     	if	0	;tblptru may be non-zero
  5653  000AA0                     	endif
  5654  000AA0                     	if	0	;tblptru may be non-zero
  5655  000AA0                     	endif
  5656  000AA0  0008               	tblrd		*
  5657  000AA2  50F5               	movf	tablat,w,c
  5658  000AA4  0100               	movlb	0	; () banked
  5659  000AA6  6F82               	movwf	(??_printf+2)& (0+255),b
  5660  000AA8  6B83               	clrf	(??_printf+3)& (0+255),b
  5661  000AAA  0100               	movlb	0	; () banked
  5662  000AAC  5180               	movf	??_printf& (0+255),w,b
  5663  000AAE  0100               	movlb	0	; () banked
  5664  000AB0  2782               	addwf	(??_printf+2)& (0+255),f,b
  5665  000AB2  0100               	movlb	0	; () banked
  5666  000AB4  5181               	movf	(??_printf+1)& (0+255),w,b
  5667  000AB6  0100               	movlb	0	; () banked
  5668  000AB8  2383               	addwfc	(??_printf+3)& (0+255),f,b
  5669  000ABA  0100               	movlb	0	; () banked
  5670  000ABC  5182               	movf	(??_printf+2)& (0+255),w,b
  5671  000ABE  0100               	movlb	0	; () banked
  5672  000AC0  278B               	addwf	printf@width& (0+255),f,b
  5673  000AC2  0100               	movlb	0	; () banked
  5674  000AC4  5183               	movf	(??_printf+3)& (0+255),w,b
  5675  000AC6  0100               	movlb	0	; () banked
  5676  000AC8  238C               	addwfc	(printf@width+1)& (0+255),f,b
  5677                           
  5678                           ; BSR set to: 0
  5679  000ACA  4A3D               	infsnz	printf@f,f,c
  5680  000ACC  2A3E               	incf	printf@f+1,f,c
  5681                           
  5682                           ; BSR set to: 0
  5683                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  5684  000ACE  C03D  FFF6         	movff	printf@f,tblptrl
  5685  000AD2  C03E  FFF7         	movff	printf@f+1,tblptrh
  5686  000AD6                     	if	0	;tblptru may be non-zero
  5687  000AD6                     	endif
  5688  000AD6                     	if	0	;tblptru may be non-zero
  5689  000AD6                     	endif
  5690  000AD6  0008               	tblrd		*
  5691  000AD8  50F5               	movf	tablat,w,c
  5692  000ADA  ECC2  F012         	call	_isdigit
  5693  000ADE  A0D8               	btfss	status,0,c
  5694  000AE0  D004               	goto	l5024
  5695  000AE2  D7C6               	goto	l5012
  5696  000AE4                     l5020:
  5697                           
  5698                           ;doprnt.c: 721: flag |= 0x80;
  5699  000AE4  0100               	movlb	0	; () banked
  5700  000AE6  8F8A               	bsf	printf@flag& (0+255),7,b
  5701                           
  5702                           ;doprnt.c: 723: break;
  5703  000AE8  D018               	goto	l534
  5704  000AEA                     l5024:
  5705  000AEA  C03D  FFF6         	movff	printf@f,tblptrl
  5706  000AEE  C03E  FFF7         	movff	printf@f+1,tblptrh
  5707  000AF2  4A3D               	infsnz	printf@f,f,c
  5708  000AF4  2A3E               	incf	printf@f+1,f,c
  5709  000AF6                     	if	0	;tblptru may be non-zero
  5710  000AF6                     	endif
  5711  000AF6                     	if	0	;tblptru may be non-zero
  5712  000AF6                     	endif
  5713  000AF6  0008               	tblrd		*
  5714  000AF8  CFF5 F08D          	movff	tablat,printf@c
  5715  000AFC  0100               	movlb	0	; () banked
  5716  000AFE  518D               	movf	printf@c& (0+255),w,b
  5717                           
  5718                           ; Switch size 1, requested type "space"
  5719                           ; Number of cases is 4, Range of values is 0 to 120
  5720                           ; switch strategies available:
  5721                           ; Name         Instructions Cycles
  5722                           ; simple_byte           13     7 (average)
  5723                           ;	Chosen strategy is simple_byte
  5724  000B00  0A00               	xorlw	0	; case 0
  5725  000B02  B4D8               	btfsc	status,2,c
  5726  000B04  0012               	return	
  5727  000B06  0A64               	xorlw	100	; case 100
  5728  000B08  B4D8               	btfsc	status,2,c
  5729  000B0A  D007               	goto	l534
  5730  000B0C  0A0D               	xorlw	13	; case 105
  5731  000B0E  B4D8               	btfsc	status,2,c
  5732  000B10  D004               	goto	l534
  5733  000B12  0A11               	xorlw	17	; case 120
  5734  000B14  B4D8               	btfsc	status,2,c
  5735  000B16  D7E6               	goto	l5020
  5736  000B18  D139               	goto	l5122
  5737  000B1A                     l534:
  5738                           
  5739                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  5740  000B1A  0100               	movlb	0	; () banked
  5741  000B1C  BF8A               	btfsc	printf@flag& (0+255),7,b
  5742  000B1E  D019               	goto	l5036
  5743                           
  5744                           ; BSR set to: 0
  5745                           ;doprnt.c: 1253: {
  5746                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5747  000B20  C085  FFD9         	movff	printf@ap,fsr2l
  5748  000B24  C086  FFDA         	movff	printf@ap+1,fsr2h
  5749  000B28  CFDE F088          	movff	postinc2,printf@val
  5750  000B2C  CFDD F089          	movff	postdec2,printf@val+1
  5751                           
  5752                           ; BSR set to: 0
  5753  000B30  0E02               	movlw	2
  5754  000B32  0100               	movlb	0	; () banked
  5755  000B34  2785               	addwf	printf@ap& (0+255),f,b
  5756  000B36  0E00               	movlw	0
  5757  000B38  2386               	addwfc	(printf@ap+1)& (0+255),f,b
  5758                           
  5759                           ; BSR set to: 0
  5760                           ;doprnt.c: 1261: if((int)val < 0) {
  5761  000B3A  0100               	movlb	0	; () banked
  5762  000B3C  AF89               	btfss	(printf@val+1)& (0+255),7,b
  5763  000B3E  D053               	goto	l5070
  5764                           
  5765                           ; BSR set to: 0
  5766                           ;doprnt.c: 1262: flag |= 0x03;
  5767  000B40  0E03               	movlw	3
  5768  000B42  0100               	movlb	0	; () banked
  5769  000B44  138A               	iorwf	printf@flag& (0+255),f,b
  5770                           
  5771                           ; BSR set to: 0
  5772                           ;doprnt.c: 1263: val = -val;
  5773  000B46  0100               	movlb	0	; () banked
  5774  000B48  6D88               	negf	printf@val& (0+255),b
  5775  000B4A  1F89               	comf	(printf@val+1)& (0+255),f,b
  5776  000B4C  B0D8               	btfsc	status,0,c
  5777  000B4E  2B89               	incf	(printf@val+1)& (0+255),f,b
  5778                           
  5779                           ; BSR set to: 0
  5780                           ;doprnt.c: 1264: }
  5781                           ;doprnt.c: 1266: }
  5782  000B50  D04A               	goto	l5070
  5783  000B52                     l5036:
  5784                           
  5785                           ; BSR set to: 0
  5786                           ;doprnt.c: 1268: else
  5787                           ;doprnt.c: 1273: {
  5788                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  5789  000B52  C085  FFD9         	movff	printf@ap,fsr2l
  5790  000B56  C086  FFDA         	movff	printf@ap+1,fsr2h
  5791  000B5A  CFDE F088          	movff	postinc2,printf@val
  5792  000B5E  CFDD F089          	movff	postdec2,printf@val+1
  5793                           
  5794                           ; BSR set to: 0
  5795  000B62  0E02               	movlw	2
  5796  000B64  0100               	movlb	0	; () banked
  5797  000B66  2785               	addwf	printf@ap& (0+255),f,b
  5798  000B68  0E00               	movlw	0
  5799  000B6A  2386               	addwfc	(printf@ap+1)& (0+255),f,b
  5800                           
  5801                           ; BSR set to: 0
  5802                           ;doprnt.c: 1287: }
  5803                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  5804  000B6C  D03C               	goto	l5070
  5805  000B6E                     l5040:
  5806                           
  5807                           ; BSR set to: 0
  5808                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5809  000B6E  0E01               	movlw	1
  5810  000B70  0100               	movlb	0	; () banked
  5811  000B72  6F8D               	movwf	printf@c& (0+255),b
  5812  000B74                     l5042:
  5813                           
  5814                           ; BSR set to: 0
  5815  000B74  0E05               	movlw	5
  5816  000B76  0100               	movlb	0	; () banked
  5817  000B78  198D               	xorwf	printf@c& (0+255),w,b
  5818  000B7A  B4D8               	btfsc	status,2,c
  5819  000B7C  D03D               	goto	l5072
  5820                           
  5821                           ; BSR set to: 0
  5822                           ;doprnt.c: 1306: if(val < dpowers[c])
  5823                           
  5824                           ; BSR set to: 0
  5825                           
  5826                           ; BSR set to: 0
  5827  000B7E  0100               	movlb	0	; () banked
  5828  000B80  518D               	movf	printf@c& (0+255),w,b
  5829  000B82  0D02               	mullw	2
  5830  000B84  0EB0               	movlw	low _dpowers
  5831  000B86  24F3               	addwf	prodl,w,c
  5832  000B88  6EF6               	movwf	tblptrl,c
  5833  000B8A  0EFD               	movlw	high _dpowers
  5834  000B8C  20F4               	addwfc	prodh,w,c
  5835  000B8E  6EF7               	movwf	tblptrh,c
  5836  000B90                     	if	0	;There are less than 3 active tblptr bytes
  5837  000B90                     	endif
  5838  000B90  0009               	tblrd		*+
  5839  000B92  50F5               	movf	tablat,w,c
  5840  000B94  0100               	movlb	0	; () banked
  5841  000B96  5D88               	subwf	printf@val& (0+255),w,b
  5842  000B98  0009               	tblrd		*+
  5843  000B9A  50F5               	movf	tablat,w,c
  5844  000B9C  0100               	movlb	0	; () banked
  5845  000B9E  5989               	subwfb	(printf@val+1)& (0+255),w,b
  5846  000BA0  A0D8               	btfss	status,0,c
  5847  000BA2  D02A               	goto	l5072
  5848                           
  5849                           ; BSR set to: 0
  5850                           
  5851                           ; BSR set to: 0
  5852                           
  5853                           ; BSR set to: 0
  5854                           ;doprnt.c: 1307: break;
  5855  000BA4  0100               	movlb	0	; () banked
  5856  000BA6  2B8D               	incf	printf@c& (0+255),f,b
  5857  000BA8  D7E5               	goto	l5042
  5858  000BAA                     l5054:
  5859                           
  5860                           ; BSR set to: 0
  5861                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  5862  000BAA  0E01               	movlw	1
  5863  000BAC  0100               	movlb	0	; () banked
  5864  000BAE  6F8D               	movwf	printf@c& (0+255),b
  5865  000BB0                     l5056:
  5866                           
  5867                           ; BSR set to: 0
  5868  000BB0  0E04               	movlw	4
  5869  000BB2  0100               	movlb	0	; () banked
  5870  000BB4  198D               	xorwf	printf@c& (0+255),w,b
  5871  000BB6  B4D8               	btfsc	status,2,c
  5872  000BB8  D01F               	goto	l5072
  5873                           
  5874                           ; BSR set to: 0
  5875                           ;doprnt.c: 1317: if(val < hexpowers[c])
  5876                           
  5877                           ; BSR set to: 0
  5878                           
  5879                           ; BSR set to: 0
  5880  000BBA  0100               	movlb	0	; () banked
  5881  000BBC  518D               	movf	printf@c& (0+255),w,b
  5882  000BBE  0D02               	mullw	2
  5883  000BC0  0EBA               	movlw	low _hexpowers
  5884  000BC2  24F3               	addwf	prodl,w,c
  5885  000BC4  6EF6               	movwf	tblptrl,c
  5886  000BC6  0EFD               	movlw	high _hexpowers
  5887  000BC8  20F4               	addwfc	prodh,w,c
  5888  000BCA  6EF7               	movwf	tblptrh,c
  5889  000BCC                     	if	0	;There are less than 3 active tblptr bytes
  5890  000BCC                     	endif
  5891  000BCC  0009               	tblrd		*+
  5892  000BCE  50F5               	movf	tablat,w,c
  5893  000BD0  0100               	movlb	0	; () banked
  5894  000BD2  5D88               	subwf	printf@val& (0+255),w,b
  5895  000BD4  0009               	tblrd		*+
  5896  000BD6  50F5               	movf	tablat,w,c
  5897  000BD8  0100               	movlb	0	; () banked
  5898  000BDA  5989               	subwfb	(printf@val+1)& (0+255),w,b
  5899  000BDC  A0D8               	btfss	status,0,c
  5900  000BDE  D00C               	goto	l5072
  5901                           
  5902                           ; BSR set to: 0
  5903                           
  5904                           ; BSR set to: 0
  5905                           
  5906                           ; BSR set to: 0
  5907                           ;doprnt.c: 1318: break;
  5908  000BE0  0100               	movlb	0	; () banked
  5909  000BE2  2B8D               	incf	printf@c& (0+255),f,b
  5910  000BE4  D7E5               	goto	l5056
  5911  000BE6                     l5070:
  5912                           
  5913                           ; BSR set to: 0
  5914  000BE6  0100               	movlb	0	; () banked
  5915  000BE8  518A               	movf	printf@flag& (0+255),w,b
  5916  000BEA  0B80               	andlw	128
  5917                           
  5918                           ; Switch size 1, requested type "space"
  5919                           ; Number of cases is 2, Range of values is 0 to 128
  5920                           ; switch strategies available:
  5921                           ; Name         Instructions Cycles
  5922                           ; simple_byte            7     4 (average)
  5923                           ;	Chosen strategy is simple_byte
  5924  000BEC  0A00               	xorlw	0	; case 0
  5925  000BEE  B4D8               	btfsc	status,2,c
  5926  000BF0  D7BE               	goto	l5040
  5927  000BF2  0A80               	xorlw	128	; case 128
  5928  000BF4  B4D8               	btfsc	status,2,c
  5929  000BF6  D7D9               	goto	l5054
  5930  000BF8                     l5072:
  5931                           
  5932                           ; BSR set to: 0
  5933                           ;doprnt.c: 1345: if(width && flag & 0x03)
  5934  000BF8  0100               	movlb	0	; () banked
  5935  000BFA  518B               	movf	printf@width& (0+255),w,b
  5936  000BFC  0100               	movlb	0	; () banked
  5937  000BFE  118C               	iorwf	(printf@width+1)& (0+255),w,b
  5938  000C00  B4D8               	btfsc	status,2,c
  5939  000C02  D00B               	goto	l5078
  5940                           
  5941                           ; BSR set to: 0
  5942  000C04  C08A  F080         	movff	printf@flag,??_printf
  5943  000C08  0E03               	movlw	3
  5944  000C0A  0100               	movlb	0	; () banked
  5945  000C0C  1780               	andwf	??_printf& (0+255),f,b
  5946  000C0E  B4D8               	btfsc	status,2,c
  5947  000C10  D004               	goto	l5078
  5948                           
  5949                           ; BSR set to: 0
  5950                           ;doprnt.c: 1346: width--;
  5951  000C12  0100               	movlb	0	; () banked
  5952  000C14  078B               	decf	printf@width& (0+255),f,b
  5953  000C16  A0D8               	btfss	status,0,c
  5954  000C18  078C               	decf	(printf@width+1)& (0+255),f,b
  5955  000C1A                     l5078:
  5956                           
  5957                           ; BSR set to: 0
  5958                           ;doprnt.c: 1381: if(width > c)
  5959  000C1A  0E80               	movlw	128
  5960  000C1C  0100               	movlb	0	; () banked
  5961  000C1E  BF8D               	btfsc	printf@c& (0+255),7,b
  5962  000C20  0E7F               	movlw	127
  5963  000C22  0100               	movlb	0	; () banked
  5964  000C24  6F80               	movwf	??_printf& (0+255),b
  5965  000C26  0100               	movlb	0	; () banked
  5966  000C28  518B               	movf	printf@width& (0+255),w,b
  5967  000C2A  0100               	movlb	0	; () banked
  5968  000C2C  5D8D               	subwf	printf@c& (0+255),w,b
  5969  000C2E  0100               	movlb	0	; () banked
  5970  000C30  518C               	movf	(printf@width+1)& (0+255),w,b
  5971  000C32  0A80               	xorlw	128
  5972  000C34  0100               	movlb	0	; () banked
  5973  000C36  5980               	subwfb	??_printf& (0+255),w,b
  5974  000C38  B0D8               	btfsc	status,0,c
  5975  000C3A  D00B               	goto	l5082
  5976                           
  5977                           ; BSR set to: 0
  5978                           ;doprnt.c: 1382: width -= c;
  5979  000C3C  0100               	movlb	0	; () banked
  5980  000C3E  518D               	movf	printf@c& (0+255),w,b
  5981  000C40  0100               	movlb	0	; () banked
  5982  000C42  5F8B               	subwf	printf@width& (0+255),f,b
  5983  000C44  0E00               	movlw	0
  5984  000C46  0100               	movlb	0	; () banked
  5985  000C48  BF8D               	btfsc	printf@c& (0+255),7,b
  5986  000C4A  0EFF               	movlw	255
  5987  000C4C  0100               	movlb	0	; () banked
  5988  000C4E  5B8C               	subwfb	(printf@width+1)& (0+255),f,b
  5989  000C50  D005               	goto	l5084
  5990  000C52                     l5082:
  5991                           
  5992                           ; BSR set to: 0
  5993                           ;doprnt.c: 1383: else
  5994                           ;doprnt.c: 1384: width = 0;
  5995  000C52  0E00               	movlw	0
  5996  000C54  0100               	movlb	0	; () banked
  5997  000C56  6F8C               	movwf	(printf@width+1)& (0+255),b
  5998  000C58  0E00               	movlw	0
  5999  000C5A  6F8B               	movwf	printf@width& (0+255),b
  6000  000C5C                     l5084:
  6001                           
  6002                           ; BSR set to: 0
  6003                           ;doprnt.c: 1387: if(flag & 0x04) {
  6004  000C5C  0100               	movlb	0	; () banked
  6005  000C5E  A58A               	btfss	printf@flag& (0+255),2,b
  6006  000C60  D018               	goto	l5096
  6007                           
  6008                           ; BSR set to: 0
  6009                           ;doprnt.c: 1392: if(flag & 0x03)
  6010  000C62  C08A  F080         	movff	printf@flag,??_printf
  6011  000C66  0E03               	movlw	3
  6012  000C68  0100               	movlb	0	; () banked
  6013  000C6A  1780               	andwf	??_printf& (0+255),f,b
  6014  000C6C  B4D8               	btfsc	status,2,c
  6015  000C6E  D003               	goto	l5090
  6016                           
  6017                           ; BSR set to: 0
  6018                           ;doprnt.c: 1393: (putch('-') );
  6019  000C70  0E2D               	movlw	45
  6020  000C72  EC2D  F013         	call	_putch
  6021  000C76                     l5090:
  6022                           
  6023                           ;doprnt.c: 1415: if(width)
  6024  000C76  0100               	movlb	0	; () banked
  6025  000C78  518B               	movf	printf@width& (0+255),w,b
  6026  000C7A  0100               	movlb	0	; () banked
  6027  000C7C  118C               	iorwf	(printf@width+1)& (0+255),w,b
  6028  000C7E  B4D8               	btfsc	status,2,c
  6029  000C80  D025               	goto	l5106
  6030                           
  6031                           ; BSR set to: 0
  6032                           ;doprnt.c: 1417: (putch('0') );
  6033                           
  6034                           ; BSR set to: 0
  6035                           
  6036                           ;doprnt.c: 1416: do
  6037  000C82  0E30               	movlw	48
  6038  000C84  EC2D  F013         	call	_putch
  6039                           
  6040                           ;doprnt.c: 1418: while(--width);
  6041  000C88  0100               	movlb	0	; () banked
  6042  000C8A  078B               	decf	printf@width& (0+255),f,b
  6043  000C8C  A0D8               	btfss	status,0,c
  6044  000C8E  078C               	decf	(printf@width+1)& (0+255),f,b
  6045  000C90  D7F2               	goto	l5090
  6046  000C92                     l5096:
  6047                           
  6048                           ; BSR set to: 0
  6049                           ;doprnt.c: 1422: {
  6050                           ;doprnt.c: 1424: if(width
  6051                           ;doprnt.c: 1428: )
  6052  000C92  0100               	movlb	0	; () banked
  6053  000C94  518B               	movf	printf@width& (0+255),w,b
  6054  000C96  0100               	movlb	0	; () banked
  6055  000C98  118C               	iorwf	(printf@width+1)& (0+255),w,b
  6056  000C9A  B4D8               	btfsc	status,2,c
  6057  000C9C  D00D               	goto	l5102
  6058  000C9E                     l5098:
  6059                           
  6060                           ; BSR set to: 0
  6061                           ;doprnt.c: 1430: (putch(' ') );
  6062  000C9E  0E20               	movlw	32
  6063  000CA0  EC2D  F013         	call	_putch
  6064                           
  6065                           ;doprnt.c: 1431: while(--width);
  6066  000CA4  0100               	movlb	0	; () banked
  6067  000CA6  078B               	decf	printf@width& (0+255),f,b
  6068  000CA8  A0D8               	btfss	status,0,c
  6069  000CAA  078C               	decf	(printf@width+1)& (0+255),f,b
  6070  000CAC  0100               	movlb	0	; () banked
  6071  000CAE  518B               	movf	printf@width& (0+255),w,b
  6072  000CB0  0100               	movlb	0	; () banked
  6073  000CB2  118C               	iorwf	(printf@width+1)& (0+255),w,b
  6074  000CB4  A4D8               	btfss	status,2,c
  6075  000CB6  D7F3               	goto	l5098
  6076  000CB8                     l5102:
  6077                           
  6078                           ; BSR set to: 0
  6079                           ;doprnt.c: 1438: if(flag & 0x03)
  6080  000CB8  C08A  F080         	movff	printf@flag,??_printf
  6081  000CBC  0E03               	movlw	3
  6082  000CBE  0100               	movlb	0	; () banked
  6083  000CC0  1780               	andwf	??_printf& (0+255),f,b
  6084  000CC2  B4D8               	btfsc	status,2,c
  6085  000CC4  D003               	goto	l5106
  6086                           
  6087                           ; BSR set to: 0
  6088                           ;doprnt.c: 1439: (putch('-') );
  6089  000CC6  0E2D               	movlw	45
  6090  000CC8  EC2D  F013         	call	_putch
  6091  000CCC                     l5106:
  6092                           
  6093                           ;doprnt.c: 1469: }
  6094                           ;doprnt.c: 1472: prec = c;
  6095  000CCC  C08D  F087         	movff	printf@c,printf@prec
  6096                           
  6097                           ;doprnt.c: 1474: while(prec--) {
  6098  000CD0  D057               	goto	l5120
  6099  000CD2                     l5108:
  6100                           
  6101                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6102  000CD2  0100               	movlb	0	; () banked
  6103  000CD4  5187               	movf	printf@prec& (0+255),w,b
  6104  000CD6  0D02               	mullw	2
  6105  000CD8  0EB0               	movlw	low _dpowers
  6106  000CDA  24F3               	addwf	prodl,w,c
  6107  000CDC  6EF6               	movwf	tblptrl,c
  6108  000CDE  0EFD               	movlw	high _dpowers
  6109  000CE0  20F4               	addwfc	prodh,w,c
  6110  000CE2  6EF7               	movwf	tblptrh,c
  6111  000CE4                     	if	0	;There are less than 3 active tblptr bytes
  6112  000CE4                     	endif
  6113  000CE4  0009               	tblrd		*+
  6114  000CE6  CFF5 F033          	movff	tablat,___lwdiv@divisor
  6115  000CEA  000A               	tblrd		*-
  6116  000CEC  CFF5 F034          	movff	tablat,___lwdiv@divisor+1
  6117  000CF0  C088  F031         	movff	printf@val,___lwdiv@dividend
  6118  000CF4  C089  F032         	movff	printf@val+1,___lwdiv@dividend+1
  6119  000CF8  EC2F  F011         	call	___lwdiv	;wreg free
  6120  000CFC  C031  F038         	movff	?___lwdiv,___lwmod@dividend
  6121  000D00  C032  F039         	movff	?___lwdiv+1,___lwmod@dividend+1
  6122  000D04  0E00               	movlw	0
  6123  000D06  6E3B               	movwf	___lwmod@divisor+1,c
  6124  000D08  0E0A               	movlw	10
  6125  000D0A  6E3A               	movwf	___lwmod@divisor,c
  6126  000D0C  ECF2  F011         	call	___lwmod	;wreg free
  6127  000D10  5038               	movf	?___lwmod,w,c
  6128  000D12  0F30               	addlw	48
  6129  000D14  0100               	movlb	0	; () banked
  6130  000D16  6F8D               	movwf	printf@c& (0+255),b
  6131                           
  6132                           ;doprnt.c: 1491: break;
  6133  000D18  D02F               	goto	l5118
  6134  000D1A                     l5110:
  6135                           
  6136                           ; BSR set to: 0
  6137                           ;doprnt.c: 1499: {
  6138                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  6139  000D1A  C088  F031         	movff	printf@val,___lwdiv@dividend
  6140  000D1E  C089  F032         	movff	printf@val+1,___lwdiv@dividend+1
  6141  000D22  0100               	movlb	0	; () banked
  6142  000D24  5187               	movf	printf@prec& (0+255),w,b
  6143  000D26  0D02               	mullw	2
  6144  000D28  0EBA               	movlw	low _hexpowers
  6145  000D2A  24F3               	addwf	prodl,w,c
  6146  000D2C  6EF6               	movwf	tblptrl,c
  6147  000D2E  0EFD               	movlw	high _hexpowers
  6148  000D30  20F4               	addwfc	prodh,w,c
  6149  000D32  6EF7               	movwf	tblptrh,c
  6150  000D34                     	if	0	;There are less than 3 active tblptr bytes
  6151  000D34                     	endif
  6152  000D34  0009               	tblrd		*+
  6153  000D36  CFF5 F033          	movff	tablat,___lwdiv@divisor
  6154  000D3A  000A               	tblrd		*-
  6155  000D3C  CFF5 F034          	movff	tablat,___lwdiv@divisor+1
  6156  000D40  EC2F  F011         	call	___lwdiv	;wreg free
  6157  000D44  5031               	movf	?___lwdiv,w,c
  6158  000D46  0B0F               	andlw	15
  6159  000D48  0100               	movlb	0	; () banked
  6160  000D4A  6F84               	movwf	printf@idx& (0+255),b
  6161                           
  6162                           ; BSR set to: 0
  6163                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  6164  000D4C  0100               	movlb	0	; () banked
  6165  000D4E  5184               	movf	printf@idx& (0+255),w,b
  6166  000D50  0D01               	mullw	1
  6167  000D52  0E8A               	movlw	low STR_39
  6168  000D54  24F3               	addwf	prodl,w,c
  6169  000D56  6EF6               	movwf	tblptrl,c
  6170  000D58  0EFE               	movlw	high STR_39
  6171  000D5A  20F4               	addwfc	prodh,w,c
  6172  000D5C  6EF7               	movwf	tblptrh,c
  6173  000D5E                     	if	0	;There are less than 3 active tblptr bytes
  6174  000D5E                     	endif
  6175  000D5E  0008               	tblrd		*
  6176  000D60  CFF5 F08D          	movff	tablat,printf@c
  6177                           
  6178                           ; BSR set to: 0
  6179                           ;doprnt.c: 1523: }
  6180                           
  6181                           ;doprnt.c: 1508: }
  6182                           ;doprnt.c: 1510: break;
  6183  000D64  D009               	goto	l5118
  6184  000D66                     l5116:
  6185  000D66  0100               	movlb	0	; () banked
  6186  000D68  518A               	movf	printf@flag& (0+255),w,b
  6187  000D6A  0B80               	andlw	128
  6188                           
  6189                           ; Switch size 1, requested type "space"
  6190                           ; Number of cases is 2, Range of values is 0 to 128
  6191                           ; switch strategies available:
  6192                           ; Name         Instructions Cycles
  6193                           ; simple_byte            7     4 (average)
  6194                           ;	Chosen strategy is simple_byte
  6195  000D6C  0A00               	xorlw	0	; case 0
  6196  000D6E  B4D8               	btfsc	status,2,c
  6197  000D70  D7B0               	goto	l5108
  6198  000D72  0A80               	xorlw	128	; case 128
  6199  000D74  B4D8               	btfsc	status,2,c
  6200  000D76  D7D1               	goto	l5110
  6201  000D78                     l5118:
  6202                           
  6203                           ; BSR set to: 0
  6204                           ;doprnt.c: 1524: (putch(c) );
  6205  000D78  0100               	movlb	0	; () banked
  6206  000D7A  518D               	movf	printf@c& (0+255),w,b
  6207  000D7C  EC2D  F013         	call	_putch
  6208  000D80                     l5120:
  6209  000D80  0100               	movlb	0	; () banked
  6210  000D82  0787               	decf	printf@prec& (0+255),f,b
  6211  000D84  0100               	movlb	0	; () banked
  6212  000D86  2987               	incf	printf@prec& (0+255),w,b
  6213  000D88  A4D8               	btfss	status,2,c
  6214  000D8A  D7ED               	goto	l5116
  6215  000D8C                     l5122:
  6216  000D8C  C03D  FFF6         	movff	printf@f,tblptrl
  6217  000D90  C03E  FFF7         	movff	printf@f+1,tblptrh
  6218  000D94  4A3D               	infsnz	printf@f,f,c
  6219  000D96  2A3E               	incf	printf@f+1,f,c
  6220  000D98                     	if	0	;tblptru may be non-zero
  6221  000D98                     	endif
  6222  000D98                     	if	0	;tblptru may be non-zero
  6223  000D98                     	endif
  6224  000D98  0008               	tblrd		*
  6225  000D9A  CFF5 F08D          	movff	tablat,printf@c
  6226  000D9E  0100               	movlb	0	; () banked
  6227  000DA0  518D               	movf	printf@c& (0+255),w,b
  6228  000DA2  B4D8               	btfsc	status,2,c
  6229  000DA4  0012               	return	
  6230  000DA6  D635               	goto	l4996
  6231  000DA8                     __end_of_printf:
  6232                           	opt stack 0
  6233                           tblptru	equ	0xFF8
  6234                           tblptrh	equ	0xFF7
  6235                           tblptrl	equ	0xFF6
  6236                           tablat	equ	0xFF5
  6237                           prodh	equ	0xFF4
  6238                           prodl	equ	0xFF3
  6239                           intcon	equ	0xFF2
  6240                           intcon2	equ	0xFF1
  6241                           intcon3	equ	0xFF0
  6242                           postinc0	equ	0xFEE
  6243                           wreg	equ	0xFE8
  6244                           indf2	equ	0xFDF
  6245                           postinc2	equ	0xFDE
  6246                           postdec2	equ	0xFDD
  6247                           fsr2h	equ	0xFDA
  6248                           fsr2l	equ	0xFD9
  6249                           status	equ	0xFD8
  6250                           
  6251 ;; *************** function _putch *****************
  6252 ;; Defined at:
  6253 ;;		line 23 in file "../lcd.c"
  6254 ;; Parameters:    Size  Location     Type
  6255 ;;  data            1    wreg     unsigned char 
  6256 ;; Auto vars:     Size  Location     Type
  6257 ;;  data            1   50[COMRAM] unsigned char 
  6258 ;; Return value:  Size  Location     Type
  6259 ;;                  1    wreg      void 
  6260 ;; Registers used:
  6261 ;;		wreg, status,2, status,0, cstack
  6262 ;; Tracked objects:
  6263 ;;		On entry : 0/0
  6264 ;;		On exit  : 0/0
  6265 ;;		Unchanged: 0/0
  6266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6268 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6270 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6271 ;;Total ram usage:        1 bytes
  6272 ;; Hardware stack levels used:    1
  6273 ;; Hardware stack levels required when called:    6
  6274 ;; This function calls:
  6275 ;;		_lcdNibble
  6276 ;; This function is called by:
  6277 ;;		_printf
  6278 ;; This function uses a non-reentrant model
  6279 ;;
  6280                           
  6281                           	psect	text10
  6282  00265A                     __ptext10:
  6283                           	opt stack 0
  6284  00265A                     _putch:
  6285                           	opt stack 22
  6286                           
  6287                           ;incstack = 0
  6288                           ;putch@data stored from wreg
  6289  00265A  6E33               	movwf	putch@data,c
  6290                           
  6291                           ;lcd.c: 24: LATDbits.LATD2 = 1;
  6292  00265C  848C               	bsf	3980,2,c	;volatile
  6293                           
  6294                           ;lcd.c: 25: lcdNibble(data);
  6295  00265E  5033               	movf	putch@data,w,c
  6296  002660  EC81  F011         	call	_lcdNibble
  6297  002664  0012               	return		;funcret
  6298  002666                     __end_of_putch:
  6299                           	opt stack 0
  6300                           tblptru	equ	0xFF8
  6301                           tblptrh	equ	0xFF7
  6302                           tblptrl	equ	0xFF6
  6303                           tablat	equ	0xFF5
  6304                           prodh	equ	0xFF4
  6305                           prodl	equ	0xFF3
  6306                           intcon	equ	0xFF2
  6307                           intcon2	equ	0xFF1
  6308                           intcon3	equ	0xFF0
  6309                           postinc0	equ	0xFEE
  6310                           wreg	equ	0xFE8
  6311                           indf2	equ	0xFDF
  6312                           postinc2	equ	0xFDE
  6313                           postdec2	equ	0xFDD
  6314                           fsr2h	equ	0xFDA
  6315                           fsr2l	equ	0xFD9
  6316                           status	equ	0xFD8
  6317                           
  6318 ;; *************** function _isdigit *****************
  6319 ;; Defined at:
  6320 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  6321 ;; Parameters:    Size  Location     Type
  6322 ;;  c               1    wreg     unsigned char 
  6323 ;; Auto vars:     Size  Location     Type
  6324 ;;  c               1   50[COMRAM] unsigned char 
  6325 ;; Return value:  Size  Location     Type
  6326 ;;		None               void
  6327 ;; Registers used:
  6328 ;;		wreg, status,2, status,0
  6329 ;; Tracked objects:
  6330 ;;		On entry : 0/0
  6331 ;;		On exit  : 0/0
  6332 ;;		Unchanged: 0/0
  6333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6335 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6336 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6337 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6338 ;;Total ram usage:        3 bytes
  6339 ;; Hardware stack levels used:    1
  6340 ;; Hardware stack levels required when called:    5
  6341 ;; This function calls:
  6342 ;;		Nothing
  6343 ;; This function is called by:
  6344 ;;		_printf
  6345 ;; This function uses a non-reentrant model
  6346 ;;
  6347                           
  6348                           	psect	text11
  6349  002584                     __ptext11:
  6350                           	opt stack 0
  6351  002584                     _isdigit:
  6352                           	opt stack 23
  6353                           
  6354                           ;incstack = 0
  6355                           ;isdigit@c stored from wreg
  6356  002584  6E33               	movwf	isdigit@c,c
  6357  002586  0E00               	movlw	0
  6358  002588  6E32               	movwf	_isdigit$1124,c
  6359  00258A  0E3A               	movlw	58
  6360  00258C  6033               	cpfslt	isdigit@c,c
  6361  00258E  D005               	goto	l3140
  6362  002590  0E2F               	movlw	47
  6363  002592  6433               	cpfsgt	isdigit@c,c
  6364  002594  D002               	goto	l3140
  6365  002596  0E01               	movlw	1
  6366  002598  6E32               	movwf	_isdigit$1124,c
  6367  00259A                     l3140:
  6368  00259A  C032  F031         	movff	_isdigit$1124,??_isdigit
  6369  00259E  3031               	rrcf	??_isdigit,w,c
  6370  0025A0  0012               	return	
  6371  0025A2                     __end_of_isdigit:
  6372                           	opt stack 0
  6373                           tblptru	equ	0xFF8
  6374                           tblptrh	equ	0xFF7
  6375                           tblptrl	equ	0xFF6
  6376                           tablat	equ	0xFF5
  6377                           prodh	equ	0xFF4
  6378                           prodl	equ	0xFF3
  6379                           intcon	equ	0xFF2
  6380                           intcon2	equ	0xFF1
  6381                           intcon3	equ	0xFF0
  6382                           postinc0	equ	0xFEE
  6383                           wreg	equ	0xFE8
  6384                           indf2	equ	0xFDF
  6385                           postinc2	equ	0xFDE
  6386                           postdec2	equ	0xFDD
  6387                           fsr2h	equ	0xFDA
  6388                           fsr2l	equ	0xFD9
  6389                           status	equ	0xFD8
  6390                           
  6391 ;; *************** function ___wmul *****************
  6392 ;; Defined at:
  6393 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  6394 ;; Parameters:    Size  Location     Type
  6395 ;;  multiplier      2   48[COMRAM] unsigned int 
  6396 ;;  multiplicand    2   50[COMRAM] unsigned int 
  6397 ;; Auto vars:     Size  Location     Type
  6398 ;;  product         2   52[COMRAM] unsigned int 
  6399 ;; Return value:  Size  Location     Type
  6400 ;;                  2   48[COMRAM] unsigned int 
  6401 ;; Registers used:
  6402 ;;		wreg, status,2, status,0, prodl, prodh
  6403 ;; Tracked objects:
  6404 ;;		On entry : 0/0
  6405 ;;		On exit  : 0/0
  6406 ;;		Unchanged: 0/0
  6407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6408 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6409 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6410 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6411 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6412 ;;Total ram usage:        6 bytes
  6413 ;; Hardware stack levels used:    1
  6414 ;; Hardware stack levels required when called:    5
  6415 ;; This function calls:
  6416 ;;		Nothing
  6417 ;; This function is called by:
  6418 ;;		_printf
  6419 ;; This function uses a non-reentrant model
  6420 ;;
  6421                           
  6422                           	psect	text12
  6423  0024C6                     __ptext12:
  6424                           	opt stack 0
  6425  0024C6                     ___wmul:
  6426                           	opt stack 23
  6427                           
  6428                           ;incstack = 0
  6429  0024C6  5031               	movf	___wmul@multiplier,w,c
  6430  0024C8  0233               	mulwf	___wmul@multiplicand,c
  6431  0024CA  CFF3 F035          	movff	prodl,___wmul@product
  6432  0024CE  CFF4 F036          	movff	prodh,___wmul@product+1
  6433  0024D2  5031               	movf	___wmul@multiplier,w,c
  6434  0024D4  0234               	mulwf	___wmul@multiplicand+1,c
  6435  0024D6  50F3               	movf	prodl,w,c
  6436  0024D8  2636               	addwf	___wmul@product+1,f,c
  6437  0024DA  5032               	movf	___wmul@multiplier+1,w,c
  6438  0024DC  0233               	mulwf	___wmul@multiplicand,c
  6439  0024DE  50F3               	movf	prodl,w,c
  6440  0024E0  2636               	addwf	___wmul@product+1,f,c
  6441  0024E2  C035  F031         	movff	___wmul@product,?___wmul
  6442  0024E6  C036  F032         	movff	___wmul@product+1,?___wmul+1
  6443  0024EA  0012               	return	
  6444  0024EC                     __end_of___wmul:
  6445                           	opt stack 0
  6446                           tblptru	equ	0xFF8
  6447                           tblptrh	equ	0xFF7
  6448                           tblptrl	equ	0xFF6
  6449                           tablat	equ	0xFF5
  6450                           prodh	equ	0xFF4
  6451                           prodl	equ	0xFF3
  6452                           intcon	equ	0xFF2
  6453                           intcon2	equ	0xFF1
  6454                           intcon3	equ	0xFF0
  6455                           postinc0	equ	0xFEE
  6456                           wreg	equ	0xFE8
  6457                           indf2	equ	0xFDF
  6458                           postinc2	equ	0xFDE
  6459                           postdec2	equ	0xFDD
  6460                           fsr2h	equ	0xFDA
  6461                           fsr2l	equ	0xFD9
  6462                           status	equ	0xFD8
  6463                           
  6464 ;; *************** function ___lwmod *****************
  6465 ;; Defined at:
  6466 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  6467 ;; Parameters:    Size  Location     Type
  6468 ;;  dividend        2   55[COMRAM] unsigned int 
  6469 ;;  divisor         2   57[COMRAM] unsigned int 
  6470 ;; Auto vars:     Size  Location     Type
  6471 ;;  counter         1   59[COMRAM] unsigned char 
  6472 ;; Return value:  Size  Location     Type
  6473 ;;                  2   55[COMRAM] unsigned int 
  6474 ;; Registers used:
  6475 ;;		wreg, status,2, status,0
  6476 ;; Tracked objects:
  6477 ;;		On entry : 0/0
  6478 ;;		On exit  : 0/0
  6479 ;;		Unchanged: 0/0
  6480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6481 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6482 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6484 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6485 ;;Total ram usage:        5 bytes
  6486 ;; Hardware stack levels used:    1
  6487 ;; Hardware stack levels required when called:    5
  6488 ;; This function calls:
  6489 ;;		Nothing
  6490 ;; This function is called by:
  6491 ;;		_printf
  6492 ;; This function uses a non-reentrant model
  6493 ;;
  6494                           
  6495                           	psect	text13
  6496  0023E4                     __ptext13:
  6497                           	opt stack 0
  6498  0023E4                     ___lwmod:
  6499                           	opt stack 23
  6500                           
  6501                           ;incstack = 0
  6502  0023E4  503A               	movf	___lwmod@divisor,w,c
  6503  0023E6  103B               	iorwf	___lwmod@divisor+1,w,c
  6504  0023E8  B4D8               	btfsc	status,2,c
  6505  0023EA  D018               	goto	l989
  6506  0023EC  0E01               	movlw	1
  6507  0023EE  6E3C               	movwf	___lwmod@counter,c
  6508  0023F0  D004               	goto	l3178
  6509  0023F2                     l3176:
  6510  0023F2  90D8               	bcf	status,0,c
  6511  0023F4  363A               	rlcf	___lwmod@divisor,f,c
  6512  0023F6  363B               	rlcf	___lwmod@divisor+1,f,c
  6513  0023F8  2A3C               	incf	___lwmod@counter,f,c
  6514  0023FA                     l3178:
  6515  0023FA  AE3B               	btfss	___lwmod@divisor+1,7,c
  6516  0023FC  D7FA               	goto	l3176
  6517  0023FE                     l3180:
  6518  0023FE  503A               	movf	___lwmod@divisor,w,c
  6519  002400  5C38               	subwf	___lwmod@dividend,w,c
  6520  002402  503B               	movf	___lwmod@divisor+1,w,c
  6521  002404  5839               	subwfb	___lwmod@dividend+1,w,c
  6522  002406  A0D8               	btfss	status,0,c
  6523  002408  D004               	goto	l3184
  6524  00240A  503A               	movf	___lwmod@divisor,w,c
  6525  00240C  5E38               	subwf	___lwmod@dividend,f,c
  6526  00240E  503B               	movf	___lwmod@divisor+1,w,c
  6527  002410  5A39               	subwfb	___lwmod@dividend+1,f,c
  6528  002412                     l3184:
  6529  002412  90D8               	bcf	status,0,c
  6530  002414  323B               	rrcf	___lwmod@divisor+1,f,c
  6531  002416  323A               	rrcf	___lwmod@divisor,f,c
  6532  002418  2E3C               	decfsz	___lwmod@counter,f,c
  6533  00241A  D7F1               	goto	l3180
  6534  00241C                     l989:
  6535  00241C  C038  F038         	movff	___lwmod@dividend,?___lwmod
  6536  002420  C039  F039         	movff	___lwmod@dividend+1,?___lwmod+1
  6537  002424  0012               	return		;funcret
  6538  002426                     __end_of___lwmod:
  6539                           	opt stack 0
  6540                           tblptru	equ	0xFF8
  6541                           tblptrh	equ	0xFF7
  6542                           tblptrl	equ	0xFF6
  6543                           tablat	equ	0xFF5
  6544                           prodh	equ	0xFF4
  6545                           prodl	equ	0xFF3
  6546                           intcon	equ	0xFF2
  6547                           intcon2	equ	0xFF1
  6548                           intcon3	equ	0xFF0
  6549                           postinc0	equ	0xFEE
  6550                           wreg	equ	0xFE8
  6551                           indf2	equ	0xFDF
  6552                           postinc2	equ	0xFDE
  6553                           postdec2	equ	0xFDD
  6554                           fsr2h	equ	0xFDA
  6555                           fsr2l	equ	0xFD9
  6556                           status	equ	0xFD8
  6557                           
  6558 ;; *************** function ___lwdiv *****************
  6559 ;; Defined at:
  6560 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  6561 ;; Parameters:    Size  Location     Type
  6562 ;;  dividend        2   48[COMRAM] unsigned int 
  6563 ;;  divisor         2   50[COMRAM] unsigned int 
  6564 ;; Auto vars:     Size  Location     Type
  6565 ;;  quotient        2   52[COMRAM] unsigned int 
  6566 ;;  counter         1   54[COMRAM] unsigned char 
  6567 ;; Return value:  Size  Location     Type
  6568 ;;                  2   48[COMRAM] unsigned int 
  6569 ;; Registers used:
  6570 ;;		wreg, status,2, status,0
  6571 ;; Tracked objects:
  6572 ;;		On entry : 0/0
  6573 ;;		On exit  : 0/0
  6574 ;;		Unchanged: 0/0
  6575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6576 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6577 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6578 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6579 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6580 ;;Total ram usage:        7 bytes
  6581 ;; Hardware stack levels used:    1
  6582 ;; Hardware stack levels required when called:    5
  6583 ;; This function calls:
  6584 ;;		Nothing
  6585 ;; This function is called by:
  6586 ;;		_printf
  6587 ;; This function uses a non-reentrant model
  6588 ;;
  6589                           
  6590                           	psect	text14
  6591  00225E                     __ptext14:
  6592                           	opt stack 0
  6593  00225E                     ___lwdiv:
  6594                           	opt stack 23
  6595                           
  6596                           ;incstack = 0
  6597  00225E  0E00               	movlw	0
  6598  002260  6E36               	movwf	___lwdiv@quotient+1,c
  6599  002262  0E00               	movlw	0
  6600  002264  6E35               	movwf	___lwdiv@quotient,c
  6601  002266  5033               	movf	___lwdiv@divisor,w,c
  6602  002268  1034               	iorwf	___lwdiv@divisor+1,w,c
  6603  00226A  B4D8               	btfsc	status,2,c
  6604  00226C  D01C               	goto	l979
  6605  00226E  0E01               	movlw	1
  6606  002270  6E37               	movwf	___lwdiv@counter,c
  6607  002272  D004               	goto	l3158
  6608  002274                     l3156:
  6609  002274  90D8               	bcf	status,0,c
  6610  002276  3633               	rlcf	___lwdiv@divisor,f,c
  6611  002278  3634               	rlcf	___lwdiv@divisor+1,f,c
  6612  00227A  2A37               	incf	___lwdiv@counter,f,c
  6613  00227C                     l3158:
  6614  00227C  AE34               	btfss	___lwdiv@divisor+1,7,c
  6615  00227E  D7FA               	goto	l3156
  6616  002280                     l3160:
  6617  002280  90D8               	bcf	status,0,c
  6618  002282  3635               	rlcf	___lwdiv@quotient,f,c
  6619  002284  3636               	rlcf	___lwdiv@quotient+1,f,c
  6620  002286  5033               	movf	___lwdiv@divisor,w,c
  6621  002288  5C31               	subwf	___lwdiv@dividend,w,c
  6622  00228A  5034               	movf	___lwdiv@divisor+1,w,c
  6623  00228C  5832               	subwfb	___lwdiv@dividend+1,w,c
  6624  00228E  A0D8               	btfss	status,0,c
  6625  002290  D005               	goto	l3168
  6626  002292  5033               	movf	___lwdiv@divisor,w,c
  6627  002294  5E31               	subwf	___lwdiv@dividend,f,c
  6628  002296  5034               	movf	___lwdiv@divisor+1,w,c
  6629  002298  5A32               	subwfb	___lwdiv@dividend+1,f,c
  6630  00229A  8035               	bsf	___lwdiv@quotient,0,c
  6631  00229C                     l3168:
  6632  00229C  90D8               	bcf	status,0,c
  6633  00229E  3234               	rrcf	___lwdiv@divisor+1,f,c
  6634  0022A0  3233               	rrcf	___lwdiv@divisor,f,c
  6635  0022A2  2E37               	decfsz	___lwdiv@counter,f,c
  6636  0022A4  D7ED               	goto	l3160
  6637  0022A6                     l979:
  6638  0022A6  C035  F031         	movff	___lwdiv@quotient,?___lwdiv
  6639  0022AA  C036  F032         	movff	___lwdiv@quotient+1,?___lwdiv+1
  6640  0022AE  0012               	return		;funcret
  6641  0022B0                     __end_of___lwdiv:
  6642                           	opt stack 0
  6643                           tblptru	equ	0xFF8
  6644                           tblptrh	equ	0xFF7
  6645                           tblptrl	equ	0xFF6
  6646                           tablat	equ	0xFF5
  6647                           prodh	equ	0xFF4
  6648                           prodl	equ	0xFF3
  6649                           intcon	equ	0xFF2
  6650                           intcon2	equ	0xFF1
  6651                           intcon3	equ	0xFF0
  6652                           postinc0	equ	0xFEE
  6653                           wreg	equ	0xFE8
  6654                           indf2	equ	0xFDF
  6655                           postinc2	equ	0xFDE
  6656                           postdec2	equ	0xFDD
  6657                           fsr2h	equ	0xFDA
  6658                           fsr2l	equ	0xFD9
  6659                           status	equ	0xFD8
  6660                           
  6661 ;; *************** function _next_address *****************
  6662 ;; Defined at:
  6663 ;;		line 689 in file "../main.c"
  6664 ;; Parameters:    Size  Location     Type
  6665 ;;  address         2   48[COMRAM] unsigned int 
  6666 ;; Auto vars:     Size  Location     Type
  6667 ;;		None
  6668 ;; Return value:  Size  Location     Type
  6669 ;;                  2   48[COMRAM] unsigned int 
  6670 ;; Registers used:
  6671 ;;		wreg, status,2, status,0
  6672 ;; Tracked objects:
  6673 ;;		On entry : 0/0
  6674 ;;		On exit  : 0/0
  6675 ;;		Unchanged: 0/0
  6676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6677 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6678 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6680 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6681 ;;Total ram usage:        2 bytes
  6682 ;; Hardware stack levels used:    1
  6683 ;; Hardware stack levels required when called:    5
  6684 ;; This function calls:
  6685 ;;		Nothing
  6686 ;; This function is called by:
  6687 ;;		_stopOperation
  6688 ;;		_show_log
  6689 ;; This function uses a non-reentrant model
  6690 ;;
  6691                           
  6692                           	psect	text15
  6693  00263E                     __ptext15:
  6694                           	opt stack 0
  6695  00263E                     _next_address:
  6696                           	opt stack 24
  6697                           
  6698                           ;main.c: 690: return address + 8;
  6699                           
  6700                           ;incstack = 0
  6701  00263E  0E08               	movlw	8
  6702  002640  2431               	addwf	next_address@address,w,c
  6703  002642  6E31               	movwf	?_next_address,c
  6704  002644  0E00               	movlw	0
  6705  002646  2032               	addwfc	next_address@address+1,w,c
  6706  002648  6E32               	movwf	?_next_address+1,c
  6707  00264A  0012               	return	
  6708  00264C                     __end_of_next_address:
  6709                           	opt stack 0
  6710                           tblptru	equ	0xFF8
  6711                           tblptrh	equ	0xFF7
  6712                           tblptrl	equ	0xFF6
  6713                           tablat	equ	0xFF5
  6714                           prodh	equ	0xFF4
  6715                           prodl	equ	0xFF3
  6716                           intcon	equ	0xFF2
  6717                           intcon2	equ	0xFF1
  6718                           intcon3	equ	0xFF0
  6719                           postinc0	equ	0xFEE
  6720                           wreg	equ	0xFE8
  6721                           indf2	equ	0xFDF
  6722                           postinc2	equ	0xFDE
  6723                           postdec2	equ	0xFDD
  6724                           fsr2h	equ	0xFDA
  6725                           fsr2l	equ	0xFD9
  6726                           status	equ	0xFD8
  6727                           
  6728 ;; *************** function _Eeprom_ReadByte *****************
  6729 ;; Defined at:
  6730 ;;		line 645 in file "../main.c"
  6731 ;; Parameters:    Size  Location     Type
  6732 ;;  address         2   48[COMRAM] unsigned int 
  6733 ;; Auto vars:     Size  Location     Type
  6734 ;;		None
  6735 ;; Return value:  Size  Location     Type
  6736 ;;                  1    wreg      unsigned char 
  6737 ;; Registers used:
  6738 ;;		wreg, status,2
  6739 ;; Tracked objects:
  6740 ;;		On entry : 0/0
  6741 ;;		On exit  : 0/0
  6742 ;;		Unchanged: 0/0
  6743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6744 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6745 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6746 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6747 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6748 ;;Total ram usage:        2 bytes
  6749 ;; Hardware stack levels used:    1
  6750 ;; Hardware stack levels required when called:    5
  6751 ;; This function calls:
  6752 ;;		Nothing
  6753 ;; This function is called by:
  6754 ;;		_stopOperation
  6755 ;;		_show_log
  6756 ;; This function uses a non-reentrant model
  6757 ;;
  6758                           
  6759                           	psect	text16
  6760  0025DA                     __ptext16:
  6761                           	opt stack 0
  6762  0025DA                     _Eeprom_ReadByte:
  6763                           	opt stack 24
  6764                           
  6765                           ;main.c: 647: EEADRH = (uint8_t)(address >> 8);
  6766                           
  6767                           ;incstack = 0
  6768  0025DA  5032               	movf	Eeprom_ReadByte@address+1,w,c
  6769  0025DC  6EAA               	movwf	4010,c	;volatile
  6770                           
  6771                           ;main.c: 648: EEADR = (uint8_t)address;
  6772  0025DE  C031  FFA9         	movff	Eeprom_ReadByte@address,4009	;volatile
  6773                           
  6774                           ;main.c: 650: EECON1bits.EEPGD = 0;
  6775  0025E2  9EA6               	bcf	4006,7,c	;volatile
  6776                           
  6777                           ;main.c: 651: EECON1bits.CFGS = 0;
  6778  0025E4  9CA6               	bcf	4006,6,c	;volatile
  6779                           
  6780                           ;main.c: 652: EECON1bits.RD = 1;
  6781  0025E6  80A6               	bsf	4006,0,c	;volatile
  6782  0025E8                     l433:
  6783  0025E8  B0A6               	btfsc	4006,0,c	;volatile
  6784  0025EA  D7FE               	goto	l433
  6785                           
  6786                           ;main.c: 658: return EEDATA;
  6787  0025EC  50A8               	movf	4008,w,c	;volatile
  6788  0025EE  0012               	return	
  6789  0025F0                     __end_of_Eeprom_ReadByte:
  6790                           	opt stack 0
  6791                           tblptru	equ	0xFF8
  6792                           tblptrh	equ	0xFF7
  6793                           tblptrl	equ	0xFF6
  6794                           tablat	equ	0xFF5
  6795                           prodh	equ	0xFF4
  6796                           prodl	equ	0xFF3
  6797                           intcon	equ	0xFF2
  6798                           intcon2	equ	0xFF1
  6799                           intcon3	equ	0xFF0
  6800                           postinc0	equ	0xFEE
  6801                           wreg	equ	0xFE8
  6802                           indf2	equ	0xFDF
  6803                           postinc2	equ	0xFDE
  6804                           postdec2	equ	0xFDD
  6805                           fsr2h	equ	0xFDA
  6806                           fsr2l	equ	0xFD9
  6807                           status	equ	0xFD8
  6808                           
  6809 ;; *************** function _initLCD *****************
  6810 ;; Defined at:
  6811 ;;		line 7 in file "../lcd.c"
  6812 ;; Parameters:    Size  Location     Type
  6813 ;;		None
  6814 ;; Auto vars:     Size  Location     Type
  6815 ;;		None
  6816 ;; Return value:  Size  Location     Type
  6817 ;;                  1    wreg      void 
  6818 ;; Registers used:
  6819 ;;		wreg, status,2, status,0, cstack
  6820 ;; Tracked objects:
  6821 ;;		On entry : 0/0
  6822 ;;		On exit  : 0/0
  6823 ;;		Unchanged: 0/0
  6824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6825 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6826 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6827 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6828 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6829 ;;Total ram usage:        1 bytes
  6830 ;; Hardware stack levels used:    1
  6831 ;; Hardware stack levels required when called:    7
  6832 ;; This function calls:
  6833 ;;		_lcdInst
  6834 ;; This function is called by:
  6835 ;;		_main
  6836 ;; This function uses a non-reentrant model
  6837 ;;
  6838                           
  6839                           	psect	text17
  6840  00239E                     __ptext17:
  6841                           	opt stack 0
  6842  00239E                     _initLCD:
  6843                           	opt stack 23
  6844                           
  6845                           ;lcd.c: 8: _delay((unsigned long)((15)*(10000000/4000.0)));
  6846                           
  6847                           ;incstack = 0
  6848  00239E  0E31               	movlw	49
  6849  0023A0  6E34               	movwf	??_initLCD& (0+255),c
  6850  0023A2  0EB2               	movlw	178
  6851  0023A4                     u5957:
  6852  0023A4  2EE8               	decfsz	wreg,f,c
  6853  0023A6  D7FE               	bra	u5957
  6854  0023A8  2E34               	decfsz	??_initLCD& (0+255),f,c
  6855  0023AA  D7FC               	bra	u5957
  6856  0023AC  D000               	nop2	
  6857                           
  6858                           ;lcd.c: 9: lcdInst(0b00110011);
  6859  0023AE  0E33               	movlw	51
  6860  0023B0  EC33  F013         	call	_lcdInst
  6861                           
  6862                           ;lcd.c: 10: lcdInst(0b00110010);
  6863  0023B4  0E32               	movlw	50
  6864  0023B6  EC33  F013         	call	_lcdInst
  6865                           
  6866                           ;lcd.c: 11: lcdInst(0b00101000);
  6867  0023BA  0E28               	movlw	40
  6868  0023BC  EC33  F013         	call	_lcdInst
  6869                           
  6870                           ;lcd.c: 12: lcdInst(0b00001111);
  6871  0023C0  0E0F               	movlw	15
  6872  0023C2  EC33  F013         	call	_lcdInst
  6873                           
  6874                           ;lcd.c: 13: lcdInst(0b00000110);
  6875  0023C6  0E06               	movlw	6
  6876  0023C8  EC33  F013         	call	_lcdInst
  6877                           
  6878                           ;lcd.c: 14: lcdInst(0b00000001);
  6879  0023CC  0E01               	movlw	1
  6880  0023CE  EC33  F013         	call	_lcdInst
  6881                           
  6882                           ;lcd.c: 15: _delay((unsigned long)((15)*(10000000/4000.0)));
  6883  0023D2  0E31               	movlw	49
  6884  0023D4  6E34               	movwf	??_initLCD& (0+255),c
  6885  0023D6  0EB2               	movlw	178
  6886  0023D8                     u5967:
  6887  0023D8  2EE8               	decfsz	wreg,f,c
  6888  0023DA  D7FE               	bra	u5967
  6889  0023DC  2E34               	decfsz	??_initLCD& (0+255),f,c
  6890  0023DE  D7FC               	bra	u5967
  6891  0023E0  D000               	nop2	
  6892  0023E2  0012               	return		;funcret
  6893  0023E4                     __end_of_initLCD:
  6894                           	opt stack 0
  6895                           tblptru	equ	0xFF8
  6896                           tblptrh	equ	0xFF7
  6897                           tblptrl	equ	0xFF6
  6898                           tablat	equ	0xFF5
  6899                           prodh	equ	0xFF4
  6900                           prodl	equ	0xFF3
  6901                           intcon	equ	0xFF2
  6902                           intcon2	equ	0xFF1
  6903                           intcon3	equ	0xFF0
  6904                           postinc0	equ	0xFEE
  6905                           wreg	equ	0xFE8
  6906                           indf2	equ	0xFDF
  6907                           postinc2	equ	0xFDE
  6908                           postdec2	equ	0xFDD
  6909                           fsr2h	equ	0xFDA
  6910                           fsr2l	equ	0xFD9
  6911                           status	equ	0xFD8
  6912                           
  6913 ;; *************** function _lcdInst *****************
  6914 ;; Defined at:
  6915 ;;		line 18 in file "../lcd.c"
  6916 ;; Parameters:    Size  Location     Type
  6917 ;;  data            1    wreg     unsigned char 
  6918 ;; Auto vars:     Size  Location     Type
  6919 ;;  data            1   50[COMRAM] unsigned char 
  6920 ;; Return value:  Size  Location     Type
  6921 ;;                  1    wreg      void 
  6922 ;; Registers used:
  6923 ;;		wreg, status,2, status,0, cstack
  6924 ;; Tracked objects:
  6925 ;;		On entry : 0/0
  6926 ;;		On exit  : 0/0
  6927 ;;		Unchanged: 0/0
  6928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6930 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6932 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6933 ;;Total ram usage:        1 bytes
  6934 ;; Hardware stack levels used:    1
  6935 ;; Hardware stack levels required when called:    6
  6936 ;; This function calls:
  6937 ;;		_lcdNibble
  6938 ;; This function is called by:
  6939 ;;		_initLCD
  6940 ;;		_main
  6941 ;;		_testBatteries
  6942 ;;		_show_log
  6943 ;; This function uses a non-reentrant model
  6944 ;;
  6945                           
  6946                           	psect	text18
  6947  002666                     __ptext18:
  6948                           	opt stack 0
  6949  002666                     _lcdInst:
  6950                           	opt stack 23
  6951                           
  6952                           ;incstack = 0
  6953                           ;lcdInst@data stored from wreg
  6954  002666  6E33               	movwf	lcdInst@data,c
  6955                           
  6956                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  6957  002668  948C               	bcf	3980,2,c	;volatile
  6958                           
  6959                           ;lcd.c: 20: lcdNibble(data);
  6960  00266A  5033               	movf	lcdInst@data,w,c
  6961  00266C  EC81  F011         	call	_lcdNibble
  6962  002670  0012               	return		;funcret
  6963  002672                     __end_of_lcdInst:
  6964                           	opt stack 0
  6965                           tblptru	equ	0xFF8
  6966                           tblptrh	equ	0xFF7
  6967                           tblptrl	equ	0xFF6
  6968                           tablat	equ	0xFF5
  6969                           prodh	equ	0xFF4
  6970                           prodl	equ	0xFF3
  6971                           intcon	equ	0xFF2
  6972                           intcon2	equ	0xFF1
  6973                           intcon3	equ	0xFF0
  6974                           postinc0	equ	0xFEE
  6975                           wreg	equ	0xFE8
  6976                           indf2	equ	0xFDF
  6977                           postinc2	equ	0xFDE
  6978                           postdec2	equ	0xFDD
  6979                           fsr2h	equ	0xFDA
  6980                           fsr2l	equ	0xFD9
  6981                           status	equ	0xFD8
  6982                           
  6983 ;; *************** function _lcdNibble *****************
  6984 ;; Defined at:
  6985 ;;		line 28 in file "../lcd.c"
  6986 ;; Parameters:    Size  Location     Type
  6987 ;;  data            1    wreg     unsigned char 
  6988 ;; Auto vars:     Size  Location     Type
  6989 ;;  data            1   49[COMRAM] unsigned char 
  6990 ;;  temp            1   48[COMRAM] unsigned char 
  6991 ;; Return value:  Size  Location     Type
  6992 ;;                  1    wreg      void 
  6993 ;; Registers used:
  6994 ;;		wreg, status,2, status,0
  6995 ;; Tracked objects:
  6996 ;;		On entry : 0/0
  6997 ;;		On exit  : 0/0
  6998 ;;		Unchanged: 0/0
  6999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7001 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7003 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7004 ;;Total ram usage:        2 bytes
  7005 ;; Hardware stack levels used:    1
  7006 ;; Hardware stack levels required when called:    5
  7007 ;; This function calls:
  7008 ;;		Nothing
  7009 ;; This function is called by:
  7010 ;;		_lcdInst
  7011 ;;		_putch
  7012 ;; This function uses a non-reentrant model
  7013 ;;
  7014                           
  7015                           	psect	text19
  7016  002302                     __ptext19:
  7017                           	opt stack 0
  7018  002302                     _lcdNibble:
  7019                           	opt stack 22
  7020                           
  7021                           ;incstack = 0
  7022                           ;lcdNibble@data stored from wreg
  7023  002302  6E32               	movwf	lcdNibble@data,c
  7024                           
  7025                           ;lcd.c: 30: char temp = data & 0xF0;
  7026  002304  5032               	movf	lcdNibble@data,w,c
  7027  002306  0BF0               	andlw	240
  7028  002308  6E31               	movwf	lcdNibble@temp,c
  7029                           
  7030                           ;lcd.c: 31: LATD = LATD & 0x0F;
  7031  00230A  508C               	movf	3980,w,c	;volatile
  7032  00230C  0B0F               	andlw	15
  7033  00230E  6E8C               	movwf	3980,c	;volatile
  7034                           
  7035                           ;lcd.c: 32: LATD = temp | LATD;
  7036  002310  5031               	movf	lcdNibble@temp,w,c
  7037  002312  108C               	iorwf	3980,w,c	;volatile
  7038  002314  6E8C               	movwf	3980,c	;volatile
  7039                           
  7040                           ;lcd.c: 34: LATDbits.LATD3 = 0;
  7041  002316  968C               	bcf	3980,3,c	;volatile
  7042                           
  7043                           ;lcd.c: 35: _delay((unsigned long)((30)*(10000000/4000000.0)));
  7044  002318  0E19               	movlw	25
  7045  00231A                     u5977:
  7046  00231A  2EE8               	decfsz	wreg,f,c
  7047  00231C  D7FE               	bra	u5977
  7048                           
  7049                           ;lcd.c: 36: LATDbits.LATD3 = 1;
  7050  00231E  868C               	bsf	3980,3,c	;volatile
  7051                           
  7052                           ;lcd.c: 37: _delay((unsigned long)((30)*(10000000/4000000.0)));
  7053  002320  0E19               	movlw	25
  7054  002322                     u5987:
  7055  002322  2EE8               	decfsz	wreg,f,c
  7056  002324  D7FE               	bra	u5987
  7057                           
  7058                           ;lcd.c: 39: data = data << 4;
  7059  002326  3832               	swapf	lcdNibble@data,w,c
  7060  002328  0BF0               	andlw	240
  7061  00232A  6E32               	movwf	lcdNibble@data,c
  7062                           
  7063                           ;lcd.c: 41: temp = data & 0xF0;
  7064  00232C  5032               	movf	lcdNibble@data,w,c
  7065  00232E  0BF0               	andlw	240
  7066  002330  6E31               	movwf	lcdNibble@temp,c
  7067                           
  7068                           ;lcd.c: 42: LATD = LATD & 0x0F;
  7069  002332  508C               	movf	3980,w,c	;volatile
  7070  002334  0B0F               	andlw	15
  7071  002336  6E8C               	movwf	3980,c	;volatile
  7072                           
  7073                           ;lcd.c: 43: LATD = temp | LATD;
  7074  002338  5031               	movf	lcdNibble@temp,w,c
  7075  00233A  108C               	iorwf	3980,w,c	;volatile
  7076  00233C  6E8C               	movwf	3980,c	;volatile
  7077                           
  7078                           ;lcd.c: 45: LATDbits.LATD3 = 0;
  7079  00233E  968C               	bcf	3980,3,c	;volatile
  7080                           
  7081                           ;lcd.c: 46: _delay((unsigned long)((30)*(10000000/4000000.0)));
  7082  002340  0E19               	movlw	25
  7083  002342                     u5997:
  7084  002342  2EE8               	decfsz	wreg,f,c
  7085  002344  D7FE               	bra	u5997
  7086                           
  7087                           ;lcd.c: 47: LATDbits.LATD3 = 1;
  7088  002346  868C               	bsf	3980,3,c	;volatile
  7089                           
  7090                           ;lcd.c: 48: _delay((unsigned long)((30)*(10000000/4000000.0)));
  7091  002348  0E19               	movlw	25
  7092  00234A                     u6007:
  7093  00234A  2EE8               	decfsz	wreg,f,c
  7094  00234C  D7FE               	bra	u6007
  7095  00234E  0012               	return		;funcret
  7096  002350                     __end_of_lcdNibble:
  7097                           	opt stack 0
  7098                           tblptru	equ	0xFF8
  7099                           tblptrh	equ	0xFF7
  7100                           tblptrl	equ	0xFF6
  7101                           tablat	equ	0xFF5
  7102                           prodh	equ	0xFF4
  7103                           prodl	equ	0xFF3
  7104                           intcon	equ	0xFF2
  7105                           intcon2	equ	0xFF1
  7106                           intcon3	equ	0xFF0
  7107                           postinc0	equ	0xFEE
  7108                           wreg	equ	0xFE8
  7109                           indf2	equ	0xFDF
  7110                           postinc2	equ	0xFDE
  7111                           postdec2	equ	0xFDD
  7112                           fsr2h	equ	0xFDA
  7113                           fsr2l	equ	0xFD9
  7114                           status	equ	0xFD8
  7115                           
  7116 ;; *************** function _I2C_Master_Write *****************
  7117 ;; Defined at:
  7118 ;;		line 39 in file "../I2C.c"
  7119 ;; Parameters:    Size  Location     Type
  7120 ;;  d               2   49[COMRAM] unsigned int 
  7121 ;; Auto vars:     Size  Location     Type
  7122 ;;		None
  7123 ;; Return value:  Size  Location     Type
  7124 ;;                  1    wreg      void 
  7125 ;; Registers used:
  7126 ;;		wreg, status,2, status,0, cstack
  7127 ;; Tracked objects:
  7128 ;;		On entry : 0/0
  7129 ;;		On exit  : 0/0
  7130 ;;		Unchanged: 0/0
  7131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7132 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7133 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7134 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7135 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7136 ;;Total ram usage:        2 bytes
  7137 ;; Hardware stack levels used:    1
  7138 ;; Hardware stack levels required when called:    6
  7139 ;; This function calls:
  7140 ;;		_I2C_Master_Wait
  7141 ;; This function is called by:
  7142 ;;		_main
  7143 ;; This function uses a non-reentrant model
  7144 ;;
  7145                           
  7146                           	psect	text20
  7147  00268A                     __ptext20:
  7148                           	opt stack 0
  7149  00268A                     _I2C_Master_Write:
  7150                           	opt stack 24
  7151                           
  7152                           ;I2C.c: 41: I2C_Master_Wait();
  7153                           
  7154                           ;incstack = 0
  7155  00268A  EC0D  F013         	call	_I2C_Master_Wait	;wreg free
  7156                           
  7157                           ;I2C.c: 42: SSPBUF = d;
  7158  00268E  C032  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  7159  002692  0012               	return		;funcret
  7160  002694                     __end_of_I2C_Master_Write:
  7161                           	opt stack 0
  7162                           tblptru	equ	0xFF8
  7163                           tblptrh	equ	0xFF7
  7164                           tblptrl	equ	0xFF6
  7165                           tablat	equ	0xFF5
  7166                           prodh	equ	0xFF4
  7167                           prodl	equ	0xFF3
  7168                           intcon	equ	0xFF2
  7169                           intcon2	equ	0xFF1
  7170                           intcon3	equ	0xFF0
  7171                           postinc0	equ	0xFEE
  7172                           wreg	equ	0xFE8
  7173                           indf2	equ	0xFDF
  7174                           postinc2	equ	0xFDE
  7175                           postdec2	equ	0xFDD
  7176                           fsr2h	equ	0xFDA
  7177                           fsr2l	equ	0xFD9
  7178                           status	equ	0xFD8
  7179                           
  7180 ;; *************** function _I2C_Master_Stop *****************
  7181 ;; Defined at:
  7182 ;;		line 33 in file "../I2C.c"
  7183 ;; Parameters:    Size  Location     Type
  7184 ;;		None
  7185 ;; Auto vars:     Size  Location     Type
  7186 ;;		None
  7187 ;; Return value:  Size  Location     Type
  7188 ;;                  1    wreg      void 
  7189 ;; Registers used:
  7190 ;;		wreg, status,2, status,0, cstack
  7191 ;; Tracked objects:
  7192 ;;		On entry : 0/0
  7193 ;;		On exit  : 0/0
  7194 ;;		Unchanged: 0/0
  7195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7196 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7197 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7198 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7199 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7200 ;;Total ram usage:        0 bytes
  7201 ;; Hardware stack levels used:    1
  7202 ;; Hardware stack levels required when called:    6
  7203 ;; This function calls:
  7204 ;;		_I2C_Master_Wait
  7205 ;; This function is called by:
  7206 ;;		_main
  7207 ;; This function uses a non-reentrant model
  7208 ;;
  7209                           
  7210                           	psect	text21
  7211  00269E                     __ptext21:
  7212                           	opt stack 0
  7213  00269E                     _I2C_Master_Stop:
  7214                           	opt stack 24
  7215                           
  7216                           ;I2C.c: 35: I2C_Master_Wait();
  7217                           
  7218                           ;incstack = 0
  7219  00269E  EC0D  F013         	call	_I2C_Master_Wait	;wreg free
  7220                           
  7221                           ;I2C.c: 36: PEN = 1;
  7222  0026A2  84C5               	bsf	4037,2,c	;volatile
  7223  0026A4  0012               	return		;funcret
  7224  0026A6                     __end_of_I2C_Master_Stop:
  7225                           	opt stack 0
  7226                           tblptru	equ	0xFF8
  7227                           tblptrh	equ	0xFF7
  7228                           tblptrl	equ	0xFF6
  7229                           tablat	equ	0xFF5
  7230                           prodh	equ	0xFF4
  7231                           prodl	equ	0xFF3
  7232                           intcon	equ	0xFF2
  7233                           intcon2	equ	0xFF1
  7234                           intcon3	equ	0xFF0
  7235                           postinc0	equ	0xFEE
  7236                           wreg	equ	0xFE8
  7237                           indf2	equ	0xFDF
  7238                           postinc2	equ	0xFDE
  7239                           postdec2	equ	0xFDD
  7240                           fsr2h	equ	0xFDA
  7241                           fsr2l	equ	0xFD9
  7242                           status	equ	0xFD8
  7243                           
  7244 ;; *************** function _I2C_Master_Start *****************
  7245 ;; Defined at:
  7246 ;;		line 21 in file "../I2C.c"
  7247 ;; Parameters:    Size  Location     Type
  7248 ;;		None
  7249 ;; Auto vars:     Size  Location     Type
  7250 ;;		None
  7251 ;; Return value:  Size  Location     Type
  7252 ;;                  1    wreg      void 
  7253 ;; Registers used:
  7254 ;;		wreg, status,2, status,0, cstack
  7255 ;; Tracked objects:
  7256 ;;		On entry : 0/0
  7257 ;;		On exit  : 0/0
  7258 ;;		Unchanged: 0/0
  7259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7260 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7261 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7262 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7263 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7264 ;;Total ram usage:        0 bytes
  7265 ;; Hardware stack levels used:    1
  7266 ;; Hardware stack levels required when called:    6
  7267 ;; This function calls:
  7268 ;;		_I2C_Master_Wait
  7269 ;; This function is called by:
  7270 ;;		_main
  7271 ;; This function uses a non-reentrant model
  7272 ;;
  7273                           
  7274                           	psect	text22
  7275  0026A6                     __ptext22:
  7276                           	opt stack 0
  7277  0026A6                     _I2C_Master_Start:
  7278                           	opt stack 24
  7279                           
  7280                           ;I2C.c: 23: I2C_Master_Wait();
  7281                           
  7282                           ;incstack = 0
  7283  0026A6  EC0D  F013         	call	_I2C_Master_Wait	;wreg free
  7284                           
  7285                           ;I2C.c: 24: SEN = 1;
  7286  0026AA  80C5               	bsf	4037,0,c	;volatile
  7287  0026AC  0012               	return		;funcret
  7288  0026AE                     __end_of_I2C_Master_Start:
  7289                           	opt stack 0
  7290                           tblptru	equ	0xFF8
  7291                           tblptrh	equ	0xFF7
  7292                           tblptrl	equ	0xFF6
  7293                           tablat	equ	0xFF5
  7294                           prodh	equ	0xFF4
  7295                           prodl	equ	0xFF3
  7296                           intcon	equ	0xFF2
  7297                           intcon2	equ	0xFF1
  7298                           intcon3	equ	0xFF0
  7299                           postinc0	equ	0xFEE
  7300                           wreg	equ	0xFE8
  7301                           indf2	equ	0xFDF
  7302                           postinc2	equ	0xFDE
  7303                           postdec2	equ	0xFDD
  7304                           fsr2h	equ	0xFDA
  7305                           fsr2l	equ	0xFD9
  7306                           status	equ	0xFD8
  7307                           
  7308 ;; *************** function _I2C_Master_Read *****************
  7309 ;; Defined at:
  7310 ;;		line 45 in file "../I2C.c"
  7311 ;; Parameters:    Size  Location     Type
  7312 ;;  a               1    wreg     unsigned char 
  7313 ;; Auto vars:     Size  Location     Type
  7314 ;;  a               1   49[COMRAM] unsigned char 
  7315 ;;  temp            1   50[COMRAM] unsigned char 
  7316 ;; Return value:  Size  Location     Type
  7317 ;;                  1    wreg      unsigned char 
  7318 ;; Registers used:
  7319 ;;		wreg, status,2, status,0, cstack
  7320 ;; Tracked objects:
  7321 ;;		On entry : 0/0
  7322 ;;		On exit  : 0/0
  7323 ;;		Unchanged: 0/0
  7324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7325 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7326 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7327 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7328 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7329 ;;Total ram usage:        2 bytes
  7330 ;; Hardware stack levels used:    1
  7331 ;; Hardware stack levels required when called:    6
  7332 ;; This function calls:
  7333 ;;		_I2C_Master_Wait
  7334 ;; This function is called by:
  7335 ;;		_main
  7336 ;; This function uses a non-reentrant model
  7337 ;;
  7338                           
  7339                           	psect	text23
  7340  0024EC                     __ptext23:
  7341                           	opt stack 0
  7342  0024EC                     _I2C_Master_Read:
  7343                           	opt stack 24
  7344                           
  7345                           ;incstack = 0
  7346                           ;I2C_Master_Read@a stored from wreg
  7347  0024EC  6E32               	movwf	I2C_Master_Read@a,c
  7348                           
  7349                           ;I2C.c: 47: unsigned char temp;
  7350                           ;I2C.c: 48: I2C_Master_Wait();
  7351  0024EE  EC0D  F013         	call	_I2C_Master_Wait	;wreg free
  7352                           
  7353                           ;I2C.c: 49: RCEN = 1;
  7354  0024F2  86C5               	bsf	4037,3,c	;volatile
  7355                           
  7356                           ;I2C.c: 50: I2C_Master_Wait();
  7357  0024F4  EC0D  F013         	call	_I2C_Master_Wait	;wreg free
  7358                           
  7359                           ;I2C.c: 51: temp = SSPBUF;
  7360  0024F8  CFC9 F033          	movff	4041,I2C_Master_Read@temp	;volatile
  7361                           
  7362                           ;I2C.c: 52: I2C_Master_Wait();
  7363  0024FC  EC0D  F013         	call	_I2C_Master_Wait	;wreg free
  7364                           
  7365                           ;I2C.c: 53: ACKDT = (a)?0:1;
  7366  002500  5032               	movf	I2C_Master_Read@a,w,c
  7367  002502  A4D8               	btfss	status,2,c
  7368  002504  D002               	goto	u3390
  7369  002506  8AC5               	bsf	4037,5,c	;volatile
  7370  002508  D001               	goto	l3968
  7371  00250A                     u3390:
  7372  00250A  9AC5               	bcf	4037,5,c	;volatile
  7373  00250C                     l3968:
  7374                           
  7375                           ;I2C.c: 54: ACKEN = 1;
  7376  00250C  88C5               	bsf	4037,4,c	;volatile
  7377                           
  7378                           ;I2C.c: 55: return temp;
  7379  00250E  5033               	movf	I2C_Master_Read@temp,w,c
  7380  002510  0012               	return	
  7381  002512                     __end_of_I2C_Master_Read:
  7382                           	opt stack 0
  7383                           tblptru	equ	0xFF8
  7384                           tblptrh	equ	0xFF7
  7385                           tblptrl	equ	0xFF6
  7386                           tablat	equ	0xFF5
  7387                           prodh	equ	0xFF4
  7388                           prodl	equ	0xFF3
  7389                           intcon	equ	0xFF2
  7390                           intcon2	equ	0xFF1
  7391                           intcon3	equ	0xFF0
  7392                           postinc0	equ	0xFEE
  7393                           wreg	equ	0xFE8
  7394                           indf2	equ	0xFDF
  7395                           postinc2	equ	0xFDE
  7396                           postdec2	equ	0xFDD
  7397                           fsr2h	equ	0xFDA
  7398                           fsr2l	equ	0xFD9
  7399                           status	equ	0xFD8
  7400                           
  7401 ;; *************** function _I2C_Master_Wait *****************
  7402 ;; Defined at:
  7403 ;;		line 16 in file "../I2C.c"
  7404 ;; Parameters:    Size  Location     Type
  7405 ;;		None
  7406 ;; Auto vars:     Size  Location     Type
  7407 ;;		None
  7408 ;; Return value:  Size  Location     Type
  7409 ;;                  1    wreg      void 
  7410 ;; Registers used:
  7411 ;;		wreg, status,2, status,0
  7412 ;; Tracked objects:
  7413 ;;		On entry : 0/0
  7414 ;;		On exit  : 0/0
  7415 ;;		Unchanged: 0/0
  7416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7417 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7418 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7419 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7420 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7421 ;;Total ram usage:        1 bytes
  7422 ;; Hardware stack levels used:    1
  7423 ;; Hardware stack levels required when called:    5
  7424 ;; This function calls:
  7425 ;;		Nothing
  7426 ;; This function is called by:
  7427 ;;		_I2C_Master_Start
  7428 ;;		_I2C_Master_Stop
  7429 ;;		_I2C_Master_Write
  7430 ;;		_I2C_Master_Read
  7431 ;; This function uses a non-reentrant model
  7432 ;;
  7433                           
  7434                           	psect	text24
  7435  00261A                     __ptext24:
  7436                           	opt stack 0
  7437  00261A                     _I2C_Master_Wait:
  7438                           	opt stack 24
  7439  00261A                     l30:
  7440  00261A  B4C7               	btfsc	4039,2,c	;volatile
  7441  00261C  D7FE               	goto	l30
  7442  00261E  CFC5 F031          	movff	4037,??_I2C_Master_Wait	;volatile
  7443  002622  0E1F               	movlw	31
  7444  002624  1631               	andwf	??_I2C_Master_Wait,f,c
  7445  002626  B4D8               	btfsc	status,2,c
  7446  002628  0012               	return	
  7447  00262A  D7F7               	goto	l30
  7448  00262C                     __end_of_I2C_Master_Wait:
  7449                           	opt stack 0
  7450                           tblptru	equ	0xFF8
  7451                           tblptrh	equ	0xFF7
  7452                           tblptrl	equ	0xFF6
  7453                           tablat	equ	0xFF5
  7454                           prodh	equ	0xFF4
  7455                           prodl	equ	0xFF3
  7456                           intcon	equ	0xFF2
  7457                           intcon2	equ	0xFF1
  7458                           intcon3	equ	0xFF0
  7459                           postinc0	equ	0xFEE
  7460                           wreg	equ	0xFE8
  7461                           indf2	equ	0xFDF
  7462                           postinc2	equ	0xFDE
  7463                           postdec2	equ	0xFDD
  7464                           fsr2h	equ	0xFDA
  7465                           fsr2l	equ	0xFD9
  7466                           status	equ	0xFD8
  7467                           
  7468 ;; *************** function _I2C_Master_Init *****************
  7469 ;; Defined at:
  7470 ;;		line 5 in file "../I2C.c"
  7471 ;; Parameters:    Size  Location     Type
  7472 ;;  c               4   61[COMRAM] const unsigned long 
  7473 ;; Auto vars:     Size  Location     Type
  7474 ;;		None
  7475 ;; Return value:  Size  Location     Type
  7476 ;;                  1    wreg      void 
  7477 ;; Registers used:
  7478 ;;		wreg, status,2, status,0, cstack
  7479 ;; Tracked objects:
  7480 ;;		On entry : 0/0
  7481 ;;		On exit  : 0/0
  7482 ;;		Unchanged: 0/0
  7483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7484 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7485 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7486 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7487 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7488 ;;Total ram usage:        8 bytes
  7489 ;; Hardware stack levels used:    1
  7490 ;; Hardware stack levels required when called:    6
  7491 ;; This function calls:
  7492 ;;		___lldiv
  7493 ;; This function is called by:
  7494 ;;		_main
  7495 ;; This function uses a non-reentrant model
  7496 ;;
  7497                           
  7498                           	psect	text25
  7499  002204                     __ptext25:
  7500                           	opt stack 0
  7501  002204                     _I2C_Master_Init:
  7502                           	opt stack 24
  7503                           
  7504                           ;I2C.c: 8: SSPSTAT = 0b00000000;
  7505                           
  7506                           ;incstack = 0
  7507  002204  0E00               	movlw	0
  7508  002206  6EC7               	movwf	4039,c	;volatile
  7509                           
  7510                           ;I2C.c: 9: SSPCON1 = 0b00101000;
  7511  002208  0E28               	movlw	40
  7512  00220A  6EC6               	movwf	4038,c	;volatile
  7513                           
  7514                           ;I2C.c: 10: SSPCON2 = 0b00000000;
  7515  00220C  0E00               	movlw	0
  7516  00220E  6EC5               	movwf	4037,c	;volatile
  7517                           
  7518                           ;I2C.c: 11: SSPADD = (10000000/(4*c))-1;
  7519  002210  0E80               	movlw	128
  7520  002212  6E31               	movwf	___lldiv@dividend,c
  7521  002214  0E96               	movlw	150
  7522  002216  6E32               	movwf	___lldiv@dividend+1,c
  7523  002218  0E98               	movlw	152
  7524  00221A  6E33               	movwf	___lldiv@dividend+2,c
  7525  00221C  0E00               	movlw	0
  7526  00221E  6E34               	movwf	___lldiv@dividend+3,c
  7527  002220  C03E  F042         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  7528  002224  C03F  F043         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  7529  002228  C040  F044         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  7530  00222C  C041  F045         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  7531  002230  0E02               	movlw	2
  7532  002232                     u3385:
  7533  002232  90D8               	bcf	status,0,c
  7534  002234  3642               	rlcf	??_I2C_Master_Init,f,c
  7535  002236  3643               	rlcf	??_I2C_Master_Init+1,f,c
  7536  002238  3644               	rlcf	??_I2C_Master_Init+2,f,c
  7537  00223A  3645               	rlcf	??_I2C_Master_Init+3,f,c
  7538  00223C  2EE8               	decfsz	wreg,f,c
  7539  00223E  D7F9               	goto	u3385
  7540  002240  C042  F035         	movff	??_I2C_Master_Init,___lldiv@divisor
  7541  002244  C043  F036         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  7542  002248  C044  F037         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  7543  00224C  C045  F038         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  7544  002250  EC51  F010         	call	___lldiv	;wreg free
  7545  002254  0431               	decf	?___lldiv,w,c
  7546  002256  6EC8               	movwf	4040,c	;volatile
  7547                           
  7548                           ;I2C.c: 12: TRISC3 = 1;
  7549  002258  8694               	bsf	3988,3,c	;volatile
  7550                           
  7551                           ;I2C.c: 13: TRISC4 = 1;
  7552  00225A  8894               	bsf	3988,4,c	;volatile
  7553  00225C  0012               	return		;funcret
  7554  00225E                     __end_of_I2C_Master_Init:
  7555                           	opt stack 0
  7556                           tblptru	equ	0xFF8
  7557                           tblptrh	equ	0xFF7
  7558                           tblptrl	equ	0xFF6
  7559                           tablat	equ	0xFF5
  7560                           prodh	equ	0xFF4
  7561                           prodl	equ	0xFF3
  7562                           intcon	equ	0xFF2
  7563                           intcon2	equ	0xFF1
  7564                           intcon3	equ	0xFF0
  7565                           postinc0	equ	0xFEE
  7566                           wreg	equ	0xFE8
  7567                           indf2	equ	0xFDF
  7568                           postinc2	equ	0xFDE
  7569                           postdec2	equ	0xFDD
  7570                           fsr2h	equ	0xFDA
  7571                           fsr2l	equ	0xFD9
  7572                           status	equ	0xFD8
  7573                           
  7574 ;; *************** function ___lldiv *****************
  7575 ;; Defined at:
  7576 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  7577 ;; Parameters:    Size  Location     Type
  7578 ;;  dividend        4   48[COMRAM] unsigned long 
  7579 ;;  divisor         4   52[COMRAM] unsigned long 
  7580 ;; Auto vars:     Size  Location     Type
  7581 ;;  quotient        4   56[COMRAM] unsigned long 
  7582 ;;  counter         1   60[COMRAM] unsigned char 
  7583 ;; Return value:  Size  Location     Type
  7584 ;;                  4   48[COMRAM] unsigned long 
  7585 ;; Registers used:
  7586 ;;		wreg, status,2, status,0
  7587 ;; Tracked objects:
  7588 ;;		On entry : 0/0
  7589 ;;		On exit  : 0/0
  7590 ;;		Unchanged: 0/0
  7591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7592 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7593 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7594 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7595 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7596 ;;Total ram usage:       13 bytes
  7597 ;; Hardware stack levels used:    1
  7598 ;; Hardware stack levels required when called:    5
  7599 ;; This function calls:
  7600 ;;		Nothing
  7601 ;; This function is called by:
  7602 ;;		_I2C_Master_Init
  7603 ;; This function uses a non-reentrant model
  7604 ;;
  7605                           
  7606                           	psect	text26
  7607  0020A2                     __ptext26:
  7608                           	opt stack 0
  7609  0020A2                     ___lldiv:
  7610                           	opt stack 24
  7611                           
  7612                           ;incstack = 0
  7613  0020A2  0E00               	movlw	0
  7614  0020A4  6E39               	movwf	___lldiv@quotient,c
  7615  0020A6  0E00               	movlw	0
  7616  0020A8  6E3A               	movwf	___lldiv@quotient+1,c
  7617  0020AA  0E00               	movlw	0
  7618  0020AC  6E3B               	movwf	___lldiv@quotient+2,c
  7619  0020AE  0E00               	movlw	0
  7620  0020B0  6E3C               	movwf	___lldiv@quotient+3,c
  7621  0020B2  5035               	movf	___lldiv@divisor,w,c
  7622  0020B4  1036               	iorwf	___lldiv@divisor+1,w,c
  7623  0020B6  1037               	iorwf	___lldiv@divisor+2,w,c
  7624  0020B8  1038               	iorwf	___lldiv@divisor+3,w,c
  7625  0020BA  B4D8               	btfsc	status,2,c
  7626  0020BC  D02A               	goto	l926
  7627  0020BE  0E01               	movlw	1
  7628  0020C0  6E3D               	movwf	___lldiv@counter,c
  7629  0020C2  D006               	goto	l3628
  7630  0020C4                     l3626:
  7631  0020C4  90D8               	bcf	status,0,c
  7632  0020C6  3635               	rlcf	___lldiv@divisor,f,c
  7633  0020C8  3636               	rlcf	___lldiv@divisor+1,f,c
  7634  0020CA  3637               	rlcf	___lldiv@divisor+2,f,c
  7635  0020CC  3638               	rlcf	___lldiv@divisor+3,f,c
  7636  0020CE  2A3D               	incf	___lldiv@counter,f,c
  7637  0020D0                     l3628:
  7638  0020D0  AE38               	btfss	___lldiv@divisor+3,7,c
  7639  0020D2  D7F8               	goto	l3626
  7640  0020D4                     l3630:
  7641  0020D4  90D8               	bcf	status,0,c
  7642  0020D6  3639               	rlcf	___lldiv@quotient,f,c
  7643  0020D8  363A               	rlcf	___lldiv@quotient+1,f,c
  7644  0020DA  363B               	rlcf	___lldiv@quotient+2,f,c
  7645  0020DC  363C               	rlcf	___lldiv@quotient+3,f,c
  7646  0020DE  5035               	movf	___lldiv@divisor,w,c
  7647  0020E0  5C31               	subwf	___lldiv@dividend,w,c
  7648  0020E2  5036               	movf	___lldiv@divisor+1,w,c
  7649  0020E4  5832               	subwfb	___lldiv@dividend+1,w,c
  7650  0020E6  5037               	movf	___lldiv@divisor+2,w,c
  7651  0020E8  5833               	subwfb	___lldiv@dividend+2,w,c
  7652  0020EA  5038               	movf	___lldiv@divisor+3,w,c
  7653  0020EC  5834               	subwfb	___lldiv@dividend+3,w,c
  7654  0020EE  A0D8               	btfss	status,0,c
  7655  0020F0  D009               	goto	l3638
  7656  0020F2  5035               	movf	___lldiv@divisor,w,c
  7657  0020F4  5E31               	subwf	___lldiv@dividend,f,c
  7658  0020F6  5036               	movf	___lldiv@divisor+1,w,c
  7659  0020F8  5A32               	subwfb	___lldiv@dividend+1,f,c
  7660  0020FA  5037               	movf	___lldiv@divisor+2,w,c
  7661  0020FC  5A33               	subwfb	___lldiv@dividend+2,f,c
  7662  0020FE  5038               	movf	___lldiv@divisor+3,w,c
  7663  002100  5A34               	subwfb	___lldiv@dividend+3,f,c
  7664  002102  8039               	bsf	___lldiv@quotient,0,c
  7665  002104                     l3638:
  7666  002104  90D8               	bcf	status,0,c
  7667  002106  3238               	rrcf	___lldiv@divisor+3,f,c
  7668  002108  3237               	rrcf	___lldiv@divisor+2,f,c
  7669  00210A  3236               	rrcf	___lldiv@divisor+1,f,c
  7670  00210C  3235               	rrcf	___lldiv@divisor,f,c
  7671  00210E  2E3D               	decfsz	___lldiv@counter,f,c
  7672  002110  D7E1               	goto	l3630
  7673  002112                     l926:
  7674  002112  C039  F031         	movff	___lldiv@quotient,?___lldiv
  7675  002116  C03A  F032         	movff	___lldiv@quotient+1,?___lldiv+1
  7676  00211A  C03B  F033         	movff	___lldiv@quotient+2,?___lldiv+2
  7677  00211E  C03C  F034         	movff	___lldiv@quotient+3,?___lldiv+3
  7678  002122  0012               	return		;funcret
  7679  002124                     __end_of___lldiv:
  7680                           	opt stack 0
  7681                           tblptru	equ	0xFF8
  7682                           tblptrh	equ	0xFF7
  7683                           tblptrl	equ	0xFF6
  7684                           tablat	equ	0xFF5
  7685                           prodh	equ	0xFF4
  7686                           prodl	equ	0xFF3
  7687                           intcon	equ	0xFF2
  7688                           intcon2	equ	0xFF1
  7689                           intcon3	equ	0xFF0
  7690                           postinc0	equ	0xFEE
  7691                           wreg	equ	0xFE8
  7692                           indf2	equ	0xFDF
  7693                           postinc2	equ	0xFDE
  7694                           postdec2	equ	0xFDD
  7695                           fsr2h	equ	0xFDA
  7696                           fsr2l	equ	0xFD9
  7697                           status	equ	0xFD8
  7698                           
  7699 ;; *************** function _ISR *****************
  7700 ;; Defined at:
  7701 ;;		line 753 in file "../main.c"
  7702 ;; Parameters:    Size  Location     Type
  7703 ;;		None
  7704 ;; Auto vars:     Size  Location     Type
  7705 ;;  keypress        1   47[COMRAM] unsigned char 
  7706 ;; Return value:  Size  Location     Type
  7707 ;;                  1    wreg      void 
  7708 ;; Registers used:
  7709 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7710 ;; Tracked objects:
  7711 ;;		On entry : 0/0
  7712 ;;		On exit  : 0/0
  7713 ;;		Unchanged: 0/0
  7714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7716 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7717 ;;      Temps:         15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7718 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7719 ;;Total ram usage:       16 bytes
  7720 ;; Hardware stack levels used:    1
  7721 ;; Hardware stack levels required when called:    4
  7722 ;; This function calls:
  7723 ;;		_keypressed
  7724 ;;		i2___awdiv
  7725 ;;		i2___awmod
  7726 ;;		i2_stopOperation
  7727 ;; This function is called by:
  7728 ;;		Interrupt level 2
  7729 ;; This function uses a non-reentrant model
  7730 ;;
  7731                           
  7732                           	psect	intcode
  7733  000008                     __pintcode:
  7734                           	opt stack 0
  7735  000008                     _ISR:
  7736                           	opt stack 22
  7737                           
  7738                           ;incstack = 0
  7739  000008  824F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7740  00000A  EDCD  F00C         	call	int_func,f	;refresh shadow registers
  7741                           tblptru	equ	0xFF8
  7742                           tblptrh	equ	0xFF7
  7743                           tblptrl	equ	0xFF6
  7744                           tablat	equ	0xFF5
  7745                           prodh	equ	0xFF4
  7746                           prodl	equ	0xFF3
  7747                           intcon	equ	0xFF2
  7748                           intcon2	equ	0xFF1
  7749                           intcon3	equ	0xFF0
  7750                           postinc0	equ	0xFEE
  7751                           wreg	equ	0xFE8
  7752                           indf2	equ	0xFDF
  7753                           postinc2	equ	0xFDE
  7754                           postdec2	equ	0xFDD
  7755                           fsr2h	equ	0xFDA
  7756                           fsr2l	equ	0xFD9
  7757                           status	equ	0xFD8
  7758                           
  7759                           	psect	intcode_body
  7760  00199A                     __pintcode_body:
  7761                           	opt stack 22
  7762  00199A                     int_func:
  7763                           	opt stack 22
  7764  00199A  0006               	pop		; remove dummy address from shadow register refresh
  7765  00199C  CFFA F022          	movff	pclath,??_ISR+1
  7766  0019A0  CFFB F023          	movff	pclatu,??_ISR+2
  7767  0019A4  CFE9 F024          	movff	fsr0l,??_ISR+3
  7768  0019A8  CFEA F025          	movff	fsr0h,??_ISR+4
  7769  0019AC  CFE1 F026          	movff	fsr1l,??_ISR+5
  7770  0019B0  CFE2 F027          	movff	fsr1h,??_ISR+6
  7771  0019B4  CFD9 F028          	movff	fsr2l,??_ISR+7
  7772  0019B8  CFDA F029          	movff	fsr2h,??_ISR+8
  7773  0019BC  CFF3 F02A          	movff	prodl,??_ISR+9
  7774  0019C0  CFF4 F02B          	movff	prodh,??_ISR+10
  7775  0019C4  CFF6 F02C          	movff	tblptrl,??_ISR+11
  7776  0019C8  CFF7 F02D          	movff	tblptrh,??_ISR+12
  7777  0019CC  CFF8 F02E          	movff	tblptru,??_ISR+13
  7778  0019D0  CFF5 F02F          	movff	tablat,??_ISR+14
  7779                           
  7780                           ;main.c: 754: if (INT1IF){
  7781  0019D4  A0F0               	btfss	intcon3,0,c	;volatile
  7782  0019D6  D015               	goto	i2l4840
  7783                           
  7784                           ;main.c: 755: unsigned char keypress = (PORTB & 0xF0) >> 4;
  7785  0019D8  3881               	swapf	3969,w,c	;volatile
  7786  0019DA  0B0F               	andlw	15
  7787  0019DC  0B0F               	andlw	15
  7788  0019DE  6E30               	movwf	ISR@keypress,c
  7789                           
  7790                           ;main.c: 756: keypressed('4', '6', keys[keypress]);
  7791  0019E0  0E36               	movlw	54
  7792  0019E2  6E1D               	movwf	keypressed@right,c
  7793  0019E4  5030               	movf	ISR@keypress,w,c
  7794  0019E6  0D01               	mullw	1
  7795  0019E8  0E9F               	movlw	low _keys
  7796  0019EA  24F3               	addwf	prodl,w,c
  7797  0019EC  6EF6               	movwf	tblptrl,c
  7798  0019EE  0EFD               	movlw	high _keys
  7799  0019F0  20F4               	addwfc	prodh,w,c
  7800  0019F2  6EF7               	movwf	tblptrh,c
  7801  0019F4                     	if	0	;There are less than 3 active tblptr bytes
  7802  0019F4                     	endif
  7803  0019F4  0008               	tblrd		*
  7804  0019F6  CFF5 F01E          	movff	tablat,keypressed@key
  7805  0019FA  0E34               	movlw	52
  7806  0019FC  EC46  F00F         	call	_keypressed
  7807                           
  7808                           ;main.c: 757: INT1IF = 0;
  7809  001A00  90F0               	bcf	intcon3,0,c	;volatile
  7810  001A02                     i2l4840:
  7811                           
  7812                           ;main.c: 758: }
  7813                           ;main.c: 759: if (screenMode == 1 && TMR0IF){
  7814  001A02  0100               	movlb	0	; () banked
  7815  001A04  05DC               	decf	_screenMode& (0+255),w,b
  7816  001A06  B4D8               	btfsc	status,2,c
  7817                           
  7818                           ; BSR set to: 0
  7819  001A08  A4F2               	btfss	intcon,2,c	;volatile
  7820  001A0A  D038               	goto	i2l4872
  7821                           
  7822                           ; BSR set to: 0
  7823                           ;main.c: 760: TMR0IF = 0;
  7824  001A0C  94F2               	bcf	intcon,2,c	;volatile
  7825                           
  7826                           ; BSR set to: 0
  7827                           ;main.c: 761: TMR0 = 55770;
  7828  001A0E  0ED9               	movlw	217
  7829  001A10  6ED7               	movwf	4055,c	;volatile
  7830  001A12  0EDA               	movlw	218
  7831  001A14  6ED6               	movwf	4054,c	;volatile
  7832                           
  7833                           ; BSR set to: 0
  7834                           ;main.c: 762: opTimer++;
  7835  001A16  2A4A               	incf	_opTimer,f,c
  7836                           
  7837                           ; BSR set to: 0
  7838                           ;main.c: 763: min = opTimer / 60;
  7839  001A18  C04A  F001         	movff	_opTimer,i2___awdiv@dividend
  7840  001A1C  6A02               	clrf	i2___awdiv@dividend+1,c
  7841  001A1E  0E00               	movlw	0
  7842  001A20  6E04               	movwf	i2___awdiv@divisor+1,c
  7843  001A22  0E3C               	movlw	60
  7844  001A24  6E03               	movwf	i2___awdiv@divisor,c
  7845  001A26  EC0F  F010         	call	i2___awdiv	;wreg free
  7846  001A2A  5001               	movf	?i2___awdiv,w,c
  7847  001A2C  0100               	movlb	0	; () banked
  7848  001A2E  6FD4               	movwf	_min& (0+255),b
  7849                           
  7850                           ; BSR set to: 0
  7851                           ;main.c: 764: sec = opTimer % 60;
  7852  001A30  C04A  F001         	movff	_opTimer,i2___awmod@dividend
  7853  001A34  6A02               	clrf	i2___awmod@dividend+1,c
  7854  001A36  0E00               	movlw	0
  7855  001A38  6E04               	movwf	i2___awmod@divisor+1,c
  7856  001A3A  0E3C               	movlw	60
  7857  001A3C  6E03               	movwf	i2___awmod@divisor,c
  7858  001A3E  ECCA  F010         	call	i2___awmod	;wreg free
  7859  001A42  5001               	movf	?i2___awmod,w,c
  7860  001A44  0100               	movlb	0	; () banked
  7861  001A46  6FDA               	movwf	_sec& (0+255),b
  7862                           
  7863                           ; BSR set to: 0
  7864                           ;main.c: 768: if (opTimer >= 180)
  7865  001A48  0EB3               	movlw	179
  7866  001A4A  644A               	cpfsgt	_opTimer,c
  7867  001A4C  D002               	goto	i2l4858
  7868                           
  7869                           ; BSR set to: 0
  7870                           ;main.c: 769: stopOperation();
  7871  001A4E  EC54  F00B         	call	i2_stopOperation	;wreg free
  7872  001A52                     i2l4858:
  7873                           
  7874                           ;main.c: 771: if (!sorting){
  7875  001A52  504C               	movf	_sorting,w,c
  7876  001A54  A4D8               	btfss	status,2,c
  7877  001A56  D010               	goto	i2l4870
  7878                           
  7879                           ;main.c: 772: if (ADRES > 50)
  7880  001A58  50C4               	movf	4036,w,c	;volatile
  7881  001A5A  E104               	bnz	i2u441_40
  7882  001A5C  0E33               	movlw	51
  7883  001A5E  5CC3               	subwf	4035,w,c	;volatile
  7884  001A60  A0D8               	btfss	status,0,c
  7885  001A62  D002               	goto	i2l4864
  7886  001A64                     i2u441_40:
  7887                           
  7888                           ;main.c: 773: doneTimer++;
  7889  001A64  2A49               	incf	_doneTimer,f,c
  7890  001A66  D002               	goto	i2l4866
  7891  001A68                     i2l4864:
  7892                           
  7893                           ;main.c: 774: else
  7894                           ;main.c: 775: doneTimer = 0;
  7895  001A68  0E00               	movlw	0
  7896  001A6A  6E49               	movwf	_doneTimer,c
  7897  001A6C                     i2l4866:
  7898                           
  7899                           ;main.c: 776: if (doneTimer >= 10)
  7900  001A6C  0E09               	movlw	9
  7901  001A6E  6449               	cpfsgt	_doneTimer,c
  7902  001A70  D005               	goto	i2l4872
  7903                           
  7904                           ;main.c: 777: stopOperation();
  7905  001A72  EC54  F00B         	call	i2_stopOperation	;wreg free
  7906                           
  7907                           ;main.c: 779: }
  7908  001A76  D002               	goto	i2l4872
  7909  001A78                     i2l4870:
  7910                           
  7911                           ;main.c: 780: else
  7912                           ;main.c: 781: doneTimer = 0;
  7913  001A78  0E00               	movlw	0
  7914  001A7A  6E49               	movwf	_doneTimer,c
  7915  001A7C                     i2l4872:
  7916                           
  7917                           ;main.c: 782: }
  7918                           ;main.c: 783: if (screenMode == 1 && TMR1IF){
  7919  001A7C  0100               	movlb	0	; () banked
  7920  001A7E  05DC               	decf	_screenMode& (0+255),w,b
  7921  001A80  B4D8               	btfsc	status,2,c
  7922                           
  7923                           ; BSR set to: 0
  7924  001A82  A09E               	btfss	3998,0,c	;volatile
  7925  001A84  D0BD               	goto	i2l502
  7926                           
  7927                           ; BSR set to: 0
  7928                           ;main.c: 784: TMR1IF = 0;
  7929  001A86  909E               	bcf	3998,0,c	;volatile
  7930                           
  7931                           ; BSR set to: 0
  7932                           ;main.c: 785: TMR1 = 60535;
  7933  001A88  0EEC               	movlw	236
  7934  001A8A  6ECF               	movwf	4047,c	;volatile
  7935  001A8C  0E77               	movlw	119
  7936  001A8E  6ECE               	movwf	4046,c	;volatile
  7937                           
  7938                           ; BSR set to: 0
  7939                           ;main.c: 786: if (count_2ms)
  7940  001A90  5047               	movf	_count_2ms,w,c
  7941  001A92  1048               	iorwf	_count_2ms+1,w,c
  7942  001A94  B4D8               	btfsc	status,2,c
  7943  001A96  D003               	goto	i2l472
  7944                           
  7945                           ; BSR set to: 0
  7946                           ;main.c: 787: count_2ms--;
  7947  001A98  0647               	decf	_count_2ms,f,c
  7948  001A9A  A0D8               	btfss	status,0,c
  7949  001A9C  0648               	decf	_count_2ms+1,f,c
  7950  001A9E                     i2l472:
  7951                           
  7952                           ; BSR set to: 0
  7953                           ;main.c: 788: solOnTimer++;
  7954  001A9E  2A4B               	incf	_solOnTimer,f,c
  7955                           
  7956                           ; BSR set to: 0
  7957                           ;main.c: 789: if (solOnTimer >= 150){
  7958  001AA0  0E95               	movlw	149
  7959  001AA2  644B               	cpfsgt	_solOnTimer,c
  7960  001AA4  D00D               	goto	i2l4890
  7961                           
  7962                           ; BSR set to: 0
  7963                           ;main.c: 790: solOnTimer = 0;
  7964  001AA6  0E00               	movlw	0
  7965  001AA8  6E4B               	movwf	_solOnTimer,c
  7966                           
  7967                           ; BSR set to: 0
  7968                           ;main.c: 791: LATBbits.LB0 = !LATBbits.LB0;;
  7969  001AAA  B08A               	btfsc	3978,0,c	;volatile
  7970  001AAC  D003               	goto	i2u447_40
  7971  001AAE  6A21               	clrf	??_ISR& (0+255),c
  7972  001AB0  2A21               	incf	??_ISR& (0+255),f,c
  7973  001AB2  D001               	goto	i2u448_48
  7974  001AB4                     i2u447_40:
  7975  001AB4  6A21               	clrf	??_ISR& (0+255),c
  7976  001AB6                     i2u448_48:
  7977  001AB6  508A               	movf	3978,w,c	;volatile
  7978  001AB8  1821               	xorwf	??_ISR,w,c
  7979  001ABA  0BFE               	andlw	-2
  7980  001ABC  1821               	xorwf	??_ISR,w,c
  7981  001ABE  6E8A               	movwf	3978,c	;volatile
  7982  001AC0                     i2l4890:
  7983                           
  7984                           ;main.c: 792: }
  7985                           ;main.c: 793: if (plat1Left){
  7986  001AC0  0100               	movlb	0	; () banked
  7987  001AC2  51BF               	movf	_plat1Left& (0+255),w,b
  7988  001AC4  0100               	movlb	0	; () banked
  7989  001AC6  11C0               	iorwf	(_plat1Left+1)& (0+255),w,b
  7990  001AC8  B4D8               	btfsc	status,2,c
  7991  001ACA  D022               	goto	i2l4916
  7992                           
  7993                           ; BSR set to: 0
  7994                           ;main.c: 794: if (step1 == 1){
  7995  001ACC  044D               	decf	_step1,w,c
  7996  001ACE  A4D8               	btfss	status,2,c
  7997  001AD0  D002               	goto	i2l4896
  7998                           
  7999                           ; BSR set to: 0
  8000                           ;main.c: 795: LATCbits.LC5 = 1;;
  8001  001AD2  8A8B               	bsf	3979,5,c	;volatile
  8002                           
  8003                           ;main.c: 796: LATCbits.LC6 = 0;;
  8004  001AD4  9C8B               	bcf	3979,6,c	;volatile
  8005  001AD6                     i2l4896:
  8006                           
  8007                           ; BSR set to: 0
  8008                           ;main.c: 797: }
  8009                           ;main.c: 798: if (step1 == 2){
  8010  001AD6  0E02               	movlw	2
  8011  001AD8  184D               	xorwf	_step1,w,c
  8012  001ADA  A4D8               	btfss	status,2,c
  8013  001ADC  D002               	goto	i2l4900
  8014                           
  8015                           ; BSR set to: 0
  8016                           ;main.c: 799: LATCbits.LC1 = 0;;
  8017  001ADE  928B               	bcf	3979,1,c	;volatile
  8018                           
  8019                           ;main.c: 800: LATCbits.LC2 = 1;;
  8020  001AE0  848B               	bsf	3979,2,c	;volatile
  8021  001AE2                     i2l4900:
  8022                           
  8023                           ; BSR set to: 0
  8024                           ;main.c: 801: }
  8025                           ;main.c: 802: if (step1 == 3){
  8026  001AE2  0E03               	movlw	3
  8027  001AE4  184D               	xorwf	_step1,w,c
  8028  001AE6  A4D8               	btfss	status,2,c
  8029  001AE8  D002               	goto	i2l4904
  8030                           
  8031                           ; BSR set to: 0
  8032                           ;main.c: 803: LATCbits.LC5 = 0;;
  8033  001AEA  9A8B               	bcf	3979,5,c	;volatile
  8034                           
  8035                           ;main.c: 804: LATCbits.LC6 = 1;;
  8036  001AEC  8C8B               	bsf	3979,6,c	;volatile
  8037  001AEE                     i2l4904:
  8038                           
  8039                           ; BSR set to: 0
  8040                           ;main.c: 805: }
  8041                           ;main.c: 806: if (step1 == 4){
  8042  001AEE  0E04               	movlw	4
  8043  001AF0  184D               	xorwf	_step1,w,c
  8044  001AF2  A4D8               	btfss	status,2,c
  8045  001AF4  D002               	goto	i2l4908
  8046                           
  8047                           ; BSR set to: 0
  8048                           ;main.c: 807: LATCbits.LC1 = 1;;
  8049  001AF6  828B               	bsf	3979,1,c	;volatile
  8050                           
  8051                           ;main.c: 808: LATCbits.LC2 = 0;;
  8052  001AF8  948B               	bcf	3979,2,c	;volatile
  8053  001AFA                     i2l4908:
  8054                           
  8055                           ; BSR set to: 0
  8056                           ;main.c: 809: }
  8057                           ;main.c: 810: plat1Left--;
  8058  001AFA  0100               	movlb	0	; () banked
  8059  001AFC  07BF               	decf	_plat1Left& (0+255),f,b
  8060  001AFE  A0D8               	btfss	status,0,c
  8061  001B00  07C0               	decf	(_plat1Left+1)& (0+255),f,b
  8062                           
  8063                           ; BSR set to: 0
  8064                           ;main.c: 811: if (step1>=4)
  8065  001B02  0E03               	movlw	3
  8066  001B04  644D               	cpfsgt	_step1,c
  8067  001B06  D003               	goto	i2l4914
  8068                           
  8069                           ; BSR set to: 0
  8070                           ;main.c: 812: step1 = 1;
  8071  001B08  0E01               	movlw	1
  8072  001B0A  6E4D               	movwf	_step1,c
  8073  001B0C  D001               	goto	i2l4916
  8074  001B0E                     i2l4914:
  8075                           
  8076                           ; BSR set to: 0
  8077                           ;main.c: 813: else
  8078                           ;main.c: 814: step1++;
  8079  001B0E  2A4D               	incf	_step1,f,c
  8080  001B10                     i2l4916:
  8081                           
  8082                           ; BSR set to: 0
  8083                           ;main.c: 815: }
  8084                           ;main.c: 816: if (plat1Right){
  8085  001B10  0100               	movlb	0	; () banked
  8086  001B12  51C1               	movf	_plat1Right& (0+255),w,b
  8087  001B14  0100               	movlb	0	; () banked
  8088  001B16  11C2               	iorwf	(_plat1Right+1)& (0+255),w,b
  8089  001B18  B4D8               	btfsc	status,2,c
  8090  001B1A  D022               	goto	i2l4942
  8091                           
  8092                           ; BSR set to: 0
  8093                           ;main.c: 817: if (step1 == 4){
  8094  001B1C  0E04               	movlw	4
  8095  001B1E  184D               	xorwf	_step1,w,c
  8096  001B20  A4D8               	btfss	status,2,c
  8097  001B22  D002               	goto	i2l4922
  8098                           
  8099                           ; BSR set to: 0
  8100                           ;main.c: 818: LATCbits.LC5 = 0;;
  8101  001B24  9A8B               	bcf	3979,5,c	;volatile
  8102                           
  8103                           ;main.c: 819: LATCbits.LC6 = 1;;
  8104  001B26  8C8B               	bsf	3979,6,c	;volatile
  8105  001B28                     i2l4922:
  8106                           
  8107                           ; BSR set to: 0
  8108                           ;main.c: 820: }
  8109                           ;main.c: 821: if (step1 == 3){
  8110  001B28  0E03               	movlw	3
  8111  001B2A  184D               	xorwf	_step1,w,c
  8112  001B2C  A4D8               	btfss	status,2,c
  8113  001B2E  D002               	goto	i2l4926
  8114                           
  8115                           ; BSR set to: 0
  8116                           ;main.c: 822: LATCbits.LC1 = 0;;
  8117  001B30  928B               	bcf	3979,1,c	;volatile
  8118                           
  8119                           ;main.c: 823: LATCbits.LC2 = 1;;
  8120  001B32  848B               	bsf	3979,2,c	;volatile
  8121  001B34                     i2l4926:
  8122                           
  8123                           ; BSR set to: 0
  8124                           ;main.c: 824: }
  8125                           ;main.c: 825: if (step1 == 2){
  8126  001B34  0E02               	movlw	2
  8127  001B36  184D               	xorwf	_step1,w,c
  8128  001B38  A4D8               	btfss	status,2,c
  8129  001B3A  D002               	goto	i2l4930
  8130                           
  8131                           ; BSR set to: 0
  8132                           ;main.c: 826: LATCbits.LC5 = 1;;
  8133  001B3C  8A8B               	bsf	3979,5,c	;volatile
  8134                           
  8135                           ;main.c: 827: LATCbits.LC6 = 0;;
  8136  001B3E  9C8B               	bcf	3979,6,c	;volatile
  8137  001B40                     i2l4930:
  8138                           
  8139                           ; BSR set to: 0
  8140                           ;main.c: 828: }
  8141                           ;main.c: 829: if (step1 == 1){
  8142  001B40  044D               	decf	_step1,w,c
  8143  001B42  A4D8               	btfss	status,2,c
  8144  001B44  D002               	goto	i2l4934
  8145                           
  8146                           ; BSR set to: 0
  8147                           ;main.c: 830: LATCbits.LC1 = 1;;
  8148  001B46  828B               	bsf	3979,1,c	;volatile
  8149                           
  8150                           ;main.c: 831: LATCbits.LC2 = 0;;
  8151  001B48  948B               	bcf	3979,2,c	;volatile
  8152  001B4A                     i2l4934:
  8153                           
  8154                           ; BSR set to: 0
  8155                           ;main.c: 832: }
  8156                           ;main.c: 833: plat1Right--;
  8157  001B4A  0100               	movlb	0	; () banked
  8158  001B4C  07C1               	decf	_plat1Right& (0+255),f,b
  8159  001B4E  A0D8               	btfss	status,0,c
  8160  001B50  07C2               	decf	(_plat1Right+1)& (0+255),f,b
  8161                           
  8162                           ; BSR set to: 0
  8163                           ;main.c: 834: if (step1<=1)
  8164  001B52  0E02               	movlw	2
  8165  001B54  604D               	cpfslt	_step1,c
  8166  001B56  D003               	goto	i2l4940
  8167                           
  8168                           ; BSR set to: 0
  8169                           ;main.c: 835: step1 = 4;
  8170  001B58  0E04               	movlw	4
  8171  001B5A  6E4D               	movwf	_step1,c
  8172  001B5C  D001               	goto	i2l4942
  8173  001B5E                     i2l4940:
  8174                           
  8175                           ; BSR set to: 0
  8176                           ;main.c: 836: else
  8177                           ;main.c: 837: step1--;
  8178  001B5E  064D               	decf	_step1,f,c
  8179  001B60                     i2l4942:
  8180                           
  8181                           ; BSR set to: 0
  8182                           ;main.c: 838: }
  8183                           ;main.c: 839: if (plat2Left){
  8184  001B60  0100               	movlb	0	; () banked
  8185  001B62  51C3               	movf	_plat2Left& (0+255),w,b
  8186  001B64  0100               	movlb	0	; () banked
  8187  001B66  11C4               	iorwf	(_plat2Left+1)& (0+255),w,b
  8188  001B68  B4D8               	btfsc	status,2,c
  8189  001B6A  D022               	goto	i2l4968
  8190                           
  8191                           ; BSR set to: 0
  8192                           ;main.c: 840: if (step2 == 1){
  8193  001B6C  044E               	decf	_step2,w,c
  8194  001B6E  A4D8               	btfss	status,2,c
  8195  001B70  D002               	goto	i2l4948
  8196                           
  8197                           ; BSR set to: 0
  8198                           ;main.c: 841: LATAbits.LA4 = 1;;
  8199  001B72  8889               	bsf	3977,4,c	;volatile
  8200                           
  8201                           ;main.c: 842: LATEbits.LE1 = 0;;
  8202  001B74  928D               	bcf	3981,1,c	;volatile
  8203  001B76                     i2l4948:
  8204                           
  8205                           ; BSR set to: 0
  8206                           ;main.c: 843: }
  8207                           ;main.c: 844: if (step2 == 2){
  8208  001B76  0E02               	movlw	2
  8209  001B78  184E               	xorwf	_step2,w,c
  8210  001B7A  A4D8               	btfss	status,2,c
  8211  001B7C  D002               	goto	i2l4952
  8212                           
  8213                           ; BSR set to: 0
  8214                           ;main.c: 845: LATCbits.LC0 = 0;;
  8215  001B7E  908B               	bcf	3979,0,c	;volatile
  8216                           
  8217                           ;main.c: 846: LATEbits.LE2 = 1;;
  8218  001B80  848D               	bsf	3981,2,c	;volatile
  8219  001B82                     i2l4952:
  8220                           
  8221                           ; BSR set to: 0
  8222                           ;main.c: 847: }
  8223                           ;main.c: 848: if (step2 == 3){
  8224  001B82  0E03               	movlw	3
  8225  001B84  184E               	xorwf	_step2,w,c
  8226  001B86  A4D8               	btfss	status,2,c
  8227  001B88  D002               	goto	i2l4956
  8228                           
  8229                           ; BSR set to: 0
  8230                           ;main.c: 849: LATAbits.LA4 = 0;;
  8231  001B8A  9889               	bcf	3977,4,c	;volatile
  8232                           
  8233                           ;main.c: 850: LATEbits.LE1 = 1;;
  8234  001B8C  828D               	bsf	3981,1,c	;volatile
  8235  001B8E                     i2l4956:
  8236                           
  8237                           ; BSR set to: 0
  8238                           ;main.c: 851: }
  8239                           ;main.c: 852: if (step2 == 4){
  8240  001B8E  0E04               	movlw	4
  8241  001B90  184E               	xorwf	_step2,w,c
  8242  001B92  A4D8               	btfss	status,2,c
  8243  001B94  D002               	goto	i2l4960
  8244                           
  8245                           ; BSR set to: 0
  8246                           ;main.c: 853: LATCbits.LC0 = 1;;
  8247  001B96  808B               	bsf	3979,0,c	;volatile
  8248                           
  8249                           ;main.c: 854: LATEbits.LE2 = 0;;
  8250  001B98  948D               	bcf	3981,2,c	;volatile
  8251  001B9A                     i2l4960:
  8252                           
  8253                           ; BSR set to: 0
  8254                           ;main.c: 855: }
  8255                           ;main.c: 856: plat2Left--;
  8256  001B9A  0100               	movlb	0	; () banked
  8257  001B9C  07C3               	decf	_plat2Left& (0+255),f,b
  8258  001B9E  A0D8               	btfss	status,0,c
  8259  001BA0  07C4               	decf	(_plat2Left+1)& (0+255),f,b
  8260                           
  8261                           ; BSR set to: 0
  8262                           ;main.c: 857: if (step2>=4)
  8263  001BA2  0E03               	movlw	3
  8264  001BA4  644E               	cpfsgt	_step2,c
  8265  001BA6  D003               	goto	i2l4966
  8266                           
  8267                           ; BSR set to: 0
  8268                           ;main.c: 858: step2 = 1;
  8269  001BA8  0E01               	movlw	1
  8270  001BAA  6E4E               	movwf	_step2,c
  8271  001BAC  D001               	goto	i2l4968
  8272  001BAE                     i2l4966:
  8273                           
  8274                           ; BSR set to: 0
  8275                           ;main.c: 859: else
  8276                           ;main.c: 860: step2++;
  8277  001BAE  2A4E               	incf	_step2,f,c
  8278  001BB0                     i2l4968:
  8279                           
  8280                           ; BSR set to: 0
  8281                           ;main.c: 861: }
  8282                           ;main.c: 862: if (plat2Right){
  8283  001BB0  0100               	movlb	0	; () banked
  8284  001BB2  51C5               	movf	_plat2Right& (0+255),w,b
  8285  001BB4  0100               	movlb	0	; () banked
  8286  001BB6  11C6               	iorwf	(_plat2Right+1)& (0+255),w,b
  8287  001BB8  B4D8               	btfsc	status,2,c
  8288  001BBA  D022               	goto	i2l502
  8289                           
  8290                           ; BSR set to: 0
  8291                           ;main.c: 863: if (step2 == 4){
  8292  001BBC  0E04               	movlw	4
  8293  001BBE  184E               	xorwf	_step2,w,c
  8294  001BC0  A4D8               	btfss	status,2,c
  8295  001BC2  D002               	goto	i2l4974
  8296                           
  8297                           ; BSR set to: 0
  8298                           ;main.c: 864: LATAbits.LA4 = 0;;
  8299  001BC4  9889               	bcf	3977,4,c	;volatile
  8300                           
  8301                           ;main.c: 865: LATEbits.LE1 = 1;;
  8302  001BC6  828D               	bsf	3981,1,c	;volatile
  8303  001BC8                     i2l4974:
  8304                           
  8305                           ; BSR set to: 0
  8306                           ;main.c: 866: }
  8307                           ;main.c: 867: if (step2 == 3){
  8308  001BC8  0E03               	movlw	3
  8309  001BCA  184E               	xorwf	_step2,w,c
  8310  001BCC  A4D8               	btfss	status,2,c
  8311  001BCE  D002               	goto	i2l4978
  8312                           
  8313                           ; BSR set to: 0
  8314                           ;main.c: 868: LATCbits.LC0 = 0;;
  8315  001BD0  908B               	bcf	3979,0,c	;volatile
  8316                           
  8317                           ;main.c: 869: LATEbits.LE2 = 1;;
  8318  001BD2  848D               	bsf	3981,2,c	;volatile
  8319  001BD4                     i2l4978:
  8320                           
  8321                           ; BSR set to: 0
  8322                           ;main.c: 870: }
  8323                           ;main.c: 871: if (step2 == 2){
  8324  001BD4  0E02               	movlw	2
  8325  001BD6  184E               	xorwf	_step2,w,c
  8326  001BD8  A4D8               	btfss	status,2,c
  8327  001BDA  D002               	goto	i2l4982
  8328                           
  8329                           ; BSR set to: 0
  8330                           ;main.c: 872: LATAbits.LA4 = 1;;
  8331  001BDC  8889               	bsf	3977,4,c	;volatile
  8332                           
  8333                           ;main.c: 873: LATEbits.LE1 = 0;;
  8334  001BDE  928D               	bcf	3981,1,c	;volatile
  8335  001BE0                     i2l4982:
  8336                           
  8337                           ; BSR set to: 0
  8338                           ;main.c: 874: }
  8339                           ;main.c: 875: if (step2 == 1){
  8340  001BE0  044E               	decf	_step2,w,c
  8341  001BE2  A4D8               	btfss	status,2,c
  8342  001BE4  D002               	goto	i2l4986
  8343                           
  8344                           ; BSR set to: 0
  8345                           ;main.c: 876: LATCbits.LC0 = 1;;
  8346  001BE6  808B               	bsf	3979,0,c	;volatile
  8347                           
  8348                           ;main.c: 877: LATEbits.LE2 = 0;;
  8349  001BE8  948D               	bcf	3981,2,c	;volatile
  8350  001BEA                     i2l4986:
  8351                           
  8352                           ; BSR set to: 0
  8353                           ;main.c: 878: }
  8354                           ;main.c: 879: plat2Right--;
  8355  001BEA  0100               	movlb	0	; () banked
  8356  001BEC  07C5               	decf	_plat2Right& (0+255),f,b
  8357  001BEE  A0D8               	btfss	status,0,c
  8358  001BF0  07C6               	decf	(_plat2Right+1)& (0+255),f,b
  8359                           
  8360                           ; BSR set to: 0
  8361                           ;main.c: 880: if (step2<=1)
  8362  001BF2  0E02               	movlw	2
  8363  001BF4  604E               	cpfslt	_step2,c
  8364  001BF6  D003               	goto	i2l4992
  8365                           
  8366                           ; BSR set to: 0
  8367                           ;main.c: 881: step2 = 4;
  8368  001BF8  0E04               	movlw	4
  8369  001BFA  6E4E               	movwf	_step2,c
  8370  001BFC  D001               	goto	i2l502
  8371  001BFE                     i2l4992:
  8372                           
  8373                           ; BSR set to: 0
  8374                           ;main.c: 882: else
  8375                           ;main.c: 883: step2--;
  8376  001BFE  064E               	decf	_step2,f,c
  8377  001C00                     i2l502:
  8378                           
  8379                           ; BSR set to: 0
  8380  001C00  C02F  FFF5         	movff	??_ISR+14,tablat
  8381  001C04  C02E  FFF8         	movff	??_ISR+13,tblptru
  8382  001C08  C02D  FFF7         	movff	??_ISR+12,tblptrh
  8383  001C0C  C02C  FFF6         	movff	??_ISR+11,tblptrl
  8384  001C10  C02B  FFF4         	movff	??_ISR+10,prodh
  8385  001C14  C02A  FFF3         	movff	??_ISR+9,prodl
  8386  001C18  C029  FFDA         	movff	??_ISR+8,fsr2h
  8387  001C1C  C028  FFD9         	movff	??_ISR+7,fsr2l
  8388  001C20  C027  FFE2         	movff	??_ISR+6,fsr1h
  8389  001C24  C026  FFE1         	movff	??_ISR+5,fsr1l
  8390  001C28  C025  FFEA         	movff	??_ISR+4,fsr0h
  8391  001C2C  C024  FFE9         	movff	??_ISR+3,fsr0l
  8392  001C30  C023  FFFB         	movff	??_ISR+2,pclatu
  8393  001C34  C022  FFFA         	movff	??_ISR+1,pclath
  8394  001C38  924F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  8395  001C3A  0011               	retfie		f
  8396  001C3C                     __end_of_ISR:
  8397                           	opt stack 0
  8398                           pclatu	equ	0xFFB
  8399                           pclath	equ	0xFFA
  8400                           tblptru	equ	0xFF8
  8401                           tblptrh	equ	0xFF7
  8402                           tblptrl	equ	0xFF6
  8403                           tablat	equ	0xFF5
  8404                           prodh	equ	0xFF4
  8405                           prodl	equ	0xFF3
  8406                           intcon	equ	0xFF2
  8407                           intcon2	equ	0xFF1
  8408                           intcon3	equ	0xFF0
  8409                           postinc0	equ	0xFEE
  8410                           fsr0h	equ	0xFEA
  8411                           fsr0l	equ	0xFE9
  8412                           wreg	equ	0xFE8
  8413                           fsr1h	equ	0xFE2
  8414                           fsr1l	equ	0xFE1
  8415                           indf2	equ	0xFDF
  8416                           postinc2	equ	0xFDE
  8417                           postdec2	equ	0xFDD
  8418                           fsr2h	equ	0xFDA
  8419                           fsr2l	equ	0xFD9
  8420                           status	equ	0xFD8
  8421                           
  8422 ;; *************** function _keypressed *****************
  8423 ;; Defined at:
  8424 ;;		line 407 in file "../main.c"
  8425 ;; Parameters:    Size  Location     Type
  8426 ;;  left            1    wreg     unsigned char 
  8427 ;;  right           1   28[COMRAM] unsigned char 
  8428 ;;  key             1   29[COMRAM] unsigned char 
  8429 ;; Auto vars:     Size  Location     Type
  8430 ;;  left            1   30[COMRAM] unsigned char 
  8431 ;;  i               1   31[COMRAM] unsigned char 
  8432 ;; Return value:  Size  Location     Type
  8433 ;;                  1    wreg      void 
  8434 ;; Registers used:
  8435 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8436 ;; Tracked objects:
  8437 ;;		On entry : 0/0
  8438 ;;		On exit  : 0/0
  8439 ;;		Unchanged: 0/0
  8440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8441 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8442 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8443 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8444 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8445 ;;Total ram usage:        4 bytes
  8446 ;; Hardware stack levels used:    1
  8447 ;; Hardware stack levels required when called:    3
  8448 ;; This function calls:
  8449 ;;		i2_I2C_Master_Read
  8450 ;;		i2_I2C_Master_Start
  8451 ;;		i2_I2C_Master_Stop
  8452 ;;		i2_I2C_Master_Write
  8453 ;;		i2_lcdInst
  8454 ;;		i2_printf
  8455 ;;		i2_stopOperation
  8456 ;; This function is called by:
  8457 ;;		_ISR
  8458 ;; This function uses a non-reentrant model
  8459 ;;
  8460                           
  8461                           	psect	text28
  8462  001E8C                     __ptext28:
  8463                           	opt stack 0
  8464  001E8C                     _keypressed:
  8465                           	opt stack 22
  8466                           
  8467                           ; BSR set to: 0
  8468                           ;incstack = 0
  8469                           ;keypressed@left stored from wreg
  8470  001E8C  6E1F               	movwf	keypressed@left,c
  8471                           
  8472                           ;main.c: 408: if (key == '*'){
  8473  001E8E  0E2A               	movlw	42
  8474  001E90  181E               	xorwf	keypressed@key,w,c
  8475  001E92  A4D8               	btfss	status,2,c
  8476  001E94  D053               	goto	i2l4364
  8477                           
  8478                           ;main.c: 410: if(screenMode == 2){
  8479  001E96  0E02               	movlw	2
  8480  001E98  0100               	movlb	0	; () banked
  8481  001E9A  19DC               	xorwf	_screenMode& (0+255),w,b
  8482  001E9C  A4D8               	btfss	status,2,c
  8483  001E9E  D046               	goto	i2l4360
  8484                           
  8485                           ; BSR set to: 0
  8486                           ;main.c: 411: screenMode = 1;
  8487  001EA0  0E01               	movlw	1
  8488  001EA2  0100               	movlb	0	; () banked
  8489  001EA4  6FDC               	movwf	_screenMode& (0+255),b
  8490                           
  8491                           ; BSR set to: 0
  8492                           ;main.c: 412: T0CONbits.TMR0ON = 1;
  8493  001EA6  8ED5               	bsf	4053,7,c	;volatile
  8494                           
  8495                           ; BSR set to: 0
  8496                           ;main.c: 413: T1CONbits.TMR1ON = 1;
  8497  001EA8  80CD               	bsf	4045,0,c	;volatile
  8498                           
  8499                           ;main.c: 414: startGear = 1;
  8500  001EAA  0E01               	movlw	1
  8501  001EAC  0100               	movlb	0	; () banked
  8502  001EAE  6FDB               	movwf	_startGear& (0+255),b
  8503                           
  8504                           ; BSR set to: 0
  8505                           ;main.c: 417: I2C_Master_Start();
  8506  001EB0  EC5B  F013         	call	i2_I2C_Master_Start	;wreg free
  8507                           
  8508                           ;main.c: 418: I2C_Master_Write(0b11010000);
  8509  001EB4  0E00               	movlw	0
  8510  001EB6  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8511  001EB8  0ED0               	movlw	208
  8512  001EBA  6E02               	movwf	i2I2C_Master_Write@d,c
  8513  001EBC  EC4A  F013         	call	i2_I2C_Master_Write	;wreg free
  8514                           
  8515                           ;main.c: 419: I2C_Master_Write(0x00);
  8516  001EC0  0E00               	movlw	0
  8517  001EC2  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8518  001EC4  0E00               	movlw	0
  8519  001EC6  6E02               	movwf	i2I2C_Master_Write@d,c
  8520  001EC8  EC4A  F013         	call	i2_I2C_Master_Write	;wreg free
  8521                           
  8522                           ;main.c: 420: I2C_Master_Stop();
  8523  001ECC  EC57  F013         	call	i2_I2C_Master_Stop	;wreg free
  8524                           
  8525                           ;main.c: 422: I2C_Master_Start();
  8526  001ED0  EC5B  F013         	call	i2_I2C_Master_Start	;wreg free
  8527                           
  8528                           ;main.c: 423: I2C_Master_Write(0b11010001);
  8529  001ED4  0E00               	movlw	0
  8530  001ED6  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8531  001ED8  0ED1               	movlw	209
  8532  001EDA  6E02               	movwf	i2I2C_Master_Write@d,c
  8533  001EDC  EC4A  F013         	call	i2_I2C_Master_Write	;wreg free
  8534                           
  8535                           ;main.c: 424: for(unsigned char i=0;i<0x06;i++){
  8536  001EE0  0E00               	movlw	0
  8537  001EE2  6E20               	movwf	keypressed@i,c
  8538  001EE4                     i2l4344:
  8539  001EE4  0E05               	movlw	5
  8540  001EE6  6420               	cpfsgt	keypressed@i,c
  8541  001EE8  D001               	goto	i2l4348
  8542  001EEA  D00E               	goto	i2l4354
  8543  001EEC                     i2l4348:
  8544                           
  8545                           ;main.c: 425: lastRunRTC[i] = I2C_Master_Read(1);
  8546  001EEC  5020               	movf	keypressed@i,w,c
  8547  001EEE  0D01               	mullw	1
  8548  001EF0  0EB1               	movlw	low _lastRunRTC
  8549  001EF2  24F3               	addwf	prodl,w,c
  8550  001EF4  6ED9               	movwf	fsr2l,c
  8551  001EF6  0E00               	movlw	high _lastRunRTC
  8552  001EF8  20F4               	addwfc	prodh,w,c
  8553  001EFA  6EDA               	movwf	fsr2h,c
  8554  001EFC  0E01               	movlw	1
  8555  001EFE  ECAF  F012         	call	i2_I2C_Master_Read
  8556  001F02  6EDF               	movwf	indf2,c
  8557  001F04  2A20               	incf	keypressed@i,f,c
  8558  001F06  D7EE               	goto	i2l4344
  8559  001F08                     i2l4354:
  8560                           
  8561                           ;main.c: 426: }
  8562                           ;main.c: 427: lastRunRTC[6] = I2C_Master_Read(0);
  8563  001F08  0E00               	movlw	0
  8564  001F0A  ECAF  F012         	call	i2_I2C_Master_Read
  8565  001F0E  0100               	movlb	0	; () banked
  8566  001F10  6FB7               	movwf	(_lastRunRTC+6)& (0+255),b
  8567                           
  8568                           ;main.c: 428: I2C_Master_Stop();
  8569  001F12  EC57  F013         	call	i2_I2C_Master_Stop	;wreg free
  8570                           
  8571                           ;main.c: 430: lcdInst(0b10000000);;
  8572  001F16  0E80               	movlw	128
  8573  001F18  EC3F  F013         	call	i2_lcdInst
  8574                           
  8575                           ;main.c: 431: printf("RUNNING: 00:00  ");
  8576  001F1C  0E56               	movlw	low STR_32
  8577  001F1E  6E0D               	movwf	i2printf@f,c
  8578  001F20  0EFF               	movlw	high STR_32
  8579  001F22  6E0E               	movwf	i2printf@f+1,c
  8580  001F24  ECD4  F006         	call	i2_printf	;wreg free
  8581                           
  8582                           ;main.c: 432: LATBbits.LB0 = 1;;
  8583  001F28  808A               	bsf	3978,0,c	;volatile
  8584                           
  8585                           ;main.c: 433: }
  8586  001F2A  0012               	return	
  8587  001F2C                     i2l4360:
  8588                           
  8589                           ;main.c: 434: else if (screenMode == 0)
  8590  001F2C  0100               	movlb	0	; () banked
  8591  001F2E  51DC               	movf	_screenMode& (0+255),w,b
  8592  001F30  A4D8               	btfss	status,2,c
  8593  001F32  0012               	return	
  8594                           
  8595                           ; BSR set to: 0
  8596                           ;main.c: 435: screenMode = 2;
  8597  001F34  0E02               	movlw	2
  8598  001F36  0100               	movlb	0	; () banked
  8599  001F38  6FDC               	movwf	_screenMode& (0+255),b
  8600                           
  8601                           ; BSR set to: 0
  8602                           ;main.c: 436: }
  8603                           
  8604                           ; BSR set to: 0
  8605  001F3A  0012               	return	
  8606  001F3C                     i2l4364:
  8607                           
  8608                           ;main.c: 437: else if (screenMode == 1){
  8609  001F3C  0100               	movlb	0	; () banked
  8610  001F3E  05DC               	decf	_screenMode& (0+255),w,b
  8611  001F40  A4D8               	btfss	status,2,c
  8612  001F42  D007               	goto	i2l4370
  8613                           
  8614                           ; BSR set to: 0
  8615                           ;main.c: 438: if (key == '#')
  8616  001F44  0E23               	movlw	35
  8617  001F46  181E               	xorwf	keypressed@key,w,c
  8618  001F48  A4D8               	btfss	status,2,c
  8619  001F4A  0012               	return	
  8620                           
  8621                           ; BSR set to: 0
  8622                           ;main.c: 440: stopOperation();
  8623  001F4C  EC54  F00B         	call	i2_stopOperation	;wreg free
  8624                           
  8625                           ;main.c: 441: }
  8626  001F50  0012               	return	
  8627  001F52                     i2l4370:
  8628                           
  8629                           ;main.c: 442: else if (screenMode != 0){
  8630  001F52  0100               	movlb	0	; () banked
  8631  001F54  51DC               	movf	_screenMode& (0+255),w,b
  8632  001F56  B4D8               	btfsc	status,2,c
  8633  001F58  0012               	return	
  8634                           
  8635                           ; BSR set to: 0
  8636                           ;main.c: 443: if (key == right){
  8637  001F5A  501D               	movf	keypressed@right,w,c
  8638  001F5C  181E               	xorwf	keypressed@key,w,c
  8639  001F5E  A4D8               	btfss	status,2,c
  8640  001F60  D00C               	goto	i2l4380
  8641                           
  8642                           ; BSR set to: 0
  8643                           ;main.c: 444: if (screenMode == 2)
  8644  001F62  0E02               	movlw	2
  8645  001F64  0100               	movlb	0	; () banked
  8646  001F66  19DC               	xorwf	_screenMode& (0+255),w,b
  8647  001F68  A4D8               	btfss	status,2,c
  8648  001F6A  D004               	goto	i2l4378
  8649                           
  8650                           ; BSR set to: 0
  8651                           ;main.c: 445: screenMode = 14;
  8652  001F6C  0E0E               	movlw	14
  8653  001F6E  0100               	movlb	0	; () banked
  8654  001F70  6FDC               	movwf	_screenMode& (0+255),b
  8655  001F72  0012               	return	
  8656  001F74                     i2l4378:
  8657                           
  8658                           ; BSR set to: 0
  8659                           ;main.c: 446: else
  8660                           ;main.c: 447: screenMode--;
  8661  001F74  0100               	movlb	0	; () banked
  8662  001F76  07DC               	decf	_screenMode& (0+255),f,b
  8663                           
  8664                           ; BSR set to: 0
  8665                           ;main.c: 448: }
  8666  001F78  0012               	return	
  8667  001F7A                     i2l4380:
  8668                           
  8669                           ; BSR set to: 0
  8670                           ;main.c: 449: else if (key == left){
  8671  001F7A  501F               	movf	keypressed@left,w,c
  8672  001F7C  181E               	xorwf	keypressed@key,w,c
  8673  001F7E  A4D8               	btfss	status,2,c
  8674  001F80  0012               	return	
  8675                           
  8676                           ; BSR set to: 0
  8677                           ;main.c: 450: if (screenMode == 14)
  8678  001F82  0E0E               	movlw	14
  8679  001F84  0100               	movlb	0	; () banked
  8680  001F86  19DC               	xorwf	_screenMode& (0+255),w,b
  8681  001F88  A4D8               	btfss	status,2,c
  8682  001F8A  D004               	goto	i2l4386
  8683                           
  8684                           ; BSR set to: 0
  8685                           ;main.c: 451: screenMode = 2;
  8686  001F8C  0E02               	movlw	2
  8687  001F8E  0100               	movlb	0	; () banked
  8688  001F90  6FDC               	movwf	_screenMode& (0+255),b
  8689  001F92  0012               	return	
  8690  001F94                     i2l4386:
  8691                           
  8692                           ; BSR set to: 0
  8693                           ;main.c: 452: else
  8694                           ;main.c: 453: screenMode++;
  8695  001F94  0100               	movlb	0	; () banked
  8696  001F96  2BDC               	incf	_screenMode& (0+255),f,b
  8697                           
  8698                           ; BSR set to: 0
  8699                           
  8700                           ; BSR set to: 0
  8701                           
  8702                           ; BSR set to: 0
  8703                           
  8704                           ; BSR set to: 0
  8705                           
  8706                           ; BSR set to: 0
  8707  001F98  0012               	return	
  8708  001F9A                     __end_of_keypressed:
  8709                           	opt stack 0
  8710                           pclatu	equ	0xFFB
  8711                           pclath	equ	0xFFA
  8712                           tblptru	equ	0xFF8
  8713                           tblptrh	equ	0xFF7
  8714                           tblptrl	equ	0xFF6
  8715                           tablat	equ	0xFF5
  8716                           prodh	equ	0xFF4
  8717                           prodl	equ	0xFF3
  8718                           intcon	equ	0xFF2
  8719                           intcon2	equ	0xFF1
  8720                           intcon3	equ	0xFF0
  8721                           postinc0	equ	0xFEE
  8722                           fsr0h	equ	0xFEA
  8723                           fsr0l	equ	0xFE9
  8724                           wreg	equ	0xFE8
  8725                           fsr1h	equ	0xFE2
  8726                           fsr1l	equ	0xFE1
  8727                           indf2	equ	0xFDF
  8728                           postinc2	equ	0xFDE
  8729                           postdec2	equ	0xFDD
  8730                           fsr2h	equ	0xFDA
  8731                           fsr2l	equ	0xFD9
  8732                           status	equ	0xFD8
  8733                           
  8734 ;; *************** function i2_stopOperation *****************
  8735 ;; Defined at:
  8736 ;;		line 466 in file "../main.c"
  8737 ;; Parameters:    Size  Location     Type
  8738 ;;		None
  8739 ;; Auto vars:     Size  Location     Type
  8740 ;;  stopOperatio    2    9[COMRAM] unsigned int 
  8741 ;;  stopOperatio    1    8[COMRAM] unsigned char 
  8742 ;; Return value:  Size  Location     Type
  8743 ;;                  1    wreg      void 
  8744 ;; Registers used:
  8745 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8746 ;; Tracked objects:
  8747 ;;		On entry : 0/0
  8748 ;;		On exit  : 0/0
  8749 ;;		Unchanged: 0/0
  8750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8751 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8752 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8753 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8754 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8755 ;;Total ram usage:        3 bytes
  8756 ;; Hardware stack levels used:    1
  8757 ;; Hardware stack levels required when called:    1
  8758 ;; This function calls:
  8759 ;;		i2_Eeprom_ReadByte
  8760 ;;		i2_Eeprom_WriteByte
  8761 ;;		i2___awdiv
  8762 ;;		i2___awmod
  8763 ;;		i2_next_address
  8764 ;; This function is called by:
  8765 ;;		_keypressed
  8766 ;;		_ISR
  8767 ;; This function uses a non-reentrant model
  8768 ;;
  8769                           
  8770                           	psect	text29
  8771  0016A8                     __ptext29:
  8772                           	opt stack 0
  8773  0016A8                     i2_stopOperation:
  8774                           	opt stack 24
  8775                           
  8776                           ;main.c: 467: T0CONbits.TMR0ON = 0;
  8777                           
  8778                           ;incstack = 0
  8779  0016A8  9ED5               	bcf	4053,7,c	;volatile
  8780                           
  8781                           ;main.c: 468: T1CONbits.TMR1ON = 0;
  8782  0016AA  90CD               	bcf	4045,0,c	;volatile
  8783                           
  8784                           ;main.c: 469: TMR0 = 55770;
  8785  0016AC  0ED9               	movlw	217
  8786  0016AE  6ED7               	movwf	4055,c	;volatile
  8787  0016B0  0EDA               	movlw	218
  8788  0016B2  6ED6               	movwf	4054,c	;volatile
  8789                           
  8790                           ;main.c: 470: TMR1 = 60535;
  8791  0016B4  0EEC               	movlw	236
  8792  0016B6  6ECF               	movwf	4047,c	;volatile
  8793  0016B8  0E77               	movlw	119
  8794  0016BA  6ECE               	movwf	4046,c	;volatile
  8795                           
  8796                           ;main.c: 472: num9V = count9V;
  8797  0016BC  C0CF  F0D5         	movff	_count9V,_num9V
  8798                           
  8799                           ;main.c: 473: numC = countC;
  8800  0016C0  C0D1  F0D8         	movff	_countC,_numC
  8801                           
  8802                           ;main.c: 474: numAA = countAA;
  8803  0016C4  C0D0  F0D6         	movff	_countAA,_numAA
  8804                           
  8805                           ;main.c: 475: numDrain = countDrain;
  8806  0016C8  C0D2  F0D9         	movff	_countDrain,_numDrain
  8807                           
  8808                           ;main.c: 476: numBats = count9V + countC + countAA + countDrain;
  8809  0016CC  0100               	movlb	0	; () banked
  8810  0016CE  51CF               	movf	_count9V& (0+255),w,b
  8811  0016D0  0100               	movlb	0	; () banked
  8812  0016D2  25D1               	addwf	_countC& (0+255),w,b
  8813  0016D4  0100               	movlb	0	; () banked
  8814  0016D6  25D0               	addwf	_countAA& (0+255),w,b
  8815  0016D8  0100               	movlb	0	; () banked
  8816  0016DA  25D2               	addwf	_countDrain& (0+255),w,b
  8817  0016DC  0100               	movlb	0	; () banked
  8818  0016DE  6FD7               	movwf	_numBats& (0+255),b
  8819                           
  8820                           ; BSR set to: 0
  8821                           ;main.c: 478: unsigned char address_code = Eeprom_ReadByte(0);
  8822  0016E0  0E00               	movlw	0
  8823  0016E2  6E02               	movwf	i2Eeprom_ReadByte@address+1,c
  8824  0016E4  0E00               	movlw	0
  8825  0016E6  6E01               	movwf	i2Eeprom_ReadByte@address,c
  8826  0016E8  ECF8  F012         	call	i2_Eeprom_ReadByte	;wreg free
  8827  0016EC  6E09               	movwf	i2stopOperation@address_code,c
  8828                           
  8829                           ;main.c: 479: uint16_t address = address_code * 96 + 1;
  8830  0016EE  5009               	movf	i2stopOperation@address_code,w,c
  8831  0016F0  0D60               	mullw	96
  8832  0016F2  0E01               	movlw	1
  8833  0016F4  24F3               	addwf	prodl,w,c
  8834  0016F6  6E0A               	movwf	i2stopOperation@address,c
  8835  0016F8  0E00               	movlw	0
  8836  0016FA  20F4               	addwfc	prodh,w,c
  8837  0016FC  6E0B               	movwf	i2stopOperation@address+1,c
  8838                           
  8839                           ;main.c: 480: Eeprom_WriteByte(address, lastRunRTC[6]);
  8840  0016FE  C00A  F001         	movff	i2stopOperation@address,i2Eeprom_WriteByte@address
  8841  001702  C00B  F002         	movff	i2stopOperation@address+1,i2Eeprom_WriteByte@address+1
  8842  001706  C0B7  F003         	movff	_lastRunRTC+6,i2Eeprom_WriteByte@data
  8843  00170A  EC89  F012         	call	i2_Eeprom_WriteByte	;wreg free
  8844                           
  8845                           ;main.c: 481: address = next_address(address);
  8846  00170E  C00A  F001         	movff	i2stopOperation@address,i2next_address@address
  8847  001712  C00B  F002         	movff	i2stopOperation@address+1,i2next_address@address+1
  8848  001716  EC26  F013         	call	i2_next_address	;wreg free
  8849  00171A  C001  F00A         	movff	?i2_next_address,i2stopOperation@address
  8850  00171E  C002  F00B         	movff	?i2_next_address+1,i2stopOperation@address+1
  8851                           
  8852                           ;main.c: 482: Eeprom_WriteByte(address, lastRunRTC[5]);
  8853  001722  C00A  F001         	movff	i2stopOperation@address,i2Eeprom_WriteByte@address
  8854  001726  C00B  F002         	movff	i2stopOperation@address+1,i2Eeprom_WriteByte@address+1
  8855  00172A  C0B6  F003         	movff	_lastRunRTC+5,i2Eeprom_WriteByte@data
  8856  00172E  EC89  F012         	call	i2_Eeprom_WriteByte	;wreg free
  8857                           
  8858                           ;main.c: 483: address = next_address(address);
  8859  001732  C00A  F001         	movff	i2stopOperation@address,i2next_address@address
  8860  001736  C00B  F002         	movff	i2stopOperation@address+1,i2next_address@address+1
  8861  00173A  EC26  F013         	call	i2_next_address	;wreg free
  8862  00173E  C001  F00A         	movff	?i2_next_address,i2stopOperation@address
  8863  001742  C002  F00B         	movff	?i2_next_address+1,i2stopOperation@address+1
  8864                           
  8865                           ;main.c: 484: Eeprom_WriteByte(address, lastRunRTC[4]);
  8866  001746  C00A  F001         	movff	i2stopOperation@address,i2Eeprom_WriteByte@address
  8867  00174A  C00B  F002         	movff	i2stopOperation@address+1,i2Eeprom_WriteByte@address+1
  8868  00174E  C0B5  F003         	movff	_lastRunRTC+4,i2Eeprom_WriteByte@data
  8869  001752  EC89  F012         	call	i2_Eeprom_WriteByte	;wreg free
  8870                           
  8871                           ;main.c: 485: address = next_address(address);
  8872  001756  C00A  F001         	movff	i2stopOperation@address,i2next_address@address
  8873  00175A  C00B  F002         	movff	i2stopOperation@address+1,i2next_address@address+1
  8874  00175E  EC26  F013         	call	i2_next_address	;wreg free
  8875  001762  C001  F00A         	movff	?i2_next_address,i2stopOperation@address
  8876  001766  C002  F00B         	movff	?i2_next_address+1,i2stopOperation@address+1
  8877                           
  8878                           ;main.c: 486: Eeprom_WriteByte(address, lastRunRTC[2]);
  8879  00176A  C00A  F001         	movff	i2stopOperation@address,i2Eeprom_WriteByte@address
  8880  00176E  C00B  F002         	movff	i2stopOperation@address+1,i2Eeprom_WriteByte@address+1
  8881  001772  C0B3  F003         	movff	_lastRunRTC+2,i2Eeprom_WriteByte@data
  8882  001776  EC89  F012         	call	i2_Eeprom_WriteByte	;wreg free
  8883                           
  8884                           ;main.c: 487: address = next_address(address);
  8885  00177A  C00A  F001         	movff	i2stopOperation@address,i2next_address@address
  8886  00177E  C00B  F002         	movff	i2stopOperation@address+1,i2next_address@address+1
  8887  001782  EC26  F013         	call	i2_next_address	;wreg free
  8888  001786  C001  F00A         	movff	?i2_next_address,i2stopOperation@address
  8889  00178A  C002  F00B         	movff	?i2_next_address+1,i2stopOperation@address+1
  8890                           
  8891                           ;main.c: 488: Eeprom_WriteByte(address, lastRunRTC[1]);
  8892  00178E  C00A  F001         	movff	i2stopOperation@address,i2Eeprom_WriteByte@address
  8893  001792  C00B  F002         	movff	i2stopOperation@address+1,i2Eeprom_WriteByte@address+1
  8894  001796  C0B2  F003         	movff	_lastRunRTC+1,i2Eeprom_WriteByte@data
  8895  00179A  EC89  F012         	call	i2_Eeprom_WriteByte	;wreg free
  8896                           
  8897                           ;main.c: 489: address = next_address(address);
  8898  00179E  C00A  F001         	movff	i2stopOperation@address,i2next_address@address
  8899  0017A2  C00B  F002         	movff	i2stopOperation@address+1,i2next_address@address+1
  8900  0017A6  EC26  F013         	call	i2_next_address	;wreg free
  8901  0017AA  C001  F00A         	movff	?i2_next_address,i2stopOperation@address
  8902  0017AE  C002  F00B         	movff	?i2_next_address+1,i2stopOperation@address+1
  8903                           
  8904                           ;main.c: 490: Eeprom_WriteByte(address, lastRunRTC[0]);
  8905  0017B2  C00A  F001         	movff	i2stopOperation@address,i2Eeprom_WriteByte@address
  8906  0017B6  C00B  F002         	movff	i2stopOperation@address+1,i2Eeprom_WriteByte@address+1
  8907  0017BA  C0B1  F003         	movff	_lastRunRTC,i2Eeprom_WriteByte@data
  8908  0017BE  EC89  F012         	call	i2_Eeprom_WriteByte	;wreg free
  8909                           
  8910                           ;main.c: 491: address = next_address(address);
  8911  0017C2  C00A  F001         	movff	i2stopOperation@address,i2next_address@address
  8912  0017C6  C00B  F002         	movff	i2stopOperation@address+1,i2next_address@address+1
  8913  0017CA  EC26  F013         	call	i2_next_address	;wreg free
  8914  0017CE  C001  F00A         	movff	?i2_next_address,i2stopOperation@address
  8915  0017D2  C002  F00B         	movff	?i2_next_address+1,i2stopOperation@address+1
  8916                           
  8917                           ;main.c: 493: Eeprom_WriteByte(address, countAA);
  8918  0017D6  C00A  F001         	movff	i2stopOperation@address,i2Eeprom_WriteByte@address
  8919  0017DA  C00B  F002         	movff	i2stopOperation@address+1,i2Eeprom_WriteByte@address+1
  8920  0017DE  C0D0  F003         	movff	_countAA,i2Eeprom_WriteByte@data
  8921  0017E2  EC89  F012         	call	i2_Eeprom_WriteByte	;wreg free
  8922                           
  8923                           ;main.c: 494: address = next_address(address);
  8924  0017E6  C00A  F001         	movff	i2stopOperation@address,i2next_address@address
  8925  0017EA  C00B  F002         	movff	i2stopOperation@address+1,i2next_address@address+1
  8926  0017EE  EC26  F013         	call	i2_next_address	;wreg free
  8927  0017F2  C001  F00A         	movff	?i2_next_address,i2stopOperation@address
  8928  0017F6  C002  F00B         	movff	?i2_next_address+1,i2stopOperation@address+1
  8929                           
  8930                           ;main.c: 495: Eeprom_WriteByte(address, countC);
  8931  0017FA  C00A  F001         	movff	i2stopOperation@address,i2Eeprom_WriteByte@address
  8932  0017FE  C00B  F002         	movff	i2stopOperation@address+1,i2Eeprom_WriteByte@address+1
  8933  001802  C0D1  F003         	movff	_countC,i2Eeprom_WriteByte@data
  8934  001806  EC89  F012         	call	i2_Eeprom_WriteByte	;wreg free
  8935                           
  8936                           ;main.c: 496: address = next_address(address);
  8937  00180A  C00A  F001         	movff	i2stopOperation@address,i2next_address@address
  8938  00180E  C00B  F002         	movff	i2stopOperation@address+1,i2next_address@address+1
  8939  001812  EC26  F013         	call	i2_next_address	;wreg free
  8940  001816  C001  F00A         	movff	?i2_next_address,i2stopOperation@address
  8941  00181A  C002  F00B         	movff	?i2_next_address+1,i2stopOperation@address+1
  8942                           
  8943                           ;main.c: 497: Eeprom_WriteByte(address, count9V);
  8944  00181E  C00A  F001         	movff	i2stopOperation@address,i2Eeprom_WriteByte@address
  8945  001822  C00B  F002         	movff	i2stopOperation@address+1,i2Eeprom_WriteByte@address+1
  8946  001826  C0CF  F003         	movff	_count9V,i2Eeprom_WriteByte@data
  8947  00182A  EC89  F012         	call	i2_Eeprom_WriteByte	;wreg free
  8948                           
  8949                           ;main.c: 498: address = next_address(address);
  8950  00182E  C00A  F001         	movff	i2stopOperation@address,i2next_address@address
  8951  001832  C00B  F002         	movff	i2stopOperation@address+1,i2next_address@address+1
  8952  001836  EC26  F013         	call	i2_next_address	;wreg free
  8953  00183A  C001  F00A         	movff	?i2_next_address,i2stopOperation@address
  8954  00183E  C002  F00B         	movff	?i2_next_address+1,i2stopOperation@address+1
  8955                           
  8956                           ;main.c: 499: Eeprom_WriteByte(address, countDrain);
  8957  001842  C00A  F001         	movff	i2stopOperation@address,i2Eeprom_WriteByte@address
  8958  001846  C00B  F002         	movff	i2stopOperation@address+1,i2Eeprom_WriteByte@address+1
  8959  00184A  C0D2  F003         	movff	_countDrain,i2Eeprom_WriteByte@data
  8960  00184E  EC89  F012         	call	i2_Eeprom_WriteByte	;wreg free
  8961                           
  8962                           ;main.c: 500: address = next_address(address);
  8963  001852  C00A  F001         	movff	i2stopOperation@address,i2next_address@address
  8964  001856  C00B  F002         	movff	i2stopOperation@address+1,i2next_address@address+1
  8965  00185A  EC26  F013         	call	i2_next_address	;wreg free
  8966  00185E  C001  F00A         	movff	?i2_next_address,i2stopOperation@address
  8967  001862  C002  F00B         	movff	?i2_next_address+1,i2stopOperation@address+1
  8968                           
  8969                           ;main.c: 501: Eeprom_WriteByte(address, numBats);
  8970  001866  C00A  F001         	movff	i2stopOperation@address,i2Eeprom_WriteByte@address
  8971  00186A  C00B  F002         	movff	i2stopOperation@address+1,i2Eeprom_WriteByte@address+1
  8972  00186E  C0D7  F003         	movff	_numBats,i2Eeprom_WriteByte@data
  8973  001872  EC89  F012         	call	i2_Eeprom_WriteByte	;wreg free
  8974                           
  8975                           ;main.c: 502: address = next_address(address);
  8976  001876  C00A  F001         	movff	i2stopOperation@address,i2next_address@address
  8977  00187A  C00B  F002         	movff	i2stopOperation@address+1,i2next_address@address+1
  8978  00187E  EC26  F013         	call	i2_next_address	;wreg free
  8979  001882  C001  F00A         	movff	?i2_next_address,i2stopOperation@address
  8980  001886  C002  F00B         	movff	?i2_next_address+1,i2stopOperation@address+1
  8981                           
  8982                           ;main.c: 503: Eeprom_WriteByte(address, opTimer);
  8983  00188A  C00A  F001         	movff	i2stopOperation@address,i2Eeprom_WriteByte@address
  8984  00188E  C00B  F002         	movff	i2stopOperation@address+1,i2Eeprom_WriteByte@address+1
  8985  001892  C04A  F003         	movff	_opTimer,i2Eeprom_WriteByte@data
  8986  001896  EC89  F012         	call	i2_Eeprom_WriteByte	;wreg free
  8987                           
  8988                           ;main.c: 505: address_code++;
  8989  00189A  2A09               	incf	i2stopOperation@address_code,f,c
  8990                           
  8991                           ;main.c: 506: if (address_code > 3)
  8992  00189C  0E03               	movlw	3
  8993  00189E  6409               	cpfsgt	i2stopOperation@address_code,c
  8994  0018A0  D009               	goto	i2l3742
  8995                           
  8996                           ;main.c: 507: Eeprom_WriteByte(0, 0);
  8997  0018A2  0E00               	movlw	0
  8998  0018A4  6E02               	movwf	i2Eeprom_WriteByte@address+1,c
  8999  0018A6  0E00               	movlw	0
  9000  0018A8  6E01               	movwf	i2Eeprom_WriteByte@address,c
  9001  0018AA  0E00               	movlw	0
  9002  0018AC  6E03               	movwf	i2Eeprom_WriteByte@data,c
  9003  0018AE  EC89  F012         	call	i2_Eeprom_WriteByte	;wreg free
  9004  0018B2  D008               	goto	i2l3744
  9005  0018B4                     i2l3742:
  9006                           
  9007                           ;main.c: 508: else
  9008                           ;main.c: 509: Eeprom_WriteByte(0, address_code);
  9009  0018B4  0E00               	movlw	0
  9010  0018B6  6E02               	movwf	i2Eeprom_WriteByte@address+1,c
  9011  0018B8  0E00               	movlw	0
  9012  0018BA  6E01               	movwf	i2Eeprom_WriteByte@address,c
  9013  0018BC  C009  F003         	movff	i2stopOperation@address_code,i2Eeprom_WriteByte@data
  9014  0018C0  EC89  F012         	call	i2_Eeprom_WriteByte	;wreg free
  9015  0018C4                     i2l3744:
  9016                           
  9017                           ;main.c: 511: count9V = 0;
  9018  0018C4  0E00               	movlw	0
  9019  0018C6  0100               	movlb	0	; () banked
  9020  0018C8  6FCF               	movwf	_count9V& (0+255),b
  9021                           
  9022                           ; BSR set to: 0
  9023                           ;main.c: 512: countC = 0;
  9024  0018CA  0E00               	movlw	0
  9025  0018CC  0100               	movlb	0	; () banked
  9026  0018CE  6FD1               	movwf	_countC& (0+255),b
  9027                           
  9028                           ; BSR set to: 0
  9029                           ;main.c: 513: countAA = 0;
  9030  0018D0  0E00               	movlw	0
  9031  0018D2  0100               	movlb	0	; () banked
  9032  0018D4  6FD0               	movwf	_countAA& (0+255),b
  9033                           
  9034                           ; BSR set to: 0
  9035                           ;main.c: 514: countDrain = 0;
  9036  0018D6  0E00               	movlw	0
  9037  0018D8  0100               	movlb	0	; () banked
  9038  0018DA  6FD2               	movwf	_countDrain& (0+255),b
  9039                           
  9040                           ; BSR set to: 0
  9041                           ;main.c: 515: min = opTimer / 60;
  9042  0018DC  C04A  F001         	movff	_opTimer,i2___awdiv@dividend
  9043  0018E0  6A02               	clrf	i2___awdiv@dividend+1,c
  9044  0018E2  0E00               	movlw	0
  9045  0018E4  6E04               	movwf	i2___awdiv@divisor+1,c
  9046  0018E6  0E3C               	movlw	60
  9047  0018E8  6E03               	movwf	i2___awdiv@divisor,c
  9048  0018EA  EC0F  F010         	call	i2___awdiv	;wreg free
  9049  0018EE  5001               	movf	?i2___awdiv,w,c
  9050  0018F0  0100               	movlb	0	; () banked
  9051  0018F2  6FD4               	movwf	_min& (0+255),b
  9052                           
  9053                           ; BSR set to: 0
  9054                           ;main.c: 516: sec = opTimer % 60;
  9055  0018F4  C04A  F001         	movff	_opTimer,i2___awmod@dividend
  9056  0018F8  6A02               	clrf	i2___awmod@dividend+1,c
  9057  0018FA  0E00               	movlw	0
  9058  0018FC  6E04               	movwf	i2___awmod@divisor+1,c
  9059  0018FE  0E3C               	movlw	60
  9060  001900  6E03               	movwf	i2___awmod@divisor,c
  9061  001902  ECCA  F010         	call	i2___awmod	;wreg free
  9062  001906  5001               	movf	?i2___awmod,w,c
  9063  001908  0100               	movlb	0	; () banked
  9064  00190A  6FDA               	movwf	_sec& (0+255),b
  9065                           
  9066                           ; BSR set to: 0
  9067                           ;main.c: 517: opTimer = 0;
  9068  00190C  0E00               	movlw	0
  9069  00190E  6E4A               	movwf	_opTimer,c
  9070                           
  9071                           ; BSR set to: 0
  9072                           ;main.c: 518: doneTimer = 0;
  9073  001910  0E00               	movlw	0
  9074  001912  6E49               	movwf	_doneTimer,c
  9075                           
  9076                           ; BSR set to: 0
  9077                           ;main.c: 519: sorting = 0;
  9078  001914  0E00               	movlw	0
  9079  001916  6E4C               	movwf	_sorting,c
  9080                           
  9081                           ; BSR set to: 0
  9082                           ;main.c: 520: plat1Left = 0;
  9083  001918  0E00               	movlw	0
  9084  00191A  0100               	movlb	0	; () banked
  9085  00191C  6FC0               	movwf	(_plat1Left+1)& (0+255),b
  9086  00191E  0E00               	movlw	0
  9087  001920  6FBF               	movwf	_plat1Left& (0+255),b
  9088                           
  9089                           ; BSR set to: 0
  9090                           ;main.c: 521: plat1Right = 0;
  9091  001922  0E00               	movlw	0
  9092  001924  0100               	movlb	0	; () banked
  9093  001926  6FC2               	movwf	(_plat1Right+1)& (0+255),b
  9094  001928  0E00               	movlw	0
  9095  00192A  6FC1               	movwf	_plat1Right& (0+255),b
  9096                           
  9097                           ; BSR set to: 0
  9098                           ;main.c: 522: plat2Left = 0;
  9099  00192C  0E00               	movlw	0
  9100  00192E  0100               	movlb	0	; () banked
  9101  001930  6FC4               	movwf	(_plat2Left+1)& (0+255),b
  9102  001932  0E00               	movlw	0
  9103  001934  6FC3               	movwf	_plat2Left& (0+255),b
  9104                           
  9105                           ; BSR set to: 0
  9106                           ;main.c: 523: plat2Right = 0;
  9107  001936  0E00               	movlw	0
  9108  001938  0100               	movlb	0	; () banked
  9109  00193A  6FC6               	movwf	(_plat2Right+1)& (0+255),b
  9110  00193C  0E00               	movlw	0
  9111  00193E  6FC5               	movwf	_plat2Right& (0+255),b
  9112                           
  9113                           ; BSR set to: 0
  9114                           ;main.c: 524: turn2BackLeft = 0;
  9115  001940  0E00               	movlw	0
  9116  001942  0100               	movlb	0	; () banked
  9117  001944  6FCC               	movwf	(_turn2BackLeft+1)& (0+255),b
  9118  001946  0E00               	movlw	0
  9119  001948  6FCB               	movwf	_turn2BackLeft& (0+255),b
  9120                           
  9121                           ; BSR set to: 0
  9122                           ;main.c: 525: turn1BackLeft = 0;
  9123  00194A  0E00               	movlw	0
  9124  00194C  0100               	movlb	0	; () banked
  9125  00194E  6FC8               	movwf	(_turn1BackLeft+1)& (0+255),b
  9126  001950  0E00               	movlw	0
  9127  001952  6FC7               	movwf	_turn1BackLeft& (0+255),b
  9128                           
  9129                           ; BSR set to: 0
  9130                           ;main.c: 526: turn2BackRight = 0;
  9131  001954  0E00               	movlw	0
  9132  001956  0100               	movlb	0	; () banked
  9133  001958  6FCE               	movwf	(_turn2BackRight+1)& (0+255),b
  9134  00195A  0E00               	movlw	0
  9135  00195C  6FCD               	movwf	_turn2BackRight& (0+255),b
  9136                           
  9137                           ; BSR set to: 0
  9138                           ;main.c: 527: turn1BackRight = 0;
  9139  00195E  0E00               	movlw	0
  9140  001960  0100               	movlb	0	; () banked
  9141  001962  6FCA               	movwf	(_turn1BackRight+1)& (0+255),b
  9142  001964  0E00               	movlw	0
  9143  001966  6FC9               	movwf	_turn1BackRight& (0+255),b
  9144                           
  9145                           ; BSR set to: 0
  9146                           ;main.c: 528: count_2ms = 0;
  9147  001968  0E00               	movlw	0
  9148  00196A  6E48               	movwf	_count_2ms+1,c
  9149  00196C  0E00               	movlw	0
  9150  00196E  6E47               	movwf	_count_2ms,c
  9151                           
  9152                           ; BSR set to: 0
  9153                           ;main.c: 529: doubleAA = 0;
  9154  001970  0E00               	movlw	0
  9155  001972  0100               	movlb	0	; () banked
  9156  001974  6FD3               	movwf	_doubleAA& (0+255),b
  9157                           
  9158                           ; BSR set to: 0
  9159                           ;main.c: 530: solOnTimer = 0;
  9160  001976  0E00               	movlw	0
  9161  001978  6E4B               	movwf	_solOnTimer,c
  9162                           
  9163                           ; BSR set to: 0
  9164                           ;main.c: 532: LATCbits.LC1 = 0;;
  9165  00197A  928B               	bcf	3979,1,c	;volatile
  9166                           
  9167                           ; BSR set to: 0
  9168                           ;main.c: 533: LATCbits.LC2 = 0;;
  9169  00197C  948B               	bcf	3979,2,c	;volatile
  9170                           
  9171                           ; BSR set to: 0
  9172                           ;main.c: 534: LATCbits.LC6 = 0;;
  9173  00197E  9C8B               	bcf	3979,6,c	;volatile
  9174                           
  9175                           ; BSR set to: 0
  9176                           ;main.c: 535: LATCbits.LC5 = 0;;
  9177  001980  9A8B               	bcf	3979,5,c	;volatile
  9178                           
  9179                           ; BSR set to: 0
  9180                           ;main.c: 536: LATCbits.LC0 = 0;;
  9181  001982  908B               	bcf	3979,0,c	;volatile
  9182                           
  9183                           ; BSR set to: 0
  9184                           ;main.c: 537: LATEbits.LE2 = 0;;
  9185  001984  948D               	bcf	3981,2,c	;volatile
  9186                           
  9187                           ; BSR set to: 0
  9188                           ;main.c: 538: LATEbits.LE1 = 0;;
  9189  001986  928D               	bcf	3981,1,c	;volatile
  9190                           
  9191                           ; BSR set to: 0
  9192                           ;main.c: 539: LATAbits.LA4 = 0;;
  9193  001988  9889               	bcf	3977,4,c	;volatile
  9194                           
  9195                           ; BSR set to: 0
  9196                           ;main.c: 540: LATDbits.LD0= 0;;
  9197  00198A  908C               	bcf	3980,0,c	;volatile
  9198                           
  9199                           ; BSR set to: 0
  9200                           ;main.c: 541: LATCbits.LC7 = 0;;
  9201  00198C  9E8B               	bcf	3979,7,c	;volatile
  9202                           
  9203                           ; BSR set to: 0
  9204                           ;main.c: 542: LATDbits.LD1 = 0;;
  9205  00198E  928C               	bcf	3980,1,c	;volatile
  9206                           
  9207                           ; BSR set to: 0
  9208                           ;main.c: 543: LATBbits.LB0 = 0;;
  9209  001990  908A               	bcf	3978,0,c	;volatile
  9210                           
  9211                           ; BSR set to: 0
  9212                           ;main.c: 544: screenMode = 0;
  9213  001992  0E00               	movlw	0
  9214  001994  0100               	movlb	0	; () banked
  9215  001996  6FDC               	movwf	_screenMode& (0+255),b
  9216                           
  9217                           ; BSR set to: 0
  9218  001998  0012               	return		;funcret
  9219  00199A                     __end_ofi2_stopOperation:
  9220                           	opt stack 0
  9221                           pclatu	equ	0xFFB
  9222                           pclath	equ	0xFFA
  9223                           tblptru	equ	0xFF8
  9224                           tblptrh	equ	0xFF7
  9225                           tblptrl	equ	0xFF6
  9226                           tablat	equ	0xFF5
  9227                           prodh	equ	0xFF4
  9228                           prodl	equ	0xFF3
  9229                           intcon	equ	0xFF2
  9230                           intcon2	equ	0xFF1
  9231                           intcon3	equ	0xFF0
  9232                           postinc0	equ	0xFEE
  9233                           fsr0h	equ	0xFEA
  9234                           fsr0l	equ	0xFE9
  9235                           wreg	equ	0xFE8
  9236                           fsr1h	equ	0xFE2
  9237                           fsr1l	equ	0xFE1
  9238                           indf2	equ	0xFDF
  9239                           postinc2	equ	0xFDE
  9240                           postdec2	equ	0xFDD
  9241                           fsr2h	equ	0xFDA
  9242                           fsr2l	equ	0xFD9
  9243                           status	equ	0xFD8
  9244                           
  9245 ;; *************** function i2_next_address *****************
  9246 ;; Defined at:
  9247 ;;		line 689 in file "../main.c"
  9248 ;; Parameters:    Size  Location     Type
  9249 ;;  address         2    0[COMRAM] unsigned int 
  9250 ;; Auto vars:     Size  Location     Type
  9251 ;;		None
  9252 ;; Return value:  Size  Location     Type
  9253 ;;                  2    0[COMRAM] unsigned int 
  9254 ;; Registers used:
  9255 ;;		wreg, status,2, status,0
  9256 ;; Tracked objects:
  9257 ;;		On entry : 0/0
  9258 ;;		On exit  : 0/0
  9259 ;;		Unchanged: 0/0
  9260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9261 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9262 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9263 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9264 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9265 ;;Total ram usage:        2 bytes
  9266 ;; Hardware stack levels used:    1
  9267 ;; This function calls:
  9268 ;;		Nothing
  9269 ;; This function is called by:
  9270 ;;		i2_stopOperation
  9271 ;; This function uses a non-reentrant model
  9272 ;;
  9273                           
  9274                           	psect	text30
  9275  00264C                     __ptext30:
  9276                           	opt stack 0
  9277  00264C                     i2_next_address:
  9278                           	opt stack 24
  9279                           
  9280                           ;main.c: 690: return address + 8;
  9281                           
  9282                           ; BSR set to: 0
  9283                           ;incstack = 0
  9284  00264C  0E08               	movlw	8
  9285  00264E  2401               	addwf	i2next_address@address,w,c
  9286  002650  6E01               	movwf	?i2_next_address,c
  9287  002652  0E00               	movlw	0
  9288  002654  2002               	addwfc	i2next_address@address+1,w,c
  9289  002656  6E02               	movwf	?i2_next_address+1,c
  9290  002658  0012               	return	
  9291  00265A                     __end_ofi2_next_address:
  9292                           	opt stack 0
  9293                           pclatu	equ	0xFFB
  9294                           pclath	equ	0xFFA
  9295                           tblptru	equ	0xFF8
  9296                           tblptrh	equ	0xFF7
  9297                           tblptrl	equ	0xFF6
  9298                           tablat	equ	0xFF5
  9299                           prodh	equ	0xFF4
  9300                           prodl	equ	0xFF3
  9301                           intcon	equ	0xFF2
  9302                           intcon2	equ	0xFF1
  9303                           intcon3	equ	0xFF0
  9304                           postinc0	equ	0xFEE
  9305                           fsr0h	equ	0xFEA
  9306                           fsr0l	equ	0xFE9
  9307                           wreg	equ	0xFE8
  9308                           fsr1h	equ	0xFE2
  9309                           fsr1l	equ	0xFE1
  9310                           indf2	equ	0xFDF
  9311                           postinc2	equ	0xFDE
  9312                           postdec2	equ	0xFDD
  9313                           fsr2h	equ	0xFDA
  9314                           fsr2l	equ	0xFD9
  9315                           status	equ	0xFD8
  9316                           
  9317 ;; *************** function i2___awmod *****************
  9318 ;; Defined at:
  9319 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  9320 ;; Parameters:    Size  Location     Type
  9321 ;;  dividend        2    0[COMRAM] int 
  9322 ;;  divisor         2    2[COMRAM] int 
  9323 ;; Auto vars:     Size  Location     Type
  9324 ;;  __awmod         1    5[COMRAM] unsigned char 
  9325 ;;  __awmod         1    4[COMRAM] unsigned char 
  9326 ;; Return value:  Size  Location     Type
  9327 ;;                  2    0[COMRAM] int 
  9328 ;; Registers used:
  9329 ;;		wreg, status,2, status,0
  9330 ;; Tracked objects:
  9331 ;;		On entry : 0/0
  9332 ;;		On exit  : 0/0
  9333 ;;		Unchanged: 0/0
  9334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9335 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9336 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9337 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9338 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9339 ;;Total ram usage:        6 bytes
  9340 ;; Hardware stack levels used:    1
  9341 ;; This function calls:
  9342 ;;		Nothing
  9343 ;; This function is called by:
  9344 ;;		_ISR
  9345 ;;		i2_stopOperation
  9346 ;; This function uses a non-reentrant model
  9347 ;;
  9348                           
  9349                           	psect	text31
  9350  002194                     __ptext31:
  9351                           	opt stack 0
  9352  002194                     i2___awmod:
  9353                           	opt stack 24
  9354                           
  9355                           ;incstack = 0
  9356  002194  0E00               	movlw	0
  9357  002196  6E06               	movwf	i2___awmod@sign,c
  9358  002198  AE02               	btfss	i2___awmod@dividend+1,7,c
  9359  00219A  D006               	goto	i2l3286
  9360  00219C  6C01               	negf	i2___awmod@dividend,c
  9361  00219E  1E02               	comf	i2___awmod@dividend+1,f,c
  9362  0021A0  B0D8               	btfsc	status,0,c
  9363  0021A2  2A02               	incf	i2___awmod@dividend+1,f,c
  9364  0021A4  0E01               	movlw	1
  9365  0021A6  6E06               	movwf	i2___awmod@sign,c
  9366  0021A8                     i2l3286:
  9367  0021A8  AE04               	btfss	i2___awmod@divisor+1,7,c
  9368  0021AA  D004               	goto	i2l3290
  9369  0021AC  6C03               	negf	i2___awmod@divisor,c
  9370  0021AE  1E04               	comf	i2___awmod@divisor+1,f,c
  9371  0021B0  B0D8               	btfsc	status,0,c
  9372  0021B2  2A04               	incf	i2___awmod@divisor+1,f,c
  9373  0021B4                     i2l3290:
  9374  0021B4  5003               	movf	i2___awmod@divisor,w,c
  9375  0021B6  1004               	iorwf	i2___awmod@divisor+1,w,c
  9376  0021B8  B4D8               	btfsc	status,2,c
  9377  0021BA  D018               	goto	i2l3306
  9378  0021BC  0E01               	movlw	1
  9379  0021BE  6E05               	movwf	i2___awmod@counter,c
  9380  0021C0  D004               	goto	i2l3296
  9381  0021C2                     i2l3294:
  9382  0021C2  90D8               	bcf	status,0,c
  9383  0021C4  3603               	rlcf	i2___awmod@divisor,f,c
  9384  0021C6  3604               	rlcf	i2___awmod@divisor+1,f,c
  9385  0021C8  2A05               	incf	i2___awmod@counter,f,c
  9386  0021CA                     i2l3296:
  9387  0021CA  AE04               	btfss	i2___awmod@divisor+1,7,c
  9388  0021CC  D7FA               	goto	i2l3294
  9389  0021CE                     i2l3298:
  9390  0021CE  5003               	movf	i2___awmod@divisor,w,c
  9391  0021D0  5C01               	subwf	i2___awmod@dividend,w,c
  9392  0021D2  5004               	movf	i2___awmod@divisor+1,w,c
  9393  0021D4  5802               	subwfb	i2___awmod@dividend+1,w,c
  9394  0021D6  A0D8               	btfss	status,0,c
  9395  0021D8  D004               	goto	i2l3302
  9396  0021DA  5003               	movf	i2___awmod@divisor,w,c
  9397  0021DC  5E01               	subwf	i2___awmod@dividend,f,c
  9398  0021DE  5004               	movf	i2___awmod@divisor+1,w,c
  9399  0021E0  5A02               	subwfb	i2___awmod@dividend+1,f,c
  9400  0021E2                     i2l3302:
  9401  0021E2  90D8               	bcf	status,0,c
  9402  0021E4  3204               	rrcf	i2___awmod@divisor+1,f,c
  9403  0021E6  3203               	rrcf	i2___awmod@divisor,f,c
  9404  0021E8  2E05               	decfsz	i2___awmod@counter,f,c
  9405  0021EA  D7F1               	goto	i2l3298
  9406  0021EC                     i2l3306:
  9407  0021EC  5006               	movf	i2___awmod@sign,w,c
  9408  0021EE  B4D8               	btfsc	status,2,c
  9409  0021F0  D004               	goto	i2l3310
  9410  0021F2  6C01               	negf	i2___awmod@dividend,c
  9411  0021F4  1E02               	comf	i2___awmod@dividend+1,f,c
  9412  0021F6  B0D8               	btfsc	status,0,c
  9413  0021F8  2A02               	incf	i2___awmod@dividend+1,f,c
  9414  0021FA                     i2l3310:
  9415  0021FA  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
  9416  0021FE  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
  9417  002202  0012               	return	
  9418  002204                     __end_ofi2___awmod:
  9419                           	opt stack 0
  9420                           pclatu	equ	0xFFB
  9421                           pclath	equ	0xFFA
  9422                           tblptru	equ	0xFF8
  9423                           tblptrh	equ	0xFF7
  9424                           tblptrl	equ	0xFF6
  9425                           tablat	equ	0xFF5
  9426                           prodh	equ	0xFF4
  9427                           prodl	equ	0xFF3
  9428                           intcon	equ	0xFF2
  9429                           intcon2	equ	0xFF1
  9430                           intcon3	equ	0xFF0
  9431                           postinc0	equ	0xFEE
  9432                           fsr0h	equ	0xFEA
  9433                           fsr0l	equ	0xFE9
  9434                           wreg	equ	0xFE8
  9435                           fsr1h	equ	0xFE2
  9436                           fsr1l	equ	0xFE1
  9437                           indf2	equ	0xFDF
  9438                           postinc2	equ	0xFDE
  9439                           postdec2	equ	0xFDD
  9440                           fsr2h	equ	0xFDA
  9441                           fsr2l	equ	0xFD9
  9442                           status	equ	0xFD8
  9443                           
  9444 ;; *************** function i2___awdiv *****************
  9445 ;; Defined at:
  9446 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  9447 ;; Parameters:    Size  Location     Type
  9448 ;;  dividend        2    0[COMRAM] int 
  9449 ;;  divisor         2    2[COMRAM] int 
  9450 ;; Auto vars:     Size  Location     Type
  9451 ;;  __awdiv         2    6[COMRAM] int 
  9452 ;;  __awdiv         1    5[COMRAM] unsigned char 
  9453 ;;  __awdiv         1    4[COMRAM] unsigned char 
  9454 ;; Return value:  Size  Location     Type
  9455 ;;                  2    0[COMRAM] int 
  9456 ;; Registers used:
  9457 ;;		wreg, status,2, status,0
  9458 ;; Tracked objects:
  9459 ;;		On entry : 0/0
  9460 ;;		On exit  : 0/0
  9461 ;;		Unchanged: 0/0
  9462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9463 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9464 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9466 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9467 ;;Total ram usage:        8 bytes
  9468 ;; Hardware stack levels used:    1
  9469 ;; This function calls:
  9470 ;;		Nothing
  9471 ;; This function is called by:
  9472 ;;		_ISR
  9473 ;;		i2_stopOperation
  9474 ;; This function uses a non-reentrant model
  9475 ;;
  9476                           
  9477                           	psect	text32
  9478  00201E                     __ptext32:
  9479                           	opt stack 0
  9480  00201E                     i2___awdiv:
  9481                           	opt stack 24
  9482                           
  9483                           ;incstack = 0
  9484  00201E  0E00               	movlw	0
  9485  002020  6E06               	movwf	i2___awdiv@sign,c
  9486  002022  AE04               	btfss	i2___awdiv@divisor+1,7,c
  9487  002024  D006               	goto	i2l3242
  9488  002026  6C03               	negf	i2___awdiv@divisor,c
  9489  002028  1E04               	comf	i2___awdiv@divisor+1,f,c
  9490  00202A  B0D8               	btfsc	status,0,c
  9491  00202C  2A04               	incf	i2___awdiv@divisor+1,f,c
  9492  00202E  0E01               	movlw	1
  9493  002030  6E06               	movwf	i2___awdiv@sign,c
  9494  002032                     i2l3242:
  9495  002032  AE02               	btfss	i2___awdiv@dividend+1,7,c
  9496  002034  D006               	goto	i2l3248
  9497  002036  6C01               	negf	i2___awdiv@dividend,c
  9498  002038  1E02               	comf	i2___awdiv@dividend+1,f,c
  9499  00203A  B0D8               	btfsc	status,0,c
  9500  00203C  2A02               	incf	i2___awdiv@dividend+1,f,c
  9501  00203E  0E01               	movlw	1
  9502  002040  1A06               	xorwf	i2___awdiv@sign,f,c
  9503  002042                     i2l3248:
  9504  002042  0E00               	movlw	0
  9505  002044  6E08               	movwf	i2___awdiv@quotient+1,c
  9506  002046  0E00               	movlw	0
  9507  002048  6E07               	movwf	i2___awdiv@quotient,c
  9508  00204A  5003               	movf	i2___awdiv@divisor,w,c
  9509  00204C  1004               	iorwf	i2___awdiv@divisor+1,w,c
  9510  00204E  B4D8               	btfsc	status,2,c
  9511  002050  D01C               	goto	i2l3270
  9512  002052  0E01               	movlw	1
  9513  002054  6E05               	movwf	i2___awdiv@counter,c
  9514  002056  D004               	goto	i2l3256
  9515  002058                     i2l3254:
  9516  002058  90D8               	bcf	status,0,c
  9517  00205A  3603               	rlcf	i2___awdiv@divisor,f,c
  9518  00205C  3604               	rlcf	i2___awdiv@divisor+1,f,c
  9519  00205E  2A05               	incf	i2___awdiv@counter,f,c
  9520  002060                     i2l3256:
  9521  002060  AE04               	btfss	i2___awdiv@divisor+1,7,c
  9522  002062  D7FA               	goto	i2l3254
  9523  002064                     i2l3258:
  9524  002064  90D8               	bcf	status,0,c
  9525  002066  3607               	rlcf	i2___awdiv@quotient,f,c
  9526  002068  3608               	rlcf	i2___awdiv@quotient+1,f,c
  9527  00206A  5003               	movf	i2___awdiv@divisor,w,c
  9528  00206C  5C01               	subwf	i2___awdiv@dividend,w,c
  9529  00206E  5004               	movf	i2___awdiv@divisor+1,w,c
  9530  002070  5802               	subwfb	i2___awdiv@dividend+1,w,c
  9531  002072  A0D8               	btfss	status,0,c
  9532  002074  D005               	goto	i2l3266
  9533  002076  5003               	movf	i2___awdiv@divisor,w,c
  9534  002078  5E01               	subwf	i2___awdiv@dividend,f,c
  9535  00207A  5004               	movf	i2___awdiv@divisor+1,w,c
  9536  00207C  5A02               	subwfb	i2___awdiv@dividend+1,f,c
  9537  00207E  8007               	bsf	i2___awdiv@quotient,0,c
  9538  002080                     i2l3266:
  9539  002080  90D8               	bcf	status,0,c
  9540  002082  3204               	rrcf	i2___awdiv@divisor+1,f,c
  9541  002084  3203               	rrcf	i2___awdiv@divisor,f,c
  9542  002086  2E05               	decfsz	i2___awdiv@counter,f,c
  9543  002088  D7ED               	goto	i2l3258
  9544  00208A                     i2l3270:
  9545  00208A  5006               	movf	i2___awdiv@sign,w,c
  9546  00208C  B4D8               	btfsc	status,2,c
  9547  00208E  D004               	goto	i2l3274
  9548  002090  6C07               	negf	i2___awdiv@quotient,c
  9549  002092  1E08               	comf	i2___awdiv@quotient+1,f,c
  9550  002094  B0D8               	btfsc	status,0,c
  9551  002096  2A08               	incf	i2___awdiv@quotient+1,f,c
  9552  002098                     i2l3274:
  9553  002098  C007  F001         	movff	i2___awdiv@quotient,?i2___awdiv
  9554  00209C  C008  F002         	movff	i2___awdiv@quotient+1,?i2___awdiv+1
  9555  0020A0  0012               	return	
  9556  0020A2                     __end_ofi2___awdiv:
  9557                           	opt stack 0
  9558                           pclatu	equ	0xFFB
  9559                           pclath	equ	0xFFA
  9560                           tblptru	equ	0xFF8
  9561                           tblptrh	equ	0xFF7
  9562                           tblptrl	equ	0xFF6
  9563                           tablat	equ	0xFF5
  9564                           prodh	equ	0xFF4
  9565                           prodl	equ	0xFF3
  9566                           intcon	equ	0xFF2
  9567                           intcon2	equ	0xFF1
  9568                           intcon3	equ	0xFF0
  9569                           postinc0	equ	0xFEE
  9570                           fsr0h	equ	0xFEA
  9571                           fsr0l	equ	0xFE9
  9572                           wreg	equ	0xFE8
  9573                           fsr1h	equ	0xFE2
  9574                           fsr1l	equ	0xFE1
  9575                           indf2	equ	0xFDF
  9576                           postinc2	equ	0xFDE
  9577                           postdec2	equ	0xFDD
  9578                           fsr2h	equ	0xFDA
  9579                           fsr2l	equ	0xFD9
  9580                           status	equ	0xFD8
  9581                           
  9582 ;; *************** function i2_Eeprom_WriteByte *****************
  9583 ;; Defined at:
  9584 ;;		line 662 in file "../main.c"
  9585 ;; Parameters:    Size  Location     Type
  9586 ;;  address         2    0[COMRAM] unsigned int 
  9587 ;;  data            1    2[COMRAM] unsigned char 
  9588 ;; Auto vars:     Size  Location     Type
  9589 ;;		None
  9590 ;; Return value:  Size  Location     Type
  9591 ;;                  1    wreg      void 
  9592 ;; Registers used:
  9593 ;;		wreg, status,2
  9594 ;; Tracked objects:
  9595 ;;		On entry : 0/0
  9596 ;;		On exit  : 0/0
  9597 ;;		Unchanged: 0/0
  9598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9599 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9600 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9601 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9602 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9603 ;;Total ram usage:        3 bytes
  9604 ;; Hardware stack levels used:    1
  9605 ;; This function calls:
  9606 ;;		Nothing
  9607 ;; This function is called by:
  9608 ;;		i2_stopOperation
  9609 ;; This function uses a non-reentrant model
  9610 ;;
  9611                           
  9612                           	psect	text33
  9613  002512                     __ptext33:
  9614                           	opt stack 0
  9615  002512                     i2_Eeprom_WriteByte:
  9616                           	opt stack 24
  9617                           
  9618                           ;main.c: 664: EEADRH = (uint8_t)(address >> 8);
  9619                           
  9620                           ;incstack = 0
  9621  002512  5002               	movf	i2Eeprom_WriteByte@address+1,w,c
  9622  002514  6EAA               	movwf	4010,c	;volatile
  9623                           
  9624                           ;main.c: 665: EEADR = (uint8_t)address;
  9625  002516  C001  FFA9         	movff	i2Eeprom_WriteByte@address,4009	;volatile
  9626                           
  9627                           ;main.c: 667: EEDATA = data;
  9628  00251A  C003  FFA8         	movff	i2Eeprom_WriteByte@data,4008	;volatile
  9629                           
  9630                           ;main.c: 668: EECON1bits.EEPGD = 0;
  9631  00251E  9EA6               	bcf	4006,7,c	;volatile
  9632                           
  9633                           ;main.c: 669: EECON1bits.CFGS = 0;
  9634  002520  9CA6               	bcf	4006,6,c	;volatile
  9635                           
  9636                           ;main.c: 670: EECON1bits.WREN = 1;
  9637  002522  84A6               	bsf	4006,2,c	;volatile
  9638                           
  9639                           ;main.c: 674: EECON2 = 0x55;
  9640  002524  0E55               	movlw	85
  9641  002526  6EA7               	movwf	4007,c	;volatile
  9642                           
  9643                           ;main.c: 675: EECON2 = 0xAA;
  9644  002528  0EAA               	movlw	170
  9645  00252A  6EA7               	movwf	4007,c	;volatile
  9646                           
  9647                           ;main.c: 676: EECON1bits.WR = 1;
  9648  00252C  82A6               	bsf	4006,1,c	;volatile
  9649  00252E                     i2l439:
  9650  00252E  A8A1               	btfss	4001,4,c	;volatile
  9651  002530  D7FE               	goto	i2l439
  9652                           
  9653                           ;main.c: 682: }
  9654                           ;main.c: 684: PIR2bits.EEIF = 0;
  9655  002532  98A1               	bcf	4001,4,c	;volatile
  9656                           
  9657                           ;main.c: 685: EECON1bits.WREN = 0;
  9658  002534  94A6               	bcf	4006,2,c	;volatile
  9659  002536  0012               	return		;funcret
  9660  002538                     __end_ofi2_Eeprom_WriteByte:
  9661                           	opt stack 0
  9662                           pclatu	equ	0xFFB
  9663                           pclath	equ	0xFFA
  9664                           tblptru	equ	0xFF8
  9665                           tblptrh	equ	0xFF7
  9666                           tblptrl	equ	0xFF6
  9667                           tablat	equ	0xFF5
  9668                           prodh	equ	0xFF4
  9669                           prodl	equ	0xFF3
  9670                           intcon	equ	0xFF2
  9671                           intcon2	equ	0xFF1
  9672                           intcon3	equ	0xFF0
  9673                           postinc0	equ	0xFEE
  9674                           fsr0h	equ	0xFEA
  9675                           fsr0l	equ	0xFE9
  9676                           wreg	equ	0xFE8
  9677                           fsr1h	equ	0xFE2
  9678                           fsr1l	equ	0xFE1
  9679                           indf2	equ	0xFDF
  9680                           postinc2	equ	0xFDE
  9681                           postdec2	equ	0xFDD
  9682                           fsr2h	equ	0xFDA
  9683                           fsr2l	equ	0xFD9
  9684                           status	equ	0xFD8
  9685                           
  9686 ;; *************** function i2_Eeprom_ReadByte *****************
  9687 ;; Defined at:
  9688 ;;		line 645 in file "../main.c"
  9689 ;; Parameters:    Size  Location     Type
  9690 ;;  address         2    0[COMRAM] unsigned int 
  9691 ;; Auto vars:     Size  Location     Type
  9692 ;;		None
  9693 ;; Return value:  Size  Location     Type
  9694 ;;                  1    wreg      unsigned char 
  9695 ;; Registers used:
  9696 ;;		wreg, status,2
  9697 ;; Tracked objects:
  9698 ;;		On entry : 0/0
  9699 ;;		On exit  : 0/0
  9700 ;;		Unchanged: 0/0
  9701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9702 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9703 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9705 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9706 ;;Total ram usage:        2 bytes
  9707 ;; Hardware stack levels used:    1
  9708 ;; This function calls:
  9709 ;;		Nothing
  9710 ;; This function is called by:
  9711 ;;		i2_stopOperation
  9712 ;; This function uses a non-reentrant model
  9713 ;;
  9714                           
  9715                           	psect	text34
  9716  0025F0                     __ptext34:
  9717                           	opt stack 0
  9718  0025F0                     i2_Eeprom_ReadByte:
  9719                           	opt stack 24
  9720                           
  9721                           ;main.c: 647: EEADRH = (uint8_t)(address >> 8);
  9722                           
  9723                           ;incstack = 0
  9724  0025F0  5002               	movf	i2Eeprom_ReadByte@address+1,w,c
  9725  0025F2  6EAA               	movwf	4010,c	;volatile
  9726                           
  9727                           ;main.c: 648: EEADR = (uint8_t)address;
  9728  0025F4  C001  FFA9         	movff	i2Eeprom_ReadByte@address,4009	;volatile
  9729                           
  9730                           ;main.c: 650: EECON1bits.EEPGD = 0;
  9731  0025F8  9EA6               	bcf	4006,7,c	;volatile
  9732                           
  9733                           ;main.c: 651: EECON1bits.CFGS = 0;
  9734  0025FA  9CA6               	bcf	4006,6,c	;volatile
  9735                           
  9736                           ;main.c: 652: EECON1bits.RD = 1;
  9737  0025FC  80A6               	bsf	4006,0,c	;volatile
  9738  0025FE                     i2l433:
  9739  0025FE  B0A6               	btfsc	4006,0,c	;volatile
  9740  002600  D7FE               	goto	i2l433
  9741                           
  9742                           ;main.c: 658: return EEDATA;
  9743  002602  50A8               	movf	4008,w,c	;volatile
  9744  002604  0012               	return	
  9745  002606                     __end_ofi2_Eeprom_ReadByte:
  9746                           	opt stack 0
  9747                           pclatu	equ	0xFFB
  9748                           pclath	equ	0xFFA
  9749                           tblptru	equ	0xFF8
  9750                           tblptrh	equ	0xFF7
  9751                           tblptrl	equ	0xFF6
  9752                           tablat	equ	0xFF5
  9753                           prodh	equ	0xFF4
  9754                           prodl	equ	0xFF3
  9755                           intcon	equ	0xFF2
  9756                           intcon2	equ	0xFF1
  9757                           intcon3	equ	0xFF0
  9758                           postinc0	equ	0xFEE
  9759                           fsr0h	equ	0xFEA
  9760                           fsr0l	equ	0xFE9
  9761                           wreg	equ	0xFE8
  9762                           fsr1h	equ	0xFE2
  9763                           fsr1l	equ	0xFE1
  9764                           indf2	equ	0xFDF
  9765                           postinc2	equ	0xFDE
  9766                           postdec2	equ	0xFDD
  9767                           fsr2h	equ	0xFDA
  9768                           fsr2l	equ	0xFD9
  9769                           status	equ	0xFD8
  9770                           
  9771 ;; *************** function i2_printf *****************
  9772 ;; Defined at:
  9773 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  9774 ;; Parameters:    Size  Location     Type
  9775 ;;  f               2   12[COMRAM] PTR const unsigned char 
  9776 ;;		 -> STR_38(20), STR_37(23), STR_36(23), STR_35(23), 
  9777 ;;		 -> STR_34(17), STR_33(15), STR_32(17), STR_31(23), 
  9778 ;;		 -> STR_30(23), STR_29(17), STR_28(17), STR_27(17), 
  9779 ;;		 -> STR_26(17), STR_25(17), STR_24(17), STR_23(17), 
  9780 ;;		 -> STR_22(17), STR_21(23), STR_20(23), STR_19(17), 
  9781 ;;		 -> STR_18(21), STR_17(17), STR_16(21), STR_15(17), 
  9782 ;;		 -> STR_14(21), STR_13(17), STR_12(19), STR_11(17), 
  9783 ;;		 -> STR_10(19), STR_9(17), STR_8(25), STR_7(17), 
  9784 ;;		 -> STR_6(17), STR_5(17), STR_4(17), STR_3(17), 
  9785 ;;		 -> STR_2(17), STR_1(17), 
  9786 ;; Auto vars:     Size  Location     Type
  9787 ;;  printf          4    0        struct .
  9788 ;;  printf          3    0        PTR const unsigned char 
  9789 ;;  printf          2   25[COMRAM] int 
  9790 ;;  printf          2   22[COMRAM] unsigned int 
  9791 ;;  printf          2   19[COMRAM] PTR void [1]
  9792 ;;		 -> ?i2_printf(2), ?_printf(2), 
  9793 ;;  printf          2    0        unsigned int 
  9794 ;;  printf          1   27[COMRAM] char 
  9795 ;;  printf          1   24[COMRAM] unsigned char 
  9796 ;;  printf          1   21[COMRAM] char 
  9797 ;;  printf          1   18[COMRAM] unsigned char 
  9798 ;; Return value:  Size  Location     Type
  9799 ;;                  2   12[COMRAM] int 
  9800 ;; Registers used:
  9801 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9802 ;; Tracked objects:
  9803 ;;		On entry : 0/0
  9804 ;;		On exit  : 0/0
  9805 ;;		Unchanged: 0/0
  9806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9807 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9808 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9809 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9810 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9811 ;;Total ram usage:       16 bytes
  9812 ;; Hardware stack levels used:    1
  9813 ;; Hardware stack levels required when called:    2
  9814 ;; This function calls:
  9815 ;;		i2___lwdiv
  9816 ;;		i2___lwmod
  9817 ;;		i2___wmul
  9818 ;;		i2_isdigit
  9819 ;;		i2_putch
  9820 ;; This function is called by:
  9821 ;;		_keypressed
  9822 ;; This function uses a non-reentrant model
  9823 ;;
  9824                           
  9825                           	psect	text35
  9826  000DA8                     __ptext35:
  9827                           	opt stack 0
  9828  000DA8                     i2_printf:
  9829                           	opt stack 22
  9830                           
  9831                           ;doprnt.c: 466: va_list ap;
  9832                           ;doprnt.c: 499: signed char c;
  9833                           ;doprnt.c: 501: int width;
  9834                           ;doprnt.c: 506: signed char prec;
  9835                           ;doprnt.c: 508: unsigned char flag;
  9836                           ;doprnt.c: 523: union {
  9837                           ;doprnt.c: 524: unsigned long vd;
  9838                           ;doprnt.c: 525: double integ;
  9839                           ;doprnt.c: 526: } tmpval;
  9840                           ;doprnt.c: 528: unsigned int val;
  9841                           ;doprnt.c: 529: unsigned len;
  9842                           ;doprnt.c: 530: const char * cp;
  9843                           ;doprnt.c: 533: *ap = __va_start();
  9844                           
  9845                           ;incstack = 0
  9846  000DA8  0E0F               	movlw	low (?i2_printf+2)
  9847  000DAA  6E14               	movwf	i2printf@ap,c
  9848  000DAC  0E00               	movlw	high (?i2_printf+2)
  9849  000DAE  6E15               	movwf	i2printf@ap+1,c
  9850                           
  9851                           ;doprnt.c: 536: while(c = *f++) {
  9852  000DB0  D174               	goto	i2l3938
  9853  000DB2                     i2l3812:
  9854                           
  9855                           ;doprnt.c: 538: if(c != '%')
  9856  000DB2  0E25               	movlw	37
  9857  000DB4  181C               	xorwf	i2printf@c,w,c
  9858  000DB6  B4D8               	btfsc	status,2,c
  9859  000DB8  D004               	goto	i2l3816
  9860                           
  9861                           ;doprnt.c: 540: {
  9862                           ;doprnt.c: 541: (putch(c) );
  9863  000DBA  501C               	movf	i2printf@c,w,c
  9864  000DBC  EC39  F013         	call	i2_putch
  9865                           
  9866                           ;doprnt.c: 542: continue;
  9867  000DC0  D16C               	goto	i2l3938
  9868  000DC2                     i2l3816:
  9869                           
  9870                           ;doprnt.c: 543: }
  9871                           ;doprnt.c: 546: width = 0;
  9872  000DC2  0E00               	movlw	0
  9873  000DC4  6E1B               	movwf	i2printf@width+1,c
  9874  000DC6  0E00               	movlw	0
  9875  000DC8  6E1A               	movwf	i2printf@width,c
  9876                           
  9877                           ;doprnt.c: 548: flag = 0;
  9878  000DCA  0E00               	movlw	0
  9879  000DCC  6E19               	movwf	i2printf@flag,c
  9880                           
  9881                           ;doprnt.c: 551: switch(*f) {
  9882                           
  9883                           ;doprnt.c: 550: for(;;) {
  9884  000DCE  D003               	goto	i2l3822
  9885  000DD0                     i2l3818:
  9886                           
  9887                           ;doprnt.c: 580: flag |= 0x04;
  9888  000DD0  8419               	bsf	i2printf@flag,2,c
  9889                           
  9890                           ;doprnt.c: 581: f++;
  9891  000DD2  4A0D               	infsnz	i2printf@f,f,c
  9892  000DD4  2A0E               	incf	i2printf@f+1,f,c
  9893  000DD6                     i2l3822:
  9894  000DD6  C00D  FFF6         	movff	i2printf@f,tblptrl
  9895  000DDA  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  9896  000DDE                     	if	0	;tblptru may be non-zero
  9897  000DDE                     	endif
  9898  000DDE                     	if	0	;tblptru may be non-zero
  9899  000DDE                     	endif
  9900  000DDE  0008               	tblrd		*
  9901  000DE0  50F5               	movf	tablat,w,c
  9902                           
  9903                           ; Switch size 1, requested type "space"
  9904                           ; Number of cases is 1, Range of values is 48 to 48
  9905                           ; switch strategies available:
  9906                           ; Name         Instructions Cycles
  9907                           ; simple_byte            4     3 (average)
  9908                           ;	Chosen strategy is simple_byte
  9909  000DE2  0A30               	xorlw	48	; case 48
  9910  000DE4  B4D8               	btfsc	status,2,c
  9911  000DE6  D7F4               	goto	i2l3818
  9912                           
  9913                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  9914                           
  9915                           ;doprnt.c: 586: }
  9916                           
  9917                           ;doprnt.c: 585: break;
  9918  000DE8  C00D  FFF6         	movff	i2printf@f,tblptrl
  9919  000DEC  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  9920  000DF0                     	if	0	;tblptru may be non-zero
  9921  000DF0                     	endif
  9922  000DF0                     	if	0	;tblptru may be non-zero
  9923  000DF0                     	endif
  9924  000DF0  0008               	tblrd		*
  9925  000DF2  50F5               	movf	tablat,w,c
  9926  000DF4  ECD1  F012         	call	i2_isdigit
  9927  000DF8  A0D8               	btfss	status,0,c
  9928  000DFA  D035               	goto	i2l3840
  9929                           
  9930                           ;doprnt.c: 598: width = 0;
  9931  000DFC  0E00               	movlw	0
  9932  000DFE  6E1B               	movwf	i2printf@width+1,c
  9933  000E00  0E00               	movlw	0
  9934  000E02  6E1A               	movwf	i2printf@width,c
  9935  000E04                     i2l3828:
  9936                           
  9937                           ;doprnt.c: 600: width *= 10;
  9938  000E04  C01A  F001         	movff	i2printf@width,i2___wmul@multiplier
  9939  000E08  C01B  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
  9940  000E0C  0E00               	movlw	0
  9941  000E0E  6E04               	movwf	i2___wmul@multiplicand+1,c
  9942  000E10  0E0A               	movlw	10
  9943  000E12  6E03               	movwf	i2___wmul@multiplicand,c
  9944  000E14  EC9C  F012         	call	i2___wmul	;wreg free
  9945  000E18  C001  F01A         	movff	?i2___wmul,i2printf@width
  9946  000E1C  C002  F01B         	movff	?i2___wmul+1,i2printf@width+1
  9947                           
  9948                           ;doprnt.c: 601: width += *f++ - '0';
  9949  000E20  0ED0               	movlw	208
  9950  000E22  6E0F               	movwf	??i2_printf& (0+255),c
  9951  000E24  0EFF               	movlw	255
  9952  000E26  6E10               	movwf	(??i2_printf+1)& (0+255),c
  9953  000E28  C00D  FFF6         	movff	i2printf@f,tblptrl
  9954  000E2C  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  9955  000E30                     	if	0	;tblptru may be non-zero
  9956  000E30                     	endif
  9957  000E30                     	if	0	;tblptru may be non-zero
  9958  000E30                     	endif
  9959  000E30  0008               	tblrd		*
  9960  000E32  50F5               	movf	tablat,w,c
  9961  000E34  6E11               	movwf	(??i2_printf+2)& (0+255),c
  9962  000E36  6A12               	clrf	(??i2_printf+3)& (0+255),c
  9963  000E38  500F               	movf	??i2_printf,w,c
  9964  000E3A  2611               	addwf	??i2_printf+2,f,c
  9965  000E3C  5010               	movf	??i2_printf+1,w,c
  9966  000E3E  2212               	addwfc	??i2_printf+3,f,c
  9967  000E40  5011               	movf	??i2_printf+2,w,c
  9968  000E42  261A               	addwf	i2printf@width,f,c
  9969  000E44  5012               	movf	??i2_printf+3,w,c
  9970  000E46  221B               	addwfc	i2printf@width+1,f,c
  9971  000E48  4A0D               	infsnz	i2printf@f,f,c
  9972  000E4A  2A0E               	incf	i2printf@f+1,f,c
  9973                           
  9974                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  9975  000E4C  C00D  FFF6         	movff	i2printf@f,tblptrl
  9976  000E50  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  9977  000E54                     	if	0	;tblptru may be non-zero
  9978  000E54                     	endif
  9979  000E54                     	if	0	;tblptru may be non-zero
  9980  000E54                     	endif
  9981  000E54  0008               	tblrd		*
  9982  000E56  50F5               	movf	tablat,w,c
  9983  000E58  ECD1  F012         	call	i2_isdigit
  9984  000E5C  A0D8               	btfss	status,0,c
  9985  000E5E  D003               	goto	i2l3840
  9986  000E60  D7D1               	goto	i2l3828
  9987  000E62                     i2l3836:
  9988                           
  9989                           ;doprnt.c: 721: flag |= 0x80;
  9990  000E62  8E19               	bsf	i2printf@flag,7,c
  9991                           
  9992                           ;doprnt.c: 723: break;
  9993  000E64  D017               	goto	i2l534
  9994  000E66                     i2l3840:
  9995  000E66  C00D  FFF6         	movff	i2printf@f,tblptrl
  9996  000E6A  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  9997  000E6E  4A0D               	infsnz	i2printf@f,f,c
  9998  000E70  2A0E               	incf	i2printf@f+1,f,c
  9999  000E72                     	if	0	;tblptru may be non-zero
 10000  000E72                     	endif
 10001  000E72                     	if	0	;tblptru may be non-zero
 10002  000E72                     	endif
 10003  000E72  0008               	tblrd		*
 10004  000E74  CFF5 F01C          	movff	tablat,i2printf@c
 10005  000E78  501C               	movf	i2printf@c,w,c
 10006                           
 10007                           ; Switch size 1, requested type "space"
 10008                           ; Number of cases is 4, Range of values is 0 to 120
 10009                           ; switch strategies available:
 10010                           ; Name         Instructions Cycles
 10011                           ; simple_byte           13     7 (average)
 10012                           ;	Chosen strategy is simple_byte
 10013  000E7A  0A00               	xorlw	0	; case 0
 10014  000E7C  B4D8               	btfsc	status,2,c
 10015  000E7E  0012               	return	
 10016  000E80  0A64               	xorlw	100	; case 100
 10017  000E82  B4D8               	btfsc	status,2,c
 10018  000E84  D007               	goto	i2l534
 10019  000E86  0A0D               	xorlw	13	; case 105
 10020  000E88  B4D8               	btfsc	status,2,c
 10021  000E8A  D004               	goto	i2l534
 10022  000E8C  0A11               	xorlw	17	; case 120
 10023  000E8E  B4D8               	btfsc	status,2,c
 10024  000E90  D7E8               	goto	i2l3836
 10025  000E92  D103               	goto	i2l3938
 10026  000E94                     i2l534:
 10027                           
 10028                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
 10029  000E94  BE19               	btfsc	i2printf@flag,7,c
 10030  000E96  D015               	goto	i2l3852
 10031                           
 10032                           ;doprnt.c: 1253: {
 10033                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 10034  000E98  C014  FFD9         	movff	i2printf@ap,fsr2l
 10035  000E9C  C015  FFDA         	movff	i2printf@ap+1,fsr2h
 10036  000EA0  CFDE F017          	movff	postinc2,i2printf@val
 10037  000EA4  CFDD F018          	movff	postdec2,i2printf@val+1
 10038  000EA8  0E02               	movlw	2
 10039  000EAA  2614               	addwf	i2printf@ap,f,c
 10040  000EAC  0E00               	movlw	0
 10041  000EAE  2215               	addwfc	i2printf@ap+1,f,c
 10042                           
 10043                           ;doprnt.c: 1261: if((int)val < 0) {
 10044  000EB0  AE18               	btfss	i2printf@val+1,7,c
 10045  000EB2  D044               	goto	i2l3886
 10046                           
 10047                           ;doprnt.c: 1262: flag |= 0x03;
 10048  000EB4  0E03               	movlw	3
 10049  000EB6  1219               	iorwf	i2printf@flag,f,c
 10050                           
 10051                           ;doprnt.c: 1263: val = -val;
 10052  000EB8  6C17               	negf	i2printf@val,c
 10053  000EBA  1E18               	comf	i2printf@val+1,f,c
 10054  000EBC  B0D8               	btfsc	status,0,c
 10055  000EBE  2A18               	incf	i2printf@val+1,f,c
 10056                           
 10057                           ;doprnt.c: 1264: }
 10058                           ;doprnt.c: 1266: }
 10059  000EC0  D03D               	goto	i2l3886
 10060  000EC2                     i2l3852:
 10061                           
 10062                           ;doprnt.c: 1268: else
 10063                           ;doprnt.c: 1273: {
 10064                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 10065  000EC2  C014  FFD9         	movff	i2printf@ap,fsr2l
 10066  000EC6  C015  FFDA         	movff	i2printf@ap+1,fsr2h
 10067  000ECA  CFDE F017          	movff	postinc2,i2printf@val
 10068  000ECE  CFDD F018          	movff	postdec2,i2printf@val+1
 10069  000ED2  0E02               	movlw	2
 10070  000ED4  2614               	addwf	i2printf@ap,f,c
 10071  000ED6  0E00               	movlw	0
 10072  000ED8  2215               	addwfc	i2printf@ap+1,f,c
 10073                           
 10074                           ;doprnt.c: 1287: }
 10075                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
 10076  000EDA  D030               	goto	i2l3886
 10077  000EDC                     i2l3856:
 10078                           
 10079                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 10080  000EDC  0E01               	movlw	1
 10081  000EDE  6E1C               	movwf	i2printf@c,c
 10082  000EE0                     i2l3858:
 10083  000EE0  0E05               	movlw	5
 10084  000EE2  181C               	xorwf	i2printf@c,w,c
 10085  000EE4  B4D8               	btfsc	status,2,c
 10086  000EE6  D032               	goto	i2l3888
 10087                           
 10088                           ;doprnt.c: 1306: if(val < dpowers[c])
 10089  000EE8  501C               	movf	i2printf@c,w,c
 10090  000EEA  0D02               	mullw	2
 10091  000EEC  0EB0               	movlw	low _dpowers
 10092  000EEE  24F3               	addwf	prodl,w,c
 10093  000EF0  6EF6               	movwf	tblptrl,c
 10094  000EF2  0EFD               	movlw	high _dpowers
 10095  000EF4  20F4               	addwfc	prodh,w,c
 10096  000EF6  6EF7               	movwf	tblptrh,c
 10097  000EF8                     	if	0	;There are less than 3 active tblptr bytes
 10098  000EF8                     	endif
 10099  000EF8  0009               	tblrd		*+
 10100  000EFA  50F5               	movf	tablat,w,c
 10101  000EFC  5C17               	subwf	i2printf@val,w,c
 10102  000EFE  0009               	tblrd		*+
 10103  000F00  50F5               	movf	tablat,w,c
 10104  000F02  5818               	subwfb	i2printf@val+1,w,c
 10105  000F04  A0D8               	btfss	status,0,c
 10106  000F06  D022               	goto	i2l3888
 10107                           
 10108                           ;doprnt.c: 1307: break;
 10109  000F08  2A1C               	incf	i2printf@c,f,c
 10110  000F0A  D7EA               	goto	i2l3858
 10111  000F0C                     i2l3870:
 10112                           
 10113                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 10114  000F0C  0E01               	movlw	1
 10115  000F0E  6E1C               	movwf	i2printf@c,c
 10116  000F10                     i2l3872:
 10117  000F10  0E04               	movlw	4
 10118  000F12  181C               	xorwf	i2printf@c,w,c
 10119  000F14  B4D8               	btfsc	status,2,c
 10120  000F16  D01A               	goto	i2l3888
 10121                           
 10122                           ;doprnt.c: 1317: if(val < hexpowers[c])
 10123  000F18  501C               	movf	i2printf@c,w,c
 10124  000F1A  0D02               	mullw	2
 10125  000F1C  0EBA               	movlw	low _hexpowers
 10126  000F1E  24F3               	addwf	prodl,w,c
 10127  000F20  6EF6               	movwf	tblptrl,c
 10128  000F22  0EFD               	movlw	high _hexpowers
 10129  000F24  20F4               	addwfc	prodh,w,c
 10130  000F26  6EF7               	movwf	tblptrh,c
 10131  000F28                     	if	0	;There are less than 3 active tblptr bytes
 10132  000F28                     	endif
 10133  000F28  0009               	tblrd		*+
 10134  000F2A  50F5               	movf	tablat,w,c
 10135  000F2C  5C17               	subwf	i2printf@val,w,c
 10136  000F2E  0009               	tblrd		*+
 10137  000F30  50F5               	movf	tablat,w,c
 10138  000F32  5818               	subwfb	i2printf@val+1,w,c
 10139  000F34  A0D8               	btfss	status,0,c
 10140  000F36  D00A               	goto	i2l3888
 10141                           
 10142                           ;doprnt.c: 1318: break;
 10143  000F38  2A1C               	incf	i2printf@c,f,c
 10144  000F3A  D7EA               	goto	i2l3872
 10145  000F3C                     i2l3886:
 10146  000F3C  5019               	movf	i2printf@flag,w,c
 10147  000F3E  0B80               	andlw	128
 10148                           
 10149                           ; Switch size 1, requested type "space"
 10150                           ; Number of cases is 2, Range of values is 0 to 128
 10151                           ; switch strategies available:
 10152                           ; Name         Instructions Cycles
 10153                           ; simple_byte            7     4 (average)
 10154                           ;	Chosen strategy is simple_byte
 10155  000F40  0A00               	xorlw	0	; case 0
 10156  000F42  B4D8               	btfsc	status,2,c
 10157  000F44  D7CB               	goto	i2l3856
 10158  000F46  0A80               	xorlw	128	; case 128
 10159  000F48  B4D8               	btfsc	status,2,c
 10160  000F4A  D7E0               	goto	i2l3870
 10161  000F4C                     i2l3888:
 10162                           
 10163                           ;doprnt.c: 1345: if(width && flag & 0x03)
 10164  000F4C  501A               	movf	i2printf@width,w,c
 10165  000F4E  101B               	iorwf	i2printf@width+1,w,c
 10166  000F50  B4D8               	btfsc	status,2,c
 10167  000F52  D009               	goto	i2l3894
 10168  000F54  C019  F00F         	movff	i2printf@flag,??i2_printf
 10169  000F58  0E03               	movlw	3
 10170  000F5A  160F               	andwf	??i2_printf,f,c
 10171  000F5C  B4D8               	btfsc	status,2,c
 10172  000F5E  D003               	goto	i2l3894
 10173                           
 10174                           ;doprnt.c: 1346: width--;
 10175  000F60  061A               	decf	i2printf@width,f,c
 10176  000F62  A0D8               	btfss	status,0,c
 10177  000F64  061B               	decf	i2printf@width+1,f,c
 10178  000F66                     i2l3894:
 10179                           
 10180                           ;doprnt.c: 1381: if(width > c)
 10181  000F66  0E80               	movlw	128
 10182  000F68  BE1C               	btfsc	i2printf@c,7,c
 10183  000F6A  0E7F               	movlw	127
 10184  000F6C  6E0F               	movwf	??i2_printf& (0+255),c
 10185  000F6E  501A               	movf	i2printf@width,w,c
 10186  000F70  5C1C               	subwf	i2printf@c,w,c
 10187  000F72  501B               	movf	i2printf@width+1,w,c
 10188  000F74  0A80               	xorlw	128
 10189  000F76  580F               	subwfb	??i2_printf& (0+255),w,c
 10190  000F78  B0D8               	btfsc	status,0,c
 10191  000F7A  D007               	goto	i2l3898
 10192                           
 10193                           ;doprnt.c: 1382: width -= c;
 10194  000F7C  501C               	movf	i2printf@c,w,c
 10195  000F7E  5E1A               	subwf	i2printf@width,f,c
 10196  000F80  0E00               	movlw	0
 10197  000F82  BE1C               	btfsc	i2printf@c,7,c
 10198  000F84  0EFF               	movlw	255
 10199  000F86  5A1B               	subwfb	i2printf@width+1,f,c
 10200  000F88  D004               	goto	i2l3900
 10201  000F8A                     i2l3898:
 10202                           
 10203                           ;doprnt.c: 1383: else
 10204                           ;doprnt.c: 1384: width = 0;
 10205  000F8A  0E00               	movlw	0
 10206  000F8C  6E1B               	movwf	i2printf@width+1,c
 10207  000F8E  0E00               	movlw	0
 10208  000F90  6E1A               	movwf	i2printf@width,c
 10209  000F92                     i2l3900:
 10210                           
 10211                           ;doprnt.c: 1387: if(flag & 0x04) {
 10212  000F92  A419               	btfss	i2printf@flag,2,c
 10213  000F94  D014               	goto	i2l3912
 10214                           
 10215                           ;doprnt.c: 1392: if(flag & 0x03)
 10216  000F96  C019  F00F         	movff	i2printf@flag,??i2_printf
 10217  000F9A  0E03               	movlw	3
 10218  000F9C  160F               	andwf	??i2_printf,f,c
 10219  000F9E  B4D8               	btfsc	status,2,c
 10220  000FA0  D003               	goto	i2l3906
 10221                           
 10222                           ;doprnt.c: 1393: (putch('-') );
 10223  000FA2  0E2D               	movlw	45
 10224  000FA4  EC39  F013         	call	i2_putch
 10225  000FA8                     i2l3906:
 10226                           
 10227                           ;doprnt.c: 1415: if(width)
 10228  000FA8  501A               	movf	i2printf@width,w,c
 10229  000FAA  101B               	iorwf	i2printf@width+1,w,c
 10230  000FAC  B4D8               	btfsc	status,2,c
 10231  000FAE  D01E               	goto	i2l3922
 10232                           
 10233                           ;doprnt.c: 1417: (putch('0') );
 10234                           
 10235                           ;doprnt.c: 1416: do
 10236  000FB0  0E30               	movlw	48
 10237  000FB2  EC39  F013         	call	i2_putch
 10238                           
 10239                           ;doprnt.c: 1418: while(--width);
 10240  000FB6  061A               	decf	i2printf@width,f,c
 10241  000FB8  A0D8               	btfss	status,0,c
 10242  000FBA  061B               	decf	i2printf@width+1,f,c
 10243  000FBC  D7F5               	goto	i2l3906
 10244  000FBE                     i2l3912:
 10245                           
 10246                           ;doprnt.c: 1422: {
 10247                           ;doprnt.c: 1424: if(width
 10248                           ;doprnt.c: 1428: )
 10249  000FBE  501A               	movf	i2printf@width,w,c
 10250  000FC0  101B               	iorwf	i2printf@width+1,w,c
 10251  000FC2  B4D8               	btfsc	status,2,c
 10252  000FC4  D00A               	goto	i2l3918
 10253  000FC6                     i2l3914:
 10254                           
 10255                           ;doprnt.c: 1430: (putch(' ') );
 10256  000FC6  0E20               	movlw	32
 10257  000FC8  EC39  F013         	call	i2_putch
 10258                           
 10259                           ;doprnt.c: 1431: while(--width);
 10260  000FCC  061A               	decf	i2printf@width,f,c
 10261  000FCE  A0D8               	btfss	status,0,c
 10262  000FD0  061B               	decf	i2printf@width+1,f,c
 10263  000FD2  501A               	movf	i2printf@width,w,c
 10264  000FD4  101B               	iorwf	i2printf@width+1,w,c
 10265  000FD6  A4D8               	btfss	status,2,c
 10266  000FD8  D7F6               	goto	i2l3914
 10267  000FDA                     i2l3918:
 10268                           
 10269                           ;doprnt.c: 1438: if(flag & 0x03)
 10270  000FDA  C019  F00F         	movff	i2printf@flag,??i2_printf
 10271  000FDE  0E03               	movlw	3
 10272  000FE0  160F               	andwf	??i2_printf,f,c
 10273  000FE2  B4D8               	btfsc	status,2,c
 10274  000FE4  D003               	goto	i2l3922
 10275                           
 10276                           ;doprnt.c: 1439: (putch('-') );
 10277  000FE6  0E2D               	movlw	45
 10278  000FE8  EC39  F013         	call	i2_putch
 10279  000FEC                     i2l3922:
 10280                           
 10281                           ;doprnt.c: 1469: }
 10282                           ;doprnt.c: 1472: prec = c;
 10283  000FEC  C01C  F016         	movff	i2printf@c,i2printf@prec
 10284                           
 10285                           ;doprnt.c: 1474: while(prec--) {
 10286  000FF0  D050               	goto	i2l3936
 10287  000FF2                     i2l3924:
 10288                           
 10289                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 10290  000FF2  5016               	movf	i2printf@prec,w,c
 10291  000FF4  0D02               	mullw	2
 10292  000FF6  0EB0               	movlw	low _dpowers
 10293  000FF8  24F3               	addwf	prodl,w,c
 10294  000FFA  6EF6               	movwf	tblptrl,c
 10295  000FFC  0EFD               	movlw	high _dpowers
 10296  000FFE  20F4               	addwfc	prodh,w,c
 10297  001000  6EF7               	movwf	tblptrh,c
 10298  001002                     	if	0	;There are less than 3 active tblptr bytes
 10299  001002                     	endif
 10300  001002  0009               	tblrd		*+
 10301  001004  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
 10302  001008  000A               	tblrd		*-
 10303  00100A  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 10304  00100E  C017  F001         	movff	i2printf@val,i2___lwdiv@dividend
 10305  001012  C018  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 10306  001016  EC58  F011         	call	i2___lwdiv	;wreg free
 10307  00101A  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
 10308  00101E  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 10309  001022  0E00               	movlw	0
 10310  001024  6E0B               	movwf	i2___lwmod@divisor+1,c
 10311  001026  0E0A               	movlw	10
 10312  001028  6E0A               	movwf	i2___lwmod@divisor,c
 10313  00102A  EC13  F012         	call	i2___lwmod	;wreg free
 10314  00102E  5008               	movf	?i2___lwmod,w,c
 10315  001030  0F30               	addlw	48
 10316  001032  6E1C               	movwf	i2printf@c,c
 10317                           
 10318                           ;doprnt.c: 1491: break;
 10319  001034  D02B               	goto	i2l3934
 10320  001036                     i2l3926:
 10321                           
 10322                           ;doprnt.c: 1499: {
 10323                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 10324  001036  C017  F001         	movff	i2printf@val,i2___lwdiv@dividend
 10325  00103A  C018  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 10326  00103E  5016               	movf	i2printf@prec,w,c
 10327  001040  0D02               	mullw	2
 10328  001042  0EBA               	movlw	low _hexpowers
 10329  001044  24F3               	addwf	prodl,w,c
 10330  001046  6EF6               	movwf	tblptrl,c
 10331  001048  0EFD               	movlw	high _hexpowers
 10332  00104A  20F4               	addwfc	prodh,w,c
 10333  00104C  6EF7               	movwf	tblptrh,c
 10334  00104E                     	if	0	;There are less than 3 active tblptr bytes
 10335  00104E                     	endif
 10336  00104E  0009               	tblrd		*+
 10337  001050  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
 10338  001054  000A               	tblrd		*-
 10339  001056  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 10340  00105A  EC58  F011         	call	i2___lwdiv	;wreg free
 10341  00105E  5001               	movf	?i2___lwdiv,w,c
 10342  001060  0B0F               	andlw	15
 10343  001062  6E13               	movwf	i2printf@idx,c
 10344                           
 10345                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 10346  001064  5013               	movf	i2printf@idx,w,c
 10347  001066  0D01               	mullw	1
 10348  001068  0E8A               	movlw	low STR_39
 10349  00106A  24F3               	addwf	prodl,w,c
 10350  00106C  6EF6               	movwf	tblptrl,c
 10351  00106E  0EFE               	movlw	high STR_39
 10352  001070  20F4               	addwfc	prodh,w,c
 10353  001072  6EF7               	movwf	tblptrh,c
 10354  001074                     	if	0	;There are less than 3 active tblptr bytes
 10355  001074                     	endif
 10356  001074  0008               	tblrd		*
 10357  001076  CFF5 F01C          	movff	tablat,i2printf@c
 10358                           
 10359                           ;doprnt.c: 1523: }
 10360                           
 10361                           ;doprnt.c: 1508: }
 10362                           ;doprnt.c: 1510: break;
 10363  00107A  D008               	goto	i2l3934
 10364  00107C                     i2l3932:
 10365  00107C  5019               	movf	i2printf@flag,w,c
 10366  00107E  0B80               	andlw	128
 10367                           
 10368                           ; Switch size 1, requested type "space"
 10369                           ; Number of cases is 2, Range of values is 0 to 128
 10370                           ; switch strategies available:
 10371                           ; Name         Instructions Cycles
 10372                           ; simple_byte            7     4 (average)
 10373                           ;	Chosen strategy is simple_byte
 10374  001080  0A00               	xorlw	0	; case 0
 10375  001082  B4D8               	btfsc	status,2,c
 10376  001084  D7B6               	goto	i2l3924
 10377  001086  0A80               	xorlw	128	; case 128
 10378  001088  B4D8               	btfsc	status,2,c
 10379  00108A  D7D5               	goto	i2l3926
 10380  00108C                     i2l3934:
 10381                           
 10382                           ;doprnt.c: 1524: (putch(c) );
 10383  00108C  501C               	movf	i2printf@c,w,c
 10384  00108E  EC39  F013         	call	i2_putch
 10385  001092                     i2l3936:
 10386  001092  0616               	decf	i2printf@prec,f,c
 10387  001094  2816               	incf	i2printf@prec,w,c
 10388  001096  A4D8               	btfss	status,2,c
 10389  001098  D7F1               	goto	i2l3932
 10390  00109A                     i2l3938:
 10391  00109A  C00D  FFF6         	movff	i2printf@f,tblptrl
 10392  00109E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 10393  0010A2  4A0D               	infsnz	i2printf@f,f,c
 10394  0010A4  2A0E               	incf	i2printf@f+1,f,c
 10395  0010A6                     	if	0	;tblptru may be non-zero
 10396  0010A6                     	endif
 10397  0010A6                     	if	0	;tblptru may be non-zero
 10398  0010A6                     	endif
 10399  0010A6  0008               	tblrd		*
 10400  0010A8  CFF5 F01C          	movff	tablat,i2printf@c
 10401  0010AC  501C               	movf	i2printf@c,w,c
 10402  0010AE  B4D8               	btfsc	status,2,c
 10403  0010B0  0012               	return	
 10404  0010B2  D67F               	goto	i2l3812
 10405  0010B4                     __end_ofi2_printf:
 10406                           	opt stack 0
 10407                           pclatu	equ	0xFFB
 10408                           pclath	equ	0xFFA
 10409                           tblptru	equ	0xFF8
 10410                           tblptrh	equ	0xFF7
 10411                           tblptrl	equ	0xFF6
 10412                           tablat	equ	0xFF5
 10413                           prodh	equ	0xFF4
 10414                           prodl	equ	0xFF3
 10415                           intcon	equ	0xFF2
 10416                           intcon2	equ	0xFF1
 10417                           intcon3	equ	0xFF0
 10418                           postinc0	equ	0xFEE
 10419                           fsr0h	equ	0xFEA
 10420                           fsr0l	equ	0xFE9
 10421                           wreg	equ	0xFE8
 10422                           fsr1h	equ	0xFE2
 10423                           fsr1l	equ	0xFE1
 10424                           indf2	equ	0xFDF
 10425                           postinc2	equ	0xFDE
 10426                           postdec2	equ	0xFDD
 10427                           fsr2h	equ	0xFDA
 10428                           fsr2l	equ	0xFD9
 10429                           status	equ	0xFD8
 10430                           
 10431 ;; *************** function i2_putch *****************
 10432 ;; Defined at:
 10433 ;;		line 23 in file "../lcd.c"
 10434 ;; Parameters:    Size  Location     Type
 10435 ;;  data            1    wreg     unsigned char 
 10436 ;; Auto vars:     Size  Location     Type
 10437 ;;  data            1    2[COMRAM] unsigned char 
 10438 ;; Return value:  Size  Location     Type
 10439 ;;                  1    wreg      void 
 10440 ;; Registers used:
 10441 ;;		wreg, status,2, status,0, cstack
 10442 ;; Tracked objects:
 10443 ;;		On entry : 0/0
 10444 ;;		On exit  : 0/0
 10445 ;;		Unchanged: 0/0
 10446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10447 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10448 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10449 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10450 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10451 ;;Total ram usage:        1 bytes
 10452 ;; Hardware stack levels used:    1
 10453 ;; Hardware stack levels required when called:    1
 10454 ;; This function calls:
 10455 ;;		i2_lcdNibble
 10456 ;; This function is called by:
 10457 ;;		i2_printf
 10458 ;; This function uses a non-reentrant model
 10459 ;;
 10460                           
 10461                           	psect	text36
 10462  002672                     __ptext36:
 10463                           	opt stack 0
 10464  002672                     i2_putch:
 10465                           	opt stack 22
 10466                           
 10467                           ;incstack = 0
 10468                           ;i2putch@data stored from wreg
 10469  002672  6E03               	movwf	i2putch@data,c
 10470                           
 10471                           ;lcd.c: 24: LATDbits.LATD2 = 1;
 10472  002674  848C               	bsf	3980,2,c	;volatile
 10473                           
 10474                           ;lcd.c: 25: lcdNibble(data);
 10475  002676  5003               	movf	i2putch@data,w,c
 10476  002678  ECA8  F011         	call	i2_lcdNibble
 10477  00267C  0012               	return		;funcret
 10478  00267E                     __end_ofi2_putch:
 10479                           	opt stack 0
 10480                           pclatu	equ	0xFFB
 10481                           pclath	equ	0xFFA
 10482                           tblptru	equ	0xFF8
 10483                           tblptrh	equ	0xFF7
 10484                           tblptrl	equ	0xFF6
 10485                           tablat	equ	0xFF5
 10486                           prodh	equ	0xFF4
 10487                           prodl	equ	0xFF3
 10488                           intcon	equ	0xFF2
 10489                           intcon2	equ	0xFF1
 10490                           intcon3	equ	0xFF0
 10491                           postinc0	equ	0xFEE
 10492                           fsr0h	equ	0xFEA
 10493                           fsr0l	equ	0xFE9
 10494                           wreg	equ	0xFE8
 10495                           fsr1h	equ	0xFE2
 10496                           fsr1l	equ	0xFE1
 10497                           indf2	equ	0xFDF
 10498                           postinc2	equ	0xFDE
 10499                           postdec2	equ	0xFDD
 10500                           fsr2h	equ	0xFDA
 10501                           fsr2l	equ	0xFD9
 10502                           status	equ	0xFD8
 10503                           
 10504 ;; *************** function i2_isdigit *****************
 10505 ;; Defined at:
 10506 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 10507 ;; Parameters:    Size  Location     Type
 10508 ;;  c               1    wreg     unsigned char 
 10509 ;; Auto vars:     Size  Location     Type
 10510 ;;  c               1    2[COMRAM] unsigned char 
 10511 ;; Return value:  Size  Location     Type
 10512 ;;		None               void
 10513 ;; Registers used:
 10514 ;;		wreg, status,2, status,0
 10515 ;; Tracked objects:
 10516 ;;		On entry : 0/0
 10517 ;;		On exit  : 0/0
 10518 ;;		Unchanged: 0/0
 10519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10520 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10521 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10522 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10523 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10524 ;;Total ram usage:        3 bytes
 10525 ;; Hardware stack levels used:    1
 10526 ;; This function calls:
 10527 ;;		Nothing
 10528 ;; This function is called by:
 10529 ;;		i2_printf
 10530 ;; This function uses a non-reentrant model
 10531 ;;
 10532                           
 10533                           	psect	text37
 10534  0025A2                     __ptext37:
 10535                           	opt stack 0
 10536  0025A2                     i2_isdigit:
 10537                           	opt stack 23
 10538                           
 10539                           ;incstack = 0
 10540                           ;i2isdigit@c stored from wreg
 10541  0025A2  6E03               	movwf	i2isdigit@c,c
 10542  0025A4  0E00               	movlw	0
 10543  0025A6  6E02               	movwf	i2_isdigit$1124,c
 10544  0025A8  0E3A               	movlw	58
 10545  0025AA  6003               	cpfslt	i2isdigit@c,c
 10546  0025AC  D005               	goto	i2l3322
 10547  0025AE  0E2F               	movlw	47
 10548  0025B0  6403               	cpfsgt	i2isdigit@c,c
 10549  0025B2  D002               	goto	i2l3322
 10550  0025B4  0E01               	movlw	1
 10551  0025B6  6E02               	movwf	i2_isdigit$1124,c
 10552  0025B8                     i2l3322:
 10553  0025B8  C002  F001         	movff	i2_isdigit$1124,??i2_isdigit
 10554  0025BC  3001               	rrcf	??i2_isdigit,w,c
 10555  0025BE  0012               	return	
 10556  0025C0                     __end_ofi2_isdigit:
 10557                           	opt stack 0
 10558                           pclatu	equ	0xFFB
 10559                           pclath	equ	0xFFA
 10560                           tblptru	equ	0xFF8
 10561                           tblptrh	equ	0xFF7
 10562                           tblptrl	equ	0xFF6
 10563                           tablat	equ	0xFF5
 10564                           prodh	equ	0xFF4
 10565                           prodl	equ	0xFF3
 10566                           intcon	equ	0xFF2
 10567                           intcon2	equ	0xFF1
 10568                           intcon3	equ	0xFF0
 10569                           postinc0	equ	0xFEE
 10570                           fsr0h	equ	0xFEA
 10571                           fsr0l	equ	0xFE9
 10572                           wreg	equ	0xFE8
 10573                           fsr1h	equ	0xFE2
 10574                           fsr1l	equ	0xFE1
 10575                           indf2	equ	0xFDF
 10576                           postinc2	equ	0xFDE
 10577                           postdec2	equ	0xFDD
 10578                           fsr2h	equ	0xFDA
 10579                           fsr2l	equ	0xFD9
 10580                           status	equ	0xFD8
 10581                           
 10582 ;; *************** function i2___wmul *****************
 10583 ;; Defined at:
 10584 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 10585 ;; Parameters:    Size  Location     Type
 10586 ;;  multiplier      2    0[COMRAM] unsigned int 
 10587 ;;  multiplicand    2    2[COMRAM] unsigned int 
 10588 ;; Auto vars:     Size  Location     Type
 10589 ;;  __wmul          2    4[COMRAM] unsigned int 
 10590 ;; Return value:  Size  Location     Type
 10591 ;;                  2    0[COMRAM] unsigned int 
 10592 ;; Registers used:
 10593 ;;		wreg, status,2, status,0, prodl, prodh
 10594 ;; Tracked objects:
 10595 ;;		On entry : 0/0
 10596 ;;		On exit  : 0/0
 10597 ;;		Unchanged: 0/0
 10598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10599 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10600 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10601 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10602 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10603 ;;Total ram usage:        6 bytes
 10604 ;; Hardware stack levels used:    1
 10605 ;; This function calls:
 10606 ;;		Nothing
 10607 ;; This function is called by:
 10608 ;;		i2_printf
 10609 ;; This function uses a non-reentrant model
 10610 ;;
 10611                           
 10612                           	psect	text38
 10613  002538                     __ptext38:
 10614                           	opt stack 0
 10615  002538                     i2___wmul:
 10616                           	opt stack 23
 10617                           
 10618                           ;incstack = 0
 10619  002538  5001               	movf	i2___wmul@multiplier,w,c
 10620  00253A  0203               	mulwf	i2___wmul@multiplicand,c
 10621  00253C  CFF3 F005          	movff	prodl,i2___wmul@product
 10622  002540  CFF4 F006          	movff	prodh,i2___wmul@product+1
 10623  002544  5001               	movf	i2___wmul@multiplier,w,c
 10624  002546  0204               	mulwf	i2___wmul@multiplicand+1,c
 10625  002548  50F3               	movf	prodl,w,c
 10626  00254A  2606               	addwf	i2___wmul@product+1,f,c
 10627  00254C  5002               	movf	i2___wmul@multiplier+1,w,c
 10628  00254E  0203               	mulwf	i2___wmul@multiplicand,c
 10629  002550  50F3               	movf	prodl,w,c
 10630  002552  2606               	addwf	i2___wmul@product+1,f,c
 10631  002554  C005  F001         	movff	i2___wmul@product,?i2___wmul
 10632  002558  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 10633  00255C  0012               	return	
 10634  00255E                     __end_ofi2___wmul:
 10635                           	opt stack 0
 10636                           pclatu	equ	0xFFB
 10637                           pclath	equ	0xFFA
 10638                           tblptru	equ	0xFF8
 10639                           tblptrh	equ	0xFF7
 10640                           tblptrl	equ	0xFF6
 10641                           tablat	equ	0xFF5
 10642                           prodh	equ	0xFF4
 10643                           prodl	equ	0xFF3
 10644                           intcon	equ	0xFF2
 10645                           intcon2	equ	0xFF1
 10646                           intcon3	equ	0xFF0
 10647                           postinc0	equ	0xFEE
 10648                           fsr0h	equ	0xFEA
 10649                           fsr0l	equ	0xFE9
 10650                           wreg	equ	0xFE8
 10651                           fsr1h	equ	0xFE2
 10652                           fsr1l	equ	0xFE1
 10653                           indf2	equ	0xFDF
 10654                           postinc2	equ	0xFDE
 10655                           postdec2	equ	0xFDD
 10656                           fsr2h	equ	0xFDA
 10657                           fsr2l	equ	0xFD9
 10658                           status	equ	0xFD8
 10659                           
 10660 ;; *************** function i2___lwmod *****************
 10661 ;; Defined at:
 10662 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 10663 ;; Parameters:    Size  Location     Type
 10664 ;;  dividend        2    7[COMRAM] unsigned int 
 10665 ;;  divisor         2    9[COMRAM] unsigned int 
 10666 ;; Auto vars:     Size  Location     Type
 10667 ;;  __lwmod         1   11[COMRAM] unsigned char 
 10668 ;; Return value:  Size  Location     Type
 10669 ;;                  2    7[COMRAM] unsigned int 
 10670 ;; Registers used:
 10671 ;;		wreg, status,2, status,0
 10672 ;; Tracked objects:
 10673 ;;		On entry : 0/0
 10674 ;;		On exit  : 0/0
 10675 ;;		Unchanged: 0/0
 10676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10677 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10678 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10680 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10681 ;;Total ram usage:        5 bytes
 10682 ;; Hardware stack levels used:    1
 10683 ;; This function calls:
 10684 ;;		Nothing
 10685 ;; This function is called by:
 10686 ;;		i2_printf
 10687 ;; This function uses a non-reentrant model
 10688 ;;
 10689                           
 10690                           	psect	text39
 10691  002426                     __ptext39:
 10692                           	opt stack 0
 10693  002426                     i2___lwmod:
 10694                           	opt stack 23
 10695                           
 10696                           ;incstack = 0
 10697  002426  500A               	movf	i2___lwmod@divisor,w,c
 10698  002428  100B               	iorwf	i2___lwmod@divisor+1,w,c
 10699  00242A  B4D8               	btfsc	status,2,c
 10700  00242C  D018               	goto	i2l989
 10701  00242E  0E01               	movlw	1
 10702  002430  6E0C               	movwf	i2___lwmod@counter,c
 10703  002432  D004               	goto	i2l3354
 10704  002434                     i2l3352:
 10705  002434  90D8               	bcf	status,0,c
 10706  002436  360A               	rlcf	i2___lwmod@divisor,f,c
 10707  002438  360B               	rlcf	i2___lwmod@divisor+1,f,c
 10708  00243A  2A0C               	incf	i2___lwmod@counter,f,c
 10709  00243C                     i2l3354:
 10710  00243C  AE0B               	btfss	i2___lwmod@divisor+1,7,c
 10711  00243E  D7FA               	goto	i2l3352
 10712  002440                     i2l3356:
 10713  002440  500A               	movf	i2___lwmod@divisor,w,c
 10714  002442  5C08               	subwf	i2___lwmod@dividend,w,c
 10715  002444  500B               	movf	i2___lwmod@divisor+1,w,c
 10716  002446  5809               	subwfb	i2___lwmod@dividend+1,w,c
 10717  002448  A0D8               	btfss	status,0,c
 10718  00244A  D004               	goto	i2l3360
 10719  00244C  500A               	movf	i2___lwmod@divisor,w,c
 10720  00244E  5E08               	subwf	i2___lwmod@dividend,f,c
 10721  002450  500B               	movf	i2___lwmod@divisor+1,w,c
 10722  002452  5A09               	subwfb	i2___lwmod@dividend+1,f,c
 10723  002454                     i2l3360:
 10724  002454  90D8               	bcf	status,0,c
 10725  002456  320B               	rrcf	i2___lwmod@divisor+1,f,c
 10726  002458  320A               	rrcf	i2___lwmod@divisor,f,c
 10727  00245A  2E0C               	decfsz	i2___lwmod@counter,f,c
 10728  00245C  D7F1               	goto	i2l3356
 10729  00245E                     i2l989:
 10730  00245E  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
 10731  002462  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 10732  002466  0012               	return		;funcret
 10733  002468                     __end_ofi2___lwmod:
 10734                           	opt stack 0
 10735                           pclatu	equ	0xFFB
 10736                           pclath	equ	0xFFA
 10737                           tblptru	equ	0xFF8
 10738                           tblptrh	equ	0xFF7
 10739                           tblptrl	equ	0xFF6
 10740                           tablat	equ	0xFF5
 10741                           prodh	equ	0xFF4
 10742                           prodl	equ	0xFF3
 10743                           intcon	equ	0xFF2
 10744                           intcon2	equ	0xFF1
 10745                           intcon3	equ	0xFF0
 10746                           postinc0	equ	0xFEE
 10747                           fsr0h	equ	0xFEA
 10748                           fsr0l	equ	0xFE9
 10749                           wreg	equ	0xFE8
 10750                           fsr1h	equ	0xFE2
 10751                           fsr1l	equ	0xFE1
 10752                           indf2	equ	0xFDF
 10753                           postinc2	equ	0xFDE
 10754                           postdec2	equ	0xFDD
 10755                           fsr2h	equ	0xFDA
 10756                           fsr2l	equ	0xFD9
 10757                           status	equ	0xFD8
 10758                           
 10759 ;; *************** function i2___lwdiv *****************
 10760 ;; Defined at:
 10761 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 10762 ;; Parameters:    Size  Location     Type
 10763 ;;  dividend        2    0[COMRAM] unsigned int 
 10764 ;;  divisor         2    2[COMRAM] unsigned int 
 10765 ;; Auto vars:     Size  Location     Type
 10766 ;;  __lwdiv         2    4[COMRAM] unsigned int 
 10767 ;;  __lwdiv         1    6[COMRAM] unsigned char 
 10768 ;; Return value:  Size  Location     Type
 10769 ;;                  2    0[COMRAM] unsigned int 
 10770 ;; Registers used:
 10771 ;;		wreg, status,2, status,0
 10772 ;; Tracked objects:
 10773 ;;		On entry : 0/0
 10774 ;;		On exit  : 0/0
 10775 ;;		Unchanged: 0/0
 10776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10777 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10778 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10779 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10780 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10781 ;;Total ram usage:        7 bytes
 10782 ;; Hardware stack levels used:    1
 10783 ;; This function calls:
 10784 ;;		Nothing
 10785 ;; This function is called by:
 10786 ;;		i2_printf
 10787 ;; This function uses a non-reentrant model
 10788 ;;
 10789                           
 10790                           	psect	text40
 10791  0022B0                     __ptext40:
 10792                           	opt stack 0
 10793  0022B0                     i2___lwdiv:
 10794                           	opt stack 23
 10795                           
 10796                           ;incstack = 0
 10797  0022B0  0E00               	movlw	0
 10798  0022B2  6E06               	movwf	i2___lwdiv@quotient+1,c
 10799  0022B4  0E00               	movlw	0
 10800  0022B6  6E05               	movwf	i2___lwdiv@quotient,c
 10801  0022B8  5003               	movf	i2___lwdiv@divisor,w,c
 10802  0022BA  1004               	iorwf	i2___lwdiv@divisor+1,w,c
 10803  0022BC  B4D8               	btfsc	status,2,c
 10804  0022BE  D01C               	goto	i2l979
 10805  0022C0  0E01               	movlw	1
 10806  0022C2  6E07               	movwf	i2___lwdiv@counter,c
 10807  0022C4  D004               	goto	i2l3334
 10808  0022C6                     i2l3332:
 10809  0022C6  90D8               	bcf	status,0,c
 10810  0022C8  3603               	rlcf	i2___lwdiv@divisor,f,c
 10811  0022CA  3604               	rlcf	i2___lwdiv@divisor+1,f,c
 10812  0022CC  2A07               	incf	i2___lwdiv@counter,f,c
 10813  0022CE                     i2l3334:
 10814  0022CE  AE04               	btfss	i2___lwdiv@divisor+1,7,c
 10815  0022D0  D7FA               	goto	i2l3332
 10816  0022D2                     i2l3336:
 10817  0022D2  90D8               	bcf	status,0,c
 10818  0022D4  3605               	rlcf	i2___lwdiv@quotient,f,c
 10819  0022D6  3606               	rlcf	i2___lwdiv@quotient+1,f,c
 10820  0022D8  5003               	movf	i2___lwdiv@divisor,w,c
 10821  0022DA  5C01               	subwf	i2___lwdiv@dividend,w,c
 10822  0022DC  5004               	movf	i2___lwdiv@divisor+1,w,c
 10823  0022DE  5802               	subwfb	i2___lwdiv@dividend+1,w,c
 10824  0022E0  A0D8               	btfss	status,0,c
 10825  0022E2  D005               	goto	i2l3344
 10826  0022E4  5003               	movf	i2___lwdiv@divisor,w,c
 10827  0022E6  5E01               	subwf	i2___lwdiv@dividend,f,c
 10828  0022E8  5004               	movf	i2___lwdiv@divisor+1,w,c
 10829  0022EA  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
 10830  0022EC  8005               	bsf	i2___lwdiv@quotient,0,c
 10831  0022EE                     i2l3344:
 10832  0022EE  90D8               	bcf	status,0,c
 10833  0022F0  3204               	rrcf	i2___lwdiv@divisor+1,f,c
 10834  0022F2  3203               	rrcf	i2___lwdiv@divisor,f,c
 10835  0022F4  2E07               	decfsz	i2___lwdiv@counter,f,c
 10836  0022F6  D7ED               	goto	i2l3336
 10837  0022F8                     i2l979:
 10838  0022F8  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
 10839  0022FC  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 10840  002300  0012               	return		;funcret
 10841  002302                     __end_ofi2___lwdiv:
 10842                           	opt stack 0
 10843                           pclatu	equ	0xFFB
 10844                           pclath	equ	0xFFA
 10845                           tblptru	equ	0xFF8
 10846                           tblptrh	equ	0xFF7
 10847                           tblptrl	equ	0xFF6
 10848                           tablat	equ	0xFF5
 10849                           prodh	equ	0xFF4
 10850                           prodl	equ	0xFF3
 10851                           intcon	equ	0xFF2
 10852                           intcon2	equ	0xFF1
 10853                           intcon3	equ	0xFF0
 10854                           postinc0	equ	0xFEE
 10855                           fsr0h	equ	0xFEA
 10856                           fsr0l	equ	0xFE9
 10857                           wreg	equ	0xFE8
 10858                           fsr1h	equ	0xFE2
 10859                           fsr1l	equ	0xFE1
 10860                           indf2	equ	0xFDF
 10861                           postinc2	equ	0xFDE
 10862                           postdec2	equ	0xFDD
 10863                           fsr2h	equ	0xFDA
 10864                           fsr2l	equ	0xFD9
 10865                           status	equ	0xFD8
 10866                           
 10867 ;; *************** function i2_lcdInst *****************
 10868 ;; Defined at:
 10869 ;;		line 18 in file "../lcd.c"
 10870 ;; Parameters:    Size  Location     Type
 10871 ;;  data            1    wreg     unsigned char 
 10872 ;; Auto vars:     Size  Location     Type
 10873 ;;  data            1    2[COMRAM] unsigned char 
 10874 ;; Return value:  Size  Location     Type
 10875 ;;                  1    wreg      void 
 10876 ;; Registers used:
 10877 ;;		wreg, status,2, status,0, cstack
 10878 ;; Tracked objects:
 10879 ;;		On entry : 0/0
 10880 ;;		On exit  : 0/0
 10881 ;;		Unchanged: 0/0
 10882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10883 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10884 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10885 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10886 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10887 ;;Total ram usage:        1 bytes
 10888 ;; Hardware stack levels used:    1
 10889 ;; Hardware stack levels required when called:    1
 10890 ;; This function calls:
 10891 ;;		i2_lcdNibble
 10892 ;; This function is called by:
 10893 ;;		_keypressed
 10894 ;; This function uses a non-reentrant model
 10895 ;;
 10896                           
 10897                           	psect	text41
 10898  00267E                     __ptext41:
 10899                           	opt stack 0
 10900  00267E                     i2_lcdInst:
 10901                           	opt stack 23
 10902                           
 10903                           ;incstack = 0
 10904                           ;i2lcdInst@data stored from wreg
 10905  00267E  6E03               	movwf	i2lcdInst@data,c
 10906                           
 10907                           ;lcd.c: 19: LATDbits.LATD2 = 0;
 10908  002680  948C               	bcf	3980,2,c	;volatile
 10909                           
 10910                           ;lcd.c: 20: lcdNibble(data);
 10911  002682  5003               	movf	i2lcdInst@data,w,c
 10912  002684  ECA8  F011         	call	i2_lcdNibble
 10913  002688  0012               	return		;funcret
 10914  00268A                     __end_ofi2_lcdInst:
 10915                           	opt stack 0
 10916                           pclatu	equ	0xFFB
 10917                           pclath	equ	0xFFA
 10918                           tblptru	equ	0xFF8
 10919                           tblptrh	equ	0xFF7
 10920                           tblptrl	equ	0xFF6
 10921                           tablat	equ	0xFF5
 10922                           prodh	equ	0xFF4
 10923                           prodl	equ	0xFF3
 10924                           intcon	equ	0xFF2
 10925                           intcon2	equ	0xFF1
 10926                           intcon3	equ	0xFF0
 10927                           postinc0	equ	0xFEE
 10928                           fsr0h	equ	0xFEA
 10929                           fsr0l	equ	0xFE9
 10930                           wreg	equ	0xFE8
 10931                           fsr1h	equ	0xFE2
 10932                           fsr1l	equ	0xFE1
 10933                           indf2	equ	0xFDF
 10934                           postinc2	equ	0xFDE
 10935                           postdec2	equ	0xFDD
 10936                           fsr2h	equ	0xFDA
 10937                           fsr2l	equ	0xFD9
 10938                           status	equ	0xFD8
 10939                           
 10940 ;; *************** function i2_lcdNibble *****************
 10941 ;; Defined at:
 10942 ;;		line 28 in file "../lcd.c"
 10943 ;; Parameters:    Size  Location     Type
 10944 ;;  data            1    wreg     unsigned char 
 10945 ;; Auto vars:     Size  Location     Type
 10946 ;;  data            1    1[COMRAM] unsigned char 
 10947 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 10948 ;; Return value:  Size  Location     Type
 10949 ;;                  1    wreg      void 
 10950 ;; Registers used:
 10951 ;;		wreg, status,2, status,0
 10952 ;; Tracked objects:
 10953 ;;		On entry : 0/0
 10954 ;;		On exit  : 0/0
 10955 ;;		Unchanged: 0/0
 10956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10957 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10958 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10959 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10960 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10961 ;;Total ram usage:        2 bytes
 10962 ;; Hardware stack levels used:    1
 10963 ;; This function calls:
 10964 ;;		Nothing
 10965 ;; This function is called by:
 10966 ;;		i2_lcdInst
 10967 ;;		i2_putch
 10968 ;; This function uses a non-reentrant model
 10969 ;;
 10970                           
 10971                           	psect	text42
 10972  002350                     __ptext42:
 10973                           	opt stack 0
 10974  002350                     i2_lcdNibble:
 10975                           	opt stack 22
 10976                           
 10977                           ;incstack = 0
 10978                           ;i2lcdNibble@data stored from wreg
 10979  002350  6E02               	movwf	i2lcdNibble@data,c
 10980                           
 10981                           ;lcd.c: 30: char temp = data & 0xF0;
 10982  002352  5002               	movf	i2lcdNibble@data,w,c
 10983  002354  0BF0               	andlw	240
 10984  002356  6E01               	movwf	i2lcdNibble@temp,c
 10985                           
 10986                           ;lcd.c: 31: LATD = LATD & 0x0F;
 10987  002358  508C               	movf	3980,w,c	;volatile
 10988  00235A  0B0F               	andlw	15
 10989  00235C  6E8C               	movwf	3980,c	;volatile
 10990                           
 10991                           ;lcd.c: 32: LATD = temp | LATD;
 10992  00235E  5001               	movf	i2lcdNibble@temp,w,c
 10993  002360  108C               	iorwf	3980,w,c	;volatile
 10994  002362  6E8C               	movwf	3980,c	;volatile
 10995                           
 10996                           ;lcd.c: 34: LATDbits.LATD3 = 0;
 10997  002364  968C               	bcf	3980,3,c	;volatile
 10998                           
 10999                           ;lcd.c: 35: _delay((unsigned long)((30)*(10000000/4000000.0)));
 11000  002366  0E19               	movlw	25
 11001  002368                     i2u601_47:
 11002  002368  2EE8               	decfsz	wreg,f,c
 11003  00236A  D7FE               	bra	i2u601_47
 11004                           
 11005                           ;lcd.c: 36: LATDbits.LATD3 = 1;
 11006  00236C  868C               	bsf	3980,3,c	;volatile
 11007                           
 11008                           ;lcd.c: 37: _delay((unsigned long)((30)*(10000000/4000000.0)));
 11009  00236E  0E19               	movlw	25
 11010  002370                     i2u602_47:
 11011  002370  2EE8               	decfsz	wreg,f,c
 11012  002372  D7FE               	bra	i2u602_47
 11013                           
 11014                           ;lcd.c: 39: data = data << 4;
 11015  002374  3802               	swapf	i2lcdNibble@data,w,c
 11016  002376  0BF0               	andlw	240
 11017  002378  6E02               	movwf	i2lcdNibble@data,c
 11018                           
 11019                           ;lcd.c: 41: temp = data & 0xF0;
 11020  00237A  5002               	movf	i2lcdNibble@data,w,c
 11021  00237C  0BF0               	andlw	240
 11022  00237E  6E01               	movwf	i2lcdNibble@temp,c
 11023                           
 11024                           ;lcd.c: 42: LATD = LATD & 0x0F;
 11025  002380  508C               	movf	3980,w,c	;volatile
 11026  002382  0B0F               	andlw	15
 11027  002384  6E8C               	movwf	3980,c	;volatile
 11028                           
 11029                           ;lcd.c: 43: LATD = temp | LATD;
 11030  002386  5001               	movf	i2lcdNibble@temp,w,c
 11031  002388  108C               	iorwf	3980,w,c	;volatile
 11032  00238A  6E8C               	movwf	3980,c	;volatile
 11033                           
 11034                           ;lcd.c: 45: LATDbits.LATD3 = 0;
 11035  00238C  968C               	bcf	3980,3,c	;volatile
 11036                           
 11037                           ;lcd.c: 46: _delay((unsigned long)((30)*(10000000/4000000.0)));
 11038  00238E  0E19               	movlw	25
 11039  002390                     i2u603_47:
 11040  002390  2EE8               	decfsz	wreg,f,c
 11041  002392  D7FE               	bra	i2u603_47
 11042                           
 11043                           ;lcd.c: 47: LATDbits.LATD3 = 1;
 11044  002394  868C               	bsf	3980,3,c	;volatile
 11045                           
 11046                           ;lcd.c: 48: _delay((unsigned long)((30)*(10000000/4000000.0)));
 11047  002396  0E19               	movlw	25
 11048  002398                     i2u604_47:
 11049  002398  2EE8               	decfsz	wreg,f,c
 11050  00239A  D7FE               	bra	i2u604_47
 11051  00239C  0012               	return		;funcret
 11052  00239E                     __end_ofi2_lcdNibble:
 11053                           	opt stack 0
 11054                           pclatu	equ	0xFFB
 11055                           pclath	equ	0xFFA
 11056                           tblptru	equ	0xFF8
 11057                           tblptrh	equ	0xFF7
 11058                           tblptrl	equ	0xFF6
 11059                           tablat	equ	0xFF5
 11060                           prodh	equ	0xFF4
 11061                           prodl	equ	0xFF3
 11062                           intcon	equ	0xFF2
 11063                           intcon2	equ	0xFF1
 11064                           intcon3	equ	0xFF0
 11065                           postinc0	equ	0xFEE
 11066                           fsr0h	equ	0xFEA
 11067                           fsr0l	equ	0xFE9
 11068                           wreg	equ	0xFE8
 11069                           fsr1h	equ	0xFE2
 11070                           fsr1l	equ	0xFE1
 11071                           indf2	equ	0xFDF
 11072                           postinc2	equ	0xFDE
 11073                           postdec2	equ	0xFDD
 11074                           fsr2h	equ	0xFDA
 11075                           fsr2l	equ	0xFD9
 11076                           status	equ	0xFD8
 11077                           
 11078 ;; *************** function i2_I2C_Master_Write *****************
 11079 ;; Defined at:
 11080 ;;		line 39 in file "../I2C.c"
 11081 ;; Parameters:    Size  Location     Type
 11082 ;;  d               2    1[COMRAM] unsigned int 
 11083 ;; Auto vars:     Size  Location     Type
 11084 ;;		None
 11085 ;; Return value:  Size  Location     Type
 11086 ;;                  1    wreg      void 
 11087 ;; Registers used:
 11088 ;;		wreg, status,2, status,0, cstack
 11089 ;; Tracked objects:
 11090 ;;		On entry : 0/0
 11091 ;;		On exit  : 0/0
 11092 ;;		Unchanged: 0/0
 11093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11094 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11095 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11096 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11097 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11098 ;;Total ram usage:        2 bytes
 11099 ;; Hardware stack levels used:    1
 11100 ;; Hardware stack levels required when called:    1
 11101 ;; This function calls:
 11102 ;;		i2_I2C_Master_Wait
 11103 ;; This function is called by:
 11104 ;;		_keypressed
 11105 ;; This function uses a non-reentrant model
 11106 ;;
 11107                           
 11108                           	psect	text43
 11109  002694                     __ptext43:
 11110                           	opt stack 0
 11111  002694                     i2_I2C_Master_Write:
 11112                           	opt stack 23
 11113                           
 11114                           ;I2C.c: 41: I2C_Master_Wait();
 11115                           
 11116                           ;incstack = 0
 11117  002694  EC16  F013         	call	i2_I2C_Master_Wait	;wreg free
 11118                           
 11119                           ;I2C.c: 42: SSPBUF = d;
 11120  002698  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 11121  00269C  0012               	return		;funcret
 11122  00269E                     __end_ofi2_I2C_Master_Write:
 11123                           	opt stack 0
 11124                           pclatu	equ	0xFFB
 11125                           pclath	equ	0xFFA
 11126                           tblptru	equ	0xFF8
 11127                           tblptrh	equ	0xFF7
 11128                           tblptrl	equ	0xFF6
 11129                           tablat	equ	0xFF5
 11130                           prodh	equ	0xFF4
 11131                           prodl	equ	0xFF3
 11132                           intcon	equ	0xFF2
 11133                           intcon2	equ	0xFF1
 11134                           intcon3	equ	0xFF0
 11135                           postinc0	equ	0xFEE
 11136                           fsr0h	equ	0xFEA
 11137                           fsr0l	equ	0xFE9
 11138                           wreg	equ	0xFE8
 11139                           fsr1h	equ	0xFE2
 11140                           fsr1l	equ	0xFE1
 11141                           indf2	equ	0xFDF
 11142                           postinc2	equ	0xFDE
 11143                           postdec2	equ	0xFDD
 11144                           fsr2h	equ	0xFDA
 11145                           fsr2l	equ	0xFD9
 11146                           status	equ	0xFD8
 11147                           
 11148 ;; *************** function i2_I2C_Master_Stop *****************
 11149 ;; Defined at:
 11150 ;;		line 33 in file "../I2C.c"
 11151 ;; Parameters:    Size  Location     Type
 11152 ;;		None
 11153 ;; Auto vars:     Size  Location     Type
 11154 ;;		None
 11155 ;; Return value:  Size  Location     Type
 11156 ;;                  1    wreg      void 
 11157 ;; Registers used:
 11158 ;;		wreg, status,2, status,0, cstack
 11159 ;; Tracked objects:
 11160 ;;		On entry : 0/0
 11161 ;;		On exit  : 0/0
 11162 ;;		Unchanged: 0/0
 11163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11164 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11165 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11166 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11167 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11168 ;;Total ram usage:        0 bytes
 11169 ;; Hardware stack levels used:    1
 11170 ;; Hardware stack levels required when called:    1
 11171 ;; This function calls:
 11172 ;;		i2_I2C_Master_Wait
 11173 ;; This function is called by:
 11174 ;;		_keypressed
 11175 ;; This function uses a non-reentrant model
 11176 ;;
 11177                           
 11178                           	psect	text44
 11179  0026AE                     __ptext44:
 11180                           	opt stack 0
 11181  0026AE                     i2_I2C_Master_Stop:
 11182                           	opt stack 23
 11183                           
 11184                           ;I2C.c: 35: I2C_Master_Wait();
 11185                           
 11186                           ;incstack = 0
 11187  0026AE  EC16  F013         	call	i2_I2C_Master_Wait	;wreg free
 11188                           
 11189                           ;I2C.c: 36: PEN = 1;
 11190  0026B2  84C5               	bsf	4037,2,c	;volatile
 11191  0026B4  0012               	return		;funcret
 11192  0026B6                     __end_ofi2_I2C_Master_Stop:
 11193                           	opt stack 0
 11194                           pclatu	equ	0xFFB
 11195                           pclath	equ	0xFFA
 11196                           tblptru	equ	0xFF8
 11197                           tblptrh	equ	0xFF7
 11198                           tblptrl	equ	0xFF6
 11199                           tablat	equ	0xFF5
 11200                           prodh	equ	0xFF4
 11201                           prodl	equ	0xFF3
 11202                           intcon	equ	0xFF2
 11203                           intcon2	equ	0xFF1
 11204                           intcon3	equ	0xFF0
 11205                           postinc0	equ	0xFEE
 11206                           fsr0h	equ	0xFEA
 11207                           fsr0l	equ	0xFE9
 11208                           wreg	equ	0xFE8
 11209                           fsr1h	equ	0xFE2
 11210                           fsr1l	equ	0xFE1
 11211                           indf2	equ	0xFDF
 11212                           postinc2	equ	0xFDE
 11213                           postdec2	equ	0xFDD
 11214                           fsr2h	equ	0xFDA
 11215                           fsr2l	equ	0xFD9
 11216                           status	equ	0xFD8
 11217                           
 11218 ;; *************** function i2_I2C_Master_Start *****************
 11219 ;; Defined at:
 11220 ;;		line 21 in file "../I2C.c"
 11221 ;; Parameters:    Size  Location     Type
 11222 ;;		None
 11223 ;; Auto vars:     Size  Location     Type
 11224 ;;		None
 11225 ;; Return value:  Size  Location     Type
 11226 ;;                  1    wreg      void 
 11227 ;; Registers used:
 11228 ;;		wreg, status,2, status,0, cstack
 11229 ;; Tracked objects:
 11230 ;;		On entry : 0/0
 11231 ;;		On exit  : 0/0
 11232 ;;		Unchanged: 0/0
 11233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11234 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11235 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11236 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11237 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11238 ;;Total ram usage:        0 bytes
 11239 ;; Hardware stack levels used:    1
 11240 ;; Hardware stack levels required when called:    1
 11241 ;; This function calls:
 11242 ;;		i2_I2C_Master_Wait
 11243 ;; This function is called by:
 11244 ;;		_keypressed
 11245 ;; This function uses a non-reentrant model
 11246 ;;
 11247                           
 11248                           	psect	text45
 11249  0026B6                     __ptext45:
 11250                           	opt stack 0
 11251  0026B6                     i2_I2C_Master_Start:
 11252                           	opt stack 23
 11253                           
 11254                           ;I2C.c: 23: I2C_Master_Wait();
 11255                           
 11256                           ;incstack = 0
 11257  0026B6  EC16  F013         	call	i2_I2C_Master_Wait	;wreg free
 11258                           
 11259                           ;I2C.c: 24: SEN = 1;
 11260  0026BA  80C5               	bsf	4037,0,c	;volatile
 11261  0026BC  0012               	return		;funcret
 11262  0026BE                     __end_ofi2_I2C_Master_Start:
 11263                           	opt stack 0
 11264                           pclatu	equ	0xFFB
 11265                           pclath	equ	0xFFA
 11266                           tblptru	equ	0xFF8
 11267                           tblptrh	equ	0xFF7
 11268                           tblptrl	equ	0xFF6
 11269                           tablat	equ	0xFF5
 11270                           prodh	equ	0xFF4
 11271                           prodl	equ	0xFF3
 11272                           intcon	equ	0xFF2
 11273                           intcon2	equ	0xFF1
 11274                           intcon3	equ	0xFF0
 11275                           postinc0	equ	0xFEE
 11276                           fsr0h	equ	0xFEA
 11277                           fsr0l	equ	0xFE9
 11278                           wreg	equ	0xFE8
 11279                           fsr1h	equ	0xFE2
 11280                           fsr1l	equ	0xFE1
 11281                           indf2	equ	0xFDF
 11282                           postinc2	equ	0xFDE
 11283                           postdec2	equ	0xFDD
 11284                           fsr2h	equ	0xFDA
 11285                           fsr2l	equ	0xFD9
 11286                           status	equ	0xFD8
 11287                           
 11288 ;; *************** function i2_I2C_Master_Read *****************
 11289 ;; Defined at:
 11290 ;;		line 45 in file "../I2C.c"
 11291 ;; Parameters:    Size  Location     Type
 11292 ;;  a               1    wreg     unsigned char 
 11293 ;; Auto vars:     Size  Location     Type
 11294 ;;  a               1    1[COMRAM] unsigned char 
 11295 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 11296 ;; Return value:  Size  Location     Type
 11297 ;;                  1    wreg      unsigned char 
 11298 ;; Registers used:
 11299 ;;		wreg, status,2, status,0, cstack
 11300 ;; Tracked objects:
 11301 ;;		On entry : 0/0
 11302 ;;		On exit  : 0/0
 11303 ;;		Unchanged: 0/0
 11304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11305 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11306 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11307 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11308 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11309 ;;Total ram usage:        2 bytes
 11310 ;; Hardware stack levels used:    1
 11311 ;; Hardware stack levels required when called:    1
 11312 ;; This function calls:
 11313 ;;		i2_I2C_Master_Wait
 11314 ;; This function is called by:
 11315 ;;		_keypressed
 11316 ;; This function uses a non-reentrant model
 11317 ;;
 11318                           
 11319                           	psect	text46
 11320  00255E                     __ptext46:
 11321                           	opt stack 0
 11322  00255E                     i2_I2C_Master_Read:
 11323                           	opt stack 23
 11324                           
 11325                           ;incstack = 0
 11326                           ;i2I2C_Master_Read@a stored from wreg
 11327  00255E  6E02               	movwf	i2I2C_Master_Read@a,c
 11328                           
 11329                           ;I2C.c: 47: unsigned char temp;
 11330                           ;I2C.c: 48: I2C_Master_Wait();
 11331  002560  EC16  F013         	call	i2_I2C_Master_Wait	;wreg free
 11332                           
 11333                           ;I2C.c: 49: RCEN = 1;
 11334  002564  86C5               	bsf	4037,3,c	;volatile
 11335                           
 11336                           ;I2C.c: 50: I2C_Master_Wait();
 11337  002566  EC16  F013         	call	i2_I2C_Master_Wait	;wreg free
 11338                           
 11339                           ;I2C.c: 51: temp = SSPBUF;
 11340  00256A  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 11341                           
 11342                           ;I2C.c: 52: I2C_Master_Wait();
 11343  00256E  EC16  F013         	call	i2_I2C_Master_Wait	;wreg free
 11344                           
 11345                           ;I2C.c: 53: ACKDT = (a)?0:1;
 11346  002572  5002               	movf	i2I2C_Master_Read@a,w,c
 11347  002574  A4D8               	btfss	status,2,c
 11348  002576  D002               	goto	i2u312_40
 11349  002578  8AC5               	bsf	4037,5,c	;volatile
 11350  00257A  D001               	goto	i2l3662
 11351  00257C                     i2u312_40:
 11352  00257C  9AC5               	bcf	4037,5,c	;volatile
 11353  00257E                     i2l3662:
 11354                           
 11355                           ;I2C.c: 54: ACKEN = 1;
 11356  00257E  88C5               	bsf	4037,4,c	;volatile
 11357                           
 11358                           ;I2C.c: 55: return temp;
 11359  002580  5003               	movf	i2I2C_Master_Read@temp,w,c
 11360  002582  0012               	return	
 11361  002584                     __end_ofi2_I2C_Master_Read:
 11362                           	opt stack 0
 11363                           pclatu	equ	0xFFB
 11364                           pclath	equ	0xFFA
 11365                           tblptru	equ	0xFF8
 11366                           tblptrh	equ	0xFF7
 11367                           tblptrl	equ	0xFF6
 11368                           tablat	equ	0xFF5
 11369                           prodh	equ	0xFF4
 11370                           prodl	equ	0xFF3
 11371                           intcon	equ	0xFF2
 11372                           intcon2	equ	0xFF1
 11373                           intcon3	equ	0xFF0
 11374                           postinc0	equ	0xFEE
 11375                           fsr0h	equ	0xFEA
 11376                           fsr0l	equ	0xFE9
 11377                           wreg	equ	0xFE8
 11378                           fsr1h	equ	0xFE2
 11379                           fsr1l	equ	0xFE1
 11380                           indf2	equ	0xFDF
 11381                           postinc2	equ	0xFDE
 11382                           postdec2	equ	0xFDD
 11383                           fsr2h	equ	0xFDA
 11384                           fsr2l	equ	0xFD9
 11385                           status	equ	0xFD8
 11386                           
 11387 ;; *************** function i2_I2C_Master_Wait *****************
 11388 ;; Defined at:
 11389 ;;		line 16 in file "../I2C.c"
 11390 ;; Parameters:    Size  Location     Type
 11391 ;;		None
 11392 ;; Auto vars:     Size  Location     Type
 11393 ;;		None
 11394 ;; Return value:  Size  Location     Type
 11395 ;;                  1    wreg      void 
 11396 ;; Registers used:
 11397 ;;		wreg, status,2, status,0
 11398 ;; Tracked objects:
 11399 ;;		On entry : 0/0
 11400 ;;		On exit  : 0/0
 11401 ;;		Unchanged: 0/0
 11402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11404 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11405 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11406 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11407 ;;Total ram usage:        1 bytes
 11408 ;; Hardware stack levels used:    1
 11409 ;; This function calls:
 11410 ;;		Nothing
 11411 ;; This function is called by:
 11412 ;;		i2_I2C_Master_Start
 11413 ;;		i2_I2C_Master_Stop
 11414 ;;		i2_I2C_Master_Write
 11415 ;;		i2_I2C_Master_Read
 11416 ;; This function uses a non-reentrant model
 11417 ;;
 11418                           
 11419                           	psect	text47
 11420  00262C                     __ptext47:
 11421                           	opt stack 0
 11422  00262C                     i2_I2C_Master_Wait:
 11423                           	opt stack 23
 11424  00262C                     i2l30:
 11425  00262C  B4C7               	btfsc	4039,2,c	;volatile
 11426  00262E  D7FE               	goto	i2l30
 11427  002630  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 11428  002634  0E1F               	movlw	31
 11429  002636  1601               	andwf	??i2_I2C_Master_Wait,f,c
 11430  002638  B4D8               	btfsc	status,2,c
 11431  00263A  0012               	return	
 11432  00263C  D7F7               	goto	i2l30
 11433  00263E                     __end_ofi2_I2C_Master_Wait:
 11434                           	opt stack 0
 11435                           pclatu	equ	0xFFB
 11436                           pclath	equ	0xFFA
 11437                           tblptru	equ	0xFF8
 11438                           tblptrh	equ	0xFF7
 11439                           tblptrl	equ	0xFF6
 11440                           tablat	equ	0xFF5
 11441                           prodh	equ	0xFF4
 11442                           prodl	equ	0xFF3
 11443                           intcon	equ	0xFF2
 11444                           intcon2	equ	0xFF1
 11445                           intcon3	equ	0xFF0
 11446                           postinc0	equ	0xFEE
 11447                           fsr0h	equ	0xFEA
 11448                           fsr0l	equ	0xFE9
 11449                           wreg	equ	0xFE8
 11450                           fsr1h	equ	0xFE2
 11451                           fsr1l	equ	0xFE1
 11452                           indf2	equ	0xFDF
 11453                           postinc2	equ	0xFDE
 11454                           postdec2	equ	0xFDD
 11455                           fsr2h	equ	0xFDA
 11456                           fsr2l	equ	0xFD9
 11457                           status	equ	0xFD8
 11458                           pclatu	equ	0xFFB
 11459                           pclath	equ	0xFFA
 11460                           tblptru	equ	0xFF8
 11461                           tblptrh	equ	0xFF7
 11462                           tblptrl	equ	0xFF6
 11463                           tablat	equ	0xFF5
 11464                           prodh	equ	0xFF4
 11465                           prodl	equ	0xFF3
 11466                           intcon	equ	0xFF2
 11467                           intcon2	equ	0xFF1
 11468                           intcon3	equ	0xFF0
 11469                           postinc0	equ	0xFEE
 11470                           fsr0h	equ	0xFEA
 11471                           fsr0l	equ	0xFE9
 11472                           wreg	equ	0xFE8
 11473                           fsr1h	equ	0xFE2
 11474                           fsr1l	equ	0xFE1
 11475                           indf2	equ	0xFDF
 11476                           postinc2	equ	0xFDE
 11477                           postdec2	equ	0xFDD
 11478                           fsr2h	equ	0xFDA
 11479                           fsr2l	equ	0xFD9
 11480                           status	equ	0xFD8
 11481                           
 11482                           	psect	rparam
 11483  0000                     pclatu	equ	0xFFB
 11484                           pclath	equ	0xFFA
 11485                           tblptru	equ	0xFF8
 11486                           tblptrh	equ	0xFF7
 11487                           tblptrl	equ	0xFF6
 11488                           tablat	equ	0xFF5
 11489                           prodh	equ	0xFF4
 11490                           prodl	equ	0xFF3
 11491                           intcon	equ	0xFF2
 11492                           intcon2	equ	0xFF1
 11493                           intcon3	equ	0xFF0
 11494                           postinc0	equ	0xFEE
 11495                           fsr0h	equ	0xFEA
 11496                           fsr0l	equ	0xFE9
 11497                           wreg	equ	0xFE8
 11498                           fsr1h	equ	0xFE2
 11499                           fsr1l	equ	0xFE1
 11500                           indf2	equ	0xFDF
 11501                           postinc2	equ	0xFDE
 11502                           postdec2	equ	0xFDD
 11503                           fsr2h	equ	0xFDA
 11504                           fsr2l	equ	0xFD9
 11505                           status	equ	0xFD8
 11506                           
 11507                           	psect	temp
 11508  00004F                     btemp:
 11509                           	opt stack 0
 11510  00004F                     	ds	1
 11511  0000                     int$flags	set	btemp
 11512                           pclatu	equ	0xFFB
 11513                           pclath	equ	0xFFA
 11514                           tblptru	equ	0xFF8
 11515                           tblptrh	equ	0xFF7
 11516                           tblptrl	equ	0xFF6
 11517                           tablat	equ	0xFF5
 11518                           prodh	equ	0xFF4
 11519                           prodl	equ	0xFF3
 11520                           intcon	equ	0xFF2
 11521                           intcon2	equ	0xFF1
 11522                           intcon3	equ	0xFF0
 11523                           postinc0	equ	0xFEE
 11524                           fsr0h	equ	0xFEA
 11525                           fsr0l	equ	0xFE9
 11526                           wreg	equ	0xFE8
 11527                           fsr1h	equ	0xFE2
 11528                           fsr1l	equ	0xFE1
 11529                           indf2	equ	0xFDF
 11530                           postinc2	equ	0xFDE
 11531                           postdec2	equ	0xFDD
 11532                           fsr2h	equ	0xFDA
 11533                           fsr2l	equ	0xFD9
 11534                           status	equ	0xFD8


Data Sizes:
    Strings     572
    Constant    35
    Data        1
    BSS         51
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     70      78
    BANK0           128     49      93
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 25
		 -> STR_38(CODE[20]), STR_37(CODE[23]), STR_36(CODE[23]), STR_35(CODE[23]), 
		 -> STR_34(CODE[17]), STR_33(CODE[15]), STR_32(CODE[17]), STR_31(CODE[23]), 
		 -> STR_30(CODE[23]), STR_29(CODE[17]), STR_28(CODE[17]), STR_27(CODE[17]), 
		 -> STR_26(CODE[17]), STR_25(CODE[17]), STR_24(CODE[17]), STR_23(CODE[17]), 
		 -> STR_22(CODE[17]), STR_21(CODE[23]), STR_20(CODE[23]), STR_19(CODE[17]), 
		 -> STR_18(CODE[21]), STR_17(CODE[17]), STR_16(CODE[21]), STR_15(CODE[17]), 
		 -> STR_14(CODE[21]), STR_13(CODE[17]), STR_12(CODE[19]), STR_11(CODE[17]), 
		 -> STR_10(CODE[19]), STR_9(CODE[17]), STR_8(CODE[25]), STR_7(CODE[17]), 
		 -> STR_6(CODE[17]), STR_5(CODE[17]), STR_4(CODE[17]), STR_3(CODE[17]), 
		 -> STR_2(CODE[17]), STR_1(CODE[17]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_testBatteries
    _testBatteries->_printf
    _stopOperation->___awdiv
    _show_log->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _I2C_Master_Init->___lldiv

Critical Paths under _ISR in COMRAM

    _ISR->_keypressed
    _keypressed->i2_printf
    i2_stopOperation->i2___awdiv
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_lcdInst->i2_lcdNibble
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_show_log
    _testBatteries->_printf
    _show_log->_printf

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0   29749
                                             40 BANK0      9     9      0
                    _I2C_Master_Init
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _initLCD
                            _lcdInst
                             _printf
                            _readADC
                           _show_log
                      _stopOperation
                      _testBatteries
                           _wait_2ms
 ---------------------------------------------------------------------------------
 (1) _wait_2ms                                             2     0      2     342
                                             48 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _testBatteries                                       12    12      0    6393
                                             68 COMRAM     2     2      0
                                             14 BANK0     10    10      0
                            _lcdInst
                             _printf
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _readADC                                              1     1      0      22
                                             48 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _stopOperation                                        3     3      0    5754
                                             56 COMRAM     3     3      0
                    _Eeprom_ReadByte
                   _Eeprom_WriteByte
                            ___awdiv
                            ___awmod
                       _next_address
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     500
                                             48 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     504
                                             48 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _Eeprom_WriteByte                                     3     0      3    1858
                                             48 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _show_log                                            27    24      3   10081
                                             68 COMRAM     1     1      0
                                             14 BANK0     26    23      3
                    _Eeprom_ReadByte
                            _lcdInst
                       _next_address
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              31    23      8    5539
                                             60 COMRAM     8     0      8
                                              0 BANK0     14    14      0
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     135
                                             50 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                             48 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     289
                                             48 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     287
                                             55 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     418
                                             48 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _next_address                                         2     0      2    1430
                                             48 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _Eeprom_ReadByte                                      2     0      2     876
                                             48 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                             51 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     135
                                             50 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                             48 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Write                                     2     0      2     328
                                             49 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Read                                      2     2      0      45
                                             49 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Wait                                      1     1      0       0
                                             48 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     376
                                             61 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     290
                                             48 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                 16    16      0    8471
                                             32 COMRAM    16    16      0
                         _keypressed
                          i2___awdiv
                          i2___awmod
                    i2_stopOperation
 ---------------------------------------------------------------------------------
 (6) _keypressed                                           4     2      2    5082
                                             28 COMRAM     4     2      2
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
                          i2_lcdInst
                           i2_printf
                    i2_stopOperation
 ---------------------------------------------------------------------------------
 (6) i2_stopOperation                                      3     3      0    2562
                                              8 COMRAM     3     3      0
                  i2_Eeprom_ReadByte
                 i2_Eeprom_WriteByte
                          i2___awdiv
                          i2___awmod
                     i2_next_address
 ---------------------------------------------------------------------------------
 (7) i2_next_address                                       2     0      2     308
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (7) i2___awmod                                            6     2      4     400
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (7) i2___awdiv                                            8     4      4     404
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (7) i2_Eeprom_WriteByte                                   3     0      3     794
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (7) i2_Eeprom_ReadByte                                    2     0      2      70
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (7) i2_printf                                            25    23      2    1912
                                             12 COMRAM    16    14      2
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (8) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (8) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (8) i2___wmul                                             6     2      4     209
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (8) i2___lwdiv                                            7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (7) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (9) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Write                                   2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Stop                                    0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Start                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Read                                    2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Wait                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _I2C_Master_Read
     _I2C_Master_Wait
   _I2C_Master_Start
     _I2C_Master_Wait
   _I2C_Master_Stop
     _I2C_Master_Wait
   _I2C_Master_Write
     _I2C_Master_Wait
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
       _lcdNibble
   _readADC
   _show_log
     _Eeprom_ReadByte
     _lcdInst
       _lcdNibble
     _next_address
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _stopOperation
     _Eeprom_ReadByte
     _Eeprom_WriteByte
     ___awdiv
     ___awmod
     _next_address
   _testBatteries
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
     _readADC
   _wait_2ms

 _ISR (ROOT)
   _keypressed
     i2_I2C_Master_Read
       i2_I2C_Master_Wait
     i2_I2C_Master_Start
       i2_I2C_Master_Wait
     i2_I2C_Master_Stop
       i2_I2C_Master_Wait
     i2_I2C_Master_Write
       i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
       i2___lwmod
         i2___lwdiv (ARG)
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
     i2_stopOperation
       i2_Eeprom_ReadByte
       i2_Eeprom_WriteByte
       i2___awdiv
       i2___awmod
       i2_next_address
   i2___awdiv
   i2___awmod
   i2_stopOperation
     i2_Eeprom_ReadByte
     i2_Eeprom_WriteByte
     i2___awdiv
     i2___awmod
     i2_next_address

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     31      5D       5       72.7%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     46      4E       1       61.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      AB      34        0.0%
DATA                 0      0      AB       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Mon Apr 10 04:27:41 2017

         i2_I2C_Master_Start 26B6           i2_I2C_Master_Write 2694     __end_of_Eeprom_WriteByte 24C6  
                         l30 261A                 ___awdiv@sign 0036          ___wmul@multiplicand 0033  
         i2___lwdiv@dividend 0001                  __CFG_BORV$3 000000    stopOperation@address_code 0039  
               __CFG_CP0$OFF 000000                 __CFG_CP1$OFF 000000                 __CFG_CP2$OFF 000000  
               __CFG_CP3$OFF 000000                  __CFG_OSC$HS 000000                          l323 0564  
                        l433 25E8                          l534 0B1A                          l439 24BC  
                        l449 10E6                          l398 2614                          l926 2112  
                        l979 22A6                          _GIE 007F97                          l989 241C  
               __CFG_CPB$OFF 000000                          _PEN 007E2A                 __CFG_CPD$OFF 000000  
                        _ISR 0008                          _SEN 007E28          ?i2_I2C_Master_Start 0001  
        ?i2_I2C_Master_Write 0002                          _min 00D4                          _sec 00DA  
               ___awmod@sign 0036                          prod 000FF3                          wreg 000FE8  
               __CFG_LVP$OFF 000000                         ?_ISR 0001                 show_log@hour 00A0  
               __CFG_WDT$OFF 000000                 show_log@year 009D                         l3140 259A  
                       l3160 2280                         l5000 0A26                         l5002 0A38  
                       l3156 2274                         l3180 23FE                         l5020 0AE4  
                       l5012 0A70                         l3158 227C                         l5110 0D1A  
                       l5102 0CB8                         l5006 0A40                         l3168 229C  
                       l3184 2412                         l3176 23F2                         l5120 0D80  
                       l5040 0B6E                         l5024 0AEA                         l3600 2152  
                       l4160 15D2                         l3178 23FA                         l5106 0CCC  
                       l5042 0B74                         l5122 0D8C                         l3602 215A  
                       l5108 0CD2                         l5116 0D66                         l5036 0B52  
                       l5300 137C                         l5220 10BA                         l3604 215E  
                       l3612 217C                         l5204 1E3A                         l5212 1E72  
                       l3630 20D4                         l5118 0D78                         l5054 0BAA  
                       l5070 0BE6                         l4158 15C2                         l5150 1CF4  
                       l5056 0BB0                         l5072 0BF8                         l5304 1386  
                       l5312 13A8                         l5224 10C4                         l3560 1FD4  
                       l3616 218A                         l3608 2172                         l5208 1E5C  
                       l5160 1D4E                         l3626 20C4                         l5090 0C76  
                       l5082 0C52                         l3562 1FDC                         l3554 1FBE  
                       l5170 1D78                         l3628 20D0                         l5084 0C5C  
                       l3580 2014                         l3572 1FFC                         l3564 1FE0  
                       l3548 1FAE                         l5180 1DB2                         l5500 03A0  
                       l5412 01FC                         l3638 2104                         l5078 0C1A  
                       l5174 1D98                         l5510 03D2                         l5430 0244  
                       l5414 0204                         l5350 00BC                         l5342 0092  
                       l5096 0C92                         l5280 12FE                         l5272 12B0  
                       l3576 2006                         l3592 2138                         l5192 1DEC  
                       l5184 1DD2                         l5440 0270                         l5424 022C  
                       l5408 01EC                         l5098 0C9E                         l5506 03BE  
                       l5362 00E8                         l5354 00C6                         l5292 132A  
                       l5284 1308                         l3596 2144                         l5516 0422  
                       l5604 05D2                         l5444 0280                         l5428 023C  
                       l5372 0110                         l5380 0132                         l5710 0868  
                       l5702 0824                         l5630 067C                         l5622 0646  
                       l5614 060C                         l5550 0496                         l5534 0452  
                       l5446 0286                         l5382 013E                         l5606 05DE  
                       l5720 08B8                         l5712 0874                         l5704 0830  
                       l5640 06BE                         l5632 0688                         l5624 0652  
                       l5616 0616                         l5608 05E8                         l5560 04BE  
                       l5544 047E                         l5480 032C                         l5472 030C  
                       l5464 02EC                         l5368 0106                         l5740 0976  
                       l5580 0512                         l5564 04CE                         l5548 048E  
                       l5476 031C                         l5468 02FC                         l3990 25C8  
                       l5750 09A0                         l5734 0934                         l5726 08F0  
                       l5718 08AC                         l5662 0754                         l5654 071E  
                       l5646 06E8                         l5638 06B2                         l5582 0518  
                       l5566 04D6                         l5398 01C0                         l3968 250C  
                       l5744 0980                         l5736 0940                         l5728 08FC  
                       l5672 079C                         l5664 0760                         l5656 072A  
                       l5648 06F4                         l5576 0502                         l5496 0354  
                       l5690 07F8                         l5756 09F6                         l5684 07C8  
                       l5676 07A6                         l5694 0802                         l4996 0A12  
                       STR_1 FFDE                         STR_2 FFCD                         STR_3 FF78  
                       STR_4 FEDF                         STR_5 FF45                         STR_6 FF23  
                       STR_7 FF67                         STR_8 FDC2                         STR_9 FF12  
                       _LATA 000F89                         _LATB 000F8A                         _LATC 000F8B  
                       _LATD 000F8C                         _LATE 000F8D                         u3390 250A  
                       u6007 234A                         u5320 0296                         u3385 2232  
                       u5321 0292                         u5330 02AC                         u5322 0298  
                       _PEIE 007F96                         u5332 02AE                         u5450 041E  
                       _RCEN 007E2B                         i2l30 262C                         u5807 0212  
                       u5817 0224                         u5907 07B8                         u5827 0252  
                       u5917 0814                         u5837 0266                         u5927 10D6  
                       u5847 0460                         u5767 00D8                         u5937 131A  
                       u5857 0474                         u5777 0122                         u5947 1398  
                       u5867 04A4                         u5787 01CE                         u5957 23A4  
                       u5877 04B6                         u5797 01E2                         u5967 23D8  
                       u5887 04E4                         u5977 231A                         u5897 04F8  
                       u5987 2322                         u5997 2342                         _TMR0 000FD6  
                       _TMR1 000FCE       __end_ofi2_next_address 265A                         _main 0012  
                       _keys FD9F                         _numC 00D8                         fsr0h 000FEA  
                       fsr1h 000FE2           i2___lwdiv@quotient 0005                         fsr2h 000FDA  
                       fsr0l 000FE9                         indf2 000FDF                         fsr1l 000FE1  
                       fsr2l 000FD9                         btemp 004F         ??i2_I2C_Master_Start 0002  
       ??i2_I2C_Master_Write 0004                         prodh 000FF4                         prodl 000FF3  
                       start 000E                __CFG_IESO$OFF 000000              __end_ofi2_putch 267E  
              __CFG_MCLRE$ON 000000                 ___param_bank 000000                show_log@C_num 0095  
                i2_lcdNibble 2350                        ??_ISR 0021                show_log@i_870 00A5  
              show_log@i_867 00A4             ?_I2C_Master_Init 003E             ?_I2C_Master_Read 0001  
           ?_I2C_Master_Wait 0001             ?_I2C_Master_Stop 0001                show_log@month 009E  
                      ?_main 0001                        _ACKEN 007E2C                        _ACKDT 007E2D  
            __end_of___awdiv 201E                        _ADRES 000FC3                        _EEADR 000FA9  
                      STR_10 FE77                        STR_11 FEAC                        STR_12 FE77  
                      STR_20 FDDB                        STR_13 FECE                        STR_21 FDF2  
                      STR_22 FF89                        STR_14 FE4E                        STR_30 FE09  
                      STR_15 FEBD                        STR_23 FE9B                        STR_31 FE20  
                      STR_16 FE4E                        STR_24 FF9A                        STR_32 FF56  
                      STR_25 FE9B                        STR_33 FFEF                        STR_17 FF34  
                      STR_18 FE4E                        STR_26 FFAB                        STR_34 FF01  
                      STR_27 FE9B                        STR_35 FDDB                        STR_19 FEF0  
                      STR_36 FDF2                        STR_28 FFBC              __end_of___awmod 2194  
                      STR_29 FE9B                        STR_37 FE37                        STR_38 FE63  
                      STR_39 FE8A              __end_of___lldiv 2124                        _T0CON 000FD5  
            ___awdiv@divisor 0033                        _T1CON 000FCD              __end_of___lwdiv 22B0  
            __end_of___lwmod 2426                        i2l502 1C00                        i2l433 25FE  
                      i2l534 0E94                        i2l439 252E                        i2l472 1A9E  
            ___awdiv@counter 0035                        i2l979 22F8                        i2l989 245E  
                      _PORTB 000F81                        _TRISA 000F92                        _TRISB 000F93  
                      _TRISC 000F94                        _TRISD 000F95                        _TRISE 000F96  
              _turn1BackLeft 00C7                __CFG_PWRT$OFF 000000                __CFG_WRT0$OFF 000000  
              __CFG_WRT1$OFF 000000                __CFG_WRT2$OFF 000000                __CFG_WRT3$OFF 000000  
            __end_of_lcdInst 2672               __CFG_EBTR0$OFF 000000               __CFG_FCMEN$OFF 000000  
             __CFG_EBTR1$OFF 000000                _turn2BackLeft 00CB               __CFG_EBTR2$OFF 000000  
             __CFG_EBTR3$OFF 000000                        _nRBPU 007F8F       __size_of_stopOperation 02F2  
              __CFG_WRTB$OFF 000000                __CFG_WRTC$OFF 000000                __CFG_WRTD$OFF 000000  
            __end_of_readADC 261A              __end_of_initLCD 23E4               __CFG_EBTRB$OFF 000000  
                 i2isdigit@c 0003              __end_of_dpowers FDBA             ?_Eeprom_ReadByte 0031  
                      _numAA 00D6                        _num9V 00D5              __end_of_isdigit 25A2  
                      _step1 004D                        _step2 004E                        _putch 265A  
                      main@i 00AA       i2stopOperation@address 000A                        pclath 000FFA  
                      tablat 000FF5             __end_ofi2___wmul 255E                        status 000FD8  
            ?i2_next_address 0001           __size_ofi2___awdiv 0084           i2_Eeprom_WriteByte 2512  
         __size_ofi2___awmod 0070               __CFG_PBADEN$ON 000000                i2printf@width 001A  
           __end_ofi2_printf 10B4           __size_ofi2___lwdiv 0052           __size_ofi2___lwmod 0042  
             show_log@AA_num 0093              __initialization 2468           __size_ofi2_lcdInst 000C  
               __end_of_main 0A04                 __end_of_keys FDB0          next_address@address 0031  
                 i2printf@ap 0014          ?i2_Eeprom_WriteByte 0001           __size_ofi2_isdigit 001E  
                     ??_main 00A8                __activetblptr 000002            ?_I2C_Master_Start 0001  
          ?_I2C_Master_Write 0032            show_log@Drain_num 0099               show_log@minute 00A1  
             show_log@second 00A2           ??_I2C_Master_Start 0032                       _ADCON0 000FC2  
                     _ADCON1 000FC1           ??_I2C_Master_Write 0034                       _ADCON2 000FC0  
                     _EEADRH 000FAA                       _EEDATA 000FA8         ??i2_Eeprom_WriteByte 0004  
                     _EECON2 000FA7             ___awdiv@dividend 0031              i2lcdNibble@data 0002  
                     ?_putch 0001              i2lcdNibble@temp 0001                       _INT1IE 007F83  
                     _INT1IF 007F80                       _CVRCON 000FB5                       i2l3310 21FA  
                     i2l3302 21E2                       i2l3322 25B8                       i2l3242 2032  
                     i2l3306 21EC                       i2l3332 22C6                       i2l3334 22CE  
                     i2l3254 2058                       i2l3270 208A                       i2l3344 22EE  
                     i2l3336 22D2                       i2l3360 2454                       i2l3352 2434  
                     i2l3256 2060                       i2l3248 2042                       i2l3354 243C  
                     i2l3274 2098                       i2l3266 2080                       i2l3258 2064  
                     i2l3290 21B4                       i2l3356 2440                       i2l3294 21C2  
                     i2l3286 21A8                       i2l3296 21CA                       i2l4344 1EE4  
                     i2l4360 1F2C                       i2l3298 21CE                       i2l4370 1F52  
                     i2l4354 1F08                       i2l3900 0F92                       i2l3812 0DB2  
                     i2l4380 1F7A                       i2l4348 1EEC                       i2l4364 1F3C  
                     i2l3662 257E                       i2l3822 0DD6                       i2l3742 18B4  
                     i2l3912 0FBE                       i2l3840 0E66                       i2l3816 0DC2  
                     i2l3744 18C4                       i2l3914 0FC6                       i2l3922 0FEC  
                     i2l3906 0FA8                       i2l3818 0DD0                       i2l4386 1F94  
                     i2l4378 1F74                       i2l3924 0FF2                       i2l3932 107C  
                     i2l3852 0EC2                       i2l3836 0E62                       i2l3828 0E04  
                     i2l4900 1AE2                       i2l3926 1036                       i2l3934 108C  
                     i2l3918 0FDA                       i2l3870 0F0C                keypressed@key 001E  
                     i2l3936 1092                       i2l3872 0F10                       i2l3856 0EDC  
                     i2l4904 1AEE                       i2l4840 1A02                       i2l3858 0EE0  
                     i2l3938 109A                       i2l4930 1B40                       i2l4922 1B28  
                     i2l4914 1B0E                       i2l4940 1B5E                       i2l4908 1AFA  
                     i2l4916 1B10                       i2l3894 0F66                       i2l3886 0F3C  
                     i2l4934 1B4A                       i2l4926 1B34                       i2l4942 1B60  
                     i2l4870 1A78                       i2l3888 0F4C                       i2l4960 1B9A  
                     i2l4952 1B82                       i2l4864 1A68                       i2l4872 1A7C  
                     i2l3898 0F8A                       i2l4890 1AC0                       i2l4866 1A6C  
                     i2l4858 1A52                       i2l4956 1B8E                       i2l4948 1B76  
                     i2l4982 1BE0                       i2l4974 1BC8                       i2l4966 1BAE  
                     i2l4992 1BFE                       i2l4968 1BB0                       i2l4896 1AD6  
                     i2l4986 1BEA                       i2l4978 1BD4                       _TMR0IE 007F95  
                     _TMR0IF 007F92                    ??i2_putch 0003                       _TMR1IE 007CE8  
                     _TMR1IF 007CF0                       _SSPADD 000FC8                       _TRISC3 007CA3  
                     _TRISC4 007CA4                       _SSPBUF 000FC9               _turn1BackRight 00C9  
             __CFG_XINST$OFF 000000                _stopOperation 13B6               _turn2BackRight 00CD  
                     ___wmul 24C6                    ??___awdiv 0035               __CFG_STVREN$ON 000000  
                  ??___awmod 0035     i2Eeprom_ReadByte@address 0001                    ??___lldiv 0039  
                  ??___lwdiv 0035                    ??___lwmod 003C                       _countC 00D1  
                     clear_0 2480                       clear_1 248C             ___awdiv@quotient 0037  
            ___awmod@divisor 0033              ___awmod@counter 0035                    ??_lcdInst 0033  
                     _printf 0A04               i2___awdiv@sign 0006                    ??_readADC 0031  
                  ??_initLCD 0034     __size_ofi2_stopOperation 02F2             __end_of_wait_2ms 25DA  
                  ??_isdigit 0031            __end_ofi2___awdiv 20A2            __end_ofi2___awmod 2204  
          __end_ofi2___lwdiv 2302                 __mediumconst FD9E            __end_ofi2___lwmod 2468  
           __end_of_show_log 13B6                       tblptrh 000FF7      Eeprom_WriteByte@address 0031  
                     tblptrl 000FF6                       tblptru 000FF8                main@steps_729 00B0  
             i2___awmod@sign 0006            __end_ofi2_lcdInst 268A            __end_ofi2_isdigit 25C0  
                 __accesstop 0080      __end_of__initialization 2492                ___rparam_used 000001  
             ?_stopOperation 0001           i2___lwmod@dividend 0008               __pcstackCOMRAM 0001  
               __pidataBANK0 26BE                __end_of_putch 2666            ?_Eeprom_WriteByte 0031  
                i2printf@idx 0013                  i2printf@val 0017           testBatteries@volt1 008E  
         testBatteries@volt2 0092           testBatteries@volt3 0090           testBatteries@volt4 0094  
         testBatteries@volt5 0096           ??_Eeprom_WriteByte 0034                    ?i2___wmul 0001  
         __size_of_lcdNibble 004E                  i2putch@data 0003                  keypressed@i 0020  
                ISR@keypress 0030                    ?i2_printf 000D          show_log@log_address 008E  
                    ??_putch 0033                   __pbssBANK0 00B1                ?_next_address 0031  
            show_log@address 00A6        __end_of_testBatteries 1E8C                 ?i2_lcdNibble 0001  
                    ?___wmul 0031                      ?_printf 003D                   ??i2___wmul 0005  
             keypressed@left 001F                   ??i2_printf 000F             ??i2_next_address 0003  
       show_log@elapsed_time 009B                      _SSPCON1 000FC6                      _SSPCON2 000FC5  
          ??i2_stopOperation 0009                      _SSPSTAT 000FC7            show_log@total_num 0091  
             ??_next_address 0033                      i2_putch 2672                   _countDrain 00D2  
            ??_stopOperation 0039  __size_ofi2_I2C_Master_Start 0008            __end_of_lcdNibble 2350  
__size_ofi2_I2C_Master_Write 000A                      __Hparam 0000                      __Lparam 0000  
                 _lastRunRTC 00B1                    ?_wait_2ms 0031         Eeprom_WriteByte@data 0033  
                  ?_show_log 008E                      ___awdiv 1F9A                      ___awmod 2124  
                    ___lldiv 20A2              __size_of___wmul 0026                      ___lwdiv 225E  
                    ___lwmod 23E4                    _CMCONbits 000FB4                      __pcinit 2468  
                 _plat1Right 00C1                      __ramtop 1000                   _plat2Right 00C5  
                    _lcdInst 2666                      __ptext0 0012                      __ptext1 25C0  
                    __ptext2 1C3C                      __ptext3 2606                      __ptext4 13B6  
                    __ptext5 2124                      __ptext6 1F9A                      __ptext7 24A0  
                    __ptext8 10B4                      __ptext9 0A04              __size_of_printf 03A4  
                  _T0CONbits 000FD5                      _countAA 00D0                      _count9V 00CF  
                    _readADC 2606                      _initLCD 239E                 __size_of_ISR 1C34  
          __end_of_hexpowers FDC2                    _T1CONbits 000FCD                      _dpowers FDB0  
                    _isdigit 2584                      _opTimer 004A             ___awmod@dividend 0031  
                    _numBats 00D7                   _keypressed 1E8C     __size_of_I2C_Master_Init 005A  
   __size_of_I2C_Master_Read 0026     __size_of_I2C_Master_Wait 0012     __size_of_I2C_Master_Stop 0008  
                    _sorting 004C               __pintcode_body 199A         end_of_initialization 2492  
              __Lmediumconst FD9E                      int_func 199A          i2___wmul@multiplier 0001  
                 _screenMode 00DC     __size_of_Eeprom_ReadByte 0016    __size_of_I2C_Master_Start 0008  
  __size_of_I2C_Master_Write 000A              ___lldiv@divisor 0035              ___lldiv@counter 003D  
                 ??_wait_2ms 0033                      printf@c 008D                      printf@f 003D  
           I2C_Master_Init@c 003E             I2C_Master_Read@a 0032                      postdec2 000FDD  
                 _solOnTimer 004B                   ??_show_log 0045                      postinc0 000FEE  
                    postinc2 000FDE  i2stopOperation@address_code 0009            i2_I2C_Master_Read 255E  
          i2_I2C_Master_Wait 262C            i2_I2C_Master_Stop 26AE                    i2___awdiv 201E  
                  i2___awmod 2194            i2___lwdiv@divisor 0003  __size_ofi2_Eeprom_WriteByte 0026  
                  i2___lwdiv 22B0                    i2___lwmod 2426            i2___lwdiv@counter 0007  
         ?i2_I2C_Master_Read 0001           ?i2_I2C_Master_Wait 0001           ?i2_I2C_Master_Stop 0001  
       stopOperation@address 003A                    i2_lcdInst 267E                  show_log@day 009F  
                printf@width 008B           i2___awdiv@dividend 0001          ??i2_I2C_Master_Read 0002  
                  i2_isdigit 25A2          ??i2_I2C_Master_Wait 0001          ??i2_I2C_Master_Stop 0002  
          i2_Eeprom_ReadByte 25F0           ?i2_Eeprom_ReadByte 0001               __end_of___wmul 24EC  
       __size_ofi2_lcdNibble 004E         __end_of_next_address 264C                i2lcdInst@data 0003  
        ??i2_Eeprom_ReadByte 0003             i2___wmul@product 0005               __end_of_printf 0DA8  
               i2printf@flag 0019    __end_ofi2_I2C_Master_Read 2584    __end_ofi2_I2C_Master_Wait 263E  
               i2printf@prec 0016          start_initialization 2468    __end_ofi2_I2C_Master_Stop 26B6  
                ?_keypressed 001D           i2___awdiv@quotient 0007                  __end_of_ISR 1C3C  
          __size_ofi2___wmul 0026                    i2printf@c 001C                    i2printf@f 000D  
      i2I2C_Master_Read@temp 0003                   ?i2___awdiv 0001                   ?i2___awmod 0001  
                 ?i2___lwdiv 0001                   ?i2___lwmod 0008    __size_of_Eeprom_WriteByte 0026  
          __size_ofi2_printf 030C            ??_I2C_Master_Init 0042            ??_I2C_Master_Read 0032  
          ??_I2C_Master_Wait 0031                   ?i2_lcdInst 0001            ??_I2C_Master_Stop 0032  
  __end_ofi2_Eeprom_ReadByte 2606                   ?i2_isdigit 0001    i2Eeprom_WriteByte@address 0001  
           show_log@Nine_num 0097                     ??___wmul 0035            ??_Eeprom_ReadByte 0033  
                __pdataBANK0 00DC             __CFG_LPT1OSC$OFF 000000              i2_stopOperation 16A8  
                   ??_printf 0080                  __pbssCOMRAM 0047                __pcstackBANK0 0080  
          i2___lwmod@divisor 000A           show_log@currScreen 0090            i2___lwmod@counter 000C  
               _isdigit$1124 0032                     ?i2_putch 0001             _I2C_Master_Start 26A6  
        i2I2C_Master_Write@d 0002             _I2C_Master_Write 268A             ___lwdiv@dividend 0031  
          __CFG_CCP2MX$PORTC 000000          __size_of_keypressed 010E                    __pintcode 0008  
              __pmediumconst FD9E                    _lcdNibble 2302                     ?___awdiv 0031  
                   ?___awmod 0031                     ?___lldiv 0031            __size_of_wait_2ms 001A  
                   ?___lwdiv 0031                     ?___lwmod 0038            __size_of_show_log 0302  
                  _doneTimer 0049                     ?_lcdInst 0001                     ?_readADC 0001  
                   ?_initLCD 0001       __size_of_testBatteries 0250                    _count_2ms 0047  
                   ?_isdigit 0001   __size_ofi2_I2C_Master_Read 0026   __size_ofi2_I2C_Master_Wait 0012  
 __size_ofi2_I2C_Master_Stop 0008                    _hexpowers FDBA             ___lwdiv@quotient 0035  
                ??i2___awdiv 0005                  ??i2___awmod 0005                    _plat1Left 00BF  
                  _plat2Left 00C3                  ??i2___lwdiv 0005                  ??i2___lwmod 000C  
             __size_of_putch 000C   __end_ofi2_I2C_Master_Start 26BE   __end_ofi2_I2C_Master_Write 269E  
                ??i2_lcdInst 0003               ___wmul@product 0035   __size_ofi2_Eeprom_ReadByte 0016  
                   _LATAbits 000F89                     _LATBbits 000F8A                     _LATCbits 000F8B  
                   _LATDbits 000F8C                     _LATEbits 000F8D              keypressed@right 001D  
                ??i2_isdigit 0001        __end_of_stopOperation 16A8                     i2u312_40 257C  
                   i2u441_40 1A64                     i2u601_47 2368                     i2u602_47 2370  
                   _PIR2bits 000FA1                     i2u603_47 2390                     i2u604_47 2398  
                   i2u447_40 1AB4                     i2u448_48 1AB6      __end_ofi2_stopOperation 199A  
      __size_of_next_address 000E             __CFG_WDTPS$32768 000000                   ?_lcdNibble 0001  
                  _startGear 00DB                   _ADCON0bits 000FC2                    main@i_707 00AB  
                  main@i_754 00AC                    main@i_756 00AD                    main@i_768 00AE  
          ___wmul@multiplier 0031                     i2___wmul 2538                lcdNibble@data 0032  
                 printf@flag 008A                lcdNibble@temp 0031                   printf@prec 0087  
          i2___awdiv@divisor 0003                    main@steps 00AF            i2___awdiv@counter 0005  
                   i2_printf 0DA8          I2C_Master_Read@temp 0033             _Eeprom_WriteByte 24A0  
         i2___awmod@dividend 0001                 _next_address 263E             __size_ofi2_putch 000C  
                 _EECON1bits 000FA6                _testBatteries 1C3C                     __Hrparam 0000  
    __size_ofi2_next_address 000E                     __Lrparam 0000           __CFG_BOREN$SBORDIS 000000  
           __size_of___awdiv 0084             __size_of___awmod 0070        i2___wmul@multiplicand 0003  
           __size_of___lldiv 0082             __size_of___lwdiv 0052             __size_of___lwmod 0042  
             readADC@channel 0031       Eeprom_ReadByte@address 0031           i2I2C_Master_Read@a 0002  
           __size_of_lcdInst 000C              _I2C_Master_Init 2204             __size_of_readADC 0014  
            _I2C_Master_Read 24EC             __size_of_initLCD 0046              _I2C_Master_Wait 261A  
            _I2C_Master_Stop 269E                 ??_keypressed 001F             __size_of_isdigit 001E  
 __end_ofi2_Eeprom_WriteByte 2538              ___lwdiv@divisor 0033              ___lwdiv@counter 0037  
                   __ptext10 265A                     __ptext11 2584                     __ptext20 268A  
                   __ptext12 24C6                     __ptext21 269E                     __ptext13 23E4  
                   __ptext30 264C                     __ptext22 26A6                     __ptext14 225E  
                   __ptext31 2194                     __ptext23 24EC                     __ptext15 263E  
                   __ptext40 22B0                     __ptext32 201E                     __ptext24 261A  
                   __ptext16 25DA                     __ptext41 267E                     __ptext33 2512  
                   __ptext25 2204                     __ptext17 239E                     __ptext42 2350  
                   __ptext34 25F0                     __ptext26 20A2                     __ptext18 2666  
                   __ptext43 2694                     __ptext35 0DA8                     __ptext19 2302  
                   __ptext44 26AE                     __ptext36 2672                     __ptext28 1E8C  
                   __ptext45 26B6                     __ptext37 25A2                     __ptext29 16A8  
                   __ptext46 255E                     __ptext38 2538                     __ptext47 262C  
                   __ptext39 2426                     _doubleAA 00D3               i2_isdigit$1124 0002  
              __size_of_main 09F2                    wait_2ms@x 0031              _Eeprom_ReadByte 25DA  
             ?_testBatteries 0001                     _realTime 00B8                     _numDrain 00D9  
                   _wait_2ms 25C0             ?i2_stopOperation 0001                ??i2_lcdNibble 0001  
                ??_lcdNibble 0031                     _show_log 10B4           __end_of_keypressed 1F9A  
                   int$flags 004F                    printf@idx 0084                    show_log@i 00A3  
                  printf@val 0088            i2___awmod@divisor 0003                    putch@data 0033  
          i2___awmod@counter 0005     __end_of_I2C_Master_Start 26AE     __end_of_I2C_Master_Write 2694  
                 _INTCONbits 000FF2                     isdigit@c 0033                     intlevel2 0000  
           ___lwmod@dividend 0038             ___lldiv@dividend 0031        i2next_address@address 0001  
                   printf@ap 0085      __end_of_I2C_Master_Init 225E      __end_of_I2C_Master_Read 2512  
    __end_of_I2C_Master_Wait 262C      __end_of_I2C_Master_Stop 26A6                  lcdInst@data 0033  
        __end_ofi2_lcdNibble 239E             ___lldiv@quotient 0039            I2C_Master_Write@d 0032  
            ___lwmod@divisor 003A              ___lwmod@counter 003C      __end_of_Eeprom_ReadByte 25F0  
            ??_testBatteries 0045               i2_next_address 264C       i2Eeprom_WriteByte@data 0003  
