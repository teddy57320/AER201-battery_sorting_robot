

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Fri Feb 03 23:56:06 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    29                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    32                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    33                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    34  0000                     
    35                           ; Version 1.40
    36                           ; Generated 01/12/2016 GMT
    37                           ; 
    38                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    39                           ; All rights reserved.
    40                           ; 
    41                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    42                           ; 
    43                           ; Redistribution and use in source and binary forms, with or without modification, are
    44                           ; permitted provided that the following conditions are met:
    45                           ; 
    46                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    47                           ;        conditions and the following disclaimer.
    48                           ; 
    49                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    50                           ;        of conditions and the following disclaimer in the documentation and/or other
    51                           ;        materials provided with the distribution.
    52                           ; 
    53                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    54                           ;        software without specific prior written permission.
    55                           ; 
    56                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    57                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    58                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    59                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    60                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    61                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    62                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    63                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    64                           ; 
    65                           ; 
    66                           ; Code-generator required, PIC18F4620 Definitions
    67                           ; 
    68                           ; SFR Addresses
    69  0000                     
    70                           	psect	idataCOMRAM
    71  0009FC                     __pidataCOMRAM:
    72                           	opt stack 0
    73                           
    74                           ;initializer for _screenMode
    75  0009FC  02                 	db	2
    76                           
    77                           	psect	mediumconst
    78  00FE88                     __pmediumconst:
    79                           	opt stack 0
    80  00FE88  00                 	db	0
    81  00FE89                     _keys:
    82                           	opt stack 0
    83  00FE89  31                 	db	49
    84  00FE8A  32                 	db	50
    85  00FE8B  33                 	db	51
    86  00FE8C  41                 	db	65
    87  00FE8D  34                 	db	52
    88  00FE8E  35                 	db	53
    89  00FE8F  36                 	db	54
    90  00FE90  42                 	db	66
    91  00FE91  37                 	db	55
    92  00FE92  38                 	db	56
    93  00FE93  39                 	db	57
    94  00FE94  43                 	db	67
    95  00FE95  2A                 	db	42
    96  00FE96  30                 	db	48
    97  00FE97  23                 	db	35
    98  00FE98  44                 	db	68
    99  00FE99  00                 	db	0
   100  00FE9A                     __end_of_keys:
   101                           	opt stack 0
   102  00FE9A                     _dpowers:
   103                           	opt stack 0
   104  00FE9A  0001               	dw	1
   105  00FE9C  000A               	dw	10
   106  00FE9E  0064               	dw	100
   107  00FEA0  03E8               	dw	1000
   108  00FEA2  2710               	dw	10000
   109  00FEA4                     __end_of_dpowers:
   110                           	opt stack 0
   111  00FEA4                     _hexpowers:
   112                           	opt stack 0
   113  00FEA4  0001               	dw	1
   114  00FEA6  0010               	dw	16
   115  00FEA8  0100               	dw	256
   116  00FEAA  1000               	dw	4096
   117  00FEAC                     __end_of_hexpowers:
   118                           	opt stack 0
   119  0000                     _ADCON0	set	4034
   120  0000                     _ADCON1	set	4033
   121  0000                     _INTCONbits	set	4082
   122  0000                     _LATB	set	3978
   123  0000                     _LATC	set	3979
   124  0000                     _LATD	set	3980
   125  0000                     _LATDbits	set	3980
   126  0000                     _PORTB	set	3969
   127  0000                     _SSPADD	set	4040
   128  0000                     _SSPBUF	set	4041
   129  0000                     _SSPCON1	set	4038
   130  0000                     _SSPCON2	set	4037
   131  0000                     _SSPSTAT	set	4039
   132  0000                     _TRISB	set	3987
   133  0000                     _TRISC	set	3988
   134  0000                     _TRISD	set	3989
   135  0000                     _ACKDT	set	32301
   136  0000                     _ACKEN	set	32300
   137  0000                     _INT1IE	set	32643
   138  0000                     _INT1IF	set	32640
   139  0000                     _PEN	set	32298
   140  0000                     _RCEN	set	32299
   141  0000                     _RSEN	set	32297
   142  0000                     _SEN	set	32296
   143  0000                     _TRISC3	set	31907
   144  0000                     _TRISC4	set	31908
   145  00FEAC                     STR_8:
   146  00FEAC  25                 	db	37
   147  00FEAD  30                 	db	48	;'0'
   148  00FEAE  32                 	db	50	;'2'
   149  00FEAF  78                 	db	120	;'x'
   150  00FEB0  3A                 	db	58	;':'
   151  00FEB1  25                 	db	37
   152  00FEB2  30                 	db	48	;'0'
   153  00FEB3  32                 	db	50	;'2'
   154  00FEB4  78                 	db	120	;'x'
   155  00FEB5  20                 	db	32
   156  00FEB6  20                 	db	32
   157  00FEB7  20                 	db	32
   158  00FEB8  20                 	db	32
   159  00FEB9  20                 	db	32
   160  00FEBA  20                 	db	32
   161  00FEBB  20                 	db	32
   162  00FEBC  20                 	db	32
   163  00FEBD  20                 	db	32
   164  00FEBE  20                 	db	32
   165  00FEBF  20                 	db	32
   166  00FEC0  20                 	db	32
   167  00FEC1  20                 	db	32
   168  00FEC2  20                 	db	32
   169  00FEC3  20                 	db	32
   170  00FEC4  00                 	db	0
   171  00FEC5                     STR_17:
   172  00FEC5  44                 	db	68	;'D'
   173  00FEC6  41                 	db	65	;'A'
   174  00FEC7  54                 	db	84	;'T'
   175  00FEC8  45                 	db	69	;'E'
   176  00FEC9  3A                 	db	58	;':'
   177  00FECA  20                 	db	32
   178  00FECB  25                 	db	37
   179  00FECC  30                 	db	48	;'0'
   180  00FECD  32                 	db	50	;'2'
   181  00FECE  78                 	db	120	;'x'
   182  00FECF  2F                 	db	47
   183  00FED0  25                 	db	37
   184  00FED1  30                 	db	48	;'0'
   185  00FED2  32                 	db	50	;'2'
   186  00FED3  78                 	db	120	;'x'
   187  00FED4  2F                 	db	47
   188  00FED5  25                 	db	37
   189  00FED6  30                 	db	48	;'0'
   190  00FED7  32                 	db	50	;'2'
   191  00FED8  78                 	db	120	;'x'
   192  00FED9  20                 	db	32
   193  00FEDA  20                 	db	32
   194  00FEDB  00                 	db	0
   195  00FEDC                     STR_18:
   196  00FEDC  54                 	db	84	;'T'
   197  00FEDD  49                 	db	73	;'I'
   198  00FEDE  4D                 	db	77	;'M'
   199  00FEDF  45                 	db	69	;'E'
   200  00FEE0  3A                 	db	58	;':'
   201  00FEE1  20                 	db	32
   202  00FEE2  25                 	db	37
   203  00FEE3  30                 	db	48	;'0'
   204  00FEE4  32                 	db	50	;'2'
   205  00FEE5  78                 	db	120	;'x'
   206  00FEE6  3A                 	db	58	;':'
   207  00FEE7  25                 	db	37
   208  00FEE8  30                 	db	48	;'0'
   209  00FEE9  32                 	db	50	;'2'
   210  00FEEA  78                 	db	120	;'x'
   211  00FEEB  3A                 	db	58	;':'
   212  00FEEC  25                 	db	37
   213  00FEED  30                 	db	48	;'0'
   214  00FEEE  32                 	db	50	;'2'
   215  00FEEF  78                 	db	120	;'x'
   216  00FEF0  20                 	db	32
   217  00FEF1  20                 	db	32
   218  00FEF2  00                 	db	0
   219  00FEF3                     STR_14:
   220  00FEF3  42                 	db	66	;'B'
   221  00FEF4  41                 	db	65	;'A'
   222  00FEF5  54                 	db	84	;'T'
   223  00FEF6  54                 	db	84	;'T'
   224  00FEF7  45                 	db	69	;'E'
   225  00FEF8  52                 	db	82	;'R'
   226  00FEF9  49                 	db	73	;'I'
   227  00FEFA  45                 	db	69	;'E'
   228  00FEFB  53                 	db	83	;'S'
   229  00FEFC  3A                 	db	58	;':'
   230  00FEFD  20                 	db	32
   231  00FEFE  25                 	db	37
   232  00FEFF  30                 	db	48	;'0'
   233  00FF00  32                 	db	50	;'2'
   234  00FF01  64                 	db	100	;'d'
   235  00FF02  20                 	db	32
   236  00FF03  20                 	db	32
   237  00FF04  20                 	db	32
   238  00FF05  20                 	db	32
   239  00FF06  20                 	db	32
   240  00FF07  00                 	db	0
   241  00FF08                     STR_16:
   242  00FF08  42                 	db	66	;'B'
   243  00FF09  41                 	db	65	;'A'
   244  00FF0A  54                 	db	84	;'T'
   245  00FF0B  54                 	db	84	;'T'
   246  00FF0C  45                 	db	69	;'E'
   247  00FF0D  52                 	db	82	;'R'
   248  00FF0E  49                 	db	73	;'I'
   249  00FF0F  45                 	db	69	;'E'
   250  00FF10  53                 	db	83	;'S'
   251  00FF11  3A                 	db	58	;':'
   252  00FF12  20                 	db	32
   253  00FF13  25                 	db	37
   254  00FF14  30                 	db	48	;'0'
   255  00FF15  32                 	db	50	;'2'
   256  00FF16  78                 	db	120	;'x'
   257  00FF17  20                 	db	32
   258  00FF18  20                 	db	32
   259  00FF19  20                 	db	32
   260  00FF1A  20                 	db	32
   261  00FF1B  20                 	db	32
   262  00FF1C  00                 	db	0
   263  00FF1D                     STR_4:
   264  00FF1D  25                 	db	37
   265  00FF1E  30                 	db	48	;'0'
   266  00FF1F  32                 	db	50	;'2'
   267  00FF20  64                 	db	100	;'d'
   268  00FF21  20                 	db	32
   269  00FF22  20                 	db	32
   270  00FF23  20                 	db	32
   271  00FF24  20                 	db	32
   272  00FF25  20                 	db	32
   273  00FF26  20                 	db	32
   274  00FF27  20                 	db	32
   275  00FF28  20                 	db	32
   276  00FF29  20                 	db	32
   277  00FF2A  20                 	db	32
   278  00FF2B  20                 	db	32
   279  00FF2C  20                 	db	32
   280  00FF2D  20                 	db	32
   281  00FF2E  20                 	db	32
   282  00FF2F  00                 	db	0
   283  00FF30                     STR_10:
   284  00FF30  42                 	db	66	;'B'
   285  00FF31  41                 	db	65	;'A'
   286  00FF32  54                 	db	84	;'T'
   287  00FF33  54                 	db	84	;'T'
   288  00FF34  45                 	db	69	;'E'
   289  00FF35  52                 	db	82	;'R'
   290  00FF36  49                 	db	73	;'I'
   291  00FF37  45                 	db	69	;'E'
   292  00FF38  53                 	db	83	;'S'
   293  00FF39  3A                 	db	58	;':'
   294  00FF3A  20                 	db	32
   295  00FF3B  25                 	db	37
   296  00FF3C  30                 	db	48	;'0'
   297  00FF3D  32                 	db	50	;'2'
   298  00FF3E  64                 	db	100	;'d'
   299  00FF3F  20                 	db	32
   300  00FF40  20                 	db	32
   301  00FF41  20                 	db	32
   302  00FF42  00                 	db	0
   303  00FF43                     STR_19:
   304  00FF43  30                 	db	48	;'0'
   305  00FF44  31                 	db	49	;'1'
   306  00FF45  32                 	db	50	;'2'
   307  00FF46  33                 	db	51	;'3'
   308  00FF47  34                 	db	52	;'4'
   309  00FF48  35                 	db	53	;'5'
   310  00FF49  36                 	db	54	;'6'
   311  00FF4A  37                 	db	55	;'7'
   312  00FF4B  38                 	db	56	;'8'
   313  00FF4C  39                 	db	57	;'9'
   314  00FF4D  61                 	db	97	;'a'
   315  00FF4E  62                 	db	98	;'b'
   316  00FF4F  63                 	db	99	;'c'
   317  00FF50  64                 	db	100	;'d'
   318  00FF51  65                 	db	101	;'e'
   319  00FF52  66                 	db	102	;'f'
   320  00FF53  00                 	db	0
   321  00FF54                     STR_3:
   322  00FF54  52                 	db	82	;'R'
   323  00FF55  55                 	db	85	;'U'
   324  00FF56  4E                 	db	78	;'N'
   325  00FF57  4E                 	db	78	;'N'
   326  00FF58  49                 	db	73	;'I'
   327  00FF59  4E                 	db	78	;'N'
   328  00FF5A  47                 	db	71	;'G'
   329  00FF5B  2E                 	db	46
   330  00FF5C  2E                 	db	46
   331  00FF5D  2E                 	db	46
   332  00FF5E  20                 	db	32
   333  00FF5F  20                 	db	32
   334  00FF60  20                 	db	32
   335  00FF61  20                 	db	32
   336  00FF62  20                 	db	32
   337  00FF63  20                 	db	32
   338  00FF64  00                 	db	0
   339  00FF65                     STR_11:
   340  00FF65  4E                 	db	78	;'N'
   341  00FF66  55                 	db	85	;'U'
   342  00FF67  4D                 	db	77	;'M'
   343  00FF68  42                 	db	66	;'B'
   344  00FF69  45                 	db	69	;'E'
   345  00FF6A  52                 	db	82	;'R'
   346  00FF6B  20                 	db	32
   347  00FF6C  4F                 	db	79	;'O'
   348  00FF6D  46                 	db	70	;'F'
   349  00FF6E  20                 	db	32
   350  00FF6F  43                 	db	67	;'C'
   351  00FF70  20                 	db	32
   352  00FF71  20                 	db	32
   353  00FF72  20                 	db	32
   354  00FF73  20                 	db	32
   355  00FF74  20                 	db	32
   356  00FF75  00                 	db	0
   357  00FF76                     STR_6:
   358  00FF76  54                 	db	84	;'T'
   359  00FF77  4F                 	db	79	;'O'
   360  00FF78  20                 	db	32
   361  00FF79  43                 	db	67	;'C'
   362  00FF7A  4F                 	db	79	;'O'
   363  00FF7B  4E                 	db	78	;'N'
   364  00FF7C  54                 	db	84	;'T'
   365  00FF7D  49                 	db	73	;'I'
   366  00FF7E  4E                 	db	78	;'N'
   367  00FF7F  55                 	db	85	;'U'
   368  00FF80  45                 	db	69	;'E'
   369  00FF81  20                 	db	32
   370  00FF82  20                 	db	32
   371  00FF83  20                 	db	32
   372  00FF84  20                 	db	32
   373  00FF85  20                 	db	32
   374  00FF86  00                 	db	0
   375  00FF87                     STR_15:
   376  00FF87  4E                 	db	78	;'N'
   377  00FF88  55                 	db	85	;'U'
   378  00FF89  4D                 	db	77	;'M'
   379  00FF8A  42                 	db	66	;'B'
   380  00FF8B  45                 	db	69	;'E'
   381  00FF8C  52                 	db	82	;'R'
   382  00FF8D  20                 	db	32
   383  00FF8E  4F                 	db	79	;'O'
   384  00FF8F  46                 	db	70	;'F'
   385  00FF90  20                 	db	32
   386  00FF91  41                 	db	65	;'A'
   387  00FF92  41                 	db	65	;'A'
   388  00FF93  20                 	db	32
   389  00FF94  20                 	db	32
   390  00FF95  20                 	db	32
   391  00FF96  20                 	db	32
   392  00FF97  00                 	db	0
   393  00FF98                     STR_13:
   394  00FF98  4E                 	db	78	;'N'
   395  00FF99  55                 	db	85	;'U'
   396  00FF9A  4D                 	db	77	;'M'
   397  00FF9B  42                 	db	66	;'B'
   398  00FF9C  45                 	db	69	;'E'
   399  00FF9D  52                 	db	82	;'R'
   400  00FF9E  20                 	db	32
   401  00FF9F  4F                 	db	79	;'O'
   402  00FFA0  46                 	db	70	;'F'
   403  00FFA1  20                 	db	32
   404  00FFA2  39                 	db	57	;'9'
   405  00FFA3  56                 	db	86	;'V'
   406  00FFA4  20                 	db	32
   407  00FFA5  20                 	db	32
   408  00FFA6  20                 	db	32
   409  00FFA7  20                 	db	32
   410  00FFA8  00                 	db	0
   411  00FFA9                     STR_5:
   412  00FFA9  44                 	db	68	;'D'
   413  00FFAA  4F                 	db	79	;'O'
   414  00FFAB  4E                 	db	78	;'N'
   415  00FFAC  45                 	db	69	;'E'
   416  00FFAD  21                 	db	33
   417  00FFAE  20                 	db	32
   418  00FFAF  50                 	db	80	;'P'
   419  00FFB0  52                 	db	82	;'R'
   420  00FFB1  45                 	db	69	;'E'
   421  00FFB2  53                 	db	83	;'S'
   422  00FFB3  53                 	db	83	;'S'
   423  00FFB4  20                 	db	32
   424  00FFB5  2A                 	db	42
   425  00FFB6  20                 	db	32
   426  00FFB7  20                 	db	32
   427  00FFB8  20                 	db	32
   428  00FFB9  00                 	db	0
   429  00FFBA                     STR_7:
   430  00FFBA  54                 	db	84	;'T'
   431  00FFBB  4F                 	db	79	;'O'
   432  00FFBC  54                 	db	84	;'T'
   433  00FFBD  41                 	db	65	;'A'
   434  00FFBE  4C                 	db	76	;'L'
   435  00FFBF  20                 	db	32
   436  00FFC0  52                 	db	82	;'R'
   437  00FFC1  55                 	db	85	;'U'
   438  00FFC2  4E                 	db	78	;'N'
   439  00FFC3  20                 	db	32
   440  00FFC4  54                 	db	84	;'T'
   441  00FFC5  49                 	db	73	;'I'
   442  00FFC6  4D                 	db	77	;'M'
   443  00FFC7  45                 	db	69	;'E'
   444  00FFC8  3A                 	db	58	;':'
   445  00FFC9  20                 	db	32
   446  00FFCA  00                 	db	0
   447  00FFCB                     STR_9:
   448  00FFCB  54                 	db	84	;'T'
   449  00FFCC  4F                 	db	79	;'O'
   450  00FFCD  54                 	db	84	;'T'
   451  00FFCE  41                 	db	65	;'A'
   452  00FFCF  4C                 	db	76	;'L'
   453  00FFD0  20                 	db	32
   454  00FFD1  4E                 	db	78	;'N'
   455  00FFD2  55                 	db	85	;'U'
   456  00FFD3  4D                 	db	77	;'M'
   457  00FFD4  42                 	db	66	;'B'
   458  00FFD5  45                 	db	69	;'E'
   459  00FFD6  52                 	db	82	;'R'
   460  00FFD7  20                 	db	32
   461  00FFD8  4F                 	db	79	;'O'
   462  00FFD9  46                 	db	70	;'F'
   463  00FFDA  20                 	db	32
   464  00FFDB  00                 	db	0
   465  00FFDC                     STR_1:
   466  00FFDC  53                 	db	83	;'S'
   467  00FFDD  54                 	db	84	;'T'
   468  00FFDE  41                 	db	65	;'A'
   469  00FFDF  52                 	db	82	;'R'
   470  00FFE0  54                 	db	84	;'T'
   471  00FFE1  3A                 	db	58	;':'
   472  00FFE2  20                 	db	32
   473  00FFE3  20                 	db	32
   474  00FFE4  20                 	db	32
   475  00FFE5  50                 	db	80	;'P'
   476  00FFE6  52                 	db	82	;'R'
   477  00FFE7  45                 	db	69	;'E'
   478  00FFE8  53                 	db	83	;'S'
   479  00FFE9  53                 	db	83	;'S'
   480  00FFEA  20                 	db	32
   481  00FFEB  2A                 	db	42
   482  00FFEC  00                 	db	0
   483  00FFED                     STR_2:
   484  00FFED  4F                 	db	79	;'O'
   485  00FFEE  50                 	db	80	;'P'
   486  00FFEF  54                 	db	84	;'T'
   487  00FFF0  49                 	db	73	;'I'
   488  00FFF1  4F                 	db	79	;'O'
   489  00FFF2  4E                 	db	78	;'N'
   490  00FFF3  53                 	db	83	;'S'
   491  00FFF4  3A                 	db	58	;':'
   492  00FFF5  20                 	db	32
   493  00FFF6  20                 	db	32
   494  00FFF7  34                 	db	52	;'4'
   495  00FFF8  20                 	db	32
   496  00FFF9  4F                 	db	79	;'O'
   497  00FFFA  52                 	db	82	;'R'
   498  00FFFB  20                 	db	32
   499  00FFFC  36                 	db	54	;'6'
   500  00FFFD  00                 	db	0
   501  0000                     
   502                           ; #config settings
   503  00FFFE  00                 	db	0	; dummy byte at the end
   504  0000                     
   505                           	psect	cinit
   506  000922                     __pcinit:
   507                           	opt stack 0
   508  000922                     start_initialization:
   509                           	opt stack 0
   510  000922                     __initialization:
   511                           	opt stack 0
   512                           
   513                           ; Initialize objects allocated to COMRAM (1 bytes)
   514                           ; load TBLPTR registers with __pidataCOMRAM
   515  000922  0EFC               	movlw	low __pidataCOMRAM
   516  000924  6EF6               	movwf	tblptrl,c
   517  000926  0E09               	movlw	high __pidataCOMRAM
   518  000928  6EF7               	movwf	tblptrh,c
   519  00092A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   520  00092C  6EF8               	movwf	tblptru,c
   521  00092E  0009               	tblrd		*+	;fetch initializer
   522  000930  CFF5 F046          	movff	tablat,__pdataCOMRAM
   523                           
   524                           ; Clear objects allocated to COMRAM (7 bytes)
   525  000934  EE00  F03F         	lfsr	0,__pbssCOMRAM
   526  000938  0E07               	movlw	7
   527  00093A                     clear_0:
   528  00093A  6AEE               	clrf	postinc0,c
   529  00093C  06E8               	decf	wreg,f,c
   530  00093E  E1FD               	bnz	clear_0
   531  000940                     end_of_initialization:
   532                           	opt stack 0
   533  000940                     __end_of__initialization:
   534                           	opt stack 0
   535  000940  9047               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   536  000942  9247               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   537  000944  0E00               	movlw	low (__Lmediumconst shr (0+16))
   538  000946  6EF8               	movwf	tblptru,c
   539  000948  0100               	movlb	0
   540  00094A  EF8F  F001         	goto	_main	;jump to C main() function
   541                           tblptru	equ	0xFF8
   542                           tblptrh	equ	0xFF7
   543                           tblptrl	equ	0xFF6
   544                           tablat	equ	0xFF5
   545                           postinc0	equ	0xFEE
   546                           wreg	equ	0xFE8
   547                           
   548                           	psect	bssCOMRAM
   549  00003F                     __pbssCOMRAM:
   550                           	opt stack 0
   551  00003F                     _time:
   552                           	opt stack 0
   553  00003F                     	ds	7
   554                           tblptru	equ	0xFF8
   555                           tblptrh	equ	0xFF7
   556                           tblptrl	equ	0xFF6
   557                           tablat	equ	0xFF5
   558                           postinc0	equ	0xFEE
   559                           wreg	equ	0xFE8
   560                           
   561                           	psect	dataCOMRAM
   562  000046                     __pdataCOMRAM:
   563                           	opt stack 0
   564  000046                     _screenMode:
   565                           	opt stack 0
   566  000046                     	ds	1
   567                           tblptru	equ	0xFF8
   568                           tblptrh	equ	0xFF7
   569                           tblptrl	equ	0xFF6
   570                           tablat	equ	0xFF5
   571                           postinc0	equ	0xFEE
   572                           wreg	equ	0xFE8
   573                           
   574                           	psect	cstackCOMRAM
   575  000001                     __pcstackCOMRAM:
   576                           	opt stack 0
   577  000001                     switchMenu@right:
   578                           	opt stack 0
   579                           
   580                           ; 1 bytes @ 0x0
   581  000001                     	ds	1
   582  000002                     switchMenu@key:
   583                           	opt stack 0
   584                           
   585                           ; 1 bytes @ 0x1
   586  000002                     	ds	1
   587  000003                     switchMenu@left:
   588                           	opt stack 0
   589                           
   590                           ; 1 bytes @ 0x2
   591  000003                     	ds	1
   592  000004                     ??_keypressed:
   593                           
   594                           ; 1 bytes @ 0x3
   595  000004                     	ds	14
   596  000012                     keypressed@keypress:
   597                           	opt stack 0
   598                           
   599                           ; 1 bytes @ 0x11
   600  000012                     	ds	1
   601  000013                     ??_isdigit:
   602  000013                     ??_I2C_Master_Wait:
   603  000013                     ?___wmul:
   604                           	opt stack 0
   605  000013                     ?___lwdiv:
   606                           	opt stack 0
   607  000013                     ?___lldiv:
   608                           	opt stack 0
   609  000013                     lcdNibble@temp:
   610                           	opt stack 0
   611  000013                     ___wmul@multiplier:
   612                           	opt stack 0
   613  000013                     ___lwdiv@dividend:
   614                           	opt stack 0
   615  000013                     ___lldiv@dividend:
   616                           	opt stack 0
   617                           
   618                           ; 4 bytes @ 0x12
   619  000013                     	ds	1
   620  000014                     I2C_Master_Read@a:
   621                           	opt stack 0
   622  000014                     lcdNibble@data:
   623                           	opt stack 0
   624  000014                     _isdigit$498:
   625                           	opt stack 0
   626  000014                     I2C_Master_Write@d:
   627                           	opt stack 0
   628                           
   629                           ; 2 bytes @ 0x13
   630  000014                     	ds	1
   631  000015                     I2C_Master_Read@temp:
   632                           	opt stack 0
   633  000015                     lcdInst@data:
   634                           	opt stack 0
   635  000015                     putch@data:
   636                           	opt stack 0
   637  000015                     isdigit@c:
   638                           	opt stack 0
   639  000015                     ___wmul@multiplicand:
   640                           	opt stack 0
   641  000015                     ___lwdiv@divisor:
   642                           	opt stack 0
   643                           
   644                           ; 2 bytes @ 0x14
   645  000015                     	ds	1
   646  000016                     ??_initLCD:
   647                           
   648                           ; 1 bytes @ 0x15
   649  000016                     	ds	1
   650  000017                     ___wmul@product:
   651                           	opt stack 0
   652  000017                     ___lwdiv@quotient:
   653                           	opt stack 0
   654  000017                     ___lldiv@divisor:
   655                           	opt stack 0
   656                           
   657                           ; 4 bytes @ 0x16
   658  000017                     	ds	2
   659  000019                     ___lwdiv@counter:
   660                           	opt stack 0
   661                           
   662                           ; 1 bytes @ 0x18
   663  000019                     	ds	1
   664  00001A                     ?___lwmod:
   665                           	opt stack 0
   666  00001A                     ___lwmod@dividend:
   667                           	opt stack 0
   668                           
   669                           ; 2 bytes @ 0x19
   670  00001A                     	ds	1
   671  00001B                     ___lldiv@quotient:
   672                           	opt stack 0
   673                           
   674                           ; 4 bytes @ 0x1A
   675  00001B                     	ds	1
   676  00001C                     ___lwmod@divisor:
   677                           	opt stack 0
   678                           
   679                           ; 2 bytes @ 0x1B
   680  00001C                     	ds	2
   681  00001E                     ___lwmod@counter:
   682                           	opt stack 0
   683                           
   684                           ; 1 bytes @ 0x1D
   685  00001E                     	ds	1
   686  00001F                     ?_printf:
   687                           	opt stack 0
   688  00001F                     ___lldiv@counter:
   689                           	opt stack 0
   690  00001F                     printf@f:
   691                           	opt stack 0
   692                           
   693                           ; 2 bytes @ 0x1E
   694  00001F                     	ds	1
   695  000020                     I2C_Master_Init@c:
   696                           	opt stack 0
   697                           
   698                           ; 4 bytes @ 0x1F
   699  000020                     	ds	4
   700  000024                     ??_I2C_Master_Init:
   701                           
   702                           ; 1 bytes @ 0x23
   703  000024                     	ds	3
   704  000027                     ??_printf:
   705                           
   706                           ; 1 bytes @ 0x26
   707  000027                     	ds	4
   708  00002B                     printf@idx:
   709                           	opt stack 0
   710                           
   711                           ; 1 bytes @ 0x2A
   712  00002B                     	ds	1
   713  00002C                     printf@ap:
   714                           	opt stack 0
   715                           
   716                           ; 2 bytes @ 0x2B
   717  00002C                     	ds	2
   718  00002E                     printf@prec:
   719                           	opt stack 0
   720                           
   721                           ; 1 bytes @ 0x2D
   722  00002E                     	ds	1
   723  00002F                     printf@val:
   724                           	opt stack 0
   725                           
   726                           ; 2 bytes @ 0x2E
   727  00002F                     	ds	2
   728  000031                     printf@flag:
   729                           	opt stack 0
   730                           
   731                           ; 1 bytes @ 0x30
   732  000031                     	ds	1
   733  000032                     printf@width:
   734                           	opt stack 0
   735                           
   736                           ; 2 bytes @ 0x31
   737  000032                     	ds	2
   738  000034                     printf@c:
   739                           	opt stack 0
   740                           
   741                           ; 1 bytes @ 0x33
   742  000034                     	ds	1
   743  000035                     ??_main:
   744                           
   745                           ; 1 bytes @ 0x34
   746  000035                     	ds	1
   747  000036                     main@min:
   748                           	opt stack 0
   749                           
   750                           ; 1 bytes @ 0x35
   751  000036                     	ds	1
   752  000037                     main@sec:
   753                           	opt stack 0
   754                           
   755                           ; 1 bytes @ 0x36
   756  000037                     	ds	1
   757  000038                     main@numBats:
   758                           	opt stack 0
   759                           
   760                           ; 1 bytes @ 0x37
   761  000038                     	ds	1
   762  000039                     main@numC:
   763                           	opt stack 0
   764                           
   765                           ; 1 bytes @ 0x38
   766  000039                     	ds	1
   767  00003A                     main@num9V:
   768                           	opt stack 0
   769                           
   770                           ; 1 bytes @ 0x39
   771  00003A                     	ds	1
   772  00003B                     main@numAA:
   773                           	opt stack 0
   774                           
   775                           ; 1 bytes @ 0x3A
   776  00003B                     	ds	1
   777  00003C                     main@i_215:
   778                           	opt stack 0
   779                           
   780                           ; 1 bytes @ 0x3B
   781  00003C                     	ds	1
   782  00003D                     main@i:
   783                           	opt stack 0
   784                           
   785                           ; 1 bytes @ 0x3C
   786  00003D                     	ds	1
   787  00003E                     main@i_237:
   788                           	opt stack 0
   789                           
   790                           ; 1 bytes @ 0x3D
   791  00003E                     	ds	1
   792                           tblptru	equ	0xFF8
   793                           tblptrh	equ	0xFF7
   794                           tblptrl	equ	0xFF6
   795                           tablat	equ	0xFF5
   796                           postinc0	equ	0xFEE
   797                           wreg	equ	0xFE8
   798                           
   799 ;;
   800 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   801 ;;
   802 ;; *************** function _main *****************
   803 ;; Defined at:
   804 ;;		line 15 in file "../main.c"
   805 ;; Parameters:    Size  Location     Type
   806 ;;		None
   807 ;; Auto vars:     Size  Location     Type
   808 ;;  i               1   59[COMRAM] unsigned char 
   809 ;;  i               1   61[COMRAM] unsigned char 
   810 ;;  numAA           1   58[COMRAM] unsigned char 
   811 ;;  num9V           1   57[COMRAM] unsigned char 
   812 ;;  numC            1   56[COMRAM] unsigned char 
   813 ;;  numBats         1   55[COMRAM] unsigned char 
   814 ;;  sec             1   54[COMRAM] unsigned char 
   815 ;;  min             1   53[COMRAM] unsigned char 
   816 ;;  i               1   60[COMRAM] unsigned char 
   817 ;; Return value:  Size  Location     Type
   818 ;;                  1    wreg      void 
   819 ;; Registers used:
   820 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   821 ;; Tracked objects:
   822 ;;		On entry : 0/0
   823 ;;		On exit  : 0/0
   824 ;;		Unchanged: 0/0
   825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   826 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   827 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   828 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   829 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   830 ;;Total ram usage:       10 bytes
   831 ;; Hardware stack levels required when called:    5
   832 ;; This function calls:
   833 ;;		_I2C_Master_Init
   834 ;;		_I2C_Master_Read
   835 ;;		_I2C_Master_Start
   836 ;;		_I2C_Master_Stop
   837 ;;		_I2C_Master_Write
   838 ;;		_initLCD
   839 ;;		_lcdInst
   840 ;;		_printf
   841 ;; This function is called by:
   842 ;;		Startup code after reset
   843 ;; This function uses a non-reentrant model
   844 ;;
   845                           
   846                           	psect	text0
   847  00031E                     __ptext0:
   848                           	opt stack 0
   849  00031E                     _main:
   850                           	opt stack 26
   851                           
   852                           ;main.c: 16: TRISC = 0x00;
   853                           
   854                           ;incstack = 0
   855  00031E  0E00               	movlw	0
   856  000320  6E94               	movwf	3988,c	;volatile
   857                           
   858                           ;main.c: 17: TRISD = 0x00;
   859  000322  0E00               	movlw	0
   860  000324  6E95               	movwf	3989,c	;volatile
   861                           
   862                           ;main.c: 18: TRISB = 0xFF;
   863  000326  6893               	setf	3987,c	;volatile
   864                           
   865                           ;main.c: 19: LATB = 0x00;
   866  000328  0E00               	movlw	0
   867  00032A  6E8A               	movwf	3978,c	;volatile
   868                           
   869                           ;main.c: 20: LATC = 0x00;
   870  00032C  0E00               	movlw	0
   871  00032E  6E8B               	movwf	3979,c	;volatile
   872                           
   873                           ;main.c: 21: ADCON0 = 0x00;
   874  000330  0E00               	movlw	0
   875  000332  6EC2               	movwf	4034,c	;volatile
   876                           
   877                           ;main.c: 22: ADCON1 = 0xFF;
   878  000334  68C1               	setf	4033,c	;volatile
   879                           
   880                           ;main.c: 23: INT1IE = 1;
   881  000336  86F0               	bsf	intcon3,3,c	;volatile
   882                           
   883                           ;main.c: 24: initLCD();
   884  000338  EC32  F004         	call	_initLCD	;wreg free
   885                           
   886                           ;main.c: 26: I2C_Master_Init(10000);
   887  00033C  0E10               	movlw	16
   888  00033E  6E20               	movwf	I2C_Master_Init@c,c
   889  000340  0E27               	movlw	39
   890  000342  6E21               	movwf	I2C_Master_Init@c+1,c
   891  000344  0E00               	movlw	0
   892  000346  6E22               	movwf	I2C_Master_Init@c+2,c
   893  000348  0E00               	movlw	0
   894  00034A  6E23               	movwf	I2C_Master_Init@c+3,c
   895  00034C  ECB5  F003         	call	_I2C_Master_Init	;wreg free
   896  000350  D013               	goto	l1617
   897  000352                     l131:
   898                           
   899                           ;main.c: 31: (INTCONbits.GIE = 0);
   900  000352  9EF2               	bcf	intcon,7,c	;volatile
   901                           
   902                           ;main.c: 32: lcdInst(0b10000000);;
   903  000354  0E80               	movlw	128
   904  000356  ECEB  F004         	call	_lcdInst
   905                           
   906                           ;main.c: 33: printf("START:   PRESS *");
   907  00035A  0EDC               	movlw	low STR_1
   908  00035C  6E1F               	movwf	printf@f,c
   909  00035E  0EFF               	movlw	high STR_1
   910  000360  6E20               	movwf	printf@f+1,c
   911  000362  EC09  F000         	call	_printf	;wreg free
   912                           
   913                           ;main.c: 34: lcdInst(0b11000000);;
   914  000366  0EC0               	movlw	192
   915  000368  ECEB  F004         	call	_lcdInst
   916                           
   917                           ;main.c: 35: printf("OPTIONS:  4 OR 6");
   918  00036C  0EED               	movlw	low STR_2
   919  00036E  6E1F               	movwf	printf@f,c
   920  000370  0EFF               	movlw	high STR_2
   921  000372  6E20               	movwf	printf@f+1,c
   922  000374  EC09  F000         	call	_printf	;wreg free
   923  000378                     l1617:
   924                           
   925                           ;main.c: 36: (INTCONbits.GIE = 1);
   926  000378  8EF2               	bsf	intcon,7,c	;volatile
   927  00037A                     l1619:
   928  00037A  0E02               	movlw	2
   929  00037C  1846               	xorwf	_screenMode,w,c
   930  00037E  A4D8               	btfss	status,2,c
   931  000380  D035               	goto	l1651
   932  000382  D7E7               	goto	l131
   933  000384                     l134:
   934                           
   935                           ;main.c: 40: (INTCONbits.GIE = 0);
   936  000384  9EF2               	bcf	intcon,7,c	;volatile
   937                           
   938                           ;main.c: 41: lcdInst(0b10000000);;
   939  000386  0E80               	movlw	128
   940  000388  ECEB  F004         	call	_lcdInst
   941                           
   942                           ;main.c: 42: printf("RUNNING...      ");
   943  00038C  0E54               	movlw	low STR_3
   944  00038E  6E1F               	movwf	printf@f,c
   945  000390  0EFF               	movlw	high STR_3
   946  000392  6E20               	movwf	printf@f+1,c
   947  000394  EC09  F000         	call	_printf	;wreg free
   948                           
   949                           ;main.c: 43: unsigned char i;
   950                           ;main.c: 44: for (i=0; i<10; i++){
   951  000398  0E00               	movlw	0
   952  00039A  6E3D               	movwf	main@i,c
   953  00039C                     l1627:
   954  00039C  0E09               	movlw	9
   955  00039E  643D               	cpfsgt	main@i,c
   956  0003A0  D001               	goto	l1631
   957  0003A2  D021               	goto	l136
   958  0003A4                     l1631:
   959                           
   960                           ;main.c: 45: lcdInst(0b10000000);;
   961  0003A4  0E80               	movlw	128
   962  0003A6  ECEB  F004         	call	_lcdInst
   963                           
   964                           ;main.c: 46: lcdInst(0b11000000);;
   965  0003AA  0EC0               	movlw	192
   966  0003AC  ECEB  F004         	call	_lcdInst
   967                           
   968                           ;main.c: 47: printf("%02d              ", i);
   969  0003B0  0E1D               	movlw	low STR_4
   970  0003B2  6E1F               	movwf	printf@f,c
   971  0003B4  0EFF               	movlw	high STR_4
   972  0003B6  6E20               	movwf	printf@f+1,c
   973  0003B8  C03D  F021         	movff	main@i,?_printf+2
   974  0003BC  6A22               	clrf	?_printf+3,c
   975  0003BE  EC09  F000         	call	_printf	;wreg free
   976                           
   977                           ;main.c: 48: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(10000000/4000.0)));};
   978  0003C2  0E00               	movlw	0
   979  0003C4  6E3C               	movwf	main@i_215,c
   980  0003C6                     l1637:
   981  0003C6  0E63               	movlw	99
   982  0003C8  643C               	cpfsgt	main@i_215,c
   983  0003CA  D001               	goto	l1641
   984  0003CC  D00A               	goto	l1645
   985  0003CE                     l1641:
   986  0003CE  0E21               	movlw	33
   987  0003D0  6E35               	movwf	??_main& (0+255),c
   988  0003D2  0E76               	movlw	118
   989  0003D4                     u1247:
   990  0003D4  2EE8               	decfsz	wreg,f,c
   991  0003D6  D7FE               	bra	u1247
   992  0003D8  2E35               	decfsz	??_main& (0+255),f,c
   993  0003DA  D7FC               	bra	u1247
   994  0003DC  D000               	nop2	
   995  0003DE  2A3C               	incf	main@i_215,f,c
   996  0003E0  D7F2               	goto	l1637
   997  0003E2                     l1645:
   998  0003E2  2A3D               	incf	main@i,f,c
   999  0003E4  D7DB               	goto	l1627
  1000  0003E6                     l136:
  1001                           
  1002                           ;main.c: 49: }
  1003                           ;main.c: 50: (INTCONbits.GIE = 1);
  1004  0003E6  8EF2               	bsf	intcon,7,c	;volatile
  1005                           
  1006                           ;main.c: 52: screenMode = 0;
  1007  0003E8  0E00               	movlw	0
  1008  0003EA  6E46               	movwf	_screenMode,c
  1009  0003EC                     l1651:
  1010  0003EC  0446               	decf	_screenMode,w,c
  1011  0003EE  A4D8               	btfss	status,2,c
  1012  0003F0  D015               	goto	l1661
  1013  0003F2  D7C8               	goto	l134
  1014  0003F4                     l141:
  1015                           
  1016                           ;main.c: 55: (INTCONbits.GIE = 0);
  1017  0003F4  9EF2               	bcf	intcon,7,c	;volatile
  1018                           
  1019                           ;main.c: 56: lcdInst(0b10000000);;
  1020  0003F6  0E80               	movlw	128
  1021  0003F8  ECEB  F004         	call	_lcdInst
  1022                           
  1023                           ;main.c: 57: printf("DONE! PRESS *   ");
  1024  0003FC  0EA9               	movlw	low STR_5
  1025  0003FE  6E1F               	movwf	printf@f,c
  1026  000400  0EFF               	movlw	high STR_5
  1027  000402  6E20               	movwf	printf@f+1,c
  1028  000404  EC09  F000         	call	_printf	;wreg free
  1029                           
  1030                           ;main.c: 58: lcdInst(0b11000000);;
  1031  000408  0EC0               	movlw	192
  1032  00040A  ECEB  F004         	call	_lcdInst
  1033                           
  1034                           ;main.c: 59: printf("TO CONTINUE     ");
  1035  00040E  0E76               	movlw	low STR_6
  1036  000410  6E1F               	movwf	printf@f,c
  1037  000412  0EFF               	movlw	high STR_6
  1038  000414  6E20               	movwf	printf@f+1,c
  1039  000416  EC09  F000         	call	_printf	;wreg free
  1040                           
  1041                           ;main.c: 60: (INTCONbits.GIE = 1);
  1042  00041A  8EF2               	bsf	intcon,7,c	;volatile
  1043  00041C                     l1661:
  1044  00041C  5046               	movf	_screenMode,w,c
  1045  00041E  A4D8               	btfss	status,2,c
  1046  000420  D01F               	goto	l1675
  1047  000422  D7E8               	goto	l141
  1048  000424                     l144:
  1049                           
  1050                           ;main.c: 63: (INTCONbits.GIE = 0);
  1051  000424  9EF2               	bcf	intcon,7,c	;volatile
  1052                           
  1053                           ;main.c: 64: unsigned char min, sec;
  1054                           ;main.c: 67: min = 1;
  1055  000426  0E01               	movlw	1
  1056  000428  6E36               	movwf	main@min,c
  1057                           
  1058                           ;main.c: 68: sec = 1;
  1059  00042A  0E01               	movlw	1
  1060  00042C  6E37               	movwf	main@sec,c
  1061                           
  1062                           ;main.c: 70: lcdInst(0b10000000);;
  1063  00042E  0E80               	movlw	128
  1064  000430  ECEB  F004         	call	_lcdInst
  1065                           
  1066                           ;main.c: 71: printf("TOTAL RUN TIME: ");
  1067  000434  0EBA               	movlw	low STR_7
  1068  000436  6E1F               	movwf	printf@f,c
  1069  000438  0EFF               	movlw	high STR_7
  1070  00043A  6E20               	movwf	printf@f+1,c
  1071  00043C  EC09  F000         	call	_printf	;wreg free
  1072                           
  1073                           ;main.c: 72: lcdInst(0b11000000);;
  1074  000440  0EC0               	movlw	192
  1075  000442  ECEB  F004         	call	_lcdInst
  1076                           
  1077                           ;main.c: 73: printf("%02x:%02x               ", min, sec);
  1078  000446  0EAC               	movlw	low STR_8
  1079  000448  6E1F               	movwf	printf@f,c
  1080  00044A  0EFE               	movlw	high STR_8
  1081  00044C  6E20               	movwf	printf@f+1,c
  1082  00044E  C036  F021         	movff	main@min,?_printf+2
  1083  000452  6A22               	clrf	?_printf+3,c
  1084  000454  C037  F023         	movff	main@sec,?_printf+4
  1085  000458  6A24               	clrf	?_printf+5,c
  1086  00045A  EC09  F000         	call	_printf	;wreg free
  1087                           
  1088                           ;main.c: 74: (INTCONbits.GIE = 1);
  1089  00045E  8EF2               	bsf	intcon,7,c	;volatile
  1090  000460                     l1675:
  1091  000460  0E03               	movlw	3
  1092  000462  1846               	xorwf	_screenMode,w,c
  1093  000464  A4D8               	btfss	status,2,c
  1094  000466  D018               	goto	l1687
  1095  000468  D7DD               	goto	l144
  1096  00046A                     l1677:
  1097                           
  1098                           ;main.c: 77: unsigned char numBats;
  1099                           ;main.c: 80: numBats = 6;
  1100  00046A  0E06               	movlw	6
  1101  00046C  6E38               	movwf	main@numBats,c
  1102                           
  1103                           ;main.c: 82: lcdInst(0b10000000);;
  1104  00046E  0E80               	movlw	128
  1105  000470  ECEB  F004         	call	_lcdInst
  1106                           
  1107                           ;main.c: 83: printf("TOTAL NUMBER OF ");
  1108  000474  0ECB               	movlw	low STR_9
  1109  000476  6E1F               	movwf	printf@f,c
  1110  000478  0EFF               	movlw	high STR_9
  1111  00047A  6E20               	movwf	printf@f+1,c
  1112  00047C  EC09  F000         	call	_printf	;wreg free
  1113                           
  1114                           ;main.c: 84: lcdInst(0b11000000);;
  1115  000480  0EC0               	movlw	192
  1116  000482  ECEB  F004         	call	_lcdInst
  1117                           
  1118                           ;main.c: 85: printf("BATTERIES: %02d   ", numBats);
  1119  000486  0E30               	movlw	low STR_10
  1120  000488  6E1F               	movwf	printf@f,c
  1121  00048A  0EFF               	movlw	high STR_10
  1122  00048C  6E20               	movwf	printf@f+1,c
  1123  00048E  C038  F021         	movff	main@numBats,?_printf+2
  1124  000492  6A22               	clrf	?_printf+3,c
  1125  000494  EC09  F000         	call	_printf	;wreg free
  1126  000498                     l1687:
  1127  000498  0E04               	movlw	4
  1128  00049A  1846               	xorwf	_screenMode,w,c
  1129  00049C  A4D8               	btfss	status,2,c
  1130  00049E  D01A               	goto	l1701
  1131  0004A0  D7E4               	goto	l1677
  1132  0004A2                     l150:
  1133                           
  1134                           ;main.c: 88: (INTCONbits.GIE = 0);
  1135  0004A2  9EF2               	bcf	intcon,7,c	;volatile
  1136                           
  1137                           ;main.c: 89: unsigned char numC;
  1138                           ;main.c: 92: numC = 3;
  1139  0004A4  0E03               	movlw	3
  1140  0004A6  6E39               	movwf	main@numC,c
  1141                           
  1142                           ;main.c: 94: lcdInst(0b10000000);;
  1143  0004A8  0E80               	movlw	128
  1144  0004AA  ECEB  F004         	call	_lcdInst
  1145                           
  1146                           ;main.c: 95: printf("NUMBER OF C     ");
  1147  0004AE  0E65               	movlw	low STR_11
  1148  0004B0  6E1F               	movwf	printf@f,c
  1149  0004B2  0EFF               	movlw	high STR_11
  1150  0004B4  6E20               	movwf	printf@f+1,c
  1151  0004B6  EC09  F000         	call	_printf	;wreg free
  1152                           
  1153                           ;main.c: 96: lcdInst(0b11000000);;
  1154  0004BA  0EC0               	movlw	192
  1155  0004BC  ECEB  F004         	call	_lcdInst
  1156                           
  1157                           ;main.c: 97: printf("BATTERIES: %02d   ", numC);
  1158  0004C0  0E30               	movlw	low STR_10
  1159  0004C2  6E1F               	movwf	printf@f,c
  1160  0004C4  0EFF               	movlw	high STR_10
  1161  0004C6  6E20               	movwf	printf@f+1,c
  1162  0004C8  C039  F021         	movff	main@numC,?_printf+2
  1163  0004CC  6A22               	clrf	?_printf+3,c
  1164  0004CE  EC09  F000         	call	_printf	;wreg free
  1165                           
  1166                           ;main.c: 98: (INTCONbits.GIE = 1);
  1167  0004D2  8EF2               	bsf	intcon,7,c	;volatile
  1168  0004D4                     l1701:
  1169  0004D4  0E05               	movlw	5
  1170  0004D6  1846               	xorwf	_screenMode,w,c
  1171  0004D8  A4D8               	btfss	status,2,c
  1172  0004DA  D01A               	goto	l1715
  1173  0004DC  D7E2               	goto	l150
  1174  0004DE                     l153:
  1175                           
  1176                           ;main.c: 101: (INTCONbits.GIE = 0);
  1177  0004DE  9EF2               	bcf	intcon,7,c	;volatile
  1178                           
  1179                           ;main.c: 102: unsigned char num9V;
  1180                           ;main.c: 105: num9V = 10;
  1181  0004E0  0E0A               	movlw	10
  1182  0004E2  6E3A               	movwf	main@num9V,c
  1183                           
  1184                           ;main.c: 107: lcdInst(0b10000000);;
  1185  0004E4  0E80               	movlw	128
  1186  0004E6  ECEB  F004         	call	_lcdInst
  1187                           
  1188                           ;main.c: 108: printf("NUMBER OF 9V    ");
  1189  0004EA  0E98               	movlw	low STR_13
  1190  0004EC  6E1F               	movwf	printf@f,c
  1191  0004EE  0EFF               	movlw	high STR_13
  1192  0004F0  6E20               	movwf	printf@f+1,c
  1193  0004F2  EC09  F000         	call	_printf	;wreg free
  1194                           
  1195                           ;main.c: 109: lcdInst(0b11000000);;
  1196  0004F6  0EC0               	movlw	192
  1197  0004F8  ECEB  F004         	call	_lcdInst
  1198                           
  1199                           ;main.c: 110: printf("BATTERIES: %02d     ", num9V);
  1200  0004FC  0EF3               	movlw	low STR_14
  1201  0004FE  6E1F               	movwf	printf@f,c
  1202  000500  0EFE               	movlw	high STR_14
  1203  000502  6E20               	movwf	printf@f+1,c
  1204  000504  C03A  F021         	movff	main@num9V,?_printf+2
  1205  000508  6A22               	clrf	?_printf+3,c
  1206  00050A  EC09  F000         	call	_printf	;wreg free
  1207                           
  1208                           ;main.c: 111: (INTCONbits.GIE = 1);
  1209  00050E  8EF2               	bsf	intcon,7,c	;volatile
  1210  000510                     l1715:
  1211  000510  0E06               	movlw	6
  1212  000512  1846               	xorwf	_screenMode,w,c
  1213  000514  A4D8               	btfss	status,2,c
  1214  000516  D01A               	goto	l1729
  1215  000518  D7E2               	goto	l153
  1216  00051A                     l156:
  1217                           
  1218                           ;main.c: 114: (INTCONbits.GIE = 0);
  1219  00051A  9EF2               	bcf	intcon,7,c	;volatile
  1220                           
  1221                           ;main.c: 115: unsigned char numAA;
  1222                           ;main.c: 118: numAA = 2;
  1223  00051C  0E02               	movlw	2
  1224  00051E  6E3B               	movwf	main@numAA,c
  1225                           
  1226                           ;main.c: 120: lcdInst(0b10000000);;
  1227  000520  0E80               	movlw	128
  1228  000522  ECEB  F004         	call	_lcdInst
  1229                           
  1230                           ;main.c: 121: printf("NUMBER OF AA    ");
  1231  000526  0E87               	movlw	low STR_15
  1232  000528  6E1F               	movwf	printf@f,c
  1233  00052A  0EFF               	movlw	high STR_15
  1234  00052C  6E20               	movwf	printf@f+1,c
  1235  00052E  EC09  F000         	call	_printf	;wreg free
  1236                           
  1237                           ;main.c: 122: lcdInst(0b11000000);;
  1238  000532  0EC0               	movlw	192
  1239  000534  ECEB  F004         	call	_lcdInst
  1240                           
  1241                           ;main.c: 123: printf("BATTERIES: %02x     ", numAA);
  1242  000538  0E08               	movlw	low STR_16
  1243  00053A  6E1F               	movwf	printf@f,c
  1244  00053C  0EFF               	movlw	high STR_16
  1245  00053E  6E20               	movwf	printf@f+1,c
  1246  000540  C03B  F021         	movff	main@numAA,?_printf+2
  1247  000544  6A22               	clrf	?_printf+3,c
  1248  000546  EC09  F000         	call	_printf	;wreg free
  1249                           
  1250                           ;main.c: 124: (INTCONbits.GIE = 1);
  1251  00054A  8EF2               	bsf	intcon,7,c	;volatile
  1252  00054C                     l1729:
  1253  00054C  0E07               	movlw	7
  1254  00054E  1846               	xorwf	_screenMode,w,c
  1255  000550  A4D8               	btfss	status,2,c
  1256  000552  D057               	goto	l1751
  1257  000554  D7E2               	goto	l156
  1258  000556                     l1731:
  1259                           
  1260                           ;main.c: 128: I2C_Master_Start();
  1261  000556  ECFA  F004         	call	_I2C_Master_Start	;wreg free
  1262                           
  1263                           ;main.c: 129: I2C_Master_Write(0b11010000);
  1264  00055A  0E00               	movlw	0
  1265  00055C  6E15               	movwf	I2C_Master_Write@d+1,c
  1266  00055E  0ED0               	movlw	208
  1267  000560  6E14               	movwf	I2C_Master_Write@d,c
  1268  000562  ECF1  F004         	call	_I2C_Master_Write	;wreg free
  1269                           
  1270                           ;main.c: 130: I2C_Master_Write(0x00);
  1271  000566  0E00               	movlw	0
  1272  000568  6E15               	movwf	I2C_Master_Write@d+1,c
  1273  00056A  0E00               	movlw	0
  1274  00056C  6E14               	movwf	I2C_Master_Write@d,c
  1275  00056E  ECF1  F004         	call	_I2C_Master_Write	;wreg free
  1276                           
  1277                           ;main.c: 131: I2C_Master_Stop();
  1278  000572  ECF6  F004         	call	_I2C_Master_Stop	;wreg free
  1279                           
  1280                           ;main.c: 133: I2C_Master_Start();
  1281  000576  ECFA  F004         	call	_I2C_Master_Start	;wreg free
  1282                           
  1283                           ;main.c: 134: I2C_Master_Write(0b11010001);
  1284  00057A  0E00               	movlw	0
  1285  00057C  6E15               	movwf	I2C_Master_Write@d+1,c
  1286  00057E  0ED1               	movlw	209
  1287  000580  6E14               	movwf	I2C_Master_Write@d,c
  1288  000582  ECF1  F004         	call	_I2C_Master_Write	;wreg free
  1289                           
  1290                           ;main.c: 135: for(unsigned char i=0;i<0x06;i++){
  1291  000586  0E00               	movlw	0
  1292  000588  6E3E               	movwf	main@i_237,c
  1293  00058A                     l1735:
  1294  00058A  0E05               	movlw	5
  1295  00058C  643E               	cpfsgt	main@i_237,c
  1296  00058E  D001               	goto	l1739
  1297  000590  D00E               	goto	l1745
  1298  000592                     l1739:
  1299                           
  1300                           ;main.c: 136: time[i] = I2C_Master_Read(1);
  1301  000592  503E               	movf	main@i_237,w,c
  1302  000594  0D01               	mullw	1
  1303  000596  0E3F               	movlw	low _time
  1304  000598  24F3               	addwf	prodl,w,c
  1305  00059A  6ED9               	movwf	fsr2l,c
  1306  00059C  0E00               	movlw	high _time
  1307  00059E  20F4               	addwfc	prodh,w,c
  1308  0005A0  6EDA               	movwf	fsr2h,c
  1309  0005A2  0E01               	movlw	1
  1310  0005A4  ECBA  F004         	call	_I2C_Master_Read
  1311  0005A8  6EDF               	movwf	indf2,c
  1312  0005AA  2A3E               	incf	main@i_237,f,c
  1313  0005AC  D7EE               	goto	l1735
  1314  0005AE                     l1745:
  1315                           
  1316                           ;main.c: 137: }
  1317                           ;main.c: 138: time[6] = I2C_Master_Read(0);
  1318  0005AE  0E00               	movlw	0
  1319  0005B0  ECBA  F004         	call	_I2C_Master_Read
  1320  0005B4  6E45               	movwf	_time+6,c
  1321                           
  1322                           ;main.c: 139: I2C_Master_Stop();
  1323  0005B6  ECF6  F004         	call	_I2C_Master_Stop	;wreg free
  1324                           
  1325                           ;main.c: 140: lcdInst(0b10000000);;
  1326  0005BA  0E80               	movlw	128
  1327  0005BC  ECEB  F004         	call	_lcdInst
  1328                           
  1329                           ;main.c: 141: printf("DATE: %02x/%02x/%02x  ", time[6],time[5],time[4]);
  1330  0005C0  0EC5               	movlw	low STR_17
  1331  0005C2  6E1F               	movwf	printf@f,c
  1332  0005C4  0EFE               	movlw	high STR_17
  1333  0005C6  6E20               	movwf	printf@f+1,c
  1334  0005C8  C045  F021         	movff	_time+6,?_printf+2
  1335  0005CC  6A22               	clrf	?_printf+3,c
  1336  0005CE  C044  F023         	movff	_time+5,?_printf+4
  1337  0005D2  6A24               	clrf	?_printf+5,c
  1338  0005D4  C043  F025         	movff	_time+4,?_printf+6
  1339  0005D8  6A26               	clrf	?_printf+7,c
  1340  0005DA  EC09  F000         	call	_printf	;wreg free
  1341                           
  1342                           ;main.c: 142: lcdInst(0b11000000);;
  1343  0005DE  0EC0               	movlw	192
  1344  0005E0  ECEB  F004         	call	_lcdInst
  1345                           
  1346                           ;main.c: 143: printf("TIME: %02x:%02x:%02x  ", time[2],time[1],time[0]);
  1347  0005E4  0EDC               	movlw	low STR_18
  1348  0005E6  6E1F               	movwf	printf@f,c
  1349  0005E8  0EFE               	movlw	high STR_18
  1350  0005EA  6E20               	movwf	printf@f+1,c
  1351  0005EC  C041  F021         	movff	_time+2,?_printf+2
  1352  0005F0  6A22               	clrf	?_printf+3,c
  1353  0005F2  C040  F023         	movff	_time+1,?_printf+4
  1354  0005F6  6A24               	clrf	?_printf+5,c
  1355  0005F8  C03F  F025         	movff	_time,?_printf+6
  1356  0005FC  6A26               	clrf	?_printf+7,c
  1357  0005FE  EC09  F000         	call	_printf	;wreg free
  1358  000602                     l1751:
  1359  000602  0E08               	movlw	8
  1360  000604  1846               	xorwf	_screenMode,w,c
  1361  000606  A4D8               	btfss	status,2,c
  1362  000608  D6B8               	goto	l1619
  1363  00060A  D7A5               	goto	l1731
  1364  00060C                     __end_of_main:
  1365                           	opt stack 0
  1366                           tblptru	equ	0xFF8
  1367                           tblptrh	equ	0xFF7
  1368                           tblptrl	equ	0xFF6
  1369                           tablat	equ	0xFF5
  1370                           prodh	equ	0xFF4
  1371                           prodl	equ	0xFF3
  1372                           intcon	equ	0xFF2
  1373                           intcon3	equ	0xFF0
  1374                           postinc0	equ	0xFEE
  1375                           wreg	equ	0xFE8
  1376                           indf2	equ	0xFDF
  1377                           fsr2h	equ	0xFDA
  1378                           fsr2l	equ	0xFD9
  1379                           status	equ	0xFD8
  1380                           
  1381 ;; *************** function _printf *****************
  1382 ;; Defined at:
  1383 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  1384 ;; Parameters:    Size  Location     Type
  1385 ;;  f               2   30[COMRAM] PTR const unsigned char 
  1386 ;;		 -> STR_18(23), STR_17(23), STR_16(21), STR_15(17), 
  1387 ;;		 -> STR_14(21), STR_13(17), STR_12(19), STR_11(17), 
  1388 ;;		 -> STR_10(19), STR_9(17), STR_8(25), STR_7(17), 
  1389 ;;		 -> STR_6(17), STR_5(17), STR_4(19), STR_3(17), 
  1390 ;;		 -> STR_2(17), STR_1(17), 
  1391 ;; Auto vars:     Size  Location     Type
  1392 ;;  idx             1   42[COMRAM] unsigned char 
  1393 ;;  tmpval          4    0        struct .
  1394 ;;  cp              3    0        PTR const unsigned char 
  1395 ;;  width           2   49[COMRAM] int 
  1396 ;;  val             2   46[COMRAM] unsigned int 
  1397 ;;  ap              2   43[COMRAM] PTR void [1]
  1398 ;;		 -> ?_printf(2), 
  1399 ;;  len             2    0        unsigned int 
  1400 ;;  c               1   51[COMRAM] char 
  1401 ;;  flag            1   48[COMRAM] unsigned char 
  1402 ;;  prec            1   45[COMRAM] char 
  1403 ;; Return value:  Size  Location     Type
  1404 ;;                  2   30[COMRAM] int 
  1405 ;; Registers used:
  1406 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1407 ;; Tracked objects:
  1408 ;;		On entry : 0/0
  1409 ;;		On exit  : 0/0
  1410 ;;		Unchanged: 0/0
  1411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1412 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1413 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1414 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1415 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1416 ;;Total ram usage:       22 bytes
  1417 ;; Hardware stack levels used:    1
  1418 ;; Hardware stack levels required when called:    4
  1419 ;; This function calls:
  1420 ;;		___lwdiv
  1421 ;;		___lwmod
  1422 ;;		___wmul
  1423 ;;		_isdigit
  1424 ;;		_putch
  1425 ;; This function is called by:
  1426 ;;		_main
  1427 ;; This function uses a non-reentrant model
  1428 ;;
  1429                           
  1430                           	psect	text1
  1431  000012                     __ptext1:
  1432                           	opt stack 0
  1433  000012                     _printf:
  1434                           	opt stack 26
  1435                           
  1436                           ;doprnt.c: 466: va_list ap;
  1437                           ;doprnt.c: 499: signed char c;
  1438                           ;doprnt.c: 501: int width;
  1439                           ;doprnt.c: 506: signed char prec;
  1440                           ;doprnt.c: 508: unsigned char flag;
  1441                           ;doprnt.c: 523: union {
  1442                           ;doprnt.c: 524: unsigned long vd;
  1443                           ;doprnt.c: 525: double integ;
  1444                           ;doprnt.c: 526: } tmpval;
  1445                           ;doprnt.c: 528: unsigned int val;
  1446                           ;doprnt.c: 529: unsigned len;
  1447                           ;doprnt.c: 530: const char * cp;
  1448                           ;doprnt.c: 533: *ap = __va_start();
  1449                           
  1450                           ;incstack = 0
  1451  000012  0E21               	movlw	low (?_printf+2)
  1452  000014  6E2C               	movwf	printf@ap,c
  1453  000016  0E00               	movlw	high (?_printf+2)
  1454  000018  6E2D               	movwf	printf@ap+1,c
  1455                           
  1456                           ;doprnt.c: 536: while(c = *f++) {
  1457  00001A  D174               	goto	l1579
  1458  00001C                     l1453:
  1459                           
  1460                           ;doprnt.c: 538: if(c != '%')
  1461  00001C  0E25               	movlw	37
  1462  00001E  1834               	xorwf	printf@c,w,c
  1463  000020  B4D8               	btfsc	status,2,c
  1464  000022  D004               	goto	l1457
  1465                           
  1466                           ;doprnt.c: 540: {
  1467                           ;doprnt.c: 541: (putch(c) );
  1468  000024  5034               	movf	printf@c,w,c
  1469  000026  ECE5  F004         	call	_putch
  1470                           
  1471                           ;doprnt.c: 542: continue;
  1472  00002A  D16C               	goto	l1579
  1473  00002C                     l1457:
  1474                           
  1475                           ;doprnt.c: 543: }
  1476                           ;doprnt.c: 546: width = 0;
  1477  00002C  0E00               	movlw	0
  1478  00002E  6E33               	movwf	printf@width+1,c
  1479  000030  0E00               	movlw	0
  1480  000032  6E32               	movwf	printf@width,c
  1481                           
  1482                           ;doprnt.c: 548: flag = 0;
  1483  000034  0E00               	movlw	0
  1484  000036  6E31               	movwf	printf@flag,c
  1485                           
  1486                           ;doprnt.c: 551: switch(*f) {
  1487                           
  1488                           ;doprnt.c: 550: for(;;) {
  1489  000038  D003               	goto	l1463
  1490  00003A                     l1459:
  1491                           
  1492                           ;doprnt.c: 580: flag |= 0x04;
  1493  00003A  8431               	bsf	printf@flag,2,c
  1494                           
  1495                           ;doprnt.c: 581: f++;
  1496  00003C  4A1F               	infsnz	printf@f,f,c
  1497  00003E  2A20               	incf	printf@f+1,f,c
  1498  000040                     l1463:
  1499  000040  C01F  FFF6         	movff	printf@f,tblptrl
  1500  000044  C020  FFF7         	movff	printf@f+1,tblptrh
  1501  000048                     	if	0	;tblptru may be non-zero
  1502  000048                     	endif
  1503  000048                     	if	0	;tblptru may be non-zero
  1504  000048                     	endif
  1505  000048  0008               	tblrd		*
  1506  00004A  50F5               	movf	tablat,w,c
  1507                           
  1508                           ; Switch size 1, requested type "space"
  1509                           ; Number of cases is 1, Range of values is 48 to 48
  1510                           ; switch strategies available:
  1511                           ; Name         Instructions Cycles
  1512                           ; simple_byte            4     3 (average)
  1513                           ;	Chosen strategy is simple_byte
  1514  00004C  0A30               	xorlw	48	; case 48
  1515  00004E  B4D8               	btfsc	status,2,c
  1516  000050  D7F4               	goto	l1459
  1517                           
  1518                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1519                           
  1520                           ;doprnt.c: 586: }
  1521                           
  1522                           ;doprnt.c: 585: break;
  1523  000052  C01F  FFF6         	movff	printf@f,tblptrl
  1524  000056  C020  FFF7         	movff	printf@f+1,tblptrh
  1525  00005A                     	if	0	;tblptru may be non-zero
  1526  00005A                     	endif
  1527  00005A                     	if	0	;tblptru may be non-zero
  1528  00005A                     	endif
  1529  00005A  0008               	tblrd		*
  1530  00005C  50F5               	movf	tablat,w,c
  1531  00005E  ECCD  F004         	call	_isdigit
  1532  000062  A0D8               	btfss	status,0,c
  1533  000064  D035               	goto	l1481
  1534                           
  1535                           ;doprnt.c: 598: width = 0;
  1536  000066  0E00               	movlw	0
  1537  000068  6E33               	movwf	printf@width+1,c
  1538  00006A  0E00               	movlw	0
  1539  00006C  6E32               	movwf	printf@width,c
  1540  00006E                     l1469:
  1541                           
  1542                           ;doprnt.c: 600: width *= 10;
  1543  00006E  C032  F013         	movff	printf@width,___wmul@multiplier
  1544  000072  C033  F014         	movff	printf@width+1,___wmul@multiplier+1
  1545  000076  0E00               	movlw	0
  1546  000078  6E16               	movwf	___wmul@multiplicand+1,c
  1547  00007A  0E0A               	movlw	10
  1548  00007C  6E15               	movwf	___wmul@multiplicand,c
  1549  00007E  ECA7  F004         	call	___wmul	;wreg free
  1550  000082  C013  F032         	movff	?___wmul,printf@width
  1551  000086  C014  F033         	movff	?___wmul+1,printf@width+1
  1552                           
  1553                           ;doprnt.c: 601: width += *f++ - '0';
  1554  00008A  0ED0               	movlw	208
  1555  00008C  6E27               	movwf	??_printf& (0+255),c
  1556  00008E  0EFF               	movlw	255
  1557  000090  6E28               	movwf	(??_printf+1)& (0+255),c
  1558  000092  C01F  FFF6         	movff	printf@f,tblptrl
  1559  000096  C020  FFF7         	movff	printf@f+1,tblptrh
  1560  00009A                     	if	0	;tblptru may be non-zero
  1561  00009A                     	endif
  1562  00009A                     	if	0	;tblptru may be non-zero
  1563  00009A                     	endif
  1564  00009A  0008               	tblrd		*
  1565  00009C  50F5               	movf	tablat,w,c
  1566  00009E  6E29               	movwf	(??_printf+2)& (0+255),c
  1567  0000A0  6A2A               	clrf	(??_printf+3)& (0+255),c
  1568  0000A2  5027               	movf	??_printf,w,c
  1569  0000A4  2629               	addwf	??_printf+2,f,c
  1570  0000A6  5028               	movf	??_printf+1,w,c
  1571  0000A8  222A               	addwfc	??_printf+3,f,c
  1572  0000AA  5029               	movf	??_printf+2,w,c
  1573  0000AC  2632               	addwf	printf@width,f,c
  1574  0000AE  502A               	movf	??_printf+3,w,c
  1575  0000B0  2233               	addwfc	printf@width+1,f,c
  1576  0000B2  4A1F               	infsnz	printf@f,f,c
  1577  0000B4  2A20               	incf	printf@f+1,f,c
  1578                           
  1579                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1580  0000B6  C01F  FFF6         	movff	printf@f,tblptrl
  1581  0000BA  C020  FFF7         	movff	printf@f+1,tblptrh
  1582  0000BE                     	if	0	;tblptru may be non-zero
  1583  0000BE                     	endif
  1584  0000BE                     	if	0	;tblptru may be non-zero
  1585  0000BE                     	endif
  1586  0000BE  0008               	tblrd		*
  1587  0000C0  50F5               	movf	tablat,w,c
  1588  0000C2  ECCD  F004         	call	_isdigit
  1589  0000C6  A0D8               	btfss	status,0,c
  1590  0000C8  D003               	goto	l1481
  1591  0000CA  D7D1               	goto	l1469
  1592  0000CC                     l1477:
  1593                           
  1594                           ;doprnt.c: 721: flag |= 0x80;
  1595  0000CC  8E31               	bsf	printf@flag,7,c
  1596                           
  1597                           ;doprnt.c: 723: break;
  1598  0000CE  D017               	goto	l217
  1599  0000D0                     l1481:
  1600  0000D0  C01F  FFF6         	movff	printf@f,tblptrl
  1601  0000D4  C020  FFF7         	movff	printf@f+1,tblptrh
  1602  0000D8  4A1F               	infsnz	printf@f,f,c
  1603  0000DA  2A20               	incf	printf@f+1,f,c
  1604  0000DC                     	if	0	;tblptru may be non-zero
  1605  0000DC                     	endif
  1606  0000DC                     	if	0	;tblptru may be non-zero
  1607  0000DC                     	endif
  1608  0000DC  0008               	tblrd		*
  1609  0000DE  CFF5 F034          	movff	tablat,printf@c
  1610  0000E2  5034               	movf	printf@c,w,c
  1611                           
  1612                           ; Switch size 1, requested type "space"
  1613                           ; Number of cases is 4, Range of values is 0 to 120
  1614                           ; switch strategies available:
  1615                           ; Name         Instructions Cycles
  1616                           ; simple_byte           13     7 (average)
  1617                           ;	Chosen strategy is simple_byte
  1618  0000E4  0A00               	xorlw	0	; case 0
  1619  0000E6  B4D8               	btfsc	status,2,c
  1620  0000E8  0012               	return	
  1621  0000EA  0A64               	xorlw	100	; case 100
  1622  0000EC  B4D8               	btfsc	status,2,c
  1623  0000EE  D007               	goto	l217
  1624  0000F0  0A0D               	xorlw	13	; case 105
  1625  0000F2  B4D8               	btfsc	status,2,c
  1626  0000F4  D004               	goto	l217
  1627  0000F6  0A11               	xorlw	17	; case 120
  1628  0000F8  B4D8               	btfsc	status,2,c
  1629  0000FA  D7E8               	goto	l1477
  1630  0000FC  D103               	goto	l1579
  1631  0000FE                     l217:
  1632                           
  1633                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  1634  0000FE  BE31               	btfsc	printf@flag,7,c
  1635  000100  D015               	goto	l1493
  1636                           
  1637                           ;doprnt.c: 1253: {
  1638                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1639  000102  C02C  FFD9         	movff	printf@ap,fsr2l
  1640  000106  C02D  FFDA         	movff	printf@ap+1,fsr2h
  1641  00010A  CFDE F02F          	movff	postinc2,printf@val
  1642  00010E  CFDD F030          	movff	postdec2,printf@val+1
  1643  000112  0E02               	movlw	2
  1644  000114  262C               	addwf	printf@ap,f,c
  1645  000116  0E00               	movlw	0
  1646  000118  222D               	addwfc	printf@ap+1,f,c
  1647                           
  1648                           ;doprnt.c: 1261: if((int)val < 0) {
  1649  00011A  AE30               	btfss	printf@val+1,7,c
  1650  00011C  D044               	goto	l1527
  1651                           
  1652                           ;doprnt.c: 1262: flag |= 0x03;
  1653  00011E  0E03               	movlw	3
  1654  000120  1231               	iorwf	printf@flag,f,c
  1655                           
  1656                           ;doprnt.c: 1263: val = -val;
  1657  000122  6C2F               	negf	printf@val,c
  1658  000124  1E30               	comf	printf@val+1,f,c
  1659  000126  B0D8               	btfsc	status,0,c
  1660  000128  2A30               	incf	printf@val+1,f,c
  1661                           
  1662                           ;doprnt.c: 1264: }
  1663                           ;doprnt.c: 1266: }
  1664  00012A  D03D               	goto	l1527
  1665  00012C                     l1493:
  1666                           
  1667                           ;doprnt.c: 1268: else
  1668                           ;doprnt.c: 1273: {
  1669                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  1670  00012C  C02C  FFD9         	movff	printf@ap,fsr2l
  1671  000130  C02D  FFDA         	movff	printf@ap+1,fsr2h
  1672  000134  CFDE F02F          	movff	postinc2,printf@val
  1673  000138  CFDD F030          	movff	postdec2,printf@val+1
  1674  00013C  0E02               	movlw	2
  1675  00013E  262C               	addwf	printf@ap,f,c
  1676  000140  0E00               	movlw	0
  1677  000142  222D               	addwfc	printf@ap+1,f,c
  1678                           
  1679                           ;doprnt.c: 1287: }
  1680                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  1681  000144  D030               	goto	l1527
  1682  000146                     l1497:
  1683                           
  1684                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1685  000146  0E01               	movlw	1
  1686  000148  6E34               	movwf	printf@c,c
  1687  00014A                     l1499:
  1688  00014A  0E05               	movlw	5
  1689  00014C  1834               	xorwf	printf@c,w,c
  1690  00014E  B4D8               	btfsc	status,2,c
  1691  000150  D032               	goto	l1529
  1692                           
  1693                           ;doprnt.c: 1306: if(val < dpowers[c])
  1694  000152  5034               	movf	printf@c,w,c
  1695  000154  0D02               	mullw	2
  1696  000156  0E9A               	movlw	low _dpowers
  1697  000158  24F3               	addwf	prodl,w,c
  1698  00015A  6EF6               	movwf	tblptrl,c
  1699  00015C  0EFE               	movlw	high _dpowers
  1700  00015E  20F4               	addwfc	prodh,w,c
  1701  000160  6EF7               	movwf	tblptrh,c
  1702  000162                     	if	0	;There are less than 3 active tblptr bytes
  1703  000162                     	endif
  1704  000162  0009               	tblrd		*+
  1705  000164  50F5               	movf	tablat,w,c
  1706  000166  5C2F               	subwf	printf@val,w,c
  1707  000168  0009               	tblrd		*+
  1708  00016A  50F5               	movf	tablat,w,c
  1709  00016C  5830               	subwfb	printf@val+1,w,c
  1710  00016E  A0D8               	btfss	status,0,c
  1711  000170  D022               	goto	l1529
  1712                           
  1713                           ;doprnt.c: 1307: break;
  1714  000172  2A34               	incf	printf@c,f,c
  1715  000174  D7EA               	goto	l1499
  1716  000176                     l1511:
  1717                           
  1718                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  1719  000176  0E01               	movlw	1
  1720  000178  6E34               	movwf	printf@c,c
  1721  00017A                     l1513:
  1722  00017A  0E04               	movlw	4
  1723  00017C  1834               	xorwf	printf@c,w,c
  1724  00017E  B4D8               	btfsc	status,2,c
  1725  000180  D01A               	goto	l1529
  1726                           
  1727                           ;doprnt.c: 1317: if(val < hexpowers[c])
  1728  000182  5034               	movf	printf@c,w,c
  1729  000184  0D02               	mullw	2
  1730  000186  0EA4               	movlw	low _hexpowers
  1731  000188  24F3               	addwf	prodl,w,c
  1732  00018A  6EF6               	movwf	tblptrl,c
  1733  00018C  0EFE               	movlw	high _hexpowers
  1734  00018E  20F4               	addwfc	prodh,w,c
  1735  000190  6EF7               	movwf	tblptrh,c
  1736  000192                     	if	0	;There are less than 3 active tblptr bytes
  1737  000192                     	endif
  1738  000192  0009               	tblrd		*+
  1739  000194  50F5               	movf	tablat,w,c
  1740  000196  5C2F               	subwf	printf@val,w,c
  1741  000198  0009               	tblrd		*+
  1742  00019A  50F5               	movf	tablat,w,c
  1743  00019C  5830               	subwfb	printf@val+1,w,c
  1744  00019E  A0D8               	btfss	status,0,c
  1745  0001A0  D00A               	goto	l1529
  1746                           
  1747                           ;doprnt.c: 1318: break;
  1748  0001A2  2A34               	incf	printf@c,f,c
  1749  0001A4  D7EA               	goto	l1513
  1750  0001A6                     l1527:
  1751  0001A6  5031               	movf	printf@flag,w,c
  1752  0001A8  0B80               	andlw	128
  1753                           
  1754                           ; Switch size 1, requested type "space"
  1755                           ; Number of cases is 2, Range of values is 0 to 128
  1756                           ; switch strategies available:
  1757                           ; Name         Instructions Cycles
  1758                           ; simple_byte            7     4 (average)
  1759                           ;	Chosen strategy is simple_byte
  1760  0001AA  0A00               	xorlw	0	; case 0
  1761  0001AC  B4D8               	btfsc	status,2,c
  1762  0001AE  D7CB               	goto	l1497
  1763  0001B0  0A80               	xorlw	128	; case 128
  1764  0001B2  B4D8               	btfsc	status,2,c
  1765  0001B4  D7E0               	goto	l1511
  1766  0001B6                     l1529:
  1767                           
  1768                           ;doprnt.c: 1345: if(width && flag & 0x03)
  1769  0001B6  5032               	movf	printf@width,w,c
  1770  0001B8  1033               	iorwf	printf@width+1,w,c
  1771  0001BA  B4D8               	btfsc	status,2,c
  1772  0001BC  D009               	goto	l1535
  1773  0001BE  C031  F027         	movff	printf@flag,??_printf
  1774  0001C2  0E03               	movlw	3
  1775  0001C4  1627               	andwf	??_printf,f,c
  1776  0001C6  B4D8               	btfsc	status,2,c
  1777  0001C8  D003               	goto	l1535
  1778                           
  1779                           ;doprnt.c: 1346: width--;
  1780  0001CA  0632               	decf	printf@width,f,c
  1781  0001CC  A0D8               	btfss	status,0,c
  1782  0001CE  0633               	decf	printf@width+1,f,c
  1783  0001D0                     l1535:
  1784                           
  1785                           ;doprnt.c: 1381: if(width > c)
  1786  0001D0  0E80               	movlw	128
  1787  0001D2  BE34               	btfsc	printf@c,7,c
  1788  0001D4  0E7F               	movlw	127
  1789  0001D6  6E27               	movwf	??_printf& (0+255),c
  1790  0001D8  5032               	movf	printf@width,w,c
  1791  0001DA  5C34               	subwf	printf@c,w,c
  1792  0001DC  5033               	movf	printf@width+1,w,c
  1793  0001DE  0A80               	xorlw	128
  1794  0001E0  5827               	subwfb	??_printf& (0+255),w,c
  1795  0001E2  B0D8               	btfsc	status,0,c
  1796  0001E4  D007               	goto	l1539
  1797                           
  1798                           ;doprnt.c: 1382: width -= c;
  1799  0001E6  5034               	movf	printf@c,w,c
  1800  0001E8  5E32               	subwf	printf@width,f,c
  1801  0001EA  0E00               	movlw	0
  1802  0001EC  BE34               	btfsc	printf@c,7,c
  1803  0001EE  0EFF               	movlw	255
  1804  0001F0  5A33               	subwfb	printf@width+1,f,c
  1805  0001F2  D004               	goto	l1541
  1806  0001F4                     l1539:
  1807                           
  1808                           ;doprnt.c: 1383: else
  1809                           ;doprnt.c: 1384: width = 0;
  1810  0001F4  0E00               	movlw	0
  1811  0001F6  6E33               	movwf	printf@width+1,c
  1812  0001F8  0E00               	movlw	0
  1813  0001FA  6E32               	movwf	printf@width,c
  1814  0001FC                     l1541:
  1815                           
  1816                           ;doprnt.c: 1387: if(flag & 0x04) {
  1817  0001FC  A431               	btfss	printf@flag,2,c
  1818  0001FE  D014               	goto	l1553
  1819                           
  1820                           ;doprnt.c: 1392: if(flag & 0x03)
  1821  000200  C031  F027         	movff	printf@flag,??_printf
  1822  000204  0E03               	movlw	3
  1823  000206  1627               	andwf	??_printf,f,c
  1824  000208  B4D8               	btfsc	status,2,c
  1825  00020A  D003               	goto	l1547
  1826                           
  1827                           ;doprnt.c: 1393: (putch('-') );
  1828  00020C  0E2D               	movlw	45
  1829  00020E  ECE5  F004         	call	_putch
  1830  000212                     l1547:
  1831                           
  1832                           ;doprnt.c: 1415: if(width)
  1833  000212  5032               	movf	printf@width,w,c
  1834  000214  1033               	iorwf	printf@width+1,w,c
  1835  000216  B4D8               	btfsc	status,2,c
  1836  000218  D01E               	goto	l1563
  1837                           
  1838                           ;doprnt.c: 1417: (putch('0') );
  1839                           
  1840                           ;doprnt.c: 1416: do
  1841  00021A  0E30               	movlw	48
  1842  00021C  ECE5  F004         	call	_putch
  1843                           
  1844                           ;doprnt.c: 1418: while(--width);
  1845  000220  0632               	decf	printf@width,f,c
  1846  000222  A0D8               	btfss	status,0,c
  1847  000224  0633               	decf	printf@width+1,f,c
  1848  000226  D7F5               	goto	l1547
  1849  000228                     l1553:
  1850                           
  1851                           ;doprnt.c: 1422: {
  1852                           ;doprnt.c: 1424: if(width
  1853                           ;doprnt.c: 1428: )
  1854  000228  5032               	movf	printf@width,w,c
  1855  00022A  1033               	iorwf	printf@width+1,w,c
  1856  00022C  B4D8               	btfsc	status,2,c
  1857  00022E  D00A               	goto	l1559
  1858  000230                     l1555:
  1859                           
  1860                           ;doprnt.c: 1430: (putch(' ') );
  1861  000230  0E20               	movlw	32
  1862  000232  ECE5  F004         	call	_putch
  1863                           
  1864                           ;doprnt.c: 1431: while(--width);
  1865  000236  0632               	decf	printf@width,f,c
  1866  000238  A0D8               	btfss	status,0,c
  1867  00023A  0633               	decf	printf@width+1,f,c
  1868  00023C  5032               	movf	printf@width,w,c
  1869  00023E  1033               	iorwf	printf@width+1,w,c
  1870  000240  A4D8               	btfss	status,2,c
  1871  000242  D7F6               	goto	l1555
  1872  000244                     l1559:
  1873                           
  1874                           ;doprnt.c: 1438: if(flag & 0x03)
  1875  000244  C031  F027         	movff	printf@flag,??_printf
  1876  000248  0E03               	movlw	3
  1877  00024A  1627               	andwf	??_printf,f,c
  1878  00024C  B4D8               	btfsc	status,2,c
  1879  00024E  D003               	goto	l1563
  1880                           
  1881                           ;doprnt.c: 1439: (putch('-') );
  1882  000250  0E2D               	movlw	45
  1883  000252  ECE5  F004         	call	_putch
  1884  000256                     l1563:
  1885                           
  1886                           ;doprnt.c: 1469: }
  1887                           ;doprnt.c: 1472: prec = c;
  1888  000256  C034  F02E         	movff	printf@c,printf@prec
  1889                           
  1890                           ;doprnt.c: 1474: while(prec--) {
  1891  00025A  D050               	goto	l1577
  1892  00025C                     l1565:
  1893                           
  1894                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1895  00025C  502E               	movf	printf@prec,w,c
  1896  00025E  0D02               	mullw	2
  1897  000260  0E9A               	movlw	low _dpowers
  1898  000262  24F3               	addwf	prodl,w,c
  1899  000264  6EF6               	movwf	tblptrl,c
  1900  000266  0EFE               	movlw	high _dpowers
  1901  000268  20F4               	addwfc	prodh,w,c
  1902  00026A  6EF7               	movwf	tblptrh,c
  1903  00026C                     	if	0	;There are less than 3 active tblptr bytes
  1904  00026C                     	endif
  1905  00026C  0009               	tblrd		*+
  1906  00026E  CFF5 F015          	movff	tablat,___lwdiv@divisor
  1907  000272  000A               	tblrd		*-
  1908  000274  CFF5 F016          	movff	tablat,___lwdiv@divisor+1
  1909  000278  C02F  F013         	movff	printf@val,___lwdiv@dividend
  1910  00027C  C030  F014         	movff	printf@val+1,___lwdiv@dividend+1
  1911  000280  ECE2  F003         	call	___lwdiv	;wreg free
  1912  000284  C013  F01A         	movff	?___lwdiv,___lwmod@dividend
  1913  000288  C014  F01B         	movff	?___lwdiv+1,___lwmod@dividend+1
  1914  00028C  0E00               	movlw	0
  1915  00028E  6E1D               	movwf	___lwmod@divisor+1,c
  1916  000290  0E0A               	movlw	10
  1917  000292  6E1C               	movwf	___lwmod@divisor,c
  1918  000294  EC55  F004         	call	___lwmod	;wreg free
  1919  000298  501A               	movf	?___lwmod,w,c
  1920  00029A  0F30               	addlw	48
  1921  00029C  6E34               	movwf	printf@c,c
  1922                           
  1923                           ;doprnt.c: 1491: break;
  1924  00029E  D02B               	goto	l1575
  1925  0002A0                     l1567:
  1926                           
  1927                           ;doprnt.c: 1499: {
  1928                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  1929  0002A0  C02F  F013         	movff	printf@val,___lwdiv@dividend
  1930  0002A4  C030  F014         	movff	printf@val+1,___lwdiv@dividend+1
  1931  0002A8  502E               	movf	printf@prec,w,c
  1932  0002AA  0D02               	mullw	2
  1933  0002AC  0EA4               	movlw	low _hexpowers
  1934  0002AE  24F3               	addwf	prodl,w,c
  1935  0002B0  6EF6               	movwf	tblptrl,c
  1936  0002B2  0EFE               	movlw	high _hexpowers
  1937  0002B4  20F4               	addwfc	prodh,w,c
  1938  0002B6  6EF7               	movwf	tblptrh,c
  1939  0002B8                     	if	0	;There are less than 3 active tblptr bytes
  1940  0002B8                     	endif
  1941  0002B8  0009               	tblrd		*+
  1942  0002BA  CFF5 F015          	movff	tablat,___lwdiv@divisor
  1943  0002BE  000A               	tblrd		*-
  1944  0002C0  CFF5 F016          	movff	tablat,___lwdiv@divisor+1
  1945  0002C4  ECE2  F003         	call	___lwdiv	;wreg free
  1946  0002C8  5013               	movf	?___lwdiv,w,c
  1947  0002CA  0B0F               	andlw	15
  1948  0002CC  6E2B               	movwf	printf@idx,c
  1949                           
  1950                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  1951  0002CE  502B               	movf	printf@idx,w,c
  1952  0002D0  0D01               	mullw	1
  1953  0002D2  0E43               	movlw	low STR_19
  1954  0002D4  24F3               	addwf	prodl,w,c
  1955  0002D6  6EF6               	movwf	tblptrl,c
  1956  0002D8  0EFF               	movlw	high STR_19
  1957  0002DA  20F4               	addwfc	prodh,w,c
  1958  0002DC  6EF7               	movwf	tblptrh,c
  1959  0002DE                     	if	0	;There are less than 3 active tblptr bytes
  1960  0002DE                     	endif
  1961  0002DE  0008               	tblrd		*
  1962  0002E0  CFF5 F034          	movff	tablat,printf@c
  1963                           
  1964                           ;doprnt.c: 1523: }
  1965                           
  1966                           ;doprnt.c: 1508: }
  1967                           ;doprnt.c: 1510: break;
  1968  0002E4  D008               	goto	l1575
  1969  0002E6                     l1573:
  1970  0002E6  5031               	movf	printf@flag,w,c
  1971  0002E8  0B80               	andlw	128
  1972                           
  1973                           ; Switch size 1, requested type "space"
  1974                           ; Number of cases is 2, Range of values is 0 to 128
  1975                           ; switch strategies available:
  1976                           ; Name         Instructions Cycles
  1977                           ; simple_byte            7     4 (average)
  1978                           ;	Chosen strategy is simple_byte
  1979  0002EA  0A00               	xorlw	0	; case 0
  1980  0002EC  B4D8               	btfsc	status,2,c
  1981  0002EE  D7B6               	goto	l1565
  1982  0002F0  0A80               	xorlw	128	; case 128
  1983  0002F2  B4D8               	btfsc	status,2,c
  1984  0002F4  D7D5               	goto	l1567
  1985  0002F6                     l1575:
  1986                           
  1987                           ;doprnt.c: 1524: (putch(c) );
  1988  0002F6  5034               	movf	printf@c,w,c
  1989  0002F8  ECE5  F004         	call	_putch
  1990  0002FC                     l1577:
  1991  0002FC  062E               	decf	printf@prec,f,c
  1992  0002FE  282E               	incf	printf@prec,w,c
  1993  000300  A4D8               	btfss	status,2,c
  1994  000302  D7F1               	goto	l1573
  1995  000304                     l1579:
  1996  000304  C01F  FFF6         	movff	printf@f,tblptrl
  1997  000308  C020  FFF7         	movff	printf@f+1,tblptrh
  1998  00030C  4A1F               	infsnz	printf@f,f,c
  1999  00030E  2A20               	incf	printf@f+1,f,c
  2000  000310                     	if	0	;tblptru may be non-zero
  2001  000310                     	endif
  2002  000310                     	if	0	;tblptru may be non-zero
  2003  000310                     	endif
  2004  000310  0008               	tblrd		*
  2005  000312  CFF5 F034          	movff	tablat,printf@c
  2006  000316  5034               	movf	printf@c,w,c
  2007  000318  B4D8               	btfsc	status,2,c
  2008  00031A  0012               	return	
  2009  00031C  D67F               	goto	l1453
  2010  00031E                     __end_of_printf:
  2011                           	opt stack 0
  2012                           tblptru	equ	0xFF8
  2013                           tblptrh	equ	0xFF7
  2014                           tblptrl	equ	0xFF6
  2015                           tablat	equ	0xFF5
  2016                           prodh	equ	0xFF4
  2017                           prodl	equ	0xFF3
  2018                           intcon	equ	0xFF2
  2019                           intcon3	equ	0xFF0
  2020                           postinc0	equ	0xFEE
  2021                           wreg	equ	0xFE8
  2022                           indf2	equ	0xFDF
  2023                           postinc2	equ	0xFDE
  2024                           postdec2	equ	0xFDD
  2025                           fsr2h	equ	0xFDA
  2026                           fsr2l	equ	0xFD9
  2027                           status	equ	0xFD8
  2028                           
  2029 ;; *************** function _putch *****************
  2030 ;; Defined at:
  2031 ;;		line 30 in file "../lcd.c"
  2032 ;; Parameters:    Size  Location     Type
  2033 ;;  data            1    wreg     unsigned char 
  2034 ;; Auto vars:     Size  Location     Type
  2035 ;;  data            1   20[COMRAM] unsigned char 
  2036 ;; Return value:  Size  Location     Type
  2037 ;;                  1    wreg      void 
  2038 ;; Registers used:
  2039 ;;		wreg, status,2, status,0, cstack
  2040 ;; Tracked objects:
  2041 ;;		On entry : 0/0
  2042 ;;		On exit  : 0/0
  2043 ;;		Unchanged: 0/0
  2044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2045 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2046 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2047 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2048 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2049 ;;Total ram usage:        1 bytes
  2050 ;; Hardware stack levels used:    1
  2051 ;; Hardware stack levels required when called:    3
  2052 ;; This function calls:
  2053 ;;		_lcdNibble
  2054 ;; This function is called by:
  2055 ;;		_printf
  2056 ;; This function uses a non-reentrant model
  2057 ;;
  2058                           
  2059                           	psect	text2
  2060  0009CA                     __ptext2:
  2061                           	opt stack 0
  2062  0009CA                     _putch:
  2063                           	opt stack 26
  2064                           
  2065                           ;incstack = 0
  2066                           ;putch@data stored from wreg
  2067  0009CA  6E15               	movwf	putch@data,c
  2068                           
  2069                           ;lcd.c: 31: LATDbits.LATD2 = 1;
  2070  0009CC  848C               	bsf	3980,2,c	;volatile
  2071                           
  2072                           ;lcd.c: 32: lcdNibble(data);
  2073  0009CE  5015               	movf	putch@data,w,c
  2074  0009D0  EC0B  F004         	call	_lcdNibble
  2075  0009D4  0012               	return		;funcret
  2076  0009D6                     __end_of_putch:
  2077                           	opt stack 0
  2078                           tblptru	equ	0xFF8
  2079                           tblptrh	equ	0xFF7
  2080                           tblptrl	equ	0xFF6
  2081                           tablat	equ	0xFF5
  2082                           prodh	equ	0xFF4
  2083                           prodl	equ	0xFF3
  2084                           intcon	equ	0xFF2
  2085                           intcon3	equ	0xFF0
  2086                           postinc0	equ	0xFEE
  2087                           wreg	equ	0xFE8
  2088                           indf2	equ	0xFDF
  2089                           postinc2	equ	0xFDE
  2090                           postdec2	equ	0xFDD
  2091                           fsr2h	equ	0xFDA
  2092                           fsr2l	equ	0xFD9
  2093                           status	equ	0xFD8
  2094                           
  2095 ;; *************** function _isdigit *****************
  2096 ;; Defined at:
  2097 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  2098 ;; Parameters:    Size  Location     Type
  2099 ;;  c               1    wreg     unsigned char 
  2100 ;; Auto vars:     Size  Location     Type
  2101 ;;  c               1   20[COMRAM] unsigned char 
  2102 ;; Return value:  Size  Location     Type
  2103 ;;		None               void
  2104 ;; Registers used:
  2105 ;;		wreg, status,2, status,0
  2106 ;; Tracked objects:
  2107 ;;		On entry : 0/0
  2108 ;;		On exit  : 0/0
  2109 ;;		Unchanged: 0/0
  2110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2111 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2112 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2113 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2114 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2115 ;;Total ram usage:        3 bytes
  2116 ;; Hardware stack levels used:    1
  2117 ;; Hardware stack levels required when called:    2
  2118 ;; This function calls:
  2119 ;;		Nothing
  2120 ;; This function is called by:
  2121 ;;		_printf
  2122 ;; This function uses a non-reentrant model
  2123 ;;
  2124                           
  2125                           	psect	text3
  2126  00099A                     __ptext3:
  2127                           	opt stack 0
  2128  00099A                     _isdigit:
  2129                           	opt stack 27
  2130                           
  2131                           ;incstack = 0
  2132                           ;isdigit@c stored from wreg
  2133  00099A  6E15               	movwf	isdigit@c,c
  2134  00099C  0E00               	movlw	0
  2135  00099E  6E14               	movwf	_isdigit$498,c
  2136  0009A0  0E3A               	movlw	58
  2137  0009A2  6015               	cpfslt	isdigit@c,c
  2138  0009A4  D005               	goto	l1369
  2139  0009A6  0E2F               	movlw	47
  2140  0009A8  6415               	cpfsgt	isdigit@c,c
  2141  0009AA  D002               	goto	l1369
  2142  0009AC  0E01               	movlw	1
  2143  0009AE  6E14               	movwf	_isdigit$498,c
  2144  0009B0                     l1369:
  2145  0009B0  C014  F013         	movff	_isdigit$498,??_isdigit
  2146  0009B4  3013               	rrcf	??_isdigit,w,c
  2147  0009B6  0012               	return	
  2148  0009B8                     __end_of_isdigit:
  2149                           	opt stack 0
  2150                           tblptru	equ	0xFF8
  2151                           tblptrh	equ	0xFF7
  2152                           tblptrl	equ	0xFF6
  2153                           tablat	equ	0xFF5
  2154                           prodh	equ	0xFF4
  2155                           prodl	equ	0xFF3
  2156                           intcon	equ	0xFF2
  2157                           intcon3	equ	0xFF0
  2158                           postinc0	equ	0xFEE
  2159                           wreg	equ	0xFE8
  2160                           indf2	equ	0xFDF
  2161                           postinc2	equ	0xFDE
  2162                           postdec2	equ	0xFDD
  2163                           fsr2h	equ	0xFDA
  2164                           fsr2l	equ	0xFD9
  2165                           status	equ	0xFD8
  2166                           
  2167 ;; *************** function ___wmul *****************
  2168 ;; Defined at:
  2169 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  2170 ;; Parameters:    Size  Location     Type
  2171 ;;  multiplier      2   18[COMRAM] unsigned int 
  2172 ;;  multiplicand    2   20[COMRAM] unsigned int 
  2173 ;; Auto vars:     Size  Location     Type
  2174 ;;  product         2   22[COMRAM] unsigned int 
  2175 ;; Return value:  Size  Location     Type
  2176 ;;                  2   18[COMRAM] unsigned int 
  2177 ;; Registers used:
  2178 ;;		wreg, status,2, status,0, prodl, prodh
  2179 ;; Tracked objects:
  2180 ;;		On entry : 0/0
  2181 ;;		On exit  : 0/0
  2182 ;;		Unchanged: 0/0
  2183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2184 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2185 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2186 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2187 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2188 ;;Total ram usage:        6 bytes
  2189 ;; Hardware stack levels used:    1
  2190 ;; Hardware stack levels required when called:    2
  2191 ;; This function calls:
  2192 ;;		Nothing
  2193 ;; This function is called by:
  2194 ;;		_printf
  2195 ;; This function uses a non-reentrant model
  2196 ;;
  2197                           
  2198                           	psect	text4
  2199  00094E                     __ptext4:
  2200                           	opt stack 0
  2201  00094E                     ___wmul:
  2202                           	opt stack 27
  2203                           
  2204                           ;incstack = 0
  2205  00094E  5013               	movf	___wmul@multiplier,w,c
  2206  000950  0215               	mulwf	___wmul@multiplicand,c
  2207  000952  CFF3 F017          	movff	prodl,___wmul@product
  2208  000956  CFF4 F018          	movff	prodh,___wmul@product+1
  2209  00095A  5013               	movf	___wmul@multiplier,w,c
  2210  00095C  0216               	mulwf	___wmul@multiplicand+1,c
  2211  00095E  50F3               	movf	prodl,w,c
  2212  000960  2618               	addwf	___wmul@product+1,f,c
  2213  000962  5014               	movf	___wmul@multiplier+1,w,c
  2214  000964  0215               	mulwf	___wmul@multiplicand,c
  2215  000966  50F3               	movf	prodl,w,c
  2216  000968  2618               	addwf	___wmul@product+1,f,c
  2217  00096A  C017  F013         	movff	___wmul@product,?___wmul
  2218  00096E  C018  F014         	movff	___wmul@product+1,?___wmul+1
  2219  000972  0012               	return	
  2220  000974                     __end_of___wmul:
  2221                           	opt stack 0
  2222                           tblptru	equ	0xFF8
  2223                           tblptrh	equ	0xFF7
  2224                           tblptrl	equ	0xFF6
  2225                           tablat	equ	0xFF5
  2226                           prodh	equ	0xFF4
  2227                           prodl	equ	0xFF3
  2228                           intcon	equ	0xFF2
  2229                           intcon3	equ	0xFF0
  2230                           postinc0	equ	0xFEE
  2231                           wreg	equ	0xFE8
  2232                           indf2	equ	0xFDF
  2233                           postinc2	equ	0xFDE
  2234                           postdec2	equ	0xFDD
  2235                           fsr2h	equ	0xFDA
  2236                           fsr2l	equ	0xFD9
  2237                           status	equ	0xFD8
  2238                           
  2239 ;; *************** function ___lwmod *****************
  2240 ;; Defined at:
  2241 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  2242 ;; Parameters:    Size  Location     Type
  2243 ;;  dividend        2   25[COMRAM] unsigned int 
  2244 ;;  divisor         2   27[COMRAM] unsigned int 
  2245 ;; Auto vars:     Size  Location     Type
  2246 ;;  counter         1   29[COMRAM] unsigned char 
  2247 ;; Return value:  Size  Location     Type
  2248 ;;                  2   25[COMRAM] unsigned int 
  2249 ;; Registers used:
  2250 ;;		wreg, status,2, status,0
  2251 ;; Tracked objects:
  2252 ;;		On entry : 0/0
  2253 ;;		On exit  : 0/0
  2254 ;;		Unchanged: 0/0
  2255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2256 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2257 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2258 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2259 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2260 ;;Total ram usage:        5 bytes
  2261 ;; Hardware stack levels used:    1
  2262 ;; Hardware stack levels required when called:    2
  2263 ;; This function calls:
  2264 ;;		Nothing
  2265 ;; This function is called by:
  2266 ;;		_printf
  2267 ;; This function uses a non-reentrant model
  2268 ;;
  2269                           
  2270                           	psect	text5
  2271  0008AA                     __ptext5:
  2272                           	opt stack 0
  2273  0008AA                     ___lwmod:
  2274                           	opt stack 27
  2275                           
  2276                           ;incstack = 0
  2277  0008AA  501C               	movf	___lwmod@divisor,w,c
  2278  0008AC  101D               	iorwf	___lwmod@divisor+1,w,c
  2279  0008AE  B4D8               	btfsc	status,2,c
  2280  0008B0  D018               	goto	l672
  2281  0008B2  0E01               	movlw	1
  2282  0008B4  6E1E               	movwf	___lwmod@counter,c
  2283  0008B6  D004               	goto	l1429
  2284  0008B8                     l1427:
  2285  0008B8  90D8               	bcf	status,0,c
  2286  0008BA  361C               	rlcf	___lwmod@divisor,f,c
  2287  0008BC  361D               	rlcf	___lwmod@divisor+1,f,c
  2288  0008BE  2A1E               	incf	___lwmod@counter,f,c
  2289  0008C0                     l1429:
  2290  0008C0  AE1D               	btfss	___lwmod@divisor+1,7,c
  2291  0008C2  D7FA               	goto	l1427
  2292  0008C4                     l1431:
  2293  0008C4  501C               	movf	___lwmod@divisor,w,c
  2294  0008C6  5C1A               	subwf	___lwmod@dividend,w,c
  2295  0008C8  501D               	movf	___lwmod@divisor+1,w,c
  2296  0008CA  581B               	subwfb	___lwmod@dividend+1,w,c
  2297  0008CC  A0D8               	btfss	status,0,c
  2298  0008CE  D004               	goto	l1435
  2299  0008D0  501C               	movf	___lwmod@divisor,w,c
  2300  0008D2  5E1A               	subwf	___lwmod@dividend,f,c
  2301  0008D4  501D               	movf	___lwmod@divisor+1,w,c
  2302  0008D6  5A1B               	subwfb	___lwmod@dividend+1,f,c
  2303  0008D8                     l1435:
  2304  0008D8  90D8               	bcf	status,0,c
  2305  0008DA  321D               	rrcf	___lwmod@divisor+1,f,c
  2306  0008DC  321C               	rrcf	___lwmod@divisor,f,c
  2307  0008DE  2E1E               	decfsz	___lwmod@counter,f,c
  2308  0008E0  D7F1               	goto	l1431
  2309  0008E2                     l672:
  2310  0008E2  C01A  F01A         	movff	___lwmod@dividend,?___lwmod
  2311  0008E6  C01B  F01B         	movff	___lwmod@dividend+1,?___lwmod+1
  2312  0008EA  0012               	return		;funcret
  2313  0008EC                     __end_of___lwmod:
  2314                           	opt stack 0
  2315                           tblptru	equ	0xFF8
  2316                           tblptrh	equ	0xFF7
  2317                           tblptrl	equ	0xFF6
  2318                           tablat	equ	0xFF5
  2319                           prodh	equ	0xFF4
  2320                           prodl	equ	0xFF3
  2321                           intcon	equ	0xFF2
  2322                           intcon3	equ	0xFF0
  2323                           postinc0	equ	0xFEE
  2324                           wreg	equ	0xFE8
  2325                           indf2	equ	0xFDF
  2326                           postinc2	equ	0xFDE
  2327                           postdec2	equ	0xFDD
  2328                           fsr2h	equ	0xFDA
  2329                           fsr2l	equ	0xFD9
  2330                           status	equ	0xFD8
  2331                           
  2332 ;; *************** function ___lwdiv *****************
  2333 ;; Defined at:
  2334 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  2335 ;; Parameters:    Size  Location     Type
  2336 ;;  dividend        2   18[COMRAM] unsigned int 
  2337 ;;  divisor         2   20[COMRAM] unsigned int 
  2338 ;; Auto vars:     Size  Location     Type
  2339 ;;  quotient        2   22[COMRAM] unsigned int 
  2340 ;;  counter         1   24[COMRAM] unsigned char 
  2341 ;; Return value:  Size  Location     Type
  2342 ;;                  2   18[COMRAM] unsigned int 
  2343 ;; Registers used:
  2344 ;;		wreg, status,2, status,0
  2345 ;; Tracked objects:
  2346 ;;		On entry : 0/0
  2347 ;;		On exit  : 0/0
  2348 ;;		Unchanged: 0/0
  2349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2350 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2351 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2352 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2353 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2354 ;;Total ram usage:        7 bytes
  2355 ;; Hardware stack levels used:    1
  2356 ;; Hardware stack levels required when called:    2
  2357 ;; This function calls:
  2358 ;;		Nothing
  2359 ;; This function is called by:
  2360 ;;		_printf
  2361 ;; This function uses a non-reentrant model
  2362 ;;
  2363                           
  2364                           	psect	text6
  2365  0007C4                     __ptext6:
  2366                           	opt stack 0
  2367  0007C4                     ___lwdiv:
  2368                           	opt stack 27
  2369                           
  2370                           ;incstack = 0
  2371  0007C4  0E00               	movlw	0
  2372  0007C6  6E18               	movwf	___lwdiv@quotient+1,c
  2373  0007C8  0E00               	movlw	0
  2374  0007CA  6E17               	movwf	___lwdiv@quotient,c
  2375  0007CC  5015               	movf	___lwdiv@divisor,w,c
  2376  0007CE  1016               	iorwf	___lwdiv@divisor+1,w,c
  2377  0007D0  B4D8               	btfsc	status,2,c
  2378  0007D2  D01C               	goto	l662
  2379  0007D4  0E01               	movlw	1
  2380  0007D6  6E19               	movwf	___lwdiv@counter,c
  2381  0007D8  D004               	goto	l1409
  2382  0007DA                     l1407:
  2383  0007DA  90D8               	bcf	status,0,c
  2384  0007DC  3615               	rlcf	___lwdiv@divisor,f,c
  2385  0007DE  3616               	rlcf	___lwdiv@divisor+1,f,c
  2386  0007E0  2A19               	incf	___lwdiv@counter,f,c
  2387  0007E2                     l1409:
  2388  0007E2  AE16               	btfss	___lwdiv@divisor+1,7,c
  2389  0007E4  D7FA               	goto	l1407
  2390  0007E6                     l1411:
  2391  0007E6  90D8               	bcf	status,0,c
  2392  0007E8  3617               	rlcf	___lwdiv@quotient,f,c
  2393  0007EA  3618               	rlcf	___lwdiv@quotient+1,f,c
  2394  0007EC  5015               	movf	___lwdiv@divisor,w,c
  2395  0007EE  5C13               	subwf	___lwdiv@dividend,w,c
  2396  0007F0  5016               	movf	___lwdiv@divisor+1,w,c
  2397  0007F2  5814               	subwfb	___lwdiv@dividend+1,w,c
  2398  0007F4  A0D8               	btfss	status,0,c
  2399  0007F6  D005               	goto	l1419
  2400  0007F8  5015               	movf	___lwdiv@divisor,w,c
  2401  0007FA  5E13               	subwf	___lwdiv@dividend,f,c
  2402  0007FC  5016               	movf	___lwdiv@divisor+1,w,c
  2403  0007FE  5A14               	subwfb	___lwdiv@dividend+1,f,c
  2404  000800  8017               	bsf	___lwdiv@quotient,0,c
  2405  000802                     l1419:
  2406  000802  90D8               	bcf	status,0,c
  2407  000804  3216               	rrcf	___lwdiv@divisor+1,f,c
  2408  000806  3215               	rrcf	___lwdiv@divisor,f,c
  2409  000808  2E19               	decfsz	___lwdiv@counter,f,c
  2410  00080A  D7ED               	goto	l1411
  2411  00080C                     l662:
  2412  00080C  C017  F013         	movff	___lwdiv@quotient,?___lwdiv
  2413  000810  C018  F014         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2414  000814  0012               	return		;funcret
  2415  000816                     __end_of___lwdiv:
  2416                           	opt stack 0
  2417                           tblptru	equ	0xFF8
  2418                           tblptrh	equ	0xFF7
  2419                           tblptrl	equ	0xFF6
  2420                           tablat	equ	0xFF5
  2421                           prodh	equ	0xFF4
  2422                           prodl	equ	0xFF3
  2423                           intcon	equ	0xFF2
  2424                           intcon3	equ	0xFF0
  2425                           postinc0	equ	0xFEE
  2426                           wreg	equ	0xFE8
  2427                           indf2	equ	0xFDF
  2428                           postinc2	equ	0xFDE
  2429                           postdec2	equ	0xFDD
  2430                           fsr2h	equ	0xFDA
  2431                           fsr2l	equ	0xFD9
  2432                           status	equ	0xFD8
  2433                           
  2434 ;; *************** function _initLCD *****************
  2435 ;; Defined at:
  2436 ;;		line 14 in file "../lcd.c"
  2437 ;; Parameters:    Size  Location     Type
  2438 ;;		None
  2439 ;; Auto vars:     Size  Location     Type
  2440 ;;		None
  2441 ;; Return value:  Size  Location     Type
  2442 ;;                  1    wreg      void 
  2443 ;; Registers used:
  2444 ;;		wreg, status,2, status,0, cstack
  2445 ;; Tracked objects:
  2446 ;;		On entry : 0/0
  2447 ;;		On exit  : 0/0
  2448 ;;		Unchanged: 0/0
  2449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2450 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2451 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2452 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2453 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2454 ;;Total ram usage:        1 bytes
  2455 ;; Hardware stack levels used:    1
  2456 ;; Hardware stack levels required when called:    4
  2457 ;; This function calls:
  2458 ;;		_lcdInst
  2459 ;; This function is called by:
  2460 ;;		_main
  2461 ;; This function uses a non-reentrant model
  2462 ;;
  2463                           
  2464                           	psect	text7
  2465  000864                     __ptext7:
  2466                           	opt stack 0
  2467  000864                     _initLCD:
  2468                           	opt stack 26
  2469                           
  2470                           ;lcd.c: 15: _delay((unsigned long)((15)*(10000000/4000.0)));
  2471                           
  2472                           ;incstack = 0
  2473  000864  0E31               	movlw	49
  2474  000866  6E16               	movwf	??_initLCD& (0+255),c
  2475  000868  0EB2               	movlw	178
  2476  00086A                     u1257:
  2477  00086A  2EE8               	decfsz	wreg,f,c
  2478  00086C  D7FE               	bra	u1257
  2479  00086E  2E16               	decfsz	??_initLCD& (0+255),f,c
  2480  000870  D7FC               	bra	u1257
  2481  000872  D000               	nop2	
  2482                           
  2483                           ;lcd.c: 16: lcdInst(0b00110011);
  2484  000874  0E33               	movlw	51
  2485  000876  ECEB  F004         	call	_lcdInst
  2486                           
  2487                           ;lcd.c: 17: lcdInst(0b00110010);
  2488  00087A  0E32               	movlw	50
  2489  00087C  ECEB  F004         	call	_lcdInst
  2490                           
  2491                           ;lcd.c: 18: lcdInst(0b00101000);
  2492  000880  0E28               	movlw	40
  2493  000882  ECEB  F004         	call	_lcdInst
  2494                           
  2495                           ;lcd.c: 19: lcdInst(0b00001111);
  2496  000886  0E0F               	movlw	15
  2497  000888  ECEB  F004         	call	_lcdInst
  2498                           
  2499                           ;lcd.c: 20: lcdInst(0b00000110);
  2500  00088C  0E06               	movlw	6
  2501  00088E  ECEB  F004         	call	_lcdInst
  2502                           
  2503                           ;lcd.c: 21: lcdInst(0b00000001);
  2504  000892  0E01               	movlw	1
  2505  000894  ECEB  F004         	call	_lcdInst
  2506                           
  2507                           ;lcd.c: 22: _delay((unsigned long)((15)*(10000000/4000.0)));
  2508  000898  0E31               	movlw	49
  2509  00089A  6E16               	movwf	??_initLCD& (0+255),c
  2510  00089C  0EB2               	movlw	178
  2511  00089E                     u1267:
  2512  00089E  2EE8               	decfsz	wreg,f,c
  2513  0008A0  D7FE               	bra	u1267
  2514  0008A2  2E16               	decfsz	??_initLCD& (0+255),f,c
  2515  0008A4  D7FC               	bra	u1267
  2516  0008A6  D000               	nop2	
  2517  0008A8  0012               	return		;funcret
  2518  0008AA                     __end_of_initLCD:
  2519                           	opt stack 0
  2520                           tblptru	equ	0xFF8
  2521                           tblptrh	equ	0xFF7
  2522                           tblptrl	equ	0xFF6
  2523                           tablat	equ	0xFF5
  2524                           prodh	equ	0xFF4
  2525                           prodl	equ	0xFF3
  2526                           intcon	equ	0xFF2
  2527                           intcon3	equ	0xFF0
  2528                           postinc0	equ	0xFEE
  2529                           wreg	equ	0xFE8
  2530                           indf2	equ	0xFDF
  2531                           postinc2	equ	0xFDE
  2532                           postdec2	equ	0xFDD
  2533                           fsr2h	equ	0xFDA
  2534                           fsr2l	equ	0xFD9
  2535                           status	equ	0xFD8
  2536                           
  2537 ;; *************** function _lcdInst *****************
  2538 ;; Defined at:
  2539 ;;		line 25 in file "../lcd.c"
  2540 ;; Parameters:    Size  Location     Type
  2541 ;;  data            1    wreg     unsigned char 
  2542 ;; Auto vars:     Size  Location     Type
  2543 ;;  data            1   20[COMRAM] unsigned char 
  2544 ;; Return value:  Size  Location     Type
  2545 ;;                  1    wreg      void 
  2546 ;; Registers used:
  2547 ;;		wreg, status,2, status,0, cstack
  2548 ;; Tracked objects:
  2549 ;;		On entry : 0/0
  2550 ;;		On exit  : 0/0
  2551 ;;		Unchanged: 0/0
  2552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2553 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2554 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2555 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2556 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2557 ;;Total ram usage:        1 bytes
  2558 ;; Hardware stack levels used:    1
  2559 ;; Hardware stack levels required when called:    3
  2560 ;; This function calls:
  2561 ;;		_lcdNibble
  2562 ;; This function is called by:
  2563 ;;		_initLCD
  2564 ;;		_main
  2565 ;; This function uses a non-reentrant model
  2566 ;;
  2567                           
  2568                           	psect	text8
  2569  0009D6                     __ptext8:
  2570                           	opt stack 0
  2571  0009D6                     _lcdInst:
  2572                           	opt stack 27
  2573                           
  2574                           ;incstack = 0
  2575                           ;lcdInst@data stored from wreg
  2576  0009D6  6E15               	movwf	lcdInst@data,c
  2577                           
  2578                           ;lcd.c: 26: LATDbits.LATD2 = 0;
  2579  0009D8  948C               	bcf	3980,2,c	;volatile
  2580                           
  2581                           ;lcd.c: 27: lcdNibble(data);
  2582  0009DA  5015               	movf	lcdInst@data,w,c
  2583  0009DC  EC0B  F004         	call	_lcdNibble
  2584  0009E0  0012               	return		;funcret
  2585  0009E2                     __end_of_lcdInst:
  2586                           	opt stack 0
  2587                           tblptru	equ	0xFF8
  2588                           tblptrh	equ	0xFF7
  2589                           tblptrl	equ	0xFF6
  2590                           tablat	equ	0xFF5
  2591                           prodh	equ	0xFF4
  2592                           prodl	equ	0xFF3
  2593                           intcon	equ	0xFF2
  2594                           intcon3	equ	0xFF0
  2595                           postinc0	equ	0xFEE
  2596                           wreg	equ	0xFE8
  2597                           indf2	equ	0xFDF
  2598                           postinc2	equ	0xFDE
  2599                           postdec2	equ	0xFDD
  2600                           fsr2h	equ	0xFDA
  2601                           fsr2l	equ	0xFD9
  2602                           status	equ	0xFD8
  2603                           
  2604 ;; *************** function _lcdNibble *****************
  2605 ;; Defined at:
  2606 ;;		line 35 in file "../lcd.c"
  2607 ;; Parameters:    Size  Location     Type
  2608 ;;  data            1    wreg     unsigned char 
  2609 ;; Auto vars:     Size  Location     Type
  2610 ;;  data            1   19[COMRAM] unsigned char 
  2611 ;;  temp            1   18[COMRAM] unsigned char 
  2612 ;; Return value:  Size  Location     Type
  2613 ;;                  1    wreg      void 
  2614 ;; Registers used:
  2615 ;;		wreg, status,2, status,0
  2616 ;; Tracked objects:
  2617 ;;		On entry : 0/0
  2618 ;;		On exit  : 0/0
  2619 ;;		Unchanged: 0/0
  2620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2621 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2622 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2623 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2624 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2625 ;;Total ram usage:        2 bytes
  2626 ;; Hardware stack levels used:    1
  2627 ;; Hardware stack levels required when called:    2
  2628 ;; This function calls:
  2629 ;;		Nothing
  2630 ;; This function is called by:
  2631 ;;		_lcdInst
  2632 ;;		_putch
  2633 ;; This function uses a non-reentrant model
  2634 ;;
  2635                           
  2636                           	psect	text9
  2637  000816                     __ptext9:
  2638                           	opt stack 0
  2639  000816                     _lcdNibble:
  2640                           	opt stack 26
  2641                           
  2642                           ;incstack = 0
  2643                           ;lcdNibble@data stored from wreg
  2644  000816  6E14               	movwf	lcdNibble@data,c
  2645                           
  2646                           ;lcd.c: 37: char temp = data & 0xF0;
  2647  000818  5014               	movf	lcdNibble@data,w,c
  2648  00081A  0BF0               	andlw	240
  2649  00081C  6E13               	movwf	lcdNibble@temp,c
  2650                           
  2651                           ;lcd.c: 38: LATD = LATD & 0x0F;
  2652  00081E  508C               	movf	3980,w,c	;volatile
  2653  000820  0B0F               	andlw	15
  2654  000822  6E8C               	movwf	3980,c	;volatile
  2655                           
  2656                           ;lcd.c: 39: LATD = temp | LATD;
  2657  000824  5013               	movf	lcdNibble@temp,w,c
  2658  000826  108C               	iorwf	3980,w,c	;volatile
  2659  000828  6E8C               	movwf	3980,c	;volatile
  2660                           
  2661                           ;lcd.c: 41: LATDbits.LATD3 = 0;
  2662  00082A  968C               	bcf	3980,3,c	;volatile
  2663                           
  2664                           ;lcd.c: 42: _delay((unsigned long)((30)*(10000000/4000000.0)));
  2665  00082C  0E19               	movlw	25
  2666  00082E                     u1277:
  2667  00082E  2EE8               	decfsz	wreg,f,c
  2668  000830  D7FE               	bra	u1277
  2669                           
  2670                           ;lcd.c: 43: LATDbits.LATD3 = 1;
  2671  000832  868C               	bsf	3980,3,c	;volatile
  2672                           
  2673                           ;lcd.c: 44: _delay((unsigned long)((30)*(10000000/4000000.0)));
  2674  000834  0E19               	movlw	25
  2675  000836                     u1287:
  2676  000836  2EE8               	decfsz	wreg,f,c
  2677  000838  D7FE               	bra	u1287
  2678                           
  2679                           ;lcd.c: 46: data = data << 4;
  2680  00083A  3814               	swapf	lcdNibble@data,w,c
  2681  00083C  0BF0               	andlw	240
  2682  00083E  6E14               	movwf	lcdNibble@data,c
  2683                           
  2684                           ;lcd.c: 48: temp = data & 0xF0;
  2685  000840  5014               	movf	lcdNibble@data,w,c
  2686  000842  0BF0               	andlw	240
  2687  000844  6E13               	movwf	lcdNibble@temp,c
  2688                           
  2689                           ;lcd.c: 49: LATD = LATD & 0x0F;
  2690  000846  508C               	movf	3980,w,c	;volatile
  2691  000848  0B0F               	andlw	15
  2692  00084A  6E8C               	movwf	3980,c	;volatile
  2693                           
  2694                           ;lcd.c: 50: LATD = temp | LATD;
  2695  00084C  5013               	movf	lcdNibble@temp,w,c
  2696  00084E  108C               	iorwf	3980,w,c	;volatile
  2697  000850  6E8C               	movwf	3980,c	;volatile
  2698                           
  2699                           ;lcd.c: 52: LATDbits.LATD3 = 0;
  2700  000852  968C               	bcf	3980,3,c	;volatile
  2701                           
  2702                           ;lcd.c: 53: _delay((unsigned long)((30)*(10000000/4000000.0)));
  2703  000854  0E19               	movlw	25
  2704  000856                     u1297:
  2705  000856  2EE8               	decfsz	wreg,f,c
  2706  000858  D7FE               	bra	u1297
  2707                           
  2708                           ;lcd.c: 54: LATDbits.LATD3 = 1;
  2709  00085A  868C               	bsf	3980,3,c	;volatile
  2710                           
  2711                           ;lcd.c: 55: _delay((unsigned long)((30)*(10000000/4000000.0)));
  2712  00085C  0E19               	movlw	25
  2713  00085E                     u1307:
  2714  00085E  2EE8               	decfsz	wreg,f,c
  2715  000860  D7FE               	bra	u1307
  2716  000862  0012               	return		;funcret
  2717  000864                     __end_of_lcdNibble:
  2718                           	opt stack 0
  2719                           tblptru	equ	0xFF8
  2720                           tblptrh	equ	0xFF7
  2721                           tblptrl	equ	0xFF6
  2722                           tablat	equ	0xFF5
  2723                           prodh	equ	0xFF4
  2724                           prodl	equ	0xFF3
  2725                           intcon	equ	0xFF2
  2726                           intcon3	equ	0xFF0
  2727                           postinc0	equ	0xFEE
  2728                           wreg	equ	0xFE8
  2729                           indf2	equ	0xFDF
  2730                           postinc2	equ	0xFDE
  2731                           postdec2	equ	0xFDD
  2732                           fsr2h	equ	0xFDA
  2733                           fsr2l	equ	0xFD9
  2734                           status	equ	0xFD8
  2735                           
  2736 ;; *************** function _I2C_Master_Write *****************
  2737 ;; Defined at:
  2738 ;;		line 47 in file "../I2C.c"
  2739 ;; Parameters:    Size  Location     Type
  2740 ;;  d               2   19[COMRAM] unsigned int 
  2741 ;; Auto vars:     Size  Location     Type
  2742 ;;		None
  2743 ;; Return value:  Size  Location     Type
  2744 ;;                  1    wreg      void 
  2745 ;; Registers used:
  2746 ;;		wreg, status,2, status,0, cstack
  2747 ;; Tracked objects:
  2748 ;;		On entry : 0/0
  2749 ;;		On exit  : 0/0
  2750 ;;		Unchanged: 0/0
  2751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2752 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2753 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2754 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2755 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2756 ;;Total ram usage:        2 bytes
  2757 ;; Hardware stack levels used:    1
  2758 ;; Hardware stack levels required when called:    3
  2759 ;; This function calls:
  2760 ;;		_I2C_Master_Wait
  2761 ;; This function is called by:
  2762 ;;		_main
  2763 ;; This function uses a non-reentrant model
  2764 ;;
  2765                           
  2766                           	psect	text10
  2767  0009E2                     __ptext10:
  2768                           	opt stack 0
  2769  0009E2                     _I2C_Master_Write:
  2770                           	opt stack 27
  2771                           
  2772                           ;I2C.c: 49: I2C_Master_Wait();
  2773                           
  2774                           ;incstack = 0
  2775  0009E2  ECDC  F004         	call	_I2C_Master_Wait	;wreg free
  2776                           
  2777                           ;I2C.c: 50: SSPBUF = d;
  2778  0009E6  C014  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  2779  0009EA  0012               	return		;funcret
  2780  0009EC                     __end_of_I2C_Master_Write:
  2781                           	opt stack 0
  2782                           tblptru	equ	0xFF8
  2783                           tblptrh	equ	0xFF7
  2784                           tblptrl	equ	0xFF6
  2785                           tablat	equ	0xFF5
  2786                           prodh	equ	0xFF4
  2787                           prodl	equ	0xFF3
  2788                           intcon	equ	0xFF2
  2789                           intcon3	equ	0xFF0
  2790                           postinc0	equ	0xFEE
  2791                           wreg	equ	0xFE8
  2792                           indf2	equ	0xFDF
  2793                           postinc2	equ	0xFDE
  2794                           postdec2	equ	0xFDD
  2795                           fsr2h	equ	0xFDA
  2796                           fsr2l	equ	0xFD9
  2797                           status	equ	0xFD8
  2798                           
  2799 ;; *************** function _I2C_Master_Stop *****************
  2800 ;; Defined at:
  2801 ;;		line 41 in file "../I2C.c"
  2802 ;; Parameters:    Size  Location     Type
  2803 ;;		None
  2804 ;; Auto vars:     Size  Location     Type
  2805 ;;		None
  2806 ;; Return value:  Size  Location     Type
  2807 ;;                  1    wreg      void 
  2808 ;; Registers used:
  2809 ;;		wreg, status,2, status,0, cstack
  2810 ;; Tracked objects:
  2811 ;;		On entry : 0/0
  2812 ;;		On exit  : 0/0
  2813 ;;		Unchanged: 0/0
  2814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2815 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2816 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2817 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2818 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2819 ;;Total ram usage:        0 bytes
  2820 ;; Hardware stack levels used:    1
  2821 ;; Hardware stack levels required when called:    3
  2822 ;; This function calls:
  2823 ;;		_I2C_Master_Wait
  2824 ;; This function is called by:
  2825 ;;		_main
  2826 ;; This function uses a non-reentrant model
  2827 ;;
  2828                           
  2829                           	psect	text11
  2830  0009EC                     __ptext11:
  2831                           	opt stack 0
  2832  0009EC                     _I2C_Master_Stop:
  2833                           	opt stack 27
  2834                           
  2835                           ;I2C.c: 43: I2C_Master_Wait();
  2836                           
  2837                           ;incstack = 0
  2838  0009EC  ECDC  F004         	call	_I2C_Master_Wait	;wreg free
  2839                           
  2840                           ;I2C.c: 44: PEN = 1;
  2841  0009F0  84C5               	bsf	4037,2,c	;volatile
  2842  0009F2  0012               	return		;funcret
  2843  0009F4                     __end_of_I2C_Master_Stop:
  2844                           	opt stack 0
  2845                           tblptru	equ	0xFF8
  2846                           tblptrh	equ	0xFF7
  2847                           tblptrl	equ	0xFF6
  2848                           tablat	equ	0xFF5
  2849                           prodh	equ	0xFF4
  2850                           prodl	equ	0xFF3
  2851                           intcon	equ	0xFF2
  2852                           intcon3	equ	0xFF0
  2853                           postinc0	equ	0xFEE
  2854                           wreg	equ	0xFE8
  2855                           indf2	equ	0xFDF
  2856                           postinc2	equ	0xFDE
  2857                           postdec2	equ	0xFDD
  2858                           fsr2h	equ	0xFDA
  2859                           fsr2l	equ	0xFD9
  2860                           status	equ	0xFD8
  2861                           
  2862 ;; *************** function _I2C_Master_Start *****************
  2863 ;; Defined at:
  2864 ;;		line 29 in file "../I2C.c"
  2865 ;; Parameters:    Size  Location     Type
  2866 ;;		None
  2867 ;; Auto vars:     Size  Location     Type
  2868 ;;		None
  2869 ;; Return value:  Size  Location     Type
  2870 ;;                  1    wreg      void 
  2871 ;; Registers used:
  2872 ;;		wreg, status,2, status,0, cstack
  2873 ;; Tracked objects:
  2874 ;;		On entry : 0/0
  2875 ;;		On exit  : 0/0
  2876 ;;		Unchanged: 0/0
  2877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2878 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2879 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2880 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2881 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2882 ;;Total ram usage:        0 bytes
  2883 ;; Hardware stack levels used:    1
  2884 ;; Hardware stack levels required when called:    3
  2885 ;; This function calls:
  2886 ;;		_I2C_Master_Wait
  2887 ;; This function is called by:
  2888 ;;		_main
  2889 ;; This function uses a non-reentrant model
  2890 ;;
  2891                           
  2892                           	psect	text12
  2893  0009F4                     __ptext12:
  2894                           	opt stack 0
  2895  0009F4                     _I2C_Master_Start:
  2896                           	opt stack 27
  2897                           
  2898                           ;I2C.c: 31: I2C_Master_Wait();
  2899                           
  2900                           ;incstack = 0
  2901  0009F4  ECDC  F004         	call	_I2C_Master_Wait	;wreg free
  2902                           
  2903                           ;I2C.c: 32: SEN = 1;
  2904  0009F8  80C5               	bsf	4037,0,c	;volatile
  2905  0009FA  0012               	return		;funcret
  2906  0009FC                     __end_of_I2C_Master_Start:
  2907                           	opt stack 0
  2908                           tblptru	equ	0xFF8
  2909                           tblptrh	equ	0xFF7
  2910                           tblptrl	equ	0xFF6
  2911                           tablat	equ	0xFF5
  2912                           prodh	equ	0xFF4
  2913                           prodl	equ	0xFF3
  2914                           intcon	equ	0xFF2
  2915                           intcon3	equ	0xFF0
  2916                           postinc0	equ	0xFEE
  2917                           wreg	equ	0xFE8
  2918                           indf2	equ	0xFDF
  2919                           postinc2	equ	0xFDE
  2920                           postdec2	equ	0xFDD
  2921                           fsr2h	equ	0xFDA
  2922                           fsr2l	equ	0xFD9
  2923                           status	equ	0xFD8
  2924                           
  2925 ;; *************** function _I2C_Master_Read *****************
  2926 ;; Defined at:
  2927 ;;		line 53 in file "../I2C.c"
  2928 ;; Parameters:    Size  Location     Type
  2929 ;;  a               1    wreg     unsigned char 
  2930 ;; Auto vars:     Size  Location     Type
  2931 ;;  a               1   19[COMRAM] unsigned char 
  2932 ;;  temp            1   20[COMRAM] unsigned char 
  2933 ;; Return value:  Size  Location     Type
  2934 ;;                  1    wreg      unsigned char 
  2935 ;; Registers used:
  2936 ;;		wreg, status,2, status,0, cstack
  2937 ;; Tracked objects:
  2938 ;;		On entry : 0/0
  2939 ;;		On exit  : 0/0
  2940 ;;		Unchanged: 0/0
  2941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2943 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2944 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2945 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2946 ;;Total ram usage:        2 bytes
  2947 ;; Hardware stack levels used:    1
  2948 ;; Hardware stack levels required when called:    3
  2949 ;; This function calls:
  2950 ;;		_I2C_Master_Wait
  2951 ;; This function is called by:
  2952 ;;		_main
  2953 ;; This function uses a non-reentrant model
  2954 ;;
  2955                           
  2956                           	psect	text13
  2957  000974                     __ptext13:
  2958                           	opt stack 0
  2959  000974                     _I2C_Master_Read:
  2960                           	opt stack 27
  2961                           
  2962                           ;incstack = 0
  2963                           ;I2C_Master_Read@a stored from wreg
  2964  000974  6E14               	movwf	I2C_Master_Read@a,c
  2965                           
  2966                           ;I2C.c: 55: unsigned char temp;
  2967                           ;I2C.c: 56: I2C_Master_Wait();
  2968  000976  ECDC  F004         	call	_I2C_Master_Wait	;wreg free
  2969                           
  2970                           ;I2C.c: 57: RCEN = 1;
  2971  00097A  86C5               	bsf	4037,3,c	;volatile
  2972                           
  2973                           ;I2C.c: 58: I2C_Master_Wait();
  2974  00097C  ECDC  F004         	call	_I2C_Master_Wait	;wreg free
  2975                           
  2976                           ;I2C.c: 59: temp = SSPBUF;
  2977  000980  CFC9 F015          	movff	4041,I2C_Master_Read@temp	;volatile
  2978                           
  2979                           ;I2C.c: 60: I2C_Master_Wait();
  2980  000984  ECDC  F004         	call	_I2C_Master_Wait	;wreg free
  2981                           
  2982                           ;I2C.c: 61: ACKDT = (a)?0:1;
  2983  000988  5014               	movf	I2C_Master_Read@a,w,c
  2984  00098A  A4D8               	btfss	status,2,c
  2985  00098C  D002               	goto	u150
  2986  00098E  8AC5               	bsf	4037,5,c	;volatile
  2987  000990  D001               	goto	l1009
  2988  000992                     u150:
  2989  000992  9AC5               	bcf	4037,5,c	;volatile
  2990  000994                     l1009:
  2991                           
  2992                           ;I2C.c: 62: ACKEN = 1;
  2993  000994  88C5               	bsf	4037,4,c	;volatile
  2994                           
  2995                           ;I2C.c: 63: return temp;
  2996  000996  5015               	movf	I2C_Master_Read@temp,w,c
  2997  000998  0012               	return	
  2998  00099A                     __end_of_I2C_Master_Read:
  2999                           	opt stack 0
  3000                           tblptru	equ	0xFF8
  3001                           tblptrh	equ	0xFF7
  3002                           tblptrl	equ	0xFF6
  3003                           tablat	equ	0xFF5
  3004                           prodh	equ	0xFF4
  3005                           prodl	equ	0xFF3
  3006                           intcon	equ	0xFF2
  3007                           intcon3	equ	0xFF0
  3008                           postinc0	equ	0xFEE
  3009                           wreg	equ	0xFE8
  3010                           indf2	equ	0xFDF
  3011                           postinc2	equ	0xFDE
  3012                           postdec2	equ	0xFDD
  3013                           fsr2h	equ	0xFDA
  3014                           fsr2l	equ	0xFD9
  3015                           status	equ	0xFD8
  3016                           
  3017 ;; *************** function _I2C_Master_Wait *****************
  3018 ;; Defined at:
  3019 ;;		line 24 in file "../I2C.c"
  3020 ;; Parameters:    Size  Location     Type
  3021 ;;		None
  3022 ;; Auto vars:     Size  Location     Type
  3023 ;;		None
  3024 ;; Return value:  Size  Location     Type
  3025 ;;                  1    wreg      void 
  3026 ;; Registers used:
  3027 ;;		wreg, status,2, status,0
  3028 ;; Tracked objects:
  3029 ;;		On entry : 0/0
  3030 ;;		On exit  : 0/0
  3031 ;;		Unchanged: 0/0
  3032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3033 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3034 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3035 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3036 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3037 ;;Total ram usage:        1 bytes
  3038 ;; Hardware stack levels used:    1
  3039 ;; Hardware stack levels required when called:    2
  3040 ;; This function calls:
  3041 ;;		Nothing
  3042 ;; This function is called by:
  3043 ;;		_I2C_Master_Start
  3044 ;;		_I2C_Master_Stop
  3045 ;;		_I2C_Master_Write
  3046 ;;		_I2C_Master_Read
  3047 ;;		_I2C_Master_RepeatedStart
  3048 ;; This function uses a non-reentrant model
  3049 ;;
  3050                           
  3051                           	psect	text14
  3052  0009B8                     __ptext14:
  3053                           	opt stack 0
  3054  0009B8                     _I2C_Master_Wait:
  3055                           	opt stack 27
  3056  0009B8                     l34:
  3057  0009B8  B4C7               	btfsc	4039,2,c	;volatile
  3058  0009BA  D7FE               	goto	l34
  3059  0009BC  CFC5 F013          	movff	4037,??_I2C_Master_Wait	;volatile
  3060  0009C0  0E1F               	movlw	31
  3061  0009C2  1613               	andwf	??_I2C_Master_Wait,f,c
  3062  0009C4  B4D8               	btfsc	status,2,c
  3063  0009C6  0012               	return	
  3064  0009C8  D7F7               	goto	l34
  3065  0009CA                     __end_of_I2C_Master_Wait:
  3066                           	opt stack 0
  3067                           tblptru	equ	0xFF8
  3068                           tblptrh	equ	0xFF7
  3069                           tblptrl	equ	0xFF6
  3070                           tablat	equ	0xFF5
  3071                           prodh	equ	0xFF4
  3072                           prodl	equ	0xFF3
  3073                           intcon	equ	0xFF2
  3074                           intcon3	equ	0xFF0
  3075                           postinc0	equ	0xFEE
  3076                           wreg	equ	0xFE8
  3077                           indf2	equ	0xFDF
  3078                           postinc2	equ	0xFDE
  3079                           postdec2	equ	0xFDD
  3080                           fsr2h	equ	0xFDA
  3081                           fsr2l	equ	0xFD9
  3082                           status	equ	0xFD8
  3083                           
  3084 ;; *************** function _I2C_Master_Init *****************
  3085 ;; Defined at:
  3086 ;;		line 13 in file "../I2C.c"
  3087 ;; Parameters:    Size  Location     Type
  3088 ;;  c               4   31[COMRAM] const unsigned long 
  3089 ;; Auto vars:     Size  Location     Type
  3090 ;;		None
  3091 ;; Return value:  Size  Location     Type
  3092 ;;                  1    wreg      void 
  3093 ;; Registers used:
  3094 ;;		wreg, status,2, status,0, cstack
  3095 ;; Tracked objects:
  3096 ;;		On entry : 0/0
  3097 ;;		On exit  : 0/0
  3098 ;;		Unchanged: 0/0
  3099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3100 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3101 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3102 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3103 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3104 ;;Total ram usage:        8 bytes
  3105 ;; Hardware stack levels used:    1
  3106 ;; Hardware stack levels required when called:    3
  3107 ;; This function calls:
  3108 ;;		___lldiv
  3109 ;; This function is called by:
  3110 ;;		_main
  3111 ;; This function uses a non-reentrant model
  3112 ;;
  3113                           
  3114                           	psect	text15
  3115  00076A                     __ptext15:
  3116                           	opt stack 0
  3117  00076A                     _I2C_Master_Init:
  3118                           	opt stack 27
  3119                           
  3120                           ;I2C.c: 16: SSPSTAT = 0b00000000;
  3121                           
  3122                           ;incstack = 0
  3123  00076A  0E00               	movlw	0
  3124  00076C  6EC7               	movwf	4039,c	;volatile
  3125                           
  3126                           ;I2C.c: 17: SSPCON1 = 0b00101000;
  3127  00076E  0E28               	movlw	40
  3128  000770  6EC6               	movwf	4038,c	;volatile
  3129                           
  3130                           ;I2C.c: 18: SSPCON2 = 0b00000000;
  3131  000772  0E00               	movlw	0
  3132  000774  6EC5               	movwf	4037,c	;volatile
  3133                           
  3134                           ;I2C.c: 19: SSPADD = (10000000/(4*c))-1;
  3135  000776  0E80               	movlw	128
  3136  000778  6E13               	movwf	___lldiv@dividend,c
  3137  00077A  0E96               	movlw	150
  3138  00077C  6E14               	movwf	___lldiv@dividend+1,c
  3139  00077E  0E98               	movlw	152
  3140  000780  6E15               	movwf	___lldiv@dividend+2,c
  3141  000782  0E00               	movlw	0
  3142  000784  6E16               	movwf	___lldiv@dividend+3,c
  3143  000786  C020  F024         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  3144  00078A  C021  F025         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  3145  00078E  C022  F026         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  3146  000792  C023  F027         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  3147  000796  0E02               	movlw	2
  3148  000798                     u765:
  3149  000798  90D8               	bcf	status,0,c
  3150  00079A  3624               	rlcf	??_I2C_Master_Init,f,c
  3151  00079C  3625               	rlcf	??_I2C_Master_Init+1,f,c
  3152  00079E  3626               	rlcf	??_I2C_Master_Init+2,f,c
  3153  0007A0  3627               	rlcf	??_I2C_Master_Init+3,f,c
  3154  0007A2  2EE8               	decfsz	wreg,f,c
  3155  0007A4  D7F9               	goto	u765
  3156  0007A6  C024  F017         	movff	??_I2C_Master_Init,___lldiv@divisor
  3157  0007AA  C025  F018         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  3158  0007AE  C026  F019         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  3159  0007B2  C027  F01A         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  3160  0007B6  EC74  F003         	call	___lldiv	;wreg free
  3161  0007BA  0413               	decf	?___lldiv,w,c
  3162  0007BC  6EC8               	movwf	4040,c	;volatile
  3163                           
  3164                           ;I2C.c: 20: TRISC3 = 1;
  3165  0007BE  8694               	bsf	3988,3,c	;volatile
  3166                           
  3167                           ;I2C.c: 21: TRISC4 = 1;
  3168  0007C0  8894               	bsf	3988,4,c	;volatile
  3169  0007C2  0012               	return		;funcret
  3170  0007C4                     __end_of_I2C_Master_Init:
  3171                           	opt stack 0
  3172                           tblptru	equ	0xFF8
  3173                           tblptrh	equ	0xFF7
  3174                           tblptrl	equ	0xFF6
  3175                           tablat	equ	0xFF5
  3176                           prodh	equ	0xFF4
  3177                           prodl	equ	0xFF3
  3178                           intcon	equ	0xFF2
  3179                           intcon3	equ	0xFF0
  3180                           postinc0	equ	0xFEE
  3181                           wreg	equ	0xFE8
  3182                           indf2	equ	0xFDF
  3183                           postinc2	equ	0xFDE
  3184                           postdec2	equ	0xFDD
  3185                           fsr2h	equ	0xFDA
  3186                           fsr2l	equ	0xFD9
  3187                           status	equ	0xFD8
  3188                           
  3189 ;; *************** function ___lldiv *****************
  3190 ;; Defined at:
  3191 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  3192 ;; Parameters:    Size  Location     Type
  3193 ;;  dividend        4   18[COMRAM] unsigned long 
  3194 ;;  divisor         4   22[COMRAM] unsigned long 
  3195 ;; Auto vars:     Size  Location     Type
  3196 ;;  quotient        4   26[COMRAM] unsigned long 
  3197 ;;  counter         1   30[COMRAM] unsigned char 
  3198 ;; Return value:  Size  Location     Type
  3199 ;;                  4   18[COMRAM] unsigned long 
  3200 ;; Registers used:
  3201 ;;		wreg, status,2, status,0
  3202 ;; Tracked objects:
  3203 ;;		On entry : 0/0
  3204 ;;		On exit  : 0/0
  3205 ;;		Unchanged: 0/0
  3206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3207 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3208 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3209 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3210 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3211 ;;Total ram usage:       13 bytes
  3212 ;; Hardware stack levels used:    1
  3213 ;; Hardware stack levels required when called:    2
  3214 ;; This function calls:
  3215 ;;		Nothing
  3216 ;; This function is called by:
  3217 ;;		_I2C_Master_Init
  3218 ;; This function uses a non-reentrant model
  3219 ;;
  3220                           
  3221                           	psect	text16
  3222  0006E8                     __ptext16:
  3223                           	opt stack 0
  3224  0006E8                     ___lldiv:
  3225                           	opt stack 27
  3226                           
  3227                           ;incstack = 0
  3228  0006E8  0E00               	movlw	0
  3229  0006EA  6E1B               	movwf	___lldiv@quotient,c
  3230  0006EC  0E00               	movlw	0
  3231  0006EE  6E1C               	movwf	___lldiv@quotient+1,c
  3232  0006F0  0E00               	movlw	0
  3233  0006F2  6E1D               	movwf	___lldiv@quotient+2,c
  3234  0006F4  0E00               	movlw	0
  3235  0006F6  6E1E               	movwf	___lldiv@quotient+3,c
  3236  0006F8  5017               	movf	___lldiv@divisor,w,c
  3237  0006FA  1018               	iorwf	___lldiv@divisor+1,w,c
  3238  0006FC  1019               	iorwf	___lldiv@divisor+2,w,c
  3239  0006FE  101A               	iorwf	___lldiv@divisor+3,w,c
  3240  000700  B4D8               	btfsc	status,2,c
  3241  000702  D02A               	goto	l609
  3242  000704  0E01               	movlw	1
  3243  000706  6E1F               	movwf	___lldiv@counter,c
  3244  000708  D006               	goto	l1387
  3245  00070A                     l1385:
  3246  00070A  90D8               	bcf	status,0,c
  3247  00070C  3617               	rlcf	___lldiv@divisor,f,c
  3248  00070E  3618               	rlcf	___lldiv@divisor+1,f,c
  3249  000710  3619               	rlcf	___lldiv@divisor+2,f,c
  3250  000712  361A               	rlcf	___lldiv@divisor+3,f,c
  3251  000714  2A1F               	incf	___lldiv@counter,f,c
  3252  000716                     l1387:
  3253  000716  AE1A               	btfss	___lldiv@divisor+3,7,c
  3254  000718  D7F8               	goto	l1385
  3255  00071A                     l1389:
  3256  00071A  90D8               	bcf	status,0,c
  3257  00071C  361B               	rlcf	___lldiv@quotient,f,c
  3258  00071E  361C               	rlcf	___lldiv@quotient+1,f,c
  3259  000720  361D               	rlcf	___lldiv@quotient+2,f,c
  3260  000722  361E               	rlcf	___lldiv@quotient+3,f,c
  3261  000724  5017               	movf	___lldiv@divisor,w,c
  3262  000726  5C13               	subwf	___lldiv@dividend,w,c
  3263  000728  5018               	movf	___lldiv@divisor+1,w,c
  3264  00072A  5814               	subwfb	___lldiv@dividend+1,w,c
  3265  00072C  5019               	movf	___lldiv@divisor+2,w,c
  3266  00072E  5815               	subwfb	___lldiv@dividend+2,w,c
  3267  000730  501A               	movf	___lldiv@divisor+3,w,c
  3268  000732  5816               	subwfb	___lldiv@dividend+3,w,c
  3269  000734  A0D8               	btfss	status,0,c
  3270  000736  D009               	goto	l1397
  3271  000738  5017               	movf	___lldiv@divisor,w,c
  3272  00073A  5E13               	subwf	___lldiv@dividend,f,c
  3273  00073C  5018               	movf	___lldiv@divisor+1,w,c
  3274  00073E  5A14               	subwfb	___lldiv@dividend+1,f,c
  3275  000740  5019               	movf	___lldiv@divisor+2,w,c
  3276  000742  5A15               	subwfb	___lldiv@dividend+2,f,c
  3277  000744  501A               	movf	___lldiv@divisor+3,w,c
  3278  000746  5A16               	subwfb	___lldiv@dividend+3,f,c
  3279  000748  801B               	bsf	___lldiv@quotient,0,c
  3280  00074A                     l1397:
  3281  00074A  90D8               	bcf	status,0,c
  3282  00074C  321A               	rrcf	___lldiv@divisor+3,f,c
  3283  00074E  3219               	rrcf	___lldiv@divisor+2,f,c
  3284  000750  3218               	rrcf	___lldiv@divisor+1,f,c
  3285  000752  3217               	rrcf	___lldiv@divisor,f,c
  3286  000754  2E1F               	decfsz	___lldiv@counter,f,c
  3287  000756  D7E1               	goto	l1389
  3288  000758                     l609:
  3289  000758  C01B  F013         	movff	___lldiv@quotient,?___lldiv
  3290  00075C  C01C  F014         	movff	___lldiv@quotient+1,?___lldiv+1
  3291  000760  C01D  F015         	movff	___lldiv@quotient+2,?___lldiv+2
  3292  000764  C01E  F016         	movff	___lldiv@quotient+3,?___lldiv+3
  3293  000768  0012               	return		;funcret
  3294  00076A                     __end_of___lldiv:
  3295                           	opt stack 0
  3296                           tblptru	equ	0xFF8
  3297                           tblptrh	equ	0xFF7
  3298                           tblptrl	equ	0xFF6
  3299                           tablat	equ	0xFF5
  3300                           prodh	equ	0xFF4
  3301                           prodl	equ	0xFF3
  3302                           intcon	equ	0xFF2
  3303                           intcon3	equ	0xFF0
  3304                           postinc0	equ	0xFEE
  3305                           wreg	equ	0xFE8
  3306                           indf2	equ	0xFDF
  3307                           postinc2	equ	0xFDE
  3308                           postdec2	equ	0xFDD
  3309                           fsr2h	equ	0xFDA
  3310                           fsr2l	equ	0xFD9
  3311                           status	equ	0xFD8
  3312                           
  3313 ;; *************** function _keypressed *****************
  3314 ;; Defined at:
  3315 ;;		line 164 in file "../main.c"
  3316 ;; Parameters:    Size  Location     Type
  3317 ;;		None
  3318 ;; Auto vars:     Size  Location     Type
  3319 ;;  keypress        1   17[COMRAM] unsigned char 
  3320 ;; Return value:  Size  Location     Type
  3321 ;;                  1    wreg      void 
  3322 ;; Registers used:
  3323 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3324 ;; Tracked objects:
  3325 ;;		On entry : 0/0
  3326 ;;		On exit  : 0/0
  3327 ;;		Unchanged: 0/0
  3328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3329 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3330 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3331 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3332 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3333 ;;Total ram usage:       15 bytes
  3334 ;; Hardware stack levels used:    1
  3335 ;; Hardware stack levels required when called:    1
  3336 ;; This function calls:
  3337 ;;		_switchMenu
  3338 ;; This function is called by:
  3339 ;;		Interrupt level 2
  3340 ;; This function uses a non-reentrant model
  3341 ;;
  3342                           
  3343                           	psect	intcode
  3344  000008                     __pintcode:
  3345                           	opt stack 0
  3346  000008                     _keypressed:
  3347                           	opt stack 26
  3348                           
  3349                           ;incstack = 0
  3350  000008  8247               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3351  00000A  ED06  F003         	call	int_func,f	;refresh shadow registers
  3352                           tblptru	equ	0xFF8
  3353                           tblptrh	equ	0xFF7
  3354                           tblptrl	equ	0xFF6
  3355                           tablat	equ	0xFF5
  3356                           prodh	equ	0xFF4
  3357                           prodl	equ	0xFF3
  3358                           intcon	equ	0xFF2
  3359                           intcon3	equ	0xFF0
  3360                           postinc0	equ	0xFEE
  3361                           wreg	equ	0xFE8
  3362                           indf2	equ	0xFDF
  3363                           postinc2	equ	0xFDE
  3364                           postdec2	equ	0xFDD
  3365                           fsr2h	equ	0xFDA
  3366                           fsr2l	equ	0xFD9
  3367                           status	equ	0xFD8
  3368                           
  3369                           	psect	intcode_body
  3370  00060C                     __pintcode_body:
  3371                           	opt stack 26
  3372  00060C                     int_func:
  3373                           	opt stack 26
  3374  00060C  0006               	pop		; remove dummy address from shadow register refresh
  3375  00060E  CFFA F004          	movff	pclath,??_keypressed
  3376  000612  CFFB F005          	movff	pclatu,??_keypressed+1
  3377  000616  CFE9 F006          	movff	fsr0l,??_keypressed+2
  3378  00061A  CFEA F007          	movff	fsr0h,??_keypressed+3
  3379  00061E  CFE1 F008          	movff	fsr1l,??_keypressed+4
  3380  000622  CFE2 F009          	movff	fsr1h,??_keypressed+5
  3381  000626  CFD9 F00A          	movff	fsr2l,??_keypressed+6
  3382  00062A  CFDA F00B          	movff	fsr2h,??_keypressed+7
  3383  00062E  CFF3 F00C          	movff	prodl,??_keypressed+8
  3384  000632  CFF4 F00D          	movff	prodh,??_keypressed+9
  3385  000636  CFF6 F00E          	movff	tblptrl,??_keypressed+10
  3386  00063A  CFF7 F00F          	movff	tblptrh,??_keypressed+11
  3387  00063E  CFF8 F010          	movff	tblptru,??_keypressed+12
  3388  000642  CFF5 F011          	movff	tablat,??_keypressed+13
  3389                           
  3390                           ;main.c: 165: if(INT1IF){
  3391  000646  A0F0               	btfss	intcon3,0,c	;volatile
  3392  000648  D031               	goto	i2l185
  3393                           
  3394                           ;main.c: 166: unsigned char keypress = (PORTB & 0xF0) >> 4;
  3395  00064A  3881               	swapf	3969,w,c	;volatile
  3396  00064C  0B0F               	andlw	15
  3397  00064E  0B0F               	andlw	15
  3398  000650  6E12               	movwf	keypressed@keypress,c
  3399                           
  3400                           ;main.c: 167: if (keys[keypress] == '*'){
  3401  000652  5012               	movf	keypressed@keypress,w,c
  3402  000654  0D01               	mullw	1
  3403  000656  0E89               	movlw	low _keys
  3404  000658  24F3               	addwf	prodl,w,c
  3405  00065A  6EF6               	movwf	tblptrl,c
  3406  00065C  0EFE               	movlw	high _keys
  3407  00065E  20F4               	addwfc	prodh,w,c
  3408  000660  6EF7               	movwf	tblptrh,c
  3409  000662                     	if	0	;There are less than 3 active tblptr bytes
  3410  000662                     	endif
  3411  000662  0008               	tblrd		*
  3412  000664  50F5               	movf	tablat,w,c
  3413  000666  0A2A               	xorlw	42
  3414  000668  A4D8               	btfss	status,2,c
  3415  00066A  D00C               	goto	i2l1767
  3416                           
  3417                           ;main.c: 169: if(screenMode == 2)
  3418  00066C  0E02               	movlw	2
  3419  00066E  1846               	xorwf	_screenMode,w,c
  3420  000670  A4D8               	btfss	status,2,c
  3421  000672  D002               	goto	i2l1763
  3422                           
  3423                           ;main.c: 170: screenMode = 1;
  3424  000674  0E01               	movlw	1
  3425  000676  D004               	goto	L1
  3426  000678                     i2l1763:
  3427                           
  3428                           ;main.c: 171: else if (screenMode == 0)
  3429  000678  5046               	movf	_screenMode,w,c
  3430  00067A  A4D8               	btfss	status,2,c
  3431  00067C  D016               	goto	i2l1771
  3432                           
  3433                           ;main.c: 172: screenMode = 2;
  3434  00067E  0E02               	movlw	2
  3435  000680                     L1:
  3436  000680  6E46               	movwf	_screenMode,c
  3437                           
  3438                           ;main.c: 173: }
  3439  000682  D013               	goto	i2l1771
  3440  000684                     i2l1767:
  3441                           
  3442                           ;main.c: 174: else if (screenMode != 0)
  3443  000684  5046               	movf	_screenMode,w,c
  3444  000686  B4D8               	btfsc	status,2,c
  3445  000688  D010               	goto	i2l1771
  3446                           
  3447                           ;main.c: 175: switchMenu('4', '6', keys[keypress]);
  3448  00068A  0E36               	movlw	54
  3449  00068C  6E01               	movwf	switchMenu@right,c
  3450  00068E  5012               	movf	keypressed@keypress,w,c
  3451  000690  0D01               	mullw	1
  3452  000692  0E89               	movlw	low _keys
  3453  000694  24F3               	addwf	prodl,w,c
  3454  000696  6EF6               	movwf	tblptrl,c
  3455  000698  0EFE               	movlw	high _keys
  3456  00069A  20F4               	addwfc	prodh,w,c
  3457  00069C  6EF7               	movwf	tblptrh,c
  3458  00069E                     	if	0	;There are less than 3 active tblptr bytes
  3459  00069E                     	endif
  3460  00069E  0008               	tblrd		*
  3461  0006A0  CFF5 F002          	movff	tablat,switchMenu@key
  3462  0006A4  0E34               	movlw	52
  3463  0006A6  EC76  F004         	call	_switchMenu
  3464  0006AA                     i2l1771:
  3465                           
  3466                           ;main.c: 177: INT1IF = 0;
  3467  0006AA  90F0               	bcf	intcon3,0,c	;volatile
  3468  0006AC                     i2l185:
  3469  0006AC  C011  FFF5         	movff	??_keypressed+13,tablat
  3470  0006B0  C010  FFF8         	movff	??_keypressed+12,tblptru
  3471  0006B4  C00F  FFF7         	movff	??_keypressed+11,tblptrh
  3472  0006B8  C00E  FFF6         	movff	??_keypressed+10,tblptrl
  3473  0006BC  C00D  FFF4         	movff	??_keypressed+9,prodh
  3474  0006C0  C00C  FFF3         	movff	??_keypressed+8,prodl
  3475  0006C4  C00B  FFDA         	movff	??_keypressed+7,fsr2h
  3476  0006C8  C00A  FFD9         	movff	??_keypressed+6,fsr2l
  3477  0006CC  C009  FFE2         	movff	??_keypressed+5,fsr1h
  3478  0006D0  C008  FFE1         	movff	??_keypressed+4,fsr1l
  3479  0006D4  C007  FFEA         	movff	??_keypressed+3,fsr0h
  3480  0006D8  C006  FFE9         	movff	??_keypressed+2,fsr0l
  3481  0006DC  C005  FFFB         	movff	??_keypressed+1,pclatu
  3482  0006E0  C004  FFFA         	movff	??_keypressed,pclath
  3483  0006E4  9247               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3484  0006E6  0011               	retfie		f
  3485  0006E8                     __end_of_keypressed:
  3486                           	opt stack 0
  3487                           pclatu	equ	0xFFB
  3488                           pclath	equ	0xFFA
  3489                           tblptru	equ	0xFF8
  3490                           tblptrh	equ	0xFF7
  3491                           tblptrl	equ	0xFF6
  3492                           tablat	equ	0xFF5
  3493                           prodh	equ	0xFF4
  3494                           prodl	equ	0xFF3
  3495                           intcon	equ	0xFF2
  3496                           intcon3	equ	0xFF0
  3497                           postinc0	equ	0xFEE
  3498                           fsr0h	equ	0xFEA
  3499                           fsr0l	equ	0xFE9
  3500                           wreg	equ	0xFE8
  3501                           fsr1h	equ	0xFE2
  3502                           fsr1l	equ	0xFE1
  3503                           indf2	equ	0xFDF
  3504                           postinc2	equ	0xFDE
  3505                           postdec2	equ	0xFDD
  3506                           fsr2h	equ	0xFDA
  3507                           fsr2l	equ	0xFD9
  3508                           status	equ	0xFD8
  3509                           
  3510 ;; *************** function _switchMenu *****************
  3511 ;; Defined at:
  3512 ;;		line 149 in file "../main.c"
  3513 ;; Parameters:    Size  Location     Type
  3514 ;;  left            1    wreg     unsigned char 
  3515 ;;  right           1    0[COMRAM] unsigned char 
  3516 ;;  key             1    1[COMRAM] unsigned char 
  3517 ;; Auto vars:     Size  Location     Type
  3518 ;;  left            1    2[COMRAM] unsigned char 
  3519 ;; Return value:  Size  Location     Type
  3520 ;;                  1    wreg      void 
  3521 ;; Registers used:
  3522 ;;		wreg, status,2, status,0
  3523 ;; Tracked objects:
  3524 ;;		On entry : 0/0
  3525 ;;		On exit  : 0/0
  3526 ;;		Unchanged: 0/0
  3527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3528 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3529 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3530 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3531 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3532 ;;Total ram usage:        3 bytes
  3533 ;; Hardware stack levels used:    1
  3534 ;; This function calls:
  3535 ;;		Nothing
  3536 ;; This function is called by:
  3537 ;;		_keypressed
  3538 ;; This function uses a non-reentrant model
  3539 ;;
  3540                           
  3541                           	psect	text18
  3542  0008EC                     __ptext18:
  3543                           	opt stack 0
  3544  0008EC                     _switchMenu:
  3545                           	opt stack 26
  3546                           
  3547                           ;incstack = 0
  3548                           ;switchMenu@left stored from wreg
  3549  0008EC  6E03               	movwf	switchMenu@left,c
  3550                           
  3551                           ;main.c: 150: if (key == right){
  3552  0008EE  5001               	movf	switchMenu@right,w,c
  3553  0008F0  1802               	xorwf	switchMenu@key,w,c
  3554  0008F2  A4D8               	btfss	status,2,c
  3555  0008F4  D009               	goto	i2l1589
  3556                           
  3557                           ;main.c: 151: if (screenMode == 2)
  3558  0008F6  0E02               	movlw	2
  3559  0008F8  1846               	xorwf	_screenMode,w,c
  3560  0008FA  A4D8               	btfss	status,2,c
  3561  0008FC  D003               	goto	i2l1587
  3562                           
  3563                           ;main.c: 152: screenMode = 8;
  3564  0008FE  0E08               	movlw	8
  3565  000900  6E46               	movwf	_screenMode,c
  3566  000902  0012               	return	
  3567  000904                     i2l1587:
  3568                           
  3569                           ;main.c: 153: else
  3570                           ;main.c: 154: screenMode -= 1;
  3571  000904  0646               	decf	_screenMode,f,c
  3572                           
  3573                           ;main.c: 155: }
  3574  000906  0012               	return	
  3575  000908                     i2l1589:
  3576                           
  3577                           ;main.c: 156: else if (key == left){
  3578  000908  5003               	movf	switchMenu@left,w,c
  3579  00090A  1802               	xorwf	switchMenu@key,w,c
  3580  00090C  A4D8               	btfss	status,2,c
  3581  00090E  0012               	return	
  3582                           
  3583                           ;main.c: 157: if (screenMode == 8)
  3584  000910  0E08               	movlw	8
  3585  000912  1846               	xorwf	_screenMode,w,c
  3586  000914  A4D8               	btfss	status,2,c
  3587  000916  D003               	goto	i2l1595
  3588                           
  3589                           ;main.c: 158: screenMode = 2;
  3590  000918  0E02               	movlw	2
  3591  00091A  6E46               	movwf	_screenMode,c
  3592  00091C  0012               	return	
  3593  00091E                     i2l1595:
  3594                           
  3595                           ;main.c: 159: else
  3596                           ;main.c: 160: screenMode += 1;
  3597  00091E  2A46               	incf	_screenMode,f,c
  3598  000920  0012               	return	
  3599  000922                     __end_of_switchMenu:
  3600                           	opt stack 0
  3601                           pclatu	equ	0xFFB
  3602                           pclath	equ	0xFFA
  3603                           tblptru	equ	0xFF8
  3604                           tblptrh	equ	0xFF7
  3605                           tblptrl	equ	0xFF6
  3606                           tablat	equ	0xFF5
  3607                           prodh	equ	0xFF4
  3608                           prodl	equ	0xFF3
  3609                           intcon	equ	0xFF2
  3610                           intcon3	equ	0xFF0
  3611                           postinc0	equ	0xFEE
  3612                           fsr0h	equ	0xFEA
  3613                           fsr0l	equ	0xFE9
  3614                           wreg	equ	0xFE8
  3615                           fsr1h	equ	0xFE2
  3616                           fsr1l	equ	0xFE1
  3617                           indf2	equ	0xFDF
  3618                           postinc2	equ	0xFDE
  3619                           postdec2	equ	0xFDD
  3620                           fsr2h	equ	0xFDA
  3621                           fsr2l	equ	0xFD9
  3622                           status	equ	0xFD8
  3623                           pclatu	equ	0xFFB
  3624                           pclath	equ	0xFFA
  3625                           tblptru	equ	0xFF8
  3626                           tblptrh	equ	0xFF7
  3627                           tblptrl	equ	0xFF6
  3628                           tablat	equ	0xFF5
  3629                           prodh	equ	0xFF4
  3630                           prodl	equ	0xFF3
  3631                           intcon	equ	0xFF2
  3632                           intcon3	equ	0xFF0
  3633                           postinc0	equ	0xFEE
  3634                           fsr0h	equ	0xFEA
  3635                           fsr0l	equ	0xFE9
  3636                           wreg	equ	0xFE8
  3637                           fsr1h	equ	0xFE2
  3638                           fsr1l	equ	0xFE1
  3639                           indf2	equ	0xFDF
  3640                           postinc2	equ	0xFDE
  3641                           postdec2	equ	0xFDD
  3642                           fsr2h	equ	0xFDA
  3643                           fsr2l	equ	0xFD9
  3644                           status	equ	0xFD8
  3645                           
  3646                           	psect	rparam
  3647  0000                     pclatu	equ	0xFFB
  3648                           pclath	equ	0xFFA
  3649                           tblptru	equ	0xFF8
  3650                           tblptrh	equ	0xFF7
  3651                           tblptrl	equ	0xFF6
  3652                           tablat	equ	0xFF5
  3653                           prodh	equ	0xFF4
  3654                           prodl	equ	0xFF3
  3655                           intcon	equ	0xFF2
  3656                           intcon3	equ	0xFF0
  3657                           postinc0	equ	0xFEE
  3658                           fsr0h	equ	0xFEA
  3659                           fsr0l	equ	0xFE9
  3660                           wreg	equ	0xFE8
  3661                           fsr1h	equ	0xFE2
  3662                           fsr1l	equ	0xFE1
  3663                           indf2	equ	0xFDF
  3664                           postinc2	equ	0xFDE
  3665                           postdec2	equ	0xFDD
  3666                           fsr2h	equ	0xFDA
  3667                           fsr2l	equ	0xFD9
  3668                           status	equ	0xFD8
  3669                           
  3670                           	psect	temp
  3671  000047                     btemp:
  3672                           	opt stack 0
  3673  000047                     	ds	1
  3674  0000                     int$flags	set	btemp
  3675                           pclatu	equ	0xFFB
  3676                           pclath	equ	0xFFA
  3677                           tblptru	equ	0xFF8
  3678                           tblptrh	equ	0xFF7
  3679                           tblptrl	equ	0xFF6
  3680                           tablat	equ	0xFF5
  3681                           prodh	equ	0xFF4
  3682                           prodl	equ	0xFF3
  3683                           intcon	equ	0xFF2
  3684                           intcon3	equ	0xFF0
  3685                           postinc0	equ	0xFEE
  3686                           fsr0h	equ	0xFEA
  3687                           fsr0l	equ	0xFE9
  3688                           wreg	equ	0xFE8
  3689                           fsr1h	equ	0xFE2
  3690                           fsr1l	equ	0xFE1
  3691                           indf2	equ	0xFDF
  3692                           postinc2	equ	0xFDE
  3693                           postdec2	equ	0xFDD
  3694                           fsr2h	equ	0xFDA
  3695                           fsr2l	equ	0xFD9
  3696                           status	equ	0xFD8


Data Sizes:
    Strings     338
    Constant    35
    Data        1
    BSS         7
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     62      70
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 25
		 -> STR_18(CODE[23]), STR_17(CODE[23]), STR_16(CODE[21]), STR_15(CODE[17]), 
		 -> STR_14(CODE[21]), STR_13(CODE[17]), STR_12(CODE[19]), STR_11(CODE[17]), 
		 -> STR_10(CODE[19]), STR_9(CODE[17]), STR_8(CODE[25]), STR_7(CODE[17]), 
		 -> STR_6(CODE[17]), STR_5(CODE[17]), STR_4(CODE[19]), STR_3(CODE[17]), 
		 -> STR_2(CODE[17]), STR_1(CODE[17]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _I2C_Master_Init->___lldiv

Critical Paths under _keypressed in COMRAM

    _keypressed->_switchMenu

Critical Paths under _main in BANK0

    None.

Critical Paths under _keypressed in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _keypressed in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _keypressed in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _keypressed in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _keypressed in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _keypressed in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _keypressed in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _keypressed in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _keypressed in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _keypressed in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _keypressed in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _keypressed in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _keypressed in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _keypressed in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _keypressed in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _keypressed in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                10    10      0    4419
                                             52 COMRAM    10    10      0
                    _I2C_Master_Init
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              31    23      8    3299
                                             30 COMRAM    22    14      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      90
                                             20 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             18 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     287
                                             18 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     287
                                             25 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     418
                                             18 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0      90
                                             21 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0      90
                                             20 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0      75
                                             18 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Write                                     2     0      2     214
                                             19 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Read                                      2     2      0      30
                                             19 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Wait                                      1     1      0       0
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     376
                                             31 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     290
                                             18 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _keypressed                                          15    15      0     261
                                              3 COMRAM    15    15      0
                         _switchMenu
 ---------------------------------------------------------------------------------
 (5) _switchMenu                                           3     1      2     216
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _I2C_Master_Read
     _I2C_Master_Wait
   _I2C_Master_Start
     _I2C_Master_Wait
   _I2C_Master_Stop
     _I2C_Master_Wait
   _I2C_Master_Write
     _I2C_Master_Wait
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
       _lcdNibble

 _keypressed (ROOT)
   _switchMenu

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     3E      46       1       55.6%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      46      34        0.0%
DATA                 0      0      46       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Fri Feb 03 23:56:06 2017

                       l34 09B8        ___wmul@multiplicand 0015                __CFG_BORV$3 000000  
             __CFG_CP0$OFF 000000               __CFG_CP1$OFF 000000               __CFG_CP2$OFF 000000  
             __CFG_CP3$OFF 000000                __CFG_OSC$HS 000000                        l131 0352  
                      l141 03F4                        l150 04A2                        l134 0384  
                      l144 0424                        l136 03E6                        l217 00FE  
                      l153 04DE                        l156 051A                        l609 0758  
                      l662 080C                        l672 08E2               __CFG_CPB$OFF 000000  
                      u150 0992                        _PEN 007E2A               __CFG_CPD$OFF 000000  
                      _SEN 007E28                        u765 0798                        prod 000FF3  
                      wreg 000FE8               __CFG_LVP$OFF 000000               __CFG_WDT$OFF 000000  
                     l1009 0994                       l1411 07E6                       l1407 07DA  
                     l1431 08C4                       l1511 0176                       l1409 07E2  
                     l1513 017A                       l1419 0802                       l1435 08D8  
                     l1427 08B8                       l1429 08C0                       l1541 01FC  
                     l1453 001C                       l1701 04D4                       l1535 01D0  
                     l1527 01A6                       l1463 0040                       l1631 03A4  
                     l1385 070A                       l1369 09B0                       l1553 0228  
                     l1529 01B6                       l1481 00D0                       l1457 002C  
                     l1641 03CE                       l1617 0378                       l1387 0716  
                     l1555 0230                       l1563 0256                       l1547 0212  
                     l1539 01F4                       l1459 003A                       l1731 0556  
                     l1715 0510                       l1627 039C                       l1651 03EC  
                     l1619 037A                       l1397 074A                       l1389 071A  
                     l1565 025C                       l1573 02E6                       l1493 012C  
                     l1477 00CC                       l1469 006E                       l1661 041C  
                     l1645 03E2                       l1637 03C6                       l1567 02A0  
                     l1575 02F6                       l1559 0244                       l1735 058A  
                     l1751 0602                       l1577 02FC                       l1497 0146  
                     l1745 05AE                       l1729 054C                       l1499 014A  
                     l1579 0304                       l1739 0592                       l1675 0460  
                     l1677 046A                       l1687 0498                       STR_1 FFDC  
                     STR_2 FFED                       STR_3 FF54                       STR_4 FF1D  
                     STR_5 FFA9                       STR_6 FF76                       STR_7 FFBA  
                     STR_8 FEAC                       STR_9 FFCB                       u1307 085E  
                     _LATB 000F8A                       u1247 03D4                       _LATC 000F8B  
                     _LATD 000F8C                       u1257 086A                       u1267 089E  
                     u1277 082E                       u1287 0836                       u1297 0856  
                     _RCEN 007E2B                       _RSEN 007E29                main@numBats 0038  
                     _main 031E                       _keys FE89                       _time 003F  
                     fsr0h 000FEA                       fsr1h 000FE2                       fsr2h 000FDA  
                     fsr0l 000FE9                       indf2 000FDF                       fsr1l 000FE1  
                     fsr2l 000FD9                       btemp 0047                       prodh 000FF4  
                     prodl 000FF3                       start 000E              __CFG_IESO$OFF 000000  
            __CFG_MCLRE$ON 000000               ___param_bank 000000           ?_I2C_Master_Init 0020  
         ?_I2C_Master_Read 0001           ?_I2C_Master_Wait 0001           ?_I2C_Master_Stop 0001  
                    ?_main 0001                      _ACKEN 007E2C                      _ACKDT 007E2D  
                    STR_10 FF30                      STR_11 FF65                      STR_12 FF30  
                    STR_13 FF98                      STR_14 FEF3                      STR_15 FF87  
                    STR_16 FF08                      STR_17 FEC5                      STR_18 FEDC  
                    STR_19 FF43            __end_of___lldiv 076A            __end_of___lwdiv 0816  
          __end_of___lwmod 08EC                      i2l185 06AC                      _PORTB 000F81  
                    _TRISB 000F93                      _TRISC 000F94                      _TRISD 000F95  
            __CFG_PWRT$OFF 000000              __CFG_WRT0$OFF 000000              __CFG_WRT1$OFF 000000  
            __CFG_WRT2$OFF 000000              __CFG_WRT3$OFF 000000            __end_of_lcdInst 09E2  
           __CFG_EBTR0$OFF 000000             __CFG_FCMEN$OFF 000000             __CFG_EBTR1$OFF 000000  
           __CFG_EBTR2$OFF 000000             __CFG_EBTR3$OFF 000000              __CFG_WRTB$OFF 000000  
            __CFG_WRTC$OFF 000000              __CFG_WRTD$OFF 000000            __end_of_initLCD 08AA  
           __CFG_EBTRB$OFF 000000            __end_of_dpowers FEA4            __end_of_isdigit 09B8  
                    _putch 09CA                      main@i 003D                      pclath 000FFA  
                    tablat 000FF5                      status 000FD8             __CFG_PBADEN$ON 000000  
          __initialization 0922               __end_of_main 060C               __end_of_keys FE9A  
                   ??_main 0035              __activetblptr 000002          ?_I2C_Master_Start 0001  
        ?_I2C_Master_Write 0014         ??_I2C_Master_Start 0014                     _ADCON0 000FC2  
                   _ADCON1 000FC1         ??_I2C_Master_Write 0016                     ?_putch 0001  
                   _INT1IE 007F83                     _INT1IF 007F80                     i2l1595 091E  
                   i2l1587 0904                     i2l1771 06AA                     i2l1763 0678  
                   i2l1589 0908                     i2l1767 0684                     _SSPADD 000FC8  
                   _TRISC3 007CA3                     _TRISC4 007CA4                     _SSPBUF 000FC9  
           __CFG_XINST$OFF 000000                     ___wmul 094E             __CFG_STVREN$ON 000000  
                ??___lldiv 001B                  ??___lwdiv 0017                  ??___lwmod 001E  
                   clear_0 093A                  ??_lcdInst 0015                     _printf 0012  
                ??_initLCD 0016               __pdataCOMRAM 0046                  ??_isdigit 0013  
             __mediumconst FE88                     tblptrh 000FF7                     tblptrl 000FF6  
                   tblptru 000FF8            switchMenu@right 0001                 __accesstop 0080  
  __end_of__initialization 0940              ___rparam_used 000001             __pcstackCOMRAM 0001  
            __end_of_putch 09D6         __size_of_lcdNibble 004E                    ??_putch 0015  
                  ?___wmul 0013                    ?_printf 001F                    _SSPCON1 000FC6  
                  _SSPCON2 000FC5                    _SSPSTAT 000FC7          __end_of_lcdNibble 0864  
                  __Hparam 0000                    __Lparam 0000                    ___lldiv 06E8  
          __size_of___wmul 0026                    ___lwdiv 07C4                    ___lwmod 08AA  
                  __pcinit 0922                    __ramtop 1000                    _lcdInst 09D6  
                  __ptext0 031E                    __ptext1 0012                    __ptext2 09CA  
                  __ptext3 099A                    __ptext4 094E                    __ptext5 08AA  
                  __ptext6 07C4                    __ptext7 0864                    __ptext8 09D6  
                  __ptext9 0816            __size_of_printf 030C                    _initLCD 0864  
        __end_of_hexpowers FEAC                    _dpowers FE9A                    _isdigit 099A  
               _keypressed 0008   __size_of_I2C_Master_Init 005A   __size_of_I2C_Master_Read 0026  
 __size_of_I2C_Master_Wait 0012   __size_of_I2C_Master_Stop 0008                    main@min 0036  
                  main@sec 0037             __pintcode_body 060C       end_of_initialization 0940  
            __Lmediumconst FE88                    int_func 060C                 _screenMode 0046  
__size_of_I2C_Master_Start 0008  __size_of_I2C_Master_Write 000A            ___lldiv@divisor 0017  
          ___lldiv@counter 001F                    printf@c 0034                    printf@f 001F  
         I2C_Master_Init@c 0020           I2C_Master_Read@a 0014                    postdec2 000FDD  
                  postinc0 000FEE                    postinc2 000FDE                printf@width 0032  
               _switchMenu 08EC             __end_of___wmul 0974              __pidataCOMRAM 09FC  
           __end_of_printf 031E        start_initialization 0922                ?_keypressed 0001  
        ??_I2C_Master_Init 0024          ??_I2C_Master_Read 0014          ??_I2C_Master_Wait 0013  
        ??_I2C_Master_Stop 0014                   ??___wmul 0017           __CFG_LPT1OSC$OFF 000000  
           switchMenu@left 0003                   ??_printf 0027                __pbssCOMRAM 003F  
         _I2C_Master_Start 09F4           _I2C_Master_Write 09E2           ___lwdiv@dividend 0013  
        __CFG_CCP2MX$PORTC 000000                ?_switchMenu 0001        __size_of_keypressed 06E0  
                __pintcode 0008              __pmediumconst FE88                  _lcdNibble 0816  
                 ?___lldiv 0013                   ?___lwdiv 0013                   ?___lwmod 001A  
                 ?_lcdInst 0001                   ?_initLCD 0001                   ?_isdigit 0001  
                _hexpowers FEA4           ___lwdiv@quotient 0017             __size_of_putch 000C  
           ___wmul@product 0017                   _LATDbits 000F8C           __CFG_WDTPS$32768 000000  
               ?_lcdNibble 0001                  main@i_215 003C                  main@i_237 003E  
        ___wmul@multiplier 0013              lcdNibble@data 0014                 printf@flag 0031  
            lcdNibble@temp 0013                 printf@prec 002E                  main@numAA 003B  
                main@num9V 003A        __size_of_switchMenu 0036        I2C_Master_Read@temp 0015  
       keypressed@keypress 0012                   __Hrparam 0000                   __Lrparam 0000  
       __CFG_BOREN$SBORDIS 000000              switchMenu@key 0002           __size_of___lldiv 0082  
         __size_of___lwdiv 0052           __size_of___lwmod 0042                _isdigit$498 0014  
         __size_of_lcdInst 000C            _I2C_Master_Init 076A            _I2C_Master_Read 0974  
         __size_of_initLCD 0046            _I2C_Master_Wait 09B8            _I2C_Master_Stop 09EC  
             ??_keypressed 0004           __size_of_isdigit 001E            ___lwdiv@divisor 0015  
          ___lwdiv@counter 0019                   __ptext10 09E2                   __ptext11 09EC  
                 __ptext12 09F4                   __ptext13 0974                   __ptext14 09B8  
                 __ptext15 076A                   __ptext16 06E8                   __ptext18 08EC  
            __size_of_main 02EE                ??_lcdNibble 0013         __end_of_keypressed 06E8  
                 int$flags 0047                  printf@idx 002B                  printf@val 002F  
                 main@numC 0039                  putch@data 0015   __end_of_I2C_Master_Start 09FC  
 __end_of_I2C_Master_Write 09EC                 _INTCONbits 000FF2                   isdigit@c 0015  
                 intlevel2 0000           ___lwmod@dividend 001A           ___lldiv@dividend 0013  
             ??_switchMenu 0003                   printf@ap 002C    __end_of_I2C_Master_Init 07C4  
  __end_of_I2C_Master_Read 099A    __end_of_I2C_Master_Wait 09CA    __end_of_I2C_Master_Stop 09F4  
              lcdInst@data 0015           ___lldiv@quotient 001B          I2C_Master_Write@d 0014  
          ___lwmod@divisor 001C            ___lwmod@counter 001E         __end_of_switchMenu 0922  
